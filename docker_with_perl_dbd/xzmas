                +------------+------------+
                |            |            |
              B::PV        B::IV        B::NV
               /  \         /           /
              /    \       /           /
        B::INVLIST  B::PVIV           /
                         \           /
                          \         /
                           \       /
                            B::PVNV
                               |
                               |
                            B::PVMG
                               |
           +-------+-------+---+---+-------+-------+
           |       |       |       |       |       |
         B::AV   B::GV   B::HV   B::CV   B::IO B::REGEXP
                   |               |
                   |               |
                B::PVLV          B::FM


Access methods correspond to the underlying C macros for field access,
usually with the leading "class indication" prefix removed (Sv, Av,
Hv, ...).  The leading prefix is only left in cases where its removal
would cause a clash in method name.  For example, C<GvREFCNT> stays
as-is since its abbreviation would clash with the "superclass" method
C<REFCNT> (corresponding to the C function C<SvREFCNT>).

=head2 B::SV Methods

=over 4

=item REFCNT

=item FLAGS

=item IsBOOL

Returns true if the SV is a boolean (true or false).
You can then use C<TRUE> to check if the value is true or false.

    my $something = ( 1 == 1 ) # boolean true
                 || ( 1 == 0 ) # boolean false
                 || 42         # IV true
                 || 0;         # IV false
    my $sv = B::svref_2object(\$something);

    say q[Not a boolean value]
        if ! $sv->IsBOOL;

    say q[This is a boolean with value: true]
        if   $sv->IsBOOL && $sv->TRUE_nomg;

    say q[This is a boolean with value: false]
        if   $sv->IsBOOL && ! $sv->TRUE_nomg;

=item object_2svref

Returns a reference to the regular scalar corresponding to this
B::SV object.  In other words, this method is the inverse operation
to the svref_2object() subroutine.  This scalar and other data it points
at should be considered read-only: modifying them is neither safe nor
guaranteed to have a sensible effect.

=item TRUE

Returns a boolean indicating hether Perl would evaluate the SV as true or
false.

B<Warning> this call performs 'get' magic. If you only want to check the
nature of this SV use C<TRUE_nomg> helper.

This is an alias for C<SvTRUE($sv)>.

=item TRUE_nomg

Check if the value is true (do not perform 'get' magic).
Returns a boolean indicating whether Perl would evaluate the SV as true or
false.

This is an alias for C<SvTRUE_nomg($sv)>.

=back

=head2 B::IV Methods

=over 4

=item IV

Returns the value of the IV, I<interpreted as
a signed integer>.  This will be misleading
if C<FLAGS & SVf_IVisUV>.  Perhaps you want the
C<int_value> method instead?

=item IVX

=item UVX

=item int_value

This method returns the value of the IV as an integer.
It differs from C<IV> in that it returns the correct
value regardless of whether it's stored signed or
unsigned.

=item needs64bits

=item packiv

=back

=head2 B::NV Methods

=over 4

=item NV

=item NVX

=item COP_SEQ_RANGE_LOW

=item COP_SEQ_RANGE_HIGH

These last two are only valid for pad name SVs.  They only existed in the
B::NV class before Perl 5.22.  In 5.22 they were moved to the B::PADNAME
class.

=back

=head2 B::RV Methods

=over 4

=item RV

=back

=head2 B::PV Methods

=over 4

=item PV

This method is the one you usually want.  It constructs a
string using the length and offset information in the struct:
for ordinary scalars it will return the string that you'd see
from Perl, even if it contains null characters.

=item RV

Same as B::RV::RV, except that it will die() if the PV isn't
a reference.

=item PVX

This method is less often useful.  It assumes that the string
stored in the struct is null-terminated, and disregards the
length information.

It is the appropriate method to use if you need to get the name
of a lexical variable from a padname array.  Lexical variable names
are always stored with a null terminator, and the length field
(CUR) is overloaded for other purposes and can't be relied on here.

=item CUR

This method returns the internal length field, which consists of the number
of internal bytes, not necessarily the number of logical characters.

=item LEN

This method returns the number of bytes allocated (via malloc) for storing
the string.  This is 0 if the scalar does not "own" the string.

=back

=head2 B::PVMG Methods

=over 4

=item MAGIC

=item SvSTASH

=back

=head2 B::MAGIC Methods

=over 4

=item MOREMAGIC

=item precomp

Only valid on r-magic, returns the string that generated the regexp.

=item PRIVATE

=item TYPE

=item FLAGS

=item OBJ

Will die() if called on r-magic.

=item PTR

=item REGEX

Only valid on r-magic, returns the integer value of the REGEX stored
in the MAGIC.

=back

=head2 B::INVLIST Methods

=over 4

=item prev_index

Returns the cache result of previous invlist_search() (internal usage)

=item is_offset

Returns a boolean value (0 or 1) to know if the invlist is using an offset.
When false the list begins with the code point U+0000.
When true the list begins with the following elements.

=item array_len

Returns an integer with the size of the array used to define the invlist.

=item get_invlist_array

This method returns a list of integers representing the array used by the
invlist.
Note: this cannot be used while in middle of iterating on an invlist and croaks.

=back

=head2 B::PVLV Methods

=over 4

=item TARGOFF

=item TARGLEN

=item TYPE

=item TARG

=back

=head2 B::BM Methods

=over 4

=item USEFUL

=item PREVIOUS

=item RARE

=item TABLE

=back

=head2 B::REGEXP Methods

=over 4

=item REGEX

=item precomp

=item qr_anoncv

=item compflags

The last two were added in Perl 5.22.

=back

=head2 B::GV Methods

=over 4

=item is_empty

This method returns TRUE if the GP field of the GV is NULL.

=item NAME

=item SAFENAME

This method returns the name of the glob, but if the first
character of the name is a control character, then it converts
it to ^X first, so that *^G would return "^G" rather than "\cG".

It's useful if you want to print out the name of a variable.
If you restrict yourself to globs which exist at compile-time
then the result ought to be unambiguous, because code like
C<${"^G"} = 1> is compiled as two ops - a constant string and
a dereference (rv2gv) - so that the glob is created at runtime.

If you're working with globs at runtime, and need to disambiguate
*^G from *{"^G"}, then you should use the raw NAME method.

=item STASH

=item SV

=item IO

=item FORM

=item AV

=item HV

=item EGV

=item CV

=item CVGEN

=item LINE

=item FILE

=item FILEGV

=item GvREFCNT

=item FLAGS

=item GPFLAGS

This last one is present only in perl 5.22.0 and higher.

=back

=head2 B::IO Methods

B::IO objects derive from IO objects and you will get more information from
the IO object itself.

For example:

  $gvio = B::svref_2object(\*main::stdin)->IO;
  $IO = $gvio->object_2svref();
  $fd = $IO->fileno();

=over 4

=item LINES

=item PAGE

=item PAGE_LEN

=item LINES_LEFT

=item TOP_NAME

=item TOP_GV

=item FMT_NAME

=item FMT_GV

=item BOTTOM_NAME

=item BOTTOM_GV

=item SUBPROCESS

=item IoTYPE

A character symbolizing the type of IO Handle.

  -     STDIN/OUT
  I     STDIN/OUT/ERR
  <     read-only
  >     write-only
  a     append
  +     read and write
  s     socket
  |     pipe
  I     IMPLICIT
  #     NUMERIC
  space closed handle
  \0    closed internal handle

=item IoFLAGS

=item IsSTD

Takes one argument ( 'stdin' | 'stdout' | 'stderr' ) and returns true
if the IoIFP of the object is equal to the handle whose name was
passed as argument; i.e., $io->IsSTD('stderr') is true if
IoIFP($io) == PerlIO_stderr().

=back

=head2 B::AV Methods

=over 4

=item FILL

=item MAX

=item ARRAY

=item ARRAYelt

Like C<ARRAY>, but takes an index as an argument to get only one element,
rather than a list of all of them.

=back

=head2 B::CV Methods

=over 4

=item STASH

=item START

=item ROOT

=item GV

=item FILE

=item DEPTH

=item PADLIST

Returns a B::PADLIST object.

=item OUTSIDE

=item OUTSIDE_SEQ

=item XSUB

=item XSUBANY

For constant subroutines, returns the constant SV returned by the subroutine.

=item CvFLAGS

=item const_sv

=item NAME_HEK

Returns the name of a lexical sub, otherwise C<undef>.

=back

=head2 B::HV Methods

=over 4

=item FILL

=item MAX

=item KEYS

=item RITER

=item NAME

=item ARRAY

=back

=head2 OP-RELATED CLASSES

C<B::OP>, C<B::UNOP>, C<B::UNOP_AUX>, C<B::BINOP>, C<B::LOGOP>,
C<B::LISTOP>, C<B::PMOP>, C<B::SVOP>, C<B::PADOP>, C<B::PVOP>, C<B::LOOP>,
C<B::COP>, C<B::METHOP>.

These classes correspond in the obvious way to the underlying C
structures of similar names.  The inheritance hierarchy mimics the
underlying C "inheritance":

                                 B::OP
                                   |
                   +----------+---------+--------+-------+---------+
                   |          |         |        |       |         |
                B::UNOP    B::SVOP  B::PADOP  B::COP  B::PVOP  B::METHOP
                   |
               +---+---+---------+
               |       |         |
           B::BINOP  B::LOGOP  B::UNOP_AUX
               |
               |
           B::LISTOP
               |
           +---+---+
           |       |
        B::LOOP   B::PMOP

Access methods correspond to the underlying C structure field names,
with the leading "class indication" prefix (C<"op_">) removed.

=head2 B::OP Methods

These methods get the values of similarly named fields within the OP
data structure.  See top of C<op.h> for more info.

=over 4

=item next

=item sibling

=item parent

Returns the OP's parent. If it has no parent, or if your perl wasn't built
with C<-DPERL_OP_PARENT>, returns NULL.

Note that the global variable C<$B::OP::does_parent> is undefined on older
perls that don't support the C<parent> method, is defined but false on
perls that support the method but were built without  C<-DPERL_OP_PARENT>,
and is true otherwise.

=item name

This returns the op name as a string (e.g. "add", "rv2av").

=item ppaddr

This returns the function name as a string (e.g. "PL_ppaddr[OP_ADD]",
"PL_ppaddr[OP_RV2AV]").

=item desc

This returns the op description from the global C PL_op_desc array
(e.g. "addition" "array deref").

=item targ

=item type

=item opt

=item flags

=item private

=item spare

=back

=head2 B::UNOP Method

=over 4

=item first

=back

=head2 B::UNOP_AUX Methods (since 5.22)

=over 4

=item aux_list(cv)

This returns a list of the elements of the op's aux data structure,
or a null list if there is no aux. What will be returned depends on the
object's type, but will typically be a collection of C<B::IV>, C<B::GV>,
etc. objects. C<cv> is the C<B::CV> object representing the sub that the
op is contained within.

=item string(cv)

This returns a textual representation of the object (likely to b useful
for deparsing and debugging), or an empty string if the op type doesn't
support this. C<cv> is the C<B::CV> object representing the sub that the
op is contained within.

=back

=head2 B::BINOP Method

=over 4

=item last

=back

=head2 B::LOGOP Method

=over 4

=item other

=back

=head2 B::LISTOP Method

=over 4

=item children

=back

=head2 B::PMOP Methods

=over 4

=item pmreplroot

=item pmreplstart

=item pmflags

=item precomp

=item pmoffset

Only when perl was compiled with ithreads.

=item code_list

Since perl 5.17.1

=item pmregexp

Added in perl 5.22, this method returns the B::REGEXP associated with the
op.  While PMOPs do not actually have C<pmregexp> fields under threaded
builds, this method returns the regexp under threads nonetheless, for
convenience.

=back

=head2 B::SVOP Methods

=over 4

=item sv

=item gv

=back

=head2 B::PADOP Method

=over 4

=item padix

=back

=head2 B::PVOP Method

=over 4

=item pv

=back

=head2 B::LOOP Methods

=over 4

=item redoop

=item nextop

=item lastop

=back

=head2 B::COP Methods

The C<B::COP> class is used for "nextstate" and "dbstate" ops.  As of Perl
5.22, it is also used for "null" ops that started out as COPs.

=over 4

=item label

=item stash

=item stashpv

=item stashoff (threaded only)

=item file

=item cop_seq

=item line

=item warnings

=item io

=item hints

=item hints_hash

=back

=head2 B::METHOP Methods (Since Perl 5.22)

=over 4

=item first

=item meth_sv

=back

=head2 PAD-RELATED CLASSES

Perl 5.18 introduced a new class, B::PADLIST, returned by B::CV's
C<PADLIST> method.

Perl 5.22 introduced the B::PADNAMELIST and B::PADNAME classes.

=head2 B::PADLIST Methods

=over 4

=item MAX

=item ARRAY

A list of pads.  The first one is a B::PADNAMELIST containing the names.
The rest are currently B::AV objects, but that could
change in future versions.

=item ARRAYelt

Like C<ARRAY>, but takes an index as an argument to get only one element,
rather than a list of all of them.

=item NAMES

This method, introduced in 5.22, returns the B::PADNAMELIST.  It is
equivalent to C<ARRAYelt> with a 0 argument.

=item REFCNT

=item id

This method, introduced in 5.22, returns an ID shared by clones of the same
padlist.

=item outid

This method, also added in 5.22, returns the ID of the outer padlist.

=back

=head2 B::PADNAMELIST Methods

=over 4

=item MAX

=item ARRAY

=item ARRAYelt

These two methods return the pad names, using B::SPECIAL objects for null
pointers and B::PADNAME objects otherwise.

=item REFCNT

=back

=head2 B::PADNAME Methods

=over 4

=item PV

=item PVX

=item LEN

=item REFCNT

=item GEN

=item FLAGS

For backward-compatibility, if the PADNAMEt_OUTER flag is set, the FLAGS
method adds the SVf_FAKE flag, too.

=item TYPE

A B::HV object representing the stash for a typed lexical.

=item SvSTASH

A backward-compatibility alias for TYPE.

=item OURSTASH

A B::HV object representing the stash for 'our' variables.

=item PROTOCV

The prototype CV for a 'my' sub.

=item COP_SEQ_RANGE_LOW

=item COP_SEQ_RANGE_HIGH

Sequence numbers representing the scope within which a lexical is visible.
Meaningless if PADNAMEt_OUTER is set.

=item PARENT_PAD_INDEX

Only meaningful if PADNAMEt_OUTER is set.

=item PARENT_FAKELEX_FLAGS

Only meaningful if PADNAMEt_OUTER is set.

=item IsUndef

Returns a boolean value to check if the padname is PL_padname_undef.

=back

=head2 $B::overlay

Although the optree is read-only, there is an overlay facility that allows
you to override what values the various B::*OP methods return for a
particular op. C<$B::overlay> should be set to reference a two-deep hash:
indexed by OP address, then method name. Whenever a an op method is
called, the value in the hash is returned if it exists. This facility is
used by B::Deparse to "undo" some optimisations. For example:


    local $B::overlay = {};
    ...
    if ($op->name eq "foo") {
        $B::overlay->{$$op} = {
                name => 'bar',
                next => $op->next->next,
        };
    }
    ...
    $op->name # returns "bar"
    $op->next # returns the next op but one


=head1 AUTHOR

Malcolm Beattie, C<mbeattie@sable.ox.ac.uk>

=cut
                                                                                                                                                                                                                                                                                                                                                                                                              usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/CORE/                                                   0000755 0000000 0000000 00000000000 14714567415 017120  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/CORE/EXTERN.h                                           0000444 0000000 0000000 00000003061 14714567415 020274  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*    EXTERN.h
 *
 *    Copyright (C) 1991, 1992, 1993, 1995, 1996, 1997, 1998, 1999,
 *    2000, 2001, by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

/*
 * EXT:  designates a global var which is defined in perl.h
 *
 * dEXT: designates a global var which is defined in another
 *       file, so we can't count on finding it in perl.h
 *       (this practice should be avoided).
 */
#undef EXT
#undef dEXT
#undef EXTCONST
#undef dEXTCONST

#  if defined(WIN32) && !defined(PERL_STATIC_SYMS)
    /* miniperl should not export anything */
#    if defined(PERL_IS_MINIPERL)
#      define EXT extern
#      define dEXT 
#      define EXTCONST extern const
#      define dEXTCONST const
#    elif defined(PERLDLL)
#      define EXT EXTERN_C __declspec(dllexport)
#      define dEXT 
#      define EXTCONST EXTERN_C __declspec(dllexport) const
#      define dEXTCONST const
#    else
#      define EXT EXTERN_C __declspec(dllimport)
#      define dEXT 
#      define EXTCONST EXTERN_C __declspec(dllimport) const
#      define dEXTCONST const
#    endif
#  else
#    if defined(__CYGWIN__) && defined(USEIMPORTLIB)
#      define EXT extern __declspec(dllimport)
#      define dEXT 
#      define EXTCONST extern __declspec(dllimport) const
#      define dEXTCONST const
#    else
#      define EXT extern
#      define dEXT
#      define EXTCONST extern const
#      define dEXTCONST const
#    endif
#  endif

#undef INIT
#define INIT(...)

#undef DOINIT
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/CORE/INTERN.h                                           0000444 0000000 0000000 00000002410 14714567415 020263  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*    INTERN.h
 *
 *    Copyright (C) 1991, 1992, 1993, 1995, 1996, 1998, 2000, 2001,
 *    by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

/*
 * EXT  designates a global var which is defined in perl.h
 * dEXT designates a global var which is defined in another
 *      file, so we can't count on finding it in perl.h
 *      (this practice should be avoided).
 */
#undef EXT
#undef dEXT
#undef EXTCONST
#undef dEXTCONST

#  if (defined(WIN32) && defined(__MINGW32__) && ! defined(PERL_IS_MINIPERL))
#    ifdef __cplusplus
#      define EXT	__declspec(dllexport)
#      define dEXT
#      define EXTCONST	__declspec(dllexport) extern const
#      define dEXTCONST	const
#    else
#      define EXT	__declspec(dllexport)
#      define dEXT
#      define EXTCONST	__declspec(dllexport) const
#      define dEXTCONST	const
#    endif
#  else
#    ifdef __cplusplus
#      define EXT
#      define dEXT
#      define EXTCONST EXTERN_C const
#      define dEXTCONST const
#    else
#      define EXT
#      define dEXT
#      define EXTCONST const
#      define dEXTCONST const
#    endif
#  endif

#undef INIT
#define INIT(...) = __VA_ARGS__

#define DOINIT
                                                                                                                                                                                                                                                        usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/CORE/XSUB.h                                             0000444 0000000 0000000 00000057356 14714567415 020070  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*    XSUB.h
 *
 *    Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
 *    2003, 2004, 2005, 2006, 2007, 2008 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

#ifndef PERL_XSUB_H_
#define PERL_XSUB_H_ 1

/* first, some documentation for xsubpp-generated items */

/*
=for apidoc_section $XS

F<xsubpp> compiles XS code into C.  See L<perlutil/xsubpp>.

=for comment
Some variables below are flagged with 'u' because Devel::PPPort can't currently
readily test them as they spring into existence by compiling with xsubpp.

