Some patterns starting with C</.*..../> matched against long strings have
been slow since v5.8, and some of the form C</.*..../i> have been slow
since v5.18. They are now all fast again.
L<[GH #14475]|https://github.com/Perl/perl5/issues/14475>.

=item *

The original visible value of C<$/> is now preserved when it is set to
an invalid value.  Previously if you set C<$/> to a reference to an
array, for example, perl would produce a runtime error and not set
C<PL_rs>, but Perl code that checked C<$/> would see the array
reference.
L<[GH #14245]|https://github.com/Perl/perl5/issues/14245>.

=item *

In a regular expression pattern, a POSIX class, like C<[:ascii:]>, must
be inside a bracketed character class, like C<qr/[[:ascii:]]/>.  A
warning is issued when something looking like a POSIX class is not
inside a bracketed class.  That warning wasn't getting generated when
the POSIX class was negated: C<[:^ascii:]>.  This is now fixed.

=item *

Perl 5.14.0 introduced a bug whereby S<C<eval { LABEL: }>> would crash.  This
has been fixed.
L<[GH #14438]|https://github.com/Perl/perl5/issues/14438>.

=item *

Various crashes due to the parser getting confused by syntax errors have
been fixed.
L<[GH #14421]|https://github.com/Perl/perl5/issues/14421>.
L<[GH #14472]|https://github.com/Perl/perl5/issues/14472>.
L<[GH #14480]|https://github.com/Perl/perl5/issues/14480>.
L<[GH #14447]|https://github.com/Perl/perl5/issues/14447>.

=item *

Code like C</$a[/> used to read the next line of input and treat it as
though it came immediately after the opening bracket.  Some invalid code
consequently would parse and run, but some code caused crashes, so this is
now disallowed.
L<[GH #14462]|https://github.com/Perl/perl5/issues/14462>.

=item *

Fix argument underflow for C<pack>.
L<[GH #14525]|https://github.com/Perl/perl5/issues/14525>.

=item *

Fix handling of non-strict C<\x{}>. Now C<\x{}> is equivalent to C<\x{0}>
instead of faulting.

=item *

C<stat -t> is now no longer treated as stackable, just like C<-t stat>.
L<[GH #14499]|https://github.com/Perl/perl5/issues/14499>.

=item *

The following no longer causes a SEGV: C<qr{x+(y(?0))*}>.

=item *

Fixed infinite loop in parsing backrefs in regexp patterns.

=item *

Several minor bug fixes in behavior of Infinity and NaN, including
warnings when stringifying Infinity-like or NaN-like strings. For example,
"NaNcy" doesn't numify to NaN anymore.

=item *

A bug in regular expression patterns that could lead to segfaults and
other crashes has been fixed.  This occurred only in patterns compiled
with C</i> while taking into account the current POSIX locale (which usually
means they have to be compiled within the scope of C<S<use locale>>),
and there must be a string of at least 128 consecutive bytes to match.
L<[GH #14389]|https://github.com/Perl/perl5/issues/14389>.

=item *

C<s///g> now works on very long strings (where there are more than 2
billion iterations) instead of dying with 'Substitution loop'.
L<[GH #11742]|https://github.com/Perl/perl5/issues/11742>.
L<[GH #14190]|https://github.com/Perl/perl5/issues/14190>.

=item *

C<gmtime> no longer crashes with not-a-number values.
L<[GH #14365]|https://github.com/Perl/perl5/issues/14365>.

=item *

C<\()> (a reference to an empty list), and C<y///> with lexical C<$_> in
scope, could both do a bad write past the end of the stack.  They have
both been fixed to extend the stack first.

=item *

C<prototype()> with no arguments used to read the previous item on the
stack, so S<C<print "foo", prototype()>> would print foo's prototype.
It has been fixed to infer C<$_> instead.
L<[GH #14376]|https://github.com/Perl/perl5/issues/14376>.

=item *

Some cases of lexical state subs declared inside predeclared subs could
crash, for example when evalling a string including the name of an outer
variable, but no longer do.

=item *

Some cases of nested lexical state subs inside anonymous subs could cause
'Bizarre copy' errors or possibly even crashes.

=item *

When trying to emit warnings, perl's default debugger (F<perl5db.pl>) was
sometimes giving 'Undefined subroutine &DB::db_warn called' instead.  This
bug, which started to occur in Perl 5.18, has been fixed.
L<[GH #14400]|https://github.com/Perl/perl5/issues/14400>.

=item *

Certain syntax errors in substitutions, such as C<< s/${<>{})// >>, would
crash, and had done so since Perl 5.10.  (In some cases the crash did not
start happening till 5.16.)  The crash has, of course, been fixed.
L<[GH #14391]|https://github.com/Perl/perl5/issues/14391>.

=item *

Fix a couple of string grow size calculation overflows; in particular,
a repeat expression like S<C<33 x ~3>> could cause a large buffer
overflow since the new output buffer size was not correctly handled by
C<SvGROW()>.  An expression like this now properly produces a memory wrap
panic.
L<[GH #14401]|https://github.com/Perl/perl5/issues/14401>.

=item *

C<< formline("@...", "a"); >> would crash.  The C<FF_CHECKNL> case in
C<pp_formline()> didn't set the pointer used to mark the chop position,
which led to the C<FF_MORE> case crashing with a segmentation fault.
This has been fixed.
L<[GH #14388]|https://github.com/Perl/perl5/issues/14388>.

=item *

A possible buffer overrun and crash when parsing a literal pattern during
regular expression compilation has been fixed.
L<[GH #14416]|https://github.com/Perl/perl5/issues/14416>.

=item *

C<fchmod()> and C<futimes()> now set C<$!> when they fail due to being
passed a closed file handle.
L<[GH #14073]|https://github.com/Perl/perl5/issues/14073>.

=item *

C<op_free()> and C<scalarvoid()> no longer crash due to a stack overflow
when freeing a deeply recursive op tree.
L<[GH #11866]|https://github.com/Perl/perl5/issues/11866>.

=item *

In Perl 5.20.0, C<$^N> accidentally had the internal UTF-8 flag turned off
if accessed from a code block within a regular expression, effectively
UTF-8-encoding the value.  This has been fixed.
L<[GH #14211]|https://github.com/Perl/perl5/issues/14211>.

=item *

A failed C<semctl> call no longer overwrites existing items on the stack,
which means that C<(semctl(-1,0,0,0))[0]> no longer gives an
"uninitialized" warning.

=item *

C<else{foo()}> with no space before C<foo> is now better at assigning the
right line number to that statement.
L<[GH #14070]|https://github.com/Perl/perl5/issues/14070>.

=item *

Sometimes the assignment in C<@array = split> gets optimised so that C<split>
itself writes directly to the array.  This caused a bug, preventing this
assignment from being used in lvalue context.  So
C<(@a=split//,"foo")=bar()> was an error.  (This bug probably goes back to
Perl 3, when the optimisation was added.) It has now been fixed.
L<[GH #14183]|https://github.com/Perl/perl5/issues/14183>.

=item *

When an argument list fails the checks specified by a subroutine
signature (which is still an experimental feature), the resulting error
messages now give the file and line number of the caller, not of the
called subroutine.
L<[GH #13643]|https://github.com/Perl/perl5/issues/13643>.

=item *

The flip-flop operators (C<..> and C<...> in scalar context) used to maintain
a separate state for each recursion level (the number of times the
enclosing sub was called recursively), contrary to the documentation.  Now
each closure has one internal state for each flip-flop.
L<[GH #14110]|https://github.com/Perl/perl5/issues/14110>.

=item *

The flip-flop operator (C<..> in scalar context) would return the same
scalar each time, unless the containing subroutine was called recursively.
Now it always returns a new scalar.
L<[GH #14110]|https://github.com/Perl/perl5/issues/14110>.

=item *

C<use>, C<no>, statement labels, special blocks (C<BEGIN>) and pod are now
permitted as the first thing in a C<map> or C<grep> block, the block after
C<print> or C<say> (or other functions) returning a handle, and within
C<${...}>, C<@{...}>, etc.
L<[GH #14088]|https://github.com/Perl/perl5/issues/14088>.

=item *

The repetition operator C<x> now propagates lvalue context to its left-hand
argument when used in contexts like C<foreach>.  That allows
S<C<for(($#that_array)x2) { ... }>> to work as expected if the loop modifies
C<$_>.

=item *

C<(...) x ...> in scalar context used to corrupt the stack if one operand
was an object with "x" overloading, causing erratic behavior.
L<[GH #13811]|https://github.com/Perl/perl5/issues/13811>.

=item *

Assignment to a lexical scalar is often optimised away; for example in
C<my $x; $x = $y + $z>, the assign operator is optimised away and the add
operator writes its result directly to C<$x>.  Various bugs related to
this optimisation have been fixed.  Certain operators on the right-hand
side would sometimes fail to assign the value at all or assign the wrong
value, or would call STORE twice or not at all on tied variables.  The
operators affected were C<$foo++>, C<$foo-->, and C<-$foo> under C<use
integer>, C<chomp>, C<chr> and C<setpgrp>.

=item *

List assignments were sometimes buggy if the same scalar ended up on both
sides of the assignment due to use of C<tied>, C<values> or C<each>.  The
result would be the wrong value getting assigned.

=item *

C<setpgrp($nonzero)> (with one argument) was accidentally changed in 5.16
to mean C<setpgrp(0)>.  This has been fixed.

=item *

C<__SUB__> could return the wrong value or even corrupt memory under the
debugger (the C<-d> switch) and in subs containing C<eval $string>.

=item *

When S<C<sub () { $var }>> becomes inlinable, it now returns a different
scalar each time, just as a non-inlinable sub would, though Perl still
optimises the copy away in cases where it would make no observable
difference.

=item *

S<C<my sub f () { $var }>> and S<C<sub () : attr { $var }>> are no longer
eligible for inlining.  The former would crash; the latter would just
throw the attributes away.  An exception is made for the little-known
C<:method> attribute, which does nothing much.

=item *

Inlining of subs with an empty prototype is now more consistent than
before. Previously, a sub with multiple statements, of which all but the last
were optimised away, would be inlinable only if it were an anonymous sub
containing a string C<eval> or C<state> declaration or closing over an
outer lexical variable (or any anonymous sub under the debugger).  Now any
sub that gets folded to a single constant after statements have been
optimised away is eligible for inlining.  This applies to things like C<sub
() { jabber() if DEBUG; 42 }>.

Some subroutines with an explicit C<return> were being made inlinable,
contrary to the documentation,  Now C<return> always prevents inlining.

=item *

On some systems, such as VMS, C<crypt> can return a non-ASCII string.  If a
scalar assigned to had contained a UTF-8 string previously, then C<crypt>
would not turn off the UTF-8 flag, thus corrupting the return value.  This
would happen with S<C<$lexical = crypt ...>>.

=item *

C<crypt> no longer calls C<FETCH> twice on a tied first argument.

=item *

An unterminated here-doc on the last line of a quote-like operator
(C<qq[${ <<END }]>, C</(?{ <<END })/>) no longer causes a double free.  It
started doing so in 5.18.

=item *

C<index()> and C<rindex()> no longer crash when used on strings over 2GB in
size.
L<[GH #13700]|https://github.com/Perl/perl5/issues/13700>.

=item *

A small, previously intentional, memory leak in
C<PERL_SYS_INIT>/C<PERL_SYS_INIT3> on Win32 builds was fixed. This might
affect embedders who repeatedly create and destroy perl engines within
the same process.

=item *

C<POSIX::localeconv()> now returns the data for the program's underlying
locale even when called from outside the scope of S<C<use locale>>.

=item *

C<POSIX::localeconv()> now works properly on platforms which don't have
C<LC_NUMERIC> and/or C<LC_MONETARY>, or for which Perl has been compiled
to disregard either or both of these locale categories.  In such
circumstances, there are now no entries for the corresponding values in
the hash returned by C<localeconv()>.

=item *

C<POSIX::localeconv()> now marks appropriately the values it returns as
UTF-8 or not.  Previously they were always returned as bytes, even if
they were supposed to be encoded as UTF-8.

=item *

On Microsoft Windows, within the scope of C<S<use locale>>, the following
POSIX character classes gave results for many locales that did not
conform to the POSIX standard:
C<[[:alnum:]]>,
C<[[:alpha:]]>,
C<[[:blank:]]>,
C<[[:digit:]]>,
C<[[:graph:]]>,
C<[[:lower:]]>,
C<[[:print:]]>,
C<[[:punct:]]>,
C<[[:upper:]]>,
C<[[:word:]]>,
and
C<[[:xdigit:]]>.
This was because the underlying Microsoft implementation does not
follow the standard.  Perl now takes special precautions to correct for
this.

=item *

Many issues have been detected by L<Coverity|http://www.coverity.com/> and
fixed.

=item *

C<system()> and friends should now work properly on more Android builds.

Due to an oversight, the value specified through C<-Dtargetsh> to F<Configure>
would end up being ignored by some of the build process.  This caused perls
cross-compiled for Android to end up with defective versions of C<system()>,
C<exec()> and backticks: the commands would end up looking for C</bin/sh>
instead of C</system/bin/sh>, and so would fail for the vast majority
of devices, leaving C<$!> as C<ENOENT>.

=item *

C<qr(...\(...\)...)>,
C<qr[...\[...\]...]>,
and
C<qr{...\{...\}...}>
now work.  Previously it was impossible to escape these three
left-characters with a backslash within a regular expression pattern
where otherwise they would be considered metacharacters, and the pattern
opening delimiter was the character, and the closing delimiter was its
mirror character.

=item *

C<< s///e >> on tainted UTF-8 strings corrupted C<< pos() >>. This bug,
introduced in 5.20, is now fixed.
L<[GH #13948]|https://github.com/Perl/perl5/issues/13948>.

=item *

A non-word boundary in a regular expression (C<< \B >>) did not always
match the end of the string; in particular C<< q{} =~ /\B/ >> did not
match. This bug, introduced in perl 5.14, is now fixed.
L<[GH #13917]|https://github.com/Perl/perl5/issues/13917>.

=item *

C<< " P" =~ /(?=.*P)P/ >> should match, but did not. This is now fixed.
L<[GH #13954]|https://github.com/Perl/perl5/issues/13954>.

=item *

Failing to compile C<use Foo> in an C<eval> could leave a spurious
C<BEGIN> subroutine definition, which would produce a "Subroutine
BEGIN redefined" warning on the next use of C<use>, or other C<BEGIN>
block.
L<[GH #13926]|https://github.com/Perl/perl5/issues/13926>.

=item *

C<method { BLOCK } ARGS> syntax now correctly parses the arguments if they
begin with an opening brace.
L<[GH #9085]|https://github.com/Perl/perl5/issues/9085>.

=item *

External libraries and Perl may have different ideas of what the locale is.
This is problematic when parsing version strings if the locale's numeric
separator has been changed.  Version parsing has been patched to ensure
it handles the locales correctly.
L<[GH #13863]|https://github.com/Perl/perl5/issues/13863>.

=item *

A bug has been fixed where zero-length assertions and code blocks inside of a
regex could cause C<pos> to see an incorrect value.
L<[GH #14016]|https://github.com/Perl/perl5/issues/14016>.

=item *

Dereferencing of constants now works correctly for typeglob constants.  Previously
the glob was stringified and its name looked up.  Now the glob itself is used.
L<[GH #9891]|https://github.com/Perl/perl5/issues/9891>

=item *

When parsing a sigil (C<$> C<@> C<%> C<&)> followed by braces,
the parser no
longer tries to guess whether it is a block or a hash constructor (causing a
syntax error when it guesses the latter), since it can only be a block.

=item *

S<C<undef $reference>> now frees the referent immediately, instead of hanging on
to it until the next statement.
L<[GH #14032]|https://github.com/Perl/perl5/issues/14032>

=item *

Various cases where the name of a sub is used (autoload, overloading, error
messages) used to crash for lexical subs, but have been fixed.

=item *

Bareword lookup now tries to avoid vivifying packages if it turns out the
bareword is not going to be a subroutine name.

=item *

Compilation of anonymous constants (I<e.g.>, C<sub () { 3 }>) no longer deletes
any subroutine named C<__ANON__> in the current package.  Not only was
C<*__ANON__{CODE}> cleared, but there was a memory leak, too.  This bug goes
back to Perl 5.8.0.

=item *

Stub declarations like C<sub f;> and C<sub f ();> no longer wipe out constants
of the same name declared by C<use constant>.  This bug was introduced in Perl
5.10.0.

=item *

C<qr/[\N{named sequence}]/> now works properly in many instances.

Some names
known to C<\N{...}> refer to a sequence of multiple characters, instead of the
usual single character.  Bracketed character classes generally only match
single characters, but now special handling has been added so that they can
match named sequences, but not if the class is inverted or the sequence is
specified as the beginning or end of a range.  In these cases, the only
behavior change from before is a slight rewording of the fatal error message
given when this class is part of a C<?[...])> construct.  When the C<[...]>
stands alone, the same non-fatal warning as before is raised, and only the
first character in the sequence is used, again just as before.

=item *

Tainted constants evaluated at compile time no longer cause unrelated
statements to become tainted.
L<[GH #14059]|https://github.com/Perl/perl5/issues/14059>

=item *

S<C<open $$fh, ...>>, which vivifies a handle with a name like
C<"main::_GEN_0">, was not giving the handle the right reference count, so
a double free could happen.

=item *

When deciding that a bareword was a method name, the parser would get confused
if an C<our> sub with the same name existed, and look up the method in the
package of the C<our> sub, instead of the package of the invocant.

=item *

The parser no longer gets confused by C<\U=> within a double-quoted string.  It
used to produce a syntax error, but now compiles it correctly.
L<[GH #10882]|https://github.com/Perl/perl5/issues/10882>

=item *

It has always been the intention for the C<-B> and C<-T> file test operators to
treat UTF-8 encoded files as text.  (L<perlfunc|perlfunc/-X FILEHANDLE> has
been updated to say this.)  Previously, it was possible for some files to be
considered UTF-8 that actually weren't valid UTF-8.  This is now fixed.  The
operators now work on EBCDIC platforms as well.

=item *

Under some conditions warning messages raised during regular expression pattern
compilation were being output more than once.  This has now been fixed.

=item *

Perl 5.20.0 introduced a regression in which a UTF-8 encoded regular
expression pattern that contains a single ASCII lowercase letter did not
match its uppercase counterpart. That has been fixed in both 5.20.1 and
5.22.0.
L<[GH #14051]|https://github.com/Perl/perl5/issues/14051>

=item *

Constant folding could incorrectly suppress warnings if lexical warnings
(C<use warnings> or C<no warnings>) were not in effect and C<$^W> were
false at compile time and true at run time.

=item *

Loading Unicode tables during a regular expression match could cause assertion
failures under debugging builds if the previous match used the very same
regular expression.
L<[GH #14081]|https://github.com/Perl/perl5/issues/14081>

=item *

Thread cloning used to work incorrectly for lexical subs, possibly causing
crashes or double frees on exit.

=item *

Since Perl 5.14.0, deleting C<$SomePackage::{__ANON__}> and then undefining an
anonymous subroutine could corrupt things internally, resulting in
L<Devel::Peek> crashing or L<B.pm|B> giving nonsensical data.  This has been
fixed.

=item *

S<C<(caller $n)[3]>> now reports names of lexical subs, instead of
treating them as C<"(unknown)">.

=item *

C<sort subname LIST> now supports using a lexical sub as the comparison
routine.

=item *

Aliasing (I<e.g.>, via S<C<*x = *y>>) could confuse list assignments that mention the
two names for the same variable on either side, causing wrong values to be
assigned.
L<[GH #5788]|https://github.com/Perl/perl5/issues/5788>

=item *

Long here-doc terminators could cause a bad read on short lines of input.  This
has been fixed.  It is doubtful that any crash could have occurred.  This bug
goes back to when here-docs were introduced in Perl 3.000 twenty-five years
ago.

=item *

An optimization in C<split> to treat S<C<split /^/>> like S<C<split /^/m>> had the
unfortunate side-effect of also treating S<C<split /\A/>> like S<C<split /^/m>>,
which it should not.  This has been fixed.  (Note, however, that S<C<split /^x/>>
does not behave like S<C<split /^x/m>>, which is also considered to be a bug and
will be fixed in a future version.)
L<[GH #14086]|https://github.com/Perl/perl5/issues/14086>

=item *

The little-known S<C<my Class $var>> syntax (see L<fields> and L<attributes>)
could get confused in the scope of C<use utf8> if C<Class> were a constant
whose value contained Latin-1 characters.

=item *

Locking and unlocking values via L<Hash::Util> or C<Internals::SvREADONLY>
no longer has any effect on values that were read-only to begin with.
Previously, unlocking such values could result in crashes, hangs or
other erratic behavior.

=item *

Some unterminated C<(?(...)...)> constructs in regular expressions would
either crash or give erroneous error messages.  C</(?(1)/> is one such
example.

=item *

S<C<pack "w", $tied>> no longer calls FETCH twice.

=item *

List assignments like S<C<($x, $z) = (1, $y)>> now work correctly if C<$x> and
C<$y> have been aliased by C<foreach>.

=item *

Some patterns including code blocks with syntax errors, such as
S<C</ (?{(^{})/>>, would hang or fail assertions on debugging builds.  Now
they produce errors.

=item *

An assertion failure when parsing C<sort> with debugging enabled has been
fixed.
L<[GH #14087]|https://github.com/Perl/perl5/issues/14087>.

=item *

S<C<*a = *b; @a = split //, $b[1]>> could do a bad read and produce junk
results.

=item *

In S<C<() = @array = split>>, the S<C<() =>> at the beginning no longer confuses
the optimizer into assuming a limit of 1.

=item *

Fatal warnings no longer prevent the output of syntax errors.
L<[GH #14155]|https://github.com/Perl/perl5/issues/14155>.

=item *

Fixed a NaN double-to-long-double conversion error on VMS. For quiet NaNs
(and only on Itanium, not Alpha) negative infinity instead of NaN was
produced.

=item *

Fixed the issue that caused C<< make distclean >> to incorrectly leave some
files behind.
L<[GH #14108]|https://github.com/Perl/perl5/issues/14108>.

=item *

AIX now sets the length in C<< getsockopt >> correctly.
L<[GH #13484]|https://github.com/Perl/perl5/issues/13484>.
L<[cpan #91183]|https://rt.cpan.org/Ticket/Display.html?id=91183>.
L<[cpan #85570]|https://rt.cpan.org/Ticket/Display.html?id=85570>.

=item *

The optimization phase of a regexp compilation could run "forever" and
exhaust all memory under certain circumstances; now fixed.
L<[GH #13984]|https://github.com/Perl/perl5/issues/13984>.

=item *

The test script F<< t/op/crypt.t >> now uses the SHA-256 algorithm if the
default one is disabled, rather than giving failures.
L<[GH #13715]|https://github.com/Perl/perl5/issues/13715>.

=item *

Fixed an off-by-one error when setting the size of a shared array.
L<[GH #14151]|https://github.com/Perl/perl5/issues/14151>.

=item *

Fixed a bug that could cause perl to enter an infinite loop during
compilation. In particular, a C<while(1)> within a sublist, I<e.g.>

    sub foo { () = ($a, my $b, ($c, do { while(1) {} })) }

The bug was introduced in 5.20.0
L<[GH #14165]|https://github.com/Perl/perl5/issues/14165>.

=item *

On Win32, if a variable was C<local>-ized in a pseudo-process that later
forked, restoring the original value in the child pseudo-process caused
memory corruption and a crash in the child pseudo-process (and therefore the
OS process).
L<[GH #8641]|https://github.com/Perl/perl5/issues/8641>.

=item *

Calling C<write> on a format with a C<^**> field could produce a panic
in C<sv_chop()> if there were insufficient arguments or if the variable
used to fill the field was empty.
L<[GH #14255]|https://github.com/Perl/perl5/issues/14255>.

=item *

Non-ASCII lexical sub names now appear without trailing junk when they
appear in error messages.

=item *

The C<\@> subroutine prototype no longer flattens parenthesized arrays
(taking a reference to each element), but takes a reference to the array
itself.
L<[GH #9111]|https://github.com/Perl/perl5/issues/9111>.

=item *

A block containing nothing except a C-style C<for> loop could corrupt the
stack, causing lists outside the block to lose elements or have elements
overwritten.  This could happen with C<map { for(...){...} } ...> and with
lists containing C<do { for(...){...} }>.
L<[GH #14269]|https://github.com/Perl/perl5/issues/14269>.

=item *

C<scalar()> now propagates lvalue context, so that
S<C<for(scalar($#foo)) { ... }>> can modify C<$#foo> through C<$_>.

=item *

C<qr/@array(?{block})/> no longer dies with "Bizarre copy of ARRAY".
L<[GH #14292]|https://github.com/Perl/perl5/issues/14292>.

=item *

S<C<eval '$variable'>> in nested named subroutines would sometimes look up a
global variable even with a lexical variable in scope.

=item *

In perl 5.20.0, C<sort CORE::fake> where 'fake' is anything other than a
keyword, started chopping off the last 6 characters and treating the result
as a sort sub name.  The previous behavior of treating C<CORE::fake> as a
sort sub name has been restored.
L<[GH #14323]|https://github.com/Perl/perl5/issues/14323>.

=item *

Outside of C<use utf8>, a single-character Latin-1 lexical variable is
disallowed.  The error message for it, "Can't use global C<$foo>...", was
giving garbage instead of the variable name.

=item *

C<readline> on a nonexistent handle was causing C<${^LAST_FH}> to produce a
reference to an undefined scalar (or fail an assertion).  Now
C<${^LAST_FH}> ends up undefined.

=item *

C<(...) x ...> in void context now applies scalar context to the left-hand
argument, instead of the context the current sub was called in.
L<[GH #14174]|https://github.com/Perl/perl5/issues/14174>.

=back

=head1 Known Problems

=over 4

=item *

C<pack>-ing a NaN on a perl compiled with Visual C 6 does not behave properly,
leading to a test failure in F<t/op/infnan.t>.
L<[GH #14705]|https://github.com/Perl/perl5/issues/14705>

=item *

A goal is for Perl to be able to be recompiled to work reasonably well on any
Unicode version.  In Perl 5.22, though, the earliest such version is Unicode
5.1 (current is 7.0).

=item *

EBCDIC platforms

=over 4

=item *

The C<cmp> (and hence C<sort>) operators do not necessarily give the
correct results when both operands are UTF-EBCDIC encoded strings and
there is a mixture of ASCII and/or control characters, along with other
characters.

=item *

Ranges containing C<\N{...}> in the C<tr///> (and C<y///>)
transliteration operators are treated differently than the equivalent
ranges in regular expression patterns.  They should, but don't, cause
the values in the ranges to all be treated as Unicode code points, and
not native ones.  (L<perlre/Version 8 Regular Expressions> gives
details as to how it should work.)

=item *

Encode and encoding are mostly broken.

=item *

Many CPAN modules that are shipped with core show failing tests.

=item *

C<pack>/C<unpack> with C<"U0"> format may not work properly.

=back

=item *

The following modules are known to have test failures with this version of
Perl.  In many cases, patches have been submitted, so there will hopefully be
new releases soon:

=over

=item *

L<B::Generate> version 1.50

=item *

L<B::Utils> version 0.25

=item *

L<Coro> version 6.42

=item *

L<Dancer> version 1.3130

=item *

L<Data::Alias> version 1.18

=item *

L<Data::Dump::Streamer> version 2.38

=item *

L<Data::Util> version 0.63

=item *

L<Devel::Spy> version 0.07

=item *

L<invoker> version 0.34

=item *

L<Lexical::Var> version 0.009

=item *

L<LWP::ConsoleLogger> version 0.000018

=item *

L<Mason> version 2.22

=item *

L<NgxQueue> version 0.02

=item *

L<Padre> version 1.00

=item *

L<Parse::Keyword> 0.08

=back

=back

=head1 Obituary

Brian McCauley died on May 8, 2015.  He was a frequent poster to Usenet, Perl
Monks, and other Perl forums, and made several CPAN contributions under the
nick NOBULL, including to the Perl FAQ.  He attended almost every
YAPC::Europe, and indeed, helped organise YAPC::Europe 2006 and the QA
Hackathon 2009.  His wit and his delight in intricate systems were
particularly apparent in his love of board games; many Perl mongers will
have fond memories of playing Fluxx and other games with Brian.  He will be
missed.

=head1 Acknowledgements

Perl 5.22.0 represents approximately 12 months of development since Perl 5.20.0
and contains approximately 590,000 lines of changes across 2,400 files from 94
authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 370,000 lines of changes to 1,500 .pm, .t, .c and .h files.

Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.22.0:

Aaron Crane, Abhijit Menon-Sen, Abigail, Alberto Simões, Alex Solovey, Alex
Vandiver, Alexandr Ciornii, Alexandre (Midnite) Jousset, Andreas König,
Andreas Voegele, Andrew Fresh, Andy Dougherty, Anthony Heading, Aristotle
Pagaltzis, brian d foy, Brian Fraser, Chad Granum, Chris 'BinGOs' Williams,
Craig A. Berry, Dagfinn Ilmari Mannsåker, Daniel Dragan, Darin McBride, Dave
Rolsky, David Golden, David Mitchell, David Wheeler, Dmitri Tikhonov, Doug
Bell, E. Choroba, Ed J, Eric Herman, Father Chrysostomos, George Greer, Glenn
D. Golden, Graham Knop, H.Merijn Brand, Herbert Breunung, Hugo van der Sanden,
James E Keenan, James McCoy, James Raspass, Jan Dubois, Jarkko Hietaniemi,
Jasmine Ngan, Jerry D. Hedden, Jim Cromie, John Goodyear, kafka, Karen
Etheridge, Karl Williamson, Kent Fredric, kmx, Lajos Veres, Leon Timmermans,
Lukas Mai, Mathieu Arnold, Matthew Horsfall, Max Maischein, Michael Bunk,
Nicholas Clark, Niels Thykier, Niko Tyni, Norman Koch, Olivier Mengué, Peter
John Acklam, Peter Martini, Petr Písař, Philippe Bruhat (BooK), Pierre
Bogossian, Rafael Garcia-Suarez, Randy Stauner, Reini Urban, Ricardo Signes,
Rob Hoelz, Rostislav Skudnov, Sawyer X, Shirakata Kentaro, Shlomi Fish,
Sisyphus, Slaven Rezic, Smylers, Steffen Müller, Steve Hay, Sullivan Beck,
syber, Tadeusz Sośnierz, Thomas Sibley, Todd Rinaldo, Tony Cook, Vincent Pit,
Vladimir Marek, Yaroslav Kuzmin, Yves Orton, Ævar Arnfjörð Bjarmason.

The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
L<https://rt.perl.org/>.  There may also be information at
L<http://www.perl.org/>, the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5-security-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
                                                                                                                                                                                                                                                                                                                                                                                 usr/local/lib/perl5/5.40.0/pod/perl5221delta.pod                                                    0000644 0000000 0000000 00000024475 14714567415 017276  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =encoding utf8

=head1 NAME

perl5221delta - what is new for perl v5.22.1

=head1 DESCRIPTION

