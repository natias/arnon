		    (substr($t_dir, 0, length($t_mntpoint)) eq $t_mntpoint)) {
		    $ismounted = 1;
		}
	    }
	    close(MOUNTS) or die "$O: $procmounts: $!\n";

	    if (! $ismounted) {
		print "    Directory $cv{$svc,$s_homedir} not mounted\n"
		    if $verbose;
		$cv{$svc,$s_homedir} = '';
	    }
	}
    }

    # Process the "homedir" and "subdir" configuration variables

    if ($cv{$svc,$s_homedir} ne '') {
	if (! -d $cv{$svc,$s_homedir}) {
	    warn "$O: No such directory: $cv{$svc,$s_homedir}\n";
	    $cv{$svc,$s_homedir} = '';
	}
	elsif (($cv{$svc,$s_subdir} ne '') and (! $cv{$svc,$s_althomeB})) {
	    my $t = $cv{$svc,$s_homedir} . '/' . $cv{$svc,$s_subdir};
	    if (! -d $t) {
		warn "$O: No such directory: $t\n";
		$cv{$svc,$s_subdir} = '';
		$cv{$svc,$s_homedir} = '';
	    }
	}
    }

    # Calculate the actual directory to create (if necessary)

    if ($cv{$svc,$s_homedir} ne '') {
	$cv{$svc,$s_actualdir} = $cv{$svc,$s_homedir};
	if ($cv{$svc,$s_subdir} ne '') {
	    $cv{$svc,$s_actualdir} .= '/' . $cv{$svc,$s_subdir};
	}
	if (! $cv{$svc,$s_althomeB}) {
	    $cv{$svc,$s_actualdir} .= '/' . $username;
	}
    }

    # Process the "mkdir" and "chgrpdir" configuration variables

    if (($cv{$svc,$s_homedir} ne '') and $cv{$svc,$s_mkdirB}) {
	my $t = $cv{$svc,$s_actualdir};

	if (-d $t) {
	    print "    Directory $t already exists\n" if $verbose;
	} elsif (-e $t) {
	    warn "$O: Not a directory: $t\n";
	    $cv{$svc,$s_homedir} = '';
	} else {
	    print "    Directory $t created\n" if $verbose;
	    mkdir($t, oct($cv{$s_dirmode})) if ! $dryrun;
		# Note that this newly-created directory will inherit the
		# SGID (set group ID) bit from its parent directory.  This
		# IS desired, hence, do NOT do a separate chmod()!
	    if ($cv{$svc,$s_chgrpdirB}) {
		chown($uid, $cv{$svc,$s_svcgid}, $t) if ! $dryrun;
	    } else {
		chown($uid, $gid, $t) if ! $dryrun;
	    }
	}
    }

    # Process the "mklink" and "linkname" configuration variables

    if (($cv{$svc,$s_homedir} ne '') and $cv{$svc,$s_mklinkB}
	and (-d $cv{$svc,$s_actualdir})) {

	# Calculate the actual link name

	$cv{$svc,$s_linkname} =~ s,/$,,;	# Remove trailing '/'

	if ($cv{$svc,$s_linkname} eq '') {
	    $cv{$svc,$s_actuallink} = $homedir . '/' . $svc;
	} else {
	    $cv{$svc,$s_actuallink} = $homedir . '/' . $cv{$svc,$s_linkname};
	}

	# Create the symbolic link, if needed

	my $t = $cv{$svc,$s_actuallink};
	if (-l $t) {
	    print "    Symbolic link $t already exists\n"
		if $verbose;
	} elsif (-e $t) {
	    warn "$O: Not a symbolic link: $t\n";
	} else {
	    print "    Symbolic link $t created\n" if $verbose;
	    symlink($cv{$svc,$s_actualdir}, $t) if ! $dryrun;
	    if ($cv{$svc,$s_chgrpdirB}) {
		lchown($uid, $cv{$svc,$s_svcgid}, $t) if ! $dryrun;
	    } else {
		lchown($uid, $gid, $t) if ! $dryrun;
	    }
	}
    }

    # Process the "skelfile" and "chgrpskel" configuration variables

    if (($cv{$svc,$s_homedir} ne '') and ($cv{$svc,$s_skelfile} ne '')
	and (-d $cv{$svc,$s_actualdir})) {

	my $t = $cv{$svc,$s_skelfile};
	$cv{$svc,$s_actualsrcf} = $cv{$s_skelother} . '/' . $t;
	$cv{$svc,$s_actualdstf} = $cv{$svc,$s_actualdir} . '/' . $t;

	if (-e $cv{$svc,$s_actualdstf}) {
	    print "    File $cv{$svc,$s_actualdstf} already exists\n"
		if $verbose;
	} elsif (! -r $cv{$svc,$s_actualsrcf}) {
	    warn "$O: $cv{$svc,$s_actualsrcf}: $!\n";
	} else {
	    print "    File $cv{$svc,$s_actualdstf} created\n" if $verbose;
	    if ($cv{$svc,$s_chgrpskelB}) {
		system(@install, '-m', $cv{$s_filemode}, '-o', $uid,
		       '-g', $cv{$svc,$s_svcgid},
		       $cv{$svc,$s_actualsrcf}, $cv{$svc,$s_actualdstf})
		    if ! $dryrun;
	    } else {
		system(@install, '-m', $cv{$s_filemode}, '-o', $uid, '-g',
		       $gid, $cv{$svc,$s_actualsrcf}, $cv{$svc,$s_actualdstf})
		    if ! $dryrun;
	    }
	}
    }
}


#########################################################################
# End of program

exit(0);


#########################################################################
# Check that the configuration variable contains is a valid boolean value

sub chkbool($$$$) {
    my $svc = $_[0];		# Service name
    my $var = $_[1];		# Partial hash key of variable to check
    my $new = $_[2];		# Partial hash key of new variable (true bool)
    my $def = $_[3];		# Default value, in case of error

    my $val = $cv{$svc,$var};

    if (grep($_ eq $val, @s_true)) {
	$cv{$svc,$new} = 1;
    } elsif (grep($_ eq $val, @s_false)) {
	$cv{$svc,$new} = 0;
    } else {
	warn "$O: Illegal value \"$val\" at $conffile:$cl{$var}\n";
	warn "$O: Variable \"$var\[$svc\]\" set to \"$def\"\n";

	$cv{$svc,$var} = $def;
	chkbool($svc, $var, $new, $def);
    }
}


#########################################################################
# A chown() that works with symbolic links

sub lchown(@) {
    # The chown() function does NOT change the ownership of symbolic links
    # under Linux 2.1.81 or later.  Hence, make an external call to the
    # chown(1) program.  This program MUST support the "-h" parameter.

    my $t_uid = shift;
    my $t_gid = shift;

    system(@chown, '-h', "$t_uid:$t_gid", @_);
}


#########################################################################
# Display usage information

sub showusage() {
    pod2usage(-message => $copyright, -exitval => 0);
}


#########################################################################
# Display program version information

sub showversion() {
    print "$copyright\n";
    print <<"DATAEND"
This program is free software that is distributed under the GNU General
Public License, version 2 or later.  See /usr/share/common-licenses/GPL
for more information.
DATAEND
	;
    exit(0);
}


#########################################################################
# Show an error message relating to the command-line and terminate

sub showcmdlerr(@) {
    map { warn "$_\n" } @_;
    die "Try `$O --help' for more information.\n";
}


__END__


#########################################################################
# Program documentation in POD format

=head1 NAME

adduser.local - adduser(8) local system additions

=head1 SYNOPSIS

/usr/local/sbin/adduser.local [B<--dry-run>] [B<--conf> FILE] [B<--quiet>]
[B<--verbose>] [B<--help>] [B<--version>] USERNAME [UID GID HOMEDIR]

=head1 DESCRIPTION

The B<adduser.local> script, once installed as
F</usr/local/sbin/adduser.local>, is automatically called by the
adduser(8) system program on a Debian system.  This script completes the
creation of a user account by parsing a system-dependent configuration
file, F</etc/adduser.local.conf>.  That configuration file lists a number
of "services" to be configured, where each service is simply a convenient
name for directories that must be created, Unix groups to which the user
must be added, files that need to be copied, symbolic links to be created
and so on.

This script is automatically called by adduser(8) with arguments
I<USERNAME UID GID HOMEDIR>.  In addition, this script may be called
manually.  In this case, only I<USERNAME> needs to be passed, along with
options as described later in B<OPTIONS>.

Note that adduser(8) can now perform I<some> of the tasks that
B<adduser.local> does, particularly by using the EXTRA_GROUPS and
ADD_EXTRA_GROUPS variables in F</etc/adduser.conf>.  However,
B<adduser.local> is far more flexible than doing just that...

=head1 OPTIONS

=over 4

=item B<-n>, B<--dry-run>

Pretend to fulfil everything required, without actually doing anything.

=item B<-c>, B<--conf> I<FILE>

Use configuration file I<FILE> instead of the default
F</etc/adduser.local.conf>.

=item B<-q>, B<--quiet>

Don't show extraneous output.

=item B<-v>, B<--verbose>

Show output about what was done (default).

=item B<-h>, B<--help>

Show a brief command-line summary.

=item B<-V>, B<--version>

Show the version of the B<adduser.local> script.

=back

=head1 RETURN VALUE

B<adduser.local> returns a successful (zero) exit status if no severe
errors were detected, otherwise a non-zero exit code is returned.

=head1 EXAMPLES

To add the user "john" to your system:

    adduser john

This automatically calls B<adduser.local> with the appropriate arguments.

If you would like to rerun the B<adduser.local> script (such as after
modifying its configuration file) for the user "john":

    adduser.local john

=head1 FILES

=over 4

=item F</etc/adduser.local.conf>

Configuration for B<adduser.local>.  The default configuration is
extensively documented.

=back

=head1 FEEDBACK

Your comments, suggestions, corrections and enhancements are always warmly
welcomed!  Please send these to:

    Postal:   John Zaitseff,
              The ZAP Group,
              Unit 6, 116 Woodburn Road,
              Berala, NSW, 2141,
              Australia

    E-mail:   J.Zaitseff@zap.org.au
    Web:      http://www.zap.org.au/software/utils/adduser.local/
    FTP:      ftp://ftp.zap.org.au/pub/utils/adduser.local/adduser.local.tar.gz

=head1 COPYRIGHT

Copyright (C) 1999-2013, John Zaitseff.

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

=head1 SEE ALSO

adduser(8)

=cut
                                                                                                                                                                                              usr/share/doc/adduser/examples/adduser.local.conf                                                   0000644 0000000 0000000 00000052551 14433702273 020575  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        ############################################################################
# /etc/adduser.local.conf: Configuration for /usr/local/sbin/adduser.local #
############################################################################

# [JNZ] Modified 21-Jun-2013

# This file configures the local system additions to adduser(8) and should
# be modified to suit local conditions.
#
# adduser.local is a script that configures a user's account for various
# "services".  These services are simply convenient names for directories
# that must be created, Unix groups to which the user must be added, files
# that need to be copied and so on.
#
# Note that adduser(8) can now perform SOME of the tasks that adduser.local
# does, particularly by using the EXTRA_GROUPS and ADD_EXTRA_GROUPS
# variables in /etc/adduser.conf.  However, adduser.local is far more
# flexible than doing just that...
#
# Please see the end of this file for an explanation of its syntax.


######################
#   Global Options   #
######################

# The skelother variable points to the "other" (secondary) skeletal
# directory.  This directory is similar to /etc/skel (see the SKEL variable
# in /etc/adduser.conf), except that files are not necessarily copied to the
# home directory.

skelother = /etc/skel.other

# The dirmode variable specifies the octal mode used by chmod(1) for any
# directories created by adduser.local.  Note, however, that such created
# directories automatically inherit the SGID (set group ID) bit from their
# parent directory.

dirmode = 0755

# The filemode variable specifies the octal mode used by chmod(1) for any
# files created by adduser.local.

filemode = 0644


#####################
#   USERS service   #
#####################

# Add the user to the Unix group "users".  Every user on this machine
# should be a member of this group.  This is already done if the file
# /etc/adduser.conf includes the setting "USERGROUPS=no".  If USERGROUPS
# is set to "yes", you should uncomment the following three lines.

service = users
group[users] = users
addtogroup[users] = true


###################
#   WWW service   #
###################

# Configure the WWW service for the user, a service that has a real UID
# associated with it.  Assuming the user "www" has a GID of "www" and a
# home directory of "/home/www" (in actual fact, the values are taken from
# the password database), the following actions are performed:
#
#   - the user is added to the "www" group
#   - the directory "/home/www/doc/users/$USER" is created, owned by
#     the user, with group owner "www"
#   - the link "public_html" is created to point to this directory
#   - the file "/etc/skel.other/index.html" is copied to this directory
#
# This assumes that the system user "www" and group "www" are NOT the same
# as the UID and GID of the web server ("www-data" on my system).  The "www"
# account is for the web administrator.

service = www

user[www]       = www
addtogroup[www] = true
homedir[www]    = ""
subdir[www]     = "doc/users"
althome[www]    = false
mkdir[www]      = true
chgrpdir[www]   = true
mklink[www]     = true
linkname[www]   = "public_html"
skelfile[www]   = "index.html"
chgrpskel[www]  = true

# If your web server's configuration follows the "other" (more common!)
# standard for personal web pages (wherein the "public_html" directory is a
# real directory in the user's home directory), you might want to use
# something like the following:

#service = www
#homedir[www] = ""
#subdir[www] = "public_html"
#althome[www] = true
#mkdir[www] = true
#skelfile[www] = "index.html"


###################
#   FTP service   #
###################

# Configure the FTP service for the user in a similar way to the WWW
# service above.  The only difference is that no skeleton file is copied.

service = ftp

user[ftp]       = ftp
addtogroup[ftp] = true
homedir[ftp]    = ""
subdir[ftp]     = "doc/users"
althome[ftp]    = false
mkdir[ftp]      = true
chgrpdir[ftp]   = true
mklink[ftp]     = true
linkname[ftp]   = "public_ftp"


##############################
#   Restricted FTP service   #
##############################

# Create the directory ~ftp/doc-restricted/users/$USER, owned by the user,
# for the Restricted FTP service on the ZAP Group server.

service = ftp_r

user[ftp_r]     = ftp
homedir[ftp_r]  = ""
subdir[ftp_r]   = "doc-restricted/users"
althome[ftp_r]  = false
mkdir[ftp_r]    = true
chgrpdir[ftp_r] = true


####################
#   DATA service   #
####################

# Create the directory /data/$USER, owned by the user.  This is only done
# if /data exists (it is an ordinary directory, not a mount point).

#service = data
#homedir[data] = "/data"
#subdir[data]  = ""
#mounted[data] = false
#mkdir[data]   = true


#####################
#   CDROM service   #
#####################

# Add the user to the Unix group "cdrom" (if it exists).  This allows the
# user to access the CD-ROM hardware on the machine.

service = cdrom
group[cdrom] = cdrom
addtogroup[cdrom] = true


######################
#   FLOPPY service   #
######################

# Add the user to the Unix group "floppy" (if it exists).  This allows the
# user to access the floppy drive on the machine.

service = floppy
group[floppy] = floppy
addtogroup[floppy] = true


#####################
#   AUDIO service   #
#####################

# Add the user to the Unix group "audio" (if it exists).  This allows the
# user to access the audio hardware on the machine.

service = audio
group[audio] = audio
addtogroup[audio] = true


###################
#   DIP service   #
###################

# Add the user to the Unix group "dip" (if it exists).  This allows the
# user to dial out using the local modem.

service = dip
group[dip] = dip
addtogroup[dip] = true


#####################
#   VIDEO service   #
#####################

# Add the user to the Unix group "video" (if it exists).  This allows the
# user to use video devices plugged into the computer.

service = video
group[video] = video
addtogroup[video] = true


#######################
#   PLUGDEV service   #
#######################

# Add the user to the Unix group "plugdev" (if it exists).  This allows
# the user to use the pmount daemon with pluggable devices.

service = plugdev
group[plugdev] = plugdev
addtogroup[plugdev] = true


#######################
#   SCANNER service   #
#######################

# Add the user to the Unix group "scanner" (if it exists).  This allows
# the user to use any attached scanners.

service = scanner
group[scanner] = scanner
addtogroup[scanner] = true


###########################
#   Syntax of this file   #
###########################

# The syntax of this file will be familiar to anyone who has used a
# scripting language before.  This file is processed line by line, with each
# line either being blank (and hence ignored), a comment or a configuration
# variable.
#
# Comment lines (such as this one) begin with a hash character ("#") and
# continue to the end of the line.  The hash character may be preceded by
# white space.  Comment lines, like blank lines, are ignored.
#
# All lines that are not blank or are comment lines contain configuration
# variables (one per line, with no comments allowed).  A configuration
# variable has one of two forms:
#
#     VARIABLE = VALUE
#     VARIABLE[SERVICE] = VALUE
#
# The first form is for global variables, while the second form is for
# variables associated with a particular service.  Both the variable name
# and the service name are alphanumeric strings and are case sensitive (ie,
# the names "SKELOTHER", "skelother" and "SkelOther" refer to three
# different variables).
#
# The value is typically a string which may or may not be case sensitive.
# It may be (but usually does not need to be) surrounded by single or double
# quotes, in which case everything within the quotes is part of the value.
# Note that white space may surround the variable, service and value
# components; such white space is discarded, unless it appears in quotes.
# You may NOT use backslash to quote quote characters!
#
# If a value required is a boolean, "0", "false", "f", "no" and "n" are
# treated as the false value, while "1", "true", "t", "yes" and "y" are
# treated as the true value.  In both cases, the value is case-insensitive.
#
#
# GLOBAL VARIABLES:
# =================
#
# The following global variables are available:
#
#     skelother
#     dirmode
#     filemode
#
# These are described in the section "Global Options" above.
#
#
# SERVICE VARIABLES:
# ==================
#
# The main role of adduser.local is to configure a user's account for
# various "services".  These services are simply convenient names for
# directories that must be created, Unix groups to which the user must be
# added, files that need to be copied and so on.
#
# adduser.local is informed of the existence of a service by the "service"
# global variable:
#
#     service = SERVICENAME
#
# The service name SERVICENAME may be any case-sensitive alphanumeric
# string.  Examples used within this file are "www" and "data".  Service
# names need not correspond to any real service --- they are completely
# internal to adduser.local, and are only used as a key for service
# variables.  The "service" global variable may appear multiple times, each
# time with a different service name.
#
# The order of the "service" global variables IS important, as that is the
# order in which those services are created.  This is important if one
# service depends on a prior one having been set up.
#
# The "service" global variable must appear before any of the services
# variables for that service are defined.
#
# The following service variables are available, and may be specified in any
# order:
#
#     user
#     group
#     addtogroup
#     homedir
#     subdir
#     althome
#     mounted
#     mkdir
#     chgrpdir
#     mklink
#     linkname
#     skelfile
#     chgrpskel
#
# Remember that each service variable is followed by a service name in
# square brackets.  In the following explanations, "SVC" is used as a
# sample service name.
#
#
# user[SVC] = USER
#
#     Specifies that the service belongs to a real user, and that that
#     service user name is USER.  This user name must appear in the password
#     database file either in the first field (ie, a user name) or in the
#     third (ie, a numeric UID).
#
#     Specifying a user name or UID also sets default values for the
#     "group" and "homedir" service variables.  These default values are
#     taken from the password database (the "homedir" variable is only set
#     if the "althome" variable is set to false).
#
#
# group[SVC] = GROUP
#
#     Specifies that the service's group name is GROUP.  This group name
#     must appear in the group database file either in the first field (ie,
#     a group name) or in the third (ie, a numeric GID).
#
#     If this variable is not specified, or is specified with GROUP as an
#     empty string "", and the user variable is specified (and points to a
#     valid user), the group name is taken to be the service user's default
#     group.  For example, if "user[svc] = mail" were to be specified, and
#     group[svc] were not, the group used would be default group for the
#     user "mail" (which happens to be GID 8, ie, "mail").
#
#     This group is also used for the group owner of directories, links
#     and copied files, depending on the settings of the "chgrpdir" and
#     "chgrpskel" variables.
#
#
# addtogroup[SVC] = BOOLEAN
#
#     Instructs whether to add the user to the group specified by the
#     "group" variable or implied by the "user" variable.  If true,
#     adduser.local adds the user to the group, assuming that the group,
#     in fact, exists.
#
#     If this variable is not specified, false is assumed.
#
#
# homedir[SVC] = PATH
#
#     Specifies the service's home directory as an absolute path name (ie,
#     starting from "/").  The service's home directory is used to check if
#     it is a mount point, as well as a base directory for the "mkdir" and
#     "skelfile" variables.  If the directory does not exist, those
#     variables take no effect.
#
#     If this variable is not specified, or is specified with PATH as an
#     empty string "", the value used for the service's home directory is
#     calculated in one of two ways.  The first method is to use the home
#     directory of the service user; the second is to use the home directory
#     of the user for whom adduser.local was called.
#
#     The first method is used when the "althome" variable is set to false
#     and the "user" variable is specified (and points to a valid user).
#     For example, if "user[svc] = www" and "althome[svc] = false" were to
#     be specified, the default value of the "homedir" variable would be
#     taken from www's home directory, typically "/var/www".
#
#     The second method is used when the "althome" variable is true.  For
#     example, if adduser.local were to be called for the user "anna", and
#     "althome" were set to true, the "homedir" variable would be set to the
#     home directory of anna, typically "/home/anna".
#
#     Note that neither of these methods is used if the "homedir" variable
#     is set to anything other than an empty string; in such a case, the
#     specified value for the variable is always used.
#
#
# subdir[SVC] = PATH
#
#     Specifies a subdirectory off the home directory.  This subdirectory is
#     used for creating the new directory, copying the skeleton file and for
#     the destination of the link.
#
#     If the "althome" variable is set to false, the subdirectory must
#     already exist and is used in conjunction with the home directory and
#     the user's name (for whom adduser.local was called).  For example, if
#     the following were to be specified:
#
#         homedir[svc] = /media/zip
#         subdir[svc] = home
#         althome[svc] = false
#         mkdir[svc] = true
#
#     and the user's name (for whom adduser.local was called) was "james",
#     the directory "/media/zip/home/james" would be created.
#
#     If, on the other hand, the "althome" variable was set to true, the
#     subdirectory is used only in conjunction with the home directory; it
#     is THAT directory that is created.  For example, if the following were
#     to be specified:
#
#         althome[svc] = true
#         subdir[svc] = "public_html"
#         mkdir[svc] = true
#
#     and adduser.local were called for the user "kathy" (who had the home
#     directory "/home/kathy"), the directory "/home/kathy/public_html"
#     would be created.
#
#     If this variable is not specified, blank is assumed.
#
#
# althome[SVC] = BOOLEAN
#
#     Specifies whether the default value for the "homedir" variable is to
#     be taken from the service's home directory or from the user's home
#     directory (for whom adduser.local was called).  If false, the
#     service's home directory (implied by the "user" setting) is used.  If
#     true, the actual user's home directory is used.
#
#     This variable also controls whether or not the user's login name is
#     used as part of the directory created by the "mkdir" variable and used
#     by the "mklink" and "skelfile" variables.  See "homedir" and "mklink"
#     for more details.
#
#     If this variable is not specified, false is assumed.
#
#
# mounted[SVC] = BOOLEAN
#
#     Specifies whether to check if the directory specified by the
#     "homedir" variable (or implied by other variables) is mounted or
#     not.  A directory is mounted if it, or any parent directory, is
#     mounted (excluding the root directory, which is always mounted).
#     For example, if the following were to be specified (and the user's
#     name were "alice"):
#
#         homedir[svc] = /home/external/server/ftp
#         subdir[svc] = doc/users
#         mounted[svc] = true
#         mkdir[svc] = true
#
#     then the directory "/home/external/server/ftp/doc/users/alice" would
#     be created only if either "/home/external/server/ftp",
#     "/home/external/server", "/home/external" or "/home" were mounted.
#
#     If this variable is not specified, false is assumed (ie, the mount
#     check is NOT performed).
#
#     Note that "checking for mounting" is defined as examining the contents
#     of /proc/mounts.  It does NOT actually attempt to mount the
#     directories.
#
#
# mkdir[SVC] = BOOLEAN
#
#     Directs adduser.local whether or not to create the directory specified
#     by the "homedir" and "subdir" variables.  If the "althome" variable is
#     false, the directory that is created has the user's login name at the
#     end.  In all cases, the newly created directory belongs to that user.
#     For example, if adduser.local was called for the user "david", and the
#     following lines were to be specified:
#
#         homedir[data1] = "/data/1"
#         subdir[data1] = "users"
#         althome[data1] = false
#         mkdir[data1] = true
#
#     then the directory "/data/1/users/david" would be created, owned by
#     the user "david".  If, on the other hand, the following were to be
#     specified (for the same user "david"):
#
#         subdir[www] = "public_html"
#         althome[www] = true
#         mkdir[www] = true
#
#     then the directory "/home/david/public_html" would be created
#     (assuming "/home/david" was david's home directory), owned by the
#     user "david".
#
#     The mode of the directory is taken from the "dirmode" global variable
#     in this configuration file.  See also the comment on that global
#     variable.
#
#     The group owner of the directory is either the same as the user's (in
#     this case, if the user "david" was in the group "users" by default,
#     then the group owner would be "users"), or the same as the service
#     user's group (see the "group" variable for more information).  The
#     "chgrpdir" variable specifies which of these two options is used.
#
#     If this variable is not specified, false is assumed.
#
#
# chgrpdir[SVC] = BOOLEAN
#
#     Specifies the group owner of any directory and link created by the
#     "mkdir" and "mklink" variables respectively.  If true is specified,
#     the group owner is the same as specified by the "group" variable (or
#     implied by the "user" variable).  If false is specified, the group
#     owner is the same as the actual user's default group.
#
#     If this variable is not specified, false is assumed.
#
#
# mklink[SVC] = BOOLEAN
#
#     Specifies whether or not to create a symbolic link to the created
#     directory (see "mkdir" above) in the actual user's home directory.
#     The name of the link is taken from the "linkname" variable below.  For
#     example, if the following were to be specified, and adduser.local were
#     called for the user "mark":
#
#         homedir[data1] = "/data/1"
#         subdir[data1] = "users"
#         althome[data1] = false
#         mkdir[data1] = true
#         mklink[data1] = true
#         linkname[data1] = "data1"
#
#     then, not only would the directory "/data/1/users/mark" be created,
#     but the symbolic link "data1" would be created in his home directory
#     as well, pointing to that directory (that is, "/home/mark/data1" ->
#     "/data/1/users/mark").
#
#     If this variable is not specified, false is assumed.
#
#
# linkname[SVC] = PATH
#
#     Specifies the name of the symbolic link created in the user's home
#     directory, as demonstrated in the example above.  If PATH includes
#     subdirectories, these subdirectories must already exist before the
#     symbolic link is created; these can be created by other services prior
#     to this one.
#
#     If the "mklink" variable is true, and the "linkname" variable is not
#     specified, or is an empty string "", the name of the service is used
#     (as specified by the "service" global variable).
#
#
# skelfile[SVC] = PATH
#
#     Instructs adduser.local to copy the file PATH from the "skelother"
#     skeleton directory (see the global variable of that name) into the
#     newly-created directory specified by the "mkdir" variable.  For
#     example, if adduser.local was called for the user "nina", and the
#     following lines were to be specified:
#
#         homedir[www] = "/home/www"
#         subdir[www] = "doc/users"
#         althome[www] = false
#         mkdir[www] = true
#         skelfile[www] = "index.html"
#
#     then the directory "/home/www/doc/users/nina" would be created and the
#     file "index.html" would be copied from /etc/skel.other (assuming this
#     is the directory specified by the "skelother" global variable) into
#     that newly-created directory.
#
#     The newly-copied file will have a mode as specified by the "filemode"
#     global variable, and its group owner will either be the default group
#     of the user, or the group as specified by the "group" variable or
#     implied by the "user" variable.  See the "chgrpskel" variable below.
#
#     If this variable is not specified, or PATH is an empty string "", no
#     file is copied.  If a file of that name already exists, it is NOT
#     overwritten.  Only one file may be specified in any given service; if
#     more are needed, simply create additional services with matching
#     "homedir", "subdir", "althome" and "mkdir" variables.
#
#
# chgrpskel[SVC] = BOOLEAN
#
#     Determines whether or not adduser.local changes the group owner of the
#     copied skeleton file (specified by the "skelfile" variable above) to
#     the group specified by the "group" variable or implied by the "user"
#     variable.  If this variable is false, the default group of the user
#     remains the group owner.
#
#     If this variable is not specified, false is assumed.
#
#
# End of /etc/adduser.local.conf.
                                                                                                                                                       usr/share/doc/adduser/examples/adduser.local.conf.examples/                                         0000755 0000000 0000000 00000000000 14714244400 022452  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/doc/adduser/examples/adduser.local.conf.examples/bash.bashrc                              0000644 0000000 0000000 00000005332 14433702273 024563  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #########################################################################
#      /etc/bash.bashrc: System-wide initialisation file for Bash       #
#########################################################################

# [JNZ] Modified 21-Jun-2013

# This script file is sourced by bash(1) for interactive shells.  It is
# also sourced by /etc/profile for (possibly non-interactive) login
# shells.
#
# Written by John Zaitseff and released into the public domain.


# Useful shell settings

shopt -s checkwinsize expand_aliases
set -P

# Useful variable settings

export LANG=en_AU.UTF-8				# We are in Australia
export LC_ALL=en_AU.UTF-8
export TIME_STYLE=$'+%b %e  %Y\n%b %e %H:%M'	# As used by ls(1)

# Useful aliases, defined whether or not this shell is interactive

alias cls=clear
alias ls="ls -v"
alias ll="ls -l"
alias l.="ls -A"
alias dir="ls -laF"
alias e="emacs -nw"
alias lo=libreoffice

# Set a variable identifying any Debian Chroot Compilation Environment

if [ -z "$debian_chroot" -a -r /etc/debian_chroot ]; then
    export debian_chroot=$(cat /etc/debian_chroot)
