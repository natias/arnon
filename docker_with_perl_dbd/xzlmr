
=back

=head2 Thread::Semaphore - Thread-safe semaphores

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

->new(), ->new(NUMBER), ->down(), ->down(NUMBER), ->down_nb(),
->down_nb(NUMBER), ->down_force(), ->down_force(NUMBER),
->down_timed(TIMEOUT), ->down_timed(TIMEOUT, NUMBER), ->up(), ->up(NUMBER)

=item NOTES

=item SEE ALSO

=item MAINTAINER

=item LICENSE

=back

=head2 Tie::Array - base class for tied arrays

=over 4

=item SYNOPSIS

=item DESCRIPTION

TIEARRAY classname, LIST, STORE this, index, value, FETCH this, index,
FETCHSIZE this, STORESIZE this, count, EXTEND this, count, EXISTS this,
key, DELETE this, key, CLEAR this, DESTROY this, PUSH this, LIST, POP this,
SHIFT this, UNSHIFT this, LIST, SPLICE this, offset, length, LIST

=item CAVEATS

=item AUTHOR

=back

=head2 Tie::File - Access the lines of a disk file via a Perl array

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item C<unicode>

=item C<recsep>

=item C<autochomp>

=item C<mode>

=item C<memory>

=item C<dw_size>

=item Option Format

=back

=item Public Methods

=over 4

=item C<flock>

=item C<autochomp>

=item C<defer>, C<flush>, C<discard>, and C<autodefer>

=item C<offset>

=back

=item Tying to an already-opened filehandle

=item Deferred Writing

=over 4

=item Autodeferring

=back

=item CONCURRENT ACCESS TO FILES

=item CAVEATS

=item SUBCLASSING

=item WHAT ABOUT C<DB_File>?

=item AUTHOR

=item LICENSE

=item WARRANTY

=item THANKS

=item TODO

=back

=head2 Tie::Handle - base class definitions for tied handles

=over 4

=item SYNOPSIS

=item DESCRIPTION

TIEHANDLE classname, LIST, WRITE this, scalar, length, offset, PRINT this,
LIST, PRINTF this, format, LIST, READ this, scalar, length, offset,
READLINE this, GETC this, CLOSE this, OPEN this, filename, BINMODE this,
EOF this, TELL this, SEEK this, offset, whence, DESTROY this

=item MORE INFORMATION

=item COMPATIBILITY

=back

=head2 Tie::Hash, Tie::StdHash, Tie::ExtraHash - base class definitions for
tied hashes

=over 4

=item SYNOPSIS

=item DESCRIPTION

TIEHASH classname, LIST, STORE this, key, value, FETCH this, key, FIRSTKEY
this, NEXTKEY this, lastkey, EXISTS this, key, DELETE this, key, CLEAR
this, SCALAR this

=item Inheriting from B<Tie::StdHash>

=item Inheriting from B<Tie::ExtraHash>

=item C<SCALAR>, C<UNTIE> and C<DESTROY>

=item MORE INFORMATION

=back

=head2 Tie::Hash::NamedCapture - Named regexp capture buffers

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item SEE ALSO

=back

=head2 Tie::Memoize - add data to hash when needed

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item Inheriting from B<Tie::Memoize>

=item EXAMPLE

=item BUGS

=item AUTHOR

=back

=head2 Tie::RefHash - Use references as hash keys

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

=item EXAMPLE

=item THREAD SUPPORT

=item STORABLE SUPPORT

=item SEE ALSO

=item SUPPORT

=item AUTHORS

=item CONTRIBUTORS

=item COPYRIGHT AND LICENCE

=back

=head2 Tie::Scalar, Tie::StdScalar - base class definitions for tied
scalars

=over 4

=item SYNOPSIS

=item DESCRIPTION

TIESCALAR classname, LIST, FETCH this, STORE this, value, DESTROY this

=over 4

=item Tie::Scalar vs Tie::StdScalar

=back

=item MORE INFORMATION

=back

=head2 Tie::StdHandle - base class definitions for tied handles

=over 4

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 Tie::SubstrHash - Fixed-table-size, fixed-key-length hashing

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item CAVEATS

=back

=head2 Time::HiRes - High resolution alarm, sleep, gettimeofday, interval
timers

=over 4

=item SYNOPSIS

=item DESCRIPTION

gettimeofday (), usleep ( $useconds ), nanosleep ( $nanoseconds ), ualarm (
$useconds [, $interval_useconds ] ), tv_interval, time (), sleep (
$floating_seconds ), alarm ( $floating_seconds [,
$interval_floating_seconds ] ), setitimer ( $which, $floating_seconds [,
$interval_floating_seconds ] ), getitimer ( $which ), clock_gettime (
$which ), clock_getres ( $which ), clock_nanosleep ( $which, $nanoseconds,
$flags = 0), clock(), stat, stat FH, stat EXPR, lstat, lstat FH, lstat
EXPR, utime LIST

=item EXAMPLES

=item C API

=item DIAGNOSTICS

=over 4

=item useconds or interval more than ...

=item negative time not invented yet

=item internal error: useconds < 0 (unsigned ... signed ...)

=item useconds or uinterval equal to or more than 1000000

=item unimplemented in this platform

=back

=item CAVEATS

=item SEE ALSO

=item AUTHORS

=item COPYRIGHT AND LICENSE

=back

=head2 Time::Local - Efficiently compute time from local and GMT time

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

=item FUNCTIONS

=over 4

=item C<timelocal_posix()> and C<timegm_posix()>

=item C<timelocal_modern()> and C<timegm_modern()>

=item C<timelocal()> and C<timegm()>

=item C<timelocal_nocheck()> and C<timegm_nocheck()>

=item Year Value Interpretation

=item Limits of time_t

=item Ambiguous Local Times (DST)

=item Non-Existent Local Times (DST)

=item Negative Epoch Values

=back

=item IMPLEMENTATION

=item AUTHORS EMERITUS

=item BUGS

=item SOURCE

=item AUTHOR

=item CONTRIBUTORS

=item COPYRIGHT AND LICENSE

=back

=head2 Time::Piece - Object Oriented time objects

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item USAGE

=over 4

=item Local Locales

=item Date Calculations

=item Truncation

=item Date Comparisons

=item Date Parsing

=item YYYY-MM-DDThh:mm:ss

=item Week Number

=item Global Overriding

=back

=item CAVEATS

=over 4

=item Setting $ENV{TZ} in Threads on Win32

=item Use of epoch seconds

=back

=item AUTHOR

=item COPYRIGHT AND LICENSE

=item SEE ALSO

=item BUGS

=back

=head2 Time::Seconds - a simple API to convert seconds to other date values

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=item AUTHOR

=item COPYRIGHT AND LICENSE

=item Bugs

=back

=head2 Time::gmtime - by-name interface to Perl's built-in gmtime()
function

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item NOTE

=item AUTHOR

=back

=head2 Time::localtime - by-name interface to Perl's built-in localtime()
function

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item NOTE

=item AUTHOR

=back

=head2 Time::tm - internal object used by Time::gmtime and Time::localtime

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item AUTHOR

=back

=head2 UNIVERSAL - base class for ALL classes (blessed references)

=over 4

=item SYNOPSIS

=item DESCRIPTION

C<< $obj->isa( TYPE ) >>, C<< CLASS->isa( TYPE ) >>, C<< eval { VAL->isa(
TYPE ) } >>, C<TYPE>, C<$obj>, C<CLASS>, C<VAL>, C<< $obj->DOES( ROLE ) >>,
C<< CLASS->DOES( ROLE ) >>, C<< $obj->can( METHOD ) >>, C<< CLASS->can(
METHOD ) >>, C<< eval { VAL->can( METHOD ) } >>, C<VERSION ( [ REQUIRE ] )>

=item WARNINGS

=item EXPORTS

=back

=head2 Unicode::Collate - Unicode Collation Algorithm

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Constructor and Tailoring

UCA_Version, alternate, backwards, entry, hangul_terminator, highestFFFF,
identical, ignoreChar, ignoreName, ignore_level2, katakana_before_hiragana,
level, long_contraction, minimalFFFE, normalization, overrideCJK,
overrideHangul, overrideOut, preprocess, rearrange, rewrite, suppress,
table, undefChar, undefName, upper_before_lower, variable

=item Methods for Collation

C<@sorted = $Collator-E<gt>sort(@not_sorted)>, C<$result =
$Collator-E<gt>cmp($a, $b)>, C<$result = $Collator-E<gt>eq($a, $b)>,
C<$result = $Collator-E<gt>ne($a, $b)>, C<$result = $Collator-E<gt>lt($a,
$b)>, C<$result = $Collator-E<gt>le($a, $b)>, C<$result =
$Collator-E<gt>gt($a, $b)>, C<$result = $Collator-E<gt>ge($a, $b)>,
C<$sortKey = $Collator-E<gt>getSortKey($string)>, C<$sortKeyForm =
$Collator-E<gt>viewSortKey($string)>

=item Methods for Searching

C<$position = $Collator-E<gt>index($string, $substring[, $position])>,
C<($position, $length) = $Collator-E<gt>index($string, $substring[,
$position])>, C<$match_ref = $Collator-E<gt>match($string, $substring)>,
C<($match)   = $Collator-E<gt>match($string, $substring)>, C<@match =
$Collator-E<gt>gmatch($string, $substring)>, C<$count =
$Collator-E<gt>subst($string, $substring, $replacement)>, C<$count =
$Collator-E<gt>gsubst($string, $substring, $replacement)>

=item Other Methods

C<%old_tailoring = $Collator-E<gt>change(%new_tailoring)>,
C<$modified_collator = $Collator-E<gt>change(%new_tailoring)>, C<$version =
$Collator-E<gt>version()>, C<UCA_Version()>, C<Base_Unicode_Version()>

=back

=item EXPORT

=item INSTALL

=item CAVEATS

Normalization, Conformance Test

=item AUTHOR, COPYRIGHT AND LICENSE

=item SEE ALSO

Unicode Collation Algorithm - UTS #10, The Default Unicode Collation
Element Table (DUCET), The conformance test for the UCA, Hangul Syllable
Type, Unicode Normalization Forms - UAX #15, Unicode Locale Data Markup
Language (LDML) - UTS #35

=back

=head2 Unicode::Collate::CJK::Big5 - weighting CJK Unified Ideographs
for Unicode::Collate

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item SEE ALSO

CLDR - Unicode Common Locale Data Repository, Unicode Locale Data Markup
Language (LDML) - UTS #35, L<Unicode::Collate>, L<Unicode::Collate::Locale>

=back

=head2 Unicode::Collate::CJK::GB2312 - weighting CJK Unified Ideographs
for Unicode::Collate

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item CAVEAT

=item SEE ALSO

CLDR - Unicode Common Locale Data Repository, Unicode Locale Data Markup
Language (LDML) - UTS #35, L<Unicode::Collate>, L<Unicode::Collate::Locale>

=back

=head2 Unicode::Collate::CJK::JISX0208 - weighting JIS KANJI for
Unicode::Collate

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item SEE ALSO

L<Unicode::Collate>, L<Unicode::Collate::Locale>

=back

=head2 Unicode::Collate::CJK::Korean - weighting CJK Unified Ideographs
for Unicode::Collate

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item SEE ALSO

CLDR - Unicode Common Locale Data Repository, Unicode Locale Data Markup
Language (LDML) - UTS #35, L<Unicode::Collate>, L<Unicode::Collate::Locale>

=back

=head2 Unicode::Collate::CJK::Pinyin - weighting CJK Unified Ideographs
for Unicode::Collate

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item CAVEAT

=item SEE ALSO

CLDR - Unicode Common Locale Data Repository, Unicode Locale Data Markup
Language (LDML) - UTS #35, L<Unicode::Collate>, L<Unicode::Collate::Locale>

=back

=head2 Unicode::Collate::CJK::Stroke - weighting CJK Unified Ideographs
for Unicode::Collate

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item CAVEAT

=item SEE ALSO

CLDR - Unicode Common Locale Data Repository, Unicode Locale Data Markup
Language (LDML) - UTS #35, L<Unicode::Collate>, L<Unicode::Collate::Locale>

=back

=head2 Unicode::Collate::CJK::Zhuyin - weighting CJK Unified Ideographs
for Unicode::Collate

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item CAVEAT

=item SEE ALSO

CLDR - Unicode Common Locale Data Repository, Unicode Locale Data Markup
Language (LDML) - UTS #35, L<Unicode::Collate>, L<Unicode::Collate::Locale>

=back

=head2 Unicode::Collate::Locale - Linguistic tailoring for DUCET via
Unicode::Collate

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Constructor

=item Methods

C<$Collator-E<gt>getlocale>, C<$Collator-E<gt>locale_version>

=item A list of tailorable locales

=item A list of variant codes and their aliases

=back

=item INSTALL

=item CAVEAT

Tailoring is not maximum, Collation reordering is not supported

=over 4

=item Reference

=back

=item AUTHOR

=item SEE ALSO

Unicode Collation Algorithm - UTS #10, The Default Unicode Collation
Element Table (DUCET), Unicode Locale Data Markup Language (LDML) - UTS
#35, CLDR - Unicode Common Locale Data Repository, L<Unicode::Collate>,
L<Unicode::Normalize>

=back

=head2 Unicode::Normalize - Unicode Normalization Forms

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Normalization Forms

C<$NFD_string = NFD($string)>, C<$NFC_string = NFC($string)>,
C<$NFKD_string = NFKD($string)>, C<$NFKC_string = NFKC($string)>,
C<$FCD_string = FCD($string)>, C<$FCC_string = FCC($string)>,
C<$normalized_string = normalize($form_name, $string)>

=item Decomposition and Composition

C<$decomposed_string = decompose($string [, $useCompatMapping])>,
C<$reordered_string = reorder($string)>, C<$composed_string =
compose($string)>, C<($processed, $unprocessed) =
splitOnLastStarter($normalized)>, C<$processed = normalize_partial($form,
$unprocessed)>, C<$processed = NFD_partial($unprocessed)>, C<$processed =
NFC_partial($unprocessed)>, C<$processed = NFKD_partial($unprocessed)>,
C<$processed = NFKC_partial($unprocessed)>

=item Quick Check

C<$result = checkNFD($string)>, C<$result = checkNFC($string)>, C<$result =
checkNFKD($string)>, C<$result = checkNFKC($string)>, C<$result =
checkFCD($string)>, C<$result = checkFCC($string)>, C<$result =
check($form_name, $string)>

=item Character Data

C<$canonical_decomposition = getCanon($code_point)>,
C<$compatibility_decomposition = getCompat($code_point)>,
C<$code_point_composite = getComposite($code_point_here,
$code_point_next)>, C<$combining_class = getCombinClass($code_point)>,
C<$may_be_composed_with_prev_char = isComp2nd($code_point)>,
C<$is_exclusion = isExclusion($code_point)>, C<$is_singleton =
isSingleton($code_point)>, C<$is_non_starter_decomposition =
isNonStDecomp($code_point)>, C<$is_Full_Composition_Exclusion =
isComp_Ex($code_point)>, C<$NFD_is_NO = isNFD_NO($code_point)>,
C<$NFC_is_NO = isNFC_NO($code_point)>, C<$NFC_is_MAYBE =
isNFC_MAYBE($code_point)>, C<$NFKD_is_NO = isNFKD_NO($code_point)>,
C<$NFKC_is_NO = isNFKC_NO($code_point)>, C<$NFKC_is_MAYBE =
isNFKC_MAYBE($code_point)>

=back

=item EXPORT

=item CAVEATS

Perl's version vs. Unicode version, Correction of decomposition mapping,
Revised definition of canonical composition

=item AUTHOR

=item LICENSE

=item SEE ALSO

L<http://www.unicode.org/reports/tr15/>,
L<http://www.unicode.org/Public/UNIDATA/CompositionExclusions.txt>,
L<http://www.unicode.org/Public/UNIDATA/DerivedNormalizationProps.txt>,
L<http://www.unicode.org/Public/UNIDATA/NormalizationCorrections.txt>,
L<http://www.unicode.org/review/pr-29.html>,
L<http://www.unicode.org/notes/tn5/>

=back

=head2 Unicode::UCD - Unicode character database

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item code point argument

=back

=back

=over 4

=item B<charinfo()>

B<code>, B<name>, B<category>, B<combining>, B<bidi>, B<decomposition>,
B<decimal>, B<digit>, B<numeric>, B<mirrored>, B<unicode10>, B<comment>,
B<upper>, B<lower>, B<title>, B<block>, B<script>

=back

=over 4

=item B<charprop()>

Block, Decomposition_Mapping, Name_Alias, Numeric_Value, Script_Extensions

=back

=over 4

=item B<charprops_all()>

=back

=over 4

=item B<charblock()>

=back

=over 4

=item B<charscript()>

=back

=over 4

=item B<charblocks()>

=back

=over 4

=item B<charscripts()>

=back

=over 4

=item B<charinrange()>

=back

=over 4

=item B<general_categories()>

=back

=over 4

=item B<bidi_types()>

=back

=over 4

=item B<compexcl()>

=back

=over 4

=item B<casefold()>

B<code>, B<full>, B<simple>, B<mapping>, B<status>, Z<>B<*> If you use this
C<I> mapping, Z<>B<*> If you exclude this C<I> mapping, B<turkic>

=back

=over 4

=item B<all_casefolds()>

=back

=over 4

=item B<casespec()>

B<code>, B<lower>, B<title>, B<upper>, B<condition>

=back

=over 4

=item B<namedseq()>

=back

=over 4

=item B<num()>

=back

=over 4

=item B<prop_aliases()>

=back

=over 4

=item B<prop_values()>

=back

=over 4

=item B<prop_value_aliases()>

=back

=over 4

=item B<prop_invlist()>

=back

=over 4

=item B<prop_invmap()>

B<C<s>>, B<C<sl>>, C<correction>, C<control>, C<alternate>, C<figment>,
C<abbreviation>, B<C<a>>, B<C<al>>, B<C<ae>>, B<C<ale>>, B<C<ar>>, B<C<n>>,
B<C<ad>>

=back

=over 4

=item B<search_invlist()>

=back

=over 4

=item Unicode::UCD::UnicodeVersion

=back

=over 4

=item B<Blocks versus Scripts>

=item B<Matching Scripts and Blocks>

=item Old-style versus new-style block names

=item Use with older Unicode versions

=back

=over 4

=item AUTHOR

=back

=head2 User::grent - by-name interface to Perl's built-in getgr*()
functions

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item NOTE

=item AUTHOR

=back

=head2 User::pwent - by-name interface to Perl's built-in getpw*()
functions

=over 4

=item SYNOPSIS
