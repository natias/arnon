    )
    if dest:
        dests = [dest]
    else:
        dests = []
    missing = set()
    for path in urlutil.get_push_paths(repo, repo.ui, dests):
        dest = path.pushloc or path.loc
        branches = path.branch, []

        revs, checkout = hg.addbranchrevs(repo, repo, branches, [])
        if revs:
            revs = [repo.lookup(rev) for rev in revs]
        other = hg.peer(repo, {}, dest)
        try:
            with repo.ui.silent():
                outgoing = discovery.findcommonoutgoing(
                    repo, other, onlyheads=revs
                )
        finally:
            other.close()
        missing.update(outgoing.missing)
    cl = repo.changelog
    o = {cl.rev(r) for r in missing}
    return subset & o


@predicate(b'p1([set])', safe=True)
def p1(repo, subset, x):
    """First parent of changesets in set, or the working directory."""
    if x is None:
        p = repo[x].p1().rev()
        if p >= 0:
            return subset & baseset([p])
        return baseset()

    ps = set()
    cl = repo.changelog
    for r in getset(repo, fullreposet(repo), x):
        try:
            ps.add(cl.parentrevs(r)[0])
        except error.WdirUnsupported:
            ps.add(repo[r].p1().rev())
    ps -= {nullrev}
    # XXX we should turn this into a baseset instead of a set, smartset may do
    # some optimizations from the fact this is a baseset.
    return subset & ps


@predicate(b'p2([set])', safe=True)
def p2(repo, subset, x):
    """Second parent of changesets in set, or the working directory."""
    if x is None:
        ps = repo[x].parents()
        try:
            p = ps[1].rev()
            if p >= 0:
                return subset & baseset([p])
            return baseset()
        except IndexError:
            return baseset()

    ps = set()
    cl = repo.changelog
    for r in getset(repo, fullreposet(repo), x):
        try:
            ps.add(cl.parentrevs(r)[1])
        except error.WdirUnsupported:
            parents = repo[r].parents()
            if len(parents) == 2:
                ps.add(parents[1])
    ps -= {nullrev}
    # XXX we should turn this into a baseset instead of a set, smartset may do
    # some optimizations from the fact this is a baseset.
    return subset & ps


def parentpost(repo, subset, x, order):
    return p1(repo, subset, x)


@predicate(b'parents([set])', safe=True)
def parents(repo, subset, x):
    """
    The set of all parents for all changesets in set, or the working directory.
    """
    if x is None:
        ps = {p.rev() for p in repo[x].parents()}
    else:
        ps = set()
        cl = repo.changelog
        up = ps.update
        parentrevs = cl.parentrevs
        for r in getset(repo, fullreposet(repo), x):
            try:
                up(parentrevs(r))
            except error.WdirUnsupported:
                up(p.rev() for p in repo[r].parents())
    ps -= {nullrev}
    return subset & ps


def _phase(repo, subset, *targets):
    """helper to select all rev in <targets> phases"""
    return repo._phasecache.getrevset(repo, targets, subset)


@predicate(b'_phase(idx)', safe=True)
def phase(repo, subset, x):
    l = getargs(x, 1, 1, b"_phase requires one argument")
    target = getinteger(l[0], b"_phase expects a number")
    return _phase(repo, subset, target)


@predicate(b'draft()', safe=True)
def draft(repo, subset, x):
    """Changeset in draft phase."""
    # i18n: "draft" is a keyword
    getargs(x, 0, 0, _(b"draft takes no arguments"))
    target = phases.draft
    return _phase(repo, subset, target)


@predicate(b'secret()', safe=True)
def secret(repo, subset, x):
    """Changeset in secret phase."""
    # i18n: "secret" is a keyword
    getargs(x, 0, 0, _(b"secret takes no arguments"))
    target = phases.secret
    return _phase(repo, subset, target)


@predicate(b'stack([revs])', safe=True)
def stack(repo, subset, x):
    """Experimental revset for the stack of changesets or working directory
    parent. (EXPERIMENTAL)
    """
    if x is None:
        stacks = stackmod.getstack(repo)
    else:
        stacks = smartset.baseset([])
        for revision in getset(repo, fullreposet(repo), x):
            currentstack = stackmod.getstack(repo, revision)
            stacks = stacks + currentstack

    return subset & stacks


def parentspec(repo, subset, x, n, order):
    """``set^0``
    The set.
    ``set^1`` (or ``set^``), ``set^2``
    First or second parent, respectively, of all changesets in set.
    """
    try:
        n = int(n[1])
        if n not in (0, 1, 2):
            raise ValueError
    except (TypeError, ValueError):
        raise error.ParseError(_(b"^ expects a number 0, 1, or 2"))
    ps = set()
    cl = repo.changelog
    for r in getset(repo, fullreposet(repo), x):
        if n == 0:
            ps.add(r)
        elif n == 1:
            try:
                ps.add(cl.parentrevs(r)[0])
            except error.WdirUnsupported:
                ps.add(repo[r].p1().rev())
        else:
            try:
                parents = cl.parentrevs(r)
                if parents[1] != nullrev:
                    ps.add(parents[1])
            except error.WdirUnsupported:
                parents = repo[r].parents()
                if len(parents) == 2:
                    ps.add(parents[1].rev())
    return subset & ps


@predicate(b'present(set)', safe=True, takeorder=True)
def present(repo, subset, x, order):
    """An empty set, if any revision in set isn't found; otherwise,
    all revisions in set.

    If any of specified revisions is not present in the local repository,
    the query is normally aborted. But this predicate allows the query
    to continue even in such cases.
    """
    try:
        return getset(repo, subset, x, order)
    except error.RepoLookupError:
        return baseset()


# for internal use
@predicate(b'_notpublic', safe=True)
def _notpublic(repo, subset, x):
    getargs(x, 0, 0, b"_notpublic takes no arguments")
    return _phase(repo, subset, phases.draft, phases.secret)


# for internal use
@predicate(b'_phaseandancestors(phasename, set)', safe=True)
def _phaseandancestors(repo, subset, x):
    # equivalent to (phasename() & ancestors(set)) but more efficient
    # phasename could be one of 'draft', 'secret', or '_notpublic'
    args = getargs(x, 2, 2, b"_phaseandancestors requires two arguments")
    phasename = getsymbol(args[0])
    s = getset(repo, fullreposet(repo), args[1])

    draft = phases.draft
    secret = phases.secret
    phasenamemap = {
        b'_notpublic': draft,
        b'draft': draft,  # follow secret's ancestors
        b'secret': secret,
    }
    if phasename not in phasenamemap:
        raise error.ParseError(b'%r is not a valid phasename' % phasename)

    minimalphase = phasenamemap[phasename]
    getphase = repo._phasecache.phase

    def cutfunc(rev):
        return getphase(repo, rev) < minimalphase

    revs = dagop.revancestors(repo, s, cutfunc=cutfunc)

    if phasename == b'draft':  # need to remove secret changesets
        revs = revs.filter(lambda r: getphase(repo, r) == draft)
    return subset & revs


@predicate(b'public()', safe=True)
def public(repo, subset, x):
    """Changeset in public phase."""
    # i18n: "public" is a keyword
    getargs(x, 0, 0, _(b"public takes no arguments"))
    return _phase(repo, subset, phases.public)


@predicate(b'remote([id [,path]])', safe=False)
def remote(repo, subset, x):
    """Local revision that corresponds to the given identifier in a
    remote repository, if present. Here, the '.' identifier is a
    synonym for the current local branch.
    """

    from . import hg  # avoid start-up nasties

    # i18n: "remote" is a keyword
    l = getargs(x, 0, 2, _(b"remote takes zero, one, or two arguments"))

    q = b'.'
    if len(l) > 0:
        # i18n: "remote" is a keyword
        q = getstring(l[0], _(b"remote requires a string id"))
    if q == b'.':
        q = repo[b'.'].branch()

    dest = b''
    if len(l) > 1:
        # i18n: "remote" is a keyword
        dest = getstring(l[1], _(b"remote requires a repository path"))
    if not dest:
        dest = b'default'
    dest, branches = urlutil.get_unique_pull_path(
        b'remote', repo, repo.ui, dest
    )

    other = hg.peer(repo, {}, dest)
    n = other.lookup(q)
    if n in repo:
        r = repo[n].rev()
        if r in subset:
            return baseset([r])
    return baseset()


@predicate(b'removes(pattern)', safe=True, weight=30)
def removes(repo, subset, x):
    """Changesets which remove files matching pattern.

    The pattern without explicit kind like ``glob:`` is expected to be
    relative to the current directory and match against a file or a
    directory.
    """
    # i18n: "removes" is a keyword
    pat = getstring(x, _(b"removes requires a pattern"))
    return checkstatus(repo, subset, pat, 'removed')


@predicate(b'rev(number)', safe=True)
def rev(repo, subset, x):
    """Revision with the given numeric identifier."""
    try:
        return _rev(repo, subset, x)
    except error.RepoLookupError:
        return baseset()


@predicate(b'_rev(number)', safe=True)
def _rev(repo, subset, x):
    # internal version of "rev(x)" that raise error if "x" is invalid
    # i18n: "rev" is a keyword
    l = getargs(x, 1, 1, _(b"rev requires one argument"))
    try:
        # i18n: "rev" is a keyword
        l = int(getstring(l[0], _(b"rev requires a number")))
    except (TypeError, ValueError):
        # i18n: "rev" is a keyword
        raise error.ParseError(_(b"rev expects a number"))
    if l not in _virtualrevs:
        try:
            repo.changelog.node(l)  # check that the rev exists
        except IndexError:
            raise error.RepoLookupError(_(b"unknown revision '%d'") % l)
    return subset & baseset([l])


@predicate(b'revset(set)', safe=True, takeorder=True)
def revsetpredicate(repo, subset, x, order):
    """Strictly interpret the content as a revset.

    The content of this special predicate will be strictly interpreted as a
    revset. For example, ``revset(id(0))`` will be interpreted as "id(0)"
    without possible ambiguity with a "id(0)" bookmark or tag.
    """
    return getset(repo, subset, x, order)


@predicate(b'matching(revision [, field])', safe=True)
def matching(repo, subset, x):
    """Changesets in which a given set of fields match the set of fields in the
    selected revision or set.

    To match more than one field pass the list of fields to match separated
    by spaces (e.g. ``author description``).

    Valid fields are most regular revision fields and some special fields.

    Regular revision fields are ``description``, ``author``, ``branch``,
    ``date``, ``files``, ``phase``, ``parents``, ``substate``, ``user``
    and ``diff``.
    Note that ``author`` and ``user`` are synonyms. ``diff`` refers to the
    contents of the revision. Two revisions matching their ``diff`` will
    also match their ``files``.

    Special fields are ``summary`` and ``metadata``:
    ``summary`` matches the first line of the description.
    ``metadata`` is equivalent to matching ``description user date``
    (i.e. it matches the main metadata fields).

    ``metadata`` is the default field which is used when no fields are
    specified. You can match more than one field at a time.
    """
    # i18n: "matching" is a keyword
    l = getargs(x, 1, 2, _(b"matching takes 1 or 2 arguments"))

    revs = getset(repo, fullreposet(repo), l[0])

    fieldlist = [b'metadata']
    if len(l) > 1:
        fieldlist = getstring(
            l[1],
            # i18n: "matching" is a keyword
            _(b"matching requires a string as its second argument"),
        ).split()

    # Make sure that there are no repeated fields,
    # expand the 'special' 'metadata' field type
    # and check the 'files' whenever we check the 'diff'
    fields = []
    for field in fieldlist:
        if field == b'metadata':
            fields += [b'user', b'description', b'date']
        elif field == b'diff':
            # a revision matching the diff must also match the files
            # since matching the diff is very costly, make sure to
            # also match the files first
            fields += [b'files', b'diff']
        else:
            if field == b'author':
                field = b'user'
            fields.append(field)
    fields = set(fields)
    if b'summary' in fields and b'description' in fields:
        # If a revision matches its description it also matches its summary
        fields.discard(b'summary')

    # We may want to match more than one field
    # Not all fields take the same amount of time to be matched
    # Sort the selected fields in order of increasing matching cost
    fieldorder = [
        b'phase',
        b'parents',
        b'user',
        b'date',
        b'branch',
        b'summary',
        b'files',
        b'description',
        b'substate',
        b'diff',
    ]

    def fieldkeyfunc(f):
        try:
            return fieldorder.index(f)
        except ValueError:
            # assume an unknown field is very costly
            return len(fieldorder)

    fields = list(fields)
    fields.sort(key=fieldkeyfunc)

    # Each field will be matched with its own "getfield" function
    # which will be added to the getfieldfuncs array of functions
    getfieldfuncs = []
    _funcs = {
        b'user': lambda r: repo[r].user(),
        b'branch': lambda r: repo[r].branch(),
        b'date': lambda r: repo[r].date(),
        b'description': lambda r: repo[r].description(),
        b'files': lambda r: repo[r].files(),
        b'parents': lambda r: repo[r].parents(),
        b'phase': lambda r: repo[r].phase(),
        b'substate': lambda r: repo[r].substate,
        b'summary': lambda r: repo[r].description().splitlines()[0],
        b'diff': lambda r: list(
            repo[r].diff(opts=diffutil.diffallopts(repo.ui, {b'git': True}))
        ),
    }
    for info in fields:
        getfield = _funcs.get(info, None)
        if getfield is None:
            raise error.ParseError(
                # i18n: "matching" is a keyword
                _(b"unexpected field name passed to matching: %s")
                % info
            )
        getfieldfuncs.append(getfield)
    # convert the getfield array of functions into a "getinfo" function
    # which returns an array of field values (or a single value if there
    # is only one field to match)
    getinfo = lambda r: [f(r) for f in getfieldfuncs]

    def matches(x):
        for rev in revs:
            target = getinfo(rev)
            match = True
            for n, f in enumerate(getfieldfuncs):
                if target[n] != f(x):
                    match = False
            if match:
                return True
        return False

    return subset.filter(matches, condrepr=(b'<matching%r %r>', fields, revs))


@predicate(b'reverse(set)', safe=True, takeorder=True, weight=0)
def reverse(repo, subset, x, order):
    """Reverse order of set."""
    l = getset(repo, subset, x, order)
    if order == defineorder:
        l.reverse()
    return l


@predicate(b'roots(set)', safe=True)
def roots(repo, subset, x):
    """Changesets in set with no parent changeset in set."""
    s = getset(repo, fullreposet(repo), x)
    parents = repo.changelog.parentrevs

    def filter(r):
        try:
            for p in parents(r):
                if 0 <= p and p in s:
                    return False
        except error.WdirUnsupported:
            for p in repo[None].parents():
                if p.rev() in s:
                    return False
        return True

    return subset & s.filter(filter, condrepr=b'<roots>')


MAXINT = (1 << 31) - 1
MININT = -MAXINT - 1


def pick_random(c, gen=random):
    # exists as its own function to make it possible to overwrite the seed
    return gen.randint(MININT, MAXINT)


_sortkeyfuncs = {
    b'rev': scmutil.intrev,
    b'branch': lambda c: c.branch(),
    b'desc': lambda c: c.description(),
    b'user': lambda c: c.user(),
    b'author': lambda c: c.user(),
    b'date': lambda c: c.date()[0],
    b'node': scmutil.binnode,
    b'random': pick_random,
}


def _getsortargs(x):
    """Parse sort options into (set, [(key, reverse)], opts)"""
    args = getargsdict(
        x,
        b'sort',
        b'set keys topo.firstbranch random.seed',
    )
    if b'set' not in args:
        # i18n: "sort" is a keyword
        raise error.ParseError(_(b'sort requires one or two arguments'))
    keys = b"rev"
    if b'keys' in args:
        # i18n: "sort" is a keyword
        keys = getstring(args[b'keys'], _(b"sort spec must be a string"))

    keyflags = []
    for k in keys.split():
        fk = k
        reverse = k.startswith(b'-')
        if reverse:
            k = k[1:]
        if k not in _sortkeyfuncs and k != b'topo':
            raise error.ParseError(
                _(b"unknown sort key %r") % pycompat.bytestr(fk)
            )
        keyflags.append((k, reverse))

    if len(keyflags) > 1 and any(k == b'topo' for k, reverse in keyflags):
        # i18n: "topo" is a keyword
        raise error.ParseError(
            _(b'topo sort order cannot be combined with other sort keys')
        )

    opts = {}
    if b'topo.firstbranch' in args:
        if any(k == b'topo' for k, reverse in keyflags):
            opts[b'topo.firstbranch'] = args[b'topo.firstbranch']
        else:
            # i18n: "topo" and "topo.firstbranch" are keywords
            raise error.ParseError(
                _(
                    b'topo.firstbranch can only be used '
                    b'when using the topo sort key'
                )
            )

    if b'random.seed' in args:
        if any(k == b'random' for k, reverse in keyflags):
            s = args[b'random.seed']
            seed = getstring(s, _(b"random.seed must be a string"))
            opts[b'random.seed'] = seed
        else:
            # i18n: "random" and "random.seed" are keywords
            raise error.ParseError(
                _(
                    b'random.seed can only be used '
                    b'when using the random sort key'
                )
            )

    return args[b'set'], keyflags, opts


@predicate(
    b'sort(set[, [-]key... [, ...]])', safe=True, takeorder=True, weight=10
)
def sort(repo, subset, x, order):
    """Sort set by keys. The default sort order is ascending, specify a key
    as ``-key`` to sort in descending order.

    The keys can be:

    - ``rev`` for the revision number,
    - ``branch`` for the branch name,
    - ``desc`` for the commit message (description),
    - ``user`` for user name (``author`` can be used as an alias),
    - ``date`` for the commit date
    - ``topo`` for a reverse topographical sort
    - ``node`` the nodeid of the revision
    - ``random`` randomly shuffle revisions

    The ``topo`` sort order cannot be combined with other sort keys. This sort
    takes one optional argument, ``topo.firstbranch``, which takes a revset that
    specifies what topographical branches to prioritize in the sort.

    The ``random`` sort takes one optional ``random.seed`` argument to control
    the pseudo-randomness of the result.
    """
    s, keyflags, opts = _getsortargs(x)
    revs = getset(repo, subset, s, order)

    if not keyflags or order != defineorder:
        return revs
    if len(keyflags) == 1 and keyflags[0][0] == b"rev":
        revs.sort(reverse=keyflags[0][1])
        return revs
    elif keyflags[0][0] == b"topo":
        firstbranch = ()
        parentrevs = repo.changelog.parentrevs
        parentsfunc = parentrevs
        if wdirrev in revs:

            def parentsfunc(r):
                try:
                    return parentrevs(r)
                except error.WdirUnsupported:
                    return [p.rev() for p in repo[None].parents()]

        if b'topo.firstbranch' in opts:
            firstbranch = getset(repo, subset, opts[b'topo.firstbranch'])
        revs = baseset(
            dagop.toposort(revs, parentsfunc, firstbranch),
            istopo=True,
        )
        if keyflags[0][1]:
            revs.reverse()
        return revs

    # sort() is guaranteed to be stable
    ctxs = [repo[r] for r in revs]
    for k, reverse in reversed(keyflags):
        func = _sortkeyfuncs[k]
        if k == b'random' and b'random.seed' in opts:
            seed = opts[b'random.seed']
            r = random.Random(seed)
            func = functools.partial(func, gen=r)
        ctxs.sort(key=func, reverse=reverse)
    return baseset([c.rev() for c in ctxs])


@predicate(b'subrepo([pattern])')
def subrepo(repo, subset, x):
    """Changesets that add, modify or remove the given subrepo.  If no subrepo
    pattern is named, any subrepo changes are returned.
    """
    # i18n: "subrepo" is a keyword
    args = getargs(x, 0, 1, _(b'subrepo takes at most one argument'))
    pat = None
    if len(args) != 0:
        pat = getstring(args[0], _(b"subrepo requires a pattern"))

    m = matchmod.exact([b'.hgsubstate'])

    def submatches(names):
        k, p, m = stringutil.stringmatcher(pat)
        for name in names:
            if m(name):
                yield name

    def matches(x):
        c = repo[x]
        s = repo.status(c.p1().node(), c.node(), match=m)

        if pat is None:
            return s.added or s.modified or s.removed

        if s.added:
            return any(submatches(c.substate.keys()))

        if s.modified:
            subs = set(c.p1().substate.keys())
            subs.update(c.substate.keys())

            for path in submatches(subs):
                if c.p1().substate.get(path) != c.substate.get(path):
                    return True

        if s.removed:
            return any(submatches(c.p1().substate.keys()))

        return False

    return subset.filter(matches, condrepr=(b'<subrepo %r>', pat))


def _mapbynodefunc(repo, s, f):
    """(repo, smartset, [node] -> [node]) -> smartset

    Helper method to map a smartset to another smartset given a function only
    talking about nodes. Handles converting between rev numbers and nodes, and
    filtering.
    """
    cl = repo.unfiltered().changelog
    torev = cl.index.get_rev
    tonode = cl.node
    result = {torev(n) for n in f(tonode(r) for r in s)}
    result.discard(None)
    return smartset.baseset(result - repo.changelog.filteredrevs)


@predicate(b'successors(set)', safe=True)
def successors(repo, subset, x):
    """All successors for set, including the given set themselves.
    (EXPERIMENTAL)"""
    s = getset(repo, fullreposet(repo), x)
    f = lambda nodes: obsutil.allsuccessors(repo.obsstore, nodes)
    d = _mapbynodefunc(repo, s, f)
    return subset & d


def _substringmatcher(pattern, casesensitive=True):
    kind, pattern, matcher = stringutil.stringmatcher(
        pattern, casesensitive=casesensitive
    )
    if kind == b'literal':
        if not casesensitive:
            pattern = encoding.lower(pattern)
            matcher = lambda s: pattern in encoding.lower(s)
        else:
            matcher = lambda s: pattern in s
    return kind, pattern, matcher


@predicate(b'tag([name])', safe=True)
def tag(repo, subset, x):
    """The specified tag by name, or all tagged revisions if no name is given.

    Pattern matching is supported for `name`. See
    :hg:`help revisions.patterns`.
    """
    # i18n: "tag" is a keyword
    args = getargs(x, 0, 1, _(b"tag takes one or no arguments"))
    cl = repo.changelog
    if args:
        pattern = getstring(
            args[0],
            # i18n: "tag" is a keyword
            _(b'the argument to tag must be a string'),
        )
        kind, pattern, matcher = stringutil.stringmatcher(pattern)
        if kind == b'literal':
            # avoid resolving all tags
            tn = repo._tagscache.tags.get(pattern, None)
            if tn is None:
                raise error.RepoLookupError(
                    _(b"tag '%s' does not exist") % pattern
                )
            s = {repo[tn].rev()}
        else:
            s = {cl.rev(n) for t, n in repo.tagslist() if matcher(t)}
    else:
        s = {cl.rev(n) for t, n in repo.tagslist() if t != b'tip'}
    return subset & s


@predicate(b'tagged', safe=True)
def tagged(repo, subset, x):
    return tag(repo, subset, x)


@predicate(b'orphan()', safe=True)
def orphan(repo, subset, x):
    """Non-obsolete changesets with obsolete ancestors. (EXPERIMENTAL)"""
    # i18n: "orphan" is a keyword
    getargs(x, 0, 0, _(b"orphan takes no arguments"))
    orphan = obsmod.getrevs(repo, b'orphan')
    return subset & orphan


@predicate(b'unstable()', safe=True)
def unstable(repo, subset, x):
    """Changesets with instabilities. (EXPERIMENTAL)"""
    # i18n: "unstable" is a keyword
    getargs(x, 0, 0, b'unstable takes no arguments')
    _unstable = set()
    _unstable.update(obsmod.getrevs(repo, b'orphan'))
    _unstable.update(obsmod.getrevs(repo, b'phasedivergent'))
    _unstable.update(obsmod.getrevs(repo, b'contentdivergent'))
    return subset & baseset(_unstable)


@predicate(b'user(string)', safe=True, weight=10)
def user(repo, subset, x):
    """User name contains string. The match is case-insensitive.

    Pattern matching is supported for `string`. See
    :hg:`help revisions.patterns`.
    """
    return author(repo, subset, x)


@predicate(b'wdir()', safe=True, weight=0)
def wdir(repo, subset, x):
    """Working directory. (EXPERIMENTAL)"""
    # i18n: "wdir" is a keyword
    getargs(x, 0, 0, _(b"wdir takes no arguments"))
    if wdirrev in subset or isinstance(subset, fullreposet):
        return baseset([wdirrev])
    return baseset()


def _orderedlist(repo, subset, x):
    s = getstring(x, b"internal error")
    if not s:
        return baseset()
    # remove duplicates here. it's difficult for caller to deduplicate sets
    # because different symbols can point to the same rev.
    cl = repo.changelog
    ls = []
    seen = set()
    for t in s.split(b'\0'):
        try:
            # fast path for integer revision
            r = int(t)
            if (b'%d' % r) != t or r not in cl:
                raise ValueError
            revs = [r]
        except ValueError:
            revs = stringset(repo, subset, t, defineorder)

        for r in revs:
            if r in seen:
                continue
            if (
                r in subset
                or r in _virtualrevs
                and isinstance(subset, fullreposet)
            ):
                ls.append(r)
            seen.add(r)
    return baseset(ls)


# for internal use
@predicate(b'_list', safe=True, takeorder=True)
def _list(repo, subset, x, order):
    if order == followorder:
        # slow path to take the subset order
        return subset & _orderedlist(repo, fullreposet(repo), x)
    else:
        return _orderedlist(repo, subset, x)


def _orderedintlist(repo, subset, x):
    s = getstring(x, b"internal error")
    if not s:
        return baseset()
    ls = [int(r) for r in s.split(b'\0')]
    s = subset
    return baseset([r for r in ls if r in s])


# for internal use
@predicate(b'_intlist', safe=True, takeorder=True, weight=0)
def _intlist(repo, subset, x, order):
    if order == followorder:
        # slow path to take the subset order
        return subset & _orderedintlist(repo, fullreposet(repo), x)
    else:
        return _orderedintlist(repo, subset, x)


def _orderedhexlist(repo, subset, x):
    s = getstring(x, b"internal error")
    if not s:
        return baseset()
    cl = repo.changelog
    ls = [cl.rev(bin(r)) for r in s.split(b'\0')]
    s = subset
    return baseset([r for r in ls if r in s])


# for internal use
@predicate(b'_hexlist', safe=True, takeorder=True)
def _hexlist(repo, subset, x, order):
    if order == followorder:
        # slow path to take the subset order
        return subset & _orderedhexlist(repo, fullreposet(repo), x)
    else:
        return _orderedhexlist(repo, subset, x)


methods = {
    b"range": rangeset,
    b"rangeall": rangeall,
    b"rangepre": rangepre,
    b"rangepost": rangepost,
    b"dagrange": dagrange,
    b"string": stringset,
    b"symbol": stringset,
    b"and": andset,
    b"andsmally": andsmallyset,
    b"or": orset,
    b"not": notset,
    b"difference": differenceset,
    b"relation": relationset,
    b"relsubscript": relsubscriptset,
    b"subscript": subscriptset,
    b"list": listset,
    b"keyvalue": keyvaluepair,
    b"func": func,
    b"ancestor": ancestorspec,
    b"parent": parentspec,
    b"parentpost": parentpost,
    b"smartset": rawsmartset,
}

relations = {
    b"g": generationsrel,
    b"generations": generationsrel,
}

subscriptrelations = {
    b"g": generationssubrel,
    b"generations": generationssubrel,
}


def lookupfn(repo):
    def fn(symbol):
        try:
            return scmutil.isrevsymbol(repo, symbol)
        except error.AmbiguousPrefixLookupError:
            raise error.InputError(
                b'ambiguous revision identifier: %s' % symbol
            )

    return fn


def match(ui, spec, lookup=None):
    """Create a matcher for a single revision spec"""
    return matchany(ui, [spec], lookup=lookup)


def matchany(ui, specs, lookup=None, localalias=None):
    """Create a matcher that will include any revisions matching one of the
    given specs

    If lookup function is not None, the parser will first attempt to handle
    old-style ranges, which may contain operator characters.

    If localalias is not None, it is a dict {name: definitionstring}. It takes
    precedence over [revsetalias] config section.
    """
    if not specs:

        def mfunc(repo, subset=None):
            return baseset()

        return mfunc
    if not all(specs):
        raise error.ParseError(_(b"empty query"))
    if len(specs) == 1:
        tree = revsetlang.parse(specs[0], lookup)
    else:
        tree = (
            b'or',
            (b'list',) + tuple(revsetlang.parse(s, lookup) for s in specs),
        )

    aliases = []
    warn = None
    if ui:
        aliases.extend(ui.configitems(b'revsetalias'))
        warn = ui.warn
    if localalias:
        aliases.extend(localalias.items())
    if aliases:
        tree = revsetlang.expandaliases(tree, aliases, warn=warn)
    tree = revsetlang.foldconcat(tree)
    tree = revsetlang.analyze(tree)
    tree = revsetlang.optimize(tree)
    return makematcher(tree)


def makematcher(tree):
    """Create a matcher from an evaluatable tree"""

    def mfunc(repo, subset=None, order=None):
        if order is None:
            if subset is None:
                order = defineorder  # 'x'
            else:
                order = followorder  # 'subset & x'
        if subset is None:
            subset = fullreposet(repo)
        return getset(repo, subset, tree, order)

    return mfunc


def loadpredicate(ui, extname, registrarobj):
    """Load revset predicates from specified registrarobj"""
    for name, func in registrarobj._table.items():
        symbols[name] = func
