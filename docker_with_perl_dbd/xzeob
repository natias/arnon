          dTHX;
          STRLEN len;
          if (SvUTF8(sv)) {
              if (SvGMAGICAL(sv))
                  len = Perl_sv_len_utf8(aTHX_
                                         sv_mortalcopy_flags(sv,
                                                             SV_NOSTEAL));
              else
                  len = Perl_sv_len_utf8(aTHX_ sv);
          }
          else SvPV_nomg(sv, len);
          return len;
       }
#      define sv_len_utf8_nomg(sv) D_PPP_sv_len_utf8_nomg(sv)

       PERL_STATIC_INLINE STRLEN D_PPP_sv_len_utf8(SV * sv)
       {
          dTHX;
          SvGETMAGIC(sv);
          return sv_len_utf8_nomg(sv);
       }
#      define sv_len_utf8(sv) D_PPP_sv_len_utf8(sv)
#    endif
#  endif    /* End of < 5.17.5 */
#endif
#ifndef PERL_PV_ESCAPE_QUOTE
#  define PERL_PV_ESCAPE_QUOTE           0x0001
#endif

#ifndef PERL_PV_PRETTY_QUOTE
#  define PERL_PV_PRETTY_QUOTE           PERL_PV_ESCAPE_QUOTE
#endif

#ifndef PERL_PV_PRETTY_ELLIPSES
#  define PERL_PV_PRETTY_ELLIPSES        0x0002
#endif

#ifndef PERL_PV_PRETTY_LTGT
#  define PERL_PV_PRETTY_LTGT            0x0004
#endif

#ifndef PERL_PV_ESCAPE_FIRSTCHAR
#  define PERL_PV_ESCAPE_FIRSTCHAR       0x0008
#endif

#ifndef PERL_PV_ESCAPE_UNI
#  define PERL_PV_ESCAPE_UNI             0x0100
#endif

#ifndef PERL_PV_ESCAPE_UNI_DETECT
#  define PERL_PV_ESCAPE_UNI_DETECT      0x0200
#endif

#ifndef PERL_PV_ESCAPE_ALL
#  define PERL_PV_ESCAPE_ALL             0x1000
#endif

#ifndef PERL_PV_ESCAPE_NOBACKSLASH
#  define PERL_PV_ESCAPE_NOBACKSLASH     0x2000
#endif

#ifndef PERL_PV_ESCAPE_NOCLEAR
#  define PERL_PV_ESCAPE_NOCLEAR         0x4000
#endif

#ifndef PERL_PV_ESCAPE_RE
#  define PERL_PV_ESCAPE_RE              0x8000
#endif

#ifndef PERL_PV_PRETTY_NOCLEAR
#  define PERL_PV_PRETTY_NOCLEAR         PERL_PV_ESCAPE_NOCLEAR
#endif
#ifndef PERL_PV_PRETTY_DUMP
#  define PERL_PV_PRETTY_DUMP            PERL_PV_PRETTY_ELLIPSES|PERL_PV_PRETTY_QUOTE
#endif

#ifndef PERL_PV_PRETTY_REGPROP
#  define PERL_PV_PRETTY_REGPROP         PERL_PV_PRETTY_ELLIPSES|PERL_PV_PRETTY_LTGT|PERL_PV_ESCAPE_RE
#endif

/* Hint: pv_escape
 * Note that unicode functionality is only backported to
 * those perl versions that support it. For older perl
 * versions, the implementation will fall back to bytes.
 */

#ifndef pv_escape
#if defined(NEED_pv_escape)
static char * DPPP_(my_pv_escape)(pTHX_ SV * dsv, char const * const str, const STRLEN count, const STRLEN max, STRLEN * const escaped, const U32 flags);
static
#else
extern char * DPPP_(my_pv_escape)(pTHX_ SV * dsv, char const * const str, const STRLEN count, const STRLEN max, STRLEN * const escaped, const U32 flags);
#endif

#if defined(NEED_pv_escape) || defined(NEED_pv_escape_GLOBAL)

#ifdef pv_escape
#  undef pv_escape
#endif
#define pv_escape(a,b,c,d,e,f) DPPP_(my_pv_escape)(aTHX_ a,b,c,d,e,f)
#define Perl_pv_escape DPPP_(my_pv_escape)


char *
DPPP_(my_pv_escape)(pTHX_ SV *dsv, char const * const str,
  const STRLEN count, const STRLEN max,
  STRLEN * const escaped, const U32 flags)
{
    const char esc = flags & PERL_PV_ESCAPE_RE ? '%' : '\\';
    const char dq = flags & PERL_PV_ESCAPE_QUOTE ? '"' : esc;
    char octbuf[32] = "%123456789ABCDF";
    STRLEN wrote = 0;
    STRLEN chsize = 0;
    STRLEN readsize = 1;
#if defined(is_utf8_string) && defined(utf8_to_uvchr_buf)
    bool isuni = flags & PERL_PV_ESCAPE_UNI ? 1 : 0;
#endif
    const char *pv  = str;
    const char * const end = pv + count;
    octbuf[0] = esc;

    if (!(flags & PERL_PV_ESCAPE_NOCLEAR))
        sv_setpvs(dsv, "");

#if defined(is_utf8_string) && defined(utf8_to_uvchr_buf)
    if ((flags & PERL_PV_ESCAPE_UNI_DETECT) && is_utf8_string((U8*)pv, count))
        isuni = 1;
#endif

    for (; pv < end && (!max || wrote < max) ; pv += readsize) {
        const UV u =
#if defined(is_utf8_string) && defined(utf8_to_uvchr_buf)
                     isuni ? utf8_to_uvchr_buf((U8*)pv, end, &readsize) :
#endif
                             (U8)*pv;
        const U8 c = (U8)u & 0xFF;

        if (u > 255 || (flags & PERL_PV_ESCAPE_ALL)) {
            if (flags & PERL_PV_ESCAPE_FIRSTCHAR)
                chsize = my_snprintf(octbuf, sizeof octbuf,
                                      "%" UVxf, u);
            else
                chsize = my_snprintf(octbuf, sizeof octbuf,
                                      "%cx{%" UVxf "}", esc, u);
        } else if (flags & PERL_PV_ESCAPE_NOBACKSLASH) {
            chsize = 1;
        } else {
            if (c == dq || c == esc || !isPRINT(c)) {
                chsize = 2;
                switch (c) {
                case '\\' : /* fallthrough */
                case '%'  : if (c == esc)
                                octbuf[1] = esc;
                            else
                                chsize = 1;
                            break;
                case '\v' : octbuf[1] = 'v'; break;
                case '\t' : octbuf[1] = 't'; break;
                case '\r' : octbuf[1] = 'r'; break;
                case '\n' : octbuf[1] = 'n'; break;
                case '\f' : octbuf[1] = 'f'; break;
                case '"'  : if (dq == '"')
                                octbuf[1] = '"';
                            else
                                chsize = 1;
                            break;
                default:    chsize = my_snprintf(octbuf, sizeof octbuf,
                                pv < end && isDIGIT((U8)*(pv+readsize))
                                ? "%c%03o" : "%c%o", esc, c);
                }
            } else {
                chsize = 1;
            }
        }
        if (max && wrote + chsize > max) {
            break;
        } else if (chsize > 1) {
            sv_catpvn(dsv, octbuf, chsize);
            wrote += chsize;
        } else {
            char tmp[2];
            my_snprintf(tmp, sizeof tmp, "%c", c);
            sv_catpvn(dsv, tmp, 1);
            wrote++;
        }
        if (flags & PERL_PV_ESCAPE_FIRSTCHAR)
            break;
    }
    if (escaped != NULL)
        *escaped= pv - str;
    return SvPVX(dsv);
}

#endif
#endif

#ifndef pv_pretty
#if defined(NEED_pv_pretty)
static char * DPPP_(my_pv_pretty)(pTHX_ SV * dsv, char const * const str, const STRLEN count, const STRLEN max, char const * const start_color, char const * const end_color, const U32 flags);
static
#else
extern char * DPPP_(my_pv_pretty)(pTHX_ SV * dsv, char const * const str, const STRLEN count, const STRLEN max, char const * const start_color, char const * const end_color, const U32 flags);
#endif

#if defined(NEED_pv_pretty) || defined(NEED_pv_pretty_GLOBAL)

#ifdef pv_pretty
#  undef pv_pretty
#endif
#define pv_pretty(a,b,c,d,e,f,g) DPPP_(my_pv_pretty)(aTHX_ a,b,c,d,e,f,g)
#define Perl_pv_pretty DPPP_(my_pv_pretty)


char *
DPPP_(my_pv_pretty)(pTHX_ SV *dsv, char const * const str, const STRLEN count,
  const STRLEN max, char const * const start_color, char const * const end_color,
  const U32 flags)
{
    const U8 dq = (flags & PERL_PV_PRETTY_QUOTE) ? '"' : '%';
    STRLEN escaped;

    if (!(flags & PERL_PV_PRETTY_NOCLEAR))
        sv_setpvs(dsv, "");

    if (dq == '"')
        sv_catpvs(dsv, "\"");
    else if (flags & PERL_PV_PRETTY_LTGT)
        sv_catpvs(dsv, "<");

    if (start_color != NULL)
        sv_catpv(dsv, D_PPP_CONSTPV_ARG(start_color));

    pv_escape(dsv, str, count, max, &escaped, flags | PERL_PV_ESCAPE_NOCLEAR);

    if (end_color != NULL)
        sv_catpv(dsv, D_PPP_CONSTPV_ARG(end_color));

    if (dq == '"')
        sv_catpvs(dsv, "\"");
    else if (flags & PERL_PV_PRETTY_LTGT)
        sv_catpvs(dsv, ">");

    if ((flags & PERL_PV_PRETTY_ELLIPSES) && escaped < count)
        sv_catpvs(dsv, "...");

    return SvPVX(dsv);
}

#endif
#endif

#ifndef pv_display
#if defined(NEED_pv_display)
static char * DPPP_(my_pv_display)(pTHX_ SV * dsv, const char * pv, STRLEN cur, STRLEN len, STRLEN pvlim);
static
#else
extern char * DPPP_(my_pv_display)(pTHX_ SV * dsv, const char * pv, STRLEN cur, STRLEN len, STRLEN pvlim);
#endif

#if defined(NEED_pv_display) || defined(NEED_pv_display_GLOBAL)

#ifdef pv_display
#  undef pv_display
#endif
#define pv_display(a,b,c,d,e) DPPP_(my_pv_display)(aTHX_ a,b,c,d,e)
#define Perl_pv_display DPPP_(my_pv_display)


char *
DPPP_(my_pv_display)(pTHX_ SV *dsv, const char *pv, STRLEN cur, STRLEN len, STRLEN pvlim)
{
    pv_pretty(dsv, pv, cur, pvlim, NULL, NULL, PERL_PV_PRETTY_DUMP);
    if (len > cur && pv[cur] == '\0')
        sv_catpvs(dsv, "\\0");
    return SvPVX(dsv);
}

#endif
#endif

#if PERL_VERSION_LT(5,27,9)
#ifndef LC_NUMERIC_LOCK
#  define LC_NUMERIC_LOCK
#endif

#ifndef LC_NUMERIC_UNLOCK
#  define LC_NUMERIC_UNLOCK
#endif

#  if PERL_VERSION_LT(5,19,0)
#    undef STORE_LC_NUMERIC_SET_STANDARD
#    undef RESTORE_LC_NUMERIC
#    undef DECLARATION_FOR_LC_NUMERIC_MANIPULATION
#    ifdef USE_LOCALE
#ifndef DECLARATION_FOR_LC_NUMERIC_MANIPULATION
#  define DECLARATION_FOR_LC_NUMERIC_MANIPULATION char *LoC_
#endif

#ifndef STORE_NUMERIC_SET_STANDARD
#  define STORE_NUMERIC_SET_STANDARD()   \
	 LoC_ = savepv(setlocale(LC_NUMERIC, NULL));  \
	 SAVEFREEPV(LoC_);                            \
	 setlocale(LC_NUMERIC, "C");
#endif

#ifndef RESTORE_LC_NUMERIC
#  define RESTORE_LC_NUMERIC()           \
	 setlocale(LC_NUMERIC, LoC_);
#endif

#    else
#ifndef DECLARATION_FOR_LC_NUMERIC_MANIPULATION
#  define DECLARATION_FOR_LC_NUMERIC_MANIPULATION
#endif

#ifndef STORE_LC_NUMERIC_SET_STANDARD
#  define STORE_LC_NUMERIC_SET_STANDARD()
#endif

#ifndef RESTORE_LC_NUMERIC
#  define RESTORE_LC_NUMERIC()
#endif

#    endif
#  endif
#endif

#ifndef LOCK_NUMERIC_STANDARD
#  define LOCK_NUMERIC_STANDARD()
#endif

#ifndef UNLOCK_NUMERIC_STANDARD
#  define UNLOCK_NUMERIC_STANDARD()
#endif

/* The names of these changed in 5.28 */
#ifndef LOCK_LC_NUMERIC_STANDARD
#  define LOCK_LC_NUMERIC_STANDARD       LOCK_NUMERIC_STANDARD
#endif

#ifndef UNLOCK_LC_NUMERIC_STANDARD
#  define UNLOCK_LC_NUMERIC_STANDARD     UNLOCK_NUMERIC_STANDARD
#endif

/* If this doesn't exist, it's not needed, so is void noop */
#ifndef switch_to_global_locale
#  define switch_to_global_locale()
#endif

/* Originally, this didn't return a value, but in perls like that, the value
 * should always be TRUE.  Add a return to Perl_sync_locale() when it's
 * available.  And actually do a sync when its not, if locales are available on
 * this system. */
#ifdef sync_locale
#  if (PERL_BCDVERSION < 0x5027009)
#    if (PERL_BCDVERSION >= 0x5021003)
#      undef sync_locale
#      define sync_locale() (Perl_sync_locale(aTHX), 1)
#    elif defined(sync_locale)  /* These should only be the 5.20 maints*/
#      undef sync_locale        /* Just copy their defn and return 1 */
#      define sync_locale() (new_ctype(setlocale(LC_CTYPE, NULL)),        \
                             new_collate(setlocale(LC_COLLATE, NULL)),    \
                             set_numeric_local(),                         \
                             new_numeric(setlocale(LC_NUMERIC, NULL)),    \
                             1)
#    elif defined(new_ctype) && defined(LC_CTYPE)
#      define sync_locale() (new_ctype(setlocale(LC_CTYPE, NULL)), 1)
#    endif
#  endif
#endif
#ifndef sync_locale
#  define sync_locale()                  1
#endif

#endif /* _P_P_PORTABILITY_H_ */

/* End of File dbipport.h */
                                                                                                                                                                                                                                                                                           root/.cpan/build/DBI-1.645-0/dbiprof                                                                0000755 0000000 0000000 00000014104 14723046265 015117  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/local/bin/perl

use strict;

my $VERSION = sprintf("1.%06d", q$Revision$ =~ /(\d+)/o);

use Data::Dumper;
use DBI::ProfileData;
use Getopt::Long;

# default options
my $number         = 10;
my $sort           = 'total';
my $filename       = 'dbi.prof';
my $reverse        = 0;
my $case_sensitive = 0;
my (%match, %exclude);

# get options from command line
GetOptions(
           'version'        => sub { die "dbiprof $VERSION\n" },
           'help'           => sub { exit usage() },
           'number=i'       => \$number,
           'sort=s'         => \$sort,
           'dumpnodes!'     => \my $dumpnodes,
           'reverse'        => \$reverse,
           'match=s'        => \%match,
           'exclude=s'      => \%exclude,
           'case-sensitive' => \$case_sensitive,
           'delete!'        => \my $opt_delete,
) or exit usage();

sub usage {
    print <<EOS;
dbiprof [options] [files]

Reads and merges DBI profile data from files and prints a summary.

files: defaults to $filename

options:

    -number=N        show top N, defaults to $number
    -sort=S          sort by S, defaults to $sort
    -reverse         reverse the sort
    -match=K=V       for filtering, see docs
    -exclude=K=V     for filtering, see docs
    -case_sensitive  for -match and -exclude
    -delete          rename files before reading then delete afterwards
    -version         print version number and exit
    -help            print this help

EOS
    return 1;
}

# list of files defaults to dbi.prof
my @files = @ARGV ? @ARGV : ('dbi.prof');


# instantiate ProfileData object
my $prof = eval {
    DBI::ProfileData->new(
        Files => \@files,
        DeleteFiles => $opt_delete,
    );
};
die "Unable to load profile data: $@\n" if $@;

if (%match) { # handle matches
    while (my ($key, $val) = each %match) {
        if ($val =~ m!^/(.+)/$!) {
            $val = $case_sensitive ? qr/$1/ : qr/$1/i;
        }
        $prof->match($key, $val, case_sensitive => $case_sensitive);
    }
}

if (%exclude) { # handle excludes
    while (my ($key, $val) = each %exclude) {
        if ($val =~ m!^/(.+)/$!) {
            $val = $case_sensitive ? qr/$1/ : qr/$1/i;
        }
        $prof->exclude($key, $val, case_sensitive => $case_sensitive);
    }
}

# sort the data
$prof->sort(field => $sort, reverse => $reverse);

# all done, print it out
if ($dumpnodes) {
    $Data::Dumper::Indent    = 1;
    $Data::Dumper::Terse     = 1;
    $Data::Dumper::Useqq     = 1;
    $Data::Dumper::Deparse   = 0;
    print Dumper($prof->nodes);
}
else {
    print $prof->report(number => $number);
}
exit 0;

__END__

=head1 NAME

dbiprof - command-line client for DBI::ProfileData

=head1 SYNOPSIS

See a report of the ten queries with the longest total runtime in the
profile dump file F<prof1.out>:

 dbiprof prof1.out

See the top 10 most frequently run queries in the profile file
F<dbi.prof> (the default):

  dbiprof --sort count

See the same report with 15 entries:

  dbiprof --sort count --number 15

=head1 DESCRIPTION

This tool is a command-line client for the DBI::ProfileData.  It
allows you to analyze the profile data file produced by
DBI::ProfileDumper and produce various useful reports.

=head1 OPTIONS

This program accepts the following options:

=over 4

=item --number N

Produce this many items in the report.  Defaults to 10.  If set to
"all" then all results are shown.

=item --sort field

Sort results by the given field. Sorting by multiple fields isn't currently
supported (patches welcome).  The available sort fields are:

=over 4

=item total

Sorts by total time run time across all runs.  This is the default
sort.

=item longest

Sorts by the longest single run.

=item count

Sorts by total number of runs.

=item first

Sorts by the time taken in the first run.

=item shortest

Sorts by the shortest single run.

=item key1

Sorts by the value of the first element in the Path, which should be numeric.
You can also sort by C<key2> and C<key3>.

=back

=item --reverse

Reverses the selected sort.  For example, to see a report of the
shortest overall time:

  dbiprof --sort total --reverse

=item --match keyN=value

Consider only items where the specified key matches the given value.
Keys are numbered from 1.  For example, let's say you used a
DBI::Profile Path of:

  [ DBIprofile_Statement, DBIprofile_Methodname ]

And called dbiprof as in:

  dbiprof --match key2=execute

Your report would only show execute queries, leaving out prepares,
fetches, etc.

If the value given starts and ends with slashes (C</>) then it will be
treated as a regular expression.  For example, to only include SELECT
queries where key1 is the statement:

  dbiprof --match key1=/^SELECT/

By default the match expression is matched case-insensitively, but
this can be changed with the --case-sensitive option.

=item --exclude keyN=value

Remove items for where the specified key matches the given value.  For
example, to exclude all prepare entries where key2 is the method name:

  dbiprof --exclude key2=prepare

Like C<--match>, If the value given starts and ends with slashes
(C</>) then it will be treated as a regular expression.  For example,
to exclude UPDATE queries where key1 is the statement:

  dbiprof --match key1=/^UPDATE/

By default the exclude expression is matched case-insensitively, but
this can be changed with the --case-sensitive option.

=item --case-sensitive

Using this option causes --match and --exclude to work
case-sensitively.  Defaults to off.

=item --delete

Sets the C<DeleteFiles> option to L<DBI::ProfileData> which causes the
files to be deleted after reading. See L<DBI::ProfileData> for more details.

=item --dumpnodes

Print the list of nodes in the form of a perl data structure.
Use the C<-sort> option if you want the list sorted.

=item --version

Print the dbiprof version number and exit.

=back

=head1 AUTHOR

Sam Tregar <sam@tregar.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2002 Sam Tregar

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl 5 itself.

=head1 SEE ALSO

L<DBI::ProfileDumper|DBI::ProfileDumper>,
L<DBI::Profile|DBI::Profile>, L<DBI|DBI>.

=cut

                                                                                                                                                                                                                                                                                                                                                                                                                                                            root/.cpan/build/DBI-1.645-0/dbiprof.PL                                                             0000644 0000313 0000144 00000015206 14656646601 015457  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl
# -*- perl -*-

my $file = $ARGV[0] || 'dbiprof';

my $script = <<'SCRIPT';
~startperl~

use strict;

my $VERSION = sprintf("1.%06d", q$Revision$ =~ /(\d+)/o);

use Data::Dumper;
use DBI::ProfileData;
use Getopt::Long;

# default options
my $number         = 10;
my $sort           = 'total';
my $filename       = 'dbi.prof';
my $reverse        = 0;
my $case_sensitive = 0;
my (%match, %exclude);

# get options from command line
GetOptions(
           'version'        => sub { die "dbiprof $VERSION\n" },
           'help'           => sub { exit usage() },
           'number=i'       => \$number,
           'sort=s'         => \$sort,
           'dumpnodes!'     => \my $dumpnodes,
           'reverse'        => \$reverse,
           'match=s'        => \%match,
           'exclude=s'      => \%exclude,
           'case-sensitive' => \$case_sensitive,
           'delete!'        => \my $opt_delete,
) or exit usage();

sub usage {
    print <<EOS;
dbiprof [options] [files]

Reads and merges DBI profile data from files and prints a summary.

files: defaults to $filename

options:

    -number=N        show top N, defaults to $number
    -sort=S          sort by S, defaults to $sort
    -reverse         reverse the sort
    -match=K=V       for filtering, see docs
    -exclude=K=V     for filtering, see docs
    -case_sensitive  for -match and -exclude
    -delete          rename files before reading then delete afterwards
    -version         print version number and exit
    -help            print this help

EOS
    return 1;
}

# list of files defaults to dbi.prof
my @files = @ARGV ? @ARGV : ('dbi.prof');


# instantiate ProfileData object
my $prof = eval {
    DBI::ProfileData->new(
        Files => \@files,
        DeleteFiles => $opt_delete,
    );
};
die "Unable to load profile data: $@\n" if $@;

if (%match) { # handle matches
    while (my ($key, $val) = each %match) {
        if ($val =~ m!^/(.+)/$!) {
            $val = $case_sensitive ? qr/$1/ : qr/$1/i;
        }
        $prof->match($key, $val, case_sensitive => $case_sensitive);
    }
}

if (%exclude) { # handle excludes
    while (my ($key, $val) = each %exclude) {
        if ($val =~ m!^/(.+)/$!) {
            $val = $case_sensitive ? qr/$1/ : qr/$1/i;
        }
        $prof->exclude($key, $val, case_sensitive => $case_sensitive);
    }
}

# sort the data
$prof->sort(field => $sort, reverse => $reverse);

# all done, print it out
if ($dumpnodes) {
    $Data::Dumper::Indent    = 1;
    $Data::Dumper::Terse     = 1;
    $Data::Dumper::Useqq     = 1;
    $Data::Dumper::Deparse   = 0;
    print Dumper($prof->nodes);
}
else {
    print $prof->report(number => $number);
}
exit 0;

__END__

=head1 NAME

dbiprof - command-line client for DBI::ProfileData

=head1 SYNOPSIS

See a report of the ten queries with the longest total runtime in the
profile dump file F<prof1.out>:

 dbiprof prof1.out

See the top 10 most frequently run queries in the profile file
F<dbi.prof> (the default):

  dbiprof --sort count

See the same report with 15 entries:

  dbiprof --sort count --number 15

=head1 DESCRIPTION

This tool is a command-line client for the DBI::ProfileData.  It
allows you to analyze the profile data file produced by
DBI::ProfileDumper and produce various useful reports.

=head1 OPTIONS

This program accepts the following options:

=over 4

=item --number N

Produce this many items in the report.  Defaults to 10.  If set to
"all" then all results are shown.

=item --sort field

Sort results by the given field. Sorting by multiple fields isn't currently
supported (patches welcome).  The available sort fields are:

=over 4

=item total

Sorts by total time run time across all runs.  This is the default
sort.

=item longest

Sorts by the longest single run.

=item count

Sorts by total number of runs.

=item first

Sorts by the time taken in the first run.

=item shortest

Sorts by the shortest single run.

=item key1

Sorts by the value of the first element in the Path, which should be numeric.
You can also sort by C<key2> and C<key3>.

=back

=item --reverse

Reverses the selected sort.  For example, to see a report of the
shortest overall time:

  dbiprof --sort total --reverse

=item --match keyN=value

Consider only items where the specified key matches the given value.
Keys are numbered from 1.  For example, let's say you used a
DBI::Profile Path of:

  [ DBIprofile_Statement, DBIprofile_Methodname ]

And called dbiprof as in:

  dbiprof --match key2=execute

Your report would only show execute queries, leaving out prepares,
fetches, etc.

If the value given starts and ends with slashes (C</>) then it will be
treated as a regular expression.  For example, to only include SELECT
queries where key1 is the statement:

  dbiprof --match key1=/^SELECT/

By default the match expression is matched case-insensitively, but
this can be changed with the --case-sensitive option.

=item --exclude keyN=value

Remove items for where the specified key matches the given value.  For
example, to exclude all prepare entries where key2 is the method name:

  dbiprof --exclude key2=prepare

Like C<--match>, If the value given starts and ends with slashes
(C</>) then it will be treated as a regular expression.  For example,
to exclude UPDATE queries where key1 is the statement:

  dbiprof --match key1=/^UPDATE/

By default the exclude expression is matched case-insensitively, but
this can be changed with the --case-sensitive option.

=item --case-sensitive

Using this option causes --match and --exclude to work
case-sensitively.  Defaults to off.

=item --delete

Sets the C<DeleteFiles> option to L<DBI::ProfileData> which causes the
files to be deleted after reading. See L<DBI::ProfileData> for more details.

=item --dumpnodes

Print the list of nodes in the form of a perl data structure.
Use the C<-sort> option if you want the list sorted.

=item --version

Print the dbiprof version number and exit.

=back

=head1 AUTHOR

Sam Tregar <sam@tregar.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2002 Sam Tregar

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl 5 itself.

=head1 SEE ALSO

L<DBI::ProfileDumper|DBI::ProfileDumper>,
L<DBI::Profile|DBI::Profile>, L<DBI|DBI>.

=cut

SCRIPT


require Config;
my $config = {};
$config->{'startperl'} = $Config::Config{'startperl'};

$script =~ s/\~(\w+)\~/$config->{$1}/eg;
if (!(open(FILE, ">$file"))  ||
    !(print FILE $script)  ||
    !(close(FILE))) {
    die "Error while writing $file: $!\n";
}
chmod 0755, $file;
print "Extracted $file from ",__FILE__," with variable substitutions.\n";

# syntax check resulting file, but only for developers
exit 1 if -d ".svn"|| -d ".git" and system($^X, '-wc', '-Mblib', $file) != 0;

                                                                                                                                                                                                                                                                                                                                                                                          root/.cpan/build/DBI-1.645-0/dbiproxy                                                               0000755 0000000 0000000 00000012430 14723046265 015332  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/local/bin/perl

use strict;

my $VERSION = sprintf("1.%06d", q$Revision$ =~ /(\d+)/o);

my $arg_test    = shift(@ARGV)		if $ARGV[0] eq '--test';
$ENV{DBI_TRACE} = shift(@ARGV) || 2	if $ARGV[0] =~ s/^--dbitrace=?//;

require DBI::ProxyServer;

# XXX these should probably be moved into DBI::ProxyServer
delete $ENV{IFS};
delete $ENV{CDPATH};
delete $ENV{ENV};
delete $ENV{BASH_ENV};

if ($arg_test) {
    require RPC::PlServer::Test;
    @DBI::ProxyServer::ISA = qw(RPC::PlServer::Test DBI);
}

DBI::ProxyServer::main(@ARGV);

exit(0);


__END__

=head1 NAME

dbiproxy - A proxy server for the DBD::Proxy driver

=head1 SYNOPSIS

    dbiproxy <options> --localport=<port>


=head1 DESCRIPTION

This tool is just a front end for the DBI::ProxyServer package. All it
does is picking options from the command line and calling
DBI::ProxyServer::main(). See L<DBI::ProxyServer> for details.

Available options include:

=over 4

=item B<--chroot=dir>

(UNIX only)  After doing a bind(), change root directory to the given
directory by doing a chroot(). This is useful for security, but it
restricts the environment a lot. For example, you need to load DBI
drivers in the config file or you have to create hard links to Unix
sockets, if your drivers are using them. For example, with MySQL, a
config file might contain the following lines:

    my $rootdir = '/var/dbiproxy';
    my $unixsockdir = '/tmp';
    my $unixsockfile = 'mysql.sock';
    foreach $dir ($rootdir, "$rootdir$unixsockdir") {
	mkdir 0755, $dir;
    }
    link("$unixsockdir/$unixsockfile",
	 "$rootdir$unixsockdir/$unixsockfile");
    require DBD::mysql;

    {
	'chroot' => $rootdir,
	...
    }

