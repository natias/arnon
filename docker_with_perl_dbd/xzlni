If you have installed a signal handler for C<SIGCHLD>, the
value of C<$?> will usually be wrong outside that handler.

Inside an C<END> subroutine C<$?> contains the value that is going to be
given to C<exit()>.  You can modify C<$?> in an C<END> subroutine to
change the exit status of your program.  For example:

    END {
        $? = 1 if $? == 255;  # die would make it 255
    }

Under VMS, the pragma C<use vmsish 'status'> makes C<$?> reflect the
actual VMS exit status, instead of the default emulation of POSIX
status; see L<perlvms/$?> for details.

Mnemonic: similar to B<sh> and B<ksh>.

=item $EVAL_ERROR

=item $@
X<$@> X<$EVAL_ERROR>

The Perl error from the last C<eval> operator, i.e. the last exception that
was caught.  For C<eval BLOCK>, this is either a runtime error message or the
string or reference C<die> was called with.  The C<eval STRING> form also
catches syntax errors and other compile time exceptions.

If no error occurs, C<eval> sets C<$@> to the empty string.

Warning messages are not collected in this variable.  You can, however,
set up a routine to process warnings by setting C<$SIG{__WARN__}> as
described in L</%SIG>.

Mnemonic: Where was the error "at"?

=back

=head2 Variables related to the interpreter state

These variables provide information about the current interpreter state.

=over 8

=item $COMPILING

=item $^C
X<$^C> X<$COMPILING>

The current value of the flag associated with the B<-c> switch.
Mainly of use with B<-MO=...> to allow code to alter its behavior
when being compiled, such as for example to C<AUTOLOAD> at compile
time rather than normal, deferred loading.  Setting
C<$^C = 1> is similar to calling C<B::minus_c>.

This variable was added in Perl v5.6.0.

=item $DEBUGGING

=item $^D
X<$^D> X<$DEBUGGING>

The current value of the debugging flags.  May be read or set.  Like its
L<command-line equivalent|perlrun/B<-D>I<letters>>, you can use numeric
or symbolic values, e.g. C<$^D = 10> or C<$^D = "st">.  See
L<perlrun/B<-D>I<number>>.  The contents of this variable also affects the
debugger operation.  See L<perldebguts/Debugger Internals>.

Mnemonic: value of B<-D> switch.

=item ${^GLOBAL_PHASE}
X<${^GLOBAL_PHASE}>

The current phase of the perl interpreter.

Possible values are:

=over 8

=item CONSTRUCT

The C<PerlInterpreter*> is being constructed via C<perl_construct>.  This
value is mostly there for completeness and for use via the
underlying C variable C<PL_phase>.  It's not really possible for Perl
code to be executed unless construction of the interpreter is
finished.

=item START

This is the global compile-time.  That includes, basically, every
C<BEGIN> block executed directly or indirectly from during the
compile-time of the top-level program.

This phase is not called "BEGIN" to avoid confusion with
C<BEGIN>-blocks, as those are executed during compile-time of any
compilation unit, not just the top-level program.  A new, localised
compile-time entered at run-time, for example by constructs as
C<eval "use SomeModule"> are not global interpreter phases, and
therefore aren't reflected by C<${^GLOBAL_PHASE}>.

=item CHECK

Execution of any C<CHECK> blocks.

=item INIT

Similar to "CHECK", but for C<INIT>-blocks, not C<CHECK> blocks.

=item RUN

The main run-time, i.e. the execution of C<PL_main_root>.

=item END

Execution of any C<END> blocks.

=item DESTRUCT

Global destruction.

=back

Also note that there's no value for UNITCHECK-blocks.  That's because
those are run for each compilation unit individually, and therefore is
not a global interpreter phase.

Not every program has to go through each of the possible phases, but
transition from one phase to another can only happen in the order
described in the above list.

An example of all of the phases Perl code can see:

    BEGIN { print "compile-time: ${^GLOBAL_PHASE}\n" }

    INIT  { print "init-time: ${^GLOBAL_PHASE}\n" }

    CHECK { print "check-time: ${^GLOBAL_PHASE}\n" }

    {
        package Print::Phase;

        sub new {
            my ($class, $time) = @_;
            return bless \$time, $class;
        }

        sub DESTROY {
            my $self = shift;
            print "$$self: ${^GLOBAL_PHASE}\n";
        }
    }

    print "run-time: ${^GLOBAL_PHASE}\n";

    my $runtime = Print::Phase->new(
        "lexical variables are garbage collected before END"
    );

    END   { print "end-time: ${^GLOBAL_PHASE}\n" }

    our $destruct = Print::Phase->new(
        "package variables are garbage collected after END"
    );

This will print out

    compile-time: START
    check-time: CHECK
    init-time: INIT
    run-time: RUN
    lexical variables are garbage collected before END: RUN
    end-time: END
    package variables are garbage collected after END: DESTRUCT

This variable was added in Perl 5.14.0.

=item $^H
X<$^H>

WARNING: This variable is strictly for
internal use only.  Its availability,
behavior, and contents are subject to change without notice.

This variable contains compile-time hints for the Perl interpreter.  At the
end of compilation of a BLOCK the value of this variable is restored to the
value when the interpreter started to compile the BLOCK.

Each time a statement completes being compiled, the current value of
C<$^H> is stored with that statement, and can later be retrieved via
C<(caller($level))[8]>.  See L<perlfunc/caller EXPR>.

When perl begins to parse any block construct that provides a lexical scope
(e.g., eval body, required file, subroutine body, loop body, or conditional
block), the existing value of C<$^H> is saved, but its value is left unchanged.
When the compilation of the block is completed, it regains the saved value.
Between the points where its value is saved and restored, code that
executes within BEGIN blocks is free to change the value of C<$^H>.

This behavior provides the semantic of lexical scoping, and is used in,
for instance, the C<use strict> pragma.

The contents should be an integer; different bits of it are used for
different pragmatic flags.  Here's an example:

    sub add_100 { $^H |= 0x100 }

    sub foo {
        BEGIN { add_100() }
        bar->baz($boon);
    }

Consider what happens during execution of the BEGIN block.  At this point
the BEGIN block has already been compiled, but the body of C<foo()> is still
being compiled.  The new value of C<$^H>
will therefore be visible only while
the body of C<foo()> is being compiled.

Substitution of C<BEGIN { add_100() }> block with:

    BEGIN { require strict; strict->import('vars') }

demonstrates how C<use strict 'vars'> is implemented.  Here's a conditional
version of the same lexical pragma:

    BEGIN {
        require strict; strict->import('vars') if $condition
    }

This variable was added in Perl 5.003.

=item %^H
X<%^H>

The C<%^H> hash provides the same scoping semantics as L<C<$^H>|/$^H>.  This
makes it useful for implementing lexically scoped pragmas.  See L<perlpragma>.
All the entries are stringified when accessed at runtime, so only simple values
can be accommodated.  This means no references to objects, for example.

Each time a statement completes being compiled, the current value of
C<%^H> is stored with that statement, and can later be retrieved via
C<(caller($level))[10]>.  See L<perlfunc/caller EXPR>.

When putting items into C<%^H>, in order to avoid conflicting with other
users of the hash there is a convention regarding which keys to use.
A module should use only keys that begin with the module's name (the
name of its main package) and a "/" character.  For example, a module
C<Foo::Bar> should use keys such as C<Foo::Bar/baz>.

This variable was added in Perl v5.6.0.

=item ${^OPEN}
X<${^OPEN}>

An internal variable used by L<PerlIO>.  A string in two parts, separated
by a C<\0> byte, the first part describes the input layers, the second
part describes the output layers.

This is the mechanism that applies the lexical effects of the L<open>
pragma, and the main program scope effects of the C<io> or C<D> options
for the L<-C command-line switch|perlrun/-C [I<numberE<sol>list>]> and
L<PERL_UNICODE environment variable|perlrun/PERL_UNICODE>.

The functions C<accept()>, C<open()>, C<pipe()>, C<readpipe()> (as well
as the related C<qx> and C<`STRING`> operators), C<socket()>,
C<socketpair()>, and C<sysopen()> are affected by the lexical value of
this variable.  The implicit L</ARGV> handle opened by C<readline()> (or
the related C<< <> >> and C<<< <<>> >>> operators) on passed filenames is
also affected (but not if it opens C<STDIN>).  If this variable is not
set, these functions will set the default layers as described in
L<PerlIO/Defaults and how to override them>.

C<open()> ignores this variable (and the default layers) when called with
3 arguments and explicit layers are specified.  Indirect calls to these
functions via modules like L<IO::Handle> are not affected as they occur
in a different lexical scope.  Directory handles such as opened by
C<opendir()> are not currently affected.

This variable was added in Perl v5.8.0.

=item $PERLDB

=item $^P
X<$^P> X<$PERLDB>

The internal variable for debugging support.  The meanings of the
various bits are subject to change, but currently indicate:

=over 6

=item 0x01

Debug subroutine enter/exit.

=item 0x02

Line-by-line debugging.  Causes C<DB::DB()> subroutine to be called for
each statement executed.  Also causes saving source code lines (like
0x400).

=item 0x04

Switch off optimizations.

=item 0x08

Preserve more data for future interactive inspections.

=item 0x10

Keep info about source lines on which a subroutine is defined.

=item 0x20

Start with single-step on.

=item 0x40

Use subroutine address instead of name when reporting.

=item 0x80

Report C<goto &subroutine> as well.

=item 0x100

Provide informative "file" names for evals based on the place they were compiled.

=item 0x200

Provide informative names to anonymous subroutines based on the place they
were compiled.

=item 0x400

Save source code lines into C<@{"_<$filename"}>.

=item 0x800

When saving source, include evals that generate no subroutines.

=item 0x1000

When saving source, include source that did not compile.

=back

Some bits may be relevant at compile-time only, some at
run-time only.  This is a new mechanism and the details may change.
See also L<perldebguts>.

=item ${^TAINT}
X<${^TAINT}>

Reflects if taint mode is on or off.  1 for on (the program was run with
B<-T>), 0 for off, -1 when only taint warnings are enabled (i.e. with
B<-t> or B<-TU>).

Note: if your perl was built without taint support (see L<perlsec>),
then C<${^TAINT}> will always be 0, even if the program was run with B<-T>).

This variable is read-only.

This variable was added in Perl v5.8.0.

=item ${^SAFE_LOCALES}
X<${^SAFE_LOCALES}>

Reflects if safe locale operations are available to this perl (when the
value is 1) or not (the value is 0).  This variable is always 1 if the
perl has been compiled without threads.  It is also 1 if this perl is
using thread-safe locale operations.  Note that an individual thread may
choose to use the global locale (generally unsafe) by calling
L<perlapi/switch_to_global_locale>.  This variable currently is still
set to 1 in such threads.

This variable is read-only.

This variable was added in Perl v5.28.0.

=item ${^UNICODE}
X<${^UNICODE}>

Reflects certain Unicode settings of Perl.  See
L<perlrun|perlrun/-C [numberE<sol>list]> documentation for the C<-C>
switch for more information about the possible values.

This variable is set during Perl startup and is thereafter read-only.

This variable was added in Perl v5.8.2.

=item ${^UTF8CACHE}
X<${^UTF8CACHE}>

This variable controls the state of the internal UTF-8 offset caching code.
1 for on (the default), 0 for off, -1 to debug the caching code by checking
all its results against linear scans, and panicking on any discrepancy.

This variable was added in Perl v5.8.9.  It is subject to change or
removal without notice, but is currently used to avoid recalculating the
boundaries of multi-byte UTF-8-encoded characters.

=item ${^UTF8LOCALE}
X<${^UTF8LOCALE}>

This variable indicates whether a UTF-8 locale was detected by perl at
startup.  This information is used by perl when it's in
adjust-utf8ness-to-locale mode (as when run with the C<-CL> command-line
switch); see L<perlrun|perlrun/-C [numberE<sol>list]> for more info on
this.

This variable was added in Perl v5.8.8.

=back

=head2 Deprecated and removed variables

Deprecating a variable announces the intent of the perl maintainers to
eventually remove the variable from the language.  It may still be
available despite its status.  Using a deprecated variable triggers
a warning.

Once a variable is removed, its use triggers an error telling you
the variable is unsupported.

See L<perldiag> for details about error messages.

=over 8

=item $#
X<$#>

C<$#> was a variable that could be used to format printed numbers.
After a deprecation cycle, its magic was removed in Perl v5.10.0 and
using it now triggers a warning: C<$# is no longer supported>.

This is not the sigil you use in front of an array name to get the
last index, like C<$#array>.  That's still how you get the last index
of an array in Perl.  The two have nothing to do with each other.

Deprecated in Perl 5.

Removed in Perl v5.10.0.

=item $*
X<$*>

C<$*> was a variable that you could use to enable multiline matching.
After a deprecation cycle, its magic was removed in Perl v5.10.0.
Using it now triggers a warning: C<$* is no longer supported>.
You should use the C</s> and C</m> regexp modifiers instead.

Deprecated in Perl 5.

Removed in Perl v5.10.0.

=item $[
X<$[>

This variable stores the index of the first element in an array, and
of the first character in a substring.  The default is 0, but you could
theoretically set it to 1 to make Perl behave more like B<awk> (or Fortran)
when subscripting and when evaluating the index() and substr() functions.

As of release 5 of Perl, assignment to C<$[> is treated as a compiler
directive, and cannot influence the behavior of any other file.
(That's why you can only assign compile-time constants to it.)
Its use is highly discouraged.

Prior to Perl v5.10.0, assignment to C<$[> could be seen from outer lexical
scopes in the same file, unlike other compile-time directives (such as
L<strict>).  Using local() on it would bind its value strictly to a lexical
block.  Now it is always lexically scoped.

As of Perl v5.16.0, it is implemented by the L<arybase> module.

As of Perl v5.30.0, or under C<use v5.16>, or C<no feature "array_base">,
C<$[> no longer has any effect, and always contains 0.
Assigning 0 to it is permitted, but any other value will produce an error.

Mnemonic: [ begins subscripts.

Deprecated in Perl v5.12.0.

=item ${^ENCODING}
X<${^ENCODING}>

This variable is no longer supported.

It used to hold the I<object reference> to the C<Encode> object that was
used to convert the source code to Unicode.

Its purpose was to allow your non-ASCII Perl
scripts not to have to be written in UTF-8; this was
useful before editors that worked on UTF-8 encoded text were common, but
that was long ago.  It caused problems, such as affecting the operation
of other modules that weren't expecting it, causing general mayhem.

If you need something like this functionality, it is recommended that use
you a simple source filter, such as L<Filter::Encoding>.

If you are coming here because code of yours is being adversely affected
by someone's use of this variable, you can usually work around it by
doing this:

 local ${^ENCODING};

near the beginning of the functions that are getting broken.  This
undefines the variable during the scope of execution of the including
function.

This variable was added in Perl 5.8.2 and removed in 5.26.0.
Setting it to anything other than C<undef> was made fatal in Perl 5.28.0.

=item ${^WIN32_SLOPPY_STAT}
X<${^WIN32_SLOPPY_STAT}> X<sitecustomize> X<sitecustomize.pl>

This variable no longer has any function.

This variable was added in Perl v5.10.0 and removed in Perl v5.34.0.

=back

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/local/lib/perl5/5.40.0/pod/perlvms.pod                                                          0000644 0000000 0000000 00000143215 14714567415 016472  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

perlvms - VMS-specific documentation for Perl

=head1 DESCRIPTION

Gathered below are notes describing details of Perl 5's 
behavior on VMS.  They are a supplement to the regular Perl 5 
documentation, so we have focussed on the ways in which Perl 
5 functions differently under VMS than it does under Unix, 
and on the interactions between Perl and the rest of the 
operating system.  We haven't tried to duplicate complete 
descriptions of Perl features from the main Perl 
documentation, which can be found in the F<[.pod]> 
subdirectory of the Perl distribution.

We hope these notes will save you from confusion and lost 
sleep when writing Perl scripts on VMS.  If you find we've 
missed something you think should appear here, please don't 
hesitate to drop a line to vmsperl@perl.org.

=head1 Installation

Directions for building and installing Perl 5 can be found in 
the file F<README.vms> in the main source directory of the 
Perl distribution.

=head1 Organization of Perl Images

=head2 Core Images

During the build process, three Perl images are produced.
F<Miniperl.Exe> is an executable image which contains all of
the basic functionality of Perl, but cannot take advantage of
Perl XS extensions and has a hard-wired list of library locations
for loading pure-Perl modules.  It is used extensively to build and
test Perl and various extensions, but is not installed.

Most of the complete Perl resides in the shareable image F<PerlShr.Exe>,
which provides a core to which the Perl executable image and all Perl
extensions are linked. It is generally located via the logical name
F<PERLSHR>.  While it's possible to put the image in F<SYS$SHARE> to
make it loadable, that's not recommended. And while you may wish to
INSTALL the image for performance reasons, you should not install it
with privileges; if you do, the result will not be what you expect as
image privileges are disabled during Perl start-up.

Finally, F<Perl.Exe> is an executable image containing the main
entry point for Perl, as well as some initialization code.  It
should be placed in a public directory, and made world executable.
In order to run Perl with command line arguments, you should
define a foreign command to invoke this image.

=head2 Perl Extensions

Perl extensions are packages which provide both XS and Perl code
to add new functionality to perl.  (XS is a meta-language which
simplifies writing C code which interacts with Perl, see
L<perlxs> for more details.)  The Perl code for an
extension is treated like any other library module - it's
made available in your script through the appropriate
C<use> or C<require> statement, and usually defines a Perl
package containing the extension.

The portion of the extension provided by the XS code may be
connected to the rest of Perl in either of two ways.  In the
B<static> configuration, the object code for the extension is
linked directly into F<PerlShr.Exe>, and is initialized whenever
Perl is invoked.  In the B<dynamic> configuration, the extension's
machine code is placed into a separate shareable image, which is
mapped by Perl's DynaLoader when the extension is C<use>d or
C<require>d in your script.  This allows you to maintain the
extension as a separate entity, at the cost of keeping track of the
additional shareable image.  Most extensions can be set up as either
static or dynamic.

The source code for an extension usually resides in its own
directory.  At least three files are generally provided:
I<Extshortname>F<.xs> (where I<Extshortname> is the portion of
the extension's name following the last C<::>), containing
the XS code, I<Extshortname>F<.pm>, the Perl library module
for the extension, and F<Makefile.PL>, a Perl script which uses
the C<MakeMaker> library modules supplied with Perl to generate
a F<Descrip.MMS> file for the extension.

=head2 Installing static extensions

Since static extensions are incorporated directly into
F<PerlShr.Exe>, you'll have to rebuild Perl to incorporate a
new extension.  You should edit the main F<Descrip.MMS> or F<Makefile>
you use to build Perl, adding the extension's name to the C<ext>
macro, and the extension's object file to the C<extobj> macro.
You'll also need to build the extension's object file, either
by adding dependencies to the main F<Descrip.MMS>, or using a
separate F<Descrip.MMS> for the extension.  Then, rebuild
F<PerlShr.Exe> to incorporate the new code.

Finally, you'll need to copy the extension's Perl library
module to the F<[.>I<Extname>F<]> subdirectory under one
of the directories in C<@INC>, where I<Extname> is the name
of the extension, with all C<::> replaced by C<.> (e.g.
the library module for extension Foo::Bar would be copied
to a F<[.Foo.Bar]> subdirectory).

=head2 Installing dynamic extensions

In general, the distributed kit for a Perl extension includes
a file named Makefile.PL, which is a Perl program which is used
to create a F<Descrip.MMS> file which can be used to build and
install the files required by the extension.  The kit should be
unpacked into a directory tree B<not> under the main Perl source
directory, and the procedure for building the extension is simply

    $ perl Makefile.PL  ! Create Descrip.MMS
    $ mmk               ! Build necessary files
    $ mmk test          ! Run test code, if supplied
    $ mmk install       ! Install into public Perl tree

VMS support for this process in the current release of Perl
is sufficient to handle most extensions.  (See the MakeMaker
documentation for more details on installation options for
extensions.)

=over 4

=item *

the F<[.Lib.Auto.>I<Arch>I<$PVers>I<Extname>F<]> subdirectory
of one of the directories in C<@INC> (where I<PVers>
is the version of Perl you're using, as supplied in C<$]>,
with '.' converted to '_'), or

=item *

one of the directories in C<@INC>, or

=item *

a directory which the extensions Perl library module
passes to the DynaLoader when asking it to map
the shareable image, or

=item *

F<Sys$Share> or F<Sys$Library>.

=back

If the shareable image isn't in any of these places, you'll need
to define a logical name I<Extshortname>, where I<Extshortname>
is the portion of the extension's name after the last C<::>, which
translates to the full file specification of the shareable image.

=head1 File specifications

=head2 Syntax

We have tried to make Perl aware of both VMS-style and Unix-style file
specifications wherever possible.  You may use either style, or both,
on the command line and in scripts, but you may not combine the two
styles within a single file specification.  VMS Perl interprets Unix
pathnames in much the same way as the CRTL (I<e.g.> the first component
of an absolute path is read as the device name for the VMS file
specification).  There are a set of functions provided in the
C<VMS::Filespec> package for explicit interconversion between VMS and
Unix syntax; its documentation provides more details.

We've tried to minimize the dependence of Perl library
modules on Unix syntax, but you may find that some of these,
as well as some scripts written for Unix systems, will
require that you use Unix syntax, since they will assume that
'/' is the directory separator, I<etc.>  If you find instances
of this in the Perl distribution itself, please let us know,
so we can try to work around them.

Also when working on Perl programs on VMS, if you need a syntax
in a specific operating system format, then you need either to
check the appropriate DECC$ feature logical, or call a conversion
routine to force it to that format.

The feature logical name DECC$FILENAME_UNIX_REPORT modifies traditional
Perl behavior in the conversion of file specifications from Unix to VMS
format in order to follow the extended character handling rules now
expected by the CRTL.  Specifically, when this feature is in effect, the
C<./.../> in a Unix path is now translated to C<[.^.^.^.]> instead of
the traditional VMS C<[...]>.  To be compatible with what MakeMaker
expects, if a VMS path cannot be translated to a Unix path, it is
passed through unchanged, so C<unixify("[...]")> will return C<[...]>.

There are several ambiguous cases where a conversion routine cannot
determine whether an input filename is in Unix format or in VMS format,
since now both VMS and Unix file specifications may have characters in
them that could be mistaken for syntax delimiters of the other type. So
some pathnames simply cannot be used in a mode that allows either type
of pathname to be present.  Perl will tend to assume that an ambiguous
filename is in Unix format.

Allowing "." as a version delimiter is simply incompatible with
determining whether a pathname is in VMS format or in Unix format with
extended file syntax.  There is no way to know whether "perl-5.8.6" is a
Unix "perl-5.8.6" or a VMS "perl-5.8;6" when passing it to unixify() or
vmsify().

The DECC$FILENAME_UNIX_REPORT logical name controls how Perl interprets
filenames to the extent that Perl uses the CRTL internally for many
purposes, and attempts to follow CRTL conventions for reporting
filenames.  The DECC$FILENAME_UNIX_ONLY feature differs in that it
expects all filenames passed to the C run-time to be already in Unix
format.  This feature is not yet supported in Perl since Perl uses
traditional OpenVMS file specifications internally and in the test
harness, and it is not yet clear whether this mode will be useful or
useable.  The feature logical name DECC$POSIX_COMPLIANT_PATHNAMES is new
with the RMS Symbolic Link SDK and included with OpenVMS v8.3, but is
not yet supported in Perl.

=head2 Filename Case

Perl enables DECC$EFS_CASE_PRESERVE and DECC$ARGV_PARSE_STYLE by
default.  Note that the latter only takes effect when extended parse
is set in the process in which Perl is running.  When these features
are explicitly disabled in the environment or the CRTL does not support
them, Perl follows the traditional CRTL behavior of downcasing command-line
arguments and returning file specifications in lower case only.

I<N. B.>  It is very easy to get tripped up using a mixture of other
programs, external utilities, and Perl scripts that are in varying
states of being able to handle case preservation.  For example, a file
created by an older version of an archive utility or a build utility
such as MMK or MMS may generate a filename in all upper case even on an
ODS-5 volume.  If this filename is later retrieved by a Perl script or
module in a case preserving environment, that upper case name may not
match the mixed-case or lower-case expectations of the Perl code.  Your
best bet is to follow an all-or-nothing approach to case preservation:
either don't use it at all, or make sure your entire toolchain and
application environment support and use it.

OpenVMS Alpha v7.3-1 and later and all version of OpenVMS I64 support
case sensitivity as a process setting (see S<C<SET PROCESS
/CASE_LOOKUP=SENSITIVE>>). Perl does not currently support case
sensitivity on VMS, but it may in the future, so Perl programs should
use the C<< File::Spec->case_tolerant >> method to determine the state, and
not the C<$^O> variable.

=head2 Symbolic Links

When built on an ODS-5 volume with symbolic links enabled, Perl by
default supports symbolic links when the requisite support is available
in the filesystem and CRTL (generally 64-bit OpenVMS v8.3 and later). 
There are a number of limitations and caveats to be aware of when
working with symbolic links on VMS.  Most notably, the target of a valid
symbolic link must be expressed as a Unix-style path and it must exist
on a volume visible from your POSIX root (see the S<C<SHOW ROOT>> command
in DCL help).  For further details on symbolic link capabilities and
requirements, see chapter 12 of the CRTL manual that ships with OpenVMS
v8.3 or later.

=head2 Wildcard expansion

File specifications containing wildcards are allowed both on 
the command line and within Perl globs (e.g. C<E<lt>*.cE<gt>>).  If
the wildcard filespec uses VMS syntax, the resultant 
filespecs will follow VMS syntax; if a Unix-style filespec is 
passed in, Unix-style filespecs will be returned.
Similar to the behavior of wildcard globbing for a Unix shell,
one can escape command line wildcards with double quotation
marks C<"> around a perl program command line argument.  However,
owing to the stripping of C<"> characters carried out by the C
handling of argv you will need to escape a construct such as
this one (in a directory containing the files F<PERL.C>, F<PERL.EXE>,
F<PERL.H>, and F<PERL.OBJ>):

    $ perl -e "print join(' ',@ARGV)" perl.*
    perl.c perl.exe perl.h perl.obj

in the following triple quoted manner:

    $ perl -e "print join(' ',@ARGV)" """perl.*"""
    perl.*

In both the case of unquoted command line arguments or in calls
to C<glob()> VMS wildcard expansion is performed. (csh-style
wildcard expansion is available if you use C<File::Glob::glob>.)
If the wildcard filespec contains a device or directory 
specification, then the resultant filespecs will also contain 
a device and directory; otherwise, device and directory 
information are removed.  VMS-style resultant filespecs will 
contain a full device and directory, while Unix-style 
resultant filespecs will contain only as much of a directory 
path as was present in the input filespec.  For example, if 
your default directory is Perl_Root:[000000], the expansion 
of C<[.t]*.*> will yield filespecs  like 
"perl_root:[t]base.dir", while the expansion of C<t/*/*> will 
yield filespecs like "t/base.dir".  (This is done to match 
the behavior of glob expansion performed by Unix shells.) 

Similarly, the resultant filespec will contain the file version
only if one was present in the input filespec.


=head2 Pipes

Input and output pipes to Perl filehandles are supported; the 
"file name" is passed to lib$spawn() for asynchronous 
execution.  You should be careful to close any pipes you have 
opened in a Perl script, lest you leave any "orphaned" 
subprocesses around when Perl exits. 

You may also use backticks to invoke a DCL subprocess, whose 
output is used as the return value of the expression.  The 
string between the backticks is handled as if it were the
argument to the C<system> operator (see below).  In this case,
Perl will wait for the subprocess to complete before continuing. 

The mailbox (MBX) that perl can create to communicate with a pipe
defaults to a buffer size of 8192 on 64-bit systems, 512 on VAX.  The
default buffer size is adjustable via the logical name PERL_MBX_SIZE
provided that the value falls between 128 and the SYSGEN parameter
MAXBUF inclusive.  For example, to set the mailbox size to 32767 use
C<$ENV{'PERL_MBX_SIZE'} = 32767;> and then open and use pipe constructs. 
An alternative would be to issue the command:

    $ Define PERL_MBX_SIZE 32767

before running your wide record pipe program.  A larger value may
improve performance at the expense of the BYTLM UAF quota.

=head1 PERL5LIB and PERLLIB

The PERL5LIB and PERLLIB environment elements work as documented in L<perl>,
except that the element separator is, by default, '|' instead of ':'.
However, when running under a Unix shell as determined by the logical
name C<GNV$UNIX_SHELL>, the separator will be ':' as on Unix systems. The
directory specifications may use either VMS or Unix syntax.

=head1 The Perl Forked Debugger

The Perl forked debugger places the debugger commands and output in a
separate X-11 terminal window so that commands and output from multiple
processes are not mixed together.

Perl on VMS supports an emulation of the forked debugger when Perl is
run on a VMS system that has X11 support installed.

To use the forked debugger, you need to have the default display set to an
X-11 Server and some environment variables set that Unix expects.

The forked debugger requires the environment variable C<TERM> to be C<xterm>,
and the environment variable C<DISPLAY> to exist.  C<xterm> must be in
lower case.

  $define TERM "xterm"

  $define DISPLAY "hostname:0.0"

Currently the value of C<DISPLAY> is ignored.  It is recommended that it be set
to be the hostname of the display, the server and screen in Unix notation.  In
the future the value of DISPLAY may be honored by Perl instead of using the
default display.

It may be helpful to always use the forked debugger so that script I/O is
separated from debugger I/O.  You can force the debugger to be forked by
assigning a value to the logical name <PERLDB_PIDS> that is not a process
identification number.

  $define PERLDB_PIDS XXXX


=head1 PERL_VMS_EXCEPTION_DEBUG

The PERL_VMS_EXCEPTION_DEBUG being defined as "ENABLE" will cause the VMS
debugger to be invoked if a fatal exception that is not otherwise
handled is raised.  The purpose of this is to allow debugging of
internal Perl problems that would cause such a condition.

This allows the programmer to look at the execution stack and variables to
find out the cause of the exception.  As the debugger is being invoked as
the Perl interpreter is about to do a fatal exit, continuing the execution
in debug mode is usually not practical.

Starting Perl in the VMS debugger may change the program execution
profile in a way that such problems are not reproduced.

The C<kill> function can be used to test this functionality from within
a program.

In typical VMS style, only the first letter of the value of this logical
name is actually checked in a case insensitive mode, and it is considered
enabled if it is the value "T","1" or "E".

This logical name must be defined before Perl is started.

=head1 Command line

=head2 I/O redirection and backgrounding

Perl for VMS supports redirection of input and output on the 
command line, using a subset of Bourne shell syntax:

=over 4

=item *

C<E<lt>file> reads stdin from C<file>,

=item *

C<E<gt>file> writes stdout to C<file>,

=item *

C<E<gt>E<gt>file> appends stdout to C<file>,

=item *

C<2E<gt>file> writes stderr to C<file>,

=item *

C<2E<gt>E<gt>file> appends stderr to C<file>, and

=item *

C<< 2>&1 >> redirects stderr to stdout.

=back

In addition, output may be piped to a subprocess, using the  
character '|'.  Anything after this character on the command 
line is passed to a subprocess for execution; the subprocess 
takes the output of Perl as its input.

Finally, if the command line ends with '&', the entire 
command is run in the background as an asynchronous 
subprocess.

=head2 Command line switches

The following command line switches behave differently under
VMS than described in L<perlrun>.  Note also that in order
to pass uppercase switches to Perl, you need to enclose
them in double-quotes on the command line, since the CRTL
downcases all unquoted strings.

On newer 64 bit versions of OpenVMS, a process setting now
controls if the quoting is needed to preserve the case of
command line arguments.

=over 4

=item -i

If the C<-i> switch is present but no extension for a backup
copy is given, then inplace editing creates a new version of
a file; the existing copy is not deleted.  (Note that if
an extension is given, an existing file is renamed to the backup
file, as is the case under other operating systems, so it does
not remain as a previous version under the original filename.)

=item -S

If the C<"-S"> or C<-"S"> switch is present I<and> the script
name does not contain a directory, then Perl translates the
logical name DCL$PATH as a searchlist, using each translation
as a directory in which to look for the script.  In addition,
if no file type is specified, Perl looks in each directory
for a file matching the name specified, with a blank type,
a type of F<.pl>, and a type of F<.com>, in that order.

=item -u

The C<-u> switch causes the VMS debugger to be invoked
after the Perl program is compiled, but before it has
run.  It does not create a core dump file.

=back

=head1 Perl functions

