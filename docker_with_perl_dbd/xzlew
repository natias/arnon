
Clears any placeholders from a hash.  If a restricted hash has any of its keys
marked as readonly and the key is subsequently deleted, the key is not actually
deleted but is marked by assigning it a value of C<&PL_sv_placeholder>.  This tags
it so it will be ignored by future operations such as iterating over the hash,
but will still allow the hash to have a value reassigned to the key at some
future point.  This function clears any such placeholder keys from the hash.
See C<L<Hash::Util::lock_keys()|Hash::Util/lock_keys>> for an example of its
use.

=over 3

 void  hv_clear_placeholders(HV *hv)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_copy_hints_hv>
X<hv_copy_hints_hv>

A specialised version of L</newHVhv> for copying C<%^H>.  C<ohv> must be
a pointer to a hash (which may have C<%^H> magic, but should be generally
non-magical), or C<NULL> (interpreted as an empty hash).  The content
of C<ohv> is copied to a new hash, which has the C<%^H>-specific magic
added to it.  A pointer to the new hash is returned.

=over 3

 HV *  hv_copy_hints_hv(HV * const ohv)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_delete>

=item C<hv_deletes>
X<hv_delete>X<hv_deletes>

These delete a key/value pair in the hash.  The value's SV is removed from
the hash, made mortal, and returned to the caller.

In C<hv_deletes>, the key must be a C language string literal, enclosed in
double quotes.  It is never treated as being in UTF-8.  There is no
length_parameter.

In C<hv_delete>, the absolute value of C<klen> is the length of the key.  If
C<klen> is negative the key is assumed to be in UTF-8-encoded Unicode.

In both, the C<flags> value will normally be zero; if set to C<G_DISCARD> then
C<NULL> will be returned.  C<NULL> will also be returned if the key is not
found.

=over 3

 SV *  hv_delete (HV *hv, const char *key, I32 klen, I32 flags)
 SV *  hv_deletes(HV *hv, "key", U32 flags)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_delete_ent>
X<hv_delete_ent>

Deletes a key/value pair in the hash.  The value SV is removed from the hash,
made mortal, and returned to the caller.  The C<flags> value will normally be
zero; if set to C<G_DISCARD> then C<NULL> will be returned.  C<NULL> will also
be returned if the key is not found.  C<hash> can be a valid precomputed hash
value, or 0 to ask for it to be computed.

=over 3

 SV *  hv_delete_ent(HV *hv, SV *keysv, I32 flags, U32 hash)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<HvENAME>
X<HvENAME>

Returns the effective name of a stash, or NULL if there is none.  The
effective name represents a location in the symbol table where this stash
resides.  It is updated automatically when packages are aliased or deleted.
A stash that is no longer in the symbol table has no effective name.  This
name is preferable to C<HvNAME> for use in MRO linearisations and isa
caches.

=over 3

 char*  HvENAME(HV* stash)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<HvENAMELEN>
X<HvENAMELEN>

Returns the length of the stash's effective name.

=over 3

 STRLEN  HvENAMELEN(HV *stash)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<HvENAMEUTF8>
X<HvENAMEUTF8>

Returns true if the effective name is in UTF-8 encoding.

=over 3

 unsigned char  HvENAMEUTF8(HV *stash)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<hv_exists>

=item C<hv_existss>
X<hv_exists>X<hv_existss>

These return a boolean indicating whether the specified hash key exists.

In C<hv_existss>, the key must be a C language string literal, enclosed in
double quotes.  It is never treated as being in UTF-8.  There is no
length_parameter.

In C<hv_exists>, the absolute value of C<klen> is the length of the key.  If
C<klen> is negative the key is assumed to be in UTF-8-encoded Unicode.

=over 3

 bool  hv_exists (HV *hv, const char *key, I32 klen)
 bool  hv_existss(HV *hv, "key")

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_exists_ent>
X<hv_exists_ent>

Returns a boolean indicating whether
the specified hash key exists.  C<hash>
can be a valid precomputed hash value, or 0 to ask for it to be
computed.

=over 3

 bool  hv_exists_ent(HV *hv, SV *keysv, U32 hash)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_fetch>

=item C<hv_fetchs>
X<hv_fetch>X<hv_fetchs>

These return the SV which corresponds to the specified key in the hash.

In C<hv_fetchs>, the key must be a C language string literal, enclosed in
double quotes.  It is never treated as being in UTF-8.  There is no
length_parameter.

In C<hv_fetch>, the absolute value of C<klen> is the length of the key.  If
C<klen> is negative the key is assumed to be in UTF-8-encoded Unicode.

In both, if C<lval> is set, then the fetch will be part of a store.  This means
that if there is no value in the hash associated with the given key, then one
is created and a pointer to it is returned.  The C<SV*> it points to can be
assigned to.  But always check that the return value is non-null before
dereferencing it to an C<SV*>.

See L<perlguts/"Understanding the Magic of Tied Hashes and Arrays"> for more
information on how to use this function on tied hashes.

=over 3

 SV **  hv_fetch (HV *hv, const char *key, I32 klen, I32 lval)
 SV **  hv_fetchs(HV *hv, "key", I32 lval)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_fetch_ent>
X<hv_fetch_ent>

Returns the hash entry which corresponds to the specified key in the hash.
C<hash> must be a valid precomputed hash number for the given C<key>, or 0
if you want the function to compute it.  IF C<lval> is set then the fetch
will be part of a store.  Make sure the return value is non-null before
accessing it.  The return value when C<hv> is a tied hash is a pointer to a
static location, so be sure to make a copy of the structure if you need to
store it somewhere.

See L<perlguts/"Understanding the Magic of Tied Hashes and Arrays"> for more
information on how to use this function on tied hashes.

=over 3

 HE *  hv_fetch_ent(HV *hv, SV *keysv, I32 lval, U32 hash)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_fetchs>
X<hv_fetchs>

Like C<hv_fetch>, but takes a literal string instead of a
string/length pair.

=over 3

 SV**  hv_fetchs(HV* tb, "key", I32 lval)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<HvFILL>
X<HvFILL>

Returns the number of hash buckets that happen to be in use.

As of perl 5.25 this function is used only for debugging
purposes, and the number of used hash buckets is not
in any way cached, thus this function can be costly
to execute as it must iterate over all the buckets in the
hash.

=over 3

 STRLEN  HvFILL(HV *const hv)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<HvHasAUX>
X<HvHasAUX>

Returns true if the HV has a C<struct xpvhv_aux> extension. Use this to check
whether it is valid to call C<HvAUX()>.

=over 3

 bool  HvHasAUX(HV *const hv)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<hv_iterinit>
X<hv_iterinit>

Prepares a starting point to traverse a hash table.  Returns the number of
keys in the hash, including placeholders (i.e. the same as C<HvTOTALKEYS(hv)>).
The return value is currently only meaningful for hashes without tie magic.

NOTE: Before version 5.004_65, C<hv_iterinit> used to return the number of
hash buckets that happen to be in use.  If you still need that esoteric
value, you can get it through the macro C<HvFILL(hv)>.

=over 3

 I32  hv_iterinit(HV *hv)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_iterkey>
X<hv_iterkey>

Returns the key from the current position of the hash iterator.  See
C<L</hv_iterinit>>.

=over 3

 char *  hv_iterkey(HE *entry, I32 *retlen)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_iterkeysv>
X<hv_iterkeysv>

Returns the key as an C<SV*> from the current position of the hash
iterator.  The return value will always be a mortal copy of the key.  Also
see C<L</hv_iterinit>>.

=over 3

 SV *  hv_iterkeysv(HE *entry)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_iternext>
X<hv_iternext>

Returns entries from a hash iterator.  See C<L</hv_iterinit>>.

You may call C<hv_delete> or C<hv_delete_ent> on the hash entry that the
iterator currently points to, without losing your place or invalidating your
iterator.  Note that in this case the current entry is deleted from the hash
with your iterator holding the last reference to it.  Your iterator is flagged
to free the entry on the next call to C<hv_iternext>, so you must not discard
your iterator immediately else the entry will leak - call C<hv_iternext> to
trigger the resource deallocation.

=over 3

 HE *  hv_iternext(HV *hv)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_iternext_flags>
X<hv_iternext_flags>

NOTE: C<hv_iternext_flags> is B<experimental> and may change or be
removed without notice.

Returns entries from a hash iterator.  See C<L</hv_iterinit>> and
C<L</hv_iternext>>.
The C<flags> value will normally be zero; if C<HV_ITERNEXT_WANTPLACEHOLDERS> is
set the placeholders keys (for restricted hashes) will be returned in addition
to normal keys.  By default placeholders are automatically skipped over.
Currently a placeholder is implemented with a value that is
C<&PL_sv_placeholder>.  Note that the implementation of placeholders and
restricted hashes may change, and the implementation currently is
insufficiently abstracted for any change to be tidy.

=over 3

 HE *  hv_iternext_flags(HV *hv, I32 flags)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_iternextsv>
X<hv_iternextsv>

Performs an C<hv_iternext>, C<hv_iterkey>, and C<hv_iterval> in one
operation.

=over 3

 SV *  hv_iternextsv(HV *hv, char **key, I32 *retlen)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_iterval>
X<hv_iterval>

Returns the value from the current position of the hash iterator.  See
C<L</hv_iterkey>>.

=over 3

 SV *  hv_iterval(HV *hv, HE *entry)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_ksplit>
X<hv_ksplit>

Attempt to grow the hash C<hv> so it has at least C<newmax> buckets available.
Perl chooses the actual number for its convenience.

This is the same as doing the following in Perl code:

 keys %hv = newmax;

=over 3

 void  hv_ksplit(HV *hv, IV newmax)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_magic>
X<hv_magic>

Adds magic to a hash.  See C<L</sv_magic>>.

=over 3

 void  hv_magic(HV *hv, GV *gv, int how)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<HvNAME>
X<HvNAME>

Returns the package name of a stash, or C<NULL> if C<stash> isn't a stash.
See C<L</SvSTASH>>, C<L</CvSTASH>>.

=over 3

 char*  HvNAME(HV* stash)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<HvNAMELEN>
X<HvNAMELEN>

Returns the length of the stash's name.

Disfavored forms of HvNAME and HvNAMELEN; suppress mention of them

=over 3

 STRLEN  HvNAMELEN(HV *stash)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<hv_name_set>

=item C<hv_name_sets>
X<hv_name_set>X<hv_name_sets>

These each set the name of stash C<hv> to the specified name.

They differ only in how the name is specified.

In C<hv_name_sets>, the name is a literal C string, enclosed in double quotes.

In C<hv_name_set>, C<name> points to the first byte of the name, and an
additional parameter, C<len>, specifies its length in bytes.  Hence, the name
may contain embedded-NUL characters.

If C<SVf_UTF8> is set in C<flags>, the name is treated as being in UTF-8;
otherwise not.

If C<HV_NAME_SETALL> is set in C<flags>, both the name and the effective name
are set.

=over 3

 void  hv_name_set (HV *hv, const char *name, U32 len, U32 flags)
 void  hv_name_sets(HV *hv, "name", U32 flags)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<HvNAMEUTF8>
X<HvNAMEUTF8>

Returns true if the name is in UTF-8 encoding.

=over 3

 unsigned char  HvNAMEUTF8(HV *stash)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<hv_scalar>
X<hv_scalar>

Evaluates the hash in scalar context and returns the result.

When the hash is tied dispatches through to the SCALAR method,
otherwise returns a mortal SV containing the number of keys
in the hash.

Note, prior to 5.25 this function returned what is now
returned by the hv_bucket_ratio() function.

=over 3

 SV *  hv_scalar(HV *hv)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_store>

=item C<hv_stores>
X<hv_store>X<hv_stores>

These each store SV C<val> with the specified key in hash C<hv>, returning NULL
if the operation failed or if the value did not need to be actually stored
within the hash (as in the case of tied hashes).  Otherwise it can be
dereferenced to get the original C<SV*>.

They differ only in how the hash key is specified.

In C<hv_stores>, the key must be a C language string literal, enclosed in
double quotes.  It is never treated as being in UTF-8.  There is no
length_parameter.

In C<hv_store>, C<key> is either NULL or points to the first byte of the string
specifying the key, and its length in bytes is given by the absolute value of
an additional parameter, C<klen>.  A NULL key indicates the key is to be
treated as C<undef>, and C<klen> is ignored; otherwise the key string may
contain embedded-NUL bytes.  If C<klen> is negative, the string is treated as
being encoded in UTF-8; otherwise not.

C<hv_store> has another extra parameter, C<hash>, a precomputed hash of the key
string, or zero if it has not been precomputed.  This parameter is omitted from
C<hv_stores>, as it is computed automatically at compile time.

If <hv> is NULL, NULL is returned and no action is taken.

If C<val> is NULL, it is treated as being C<undef>; otherwise the caller is
responsible for suitably incrementing the reference count of C<val> before
the call, and decrementing it if the function returned C<NULL>.  Effectively
a successful C<hv_store> takes ownership of one reference to C<val>.  This is
usually what you want; a newly created SV has a reference count of one, so
if all your code does is create SVs then store them in a hash, C<hv_store>
will own the only reference to the new SV, and your code doesn't need to do
anything further to tidy up.

C<hv_store> is not implemented as a call to L</C<hv_store_ent>>, and does not
create a temporary SV for the key, so if your key data is not already in SV
form then use C<hv_store> in preference to C<hv_store_ent>.

See L<perlguts/"Understanding the Magic of Tied Hashes and Arrays"> for more
information on how to use this function on tied hashes.

=over 3

 SV **  hv_store (HV *hv, const char *key, I32 klen, SV *val,
                  U32 hash)
 SV **  hv_stores(HV *hv, "key", SV *val)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_store_ent>
X<hv_store_ent>

Stores C<val> in a hash.  The hash key is specified as C<key>.  The C<hash>
parameter is the precomputed hash value; if it is zero then Perl will
compute it.  The return value is the new hash entry so created.  It will be
C<NULL> if the operation failed or if the value did not need to be actually
stored within the hash (as in the case of tied hashes).  Otherwise the
contents of the return value can be accessed using the C<He?> macros
described here.  Note that the caller is responsible for suitably
incrementing the reference count of C<val> before the call, and
decrementing it if the function returned NULL.  Effectively a successful
C<hv_store_ent> takes ownership of one reference to C<val>.  This is
usually what you want; a newly created SV has a reference count of one, so
if all your code does is create SVs then store them in a hash, C<hv_store>
will own the only reference to the new SV, and your code doesn't need to do
anything further to tidy up.  Note that C<hv_store_ent> only reads the C<key>;
unlike C<val> it does not take ownership of it, so maintaining the correct
reference count on C<key> is entirely the caller's responsibility.  The reason
it does not take ownership, is that C<key> is not used after this function
returns, and so can be freed immediately.  C<hv_store>
is not implemented as a call to C<hv_store_ent>, and does not create a temporary
SV for the key, so if your key data is not already in SV form then use
C<hv_store> in preference to C<hv_store_ent>.

See L<perlguts/"Understanding the Magic of Tied Hashes and Arrays"> for more
information on how to use this function on tied hashes.

=over 3

 HE *  hv_store_ent(HV *hv, SV *key, SV *val, U32 hash)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_undef>
X<hv_undef>

Undefines the hash.  The XS equivalent of C<undef(%hash)>.

As well as freeing all the elements of the hash (like C<hv_clear()>), this
also frees any auxiliary data and storage associated with the hash.

See L</av_clear> for a note about the hash possibly being invalid on
return.

=over 3

 void  hv_undef(HV *hv)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<newHV>
X<newHV>

Creates a new HV.  The reference count is set to 1.

=over 3

 HV *  newHV()

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<newHVhv>
X<newHVhv>

The content of C<ohv> is copied to a new hash.  A pointer to the new hash is
returned.

=over 3

 HV *  newHVhv(HV *hv)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<Nullhv>
X<Nullhv>

C<B<DEPRECATED!>>  It is planned to remove C<Nullhv>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

Null HV pointer.

(deprecated - use C<(HV *)NULL> instead)

=back

=for hackers
Found in file hv.h

=over 4

=item C<PERL_HASH>

Described in L<perlguts>.

=over 3

 void  PERL_HASH(U32 hash, char *key, STRLEN klen)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PL_modglobal>
X<PL_modglobal>

C<PL_modglobal> is a general purpose, interpreter global HV for use by
extensions that need to keep information on a per-interpreter basis.
In a pinch, it can also be used as a symbol table for extensions
to share data among each other.  It is a good idea to use keys
prefixed by the package name of the extension that owns the data.

On threaded perls, each thread has an independent copy of this variable;
each initialized at creation time with the current value of the creating
thread's copy.

=over 3

 HV*  PL_modglobal

=back

=back

=for hackers
Found in file intrpvar.h

=head1 Input/Output

=over 4

=item C<do_close>
X<do_close>

Close an I/O stream.  This implements Perl L<perlfunc/C<close>>.

C<gv> is the glob associated with the stream.

C<is_explict> is C<true> if this is an explicit close of the stream; C<false>
if it is part of another operation, such as closing a pipe (which involves
implicitly closing both ends).

Returns C<true> if successful; otherwise returns C<false> and sets C<errno> to
indicate the cause.

=over 3

 bool  do_close(GV *gv, bool is_explicit)

=back

=back

=for hackers
Found in file doio.c

=over 4

=item C<IoDIRP>

Described in L<perlguts>.

=over 3

 DIR *  IoDIRP(IO *io)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<IOf_FLUSH>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<IoFLAGS>

Described in L<perlguts>.

=over 3

 U8  IoFLAGS(IO *io)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<IOf_UNTAINT>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<IoIFP>

Described in L<perlguts>.

=over 3

 PerlIO *  IoIFP(IO *io)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<IoOFP>

Described in L<perlguts>.

=over 3

 PerlIO *  IoOFP(IO *io)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<IoTYPE>

Described in L<perlguts>.

=over 3

 char  IoTYPE(IO *io)

=back

