=item C<gv_fetchpv>

=item C<gv_fetchpvn>

=item C<gv_fetchpvn_flags>

=item C<gv_fetchpvs>

=item C<gv_fetchsv>

=item C<gv_fetchsv_nomg>
X<gv_fetchpv>X<gv_fetchpvn>X<gv_fetchpvn_flags>X<gv_fetchpvs>X<gv_fetchsv>X<gv_fetchsv_nomg>

These all return the GV of type C<sv_type> whose name is given by the inputs,
or NULL if no GV of that name and type could be found.  See L<perlguts/Stashes
and Globs>.

The only differences are how the input name is specified, and if 'get' magic is
normally used in getting that name.

Don't be fooled by the fact that only one form has C<flags> in its name.  They
all have a C<flags> parameter in fact, and all the flag bits have the same
meanings for all

If any of the flags C<GV_ADD>, C<GV_ADDMG>, C<GV_ADDWARN>, C<GV_ADDMULTI>, or
C<GV_NOINIT> is set, a GV is created if none already exists for the input name
and type.  However, C<GV_ADDMG> will only do the creation for magical GV's.
For all of these flags except C<GV_NOINIT>, C<L</gv_init_pvn>> is called after
the addition.  C<GV_ADDWARN> is used when the caller expects that adding won't
be necessary because the symbol should already exist; but if not, add it
anyway, with a warning that it was unexpectedly absent.  The C<GV_ADDMULTI>
flag means to pretend that the GV has been seen before (I<i.e.>, suppress "Used
once" warnings).

The flag C<GV_NOADD_NOINIT> causes C<L</gv_init_pvn>> not be to called if the
GV existed but isn't PVGV.

If the C<SVf_UTF8> bit is set, the name is treated as being encoded in UTF-8;
otherwise the name won't be considered to be UTF-8 in the C<pv>-named forms,
and the UTF-8ness of the underlying SVs will be used in the C<sv> forms.

If the flag C<GV_NOTQUAL> is set, the caller warrants that the input name is a
plain symbol name, not qualified with a package, otherwise the name is checked
for being a qualified one.

In C<gv_fetchpv>, C<nambeg> is a C string, NUL-terminated with no intermediate
NULs.

In C<gv_fetchpvs>, C<name> is a literal C string, hence is enclosed in
double quotes.

C<gv_fetchpvn> and C<gv_fetchpvn_flags> are identical.  In these, <nambeg> is
a Perl string whose byte length is given by C<full_len>, and may contain
embedded NULs.

In C<gv_fetchsv> and C<gv_fetchsv_nomg>, the name is extracted from the PV of
the input C<name> SV.  The only difference between these two forms is that
'get' magic is normally done on C<name> in C<gv_fetchsv>, and always skipped
with C<gv_fetchsv_nomg>.  Including C<GV_NO_SVGMAGIC> in the C<flags> parameter
to C<gv_fetchsv> makes it behave identically to C<gv_fetchsv_nomg>.

=over 3

 GV *  gv_fetchpv       (const char *nambeg, I32 flags,
                         const svtype sv_type)
 GV *  gv_fetchpvn      (const char * nambeg, STRLEN full_len,
                         I32 flags, const svtype sv_type)
 GV *  gv_fetchpvn_flags(const char *name, STRLEN len, I32 flags,
                         const svtype sv_type)
 GV *  gv_fetchpvs      ("name", I32 flags, const svtype sv_type)
 GV *  gv_fetchsv       (SV *name, I32 flags, const svtype sv_type)
 GV *  gv_fetchsv_nomg  (SV *name, I32 flags, const svtype sv_type)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<GvHV>
X<GvHV>

Return the HV from the GV.

=over 3

 HV*  GvHV(GV* gv)

=back

=back

=for hackers
Found in file gv.h

=over 4

=item C<gv_init>
X<gv_init>

The old form of C<gv_init_pvn()>.  It does not work with UTF-8 strings, as it
has no flags parameter.  If the C<multi> parameter is set, the
C<GV_ADDMULTI> flag will be passed to C<gv_init_pvn()>.

=over 3

 void  gv_init(GV *gv, HV *stash, const char *name, STRLEN len,
               int multi)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_init_pv>
X<gv_init_pv>

Same as C<gv_init_pvn()>, but takes a nul-terminated string for the name
instead of separate char * and length parameters.

=over 3

 void  gv_init_pv(GV *gv, HV *stash, const char *name, U32 flags)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_init_pvn>
X<gv_init_pvn>

Converts a scalar into a typeglob.  This is an incoercible typeglob;
assigning a reference to it will assign to one of its slots, instead of
overwriting it as happens with typeglobs created by C<SvSetSV>.  Converting
any scalar that is C<SvOK()> may produce unpredictable results and is reserved
for perl's internal use.

C<gv> is the scalar to be converted.

C<stash> is the parent stash/package, if any.

C<name> and C<len> give the name.  The name must be unqualified;
that is, it must not include the package name.  If C<gv> is a
stash element, it is the caller's responsibility to ensure that the name
passed to this function matches the name of the element.  If it does not
match, perl's internal bookkeeping will get out of sync.

C<flags> can be set to C<SVf_UTF8> if C<name> is a UTF-8 string, or
the return value of SvUTF8(sv).  It can also take the
C<GV_ADDMULTI> flag, which means to pretend that the GV has been
seen before (i.e., suppress "Used once" warnings).

=over 3

 void  gv_init_pvn(GV *gv, HV *stash, const char *name, STRLEN len,
                   U32 flags)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_init_sv>
X<gv_init_sv>

Same as C<gv_init_pvn()>, but takes an SV * for the name instead of separate
char * and length parameters.  C<flags> is currently unused.

=over 3

 void  gv_init_sv(GV *gv, HV *stash, SV *namesv, U32 flags)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_name_set>
X<gv_name_set>

Set the name for GV C<gv> to C<name> which is C<len> bytes long.  Thus it may
contain embedded NUL characters.

If C<flags> contains C<SVf_UTF8>, the name is treated as being encoded in
UTF-8; otherwise not.

=over 3

 void  gv_name_set(GV *gv, const char *name, U32 len, U32 flags)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_stashpv>
X<gv_stashpv>

Returns a pointer to the stash for a specified package.  Uses C<strlen> to
determine the length of C<name>, then calls C<gv_stashpvn()>.

=over 3

 HV *  gv_stashpv(const char *name, I32 flags)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_stashpvn>
X<gv_stashpvn>

Returns a pointer to the stash for a specified package.  The C<namelen>
parameter indicates the length of the C<name>, in bytes.  C<flags> is passed
to C<gv_fetchpvn_flags()>, so if set to C<GV_ADD> then the package will be
created if it does not already exist.  If the package does not exist and
C<flags> is 0 (or any other setting that does not create packages) then C<NULL>
is returned.

Flags may be one of:

 GV_ADD           Create and initialize the package if doesn't
                  already exist
 GV_NOADD_NOINIT  Don't create the package,
 GV_ADDMG         GV_ADD iff the GV is magical
 GV_NOINIT        GV_ADD, but don't initialize
 GV_NOEXPAND      Don't expand SvOK() entries to PVGV
 SVf_UTF8         The name is in UTF-8

The most important of which are probably C<GV_ADD> and C<SVf_UTF8>.

Note, use of C<gv_stashsv> instead of C<gv_stashpvn> where possible is strongly
recommended for performance reasons.

=over 3

 HV *  gv_stashpvn(const char *name, U32 namelen, I32 flags)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_stashpvs>
X<gv_stashpvs>

Like C<gv_stashpvn>, but takes a literal string instead of a
string/length pair.

=over 3

 HV*  gv_stashpvs("name", I32 create)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<gv_stashsv>
X<gv_stashsv>

Returns a pointer to the stash for a specified package.  See
C<L</gv_stashpvn>>.

Note this interface is strongly preferred over C<gv_stashpvn> for performance
reasons.

=over 3

 HV *  gv_stashsv(SV *sv, I32 flags)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<GvSV>
X<GvSV>

Return the SV from the GV.

Prior to Perl v5.9.3, this would add a scalar if none existed.  Nowadays, use
C<L</GvSVn>> for that, or compile perl with S<C<-DPERL_CREATE_GVSV>>.  See
L<perl5100delta>.

=over 3

 SV*  GvSV(GV* gv)

=back

=back

=for hackers
Found in file gv.h

=over 4

=item C<GvSVn>
X<GvSVn>

Like C<L</GvSV>>, but creates an empty scalar if none already exists.

=over 3

 SV*  GvSVn(GV* gv)

=back

=back

=for hackers
Found in file gv.h

=over 4

=item C<newGVgen>

=item C<newGVgen_flags>
X<newGVgen>X<newGVgen_flags>

Create a new, guaranteed to be unique, GV in the package given by the
NUL-terminated C language string C<pack>, and return a pointer to it.

For C<newGVgen> or if C<flags> in C<newGVgen_flags> is 0, C<pack> is to be
considered to be encoded in Latin-1.  The only other legal C<flags> value is
C<SVf_UTF8>, which indicates C<pack> is to be considered to be encoded in
UTF-8.

=over 3

 GV *  newGVgen      (const char *pack)
 GV *  newGVgen_flags(const char *pack, U32 flags)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<PL_curstash>
X<PL_curstash>

The stash for the package code will be compiled into.

On threaded perls, each thread has an independent copy of this variable;
each initialized at creation time with the current value of the creating
thread's copy.

=over 3

 HV*  PL_curstash

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<PL_defgv>
X<PL_defgv>

The GV representing C<*_>.  Useful for access to C<$_>.

On threaded perls, each thread has an independent copy of this variable;
each initialized at creation time with the current value of the creating
thread's copy.

=over 3

 GV *  PL_defgv

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<PL_defoutgv>
X<PL_defoutgv>

See C<L</setdefout>>.

=back

=for hackers
Found in file pp_sys.c

=over 4

=item C<PL_defstash>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<save_gp>
X<save_gp>

Saves the current GP of gv on the save stack to be restored on scope exit.

If C<empty> is true, replace the GP with a new GP.

If C<empty> is false, mark C<gv> with C<GVf_INTRO> so the next reference
assigned is localized, which is how S<C< local *foo = $someref; >> works.

=over 3

 void  save_gp(GV *gv, I32 empty)

=back

=back

=for hackers
Found in file scope.c

=over 4

=item C<setdefout>
X<setdefout>

Sets C<PL_defoutgv>, the default file handle for output, to the passed in
typeglob.  As C<PL_defoutgv> "owns" a reference on its typeglob, the reference
count of the passed in typeglob is increased by one, and the reference count
of the typeglob that C<PL_defoutgv> points to is decreased by one.

=over 3

 void  setdefout(GV *gv)

=back

=back

=for hackers
Found in file pp_sys.c

=head1 Hook manipulation


These functions provide convenient and thread-safe means of manipulating
hook variables.


=over 4

=item C<rcpv_copy>
X<rcpv_copy>

refcount increment a shared memory refcounted string, and when
the refcount goes to 0 free it using PerlMemShared_free().

It is the callers responsibility to ensure that the pv is the
result of a rcpv_new() call.

Returns the same pointer that was passed in.

    new = rcpv_copy(pv);

=over 3

 char *  rcpv_copy(char * const pv)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<rcpv_free>
X<rcpv_free>

refcount decrement a shared memory refcounted string, and when
the refcount goes to 0 free it using perlmemshared_free().

it is the callers responsibility to ensure that the pv is the
result of a rcpv_new() call.

Always returns NULL so it can be used like this:

    thing = rcpv_free(thing);

=over 3

 char *  rcpv_free(char * const pv)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<rcpv_new>
X<rcpv_new>

Create a new shared memory refcounted string with the requested size, and
with the requested initialization and a refcount of 1. The actual space
allocated will be 1 byte more than requested and rcpv_new() will ensure that
the extra byte is a null regardless of any flags settings.

If the RCPVf_NO_COPY flag is set then the pv argument will be
ignored, otherwise the contents of the pv pointer will be copied into
the new buffer or if it is NULL the function will do nothing and return NULL.

If the RCPVf_USE_STRLEN flag is set then the len argument is ignored and
recomputed using C<strlen(pv)>. It is an error to combine RCPVf_USE_STRLEN
and RCPVf_NO_COPY at the same time.

Under DEBUGGING rcpv_new() will assert() if it is asked to create a 0 length
shared string unless the RCPVf_ALLOW_EMPTY flag is set.

The return value from the function is suitable for passing into rcpv_copy() and
rcpv_free(). To access the RCPV * from the returned value use the RCPVx() macro.
The 'len' member of the RCPV struct stores the allocated length (including the
extra byte), but the RCPV_LEN() macro returns the requested length (not
including the extra byte).

Note that rcpv_new() does NOT use a hash table or anything like that to
dedupe inputs given the same text content. Each call with a non-null pv
parameter will produce a distinct pointer with its own refcount regardless of
the input content.

=over 3

 char *  rcpv_new(const char * const pv, STRLEN len, U32 flags)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<wrap_op_checker>
X<wrap_op_checker>

Puts a C function into the chain of check functions for a specified op
type.  This is the preferred way to manipulate the L</PL_check> array.
C<opcode> specifies which type of op is to be affected.  C<new_checker>
is a pointer to the C function that is to be added to that opcode's
check chain, and C<old_checker_p> points to the storage location where a
pointer to the next function in the chain will be stored.  The value of
C<new_checker> is written into the L</PL_check> array, while the value
previously stored there is written to C<*old_checker_p>.

L</PL_check> is global to an entire process, and a module wishing to
hook op checking may find itself invoked more than once per process,
typically in different threads.  To handle that situation, this function
is idempotent.  The location C<*old_checker_p> must initially (once
per process) contain a null pointer.  A C variable of static duration
(declared at file scope, typically also marked C<static> to give
it internal linkage) will be implicitly initialised appropriately,
if it does not have an explicit initialiser.  This function will only
actually modify the check chain if it finds C<*old_checker_p> to be null.
This function is also thread safe on the small scale.  It uses appropriate
locking to avoid race conditions in accessing L</PL_check>.

When this function is called, the function referenced by C<new_checker>
must be ready to be called, except for C<*old_checker_p> being unfilled.
In a threading situation, C<new_checker> may be called immediately,
even before this function has returned.  C<*old_checker_p> will always
be appropriately set before C<new_checker> is called.  If C<new_checker>
decides not to do anything special with an op that it is given (which
is the usual case for most uses of op check hooking), it must chain the
check function referenced by C<*old_checker_p>.

Taken all together, XS code to hook an op checker should typically look
something like this:

    static Perl_check_t nxck_frob;
    static OP *myck_frob(pTHX_ OP *op) {
        ...
        op = nxck_frob(aTHX_ op);
        ...
        return op;
    }
    BOOT:
        wrap_op_checker(OP_FROB, myck_frob, &nxck_frob);

If you want to influence compilation of calls to a specific subroutine,
then use L</cv_set_call_checker_flags> rather than hooking checking of
all C<entersub> ops.

=over 3

 void  wrap_op_checker(Optype opcode, Perl_check_t new_checker,
                       Perl_check_t *old_checker_p)

=back

=back

=for hackers
Found in file op.c

=head1 HV Handling
X<HV_ITERNEXT_WANTPLACEHOLDERS>X<HV_NAME_SETALL>X<HvNAMELEN_get>


A HV structure represents a Perl hash.  It consists mainly of an array
of pointers, each of which points to a linked list of HE structures.  The
array is indexed by the hash function of the key, so each linked list
represents all the hash entries with the same hash value.  Each HE contains
a pointer to the actual value, plus a pointer to a HEK structure which
holds the key and hash value.


=over 4

=item C<get_hv>
X<get_hv>

Returns the HV of the specified Perl hash.  C<flags> are passed to
C<gv_fetchpv>.  If C<GV_ADD> is set and the
Perl variable does not exist then it will be created.  If C<flags> is zero
(ignoring C<SVf_UTF8>) and the variable does not exist then C<NULL> is
returned.

NOTE: the C<perl_get_hv()> form is B<deprecated>.

=over 3

 HV *  get_hv(const char *name, I32 flags)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<HE>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<HEf_SVKEY>
X<HEf_SVKEY>

This flag, used in the length slot of hash entries and magic structures,
specifies the structure contains an C<SV*> pointer where a C<char*> pointer
is to be expected.  (For information only--not to be used).

=back

=for hackers
Found in file hv.h

=over 4

=item C<HeHASH>
X<HeHASH>

Returns the computed hash stored in the hash entry.

=over 3

 U32  HeHASH(HE* he)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<HeKEY>
X<HeKEY>

Returns the actual pointer stored in the key slot of the hash entry.  The
pointer may be either C<char*> or C<SV*>, depending on the value of
C<HeKLEN()>.  Can be assigned to.  The C<HePV()> or C<HeSVKEY()> macros are
usually preferable for finding the value of a key.

=over 3

 void*  HeKEY(HE* he)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<HeKLEN>
X<HeKLEN>

If this is negative, and amounts to C<HEf_SVKEY>, it indicates the entry
holds an C<SV*> key.  Otherwise, holds the actual length of the key.  Can
be assigned to.  The C<HePV()> macro is usually preferable for finding key
lengths.

=over 3

 STRLEN  HeKLEN(HE* he)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<HePV>
X<HePV>

Returns the key slot of the hash entry as a C<char*> value, doing any
necessary dereferencing of possibly C<SV*> keys.  The length of the string
is placed in C<len> (this is a macro, so do I<not> use C<&len>).  If you do
not care about what the length of the key is, you may use the global
variable C<PL_na>, though this is rather less efficient than using a local
variable.  Remember though, that hash keys in perl are free to contain
embedded nulls, so using C<strlen()> or similar is not a good way to find
the length of hash keys.  This is very similar to the C<SvPV()> macro
described elsewhere in this document.  See also C<L</HeUTF8>>.

If you are using C<HePV> to get values to pass to C<newSVpvn()> to create a
new SV, you should consider using C<newSVhek(HeKEY_hek(he))> as it is more
efficient.

=over 3

 char*  HePV(HE* he, STRLEN len)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<HeSVKEY>
X<HeSVKEY>

Returns the key as an C<SV*>, or C<NULL> if the hash entry does not
contain an C<SV*> key.

=over 3

 SV*  HeSVKEY(HE* he)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<HeSVKEY_force>
X<HeSVKEY_force>

Returns the key as an C<SV*>.  Will create and return a temporary mortal
C<SV*> if the hash entry contains only a C<char*> key.

=over 3

 SV*  HeSVKEY_force(HE* he)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<HeSVKEY_set>
X<HeSVKEY_set>

Sets the key to a given C<SV*>, taking care to set the appropriate flags to
indicate the presence of an C<SV*> key, and returns the same
C<SV*>.

=over 3

 SV*  HeSVKEY_set(HE* he, SV* sv)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<HeUTF8>
X<HeUTF8>

Returns whether the C<char *> value returned by C<HePV> is encoded in UTF-8,
doing any necessary dereferencing of possibly C<SV*> keys.  The value returned
will be 0 or non-0, not necessarily 1 (or even a value with any low bits set),
so B<do not> blindly assign this to a C<bool> variable, as C<bool> may be a
typedef for C<char>.

=over 3

 U32  HeUTF8(HE* he)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<HeVAL>
X<HeVAL>

Returns the value slot (type C<SV*>)
stored in the hash entry.  Can be assigned
to.

  SV *foo= HeVAL(hv);
  HeVAL(hv)= sv;

=over 3

 SV*  HeVAL(HE* he)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<HV>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<hv_assert>
X<hv_assert>

Check that a hash is in an internally consistent state.

NOTE: C<hv_assert> must be explicitly called as
C<Perl_hv_assert>
with an C<aTHX_> parameter.

=over 3

 void  Perl_hv_assert(pTHX_ HV *hv)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_bucket_ratio>
X<hv_bucket_ratio>

NOTE: C<hv_bucket_ratio> is B<experimental> and may change or be
removed without notice.

If the hash is tied dispatches through to the SCALAR tied method,
otherwise if the hash contains no keys returns 0, otherwise returns
a mortal sv containing a string specifying the number of used buckets,
followed by a slash, followed by the number of available buckets.

This function is expensive, it must scan all of the buckets
to determine which are used, and the count is NOT cached.
In a large hash this could be a lot of buckets.

=over 3

 SV *  hv_bucket_ratio(HV *hv)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_clear>
X<hv_clear>

Frees all the elements of a hash, leaving it empty.
The XS equivalent of C<%hash = ()>.  See also L</hv_undef>.

See L</av_clear> for a note about the hash possibly being invalid on
return.

=over 3

 void  hv_clear(HV *hv)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_clear_placeholders>
X<hv_clear_placeholders>
