            # rev id. The rebased list must must not contain the dest rev
            # (issue4896)
            rebased = [
                s
                for r, s in self.state.items()
                if s >= 0 and s != r and s != self.destmap[r]
            ]
            immutable = [d for d in rebased if not repo[d].mutable()]
            cleanup = True
            if immutable:
                repo.ui.warn(
                    _(b"warning: can't clean up public changesets %s\n")
                    % b', '.join(bytes(repo[r]) for r in immutable),
                    hint=_(b"see 'hg help phases' for details"),
                )
                cleanup = False

            descendants = set()
            if rebased:
                descendants = set(repo.changelog.descendants(rebased))
            if descendants - set(rebased):
                repo.ui.warn(
                    _(
                        b"warning: new changesets detected on "
                        b"destination branch, can't strip\n"
                    )
                )
                cleanup = False

            if cleanup:
                if rebased:
                    strippoints = [
                        c.node() for c in repo.set(b'roots(%ld)', rebased)
                    ]

                updateifonnodes = set(rebased)
                updateifonnodes.update(self.destmap.values())

                if not dryrun and not confirm:
                    updateifonnodes.add(self.originalwd)

                shouldupdate = repo[b'.'].rev() in updateifonnodes

                # Update away from the rebase if necessary
                if shouldupdate:
                    mergemod.clean_update(repo[self.originalwd])

                # Strip from the first rebased revision
                if rebased:
                    repair.strip(repo.ui, repo, strippoints, backup=backup)

            if self.activebookmark and self.activebookmark in repo._bookmarks:
                bookmarks.activate(repo, self.activebookmark)

        finally:
            clearstatus(repo)
            clearcollapsemsg(repo)
            if not suppwarns:
                repo.ui.warn(_(b'rebase aborted\n'))
        return 0


@command(
    b'rebase',
    [
        (
            b's',
            b'source',
            [],
            _(b'rebase the specified changesets and their descendants'),
            _(b'REV'),
        ),
        (
            b'b',
            b'base',
            [],
            _(b'rebase everything from branching point of specified changeset'),
            _(b'REV'),
        ),
        (b'r', b'rev', [], _(b'rebase these revisions'), _(b'REV')),
        (
            b'd',
            b'dest',
            b'',
            _(b'rebase onto the specified changeset'),
            _(b'REV'),
        ),
        (b'', b'collapse', False, _(b'collapse the rebased changesets')),
        (
            b'm',
            b'message',
            b'',
            _(b'use text as collapse commit message'),
            _(b'TEXT'),
        ),
        (b'e', b'edit', False, _(b'invoke editor on commit messages')),
        (
            b'l',
            b'logfile',
            b'',
            _(b'read collapse commit message from file'),
            _(b'FILE'),
        ),
        (b'k', b'keep', False, _(b'keep original changesets')),
        (b'', b'keepbranches', False, _(b'keep original branch names')),
        (b'D', b'detach', False, _(b'(DEPRECATED)')),
        (b'i', b'interactive', False, _(b'(DEPRECATED)')),
        (b't', b'tool', b'', _(b'specify merge tool')),
        (b'', b'stop', False, _(b'stop interrupted rebase')),
        (b'c', b'continue', False, _(b'continue an interrupted rebase')),
        (b'a', b'abort', False, _(b'abort an interrupted rebase')),
        (
            b'',
            b'auto-orphans',
            b'',
            _(
                b'automatically rebase orphan revisions '
                b'in the specified revset (EXPERIMENTAL)'
            ),
        ),
    ]
    + cmdutil.dryrunopts
    + cmdutil.formatteropts
    + cmdutil.confirmopts,
    _(b'[[-s REV]... | [-b REV]... | [-r REV]...] [-d REV] [OPTION]...'),
    helpcategory=command.CATEGORY_CHANGE_MANAGEMENT,
)
def rebase(ui, repo, **opts):
    """move changeset (and descendants) to a different branch

    Rebase uses repeated merging to graft changesets from one part of
    history (the source) onto another (the destination). This can be
    useful for linearizing *local* changes relative to a master
    development tree.

    Published commits cannot be rebased (see :hg:`help phases`).
    To copy commits, see :hg:`help graft`.

    If you don't specify a destination changeset (``-d/--dest``), rebase
    will use the same logic as :hg:`merge` to pick a destination.  if
    the current branch contains exactly one other head, the other head
    is merged with by default.  Otherwise, an explicit revision with
    which to merge with must be provided.  (destination changeset is not
    modified by rebasing, but new changesets are added as its
    descendants.)

    Here are the ways to select changesets:

      1. Explicitly select them using ``--rev``.

      2. Use ``--source`` to select a root changeset and include all of its
         descendants.

      3. Use ``--base`` to select a changeset; rebase will find ancestors
         and their descendants which are not also ancestors of the destination.

      4. If you do not specify any of ``--rev``, ``--source``, or ``--base``,
         rebase will use ``--base .`` as above.

    If ``--source`` or ``--rev`` is used, special names ``SRC`` and ``ALLSRC``
    can be used in ``--dest``. Destination would be calculated per source
    revision with ``SRC`` substituted by that single source revision and
    ``ALLSRC`` substituted by all source revisions.

    Rebase will destroy original changesets unless you use ``--keep``.
    It will also move your bookmarks (even if you do).

    Some changesets may be dropped if they do not contribute changes
    (e.g. merges from the destination branch).

    Unlike ``merge``, rebase will do nothing if you are at the branch tip of
    a named branch with two heads. You will need to explicitly specify source
    and/or destination.

    If you need to use a tool to automate merge/conflict decisions, you
    can specify one with ``--tool``, see :hg:`help merge-tools`.
    As a caveat: the tool will not be used to mediate when a file was
    deleted, there is no hook presently available for this.

    If a rebase is interrupted to manually resolve a conflict, it can be
    continued with --continue/-c, aborted with --abort/-a, or stopped with
    --stop.

    .. container:: verbose

      Examples:

      - move "local changes" (current commit back to branching point)
        to the current branch tip after a pull::

          hg rebase

      - move a single changeset to the stable branch::

          hg rebase -r 5f493448 -d stable

      - splice a commit and all its descendants onto another part of history::

          hg rebase --source c0c3 --dest 4cf9

      - rebase everything on a branch marked by a bookmark onto the
        default branch::

          hg rebase --base myfeature --dest default

      - collapse a sequence of changes into a single commit::

          hg rebase --collapse -r 1520:1525 -d .

      - move a named branch while preserving its name::

          hg rebase -r "branch(featureX)" -d 1.3 --keepbranches

      - stabilize orphaned changesets so history looks linear::

          hg rebase -r 'orphan()-obsolete()'\
 -d 'first(max((successors(max(roots(ALLSRC) & ::SRC)^)-obsolete())::) +\
 max(::((roots(ALLSRC) & ::SRC)^)-obsolete()))'

    Configuration Options:

    You can make rebase require a destination if you set the following config
    option::

      [commands]
      rebase.requiredest = True

    By default, rebase will close the transaction after each commit. For
    performance purposes, you can configure rebase to use a single transaction
    across the entire rebase. WARNING: This setting introduces a significant
    risk of losing the work you've done in a rebase if the rebase aborts
    unexpectedly::

      [rebase]
      singletransaction = True

    By default, rebase writes to the working copy, but you can configure it to
    run in-memory for better performance. When the rebase is not moving the
    parent(s) of the working copy (AKA the "currently checked out changesets"),
    this may also allow it to run even if the working copy is dirty::

      [rebase]
      experimental.inmemory = True

    Return Values:

    Returns 0 on success, 1 if nothing to rebase or there are
    unresolved conflicts.

    """
    inmemory = ui.configbool(b'rebase', b'experimental.inmemory')
    action = cmdutil.check_at_most_one_arg(opts, 'abort', 'stop', 'continue')
    if action:
        cmdutil.check_incompatible_arguments(
            opts, action, ['confirm', 'dry_run']
        )
        cmdutil.check_incompatible_arguments(
            opts, action, ['rev', 'source', 'base', 'dest']
        )
    cmdutil.check_at_most_one_arg(opts, 'confirm', 'dry_run')
    cmdutil.check_at_most_one_arg(opts, 'rev', 'source', 'base')

    if action or repo.currenttransaction() is not None:
        # in-memory rebase is not compatible with resuming rebases.
        # (Or if it is run within a transaction, since the restart logic can
        # fail the entire transaction.)
        inmemory = False

    if opts.get('auto_orphans'):
        disallowed_opts = set(opts) - {'auto_orphans'}
        cmdutil.check_incompatible_arguments(
            opts, 'auto_orphans', disallowed_opts
        )

        userrevs = list(repo.revs(opts.get('auto_orphans')))
        opts['rev'] = [revsetlang.formatspec(b'%ld and orphan()', userrevs)]
        opts['dest'] = b'_destautoorphanrebase(SRC)'

    if opts.get('dry_run') or opts.get('confirm'):
        return _dryrunrebase(ui, repo, action, opts)
    elif action == 'stop':
        rbsrt = rebaseruntime(repo, ui)
        with repo.wlock(), repo.lock():
            rbsrt.restorestatus()
            if rbsrt.collapsef:
                raise error.StateError(_(b"cannot stop in --collapse session"))
            allowunstable = obsolete.isenabled(repo, obsolete.allowunstableopt)
            if not (rbsrt.keepf or allowunstable):
                raise error.StateError(
                    _(
                        b"cannot remove original changesets with"
                        b" unrebased descendants"
                    ),
                    hint=_(
                        b'either enable obsmarkers to allow unstable '
                        b'revisions or use --keep to keep original '
                        b'changesets'
                    ),
                )
            # update to the current working revision
            # to clear interrupted merge
            mergemod.clean_update(repo[rbsrt.originalwd])
            rbsrt._finishrebase()
            return 0
    elif inmemory:
        try:
            # in-memory merge doesn't support conflicts, so if we hit any, abort
            # and re-run as an on-disk merge.
            overrides = {(b'rebase', b'singletransaction'): True}
            with ui.configoverride(overrides, b'rebase'):
                return _dorebase(ui, repo, action, opts, inmemory=inmemory)
        except error.InMemoryMergeConflictsError:
            if ui.configbool(b'devel', b'rebase.force-in-memory-merge'):
                raise
            ui.warn(
                _(
                    b'hit merge conflicts; re-running rebase without in-memory'
                    b' merge\n'
                )
            )
            clearstatus(repo)
            clearcollapsemsg(repo)
            return _dorebase(ui, repo, action, opts, inmemory=False)
    else:
        return _dorebase(ui, repo, action, opts)


def _dryrunrebase(ui, repo, action, opts):
    rbsrt = rebaseruntime(repo, ui, inmemory=True, dryrun=True, opts=opts)
    confirm = opts.get('confirm')
    if confirm:
        ui.status(_(b'starting in-memory rebase\n'))
    else:
        ui.status(
            _(b'starting dry-run rebase; repository will not be changed\n')
        )
    with repo.wlock(), repo.lock():
        needsabort = True
        try:
            overrides = {(b'rebase', b'singletransaction'): True}
            with ui.configoverride(overrides, b'rebase'):
                res = _origrebase(
                    ui,
                    repo,
                    action,
                    opts,
                    rbsrt,
                )
                if res == _nothingtorebase():
                    needsabort = False
                    return res
        except error.ConflictResolutionRequired:
            ui.status(_(b'hit a merge conflict\n'))
            return 1
        except error.Abort:
            needsabort = False
            raise
        else:
            if confirm:
                ui.status(_(b'rebase completed successfully\n'))
                if not ui.promptchoice(_(b'apply changes (yn)?$$ &Yes $$ &No')):
                    # finish unfinished rebase
                    rbsrt._finishrebase()
                else:
                    rbsrt._prepareabortorcontinue(
                        isabort=True,
                        backup=False,
                        suppwarns=True,
                        confirm=confirm,
                    )
                needsabort = False
            else:
                ui.status(
                    _(
                        b'dry-run rebase completed successfully; run without'
                        b' -n/--dry-run to perform this rebase\n'
                    )
                )
            return 0
        finally:
            if needsabort:
                # no need to store backup in case of dryrun
                rbsrt._prepareabortorcontinue(
                    isabort=True,
                    backup=False,
                    suppwarns=True,
                    dryrun=opts.get('dry_run'),
                )


def _dorebase(ui, repo, action, opts, inmemory=False):
    rbsrt = rebaseruntime(repo, ui, inmemory, opts=opts)
    return _origrebase(ui, repo, action, opts, rbsrt)


def _origrebase(ui, repo, action, opts, rbsrt):
    assert action != 'stop'
    with repo.wlock(), repo.lock():
        if opts.get('interactive'):
            try:
                if extensions.find(b'histedit'):
                    enablehistedit = b''
            except KeyError:
                enablehistedit = b" --config extensions.histedit="
            help = b"hg%s help -e histedit" % enablehistedit
            msg = (
                _(
                    b"interactive history editing is supported by the "
                    b"'histedit' extension (see \"%s\")"
                )
                % help
            )
            raise error.InputError(msg)

        if rbsrt.collapsemsg and not rbsrt.collapsef:
            raise error.InputError(
                _(b'message can only be specified with collapse')
            )

        if action:
            if rbsrt.collapsef:
                raise error.InputError(
                    _(b'cannot use collapse with continue or abort')
                )
            if action == 'abort' and opts.get('tool', False):
                ui.warn(_(b'tool option will be ignored\n'))
            if action == 'continue':
                ms = mergestatemod.mergestate.read(repo)
                mergeutil.checkunresolved(ms)

            retcode = rbsrt._prepareabortorcontinue(isabort=(action == 'abort'))
            if retcode is not None:
                return retcode
        else:
            # search default destination in this space
            # used in the 'hg pull --rebase' case, see issue 5214.
            destspace = opts.get('_destspace')
            destmap = _definedestmap(
                ui,
                repo,
                rbsrt.inmemory,
                opts.get('dest', None),
                opts.get('source', []),
                opts.get('base', []),
                opts.get('rev', []),
                destspace=destspace,
            )
            retcode = rbsrt._preparenewrebase(destmap)
            if retcode is not None:
                return retcode
            storecollapsemsg(repo, rbsrt.collapsemsg)

        tr = None

        singletr = ui.configbool(b'rebase', b'singletransaction')
        if singletr:
            tr = repo.transaction(b'rebase')

        # If `rebase.singletransaction` is enabled, wrap the entire operation in
        # one transaction here. Otherwise, transactions are obtained when
        # committing each node, which is slower but allows partial success.
        with util.acceptintervention(tr):
            # Same logic for the dirstate guard, except we don't create one when
            # rebasing in-memory (it's not needed).
            dsguard = None
            if singletr and not rbsrt.inmemory:
                dsguard = dirstateguard.dirstateguard(repo, b'rebase')
            with util.acceptintervention(dsguard):
                rbsrt._performrebase(tr)
                if not rbsrt.dryrun:
                    rbsrt._finishrebase()


def _definedestmap(ui, repo, inmemory, destf, srcf, basef, revf, destspace):
    """use revisions argument to define destmap {srcrev: destrev}"""
    if revf is None:
        revf = []

    # destspace is here to work around issues with `hg pull --rebase` see
    # issue5214 for details

    cmdutil.checkunfinished(repo)
    if not inmemory:
        cmdutil.bailifchanged(repo)

    if ui.configbool(b'commands', b'rebase.requiredest') and not destf:
        raise error.InputError(
            _(b'you must specify a destination'),
            hint=_(b'use: hg rebase -d REV'),
        )

    dest = None

    if revf:
        rebaseset = logcmdutil.revrange(repo, revf)
        if not rebaseset:
            ui.status(_(b'empty "rev" revision set - nothing to rebase\n'))
            return None
    elif srcf:
        src = logcmdutil.revrange(repo, srcf)
        if not src:
            ui.status(_(b'empty "source" revision set - nothing to rebase\n'))
            return None
        # `+  (%ld)` to work around `wdir()::` being empty
        rebaseset = repo.revs(b'(%ld):: + (%ld)', src, src)
    else:
        base = logcmdutil.revrange(repo, basef or [b'.'])
        if not base:
            ui.status(
                _(b'empty "base" revision set - ' b"can't compute rebase set\n")
            )
            return None
        if destf:
            # --base does not support multiple destinations
            dest = logcmdutil.revsingle(repo, destf)
        else:
            dest = repo[_destrebase(repo, base, destspace=destspace)]
            destf = bytes(dest)

        roots = []  # selected children of branching points
        bpbase = {}  # {branchingpoint: [origbase]}
        for b in base:  # group bases by branching points
            bp = repo.revs(b'ancestor(%d, %d)', b, dest.rev()).first()
            bpbase[bp] = bpbase.get(bp, []) + [b]
        if None in bpbase:
            # emulate the old behavior, showing "nothing to rebase" (a better
            # behavior may be abort with "cannot find branching point" error)
            bpbase.clear()
        for bp, bs in bpbase.items():  # calculate roots
            roots += list(repo.revs(b'children(%d) & ancestors(%ld)', bp, bs))

        rebaseset = repo.revs(b'%ld::', roots)

        if not rebaseset:
            # transform to list because smartsets are not comparable to
            # lists. This should be improved to honor laziness of
            # smartset.
            if list(base) == [dest.rev()]:
                if basef:
                    ui.status(
                        _(
                            b'nothing to rebase - %s is both "base"'
                            b' and destination\n'
                        )
                        % dest
                    )
                else:
                    ui.status(
                        _(
                            b'nothing to rebase - working directory '
                            b'parent is also destination\n'
                        )
                    )
            elif not repo.revs(b'%ld - ::%d', base, dest.rev()):
                if basef:
                    ui.status(
                        _(
                            b'nothing to rebase - "base" %s is '
                            b'already an ancestor of destination '
                            b'%s\n'
                        )
                        % (b'+'.join(bytes(repo[r]) for r in base), dest)
                    )
                else:
                    ui.status(
                        _(
                            b'nothing to rebase - working '
                            b'directory parent is already an '
                            b'ancestor of destination %s\n'
                        )
                        % dest
                    )
            else:  # can it happen?
                ui.status(
                    _(b'nothing to rebase from %s to %s\n')
                    % (b'+'.join(bytes(repo[r]) for r in base), dest)
                )
            return None

    if wdirrev in rebaseset:
        raise error.InputError(_(b'cannot rebase the working copy'))
    rebasingwcp = repo[b'.'].rev() in rebaseset
    ui.log(
        b"rebase",
        b"rebasing working copy parent: %r\n",
        rebasingwcp,
        rebase_rebasing_wcp=rebasingwcp,
    )
    if inmemory and rebasingwcp:
        # Check these since we did not before.
        cmdutil.checkunfinished(repo)
        cmdutil.bailifchanged(repo)

    if not destf:
        dest = repo[_destrebase(repo, rebaseset, destspace=destspace)]
        destf = bytes(dest)

    allsrc = revsetlang.formatspec(b'%ld', rebaseset)
    alias = {b'ALLSRC': allsrc}

    if dest is None:
        try:
            # fast path: try to resolve dest without SRC alias
            dest = scmutil.revsingle(repo, destf, localalias=alias)
        except error.RepoLookupError:
            # multi-dest path: resolve dest for each SRC separately
            destmap = {}
            for r in rebaseset:
                alias[b'SRC'] = revsetlang.formatspec(b'%d', r)
                # use repo.anyrevs instead of scmutil.revsingle because we
                # don't want to abort if destset is empty.
                destset = repo.anyrevs([destf], user=True, localalias=alias)
                size = len(destset)
                if size == 1:
                    destmap[r] = destset.first()
                elif size == 0:
                    ui.note(_(b'skipping %s - empty destination\n') % repo[r])
                else:
                    raise error.InputError(
                        _(b'rebase destination for %s is not unique') % repo[r]
                    )

    if dest is not None:
        # single-dest case: assign dest to each rev in rebaseset
        destrev = dest.rev()
        destmap = {r: destrev for r in rebaseset}  # {srcrev: destrev}

    if not destmap:
        ui.status(_(b'nothing to rebase - empty destination\n'))
        return None

    return destmap


def externalparent(repo, state, destancestors):
    """Return the revision that should be used as the second parent
    when the revisions in state is collapsed on top of destancestors.
    Abort if there is more than one parent.
    """
    parents = set()
    source = min(state)
    for rev in state:
        if rev == source:
            continue
        for p in repo[rev].parents():
            if p.rev() not in state and p.rev() not in destancestors:
                parents.add(p.rev())
    if not parents:
        return nullrev
    if len(parents) == 1:
        return parents.pop()
    raise error.StateError(
        _(
            b'unable to collapse on top of %d, there is more '
            b'than one external parent: %s'
        )
        % (max(destancestors), b', '.join(b"%d" % p for p in sorted(parents)))
    )


def commitmemorynode(repo, wctx, editor, extra, user, date, commitmsg):
    """Commit the memory changes with parents p1 and p2.
    Return node of committed revision."""
    # By convention, ``extra['branch']`` (set by extrafn) clobbers
    # ``branch`` (used when passing ``--keepbranches``).
    branch = None
    if b'branch' in extra:
        branch = extra[b'branch']

    # FIXME: We call _compact() because it's required to correctly detect
    # changed files. This was added to fix a regression shortly before the 5.5
    # release. A proper fix will be done in the default branch.
    wctx._compact()
    memctx = wctx.tomemctx(
        commitmsg,
        date=date,
        extra=extra,
        user=user,
        branch=branch,
        editor=editor,
    )
    if memctx.isempty() and not repo.ui.configbool(b'ui', b'allowemptycommit'):
        return None
    commitres = repo.commitctx(memctx)
    wctx.clean()  # Might be reused
    return commitres


def commitnode(repo, editor, extra, user, date, commitmsg):
    """Commit the wd changes with parents p1 and p2.
    Return node of committed revision."""
    dsguard = util.nullcontextmanager()
    if not repo.ui.configbool(b'rebase', b'singletransaction'):
        dsguard = dirstateguard.dirstateguard(repo, b'rebase')
    with dsguard:
        # Commit might fail if unresolved files exist
        newnode = repo.commit(
            text=commitmsg, user=user, date=date, extra=extra, editor=editor
        )

        repo.dirstate.setbranch(repo[newnode].branch())
        return newnode


def rebasenode(repo, rev, p1, p2, base, collapse, wctx):
    """Rebase a single revision rev on top of p1 using base as merge ancestor"""
    # Merge phase
    # Update to destination and merge it with local
    p1ctx = repo[p1]
    if wctx.isinmemory():
        wctx.setbase(p1ctx)
    else:
        if repo[b'.'].rev() != p1:
            repo.ui.debug(b" update to %d:%s\n" % (p1, p1ctx))
            mergemod.clean_update(p1ctx)
        else:
            repo.ui.debug(b" already in destination\n")
        # This is, alas, necessary to invalidate workingctx's manifest cache,
        # as well as other data we litter on it in other places.
        wctx = repo[None]
        repo.dirstate.write(repo.currenttransaction())
    ctx = repo[rev]
    repo.ui.debug(b" merge against %d:%s\n" % (rev, ctx))
    if base is not None:
        repo.ui.debug(b"   detach base %d:%s\n" % (base, repo[base]))

    # See explanation in merge.graft()
    mergeancestor = repo.changelog.isancestor(p1ctx.node(), ctx.node())
    stats = mergemod._update(
        repo,
        rev,
        branchmerge=True,
        force=True,
        ancestor=base,
        mergeancestor=mergeancestor,
        labels=[b'dest', b'source', b'parent of source'],
        wc=wctx,
    )
    wctx.setparents(p1ctx.node(), repo[p2].node())
    if collapse:
        copies.graftcopies(wctx, ctx, p1ctx)
    else:
        # If we're not using --collapse, we need to
        # duplicate copies between the revision we're
        # rebasing and its first parent.
        copies.graftcopies(wctx, ctx, ctx.p1())

    if stats.unresolvedcount > 0:
        if wctx.isinmemory():
            raise error.InMemoryMergeConflictsError()
        else:
            raise error.ConflictResolutionRequired(b'rebase')


def adjustdest(repo, rev, destmap, state, skipped):
    r"""adjust rebase destination given the current rebase state

    rev is what is being rebased. Return a list of two revs, which are the
    adjusted destinations for rev's p1 and p2, respectively. If a parent is
    nullrev, return dest without adjustment for it.

    For example, when doing rebasing B+E to F, C to G, rebase will first move B
    to B1, and E's destination will be adjusted from F to B1.

        B1 <- written during rebasing B
        |
        F <- original destination of B, E
        |
        | E <- rev, which is being rebased
        | |
        | D <- prev, one parent of rev being checked
        | |
        | x <- skipped, ex. no successor or successor in (::dest)
        | |
        | C <- rebased as C', different destination
        | |
        | B <- rebased as B1     C'
        |/                       |
        A                        G <- destination of C, different

    Another example about merge changeset, rebase -r C+G+H -d K, rebase will
    first move C to C1, G to G1, and when it's checking H, the adjusted
    destinations will be [C1, G1].

            H       C1 G1
           /|       | /
          F G       |/
        K | |  ->   K
        | C D       |
        | |/        |
        | B         | ...
        |/          |/
        A           A

    Besides, adjust dest according to existing rebase information. For example,

      B C D    B needs to be rebased on top of C, C needs to be rebased on top
       \|/     of D. We will rebase C first.
        A

          C'   After rebasing C, when considering B's destination, use C'
          |    instead of the original C.
      B   D
       \ /
        A
    """
    # pick already rebased revs with same dest from state as interesting source
    dest = destmap[rev]
    source = [
        s
        for s, d in state.items()
        if d > 0 and destmap[s] == dest and s not in skipped
    ]

    result = []
    for prev in repo.changelog.parentrevs(rev):
        adjusted = dest
        if prev != nullrev:
            candidate = repo.revs(b'max(%ld and (::%d))', source, prev).first()
            if candidate is not None:
                adjusted = state[candidate]
        if adjusted == dest and dest in state:
            adjusted = state[dest]
            if adjusted == revtodo:
                # sortsource should produce an order that makes this impossible
                raise error.ProgrammingError(
                    b'rev %d should be rebased already at this time' % dest
                )
        result.append(adjusted)
    return result


def _checkobsrebase(repo, ui, rebaseobsrevs, rebaseobsskipped):
    """
    Abort if rebase will create divergence or rebase is noop because of markers

    `rebaseobsrevs`: set of obsolete revision in source
    `rebaseobsskipped`: set of revisions from source skipped because they have
    successors in destination or no non-obsolete successor.
    """
    # Obsolete node with successors not in dest leads to divergence
    divergenceok = obsolete.isenabled(repo, obsolete.allowdivergenceopt)
    divergencebasecandidates = rebaseobsrevs - rebaseobsskipped

    if divergencebasecandidates and not divergenceok:
        divhashes = (bytes(repo[r]) for r in divergencebasecandidates)
        msg = _(b"this rebase will cause divergences from: %s")
        h = _(
            b"to force the rebase please set "
            b"experimental.evolution.allowdivergence=True"
        )
        raise error.StateError(msg % (b",".join(divhashes),), hint=h)


def successorrevs(unfi, rev):
    """yield revision numbers for successors of rev"""
    assert unfi.filtername is None
    get_rev = unfi.changelog.index.get_rev
    for s in obsutil.allsuccessors(unfi.obsstore, [unfi[rev].node()]):
        r = get_rev(s)
        if r is not None:
            yield r


def defineparents(repo, rev, destmap, state, skipped, obsskipped):
    """Return new parents and optionally a merge base for rev being rebased

    The destination specified by "dest" cannot always be used directly because
    previously rebase result could affect destination. For example,

          D E    rebase -r C+D+E -d B
          |/     C will be rebased to C'
        B C      D's new destination will be C' instead of B
        |/       E's new destination will be C' instead of B
        A

    The new parents of a merge is slightly more complicated. See the comment
    block below.
    """
    # use unfiltered changelog since successorrevs may return filtered nodes
    assert repo.filtername is None
    cl = repo.changelog
    isancestor = cl.isancestorrev

    dest = destmap[rev]
    oldps = repo.changelog.parentrevs(rev)  # old parents
    newps = [nullrev, nullrev]  # new parents
    dests = adjustdest(repo, rev, destmap, state, skipped)
    bases = list(oldps)  # merge base candidates, initially just old parents

    if all(r == nullrev for r in oldps[1:]):
        # For non-merge changeset, just move p to adjusted dest as requested.
        newps[0] = dests[0]
    else:
        # For merge changeset, if we move p to dests[i] unconditionally, both
        # parents may change and the end result looks like "the merge loses a
        # parent", which is a surprise. This is a limit because "--dest" only
        # accepts one dest per src.
        #
        # Therefore, only move p with reasonable conditions (in this order):
        #   1. use dest, if dest is a descendent of (p or one of p's successors)
        #   2. use p's rebased result, if p is rebased (state[p] > 0)
        #
        # Comparing with adjustdest, the logic here does some additional work:
        #   1. decide which parents will not be moved towards dest
        #   2. if the above decision is "no", should a parent still be moved
        #      because it was rebased?
        #
        # For example:
        #
        #     C    # "rebase -r C -d D" is an error since none of the parents
        #    /|    # can be moved. "rebase -r B+C -d D" will move C's parent
        #   A B D  # B (using rule "2."), since B will be rebased.
        #
        # The loop tries to be not rely on the fact that a Mercurial node has
        # at most 2 parents.
        for i, p in enumerate(oldps):
            np = p  # new parent
            if any(isancestor(x, dests[i]) for x in successorrevs(repo, p)):
                np = dests[i]
            elif p in state and state[p] > 0:
                np = state[p]

            # If one parent becomes an ancestor of the other, drop the ancestor
            for j, x in enumerate(newps[:i]):
                if x == nullrev:
                    continue
                if isancestor(np, x):  # CASE-1
                    np = nullrev
                elif isancestor(x, np):  # CASE-2
                    newps[j] = np
                    np = nullrev
                    # New parents forming an ancestor relationship does not
                    # mean the old parents have a similar relationship. Do not
                    # set bases[x] to nullrev.
                    bases[j], bases[i] = bases[i], bases[j]

            newps[i] = np

        # "rebasenode" updates to new p1, and the old p1 will be used as merge
        # base. If only p2 changes, merging using unchanged p1 as merge base is
        # suboptimal. Therefore swap parents to make the merge sane.
        if newps[1] != nullrev and oldps[0] == newps[0]:
            assert len(newps) == 2 and len(oldps) == 2
            newps.reverse()
            bases.reverse()

        # No parent change might be an error because we fail to make rev a
        # descendent of requested dest. This can happen, for example:
        #
        #     C    # rebase -r C -d D
        #    /|    # None of A and B will be changed to D and rebase fails.
        #   A B D
        if set(newps) == set(oldps) and dest not in newps:
            raise error.InputError(
                _(
                    b'cannot rebase %d:%s without '
                    b'moving at least one of its parents'
                )
                % (rev, repo[rev])
            )

    # Source should not be ancestor of dest. The check here guarantees it's
    # impossible. With multi-dest, the initial check does not cover complex
    # cases since we don't have abstractions to dry-run rebase cheaply.
    if any(p != nullrev and isancestor(rev, p) for p in newps):
        raise error.InputError(_(b'source is ancestor of destination'))

    # Check if the merge will contain unwanted changes. That may happen if
    # there are multiple special (non-changelog ancestor) merge bases, which
    # cannot be handled well by the 3-way merge algorithm. For example:
    #
    #     F
    #    /|
    #   D E  # "rebase -r D+E+F -d Z", when rebasing F, if "D" was chosen
    #   | |  # as merge base, the difference between D and F will include
    #   B C  # C, so the rebased F will contain C surprisingly. If "E" was
    #   |/   #  chosen, the rebased F will contain B.
    #   A Z
    #
    # But our merge base candidates (D and E in above case) could still be
    # better than the default (ancestor(F, Z) == null). Therefore still
    # pick one (so choose p1 above).
    if sum(1 for b in set(bases) if b != nullrev and b not in newps) > 1:
        unwanted = [None, None]  # unwanted[i]: unwanted revs if choose bases[i]
        for i, base in enumerate(bases):
            if base == nullrev or base in newps:
                continue
            # Revisions in the side (not chosen as merge base) branch that
            # might contain "surprising" contents
            other_bases = set(bases) - {base}
            siderevs = list(
                repo.revs(b'(%ld %% (%d+%d))', other_bases, base, dest)
            )

            # If those revisions are covered by rebaseset, the result is good.
            # A merge in rebaseset would be considered to cover its ancestors.
            if siderevs:
                rebaseset = [
                    r for r, d in state.items() if d > 0 and r not in obsskipped
