
=over 3

 void  SAVECLEARSV(SV **svp)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<SAVECOMPPAD>
X<SAVECOMPPAD>

save C<PL_comppad> and C<PL_curpad>

=over 3

 void  SAVECOMPPAD()

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<SAVEPADSV>
X<SAVEPADSV>

Save a pad slot (used to restore after an iteration)

=over 3

 void  SAVEPADSV(PADOFFSET po)

=back

=back

=for hackers
Found in file pad.h

=head1 Password and Group access

There are currently no internal API items in Password and Group access

=head1 Paths to system commands

There are currently no internal API items in Paths to system commands

=head1 Prototype information

There are currently no internal API items in Prototype information

=head1 Reference-counted stack manipulation

There are currently no internal API items in Reference-counted stack manipulation

=head1 REGEXP Functions
X<RX_OFFSp>

=over 4

=item C<regnode>

Described in L<perlreguts>.

=back

=for hackers
Found in file pod/perlreguts.pod

=head1 Reports and Formats

There are currently no internal API items in Reports and Formats

=head1 Signals

There are currently no internal API items in Signals

=head1 Site configuration

There are currently no internal API items in Site configuration

=head1 Sockets configuration values

There are currently no internal API items in Sockets configuration values

=head1 Source Filters

There are currently no internal API items in Source Filters

=head1 Stack Manipulation Macros

=over 4

=item C<djSP>
X<djSP>

Declare Just C<SP>.  This is actually identical to C<dSP>, and declares
a local copy of perl's stack pointer, available via the C<SP> macro.
See C<L<perlapi/SP>>.  (Available for backward source code compatibility with
the old (Perl 5.005) thread model.)

=over 3

   djSP();

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<LVRET>
X<LVRET>

True if this op will be the return value of an lvalue subroutine

=back

=for hackers
Found in file pp.h

=over 4

=item C<save_alloc>
X<save_alloc>

Implements L<perlapi/C<SSNEW>> and kin, which should be used instead of this
function.

=over 3

 SSize_t  save_alloc(SSize_t size, I32 pad)

=back

=back

=for hackers
Found in file scope.c

=head1 String Handling

=over 4

=item C<delimcpy_no_escape>
X<delimcpy_no_escape>

Copy a source buffer to a destination buffer, stopping at (but not including)
the first occurrence in the source of the delimiter byte, C<delim>.  The source
is the bytes between S<C<from> and C<from_end> - 1>.  Similarly, the dest is
C<to> up to C<to_end>.

The number of bytes copied is written to C<*retlen>.

Returns the position of C<delim> in the C<from> buffer, but if there is no
such occurrence before C<from_end>, then C<from_end> is returned, and the entire
buffer S<C<from> .. C<from_end> - 1> is copied.

If there is room in the destination available after the copy, an extra
terminating safety C<NUL> byte is appended (not included in the returned
length).

The error case is if the destination buffer is not large enough to accommodate
everything that should be copied.  In this situation, a value larger than
S<C<to_end> - C<to>> is written to C<*retlen>, and as much of the source as
fits will be written to the destination.  Not having room for the safety C<NUL>
is not considered an error.

=over 3

 char *  delimcpy_no_escape(char *to, const char *to_end,
                            const char *from, const char *from_end,
                            const int delim, I32 *retlen)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<my_cxt_init>
X<my_cxt_init>

Implements the L<perlxs/C<MY_CXT_INIT>> macro, which you should use instead.

The first time a module is loaded, the global C<PL_my_cxt_index> is incremented,
and that value is assigned to that module's static C<my_cxt_index> (whose
address is passed as an arg).  Then, for each interpreter this function is
called for, it makes sure a C<void*> slot is available to hang the static data
off, by allocating or extending the interpreter's C<PL_my_cxt_list> array

NOTE: C<my_cxt_init> must be explicitly called as
C<Perl_my_cxt_init>
with an C<aTHX_> parameter.

=over 3

 void *  Perl_my_cxt_init(pTHX_ int *indexp, size_t size)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<quadmath_format_needed>
X<quadmath_format_needed>

C<quadmath_format_needed()> returns true if the C<format> string seems to
contain at least one non-Q-prefixed C<%[efgaEFGA]> format specifier,
or returns false otherwise.

The format specifier detection is not complete printf-syntax detection,
but it should catch most common cases.

If true is returned, those arguments B<should> in theory be processed
with C<quadmath_snprintf()>, but in case there is more than one such
format specifier (see L</quadmath_format_valid>), and if there is
anything else beyond that one (even just a single byte), they
B<cannot> be processed because C<quadmath_snprintf()> is very strict,
accepting only one format spec, and nothing else.
In this case, the code should probably fail.

=over 3

 bool  quadmath_format_needed(const char *format)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<quadmath_format_valid>
X<quadmath_format_valid>

C<quadmath_snprintf()> is very strict about its C<format> string and will
fail, returning -1, if the format is invalid.  It accepts exactly
one format spec.

C<quadmath_format_valid()> checks that the intended single spec looks
sane: begins with C<%>, has only one C<%>, ends with C<[efgaEFGA]>,
and has C<Q> before it.  This is not a full "printf syntax check",
just the basics.

Returns true if it is valid, false if not.

See also L</quadmath_format_needed>.

=over 3

 bool  quadmath_format_valid(const char *format)

=back

=back

=for hackers
Found in file util.c

=head1 SV Flags

=over 4

=item C<SVt_INVLIST>
X<SVt_INVLIST>

Type flag for scalars.  See L<perlapi/svtype>.

=back

=for hackers
Found in file sv.h

=head1 SV Handling

=over 4

=item C<PL_Sv>
X<PL_Sv>

A scratch pad SV for whatever temporary use you need.  Chiefly used as a
fallback by macros on platforms where L<perlapi/PERL_USE_GCC_BRACE_GROUPS>> is
unavailable, and which would otherwise evaluate their SV parameter more than
once.

B<BUT BEWARE>, if this is used in a situation where something that is using it
is in a call stack with something else that is using it, this variable would
get zapped, leading to hard-to-diagnose errors.

=over 3

   PL_Sv

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<sv_add_arena>
X<sv_add_arena>

Given a chunk of memory, link it to the head of the list of arenas,
and split it into a list of free SVs.

=over 3

 void  sv_add_arena(char * const ptr, const U32 size,
                    const U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_2bool>
X<sv_2bool>

This macro is only used by C<sv_true()> or its macro equivalent, and only if
the latter's argument is neither C<SvPOK>, C<SvIOK> nor C<SvNOK>.
It calls C<sv_2bool_flags> with the C<SV_GMAGIC> flag.

=over 3

 bool  sv_2bool(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_2bool_flags>
X<sv_2bool_flags>

This function is only used by C<sv_true()> and friends,  and only if
the latter's argument is neither C<SvPOK>, C<SvIOK> nor C<SvNOK>.  If the flags
contain C<SV_GMAGIC>, then it does an C<mg_get()> first.

=over 3

 bool  sv_2bool_flags(SV *sv, I32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_clean_all>
X<sv_clean_all>

Decrement the refcnt of each remaining SV, possibly triggering a
cleanup.  This function may have to be called multiple times to free
SVs which are in complex self-referential hierarchies.

=over 3

 SSize_t  sv_clean_all()

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_clean_objs>
X<sv_clean_objs>

Attempt to destroy all objects not yet freed.

=over 3

 void  sv_clean_objs()

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_free_arenas>
X<sv_free_arenas>

Deallocate the memory used by all arenas.  Note that all the individual SV
heads and bodies within the arenas must already have been freed.

=over 3

 void  sv_free_arenas()

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_grow>
X<sv_grow>

Expands the character buffer in the SV.  If necessary, uses C<sv_unref> and
upgrades the SV to C<SVt_PV>.  Returns a pointer to the character buffer.
Use the C<SvGROW> wrapper instead.

=over 3

 char *  sv_grow(SV * const sv, STRLEN newlen)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_grow_fresh>
X<sv_grow_fresh>

A cut-down version of sv_grow intended only for when sv is a freshly-minted
SVt_PV, SVt_PVIV, SVt_PVNV, or SVt_PVMG. i.e. sv has the default flags, has
never been any other type, and does not have an existing string. Basically,
just assigns a char buffer and returns a pointer to it.

=over 3

 char *  sv_grow_fresh(SV * const sv, STRLEN newlen)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_newref>
X<sv_newref>

Increment an SV's reference count.  Use the C<SvREFCNT_inc()> wrapper
instead.

=over 3

 SV *  sv_newref(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_2num>
X<sv_2num>

NOTE: C<sv_2num> is B<experimental> and may change or be
removed without notice.

Return an SV with the numeric value of the source SV, doing any necessary
reference or overload conversion.  The caller is expected to have handled
get-magic already.

=over 3

 SV *  sv_2num(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_pv>
X<sv_pv>

Use the C<SvPV_nolen> macro instead

=over 3

 char *  sv_pv(SV *sv)

=back

=back

=for hackers
Found in file mathoms.c

=over 4

=item C<sv_pvbyte>
X<sv_pvbyte>

Use C<SvPVbyte_nolen> instead.

=over 3

 char *  sv_pvbyte(SV *sv)

=back

=back

=for hackers
Found in file mathoms.c

=over 4

=item C<sv_pvbyten_force>
X<sv_pvbyten_force>

The backend for the C<SvPVbytex_force> macro.  Always use the macro
instead.  If the SV cannot be downgraded from UTF-8, this croaks.

=over 3

 char *  sv_pvbyten_force(SV * const sv, STRLEN * const lp)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_2pvbyte_nolen>
X<sv_2pvbyte_nolen>

Return a pointer to the byte-encoded representation of the SV.
May cause the SV to be downgraded from UTF-8 as a side-effect.

Usually accessed via the C<SvPVbyte_nolen> macro.

=over 3

 char *  sv_2pvbyte_nolen(SV *sv)

=back

=back

=for hackers
Found in file mathoms.c

=over 4

=item C<sv_pvn_force>
X<sv_pvn_force>

Get a sensible string out of the SV somehow.
A private implementation of the C<SvPV_force> macro for compilers which
can't cope with complex macro expressions.  Always use the macro instead.

=over 3

 char *  sv_pvn_force(SV *sv, STRLEN *lp)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_2pv_nolen>
X<sv_2pv_nolen>

Like C<sv_2pv()>, but doesn't return the length too.  You should usually
use the macro wrapper C<SvPV_nolen(sv)> instead.

=over 3

 char *  sv_2pv_nolen(SV *sv)

=back

=back

=for hackers
Found in file mathoms.c

=over 4

=item C<sv_pvutf8n_force>
X<sv_pvutf8n_force>

The backend for the C<SvPVutf8x_force> macro.  Always use the macro
instead.

=over 3

 char *  sv_pvutf8n_force(SV * const sv, STRLEN * const lp)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_2pvutf8_nolen>
X<sv_2pvutf8_nolen>

Return a pointer to the UTF-8-encoded representation of the SV.
May cause the SV to be upgraded to UTF-8 as a side-effect.

Usually accessed via the C<SvPVutf8_nolen> macro.

=over 3

 char *  sv_2pvutf8_nolen(SV *sv)

=back

=back

=for hackers
Found in file mathoms.c

=over 4

=item C<sv_pvutf8>
X<sv_pvutf8>

Use the C<SvPVutf8_nolen> macro instead

=over 3

 char *  sv_pvutf8(SV *sv)

=back

=back

=for hackers
Found in file mathoms.c

=over 4

=item C<sv_tainted>
X<sv_tainted>

Test an SV for taintedness.  Use C<SvTAINTED> instead.

=over 3

 bool  sv_tainted(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvTHINKFIRST>
X<SvTHINKFIRST>

A quick flag check to see whether an C<sv> should be passed to C<sv_force_normal>
to be "downgraded" before C<SvIVX> or C<SvPVX> can be modified directly.

For example, if your scalar is a reference and you want to modify the C<SvIVX>
slot, you can't just do C<SvROK_off>, as that will leak the referent.

This is used internally by various sv-modifying functions, such as
C<sv_setsv>, C<sv_setiv> and C<sv_pvn_force>.

One case that this does not handle is a gv without SvFAKE set.  After

    if (SvTHINKFIRST(gv)) sv_force_normal(gv);

it will still be a gv.

C<SvTHINKFIRST> sometimes produces false positives.  In those cases
C<sv_force_normal> does nothing.

=over 3

 U32  SvTHINKFIRST(SV *sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_true>
X<sv_true>

Returns true if the SV has a true value by Perl's rules.
Use the C<SvTRUE> macro instead, which may call C<sv_true()> or may
instead use an in-line version.

=over 3

 I32  sv_true(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_untaint>
X<sv_untaint>

Untaint an SV.  Use C<SvTAINTED_off> instead.

=over 3

 void  sv_untaint(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=head1 Tainting

=over 4

=item C<sv_taint>
X<sv_taint>

Taint an SV.  Use C<SvTAINTED_on> instead.

=over 3

 void  sv_taint(SV *sv)

=back

=back

=for hackers
Found in file mathoms.c

=over 4

=item C<TAINT>
X<TAINT>

If we aren't in taint checking mode, do nothing;
otherwise indicate to L</C<TAINT_set>> and L</C<TAINT_PROPER>> that some
unspecified element is tainted.

=over 3

 void  TAINT()

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<TAINT_ENV>
X<TAINT_ENV>

Looks at several components of L<C<%ENV>|perlvar/%ENV> for taintedness, and
calls L</C<taint_proper>> if any are tainted.  The components it searches are
things like C<$PATH>.

=over 3

 void  TAINT_ENV

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<taint_env>
X<taint_env>

Implements the L</TAINT_ENV> macro, which you should generally use instead.

=over 3

 void  taint_env()

=back

=back

=for hackers
Found in file taint.c

=over 4

=item C<TAINT_get>
X<TAINT_get>

Returns a boolean as to whether some element is tainted or not.

=over 3

 bool  TAINT_get()

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<TAINT_IF>
X<TAINT_IF>

If C<c> evaluates to true, call L</C<TAINT>> to indicate that something is
tainted; otherwise do nothing.

=over 3

 void  TAINT_IF(bool c)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<TAINTING_get>
X<TAINTING_get>

Returns a boolean as to whether taint checking is enabled or not.

=over 3

 bool  TAINTING_get()

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<TAINTING_set>
X<TAINTING_set>

Turn taint checking mode off/on

=over 3

 void  TAINTING_set(bool s)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<TAINT_NOT>
X<TAINT_NOT>

Remove any taintedness previously set by, I<e.g.>, C<TAINT>.

=over 3

 void  TAINT_NOT()

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<TAINT_PROPER>
X<TAINT_PROPER>

If no element is tainted, do nothing;
otherwise output a message (containing C<s>) that indicates there is a
tainting violation.  If such violations are fatal, it croaks.

=over 3

 void  TAINT_PROPER(const char * s)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<taint_proper>
X<taint_proper>

Implements the L</TAINT_PROPER> macro, which you should generally use instead.

=over 3

 void  taint_proper(const char *f, const char * const s)

=back

=back

=for hackers
Found in file taint.c

=over 4

=item C<TAINT_set>
X<TAINT_set>

If C<s> is true, L</C<TAINT_get>> returns true;
If C<s> is false, L</C<TAINT_get>> returns false;

