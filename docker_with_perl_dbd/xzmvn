this was the only versioned directory in $sitelib.)

=item C<api_versionstring>

From F<patchlevel.U>:

This variable combines api_revision, api_version, and
api_subversion in a format such as 5.6.1 (or 5_6_1) suitable
for use as a directory name.  This is filesystem dependent.

=item C<ar>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the ar program.  After Configure runs,
the value is reset to a plain C<ar> and is not useful.

=item C<archlib>

From F<archlib.U>:

This variable holds the name of the directory in which the user wants
to put architecture-dependent public library files for $package.
It is most often a local directory such as F</usr/local/lib>.
Programs using this variable must be prepared to deal
with filename expansion.

=item C<archlibexp>

From F<archlib.U>:

This variable is the same as the archlib variable, but is
filename expanded at configuration time, for convenient use.

=item C<archname>

From F<archname.U>:

This variable is a short name to characterize the current
architecture.  It is used mainly to construct the default archlib.

=item C<archname64>

From F<use64bits.U>:

This variable is used for the 64-bitness part of $archname.

=item C<archobjs>

From F<Unix.U>:

This variable defines any additional objects that must be linked
in with the program on this architecture.  On unix, it is usually
empty.  It is typically used to include emulations of unix calls
or other facilities.  For perl on F<OS/2>, for example, this would
include F<os2/os2.obj>.

=item C<asctime_r_proto>

From F<d_asctime_r.U>:

This variable encodes the prototype of asctime_r.
It is zero if d_asctime_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_asctime_r
is defined.

=item C<awk>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the awk program.  After Configure runs,
the value is reset to a plain C<awk> and is not useful.

=back

=head2 b

=over 4

=item C<baserev>

From F<baserev.U>:

The base revision level of this package, from the F<.package> file.

=item C<bash>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<bin>

From F<bin.U>:

This variable holds the name of the directory in which the user wants
to put publicly executable images for the package in question.  It
is most often a local directory such as F</usr/local/bin>. Programs using
this variable must be prepared to deal with F<~name> substitution.

=item C<bin_ELF>

From F<dlsrc.U>:

This variable saves the result from configure if generated binaries
are in C<ELF> format. Only set to defined when the test has actually
been performed, and the result was positive.

=item C<binexp>

From F<bin.U>:

This is the same as the bin variable, but is filename expanded at
configuration time, for use in your makefiles.

=item C<bison>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the bison program.  After Configure runs,
the value is reset to a plain C<bison> and is not useful.

=item C<byacc>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the byacc program.  After Configure runs,
the value is reset to a plain C<byacc> and is not useful.

=item C<byteorder>

From F<byteorder.U>:

This variable holds the byte order in a C<UV>. In the following,
larger digits indicate more significance.  The variable byteorder
is either 4321 on a big-endian machine, or 1234 on a little-endian,
or 87654321 on a Cray ... or 3412 with weird order !

=back

=head2 c

=over 4

=item C<c>

From F<n.U>:

This variable contains the \c string if that is what causes the echo
command to suppress newline.  Otherwise it is null.  Correct usage is
$echo $n "prompt for a question: $c".

=item C<castflags>

From F<d_castneg.U>:

This variable contains a flag that precise difficulties the
compiler has casting odd floating values to unsigned long:
0 = ok
1 = couldn't cast < 0
2 = couldn't cast >= 0x80000000
4 = couldn't cast in argument expression list

=item C<cat>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the cat program.  After Configure runs,
the value is reset to a plain C<cat> and is not useful.

=item C<cc>

From F<cc.U>:

This variable holds the name of a command to execute a C compiler which
can resolve multiple global references that happen to have the same
name.  Usual values are C<cc> and C<gcc>.
Fervent C<ANSI> compilers may be called C<c89>.  C<AIX> has xlc.

=item C<cccdlflags>

From F<dlsrc.U>:

This variable contains any special flags that might need to be
passed with C<cc -c> to compile modules to be used to create a shared
library that will be used for dynamic loading.  For hpux, this
should be +z.  It is up to the makefile to use it.

=item C<ccdlflags>

From F<dlsrc.U>:

This variable contains any special flags that might need to be
passed to cc to link with a shared library for dynamic loading.
It is up to the makefile to use it.  For sunos 4.1, it should
be empty.

=item C<ccflags>

From F<ccflags.U>:

This variable contains any additional C compiler flags desired by
the user.  It is up to the Makefile to use this.

=item C<ccflags_uselargefiles>

From F<uselfs.U>:

This variable contains the compiler flags needed by large file builds
and added to ccflags by hints files.

=item C<ccname>

From F<Checkcc.U>:

This can set either by hints files or by Configure.  If using
gcc, this is gcc, and if not, usually equal to cc, unimpressive, no?
Some platforms, however, make good use of this by storing the
flavor of the C compiler being used here.  For example if using
the Sun WorkShop suite, ccname will be C<workshop>.

=item C<ccsymbols>

From F<Cppsym.U>:

The variable contains the symbols defined by the C compiler alone.
The symbols defined by cpp or by cc when it calls cpp are not in
this list, see cppsymbols and cppccsymbols.
The list is a space-separated list of symbol=value tokens.

=item C<ccversion>

From F<Checkcc.U>:

This can set either by hints files or by Configure.  If using
a (non-gcc) vendor cc, this variable may contain a version for
the compiler.

=item C<cf_by>

From F<cf_who.U>:

Login name of the person who ran the Configure script and answered the
questions. This is used to tag both F<config.sh> and F<config_h.SH>.

=item C<cf_email>

From F<cf_email.U>:

Electronic mail address of the person who ran Configure. This can be
used by units that require the user's e-mail, like F<MailList.U>.

=item C<cf_time>

From F<cf_who.U>:

Holds the output of the C<date> command when the configuration file was
produced. This is used to tag both F<config.sh> and F<config_h.SH>.

=item C<charbits>

From F<charsize.U>:

This variable contains the value of the C<CHARBITS> symbol, which
indicates to the C program how many bits there are in a character.

=item C<charsize>

From F<charsize.U>:

This variable contains the value of the C<CHARSIZE> symbol, which
indicates to the C program how many bytes there are in a character.

=item C<chgrp>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<chmod>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the chmod program.  After Configure runs,
the value is reset to a plain C<chmod> and is not useful.

=item C<chown>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<clocktype>

From F<d_times.U>:

This variable holds the type returned by times(). It can be long,
or clock_t on C<BSD> sites (in which case <sys/types.h> should be
included).

=item C<comm>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the comm program.  After Configure runs,
the value is reset to a plain C<comm> and is not useful.

=item C<compiler_warning>

From F<compiler_warning.U>:

This variable holds the command to check if the file specified as a
parameter contains a compiler warning

=item C<compress>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<config_arg0>

From F<Options.U>:

This variable contains the string used to invoke the Configure
command, as reported by the shell in the $0 variable.

=item C<config_argc>

From F<Options.U>:

This variable contains the number of command-line arguments
passed to Configure, as reported by the shell in the $# variable.
The individual arguments are stored as variables config_arg1,
config_arg2, etc.

=item C<config_args>

From F<Options.U>:

This variable contains a single string giving the command-line
arguments passed to Configure.	Spaces within arguments,
quotes, and escaped characters are not correctly preserved.
To reconstruct the command line, you must assemble the individual
command line pieces, given in config_arg[0-9]*.

=item C<contains>

From F<contains.U>:

This variable holds the command to do a grep with a proper return
status.  On most sane systems it is simply C<grep>.  On insane systems
it is a grep followed by a cat followed by a test.  This variable
is primarily for the use of other Configure units.

=item C<cp>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the cp program.  After Configure runs,
the value is reset to a plain C<cp> and is not useful.

=item C<cpio>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<cpp>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the cpp program.  After Configure runs,
the value is reset to a plain C<cpp> and is not useful.

=item C<cpp_stuff>

From F<cpp_stuff.U>:

This variable contains an identification of the concatenation mechanism
used by the C preprocessor.

=item C<cppccsymbols>

From F<Cppsym.U>:

The variable contains the symbols defined by the C compiler
when it calls cpp.  The symbols defined by the cc alone or cpp
alone are not in this list, see ccsymbols and cppsymbols.
The list is a space-separated list of symbol=value tokens.

=item C<cppflags>

From F<ccflags.U>:

This variable holds the flags that will be passed to the C pre-
processor. It is up to the Makefile to use it.

=item C<cpplast>

From F<cppstdin.U>:

This variable has the same functionality as cppminus, only it applies
to cpprun and not cppstdin.

=item C<cppminus>

From F<cppstdin.U>:

This variable contains the second part of the string which will invoke
the C preprocessor on the standard input and produce to standard
output.  This variable will have the value C<-> if cppstdin needs
a minus to specify standard input, otherwise the value is "".

=item C<cpprun>

From F<cppstdin.U>:

This variable contains the command which will invoke a C preprocessor
on standard input and put the output to stdout. It is guaranteed not
to be a wrapper and may be a null string if no preprocessor can be
made directly available. This preprocessor might be different from the
one used by the C compiler. Don't forget to append cpplast after the
preprocessor options.

=item C<cppstdin>

From F<cppstdin.U>:

This variable contains the command which will invoke the C
preprocessor on standard input and put the output to stdout.
It is primarily used by other Configure units that ask about
preprocessor symbols.

=item C<cppsymbols>

From F<Cppsym.U>:

The variable contains the symbols defined by the C preprocessor
alone.  The symbols defined by cc or by cc when it calls cpp are
not in this list, see ccsymbols and cppccsymbols.
The list is a space-separated list of symbol=value tokens.

=item C<crypt_r_proto>

From F<d_crypt_r.U>:

This variable encodes the prototype of crypt_r.
It is zero if d_crypt_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_crypt_r
is defined.

=item C<cryptlib>

From F<d_crypt.U>:

This variable holds -lcrypt or the path to a F<libcrypt.a> archive if
the crypt() function is not defined in the standard C library. It is
up to the Makefile to use this.

=item C<csh>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the csh program.  After Configure runs,
the value is reset to a plain C<csh> and is not useful.

=item C<ctermid_r_proto>

From F<d_ctermid_r.U>:

This variable encodes the prototype of ctermid_r.
It is zero if d_ctermid_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_ctermid_r
is defined.

=item C<ctime_r_proto>

From F<d_ctime_r.U>:

This variable encodes the prototype of ctime_r.
It is zero if d_ctime_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_ctime_r
is defined.

=back

=head2 d

=over 4

=item C<d_Gconvert>

From F<d_gconvert.U>:

This variable holds what Gconvert is defined as to convert
floating point numbers into strings.  By default, Configure
sets C<this> macro to use the first of gconvert, gcvt, or sprintf
that pass sprintf-%g-like behavior tests.  If perl is using
long doubles, the macro uses the first of the following
functions that pass Configure's tests: qgcvt, sprintf (if
Configure knows how to make sprintf format long doubles--see
sPRIgldbl), gconvert, gcvt, and sprintf (casting to double).
The gconvert_preference and gconvert_ld_preference variables
can be used to alter Configure's preferences, for doubles and
long doubles, respectively.  If present, they contain a
space-separated list of one or more of the above function
names in the order they should be tried.

d_Gconvert may be set to override Configure with a platform-
specific function.  If this function expects a double, a
different value may need to be set by the F<uselongdouble.cbu>
call-back unit so that long doubles can be formatted without
loss of precision.

=item C<d_PRIEUldbl>

From F<longdblfio.U>:

This variable conditionally defines the PERL_PRIfldbl symbol, which
indicates that stdio has a symbol to print long doubles.
The C<U> in the name is to separate this from d_PRIeldbl so that even
case-blind systems can see the difference.

=item C<d_PRIFUldbl>

From F<longdblfio.U>:

This variable conditionally defines the PERL_PRIfldbl symbol, which
indicates that stdio has a symbol to print long doubles.
The C<U> in the name is to separate this from d_PRIfldbl so that even
case-blind systems can see the difference.

=item C<d_PRIGUldbl>

From F<longdblfio.U>:

This variable conditionally defines the PERL_PRIfldbl symbol, which
indicates that stdio has a symbol to print long doubles.
The C<U> in the name is to separate this from d_PRIgldbl so that even
case-blind systems can see the difference.

=item C<d_PRIXU64>

From F<quadfio.U>:

This variable conditionally defines the PERL_PRIXU64 symbol, which
indicates that stdio has a symbol to print 64-bit hExADECimAl numbers.
The C<U> in the name is to separate this from d_PRIx64 so that even
case-blind systems can see the difference.

=item C<d_PRId64>

From F<quadfio.U>:

This variable conditionally defines the PERL_PRId64 symbol, which
indicates that stdio has a symbol to print 64-bit decimal numbers.

=item C<d_PRIeldbl>

From F<longdblfio.U>:

This variable conditionally defines the PERL_PRIfldbl symbol, which
indicates that stdio has a symbol to print long doubles.

=item C<d_PRIfldbl>

From F<longdblfio.U>:

This variable conditionally defines the PERL_PRIfldbl symbol, which
indicates that stdio has a symbol to print long doubles.

=item C<d_PRIgldbl>

From F<longdblfio.U>:

This variable conditionally defines the PERL_PRIfldbl symbol, which
indicates that stdio has a symbol to print long doubles.

=item C<d_PRIi64>

From F<quadfio.U>:

This variable conditionally defines the PERL_PRIi64 symbol, which
indicates that stdio has a symbol to print 64-bit decimal numbers.

=item C<d_PRIo64>

From F<quadfio.U>:

This variable conditionally defines the PERL_PRIo64 symbol, which
indicates that stdio has a symbol to print 64-bit octal numbers.

=item C<d_PRIu64>

From F<quadfio.U>:

This variable conditionally defines the PERL_PRIu64 symbol, which
indicates that stdio has a symbol to print 64-bit unsigned decimal
numbers.

=item C<d_PRIx64>

From F<quadfio.U>:

This variable conditionally defines the PERL_PRIx64 symbol, which
indicates that stdio has a symbol to print 64-bit hexadecimal numbers.

=item C<d_SCNfldbl>

From F<longdblfio.U>:

This variable conditionally defines the PERL_PRIfldbl symbol, which
indicates that stdio has a symbol to scan long doubles.

=item C<d__fwalk>

From F<d__fwalk.U>:

This variable conditionally defines C<HAS__FWALK> if _fwalk() is
available to apply a function to all the file handles.

=item C<d_accept4>

From F<d_accept4.U>:

This variable conditionally defines HAS_ACCEPT4 if accept4() is
available to accept socket connections.

=item C<d_access>

From F<d_access.U>:

This variable conditionally defines C<HAS_ACCESS> if the access() system
call is available to check for access permissions using real IDs.

=item C<d_accessx>

From F<d_accessx.U>:

This variable conditionally defines the C<HAS_ACCESSX> symbol, which
indicates to the C program that the accessx() routine is available.

=item C<d_acosh>

From F<d_acosh.U>:

This variable conditionally defines the C<HAS_ACOSH> symbol, which
indicates to the C program that the acosh() routine is available.

=item C<d_aintl>

From F<d_aintl.U>:

This variable conditionally defines the C<HAS_AINTL> symbol, which
indicates to the C program that the aintl() routine is available.
If copysignl is also present we can emulate modfl.

=item C<d_alarm>

From F<d_alarm.U>:

This variable conditionally defines the C<HAS_ALARM> symbol, which
indicates to the C program that the alarm() routine is available.

=item C<d_archlib>

From F<archlib.U>:

This variable conditionally defines C<ARCHLIB> to hold the pathname
of architecture-dependent library files for $package.  If
$archlib is the same as $privlib, then this is set to undef.

=item C<d_asctime64>

From F<d_timefuncs64.U>:

This variable conditionally defines the HAS_ASCTIME64 symbol, which
indicates to the C program that the asctime64 () routine is available.

=item C<d_asctime_r>

From F<d_asctime_r.U>:

This variable conditionally defines the C<HAS_ASCTIME_R> symbol,
which indicates to the C program that the asctime_r()
routine is available.

=item C<d_asinh>

From F<d_asinh.U>:

This variable conditionally defines the C<HAS_ASINH> symbol, which
indicates to the C program that the asinh() routine is available.

=item C<d_atanh>

From F<d_atanh.U>:

This variable conditionally defines the C<HAS_ATANH> symbol, which
indicates to the C program that the atanh() routine is available.

=item C<d_atolf>

From F<atolf.U>:

This variable conditionally defines the C<HAS_ATOLF> symbol, which
indicates to the C program that the atolf() routine is available.

=item C<d_atoll>

From F<atoll.U>:

This variable conditionally defines the C<HAS_ATOLL> symbol, which
indicates to the C program that the atoll() routine is available.

=item C<d_attribute_always_inline>

From F<d_attribut.U>:

This variable conditionally defines C<HASATTRIBUTE_ALWAYS_INLINE>,
which indicates that the C compiler can know that certain
functions should always be inlined.

=item C<d_attribute_deprecated>

From F<d_attribut.U>:

This variable conditionally defines C<HASATTRIBUTE_DEPRECATED>, which
indicates that C<GCC> can handle the attribute for marking deprecated
APIs

=item C<d_attribute_format>

From F<d_attribut.U>:

This variable conditionally defines C<HASATTRIBUTE_FORMAT>, which
indicates the C compiler can check for printf-like formats.

=item C<d_attribute_malloc>

From F<d_attribut.U>:

This variable conditionally defines C<HASATTRIBUTE_MALLOC>, which
indicates the C compiler can understand functions as having
malloc-like semantics.

=item C<d_attribute_nonnull>

From F<d_attribut.U>:

This variable conditionally defines C<HASATTRIBUTE_NONNULL>, which
indicates that the C compiler can know that certain arguments
must not be C<NULL>, and will check accordingly at compile time.

=item C<d_attribute_noreturn>

From F<d_attribut.U>:

This variable conditionally defines C<HASATTRIBUTE_NORETURN>, which
indicates that the C compiler can know that certain functions
are guaranteed never to return.

=item C<d_attribute_pure>

From F<d_attribut.U>:

This variable conditionally defines C<HASATTRIBUTE_PURE>, which
indicates that the C compiler can know that certain functions
are C<pure> functions, meaning that they have no side effects, and
only rely on function input F<and/or> global data for their results.

=item C<d_attribute_unused>

From F<d_attribut.U>:

This variable conditionally defines C<HASATTRIBUTE_UNUSED>, which
indicates that the C compiler can know that certain variables
and arguments may not always be used, and to not throw warnings
if they don't get used.

=item C<d_attribute_visibility>

From F<d_attribut.U>:

This variable conditionally defines the C<HASATTRIBUTE_VISIBILITY> symbol,
and indicates different C<GCC> attribute visibility

=item C<d_attribute_warn_unused_result>

From F<d_attribut.U>:

This variable conditionally defines
C<HASATTRIBUTE_WARN_UNUSED_RESULT>, which indicates that the C
compiler can know that certain functions have a return values
that must not be ignored, such as malloc() or open().

=item C<d_backtrace>

From F<d_backtrace.U>:

This variable conditionally defines the C<HAS_BACKTRACE> symbol, which
indicates to the C program that the backtrace() routine is available
to get a stack trace.

=item C<d_bsd>

From F<Guess.U>:

This symbol conditionally defines the symbol C<BSD> when running on a
C<BSD> system.

=item C<d_bsdgetpgrp>

From F<d_getpgrp.U>:

This variable conditionally defines C<USE_BSD_GETPGRP> if
getpgrp needs one arguments whereas C<USG> one needs none.

=item C<d_bsdsetpgrp>

From F<d_setpgrp.U>:

This variable conditionally defines C<USE_BSD_SETPGRP> if
setpgrp needs two arguments whereas C<USG> one needs none.
See also d_setpgid for a C<POSIX> interface.

=item C<d_builtin_add_overflow>

From F<d_builtin_overflow.U>:

This variable conditionally defines C<HAS_BUILTIN_ADD_OVERFLOW>, which
indicates that the compiler supports __builtin_add_overflow(x,y,&z)
for safely adding x and y into z while checking for overflow.

=item C<d_builtin_choose_expr>

From F<d_builtin.U>:

This conditionally defines C<HAS_BUILTIN_CHOOSE_EXPR>, which
indicates that the compiler supports __builtin_choose_expr(x,y,z).
This built-in function is analogous to the C<x?y:z> operator in C,
except that the expression returned has its type unaltered by
promotion rules. Also, the built-in function does not evaluate
the expression that was not chosen.

=item C<d_builtin_expect>

From F<d_builtin.U>:

This conditionally defines C<HAS_BUILTIN_EXPECT>, which indicates
that the compiler supports __builtin_expect(exp,c).  You may use
__builtin_expect to provide the compiler with branch prediction
information.

=item C<d_builtin_mul_overflow>

From F<d_builtin_overflow.U>:

This variable conditionally defines C<HAS_BUILTIN_MUL_OVERFLOW>, which
indicates that the compiler supports __builtin_mul_overflow(x,y,&z)
for safely multiplying x and y into z while checking for overflow.

=item C<d_builtin_sub_overflow>

From F<d_builtin_overflow.U>:

This variable conditionally defines C<HAS_BUILTIN_SUB_OVERFLOW>, which
indicates that the compiler supports __builtin_sub_overflow(x,y,&z)
for safely subtracting y from x into z while checking for overflow.

=item C<d_c99_variadic_macros>

From F<d_c99_variadic.U>:

This variable conditionally defines the HAS_C99_VARIADIC_MACROS
symbol, which indicates to the C program that C99 variadic macros
are available.

=item C<d_casti32>

From F<d_casti32.U>:

This variable conditionally defines CASTI32, which indicates
whether the C compiler can cast large floats to 32-bit ints.

=item C<d_castneg>

From F<d_castneg.U>:

This variable conditionally defines C<CASTNEG>, which indicates
whether the C compiler can cast negative float to unsigned.

=item C<d_cbrt>

From F<d_cbrt.U>:

This variable conditionally defines the C<HAS_CBRT> symbol, which
indicates to the C program that the cbrt() (cube root) function
is available.

=item C<d_chown>

From F<d_chown.U>:

This variable conditionally defines the C<HAS_CHOWN> symbol, which
indicates to the C program that the chown() routine is available.

=item C<d_chroot>

From F<d_chroot.U>:

This variable conditionally defines the C<HAS_CHROOT> symbol, which
indicates to the C program that the chroot() routine is available.

=item C<d_chsize>

From F<d_chsize.U>:

This variable conditionally defines the C<CHSIZE> symbol, which
indicates to the C program that the chsize() routine is available
to truncate files.  You might need a -lx to get this routine.

=item C<d_class>

From F<d_class.U>:

This variable conditionally defines the C<HAS_CLASS> symbol, which
indicates to the C program that the class() routine is available.

=item C<d_clearenv>

From F<d_clearenv.U>:

This variable conditionally defines the C<HAS_CLEARENV> symbol, which
indicates to the C program that the clearenv () routine is available.

=item C<d_closedir>

From F<d_closedir.U>:

This variable conditionally defines C<HAS_CLOSEDIR> if closedir() is
available.

=item C<d_cmsghdr_s>

From F<d_cmsghdr_s.U>:

This variable conditionally defines the C<HAS_STRUCT_CMSGHDR> symbol,
which indicates that the struct cmsghdr is supported.

=item C<d_copysign>

From F<d_copysign.U>:

This variable conditionally defines the C<HAS_COPYSIGN> symbol, which
indicates to the C program that the copysign() routine is available.

=item C<d_copysignl>

From F<d_copysignl.U>:

This variable conditionally defines the C<HAS_COPYSIGNL> symbol, which
indicates to the C program that the copysignl() routine is available.
If aintl is also present we can emulate modfl.

=item C<d_cplusplus>

From F<d_cplusplus.U>:

This variable conditionally defines the C<USE_CPLUSPLUS> symbol, which
indicates that a C++ compiler was used to compiled Perl and will be
used to compile extensions.

=item C<d_crypt>

From F<d_crypt.U>:

This variable conditionally defines the C<CRYPT> symbol, which
indicates to the C program that the crypt() routine is available
to encrypt passwords and the like.

=item C<d_crypt_r>

From F<d_crypt_r.U>:
