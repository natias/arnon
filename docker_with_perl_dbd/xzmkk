	0x1F201,
	0x1F210,
	0x1F21A,
	0x1F21B,
	0x1F22F,
	0x1F230,
	0x1F232,
	0x1F23B,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F3FB,
	0x1F400,
	0x1F53E,
	0x1F546,
	0x1F650,
	0x1F680,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F93B,
	0x1F93C,
	0x1F946,
	0x1F947,
	0x1FB00,
	0x1FC00,
	0x1FFFE
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_EXTPICT_invlist[] = {  /* for EBCDIC 1047 */
	157,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAF,
	0xB0,
	0xB4,
	0xB5,
	0x203C,
	0x203D,
	0x2049,
	0x204A,
	0x2122,
	0x2123,
	0x2139,
	0x213A,
	0x2194,
	0x219A,
	0x21A9,
	0x21AB,
	0x231A,
	0x231C,
	0x2328,
	0x2329,
	0x2388,
	0x2389,
	0x23CF,
	0x23D0,
	0x23E9,
	0x23F4,
	0x23F8,
	0x23FB,
	0x24C2,
	0x24C3,
	0x25AA,
	0x25AC,
	0x25B6,
	0x25B7,
	0x25C0,
	0x25C1,
	0x25FB,
	0x25FF,
	0x2600,
	0x2606,
	0x2607,
	0x2613,
	0x2614,
	0x2686,
	0x2690,
	0x2706,
	0x2708,
	0x2713,
	0x2714,
	0x2715,
	0x2716,
	0x2717,
	0x271D,
	0x271E,
	0x2721,
	0x2722,
	0x2728,
	0x2729,
	0x2733,
	0x2735,
	0x2744,
	0x2745,
	0x2747,
	0x2748,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x2757,
	0x2758,
	0x2763,
	0x2768,
	0x2795,
	0x2798,
	0x27A1,
	0x27A2,
	0x27B0,
	0x27B1,
	0x27BF,
	0x27C0,
	0x2934,
	0x2936,
	0x2B05,
	0x2B08,
	0x2B1B,
	0x2B1D,
	0x2B50,
	0x2B51,
	0x2B55,
	0x2B56,
	0x3030,
	0x3031,
	0x303D,
	0x303E,
	0x3297,
	0x3298,
	0x3299,
	0x329A,
	0x1F000,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F172,
	0x1F17E,
	0x1F180,
	0x1F18E,
	0x1F18F,
	0x1F191,
	0x1F19B,
	0x1F1AD,
	0x1F1E6,
	0x1F201,
	0x1F210,
	0x1F21A,
	0x1F21B,
	0x1F22F,
	0x1F230,
	0x1F232,
	0x1F23B,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F3FB,
	0x1F400,
	0x1F53E,
	0x1F546,
	0x1F650,
	0x1F680,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F93B,
	0x1F93C,
	0x1F946,
	0x1F947,
	0x1FB00,
	0x1FC00,
	0x1FFFE
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_EXTPICT_invlist[] = {  /* for EBCDIC 037 */
	157,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAF,
	0xB0,
	0xB4,
	0xB5,
	0x203C,
	0x203D,
	0x2049,
	0x204A,
	0x2122,
	0x2123,
	0x2139,
	0x213A,
	0x2194,
	0x219A,
	0x21A9,
	0x21AB,
	0x231A,
	0x231C,
	0x2328,
	0x2329,
	0x2388,
	0x2389,
	0x23CF,
	0x23D0,
	0x23E9,
	0x23F4,
	0x23F8,
	0x23FB,
	0x24C2,
	0x24C3,
	0x25AA,
	0x25AC,
	0x25B6,
	0x25B7,
	0x25C0,
	0x25C1,
	0x25FB,
	0x25FF,
	0x2600,
	0x2606,
	0x2607,
	0x2613,
	0x2614,
	0x2686,
	0x2690,
	0x2706,
	0x2708,
	0x2713,
	0x2714,
	0x2715,
	0x2716,
	0x2717,
	0x271D,
	0x271E,
	0x2721,
	0x2722,
	0x2728,
	0x2729,
	0x2733,
	0x2735,
	0x2744,
	0x2745,
	0x2747,
	0x2748,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x2757,
	0x2758,
	0x2763,
	0x2768,
	0x2795,
	0x2798,
	0x27A1,
	0x27A2,
	0x27B0,
	0x27B1,
	0x27BF,
	0x27C0,
	0x2934,
	0x2936,
	0x2B05,
	0x2B08,
	0x2B1B,
	0x2B1D,
	0x2B50,
	0x2B51,
	0x2B55,
	0x2B56,
	0x3030,
	0x3031,
	0x303D,
	0x303E,
	0x3297,
	0x3298,
	0x3299,
	0x329A,
	0x1F000,
	0x1F100,
	0x1F10D,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16C,
	0x1F172,
	0x1F17E,
	0x1F180,
	0x1F18E,
	0x1F18F,
	0x1F191,
	0x1F19B,
	0x1F1AD,
	0x1F1E6,
	0x1F201,
	0x1F210,
	0x1F21A,
	0x1F21B,
	0x1F22F,
	0x1F230,
	0x1F232,
	0x1F23B,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F3FB,
	0x1F400,
	0x1F53E,
	0x1F546,
	0x1F650,
	0x1F680,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D5,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F900,
	0x1F90C,
	0x1F93B,
	0x1F93C,
	0x1F946,
	0x1F947,
	0x1FB00,
	0x1FC00,
	0x1FFFE
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_GCB__CN_invlist[] = {  /* for ASCII/Latin1 */
	38,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA,
	0xB,
	0xD,
	0xE,
	0x20,
	0x7F,
	0xA0,
	0xAD,
	0xAE,
	0x61C,
	0x61D,
	0x180E,
	0x180F,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF0,
	0xFFFC,
	0x13430,
	0x13440,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0000,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xE1000
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_GCB__CN_invlist[] = {  /* for EBCDIC 1047 */
	38,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD,
	0xE,
	0x15,
	0x16,
	0x40,
	0xCA,
	0xCB,
	0xFF,
	0x100,
	0x61C,
	0x61D,
	0x180E,
	0x180F,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF0,
	0xFFFC,
	0x13430,
	0x13440,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0000,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xE1000
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_GCB__CN_invlist[] = {  /* for EBCDIC 037 */
	38,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD,
	0xE,
	0x25,
	0x26,
	0x40,
	0xCA,
	0xCB,
	0xFF,
	0x100,
	0x61C,
	0x61D,
	0x180E,
	0x180F,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF0,
	0xFFFC,
	0x13430,
	0x13440,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0000,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xE1000
};

#  endif	/* EBCDIC 037 */

static const UV UNI_GCB__EX_invlist[] = {  /* for all charsets */
	729,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x7FD,
	0x7FE,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x898,
	0x8A0,
	0x8CA,
	0x8E2,
	0x8E3,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9BF,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0x9FE,
	0x9FF,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB55,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBBF,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC01,
	0xC04,
	0xC05,
	0xC3C,
	0xC3D,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC2,
	0xCC3,
	0xCC6,
	0xCC7,
	0xCCC,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD3F,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD81,
	0xD82,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD0,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDDF,
	0xDE0,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEC8,
	0xECF,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1734,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ACF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1E00,
	0x200C,
	0x200D,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA82C,
	0xA82D,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA8FF,
	0xA900,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BE,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAAF7,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFF9E,
	0xFFA0,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
