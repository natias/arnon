    urlutil,
)

if pycompat.TYPE_CHECKING:
    from typing import Any, List, Tuple, Union

    # keep pyflakes happy
    assert all((Any, List, Tuple, Union))


class STARTTLS(smtplib.SMTP):
    """Derived class to verify the peer certificate for STARTTLS.

    This class allows to pass any keyword arguments to SSL socket creation.
    """

    def __init__(self, ui, host=None, **kwargs):
        smtplib.SMTP.__init__(self, **kwargs)
        self._ui = ui
        self._host = host

    def starttls(self, keyfile=None, certfile=None):
        if not self.has_extn("starttls"):
            msg = b"STARTTLS extension not supported by server"
            raise smtplib.SMTPException(msg)
        (resp, reply) = self.docmd("STARTTLS")
        if resp == 220:
            self.sock = sslutil.wrapsocket(
                self.sock,
                keyfile,
                certfile,
                ui=self._ui,
                serverhostname=self._host,
            )
            self.file = self.sock.makefile("rb")
            self.helo_resp = None
            self.ehlo_resp = None
            self.esmtp_features = {}
            self.does_esmtp = 0
        return (resp, reply)


class SMTPS(smtplib.SMTP):
    """Derived class to verify the peer certificate for SMTPS.

    This class allows to pass any keyword arguments to SSL socket creation.
    """

    def __init__(self, ui, keyfile=None, certfile=None, host=None, **kwargs):
        self.keyfile = keyfile
        self.certfile = certfile
        smtplib.SMTP.__init__(self, **kwargs)
        self._host = host
        self.default_port = smtplib.SMTP_SSL_PORT
        self._ui = ui

    def _get_socket(self, host, port, timeout):
        if self.debuglevel > 0:
            self._ui.debug(b'connect: %r\n' % ((host, port),))
        new_socket = socket.create_connection((host, port), timeout)
        new_socket = sslutil.wrapsocket(
            new_socket,
            self.keyfile,
            self.certfile,
            ui=self._ui,
            serverhostname=self._host,
        )
        self.file = new_socket.makefile('rb')
        return new_socket


def _pyhastls():
    # type: () -> bool
    """Returns true iff Python has TLS support, false otherwise."""
    try:
        import ssl

        getattr(ssl, 'HAS_TLS', False)
        return True
    except ImportError:
        return False


def _smtp(ui):
    '''build an smtp connection and return a function to send mail'''
    local_hostname = ui.config(b'smtp', b'local_hostname')
    tls = ui.config(b'smtp', b'tls')
    # backward compatible: when tls = true, we use starttls.
    starttls = tls == b'starttls' or stringutil.parsebool(tls)
    smtps = tls == b'smtps'
    if (starttls or smtps) and not _pyhastls():
        raise error.Abort(_(b"can't use TLS: Python SSL support not installed"))
    mailhost = ui.config(b'smtp', b'host')
    if not mailhost:
        raise error.Abort(_(b'smtp.host not configured - cannot send mail'))
    if smtps:
        ui.note(_(b'(using smtps)\n'))
        s = SMTPS(ui, local_hostname=local_hostname, host=mailhost)
    elif starttls:
        s = STARTTLS(ui, local_hostname=local_hostname, host=mailhost)
    else:
        s = smtplib.SMTP(local_hostname=local_hostname)
    if smtps:
        defaultport = 465
    else:
        defaultport = 25
    mailport = urlutil.getport(ui.config(b'smtp', b'port', defaultport))
    ui.note(_(b'sending mail: smtp host %s, port %d\n') % (mailhost, mailport))
    s.connect(host=mailhost, port=mailport)
    if starttls:
        ui.note(_(b'(using starttls)\n'))
        s.ehlo()
        s.starttls()
        s.ehlo()
    if starttls or smtps:
        ui.note(_(b'(verifying remote certificate)\n'))
        sslutil.validatesocket(s.sock)

    try:
        _smtp_login(ui, s, mailhost, mailport)
    except smtplib.SMTPException as inst:
        raise error.Abort(stringutil.forcebytestr(inst))

    def send(sender, recipients, msg):
        try:
            return s.sendmail(sender, recipients, msg)
        except smtplib.SMTPRecipientsRefused as inst:
            recipients = [r[1] for r in inst.recipients.values()]
            raise error.Abort(b'\n' + b'\n'.join(recipients))
        except smtplib.SMTPException as inst:
            raise error.Abort(stringutil.forcebytestr(inst))

    return send


def _smtp_login(ui, smtp, mailhost, mailport):
    """A hook for the keyring extension to perform the actual SMTP login.

    An already connected SMTP object of the proper type is provided, based on
    the current configuration.  The host and port to which the connection was
    established are provided for accessibility, since the SMTP object doesn't
    provide an accessor.  ``smtplib.SMTPException`` is raised on error.
    """
    username = ui.config(b'smtp', b'username')
    password = ui.config(b'smtp', b'password')
    if username:
        if password:
            password = encoding.strfromlocal(password)
        else:
            password = ui.getpass()
            if password is not None:
                password = encoding.strfromlocal(password)
    if username and password:
        ui.note(_(b'(authenticating to mail server as %s)\n') % username)
        username = encoding.strfromlocal(username)
        smtp.login(username, password)


def _sendmail(ui, sender, recipients, msg):
    '''send mail using sendmail.'''
    program = ui.config(b'email', b'method')

    def stremail(x):
        return procutil.shellquote(stringutil.email(encoding.strtolocal(x)))

    cmdline = b'%s -f %s %s' % (
        program,
        stremail(sender),
        b' '.join(map(stremail, recipients)),
    )
    ui.note(_(b'sending mail: %s\n') % cmdline)
    fp = procutil.popen(cmdline, b'wb')
    fp.write(util.tonativeeol(msg))
    ret = fp.close()
    if ret:
        raise error.Abort(
            b'%s %s'
            % (
                os.path.basename(procutil.shellsplit(program)[0]),
                procutil.explainexit(ret),
            )
        )


def _mbox(mbox, sender, recipients, msg):
    '''write mails to mbox'''
    # TODO: use python mbox library for proper locking
    with open(mbox, b'ab+') as fp:
        # Should be time.asctime(), but Windows prints 2-characters day
        # of month instead of one. Make them print the same thing.
        date = time.strftime('%a %b %d %H:%M:%S %Y', time.localtime())
        fp.write(
            b'From %s %s\n'
            % (encoding.strtolocal(sender), encoding.strtolocal(date))
        )
        fp.write(msg)
        fp.write(b'\n\n')


def connect(ui, mbox=None):
    """make a mail connection. return a function to send mail.
    call as sendmail(sender, list-of-recipients, msg)."""
    if mbox:
        open(mbox, b'wb').close()
        return lambda s, r, m: _mbox(mbox, s, r, m)
    if ui.config(b'email', b'method') == b'smtp':
        return _smtp(ui)
    return lambda s, r, m: _sendmail(ui, s, r, m)


def sendmail(ui, sender, recipients, msg, mbox=None):
    send = connect(ui, mbox=mbox)
    return send(sender, recipients, msg)


def validateconfig(ui):
    '''determine if we have enough config data to try sending email.'''
    method = ui.config(b'email', b'method')
    if method == b'smtp':
        if not ui.config(b'smtp', b'host'):
            raise error.Abort(
                _(
                    b'smtp specified as email transport, '
                    b'but no smtp host configured'
                )
            )
    else:
        command = procutil.shellsplit(method)
        command = command[0] if command else b''
        if not (command and procutil.findexe(command)):
            raise error.Abort(
                _(b'%r specified as email transport, but not in PATH') % command
            )


def codec2iana(cs):
    # type: (str) -> str
    ''' '''
    cs = email.charset.Charset(cs).input_charset.lower()

    # "latin1" normalizes to "iso8859-1", standard calls for "iso-8859-1"
    if cs.startswith("iso") and not cs.startswith("iso-"):
        return "iso-" + cs[3:]
    return cs


def mimetextpatch(s, subtype='plain', display=False):
    # type: (bytes, str, bool) -> email.message.Message
    """Return MIME message suitable for a patch.
    Charset will be detected by first trying to decode as us-ascii, then utf-8,
    and finally the global encodings. If all those fail, fall back to
    ISO-8859-1, an encoding with that allows all byte sequences.
    Transfer encodings will be used if necessary."""

    cs = [
        'us-ascii',
        'utf-8',
        pycompat.sysstr(encoding.encoding),
        pycompat.sysstr(encoding.fallbackencoding),
    ]
    if display:
        cs = ['us-ascii']
    for charset in cs:
        try:
            s.decode(charset)
            return mimetextqp(s, subtype, codec2iana(charset))
        except UnicodeDecodeError:
            pass

    return mimetextqp(s, subtype, "iso-8859-1")


def mimetextqp(body, subtype, charset):
    # type: (bytes, str, str) -> email.message.Message
    """Return MIME message.
    Quoted-printable transfer encoding will be used if necessary.
    """
    cs = email.charset.Charset(charset)
    msg = email.message.Message()
    msg.set_type('text/' + subtype)

    for line in body.splitlines():
        if len(line) > 950:
            cs.body_encoding = email.charset.QP
            break

    # On Python 2, this simply assigns a value. Python 3 inspects
    # body and does different things depending on whether it has
    # encode() or decode() attributes. We can get the old behavior
    # if we pass a str and charset is None and we call set_charset().
    # But we may get into  trouble later due to Python attempting to
    # encode/decode using the registered charset (or attempting to
    # use ascii in the absence of a charset).
    msg.set_payload(body, cs)

    return msg


def _charsets(ui):
    # type: (Any) -> List[str]
    '''Obtains charsets to send mail parts not containing patches.'''
    charsets = [
        pycompat.sysstr(cs.lower())
        for cs in ui.configlist(b'email', b'charsets')
    ]
    fallbacks = [
        pycompat.sysstr(encoding.fallbackencoding.lower()),
        pycompat.sysstr(encoding.encoding.lower()),
        'utf-8',
    ]
    for cs in fallbacks:  # find unique charsets while keeping order
        if cs not in charsets:
            charsets.append(cs)
    return [cs for cs in charsets if not cs.endswith('ascii')]


def _encode(ui, s, charsets):
    # type: (Any, bytes, List[str]) -> Tuple[bytes, str]
    """Returns (converted) string, charset tuple.
    Finds out best charset by cycling through sendcharsets in descending
    order. Tries both encoding and fallbackencoding for input. Only as
    last resort send as is in fake ascii.
    Caveat: Do not use for mail parts containing patches!"""
    sendcharsets = charsets or _charsets(ui)
    if not isinstance(s, bytes):
        # We have unicode data, which we need to try and encode to
        # some reasonable-ish encoding. Try the encodings the user
        # wants, and fall back to garbage-in-ascii.
        for ocs in sendcharsets:
            try:
                return s.encode(ocs), ocs
            except UnicodeEncodeError:
                pass
            except LookupError:
                ui.warn(
                    _(b'ignoring invalid sendcharset: %s\n')
                    % pycompat.sysbytes(ocs)
                )
        else:
            # Everything failed, ascii-armor what we've got and send it.
            return s.encode('ascii', 'backslashreplace'), 'us-ascii'
    # We have a bytes of unknown encoding. We'll try and guess a valid
    # encoding, falling back to pretending we had ascii even though we
    # know that's wrong.
    try:
        s.decode('ascii')
    except UnicodeDecodeError:
        for ics in (encoding.encoding, encoding.fallbackencoding):
            ics = pycompat.sysstr(ics)
            try:
                u = s.decode(ics)
            except UnicodeDecodeError:
                continue
            for ocs in sendcharsets:
                try:
                    return u.encode(ocs), ocs
                except UnicodeEncodeError:
                    pass
                except LookupError:
                    ui.warn(
                        _(b'ignoring invalid sendcharset: %s\n')
                        % pycompat.sysbytes(ocs)
                    )
    # if ascii, or all conversion attempts fail, send (broken) ascii
    return s, 'us-ascii'


def headencode(ui, s, charsets=None, display=False):
    # type: (Any, Union[bytes, str], List[str], bool) -> str
    '''Returns RFC-2047 compliant header from given string.'''
    if not display:
        # split into words?
        s, cs = _encode(ui, s, charsets)
        return email.header.Header(s, cs).encode()
    return encoding.strfromlocal(s)


def _addressencode(ui, name, addr, charsets=None):
    # type: (Any, str, str, List[str]) -> str
    addr = encoding.strtolocal(addr)
    name = headencode(ui, name, charsets)
    try:
        acc, dom = addr.split(b'@')
        acc.decode('ascii')
        dom = dom.decode(pycompat.sysstr(encoding.encoding)).encode('idna')
        addr = b'%s@%s' % (acc, dom)
    except UnicodeDecodeError:
        raise error.Abort(_(b'invalid email address: %s') % addr)
    except ValueError:
        try:
            # too strict?
            addr.decode('ascii')
        except UnicodeDecodeError:
            raise error.Abort(_(b'invalid local address: %s') % addr)
    return email.utils.formataddr((name, encoding.strfromlocal(addr)))


def addressencode(ui, address, charsets=None, display=False):
    # type: (Any, bytes, List[str], bool) -> str
    '''Turns address into RFC-2047 compliant header.'''
    if display or not address:
        return encoding.strfromlocal(address or b'')
    name, addr = email.utils.parseaddr(encoding.strfromlocal(address))
    return _addressencode(ui, name, addr, charsets)


def addrlistencode(ui, addrs, charsets=None, display=False):
    # type: (Any, List[bytes], List[str], bool) -> List[str]
    """Turns a list of addresses into a list of RFC-2047 compliant headers.
    A single element of input list may contain multiple addresses, but output
    always has one address per item"""
    straddrs = []
    for a in addrs:
        assert isinstance(a, bytes), '%r unexpectedly not a bytestr' % a
        straddrs.append(encoding.strfromlocal(a))
    if display:
        return [a.strip() for a in straddrs if a.strip()]

    result = []
    for name, addr in email.utils.getaddresses(straddrs):
        if name or addr:
            r = _addressencode(ui, name, addr, charsets)
            result.append(r)
    return result


def mimeencode(ui, s, charsets=None, display=False):
    # type: (Any, bytes, List[str], bool) -> email.message.Message
    """creates mime text object, encodes it if needed, and sets
    charset and transfer-encoding accordingly."""
    cs = 'us-ascii'
    if not display:
        s, cs = _encode(ui, s, charsets)
    return mimetextqp(s, 'plain', cs)


Generator = email.generator.BytesGenerator


def parse(fp):
    # type: (Any) -> email.message.Message
    ep = email.parser.Parser()
    # disable the "universal newlines" mode, which isn't binary safe.
    # I have no idea if ascii/surrogateescape is correct, but that's
    # what the standard Python email parser does.
    fp = io.TextIOWrapper(
        fp, encoding='ascii', errors='surrogateescape', newline=chr(10)
    )
    try:
        return ep.parse(fp)
    finally:
        fp.detach()


def parsebytes(data):
    # type: (bytes) -> email.message.Message
    ep = email.parser.BytesParser()
    return ep.parsebytes(data)


def headdecode(s):
    # type: (Union[email.header.Header, bytes]) -> bytes
    '''Decodes RFC-2047 header'''
    uparts = []
    for part, charset in email.header.decode_header(s):
        if charset is not None:
            try:
                uparts.append(part.decode(charset))
                continue
            except (UnicodeDecodeError, LookupError):
                pass
        # On Python 3, decode_header() may return either bytes or unicode
        # depending on whether the header has =?<charset>? or not
        if isinstance(part, type(u'')):
            uparts.append(part)
            continue
        try:
            uparts.append(part.decode('UTF-8'))
            continue
        except UnicodeDecodeError:
            pass
        uparts.append(part.decode('ISO-8859-1'))
    return encoding.unitolocal(u' '.join(uparts))
                                                                                                                                                                                                                                                             usr/lib/python3/dist-packages/mercurial/manifest.py                                                 0000644 0000000 0000000 00000226131 14355257011 021121  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # manifest.py - manifest revision class for mercurial
#
# Copyright 2005-2007 Olivia Mackall <olivia@selenic.com>
#
# This software may be used and distributed according to the terms of the
# GNU General Public License version 2 or any later version.


import heapq
import itertools
import struct
import weakref

from .i18n import _
from .node import (
    bin,
    hex,
    nullrev,
)
from .pycompat import getattr
from . import (
    encoding,
    error,
    match as matchmod,
    mdiff,
    pathutil,
    policy,
    pycompat,
    revlog,
    util,
)
from .interfaces import (
    repository,
    util as interfaceutil,
)
from .revlogutils import (
    constants as revlog_constants,
)

parsers = policy.importmod('parsers')
propertycache = util.propertycache

# Allow tests to more easily test the alternate path in manifestdict.fastdelta()
FASTDELTA_TEXTDIFF_THRESHOLD = 1000


def _parse(nodelen, data):
    # This method does a little bit of excessive-looking
    # precondition checking. This is so that the behavior of this
    # class exactly matches its C counterpart to try and help
    # prevent surprise breakage for anyone that develops against
    # the pure version.
    if data and data[-1:] != b'\n':
        raise ValueError(b'Manifest did not end in a newline.')
    prev = None
    for l in data.splitlines():
        if prev is not None and prev > l:
            raise ValueError(b'Manifest lines not in sorted order.')
        prev = l
        f, n = l.split(b'\0')
        nl = len(n)
        flags = n[-1:]
        if flags in _manifestflags:
            n = n[:-1]
            nl -= 1
        else:
            flags = b''
        if nl != 2 * nodelen:
            raise ValueError(b'Invalid manifest line')

        yield f, bin(n), flags


def _text(it):
    files = []
    lines = []
    for f, n, fl in it:
        files.append(f)
        # if this is changed to support newlines in filenames,
        # be sure to check the templates/ dir again (especially *-raw.tmpl)
        lines.append(b"%s\0%s%s\n" % (f, hex(n), fl))

    _checkforbidden(files)
    return b''.join(lines)


class lazymanifestiter:
    def __init__(self, lm):
        self.pos = 0
        self.lm = lm

    def __iter__(self):
        return self

    def next(self):
        try:
            data, pos = self.lm._get(self.pos)
        except IndexError:
            raise StopIteration
        if pos == -1:
            self.pos += 1
            return data[0]
        self.pos += 1
        zeropos = data.find(b'\x00', pos)
        return data[pos:zeropos]

    __next__ = next


class lazymanifestiterentries:
    def __init__(self, lm):
        self.lm = lm
        self.pos = 0

    def __iter__(self):
        return self

    def next(self):
        try:
            data, pos = self.lm._get(self.pos)
        except IndexError:
            raise StopIteration
        if pos == -1:
            self.pos += 1
            return data
        zeropos = data.find(b'\x00', pos)
        nlpos = data.find(b'\n', pos)
        if zeropos == -1 or nlpos == -1 or nlpos < zeropos:
            raise error.StorageError(b'Invalid manifest line')
        flags = data[nlpos - 1 : nlpos]
        if flags in _manifestflags:
            hlen = nlpos - zeropos - 2
        else:
            hlen = nlpos - zeropos - 1
            flags = b''
        if hlen != 2 * self.lm._nodelen:
            raise error.StorageError(b'Invalid manifest line')
        hashval = unhexlify(
            data, self.lm.extrainfo[self.pos], zeropos + 1, hlen
        )
        self.pos += 1
        return (data[pos:zeropos], hashval, flags)

    __next__ = next


def unhexlify(data, extra, pos, length):
    s = bin(data[pos : pos + length])
    if extra:
        s += chr(extra & 0xFF)
    return s


def _cmp(a, b):
    return (a > b) - (a < b)


_manifestflags = {b'', b'l', b't', b'x'}


class _lazymanifest:
    """A pure python manifest backed by a byte string.  It is supplimented with
    internal lists as it is modified, until it is compacted back to a pure byte
    string.

    ``data`` is the initial manifest data.

    ``positions`` is a list of offsets, one per manifest entry.  Positive
    values are offsets into ``data``, negative values are offsets into the
    ``extradata`` list.  When an entry is removed, its entry is dropped from
    ``positions``.  The values are encoded such that when walking the list and
    indexing into ``data`` or ``extradata`` as appropriate, the entries are
    sorted by filename.

    ``extradata`` is a list of (key, hash, flags) for entries that were added or
    modified since the manifest was created or compacted.
    """

    def __init__(
        self,
        nodelen,
        data,
        positions=None,
        extrainfo=None,
        extradata=None,
        hasremovals=False,
    ):
        self._nodelen = nodelen
        if positions is None:
            self.positions = self.findlines(data)
            self.extrainfo = [0] * len(self.positions)
            self.data = data
            self.extradata = []
            self.hasremovals = False
        else:
            self.positions = positions[:]
            self.extrainfo = extrainfo[:]
            self.extradata = extradata[:]
            self.data = data
            self.hasremovals = hasremovals

    def findlines(self, data):
        if not data:
            return []
        pos = data.find(b"\n")
        if pos == -1 or data[-1:] != b'\n':
            raise ValueError(b"Manifest did not end in a newline.")
        positions = [0]
        prev = data[: data.find(b'\x00')]
        while pos < len(data) - 1 and pos != -1:
            positions.append(pos + 1)
            nexts = data[pos + 1 : data.find(b'\x00', pos + 1)]
            if nexts < prev:
                raise ValueError(b"Manifest lines not in sorted order.")
            prev = nexts
            pos = data.find(b"\n", pos + 1)
        return positions

    def _get(self, index):
        # get the position encoded in pos:
        #   positive number is an index in 'data'
        #   negative number is in extrapieces
        pos = self.positions[index]
        if pos >= 0:
            return self.data, pos
        return self.extradata[-pos - 1], -1

    def _getkey(self, pos):
        if pos >= 0:
            return self.data[pos : self.data.find(b'\x00', pos + 1)]
        return self.extradata[-pos - 1][0]

    def bsearch(self, key):
        first = 0
        last = len(self.positions) - 1

        while first <= last:
            midpoint = (first + last) // 2
            nextpos = self.positions[midpoint]
            candidate = self._getkey(nextpos)
            r = _cmp(key, candidate)
            if r == 0:
                return midpoint
            else:
                if r < 0:
                    last = midpoint - 1
                else:
                    first = midpoint + 1
        return -1

    def bsearch2(self, key):
        # same as the above, but will always return the position
        # done for performance reasons
        first = 0
        last = len(self.positions) - 1

        while first <= last:
            midpoint = (first + last) // 2
            nextpos = self.positions[midpoint]
            candidate = self._getkey(nextpos)
            r = _cmp(key, candidate)
            if r == 0:
                return (midpoint, True)
            else:
                if r < 0:
                    last = midpoint - 1
                else:
                    first = midpoint + 1
        return (first, False)

    def __contains__(self, key):
        return self.bsearch(key) != -1

    def __getitem__(self, key):
        if not isinstance(key, bytes):
            raise TypeError(b"getitem: manifest keys must be a bytes.")
        needle = self.bsearch(key)
        if needle == -1:
            raise KeyError
        data, pos = self._get(needle)
        if pos == -1:
            return (data[1], data[2])
        zeropos = data.find(b'\x00', pos)
        nlpos = data.find(b'\n', zeropos)
        assert 0 <= needle <= len(self.positions)
        assert len(self.extrainfo) == len(self.positions)
        if zeropos == -1 or nlpos == -1 or nlpos < zeropos:
            raise error.StorageError(b'Invalid manifest line')
        hlen = nlpos - zeropos - 1
        flags = data[nlpos - 1 : nlpos]
        if flags in _manifestflags:
            hlen -= 1
        else:
            flags = b''
        if hlen != 2 * self._nodelen:
            raise error.StorageError(b'Invalid manifest line')
        hashval = unhexlify(data, self.extrainfo[needle], zeropos + 1, hlen)
        return (hashval, flags)

    def __delitem__(self, key):
        needle, found = self.bsearch2(key)
        if not found:
            raise KeyError
        cur = self.positions[needle]
        self.positions = self.positions[:needle] + self.positions[needle + 1 :]
        self.extrainfo = self.extrainfo[:needle] + self.extrainfo[needle + 1 :]
        if cur >= 0:
            # This does NOT unsort the list as far as the search functions are
            # concerned, as they only examine lines mapped by self.positions.
            self.data = self.data[:cur] + b'\x00' + self.data[cur + 1 :]
            self.hasremovals = True

    def __setitem__(self, key, value):
        if not isinstance(key, bytes):
            raise TypeError(b"setitem: manifest keys must be a byte string.")
        if not isinstance(value, tuple) or len(value) != 2:
            raise TypeError(
                b"Manifest values must be a tuple of (node, flags)."
            )
        hashval = value[0]
        if not isinstance(hashval, bytes) or len(hashval) not in (20, 32):
            raise TypeError(b"node must be a 20-byte or 32-byte byte string")
        flags = value[1]
        if not isinstance(flags, bytes) or len(flags) > 1:
            raise TypeError(b"flags must a 0 or 1 byte string, got %r", flags)
        needle, found = self.bsearch2(key)
        if found:
            # put the item
            pos = self.positions[needle]
            if pos < 0:
                self.extradata[-pos - 1] = (key, hashval, value[1])
            else:
                # just don't bother
                self.extradata.append((key, hashval, value[1]))
                self.positions[needle] = -len(self.extradata)
        else:
            # not found, put it in with extra positions
            self.extradata.append((key, hashval, value[1]))
            self.positions = (
                self.positions[:needle]
                + [-len(self.extradata)]
                + self.positions[needle:]
            )
            self.extrainfo = (
                self.extrainfo[:needle] + [0] + self.extrainfo[needle:]
            )

    def copy(self):
        # XXX call _compact like in C?
        return _lazymanifest(
            self._nodelen,
            self.data,
            self.positions,
            self.extrainfo,
            self.extradata,
            self.hasremovals,
        )

    def _compact(self):
        # hopefully not called TOO often
        if len(self.extradata) == 0 and not self.hasremovals:
            return
        l = []
        i = 0
        offset = 0
        self.extrainfo = [0] * len(self.positions)
        while i < len(self.positions):
            if self.positions[i] >= 0:
                cur = self.positions[i]
                last_cut = cur

                # Collect all contiguous entries in the buffer at the current
                # offset, breaking out only for added/modified items held in
                # extradata, or a deleted line prior to the next position.
                while True:
                    self.positions[i] = offset
                    i += 1
                    if i == len(self.positions) or self.positions[i] < 0:
                        break

                    # A removed file has no positions[] entry, but does have an
                    # overwritten first byte.  Break out and find the end of the
                    # current good entry/entries if there is a removed file
                    # before the next position.
                    if (
                        self.hasremovals
                        and self.data.find(b'\n\x00', cur, self.positions[i])
                        != -1
                    ):
                        break

                    offset += self.positions[i] - cur
                    cur = self.positions[i]
                end_cut = self.data.find(b'\n', cur)
                if end_cut != -1:
                    end_cut += 1
                offset += end_cut - cur
                l.append(self.data[last_cut:end_cut])
            else:
                while i < len(self.positions) and self.positions[i] < 0:
                    cur = self.positions[i]
                    t = self.extradata[-cur - 1]
                    l.append(self._pack(t))
                    self.positions[i] = offset
                    # Hashes are either 20 bytes (old sha1s) or 32
                    # bytes (new non-sha1).
                    hlen = 20
                    if len(t[1]) > 25:
                        hlen = 32
                    if len(t[1]) > hlen:
                        self.extrainfo[i] = ord(t[1][hlen + 1])
                    offset += len(l[-1])
                    i += 1
        self.data = b''.join(l)
        self.hasremovals = False
        self.extradata = []

    def _pack(self, d):
        n = d[1]
        assert len(n) in (20, 32)
        return d[0] + b'\x00' + hex(n) + d[2] + b'\n'

    def text(self):
        self._compact()
        return self.data

    def diff(self, m2, clean=False):
        '''Finds changes between the current manifest and m2.'''
        # XXX think whether efficiency matters here
        diff = {}

        for fn, e1, flags in self.iterentries():
            if fn not in m2:
                diff[fn] = (e1, flags), (None, b'')
            else:
                e2 = m2[fn]
                if (e1, flags) != e2:
                    diff[fn] = (e1, flags), e2
                elif clean:
                    diff[fn] = None

        for fn, e2, flags in m2.iterentries():
            if fn not in self:
                diff[fn] = (None, b''), (e2, flags)

        return diff

    def iterentries(self):
        return lazymanifestiterentries(self)

    def iterkeys(self):
        return lazymanifestiter(self)

    def __iter__(self):
        return lazymanifestiter(self)

    def __len__(self):
        return len(self.positions)

    def filtercopy(self, filterfn):
        # XXX should be optimized
        c = _lazymanifest(self._nodelen, b'')
        for f, n, fl in self.iterentries():
            if filterfn(f):
                c[f] = n, fl
        return c


try:
    _lazymanifest = parsers.lazymanifest
except AttributeError:
    pass


@interfaceutil.implementer(repository.imanifestdict)
class manifestdict:
    def __init__(self, nodelen, data=b''):
        self._nodelen = nodelen
        self._lm = _lazymanifest(nodelen, data)

    def __getitem__(self, key):
        return self._lm[key][0]

    def find(self, key):
        return self._lm[key]

    def __len__(self):
        return len(self._lm)

    def __nonzero__(self):
        # nonzero is covered by the __len__ function, but implementing it here
        # makes it easier for extensions to override.
        return len(self._lm) != 0

    __bool__ = __nonzero__

    def __setitem__(self, key, node):
        self._lm[key] = node, self.flags(key)

    def __contains__(self, key):
        if key is None:
            return False
        return key in self._lm

    def __delitem__(self, key):
        del self._lm[key]

    def __iter__(self):
        return self._lm.__iter__()

    def iterkeys(self):
        return self._lm.iterkeys()

    def keys(self):
        return list(self.iterkeys())

    def filesnotin(self, m2, match=None):
