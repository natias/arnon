    # returns: value corresponding to openssl's STACK_OF(X509_NAME) structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_client_CA_list.html>

=item * get_current_cipher

Returns the cipher actually used.

    my $rv = Net::SSLeay::get_current_cipher($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: value corresponding to openssl's SSL_CIPHER structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_current_cipher.html>

=item * get_default_timeout

Returns the default timeout value assigned to SSL_SESSION objects negotiated for the protocol valid for $ssl.

    my $rv = Net::SSLeay::get_default_timeout($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: (long) timeout in seconds

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_default_timeout.html>

=item * get_error

Returns a result code for a preceding call to C<connect>, C<accept>, C<do_handshake>, C<read>, C<peek> or C<write> on $ssl.

    my $rv = Net::SSLeay::get_error($ssl, $ret);
    # $ssl - value corresponding to openssl's SSL structure
    # $ret - return value of preceding TLS/SSL I/O operation
    #
    # returns: result code, which is one of the following values:
    #  0 - SSL_ERROR_NONE
    #  1 - SSL_ERROR_SSL
    #  2 - SSL_ERROR_WANT_READ
    #  3 - SSL_ERROR_WANT_WRITE
    #  4 - SSL_ERROR_WANT_X509_LOOKUP
    #  5 - SSL_ERROR_SYSCALL
    #  6 - SSL_ERROR_ZERO_RETURN
    #  7 - SSL_ERROR_WANT_CONNECT
    #  8 - SSL_ERROR_WANT_ACCEPT

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_error.html>

=item * get_ex_data

Is used to retrieve the information for $idx from $ssl.

    my $rv = Net::SSLeay::get_ex_data($ssl, $idx);
    # $ssl - value corresponding to openssl's SSL structure
    # $idx - (integer) index for application specific data
    #
    # returns: pointer to ???

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_ex_new_index.html>

=item * set_ex_data

Is used to store application data at $data for $idx into the $ssl object.

    my $rv = Net::SSLeay::set_ex_data($ssl, $idx, $data);
    # $ssl - value corresponding to openssl's SSL structure
    # $idx - (integer) ???
    # $data - (pointer) ???
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_ex_new_index.html>

=item * get_ex_new_index

Is used to register a new index for application specific data.

    my $rv = Net::SSLeay::get_ex_new_index($argl, $argp, $new_func, $dup_func, $free_func);
    # $argl - (long) ???
    # $argp - (pointer) ???
    # $new_func - function pointer ??? (CRYPTO_EX_new *)
    # $dup_func - function pointer ??? (CRYPTO_EX_dup *)
    # $free_func - function pointer ??? (CRYPTO_EX_free *)
    #
    # returns: (integer) ???

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_ex_new_index.html>

=item * get_fd

Returns the file descriptor which is linked to $ssl.

    my $rv = Net::SSLeay::get_fd($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: file descriptor (>=0) or -1 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_fd.html>

=item * get_finished

Obtains the latest 'Finished' message sent to the peer. Return value
is zero if there's been no Finished message yet. Default count is
2*EVP_MAX_MD_SIZE that is long enough for all possible Finish
messages. If you supply a non-default count, the resulting return
value may be longer than returned buf's length.

    my $rv = Net::SSLeay::get_finished($ssl, $buf, $count);
    # $ssl - value corresponding to openssl's SSL structure
    # $buf - buffer where the returned data will be stored
    # $count - [optional] max size of return data - default is 2*EVP_MAX_MD_SIZE
    #
    # returns: length of latest Finished message

=item * get_peer_finished

Obtains the latest 'Finished' message expected from the
peer. Parameters and return value are similar to get_finished().

    my $rv = Net::SSLeay::get_peer_finished($ssl, $buf, $count);
    # $ssl - value corresponding to openssl's SSL structure
    # $buf - buffer where the returned data will be stored
    # $count - [optional] max size of return data - default is 2*EVP_MAX_MD_SIZE
    #
    # returns: length of latest Finished message

=item * get_keyblock_size

Gets the length of the TLS keyblock. Look for 'key_block' in TLS 1.2
and earlier TLS RFCs. Consider using TLS exporter interface defined by
RFC 5705 instead of creating your own keying material exporter.

B<NOTE:> Does not exactly correspond to any low level API function. Intended for EAP-FAST.

    my $rv = Net::SSLeay::get_keyblock_size($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: keyblock size, -1 on error

=item * get_mode

Returns the mode (bitmask) set for $ssl.

    my $rv = Net::SSLeay::get_mode($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: mode (bitmask)

To decode the return value (bitmask) see documentation for L</CTX_get_mode>.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_mode.html>

=item * set_mode

Adds the mode set via bitmask in $mode to $ssl. Options already set before are not cleared.

    my $rv = Net::SSLeay::set_mode($ssl, $mode);
    # $ssl - value corresponding to openssl's SSL structure
    # $mode - mode (bitmask)
    #
    # returns: the new mode bitmask after adding $mode

For $mode bitmask details see L</CTX_get_mode>.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_mode.html>

=item * get_options

Returns the options (bitmask) set for $ssl.

    my $rv = Net::SSLeay::get_options($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: options (bitmask)

To decode the return value (bitmask) see documentation for L</CTX_get_options>.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_options.html>

=item * set_options

Adds the options set via bitmask in $options to $ssl. Options already set before are not cleared!

    Net::SSLeay::set_options($ssl, $options);
    # $ssl - value corresponding to openssl's SSL structure
    # $options - options (bitmask)
    #
    # returns: the new options bitmask after adding $options

For $options bitmask details see L</CTX_get_options>.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_options.html>

=item * get_peer_certificate

Get the X509 certificate of the peer.

    my $rv = Net::SSLeay::get_peer_certificate($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: value corresponding to openssl's X509 structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_peer_certificate.html>

=item * get_peer_cert_chain

Get the certificate chain of the peer as an array of X509 structures.

    my @chain = Net::SSLeay::get_peer_cert_chain($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: list of X509 structures

Example:

    my @chain = Net::SSLeay::get_peer_cert_chain($ssl);
    foreach my $x509 (@chain) {
        print Net::SSLeay::X509_NAME_oneline(Net::SSLeay::X509_get_subject_name($cert)) . "\n";
    }

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_peer_cert_chain.html>

=item * get_quiet_shutdown

Returns the 'quiet shutdown' setting of ssl.

    my $rv = Net::SSLeay::get_quiet_shutdown($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: (integer) current 'quiet shutdown' value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_quiet_shutdown.html>

=item * get_rbio

Get 'read' BIO linked to an SSL object $ssl.

    my $rv = Net::SSLeay::get_rbio($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: value corresponding to openssl's BIO structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_rbio.html>

=item * get_read_ahead

    my $rv = Net::SSLeay::get_read_ahead($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: (integer) read_ahead value

=item * set_read_ahead

    Net::SSLeay::set_read_ahead($ssl, $val);
    # $ssl - value corresponding to openssl's SSL structure
    # $val - read_ahead value to be set
    #
    # returns: the original read_ahead value

=item * get_security_level

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.0 or at least LibreSSL 3.6.0 and Net-SSLeay-1.94

Returns the security level associated with $ssl.

    my $level = Net::SSLeay::get_security_level($ssl);
    # $ssl   - value corresponding to openssl's SSL structure
    #
    # returns: (integer) current security level

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_security_level.html>

=item * set_security_level

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.0 or at least LibreSSL 3.6.0 and Net-SSLeay-1.94

Sets the security level associated with $ssl to $level.

    Net::SSLeay::set_security_level($ssl, $level);
    # $ssl   - value corresponding to openssl's SSL structure
    # $level - new security level
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_set_security_level.html>

=item * set_num_tickets

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.1 or at least LibreSSL 3.5.0 and Net-SSLeay-1.94

Set number of TLSv1.3 session tickets that will be sent to a client.

    my $rv = Net::SSLeay::set_num_tickets($ssl, $number_of_tickets);
    # $ssl  - value corresponding to openssl's SSL structure
    # $number_of_tickets - number of tickets to send
    #
    # returns: 1 on success, 0 on failure

Set to zero if you do not no want to support a session resumption.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_set_num_tickets.html>

=item * get_num_tickets

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.1 or at least LibreSSL 3.5.0 and Net-SSLeay-1.94

Get number of TLSv1.3 session tickets that will be sent to a client.

    my $number_of_tickets = Net::SSLeay::get_num_tickets($ctx);
    # $ctx  - value corresponding to openssl's SSL structure
    #
    # returns: number of tickets to send

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_num_tickets.html>

=item * get_server_random

Returns internal SSLv3 server_random value.

    Net::SSLeay::get_server_random($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: server_random value (binary data)

=item * get_client_random

B<NOTE:> Does not exactly correspond to any low level API function

Returns internal SSLv3 client_random value.

    Net::SSLeay::get_client_random($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: client_random value (binary data)

=item * export_keying_material

Returns keying material based on the string $label and optional
$context. Note that with TLSv1.2 and lower, empty context (empty
string) and undefined context (no value or 'undef') will return
different values.

    my $out = Net::SSLeay::export_keying_material($ssl, $olen, $label, $context);
    # $ssl - value corresponding to openssl's SSL structure
    # $olen - number of bytes to return
    # $label - application specific label
    # $context - [optional] context - default is undef for no context
    #
    # returns: keying material (binary data) or undef on error

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_export_keying_material.html>

=item * get_session

Retrieve TLS/SSL session data used in $ssl. The reference count of the SSL_SESSION is NOT incremented.

    my $rv = Net::SSLeay::get_session($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: value corresponding to openssl's SSL_SESSION structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_session.html>

=item * SSL_get0_session

The alias for L</get_session> (note that the name is C<SSL_get0_session> NOT C<get0_session>).

    my $rv = Net::SSLeay::SSL_get0_session();

=item * get1_session

Returns a pointer to the SSL_SESSION actually used in $ssl. The reference count of the SSL_SESSION is incremented by 1.

    my $rv = Net::SSLeay::get1_session($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: value corresponding to openssl's SSL_SESSION structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_session.html>

=item * get_shared_ciphers

Returns string with a list (colon ':' separated) of ciphers shared between client and server
within SSL session $ssl.

    my $rv = Net::SSLeay::get_shared_ciphers();
    #
    # returns: string like 'ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES256-SHA:DHE-DSS-AES256-SHA:...'

=item * get_shutdown

Returns the shutdown mode of $ssl.

    my $rv = Net::SSLeay::get_shutdown($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: shutdown mode (bitmask) of ssl

    # to decode the return value (bitmask) use:
    # 0 - No shutdown setting, yet
    # 1 - SSL_SENT_SHUTDOWN
    # 2 - SSL_RECEIVED_SHUTDOWN

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_set_shutdown.html>

=item * get_ssl_method

Returns a function pointer to the TLS/SSL method set in $ssl.

    my $rv = Net::SSLeay::get_ssl_method($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: value corresponding to openssl's SSL_METHOD structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_ssl_version.html>

=item * in_init, in_before, is_init_finished, in_connect_init, in_accept_init

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before.

Retrieve information about the handshake state machine. All functions take $ssl as the only argument and return 0 or 1. These functions are recommended over get_state() and state().

    my $rv = Net::SSLeay::is_init_finished($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: All functions return 1 or 0

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_in_init.html>

=item * get_state

B<COMPATIBILITY:> OpenSSL 1.1.0 and later use different constants which are not made available. Use is_init_finished() and related functions instead.

Returns the SSL connection state.

    my $rv = Net::SSLeay::get_state($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: (integer) state value
    #          to decode the returned state check:
    #          SSL_ST_* constants in openssl/ssl.h
    #          SSL2_ST_* constants in openssl/ssl2.h
    #          SSL23_ST_* constants in openssl/ssl23.h
    #          SSL3_ST_* + DTLS1_ST_* constants in openssl/ssl3.h

=item * state

Exactly the same as L</get_state>.

    my $rv = Net::SSLeay::state($ssl);

=item * set_state

Sets the SSL connection state.

    Net::SSLeay::set_state($ssl,Net::SSLeay::SSL_ST_ACCEPT());

Not available with OpenSSL 1.1 and later.

=item * get_verify_depth

Returns the verification depth limit currently set in $ssl.

    my $rv = Net::SSLeay::get_verify_depth($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: current depth or -1 if no limit has been explicitly set

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get_verify_mode.html>

=item * set_verify_depth

Sets the maximum depth for the certificate chain verification that shall be allowed for $ssl.

    Net::SSLeay::set_verify_depth($ssl, $depth);
    # $ssl - value corresponding to openssl's SSL structure
    # $depth - (integer) depth
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_verify.html>

=item * get_verify_mode

Returns the verification mode (bitmask) currently set in $ssl.

    my $rv = Net::SSLeay::get_verify_mode($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: mode (bitmask)

To decode the return value (bitmask) see documentation for L</CTX_get_verify_mode>.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get_verify_mode.html>

=item * set_verify

Sets the verification flags for $ssl to be $mode and specifies the $verify_callback function to be used.

    Net::SSLeay::set_verify($ssl, $mode, $callback);
    # $ssl - value corresponding to openssl's SSL structure
    # $mode - mode (bitmask)
    # $callback - [optional] reference to perl callback function
    #
    # returns: no return value

For $mode bitmask details see L</CTX_get_verify_mode>.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_verify.html>

=item * set_post_handshake_auth

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.1, not in LibreSSL

Enable the Post-Handshake Authentication extension to be added to the ClientHello such that post-handshake authentication can be requested by the server.

    Net::SSLeay::set_posthandshake_auth($ssl, $val);
    # $ssl - value corresponding to openssl's SSL structure
    # $val - 0 then the extension is not sent, otherwise it is
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_set_post_handshake_auth.html>

=item * verify_client_post_handshake

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.1, not in LibreSSL

verify_client_post_handshake causes a CertificateRequest message to be sent by a server on the given ssl connection.

    my $rv = Net::SSLeay::verify_client_post_handshake($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: 1 if the request succeeded, and 0 if the request failed. The error stack can be examined to determine the failure reason.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_verify_client_post_handshake.html>

=item * get_verify_result

Returns the result of the verification of the X509 certificate presented by the peer, if any.

    my $rv = Net::SSLeay::get_verify_result($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: (integer)
    #      0 - X509_V_OK: ok
    #      2 - X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: unable to get issuer certificate
    #      3 - X509_V_ERR_UNABLE_TO_GET_CRL: unable to get certificate CRL
    #      4 - X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: unable to decrypt certificate's signature
    #      5 - X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: unable to decrypt CRL's signature
    #      6 - X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: unable to decode issuer public key
    #      7 - X509_V_ERR_CERT_SIGNATURE_FAILURE: certificate signature failure
    #      8 - X509_V_ERR_CRL_SIGNATURE_FAILURE: CRL signature failure
    #      9 - X509_V_ERR_CERT_NOT_YET_VALID: certificate is not yet valid
    #     10 - X509_V_ERR_CERT_HAS_EXPIRED: certificate has expired
    #     11 - X509_V_ERR_CRL_NOT_YET_VALID: CRL is not yet valid
    #     12 - X509_V_ERR_CRL_HAS_EXPIRED: CRL has expired
    #     13 - X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: format error in certificate's notBefore field
    #     14 - X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: format error in certificate's notAfter field
    #     15 - X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: format error in CRL's lastUpdate field
    #     16 - X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: format error in CRL's nextUpdate field
    #     17 - X509_V_ERR_OUT_OF_MEM: out of memory
    #     18 - X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: self signed certificate
    #     19 - X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: self signed certificate in certificate chain
    #     20 - X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: unable to get local issuer certificate
    #     21 - X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: unable to verify the first certificate
    #     22 - X509_V_ERR_CERT_CHAIN_TOO_LONG: certificate chain too long
    #     23 - X509_V_ERR_CERT_REVOKED: certificate revoked
    #     24 - X509_V_ERR_INVALID_CA: invalid CA certificate
    #     25 - X509_V_ERR_PATH_LENGTH_EXCEEDED: path length constraint exceeded
    #     26 - X509_V_ERR_INVALID_PURPOSE: unsupported certificate purpose
    #     27 - X509_V_ERR_CERT_UNTRUSTED: certificate not trusted
    #     28 - X509_V_ERR_CERT_REJECTED: certificate rejected
    #     29 - X509_V_ERR_SUBJECT_ISSUER_MISMATCH: subject issuer mismatch
    #     30 - X509_V_ERR_AKID_SKID_MISMATCH: authority and subject key identifier mismatch
    #     31 - X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: authority and issuer serial number mismatch
    #     32 - X509_V_ERR_KEYUSAGE_NO_CERTSIGN:key usage does not include certificate signing
    #     50 - X509_V_ERR_APPLICATION_VERIFICATION: application verification failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_verify_result.html>

=item * set_verify_result

Override result of peer certificate verification.

    Net::SSLeay::set_verify_result($ssl, $v);
    # $ssl - value corresponding to openssl's SSL structure
    # $v - (integer) result value
    #
    # returns: no return value

For more info about valid return values see L</get_verify_result>

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_set_verify_result.html>

=item * get_wbio

Get 'write' BIO linked to an SSL object $ssl.

    my $rv = Net::SSLeay::get_wbio($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: value corresponding to openssl's BIO structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_rbio.html>

=item * load_client_CA_file

Load X509 certificates from file (PEM formatted).

    my $rv = Net::SSLeay::load_client_CA_file($file);
    # $file - (string) file name
    #
    # returns: value corresponding to openssl's STACK_OF(X509_NAME) structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_load_client_CA_file.html>

=item * clear_num_renegotiations

Executes SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS command on $ssl.

    my $rv = Net::SSLeay::clear_num_renegotiations($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: command result

=item * need_tmp_RSA

Executes SSL_CTRL_NEED_TMP_RSA command on $ssl.

    my $rv = Net::SSLeay::need_tmp_RSA($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: command result

Not available with OpenSSL 1.1 and later.

=item * num_renegotiations

Executes SSL_CTRL_GET_NUM_RENEGOTIATIONS command on $ssl.

    my $rv = Net::SSLeay::num_renegotiations($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: command result

=item * total_renegotiations

Executes SSL_CTRL_GET_TOTAL_RENEGOTIATIONS command on $ssl.

    my $rv = Net::SSLeay::total_renegotiations($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: command result

=item * peek

Copies $max bytes from the specified $ssl into the returned value.
In contrast to the C<Net::SSLeay::read()> function, the data in the SSL
buffer is unmodified after the SSL_peek() operation.

    Net::SSLeay::peek($ssl, $max);
    # $ssl - value corresponding to openssl's SSL structure
    # $max - [optional] max bytes to peek (integer) - default is 32768
    #
    # in scalar context: data read from the TLS/SSL connection, undef on error
    # in list context:   two-item array consisting of data read (undef on error),
    #                      and return code from SSL_peek().

=item * peek_ex

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.1, not in LibreSSL

Copies $max bytes from the specified $ssl into the returned value.
In contrast to the C<Net::SSLeay::read_ex()> function, the data in the SSL
buffer is unmodified after the SSL_peek_ex() operation.

    my($got, $rv) = Net::SSLeay::peek_ex($ssl, $max);
    # $ssl - value corresponding to openssl's SSL structure
    # $max - [optional] max bytes to peek (integer) - default is 32768
    #
    # returns a list: two-item list consisting of data read (undef on error),
    #                 and return code from SSL_peek_ex().

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_peek_ex.html>

=item * pending

Obtain number of readable bytes buffered in $ssl object.

    my $rv = Net::SSLeay::pending($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: the number of bytes pending

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_pending.html>

=item * has_pending

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.0, not in LibreSSL

Returns 1 if $ssl has buffered data (whether processed or unprocessed) and 0 otherwise.

    my $rv = Net::SSLeay::has_pending($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: (integer) 1 or 0

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_has_pending.html>

=item * read

Tries to read $max bytes from the specified $ssl.

    my $got = Net::SSLeay::read($ssl, $max);
    my($got, $rv) = Net::SSLeay::read($ssl, $max);
    # $ssl - value corresponding to openssl's SSL structure
    # $max - [optional] max bytes to read (integer) - default is 32768
    #
    # returns:
    # in scalar context: data read from the TLS/SSL connection, undef on error
    # in list context:   two-item array consisting of data read (undef on error),
    #                      and return code from SSL_read().

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_read.html>

=item * read_ex

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.1, not in LibreSSL

Tries to read $max bytes from the specified $ssl.

    my($got, $rv) = Net::SSLeay::read_ex($ssl, $max);
    # $ssl - value corresponding to openssl's SSL structure
    # $max - [optional] max bytes to read (integer) - default is 32768
    #
    # returns a list: two-item list consisting of data read (undef on error),
    #                 and return code from SSL_read_ex().

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_read_ex.html>

=item * renegotiate

Turn on flags for renegotiation so that renegotiation will happen

    my $rv = Net::SSLeay::renegotiate($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: 1 on success, 0 on failure

=item * rstate_string

Returns a 2 letter string indicating the current read state of the SSL object $ssl.

    my $rv = Net::SSLeay::rstate_string($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: 2-letter string

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_rstate_string.html>

=item * rstate_string_long

Returns a string indicating the current read state of the SSL object ssl.

    my $rv = Net::SSLeay::rstate_string_long($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: string with current state

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_rstate_string.html>

=item * session_reused

Query whether a reused session was negotiated during handshake.

    my $rv = Net::SSLeay::session_reused($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: 0 - new session was negotiated; 1 - session was reused.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_session_reused.html>

=item * set1_param

B<COMPATIBILITY:> requires at least OpenSSL 1.0.0-beta3

Applies X509 verification parameters $vpm on $ssl

    my $rv = Net::SSLeay::set1_param($ssl, $vpm);
    # $ssl - value corresponding to openssl's SSL structure
    # $vpm - value corresponding to openssl's X509_VERIFY_PARAM structure
    #
    # returns: 1 on success, 0 on failure

=item * set_accept_state

Sets $ssl to work in server mode.

    Net::SSLeay::set_accept_state($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_set_connect_state.html>

=item * set_bio

Connects the BIOs $rbio and $wbio for the read and write operations of the TLS/SSL (encrypted) side of $ssl.

    Net::SSLeay::set_bio($ssl, $rbio, $wbio);
    # $ssl - value corresponding to openssl's SSL structure
    # $rbio - value corresponding to openssl's BIO structure
    # $wbio - value corresponding to openssl's BIO structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_set_bio.html>

=item * set_cipher_list

Sets the list of ciphers only for ssl.

    my $rv = Net::SSLeay::set_cipher_list($ssl, $str);
    # $ssl - value corresponding to openssl's SSL structure
    # $str - (string) cipher list e.g. '3DES:+RSA'
    #
    # returns: 1 if any cipher could be selected and 0 on complete failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_cipher_list.html>

=item * set_ciphersuites

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.1 or at least LibreSSL 3.4.0 and Net-SSLeay-1.94

Configure the available TLSv1.3 ciphersuites.

    my $rv = Net::SSLeay::set_ciphersuites($ssl, $str);
    # $ssl  - value corresponding to openssl's SSL structure
    # $str  - colon (":") separated list of TLSv1.3 ciphersuite names in order of preference
    #
    # returns: (integer) 1 if the requested ciphersuite list was configured, and 0 otherwise

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_set_ciphersuites.html>

=item * set_client_CA_list

Sets the list of CAs sent to the client when requesting a client certificate
for the chosen $ssl, overriding the setting valid for $ssl's SSL_CTX object.

    my $rv = Net::SSLeay::set_client_CA_list($ssl, $list);
    # $ssl - value corresponding to openssl's SSL structure
    # $list - value corresponding to openssl's STACK_OF(X509_NAME) structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_client_CA_list.html>

=item * set_connect_state

Sets $ssl to work in client mode.

    Net::SSLeay::set_connect_state($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_set_connect_state.html>

=item * set_fd

Sets the file descriptor $fd as the input/output facility for the TLS/SSL (encrypted)
side of $ssl, $fd will typically be the socket file descriptor of a network connection.

    my $rv = Net::SSLeay::set_fd($ssl, $fd);
    # $ssl - value corresponding to openssl's SSL structure
    # $fd - (integer) file handle (got via perl's fileno)
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_set_fd.html>

=item * set_psk_client_callback

Sets the psk client callback.

    Net::SSLeay::set_psk_client_callback($ssl, sub { my $hint = shift; return ($identity, $key) } );
    # $ssl - value corresponding to openssl's SSL structure
    # $hint - PSK identity hint send by the server
    # $identity - PSK identity
    # $key - PSK key, hex string without the leading '0x', e.g. 'deadbeef'
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_set_psk_client_callback.html>

=item * set_rfd

Sets the file descriptor $fd as the input (read) facility for the TLS/SSL (encrypted) side of $ssl.

    my $rv = Net::SSLeay::set_rfd($ssl, $fd);
    # $ssl - value corresponding to openssl's SSL structure
    # $fd - (integer) file handle (got via perl's fileno)
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_set_fd.html>

=item * set_wfd

    my $rv = Net::SSLeay::set_wfd($ssl, $fd);
    # $ssl - value corresponding to openssl's SSL structure
    # $fd - (integer) file handle (got via perl's fileno)
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_set_fd.html>

=item * set_info_callback

Sets the callback function, that can be used to obtain state information for $ssl during connection setup and use.
When callback is undef, the callback setting currently valid for ctx is used.

    Net::SSLeay::set_info_callback($ssl, $cb, [$data]);
    # $ssl - value corresponding to openssl's SSL structure
    # $cb - sub { my ($ssl,$where,$ret,$data) = @_; ... }
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_info_callback.html>

=item * CTX_set_info_callback

Sets the callback function on ctx, that can be used to obtain state information during ssl connection setup and use.
When callback is undef, an existing callback will be disabled.

    Net::SSLeay::CTX_set_info_callback($ssl, $cb, [$data]);
    # $ssl - value corresponding to openssl's SSL structure
    # $cb - sub { my ($ssl,$where,$ret,$data) = @_; ... }
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_info_callback.html>

=item * set_msg_callback

Sets the callback function, that can be used to obtain protocol messages information for $ssl during connection setup and use.
When callback is undef, the callback setting currently valid for ctx is used.
Note that set_msg_callback_arg is not provided as there is no need to explicitly set $arg, this is handled by set_msg_callback.

    Net::SSLeay::set_msg_callback($ssl, $cb, [$arg]);
    # $ssl - value corresponding to openssl's SSL structure
    # $cb - sub { my ($write_p,$version,$content_type,$buf,$len,$ssl,$arg) = @_; ... }
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_set_msg_callback.html>

=item * CTX_set_msg_callback

Sets the callback function on ctx, that can be used to obtain protocol messages information for ssl connection setup and use.
When callback is undef, the existing callback will be disabled.
Note that CTX_set_msg_callback_arg is not provided as there is no need to explicitly set $arg, this is handled by CTX_set_msg_callback.

    Net::SSLeay::CTX_set_msg_callback($ssl, $cb, [$arg]);
    # $ssl - value corresponding to openssl's SSL structure
    # $cb - sub { my ($write_p,$version,$content_type,$buf,$len,$ssl,$arg) = @_; ... }
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_msg_callback.html>

=item * set_pref_cipher

Sets the list of available ciphers for $ssl using the control string $str.

    my $rv = Net::SSLeay::set_pref_cipher($ssl, $str);
    # $ssl - value corresponding to openssl's SSL structure
    # $str - (string) cipher list e.g. '3DES:+RSA'
    #
    # returns: 1 if any cipher could be selected and 0 on complete failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_cipher_list.html>

=item * CTX_set_psk_client_callback

Sets the psk client callback.

    Net::SSLeay::CTX_set_psk_client_callback($ssl, sub { my $hint = shift; return ($identity, $key) } );
    # $ssl - value corresponding to openssl's SSL structure
    # $hint - PSK identity hint send by the server
    # $identity - PSK identity
    # $key - PSK key, hex string without the leading '0x', e.g. 'deadbeef'
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_psk_client_callback.html>

=item * set_purpose

    my $rv = Net::SSLeay::set_purpose($ssl, $purpose);
