=item C<MYMALLOC>
X<MYMALLOC>

This symbol, if defined, indicates that we're using our own malloc.

=back

=for hackers
Found in file config.h

=over 4

=item C<Newx>

=item C<safemalloc>
X<Newx>X<safemalloc>

The XSUB-writer's interface to the C C<malloc> function.

Memory obtained by this should B<ONLY> be freed with L</"Safefree">.

In 5.9.3, Newx() and friends replace the older New() API, and drops
the first parameter, I<x>, a debug aid which allowed callers to identify
themselves.  This aid has been superseded by a new build option,
PERL_MEM_LOG (see L<perlhacktips/PERL_MEM_LOG>).  The older API is still
there for use in XS modules supporting older perls.

=over 3

 void   Newx      (void* ptr, int nitems, type)
 void*  safemalloc(size_t size)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<Newxc>
X<Newxc>

The XSUB-writer's interface to the C C<malloc> function, with
cast.  See also C<L</Newx>>.

Memory obtained by this should B<ONLY> be freed with L</"Safefree">.

=over 3

 void  Newxc(void* ptr, int nitems, type, cast)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<Newxz>

=item C<safecalloc>
X<Newxz>X<safecalloc>

The XSUB-writer's interface to the C C<calloc> function.  The allocated
memory is zeroed with C<memzero>.  See also C<L</Newx>>.

Memory obtained by this should B<ONLY> be freed with L</"Safefree">.

=over 3

 void   Newxz     (void* ptr, int nitems, type)
 void*  safecalloc(size_t nitems, size_t item_size)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<PERL_MALLOC_WRAP>
X<PERL_MALLOC_WRAP>

This symbol, if defined, indicates that we'd like malloc wrap checks.

=back

=for hackers
Found in file config.h

=over 4

=item C<Renew>

=item C<saferealloc>
X<Renew>X<saferealloc>

The XSUB-writer's interface to the C C<realloc> function.

Memory obtained by this should B<ONLY> be freed with L</"Safefree">.

=over 3

 void   Renew      (void* ptr, int nitems, type)
 void*  saferealloc(void *ptr, size_t size)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<Renewc>
X<Renewc>

The XSUB-writer's interface to the C C<realloc> function, with
cast.

Memory obtained by this should B<ONLY> be freed with L</"Safefree">.

=over 3

 void  Renewc(void* ptr, int nitems, type, cast)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<Safefree>
X<Safefree>

The XSUB-writer's interface to the C C<free> function.

This should B<ONLY> be used on memory obtained using L</"Newx"> and friends.

=over 3

 void  Safefree(void* ptr)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<safesyscalloc>
X<safesyscalloc>

Safe version of system's calloc()

=over 3

 Malloc_t  safesyscalloc(MEM_SIZE elements, MEM_SIZE size)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<safesysfree>
X<safesysfree>

Safe version of system's free()

=over 3

 Free_t  safesysfree(Malloc_t where)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<safesysmalloc>
X<safesysmalloc>

Paranoid version of system's malloc()

=over 3

 Malloc_t  safesysmalloc(MEM_SIZE nbytes)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<safesysrealloc>
X<safesysrealloc>

Paranoid version of system's realloc()

=over 3

 Malloc_t  safesysrealloc(Malloc_t where, MEM_SIZE nbytes)

=back

=back

=for hackers
Found in file util.c

=head1 MRO


These functions are related to the method resolution order of perl classes
Also see L<perlmroapi>.


=over 4

=item C<HvMROMETA>

Described in L<perlmroapi>.

=over 3

 struct mro_meta *  HvMROMETA(HV *hv)

=back

=back

=for hackers
Found in file pod/perlmroapi.pod

=over 4

=item C<mro_get_from_name>
X<mro_get_from_name>

Returns the previously registered mro with the given C<name>, or NULL if not
registered.  See L</C<mro_register>>.

NOTE: C<mro_get_from_name> must be explicitly called as
C<Perl_mro_get_from_name>
with an C<aTHX_> parameter.

=over 3

 const struct mro_alg *  Perl_mro_get_from_name(pTHX_ SV *name)

=back

=back

=for hackers
Found in file mro_core.c

=over 4

=item C<mro_get_linear_isa>
X<mro_get_linear_isa>

Returns the mro linearisation for the given stash.  By default, this
will be whatever C<mro_get_linear_isa_dfs> returns unless some
other MRO is in effect for the stash.  The return value is a
read-only AV* whose values are string SVs giving class names.

You are responsible for C<SvREFCNT_inc()> on the
return value if you plan to store it anywhere
semi-permanently (otherwise it might be deleted
out from under you the next time the cache is
invalidated).

=over 3

 AV *  mro_get_linear_isa(HV *stash)

=back

=back

=for hackers
Found in file mro_core.c

=over 4

=item C<MRO_GET_PRIVATE_DATA>

Described in L<perlmroapi>.

=over 3

 SV*  MRO_GET_PRIVATE_DATA(struct mro_meta *const smeta,
                           const struct mro_alg *const which)

=back

=back

=for hackers
Found in file pod/perlmroapi.pod

=over 4

=item C<mro_method_changed_in>
X<mro_method_changed_in>

Invalidates method caching on any child classes
of the given stash, so that they might notice
the changes in this one.

Ideally, all instances of C<PL_sub_generation++> in
perl source outside of F<mro.c> should be
replaced by calls to this.

Perl automatically handles most of the common
ways a method might be redefined.  However, there
are a few ways you could change a method in a stash
without the cache code noticing, in which case you
need to call this method afterwards:

1) Directly manipulating the stash HV entries from
XS code.

2) Assigning a reference to a readonly scalar
constant into a stash entry in order to create
a constant subroutine (like F<constant.pm>
does).

This same method is available from pure perl
via, C<mro::method_changed_in(classname)>.

=over 3

 void  mro_method_changed_in(HV *stash)

=back

=back

=for hackers
Found in file mro_core.c

=over 4

=item C<mro_register>
X<mro_register>

Registers a custom mro plugin.  See L<perlmroapi> for details on this and other
mro functions.

NOTE: C<mro_register> must be explicitly called as
C<Perl_mro_register>
with an C<aTHX_> parameter.

=over 3

 void  Perl_mro_register(pTHX_ const struct mro_alg *mro)

=back

=back

=for hackers
Found in file mro_core.c

=over 4

=item C<mro_set_mro>
X<mro_set_mro>

Set C<meta> to the value contained in the registered mro plugin whose name is
C<name>.

Croaks if C<name> hasn't been registered

NOTE: C<mro_set_mro> must be explicitly called as
C<Perl_mro_set_mro>
with an C<aTHX_> parameter.

=over 3

 void  Perl_mro_set_mro(pTHX_ struct mro_meta * const meta,
                        SV * const name)

=back

=back

=for hackers
Found in file mro_core.c

=over 4

=item C<mro_set_private_data>

Described in L<perlmroapi>.

NOTE: C<mro_set_private_data> must be explicitly called as
C<Perl_mro_set_private_data>
with an C<aTHX_> parameter.

=over 3

 SV *  Perl_mro_set_private_data(pTHX_
                                struct mro_meta * const smeta,
                                const struct mro_alg * const which,
                                SV * const data)

=back

=back

=for hackers
Found in file pod/perlmroapi.pod

=head1 Multicall Functions

=over 4

=item C<dMULTICALL>
X<dMULTICALL>

Declare local variables for a multicall.  See L<perlcall/LIGHTWEIGHT CALLBACKS>.

=over 3

   dMULTICALL;

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<MULTICALL>
X<MULTICALL>

Make a lightweight callback.  See L<perlcall/LIGHTWEIGHT CALLBACKS>.

=over 3

   MULTICALL;

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<POP_MULTICALL>
X<POP_MULTICALL>

Closing bracket for a lightweight callback.
See L<perlcall/LIGHTWEIGHT CALLBACKS>.

=over 3

   POP_MULTICALL;

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<PUSH_MULTICALL>
X<PUSH_MULTICALL>

Opening bracket for a lightweight callback.
See L<perlcall/LIGHTWEIGHT CALLBACKS>.

=over 3

   PUSH_MULTICALL(CV* the_cv);

=back

=back

=for hackers
Found in file cop.h

=head1 Numeric Functions
X<IS_NUMBER_GREATER_THAN_UV_MAX>X<IS_NUMBER_INFINITY>X<IS_NUMBER_IN_UV>X<IS_NUMBER_NAN>X<IS_NUMBER_NEG>X<IS_NUMBER_NOT_INT>X<PERL_SCAN_ALLOW_UNDERSCORES>X<PERL_SCAN_DISALLOW_PREFIX>X<PERL_SCAN_GREATER_THAN_UV_MAX>X<PERL_SCAN_SILENT_ILLDIGIT>X<PERL_SCAN_TRAILING>

=over 4

=item C<Atol>

C<B<DEPRECATED!>>  It is planned to remove C<Atol>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

Described in L<perlhacktips>.

=over 3

   Atol(const char * nptr)

=back

=back

=for hackers
Found in file pod/perlhacktips.pod

=over 4

=item C<Atoul>

C<B<DEPRECATED!>>  It is planned to remove C<Atoul>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

Described in L<perlhacktips>.

=over 3

   Atoul(const char * nptr)

=back

=back

=for hackers
Found in file pod/perlhacktips.pod

=over 4

=item C<Drand01>
X<Drand01>

This macro is to be used to generate uniformly distributed
random numbers over the range [0., 1.[.  You may have to supply
an 'extern double C<drand48()>;' in your program since SunOS 4.1.3
doesn't provide you with anything relevant in its headers.
See C<L</HAS_DRAND48_PROTO>>.

=over 3

 double  Drand01()

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<Gconvert>
X<Gconvert>

This preprocessor macro is defined to convert a floating point
number to a string without a trailing decimal point.  This
emulates the behavior of C<sprintf("%g")>, but is sometimes much more
efficient.  If C<gconvert()> is not available, but C<gcvt()> drops the
trailing decimal point, then C<gcvt()> is used.  If all else fails,
a macro using C<sprintf("%g")> is used. Arguments for the Gconvert
macro are: value, number of digits, whether trailing zeros should
be retained, and the output buffer.
The usual values are:

 d_Gconvert='gconvert((x),(n),(t),(b))'
 d_Gconvert='gcvt((x),(n),(b))'
 d_Gconvert='sprintf((b),"%.*g",(n),(x))'

The last two assume trailing zeros should not be kept.

=over 3

 char *  Gconvert(double x, Size_t n, bool t, char * b)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<grok_atoUV>
X<grok_atoUV>

parse a string, looking for a decimal unsigned integer.

On entry, C<pv> points to the beginning of the string;
C<valptr> points to a UV that will receive the converted value, if found;
C<endptr> is either NULL or points to a variable that points to one byte
beyond the point in C<pv> that this routine should examine.
If C<endptr> is NULL, C<pv> is assumed to be NUL-terminated.

Returns FALSE if C<pv> doesn't represent a valid unsigned integer value (with
no leading zeros).  Otherwise it returns TRUE, and sets C<*valptr> to that
value.

If you constrain the portion of C<pv> that is looked at by this function (by
passing a non-NULL C<endptr>), and if the initial bytes of that portion form a
valid value, it will return TRUE, setting C<*endptr> to the byte following the
final digit of the value.  But if there is no constraint at what's looked at,
all of C<pv> must be valid in order for TRUE to be returned.  C<*endptr> is
unchanged from its value on input if FALSE is returned;

The only characters this accepts are the decimal digits '0'..'9'.

As opposed to L<atoi(3)> or L<strtol(3)>, C<grok_atoUV> does NOT allow optional
leading whitespace, nor negative inputs.  If such features are required, the
calling code needs to explicitly implement those.

Note that this function returns FALSE for inputs that would overflow a UV,
or have leading zeros.  Thus a single C<0> is accepted, but not C<00> nor
C<01>, C<002>, I<etc>.

Background: C<atoi> has severe problems with illegal inputs, it cannot be
used for incremental parsing, and therefore should be avoided
C<atoi> and C<strtol> are also affected by locale settings, which can also be
seen as a bug (global state controlled by user environment).

=over 3

 bool  grok_atoUV(const char *pv, UV *valptr, const char **endptr)

=back

=back

=for hackers
Found in file numeric.c

=over 4

=item C<grok_bin>
X<grok_bin>

converts a string representing a binary number to numeric form.

On entry C<start> and C<*len_p> give the string to scan, C<*flags> gives
conversion flags, and C<result> should be C<NULL> or a pointer to an NV.  The
scan stops at the end of the string, or at just before the first invalid
character.  Unless C<PERL_SCAN_SILENT_ILLDIGIT> is set in C<*flags>,
encountering an invalid character (except NUL) will also trigger a warning.  On
return C<*len_p> is set to the length of the scanned string, and C<*flags>
gives output flags.

If the value is <= C<UV_MAX> it is returned as a UV, the output flags are clear,
and nothing is written to C<*result>.  If the value is > C<UV_MAX>, C<grok_bin>
returns C<UV_MAX>, sets C<PERL_SCAN_GREATER_THAN_UV_MAX> in the output flags,
and writes an approximation of the correct value into C<*result> (which is an
NV; or the approximation is discarded if C<result> is NULL).

The binary number may optionally be prefixed with C<"0b"> or C<"b"> unless
C<PERL_SCAN_DISALLOW_PREFIX> is set in C<*flags> on entry.

If C<PERL_SCAN_ALLOW_UNDERSCORES> is set in C<*flags> then any or all pairs of
digits may be separated from each other by a single underscore; also a single
leading underscore is accepted.

=over 3

 UV  grok_bin(const char *start, STRLEN *len_p, I32 *flags,
              NV *result)

=back

=back

=for hackers
Found in file numeric.c

=over 4

=item C<grok_hex>
X<grok_hex>

converts a string representing a hex number to numeric form.

On entry C<start> and C<*len_p> give the string to scan, C<*flags> gives
conversion flags, and C<result> should be C<NULL> or a pointer to an NV.  The
scan stops at the end of the string, or at just before the first invalid
character.  Unless C<PERL_SCAN_SILENT_ILLDIGIT> is set in C<*flags>,
encountering an invalid character (except NUL) will also trigger a warning.  On
return C<*len_p> is set to the length of the scanned string, and C<*flags>
gives output flags.

If the value is <= C<UV_MAX> it is returned as a UV, the output flags are clear,
and nothing is written to C<*result>.  If the value is > C<UV_MAX>, C<grok_hex>
returns C<UV_MAX>, sets C<PERL_SCAN_GREATER_THAN_UV_MAX> in the output flags,
and writes an approximation of the correct value into C<*result> (which is an
NV; or the approximation is discarded if C<result> is NULL).

The hex number may optionally be prefixed with C<"0x"> or C<"x"> unless
C<PERL_SCAN_DISALLOW_PREFIX> is set in C<*flags> on entry.

If C<PERL_SCAN_ALLOW_UNDERSCORES> is set in C<*flags> then any or all pairs of
digits may be separated from each other by a single underscore; also a single
leading underscore is accepted.

=over 3

 UV  grok_hex(const char *start, STRLEN *len_p, I32 *flags,
              NV *result)

=back

=back

=for hackers
Found in file numeric.c

=over 4

=item C<grok_infnan>
X<grok_infnan>

Helper for C<grok_number()>, accepts various ways of spelling "infinity"
or "not a number", and returns one of the following flag combinations:

  IS_NUMBER_INFINITY
  IS_NUMBER_NAN
  IS_NUMBER_INFINITY | IS_NUMBER_NEG
  IS_NUMBER_NAN | IS_NUMBER_NEG
  0

possibly |-ed with C<IS_NUMBER_TRAILING>.

If an infinity or a not-a-number is recognized, C<*sp> will point to
one byte past the end of the recognized string.  If the recognition fails,
zero is returned, and C<*sp> will not move.

=over 3

 int  grok_infnan(const char **sp, const char *send)

=back

=back

=for hackers
Found in file numeric.c

=over 4

=item C<grok_number>
X<grok_number>

Identical to C<grok_number_flags()> with C<flags> set to zero.

=over 3

 int  grok_number(const char *pv, STRLEN len, UV *valuep)

=back

=back

=for hackers
Found in file numeric.c

=over 4

=item C<grok_number_flags>
X<grok_number_flags>

Recognise (or not) a number.  The type of the number is returned
(0 if unrecognised), otherwise it is a bit-ORed combination of
C<IS_NUMBER_IN_UV>, C<IS_NUMBER_GREATER_THAN_UV_MAX>, C<IS_NUMBER_NOT_INT>,
C<IS_NUMBER_NEG>, C<IS_NUMBER_INFINITY>, C<IS_NUMBER_NAN> (defined in perl.h).

If the value of the number can fit in a UV, it is returned in C<*valuep>.
C<IS_NUMBER_IN_UV> will be set to indicate that C<*valuep> is valid, C<IS_NUMBER_IN_UV>
will never be set unless C<*valuep> is valid, but C<*valuep> may have been assigned
to during processing even though C<IS_NUMBER_IN_UV> is not set on return.
If C<valuep> is C<NULL>, C<IS_NUMBER_IN_UV> will be set for the same cases as when
C<valuep> is non-C<NULL>, but no actual assignment (or SEGV) will occur.

C<IS_NUMBER_NOT_INT> will be set with C<IS_NUMBER_IN_UV> if trailing decimals were
seen (in which case C<*valuep> gives the true value truncated to an integer), and
C<IS_NUMBER_NEG> if the number is negative (in which case C<*valuep> holds the
absolute value).  C<IS_NUMBER_IN_UV> is not set if C<e> notation was used or the
number is larger than a UV.

C<flags> allows only C<PERL_SCAN_TRAILING>, which allows for trailing
non-numeric text on an otherwise successful I<grok>, setting
C<IS_NUMBER_TRAILING> on the result.

=over 3

 int  grok_number_flags(const char *pv, STRLEN len, UV *valuep,
                        U32 flags)

=back

=back

=for hackers
Found in file numeric.c

=over 4

=item C<GROK_NUMERIC_RADIX>
X<GROK_NUMERIC_RADIX>

A synonym for L</grok_numeric_radix>

=over 3

 bool  GROK_NUMERIC_RADIX(NN const char **sp, NN const char *send)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<grok_numeric_radix>
X<grok_numeric_radix>

Scan and skip for a numeric decimal separator (radix).

=over 3

 bool  grok_numeric_radix(const char **sp, const char *send)

=back

=back

=for hackers
Found in file numeric.c

=over 4

=item C<grok_oct>
X<grok_oct>

converts a string representing an octal number to numeric form.

On entry C<start> and C<*len_p> give the string to scan, C<*flags> gives
conversion flags, and C<result> should be C<NULL> or a pointer to an NV.  The
scan stops at the end of the string, or at just before the first invalid
character.  Unless C<PERL_SCAN_SILENT_ILLDIGIT> is set in C<*flags>,
encountering an invalid character (except NUL) will also trigger a warning.  On
return C<*len_p> is set to the length of the scanned string, and C<*flags>
gives output flags.

If the value is <= C<UV_MAX> it is returned as a UV, the output flags are clear,
and nothing is written to C<*result>.  If the value is > C<UV_MAX>, C<grok_oct>
returns C<UV_MAX>, sets C<PERL_SCAN_GREATER_THAN_UV_MAX> in the output flags,
and writes an approximation of the correct value into C<*result> (which is an
NV; or the approximation is discarded if C<result> is NULL).

If C<PERL_SCAN_ALLOW_UNDERSCORES> is set in C<*flags> then any or all pairs of
digits may be separated from each other by a single underscore; also a single
leading underscore is accepted.

The C<PERL_SCAN_DISALLOW_PREFIX> flag is always treated as being set for
this function.

=over 3

 UV  grok_oct(const char *start, STRLEN *len_p, I32 *flags,
              NV *result)

=back

=back

=for hackers
Found in file numeric.c

=over 4

=item C<isinfnan>
X<isinfnan>

C<Perl_isinfnan()> is a utility function that returns true if the NV
argument is either an infinity or a C<NaN>, false otherwise.  To test
in more detail, use C<Perl_isinf()> and C<Perl_isnan()>.

This is also the logical inverse of Perl_isfinite().

=over 3

 bool  isinfnan(NV nv)

=back

=back

=for hackers
Found in file numeric.c

=over 4

=item C<my_atof>
X<my_atof>

L<C<atof>(3)>, but properly works with Perl locale handling, accepting a dot
radix character always, but also the current locale's radix character if and
only if called from within the lexical scope of a Perl C<use locale> statement.

N.B. C<s> must be NUL terminated.

=over 3

 NV  my_atof(const char *s)

=back

=back

=for hackers
Found in file numeric.c

=over 4

=item C<my_strtod>
X<my_strtod>

This function is equivalent to the libc strtod() function, and is available
even on platforms that lack plain strtod().  Its return value is the best
available precision depending on platform capabilities and F<Configure>
options.

It properly handles the locale radix character, meaning it expects a dot except
when called from within the scope of S<C<use locale>>, in which case the radix
character should be that specified by the current locale.

The synonym Strtod() may be used instead.

=over 3

 NV  my_strtod(const char * const s, char **e)

=back

=back

=for hackers
Found in file numeric.c

=over 4

=item C<PERL_ABS>
X<PERL_ABS>

Typeless C<abs> or C<fabs>, I<etc>.  (The usage below indicates it is for
integers, but it works for any type.)  Use instead of these, since the C
library ones force their argument to be what it is expecting, potentially
leading to disaster.  But also beware that this evaluates its argument twice,
so no C<x++>.

=over 3

 int  PERL_ABS(int x)

=back

=back

=for hackers
Found in file perl.h

