
static const UV UNI_PS_invlist[] = {  /* for ASCII/Latin1 */
	159,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x28,
	0x29,
	0x5B,
	0x5C,
	0x7B,
	0x7C,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0x169B,
	0x169C,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2045,
	0x2046,
	0x207D,
	0x207E,
	0x208D,
	0x208E,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x2329,
	0x232A,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x27C5,
	0x27C6,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29FC,
	0x29FD,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E42,
	0x2E43,
	0x2E55,
	0x2E56,
	0x2E57,
	0x2E58,
	0x2E59,
	0x2E5A,
	0x2E5B,
	0x2E5C,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301D,
	0x301E,
	0xFD3F,
	0xFD40,
	0xFE17,
	0xFE18,
	0xFE35,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE47,
	0xFE48,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFF08,
	0xFF09,
	0xFF3B,
	0xFF3C,
	0xFF5B,
	0xFF5C,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_PS_invlist[] = {  /* for EBCDIC 1047 */
	159,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4D,
	0x4E,
	0xAD,
	0xAE,
	0xC0,
	0xC1,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0x169B,
	0x169C,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2045,
	0x2046,
	0x207D,
	0x207E,
	0x208D,
	0x208E,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x2329,
	0x232A,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x27C5,
	0x27C6,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29FC,
	0x29FD,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E42,
	0x2E43,
	0x2E55,
	0x2E56,
	0x2E57,
	0x2E58,
	0x2E59,
	0x2E5A,
	0x2E5B,
	0x2E5C,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301D,
	0x301E,
	0xFD3F,
	0xFD40,
	0xFE17,
	0xFE18,
	0xFE35,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE47,
	0xFE48,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFF08,
	0xFF09,
	0xFF3B,
	0xFF3C,
	0xFF5B,
	0xFF5C,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_PS_invlist[] = {  /* for EBCDIC 037 */
	159,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4D,
	0x4E,
	0xBA,
	0xBB,
	0xC0,
	0xC1,
	0xF3A,
	0xF3B,
	0xF3C,
	0xF3D,
	0x169B,
	0x169C,
	0x201A,
	0x201B,
	0x201E,
	0x201F,
	0x2045,
	0x2046,
	0x207D,
	0x207E,
	0x208D,
	0x208E,
	0x2308,
	0x2309,
	0x230A,
	0x230B,
	0x2329,
	0x232A,
	0x2768,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x27C5,
	0x27C6,
	0x27E6,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x2983,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x29D8,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29FC,
	0x29FD,
	0x2E22,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E42,
	0x2E43,
	0x2E55,
	0x2E56,
	0x2E57,
	0x2E58,
	0x2E59,
	0x2E5A,
	0x2E5B,
	0x2E5C,
	0x3008,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3014,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301D,
	0x301E,
	0xFD3F,
	0xFD40,
	0xFE17,
	0xFE18,
	0xFE35,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE47,
	0xFE48,
	0xFE59,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFF08,
	0xFF09,
	0xFF3B,
	0xFF3C,
	0xFF5B,
	0xFF5C,
	0xFF5F,
	0xFF60,
	0xFF62,
	0xFF63
};

#  endif	/* EBCDIC 037 */

static const UV UNI_PUA_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE000,
	0xF900
};

static const UV UNI_QAAI_invlist[] = {  /* for all charsets */
	41,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x342,
	0x343,
	0x345,
	0x346,
	0x363,
	0x953,
	0x955,
	0x1AB0,
	0x1ACF,
	0x1DC2,
	0x1DF8,
	0x1DF9,
	0x1DFA,
	0x1DFB,
	0x1E00,
	0x200C,
	0x200E,
	0x20D0,
	0x20F0,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE2E,
	0x101FD,
	0x101FE,
	0x1CF00,
	0x1CF2E,
	0x1CF30,
	0x1CF47,
	0x1D167,
	0x1D16A,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0xE0100,
	0xE01F0
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_QMARK_invlist[] = {  /* for ASCII/Latin1 */
	27,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x22,
	0x23,
	0x27,
	0x28,
	0xAB,
	0xAC,
	0xBB,
	0xBC,
	0x2018,
	0x2020,
	0x2039,
	0x203B,
	0x2E42,
	0x2E43,
	0x300C,
	0x3010,
	0x301D,
	0x3020,
	0xFE41,
	0xFE45,
	0xFF02,
	0xFF03,
	0xFF07,
	0xFF08,
	0xFF62,
	0xFF64
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_QMARK_invlist[] = {  /* for EBCDIC 1047 */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0x2018,
	0x2020,
	0x2039,
	0x203B,
	0x2E42,
	0x2E43,
	0x300C,
	0x3010,
	0x301D,
	0x3020,
	0xFE41,
	0xFE45,
	0xFF02,
	0xFF03,
	0xFF07,
	0xFF08,
	0xFF62,
	0xFF64
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_QMARK_invlist[] = {  /* for EBCDIC 037 */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0x2018,
	0x2020,
	0x2039,
	0x203B,
	0x2E42,
	0x2E43,
	0x300C,
	0x3010,
	0x301D,
	0x3020,
	0xFE41,
	0xFE45,
	0xFF02,
	0xFF03,
	0xFF07,
	0xFF08,
	0xFF62,
	0xFF64
};

#  endif	/* EBCDIC 037 */

static const UV UNI_RADICAL_invlist[] = {  /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6
};

static const UV UNI_RI_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F1E6,
	0x1F200
};

static const UV UNI_RJNG_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA930,
	0xA954,
	0xA95F,
	0xA960
};

static const UV UNI_ROHG_invlist[] = {  /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61F,
	0x620,
	0x640,
	0x641,
	0x6D4,
	0x6D5,
	0x10D00,
	0x10D28,
	0x10D30,
	0x10D3A
};

static const UV UNI_RUMI_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10E60,
	0x10E80
};

static const UV UNI_RUNR_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_S_invlist[] = {  /* for ASCII/Latin1 */
	465,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x24,
	0x25,
	0x2B,
	0x2C,
	0x3C,
	0x3F,
	0x5E,
	0x5F,
	0x60,
	0x61,
	0x7C,
	0x7D,
	0x7E,
	0x7F,
	0xA2,
	0xA7,
	0xA8,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xB2,
	0xB4,
	0xB5,
	0xB8,
	0xB9,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x384,
	0x386,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x58D,
	0x590,
	0x606,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x610,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x7F6,
	0x7F7,
	0x7FE,
	0x800,
	0x888,
	0x889,
	0x9F2,
	0x9F4,
	0x9FA,
	0x9FC,
	0xAF1,
	0xAF2,
	0xB70,
	0xB71,
	0xBF3,
	0xBFB,
	0xC7F,
	0xC80,
	0xD4F,
	0xD50,
	0xD79,
	0xD7A,
	0xE3F,
	0xE40,
	0xF01,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xFBE,
	0xFC6,
	0xFC7,
	0xFCD,
	0xFCE,
	0xFD0,
	0xFD5,
	0xFD9,
	0x109E,
	0x10A0,
	0x1390,
	0x139A,
	0x166D,
	0x166E,
	0x17DB,
	0x17DC,
	0x1940,
	0x1941,
	0x19DE,
	0x1A00,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B7D,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x207A,
	0x207D,
	0x208A,
	0x208D,
	0x20A0,
	0x20C1,
	0x2100,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2150,
	0x218A,
	0x218C,
	0x2190,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2427,
	0x2440,
	0x244B,
	0x249C,
	0x24EA,
	0x2500,
	0x2768,
	0x2794,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B97,
	0x2C00,
	0x2CE5,
	0x2CEB,
	0x2E50,
	0x2E52,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3004,
	0x3005,
	0x3012,
	0x3014,
	0x3020,
	0x3021,
	0x3036,
