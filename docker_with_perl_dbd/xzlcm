
L<Locale::Codes> has been upgraded from version 3.25 to 3.30.

=item *

L<Locale::Maketext> has been upgraded from version 1.23 to 1.25.

=item *

L<Math::BigInt> has been upgraded from version 1.9991 to 1.9993.

=item *

L<Math::BigInt::FastCalc> has been upgraded from version 0.30 to 0.31.

=item *

L<Math::BigRat> has been upgraded from version 0.2604 to 0.2606.

=item *

L<MIME::Base64> has been upgraded from version 3.13 to 3.14.

=item *

L<Module::Build> has been upgraded from version 0.4003 to 0.4205.
NOTE: L<Module::Build> is deprecated and may be removed from a future version of Perl.

=item *

L<Module::CoreList> has been upgraded from version 2.89 to 3.10.

=item *

L<Module::Load> has been upgraded from version 0.24 to 0.32.

=item *

L<Module::Load::Conditional> has been upgraded from version 0.54 to 0.62.

=item *

L<Module::Metadata> has been upgraded from version 1.000011 to 1.000019.

=item *

L<mro> has been upgraded from version 1.11 to 1.16.

=item *

L<Net::Ping> has been upgraded from version 2.41 to 2.43.

=item *

L<Opcode> has been upgraded from version 1.25 to 1.27.

=item *

L<Package::Constants> has been upgraded from version 0.02 to 0.04.
NOTE: L<Package::Constants> is deprecated and may be removed from a future version of Perl.

=item *

L<Params::Check> has been upgraded from version 0.36 to 0.38.

=item *

L<parent> has been upgraded from version 0.225 to 0.228.

=item *

L<Parse::CPAN::Meta> has been upgraded from version 1.4404 to 1.4414.

=item *

L<Perl::OSType> has been upgraded from version 1.003 to 1.007.

=item *

L<perlfaq> has been upgraded from version 5.0150042 to 5.0150044.

=item *

L<PerlIO> has been upgraded from version 1.07 to 1.09.

=item *

L<PerlIO::encoding> has been upgraded from version 0.16 to 0.18.

=item *

L<PerlIO::scalar> has been upgraded from version 0.16 to 0.18.

=item *

L<PerlIO::via> has been upgraded from version 0.12 to 0.14.

=item *

L<Pod::Escapes> has been upgraded from version 1.04 to 1.06.

=item *

L<Pod::Functions> has been upgraded from version 1.06 to 1.08.

=item *

L<Pod::Html> has been upgraded from version 1.18 to 1.21.

=item *

L<Pod::Parser> has been upgraded from version 1.60 to 1.62.

=item *

L<Pod::Perldoc> has been upgraded from version 3.19 to 3.23.

=item *

L<Pod::Usage> has been upgraded from version 1.61 to 1.63.

=item *

L<POSIX> has been upgraded from version 1.32 to 1.38_03.

=item *

L<re> has been upgraded from version 0.23 to 0.26.

=item *

L<Safe> has been upgraded from version 2.35 to 2.37.

=item *

L<Scalar::Util> has been upgraded from version 1.27 to 1.38.

=item *

L<SDBM_File> has been upgraded from version 1.09 to 1.11.

=item *

L<Socket> has been upgraded from version 2.009 to 2.013.

=item *

L<Storable> has been upgraded from version 2.41 to 2.49.

=item *

L<strict> has been upgraded from version 1.07 to 1.08.

=item *

L<subs> has been upgraded from version 1.01 to 1.02.

=item *

L<Sys::Hostname> has been upgraded from version 1.17 to 1.18.

=item *

L<Sys::Syslog> has been upgraded from version 0.32 to 0.33.

=item *

L<Term::Cap> has been upgraded from version 1.13 to 1.15.

=item *

L<Term::ReadLine> has been upgraded from version 1.12 to 1.14.

=item *

L<Test::Harness> has been upgraded from version 3.26 to 3.30.

=item *

L<Test::Simple> has been upgraded from version 0.98 to 1.001002.

=item *

L<Text::ParseWords> has been upgraded from version 3.28 to 3.29.

=item *

L<Text::Tabs> has been upgraded from version 2012.0818 to 2013.0523.

=item *

L<Text::Wrap> has been upgraded from version 2012.0818 to 2013.0523.

=item *

L<Thread> has been upgraded from version 3.02 to 3.04.

=item *

L<Thread::Queue> has been upgraded from version 3.02 to 3.05.

=item *

L<threads> has been upgraded from version 1.86 to 1.93.

=item *

L<threads::shared> has been upgraded from version 1.43 to 1.46.

=item *

L<Tie::Array> has been upgraded from version 1.05 to 1.06.

=item *

L<Tie::File> has been upgraded from version 0.99 to 1.00.

=item *

L<Tie::Hash> has been upgraded from version 1.04 to 1.05.

=item *

L<Tie::Scalar> has been upgraded from version 1.02 to 1.03.

=item *

L<Tie::StdHandle> has been upgraded from version 4.3 to 4.4.

=item *

L<Time::HiRes> has been upgraded from version 1.9725 to 1.9726.

=item *

L<Time::Piece> has been upgraded from version 1.20_01 to 1.27.

=item *

L<Unicode::Collate> has been upgraded from version 0.97 to 1.04.

=item *

L<Unicode::Normalize> has been upgraded from version 1.16 to 1.17.

=item *

L<Unicode::UCD> has been upgraded from version 0.51 to 0.57.

=item *

L<utf8> has been upgraded from version 1.10 to 1.13.

=item *

L<version> has been upgraded from version 0.9902 to 0.9908.

=item *

L<vmsish> has been upgraded from version 1.03 to 1.04.

=item *

L<warnings> has been upgraded from version 1.18 to 1.23.

=item *

L<Win32> has been upgraded from version 0.47 to 0.49.

=item *

L<XS::Typemap> has been upgraded from version 0.10 to 0.13.

=item *

L<XSLoader> has been upgraded from version 0.16 to 0.17.

=back

=head1 Documentation

=head2 New Documentation

=head3 L<perlrepository>

This document was removed (actually, renamed L<perlgit> and given a major
overhaul) in Perl v5.14, causing Perl documentation websites to show the now
out of date version in Perl v5.12 as the latest version.  It has now been
restored in stub form, directing readers to current information.

=head2 Changes to Existing Documentation

=head3 L<perldata>

=over 4

=item *

New sections have been added to document the new index/value array slice and
key/value hash slice syntax.

=back

=head3 L<perldebguts>

=over 4

=item *

The C<DB::goto> and C<DB::lsub> debugger subroutines are now documented.  [perl
#77680]

=back

=head3 L<perlexperiment>

=over

=item *

C<\s> matching C<\cK> is marked experimental.

=item *

ithreads were accepted in v5.8.0 (but are discouraged as of v5.20.0).

=item *

Long doubles are not considered experimental.

=item *

Code in regular expressions, regular expression backtracking verbs,
and lvalue subroutines are no longer listed as experimental.  (This
also affects L<perlre> and L<perlsub>.)

=back

=head3 L<perlfunc>

=over

=item *

C<chop> and C<chomp> now note that they can reset the hash iterator.

=item *

C<exec>'s handling of arguments is now more clearly documented.

=item *

C<eval EXPR> now has caveats about expanding floating point numbers in some
locales.

=item *

C<goto EXPR> is now documented to handle an expression that evaluates to a
code reference as if it was C<goto &$coderef>.  This behavior is at least ten
years old.

=item *

Since Perl v5.10, it has been possible for subroutines in C<@INC> to return
a reference to a scalar holding initial source code to prepend to the file.
This is now documented.

=item *

The documentation of C<ref> has been updated to recommend the use of
C<blessed>, C<isa> and C<reftype> when dealing with references to blessed
objects.

=back

=head3 L<perlguts>

=over 4

=item *

Numerous minor changes have been made to reflect changes made to the perl
internals in this release.

=item *

New sections on L<Read-Only Values|perlguts/"Read-Only Values"> and
L<Copy on Write|perlguts/"Copy on Write"> have been added.

=back

=head3 L<perlhack>

=over 4

=item *

The L<Super Quick Patch Guide|perlhack/SUPER QUICK PATCH GUIDE> section has
been updated.

=back

=head3 L<perlhacktips>

=over 4

=item *

The documentation has been updated to include some more examples of C<gdb>
usage.

=back

=head3 L<perllexwarn>

=over 4

=item *

The L<perllexwarn> documentation used to describe the hierarchy of warning
categories understood by the L<warnings> pragma. That description has now
been moved to the L<warnings> documentation itself, leaving L<perllexwarn>
as a stub that points to it. This change consolidates all documentation for
lexical warnings in a single place.

=back

=head3 L<perllocale>

=over

=item *

The documentation now mentions F<fc()> and C<\F>, and includes many
clarifications and corrections in general.

=back

=head3 L<perlop>

=over 4

=item *

The language design of Perl has always called for monomorphic operators.
This is now mentioned explicitly.

=back

=head3 L<perlopentut>

=over 4

=item *

The C<open> tutorial has been completely rewritten by Tom Christiansen, and now
focuses on covering only the basics, rather than providing a comprehensive
reference to all things openable.  This rewrite came as the result of a
vigorous discussion on perl5-porters kicked off by a set of improvements
written by Alexander Hartmaier to the existing L<perlopentut>.  A "more than
you ever wanted to know about C<open>" document may follow in subsequent
versions of perl.

=back

=head3 L<perlre>

=over 4

=item *

The fact that the regexp engine makes no effort to call (?{}) and (??{})
constructs any specified number of times (although it will basically DWIM
in case of a successful match) has been documented.

=item *

The C</r> modifier (for non-destructive substitution) is now documented. [perl
#119151]

=item *

The documentation for C</x> and C<(?# comment)> has been expanded and clarified.

=back

=head3 L<perlreguts>

=over 4

=item *

The documentation has been updated in the light of recent changes to
F<regcomp.c>.

=back

=head3 L<perlsub>

=over 4

=item *

The need to predeclare recursive functions with prototypes in order for the
prototype to be honoured in the recursive call is now documented. [perl #2726]

=item *

A list of subroutine names used by the perl implementation is now included.
[perl #77680]

=back

=head3 L<perltrap>

=over 4

=item *

There is now a L<JavaScript|perltrap/JavaScript Traps> section.

=back

=head3 L<perlunicode>

=over 4

=item *

The documentation has been updated to reflect C<Bidi_Class> changes in
Unicode 6.3.

=back

=head3 L<perlvar>

=over 4

=item *

A new section explaining the performance issues of $`, $& and $', including
workarounds and changes in different versions of Perl, has been added.

=item *

Three L<English> variable names which have long been documented but do not
actually exist have been removed from the documentation.  These were
C<$OLD_PERL_VERSION>, C<$OFMT>, and C<$ARRAY_BASE>.

(Actually, C<OLD_PERL_VERSION> I<does> exist, starting with this revision, but
remained undocumented until perl 5.22.0.)

=back

=head3 L<perlxs>

=over 4

=item *

Several problems in the C<MY_CXT> example have been fixed.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

L<delete argument is indexE<sol>value array slice, use array slice|perldiag/"delete argument is index/value array slice, use array slice">

(F) You used index/value array slice syntax (C<%array[...]>) as the argument to
C<delete>.  You probably meant C<@array[...]> with an @ symbol instead.

=item *

L<delete argument is keyE<sol>value hash slice, use hash slice|perldiag/"delete argument is key/value hash slice, use hash slice">

(F) You used key/value hash slice syntax (C<%hash{...}>) as the argument to
C<delete>.  You probably meant C<@hash{...}> with an @ symbol instead.

=item *

L<Magical list constants are not supported|perldiag/"Magical list constants are
not supported">

(F) You assigned a magical array to a stash element, and then tried to use the
subroutine from the same slot.  You are asking Perl to do something it cannot
do, details subject to change between Perl versions.

=item *

Added L<Setting $E<sol> to a %s reference is forbidden|perldiag/"Setting $E<sol> to %s reference is forbidden">

=back

=head3 New Warnings

=over 4

=item *

L<%s on reference is experimental|perldiag/"push on reference is experimental">:

The "auto-deref" feature is experimental.

Starting in v5.14.0, it was possible to use push, pop, keys, and other
built-in functions not only on aggregate types, but on references to
them.  The feature was not deployed to its original intended
specification, and now may become redundant to postfix dereferencing.
It has always been categorized as an experimental feature, and in
v5.20.0 is carries a warning as such.

Warnings will now be issued at compile time when these operations are
detected.

  no if $] >= 5.01908, warnings => "experimental::autoderef";

Consider, though, replacing the use of these features, as they may
change behavior again before becoming stable.

=item *

L<A sequence of multiple spaces in a charnames alias definition is deprecated|perldiag/"A sequence of multiple spaces in a charnames alias definition is deprecated">

L<Trailing white-space in a charnames alias definition is deprecated|perldiag/"Trailing white-space in a charnames alias definition is deprecated">

These two deprecation warnings involving C<\N{...}> were incorrectly
implemented.  They did not warn by default (now they do) and could not be
made fatal via C<< use warnings FATAL => 'deprecated' >> (now they can).

=item *

L<Attribute prototype(%s) discards earlier prototype attribute in same sub|perldiag/"Attribute prototype(%s) discards earlier prototype attribute in same sub">

(W misc) A sub was declared as C<sub foo : prototype(A) : prototype(B) {}>, for
example.  Since each sub can only have one prototype, the earlier
declaration(s) are discarded while the last one is applied.

=item *

L<Invalid \0 character in %s for %s: %s\0%s|perldiag/"Invalid \0 character in %s for %s: %s\0%s">

(W syscalls) Embedded \0 characters in pathnames or other system call arguments
produce a warning as of 5.20.  The parts after the \0 were formerly ignored by
system calls.

=item *

L<Matched non-Unicode code point 0x%X against Unicode property; may not be portable|perldiag/"Matched non-Unicode code point 0x%X against Unicode property; may not be portable">.

This replaces the message "Code point 0x%X is not Unicode, all \p{} matches
fail; all \P{} matches succeed".

=item *

L<Missing ']' in prototype for %s : %s|perldiag/"Missing ']' in prototype for %s : %s">

(W illegalproto) A grouping was started with C<[> but never closed with C<]>.

=item *

L<Possible precedence issue with control flow operator|perldiag/"Possible precedence issue with control flow operator">

(W syntax) There is a possible problem with the mixing of a control flow
operator (e.g. C<return>) and a low-precedence operator like C<or>.  Consider:

    sub { return $a or $b; }

This is parsed as:

    sub { (return $a) or $b; }

Which is effectively just:

    sub { return $a; }

Either use parentheses or the high-precedence variant of the operator.

Note this may be also triggered for constructs like:

    sub { 1 if die; }

=item *

L<Postfix dereference is experimental|perldiag/"Postfix dereference is experimental">

(S experimental::postderef) This warning is emitted if you use the experimental
postfix dereference syntax.  Simply suppress the warning if you want to use the
feature, but know that in doing so you are taking the risk of using an
experimental feature which may change or be removed in a future Perl version:

    no warnings "experimental::postderef";
    use feature "postderef", "postderef_qq";
    $ref->$*;
    $aref->@*;
    $aref->@[@indices];
    ... etc ...

=item *

L<Prototype '%s' overridden by attribute 'prototype(%s)' in %s|perldiag/"Prototype '%s' overridden by attribute 'prototype(%s)' in %s">

(W prototype) A prototype was declared in both the parentheses after the sub
name and via the prototype attribute.  The prototype in parentheses is useless,
since it will be replaced by the prototype from the attribute before it's ever
used.

=item *

L<Scalar value @%s[%s] better written as $%s[%s]|perldiag/"Scalar value @%s[%s] better written as $%s[%s]">

(W syntax) In scalar context, you've used an array index/value slice (indicated
by %) to select a single element of an array.  Generally it's better to ask for
a scalar value (indicated by $).  The difference is that C<$foo[&bar]> always
behaves like a scalar, both in the value it returns and when evaluating its
argument, while C<%foo[&bar]> provides a list context to its subscript, which
can do weird things if you're expecting only one subscript.  When called in
list context, it also returns the index (what C<&bar> returns) in addition to
the value.

=item *

L<Scalar value @%s{%s} better written as $%s{%s}|perldiag/"Scalar value @%s{%s} better written as $%s{%s}">

(W syntax) In scalar context, you've used a hash key/value slice (indicated by
%) to select a single element of a hash.  Generally it's better to ask for a
scalar value (indicated by $).  The difference is that C<$foo{&bar}> always
behaves like a scalar, both in the value it returns and when evaluating its
argument, while C<@foo{&bar}> and provides a list context to its subscript,
which can do weird things if you're expecting only one subscript.  When called
in list context, it also returns the key in addition to the value.

=item *

L<Setting $E<sol> to a reference to %s as a form of slurp is deprecated, treating as undef|perldiag/"Setting $E<sol> to a reference to %s as a form of slurp is deprecated, treating as undef">

=item *

L<Unexpected exit %u|perldiag/"Unexpected exit %u">

(S) exit() was called or the script otherwise finished gracefully when
C<PERL_EXIT_WARN> was set in C<PL_exit_flags>.

=item *

L<Unexpected exit failure %d|perldiag/"Unexpected exit failure %d">

(S) An uncaught die() was called when C<PERL_EXIT_WARN> was set in
C<PL_exit_flags>.

=item *

L<Use of literal control characters in variable names is deprecated|perldiag/"Use of literal control characters in variable names is deprecated">

(D deprecated) Using literal control characters in the source to refer to the
^FOO variables, like $^X and ${^GLOBAL_PHASE} is now deprecated.  This only
affects code like $\cT, where \cT is a control (like a C<SOH>) in the
source code: ${"\cT"} and $^T remain valid.

=item *

L<Useless use of greediness modifier|perldiag/"Useless use of greediness modifier '%c' in regex; marked by <-- HERE in m/%s/">

This fixes [Perl #42957].

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

Warnings and errors from the regexp engine are now UTF-8 clean.

=item *

The "Unknown switch condition" error message has some slight changes.  This
error triggers when there is an unknown condition in a C<(?(foo))> conditional.
The error message used to read:

    Unknown switch condition (?(%s in regex;

But what %s could be was mostly up to luck.  For C<(?(foobar))>, you might have
seen "fo" or "f".  For Unicode characters, you would generally get a corrupted
string.  The message has been changed to read:

    Unknown switch condition (?(...)) in regex;

Additionally, the C<'E<lt>-- HERE'> marker in the error will now point to the
correct spot in the regex.

=item *

The "%s "\x%X" does not map to Unicode" warning is now correctly listed as a
severe warning rather than as a fatal error.

=item *

Under rare circumstances, one could get a "Can't coerce readonly REF to
string" instead of the customary "Modification of a read-only value".  This
alternate error message has been removed.

=item *

"Ambiguous use of * resolved as operator *": This and similar warnings
about "%" and "&" used to occur in some circumstances where there was no
operator of the type cited, so the warning was completely wrong.  This has
been fixed [perl #117535, #76910].

=item *

Warnings about malformed subroutine prototypes are now more consistent in
how the prototypes are rendered.  Some of these warnings would truncate
prototypes containing nulls.  In other cases one warning would suppress
another.  The warning about illegal characters in prototypes no longer says
"after '_'" if the bad character came before the underscore.

=item *

L<Perl folding rules are not up-to-date for 0x%X; please use the perlbug
utility to report; in regex; marked by <-- HERE in
mE<sol>%sE<sol>|perldiag/"Perl folding rules are not up-to-date for 0x%X;
please use the perlbug utility to report; in regex; marked by <-- HERE in
m/%s/">

This message is now only in the regexp category, and not in the deprecated
category.  It is still a default (i.e., severe) warning [perl #89648].

=item *

L<%%s[%s] in scalar context better written as $%s[%s]|perldiag/"%%s[%s] in scalar context better written as $%s[%s]">

This warning now occurs for any C<%array[$index]> or C<%hash{key}> known to
be in scalar context at compile time.  Previously it was worded "Scalar
value %%s[%s] better written as $%s[%s]".

=item *

L<Switch condition not recognized in regex; marked by <-- HERE in mE<sol>%sE<sol>|perldiag/"Switch condition not recognized in regex; marked by <-- HERE in m/%s/">:

The description for this diagnostic has been extended to cover all cases where the warning may occur.
Issues with the positioning of the arrow indicator have also been resolved.

=item *

The error messages for C<my($a?$b$c)> and C<my(do{})> now mention "conditional
expression" and "do block", respectively, instead of reading 'Can't declare
null operation in "my"'.

=item *

When C<use re "debug"> executes a regex containing a backreference, the
debugging output now shows what string is being matched.

=item *

The now fatal error message C<Character following "\c" must be ASCII> has been
reworded as C<Character following "\c" must be printable ASCII> to emphasize
that in C<\cI<X>>, I<X> must be a I<printable (non-control)> ASCII character.

=back

=head1 Utility Changes

=head3 L<a2p>

=over 4

=item *

A possible crash from an off-by-one error when trying to access before the
beginning of a buffer has been fixed.  [perl #120244]

=back

=head3 F<bisect.pl>

The git bisection tool F<Porting/bisect.pl> has had many enhancements.

It is provided as part of the source distribution but not installed because
it is not self-contained as it relies on being run from within a git
checkout. Note also that it makes no attempt to fix tests, correct runtime
bugs or make something useful to install - its purpose is to make minimal
changes to get any historical revision of interest to build and run as close
as possible to "as-was", and thereby make C<git bisect> easy to use.

=over 4

=item *

Can optionally run the test case with a timeout.

=item *

Can now run in-place in a clean git checkout.

=item *

Can run the test case under C<valgrind>.

=item *

Can apply user supplied patches and fixes to the source checkout before
building.

=item *

Now has fixups to enable building several more historical ranges of bleadperl,
which can be useful for pinpointing the origins of bugs or behaviour changes.

=back

=head3 L<find2perl>

=over 4

=item *

L<find2perl> now handles C<?> wildcards correctly.  [perl #113054]

=back

=head3 L<perlbug>

=over 4

=item *

F<perlbug> now has a C<-p> option for attaching patches with a bug report.

=item *

L<perlbug> has been modified to supply the report template with CRLF line
endings on Windows.
L<[GH #13612]|https://github.com/Perl/perl5/issues/13612>

=item *

L<perlbug> now makes as few assumptions as possible about the encoding of the
report.  This will likely change in the future to assume UTF-8 by default but
allow a user override.

=back

=head1 Configuration and Compilation

=over 4

=item *

The F<Makefile.PL> for L<SDBM_File> now generates a better F<Makefile>, which
avoids a race condition during parallel makes, which could cause the build to
fail.  This is the last known parallel make problem (on *nix platforms), and
therefore we believe that a parallel make should now always be error free.

=item *

F<installperl> and F<installman>'s option handling has been refactored to use
L<Getopt::Long>. Both are used by the F<Makefile> C<install> targets, and
are not installed, so these changes are only likely to affect custom
installation scripts.

=over 4

=item *

Single letter options now also have long names.

=item *

Invalid options are now rejected.

=item *

Command line arguments that are not options are now rejected.

=item *

Each now has a C<--help> option to display the usage message.

=back

The behaviour for all valid documented invocations is unchanged.

=item *

Where possible, the build now avoids recursive invocations of F<make> when
building pure-Perl extensions, without removing any parallelism from the
build. Currently around 80 extensions can be processed directly by the
