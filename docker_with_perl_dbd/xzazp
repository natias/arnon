	0x10787,
	0x107B1,
	0x107B2,
	0x107BB,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10860,
	0x10877,
	0x10880,
	0x1089F,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x10900,
	0x10916,
	0x10920,
	0x1093A,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A36,
	0x10A60,
	0x10A7D,
	0x10A80,
	0x10A9D,
	0x10AC0,
	0x10AC8,
	0x10AC9,
	0x10AE5,
	0x10B00,
	0x10B36,
	0x10B40,
	0x10B56,
	0x10B60,
	0x10B73,
	0x10B80,
	0x10B92,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10D00,
	0x10D24,
	0x10E80,
	0x10EAA,
	0x10EB0,
	0x10EB2,
	0x10F00,
	0x10F1D,
	0x10F27,
	0x10F28,
	0x10F30,
	0x10F46,
	0x10F70,
	0x10F82,
	0x10FB0,
	0x10FC5,
	0x10FE0,
	0x10FF7,
	0x11003,
	0x11038,
	0x11071,
	0x11073,
	0x11075,
	0x11076,
	0x11083,
	0x110B0,
	0x110D0,
	0x110E9,
	0x11103,
	0x11127,
	0x11144,
	0x11145,
	0x11147,
	0x11148,
	0x11150,
	0x11173,
	0x11176,
	0x11177,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C5,
	0x111DA,
	0x111DB,
	0x111DC,
	0x111DD,
	0x11200,
	0x11212,
	0x11213,
	0x1122C,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112DF,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x1133E,
	0x11350,
	0x11351,
	0x1135D,
	0x11362,
	0x11400,
	0x11435,
	0x11447,
	0x1144B,
	0x1145F,
	0x11462,
	0x11480,
	0x114B0,
	0x114C4,
	0x114C6,
	0x114C7,
	0x114C8,
	0x11580,
	0x115AF,
	0x115D8,
	0x115DC,
	0x11600,
	0x11630,
	0x11644,
	0x11645,
	0x11680,
	0x116AB,
	0x116B8,
	0x116B9,
	0x11700,
	0x1171B,
	0x11740,
	0x11747,
	0x11800,
	0x1182C,
	0x118A0,
	0x118E0,
	0x118FF,
	0x11907,
	0x11909,
	0x1190A,
	0x1190C,
	0x11914,
	0x11915,
	0x11917,
	0x11918,
	0x11930,
	0x1193F,
	0x11940,
	0x11941,
	0x11942,
	0x119A0,
	0x119A8,
	0x119AA,
	0x119D1,
	0x119E1,
	0x119E2,
	0x119E3,
	0x119E4,
	0x11A00,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A50,
	0x11A51,
	0x11A5C,
	0x11A8A,
	0x11A9D,
	0x11A9E,
	0x11AB0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C2F,
	0x11C40,
	0x11C41,
	0x11C72,
	0x11C90,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D31,
	0x11D46,
	0x11D47,
	0x11D60,
	0x11D66,
	0x11D67,
	0x11D69,
	0x11D6A,
	0x11D8A,
	0x11D98,
	0x11D99,
	0x11EE0,
	0x11EF3,
	0x11FB0,
	0x11FB1,
	0x12000,
	0x1239A,
	0x12480,
	0x12544,
	0x12F90,
	0x12FF1,
	0x13000,
	0x1342F,
	0x14400,
	0x14647,
	0x16800,
	0x16A39,
	0x16A40,
	0x16A5F,
	0x16A70,
	0x16ABF,
	0x16AD0,
	0x16AEE,
	0x16B00,
	0x16B30,
	0x16B40,
	0x16B44,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16E40,
	0x16E80,
	0x16F00,
	0x16F4B,
	0x16F50,
	0x16F51,
	0x16F93,
	0x16FA0,
	0x16FE0,
	0x16FE2,
	0x16FE3,
	0x16FE4,
	0x17000,
	0x187F8,
	0x18800,
	0x18CD6,
	0x18D00,
	0x18D09,
	0x1AFF0,
	0x1AFF4,
	0x1AFF5,
	0x1AFFC,
	0x1AFFD,
	0x1AFFF,
	0x1B000,
	0x1B123,
	0x1B150,
	0x1B153,
	0x1B164,
	0x1B168,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1DF00,
	0x1DF1F,
	0x1E100,
	0x1E12D,
	0x1E137,
	0x1E13E,
	0x1E14E,
	0x1E14F,
	0x1E290,
	0x1E2AE,
	0x1E2C0,
	0x1E2EC,
	0x1E7E0,
	0x1E7E7,
	0x1E7E8,
	0x1E7EC,
	0x1E7ED,
	0x1E7EF,
	0x1E7F0,
	0x1E7FF,
	0x1E800,
	0x1E8C5,
	0x1E900,
	0x1E944,
	0x1E94B,
	0x1E94C,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x20000,
	0x2A6E0,
	0x2A700,
	0x2B739,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0x30000,
	0x3134B
};

#  endif	/* EBCDIC 037 */

static const UV UNI_LANA_invlist[] = {  /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE
};

static const UV UNI_LAO_invlist[] = {  /* for all charsets */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE86,
	0xE8B,
	0xE8C,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_LATIN1_invlist[] = {  /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x80,
	0x100
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_LATIN1_invlist[] = {  /* for EBCDIC 1047 */
	55,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x15,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x26,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xAD,
	0xAE,
	0xBD,
	0xBE,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA,
	0x100
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_LATIN1_invlist[] = {  /* for EBCDIC 037 */
	57,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x16,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x25,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xB0,
	0xB1,
	0xBA,
	0xBC,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA,
	0x100
};

#  endif	/* EBCDIC 037 */

static const UV UNI_LATINEXTA_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x100,
	0x180
};

static const UV UNI_LATINEXTADDITIONAL_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1E00,
	0x1F00
};

static const UV UNI_LATINEXTB_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x180,
	0x250
};

static const UV UNI_LATINEXTC_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2C60,
	0x2C80
};

static const UV UNI_LATINEXTD_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA720,
	0xA800
};

static const UV UNI_LATINEXTE_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAB30,
	0xAB70
};

static const UV UNI_LATINEXTF_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10780,
	0x107C0
};

static const UV UNI_LATINEXTG_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1DF00,
	0x1E000
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_LATN_invlist[] = {  /* for ASCII/Latin1 */
	93,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2B9,
	0x2E0,
	0x2E5,
	0x363,
	0x370,
	0x485,
	0x487,
	0x951,
	0x953,
	0x10FB,
	0x10FC,
	0x1D00,
	0x1D26,
	0x1D2C,
	0x1D5D,
	0x1D62,
	0x1D66,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1DBF,
	0x1E00,
	0x1F00,
	0x202F,
	0x2030,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20F0,
	0x20F1,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C60,
	0x2C80,
	0xA700,
	0xA708,
	0xA722,
	0xA788,
	0xA78B,
	0xA7CB,
	0xA7D0,
	0xA7D2,
	0xA7D3,
	0xA7D4,
	0xA7D5,
	0xA7DA,
	0xA7F2,
	0xA800,
	0xA92E,
	0xA92F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB65,
	0xAB66,
	0xAB6A,
	0xFB00,
	0xFB07,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10780,
	0x10786,
	0x10787,
	0x107B1,
	0x107B2,
	0x107BB,
	0x1DF00,
	0x1DF1F
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_LATN_invlist[] = {  /* for EBCDIC 1047 */
	119,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x2B9,
	0x2E0,
	0x2E5,
	0x363,
	0x370,
	0x485,
	0x487,
	0x951,
	0x953,
	0x10FB,
	0x10FC,
	0x1D00,
	0x1D26,
	0x1D2C,
	0x1D5D,
	0x1D62,
	0x1D66,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1DBF,
	0x1E00,
	0x1F00,
	0x202F,
	0x2030,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20F0,
	0x20F1,
	0x212A,
	0x212C,
	0x2132,
	0x2133,
	0x214E,
	0x214F,
	0x2160,
	0x2189,
	0x2C60,
	0x2C80,
	0xA700,
	0xA708,
	0xA722,
	0xA788,
	0xA78B,
	0xA7CB,
	0xA7D0,
	0xA7D2,
	0xA7D3,
	0xA7D4,
	0xA7D5,
	0xA7DA,
	0xA7F2,
	0xA800,
	0xA92E,
	0xA92F,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB65,
	0xAB66,
	0xAB6A,
	0xFB00,
	0xFB07,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10780,
	0x10786,
	0x10787,
	0x107B1,
	0x107B2,
	0x107BB,
	0x1DF00,
	0x1DF1F
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_LATN_invlist[] = {  /* for EBCDIC 037 */
	115,	/* Number of elements */
