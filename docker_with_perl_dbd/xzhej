
=item numberOfMembers()

Return the number of members I have

=item memberNames()

Return a list of the (internal) file names of the zip members

=item memberNamed( $string )

=item memberNamed( { zipName => $string } )

Return ref to member whose filename equals given filename or
undef. C<$string> must be in Zip (Unix) filename format.

=item membersMatching( $regex )

=item membersMatching( { regex => $regex } )

Return array of members whose filenames match given regular
expression in list context. Returns number of matching
members in scalar context.

    my @textFileMembers = $zip->membersMatching( '.*\.txt' );
    # or
    my $numberOfTextFiles = $zip->membersMatching( '.*\.txt' );

=item zip64()

Returns whether the previous read or write of the archive has
been done in zip64 format.

=item desiredZip64Mode()

Gets or sets which parts of the archive should be written in
zip64 format: All parts as needed (ZIP64_AS_NEEDED), the default,
force writing the zip64 end of central directory record
(ZIP64_EOCD), force writing the zip64 EOCD record and all headers
in zip64 format (ZIP64_HEADERS).

=item versionMadeBy()

=item versionNeededToExtract()

Gets the fields from the zip64 end of central directory
record. These are always 0 if the archive is not in zip64 format.

=item diskNumber()

Return the disk that I start on. Not used for writing zips,
but might be interesting if you read a zip in. This should be
0, as Archive::Zip does not handle multi-volume archives.

=item diskNumberWithStartOfCentralDirectory()

Return the disk number that holds the beginning of the
central directory. Not used for writing zips, but might be
interesting if you read a zip in. This should be 0, as
Archive::Zip does not handle multi-volume archives.

=item numberOfCentralDirectoriesOnThisDisk()

Return the number of CD structures in the zipfile last read in.
Not used for writing zips, but might be interesting if you read a zip
in.

=item numberOfCentralDirectories()

Return the number of CD structures in the zipfile last read in.
Not used for writing zips, but might be interesting if you read a zip
in.

=item centralDirectorySize()

Returns central directory size, as read from an external zip
file. Not used for writing zips, but might be interesting if
you read a zip in.

=item centralDirectoryOffsetWRTStartingDiskNumber()

Returns the offset into the zip file where the CD begins. Not
used for writing zips, but might be interesting if you read a
zip in.

=item zipfileComment( [ $string ] )

=item zipfileComment( [ { comment => $string } ] )

Get or set the zipfile comment. Returns the old comment.

    print $zip->zipfileComment();
    $zip->zipfileComment( 'New Comment' );

=item eocdOffset()

Returns the (unexpected) number of bytes between where the
EOCD was found and where it expected to be. This is normally
0, but would be positive if something (a virus, perhaps) had
added bytes somewhere before the EOCD. Not used for writing
zips, but might be interesting if you read a zip in. Here is
an example of how you can diagnose this:

  my $zip = Archive::Zip->new('somefile.zip');
  if ($zip->eocdOffset())
  {
    warn "A virus has added ", $zip->eocdOffset, " bytes of garbage\n";
  }

The C<eocdOffset()> is used to adjust the starting position of member
headers, if necessary.

=item fileName()

Returns the name of the file last read from. If nothing has
been read yet, returns an empty string; if read from a file
handle, returns the handle in string form.

=back

=head2 Zip Archive Member Operations

Various operations on a zip file modify members. When a member is
passed as an argument, you can either use a reference to the member
itself, or the name of a member. Of course, using the name requires
that names be unique within a zip (this is not enforced).

=over 4

=item removeMember( $memberOrName )

=item removeMember( { memberOrZipName => $memberOrName } )

Remove and return the given member, or match its name and
remove it. Returns undef if member or name does not exist in this
Zip. No-op if member does not belong to this zip.

=item replaceMember( $memberOrName, $newMember )

=item replaceMember( { memberOrZipName => $memberOrName,
    newMember => $newMember } )

Remove and return the given member, or match its name and
remove it. Replace with new member. Returns undef if member or
name does not exist in this Zip, or if C<$newMember> is undefined.

It is an (undiagnosed) error to provide a C<$newMember> that is a
member of the zip being modified.

    my $member1 = $zip->removeMember( 'xyz' );
    my $member2 = $zip->replaceMember( 'abc', $member1 );
    # now, $member2 (named 'abc') is not in $zip,
    # and $member1 (named 'xyz') is, having taken $member2's place.

=item extractMember( $memberOrName [, $extractedName ] )

=item extractMember( { memberOrZipName => $memberOrName
    [, name => $extractedName ] } )

Extract the given member, or match its name and extract it.
Returns undef if member does not exist in this Zip. If
optional second arg is given, use it as the name of the
extracted member. Otherwise, the internal filename of the
member is used as the name of the extracted file or
directory.
If you pass C<$extractedName>, it should be in the local file
system's format.
If you do not pass C<$extractedName> and the internal filename traverses
a parent directory or a symbolic link, the extraction will be aborted with
C<AC_ERROR> for security reason.
All necessary directories will be created. Returns C<AZ_OK>
on success.

=item extractMemberWithoutPaths( $memberOrName [, $extractedName ] )

=item extractMemberWithoutPaths( { memberOrZipName => $memberOrName
    [, name => $extractedName ] } )

Extract the given member, or match its name and extract it.
Does not use path information (extracts into the current
directory). Returns undef if member does not exist in this
Zip.
If optional second arg is given, use it as the name of the
extracted member (its paths will be deleted too). Otherwise,
the internal filename of the member (minus paths) is used as
the name of the extracted file or directory. Returns C<AZ_OK>
on success.
If you do not pass C<$extractedName> and the internal filename is equalled
to a local symbolic link, the extraction will be aborted with C<AC_ERROR> for
security reason.

=item addMember( $member )

=item addMember( { member => $member } )

Append a member (possibly from another zip file) to the zip
file. Returns the new member. Generally, you will use
addFile(), addDirectory(), addFileOrDirectory(), addString(),
or read() to add members.

    # Move member named 'abc' to end of zip:
    my $member = $zip->removeMember( 'abc' );
    $zip->addMember( $member );

=item updateMember( $memberOrName, $fileName )

=item updateMember( { memberOrZipName => $memberOrName, name => $fileName } )

Update a single member from the file or directory named C<$fileName>.
Returns the (possibly added or updated) member, if any; C<undef> on
errors.
The comparison is based on C<lastModTime()> and (in the case of a
non-directory) the size of the file.

=item addFile( $fileName [, $newName, $compressionLevel ] )

=item addFile( { filename => $fileName
    [, zipName => $newName, compressionLevel => $compressionLevel } ] )

Append a member whose data comes from an external file,
returning the member or undef. The member will have its file
name set to the name of the external file, and its
desiredCompressionMethod set to COMPRESSION_DEFLATED. The
file attributes and last modification time will be set from
the file.
If the name given does not represent a readable plain file or
symbolic link, undef will be returned. C<$fileName> must be
in the format required for the local file system.
The optional C<$newName> argument sets the internal file name
to something different than the given $fileName. C<$newName>,
if given, must be in Zip name format (i.e. Unix).
The text mode bit will be set if the contents appears to be
text (as returned by the C<-T> perl operator).


I<NOTE> that you should not (generally) use absolute path names
in zip member names, as this will cause problems with some zip
tools as well as introduce a security hole and make the zip
harder to use.

=item addDirectory( $directoryName [, $fileName ] )

=item addDirectory( { directoryName => $directoryName
    [, zipName => $fileName ] } )


Append a member created from the given directory name. The
directory name does not have to name an existing directory.
If the named directory exists, the file modification time and
permissions are set from the existing directory, otherwise
they are set to now and permissive default permissions.
C<$directoryName> must be in local file system format.
The optional second argument sets the name of the archive
member (which defaults to C<$directoryName>). If given, it
must be in Zip (Unix) format.
Returns the new member.

=item addFileOrDirectory( $name [, $newName, $compressionLevel ] )

=item addFileOrDirectory( { name => $name [, zipName => $newName,
    compressionLevel => $compressionLevel ] } )


Append a member from the file or directory named $name. If
$newName is given, use it for the name of the new member.
Will add or remove trailing slashes from $newName as needed.
C<$name> must be in local file system format.
The optional second argument sets the name of the archive
member (which defaults to C<$name>). If given, it must be in
Zip (Unix) format.

=item addString( $stringOrStringRef, $name, [$compressionLevel] )

=item addString( { string => $stringOrStringRef [, zipName => $name,
    compressionLevel => $compressionLevel ] } )

Append a member created from the given string or string
reference. The name is given by the second argument.
Returns the new member. The last modification time will be
set to now, and the file attributes will be set to permissive
defaults.

    my $member = $zip->addString( 'This is a test', 'test.txt' );

=item contents( $memberOrMemberName [, $newContents ] )

=item contents( { memberOrZipName => $memberOrMemberName
    [, contents => $newContents ] } )


Returns the uncompressed data for a particular member, or
undef.

    print "xyz.txt contains " . $zip->contents( 'xyz.txt' );

Also can change the contents of a member:

    $zip->contents( 'xyz.txt', 'This is the new contents' );

If called expecting an array as the return value, it will include
the status as the second value in the array.

    ($content, $status) = $zip->contents( 'xyz.txt');

=back

=head2 Zip Archive I/O operations


A Zip archive can be written to a file or file handle, or read from
one.

=over 4

=item writeToFileNamed( $fileName )

=item writeToFileNamed( { fileName => $fileName } )

Write a zip archive to named file. Returns C<AZ_OK> on
success.

    my $status = $zip->writeToFileNamed( 'xx.zip' );
    die "error somewhere" if $status != AZ_OK;

Note that if you use the same name as an existing zip file
that you read in, you will clobber ZipFileMembers. So
instead, write to a different file name, then delete the
original.
If you use the C<overwrite()> or C<overwriteAs()> methods, you can
re-write the original zip in this way.
C<$fileName> should be a valid file name on your system.

=item writeToFileHandle( $fileHandle [, $seekable] )

Write a zip archive to a file handle. Return AZ_OK on
success. The optional second arg tells whether or not to try
to seek backwards to re-write headers. If not provided, it is
set if the Perl C<-f> test returns true. This could fail on
some operating systems, though.

    my $fh = IO::File->new( 'someFile.zip', 'w' );
    unless ( $zip->writeToFileHandle( $fh ) == AZ_OK ) {
        # error handling
    }

If you pass a file handle that is not seekable (like if
you're writing to a pipe or a socket), pass a false second
argument:

    my $fh = IO::File->new( '| cat > somefile.zip', 'w' );
    $zip->writeToFileHandle( $fh, 0 );   # fh is not seekable

If this method fails during the write of a member, that
member and all following it will return false from
C<wasWritten()>. See writeCentralDirectory() for a way to
deal with this.
If you want, you can write data to the file handle before
passing it to writeToFileHandle(); this could be used (for
instance) for making self-extracting archives. However, this
only works reliably when writing to a real file (as opposed
to STDOUT or some other possible non-file).

See examples/selfex.pl for how to write a self-extracting
archive.

=item writeCentralDirectory( $fileHandle [, $offset ] )

=item writeCentralDirectory( { fileHandle => $fileHandle
    [, offset => $offset ] } )

Writes the central directory structure to the given file
handle.

Returns AZ_OK on success. If given an $offset, will
seek to that point before writing. This can be used for
recovery in cases where writeToFileHandle or writeToFileNamed
returns an IO error because of running out of space on the
destination file.

You can truncate the zip by seeking backwards and then writing the
directory:

    my $fh = IO::File->new( 'someFile.zip', 'w' );
        my $retval = $zip->writeToFileHandle( $fh );
    if ( $retval == AZ_IO_ERROR ) {
        my @unwritten = grep { not $_->wasWritten() } $zip->members();
        if (@unwritten) {
            $zip->removeMember( $member ) foreach my $member ( @unwritten );
            $zip->writeCentralDirectory( $fh,
            $unwritten[0]->writeLocalHeaderRelativeOffset());
        }
    }

=item overwriteAs( $newName )

=item overwriteAs( { filename => $newName } )

Write the zip to the specified file, as safely as possible.
This is done by first writing to a temp file, then renaming
the original if it exists, then renaming the temp file, then
deleting the renamed original if it exists. Returns AZ_OK if
successful.

=item overwrite()

Write back to the original zip file. See overwriteAs() above.
If the zip was not ever read from a file, this generates an
error.

=item read( $fileName )

=item read( { filename => $fileName } )

Read zipfile headers from a zip file, appending new members.
Returns C<AZ_OK> or error code.

    my $zipFile = Archive::Zip->new();
    my $status = $zipFile->read( '/some/FileName.zip' );

=item readFromFileHandle( $fileHandle, $filename )

=item readFromFileHandle( { fileHandle => $fileHandle, filename => $filename } )

Read zipfile headers from an already-opened file handle,
appending new members. Does not close the file handle.
Returns C<AZ_OK> or error code. Note that this requires a
seekable file handle; reading from a stream is not yet
supported, but using in-memory data is.

    my $fh = IO::File->new( '/some/FileName.zip', 'r' );
    my $zip1 = Archive::Zip->new();
    my $status = $zip1->readFromFileHandle( $fh );
    my $zip2 = Archive::Zip->new();
    $status = $zip2->readFromFileHandle( $fh );

Read zip using in-memory data (recursable):

    open my $fh, "<", "archive.zip" or die $!;
    my $zip_data = do { local $.; <$fh> };
    my $zip = Archive::Zip->new;
    open my $dh, "+<", \$zip_data;
    $zip->readFromFileHandle ($dh);

=back

=head2 Zip Archive Tree operations

These used to be in Archive::Zip::Tree but got moved into
Archive::Zip. They enable operation on an entire tree of members or
files.
A usage example:

  use Archive::Zip;
  my $zip = Archive::Zip->new();

  # add all readable files and directories below . as xyz/*
  $zip->addTree( '.', 'xyz' );

  # add all readable plain files below /abc as def/*
  $zip->addTree( '/abc', 'def', sub { -f && -r } );

  # add all .c files below /tmp as stuff/*
  $zip->addTreeMatching( '/tmp', 'stuff', '\.c$' );

  # add all .o files below /tmp as stuff/* if they aren't writable
  $zip->addTreeMatching( '/tmp', 'stuff', '\.o$', sub { ! -w } );

  # add all .so files below /tmp that are smaller than 200 bytes as stuff/*
  $zip->addTreeMatching( '/tmp', 'stuff', '\.o$', sub { -s < 200 } );

  # and write them into a file
  $zip->writeToFileNamed('xxx.zip');

  # now extract the same files into /tmpx
  $zip->extractTree( 'stuff', '/tmpx' );

=over 4

=item $zip->addTree( $root, $dest [, $pred, $compressionLevel ] ) -- Add tree of files to a zip

=item $zip->addTree( { root => $root, zipName => $dest [, select => $pred,
    compressionLevel => $compressionLevel ] )

C<$root> is the root of the tree of files and directories to be
added. It is a valid directory name on your system. C<$dest> is
the name for the root in the zip file (undef or blank means
to use relative pathnames). It is a valid ZIP directory name
(that is, it uses forward slashes (/) for separating
directory components). C<$pred> is an optional subroutine
reference to select files: it is passed the name of the
prospective file or directory using C<$_>, and if it returns
true, the file or directory will be included. The default is
to add all readable files and directories. For instance,
using

  my $pred = sub { /\.txt/ };
  $zip->addTree( '.', '', $pred );

will add all the .txt files in and below the current
directory, using relative names, and making the names
identical in the zipfile:

  original name           zip member name
  ./xyz                   xyz
  ./a/                    a/
  ./a/b                   a/b

To translate absolute to relative pathnames, just pass them
in: $zip->addTree( '/c/d', 'a' );

  original name           zip member name
  /c/d/xyz                a/xyz
  /c/d/a/                 a/a/
  /c/d/a/b                a/a/b

Returns AZ_OK on success. Note that this will not follow
symbolic links to directories. Note also that this does not
check for the validity of filenames.

Note that you generally I<don't> want to make zip archive member names
absolute.

=item $zip->addTreeMatching( $root, $dest, $pattern [, $pred, $compressionLevel ] )

=item $zip->addTreeMatching( { root => $root, zipName => $dest, pattern =>
    $pattern [, select => $pred, compressionLevel => $compressionLevel ] } )

$root is the root of the tree of files and directories to be
added $dest is the name for the root in the zip file (undef
means to use relative pathnames) $pattern is a (non-anchored)
regular expression for filenames to match $pred is an
optional subroutine reference to select files: it is passed
the name of the prospective file or directory in C<$_>, and
if it returns true, the file or directory will be included.
The default is to add all readable files and directories. To
add all files in and below the current directory whose names
end in C<.pl>, and make them extract into a subdirectory
named C<xyz>, do this:

  $zip->addTreeMatching( '.', 'xyz', '\.pl$' )

To add all I<writable> files in and below the directory named
C</abc> whose names end in C<.pl>, and make them extract into
a subdirectory named C<xyz>, do this:

  $zip->addTreeMatching( '/abc', 'xyz', '\.pl$', sub { -w } )

Returns AZ_OK on success. Note that this will not follow
symbolic links to directories.

=item $zip->updateTree( $root [, $dest , $pred , $mirror, $compressionLevel ] );

=item $zip->updateTree( { root => $root [, zipName => $dest, select => $pred,
    mirror => $mirror, compressionLevel => $compressionLevel ] } );

Update a zip file from a directory tree.

C<updateTree()> takes the same arguments as C<addTree()>, but first
checks to see whether the file or directory already exists in the zip
file, and whether it has been changed.

If the fourth argument C<$mirror> is true, then delete all my members
if corresponding files were not found.

Returns an error code or AZ_OK if all is well.

=item $zip->extractTree( [ $root, $dest, $volume } ] )

=item $zip->extractTree( [ { root => $root, zipName => $dest, volume => $volume } ] )

If you don't give any arguments at all, will extract all the
files in the zip with their original names.

If you supply one argument for C<$root>, C<extractTree> will extract
all the members whose names start with C<$root> into the current
directory, stripping off C<$root> first.
C<$root> is in Zip (Unix) format.
For instance,

  $zip->extractTree( 'a' );

when applied to a zip containing the files:
a/x a/b/c ax/d/e d/e will extract:

a/x as ./x

a/b/c as ./b/c

If you give two arguments, C<extractTree> extracts all the members
whose names start with C<$root>. It will translate C<$root> into
C<$dest> to construct the destination file name.
C<$root> and C<$dest> are in Zip (Unix) format.
For instance,

   $zip->extractTree( 'a', 'd/e' );

when applied to a zip containing the files:
a/x a/b/c ax/d/e d/e will extract:

a/x to d/e/x

a/b/c to d/e/b/c and ignore ax/d/e and d/e

If you give three arguments, C<extractTree> extracts all the members
whose names start with C<$root>. It will translate C<$root> into
C<$dest> to construct the destination file name, and then it will
convert to local file system format, using C<$volume> as the name of
the destination volume.

C<$root> and C<$dest> are in Zip (Unix) format.

C<$volume> is in local file system format.

For instance, under Windows,

   $zip->extractTree( 'a', 'd/e', 'f:' );

when applied to a zip containing the files:
a/x a/b/c ax/d/e d/e will extract:

a/x to f:d/e/x

a/b/c to f:d/e/b/c and ignore ax/d/e and d/e

If you want absolute paths (the prior example used paths relative to
the current directory on the destination volume, you can specify these
in C<$dest>:

   $zip->extractTree( 'a', '/d/e', 'f:' );

when applied to a zip containing the files:
a/x a/b/c ax/d/e d/e will extract:

a/x to f:\d\e\x

a/b/c to f:\d\e\b\c and ignore ax/d/e and d/e

If the path to the extracted file traverses a parent directory or a symbolic
link, the extraction will be aborted with C<AC_ERROR> for security reason.
Returns an error code or AZ_OK if everything worked OK.

=back

=head1 Archive::Zip Global Variables

=over 4

=item $Archive::Zip::UNICODE

This variable governs how Unicode file and directory names are added
to or extracted from an archive. If set, file and directory names are considered
to be UTF-8 encoded. This is I<EXPERIMENTAL AND BUGGY (there are some edge cases
on Win32)>. Please report problems.

    {
        local $Archive::Zip::UNICODE = 1;
        $zip->addFile('Déjà vu.txt');
    }

=back

=head1 MEMBER OPERATIONS

=head2 Member Class Methods

Several constructors allow you to construct members without adding
them to a zip archive. These work the same as the addFile(),
addDirectory(), and addString() zip instance methods described above,
but they don't add the new members to a zip.

=over 4

=item Archive::Zip::Member->newFromString( $stringOrStringRef [, $fileName ] )

=item Archive::Zip::Member->newFromString( { string => $stringOrStringRef
    [, zipName => $fileName ] )

Construct a new member from the given string. Returns undef
on error.

    my $member = Archive::Zip::Member->newFromString( 'This is a test' );
    my $member = Archive::Zip::Member->newFromString( 'This is a test', 'test.txt' );
    my $member = Archive::Zip::Member->newFromString( { string => 'This is a test', zipName => 'test.txt' } );

=item newFromFile( $fileName [, $zipName ] )

=item newFromFile( { filename => $fileName [, zipName => $zipName ] } )

Construct a new member from the given file. Returns undef on
error.

    my $member = Archive::Zip::Member->newFromFile( 'xyz.txt' );

=item newDirectoryNamed( $directoryName [, $zipname ] )

=item newDirectoryNamed( { directoryName => $directoryName
    [, zipName => $zipname ] } )

Construct a new member from the given directory.
C<$directoryName> must be a valid name on your file system; it does not
have to exist.

If given, C<$zipname> will be the name of the zip member; it must be a
valid Zip (Unix) name. If not given, it will be converted from
C<$directoryName>.

Returns undef on error.

    my $member = Archive::Zip::Member->newDirectoryNamed( 'CVS/' );

=back

=head2 Member Simple Accessors

These methods get (and/or set) member attribute values.

The zip64 format requires parts of the member data to be stored
in the so-called extra fields.  You cannot get nor set this zip64
data through the extra field accessors described in this section.
In fact, the low-level member methods ensure that the zip64 data
in the extra fields is handled completely transparently and
invisibly to the user when members are read or written.

=over 4

=item zip64()

Returns whether the previous read or write of the member has been
done in zip64 format.

=item desiredZip64Mode()

Gets or sets whether the member's headers should be written in
zip64 format: As needed (ZIP64_AS_NEEDED), the default, or always
(ZIP64_HEADERS).

=item versionMadeBy()

Gets the field from the member header.

=item fileAttributeFormat( [ $format ] )

=item fileAttributeFormat( [ { format => $format ] } )

Gets or sets the field from the member header. These are
C<FA_*> values.

=item versionNeededToExtract()

Gets the field from the member header.

=item bitFlag()

Gets the general purpose bit field from the member header.
This is where the C<GPBF_*> bits live.

=item compressionMethod()

Returns the member compression method. This is the method
that is currently being used to compress the member data.
This will be COMPRESSION_STORED for added string or file
members, or any of the C<COMPRESSION_*> values for members
from a zip file. However, this module can only handle members
whose data is in COMPRESSION_STORED or COMPRESSION_DEFLATED
format.

=item desiredCompressionMethod( [ $method ] )

=item desiredCompressionMethod( [ { compressionMethod => $method } ] )

Get or set the member's C<desiredCompressionMethod>. This is
the compression method that will be used when the member is
written. Returns prior desiredCompressionMethod. Only
COMPRESSION_DEFLATED or COMPRESSION_STORED are valid
arguments. Changing to COMPRESSION_STORED will change the
member desiredCompressionLevel to 0; changing to
COMPRESSION_DEFLATED will change the member
desiredCompressionLevel to COMPRESSION_LEVEL_DEFAULT.

=item desiredCompressionLevel( [ $level ] )

=item desiredCompressionLevel( [ { compressionLevel => $level } ] )

Get or set the member's desiredCompressionLevel This is the
method that will be used to write. Returns prior
desiredCompressionLevel. Valid arguments are 0 through 9,
COMPRESSION_LEVEL_NONE, COMPRESSION_LEVEL_DEFAULT,
COMPRESSION_LEVEL_BEST_COMPRESSION, and
COMPRESSION_LEVEL_FASTEST. 0 or COMPRESSION_LEVEL_NONE will
change the desiredCompressionMethod to COMPRESSION_STORED.
All other arguments will change the desiredCompressionMethod
to COMPRESSION_DEFLATED.

=item externalFileName()

Return the member's external file name, if any, or undef.

=item fileName()

Get or set the member's internal filename. Returns the
(possibly new) filename. Names will have backslashes
converted to forward slashes, and will have multiple
consecutive slashes converted to single ones.

=item lastModFileDateTime()

Return the member's last modification date/time stamp in
MS-DOS format.

=item lastModTime()

Return the member's last modification date/time stamp,
converted to unix localtime format.

    print "Mod Time: " . scalar( localtime( $member->lastModTime() ) );

=item setLastModFileDateTimeFromUnix()

Set the member's lastModFileDateTime from the given unix
time.

    $member->setLastModFileDateTimeFromUnix( time() );

=item internalFileAttributes()

Return the internal file attributes field from the zip
header. This is only set for members read from a zip file.

=item externalFileAttributes()

Return member attributes as read from the ZIP file. Note that
these are NOT UNIX!

=item unixFileAttributes( [ $newAttributes ] )

=item unixFileAttributes( [ { attributes => $newAttributes } ] )

Get or set the member's file attributes using UNIX file
attributes. Returns old attributes.

    my $oldAttribs = $member->unixFileAttributes( 0666 );

Note that the return value has more than just the file
permissions, so you will have to mask off the lowest bits for
comparisons.

=item localExtraField( [ $newField ] )

=item localExtraField( [ { field => $newField } ] )

Gets or sets the extra field that was read from the local
header. The extra field must be in the proper format.  If it is
not or if the new field contains data related to the zip64
format, this method does not modify the extra field and returns
AZ_FORMAT_ERROR, otherwise it returns AZ_OK.

=item cdExtraField( [ $newField ] )

=item cdExtraField( [ { field => $newField } ] )

Gets or sets the extra field that was read from the central
directory header. The extra field must be in the proper format.
If it is not or if the new field contains data related to the
zip64 format, this method does not modify the extra field and
returns AZ_FORMAT_ERROR, otherwise it returns AZ_OK.

=item extraFields()

Return both local and CD extra fields, concatenated.

=item fileComment( [ $newComment ] )

=item fileComment( [ { comment => $newComment } ] )

Get or set the member's file comment.

=item hasDataDescriptor()

Get or set the data descriptor flag. If this is set, the
local header will not necessarily have the correct data
sizes. Instead, a small structure will be stored at the end
of the member data with these values. This should be
transparent in normal operation.

=item crc32()

Return the CRC-32 value for this member. This will not be set
for members that were constructed from strings or external
files until after the member has been written.

=item crc32String()

Return the CRC-32 value for this member as an 8 character
printable hex string. This will not be set for members that
were constructed from strings or external files until after
the member has been written.

=item compressedSize()

Return the compressed size for this member. This will not be
set for members that were constructed from strings or
external files until after the member has been written.

=item uncompressedSize()

Return the uncompressed size for this member.

=item password( [ $password ] )

Returns the password for this member to be used on decryption.
If $password is given, it will set the password for the decryption.

=item isEncrypted()

Return true if this member is encrypted. The Archive::Zip
module does not currently support creation of encrypted
members. Decryption works more or less like this:

  my $zip = Archive::Zip->new;
  $zip->read ("encrypted.zip");
  for my $m (map { $zip->memberNamed ($_) } $zip->memberNames) {
      $m->password ("secret");
      $m->contents;  # is "" when password was wrong

That shows that the password has to be set per member, and not per
archive. This might change in the future.

=item isTextFile( [ $flag ] )

=item isTextFile( [ { flag => $flag } ] )

Returns true if I am a text file. Also can set the status if
given an argument (then returns old state). Note that this
module does not currently do anything with this flag upon
extraction or storage. That is, bytes are stored in native
format whether or not they came from a text file.

=item isBinaryFile()

Returns true if I am a binary file. Also can set the status
if given an argument (then returns old state). Note that this
module does not currently do anything with this flag upon
extraction or storage. That is, bytes are stored in native
format whether or not they came from a text file.

=item extractToFileNamed( $fileName )

=item extractToFileNamed( { name => $fileName } )

Extract me to a file with the given name. The file will be
created with default modes. Directories will be created as
needed.
The C<$fileName> argument should be a valid file name on your
file system.
Returns AZ_OK on success.

=item isDirectory()

Returns true if I am a directory.

=item isSymbolicLink()

Returns true if I am a symbolic link.

=item writeLocalHeaderRelativeOffset()

Returns the file offset in bytes the last time I was written.

=item wasWritten()

Returns true if I was successfully written. Reset at the
beginning of a write attempt.

=back

=head2 Low-level member data reading

It is possible to use lower-level routines to access member data
streams, rather than the extract* methods and contents(). For
instance, here is how to print the uncompressed contents of a member
in chunks using these methods:

    my ( $member, $status, $bufferRef );
    $member = $zip->memberNamed( 'xyz.txt' );
    $member->desiredCompressionMethod( COMPRESSION_STORED );
    $status = $member->rewindData();
    die "error $status" unless $status == AZ_OK;
    while ( ! $member->readIsDone() )
    {
    ( $bufferRef, $status ) = $member->readChunk();
    die "error $status"
                if $status != AZ_OK && $status != AZ_STREAM_END;
    # do something with $bufferRef:
    print $$bufferRef;
    }
    $member->endRead();

=over 4

=item readChunk( [ $chunkSize ] )
