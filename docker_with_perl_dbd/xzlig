
        STATIC void
        my_private_function(int arg1, int arg2)
        {
            dTHX;       /* fetch context */
            ... call many Perl API functions ...
        }

        [... etc ...]

        MODULE = Foo            PACKAGE = Foo

        /* typical XSUB */

        void
        my_xsub(arg)
                int arg
            CODE:
                my_private_function(arg, 10);

Note that the only two changes from the normal way of writing an
extension is the addition of a C<#define PERL_NO_GET_CONTEXT> before
including the Perl headers, followed by a C<dTHX;> declaration at
the start of every function that will call the Perl API.  (You'll
know which functions need this, because the C compiler will complain
that there's an undeclared identifier in those functions.)  No changes
are needed for the XSUBs themselves, because the XS() macro is
correctly defined to pass in the implicit context if needed.

=for apidoc_section $concurrency
=for apidoc AmnhU#||PERL_NO_GET_CONTEXT

The third, even more efficient way is to ape how it is done within
the Perl guts:


        #define PERL_NO_GET_CONTEXT     /* we want efficiency */
        #include "EXTERN.h"
        #include "perl.h"
        #include "XSUB.h"

        /* pTHX_ only needed for functions that call Perl API */
        STATIC void my_private_function(pTHX_ int arg1, int arg2);

        STATIC void
        my_private_function(pTHX_ int arg1, int arg2)
        {
            /* dTHX; not needed here, because THX is an argument */
            ... call Perl API functions ...
        }

        [... etc ...]

        MODULE = Foo            PACKAGE = Foo

        /* typical XSUB */

        void
        my_xsub(arg)
                int arg
            CODE:
                my_private_function(aTHX_ arg, 10);

This implementation never has to fetch the context using a function
call, since it is always passed as an extra argument.  Depending on
your needs for simplicity or efficiency, you may mix the previous
two approaches freely.

Never add a comma after C<pTHX> yourself--always use the form of the
macro with the underscore for functions that take explicit arguments,
or the form without the argument for functions with no explicit arguments.

=head2 Should I do anything special if I call perl from multiple threads?

If you create interpreters in one thread and then proceed to call them in
another, you need to make sure perl's own Thread Local Storage (TLS) slot is
initialized correctly in each of those threads.

The C<perl_alloc> and C<perl_clone> API functions will automatically set
the TLS slot to the interpreter they created, so that there is no need to do
anything special if the interpreter is always accessed in the same thread that
created it, and that thread did not create or call any other interpreters
afterwards.  If that is not the case, you have to set the TLS slot of the
thread before calling any functions in the Perl API on that particular
interpreter.  This is done by calling the C<PERL_SET_CONTEXT> macro in that
thread as the first thing you do:

	/* do this before doing anything else with some_perl */
	PERL_SET_CONTEXT(some_perl);

	... other Perl API calls on some_perl go here ...

=for apidoc_section $embedding
=for apidoc Amh|void|PERL_SET_CONTEXT|PerlInterpreter* i

(You can always get the current context via C<PERL_GET_CONTEXT>.)

=for apidoc Amnh|PerlInterpreter*|PERL_GET_CONTEXT|

=head2 Future Plans and PERL_IMPLICIT_SYS

Just as MULTIPLICITY provides a way to bundle up everything
that the interpreter knows about itself and pass it around, so too are
there plans to allow the interpreter to bundle up everything it knows
about the environment it's running on.  This is enabled with the
PERL_IMPLICIT_SYS macro.  Currently it only works with USE_ITHREADS on
Windows.

This allows the ability to provide an extra pointer (called the "host"
environment) for all the system calls.  This makes it possible for
all the system stuff to maintain their own state, broken down into
seven C structures.  These are thin wrappers around the usual system
calls (see F<win32/perllib.c>) for the default perl executable, but for a
more ambitious host (like the one that would do fork() emulation) all
the extra work needed to pretend that different interpreters are
actually different "processes", would be done here.

The Perl engine/interpreter and the host are orthogonal entities.
There could be one or more interpreters in a process, and one or
more "hosts", with free association between them.

=head1 Internal Functions

All of Perl's internal functions which will be exposed to the outside
world are prefixed by C<Perl_> so that they will not conflict with XS
functions or functions used in a program in which Perl is embedded.
Similarly, all global variables begin with C<PL_>.  (By convention,
static functions start with C<S_>.)

Inside the Perl core (C<PERL_CORE> defined), you can get at the functions
either with or without the C<Perl_> prefix, thanks to a bunch of defines
that live in F<embed.h>.  Note that extension code should I<not> set
C<PERL_CORE>; this exposes the full perl internals, and is likely to cause
breakage of the XS in each new perl release.

The file F<embed.h> is generated automatically from
F<embed.pl> and F<embed.fnc>.  F<embed.pl> also creates the prototyping
header files for the internal functions, generates the documentation
and a lot of other bits and pieces.  It's important that when you add
a new function to the core or change an existing one, you change the
data in the table in F<embed.fnc> as well.  Here's a sample entry from
that table:

    Apd |SV**   |av_fetch   |AV* ar|I32 key|I32 lval

The first column is a set of flags, the second column the return type,
the third column the name.  Columns after that are the arguments.
The flags are documented at the top of F<embed.fnc>.

If you edit F<embed.pl> or F<embed.fnc>, you will need to run
C<make regen_headers> to force a rebuild of F<embed.h> and other
auto-generated files.

=head2 Formatted Printing of IVs, UVs, and NVs

If you are printing IVs, UVs, or NVS instead of the stdio(3) style
formatting codes like C<%d>, C<%ld>, C<%f>, you should use the
following macros for portability

        IVdf            IV in decimal
        UVuf            UV in decimal
        UVof            UV in octal
        UVxf            UV in hexadecimal
        NVef            NV %e-like
        NVff            NV %f-like
        NVgf            NV %g-like

These will take care of 64-bit integers and long doubles.
For example:

        printf("IV is %" IVdf "\n", iv);

The C<IVdf> will expand to whatever is the correct format for the IVs.
Note that the spaces are required around the format in case the code is
compiled with C++, to maintain compliance with its standard.

Note that there are different "long doubles": Perl will use
whatever the compiler has.

If you are printing addresses of pointers, use %p or UVxf combined
with PTR2UV().

=head2 Formatted Printing of SVs

The contents of SVs may be printed using the C<SVf> format, like so:

 Perl_croak(aTHX_ "This croaked because: %" SVf "\n", SVfARG(err_msg))

where C<err_msg> is an SV.

=for apidoc_section $io_formats
=for apidoc Amnh||SVf
=for apidoc Amh||SVfARG|SV *sv

Not all scalar types are printable.  Simple values certainly are: one of
IV, UV, NV, or PV.  Also, if the SV is a reference to some value,
either it will be dereferenced and the value printed, or information
about the type of that value and its address are displayed.  The results
of printing any other type of SV are undefined and likely to lead to an
interpreter crash.  NVs are printed using a C<%g>-ish format.

Note that the spaces are required around the C<SVf> in case the code is
compiled with C++, to maintain compliance with its standard.

Note that any filehandle being printed to under UTF-8 must be expecting
UTF-8 in order to get good results and avoid Wide-character warnings.
One way to do this for typical filehandles is to invoke perl with the
C<-C> parameter.  (See L<perlrun/-C [numberE<sol>list]>.

You can use this to concatenate two scalars:

 SV *var1 = get_sv("var1", GV_ADD);
 SV *var2 = get_sv("var2", GV_ADD);
 SV *var3 = newSVpvf("var1=%" SVf " and var2=%" SVf,
                     SVfARG(var1), SVfARG(var2));

=for apidoc Amnh||SVf_QUOTEDPREFIX

C<SVf_QUOTEDPREFIX> is similar to C<SVf> except that it restricts the
number of the characters printed, showing at most the first
C<PERL_QUOTEDPREFIX_LEN> characters of the argument, and rendering it with
double quotes and with the contents escaped using double quoted string
escaping rules. If the string is longer than this then ellipses "..."
will be appended after the trailing quote. This is intended for error
messages where the string is assumed to be a class name.

=for apidoc Amnh||HvNAMEf
=for apidoc Amnh||HvNAMEf_QUOTEDPREFIX

C<HvNAMEf> and C<HvNAMEf_QUOTEDPREFIX> are similar to C<SVf> except they
extract the string, length and utf8 flags from the argument using the
C<HvNAME()>, C<HvNAMELEN()>, C<HvNAMEUTF8()> macros. This is intended
for stringifying a class name directly from an stash HV.

=head2 Formatted Printing of Strings

If you just want the bytes printed in a 7bit NUL-terminated string, you can
just use C<%s> (assuming they are all really only 7bit).  But if there is a
possibility the value will be encoded as UTF-8 or contains bytes above
C<0x7F> (and therefore 8bit), you should instead use the C<UTF8f> format.
And as its parameter, use the C<UTF8fARG()> macro:

 chr * msg;

 /* U+2018: \xE2\x80\x98 LEFT SINGLE QUOTATION MARK
    U+2019: \xE2\x80\x99 RIGHT SINGLE QUOTATION MARK */
 if (can_utf8)
   msg = "\xE2\x80\x98Uses fancy quotes\xE2\x80\x99";
 else
   msg = "'Uses simple quotes'";

 Perl_croak(aTHX_ "The message is: %" UTF8f "\n",
                  UTF8fARG(can_utf8, strlen(msg), msg));

The first parameter to C<UTF8fARG> is a boolean: 1 if the string is in
UTF-8; 0 if string is in native byte encoding (Latin1).
The second parameter is the number of bytes in the string to print.
And the third and final parameter is a pointer to the first byte in the
string.

Note that any filehandle being printed to under UTF-8 must be expecting
UTF-8 in order to get good results and avoid Wide-character warnings.
One way to do this for typical filehandles is to invoke perl with the
C<-C> parameter.  (See L<perlrun/-C [numberE<sol>list]>.

=for apidoc_section $io_formats
=for apidoc Amnh||UTF8f
Output a possibly UTF8 value. Be sure to use UTF8fARG() to compose
the arguments for this format.
=for apidoc Amnh||UTF8f_QUOTEDPREFIX
Same as C<UTF8f> but the output is quoted, escaped and length limited.
See C<SVf_QUOTEDPREFIX> for more details on escaping.
=for apidoc Amh||UTF8fARG|bool is_utf8|Size_t byte_len|char *str

=cut

=head2 Formatted Printing of C<Size_t> and C<SSize_t>

The most general way to do this is to cast them to a UV or IV, and
print as in the
L<previous section|/Formatted Printing of IVs, UVs, and NVs>.

But if you're using C<PerlIO_printf()>, it's less typing and visual
clutter to use the C<%z> length modifier (for I<siZe>):

        PerlIO_printf("STRLEN is %zu\n", len);

This modifier is not portable, so its use should be restricted to
C<PerlIO_printf()>.

=head2 Formatted Printing of C<Ptrdiff_t>, C<intmax_t>, C<short> and other special sizes

There are modifiers for these special situations if you are using
C<PerlIO_printf()>.  See L<perlfunc/size>.

=head2 Pointer-To-Integer and Integer-To-Pointer

Because pointer size does not necessarily equal integer size,
use the follow macros to do it right.

        PTR2UV(pointer)
        PTR2IV(pointer)
        PTR2NV(pointer)
        INT2PTR(pointertotype, integer)

=for apidoc_section $casting
=for apidoc Amh|type|INT2PTR|type|int value
=for apidoc Amh|UV|PTR2UV|void * ptr
=for apidoc Amh|IV|PTR2IV|void * ptr
=for apidoc Amh|NV|PTR2NV|void * ptr

For example:

        IV  iv = ...;
        SV *sv = INT2PTR(SV*, iv);

and

        AV *av = ...;
        UV  uv = PTR2UV(av);

There are also

 PTR2nat(pointer)   /* pointer to integer of PTRSIZE */
 PTR2ul(pointer)    /* pointer to unsigned long */

=for apidoc Amh|IV|PTR2nat|void *
=for apidoc Amh|unsigned long|PTR2ul|void *

And C<PTRV> which gives the native type for an integer the same size as
pointers, such as C<unsigned> or C<unsigned long>.

=for apidoc Ayh|type|PTRV

=head2 Exception Handling

There are a couple of macros to do very basic exception handling in XS
modules.  You have to define C<NO_XSLOCKS> before including F<XSUB.h> to
be able to use these macros:

        #define NO_XSLOCKS
        #include "XSUB.h"

You can use these macros if you call code that may croak, but you need
to do some cleanup before giving control back to Perl.  For example:

        dXCPT;    /* set up necessary variables */

        XCPT_TRY_START {
          code_that_may_croak();
        } XCPT_TRY_END

        XCPT_CATCH
        {
          /* do cleanup here */
          XCPT_RETHROW;
        }

Note that you always have to rethrow an exception that has been
caught.  Using these macros, it is not possible to just catch the
exception and ignore it.  If you have to ignore the exception, you
have to use the C<call_*> function.

The advantage of using the above macros is that you don't have
to setup an extra function for C<call_*>, and that using these
macros is faster than using C<call_*>.

=head2 Source Documentation

There's an effort going on to document the internal functions and
automatically produce reference manuals from them -- L<perlapi> is one
such manual which details all the functions which are available to XS
writers.  L<perlintern> is the autogenerated manual for the functions
which are not part of the API and are supposedly for internal use only.

Source documentation is created by putting POD comments into the C
source, like this:

 /*
 =for apidoc sv_setiv

 Copies an integer into the given SV.  Does not handle 'set' magic.  See
 L<perlapi/sv_setiv_mg>.

 =cut
 */

Please try and supply some documentation if you add functions to the
Perl core.

=head2 Backwards compatibility

The Perl API changes over time.  New functions are
added or the interfaces of existing functions are
changed.  The C<Devel::PPPort> module tries to
provide compatibility code for some of these changes, so XS writers don't
have to code it themselves when supporting multiple versions of Perl.

C<Devel::PPPort> generates a C header file F<ppport.h> that can also
be run as a Perl script.  To generate F<ppport.h>, run:

    perl -MDevel::PPPort -eDevel::PPPort::WriteFile

Besides checking existing XS code, the script can also be used to retrieve
compatibility information for various API calls using the C<--api-info>
command line switch.  For example:

  % perl ppport.h --api-info=sv_magicext

For details, see S<C<perldoc ppport.h>>.

=head1 Unicode Support

Perl 5.6.0 introduced Unicode support.  It's important for porters and XS
writers to understand this support and make sure that the code they
write does not corrupt Unicode data.

=head2 What B<is> Unicode, anyway?

In the olden, less enlightened times, we all used to use ASCII.  Most of
us did, anyway.  The big problem with ASCII is that it's American.  Well,
no, that's not actually the problem; the problem is that it's not
particularly useful for people who don't use the Roman alphabet.  What
used to happen was that particular languages would stick their own
alphabet in the upper range of the sequence, between 128 and 255.  Of
course, we then ended up with plenty of variants that weren't quite
ASCII, and the whole point of it being a standard was lost.

Worse still, if you've got a language like Chinese or
Japanese that has hundreds or thousands of characters, then you really
can't fit them into a mere 256, so they had to forget about ASCII
altogether, and build their own systems using pairs of numbers to refer
to one character.

To fix this, some people formed Unicode, Inc. and
produced a new character set containing all the characters you can
possibly think of and more.  There are several ways of representing these
characters, and the one Perl uses is called UTF-8.  UTF-8 uses
a variable number of bytes to represent a character.  You can learn more
about Unicode and Perl's Unicode model in L<perlunicode>.

(On EBCDIC platforms, Perl uses instead UTF-EBCDIC, which is a form of
UTF-8 adapted for EBCDIC platforms.  Below, we just talk about UTF-8.
UTF-EBCDIC is like UTF-8, but the details are different.  The macros
hide the differences from you, just remember that the particular numbers
and bit patterns presented below will differ in UTF-EBCDIC.)

=head2 How can I recognise a UTF-8 string?

You can't.  This is because UTF-8 data is stored in bytes just like
non-UTF-8 data.  The Unicode character 200, (C<0xC8> for you hex types)
capital E with a grave accent, is represented by the two bytes
C<v196.172>.  Unfortunately, the non-Unicode string C<chr(196).chr(172)>
has that byte sequence as well.  So you can't tell just by looking -- this
is what makes Unicode input an interesting problem.

In general, you either have to know what you're dealing with, or you
have to guess.  The API function C<is_utf8_string> can help; it'll tell
you if a string contains only valid UTF-8 characters, and the chances
of a non-UTF-8 string looking like valid UTF-8 become very small very
quickly with increasing string length.  On a character-by-character
basis, C<isUTF8_CHAR>
will tell you whether the current character in a string is valid UTF-8. 

=head2 How does UTF-8 represent Unicode characters?

As mentioned above, UTF-8 uses a variable number of bytes to store a
character.  Characters with values 0...127 are stored in one
byte, just like good ol' ASCII.  Character 128 is stored as
C<v194.128>; this continues up to character 191, which is
C<v194.191>.  Now we've run out of bits (191 is binary
C<10111111>) so we move on; character 192 is C<v195.128>.  And
so it goes on, moving to three bytes at character 2048.
L<perlunicode/Unicode Encodings> has pictures of how this works.

Assuming you know you're dealing with a UTF-8 string, you can find out
how long the first character in it is with the C<UTF8SKIP> macro:

    char *utf = "\305\233\340\240\201";
    I32 len;

    len = UTF8SKIP(utf); /* len is 2 here */
    utf += len;
    len = UTF8SKIP(utf); /* len is 3 here */

Another way to skip over characters in a UTF-8 string is to use
C<utf8_hop>, which takes a string and a number of characters to skip
over.  You're on your own about bounds checking, though, so don't use it
lightly.

All bytes in a multi-byte UTF-8 character will have the high bit set,
so you can test if you need to do something special with this
character like this (the C<UTF8_IS_INVARIANT()> is a macro that tests
whether the byte is encoded as a single byte even in UTF-8):

    U8 *utf;     /* Initialize this to point to the beginning of the
                    sequence to convert */
    U8 *utf_end; /* Initialize this to 1 beyond the end of the sequence
                    pointed to by 'utf' */
    UV uv;	 /* Returned code point; note: a UV, not a U8, not a
                    char */
    STRLEN len; /* Returned length of character in bytes */

    if (!UTF8_IS_INVARIANT(*utf))
        /* Must treat this as UTF-8 */
        uv = utf8_to_uvchr_buf(utf, utf_end, &len);
    else
        /* OK to treat this character as a byte */
        uv = *utf;

You can also see in that example that we use C<utf8_to_uvchr_buf> to get the
value of the character; the inverse function C<uvchr_to_utf8> is available
for putting a UV into UTF-8:

    if (!UVCHR_IS_INVARIANT(uv))
        /* Must treat this as UTF8 */
        utf8 = uvchr_to_utf8(utf8, uv);
    else
        /* OK to treat this character as a byte */
        *utf8++ = uv;

You B<must> convert characters to UVs using the above functions if
you're ever in a situation where you have to match UTF-8 and non-UTF-8
characters.  You may not skip over UTF-8 characters in this case.  If you
do this, you'll lose the ability to match hi-bit non-UTF-8 characters;
for instance, if your UTF-8 string contains C<v196.172>, and you skip
that character, you can never match a C<chr(200)> in a non-UTF-8 string.
So don't do that!

(Note that we don't have to test for invariant characters in the
examples above.  The functions work on any well-formed UTF-8 input.
It's just that its faster to avoid the function overhead when it's not
needed.)

=head2 How does Perl store UTF-8 strings?

Currently, Perl deals with UTF-8 strings and non-UTF-8 strings
slightly differently.  A flag in the SV, C<SVf_UTF8>, indicates that the
string is internally encoded as UTF-8.  Without it, the byte value is the
codepoint number and vice versa.  This flag is only meaningful if the SV
is C<SvPOK> or immediately after stringification via C<SvPV> or a
similar macro.  You can check and manipulate this flag with the
following macros:

    SvUTF8(sv)
    SvUTF8_on(sv)
    SvUTF8_off(sv)

This flag has an important effect on Perl's treatment of the string: if
UTF-8 data is not properly distinguished, regular expressions,
C<length>, C<substr> and other string handling operations will have
undesirable (wrong) results.

The problem comes when you have, for instance, a string that isn't
flagged as UTF-8, and contains a byte sequence that could be UTF-8 --
especially when combining non-UTF-8 and UTF-8 strings.

Never forget that the C<SVf_UTF8> flag is separate from the PV value; you
need to be sure you don't accidentally knock it off while you're
manipulating SVs.  More specifically, you cannot expect to do this:

    SV *sv;
    SV *nsv;
    STRLEN len;
    char *p;

    p = SvPV(sv, len);
    frobnicate(p);
    nsv = newSVpvn(p, len);

The C<char*> string does not tell you the whole story, and you can't
copy or reconstruct an SV just by copying the string value.  Check if the
old SV has the UTF8 flag set (I<after> the C<SvPV> call), and act
accordingly:

    p = SvPV(sv, len);
    is_utf8 = SvUTF8(sv);
    frobnicate(p, is_utf8);
    nsv = newSVpvn(p, len);
    if (is_utf8)
        SvUTF8_on(nsv);

In the above, your C<frobnicate> function has been changed to be made
aware of whether or not it's dealing with UTF-8 data, so that it can
handle the string appropriately.

Since just passing an SV to an XS function and copying the data of
the SV is not enough to copy the UTF8 flags, even less right is just
passing a S<C<char *>> to an XS function.

For full generality, use the L<C<DO_UTF8>|perlapi/DO_UTF8> macro to see if the
string in an SV is to be I<treated> as UTF-8.  This takes into account
if the call to the XS function is being made from within the scope of
L<S<C<use bytes>>|bytes>.  If so, the underlying bytes that comprise the
UTF-8 string are to be exposed, rather than the character they
represent.  But this pragma should only really be used for debugging and
perhaps low-level testing at the byte level.  Hence most XS code need
not concern itself with this, but various areas of the perl core do need
to support it.

And this isn't the whole story.  Starting in Perl v5.12, strings that
aren't encoded in UTF-8 may also be treated as Unicode under various
conditions (see L<perlunicode/ASCII Rules versus Unicode Rules>).
This is only really a problem for characters whose ordinals are between
128 and 255, and their behavior varies under ASCII versus Unicode rules
in ways that your code cares about (see L<perlunicode/The "Unicode Bug">).
There is no published API for dealing with this, as it is subject to
change, but you can look at the code for C<pp_lc> in F<pp.c> for an
example as to how it's currently done.

=head2 How do I pass a Perl string to a C library?

A Perl string, conceptually, is an opaque sequence of code points.
Many C libraries expect their inputs to be "classical" C strings, which are
arrays of octets 1-255, terminated with a NUL byte. Your job when writing
an interface between Perl and a C library is to define the mapping between
Perl and that library.

Generally speaking, C<SvPVbyte> and related macros suit this task well.
These assume that your Perl string is a "byte string", i.e., is either
raw, undecoded input into Perl or is pre-encoded to, e.g., UTF-8.

Alternatively, if your C library expects UTF-8 text, you can use
C<SvPVutf8> and related macros. This has the same effect as encoding
to UTF-8 then calling the corresponding C<SvPVbyte>-related macro.

Some C libraries may expect other encodings (e.g., UTF-16LE). To give
Perl strings to such libraries
you must either do that encoding in Perl then use C<SvPVbyte>, or
use an intermediary C library to convert from however Perl stores the
string to the desired encoding.

Take care also that NULs in your Perl string don't confuse the C
library. If possible, give the string's length to the C library; if that's
not possible, consider rejecting strings that contain NUL bytes.

=head3 What about C<SvPV>, C<SvPV_nolen>, etc.?

Consider a 3-character Perl string C<$foo = "\x64\x78\x8c">.
Perl can store these 3 characters either of two ways:

=over

=item * bytes: 0x64 0x78 0x8c

=item * UTF-8: 0x64 0x78 0xc2 0x8c

=back

Now let's say you convert C<$foo> to a C string thus:

    STRLEN strlen;
    char *str = SvPV(foo_sv, strlen);

At this point C<str> could point to a 3-byte C string or a 4-byte one.

Generally speaking, we want C<str> to be the same regardless of how
Perl stores C<$foo>, so the ambiguity here is undesirable. C<SvPVbyte>
and C<SvPVutf8> solve that by giving predictable output: use
C<SvPVbyte> if your C library expects byte strings, or C<SvPVutf8>
if it expects UTF-8.

If your C library happens to support both encodings, then C<SvPV>--always
in tandem with lookups to C<SvUTF8>!--may be safe and (slightly) more
efficient.

B<TESTING> B<TIP:> Use L<utf8>'s C<upgrade> and C<downgrade> functions
in your tests to ensure consistent handling regardless of Perl's
internal encoding.

=head2 How do I convert a string to UTF-8?

If you're mixing UTF-8 and non-UTF-8 strings, it is necessary to upgrade
the non-UTF-8 strings to UTF-8.  If you've got an SV, the easiest way to do
this is:

    sv_utf8_upgrade(sv);

However, you must not do this, for example:

    if (!SvUTF8(left))
        sv_utf8_upgrade(left);

If you do this in a binary operator, you will actually change one of the
strings that came into the operator, and, while it shouldn't be noticeable
by the end user, it can cause problems in deficient code.

Instead, C<bytes_to_utf8> will give you a UTF-8-encoded B<copy> of its
string argument.  This is useful for having the data available for
comparisons and so on, without harming the original SV.  There's also
C<utf8_to_bytes> to go the other way, but naturally, this will fail if
the string contains any characters above 255 that can't be represented
in a single byte.

=head2 How do I compare strings?

L<perlapi/sv_cmp> and L<perlapi/sv_cmp_flags> do a lexigraphic
comparison of two SV's, and handle UTF-8ness properly.  Note, however,
that Unicode specifies a much fancier mechanism for collation, available
via the L<Unicode::Collate> module.

To just compare two strings for equality/non-equality, you can just use
L<C<memEQ()>|perlapi/memEQ> and L<C<memNE()>|perlapi/memEQ> as usual,
except the strings must be both UTF-8 or not UTF-8 encoded.

To compare two strings case-insensitively, use
L<C<foldEQ_utf8()>|perlapi/foldEQ_utf8> (the strings don't have to have
the same UTF-8ness).

=head2 Is there anything else I need to know?

Not really.  Just remember these things:

=over 3

=item *

There's no way to tell if a S<C<char *>> or S<C<U8 *>> string is UTF-8
or not.  But you can tell if an SV is to be treated as UTF-8 by calling
C<DO_UTF8> on it, after stringifying it with C<SvPV> or a similar
macro.  And, you can tell if SV is actually UTF-8 (even if it is not to
be treated as such) by looking at its C<SvUTF8> flag (again after
stringifying it).  Don't forget to set the flag if something should be
UTF-8.
Treat the flag as part of the PV, even though it's not -- if you pass on
the PV to somewhere, pass on the flag too.

=item *

If a string is UTF-8, B<always> use C<utf8_to_uvchr_buf> to get at the value,
unless C<UTF8_IS_INVARIANT(*s)> in which case you can use C<*s>.

=item *

When writing a character UV to a UTF-8 string, B<always> use
C<uvchr_to_utf8>, unless C<UVCHR_IS_INVARIANT(uv))> in which case
you can use C<*s = uv>.

=item *

Mixing UTF-8 and non-UTF-8 strings is
tricky.  Use C<bytes_to_utf8> to get
a new string which is UTF-8 encoded, and then combine them.

=back

=head1 Custom Operators

Custom operator support is an experimental feature that allows you to
define your own ops.  This is primarily to allow the building of
interpreters for other languages in the Perl core, but it also allows
optimizations through the creation of "macro-ops" (ops which perform the
functions of multiple ops which are usually executed together, such as
C<gvsv, gvsv, add>.)

This feature is implemented as a new op type, C<OP_CUSTOM>.  The Perl
core does not "know" anything special about this op type, and so it will
not be involved in any optimizations.  This also means that you can
define your custom ops to be any op structure -- unary, binary, list and
so on -- you like.

It's important to know what custom operators won't do for you.  They
won't let you add new syntax to Perl, directly.  They won't even let you
add new keywords, directly.  In fact, they won't change the way Perl
compiles a program at all.  You have to do those changes yourself, after
Perl has compiled the program.  You do this either by manipulating the op
tree using a C<CHECK> block and the C<B::Generate> module, or by adding
a custom peephole optimizer with the C<optimize> module.

When you do this, you replace ordinary Perl ops with custom ops by
creating ops with the type C<OP_CUSTOM> and the C<op_ppaddr> of your own
PP function.  This should be defined in XS code, and should look like
the PP ops in C<pp_*.c>.  You are responsible for ensuring that your op
takes the appropriate number of values from the stack, and you are
responsible for adding stack marks if necessary.

You should also "register" your op with the Perl interpreter so that it
can produce sensible error and warning messages.  Since it is possible to
have multiple custom ops within the one "logical" op type C<OP_CUSTOM>,
Perl uses the value of C<< o->op_ppaddr >> to determine which custom op
it is dealing with.  You should create an C<XOP> structure for each
ppaddr you use, set the properties of the custom op with
C<XopENTRY_set>, and register the structure against the ppaddr using
C<Perl_custom_op_register>.  A trivial example might look like:

=for apidoc_section $optree_manipulation
=for apidoc Ayh||XOP

    static XOP my_xop;
    static OP *my_pp(pTHX);

    BOOT:
        XopENTRY_set(&my_xop, xop_name, "myxop");
        XopENTRY_set(&my_xop, xop_desc, "Useless custom op");
        Perl_custom_op_register(aTHX_ my_pp, &my_xop);

The available fields in the structure are:

=over 4

=item xop_name

A short name for your op.  This will be included in some error messages,
and will also be returned as C<< $op->name >> by the L<B|B> module, so
it will appear in the output of module like L<B::Concise|B::Concise>.

=item xop_desc

A short description of the function of the op.

=item xop_class

Which of the various C<*OP> structures this op uses.  This should be one of
the C<OA_*> constants from F<op.h>, namely

=over 4

=item OA_BASEOP

=item OA_UNOP

=item OA_BINOP

=item OA_LOGOP

=item OA_LISTOP

=item OA_PMOP

=item OA_SVOP

=item OA_PADOP

=item OA_PVOP_OR_SVOP

This should be interpreted as 'C<PVOP>' only.  The C<_OR_SVOP> is because
the only core C<PVOP>, C<OP_TRANS>, can sometimes be a C<SVOP> instead.

=item OA_LOOP

=item OA_COP

=for apidoc_section $optree_manipulation
=for apidoc Amnh||OA_BASEOP
=for apidoc_item OA_BINOP
=for apidoc_item OA_COP
=for apidoc_item OA_LISTOP
=for apidoc_item OA_LOGOP
=for apidoc_item OA_LOOP
=for apidoc_item OA_PADOP
=for apidoc_item OA_PMOP
=for apidoc_item OA_PVOP_OR_SVOP
=for apidoc_item OA_SVOP
=for apidoc_item OA_UNOP

=back

The other C<OA_*> constants should not be used.

=item xop_peep

This member is of type C<Perl_cpeep_t>, which expands to C<void
(*Perl_cpeep_t)(aTHX_ OP *o, OP *oldop)>.  If it is set, this function
will be called from C<Perl_rpeep> when ops of this type are encountered
by the peephole optimizer.  I<o> is the OP that needs optimizing;
I<oldop> is the previous OP optimized, whose C<op_next> points to I<o>.

=for apidoc_section $optree_manipulation
=for apidoc Ayh||Perl_cpeep_t

=back

C<B::Generate> directly supports the creation of custom ops by name.

=head1 Stacks

Descriptions above occasionally refer to "the stack", but there are in fact
many stack-like data structures within the perl interpreter. When otherwise
unqualified, "the stack" usually refers to the value stack.

The various stacks have different purposes, and operate in slightly different
ways. Their differences are noted below.

=head2 Value Stack

This stack stores the values that regular perl code is operating on, usually
intermediate values of expressions within a statement. The stack itself is
formed of an array of SV pointers.

The base of this stack is pointed to by the interpreter variable
C<PL_stack_base>, of type C<SV **>.

=for apidoc_section $stack
=for apidoc Amnh||PL_stack_base

The head of the stack is C<PL_stack_sp>, and points to the most
recently-pushed item.

=for apidoc Amnh||PL_stack_sp

Items are pushed to the stack by using the C<PUSHs()> macro or its variants
described above; C<XPUSHs()>, C<mPUSHs()>, C<mXPUSHs()> and the typed
versions. Note carefully that the non-C<X> versions of these macros do not
check the size of the stack and assume it to be big enough. These must be
paired with a suitable check of the stack's size, such as the C<EXTEND> macro
to ensure it is large enough. For example

    EXTEND(SP, 4);
    mPUSHi(10);
    mPUSHi(20);
    mPUSHi(30);
    mPUSHi(40);

This is slightly more performant than making four separate checks in four
separate C<mXPUSHi()> calls.

As a further performance optimisation, the various C<PUSH> macros all operate
using a local variable C<SP>, rather than the interpreter-global variable
C<PL_stack_sp>. This variable is declared by the C<dSP> macro - though it is
normally implied by XSUBs and similar so it is rare you have to consider it
directly. Once declared, the C<PUSH> macros will operate only on this local
variable, so before invoking any other perl core functions you must use the
C<PUTBACK> macro to return the value from the local C<SP> variable back to
the interpreter variable. Similarly, after calling a perl core function which
may have had reason to move the stack or push/pop values to it, you must use
the C<SPAGAIN> macro which refreshes the local C<SP> value back from the
interpreter one.

Items are popped from the stack by using the C<POPs> macro or its typed
versions, There is also a macro C<TOPs> that inspects the topmost item without
removing it.

=for apidoc_section $stack
=for apidoc Amnh||TOPs

Note specifically that SV pointers on the value stack do not contribute to the
overall reference count of the xVs being referred to. If newly-created xVs are
being pushed to the stack you must arrange for them to be destroyed at a
suitable time; usually by using one of the C<mPUSH*> macros or C<sv_2mortal()>
to mortalise the xV.

=head2 Mark Stack

The value stack stores individual perl scalar values as temporaries between
expressions. Some perl expressions operate on entire lists; for that purpose
we need to know where on the stack each list begins. This is the purpose of the
mark stack.

The mark stack stores integers as I32 values, which are the height of the
value stack at the time before the list began; thus the mark itself actually
points to the value stack entry one before the list. The list itself starts at
C<mark + 1>.

The base of this stack is pointed to by the interpreter variable
C<PL_markstack>, of type C<I32 *>.

=for apidoc_section $stack
=for apidoc Amnh||PL_markstack

The head of the stack is C<PL_markstack_ptr>, and points to the most
recently-pushed item.

=for apidoc Amnh||PL_markstack_ptr

Items are pushed to the stack by using the C<PUSHMARK()> macro. Even though
the stack itself stores (value) stack indices as integers, the C<PUSHMARK>
macro should be given a stack pointer directly; it will calculate the index
offset by comparing to the C<PL_stack_sp> variable. Thus almost always the
code to perform this is

    PUSHMARK(SP);

Items are popped from the stack by the C<POPMARK> macro. There is also a macro
C<TOPMARK> that inspects the topmost item without removing it. These macros
return I32 index values directly. There is also the C<dMARK> macro which
declares a new SV double-pointer variable, called C<mark>, which points at the
marked stack slot; this is the usual macro that C code will use when operating
on lists given on the stack.

As noted above, the C<mark> variable itself will point at the most recently
pushed value on the value stack before the list begins, and so the list itself
starts at C<mark + 1>. The values of the list may be iterated by code such as

    for(SV **svp = mark + 1; svp <= PL_stack_sp; svp++) {
      SV *item = *svp;
      ...
    }

Note specifically in the case that the list is already empty, C<mark> will
equal C<PL_stack_sp>.

Because the C<mark> variable is converted to a pointer on the value stack,
extra care must be taken if C<EXTEND> or any of the C<XPUSH> macros are
invoked within the function, because the stack may need to be moved to
extend it and so the existing pointer will now be invalid. If this may be a
problem, a possible solution is to track the mark offset as an integer and
track the mark itself later on after the stack had been moved.

    I32 markoff = POPMARK;

