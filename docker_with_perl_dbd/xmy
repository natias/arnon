        for path in _deleted:
            if path in mf:
                deladded.remove(path)
        deleted = _deleted - deladded

        # distinguish between file to forget and the other
        added = set()
        for abs in dsadded:
            if not repo.dirstate.get_entry(abs).added:
                added.add(abs)
        dsadded -= added

        for abs in deladded:
            if repo.dirstate.get_entry(abs).added:
                dsadded.add(abs)
        deladded -= dsadded

        # For files marked as removed, we check if an unknown file is present at
        # the same path. If a such file exists it may need to be backed up.
        # Making the distinction at this stage helps have simpler backup
        # logic.
        removunk = set()
        for abs in removed:
            target = repo.wjoin(abs)
            if os.path.lexists(target):
                removunk.add(abs)
        removed -= removunk

        dsremovunk = set()
        for abs in dsremoved:
            target = repo.wjoin(abs)
            if os.path.lexists(target):
                dsremovunk.add(abs)
        dsremoved -= dsremovunk

        # action to be actually performed by revert
        # (<list of file>, message>) tuple
        actions = {
            b'revert': ([], _(b'reverting %s\n')),
            b'add': ([], _(b'adding %s\n')),
            b'remove': ([], _(b'removing %s\n')),
            b'drop': ([], _(b'removing %s\n')),
            b'forget': ([], _(b'forgetting %s\n')),
            b'undelete': ([], _(b'undeleting %s\n')),
            b'noop': (None, _(b'no changes needed to %s\n')),
            b'unknown': (None, _(b'file not managed: %s\n')),
        }

        # "constant" that convey the backup strategy.
        # All set to `discard` if `no-backup` is set do avoid checking
        # no_backup lower in the code.
        # These values are ordered for comparison purposes
        backupinteractive = 3  # do backup if interactively modified
        backup = 2  # unconditionally do backup
        check = 1  # check if the existing file differs from target
        discard = 0  # never do backup
        if opts.get(b'no_backup'):
            backupinteractive = backup = check = discard
        if interactive:
            dsmodifiedbackup = backupinteractive
        else:
            dsmodifiedbackup = backup
        tobackup = set()

        backupanddel = actions[b'remove']
        if not opts.get(b'no_backup'):
            backupanddel = actions[b'drop']

        disptable = (
            # dispatch table:
            #   file state
            #   action
            #   make backup
            ## Sets that results that will change file on disk
            # Modified compared to target, no local change
            (modified, actions[b'revert'], discard),
            # Modified compared to target, but local file is deleted
            (deleted, actions[b'revert'], discard),
            # Modified compared to target, local change
            (dsmodified, actions[b'revert'], dsmodifiedbackup),
            # Added since target
            (added, actions[b'remove'], discard),
            # Added in working directory
            (dsadded, actions[b'forget'], discard),
            # Added since target, have local modification
            (modadded, backupanddel, backup),
            # Added since target but file is missing in working directory
            (deladded, actions[b'drop'], discard),
            # Removed since  target, before working copy parent
            (removed, actions[b'add'], discard),
            # Same as `removed` but an unknown file exists at the same path
            (removunk, actions[b'add'], check),
            # Removed since targe, marked as such in working copy parent
            (dsremoved, actions[b'undelete'], discard),
            # Same as `dsremoved` but an unknown file exists at the same path
            (dsremovunk, actions[b'undelete'], check),
            ## the following sets does not result in any file changes
            # File with no modification
            (clean, actions[b'noop'], discard),
            # Existing file, not tracked anywhere
            (unknown, actions[b'unknown'], discard),
        )

        for abs, exact in sorted(names.items()):
            # target file to be touch on disk (relative to cwd)
            target = repo.wjoin(abs)
            # search the entry in the dispatch table.
            # if the file is in any of these sets, it was touched in the working
            # directory parent and we are sure it needs to be reverted.
            for table, (xlist, msg), dobackup in disptable:
                if abs not in table:
                    continue
                if xlist is not None:
                    xlist.append(abs)
                    if dobackup:
                        # If in interactive mode, don't automatically create
                        # .orig files (issue4793)
                        if dobackup == backupinteractive:
                            tobackup.add(abs)
                        elif backup <= dobackup or wctx[abs].cmp(ctx[abs]):
                            absbakname = scmutil.backuppath(ui, repo, abs)
                            bakname = os.path.relpath(
                                absbakname, start=repo.root
                            )
                            ui.note(
                                _(b'saving current version of %s as %s\n')
                                % (uipathfn(abs), uipathfn(bakname))
                            )
                            if not opts.get(b'dry_run'):
                                if interactive:
                                    util.copyfile(target, absbakname)
                                else:
                                    util.rename(target, absbakname)
                    if opts.get(b'dry_run'):
                        if ui.verbose or not exact:
                            ui.status(msg % uipathfn(abs))
                elif exact:
                    ui.warn(msg % uipathfn(abs))
                break

        if not opts.get(b'dry_run'):
            needdata = (b'revert', b'add', b'undelete')
            oplist = [actions[name][0] for name in needdata]
            prefetch = scmutil.prefetchfiles
            matchfiles = scmutil.matchfiles(
                repo, [f for sublist in oplist for f in sublist]
            )
            prefetch(
                repo,
                [(ctx.rev(), matchfiles)],
            )
            match = scmutil.match(repo[None], pats)
            _performrevert(
                repo,
                ctx,
                names,
                uipathfn,
                actions,
                match,
                interactive,
                tobackup,
            )

        if targetsubs:
            # Revert the subrepos on the revert list
            for sub in targetsubs:
                try:
                    wctx.sub(sub).revert(
                        ctx.substate[sub], *pats, **pycompat.strkwargs(opts)
                    )
                except KeyError:
                    raise error.Abort(
                        b"subrepository '%s' does not exist in %s!"
                        % (sub, short(ctx.node()))
                    )


def _performrevert(
    repo,
    ctx,
    names,
    uipathfn,
    actions,
    match,
    interactive=False,
    tobackup=None,
):
    """function that actually perform all the actions computed for revert

    This is an independent function to let extension to plug in and react to
    the imminent revert.

    Make sure you have the working directory locked when calling this function.
    """
    parent, p2 = repo.dirstate.parents()
    node = ctx.node()
    excluded_files = []

    def checkout(f):
        fc = ctx[f]
        repo.wwrite(f, fc.data(), fc.flags())

    def doremove(f):
        try:
            rmdir = repo.ui.configbool(b'experimental', b'removeemptydirs')
            repo.wvfs.unlinkpath(f, rmdir=rmdir)
        except OSError:
            pass
        repo.dirstate.set_untracked(f)

    def prntstatusmsg(action, f):
        exact = names[f]
        if repo.ui.verbose or not exact:
            repo.ui.status(actions[action][1] % uipathfn(f))

    audit_path = pathutil.pathauditor(repo.root, cached=True)
    for f in actions[b'forget'][0]:
        if interactive:
            choice = repo.ui.promptchoice(
                _(b"forget added file %s (Yn)?$$ &Yes $$ &No") % uipathfn(f)
            )
            if choice == 0:
                prntstatusmsg(b'forget', f)
                repo.dirstate.set_untracked(f)
            else:
                excluded_files.append(f)
        else:
            prntstatusmsg(b'forget', f)
            repo.dirstate.set_untracked(f)
    for f in actions[b'remove'][0]:
        audit_path(f)
        if interactive:
            choice = repo.ui.promptchoice(
                _(b"remove added file %s (Yn)?$$ &Yes $$ &No") % uipathfn(f)
            )
            if choice == 0:
                prntstatusmsg(b'remove', f)
                doremove(f)
            else:
                excluded_files.append(f)
        else:
            prntstatusmsg(b'remove', f)
            doremove(f)
    for f in actions[b'drop'][0]:
        audit_path(f)
        prntstatusmsg(b'drop', f)
        repo.dirstate.set_untracked(f)

    # We are reverting to our parent. If possible, we had like `hg status`
    # to report the file as clean. We have to be less agressive for
    # merges to avoid losing information about copy introduced by the merge.
    # This might comes with bugs ?
    reset_copy = p2 == repo.nullid

    def normal(filename):
        return repo.dirstate.set_tracked(filename, reset_copy=reset_copy)

    newlyaddedandmodifiedfiles = set()
    if interactive:
        # Prompt the user for changes to revert
        torevert = [f for f in actions[b'revert'][0] if f not in excluded_files]
        m = scmutil.matchfiles(repo, torevert)
        diffopts = patch.difffeatureopts(
            repo.ui,
            whitespace=True,
            section=b'commands',
            configprefix=b'revert.interactive.',
        )
        diffopts.nodates = True
        diffopts.git = True
        operation = b'apply'
        if node == parent:
            if repo.ui.configbool(
                b'experimental', b'revert.interactive.select-to-keep'
            ):
                operation = b'keep'
            else:
                operation = b'discard'

        if operation == b'apply':
            diff = patch.diff(repo, None, ctx.node(), m, opts=diffopts)
        else:
            diff = patch.diff(repo, ctx.node(), None, m, opts=diffopts)
        original_headers = patch.parsepatch(diff)

        try:

            chunks, opts = recordfilter(
                repo.ui, original_headers, match, operation=operation
            )
            if operation == b'discard':
                chunks = patch.reversehunks(chunks)

        except error.PatchParseError as err:
            raise error.InputError(_(b'error parsing patch: %s') % err)
        except error.PatchApplicationError as err:
            raise error.StateError(_(b'error applying patch: %s') % err)

        # FIXME: when doing an interactive revert of a copy, there's no way of
        # performing a partial revert of the added file, the only option is
        # "remove added file <name> (Yn)?", so we don't need to worry about the
        # alsorestore value. Ideally we'd be able to partially revert
        # copied/renamed files.
        newlyaddedandmodifiedfiles, unusedalsorestore = newandmodified(chunks)
        if tobackup is None:
            tobackup = set()
        # Apply changes
        fp = stringio()
        # chunks are serialized per file, but files aren't sorted
        for f in sorted({c.header.filename() for c in chunks if ishunk(c)}):
            prntstatusmsg(b'revert', f)
        files = set()
        for c in chunks:
            if ishunk(c):
                abs = c.header.filename()
                # Create a backup file only if this hunk should be backed up
                if c.header.filename() in tobackup:
                    target = repo.wjoin(abs)
                    bakname = scmutil.backuppath(repo.ui, repo, abs)
                    util.copyfile(target, bakname)
                    tobackup.remove(abs)
                if abs not in files:
                    files.add(abs)
                    if operation == b'keep':
                        checkout(abs)
            c.write(fp)
        dopatch = fp.tell()
        fp.seek(0)
        if dopatch:
            try:
                patch.internalpatch(repo.ui, repo, fp, 1, eolmode=None)
            except error.PatchParseError as err:
                raise error.InputError(pycompat.bytestr(err))
            except error.PatchApplicationError as err:
                raise error.StateError(pycompat.bytestr(err))
        del fp
    else:
        for f in actions[b'revert'][0]:
            prntstatusmsg(b'revert', f)
            checkout(f)
            if normal:
                normal(f)

    for f in actions[b'add'][0]:
        # Don't checkout modified files, they are already created by the diff
        if f in newlyaddedandmodifiedfiles:
            continue

        if interactive:
            choice = repo.ui.promptchoice(
                _(b"add new file %s (Yn)?$$ &Yes $$ &No") % uipathfn(f)
            )
            if choice != 0:
                continue
        prntstatusmsg(b'add', f)
        checkout(f)
        repo.dirstate.set_tracked(f)

    for f in actions[b'undelete'][0]:
        if interactive:
            choice = repo.ui.promptchoice(
                _(b"add back removed file %s (Yn)?$$ &Yes $$ &No") % f
            )
            if choice == 0:
                prntstatusmsg(b'undelete', f)
                checkout(f)
                normal(f)
            else:
                excluded_files.append(f)
        else:
            prntstatusmsg(b'undelete', f)
            checkout(f)
            normal(f)

    copied = copies.pathcopies(repo[parent], ctx)

    for f in (
        actions[b'add'][0] + actions[b'undelete'][0] + actions[b'revert'][0]
    ):
        if f in copied:
            repo.dirstate.copy(copied[f], f)


# a list of (ui, repo, otherpeer, opts, missing) functions called by
# commands.outgoing.  "missing" is "missing" of the result of
# "findcommonoutgoing()"
outgoinghooks = util.hooks()

# a list of (ui, repo) functions called by commands.summary
summaryhooks = util.hooks()

# a list of (ui, repo, opts, changes) functions called by commands.summary.
#
# functions should return tuple of booleans below, if 'changes' is None:
#  (whether-incomings-are-needed, whether-outgoings-are-needed)
#
# otherwise, 'changes' is a tuple of tuples below:
#  - (sourceurl, sourcebranch, sourcepeer, incoming)
#  - (desturl,   destbranch,   destpeer,   outgoing)
summaryremotehooks = util.hooks()


def checkunfinished(repo, commit=False, skipmerge=False):
    """Look for an unfinished multistep operation, like graft, and abort
    if found. It's probably good to check this right before
    bailifchanged().
    """
    # Check for non-clearable states first, so things like rebase will take
    # precedence over update.
    for state in statemod._unfinishedstates:
        if (
            state._clearable
            or (commit and state._allowcommit)
            or state._reportonly
        ):
            continue
        if state.isunfinished(repo):
            raise error.StateError(state.msg(), hint=state.hint())

    for s in statemod._unfinishedstates:
        if (
            not s._clearable
            or (commit and s._allowcommit)
            or (s._opname == b'merge' and skipmerge)
            or s._reportonly
        ):
            continue
        if s.isunfinished(repo):
            raise error.StateError(s.msg(), hint=s.hint())


def clearunfinished(repo):
    """Check for unfinished operations (as above), and clear the ones
    that are clearable.
    """
    for state in statemod._unfinishedstates:
        if state._reportonly:
            continue
        if not state._clearable and state.isunfinished(repo):
            raise error.StateError(state.msg(), hint=state.hint())

    for s in statemod._unfinishedstates:
        if s._opname == b'merge' or s._reportonly:
            continue
        if s._clearable and s.isunfinished(repo):
            util.unlink(repo.vfs.join(s._fname))


def getunfinishedstate(repo):
    """Checks for unfinished operations and returns statecheck object
    for it"""
    for state in statemod._unfinishedstates:
        if state.isunfinished(repo):
            return state
    return None


def howtocontinue(repo):
    """Check for an unfinished operation and return the command to finish
    it.

    statemod._unfinishedstates list is checked for an unfinished operation
    and the corresponding message to finish it is generated if a method to
    continue is supported by the operation.

    Returns a (msg, warning) tuple. 'msg' is a string and 'warning' is
    a boolean.
    """
    contmsg = _(b"continue: %s")
    for state in statemod._unfinishedstates:
        if not state._continueflag:
            continue
        if state.isunfinished(repo):
            return contmsg % state.continuemsg(), True
    if repo[None].dirty(missing=True, merge=False, branch=False):
        return contmsg % _(b"hg commit"), False
    return None, None


def checkafterresolved(repo):
    """Inform the user about the next action after completing hg resolve

    If there's a an unfinished operation that supports continue flag,
    howtocontinue will yield repo.ui.warn as the reporter.

    Otherwise, it will yield repo.ui.note.
    """
    msg, warning = howtocontinue(repo)
    if msg is not None:
        if warning:
            repo.ui.warn(b"%s\n" % msg)
        else:
            repo.ui.note(b"%s\n" % msg)


def wrongtooltocontinue(repo, task):
    """Raise an abort suggesting how to properly continue if there is an
    active task.

    Uses howtocontinue() to find the active task.

    If there's no task (repo.ui.note for 'hg commit'), it does not offer
    a hint.
    """
    after = howtocontinue(repo)
    hint = None
    if after[1]:
        hint = after[0]
    raise error.StateError(_(b'no %s in progress') % task, hint=hint)


def abortgraft(ui, repo, graftstate):
    """abort the interrupted graft and rollbacks to the state before interrupted
    graft"""
    if not graftstate.exists():
        raise error.StateError(_(b"no interrupted graft to abort"))
    statedata = readgraftstate(repo, graftstate)
    newnodes = statedata.get(b'newnodes')
    if newnodes is None:
        # and old graft state which does not have all the data required to abort
        # the graft
        raise error.Abort(_(b"cannot abort using an old graftstate"))

    # changeset from which graft operation was started
    if len(newnodes) > 0:
        startctx = repo[newnodes[0]].p1()
    else:
        startctx = repo[b'.']
    # whether to strip or not
    cleanup = False

    if newnodes:
        newnodes = [repo[r].rev() for r in newnodes]
        cleanup = True
        # checking that none of the newnodes turned public or is public
        immutable = [c for c in newnodes if not repo[c].mutable()]
        if immutable:
            repo.ui.warn(
                _(b"cannot clean up public changesets %s\n")
                % b', '.join(bytes(repo[r]) for r in immutable),
                hint=_(b"see 'hg help phases' for details"),
            )
            cleanup = False

        # checking that no new nodes are created on top of grafted revs
        desc = set(repo.changelog.descendants(newnodes))
        if desc - set(newnodes):
            repo.ui.warn(
                _(
                    b"new changesets detected on destination "
                    b"branch, can't strip\n"
                )
            )
            cleanup = False

        if cleanup:
            with repo.wlock(), repo.lock():
                mergemod.clean_update(startctx)
                # stripping the new nodes created
                strippoints = [
                    c.node() for c in repo.set(b"roots(%ld)", newnodes)
                ]
                repair.strip(repo.ui, repo, strippoints, backup=False)

    if not cleanup:
        # we don't update to the startnode if we can't strip
        startctx = repo[b'.']
        mergemod.clean_update(startctx)

    ui.status(_(b"graft aborted\n"))
    ui.status(_(b"working directory is now at %s\n") % startctx.hex()[:12])
    graftstate.delete()
    return 0


def readgraftstate(repo, graftstate):
    # type: (Any, statemod.cmdstate) -> Dict[bytes, Any]
    """read the graft state file and return a dict of the data stored in it"""
    try:
        return graftstate.read()
    except error.CorruptedState:
        nodes = repo.vfs.read(b'graftstate').splitlines()
        return {b'nodes': nodes}


def hgabortgraft(ui, repo):
    """abort logic for aborting graft using 'hg abort'"""
    with repo.wlock():
        graftstate = statemod.cmdstate(repo, b'graftstate')
        return abortgraft(ui, repo, graftstate)
                                                                                                                                                                                                                                                                                                                                                                                                                                  usr/lib/python3/dist-packages/mercurial/color.py                                                    0000644 0000000 0000000 00000043617 14355257011 020437  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # utility for color output for Mercurial commands
#
# Copyright (C) 2007 Kevin Christen <kevin.christen@gmail.com> and other
#
# This software may be used and distributed according to the terms of the
# GNU General Public License version 2 or any later version.


import re

from .i18n import _
from .pycompat import getattr

from . import (
    encoding,
    pycompat,
)

from .utils import stringutil

try:
    import curses

    # Mapping from effect name to terminfo attribute name (or raw code) or
    # color number.  This will also force-load the curses module.
    _baseterminfoparams = {
        b'none': (True, b'sgr0', b''),
        b'standout': (True, b'smso', b''),
        b'underline': (True, b'smul', b''),
        b'reverse': (True, b'rev', b''),
        b'inverse': (True, b'rev', b''),
        b'blink': (True, b'blink', b''),
        b'dim': (True, b'dim', b''),
        b'bold': (True, b'bold', b''),
        b'invisible': (True, b'invis', b''),
        b'italic': (True, b'sitm', b''),
        b'black': (False, curses.COLOR_BLACK, b''),
        b'red': (False, curses.COLOR_RED, b''),
        b'green': (False, curses.COLOR_GREEN, b''),
        b'yellow': (False, curses.COLOR_YELLOW, b''),
        b'blue': (False, curses.COLOR_BLUE, b''),
        b'magenta': (False, curses.COLOR_MAGENTA, b''),
        b'cyan': (False, curses.COLOR_CYAN, b''),
        b'white': (False, curses.COLOR_WHITE, b''),
    }
except (ImportError, AttributeError):
    curses = None
    _baseterminfoparams = {}

# start and stop parameters for effects
_effects = {
    b'none': 0,
    b'black': 30,
    b'red': 31,
    b'green': 32,
    b'yellow': 33,
    b'blue': 34,
    b'magenta': 35,
    b'cyan': 36,
    b'white': 37,
    b'bold': 1,
    b'italic': 3,
    b'underline': 4,
    b'inverse': 7,
    b'dim': 2,
    b'black_background': 40,
    b'red_background': 41,
    b'green_background': 42,
    b'yellow_background': 43,
    b'blue_background': 44,
    b'purple_background': 45,
    b'cyan_background': 46,
    b'white_background': 47,
}

_defaultstyles = {
    b'grep.match': b'red bold',
    b'grep.linenumber': b'green',
    b'grep.rev': b'blue',
    b'grep.sep': b'cyan',
    b'grep.filename': b'magenta',
    b'grep.user': b'magenta',
    b'grep.date': b'magenta',
    b'grep.inserted': b'green bold',
    b'grep.deleted': b'red bold',
    b'bookmarks.active': b'green',
    b'branches.active': b'none',
    b'branches.closed': b'black bold',
    b'branches.current': b'green',
    b'branches.inactive': b'none',
    b'diff.changed': b'white',
    b'diff.deleted': b'red',
    b'diff.deleted.changed': b'red bold underline',
    b'diff.deleted.unchanged': b'red',
    b'diff.diffline': b'bold',
    b'diff.extended': b'cyan bold',
    b'diff.file_a': b'red bold',
    b'diff.file_b': b'green bold',
    b'diff.hunk': b'magenta',
    b'diff.inserted': b'green',
    b'diff.inserted.changed': b'green bold underline',
    b'diff.inserted.unchanged': b'green',
    b'diff.tab': b'',
    b'diff.trailingwhitespace': b'bold red_background',
    b'changeset.public': b'',
    b'changeset.draft': b'',
    b'changeset.secret': b'',
    b'diffstat.deleted': b'red',
    b'diffstat.inserted': b'green',
    b'formatvariant.name.mismatchconfig': b'red',
    b'formatvariant.name.mismatchdefault': b'yellow',
    b'formatvariant.name.uptodate': b'green',
    b'formatvariant.repo.mismatchconfig': b'red',
    b'formatvariant.repo.mismatchdefault': b'yellow',
    b'formatvariant.repo.uptodate': b'green',
    b'formatvariant.config.special': b'yellow',
    b'formatvariant.config.default': b'green',
    b'formatvariant.default': b'',
    b'histedit.remaining': b'red bold',
    b'ui.addremove.added': b'green',
    b'ui.addremove.removed': b'red',
    b'ui.error': b'red',
    b'ui.prompt': b'yellow',
    b'log.changeset': b'yellow',
    b'patchbomb.finalsummary': b'',
    b'patchbomb.from': b'magenta',
    b'patchbomb.to': b'cyan',
    b'patchbomb.subject': b'green',
    b'patchbomb.diffstats': b'',
    b'rebase.rebased': b'blue',
    b'rebase.remaining': b'red bold',
    b'resolve.resolved': b'green bold',
    b'resolve.unresolved': b'red bold',
    b'shelve.age': b'cyan',
    b'shelve.newest': b'green bold',
    b'shelve.name': b'blue bold',
    b'status.added': b'green bold',
    b'status.clean': b'none',
    b'status.copied': b'none',
    b'status.deleted': b'cyan bold underline',
    b'status.ignored': b'black bold',
    b'status.modified': b'blue bold',
    b'status.removed': b'red bold',
    b'status.unknown': b'magenta bold underline',
    b'tags.normal': b'green',
    b'tags.local': b'black bold',
    b'upgrade-repo.requirement.preserved': b'cyan',
    b'upgrade-repo.requirement.added': b'green',
    b'upgrade-repo.requirement.removed': b'red',
}


def loadcolortable(ui, extname, colortable):
    _defaultstyles.update(colortable)


def _terminfosetup(ui, mode, formatted):
    '''Initialize terminfo data and the terminal if we're in terminfo mode.'''

    # If we failed to load curses, we go ahead and return.
    if curses is None:
        return
    # Otherwise, see what the config file says.
    if mode not in (b'auto', b'terminfo'):
        return
    ui._terminfoparams.update(_baseterminfoparams)

    for key, val in ui.configitems(b'color'):
        if key.startswith(b'color.'):
            newval = (False, int(val), b'')
            ui._terminfoparams[key[6:]] = newval
        elif key.startswith(b'terminfo.'):
            newval = (True, b'', val.replace(b'\\E', b'\x1b'))
            ui._terminfoparams[key[9:]] = newval
    try:
        curses.setupterm()
    except curses.error:
        ui._terminfoparams.clear()
        return

    for key, (b, e, c) in ui._terminfoparams.copy().items():
        if not b:
            continue
        if not c and not curses.tigetstr(pycompat.sysstr(e)):
            # Most terminals don't support dim, invis, etc, so don't be
            # noisy and use ui.debug().
            ui.debug(b"no terminfo entry for %s\n" % e)
            del ui._terminfoparams[key]
    if not curses.tigetstr('setaf') or not curses.tigetstr('setab'):
        # Only warn about missing terminfo entries if we explicitly asked for
        # terminfo mode and we're in a formatted terminal.
        if mode == b"terminfo" and formatted:
            ui.warn(
                _(
                    b"no terminfo entry for setab/setaf: reverting to "
                    b"ECMA-48 color\n"
                )
            )
        ui._terminfoparams.clear()


def setup(ui):
    """configure color on a ui

    That function both set the colormode for the ui object and read
    the configuration looking for custom colors and effect definitions."""
    mode = _modesetup(ui)
    ui._colormode = mode
    if mode and mode != b'debug':
        configstyles(ui)


def _modesetup(ui):
    if ui.plain(b'color'):
        return None
    config = ui.config(b'ui', b'color')
    if config == b'debug':
        return b'debug'

    auto = config == b'auto'
    always = False
    if not auto and stringutil.parsebool(config):
        # We want the config to behave like a boolean, "on" is actually auto,
        # but "always" value is treated as a special case to reduce confusion.
        if (
            ui.configsource(b'ui', b'color') == b'--color'
            or config == b'always'
        ):
            always = True
        else:
            auto = True

    if not always and not auto:
        return None

    formatted = always or (
        encoding.environ.get(b'TERM') != b'dumb' and ui.formatted()
    )

    mode = ui.config(b'color', b'mode')

    # If pager is active, color.pagermode overrides color.mode.
    if getattr(ui, 'pageractive', False):
        mode = ui.config(b'color', b'pagermode', mode)

    realmode = mode
    if pycompat.iswindows:
        from . import win32

        if mode == b'auto':
            # Since "ansi" could result in terminal gibberish, we error on the
            # side of selecting "win32". However, if w32effects is not defined,
            # we almost certainly don't support "win32", so don't even try.
            # w32effects is not populated when stdout is redirected, so checking
            # it first avoids win32 calls in a state known to error out.
            if not w32effects or win32.enablevtmode():
                realmode = b'ansi'
            else:
                realmode = b'win32'
        # An empty w32effects is a clue that stdout is redirected, and thus
        # cannot enable VT mode.
        elif mode == b'ansi' and w32effects:
            win32.enablevtmode()
    elif mode == b'auto':
        realmode = b'ansi'

    def modewarn():
        # only warn if color.mode was explicitly set and we're in
        # a formatted terminal
        if mode == realmode and formatted:
            ui.warn(_(b'warning: failed to set color mode to %s\n') % mode)

    if realmode == b'win32':
        ui._terminfoparams.clear()
        if not w32effects:
            modewarn()
            return None
    elif realmode == b'ansi':
        ui._terminfoparams.clear()
    elif realmode == b'terminfo':
        _terminfosetup(ui, mode, formatted)
        if not ui._terminfoparams:
            ## FIXME Shouldn't we return None in this case too?
            modewarn()
            realmode = b'ansi'
    else:
        return None

    if always or (auto and formatted):
        return realmode
    return None


def configstyles(ui):
    ui._styles.update(_defaultstyles)
    for status, cfgeffects in ui.configitems(b'color'):
        if b'.' not in status or status.startswith((b'color.', b'terminfo.')):
            continue
        cfgeffects = ui.configlist(b'color', status)
        if cfgeffects:
            good = []
            for e in cfgeffects:
                if valideffect(ui, e):
                    good.append(e)
                else:
                    ui.warn(
                        _(
                            b"ignoring unknown color/effect %s "
                            b"(configured in color.%s)\n"
                        )
                        % (stringutil.pprint(e), status)
                    )
            ui._styles[status] = b' '.join(good)


def _activeeffects(ui):
    '''Return the effects map for the color mode set on the ui.'''
    if ui._colormode == b'win32':
        return w32effects
    elif ui._colormode is not None:
        return _effects
    return {}


def valideffect(ui, effect):
    """Determine if the effect is valid or not."""
    return (not ui._terminfoparams and effect in _activeeffects(ui)) or (
        effect in ui._terminfoparams or effect[:-11] in ui._terminfoparams
    )


def _effect_str(ui, effect):
    '''Helper function for render_effects().'''

    bg = False
    if effect.endswith(b'_background'):
        bg = True
        effect = effect[:-11]
    try:
        attr, val, termcode = ui._terminfoparams[effect]
    except KeyError:
        return b''
    if attr:
        if termcode:
            return termcode
        else:
            return curses.tigetstr(pycompat.sysstr(val))
    elif bg:
        return curses.tparm(curses.tigetstr('setab'), val)
    else:
        return curses.tparm(curses.tigetstr('setaf'), val)


def _mergeeffects(text, start, stop):
    """Insert start sequence at every occurrence of stop sequence

    >>> s = _mergeeffects(b'cyan', b'[C]', b'|')
    >>> s = _mergeeffects(s + b'yellow', b'[Y]', b'|')
    >>> s = _mergeeffects(b'ma' + s + b'genta', b'[M]', b'|')
    >>> s = _mergeeffects(b'red' + s, b'[R]', b'|')
    >>> s
    '[R]red[M]ma[Y][C]cyan|[R][M][Y]yellow|[R][M]genta|'
    """
    parts = []
    for t in text.split(stop):
        if not t:
            continue
        parts.extend([start, t, stop])
    return b''.join(parts)


def _render_effects(ui, text, effects):
    """Wrap text in commands to turn on each effect."""
    if not text:
        return text
    if ui._terminfoparams:
        start = b''.join(
            _effect_str(ui, effect) for effect in [b'none'] + effects.split()
        )
        stop = _effect_str(ui, b'none')
    else:
        activeeffects = _activeeffects(ui)
        start = [
            pycompat.bytestr(activeeffects[e])
            for e in [b'none'] + effects.split()
        ]
        start = b'\033[' + b';'.join(start) + b'm'
        stop = b'\033[' + pycompat.bytestr(activeeffects[b'none']) + b'm'
    return _mergeeffects(text, start, stop)


_ansieffectre = re.compile(br'\x1b\[[0-9;]*m')


def stripeffects(text):
    """Strip ANSI control codes which could be inserted by colorlabel()"""
    return _ansieffectre.sub(b'', text)


def colorlabel(ui, msg, label):
    """add color control code according to the mode"""
    if ui._colormode == b'debug':
        if label and msg:
            if msg.endswith(b'\n'):
                msg = b"[%s|%s]\n" % (label, msg[:-1])
            else:
                msg = b"[%s|%s]" % (label, msg)
    elif ui._colormode is not None:
        effects = []
        for l in label.split():
