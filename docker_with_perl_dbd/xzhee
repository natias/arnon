    } else {
        $offset = $self->_writeCentralDirectoryOffset();
    }

    my $membersZip64 = 0;
    foreach my $member ($self->members()) {
        my ($status, $headerSize) =
          $member->_writeCentralDirectoryFileHeader($fh, $self->desiredZip64Mode());
        return $status if $status != AZ_OK;
        $membersZip64 ||= $member->zip64();
        $offset += $headerSize;
        $self->{'writeEOCDOffset'} = $offset;
    }

    return $self->_writeEndOfCentralDirectory($fh, $membersZip64);
}

sub read {
    my $self = shift;
    my $fileName = (ref($_[0]) eq 'HASH') ? shift->{filename} : shift;
    return _error('No filename given') unless $fileName;
    my ($status, $fh) = _newFileHandle($fileName, 'r');
    return _ioError("opening $fileName for read") unless $status;

    $status = $self->readFromFileHandle($fh, $fileName);
    return $status if $status != AZ_OK;

    $fh->close();
    $self->{'fileName'} = $fileName;
    return AZ_OK;
}

sub readFromFileHandle {
    my $self = shift;

    my ($fh, $fileName);
    if (ref($_[0]) eq 'HASH') {
        $fh       = $_[0]->{fileHandle};
        $fileName = $_[0]->{filename};
    } else {
        ($fh, $fileName) = @_;
    }

    $fileName = $fh unless defined($fileName);
    return _error('No filehandle given')   unless $fh;
    return _ioError('filehandle not open') unless $fh->opened();

    _binmode($fh);
    $self->{'fileName'} = "$fh";

    # TODO: how to support non-seekable zips?
    return _error('file not seekable')
      unless _isSeekable($fh);

    $fh->seek(0, 0);    # rewind the file

    my $status = $self->_findEndOfCentralDirectory($fh);
    return $status if $status != AZ_OK;

    my $eocdPosition;
    ($status, $eocdPosition) = $self->_readEndOfCentralDirectory($fh, $fileName);
    return $status if $status != AZ_OK;

    my $zip64 = $self->zip64();

    $fh->seek($eocdPosition - $self->centralDirectorySize(),
        IO::Seekable::SEEK_SET)
      or return _ioError("Can't seek $fileName");

    # Try to detect garbage at beginning of archives
    # This should be 0
    $self->{'eocdOffset'} = $eocdPosition - $self->centralDirectorySize() # here
      - $self->centralDirectoryOffsetWRTStartingDiskNumber();

    for (; ;) {
        my $newMember =
          Archive::Zip::Member->_newFromZipFile($fh, $fileName, $zip64,
            $self->eocdOffset());
        my $signature;
        ($status, $signature) = _readSignature($fh, $fileName);
        return $status if $status != AZ_OK;
        if (! $zip64) {
            last if $signature == END_OF_CENTRAL_DIRECTORY_SIGNATURE;
        }
        else {
            last if $signature == ZIP64_END_OF_CENTRAL_DIRECTORY_RECORD_SIGNATURE;
        }
        $status = $newMember->_readCentralDirectoryFileHeader();
        return $status if $status != AZ_OK;
        $status = $newMember->endRead();
        return $status if $status != AZ_OK;

        if ($newMember->isDirectory()) {
            $newMember->_become('Archive::Zip::DirectoryMember');
            # Ensure above call suceeded to avoid future trouble
            $newMember->_ISA('Archive::Zip::DirectoryMember') or
              return $self->_error('becoming Archive::Zip::DirectoryMember');
        }

        if(($newMember->{bitFlag} & 0x800) && !utf8::is_utf8($newMember->{fileName})){
            $newMember->{fileName} = Encode::decode_utf8($newMember->{fileName});
        }

        push(@{$self->{'members'}}, $newMember);
    }

    return AZ_OK;
}

# Read EOCD, starting from position before signature.
# Checks for a zip64 EOCD record and uses that if present.
#
# Return AZ_OK (in scalar context) or a pair (AZ_OK,
# $eocdPosition) (in list context) on success:
# ( $status, $eocdPosition ) = $zip->_readEndOfCentralDirectory( $fh, $fileName );
# where the returned EOCD position either points to the beginning
# of the EOCD or to the beginning of the zip64 EOCD record.
#
# APPNOTE.TXT as of version 6.3.6 is a bit vague on the
# "ZIP64(tm) format".  It has a lot of conditions like "if an
# archive is in ZIP64 format", but never explicitly mentions
# *when* an archive is in that format.  (Or at least I haven't
# found it.)
#
# So I decided that an archive is in ZIP64 format if zip64 EOCD
# locator and zip64 EOCD record are present before the EOCD with
# the format given in the specification.
sub _readEndOfCentralDirectory {
    my $self     = shift;
    my $fh       = shift;
    my $fileName = shift;

    # Remember current position, which is just before the EOCD
    # signature
    my $eocdPosition = $fh->tell();

    # Reset the zip64 format flag
    $self->{'zip64'} = 0;
    my $zip64EOCDPosition;

    # Check for zip64 EOCD locator and zip64 EOCD record.  Be
    # extra careful here to not interpret any random data as
    # zip64 data structures.  If in doubt, silently continue
    # reading the regular EOCD.
  NOZIP64:
    {
        # Do not even start looking for any zip64 structures if
        # that would not be supported.
        if (! ZIP64_SUPPORTED) {
            last NOZIP64;
        }

        if ($eocdPosition < ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_LENGTH + SIGNATURE_LENGTH) {
            last NOZIP64;
        }

        # Skip to before potential zip64 EOCD locator
        $fh->seek(-(ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_LENGTH) - SIGNATURE_LENGTH,
                  IO::Seekable::SEEK_CUR)
          or return _ioError("seeking to before zip 64 EOCD locator");
        my $zip64EOCDLocatorPosition =
          $eocdPosition - ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_LENGTH - SIGNATURE_LENGTH;

        my $status;
        my $bytesRead;

        # Read potential zip64 EOCD locator signature
        $status =
          _readSignature($fh, $fileName,
                         ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_SIGNATURE, 1);
        return $status if $status == AZ_IO_ERROR;
        if ($status == AZ_FORMAT_ERROR) {
            $fh->seek($eocdPosition, IO::Seekable::SEEK_SET)
              or return _ioError("seeking to EOCD");
            last NOZIP64;
        }

        # Read potential zip64 EOCD locator and verify it
        my $locator = '';
        $bytesRead = $fh->read($locator, ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_LENGTH);
        if ($bytesRead != ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_LENGTH) {
            return _ioError("reading zip64 EOCD locator");
        }
        (undef, $zip64EOCDPosition, undef) =
          unpack(ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_FORMAT, $locator);
        if ($zip64EOCDPosition >
            ($zip64EOCDLocatorPosition - ZIP64_END_OF_CENTRAL_DIRECTORY_RECORD_LENGTH - SIGNATURE_LENGTH)) {
            # No need to seek to EOCD since we're already there
            last NOZIP64;
        }

        # Skip to potential zip64 EOCD record
        $fh->seek($zip64EOCDPosition, IO::Seekable::SEEK_SET)
          or return _ioError("seeking to zip64 EOCD record");

        # Read potential zip64 EOCD record signature
        $status =
          _readSignature($fh, $fileName,
                         ZIP64_END_OF_CENTRAL_DIRECTORY_RECORD_SIGNATURE, 1);
        return $status if $status == AZ_IO_ERROR;
        if ($status == AZ_FORMAT_ERROR) {
            $fh->seek($eocdPosition, IO::Seekable::SEEK_SET)
              or return _ioError("seeking to EOCD");
            last NOZIP64;
        }

        # Read potential zip64 EOCD record.  Ignore the zip64
        # extensible data sector.
        my $record = '';
        $bytesRead = $fh->read($record, ZIP64_END_OF_CENTRAL_DIRECTORY_RECORD_LENGTH);
        if ($bytesRead != ZIP64_END_OF_CENTRAL_DIRECTORY_RECORD_LENGTH) {
            return _ioError("reading zip64 EOCD record");
        }

        # Perform one final check, hoping that all implementors
        # follow the recommendation of the specification
        # regarding the size of the zip64 EOCD record
        my ($zip64EODCRecordSize) = unpack("Q<", $record);
        if ($zip64EOCDPosition + 12 + $zip64EODCRecordSize != $zip64EOCDLocatorPosition) {
            $fh->seek($eocdPosition, IO::Seekable::SEEK_SET)
              or return _ioError("seeking to EOCD");
            last NOZIP64;
        }

        $self->{'zip64'} = 1;
        (
            undef,
            $self->{'versionMadeBy'},
            $self->{'versionNeededToExtract'},
            $self->{'diskNumber'},
            $self->{'diskNumberWithStartOfCentralDirectory'},
            $self->{'numberOfCentralDirectoriesOnThisDisk'},
            $self->{'numberOfCentralDirectories'},
            $self->{'centralDirectorySize'},
            $self->{'centralDirectoryOffsetWRTStartingDiskNumber'}
        ) = unpack(ZIP64_END_OF_CENTRAL_DIRECTORY_RECORD_FORMAT, $record);

        # Don't just happily bail out, we still need to read the
        # zip file comment!
        $fh->seek($eocdPosition, IO::Seekable::SEEK_SET)
          or return _ioError("seeking to EOCD");
    }

    # Skip past signature
    $fh->seek(SIGNATURE_LENGTH, IO::Seekable::SEEK_CUR)
      or return _ioError("seeking past EOCD signature");

    my $header = '';
    my $bytesRead = $fh->read($header, END_OF_CENTRAL_DIRECTORY_LENGTH);
    if ($bytesRead != END_OF_CENTRAL_DIRECTORY_LENGTH) {
        return _ioError("reading end of central directory");
    }

    my $zipfileCommentLength;
    if (! $self->{'zip64'}) {
        (
            $self->{'diskNumber'},
            $self->{'diskNumberWithStartOfCentralDirectory'},
            $self->{'numberOfCentralDirectoriesOnThisDisk'},
            $self->{'numberOfCentralDirectories'},
            $self->{'centralDirectorySize'},
            $self->{'centralDirectoryOffsetWRTStartingDiskNumber'},
            $zipfileCommentLength
        ) = unpack(END_OF_CENTRAL_DIRECTORY_FORMAT, $header);

        if (   $self->{'diskNumber'}                                  == 0xffff
            || $self->{'diskNumberWithStartOfCentralDirectory'}       == 0xffff
            || $self->{'numberOfCentralDirectoriesOnThisDisk'}        == 0xffff
            || $self->{'numberOfCentralDirectories'}                  == 0xffff
            || $self->{'centralDirectorySize'}                        == 0xffffffff
            || $self->{'centralDirectoryOffsetWRTStartingDiskNumber'} == 0xffffffff) {
            if (ZIP64_SUPPORTED) {
                return _formatError("unexpected zip64 marker values in EOCD");
            }
            else {
                return _zip64NotSupported();
            }
        }
    }
    else {
        (
            undef,
            undef,
            undef,
            undef,
            undef,
            undef,
            $zipfileCommentLength
        ) = unpack(END_OF_CENTRAL_DIRECTORY_FORMAT, $header);
    }

    if ($zipfileCommentLength) {
        my $zipfileComment = '';
        $bytesRead = $fh->read($zipfileComment, $zipfileCommentLength);
        if ($bytesRead != $zipfileCommentLength) {
            return _ioError("reading zipfile comment");
        }
        $self->{'zipfileComment'} = $zipfileComment;
    }

    if (! $self->{'zip64'}) {
        return
          wantarray
          ? (AZ_OK, $eocdPosition)
          : AZ_OK;
    }
    else {
        return
          wantarray
          ? (AZ_OK, $zip64EOCDPosition)
          : AZ_OK;
    }
}

# Seek in my file to the end, then read backwards until we find the
# signature of the central directory record. Leave the file positioned right
# before the signature. Returns AZ_OK if success.
sub _findEndOfCentralDirectory {
    my $self = shift;
    my $fh   = shift;
    my $data = '';
    $fh->seek(0, IO::Seekable::SEEK_END)
      or return _ioError("seeking to end");

    my $fileLength = $fh->tell();
    if ($fileLength < END_OF_CENTRAL_DIRECTORY_LENGTH + 4) {
        return _formatError("file is too short");
    }

    my $seekOffset = 0;
    my $pos        = -1;
    for (; ;) {
        $seekOffset += 512;
        $seekOffset = $fileLength if ($seekOffset > $fileLength);
        $fh->seek(-$seekOffset, IO::Seekable::SEEK_END)
          or return _ioError("seek failed");
        my $bytesRead = $fh->read($data, $seekOffset);
        if ($bytesRead != $seekOffset) {
            return _ioError("read failed");
        }
        $pos = rindex($data, END_OF_CENTRAL_DIRECTORY_SIGNATURE_STRING);
        last
          if ( $pos >= 0
            or $seekOffset == $fileLength
            or $seekOffset >= $Archive::Zip::ChunkSize);
    }

    if ($pos >= 0) {
        $fh->seek($pos - $seekOffset, IO::Seekable::SEEK_CUR)
          or return _ioError("seeking to EOCD");
        return AZ_OK;
    } else {
        return _formatError("can't find EOCD signature");
    }
}

# Used to avoid taint problems when chdir'ing.
# Not intended to increase security in any way; just intended to shut up the -T
# complaints.  If your Cwd module is giving you unreliable returns from cwd()
# you have bigger problems than this.
sub _untaintDir {
    my $dir = shift;
    $dir =~ m/$UNTAINT/s;
    return $1;
}

sub addTree {
    my $self = shift;

    my ($root, $dest, $pred, $compressionLevel);
    if (ref($_[0]) eq 'HASH') {
        $root             = $_[0]->{root};
        $dest             = $_[0]->{zipName};
        $pred             = $_[0]->{select};
        $compressionLevel = $_[0]->{compressionLevel};
    } else {
        ($root, $dest, $pred, $compressionLevel) = @_;
    }

    return _error("root arg missing in call to addTree()")
      unless defined($root);
    $dest = '' unless defined($dest);
    $pred = sub { -r }
      unless defined($pred);

    my @files;
    my $startDir = _untaintDir(cwd());

    return _error('undef returned by _untaintDir on cwd ', cwd())
      unless $startDir;

    # This avoids chdir'ing in Find, in a way compatible with older
    # versions of File::Find.
    my $wanted = sub {
        local $main::_ = $File::Find::name;
        my $dir = _untaintDir($File::Find::dir);
        chdir($startDir);
        if ($^O eq 'MSWin32' && $Archive::Zip::UNICODE) {
            push(@files, Win32::GetANSIPathName($File::Find::name)) if (&$pred);
            $dir = Win32::GetANSIPathName($dir);
        } else {
            push(@files, $File::Find::name) if (&$pred);
        }
        chdir($dir);
    };

    if ($^O eq 'MSWin32' && $Archive::Zip::UNICODE) {
        $root = Win32::GetANSIPathName($root);
    }
    # File::Find will not untaint unless you explicitly pass the flag and regex pattern.
    File::Find::find({ wanted => $wanted, untaint => 1, untaint_pattern => $UNTAINT }, $root);

    my $rootZipName = _asZipDirName($root, 1);    # with trailing slash
    my $pattern = $rootZipName eq './' ? '^' : "^\Q$rootZipName\E";

    $dest = _asZipDirName($dest, 1);              # with trailing slash

    foreach my $fileName (@files) {
        my $isDir;
        if ($^O eq 'MSWin32' && $Archive::Zip::UNICODE) {
            $isDir = -d Win32::GetANSIPathName($fileName);
        } else {
            $isDir = -d $fileName;
        }

        # normalize, remove leading ./
        my $archiveName = _asZipDirName($fileName, $isDir);
        if ($archiveName eq $rootZipName) { $archiveName = $dest }
        else                              { $archiveName =~ s{$pattern}{$dest} }
        next if $archiveName =~ m{^\.?/?$};    # skip current dir
        my $member =
            $isDir
          ? $self->addDirectory($fileName, $archiveName)
          : $self->addFile($fileName, $archiveName);
        $member->desiredCompressionLevel($compressionLevel);

        return _error("add $fileName failed in addTree()") if !$member;
    }
    return AZ_OK;
}

sub addTreeMatching {
    my $self = shift;

    my ($root, $dest, $pattern, $pred, $compressionLevel);
    if (ref($_[0]) eq 'HASH') {
        $root             = $_[0]->{root};
        $dest             = $_[0]->{zipName};
        $pattern          = $_[0]->{pattern};
        $pred             = $_[0]->{select};
        $compressionLevel = $_[0]->{compressionLevel};
    } else {
        ($root, $dest, $pattern, $pred, $compressionLevel) = @_;
    }

    return _error("root arg missing in call to addTreeMatching()")
      unless defined($root);
    $dest = '' unless defined($dest);
    return _error("pattern missing in call to addTreeMatching()")
      unless defined($pattern);
    my $matcher =
      $pred ? sub { m{$pattern} && &$pred } : sub { m{$pattern} && -r };
    return $self->addTree($root, $dest, $matcher, $compressionLevel);
}

# Check if one of the components of a path to the file or the file name
# itself is an already existing symbolic link. If yes then return an
# error. Continuing and writing to a file traversing a link posseses
# a security threat, especially if the link was extracted from an
# attacker-supplied archive. This would allow writing to an arbitrary
# file. The same applies when using ".." to escape from a working
# directory. <https://bugzilla.redhat.com/show_bug.cgi?id=1591449>
sub _extractionNameIsSafe {
    my $name = shift;
    my ($volume, $directories) = File::Spec->splitpath($name, 1);
    my @directories = File::Spec->splitdir($directories);
    if (grep '..' eq $_, @directories) {
        return _error(
            "Could not extract $name safely: a parent directory is used");
    }
    my @path;
    my $path;
    for my $directory (@directories) {
        push @path, $directory;
        $path = File::Spec->catpath($volume, File::Spec->catdir(@path), '');
        if (-l $path) {
            return _error(
                "Could not extract $name safely: $path is an existing symbolic link");
        }
        if (!-e $path) {
            last;
        }
    }
    return AZ_OK;
}

# $zip->extractTree( $root, $dest [, $volume] );
#
# $root and $dest are Unix-style.
# $volume is in local FS format.
#
sub extractTree {
    my $self = shift;

    my ($root, $dest, $volume);
    if (ref($_[0]) eq 'HASH') {
        $root   = $_[0]->{root};
        $dest   = $_[0]->{zipName};
        $volume = $_[0]->{volume};
    } else {
        ($root, $dest, $volume) = @_;
    }

    $root = '' unless defined($root);
    if (defined $dest) {
        if ($dest !~ m{/$}) {
            $dest .= '/';
        }
    } else {
        $dest = './';
    }

    my $pattern = "^\Q$root";
    my @members = $self->membersMatching($pattern);

    foreach my $member (@members) {
        my $fileName = $member->fileName();    # in Unix format
        $fileName =~ s{$pattern}{$dest};       # in Unix format
                                               # convert to platform format:
        $fileName = Archive::Zip::_asLocalName($fileName, $volume);
        if ((my $ret = _extractionNameIsSafe($fileName))
            != AZ_OK) { return $ret; }
        my $status = $member->extractToFileNamed($fileName);
        return $status if $status != AZ_OK;
    }
    return AZ_OK;
}

# $zip->updateMember( $memberOrName, $fileName );
# Returns (possibly updated) member, if any; undef on errors.

sub updateMember {
    my $self = shift;

    my ($oldMember, $fileName);
    if (ref($_[0]) eq 'HASH') {
        $oldMember = $_[0]->{memberOrZipName};
        $fileName  = $_[0]->{name};
    } else {
        ($oldMember, $fileName) = @_;
    }

    if (!defined($fileName)) {
        _error("updateMember(): missing fileName argument");
        return undef;
    }

    my @newStat = stat($fileName);
    if (!@newStat) {
        _ioError("Can't stat $fileName");
        return undef;
    }

    my $isDir = -d _;

    my $memberName;

    if (ref($oldMember)) {
        $memberName = $oldMember->fileName();
    } else {
        $oldMember = $self->memberNamed($memberName = $oldMember)
          || $self->memberNamed($memberName =
              _asZipDirName($oldMember, $isDir));
    }

    unless (defined($oldMember)
        && $oldMember->lastModTime() == $newStat[9]
        && $oldMember->isDirectory() == $isDir
        && ($isDir || ($oldMember->uncompressedSize() == $newStat[7]))) {

        # create the new member
        my $newMember =
            $isDir
          ? Archive::Zip::Member->newDirectoryNamed($fileName, $memberName)
          : Archive::Zip::Member->newFromFile($fileName, $memberName);

        unless (defined($newMember)) {
            _error("creation of member $fileName failed in updateMember()");
            return undef;
        }

        # replace old member or append new one
        if (defined($oldMember)) {
            $self->replaceMember($oldMember, $newMember);
        } else {
            $self->addMember($newMember);
        }

        return $newMember;
    }

    return $oldMember;
}

# $zip->updateTree( $root, [ $dest, [ $pred [, $mirror]]] );
#
# This takes the same arguments as addTree, but first checks to see
# whether the file or directory already exists in the zip file.
#
# If the fourth argument $mirror is true, then delete all my members
# if corresponding files were not found.

sub updateTree {
    my $self = shift;

    my ($root, $dest, $pred, $mirror, $compressionLevel);
    if (ref($_[0]) eq 'HASH') {
        $root             = $_[0]->{root};
        $dest             = $_[0]->{zipName};
        $pred             = $_[0]->{select};
        $mirror           = $_[0]->{mirror};
        $compressionLevel = $_[0]->{compressionLevel};
    } else {
        ($root, $dest, $pred, $mirror, $compressionLevel) = @_;
    }

    return _error("root arg missing in call to updateTree()")
      unless defined($root);
    $dest = '' unless defined($dest);
    $pred = sub { -r }
      unless defined($pred);

    $dest = _asZipDirName($dest, 1);
    my $rootZipName = _asZipDirName($root, 1);    # with trailing slash
    my $pattern = $rootZipName eq './' ? '^' : "^\Q$rootZipName\E";

    my @files;
    my $startDir = _untaintDir(cwd());

    return _error('undef returned by _untaintDir on cwd ', cwd())
      unless $startDir;

    # This avoids chdir'ing in Find, in a way compatible with older
    # versions of File::Find.
    my $wanted = sub {
        local $main::_ = $File::Find::name;
        my $dir = _untaintDir($File::Find::dir);
        chdir($startDir);
        push(@files, $File::Find::name) if (&$pred);
        chdir($dir);
    };

    File::Find::find($wanted, $root);

    # Now @files has all the files that I could potentially be adding to
    # the zip. Only add the ones that are necessary.
    # For each file (updated or not), add its member name to @done.
    my %done;
    foreach my $fileName (@files) {
        my @newStat = stat($fileName);
        my $isDir   = -d _;

        # normalize, remove leading ./
        my $memberName = _asZipDirName($fileName, $isDir);
        if ($memberName eq $rootZipName) { $memberName = $dest }
        else                             { $memberName =~ s{$pattern}{$dest} }
        next if $memberName =~ m{^\.?/?$};    # skip current dir

        $done{$memberName} = 1;
        my $changedMember = $self->updateMember($memberName, $fileName);
        $changedMember->desiredCompressionLevel($compressionLevel);
        return _error("updateTree failed to update $fileName")
          unless ref($changedMember);
    }

    # @done now has the archive names corresponding to all the found files.
    # If we're mirroring, delete all those members that aren't in @done.
    if ($mirror) {
        foreach my $member ($self->members()) {
            $self->removeMember($member)
              unless $done{$member->fileName()};
        }
    }

    return AZ_OK;
}

1;
                                                                                                                       usr/share/perl5/Archive/Zip/BufferedFileHandle.pm                                                   0000644 0000000 0000000 00000005272 13632474012 020335  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Archive::Zip::BufferedFileHandle;

# File handle that uses a string internally and can seek
# This is given as a demo for getting a zip file written
# to a string.
# I probably should just use IO::Scalar instead.
# Ned Konz, March 2000

use strict;
use IO::File;
use Carp;

use vars qw{$VERSION};

BEGIN {
    $VERSION = '1.68';
    $VERSION = eval $VERSION;
}

sub new {
    my $class = shift || __PACKAGE__;
    $class = ref($class) || $class;
    my $self = bless(
        {
            content  => '',
            position => 0,
            size     => 0
        },
        $class
    );
    return $self;
}

# Utility method to read entire file
sub readFromFile {
    my $self     = shift;
    my $fileName = shift;
    my $fh       = IO::File->new($fileName, "r");
    CORE::binmode($fh);
    if (!$fh) {
        Carp::carp("Can't open $fileName: $!\n");
        return undef;
    }
    local $/ = undef;
    $self->{content} = <$fh>;
    $self->{size}    = length($self->{content});
    return $self;
}

sub contents {
    my $self = shift;
    if (@_) {
        $self->{content} = shift;
        $self->{size}    = length($self->{content});
    }
    return $self->{content};
}

sub binmode { 1 }

sub close { 1 }

sub opened { 1 }

sub eof {
    my $self = shift;
    return $self->{position} >= $self->{size};
}

sub seek {
    my $self   = shift;
    my $pos    = shift;
    my $whence = shift;

    # SEEK_SET
    if ($whence == 0) { $self->{position} = $pos; }

    # SEEK_CUR
    elsif ($whence == 1) { $self->{position} += $pos; }

    # SEEK_END
    elsif ($whence == 2) { $self->{position} = $self->{size} + $pos; }
    else                 { return 0; }

    return 1;
}

sub tell { return shift->{position}; }

# Copy my data to given buffer
sub read {
    my $self = shift;
    my $buf  = \($_[0]);
    shift;
    my $len = shift;
    my $offset = shift || 0;

    $$buf = '' if not defined($$buf);
    my $bytesRead =
        ($self->{position} + $len > $self->{size})
      ? ($self->{size} - $self->{position})
      : $len;
    substr($$buf, $offset, $bytesRead) =
      substr($self->{content}, $self->{position}, $bytesRead);
    $self->{position} += $bytesRead;
    return $bytesRead;
}

# Copy given buffer to me
sub write {
    my $self = shift;
    my $buf  = \($_[0]);
    shift;
    my $len = shift;
    my $offset = shift || 0;

    $$buf = '' if not defined($$buf);
    my $bufLen = length($$buf);
    my $bytesWritten =
      ($offset + $len > $bufLen)
      ? $bufLen - $offset
      : $len;
    substr($self->{content}, $self->{position}, $bytesWritten) =
      substr($$buf, $offset, $bytesWritten);
    $self->{size} = length($self->{content});
    return $bytesWritten;
}

sub clearerr() { 1 }

1;
                                                                                                                                                                                                                                                                                                                                      usr/share/perl5/Archive/Zip/DirectoryMember.pm                                                      0000644 0000000 0000000 00000003676 13632474012 020001  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Archive::Zip::DirectoryMember;

use strict;
use File::Path;

use vars qw( $VERSION @ISA );

BEGIN {
    $VERSION = '1.68';
    @ISA     = qw( Archive::Zip::Member );
}

use Archive::Zip qw(
  :ERROR_CODES
  :UTILITY_METHODS
);

sub _newNamed {
    my $class    = shift;
    my $fileName = shift;    # FS name
    my $newName  = shift;    # Zip name
    $newName = _asZipDirName($fileName) unless $newName;
    my $self = $class->new(@_);
    $self->{'externalFileName'} = $fileName;
    $self->fileName($newName);

    if (-e $fileName) {

        # -e does NOT do a full stat, so we need to do one now
        if (-d _ ) {
            my @stat = stat(_);
            $self->unixFileAttributes($stat[2]);
            my $mod_t = $stat[9];
            if ($^O eq 'MSWin32' and !$mod_t) {
                $mod_t = time();
            }
            $self->setLastModFileDateTimeFromUnix($mod_t);

        } else {    # hmm.. trying to add a non-directory?
            _error($fileName, ' exists but is not a directory');
            return undef;
        }
    } else {
        $self->unixFileAttributes($self->DEFAULT_DIRECTORY_PERMISSIONS);
        $self->setLastModFileDateTimeFromUnix(time());
    }
    return $self;
}

sub externalFileName {
    shift->{'externalFileName'};
}

sub isDirectory {
    return 1;
}

sub extractToFileNamed {
    my $self    = shift;
    my $name    = shift;                                 # local FS name
    my $attribs = $self->unixFileAttributes() & 07777;
    mkpath($name, 0, $attribs);                          # croaks on error
    utime($self->lastModTime(), $self->lastModTime(), $name);
    return AZ_OK;
}

sub fileName {
    my $self    = shift;
    my $newName = shift;
    $newName =~ s{/?$}{/} if defined($newName);
    return $self->SUPER::fileName($newName);
}

# So people don't get too confused. This way it looks like the problem
# is in their code...
sub contents {
    return wantarray ? (undef, AZ_OK) : undef;
}

1;
                                                                  usr/share/perl5/Archive/Zip/FAQ.pod                                                                 0000644 0000000 0000000 00000030013 13632347357 015456  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

Archive::Zip::FAQ - Answers to a few frequently asked questions about Archive::Zip

=head1 DESCRIPTION

It seems that I keep answering the same questions over and over again. I
assume that this is because my documentation is deficient, rather than that
people don't read the documentation.

So this FAQ is an attempt to cut down on the number of personal answers I have
to give. At least I can now say "You I<did> read the FAQ, right?".

The questions are not in any particular order. The answers assume the current
version of Archive::Zip; some of the answers depend on newly added/fixed
functionality.

=head1 Install problems on RedHat 8 or 9 with Perl 5.8.0

B<Q:> Archive::Zip won't install on my RedHat 9 system! It's broke!

B<A:> This has become something of a FAQ.
Basically, RedHat broke some versions of Perl by setting LANG to UTF8.
They apparently have a fixed version out as an update.

You might try running CPAN or creating your Makefile after exporting the LANG
environment variable as

C<LANG=C>

L<https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=87682>

=head1 Why is my zip file so big?

B<Q:> My zip file is actually bigger than what I stored in it! Why?

B<A:> Some things to make sure of:

=over 4

=item Make sure that you are requesting COMPRESSION_DEFLATED if you are storing strings.

$member->desiredCompressionMethod( COMPRESSION_DEFLATED );

=item Don't make lots of little files if you can help it.

Since zip computes the compression tables for each member, small
members without much entropy won't compress well.  Instead, if you've
got lots of repeated strings in your data, try to combine them into
one big member.

=item Make sure that you are requesting COMPRESSION_STORED if you are storing things that are already compressed.

If you're storing a .zip, .jpg, .mp3, or other compressed file in a zip,
then don't compress them again. They'll get bigger.

=back

=head1 Sample code?

B<Q:> Can you send me code to do (whatever)?

B<A:> Have you looked in the C<examples/> directory yet? It contains:

=over 4

=item examples/calcSizes.pl    -- How to find out how big a Zip file will be before writing it

=item examples/copy.pl         -- Copies one Zip file to another

=item examples/extract.pl      -- extract file(s) from a Zip

=item examples/mailZip.pl      -- make and mail a zip file

=item examples/mfh.pl          -- demo for use of MockFileHandle

=item examples/readScalar.pl   -- shows how to use IO::Scalar as the source of a Zip read

=item examples/selfex.pl       -- a brief example of a self-extracting Zip

=item examples/unzipAll.pl     -- uses Archive::Zip::Tree to unzip an entire Zip

=item examples/updateZip.pl    -- shows how to read/modify/write a Zip

=item examples/updateTree.pl   -- shows how to update a Zip in place

=item examples/writeScalar.pl  -- shows how to use IO::Scalar as the destination of a Zip write

=item examples/writeScalar2.pl -- shows how to use IO::String as the destination of a Zip write

=item examples/zip.pl          -- Constructs a Zip file

=item examples/zipcheck.pl     -- One way to check a Zip file for validity

=item examples/zipinfo.pl      -- Prints out information about a Zip archive file

=item examples/zipGrep.pl      -- Searches for text in Zip files

=item examples/ziptest.pl      -- Lists a Zip file and checks member CRCs

=item examples/ziprecent.pl    -- Puts recent files into a zipfile
