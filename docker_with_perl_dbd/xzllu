
March 14, 2003 (Pi day), May 8, 2003, November 13, 2003, November 16, 2003,
December 9, 2003, December 15, 2003, July 26, 2005, August 23, 2005

=back

=head2 CPAN::Meta::History::Meta_1_3 - Version 1.3 metadata specification
for META.yml

=over 4

=item PREFACE

=item SYNOPSIS

=item DESCRIPTION

=item FORMAT

=item TERMINOLOGY

distribution, module

=item HEADER

=item FIELDS

=over 4

=item meta-spec

=item name

=item version

=item abstract

=item author

=item license

apache, artistic, bsd, gpl, lgpl, mit, mozilla, open_source, perl,
restrictive, unrestricted

=item distribution_type

=item requires

=item recommends

=item build_requires

=item conflicts

=item dynamic_config

=item private

=item provides

=item no_index

=item keywords

=item resources

homepage, license, bugtracker

=item generated_by

=back

=item VERSION SPECIFICATIONS

=item SEE ALSO

=item HISTORY

March 14, 2003 (Pi day), May 8, 2003, November 13, 2003, November 16, 2003,
December 9, 2003, December 15, 2003, July 26, 2005, August 23, 2005

=back

=head2 CPAN::Meta::History::Meta_1_4 - Version 1.4 metadata specification
for META.yml

=over 4

=item PREFACE

=item SYNOPSIS

=item DESCRIPTION

=item FORMAT

=item TERMINOLOGY

distribution, module

=item HEADER

=item FIELDS

=over 4

=item meta-spec

=item name

=item version

=item abstract

=item author

=item license

apache, artistic, bsd, gpl, lgpl, mit, mozilla, open_source, perl,
restrictive, unrestricted

=item distribution_type

=item requires

=item recommends

=item build_requires

=item configure_requires

=item conflicts

=item dynamic_config

=item private

=item provides

=item no_index

=item keywords

=item resources

homepage, license, bugtracker

=item generated_by

=back

=item VERSION SPECIFICATIONS

=item SEE ALSO

=item HISTORY

March 14, 2003 (Pi day), May 8, 2003, November 13, 2003, November 16, 2003,
December 9, 2003, December 15, 2003, July 26, 2005, August 23, 2005, June
12, 2007

=back

=head2 CPAN::Meta::Merge - Merging CPAN Meta fragments

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item new

=item merge(@fragments)

=back

=item MERGE STRATEGIES

identical, set_addition, uniq_map, improvise

=item AUTHORS

=item COPYRIGHT AND LICENSE

=back

=head2 CPAN::Meta::Prereqs - a set of distribution prerequisites by phase
and type

=over 4

=item VERSION

=item DESCRIPTION

=item METHODS

=over 4

=item new

=item requirements_for

=item phases

=item types_in

=item with_merged_prereqs

=item merged_requirements

=item as_string_hash

=item is_finalized

=item finalize

=item clone

=back

=item BUGS

=item AUTHORS

=item COPYRIGHT AND LICENSE

=back

=head2 CPAN::Meta::Requirements - a set of version requirements for a CPAN
dist

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item new

=item add_minimum

=item add_maximum

=item add_exclusion

=item exact_version

=item version_range_for_module

=item add_requirements

=item accepts_module

=item clear_requirement

=item requirements_for_module

=item structured_requirements_for_module

=item required_modules

=item clone

=item is_simple

=item is_finalized

=item finalize

=item as_string_hash

=item add_string_requirement

>= 1.3, <= 1.3, != 1.3, > 1.3, < 1.3, >= 1.3, != 1.5, <= 2.0

=item from_string_hash

=back

=item SUPPORT

=over 4

=item Bugs / Feature Requests

=item Source Code

=back

=item AUTHORS

=item CONTRIBUTORS

=item COPYRIGHT AND LICENSE

=back

=head2 CPAN::Meta::Requirements::Range - a set of version requirements for
a CPAN dist

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item with_string_requirement

>= 1.3, <= 1.3, != 1.3, > 1.3, < 1.3, >= 1.3, != 1.5, <= 2.0

=item with_range

=item with_exact_version

=item with_minimum

=item with_maximum

=item with_exclusion

=item as_struct

=item as_string

=item accepts

=item is_simple

=back

=item AUTHORS

=item COPYRIGHT AND LICENSE

=back

=head2 CPAN::Meta::Spec - specification for CPAN distribution metadata

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

=item TERMINOLOGY

distribution, module, package, consumer, producer, must, should, may, etc

=item DATA TYPES

=over 4

=item Boolean

=item String

=item List

=item Map

=item License String

=item URL

=item Version

=item Version Range

=back

=item STRUCTURE

=over 4

=item REQUIRED FIELDS

version, url, stable, testing, unstable

=item OPTIONAL FIELDS

file, directory, package, namespace, description, prereqs, file, version,
homepage, license, bugtracker, repository

=item DEPRECATED FIELDS

=back

=item VERSION NUMBERS

=over 4

=item Version Formats

Decimal versions, Dotted-integer versions

=item Version Ranges

=back

=item PREREQUISITES

=over 4

=item Prereq Spec

configure, build, test, runtime, develop, requires, recommends, suggests,
conflicts

=item Merging and Resolving Prerequisites

=back

=item SERIALIZATION

=item NOTES FOR IMPLEMENTORS

=over 4

=item Extracting Version Numbers from Perl Modules

=item Comparing Version Numbers

=item Prerequisites for dynamically configured distributions

=item Indexing distributions a la PAUSE

=back

=item SEE ALSO

=item HISTORY

=item AUTHORS

=item COPYRIGHT AND LICENSE

=back

=head2 CPAN::Meta::Validator - validate CPAN distribution metadata
structures

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item new

=item is_valid

=item errors

=item Check Methods

=item Validator Methods

=back

=item BUGS

=item AUTHORS

=item COPYRIGHT AND LICENSE

=back

=head2 CPAN::Meta::YAML - Read and write a subset of YAML for CPAN Meta
files

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

=item SUPPORT

=item SEE ALSO

=item AUTHORS

=item COPYRIGHT AND LICENSE

=back

=over 4

=item SYNOPSIS

=item DESCRIPTION

=back

new( LOCAL_FILE_NAME )

continents()

countries( [CONTINENTS] )

mirrors( [COUNTRIES] )

get_mirrors_by_countries( [COUNTRIES] )

get_mirrors_by_continents( [CONTINENTS] )

get_countries_by_continents( [CONTINENTS] )

default_mirror

best_mirrors

get_n_random_mirrors_by_continents( N, [CONTINENTS] )

get_mirrors_timings( MIRROR_LIST, SEEN, CALLBACK, %ARGS );

find_best_continents( HASH_REF );

=over 4

=item AUTHOR

=item LICENSE

=back

=head2 CPAN::Nox - Wrapper around CPAN.pm without using any XS module

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item LICENSE

=item  SEE ALSO

=back

=head2 CPAN::Plugin - Base class for CPAN shell extensions

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Alpha Status

=item How Plugins work?

=back

=item METHODS

=over 4

=item plugin_requires

=item distribution_object

=item distribution

=item distribution_info

=item build_dir

=item is_xs

=back

=item AUTHOR

=back

=head2 CPAN::Plugin::Specfile - Proof of concept implementation of a
trivial CPAN::Plugin

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item OPTIONS

=back

=item AUTHOR

=back

=head2 CPAN::Queue - internal queue support for CPAN.pm

=over 4

=item LICENSE

=back

=head2 CPAN::Tarzip - internal handling of tar archives for CPAN.pm

=over 4

=item LICENSE

=back

=head2 CPAN::Version - utility functions to compare CPAN versions

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item LICENSE

=back

=head2 Carp - alternative warn and die for modules

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Forcing a Stack Trace

=item Stack Trace formatting

=back

=item GLOBAL VARIABLES

=over 4

=item $Carp::MaxEvalLen

=item $Carp::MaxArgLen

=item $Carp::MaxArgNums

=item $Carp::Verbose

=item $Carp::RefArgFormatter

=item @CARP_NOT

=item %Carp::Internal

=item %Carp::CarpInternal

=item $Carp::CarpLevel

=back

=item BUGS

=item SEE ALSO

=item CONTRIBUTING

=item AUTHOR

=item COPYRIGHT

=item LICENSE

=back

=head2 Class::Struct - declare struct-like datatypes as Perl classes

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item The C<struct()> function

=item Class Creation at Compile Time

=item Element Types and Accessor Methods

Scalar (C<'$'> or C<'*$'>), Array (C<'@'> or C<'*@'>), Hash (C<'%'> or
C<'*%'>), Class (C<'Class_Name'> or C<'*Class_Name'>)

=item Initializing with C<new>

=back

=item EXAMPLES

Example 1, Example 2, Example 3

=item Author and Modification History

=back

=head2 Compress::Raw::Bzip2 - Low-Level Interface to bzip2 compression
library

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item Compression

=over 4

=item ($z, $status) = new Compress::Raw::Bzip2 $appendOutput,
$blockSize100k, $workfactor;

B<$appendOutput>, B<$blockSize100k>, B<$workfactor>

=item $status = $bz->bzdeflate($input, $output);

=item $status = $bz->bzflush($output);

=item $status = $bz->bzclose($output);

=item Example

=back

=item Uncompression

=over 4

=item ($z, $status) = new Compress::Raw::Bunzip2 $appendOutput,
$consumeInput, $small, $verbosity, $limitOutput;

B<$appendOutput>, B<$consumeInput>, B<$small>, B<$limitOutput>,
B<$verbosity>

=item $status = $z->bzinflate($input, $output);

=back

=item Misc

=over 4

=item my $version = Compress::Raw::Bzip2::bzlibversion();

=back

=item Constants

=item SUPPORT

=item SEE ALSO

=item AUTHOR

=item MODIFICATION HISTORY

=item COPYRIGHT AND LICENSE

=back

=head2 Compress::Raw::Zlib - Low-Level Interface to zlib or zlib-ng
compression library

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item Compress::Raw::Zlib::Deflate

=over 4

=item B<($d, $status) = new Compress::Raw::Zlib::Deflate( [OPT] ) >

B<-Level>, B<-Method>, B<-WindowBits>, B<-MemLevel>, B<-Strategy>,
B<-Dictionary>, B<-Bufsize>, B<-AppendOutput>, B<-CRC32>, B<-ADLER32>

=item B<$status = $d-E<gt>deflate($input, $output)>

=item B<$status = $d-E<gt>flush($output [, $flush_type]) >

=item B<$status = $d-E<gt>deflateReset() >

=item B<$status = $d-E<gt>deflateParams([OPT])>

B<-Level>, B<-Strategy>, B<-BufSize>

=item B<$status = $d-E<gt>deflateTune($good_length, $max_lazy,
$nice_length, $max_chain)>

=item B<$d-E<gt>dict_adler()>

=item B<$d-E<gt>crc32()>

=item B<$d-E<gt>adler32()>

=item B<$d-E<gt>msg()>

=item B<$d-E<gt>total_in()>

=item B<$d-E<gt>total_out()>

=item B<$d-E<gt>get_Strategy()>

=item B<$d-E<gt>get_Level()>

=item B<$d-E<gt>get_BufSize()>

=item Example

=back

=item Compress::Raw::Zlib::Inflate

=over 4

=item B< ($i, $status) = new Compress::Raw::Zlib::Inflate( [OPT] ) >

B<-WindowBits>, B<-Bufsize>, B<-Dictionary>, B<-AppendOutput>, B<-CRC32>,
B<-ADLER32>, B<-ConsumeInput>, B<-LimitOutput>

=item B< $status = $i-E<gt>inflate($input, $output [,$eof]) >

=item B<$status = $i-E<gt>inflateSync($input)>

=item B<$status = $i-E<gt>inflateReset() >

=item B<$i-E<gt>dict_adler()>

=item B<$i-E<gt>crc32()>

=item B<$i-E<gt>adler32()>

=item B<$i-E<gt>msg()>

=item B<$i-E<gt>total_in()>

=item B<$i-E<gt>total_out()>

=item B<$d-E<gt>get_BufSize()>

=item Examples

=back

=item CHECKSUM FUNCTIONS

=item Misc

=over 4

=item my $version = Compress::Raw::Zlib::zlib_version();

=item my $version = Compress::Raw::Zlib::zlibng_version();

=item  my $flags = Compress::Raw::Zlib::zlibCompileFlags();

=item is_zlib_native();
=head2 is_zlibng_native();
=head2 is_zlibng_compat();
=head2 is_zlibng();

=back

=item The LimitOutput option.

=item ACCESSING ZIP FILES

=item FAQ

=over 4

=item Compatibility with Unix compress/uncompress.

=item Accessing .tar.Z files

=item Zlib Library Version Support

=back

=item CONSTANTS

=item SUPPORT

=item SEE ALSO

=item AUTHOR

=item MODIFICATION HISTORY

=item COPYRIGHT AND LICENSE

=back

=head2 Compress::Zlib - Interface to zlib compression library

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Notes for users of Compress::Zlib version 1

=back

=item GZIP INTERFACE

B<$gz = gzopen($filename, $mode)>, B<$gz = gzopen($filehandle, $mode)>,
B<$bytesread = $gz-E<gt>gzread($buffer [, $size]) ;>, B<$bytesread =
$gz-E<gt>gzreadline($line) ;>, B<$byteswritten = $gz-E<gt>gzwrite($buffer)
;>, B<$status = $gz-E<gt>gzflush($flush_type) ;>, B<$offset =
$gz-E<gt>gztell() ;>, B<$status = $gz-E<gt>gzseek($offset, $whence) ;>,
B<$gz-E<gt>gzclose>, B<$gz-E<gt>gzsetparams($level, $strategy>, B<$level>,
B<$strategy>, B<$gz-E<gt>gzerror>, B<$gzerrno>

=over 4

=item Examples

=item Compress::Zlib::memGzip

=item Compress::Zlib::memGunzip

=back

=item COMPRESS/UNCOMPRESS

B<$dest = compress($source [, $level] ) ;>, B<$dest = uncompress($source)
;>

=item Deflate Interface

=over 4

=item B<($d, $status) = deflateInit( [OPT] )>

B<-Level>, B<-Method>, B<-WindowBits>, B<-MemLevel>, B<-Strategy>,
B<-Dictionary>, B<-Bufsize>

=item B<($out, $status) = $d-E<gt>deflate($buffer)>

=item B<($out, $status) = $d-E<gt>flush()>
=head2 B<($out, $status) = $d-E<gt>flush($flush_type)>

=item B<$status = $d-E<gt>deflateParams([OPT])>

B<-Level>, B<-Strategy>

=item B<$d-E<gt>dict_adler()>

=item B<$d-E<gt>msg()>

