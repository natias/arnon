=item C<SAVEI16>

Described in L<perlguts>.

=over 3

   SAVEI16(I16 i)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVEI32>

Described in L<perlguts>.

=over 3

   SAVEI32(I32 i)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVELONG>

Described in L<perlguts>.

=over 3

   SAVELONG(long i)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVEMORTALIZESV>

Described in L<perlguts>.

=over 3

   SAVEMORTALIZESV(SV* sv)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVEPPTR>

Described in L<perlguts>.

=over 3

   SAVEPPTR(char * p)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVERCPV>

Described in L<perlguts>.

=over 3

   SAVERCPV(char *pv)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<save_scalar>

Described in L<perlguts>.

=over 3

 SV *  save_scalar(GV *gv)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVESPTR>

Described in L<perlguts>.

=over 3

   SAVESPTR(SV * s)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVESTACK_POS>

Described in L<perlguts>.

=over 3

   SAVESTACK_POS()

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVESTRLEN>

Described in L<perlguts>.

=over 3

   SAVESTRLEN(STRLEN i)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<save_svref>

Described in L<perlguts>.

=over 3

 SV *  save_svref(SV **sptr)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVETMPS>
X<SAVETMPS>

Opening bracket for temporaries on a callback.  See C<L</FREETMPS>> and
L<perlcall>.

=over 3

   SAVETMPS;

=back

=back

=for hackers
Found in file scope.h

=head1 Casting

=over 4

=item C<Atof>
X<Atof>

This is a synonym for L</C<my_atof>>.

=over 3

 NV  Atof(NN const char * const s)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<cBOOL>
X<cBOOL>

Cast-to-bool.  When Perl was able to be compiled on pre-C99 compilers, a
C<(bool)> cast didn't necessarily do the right thing, so this macro was
created (and made somewhat complicated to work around bugs in old
compilers).  Now, many years later, and C99 is used, this is no longer
required, but is kept for backwards compatibility.

=over 3

 bool  cBOOL(bool expr)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<INT2PTR>

Described in L<perlguts>.

=over 3

 type  INT2PTR(type, int value)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<I_V>
X<I_V>

Cast an NV to IV while avoiding undefined C behavior

=over 3

 IV  I_V(NV what)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<I_32>
X<I_32>

Cast an NV to I32 while avoiding undefined C behavior

=over 3

 I32  I_32(NV what)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<PTR2IV>

Described in L<perlguts>.

=over 3

 IV  PTR2IV(void * ptr)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PTR2nat>

Described in L<perlguts>.

=over 3

 IV  PTR2nat(void *)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PTR2NV>

Described in L<perlguts>.

=over 3

 NV  PTR2NV(void * ptr)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PTR2ul>

Described in L<perlguts>.

=over 3

 unsigned long  PTR2ul(void *)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PTR2UV>

Described in L<perlguts>.

=over 3

 UV  PTR2UV(void * ptr)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PTRV>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<U_V>
X<U_V>

Cast an NV to UV while avoiding undefined C behavior

=over 3

 UV  U_V(NV what)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<U_32>
X<U_32>

Cast an NV to U32 while avoiding undefined C behavior

=over 3

 U32  U_32(NV what)

=back

=back

=for hackers
Found in file perl.h

=head1 Character case changing


Perl uses "full" Unicode case mappings.  This means that converting a single
character to another case may result in a sequence of more than one character.
For example, the uppercase of C<E<223>> (LATIN SMALL LETTER SHARP S) is the two
character sequence C<SS>.  This presents some complications   The lowercase of
all characters in the range 0..255 is a single character, and thus
C<L</toLOWER_L1>> is furnished.  But, C<toUPPER_L1> can't exist, as it couldn't
return a valid result for all legal inputs.  Instead C<L</toUPPER_uvchr>> has
an API that does allow every possible legal result to be returned.)  Likewise
no other function that is crippled by not being able to give the correct
results for the full range of possible inputs has been implemented here.


=over 4

=item C<toFOLD>

=item C<toFOLD_A>

=item C<toFOLD_utf8>

=item C<toFOLD_utf8_safe>

=item C<toFOLD_uvchr>
X<toFOLD>X<toFOLD_A>X<toFOLD_utf8>X<toFOLD_utf8_safe>X<toFOLD_uvchr>

These all return the foldcase of a character.  "foldcase" is an internal case
for C</i> pattern matching. If the foldcase of character A and the foldcase of
character B are the same, they match caselessly; otherwise they don't.

The differences in the forms are what domain they operate on, and whether the
input is specified as a code point (those forms with a C<cp> parameter) or as a
UTF-8 string (the others).  In the latter case, the code point to use is the
first one in the buffer of UTF-8 encoded code points, delineated by the
arguments S<C<p .. e - 1>>.

C<toFOLD> and C<toFOLD_A> are synonyms of each other.  They return the
foldcase of any ASCII-range code point.  In this range, the foldcase is
identical to the lowercase.  All other inputs are returned unchanged.  Since
these are macros, the input type may be any integral one, and the output will
occupy the same number of bits as the input.

There is no C<toFOLD_L1> nor C<toFOLD_LATIN1> as the foldcase of some code
points in the 0..255 range is above that range or consists of multiple
characters.  Instead use C<toFOLD_uvchr>.

C<toFOLD_uvchr> returns the foldcase of any Unicode code point.  The return
value is identical to that of C<toFOLD_A> for input code points in the ASCII
range.  The foldcase of the vast majority of Unicode code points is the same
as the code point itself.  For these, and for code points above the legal
Unicode maximum, this returns the input code point unchanged.  It additionally
stores the UTF-8 of the result into the buffer beginning at C<s>, and its
length in bytes into C<*lenp>.  The caller must have made C<s> large enough to
contain at least C<UTF8_MAXBYTES_CASE+1> bytes to avoid possible overflow.

NOTE: the foldcase of a code point may be more than one code point.  The
return value of this function is only the first of these.  The entire foldcase
is returned in C<s>.  To determine if the result is more than a single code
point, you can do something like this:

 uc = toFOLD_uvchr(cp, s, &len);
 if (len > UTF8SKIP(s)) { is multiple code points }
 else { is a single code point }

C<toFOLD_utf8> and C<toFOLD_utf8_safe> are synonyms of each other.  The only
difference between these and C<toFOLD_uvchr> is that the source for these is
encoded in UTF-8, instead of being a code point.  It is passed as a buffer
starting at C<p>, with C<e> pointing to one byte beyond its end.  The C<p>
buffer may certainly contain more than one code point; but only the first one
(up through S<C<e - 1>>) is examined.  If the UTF-8 for the input character is
malformed in some way, the program may croak, or the function may return the
REPLACEMENT CHARACTER, at the discretion of the implementation, and subject to
change in future releases.

=over 3

 UV  toFOLD          (UV cp)
 UV  toFOLD_A        (UV cp)
 UV  toFOLD_utf8     (U8* p, U8* e, U8* s, STRLEN* lenp)
 UV  toFOLD_utf8_safe(U8* p, U8* e, U8* s, STRLEN* lenp)
 UV  toFOLD_uvchr    (UV cp, U8* s, STRLEN* lenp)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<toLOWER>

=item C<toLOWER_A>

=item C<toLOWER_LATIN1>

=item C<toLOWER_LC>

=item C<toLOWER_L1>

=item C<toLOWER_utf8>

=item C<toLOWER_utf8_safe>

=item C<toLOWER_uvchr>
X<toLOWER>X<toLOWER_A>X<toLOWER_LATIN1>X<toLOWER_LC>X<toLOWER_L1>X<toLOWER_utf8>X<toLOWER_utf8_safe>X<toLOWER_uvchr>

These all return the lowercase of a character.  The differences are what domain
they operate on, and whether the input is specified as a code point (those
forms with a C<cp> parameter) or as a UTF-8 string (the others).  In the latter
case, the code point to use is the first one in the buffer of UTF-8 encoded
code points, delineated by the arguments S<C<p .. e - 1>>.

C<toLOWER> and C<toLOWER_A> are synonyms of each other.  They return the
lowercase of any uppercase ASCII-range code point.  All other inputs are
returned unchanged.  Since these are macros, the input type may be any integral
one, and the output will occupy the same number of bits as the input.

C<toLOWER_L1> and C<toLOWER_LATIN1> are synonyms of each other.  They behave
identically as C<toLOWER> for ASCII-range input.  But additionally will return
the lowercase of any uppercase code point in the entire 0..255 range, assuming
a Latin-1 encoding (or the EBCDIC equivalent on such platforms).

C<toLOWER_LC> returns the lowercase of the input code point according to the
rules of the current POSIX locale.  Input code points outside the range 0..255
are returned unchanged.

C<toLOWER_uvchr> returns the lowercase of any Unicode code point.  The return
value is identical to that of C<toLOWER_L1> for input code points in the 0..255
range.  The lowercase of the vast majority of Unicode code points is the same
as the code point itself.  For these, and for code points above the legal
Unicode maximum, this returns the input code point unchanged.  It additionally
stores the UTF-8 of the result into the buffer beginning at C<s>, and its
length in bytes into C<*lenp>.  The caller must have made C<s> large enough to
contain at least C<UTF8_MAXBYTES_CASE+1> bytes to avoid possible overflow.

NOTE: the lowercase of a code point may be more than one code point.  The
return value of this function is only the first of these.  The entire lowercase
is returned in C<s>.  To determine if the result is more than a single code
point, you can do something like this:

 uc = toLOWER_uvchr(cp, s, &len);
 if (len > UTF8SKIP(s)) { is multiple code points }
 else { is a single code point }

C<toLOWER_utf8> and C<toLOWER_utf8_safe> are synonyms of each other.  The only
difference between these and C<toLOWER_uvchr> is that the source for these is
encoded in UTF-8, instead of being a code point.  It is passed as a buffer
starting at C<p>, with C<e> pointing to one byte beyond its end.  The C<p>
buffer may certainly contain more than one code point; but only the first one
(up through S<C<e - 1>>) is examined.  If the UTF-8 for the input character is
malformed in some way, the program may croak, or the function may return the
REPLACEMENT CHARACTER, at the discretion of the implementation, and subject to
change in future releases.

=over 3

 UV  toLOWER          (UV cp)
 UV  toLOWER_A        (UV cp)
 UV  toLOWER_LATIN1   (UV cp)
 UV  toLOWER_LC       (UV cp)
 UV  toLOWER_L1       (UV cp)
 UV  toLOWER_utf8     (U8* p, U8* e, U8* s, STRLEN* lenp)
 UV  toLOWER_utf8_safe(U8* p, U8* e, U8* s, STRLEN* lenp)
 UV  toLOWER_uvchr    (UV cp, U8* s, STRLEN* lenp)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<toTITLE>

=item C<toTITLE_A>

=item C<toTITLE_utf8>

=item C<toTITLE_utf8_safe>

=item C<toTITLE_uvchr>
X<toTITLE>X<toTITLE_A>X<toTITLE_utf8>X<toTITLE_utf8_safe>X<toTITLE_uvchr>

These all return the titlecase of a character.  The differences are what domain
they operate on, and whether the input is specified as a code point (those
forms with a C<cp> parameter) or as a UTF-8 string (the others).  In the latter
case, the code point to use is the first one in the buffer of UTF-8 encoded
code points, delineated by the arguments S<C<p .. e - 1>>.

C<toTITLE> and C<toTITLE_A> are synonyms of each other.  They return the
titlecase of any lowercase ASCII-range code point.  In this range, the
titlecase is identical to the uppercase.  All other inputs are returned
unchanged.  Since these are macros, the input type may be any integral one, and
the output will occupy the same number of bits as the input.

There is no C<toTITLE_L1> nor C<toTITLE_LATIN1> as the titlecase of some code
points in the 0..255 range is above that range or consists of multiple
characters.  Instead use C<toTITLE_uvchr>.

C<toTITLE_uvchr> returns the titlecase of any Unicode code point.  The return
value is identical to that of C<toTITLE_A> for input code points in the ASCII
range.  The titlecase of the vast majority of Unicode code points is the same
as the code point itself.  For these, and for code points above the legal
Unicode maximum, this returns the input code point unchanged.  It additionally
stores the UTF-8 of the result into the buffer beginning at C<s>, and its
length in bytes into C<*lenp>.  The caller must have made C<s> large enough to
contain at least C<UTF8_MAXBYTES_CASE+1> bytes to avoid possible overflow.

NOTE: the titlecase of a code point may be more than one code point.  The
return value of this function is only the first of these.  The entire titlecase
is returned in C<s>.  To determine if the result is more than a single code
point, you can do something like this:

 uc = toTITLE_uvchr(cp, s, &len);
 if (len > UTF8SKIP(s)) { is multiple code points }
 else { is a single code point }

C<toTITLE_utf8> and C<toTITLE_utf8_safe> are synonyms of each other.  The only
difference between these and C<toTITLE_uvchr> is that the source for these is
encoded in UTF-8, instead of being a code point.  It is passed as a buffer
starting at C<p>, with C<e> pointing to one byte beyond its end.  The C<p>
buffer may certainly contain more than one code point; but only the first one
(up through S<C<e - 1>>) is examined.  If the UTF-8 for the input character is
malformed in some way, the program may croak, or the function may return the
REPLACEMENT CHARACTER, at the discretion of the implementation, and subject to
change in future releases.

=over 3

 UV  toTITLE          (UV cp)
 UV  toTITLE_A        (UV cp)
 UV  toTITLE_utf8     (U8* p, U8* e, U8* s, STRLEN* lenp)
 UV  toTITLE_utf8_safe(U8* p, U8* e, U8* s, STRLEN* lenp)
 UV  toTITLE_uvchr    (UV cp, U8* s, STRLEN* lenp)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<toUPPER>

=item C<toUPPER_A>

=item C<toUPPER_utf8>

=item C<toUPPER_utf8_safe>

=item C<toUPPER_uvchr>
X<toUPPER>X<toUPPER_A>X<toUPPER_utf8>X<toUPPER_utf8_safe>X<toUPPER_uvchr>

These all return the uppercase of a character.  The differences are what domain
they operate on, and whether the input is specified as a code point (those
forms with a C<cp> parameter) or as a UTF-8 string (the others).  In the latter
case, the code point to use is the first one in the buffer of UTF-8 encoded
code points, delineated by the arguments S<C<p .. e - 1>>.

C<toUPPER> and C<toUPPER_A> are synonyms of each other.  They return the
uppercase of any lowercase ASCII-range code point.  All other inputs are
returned unchanged.  Since these are macros, the input type may be any integral
one, and the output will occupy the same number of bits as the input.

There is no C<toUPPER_L1> nor C<toUPPER_LATIN1> as the uppercase of some code
points in the 0..255 range is above that range or consists of multiple
characters.  Instead use C<toUPPER_uvchr>.

C<toUPPER_uvchr> returns the uppercase of any Unicode code point.  The return
value is identical to that of C<toUPPER_A> for input code points in the ASCII
range.  The uppercase of the vast majority of Unicode code points is the same
as the code point itself.  For these, and for code points above the legal
Unicode maximum, this returns the input code point unchanged.  It additionally
stores the UTF-8 of the result into the buffer beginning at C<s>, and its
length in bytes into C<*lenp>.  The caller must have made C<s> large enough to
contain at least C<UTF8_MAXBYTES_CASE+1> bytes to avoid possible overflow.

NOTE: the uppercase of a code point may be more than one code point.  The
return value of this function is only the first of these.  The entire uppercase
is returned in C<s>.  To determine if the result is more than a single code
point, you can do something like this:

 uc = toUPPER_uvchr(cp, s, &len);
 if (len > UTF8SKIP(s)) { is multiple code points }
 else { is a single code point }

C<toUPPER_utf8> and C<toUPPER_utf8_safe> are synonyms of each other.  The only
difference between these and C<toUPPER_uvchr> is that the source for these is
encoded in UTF-8, instead of being a code point.  It is passed as a buffer
starting at C<p>, with C<e> pointing to one byte beyond its end.  The C<p>
buffer may certainly contain more than one code point; but only the first one
(up through S<C<e - 1>>) is examined.  If the UTF-8 for the input character is
malformed in some way, the program may croak, or the function may return the
REPLACEMENT CHARACTER, at the discretion of the implementation, and subject to
change in future releases.

=over 3

 UV  toUPPER          (UV cp)
 UV  toUPPER_A        (UV cp)
 UV  toUPPER_utf8     (U8* p, U8* e, U8* s, STRLEN* lenp)
 UV  toUPPER_utf8_safe(U8* p, U8* e, U8* s, STRLEN* lenp)
 UV  toUPPER_uvchr    (UV cp, U8* s, STRLEN* lenp)

=back

=back

=for hackers
Found in file handy.h

=head1 Character classification


This section is about functions (really macros) that classify characters
into types, such as punctuation versus alphabetic, etc.  Most of these are
analogous to regular expression character classes.  (See
L<perlrecharclass/POSIX Character Classes>.)  There are several variants for
each class.  (Not all macros have all variants; each item below lists the
ones valid for it.)  None are affected by C<use bytes>, and only the ones
with C<LC> in the name are affected by the current locale.

The base function, e.g., C<isALPHA()>, takes any signed or unsigned value,
treating it as a code point, and returns a boolean as to whether or not the
character represented by it is (or on non-ASCII platforms, corresponds to) an
ASCII character in the named class based on platform, Unicode, and Perl rules.
If the input is a number that doesn't fit in an octet, FALSE is returned.

Variant C<isI<FOO>_A> (e.g., C<isALPHA_A()>) is identical to the base function
with no suffix C<"_A">.  This variant is used to emphasize by its name that
only ASCII-range characters can return TRUE.

Variant C<isI<FOO>_L1> imposes the Latin-1 (or EBCDIC equivalent) character set
onto the platform.  That is, the code points that are ASCII are unaffected,
since ASCII is a subset of Latin-1.  But the non-ASCII code points are treated
as if they are Latin-1 characters.  For example, C<isWORDCHAR_L1()> will return
true when called with the code point 0xDF, which is a word character in both
ASCII and EBCDIC (though it represents different characters in each).
If the input is a number that doesn't fit in an octet, FALSE is returned.
(Perl's documentation uses a colloquial definition of Latin-1, to include all
code points below 256.)

Variant C<isI<FOO>_uvchr> is exactly like the C<isI<FOO>_L1> variant, for
inputs below 256, but if the code point is larger than 255, Unicode rules are
used to determine if it is in the character class.  For example,
C<isWORDCHAR_uvchr(0x100)> returns TRUE, since 0x100 is LATIN CAPITAL LETTER A
WITH MACRON in Unicode, and is a word character.

Variants C<isI<FOO>_utf8> and C<isI<FOO>_utf8_safe> are like C<isI<FOO>_uvchr>,
but are used for UTF-8 encoded strings.  The two forms are different names for
the same thing.  Each call to one of these classifies the first character of
the string starting at C<p>.  The second parameter, C<e>, points to anywhere in
the string beyond the first character, up to one byte past the end of the
entire string.  Although both variants are identical, the suffix C<_safe> in
one name emphasizes that it will not attempt to read beyond S<C<e - 1>>,
provided that the constraint S<C<s E<lt> e>> is true (this is asserted for in
C<-DDEBUGGING> builds).  If the UTF-8 for the input character is malformed in
some way, the program may croak, or the function may return FALSE, at the
discretion of the implementation, and subject to change in future releases.

Variant C<isI<FOO>_LC> is like the C<isI<FOO>_A> and C<isI<FOO>_L1> variants,
but the result is based on the current locale, which is what C<LC> in the name
stands for.  If Perl can determine that the current locale is a UTF-8 locale,
it uses the published Unicode rules; otherwise, it uses the C library function
that gives the named classification.  For example, C<isDIGIT_LC()> when not in
a UTF-8 locale returns the result of calling C<isdigit()>.  FALSE is always
returned if the input won't fit into an octet.  On some platforms where the C
library function is known to be defective, Perl changes its result to follow
the POSIX standard's rules.

Variant C<isI<FOO>_LC_uvchr> acts exactly like C<isI<FOO>_LC> for inputs less
than 256, but for larger ones it returns the Unicode classification of the code
point.

Variants C<isI<FOO>_LC_utf8> and C<isI<FOO>_LC_utf8_safe> are like
C<isI<FOO>_LC_uvchr>, but are used for UTF-8 encoded strings.  The two forms
are different names for the same thing.  Each call to one of these classifies
the first character of the string starting at C<p>.  The second parameter,
C<e>, points to anywhere in the string beyond the first character, up to one
byte past the end of the entire string.  Although both variants are identical,
the suffix C<_safe> in one name emphasizes that it will not attempt to read
beyond S<C<e - 1>>, provided that the constraint S<C<s E<lt> e>> is true (this
is asserted for in C<-DDEBUGGING> builds).  If the UTF-8 for the input
character is malformed in some way, the program may croak, or the function may
return FALSE, at the discretion of the implementation, and subject to change in
future releases.


=over 4

=item C<isALNUM>

=item C<isALNUM_A>

=item C<isALNUM_LC>

=item C<isALNUM_LC_uvchr>
X<isALNUM>X<isALNUM_A>X<isALNUM_LC>X<isALNUM_LC_uvchr>

These are each a synonym for their respectively named L</C<isWORDCHAR>>
variant.

They are provided for backward compatibility, even though a word character
includes more than the standard C language meaning of alphanumeric.
To get the C language definition, use the corresponding L</C<isALPHANUMERIC>>
variant.

=over 3

 bool  isALNUM(UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isALNUMC>

=item C<isALNUMC_A>

=item C<isALNUMC_LC>

=item C<isALNUMC_LC_uvchr>

=item C<isALNUMC_L1>
X<isALNUMC>X<isALNUMC_A>X<isALNUMC_LC>X<isALNUMC_LC_uvchr>X<isALNUMC_L1>

These are discouraged, backward compatibility macros for L</C<isALPHANUMERIC>>.
That is, each returns a boolean indicating whether the specified character is
one of C<[A-Za-z0-9]>, analogous to C<m/[[:alnum:]]/>.

The C<C> suffix in the names was meant to indicate that they correspond to the
C language L<C<isalnum(3)>>.

=over 3

 bool  isALNUMC(UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isALPHA>

=item C<isALPHA_A>

=item C<isALPHA_LC>

=item C<isALPHA_LC_utf8_safe>

=item C<isALPHA_LC_uvchr>

=item C<isALPHA_L1>

=item C<isALPHA_utf8>

=item C<isALPHA_utf8_safe>

=item C<isALPHA_uvchr>
X<isALPHA>X<isALPHA_A>X<isALPHA_LC>X<isALPHA_LC_utf8_safe>X<isALPHA_LC_uvchr>X<isALPHA_L1>X<isALPHA_utf8>X<isALPHA_utf8_safe>X<isALPHA_uvchr>

Returns a boolean indicating whether the specified input is one of C<[A-Za-z]>,
analogous to C<m/[[:alpha:]]/>.
See the L<top of this section|/Character classification> for an explanation of
the variants.

=over 3

 bool  isALPHA             (UV ch)
 bool  isALPHA_A           (UV ch)
 bool  isALPHA_LC          (UV ch)
 bool  isALPHA_LC_utf8_safe(U8 * s, U8 *end)
 bool  isALPHA_LC_uvchr    (UV ch)
 bool  isALPHA_L1          (UV ch)
 bool  isALPHA_utf8        (U8 * s, U8 * end)
 bool  isALPHA_utf8_safe   (U8 * s, U8 * end)
 bool  isALPHA_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isALPHANUMERIC>

=item C<isALPHANUMERIC_A>

=item C<isALPHANUMERIC_LC>

=item C<isALPHANUMERIC_LC_utf8_safe>

=item C<isALPHANUMERIC_LC_uvchr>

=item C<isALPHANUMERIC_L1>

=item C<isALPHANUMERIC_utf8>

=item C<isALPHANUMERIC_utf8_safe>

=item C<isALPHANUMERIC_uvchr>
X<isALPHANUMERIC>X<isALPHANUMERIC_A>X<isALPHANUMERIC_LC>X<isALPHANUMERIC_LC_utf8_safe>X<isALPHANUMERIC_LC_uvchr>X<isALPHANUMERIC_L1>X<isALPHANUMERIC_utf8>X<isALPHANUMERIC_utf8_safe>X<isALPHANUMERIC_uvchr>

Returns a boolean indicating whether the specified character is one of
C<[A-Za-z0-9]>, analogous to C<m/[[:alnum:]]/>.
See the L<top of this section|/Character classification> for an explanation of
the variants.

=over 3

 bool  isALPHANUMERIC             (UV ch)
 bool  isALPHANUMERIC_A           (UV ch)
 bool  isALPHANUMERIC_LC          (UV ch)
 bool  isALPHANUMERIC_LC_utf8_safe(U8 * s, U8 *end)
 bool  isALPHANUMERIC_LC_uvchr    (UV ch)
 bool  isALPHANUMERIC_L1          (UV ch)
 bool  isALPHANUMERIC_utf8        (U8 * s, U8 * end)
 bool  isALPHANUMERIC_utf8_safe   (U8 * s, U8 * end)
 bool  isALPHANUMERIC_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isASCII>

=item C<isASCII_A>

=item C<isASCII_LC>

=item C<isASCII_LC_utf8_safe>

=item C<isASCII_LC_uvchr>

=item C<isASCII_L1>

=item C<isASCII_utf8>

=item C<isASCII_utf8_safe>

=item C<isASCII_uvchr>
X<isASCII>X<isASCII_A>X<isASCII_LC>X<isASCII_LC_utf8_safe>X<isASCII_LC_uvchr>X<isASCII_L1>X<isASCII_utf8>X<isASCII_utf8_safe>X<isASCII_uvchr>

Returns a boolean indicating whether the specified character is one of the 128
