          </instance-parameter>
          <parameter name="position_data"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="742">A place to store the SVG fragment's position.</doc>
            <type name="PositionData" c:type="RsvgPositionData*"/>
          </parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="743">An element's id within the SVG, starting with "#" (a single
hash character), for example, `#layer1`.  This notation corresponds to a
URL's fragment ID.  Alternatively, pass %NULL to use the whole SVG.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="rsvg_handle_get_title"
              glib:get-property="title"
              version="2.4"
              deprecated="1"
              deprecated-version="2.36.">
        <doc-deprecated xml:space="preserve">Librsvg does not read the metadata/desc/title elements;
this function always returns `NULL`.</doc-deprecated>
        <source-position filename="rsvg.h" line="1416"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1408">This function always returns `NULL`.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1406">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_sub" c:identifier="rsvg_handle_has_sub" version="2.22">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="770">Checks whether the element @id exists in the SVG document.

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.</doc>
        <source-position filename="rsvg.h" line="788"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="783">`TRUE` if @id exists in the SVG document, `FALSE` otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="772">a [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="773">An element's id within the SVG, starting with "#" (a single hash
character), for example, `#layer1`.  This notation corresponds to a URL's
fragment ID.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_set_testing"
              c:identifier="rsvg_handle_internal_set_testing">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1190">Do not call this function.  This is intended for librsvg's internal
test suite only.</doc>
        <source-position filename="rsvg.h" line="1199"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1192">a [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="testing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1193">Whether to enable testing mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_stream_sync"
              c:identifier="rsvg_handle_read_stream_sync"
              version="2.32"
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1038">Reads @stream and writes the data from it to @handle.

Before calling this function, you may need to call [method@Rsvg.Handle.set_base_uri]
or [method@Rsvg.Handle.set_base_gfile] to set the "base file" for resolving
references to external resources.  SVG elements like
`&lt;image&gt;` which reference external resources will be
resolved relative to the location you specify with those functions.

If @cancellable is not `NULL`, then the operation can be cancelled by
triggering the cancellable object from another thread. If the
operation was cancelled, the error `G_IO_ERROR_CANCELLED` will be
returned.</doc>
        <source-position filename="rsvg.h" line="1064"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1058">`TRUE` if reading @stream succeeded, or `FALSE` otherwise
  with @error filled in</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1040">a [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1041">a `GInputStream`</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1042">a `GCancellable`, or `NULL`</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render_cairo"
              c:identifier="rsvg_handle_render_cairo"
              version="2.14"
              deprecated="1"
              deprecated-version="2.52.">
        <doc xml:space="preserve"
             filename="rsvg-cairo.h"
             line="36">Draws a loaded SVG handle to a Cairo context.  Please try to use
[method@Rsvg.Handle.render_document] instead, which allows you to pick the size
at which the document will be rendered.

Historically this function has picked a size by itself, based on the following rules:

* If the SVG document has both `width` and `height`
  attributes with physical units (px, in, cm, mm, pt, pc) or font-based units (em,
  ex), the function computes the size directly based on the dots-per-inch (DPI) you
  have configured with [method@Rsvg.Handle.set_dpi].  This is the same approach as
  [method@Rsvg.Handle.get_intrinsic_size_in_pixels].

* Otherwise, if there is a `viewBox` attribute and both
  `width` and `height` are set to
  `100%` (or if they don't exist at all and thus default to 100%),
  the function uses the width and height of the `viewBox` as a pixel size.  This
  produces a rendered document with the correct aspect ratio.

* Otherwise, this function computes the extents of every graphical object in the SVG
  document to find the total extents.  This is moderately expensive, but no more expensive
  than rendering the whole document, for example.

* This function cannot deal with percentage-based units for `width`
  and `height` because there is no viewport against which they could
  be resolved; that is why it will compute the extents of objects in that case.  This
  is why we recommend that you use [method@Rsvg.Handle.render_document] instead, which takes
  in a viewport and follows the sizing policy from the web platform.

Drawing will occur with respect to the @cr's current transformation: for example, if
the @cr has a rotated current transformation matrix, the whole SVG will be rotated in
the rendered version.

This function depends on the [class@Rsvg.Handle]'s DPI to compute dimensions in
pixels, so you should call [method@Rsvg.Handle.set_dpi] beforehand.

Note that @cr must be a Cairo context that is not in an error state, that is,
`cairo_status()` must return `CAIRO_STATUS_SUCCESS` for it.  Cairo can set a
context to be in an error state in various situations, for example, if it was
passed an invalid matrix or if it was created for an invalid surface.</doc>
        <doc-deprecated xml:space="preserve">Please use [method@Rsvg.Handle.render_document] instead; that function lets
you pass a viewport and obtain a good error message.</doc-deprecated>
        <source-position filename="rsvg-cairo.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg-cairo.h"
               line="81">`TRUE` if drawing succeeded; `FALSE` otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="38">A [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="39">A Cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render_cairo_sub"
              c:identifier="rsvg_handle_render_cairo_sub"
              version="2.14"
              deprecated="1"
              deprecated-version="2.52.">
        <doc xml:space="preserve"
             filename="rsvg-cairo.h"
             line="90">Renders a single SVG element in the same place as for a whole SVG document (a "subset"
of the document).  Please try to use [method@Rsvg.Handle.render_layer] instead, which allows
you to pick the size at which the document with the layer will be rendered.

This is equivalent to [method@Rsvg.Handle.render_cairo], but it renders only a single
element and its children, as if they composed an individual layer in the SVG.

Historically this function has picked a size for the whole document by itself, based
on the following rules:

* If the SVG document has both `width` and `height`
  attributes with physical units (px, in, cm, mm, pt, pc) or font-based units (em,
  ex), the function computes the size directly based on the dots-per-inch (DPI) you
  have configured with [method@Rsvg.Handle.set_dpi].  This is the same approach as
  [method@Rsvg.Handle.get_intrinsic_size_in_pixels].

* Otherwise, if there is a `viewBox` attribute and both
  `width` and `height` are set to
  `100%` (or if they don't exist at all and thus default to 100%),
  the function uses the width and height of the `viewBox` as a pixel size.  This
  produces a rendered document with the correct aspect ratio.

* Otherwise, this function computes the extents of every graphical object in the SVG
  document to find the total extents.  This is moderately expensive, but no more expensive
  than rendering the whole document, for example.

* This function cannot deal with percentage-based units for `width`
  and `height` because there is no viewport against which they could
  be resolved; that is why it will compute the extents of objects in that case.  This
  is why we recommend that you use [method@Rsvg.Handle.render_layer] instead, which takes
  in a viewport and follows the sizing policy from the web platform.

Drawing will occur with respect to the @cr's current transformation: for example, if
the @cr has a rotated current transformation matrix, the whole SVG will be rotated in
the rendered version.

This function depends on the [class@Rsvg.Handle]'s DPI to compute dimensions in
pixels, so you should call [method@Rsvg.Handle.set_dpi] beforehand.

Note that @cr must be a Cairo context that is not in an error state, that is,
`cairo_status()` must return `CAIRO_STATUS_SUCCESS` for it.  Cairo can set a
context to be in an error state in various situations, for example, if it was
passed an invalid matrix or if it was created for an invalid surface.

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.</doc>
        <doc-deprecated xml:space="preserve">Please use [method@Rsvg.Handle.render_layer] instead; that function lets
you pass a viewport and obtain a good error message.</doc-deprecated>
        <source-position filename="rsvg-cairo.h" line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg-cairo.h"
               line="146">`TRUE` if drawing succeeded; `FALSE` otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="92">A [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="93">A Cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="94">An element's id within the SVG, starting with "#" (a single
hash character), for example, `#layer1`.  This notation corresponds to a
URL's fragment ID.  Alternatively, pass `NULL` to render the whole SVG.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render_document"
              c:identifier="rsvg_handle_render_document"
              version="2.46"
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg-cairo.h"
             line="155">Renders the whole SVG document fitted to a viewport.

The @viewport gives the position and size at which the whole SVG document will be
rendered.  The document is scaled proportionally to fit into this viewport.

The @cr must be in a `CAIRO_STATUS_SUCCESS` state, or this function will not
render anything, and instead will return an error.</doc>
        <source-position filename="rsvg-cairo.h" line="181"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg-cairo.h"
               line="170">`TRUE` on success, `FALSE` on error.  Errors are returned
in the @error argument.

API ordering: This function must be called on a fully-loaded @handle.  See
the section "[API ordering](class.Handle.html#api-ordering)" for details.

Panics: this function will panic if the @handle is not fully-loaded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="157">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="158">A Cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="viewport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="159">Viewport size at which the whole SVG would be fitted.</doc>
            <type name="Rectangle" c:type="const RsvgRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render_element"
              c:identifier="rsvg_handle_render_element"
              version="2.46"
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg-cairo.h"
             line="344">Renders a single SVG element to a given viewport.

This function can be used to extract individual element subtrees and render them,
scaled to a given @element_viewport.  This is useful for applications which have
reusable objects in an SVG and want to render them individually; for example, an
SVG full of icons that are meant to be be rendered independently of each other.

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.

You can pass `NULL` for the @id if you want to render all
the elements in the SVG, i.e. to render everything from the
root element.

The `element_viewport` gives the position and size at which the named element will
be rendered.  FIXME: mention proportional scaling.</doc>
        <source-position filename="rsvg-cairo.h" line="383"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg-cairo.h"
               line="372">`TRUE` on success, `FALSE` on error.  Errors are returned
in the @error argument.

API ordering: This function must be called on a fully-loaded @handle.  See
the section "[API ordering](class.Handle.html#api-ordering)" for details.

Panics: this function will panic if the @handle is not fully-loaded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="346">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="347">A Cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="348">An element's id within the SVG, starting with "#" (a single
hash character), for example, `#layer1`.  This notation corresponds to a
URL's fragment ID.  Alternatively, pass `NULL` to render the whole SVG document tree.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="element_viewport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="351">Viewport size in which to fit the element</doc>
            <type name="Rectangle" c:type="const RsvgRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render_layer"
              c:identifier="rsvg_handle_render_layer"
              version="2.46"
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg-cairo.h"
             line="239">Renders a single SVG element in the same place as for a whole SVG document.

The @viewport gives the position and size at which the whole SVG document would be
rendered.  The document is scaled proportionally to fit into this viewport; hence the
individual layer may be smaller than this.

This is equivalent to [method@Rsvg.Handle.render_document], but it renders only a
single element and its children, as if they composed an individual layer in
the SVG.  The element is rendered with the same transformation matrix as it
has within the whole SVG document.  Applications can use this to re-render a
single element and repaint it on top of a previously-rendered document, for
example.

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.

You can pass `NULL` for the @id if you want to render all
the elements in the SVG, i.e. to render everything from the
root element.</doc>
        <source-position filename="rsvg-cairo.h" line="281"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg-cairo.h"
               line="270">`TRUE` on success, `FALSE` on error.  Errors are returned
in the @error argument.

API ordering: This function must be called on a fully-loaded @handle.  See
the section "[API ordering](class.Handle.html#api-ordering)" for details.

Panics: this function will panic if the @handle is not fully-loaded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="241">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="242">A Cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="243">An element's id within the SVG, starting with "#" (a single
hash character), for example, `#layer1`.  This notation corresponds to a
URL's fragment ID.  Alternatively, pass `NULL` to render the whole SVG document tree.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="viewport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="246">Viewport size at which the whole SVG would be fitted.</doc>
            <type name="Rectangle" c:type="const RsvgRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_base_gfile"
              c:identifier="rsvg_handle_set_base_gfile"
              version="2.32">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1022">Set the base URI for @handle from @file.

Note: This function may only be called before [method@Rsvg.Handle.write] or
[method@Rsvg.Handle.read_stream_sync] have been called.</doc>
        <source-position filename="rsvg.h" line="1035"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1024">a [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="base_file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1025">a `GFile`</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_base_uri"
              c:identifier="rsvg_handle_set_base_uri"
              glib:set-property="base-uri"
              version="2.9">
        <attribute name="org.gtk.Method.set_property" value="base-uri"/>
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="675">Set the base URI for this SVG.

Note: This function may only be called before [method@Rsvg.Handle.write] or
[method@Rsvg.Handle.read_stream_sync] have been called.</doc>
        <source-position filename="rsvg.h" line="688"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="677">A [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="base_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="678">The base uri</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dpi" c:identifier="rsvg_handle_set_dpi" version="2.8">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="488">Sets the DPI at which the @handle will be rendered. Common values are
75, 90, and 300 DPI.

Passing a number &lt;= 0 to @dpi will reset the DPI to whatever the default
value happens to be, but since [id@rsvg_set_default_dpi] is deprecated, please
do not pass values &lt;= 0 to this function.</doc>
        <source-position filename="rsvg.h" line="503"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="490">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="dpi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="491">Dots Per Inch (i.e. as Pixels Per Inch)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dpi_x_y"
              c:identifier="rsvg_handle_set_dpi_x_y"
              version="2.8">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="505">Sets the DPI at which the @handle will be rendered. Common values are
75, 90, and 300 DPI.

Passing a number &lt;= 0 to @dpi will reset the DPI to whatever the default
value happens to be, but since [id@rsvg_set_default_dpi_x_y] is deprecated,
please do not pass values &lt;= 0 to this function.</doc>
        <source-position filename="rsvg.h" line="521"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="507">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="dpi_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="508">Dots Per Inch (i.e. Pixels Per Inch)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="dpi_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="509">Dots Per Inch (i.e. Pixels Per Inch)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size_callback"
              c:identifier="rsvg_handle_set_size_callback"
              deprecated="1"
              deprecated-version="2.14.">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1252">Sets the sizing function for the @handle, which can be used to override the
size that librsvg computes for SVG images.  The @size_func is called from the
following functions:

* [method@Rsvg.Handle.get_dimensions]
* [method@Rsvg.Handle.get_dimensions_sub]
* [method@Rsvg.Handle.get_position_sub]
* [method@Rsvg.Handle.render_cairo]
* [method@Rsvg.Handle.render_cairo_sub]

Librsvg computes the size of the SVG being rendered, and passes it to the
@size_func, which may then modify these values to set the final size of the
generated image.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Rsvg.Handle.render_document] instead.
This function was deprecated because when the @size_func is used, it makes it
unclear when the librsvg functions which call the @size_func will use the
size computed originally, or the callback-specified size, or whether it
refers to the whole SVG or to just a sub-element of it.  It is easier, and
unambiguous, to use code similar to the example above.</doc-deprecated>
        <source-position filename="rsvg.h" line="1282"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1254">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="size_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1255">A sizing function, or `NULL`</doc>
            <type name="SizeFunc" c:type="RsvgSizeFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1256">User data to pass to @size_func, or `NULL`</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1257">Function to be called to destroy the data passed in @user_data,
  or `NULL`.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stylesheet"
              c:identifier="rsvg_handle_set_stylesheet"
              version="2.48"
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1160">Sets a CSS stylesheet to use for an SVG document.

The @css_len argument is mandatory; this function will not compute the length
of the @css string.  This is because a provided stylesheet, which the calling
program could read from a file, can have nul characters in it.

During the CSS cascade, the specified stylesheet will be used with a "User"
[origin](https://drafts.csswg.org/css-cascade-3/#cascading-origins).

Note that `@import` rules will not be resolved, except for `data:` URLs.</doc>
        <source-position filename="rsvg.h" line="1184"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1178">`TRUE` on success, `FALSE` on error.  Errors are returned
in the @error argument.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1162">A [class@Rsvg.Handle].</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="css" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1163">String with CSS data; must be valid UTF-8.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="css_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1164">Length of the @css data in bytes.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="write"
              c:identifier="rsvg_handle_write"
              deprecated="1"
              deprecated-version="2.46."
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="552">Loads the next @count bytes of the image.  You can call this function multiple
times until the whole document is consumed; then you must call [method@Rsvg.Handle.close]
to actually parse the document.

Before calling this function for the first time, you may need to call
[method@Rsvg.Handle.set_base_uri] or [method@Rsvg.Handle.set_base_gfile] to set the "base
file" for resolving references to external resources.  SVG elements like
`&lt;image&gt;` which reference external resources will be
resolved relative to the location you specify with those functions.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Rsvg.Handle.read_stream_sync] or the constructor
functions [ctor@Rsvg.Handle.new_from_gfile_sync] or
[ctor@Rsvg.Handle.new_from_stream_sync].  This function is deprecated because it
will accumulate data from the @buf in memory until [method@Rsvg.Handle.close] gets
called.  To avoid a big temporary buffer, use the suggested functions, which
take a `GFile` or a `GInputStream` and do not require a temporary buffer.</doc-deprecated>
        <source-position filename="rsvg.h" line="579"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="569">`TRUE` on success, or `FALSE` on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="554">an [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="555">pointer to svg data</doc>
            <array length="1" zero-terminated="0" c:type="const guchar*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="556">length of the @buf buffer in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <property name="base-uri"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_base_uri"
                getter="get_base_uri">
        <attribute name="org.gtk.Property.get"
                   value="rsvg_handle_get_base_uri"/>
        <attribute name="org.gtk.Property.set"
                   value="rsvg_handle_set_base_uri"/>
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="266">Base URI, to be used to resolve relative references for resources.  See the section
"Security and locations of referenced files" for details.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="desc"
                deprecated="1"
                deprecated-version="2.36."
                transfer-ownership="none"
                getter="get_desc">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="333">SVG's description.</doc>
        <doc-deprecated xml:space="preserve">Reading this property always returns `NULL`.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="dpi-x"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="254">Horizontal resolution in dots per inch.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="dpi-y"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="260">Horizontal resolution in dots per inch.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="em"
                deprecated="1"
                deprecated-version="2.46."
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="301">Exact width, in pixels, of the rendered SVG before calling the size callback
as specified by [method@Rsvg.Handle.set_size_callback].</doc>
        <doc-deprecated xml:space="preserve">Reading each of the size properties causes the size of the
SVG to be recomputed, so reading both the `em` and
`ex` properties will cause two such computations.  Please
use [method@Rsvg.Handle.get_intrinsic_dimensions] instead.</doc-deprecated>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ex"
                deprecated="1"
                deprecated-version="2.46."
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="313">Exact height, in pixels, of the rendered SVG before calling the size callback
as specified by [method@Rsvg.Handle.set_size_callback].</doc>
        <doc-deprecated xml:space="preserve">Reading each of the size properties causes the size of the
SVG to be recomputed, so reading both the `em` and
`ex` properties will cause two such computations.  Please
use [method@Rsvg.Handle.get_intrinsic_dimensions] instead.</doc-deprecated>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="flags"
                version="2.36"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="246">Flags from [flags@Rsvg.HandleFlags].</doc>
        <type name="HandleFlags"/>
      </property>
      <property name="height"
                deprecated="1"
                deprecated-version="2.46."
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="287">Height, in pixels, of the rendered SVG after calling the size callback
as specified by [method@Rsvg.Handle.set_size_callback].</doc>
        <doc-deprecated xml:space="preserve">For historical reasons, this property is of integer type,
which cannot give the exact size of SVG images that are not pixel-aligned.
Moreover, reading each of the size properties causes the size of the SVG to
be recomputed, so reading both the `width` and
`height` properties will cause two such computations.
Please use [method@Rsvg.Handle.get_intrinsic_dimensions] instead.</doc-deprecated>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="metadata"
                deprecated="1"
                deprecated-version="2.36."
                transfer-ownership="none"
                getter="get_metadata">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="341">SVG's metadata</doc>
        <doc-deprecated xml:space="preserve">Reading this property always returns `NULL`.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                deprecated="1"
                deprecated-version="2.36."
                transfer-ownership="none"
                getter="get_title">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="325">SVG's title.</doc>
        <doc-deprecated xml:space="preserve">Reading this property always returns `NULL`.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="width"
                deprecated="1"
                deprecated-version="2.46."
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="273">Width, in pixels, of the rendered SVG after calling the size callback
as specified by [method@Rsvg.Handle.set_size_callback].</doc>
        <doc-deprecated xml:space="preserve">For historical reasons, this property is of integer type,
which cannot give the exact size of SVG images that are not pixel-aligned.
Moreover, reading each of the size properties causes the size of the SVG to
be recomputed, so reading both the `width` and
`height` properties will cause two such computations.
Please use [method@Rsvg.Handle.get_intrinsic_dimensions] instead.</doc-deprecated>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="_abi_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="HandleClass"
            c:type="RsvgHandleClass"
            glib:is-gtype-struct-for="Handle">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="367">Class structure for [class@Rsvg.Handle].</doc>
      <source-position filename="rsvg.h" line="378"/>
      <field name="parent">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="369">parent class</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_abi_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="15">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="HandleFlags"
              version="2.40.3"
              glib:type-name="RsvgHandleFlags"
              glib:get-type="rsvg_handle_flags_get_type"
              c:type="RsvgHandleFlags">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="975">Configuration flags for an [class@Rsvg.Handle].  Note that not all of [class@Rsvg.Handle]'s
constructors let you specify flags.  For this reason, [ctor@Rsvg.Handle.new_from_gfile_sync]
and [ctor@Rsvg.Handle.new_from_stream_sync] are the preferred ways to create a handle.</doc>
      <member name="flags_none"
              value="0"
              c:identifier="RSVG_HANDLE_FLAGS_NONE"
              glib:nick="flags-none"
              glib:name="RSVG_HANDLE_FLAGS_NONE">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="977">No flags are set.</doc>
      </member>
      <member name="flag_unlimited"
              value="1"
              c:identifier="RSVG_HANDLE_FLAG_UNLIMITED"
              glib:nick="flag-unlimited"
              glib:name="RSVG_HANDLE_FLAG_UNLIMITED">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="978">Disable safety limits in the XML parser.  Libxml2 has
[several limits](https://gitlab.gnome.org/GNOME/libxml2/blob/master/include/libxml/parserInternals.h)
designed to keep malicious XML content from consuming too much memory while parsing.
For security reasons, this should only be used for trusted input!  Since: 2.40.3</doc>
      </member>
      <member name="flag_keep_image_data"
              value="2"
              c:identifier="RSVG_HANDLE_FLAG_KEEP_IMAGE_DATA"
              glib:nick="flag-keep-image-data"
              glib:name="RSVG_HANDLE_FLAG_KEEP_IMAGE_DATA">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="982">Use this if the Cairo surface to which you are
rendering is a PDF, PostScript, SVG, or Win32 Printing surface.  This will make librsvg
and Cairo use the original, compressed data for images in the final output, instead of
passing uncompressed images.  For example, this will make the a resulting PDF file
smaller and faster.  Please see [the Cairo
documentation](https://www.cairographics.org/manual/cairo-cairo-surface-t.html#cairo-surface-set-mime-data)
for details.</doc>
      </member>
    </bitfield>
