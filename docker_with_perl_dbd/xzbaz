	0xF24,
	0x1043,
	0x1044,
	0x1093,
	0x1094,
	0x136B,
	0x136C,
	0x17E3,
	0x17E4,
	0x17F3,
	0x17F4,
	0x1813,
	0x1814,
	0x1949,
	0x194A,
	0x19D3,
	0x19D4,
	0x1A83,
	0x1A84,
	0x1A93,
	0x1A94,
	0x1B53,
	0x1B54,
	0x1BB3,
	0x1BB4,
	0x1C43,
	0x1C44,
	0x1C53,
	0x1C54,
	0x2083,
	0x2084,
	0x2162,
	0x2163,
	0x2172,
	0x2173,
	0x2462,
	0x2463,
	0x2476,
	0x2477,
	0x248A,
	0x248B,
	0x24F7,
	0x24F8,
	0x2778,
	0x2779,
	0x2782,
	0x2783,
	0x278C,
	0x278D,
	0x3023,
	0x3024,
	0x3194,
	0x3195,
	0x3222,
	0x3223,
	0x3282,
	0x3283,
	0x4E09,
	0x4E0A,
	0x4EE8,
	0x4EE9,
	0x53C1,
	0x53C5,
	0x5F0E,
	0x5F0F,
	0xA623,
	0xA624,
	0xA6E8,
	0xA6E9,
	0xA8D3,
	0xA8D4,
	0xA903,
	0xA904,
	0xA9D3,
	0xA9D4,
	0xA9F3,
	0xA9F4,
	0xAA53,
	0xAA54,
	0xABF3,
	0xABF4,
	0xF96B,
	0xF96C,
	0xFF13,
	0xFF14,
	0x10109,
	0x1010A,
	0x102E3,
	0x102E4,
	0x104A3,
	0x104A4,
	0x1085A,
	0x1085B,
	0x1087B,
	0x1087C,
	0x108A9,
	0x108AA,
	0x1091B,
	0x1091C,
	0x109C2,
	0x109C3,
	0x10A42,
	0x10A43,
	0x10B5A,
	0x10B5B,
	0x10B7A,
	0x10B7B,
	0x10BAB,
	0x10BAC,
	0x10D33,
	0x10D34,
	0x10E62,
	0x10E63,
	0x10F1F,
	0x10F20,
	0x10FC7,
	0x10FC8,
	0x11054,
	0x11055,
	0x11069,
	0x1106A,
	0x110F3,
	0x110F4,
	0x11139,
	0x1113A,
	0x111D3,
	0x111D4,
	0x111E3,
	0x111E4,
	0x112F3,
	0x112F4,
	0x11453,
	0x11454,
	0x114D3,
	0x114D4,
	0x11653,
	0x11654,
	0x116C3,
	0x116C4,
	0x11733,
	0x11734,
	0x118E3,
	0x118E4,
	0x11953,
	0x11954,
	0x11C53,
	0x11C54,
	0x11C5C,
	0x11C5D,
	0x11D53,
	0x11D54,
	0x11DA3,
	0x11DA4,
	0x12401,
	0x12402,
	0x12408,
	0x12409,
	0x12417,
	0x12418,
	0x12420,
	0x12421,
	0x12424,
	0x12426,
	0x1242E,
	0x12430,
	0x12436,
	0x12438,
	0x1243A,
	0x1243C,
	0x1244B,
	0x1244C,
	0x12451,
	0x12452,
	0x12457,
	0x12458,
	0x16A63,
	0x16A64,
	0x16AC3,
	0x16AC4,
	0x16B53,
	0x16B54,
	0x16E83,
	0x16E84,
	0x16E96,
	0x16E97,
	0x1D2E3,
	0x1D2E4,
	0x1D362,
	0x1D363,
	0x1D374,
	0x1D375,
	0x1D7D1,
	0x1D7D2,
	0x1D7DB,
	0x1D7DC,
	0x1D7E5,
	0x1D7E6,
	0x1D7EF,
	0x1D7F0,
	0x1D7F9,
	0x1D7FA,
	0x1E143,
	0x1E144,
	0x1E2F3,
	0x1E2F4,
	0x1E8C9,
	0x1E8CA,
	0x1E953,
	0x1E954,
	0x1EC73,
	0x1EC74,
	0x1ECA5,
	0x1ECA6,
	0x1ED03,
	0x1ED04,
	0x1ED30,
	0x1ED31,
	0x1F104,
	0x1F105,
	0x1FBF3,
	0x1FBF4,
	0x20AFD,
	0x20AFE,
	0x20B19,
	0x20B1A,
	0x22998,
	0x22999,
	0x23B1B,
	0x23B1C
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_NV__3_invlist[] = {  /* for EBCDIC 1047 */
	269,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF3,
	0xF4,
	0xFA,
	0xFB,
	0x663,
	0x664,
	0x6F3,
	0x6F4,
	0x7C3,
	0x7C4,
	0x969,
	0x96A,
	0x9E9,
	0x9EA,
	0xA69,
	0xA6A,
	0xAE9,
	0xAEA,
	0xB69,
	0xB6A,
	0xBE9,
	0xBEA,
	0xC69,
	0xC6A,
	0xC7B,
	0xC7C,
	0xC7E,
	0xC7F,
	0xCE9,
	0xCEA,
	0xD69,
	0xD6A,
	0xDE9,
	0xDEA,
	0xE53,
	0xE54,
	0xED3,
	0xED4,
	0xF23,
	0xF24,
	0x1043,
	0x1044,
	0x1093,
	0x1094,
	0x136B,
	0x136C,
	0x17E3,
	0x17E4,
	0x17F3,
	0x17F4,
	0x1813,
	0x1814,
	0x1949,
	0x194A,
	0x19D3,
	0x19D4,
	0x1A83,
	0x1A84,
	0x1A93,
	0x1A94,
	0x1B53,
	0x1B54,
	0x1BB3,
	0x1BB4,
	0x1C43,
	0x1C44,
	0x1C53,
	0x1C54,
	0x2083,
	0x2084,
	0x2162,
	0x2163,
	0x2172,
	0x2173,
	0x2462,
	0x2463,
	0x2476,
	0x2477,
	0x248A,
	0x248B,
	0x24F7,
	0x24F8,
	0x2778,
	0x2779,
	0x2782,
	0x2783,
	0x278C,
	0x278D,
	0x3023,
	0x3024,
	0x3194,
	0x3195,
	0x3222,
	0x3223,
	0x3282,
	0x3283,
	0x4E09,
	0x4E0A,
	0x4EE8,
	0x4EE9,
	0x53C1,
	0x53C5,
	0x5F0E,
	0x5F0F,
	0xA623,
	0xA624,
	0xA6E8,
	0xA6E9,
	0xA8D3,
	0xA8D4,
	0xA903,
	0xA904,
	0xA9D3,
	0xA9D4,
	0xA9F3,
	0xA9F4,
	0xAA53,
	0xAA54,
	0xABF3,
	0xABF4,
	0xF96B,
	0xF96C,
	0xFF13,
	0xFF14,
	0x10109,
	0x1010A,
	0x102E3,
	0x102E4,
	0x104A3,
	0x104A4,
	0x1085A,
	0x1085B,
	0x1087B,
	0x1087C,
	0x108A9,
	0x108AA,
	0x1091B,
	0x1091C,
	0x109C2,
	0x109C3,
	0x10A42,
	0x10A43,
	0x10B5A,
	0x10B5B,
	0x10B7A,
	0x10B7B,
	0x10BAB,
	0x10BAC,
	0x10D33,
	0x10D34,
	0x10E62,
	0x10E63,
	0x10F1F,
	0x10F20,
	0x10FC7,
	0x10FC8,
	0x11054,
	0x11055,
	0x11069,
	0x1106A,
	0x110F3,
	0x110F4,
	0x11139,
	0x1113A,
	0x111D3,
	0x111D4,
	0x111E3,
	0x111E4,
	0x112F3,
	0x112F4,
	0x11453,
	0x11454,
	0x114D3,
	0x114D4,
	0x11653,
	0x11654,
	0x116C3,
	0x116C4,
	0x11733,
	0x11734,
	0x118E3,
	0x118E4,
	0x11953,
	0x11954,
	0x11C53,
	0x11C54,
	0x11C5C,
	0x11C5D,
	0x11D53,
	0x11D54,
	0x11DA3,
	0x11DA4,
	0x12401,
	0x12402,
	0x12408,
	0x12409,
	0x12417,
	0x12418,
	0x12420,
	0x12421,
	0x12424,
	0x12426,
	0x1242E,
	0x12430,
	0x12436,
	0x12438,
	0x1243A,
	0x1243C,
	0x1244B,
	0x1244C,
	0x12451,
	0x12452,
	0x12457,
	0x12458,
	0x16A63,
	0x16A64,
	0x16AC3,
	0x16AC4,
	0x16B53,
	0x16B54,
	0x16E83,
	0x16E84,
	0x16E96,
	0x16E97,
	0x1D2E3,
	0x1D2E4,
	0x1D362,
	0x1D363,
	0x1D374,
	0x1D375,
	0x1D7D1,
	0x1D7D2,
	0x1D7DB,
	0x1D7DC,
	0x1D7E5,
	0x1D7E6,
	0x1D7EF,
	0x1D7F0,
	0x1D7F9,
	0x1D7FA,
	0x1E143,
	0x1E144,
	0x1E2F3,
	0x1E2F4,
	0x1E8C9,
	0x1E8CA,
	0x1E953,
	0x1E954,
	0x1EC73,
	0x1EC74,
	0x1ECA5,
	0x1ECA6,
	0x1ED03,
	0x1ED04,
	0x1ED30,
	0x1ED31,
	0x1F104,
	0x1F105,
	0x1FBF3,
	0x1FBF4,
	0x20AFD,
	0x20AFE,
	0x20B19,
	0x20B1A,
	0x22998,
	0x22999,
	0x23B1B,
	0x23B1C
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_NV__3_invlist[] = {  /* for EBCDIC 037 */
	269,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF3,
	0xF4,
	0xFA,
	0xFB,
	0x663,
	0x664,
	0x6F3,
	0x6F4,
	0x7C3,
	0x7C4,
	0x969,
	0x96A,
	0x9E9,
	0x9EA,
	0xA69,
	0xA6A,
	0xAE9,
	0xAEA,
	0xB69,
	0xB6A,
	0xBE9,
	0xBEA,
	0xC69,
	0xC6A,
	0xC7B,
	0xC7C,
	0xC7E,
	0xC7F,
	0xCE9,
	0xCEA,
	0xD69,
	0xD6A,
	0xDE9,
	0xDEA,
	0xE53,
	0xE54,
	0xED3,
	0xED4,
	0xF23,
	0xF24,
	0x1043,
	0x1044,
	0x1093,
	0x1094,
	0x136B,
	0x136C,
	0x17E3,
	0x17E4,
	0x17F3,
	0x17F4,
	0x1813,
	0x1814,
	0x1949,
	0x194A,
	0x19D3,
	0x19D4,
	0x1A83,
	0x1A84,
	0x1A93,
	0x1A94,
	0x1B53,
	0x1B54,
	0x1BB3,
	0x1BB4,
	0x1C43,
	0x1C44,
	0x1C53,
	0x1C54,
	0x2083,
	0x2084,
	0x2162,
	0x2163,
	0x2172,
	0x2173,
	0x2462,
	0x2463,
	0x2476,
	0x2477,
	0x248A,
	0x248B,
	0x24F7,
	0x24F8,
	0x2778,
	0x2779,
	0x2782,
	0x2783,
	0x278C,
	0x278D,
	0x3023,
	0x3024,
	0x3194,
	0x3195,
	0x3222,
	0x3223,
	0x3282,
	0x3283,
	0x4E09,
	0x4E0A,
	0x4EE8,
	0x4EE9,
	0x53C1,
	0x53C5,
	0x5F0E,
	0x5F0F,
	0xA623,
	0xA624,
	0xA6E8,
	0xA6E9,
	0xA8D3,
	0xA8D4,
	0xA903,
	0xA904,
	0xA9D3,
	0xA9D4,
	0xA9F3,
	0xA9F4,
	0xAA53,
	0xAA54,
	0xABF3,
	0xABF4,
	0xF96B,
	0xF96C,
	0xFF13,
	0xFF14,
	0x10109,
	0x1010A,
	0x102E3,
	0x102E4,
	0x104A3,
	0x104A4,
	0x1085A,
	0x1085B,
	0x1087B,
	0x1087C,
	0x108A9,
	0x108AA,
	0x1091B,
	0x1091C,
	0x109C2,
	0x109C3,
	0x10A42,
	0x10A43,
	0x10B5A,
	0x10B5B,
	0x10B7A,
	0x10B7B,
	0x10BAB,
	0x10BAC,
	0x10D33,
	0x10D34,
	0x10E62,
	0x10E63,
	0x10F1F,
	0x10F20,
	0x10FC7,
	0x10FC8,
	0x11054,
	0x11055,
	0x11069,
	0x1106A,
	0x110F3,
	0x110F4,
	0x11139,
	0x1113A,
	0x111D3,
	0x111D4,
	0x111E3,
	0x111E4,
	0x112F3,
	0x112F4,
	0x11453,
	0x11454,
	0x114D3,
	0x114D4,
	0x11653,
	0x11654,
	0x116C3,
	0x116C4,
	0x11733,
	0x11734,
	0x118E3,
	0x118E4,
	0x11953,
	0x11954,
	0x11C53,
	0x11C54,
	0x11C5C,
	0x11C5D,
	0x11D53,
	0x11D54,
	0x11DA3,
	0x11DA4,
	0x12401,
	0x12402,
	0x12408,
	0x12409,
	0x12417,
	0x12418,
	0x12420,
	0x12421,
	0x12424,
	0x12426,
	0x1242E,
	0x12430,
	0x12436,
	0x12438,
	0x1243A,
	0x1243C,
	0x1244B,
	0x1244C,
	0x12451,
	0x12452,
	0x12457,
	0x12458,
	0x16A63,
	0x16A64,
	0x16AC3,
	0x16AC4,
	0x16B53,
	0x16B54,
	0x16E83,
	0x16E84,
	0x16E96,
	0x16E97,
	0x1D2E3,
	0x1D2E4,
	0x1D362,
	0x1D363,
	0x1D374,
	0x1D375,
	0x1D7D1,
	0x1D7D2,
	0x1D7DB,
	0x1D7DC,
	0x1D7E5,
	0x1D7E6,
	0x1D7EF,
	0x1D7F0,
	0x1D7F9,
	0x1D7FA,
	0x1E143,
	0x1E144,
	0x1E2F3,
	0x1E2F4,
	0x1E8C9,
	0x1E8CA,
	0x1E953,
	0x1E954,
	0x1EC73,
	0x1EC74,
	0x1ECA5,
	0x1ECA6,
	0x1ED03,
	0x1ED04,
	0x1ED30,
	0x1ED31,
	0x1F104,
	0x1F105,
	0x1FBF3,
	0x1FBF4,
	0x20AFD,
	0x20AFE,
	0x20B19,
	0x20B1A,
	0x22998,
	0x22999,
	0x23B1B,
	0x23B1C
};

#  endif	/* EBCDIC 037 */

static const UV UNI_NV__3_SLASH_16_invlist[] = {  /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9F6,
	0x9F7,
	0xB77,
	0xB78,
	0xD78,
	0xD79,
	0xA835,
	0xA836,
	0x11FCE,
	0x11FCF
};

static const UV UNI_NV__3_SLASH_2_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF2B,
	0xF2C
};

static const UV UNI_NV__3_SLASH_20_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD5D,
	0xD5E,
	0x11FCD,
	0x11FCE
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_NV__3_SLASH_4_invlist[] = {  /* for ASCII/Latin1 */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xBE,
	0xBF,
	0x9F8,
	0x9F9,
	0xB74,
	0xB75,
	0xD75,
	0xD76,
	0xA832,
	0xA833,
	0x10178,
	0x10179,
	0x109FE,
	0x109FF,
	0x11FD3,
	0x11FD4,
	0x1ECAF,
	0x1ECB0
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_NV__3_SLASH_4_invlist[] = {  /* for EBCDIC 1047 */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB9,
	0xBA,
	0x9F8,
	0x9F9,
	0xB74,
	0xB75,
	0xD75,
	0xD76,
	0xA832,
	0xA833,
	0x10178,
	0x10179,
	0x109FE,
	0x109FF,
	0x11FD3,
	0x11FD4,
	0x1ECAF,
	0x1ECB0
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_NV__3_SLASH_4_invlist[] = {  /* for EBCDIC 037 */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB9,
	0xBA,
	0x9F8,
	0x9F9,
	0xB74,
	0xB75,
	0xD75,
	0xD76,
	0xA832,
	0xA833,
	0x10178,
	0x10179,
	0x109FE,
	0x109FF,
	0x11FD3,
	0x11FD4,
	0x1ECAF,
	0x1ECB0
};

#  endif	/* EBCDIC 037 */

static const UV UNI_NV__3_SLASH_5_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2157,
	0x2158
};

static const UV UNI_NV__3_SLASH_64_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11FC7,
	0x11FC8
};

static const UV UNI_NV__3_SLASH_8_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x215C,
	0x215D
};

static const UV UNI_NV__3_SLASH_80_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD5A,
	0xD5B,
	0x11FC6,
	0x11FC7
};

static const UV UNI_NV__30_invlist[] = {  /* for all charsets */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1374,
	0x1375,
	0x303A,
	0x303B,
	0x324A,
	0x324B,
	0x325A,
	0x325B,
	0x5345,
	0x5346,
	0x10112,
	0x10113,
	0x10165,
	0x10166,
	0x102EC,
	0x102ED,
	0x109CB,
