
=item *

Filenames in cops are now refcounted under threads.
Under threads we were copying the filenames into each opcode. This is because in
theory opcodes created in one thread can be destroyed in another.
The change adds a new struct/type C<RCPV>, which is a refcounted
string using shared memory. This is implemented in such a way that code
that previously used a char * can continue to do so, as the refcounting
data is located a specific offset before the char * pointer itself.

=item *

Added C<HvNAMEf> and C<HvNAMEf_QUOTEDPREFIX> special formats. They take an
C<HV *> as an argument and use C<HvNAME()> and related macros to determine the
string, its length, and whether it is utf8.

=item *

The underlying C<Perl_dowantarray> function implementing the
long-deprecated L<C<GIMME>|perlapi/GIMME> macro has been marked as
deprecated, so that use of the macro emits a compile-time warning.
C<GIMME> has been documented as deprecated in favour of
L<C<GIMME_V>|perlapi/GIMME_V> since Perl v5.6.0, but had not
previously issued a warning.

=item *

The API function L<perlapi/utf8_length> is now more efficient.

=item *

Added C<SAVERCPV()> and C<SAVEFREERCPV()> for better support for working
with C<RCPV> (reference counted string/pointer value) structures which
currently are used in opcodes to share filename and warning bit data in
a memory efficient manner.

=item *

Added C<MORTALSVFUNC_SV()> and C<MORTALDESTRUCTOR_SV()> macros, which
make it possible to create a destructor which is fired at the end of
the current statement. This uses the C<PERL_MAGIC_destruct> magic to
use "free" magic to trigger an action when a variable is freed. The
action can be specified as a C function or as a Perl code reference.

=item *

Added the C<%{^HOOK}> api and related C<PERL_MAGIC_hook> and
C<PERL_MAGIC_hookelem> for providing ways to hook selected perl functions
which for one reason or another are problematic to wrap with a customized
subroutine.

=item *

Added support for C<${^HOOK}{require__before}> which can be used to
rewrite the filename that C<require> will try to load, and also to block
C<require> from loading a specific module, even via fully qualified
filename. The hook can also be used to perform "pre-require" and
"post-require" actions.

=item *

Added support for C<${^HOOK}{require__after}> which can be used to
track what modules have been required after the fact.

=item *

Regular expression opcodes (regops) now use a standardized structure
layout that uses unions to expose data in different format. This means
it should be much easier to extend or modify regops to use more memory.
This has been used to make a number of regops track how many parens
they contain.

=back

=head1 Selected Bug Fixes

=over 4

=item *

Avoid recursion and stack overflow parsing 'pack' template

[L<GH #16319|https://github.com/Perl/perl5/issues/16319>]

=item *

An eval() as the last statement in a regex code block could trigger an
interpreter panic; e.g.

    /(?{ ...; eval {....}; })/

[L<GH #19680|https://github.com/Perl/perl5/issues/19680>]

=item *

Disabling the C<bareword_filehandles> feature no longer treats C<< print
Class->method >> as an error.  [L<GH #19704|https://github.com/Perl/perl5/issues/19704>]

=item *

When a Perl subroutine tail-calls an XS subroutine using C<goto &xs_sub>,
the XS subroutine can now correctly determine its calling context.
Previously it was always reported as scalar.

In addition, where the Perl subroutine is freed at the same time:

    sub foo { *foo = sub {}; goto &xs_sub }

this formerly could lead to crashes if the XS subroutine tried to use the
value of C<PL_op>, since this was being set to NULL. This is now fixed.

[L<GH #19936|https://github.com/Perl/perl5/issues/19936>]

=item *

setsockopt() now uses the mechanism added in 5.36 to better
distinguish between numeric and string values supplied as the
C<OPTVAL> parameter.  [L<GH #18761|https://github.com/Perl/perl5/issues/18761>]

=item *

4-argument C<select()> now rejects strings with code points above
255. Additionally, for code points 128-255, this operator will now always
give the corresponding octet to the OS, regardless of how Perl stores
such code points in memory. (Previously Perl leaked its internal string
storage to the OS.) [L<GH #19882|https://github.com/Perl/perl5/issues/19882>]

=item *

Fix panic issue from C<val {} inside /(?{...})/> [L<GH #19390|https://github.com/Perl/perl5/issues/19390>]

=item *

Fix multiple compiler warnings from F<regexp.c>, F<locale.c>
[L<GH #19915|https://github.com/Perl/perl5/issues/19915>]

=item *

Fix a bug with querying locales on platforms that don't have C<LC_NUMERIC>
[L<GH #19890|https://github.com/Perl/perl5/issues/19890>]

=item *

Prevent undefined behaviour in C<S_maybe_multideref()>.

=item *

Avoid signed integer overflow in C<use integer> ops.

=item *

Avoid adding an offset to a NULL pointer in C<hv_delete_common>.

=item *

PerlIO::get_layers will now accept IO references too

Previously it would only take glob references or names of globs. Now it will
also accept IO references.

=item *

Fixes to memory handling for C<PL_splitstr>:

=over

=item *

If a thread was created the allocated string would be freed twice.

=item *

If two C<-F> switches were supplied the memory allocated for the first
switch wouldn't be freed.

=back

=item *

Correctly handle C<OP_ANONCODE> ops generated by CPAN modules that
don't include the OPf_REF flag when propagating lvalue context.
[L<GH #20532|https://github.com/Perl/perl5/pull/20532>]

=item *

L<POSIX::strxfrm|POSIX/strxfrm> now uses the C<LC_CTYPE> locale category
to specify its collation, ignoring any differing C<LC_COLLATE>.  It
doesn't make sense for a string to be encoded in one locale (say,
ISO-8859-6, Arabic) and to collate it based on another (like ISO-8859-7,
Greek).  Perl assumes that the current C<LC_CTYPE> locale correctly
represents the encoding, and collates accordingly.

Also, embedded C<NUL> characters are now allowed in the input.

If locale collation is not enabled on the platform (C<LC_COLLATE>), the
input is returned unchanged.

=item *

Double FETCH during stringification of tied scalars returning an
overloaded object have been fixed. The FETCH method should only be
called once, but prior to this release was actually called twice.
[L<GH #20574|https://github.com/Perl/perl5/pull/20574>]

=item *

Writing to a magic variables associated with the selected output
handle, C<$^>, C<$~>, C<$=>, C<$-> and C<$%>, no longer crashes perl
if the IO object has been cleared from the selected output
handle. [L<GH #20733|https://github.com/Perl/perl5/issues/20733>]

=item *

Redefining a C<use constant> list constant with C<use constant> now
properly warns.  This changes the behaviour of C<use constant> but is
a core change, not a change to F<constant.pm>.  [L<GH #20742|https://github.com/Perl/perl5/issues/20742>]

=item *

Redefining a C<use constant> list constant with an empty prototype
constant sub would result in an assertion failure.  [L<GH #20742|https://github.com/Perl/perl5/issues/20742>]

=item *

Fixed a regression where the C<INC> method for objects in C<@INC>
would not be resolved by C<AUTOLOAD>, while it was in 5.36.  The
C<INCDIR> method for objects in C<@INC> cannot be resolved by
C<AUTOLOAD> as C<INC> would have been resolved first.  [L<GH #20665|https://github.com/Perl/perl5/issues/20665>]

=item *

C<$SIG{__DIE__}> will now be called from eval when the code dies during
compilation regardless of how it dies. This means that code expecting to
be able to upgrade C<$@> into an object will be called consistently. In
earlier versions of perl C<$SIG{__DIE__}> would not be called for
certain compilation errors, for instance undeclared variables. For other
errors it might be called if there were more than a certain number of
errors, but not if there were less. Now you can expect that it will be
called in every case.

=item *

Compilation of code with errors used to inconsistently stop depending on
the count and type of errors encountered. The intent was that after 10
errors compilation would halt, but bugs in this logic meant that certain
types of error would be counted, but would not trigger the threshold
check to stop compilation. Other errors would. With this release after
at most 10 errors compilation will terminate, regardless of what type of
error they were.

Note that you can change the maximum count by defining
C<PERL_STOP_PARSING_AFTER_N_ERRORS> to be something else during the
configuration process. For instance

    ./Configure ... -Accflags='-DPERL_STOP_PARSING_AFTER_N_ERRORS=100'

would allow up to 100 errors.

=item *

The API function L<perlapi/my_snprintf> now prints a non-dot decimal
point if the perl code it ultimately is called from is in the scope of
C<use locale> and the locale in effect calls for that.

=item *

A number of bugs related to capture groups in quantified groups in regular
expression have been fixed, especially in alternations. For example in
a pattern like:

	"foobazfoobar" =~ /((foo)baz|foo(bar))+/

the regex variable C<$2> will not be "foo" as it once was, it will be undef.

=item *

Bugs with regex backreference operators that are inside of a capture
group have been fixed. For instance:

    "xa=xaaa" =~ /^(xa|=?\1a){2}\z/

will now correctly not match. [L<GH #10073|https://github.com/Perl/perl5/issues/10073>]

=item *

C<SSGROW()> and C<SSCHECK()> have been reworked to ensure that the requested
space is actually allocated. C<SSCHECK()> is now an alias for C<SSGROW()>.

=back

=head1 Acknowledgements

Perl 5.38.0 represents approximately 12 months of development since Perl
5.36.0 and contains approximately 290,000 lines of changes across 1,500
files from 100 authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 190,000 lines of changes to 970 .pm, .t, .c and .h files.

Perl continues to flourish into its fourth decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.38.0:

Alex, Alexander Nikolov, Alex Davies, Andreas König, Andrew Fresh, Andrew
Ruthven, Andy Lester, Aristotle Pagaltzis, Arne Johannessen, A. Sinan Unur,
Bartosz Jarzyna, Bart Van Assche, Benjamin Smith, Bram, Branislav
Zahradník, Brian Greenfield, Bruce Gray, Chad Granum, Chris 'BinGOs'
Williams, chromatic, Clemens Wasser, Craig A. Berry, Dagfinn Ilmari
Mannsåker, Dan Book, danielnachun, Dan Jacobson, Dan Kogai, David Cantrell,
David Golden, David Mitchell, E. Choroba, Ed J, Ed Sabol, Elvin Aslanov,
Eric Herman, Felipe Gasper, Ferenc Erki, Firas Khalil Khana, Florian Weimer,
Graham Knop, Håkon Hægland, Harald Jörg, H.Merijn Brand, Hugo van der
Sanden, James E Keenan, James Raspass, jkahrman, Joe McMahon, Johan Vromans,
Jonathan Stowe, Jon Gentle, Karen Etheridge, Karl Williamson, Kenichi
Ishigaki, Kenneth Ölwing, Kurt Fitzner, Leon Timmermans, Li Linjie, Loren
Merritt, Lukas Mai, Marcel Telka, Mark Jason Dominus, Mark Shelor, Matthew
Horsfall, Matthew O. Persico, Mattia Barbon, Max Maischein, Mohammad S
Anwar, Nathan Mills, Neil Bowers, Nicholas Clark, Nicolas Mendoza, Nicolas
R, Paul Evans, Paul Marquess, Peter John Acklam, Peter Levine, Philippe
Bruhat (BooK), Reini Urban, Renee Baecker, Ricardo Signes, Richard Leach,
Russ Allbery, Scott Baker, Sevan Janiyan, Sidney Markowitz, Sisyphus, Steve
Hay, TAKAI Kousuke, Todd Rinaldo, Tomasz Konojacki, Tom Stellard, Tony Cook,
Tsuyoshi Watanabe, Unicode Consortium, vsfos, Yves Orton, Zakariyya Mughal,
Zefram, 小鸡.

The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not include
the names of the (very much appreciated) contributors who reported issues to
the Perl bug tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please
see the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://github.com/Perl/perl5/issues>.  There may also be information at
L<http://www.perl.org/>, the Perl Home Page.

If you believe you have an unreported bug, please open an issue at
L<https://github.com/Perl/perl5/issues>.  Be sure to trim your bug down to a
tiny but sufficient test case.

If the bug you are reporting has security implications which make it
inappropriate to send to a public issue tracker, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
                                                                                                                                                                                         usr/local/lib/perl5/5.40.0/pod/perl5381delta.pod                                                    0000644 0000000 0000000 00000007552 14714567415 017302  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =encoding utf8

=head1 NAME

perl5381delta - what is new for perl v5.38.1

=head1 DESCRIPTION

This document describes differences between the 5.38.0 release and the 5.38.1
release.

If you are upgrading from an earlier release such as 5.37.0, first read
L<perl5380delta>, which describes differences between 5.37.0 and 5.38.0.

=head1 Security

This release fixes the following security issues. 

=head2 CVE-2023-47038 - Write past buffer end via illegal user-defined Unicode property

This vulnerability was reported directly to the Perl security team by
Nathan Mills C<the.true.nathan.mills@gmail.com>.

A crafted regular expression when compiled by perl 5.30.0 through
5.38.0 can cause a one-byte attacker controlled buffer overflow in a
heap allocated buffer.

=head2 CVE-2023-47039 - Perl for Windows binary hijacking vulnerability

This vulnerability was reported to the Intel Product Security Incident
Response Team (PSIRT) by GitHub user ycdxsb
L<https://github.com/ycdxsb/WindowsPrivilegeEscalation>. PSIRT then
reported it to the Perl security team.

Perl for Windows relies on the system path environment variable to
find the shell (C<cmd.exe>). When running an executable which uses
Windows Perl interpreter, Perl attempts to find and execute C<cmd.exe>
within the operating system. However, due to path search order issues,
Perl initially looks for cmd.exe in the current working directory.

An attacker with limited privileges can exploit this behavior by
placing C<cmd.exe> in locations with weak permissions, such as
C<C:\ProgramData>. By doing so, when an administrator attempts to use
this executable from these compromised locations, arbitrary code can
be executed.

=head1 Acknowledgements

Perl 5.38.1 represents approximately 5 months of development since Perl
5.38.0 and contains approximately 6,100 lines of changes across 34 files
from 4 authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 1,300 lines of changes to 9 .pm, .t, .c and .h files.

Perl continues to flourish into its fourth decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.38.1:

Karl Williamson, Paul Evans, Steve Hay, Tony Cook.

The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not include
the names of the (very much appreciated) contributors who reported issues to
the Perl bug tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please
see the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://github.com/Perl/perl5/issues>.  There may also be information at
L<http://www.perl.org/>, the Perl Home Page.

If you believe you have an unreported bug, please open an issue at
L<https://github.com/Perl/perl5/issues>.  Be sure to trim your bug down to a
tiny but sufficient test case.

If the bug you are reporting has security implications which make it
inappropriate to send to a public issue tracker, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
                                                                                                                                                      usr/local/lib/perl5/5.40.0/pod/perl5382delta.pod                                                    0000644 0000000 0000000 00000007730 14714567415 017301  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =encoding utf8

=head1 NAME

perl5382delta - what is new for perl v5.38.2

=head1 DESCRIPTION

This document describes differences between the 5.38.0 release and the 5.38.2
release.  B<Please note:> This document ignores Perl 5.38.1, a broken release
which existed for a couple of days only.

If you are upgrading from an earlier release such as 5.37.0, first read
L<perl5380delta>, which describes differences between 5.37.0 and 5.38.0.

=head1 Security

This release fixes the following security issues. 

=head2 CVE-2023-47038 - Write past buffer end via illegal user-defined Unicode property

This vulnerability was reported directly to the Perl security team by
Nathan Mills C<the.true.nathan.mills@gmail.com>.

A crafted regular expression when compiled by perl 5.30.0 through
5.38.0 can cause a one-byte attacker controlled buffer overflow in a
heap allocated buffer.

=head2 CVE-2023-47039 - Perl for Windows binary hijacking vulnerability

This vulnerability was reported to the Intel Product Security Incident
Response Team (PSIRT) by GitHub user ycdxsb
L<https://github.com/ycdxsb/WindowsPrivilegeEscalation>. PSIRT then
reported it to the Perl security team.

Perl for Windows relies on the system path environment variable to
find the shell (C<cmd.exe>). When running an executable which uses
Windows Perl interpreter, Perl attempts to find and execute C<cmd.exe>
within the operating system. However, due to path search order issues,
Perl initially looks for cmd.exe in the current working directory.

An attacker with limited privileges can exploit this behavior by
placing C<cmd.exe> in locations with weak permissions, such as
C<C:\ProgramData>. By doing so, when an administrator attempts to use
this executable from these compromised locations, arbitrary code can
be executed.

=head1 Acknowledgements

Perl 5.38.2 represents approximately 5 months of development since Perl
5.38.0 and contains approximately 6,100 lines of changes across 34 files
from 4 authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 1,300 lines of changes to 9 .pm, .t, .c and .h files.

Perl continues to flourish into its fourth decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.38.2:

Karl Williamson, Paul Evans, Steve Hay, Tony Cook.

The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not include
the names of the (very much appreciated) contributors who reported issues to
the Perl bug tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please
see the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://github.com/Perl/perl5/issues>.  There may also be information at
L<http://www.perl.org/>, the Perl Home Page.

If you believe you have an unreported bug, please open an issue at
L<https://github.com/Perl/perl5/issues>.  Be sure to trim your bug down to a
tiny but sufficient test case.

If the bug you are reporting has security implications which make it
inappropriate to send to a public issue tracker, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
                                        usr/local/lib/perl5/5.40.0/pod/perl5400delta.pod                                                    0000644 0000000 0000000 00000143627 14714567415 017276  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =encoding utf8

=head1 NAME

perldelta - what is new for perl v5.40.0

=head1 DESCRIPTION

This document describes differences between the 5.38.0 release and the 5.40.0
release.

=head1 Core Enhancements

=head2 New C<__CLASS__> Keyword

When using the new C<class> feature, code inside a method, C<ADJUST> block or
field initializer expression is now permitted to use the new C<__CLASS__>
keyword.  This yields a class name, similar to C<__PACKAGE__>, but whereas that
gives the compile-time package that the code appears in, the C<__CLASS__>
keyword is aware of the actual run-time class that the object instance is a
member of.  This makes it useful for method dispatch on that class, especially
during constructors, where access to C<$self> is not permitted.

For more information, see L<perlfunc/__CLASS__>.

=head2 C<:reader> attribute for field variables

When using the C<class> feature, field variables can now take a C<:reader>
attribute.  This requests that an accessor method be automatically created
that simply returns the value of the field variable from the given instance.

    field $name :reader;

Is equivalent to

    field $name;
    method name () { return $name; }

An alternative name can also be provided:

    field $name :reader(get_name);

For more detail, see L<perlclass/:reader>.

=head2 Permit a space in C<-M> command-line option

When processing command-line options, perl now allows a space between the
C<-M> switch and the name of the module after it.

    $ perl -M Data::Dumper=Dumper -E 'say Dumper [1,2,3]'

This matches the existing behaviour of the C<-I> option.

=head2 Restrictions to C<use VERSION> declarations

In Perl 5.36, a deprecation warning was added when downgrading a
C<use VERSION> declaration from one above version 5.11, to below. This has
now been made a fatal error.

Additionally, it is now a fatal error to issue a subsequent C<use VERSION>
declaration when another is in scope, when either version is 5.39 or above.
This is to avoid complications surrounding imported lexical functions from
L<builtin>.  A deprecation warning has also been added for any other
subsequent C<use VERSION> declaration below version 5.39, to warn that it
will no longer be permitted in Perl version 5.44.

=head2 New C<builtin::inf> and C<builtin::nan> functions (experimental)

Two new functions, C<inf> and C<nan>, have been added to the C<builtin>
namespace.  These act like constants that yield the floating-point infinity
and Not-a-Number value respectively.

=head2 New C<^^> logical xor operator

Perl has always had three low-precedence logical operators C<and>, C<or> and
C<xor>, as well as three high-precedence bitwise versions C<&>, C<^> and C<|>.
Until this release, while the medium-precedence logical operators of C<&&> and
C<||> were also present, there was no exclusive-or equivalent.  This release
of Perl adds the final C<^^> operator, completing the set.

    $x ^^ $y and say "One of x or y is true, but not both";

=head2 C<try>/C<catch> feature is no longer experimental

Prior to this release, the C<try>/C<catch> feature for handling errors was
considered experimental. Introduced in Perl version 5.34.0, this is now
considered a stable language feature and its use no longer prints a warning.
It still must be enabled with L<the 'try' feature|feature/The 'try' feature>.

See L<perlsyn/Try Catch Exception Handling>.

=head2 C<for> iterating over multiple values at a time is no longer experimental

Prior to this release, iterating over multiple values at a time with C<for> was
considered experimental. Introduced in Perl version 5.36.0, this is now
considered a stable language feature and its use no longer prints a warning.
See L<perlsyn/Compound Statements>.

=head2 C<builtin> module is no longer experimental

Prior to this release, the L<builtin> module and all of its functions were
considered experimental. Introduced in Perl version 5.36.0, this module is now
considered stable its use no longer prints a warning. However, several of its
functions are still considered experimental.

=head2 The C<:5.40> feature bundle adds C<try>

The latest version feature bundle now contains the recently-stablized feature
C<try>. As this feature bundle is used by the C<-E> commandline switch, these
are immediately available in C<-E> scripts.

=head2 C<use v5.40;> imports builtin functions

In addition to importing a feature bundle, C<use v5.40;> (or later versions)
imports the corresponding L<builtin version bundle|builtin/Version Bundles>.

=head1 Security

=head2 CVE-2023-47038 - Write past buffer end via illegal user-defined Unicode property

This vulnerability was reported directly to the Perl security team by
Nathan Mills C<the.true.nathan.mills@gmail.com>.

A crafted regular expression when compiled by perl 5.30.0 through
5.38.0 can cause a one-byte attacker controlled buffer overflow in a
heap allocated buffer.

=head2 CVE-2023-47039 - Perl for Windows binary hijacking vulnerability

This vulnerability was reported to the Intel Product Security Incident
Response Team (PSIRT) by GitHub user ycdxsb
L<https://github.com/ycdxsb/WindowsPrivilegeEscalation>. PSIRT then
reported it to the Perl security team.

Perl for Windows relies on the system path environment variable to
find the shell (C<cmd.exe>). When running an executable which uses
Windows Perl interpreter, Perl attempts to find and execute C<cmd.exe>
within the operating system. However, due to path search order issues,
Perl initially looks for cmd.exe in the current working directory.

An attacker with limited privileges can exploit this behavior by
placing C<cmd.exe> in locations with weak permissions, such as
C<C:\ProgramData>. By doing so, when an administrator attempts to use
this executable from these compromised locations, arbitrary code can
be executed.

=head1 Incompatible Changes

=head2 reset EXPR now calls set-magic on scalars

Previously C<reset EXPR> did not call set magic when clearing scalar variables.
This meant that changes did not propagate to the underlying internal state
where needed, such as for C<$^W>, and did not result in an exception where the
underlying magic would normally throw an exception, such as for C<$1>.

This means code that had no effect before may now actually have an effect,
including possibly throwing an exception.

C<reset EXPR> already called set magic when modifying arrays and hashes.

This has no effect on plain C<reset> used to reset one-match searches as with
C<m?pattern?>.

[L<GH #20763|https://github.com/Perl/perl5/issues/20763>]

=head2 Calling the import method of an unknown package produces a warning

Historically, it has been possible to call the C<import> or C<unimport> method of
any class, including ones which have not been defined, with an argument and not
experience an error.  For instance, this code will not throw an error in Perl
5.38:

    Class::That::Does::Not::Exist->import("foo");

However, as of Perl 5.39.1 this is deprecated and will issue a warning. Note
that calling these methods with no arguments continues to silently succeed and
do nothing. For instance,

    Class::That::Does::Not::Exist->import();

will continue to not throw an error.  This is because every class
implicitly inherits from the class L<UNIVERSAL> which now defines an
C<import> method.  In older perls there was no such method defined,
and instead the method calls for C<import> and C<unimport> were special
cased to not throw errors if there was no such method defined.

This change has been added because it makes it easier to detect case typos in
C<use> statements when running on case-insensitive file systems.  For instance,
on Windows or other platforms with case-insensitive file systems on older perls
the following code

    use STRICT 'refs';

would silently do nothing as the module is actually called F<strict.pm>, not
F<STRICT.pm>, so it would be loaded but its import method would never be called.
It will also detect cases where a user passes an argument when using a package
that does not provide its own import, for instance most "pure" class
definitions do not define an import method.

=head2 C<return> no longer allows an indirect object

The C<return> operator syntax now rejects indirect objects.  In most
cases this would compile and even run, but wasn't documented and could
produce confusing results, for example:

    # note that sum hasn't been defined
    sub sum_positive {
        return sum grep $_ > 0, @_;
        # unexpectedly parsed as:
        #   return *sum, grep $_ > 0, @_;
        # ... with the bareword acting like an extra (typeglob) argument
    }
    say for sum_positive(-1, 2, 3)

produced:

    *main::sum
    2
    3

[L<GH #21716|https://github.com/Perl/perl5/issues/21716>]

=head2 Class barewords no longer resolved as file handles in method calls under C<no feature "bareword_filehandles">

Under C<no feature "bareword_filehandles"> bareword file handles
continued to be resolved in method calls:

    open FH, "<", $somefile or die;
    no feature 'bareword_filehandles';
    FH->binmode;

This has been fixed, so the:

    FH->binmode;

will attempt to resolve C<FH> as a class, typically resulting in a
runtime error.

The standard file handles such as C<STDOUT> continue to be resolved as
a handle:

    no feature 'bareword_filehandles';
    STDOUT->flush; # continues to work

Note that once perl resolves a bareword name as a class it will
continue to do so:

    package SomeClass {
        sub somemethod{}
    }
    open SomeClass, "<", "somefile" or die;
    # SomeClass resolved as a handle
    SomeClass->binmode;
    {
        no feature "bareword_filehandles";
        SomeClass->somemethod;
    }
    # SomeClass resolved as a class
    SomeClass->binmode;

[L<GH #19426|https://github.com/Perl/perl5/issues/19426>]

=head1 Deprecations

=over 4

=item *

Using C<goto> to jump from an outer scope into an inner scope is deprecated
and will be removed completely in Perl 5.42.  [L<GH #21601|https://github.com/Perl/perl5/issues/21601>]

=back

=head1 Performance Enhancements

=over 4

=item *

The negation OPs have been modified to support the generic C<TARGMY> optimization.
[L<GH #21442|https://github.com/Perl/perl5/issues/21442>]

=back

=head1 Modules and Pragmata

=head2 New Modules and Pragmata

=over 4

=item *

L<Term::Table> 0.018 has been added to the Perl core.

This module is a dependency of L<Test2::Suite>.

=item *

L<Test2::Suite> 0.000162 has been added to the Perl core.

This distribution contains a comprehensive set of test tools for writing unit
tests.  It is the successor to L<Test::More> and similar modules.  Its
inclusion in the Perl core means that CPAN module tests can be written using
this suite of tools without extra dependencies.

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

L<Archive::Tar> has been upgraded from version 2.40 to 3.02_001.

=item *

L<attributes> has been upgraded from version 0.35 to 0.36.

=item *

L<autodie> has been upgraded from version 2.36 to 2.37.

=item *

L<B> has been upgraded from version 1.88 to 1.89.

=item *

L<B::Deparse> has been upgraded from version 1.74 to 1.76.

=item *

L<Benchmark> has been upgraded from version 1.24 to 1.25.

=item *

L<bignum> has been upgraded from version 0.66 to 0.67.

=item *

L<builtin> has been upgraded from version 0.008 to 0.014.

L<builtin> now accepts a version bundle as an input argument, requesting it to
import all of the functions that are considered a stable part of the module at
the given Perl version. For example:

    use builtin ':5.40';

Added the C<load_module()> builtin function as per L<PPC 0006|https://github.com/Perl/PPCs/blob/main/ppcs/ppc0006-load-module.md>.

=item *

L<bytes> has been upgraded from version 1.08 to 1.09.

=item *

L<Compress::Raw::Bzip2> has been upgraded from version 2.204_001 to 2.212.

=item *

L<Compress::Raw::Zlib> has been upgraded from version 2.204_001 to 2.212.

=item *

L<CPAN::Meta::Requirements> has been upgraded from version 2.140 to 2.143.

=item *

L<Data::Dumper> has been upgraded from version 2.188 to 2.189.

=item *

L<DB_File> has been upgraded from version 1.858 to 1.859.

=item *

L<Devel::Peek> has been upgraded from version 1.33 to 1.34.

=item *

L<Devel::PPPort> has been upgraded from version 3.71 to 3.72.

=item *

L<diagnostics> has been upgraded from version 1.39 to 1.40.

=item *

L<DynaLoader> has been upgraded from version 1.54 to 1.56.

=item *

L<Encode> has been upgraded from version 3.19 to 3.21.

=item *

L<Errno> has been upgraded from version 1.37 to 1.38.

The C<osvers> and C<archname> baked into the module to ensure Errno is loaded
by the perl that built it are now more comprehensively escaped.
[L<GH #21135|https://github.com/Perl/perl5/issues/21135>]

=item *

L<experimental> has been upgraded from version 0.031 to 0.032.

