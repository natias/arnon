You can also:

    my @ok = ();
    if (open(GREP, "-|")) {
        while (<GREP>) {
            chomp;
            push(@ok, $_);
        }
        close GREP;
    } else {
        exec 'grep', @opts, $search_string, @filenames;
    }

Just as with C<system()>, no shell escapes happen when you C<exec()> a
list. Further examples of this can be found in L<perlipc/"Safe Pipe
Opens">.

Note that if you're using Windows, no solution to this vexing issue is
even possible. Even though Perl emulates C<fork()>, you'll still be
stuck, because Windows does not have an argc/argv-style API.

=head2 Why can't my script read from STDIN after I gave it EOF (^D on Unix, ^Z on MS-DOS)?

This happens only if your perl is compiled to use stdio instead of
perlio, which is the default. Some (maybe all?) stdios set error and
eof flags that you may need to clear. The L<POSIX> module defines
C<clearerr()> that you can use. That is the technically correct way to
do it. Here are some less reliable workarounds:

=over 4

=item 1

Try keeping around the seekpointer and go there, like this:

    my $where = tell($log_fh);
    seek($log_fh, $where, 0);

=item 2

If that doesn't work, try seeking to a different part of the file and
then back.

=item 3

If that doesn't work, try seeking to a different part of
the file, reading something, and then seeking back.

=item 4

If that doesn't work, give up on your stdio package and use sysread.

=back

=head2 How can I convert my shell script to perl?

Learn Perl and rewrite it. Seriously, there's no simple converter.
Things that are awkward to do in the shell are easy to do in Perl, and
this very awkwardness is what would make a shell->perl converter
nigh-on impossible to write. By rewriting it, you'll think about what
you're really trying to do, and hopefully will escape the shell's
pipeline datastream paradigm, which while convenient for some matters,
causes many inefficiencies.

=head2 Can I use perl to run a telnet or ftp session?

Try the L<Net::FTP>, L<TCP::Client>, and L<Net::Telnet> modules
(available from CPAN).
L<http://www.cpan.org/scripts/netstuff/telnet.emul.shar> will also help
for emulating the telnet protocol, but L<Net::Telnet> is quite
probably easier to use.

If all you want to do is pretend to be telnet but don't need
the initial telnet handshaking, then the standard dual-process
approach will suffice:

    use IO::Socket;             # new in 5.004
    my $handle = IO::Socket::INET->new('www.perl.com:80')
        or die "can't connect to port 80 on www.perl.com $!";
    $handle->autoflush(1);
    if (fork()) {               # XXX: undef means failure
        select($handle);
        print while <STDIN>;    # everything from stdin to socket
    } else {
        print while <$handle>;  # everything from socket to stdout
    }
    close $handle;
    exit;

=head2 How can I write expect in Perl?

Once upon a time, there was a library called F<chat2.pl> (part of the
standard perl distribution), which never really got finished. If you
find it somewhere, I<don't use it>. These days, your best bet is to
look at the L<Expect> module available from CPAN, which also requires two
other modules from CPAN, L<IO::Pty> and L<IO::Stty>.

=head2 Is there a way to hide perl's command line from programs such as "ps"?

First of all note that if you're doing this for security reasons (to
avoid people seeing passwords, for example) then you should rewrite
your program so that critical information is never given as an
argument. Hiding the arguments won't make your program completely
secure.

To actually alter the visible command line, you can assign to the
variable $0 as documented in L<perlvar>. This won't work on all
operating systems, though. Daemon programs like sendmail place their
state there, as in:

    $0 = "orcus [accepting connections]";

=head2 I {changed directory, modified my environment} in a perl script. How come the change disappeared when I exited the script? How do I get my changes to be visible?

=over 4

=item Unix

In the strictest sense, it can't be done--the script executes as a
different process from the shell it was started from. Changes to a
process are not reflected in its parent--only in any children
created after the change. There is shell magic that may allow you to
fake it by C<eval()>ing the script's output in your shell; check out the
comp.unix.questions FAQ for details.

=back

=head2 How do I close a process's filehandle without waiting for it to complete?

Assuming your system supports such things, just send an appropriate signal
to the process (see L<perlfunc/"kill">). It's common to first send a TERM
signal, wait a little bit, and then send a KILL signal to finish it off.

=head2 How do I fork a daemon process?

If by daemon process you mean one that's detached (disassociated from
its tty), then the following process is reported to work on most
Unixish systems. Non-Unix users should check their Your_OS::Process
module for other solutions.

=over 4

=item *

Open /dev/tty and use the TIOCNOTTY ioctl on it. See L<tty(1)>
for details. Or better yet, you can just use the C<POSIX::setsid()>
function, so you don't have to worry about process groups.

=item *

Change directory to /

=item *

Reopen STDIN, STDOUT, and STDERR so they're not connected to the old
tty.

=item *

Background yourself like this:

    fork && exit;

=back

The L<Proc::Daemon> module, available from CPAN, provides a function to
perform these actions for you.

=head2 How do I find out if I'm running interactively or not?

(contributed by brian d foy)

This is a difficult question to answer, and the best answer is
only a guess.

What do you really want to know? If you merely want to know if one of
your filehandles is connected to a terminal, you can try the C<-t>
file test:

    if( -t STDOUT ) {
        print "I'm connected to a terminal!\n";
    }

However, you might be out of luck if you expect that means there is a
real person on the other side. With the L<Expect> module, another
program can pretend to be a person. The program might even come close
to passing the Turing test.

The L<IO::Interactive> module does the best it can to give you an
answer. Its C<is_interactive> function returns an output filehandle;
that filehandle points to standard output if the module thinks the
session is interactive. Otherwise, the filehandle is a null handle
that simply discards the output:

    use IO::Interactive;

    print { is_interactive } "I might go to standard output!\n";

This still doesn't guarantee that a real person is answering your
prompts or reading your output.

If you want to know how to handle automated testing for your
distribution, you can check the environment. The CPAN
Testers, for instance, set the value of C<AUTOMATED_TESTING>:

    unless( $ENV{AUTOMATED_TESTING} ) {
        print "Hello interactive tester!\n";
    }

=head2 How do I timeout a slow event?

Use the C<alarm()> function, probably in conjunction with a signal
handler, as documented in L<perlipc/"Signals"> and the section on
"Signals" in the Camel. You may instead use the more flexible
L<Sys::AlarmCall> module available from CPAN.

The C<alarm()> function is not implemented on all versions of Windows.
Check the documentation for your specific version of Perl.

=head2 How do I set CPU limits?
X<BSD::Resource> X<limit> X<CPU>

(contributed by Xho)

Use the L<BSD::Resource> module from CPAN. As an example:

    use BSD::Resource;
    setrlimit(RLIMIT_CPU,10,20) or die $!;

This sets the soft and hard limits to 10 and 20 seconds, respectively.
After 10 seconds of time spent running on the CPU (not "wall" time),
the process will be sent a signal (XCPU on some systems) which, if not
trapped, will cause the process to terminate. If that signal is
trapped, then after 10 more seconds (20 seconds in total) the process
will be killed with a non-trappable signal.

See the L<BSD::Resource> and your systems documentation for the gory
details.

=head2 How do I avoid zombies on a Unix system?

Use the reaper code from L<perlipc/"Signals"> to call C<wait()> when a
SIGCHLD is received, or else use the double-fork technique described
in L<perlfaq8/"How do I start a process in the background?">.

=head2 How do I use an SQL database?

The L<DBI> module provides an abstract interface to most database
servers and types, including Oracle, DB2, Sybase, mysql, Postgresql,
ODBC, and flat files. The DBI module accesses each database type
through a database driver, or DBD. You can see a complete list of
available drivers on CPAN: L<http://www.cpan.org/modules/by-module/DBD/> .
You can read more about DBI on L<http://dbi.perl.org/> .

Other modules provide more specific access: L<Win32::ODBC>, L<Alzabo>,
C<iodbc>, and others found on CPAN Search: L<https://metacpan.org/> .

=head2 How do I make a system() exit on control-C?

You can't. You need to imitate the C<system()> call (see L<perlipc> for
sample code) and then have a signal handler for the INT signal that
passes the signal on to the subprocess. Or you can check for it:

    $rc = system($cmd);
    if ($rc & 127) { die "signal death" }

=head2 How do I open a file without blocking?

If you're lucky enough to be using a system that supports
non-blocking reads (most Unixish systems do), you need only to use the
C<O_NDELAY> or C<O_NONBLOCK> flag from the C<Fcntl> module in conjunction with
C<sysopen()>:

    use Fcntl;
    sysopen(my $fh, "/foo/somefile", O_WRONLY|O_NDELAY|O_CREAT, 0644)
        or die "can't open /foo/somefile: $!":

=head2 How do I tell the difference between errors from the shell and perl?

(answer contributed by brian d foy)

When you run a Perl script, something else is running the script for you,
and that something else may output error messages. The script might
emit its own warnings and error messages. Most of the time you cannot
tell who said what.

You probably cannot fix the thing that runs perl, but you can change how
perl outputs its warnings by defining a custom warning and die functions.

Consider this script, which has an error you may not notice immediately.

    #!/usr/locl/bin/perl

    print "Hello World\n";

I get an error when I run this from my shell (which happens to be
bash). That may look like perl forgot it has a C<print()> function,
but my shebang line is not the path to perl, so the shell runs the
script, and I get the error.

    $ ./test
    ./test: line 3: print: command not found

A quick and dirty fix involves a little bit of code, but this may be all
you need to figure out the problem.

    #!/usr/bin/perl -w

    BEGIN {
        $SIG{__WARN__} = sub{ print STDERR "Perl: ", @_; };
        $SIG{__DIE__}  = sub{ print STDERR "Perl: ", @_; exit 1};
    }

    $a = 1 + undef;
    $x / 0;
    __END__

The perl message comes out with "Perl" in front. The C<BEGIN> block
works at compile time so all of the compilation errors and warnings
get the "Perl:" prefix too.

    Perl: Useless use of division (/) in void context at ./test line 9.
    Perl: Name "main::a" used only once: possible typo at ./test line 8.
    Perl: Name "main::x" used only once: possible typo at ./test line 9.
    Perl: Use of uninitialized value in addition (+) at ./test line 8.
    Perl: Use of uninitialized value in division (/) at ./test line 9.
    Perl: Illegal division by zero at ./test line 9.
    Perl: Illegal division by zero at -e line 3.

If I don't see that "Perl:", it's not from perl.

You could also just know all the perl errors, and although there are
some people who may know all of them, you probably don't. However, they
all should be in the L<perldiag> manpage. If you don't find the error in
there, it probably isn't a perl error.

Looking up every message is not the easiest way, so let perl to do it
for you. Use the diagnostics pragma with turns perl's normal messages
into longer discussions on the topic.

    use diagnostics;

If you don't get a paragraph or two of expanded discussion, it
might not be perl's message.

=head2 How do I install a module from CPAN?

(contributed by brian d foy)

The easiest way is to have a module also named CPAN do it for you by using
the C<cpan> command that comes with Perl. You can give it a list of modules
to install:

    $ cpan IO::Interactive Getopt::Whatever

If you prefer C<CPANPLUS>, it's just as easy:

    $ cpanp i IO::Interactive Getopt::Whatever

If you want to install a distribution from the current directory, you can
tell C<CPAN.pm> to install C<.> (the full stop):

    $ cpan .

See the documentation for either of those commands to see what else
you can do.

If you want to try to install a distribution by yourself, resolving
all dependencies on your own, you follow one of two possible build
paths.

For distributions that use I<Makefile.PL>:

    $ perl Makefile.PL
    $ make test install

For distributions that use I<Build.PL>:

    $ perl Build.PL
    $ ./Build test
    $ ./Build install

Some distributions may need to link to libraries or other third-party
code and their build and installation sequences may be more complicated.
Check any I<README> or I<INSTALL> files that you may find.

=head2 What's the difference between require and use?

(contributed by brian d foy)

Perl runs C<require> statement at run-time. Once Perl loads, compiles,
and runs the file, it doesn't do anything else. The C<use> statement
is the same as a C<require> run at compile-time, but Perl also calls the
C<import> method for the loaded package. These two are the same:

    use MODULE qw(import list);

    BEGIN {
        require MODULE;
        MODULE->import(import list);
    }

However, you can suppress the C<import> by using an explicit, empty
import list. Both of these still happen at compile-time:

    use MODULE ();

    BEGIN {
        require MODULE;
    }

Since C<use> will also call the C<import> method, the actual value
for C<MODULE> must be a bareword. That is, C<use> cannot load files
by name, although C<require> can:

    require "$ENV{HOME}/lib/Foo.pm"; # no @INC searching!

See the entry for C<use> in L<perlfunc> for more details.

=head2 How do I keep my own module/library directory?

When you build modules, tell Perl where to install the modules.

If you want to install modules for your own use, the easiest way might
be L<local::lib>, which you can download from CPAN. It sets various
installation settings for you, and uses those same settings within
your programs.

If you want more flexibility, you need to configure your CPAN client
for your particular situation.

For C<Makefile.PL>-based distributions, use the INSTALL_BASE option
when generating Makefiles:

    perl Makefile.PL INSTALL_BASE=/mydir/perl

You can set this in your C<CPAN.pm> configuration so modules
automatically install in your private library directory when you use
the CPAN.pm shell:

    % cpan
    cpan> o conf makepl_arg INSTALL_BASE=/mydir/perl
    cpan> o conf commit

For C<Build.PL>-based distributions, use the --install_base option:

    perl Build.PL --install_base /mydir/perl

You can configure C<CPAN.pm> to automatically use this option too:

    % cpan
    cpan> o conf mbuild_arg "--install_base /mydir/perl"
    cpan> o conf commit

INSTALL_BASE tells these tools to put your modules into
F</mydir/perl/lib/perl5>. See L<How do I add a directory to my
include path (@INC) at runtime?> for details on how to run your newly
installed modules.

There is one caveat with INSTALL_BASE, though, since it acts
differently from the PREFIX and LIB settings that older versions of
L<ExtUtils::MakeMaker> advocated. INSTALL_BASE does not support
installing modules for multiple versions of Perl or different
architectures under the same directory. You should consider whether you
really want that and, if you do, use the older PREFIX and LIB
settings. See the L<ExtUtils::Makemaker> documentation for more details.

=head2 How do I add the directory my program lives in to the module/library search path?

(contributed by brian d foy)

If you know the directory already, you can add it to C<@INC> as you would
for any other directory. You might C<use lib> if you know the directory
at compile time:

    use lib $directory;

The trick in this task is to find the directory. Before your script does
anything else (such as a C<chdir>), you can get the current working
directory with the C<Cwd> module, which comes with Perl:

    BEGIN {
        use Cwd;
        our $directory = cwd;
    }

    use lib $directory;

You can do a similar thing with the value of C<$0>, which holds the
script name. That might hold a relative path, but C<rel2abs> can turn
it into an absolute path. Once you have the

    BEGIN {
        use File::Spec::Functions qw(rel2abs);
        use File::Basename qw(dirname);

        my $path   = rel2abs( $0 );
        our $directory = dirname( $path );
    }

    use lib $directory;

The L<FindBin> module, which comes with Perl, might work. It finds the
directory of the currently running script and puts it in C<$Bin>, which
you can then use to construct the right library path:

    use FindBin qw($Bin);

You can also use L<local::lib> to do much of the same thing. Install
modules using L<local::lib>'s settings then use the module in your
program:

     use local::lib; # sets up a local lib at ~/perl5

See the L<local::lib> documentation for more details.

=head2 How do I add a directory to my include path (@INC) at runtime?

Here are the suggested ways of modifying your include path, including
environment variables, run-time switches, and in-code statements:

=over 4

=item the C<PERLLIB> environment variable

    $ export PERLLIB=/path/to/my/dir
    $ perl program.pl

=item the C<PERL5LIB> environment variable

    $ export PERL5LIB=/path/to/my/dir
    $ perl program.pl

=item the C<perl -Idir> command line flag

    $ perl -I/path/to/my/dir program.pl

=item the C<lib> pragma:

    use lib "$ENV{HOME}/myown_perllib";

=item the L<local::lib> module:

    use local::lib;

    use local::lib "~/myown_perllib";

=back

=head2 Where are modules installed?

Modules are installed on a case-by-case basis (as provided by the methods
described in the previous section), and in the operating system. All of these
paths are stored in @INC, which you can display with the one-liner

    perl -e 'print join("\n",@INC,"")'

The same information is displayed at the end of the output from the command

    perl -V

To find out where a module's source code is located, use

    perldoc -l Encode

to display the path to the module. In some cases (for example, the C<AutoLoader>
module), this command will show the path to a separate C<pod> file; the module
itself should be in the same directory, with a 'pm' file extension.

=head2 What is socket.ph and where do I get it?

It's a Perl 4 style file defining values for system networking
constants. Sometimes it is built using L<h2ph> when Perl is installed,
but other times it is not. Modern programs should use C<use Socket;>
instead.

=head1 AUTHOR AND COPYRIGHT

Copyright (c) 1997-2010 Tom Christiansen, Nathan Torkington, and
other authors as noted. All rights reserved.

This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.

Irrespective of its distribution, all code examples in this file
are hereby placed into the public domain. You are permitted and
encouraged to use this code in your own programs for fun
or for profit as you see fit. A simple comment in the code giving
credit would be courteous but is not required.
                                                                                                                                                                                                                                                    usr/local/lib/perl5/5.40.0/pod/perlfaq9.pod                                                         0000644 0000000 0000000 00000035565 14714567415 016535  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

perlfaq9 - Web, Email and Networking

=head1 VERSION

version 5.20240218

=head1 DESCRIPTION

This section deals with questions related to running web sites,
sending and receiving email as well as general networking.

=head2 Should I use a web framework?

Yes. If you are building a web site with any level of interactivity
(forms / users / databases), you
will want to use a framework to make handling requests
and responses easier.

If there is no interactivity then you may still want
to look at using something like L<Template Toolkit|https://metacpan.org/module/Template>
or L<Plack::Middleware::TemplateToolkit>
so maintenance of your HTML files (and other assets) is easier.

=head2 Which web framework should I use?
X<framework> X<CGI.pm> X<CGI> X<Catalyst> X<Dancer>

There is no simple answer to this question. Perl frameworks can run everything
from basic file servers and small scale intranets to massive multinational
multilingual websites that are the core to international businesses.

Below is a list of a few frameworks with comments which might help you in
making a decision, depending on your specific requirements. Start by reading
the docs, then ask questions on the relevant mailing list or IRC channel.

=over 4

=item L<Catalyst>

Strongly object-oriented and fully-featured with a long development history and
a large community and addon ecosystem. It is excellent for large and complex
applications, where you have full control over the server.

=item L<Dancer2>

Free of legacy weight, providing a lightweight and easy to learn API.
Has a growing addon ecosystem. It is best used for smaller projects and
very easy to learn for beginners.

=item L<Mojolicious>

Self-contained and powerful for both small and larger projects,
with a focus on HTML5 and real-time web technologies such as WebSockets.

=item L<Web::Simple>

Strongly object-oriented and minimal, built for speed and intended
as a toolkit for building micro web apps, custom frameworks or for tieing
together existing Plack-compatible web applications with one central dispatcher.

=back

All of these interact with or use L<Plack> which is worth understanding
the basics of when building a website in Perl (there is a lot of useful
L<Plack::Middleware|https://metacpan.org/search?q=plack%3A%3Amiddleware>).

=head2 What is Plack and PSGI?

L<PSGI> is the Perl Web Server Gateway Interface Specification, it is
a standard that many Perl web frameworks use, you should not need to
understand it to build a web site, the part you might want to use is L<Plack>.

L<Plack> is a set of tools for using the PSGI stack. It contains
L<middleware|https://metacpan.org/search?q=plack%3A%3Amiddleware>
components, a reference server and utilities for Web application frameworks.
Plack is like Ruby's Rack or Python's Paste for WSGI.

You could build a web site using L<Plack> and your own code,
but for anything other than a very basic web site, using a web framework
(that uses L<https://plackperl.org>) is a better option.

=head2 How do I remove HTML from a string?

Use L<HTML::Strip>, or L<HTML::FormatText> which not only removes HTML
but also attempts to do a little simple formatting of the resulting
plain text.

=head2 How do I extract URLs?

L<HTML::SimpleLinkExtor> will extract URLs from HTML, it handles anchors,
images, objects, frames, and many other tags that can contain a URL.
If you need anything more complex, you can create your own subclass of
L<HTML::LinkExtor> or L<HTML::Parser>. You might even use
L<HTML::SimpleLinkExtor> as an example for something specifically
suited to your needs.

You can use L<URI::Find> or L<URL::Search> to extract URLs from an
arbitrary text document.

=head2 How do I fetch an HTML file?

(contributed by brian d foy)

The core L<HTTP::Tiny> module can fetch web resources and give their
content back to you as a string:

    use HTTP::Tiny;

    my $ua = HTTP::Tiny->new;
    my $html = $ua->get( "http://www.example.com/index.html" )->{content};

It can also store the resource directly in a file:

    $ua->mirror( "http://www.example.com/index.html", "foo.html" );

If you need to do something more complicated, the L<HTTP::Tiny> object can
be customized by setting attributes, or you can use L<LWP::UserAgent> from
the libwww-perl distribution or L<Mojo::UserAgent> from the Mojolicious
distribution to make common tasks easier. If you want to simulate an
interactive web browser, you can use the L<WWW::Mechanize> module.

=head2 How do I automate an HTML form submission?

If you are doing something complex, such as moving through many pages
and forms or a web site, you can use L<WWW::Mechanize>. See its
documentation for all the details.

If you're submitting values using the GET method, create a URL and encode
the form using the C<www_form_urlencode> method from L<HTTP::Tiny>:

    use HTTP::Tiny;

    my $ua = HTTP::Tiny->new;

    my $query = $ua->www_form_urlencode([ q => 'DB_File', lucky => 1 ]);
    my $url = "https://metacpan.org/search?$query";
    my $content = $ua->get($url)->{content};

If you're using the POST method, the C<post_form> method will encode the
content appropriately.

    use HTTP::Tiny;

    my $ua = HTTP::Tiny->new;

    my $url = 'https://metacpan.org/search';
    my $form = [ q => 'DB_File', lucky => 1 ];
    my $content = $ua->post_form($url, $form)->{content};

=head2 How do I decode or create those %-encodings on the web?
X<URI> X<URI::Escape> X<RFC 2396>

Most of the time you should not need to do this as
your web framework, or if you are making a request,
the L<LWP> or other module would handle it for you.

To encode a string yourself, use the L<URI::Escape> module. The C<uri_escape>
function returns the escaped string:

    my $original = "Colon : Hash # Percent %";

    my $escaped = uri_escape( $original );

    print "$escaped\n"; # 'Colon%20%3A%20Hash%20%23%20Percent%20%25'

To decode the string, use the C<uri_unescape> function:

    my $unescaped = uri_unescape( $escaped );

    print $unescaped; # back to original

Remember not to encode a full URI, you need to escape each
component separately and then join them together.

=head2 How do I redirect to another page?

Most Perl Web Frameworks will have a mechanism for doing this,
using the L<Catalyst> framework it would be:

    $c->res->redirect($url);
    $c->detach();

If you are using Plack (which most frameworks do), then
L<Plack::Middleware::Rewrite> is worth looking at if you
are migrating from Apache or have URL's you want to always
redirect.

=head2 How do I put a password on my web pages?

See if the web framework you are using has an
authentication system and if that fits your needs.

Alternativly look at L<Plack::Middleware::Auth::Basic>,
or one of the other L<Plack authentication|https://metacpan.org/search?q=plack+auth>
options.

=head2 How do I make sure users can't enter values into a form that causes my CGI script to do bad things?

(contributed by brian d foy)

You can't prevent people from sending your script bad data. Even if
you add some client-side checks, people may disable them or bypass
them completely. For instance, someone might use a module such as
L<LWP> to submit to your web site. If you want to prevent data that
try to use SQL injection or other sorts of attacks (and you should
want to), you have to not trust any data that enter your program.

The L<perlsec> documentation has general advice about data security.
If you are using the L<DBI> module, use placeholder to fill in data.
If you are running external programs with C<system> or C<exec>, use
the list forms. There are many other precautions that you should take,
too many to list here, and most of them fall under the category of not
using any data that you don't intend to use. Trust no one.

=head2 How do I parse a mail header?

Use the L<Email::MIME> module. It's well-tested and supports all the
craziness that you'll see in the real world (comment-folding whitespace,
encodings, comments, etc.).

  use Email::MIME;

  my $message = Email::MIME->new($rfc2822);
  my $subject = $message->header('Subject');
  my $from    = $message->header('From');

If you've already got some other kind of email object, consider passing
it to L<Email::Abstract> and then using its cast method to get an
L<Email::MIME> object:

  my $abstract = Email::Abstract->new($mail_message_object);
  my $email_mime_object = $abstract->cast('Email::MIME');

=head2 How do I check a valid mail address?

(partly contributed by Aaron Sherman)

This isn't as simple a question as it sounds. There are two parts:

a) How do I verify that an email address is correctly formatted?

b) How do I verify that an email address targets a valid recipient?

Without sending mail to the address and seeing whether there's a human
on the other end to answer you, you cannot fully answer part I<b>, but
the L<Email::Valid> module will do both part I<a> and part I<b> as far
as you can in real-time.

Our best advice for verifying a person's mail address is to have them
enter their address twice, just as you normally do to change a
password. This usually weeds out typos. If both versions match, send
mail to that address with a personal message. If you get the message
back and they've followed your directions, you can be reasonably
assured that it's real.

A related strategy that's less open to forgery is to give them a PIN
(personal ID number). Record the address and PIN (best that it be a
random one) for later processing. In the mail you send, include a link to
your site with the PIN included. If the mail bounces, you know it's not
valid. If they don't click on the link, either they forged the address or
(assuming they got the message) following through wasn't important so you
don't need to worry about it.

=head2 How do I decode a MIME/BASE64 string?

The L<MIME::Base64> package handles this as well as the MIME/QP encoding.
Decoding base 64 becomes as simple as:

    use MIME::Base64;
    my $decoded = decode_base64($encoded);

The L<Email::MIME> module can decode base 64-encoded email message parts
transparently so the developer doesn't need to worry about it.

=head2 How do I find the user's mail address?

Ask them for it. There are so many email providers available that it's
unlikely the local system has any idea how to determine a user's email address.

The exception is for organization-specific email (e.g. foo@yourcompany.com)
where policy can be codified in your program. In that case, you could look at
$ENV{USER}, $ENV{LOGNAME}, and getpwuid($<) in scalar context, like so:

  my $user_name = getpwuid($<)

But you still cannot make assumptions about whether this is correct, unless
your policy says it is. You really are best off asking the user.

=head2 How do I send email?

Use the L<Email::Stuffer> module, like so:

  # first, create your message
  my $message = Email::Stuffer->from('you@example.com')
                              ->to('friend@example.com')
                              ->subject('Happy birthday!')
                              ->text_body("Happy birthday to you!\n");

  $message->send_or_die;

By default, L<Email::Sender::Simple> (the C<send> and C<send_or_die> methods
use this under the hood) will try C<sendmail> first, if it exists
in your $PATH. This generally isn't the case. If there's a remote mail
server you use to send mail, consider investigating one of the Transport
classes. At time of writing, the available transports include:

=over 4

=item L<Email::Sender::Transport::Sendmail>

This is the default. If you can use the L<mail(1)> or L<mailx(1)>
program to send mail from the machine where your code runs, you should
be able to use this.

=item L<Email::Sender::Transport::SMTP>

This transport contacts a remote SMTP server over TCP. It optionally
uses TLS or SSL and can authenticate to the server via SASL.

=back

Telling L<Email::Stuffer> to use your transport is straightforward.

  $message->transport($email_sender_transport_object)->send_or_die;

=head2 How do I use MIME to make an attachment to a mail message?

L<Email::MIME> directly supports multipart messages. L<Email::MIME>
objects themselves are parts and can be attached to other L<Email::MIME>
objects. Consult the L<Email::MIME> documentation for more information,
including all of the supported methods and examples of their use.

L<Email::Stuffer> uses L<Email::MIME> under the hood to construct
messages, and wraps the most common attachment tasks with the simple
C<attach> and C<attach_file> methods.

  Email::Stuffer->to('friend@example.com')
                ->subject('The file')
                ->attach_file('stuff.csv')
                ->send_or_die;

=head2 How do I read email?

Use the L<Email::Folder> module, like so:

  use Email::Folder;

  my $folder = Email::Folder->new('/path/to/email/folder');
  while(my $message = $folder->next_message) {
    # next_message returns Email::Simple objects, but we want
    # Email::MIME objects as they're more robust
    my $mime = Email::MIME->new($message->as_string);
  }

There are different classes in the L<Email::Folder> namespace for
supporting various mailbox types. Note that these modules are generally
rather limited and only support B<reading> rather than writing.

=head2 How do I find out my hostname, domainname, or IP address?
X<hostname, domainname, IP address, host, domain, hostfqdn, inet_ntoa,
gethostbyname, Socket, Net::Domain, Sys::Hostname>

(contributed by brian d foy)

The L<Net::Domain> module, which is part of the Standard Library starting
in Perl 5.7.3, can get you the fully qualified domain name (FQDN), the host
name, or the domain name.

    use Net::Domain qw(hostname hostfqdn hostdomain);

    my $host = hostfqdn();

The L<Sys::Hostname> module, part of the Standard Library, can also get the
hostname:

    use Sys::Hostname;

    $host = hostname();


The L<Sys::Hostname::Long> module takes a different approach and tries
harder to return the fully qualified hostname:

  use Sys::Hostname::Long 'hostname_long';

  my $hostname = hostname_long();

To get the IP address, you can use the C<gethostbyname> built-in function
to turn the name into a number. To turn that number into the dotted octet
form (a.b.c.d) that most people expect, use the C<inet_ntoa> function
from the L<Socket> module, which also comes with perl.

    use Socket;

    my $address = inet_ntoa(
        scalar gethostbyname( $host || 'localhost' )
    );

=head2 How do I fetch/put an (S)FTP file?

L<Net::FTP>, and L<Net::SFTP> allow you to interact with FTP and SFTP (Secure
FTP) servers.

=head2 How can I do RPC in Perl?

Use one of the RPC modules( L<https://metacpan.org/search?q=RPC> ).

=head1 AUTHOR AND COPYRIGHT

Copyright (c) 1997-2010 Tom Christiansen, Nathan Torkington, and
