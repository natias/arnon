	0x11D5A,
	0x11DA0,
	0x11DAA,
	0x11F50,
	0x11F5A,
	0x16A60,
	0x16A6A,
	0x16AC0,
	0x16ACA,
	0x16B50,
	0x16B5A,
	0x1D7CE,
	0x1D800,
	0x1E140,
	0x1E14A,
	0x1E2F0,
	0x1E2FA,
	0x1E4F0,
	0x1E4FA,
	0x1E950,
	0x1E95A,
	0x1FBF0,
	0x1FBFA
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_SB__SC_invlist[] = {  /* for ASCII/Latin1 */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2C,
	0x2E,
	0x3A,
	0x3B,
	0x55D,
	0x55E,
	0x60C,
	0x60E,
	0x7F8,
	0x7F9,
	0x1802,
	0x1803,
	0x1808,
	0x1809,
	0x2013,
	0x2015,
	0x3001,
	0x3002,
	0xFE10,
	0xFE12,
	0xFE13,
	0xFE14,
	0xFE31,
	0xFE33,
	0xFE50,
	0xFE52,
	0xFE55,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0C,
	0xFF0E,
	0xFF1A,
	0xFF1B,
	0xFF64,
	0xFF65
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_SB__SC_invlist[] = {  /* for EBCDIC 1047 */
	41,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0x6B,
	0x6C,
	0x7A,
	0x7B,
	0x55D,
	0x55E,
	0x60C,
	0x60E,
	0x7F8,
	0x7F9,
	0x1802,
	0x1803,
	0x1808,
	0x1809,
	0x2013,
	0x2015,
	0x3001,
	0x3002,
	0xFE10,
	0xFE12,
	0xFE13,
	0xFE14,
	0xFE31,
	0xFE33,
	0xFE50,
	0xFE52,
	0xFE55,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0C,
	0xFF0E,
	0xFF1A,
	0xFF1B,
	0xFF64,
	0xFF65
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_SB__SC_invlist[] = {  /* for EBCDIC 037 */
	41,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0x6B,
	0x6C,
	0x7A,
	0x7B,
	0x55D,
	0x55E,
	0x60C,
	0x60E,
	0x7F8,
	0x7F9,
	0x1802,
	0x1803,
	0x1808,
	0x1809,
	0x2013,
	0x2015,
	0x3001,
	0x3002,
	0xFE10,
	0xFE12,
	0xFE13,
	0xFE14,
	0xFE31,
	0xFE33,
	0xFE50,
	0xFE52,
	0xFE55,
	0xFE56,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0C,
	0xFF0E,
	0xFF1A,
	0xFF1B,
	0xFF64,
	0xFF65
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_SB__SE_invlist[] = {  /* for ASCII/Latin1 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x85,
	0x86,
	0x2028,
	0x202A
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_SB__SE_invlist[] = {  /* for EBCDIC 1047 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x25,
	0x26,
	0x2028,
	0x202A
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_SB__SE_invlist[] = {  /* for EBCDIC 037 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x15,
	0x16,
	0x2028,
	0x202A
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_SB__SP_invlist[] = {  /* for ASCII/Latin1 */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xA,
	0xB,
	0xD,
	0x20,
	0x21,
	0xA0,
	0xA1,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_SB__SP_invlist[] = {  /* for EBCDIC 1047 */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xD,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_SB__SP_invlist[] = {  /* for EBCDIC 037 */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xD,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_SB__ST_invlist[] = {  /* for ASCII/Latin1 */
	155,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x22,
	0x3F,
	0x40,
	0x589,
	0x58A,
	0x61D,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x703,
	0x7F9,
	0x7FA,
	0x837,
	0x838,
	0x839,
	0x83A,
	0x83D,
	0x83F,
	0x964,
	0x966,
	0x104A,
	0x104C,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x166E,
	0x166F,
	0x1735,
	0x1737,
	0x1803,
	0x1804,
	0x1809,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1B7D,
	0x1B7F,
	0x1C3B,
	0x1C3D,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x2E53,
	0x2E55,
	0x3002,
	0x3003,
	0xA4FF,
	0xA500,
	0xA60E,
	0xA610,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C8,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE56,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0x10A56,
	0x10A58,
	0x10F55,
	0x10F5A,
	0x10F86,
	0x10F8A,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144D,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11944,
	0x11945,
	0x11946,
	0x11947,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11C41,
	0x11C43,
	0x11EF7,
	0x11EF9,
	0x11F43,
	0x11F45,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B39,
	0x16B44,
	0x16B45,
	0x16E98,
	0x16E99,
	0x1BC9F,
	0x1BCA0,
	0x1DA88,
	0x1DA89
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_SB__ST_invlist[] = {  /* for EBCDIC 1047 */
	155,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5A,
	0x5B,
	0x6F,
	0x70,
	0x589,
	0x58A,
	0x61D,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x703,
	0x7F9,
	0x7FA,
	0x837,
	0x838,
	0x839,
	0x83A,
	0x83D,
	0x83F,
	0x964,
	0x966,
	0x104A,
	0x104C,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x166E,
	0x166F,
	0x1735,
	0x1737,
	0x1803,
	0x1804,
	0x1809,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1B7D,
	0x1B7F,
	0x1C3B,
	0x1C3D,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x2E53,
	0x2E55,
	0x3002,
	0x3003,
	0xA4FF,
	0xA500,
	0xA60E,
	0xA610,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C8,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE56,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0x10A56,
	0x10A58,
	0x10F55,
	0x10F5A,
	0x10F86,
	0x10F8A,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144D,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11944,
	0x11945,
	0x11946,
	0x11947,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11C41,
	0x11C43,
	0x11EF7,
	0x11EF9,
	0x11F43,
	0x11F45,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B39,
	0x16B44,
	0x16B45,
	0x16E98,
	0x16E99,
	0x1BC9F,
	0x1BCA0,
	0x1DA88,
	0x1DA89
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_SB__ST_invlist[] = {  /* for EBCDIC 037 */
	155,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5A,
	0x5B,
	0x6F,
	0x70,
	0x589,
	0x58A,
	0x61D,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x703,
	0x7F9,
	0x7FA,
	0x837,
	0x838,
	0x839,
	0x83A,
	0x83D,
	0x83F,
	0x964,
	0x966,
	0x104A,
	0x104C,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x166E,
	0x166F,
	0x1735,
	0x1737,
	0x1803,
	0x1804,
	0x1809,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1B7D,
	0x1B7F,
	0x1C3B,
	0x1C3D,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x2E53,
	0x2E55,
	0x3002,
	0x3003,
	0xA4FF,
	0xA500,
	0xA60E,
	0xA610,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C8,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE56,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0x10A56,
	0x10A58,
	0x10F55,
	0x10F5A,
	0x10F86,
	0x10F8A,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144D,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11944,
	0x11945,
	0x11946,
	0x11947,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11C41,
	0x11C43,
	0x11EF7,
	0x11EF9,
	0x11F43,
	0x11F45,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B39,
	0x16B44,
	0x16B45,
	0x16E98,
	0x16E99,
	0x1BC9F,
	0x1BCA0,
	0x1DA88,
	0x1DA89
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_SB__UP_invlist[] = {  /* for ASCII/Latin1 */
	1305,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0xC0,
	0xD7,
	0xD8,
	0xDF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
