	0xAAF7,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFF9E,
	0xFFA0,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x10D24,
	0x10D28,
	0x10EAB,
	0x10EAD,
	0x10F46,
	0x10F51,
	0x10F82,
	0x10F86,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x11070,
	0x11071,
	0x11073,
	0x11075,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110C2,
	0x110C3,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111C9,
	0x111CD,
	0x111CF,
	0x111D0,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133B,
	0x1133D,
	0x1133E,
	0x1133F,
	0x11340,
	0x11341,
	0x11357,
	0x11358,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x1145E,
	0x1145F,
	0x114B0,
	0x114B1,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115AF,
	0x115B0,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x1182F,
	0x11838,
	0x11839,
	0x1183B,
	0x11930,
	0x11931,
	0x1193B,
	0x1193D,
	0x1193E,
	0x1193F,
	0x11943,
	0x11944,
	0x119D4,
	0x119D8,
	0x119DA,
	0x119DC,
	0x119E0,
	0x119E1,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x11D90,
	0x11D92,
	0x11D95,
	0x11D96,
	0x11D97,
	0x11D98,
	0x11EF3,
	0x11EF5,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F4F,
	0x16F50,
	0x16F8F,
	0x16F93,
	0x16FE4,
	0x16FE5,
	0x1BC9D,
	0x1BC9F,
	0x1CF00,
	0x1CF2E,
	0x1CF30,
	0x1CF47,
	0x1D165,
	0x1D166,
	0x1D167,
	0x1D16A,
	0x1D16E,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E130,
	0x1E137,
	0x1E2AE,
	0x1E2AF,
	0x1E2EC,
	0x1E2F0,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

static const UV UNI_GUJR_invlist[] = {  /* for all charsets */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xA830,
	0xA83A
};

static const UV UNI_GURU_invlist[] = {  /* for all charsets */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA77,
	0xA830,
	0xA83A
};

static const UV UNI_HALFANDFULLFORMS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFF00,
	0xFFF0
};

static const UV UNI_HALFMARKS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFE20,
	0xFE30
};

static const UV UNI_HAN_invlist[] = {  /* for all charsets */
	75,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3001,
	0x3004,
	0x3005,
	0x3012,
	0x3013,
	0x3020,
	0x3021,
	0x302E,
	0x3030,
	0x3031,
	0x3037,
	0x3040,
	0x30FB,
	0x30FC,
	0x3190,
	0x31A0,
	0x31C0,
	0x31E4,
	0x3220,
	0x3248,
	0x3280,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32FF,
	0x3300,
	0x3358,
	0x3371,
	0x337B,
	0x3380,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA000,
	0xA700,
	0xA708,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFE45,
	0xFE47,
	0xFF61,
	0xFF66,
	0x16FE2,
	0x16FE4,
	0x16FF0,
	0x16FF2,
	0x1D360,
	0x1D372,
	0x1F250,
	0x1F252,
	0x20000,
	0x2A6E0,
	0x2A700,
	0x2B739,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0x30000,
	0x3134B
};

static const UV UNI_HANG_invlist[] = {  /* for all charsets */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1100,
	0x1200,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3013,
	0x3020,
	0x302E,
	0x3031,
	0x3037,
	0x3038,
	0x30FB,
	0x30FC,
	0x3131,
	0x318F,
	0x3200,
	0x321F,
	0x3260,
	0x327F,
	0xA960,
	0xA97D,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFE45,
	0xFE47,
	0xFF61,
	0xFF66,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD
};

static const UV UNI_HANO_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1720,
	0x1737
};

static const UV UNI_HATR_invlist[] = {  /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x10900
};

static const UV UNI_HEBR_invlist[] = {  /* for all charsets */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5EF,
	0x5F5,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50
};

static const UV UNI_HIGHPUSURROGATES_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xDB80,
	0xDC00
};

static const UV UNI_HIGHSURROGATES_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD800,
	0xDB80
};

static const UV UNI_HIRA_invlist[] = {  /* for all charsets */
	33,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3013,
	0x3020,
	0x3030,
	0x3036,
	0x3037,
	0x3038,
	0x303C,
	0x303E,
	0x3041,
	0x3097,
	0x3099,
	0x30A1,
	0x30FB,
	0x30FD,
	0xFE45,
	0xFE47,
	0xFF61,
	0xFF66,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0x1B001,
	0x1B120,
	0x1B150,
	0x1B153,
	0x1F200,
	0x1F201
};

static const UV UNI_HLUW_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x14400,
	0x14647
};

static const UV UNI_HMNG_invlist[] = {  /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90
};

static const UV UNI_HMNP_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1E100,
	0x1E12D,
	0x1E130,
	0x1E13E,
	0x1E140,
	0x1E14A,
	0x1E14E,
	0x1E150
};

static const UV UNI_HST__NA_invlist[] = {  /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1100,
	0x1200,
	0xA960,
	0xA97D,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC
};

static const UV UNI_HUNG_invlist[] = {  /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_HYPHEN_invlist[] = {  /* for ASCII/Latin1 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D,
	0x2E,
	0xAD,
	0xAE,
	0x58A,
	0x58B,
	0x1806,
	0x1807,
	0x2010,
	0x2012,
	0x2E17,
	0x2E18,
	0x30FB,
	0x30FC,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E,
	0xFF65,
	0xFF66
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_HYPHEN_invlist[] = {  /* for EBCDIC 1047 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0xCA,
	0xCB,
	0x58A,
	0x58B,
	0x1806,
	0x1807,
	0x2010,
	0x2012,
	0x2E17,
	0x2E18,
	0x30FB,
	0x30FC,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E,
	0xFF65,
	0xFF66
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_HYPHEN_invlist[] = {  /* for EBCDIC 037 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0xCA,
	0xCB,
	0x58A,
	0x58B,
	0x1806,
	0x1807,
	0x2010,
	0x2012,
	0x2E17,
	0x2E18,
	0x30FB,
	0x30FC,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E,
	0xFF65,
	0xFF66
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_IDC_invlist[] = {  /* for ASCII/Latin1 */
	1513,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xB7,
	0xB8,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x560,
	0x589,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5EF,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x7FD,
	0x7FE,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x870,
	0x888,
	0x889,
	0x88F,
	0x898,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0x9FE,
	0x9FF,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
