	0x10A40,
	0x10AE5,
	0x10AE7,
	0x10D24,
	0x10D28,
	0x10EAB,
	0x10EAD,
	0x10EFD,
	0x10F00,
	0x10F46,
	0x10F51,
	0x10F82,
	0x10F86,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x11070,
	0x11071,
	0x11073,
	0x11075,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110C2,
	0x110C3,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111C9,
	0x111CD,
	0x111CF,
	0x111D0,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x11241,
	0x11242,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133B,
	0x1133D,
	0x1133E,
	0x1133F,
	0x11340,
	0x11341,
	0x11357,
	0x11358,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x1145E,
	0x1145F,
	0x114B0,
	0x114B1,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115AF,
	0x115B0,
	0x115B2,
	0x115B6,
	0x115BC,
	0x115BE,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x11641,
	0x116AB,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x116B8,
	0x1171D,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1172C,
	0x1182F,
	0x11838,
	0x11839,
	0x1183B,
	0x11930,
	0x11931,
	0x1193B,
	0x1193D,
	0x1193E,
	0x1193F,
	0x11943,
	0x11944,
	0x119D4,
	0x119D8,
	0x119DA,
	0x119DC,
	0x119E0,
	0x119E1,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A39,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A57,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A97,
	0x11A98,
	0x11A9A,
	0x11C30,
	0x11C37,
	0x11C38,
	0x11C3E,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x11D90,
	0x11D92,
	0x11D95,
	0x11D96,
	0x11D97,
	0x11D98,
	0x11EF3,
	0x11EF5,
	0x11F00,
	0x11F02,
	0x11F36,
	0x11F3B,
	0x11F40,
	0x11F41,
	0x11F42,
	0x11F43,
	0x13440,
	0x13441,
	0x13447,
	0x13456,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F4F,
	0x16F50,
	0x16F8F,
	0x16F93,
	0x16FE4,
	0x16FE5,
	0x1BC9D,
	0x1BC9F,
	0x1CF00,
	0x1CF2E,
	0x1CF30,
	0x1CF47,
	0x1D165,
	0x1D166,
	0x1D167,
	0x1D16A,
	0x1D16E,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E08F,
	0x1E090,
	0x1E130,
	0x1E137,
	0x1E2AE,
	0x1E2AF,
	0x1E2EC,
	0x1E2F0,
	0x1E4EC,
	0x1E4F0,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0x1F3FB,
	0x1F400,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

static const UV UNI_GCB__L_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1100,
	0x1160,
	0xA960,
	0xA97D
};

static const UV UNI_GCB__PP_invlist[] = {  /* for all charsets */
	31,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x600,
	0x606,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x890,
	0x892,
	0x8E2,
	0x8E3,
	0xD4E,
	0xD4F,
	0x110BD,
	0x110BE,
	0x110CD,
	0x110CE,
	0x111C2,
	0x111C4,
	0x1193F,
	0x11940,
	0x11941,
	0x11942,
	0x11A3A,
	0x11A3B,
	0x11A84,
	0x11A8A,
	0x11D46,
	0x11D47,
	0x11F02,
	0x11F03
};

static const UV UNI_GCB__SM_invlist[] = {  /* for all charsets */
	331,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x903,
	0x904,
	0x93B,
	0x93C,
	0x93E,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x950,
	0x982,
	0x984,
	0x9BF,
	0x9C1,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0xA03,
	0xA04,
	0xA3E,
	0xA41,
	0xA83,
	0xA84,
	0xABE,
	0xAC1,
	0xAC9,
	0xACA,
	0xACB,
	0xACD,
	0xB02,
	0xB04,
	0xB40,
	0xB41,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xBBF,
	0xBC0,
	0xBC1,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xC01,
	0xC04,
	0xC41,
	0xC45,
	0xC82,
	0xC84,
	0xCBE,
	0xCBF,
	0xCC0,
	0xCC2,
	0xCC3,
	0xCC5,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xCF3,
	0xCF4,
	0xD02,
	0xD04,
	0xD3F,
	0xD41,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD82,
	0xD84,
	0xDD0,
	0xDD2,
	0xDD8,
	0xDDF,
	0xDF2,
	0xDF4,
	0xE33,
	0xE34,
	0xEB3,
	0xEB4,
	0xF3E,
	0xF40,
	0xF7F,
	0xF80,
	0x1031,
	0x1032,
	0x103B,
	0x103D,
	0x1056,
	0x1058,
	0x1084,
	0x1085,
	0x1715,
	0x1716,
	0x1734,
	0x1735,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x1923,
	0x1927,
	0x1929,
	0x192C,
	0x1930,
	0x1932,
	0x1933,
	0x1939,
	0x1A19,
	0x1A1B,
	0x1A55,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A6D,
	0x1A73,
	0x1B04,
	0x1B05,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B45,
	0x1B82,
	0x1B83,
	0x1BA1,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1BF4,
	0x1C24,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1CE1,
	0x1CE2,
	0x1CF7,
	0x1CF8,
	0xA823,
	0xA825,
	0xA827,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C4,
	0xA952,
	0xA954,
	0xA983,
	0xA984,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BE,
	0xA9C1,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA4D,
	0xAA4E,
	0xAAEB,
	0xAAEC,
	0xAAEE,
	0xAAF0,
	0xAAF5,
	0xAAF6,
	0xABE3,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABEB,
	0xABEC,
	0xABED,
	0x11000,
	0x11001,
	0x11002,
	0x11003,
	0x11082,
	0x11083,
	0x110B0,
	0x110B3,
	0x110B7,
	0x110B9,
	0x1112C,
	0x1112D,
	0x11145,
	0x11147,
	0x11182,
	0x11183,
	0x111B3,
	0x111B6,
	0x111BF,
	0x111C1,
	0x111CE,
	0x111CF,
	0x1122C,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x112E0,
	0x112E3,
	0x11302,
	0x11304,
	0x1133F,
	0x11340,
	0x11341,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11362,
	0x11364,
	0x11435,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x114B1,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x114C1,
	0x114C2,
	0x115B0,
	0x115B2,
	0x115B8,
	0x115BC,
	0x115BE,
	0x115BF,
	0x11630,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x11726,
	0x11727,
	0x1182C,
	0x1182F,
	0x11838,
	0x11839,
	0x11931,
	0x11936,
	0x11937,
	0x11939,
	0x1193D,
	0x1193E,
	0x11940,
	0x11941,
	0x11942,
	0x11943,
	0x119D1,
	0x119D4,
	0x119DC,
	0x119E0,
	0x119E4,
	0x119E5,
	0x11A39,
	0x11A3A,
	0x11A57,
	0x11A59,
	0x11A97,
	0x11A98,
	0x11C2F,
	0x11C30,
	0x11C3E,
	0x11C3F,
	0x11CA9,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB4,
	0x11CB5,
	0x11D8A,
	0x11D8F,
	0x11D93,
	0x11D95,
	0x11D96,
	0x11D97,
	0x11EF5,
	0x11EF7,
	0x11F03,
	0x11F04,
	0x11F34,
	0x11F36,
	0x11F3E,
	0x11F40,
	0x11F41,
	0x11F42,
	0x16F51,
	0x16F88,
	0x16FF0,
	0x16FF2,
	0x1D166,
	0x1D167,
	0x1D16D,
	0x1D16E
};

static const UV UNI_GCB__T_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11A8,
	0x1200,
	0xD7CB,
	0xD7FC
};

static const UV UNI_GCB__V_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1160,
	0x11A8,
	0xD7B0,
	0xD7C7
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_GCB__XX_invlist[] = {  /* for ASCII/Latin1 */
	658,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x7F,
	0xA0,
	0xAD,
	0xAE,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x600,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x7FD,
	0x7FE,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x890,
	0x892,
	0x898,
	0x8A0,
	0x8CA,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0x9FE,
	0x9FF,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB55,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC05,
	0xC3C,
	0xC3D,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xCF3,
	0xCF4,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD81,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE33,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB3,
	0xEBD,
	0xEC8,
	0xECF,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1038,
	0x1039,
	0x103F,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1084,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x1100,
	0x1200,
	0x135D,
	0x1360,
	0x1712,
	0x1716,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x1810,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ACF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1CD0,
	0x1CD3,
