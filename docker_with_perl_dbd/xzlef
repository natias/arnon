In versions 5.004_01 through 5.6.0, the error was

        In string, @example now must be written as \@example

The idea here was to get people into the habit of writing
C<"fred\@example.com"> when they wanted a literal C<@> sign, just as
they have always written C<"Give me back my \$5"> when they wanted a
literal C<$> sign.

Starting with 5.6.1, when Perl now sees an C<@> sign in a
double-quoted string, it I<always> attempts to interpolate an array,
regardless of whether or not the array has been used or declared
already.  The fatal error has been downgraded to an optional warning:

        Possible unintended interpolation of @example in string

This warns you that C<"fred@example.com"> is going to turn into
C<fred.com> if you don't backslash the C<@>.
See http://perl.plover.com/at-error.html for more details
about the history here.

=head2 Miscellaneous Changes

=over 4

=item *

AUTOLOAD is now lvaluable, meaning that you can add the :lvalue attribute
to AUTOLOAD subroutines and you can assign to the AUTOLOAD return value.

=item *

The $Config{byteorder} (and corresponding BYTEORDER in config.h) was
previously wrong in platforms if sizeof(long) was 4, but sizeof(IV)
was 8.  The byteorder was only sizeof(long) bytes long (1234 or 4321),
but now it is correctly sizeof(IV) bytes long, (12345678 or 87654321).
(This problem didn't affect Windows platforms.)

Also, $Config{byteorder} is now computed dynamically--this is more
robust with "fat binaries" where an executable image contains binaries
for more than one binary platform, and when cross-compiling.

=item *

C<perl -d:Module=arg,arg,arg> now works (previously one couldn't pass
in multiple arguments.)

=item *

C<do> followed by a bareword now ensures that this bareword isn't
a keyword (to avoid a bug where C<do q(foo.pl)> tried to call a
subroutine called C<q>).  This means that for example instead of
C<do format()> you must write C<do &format()>.

=item *

The builtin dump() now gives an optional warning
C<dump() better written as CORE::dump()>,
meaning that by default C<dump(...)> is resolved as the builtin
dump() which dumps core and aborts, not as (possibly) user-defined
C<sub dump>.  To call the latter, qualify the call as C<&dump(...)>.
(The whole dump() feature is to considered deprecated, and possibly
removed/changed in future releases.)

=item *

chomp() and chop() are now overridable.  Note, however, that their
prototype (as given by C<prototype("CORE::chomp")> is undefined,
because it cannot be expressed and therefore one cannot really write
replacements to override these builtins.

=item *

END blocks are now run even if you exit/die in a BEGIN block.
Internally, the execution of END blocks is now controlled by
PL_exit_flags & PERL_EXIT_DESTRUCT_END. This enables the new
behaviour for Perl embedders. This will default in 5.10. See
L<perlembed>.

=item *

Formats now support zero-padded decimal fields.

=item *

Although "you shouldn't do that", it was possible to write code that
depends on Perl's hashed key order (Data::Dumper does this).  The new
algorithm "One-at-a-Time" produces a different hashed key order.
More details are in L</"Performance Enhancements">.

=item *

lstat(FILEHANDLE) now gives a warning because the operation makes no sense.
In future releases this may become a fatal error.

=item *

Spurious syntax errors generated in certain situations, when glob()
caused File::Glob to be loaded for the first time, have been fixed. [561]

=item *

Lvalue subroutines can now return C<undef> in list context.  However,
the lvalue subroutine feature still remains experimental.  [561+]

=item *

A lost warning "Can't declare ... dereference in my" has been
restored (Perl had it earlier but it became lost in later releases.)

=item *

A new special regular expression variable has been introduced:
C<$^N>, which contains the most-recently closed group (submatch).

=item *

C<no Module;> does not produce an error even if Module does not have an
unimport() method.  This parallels the behavior of C<use> vis-a-vis
C<import>. [561]

=item *

The numerical comparison operators return C<undef> if either operand
is a NaN.  Previously the behaviour was unspecified.

=item *

C<our> can now have an experimental optional attribute C<unique> that
affects how global variables are shared among multiple interpreters,
see L<perlfunc/our>.

=item *

The following builtin functions are now overridable: each(), keys(),
pop(), push(), shift(), splice(), unshift(). [561]

=item *

C<pack() / unpack()> can now group template letters with C<()> and then
apply repetition/count modifiers on the groups.

=item *

C<pack() / unpack()> can now process the Perl internal numeric types:
IVs, UVs, NVs-- and also long doubles, if supported by the platform.
The template letters are C<j>, C<J>, C<F>, and C<D>.

=item *

C<pack('U0a*', ...)> can now be used to force a string to UTF-8.

=item *

my __PACKAGE__ $obj now works. [561]

=item *

POSIX::sleep() now returns the number of I<unslept> seconds
(as the POSIX standard says), as opposed to CORE::sleep() which
returns the number of slept seconds.

=item *

printf() and sprintf() now support parameter reordering using the
C<%\d+\$> and C<*\d+\$> syntaxes.  For example

    printf "%2\$s %1\$s\n", "foo", "bar";

will print "bar foo\n".  This feature helps in writing
internationalised software, and in general when the order
of the parameters can vary.

=item *

The (\&) prototype now works properly. [561]

=item *

prototype(\[$@%&]) is now available to implicitly create references
(useful for example if you want to emulate the tie() interface).

=item *

A new command-line option, C<-t> is available.  It is the
little brother of C<-T>: instead of dying on taint violations,
lexical warnings are given.  B<This is only meant as a temporary
debugging aid while securing the code of old legacy applications.
This is not a substitute for -T.>

=item *

In other taint news, the C<exec LIST> and C<system LIST> have now been
considered too risky (think C<exec @ARGV>: it can start any program
with any arguments), and now the said forms cause a warning under
lexical warnings.  You should carefully launder the arguments to
guarantee their validity.  In future releases of Perl the forms will
become fatal errors so consider starting laundering now.

=item *

Tied hash interfaces are now required to have the EXISTS and DELETE
methods (either own or inherited).

=item *

If tr/// is just counting characters, it doesn't attempt to
modify its target.

=item *

untie() will now call an UNTIE() hook if it exists.  See L<perltie>
for details. [561]

=item *

L<perlfunc/utime> now supports C<utime undef, undef, @files> to change the
file timestamps to the current time.

=item *

The rules for allowing underscores (underbars) in numeric constants
have been relaxed and simplified: now you can have an underscore
simply B<between digits>.

=item *

Rather than relying on C's argv[0] (which may not contain a full pathname)
where possible $^X is now set by asking the operating system.
(eg by reading F</proc/self/exe> on Linux, F</proc/curproc/file> on FreeBSD)

=item *

A new variable, C<${^TAINT}>, indicates whether taint mode is enabled.

=item *

You can now override the readline() builtin, and this overrides also
the <FILEHANDLE> angle bracket operator.

=item *

The command-line options -s and -F are now recognized on the shebang
(#!) line.

=item *

Use of the C</c> match modifier without an accompanying C</g> modifier
elicits a new warning: C<Use of /c modifier is meaningless without /g>.

Use of C</c> in substitutions, even with C</g>, elicits
C<Use of /c modifier is meaningless in s///>.

Use of C</g> with C<split> elicits C<Use of /g modifier is meaningless
in split>.

=item *

Support for the C<CLONE> special subroutine had been added.
With ithreads, when a new thread is created, all Perl data is cloned,
however non-Perl data cannot be cloned automatically.  In C<CLONE> you
can do whatever you need to do, like for example handle the cloning of
non-Perl data, if necessary.  C<CLONE> will be executed once for every
package that has it defined or inherited.  It will be called in the
context of the new thread, so all modifications are made in the new area.

See L<perlmod>

=back

=head1 Modules and Pragmata

=head2 New Modules and Pragmata

=over 4

=item *

C<Attribute::Handlers>, originally by Damian Conway and now maintained
by Arthur Bergman, allows a class to define attribute handlers.

    package MyPack;
    use Attribute::Handlers;
    sub Wolf :ATTR(SCALAR) { print "howl!\n" }

    # later, in some package using or inheriting from MyPack...

    my MyPack $Fluffy : Wolf; # the attribute handler Wolf will be called

Both variables and routines can have attribute handlers.  Handlers can
be specific to type (SCALAR, ARRAY, HASH, or CODE), or specific to the
exact compilation phase (BEGIN, CHECK, INIT, or END).
See L<Attribute::Handlers>.

=item *

C<B::Concise>, by Stephen McCamant, is a new compiler backend for
walking the Perl syntax tree, printing concise info about ops.
The output is highly customisable.  See L<B::Concise>. [561+]

=item *

The new bignum, bigint, and bigrat pragmas, by Tels, implement
transparent bignum support (using the Math::BigInt, Math::BigFloat,
and Math::BigRat backends).

=item *

C<Class::ISA>, by Sean Burke, is a module for reporting the search
path for a class's ISA tree.  See L<Class::ISA>.

=item *

C<Cwd> now has a split personality: if possible, an XS extension is
used, (this will hopefully be faster, more secure, and more robust)
but if not possible, the familiar Perl implementation is used.

=item *

C<Devel::PPPort>, originally by Kenneth Albanowski and now
maintained by Paul Marquess, has been added.  It is primarily used
by C<h2xs> to enhance portability of XS modules between different
versions of Perl.  See L<Devel::PPPort>.

=item *

C<Digest>, frontend module for calculating digests (checksums), from
Gisle Aas, has been added.  See L<Digest>.

=item *

C<Digest::MD5> for calculating MD5 digests (checksums) as defined in
RFC 1321, from Gisle Aas, has been added.  See L<Digest::MD5>.

    use Digest::MD5 'md5_hex';

    $digest = md5_hex("Thirsty Camel");

    print $digest, "\n"; # 01d19d9d2045e005c3f1b80e8b164de1

NOTE: the C<MD5> backward compatibility module is deliberately not
included since its further use is discouraged.

See also L<PerlIO::via::QuotedPrint>.

=item *

C<Encode>, originally by Nick Ing-Simmons and now maintained by Dan
Kogai, provides a mechanism to translate between different character
encodings.  Support for Unicode, ISO-8859-1, and ASCII are compiled in
to the module.  Several other encodings (like the rest of the
ISO-8859, CP*/Win*, Mac, KOI8-R, three variants EBCDIC, Chinese,
Japanese, and Korean encodings) are included and can be loaded at
runtime.  (For space considerations, the largest Chinese encodings
have been separated into their own CPAN module, Encode::HanExtra,
which Encode will use if available).  See L<Encode>.

Any encoding supported by Encode module is also available to the
":encoding()" layer if PerlIO is used.

=item *

C<Hash::Util> is the interface to the new I<restricted hashes>
feature.  (Implemented by Jeffrey Friedl, Nick Ing-Simmons, and
Michael Schwern.)  See L<Hash::Util>.

=item *

C<I18N::Langinfo> can be used to query locale information.
See L<I18N::Langinfo>.

=item *

C<I18N::LangTags>, by Sean Burke, has functions for dealing with
RFC3066-style language tags.  See L<I18N::LangTags>.

=item *

C<ExtUtils::Constant>, by Nicholas Clark, is a new tool for extension
writers for generating XS code to import C header constants.
See L<ExtUtils::Constant>.

=item *

C<Filter::Simple>, by Damian Conway, is an easy-to-use frontend to
Filter::Util::Call.  See L<Filter::Simple>.

    # in MyFilter.pm:

    package MyFilter;

    use Filter::Simple sub {
        while (my ($from, $to) = splice @_, 0, 2) {
                s/$from/$to/g;
        }
    };

    1;

    # in user's code:

    use MyFilter qr/red/ => 'green';

    print "red\n";   # this code is filtered, will print "green\n"
    print "bored\n"; # this code is filtered, will print "bogreen\n"

    no MyFilter;

    print "red\n";   # this code is not filtered, will print "red\n"

=item *

C<File::Temp>, by Tim Jenness, allows one to create temporary files
and directories in an easy, portable, and secure way.  See L<File::Temp>.
[561+]

=item *

C<Filter::Util::Call>, by Paul Marquess, provides you with the
framework to write I<source filters> in Perl.  For most uses, the
frontend Filter::Simple is to be preferred.  See L<Filter::Util::Call>.

=item *

C<if>, by Ilya Zakharevich, is a new pragma for conditional inclusion
of modules.

=item *

L<libnet>, by Graham Barr, is a collection of perl5 modules related
to network programming.  See L<Net::FTP>, L<Net::NNTP>, L<Net::Ping>
(not part of libnet, but related), L<Net::POP3>, L<Net::SMTP>,
and L<Net::Time>.

Perl installation leaves libnet unconfigured; use F<libnetcfg>
to configure it.

=item *

C<List::Util>, by Graham Barr, is a selection of general-utility
list subroutines, such as sum(), min(), first(), and shuffle().
See L<List::Util>.

=item *

C<Locale::Constants>, C<Locale::Country>, C<Locale::Currency>
C<Locale::Language>, and L<Locale::Script>, by Neil Bowers, have
been added.  They provide the codes for various locale standards, such
as "fr" for France, "usd" for US Dollar, and "ja" for Japanese.

    use Locale::Country;

    $country = code2country('jp');               # $country gets 'Japan'
    $code    = country2code('Norway');           # $code gets 'no'

See L<Locale::Constants>, L<Locale::Country>, L<Locale::Currency>,
and L<Locale::Language>.

=item *

C<Locale::Maketext>, by Sean Burke, is a localization framework.  See
L<Locale::Maketext>, and L<Locale::Maketext::TPJ13>.  The latter is an
article about software localization, originally published in The Perl
Journal #13, and republished here with kind permission.

=item *

C<Math::BigRat> for big rational numbers, to accompany Math::BigInt and
Math::BigFloat, from Tels.  See L<Math::BigRat>.

=item *

C<Memoize> can make your functions faster by trading space for time,
from Mark-Jason Dominus.  See L<Memoize>.

=item *

C<MIME::Base64>, by Gisle Aas, allows you to encode data in base64,
as defined in RFC 2045 - I<MIME (Multipurpose Internet Mail
Extensions)>.

    use MIME::Base64;

    $encoded = encode_base64('Aladdin:open sesame');
    $decoded = decode_base64($encoded);

    print $encoded, "\n"; # "QWxhZGRpbjpvcGVuIHNlc2FtZQ=="

See L<MIME::Base64>.

=item *

C<MIME::QuotedPrint>, by Gisle Aas, allows you to encode data
in quoted-printable encoding, as defined in RFC 2045 - I<MIME
(Multipurpose Internet Mail Extensions)>.

    use MIME::QuotedPrint;

    $encoded = encode_qp("\xDE\xAD\xBE\xEF");
    $decoded = decode_qp($encoded);

    print $encoded, "\n"; # "=DE=AD=BE=EF\n"
    print $decoded, "\n"; # "\xDE\xAD\xBE\xEF\n"

See also L<PerlIO::via::QuotedPrint>.

=item *

C<NEXT>, by Damian Conway, is a pseudo-class for method redispatch.
See L<NEXT>.

=item *

C<open> is a new pragma for setting the default I/O layers
for open().

=item *

C<PerlIO::scalar>, by Nick Ing-Simmons, provides the implementation
of IO to "in memory" Perl scalars as discussed above.  It also serves
as an example of a loadable PerlIO layer.  Other future possibilities
include PerlIO::Array and PerlIO::Code.  See L<PerlIO::scalar>.

=item *

C<PerlIO::via>, by Nick Ing-Simmons, acts as a PerlIO layer and wraps
PerlIO layer functionality provided by a class (typically implemented
in Perl code).

=item *

C<PerlIO::via::QuotedPrint>, by Elizabeth Mattijsen, is an example
of a C<PerlIO::via> class:

    use PerlIO::via::QuotedPrint;
    open($fh,">:via(QuotedPrint)",$path);

This will automatically convert everything output to C<$fh> to
Quoted-Printable.  See L<PerlIO::via> and L<PerlIO::via::QuotedPrint>.

=item *

C<Pod::ParseLink>, by Russ Allbery, has been added,
to parse LZ<><> links in pods as described in the new
perlpodspec.

=item *

C<Pod::Text::Overstrike>, by Joe Smith, has been added.
It converts POD data to formatted overstrike text.
See L<Pod::Text::Overstrike>. [561+]

=item *

C<Scalar::Util> is a selection of general-utility scalar subroutines,
such as blessed(), reftype(), and tainted().  See L<Scalar::Util>.

=item *

C<sort> is a new pragma for controlling the behaviour of sort().

=item *

C<Storable> gives persistence to Perl data structures by allowing the
storage and retrieval of Perl data to and from files in a fast and
compact binary format.  Because in effect Storable does serialisation
of Perl data structures, with it you can also clone deep, hierarchical
datastructures.  Storable was originally created by Raphael Manfredi,
but it is now maintained by Abhijit Menon-Sen.  Storable has been
enhanced to understand the two new hash features, Unicode keys and
restricted hashes.  See L<Storable>.

=item *

C<Switch>, by Damian Conway, has been added.  Just by saying

    use Switch;

you have C<switch> and C<case> available in Perl.

    use Switch;

    switch ($val) {

		case 1		{ print "number 1" }
		case "a"	{ print "string a" }
		case [1..10,42]	{ print "number in list" }
		case (@array)	{ print "number in list" }
		case /\w+/	{ print "pattern" }
		case qr/\w+/	{ print "pattern" }
		case (%hash)	{ print "entry in hash" }
		case (\%hash)	{ print "entry in hash" }
		case (\&sub)	{ print "arg to subroutine" }
		else		{ print "previous case not true" }
    }

See L<Switch>.

=item *

C<Test::More>, by Michael Schwern, is yet another framework for writing
test scripts, more extensive than Test::Simple.  See L<Test::More>.

=item *

C<Test::Simple>, by Michael Schwern, has basic utilities for writing
tests.   See L<Test::Simple>.

=item *

C<Text::Balanced>, by Damian Conway, has been added, for extracting
delimited text sequences from strings.

    use Text::Balanced 'extract_delimited';

    ($a, $b) = extract_delimited("'never say never', he never said", "'", '');

$a will be "'never say never'", $b will be ', he never said'.

In addition to extract_delimited(), there are also extract_bracketed(),
extract_quotelike(), extract_codeblock(), extract_variable(),
extract_tagged(), extract_multiple(), gen_delimited_pat(), and
gen_extract_tagged().  With these, you can implement rather advanced
parsing algorithms.  See L<Text::Balanced>.

=item *

C<threads>, by Arthur Bergman, is an interface to interpreter threads.
Interpreter threads (ithreads) is the new thread model introduced in
Perl 5.6 but only available as an internal interface for extension
writers (and for Win32 Perl for C<fork()> emulation).  See L<threads>,
L<threads::shared>, and L<perlthrtut>.

=item *

C<threads::shared>, by Arthur Bergman, allows data sharing for
interpreter threads.  See L<threads::shared>.

=item *

C<Tie::File>, by Mark-Jason Dominus, associates a Perl array with the
lines of a file.  See L<Tie::File>.

=item *

C<Tie::Memoize>, by Ilya Zakharevich, provides on-demand loaded hashes.
See L<Tie::Memoize>.

=item *

C<Tie::RefHash::Nestable>, by Edward Avis, allows storing hash
references (unlike the standard Tie::RefHash)  The module is contained
within Tie::RefHash.  See L<Tie::RefHash>.

=item *

C<Time::HiRes>, by Douglas E. Wegscheid, provides high resolution
timing (ualarm, usleep, and gettimeofday).  See L<Time::HiRes>.

=item *

C<Unicode::UCD> offers a querying interface to the Unicode Character
Database.  See L<Unicode::UCD>.

=item *

C<Unicode::Collate>, by SADAHIRO Tomoyuki, implements the UCA
(Unicode Collation Algorithm) for sorting Unicode strings.
See L<Unicode::Collate>.

=item *

C<Unicode::Normalize>, by SADAHIRO Tomoyuki, implements the various
Unicode normalization forms.  See L<Unicode::Normalize>.

=item *

C<XS::APItest>, by Tim Jenness, is a test extension that exercises XS
APIs.  Currently only C<printf()> is tested: how to output various
basic data types from XS.

=item *

C<XS::Typemap>, by Tim Jenness, is a test extension that exercises
XS typemaps.  Nothing gets installed, but the code is worth studying
for extension writers.

=back

=head2 Updated And Improved Modules and Pragmata

=over 4

=item *

The following independently supported modules have been updated to the
newest versions from CPAN: CGI, CPAN, DB_File, File::Spec, File::Temp,
Getopt::Long, Math::BigFloat, Math::BigInt, the podlators bundle
(Pod::Man, Pod::Text), Pod::LaTeX [561+], Pod::Parser, Storable,
Term::ANSIColor, Test, Text-Tabs+Wrap.

=item *

attributes::reftype() now works on tied arguments.

=item *

AutoLoader can now be disabled with C<no AutoLoader;>.

=item *

B::Deparse has been significantly enhanced by Robin Houston.  It can
now deparse almost all of the standard test suite (so that the tests
still succeed).  There is a make target "test.deparse" for trying this
out.

=item *

Carp now has better interface documentation, and the @CARP_NOT
interface has been added to get optional control over where errors
are reported independently of @ISA, by Ben Tilly.

=item *

Class::Struct can now define the classes in compile time.

=item *

Class::Struct now assigns the array/hash element if the accessor
is called with an array/hash element as the B<sole> argument.

=item *

The return value of Cwd::fastcwd() is now tainted.

=item *

Data::Dumper now has an option to sort hashes.

=item *

Data::Dumper now has an option to dump code references
using B::Deparse.

=item *

DB_File now supports newer Berkeley DB versions, among
other improvements.

=item *

Devel::Peek now has an interface for the Perl memory statistics
(this works only if you are using perl's malloc, and if you have
compiled with debugging).

=item *

The English module can now be used without the infamous performance
hit by saying

	use English '-no_match_vars';

(Assuming, of course, that you don't need the troublesome variables
C<$`>, C<$&>, or C<$'>.)  Also, introduced C<@LAST_MATCH_START> and
C<@LAST_MATCH_END> English aliases for C<@-> and C<@+>.

=item *

ExtUtils::MakeMaker has been significantly cleaned up and fixed.
The enhanced version has also been backported to earlier releases
of Perl and submitted to CPAN so that the earlier releases can
enjoy the fixes.

=item *

The arguments of WriteMakefile() in Makefile.PL are now checked
for sanity much more carefully than before.  This may cause new
warnings when modules are being installed.  See L<ExtUtils::MakeMaker>
for more details.

=item *

ExtUtils::MakeMaker now uses File::Spec internally, which hopefully
leads to better portability.

=item *

Fcntl, Socket, and Sys::Syslog have been rewritten by Nicholas Clark
to use the new-style constant dispatch section (see L<ExtUtils::Constant>).
This means that they will be more robust and hopefully faster.

=item *

File::Find now chdir()s correctly when chasing symbolic links. [561]

=item *

File::Find now has pre- and post-processing callbacks.  It also
correctly changes directories when chasing symbolic links.  Callbacks
(naughtily) exiting with "next;" instead of "return;" now work.

=item *

File::Find is now (again) reentrant.  It also has been made
more portable.

=item *

The warnings issued by File::Find now belong to their own category.
You can enable/disable them with C<use/no warnings 'File::Find';>.

=item *

File::Glob::glob() has been renamed to File::Glob::bsd_glob()
because the name clashes with the builtin glob().  The older
name is still available for compatibility, but is deprecated. [561]

=item *

File::Glob now supports C<GLOB_LIMIT> constant to limit the size of
the returned list of filenames.

=item *

IPC::Open3 now allows the use of numeric file descriptors.

=item *

IO::Socket now has an atmark() method, which returns true if the socket
is positioned at the out-of-band mark.  The method is also exportable
as a sockatmark() function.

=item *

IO::Socket::INET failed to open the specified port if the service name
was not known.  It now correctly uses the supplied port number as is. [561]

=item *

IO::Socket::INET has support for the ReusePort option (if your
platform supports it).  The Reuse option now has an alias, ReuseAddr.
For clarity, you may want to prefer ReuseAddr.

=item *

IO::Socket::INET now supports a value of zero for C<LocalPort>
(usually meaning that the operating system will make one up.)

=item *

'use lib' now works identically to @INC.  Removing directories
with 'no lib' now works.

=item *

Math::BigFloat and Math::BigInt have undergone a full rewrite by Tels.
They are now magnitudes faster, and they support various bignum
libraries such as GMP and PARI as their backends.

=item *

Math::Complex handles inf, NaN etc., better.

=item *

Net::Ping has been considerably enhanced by Rob Brown: multihoming is
now supported, Win32 functionality is better, there is now time
measuring functionality (optionally high-resolution using
Time::HiRes), and there is now "external" protocol which uses
Net::Ping::External module which runs your external ping utility and
parses the output.  A version of Net::Ping::External is available in
CPAN.

Note that some of the Net::Ping tests are disabled when running
under the Perl distribution since one cannot assume one or more
of the following: enabled echo port at localhost, full Internet
connectivity, or sympathetic firewalls.  You can set the environment
variable PERL_TEST_Net_Ping to "1" (one) before running the Perl test
suite to enable all the Net::Ping tests.

=item *

POSIX::sigaction() is now much more flexible and robust.
You can now install coderef handlers, 'DEFAULT', and 'IGNORE'
handlers, installing new handlers was not atomic.

=item *

In Safe, C<%INC> is now localised in a Safe compartment so that
use/require work.

=item *

In SDBM_File on DOSish platforms, some keys went missing because of
lack of support for files with "holes".  A workaround for the problem
has been added.

=item *

In Search::Dict one can now have a pre-processing hook for the
lines being searched.

=item *

The Shell module now has an OO interface.

=item *

In Sys::Syslog there is now a failover mechanism that will go
through alternative connection mechanisms until the message
is successfully logged.

=item *

The Test module has been significantly enhanced.

=item *

Time::Local::timelocal() does not handle fractional seconds anymore.
The rationale is that neither does localtime(), and timelocal() and
localtime() are supposed to be inverses of each other.

=item *

The vars pragma now supports declaring fully qualified variables.
(Something that C<our()> does not and will not support.)

=item *

The C<utf8::> name space (as in the pragma) provides various
Perl-callable functions to provide low level access to Perl's
internal Unicode representation.  At the moment only length()
has been implemented.

=back

=head1 Utility Changes

=over 4

=item *

Emacs perl mode (emacs/cperl-mode.el) has been updated to version
4.31.

=item *

F<emacs/e2ctags.pl> is now much faster.

=item *

C<enc2xs> is a tool for people adding their own encodings to the
Encode module.

=item *

C<h2ph> now supports C trigraphs.

=item *

C<h2xs> now produces a template README.

=item *

C<h2xs> now uses C<Devel::PPPort> for better portability between
different versions of Perl.

=item *

C<h2xs> uses the new L<ExtUtils::Constant|ExtUtils::Constant> module
which will affect newly created extensions that define constants.
Since the new code is more correct (if you have two constants where the
first one is a prefix of the second one, the first constant B<never>
got defined), less lossy (it uses integers for integer constant,
as opposed to the old code that used floating point numbers even for
integer constants), and slightly faster, you might want to consider
regenerating your extension code (the new scheme makes regenerating
easy).  L<h2xs> now also supports C trigraphs.

=item *

C<libnetcfg> has been added to configure libnet.

=item *

C<perlbug> is now much more robust.  It also sends the bug report to
perl.org, not perl.com.

=item *

C<perlcc> has been rewritten and its user interface (that is,
command line) is much more like that of the Unix C compiler, cc.
(The perlbc tools has been removed.  Use C<perlcc -B> instead.)
B<Note that perlcc is still considered very experimental and
unsupported.> [561]

=item *

C<perlivp> is a new Installation Verification Procedure utility
for running any time after installing Perl.
