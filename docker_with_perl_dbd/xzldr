
=item *

Make C<use 5.036> respect the -X flag

perl's -X flag disables all warnings globally, but «use 5.036» didn't
respect that until now. [L<GH #21431|https://github.com/Perl/perl5/issues/21431>]

=item *

Fixed an OP leak when an error was produced for initializer for a class
field. [L<GH #20812|https://github.com/Perl/perl5/issues/20812>]

=item *

Fixed a leak of the return value when smartmatching against a code reference.

=item *

Fixed a slowdown in repeated substitution replacements using special
variables, such as C<s/....x$1/g>. It actually makes all string
concatenations involving such "magic" variables less slow, but the
slowdown was more noticeable on repeated substitutions due to extra memory
usage that was only freed after the last iteration. The slowdown started
in perl 5.28.0 - which generally sped up string concatenation but slowed
down when using special variables.
[L<GH #21360|https://github.com/Perl/perl5/issues/21360>]

=item *

Lexical names from the enclosing scope in a lexical sub or closure
weren't visible to code executed by calling C<eval EXPR;> from the
C<DB> package.  This was introduced in 5.18 in an attempt to prevent
subs from retaining a reference to their outer scope, but this broke
the special behaviour of C<eval EXPR;> in package DB.

This incidentally fixed a TODO test for C<B::Deparse>.
[L<GH #19370|https://github.com/Perl/perl5/pull/19370>]

=item *

Optionally support an argument stack over 2**32 entries on 64-bit
platforms.  This requires 32GB of memory just for the argument stack
pointers itself, so you will require a significantly more memory to
take advantage of this.

To enable this add C<-Accflags=-DPERL_STACK_OFFSET_SSIZET> or
equivalent to the C<Configure> command-line.

[L<GH #20917|https://github.com/Perl/perl5/issues/20917>]
[L<GH #21523|https://github.com/Perl/perl5/issues/21523>]

=item *

Fixed various problems with join() where modifications to the
separator could be handled inconsistently, or could access released
memory.  Changes to the separator from magic or overloading for values
in the C<LIST> no longer have an effect on the resulting joined
string.
[L<GH #21458|https://github.com/Perl/perl5/issues/21458>]

=item *

Don't clear the integer flag C<IOK> from lines in the C<<
@{"_<$sourcefile"} >> array when a C<dbstate> op is removed for that
line.  This was broken when fixing
[L<GH #19198|https://github.com/Perl/perl5/issues/19198>].
[L<GH #21564|https://github.com/Perl/perl5/issues/21564>]

=item *

Many bug fixes have been made for using locales under threads and in
embedded perls.  And workarounds for libc bugs have been added.  As a
result thread-safe locale handling is now the default under OpenBSD, and
MingW when compiled with UCRT.

However, testing has shown that Darwin's implementation of thread-safe
locale handling has bugs.  So now Perl doesn't attempt to use the
thread-safe operations when compiled on Darwin.

As before, you can check to see if your program is running with
thread-safe locales by checking if the value of C<${^SAFE_LOCALES}> is
1.

=item *

Various bugs have been fixed when perl is configured with
C<-Accflags=-DNO_LOCALE_NUMERIC> or any other locale category (or
categories).

=item *

Not all locale categories need be set to the same locale.  Perl now
works around bugs in the libc implementations of locale handling on some
platforms that previously could result in mojibake.

=item *

C<LC_ALL> is represented in one of two ways when not all locale
categories are set to the same locale.  On some platforms, such as Linux
and Windows, the representation is of the form of a series of
C<'category=locale-name'> pairs.  On other platforms, such as *BSD, the
representation is positional like S<C<I<name1> / I<name2> / ... >>.
I<name1> is always for a particular category as defined by the platform,
as are the other names.  The sequence that separates the names
(the S<C< / >> above) also varies by platform.  Previously, perl had
problems with platforms that used the positional notation.  This is now
fixed.

=item *

A bug has been fixed in the regexp engine with an optimisation that applies
to the C<+> quantifier where it was followed by a C<(*SKIP)> pattern.

[L<GH #21534|https://github.com/Perl/perl5/issues/21534>]

=item *

The tmps (mortal) stack now grows exponentially.  Previously it grew
linearly, so if it was growing incrementally, such as through many
calls to sv_2mortal(), on a system where realloc() is O(size), the
performance would be O(n*n).  With exponential grows this changes to
amortized O(n).  [L<GH #21654|https://github.com/Perl/perl5/issues/21654>]

=item *

Lexical subs now have a new stub in the pad for each recursive call
into the containing function.  This fixes two problems:

=over

=item *

If the lexical sub called the containing function, a "Can't undef
active subroutine" error would be thrown.  For example:

    use v5.36.0;
    sub outer($oc) {
        my sub inner ($c) {
             outer($c-1) if $c; # Can't undef active subroutine
        }
        inner($oc);
    }
    outer(2);

[L<GH #18606|https://github.com/Perl/perl5/issues/18606>]

=item *

If the lexical sub was called from a recursive call into the
containing function, this would overwrite the bindings to the closed
over variables in the lexical sub, so calls into the lexical sub from
the outer recursive call would have access to the variables from the
inner recursive call:

    use v5.36.0;
    sub outer ($x) {
        my sub inner ($label) {
            say "$label $x";
        }
        inner("first");
        outer("inner") if $x eq "outer";
        # this call to inner() sees the wrong $x
        inner("second");
    }
    outer("outer");

[L<GH #21987|https://github.com/Perl/perl5/issues/21987>]

=back

=item *

prepare_export_lexical() was separately saving C<PL_comppad> and
C<PL_curpad>, this could result in C<PL_curpad> being restored to a no
longer valid value, resulting in a panic when importing lexicals in
some cases.  [L<GH #21981|https://github.com/Perl/perl5/issues/21981>]

=item *

A string eval() operation in the scope of a C<use VERSION> declaration would
sometimes emit spurious "Downgrading a use VERSION declaration" warnings due
to an inconsistency in the way the version number was stored.  This is now
fixed.
[L<GH #22121|https://github.com/Perl/perl5/issues/22121>]

=back

=head1 Known Problems

=over 4

=item * perlivp is missing streamzip on Windows

The C<streamzip> utility does not get installed on Windows but should
get installed.

=back

=head1 Errata From Previous Releases

=over 4

=item *

L<perl5300delta> has been updated to include the removal of the C<arybase> module that happened at
the same time as the removal of C<$[>.

=back

=head1 Acknowledgements

Perl 5.40.0 represents approximately 11 months of development since Perl
5.38.0 and contains approximately 160,000 lines of changes across 1,500
files from 75 authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 110,000 lines of changes to 1,200 .pm, .t, .c and .h files.

Perl continues to flourish into its fourth decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.40.0:

Abe Timmerman, Alexander Kanavin, Amory Meltzer, Aristotle Pagaltzis, Arne
Johannessen, Beckett Normington, Bernard Quatermass, Bernd, Bruno Meneguele,
Chad Granum, Chris 'BinGOs' Williams, Christoph Lamprecht, Craig A. Berry,
Dagfinn Ilmari Mannsåker, Dan Book, Dan Church, Daniel Böhmer, Dan
Jacobson, Dan Kogai, David Golden, David Mitchell, E. Choroba, Elvin
Aslanov, Erik Huelsmann, Eugen Konkov, Gianni Ceccarelli, Graham Knop, Greg
Kennedy, guoguangwu, Hauke D, H.Merijn Brand, Hugo van der Sanden, iabyn,
Jake Hamby, Jakub Wilk, James E Keenan, James Raspass, Joe McMahon, Johan
Vromans, John Karr, Karen Etheridge, Karl Williamson, Leon Timmermans, Lukas
Mai, Marco Fontani, Marek Rouchal, Martijn Lievaart, Mathias Kende, Matthew
Horsfall, Max Maischein, Nicolas Mendoza, Nicolas R, OpossumPetya, Paul
Evans, Paul Marquess, Peter John Acklam, Philippe Bruhat (BooK), Raul E
Rangel, Renee Baecker, Ricardo Signes, Richard Leach, Scott Baker, Sevan
Janiyan, Sisyphus, Steve Hay, TAKAI Kousuke, Todd Rinaldo, Tomasz Konojacki,
Tom Hughes, Tony Cook, William Lyu, x-yuri, Yves Orton, Zakariyya Mughal,
Дилян Палаузов.

The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not include
the names of the (very much appreciated) contributors who reported issues to
the Perl bug tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please
see the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://github.com/Perl/perl5/issues>.  There may also be information at
L<https://www.perl.org/>, the Perl Home Page.

If you believe you have an unreported bug, please open an issue at
L<https://github.com/Perl/perl5/issues>.  Be sure to trim your bug down to a
tiny but sufficient test case.

If the bug you are reporting has security implications which make it
inappropriate to send to a public issue tracker, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
                                                                                                         usr/local/lib/perl5/5.40.0/pod/perl561delta.pod                                                     0000644 0000000 0000000 00000363443 14714567415 017221  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

perl561delta - what's new for perl v5.6.1

=head1 DESCRIPTION

This document describes differences between the 5.005 release and the 5.6.1
release.

=head1 Summary of changes between 5.6.0 and 5.6.1

This section contains a summary of the changes between the 5.6.0 release
and the 5.6.1 release.  More details about the changes mentioned here
may be found in the F<Changes> files that accompany the Perl source
distribution.  See L<perlhack> for pointers to online resources where you
can inspect the individual patches described by these changes.

=head2 Security Issues

suidperl will not run /bin/mail anymore, because some platforms have
a /bin/mail that is vulnerable to buffer overflow attacks.

Note that suidperl is neither built nor installed by default in
any recent version of perl.  Use of suidperl is highly discouraged.
If you think you need it, try alternatives such as sudo first.
See http://www.courtesan.com/sudo/ .

=head2 Core bug fixes

This is not an exhaustive list.  It is intended to cover only the
significant user-visible changes.

=over

=item C<UNIVERSAL::isa()>

A bug in the caching mechanism used by C<UNIVERSAL::isa()> that affected
base.pm has been fixed.  The bug has existed since the 5.005 releases,
but wasn't tickled by base.pm in those releases.

=item Memory leaks

Various cases of memory leaks and attempts to access uninitialized memory
have been cured.  See L</"Known Problems"> below for further issues.

=item Numeric conversions

Numeric conversions did not recognize changes in the string value
properly in certain circumstances.

In other situations, large unsigned numbers (those above 2**31) could
sometimes lose their unsignedness, causing bogus results in arithmetic
operations.

Integer modulus on large unsigned integers sometimes returned
incorrect values.

Perl 5.6.0 generated "not a number" warnings on certain conversions where
previous versions didn't.

These problems have all been rectified.

Infinity is now recognized as a number.

=item qw(a\\b)

In Perl 5.6.0, qw(a\\b) produced a string with two backslashes instead
of one, in a departure from the behavior in previous versions.  The
older behavior has been reinstated.  

=item caller()

caller() could cause core dumps in certain situations.  Carp was sometimes
affected by this problem.

=item Bugs in regular expressions

Pattern matches on overloaded values are now handled correctly.

Perl 5.6.0 parsed m/\x{ab}/ incorrectly, leading to spurious warnings.
This has been corrected.

The RE engine found in Perl 5.6.0 accidentally pessimised certain kinds
of simple pattern matches.  These are now handled better.

Regular expression debug output (whether through C<use re 'debug'>
or via C<-Dr>) now looks better.

Multi-line matches like C<"a\nxb\n" =~ /(?!\A)x/m> were flawed.  The
bug has been fixed.

Use of $& could trigger a core dump under some situations.  This
is now avoided.

Match variables $1 et al., weren't being unset when a pattern match
was backtracking, and the anomaly showed up inside C</...(?{ ... }).../>
etc.  These variables are now tracked correctly.

pos() did not return the correct value within s///ge in earlier
versions.  This is now handled correctly.

=item "slurp" mode

readline() on files opened in "slurp" mode could return an extra "" at
the end in certain situations.  This has been corrected.

=item Autovivification of symbolic references to special variables

Autovivification of symbolic references of special variables described
in L<perlvar> (as in C<${$num}>) was accidentally disabled.  This works
again now.

=item Lexical warnings 

Lexical warnings now propagate correctly into C<eval "...">.

C<use warnings qw(FATAL all)> did not work as intended.  This has been
corrected.

Lexical warnings could leak into other scopes in some situations.
This is now fixed.

warnings::enabled() now reports the state of $^W correctly if the caller
isn't using lexical warnings.

=item Spurious warnings and errors

Perl 5.6.0 could emit spurious warnings about redefinition of dl_error()
when statically building extensions into perl.  This has been corrected.

"our" variables could result in bogus "Variable will not stay shared"
warnings.  This is now fixed.

"our" variables of the same name declared in two sibling blocks
resulted in bogus warnings about "redeclaration" of the variables.
The problem has been corrected.

=item glob()

Compatibility of the builtin glob() with old csh-based glob has been
improved with the addition of GLOB_ALPHASORT option.  See C<File::Glob>.

File::Glob::glob() has been renamed to File::Glob::bsd_glob()
because the name clashes with the builtin glob().  The older
name is still available for compatibility, but is deprecated.

Spurious syntax errors generated in certain situations, when glob()
caused File::Glob to be loaded for the first time, have been fixed.

=item Tainting

Some cases of inconsistent taint propagation (such as within hash
values) have been fixed.

The tainting behavior of sprintf() has been rationalized.  It does
not taint the result of floating point formats anymore, making the
behavior consistent with that of string interpolation.

=item sort()

Arguments to sort() weren't being provided the right wantarray() context.
The comparison block is now run in scalar context, and the arguments to
be sorted are always provided list context.

sort() is also fully reentrant, in the sense that the sort function
can itself call sort().  This did not work reliably in previous releases.

=item #line directives

#line directives now work correctly when they appear at the very
beginning of C<eval "...">.

=item Subroutine prototypes

The (\&) prototype now works properly.

=item map()

map() could get pathologically slow when the result list it generates
is larger than the source list.  The performance has been improved for
common scenarios.

=item Debugger

Debugger exit code now reflects the script exit code.

Condition C<"0"> in breakpoints is now treated correctly.

The C<d> command now checks the line number.

C<$.> is no longer corrupted by the debugger.

All debugger output now correctly goes to the socket if RemotePort
is set.

=item PERL5OPT

PERL5OPT can be set to more than one switch group.  Previously,
it used to be limited to one group of options only.

=item chop()

chop(@list) in list context returned the characters chopped in reverse
order.  This has been reversed to be in the right order.

=item Unicode support

Unicode support has seen a large number of incremental improvements,
but continues to be highly experimental.  It is not expected to be
fully supported in the 5.6.x maintenance releases.

substr(), join(), repeat(), reverse(), quotemeta() and string
concatenation were all handling Unicode strings incorrectly in
Perl 5.6.0.  This has been corrected.

Support for C<tr///CU> and C<tr///UC> etc., have been removed since
we realized the interface is broken.  For similar functionality,
see L<perlfunc/pack>.

The Unicode Character Database has been updated to version 3.0.1
with additions made available to the public as of August 30, 2000.

The Unicode character classes \p{Blank} and \p{SpacePerl} have been
added.  "Blank" is like C isblank(), that is, it contains only
"horizontal whitespace" (the space character is, the newline isn't),
and the "SpacePerl" is the Unicode equivalent of C<\s> (\p{Space}
isn't, since that includes the vertical tabulator character, whereas
C<\s> doesn't.)

If you are experimenting with Unicode support in perl, the development
versions of Perl may have more to offer.  In particular, I/O layers
are now available in the development track, but not in the maintenance
track, primarily to do backward compatibility issues.  Unicode support
is also evolving rapidly on a daily basis in the development track--the
maintenance track only reflects the most conservative of these changes.

=item 64-bit support

Support for 64-bit platforms has been improved, but continues to be
experimental.  The level of support varies greatly among platforms.

=item Compiler

The B Compiler and its various backends have had many incremental
improvements, but they continue to remain highly experimental.  Use in
production environments is discouraged.

The perlcc tool has been rewritten so that the user interface is much
more like that of a C compiler.

The perlbc tools has been removed.  Use C<perlcc -B> instead.

=item Lvalue subroutines

There have been various bugfixes to support lvalue subroutines better.
However, the feature still remains experimental.

=item IO::Socket

IO::Socket::INET failed to open the specified port if the service
name was not known.  It now correctly uses the supplied port number
as is.

=item File::Find

File::Find now chdir()s correctly when chasing symbolic links.

=item xsubpp

xsubpp now tolerates embedded POD sections.

=item C<no Module;>

C<no Module;> does not produce an error even if Module does not have an
unimport() method.  This parallels the behavior of C<use> vis-a-vis
C<import>.

=item Tests

A large number of tests have been added.

=back

=head2 Core features

untie() will now call an UNTIE() hook if it exists.  See L<perltie>
for details.

The C<-DT> command line switch outputs copious tokenizing information.
See L<perlrun>.

Arrays are now always interpolated in double-quotish strings.  Previously,
C<"foo@bar.com"> used to be a fatal error at compile time, if an array
C<@bar> was not used or declared.  This transitional behavior was
intended to help migrate perl4 code, and is deemed to be no longer useful.
See L</"Arrays now always interpolate into double-quoted strings">.

keys(), each(), pop(), push(), shift(), splice() and unshift()
can all be overridden now.

C<my __PACKAGE__ $obj> now does the expected thing.

=head2 Configuration issues

On some systems (IRIX and Solaris among them) the system malloc is demonstrably
better.  While the defaults haven't been changed in order to retain binary
compatibility with earlier releases, you may be better off building perl
with C<Configure -Uusemymalloc ...> as discussed in the F<INSTALL> file.

C<Configure> has been enhanced in various ways:

=over

=item *

Minimizes use of temporary files.

=item *

By default, does not link perl with libraries not used by it, such as
the various dbm libraries.  SunOS 4.x hints preserve behavior on that
platform.

=item *

Support for pdp11-style memory models has been removed due to obsolescence.

=item *

Building outside the source tree is supported on systems that have
symbolic links. This is done by running

    sh /path/to/source/Configure -Dmksymlinks ...
    make all test install

in a directory other than the perl source directory.  See F<INSTALL>.

=item *

C<Configure -S> can be run non-interactively.

=back

=head2 Documentation

README.aix, README.solaris and README.macos have been added.
README.posix-bc has been renamed to README.bs2000.  These are
installed as L<perlaix>, L<perlsolaris>, L<perlmacos>, and
L<perlbs2000> respectively.

The following pod documents are brand new:

    perlclib	Internal replacements for standard C library functions
    perldebtut	Perl debugging tutorial
    perlebcdic	Considerations for running Perl on EBCDIC platforms
    perlnewmod	Perl modules: preparing a new module for distribution
    perlrequick	Perl regular expressions quick start
    perlretut	Perl regular expressions tutorial
    perlutil	utilities packaged with the Perl distribution

The F<INSTALL> file has been expanded to cover various issues, such as
64-bit support.

A longer list of contributors has been added to the source distribution.
See the file C<AUTHORS>.

Numerous other changes have been made to the included documentation and FAQs.

=head2 Bundled modules

The following modules have been added.

=over

=item B::Concise

Walks Perl syntax tree, printing concise info about ops.  See L<B::Concise>.

=item File::Temp

Returns name and handle of a temporary file safely.  See L<File::Temp>.

=item Pod::LaTeX

Converts Pod data to formatted LaTeX.  See L<Pod::LaTeX>.

=item Pod::Text::Overstrike

Converts POD data to formatted overstrike text.  See L<Pod::Text::Overstrike>.

=back

The following modules have been upgraded.

=over

=item CGI

CGI v2.752 is now included.

=item CPAN

CPAN v1.59_54 is now included.

=item Class::Struct

Various bugfixes have been added.

=item DB_File

DB_File v1.75 supports newer Berkeley DB versions, among other
improvements.

=item Devel::Peek

Devel::Peek has been enhanced to support dumping of memory statistics,
when perl is built with the included malloc().

=item File::Find

File::Find now supports pre and post-processing of the files in order
to sort() them, etc.

=item Getopt::Long

Getopt::Long v2.25 is included.

=item IO::Poll

Various bug fixes have been included.

=item IPC::Open3

IPC::Open3 allows use of numeric file descriptors.

=item Math::BigFloat

The fmod() function supports modulus operations.  Various bug fixes
have also been included.

=item Math::Complex

Math::Complex handles inf, NaN etc., better.

=item Net::Ping

ping() could fail on odd number of data bytes, and when the echo service
isn't running.  This has been corrected.

=item Opcode

A memory leak has been fixed.

=item Pod::Parser

Version 1.13 of the Pod::Parser suite is included.

=item Pod::Text

Pod::Text and related modules have been upgraded to the versions
in podlators suite v2.08.

=item SDBM_File

On dosish platforms, some keys went missing because of lack of support for
files with "holes".  A workaround for the problem has been added.

=item Sys::Syslog

Various bug fixes have been included.

=item Tie::RefHash

Now supports Tie::RefHash::Nestable to automagically tie hashref values.

=item Tie::SubstrHash

Various bug fixes have been included.

=back

=head2 Platform-specific improvements

The following new ports are now available.

=over

=item NCR MP-RAS

=item NonStop-UX

=back

Perl now builds under Amdahl UTS.

Perl has also been verified to build under Amiga OS.

Support for EPOC has been much improved.  See README.epoc.

Building perl with -Duseithreads or -Duse5005threads now works
under HP-UX 10.20 (previously it only worked under 10.30 or later).
You will need a thread library package installed.  See README.hpux.

Long doubles should now work under Linux.

Mac OS Classic is now supported in the mainstream source package.
See README.macos.

Support for MPE/iX has been updated.  See README.mpeix.

Support for OS/2 has been improved.  See C<os2/Changes> and README.os2.

Dynamic loading on z/OS (formerly OS/390) has been improved.  See
README.os390.

Support for VMS has seen many incremental improvements, including
better support for operators like backticks and system(), and better
%ENV handling.  See C<README.vms> and L<perlvms>.

Support for Stratus VOS has been improved.  See C<vos/Changes> and README.vos.

Support for Windows has been improved.

=over

=item *

fork() emulation has been improved in various ways, but still continues
to be experimental.  See L<perlfork> for known bugs and caveats.

=item *

%SIG has been enabled under USE_ITHREADS, but its use is completely
unsupported under all configurations.

=item *

Borland C++ v5.5 is now a supported compiler that can build Perl.
However, the generated binaries continue to be incompatible with those
generated by the other supported compilers (GCC and Visual C++).

=item *

Non-blocking waits for child processes (or pseudo-processes) are
supported via C<waitpid($pid, &POSIX::WNOHANG)>.

=item *

A memory leak in accept() has been fixed.

=item *

wait(), waitpid() and backticks now return the correct exit status under
Windows 9x.

=item *

Trailing new %ENV entries weren't propagated to child processes.  This
is now fixed.

=item *

Current directory entries in %ENV are now correctly propagated to child
processes.

=item *

Duping socket handles with open(F, ">&MYSOCK") now works under Windows 9x.

=item *

The makefiles now provide a single switch to bulk-enable all the features
enabled in ActiveState ActivePerl (a popular binary distribution).

=item *

Win32::GetCwd() correctly returns C:\ instead of C: when at the drive root.
Other bugs in chdir() and Cwd::cwd() have also been fixed.

=item *

fork() correctly returns undef and sets EAGAIN when it runs out of
pseudo-process handles.

=item *

ExtUtils::MakeMaker now uses $ENV{LIB} to search for libraries.

=item *

UNC path handling is better when perl is built to support fork().

=item *

A handle leak in socket handling has been fixed.

=item *

send() works from within a pseudo-process.

=back

Unless specifically qualified otherwise, the remainder of this document
covers changes between the 5.005 and 5.6.0 releases.

=head1 Core Enhancements

=head2 Interpreter cloning, threads, and concurrency

Perl 5.6.0 introduces the beginnings of support for running multiple
interpreters concurrently in different threads.  In conjunction with
the perl_clone() API call, which can be used to selectively duplicate
the state of any given interpreter, it is possible to compile a
piece of code once in an interpreter, clone that interpreter
one or more times, and run all the resulting interpreters in distinct
threads.

On the Windows platform, this feature is used to emulate fork() at the
interpreter level.  See L<perlfork> for details about that.

This feature is still in evolution.  It is eventually meant to be used
to selectively clone a subroutine and data reachable from that
subroutine in a separate interpreter and run the cloned subroutine
in a separate thread.  Since there is no shared data between the
interpreters, little or no locking will be needed (unless parts of
the symbol table are explicitly shared).  This is obviously intended
to be an easy-to-use replacement for the existing threads support.

Support for cloning interpreters and interpreter concurrency can be
enabled using the -Dusethreads Configure option (see win32/Makefile for
how to enable it on Windows.)  The resulting perl executable will be
functionally identical to one that was built with -Dmultiplicity, but
the perl_clone() API call will only be available in the former.

-Dusethreads enables the cpp macro USE_ITHREADS by default, which in turn
enables Perl source code changes that provide a clear separation between
the op tree and the data it operates with.  The former is immutable, and
can therefore be shared between an interpreter and all of its clones,
while the latter is considered local to each interpreter, and is therefore
copied for each clone.

Note that building Perl with the -Dusemultiplicity Configure option
is adequate if you wish to run multiple B<independent> interpreters
concurrently in different threads.  -Dusethreads only provides the
additional functionality of the perl_clone() API call and other
support for running B<cloned> interpreters concurrently.

    NOTE: This is an experimental feature.  Implementation details are
    subject to change.

=head2 Lexically scoped warning categories

You can now control the granularity of warnings emitted by perl at a finer
level using the C<use warnings> pragma.  L<warnings> and L<perllexwarn>
have copious documentation on this feature.

=head2 Unicode and UTF-8 support

Perl now uses UTF-8 as its internal representation for character
strings.  The C<utf8> and C<bytes> pragmas are used to control this support
in the current lexical scope.  See L<perlunicode>, L<utf8> and L<bytes> for
more information.

This feature is expected to evolve quickly to support some form of I/O
disciplines that can be used to specify the kind of input and output data
(bytes or characters).  Until that happens, additional modules from CPAN
will be needed to complete the toolkit for dealing with Unicode.

    NOTE: This should be considered an experimental feature.  Implementation
    details are subject to change.

=head2 Support for interpolating named characters

The new C<\N> escape interpolates named characters within strings.
For example, C<"Hi! \N{WHITE SMILING FACE}"> evaluates to a string
with a Unicode smiley face at the end.

=head2 "our" declarations

An "our" declaration introduces a value that can be best understood
as a lexically scoped symbolic alias to a global variable in the
package that was current where the variable was declared.  This is
mostly useful as an alternative to the C<vars> pragma, but also provides
the opportunity to introduce typing and other attributes for such
variables.  See L<perlfunc/our>.

=head2 Support for strings represented as a vector of ordinals

Literals of the form C<v1.2.3.4> are now parsed as a string composed
of characters with the specified ordinals.  This is an alternative, more
readable way to construct (possibly Unicode) strings instead of
interpolating characters, as in C<"\x{1}\x{2}\x{3}\x{4}">.  The leading
C<v> may be omitted if there are more than two ordinals, so C<1.2.3> is
parsed the same as C<v1.2.3>.

Strings written in this form are also useful to represent version "numbers".
It is easy to compare such version "numbers" (which are really just plain
strings) using any of the usual string comparison operators C<eq>, C<ne>,
C<lt>, C<gt>, etc., or perform bitwise string operations on them using C<|>,
C<&>, etc.

In conjunction with the new C<$^V> magic variable (which contains
the perl version as a string), such literals can be used as a readable way
to check if you're running a particular version of Perl:

    # this will parse in older versions of Perl also
    if ($^V and $^V gt v5.6.0) {
        # new features supported
    }

C<require> and C<use> also have some special magic to support such literals.
They will be interpreted as a version rather than as a module name:
