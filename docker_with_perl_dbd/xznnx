
class FlatImage;

class IMFUTIL_EXPORT_TYPE FlatImageLevel : public ImageLevel
{
  public:
    
    //
    // Access to the flat image to which the level belongs.
    //

    IMFUTIL_EXPORT
	FlatImage &                 flatImage();
    IMFUTIL_EXPORT
	const FlatImage &           flatImage() const;



    //
    // Accessing channels by name:
    //
    // findChannel(n)           returns a pointer to the image channel with
    //                          name n, or 0 if no such channel exists.
    //
    // channel(n)               returns a reference to the image channel with
    //                          name n, or throws an Iex::ArgExc exception if
    //                          no such channel exists.
    //
    // findTypedChannel<T>(n)   returns a pointer to the image channel with
    //                          name n and type T, or 0 if no such channel
    //                          exists.
    //
    // typedChannel(n)          returns a reference to the image channel with
    //                          name n and type T, or throws an Iex::ArgExc
    //                          exception if no such channel exists.
    //

    IMFUTIL_EXPORT
	FlatImageChannel *          findChannel (const std::string& name);
    IMFUTIL_EXPORT
    const FlatImageChannel *    findChannel (const std::string& name) const;

    IMFUTIL_EXPORT
    FlatImageChannel &          channel (const std::string& name);
    IMFUTIL_EXPORT
    const FlatImageChannel &    channel (const std::string& name) const;

    template <class T>
    TypedFlatImageChannel<T> *       findTypedChannel
                                        (const std::string& name);

    template <class T>
    const TypedFlatImageChannel<T> * findTypedChannel
                                        (const std::string& name) const;

    template <class T>
    TypedFlatImageChannel<T> &       typedChannel
                                        (const std::string& name);

    template <class T>
    const TypedFlatImageChannel<T> & typedChannel
                                        (const std::string& name) const;
    
    //
    // Iterator-style access to channels
    //

    typedef std::map <std::string, FlatImageChannel *> ChannelMap;

    class Iterator;
    class ConstIterator;

    IMFUTIL_EXPORT
	Iterator        begin();
    IMFUTIL_EXPORT
	ConstIterator   begin() const;

    IMFUTIL_EXPORT
	Iterator        end();
    IMFUTIL_EXPORT
	ConstIterator   end() const;

  private:
    
    friend class FlatImage;

    //
    // The constructor and destructor are private.
    // Image levels exist only as part of an image.
    //
    IMFUTIL_HIDDEN
    FlatImageLevel (FlatImage& image,
                    int xLevelNumber,
                    int yLevelNumber,
                    const IMATH_NAMESPACE::Box2i& dataWindow);

    IMFUTIL_HIDDEN
    virtual ~FlatImageLevel ();

    IMFUTIL_HIDDEN
    virtual void    resize (const IMATH_NAMESPACE::Box2i& dataWindow);

    IMFUTIL_HIDDEN
    virtual void    shiftPixels (int dx, int dy);

    IMFUTIL_HIDDEN
    virtual void    insertChannel (const std::string& name,
                                   PixelType type,
                                   int xSampling,
                                   int ySampling,
                                   bool pLinear);

    IMFUTIL_HIDDEN
    virtual void    eraseChannel (const std::string& name);

    IMFUTIL_HIDDEN
    virtual void    clearChannels ();

    IMFUTIL_HIDDEN
    virtual void    renameChannel (const std::string &oldName,
                                   const std::string &newName);

    IMFUTIL_HIDDEN
    virtual void    renameChannels (const RenamingMap &oldToNewNames);

    ChannelMap      _channels;
};


class IMFUTIL_EXPORT_TYPE FlatImageLevel::Iterator
{
  public:

    IMFUTIL_EXPORT
    Iterator ();
    IMFUTIL_EXPORT
    Iterator (const FlatImageLevel::ChannelMap::iterator& i);


    //
    // Advance the iterator
    //

    IMFUTIL_EXPORT
    Iterator &              operator ++ ();
    IMFUTIL_EXPORT
    Iterator                operator ++ (int);


    //
    // Access to the channel to which the iterator points,
    // and to the name of that channel.
    //

    IMFUTIL_EXPORT
    const std::string &     name () const;
    IMFUTIL_EXPORT
    FlatImageChannel &      channel () const;

  private:

    friend class FlatImageLevel::ConstIterator;

    FlatImageLevel::ChannelMap::iterator _i;
};


class IMFUTIL_EXPORT_TYPE FlatImageLevel::ConstIterator
{
  public:

    IMFUTIL_EXPORT
    ConstIterator ();
    IMFUTIL_EXPORT
    ConstIterator (const FlatImageLevel::ChannelMap::const_iterator& i);
    IMFUTIL_EXPORT
    ConstIterator (const FlatImageLevel::Iterator& other);


    //
    // Advance the iterator
    //

    IMFUTIL_EXPORT
    ConstIterator &             operator ++ ();
    IMFUTIL_EXPORT
    ConstIterator               operator ++ (int);


    //
    // Access to the channel to which the iterator points,
    // and to the name of that channel.
    //

    IMFUTIL_EXPORT
    const std::string &         name () const;
    IMFUTIL_EXPORT
    const FlatImageChannel &    channel () const;

  private:

    friend bool operator ==
        (const ConstIterator &, const ConstIterator &);

    friend bool operator !=
        (const ConstIterator &, const ConstIterator &);

    FlatImageLevel::ChannelMap::const_iterator _i;
};


//-----------------------------------------------------------------------------
// Implementation of templates and inline functions
//-----------------------------------------------------------------------------


template <class T>
TypedFlatImageChannel<T> *
FlatImageLevel::findTypedChannel (const std::string& name)
{
    return dynamic_cast <TypedFlatImageChannel<T> *> (findChannel (name));
}


template <class T>
const TypedFlatImageChannel<T> *
FlatImageLevel::findTypedChannel (const std::string& name) const
{
    return dynamic_cast <const TypedFlatImageChannel<T> *> (findChannel (name));
}


template <class T>
TypedFlatImageChannel<T> &
FlatImageLevel::typedChannel (const std::string& name)
{
    TypedFlatImageChannel<T> * ptr = findTypedChannel<T> (name);

    if (ptr == 0)
        throwBadChannelNameOrType (name);

    return *ptr;
}


template <class T>
const TypedFlatImageChannel<T> &
FlatImageLevel::typedChannel (const std::string& name) const
{
    const TypedFlatImageChannel<T> * ptr = findTypedChannel<T> (name);

    if (ptr == 0)
        throwBadChannelNameOrType (name);

    return *ptr;
}


inline
FlatImageLevel::Iterator::Iterator (): _i()
{
    // empty
}


inline
FlatImageLevel::Iterator::Iterator (const FlatImageLevel::ChannelMap::iterator& i):
    _i (i)
{
    // empty
}


inline FlatImageLevel::Iterator &                
FlatImageLevel::Iterator::operator ++ ()
{
    ++_i;
    return *this;
}


inline FlatImageLevel::Iterator  
FlatImageLevel::Iterator::operator ++ (int)
{
    Iterator tmp = *this;
    ++_i;
    return tmp;
}


inline const std::string &
FlatImageLevel::Iterator::name () const
{
    return _i->first;
}


inline FlatImageChannel &        
FlatImageLevel::Iterator::channel () const
{
    return *_i->second;
}


inline
FlatImageLevel::ConstIterator::ConstIterator (): _i()
{
    // empty
}

inline
FlatImageLevel::ConstIterator::ConstIterator
    (const FlatImageLevel::ChannelMap::const_iterator& i): _i (i)
{
    // empty
}


inline
FlatImageLevel::ConstIterator::ConstIterator
    (const FlatImageLevel::Iterator& other): _i (other._i)
{
    // empty
}

inline FlatImageLevel::ConstIterator &
FlatImageLevel::ConstIterator::operator ++ ()
{
    ++_i;
    return *this;
}


inline FlatImageLevel::ConstIterator             
FlatImageLevel::ConstIterator::operator ++ (int)
{
    ConstIterator tmp = *this;
    ++_i;
    return tmp;
}


inline const std::string &
FlatImageLevel::ConstIterator::name () const
{
    return _i->first;
}

inline const FlatImageChannel &  
FlatImageLevel::ConstIterator::channel () const
{
    return *_i->second;
}


inline bool
operator == (const FlatImageLevel::ConstIterator& x,
             const FlatImageLevel::ConstIterator& y)
{
    return x._i == y._i;
}


inline bool
operator != (const FlatImageLevel::ConstIterator& x,
             const FlatImageLevel::ConstIterator& y)
{
    return !(x == y);
}

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT

#endif
                                                                                                         usr/include/OpenEXR/ImfFloatAttribute.h                                                             0000644 0000000 0000000 00000001312 14223432711 016512  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//


#ifndef INCLUDED_IMF_FLOAT_ATTRIBUTE_H
#define INCLUDED_IMF_FLOAT_ATTRIBUTE_H

//-----------------------------------------------------------------------------
//
//	class FloatAttribute
//
//-----------------------------------------------------------------------------

#include "ImfExport.h"
#include "ImfNamespace.h"

#include "ImfAttribute.h"


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER


typedef TypedAttribute<float> FloatAttribute;

#ifndef COMPILING_IMF_FLOAT_ATTRIBUTE
extern template class IMF_EXPORT_EXTERN_TEMPLATE TypedAttribute<float>;
#endif


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT

#endif
                                                                                                                                                                                                                                                                                                                      usr/include/OpenEXR/ImfFloatVectorAttribute.h                                                       0000644 0000000 0000000 00000001557 14223432711 017710  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Weta Digital, Ltd and Contributors to the OpenEXR Project.
//



#ifndef INCLUDED_IMF_FLOATVECTOR_ATTRIBUTE_H
#define INCLUDED_IMF_FLOATVECTOR_ATTRIBUTE_H

//-----------------------------------------------------------------------------
//
//	class FloatVectorAttribute
//
//-----------------------------------------------------------------------------

#include "ImfExport.h"
#include "ImfNamespace.h"

#include "ImfAttribute.h"

#include <vector>


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER

typedef std::vector<float>
    FloatVector;

typedef TypedAttribute<OPENEXR_IMF_INTERNAL_NAMESPACE::FloatVector>
    FloatVectorAttribute;

#ifndef COMPILING_IMF_FLOAT_VECTOR_ATTRIBUTE
extern template class IMF_EXPORT_EXTERN_TEMPLATE TypedAttribute<FloatVector>;
#endif


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT

#endif
                                                                                                                                                 usr/include/OpenEXR/ImfForward.h                                                                    0000644 0000000 0000000 00000005106 14223432711 015172  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMF_FORWARD_H
#define INCLUDED_IMF_FORWARD_H

////////////////////////////////////////////////////////////////////
//
// Forward declarations for OpenEXR - correctly declares namespace
//
////////////////////////////////////////////////////////////////////

#include "ImfExport.h"
#include "ImfNamespace.h"

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER


// classes for basic types;
template<class T> class IMF_EXPORT_TEMPLATE_TYPE Array;
template<class T> class IMF_EXPORT_TEMPLATE_TYPE Array2D;
struct IMF_EXPORT_TYPE Channel;
class  IMF_EXPORT_TYPE ChannelList;
struct IMF_EXPORT_TYPE Chromaticities;

// attributes used in headers are TypedAttributes
class IMF_EXPORT_TYPE Attribute;

class IMF_EXPORT_TYPE Header;

// file handling classes
class IMF_EXPORT_TYPE OutputFile;
class IMF_EXPORT_TYPE TiledInputFile;
class IMF_EXPORT_TYPE ScanLineInputFile;
class IMF_EXPORT_TYPE InputFile;
class IMF_EXPORT_TYPE TiledOutputFile;
class IMF_EXPORT_TYPE DeepScanLineInputFile;
class IMF_EXPORT_TYPE DeepScanLineOutputFile;
class IMF_EXPORT_TYPE DeepTiledInputFile;
class IMF_EXPORT_TYPE DeepTiledOutputFile;
class IMF_EXPORT_TYPE AcesInputFile;
class IMF_EXPORT_TYPE AcesOutputFile;
class IMF_EXPORT_TYPE TiledInputPart;
class IMF_EXPORT_TYPE TiledInputFile;
class IMF_EXPORT_TYPE TileOffsets;

// multipart file handling
class IMF_EXPORT_TYPE GenericInputFile;
class IMF_EXPORT_TYPE GenericOutputFile;
class IMF_EXPORT_TYPE MultiPartInputFile;
class IMF_EXPORT_TYPE MultiPartOutputFile;

class IMF_EXPORT_TYPE InputPart;
class IMF_EXPORT_TYPE TiledInputPart;
class IMF_EXPORT_TYPE DeepScanLineInputPart;
class IMF_EXPORT_TYPE DeepTiledInputPart;

class IMF_EXPORT_TYPE OutputPart;
class IMF_EXPORT_TYPE ScanLineOutputPart;
class IMF_EXPORT_TYPE TiledOutputPart;
class IMF_EXPORT_TYPE DeepScanLineOutputPart;
class IMF_EXPORT_TYPE DeepTiledOutputPart;


// internal use only
struct InputPartData;
struct OutputStreamMutex;
struct OutputPartData;
struct InputStreamMutex;

// frame buffers

class  IMF_EXPORT_TYPE FrameBuffer;
class  IMF_EXPORT_TYPE DeepFrameBuffer;
struct IMF_EXPORT_TYPE DeepSlice;

// compositing
class IMF_EXPORT_TYPE DeepCompositing;
class IMF_EXPORT_TYPE CompositeDeepScanLine;

// preview image
class IMF_EXPORT_TYPE PreviewImage;
struct IMF_EXPORT_TYPE PreviewRgba;

// streams
class IMF_EXPORT_TYPE OStream;
class IMF_EXPORT_TYPE IStream;

class IMF_EXPORT_TYPE IDManifest;
class IMF_EXPORT_TYPE CompressedIDManifest;


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT


#endif // include guard
                                                                                                                                                                                                                                                                                                                                                                                                                                                          usr/include/OpenEXR/ImfFrameBuffer.h                                                                0000644 0000000 0000000 00000024047 14223432711 015757  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//


#ifndef INCLUDED_IMF_FRAME_BUFFER_H
#define INCLUDED_IMF_FRAME_BUFFER_H

//-----------------------------------------------------------------------------
//
//      class Slice
//      class FrameBuffer
//
//-----------------------------------------------------------------------------

#include "ImfForward.h"

#include "ImfName.h"
#include "ImfPixelType.h"

#include <ImathBox.h>

#include <map>
#include <string>
#include <cstdint>


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER

//-------------------------------------------------------
// Description of a single slice of the frame buffer:
//
// Note -- terminology: as part of a file, a component of
// an image (e.g. red, green, blue, depth etc.) is called
// a "channel".  As part of a frame buffer, an image
// component is called a "slice".
//-------------------------------------------------------

struct IMF_EXPORT_TYPE Slice
{
    //------------------------------
    // Data type; see ImfPixelType.h
    //------------------------------

    PixelType           type;


    //---------------------------------------------------------------------
    // Memory layout:  The address of pixel (x, y) is
    //
    //  base + (xp / xSampling) * xStride + (yp / ySampling) * yStride
    //
    // where xp and yp are computed as follows:
    //
    //  * If we are reading or writing a scanline-based file:
    //
    //      xp = x
    //      yp = y
    //
    //  * If we are reading a tile whose upper left coorner is at (xt, yt):
    //
    //      if xTileCoords is true then xp = x - xt, else xp = x
    //      if yTileCoords is true then yp = y - yt, else yp = y
    //
    //---------------------------------------------------------------------

    char *              base;
    size_t              xStride;
    size_t              yStride;


    //--------------------------------------------
    // Subsampling: pixel (x, y) is present in the
    // slice only if
    //
    //  x % xSampling == 0 && y % ySampling == 0
    //
    //--------------------------------------------

    int                 xSampling;
    int                 ySampling;


    //----------------------------------------------------------
    // Default value, used to fill the slice when a file without
    // a channel that corresponds to this slice is read.
    //----------------------------------------------------------

    double              fillValue;


    //-------------------------------------------------------
    // For tiled files, the xTileCoords and yTileCoords flags
    // determine whether pixel addressing is performed using
    // absolute coordinates or coordinates relative to a
    // tile's upper left corner.  (See the comment on base,
    // xStride and yStride, above.)
    //
    // For scanline-based files these flags have no effect;
    // pixel addressing is always done using absolute
    // coordinates.
    //-------------------------------------------------------

    bool                xTileCoords;
    bool                yTileCoords;


    //------------
    // Constructor
    //------------

    IMF_EXPORT
    Slice (PixelType type = HALF,
           char * base = 0,
           size_t xStride = 0,
           size_t yStride = 0,
           int xSampling = 1,
           int ySampling = 1,
           double fillValue = 0.0,
           bool xTileCoords = false,
           bool yTileCoords = false);

    // Does the heavy lifting of computing the base pointer for a slice,
    // avoiding overflow issues with large origin offsets
    //
    // if xStride == 0, assumes sizeof(pixeltype)
    // if yStride == 0, assumes xStride * ( w / xSampling )
    IMF_EXPORT
    static Slice Make(PixelType type,
                      const void *ptr,
                      const IMATH_NAMESPACE::V2i &origin,
                      int64_t w,
                      int64_t h,
                      size_t xStride = 0,
                      size_t yStride = 0,
                      int xSampling = 1,
                      int ySampling = 1,
                      double fillValue = 0.0,
                      bool xTileCoords = false,
                      bool yTileCoords = false);
    // same as above, just computes w and h for you
    // from a data window
    IMF_EXPORT
    static Slice Make(PixelType type,
                      const void *ptr,
                      const IMATH_NAMESPACE::Box2i &dataWindow,
                      size_t xStride = 0,
                      size_t yStride = 0,
                      int xSampling = 1,
                      int ySampling = 1,
                      double fillValue = 0.0,
                      bool xTileCoords = false,
                      bool yTileCoords = false);
};


class IMF_EXPORT_TYPE FrameBuffer
{
  public:

    //------------
    // Add a slice
    //------------

    IMF_EXPORT
    void                        insert (const char name[],
                                        const Slice &slice);

    IMF_EXPORT
    void                        insert (const std::string &name,
                                        const Slice &slice);

    //----------------------------------------------------------------
    // Access to existing slices:
    //
    // [n]              Returns a reference to the slice with name n.
    //                  If no slice with name n exists, an IEX_NAMESPACE::ArgExc
    //                  is thrown.
    //
    // findSlice(n)     Returns a pointer to the slice with name n,
    //                  or 0 if no slice with name n exists.
    //
    //----------------------------------------------------------------

    IMF_EXPORT
    Slice &                     operator [] (const char name[]);
    IMF_EXPORT
    const Slice &               operator [] (const char name[]) const;

    IMF_EXPORT
    Slice &                     operator [] (const std::string &name);
    IMF_EXPORT
    const Slice &               operator [] (const std::string &name) const;

    IMF_EXPORT
    Slice *                     findSlice (const char name[]);
    IMF_EXPORT
    const Slice *               findSlice (const char name[]) const;

    IMF_EXPORT
    Slice *                     findSlice (const std::string &name);
    IMF_EXPORT
    const Slice *               findSlice (const std::string &name) const;


    //-----------------------------------------
    // Iterator-style access to existing slices
    //-----------------------------------------

    typedef std::map <Name, Slice> SliceMap;

    class Iterator;
    class ConstIterator;

    IMF_EXPORT
    Iterator                    begin ();
    IMF_EXPORT
    ConstIterator               begin () const;

    IMF_EXPORT
    Iterator                    end ();
    IMF_EXPORT
    ConstIterator               end () const;

    IMF_EXPORT
    Iterator                    find (const char name[]);
    IMF_EXPORT
    ConstIterator               find (const char name[]) const;

    IMF_EXPORT
    Iterator                    find (const std::string &name);
    IMF_EXPORT
    ConstIterator               find (const std::string &name) const;

  private:

    SliceMap                    _map;
};


//----------
// Iterators
//----------

class IMF_EXPORT_TYPE FrameBuffer::Iterator
{
  public:

    IMF_EXPORT
    Iterator ();
    IMF_EXPORT
    Iterator (const FrameBuffer::SliceMap::iterator &i);

    IMF_EXPORT
    Iterator &                  operator ++ ();
    IMF_EXPORT
    Iterator                    operator ++ (int);

    IMF_EXPORT
    const char *                name () const;
    IMF_EXPORT
    Slice &                     slice () const;

  private:

    friend class FrameBuffer::ConstIterator;

    FrameBuffer::SliceMap::iterator _i;
};


class IMF_EXPORT_TYPE FrameBuffer::ConstIterator
{
  public:

    IMF_EXPORT
    ConstIterator ();
    IMF_EXPORT
    ConstIterator (const FrameBuffer::SliceMap::const_iterator &i);
    IMF_EXPORT
    ConstIterator (const FrameBuffer::Iterator &other);

    IMF_EXPORT
    ConstIterator &             operator ++ ();
    IMF_EXPORT
    ConstIterator               operator ++ (int);

    IMF_EXPORT
    const char *                name () const;
    IMF_EXPORT
    const Slice &               slice () const;

  private:

    friend bool operator == (const ConstIterator &, const ConstIterator &);
    friend bool operator != (const ConstIterator &, const ConstIterator &);

    FrameBuffer::SliceMap::const_iterator _i;
};


//-----------------
// Inline Functions
//-----------------

inline
FrameBuffer::Iterator::Iterator (): _i()
{
    // empty
}


inline
FrameBuffer::Iterator::Iterator (const FrameBuffer::SliceMap::iterator &i):
    _i (i)
{
    // empty
}


inline FrameBuffer::Iterator &
FrameBuffer::Iterator::operator ++ ()
{
    ++_i;
    return *this;
}


inline FrameBuffer::Iterator
FrameBuffer::Iterator::operator ++ (int)
{
    Iterator tmp = *this;
    ++_i;
    return tmp;
}


inline const char *
FrameBuffer::Iterator::name () const
{
    return *_i->first;
}


inline Slice &
FrameBuffer::Iterator::slice () const
{
    return _i->second;
}


inline
FrameBuffer::ConstIterator::ConstIterator (): _i()
{
    // empty
}

inline
FrameBuffer::ConstIterator::ConstIterator
    (const FrameBuffer::SliceMap::const_iterator &i): _i (i)
{
    // empty
}


inline
FrameBuffer::ConstIterator::ConstIterator (const FrameBuffer::Iterator &other):
    _i (other._i)
{
    // empty
}

inline FrameBuffer::ConstIterator &
FrameBuffer::ConstIterator::operator ++ ()
{
    ++_i;
    return *this;
}


inline FrameBuffer::ConstIterator
FrameBuffer::ConstIterator::operator ++ (int)
{
    ConstIterator tmp = *this;
    ++_i;
    return tmp;
}


inline const char *
FrameBuffer::ConstIterator::name () const
{
    return *_i->first;
}

inline const Slice &
FrameBuffer::ConstIterator::slice () const
{
    return _i->second;
}


inline bool
operator == (const FrameBuffer::ConstIterator &x,
             const FrameBuffer::ConstIterator &y)
{
    return x._i == y._i;
}


inline bool
operator != (const FrameBuffer::ConstIterator &x,
             const FrameBuffer::ConstIterator &y)
{
    return !(x == y);
}


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/include/OpenEXR/ImfFramesPerSecond.h                                                            0000644 0000000 0000000 00000004220 14223432711 016602  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMF_FRAMES_PER_SECOND_H
#define INCLUDED_IMF_FRAMES_PER_SECOND_H

//-----------------------------------------------------------------------------
//
//	Convenience functions related to the framesPerSecond attribute
//
//	Functions that return the exact values for commonly used frame rates:
//
//	    name		frames per second
//
//	    fps_23_976()	23.976023...
//	    fps_24()		24.0		35mm film frames
//	    fps_25()		25.0		PAL video frames
//	    fps_29_97()		29.970029...	NTSC video frames
//	    fps_30()		30.0		60Hz HDTV frames
//	    fps_47_952()	47.952047...
//	    fps_48()		48.0
//	    fps_50()		50.0		PAL video fields
//	    fps_59_94()		59.940059...	NTSC video fields
//	    fps_60()		60.0		60Hz HDTV fields
//
//	Functions that try to convert inexact frame rates into exact ones:
//
//	    Given a frame rate, fps, that is close to one of the pre-defined
//	    frame rates fps_23_976(), fps_29_97(), fps_47_952() or fps_59_94(),
//	    guessExactFps(fps) returns the corresponding pre-defined frame
//	    rate.  If fps is not close to one of the pre-defined frame rates,
