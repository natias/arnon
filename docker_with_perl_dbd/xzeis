

int
dbd_db_rollback(SV *dbh, imp_dbh_t *imp_dbh)
{
	dTHX;
	sword status;
	OCITransRollback_log_stat(imp_dbh, imp_dbh->svchp, imp_dbh->errhp, OCI_DEFAULT, status);
	if (status != OCI_SUCCESS) {
	oci_error(dbh, imp_dbh->errhp, status, "OCITransRollback");
	return 0;
	}
	return 1;
}

int dbd_st_bind_col(SV *sth, imp_sth_t *imp_sth, SV *col, SV *ref, IV type, SV *attribs) {
	dTHX;
	int field;

	if (!SvIOK(col)) {
		croak ("Invalid column number") ;
	}

	field = SvIV(col);

	if ((field < 1) || (field > DBIc_NUM_FIELDS(imp_sth))) {
		croak("cannot bind to non-existent field %d", field);
	}

    if (type != 0) {
        imp_sth->fbh[field-1].req_type = type;
    }
    if (attribs) {
        imp_sth->fbh[field-1].bind_flags = 0; /* default to none */
    }

#if DBIXS_REVISION >= 13590
	/* DBIXS 13590 added StrictlyTyped and DiscardString attributes */
	if (attribs) {
		HV *attr_hash;
		SV **attr;

		if (!SvROK(attribs)) {
			croak ("attributes is not a reference");
		}
		else if (SvTYPE(SvRV(attribs)) != SVt_PVHV) {
			croak ("attributes not a hash reference");
		}
		attr_hash = (HV *)SvRV(attribs);

		attr = hv_fetch(attr_hash, "StrictlyTyped", (U32)13, 0);
		if (attr && SvTRUE(*attr)) {
			imp_sth->fbh[field-1].bind_flags |= DBIstcf_STRICT;
		}

		attr = hv_fetch(attr_hash, "DiscardString", (U32)13, 0);
		if (attr && SvTRUE(*attr)) {
			imp_sth->fbh[field-1].bind_flags |= DBIstcf_DISCARD_STRING;
		}
	}
#endif  /* DBIXS_REVISION >= 13590 */
	return 1;
}

int
dbd_db_disconnect(SV *dbh, imp_dbh_t *imp_dbh)
{
	dTHX;
	dTHR;

	/* We assume that disconnect will always work	*/
	/* since most errors imply already disconnected.	*/
	DBIc_ACTIVE_off(imp_dbh);

#if defined(USE_ITHREADS) && defined(PERL_MAGIC_shared_scalar)
        /* do nothing for connections stored in shared variables */
        if(imp_dbh->is_shared != 0)
        {
#ifdef ORA_OCI_112
            /* just in case, drop session_tag if it is set
             * normally it is used during session release */
            if(imp_dbh->session_tag != NULL)
            {
                SvREFCNT_dec(imp_dbh->session_tag);
                imp_dbh->session_tag = NULL;
            }
#endif
            return TRUE;
        }
#endif
        cnx_detach(aTHX_ imp_dbh);

	/* We don't free imp_dbh since a reference still exists	*/
	/* The DESTROY method is the only one to 'free' memory.	*/
	/* Note that statement objects may still exists for this dbh!	*/
	return TRUE;
}


void
dbd_db_destroy(SV *dbh, imp_dbh_t *imp_dbh)
{
	dTHX ;
        if (DBIc_ACTIVE(imp_dbh)) dbd_db_disconnect(dbh, imp_dbh);
	DBIc_IMPSET_off(imp_dbh);
        if (imp_dbh->taf_function) {
            disable_taf(imp_dbh);
            SvREFCNT_dec(imp_dbh->taf_function);
            imp_dbh->taf_function = NULL;
        }
        if (imp_dbh->taf_ctx.dbh_ref) {
            SvREFCNT_dec(SvRV(imp_dbh->taf_ctx.dbh_ref));
            imp_dbh->taf_ctx.dbh_ref = NULL;
        }

#if defined(USE_ITHREADS) && defined(PERL_MAGIC_shared_scalar)
        /* on shared cnx only decrement reference count */
        if(imp_dbh->is_shared != 0) return;
#endif
        tracer(3, 3, "clearing session %p\n", imp_dbh->seshp);
        cnx_clean(aTHX_ imp_dbh);
}


SV *
dbd_take_imp_data(SV *dbh, imp_xxh_t *imp_xxh, void* foo)
{
	dTHX;
	D_imp_dbh(dbh);
        tracer(3, 3, "take_imp for %p (session %p)\n", imp_dbh, imp_dbh->seshp);
        if (imp_dbh->taf_function) {
            disable_taf(imp_dbh);
            SvREFCNT_dec(imp_dbh->taf_function);
            imp_dbh->taf_function = NULL;
        }
        if (imp_dbh->taf_ctx.dbh_ref) {
            SvREFCNT_dec(SvRV(imp_dbh->taf_ctx.dbh_ref));
            imp_dbh->taf_ctx.dbh_ref = NULL;
        }
#ifdef ORA_OCI_112
        if(imp_dbh->session_tag != NULL)
        {
            SvREFCNT_dec(imp_dbh->session_tag);
            imp_dbh->session_tag = NULL;
        }
#endif
        /* we do nothing else here because the copy of current state is saved by
         * SUPER::take_imp_data and no other method shall be called on this
         * handle. If user calls something, then it is not our problem.
         * Wether DESTROY nor DISCONNECT are called by DBI
         */
	/* Indicate that SUPER::take_imp_data should be called. */
	return &PL_sv_no;
}


/* According to Oracle's documentation of OCISessionGet, attributes should not be changed
   on the server and session handles attached to OCISessionGet's service context handle.
   This would imply that dbd_db_STORE_attrib is wrong for session pooling, however
   it seems to work just fine... */
int
dbd_db_STORE_attrib(SV *dbh, imp_dbh_t *imp_dbh, SV *keysv, SV *valuesv)
{
	dTHX;
	STRLEN kl;
	STRLEN vl;
	sword status;
	char *key = SvPV(keysv,kl);
	int on = SvTRUE(valuesv);
	int cacheit = 1;

	if (kl==17 && strEQ(key, "ora_ncs_buff_mtpl") ) {
		ora_ncs_buff_mtpl = SvIV (valuesv);
	}
#ifdef ORA_OCI_112
	else if (kl==15 && strEQ(key, "ora_driver_name") ) {
            (void)local_error(
                aTHX_ dbh, "ora_driver_name can not be changed"
            );
	}
	else if (kl==8 && strEQ(key, "ora_drcp") ) {
            (void)local_error(
                aTHX_ dbh, "ora_drcp can not be changed"
            );
	}
	else if (kl==14 && strEQ(key, "ora_drcp_class") ) {
            (void)local_error(
                aTHX_ dbh, "ora_drcp_class can not be changed"
            );
	}
	else if (kl==12 && strEQ(key, "ora_drcp_tag") ) {
#if defined(USE_ITHREADS) && defined(PERL_MAGIC_shared_scalar)
            if(imp_dbh->is_shared != 0)
            {
                (void)local_error(
                    aTHX_ dbh, "ora_drcp_tag not supported for shared DBH"
                );
            }
            else
#endif
            if(cnx_is_pooled_session(aTHX_ dbh, imp_dbh))
            {
                if(imp_dbh->session_tag != NULL) SvREFCNT_dec(imp_dbh->session_tag);
                imp_dbh->session_tag = newSVsv(valuesv);
            }
            else (void)local_error(
                aTHX_ dbh, "ora_drcp_tag is not used without DRCP"
            );
	}
	else if (kl==12 && strEQ(key, "ora_drcp_min") ) {
		cnx_pool_min(aTHX_ dbh, imp_dbh, (ub4)SvIV(valuesv));
	}
	else if (kl==13 && strEQ(key, "ora_drcp_mode") ) {
		cnx_pool_mode(aTHX_ dbh, imp_dbh, (ub4)SvIV(valuesv));
	}
#if OCI_MAJOR_VERSION > 18
	else if (kl==13 && strEQ(key, "ora_drcp_wait") ) {
		cnx_pool_wait(aTHX_ dbh, imp_dbh, (ub4)SvIV(valuesv));
	}
#endif
	else if (kl==12 && strEQ(key, "ora_drcp_max") ) {
		cnx_pool_max(aTHX_ dbh, imp_dbh, (ub4)SvIV(valuesv));
	}
	else if (kl==13 && strEQ(key, "ora_drcp_incr") ) {
		cnx_pool_incr(aTHX_ dbh, imp_dbh, (ub4)SvIV(valuesv));
	}
	else if (kl==12 && strEQ(key, "ora_drcp_rlb") ) {
            /* ignore it here, too late to do anything */
	}
#endif
	else if (kl==16 && strEQ(key, "ora_taf_function") ) {
            if (imp_dbh->taf_function)
                SvREFCNT_dec(imp_dbh->taf_function);
            imp_dbh->taf_function = newSVsv(valuesv);

            if (SvTRUE(valuesv)) {
                if(!enable_taf(aTHX_ dbh, imp_dbh)) return FALSE;
            } else {
                disable_taf(imp_dbh);
            }
	}
#ifdef OCI_ATTR_ACTION
	else if (kl==10 && strEQ(key, "ora_action") ) {
            char * action = (char *) SvPV (valuesv, vl );
            OCIAttrSet_log_stat(imp_dbh, imp_dbh->seshp, OCI_HTYPE_SESSION,
                    action,(ub4)vl, OCI_ATTR_ACTION, imp_dbh->errhp, status);
            if(status != OCI_SUCCESS) (void)oci_error(
                    dbh, imp_dbh->errhp, status, "OCIAttrSet OCI_ATTR_ACTION");
	}
#endif
	else if (kl==21 && strEQ(key, "ora_client_identifier") ) {
            char * cid = (char *) SvPV (valuesv, vl );
            OCIAttrSet_log_stat(imp_dbh, imp_dbh->seshp, OCI_HTYPE_SESSION,
                    cid,(ub4)vl,OCI_ATTR_CLIENT_IDENTIFIER,
                    imp_dbh->errhp, status
            );
            if(status != OCI_SUCCESS) (void)oci_error(
                    dbh, imp_dbh->errhp, status,
                    "OCIAttrSet OCI_ATTR_CLIENT_IDENTIFIER");
	}
#ifdef OCI_ATTR_CLIENT_INFO
    else if (kl==15 && strEQ(key, "ora_client_info") ) {
		char * client_info = (char *) SvPV (valuesv, vl );
		OCIAttrSet_log_stat(imp_dbh,
                        imp_dbh->seshp,OCI_HTYPE_SESSION,
                        client_info,(ub4)vl,
                        OCI_ATTR_CLIENT_INFO,imp_dbh->errhp, status
                );
                if(status != OCI_SUCCESS) (void)oci_error(
                        dbh, imp_dbh->errhp, status,
                        "OCIAttrSet OCI_ATTR_CLIENT_INFO");
	}
#endif
#ifdef OCI_ATTR_MODULE
	else if (kl==15 && strEQ(key, "ora_module_name") ) {
		char * module_name = (char *) SvPV (valuesv, vl );
		OCIAttrSet_log_stat(imp_dbh,
                        imp_dbh->seshp,OCI_HTYPE_SESSION,
                        module_name, (ub4)vl,
                        OCI_ATTR_MODULE,imp_dbh->errhp, status
                );
                if(status != OCI_SUCCESS) (void)oci_error(
                        dbh, imp_dbh->errhp, status,
                        "OCIAttrSet OCI_ATTR_MODULE");
	}
#endif
	else if (kl==20 && strEQ(key, "ora_oci_success_warn") ) {
		oci_warn = SvIV (valuesv);
	}
	else if (kl==11 && strEQ(key, "ora_objects")) {
		ora_objects = SvIV (valuesv);
	}
	else if (kl==11 && (strEQ(key, "ora_verbose") || strEQ(key, "dbd_verbose"))) {
		dbd_verbose = SvIV (valuesv);
	}
	else if (kl==10 && strEQ(key, "AutoCommit")) {
		DBIc_set(imp_dbh,DBIcf_AutoCommit, on);
	}
	else if (kl==12 && strEQ(key, "RowCacheSize")) {
		imp_dbh->RowCacheSize = SvIV(valuesv);
	}
	else if (kl==22 && strEQ(key, "ora_max_nested_cursors")) {
		imp_dbh->max_nested_cursors = SvIV(valuesv);
	}
	else if (kl==20 && strEQ(key, "ora_array_chunk_size")) {
			imp_dbh->array_chunk_size = SvIV(valuesv);
	}
	else if (kl==11 && strEQ(key, "ora_ph_type")) {
		if (SvIV(valuesv)!=1 && SvIV(valuesv)!=5 && SvIV(valuesv)!=96 && SvIV(valuesv)!=97)
			warn("ora_ph_type must be 1 (VARCHAR2), 5 (STRING), 96 (CHAR), or 97 (CHARZ)");
		else
			imp_dbh->ph_type = SvIV(valuesv);
		 }

	else if (kl==13 && strEQ(key, "ora_ph_csform")) {
		if (SvIV(valuesv)!=SQLCS_IMPLICIT && SvIV(valuesv)!=SQLCS_NCHAR)
			warn("ora_ph_csform must be 1 (SQLCS_IMPLICIT) or 2 (SQLCS_NCHAR)");
		else
			imp_dbh->ph_csform = (ub1)SvIV(valuesv);
		}
	else
	{
		return FALSE;
	}

	if (cacheit) /* cache value for later DBI 'quick' fetch? */
		(void)hv_store((HV*)SvRV(dbh), key, kl, newSVsv(valuesv), 0);

	return TRUE;
}


SV *
dbd_db_FETCH_attrib(SV *dbh, imp_dbh_t *imp_dbh, SV *keysv)
{
	dTHX;
	STRLEN kl;
	char *key = SvPV(keysv,kl);
	SV *retsv = Nullsv;
	/* Default to caching results for DBI dispatch quick_FETCH	*/
	int cacheit = FALSE;
        sword status;

	/* AutoCommit FETCH via DBI */

	if (kl==18 && strEQ(key, "ora_ncs_buff_mtpl") ) {
		retsv = newSViv (ora_ncs_buff_mtpl);
	}
#ifdef ORA_OCI_112
	else if (kl==15 && strEQ(key, "ora_driver_name") ) {
            char * driver_name;
            ub4 namelen;
            OCIAttrGet_log_stat(
                imp_dbh, imp_dbh->seshp, OCI_HTYPE_SESSION, &driver_name,
                &namelen, OCI_ATTR_DRIVER_NAME, imp_dbh->errhp, status
            );
            if(status == OCI_SUCCESS)
		retsv = newSVpv(driver_name, namelen);
	}
	else if (kl==8 && strEQ(key, "ora_drcp") ) {
		retsv = newSViv(cnx_is_pooled_session(aTHX_ dbh, imp_dbh));
	}
	else if (kl==14 && strEQ(key, "ora_drcp_class") ) {
            char * pool_name;
            ub4 namelen;
            OCIAttrGet_log_stat(
                imp_dbh, imp_dbh->seshp, OCI_HTYPE_SESSION, &pool_name,
                &namelen, OCI_ATTR_CONNECTION_CLASS, imp_dbh->errhp, status
            );
            if(status == OCI_SUCCESS)
		retsv = newSVpv(pool_name, namelen);
            else (void)oci_error(dbh, imp_dbh->errhp, status,
                        "OCIAttrGet OCI_ATTR_CONNECTION_CLASS");
	}
	else if (kl==12 && strEQ(key, "ora_drcp_tag") ) {
            if(imp_dbh->session_tag)
            {
                retsv = imp_dbh->session_tag;
                SvREFCNT_inc(retsv);
            }
        }
	else if (kl==12 && strEQ(key, "ora_drcp_min") ) {
		retsv = newSViv(cnx_get_pool_min(aTHX_ dbh, imp_dbh));
	}
	else if (kl==13 && strEQ(key, "ora_drcp_mode") ) {
		retsv = newSViv(cnx_get_pool_mode(aTHX_ dbh, imp_dbh));
	}
#if OCI_MAJOR_VERSION > 18
	else if (kl==13 && strEQ(key, "ora_drcp_wait") ) {
		retsv = newSViv(cnx_get_pool_wait(aTHX_ dbh, imp_dbh));
	}
#endif
	else if (kl==12 && strEQ(key, "ora_drcp_max") ) {
		retsv = newSViv(cnx_get_pool_max(aTHX_ dbh, imp_dbh));
	}
	else if (kl==13 && strEQ(key, "ora_drcp_incr") ) {
		retsv = newSViv(cnx_get_pool_incr(aTHX_ dbh, imp_dbh));
	}
	else if (kl==12 && strEQ(key, "ora_drcp_rlb") ) {
		retsv = newSViv(cnx_get_pool_rlb(aTHX_ dbh, imp_dbh));
	}
	else if (kl==13 && strEQ(key, "ora_drcp_used") ) {
		retsv = newSViv(cnx_get_pool_used(aTHX_ dbh, imp_dbh));
	}
#endif
	else if (kl==16 && strEQ(key, "ora_taf_function") ) {
        if (imp_dbh->taf_function) {
            retsv = newSVsv(imp_dbh->taf_function);
        }
	}
#ifdef OCI_ATTR_ACTION
	else if (kl==10 && strEQ(key, "ora_action")) {
            char * name;
            ub4 namelen;
            OCIAttrGet_log_stat(
                imp_dbh, imp_dbh->seshp, OCI_HTYPE_SESSION, &name,
                &namelen, OCI_ATTR_ACTION, imp_dbh->errhp, status
            );
            if(status == OCI_SUCCESS) retsv = newSVpv(name, namelen);
            else (void)oci_error(dbh, imp_dbh->errhp, status,
                        "OCIAttrGet OCI_ATTR_ACTION");
	}
#endif
    else if (kl==21 && strEQ(key, "ora_client_identifier")) {
            char * name;
            ub4 namelen;
            OCIAttrGet_log_stat(
                imp_dbh, imp_dbh->seshp, OCI_HTYPE_SESSION, &name,
                &namelen, OCI_ATTR_CLIENT_IDENTIFIER, imp_dbh->errhp, status
            );
            if(status == OCI_SUCCESS) retsv = newSVpv(name, namelen);
            else (void)oci_error(dbh, imp_dbh->errhp, status,
                        "OCIAttrGet OCI_ATTR_CLIENT_IDENTIFIER");
	}
#ifdef OCI_ATTR_CLIENT_INFO
	else if (kl==15 && strEQ(key, "ora_client_info")) {
            char * name;
            ub4 namelen;
            OCIAttrGet_log_stat(
                imp_dbh, imp_dbh->seshp, OCI_HTYPE_SESSION, &name,
                &namelen, OCI_ATTR_CLIENT_INFO, imp_dbh->errhp, status
            );
            if(status == OCI_SUCCESS) retsv = newSVpv(name, namelen);
            else (void)oci_error(dbh, imp_dbh->errhp, status,
                        "OCIAttrGet OCI_ATTR_CLIENT_INFO");
	}
#endif
#ifdef OCI_ATTR_MODULE
	else if (kl==15 && strEQ(key, "ora_module_name")) {
            char * name;
            ub4 namelen;
            OCIAttrGet_log_stat(
                imp_dbh, imp_dbh->seshp, OCI_HTYPE_SESSION, &name,
                &namelen, OCI_ATTR_MODULE, imp_dbh->errhp, status
            );
            if(status == OCI_SUCCESS) retsv = newSVpv(name, namelen);
            else (void)oci_error(dbh, imp_dbh->errhp, status,
                        "OCIAttrGet OCI_ATTR_MODULE");
	}
#endif
	else if (kl==20 && strEQ(key, "ora_oci_success_warn")) {
		retsv = newSViv (oci_warn);
	}
	else if (kl==11 && strEQ(key, "ora_objects")) {
		retsv = newSViv (ora_objects);
	}
	else if (kl==11 && (strEQ(key, "ora_verbose") || strEQ(key, "dbd_verbose"))) {
		retsv = newSViv (dbd_verbose);
	}
	else if (kl==10 && strEQ(key, "AutoCommit")) {
		retsv = boolSV(DBIc_has(imp_dbh,DBIcf_AutoCommit));
	}
	else if (kl==12 && strEQ(key, "RowCacheSize")) {
		retsv = newSViv(imp_dbh->RowCacheSize);
	}
	else if (kl==11 && strEQ(key, "RowsInCache")) {
			retsv = newSViv(imp_dbh->RowsInCache);
	}
	else if (kl==22 && strEQ(key, "ora_max_nested_cursors")) {
		retsv = newSViv(imp_dbh->max_nested_cursors);
	}
	else if (kl==11 && strEQ(key, "ora_ph_type")) {
		retsv = newSViv(imp_dbh->ph_type);
	}
	else if (kl==13 && strEQ(key, "ora_ph_csform")) {
		retsv = newSViv(imp_dbh->ph_csform);
	}
	else if (kl==22 && strEQ(key, "ora_parse_error_offset")) {
		retsv = newSViv(imp_dbh->parse_error_offset);
	}
	if (!retsv)
		return Nullsv;
	if (cacheit) {	/* cache for next time (via DBI quick_FETCH)	*/
		SV **svp = hv_fetch((HV*)SvRV(dbh), key, kl, 1);
		sv_free(*svp);
		*svp = retsv;
		(void)SvREFCNT_inc(retsv);	/* so sv_2mortal won't free it	*/
	}

	if (retsv == &PL_sv_yes || retsv == &PL_sv_no)
		return retsv; /* no need to mortalize yes or no */

	return sv_2mortal(retsv);
}



/* ================================================================== */

#define MAX_OCISTRING_LEN 32766

SV *
createxmlfromstring(SV *sth, imp_sth_t *imp_sth, SV *source){

	dTHX;
	dTHR;
	OCIXMLType *xml = NULL;
	STRLEN len;
	ub4 buflen;
	sword status;
	ub1 src_type;
	dvoid* src_ptr = NULL;
	D_imp_dbh_from_sth;
	SV* sv_dest;
	dvoid *bufp;
	ub1 csform;
	ub2 csid;
	csid 	= 0;
	csform 	= SQLCS_IMPLICIT;
	len 	= SvLEN(source);
	bufp 	= SvPV(source, len);

	if (DBIc_DBISTATE(imp_sth)->debug >=3 || dbd_verbose >= 3 )
        PerlIO_printf(DBIc_LOGPIO(imp_sth), " creating xml from string that is %lu long\n",(unsigned long)len);
	if(len > MAX_OCISTRING_LEN) {
		src_type = OCI_XMLTYPE_CREATE_CLOB;

		if (DBIc_DBISTATE(imp_sth)->debug >=5 || dbd_verbose >= 5 )
			PerlIO_printf(DBIc_LOGPIO(imp_sth),
                          " use a temp lob locator for large xml \n");

		OCIDescriptorAlloc_ok(imp_dbh, imp_dbh->envhp, &src_ptr, OCI_DTYPE_LOB);

		OCILobCreateTemporary_log_stat(imp_dbh, imp_dbh->svchp, imp_sth->errhp,
					 (OCILobLocator *) src_ptr, (ub2) OCI_DEFAULT,
					 (ub1) OCI_DEFAULT, OCI_TEMP_CLOB, FALSE, OCI_DURATION_SESSION, status);

		if (status != OCI_SUCCESS) {
			oci_error(sth, imp_sth->errhp, status, "OCILobCreateTemporary");
		}
		csid = (SvUTF8(source) && !CS_IS_UTF8(csid)) ? utf8_csid : CSFORM_IMPLIED_CSID(imp_dbh, csform);
		buflen = len;
		OCILobWriteAppend_log_stat(imp_dbh, imp_dbh->svchp, imp_dbh->errhp, src_ptr,
						&buflen, bufp, (ub4)len, OCI_ONE_PIECE,
						NULL, NULL,
						csid, csform, status);

		if (status != OCI_SUCCESS) {
			oci_error(sth, imp_sth->errhp, status, "OCILobWriteAppend");
		}

	} else {
		src_type = OCI_XMLTYPE_CREATE_OCISTRING;
		if (DBIc_DBISTATE(imp_sth)->debug >=5 || dbd_verbose >= 5 )
			PerlIO_printf(DBIc_LOGPIO(imp_sth),
                          " use a OCIStringAssignText for small xml \n");
		OCIStringAssignText(imp_dbh->envhp,
					imp_dbh->errhp,
					bufp,
					(ub2) (ub4)len,
					(OCIString **) &src_ptr);
	}



	OCIXMLTypeCreateFromSrc_log_stat(imp_dbh,
                                     imp_dbh->svchp,
                                     imp_dbh->errhp,
                                     (OCIDuration)OCI_DURATION_CALLOUT,
                                     (ub1)src_type,
                                     (dvoid *)src_ptr,
                                     (sb4)OCI_IND_NOTNULL,
                                     &xml,
                                     status);

	if (status != OCI_SUCCESS) {
		oci_error(sth, imp_sth->errhp, status, "OCIXMLTypeCreateFromSrc");
	}

/* free temporary resources */
	if ( src_type == OCI_XMLTYPE_CREATE_CLOB ) {
		OCILobFreeTemporary(imp_dbh->svchp, imp_dbh->errhp,
					(OCILobLocator*) src_ptr);

		OCIDescriptorFree_log(imp_dbh, (dvoid *) src_ptr, (ub4) OCI_DTYPE_LOB);
	}


	sv_dest = newSViv(0);
	sv_setref_pv(sv_dest, "OCIXMLTypePtr", xml);
	return sv_dest;

}


void
dbd_preparse(imp_sth_t *imp_sth, char *statement)
{
dTHX;
D_imp_dbh_from_sth;
char in_literal = '\0';
char in_comment = '\0';
char *src, *start, *dest;
phs_t phs_tpl;
SV *phs_sv;
int idx=0;
char *style="", *laststyle=Nullch;
STRLEN namelen;
phs_t *phs;
	/* allocate room for copy of statement with spare capacity	*/
	/* for editing '?' or ':1' into ':p1' so we can use obndrv.	*/
	/* XXX should use SV and append to it */
	Newz(0,imp_sth->statement,strlen(statement) * 10,char);

	/* initialise phs ready to be cloned per placeholder	*/
	memset(&phs_tpl, 0, sizeof(phs_tpl));
	phs_tpl.imp_sth = imp_sth;
	phs_tpl.ftype  = imp_dbh->ph_type;
	phs_tpl.csform = imp_dbh->ph_csform;
	phs_tpl.sv = &PL_sv_undef;

	src  = statement;
	dest = imp_sth->statement;
	while(*src) {

		if (in_comment) {
		/* 981028-jdl on mocha.  Adding all code which deals with		   */
		/*  in_comment variable (its declaration plus 2 code blocks).	   */
		/*  Text appearing within comments should be scanned for neither	*/
		/*  placeholders nor for single quotes (which toggle the in_literal */
		/*  boolean).  Comments like "3:00" demonstrate the former problem, */
		/*  and contractions like "don't" demonstrate the latter problem.   */
		/* The comment style is stored in in_comment; each style is */
		/* terminated in a different way.						  */
			if (in_comment == '-' && *src == '\n') {
				in_comment = '\0';
			}
			else if (in_comment == '/' && *src == '*' && *(src+1) == '/') {
				*dest++ = *src++; /* avoids asterisk-slash-asterisk issues */
				in_comment = '\0';
			}
			*dest++ = *src++;
			continue;
		}

		if (in_literal) {
			if (*src == in_literal)
				in_literal = '\0';
			*dest++ = *src++;
			continue;
		}

		/* Look for comments: '-- oracle-style' or C-style	*/
		if ((*src == '-' && *(src+1) == '-') ||
			(*src == '/' && *(src+1) == '*'))
		{
			in_comment = *src;
			/* We know *src & the next char are to be copied, so do */
			/*  it.  In the case of C-style comments, it happens to */
			/*  help us avoid slash-asterisk-slash oddities.		*/
			*dest++ = *src++;
			*dest++ = *src++;
			continue;
		}

		if (*src != ':' && *src != '?') {

			if (*src == '\'' || *src == '"')
				in_literal = *src;

			*dest++ = *src++;
			continue;
		}

		/* only here for : or ? outside of a comment or literal	*/

		start = dest;			/* save name inc colon	*/
		*dest++ = *src++;
		if (*start == '?') {		/* X/Open standard	*/
			sprintf(start,":p%d", ++idx); /* '?' -> ':p1' (etc)	*/
			dest = start+strlen(start);
			style = "?";

		}
		else if (isDIGIT(*src)) {	/* ':1'		*/
			idx = atoi(src);
			*dest++ = 'p';		/* ':1'->':p1'	*/
			if (idx <= 0)
				croak("Placeholder :%d invalid, placeholders must be >= 1", idx);

			while(isDIGIT(*src))
				*dest++ = *src++;
			style = ":1";

		}
		else if (isALNUM(*src)) {	/* ':foo'	*/
			while(isALNUM(*src))	/* includes '_'	*/
				*dest++ = toLOWER(*src), src++;
			style = ":foo";

		} else {			/* perhaps ':=' PL/SQL construct */
			/* if (src == ':') *dest++ = *src++; XXX? move past '::'? */
			continue;
		}

		*dest = '\0';			/* handy for debugging	*/
		namelen = (dest-start);
		if (laststyle && style != laststyle)
			croak("Can't mix placeholder styles (%s/%s)",style,laststyle);
		laststyle = style;
		if (imp_sth->all_params_hv == NULL)
			imp_sth->all_params_hv = newHV();
		/* allocate and copy enough for phs_tpl */
		phs_sv = newSVpvn((char*)&phs_tpl, sizeof(phs_tpl));
		(void)hv_store(imp_sth->all_params_hv, start, namelen, phs_sv, 0);
		/* allocate extra room for the name (returns the PV) */
		phs = (phs_t*)(void*)SvGROW(phs_sv, sizeof(phs_tpl)+namelen+1);
		phs->idx = idx-1;          /* Will be 0 for :1, -1 for :foo. */
		/* tell the SV the full length */
		SvCUR_set(phs_sv, sizeof(phs_tpl)+namelen);
		/* copy the name */
		strcpy(phs->name, start);
	}
	*dest = '\0';
	if (imp_sth->all_params_hv) {
		DBIc_NUM_PARAMS(imp_sth) = (int)HvKEYS(imp_sth->all_params_hv);
		if (DBIc_DBISTATE(imp_sth)->debug >= 2 || dbd_verbose >= 3 )
			PerlIO_printf(DBIc_LOGPIO(imp_sth),
                          "	dbd_preparse scanned %d distinct placeholders\n",
                          (int)DBIc_NUM_PARAMS(imp_sth));
	}
}


static int
ora_sql_type(imp_sth_t *imp_sth, char *name, int sql_type)
{
	/* XXX should detect DBI reserved standard type range here */

	switch (sql_type) {
	case SQL_NUMERIC:
	case SQL_DECIMAL:
	case SQL_INTEGER:
	case SQL_BIGINT:
	case SQL_TINYINT:
	case SQL_SMALLINT:
	case SQL_FLOAT:
	case SQL_REAL:
	case SQL_DOUBLE:
	case SQL_VARCHAR:
	return 1;	/* Oracle VARCHAR2	*/

	case SQL_CHAR:
	return 96;	/* Oracle CHAR		*/

	case SQL_BINARY:
	case SQL_VARBINARY:
	return 23;	/* Oracle RAW		*/

	case SQL_LONGVARBINARY:
	return 24;	/* Oracle LONG RAW	*/

	case SQL_LONGVARCHAR:
	return 8;	/* Oracle LONG		*/

	case SQL_UDT:
 		return 108;	 /* Oracle NTY		   */

	case SQL_CLOB:
	return 112;	/* Oracle CLOB		*/

	case SQL_BLOB:
	return 113;	/* Oracle BLOB		*/

	case SQL_DATE:
	case SQL_TIME:
	case SQL_TIMESTAMP:
	default:
	if (imp_sth && DBIc_WARN(imp_sth) && name)
		warn("SQL type %d for '%s' is not fully supported, bound as SQL_VARCHAR instead",
		sql_type, name);
	return ora_sql_type(imp_sth, name, SQL_VARCHAR);
	}
}



/* ############### Array bind ######################################### */
/* Added by Alexander V Alekseev. alex@alemate.ru					   */
/*
 *
 * Realloc temporary array buffer to match required number of entries
 * and buffer size.
 *
 * Return value: croaks on error. false (=0 ) on success.
 * */
int ora_realloc_phs_array(phs_t *phs,int newentries, int newbufsize){

	dTHX;
	dTHR;
	int i; /* Loop variable */
	unsigned short *newal;

	if( newbufsize < 0 ){
	newbufsize=0;
	}
	if( newentries > phs->array_numallocated ){
		OCIInd *newind=(OCIInd *)realloc(phs->array_indicators,newentries*sizeof(OCIInd) );
	if( newind ){
		phs->array_indicators=newind;
		/* Init all indicators to NULL values. */
		for( i=phs->array_numallocated; i < newentries ; i++ ){
		newind[i]=1;
		}
	}else{
		croak("Not enough memory to allocate %d OCI indicators.",newentries);
	}
	newal=(unsigned short *)realloc(phs->array_lengths,	newentries*sizeof(unsigned short));
	if( newal ){
		phs->array_lengths=newal;
		/* Init all new lengths to zero */
		if( newentries > phs->array_numallocated ){
			memset(
				&(newal[phs->array_numallocated]),
				0,
				(newentries-(phs->array_numallocated))*sizeof(unsigned short)
			  );
		}
	}else{
		croak("Not enough memory to allocate %d entries in OCI array of lengths.",newentries);
	}
	phs->array_numallocated=newentries;
	}
	if( phs->array_buflen < newbufsize ){
	char * newbuf=(char *)realloc( phs->array_buf, (unsigned) newbufsize );
	if( newbuf ){
		phs->array_buf=newbuf;
	}else{
		croak("Not enough memory to allocate OCI array buffer of %d bytes.",newbufsize);
	}
	phs->array_buflen=newbufsize;
	}
	return 0;
}
/* bind of SYS.DBMS_SQL.VARCHAR2_TABLE */
int
dbd_rebind_ph_varchar2_table(SV *sth, imp_sth_t *imp_sth, phs_t *phs)
{
	dTHX;
	D_imp_dbh_from_sth;
	sword status;
	int trace_level = DBIc_DBISTATE(imp_sth)->debug;
	AV *arr;
	ub1 csform;
	ub2 csid;
	int flag_data_is_utf8=0;
	int need_allocate_rows;
	int buflen;
	int numarrayentries;
	if( ( ! SvROK(phs->sv) )  || (SvTYPE(SvRV(phs->sv))!=SVt_PVAV) ) { /* Allow only array binds */
	croak("dbd_rebind_ph_varchar2_table(): bad bind variable. ARRAY reference required, but got %s for '%s'.",
			neatsvpv(phs->sv,0), phs->name);
	}
	arr=(AV*)(SvRV(phs->sv));

	if (trace_level >= 2 || dbd_verbose >= 3 ){
		PerlIO_printf(DBIc_LOGPIO(imp_sth),
                      "dbd_rebind_ph_varchar2_table(): array_numstruct=%d\n",
		  phs->array_numstruct);
	}
	/* If no number of entries to bind specified,
	 * set phs->array_numstruct to the scalar(@array) bound.
	 */
	/* av_len() returns last array index, or -1 is array is empty */
	numarrayentries=av_len( arr );

	if( numarrayentries >= 0 ){
		phs->array_numstruct = numarrayentries+1;
		if (trace_level >= 2 || dbd_verbose >= 3 ){
            PerlIO_printf(
                DBIc_LOGPIO(imp_sth),
                "dbd_rebind_ph_varchar2_table(): array_numstruct=%d (calculated) \n",
                phs->array_numstruct);
		}
	}
	/* Fix charset */
	csform = phs->csform;
	if (trace_level >= 2 || dbd_verbose >= 3 ){
        PerlIO_printf(DBIc_LOGPIO(imp_sth),
                      "dbd_rebind_ph_varchar2_table(): original csform=%d\n",
                      (int)csform);
	}
	/* Calculate each bound structure maxlen.
	* If maxlen<=0, let maxlen=MAX ( length($$_) each @array );
	*
	* Charset calculation is done inside this loop either.
	*/
	{
	unsigned int maxlen=0;
	int i;

	for(i=0;i<av_len(arr)+1;i++){
		SV *item;
		item=*(av_fetch(arr,i,0));
		if( item ){
		if( phs->maxlen <=0 ){ /* Analyze maxlength only if not forced */
			STRLEN length=0;
			if (!SvPOK(item)) {	 /* normalizations for special cases	 */
				if (SvOK(item)) {	/* ie a number, convert to string ASAP  */
					if (!(SvROK(item) && phs->is_inout)){
						sv_2pv(item, &length);
					}
				} else { /* ensure we're at least an SVt_PV (so SvPVX etc work)	 */
					(void)SvUPGRADE(item, SVt_PV);
				}
			}
			if( length == 0 ){
				length=SvCUR(item);
			}
			if( length+1 > maxlen ){
			maxlen=length+1;
			}
			if (trace_level >= 3 || dbd_verbose >= 3 ){
                PerlIO_printf(
                    DBIc_LOGPIO(imp_sth),
                    "dbd_rebind_ph_varchar2_table(): length(array[%d])=%d\n",
                    i,(int)length);
			}
		}
		if(SvUTF8(item) ){
			flag_data_is_utf8=1;
			if (trace_level >= 3 || dbd_verbose >= 3 ){
                PerlIO_printf(
                    DBIc_LOGPIO(imp_sth),
                    "dbd_rebind_ph_varchar2_table(): is_utf8(array[%d])=true\n", i);
			}
			if (csform != SQLCS_NCHAR) {
			/* try to default csform to avoid translation through non-unicode */
			if (CSFORM_IMPLIES_UTF8(imp_dbh, SQLCS_NCHAR))		/* prefer NCHAR */
				csform = SQLCS_NCHAR;
			else if (CSFORM_IMPLIES_UTF8(imp_dbh, SQLCS_IMPLICIT))
				csform = SQLCS_IMPLICIT;
			/* else leave csform == 0 */
			if (trace_level  || dbd_verbose >= 3 )
				PerlIO_printf(
                    DBIc_LOGPIO(imp_sth),
                    "dbd_rebind_ph_varchar2_table(): rebinding %s with UTF8 value %s",
                    phs->name,
					(csform == SQLCS_NCHAR)	? "so setting csform=SQLCS_IMPLICIT" :
					(csform == SQLCS_IMPLICIT) ? "so setting csform=SQLCS_NCHAR" :
					"but neither CHAR nor NCHAR are unicode\n");
			}
		}else{
			if (trace_level >= 3 || dbd_verbose >= 3 ){
                PerlIO_printf(
                    DBIc_LOGPIO(imp_sth),
                    "dbd_rebind_ph_varchar2_table(): is_utf8(array[%d])=false\n", i);
			}
		}
		}
	}
	if( phs->maxlen <=0 ){
		phs->maxlen=maxlen;
		if (trace_level >= 2 || dbd_verbose >= 3 ){
            PerlIO_printf(
                DBIc_LOGPIO(imp_sth),
                "dbd_rebind_ph_varchar2_table(): phs->maxlen calculated  =%ld\n",
                (long)maxlen);
		}
	} else{
		if (trace_level >= 2 || dbd_verbose >= 3 ){
			PerlIO_printf(
                DBIc_LOGPIO(imp_sth),
                "dbd_rebind_ph_varchar2_table(): phs->maxlen forsed =%ld\n",
                (long)maxlen);
		}
	}
	}
	/* Do not allow string bind longer than max VARCHAR2=4000+1 */
	if( phs->maxlen > 4001 ){
	phs->maxlen=4001;
	}

	if( phs->array_numstruct == 0 ){
	/* Oracle doesn't allow NULL buffers even for empty tables. Don't know why. */
		phs->array_numstruct=1;
	}
	if( phs->ora_maxarray_numentries== 0 ){
	/* Zero means "use current array length". */
		phs->ora_maxarray_numentries=phs->array_numstruct;
