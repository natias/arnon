                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2421">return location for error</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2422">list of key-value save options, followed by `NULL`</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_buffer"
              c:identifier="gdk_pixbuf_save_to_buffer"
              version="2.4"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="2753">Saves pixbuf to a new buffer in format `type`, which is currently "jpeg",
"png", "tiff", "ico" or "bmp".

This is a convenience function that uses `gdk_pixbuf_save_to_callback()`
to do the real work.

Note that the buffer is not `NUL`-terminated and may contain embedded `NUL`
characters.

If @error is set, `FALSE` will be returned and @buffer will be set to
`NULL`. Possible errors include those in the `GDK_PIXBUF_ERROR`
domain.

See `gdk_pixbuf_save()` for more details.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="392"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="2778">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2755">a `GdkPixbuf`.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="buffer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2756">location to receive a pointer
  to the new buffer.</doc>
            <array length="1" zero-terminated="0" c:type="gchar**">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="buffer_size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2758">location to receive the size of the new buffer.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2759">name of file format.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2760">return location for error, or `NULL`</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2761">list of key-value save options</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_bufferv"
              c:identifier="gdk_pixbuf_save_to_bufferv"
              version="2.4"
              throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="2846">Vector version of `gdk_pixbuf_save_to_buffer()`.

Saves pixbuf to a new buffer in format @type, which is currently "jpeg",
"tiff", "png", "ico" or "bmp".

See [method@GdkPixbuf.Pixbuf.save_to_buffer] for more details.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="400"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="2864">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2848">a `GdkPixbuf`.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="buffer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2849">
  location to receive a pointer to the new buffer.</doc>
            <array length="1" zero-terminated="0" c:type="gchar**">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="buffer_size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2851">location to receive the size of the new buffer.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2852">name of file format.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="option_keys"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2853">name of options to set</doc>
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="option_values"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2854">values for named options</doc>
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_callback"
              c:identifier="gdk_pixbuf_save_to_callback"
              version="2.4"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="2640">Saves pixbuf in format `type` by feeding the produced data to a
callback.

This function can be used when you want to store the image to something
other than a file, such as an in-memory buffer or a socket.

If @error is set, `FALSE` will be returned. Possible errors
include those in the `GDK_PIXBUF_ERROR` domain and whatever the save
function generates.

See [method@GdkPixbuf.Pixbuf.save] for more details.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="373"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="2662">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2642">a `GdkPixbuf`.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="save_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2643">a function that is called to save each block of data that
  the save routine generates.</doc>
            <type name="PixbufSaveFunc" c:type="GdkPixbufSaveFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2645">user data to pass to the save function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2646">name of file format.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2647">return location for error, or `NULL`</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2648">list of key-value save options</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_callbackv"
              c:identifier="gdk_pixbuf_save_to_callbackv"
              version="2.4"
              throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="2697">Vector version of `gdk_pixbuf_save_to_callback()`.

Saves pixbuf to a callback in format @type, which is currently "jpeg",
"png", "tiff", "ico" or "bmp".

If @error is set, `FALSE` will be returned.

See [method@GdkPixbuf.Pixbuf.save_to_callback] for more details.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="381"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="2717">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2699">a `GdkPixbuf`.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="save_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2700">a function that is called to save each block of data that
  the save routine generates.</doc>
            <type name="PixbufSaveFunc" c:type="GdkPixbufSaveFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2702">user data to pass to the save function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2703">name of file format.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="option_keys"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2704">name of options to set</doc>
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="option_values"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2705">values for named options</doc>
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_stream"
              c:identifier="gdk_pixbuf_save_to_stream"
              version="2.14"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="2990">Saves `pixbuf` to an output stream.

Supported file formats are currently "jpeg", "tiff", "png", "ico" or
"bmp". See `gdk_pixbuf_save_to_buffer()` for more details.

The `cancellable` can be used to abort the operation from another
thread. If the operation was cancelled, the error `G_IO_ERROR_CANCELLED`
will be returned. Other possible errors are in the `GDK_PIXBUF_ERROR`
and `G_IO_ERROR` domains.

The stream is not closed at the end of this call.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="441"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="3011">`TRUE` if the pixbuf was saved successfully, `FALSE` if an
  error was set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2992">a `GdkPixbuf`</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2993">a `GOutputStream` to save the pixbuf to</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2994">name of file format</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2995">optional `GCancellable` object, `NULL` to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2996">return location for error, or `NULL`</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2997">list of key-value save options</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_stream_async"
              c:identifier="gdk_pixbuf_save_to_stream_async"
              version="2.24"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="3144">Saves `pixbuf` to an output stream asynchronously.

For more details see gdk_pixbuf_save_to_stream(), which is the synchronous
version of this function.

When the operation is finished, `callback` will be called in the main thread.

You can then call gdk_pixbuf_save_to_stream_finish() to get the result of
the operation.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="449"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3146">a `GdkPixbuf`</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3147">a `GOutputStream` to which to save the pixbuf</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3148">name of file format</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3149">optional `GCancellable` object, `NULL` to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3150">a `GAsyncReadyCallback` to call when the pixbuf is saved</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3151">the data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3152">list of key-value save options</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_streamv"
              c:identifier="gdk_pixbuf_save_to_streamv"
              version="2.36"
              throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="2948">Saves `pixbuf` to an output stream.

Supported file formats are currently "jpeg", "tiff", "png", "ico" or
"bmp".

See [method@GdkPixbuf.Pixbuf.save_to_stream] for more details.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="472"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="2965">`TRUE` if the pixbuf was saved successfully, `FALSE` if an
  error was set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2950">a `GdkPixbuf`</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2951">a `GOutputStream` to save the pixbuf to</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2952">name of file format</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="option_keys"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2953">name of options to set</doc>
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="option_values"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2954">values for named options</doc>
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2955">optional `GCancellable` object, `NULL` to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_streamv_async"
              c:identifier="gdk_pixbuf_save_to_streamv_async"
              version="2.36">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="3086">Saves `pixbuf` to an output stream asynchronously.

For more details see gdk_pixbuf_save_to_streamv(), which is the synchronous
version of this function.

When the operation is finished, `callback` will be called in the main thread.

You can then call gdk_pixbuf_save_to_stream_finish() to get the result of
the operation.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="462"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3088">a `GdkPixbuf`</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3089">a `GOutputStream` to which to save the pixbuf</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3090">name of file format</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="option_keys"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3091">name of options to set</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="option_values"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3092">values for named options</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3093">optional `GCancellable` object, `NULL` to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3094">a `GAsyncReadyCallback` to call when the pixbuf is saved</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3095">the data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="savev" c:identifier="gdk_pixbuf_savev" throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="2528">Vector version of `gdk_pixbuf_save()`.

Saves pixbuf to a file in `type`, which is currently "jpeg", "png", "tiff", "ico" or "bmp".

If @error is set, `FALSE` will be returned.

See [method@GdkPixbuf.Pixbuf.save] for more details.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="326"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="2545">whether an error was set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2530">a `GdkPixbuf`.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2531">name of file to save.</doc>
            <type name="filename" c:type="const char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2532">name of file format.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="option_keys"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2533">name of options to set</doc>
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="option_values"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2534">values for named options</doc>
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="scale" c:identifier="gdk_pixbuf_scale">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-scale.c"
             line="28">Creates a transformation of the source image @src by scaling by
@scale_x and @scale_y then translating by @offset_x and @offset_y,
then renders the rectangle (@dest_x, @dest_y, @dest_width,
@dest_height) of the resulting image onto the destination image
replacing the previous contents.

Try to use gdk_pixbuf_scale_simple() first; this function is
the industrial-strength power tool you can fall back to, if
gdk_pixbuf_scale_simple() isn't powerful enough.

If the source rectangle overlaps the destination rectangle on the
same pixbuf, it will be overwritten during the scaling which
results in rendering artifacts.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-transform.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="30">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="31">the #GdkPixbuf into which to render the results</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="dest_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="32">the left coordinate for region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="33">the top coordinate for region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="34">the width of the region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="35">the height of the region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="offset_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="36">the offset in the X direction (currently rounded to an integer)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="offset_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="37">the offset in the Y direction (currently rounded to an integer)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="38">the scale factor in the X direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="39">the scale factor in the Y direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="interp_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="40">the interpolation type for the transformation.</doc>
            <type name="InterpType" c:type="GdkInterpType"/>
          </parameter>
        </parameters>
      </method>
      <method name="scale_simple" c:identifier="gdk_pixbuf_scale_simple">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-scale.c"
             line="236">Create a new pixbuf containing a copy of `src` scaled to
`dest_width` x `dest_height`.

This function leaves `src` unaffected.

The `interp_type` should be `GDK_INTERP_NEAREST` if you want maximum
speed (but when scaling down `GDK_INTERP_NEAREST` is usually unusably
ugly). The default `interp_type` should be `GDK_INTERP_BILINEAR` which
offers reasonable quality and speed.

You can scale a sub-portion of `src` by creating a sub-pixbuf
pointing into `src`; see [method@GdkPixbuf.Pixbuf.new_subpixbuf].

If `dest_width` and `dest_height` are equal to the width and height of
`src`, this function will return an unscaled copy of `src`.

For more complicated scaling/alpha blending see [method@GdkPixbuf.Pixbuf.scale]
and [method@GdkPixbuf.Pixbuf.composite].</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-transform.h"
                         line="143"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-scale.c"
               line="262">the new pixbuf</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="238">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="239">the width of destination image</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="240">the height of destination image</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="interp_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="241">the interpolation type for the transformation.</doc>
            <type name="InterpType" c:type="GdkInterpType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_option"
              c:identifier="gdk_pixbuf_set_option"
              version="2.2">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf.c"
             line="1257">Attaches a key/value pair as an option to a `GdkPixbuf`.

If `key` already exists in the list of options attached to the `pixbuf`,
the new value is ignored and `FALSE` is returned.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="506"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf.c"
               line="1268">`TRUE` on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf.c"
                 line="1259">a `GdkPixbuf`</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf.c"
                 line="1260">a nul-terminated string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf.c"
                 line="1261">a nul-terminated string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="gdk_pixbuf_unref"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.0">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf.c"
             line="430">Removes a reference from a pixbuf.</doc>
        <doc-deprecated xml:space="preserve">Use g_object_unref().</doc-deprecated>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="168"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf.c"
                 line="432">A pixbuf.</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="bits-per-sample"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_bits_per_sample">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf.c"
             line="281">The number of bits per sample.

Currently only 8 bit per sample are supported.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="colorspace"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_colorspace">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf.c"
             line="254">The color space of the pixbuf.

Currently, only `GDK_COLORSPACE_RGB` is supported.</doc>
        <type name="Colorspace"/>
      </property>
      <property name="has-alpha"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_has_alpha">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf.c"
             line="269">Whether the pixbuf has an alpha channel.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="height"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_height">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf.c"
             line="311">The number of rows of the pixbuf.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="n-channels"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_n_channels">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf.c"
             line="238">The number of samples per pixel.

Currently, only 3 or 4 samples per pixel are supported.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="pixel-bytes"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.Bytes"/>
      </property>
      <property name="pixels"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_pixels">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf.c"
             line="343">A pointer to the pixel data of the pixbuf.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="rowstride"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_rowstride">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf.c"
             line="325">The number of bytes between the start of a row and
the start of the next row.

This number must (obviously) be at least as large as the
width of the pixbuf.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="width"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_width">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf.c"
             line="297">The number of columns of the pixbuf.</doc>
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <enumeration name="PixbufAlphaMode"
                 deprecated="1"
                 deprecated-version="2.42"
                 glib:type-name="GdkPixbufAlphaMode"
                 glib:get-type="gdk_pixbuf_alpha_mode_get_type"
                 c:type="GdkPixbufAlphaMode">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-core.h"
           line="39">Control the alpha channel for drawables.

These values can be passed to gdk_pixbuf_xlib_render_to_drawable_alpha()
in gdk-pixbuf-xlib to control how the alpha channel of an image should
