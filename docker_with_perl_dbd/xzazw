	0x1C40,
	0x1C7E,
	0x1C80,
	0x2000,
	0x2007,
	0x2008,
	0x200B,
	0x2010,
	0x2011,
	0x2012,
	0x2014,
	0x2027,
	0x2028,
	0x2056,
	0x2057,
	0x2058,
	0x205C,
	0x205D,
	0x2060,
	0x2CFA,
	0x2CFD,
	0x2CFF,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E0E,
	0x2E16,
	0x2E17,
	0x2E18,
	0x2E19,
	0x2E1A,
	0x2E2A,
	0x2E2E,
	0x2E30,
	0x2E32,
	0x2E33,
	0x2E35,
	0x2E3C,
	0x2E3F,
	0x2E40,
	0x2E42,
	0x2E43,
	0x2E4B,
	0x2E4C,
	0x2E4D,
	0x2E4E,
	0x2E50,
	0x2E5D,
	0x2E5E,
	0x3000,
	0x3001,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA60E,
	0xA60F,
	0xA610,
	0xA6F3,
	0xA6F8,
	0xA8CE,
	0xA8D0,
	0xA92E,
	0xA930,
	0xA9C7,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A50,
	0x10A58,
	0x10AF0,
	0x10AF6,
	0x10B39,
	0x10B40,
	0x10EAD,
	0x10EAE,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x111C5,
	0x111C7,
	0x111C8,
	0x111C9,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144F,
	0x1145A,
	0x1145C,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11944,
	0x11947,
	0x11A41,
	0x11A45,
	0x11A9A,
	0x11A9D,
	0x11AA1,
	0x11AA3,
	0x11C41,
	0x11C46,
	0x11FFF,
	0x12000,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x16E97,
	0x16E99,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8B
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_LB__BA_invlist[] = {  /* for EBCDIC 037 */
	201,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0x4F,
	0x50,
	0xCA,
	0xCB,
	0x58A,
	0x58B,
	0x5BE,
	0x5BF,
	0x964,
	0x966,
	0xE5A,
	0xE5C,
	0xF0B,
	0xF0C,
	0xF34,
	0xF35,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xFBE,
	0xFC0,
	0xFD2,
	0xFD3,
	0x104A,
	0x104C,
	0x1361,
	0x1362,
	0x1400,
	0x1401,
	0x1680,
	0x1681,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D6,
	0x17D8,
	0x17D9,
	0x17DA,
	0x17DB,
	0x1804,
	0x1806,
	0x1B5A,
	0x1B5C,
	0x1B5D,
	0x1B61,
	0x1B7D,
	0x1B7F,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x2000,
	0x2007,
	0x2008,
	0x200B,
	0x2010,
	0x2011,
	0x2012,
	0x2014,
	0x2027,
	0x2028,
	0x2056,
	0x2057,
	0x2058,
	0x205C,
	0x205D,
	0x2060,
	0x2CFA,
	0x2CFD,
	0x2CFF,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E0E,
	0x2E16,
	0x2E17,
	0x2E18,
	0x2E19,
	0x2E1A,
	0x2E2A,
	0x2E2E,
	0x2E30,
	0x2E32,
	0x2E33,
	0x2E35,
	0x2E3C,
	0x2E3F,
	0x2E40,
	0x2E42,
	0x2E43,
	0x2E4B,
	0x2E4C,
	0x2E4D,
	0x2E4E,
	0x2E50,
	0x2E5D,
	0x2E5E,
	0x3000,
	0x3001,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA60E,
	0xA60F,
	0xA610,
	0xA6F3,
	0xA6F8,
	0xA8CE,
	0xA8D0,
	0xA92E,
	0xA930,
	0xA9C7,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A50,
	0x10A58,
	0x10AF0,
	0x10AF6,
	0x10B39,
	0x10B40,
	0x10EAD,
	0x10EAE,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x111C5,
	0x111C7,
	0x111C8,
	0x111C9,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144F,
	0x1145A,
	0x1145C,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11944,
	0x11947,
	0x11A41,
	0x11A45,
	0x11A9A,
	0x11A9D,
	0x11AA1,
	0x11AA3,
	0x11C41,
	0x11C46,
	0x11FFF,
	0x12000,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x16E97,
	0x16E99,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8B
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_LB__BB_invlist[] = {  /* for ASCII/Latin1 */
	49,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB4,
	0xB5,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2DF,
	0x2E0,
	0xC77,
	0xC78,
	0xC84,
	0xC85,
	0xF01,
	0xF05,
	0xF06,
	0xF08,
	0xF09,
	0xF0B,
	0xFD0,
	0xFD2,
	0xFD3,
	0xFD4,
	0x1806,
	0x1807,
	0x1FFD,
	0x1FFE,
	0xA874,
	0xA876,
	0xA8FC,
	0xA8FD,
	0x11175,
	0x11176,
	0x111DB,
	0x111DC,
	0x115C1,
	0x115C2,
	0x11660,
	0x1166D,
	0x119E2,
	0x119E3,
	0x11A3F,
	0x11A40,
	0x11A45,
	0x11A46,
	0x11A9E,
	0x11AA1,
	0x11C70,
	0x11C71
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_LB__BB_invlist[] = {  /* for EBCDIC 1047 */
	49,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xBE,
	0xBF,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2DF,
	0x2E0,
	0xC77,
	0xC78,
	0xC84,
	0xC85,
	0xF01,
	0xF05,
	0xF06,
	0xF08,
	0xF09,
	0xF0B,
	0xFD0,
	0xFD2,
	0xFD3,
	0xFD4,
	0x1806,
	0x1807,
	0x1FFD,
	0x1FFE,
	0xA874,
	0xA876,
	0xA8FC,
	0xA8FD,
	0x11175,
	0x11176,
	0x111DB,
	0x111DC,
	0x115C1,
	0x115C2,
	0x11660,
	0x1166D,
	0x119E2,
	0x119E3,
	0x11A3F,
	0x11A40,
	0x11A45,
	0x11A46,
	0x11A9E,
	0x11AA1,
	0x11C70,
	0x11C71
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_LB__BB_invlist[] = {  /* for EBCDIC 037 */
	49,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xBE,
	0xBF,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2DF,
	0x2E0,
	0xC77,
	0xC78,
	0xC84,
	0xC85,
	0xF01,
	0xF05,
	0xF06,
	0xF08,
	0xF09,
	0xF0B,
	0xFD0,
	0xFD2,
	0xFD3,
	0xFD4,
	0x1806,
	0x1807,
	0x1FFD,
	0x1FFE,
	0xA874,
	0xA876,
	0xA8FC,
	0xA8FD,
	0x11175,
	0x11176,
	0x111DB,
	0x111DC,
	0x115C1,
	0x115C2,
	0x11660,
	0x1166D,
	0x119E2,
	0x119E3,
	0x11A3F,
	0x11A40,
	0x11A45,
	0x11A46,
	0x11A9E,
	0x11AA1,
	0x11C70,
	0x11C71
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_LB__BK_invlist[] = {  /* for ASCII/Latin1 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB,
	0xD,
	0x2028,
	0x202A
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_LB__BK_invlist[] = {  /* for EBCDIC 1047 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB,
	0xD,
	0x2028,
	0x202A
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_LB__BK_invlist[] = {  /* for EBCDIC 037 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB,
	0xD,
	0x2028,
	0x202A
};

#  endif	/* EBCDIC 037 */

static const UV UNI_LB__CB_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFFFC,
	0xFFFD
};

static const UV UNI_LB__CJ_invlist[] = {  /* for all charsets */
	55,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3041,
	0x3042,
	0x3043,
	0x3044,
	0x3045,
	0x3046,
	0x3047,
	0x3048,
	0x3049,
	0x304A,
	0x3063,
	0x3064,
	0x3083,
	0x3084,
	0x3085,
	0x3086,
	0x3087,
	0x3088,
	0x308E,
	0x308F,
	0x3095,
	0x3097,
	0x30A1,
	0x30A2,
	0x30A3,
	0x30A4,
	0x30A5,
	0x30A6,
	0x30A7,
	0x30A8,
	0x30A9,
	0x30AA,
	0x30C3,
	0x30C4,
	0x30E3,
	0x30E4,
	0x30E5,
	0x30E6,
	0x30E7,
	0x30E8,
	0x30EE,
	0x30EF,
	0x30F5,
	0x30F7,
	0x30FC,
	0x30FD,
	0x31F0,
	0x3200,
	0xFF67,
	0xFF71,
	0x1B150,
	0x1B153,
	0x1B164,
	0x1B168
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_LB__CL_invlist[] = {  /* for ASCII/Latin1 */
	175,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7D,
	0x7E,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0x169C,
	0x169D,
	0x2046,
	0x2047,
	0x207E,
	0x207F,
	0x208E,
	0x208F,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x232A,
	0x232B,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C6,
	0x27C7,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FD,
	0x29FE,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x2E56,
	0x2E57,
	0x2E58,
	0x2E59,
	0x2E5A,
	0x2E5B,
	0x2E5C,
	0x2E5D,
	0x3001,
	0x3003,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301E,
	0x3020,
	0xFD3E,
	0xFD3F,
	0xFE11,
	0xFE13,
	0xFE18,
	0xFE19,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE45,
	0xFE48,
	0xFE49,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE53,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFF09,
	0xFF0A,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF3D,
	0xFF3E,
	0xFF5D,
	0xFF5E,
	0xFF60,
	0xFF62,
	0xFF63,
	0xFF65,
	0x1325B,
	0x1325E,
	0x13282,
	0x13283,
	0x13287,
	0x13288,
	0x13289,
	0x1328A,
	0x1337A,
	0x1337C,
	0x13438,
	0x13439,
	0x145CF,
	0x145D0
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_LB__CL_invlist[] = {  /* for EBCDIC 1047 */
	175,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD0,
	0xD1,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0x169C,
	0x169D,
	0x2046,
	0x2047,
	0x207E,
	0x207F,
	0x208E,
	0x208F,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x232A,
	0x232B,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C6,
	0x27C7,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FD,
	0x29FE,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x2E56,
	0x2E57,
	0x2E58,
	0x2E59,
	0x2E5A,
	0x2E5B,
	0x2E5C,
	0x2E5D,
	0x3001,
	0x3003,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301E,
	0x3020,
	0xFD3E,
	0xFD3F,
	0xFE11,
	0xFE13,
	0xFE18,
	0xFE19,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
