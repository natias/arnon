	return (num_errors>0) ? 0 : 1;
}


AV *
dbd_st_fetch(SV *sth, imp_sth_t *imp_sth){
	dTHX;
    D_imp_xxh(sth);
	sword status;
	D_imp_dbh_from_sth;
	int num_fields = DBIc_NUM_FIELDS(imp_sth);
	int ChopBlanks;
	int err;
	int i;
	AV *av;


	/* Check that execute() was executed sucessfully. This also implies	*/
	/* that dbd_describe() executed sucessfuly so the memory buffers	*/
	/* are allocated and bound.						*/
	if ( !DBIc_ACTIVE(imp_sth) ) {
		oci_error(sth, NULL, OCI_ERROR, imp_sth->nested_cursor ?
		"nested cursor is defunct (parent row is no longer current)" :
		"no statement executing (perhaps you need to call execute first)");
		return Nullav;
	}

	for(i=0; i < num_fields; ++i) {
		imp_fbh_t *fbh = &imp_sth->fbh[i];
		if (fbh->fetch_cleanup)
			fbh->fetch_cleanup(sth, fbh);
	}

	if (ora_fetchtest && DBIc_ROW_COUNT(imp_sth)>0) {
		--ora_fetchtest; /* trick for testing performance */
		status = OCI_SUCCESS;
	}
	else {
		if (DBIc_DBISTATE(imp_sth)->debug >= 3 || dbd_verbose >= 3 ){
			PerlIO_printf(
                DBIc_LOGPIO(imp_sth),
                "	dbd_st_fetch %d fields...\n", DBIc_NUM_FIELDS(imp_sth));
		}

		if (imp_sth->fetch_orient != OCI_DEFAULT) {
			if (imp_sth->exe_mode!=OCI_STMT_SCROLLABLE_READONLY)
				croak ("attempt to use a scrollable cursor without first setting ora_exe_mode to OCI_STMT_SCROLLABLE_READONLY\n") ;

			if (DBIc_DBISTATE(imp_sth)->debug >= 4 || dbd_verbose >= 4 )
				PerlIO_printf(
                    DBIc_LOGPIO(imp_sth),
                    "	Scrolling Fetch, position before fetch=%d, "
                    "Orientation = %s , Fetchoffset =%d\n",
					imp_sth->fetch_position, oci_fetch_options(imp_sth->fetch_orient),
                    imp_sth->fetch_offset);

			OCIStmtFetch_log_stat(imp_sth, imp_sth->stmhp, imp_sth->errhp,1, imp_sth->fetch_orient,imp_sth->fetch_offset, status);
				/*this will work without a round trip so might as well open it up for all statments handles*/
				/* default and OCI_FETCH_NEXT are the same so this avoids miscaluation on the next value*/
			if (status==OCI_NO_DATA){
                return Nullav;
            }

			OCIAttrGet_stmhp_stat(imp_sth, &imp_sth->fetch_position, 0, OCI_ATTR_CURRENT_POSITION, status);

			if (DBIc_DBISTATE(imp_sth)->debug >= 4 || dbd_verbose >= 4 )
				PerlIO_printf(
                    DBIc_LOGPIO(imp_sth),
                    "	Scrolling Fetch, postion after fetch=%d\n",
                    imp_sth->fetch_position);
		}
		else {

			if (imp_sth->row_cache_off){ /*Do not use array fetch or local cache */
				OCIStmtFetch_log_stat(imp_sth, imp_sth->stmhp, imp_sth->errhp,1,(ub2)OCI_FETCH_NEXT, OCI_DEFAULT, status);
				imp_sth->rs_fetch_count++;
				imp_sth->rs_array_idx=0;

			}
			else {  /*Array Fetch the New Normal Super speedy and very nice*/


 				imp_sth->rs_array_idx++;
				if (imp_sth->rs_array_num_rows<=imp_sth->rs_array_idx && (imp_sth->rs_array_status==OCI_SUCCESS || imp_sth->rs_array_status==OCI_SUCCESS_WITH_INFO)) {
/* 			PerlIO_printf(DBIc_LOGPIO(imp_sth), "	dbd_st_fetch fields...b\n");*/

					OCIStmtFetch_log_stat(imp_sth, imp_sth->stmhp,imp_sth->errhp,imp_sth->rs_array_size,(ub2)OCI_FETCH_NEXT,OCI_DEFAULT,status);

					imp_sth->rs_array_status=status;
					imp_sth->rs_fetch_count++;
					if (oci_warn &&  (imp_sth->rs_array_status == OCI_SUCCESS_WITH_INFO)) {
						oci_error(sth, imp_sth->errhp, status, "OCIStmtFetch");
					}
					OCIAttrGet_stmhp_stat(imp_sth, &imp_sth->rs_array_num_rows,0,OCI_ATTR_ROWS_FETCHED, status);
					imp_sth->rs_array_idx=0;
					imp_dbh->RowsInCache =imp_sth->rs_array_size;
					imp_sth->RowsInCache =imp_sth->rs_array_size;

					if (DBIc_DBISTATE(imp_sth)->debug >= 4 || dbd_verbose >= 4 || oci_warn)
						PerlIO_printf(
                            DBIc_LOGPIO(imp_sth),
                            "...Fetched %d rows\n",imp_sth->rs_array_num_rows);

				}
				imp_dbh->RowsInCache--;
			    imp_sth->RowsInCache--;




				if (imp_sth->rs_array_num_rows>imp_sth->rs_array_idx)	/* set status to success if rows in cache */
					status=OCI_SUCCESS;
				else
					status=imp_sth->rs_array_status;
			}
		}
	}

	if (status != OCI_SUCCESS && status !=OCI_NEED_DATA) {
		ora_fetchtest = 0;

		if (status == OCI_NO_DATA) {
			dTHR; 			/* for DBIc_ACTIVE_off	*/
			DBIc_ACTIVE_off(imp_sth);	/* eg finish		*/
			if (DBIc_DBISTATE(imp_sth)->debug >= 3 || dbd_verbose >= 3 || oci_warn)
				PerlIO_printf(
                    DBIc_LOGPIO(imp_sth),
                    "	dbd_st_fetch no-more-data, fetch count=%d\n",
                    imp_sth->rs_fetch_count-1);
			return Nullav;
		}
		if (status != OCI_SUCCESS_WITH_INFO) {
			dTHR; 			/* for DBIc_ACTIVE_off	*/
			DBIc_ACTIVE_off(imp_sth);	/* eg finish		*/
			oci_error(sth, imp_sth->errhp, status, "OCIStmtFetch");
			return Nullav;
		}
		if (oci_warn && (status == OCI_SUCCESS_WITH_INFO)) {
			oci_error(sth, imp_sth->errhp, status, "OCIStmtFetch");
		}


	/* for OCI_SUCCESS_WITH_INFO we fall through and let the	*/
	/* per-field rcode value be dealt with as we fetch the data	*/
	}

	av = DBIc_DBISTATE(imp_sth)->get_fbav(imp_sth);

	if (DBIc_DBISTATE(imp_sth)->debug >= 3 || dbd_verbose >= 3 ) {
		PerlIO_printf(
            DBIc_LOGPIO(imp_sth),
            "	dbd_st_fetched %d fields with status of %d(%s)\n",
            num_fields,status, oci_status_name(status));
	}

	ChopBlanks = DBIc_has(imp_sth, DBIcf_ChopBlanks);
	err = 0;

	for(i=0; i < num_fields; ++i) {
		imp_fbh_t *fbh		= &imp_sth->fbh[i];
		fb_ary_t *fb_ary	= fbh->fb_ary;
		int rc 				= fb_ary->arcode[imp_sth->rs_array_idx];
		ub1* row_data		= &fb_ary->abuf[0]+(fb_ary->bufl*imp_sth->rs_array_idx);
		SV *sv 				= AvARRAY(av)[i]; /* Note: we (re)use the SV in the AV	*/;


		if (DBIc_DBISTATE(imp_sth)->debug >= 4 || dbd_verbose >= 4 ) {
			PerlIO_printf(
                DBIc_LOGPIO(imp_sth),
                "	field #%d with rc=%d(%s)\n",i+1,rc,oci_col_return_codes(rc));
		}

		if (rc == 1406				/* field was truncated	*/
			&& ora_dbtype_is_long(fbh->dbtype)/* field is a LONG	*/
		){
			int oraperl = DBIc_COMPAT(imp_sth);
			D_imp_dbh_from_sth ;
			D_imp_drh_from_dbh ;
			if (DBIc_has(imp_sth,DBIcf_LongTruncOk) || (oraperl && SvIV(imp_drh -> ora_trunc))) {
			/* user says truncation is ok */
			/* Oraperl recorded the truncation in ora_errno so we	*/
			/* so also but only for Oraperl mode handles.		*/
				if (oraperl) sv_setiv(DBIc_ERR(imp_sth), (IV)rc);
					rc = 0;		/* but don't provoke an error here	*/
			}
		/* else fall through and let rc trigger failure below	*/
		}

		if  (rc == 0	|| 	/* the normal case*/
			(rc == 1406 && DBIc_has(imp_sth,DBIcf_LongTruncOk))/*Field Truncaded*/) {

			if (fbh->fetch_func) {
 				if (!fbh->fetch_func(sth, fbh, sv)){
					++err;	/* fetch_func already called oci_error */
				}
			}
			else {
				int datalen = fb_ary->arlen[imp_sth->rs_array_idx];
				char *p = (char*)row_data;
                if (rc == 1406 ){
			        datalen= fbh->disize;
				}


				if (fbh->ftype == SQLT_LVB){
					/* very special case for binary lobs that are directly fetched.
						Seems I have to use SQLT_LVB to get the length all other will fail*/
					datalen = *(ub4*)row_data;
					sv_setpvn(sv, (char*)row_data+ sizeof(ub4), datalen);
				}
				else {
					if (ChopBlanks && fbh->dbtype == 96) {
						while(datalen && p[datalen - 1]==' ')
							--datalen;
					}
					sv_setpvn(sv, p, (STRLEN)datalen);
#if DBIXS_REVISION > 13590
		/* If a bind type was specified we use DBI's sql_type_cast
			to cast it - currently only number types are handled */
					if ((fbh->req_type != 0) && (fbh->bind_flags != 0)) {
						int sts;
						char errstr[256];

						sts = DBIc_DBISTATE(imp_sth)->sql_type_cast_svpv(
                            aTHX_ sv, fbh->req_type, fbh->bind_flags, NULL);

						if (sts == 0) {
							sprintf(errstr,
								"over/under flow converting column %d to type %ld",
								i+1, (long)fbh->req_type);
							oci_error(sth, imp_sth->errhp, OCI_ERROR, errstr);
							return Nullav;

						}
						else if (sts == -2) {
							sprintf(errstr,
								"unsupported bind type %ld for column %d",
								(long)fbh->req_type, i+1);
                            /* issue warning */
                            DBIh_SET_ERR_CHAR(sth, imp_xxh, "0", 1, errstr, Nullch, Nullch);
                            if (CSFORM_IMPLIES_UTF8(imp_dbh, fbh->csform) ){
                                SvUTF8_on(sv);
                            }
						}
					}
					else
#endif /* DBISTATE_VERSION > 94 */
					{
						if (CSFORM_IMPLIES_UTF8(imp_dbh, fbh->csform) ){
							SvUTF8_on(sv);
						}
					}
				}
			}

		}
		else if (rc == 1405) {	/* field is null - return undef	*/
			sv_set_undef(sv);
		}
		else {  /* See odefin rcode arg description in OCI docs	*/
			char buf[200];
			char *hint = "";
			/* These may get more case-by-case treatment eventually.	*/
			if (rc == 1406) { /* field truncated (see above)  */
				if (!fbh->fetch_func) {
					/* Copy the truncated value anyway, it may be of use,	*/
					/* but it'll only be accessible via prior bind_column()	*/
					sv_setpvn(sv, (char *)row_data,fb_ary->arlen[imp_sth->rs_array_idx]);
 					if ((CSFORM_IMPLIES_UTF8(imp_dbh, fbh->csform)) && (fbh->ftype != SQLT_BIN)){
						SvUTF8_on(sv);
					}
				}

				if (ora_dbtype_is_long(fbh->dbtype)){	/* double check */
					hint = ", LongReadLen too small and/or LongTruncOk not set";
				}

			}
			else {	/* set field that caused error to undef */
				sv_set_undef(sv);
			}
			++err;	/* 'fail' this fetch but continue getting fields */
					/* Some should probably be treated as warnings but	*/
					/* for now we just treat them all as errors		*/
			sprintf(buf,"ORA-%05d error on field %d of %d, ora_type %d%s",rc, i+1, num_fields, fbh->dbtype, hint);
			oci_error(sth, imp_sth->errhp, OCI_ERROR, buf);
		}

		if (DBIc_DBISTATE(imp_sth)->debug >= 5 || dbd_verbose >= 5 ){
			PerlIO_printf(
                DBIc_LOGPIO(imp_sth),
                "\n		%p (field=%d): %s\n",	 av, i,neatsvpv(sv,10));
		}
	}
	return (err) ? Nullav : av;
}


static int
local_error(pTHX_ SV * h, const char * fmt, ...)
{
    va_list ap;
    SV * txt_sv = sv_newmortal();
    SV * code_sv = get_sv("DBI::stderr", 0);
    D_imp_xxh(h);
    if(code_sv == NULL)
    {
        code_sv  = sv_newmortal();
        sv_setiv(code_sv, 2000000000);
    }
    va_start(ap, fmt);
    sv_vsetpvf(txt_sv, fmt, &ap);
    va_end(ap);
    DBIh_SET_ERR_SV(h, imp_xxh, code_sv, txt_sv, &PL_sv_undef, &PL_sv_undef);
    return FALSE;
}

int
ora_db_reauthenticate(SV *dbh, imp_dbh_t *imp_dbh, char *uid, char *pwd)
{
	dTHX;
	sword status;
	OCISession	*seshp;
        char * driver_name;
        ub4 namelen, ulen, plen, credt;
#ifdef ORA_OCI_112
	if (cnx_is_pooled_session(aTHX_ dbh, imp_dbh))
            return local_error(aTHX_ dbh, "Can't reauthenticate pooled session");
#endif
#if defined(USE_ITHREADS) && defined(PERL_MAGIC_shared_scalar)
	if (imp_dbh->is_shared)
            return local_error(aTHX_ dbh, "Can't reauthenticate shared session");
#endif
        OCIHandleAlloc_ok(
                imp_dbh, imp_dbh->envhp,
                &seshp, OCI_HTYPE_SESSION, status
        );
        OCIAttrGet_log_stat(
            imp_dbh, imp_dbh->seshp, OCI_HTYPE_SESSION,
            &driver_name, &namelen, OCI_ATTR_DRIVER_NAME,
            imp_dbh->errhp, status
        );
        if(status == OCI_SUCCESS && namelen != 0)
        {
            OCIAttrSet_log_stat(
                imp_dbh, seshp, OCI_HTYPE_SESSION,
                driver_name, namelen, OCI_ATTR_DRIVER_NAME,
                imp_dbh->errhp, status
            );
            if (status != OCI_SUCCESS)
            {
                (void)oci_error(dbh, imp_dbh->errhp,
                        status, "OCIAttrSet OCI_ATTR_DRIVER_NAME"
                );
                OCIHandleFree_log_stat(imp_dbh, seshp, OCI_HTYPE_SESSION, status);
                return 0;
            }
        }
        plen = (ub4)strlen(pwd);
        ulen = (ub4)strlen(uid);
	if (plen == 0 && ulen == 0) credt = OCI_CRED_EXT;
        else
        {
            OCIAttrSet_log_stat(imp_dbh, seshp, OCI_HTYPE_SESSION,
                            uid, ulen,
                            (ub4) OCI_ATTR_USERNAME, imp_dbh->errhp, status);
            if (status != OCI_SUCCESS)
            {
                (void)oci_error(dbh, imp_dbh->errhp,
                        status, "OCIAttrSet OCI_ATTR_USERNAME"
                );
                OCIHandleFree_log_stat(imp_dbh, seshp, OCI_HTYPE_SESSION, status);
                return 0;
            }

            OCIAttrSet_log_stat(imp_dbh, seshp, OCI_HTYPE_SESSION,
                            ((plen) ? pwd : NULL), plen,
                    (ub4) OCI_ATTR_PASSWORD, imp_dbh->errhp, status);
            if (status != OCI_SUCCESS)
            {
                (void)oci_error(dbh, imp_dbh->errhp,
                        status, "OCIAttrSet OCI_ATTR_PASSWORD"
                );
                OCIHandleFree_log_stat(imp_dbh, seshp, OCI_HTYPE_SESSION, status);
                return 0;
            }
            credt = OCI_CRED_RDBMS;
        }

	OCISessionBegin_log_stat(imp_dbh, imp_dbh->svchp, imp_dbh->errhp, seshp,
			 credt, OCI_DEFAULT, status);
	if (status != OCI_SUCCESS) {
            oci_error(dbh, imp_dbh->errhp, status, "OCISessionBegin");
            OCIHandleFree_log_stat(imp_dbh, seshp, OCI_HTYPE_SESSION, status);
            return 0;
	}
        OCIAttrSet_log_stat(
                imp_dbh, imp_dbh->svchp,
                (ub4) OCI_HTYPE_SVCCTX,
                seshp, 0, OCI_ATTR_SESSION,
                imp_dbh->errhp, status
        );
        if (status != OCI_SUCCESS)
        {
            (void)oci_error(
                dbh, imp_dbh->errhp, status, "OCIAttrSet OCI_ATTR_SESSION"
            );
            OCISessionEnd_log_stat(imp_dbh, imp_dbh->svchp, imp_dbh->errhp,
			seshp, OCI_DEFAULT, status);
            OCIHandleFree_log_stat(imp_dbh, seshp, OCI_HTYPE_SESSION, status);
            return 0;
        }
	OCISessionEnd_log_stat(imp_dbh, imp_dbh->svchp, imp_dbh->errhp,
			imp_dbh->seshp, OCI_DEFAULT, status);
        OCIHandleFree_log_stat(imp_dbh, imp_dbh->seshp, OCI_HTYPE_SESSION, status);
        imp_dbh->seshp = seshp;
	return 1;
}


#ifdef not_used_curently
static char *
rowid2hex(OCIRowid *rowid)
{
	int i;
	SV *sv = sv_2mortal(newSVpv("",0));
	for (i = 0; i < OCI_ROWID_LEN; i++) {
		char buf[6];
		sprintf(buf, "%02X ", (int)(((ub1*)rowid)[i]));
		sv_catpv(sv, buf);
	}
	return SvPVX(sv);
}
#endif


static void *
alloc_via_sv(STRLEN len, SV **svp, int mortal)
{
	dTHX;
	SV *sv = newSVpv("",0);
	sv_grow(sv, len+1);
	memset(SvPVX(sv), 0, len);
	if (mortal)
	sv_2mortal(sv);
	if (svp)
	*svp = sv;
	return SvPVX(sv);
}


char *
find_ident_after(char *src, char *after, STRLEN *len, int copy)
{

	int seen_key = 0;
	char *orig = src;
	char *p;


	while(*src){
		if (*src == '\'') {
			char delim = *src;
			while(*src && *src != delim) ++src;
		}
		else if (*src == '-' && src[1] == '-') {
			while(*src && *src != '\n') ++src;
		}
		else if (*src == '/' && src[1] == '*') {
			while(*src && !(*src == '*' && src[1]=='/')) ++src;
		}
		else if (isALPHA(*src)) {
			if (seen_key) {
				char *start = src;
				while(*src && (isALNUM(*src) || *src=='.' || *src=='$' || *src=='"'))
					++src;
				*len = src - start;
				if (copy) {
					p = (char*)alloc_via_sv(*len, 0, 1);
					strncpy(p, start, *len);
					p[*len] = '\0';
					return p;
				}
				return start;
			}
			else if (  toLOWER(*src)==toLOWER(*after)
					&& (src==orig ? 1 : !isALPHA(src[-1]))) {
				p = after;
				while(*p && *src && toLOWER(*p)==toLOWER(*src))
					++p, ++src;
				if (!*p)
					seen_key = 1;
			}
			++src;
		}
	else
		++src;
	}
	return NULL;
}




struct lob_refetch_st {
	OCIStmt *stmthp;
	OCIBind *bindhp;
	OCIRowid *rowid;
	OCIParam *parmdp_tmp;
	OCIParam *parmdp_lob;
	int num_fields;
	SV *fbh_ary_sv;
	imp_fbh_t *fbh_ary;
};


static int
init_lob_refetch(SV *sth, imp_sth_t *imp_sth)
{
	dTHX;
	D_imp_dbh_from_sth;
	SV *sv;
	SV *sql_select;
	HV *lob_cols_hv = NULL;
	sword status;
	OCIError *errhp = imp_sth->errhp;
	OCIParam *parmhp = NULL, *collisthd = NULL, *colhd = NULL;
	ub2 numcols = 0;
	imp_fbh_t *fbh;
	int unmatched_params;
	I32 i,j;
	char *p;
	lob_refetch_t *lr = NULL;
	STRLEN tablename_len;
	char *tablename;
	char new_tablename[100];
	switch (imp_sth->stmt_type) {
		case OCI_STMT_UPDATE:
			tablename = find_ident_after(imp_sth->statement,
				"update", &tablename_len, 1);
			break;
		case OCI_STMT_INSERT:
			tablename = find_ident_after(imp_sth->statement,
				"into", &tablename_len, 1);
			break;
		default:
		return oci_error(sth, errhp, OCI_ERROR,
			"LOB refetch attempted for unsupported statement type (see also ora_auto_lob attribute)");
	}

	if (!tablename)
		return oci_error(sth, errhp, OCI_ERROR,
		"Unable to parse table name for LOB refetch");

 	if (!imp_sth->dschp){
        OCIHandleAlloc_ok(imp_sth, imp_sth->envhp, &imp_sth->dschp, OCI_HTYPE_DESCRIBE, status);
			if (status != OCI_SUCCESS) {
			oci_error(sth,imp_sth->errhp, status, "OCIHandleAlloc");
		}

	 }

	OCIDescribeAny_log_stat(imp_sth, imp_sth->svchp, errhp, tablename, strlen(tablename),
		(ub1)OCI_OTYPE_NAME, (ub1)1, (ub1)OCI_PTYPE_SYN, imp_sth->dschp, status);

	if (status == OCI_SUCCESS) { /* There is a synonym, get the schema */
		char *syn_schema=NULL;
		char *syn_name;
		ub4  tn_len = 0, syn_schema_len = 0;

                Newx(syn_name, 1 + strlen(tablename), char);

		strcpy(syn_name,tablename);
		/* Put the synonym name here for later user */

		OCIAttrGet_log_stat(imp_sth, imp_sth->dschp,  OCI_HTYPE_DESCRIBE,
				&parmhp, 0, OCI_ATTR_PARAM, errhp, status);

		OCIAttrGet_log_stat(imp_sth, parmhp, OCI_DTYPE_PARAM,
				&syn_schema, &syn_schema_len, OCI_ATTR_SCHEMA_NAME, errhp, status);


		OCIAttrGet_log_stat(imp_sth, parmhp, OCI_DTYPE_PARAM,
				&tablename, &tn_len, OCI_ATTR_NAME, errhp, status);

		strncpy(new_tablename,syn_schema,syn_schema_len);
		new_tablename[syn_schema_len+1] = '\0';
		new_tablename[syn_schema_len]='.';
		strncat(new_tablename, tablename,tn_len);

		tablename=new_tablename;

		if (DBIc_DBISTATE(imp_sth)->debug >= 3 || dbd_verbose >= 3 )
			PerlIO_printf(
                DBIc_LOGPIO(imp_sth),
                "		lob refetch using a synonym named=%s for %s \n",
                syn_name,tablename);

                Safefree(syn_name);
	}
	OCIDescribeAny_log_stat(imp_sth, imp_sth->svchp, errhp, tablename, strlen(tablename),
		(ub1)OCI_OTYPE_NAME, (ub1)1, (ub1)OCI_PTYPE_TABLE, imp_sth->dschp, status);

	if (status != OCI_SUCCESS) {
	/* XXX this OCI_PTYPE_TABLE->OCI_PTYPE_VIEW fallback should actually be	*/
	/* a loop that includes synonyms etc */
		OCIDescribeAny_log_stat(imp_sth, imp_sth->svchp, errhp, tablename, strlen(tablename),
			(ub1)OCI_OTYPE_NAME, (ub1)1, (ub1)OCI_PTYPE_VIEW, imp_sth->dschp, status);
		if (status != OCI_SUCCESS) {
			OCIHandleFree_log_stat(imp_sth, imp_sth->dschp, OCI_HTYPE_DESCRIBE, status);
			return oci_error(sth, errhp, status, "OCIDescribeAny(view)/LOB refetch");
		}
	}

	OCIAttrGet_log_stat(imp_sth, imp_sth->dschp,  OCI_HTYPE_DESCRIBE,
				&parmhp, 0, OCI_ATTR_PARAM, errhp, status);
	if (!status ) {
		OCIAttrGet_log_stat(imp_sth, parmhp, OCI_DTYPE_PARAM,
				&numcols, 0, OCI_ATTR_NUM_COLS, errhp, status);
	}

	if (!status ) {
		OCIAttrGet_log_stat(imp_sth, parmhp, OCI_DTYPE_PARAM,
				&collisthd, 0, OCI_ATTR_LIST_COLUMNS, errhp, status);
	}

	if (status != OCI_SUCCESS) {
		OCIHandleFree_log_stat(imp_sth, imp_sth->dschp, OCI_HTYPE_DESCRIBE, status);
		return oci_error(sth, errhp, status, "OCIDescribeAny/OCIAttrGet/LOB refetch");
	}

	if (DBIc_DBISTATE(imp_sth)->debug >= 3 || dbd_verbose >= 3 )
		PerlIO_printf(
            DBIc_LOGPIO(imp_sth),
            "		lob refetch from table %s, %d columns:\n",
            tablename, numcols);

	for (i = 1; i <= (long)numcols; i++) {
		ub2 col_dbtype;
		char *col_name;
		ub4  col_name_len;
		OCIParamGet_log_stat(imp_sth, collisthd, OCI_DTYPE_PARAM, errhp, (dvoid**)&colhd, i, status);
		if (status)
			break;

		OCIAttrGet_log_stat(imp_sth, colhd, OCI_DTYPE_PARAM, &col_dbtype, 0,
							OCI_ATTR_DATA_TYPE, errhp, status);
		if (status)
			break;

		OCIAttrGet_log_stat(imp_sth, colhd, OCI_DTYPE_PARAM, &col_name, &col_name_len,
				OCI_ATTR_NAME, errhp, status);
		if (status)
			break;

		if (DBIc_DBISTATE(imp_sth)->debug >= 3 || dbd_verbose >= 3 )
			PerlIO_printf(
                DBIc_LOGPIO(imp_sth),
                "		lob refetch table col %d: '%.*s' otype %d\n",
				(int)i, (int)col_name_len,col_name, col_dbtype);

		if (col_dbtype != SQLT_CLOB && col_dbtype != SQLT_BLOB)
			continue;

		if (!lob_cols_hv)
			lob_cols_hv = newHV();

		sv = newSViv(col_dbtype);
		(void)sv_setpvn(sv, col_name, col_name_len);

		if (CSFORM_IMPLIES_UTF8(imp_dbh, SQLCS_IMPLICIT))
			SvUTF8_on(sv);

		(void)SvIOK_on(sv);	/* "what a wonderful hack!" */
		(void)hv_store(lob_cols_hv, col_name,col_name_len, sv,0);
		OCIDescriptorFree_log(imp_sth, colhd, OCI_DTYPE_PARAM);
		colhd = NULL;
	}

	if (colhd)
		OCIDescriptorFree_log(imp_sth, colhd, OCI_DTYPE_PARAM);

	if (status != OCI_SUCCESS) {
		oci_error(sth, errhp, status,
			"OCIDescribeAny/OCIParamGet/OCIAttrGet/LOB refetch");
		OCIHandleFree_log_stat(imp_sth, imp_sth->dschp, OCI_HTYPE_DESCRIBE, status);
		return 0;
	}

	if (!lob_cols_hv)
		return oci_error(sth, errhp, OCI_ERROR,
			"LOB refetch failed, no lobs in table");

	/*	our bind params are in %imp_sth->all_params_hv
	our table cols are in %lob_cols_hv
	we now iterate through our bind params
	and allocate them to the appropriate table columns
	*/
	Newz(1, lr, 1, lob_refetch_t);
	unmatched_params = 0;
	lr->num_fields = 0;
	lr->fbh_ary = (imp_fbh_t*)alloc_via_sv(sizeof(imp_fbh_t) * HvKEYS(lob_cols_hv)+1,
	&lr->fbh_ary_sv, 0);

	sql_select = sv_2mortal(newSVpv("select ",0));

	hv_iterinit(imp_sth->all_params_hv);
	while( (sv = hv_iternextsv(imp_sth->all_params_hv, &p, &i)) != NULL ) {
		int matched = 0;
		phs_t *phs = (phs_t*)(void*)SvPVX(sv);

		if (sv == &PL_sv_undef || !phs)
			croak("panic: unbound params");

		if (phs->ftype != SQLT_CLOB && phs->ftype != SQLT_BLOB)
			continue;

		hv_iterinit(lob_cols_hv);

		while( (sv = hv_iternextsv(lob_cols_hv, &p, &j)) != NULL ) {
			char sql_field[200];
			if (phs->ora_field) {	/* must match this phs by field name	*/
				char *ora_field_name = SvPV(phs->ora_field,PL_na);
				if (SvCUR(phs->ora_field) != SvCUR(sv)
					|| ibcmp(ora_field_name, SvPV(sv,PL_na), (I32)SvCUR(sv) ) )
					continue;
			}
			else {			/* basic dumb match by type		*/
				if (phs->ftype != SvIV(sv)){
					continue;
				}
				else {			/* got a type match - check it's safe	*/
					SV *sv_other;
					char *p_other;
					/* would any other lob field match this type? */
					while( (sv_other = hv_iternextsv(lob_cols_hv, &p_other, &i)) != NULL ) {
						if (phs->ftype != SvIV(sv_other))
							continue;
						if (DBIc_DBISTATE(imp_sth)->debug >= 3 || dbd_verbose >= 3 )
							PerlIO_printf(
                                DBIc_LOGPIO(imp_sth),
                                "		both %s and %s have type %d - ambiguous\n",
                                neatsvpv(sv,0), neatsvpv(sv_other,0),
                                (int)SvIV(sv_other));
						Safefree(lr);
						sv_free((SV*)lob_cols_hv);
						return oci_error(sth, errhp, OCI_ERROR,
						"Need bind_param(..., { ora_field=>... }) attribute to identify table LOB field names");
					}
				}
			}

			matched = 1;
			sprintf(sql_field, "%s%s \"%s\"",
			(SvCUR(sql_select)>7)?", ":"", p, &phs->name[1]);
			sv_catpv(sql_select, sql_field);

			if (DBIc_DBISTATE(imp_sth)->debug >= 3 || dbd_verbose >= 3 )
				PerlIO_printf(
                    DBIc_LOGPIO(imp_sth),
                    "		lob refetch %s param: otype %d, matched field '%s' %s(%s)\n",
					phs->name, phs->ftype, p,
					(phs->ora_field) ? "by name " : "by type ", sql_field);
					(void)hv_delete(lob_cols_hv, p, i, G_DISCARD);
					fbh = &lr->fbh_ary[lr->num_fields++];
					fbh->name	= phs->name;
					fbh->ftype  = phs->ftype;
					fbh->dbtype = phs->ftype;
					fbh->disize = 99;
					fbh->desc_t = OCI_DTYPE_LOB;
					OCIDescriptorAlloc_ok(imp_sth, imp_sth->envhp, &fbh->desc_h, fbh->desc_t);

			break;	/* we're done with this placeholder now	*/

		}
		if (!matched) {
			++unmatched_params;
			if (DBIc_DBISTATE(imp_sth)->debug >= 3 || dbd_verbose >= 3 )
				PerlIO_printf(
                    DBIc_LOGPIO(imp_sth),
					"		lob refetch %s param: otype %d, UNMATCHED\n",
					phs->name, phs->ftype);
		}
	}
	sv_free((SV*)lob_cols_hv);

	if (unmatched_params) {
		Safefree(lr);
		return oci_error(sth, errhp, OCI_ERROR,
			"Can't match some parameters to LOB fields in the table, check type and name");
	}

	sv_catpv(sql_select, " from ");
	sv_catpv(sql_select, tablename);
	sv_catpv(sql_select, " where rowid = :rid for update"); /* get row with lock */
	if (DBIc_DBISTATE(imp_sth)->debug >= 3 || dbd_verbose >= 3 )
		PerlIO_printf(
            DBIc_LOGPIO(imp_sth),
			"		lob refetch sql: %s\n", SvPVX(sql_select));
	lr->stmthp = NULL;
	lr->bindhp = NULL;
	lr->rowid  = NULL;
	lr->parmdp_tmp = NULL;
	lr->parmdp_lob = NULL;
	OCIHandleAlloc_ok(imp_sth, imp_sth->envhp, &lr->stmthp, OCI_HTYPE_STMT, status);
	OCIStmtPrepare_log_stat(imp_sth, lr->stmthp, errhp,
		(text*)SvPVX(sql_select), SvCUR(sql_select), OCI_NTV_SYNTAX,
			OCI_DEFAULT, status);

	if (status != OCI_SUCCESS) {
		OCIHandleFree(lr->stmthp, OCI_HTYPE_STMT);
		Safefree(lr);
		return oci_error(sth, errhp, status, "OCIStmtPrepare/LOB refetch");
	}

	/* bind the rowid input */
	OCIDescriptorAlloc_ok(imp_sth, imp_sth->envhp, &lr->rowid, OCI_DTYPE_ROWID);
	OCIBindByName_log_stat(imp_sth, lr->stmthp, &lr->bindhp, errhp, (text*)":rid", 4,
		&lr->rowid, sizeof(OCIRowid*), SQLT_RDD, 0,0,0,0,0, OCI_DEFAULT, status);
	if (status != OCI_SUCCESS) {
		OCIDescriptorFree_log(imp_sth, lr->rowid, OCI_DTYPE_ROWID);
		OCIHandleFree(lr->stmthp, OCI_HTYPE_STMT);
		Safefree(lr);
		return oci_error(sth, errhp, status, "OCIBindByPos/LOB refetch");
	}

		/* define the output fields */
	for(i=0; i < lr->num_fields; ++i) {
		OCIDefine *defnp = NULL;
		imp_fbh_t *fbh = &lr->fbh_ary[i];
		phs_t *phs;
		SV **phs_svp = hv_fetch(imp_sth->all_params_hv, fbh->name,strlen(fbh->name), 0);
		if (!phs_svp)
			croak("panic: LOB refetch for '%s' param (%ld) - name not found",fbh->name,(unsigned long)i+1);
		phs = (phs_t*)(void*)SvPVX(*phs_svp);
		fbh->special = phs;
		if (DBIc_DBISTATE(imp_sth)->debug >= 3 || dbd_verbose >= 3 )
			PerlIO_printf(
                DBIc_LOGPIO(imp_sth),
				"		lob refetch %d for '%s' param: ftype %d setup\n",
		(int)i+1,fbh->name, fbh->dbtype);
		fbh->fb_ary = fb_ary_alloc(fbh->disize, 1);
		OCIDefineByPos_log_stat(imp_sth, lr->stmthp, &defnp, errhp, (ub4)i+1,
			&fbh->desc_h, -1, (ub2)fbh->ftype,
		fbh->fb_ary->aindp, 0, fbh->fb_ary->arcode, OCI_DEFAULT, status);
		if (status != OCI_SUCCESS) {
			OCIDescriptorFree_log(imp_sth, lr->rowid, OCI_DTYPE_ROWID);
			OCIHandleFree(lr->stmthp, OCI_HTYPE_STMT);
			Safefree(lr);
			fb_ary_free(fbh->fb_ary);
			fbh->fb_ary = NULL;
			return oci_error(sth, errhp, status, "OCIDefineByPos/LOB refetch");
		}
	}

	OCIHandleFree_log_stat(imp_sth, imp_sth->dschp, OCI_HTYPE_DESCRIBE, status);

	imp_sth->lob_refetch = lr;	/* structure copy */
	return 1;
}

int
post_execute_lobs(SV *sth, imp_sth_t *imp_sth, ub4 row_count)	/* XXX leaks handles on error */
{

	/* To insert a new LOB transparently (without using 'INSERT . RETURNING .')	*/
	/* we have to insert an empty LobLocator and then fetch it back from the	*/
	/* server before we can call OCILobWrite on it! This function handles that.	*/
	dTHX;
	sword status;
	int i;
	OCIError *errhp = imp_sth->errhp;
	lob_refetch_t *lr;
	D_imp_dbh_from_sth;
	SV *dbh = (SV*)DBIc_MY_H(imp_dbh);

	if (!imp_sth->auto_lob)
		 return 1;	/* application doesn't want magical lob handling */

	if (imp_sth->stmt_type == OCI_STMT_BEGIN || imp_sth->stmt_type == OCI_STMT_DECLARE){
	/* PL/SQL is handled by lob_phs_ora_free_templobpost_execute */
		if (imp_sth->has_lobs) { 	  /*get rid of OCILob Temporary used in non inout bind*/
			SV *phs_svp;
			I32 i;
			char *p;
			hv_iterinit(imp_sth->all_params_hv);
			while( (phs_svp = hv_iternextsv(imp_sth->all_params_hv, &p, &i)) != NULL ) {
				phs_t *phs = (phs_t*)(void*)SvPVX(phs_svp);



				if (phs->desc_h && !phs->is_inout){
                    OCILobFreeTemporary_log_stat(imp_sth, imp_sth->svchp, imp_sth->errhp, phs->desc_h, status);


				/*	boolean lobEmpty=1;*/
				/*	OCIAttrSet_log_stat(phs->desc_h, phs->desc_t,&lobEmpty, 0, OCI_ATTR_LOBEMPTY, imp_sth->errhp, status);*/
				/*	OCIHandleFree_log_stat(phs->desc_h, phs->desc_t, status);*/
				}
				/*this seem to cause an error later on so I just got rid of it for Now does */
				/* not seem to kill anything */
			}
		}
		return 1;
	}

	if (row_count == 0)
		return 1;	/* nothing to do */
	if (row_count  > 1)
		return oci_error(sth, errhp, OCI_ERROR, "LOB refetch attempted for multiple rows");

	if (!imp_sth->lob_refetch) {
		if (!init_lob_refetch(sth, imp_sth))
			return 0;	/* init_lob_refetch already called oci_error */
	}
	lr = imp_sth->lob_refetch;

	OCIAttrGet_stmhp_stat(imp_sth, lr->rowid, 0, OCI_ATTR_ROWID,status);

	if (status != OCI_SUCCESS)
		return oci_error(sth, errhp, status, "OCIAttrGet OCI_ATTR_ROWID /LOB refetch");

	OCIStmtExecute_log_stat(imp_sth, imp_sth->svchp, lr->stmthp, errhp,1, 0, NULL, NULL, OCI_DEFAULT, status);	/* execute and fetch */

	if (status != OCI_SUCCESS)
		return oci_error(sth, errhp, status,

	ora_sql_error(imp_sth,"OCIStmtExecute/LOB refetch"));

	for(i=0; i < lr->num_fields; ++i) {
		imp_fbh_t *fbh = &lr->fbh_ary[i];
		int rc = fbh->fb_ary->arcode[0];
		phs_t *phs = (phs_t*)fbh->special;
		ub4 amtp;

		(void)SvUPGRADE(phs->sv, SVt_PV);

		amtp = SvCUR(phs->sv);		/* XXX UTF8? */
		if (rc == 1405) {		/* NULL - return undef */
			sv_set_undef(phs->sv);
			status = OCI_SUCCESS;
		}
		else if (amtp > 0) {	/* since amtp==0 & OCI_ONE_PIECE fail (OCI 8.0.4) */
			if( ! fbh->csid ) {
				ub1 csform = SQLCS_IMPLICIT;
				ub2 csid = 0;
				OCILobCharSetForm_log_stat(imp_sth,
                                           imp_sth->envhp,
                                           errhp,
                                           (OCILobLocator*)fbh->desc_h,
                                           &csform,
                                           status );
				if (status != OCI_SUCCESS)
					return oci_error(sth, errhp, status, "OCILobCharSetForm");
#ifdef OCI_ATTR_CHARSET_ID
		/* Effectively only used so AL32UTF8 works properly */
				OCILobCharSetId_log_stat(imp_sth,
                                         imp_sth->envhp,
                                         errhp,
                                         (OCILobLocator*)fbh->desc_h,
                                         &csid,
                                         status );
				if (status != OCI_SUCCESS)
					return oci_error(sth, errhp, status, "OCILobCharSetId");
#endif /* OCI_ATTR_CHARSET_ID */
		/* if data is utf8 but charset isn't then switch to utf8 csid */
				csid = (SvUTF8(phs->sv) && !CS_IS_UTF8(csid)) ? utf8_csid : CSFORM_IMPLIED_CSID(imp_dbh, csform);
				fbh->csid = csid;
				fbh->csform = csform;
			}

			if (DBIc_DBISTATE(imp_sth)->debug >= 3 || dbd_verbose >= 3 )
				PerlIO_printf(
                    DBIc_LOGPIO(imp_sth),
                    "	  calling OCILobWrite fbh->csid=%d fbh->csform=%d amtp=%d\n",
					fbh->csid, fbh->csform, amtp );

			OCILobWrite_log_stat(imp_sth, imp_sth->svchp, errhp,
				(OCILobLocator*)fbh->desc_h, &amtp, 1, SvPVX(phs->sv), amtp, OCI_ONE_PIECE,
				0,0, fbh->csid ,fbh->csform, status);

			if (status != OCI_SUCCESS) {
				return oci_error(sth, errhp, status, "OCILobWrite in post_execute_lobs");
			}

		} else {			/* amtp==0 so truncate LOB to zero length */
			OCILobTrim_log_stat(imp_sth, imp_sth->svchp, errhp, (OCILobLocator*)fbh->desc_h, 0, status);

			if (status != OCI_SUCCESS) {
				return oci_error(sth, errhp, status, "OCILobTrim in post_execute_lobs");
			}

		}

		if (DBIc_DBISTATE(imp_sth)->debug >= 3 || dbd_verbose >= 3 )
			PerlIO_printf(
                DBIc_LOGPIO(imp_sth),
			"		lob refetch %d for '%s' param: ftype %d, len %ld: %s %s\n",
			i+1,fbh->name, fbh->dbtype, ul_t(amtp),
			(rc==1405 ? "NULL" : (amtp > 0) ? "LobWrite" : "LobTrim"), oci_status_name(status));
