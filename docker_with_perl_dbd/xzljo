 ткЩ  ткЪ    U+2A99, U+2A9A   DOUBLE-LINE EQUAL TO OR LESS-THAN/GREATER-THAN
 ткЫ  ткЬ    U+2A9B, U+2A9C   DOUBLE-LINE SLANTED EQUAL TO OR LESS-THAN/
                          GREATER-THAN
 ткЭ  ткЮ    U+2A9D, U+2A9E   SIMILAR OR LESS-THAN/GREATER-THAN
 ткЯ  тка    U+2A9F, U+2AA0   SIMILAR ABOVE LESS-THAN/GREATER-THAN ABOVE
                          EQUALS SIGN
 ткб  ткв    U+2AA1, U+2AA2   DOUBLE NESTED LESS-THAN/GREATER-THAN
 ткж  ткз    U+2AA6, U+2AA7   LESS-THAN/GREATER-THAN CLOSED BY CURVE
 тки  ткй    U+2AA8, U+2AA9   LESS-THAN/GREATER-THAN CLOSED BY CURVE ABOVE
                          SLANTED EQUAL
 ткк  ткл    U+2AAA, U+2AAB   SMALLER THAN/LARGER THAN
 ткм  ткн    U+2AAC, U+2AAD   SMALLER THAN/LARGER THAN OR EQUAL TO
 ткп  тк░    U+2AAF, U+2AB0   PRECEDES/SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN
 тк▒  тк▓    U+2AB1, U+2AB2   PRECEDES/SUCCEEDS ABOVE SINGLE-LINE NOT EQUAL TO
 тк│  тк┤    U+2AB3, U+2AB4   PRECEDES/SUCCEEDS ABOVE EQUALS SIGN
 тк╡  тк╢    U+2AB5, U+2AB6   PRECEDES/SUCCEEDS ABOVE NOT EQUAL TO
 тк╖  тк╕    U+2AB7, U+2AB8   PRECEDES/SUCCEEDS ABOVE ALMOST EQUAL TO
 тк╣  тк║    U+2AB9, U+2ABA   PRECEDES/SUCCEEDS ABOVE NOT ALMOST EQUAL TO
 тк╗  тк╝    U+2ABB, U+2ABC   DOUBLE PRECEDES/SUCCEEDS
 тк╜  тк╛    U+2ABD, U+2ABE   SUBSET/SUPERSET WITH DOT
 тк┐  тлА    U+2ABF, U+2AC0   SUBSET/SUPERSET WITH PLUS SIGN BELOW
 тлБ  тлВ    U+2AC1, U+2AC2   SUBSET/SUPERSET WITH MULTIPLICATION SIGN BELOW
 тлГ  тлД    U+2AC3, U+2AC4   SUBSET/SUPERSET OF OR EQUAL TO WITH DOT ABOVE
 тлЕ  тлЖ    U+2AC5, U+2AC6   SUBSET/SUPERSET OF ABOVE EQUALS SIGN
 тлЗ  тлИ    U+2AC7, U+2AC8   SUBSET/SUPERSET OF ABOVE TILDE OPERATOR
 тлЙ  тлК    U+2AC9, U+2ACA   SUBSET/SUPERSET OF ABOVE ALMOST EQUAL TO
 тлЛ  тлМ    U+2ACB, U+2ACC   SUBSET/SUPERSET OF ABOVE NOT EQUAL TO
 тлП  тлР    U+2ACF, U+2AD0   CLOSED SUBSET/SUPERSET
 тлС  тлТ    U+2AD1, U+2AD2   CLOSED SUBSET/SUPERSET OR EQUAL TO
 тлХ  тлЦ    U+2AD5, U+2AD6   SUBSET/SUPERSET ABOVE SUBSET/SUPERSET
 тле  тКл    U+2AE5, U+22AB   DOUBLE VERTICAL BAR DOUBLE LEFT/RIGHT TURNSTILE
 тл╖  тл╕    U+2AF7, U+2AF8   TRIPLE NESTED LESS-THAN/GREATER-THAN
 тл╣  тл║    U+2AF9, U+2AFA   DOUBLE-LINE SLANTED LESS-THAN/GREATER-THAN OR
                          EQUAL TO
 тнЖ  тнЕ    U+2B46, U+2B45   RIGHT/LEFTWARDS QUADRUPLE ARROW
 тнЗ  тнЙ    U+2B47, U+2B49   REVERSE TILDE OPERATOR ABOVE RIGHTWARDS ARROW,
                          TILDE OPERATOR ABOVE LEFTWARDS ARROW
 тнИ  тнК    U+2B48, U+2B4A   RIGHTWARDS ARROW ABOVE REVERSE ALMOST EQUAL
                          TO,  LEFTWARDS ARROW ABOVE ALMOST EQUAL TO
 тнМ  те│    U+2B4C, U+2973   RIGHTWARDS ARROW ABOVE REVERSE TILDE OPERATOR,
                          LEFTWARDS ARROW ABOVE TILDE OPERATOR
 тнв  тна    U+2B62, U+2B60   RIGHT/LEFTWARDS TRIANGLE-HEADED ARROW
 тнм  тнк    U+2B6C, U+2B6A   RIGHT/LEFTWARDS TRIANGLE-HEADED DASHED ARROW
 тн▓  тн░    U+2B72, U+2B70   RIGHT/LEFTWARDS TRIANGLE-HEADED ARROW TO BAR
 тн╝  тн║    U+2B7C, U+2B7A   RIGHT/LEFTWARDS TRIANGLE-HEADED ARROW WITH
                          DOUBLE VERTICAL STROKE
 тоЖ  тоД    U+2B86, U+2B84   RIGHT/LEFTWARDS TRIANGLE-HEADED PAIRED ARROWS
 тоК  тоИ    U+2B8A, U+2B88   RIGHT/LEFTWARDS BLACK CIRCLED WHITE ARROW
 тоХ  тмЕ    U+2B95, U+2B05   RIGHT/LEFTWARDS BLACK ARROW
 тоЪ  тоШ    U+2B9A, U+2B98   THREE-D TOP-LIGHTED RIGHT/LEFTWARDS EQUILATERAL
                          ARROWHEAD
 тоЮ  тоЬ    U+2B9E, U+2B9C   BLACK RIGHT/LEFTWARDS EQUILATERAL ARROWHEAD
 тоб  тоа    U+2BA1, U+2BA0   DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP
                          RIGHT/LEFTWARDS
 тог  тов    U+2BA3, U+2BA2   UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP
                          RIGHT/LEFTWARDS
 той  тои    U+2BA9, U+2BA8   BLACK CURVED DOWNWARDS AND RIGHT/LEFTWARDS ARROW
 тол  ток    U+2BAB, U+2BAA   BLACK CURVED UPWARDS AND RIGHT/LEFTWARDS ARROW
 то▒  то░    U+2BB1, U+2BB0   RIBBON ARROW DOWN RIGHT/LEFT
 то│  то▓    U+2BB3, U+2BB2   RIBBON ARROW UP RIGHT/LEFT
 тпо  тпм    U+2BEE, U+2BEC   RIGHT/LEFTWARDS TWO-HEADED ARROW WITH TRIANGLE
                          ARROWHEADS
 т╕В  т╕Г    U+2E02, U+2E03   LEFT/RIGHT SUBSTITUTION BRACKET
 т╕Г  т╕В    U+2E03, U+2E02   RIGHT/LEFT SUBSTITUTION BRACKET
 т╕Д  т╕Е    U+2E04, U+2E05   LEFT/RIGHT DOTTED SUBSTITUTION BRACKET
 т╕Е  т╕Д    U+2E05, U+2E04   RIGHT/LEFT DOTTED SUBSTITUTION BRACKET
 т╕Й  т╕К    U+2E09, U+2E0A   LEFT/RIGHT TRANSPOSITION BRACKET
 т╕К  т╕Й    U+2E0A, U+2E09   RIGHT/LEFT TRANSPOSITION BRACKET
 т╕М  т╕Н    U+2E0C, U+2E0D   LEFT/RIGHT RAISED OMISSION BRACKET
 т╕Н  т╕М    U+2E0D, U+2E0C   RIGHT/LEFT RAISED OMISSION BRACKET
 т╕С  т╕Р    U+2E11, U+2E10   REVERSED FORKED PARAGRAPHOS,  FORKED PARAGRAPHOS
 т╕Ь  т╕Э    U+2E1C, U+2E1D   LEFT/RIGHT LOW PARAPHRASE BRACKET
 т╕Э  т╕Ь    U+2E1D, U+2E1C   RIGHT/LEFT LOW PARAPHRASE BRACKET
 т╕а  т╕б    U+2E20, U+2E21   LEFT/RIGHT VERTICAL BAR WITH QUILL
 т╕б  т╕а    U+2E21, U+2E20   RIGHT/LEFT VERTICAL BAR WITH QUILL
 т╕в  т╕г    U+2E22, U+2E23   TOP LEFT/RIGHT HALF BRACKET
 т╕д  т╕е    U+2E24, U+2E25   BOTTOM LEFT/RIGHT HALF BRACKET
 т╕ж  т╕з    U+2E26, U+2E27   LEFT/RIGHT SIDEWAYS U BRACKET
 т╕и  т╕й    U+2E28, U+2E29   LEFT/RIGHT DOUBLE PARENTHESIS
 т╕╢  т╕╖    U+2E36, U+2E37   DAGGER WITH LEFT/RIGHT GUARD
 т╣В  тАЮ    U+2E42, U+201E   DOUBLE LOW-REVERSED-9 QUOTATION MARK,  DOUBLE
                          LOW-9 QUOTATION MARK
 т╣Х  т╣Ц    U+2E55, U+2E56   LEFT/RIGHT SQUARE BRACKET WITH STROKE
 т╣Ч  т╣Ш    U+2E57, U+2E58   LEFT/RIGHT SQUARE BRACKET WITH DOUBLE STROKE
 т╣Щ  т╣Ъ    U+2E59, U+2E5A   TOP HALF LEFT/RIGHT PARENTHESIS
 т╣Ы  т╣Ь    U+2E5B, U+2E5C   BOTTOM HALF LEFT/RIGHT PARENTHESIS
 уАИ уАЙ   U+3008, U+3009   LEFT/RIGHT ANGLE BRACKET
 уАК уАЛ   U+300A, U+300B   LEFT/RIGHT DOUBLE ANGLE BRACKET
 уАМ уАН   U+300C, U+300D   LEFT/RIGHT CORNER BRACKET
 уАО уАП   U+300E, U+300F   LEFT/RIGHT WHITE CORNER BRACKET
 уАР уАС   U+3010, U+3011   LEFT/RIGHT BLACK LENTICULAR BRACKET
 уАФ уАХ   U+3014, U+3015   LEFT/RIGHT TORTOISE SHELL BRACKET
 уАЦ уАЧ   U+3016, U+3017   LEFT/RIGHT WHITE LENTICULAR BRACKET
 уАШ уАЩ   U+3018, U+3019   LEFT/RIGHT WHITE TORTOISE SHELL BRACKET
 уАЪ уАЫ   U+301A, U+301B   LEFT/RIGHT WHITE SQUARE BRACKET
 уАЭ уАЮ   U+301D, U+301E   REVERSED DOUBLE PRIME QUOTATION MARK,  DOUBLE
                          PRIME QUOTATION MARK
 ъзБ  ъзВ    U+A9C1, U+A9C2   JAVANESE LEFT/RIGHT RERENGGAN
 я┤╛  я┤┐    U+FD3E, U+FD3F   ORNATE LEFT/RIGHT PARENTHESIS
 я╣Щ я╣Ъ   U+FE59, U+FE5A   SMALL LEFT/RIGHT PARENTHESIS
 я╣Ы я╣Ь   U+FE5B, U+FE5C   SMALL LEFT/RIGHT CURLY BRACKET
 я╣Э я╣Ю   U+FE5D, U+FE5E   SMALL LEFT/RIGHT TORTOISE SHELL BRACKET
 я╣д я╣е   U+FE64, U+FE65   SMALL LESS-THAN/GREATER-THAN SIGN
 я╝И я╝Й   U+FF08, U+FF09   FULLWIDTH LEFT/RIGHT PARENTHESIS
 я╝Ь я╝Ю   U+FF1C, U+FF1E   FULLWIDTH LESS-THAN/GREATER-THAN SIGN
 я╝╗ я╝╜   U+FF3B, U+FF3D   FULLWIDTH LEFT/RIGHT SQUARE BRACKET
 я╜Ы я╜Э   U+FF5B, U+FF5D   FULLWIDTH LEFT/RIGHT CURLY BRACKET
 я╜Я я╜а   U+FF5F, U+FF60   FULLWIDTH LEFT/RIGHT WHITE PARENTHESIS
 я╜в  я╜г    U+FF62, U+FF63   HALFWIDTH LEFT/RIGHT CORNER BRACKET
 я┐л  я┐й    U+FFEB, U+FFE9   HALFWIDTH RIGHT/LEFTWARDS ARROW
 ЁЭДГ  ЁЭДВ    U+1D103, U+1D102 MUSICAL SYMBOL REVERSE FINAL BARLINE,  MUSICAL
                          SYMBOL FINAL BARLINE
 ЁЭДЖ  ЁЭДЗ    U+1D106, U+1D107 MUSICAL SYMBOL LEFT/RIGHT REPEAT SIGN
 ЁЯСЙ ЁЯСИ   U+1F449, U+1F448 WHITE RIGHT/LEFT POINTING BACKHAND INDEX
 ЁЯФИ ЁЯХи    U+1F508, U+1F568 SPEAKER,  RIGHT SPEAKER
 ЁЯФЙ ЁЯХй    U+1F509, U+1F569 SPEAKER WITH ONE SOUND WAVE,  RIGHT SPEAKER WITH
                          ONE SOUND WAVE
 ЁЯФК ЁЯХк    U+1F50A, U+1F56A SPEAKER WITH THREE SOUND WAVES,  RIGHT SPEAKER
                          WITH THREE SOUND WAVES
 ЁЯХ╗  ЁЯХ╜    U+1F57B, U+1F57D LEFT/RIGHT HAND TELEPHONE RECEIVER
 ЁЯЦЩ  ЁЯЦШ    U+1F599, U+1F598 SIDEWAYS WHITE RIGHT/LEFT POINTING INDEX
 ЁЯЦЫ  ЁЯЦЪ    U+1F59B, U+1F59A SIDEWAYS BLACK RIGHT/LEFT POINTING INDEX
 ЁЯЦЭ  ЁЯЦЬ    U+1F59D, U+1F59C BLACK RIGHT/LEFT POINTING BACKHAND INDEX
 ЁЯЧж  ЁЯЧз    U+1F5E6, U+1F5E7 THREE RAYS LEFT/RIGHT
 ЁЯаВ  ЁЯаА    U+1F802, U+1F800 RIGHT/LEFTWARDS ARROW WITH SMALL TRIANGLE
                          ARROWHEAD
 ЁЯаЖ  ЁЯаД    U+1F806, U+1F804 RIGHT/LEFTWARDS ARROW WITH MEDIUM TRIANGLE
                          ARROWHEAD
 ЁЯаК  ЁЯаИ    U+1F80A, U+1F808 RIGHT/LEFTWARDS ARROW WITH LARGE TRIANGLE
                          ARROWHEAD
 ЁЯаТ  ЁЯаР    U+1F812, U+1F810 RIGHT/LEFTWARDS ARROW WITH SMALL EQUILATERAL
                          ARROWHEAD
 ЁЯаЦ  ЁЯаФ    U+1F816, U+1F814 RIGHT/LEFTWARDS ARROW WITH EQUILATERAL ARROWHEAD
 ЁЯаЪ  ЁЯаШ    U+1F81A, U+1F818 HEAVY RIGHT/LEFTWARDS ARROW WITH EQUILATERAL
                          ARROWHEAD
 ЁЯаЮ  ЁЯаЬ    U+1F81E, U+1F81C HEAVY RIGHT/LEFTWARDS ARROW WITH LARGE
                          EQUILATERAL ARROWHEAD
 ЁЯав  ЁЯаа    U+1F822, U+1F820 RIGHT/LEFTWARDS TRIANGLE-HEADED ARROW WITH
                          NARROW SHAFT
 ЁЯаж  ЁЯад    U+1F826, U+1F824 RIGHT/LEFTWARDS TRIANGLE-HEADED ARROW WITH
                          MEDIUM SHAFT
 ЁЯак  ЁЯаи    U+1F82A, U+1F828 RIGHT/LEFTWARDS TRIANGLE-HEADED ARROW WITH BOLD
                          SHAFT
 ЁЯао  ЁЯам    U+1F82E, U+1F82C RIGHT/LEFTWARDS TRIANGLE-HEADED ARROW WITH
                          HEAVY SHAFT
 ЁЯа▓  ЁЯа░    U+1F832, U+1F830 RIGHT/LEFTWARDS TRIANGLE-HEADED ARROW WITH VERY
                          HEAVY SHAFT
 ЁЯа╢  ЁЯа┤    U+1F836, U+1F834 RIGHT/LEFTWARDS FINGER-POST ARROW
 ЁЯа║  ЁЯа╕    U+1F83A, U+1F838 RIGHT/LEFTWARDS SQUARED ARROW
 ЁЯа╛  ЁЯа╝    U+1F83E, U+1F83C RIGHT/LEFTWARDS COMPRESSED ARROW
 ЁЯбВ  ЁЯбА    U+1F842, U+1F840 RIGHT/LEFTWARDS HEAVY COMPRESSED ARROW
 ЁЯбЖ  ЁЯбД    U+1F846, U+1F844 RIGHT/LEFTWARDS HEAVY ARROW
 ЁЯбТ  ЁЯбР    U+1F852, U+1F850 RIGHT/LEFTWARDS SANS-SERIF ARROW
 ЁЯбв  ЁЯба    U+1F862, U+1F860 WIDE-HEADED RIGHT/LEFTWARDS LIGHT BARB ARROW
 ЁЯбк  ЁЯби    U+1F86A, U+1F868 WIDE-HEADED RIGHT/LEFTWARDS BARB ARROW
 ЁЯб▓  ЁЯб░    U+1F872, U+1F870 WIDE-HEADED RIGHT/LEFTWARDS MEDIUM BARB ARROW
 ЁЯб║  ЁЯб╕    U+1F87A, U+1F878 WIDE-HEADED RIGHT/LEFTWARDS HEAVY BARB ARROW
 ЁЯвВ  ЁЯвА    U+1F882, U+1F880 WIDE-HEADED RIGHT/LEFTWARDS VERY HEAVY BARB
                          ARROW
 ЁЯвТ  ЁЯвР    U+1F892, U+1F890 RIGHT/LEFTWARDS TRIANGLE ARROWHEAD
 ЁЯвЦ  ЁЯвФ    U+1F896, U+1F894 RIGHT/LEFTWARDS WHITE ARROW WITHIN TRIANGLE
                          ARROWHEAD
 ЁЯвЪ  ЁЯвШ    U+1F89A, U+1F898 RIGHT/LEFTWARDS ARROW WITH NOTCHED TAIL
 ЁЯвб  ЁЯва    U+1F8A1, U+1F8A0 RIGHTWARDS BOTTOM SHADED WHITE ARROW,
                          LEFTWARDS BOTTOM-SHADED WHITE ARROW
 ЁЯвг  ЁЯвв    U+1F8A3, U+1F8A2 RIGHT/LEFTWARDS TOP SHADED WHITE ARROW
 ЁЯве  ЁЯвж    U+1F8A5, U+1F8A6 RIGHT/LEFTWARDS RIGHT-SHADED WHITE ARROW
 ЁЯвз  ЁЯвд    U+1F8A7, U+1F8A4 RIGHT/LEFTWARDS LEFT-SHADED WHITE ARROW
 ЁЯвй  ЁЯви    U+1F8A9, U+1F8A8 RIGHT/LEFTWARDS BACK-TILTED SHADOWED WHITE ARROW
 ЁЯвл  ЁЯвк    U+1F8AB, U+1F8AA RIGHT/LEFTWARDS FRONT-TILTED SHADOWED WHITE
                          ARROW
=cut
                                                                                                                                                                                                                                                                                                                                                    usr/local/lib/perl5/5.40.0/pod/perlopenbsd.pod                                                      0000644 0000000 0000000 00000002333 14714567415 017312  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # vim: syntax=pod

If you read this file _as_is_, just ignore the funny characters you
see.  It is written in the POD format (see pod/perlpod.pod) which is
specifically designed to be readable as is.

=head1 NAME

perlopenbsd - Perl version 5 on OpenBSD systems

=head1 DESCRIPTION

This document describes various features of OpenBSD that will affect how Perl
version 5 (hereafter just Perl) is compiled and/or runs.

=head2 OpenBSD core dumps from getprotobyname_r and getservbyname_r with ithreads

When Perl is configured to use ithreads, it will use re-entrant library calls
in preference to non-re-entrant versions.  There is an incompatibility in
OpenBSD's C<getprotobyname_r> and C<getservbyname_r> function in versions 3.7
and later that will cause a SEGV when called without doing a C<bzero> on
their return structs prior to calling these functions.  Current Perl's
should handle this problem correctly.  Older threaded Perls (5.8.6 or earlier)
will run into this problem.  If you want to run a threaded Perl on OpenBSD
3.7 or higher, you will need to upgrade to at least Perl 5.8.7.

=head1 AUTHOR

Steve Peters <steve@fisharerojo.org>

Please report any errors, updates, or suggestions to
L<https://github.com/Perl/perl5/issues>.

                                                                                                                                                                                                                                                                                                     usr/local/lib/perl5/5.40.0/pod/perlopentut.pod                                                      0000644 0000000 0000000 00000035567 14714567415 017375  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =encoding utf8

=head1 NAME

perlopentut - simple recipes for opening files and pipes in Perl

=head1 DESCRIPTION

Whenever you do I/O on a file in Perl, you do so through what in Perl is
called a B<filehandle>.  A filehandle is an internal name for an external
file.  It is the job of the C<open> function to make the association
between the internal name and the external name, and it is the job
of the C<close> function to break that association.

For your convenience, Perl sets up a few special filehandles that are
already open when you run.  These include C<STDIN>, C<STDOUT>, C<STDERR>,
and C<ARGV>.  Since those are pre-opened, you can use them right away
without having to go to the trouble of opening them yourself:

    print STDERR "This is a debugging message.\n";

    print STDOUT "Please enter something: ";
    $response = <STDIN> // die "how come no input?";
    print STDOUT "Thank you!\n";

    while (<ARGV>) { ... }

As you see from those examples, C<STDOUT> and C<STDERR> are output
handles, and C<STDIN> and C<ARGV> are input handles.  They are
in all capital letters because they are reserved to Perl, much
like the C<@ARGV> array and the C<%ENV> hash are.  Their external
associations were set up by your shell.

You will need to open every other filehandle on your own. Although there
are many variants, the most common way to call Perl's open() function
is with three arguments and one return value:

C<    I<OK> = open(I<HANDLE>, I<MODE>, I<PATHNAME>)>

Where:

=over

=item I<OK>

will be some defined value if the open succeeds, but
C<undef> if it fails;

=item I<HANDLE>

should be an undefined scalar variable to be filled in by the
C<open> function if it succeeds;

=item I<MODE>

is the access mode and the encoding format to open the file with;

=item I<PATHNAME>

is the external name of the file you want opened.

=back

Most of the complexity of the C<open> function lies in the many
possible values that the I<MODE> parameter can take on.

One last thing before we show you how to open files: opening
files does not (usually) automatically lock them in Perl.  See
L<perlfaq5> for how to lock.

=head1 Opening Text Files

=head2 Opening Text Files for Reading

If you want to read from a text file, first open it in
read-only mode like this:

    my $filename = "/some/path/to/a/textfile/goes/here";
    my $encoding = ":encoding(UTF-8)";
    my $handle   = undef;     # this will be filled in on success

    open($handle, "< $encoding", $filename)
        || die "$0: can't open $filename for reading: $!";

As with the shell, in Perl the C<< "<" >> is used to open the file in
read-only mode.  If it succeeds, Perl allocates a brand new filehandle for
you and fills in your previously undefined C<$handle> argument with a
reference to that handle.

Now you may use functions like C<readline>, C<read>, C<getc>, and
C<sysread> on that handle.  Probably the most common input function
is the one that looks like an operator:

    $line = readline($handle);
    $line = <$handle>;          # same thing

Because the C<readline> function returns C<undef> at end of file or
upon error, you will sometimes see it used this way:

    $line = <$handle>;
    if (defined $line) {
        # do something with $line
    }
    else {
        # $line is not valid, so skip it
    }

You can also just quickly C<die> on an undefined value this way:

    $line = <$handle> // die "no input found";

However, if hitting EOF is an expected and normal event, you do not want to
exit simply because you have run out of input.  Instead, you probably just want
to exit an input loop.  You can then test to see if an actual error has caused
the loop to terminate, and act accordingly:

    while (<$handle>) {
        # do something with data in $_
    }
    if ($!) {
        die "unexpected error while reading from $filename: $!";
    }

B<A Note on Encodings>: Having to specify the text encoding every time
might seem a bit of a bother.  To set up a default encoding for C<open> so
that you don't have to supply it each time, you can use the C<open> pragma:

    use open qw< :encoding(UTF-8) >;

Once you've done that, you can safely omit the encoding part of the
open mode:

    open($handle, "<", $filename)
        || die "$0: can't open $filename for reading: $!";

But never use the bare C<< "<" >> without having set up a default encoding
first.  Otherwise, Perl cannot know which of the many, many, many possible
flavors of text file you have, and Perl will have no idea how to correctly
map the data in your file into actual characters it can work with.  Other
common encoding formats including C<"ASCII">, C<"ISO-8859-1">,
C<"ISO-8859-15">, C<"Windows-1252">, C<"MacRoman">, and even C<"UTF-16LE">.
See L<perlunitut> for more about encodings.

=head2 Opening Text Files for Writing

When you want to write to a file, you first have to decide what to do about
any existing contents of that file.  You have two basic choices here: to
preserve or to clobber.

If you want to preserve any existing contents, then you want to open the file
in append mode.  As in the shell, in Perl you use C<<< ">>" >>> to open an
existing file in append mode.  C<<< ">>" >>> creates the file if it does not
already exist.

    my $handle   = undef;
    my $filename = "/some/path/to/a/textfile/goes/here";
    my $encoding = ":encoding(UTF-8)";

    open($handle, ">> $encoding", $filename)
        || die "$0: can't open $filename for appending: $!";

Now you can write to that filehandle using any of C<print>, C<printf>,
C<say>, C<write>, or C<syswrite>.

As noted above, if the file does not already exist, then the append-mode open
will create it for you.  But if the file does already exist, its contents are
safe from harm because you will be adding your new text past the end of the
old text.

On the other hand, sometimes you want to clobber whatever might already be
there.  To empty out a file before you start writing to it, you can open it
in write-only mode:

    my $handle   = undef;
    my $filename = "/some/path/to/a/textfile/goes/here";
    my $encoding = ":encoding(UTF-8)";

    open($handle, "> $encoding", $filename)
        || die "$0: can't open $filename in write-open mode: $!";

Here again Perl works just like the shell in that the C<< ">" >> clobbers
an existing file.

As with the append mode, when you open a file in write-only mode,
you can now write to that filehandle using any of C<print>, C<printf>,
C<say>, C<write>, or C<syswrite>.

What about read-write mode?  You should probably pretend it doesn't exist,
because opening text files in read-write mode is unlikely to do what you
would like.  See L<perlfaq5> for details.

=head1 Opening Binary Files

If the file to be opened contains binary data instead of text characters,
then the C<MODE> argument to C<open> is a little different.  Instead of
specifying the encoding, you tell Perl that your data are in raw bytes.

    my $filename = "/some/path/to/a/binary/file/goes/here";
    my $encoding = ":raw :bytes"
    my $handle   = undef;     # this will be filled in on success

And then open as before, choosing C<<< "<" >>>, C<<< ">>" >>>, or
C<<< ">" >>> as needed:

    open($handle, "< $encoding", $filename)
        || die "$0: can't open $filename for reading: $!";

    open($handle, ">> $encoding", $filename)
        || die "$0: can't open $filename for appending: $!";

    open($handle, "> $encoding", $filename)
        || die "$0: can't open $filename in write-open mode: $!";

Alternately, you can change to binary mode on an existing handle this way:

    binmode($handle)    || die "cannot binmode handle";

This is especially handy for the handles that Perl has already opened for you.

    binmode(STDIN)      || die "cannot binmode STDIN";
    binmode(STDOUT)     || die "cannot binmode STDOUT";

You can also pass C<binmode> an explicit encoding to change it on the fly.
This isn't exactly "binary" mode, but we still use C<binmode> to do it:

  binmode(STDIN,  ":encoding(MacRoman)") || die "cannot binmode STDIN";
  binmode(STDOUT, ":encoding(UTF-8)")    || die "cannot binmode STDOUT";

Once you have your binary file properly opened in the right mode, you can
use all the same Perl I/O functions as you used on text files.  However,
you may wish to use the fixed-size C<read> instead of the variable-sized
C<readline> for your input.

Here's an example of how to copy a binary file:

    my $BUFSIZ   = 64 * (2 ** 10);
    my $name_in  = "/some/input/file";
    my $name_out = "/some/output/flie";

    my($in_fh, $out_fh, $buffer);

    open($in_fh,  "<", $name_in)
        || die "$0: cannot open $name_in for reading: $!";
    open($out_fh, ">", $name_out)
        || die "$0: cannot open $name_out for writing: $!";

    for my $fh ($in_fh, $out_fh)  {
        binmode($fh)               || die "binmode failed";
    }

    while (read($in_fh, $buffer, $BUFSIZ)) {
        unless (print $out_fh $buffer) {
            die "couldn't write to $name_out: $!";
        }
    }

    close($in_fh)       || die "couldn't close $name_in: $!";
    close($out_fh)      || die "couldn't close $name_out: $!";

=head1 Opening Pipes

Perl also lets you open a filehandle into an external program or shell
command rather than into a file. You can do this in order to pass data
from your Perl program to an external command for further processing, or
to receive data from another program for your own Perl program to
process.

Filehandles into commands are also known as I<pipes>, since they work on
similar inter-process communication principles as Unix pipelines. Such a
filehandle has an active program instead of a static file on its
external end, but in every other sense it works just like a more typical
file-based filehandle, with all the techniques discussed earlier in this
article just as applicable.

As such, you open a pipe using the same C<open> call that you use for
opening files, setting the second (C<MODE>) argument to special
characters that indicate either an input or an output pipe. Use C<"-|"> for a
filehandle that will let your Perl program read data from an external
program, and C<"|-"> for a filehandle that will send data to that
program instead.

=head2 Opening a pipe for reading

Let's say you'd like your Perl program to process data stored in a nearby
directory called C<unsorted>, which contains a number of textfiles.
You'd also like your program to sort all the contents from these files
into a single, alphabetically sorted list of unique lines before it
starts processing them.

You could do this through opening an ordinary filehandle into each of
those files, gradually building up an in-memory array of all the file
contents you load this way, and finally sorting and filtering that array
when you've run out of files to load. I<Or>, you could offload all that
merging and sorting into your operating system's own C<sort> command by
opening a pipe directly into its output, and get to work that much
faster.

Here's how that might look:

    open(my $sort_fh, '-|', 'sort -u unsorted/*.txt')
        or die "Couldn't open a pipe into sort: $!";

    # And right away, we can start reading sorted lines:
    while (my $line = <$sort_fh>) {
        #
        # ... Do something interesting with each $line here ...
        #
    }

The second argument to C<open>, C<"-|">, makes it a read-pipe into a
separate program, rather than an ordinary filehandle into a file.

Note that the third argument to C<open> is a string containing the
program name (C<sort>) plus all its arguments: in this case, C<-u> to
specify unqiue sort, and then a fileglob specifying the files to sort.
The resulting filehandle C<$sort_fh> works just like a read-only (C<<
"<" >>) filehandle, and your program can subsequently read data
from it as if it were opened onto an ordinary, single file.

=head2 Opening a pipe for writing

Continuing the previous example, let's say that your program has
completed its processing, and the results sit in an array called
C<@processed>. You want to print these lines to a file called
C<numbered.txt> with a neatly formatted column of line-numbers.

Certainly you could write your own code to do this тАФ or, once again,
you could kick that work over to another program. In this case, C<cat>,
running with its own C<-n> option to activate line numbering, should do
the trick:

    open(my $cat_fh, '|-', 'cat -n > numbered.txt')
        or die "Couldn't open a pipe into cat: $!";

    for my $line (@processed) {
        print $cat_fh $line;
    }

Here, we use a second C<open> argument of C<"|-">, signifying that the
filehandle assigned to C<$cat_fh> should be a write-pipe. We can then
use it just as we would a write-only ordinary filehandle, including the
basic function of C<print>-ing data to it.

Note that the third argument, specifying the command that we wish to
pipe to, sets up C<cat> to redirect its output via that C<< ">" >>
symbol into the file C<numbered.txt>. This can start to look a little
tricky, because that same symbol would have meant something
entirely different had it showed it in the second argument to C<open>!
But here in the third argument, it's simply part of the shell command that
Perl will open the pipe into, and Perl itself doesn't invest any special
meaning to it.

=head2 Expressing the command as a list

For opening pipes, Perl offers the option to call C<open> with a list
comprising the desired command and all its own arguments as separate
elements, rather than combining them into a single string as in the
examples above. For instance, we could have phrased the C<open> call in
the first example like this:

    open(my $sort_fh, '-|', 'sort', '-u', glob('unsorted/*.txt'))
        or die "Couldn't open a pipe into sort: $!";

When you call C<open> this way, Perl invokes the given command directly,
bypassing the shell. As such, the shell won't try to interpret any
special characters within the command's argument list, which might
overwise have unwanted effects. This can make for safer, less
error-prone C<open> calls, useful in cases such as passing in variables
as arguments, or even just referring to filenames with spaces in them.

However, when you I<do> want to pass a meaningful metacharacter to the
shell, such with the C<"*"> inside that final C<unsorted/*.txt> argument
here, you can't use this alternate syntax. In this case, we have worked
around it via Perl's handy C<glob> built-in function, which evaluates
its argument into a list of filenames тАФ and we can safely pass that
resulting list right into C<open>, as shown above.

Note also that representing piped-command arguments in list form like
this doesn't work on every platform. It will work on any Unix-based OS
that provides a real C<fork> function (e.g. macOS or Linux), as well as
on Windows when running Perl 5.22 or later.

=head1 SEE ALSO

The full documentation for L<C<open>|perlfunc/open FILEHANDLE,MODE,EXPR>
provides a thorough reference to this function, beyond the best-practice
basics covered here.

=head1 AUTHOR and COPYRIGHT

Copyright 2013 Tom Christiansen; now maintained by Perl5 Porters

This documentation is free; you can redistribute it and/or modify it under
the same terms as Perl itself.

                                                                                                                                         usr/local/lib/perl5/5.40.0/pod/perlos2.pod                                                          0000644 0000000 0000000 00000266267 14714567415 016405  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # vim: syntax=pod

If you read this file _as_is_, just ignore the funny characters you
see. It is written in the POD format (see perlpod manpage) which is
specially designed to be readable as is.

=head1 NAME

perlos2 - Perl under OS/2, DOS, Win0.3*, Win0.95 and WinNT.

=head1 SYNOPSIS

One can read this document in the following formats:

	man perlos2
	view perl perlos2
	explorer perlos2.html
	info perlos2

to list some (not all may be available simultaneously), or it may
be read I<as is>: either as F<README.os2>, or F<pod/perlos2.pod>.

To read the F<.INF> version of documentation (B<very> recommended)
outside of OS/2, one needs an IBM's reader (may be available on IBM
ftp sites (?)  (URL anyone?)) or shipped with PC DOS 7.0 and IBM's
Visual Age C++ 3.5.

A copy of a Win* viewer is contained in the "Just add OS/2 Warp" package

  ftp://ftp.software.ibm.com/ps/products/os2/tools/jaow/jaow.zip

in F<?:\JUST_ADD\view.exe>. This gives one an access to EMX's 
F<.INF> docs as well (text form is available in F</emx/doc> in 
EMX's distribution).  There is also a different viewer named xview.

Note that if you have F<lynx.exe> or F<netscape.exe> installed, you can follow WWW links
from this document in F<.INF> format. If you have EMX docs installed 
correctly, you can follow library links (you need to have C<view emxbook>
working by setting C<EMXBOOK> environment variable as it is described
in EMX docs).

=cut

Contents (This may be a little bit obsolete)
 
 perlos2 - Perl under OS/2, DOS, Win0.3*, Win0.95 and WinNT.

      NAME
      SYNOPSIS
      DESCRIPTION
	 -  Target
	 -  Other OSes
	 -  Prerequisites
	 -  Starting Perl programs under OS/2 (and DOS and...)
	 -  Starting OS/2 (and DOS) programs under Perl
      Frequently asked questions
	 -  "It does not work"
	 -  I cannot run external programs
	 -  I cannot embed perl into my program, or use perl.dll from my
	 -  `` and pipe-open do not work under DOS.
	 -  Cannot start find.exe "pattern" file
      INSTALLATION
	 -  Automatic binary installation
	 -  Manual binary installation
	 -  Warning
      Accessing documentation
	 -  OS/2 .INF file
	 -  Plain text
	 -  Manpages
	 -  HTML
	 -  GNU info files
	 -  PDF files
	 -  LaTeX docs
      BUILD
	 -  The short story
	 -  Prerequisites
	 -  Getting perl source
	 -  Application of the patches
	 -  Hand-editing
	 -  Making
	 -  Testing
	 -  Installing the built perl
	 -  a.out-style build
      Build FAQ
	 -  Some / became \ in pdksh.
	 -  'errno' - unresolved external
	 -  Problems with tr or sed
	 -  Some problem (forget which ;-)
	 -  Library ... not found
	 -  Segfault in make
	 -  op/sprintf test failure
      Specific (mis)features of OS/2 port
	 -  setpriority, getpriority
	 -  system()
	 -  extproc on the first line
	 -  Additional modules:
	 -  Prebuilt methods:
	 -  Prebuilt variables:
	 -  Misfeatures
	 -  Modifications
	 -  Identifying DLLs
	 -  Centralized management of resources
      Perl flavors
	 -  perl.exe
	 -  perl_.exe
	 -  perl__.exe
	 -  perl___.exe
	 -  Why strange names?
	 -  Why dynamic linking?
	 -  Why chimera build?
      ENVIRONMENT
	 -  PERLLIB_PREFIX
	 -  PERL_BADLANG
	 -  PERL_BADFREE
	 -  PERL_SH_DIR
	 -  USE_PERL_FLOCK
	 -  TMP or TEMP
      Evolution
	 -  Text-mode filehandles
	 -  Priorities
	 -  DLL name mangling: pre 5.6.2
	 -  DLL name mangling: 5.6.2 and beyond
	 -  DLL forwarder generation
	 -  Threading
	 -  Calls to external programs
	 -  Memory allocation
	 -  Threads
      BUGS
      AUTHOR
      SEE ALSO

=head1 DESCRIPTION

=head2 Target

The target is to make OS/2 one of the best supported platform for
using/building/developing Perl and I<Perl applications>, as well as
make Perl the best language to use under OS/2. The secondary target is
to try to make this work under DOS and Win* as well (but not B<too> hard).

The current state is quite close to this target. Known limitations:

=over 5

=item *

Some *nix programs use fork() a lot; with the mostly useful flavors of
perl for OS/2 (there are several built simultaneously) this is
supported; but some flavors do not support this (e.g., when Perl is
called from inside REXX).  Using fork() after
I<use>ing dynamically loading extensions would not work with I<very> old
versions of EMX.

=item *

You need a separate perl executable F<perl__.exe> (see L</perl__.exe>)
if you want to use PM code in your application (as Perl/Tk or OpenGL
Perl modules do) without having a text-mode window present.

While using the standard F<perl.exe> from a text-mode window is possible
too, I have seen cases when this causes degradation of the system stability.
Using F<perl__.exe> avoids such a degradation.

=item *

There is no simple way to access WPS objects. The only way I know
is via C<OS2::REXX> and C<SOM> extensions (see L<OS2::REXX>, L<SOM>).
However, we do not have access to
convenience methods of Object-REXX. (Is it possible at all? I know
of no Object-REXX API.)  The C<SOM> extension (currently in alpha-text)
may eventually remove this shortcoming; however, due to the fact that
DII is not supported by the C<SOM> module, using C<SOM> is not as
convenient as one would like it.

=back

Please keep this list up-to-date by informing me about other items.

=head2 Other OSes

Since OS/2 port of perl uses a remarkable EMX environment, it can
run (and build extensions, and - possibly - be built itself) under any
environment which can run EMX. The current list is DOS,
DOS-inside-OS/2, Win0.3*, Win0.95 and WinNT. Out of many perl flavors,
only one works, see L</"F<perl_.exe>">.

Note that not all features of Perl are available under these
environments. This depends on the features the I<extender> - most
probably RSX - decided to implement.

Cf. L</Prerequisites>.

=head2 Prerequisites

=over 6

=item EMX

EMX runtime is required (may be substituted by RSX). Note that
it is possible to make F<perl_.exe> to run under DOS without any
external support by binding F<emx.exe>/F<rsx.exe> to it, see L<emxbind(1)>.
Note that under DOS for best results one should use RSX runtime, which
has much more functions working (like C<fork>, C<popen> and so on). In
fact RSX is required if there is no VCPI present. Note the
RSX requires DPMI.  Many implementations of DPMI are known to be very
buggy, beware!

Only the latest runtime is supported, currently C<0.9d fix 03>. Perl may run
under earlier versions of EMX, but this is not tested.

One can get different parts of EMX from, say

  ftp://crydee.sai.msu.ru/pub/comp/os/os2/leo/gnu/emx+gcc/
  http://hobbes.nmsu.edu/h-browse.php?dir=/pub/os2/dev/emx/v0.9d/

The runtime component should have the name F<emxrt.zip>.

B<NOTE>. When using F<emx.exe>/F<rsx.exe>, it is enough to have them on your path. One
does not need to specify them explicitly (though this

  emx perl_.exe -de 0

will work as well.)

=item RSX

To run Perl on DPMI platforms one needs RSX runtime. This is
needed under DOS-inside-OS/2, Win0.3*, Win0.95 and WinNT (see 
L</"Other OSes">). RSX would not work with VCPI
only, as EMX would, it requires DMPI.

Having RSX and the latest F<sh.exe> one gets a fully functional
B<*nix>-ish environment under DOS, say, C<fork>, C<``> and
pipe-C<open> work. In fact, MakeMaker works (for static build), so one
can have Perl development environment under DOS. 

One can get RSX from, say

  http://cd.textfiles.com/hobbesos29804/disk1/EMX09C/
  ftp://crydee.sai.msu.ru/pub/comp/os/os2/leo/gnu/emx+gcc/contrib/

Contact the author on C<rainer@mathematik.uni-bielefeld.de>.

The latest F<sh.exe> with DOS hooks is available in

  http://www.ilyaz.org/software/os2/

as F<sh_dos.zip> or under similar names starting with C<sh>, C<pdksh> etc.

=item HPFS

Perl does not care about file systems, but the perl library contains
many files with long names, so to install it intact one needs a file
system which supports long file names.

Note that if you do not plan to build the perl itself, it may be
possible to fool EMX to truncate file names. This is not supported,
read EMX docs to see how to do it.

=item pdksh

To start external programs with complicated command lines (like with
pipes in between, and/or quoting of arguments), Perl uses an external
shell. With EMX port such shell should be named F<sh.exe>, and located
either in the wired-in-during-compile locations (usually F<F:/bin>),
or in configurable location (see L</"C<PERL_SH_DIR>">).

For best results use EMX pdksh. The standard binary (5.2.14 or later) runs
under DOS (with L</RSX>) as well, see

  http://www.ilyaz.org/software/os2/

=back

=head2 Starting Perl programs under OS/2 (and DOS and...)

Start your Perl program F<foo.pl> with arguments C<arg1 arg2 arg3> the
same way as on any other platform, by

	perl foo.pl arg1 arg2 arg3

If you want to specify perl options C<-my_opts> to the perl itself (as
opposed to your program), use

	perl -my_opts foo.pl arg1 arg2 arg3

Alternately, if you use OS/2-ish shell, like CMD or 4os2, put
the following at the start of your perl script:

	extproc perl -S -my_opts

rename your program to F<foo.cmd>, and start it by typing

	foo arg1 arg2 arg3

Note that because of stupid OS/2 limitations the full path of the perl
script is not available when you use C<extproc>, thus you are forced to
use C<-S> perl switch, and your script should be on the C<PATH>. As a plus
side, if you know a full path to your script, you may still start it
with 

	perl ../../blah/foo.cmd arg1 arg2 arg3

(note that the argument C<-my_opts> is taken care of by the C<extproc> line
in your script, see C<L</extproc>> on the first line).

To understand what the above I<magic> does, read perl docs about C<-S>
switch - see L<perlrun>, and cmdref about C<extproc>:

	view perl perlrun
	man perlrun
	view cmdref extproc
	help extproc

or whatever method you prefer.

There are also endless possibilities to use I<executable extensions> of
4os2, I<associations> of WPS and so on... However, if you use
*nixish shell (like F<sh.exe> supplied in the binary distribution),
you need to follow the syntax specified in L<perlrun/"Command Switches">.

Note that B<-S> switch supports scripts with additional extensions 
F<.cmd>, F<.btm>, F<.bat>, F<.pl> as well.

=head2 Starting OS/2 (and DOS) programs under Perl

This is what system() (see L<perlfunc/system>), C<``> (see
L<perlop/"I/O Operators">), and I<open pipe> (see L<perlfunc/open>)
are for. (Avoid exec() (see L<perlfunc/exec>) unless you know what you
do).

Note however that to use some of these operators you need to have a
sh-syntax shell installed (see L</"Pdksh">, 
L</"Frequently asked questions">), and perl should be able to find it
(see L</"C<PERL_SH_DIR>">).

The cases when the shell is used are:

=over

=item 1

One-argument system() (see L<perlfunc/system>), exec() (see L<perlfunc/exec>)
with redirection or shell meta-characters;

=item 2

Pipe-open (see L<perlfunc/open>) with the command which contains redirection 
or shell meta-characters;

=item 3

Backticks C<``> (see L<perlop/"I/O Operators">) with the command which contains
redirection or shell meta-characters;

=item 4

If the executable called by system()/exec()/pipe-open()/C<``> is a script
with the "magic" C<#!> line or C<extproc> line which specifies shell;

=item 5

If the executable called by system()/exec()/pipe-open()/C<``> is a script
without "magic" line, and C<$ENV{EXECSHELL}> is set to shell;

=item 6

If the executable called by system()/exec()/pipe-open()/C<``> is not
found (is not this remark obsolete?);

=item 7

For globbing (see L<perlfunc/glob>, L<perlop/"I/O Operators">)
(obsolete? Perl uses builtin globbing nowadays...).

=back

For the sake of speed for a common case, in the above algorithms 
backslashes in the command name are not considered as shell metacharacters.

Perl starts scripts which begin with cookies
C<extproc> or C<#!> directly, without an intervention of shell.  Perl uses the
same algorithm to find the executable as F<pdksh>: if the path
on C<#!> line does not work, and contains C</>, then the directory
part of the executable is ignored, and the executable
is searched in F<.> and on C<PATH>.  To find arguments for these scripts
Perl uses a different algorithm than F<pdksh>: up to 3 arguments are 
recognized, and trailing whitespace is stripped.

If a script
does not contain such a cooky, then to avoid calling F<sh.exe>, Perl uses
the same algorithm as F<pdksh>: if C<$ENV{EXECSHELL}> is set, the
script is given as the first argument to this command, if not set, then
C<$ENV{COMSPEC} /c> is used (or a hardwired guess if C<$ENV{COMSPEC}> is
not set).

When starting scripts directly, Perl uses exactly the same algorithm as for 
the search of script given by B<-S> command-line option: it will look in
the current directory, then on components of C<$ENV{PATH}> using the 
following order of appended extensions: no extension, F<.cmd>, F<.btm>, 
