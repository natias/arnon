
=over 4

=item C<CopFILE_LEN>
X<CopFILE_LEN>

Returns the length of the file associated with the C<COP> C<c>

=over 3

 const char *  CopFILE_LEN(const COP * c)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<CopFILE_set>
X<CopFILE_set>

Makes C<pv> the name of the file associated with the C<COP> C<c>

=over 3

 void  CopFILE_set(COP * c, const char * pv)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<CopFILE_setn>
X<CopFILE_setn>

Makes C<pv> the name of the file associated with the C<COP> C<c>

=over 3

 void  CopFILE_setn(COP * c, const char * pv, STRLEN len)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<CopFILESV>
X<CopFILESV>

Returns the SV associated with the C<COP> C<c>

=over 3

 SV *  CopFILESV(const COP * c)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<cophh_copy>
X<cophh_copy>

NOTE: C<cophh_copy> is B<experimental> and may change or be
removed without notice.

Make and return a complete copy of the cop hints hash C<cophh>.

=over 3

 COPHH *  cophh_copy(COPHH *cophh)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<cophh_delete_pv>

=item C<cophh_delete_pvn>

=item C<cophh_delete_pvs>

=item C<cophh_delete_sv>
X<cophh_delete_pv>X<cophh_delete_pvn>X<cophh_delete_pvs>X<cophh_delete_sv>

NOTE: all these forms are B<experimental> and may change or be
removed without notice.

These delete a key and its associated value from the cop hints hash C<cophh>,
and return the modified hash.  The returned hash pointer is in general
not the same as the hash pointer that was passed in.  The input hash is
consumed by the function, and the pointer to it must not be subsequently
used.  Use L</cophh_copy> if you need both hashes.

The forms differ in how the key is specified.  In all forms, the key is pointed
to by C<key>.
In the plain C<pv> form, the key is a C language NUL-terminated string.
In the C<pvs> form, the key is a C language string literal.
In the C<pvn> form, an additional parameter, C<keylen>, specifies the length of
the string, which hence, may contain embedded-NUL characters.
In the C<sv> form, C<*key> is an SV, and the key is the PV extracted from that.
using C<L</SvPV_const>>.

C<hash> is a precomputed hash of the key string, or zero if it has not been
precomputed.  This parameter is omitted from the C<pvs> form, as it is computed
automatically at compile time.

The only flag currently used from the C<flags> parameter is C<COPHH_KEY_UTF8>.
It is illegal to set this in the C<sv> form.  In the C<pv*> forms, it specifies
whether the key octets are interpreted as UTF-8 (if set) or as Latin-1 (if
cleared).  The C<sv> form uses the underlying SV to determine the UTF-8ness of
the octets.

=over 3

 COPHH *  cophh_delete_pv (COPHH *cophh, const char *key, U32 hash,
                           U32 flags)
 COPHH *  cophh_delete_pvn(COPHH *cophh, const char *key,
                           STRLEN keylen, U32 hash, U32 flags)
 COPHH *  cophh_delete_pvs(COPHH *cophh, "key", U32 flags)
 COPHH *  cophh_delete_sv (COPHH *cophh, SV *key, U32 hash,
                           U32 flags)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<cophh_exists_pvn>
X<cophh_exists_pvn>

NOTE: C<cophh_exists_pvn> is B<experimental> and may change or be
removed without notice.

These look up the hint entry in the cop C<cop> with the key specified by
C<key> (and C<keylen> in the C<pvn> form), returning true if a value exists,
and false otherwise.

The forms differ in how the key is specified.
In the plain C<pv> form, the key is a C language NUL-terminated string.
In the C<pvs> form, the key is a C language string literal.
In the C<pvn> form, an additional parameter, C<keylen>, specifies the length of
the string, which hence, may contain embedded-NUL characters.
In the C<sv> form, C<*key> is an SV, and the key is the PV extracted from that.
using C<L</SvPV_const>>.

C<hash> is a precomputed hash of the key string, or zero if it has not been
precomputed.  This parameter is omitted from the C<pvs> form, as it is computed
automatically at compile time.

The only flag currently used from the C<flags> parameter is C<COPHH_KEY_UTF8>.
It is illegal to set this in the C<sv> form.  In the C<pv*> forms, it specifies
whether the key octets are interpreted as UTF-8 (if set) or as Latin-1 (if
cleared).  The C<sv> form uses the underlying SV to determine the UTF-8ness of
the octets.

=over 3

 bool  cophh_exists_pvn(const COPHH *cophh, const char *key,
                        STRLEN keylen, U32 hash, U32 flags)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<cophh_fetch_pv>

=item C<cophh_fetch_pvn>

=item C<cophh_fetch_pvs>

=item C<cophh_fetch_sv>
X<cophh_fetch_pv>X<cophh_fetch_pvn>X<cophh_fetch_pvs>X<cophh_fetch_sv>

NOTE: all these forms are B<experimental> and may change or be
removed without notice.

These look up the entry in the cop hints hash C<cophh> with the key specified by
C<key> (and C<keylen> in the C<pvn> form), returning that value as a mortal
scalar copy, or C<&PL_sv_placeholder> if there is no value associated with the
key.

The forms differ in how the key is specified.
In the plain C<pv> form, the key is a C language NUL-terminated string.
In the C<pvs> form, the key is a C language string literal.
In the C<pvn> form, an additional parameter, C<keylen>, specifies the length of
the string, which hence, may contain embedded-NUL characters.
In the C<sv> form, C<*key> is an SV, and the key is the PV extracted from that.
using C<L</SvPV_const>>.

C<hash> is a precomputed hash of the key string, or zero if it has not been
precomputed.  This parameter is omitted from the C<pvs> form, as it is computed
automatically at compile time.

The only flag currently used from the C<flags> parameter is C<COPHH_KEY_UTF8>.
It is illegal to set this in the C<sv> form.  In the C<pv*> forms, it specifies
whether the key octets are interpreted as UTF-8 (if set) or as Latin-1 (if
cleared).  The C<sv> form uses the underlying SV to determine the UTF-8ness of
the octets.

=over 3

 SV *  cophh_fetch_pv (const COPHH *cophh, const char *key,
                       U32 hash, U32 flags)
 SV *  cophh_fetch_pvn(const COPHH *cophh, const char *key,
                       STRLEN keylen, U32 hash, U32 flags)
 SV *  cophh_fetch_pvs(const COPHH *cophh, "key", U32 flags)
 SV *  cophh_fetch_sv (const COPHH *cophh, SV *key, U32 hash,
                       U32 flags)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<cophh_free>
X<cophh_free>

NOTE: C<cophh_free> is B<experimental> and may change or be
removed without notice.

Discard the cop hints hash C<cophh>, freeing all resources associated
with it.

=over 3

 void  cophh_free(COPHH *cophh)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<cophh_2hv>
X<cophh_2hv>

NOTE: C<cophh_2hv> is B<experimental> and may change or be
removed without notice.

Generates and returns a standard Perl hash representing the full set of
key/value pairs in the cop hints hash C<cophh>.  C<flags> is currently
unused and must be zero.

=over 3

 HV *  cophh_2hv(const COPHH *cophh, U32 flags)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<cophh_new_empty>
X<cophh_new_empty>

NOTE: C<cophh_new_empty> is B<experimental> and may change or be
removed without notice.

Generate and return a fresh cop hints hash containing no entries.

=over 3

 COPHH *  cophh_new_empty()

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<cophh_store_pv>

=item C<cophh_store_pvn>

=item C<cophh_store_pvs>

=item C<cophh_store_sv>
X<cophh_store_pv>X<cophh_store_pvn>X<cophh_store_pvs>X<cophh_store_sv>

NOTE: all these forms are B<experimental> and may change or be
removed without notice.

These store a value, associated with a key, in the cop hints hash C<cophh>,
and return the modified hash.  The returned hash pointer is in general
not the same as the hash pointer that was passed in.  The input hash is
consumed by the function, and the pointer to it must not be subsequently
used.  Use L</cophh_copy> if you need both hashes.

C<value> is the scalar value to store for this key.  C<value> is copied
by these functions, which thus do not take ownership of any reference
to it, and hence later changes to the scalar will not be reflected in the value
visible in the cop hints hash.  Complex types of scalar will not be stored with
referential integrity, but will be coerced to strings.

The forms differ in how the key is specified.  In all forms, the key is pointed
to by C<key>.
In the plain C<pv> form, the key is a C language NUL-terminated string.
In the C<pvs> form, the key is a C language string literal.
In the C<pvn> form, an additional parameter, C<keylen>, specifies the length of
the string, which hence, may contain embedded-NUL characters.
In the C<sv> form, C<*key> is an SV, and the key is the PV extracted from that.
using C<L</SvPV_const>>.

C<hash> is a precomputed hash of the key string, or zero if it has not been
precomputed.  This parameter is omitted from the C<pvs> form, as it is computed
automatically at compile time.

The only flag currently used from the C<flags> parameter is C<COPHH_KEY_UTF8>.
It is illegal to set this in the C<sv> form.  In the C<pv*> forms, it specifies
whether the key octets are interpreted as UTF-8 (if set) or as Latin-1 (if
cleared).  The C<sv> form uses the underlying SV to determine the UTF-8ness of
the octets.

=over 3

 COPHH *  cophh_store_pv (COPHH *cophh, const char *key, U32 hash,
                          SV *value, U32 flags)
 COPHH *  cophh_store_pvn(COPHH *cophh, const char *key,
                          STRLEN keylen, U32 hash, SV *value,
                          U32 flags)
 COPHH *  cophh_store_pvs(COPHH *cophh, "key", SV *value,
                          U32 flags)
 COPHH *  cophh_store_sv (COPHH *cophh, SV *key, U32 hash,
                          SV *value, U32 flags)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<cop_hints_exists_pv>

=item C<cop_hints_exists_pvn>

=item C<cop_hints_exists_pvs>

=item C<cop_hints_exists_sv>
X<cop_hints_exists_pv>X<cop_hints_exists_pvn>X<cop_hints_exists_pvs>X<cop_hints_exists_sv>

These look up the hint entry in the cop C<cop> with the key specified by
C<key> (and C<keylen> in the C<pvn> form), returning true if a value exists,
and false otherwise.

The forms differ in how the key is specified.  In all forms, the key is pointed
to by C<key>.
In the plain C<pv> form, the key is a C language NUL-terminated string.
In the C<pvs> form, the key is a C language string literal.
In the C<pvn> form, an additional parameter, C<keylen>, specifies the length of
the string, which hence, may contain embedded-NUL characters.
In the C<sv> form, C<*key> is an SV, and the key is the PV extracted from that.
using C<L</SvPV_const>>.

C<hash> is a precomputed hash of the key string, or zero if it has not been
precomputed.  This parameter is omitted from the C<pvs> form, as it is computed
automatically at compile time.

The only flag currently used from the C<flags> parameter is C<COPHH_KEY_UTF8>.
It is illegal to set this in the C<sv> form.  In the C<pv*> forms, it specifies
whether the key octets are interpreted as UTF-8 (if set) or as Latin-1 (if
cleared).  The C<sv> form uses the underlying SV to determine the UTF-8ness of
the octets.

=over 3

 bool  cop_hints_exists_pv (const COP *cop, const char *key,
                            U32 hash, U32 flags)
 bool  cop_hints_exists_pvn(const COP *cop, const char *key,
                            STRLEN keylen, U32 hash, U32 flags)
 bool  cop_hints_exists_pvs(const COP *cop, "key", U32 flags)
 bool  cop_hints_exists_sv (const COP *cop, SV *key, U32 hash,
                            U32 flags)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<cop_hints_fetch_pv>

=item C<cop_hints_fetch_pvn>

=item C<cop_hints_fetch_pvs>

=item C<cop_hints_fetch_sv>
X<cop_hints_fetch_pv>X<cop_hints_fetch_pvn>X<cop_hints_fetch_pvs>X<cop_hints_fetch_sv>

These look up the hint entry in the cop C<cop> with the key specified by
C<key> (and C<keylen> in the C<pvn> form), returning that value as a mortal
scalar copy, or C<&PL_sv_placeholder> if there is no value associated with the
key.

The forms differ in how the key is specified.
In the plain C<pv> form, the key is a C language NUL-terminated string.
In the C<pvs> form, the key is a C language string literal.
In the C<pvn> form, an additional parameter, C<keylen>, specifies the length of
the string, which hence, may contain embedded-NUL characters.
In the C<sv> form, C<*key> is an SV, and the key is the PV extracted from that.
using C<L</SvPV_const>>.

C<hash> is a precomputed hash of the key string, or zero if it has not been
precomputed.  This parameter is omitted from the C<pvs> form, as it is computed
automatically at compile time.

The only flag currently used from the C<flags> parameter is C<COPHH_KEY_UTF8>.
It is illegal to set this in the C<sv> form.  In the C<pv*> forms, it specifies
whether the key octets are interpreted as UTF-8 (if set) or as Latin-1 (if
cleared).  The C<sv> form uses the underlying SV to determine the UTF-8ness of
the octets.

=over 3

 SV *  cop_hints_fetch_pv (const COP *cop, const char *key,
                           U32 hash, U32 flags)
 SV *  cop_hints_fetch_pvn(const COP *cop, const char *key,
                           STRLEN keylen, U32 hash, U32 flags)
 SV *  cop_hints_fetch_pvs(const COP *cop, "key", U32 flags)
 SV *  cop_hints_fetch_sv (const COP *cop, SV *key, U32 hash,
                           U32 flags)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<cop_hints_2hv>
X<cop_hints_2hv>

Generates and returns a standard Perl hash representing the full set of
hint entries in the cop C<cop>.  C<flags> is currently unused and must
be zero.

=over 3

 HV *  cop_hints_2hv(const COP *cop, U32 flags)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<CopLABEL>

=item C<CopLABEL_len>

=item C<CopLABEL_len_flags>
X<CopLABEL>X<CopLABEL_len>X<CopLABEL_len_flags>

These return the label attached to a cop.

C<CopLABEL_len> and C<CopLABEL_len_flags> additionally store the number of
bytes comprising the returned label into C<*len>.

C<CopLABEL_len_flags> additionally returns the UTF-8ness of the returned label,
by setting C<*flags> to 0 or C<SVf_UTF8>.

=over 3

 const char *  CopLABEL          (COP *const cop)
 const char *  CopLABEL_len      (COP *const cop, STRLEN *len)
 const char *  CopLABEL_len_flags(COP *const cop, STRLEN *len,
                                  U32 *flags)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<CopLINE>
X<CopLINE>

Returns the line number in the source code associated with the C<COP> C<c>

=over 3

 line_t  CopLINE(const COP * c)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<CopSTASH>
X<CopSTASH>

Returns the stash associated with C<c>.

=over 3

 HV *  CopSTASH(const COP * c)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<CopSTASH_eq>
X<CopSTASH_eq>

Returns a boolean as to whether or not C<hv> is the stash associated with C<c>.

=over 3

 bool  CopSTASH_eq(const COP * c, const HV * hv)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<CopSTASHPV>
X<CopSTASHPV>

Returns the package name of the stash associated with C<c>, or C<NULL> if no
associated stash

=over 3

 char *  CopSTASHPV(const COP * c)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<CopSTASHPV_set>
X<CopSTASHPV_set>

Set the package name of the stash associated with C<c>, to the NUL-terminated C
string C<p>, creating the package if necessary.

=over 3

 void  CopSTASHPV_set(COP * c, const char * pv)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<CopSTASH_set>
X<CopSTASH_set>

Set the stash associated with C<c> to C<hv>.

=over 3

 bool  CopSTASH_set(COP * c, HV * hv)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<cop_store_label>
X<cop_store_label>

NOTE: C<cop_store_label> is B<experimental> and may change or be
removed without notice.

Save a label into a C<cop_hints_hash>.
You need to set flags to C<SVf_UTF8>
for a UTF-8 label.  Any other flag is ignored.

=over 3

 void  cop_store_label(COP * const cop, const char *label,
                       STRLEN len, U32 flags)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<PERL_SI>
X<PERL_SI>

Use this typedef to declare variables that are to hold C<struct stackinfo>.

=back

=for hackers
Found in file cop.h

=over 4

=item C<PL_curcop>
X<PL_curcop>

The currently active COP (control op) roughly representing the current
statement in the source.

On threaded perls, each thread has an independent copy of this variable;
each initialized at creation time with the current value of the creating
thread's copy.

=over 3

 COP*  PL_curcop

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<RCPV_LEN>
X<RCPV_LEN>

Returns the length of a pv created with C<rcpv_new()>.
Note that this reflects the length of the string from the callers
point of view, it does not include the mandatory null which is
always injected at the end of the string by rcpv_new().
No checks are performed to ensure that C<pv> was actually allocated
with C<rcpv_new()>, it is the callers responsibility to ensure that
this is the case.

=over 3

 RCPV *  RCPV_LEN(char *pv)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<RCPV_REFCNT_dec>
X<RCPV_REFCNT_dec>

Decrements the refcount for a C<char *> pointer which was created
with a call to C<rcpv_new()>. Same as calling rcpv_free().
No checks are performed to ensure that C<pv> was actually allocated
with C<rcpv_new()>, it is the callers responsibility to ensure that
this is the case.

=over 3

 RCPV *  RCPV_REFCNT_dec(char *pv)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<RCPV_REFCNT_inc>
X<RCPV_REFCNT_inc>

Increments the refcount for a C<char *> pointer which was created
with a call to C<rcpv_new()>. Same as calling rcpv_copy().
No checks are performed to ensure that C<pv> was actually allocated
with C<rcpv_new()>, it is the callers responsibility to ensure that
this is the case.

=over 3

 RCPV *  RCPV_REFCNT_inc(char *pv)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<RCPV_REFCOUNT>
X<RCPV_REFCOUNT>

Returns the refcount for a pv created with C<rcpv_new()>. 
No checks are performed to ensure that C<pv> was actually allocated
with C<rcpv_new()>, it is the callers responsibility to ensure that
this is the case.

=over 3

 RCPV *  RCPV_REFCOUNT(char *pv)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<RCPVx>
X<RCPVx>

Returns the RCPV structure (struct rcpv) for a refcounted
string pv created with C<rcpv_new()>.
No checks are performed to ensure that C<pv> was actually allocated
with C<rcpv_new()>, it is the callers responsibility to ensure that
this is the case.

=over 3

 RCPV *  RCPVx(char *pv)

=back

=back

=for hackers
Found in file cop.h

=head1 Custom Operators

=over 4

=item C<custom_op_register>
X<custom_op_register>

Register a custom op.  See L<perlguts/"Custom Operators">.

NOTE: C<custom_op_register> must be explicitly called as
C<Perl_custom_op_register>
with an C<aTHX_> parameter.

=over 3

 void  Perl_custom_op_register(pTHX_ Perl_ppaddr_t ppaddr,
                               const XOP *xop)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<Perl_custom_op_xop>
X<Perl_custom_op_xop>

Return the XOP structure for a given custom op.  This macro should be
considered internal to C<OP_NAME> and the other access macros: use them instead.
This macro does call a function.  Prior
to 5.19.6, this was implemented as a
function.

=over 3

 const XOP *  Perl_custom_op_xop(pTHX_ const OP *o)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<XopDISABLE>
X<XopDISABLE>

Temporarily disable a member of the XOP, by clearing the appropriate flag.

=over 3

 void  XopDISABLE(XOP *xop, token which)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<XopENABLE>
X<XopENABLE>

Reenable a member of the XOP which has been disabled.

=over 3

 void  XopENABLE(XOP *xop, token which)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<XopENTRY>
X<XopENTRY>

Return a member of the XOP structure.  C<which> is a cpp token
indicating which entry to return.  If the member is not set
this will return a default value.  The return type depends
on C<which>.  This macro evaluates its arguments more than
once.  If you are using C<Perl_custom_op_xop> to retrieve a
C<XOP *> from a C<OP *>, use the more efficient L</XopENTRYCUSTOM> instead.

=over 3

   XopENTRY(XOP *xop, token which)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<XopENTRYCUSTOM>
X<XopENTRYCUSTOM>

Exactly like C<XopENTRY(XopENTRY(Perl_custom_op_xop(aTHX_ o), which)> but more
efficient.  The C<which> parameter is identical to L</XopENTRY>.

=over 3

   XopENTRYCUSTOM(const OP *o, token which)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<XopENTRY_set>
X<XopENTRY_set>

Set a member of the XOP structure.  C<which> is a cpp token
indicating which entry to set.  See L<perlguts/"Custom Operators">
for details about the available members and how
they are used.  This macro evaluates its argument
more than once.

=over 3

 void  XopENTRY_set(XOP *xop, token which, value)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<XopFLAGS>
X<XopFLAGS>

Return the XOP's flags.

=over 3

 U32  XopFLAGS(XOP *xop)

=back

=back

=for hackers
Found in file op.h

=head1 CV Handling
X<CV>X<GV_ADD>

This section documents functions to manipulate CVs which are
code-values, meaning subroutines.  For more information, see
L<perlguts>.


=over 4

=item C<caller_cx>
X<caller_cx>

The XSUB-writer's equivalent of L<caller()|perlfunc/caller>.  The
returned C<PERL_CONTEXT> structure can be interrogated to find all the
information returned to Perl by C<caller>.  Note that XSUBs don't get a
stack frame, so C<caller_cx(0, NULL)> will return information for the
immediately-surrounding Perl code.

This function skips over the automatic calls to C<&DB::sub> made on the
behalf of the debugger.  If the stack frame requested was a sub called by
C<DB::sub>, the return value will be the frame for the call to
C<DB::sub>, since that has the correct line number/etc. for the call
site.  If I<dbcxp> is non-C<NULL>, it will be set to a pointer to the
frame for the sub call itself.

