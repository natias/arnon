        cmd[b'-l'] = b'1'
    if opts.get(b'stat'):
        cmd[b'--stat'] = None
    if opts.get(b'graph'):
        cmd[b'-G'] = None
    if opts.get(b'patch'):
        cmd[b'-p'] = None

    if opts.get(b'pretty') or opts.get(b'format') or opts.get(b'oneline'):
        format = opts.get(b'format', b'')
        if b'format:' in format:
            ui.status(
                _(
                    b"note: --format format:??? equates to Mercurial's "
                    b"--template. See hg help templates for more info.\n\n"
                )
            )
            cmd[b'--template'] = b'???'
        else:
            ui.status(
                _(
                    b"note: --pretty/format/oneline equate to Mercurial's "
                    b"--style or --template. See hg help templates for "
                    b"more info.\n\n"
                )
            )
            cmd[b'--style'] = b'???'

    if len(args) > 0:
        if b'..' in args[0]:
            since, until = args[0].split(b'..')
            cmd[b'-r'] = b"'%s::%s'" % (since, until)
            del args[0]
        cmd.extend(args)

    ui.status((bytes(cmd)), b"\n")


def lsfiles(ui, repo, *args, **kwargs):
    cmdoptions = [
        (b'c', b'cached', None, b''),
        (b'd', b'deleted', None, b''),
        (b'm', b'modified', None, b''),
        (b'o', b'others', None, b''),
        (b'i', b'ignored', None, b''),
        (b's', b'stage', None, b''),
        (b'z', b'_zero', None, b''),
    ]
    args, opts = parseoptions(ui, cmdoptions, args)

    if (
        opts.get(b'modified')
        or opts.get(b'deleted')
        or opts.get(b'others')
        or opts.get(b'ignored')
    ):
        cmd = Command(b'status')
        if opts.get(b'deleted'):
            cmd[b'-d'] = None
        if opts.get(b'modified'):
            cmd[b'-m'] = None
        if opts.get(b'others'):
            cmd[b'-o'] = None
        if opts.get(b'ignored'):
            cmd[b'-i'] = None
    else:
        cmd = Command(b'files')
    if opts.get(b'stage'):
        ui.status(
            _(
                b"note: Mercurial doesn't have a staging area, ignoring "
                b"--stage\n"
            )
        )
    if opts.get(b'_zero'):
        cmd[b'-0'] = None
    cmd.append(b'.')
    for include in args:
        cmd[b'-I'] = procutil.shellquote(include)

    ui.status((bytes(cmd)), b"\n")


def merge(ui, repo, *args, **kwargs):
    cmdoptions = []
    args, opts = parseoptions(ui, cmdoptions, args)

    cmd = Command(b'merge')

    if len(args) > 0:
        cmd.append(args[len(args) - 1])

    ui.status((bytes(cmd)), b"\n")


def mergebase(ui, repo, *args, **kwargs):
    cmdoptions = []
    args, opts = parseoptions(ui, cmdoptions, args)

    if len(args) != 2:
        args = [b'A', b'B']

    cmd = Command(
        b"log -T '{node}\\n' -r 'ancestor(%s,%s)'" % (args[0], args[1])
    )

    ui.status(
        _(b'note: ancestors() is part of the revset language\n'),
        _(b"(learn more about revsets with 'hg help revsets')\n\n"),
    )
    ui.status((bytes(cmd)), b"\n")


def mergetool(ui, repo, *args, **kwargs):
    cmdoptions = []
    args, opts = parseoptions(ui, cmdoptions, args)

    cmd = Command(b"resolve")

    if len(args) == 0:
        cmd[b'--all'] = None
    cmd.extend(args)
    ui.status((bytes(cmd)), b"\n")


def mv(ui, repo, *args, **kwargs):
    cmdoptions = [
        (b'f', b'force', None, b''),
        (b'n', b'dry-run', None, b''),
    ]
    args, opts = parseoptions(ui, cmdoptions, args)

    cmd = Command(b'mv')
    cmd.extend(args)

    if opts.get(b'force'):
        cmd[b'-f'] = None
    if opts.get(b'dry_run'):
        cmd[b'-n'] = None

    ui.status((bytes(cmd)), b"\n")


def pull(ui, repo, *args, **kwargs):
    cmdoptions = [
        (b'', b'all', None, b''),
        (b'f', b'force', None, b''),
        (b'r', b'rebase', None, b''),
    ]
    args, opts = parseoptions(ui, cmdoptions, args)

    cmd = Command(b'pull')
    cmd[b'--rebase'] = None

    if len(args) > 0:
        cmd.append(args[0])
        if len(args) > 1:
            ui.status(
                _(
                    b"note: Mercurial doesn't have refspecs. "
                    b"-r can be used to specify which commits you want to "
                    b"pull. -B can be used to specify which bookmark you "
                    b"want to pull.\n\n"
                )
            )
            for v in args[1:]:
                if v in repo._bookmarks:
                    cmd[b'-B'] = v
                else:
                    cmd[b'-r'] = v

    ui.status((bytes(cmd)), b"\n")


def push(ui, repo, *args, **kwargs):
    cmdoptions = [
        (b'', b'all', None, b''),
        (b'f', b'force', None, b''),
    ]
    args, opts = parseoptions(ui, cmdoptions, args)

    cmd = Command(b'push')

    if len(args) > 0:
        cmd.append(args[0])
        if len(args) > 1:
            ui.status(
                _(
                    b"note: Mercurial doesn't have refspecs. "
                    b"-r can be used to specify which commits you want "
                    b"to push. -B can be used to specify which bookmark "
                    b"you want to push.\n\n"
                )
            )
            for v in args[1:]:
                if v in repo._bookmarks:
                    cmd[b'-B'] = v
                else:
                    cmd[b'-r'] = v

    if opts.get(b'force'):
        cmd[b'-f'] = None

    ui.status((bytes(cmd)), b"\n")


def rebase(ui, repo, *args, **kwargs):
    cmdoptions = [
        (b'', b'all', None, b''),
        (b'i', b'interactive', None, b''),
        (b'', b'onto', b'', b''),
        (b'', b'abort', None, b''),
        (b'', b'continue', None, b''),
        (b'', b'skip', None, b''),
    ]
    args, opts = parseoptions(ui, cmdoptions, args)

    if opts.get(b'interactive'):
        ui.status(
            _(
                b"note: hg histedit does not perform a rebase. "
                b"It just edits history.\n\n"
            )
        )
        cmd = Command(b'histedit')
        if len(args) > 0:
            ui.status(
                _(
                    b"also note: 'hg histedit' will automatically detect"
                    b" your stack, so no second argument is necessary\n\n"
                )
            )
        ui.status((bytes(cmd)), b"\n")
        return

    if opts.get(b'skip'):
        cmd = Command(b'revert --all -r .')
        ui.status((bytes(cmd)), b"\n")

    cmd = Command(b'rebase')

    if opts.get(b'continue') or opts.get(b'skip'):
        cmd[b'--continue'] = None
    if opts.get(b'abort'):
        cmd[b'--abort'] = None

    if opts.get(b'onto'):
        ui.status(
            _(
                b"note: if you're trying to lift a commit off one branch, "
                b"try hg rebase -d <destination commit> -s <commit to be "
                b"lifted>\n\n"
            )
        )
        cmd[b'-d'] = convert(opts.get(b'onto'))
        if len(args) < 2:
            raise error.Abort(_(b"expected format: git rebase --onto X Y Z"))
        cmd[b'-s'] = b"'::%s - ::%s'" % (convert(args[1]), convert(args[0]))
    else:
        if len(args) == 1:
            cmd[b'-d'] = convert(args[0])
        elif len(args) == 2:
            cmd[b'-d'] = convert(args[0])
            cmd[b'-b'] = convert(args[1])

    ui.status((bytes(cmd)), b"\n")


def reflog(ui, repo, *args, **kwargs):
    cmdoptions = [
        (b'', b'all', None, b''),
    ]
    args, opts = parseoptions(ui, cmdoptions, args)

    cmd = Command(b'journal')
    if opts.get(b'all'):
        cmd[b'--all'] = None
    if len(args) > 0:
        cmd.append(args[0])

    ui.status(bytes(cmd), b"\n\n")
    ui.status(
        _(
            b"note: in hg commits can be deleted from repo but we always"
            b" have backups\n"
        )
    )


def reset(ui, repo, *args, **kwargs):
    cmdoptions = [
        (b'', b'soft', None, b''),
        (b'', b'hard', None, b''),
        (b'', b'mixed', None, b''),
    ]
    args, opts = parseoptions(ui, cmdoptions, args)

    commit = convert(args[0] if len(args) > 0 else b'.')
    hard = opts.get(b'hard')

    if opts.get(b'mixed'):
        ui.status(
            _(
                b'note: --mixed has no meaning since Mercurial has no '
                b'staging area\n\n'
            )
        )
    if opts.get(b'soft'):
        ui.status(
            _(
                b'note: --soft has no meaning since Mercurial has no '
                b'staging area\n\n'
            )
        )

    cmd = Command(b'update')
    if hard:
        cmd.append(b'--clean')

    cmd.append(commit)

    ui.status((bytes(cmd)), b"\n")


def revert(ui, repo, *args, **kwargs):
    cmdoptions = []
    args, opts = parseoptions(ui, cmdoptions, args)

    if len(args) > 1:
        ui.status(
            _(
                b"note: hg backout doesn't support multiple commits at "
                b"once\n\n"
            )
        )

    cmd = Command(b'backout')
    if args:
        cmd.append(args[0])

    ui.status((bytes(cmd)), b"\n")


def revparse(ui, repo, *args, **kwargs):
    cmdoptions = [
        (b'', b'show-cdup', None, b''),
        (b'', b'show-toplevel', None, b''),
    ]
    args, opts = parseoptions(ui, cmdoptions, args)

    if opts.get(b'show_cdup') or opts.get(b'show_toplevel'):
        cmd = Command(b'root')
        if opts.get(b'show_cdup'):
            ui.status(_(b"note: hg root prints the root of the repository\n\n"))
        ui.status((bytes(cmd)), b"\n")
    else:
        ui.status(_(b"note: see hg help revset for how to refer to commits\n"))


def rm(ui, repo, *args, **kwargs):
    cmdoptions = [
        (b'f', b'force', None, b''),
        (b'n', b'dry-run', None, b''),
    ]
    args, opts = parseoptions(ui, cmdoptions, args)

    cmd = Command(b'rm')
    cmd.extend(args)

    if opts.get(b'force'):
        cmd[b'-f'] = None
    if opts.get(b'dry_run'):
        cmd[b'-n'] = None

    ui.status((bytes(cmd)), b"\n")


def show(ui, repo, *args, **kwargs):
    cmdoptions = [
        (b'', b'name-status', None, b''),
        (b'', b'pretty', b'', b''),
        (b'U', b'unified', int, b''),
    ]
    args, opts = parseoptions(ui, cmdoptions, args)

    if opts.get(b'name_status'):
        if opts.get(b'pretty') == b'format:':
            cmd = Command(b'status')
            cmd[b'--change'] = b'.'
        else:
            cmd = Command(b'log')
            cmd.append(b'--style status')
            cmd.append(b'-r .')
    elif len(args) > 0:
        if ispath(repo, args[0]):
            cmd = Command(b'cat')
        else:
            cmd = Command(b'export')
        cmd.extend(args)
        if opts.get(b'unified'):
            cmd.append(b'--config diff.unified=%d' % (opts[b'unified'],))
    elif opts.get(b'unified'):
        cmd = Command(b'export')
        cmd.append(b'--config diff.unified=%d' % (opts[b'unified'],))
    else:
        cmd = Command(b'export')

    ui.status((bytes(cmd)), b"\n")


def stash(ui, repo, *args, **kwargs):
    cmdoptions = [
        (b'p', b'patch', None, b''),
    ]
    args, opts = parseoptions(ui, cmdoptions, args)

    cmd = Command(b'shelve')
    action = args[0] if len(args) > 0 else None

    if action == b'list':
        cmd[b'-l'] = None
        if opts.get(b'patch'):
            cmd[b'-p'] = None
    elif action == b'show':
        if opts.get(b'patch'):
            cmd[b'-p'] = None
        else:
            cmd[b'--stat'] = None
        if len(args) > 1:
            cmd.append(args[1])
    elif action == b'clear':
        cmd[b'--cleanup'] = None
    elif action == b'drop':
        cmd[b'-d'] = None
        if len(args) > 1:
            cmd.append(args[1])
        else:
            cmd.append(b'<shelve name>')
    elif action == b'pop' or action == b'apply':
        cmd = Command(b'unshelve')
        if len(args) > 1:
            cmd.append(args[1])
        if action == b'apply':
            cmd[b'--keep'] = None
    elif action == b'branch' or action == b'create':
        ui.status(
            _(
                b"note: Mercurial doesn't have equivalents to the "
                b"git stash branch or create actions\n\n"
            )
        )
        return
    else:
        if len(args) > 0:
            if args[0] != b'save':
                cmd[b'--name'] = args[0]
            elif len(args) > 1:
                cmd[b'--name'] = args[1]

    ui.status((bytes(cmd)), b"\n")


def status(ui, repo, *args, **kwargs):
    cmdoptions = [
        (b'', b'ignored', None, b''),
    ]
    args, opts = parseoptions(ui, cmdoptions, args)

    cmd = Command(b'status')
    cmd.extend(args)

    if opts.get(b'ignored'):
        cmd[b'-i'] = None

    ui.status((bytes(cmd)), b"\n")


def svn(ui, repo, *args, **kwargs):
    if not args:
        raise error.Abort(_(b'missing svn command'))
    svncmd = args[0]
    if svncmd not in gitsvncommands:
        raise error.Abort(_(b'unknown git svn command "%s"') % svncmd)

    args = args[1:]
    return gitsvncommands[svncmd](ui, repo, *args, **kwargs)


def svndcommit(ui, repo, *args, **kwargs):
    cmdoptions = []
    parseoptions(ui, cmdoptions, args)

    cmd = Command(b'push')

    ui.status((bytes(cmd)), b"\n")


def svnfetch(ui, repo, *args, **kwargs):
    cmdoptions = []
    parseoptions(ui, cmdoptions, args)

    cmd = Command(b'pull')
    cmd.append(b'default-push')

    ui.status((bytes(cmd)), b"\n")


def svnfindrev(ui, repo, *args, **kwargs):
    cmdoptions = []
    args, opts = parseoptions(ui, cmdoptions, args)

    if not args:
        raise error.Abort(_(b'missing find-rev argument'))

    cmd = Command(b'log')
    cmd[b'-r'] = args[0]

    ui.status((bytes(cmd)), b"\n")


def svnrebase(ui, repo, *args, **kwargs):
    cmdoptions = [
        (b'l', b'local', None, b''),
    ]
    parseoptions(ui, cmdoptions, args)

    pullcmd = Command(b'pull')
    pullcmd.append(b'default-push')
    rebasecmd = Command(b'rebase')
    rebasecmd.append(b'tip')

    cmd = pullcmd & rebasecmd

    ui.status((bytes(cmd)), b"\n")


def tag(ui, repo, *args, **kwargs):
    cmdoptions = [
        (b'f', b'force', None, b''),
        (b'l', b'list', None, b''),
        (b'd', b'delete', None, b''),
    ]
    args, opts = parseoptions(ui, cmdoptions, args)

    if opts.get(b'list'):
        cmd = Command(b'tags')
    else:
        cmd = Command(b'tag')

        if not args:
            raise error.Abort(_(b'missing tag argument'))

        cmd.append(args[0])
        if len(args) > 1:
            cmd[b'-r'] = args[1]

        if opts.get(b'delete'):
            cmd[b'--remove'] = None

        if opts.get(b'force'):
            cmd[b'-f'] = None

    ui.status((bytes(cmd)), b"\n")


gitcommands = {
    b'add': add,
    b'am': am,
    b'apply': apply,
    b'bisect': bisect,
    b'blame': blame,
    b'branch': branch,
    b'checkout': checkout,
    b'cherry-pick': cherrypick,
    b'clean': clean,
    b'clone': clone,
    b'commit': commit,
    b'diff': diff,
    b'difftool': difftool,
    b'fetch': fetch,
    b'grep': grep,
    b'init': init,
    b'log': log,
    b'ls-files': lsfiles,
    b'merge': merge,
    b'merge-base': mergebase,
    b'mergetool': mergetool,
    b'mv': mv,
    b'pull': pull,
    b'push': push,
    b'rebase': rebase,
    b'reflog': reflog,
    b'reset': reset,
    b'revert': revert,
    b'rev-parse': revparse,
    b'rm': rm,
    b'show': show,
    b'stash': stash,
    b'status': status,
    b'svn': svn,
    b'tag': tag,
    b'whatchanged': deprecated,
}

gitsvncommands = {
    b'dcommit': svndcommit,
    b'fetch': svnfetch,
    b'find-rev': svnfindrev,
    b'rebase': svnrebase,
}
                                                                                                                                                       usr/lib/python3/dist-packages/hgext/gpg.py                                                          0000644 0000000 0000000 00000025722 14355257011 017227  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # Copyright 2005, 2006 Benoit Boissinot <benoit.boissinot@ens-lyon.org>
#
# This software may be used and distributed according to the terms of the
# GNU General Public License version 2 or any later version.

'''commands to sign and verify changesets'''


import binascii
import os

from mercurial.i18n import _
from mercurial.node import (
    bin,
    hex,
    short,
)
from mercurial import (
    cmdutil,
    error,
    help,
    match,
    pycompat,
    registrar,
)
from mercurial.utils import (
    dateutil,
    procutil,
)

cmdtable = {}
command = registrar.command(cmdtable)
# Note for extension authors: ONLY specify testedwith = 'ships-with-hg-core' for
# extensions which SHIP WITH MERCURIAL. Non-mainline extensions should
# be specifying the version(s) of Mercurial they are tested with, or
# leave the attribute unspecified.
testedwith = b'ships-with-hg-core'

configtable = {}
configitem = registrar.configitem(configtable)

configitem(
    b'gpg',
    b'cmd',
    default=b'gpg',
)
configitem(
    b'gpg',
    b'key',
    default=None,
)
configitem(
    b'gpg',
    b'.*',
    default=None,
    generic=True,
)

# Custom help category
_HELP_CATEGORY = b'gpg'
help.CATEGORY_ORDER.insert(
    help.CATEGORY_ORDER.index(registrar.command.CATEGORY_HELP), _HELP_CATEGORY
)
help.CATEGORY_NAMES[_HELP_CATEGORY] = b'Signing changes (GPG)'


class gpg:
    def __init__(self, path, key=None):
        self.path = path
        self.key = (key and b" --local-user \"%s\"" % key) or b""

    def sign(self, data):
        gpgcmd = b"%s --sign --detach-sign%s" % (self.path, self.key)
        return procutil.filter(data, gpgcmd)

    def verify(self, data, sig):
        """returns of the good and bad signatures"""
        sigfile = datafile = None
        try:
            # create temporary files
            fd, sigfile = pycompat.mkstemp(prefix=b"hg-gpg-", suffix=b".sig")
            fp = os.fdopen(fd, 'wb')
            fp.write(sig)
            fp.close()
            fd, datafile = pycompat.mkstemp(prefix=b"hg-gpg-", suffix=b".txt")
            fp = os.fdopen(fd, 'wb')
            fp.write(data)
            fp.close()
            gpgcmd = (
                b"%s --logger-fd 1 --status-fd 1 --verify \"%s\" \"%s\""
                % (
                    self.path,
                    sigfile,
                    datafile,
                )
            )
            ret = procutil.filter(b"", gpgcmd)
        finally:
            for f in (sigfile, datafile):
                try:
                    if f:
                        os.unlink(f)
                except OSError:
                    pass
        keys = []
        key, fingerprint = None, None
        for l in ret.splitlines():
            # see DETAILS in the gnupg documentation
            # filter the logger output
            if not l.startswith(b"[GNUPG:]"):
                continue
            l = l[9:]
            if l.startswith(b"VALIDSIG"):
                # fingerprint of the primary key
                fingerprint = l.split()[10]
            elif l.startswith(b"ERRSIG"):
                key = l.split(b" ", 3)[:2]
                key.append(b"")
                fingerprint = None
            elif (
                l.startswith(b"GOODSIG")
                or l.startswith(b"EXPSIG")
                or l.startswith(b"EXPKEYSIG")
                or l.startswith(b"BADSIG")
            ):
                if key is not None:
                    keys.append(key + [fingerprint])
                key = l.split(b" ", 2)
                fingerprint = None
        if key is not None:
            keys.append(key + [fingerprint])
        return keys


def newgpg(ui, **opts):
    """create a new gpg instance"""
    gpgpath = ui.config(b"gpg", b"cmd")
    gpgkey = opts.get('key')
    if not gpgkey:
        gpgkey = ui.config(b"gpg", b"key")
    return gpg(gpgpath, gpgkey)


def sigwalk(repo):
    """
    walk over every sigs, yields a couple
    ((node, version, sig), (filename, linenumber))
    """

    def parsefile(fileiter, context):
        ln = 1
        for l in fileiter:
            if not l:
                continue
            yield (l.split(b" ", 2), (context, ln))
            ln += 1

    # read the heads
    fl = repo.file(b".hgsigs")
    for r in reversed(fl.heads()):
        fn = b".hgsigs|%s" % short(r)
        for item in parsefile(fl.read(r).splitlines(), fn):
            yield item
    try:
        # read local signatures
        fn = b"localsigs"
        for item in parsefile(repo.vfs(fn), fn):
            yield item
    except IOError:
        pass


def getkeys(ui, repo, mygpg, sigdata, context):
    """get the keys who signed a data"""
    fn, ln = context
    node, version, sig = sigdata
    prefix = b"%s:%d" % (fn, ln)
    node = bin(node)

    data = node2txt(repo, node, version)
    sig = binascii.a2b_base64(sig)
    keys = mygpg.verify(data, sig)

    validkeys = []
    # warn for expired key and/or sigs
    for key in keys:
        if key[0] == b"ERRSIG":
            ui.write(_(b"%s Unknown key ID \"%s\"\n") % (prefix, key[1]))
            continue
        if key[0] == b"BADSIG":
            ui.write(_(b"%s Bad signature from \"%s\"\n") % (prefix, key[2]))
            continue
        if key[0] == b"EXPSIG":
            ui.write(
                _(b"%s Note: Signature has expired (signed by: \"%s\")\n")
                % (prefix, key[2])
            )
        elif key[0] == b"EXPKEYSIG":
            ui.write(
                _(b"%s Note: This key has expired (signed by: \"%s\")\n")
                % (prefix, key[2])
            )
        validkeys.append((key[1], key[2], key[3]))
    return validkeys


@command(b"sigs", [], _(b'hg sigs'), helpcategory=_HELP_CATEGORY)
def sigs(ui, repo):
    """list signed changesets"""
    mygpg = newgpg(ui)
    revs = {}

    for data, context in sigwalk(repo):
        node, version, sig = data
        fn, ln = context
        try:
            n = repo.lookup(node)
        except KeyError:
            ui.warn(_(b"%s:%d node does not exist\n") % (fn, ln))
            continue
        r = repo.changelog.rev(n)
        keys = getkeys(ui, repo, mygpg, data, context)
        if not keys:
            continue
        revs.setdefault(r, [])
        revs[r].extend(keys)
    for rev in sorted(revs, reverse=True):
        for k in revs[rev]:
            r = b"%5d:%s" % (rev, hex(repo.changelog.node(rev)))
            ui.write(b"%-30s %s\n" % (keystr(ui, k), r))


@command(b"sigcheck", [], _(b'hg sigcheck REV'), helpcategory=_HELP_CATEGORY)
def sigcheck(ui, repo, rev):
    """verify all the signatures there may be for a particular revision"""
    mygpg = newgpg(ui)
    rev = repo.lookup(rev)
    hexrev = hex(rev)
    keys = []

    for data, context in sigwalk(repo):
        node, version, sig = data
        if node == hexrev:
            k = getkeys(ui, repo, mygpg, data, context)
            if k:
                keys.extend(k)

    if not keys:
        ui.write(_(b"no valid signature for %s\n") % short(rev))
        return

    # print summary
    ui.write(_(b"%s is signed by:\n") % short(rev))
    for key in keys:
        ui.write(b" %s\n" % keystr(ui, key))


def keystr(ui, key):
    """associate a string to a key (username, comment)"""
    keyid, user, fingerprint = key
    comment = ui.config(b"gpg", fingerprint)
    if comment:
        return b"%s (%s)" % (user, comment)
    else:
        return user


@command(
    b"sign",
    [
        (b'l', b'local', None, _(b'make the signature local')),
        (b'f', b'force', None, _(b'sign even if the sigfile is modified')),
        (
            b'',
            b'no-commit',
            None,
            _(b'do not commit the sigfile after signing'),
        ),
        (b'k', b'key', b'', _(b'the key id to sign with'), _(b'ID')),
        (b'm', b'message', b'', _(b'use text as commit message'), _(b'TEXT')),
        (b'e', b'edit', False, _(b'invoke editor on commit messages')),
    ]
    + cmdutil.commitopts2,
    _(b'hg sign [OPTION]... [REV]...'),
    helpcategory=_HELP_CATEGORY,
)
def sign(ui, repo, *revs, **opts):
    """add a signature for the current or given revision

    If no revision is given, the parent of the working directory is used,
    or tip if no revision is checked out.

    The ``gpg.cmd`` config setting can be used to specify the command
    to run. A default key can be specified with ``gpg.key``.

    See :hg:`help dates` for a list of formats valid for -d/--date.
    """
    with repo.wlock():
        return _dosign(ui, repo, *revs, **opts)


def _dosign(ui, repo, *revs, **opts):
    mygpg = newgpg(ui, **opts)
    opts = pycompat.byteskwargs(opts)
    sigver = b"0"
    sigmessage = b""

    date = opts.get(b'date')
    if date:
        opts[b'date'] = dateutil.parsedate(date)

    if revs:
        nodes = [repo.lookup(n) for n in revs]
    else:
        nodes = [
            node for node in repo.dirstate.parents() if node != repo.nullid
        ]
        if len(nodes) > 1:
            raise error.Abort(
                _(b'uncommitted merge - please provide a specific revision')
            )
        if not nodes:
            nodes = [repo.changelog.tip()]

    for n in nodes:
        hexnode = hex(n)
        ui.write(_(b"signing %d:%s\n") % (repo.changelog.rev(n), short(n)))
        # build data
        data = node2txt(repo, n, sigver)
        sig = mygpg.sign(data)
        if not sig:
            raise error.Abort(_(b"error while signing"))
        sig = binascii.b2a_base64(sig)
        sig = sig.replace(b"\n", b"")
        sigmessage += b"%s %s %s\n" % (hexnode, sigver, sig)

    # write it
    if opts[b'local']:
        repo.vfs.append(b"localsigs", sigmessage)
        return

    if not opts[b"force"]:
        msigs = match.exact([b'.hgsigs'])
        if any(repo.status(match=msigs, unknown=True, ignored=True)):
            raise error.Abort(
                _(b"working copy of .hgsigs is changed "),
                hint=_(b"please commit .hgsigs manually"),
            )

    sigsfile = repo.wvfs(b".hgsigs", b"ab")
    sigsfile.write(sigmessage)
    sigsfile.close()

    if b'.hgsigs' not in repo.dirstate:
        repo[None].add([b".hgsigs"])

    if opts[b"no_commit"]:
        return

    message = opts[b'message']
    if not message:
        # we don't translate commit messages
        message = b"\n".join(
            [b"Added signature for changeset %s" % short(n) for n in nodes]
        )
    try:
        editor = cmdutil.getcommiteditor(
            editform=b'gpg.sign', **pycompat.strkwargs(opts)
        )
        repo.commit(
            message, opts[b'user'], opts[b'date'], match=msigs, editor=editor
        )
    except ValueError as inst:
        raise error.Abort(pycompat.bytestr(inst))


def node2txt(repo, node, ver):
    """map a manifest into some text"""
    if ver == b"0":
        return b"%s\n" % hex(node)
    else:
        raise error.Abort(_(b"unknown signature version"))


def extsetup(ui):
    # Add our category before "Repository maintenance".
    help.CATEGORY_ORDER.insert(
        help.CATEGORY_ORDER.index(command.CATEGORY_MAINTENANCE), _HELP_CATEGORY
    )
    help.CATEGORY_NAMES[_HELP_CATEGORY] = b'GPG signing'
