F<.bat>, F<.pl>.

Note that Perl will start to look for scripts only if OS/2 cannot start the
specified application, thus C<system 'blah'> will not look for a script if 
there is an executable file F<blah.exe> I<anywhere> on C<PATH>.  In
other words, C<PATH> is essentially searched twice: once by the OS for
an executable, then by Perl for scripts.

Note also that executable files on OS/2 can have an arbitrary extension, but
F<.exe> will be automatically appended if no dot is present in the name.  The
workaround is as simple as that:  since F<blah.> and F<blah> denote the same
file (at list on FAT and HPFS file systems), to start an executable residing in
file F<n:/bin/blah> (no extension) give an argument C<n:/bin/blah.> (dot
appended) to system().

Perl will start PM programs from VIO (=text-mode) Perl process in a
separate PM session;
the opposite is not true: when you start a non-PM program from a PM
Perl process, Perl would not run it in a separate session.  If a separate
session is desired, either ensure
that shell will be used, as in C<system 'cmd /c myprog'>, or start it using
optional arguments to system() documented in C<OS2::Process> module.  This
is considered to be a feature.

=head1 Frequently asked questions

=head2 "It does not work"

Perl binary distributions come with a F<testperl.cmd> script which tries
to detect common problems with misconfigured installations.  There is a
pretty large chance it will discover which step of the installation you
managed to goof.  C<;-)>

=head2 I cannot run external programs

=over 4

=item *

Did you run your programs with C<-w> switch? See 
L</Starting OSE<sol>2 (and DOS) programs under Perl>.

=item *

Do you try to run I<internal> shell commands, like C<`copy a b`>
(internal for F<cmd.exe>), or C<`glob a*b`> (internal for ksh)? You
need to specify your shell explicitly, like C<`cmd /c copy a b`>,
since Perl cannot deduce which commands are internal to your shell.

=back

=head2 I cannot embed perl into my program, or use F<perl.dll> from my
program. 

=over 4

=item Is your program EMX-compiled with C<-Zmt -Zcrtdll>?

Well, nowadays Perl DLL should be usable from a differently compiled
program too...  If you can run Perl code from REXX scripts (see
L<OS2::REXX>), then there are some other aspect of interaction which
are overlooked by the current hackish code to support
differently-compiled principal programs.

If everything else fails, you need to build a stand-alone DLL for
perl. Contact me, I did it once. Sockets would not work, as a lot of
other stuff.

=item Did you use L<ExtUtils::Embed>?

Some time ago I had reports it does not work.  Nowadays it is checked
in the Perl test suite, so grep F<./t> subdirectory of the build tree
(as well as F<*.t> files in the F<./lib> subdirectory) to find how it
should be done "correctly".

=back

=head2 C<``> and pipe-C<open> do not work under DOS

This may a variant of just L</"I cannot run external programs">, or a
deeper problem. Basically: you I<need> RSX (see L</Prerequisites>)
for these commands to work, and you may need a port of F<sh.exe> which
understands command arguments. One of such ports is listed in
L</Prerequisites> under RSX. Do not forget to set variable
L</"C<PERL_SH_DIR>"> as well.

DPMI is required for RSX.

=head2 Cannot start C<find.exe "pattern" file>

The whole idea of the "standard C API to start applications" is that
the forms C<foo> and C<"foo"> of program arguments are completely
interchangeable.  F<find> breaks this paradigm;

  find "pattern" file
  find pattern file

are not equivalent; F<find> cannot be started directly using the above
API.  One needs a way to surround the doublequotes in some other
quoting construction, necessarily having an extra non-Unixish shell in
between.

Use one of

  system 'cmd', '/c', 'find "pattern" file';
  `cmd /c 'find "pattern" file'`

This would start F<find.exe> via F<cmd.exe> via C<sh.exe> via
C<perl.exe>, but this is a price to pay if you want to use
non-conforming program.

=head1 INSTALLATION

=head2 Automatic binary installation

The most convenient way of installing a binary distribution of perl is via perl installer
F<install.exe>. Just follow the instructions, and 99% of the
installation blues would go away. 

Note however, that you need to have F<unzip.exe> on your path, and
EMX environment I<running>. The latter means that if you just
installed EMX, and made all the needed changes to F<Config.sys>,
you may need to reboot in between. Check EMX runtime by running

	emxrev

Binary installer also creates a folder on your desktop with some useful
objects.  If you need to change some aspects of the work of the binary
installer, feel free to edit the file F<Perl.pkg>.  This may be useful
e.g., if you need to run the installer many times and do not want to
make many interactive changes in the GUI.

B<Things not taken care of by automatic binary installation:>

=over 15

=item C<PERL_BADLANG>

may be needed if you change your codepage I<after> perl installation,
and the new value is not supported by EMX. See L</"C<PERL_BADLANG>">.

=item C<PERL_BADFREE>

see L</"C<PERL_BADFREE>">.

=item F<Config.pm>

This file resides somewhere deep in the location you installed your
perl library, find it out by 

  perl -MConfig -le "print $INC{'Config.pm'}"

While most important values in this file I<are> updated by the binary
installer, some of them may need to be hand-edited. I know no such
data, please keep me informed if you find one.  Moreover, manual
changes to the installed version may need to be accompanied by an edit
of this file.

=back

B<NOTE>. Because of a typo the binary installer of 5.00305
would install a variable C<PERL_SHPATH> into F<Config.sys>. Please
remove this variable and put C<L</PERL_SH_DIR>> instead.

=head2 Manual binary installation

As of version 5.00305, OS/2 perl binary distribution comes split
into 11 components. Unfortunately, to enable configurable binary
installation, the file paths in the zip files are not absolute, but
relative to some directory.

Note that the extraction with the stored paths is still necessary
(default with unzip, specify C<-d> to pkunzip). However, you
need to know where to extract the files. You need also to manually
change entries in F<Config.sys> to reflect where did you put the
files. Note that if you have some primitive unzipper (like
C<pkunzip>), you may get a lot of warnings/errors during
unzipping. Upgrade to C<(w)unzip>.

Below is the sample of what to do to reproduce the configuration on my
machine.  In F<VIEW.EXE> you can press C<Ctrl-Insert> now, and
cut-and-paste from the resulting file - created in the directory you
started F<VIEW.EXE> from.

For each component, we mention environment variables related to each
installation directory.  Either choose directories to match your
values of the variables, or create/append-to variables to take into
account the directories.

=over 3

=item Perl VIO and PM executables (dynamically linked)

  unzip perl_exc.zip *.exe *.ico -d f:/emx.add/bin
  unzip perl_exc.zip *.dll -d f:/emx.add/dll

(have the directories with C<*.exe> on PATH, and C<*.dll> on
LIBPATH);

=item Perl_ VIO executable (statically linked)

  unzip perl_aou.zip -d f:/emx.add/bin

(have the directory on PATH);

=item Executables for Perl utilities

  unzip perl_utl.zip -d f:/emx.add/bin

(have the directory on PATH);

=item Main Perl library

  unzip perl_mlb.zip -d f:/perllib/lib

If this directory is exactly the same as the prefix which was compiled
into F<perl.exe>, you do not need to change
anything. However, for perl to find the library if you use a different
path, you need to
C<set PERLLIB_PREFIX> in F<Config.sys>, see L</"C<PERLLIB_PREFIX>">.

=item Additional Perl modules

  unzip perl_ste.zip -d f:/perllib/lib/site_perl/5.40.0/

Same remark as above applies.  Additionally, if this directory is not
one of directories on @INC (and @INC is influenced by C<PERLLIB_PREFIX>), you
need to put this
directory and subdirectory F<./os2> in C<PERLLIB> or C<PERL5LIB>
variable. Do not use C<PERL5LIB> unless you have it set already. See
L<perl/"ENVIRONMENT">.

B<[Check whether this extraction directory is still applicable with
the new directory structure layout!]>

=item Tools to compile Perl modules

  unzip perl_blb.zip -d f:/perllib/lib

Same remark as for F<perl_ste.zip>.

=item Manpages for Perl and utilities

  unzip perl_man.zip -d f:/perllib/man

This directory should better be on C<MANPATH>. You need to have a
working F<man> to access these files.

=item Manpages for Perl modules

  unzip perl_mam.zip -d f:/perllib/man

This directory should better be on C<MANPATH>. You need to have a
working man to access these files.

=item Source for Perl documentation

  unzip perl_pod.zip -d f:/perllib/lib

This is used by the C<perldoc> program (see L<perldoc>), and may be used to
generate HTML documentation usable by WWW browsers, and
documentation in zillions of other formats: C<info>, C<LaTeX>,
C<Acrobat>, C<FrameMaker> and so on.  [Use programs such as
F<pod2latex> etc.]

=item Perl manual in F<.INF> format

  unzip perl_inf.zip -d d:/os2/book

This directory should better be on C<BOOKSHELF>.

=item Pdksh

  unzip perl_sh.zip -d f:/bin

This is used by perl to run external commands which explicitly
require shell, like the commands using I<redirection> and I<shell
metacharacters>. It is also used instead of explicit F</bin/sh>.

Set C<PERL_SH_DIR> (see L</"C<PERL_SH_DIR>">) if you move F<sh.exe> from
the above location.

B<Note.> It may be possible to use some other sh-compatible shell (untested).

=back

After you installed the components you needed and updated the
F<Config.sys> correspondingly, you need to hand-edit
F<Config.pm>. This file resides somewhere deep in the location you
installed your perl library, find it out by

  perl -MConfig -le "print $INC{'Config.pm'}"

You need to correct all the entries which look like file paths (they
currently start with C<f:/>).

=head2 B<Warning>

The automatic and manual perl installation leave precompiled paths
inside perl executables. While these paths are overwritable (see
L</"C<PERLLIB_PREFIX>">, L</"C<PERL_SH_DIR>">), some people may prefer
binary editing of paths inside the executables/DLLs.

=head1 Accessing documentation

Depending on how you built/installed perl you may have (otherwise
identical) Perl documentation in the following formats:

=head2 OS/2 F<.INF> file

Most probably the most convenient form. Under OS/2 view it as

  view perl
  view perl perlfunc
  view perl less
  view perl ExtUtils::MakeMaker

(currently the last two may hit a wrong location, but this may improve
soon). Under Win* see L</"SYNOPSIS">.

If you want to build the docs yourself, and have I<OS/2 toolkit>, run

	pod2ipf > perl.ipf

in F</perllib/lib/pod> directory, then

	ipfc /inf perl.ipf

(Expect a lot of errors during the both steps.) Now move it on your
BOOKSHELF path.

=head2 Plain text

If you have perl documentation in the source form, perl utilities
installed, and GNU groff installed, you may use 

	perldoc perlfunc
	perldoc less
	perldoc ExtUtils::MakeMaker

to access the perl documentation in the text form (note that you may get
better results using perl manpages).

Alternately, try running pod2text on F<.pod> files.

=head2 Manpages

If you have F<man> installed on your system, and you installed perl
manpages, use something like this:

	man perlfunc
	man 3 less
	man ExtUtils.MakeMaker

to access documentation for different components of Perl. Start with

	man perl

Note that dot (F<.>) is used as a package separator for documentation
for packages, and as usual, sometimes you need to give the section - C<3>
above - to avoid shadowing by the I<less(1) manpage>.

Make sure that the directory B<above> the directory with manpages is
on our C<MANPATH>, like this

  set MANPATH=c:/man;f:/perllib/man

for Perl manpages in C<f:/perllib/man/man1/> etc.

=head2 HTML

If you have some WWW browser available, installed the Perl
documentation in the source form, and Perl utilities, you can build
HTML docs. Cd to directory with F<.pod> files, and do like this

	cd f:/perllib/lib/pod
	pod2html

After this you can direct your browser the file F<perl.html> in this
directory, and go ahead with reading docs, like this:

	explore file:///f:/perllib/lib/pod/perl.html

Alternatively you may be able to get these docs prebuilt from CPAN.

=head2 GNU C<info> files

Users of Emacs would appreciate it very much, especially with
C<CPerl> mode loaded. You need to get latest C<pod2texi> from C<CPAN>,
or, alternately, the prebuilt info pages.

=head2 F<PDF> files

for C<Acrobat> are available on CPAN (may be for slightly older version of
perl).

=head2 C<LaTeX> docs

can be constructed using C<pod2latex>.

=head1 BUILD

Here we discuss how to build Perl under OS/2.

=head2 The short story

Assume that you are a seasoned porter, so are sure that all the necessary
tools are already present on your system, and you know how to get the Perl
source distribution.  Untar it, change to the extract directory, and

  gnupatch -p0 < os2\diff.configure
  sh Configure -des -D prefix=f:/perllib
  make
  make test
  make install
  make aout_test
  make aout_install

This puts the executables in f:/perllib/bin.  Manually move them to the
C<PATH>, manually move the built F<perl*.dll> to C<LIBPATH> (here for
Perl DLL F<*> is a not-very-meaningful hex checksum), and run

  make installcmd INSTALLCMDDIR=d:/ir/on/path

Assuming that the C<man>-files were put on an appropriate location,
this completes the installation of minimal Perl system.  (The binary
distribution contains also a lot of additional modules, and the
documentation in INF format.)

What follows is a detailed guide through these steps.

=head2 Prerequisites

You need to have the latest EMX development environment, the full
GNU tool suite (gawk renamed to awk, and GNU F<find.exe>
earlier on path than the OS/2 F<find.exe>, same with F<sort.exe>, to
check use

  find --version
  sort --version

). You need the latest version of F<pdksh> installed as F<sh.exe>.

Check that you have B<BSD> libraries and headers installed, and - 
optionally - Berkeley DB headers and libraries, and crypt.

Possible locations to get the files:


  ftp://ftp.uni-heidelberg.de/pub/os2/unix/
  http://hobbes.nmsu.edu/h-browse.php?dir=/pub/os2
  http://cd.textfiles.com/hobbesos29804/disk1/DEV32/
  http://cd.textfiles.com/hobbesos29804/disk1/EMX09C/

It is reported that the following archives contain enough utils to
build perl: F<gnufutil.zip>, F<gnusutil.zip>, F<gnututil.zip>, F<gnused.zip>,
F<gnupatch.zip>, F<gnuawk.zip>, F<gnumake.zip>, F<gnugrep.zip>, F<bsddev.zip> and
F<ksh527rt.zip> (or a later version).  Note that all these utilities are
known to be available from LEO:

  ftp://crydee.sai.msu.ru/pub/comp/os/os2/leo/gnu/

Note also that the F<db.lib> and F<db.a> from the EMX distribution
are not suitable for multi-threaded compile (even single-threaded
flavor of Perl uses multi-threaded C RTL, for
compatibility with XFree86-OS/2). Get a corrected one from

  http://www.ilyaz.org/software/os2/db_mt.zip

If you have I<exactly the same version of Perl> installed already,
make sure that no copies or perl are currently running.  Later steps
of the build may fail since an older version of F<perl.dll> loaded into
memory may be found.  Running C<make test> becomes meaningless, since
the test are checking a previous build of perl (this situation is detected
and reported by F<os2/os2_base.t> test).  Do not forget to unset
C<PERL_EMXLOAD_SEC> in environment.

Also make sure that you have F</tmp> directory on the current drive,
and F<.> directory in your C<LIBPATH>. One may try to correct the
latter condition by

  set BEGINLIBPATH .\.

if you use something like F<CMD.EXE> or latest versions of
F<4os2.exe>.  (Setting BEGINLIBPATH to just C<.> is ignored by the
OS/2 kernel.)

Make sure your gcc is good for C<-Zomf> linking: run C<omflibs>
script in F</emx/lib> directory.

Check that you have link386 installed. It comes standard with OS/2,
but may be not installed due to customization. If typing

  link386

shows you do not have it, do I<Selective install>, and choose C<Link
object modules> in I<Optional system utilities/More>. If you get into
link386 prompts, press C<Ctrl-C> to exit.

=head2 Getting perl source

You need to fetch the latest perl source (including developers
releases). With some probability it is located in 

  http://www.cpan.org/src/
  http://www.cpan.org/src/unsupported

If not, you may need to dig in the indices to find it in the directory
of the current maintainer.

Quick cycle of developers release may break the OS/2 build time to
time, looking into 

  http://www.cpan.org/ports/os2/

may indicate the latest release which was publicly released by the
maintainer. Note that the release may include some additional patches
to apply to the current source of perl.

Extract it like this

  tar vzxf perl5.00409.tar.gz

You may see a message about errors while extracting F<Configure>. This is
because there is a conflict with a similarly-named file F<configure>.

Change to the directory of extraction.

=head2 Application of the patches

You need to apply the patches in F<./os2/diff.*> like this:

  gnupatch -p0 < os2\diff.configure

You may also need to apply the patches supplied with the binary
distribution of perl.  It also makes sense to look on the
perl5-porters mailing list for the latest OS/2-related patches (see
L<http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/>).  Such
patches usually contain strings C</os2/> and C<patch>, so it makes
sense looking for these strings.

=head2 Hand-editing

You may look into the file F<./hints/os2.sh> and correct anything
wrong you find there. I do not expect it is needed anywhere.

=head2 Making

  sh Configure -des -D prefix=f:/perllib

C<prefix> means: where to install the resulting perl library. Giving
correct prefix you may avoid the need to specify C<PERLLIB_PREFIX>,
see L</"C<PERLLIB_PREFIX>">.

I<Ignore the message about missing C<ln>, and about C<-c> option to
tr>. The latter is most probably already fixed, if you see it and can trace
where the latter spurious warning comes from, please inform me.

Now

  make

At some moment the built may die, reporting a I<version mismatch> or
I<unable to run F<perl>>.  This means that you do not have F<.> in
your LIBPATH, so F<perl.exe> cannot find the needed F<perl67B2.dll> (treat
these hex digits as line noise).  After this is fixed the build
should finish without a lot of fuss.

=head2 Testing

Now run

  make test

All tests should succeed (with some of them skipped).  If you have the
same version of Perl installed, it is crucial that you have C<.> early
in your LIBPATH (or in BEGINLIBPATH), otherwise your tests will most
probably test the wrong version of Perl.

Some tests may generate extra messages similar to

=over 4

=item A lot of C<bad free>

in database tests related to Berkeley DB. I<This should be fixed already.>
If it persists, you may disable this warnings, see L</"C<PERL_BADFREE>">.

=item Process terminated by SIGTERM/SIGINT

This is a standard message issued by OS/2 applications. *nix
applications die in silence. It is considered to be a feature. One can
easily disable this by appropriate sighandlers. 

However the test engine bleeds these message to screen in unexpected
moments. Two messages of this kind I<should> be present during
testing.

=back

To get finer test reports, call

  perl t/harness

The report with F<io/pipe.t> failing may look like this:

 Failed Test  Status Wstat Total Fail  Failed  List of failed
 ------------------------------------------------------------
 io/pipe.t                    12    1   8.33%  9
 7 tests skipped, plus 56 subtests skipped.
 Failed 1/195 test scripts, 99.49% okay. 1/6542 subtests failed,
    99.98% okay.

The reasons for most important skipped tests are:

=over 8

=item F<op/fs.t>

=over 4

=item Z<>18

Checks C<atime> and C<mtime> of C<stat()> - unfortunately, HPFS
provides only 2sec time granularity (for compatibility with FAT?).

=item Z<>25

Checks C<truncate()> on a filehandle just opened for write - I do not
know why this should or should not work.

=back

=item F<op/stat.t>

Checks C<stat()>. Tests:

=over 4

=item 4

Checks C<atime> and C<mtime> of C<stat()> - unfortunately, HPFS
provides only 2sec time granularity (for compatibility with FAT?).

=back

=back

=head2 Installing the built perl

If you haven't yet moved C<perl*.dll> onto LIBPATH, do it now.

Run

  make install

It would put the generated files into needed locations. Manually put
F<perl.exe>, F<perl__.exe> and F<perl___.exe> to a location on your
PATH, F<perl.dll> to a location on your LIBPATH.

Run

  make installcmd INSTALLCMDDIR=d:/ir/on/path

to convert perl utilities to F<.cmd> files and put them on
PATH. You need to put F<.EXE>-utilities on path manually. They are
installed in C<$prefix/bin>, here C<$prefix> is what you gave to
F<Configure>, see L</Making>.

If you use C<man>, either move the installed F<*/man/> directories to
your C<MANPATH>, or modify C<MANPATH> to match the location.  (One
could have avoided this by providing a correct C<manpath> option to
F<./Configure>, or editing F<./config.sh> between configuring and
making steps.)

=head2 C<a.out>-style build

Proceed as above, but make F<perl_.exe> (see L</"F<perl_.exe>">) by

  make perl_

test and install by

  make aout_test
  make aout_install

Manually put F<perl_.exe> to a location on your PATH.

B<Note.> The build process for C<perl_> I<does not know> about all the
dependencies, so you should make sure that anything is up-to-date,
say, by doing

  make perl_dll

first.

=head1 Building a binary distribution

[This section provides a short overview only...]

Building should proceed differently depending on whether the version of perl
you install is already present and used on your system, or is a new version
not yet used.  The description below assumes that the version is new, so
installing its DLLs and F<.pm> files will not disrupt the operation of your
system even if some intermediate steps are not yet fully working.

The other cases require a little bit more convoluted procedures.  Below I
suppose that the current version of Perl is C<5.8.2>, so the executables are
named accordingly.

=over

=item 1.

Fully build and test the Perl distribution.  Make sure that no tests are
failing with C<test> and C<aout_test> targets; fix the bugs in Perl and
the Perl test suite detected by these tests.  Make sure that C<all_test>
make target runs as clean as possible.  Check that F<os2/perlrexx.cmd>
runs fine.

=item 2.

Fully install Perl, including C<installcmd> target.  Copy the generated DLLs
to C<LIBPATH>; copy the numbered Perl executables (as in F<perl5.8.2.exe>)
to C<PATH>; copy C<perl_.exe> to C<PATH> as C<perl_5.8.2.exe>.  Think whether
you need backward-compatibility DLLs.  In most cases you do not need to install
them yet; but sometime this may simplify the following steps.

=item 3.

Make sure that C<CPAN.pm> can download files from CPAN.  If not, you may need
to manually install C<Net::FTP>.

=item 4.

Install the bundle C<Bundle::OS2_default>

 perl5.8.2 -MCPAN -e "install Bundle::OS2_default" < nul |& tee 00cpan_i_1

This may take a couple of hours on 1GHz processor (when run the first time).
And this should not be necessarily a smooth procedure.  Some modules may not
specify required dependencies, so one may need to repeat this procedure several
times until the results stabilize.

 perl5.8.2 -MCPAN -e "install Bundle::OS2_default" < nul |& tee 00cpan_i_2
 perl5.8.2 -MCPAN -e "install Bundle::OS2_default" < nul |& tee 00cpan_i_3

Even after they stabilize, some tests may fail.

Fix as many discovered bugs as possible.  Document all the bugs which are not
fixed, and all the failures with unknown reasons.  Inspect the produced logs
F<00cpan_i_1> to find suspiciously skipped tests, and other fishy events.

Keep in mind that I<installation> of some modules may fail too: for example,
the DLLs to update may be already loaded by F<CPAN.pm>.  Inspect the C<install>
logs (in the example above F<00cpan_i_1> etc) for errors, and install things
manually, as in

  cd $CPANHOME/.cpan/build/Digest-MD5-2.31
  make install

Some distributions may fail some tests, but you may want to install them
anyway (as above, or via C<force install> command of C<CPAN.pm> shell-mode).

Since this procedure may take quite a long time to complete, it makes sense
to "freeze" your CPAN configuration by disabling periodic updates of the
local copy of CPAN index: set C<index_expire> to some big value (I use 365),
then save the settings

  CPAN> o conf index_expire 365
  CPAN> o conf commit

Reset back to the default value C<1> when you are finished.

=item 5.

When satisfied with the results, rerun the C<installcmd> target.  Now you
can copy C<perl5.8.2.exe> to C<perl.exe>, and install the other OMF-build
executables: C<perl__.exe> etc.  They are ready to be used.

=item 6.

Change to the C<./pod> directory of the build tree, download the Perl logo
F<CamelGrayBig.BMP>, and run

  ( perl2ipf > perl.ipf ) |& tee 00ipf
  ipfc /INF perl.ipf |& tee 00inf

This produces the Perl docs online book C<perl.INF>.  Install in on
C<BOOKSHELF> path.

=item 7.

Now is the time to build statically linked executable F<perl_.exe> which
includes newly-installed via C<Bundle::OS2_default> modules.  Doing testing
via C<CPAN.pm> is going to be painfully slow, since it statically links
a new executable per XS extension.

Here is a possible workaround: create a toplevel F<Makefile.PL> in
F<$CPANHOME/.cpan/build/> with contents being (compare with L</Making
executables with a custom collection of statically loaded extensions>)

  use ExtUtils::MakeMaker;
  WriteMakefile NAME => 'dummy';

execute this as

  perl_5.8.2.exe Makefile.PL <nul |& tee 00aout_c1
  make -k all test <nul |& 00aout_t1

Again, this procedure should not be absolutely smooth.  Some C<Makefile.PL>'s
in subdirectories may be buggy, and would not run as "child" scripts.  The
interdependency of modules can strike you; however, since non-XS modules
are already installed, the prerequisites of most modules have a very good
chance to be present.

If you discover some glitches, move directories of problematic modules to a
different location; if these modules are non-XS modules, you may just ignore
them - they are already installed; the remaining, XS, modules you need to
install manually one by one.

After each such removal you need to rerun the C<Makefile.PL>/C<make> process;
usually this procedure converges soon.  (But be sure to convert all the
necessary external C libraries from F<.lib> format to F<.a> format: run one of

  emxaout foo.lib
  emximp -o foo.a foo.lib

whichever is appropriate.)  Also, make sure that the DLLs for external
libraries are usable with executables compiled without C<-Zmtd> options.

When you are sure that only a few subdirectories
lead to failures, you may want to add C<-j4> option to C<make> to speed up
skipping subdirectories with already finished build.

When you are satisfied with the results of tests, install the build C libraries
for extensions:

  make install |& tee 00aout_i

Now you can rename the file F<./perl.exe> generated during the last phase
to F<perl_5.8.2.exe>; place it on C<PATH>; if there is an inter-dependency
between some XS modules, you may need to repeat the C<test>/C<install> loop
with this new executable and some excluded modules - until the procedure
converges.

Now you have all the necessary F<.a> libraries for these Perl modules in the
places where Perl builder can find it.  Use the perl builder: change to an
empty directory, create a "dummy" F<Makefile.PL> again, and run

  perl_5.8.2.exe Makefile.PL |& tee 00c
  make perl		     |& tee 00p

This should create an executable F<./perl.exe> with all the statically loaded
extensions built in.  Compare the generated F<perlmain.c> files to make sure
that during the iterations the number of loaded extensions only increases.
Rename F<./perl.exe> to F<perl_5.8.2.exe> on C<PATH>.

When it converges, you got a functional variant of F<perl_5.8.2.exe>; copy it
to C<perl_.exe>.  You are done with generation of the local Perl installation.

=item 8.

Make sure that the installed modules are actually installed in the location
of the new Perl, and are not inherited from entries of @INC given for
inheritance from the older versions of Perl: set C<PERLLIB_582_PREFIX> to
redirect the new version of Perl to a new location, and copy the installed
files to this new location.  Redo the tests to make sure that the versions of
modules inherited from older versions of Perl are not needed.

Actually, the log output of L<pod2ipf(1)> during the step 6 gives a very detailed
info about which modules are loaded from which place; so you may use it as
an additional verification tool.

Check that some temporary files did not make into the perl install tree.
Run something like this

  pfind . -f "!(/\.(pm|pl|ix|al|h|a|lib|txt|pod|imp|bs|dll|ld|bs|inc|xbm|yml|cgi|uu|e2x|skip|packlist|eg|cfg|html|pub|enc|all|ini|po|pot)$/i or /^\w+$/") | less

in the install tree (both top one and F<sitelib> one).

Compress all the DLLs with F<lxlite>.  The tiny F<.exe> can be compressed with
C</c:max> (the bug only appears when there is a fixup in the last 6 bytes of a
page (?); since the tiny executables are much smaller than a page, the bug
will not hit).  Do not compress C<perl_.exe> - it would not work under DOS.

=item 9.

Now you can generate the binary distribution.  This is done by running the
test of the CPAN distribution C<OS2::SoftInstaller>.  Tune up the file
F<test.pl> to suit the layout of current version of Perl first.  Do not
forget to pack the necessary external DLLs accordingly.  Include the
description of the bugs and test suite failures you could not fix.  Include
the small-stack versions of Perl executables from Perl build directory.

Include F<perl5.def> so that people can relink the perl DLL preserving
the binary compatibility, or can create compatibility DLLs.  Include the diff
files (C<diff -pu old new>) of fixes you did so that people can rebuild your
version.  Include F<perl5.map> so that one can use remote debugging.

=item 10.

Share what you did with the other people.  Relax.  Enjoy fruits of your work.

=item 11.

Brace yourself for thanks, bug reports, hate mail and spam coming as result
of the previous step.  No good deed should remain unpunished!

=back

=head1 Building custom F<.EXE> files

The Perl executables can be easily rebuilt at any moment.  Moreover, one can
use the I<embedding> interface (see L<perlembed>) to make very customized
executables.

=head2 Making executables with a custom collection of statically loaded extensions

It is a little bit easier to do so while I<decreasing> the list of statically
loaded extensions.  We discuss this case only here.

=over

=item 1.

Change to an empty directory, and create a placeholder <Makefile.PL>:

  use ExtUtils::MakeMaker;
  WriteMakefile NAME => 'dummy';

=item 2.

Run it with the flavor of Perl (F<perl.exe> or F<perl_.exe>) you want to
rebuild.

  perl_ Makefile.PL

=item 3.

Ask it to create new Perl executable:

  make perl

(you may need to manually add C<PERLTYPE=-DPERL_CORE> to this commandline on
some versions of Perl; the symptom is that the command-line globbing does not
work from OS/2 shells with the newly-compiled executable; check with

  .\perl.exe -wle "print for @ARGV" *

).

=item 4.

The previous step created F<perlmain.c> which contains a list of newXS() calls
near the end.  Removing unnecessary calls, and rerunning

  make perl

will produce a customized executable.

=back

=head2 Making executables with a custom search-paths

The default perl executable is flexible enough to support most usages.
However, one may want something yet more flexible; for example, one may want
to find Perl DLL relatively to the location of the EXE file; or one may want
to ignore the environment when setting the Perl-library search patch, etc.

If you fill comfortable with I<embedding> interface (see L<perlembed>), such
things are easy to do repeating the steps outlined in L</Making
executables with a custom collection of statically loaded extensions>, and
doing more comprehensive edits to main() of F<perlmain.c>.  The people with
little desire to understand Perl can just rename main(), and do necessary
modification in a custom main() which calls the renamed function in appropriate
time.

However, there is a third way: perl DLL exports the main() function and several
callbacks to customize the search path.  Below is a complete example of a
"Perl loader" which

=over

=item 1.

Looks for Perl DLL in the directory C<$exedir/../dll>;

=item 2.

Prepends the above directory to C<BEGINLIBPATH>;

=item 3.

Fails if the Perl DLL found via C<BEGINLIBPATH> is different from what was
loaded on step 1; e.g., another process could have loaded it from C<LIBPATH>
or from a different value of C<BEGINLIBPATH>.  In these cases one needs to
modify the setting of the system so that this other process either does not
run, or loads the DLL from C<BEGINLIBPATH> with C<LIBPATHSTRICT=T> (available
with kernels after September 2000).
