  (Oracle bug #641812 may still cause failure prior to v8.0.5.)
  Fixed LongTruncOk to work when using OCI 8.
  Fixed bug in table name detection code for OCI8 LOB refetch.
  SCALE & PRECISION work for OCI 7 & 8.

* Changes in DBD::Oracle 0.55 (Oraperl 1.37), 16th December 1998

  Major internal work to support Oracle 8 OCI.
  Oracle 8 LOBs are supported and treated as LONGs (DBD::Oracle works
  hard to hide the complexities of handling Lob Locators for you).
  See Oracle 8 section in the docs for more details.
  Added $sth->{TYPE}.
  SCALE & PRECISION are implemented but return 0 (Oracle bug?).
  DBI 1.02 or later is required.
  Assorted build time Makefile.PL improvements.
  Builds with 5.004_04, 5.005_02 and 5.005_54 (not _53).
  Added "use DBD::Oracle qw(:ora_types);"

* Changes in DBD::Oracle 0.54 (Oraperl 1.37), 14th August 1998

  Added $dbh->type_info_all.
  Fixed $dbh->tables (partly by renaming to new $dbh->table_info).
  data_sources no longer adds abbreviated versions of tnsnames.
  Alan Burlison's whizzo Tk based explain script now bundled.
  Revised workaround for "Can't bind unknown placeholder '3'" errors.
  Doubled default automatic row cache size (now approx 5KB).
  The resetting of Oracle's SIGCHD handler to SA_RESTART can
  now be disabled by setting the env var DBD_ORACLE_SIGCHLD=0.
  Fixed Makefile.PL -c to better avoid shared Oracle lib.

* Changes in DBD::Oracle 0.53 (Oraperl 1.37), 3rd August 1998

  Further build fixes (esp kpudc problem with Oracle 8).
  Now prefers oracle.mk over proc.mk again.
  Only $ENV{ORA_CLIENT_LIB} ||= 'shared' if shared lib exists.
  Builds okay with 5.005-thread (not tested).

* Changes in DBD::Oracle 0.52 (Oraperl 1.37), 28th July 1998

  Assorted build fixes (esp. Win32, HP-UX and AIX).
  More hints on error messages, especially long truncation and
  field-level errors when fetching.
  Compiles okay now for systems without SQLT_CUR defined.
  Only sets SA_RESTART on SIGCLD if connect was successful.

* Changes in DBD::Oracle 0.51 (Oraperl 1.37), 5rd July 1998

  Makefile.PL no longer tries to link with just -lclntsh directly :-(
  Improvements to some HP-UX builds (hopefully).
  DBI->data_sources ' dummy ' value removed (and list now sorted).
  connect failure now shows actual Oracle error message again.
  Initial (incomplete) support for binding cursor vars (see t/plsql.t).

* Changes in DBD::Oracle 0.50 (Oraperl 1.36), 3rd June 1998

  Makefile.PL changes: fixed -c option, now searches for .h files,
  tries alternate location for sysliblist, checks for executable
  orainst/inspdver before using it.
  Fixed cursor leak.
  Added first word of tnsnames.ora name as aliases if no clash.

* Changes in DBD::Oracle 0.49 (Oraperl 1.36), 1st June 1998

  Further improvements to build process over 0.48.
  Fixed broken truncation error in 0.48.
  Fetch ORACLE_SID from Win32 registry (thanks to Preston Bannister)
  Improved automatic row cache sizing (prompted by Jon Meek).
  Added $sth->{ora_cache_rows} and $sth->{ora_est_row_width}
  as read-only attributes to make cache size logic easier to test.

* Changes in DBD::Oracle 0.48 (Oraperl 1.36), 25th May 1998

  THIS IS AN EXPERIMENTAL RELEASE - USE WITH CAUTION!
  Now links to -lclntsh directly (Thanks to Bruce Nelson and others)
  Workaround for broken backticks after login (Thanks to Warren Jones)
  Now finds and reads tnsnames.ora to disambiguate dbnames in connect.
  Added basic support for bind_param(..., SQL_TYPE).
  Fixed bind_param_inout after execute.
  Added dbms_output_(enable|put|get) functions.
  Added $dbh->ping.
  Added DBI->data_sources('Oracle');
  $sth->rows now warns if called for select before rows fetched.
  Fixed RAW types to not truncate.
  Improved quality and clarity of trace information.
  Requires DBI 0.92

* Changes in DBD::Oracle 0.47 (Oraperl 1.35), 8th Sept 1997

  $h->{InactiveDestroy} = 1; now works reliably (with DBI 0.90).
  Makefile.PL changed for Oracle8. Thanks to Philippe Vanhaesendonck.
  Long params now work. Thanks to Michael Harvey.
  (Long params don't yet work for inout params.)
  AutoCommit flag now per-dbh. Thanks to Irving Reid.
  Fixed panic: _dbd_rebind_ph when binding an undef.
  Added $dbh->ping method (for Apache::DBI users).
  Some field-level fetch errors didn't cause the fetch to fail
  (the field was simply set undef).
  LongReadLen now works (if $Oraperl::ora_trunc unset or <= 0)
  LongTruncOk now works (for non oraperl mode handle).

* Changes in DBD::Oracle 0.46 (Oraperl 1.34), 20th June 1997

  Fixed Makefile.PL to work with 5.004_01.
  Some VMS support from Dan Sugalski <sugalsd@stargate.lbcc.cc.or.us>
  If ORACLE_HOME isn't set, Oracle.pm no longer tries to guess it.
  bind_param_inout now checks for read-only variables.
  Requires DBI 0.84.

* Changes in DBD::Oracle 0.45 (Oraperl 1.33), 16th June 1997

  A $dbh DESTROY without an explicit disconnect does a rollback.
  Note that this may 'break' existing 'lazy' code but is completely
  essential for robust applications. See comments in Oracle.xs.

  Added Makefile.PL changes from Eric Bartley and others.
  The changes should fix build problems for Oracle 7.3.x.

  Requires DBI 0.83.

  Oraperl now uses DBI->connect and thus works with DBI 0.81 to
  automatically support Apache without requiring script changes.

  Reworked parameter binding in preparation for future changes.
  - mutated placeholder values are now automatically rebound.
  - in/out vars that become undef/null after binding now work.
  - transparent support for longs should be easier to implement.

  Added Win32 support from Jeff Urlwin.

  Added some documentation to DBD::Oracle for 'perldoc DBD::Oracle'.

  Most tests now converted to standard t/*.t format.
  Added $sth->{NULLABLE}->[$field].
  Added private plsql_errstr method: $txt=$dbh->func('plsql_errstr')
  to fetch PL/SQL error messages. Thanks to Bob Menteer.
  Added $sth->{ora_pad_empty} and ORAPERL_PAD_EMPTY env var
  for better compatibility with old oraperl.
  Added $sth->{AutoCommit} FETCH.
  Added $sth->{ChopBlanks} (but not yet tested).
  No longer asks Oracle for text of login failure message since
  that can cause oracle's code to hang (sigh). We provide fake text
  for the most common errors and a useful default for the rest.
  You can set DBD_ORACLE_LOGIN_ERR env var to revert to old behaviour.

    The Copyright terms for DBD::Oracle have changed and now read as follows:
  You may distribute under the terms of either the GNU General Public
  License or the Artistic License, as specified in the Perl README file,
  with the exception that it cannot be placed on a CD-ROM or similar media
  for commercial distribution without the prior approval of the author.

* Changes in DBD::Oracle 0.44 (Oraperl 1.30), 14th Jan 1997

  Fixed leak in read_blob (thanks to Jurgen Botz for the patch).
  Improved automatic cache sizing (so better default caching).
  Negative cache size specifies desired cache/transfer size in bytes.
  Added $rowid = $csr->{ora_rowid} attribute (untested, please test).
  (Use via $csr->bind_param(1, $rowid, { ora_type => 11 });)
  Queries returning LONG's are no longer cached (so there's no
  need to set the cache to 1 explicitly to get read_blob to work).
  Added a test using string type with bind_param_inout in test.pl.
  Worked around the rather sad VMS linker case insensitivity.
  Worked around VMS linker length warning on XS...disconnect_all.
  Makefile.PL deletes non-existant files from $(COMPOBJS)
  (thanks to aburlison@cix.compulink.co.uk for the original patch)

* Changes in DBD::Oracle 0.43 (Oraperl 1.30), 29nd Oct 1996

  Fixed serious 'false ora_errno 1 after short select' bug.
  Worked around oracle bug that makes cda->ft unreliable.
  Do not use DBD::Oracle 0.41 or 0.42.
  Cursors are now 'describe'd at prepare time thus making
  NUM_OF_FIELDS always available. Describe does nothing for
  non-select operations. NUM_OF_FIELDS > 0 is now used to
  select between oexec() and oexfet() in execute().
  Added more internal debugging. Improved test.pl.

* Changes in DBD::Oracle 0.42 (Oraperl 1.30), 28nd Oct 1996

  Fixed serious 'cache empty after re-bind' bug.
  Do not use DBD::Oracle 0.41.
  Implemented oexfet (combined execute and cache fetch) for
  select operations. This is a further significant speed up.
  Many selects now make only one trip to Oracle (after prepare)
  which combines the execute and fetching multiple rows.

* Changes in DBD::Oracle 0.41 (Oraperl 1.30), 22nd Oct 1996

  Added the long overdue row cache to DBD::Oracle.
  (Thanks to Reetnem@aol.com for providing a patch that prompted
  me to complete the work.)
  Oraperl $ora_cache and cache parameter to ora_open now work.
  Default cache size is adjusted automatically for row width.
  Major reworking of field buffer memory management.
  Added a more internal debugging.
  Further updates to the README files.

* Changes in DBD::Oracle 0.40 (Oraperl 1.29), 14th Oct 1996

  WARNING - This release contains significant changes to the
  placeholding binding code. You should test it carefully
  before using in live systems.

  Implemented PL/SQL output values via $sth->bind_param_inout.
  See the code at the end of test.pl for example usage.

  Binding is now implemented using obndra rather than obndrv.
  This may have a subtle effect when matching char fields
  against placeholders with trailing spaces.

  Fixed bind_param ora_type attribute. Thanks to Stephen Zander
  for the patch.  Updated README's. Added README.longs.

* Changes in DBD::Oracle 0.39 (Oraperl 1.29), 23rd Sep 1996

  Fix for DEC "target := MACRO = string" Makefile syntax.
  Added README notes from Dave Moellenhoff, Lou Henefeld and others.
  Added README.login from James Taylor.
  Added README.client with various notes about building DBD::Oracle
  on minimaly configured client systems.
  Extra parameters to ora_do are now passed to DBI's do().
  (This is an extension to the original oraperl ora_do.)

* Changes in DBD::Oracle 0.38 (Oraperl 1.28), 22th Aug 1996

  Overhaul of Makefile variable parsing. Should now cope with
  complex variables which expand to nested shell escapes.
  Try perl Makefile.PL -v to watch the fun.
  Updated README, Makefile.PL and test.pl messages for clarity.
  Fixed possible memory corruption in dbd_bind_ph().

* Changes in DBD::Oracle 0.37 (Oraperl 1.28), 25th July 1996

  Fixed Makefile.PL for Oracle 7.3.2.
  Fixed $num_fields = ora_fetch($csr) before first fetch for
  	queries with bind vars.
  Fixed occasional core dump on global destruct.

* Changes in DBD::Oracle 0.36 (Oraperl 1.28), 10th July 1996

  Fixed bind_param ora_type attribute.
  Fixed preparse to allocate enough memory for worst case.
  Fixed broken HP-UX 10 check in Makefile.PL.
  Other assorted Makefile.PL improvements.
  (Many thanks to those who sent in fixes.)

* Changes in DBD::Oracle 0.35 (Oraperl 1.28), 21st June 1996

  Fixed broken Solaris 2.5 check in Makefile.PL.
  Added ld path to the log.

* Changes in DBD::Oracle 0.34 (Oraperl 1.28), 21st June 1996

  Workaround Solaris 2 bug #1224467 (_rmutex_unlock).
  With many thanks to James Taylor.

  Added 'Bad free()' warning suppression to ora_logon and
  ora_logoff(). Setting the DBD_DUMP environment variable
  will trigger a (handy for me) core dump if a Bad free
  warning is detected.

  Further additions to the README about Bad free()'s.

* Changes in DBD::Oracle 0.33 (Oraperl 1.27), 19th June 1996

  Added Makefile.PL -g option to enable debugging.
  Added Makefile.PL -s symbol_name option to search for symbols.
  Reorganised the way Makefile.PL uses MakeMaker liblist code.
  Oraperl defaults to the 'safe' (normal) mode of using the DBI.
  Oraperl uses sigtrap on SEGV & BUS to give a perl stack trace.
  Added README notes about -g option, core files and stack traces.
  Small change to $dbname/$user/$passwd logic in connect.

* Changes in DBD::Oracle 0.32 (Oraperl 1.25), 30th May 1996

  Fixed memory leak when FETCH'ing attributes.
  Fixed Makefile.PL FileHandle problem (forgot 'use FileHandle;').
  Enhanced Makefile.PL support for Oracle 7.3.

* Changes in DBD::Oracle 0.31 (Oraperl 1.25), 20th May 1996

  Makefile.PL for HP-UX now defaults to dynamic for hpux >= 10.

  execute (ora_bind/ora_do) now returns undef on error or the
  number of rows affected (0 is returned as 0E0, hence true, for
  okay but no rows affected or no row count available/applicable).
  This matches the oraperl version 2.4 behaviour.

  Made an attempt at supporting Oracle 7.3 (e.g. include's in proc.mk)
  Please let me know if it works (else supply patches to fix it :-)

  Fixed small memory leak in ora_titles etc functions.

* Changes in DBD::Oracle 0.30, 7th May 1996

  THE ORAPERL EMULATION LAYER IS NOW FORMALLY RELEASED (NO LONGER ALPHA).

  Note that the underlying DBI and DBD::Oracle interfaces remain alpha
  because they are still subject to (possibly significant) change.

  Oraperl v2 used to return the string 'OK' to indicate success
  with a zero numeric value. The Oraperl emulation now uses the
  string '0E0' to achieve the same effect since it does not cause
  any -w warnings when used in a numeric context.

  Fixed typecast warning (s/safefree/Safefree).
  Automatically sets/resets ORACLE_HOME from oratab value for sid.

  TO DO: Automatic configuration from Oracle 7.3 is not yet working
  (Oracle have reorganised the makefiles yet again!).

* Changes in DBD::Oracle 0.29, 2 March 1996

  Fixed Makefile.PL to get DBIXS.h from right spot.
  Changes to suit perl5.002 and site_lib directories.
  Detects old versions ahead of new in @INC.
  Random tidy-ups.

* Changes in DBD::Oracle 0.28, 29 Jan 1996:

  Minor release for Perl5.002 (beta2 or later).
  Requires Perl5.002 and DBI 0.66;

  Only functional change is to suppress (rare) 'handle not setup'
  warnings unless debugging.

* Changes in DBD::Oracle 0.27, 16 Nov 1995:

  Improved oraperl compatibility in assorted ways.
  Added the original oraperl manual to Oraperl.pm as pod.
  (perldoc Oraperl will display the manual).
  The manual highlights remaining differences in the emulation.
  Added original oraperl examples into oraperl.ex directory.

  Improved error reporting in test.pl.
  Removed some internal limits.
  Renamed readblob to blob_read and fixed return value.
  Implemented $sth = $dbh->tables method (see DBI changes file).
  Uses $Config{archlibexp} not $Config{archlib} in makefile.PL
  Requires DBI-0.65.

  I've still not got around to implementing a row cache (array
  fetch) but it's next on my list.

  This should be the last alpha release of the oraperl emulation.
  (The DBD::Oracle module itself will remain alpha for awhile yet.)


* Changes in DBD::Oracle 0.26, 23 Oct 1995:

  Removed error message (sql) size limits in parse and ora_error.
  Fixed FETCH NUM_OF_PARAMS so it doesn't trigger a describe.
  The ora_lengths and ora_types attributes work in non-oraperl mode.


* Changes in DBD::Oracle 0.25, 26 Aug 1995:

  User visible changes:

  Fixed bug in parsing '?' style placeholders.
  $sth->bind_param now checks for a too long LONG type string.
  $sth->prepare now takes attributes:
  	ora_parse_lang  => 0 | 1 | 2  (v6, auto v6/v7, v7)
  	ora_parse_defer => 0 | 1      (control defered parsing)

  Other changes to be propogated to other drivers:

  Added usage of new DBD_ATTRIB_* macros to XS and C code.
  dbd_bind_ph return value inverted to make it consistent.
  Added braces around XSRETURN_UNDEF in execute.
  Checked for describe failure in FETCH.
  Removed NumParams since it's now called NUM_OF_PARAMS in DBI.
  Updated NEED_DBIXS_VERSION in Oracle.h


* Changes in DBD::Oracle 0.24, 22 Aug 1995:

  User visible changes:

  $sth->bind_param method implemented (needs testing :-)
  and new DBI $sth->bind_col* methods work for DBD::Oracle.

  Other changes to be propogated to other drivers:

  - Slight change to STORE functions to allow them to return status
    if called as $h->STORE(...).

  - Revised signature of dbd_bind_ph function and added a bind_param
    method for it. Prototype moved from dbdimp.h to Oracle.h

  - Revised execute method to use modified dbd_bind_ph function and
    remove remaining oracle specifics.

  - imp_xxh_t structures first element now called 'com' not 'dbihcom'
    and new DBI macros used to access fields.


* Changes in DBD::Oracle 0.23, 18 Aug 1995:

  Fixed Oraperl.pm debug which was left on by default by accident.
  Added small patches from Davide.Migliavacca@inferentia.it for
  longs (dbtype_is_long, dbd_describe and dbd_st_readblob).
  Added svr4 hints from Alan Burlison <aburlison@cix.compulink.co.uk>
  Changed dbd_describe to return true for success (to be consistent).


* Changes in DBD::Oracle 0.22, 17 Aug 1995:

  Much more maturity, in line with the required DBI-0.60 release.
  The .xs file is now very 'clean'. It's an excellent base for
  developing other drivers. See notes in the DBI Changes file.

  The oraperl &ora_do should be working now (along with $sth->do()).
  It does not leak (as far as I can tell).

  This release is stable enough for general use again (like 0.20).
  Please test heavily.


* Changes in DBD::Oracle 0.21, 15 Aug 1995:

  NOTE: THIS IS AN UNSTABLE RELEASE!
  It requires the closely related DBI 0.59 release.
  See Changes file in that release.
  Major reworking of internal data management!

  Only execute and fetchrow have yet to move into dbdimp.c.
  These were kept back since I plan other associated changes.

  Known problems:
  Warning mode is on by default so certain oraperl coding
  styles cause warnings such as:
      Statement handle ... destroyed without finish() at ...
      disconnect(...) invalidates 1 associated cursor(s) at ...
  In future oraperl mode handles will have those warnings disabled.
  ...other changes to numerous/minor to mention

* Changes in DBD::Oracle 0.20, 1 Aug 1995:

  Fixed core dump when binding an undef (treated as a NULL)
  Binding a string longer that 2000 bytes will use LONG type.
  Workaround OSF makefile and oratype.h problems
  PL/SQL := construct will no longer confuse dbd_preparse()

* Changes in DBD::Oracle 0.19, 21 June 1995:

  Added $VERSION
  disconnect_all now gives error 'not implemented'.
  Reworked memory management, imp_dbh's are cached.
  imp_dbh_t now has an in_use flag and generation counter.
  st::DESTROY now checks its imp_dbh for validity.
  &ora_do() now returns "OK" for 0 rows (as per oraperl).
  Reworked logging to use DBILOGFP macro.
  Now test code added to loop through logon/prep/fin/logoff.

* Changes in DBD::Oracle 0.18, 17th June 1995

  Makefile.PL: HPUX now builds with LINKTYPE=static automatically.
  Fixed errors on logout/global destruction.
  Added logout/global destruction test to test.pl.
  Changed Oraperl.pm default mode from safe to fast (see func_ref()).
  Added platform who's-who list to README.
  Added $sth->readblob($field, $offset, $length [, \$dest) method.
  (You need to add the following after line 80 in DBI/DBI.pm:
     'readblob' =>   {'U'=>[4,5,'$field, $offset, $len [, \\$buf]']},
  in order to access the new readblob method.)

* Changes in DBD::Oracle 0.17, 9th June 1995

  Further enhancements to proc.mk parsing (this should fix
    the bug introduced in the last version which required the
    manual editing of -lora etc into the link line).
  Automatic use of proc16.mk if proc.mk not found.
  Automatic use of -Xa if compiler is 'clcc' (CenterLine).
  Further migration of code from Oracle.xs to dbdimp.c. This is
    not complete but may give you a flavor of my current direction.
  Fixed more warnings from pedantic compilers.
  [Released with DBI 0.56]

* Changes in DBD::Oracle 0.16, 25 May 1995

  Makefile.PL more robust and flexible.
  Code restructured - much more still to do.
  Changes to ora_do. It's probably still not right.
  [Released with DBI 0.55]

* Changes in DBD::Oracle 0.15, 25 Apr 1995

  Fixed all known build problems/core dumps/truncated data etc.
  Returns undef for NULLS.
  Bind vars still not supported (soon I hope).
  Bind vars produce errors rather than being ignored.
  Login usage of ORACLE_SID and TWO_TASK slightly revised.
  test.pl now uses ORACLE_SID, TWO_TASK and ORACLE_USER if defined.

* Changes in DBD::Oracle 0.14, 5 Apr 1995

  Fixed assorted build and core-dump problems.

* Changes in DBD::Oracle 0.13, 8th March 1995

  "Another alpha release but hey, guess what, this one actually allows
  you to fetch data :-)"

* Changes in DBD::Oracle 0.12, 1st March 1995

  "For DBD::Oracle I have implemented a fairly radical way to deal with
  the nightmare of Oracle OCI makefiles.  Rather than try to maintain a
  *large* and complicated set of Makefile macros the DBD::Oracle
  Makefile.PL now actually extracts the macros which oracle itself uses
  from $ORACLE_HOME/rdbms/lib/oracle.mk!  (The horses mouth, so to speak.)"
  [Released with DBI 0.53]

* Changes in DBD::Oracle 0.11, 24th Feb 1995

  "The first fruits of that work are now available for the brave (or
  foolhardy).  Take note: this very much *unsupported* *alpha* software
  (it does not even fetch records from oracle yet). Feel free to ftp it
  but don't expect to do anything very useful with it."
  Also first release of the Oraperl emulation module:
  "Yes, that's real oraperl code and it works! The only addition is
  the 'use DBD::Oraperl' line."
  [Released with DBI 0.51]

* ANCIENT HISTORY

12th Oct 1994: First public release of the DBI module.
               (for Perl 5.000-beta-3h)

19th Sep 1994: DBperl project renamed to DBI.

29th Sep 1992: DBperl project started.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   root/.cpan/build/DBD-Oracle-1.90-0/INSTALL                                                          0000644 0001750 0001750 00000004427 14616324562 015746  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        This is the Perl distribution DBD-Oracle.

Installing DBD-Oracle is straightforward.

## Installation with cpanm

If you have cpanm, you only need one line:

    % cpanm DBD::Oracle

If it does not have permission to install modules to the current perl, cpanm
will automatically set up and install to a local::lib in your home directory.
See the local::lib documentation (https://metacpan.org/pod/local::lib) for
details on enabling it in your environment.

## Installing with the CPAN shell

Alternatively, if your CPAN shell is set up, you should just be able to do:

    % cpan DBD::Oracle

## Manual installation

As a last resort, you can manually install it. If you have not already
downloaded the release tarball, you can find the download link on the module's
MetaCPAN page: https://metacpan.org/pod/DBD::Oracle

Untar the tarball, install configure prerequisites (see below), then build it:

    % perl Makefile.PL
    % make && make test

Then install it:

    % make install

On Windows platforms, you should use `dmake` or `nmake`, instead of `make`.

If your perl is system-managed, you can create a local::lib in your home
directory to install modules to. For details, see the local::lib documentation:
https://metacpan.org/pod/local::lib

The prerequisites of this distribution will also have to be installed manually. The
prerequisites are listed in one of the files: `MYMETA.yml` or `MYMETA.json` generated
by running the manual build process described above.

## Configure Prerequisites

This distribution requires other modules to be installed before this
distribution's installer can be run.  They can be found under the
 or the
"{prereqs}{configure}{requires}" key of META.json.

## Other Prerequisites

This distribution may require additional modules to be installed after running
Makefile.PL.
Look for prerequisites in the following phases:

* to run make, PHASE = build
* to use the module code itself, PHASE = runtime
* to run tests, PHASE = test

They can all be found in the  or the
"{prereqs}{PHASE}{requires}" key of MYMETA.json.

## Documentation

DBD-Oracle documentation is available as POD.
You can run `perldoc` from a shell to read the documentation:

    % perldoc DBD::Oracle

For more information on installing Perl modules via CPAN, please see:
https://www.cpan.org/modules/INSTALL.html
                                                                                                                                                                                                                                         root/.cpan/build/DBD-Oracle-1.90-0/LICENSE                                                          0000644 0001750 0001750 00000046660 14616324562 015727  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        This software is copyright (c) 2024, 2023, 2022, 2021, 2019, 2014, 2013, 2012, 2011, 2010 by Tim Bunce.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

Terms of the Perl programming language system itself

a) the GNU General Public License as published by the Free
   Software Foundation; either version 1, or (at your option) any
   later version, or
b) the "Artistic License"

--- The GNU General Public License, Version 1, February 1989 ---

This software is Copyright (c) 2024, 2023, 2022, 2021, 2019, 2014, 2013, 2012, 2011, 2010 by Tim Bunce.

This is free software, licensed under:

  The GNU General Public License, Version 1, February 1989

                    GNU GENERAL PUBLIC LICENSE
                     Version 1, February 1989

 Copyright (C) 1989 Free Software Foundation, Inc.
 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The license agreements of most software companies try to keep users
at the mercy of those companies.  By contrast, our General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  The
General Public License applies to the Free Software Foundation's
software and to any other program whose authors commit to using it.
You can use it for your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Specifically, the General Public License is designed to make
sure that you have the freedom to give away or sell copies of free
software, that you receive source code or can get it if you want it,
that you can change the software or use pieces of it in new free
programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

  For example, if you distribute copies of a such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must tell them their rights.

  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

  The precise terms and conditions for copying, distribution and
modification follow.

                    GNU GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License Agreement applies to any program or other work which
contains a notice placed by the copyright holder saying it may be
distributed under the terms of this General Public License.  The
"Program", below, refers to any such program or work, and a "work based
on the Program" means either the Program or any work containing the
Program or a portion of it, either verbatim or with modifications.  Each
licensee is addressed as "you".

  1. You may copy and distribute verbatim copies of the Program's source
code as you receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice and
disclaimer of warranty; keep intact all the notices that refer to this
General Public License and to the absence of any warranty; and give any
other recipients of the Program a copy of this General Public License
along with the Program.  You may charge a fee for the physical act of
transferring a copy.

  2. You may modify your copy or copies of the Program or any portion of
it, and copy and distribute such modifications under the terms of Paragraph
1 above, provided that you also do the following:

    a) cause the modified files to carry prominent notices stating that
    you changed the files and the date of any change; and

    b) cause the whole of any work that you distribute or publish, that
    in whole or in part contains the Program or any part thereof, either
    with or without modifications, to be licensed at no charge to all
    third parties under the terms of this General Public License (except
    that you may choose to grant warranty protection to some or all
    third parties, at your option).

    c) If the modified program normally reads commands interactively when
    run, you must cause it, when started running for such interactive use
    in the simplest and most usual way, to print or display an
    announcement including an appropriate copyright notice and a notice
    that there is no warranty (or else, saying that you provide a
    warranty) and that users may redistribute the program under these
    conditions, and telling the user how to view a copy of this General
    Public License.

    d) You may charge a fee for the physical act of transferring a
    copy, and you may at your option offer warranty protection in
    exchange for a fee.

Mere aggregation of another independent work with the Program (or its
derivative) on a volume of a storage or distribution medium does not bring
the other work under the scope of these terms.

  3. You may copy and distribute the Program (or a portion or derivative of
it, under Paragraph 2) in object code or executable form under the terms of
Paragraphs 1 and 2 above provided that you also do one of the following:

    a) accompany it with the complete corresponding machine-readable
    source code, which must be distributed under the terms of
    Paragraphs 1 and 2 above; or,

    b) accompany it with a written offer, valid for at least three
    years, to give any third party free (except for a nominal charge
    for the cost of distribution) a complete machine-readable copy of the
    corresponding source code, to be distributed under the terms of
    Paragraphs 1 and 2 above; or,

    c) accompany it with the information you received as to where the
    corresponding source code may be obtained.  (This alternative is
    allowed only for noncommercial distribution and only if you
    received the program in object code or executable form alone.)

Source code for a work means the preferred form of the work for making
modifications to it.  For an executable file, complete source code means
all the source code for all modules it contains; but, as a special
exception, it need not include source code for modules which are standard
libraries that accompany the operating system on which the executable
file runs, or for standard header files or definitions files that
accompany that operating system.

  4. You may not copy, modify, sublicense, distribute or transfer the
Program except as expressly provided under this General Public License.
Any attempt otherwise to copy, modify, sublicense, distribute or transfer
the Program is void, and will automatically terminate your rights to use
the Program under this License.  However, parties who have received
copies, or rights to use copies, from you under this General Public
License will not have their licenses terminated so long as such parties
remain in full compliance.

  5. By copying, distributing or modifying the Program (or any work based
on the Program) you indicate your acceptance of this license to do so,
and all its terms and conditions.

  6. Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the original
licensor to copy, distribute or modify the Program subject to these
terms and conditions.  You may not impose any further restrictions on the
recipients' exercise of the rights granted herein.

  7. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of the license which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
the license, you may choose any version ever published by the Free Software
Foundation.

  8. If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

                            NO WARRANTY

  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.

                     END OF TERMS AND CONDITIONS

        Appendix: How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to humanity, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

  To do so, attach the following notices to the program.  It is safest to
attach them to the start of each source file to most effectively convey
the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) 19yy  <name of author>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 1, or (at your option)
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA  02110-1301 USA


Also add information on how to contact you by electronic and paper mail.

If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

    Gnomovision version 69, Copyright (C) 19xx name of author
    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  Here a sample; alter the names:

  Yoyodyne, Inc., hereby disclaims all copyright interest in the
  program `Gnomovision' (a program to direct compilers to make passes
  at assemblers) written by James Hacker.

  <signature of Ty Coon>, 1 April 1989
  Ty Coon, President of Vice

That's all there is to it!


--- The Perl Artistic License 1.0 ---

This software is Copyright (c) 2024, 2023, 2022, 2021, 2019, 2014, 2013, 2012, 2011, 2010 by Tim Bunce.

This is free software, licensed under:

  The Perl Artistic License 1.0





                         The "Artistic License"

                                Preamble

The intent of this document is to state the conditions under which a
Package may be copied, such that the Copyright Holder maintains some
semblance of artistic control over the development of the package,
while giving the users of the package the right to use and distribute
the Package in a more-or-less customary fashion, plus the right to make
reasonable modifications.

Definitions:

        "Package" refers to the collection of files distributed by the
        Copyright Holder, and derivatives of that collection of files
        created through textual modification.

        "Standard Version" refers to such a Package if it has not been
        modified, or has been modified in accordance with the wishes
        of the Copyright Holder as specified below.

        "Copyright Holder" is whoever is named in the copyright or
        copyrights for the package.

        "You" is you, if you're thinking about copying or distributing
        this Package.

        "Reasonable copying fee" is whatever you can justify on the
        basis of media cost, duplication charges, time of people involved,
        and so on.  (You will not be required to justify it to the
        Copyright Holder, but only to the computing community at large
        as a market that must bear the fee.)

        "Freely Available" means that no fee is charged for the item
        itself, though there may be fees involved in handling the item.
        It also means that recipients of the item may redistribute it
        under the same conditions they received it.

1. You may make and give away verbatim copies of the source form of the
Standard Version of this Package without restriction, provided that you
duplicate all of the original copyright notices and associated disclaimers.

2. You may apply bug fixes, portability fixes and other modifications
derived from the Public Domain or from the Copyright Holder.  A Package
modified in such a way shall still be considered the Standard Version.

3. You may otherwise modify your copy of this Package in any way, provided
that you insert a prominent notice in each changed file stating how and
when you changed that file, and provided that you do at least ONE of the
following:

    a) place your modifications in the Public Domain or otherwise make them
    Freely Available, such as by posting said modifications to Usenet or
    an equivalent medium, or placing the modifications on a major archive
    site such as uunet.uu.net, or by allowing the Copyright Holder to include
    your modifications in the Standard Version of the Package.

    b) use the modified Package only within your corporation or organization.

    c) rename any non-standard executables so the names do not conflict
    with standard executables, which must also be provided, and provide
    a separate manual page for each non-standard executable that clearly
    documents how it differs from the Standard Version.

    d) make other distribution arrangements with the Copyright Holder.

4. You may distribute the programs of this Package in object code or
executable form, provided that you do at least ONE of the following:

    a) distribute a Standard Version of the executables and library files,
    together with instructions (in the manual page or equivalent) on where
    to get the Standard Version.

    b) accompany the distribution with the machine-readable source of
    the Package with your modifications.

    c) give non-standard executables non-standard names, and clearly
    document the differences in manual pages (or equivalent), together
    with instructions on where to get the Standard Version.

    d) make other distribution arrangements with the Copyright Holder.

5. You may charge a reasonable copying fee for any distribution of this
Package.  You may charge any fee you choose for support of this
Package.  You may not charge a fee for this Package itself.  However,
you may distribute this Package in aggregate with other (possibly
commercial) programs as part of a larger (possibly commercial) software
distribution provided that you do not advertise this Package as a
product of your own.  You may embed this Package's interpreter within
an executable of yours (by linking); this shall be construed as a mere
form of aggregation, provided that the complete Standard Version of the
interpreter is so embedded.

6. The scripts and library files supplied as input to or produced as
output from the programs of this Package do not automatically fall
under the copyright of this Package, but belong to whoever generated
them, and may be sold commercially, and may be aggregated with this
Package.  If such scripts or library files are aggregated with this
Package via the so-called "undump" or "unexec" methods of producing a
binary executable image, then distribution of such an image shall
neither be construed as a distribution of this Package nor shall it
fall under the restrictions of Paragraphs 3 and 4, provided that you do
not represent such an executable image as a Standard Version of this
Package.

7. C subroutines (or comparably compiled subroutines in other
languages) supplied by you and linked into this Package in order to
emulate subroutines and variables of the language defined by this
Package shall not be considered part of this Package, but are the
equivalent of input as in Paragraph 6, provided these subroutines do
