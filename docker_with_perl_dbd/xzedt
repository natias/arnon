
    my $OCIDIR = "";
    find( sub {
        print "Found $_ directory\n" if /^OCI\d*$/i;
        $OCIDIR = $_ if /^OCI\d*$/i && $OCIDIR lt $_;
        $File::Find::prune = 1 if -d $_ && $_ !~ /^\./;
    }, $OH );

    $OCIDIR = 'sdk' if !$OCIDIR && -d "$OH/sdk"; # Instant Client SDK

    die "OCI directory not found, please install OCI in $OH" if ! $OCIDIR;
    print "Using OCI directory '$OCIDIR'\n";

    if ($Config{cc} =~ /gcc/i) {

      system "dlltool --input-def oci.def --output-lib liboci.a"
        unless -f "liboci.a";

      die "Could not find or create liboci.a.\n" unless -f "liboci.a";

      my $pwd = cwd();
      $opts{LIBS} = [ "-L$pwd -loci" ];
    } else {
      my %OCILIB;
      my $oci_compiler_dir;
      my @oci_compiler_dirs =
          map { -d "$OH/$OCIDIR/lib/$_" ? "$OH/$OCIDIR/lib/$_": () }
          $Config{cc} eq 'bcc32' ? qw(BORLAND BC) : qw(MSVC);
      find( sub {
          $File::Find::prune = 1 if -d $_ && $_ !~ /^\./;
          return unless /^(OCI|ORA).*\.LIB$/i;
          ($oci_compiler_dir = $File::Find::dir) =~ s:^.*/::;
          print "Found $OCIDIR/lib/$oci_compiler_dir/$_ library\n";
          $OCILIB{uc($_)} = $_;
      }, @oci_compiler_dirs );
      # sort the version numbered libs into assending order
      my @OCILIB = sort grep { /(OCI|ORA)\d\d+\./i } keys %OCILIB;
      # prefer the non-versioned library if present
      push @OCILIB, "OCI.LIB"    if $OCILIB{'OCI.LIB'};
      my $OCILIB = pop @OCILIB || '';
      $OCILIB =~ s/\.LIB$//i;

      die qq{
      Unable to find required Oracle OCI files for the build.  Please check
      that you have your OCI installed in your oracle home ($OH)
      directory and that it has the following files (and probably more):

        $OH\\$OCIDIR\\include\\oratypes.h
        $OH\\$OCIDIR\\lib\\$oci_compiler_dir\\$OCILIB.lib

      Please install OCI or send comments back to dbi-users\@perl.org
      if you have an OCI directory other than $OCIDIR.

      Alternatively, if you\'re using ActiveState perl on Windows try
        ppm install ftp://ftp.esoftmatic.com/outgoing/DBI/5.8.3/DBI.ppd
        ppm install ftp://ftp.esoftmatic.com/outgoing/DBI/5.8.3/DBD-Oracle.ppd

      } unless  (-e "$OH/$OCIDIR/include/oratypes.h"
              && -e "$OH/$OCIDIR/lib/$oci_compiler_dir/$OCILIB.lib")
              or $::opt_F;

      print "Using $OCIDIR/lib/$oci_compiler_dir/$OCILIB.lib\n";
      $opts{LIBS} = [ "-L$OH/$OCIDIR/LIB/$oci_compiler_dir $OCILIB" ];
    };

    my $OCIINCLUDE = "-I$OH/$OCIDIR/include -I$OH/rdbms/demo";
    $opts{INC}  = "$OCIINCLUDE -I$dbi_arch_dir";
}

# --- UNIX Variants ---

elsif ($::opt_l || !defined $mkfile and # use -l to enable this direct-link approach
        @_=grep { m:/lib(cl(ie)?ntsh|oracle).\w+$:o } <$OH/lib/lib*>
    ) {
    # --- the simple modern way ---
    foreach(@_) { s:\Q$OH/lib/::g }
    print "Found direct-link candidates: @_\n";
    my $lib = ("@_" =~ m:lib(cl(ie)?ntsh)\.:) ? $1 : "oracle";
    my $syslibs = read_sysliblist();
    print "Oracle sysliblist: $syslibs\n";
    my $libdir = ora_libdir();
    $opts{dynamic_lib} = { OTHERLDFLAGS => "$::opt_g" };
    my @h_dirs = find_headers();
    if ($client_version_full =~ /^8.0.6/ && $^O eq 'hpux') {
        $linkwith_msg = "-lextp -l$lib.";
        $opts{LIBS} = [ "-L$OH/$libdir -lextp -l$lib $syslibs" ];
        push @h_dirs, "$OH/network/public";
    }
    else {
        $linkwith_msg = "-l$lib.";
        $opts{LIBS} = [ "-L$OH/$libdir -l$lib $syslibs" ];
    }
    my $inc = join " ", map { "-I$_" } @h_dirs;
    $opts{INC}  = "$inc -I$dbi_arch_dir";
    check_ldlibpthname();
}

# --- special case for Oracle 10g instant client (note lack of ../lib/...)

elsif (@libclntsh) {

    print "Looks like an Instant Client installation, okay\n";

    # the libclntsh.$so (without version suffix) may be missing
    # we need it to link to so try to create it
    eval {
        print "You don't have a libclntsh.$so file, only @libclntsh\n";
        my $libclntsh_v = (grep { /\d$/ } sort @libclntsh)[0]; # tacky but sufficient
        print "So I'm going to create a $OH/libclntsh.$so symlink to $libclntsh_v\n";
        symlink($libclntsh_v, "$OH/libclntsh.$so")
            or warn "Can't create symlink $OH/libclntsh.$so to $libclntsh_v: $!\n";
    } unless -e "$OH/libclntsh.$so";

    check_ldlibpthname($OH);

    my $syslibs = read_sysliblist();
    print "Oracle sysliblist: $syslibs\n";

    $opts{dynamic_lib} = { OTHERLDFLAGS => "$::opt_g" };

    my $lib = "clntsh";
    $linkwith_msg = "-l$lib.";
    $opts{LIBS} = [ "-L$OH -Wl,-rpath,$OH -l$lib $syslibs" ];

    my $inc = join " ", map { "-I$_" } find_headers();
    $opts{INC}  = "$inc -I$dbi_arch_dir";
}

elsif (defined $mkfile and $mkfile =~ /\bdemo_xe.mk$/) { # Oracle XE

    print "Looks like Oracle XE ($mkfile)\n";

    fetch_oci_macros($mkfile);
    $MK{CCINCLUDES} = '-I$(ICINCHOME)'; # undo odd refinition in demo_xe.mk

    # From linux Oracle XE (10.2.0):
    #   ICINCHOME=$(ORACLE_HOME)/rdbms/public/
    #   ICLIBHOME=$(ORACLE_HOME)/lib/
    #   ICLIBPATH=-L$(ICLIBHOME)
    #   THREADLIBS=-lpthread    [initially -lthread then redefined]
    #   CCLIB=$(ICLIBPATH) -lclntsh $(THREADLIBS)
    #   CCINCLUDES = -I$(ICINCHOME)   [see above]
    #   CCFLAGS=$(CCINCLUDES) -DLINUX -D_GNU_SOURCE -D_REENTRANT -g [initially without -DLINUX -D_GNU_SOURCE]
    my $cclib   = expand_mkvars($MK{CCLIB}, 0, 1);
    my $ccflags = expand_mkvars($MK{CCFLAGS}, 0, 1);

    $linkwith_msg = "$cclib";
    $opts{LIBS} = [ $cclib ];
    $opts{INC}  = "-I$dbi_arch_dir $ccflags";
    $opts{dynamic_lib} = { OTHERLDFLAGS => "$::opt_g" };
    check_ldlibpthname();
}

else { # --- trawl the guts of Oracle's make files looking the how it wants to link
    #Lincoln: pick the right library path
    check_ldlibpthname();
    my $libdir = ora_libdir();
    my @ora_libs = <$OH/$libdir/lib*>;
    if (@ora_libs < 6) { # just a helpful hint
        warn "\nYou don't seem to have many Oracle libraries installed. If the"
            ."\nbuild fails you probably need to install more Oracle software.\n\n";
        sleep 6;
    }

    # can we give the shared library a helping hand?
    my @shared = grep { m:/lib(cl(ie)?ntsh|oracle).\w+$:o } @ora_libs;
    # show original value of ORA_CLIENT_LIB if defined ...
    print "\$ORA_CLIENT_LIB=$ENV{ORA_CLIENT_LIB}\n"
                if defined $ENV{ORA_CLIENT_LIB};
    # ... before we then set it how it probably should be set
    # XXX but we still need to write it into the generated Makefile.
    $ENV{ORA_CLIENT_LIB} = 'shared'
                if !defined $ENV{ORA_CLIENT_LIB}
                && ($opts{LINKTYPE}||'') ne 'static' && @shared && !$::opt_c;

    my $linkvia = fetch_oci_macros($mkfile) if -f $mkfile;

    my $libhome = expand_mkvars($MK{LIBHOME}, 0, 1) || "$OH/lib";
    $linkwith = expand_mkvars($linkvia, 0, 1);

    #now use logic based of oracle version
    $linkwith =~ s!/lib\b!/$libdir!g;
    $libhome =~ s!/lib\b!/$libdir!g;
    #print "linkwith=$linkwith\n";


    my @build_rules = grep { $mk_target_rules{$_} } qw(build build64 build32);
    my $build_target = "build";
    if (@build_rules && $::opt_b) {
        print "\n";

        $build_target = "build32" if $mk_target_rules{build32};
        $build_target = "build64" if $mk_target_rules{build64} && perl_is_64bit();
        $build_target = $::opt_r if $::opt_r;

        print "Attempting to discover Oracle OCI $build_target rules\n";

        # create dummy C file to keep 'make $mkfile' happy
        my $DBD_ORA_OBJ = 'DBD_ORA_OBJ';
        open DBD_ORA_C, ">$DBD_ORA_OBJ.c"
            or die "Can't create temporary $DBD_ORA_OBJ.c file in current directory: $!\n";
        print DBD_ORA_C "int main() { return 1; }\n";
        close DBD_ORA_C;
        sleep 2; #
        system("make $DBD_ORA_OBJ.o CC='$Config{cc}'"); # make a valid .o file.

        my $make = "$Config{make} -f $mkfile $build_target"
                . q/ ECHODO=echo ECHO=echo GENCLNTSH='echo genclntsh' CC=true/
                . q/ OPTIMIZE= CCFLAGS=/
                . qq/ EXE=DBD_ORA_EXE OBJS=$DBD_ORA_OBJ.o/;
        print "by executing: [$make]\n";
        my @cmds = `$make 2>&1`;
        chomp @cmds;
        print "returned:\n[".join("]\n[",@cmds)."]\n" if $::opt_v;
        warn "WARNING: Oracle build rule discovery failed ($?)\n" if $?;
        warn "Add path to $Config{make} command into your PATH environment variable.\n"
                if $? && "@cmds" =~ /make.*not found/; # hint

        my @filtered_cmds;
        while (my $line = shift @cmds) {
            # join lines split with \'s
            while ($line =~ s/\\$/ /)  { $line .= shift @cmds; }
            # remove any echo's as the following line should be the result of the echo
            next if $line =~ m/^\s*\S*echo\s+/;
            next if $line =~ m/^\s*\S*make\s+/; # remove recursive calls to make
            next if $line =~ m/^\s*\S*make(\[\d\])?:/; # remove message rom "make:" or "make[x]:"

            next if $line =~ m/^\s*$/; # remove any blank lines
            push @filtered_cmds, $line;
        }
        print "reduced to:\n[".join("]\n[",@filtered_cmds)."]\n"
            if $::opt_v && "@filtered_cmds" ne "@cmds";
        @cmds = @filtered_cmds;

        my @prolog; push @prolog, shift @cmds while @cmds && $cmds[0] !~ /DBD_ORA_EXE/;
        print "Oracle oci build prolog:\n \t[", join("]\n\t[", @prolog), "]\n" if @prolog;
        print "Oracle oci build command:\n\t[", join("]\n\t[", @cmds  ), "]\n";
        if (@cmds == 1 && (my $build = shift @cmds) =~ /DBD_ORA_EXE/) {
            $build =~ s/\s*true\s+//;            # remove dummy compiler
            $build =~ s/$DBD_ORA_OBJ.o//;        # remove dummy object file
            $build =~ s/\S+\s+DBD_ORA_EXE//;     # remove dummy exe file and preceding flag
            $build =~ s/-o build\S*//;           # remove -o target that confuses gcc at least on Sun
            $linkwith = $build;
            # delete problematic crt?.o on solaris
            $linkwith = del_crtobj($linkwith, 1) if $^O eq 'solaris';
        }
        else {
            print "WARNING: Unable to interpret Oracle build commands from $mkfile.\a\n";
            print "(Will continue by using fallback approach.)\n";
            sleep 2;
            $::opt_b = 0;
        }
        unlink "$DBD_ORA_OBJ.c", "$DBD_ORA_OBJ.o"
                unless $^O eq 'darwin'; # why?
        print "\n";
    }
    else {
        print "WARNING: Oracle $mkfile doesn't define a 'build' rule.\n" if $::opt_b;
        $::opt_b = 0;
        print "\n";
        print "WARNING: I will now try to guess how to build and link DBD::Oracle for you.$BELL\n";
        print "         This kind of guess work is very error prone and Oracle-version sensitive.\n";
        print "         It is possible that it won't be supported in future versions of DBD::Oracle.\n";
        print "         *PLEASE* notify dbi-users about exactly _why_ you had to build it this way.\n";
        print "\n";
        sleep 6;
    }

    $linkwith =~ s/-Y P,/-YP,/g if $Config{gccversion};
    $linkwith =~ s:-R /:-R/:g if $^O eq 'solaris';

    # modifications (mostly) by Lincoln Baxter
    if ( ($^O eq 'hpux') && ($osvers > 10) && (
        $Config{'cc'} eq 'cc' or $Config{'gccversion'}) )
    {
        # these get dragged in from demo_rdbms.mk where Oracle uses them
        # the linker bitches about them not being valid options
        # in this context

        # (on my system, using gcc, the flags can't be removed entirely;
        # instead, they have to be converted to the ld-compatible equivs.
        # -- Sweth (<svc@sweth.net>)
        if ( $Config{'cc'} eq 'cc' ) {
           $linkwith =~ s/-Wl,\+[sn]//g;
        } elsif ( $Config{'gccversion'} ) {
           $linkwith =~ s/-Wl,(\+[sn])/$1/g;
        };

        # Oracle 8.0.5 drags in these which also cause link errors:
        # this produces a good link with the 32bit version of oracle
        # (64bit version of 8.0.5 fails to link
        # someone else will have to hack that one out)
        $linkwith =~ s/\+D[AS]2\.0[W]* / /g;

        #Lincoln: pick the right library path
        my $libdir = ora_libdir();
        $linkwith =~ s!/lib\b!/$libdir!g;

        # A number of folks have had to add this library to resolve
        # undefined symbol errors reported at runtime by ld.sl (the
        # library loader) libqsmashr defines LhrStringInsert()...
        # other libraries may have to be added (Lincoln Baxter <lbaxter@fleetcc.com>)
        # we check for the library's existence first... (8.0.5 does not have it)
        if ( -r "$OH/$libdir/libqsmashr.sl" ) {
           $linkwith =~ s/$/ -lqsmashr/ if ( $linkwith !~ m/-lqsmshr/ );
        }

        if ( ($Config{'libswanted'} !~ m/\bcl\b/) or $Config{'libswanted'} !~ m/\bpthread\b/ ) {
            print "WARNING: Oracle is built with multi-threading libraries\n"
                . "         You will most likely need to rebuild perl from sources\n"
                . "         with the following libraries: -lcl -lpthread\n" ;
        }

       if ( $osvers >= 11 and
            $linkwith =~ m/-lcl\b/ && $linkwith =~ m/-l:libcl.a/
        ) {  # from h.m.brand@hccnet.nl
            print "WARNING: Stripping -lcl from the link flags, because it\n",
                  "         seems to conflict with -l:libcl.a\n" ;
            $linkwith =~ s/\s*-lcl\b//g;
        }
        # Lincoln: Jay Strauss's Oracle 8.1.6 fix... I did this manually
        #          when I still had 8.1.6 to deal with (its in the README):
        #
        # Jay:     8.1.6 gets Unresolved symbols on LhtStrInsert
        #           $linkwith =~ s/$/ -lclntsh/ if ( $linkwith !~ = m/-lclntsh/ );
        #          Tim - Not to be disobedient but at this point of the code
        #          $client_version_full = 0, so I can't do Oracle version 8.1.6 logic
        #          So it seems easier to modify if I do it like below rather than above
        #          obviously its your choice
        #
        # Lincoln: I don't see how the code above could work if $inspdver{RDMS} == 0
        #          so I will add this Jays prefered way but inside a test like that
        #          above... if he tests this and it works great... if someone else is
        #          has a problem it is easy to comment out the test. I like Jay's test
        #          for existence first... And I added an addition test of $OH to see
        #          if it looks like 8.1.6 (just incase Jay was right).
        #
        # Jay:     Add Librarys where one gets Unresolved symbols
        #
        if ( ( $osvers >= 11 and $client_version_full =~ m/^8\.1\.6/ )
        or   ( $osvers >= 11 and $OH =~ m|/8\.1\.6| ) ) {
            my @extraLib = qw[libqsmashr.sl libclntsh.sl];
            foreach my $extraLib (@extraLib) {
                if (-r "$OH/lib/$extraLib") {
                        $extraLib =~ s/^lib([^\.]+).*$/\-l$1/;
                        $linkwith =~ s/$/ $extraLib/ if ( $linkwith !~ m/$extraLib/ );
                }
            }
        }

        if ($osvers >= 11 and $linkwith =~ m/-l:libcl.a/) {
            print "WARNING: stripping -l:libcl.a from liblist (conflict with ld looking for shared libs)\n";
            $linkwith =~ s/\s*-l:libcl.a\b//g;
        }

        #lincoln: this is bringing back everything we thought we removed... (like libcl.a)
        #         I wonder if this should targetted less specifically than only HPUX 11
        #         For now this should be relatively safe...
        if ( $osvers >= 11 and
            $linkwith =~ s/(`cat[^`]+sysliblist`)//g
        ) {
            print "WARNING: Stripped $1 \n",
                  "         from link command, because it contains libraries not \n",
                  "         compiled with +z or +Z (PIC) causing link to fail.\n",
                  "         Furthermore, we should have already grabbed these libraries\n";;
        }

        my $ccf = join " ", map { $_ || '' } @Config{qw(ccflags ccldflags cccdlflags)};
        if ($Config{cc} =~ m/gcc/i) {
            print "WARNING: perl was not built with -fpic or -fPIC in compiler flags.\n",
                  "         You may need to rebuild perl from sources.\n",
                  "         See instructions in DBD::Oracle::Troubleshooting::Hpux\n"
                unless $ccf =~ m/-fpic\b/i;
        }
        else {
            print "WARNING: perl was not built with +z or +Z in compiler flags.\n",
                  "         You may need to rebuild perl from sources.\n",
                  "         See instructions in DBD::Oracle::Troubleshooting::Hpux\n"
                unless $ccf =~ m/\+[zZ]/;
        }
    }


    if ($::opt_b) { # The simple approach
        $opts{dynamic_lib} = { OTHERLDFLAGS => "$::opt_g $linkwith" };
        $linkwith_msg = "OTHERLDFLAGS = $linkwith [from '$build_target' rule]";
    }
    else { # the not-so-simple approach!
        # get a cut down $linkwith to pass to MakeMaker liblist
        my $linkwith_s = expand_mkvars($linkwith, 1, 1);

        # convert "/full/path/libFOO.a" into "-L/full/path -lFOO"
        # to cater for lack of smarts in MakeMaker / Liblist
        # which ignores /foo/bar.a entries!
        my $lib_ext_re = "(a|$Config{dlext}|$Config{so})";
        $linkwith_s =~ s!(\S+)/lib(\w+)\.($lib_ext_re)\b!-L$1 -l$2!g;

        # Platform specific fix-ups:
        # delete problematic crt?.o on solaris
        $linkwith_s = del_crtobj($linkwith_s) if $^O eq 'solaris';
        $linkwith_s =~ s/-l:lib(\w+)\.sl\b/-l$1/g; # for hp-ux
        # this kind of stuff should be in a ./hints/* file:
        $linkwith_s .= " -lc" if $Config{osname} eq 'dynixptx'
                              or $Config{archname} =~ /-pc-sco3\.2v5/;
        if ($^O eq 'solaris' and $linkwith_s =~ /-lthread/
                and $osvers >= 2.3 and $osvers <= 2.6
        ) {
            print "WARNING: Solaris 2.5 bug #1224467 may cause '_rmutex_unlock' error.\n";
            print "Deleting -lthread from link list as a possible workround ($osvers).\n";
            $linkwith_s =~ s/\s*-lthread\b/ /g;
        }

        # extract object files, keep for use later
        my @linkwith_o;
        push @linkwith_o, $1 while $linkwith_s =~ s/(\S+\.[oa])\b//;
        # also extract AIX .exp files since they confuse MakeMaker
        push @linkwith_o, $1 while $linkwith_s =~ s/(-bI:\S+\.exp)\b//;

        $linkwith_msg = "@linkwith_o $linkwith_s [from $linkvia]";
        $opts{LIBS} = [ "-L$libhome $linkwith_s" ];
        $opts{dynamic_lib} = { OTHERLDFLAGS => "$::opt_g @linkwith_o \$(COMPOBJS)" };
    }

    my $OCIINCLUDE = expand_mkvars($MK{INCLUDE} || '', 0, 0);
    my @h_dirs = find_headers();
    my $inc = join " ", map { "-I$_" } @h_dirs;
    $opts{INC}  = "$inc $OCIINCLUDE -I$dbi_arch_dir";
}


# --- Handle special cases ---

if ($::opt_g && $^O eq "MSWin32" && $Config::Config{cc} eq "cl") {
   $opts{LDDLFLAGS} = $Config::Config{lddlflags} . ' -debug'
}

$opts{DEFINE} .= ' -Wall -Wno-comment' if $Config{gccversion};

$opts{DEFINE} .= ' -Xa' if $Config{cc} eq 'clcc'; # CenterLine CC







$opts{DEFINE} .= ' -DUTF8_SUPPORT' if ($] >= 5.006);

# Use OCIEnvNlsCreate if available for best unicode behaviour
#$opts{DEFINE} .= ' -DNEW_OCI_INIT' if $client_version >= 9.2;
$opts{DEFINE} .= ($^O ne 'VMS')
        ? " -DORA_OCI_VERSION=\\\"$client_version_full\\\""
        : " -DORA_OCI_VERSION=\"$client_version_full\"";
# force additional special behavior for oci 8.  For now, this means
# emulating OciLobWriteAppend
# use this if, for some reason the default handling for this function
# doesn't work or you are building a binary release for distribution
# to machines with older client libraries.


print "\nclient_version=$client_version\n\n";

$opts{DEFINE} .= " -DORA_OCI_102" if ($::opt_V && $client_version == 10.2)
                                or ( $client_version >= 10.2);

$opts{DEFINE} .= " -DORA_OCI_112" if ($::opt_V && $client_version == 11.2)
                                or ( $client_version >= 11.2);

print "\nDEFINE=$opts{DEFINE}\n\n";
# OCIStmntFetch2() is a feature of OCI 9.0.0
$opts{DEFINE} .= " -DUSE_ORA_OCI_STMNT_FETCH " if ( $client_version < 9.0 );


# Set some private WriteMakefile options if this is 'me' :-)
if ($is_developer){  # a reasonable guess
    $BELL = "<BELL>" if ($ENV{LOGNAME}||'') eq 'timbo';
    $::opt_g = '-g';
    if ($Config{gccversion}) {
        $opts{DEFINE} .= ' -Wall -Wcast-align -Wpointer-arith';
        $opts{DEFINE} .= ' -Wbad-function-cast -Wcast-qual';
        #$opts{DEFINE} .= ' -Wconversion'; # very noisy so remove to see what people say
        $opts{DEFINE} .= ' -Wimplicit  -Wimplicit-int -Wimplicit-function-declaration -Werror-implicit-function-declaration -Wimport  -Winline -Wlong-long -Wmissing-braces -Wmissing-format-attribute  -Wmissing-noreturn -Wmultichar  -Wpacked -Wparentheses  -Wpointer-arith  -Wreturn-type  -Wsequence-point -Wsign-compare  -Wswitch  -Wtrigraphs  -Wundef -Wuninitialized -Wunreachable-code -Wunused  -Wunused-function  -Wunused-label  -Wunused-parameter -Wunused-value  -Wunused-variable  -Wwrite-strings -Wbad-function-cast  -Wmissing-declarations -Wnested-externs'
        if $::opt_w;
    }
    $opts{dynamic_lib}->{OTHERLDFLAGS} .= " $::opt_g";
}

# HP-UX 9 cannot link a non-PIC object file into a shared library.
# Since the # .a libs that Oracle supplies contain non-PIC object
# files, we sadly have to build static on HP-UX 9 :(
if ($^O eq 'hpux') {
    if ($osvers < 10) {
        print "WARNING: Forced to build static not dynamic on $^O $osvers.$BELL\n";
        $opts{LINKTYPE} = 'static';
    }
    else {
        print "WARNING: If you have trouble, see DBD::Oracle::Troubleshooting::Hpux...\n"
                  ."    you may have to build your own perl, or go hunting for libraries\n";
    }
    print "WARNING: If you have trouble, try perl Makefile.PL -l\n" unless $::opt_l;
    sleep 5;
    $opts{DEFINE} .= ' $(HP64DEFINES)' if ($Config{archname} =~ /-thread\b/i and perl_is_64bit());
    # linker doesn't understand +DD64 flag Weiguo Sun <wesun@cisco.com>
    $opts{dynamic_lib}->{OTHERLDFLAGS} =~ s/\+DD64\b// if $opts{dynamic_lib}->{OTHERLDFLAGS};
    # see also const_cccmd for -Aa to -Ae flag change
}


# --- check for Test::Harness bug

print "\nChecking for functioning wait.ph\n";
eval { package WAIT; local $^W = 0; require 'wait.ph' };
if (!$@ && !defined(&WAIT::WCOREDUMP)) {
    print "You have a wait.ph file generated by perl h2ph utility.\n";
    print "(I found it at $INC{'wait.ph'})\n";
    print "It does not define a WCOREDUMP function. That's probably an error.\n";
    print "If a DBD::Oracle test fails then you will probably see a message\n";
    print "from Test::Harness about WCOREDUMP being undefined. You can either ignore\n";
    print "it or try to fix your wait.ph file. The message DOES NOT reflect the\n";
    print "cause of the test failure, it's just a problem interpreting the failure.\n";
}
print "\n";


# --- display summary information

# log key platform information to help others help you quickly if needed
print "\n";
print "System: perl$] @Config{qw(myuname)}\n";
print "Compiler:   @Config{qw(cc optimize ccflags)}\n";
print "Linker:     ". (find_bin('ld')||"not found") ."\n" unless $^O eq 'VMS';
print "Sysliblist: ".read_sysliblist()."\n";
print "Oracle makefiles would have used these definitions but we override them:\n"
        if $MK{CFLAGS} || $MK{LDFLAGS} || $MK{LDSTRING};
print "  CC:       $MK{CC}\n" if $MK{CC};
print "  CFLAGS:   $MK{CFLAGS}\n" if $MK{CFLAGS};
print "           [".mkvar('CFLAGS',0,1,0).  "]\n" if $MK{CFLAGS};
print "  CLIBS:    $MK{CLIBS}\n" if $MK{CLIBS};
print "           [".mkvar('CLIBS',0,1,0).   "]\n" if $MK{CLIBS};
if ($mk_target_rules{build} && !$::opt_b) {
    my $rules = join "\n", '', @{ $mk_target_rules{build} };
    $rules = expand_mkvars($rules, 0, 0, 1, 1) if $rules =~ /^\s*\$\(\w+\)\s*$/;
print "  build:    $rules\n";
print "           [".expand_mkvars($rules,0,1,0).   "]\n";
}
print "  LDFLAGS:  $MK{LDFLAGS}\n"                   if $MK{LDFLAGS};
print "           [".mkvar('LDFLAGS',0,1,0). "]\n" if $MK{LDFLAGS};
print "  LDSTRING: $MK{LDSTRING}\n"                  if $MK{LDSTRING};
print "           [".mkvar('LDSTRING',0,1,0)."]\n" if $MK{LDSTRING};
print "Linking with $linkwith_msg\n" if $linkwith_msg;
print "\n";

# --- display extra notes and warnings

if ($^O eq 'aix' and $osvers >= 4 and $Config{cc} ne 'xlc_r') {
    print "\n";
    print "WARNING: You will may need to rebuild perl using the xlc_r compiler.\a\n";
    print "         The important thing is that perl and DBD::Oracle be built with the same compiler.\n";
    print "         You may also need to: ORACCENV='cc=xlc_r'; export ORACCENV\n";
    print "         Also see DBD::Oracle::Troubleshooting::Aix for gcc instructions and read about the -p option.\n";
    sleep 5;
}

if ($Config{archname} !~ /-threads?\b/i) {
    print "\n";
    print "WARNING: If you have problems you may need to rebuild perl with threading enabled.$BELL\n";
    sleep 5;
}

if ($Config{usemymalloc} eq 'y') {
    print "\n";
    print "WARNING: If you have problems you may need to rebuild perl with -Uusemymalloc.$BELL\n";
    sleep 5;
}

print "WARNING: Your GNU C compiler is very old. Please upgrade.\n"
    if ($Config{gccversion} and $Config{gccversion} =~ m/^(1\.|2\.[1-5])/);

if ($opts{LINKTYPE} && $opts{LINKTYPE} eq 'static') {
    print "** Note: DBD::Oracle will be built *into* a NEW perl binary. You MUST use that new perl.\n";
}


# --- write the name file etc ---

# create this before WriteMakefile so MakeMaker knows it's here
open(MK_PM, ">mk.pm") or die "Unable to create mk.pm: $!";

WriteMakefile( dbd_edit_mm_attribs(\%opts) );

check_security() unless $^O eq 'VMS' or $^O eq 'MSWin32' or $^O =~ /cygwin/i;

print "\n";

vms_logical_names_sanity_check();

exit 0;

# === utility functions ================================

sub vms_logical_names_sanity_check {
    return unless $^O eq 'VMS';

   unless ( $ENV{PERL_ENV_TABLES} ) { # perl_env_tables not set  report
     print <<'END_TXT';

   The logical PERL_ENV_TABLES is not set.

   This means that any logical names set when testing the package
   will be set in the first logical name table that occurs in the
   LNM$FILE_DEV list.

   Please read the Readme.VMS file for further information.

END_TXT

     return;
   }

    return if grep { $ENV{$_} eq 'LNM$JOB' }
              grep { /^PERL_ENV_TABLES;\d+$/ }
              keys %ENV;

# perl_env_tables set but the element we want is missing
          print <<'END_TXT';

   The logical PERL_ENV_TABLES is set, but without LNM$JOB.

   Testing the package can fail because of inability to correctly
   translate SYS$SCRATCH for temporary storage, as SYS$SCRATCH is
   set at the JOB level.

   To ensure that testing the package correctly translates SYS$SCRATCH,
   please ensure that LNM$JOB is part of PERL_ENV_TABLES like this:

      $ DEFINE PERL_ENV_TABLES LNM$PROCESS, LNM$JOB , CRTL_ENV
END_TXT

}



sub find_oracle_home {
    print "Trying to find an ORACLE_HOME\n";

    my @path = split /\Q$Config{path_sep}/, $ENV{PATH};
    print "using PATH @path\n" if $::opt_v;
    # instant client has libclntsh in same dir as sqlplus
    my @oh = grep { (glob("$_/libclntsh.$so*"))[0] } @path;

    if (!@oh) { # failing that, try LD_LIBRARY_PATH or equiv
        my (undef, undef, @ldlibpth) = ldlibpth_info(1);
        print "using ldlib @ldlibpth\n" if $::opt_v;
        @oh = grep { (glob("$_/libclntsh.$so*"))[0] } @ldlibpth;
        # for instant client @oh may be actual ORACLE_HOME
        # but for non-IC ORACLE_HOME may be dir above a /lib*
        s:/lib\w*/?$:: for @oh; # remove possible trailing lib dir
    }
    if (!@oh) { # else try the traditional kind of install
        # this should work for non-instant-client installs ($OH/bin & $OH/lib*)
        @oh = grep { (glob("$_/../lib*/libclntsh.$so*"))[0] } @path;
        s:/[^/]/?$:: for @oh;
    }
    if (!@oh && lc($^O) eq 'linux') { # Try the standard Linux RPM location
   my @loh = glob("/usr/lib/oracle/*/*/lib/libclntsh.$so*");
   @loh = sort { $a cmp $b } @loh;
   my $loh = pop(@loh);
   $loh =~ s/\/lib\/libclntsh.*$//g;
   push(@oh,$loh);
    }
    print "Found @oh\n" if @oh;
    return $oh[0];
}


sub win32_oracle_home {
  my $oh = shift;

  my ($req_ok, $hkey, $Val, $Keys);
  my $default_home;
  if ( ! $oh ) {
      if ( $Config{osname} eq "MSWin32") {
          # Win32::TieRegistry is prefered, but it requires Win32API::Registry
          # which is not available in mingw or cygwin
          eval {
              require Win32::TieRegistry;
              $Win32::TieRegistry::Registry->Delimiter("/");
              $hkey = $Win32::TieRegistry::Registry->{"LMachine/SOFTWARE/Oracle/"}
                  and $req_ok = 1;
          };
          eval { # older name of Win32::TieRegistry
              require Tie::Registry;
              $Tie::Registry::Registry->Delimiter("/");
              $hkey = $Tie::Registry::Registry->{"LMachine/SOFTWARE/Oracle/"}
                  and $req_ok = 1;
          } unless $req_ok;
          eval {
             $default_home = $hkey->{ORACLE_HOME} || '';
          };
          eval {
              $Val = sub {
                  # Return value
                  my ($hkey) = @_;
                  return $hkey->{ORACLE_HOME} || '';
              };
              $Keys = sub {
                  # Return list of sub-folder keys
                  my ($hkey) = @_;
                  # MAC: %$hkey and related method calls don't work under
                  #      perl5db, so don't try single stepping through here
                  return map {m:/$: ? $hkey->{$_} : ()} keys %$hkey;
              };
          } if $hkey;
      }

      # Win32::Registry imports some symbols into main::
      # this is not commonly wanted, so try this as a last resort
      # MAC: it is available under mingw and might be available under cygwin
      #      If cygwin doesn't have it, move the rest inside the other if block
      eval {
          require Win32::Registry;
          $main::HKEY_LOCAL_MACHINE->Open('SOFTWARE\\ORACLE', $hkey);
          my $dummy = $main::HKEY_LOCAL_MACHINE; # avoid single use complaint
          eval {
             my $hval;
             $hkey->GetValues($hval);
             $default_home = $hval->{ORACLE_HOME}[2] || '';
          };
          $Val = sub {
              # Return value
              my ($hkey) = @_;
              my $hval;
              $hkey->GetValues($hval);
              return $hval->{ORACLE_HOME}[2] || '';
          };
          $Keys = sub {
              # Return list of sub-folder keys
              my ($hkey) = @_;
              my @hkey;
              $hkey->GetKeys(\@hkey);
              @hkey = map { $hkey->Open($_, $_); $_ } @hkey;
              return @hkey;
          };
      } unless $req_ok;

      # Workaround Win32::TieRegistry FETCH error during global destruction.
      undef $Win32::TieRegistry::Registry if $Win32::TieRegistry::Registry;

      # Look for ORACLE_HOME in all ORACLE sub-folders, use last one found
      #     before 8.1.5, there should be only one
      eval {
          my ($oh1, %oh);
          my @hkey = ($hkey);
          # JLU: December 5, 2002: if the "default" home is set and has
          # an OCI directory, then use it.
          if ($default_home && -d $default_home && -d $default_home . "/oci") {
             $oh = $default_home;
          } else {
             # use previous logic if default home doesn't have OCI
             # directory
             while (@hkey) {
                $hkey = shift @hkey;
              $oh   = $oh1, $oh{$oh1} = 1
                  if ($oh1 = &$Val($hkey)) && -d $oh1;
              push @hkey, &$Keys($hkey);
             }
             if (1 < keys %oh) {
                # JLU: 8/21/01 Oracle's default home is the first one in
                # the path, at least with 8i
                print "\n\007Multiple Oracle homes: ", join(" ", sort keys %oh), "\n\n";
                my @path = split(";", $ENV{PATH});
                my $dir;
                foreach $dir (@path) {
                   # the path will be c:\path\to\home\bin, so remove \bin if it's there.
                   $dir =~ s/\\bin$//;
                   if (defined($oh{$dir})) {
                      print "$dir is first in the PATH, so we'll use that as Oracle's default home.\n\n";
                      $oh = $dir;
                      last;
                   }
                }
             }
          }
      } if defined $Keys;
  }

  $oh =~ s:\\:/:g if $oh;
  return $oh
}



sub read_sysliblist {
    my $syslibs = (-f "$OH/lib/sysliblist")
        ? read_file("$OH/lib/sysliblist")
        : (-f "$OH/rdbms/lib/sysliblist") ? read_file("$OH/rdbms/lib/sysliblist") : '';
    if ($^O eq "hpux") {
       $syslibs =~ s/-l:lib(\w+).(sl|a)\b/-l$1/g;
       $syslibs =~ s/\s*-ldld\b//g;
       $linkwith =~ m/-lcl\b/ or
           $syslibs =~ s/\s*-lcl\b//g;
    }
    if (lc(@Config{qw(myuname)}) =~ /debian/) {
        $syslibs .= " -Wl,--no-as-needed -lnnz12 -lons -lclntshcore -lipc1 -lmql1";
    }
    return $syslibs;
}


sub perl_is_64bit {
    return defined $Config{use64bitall} ;
}
sub ora_libdir {
    my $libdir = 'lib' ;
    if ( $client_version >= 9 ) {
        $libdir = 'lib32' if ! perl_is_64bit() and -d "$OH/lib32";
        $libdir = 'lib/64' if perl_is_64bit() and -d "$OH/lib/64";
           # Solaris OIC 12+ from pkg
    }
    else {
        $libdir = 'lib64' if   perl_is_64bit() and -d "$OH/lib64";
    }

    return $libdir;
}

sub del_crtobj {
    my $orig = shift;
    my $verbose = shift || $::opt_v;
    my $str = $orig;
    # E.g. for changing the COMPOBJS line (and sometimes LDSTRING)
    # old: COMPOBJS=$(COMPOBJ)/crti.o $(COMPOBJ)/crt1.o $(COMPOBJ)/__fstd.o
    # new: COMPOBJS=$(COMPOBJ)/__fstd.o
    my @del;
    push @del, $1 while $str =~ s:([^\s=]*\bcrt[1in]\.o)\b::;
    if ($orig ne $str) {
        print "Deleted @del from link args.\n" if $verbose;
        print "del_crtobj: $orig\n          : $str\n@del\n" if $::opt_v;
    }
    return $str;
}


sub find_mkfile {

    my @mk_oci32 = (
            'rdbms/demo/demo_xe.mk',
        'rdbms/demo/demo_rdbms32.mk',
        'rdbms/demo/demo_rdbms.mk',
        'rdbms/lib/ins_rdbms.mk', #Oracle 11 full client
        'sdk/demo/demo.mk' #OIC .mk location
    );
    my @mk_oci64 = (
        'rdbms/demo/demo_xe.mk',
        'rdbms/lib/oracle.mk',
        'rdbms/demo/oracle.mk',
        'rdbms/demo/demo_rdbms.mk',
        'rdbms/demo/demo_rdbms64.mk',
        'rdbms/lib/ins_rdbms.mk', #Oracle 11 full client
    'sdk/demo/demo.mk'        # git issue 20 - path on mac os
    );
    my @mk_oci = perl_is_64bit() ? @mk_oci64 : @mk_oci32;

    # Add build.mk from /usr/share/oracle based on the oracle home location if
    # oracle home is under /usr/lib/oracle (Linux RPM install).
    # The 11g instant client only contains build.mk located in
    # /usr/share/oracle/
    push @mk_oci, "/usr/share/oracle/$1/demo.mk" if ($OH =~ m|^/usr/lib/oracle/(.*)|);

    my @mkplaces = ($::opt_p) ? (@mk_oci) : (@mk_oci);
    if ($::opt_m) {
        $::opt_m = cwd()."/$::opt_m" unless $::opt_m =~ m:^/:;
        die "-m $::opt_m: not found" unless -f $::opt_m;
        unshift @mkplaces, $::opt_m;
    }
    my $mkfile;
    for my $place (@mkplaces) {
        $place = "$OH/$place"
            unless $place =~ m:^[/\.]:; # abs or relative path
        next unless -f $place;
        $mkfile ||= $place; # use first one found
        print "Found $place\n";
    }
    unless ($^O eq 'MSWin32' || $^O eq 'VMS' || ($mkfile && -f $mkfile) || $::opt_F) {
        $::opt_l or return ($mkfile = undef);
        die qq{
        Unable to locate an oracle.mk or other suitable *.mk
        file in your Oracle installation.  (I looked in
        @mkplaces under $OH)

        The oracle.mk (or demo_rdbms.mk) file is part of the Oracle
        RDBMS product.  You need to build DBD::Oracle on a
        system which has one of these Oracle components installed.
        (Other *.mk files such as the env_*.mk files will not work.)
        Alternatively you can use Oracle Instant Client.

        In the unlikely event that a suitable *.mk file is installed
        somewhere non-standard you can specify where it is using the -m option:
                perl Makefile.PL -m /path/to/your.mk

        See the appropriate troubleshooting guide for your OS for more information and some alternatives.
        };
    }

    print "Using $mkfile\n";
    return $mkfile;
}


sub fetch_oci_macros {
    my $file = shift;

    # Read $file makefile, extract macro definitions from it
    # and store them in $MK, @MK and %MK.

    # Don't include the following definitions in the generated
    # makefile (note that %MK stills gets these values).
    my @edit = qw(
        SHELL CC CPP CFLAGS CCFLAGS OPTIMIZE ASFLAGS RCC LD LDFLAGS
        AR AS CHMOD ECHO EXE OBJS PERL OBJ_EXT LIB_EXT VERSION
    );
    my %edit; @edit{@edit} = ('$_ = ""') x @edit;

    $edit{ORA_NLS} = $edit{ORA_NLS33} = $edit{ORA_NLS32} = q{
        print "Deleting $_\n",
            "  because it is not already set in the environment\n",
            "  and it can cause ORA-01019 errors.\n";
        $_ = '';
    } unless $ENV{ORA_NLS} || $ENV{ORA_NLS33} || $ENV{ORA_NLS32}
        || 1; # Old problem? Let's try without it for a while

    $edit{COMPOBJS} = q{
        # Firstly a Solaris specific edit:
        $_ = del_crtobj($_) if $^O eq 'solaris';

        # Delete any object files in COMPOBJS that don't actually exist
        my $of;
        foreach $of (split(/=|\s+/)) {
            next if !$of or $of eq "COMPOBJS";
            my $obj = expand_mkvars($of,0,0);
            next if -e $obj;
            print "Deleting $of from COMPOBJS because $obj doesn't exist.\n";
            s:\Q$of::;
        }
    };

    # deal with (some subversions) of Oracle8.0.3's incompatible use of OBJ_EXT
    my $incompat_ext = ($MK{OBJ_EXT} && $MK{OBJ_EXT} !~ /^\./);
    warn "OBJ_EXT correction enabled ($MK{OBJ_EXT})\n" if $incompat_ext;
    # Don't include compiler options for these compilers
    my @ignore_def = qw( BUILD_CCC296 BUILD_ICC );
    my %ignore_def; @ignore_def{@ignore_def} = ('1') x @ignore_def;

    my $mkver = 0;
    my $lastline = '';
    my @lines = read_inc_file($file);
    for(1; $_ = shift(@lines); $lastline = $_){
        # Join split lines but retain backwack and newlines:
        $_ .= shift @lines while(m/\\[\r\n]+$/);
        chomp;
        push @MK, '' if $_ eq '' and $lastline ne ''; # squeeze multiple blank lines
        next unless $_;

        if ($incompat_ext) {
            s/\.(\$\(OBJ_EXT\))/$1/g;
            s/\.(\$\(LIB_EXT\))/$1/g;
        }
        # skip compiler options for undesirable compilers
        m/^ifdef (\w+)/ and do {
                if ($ignore_def{$1}) {
                        $_ = shift @lines until m/^endif/;
                        next;
                }
        };


        if (m!^([-\w/+.\$()\s]+)\s*:+\s*([^=]*)!) {     # skip targets
            my @tgts = split(/ /, $1);  # multiple target names in Oracle9i's demo_rdbms.mk
            for (@tgts) { $mk_target_deps{$_} = $2 || '' }
            my @rules;
            while (@lines && $lines[0] =~ m!^\t! && chomp $lines[0]) {
                my $tmp_line = shift @lines;
                while($tmp_line =~ m!\\$!) { # continuations!
                    $tmp_line =~ s/\s+\\$/ /;
                    $tmp_line .= shift @lines;
                    chomp($tmp_line);
                }
                push @rules, $tmp_line;
                #print "target @tgts => $mk_target_deps{$tgt} => @{$mk_target_rules{$tgt}}\n";
            }
            for (@tgts) { push @{ $mk_target_rules{$_} ||= [] }, @rules }
            next;
        }

        next if m!^\t!; # skip target build rules
        next if m/^\s*\.SUFFIXES/;

        unless($MK{mkver}) { # still want to get version number
            my $line = $_; $line =~ s/[\\\r\n]/ /g;
            $MK{mkver} = $mkver = $1
