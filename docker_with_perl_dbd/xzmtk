#define GCC_DIAG_IGNORE_DECL(x) GCC_DIAG_IGNORE(x) dNOOP
#define GCC_DIAG_RESTORE_DECL GCC_DIAG_RESTORE dNOOP
#define GCC_DIAG_IGNORE_STMT(x) GCC_DIAG_IGNORE(x) NOOP
#define GCC_DIAG_RESTORE_STMT GCC_DIAG_RESTORE NOOP
/* for clang specific pragmas */
#if defined(__clang__) || defined(__clang)
#  define CLANG_DIAG_PRAGMA(x) _Pragma (#x)
#  define CLANG_DIAG_IGNORE(x) _Pragma("clang diagnostic push") \
                               CLANG_DIAG_PRAGMA(clang diagnostic ignored #x)
#  define CLANG_DIAG_RESTORE   _Pragma("clang diagnostic pop")
#else
#  define CLANG_DIAG_IGNORE(w)
#  define CLANG_DIAG_RESTORE
#endif
#define CLANG_DIAG_IGNORE_DECL(x) CLANG_DIAG_IGNORE(x) dNOOP
#define CLANG_DIAG_RESTORE_DECL CLANG_DIAG_RESTORE dNOOP
#define CLANG_DIAG_IGNORE_STMT(x) CLANG_DIAG_IGNORE(x) NOOP
#define CLANG_DIAG_RESTORE_STMT CLANG_DIAG_RESTORE NOOP

#if defined(_MSC_VER)
#  define MSVC_DIAG_IGNORE(x) __pragma(warning(push)) \
                              __pragma(warning(disable : x))
#  define MSVC_DIAG_RESTORE   __pragma(warning(pop))
#else
#  define MSVC_DIAG_IGNORE(x)
#  define MSVC_DIAG_RESTORE
#endif
#define MSVC_DIAG_IGNORE_DECL(x) MSVC_DIAG_IGNORE(x) dNOOP
#define MSVC_DIAG_RESTORE_DECL MSVC_DIAG_RESTORE dNOOP
#define MSVC_DIAG_IGNORE_STMT(x) MSVC_DIAG_IGNORE(x) NOOP
#define MSVC_DIAG_RESTORE_STMT MSVC_DIAG_RESTORE NOOP

/*
=for apidoc Amn;||NOOP
Do nothing; typically used as a placeholder to replace something that used to
do something.

=for apidoc Amn;||dNOOP
Declare nothing; typically used as a placeholder to replace something that used
to declare something.  Works on compilers that require declarations before any
code.

=cut
*/
#define NOOP ((void)0)
#define dNOOP struct Perl___notused_struct

#ifndef pTHX
/* Don't bother defining tTHX ; using it outside
 * code guarded by MULTIPLICITY is an error.
 */
#  define pTHX		void
#  define pTHX_
#  define aTHX
#  define aTHX_
#  define aTHXa(a)      NOOP
#  define dTHXa(a)	dNOOP
#  define dTHX		dNOOP
#  define pTHX_1	1
#  define pTHX_2	2
#  define pTHX_3	3
#  define pTHX_4	4
#  define pTHX_5	5
#  define pTHX_6	6
#  define pTHX_7	7
#  define pTHX_8	8
#  define pTHX_9	9
#  define pTHX_12	12
#endif

/*
=for apidoc_section $concurrency
=for apidoc AmnU||dVAR
This is now a synonym for dNOOP: declare nothing

=for apidoc_section $XS
=for apidoc Amn;||dMY_CXT_SV
Now a placeholder that declares nothing

=cut
*/

#ifndef PERL_CORE
    /* Backwards compatibility macro for XS code. It used to be part of the
     * PERL_GLOBAL_STRUCT(_PRIVATE) feature, which no longer exists */
#  define dVAR		dNOOP

    /* these are only defined for compatibility; should not be used internally.
     * */
#  define dMY_CXT_SV    dNOOP
#  ifndef pTHXo
#    define pTHXo		pTHX
#    define pTHXo_	pTHX_
#    define aTHXo		aTHX
#    define aTHXo_	aTHX_
#    define dTHXo		dTHX
#    define dTHXoa(x)	dTHXa(x)
#  endif
#endif

#ifndef pTHXx
#  define pTHXx		PerlInterpreter *my_perl
#  define pTHXx_	pTHXx,
#  define aTHXx		my_perl
#  define aTHXx_	aTHXx,
#  define dTHXx		dTHX
#endif

/* Under PERL_IMPLICIT_SYS (used in Windows for fork emulation)
 * PerlIO_foo() expands to PL_StdIO->pFOO(PL_StdIO, ...).
 * dTHXs is therefore needed for all functions using PerlIO_foo(). */
#ifdef PERL_IMPLICIT_SYS
#    define dTHXs		dTHX
#else
#    define dTHXs		dNOOP
#endif

#if defined(__GNUC__) && !defined(PERL_GCC_BRACE_GROUPS_FORBIDDEN) && !defined(__cplusplus)
#  ifndef PERL_USE_GCC_BRACE_GROUPS
#    define PERL_USE_GCC_BRACE_GROUPS
#  endif
#endif

/*
=for apidoc_section $directives
=for apidoc AmnUu|void|STMT_END
=for apidoc_item |    |STMT_START

These allow a series of statements in a macro to be used as a single statement,
as in

 if (x) STMT_START { ... } STMT_END else ...

Note that you can't return a value out of this construct and cannot use it as
an operand to the comma operator.  These limit its utility.

But, a value could be returned by constructing the API so that a pointer is
passed and the macro dereferences this to set the return.  If the value can be
any of various types, depending on context, you can handle that situation in
some situations by adding the type of the return as an extra accompanying
parameter:

 #define foo(param, type)  STMT_START {
                              type * param; *param = do_calc; ...
                           } STMT_END

This could be awkward, so consider instead using a C language C<static inline>
function.

If you do use this construct, it is easy to forget that it is a macro and not a
function, and hence fall into traps that might not show up until someone
someday writes code which contains names that clash with the ones you chose
here, or calls it with a parameter which is an expression with side effects,
the consequences of which you didn't think about.  See L<perlhacktips/Writing
safer macros> for how to avoid these.

=for apidoc_section $genconfig
=for apidoc Amn#||PERL_USE_GCC_BRACE_GROUPS

This C pre-processor value, if defined, indicates that it is permissible to use
the GCC brace groups extension.  However, use of this extension is DISCOURAGED.
Use a C<static inline> function instead.

The extension, of the form

 ({ statement ... })

turns the block consisting of I<statement ...> into an expression with a
value, unlike plain C language blocks.  This can present optimization
possibilities, B<BUT>, unless you know for sure that this will never be
compiled without this extension being available and not forbidden, you need to
specify an alternative.  Thus two code paths have to be maintained, which can
get out-of-sync.  All these issues are solved by using a C<static inline>
function instead.

Perl can be configured to not use this feature by passing the parameter
C<-Accflags=-DPERL_GCC_BRACE_GROUPS_FORBIDDEN> to F<Configure>.

=for apidoc Amnh#||PERL_GCC_BRACE_GROUPS_FORBIDDEN

Example usage:

=over

 #ifdef PERL_USE_GCC_BRACE_GROUPS
   ...
 #else
   ...
 #endif

=back

=cut

 Trying to select a version that gives no warnings...
*/
#if !(defined(STMT_START) && defined(STMT_END))
#   define STMT_START	do
#   define STMT_END	while (0)
#endif

#ifndef BYTEORDER  /* Should never happen -- byteorder is in config.h */
#   define BYTEORDER 0x1234
#endif

/*
=for apidoc_section $genconfig
=for apidoc Amn#||ASCIIish

A preprocessor symbol that is defined iff the system is an ASCII platform; this
symbol would not be defined on C<L</EBCDIC>> platforms.

=cut
*/
#if 'A' == 65 && 'I' == 73 && 'J' == 74 && 'Z' == 90
#  define ASCIIish
#else
#  undef  ASCIIish
#endif

/*
 * The following contortions are brought to you on behalf of all the
 * standards, semi-standards, de facto standards, not-so-de-facto standards
 * of the world, as well as all the other botches anyone ever thought of.
 * The basic theory is that if we work hard enough here, the rest of the
 * code can be a lot prettier.  Well, so much for theory.  Sorry, Henry...
 */

/* define this once if either system, instead of cluttering up the src */
#if defined(WIN32)
#define DOSISH 1
#endif

/* These exist only for back-compat with XS modules. */
#ifndef PERL_CORE
#define VOL volatile
#define CAN_PROTOTYPE
#define _(args) args
#define I_LIMITS
#define I_STDARG
#define STANDARD_C
#endif

/* Don't compile 'code' if PERL_MEM_LOG is defined.  This is used for
 * constructs that don't play well when PERL_MEM_LOG is active, so that they
 * automatically don't get compiled without having to use extra #ifdef's */
#ifndef PERL_MEM_LOG
#  define UNLESS_PERL_MEM_LOG(code)  code
#else
#  define UNLESS_PERL_MEM_LOG(code)
#endif

/* By compiling a perl with -DNO_TAINT_SUPPORT or -DSILENT_NO_TAINT_SUPPORT,
 * you get a perl without taint support, but doubtlessly with a lesser
 * degree of support. Do not do so unless you know exactly what it means
 * technically, have a good reason to do so, and know exactly how the
 * perl will be used. perls with -DSILENT_NO_TAINT_SUPPORT are considered
 * a potential security risk due to flat out ignoring the security-relevant
 * taint flags. This being said, a perl without taint support compiled in
 * has marginal run-time performance benefits.
 * SILENT_NO_TAINT_SUPPORT implies NO_TAINT_SUPPORT.
 * SILENT_NO_TAINT_SUPPORT is the same as NO_TAINT_SUPPORT except it
 * silently ignores -t/-T instead of throwing an exception.
 *
 * DANGER! Using NO_TAINT_SUPPORT or SILENT_NO_TAINT_SUPPORT
 *         voids your nonexistent warranty!
 */
#if defined(SILENT_NO_TAINT_SUPPORT) && !defined(NO_TAINT_SUPPORT)
#  define NO_TAINT_SUPPORT 1
#endif

/* NO_TAINT_SUPPORT can be set to transform virtually all taint-related
 * operations into no-ops for a very modest speed-up. Enable only if you
 * know what you're doing: tests and CPAN modules' tests are bound to fail.
 */
#ifdef NO_TAINT_SUPPORT
#   define TAINT		NOOP
#   define TAINT_NOT		NOOP
#   define TAINT_IF(c)		NOOP
#   define TAINT_ENV()		NOOP
#   define TAINT_PROPER(s)	NOOP
#   define TAINT_set(s)		NOOP
#   define TAINT_get		0
#   define TAINTING_get		0
#   define TAINTING_set(s)	NOOP
#   define TAINT_WARN_get       0
#   define TAINT_WARN_set(s)    NOOP
#else

/*
=for apidoc_section $tainting
=for apidoc Cm|void|TAINT

If we aren't in taint checking mode, do nothing;
otherwise indicate to L</C<TAINT_set>> and L</C<TAINT_PROPER>> that some
unspecified element is tainted.

=for apidoc Cm|void|TAINT_NOT

Remove any taintedness previously set by, I<e.g.>, C<TAINT>.

=for apidoc Cm|void|TAINT_IF|bool c

If C<c> evaluates to true, call L</C<TAINT>> to indicate that something is
tainted; otherwise do nothing.

=for apidoc Cmn|void|TAINT_ENV

Looks at several components of L<C<%ENV>|perlvar/%ENV> for taintedness, and
calls L</C<taint_proper>> if any are tainted.  The components it searches are
things like C<$PATH>.

=for apidoc Cm|void|TAINT_PROPER|const char * s

If no element is tainted, do nothing;
otherwise output a message (containing C<s>) that indicates there is a
tainting violation.  If such violations are fatal, it croaks.

=for apidoc Cm|void|TAINT_set|bool s

If C<s> is true, L</C<TAINT_get>> returns true;
If C<s> is false, L</C<TAINT_get>> returns false;

=for apidoc Cm|bool|TAINT_get

Returns a boolean as to whether some element is tainted or not.

=for apidoc Cm|bool|TAINTING_get

Returns a boolean as to whether taint checking is enabled or not.

=for apidoc Cm|void|TAINTING_set|bool s

Turn taint checking mode off/on

=for apidoc Cm|bool|TAINT_WARN_get

Returns false if tainting violations are fatal;
Returns true if they're just warnings

=for apidoc Cm|void|TAINT_WARN_set|bool s

C<s> being true indicates L</C<TAINT_WARN_get>> should return that tainting
violations are just warnings

C<s> being false indicates L</C<TAINT_WARN_get>> should return that tainting
violations are fatal.

=cut
*/
    /* Set to tainted if we are running under tainting mode */
#   define TAINT		(PL_tainted = PL_tainting)

#   define TAINT_NOT	(PL_tainted = FALSE)        /* Untaint */
#   define TAINT_IF(c)	if (UNLIKELY(c)) { TAINT; } /* Conditionally taint */
#   define TAINT_ENV()	if (UNLIKELY(PL_tainting)) { taint_env(); }
                                /* croak or warn if tainting */
#   define TAINT_PROPER(s)	if (UNLIKELY(PL_tainting)) {                \
                                    taint_proper(NULL, s);                  \
                                }
#   define TAINT_set(s)		(PL_tainted = cBOOL(s))
#   define TAINT_get		(cBOOL(UNLIKELY(PL_tainted)))    /* Is something tainted? */
#   define TAINTING_get		(cBOOL(UNLIKELY(PL_tainting)))
#   define TAINTING_set(s)	(PL_tainting = cBOOL(s))
#   define TAINT_WARN_get       (PL_taint_warn)
#   define TAINT_WARN_set(s)    (PL_taint_warn = cBOOL(s))
#endif

/* flags used internally only within pp_subst and pp_substcont */
#ifdef PERL_CORE
#  define SUBST_TAINT_STR      1	/* string tainted */
#  define SUBST_TAINT_PAT      2	/* pattern tainted */
#  define SUBST_TAINT_REPL     4	/* replacement tainted */
#  define SUBST_TAINT_RETAINT  8	/* use re'taint' in scope */
#  define SUBST_TAINT_BOOLRET 16	/* return is boolean (don't taint) */
#endif

/* XXX All process group stuff is handled in pp_sys.c.  Should these
   defines move there?  If so, I could simplify this a lot. --AD  9/96.
*/
/* Process group stuff changed from traditional BSD to POSIX.
   perlfunc.pod documents the traditional BSD-style syntax, so we'll
   try to preserve that, if possible.
*/
#ifdef HAS_SETPGID
#  define BSD_SETPGRP(pid, pgrp)	setpgid((pid), (pgrp))
#elif defined(HAS_SETPGRP) && defined(USE_BSD_SETPGRP)
#  define BSD_SETPGRP(pid, pgrp)	setpgrp((pid), (pgrp))
#elif defined(HAS_SETPGRP2)
#  define BSD_SETPGRP(pid, pgrp)	setpgrp2((pid), (pgrp))
#endif
#if defined(BSD_SETPGRP) && !defined(HAS_SETPGRP)
#  define HAS_SETPGRP  /* Well, effectively it does . . . */
#endif

#ifdef HAS_GETPGID
#  define BSD_GETPGRP(pid)		getpgid((pid))
#elif defined(HAS_GETPGRP) && defined(USE_BSD_GETPGRP)
#  define BSD_GETPGRP(pid)		getpgrp((pid))
#elif defined(HAS_GETPGRP2)
#  define BSD_GETPGRP(pid)		getpgrp2((pid))
#endif
#if defined(BSD_GETPGRP) && !defined(HAS_GETPGRP)
#  define HAS_GETPGRP  /* Well, effectively it does . . . */
#endif

/* These are not exact synonyms, since setpgrp() and getpgrp() may
   have different behaviors, but perl.h used to define USE_BSDPGRP
   (prior to 5.003_05) so some extension might depend on it.
*/
#if defined(USE_BSD_SETPGRP) || defined(USE_BSD_GETPGRP)
#  ifndef USE_BSDPGRP
#    define USE_BSDPGRP
#  endif
#endif

/* This define exists only for compatibility. It used to mean "my_setenv and
 * friends should use setenv/putenv, instead of manipulating environ directly",
 * which is now always the case. It's still defined to prevent XS modules from
 * using the no longer existing PL_use_safe_putenv variable.
 */
#define PERL_USE_SAFE_PUTENV

/* Control whether we set and test the stack high water mark.
 *
 * When enabled this checks that pp funcs and XSUBs properly EXTEND()
 * the stack.
 *
 * Debugging builds have HWM checks on by default, you can add
 * -DPERL_NO_HWM to ccflags to prevent those checks, or add
 * -DPERL_USE_HWM to ccflags to perform HWM checks even on
 * non-debugging builds.
 */

#if defined PERL_NO_HWM
#  undef PERL_USE_HWM
#elif defined PERL_USE_HWM
/* nothing to do here */
#elif defined DEBUGGING && !defined DEBUGGING_RE_ONLY
#  define PERL_USE_HWM
#endif


/* HP-UX 10.X CMA (Common Multithreaded Architecture) insists that
   pthread.h must be included before all other header files.
*/
#if defined(USE_ITHREADS) && defined(PTHREAD_H_FIRST) && defined(I_PTHREAD)
#  include <pthread.h>
#endif

#include <sys/types.h>

#  ifdef I_WCHAR
#    include <wchar.h>
#  endif

# include <stdarg.h>

#ifdef I_STDINT
# include <stdint.h>
#endif

#include <ctype.h>
#include <float.h>
#include <limits.h>

#ifdef METHOD 	/* Defined by OSF/1 v3.0 by ctype.h */
#undef METHOD
#endif

#ifdef I_LOCALE
#   include <locale.h>
#endif

#ifdef NEED_XLOCALE_H
#   include <xlocale.h>
#endif

/* Even if not using locales, this header should be #included so as to #define
 * some symbols which avoid #ifdefs to get things to compile.  But make sure
 * the macro it calls does nothing */
#undef PERL_LOCALE_TABLE_ENTRY
#define PERL_LOCALE_TABLE_ENTRY(name, call_back)
#include "locale_table.h"

#include "perl_langinfo.h"    /* Needed for _NL_LOCALE_NAME */

/* =========================================================================
 * The defines from here to the following ===== line are unfortunately
 * duplicated in makedef.pl, and changes here MUST also be made there */

/* If not forbidden, we enable locale handling if either 1) the POSIX 2008
 * functions are available, or 2) just the setlocale() function.  This logic is
 * repeated in t/loc_tools.pl and makedef.pl;  The three should be kept in
 * sync. */
#if   ! defined(NO_LOCALE)
#  if ! defined(NO_POSIX_2008_LOCALE)           \
   &&   defined(HAS_NEWLOCALE)                  \
   &&   defined(HAS_USELOCALE)                  \
   &&   defined(HAS_DUPLOCALE)                  \
   &&   defined(HAS_FREELOCALE)                 \
   &&   defined(LC_ALL_MASK)

    /* For simplicity, the code is written to assume that any platform advanced
     * enough to have the Posix 2008 locale functions has LC_ALL.  The final
     * test above makes sure that assumption is valid */

#    define HAS_POSIX_2008_LOCALE
#    define USE_LOCALE
#  elif defined(HAS_SETLOCALE)
#    define USE_LOCALE
#  endif
#endif

/* end of makedef.pl logic duplication.  But there are other groups below.
 * ========================================================================= */

#ifdef USE_LOCALE
#   define HAS_SKIP_LOCALE_INIT /* Solely for XS code to test for this
                                   #define */
#endif

/* XXX The Configure probe for categories must be updated when adding new
 * categories here */

/* Create an enum that allows translation between the arbitrary locale category
 * integers that a platform has, and our desired values that range from 0..n
 * which makes array indexing feasible.
 *
 * In locale.c, there are a bunch of parallel arrays corresponding to this
 * enum.  The first element of each corresponds with the first enum value here,
 * and so on.  That means this enum must be in identical order with those
 * arrays.  This is guaranteed by using locale_table.h in all instances.
 * (There are also asserts in locale.c that should fail if this gets
 * out-of-sync.)  So, if the platform doesn't have LC_CTYPE, but does have
 * LC_NUMERIC, the code below will cause LC_NUMERIC_INDEX_ to be defined to be
 * 0.  That way the foo_INDEX_ values are contiguous non-negative integers,
 * regardless of how the platform defines the actual locale categories.
 *
 * It is possible to tell perl it is not to pay attention to certain categories
 * that exist on a platform (which means they are always kept in the "C"
 * locale).  For the ones perl is supposed to pay attention to, The hdr file
 * creates a 'USE_LOCALE_foo' #define.  If any are to be ignored by perl, it
 * #defines HAS_IGNORED_LOCALE_CATEGORIES_ */
typedef enum {

#ifdef USE_LOCALE
#    undef PERL_LOCALE_TABLE_ENTRY
#    define PERL_LOCALE_TABLE_ENTRY(name, call_back)  LC_ ## name ## _INDEX_,
#    include "locale_table.h"
#endif  /* USE_LOCALE */

    LC_ALL_INDEX_   /* Always defined, even if no LC_ALL on system */

} locale_category_index;

#ifdef USE_LOCALE

/* And a count of all the locale categories, mainly for use in array
 * declarations */
#  define LOCALE_CATEGORIES_COUNT_        (LC_ALL_INDEX_ + 1)

/* As a development aid for platforms that have LC_ALL name=value notation,
 * setting -Accflags=-DUSE_FAKE_LC_ALL_POSITIONAL_NOTATION, simulates a
 * platform that instead uses positional notation.  By doing this, you can find
 * many bugs without trying it out on a real such platform.  It would be
 * possible to create the reverse definitions for people who have ready access
 * to a posiional notation box, but harder to get a name=value box */
#  if defined(USE_FAKE_LC_ALL_POSITIONAL_NOTATION)            \
   && defined(PERL_LC_ALL_USES_NAME_VALUE_PAIRS)
#    undef  PERL_LC_ALL_USES_NAME_VALUE_PAIRS

#    define  PERL_LC_ALL_CATEGORY_POSITIONS_INIT /* Assumes glibc cateories */\
                                  { 12, 11, 10, 9, 8, 7, 5, 4, 3, 2, 1, 0 }
#    define  PERL_LC_ALL_SEPARATOR "/ = /"
#  endif
/* =========================================================================
 * The defines from here to the following ===== line are unfortunately
 * duplicated in makedef.pl, and changes here MUST also be made there */

#  if defined(USE_THREADS) && ! defined(NO_LOCALE_THREADS)
#    define USE_LOCALE_THREADS
#  endif

   /* Use POSIX 2008 locales if available, and no alternative exists
    * ('setlocale()' is the alternative); or is threaded and not forbidden to
    * use them */
#  if (       defined(HAS_POSIX_2008_LOCALE)                                \
       && (    ! defined(HAS_SETLOCALE)                                     \
           || (     defined(USE_LOCALE_THREADS)                             \
               && ! defined(NO_POSIX_2008_LOCALE)))                         \
               && ! defined(NO_THREAD_SAFE_LOCALE))
#    define USE_POSIX_2008_LOCALE
#  endif

   /* On threaded builds, use thread-safe locales if they are available and not
    * forbidden.  Availability is when we are using POSIX 2008 locales, or
    * Windows for any vintage recent enough to have _MSC_VER defined, or are
    * using UCRT (principally MINGW in this latter case) */
#  if defined(USE_LOCALE_THREADS) && ! defined(NO_THREAD_SAFE_LOCALE)
#    if  defined(USE_POSIX_2008_LOCALE)                                     \
     || (defined(WIN32) && (defined(_MSC_VER) || (defined(_UCRT))))
#      define USE_THREAD_SAFE_LOCALE
#    endif
#  endif

#  ifdef USE_POSIX_2008_LOCALE
#    if  defined(HAS_QUERYLOCALE)                                           \
              /* Use querylocale if has it, or has the glibc internal       \
               * undocumented equivalent (if not forbidden). */             \
     || (     defined(_NL_LOCALE_NAME)                                      \
         && ! defined(NO_USE_NL_LOCALE_NAME)                                \
              /* nl_langinfo_l almost certainly will exist on systems that  \
               * have _NL_LOCALE_NAME, so there is nothing lost by          \
               * requiring it instead of also allowing plain nl_langinfo(). \
               * And experience indicates that its glibc implementation is  \
               * thread-safe, eliminating code complications */             \
         &&   defined(HAS_NL_LANGINFO_L)                                    \
               /* On systems that accept any locale name, the real          \
                * underlying locale is often returned by this internal      \
                * langinfo item, so we can't use it */                      \
         && ! defined(SETLOCALE_ACCEPTS_ANY_LOCALE_NAME))
#      define USE_QUERYLOCALE
#    endif
#  endif

   /* POSIX 2008 has no means of finding out the current locale without a
    * querylocale; so must keep track of it ourselves */
#  if (defined(USE_POSIX_2008_LOCALE) && ! defined(USE_QUERYLOCALE))
#    define USE_PL_CURLOCALES
#  endif

#  if defined(WIN32)

      /* We need to be able to map the current value of what the tTHX context
       * thinks LC_ALL is so as to inform the Windows libc when switching
       * contexts. */
#    if defined(USE_THREAD_SAFE_LOCALE)
#      define USE_PL_CUR_LC_ALL
#    endif

     /* Assume MingW without UCRT has the broken localeconv() that Microsoft
      * fixed in VS 2015 */
#    if ! defined(_MSC_VER) && ! defined(_UCRT)
#      define TS_W32_BROKEN_LOCALECONV
#    endif
#  endif

   /* POSIX 2008 and Windows with thread-safe locales keep locale information
    * in libc data.  Therefore we must inform their libc's when the context
    * switches */
#  if defined(MULTIPLICITY) && (   defined(USE_POSIX_2008_LOCALE)           \
                                || (   defined(WIN32)                       \
                                    && defined(USE_THREAD_SAFE_LOCALE)))
#    define USE_PERL_SWITCH_LOCALE_CONTEXT
#  endif
#endif  /* End of USE_LOCALE */

/* end of makedef.pl logic duplication
 * ========================================================================= */

#ifdef PERL_CORE

/* These typedefs are used in locale.c only (and documented there), but defined
 * here so that embed.fnc can generate the proper prototypes. */

typedef enum {  /* Is the locale UTF8? */
    LOCALE_NOT_UTF8,
    LOCALE_IS_UTF8,
    LOCALE_UTF8NESS_UNKNOWN
} locale_utf8ness_t;

typedef struct {
    const char *name;
    size_t offset;
} lconv_offset_t;

typedef enum {
    INTERNAL_FORMAT,
    EXTERNAL_FORMAT_FOR_SET,
    EXTERNAL_FORMAT_FOR_QUERY
} calc_LC_ALL_format;

typedef enum {
    WANT_VOID,
    WANT_TEMP_PV,
    WANT_PL_setlocale_buf,
} calc_LC_ALL_return;

typedef enum {
    no_override,
    override_if_ignored,
    check_that_overridden
} parse_LC_ALL_STRING_action;

typedef enum {
    invalid,
    no_array,
    only_element_0,
    full_array
} parse_LC_ALL_string_return;

#endif

#include <setjmp.h>

#ifdef I_SYS_PARAM
#   ifdef PARAM_NEEDS_TYPES
#	include <sys/types.h>
#   endif
#   include <sys/param.h>
#endif

/* On BSD-derived systems, <sys/param.h> defines BSD to a year-month
   value something like 199306.  This may be useful if no more-specific
   feature test is available.
*/
#if defined(BSD)
#   ifndef BSDish
#       define BSDish
#   endif
#endif

/* Use all the "standard" definitions */
#include <stdlib.h>

/* If this causes problems, set i_unistd=undef in the hint file.  */
#ifdef I_UNISTD
#    if defined(__amigaos4__)
#        ifdef I_NETINET_IN
#            include <netinet/in.h>
#        endif
#   endif
#   include <unistd.h>
#   if defined(__amigaos4__)
/* Under AmigaOS 4 newlib.library provides an environ.  However using
 * it doesn't give us enough control over inheritance of variables by
 * subshells etc. so replace with custom version based on abc-shell
 * code. */
extern char **myenviron;
#       undef environ
#       define environ myenviron
#   endif
#endif

/* for WCOREDUMP */
#ifdef I_SYS_WAIT
#   include <sys/wait.h>
#endif

#if defined(HAS_SYSCALL) && !defined(HAS_SYSCALL_PROTO)
EXTERN_C int syscall(int, ...);
#endif

#if defined(HAS_USLEEP) && !defined(HAS_USLEEP_PROTO)
EXTERN_C int usleep(unsigned int);
#endif

/* Macros for correct constant construction.  These are in C99 <stdint.h>
 * (so they will not be available in strict C89 mode), but they are nice, so
 * let's define them if necessary. */

/*
=for apidoc_section $integer
=for apidoc    Am|I16|INT16_C|number
=for apidoc_item |I32|INT32_C|number
=for apidoc_item |I64|INT64_C|number

Returns a token the C compiler recognizes for the constant C<number> of the
corresponding integer type on the machine.

If the machine does not have a 64-bit type, C<INT64_C> is undefined.
Use C<L</INTMAX_C>> to get the largest type available on the platform.

=for apidoc    Am|U16|UINT16_C|number
=for apidoc_item |U32|UINT32_C|number
=for apidoc_item |U64|UINT64_C|number

Returns a token the C compiler recognizes for the constant C<number> of the
corresponding unsigned integer type on the machine.

If the machine does not have a 64-bit type, C<UINT64_C> is undefined.
Use C<L</UINTMAX_C>> to get the largest type available on the platform.


=cut
*/
#ifndef UINT16_C
#  if INTSIZE >= 2
#    define UINT16_C(x) ((U16_TYPE)x##U)
#  else
#    define UINT16_C(x) ((U16_TYPE)x##UL)
#  endif
#endif

#ifndef UINT32_C
#  if INTSIZE >= 4
#    define UINT32_C(x) ((U32_TYPE)x##U)
#  else
#    define UINT32_C(x) ((U32_TYPE)x##UL)
#  endif
#endif

#ifdef I_STDINT
    typedef intmax_t  PERL_INTMAX_T;
    typedef uintmax_t PERL_UINTMAX_T;
#endif

/* N.B.  We use QUADKIND here instead of HAS_QUAD here, because that doesn't
 * actually mean what it has always been documented to mean (see RT #119753)
 * and is explicitly turned off outside of core with dire warnings about
 * removing the undef. */

#if defined(QUADKIND)
#  undef PeRl_INT64_C
#  undef PeRl_UINT64_C
/* Prefer the native integer types (int and long) over long long
 * (which is not C89) and Win32-specific __int64. */
#  if QUADKIND == QUAD_IS_INT && INTSIZE == 8
#    define PeRl_INT64_C(c)	(c)
#    define PeRl_UINT64_C(c)	CAT2(c,U)
#  endif
#  if QUADKIND == QUAD_IS_LONG && LONGSIZE == 8
#    define PeRl_INT64_C(c)	CAT2(c,L)
#    define PeRl_UINT64_C(c)	CAT2(c,UL)
#  endif
#  if QUADKIND == QUAD_IS_LONG_LONG && defined(HAS_LONG_LONG)
#    define PeRl_INT64_C(c)	CAT2(c,LL)
#    define PeRl_UINT64_C(c)	CAT2(c,ULL)
#  endif
#  if QUADKIND == QUAD_IS___INT64
#    define PeRl_INT64_C(c)	CAT2(c,I64)
#    define PeRl_UINT64_C(c)	CAT2(c,UI64)
#  endif
#  ifndef PeRl_INT64_C
#    define PeRl_INT64_C(c)	((I64)(c)) /* last resort */
#    define PeRl_UINT64_C(c)	((U64TYPE)(c))
#  endif
/* In OS X the INT64_C/UINT64_C are defined with LL/ULL, which will
 * not fly with C89-pedantic gcc, so let's undefine them first so that
 * we can redefine them with our native integer preferring versions. */
#  if defined(PERL_DARWIN) && defined(PERL_GCC_PEDANTIC)
#    undef INT64_C
#    undef UINT64_C
#  endif
#  ifndef INT64_C
#    define INT64_C(c) PeRl_INT64_C(c)
#  endif
#  ifndef UINT64_C
#    define UINT64_C(c) PeRl_UINT64_C(c)
#  endif

/*
=for apidoc_section $integer
=for apidoc Am||INTMAX_C|number
Returns a token the C compiler recognizes for the constant C<number> of the
widest integer type on the machine.  For example, if the machine has C<long
long>s, C<INTMAX_C(-1)> would yield

 -1LL

See also, for example, C<L</INT32_C>>.

Use L</IV> to declare variables of the maximum usable size on this platform.

=for apidoc Am||UINTMAX_C|number
Returns a token the C compiler recognizes for the constant C<number> of the
widest unsigned integer type on the machine.  For example, if the machine has
C<long>s, C<UINTMAX_C(1)> would yield

 1UL

See also, for example, C<L</UINT32_C>>.

Use L</UV> to declare variables of the maximum usable size on this platform.

=cut
*/

#  ifndef I_STDINT
    typedef I64TYPE PERL_INTMAX_T;
    typedef U64TYPE PERL_UINTMAX_T;
#  endif
#  ifndef INTMAX_C
#    define INTMAX_C(c) INT64_C(c)
#  endif
#  ifndef UINTMAX_C
#    define UINTMAX_C(c) UINT64_C(c)
#  endif

#else  /* below QUADKIND is undefined */

/* Perl doesn't work on 16 bit systems, so must be 32 bit */
#  ifndef I_STDINT
    typedef I32TYPE PERL_INTMAX_T;
    typedef U32TYPE PERL_UINTMAX_T;
#  endif
#  ifndef INTMAX_C
#    define INTMAX_C(c) INT32_C(c)
#  endif
#  ifndef UINTMAX_C
#    define UINTMAX_C(c) UINT32_C(c)
#  endif

#endif  /* no QUADKIND */

#ifdef PERL_CORE

/* byte-swapping functions for big-/little-endian conversion */
# define _swab_16_(x) ((U16)( \
         (((U16)(x) & UINT16_C(0x00ff)) << 8) | \
         (((U16)(x) & UINT16_C(0xff00)) >> 8) ))

# define _swab_32_(x) ((U32)( \
         (((U32)(x) & UINT32_C(0x000000ff)) << 24) | \
         (((U32)(x) & UINT32_C(0x0000ff00)) <<  8) | \
         (((U32)(x) & UINT32_C(0x00ff0000)) >>  8) | \
         (((U32)(x) & UINT32_C(0xff000000)) >> 24) ))

# ifdef HAS_QUAD
#  define _swab_64_(x) ((U64)( \
          (((U64)(x) & UINT64_C(0x00000000000000ff)) << 56) | \
          (((U64)(x) & UINT64_C(0x000000000000ff00)) << 40) | \
          (((U64)(x) & UINT64_C(0x0000000000ff0000)) << 24) | \
          (((U64)(x) & UINT64_C(0x00000000ff000000)) <<  8) | \
          (((U64)(x) & UINT64_C(0x000000ff00000000)) >>  8) | \
          (((U64)(x) & UINT64_C(0x0000ff0000000000)) >> 24) | \
          (((U64)(x) & UINT64_C(0x00ff000000000000)) >> 40) | \
          (((U64)(x) & UINT64_C(0xff00000000000000)) >> 56) ))
# endif

/* Maximum level of recursion */
#ifndef PERL_SUB_DEPTH_WARN
#define PERL_SUB_DEPTH_WARN 100
#endif

#endif /* PERL_CORE */

/* Maximum number of args that may be passed to an OP_MULTICONCAT op.
 * It determines the size of local arrays in S_maybe_multiconcat() and
 * pp_multiconcat().
 */
#define PERL_MULTICONCAT_MAXARG 64

/* The indexes of fields of a multiconcat aux struct.
 * The fixed fields are followed by nargs+1 const segment lengths,
 * and if utf8 and non-utf8 differ, a second nargs+1 set for utf8.
 */

#define PERL_MULTICONCAT_IX_NARGS     0 /* number of arguments */
#define PERL_MULTICONCAT_IX_PLAIN_PV  1 /* non-utf8 constant string */
#define PERL_MULTICONCAT_IX_PLAIN_LEN 2 /* non-utf8 constant string length */
#define PERL_MULTICONCAT_IX_UTF8_PV   3 /* utf8 constant string */
#define PERL_MULTICONCAT_IX_UTF8_LEN  4 /* utf8 constant string length */
#define PERL_MULTICONCAT_IX_PADTMP0   5 /* up to 3 pad indexes for PADTMPs */
#define PERL_MULTICONCAT_IX_PADTMP1   6
#define PERL_MULTICONCAT_IX_PADTMP2   7
#define PERL_MULTICONCAT_IX_LENGTHS   8 /* first of nargs+1 const segment lens */
#define PERL_MULTICONCAT_HEADER_SIZE  8 /* The number of fields of a
                                           multiconcat header */

/* We no longer default to creating a new SV for GvSV.
   Do this before embed.  */
#ifndef PERL_CREATE_GVSV
#  ifndef PERL_DONT_CREATE_GVSV
#    define PERL_DONT_CREATE_GVSV
#  endif
#endif

#if !defined(HAS_WAITPID) && !defined(HAS_WAIT4) || defined(HAS_WAITPID_RUNTIME)
#define PERL_USES_PL_PIDSTATUS
#endif

#if !defined(OS2) && !defined(WIN32)
#define PERL_DEFAULT_DO_EXEC3_IMPLEMENTATION
#endif

#define MEM_SIZE Size_t

/* av_extend and analogues enforce a minimum number of array elements.
 * This has been 4 elements (so a minimum key size of 3) for a long
 * time, but the rationale behind this seems to have been lost to the
 * mists of time. */
#ifndef PERL_ARRAY_NEW_MIN_KEY
#define PERL_ARRAY_NEW_MIN_KEY 3
#endif

/* Functions like Perl_sv_grow mandate a minimum string size.
 * This was 10 bytes for a long time, the rationale for which seems lost
 * to the mists of time. However, this does not correlate to what modern
 * malloc implementations will actually return, in particular the fact
 * that chunks are almost certainly some multiple of pointer size. The
 * default has therefore been revised to a more useful approximation.
 * Notes: The following is specifically conservative for 64 bit, since
 * most dlmalloc derivatives seem to serve a 3xPTRSIZE minimum chunk,
 * so the below perhaps should be:
 *     ((PTRSIZE == 4) ? 12 : 24)
 * Configure probes for malloc_good_size, malloc_actual_size etc.
 * could be revised to record the actual minimum chunk size, to which
 * PERL_STRLEN_NEW_MIN could then be set.
