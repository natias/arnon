            ctx1, r, match, listignored, listclean, listunknown
        )

        if reversed:
            # Reverse added and removed. Clear deleted, unknown and ignored as
            # these make no sense to reverse.
            r = scmutil.status(
                r.modified, r.removed, r.added, [], [], [], r.clean
            )

        if listsubrepos:
            for subpath, sub in scmutil.itersubrepos(ctx1, ctx2):
                try:
                    rev2 = ctx2.subrev(subpath)
                except KeyError:
                    # A subrepo that existed in node1 was deleted between
                    # node1 and node2 (inclusive). Thus, ctx2's substate
                    # won't contain that subpath. The best we can do ignore it.
                    rev2 = None
                submatch = matchmod.subdirmatcher(subpath, match)
                s = sub.status(
                    rev2,
                    match=submatch,
                    ignored=listignored,
                    clean=listclean,
                    unknown=listunknown,
                    listsubrepos=True,
                )
                for k in (
                    'modified',
                    'added',
                    'removed',
                    'deleted',
                    'unknown',
                    'ignored',
                    'clean',
                ):
                    rfiles, sfiles = getattr(r, k), getattr(s, k)
                    rfiles.extend(b"%s/%s" % (subpath, f) for f in sfiles)

        r.modified.sort()
        r.added.sort()
        r.removed.sort()
        r.deleted.sort()
        r.unknown.sort()
        r.ignored.sort()
        r.clean.sort()

        return r

    def mergestate(self, clean=False):
        """Get a mergestate object for this context."""
        raise NotImplementedError(
            '%s does not implement mergestate()' % self.__class__
        )

    def isempty(self):
        return not (
            len(self.parents()) > 1
            or self.branch() != self.p1().branch()
            or self.closesbranch()
            or self.files()
        )


class changectx(basectx):
    """A changecontext object makes access to data related to a particular
    changeset convenient. It represents a read-only context already present in
    the repo."""

    def __init__(self, repo, rev, node, maybe_filtered=True):
        super(changectx, self).__init__(repo)
        self._rev = rev
        self._node = node
        # When maybe_filtered is True, the revision might be affected by
        # changelog filtering and operation through the filtered changelog must be used.
        #
        # When maybe_filtered is False, the revision has already been checked
        # against filtering and is not filtered. Operation through the
        # unfiltered changelog might be used in some case.
        self._maybe_filtered = maybe_filtered

    def __hash__(self):
        try:
            return hash(self._rev)
        except AttributeError:
            return id(self)

    def __nonzero__(self):
        return self._rev != nullrev

    __bool__ = __nonzero__

    @propertycache
    def _changeset(self):
        if self._maybe_filtered:
            repo = self._repo
        else:
            repo = self._repo.unfiltered()
        return repo.changelog.changelogrevision(self.rev())

    @propertycache
    def _manifest(self):
        return self._manifestctx.read()

    @property
    def _manifestctx(self):
        return self._repo.manifestlog[self._changeset.manifest]

    @propertycache
    def _manifestdelta(self):
        return self._manifestctx.readdelta()

    @propertycache
    def _parents(self):
        repo = self._repo
        if self._maybe_filtered:
            cl = repo.changelog
        else:
            cl = repo.unfiltered().changelog

        p1, p2 = cl.parentrevs(self._rev)
        if p2 == nullrev:
            return [changectx(repo, p1, cl.node(p1), maybe_filtered=False)]
        return [
            changectx(repo, p1, cl.node(p1), maybe_filtered=False),
            changectx(repo, p2, cl.node(p2), maybe_filtered=False),
        ]

    def changeset(self):
        c = self._changeset
        return (
            c.manifest,
            c.user,
            c.date,
            c.files,
            c.description,
            c.extra,
        )

    def manifestnode(self):
        return self._changeset.manifest

    def user(self):
        return self._changeset.user

    def date(self):
        return self._changeset.date

    def files(self):
        return self._changeset.files

    def filesmodified(self):
        modified = set(self.files())
        modified.difference_update(self.filesadded())
        modified.difference_update(self.filesremoved())
        return sorted(modified)

    def filesadded(self):
        filesadded = self._changeset.filesadded
        compute_on_none = True
        if self._repo.filecopiesmode == b'changeset-sidedata':
            compute_on_none = False
        else:
            source = self._repo.ui.config(b'experimental', b'copies.read-from')
            if source == b'changeset-only':
                compute_on_none = False
            elif source != b'compatibility':
                # filelog mode, ignore any changelog content
                filesadded = None
        if filesadded is None:
            if compute_on_none:
                filesadded = metadata.computechangesetfilesadded(self)
            else:
                filesadded = []
        return filesadded

    def filesremoved(self):
        filesremoved = self._changeset.filesremoved
        compute_on_none = True
        if self._repo.filecopiesmode == b'changeset-sidedata':
            compute_on_none = False
        else:
            source = self._repo.ui.config(b'experimental', b'copies.read-from')
            if source == b'changeset-only':
                compute_on_none = False
            elif source != b'compatibility':
                # filelog mode, ignore any changelog content
                filesremoved = None
        if filesremoved is None:
            if compute_on_none:
                filesremoved = metadata.computechangesetfilesremoved(self)
            else:
                filesremoved = []
        return filesremoved

    @propertycache
    def _copies(self):
        p1copies = self._changeset.p1copies
        p2copies = self._changeset.p2copies
        compute_on_none = True
        if self._repo.filecopiesmode == b'changeset-sidedata':
            compute_on_none = False
        else:
            source = self._repo.ui.config(b'experimental', b'copies.read-from')
            # If config says to get copy metadata only from changeset, then
            # return that, defaulting to {} if there was no copy metadata.  In
            # compatibility mode, we return copy data from the changeset if it
            # was recorded there, and otherwise we fall back to getting it from
            # the filelogs (below).
            #
            # If we are in compatiblity mode and there is not data in the
            # changeset), we get the copy metadata from the filelogs.
            #
            # otherwise, when config said to read only from filelog, we get the
            # copy metadata from the filelogs.
            if source == b'changeset-only':
                compute_on_none = False
            elif source != b'compatibility':
                # filelog mode, ignore any changelog content
                p1copies = p2copies = None
        if p1copies is None:
            if compute_on_none:
                p1copies, p2copies = super(changectx, self)._copies
            else:
                if p1copies is None:
                    p1copies = {}
        if p2copies is None:
            p2copies = {}
        return p1copies, p2copies

    def description(self):
        return self._changeset.description

    def branch(self):
        return encoding.tolocal(self._changeset.extra.get(b"branch"))

    def closesbranch(self):
        return b'close' in self._changeset.extra

    def extra(self):
        """Return a dict of extra information."""
        return self._changeset.extra

    def tags(self):
        """Return a list of byte tag names"""
        return self._repo.nodetags(self._node)

    def bookmarks(self):
        """Return a list of byte bookmark names."""
        return self._repo.nodebookmarks(self._node)

    def fast_rank(self):
        repo = self._repo
        if self._maybe_filtered:
            cl = repo.changelog
        else:
            cl = repo.unfiltered().changelog
        return cl.fast_rank(self._rev)

    def phase(self):
        return self._repo._phasecache.phase(self._repo, self._rev)

    def hidden(self):
        return self._rev in repoview.filterrevs(self._repo, b'visible')

    def isinmemory(self):
        return False

    def children(self):
        """return list of changectx contexts for each child changeset.

        This returns only the immediate child changesets. Use descendants() to
        recursively walk children.
        """
        c = self._repo.changelog.children(self._node)
        return [self._repo[x] for x in c]

    def ancestors(self):
        for a in self._repo.changelog.ancestors([self._rev]):
            yield self._repo[a]

    def descendants(self):
        """Recursively yield all children of the changeset.

        For just the immediate children, use children()
        """
        for d in self._repo.changelog.descendants([self._rev]):
            yield self._repo[d]

    def filectx(self, path, fileid=None, filelog=None):
        """get a file context from this changeset"""
        if fileid is None:
            fileid = self.filenode(path)
        return filectx(
            self._repo, path, fileid=fileid, changectx=self, filelog=filelog
        )

    def ancestor(self, c2, warn=False):
        """return the "best" ancestor context of self and c2

        If there are multiple candidates, it will show a message and check
        merge.preferancestor configuration before falling back to the
        revlog ancestor."""
        # deal with workingctxs
        n2 = c2._node
        if n2 is None:
            n2 = c2._parents[0]._node
        cahs = self._repo.changelog.commonancestorsheads(self._node, n2)
        if not cahs:
            anc = self._repo.nodeconstants.nullid
        elif len(cahs) == 1:
            anc = cahs[0]
        else:
            # experimental config: merge.preferancestor
            for r in self._repo.ui.configlist(b'merge', b'preferancestor'):
                try:
                    ctx = scmutil.revsymbol(self._repo, r)
                except error.RepoLookupError:
                    continue
                anc = ctx.node()
                if anc in cahs:
                    break
            else:
                anc = self._repo.changelog.ancestor(self._node, n2)
            if warn:
                self._repo.ui.status(
                    (
                        _(b"note: using %s as ancestor of %s and %s\n")
                        % (short(anc), short(self._node), short(n2))
                    )
                    + b''.join(
                        _(
                            b"      alternatively, use --config "
                            b"merge.preferancestor=%s\n"
                        )
                        % short(n)
                        for n in sorted(cahs)
                        if n != anc
                    )
                )
        return self._repo[anc]

    def isancestorof(self, other):
        """True if this changeset is an ancestor of other"""
        return self._repo.changelog.isancestorrev(self._rev, other._rev)

    def walk(self, match):
        '''Generates matching file names.'''

        # Wrap match.bad method to have message with nodeid
        def bad(fn, msg):
            # The manifest doesn't know about subrepos, so don't complain about
            # paths into valid subrepos.
            if any(fn == s or fn.startswith(s + b'/') for s in self.substate):
                return
            match.bad(fn, _(b'no such file in rev %s') % self)

        m = matchmod.badmatch(self._repo.narrowmatch(match), bad)
        return self._manifest.walk(m)

    def matches(self, match):
        return self.walk(match)


class basefilectx:
    """A filecontext object represents the common logic for its children:
    filectx: read-only access to a filerevision that is already present
             in the repo,
    workingfilectx: a filecontext that represents files from the working
                    directory,
    memfilectx: a filecontext that represents files in-memory,
    """

    @propertycache
    def _filelog(self):
        return self._repo.file(self._path)

    @propertycache
    def _changeid(self):
        if '_changectx' in self.__dict__:
            return self._changectx.rev()
        elif '_descendantrev' in self.__dict__:
            # this file context was created from a revision with a known
            # descendant, we can (lazily) correct for linkrev aliases
            return self._adjustlinkrev(self._descendantrev)
        else:
            return self._filelog.linkrev(self._filerev)

    @propertycache
    def _filenode(self):
        if '_fileid' in self.__dict__:
            return self._filelog.lookup(self._fileid)
        else:
            return self._changectx.filenode(self._path)

    @propertycache
    def _filerev(self):
        return self._filelog.rev(self._filenode)

    @propertycache
    def _repopath(self):
        return self._path

    def __nonzero__(self):
        try:
            self._filenode
            return True
        except error.LookupError:
            # file is missing
            return False

    __bool__ = __nonzero__

    def __bytes__(self):
        try:
            return b"%s@%s" % (self.path(), self._changectx)
        except error.LookupError:
            return b"%s@???" % self.path()

    __str__ = encoding.strmethod(__bytes__)

    def __repr__(self):
        return "<%s %s>" % (type(self).__name__, str(self))

    def __hash__(self):
        try:
            return hash((self._path, self._filenode))
        except AttributeError:
            return id(self)

    def __eq__(self, other):
        try:
            return (
                type(self) == type(other)
                and self._path == other._path
                and self._filenode == other._filenode
            )
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def filerev(self):
        return self._filerev

    def filenode(self):
        return self._filenode

    @propertycache
    def _flags(self):
        return self._changectx.flags(self._path)

    def flags(self):
        return self._flags

    def filelog(self):
        return self._filelog

    def rev(self):
        return self._changeid

    def linkrev(self):
        return self._filelog.linkrev(self._filerev)

    def node(self):
        return self._changectx.node()

    def hex(self):
        return self._changectx.hex()

    def user(self):
        return self._changectx.user()

    def date(self):
        return self._changectx.date()

    def files(self):
        return self._changectx.files()

    def description(self):
        return self._changectx.description()

    def branch(self):
        return self._changectx.branch()

    def extra(self):
        return self._changectx.extra()

    def phase(self):
        return self._changectx.phase()

    def phasestr(self):
        return self._changectx.phasestr()

    def obsolete(self):
        return self._changectx.obsolete()

    def instabilities(self):
        return self._changectx.instabilities()

    def manifest(self):
        return self._changectx.manifest()

    def changectx(self):
        return self._changectx

    def renamed(self):
        return self._copied

    def copysource(self):
        return self._copied and self._copied[0]

    def repo(self):
        return self._repo

    def size(self):
        return len(self.data())

    def path(self):
        return self._path

    def isbinary(self):
        try:
            return stringutil.binary(self.data())
        except IOError:
            return False

    def isexec(self):
        return b'x' in self.flags()

    def islink(self):
        return b'l' in self.flags()

    def isabsent(self):
        """whether this filectx represents a file not in self._changectx

        This is mainly for merge code to detect change/delete conflicts. This is
        expected to be True for all subclasses of basectx."""
        return False

    _customcmp = False

    def cmp(self, fctx):
        """compare with other file context

        returns True if different than fctx.
        """
        if fctx._customcmp:
            return fctx.cmp(self)

        if self._filenode is None:
            raise error.ProgrammingError(
                b'filectx.cmp() must be reimplemented if not backed by revlog'
            )

        if fctx._filenode is None:
            if self._repo._encodefilterpats:
                # can't rely on size() because wdir content may be decoded
                return self._filelog.cmp(self._filenode, fctx.data())
            # filelog.size() has two special cases:
            # - censored metadata
            # - copy/rename tracking
            # The first is detected by peaking into the delta,
            # the second is detected by abusing parent order
            # in the revlog index as flag bit. This leaves files using
            # the dummy encoding and non-standard meta attributes.
            # The following check is a special case for the empty
            # metadata block used if the raw file content starts with '\1\n'.
            # Cases of arbitrary metadata flags are currently mishandled.
            if self.size() - 4 == fctx.size():
                # size() can match:
                # if file data starts with '\1\n', empty metadata block is
                # prepended, which adds 4 bytes to filelog.size().
                return self._filelog.cmp(self._filenode, fctx.data())
        if self.size() == fctx.size() or self.flags() == b'l':
            # size() matches: need to compare content
            # issue6456: Always compare symlinks because size can represent
            # encrypted string for EXT-4 encryption(fscrypt).
            return self._filelog.cmp(self._filenode, fctx.data())

        # size() differs
        return True

    def _adjustlinkrev(self, srcrev, inclusive=False, stoprev=None):
        """return the first ancestor of <srcrev> introducing <fnode>

        If the linkrev of the file revision does not point to an ancestor of
        srcrev, we'll walk down the ancestors until we find one introducing
        this file revision.

        :srcrev: the changeset revision we search ancestors from
        :inclusive: if true, the src revision will also be checked
        :stoprev: an optional revision to stop the walk at. If no introduction
                  of this file content could be found before this floor
                  revision, the function will returns "None" and stops its
                  iteration.
        """
        repo = self._repo
        cl = repo.unfiltered().changelog
        mfl = repo.manifestlog
        # fetch the linkrev
        lkr = self.linkrev()
        if srcrev == lkr:
            return lkr
        # hack to reuse ancestor computation when searching for renames
        memberanc = getattr(self, '_ancestrycontext', None)
        iteranc = None
        if srcrev is None:
            # wctx case, used by workingfilectx during mergecopy
            revs = [p.rev() for p in self._repo[None].parents()]
            inclusive = True  # we skipped the real (revless) source
        else:
            revs = [srcrev]
        if memberanc is None:
            memberanc = iteranc = cl.ancestors(revs, lkr, inclusive=inclusive)
        # check if this linkrev is an ancestor of srcrev
        if lkr not in memberanc:
            if iteranc is None:
                iteranc = cl.ancestors(revs, lkr, inclusive=inclusive)
            fnode = self._filenode
            path = self._path
            for a in iteranc:
                if stoprev is not None and a < stoprev:
                    return None
                ac = cl.read(a)  # get changeset data (we avoid object creation)
                if path in ac[3]:  # checking the 'files' field.
                    # The file has been touched, check if the content is
                    # similar to the one we search for.
                    if fnode == mfl[ac[0]].readfast().get(path):
                        return a
            # In theory, we should never get out of that loop without a result.
            # But if manifest uses a buggy file revision (not children of the
            # one it replaces) we could. Such a buggy situation will likely
            # result is crash somewhere else at to some point.
        return lkr

    def isintroducedafter(self, changelogrev):
        """True if a filectx has been introduced after a given floor revision"""
        if self.linkrev() >= changelogrev:
            return True
        introrev = self._introrev(stoprev=changelogrev)
        if introrev is None:
            return False
        return introrev >= changelogrev

    def introrev(self):
        """return the rev of the changeset which introduced this file revision

        This method is different from linkrev because it take into account the
        changeset the filectx was created from. It ensures the returned
        revision is one of its ancestors. This prevents bugs from
        'linkrev-shadowing' when a file revision is used by multiple
        changesets.
        """
        return self._introrev()

    def _introrev(self, stoprev=None):
        """
        Same as `introrev` but, with an extra argument to limit changelog
        iteration range in some internal usecase.

        If `stoprev` is set, the `introrev` will not be searched past that
        `stoprev` revision and "None" might be returned. This is useful to
        limit the iteration range.
        """
        toprev = None
        attrs = vars(self)
        if '_changeid' in attrs:
            # We have a cached value already
            toprev = self._changeid
        elif '_changectx' in attrs:
            # We know which changelog entry we are coming from
            toprev = self._changectx.rev()

        if toprev is not None:
            return self._adjustlinkrev(toprev, inclusive=True, stoprev=stoprev)
        elif '_descendantrev' in attrs:
            introrev = self._adjustlinkrev(self._descendantrev, stoprev=stoprev)
            # be nice and cache the result of the computation
            if introrev is not None:
                self._changeid = introrev
            return introrev
        else:
            return self.linkrev()

    def introfilectx(self):
        """Return filectx having identical contents, but pointing to the
        changeset revision where this filectx was introduced"""
        introrev = self.introrev()
        if self.rev() == introrev:
            return self
        return self.filectx(self.filenode(), changeid=introrev)

    def _parentfilectx(self, path, fileid, filelog):
        """create parent filectx keeping ancestry info for _adjustlinkrev()"""
        fctx = filectx(self._repo, path, fileid=fileid, filelog=filelog)
        if '_changeid' in vars(self) or '_changectx' in vars(self):
            # If self is associated with a changeset (probably explicitly
            # fed), ensure the created filectx is associated with a
            # changeset that is an ancestor of self.changectx.
            # This lets us later use _adjustlinkrev to get a correct link.
            fctx._descendantrev = self.rev()
            fctx._ancestrycontext = getattr(self, '_ancestrycontext', None)
        elif '_descendantrev' in vars(self):
            # Otherwise propagate _descendantrev if we have one associated.
            fctx._descendantrev = self._descendantrev
            fctx._ancestrycontext = getattr(self, '_ancestrycontext', None)
        return fctx

    def parents(self):
        _path = self._path
        fl = self._filelog
        parents = self._filelog.parents(self._filenode)
        pl = [
            (_path, node, fl)
            for node in parents
            if node != self._repo.nodeconstants.nullid
        ]

        r = fl.renamed(self._filenode)
        if r:
            # - In the simple rename case, both parent are nullid, pl is empty.
            # - In case of merge, only one of the parent is null id and should
            # be replaced with the rename information. This parent is -always-
            # the first one.
            #
            # As null id have always been filtered out in the previous list
            # comprehension, inserting to 0 will always result in "replacing
            # first nullid parent with rename information.
            pl.insert(0, (r[0], r[1], self._repo.file(r[0])))

        return [self._parentfilectx(path, fnode, l) for path, fnode, l in pl]

    def p1(self):
        return self.parents()[0]

    def p2(self):
        p = self.parents()
        if len(p) == 2:
            return p[1]
        return filectx(self._repo, self._path, fileid=-1, filelog=self._filelog)

    def annotate(self, follow=False, skiprevs=None, diffopts=None):
        """Returns a list of annotateline objects for each line in the file

        - line.fctx is the filectx of the node where that line was last changed
        - line.lineno is the line number at the first appearance in the managed
          file
        - line.text is the data on that line (including newline character)
        """
        getlog = util.lrucachefunc(lambda x: self._repo.file(x))

        def parents(f):
            # Cut _descendantrev here to mitigate the penalty of lazy linkrev
            # adjustment. Otherwise, p._adjustlinkrev() would walk changelog
            # from the topmost introrev (= srcrev) down to p.linkrev() if it
            # isn't an ancestor of the srcrev.
            f._changeid
            pl = f.parents()

            # Don't return renamed parents if we aren't following.
            if not follow:
                pl = [p for p in pl if p.path() == f.path()]

            # renamed filectx won't have a filelog yet, so set it
            # from the cache to save time
            for p in pl:
                if not '_filelog' in p.__dict__:
                    p._filelog = getlog(p.path())

            return pl

        # use linkrev to find the first changeset where self appeared
        base = self.introfilectx()
        if getattr(base, '_ancestrycontext', None) is None:
            # it is safe to use an unfiltered repository here because we are
            # walking ancestors only.
            cl = self._repo.unfiltered().changelog
            if base.rev() is None:
                # wctx is not inclusive, but works because _ancestrycontext
                # is used to test filelog revisions
                ac = cl.ancestors(
                    [p.rev() for p in base.parents()], inclusive=True
                )
            else:
                ac = cl.ancestors([base.rev()], inclusive=True)
            base._ancestrycontext = ac

        return dagop.annotate(
            base, parents, skiprevs=skiprevs, diffopts=diffopts
        )

    def ancestors(self, followfirst=False):
        visit = {}
        c = self
        if followfirst:
            cut = 1
        else:
            cut = None

        while True:
            for parent in c.parents()[:cut]:
                visit[(parent.linkrev(), parent.filenode())] = parent
            if not visit:
                break
            c = visit.pop(max(visit))
            yield c

    def decodeddata(self):
        """Returns `data()` after running repository decoding filters.

        This is often equivalent to how the data would be expressed on disk.
        """
        return self._repo.wwritedata(self.path(), self.data())


class filectx(basefilectx):
    """A filecontext object makes access to data related to a particular
    filerevision convenient."""

    def __init__(
        self,
        repo,
        path,
        changeid=None,
        fileid=None,
        filelog=None,
        changectx=None,
    ):
        """changeid must be a revision number, if specified.
        fileid can be a file revision or node."""
        self._repo = repo
        self._path = path

        assert (
            changeid is not None or fileid is not None or changectx is not None
        ), b"bad args: changeid=%r, fileid=%r, changectx=%r" % (
            changeid,
            fileid,
            changectx,
        )

        if filelog is not None:
            self._filelog = filelog

        if changeid is not None:
            self._changeid = changeid
        if changectx is not None:
            self._changectx = changectx
        if fileid is not None:
            self._fileid = fileid

    @propertycache
    def _changectx(self):
        try:
            return self._repo[self._changeid]
        except error.FilteredRepoLookupError:
            # Linkrev may point to any revision in the repository.  When the
            # repository is filtered this may lead to `filectx` trying to build
            # `changectx` for filtered revision. In such case we fallback to
            # creating `changectx` on the unfiltered version of the reposition.
            # This fallback should not be an issue because `changectx` from
            # `filectx` are not used in complex operations that care about
            # filtering.
            #
            # This fallback is a cheap and dirty fix that prevent several
            # crashes. It does not ensure the behavior is correct. However the
            # behavior was not correct before filtering either and "incorrect
            # behavior" is seen as better as "crash"
            #
            # Linkrevs have several serious troubles with filtering that are
            # complicated to solve. Proper handling of the issue here should be
            # considered when solving linkrev issue are on the table.
            return self._repo.unfiltered()[self._changeid]

    def filectx(self, fileid, changeid=None):
        """opens an arbitrary revision of the file without
        opening a new filelog"""
        return filectx(
            self._repo,
            self._path,
            fileid=fileid,
            filelog=self._filelog,
            changeid=changeid,
        )

    def rawdata(self):
        return self._filelog.rawdata(self._filenode)

    def rawflags(self):
        """low-level revlog flags"""
        return self._filelog.flags(self._filerev)

    def data(self):
        try:
            return self._filelog.read(self._filenode)
        except error.CensoredNodeError:
            if self._repo.ui.config(b"censor", b"policy") == b"ignore":
                return b""
            raise error.Abort(
                _(b"censored node: %s") % short(self._filenode),
                hint=_(b"set censor.policy to ignore errors"),
            )

    def size(self):
        return self._filelog.size(self._filerev)

    @propertycache
    def _copied(self):
        """check if file was actually renamed in this changeset revision

        If rename logged in file revision, we report copy for changeset only
        if file revisions linkrev points back to the changeset in question
        or both changeset parents contain different file revisions.
        """

        renamed = self._filelog.renamed(self._filenode)
        if not renamed:
            return None

        if self.rev() == self.linkrev():
            return renamed

        name = self.path()
        fnode = self._filenode
        for p in self._changectx.parents():
            try:
                if fnode == p.filenode(name):
                    return None
            except error.LookupError:
                pass
        return renamed

    def children(self):
        # hard for renames
        c = self._filelog.children(self._filenode)
        return [
            filectx(self._repo, self._path, fileid=x, filelog=self._filelog)
            for x in c
        ]


class committablectx(basectx):
    """A committablectx object provides common functionality for a context that
    wants the ability to commit, e.g. workingctx or memctx."""

    def __init__(
        self,
        repo,
        text=b"",
        user=None,
        date=None,
        extra=None,
        changes=None,
        branch=None,
    ):
        super(committablectx, self).__init__(repo)
        self._rev = None
        self._node = None
        self._text = text
        if date:
            self._date = dateutil.parsedate(date)
        if user:
            self._user = user
        if changes:
            self._status = changes

        self._extra = {}
        if extra:
            self._extra = extra.copy()
        if branch is not None:
            self._extra[b'branch'] = encoding.fromlocal(branch)
        if not self._extra.get(b'branch'):
            self._extra[b'branch'] = b'default'

    def __bytes__(self):
        return bytes(self._parents[0]) + b"+"

    def hex(self):
        self._repo.nodeconstants.wdirhex

    __str__ = encoding.strmethod(__bytes__)

    def __nonzero__(self):
        return True

    __bool__ = __nonzero__

    @propertycache
    def _status(self):
        return self._repo.status()

    @propertycache
    def _user(self):
        return self._repo.ui.username()

    @propertycache
    def _date(self):
