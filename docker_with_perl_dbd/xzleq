
=over 3

 SV *  find_rundefsv()

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<get_op_descs>
X<get_op_descs>

C<B<DEPRECATED!>>  It is planned to remove C<get_op_descs>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

Return a pointer to the array of all the descriptions of the various OPs
Given an opcode from the enum in F<opcodes.h>, C<PL_op_desc[opcode]> returns a
pointer to a C language string giving its description.

=over 3

 char **  get_op_descs()

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<get_op_names>
X<get_op_names>

C<B<DEPRECATED!>>  It is planned to remove C<get_op_names>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

Return a pointer to the array of all the names of the various OPs
Given an opcode from the enum in F<opcodes.h>, C<PL_op_name[opcode]> returns a
pointer to a C language string giving its name.

=over 3

 char **  get_op_names()

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<HAS_SKIP_LOCALE_INIT>

Described in L<perlembed>.

=back

=for hackers
Found in file pod/perlembed.pod

=over 4

=item C<intro_my>
X<intro_my>

"Introduce" C<my> variables to visible status.  This is called during parsing
at the end of each statement to make lexical variables visible to subsequent
statements.

=over 3

 U32  intro_my()

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<load_module>

=item C<load_module_nocontext>
X<load_module>X<load_module_nocontext>

These load the module whose name is pointed to by the string part of C<name>.
Note that the actual module name, not its filename, should be given.
Eg, "Foo::Bar" instead of "Foo/Bar.pm". ver, if specified and not NULL,
provides version semantics similar to C<use Foo::Bar VERSION>. The optional
trailing arguments can be used to specify arguments to the module's C<import()>
method, similar to C<use Foo::Bar VERSION LIST>; their precise handling depends
on the flags. The flags argument is a bitwise-ORed collection of any of
C<PERL_LOADMOD_DENY>, C<PERL_LOADMOD_NOIMPORT>, or C<PERL_LOADMOD_IMPORT_OPS>
(or 0 for no flags).

If C<PERL_LOADMOD_NOIMPORT> is set, the module is loaded as if with an empty
import list, as in C<use Foo::Bar ()>; this is the only circumstance in which
the trailing optional arguments may be omitted entirely. Otherwise, if
C<PERL_LOADMOD_IMPORT_OPS> is set, the trailing arguments must consist of
exactly one C<OP*>, containing the op tree that produces the relevant import
arguments. Otherwise, the trailing arguments must all be C<SV*> values that
will be used as import arguments; and the list must be terminated with C<(SV*)
NULL>. If neither C<PERL_LOADMOD_NOIMPORT> nor C<PERL_LOADMOD_IMPORT_OPS> is
set, the trailing C<NULL> pointer is needed even if no import arguments are
desired. The reference count for each specified C<SV*> argument is
decremented. In addition, the C<name> argument is modified.

If C<PERL_LOADMOD_DENY> is set, the module is loaded as if with C<no> rather
than C<use>.

C<load_module> and C<load_module_nocontext> have the same apparent signature,
but the former hides the fact that it is accessing a thread context parameter.
So use the latter when you get a compilation error about C<pTHX>.

=over 3

 void  load_module          (U32 flags, SV *name, SV *ver, ...)
 void  load_module_nocontext(U32 flags, SV *name, SV *ver, ...)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<my_exit>
X<my_exit>

A wrapper for the C library L<exit(3)>, honoring what L<perlapi/PL_exit_flags>
say to do.

=over 3

 void  my_exit(U32 status)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<my_failure_exit>
X<my_failure_exit>

Exit the running Perl process with an error.

On non-VMS platforms, this is essentially equivalent to L</C<my_exit>>, using
C<errno>, but forces an en error code of 255 if C<errno> is 0.

On VMS, it takes care to set the appropriate severity bits in the exit status.

=over 3

 void  my_failure_exit()

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<my_strlcat>
X<my_strlcat>

The C library C<strlcat> if available, or a Perl implementation of it.
This operates on C C<NUL>-terminated strings.

C<my_strlcat()> appends string C<src> to the end of C<dst>.  It will append at
most S<C<size - strlen(dst) - 1>> bytes.  It will then C<NUL>-terminate,
unless C<size> is 0 or the original C<dst> string was longer than C<size> (in
practice this should not happen as it means that either C<size> is incorrect or
that C<dst> is not a proper C<NUL>-terminated string).

Note that C<size> is the full size of the destination buffer and
the result is guaranteed to be C<NUL>-terminated if there is room.  Note that
room for the C<NUL> should be included in C<size>.

The return value is the total length that C<dst> would have if C<size> is
sufficiently large.  Thus it is the initial length of C<dst> plus the length of
C<src>.  If C<size> is smaller than the return, the excess was not appended.

=over 3

 Size_t  my_strlcat(char *dst, const char *src, Size_t size)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<my_strlcpy>
X<my_strlcpy>

The C library C<strlcpy> if available, or a Perl implementation of it.
This operates on C C<NUL>-terminated strings.

C<my_strlcpy()> copies up to S<C<size - 1>> bytes from the string C<src>
to C<dst>, C<NUL>-terminating the result if C<size> is not 0.

The return value is the total length C<src> would be if the copy completely
succeeded.  If it is larger than C<size>, the excess was not copied.

=over 3

 Size_t  my_strlcpy(char *dst, const char *src, Size_t size)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<newPADNAMELIST>
X<newPADNAMELIST>

NOTE: C<newPADNAMELIST> is B<experimental> and may change or be
removed without notice.

Creates a new pad name list.  C<max> is the highest index for which space
is allocated.

=over 3

 PADNAMELIST *  newPADNAMELIST(size_t max)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<newPADNAMEouter>
X<newPADNAMEouter>

NOTE: C<newPADNAMEouter> is B<experimental> and may change or be
removed without notice.

Constructs and returns a new pad name.  Only use this function for names
that refer to outer lexicals.  (See also L</newPADNAMEpvn>.)  C<outer> is
the outer pad name that this one mirrors.  The returned pad name has the
C<PADNAMEf_OUTER> flag already set.

=over 3

 PADNAME *  newPADNAMEouter(PADNAME *outer)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<newPADNAMEpvn>
X<newPADNAMEpvn>

NOTE: C<newPADNAMEpvn> is B<experimental> and may change or be
removed without notice.

Constructs and returns a new pad name.  C<s> must be a UTF-8 string.  Do not
use this for pad names that point to outer lexicals.  See
C<L</newPADNAMEouter>>.

=over 3

 PADNAME *  newPADNAMEpvn(const char *s, STRLEN len)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<nothreadhook>
X<nothreadhook>

Stub that provides thread hook for perl_destruct when there are
no threads.

=over 3

 int  nothreadhook()

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<pad_add_anon>
X<pad_add_anon>

Allocates a place in the currently-compiling pad (via L</pad_alloc>)
for an anonymous function that is lexically scoped inside the
currently-compiling function.
The function C<func> is linked into the pad, and its C<CvOUTSIDE> link
to the outer scope is weakened to avoid a reference loop.

One reference count is stolen, so you may need to do C<SvREFCNT_inc(func)>.

C<optype> should be an opcode indicating the type of operation that the
pad entry is to support.  This doesn't affect operational semantics,
but is used for debugging.

=over 3

 PADOFFSET  pad_add_anon(CV *func, I32 optype)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_add_name_pv>
X<pad_add_name_pv>

Exactly like L</pad_add_name_pvn>, but takes a nul-terminated string
instead of a string/length pair.

=over 3

 PADOFFSET  pad_add_name_pv(const char *name, const U32 flags,
                            HV *typestash, HV *ourstash)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_add_name_pvn>
X<pad_add_name_pvn>

Allocates a place in the currently-compiling pad for a named lexical
variable.  Stores the name and other metadata in the name part of the
pad, and makes preparations to manage the variable's lexical scoping.
Returns the offset of the allocated pad slot.

C<namepv>/C<namelen> specify the variable's name in UTF-8, including
leading sigil.
If C<typestash> is non-null, the name is for a typed lexical, and this
identifies the type.  If C<ourstash> is non-null, it's a lexical reference
to a package variable, and this identifies the package.  The following
flags can be OR'ed together:

 padadd_OUR          redundantly specifies if it's a package var
 padadd_STATE        variable will retain value persistently
 padadd_NO_DUP_CHECK skip check for lexical shadowing
 padadd_FIELD        specifies that the lexical is a field for a class

=over 3

 PADOFFSET  pad_add_name_pvn(const char *namepv, STRLEN namelen,
                             U32 flags, HV *typestash,
                             HV *ourstash)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_add_name_sv>
X<pad_add_name_sv>

Exactly like L</pad_add_name_pvn>, but takes the name string in the form
of an SV instead of a string/length pair.

=over 3

 PADOFFSET  pad_add_name_sv(SV *name, U32 flags, HV *typestash,
                            HV *ourstash)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_alloc>
X<pad_alloc>

NOTE: C<pad_alloc> is B<experimental> and may change or be
removed without notice.

Allocates a place in the currently-compiling pad,
returning the offset of the allocated pad slot.
No name is initially attached to the pad slot.
C<tmptype> is a set of flags indicating the kind of pad entry required,
which will be set in the value SV for the allocated pad entry:

    SVs_PADMY    named lexical variable ("my", "our", "state")
    SVs_PADTMP   unnamed temporary store
    SVf_READONLY constant shared between recursion levels

C<SVf_READONLY> has been supported here only since perl 5.20.  To work with
earlier versions as well, use C<SVf_READONLY|SVs_PADTMP>.  C<SVf_READONLY>
does not cause the SV in the pad slot to be marked read-only, but simply
tells C<pad_alloc> that it I<will> be made read-only (by the caller), or at
least should be treated as such.

C<optype> should be an opcode indicating the type of operation that the
pad entry is to support.  This doesn't affect operational semantics,
but is used for debugging.

=over 3

 PADOFFSET  pad_alloc(I32 optype, U32 tmptype)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_findmy_pv>
X<pad_findmy_pv>

Exactly like L</pad_findmy_pvn>, but takes a nul-terminated string
instead of a string/length pair.

=over 3

 PADOFFSET  pad_findmy_pv(const char *name, U32 flags)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_findmy_pvn>
X<pad_findmy_pvn>

Given the name of a lexical variable, find its position in the
currently-compiling pad.
C<namepv>/C<namelen> specify the variable's name, including leading sigil.
C<flags> is reserved and must be zero.
If it is not in the current pad but appears in the pad of any lexically
enclosing scope, then a pseudo-entry for it is added in the current pad.
Returns the offset in the current pad,
or C<NOT_IN_PAD> if no such lexical is in scope.

=over 3

 PADOFFSET  pad_findmy_pvn(const char *namepv, STRLEN namelen,
                           U32 flags)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_findmy_sv>
X<pad_findmy_sv>

Exactly like L</pad_findmy_pvn>, but takes the name string in the form
of an SV instead of a string/length pair.

=over 3

 PADOFFSET  pad_findmy_sv(SV *name, U32 flags)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<padnamelist_fetch>
X<padnamelist_fetch>

NOTE: C<padnamelist_fetch> is B<experimental> and may change or be
removed without notice.

Fetches the pad name from the given index.

=over 3

 PADNAME *  padnamelist_fetch(PADNAMELIST *pnl, SSize_t key)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<padnamelist_store>
X<padnamelist_store>

NOTE: C<padnamelist_store> is B<experimental> and may change or be
removed without notice.

Stores the pad name (which may be null) at the given index, freeing any
existing pad name in that slot.

=over 3

 PADNAME **  padnamelist_store(PADNAMELIST *pnl, SSize_t key,
                               PADNAME *val)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_tidy>
X<pad_tidy>

NOTE: C<pad_tidy> is B<experimental> and may change or be
removed without notice.

Tidy up a pad at the end of compilation of the code to which it belongs.
Jobs performed here are: remove most stuff from the pads of anonsub
prototypes; give it a C<@_>; mark temporaries as such.  C<type> indicates
the kind of subroutine:

    padtidy_SUB        ordinary subroutine
    padtidy_SUBCLONE   prototype for lexical closure
    padtidy_FORMAT     format

=over 3

 void  pad_tidy(padtidy_type type)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<perl_alloc>
X<perl_alloc>

Allocates a new Perl interpreter.  See L<perlembed>.

=over 3

 PerlInterpreter *  perl_alloc()

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<PERL_ASYNC_CHECK>

Described in L<perlinterp>.

=over 3

 void  PERL_ASYNC_CHECK()

=back

=back

=for hackers
Found in file pod/perlinterp.pod

=over 4

=item C<perl_clone>
X<perl_clone>

Create and return a new interpreter by cloning the current one.

C<perl_clone> takes these flags as parameters:

C<CLONEf_COPY_STACKS> - is used to, well, copy the stacks also,
without it we only clone the data and zero the stacks,
with it we copy the stacks and the new perl interpreter is
ready to run at the exact same point as the previous one.
The pseudo-fork code uses C<COPY_STACKS> while the
threads->create doesn't.

C<CLONEf_KEEP_PTR_TABLE> -
C<perl_clone> keeps a ptr_table with the pointer of the old
variable as a key and the new variable as a value,
this allows it to check if something has been cloned and not
clone it again, but rather just use the value and increase the
refcount.
If C<KEEP_PTR_TABLE> is not set then C<perl_clone> will kill the ptr_table
using the function S<C<ptr_table_free(PL_ptr_table); PL_ptr_table = NULL;>>.
A reason to keep it around is if you want to dup some of your own
variables which are outside the graph that perl scans.

C<CLONEf_CLONE_HOST> -
This is a win32 thing, it is ignored on unix, it tells perl's
win32host code (which is c++) to clone itself, this is needed on
win32 if you want to run two threads at the same time,
if you just want to do some stuff in a separate perl interpreter
and then throw it away and return to the original one,
you don't need to do anything.

=over 3

 PerlInterpreter *  perl_clone(PerlInterpreter *proto_perl,
                               UV flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<perl_construct>
X<perl_construct>

Initializes a new Perl interpreter.  See L<perlembed>.

=over 3

 void  perl_construct(PerlInterpreter *my_perl)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<perl_destruct>
X<perl_destruct>

Shuts down a Perl interpreter.  See L<perlembed> for a tutorial.

C<my_perl> points to the Perl interpreter.  It must have been previously
created through the use of L</perl_alloc> and L</perl_construct>.  It may
have been initialised through L</perl_parse>, and may have been used
through L</perl_run> and other means.  This function should be called for
any Perl interpreter that has been constructed with L</perl_construct>,
even if subsequent operations on it failed, for example if L</perl_parse>
returned a non-zero value.

If the interpreter's C<PL_exit_flags> word has the
C<PERL_EXIT_DESTRUCT_END> flag set, then this function will execute code
in C<END> blocks before performing the rest of destruction.  If it is
desired to make any use of the interpreter between L</perl_parse> and
L</perl_destruct> other than just calling L</perl_run>, then this flag
should be set early on.  This matters if L</perl_run> will not be called,
or if anything else will be done in addition to calling L</perl_run>.

Returns a value be a suitable value to pass to the C library function
C<exit> (or to return from C<main>), to serve as an exit code indicating
the nature of the way the interpreter terminated.  This takes into account
any failure of L</perl_parse> and any early exit from L</perl_run>.
The exit code is of the type required by the host operating system,
so because of differing exit code conventions it is not portable to
interpret specific numeric values as having specific meanings.

=over 3

 int  perl_destruct(PerlInterpreter *my_perl)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<perl_free>
X<perl_free>

Releases a Perl interpreter.  See L<perlembed>.

=over 3

 void  perl_free(PerlInterpreter *my_perl)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<PERL_GET_CONTEXT>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PerlInterpreter>

Described in L<perlembed>.

=back

=for hackers
Found in file pod/perlembed.pod

=over 4

=item C<perl_parse>
X<perl_parse>

Tells a Perl interpreter to parse a Perl script.  This performs most
of the initialisation of a Perl interpreter.  See L<perlembed> for
a tutorial.

C<my_perl> points to the Perl interpreter that is to parse the script.
It must have been previously created through the use of L</perl_alloc>
and L</perl_construct>.  C<xsinit> points to a callback function that
will be called to set up the ability for this Perl interpreter to load
XS extensions, or may be null to perform no such setup.

C<argc> and C<argv> supply a set of command-line arguments to the Perl
interpreter, as would normally be passed to the C<main> function of
a C program.  C<argv[argc]> must be null.  These arguments are where
the script to parse is specified, either by naming a script file or by
providing a script in a C<-e> option.
If L<C<$0>|perlvar/$0> will be written to in the Perl interpreter, then
the argument strings must be in writable memory, and so mustn't just be
string constants.

C<env> specifies a set of environment variables that will be used by
this Perl interpreter.  If non-null, it must point to a null-terminated
array of environment strings.  If null, the Perl interpreter will use
the environment supplied by the C<environ> global variable.

This function initialises the interpreter, and parses and compiles the
script specified by the command-line arguments.  This includes executing
code in C<BEGIN>, C<UNITCHECK>, and C<CHECK> blocks.  It does not execute
C<INIT> blocks or the main program.

Returns an integer of slightly tricky interpretation.  The correct
use of the return value is as a truth value indicating whether there
was a failure in initialisation.  If zero is returned, this indicates
that initialisation was successful, and it is safe to proceed to call
L</perl_run> and make other use of it.  If a non-zero value is returned,
this indicates some problem that means the interpreter wants to terminate.
The interpreter should not be just abandoned upon such failure; the caller
should proceed to shut the interpreter down cleanly with L</perl_destruct>
and free it with L</perl_free>.

For historical reasons, the non-zero return value also attempts to
be a suitable value to pass to the C library function C<exit> (or to
return from C<main>), to serve as an exit code indicating the nature
of the way initialisation terminated.  However, this isn't portable,
due to differing exit code conventions.  An attempt is made to return
an exit code of the type required by the host operating system, but
because it is constrained to be non-zero, it is not necessarily possible
to indicate every type of exit.  It is only reliable on Unix, where a
zero exit code can be augmented with a set bit that will be ignored.
In any case, this function is not the correct place to acquire an exit
code: one should get that from L</perl_destruct>.

=over 3

 int  perl_parse(PerlInterpreter *my_perl, XSINIT_t xsinit,
                 int argc, char **argv, char **env)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<perl_run>
X<perl_run>

Tells a Perl interpreter to run its main program.  See L<perlembed>
for a tutorial.

C<my_perl> points to the Perl interpreter.  It must have been previously
created through the use of L</perl_alloc> and L</perl_construct>, and
initialised through L</perl_parse>.  This function should not be called
if L</perl_parse> returned a non-zero value, indicating a failure in
initialisation or compilation.

This function executes code in C<INIT> blocks, and then executes the
main program.  The code to be executed is that established by the prior
call to L</perl_parse>.  If the interpreter's C<PL_exit_flags> word
does not have the C<PERL_EXIT_DESTRUCT_END> flag set, then this function
will also execute code in C<END> blocks.  If it is desired to make any
further use of the interpreter after calling this function, then C<END>
blocks should be postponed to L</perl_destruct> time by setting that flag.

Returns an integer of slightly tricky interpretation.  The correct use
of the return value is as a truth value indicating whether the program
terminated non-locally.  If zero is returned, this indicates that
the program ran to completion, and it is safe to make other use of the
interpreter (provided that the C<PERL_EXIT_DESTRUCT_END> flag was set as
described above).  If a non-zero value is returned, this indicates that
the interpreter wants to terminate early.  The interpreter should not be
just abandoned because of this desire to terminate; the caller should
proceed to shut the interpreter down cleanly with L</perl_destruct>
and free it with L</perl_free>.

For historical reasons, the non-zero return value also attempts to
be a suitable value to pass to the C library function C<exit> (or to
return from C<main>), to serve as an exit code indicating the nature of
the way the program terminated.  However, this isn't portable, due to
differing exit code conventions.  An attempt is made to return an exit
code of the type required by the host operating system, but because
it is constrained to be non-zero, it is not necessarily possible to
indicate every type of exit.  It is only reliable on Unix, where a zero
exit code can be augmented with a set bit that will be ignored.  In any
case, this function is not the correct place to acquire an exit code:
one should get that from L</perl_destruct>.

=over 3

 int  perl_run(PerlInterpreter *my_perl)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<PERL_SET_CONTEXT>

Described in L<perlguts>.

=over 3

 void  PERL_SET_CONTEXT(PerlInterpreter* i)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PERL_SYS_INIT>

=item C<PERL_SYS_INIT3>
X<PERL_SYS_INIT>X<PERL_SYS_INIT3>

These provide system-specific tune up of the C runtime environment necessary to
run Perl interpreters.  Only one should be used, and it should be called only
once, before creating any Perl interpreters.

They differ in that C<PERL_SYS_INIT3> also initializes C<env>.

=over 3

 void  PERL_SYS_INIT (int *argc, char*** argv)
 void  PERL_SYS_INIT3(int *argc, char*** argv, char*** env)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<PERL_SYS_TERM>
X<PERL_SYS_TERM>

Provides system-specific clean up of the C runtime environment after
running Perl interpreters.  This should be called only once, after
freeing any remaining Perl interpreters.

=over 3

 void  PERL_SYS_TERM()

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<PL_exit_flags>
X<PL_exit_flags>

Contains flags controlling perl's behaviour on exit():

=over

=item * C<PERL_EXIT_DESTRUCT_END>

If set, END blocks are executed when the interpreter is destroyed.
This is normally set by perl itself after the interpreter is
constructed.

=item * C<PERL_EXIT_ABORT>

Call C<abort()> on exit.  This is used internally by perl itself to
abort if exit is called while processing exit.

=item * C<PERL_EXIT_WARN>

Warn on exit.

=item * C<PERL_EXIT_EXPECTED>

Set by the L<perlfunc/exit> operator.
