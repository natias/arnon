        maxcontext=None,
    ):
        def trimcontext(lines, reverse=False):
            if maxcontext is not None:
                delta = len(lines) - maxcontext
                if delta > 0:
                    if reverse:
                        return delta, lines[delta:]
                    else:
                        return delta, lines[:maxcontext]
            return 0, lines

        self.header = header
        trimedbefore, self.before = trimcontext(before, True)
        self.fromline = fromline + trimedbefore
        self.toline = toline + trimedbefore
        _trimedafter, self.after = trimcontext(after, False)
        self.proc = proc
        self.hunk = hunk
        self.added, self.removed = self.countchanges(self.hunk)

    def __eq__(self, v):
        if not isinstance(v, recordhunk):
            return False

        return (
            (v.hunk == self.hunk)
            and (v.proc == self.proc)
            and (self.fromline == v.fromline)
            and (self.header.files() == v.header.files())
        )

    def __hash__(self):
        return hash(
            (
                tuple(self.hunk),
                tuple(self.header.files()),
                self.fromline,
                self.proc,
            )
        )

    def countchanges(self, hunk):
        """hunk -> (n+,n-)"""
        add = len([h for h in hunk if h.startswith(b'+')])
        rem = len([h for h in hunk if h.startswith(b'-')])
        return add, rem

    def reversehunk(self):
        """return another recordhunk which is the reverse of the hunk

        If this hunk is diff(A, B), the returned hunk is diff(B, A). To do
        that, swap fromline/toline and +/- signs while keep other things
        unchanged.
        """
        m = {b'+': b'-', b'-': b'+', b'\\': b'\\'}
        hunk = [b'%s%s' % (m[l[0:1]], l[1:]) for l in self.hunk]
        return recordhunk(
            self.header,
            self.toline,
            self.fromline,
            self.proc,
            self.before,
            hunk,
            self.after,
        )

    def write(self, fp):
        delta = len(self.before) + len(self.after)
        if self.after and self.after[-1] == diffhelper.MISSING_NEWLINE_MARKER:
            delta -= 1
        fromlen = delta + self.removed
        tolen = delta + self.added
        fp.write(
            b'@@ -%d,%d +%d,%d @@%s\n'
            % (
                self.fromline,
                fromlen,
                self.toline,
                tolen,
                self.proc and (b' ' + self.proc),
            )
        )
        fp.write(b''.join(self.before + self.hunk + self.after))

    pretty = write

    def filename(self):
        return self.header.filename()

    @encoding.strmethod
    def __repr__(self):
        return b'<hunk %r@%d>' % (self.filename(), self.fromline)


def getmessages():
    return {
        b'multiple': {
            b'apply': _(b"apply change %d/%d to '%s'?"),
            b'discard': _(b"discard change %d/%d to '%s'?"),
            b'keep': _(b"keep change %d/%d to '%s'?"),
            b'record': _(b"record change %d/%d to '%s'?"),
        },
        b'single': {
            b'apply': _(b"apply this change to '%s'?"),
            b'discard': _(b"discard this change to '%s'?"),
            b'keep': _(b"keep this change to '%s'?"),
            b'record': _(b"record this change to '%s'?"),
        },
        b'help': {
            b'apply': _(
                b'[Ynesfdaq?]'
                b'$$ &Yes, apply this change'
                b'$$ &No, skip this change'
                b'$$ &Edit this change manually'
                b'$$ &Skip remaining changes to this file'
                b'$$ Apply remaining changes to this &file'
                b'$$ &Done, skip remaining changes and files'
                b'$$ Apply &all changes to all remaining files'
                b'$$ &Quit, applying no changes'
                b'$$ &? (display help)'
            ),
            b'discard': _(
                b'[Ynesfdaq?]'
                b'$$ &Yes, discard this change'
                b'$$ &No, skip this change'
                b'$$ &Edit this change manually'
                b'$$ &Skip remaining changes to this file'
                b'$$ Discard remaining changes to this &file'
                b'$$ &Done, skip remaining changes and files'
                b'$$ Discard &all changes to all remaining files'
                b'$$ &Quit, discarding no changes'
                b'$$ &? (display help)'
            ),
            b'keep': _(
                b'[Ynesfdaq?]'
                b'$$ &Yes, keep this change'
                b'$$ &No, skip this change'
                b'$$ &Edit this change manually'
                b'$$ &Skip remaining changes to this file'
                b'$$ Keep remaining changes to this &file'
                b'$$ &Done, skip remaining changes and files'
                b'$$ Keep &all changes to all remaining files'
                b'$$ &Quit, keeping all changes'
                b'$$ &? (display help)'
            ),
            b'record': _(
                b'[Ynesfdaq?]'
                b'$$ &Yes, record this change'
                b'$$ &No, skip this change'
                b'$$ &Edit this change manually'
                b'$$ &Skip remaining changes to this file'
                b'$$ Record remaining changes to this &file'
                b'$$ &Done, skip remaining changes and files'
                b'$$ Record &all changes to all remaining files'
                b'$$ &Quit, recording no changes'
                b'$$ &? (display help)'
            ),
        },
    }


def filterpatch(ui, headers, match, operation=None):
    """Interactively filter patch chunks into applied-only chunks"""
    messages = getmessages()

    if operation is None:
        operation = b'record'

    def prompt(skipfile, skipall, query, chunk):
        """prompt query, and process base inputs

        - y/n for the rest of file
        - y/n for the rest
        - ? (help)
        - q (quit)

        Return True/False and possibly updated skipfile and skipall.
        """
        newpatches = None
        if skipall is not None:
            return skipall, skipfile, skipall, newpatches
        if skipfile is not None:
            return skipfile, skipfile, skipall, newpatches
        while True:
            resps = messages[b'help'][operation]
            # IMPORTANT: keep the last line of this prompt short (<40 english
            # chars is a good target) because of issue6158.
            r = ui.promptchoice(b"%s\n(enter ? for help) %s" % (query, resps))
            ui.write(b"\n")
            if r == 8:  # ?
                for c, t in ui.extractchoices(resps)[1]:
                    ui.write(b'%s - %s\n' % (c, encoding.lower(t)))
                continue
            elif r == 0:  # yes
                ret = True
            elif r == 1:  # no
                ret = False
            elif r == 2:  # Edit patch
                if chunk is None:
                    ui.write(_(b'cannot edit patch for whole file'))
                    ui.write(b"\n")
                    continue
                if chunk.header.binary():
                    ui.write(_(b'cannot edit patch for binary file'))
                    ui.write(b"\n")
                    continue
                # Patch comment based on the Git one (based on comment at end of
                # https://mercurial-scm.org/wiki/RecordExtension)
                phelp = b'---' + _(
                    b"""
To remove '-' lines, make them ' ' lines (context).
To remove '+' lines, delete them.
Lines starting with # will be removed from the patch.

If the patch applies cleanly, the edited hunk will immediately be
added to the record list. If it does not apply cleanly, a rejects
file will be generated: you can use that when you try again. If
all lines of the hunk are removed, then the edit is aborted and
the hunk is left unchanged.
"""
                )
                (patchfd, patchfn) = pycompat.mkstemp(
                    prefix=b"hg-editor-", suffix=b".diff"
                )
                ncpatchfp = None
                try:
                    # Write the initial patch
                    f = util.nativeeolwriter(os.fdopen(patchfd, 'wb'))
                    chunk.header.write(f)
                    chunk.write(f)
                    f.write(
                        b''.join(
                            [b'# ' + i + b'\n' for i in phelp.splitlines()]
                        )
                    )
                    f.close()
                    # Start the editor and wait for it to complete
                    editor = ui.geteditor()
                    ret = ui.system(
                        b"%s \"%s\"" % (editor, patchfn),
                        environ={b'HGUSER': ui.username()},
                        blockedtag=b'filterpatch',
                    )
                    if ret != 0:
                        ui.warn(_(b"editor exited with exit code %d\n") % ret)
                        continue
                    # Remove comment lines
                    patchfp = open(patchfn, 'rb')
                    ncpatchfp = stringio()
                    for line in patchfp:
                        line = util.fromnativeeol(line)
                        if not line.startswith(b'#'):
                            ncpatchfp.write(line)
                    patchfp.close()
                    ncpatchfp.seek(0)
                    newpatches = parsepatch(ncpatchfp)
                finally:
                    os.unlink(patchfn)
                    del ncpatchfp
                # Signal that the chunk shouldn't be applied as-is, but
                # provide the new patch to be used instead.
                ret = False
            elif r == 3:  # Skip
                ret = skipfile = False
            elif r == 4:  # file (Record remaining)
                ret = skipfile = True
            elif r == 5:  # done, skip remaining
                ret = skipall = False
            elif r == 6:  # all
                ret = skipall = True
            elif r == 7:  # quit
                raise error.CanceledError(_(b'user quit'))
            return ret, skipfile, skipall, newpatches

    seen = set()
    applied = {}  # 'filename' -> [] of chunks
    skipfile, skipall = None, None
    pos, total = 1, sum(len(h.hunks) for h in headers)
    for h in headers:
        pos += len(h.hunks)
        skipfile = None
        fixoffset = 0
        hdr = b''.join(h.header)
        if hdr in seen:
            continue
        seen.add(hdr)
        if skipall is None:
            h.pretty(ui)
        files = h.files()
        msg = _(b'examine changes to %s?') % _(b' and ').join(
            b"'%s'" % f for f in files
        )
        if all(match.exact(f) for f in files):
            r, skipall, np = True, None, None
        else:
            r, skipfile, skipall, np = prompt(skipfile, skipall, msg, None)
        if not r:
            continue
        applied[h.filename()] = [h]
        if h.allhunks():
            applied[h.filename()] += h.hunks
            continue
        for i, chunk in enumerate(h.hunks):
            if skipfile is None and skipall is None:
                chunk.pretty(ui)
            if total == 1:
                msg = messages[b'single'][operation] % chunk.filename()
            else:
                idx = pos - len(h.hunks) + i
                msg = messages[b'multiple'][operation] % (
                    idx,
                    total,
                    chunk.filename(),
                )
            r, skipfile, skipall, newpatches = prompt(
                skipfile, skipall, msg, chunk
            )
            if r:
                if fixoffset:
                    chunk = copy.copy(chunk)
                    chunk.toline += fixoffset
                applied[chunk.filename()].append(chunk)
            elif newpatches is not None:
                for newpatch in newpatches:
                    for newhunk in newpatch.hunks:
                        if fixoffset:
                            newhunk.toline += fixoffset
                        applied[newhunk.filename()].append(newhunk)
            else:
                fixoffset += chunk.removed - chunk.added
    return (
        sum(
            [h for h in applied.values() if h[0].special() or len(h) > 1],
            [],
        ),
        {},
    )


class hunk:
    def __init__(self, desc, num, lr, context):
        self.number = num
        self.desc = desc
        self.hunk = [desc]
        self.a = []
        self.b = []
        self.starta = self.lena = None
        self.startb = self.lenb = None
        if lr is not None:
            if context:
                self.read_context_hunk(lr)
            else:
                self.read_unified_hunk(lr)

    def getnormalized(self):
        """Return a copy with line endings normalized to LF."""

        def normalize(lines):
            nlines = []
            for line in lines:
                if line.endswith(b'\r\n'):
                    line = line[:-2] + b'\n'
                nlines.append(line)
            return nlines

        # Dummy object, it is rebuilt manually
        nh = hunk(self.desc, self.number, None, None)
        nh.number = self.number
        nh.desc = self.desc
        nh.hunk = self.hunk
        nh.a = normalize(self.a)
        nh.b = normalize(self.b)
        nh.starta = self.starta
        nh.startb = self.startb
        nh.lena = self.lena
        nh.lenb = self.lenb
        return nh

    def read_unified_hunk(self, lr):
        m = unidesc.match(self.desc)
        if not m:
            raise PatchParseError(_(b"bad hunk #%d") % self.number)
        self.starta, self.lena, self.startb, self.lenb = m.groups()
        if self.lena is None:
            self.lena = 1
        else:
            self.lena = int(self.lena)
        if self.lenb is None:
            self.lenb = 1
        else:
            self.lenb = int(self.lenb)
        self.starta = int(self.starta)
        self.startb = int(self.startb)
        try:
            diffhelper.addlines(
                lr, self.hunk, self.lena, self.lenb, self.a, self.b
            )
        except error.ParseError as e:
            raise PatchParseError(_(b"bad hunk #%d: %s") % (self.number, e))
        # if we hit eof before finishing out the hunk, the last line will
        # be zero length.  Lets try to fix it up.
        while len(self.hunk[-1]) == 0:
            del self.hunk[-1]
            del self.a[-1]
            del self.b[-1]
            self.lena -= 1
            self.lenb -= 1
        self._fixnewline(lr)

    def read_context_hunk(self, lr):
        self.desc = lr.readline()
        m = contextdesc.match(self.desc)
        if not m:
            raise PatchParseError(_(b"bad hunk #%d") % self.number)
        self.starta, aend = m.groups()
        self.starta = int(self.starta)
        if aend is None:
            aend = self.starta
        self.lena = int(aend) - self.starta
        if self.starta:
            self.lena += 1
        for x in range(self.lena):
            l = lr.readline()
            if l.startswith(b'---'):
                # lines addition, old block is empty
                lr.push(l)
                break
            s = l[2:]
            if l.startswith(b'- ') or l.startswith(b'! '):
                u = b'-' + s
            elif l.startswith(b'  '):
                u = b' ' + s
            else:
                raise PatchParseError(
                    _(b"bad hunk #%d old text line %d") % (self.number, x)
                )
            self.a.append(u)
            self.hunk.append(u)

        l = lr.readline()
        if l.startswith(br'\ '):
            s = self.a[-1][:-1]
            self.a[-1] = s
            self.hunk[-1] = s
            l = lr.readline()
        m = contextdesc.match(l)
        if not m:
            raise PatchParseError(_(b"bad hunk #%d") % self.number)
        self.startb, bend = m.groups()
        self.startb = int(self.startb)
        if bend is None:
            bend = self.startb
        self.lenb = int(bend) - self.startb
        if self.startb:
            self.lenb += 1
        hunki = 1
        for x in range(self.lenb):
            l = lr.readline()
            if l.startswith(br'\ '):
                # XXX: the only way to hit this is with an invalid line range.
                # The no-eol marker is not counted in the line range, but I
                # guess there are diff(1) out there which behave differently.
                s = self.b[-1][:-1]
                self.b[-1] = s
                self.hunk[hunki - 1] = s
                continue
            if not l:
                # line deletions, new block is empty and we hit EOF
                lr.push(l)
                break
            s = l[2:]
            if l.startswith(b'+ ') or l.startswith(b'! '):
                u = b'+' + s
            elif l.startswith(b'  '):
                u = b' ' + s
            elif len(self.b) == 0:
                # line deletions, new block is empty
                lr.push(l)
                break
            else:
                raise PatchParseError(
                    _(b"bad hunk #%d old text line %d") % (self.number, x)
                )
            self.b.append(s)
            while True:
                if hunki >= len(self.hunk):
                    h = b""
                else:
                    h = self.hunk[hunki]
                hunki += 1
                if h == u:
                    break
                elif h.startswith(b'-'):
                    continue
                else:
                    self.hunk.insert(hunki - 1, u)
                    break

        if not self.a:
            # this happens when lines were only added to the hunk
            for x in self.hunk:
                if x.startswith(b'-') or x.startswith(b' '):
                    self.a.append(x)
        if not self.b:
            # this happens when lines were only deleted from the hunk
            for x in self.hunk:
                if x.startswith(b'+') or x.startswith(b' '):
                    self.b.append(x[1:])
        # @@ -start,len +start,len @@
        self.desc = b"@@ -%d,%d +%d,%d @@\n" % (
            self.starta,
            self.lena,
            self.startb,
            self.lenb,
        )
        self.hunk[0] = self.desc
        self._fixnewline(lr)

    def _fixnewline(self, lr):
        l = lr.readline()
        if l.startswith(br'\ '):
            diffhelper.fixnewline(self.hunk, self.a, self.b)
        else:
            lr.push(l)

    def complete(self):
        return len(self.a) == self.lena and len(self.b) == self.lenb

    def _fuzzit(self, old, new, fuzz, toponly):
        # this removes context lines from the top and bottom of list 'l'.  It
        # checks the hunk to make sure only context lines are removed, and then
        # returns a new shortened list of lines.
        fuzz = min(fuzz, len(old))
        if fuzz:
            top = 0
            bot = 0
            hlen = len(self.hunk)
            for x in range(hlen - 1):
                # the hunk starts with the @@ line, so use x+1
                if self.hunk[x + 1].startswith(b' '):
                    top += 1
                else:
                    break
            if not toponly:
                for x in range(hlen - 1):
                    if self.hunk[hlen - bot - 1].startswith(b' '):
                        bot += 1
                    else:
                        break

            bot = min(fuzz, bot)
            top = min(fuzz, top)
            return old[top : len(old) - bot], new[top : len(new) - bot], top
        return old, new, 0

    def fuzzit(self, fuzz, toponly):
        old, new, top = self._fuzzit(self.a, self.b, fuzz, toponly)
        oldstart = self.starta + top
        newstart = self.startb + top
        # zero length hunk ranges already have their start decremented
        if self.lena and oldstart > 0:
            oldstart -= 1
        if self.lenb and newstart > 0:
            newstart -= 1
        return old, oldstart, new, newstart


class binhunk:
    """A binary patch file."""

    def __init__(self, lr, fname):
        self.text = None
        self.delta = False
        self.hunk = [b'GIT binary patch\n']
        self._fname = fname
        self._read(lr)

    def complete(self):
        return self.text is not None

    def new(self, lines):
        if self.delta:
            return [applybindelta(self.text, b''.join(lines))]
        return [self.text]

    def _read(self, lr):
        def getline(lr, hunk):
            l = lr.readline()
            hunk.append(l)
            return l.rstrip(b'\r\n')

        while True:
            line = getline(lr, self.hunk)
            if not line:
                raise PatchParseError(
                    _(b'could not extract "%s" binary data') % self._fname
                )
            if line.startswith(b'literal '):
                size = int(line[8:].rstrip())
                break
            if line.startswith(b'delta '):
                size = int(line[6:].rstrip())
                self.delta = True
                break
        dec = []
        line = getline(lr, self.hunk)
        while len(line) > 1:
            l = line[0:1]
            if l <= b'Z' and l >= b'A':
                l = ord(l) - ord(b'A') + 1
            else:
                l = ord(l) - ord(b'a') + 27
            try:
                dec.append(util.b85decode(line[1:])[:l])
            except ValueError as e:
                raise PatchParseError(
                    _(b'could not decode "%s" binary patch: %s')
                    % (self._fname, stringutil.forcebytestr(e))
                )
            line = getline(lr, self.hunk)
        text = zlib.decompress(b''.join(dec))
        if len(text) != size:
            raise PatchParseError(
                _(b'"%s" length is %d bytes, should be %d')
                % (self._fname, len(text), size)
            )
        self.text = text


def parsefilename(str):
    # --- filename \t|space stuff
    s = str[4:].rstrip(b'\r\n')
    i = s.find(b'\t')
    if i < 0:
        i = s.find(b' ')
        if i < 0:
            return s
    return s[:i]


def reversehunks(hunks):
    '''reverse the signs in the hunks given as argument

    This function operates on hunks coming out of patch.filterpatch, that is
    a list of the form: [header1, hunk1, hunk2, header2...]. Example usage:

    >>> rawpatch = b"""diff --git a/folder1/g b/folder1/g
    ... --- a/folder1/g
    ... +++ b/folder1/g
    ... @@ -1,7 +1,7 @@
    ... +firstline
    ...  c
    ...  1
    ...  2
    ... + 3
    ... -4
    ...  5
    ...  d
    ... +lastline"""
    >>> hunks = parsepatch([rawpatch])
    >>> hunkscomingfromfilterpatch = []
    >>> for h in hunks:
    ...     hunkscomingfromfilterpatch.append(h)
    ...     hunkscomingfromfilterpatch.extend(h.hunks)

    >>> reversedhunks = reversehunks(hunkscomingfromfilterpatch)
    >>> from . import util
    >>> fp = util.stringio()
    >>> for c in reversedhunks:
    ...      c.write(fp)
    >>> fp.seek(0) or None
    >>> reversedpatch = fp.read()
    >>> print(pycompat.sysstr(reversedpatch))
    diff --git a/folder1/g b/folder1/g
    --- a/folder1/g
    +++ b/folder1/g
    @@ -1,4 +1,3 @@
    -firstline
     c
     1
     2
    @@ -2,6 +1,6 @@
     c
     1
     2
    - 3
    +4
     5
     d
    @@ -6,3 +5,2 @@
     5
     d
    -lastline

    '''

    newhunks = []
    for c in hunks:
        if util.safehasattr(c, b'reversehunk'):
            c = c.reversehunk()
        newhunks.append(c)
    return newhunks


def parsepatch(originalchunks, maxcontext=None):
    """patch -> [] of headers -> [] of hunks

    If maxcontext is not None, trim context lines if necessary.

    >>> rawpatch = b'''diff --git a/folder1/g b/folder1/g
    ... --- a/folder1/g
    ... +++ b/folder1/g
    ... @@ -1,8 +1,10 @@
    ...  1
    ...  2
    ... -3
    ...  4
    ...  5
    ...  6
    ... +6.1
    ... +6.2
    ...  7
    ...  8
    ... +9'''
    >>> out = util.stringio()
    >>> headers = parsepatch([rawpatch], maxcontext=1)
    >>> for header in headers:
    ...     header.write(out)
    ...     for hunk in header.hunks:
    ...         hunk.write(out)
    >>> print(pycompat.sysstr(out.getvalue()))
    diff --git a/folder1/g b/folder1/g
    --- a/folder1/g
    +++ b/folder1/g
    @@ -2,3 +2,2 @@
     2
    -3
     4
    @@ -6,2 +5,4 @@
     6
    +6.1
    +6.2
     7
    @@ -8,1 +9,2 @@
     8
    +9
    """

    class parser:
        """patch parsing state machine"""

        def __init__(self):
            self.fromline = 0
            self.toline = 0
            self.proc = b''
            self.header = None
            self.context = []
            self.before = []
            self.hunk = []
            self.headers = []

        def addrange(self, limits):
            self.addcontext([])
            fromstart, fromend, tostart, toend, proc = limits
            self.fromline = int(fromstart)
            self.toline = int(tostart)
            self.proc = proc

        def addcontext(self, context):
            if self.hunk:
                h = recordhunk(
                    self.header,
                    self.fromline,
                    self.toline,
                    self.proc,
                    self.before,
                    self.hunk,
                    context,
                    maxcontext,
                )
                self.header.hunks.append(h)
                self.fromline += len(self.before) + h.removed
                self.toline += len(self.before) + h.added
                self.before = []
                self.hunk = []
            self.context = context

        def addhunk(self, hunk):
            if self.context:
                self.before = self.context
                self.context = []
            if self.hunk:
                self.addcontext([])
            self.hunk = hunk

        def newfile(self, hdr):
            self.addcontext([])
            h = header(hdr)
            self.headers.append(h)
            self.header = h

        def addother(self, line):
            pass  # 'other' lines are ignored

        def finished(self):
            self.addcontext([])
            return self.headers

        transitions = {
            b'file': {
                b'context': addcontext,
                b'file': newfile,
                b'hunk': addhunk,
                b'range': addrange,
            },
            b'context': {
                b'file': newfile,
                b'hunk': addhunk,
                b'range': addrange,
                b'other': addother,
            },
            b'hunk': {
                b'context': addcontext,
                b'file': newfile,
                b'range': addrange,
            },
            b'range': {b'context': addcontext, b'hunk': addhunk},
            b'other': {b'other': addother},
        }

    p = parser()
    fp = stringio()
    fp.write(b''.join(originalchunks))
    fp.seek(0)

    state = b'context'
    for newstate, data in scanpatch(fp):
        try:
            p.transitions[state][newstate](p, data)
        except KeyError:
            raise PatchParseError(
                b'unhandled transition: %s -> %s' % (state, newstate)
            )
        state = newstate
    del fp
    return p.finished()


def pathtransform(path, strip, prefix):
    """turn a path from a patch into a path suitable for the repository

    prefix, if not empty, is expected to be normalized with a / at the end.

    Returns (stripped components, path in repository).

    >>> pathtransform(b'a/b/c', 0, b'')
    ('', 'a/b/c')
    >>> pathtransform(b'   a/b/c   ', 0, b'')
    ('', '   a/b/c')
    >>> pathtransform(b'   a/b/c   ', 2, b'')
    ('a/b/', 'c')
    >>> pathtransform(b'a/b/c', 0, b'd/e/')
    ('', 'd/e/a/b/c')
    >>> pathtransform(b'   a//b/c   ', 2, b'd/e/')
    ('a//b/', 'd/e/c')
    >>> pathtransform(b'a/b/c', 3, b'')
    Traceback (most recent call last):
    PatchApplicationError: unable to strip away 1 of 3 dirs from a/b/c
    """
    pathlen = len(path)
    i = 0
    if strip == 0:
        return b'', prefix + path.rstrip()
    count = strip
    while count > 0:
        i = path.find(b'/', i)
        if i == -1:
            raise PatchApplicationError(
                _(b"unable to strip away %d of %d dirs from %s")
                % (count, strip, path)
            )
        i += 1
        # consume '//' in the path
        while i < pathlen - 1 and path[i : i + 1] == b'/':
            i += 1
        count -= 1
    return path[:i].lstrip(), prefix + path[i:].rstrip()


def makepatchmeta(backend, afile_orig, bfile_orig, hunk, strip, prefix):
    nulla = afile_orig == b"/dev/null"
    nullb = bfile_orig == b"/dev/null"
    create = nulla and hunk.starta == 0 and hunk.lena == 0
    remove = nullb and hunk.startb == 0 and hunk.lenb == 0
    abase, afile = pathtransform(afile_orig, strip, prefix)
    gooda = not nulla and backend.exists(afile)
    bbase, bfile = pathtransform(bfile_orig, strip, prefix)
    if afile == bfile:
        goodb = gooda
    else:
        goodb = not nullb and backend.exists(bfile)
    missing = not goodb and not gooda and not create

    # some diff programs apparently produce patches where the afile is
    # not /dev/null, but afile starts with bfile
    abasedir = afile[: afile.rfind(b'/') + 1]
    bbasedir = bfile[: bfile.rfind(b'/') + 1]
    if (
        missing
        and abasedir == bbasedir
        and afile.startswith(bfile)
        and hunk.starta == 0
        and hunk.lena == 0
    ):
        create = True
        missing = False

    # If afile is "a/b/foo" and bfile is "a/b/foo.orig" we assume the
    # diff is between a file and its backup. In this case, the original
    # file should be patched (see original mpatch code).
    isbackup = abase == bbase and bfile.startswith(afile)
    fname = None
    if not missing:
        if gooda and goodb:
            if isbackup:
                fname = afile
            else:
                fname = bfile
        elif gooda:
            fname = afile

    if not fname:
        if not nullb:
            if isbackup:
                fname = afile
            else:
                fname = bfile
        elif not nulla:
            fname = afile
        else:
            raise PatchParseError(_(b"undefined source and destination files"))

    gp = patchmeta(fname)
    if create:
        gp.op = b'ADD'
    elif remove:
        gp.op = b'DELETE'
    return gp


def scanpatch(fp):
    """like patch.iterhunks, but yield different events

    - ('file',    [header_lines + fromfile + tofile])
    - ('context', [context_lines])
    - ('hunk',    [hunk_lines])
    - ('range',   (-start,len, +start,len, proc))
    """
    lines_re = re.compile(br'@@ -(\d+),(\d+) \+(\d+),(\d+) @@\s*(.*)')
    lr = linereader(fp)

    def scanwhile(first, p):
        """scan lr while predicate holds"""
        lines = [first]
        for line in iter(lr.readline, b''):
            if p(line):
                lines.append(line)
            else:
                lr.push(line)
                break
        return lines

    for line in iter(lr.readline, b''):
        if line.startswith(b'diff --git a/') or line.startswith(b'diff -r '):

            def notheader(line):
                s = line.split(None, 1)
                return not s or s[0] not in (b'---', b'diff')

            header = scanwhile(line, notheader)
            fromfile = lr.readline()
            if fromfile.startswith(b'---'):
                tofile = lr.readline()
                header += [fromfile, tofile]
            else:
                lr.push(fromfile)
            yield b'file', header
        elif line.startswith(b' '):
            cs = (b' ', b'\\')
            yield b'context', scanwhile(line, lambda l: l.startswith(cs))
        elif line.startswith((b'-', b'+')):
            cs = (b'-', b'+', b'\\')
            yield b'hunk', scanwhile(line, lambda l: l.startswith(cs))
        else:
            m = lines_re.match(line)
            if m:
                yield b'range', m.groups()
            else:
                yield b'other', line
