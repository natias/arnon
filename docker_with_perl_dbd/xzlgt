now been created and is live:

    sub { my $x; eval 'sub f { $x }' }->();

The second situation is caused by an eval accessing a variable that has
gone out of scope, for example,

    sub f {
	my $x;
	sub { eval '$x' }
    }
    f()->();

Here, when the '$x' in the eval is being compiled, f() is not currently
being executed, so its $x is not available for capture.

=item Variable "%s" is not imported%s

(S misc) With "use strict" in effect, you referred to a global variable
that you apparently thought was imported from another module, because
something else of the same name (usually a subroutine) is exported by
that module.  It usually means you put the wrong funny character on the
front of your variable. It is also possible you used an "our" variable
whose scope has ended.

=item Variable length lookbehind not implemented in regex m/%s/

(F) B<This message no longer should be raised as of Perl 5.30.>  It is
retained in this document as a convenience for people using an earlier
Perl version.

In Perl 5.30 and earlier, lookbehind is allowed
only for subexpressions whose length is fixed and
known at compile time.  For positive lookbehind, you can use the C<\K>
regex construct as a way to get the equivalent functionality.  See
L<(?<=pattern) and \K in perlre|perlre/\K>.

Starting in Perl 5.18, there are non-obvious Unicode rules under C</i>
that can match variably, but which you might not think could.  For
example, the substring C<"ss"> can match the single character LATIN
SMALL LETTER SHARP S.  Here's a complete list of the current ones
affecting ASCII characters:

   ASCII
  sequence      Matches single letter under /i
    FF          U+FB00 LATIN SMALL LIGATURE FF
    FFI         U+FB03 LATIN SMALL LIGATURE FFI
    FFL         U+FB04 LATIN SMALL LIGATURE FFL
    FI          U+FB01 LATIN SMALL LIGATURE FI
    FL          U+FB02 LATIN SMALL LIGATURE FL
    SS          U+00DF LATIN SMALL LETTER SHARP S
                U+1E9E LATIN CAPITAL LETTER SHARP S
    ST          U+FB06 LATIN SMALL LIGATURE ST
                U+FB05 LATIN SMALL LIGATURE LONG S T

This list is subject to change, but is quite unlikely to.
Each ASCII sequence can be any combination of upper- and lowercase.

You can avoid this by using a bracketed character class in the
lookbehind assertion, like

 (?<![sS]t)
 (?<![fF]f[iI])

This fools Perl into not matching the ligatures.

Another option for Perls starting with 5.16, if you only care about
ASCII matches, is to add the C</aa> modifier to the regex.  This will
exclude all these non-obvious matches, thus getting rid of this message.
You can also say

 use if $] ge 5.016, re => '/aa';

to apply C</aa> to all regular expressions compiled within its scope.
See L<re>.

=item Variable length positive lookbehind with capturing is experimental in regex m/%s/

(W) Variable length positive lookbehind with capturing is not well defined. This
warning alerts you to the fact that you are using a construct which may
change in a future version of perl. See the
L<< documentation of Positive Lookbehind in perlre|perlre/"C<(?<=I<pattern>)>" >>
for details. You may silence this warning with the following:

    no warnings 'experimental::vlb';

=item Variable length negative lookbehind with capturing is experimental in regex m/%s/

(W) Variable length negative lookbehind with capturing is not well defined. This
warning alerts you to the fact that you are using a construct which may
change in a future version of perl. See the
L<< documentation of Negative Lookbehind in perlre|perlre/"C<(?<!I<pattern>)>" >>
for details. You may silence this warning with the following:

    no warnings 'experimental::vlb';

=item "%s" variable %s masks earlier declaration in same %s

(W shadow) A "my", "our", "state" or "field" variable has been redeclared in
the current scope or statement, effectively eliminating all access to the
previous instance.  This is almost always a typographical error.  Note
that the earlier variable will still exist until the end of the scope
or until all closure references to it are destroyed.

=item Variable syntax

(A) You've accidentally run your script through B<csh> instead
of Perl.  Check the #! line, or manually feed your script into
Perl yourself.

=item Variable "%s" will not stay shared

(W closure) An inner (nested) I<named> subroutine is referencing a
lexical variable defined in an outer named subroutine.

When the inner subroutine is called, it will see the value of
the outer subroutine's variable as it was before and during the *first*
call to the outer subroutine; in this case, after the first call to the
outer subroutine is complete, the inner and outer subroutines will no
longer share a common value for the variable.  In other words, the
variable will no longer be shared.

This problem can usually be solved by making the inner subroutine
anonymous, using the C<sub {}> syntax.  When inner anonymous subs that
reference variables in outer subroutines are created, they
are automatically rebound to the current values of such variables.

=item vector argument not supported with alpha versions

(S printf) The %vd (s)printf format does not support version objects
with alpha parts.

=item Verb pattern '%s' has a mandatory argument in regex; marked by
S<<-- HERE> in m/%s/ 

(F) You used a verb pattern that requires an argument.  Supply an
argument or check that you are using the right verb.

=item Verb pattern '%s' may not have an argument in regex; marked by
S<<-- HERE> in m/%s/ 

(F) You used a verb pattern that is not allowed an argument.  Remove the 
argument or check that you are using the right verb.

=item Version control conflict marker

(F) The parser found a line starting with C<E<lt><<<<<<>,
C<E<gt>E<gt>E<gt>E<gt>E<gt>E<gt>E<gt>>, or C<=======>.  These may be left by a
version control system to mark conflicts after a failed merge operation.

=item Version number must be a constant number

(P) The attempt to translate a C<use Module n.n LIST> statement into
its equivalent C<BEGIN> block found an internal inconsistency with
the version number.

=item Version string '%s' contains invalid data; ignoring: '%s'

(W misc) The version string contains invalid characters at the end, which
are being ignored.

=item Warning: something's wrong

(W) You passed warn() an empty string (the equivalent of C<warn "">) or
you called it with no args and C<$@> was empty.

=item Warning: unable to close filehandle %s properly

(S) The implicit close() done by an open() got an error indication on
the close().  This usually indicates your file system ran out of disk
space.

=item Warning: unable to close filehandle properly: %s

=item Warning: unable to close filehandle %s properly: %s

(S io) There were errors during the implicit close() done on a filehandle
when its reference count reached zero while it was still open, e.g.:

    {
        open my $fh, '>', $file  or die "open: '$file': $!\n";
        print $fh $data or die "print: $!";
    } # implicit close here

Because various errors may only be detected by close() (e.g. buffering could
allow the C<print> in this example to return true even when the disk is full),
it is dangerous to ignore its result.  So when it happens implicitly, perl
will signal errors by warning.

B<Prior to version 5.22.0, perl ignored such errors>, so the common idiom shown
above was liable to cause B<silent data loss>.

=item Warning: Use of "%s" without parentheses is ambiguous

(S ambiguous) You wrote a unary operator followed by something that
looks like a binary operator that could also have been interpreted as a
term or unary operator.  For instance, if you know that the rand
function has a default argument of 1.0, and you write

    rand + 5;

you may THINK you wrote the same thing as

    rand() + 5;

but in actual fact, you got

    rand(+5);

So put in parentheses to say what you really mean.

=item when is deprecated

(D deprecated::smartmatch) C<when> depends on smartmatch, which is
deprecated.  Additionally, it has several special cases that may
not be immediately obvious, and it will be removed in Perl 5.42.
See the explanation
under L<perlsyn/Experimental Details on given and when>.

=item Wide character in %s

(S utf8) Perl met a wide character (ordinal >255) when it wasn't
expecting one.  This warning is by default on for I/O (like print).

If this warning does come from I/O, the easiest
way to quiet it is simply to add the C<:utf8> layer, I<e.g.>,
S<C<binmode STDOUT, ':utf8'>>.  Another way to turn off the warning is
to add S<C<no warnings 'utf8';>> but that is often closer to
cheating.  In general, you are supposed to explicitly mark the
filehandle with an encoding, see L<open> and L<perlfunc/binmode>.

If the warning comes from other than I/O, this diagnostic probably
indicates that incorrect results are being obtained.  You should examine
your code to determine how a wide character is getting to an operation
that doesn't handle them.

=item Wide character (U+%X) in %s

(W locale) While in a single-byte locale (I<i.e.>, a non-UTF-8
one), a multi-byte character was encountered.   Perl considers this
character to be the specified Unicode code point.  Combining non-UTF-8
locales and Unicode is dangerous.  Almost certainly some characters
will have two different representations.  For example, in the ISO 8859-7
(Greek) locale, the code point 0xC3 represents a Capital Gamma.  But so
also does 0x393.  This will make string comparisons unreliable.

You likely need to figure out how this multi-byte character got mixed up
with your single-byte locale (or perhaps you thought you had a UTF-8
locale, but Perl disagrees).

=item Within []-length '%c' not allowed

(F) The count in the (un)pack template may be replaced by C<[TEMPLATE]>
only if C<TEMPLATE> always matches the same amount of packed bytes that
can be determined from the template alone.  This is not possible if
it contains any of the codes @, /, U, u, w or a *-length.  Redesign
the template.

=item While trying to resolve method call %s->%s() can not locate package "%s" yet it is mentioned in @%s::ISA (perhaps you forgot to load "%s"?)

(W syntax) It is possible that the C<@ISA> contains a misspelled or never loaded
package name, which can result in perl choosing an unexpected parent
class's method to resolve the method call. If this is deliberate you
can do something like

  @Missing::Package::ISA = ();

to silence the warnings, otherwise you should correct the package name, or
ensure that the package is loaded prior to the method call.

=item %s() with negative argument

(S misc) Certain operations make no sense with negative arguments.
Warning is given and the operation is not done.

=item write() on closed filehandle %s

(W closed) The filehandle you're writing to got itself closed sometime
before now.  Check your control flow.

=item %s "\x%X" does not map to Unicode

(S utf8) When reading in different encodings, Perl tries to
map everything into Unicode characters.  The bytes you read
in are not legal in this encoding.  For example

    utf8 "\xE4" does not map to Unicode

if you try to read in the a-diaereses Latin-1 as UTF-8.

=item 'X' outside of string

(F) You had a (un)pack template that specified a relative position before
the beginning of the string being (un)packed.  See L<perlfunc/pack>.

=item 'x' outside of string in unpack

(F) You had an unpack template that specified a relative position after
the end of the string being unpacked.  See L<perlfunc/pack>.

=item YOU HAVEN'T DISABLED SET-ID SCRIPTS IN THE KERNEL YET!

(F) And you probably never will, because you probably don't have the
sources to your kernel, and your vendor probably doesn't give a rip
about what you want.  There is a vulnerability anywhere that you have a
set-id script, and to close it you need to remove the set-id bit from
the script that you're attempting to run.  To actually run the script
set-id, your best bet is to put a set-id C wrapper around your script.

=item You need to quote "%s"

(W syntax) You assigned a bareword as a signal handler name:

    $SIG{...} = foo;

However, this will not make C<sub foo> the signal handler. Instead, Perl
will call the subroutine when the assignment is executed and use the
returned value as the signal handler, which is probably not what you want.
(If it I<is> what you want, put C<()> after the subroutine name to avoid
the warning.)

To register the subroutine as the signal handler, take a reference to it:

    $SIG{...} = \&foo;

=item Your random numbers are not that random

(F) When trying to initialize the random seed for hashes, Perl could
not get any randomness out of your system.  This usually indicates
Something Very Wrong.

=item Zero length \N{} in regex; marked by S<<-- HERE> in m/%s/

(F) Named Unicode character escapes (C<\N{...}>) may return a zero-length
sequence.  Such an escape was used in an extended character class, i.e.
C<(?[...])>, or under C<use re 'strict'>, which is not permitted.  Check
that the correct escape has been used, and the correct charnames handler
is in scope.  The S<<-- HERE> shows whereabouts in the regular
expression the problem was discovered.

=back

=head1 SEE ALSO

L<warnings>, L<diagnostics>.

=cut
                                                                                                                                                                                                                                                                                       usr/local/lib/perl5/5.40.0/pod/perldoc.pod                                                          0000644 0000000 0000000 00000022240 14714567415 016424  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        
=head1 NAME

perldoc - Look up Perl documentation in Pod format.

=head1 SYNOPSIS

    perldoc [-h] [-D] [-t] [-u] [-m] [-l] [-U] [-F]
        [-i] [-V] [-T] [-r]
        [-d destination_file]
        [-o formatname]
        [-M FormatterClassName]
        [-w formatteroption:value]
        [-n nroff-replacement]
        [-X]
        [-L language_code]
        PageName|ModuleName|ProgramName|URL

Examples:

    perldoc -f BuiltinFunction

    perldoc -L it -f BuiltinFunction

    perldoc -q FAQ Keyword

    perldoc -L fr -q FAQ Keyword

    perldoc -v PerlVariable

    perldoc -a PerlAPI

See below for more description of the switches.

=head1 DESCRIPTION

B<perldoc> looks up documentation in .pod format that is embedded in the perl
installation tree or in a perl script, and displays it using a variety of
formatters.  This is primarily used for the documentation for the perl library
modules.

Your system may also have man pages installed for those modules, in
which case you can probably just use the man(1) command.

If you are looking for a table of contents to the Perl library modules
documentation, see the L<perltoc> page.

=head1 OPTIONS

=over 5

=item B<-h>

Prints out a brief B<h>elp message.

=item B<-D>

B<D>escribes search for the item in B<d>etail.

=item B<-t>

Display docs using plain B<t>ext converter, instead of nroff. This may be faster,
but it probably won't look as nice.

=item B<-u>

Skip the real Pod formatting, and just show the raw Pod source (B<U>nformatted)

=item B<-m> I<module>

Display the entire module: both code and unformatted pod documentation.
This may be useful if the docs don't explain a function in the detail
you need, and you'd like to inspect the code directly; perldoc will find
the file for you and simply hand it off for display.

=item B<-l>

Display onB<l>y the file name of the module found.

=item B<-U>

When running as the superuser, don't attempt drop privileges for security.
This option is implied with B<-F>.

B<NOTE>: Please see the heading SECURITY below for more information.

=item B<-F>

Consider arguments as file names; no search in directories will be performed.
Implies B<-U> if run as the superuser.

=item B<-f> I<perlfunc>

The B<-f> option followed by the name of a perl built-in function will
extract the documentation of this function from L<perlfunc>.

Example:

      perldoc -f sprintf


=item B<-q> I<perlfaq-search-regexp>

The B<-q> option takes a regular expression as an argument.  It will search
the B<q>uestion headings in perlfaq[1-9] and print the entries matching
the regular expression.

Example:

     perldoc -q shuffle

=item B<-a> I<perlapifunc>

The B<-a> option followed by the name of a perl api function will
extract the documentation of this function from L<perlapi>.

Example:

     perldoc -a newHV

=item B<-v> I<perlvar>

The B<-v> option followed by the name of a Perl predefined variable will
extract the documentation of this variable from L<perlvar>.

Examples:

     perldoc -v '$"'
     perldoc -v @+
     perldoc -v DATA


=item B<-T>

This specifies that the output is not to be sent to a pager, but is to
be sent directly to STDOUT.

=item B<-d> I<destination-filename>

This specifies that the output is to be sent neither to a pager nor
to STDOUT, but is to be saved to the specified filename.  Example:
C<perldoc -oLaTeX -dtextwrapdocs.tex Text::Wrap>

=item B<-o> I<output-formatname>

This specifies that you want Perldoc to try using a Pod-formatting
class for the output format that you specify.  For example:
C<-oman>.  This is actually just a wrapper around the C<-M> switch;
using C<-oI<formatname>> just looks for a loadable class by adding
that format name (with different capitalizations) to the end of
different classname prefixes.

For example, C<-oLaTeX> currently tries all of the following classes:
Pod::Perldoc::ToLaTeX Pod::Perldoc::Tolatex Pod::Perldoc::ToLatex
Pod::Perldoc::ToLATEX Pod::Simple::LaTeX Pod::Simple::latex
Pod::Simple::Latex Pod::Simple::LATEX Pod::LaTeX Pod::latex Pod::Latex
Pod::LATEX.

=item B<-M> I<module-name>

This specifies the module that you want to try using for formatting the
pod.  The class must at least provide a C<parse_from_file> method.
For example: C<perldoc -MPod::Perldoc::ToChecker>.

You can specify several classes to try by joining them with commas
or semicolons, as in C<-MTk::SuperPod;Tk::Pod>.

=item B<-w> I<option:value> or B<-w> I<option>

This specifies an option to call the formatter B<w>ith.  For example,
C<-w textsize:15> will call
C<< $formatter->textsize(15) >> on the formatter object before it is
used to format the object.  For this to be valid, the formatter class
must provide such a method, and the value you pass should be valid.
(So if C<textsize> expects an integer, and you do C<-w textsize:big>,
expect trouble.)

You can use C<-w optionname> (without a value) as shorthand for
C<-w optionname:I<TRUE>>.  This is presumably useful in cases of on/off
features like: C<-w page_numbering>.

You can use an "=" instead of the ":", as in: C<-w textsize=15>.  This
might be more (or less) convenient, depending on what shell you use.

=item B<-X>

Use an index if it is present. The B<-X> option looks for an entry
whose basename matches the name given on the command line in the file
C<$Config{archlib}/pod.idx>. The F<pod.idx> file should contain fully
qualified filenames, one per line.

=item B<-L> I<language_code>

This allows one to specify the I<language code> for the desired language
translation. If the C<POD2::E<lt>language_codeE<gt>> package isn't
installed in your system, the switch is ignored.
All available translation packages are to be found under the C<POD2::>
namespace. See L<POD2::IT> (or L<POD2::FR>) to see how to create new
localized C<POD2::*> documentation packages and integrate them into
L<Pod::Perldoc>.

=item B<PageName|ModuleName|ProgramName|URL>

The item you want to look up.  Nested modules (such as C<File::Basename>)
are specified either as C<File::Basename> or C<< File/Basename >>.  You may also
give a descriptive name of a page, such as C<perlfunc>.  For URLs, HTTP and
HTTPS are the only kind currently supported.

For simple names like 'foo', when the normal search fails to find
a matching page, a search with the "perl" prefix is tried as well.
So "perldoc intro" is enough to find/render "perlintro.pod".

=item B<-n> I<some-formatter>

Specify replacement for groff

=item B<-r>

Recursive search.

=item B<-i>

Ignore case.

=item B<-V>

Displays the version of perldoc you're running.

=back

=head1 SECURITY

Because B<perldoc> does not run properly tainted, and is known to
have security issues, when run as the superuser it will attempt to
drop privileges by setting the effective and real IDs to nobody's
or nouser's account, or -2 if unavailable.  If it cannot relinquish
its privileges, it will not run.

See the C<-U> option if you do not want this behavior but B<beware>
that there are significant security risks if you choose to use C<-U>.

Since 3.26, using C<-F> as the superuser also implies C<-U> as opening
most files and traversing directories requires privileges that are
above the nobody/nogroup level.

=head1 ENVIRONMENT

Any switches in the C<PERLDOC> environment variable will be used before the
command line arguments.

Useful values for C<PERLDOC> include C<-oterm>, C<-otext>, C<-ortf>,
C<-oxml>, and so on, depending on what modules you have on hand; or
the formatter class may be specified exactly with C<-MPod::Perldoc::ToTerm>
or the like.

C<perldoc> also searches directories
specified by the C<PERL5LIB> (or C<PERLLIB> if C<PERL5LIB> is not
defined) and C<PATH> environment variables.
(The latter is so that embedded pods for executables, such as
C<perldoc> itself, are available.)

In directories where either C<Makefile.PL> or C<Build.PL> exist, C<perldoc>
will add C<.> and C<lib> first to its search path, and as long as you're not
the superuser will add C<blib> too.  This is really helpful if you're working
inside of a build directory and want to read through the docs even if you
have a version of a module previously installed.

C<perldoc> will use, in order of preference, the pager defined in
C<PERLDOC_PAGER>, C<MANPAGER>, or C<PAGER> before trying to find a pager
on its own. (C<MANPAGER> is not used if C<perldoc> was told to display
plain text or unformatted pod.)

When using perldoc in it's C<-m> mode (display module source code),
C<perldoc> will attempt to use the pager set in C<PERLDOC_SRC_PAGER>.
A useful setting for this command is your favorite editor as in
C</usr/bin/nano>. (Don't judge me.)

One useful value for C<PERLDOC_PAGER> is C<less -+C -E>.

Having PERLDOCDEBUG set to a positive integer will make perldoc emit
even more descriptive output than the C<-D> switch does; the higher the
number, the more it emits.


=head1 CHANGES

Up to 3.14_05, the switch B<-v> was used to produce verbose
messages of B<perldoc> operation, which is now enabled by B<-D>.

=head1 SEE ALSO

L<perlpod>, L<Pod::Perldoc>

=head1 AUTHOR

Current maintainer: Mark Allen C<< <mallen@cpan.org> >>

Past contributors are:
brian d foy C<< <bdfoy@cpan.org> >> 
Adriano R. Ferreira C<< <ferreira@cpan.org> >>,
Sean M. Burke C<< <sburke@cpan.org> >>,
Kenneth Albanowski C<< <kjahds@kjahds.com> >>,
Andy Dougherty  C<< <doughera@lafcol.lafayette.edu> >>,
and many others.

=cut
                                                                                                                                                                                                                                                                                                                                                                usr/local/lib/perl5/5.40.0/pod/perldocstyle.pod                                                     0000644 0000000 0000000 00000132355 14714567415 017516  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =encoding utf8

=head1 NAME

perldocstyle - A style guide for writing Perl's documentation

=head1 DESCRIPTION

This document is a guide for the authorship and maintenance of the
documentation that ships with Perl. This includes the following:

=over

=item *

The several dozen manual sections whose filenames begin with "C<perl>",
such as C<perlobj>, C<perlre>, and C<perlintro>. (And, yes, C<perl>.)

=item *

The documentation for all the modules included with Perl (as listed by
L<C<perlmodlib>|perlmodlib>).

=item *

The hundreds of individually presented reference sections derived from
the L<C<perlfunc>|perlfunc> file.

=back

This guide will hereafter refer to user-manual section files as I<man
pages>, per Unix convention.

=head2 Purpose of this guide

This style guide aims to establish standards, procedures, and philosophies
applicable to Perl's core documentation.

Adherence to these standards will help ensure that any one part of
Perl's manual has a tone and style consistent with that of any other. As
with the rest of the Perl project, the language's documentation
collection is an open-source project authored over a long period of time
by many people. Maintaining consistency across such a wide swath of work
presents a challenge; this guide provides a foundation to help mitigate
this difficulty.

This will help its readers--especially those new to Perl--to feel
more welcome and engaged with Perl's documentation, and this in turn
will help the Perl project itself grow stronger through having a larger,
more diverse, and more confident population of knowledgeable users.

=head2 Intended audience

Anyone interested in contributing to Perl's core documentation should
familiarize themselves with the standards outlined by this guide.

Programmers documenting their own work apart from the Perl project
itself may also find this guide worthwhile, especially if they wish
their work to extend the tone and style of Perl's own manual.

=head2 Status of this document

This guide was initially drafted in late 2020, drawing from the
documentation style guides of several open-source technologies
contemporary with Perl. This has included Python, Raku, Rust, and the
Linux kernel.

The author intends to see this guide used as starting place from
which to launch a review of Perl's reams of extant documentation, with
the expectation that those conducting this review should grow and modify
this guide as needed to account for the requirements and quirks
particular to Perl's programming manual.

=head1 FUNDAMENTALS

=head2 Choice of markup: Pod

All of Perl's core documentation uses Pod ("Plain Old Documentation"), a
simple markup language, to format its source text. Pod is similar in
spirit to other contemporary lightweight markup technologies, such as
Markdown and reStructuredText, and has a decades-long shared history
with Perl itself.

For a comprehensive reference to Pod syntax, see L<C<perlpod>|perlpod>.
For the sake of reading this guide, familiarity with the Pod syntax for
section headers (C<=head2>, et cetera) and for inline text formatting
(C<CE<lt>like thisE<gt>>) should suffice.

Perl programmers also use Pod to document their own scripts, libraries,
and modules. This use of Pod has its own style guide, outlined by
L<C<perlpodstyle>|perlpodstyle>.

=head2 Choice of language: American English

Perl's core documentation is written in English, with a preference for
American spelling of words and expression of phrases. That means "color"
over "colour", "math" versus "maths", "the team has decided" and not
"the team have decided", and so on.

We name one style of English for the sake of consistency across Perl's
documentation, much as a software project might declare a four-space
indentation standard--even when that doesn't affect how well the code
compiles. Both efforts result in an easier read by avoiding jarring,
mid-document changes in format or style.

Contributors to Perl's documentation should note that this rule
describes the ultimate, published output of the project, and does not
prescribe the dialect used within community contributions. The
documentation team enthusiastically welcomes any English-language
contributions, and will actively assist in Americanizing spelling and
style when warranted.

=head3 Other languages and translations

Community-authored translations of Perl's documentation do exist,
covering a variety of languages. While the Perl project appreciates
these translation efforts and promotes them when applicable, it does not
officially support or maintain any of them.

That said, keeping Perl's documentation clear, simple, and short has a
welcome side effect of aiding any such translation project.

(Note that the Chinese, Japanese, and Korean-language README files
included with Perl's source distributions provide an exception to this
choice of language--but these documents fall outside the scope of this
guide.)

=head2 Choice of encoding: UTF-8

Perl's core documentation files are encoded in UTF-8, and can make use
of the full range of characters this encoding allows.

As such, every core doc file (or the Pod section of every core module)
should commence with an C<=encoding utf8> declaration.

=head2 Choice of underlying style guide: CMOS

Perl's documentation uses the L<Chicago Manual of
Style|https://www.chicagomanualofstyle.org> (CMOS), 17th Edition, as
its baseline guide for style and grammar. While the document you are
currently reading endeavors to serve as an adequate stand-alone style guide
for the purposes of documenting Perl, authors should consider CMOS the
fallback authority for any pertinent topics not covered here.

Because CMOS is not a free resource, access to it is not a prerequisite
for contributing to Perl's documentation; the doc team will help
contributors learn about and apply its guidelines as needed. However, we
do encourage anyone interested in significant doc contributions to
obtain or at least read through CMOS. (Copies are likely available
through most public libraries, and CMOS-derived fundamentals can be
found online as well.)

=head2 Contributing to Perl's documentation

Perl, like any programming language, is only as good as its
documentation. Perl depends upon clear, friendly, and thorough
documentation in order to welcome brand-new users, teach and explain the
language's various concepts and components, and serve as a lifelong
reference for experienced Perl programmers. As such, the Perl project
welcomes and values all community efforts to improve the language's
documentation.

Perl accepts documentation contributions through the same open-source
project pipeline as code contributions. See L<C<perlhack>|perlhack> for
more information.

=head1 FORMATTING AND STRUCTURE

This section details specific Pod syntax and style that all core Perl
documentation should adhere to, in the interest of consistency and
readability.

=head2 Document structure

Each individual work of core Perl documentation, whether contained
within a C<.pod> file or in the Pod section of a standard code module,
patterns its structure after a number of long-time Unix man page
conventions. (Hence this guide's use of "man page" to refer to any one
self-contained part of Perl's documentation.)

Adhering to these conventions helps Pod formatters present a Perl man
page's content in different contexts--whether a terminal, the web, or
even print. Many of the following requirements originate with
L<C<perlpodstyle>|perlpodstyle>, which derives its recommendations in
turn from these well-established practices.

=head3 Name

After its L<C<=encoding utf8> declaration|/Choice of encoding: UTF-8>, a
Perl man page I<must> present a level-one header named "NAME" (literally),
followed by a paragraph containing the page's name and a very brief
description.

The first few lines of a notional page named C<perlpodexample>:

    =encoding utf8

    =head1 NAME

    perlpodexample - An example of formatting a manual page's title line

=head3 Description and synopsis

Most Perl man pages also contain a DESCRIPTION section featuring a
summary of, or introduction to, the document's content and purpose.

This section should also, one way or another, clearly identify the
audience that the page addresses, especially if it has expectations
about the reader's prior knowledge. For example, a man page that dives
deep into the inner workings of Perl's regular expression engine should
state its assumptions up front--and quickly redirect readers who are
instead looking for a more basic reference or tutorial.

Reference pages, when appropriate, can precede the DESCRIPTION with a
SYNOPSIS section that lists, within one or more code blocks, some very
brief examples of the referenced feature's use. This section should show
a handful of common-case and best-practice examples, rather than an
exhaustive list of every obscure method or alternate syntax available.

=head3 Other sections and subsections

Pages should conclude, when appropriate, with a SEE ALSO section
containing hyperlinks to relevant sections of Perl's manual, other Unix
man pages, or appropriate web pages. Hyperlink each such cross-reference via
C<LE<lt>...E<gt>>.

What other sections to include depends entirely upon the topic at hand.
Authors should feel free to include further C<=head1>-level sections,
whether other standard ones listed by C<perlpodstyle>, or ones specific
to the page's topic; in either case, render these top-level headings in
all-capital letters.

You may then include as many subsections beneath them as needed to meet
the standards of clarity, accessibility, and cross-reference affinity
L<suggested elsewhere in this guide|/Apply one of the four documentation
modes>.

=head3 Author and copyright

In most circumstances, Perl's stand-alone man pages--those contained
within C<.pod> files--do not need to include any copyright or license
information about themselves. Their source Pod files are part of Perl's
own core software repository, and that already covers them under the
same copyright and license terms as Perl itself. You do not need to
include additional "LICENSE" or "COPYRIGHT" sections of your own.

These man pages may optionally credit their primary author, or include a
list of significant contributors, under "AUTHOR" or "CONTRIBUTORS"
headings. Note that the presence of authors' names does not preclude a
given page from L<writing in a voice consistent with the rest of Perl's
documentation|/The documentation speaks with one voice>.

Note that these guidelines do not apply to the core software modules
that ship with Perl. These have their own standards for authorship and
copyright statements, as found in C<perlpodstyle>.

=head2 Formatting rules

=head3 Line length and line wrap

Each line within a Perl man page's Pod source file should measure 72
characters or fewer in length.

Please break paragraphs up into blocks of short lines, rather than
"soft wrapping" paragraphs across hundreds of characters with no line
breaks.

=head3 Code blocks

Just like the text around them, all code examples should be as short and
readable as possible, displaying no more complexity than absolutely
necessary to illustrate the concept at hand.

For the sake of consistency within and across Perl's man pages, all
examples must adhere to the code-layout principles set out by
L<C<perlstyle>|perlstyle>.

Sample code should deviate from these standards only when necessary:
during a demonstration of how Perl disregards whitespace, for example,
or to temporarily switch to two-column indentation for an unavoidably
verbose illustration.

You may include comments within example code to further clarify or label
the code's behavior in-line. You may also use comments as placeholder
for code normally present but not relevant to the current topic, like
so:

    while (my $line = <$fh>) {
        #
        # (Do something interesting with $line here.)
        #
    }

Even the simplest code blocks often require the use of example
variables and subroutines, L<whose names you should choose with
care|/Use meaningful variable and symbol names in examples>.

=head3 Inline code and literals

Within a paragraph of text, use C<CE<lt>...E<gt>> when quoting or
referring to any bit of Perl code--even if it is only one character
long.

For instance, when referring within an explanatory paragraph to Perl's
operator for adding two numbers together, you'd write "C<CE<lt>+E<gt>>".

=head3 Function names

Use C<CE<lt>...E<gt>> to render all Perl function names in monospace,
whenever they appear in text.

Unless you need to specifically quote a function call with a list of
arguments, do not follow a function's name in text with a pair of empty
parentheses. That is, when referring in general to Perl's C<print>
function, write it as "C<print>", not "C<print()>".

=head3 Function arguments

Represent functions' expected arguments in all-caps, with no sigils, and
using C<CE<lt>...E<gt>> to render them in monospace. These arguments
should have short names making their nature and purpose clear.
Convention specifies a few ones commonly seen throughout Perl's
documentation:

=over

=item *

EXPR

The "generic" argument: any scalar value, or a Perl expression that
evaluates to one.

=item *

ARRAY

An array, stored in a named variable.

=item *

HASH

A hash, stored in a named variable.

=item *

