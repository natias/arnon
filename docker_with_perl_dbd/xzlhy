
You can also set up your user name and e-mail address. Most people do
this once globally in their F<~/.gitconfig> by doing something like:

  % git config --global user.name "Ævar Arnfjörð Bjarmason"
  % git config --global user.email avarab@gmail.com

However, if you'd like to override that just for perl,
execute something like the following in F<perl>:

  % git config user.email avar@cpan.org

It is also possible to keep C<origin> as a git remote, and add a new
remote for ssh access:

  % git remote add camel git@github.com:Perl/perl5.git

This allows you to update your local repository by pulling from
C<origin>, which is faster and doesn't require you to authenticate, and
to push your changes back with the C<camel> remote:

  % git fetch camel
  % git push camel

The C<fetch> command just updates the C<camel> refs, as the objects
themselves should have been fetched when pulling from C<origin>.

=head2 Working with Github pull requests

Pull requests typically originate from outside of the C<Perl/perl.git>
repository, so if you want to test or work with it locally a vanilla
C<git fetch> from the C<Perl/perl5.git> repository won't fetch it.

However Github does provide a mechanism to fetch a pull request to a
local branch.  They are available on Github remotes under C<pull/>, so
you can use C<< git fetch pull/I<PRID>/head:I<localname> >> to make a
local copy.  eg.  to fetch pull request 9999 to the local branch
C<local-branch-name> run:

  git fetch origin pull/9999/head:local-branch-name

and then:

  git checkout local-branch-name

Note: this branch is not rebased on C<blead>, so instead of the
checkout above, you might want:

  git rebase origin/blead local-branch-name

which rebases C<local-branch-name> on C<blead>, and checks it out.

Alternatively you can configure the remote to fetch all pull requests
as remote-tracking branches.  To do this edit the remote in
F<.git/config>, for example if your github remote is C<origin> you'd
have:

  [remote "origin"]
          url = git@github.com:/Perl/perl5.git
          fetch = +refs/heads/*:refs/remotes/origin/*

Add a line to map the remote pull request branches to remote-tracking
branches:

  [remote "origin"]
          url = git@github.com:/Perl/perl5.git
          fetch = +refs/heads/*:refs/remotes/origin/*
          fetch = +refs/pull/*/head:refs/remotes/origin/pull/*

and then do a fetch as normal:

  git fetch origin

This will create a remote-tracking branch for every pull request, including
closed requests.

To remove those remote-tracking branches, remove the line added above
and prune:

  git fetch -p origin # or git remote prune origin

=head2 Accepting a patch

If you have received a patch file generated using the above section,
you should try out the patch.

First we need to create a temporary new branch for these changes and
switch into it:

 % git checkout -b experimental

Patches that were formatted by C<git format-patch> are applied with
C<git am>:

 % git am 0001-Rename-Leon-Brocard-to-Orange-Brocard.patch
 Applying Rename Leon Brocard to Orange Brocard

Note that some UNIX mail systems can mess with text attachments containing
'From '. This will fix them up:

 % perl -pi -e's/^>From /From /' \
                        0001-Rename-Leon-Brocard-to-Orange-Brocard.patch

If just a raw diff is provided, it is also possible use this two-step
process:

 % git apply bugfix.diff
 % git commit -a -m "Some fixing" \
                            --author="That Guy <that.guy@internets.com>"

Now we can inspect the change:

 % git show HEAD
 commit b1b3dab48344cff6de4087efca3dbd63548ab5e2
 Author: Leon Brocard <acme@astray.com>
 Date:   Fri Dec 19 17:02:59 2008 +0000

   Rename Leon Brocard to Orange Brocard

 diff --git a/AUTHORS b/AUTHORS
 index 293dd70..722c93e 100644
 --- a/AUTHORS
 +++ b/AUTHORS
 @@ -541,7 +541,7 @@ Lars Hecking                 <lhecking@nmrc.ucc.ie>
  Laszlo Molnar                  <laszlo.molnar@eth.ericsson.se>
  Leif Huhn                      <leif@hale.dkstat.com>
  Len Johnson                    <lenjay@ibm.net>
 -Leon Brocard                   <acme@astray.com>
 +Orange Brocard                 <acme@astray.com>
  Les Peters                     <lpeters@aol.net>
  Lesley Binks                   <lesley.binks@gmail.com>
  Lincoln D. Stein               <lstein@cshl.org>

If you are a committer to Perl and you think the patch is good, you can
then merge it into blead then push it out to the main repository:

  % git checkout blead
  % git merge experimental
  % git push origin blead

If you want to delete your temporary branch, you may do so with:

 % git checkout blead
 % git branch -d experimental
 error: The branch 'experimental' is not an ancestor of your current
 HEAD.  If you are sure you want to delete it, run 'git branch -D
 experimental'.
 % git branch -D experimental
 Deleted branch experimental.

=head2 Committing to blead

The 'blead' branch will become the next production release of Perl.

Before pushing I<any> local change to blead, it's incredibly important
that you do a few things, lest other committers come after you with
pitchforks and torches:

=over

=item *

Make sure you have a good commit message. See L<perlhack/Commit
message> for details.

=item *

Run the test suite. You might not think that one typo fix would break a
test file. You'd be wrong. Here's an example of where not running the
suite caused problems. A patch was submitted that added a couple of
tests to an existing F<.t>. It couldn't possibly affect anything else, so
no need to test beyond the single affected F<.t>, right?  But, the
submitter's email address had changed since the last of their
submissions, and this caused other tests to fail. Running the test
target given in the next item would have caught this problem.

=item *

If you don't run the full test suite, at least C<make test_porting>.
This will run basic sanity checks. To see which sanity checks, have a
look in F<t/porting>.

=item *

If you make any changes that affect miniperl or core routines that have
different code paths for miniperl, be sure to run C<make minitest>.
This will catch problems that even the full test suite will not catch
because it runs a subset of tests under miniperl rather than perl.

=back

=head2 On merging and rebasing

Simple, one-off commits pushed to the 'blead' branch should be simple
commits that apply cleanly.  In other words, you should make sure your
work is committed against the current position of blead, so that you can
push back to the master repository without merging.

Sometimes, blead will move while you're building or testing your
changes.  When this happens, your push will be rejected with a message
like this:

 To ssh://perl5.git.perl.org/perl.git
  ! [rejected]        blead -> blead (non-fast-forward)
 error: failed to push some refs to 'ssh://perl5.git.perl.org/perl.git'
 To prevent you from losing history, non-fast-forward updates were
 rejected Merge the remote changes (e.g. 'git pull') before pushing
 again.  See the 'Note about fast-forwards' section of 'git push --help'
 for details.

When this happens, you can just I<rebase> your work against the new
position of blead, like this (assuming your remote for the master
repository is "p5p"):

  % git fetch p5p
  % git rebase p5p/blead

You will see your commits being re-applied, and you will then be able to
push safely.  More information about rebasing can be found in the
documentation for the git-rebase(1) command.

For larger sets of commits that only make sense together, or that would
benefit from a summary of the set's purpose, you should use a merge
commit.  You should perform your work on a L<topic branch|/Topic
branches and rewriting history>, which you should regularly rebase
against blead to ensure that your code is not broken by blead moving.
When you have finished your work, please perform a final rebase and
test.  Linear history is something that gets lost with every
commit on blead, but a final rebase makes the history linear
again, making it easier for future maintainers to see what has
happened.  Rebase as follows (assuming your work was on the
branch C<< committer/somework >>):

  % git checkout committer/somework
  % git rebase blead

Then you can merge it into master like this:

  % git checkout blead
  % git merge --no-ff --no-commit committer/somework
  % git commit -a

The switches above deserve explanation.  C<--no-ff> indicates that even
if all your work can be applied linearly against blead, a merge commit
should still be prepared.  This ensures that all your work will be shown
as a side branch, with all its commits merged into the mainstream blead
by the merge commit.

C<--no-commit> means that the merge commit will be I<prepared> but not
I<committed>.  The commit is then actually performed when you run the
next command, which will bring up your editor to describe the commit.
Without C<--no-commit>, the commit would be made with nearly no useful
message, which would greatly diminish the value of the merge commit as a
placeholder for the work's description.

When describing the merge commit, explain the purpose of the branch, and
keep in mind that this description will probably be used by the
eventual release engineer when reviewing the next perldelta document.

If the subsequent I<push> fails then you must be careful on how you I<rebase>.
If you use

  % git rebase p5p/blead

or

  % git pull --rebase

then your carefully created merge commit will be lost! To avoid this you
can use:

  % git fetch p5p
  % git rebase --rebase-merges p5p/blead

This will recreate your merge commit.

(Should you be stuck with an older version of git (prior to 2.18), then
C<git rebase> will not have the C<--rebase-merges> switch, instead you
have to use the C<--preserve-merges> switch.)

=head2 Committing to maintenance versions

Maintenance versions should only be altered to add critical bug fixes,
see L<perlpolicy>.

To commit to a maintenance version of perl, you need to create a local
tracking branch:

  % git checkout --track -b maint-5.005 origin/maint-5.005

This creates a local branch named C<maint-5.005>, which tracks the
remote branch C<origin/maint-5.005>. Then you can pull, commit, merge
and push as before.

You can also cherry-pick commits from blead and another branch, by
using the C<git cherry-pick> command. It is recommended to use the
B<-x> option to C<git cherry-pick> in order to record the SHA1 of the
original commit in the new commit message.

Before pushing any change to a maint version, make sure you've
satisfied the steps in L</Committing to blead> above.

=head2 Using a smoke-me branch to test changes

Sometimes a change affects code paths which you cannot test on the OSes
which are directly available to you and it would be wise to have users
on other OSes test the change before you commit it to blead.

Fortunately, there is a way to get your change smoke-tested on various
OSes: push it to a "smoke-me" branch and wait for certain automated
smoke-testers to report the results from their OSes.
A "smoke-me" branch is identified by the branch name: specifically, as
seen on github.com it must be a local branch whose first name
component is precisely C<smoke-me>.

The procedure for doing this is roughly as follows (using the example of
tonyc's smoke-me branch called win32stat):

First, make a local branch and switch to it:

  % git checkout -b win32stat

Make some changes, build perl and test your changes, then commit them to
your local branch. Then push your local branch to a remote smoke-me
branch:

  % git push origin win32stat:smoke-me/tonyc/win32stat

Now you can switch back to blead locally:

  % git checkout blead

and continue working on other things while you wait a day or two,
keeping an eye on the results reported for your C<smoke-me> branch at
L<https://perl.develop-help.com/?b=smoke-me/tonyc/win32state>.

If all is well then update your blead branch:

  % git pull

then checkout your smoke-me branch once more and rebase it on blead:

  % git rebase blead win32stat

Now switch back to blead and merge your smoke-me branch into it:

  % git checkout blead
  % git merge win32stat

As described earlier, if there are many changes on your smoke-me branch
then you should prepare a merge commit in which to give an overview of
those changes by using the following command instead of the last
command above:

  % git merge win32stat --no-ff --no-commit

You should now build perl and test your (merged) changes one last time
(ideally run the whole test suite, but failing that at least run the
F<t/porting/*.t> tests) before pushing your changes as usual:

  % git push origin blead

Finally, you should then delete the remote smoke-me branch:

  % git push origin :smoke-me/tonyc/win32stat

(which is likely to produce a warning like this, which can be ignored:

 remote: fatal: ambiguous argument
                                  'refs/heads/smoke-me/tonyc/win32stat':
 unknown revision or path not in the working tree.
 remote: Use '--' to separate paths from revisions

) and then delete your local branch:

  % git branch -d win32stat
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  usr/local/lib/perl5/5.40.0/pod/perlglossary.pod                                                     0000644 0000000 0000000 00000414712 14714567415 017533  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        
=encoding utf8

=head1 NAME

perlglossary - Perl Glossary

=head1 VERSION

version 5.20240218

=head1 DESCRIPTION

A glossary of terms (technical and otherwise) used in the Perl
documentation, derived from the Glossary of I<Programming
Perl>, Fourth Edition.  Words or phrases in bold are defined elsewhere in
this glossary.

Other useful sources include the Unicode Glossary L<http://unicode.org/glossary/>,
the Free On-Line Dictionary of Computing L<http://foldoc.org/>,
the Jargon File L<http://catb.org/~esr/jargon/>,
and Wikipedia L<http://www.wikipedia.org/>.

=head2 A

=over 4

=item accessor methods

A B<X<accessor methods, defined>X<methods, accessor>method> used to
indirectly inspect or update an B<object>’s state (its B<instance
variables>).

=item actual arguments

The B<X<actual arguments>X<arguments, actual>scalar values> that you supply
to a B<function> or B<subroutine> when you call it. For instance, when you
call C<power("puff")>, the string C<"puff"> is the actual argument. See also
B<argument> and B<formal arguments>.

=item address operator

Some X<address operator>languages work directly with the memory addresses of
values, but this can be like playing with fire. Perl provides a set of
asbestos gloves for handling all memory management. The closest to an
address operator in Perl is the backslash operator, but it gives you a
B<hard reference>, which is much safer than a memory address.

=item algorithm

A X<algorithms (term)>well-defined sequence of steps, explained clearly
enough that even a computer could do them.

=item alias

A X<aliases, defined>nickname for something, which behaves in all ways as
though you’d used the original name instead of the nickname. Temporary
aliases are implicitly created in the loop variable for C<foreach> loops, in
the C<$_> variable for C<map> or C<grep> operators, in C<$a> and C<$b>
during C<sort>’s comparison function, and in each element of C<@_> for the
B<actual arguments> of a subroutine call. Permanent aliases are explicitly
created in B<packages> by B<importing> symbols or by assignment to
B<typeglobs>. Lexically scoped aliases for package variables are explicitly
created by the C<our> declaration.

=item alphabetic

The X<alphabetic sort>sort of characters we put into words. In Unicode, this
is all letters including all ideographs and certain diacritics, letter
numbers like Roman numerals, and various combining marks.

=item alternatives

A X<alternative characters>list of possible choices from which you may
select only one, as in, “Would you like door A, B, or C?” Alternatives in
regular expressions are separated with a single vertical bar: C<|>.
Alternatives in normal Perl expressions are separated with a double vertical
bar: C<||>. Logical alternatives in B<Boolean> expressions are separated
with either C<||> or C<or>.

=item anonymous

Used to X<anonymous referents>X<referents, anonymous>describe a B<referent>
that is not directly accessible through a named B<variable>. Such a referent
must be indirectly accessible through at least one B<hard reference>. When
the last hard reference goes away, the anonymous referent is destroyed
without pity.

=item application

A X<applications (term)>bigger, fancier sort of B<program> with a fancier
name so people don’t realize they are using a program.

=item architecture

The kind of X<architecture>computer you’re working on, where one “kind of
computer” means all those computers sharing a compatible machine language.
Since Perl programs are (typically) simple text files, not executable
images, a Perl program is much less sensitive to the architecture it’s
running on than programs in other languages, such as C, that are B<compiled>
into machine code. See also B<platform> and B<operating system>.

=item argument

A X<arguments, defined>piece of data supplied to a B<program>,
B<subroutine>, B<function>, or B<method> to tell it what it’s supposed to
do. Also called a “parameter”.

=item ARGV

The name of the X<ARGV filehandle>array containing the B<argument> B<vector>
from the command line. If you use the empty C<E<lt>E<gt>> operator, C<ARGV>
is the name of both the B<filehandle> used to traverse the arguments and the
B<scalar> containing the name of the current input file.

=item arithmetical operator

A B<X<arithmetic operators, about>symbol> such as C<+> or C</> that tells
Perl to do the arithmetic you were supposed to learn in grade school.

=item array

An X<arrays, defined>ordered sequence of B<values>, stored such that you can
easily access any of the values using an I<integer subscript> that specifies
the value’s B<offset> in the sequence.

=item array context

An archaic X<array context>expression for what is more correctly referred to
as B<list context>.

=item Artistic License

The open X<Artistic License>source license that X<Wall, Larry>Larry Wall
created for Perl, maximizing Perl’s usefulness, availability, and
modifiability. The current version is 2. (L<http://www.opensource.org/licenses/artistic-license.php>).

=item ASCII

The X<ASCII (American Standard Code for Information Interchange)>X<American
Standard Code for Information Interchange (ASCII)>American Standard Code for
Information Interchange (a 7-bit character set adequate only for poorly
representing English text). Often used loosely to describe the lowest 128
values of the various ISO-8859-X character sets, a bunch of mutually
incompatible 8-bit codes best described as half ASCII. See also B<Unicode>.

=item assertion

A X<assertions (in regexes), defined>X<regular expressions, assertions
in>component of a B<regular expression> that must be true for the pattern to
match but does not necessarily match any characters itself. Often used
specifically to mean a B<zero-width> assertion.

=item assignment

An X<assignments, defined>B<operator> whose assigned mission in life is to
change the value of a B<variable>.

=item assignment operator

Either a X<assignment operators, about>regular B<assignment> or a compound
B<operator> composed of an ordinary assignment and some other operator, that
changes the value of a variable in place; that is, relative to its old
value. For example, C<$a += 2> adds C<2> to C<$a>.

=item associative array

See B<hash>. X<associative arrays>Please. The term associative array is the
old Perl 4 term for a B<hash>. Some languages call it a dictionary.

=item associativity

Determines X<associativity>whether you do the left B<operator> first or the
right B<operator> first when you have “A B<operator> B B<operator> C”, and
the two operators are of the same precedence. Operators like C<+> are left
associative, while operators like C<**> are right associative. See Camel
chapter 3, “Unary and Binary Operators” for a list of operators and their
associativity.

=item asynchronous

Said of X<asynchronous event processing>events or activities whose relative
temporal ordering is indeterminate because too many things are going on at
once. Hence, an asynchronous event is one you didn’t know when to expect.

=item atom

A B<regular X<atoms>expression> component potentially matching a
B<substring> containing one or more characters and treated as an indivisible
syntactic unit by any following B<quantifier>. (Contrast with an
B<assertion> that matches something of B<zero width> and may not be quantified.)

=item atomic operation

When X<atomic operation>Democritus gave the word “atom” to the indivisible
bits of matter, he meant literally something that could not be cut: I<ἀ->
(not) + I<-τομος> (cuttable). An atomic operation is an action that can’t be
interrupted, not one forbidden in a nuclear-free zone.

=item attribute

A new X<attribute feature>feature that allows the declaration of
B<variables> and B<subroutines> with modifiers, as in C<sub foo : locked
method>. Also another name for an B<instance variable> of an B<object>.

=item autogeneration

A X<autogeneration, about>feature of B<operator overloading> of B<objects>,
whereby the behavior of certain B<operators> can be reasonably deduced using
more fundamental operators. This assumes that the overloaded operators will
often have the same relationships as the regular operators. See Camel
chapter 13, “Overloading”.

=item autoincrement

To X<autoincrement (term)>add one to something automatically, hence the name
of the C<++> operator. To instead subtract one from something automatically
is known as an “autodecrement”.

=item autoload

To X<autoloading, defined>load on demand. (Also called “lazy” loading.)
Specifically, to call an C<AUTOLOAD> subroutine on behalf of an undefined
subroutine.

=item autosplit

To X<autosplit (term)>split a string automatically, as the I<–a> B<switch>
does when running under I<–p> or I<–n> in order to emulate B<awk>. (See also
the C<AutoSplit>X<AutoSplit module> module, which has nothing to do with the
C<–a> switch but a lot to do with autoloading.)

=item autovivification

A X<autovivification>Graeco-Roman word meaning “to bring oneself to life”.
In Perl, storage locations (B<lvalues>) spontaneously generate themselves as
needed, including the creation of any B<hard reference> values to point to
the next level of storage. The assignment C<$a[5][5][5][5][5] = "quintet">
potentially creates five scalar storage locations, plus four references (in
the first four scalar locations) pointing to four new anonymous arrays (to
hold the last four scalar locations). But the point of autovivification is
that you don’t have to worry about it.

=item AV

Short X<AV (array value)>X<array value (AV)>X<values, array>for “array
value”, which refers to one of Perl’s internal data types that holds an
B<array>. The C<AV> type is a subclass of B<SV>.

=item awk

Descriptive X<awk (editing term)>editing term—short for “awkward”. Also
coincidentally refers to a venerable text-processing language from which
Perl derived some of its high-level ideas.

=back

=head2 B

=over 4

=item backreference

A X<backreferences, about>X<references, backreferences>substring B<captured>
by a subpattern within unadorned parentheses in a B<regex>. Backslashed
decimal numbers (C<\1>, C<\2>, etc.) later in the same pattern refer back to
the corresponding subpattern in the current match. Outside the pattern, the
numbered variables (C<$1>, C<$2>, etc.) continue to refer to these same
values, as long as the pattern was the last successful match of the current
B<dynamic scope>.

=item backtracking

The X<backtracking>practice of saying, “If I had to do it all over, I’d do
it differently,” and then actually going back and doing it all over
differently. Mathematically speaking, it’s returning from an unsuccessful
recursion on a tree of possibilities. Perl backtracks when it attempts to
match patterns with a B<regular expression>, and its earlier attempts don’t
pan out. See the section “The Little Engine That /Couldn(n’t)” in Camel
chapter 5, “Pattern Matching”.

=item backward compatibility

Means X<backward compatibility, defined>you can still run your old program
because we didn’t break any of the features or bugs it was relying on.

=item bareword

A word X<barewords, about>sufficiently ambiguous to be deemed illegal under
C<use strict 'subs'>. In the absence of that stricture, a bareword is
treated as if quotes were around it.

=item base class

A X<base classes>X<classes, base>generic B<object> type; that is, a B<class>
from which other, more specific classes are derived genetically by
B<inheritance>. Also called aX<superclasses>X<classes, superclasses>
“superclass” by people who respect their ancestors.

=item big-endian

From X<big–endian, defined>X<endianness, big–endian>Swift: someone who
eats eggs big end first. Also used of computers that store the most
significant B<byte> of a word at a lower byte address than the least
significant byte. Often considered superior to little-endian machines. See
also B<little-endian>.

=item binary

Having X<binary (term)>to do with numbers represented in base 2. That means
there’s basically two numbers: 0 and 1. Also used to describe a file of
“nontext”, presumably because such a file makes full use of all the binary
bits in its bytes. With the advent of B<Unicode>, this distinction, already
suspect, loses even more of its meaning.

=item binary operator

An B<X<binary operators, about>operator> that takes two B<operands>.

=item bind

To X<bind (term)>assign a specific B<network address> to a B<socket>.

=item bit

An X<bits, defined>integer in the range from 0 to 1, inclusive. The smallest
possible unit of information storage. An eighth of a B<byte> or of a dollar.
(The term “Pieces of Eight” comes from being able to split the old Spanish
dollar into 8 bits, each of which still counted for money. That’s why a 25-
cent piece today is still “two bits”.)

=item bit shift

The X<bit–shift operators, defined>movement of bits left or right in a
computer word, which has the effect of multiplying or dividing by a
power of 2.

=item bit string

A X<bit string>sequence of B<bits> that is actually being thought of as a
sequence of bits, for once.

=item bless

In X<bless function, about>X<bless (term)>corporate life, to grant official
approval to a thing, as in, “The VP of Engineering has blessed our
WebCruncher project.” Similarly, in Perl, to grant official approval to a
B<referent> so that it can function as an B<object>, such as a WebCruncher
object. See the C<bless> function in Camel chapter 27, “Functions”.

=item block

What X<blocks, defined>a B<process> does when it has to wait for something:
“My process blocked waiting for the disk.” As an unrelated noun, it refers
to a large chunk of data, of a size that the B<operating system> likes to
deal with (normally a power of 2 such as 512 or 8192). Typically refers to
a chunk of data that’s coming from or going to a disk file.

=item BLOCK

A X<BLOCK construct, about>X<constructs, BLOCK>syntactic construct
consisting of a sequence of Perl B<statements> that is delimited by braces.
The C<if> and C<while> statements are defined in terms of I<C<BLOCK>>s, for
instance. Sometimes we also say “block” to mean a lexical scope; that is, a
sequence of statements that acts like a I<C<BLOCK>>, such as within an
C<eval> or a file, even though the statements aren’t delimited by braces.

=item block buffering

A X<block buffering>X<buffering, block>method of making input and output
efficient by passing one B<block> at a time. By default, Perl does block
buffering to disk files. See B<buffer> and B<command buffering>.

=item Boolean

A X<Boolean values>X<values, Boolean>value that is either B<true> or
B<false>.

=item Boolean context

A X<Boolean context, about>X<context, Boolean>special kind of B<scalar
context> used in conditionals to decide whether the B<scalar value> returned
by an expression is B<true> or B<false>. Does not evaluate as either a
string or a number. See B<context>.

=item breakpoint

A X<breakpoints, defined>spot in your program where you’ve told the debugger
to stop B<execution> so you can poke around and see whether anything is
wrong yet.

=item broadcast

To X<broadcast (networking term)>send a B<datagram> to multiple destinations
simultaneously.

=item BSD

A X<BSD (Berkeley Standard Distribution)>X<Berkeley Standard Distribution
(BSD)>psychoactive drug, popular in the ’80s, probably developed at UC
Berkeley or thereabouts. Similar in many ways to the prescription-only
medication called “System V”, but infinitely more useful. (Or, at least,
more fun.) The full chemical name is “Berkeley Standard Distribution”.

=item bucket

A X<buckets (term)>location in a B<hash table> containing (potentially)
multiple entries whose keys “hash” to the same hash value according to its
hash function. (As internal policy, you don’t have to worry about it unless
you’re into internals, or policy.)

=item buffer

A X<buffers, defined>temporary holding location for data. Data that are
B<Block buffering> means that the data is passed on to its destination
whenever the buffer is full. B<Line buffering> means that it’s passed on
whenever a complete line is received. B<Command buffering> means that it’s
passed every time you do a C<print> command (or equivalent). If your output
is unbuffered, the system processes it one byte at a time without the use of
a holding area. This can be rather inefficient.

=item built-in

A B<X<built–in functions, about>function> that is predefined in the
language. Even when hidden by B<overriding>, you can always get at a built-
in function by B<qualifying> its name with the C<CORE::> pseudopackage.

=item bundle

A X<bundles (term)>group of related modules on B<CPAN>. (Also sometimes
refers to a group of command-line switches grouped into one B<switch
cluster>.)

=item byte

A X<bytes (term)>piece of data worth eight B<bits> in most places.

=item bytecode

A pidgin-like lingo spoken among ’droids when they don’t wish to reveal
their orientation (see B<endian>). Named after some similar languages spoken
(for similar reasons) between compilers and interpreters in the late 20ᵗʰ
century. These languages are characterized by representing everything as a
nonarchitecture-dependent sequence of bytes.

=back

=head2 C

=over 4

=item C

A X<C language, about>language beloved by many for its inside-out B<type>
definitions, inscrutable B<precedence> rules, and heavy B<overloading> of
the function-call mechanism. (Well, actually, people first switched to C
because they found lowercase identifiers easier to read than upper.) Perl is
written in C, so it’s not surprising that Perl borrowed a few ideas from it.

=item cache

A X<cache (term)>data repository. Instead of computing expensive answers
several times, compute it once and save the result.

=item callback

A B<X<callbacks>handler> that you register with some other part of your
program in the hope that the other part of your program will B<trigger> your
handler when some event of interest transpires.

=item call by reference

An B<argument>-passing X<call by reference>X<references, call by reference
mechanism>mechanism in which the B<formal arguments> refer directly to the
B<actual arguments>, and the B<subroutine> can change the actual arguments
by changing the formal arguments. That is, the formal argument is an
B<alias> for the actual argument. See also B<call by value>.

=item call by value

An B<X<call by value>argument>-passing mechanism in which the B<formal
arguments> refer to a copy of the B<actual arguments>, and the
B<subroutine> cannot change the actual arguments by changing the formal
arguments. See also B<call by reference>.

=item canonical

Reduced X<canonical (term)>to a standard form to facilitate comparison.

=item capture variables

The X<capture variables>X<variables, capture>variables—such as C<$1> and
C<$2>, and C<%+> and C<%– >—that hold the text remembered in a pattern
match. See Camel chapter 5, “Pattern Matching”.

=item capturing

The X<capturing in pattern matching>X<subpatterns, capturing>X<pattern
matching, capturing in>use of parentheses around a B<subpattern> in a
B<regular expression> to store the matched B<substring> as a
B<backreference>. (Captured strings are also returned as a list in B<list
context>.) See Camel chapter 5, “Pattern Matching”.

=item cargo cult

Copying X<cargo cult>and pasting code without understanding it, while
superstitiously believing in its value. This term originated from
preindustrial cultures dealing with the detritus of explorers and colonizers
of technologically advanced cultures. See I<The Gods Must Be Crazy>.

=item case

A X<case (character)>X<characters, case considerations>property of certain
characters. Originally, typesetter stored capital letters in the upper of
two cases and small letters in the lower one. Unicode recognizes three
cases: B<lowercase> (B<character property> C<\p{lower}>), B<titlecase>
(C<\p{title}>), and B<uppercase> (C<\p{upper}>). A fourth casemapping called
B<foldcase> is not itself a distinct case, but it is used internally to
implement B<casefolding>. Not all letters have case, and some nonletters
have case.

=item casefolding

Comparing X<casefolding>or matching a string case-insensitively. In Perl, it
is implemented with the C</i> pattern modifier, the C<fc> function, and the
C<\F> double-quote translation escape.

=item casemapping

The X<casemapping>process of converting a string to one of the four Unicode
B<casemaps>; in Perl, it is implemented with the C<fc>, C<lc>, C<ucfirst>,
and C<uc> functions.

=item character

The X<characters, defined>smallest individual element of a string. Computers
store characters as integers, but Perl lets you operate on them as text. The
integer used to represent a particular character is called that character’s
B<codepoint>.

=item character class

A X<character classes, about>X<classes, character>square-bracketed list of
characters used in a B<regular expression> to indicate that any character
of the set may occur at a given point. Loosely, any predefined set of
characters so used.

=item character property

A X<character property>predefined B<character class> matchable by the C<\p>
or C<\P> B<metasymbol>. B<Unicode> defines hundreds of standard properties
for every possible codepoint, and Perl defines a few of its own, too.

=item circumfix operator

An X<circumfix operator>B<operator> that surrounds its B<operand>, like the
angle operator, or parentheses, or a hug.

=item class

A X<classes, defined>user-defined B<type>, implemented in Perl via a
B<package> that provides (either directly or by inheritance) B<methods>
(that is, B<subroutines>) to handle B<instances> of the class (its
B<objects>). See also B<inheritance>.

=item class method

A B<X<class methods>X<methods, class>method> whose B<invocant> is a
B<package> name, not an B<object> reference. A method associated with the
class as a whole. Also see B<instance method>.

=item client

In X<clients, defined>X<processes, client>networking, a B<process> that
initiates contact with a B<server> process in order to exchange data and
perhaps receive a service.

=item closure

An B<X<closure subroutines>X<subroutines, closure>anonymous> subroutine
that, when a reference to it is generated at runtime, keeps track of the
identities of externally visible B<lexical variables>, even after those
lexical variables have supposedly gone out of B<scope>. They’re called
“closures” because this sort of behavior gives mathematicians a sense of
closure.

=item cluster

A X<clusters, defined>X<subpatterns, cluster>parenthesized B<subpattern>
used to group parts of a B<regular expression> into a single B<atom>.

=item CODE

The X<CODE (ref function)>X<ref function, about>word returned by the C<ref>
function when you apply it to a reference to a subroutine. See also B<CV>.

=item code generator

A X<code generators, defined>system that writes code for you in a low-level
language, such as code to implement the backend of a compiler. See B<program
generator>.

=item codepoint

The X<codepoints, about>integer a computer uses to represent a given
character. ASCII codepoints are in the range 0 to 127; Unicode codepoints
are in the range 0 to 0x10_FFFF; and Perl codepoints are in the range 0 to
2³²−1 or 0 to 2⁶⁴−1, depending on your native integer size. In Perl Culture,
sometimes called B<ordinals>.

=item code subpattern

A B<X<code subpatterns>X<subpatterns, code>regular expression> subpattern
whose real purpose is to execute some Perl code—for example, the C<(?{...})>
and C<(??{...})> subpatterns.

=item collating sequence

The X<collating sequence>X<collating sequence>order into which B<characters>
sort. This is used by B<string> comparison routines to decide, for example,
where in this glossary to put “collating sequence”.

=item co-maintainer

