In F<patchlevel.h>, this is referred to as C<PERL_REVISION>.

=item C<rm>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the rm program.  After Configure runs,
the value is reset to a plain C<rm> and is not useful.

=item C<rm_try>

From F<Unix.U>:

This is a cleanup variable for try test programs.
Internal Configure use only.

=item C<rmail>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<run>

From F<Cross.U>:

This variable contains the command used by Configure
to copy and execute a cross-compiled executable in the
target host.  Useful and available only during Perl build.
Empty string '' if not cross-compiling.

=item C<runnm>

From F<usenm.U>:

This variable contains C<true> or C<false> depending whether the
nm extraction should be performed or not, according to the value
of usenm and the flags on the Configure command line.

=back

=head2 s

=over 4

=item C<sched_yield>

From F<d_pthread_y.U>:

This variable defines the way to yield the execution
of the current thread.

=item C<scriptdir>

From F<scriptdir.U>:

This variable holds the name of the directory in which the user wants
to put publicly scripts for the package in question.  It is either
the same directory as for binaries, or a special one that can be
mounted across different architectures, like F</usr/share>. Programs
must be prepared to deal with F<~name> expansion.

=item C<scriptdirexp>

From F<scriptdir.U>:

This variable is the same as scriptdir, but is filename expanded
at configuration time, for programs not wanting to bother with it.

=item C<sed>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the sed program.  After Configure runs,
the value is reset to a plain C<sed> and is not useful.

=item C<seedfunc>

From F<randfunc.U>:

Indicates the random number generating seed function.
Values include srand48, srandom, and srand.

=item C<selectminbits>

From F<selectminbits.U>:

This variable holds the minimum number of bits operated by select.
That is, if you do select(n, ...), how many bits at least will be
cleared in the masks if some activity is detected.  Usually this
is either n or 32*ceil(F<n/32>), especially many little-endians do
the latter.  This is only useful if you have select(), naturally.

=item C<selecttype>

From F<selecttype.U>:

This variable holds the type used for the 2nd, 3rd, and 4th
arguments to select.  Usually, this is C<fd_set *>, if C<HAS_FD_SET>
is defined, and C<int *> otherwise.  This is only useful if you
have select(), naturally.

=item C<sendmail>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<setgrent_r_proto>

From F<d_setgrent_r.U>:

This variable encodes the prototype of setgrent_r.
It is zero if d_setgrent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_setgrent_r
is defined.

=item C<sethostent_r_proto>

From F<d_sethostent_r.U>:

This variable encodes the prototype of sethostent_r.
It is zero if d_sethostent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_sethostent_r
is defined.

=item C<setlocale_r_proto>

From F<d_setlocale_r.U>:

This variable encodes the prototype of setlocale_r.
It is zero if d_setlocale_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_setlocale_r
is defined.

=item C<setnetent_r_proto>

From F<d_setnetent_r.U>:

This variable encodes the prototype of setnetent_r.
It is zero if d_setnetent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_setnetent_r
is defined.

=item C<setprotoent_r_proto>

From F<d_setprotoent_r.U>:

This variable encodes the prototype of setprotoent_r.
It is zero if d_setprotoent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_setprotoent_r
is defined.

=item C<setpwent_r_proto>

From F<d_setpwent_r.U>:

This variable encodes the prototype of setpwent_r.
It is zero if d_setpwent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_setpwent_r
is defined.

=item C<setservent_r_proto>

From F<d_setservent_r.U>:

This variable encodes the prototype of setservent_r.
It is zero if d_setservent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_setservent_r
is defined.

=item C<sGMTIME_max>

From F<time_size.U>:

This variable defines the maximum value of the time_t offset that
the system function gmtime () accepts

=item C<sGMTIME_min>

From F<time_size.U>:

This variable defines the minimum value of the time_t offset that
the system function gmtime () accepts

=item C<sh>

From F<sh.U>:

This variable contains the full pathname of the shell used
on this system to execute Bourne shell scripts.  Usually, this will be
F</bin/sh>, though it's possible that some systems will have F</bin/ksh>,
F</bin/pdksh>, F</bin/ash>, F</bin/bash>, or even something such as
D:F</bin/sh.exe>.
This unit comes before F<Options.U>, so you can't set sh with a C<-D>
option, though you can override this (and startsh)
with C<-O -Dsh=F</bin/whatever> -Dstartsh=whatever>

=item C<shar>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<sharpbang>

From F<spitshell.U>:

This variable contains the string #! if this system supports that
construct.

=item C<shmattype>

From F<d_shmat.U>:

This symbol contains the type of pointer returned by shmat().
It can be C<void *> or C<char *>.

=item C<shortsize>

From F<intsize.U>:

This variable contains the value of the C<SHORTSIZE> symbol which
indicates to the C program how many bytes there are in a short.

=item C<shrpenv>

From F<libperl.U>:

If the user builds a shared F<libperl.so>, then we need to tell the
C<perl> executable where it will be able to find the installed F<libperl.so>.
One way to do this on some systems is to set the environment variable
C<LD_RUN_PATH> to the directory that will be the final location of the
shared F<libperl.so>.  The makefile can use this with something like
$shrpenv $(C<CC>) -o perl F<perlmain.o> $libperl $libs
Typical values are
shrpenv="env C<LD_RUN_PATH>=F<$archlibexp/C<CORE>>"
or
shrpenv=''
See the main perl F<Makefile.SH> for actual working usage.

Alternatively, we might be able to use a command line option such
as -R F<$archlibexp/C<CORE>> (Solaris) or -Wl,-rpath
F<$archlibexp/C<CORE>> (Linux).

=item C<shsharp>

From F<spitshell.U>:

This variable tells further Configure units whether your sh can
handle # comments.

=item C<sig_count>

From F<sig_name.U>:

This variable holds a number larger than the largest valid
signal number.  This is usually the same as the C<NSIG> macro.

=item C<sig_name>

From F<sig_name.U>:

This variable holds the signal names, space separated. The leading
C<SIG> in signal name is removed.  A C<ZERO> is prepended to the list.
This is currently not used, sig_name_init is used instead.

=item C<sig_name_init>

From F<sig_name.U>:

This variable holds the signal names, enclosed in double quotes and
separated by commas, suitable for use in the C<SIG_NAME> definition
below.  A C<ZERO> is prepended to the list, and the list is
terminated with a plain 0.  The leading C<SIG> in signal names
is removed. See sig_num.

=item C<sig_num>

From F<sig_name.U>:

This variable holds the signal numbers, space separated. A C<ZERO> is
prepended to the list (corresponding to the fake C<SIGZERO>).
Those numbers correspond to  the value of the signal listed
in the same place within the sig_name list.
This is currently not used, sig_num_init is used instead.

=item C<sig_num_init>

From F<sig_name.U>:

This variable holds the signal numbers, enclosed in double quotes and
separated by commas, suitable for use in the C<SIG_NUM> definition
below.  A C<ZERO> is prepended to the list, and the list is
terminated with a plain 0.

=item C<sig_size>

From F<sig_name.U>:

This variable contains the number of elements of the sig_name
and sig_num arrays.

=item C<signal_t>

From F<d_voidsig.U>:

This variable holds the type of the signal handler (void or int).

=item C<sitearch>

From F<sitearch.U>:

This variable contains the eventual value of the C<SITEARCH> symbol,
which is the name of the private library for this package.  It may
have a F<~> on the front. It is up to the makefile to eventually create
this directory while performing installation (with F<~> substitution).
The standard distribution will put nothing in this directory.
After perl has been installed, users may install their own local
architecture-dependent modules in this directory with
MakeMaker F<Makefile.PL>
or equivalent.  See C<INSTALL> for details.

=item C<sitearchexp>

From F<sitearch.U>:

This variable is the F<~name> expanded version of sitearch, so that you
may use it directly in Makefiles or shell scripts.

=item C<sitebin>

From F<sitebin.U>:

This variable holds the name of the directory in which the user wants
to put add-on publicly executable files for the package in question.  It
is most often a local directory such as F</usr/local/bin>. Programs using
this variable must be prepared to deal with F<~name> substitution.
The standard distribution will put nothing in this directory.
After perl has been installed, users may install their own local
executables in this directory with
MakeMaker F<Makefile.PL>
or equivalent.  See C<INSTALL> for details.

=item C<sitebinexp>

From F<sitebin.U>:

This is the same as the sitebin variable, but is filename expanded at
configuration time, for use in your makefiles.

=item C<sitehtml1dir>

From F<sitehtml1dir.U>:

This variable contains the name of the directory in which site-specific
html source pages are to be put.  It is the responsibility of the
F<Makefile.SH> to get the value of this into the proper command.
You must be prepared to do the F<~name> expansion yourself.
The standard distribution will put nothing in this directory.
After perl has been installed, users may install their own local
html pages in this directory with
MakeMaker F<Makefile.PL>
or equivalent.  See C<INSTALL> for details.

=item C<sitehtml1direxp>

From F<sitehtml1dir.U>:

This variable is the same as the sitehtml1dir variable, but is filename
expanded at configuration time, for convenient use in makefiles.

=item C<sitehtml3dir>

From F<sitehtml3dir.U>:

This variable contains the name of the directory in which site-specific
library html source pages are to be put.  It is the responsibility of the
F<Makefile.SH> to get the value of this into the proper command.
You must be prepared to do the F<~name> expansion yourself.
The standard distribution will put nothing in this directory.
After perl has been installed, users may install their own local
library html pages in this directory with
MakeMaker F<Makefile.PL>
or equivalent.  See C<INSTALL> for details.

=item C<sitehtml3direxp>

From F<sitehtml3dir.U>:

This variable is the same as the sitehtml3dir variable, but is filename
expanded at configuration time, for convenient use in makefiles.

=item C<sitelib>

From F<sitelib.U>:

This variable contains the eventual value of the C<SITELIB> symbol,
which is the name of the private library for this package.  It may
have a F<~> on the front. It is up to the makefile to eventually create
this directory while performing installation (with F<~> substitution).
The standard distribution will put nothing in this directory.
After perl has been installed, users may install their own local
architecture-independent modules in this directory with
MakeMaker F<Makefile.PL>
or equivalent.  See C<INSTALL> for details.

=item C<sitelib_stem>

From F<sitelib.U>:

This variable is $sitelibexp with any trailing version-specific component
removed.  The elements in inc_version_list (F<inc_version_list.U>) can
be tacked onto this variable to generate a list of directories to search.

=item C<sitelibexp>

From F<sitelib.U>:

This variable is the F<~name> expanded version of sitelib, so that you
may use it directly in Makefiles or shell scripts.

=item C<siteman1dir>

From F<siteman1dir.U>:

This variable contains the name of the directory in which site-specific
manual source pages are to be put.  It is the responsibility of the
F<Makefile.SH> to get the value of this into the proper command.
You must be prepared to do the F<~name> expansion yourself.
The standard distribution will put nothing in this directory.
After perl has been installed, users may install their own local
man1 pages in this directory with
MakeMaker F<Makefile.PL>
or equivalent.  See C<INSTALL> for details.

=item C<siteman1direxp>

From F<siteman1dir.U>:

This variable is the same as the siteman1dir variable, but is filename
expanded at configuration time, for convenient use in makefiles.

=item C<siteman3dir>

From F<siteman3dir.U>:

This variable contains the name of the directory in which site-specific
library man source pages are to be put.  It is the responsibility of the
F<Makefile.SH> to get the value of this into the proper command.
You must be prepared to do the F<~name> expansion yourself.
The standard distribution will put nothing in this directory.
After perl has been installed, users may install their own local
man3 pages in this directory with
MakeMaker F<Makefile.PL>
or equivalent.  See C<INSTALL> for details.

=item C<siteman3direxp>

From F<siteman3dir.U>:

This variable is the same as the siteman3dir variable, but is filename
expanded at configuration time, for convenient use in makefiles.

=item C<siteprefix>

From F<siteprefix.U>:

This variable holds the full absolute path of the directory below
which the user will install add-on packages.
See C<INSTALL> for usage and examples.

=item C<siteprefixexp>

From F<siteprefix.U>:

This variable holds the full absolute path of the directory below
which the user will install add-on packages.  Derived from siteprefix.

=item C<sitescript>

From F<sitescript.U>:

This variable holds the name of the directory in which the user wants
to put add-on publicly executable files for the package in question.  It
is most often a local directory such as F</usr/local/bin>. Programs using
this variable must be prepared to deal with F<~name> substitution.
The standard distribution will put nothing in this directory.
After perl has been installed, users may install their own local
scripts in this directory with
MakeMaker F<Makefile.PL>
or equivalent.  See C<INSTALL> for details.

=item C<sitescriptexp>

From F<sitescript.U>:

This is the same as the sitescript variable, but is filename expanded at
configuration time, for use in your makefiles.

=item C<sizesize>

From F<sizesize.U>:

This variable contains the size of a sizetype in bytes.

=item C<sizetype>

From F<sizetype.U>:

This variable defines sizetype to be something like size_t,
unsigned long, or whatever type is used to declare length
parameters for string functions.

=item C<sleep>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<sLOCALTIME_max>

From F<time_size.U>:

This variable defines the maximum value of the time_t offset that
the system function localtime () accepts

=item C<sLOCALTIME_min>

From F<time_size.U>:

This variable defines the minimum value of the time_t offset that
the system function localtime () accepts

=item C<smail>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<so>

From F<so.U>:

This variable holds the extension used to identify shared libraries
(also known as shared objects) on the system. Usually set to C<so>.

=item C<sockethdr>

From F<d_socket.U>:

This variable has any cpp C<-I> flags needed for socket support.

=item C<socketlib>

From F<d_socket.U>:

This variable has the names of any libraries needed for socket support.

=item C<socksizetype>

From F<socksizetype.U>:

This variable holds the type used for the size argument
for various socket calls like accept.  Usual values include
socklen_t, size_t, and int.

=item C<sort>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the sort program.  After Configure runs,
the value is reset to a plain C<sort> and is not useful.

=item C<spackage>

From F<package.U>:

This variable contains the name of the package being constructed,
with the first letter uppercased, F<i.e>. suitable for starting
sentences.

=item C<spitshell>

From F<spitshell.U>:

This variable contains the command necessary to spit out a runnable
shell on this system.  It is either cat or a grep C<-v> for # comments.

=item C<sPRId64>

From F<quadfio.U>:

This variable, if defined, contains the string used by stdio to
format 64-bit decimal numbers (format C<d>) for output.

=item C<sPRIeldbl>

From F<longdblfio.U>:

This variable, if defined, contains the string used by stdio to
format long doubles (format C<e>) for output.

=item C<sPRIEUldbl>

From F<longdblfio.U>:

This variable, if defined, contains the string used by stdio to
format long doubles (format C<E>) for output.
The C<U> in the name is to separate this from sPRIeldbl so that even
case-blind systems can see the difference.

=item C<sPRIfldbl>

From F<longdblfio.U>:

This variable, if defined, contains the string used by stdio to
format long doubles (format C<f>) for output.

=item C<sPRIFUldbl>

From F<longdblfio.U>:

This variable, if defined, contains the string used by stdio to
format long doubles (format C<F>) for output.
The C<U> in the name is to separate this from sPRIfldbl so that even
case-blind systems can see the difference.

=item C<sPRIgldbl>

From F<longdblfio.U>:

This variable, if defined, contains the string used by stdio to
format long doubles (format C<g>) for output.

=item C<sPRIGUldbl>

From F<longdblfio.U>:

This variable, if defined, contains the string used by stdio to
format long doubles (format C<G>) for output.
The C<U> in the name is to separate this from sPRIgldbl so that even
case-blind systems can see the difference.

=item C<sPRIi64>

From F<quadfio.U>:

This variable, if defined, contains the string used by stdio to
format 64-bit decimal numbers (format C<i>) for output.

=item C<sPRIo64>

From F<quadfio.U>:

This variable, if defined, contains the string used by stdio to
format 64-bit octal numbers (format C<o>) for output.

=item C<sPRIu64>

From F<quadfio.U>:

This variable, if defined, contains the string used by stdio to
format 64-bit unsigned decimal numbers (format C<u>) for output.

=item C<sPRIx64>

From F<quadfio.U>:

This variable, if defined, contains the string used by stdio to
format 64-bit hexadecimal numbers (format C<x>) for output.

=item C<sPRIXU64>

From F<quadfio.U>:

This variable, if defined, contains the string used by stdio to
format 64-bit hExADECimAl numbers (format C<X>) for output.
The C<U> in the name is to separate this from sPRIx64 so that even
case-blind systems can see the difference.

=item C<srand48_r_proto>

From F<d_srand48_r.U>:

This variable encodes the prototype of srand48_r.
It is zero if d_srand48_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_srand48_r
is defined.

=item C<srandom_r_proto>

From F<d_srandom_r.U>:

This variable encodes the prototype of srandom_r.
It is zero if d_srandom_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_srandom_r
is defined.

=item C<src>

From F<src.U>:

This variable holds the (possibly relative) path of the package source.
It is up to the Makefile to use this variable and set C<VPATH> accordingly
to find the sources remotely.  Use $pkgsrc to have an absolute path.

=item C<sSCNfldbl>

From F<longdblfio.U>:

This variable, if defined, contains the string used by stdio to
format long doubles (format C<f>) for input.

=item C<ssizetype>

From F<ssizetype.U>:

This variable defines ssizetype to be something like ssize_t,
long or int.  It is used by functions that return a count
of bytes or an error condition.  It must be a signed type.
We will pick a type such that sizeof(SSize_t) == sizeof(Size_t).

=item C<st_dev_sign>

From F<st_dev_def.U>:

This variable contains the signedness of struct stat's st_dev.
1 for unsigned, -1 for signed.

=item C<st_dev_size>

From F<st_dev_def.U>:

This variable contains the size of struct stat's st_dev in bytes.

=item C<st_ino_sign>

From F<st_ino_def.U>:

This variable contains the signedness of struct stat's st_ino.
1 for unsigned, -1 for signed.

=item C<st_ino_size>

From F<st_ino_def.U>:

This variable contains the size of struct stat's st_ino in bytes.

=item C<startperl>

From F<startperl.U>:

This variable contains the string to put on the front of a perl
script to make sure (hopefully) that it runs with perl and not some
shell. Of course, that leading line must be followed by the classical
perl idiom:
eval 'exec perl -S $0 ${1+C<$@>}'
if $running_under_some_shell;
to guarantee perl startup should the shell execute the script. Note
that this magic incantation is not understood by csh.

=item C<startsh>

From F<startsh.U>:

This variable contains the string to put on the front of a shell
script to make sure (hopefully) that it runs with sh and not some
other shell.

=item C<static_ext>

From F<Extensions.U>:

This variable holds a list of C<XS> extension files we want to
link statically into the package.  It is used by Makefile.

=item C<stdchar>

From F<stdchar.U>:

This variable conditionally defines C<STDCHAR> to be the type of char
used in F<stdio.h>.  It has the values "unsigned char" or C<char>.

=item C<stdio_base>

From F<d_stdstdio.U>:

This variable defines how, given a C<FILE> pointer, fp, to access the
_base field (or equivalent) of F<stdio.h>'s C<FILE> structure.  This will
be used to define the macro FILE_base(fp).

=item C<stdio_bufsiz>

From F<d_stdstdio.U>:

This variable defines how, given a C<FILE> pointer, fp, to determine
the number of bytes store in the I/O buffer pointer to by the
_base field (or equivalent) of F<stdio.h>'s C<FILE> structure.  This will
be used to define the macro FILE_bufsiz(fp).

=item C<stdio_cnt>

From F<d_stdstdio.U>:

This variable defines how, given a C<FILE> pointer, fp, to access the
_cnt field (or equivalent) of F<stdio.h>'s C<FILE> structure.  This will
be used to define the macro FILE_cnt(fp).

=item C<stdio_filbuf>

From F<d_stdstdio.U>:

This variable defines how, given a C<FILE> pointer, fp, to tell
stdio to refill its internal buffers (?).  This will
be used to define the macro FILE_filbuf(fp).

=item C<stdio_ptr>

From F<d_stdstdio.U>:

This variable defines how, given a C<FILE> pointer, fp, to access the
_ptr field (or equivalent) of F<stdio.h>'s C<FILE> structure.  This will
be used to define the macro FILE_ptr(fp).

=item C<stdio_stream_array>

From F<stdio_streams.U>:

This variable tells the name of the array holding the stdio streams.
Usual values include _iob, __iob, and __sF.

=item C<strerror_r_proto>

From F<d_strerror_r.U>:

This variable encodes the prototype of strerror_r.
It is zero if d_strerror_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_strerror_r
is defined.

=item C<submit>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<subversion>

From F<patchlevel.U>:

The subversion level of this package.
The value of subversion comes from the F<patchlevel.h> file.
In a version number such as 5.6.1, this is the C<1>.
In F<patchlevel.h>, this is referred to as C<PERL_SUBVERSION>.
This is unique to perl.

=item C<sysman>

From F<sysman.U>:

This variable holds the place where the manual is located on this
system. It is not the place where the user wants to put his manual
pages. Rather it is the place where Configure may look to find manual
for unix commands (section 1 of the manual usually). See mansrc.

=item C<sysroot>

From F<Sysroot.U>:

This variable is empty unless supplied by the Configure user.
It can contain a path to an alternative root directory, under which
headers and libraries for the compilation target can be found. This
is generally used when cross-compiling using a gcc-like compiler.

=back

=head2 t

=over 4

=item C<tail>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<tar>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<targetarch>

From F<Cross.U>:

If cross-compiling, this variable contains the target architecture.
If not, this will be empty.

=item C<targetdir>

From F<Cross.U>:

This variable contains a path that will be created on the target
host using targetmkdir, and then used to copy the cross-compiled
executables to. Defaults to F</tmp> if not set.

=item C<targetenv>

From F<Cross.U>:

If cross-compiling, this variable can be used to modify the
environment on the target system.
However, how and where it's used, and even if it's used at all, is
entirely dependent on both the transport mechanism (targetrun) and
what the target system is.  Unless the relevant documentation says
otherwise, it is genereally not useful.

=item C<targethost>

From F<Cross.U>:

This variable contains the name of a separate host machine that
can be used to run compiled test programs and perl tests on.
Set to empty string if not in use.

=item C<targetmkdir>

From F<Cross.U>:

This variable contains the command used by Configure to create a
new directory on the target host.

=item C<targetport>

From F<Cross.U>:

This variable contains the number of a network port to be used to
connect to the host in targethost, if unset defaults to 22 for ssh.

=item C<targetsh>

From F<sh.U>:

If cross-compiling, this variable contains the location of sh on the
target system.
If not, this will be the same as $sh.

=item C<tbl>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<tee>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<test>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the test program.  After Configure runs,
the value is reset to a plain C<test> and is not useful.

=item C<timeincl>

From F<i_time.U>:

This variable holds the full path of the included time header(s).

=item C<timetype>

From F<d_time.U>:

This variable holds the type returned by time(). It can be long,
or time_t on C<BSD> sites (in which case <sys/types.h> should be
included). Anyway, the type Time_t should be used.

=item C<tmpnam_r_proto>

From F<d_tmpnam_r.U>:

