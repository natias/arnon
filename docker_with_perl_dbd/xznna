    result_access_type retAccess;
    access_type        access;
    arg1_access_type   arg1Access;
    arg2_access_type   arg2Access;
    arg3_access_type   arg3Access;

    VectorizedOperation4(result_access_type r, access_type a,
                         arg1_access_type a1, arg2_access_type a2, arg3_access_type a3)
        : retAccess(r), access(a), arg1Access(a1), arg2Access(a2), arg3Access(a3) {}

    void execute(size_t start, size_t end)
    {
        for (size_t i = start; i < end; ++i)
        {
            retAccess[i] = Op::apply(access[i], arg1Access[i], arg2Access[i], arg3Access[i]);
        }
    }
};

template <class Op, class result_access_type, class access_type,
                    class arg1_access_type, class arg2_access_type, class arg3_access_type, class arg4_access_type>
struct VectorizedOperation5 : public Task
{
    result_access_type retAccess;
    access_type        access;
    arg1_access_type   arg1Access;
    arg2_access_type   arg2Access;
    arg3_access_type   arg3Access;
    arg4_access_type   arg4Access;

    VectorizedOperation5(result_access_type r, access_type a,
                         arg1_access_type a1, arg2_access_type a2, arg3_access_type a3, arg4_access_type a4)
        : retAccess(r), access(a), arg1Access(a1), arg2Access(a2), arg3Access(a3), arg4Access(a4) {}

    void execute(size_t start, size_t end)
    {
        for (size_t i = start; i < end; ++i)
        {
            retAccess[i] = Op::apply(access[i], arg1Access[i], arg2Access[i], arg3Access[i], arg4Access[i]);
        }
    }
};

template <class Op, class Vectorize, class Func>
struct VectorizedFunction1 {
    BOOST_STATIC_ASSERT((size<Vectorize>::value == function_traits<Func>::arity));

    typedef function_traits<Func> traits;
    typedef typename fold<Vectorize,false_,or_<_,_> >::type any_vectorized;

    typedef typename result_access_type<typename traits::result_type,
                                        any_vectorized>::type result_type;
    typedef typename result_access_type<typename traits::result_type,
                                        any_vectorized>::direct result_access_type;
    // Result array is created here 'from scratch', so is always 'direct' access.

    typedef typename argument_access_type<typename traits::arg1_type,
                              typename at<Vectorize,long_<0> >::type>::type arg1_type;
    typedef typename argument_access_type<typename traits::arg1_type,
                              typename at<Vectorize,long_<0> >::type>::direct arg1_direct_access_type;
    typedef typename argument_access_type<typename traits::arg1_type,
                              typename at<Vectorize,long_<0> >::type>::masked arg1_masked_access_type;

    static result_type
    apply(arg1_type arg1)
    {
        PY_IMATH_LEAVE_PYTHON;
        size_t len = measure_arguments(arg1);
        op_precompute<Op>::apply(len);
        result_type retval = create_uninitalized_return_value<result_type>::apply(len);

        result_access_type resultAccess = getArrayAccess<result_access_type> (retval);

        if (any_masked(arg1))
        {
            arg1_masked_access_type argAccess =
                 getArrayAccess<arg1_masked_access_type> (arg1);

            VectorizedOperation1<Op,result_access_type,arg1_masked_access_type>
                vop (resultAccess, argAccess);
            dispatchTask(vop,len);
        }
        else
        {
            arg1_direct_access_type argAccess =
                 getArrayAccess<arg1_direct_access_type> (arg1);

            VectorizedOperation1<Op,result_access_type,arg1_direct_access_type>
                vop (resultAccess, argAccess);
            dispatchTask(vop,len);
        }

        PY_IMATH_RETURN_PYTHON;        
        return retval;
    }

    static std::string
    format_arguments(const boost::python::detail::keywords<1> &args)
    {
        // TODO: add types here
        return std::string("(")+args.elements[0].name+") - ";
    }
};

template <class Op, class Vectorize, class Func>
struct VectorizedFunction2 {
    BOOST_STATIC_ASSERT((size<Vectorize>::value == function_traits<Func>::arity));

    typedef function_traits<Func> traits;
    typedef typename fold<Vectorize,false_,or_<_,_> >::type any_vectorized;

    typedef typename result_access_type<typename traits::result_type,
                                        any_vectorized>::type result_type;
    typedef typename result_access_type<typename traits::result_type,
                                        any_vectorized>::direct result_access_type;
    // Result array is created here 'from scratch', so is always 'direct' access.

    typedef typename argument_access_type<typename traits::arg1_type,
                              typename at<Vectorize,long_<0> >::type>::type arg1_type;
    typedef typename argument_access_type<typename traits::arg1_type,
                              typename at<Vectorize,long_<0> >::type>::direct arg1_direct_access_type;
    typedef typename argument_access_type<typename traits::arg1_type,
                              typename at<Vectorize,long_<0> >::type>::masked arg1_masked_access_type;

    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<1> >::type>::type arg2_type;
    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<1> >::type>::direct arg2_direct_access_type;
    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<1> >::type>::masked arg2_masked_access_type;

    static result_type
    apply(arg1_type arg1, arg2_type arg2)
    {
        PY_IMATH_LEAVE_PYTHON;
        size_t len = measure_arguments(arg1,arg2);
        op_precompute<Op>::apply(len);
        result_type retval = create_uninitalized_return_value<result_type>::apply(len);

        result_access_type resultAccess = getArrayAccess<result_access_type> (retval);

        if (any_masked(arg1))
        {
            arg1_masked_access_type arg1Access =
                 getArrayAccess<arg1_masked_access_type> (arg1);

            if (any_masked(arg2))
            {
                arg2_masked_access_type arg2Access =
                     getArrayAccess<arg2_masked_access_type> (arg2);

                VectorizedOperation2<Op,result_access_type,
                                   arg1_masked_access_type,
                                   arg2_masked_access_type>
                    vop (resultAccess, arg1Access, arg2Access);
                dispatchTask(vop,len);
            }
            else
            {
                arg2_direct_access_type arg2Access =
                     getArrayAccess<arg2_direct_access_type> (arg2);

                VectorizedOperation2<Op,result_access_type,
                                   arg1_masked_access_type,
                                   arg2_direct_access_type>
                    vop (resultAccess, arg1Access, arg2Access);
                dispatchTask(vop,len);
            }
        }
        else
        {
            arg1_direct_access_type arg1Access =
                 getArrayAccess<arg1_direct_access_type> (arg1);

            if (any_masked(arg2))
            {
                arg2_masked_access_type arg2Access =
                     getArrayAccess<arg2_masked_access_type> (arg2);

                VectorizedOperation2<Op,result_access_type,
                                   arg1_direct_access_type,
                                   arg2_masked_access_type>
                    vop (resultAccess, arg1Access, arg2Access);
                dispatchTask(vop,len);
            }
            else
            {
                arg2_direct_access_type arg2Access =
                     getArrayAccess<arg2_direct_access_type> (arg2);

                VectorizedOperation2<Op,result_access_type,
                                   arg1_direct_access_type,
                                   arg2_direct_access_type>
                    vop (resultAccess, arg1Access, arg2Access);
                dispatchTask(vop,len);
            }
        }

        PY_IMATH_RETURN_PYTHON;        
        return retval;
    }

    static std::string
    format_arguments(const boost::python::detail::keywords<2> &args)
    {
        // TODO: add types here
        return std::string("(")+args.elements[0].name+","+args.elements[1].name+") - ";
    }
};

template <class Op, class Vectorize, class Func>
struct VectorizedFunction3 {
    BOOST_STATIC_ASSERT((size<Vectorize>::value == function_traits<Func>::arity));

    typedef function_traits<Func> traits;
    typedef typename fold<Vectorize,false_,or_<_,_> >::type any_vectorized;

    typedef typename result_access_type<typename traits::result_type,
                                        any_vectorized>::type result_type;
    typedef typename result_access_type<typename traits::result_type,
                                        any_vectorized>::direct result_access_type;
    // Result array is created here 'from scratch', so is always 'direct' access.

    typedef typename argument_access_type<typename traits::arg1_type,
                              typename at<Vectorize,long_<0> >::type>::type arg1_type;
    typedef typename argument_access_type<typename traits::arg1_type,
                              typename at<Vectorize,long_<0> >::type>::direct arg1_direct_access_type;
    typedef typename argument_access_type<typename traits::arg1_type,
                              typename at<Vectorize,long_<0> >::type>::masked arg1_masked_access_type;

    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<1> >::type>::type arg2_type;
    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<1> >::type>::direct arg2_direct_access_type;
    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<1> >::type>::masked arg2_masked_access_type;

    typedef typename argument_access_type<typename traits::arg3_type,
                              typename at<Vectorize,long_<2> >::type>::type arg3_type;
    typedef typename argument_access_type<typename traits::arg3_type,
                              typename at<Vectorize,long_<2> >::type>::direct arg3_direct_access_type;
    typedef typename argument_access_type<typename traits::arg3_type,
                              typename at<Vectorize,long_<2> >::type>::masked arg3_masked_access_type;

    static result_type
    apply(arg1_type arg1, arg2_type arg2, arg3_type arg3)
    {
        PY_IMATH_LEAVE_PYTHON;
        size_t len = measure_arguments(arg1,arg2,arg3);
        op_precompute<Op>::apply(len);
        result_type retval = create_uninitalized_return_value<result_type>::apply(len);

        result_access_type resultAccess = getArrayAccess<result_access_type> (retval);

        if (any_masked(arg1))
        {
            arg1_masked_access_type arg1Access =
                 getArrayAccess<arg1_masked_access_type> (arg1);

            if (any_masked(arg2))
            {
                arg2_masked_access_type arg2Access =
                     getArrayAccess<arg2_masked_access_type> (arg2);

                if (any_masked(arg3))
                {
                    arg3_masked_access_type arg3Access =
                         getArrayAccess<arg3_masked_access_type> (arg3);

                    VectorizedOperation3<Op,result_access_type,
                                       arg1_masked_access_type,
                                       arg2_masked_access_type,
                                       arg3_masked_access_type>
                        vop (resultAccess, arg1Access, arg2Access, arg3Access);
                    dispatchTask(vop,len);
                }
                else
                {
                    arg3_direct_access_type arg3Access =
                         getArrayAccess<arg3_direct_access_type> (arg3);

                    VectorizedOperation3<Op,result_access_type,
                                       arg1_masked_access_type,
                                       arg2_masked_access_type,
                                       arg3_direct_access_type>
                        vop (resultAccess, arg1Access, arg2Access, arg3Access);
                    dispatchTask(vop,len);
                }
            }
            else
            {
                arg2_direct_access_type arg2Access =
                     getArrayAccess<arg2_direct_access_type> (arg2);

                if (any_masked(arg3))
                {
                    arg3_masked_access_type arg3Access =
                         getArrayAccess<arg3_masked_access_type> (arg3);

                    VectorizedOperation3<Op,result_access_type,
                                       arg1_masked_access_type,
                                       arg2_direct_access_type,
                                       arg3_masked_access_type>
                        vop (resultAccess, arg1Access, arg2Access, arg3Access);
                    dispatchTask(vop,len);
                }
                else
                {
                    arg3_direct_access_type arg3Access =
                         getArrayAccess<arg3_direct_access_type> (arg3);

                    VectorizedOperation3<Op,result_access_type,
                                       arg1_masked_access_type,
                                       arg2_direct_access_type,
                                       arg3_direct_access_type>
                        vop (resultAccess, arg1Access, arg2Access, arg3Access);
                    dispatchTask(vop,len);
                }
            }
        }
        else
        {
            arg1_direct_access_type arg1Access =
                 getArrayAccess<arg1_direct_access_type> (arg1);

            if (any_masked(arg2))
            {
                arg2_masked_access_type arg2Access =
                     getArrayAccess<arg2_masked_access_type> (arg2);

                if (any_masked(arg3))
                {
                    arg3_masked_access_type arg3Access =
                         getArrayAccess<arg3_masked_access_type> (arg3);

                    VectorizedOperation3<Op,result_access_type,
                                       arg1_direct_access_type,
                                       arg2_masked_access_type,
                                       arg3_masked_access_type>
                        vop (resultAccess, arg1Access, arg2Access, arg3Access);
                    dispatchTask(vop,len);
                }
                else
                {
                    arg3_direct_access_type arg3Access =
                         getArrayAccess<arg3_direct_access_type> (arg3);

                    VectorizedOperation3<Op,result_access_type,
                                       arg1_direct_access_type,
                                       arg2_masked_access_type,
                                       arg3_direct_access_type>
                        vop (resultAccess, arg1Access, arg2Access, arg3Access);
                    dispatchTask(vop,len);
                }
            }
            else
            {
                arg2_direct_access_type arg2Access =
                     getArrayAccess<arg2_direct_access_type> (arg2);

                if (any_masked(arg3))
                {
                    arg3_masked_access_type arg3Access =
                         getArrayAccess<arg3_masked_access_type> (arg3);

                    VectorizedOperation3<Op,result_access_type,
                                       arg1_direct_access_type,
                                       arg2_direct_access_type,
                                       arg3_masked_access_type>
                        vop (resultAccess, arg1Access, arg2Access, arg3Access);
                    dispatchTask(vop,len);
                }
                else
                {
                    arg3_direct_access_type arg3Access =
                         getArrayAccess<arg3_direct_access_type> (arg3);

                    VectorizedOperation3<Op,result_access_type,
                                       arg1_direct_access_type,
                                       arg2_direct_access_type,
                                       arg3_direct_access_type>
                        vop (resultAccess, arg1Access, arg2Access, arg3Access);
                    dispatchTask(vop,len);
                }
            }
        }

        PY_IMATH_RETURN_PYTHON;
        return retval;
    }

    static std::string
    format_arguments(const boost::python::detail::keywords<3> &args)
    {
        // TODO: add types here
        return std::string("(")+args.elements[0].name+","+args.elements[1].name+","+args.elements[2].name+") - ";
    }
};

template <class Op, class Vectorize, class Func>
struct VectorizedFunction4 {
    BOOST_STATIC_ASSERT((size<Vectorize>::value == function_traits<Func>::arity));

    typedef function_traits<Func> traits;
    typedef typename fold<Vectorize,false_,or_<_,_> >::type any_vectorized;

    typedef typename result_access_type<typename traits::result_type,
                                        any_vectorized>::type result_type;
    typedef typename result_access_type<typename traits::result_type,
                                        any_vectorized>::direct result_access_type;
    // Result array is created here 'from scratch', so is always 'direct' access.

    typedef typename argument_access_type<typename traits::arg1_type,
                              typename at<Vectorize,long_<0> >::type>::type arg1_type;
    typedef typename argument_access_type<typename traits::arg1_type,
                              typename at<Vectorize,long_<0> >::type>::direct arg1_direct_access_type;
    typedef typename argument_access_type<typename traits::arg1_type,
                              typename at<Vectorize,long_<0> >::type>::masked arg1_masked_access_type;

    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<1> >::type>::type arg2_type;
    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<1> >::type>::direct arg2_direct_access_type;
    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<1> >::type>::masked arg2_masked_access_type;

    typedef typename argument_access_type<typename traits::arg3_type,
                              typename at<Vectorize,long_<2> >::type>::type arg3_type;
    typedef typename argument_access_type<typename traits::arg3_type,
                              typename at<Vectorize,long_<2> >::type>::direct arg3_direct_access_type;
    typedef typename argument_access_type<typename traits::arg3_type,
                              typename at<Vectorize,long_<2> >::type>::masked arg3_masked_access_type;

    typedef typename argument_access_type<typename traits::arg4_type,
                              typename at<Vectorize,long_<3> >::type>::type arg4_type;
    typedef typename argument_access_type<typename traits::arg4_type,
                              typename at<Vectorize,long_<3> >::type>::direct arg4_direct_access_type;
    typedef typename argument_access_type<typename traits::arg4_type,
                              typename at<Vectorize,long_<3> >::type>::masked arg4_masked_access_type;

    static result_type
    apply(arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4)
    {
        PY_IMATH_LEAVE_PYTHON;
        size_t len = measure_arguments(arg1,arg2,arg3,arg4);
        op_precompute<Op>::apply(len);
        result_type retval = create_uninitalized_return_value<result_type>::apply(len);

        result_access_type resultAccess = getArrayAccess<result_access_type> (retval);

        if (any_masked(arg1))
        {
            arg1_masked_access_type arg1Access =
                 getArrayAccess<arg1_masked_access_type> (arg1);

            if (any_masked(arg2))
            {
                arg2_masked_access_type arg2Access =
                     getArrayAccess<arg2_masked_access_type> (arg2);

                if (any_masked(arg3))
                {
                    arg3_masked_access_type arg3Access =
                         getArrayAccess<arg3_masked_access_type> (arg3);

                    if (any_masked(arg4))
                    {
                        arg4_masked_access_type arg4Access =
                            getArrayAccess<arg4_masked_access_type> (arg4);

                        VectorizedOperation4<Op,result_access_type,
                                           arg1_masked_access_type,
                                           arg2_masked_access_type,
                                           arg3_masked_access_type,
                                           arg4_masked_access_type>
                            vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access);
                        dispatchTask(vop,len);
                    }
                    else
                    {
                        arg4_direct_access_type arg4Access =
                            getArrayAccess<arg4_direct_access_type> (arg4);

                        VectorizedOperation4<Op,result_access_type,
                                           arg1_masked_access_type,
                                           arg2_masked_access_type,
                                           arg3_masked_access_type,
                                           arg4_direct_access_type>
                            vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access);
                        dispatchTask(vop,len);
                    }
                }
                else
                {
                    arg3_direct_access_type arg3Access =
                         getArrayAccess<arg3_direct_access_type> (arg3);

                    if (any_masked(arg4))
                    {
                        arg4_masked_access_type arg4Access =
                            getArrayAccess<arg4_masked_access_type> (arg4);

                        VectorizedOperation4<Op,result_access_type,
                                           arg1_masked_access_type,
                                           arg2_masked_access_type,
                                           arg3_direct_access_type,
                                           arg4_masked_access_type>
                            vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access);
                    }
                    else
                    {
                        arg4_direct_access_type arg4Access =
                            getArrayAccess<arg4_direct_access_type> (arg4);

                        VectorizedOperation4<Op,result_access_type,
                                           arg1_masked_access_type,
                                           arg2_masked_access_type,
                                           arg3_direct_access_type,
                                           arg4_direct_access_type>
                            vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access);
                        dispatchTask(vop,len);
                    }
                }
            }
            else
            {
                arg2_direct_access_type arg2Access =
                     getArrayAccess<arg2_direct_access_type> (arg2);

                if (any_masked(arg3))
                {
                    arg3_masked_access_type arg3Access =
                         getArrayAccess<arg3_masked_access_type> (arg3);

                    if (any_masked(arg4))
                    {
                        arg4_masked_access_type arg4Access =
                            getArrayAccess<arg4_masked_access_type> (arg4);

                        VectorizedOperation4<Op,result_access_type,
                                           arg1_masked_access_type,
                                           arg2_direct_access_type,
                                           arg3_masked_access_type,
                                           arg4_masked_access_type>
                            vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access);
                        dispatchTask(vop,len);
                    }
                    else
                    {
                        arg4_direct_access_type arg4Access =
                            getArrayAccess<arg4_direct_access_type> (arg4);

                        VectorizedOperation4<Op,result_access_type,
                                           arg1_masked_access_type,
                                           arg2_direct_access_type,
                                           arg3_masked_access_type,
                                           arg4_direct_access_type>
                            vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access);
                        dispatchTask(vop,len);
                    }
                }
                else
                {
                    arg3_direct_access_type arg3Access =
                         getArrayAccess<arg3_direct_access_type> (arg3);

                    if (any_masked(arg4))
                    {
                        arg4_masked_access_type arg4Access =
                            getArrayAccess<arg4_masked_access_type> (arg4);

                        VectorizedOperation4<Op,result_access_type,
                                           arg1_masked_access_type,
                                           arg2_direct_access_type,
                                           arg3_direct_access_type,
                                           arg4_masked_access_type>
                            vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access);
                        dispatchTask(vop,len);
                    }
                    else
                    {
                        arg4_direct_access_type arg4Access =
                            getArrayAccess<arg4_direct_access_type> (arg4);

                        VectorizedOperation4<Op,result_access_type,
                                           arg1_masked_access_type,
                                           arg2_direct_access_type,
                                           arg3_direct_access_type,
                                           arg4_direct_access_type>
                            vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access);
                        dispatchTask(vop,len);
                    }
                }
            }
        }
        else
        {
            arg1_direct_access_type arg1Access =
                 getArrayAccess<arg1_direct_access_type> (arg1);

            if (any_masked(arg2))
            {
                arg2_masked_access_type arg2Access =
                     getArrayAccess<arg2_masked_access_type> (arg2);

                if (any_masked(arg3))
                {
                    arg3_masked_access_type arg3Access =
                         getArrayAccess<arg3_masked_access_type> (arg3);

                    if (any_masked(arg4))
                    {
                        arg4_masked_access_type arg4Access =
                            getArrayAccess<arg4_masked_access_type> (arg4);

                        VectorizedOperation4<Op,result_access_type,
                                           arg1_direct_access_type,
                                           arg2_masked_access_type,
                                           arg3_masked_access_type,
                                           arg4_masked_access_type>
                            vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access);
                        dispatchTask(vop,len);
                    }
                    else
                    {
                        arg4_direct_access_type arg4Access =
                            getArrayAccess<arg4_direct_access_type> (arg4);

                        VectorizedOperation4<Op,result_access_type,
                                           arg1_direct_access_type,
                                           arg2_masked_access_type,
                                           arg3_masked_access_type,
                                           arg4_direct_access_type>
                            vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access);
                        dispatchTask(vop,len);
                    }
                }
                else
                {
                    arg3_direct_access_type arg3Access =
                         getArrayAccess<arg3_direct_access_type> (arg3);

                    if (any_masked(arg4))
                    {
                        arg4_masked_access_type arg4Access =
                            getArrayAccess<arg4_masked_access_type> (arg4);

                        VectorizedOperation4<Op,result_access_type,
                                           arg1_direct_access_type,
                                           arg2_masked_access_type,
                                           arg3_direct_access_type,
                                           arg4_masked_access_type>
                            vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access);
                        dispatchTask(vop,len);
                    }
                    else
                    {
                        arg4_direct_access_type arg4Access =
                            getArrayAccess<arg4_direct_access_type> (arg4);

                        VectorizedOperation4<Op,result_access_type,
                                           arg1_direct_access_type,
                                           arg2_masked_access_type,
                                           arg3_direct_access_type,
                                           arg4_direct_access_type>
                            vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access);
                        dispatchTask(vop,len);
                    }
                }
            }
            else
            {
                arg2_direct_access_type arg2Access =
                     getArrayAccess<arg2_direct_access_type> (arg2);

                if (any_masked(arg3))
                {
                    arg3_masked_access_type arg3Access =
                         getArrayAccess<arg3_masked_access_type> (arg3);

                    if (any_masked(arg4))
                    {
                        arg4_masked_access_type arg4Access =
                            getArrayAccess<arg4_masked_access_type> (arg4);

                        VectorizedOperation4<Op,result_access_type,
                                           arg1_direct_access_type,
                                           arg2_direct_access_type,
                                           arg3_masked_access_type,
                                           arg4_masked_access_type>
                            vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access);
                        dispatchTask(vop,len);
                    }
                    else
                    {
                        arg4_direct_access_type arg4Access =
                            getArrayAccess<arg4_direct_access_type> (arg4);

                        VectorizedOperation4<Op,result_access_type,
                                           arg1_direct_access_type,
                                           arg2_direct_access_type,
                                           arg3_masked_access_type,
                                           arg4_direct_access_type>
                            vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access);
                        dispatchTask(vop,len);
                    }
                }
                else
                {
                    arg3_direct_access_type arg3Access =
                         getArrayAccess<arg3_direct_access_type> (arg3);

                    if (any_masked(arg4))
                    {
                        arg4_masked_access_type arg4Access =
                            getArrayAccess<arg4_masked_access_type> (arg4);

                        VectorizedOperation4<Op,result_access_type,
                                           arg1_direct_access_type,
                                           arg2_direct_access_type,
                                           arg3_direct_access_type,
                                           arg4_masked_access_type>
                            vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access);
                        dispatchTask(vop,len);
                    }
                    else
                    {
                        arg4_direct_access_type arg4Access =
                            getArrayAccess<arg4_direct_access_type> (arg4);

                        VectorizedOperation4<Op,result_access_type,
                                           arg1_direct_access_type,
                                           arg2_direct_access_type,
                                           arg3_direct_access_type,
                                           arg4_direct_access_type>
                            vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access);
                        dispatchTask(vop,len);
                    }
                }
            }
        }

        PY_IMATH_RETURN_PYTHON;
        return retval;
    }

    static std::string
    format_arguments(const boost::python::detail::keywords<4> &args)
    {
        // TODO: add types here
        return std::string("(")+args.elements[0].name+","+args.elements[1].name+","+args.elements[2].name+","+args.elements[3].name+") - ";
    }
};

template <class Op, class Vectorize, class Func>
struct VectorizedFunction5 {
    BOOST_STATIC_ASSERT((size<Vectorize>::value == function_traits<Func>::arity));

    typedef function_traits<Func> traits;
    typedef typename fold<Vectorize,false_,or_<_,_> >::type any_vectorized;

    typedef typename result_access_type<typename traits::result_type,
                                        any_vectorized>::type result_type;
    typedef typename result_access_type<typename traits::result_type,
                                        any_vectorized>::direct result_access_type;
    // Result array is created here 'from scratch', so is always 'direct' access.

    typedef typename argument_access_type<typename traits::arg1_type,
                              typename at<Vectorize,long_<0> >::type>::type arg1_type;
    typedef typename argument_access_type<typename traits::arg1_type,
                              typename at<Vectorize,long_<0> >::type>::direct arg1_direct_access_type;
    typedef typename argument_access_type<typename traits::arg1_type,
                              typename at<Vectorize,long_<0> >::type>::masked arg1_masked_access_type;

    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<1> >::type>::type arg2_type;
    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<1> >::type>::direct arg2_direct_access_type;
    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<1> >::type>::masked arg2_masked_access_type;

    typedef typename argument_access_type<typename traits::arg3_type,
                              typename at<Vectorize,long_<2> >::type>::type arg3_type;
    typedef typename argument_access_type<typename traits::arg3_type,
                              typename at<Vectorize,long_<2> >::type>::direct arg3_direct_access_type;
    typedef typename argument_access_type<typename traits::arg3_type,
                              typename at<Vectorize,long_<2> >::type>::masked arg3_masked_access_type;

    typedef typename argument_access_type<typename traits::arg4_type,
                              typename at<Vectorize,long_<3> >::type>::type arg4_type;
    typedef typename argument_access_type<typename traits::arg4_type,
                              typename at<Vectorize,long_<3> >::type>::direct arg4_direct_access_type;
    typedef typename argument_access_type<typename traits::arg4_type,
                              typename at<Vectorize,long_<3> >::type>::masked arg4_masked_access_type;

    typedef typename argument_access_type<typename traits::arg5_type,
                              typename at<Vectorize,long_<4> >::type>::type arg5_type;
    typedef typename argument_access_type<typename traits::arg5_type,
                              typename at<Vectorize,long_<4> >::type>::direct arg5_direct_access_type;
    typedef typename argument_access_type<typename traits::arg5_type,
                              typename at<Vectorize,long_<4> >::type>::masked arg5_masked_access_type;

    static result_type
    apply(arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, arg5_type arg5)
    {
        PY_IMATH_LEAVE_PYTHON;
        size_t len = measure_arguments(arg1,arg2,arg3,arg4,arg5);
        op_precompute<Op>::apply(len);
        result_type retval = create_uninitalized_return_value<result_type>::apply(len);

        result_access_type resultAccess = getArrayAccess<result_access_type> (retval);

        if (any_masked(arg1))
        {
            arg1_masked_access_type arg1Access =
                 getArrayAccess<arg1_masked_access_type> (arg1);

            if (any_masked(arg2))
            {
                arg2_masked_access_type arg2Access =
                     getArrayAccess<arg2_masked_access_type> (arg2);

                if (any_masked(arg3))
                {
                    arg3_masked_access_type arg3Access =
                         getArrayAccess<arg3_masked_access_type> (arg3);

                    if (any_masked(arg4))
                    {
                        arg4_masked_access_type arg4Access =
                            getArrayAccess<arg4_masked_access_type> (arg4);

                        if (any_masked(arg5))
                        {
                            arg5_masked_access_type arg5Access =
                                getArrayAccess<arg5_masked_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_masked_access_type,
                                               arg2_masked_access_type,
                                               arg3_masked_access_type,
                                               arg4_masked_access_type,
                                               arg5_masked_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                        else
                        {
                            arg5_direct_access_type arg5Access =
                                getArrayAccess<arg5_direct_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_masked_access_type,
                                               arg2_masked_access_type,
                                               arg3_masked_access_type,
                                               arg4_masked_access_type,
                                               arg5_direct_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                    }
                    else
                    {
                        arg4_direct_access_type arg4Access =
                            getArrayAccess<arg4_direct_access_type> (arg4);

                        if (any_masked(arg5))
                        {
                            arg5_masked_access_type arg5Access =
                                getArrayAccess<arg5_masked_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_masked_access_type,
                                               arg2_masked_access_type,
                                               arg3_masked_access_type,
                                               arg4_direct_access_type,
                                               arg5_masked_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                        else
                        {
                            arg5_direct_access_type arg5Access =
                                getArrayAccess<arg5_direct_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_masked_access_type,
                                               arg2_masked_access_type,
                                               arg3_masked_access_type,
                                               arg4_direct_access_type,
                                               arg5_direct_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                    }
                }
                else
                {
                    arg3_direct_access_type arg3Access =
                         getArrayAccess<arg3_direct_access_type> (arg3);

                    if (any_masked(arg4))
                    {
                        arg4_masked_access_type arg4Access =
                            getArrayAccess<arg4_masked_access_type> (arg4);

                        if (any_masked(arg5))
                        {
                            arg5_masked_access_type arg5Access =
                                getArrayAccess<arg5_masked_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_masked_access_type,
                                               arg2_masked_access_type,
                                               arg3_direct_access_type,
                                               arg4_masked_access_type,
                                               arg5_masked_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                        else
                        {
                            arg5_direct_access_type arg5Access =
                                getArrayAccess<arg5_direct_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_masked_access_type,
                                               arg2_masked_access_type,
                                               arg3_direct_access_type,
                                               arg4_masked_access_type,
                                               arg5_direct_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                    }
                    else
                    {
                        arg4_direct_access_type arg4Access =
                            getArrayAccess<arg4_direct_access_type> (arg4);

                        if (any_masked(arg5))
                        {
                            arg5_masked_access_type arg5Access =
                                getArrayAccess<arg5_masked_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_masked_access_type,
                                               arg2_masked_access_type,
                                               arg3_direct_access_type,
                                               arg4_direct_access_type,
                                               arg5_masked_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                        else
                        {
                            arg5_direct_access_type arg5Access =
                                getArrayAccess<arg5_direct_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_masked_access_type,
                                               arg2_masked_access_type,
                                               arg3_direct_access_type,
                                               arg4_direct_access_type,
                                               arg5_direct_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                    }
                }
            }
            else
            {
                arg2_direct_access_type arg2Access =
                     getArrayAccess<arg2_direct_access_type> (arg2);

                if (any_masked(arg3))
                {
                    arg3_masked_access_type arg3Access =
                         getArrayAccess<arg3_masked_access_type> (arg3);

                    if (any_masked(arg4))
                    {
                        arg4_masked_access_type arg4Access =
                            getArrayAccess<arg4_masked_access_type> (arg4);

                        if (any_masked(arg5))
                        {
                            arg5_masked_access_type arg5Access =
                                getArrayAccess<arg5_masked_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_masked_access_type,
                                               arg2_direct_access_type,
                                               arg3_masked_access_type,
                                               arg4_masked_access_type,
                                               arg5_masked_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
