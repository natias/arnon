        method_name (IN) - the methods' name  
        m_length (IN) - length (in bytes) of the 'name' parameter
        mdos (OUT) - If this function completes successfully, 'mdos' points to
                the selected methods in the object cache.  The caller must
                allocate space for the array of OCITypeMethod pointers before
                calling this routine and must not write into the space.
                The number of OCITypeMethod pointers that will be returned can
                be obtained by calling 'OCITypeMethodOverload()'.
   REQUIRES:
        1) All type accessors require that the type be pinned before calling 
           any accessor. 
        2) if 'tdo' is not null, it must point to a valid type descriptor 
           in the object cache.
   DESCRIPTION:
        Get one or more methods given the name.  
   RETURNS:
        OCI_SUCCESS if the function completes successfully.
        OCI_INVALID_HANDLE if 'env' or 'err' is null. 
        OCI_ERROR if
            1) any of the required parameters is null.
            2) No methods in type has name 'name'.
            3) 'mdos' is not NULL but points to NULL data.
   NOTES:
        The type must be unpinned when the accessed information is no 
        longer needed.
        Schema and type names are CASE-SENSITIVE. If they have been created
        via SQL, you need to use uppercase names.
 */

/*------------------------ OCITypeMethodNext --------------------------------*/

/* ** OBSOLETE ** */
sword OCITypeMethodNext(    OCIEnv *env, OCIError *err, 
                            OCITypeIter *iterator_ort,
                            OCITypeMethod **mdo   );

/*
   NAME: OCITypeMethodNext - OCI Get a Method By Iteration.
   PARAMETERS: 
        env (IN/OUT) - OCI environment handle initialized in object mode
        err (IN/OUT) - error handle. If there is an error, it is
                recorded in 'err' and this function returns OCI_ERROR.
                The error recorded in 'err' can be retrieved by calling
                OCIErrorGet().
        iterator_ort (IN/OUT) - iterator for retrieving the next method;
               see OCITypeIterNew() to set iterator.
        mdo (OUT) - If this function completes successfully, 'mdo' points to 
               the selected method descriptor in the object cache.  Positions 
               start at 1.  The caller must allocate space for the
               OCITypeMethod* before calling this routine and must not write 
               nto the space. 
   REQUIRES:
         1) All type accessors require that the type be pinned before calling 
            any accessor. 
        2) if 'tdo' is not null, it must point to a valid type descriptor 
           in the object cache.
   DESCRIPTION:
        Iterate to the next method to retrieve.
   RETURNS:
        OCI_SUCCESS if the function completes successfully.
        OCI_NO_DATA if there are no more attributes to iterate on; use
            OCITypeIterSet() to reset the iterator if necessary.
        OCI_INVALID_HANDLE if 'env' or 'err' is null. 
        OCI_ERROR if
            1) any of the required parameters is null.
            2) 'mdo' is not NULL but points to NULL data.
   NOTES:
        The type must be unpinned when the accessed information is no 
        longer needed.
 */

/*------------------------ OCITypeMethodName --------------------------------*/

/* ** OBSOLETE ** */
oratext *OCITypeMethodName(    OCIEnv *env, OCIError *err,
                            const OCITypeMethod *mdo, ub4 *n_length    );
/*
   NAME: OCITypeMethodName - OCI Get a Method's NaMe. 
   PARAMETERS: 
        env (IN/OUT) - OCI environment handle initialized in object mode
        err (IN/OUT) - error handle. If there is an error, it is
                recorded in 'err' and this function returns OCI_ERROR.
                The error recorded in 'err' can be retrieved by calling
                OCIErrorGet().
        mdo (IN) - pointer to the method descriptor in the object cache
        n_length (OUT) - length (in bytes) of the 'name' parameter.  The caller
               must allocate space for the ub4 before calling this routine.
   REQUIRES:
        1) All type accessors require that the type be pinned before calling 
           any accessor. 
        2) All input parameters must not be NULL and must be valid.
   DESCRIPTION:
        Get the (non-unique) real name of the method.
   RETURNS:
        the non-unique name of the method or NULL if there is an error.
   NOTES:
        The type must be unpinned when the accessed information is no 
        longer needed.
 */

/*------------------------ OCITypeMethodEncap -------------------------------*/

/* ** OBSOLETE ** */
OCITypeEncap OCITypeMethodEncap(    OCIEnv *env, OCIError *err,
                                    const OCITypeMethod *mdo    );
/*
   NAME: OCITypeMethodEncap - Get a Method's ENcapsulation (private/public). 
   PARAMETERS: 
        env (IN/OUT) - OCI environment handle initialized in object mode
        err (IN/OUT) - error handle. If there is an error, it is
                recorded in 'err' and this function returns OCI_ERROR.
                The error recorded in 'err' can be retrieved by calling
                OCIErrorGet().
        mdo (IN) - pointer to the method descriptor in the object cache
   REQUIRES:
        1) All type accessors require that the type be pinned before calling 
           any accessor. 
        2) All input parameters must not be NULL and must be valid.
   DESCRIPTION:
        Get the encapsulation (private, or public) of a method.
   RETURNS:
        the encapsulation (private, or public) of the method
   NOTES:
        The type must be unpinned when the accessed information is no 
        longer needed.
 */

/*------------------------ OCITypeMethodFlags -------------------------------*/

/* ** OBSOLETE ** */
OCITypeMethodFlag OCITypeMethodFlags(    OCIEnv *env, OCIError *err,
                                         const OCITypeMethod *mdo    );
/*
   NAME: OCITypeMethodFlags - OCI Get a Method's FLags
                              (inline, constant, virtual, constructor,
                              destructor). 
   PARAMETERS: 
        env (IN/OUT) - OCI environment handle initialized in object mode
        err (IN/OUT) - error handle. If there is an error, it is
                recorded in 'err' and this function returns OCI_ERROR.
                The error recorded in 'err' can be retrieved by calling
                OCIErrorGet().
        mdo (IN) - pointer to the method descriptor in the object cache
   REQUIRES:
        1) All type accessors require that the type be pinned before calling 
           any accessor. 
        2) All input parameters must not be NULL and must be valid.
   DESCRIPTION:
        Get the flags (inline, constant, virutal, constructor, destructor) of
        a method.
   RETURNS:
        the flags (inline, constant, virutal, constructor, destructor) of
        the method
   NOTES:
        The type must be unpinned when the accessed information is no 
        longer needed.
 */

/*------------------------ OCITypeMethodMap ---------------------------------*/

/* ** OBSOLETE ** */
sword OCITypeMethodMap(    OCIEnv *env, OCIError *err, const OCIType *tdo, 
                           OCITypeMethod **mdo    );
/*
   NAME: OCITypeMethodMap - OCI Get the Method's MAP function.
   PARAMETERS: 
        env (IN/OUT) - OCI environment handle initialized in object mode
        err (IN/OUT) - error handle. If there is an error, it is
                recorded in 'err' and this function returns OCI_ERROR.
                The error recorded in 'err' can be retrieved by calling
                OCIErrorGet().
        tdo (IN) - pointer to to the type descriptor in the object cache
        mdo (OUT) - If this function completes successfully, and there is a 
               map function for this type, 'mdo' points to the selected method 
               descriptor in the object cache.  Otherwise, 'mdo' is null.
   REQUIRES:
        1) All type accessors require that the type be pinned before calling 
           any accessor. 
        2) All required input parameters must not be NULL and must be valid.
   DESCRIPTION:
        A type may have only one map function.  'OCITypeMethodMap()' finds
        this function, if it exists, and returns a reference and a pointer to
        the method descriptor in the object cache.  If the type does not have a
        map (relative ordering) function, then 'mdo_ref' and 'mdo' are set
        to null and an error is returned.
   RETURNS:
        OCI_SUCCESS if the function completes successfully.
        OCI_INVALID_HANDLE if 'env' or 'err' is null. 
        OCI_ERROR if
            the type does not contain a map function.
   NOTES:
        The type must be unpinned when the accessed information is no 
        longer needed.
 */

/*------------------------ OCITypeMethodOrder -------------------------------*/

/* ** OBSOLETE ** */
sword OCITypeMethodOrder(    OCIEnv *env, OCIError *err, const OCIType *tdo, 
                             OCITypeMethod **mdo    );
/*
   NAME: OCITypeMethodOrder - OCI Get the Method's ORder function.
   PARAMETERS: 
        env (IN/OUT) - OCI environment handle initialized in object mode
        err (IN/OUT) - error handle. If there is an error, it is
                recorded in 'err' and this function returns OCI_ERROR.
                The error recorded in 'err' can be retrieved by calling
                OCIErrorGet().
        tdo (IN) - pointer to to the type descriptor in the object cache
        mdo (OUT) - If this function completes successfully, and there is a 
               map function for this type, 'mdo' points to the selected method 
               descriptor in the object cache.  Otherwise, 'mdo' is null.
   REQUIRES:
        1) All type accessors require that the type be pinned before calling 
           any accessor. 
        2) All required input parameters must not be NULL and must be valid.
   DESCRIPTION:
        A type may have only one ORder or MAP function. 'OCITypeMethodOrder()'
        finds this function, if it exists, and returns a ref and a pointer
        to the method descriptor in the object cache.  If the type does not
        have a map (relative ordering) function, then 'mdo_ref' and 'mdo' are
        set to null and an error is returned.
   RETURNS:
        OCI_SUCCESS if the function completes successfully.
        OCI_INVALID_HANDLE if 'env' or 'err' is null. 
        OCI_ERROR if
            the type does not contain a map function.
   NOTES:
        The type must be unpinned when the accessed information is no 
        longer needed.
 */

/*------------------------ OCITypeMethodParams ------------------------------*/

/* ** OBSOLETE ** */
ub4 OCITypeMethodParams(    OCIEnv *env, OCIError *err,
                            const OCITypeMethod *mdo    );
/*
   NAME: OCITypeMethodParams - OCI Get a Method's Number of Parameters. 
   PARAMETERS: 
        env (IN/OUT) - OCI environment handle initialized in object mode
        err (IN/OUT) - error handle. If there is an error, it is
                recorded in 'err' and this function returns OCI_ERROR.
                The error recorded in 'err' can be retrieved by calling
                OCIErrorGet().
        mdo (IN) - pointer to the method descriptor in the object cache
   REQUIRES:
        1) All type accessors require that the type be pinned before calling 
           any accessor. 
        2) All input parameters must not be NULL and must be valid.
   DESCRIPTION:
        Get the number of parameters in a method.
   RETURNS:
        the number of parameters in the method
   NOTES:
        The type must be unpinned when the accessed information is no 
        longer needed.
 */


/*--------------------------------------------------------------------------*/
/*                             RESULT ACCESSORS                             */
/*--------------------------------------------------------------------------*/

/*-------------------------- OCITypeResult ---------------------------------*/

/* ** OBSOLETE ** */
sword OCITypeResult(    OCIEnv *env, OCIError *err, const OCITypeMethod *mdo,
                        OCITypeElem **elem    );
/*
   NAME: OCITypeResult - OCI Get a method's result type descriptor.
   PARAMETERS: 
        env (IN/OUT) - OCI environment handle initialized in object mode
        err (IN/OUT) - error handle. If there is an error, it is
                recorded in 'err' and this function returns OCI_ERROR.
                The error recorded in 'err' can be retrieved by calling
                OCIErrorGet().
        mdo (IN) - pointer to the method descriptor in the object cache
        elem (OUT) - If this function completes successfully, 'rdo' points to 
               the selected result (parameter) descriptor in the object cache.
   REQUIRES:
        1) All type accessors require that the type be pinned before calling 
           any accessor.
        2) 'elem' MUST be the address of an OCITypeElem pointer.
   DESCRIPTION:
        Get the result of a method.
   RETURNS:
        OCI_SUCCESS if the function completes successfully.
        OCI_INVALID_HANDLE if 'env' or 'err' is null. 
        OCI_ERROR if
            1) any of the required parameters is null.
            2) method returns no results.
   NOTES:
        The method must be unpinned when the accessed information is no 
        longer needed.
 */


/*--------------------------------------------------------------------------*/
/*                           PARAMETER ACCESSORS                            */
/*--------------------------------------------------------------------------*/

/*------------------------ OCITypeParamByPos -------------------------------*/

/* ** OBSOLETE ** */
sword OCITypeParamByPos(    OCIEnv *env, OCIError *err,
                            const OCITypeMethod *mdo, ub4 position, 
                            OCITypeElem **elem    );
/*
   NAME: OCITypeParamByPos - OCI Get a Parameter in a method By Position. 
   PARAMETERS: 
        env (IN/OUT) - OCI environment handle initialized in object mode
        err (IN/OUT) - error handle. If there is an error, it is
                recorded in 'err' and this function returns OCI_ERROR.
                The error recorded in 'err' can be retrieved by calling
                OCIErrorGet().
        mdo (IN) - pointer to the method descriptor in the object cache
        position (IN) - the parameter's position.  Positions start at 1.
        elem (OUT) - If this function completes successfully, 'elem' points to 
               the selected parameter descriptor in the object cache.
   REQUIRES:
        1) All type accessors require that the type be pinned before calling 
           any accessor. 
   DESCRIPTION:
        Get a parameter given its position in the method.  Positions start 
        at 1.  
   RETURNS:
        OCI_SUCCESS if the function completes successfully.
        OCI_INVALID_HANDLE if 'env' or 'err' is null. 
        OCI_ERROR if
            1) any of the required parameters is null.
            2) 'position' is not >= 1 and <= the number of parameters in the
               method.
   NOTES:
        The type must be unpinned when the accessed information is no 
        longer needed.
 */

/*------------------------ OCITypeParamByName -------------------------------*/

/* ** OBSOLETE ** */
sword OCITypeParamByName(    OCIEnv *env, OCIError *err,
                             const OCITypeMethod *mdo, 
                             const oratext *name, ub4 n_length,
                             OCITypeElem **elem    );
/*
   NAME: OCITypeParamByName - OCI Get a Parameter in a method By Name. 
   PARAMETERS: 
        env (IN/OUT) - OCI environment handle initialized in object mode
        err (IN/OUT) - error handle. If there is an error, it is
                recorded in 'err' and this function returns OCI_ERROR.
                The error recorded in 'err' can be retrieved by calling
                OCIErrorGet().
        mdo (IN) - pointer to the method descriptor in the object cache
        name (IN) - the parameter's name
        n_length (IN) - length (in bytes) of the 'name' parameter
        elem (OUT) - If this function completes successfully, 'elem' points to 
               the selected parameter descriptor in the object cache.
   REQUIRES:
        1) All type accessors require that the type be pinned before calling 
           any accessor. 
        2) if 'mdo' is not null, it must point to a valid method descriptor 
           in the object cache.
   DESCRIPTION:
        Get a parameter given its name.  
   RETURNS:
        OCI_SUCCESS if the function completes successfully.
        OCI_INVALID_HANDLE if 'env' or 'err' is null. 
        OCI_ERROR if
            1) any of the required parameters is null.
            2) the method does not contain a parameter with the input 'name'. 
   NOTES:
        The type must be unpinned when the accessed information is no 
        longer needed.
 */

/*------------------------ OCITypeParamPos ---------------------------------*/

/* ** OBSOLETE ** */
sword OCITypeParamPos(    OCIEnv *env, OCIError *err,
                          const OCITypeMethod *mdo, 
                          const oratext *name, ub4 n_length, ub4 *position, 
                          OCITypeElem **elem    );
/*
   NAME: OCITypeParamPos - OCI Get a parameter's position in a method
   PARAMETERS: 
        env (IN/OUT) - OCI environment handle initialized in object mode
        err (IN/OUT) - error handle. If there is an error, it is
                recorded in 'err' and this function returns OCI_ERROR.
                The error recorded in 'err' can be retrieved by calling
                OCIErrorGet().
        mdo (IN) - pointer to the method descriptor in the object cache
        name (IN) - the parameter's name
        n_length (IN) - length (in bytes) of the 'name' parameter
        position (OUT) - If this function completes successfully, 'position' 
               points to the position of the parameter in the method starting 
               at position 1. position MUST point to space for a ub4.
        elem (OUT) - If this function completes successfully, and 
               the input 'elem' is not NULL, 'elem' points to the selected 
               parameter descriptor in the object cache.
   REQUIRES:
        1) All type accessors require that the type be pinned before calling 
           any accessor. 
        2) if 'mdo' is not null, it must point to a valid method descriptor 
           in the object cache.
   DESCRIPTION:
        Get the position of a parameter in a method.  Positions start at 1.
   RETURNS:
        OCI_SUCCESS if the function completes successfully.
        OCI_INVALID_HANDLE if 'env' or 'err' is null. 
        OCI_ERROR if
            1) any of the parameters is null.
            2) the method does not contain a parameter with the input 'name'. 
   NOTES:
        The type must be unpinned when the accessed information is no 
        longer needed.
 */

/*------------------------ OCITypeParamElemMode -----------------------------*/

/* ** OBSOLETE ** */
OCITypeParamMode OCITypeElemParamMode(    OCIEnv *env, OCIError *err,
                                          const OCITypeElem *elem    );
/*
   NAME: OCITypeElemParamMode - OCI Get a parameter's mode
   PARAMETERS: 
        env (IN/OUT) - OCI environment handle initialized in object mode
        err (IN/OUT) - error handle. If there is an error, it is
                recorded in 'err' and this function returns OCI_ERROR.
                The error recorded in 'err' can be retrieved by calling
                OCIErrorGet().
        elem (IN) - pointer to the parameter descriptor in the object cache
                (represented by an OCITypeElem)
   REQUIRES:
        1) All type accessors require that the type be pinned before calling 
           any accessor. 
        2) All input parameters must not be NULL and must be valid.
   DESCRIPTION:
        Get the mode (in, out, or in/out) of the parameter.
   RETURNS:
        the mode (in, out, or in/out) of the parameter
   NOTES:
        The type must be unpinned when the accessed information is no 
        longer needed.
 */

/*------------------------- OCITypeElemDefaultValue -------------------------*/

/* ** OBSOLETE ** */
oratext* OCITypeElemDefaultValue(    OCIEnv *env, OCIError *err,
                                  const OCITypeElem *elem,
                                  ub4 *d_v_length    );
/*
   NAME: OCITypeElemDefaultValue - OCI Get the element's Default Value. 
   PARAMETERS: 
        env (IN/OUT) - OCI environment handle initialized in object mode
        err (IN/OUT) - error handle. If there is an error, it is
                recorded in 'err' and this function returns OCI_ERROR.
                The error recorded in 'err' can be retrieved by calling
                OCIErrorGet().
        elem (IN) - pointer to the parameter descriptor in the object cache
                (represented by an OCITypeElem)
        d_v_length (OUT) - length (in bytes) of the returned default value.
               The caller must allocate space for the ub4 before calling this 
               routine.
   REQUIRES:
        1) All type accessors require that the type be pinned before calling 
           any accessor. 
        2) All input parameters must not be NULL and must be valid.
   DESCRIPTION:
        Get the default value in text form (PL/SQL) of an element. For V8.0,
        this only makes sense for a method parameter.
   RETURNS:
        The default value (text) of the parameter.
   NOTES:
        The type must be unpinned when the accessed information is no 
        longer needed.
 */
 

/*--------------------------------------------------------------------------*/
/*                           TYPE VERSION TABLE                             */
/*--------------------------------------------------------------------------*/

/* For V8.0, the type version table is meant to be an internal data structure
   only for Oracle clients for type version maintanence purposes. A more
   general version of the API may be made public in subsequent releases. */


/*--------------------------- OCITypeVTInit --------------------------------*/
 
/* ** OBSOLETE ** */
sword OCITypeVTInit(    OCIEnv *env, OCIError *err    );
/*
   NAME: OCITypeVTInit - OCI type Version table INItialize
   PARAMETERS:
        env (IN/OUT) - OCI environment handle initialized in object mode
        err (IN/OUT) - error handle. If there is an error, it is
                recorded in 'err' and this function returns OCI_ERROR.
                The error recorded in 'err' can be retrieved by calling
                OCIErrorGet().
   REQUIRES:
        none
   DESCRIPTION:
        Allocate space for and initialize the type version table and the type
        version table's index.
   RETURNS:
        OCI_SUCCESS if the function completes successfully.
        OCI_INVALID_HANDLE if 'env' or 'err' is null.
        OCI_ERROR if internal errors occurrs during initialization.
 */
 
/*--------------------------- OCITypeVTInsert -------------------------------*/
 
/* ** OBSOLETE ** */
sword OCITypeVTInsert(    OCIEnv *env, OCIError *err, 
                          const oratext *schema_name, ub4 s_n_length, 
                          const oratext *type_name, ub4 t_n_length, 
                          const oratext *user_version, ub4 u_v_length    );
/*
   NAME: OCITypeVTInsert - OCI type Version table INSert entry.
   PARAMETERS:
        env (IN/OUT) - OCI environment handle initialized in object mode
        err (IN/OUT) - error handle. If there is an error, it is
                recorded in 'err' and this function returns OCI_ERROR.
                The error recorded in 'err' can be retrieved by calling
                OCIErrorGet().
        schema_name (IN, optional) - name of schema associated with the 
                  type.  By default, the user's schema name is used.
        s_n_length (IN) - length of the 'schema_name' parameter
        type_name (IN) - type name to insert
        t_n_length (IN) - length (in bytes) of the 'type_name' parameter
        user_version (IN) - user readable version of the type
        u_v_length (IN) - length (in bytes) of the 'user_version' parameter
   REQUIRES:
        none
   DESCRIPTION:
        Insert an entry into the type version table and the type version
        table's index.  The entry's type name and user readable version
        fields are updated with the input values.  All other fields are
        initialized to null.
   RETURNS:
        OCI_SUCCESS if the function completes successfully.
        OCI_INVALID_HANDLE if 'env' or 'err' is null.
        OCI_ERROR if
            1) any of the parameters is invalid.
            2) an entry for 'type_name' has already been registered in the
               type version table.
 */

/*------------------------------ OCITypeVTSelect ----------------------------*/

/* OCITypeVTSelect - OCI type VERSion table SELECT entry */
/* ** OBSOLETE ** */
sword OCITypeVTSelect(    OCIEnv *env, OCIError *err, 
                          const oratext *schema_name, ub4 s_n_length, 
                          const oratext *type_name, ub4 t_n_length, 
                          oratext **user_version, ub4 *u_v_length,
                        ub2 *version );
/*
   NAME: OCITypeVTSelect - OCI type Version table SELect entry.
   PARAMETERS:
        env (IN/OUT) - OCI environment handle initialized in object mode
        err (IN/OUT) - error handle. If there is an error, it is
                recorded in 'err' and this function returns OCI_ERROR.
                The error recorded in 'err' can be retrieved by calling
                OCIErrorGet().
        schema_name (IN, optional) - name of schema associated with the 
                  type.  By default, the user's schema name is used.
        s_n_length (IN) - length of the 'schema_name' parameter
        type_name (IN) - type name to select
        t_n_length (IN) - length (in bytes) of the 'type_name' parameter
        user_version (OUT, optional) - pointer to user readable version of the
                 type
        u_v_length (OUT, optional) - length (in bytes) of the 'user_version'
                 parameter
        version (OUT, optional) - internal type version
   REQUIRES:
        All input parameters must not be NULL and must be valid.
   DESCRIPTION:
        Select an entry in the type version table by name.
   RETURNS:
        OCI_SUCCESS if the function completes successfully.
        OCI_INVALID_HANDLE if 'env' or 'err' is null.
        OCI_ERROR if
            1) any of the parameters is invalid.
            2) an entry with 'type_name' does not exist.
 */

/* Compatibility function - following function prototype retained for 
   compatibility only */
sword ortgcty(    OCIEnv *env, OCIError *err, OCIType *coll_tdo,
                  OCIType **collelem_tdo    );

/*---------------------------------------------------------------------------*/
/*               Transient Type Construction functions                       */
/*---------------------------------------------------------------------------*/

sword OCITypeBeginCreate(OCISvcCtx *svchp, OCIError *errhp, OCITypeCode tc,
                         OCIDuration dur, OCIType **type);
/*
   NAME: OCITypeBeginCreate - OCI Type Begin Creation of a transient type.
   REMARKS
       Begins the construction process for a transient type. The type will be
       anonymous (no name). To create a persistent named type, the CREATE TYPE
       statement should be used from SQL. Transient types have no identity.
       They are pure values.
   PARAMETERS:
       svchp (IN)       - The OCI Service Context.
       errhp (IN/OUT)   - The OCI error handle. If there is an error, it is
                          recorded in errhp and this function returns
                          OCI_ERROR. Diagnostic information can be obtained by
                          calling OCIErrorGet().
       tc               - The TypeCode for the type. The Typecode could
                          correspond to a User Defined Type or a Built-in type.
                          Currently, the permissible values for User Defined 
                          Types are OCI_TYPECODE_OBJECT for an Object Type
                          (structured), OCI_TYPECODE_VARRAY for a VARRAY
                          collection type or OCI_TYPECODE_TABLE for a nested
                          table collection type. For Object types,
                          OCITypeAddAttr() needs to be called to add each of
                          the attribute types. For Collection types,
                          OCITypeSetCollection() needs to be called.
                          Subsequently, OCITypeEndCreate() needs to be called 
                          to finish the creation process.
                          The permissible values for Built-in type codes are
                          specified in the user manual. Additional information
                          on built-ins if any (like precision, scale for
                          numbers, character set info for VARCHAR2s etc.) must
                          be set with a subsequent call to OCITypeSetBuiltin().
                          Subsequently OCITypeEndCreate() needs to be called
                          to finish the creation process.
       dur              - The allocation duration for the Type. Could be a
                          predefined or a user defined duration.
       type(OUT)        - The OCIType (Type Descriptor) that is being
                          constructed.
  RETURNS:
        OCI_SUCCESS if the function completes successfully.
        OCI_ERROR on error.
*/


sword OCITypeSetCollection(OCISvcCtx *svchp, OCIError *errhp, OCIType *type,
                           OCIParam *collelem_info, ub4 coll_count);
/*
   NAME: OCITypeSetCollection - OCI Type Set Collection information
   REMARKS :
       Set Collection type information. This call can be called only if the
       OCIType has been constructed with a collection typecode.
   PARAMETERS:
       svchp (IN)      -  The OCI Service Context.
       errhp (IN/OUT)  -  The OCI error handle. If there is an error, it is 
                          recorded in errhp and this function returns
                          OCI_ERROR. Diagnostic information can be obtained by
                          calling OCIErrorGet().
       type(IN OUT)    -  The OCIType (Type Descriptor) that is being
                          constructed.
       collelem_info   -  collelem_info provides information on the collection
                          element. It is obtained by allocating an OCIParam
                          (parameter handle) and setting type information in
                          the OCIParam using OCIAttrSet() calls.
       coll_count      -  The count of elements in the collection. Pass 0 for
                          a nested table (unbounded).
  RETURNS:
        OCI_SUCCESS if the function completes successfully.
        OCI_ERROR on error.
*/

sword OCITypeSetBuiltin(OCISvcCtx *svchp, OCIError *errhp, OCIType *type,
                        OCIParam *builtin_info);
/*
   NAME: OCITypeSetBuiltin - OCI Type Set Builtin information.
   REMARKS:
       Set Built-in type information. This call can be called only if the
       OCIType has been constructed with a built-in typecode
       (OCI_TYPECODE_NUMBER etc.).
   PARAMETERS:
       svchp (IN)       - The OCI Service Context.
       errhp (IN/OUT)   - The OCI error handle. If there is an error, it is 
                          recorded in errhp and this function returns
                          OCI_ERROR. Diagnostic information can be obtained by
                          calling OCIErrorGet().
       type(IN OUT)     - The OCIType (Type Descriptor) that is being
                          constructed.
       builtin_info     - builtin_info provides information on the built-in
                          (like precision, scale, charater set etc.). It is
                          obtained by allocating an OCIParam (parameter handle)
                          and setting type information in the OCIParam using
                           OCIAttrSet() calls.
  RETURNS:
        OCI_SUCCESS if the function completes successfully.
        OCI_ERROR on error.
*/

sword OCITypeAddAttr(OCISvcCtx *svchp, OCIError *errhp, OCIType *type,
                     const oratext *a_name, ub4 a_length, 
                     OCIParam *attr_info);
/*
   NAME: OCITypeAddAttr - OCI Type Add Attribute to an Object Type.
   REMARKS:
       Adds an attribute to an Object type (that was constructed earlier with
       typecode OCI_TYPECODE_OBJECT).
   PARAMETERS:
       svchp (IN)       - The OCI Service Context
       errhp (IN/OUT)   - The OCI error handle. If there is an error, it is
                          recorded in errhp and this function returns
                          OCI_ERROR. Diagnostic information can be obtained by
                          calling OCIErrorGet().
       type (IN/OUT)    - The Type description that is being constructed.
       a_name(IN)       - Optional. gives the name of the attribute.
       a_length         - Optional. gives length of attribute name.
       attr_info        - Information on the attribute. It is obtained by
                          allocating an OCIParam (parameter handle) and setting
                          type information in the OCIParam using OCIAttrSet()
                          calls.
  RETURNS:
        OCI_SUCCESS if the function completes successfully.
        OCI_ERROR on error.
*/

sword OCITypeEndCreate(OCISvcCtx *svchp, OCIError *errhp, OCIType *type);
/*
   NAME: OCITypeEndCreate - OCI Type End Creation
   REMARKS:
       Finishes construction of a type description.Subsequently, only access
       will be allowed.
   PARAMETERS:
       svchp (IN)       - The OCI Service Context
       errhp (IN/OUT)   - The OCI error handle. If there is an error, it is
                          recorded in errhp and this function returns
                          OCI_ERROR. Diagnostic information can be obtained by
                          calling OCIErrorGet().
       type (IN/OUT)    - The Type description that is being constructed.
   RETURNS:
        OCI_SUCCESS if the function completes successfully.
        OCI_ERROR on error.
*/

/*=========================*/
/* PUBLIC MACROS AND FLAGS */
/*=========================*/

/*--------------------------------------------------------------------------*/
/*                          TYPE ELEMENT FLAGS                              */
/*--------------------------------------------------------------------------*/

#define OCI_TYPEELEM_REF        0x8000                   /* element is a REF */
#define OCI_TYPEPARAM_REQUIRED  0x0800              /* parameter is required */

/* macros to test flags */
#define OCI_TYPEELEM_IS_REF(elem_flag) \
  (((elem_flag) & OCI_TYPEELEM_REF)!=0)
#define OCI_TYPEPARAM_IS_REQUIRED(param_flag) \
  (((param_flag) & OCI_TYPEPARAM_REQUIRED)!=0)


#endif /* ORT_ORACLE */

                                                                                                                                          usr/include/oracle/19.19/client64/xa.h                                                              0000644 0000000 0000000 00000023244 14464070704 015652  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* Copyright (c) 1992, 2006, Oracle. All rights reserved.  */

/*
   NAME
     xa.h - <one-line expansion of the name>
   DESCRIPTION
     <short description of component this file declares/defines>
   PUBLIC FUNCTION(S)
     <list of external functions declared/defined - with one-line descriptions>
   PRIVATE FUNCTION(S)
     <list of static functions defined in .c file - with one-line descriptions>
   RETURNS
     <function return values, for .c file with single function>
   NOTES
     <other useful comments, qualifications, etc.>
     
     This is the public XA .h file

   MODIFIED   (MM/DD/YY)
    yohu       08/27/06  - XA/RAC project changes: XAER_AFFINITY
    dmukhin    06/29/05  - ANSI prototypes; miscellaneous cleanup 
    whe        09/01/99 -  976457:check __cplusplus for C++ code
    ntang      10/20/98 -  Remove TMCACHE & TMFORCL
    abhide     08/04/97 -  implement xaoforcl
    abhide     07/23/97 -  XA OTS project changes
    schandra   02/20/96 -  lint
    abhide     04/07/94 -  merge changes from branch 1.1.710.1
    abhide     02/14/94 -  Creation
    abhide     02/10/94 -  Creation
    abhide     02/10/94 -  Creation
*/
/*
 * xa.h header
 *      Typed in from X/Open doc of March 13, 1990
 *      Updated to Parsippany II draft, March, 1991
 *      Updated to Co Review draft, 19 Sep 1991
 */

#ifndef XA_H
#define XA_H


/* 
 * Transaction branch identification: XID and NULLXID:
 */


#define XIDDATASIZE 128         /* size in bytes */
#define MAXGTRIDSIZE    64      /* maximum size in bytes of gtrid */
#define MAXBQUALSIZE    64      /* maximum size in bytes of bqual */
struct xid_t {
    long        formatID;       /* format identifier */
    long        gtrid_length;   /* value from 1 through 64 */
    long        bqual_length;   /* value from 1 through 64 */
    char        data[XIDDATASIZE];
};
typedef struct xid_t XID;

/*
 * A value of -1 in formatID means that the XID is null.
 */
/*
 * Declarations of routines by which RMs call TMs:
 */

int ax_reg(int, XID *, long);
int ax_unreg(int, long);
/*
 * XA Switch Data Structure
 */
#define RMNAMESZ 32             /* length of resource manager name, */
                                /* including the null terminator */
#define MAXINFOSIZE 256         /* maximum size in bytes of xa_info strings, */
                                /* including the null terminator */
struct xa_switch_t {
    char name[RMNAMESZ];        /* name of resource manager */
    long flags;                 /* resource manager specific options */
    long version;               /* must be 0 */

    int  (*xa_open_entry)(char *, int, long);   /*xa_open function pointer*/
    int  (*xa_close_entry)(char *, int, long);  /*xa_close function pointer*/
    int  (*xa_start_entry)(XID *, int, long);   /*xa_start function pointer*/
    int  (*xa_end_entry)(XID *, int, long);     /*xa_end function pointer*/
    int  (*xa_rollback_entry)(XID *, int, long);
                                               /*xa_rollback function pointer*/
    int  (*xa_prepare_entry)(XID *, int, long); /*xa_prepare function pointer*/
    int  (*xa_commit_entry)(XID *, int, long);  /*xa_commit function pointer*/
    int  (*xa_recover_entry)(XID *, long, int, long);
                                                /*xa_recover function pointer*/
    int  (*xa_forget_entry)(XID *, int, long);  /*xa_forget function pointer*/
    int  (*xa_complete_entry)(int *, int *, int, long);
};

/*
 * Flag definition for the RM switch
 */
#define TMNOFLAGS       0x00000000L     /* no resource manager features
                                           selected */  
#define TMREGISTER      0x00000001L     /* resource manager dynamically
                                           registers */
#define TMNOMIGRATE     0x00000002L     /* resource manager does not support
                                           association migration */
#define TMUSEASYNC      0x00000004L     /* resource manager supports
                                           asynchronous operations */
/*
 * Flag definitions for xa_ and ax_ routines
 */
/* Use TMNOFLAGS, defined above, when not specifying other flags */
#define TMASYNC         0x80000000L     /* perform routine asynchronously */
#define TMONEPHASE      0x40000000L     /* caller is using one-phase commit
                                        optimisation */
#define TMFAIL          0x20000000L     /* dissociates caller and marks
                                           transaction branch rollback-only */
#define TMNOWAIT        0x10000000L     /* return if blocking condition
                                           exists */
#define TMRESUME        0x08000000L     /* caller is resuming association
                                           with suspended transaction branch */
#define TMSUCCESS       0x04000000L     /* dissociate caller from transaction
                                        branch */
#define TMSUSPEND       0x02000000L     /* caller is suspending, not ending,
                                           association */
#define TMSTARTRSCAN    0x01000000L     /* start a recovery scan */
#define TMENDRSCAN      0x00800000L     /* end a recovery scan */
#define TMMULTIPLE      0x00400000L     /* wait for any asynchronous
                                           operation */
#define TMJOIN          0x00200000L     /* caller is joining existing
                                        transaction branch */
#define TMMIGRATE       0x00100000L     /* caller intends to perform
                                        migration */

/* 
 * ax_() return codes (transaction manager reports to resource manager)
 */
#define TM_JOIN         2       /* caller is joining existing transaction
                                branch */
#define TM_RESUME       1       /* caller is resuming association with
                                   suspended transaction branch */
#define TM_OK   0               /* normal execution */
#define TMER_TMERR      -1      /* an error occurred in the transaction
                                manager */
#define TMER_INVAL      -2      /* invalid arguments were given */
#define TMER_PROTO      -3      /* routine invoked in an improper context */

/* 
 * xa_() return codes (resource manager reports to transaction manager)
 */
#define XA_RBBASE       100             /* The inclusive lower bound of the
                                           rollback codes */
#define XA_RBROLLBACK   XA_RBBASE       /* The rollback was caused by an
                                           unspecified reason */
#define XA_RBCOMMFAIL   XA_RBBASE+1     /* The rollback was caused by a
                                           communication failure */
#define XA_RBDEADLOCK   XA_RBBASE+2     /* A deadlock was detected */
#define XA_RBINTEGRITY  XA_RBBASE+3     /* A condition that violates the
                                           integrity of the resources was
                                           detected */
#define XA_RBOTHER      XA_RBBASE+4     /* The resource manager rolled back the
                                           transaction for a reason not on this
                                           list */
#define XA_RBPROTO      XA_RBBASE+5     /* A protocal error occurred in the
                                           resource manager */
#define XA_RBTIMEOUT    XA_RBBASE+6     /* A transaction branch took too long*/
#define XA_RBTRANSIENT  XA_RBBASE+7     /* May retry the transaction branch */
#define XA_RBEND        XA_RBTRANSIENT  /* The inclusive upper bound of the
                                           rollback codes */

#define XA_NOMIGRATE    9               /* resumption must occur where
                                           suspension occurred */
#define XA_HEURHAZ      8               /* the transaction branch may have been
                                           heuristically completed */
#define XA_HEURCOM      7               /* the transaction branch has been
                                           heuristically comitted */
#define XA_HEURRB       6               /* the transaction branch has been
                                           heuristically rolled back */
#define XA_HEURMIX      5               /* the transaction branch has been
                                           heuristically committed and rolled
                                           back */
#define XA_RETRY        4               /* routine returned with no effect
                                           and may be re-issued */
#define XA_RDONLY       3               /* the transaction was read-only
                                           and has been committed */
#define XA_OK           0               /* normal execution */
#define XAER_ASYNC      -2              /* asynchronous operation already
                                           outstanding */
#define XAER_RMERR      -3              /* a resource manager error occurred
                                        in the transaction branch */
#define XAER_NOTA       -4              /* the XID is not valid */
#define XAER_INVAL      -5              /* invalid arguments were given */
#define XAER_PROTO      -6              /* routine invoked in an improper
                                           context */
#define XAER_RMFAIL     -7              /* resource manager unavailable */
#define XAER_DUPID      -8              /* the XID already exists */
#define XAER_OUTSIDE    -9              /* resource manager doing work */
                                        /* outside global transaction */

#define XAER_AFFINITY   -10             /* XA on RAC: resumption must occur on
                                           RAC instance where the transaction
                                           branch was created */
                                          
#endif /* ifndef XA_H */
                                                                                                                                                                                                                                                                                                                                                            usr/include/oracle/19.6/                                                                            0000755 0000000 0000000 00000000000 14723047425 013352  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/include/oracle/19.6/client64/                                                                   0000755 0000000 0000000 00000000000 14723047425 015002  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/include/oracle/19.6/client64/ldap.h                                                             0000644 0000000 0000000 00000125071 13576202531 016075  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*
 * $ ldap.h Release 12.2.1.3.0 $ 
 */

/* Copyright (c) 1998, 2017, Oracle and/or its affiliates. 
All rights reserved.*/
/*
   NAME
     ldap.h - Used by clients. 
   DESCRIPTION
     <short description of component this file declares/defines>
   PUBLIC FUNCTION(S)
     <list of external functions declared/defined - with one-line descriptions>
   PRIVATE FUNCTION(S)
     <list of static functions defined in .c file - with one-line descriptions>
   RETURNS
     <function return values, for .c file with single function>
   NOTES
     <other useful comments, qualifications, etc.>
   MODIFIED   (MM/DD/YY)
*/
/*
* Copyright (c) 1990, 2017, Oracle and/or its affiliates. All rights reserved.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that this notice is preserved and that due credit is given
 * to the University of Michigan at Ann Arbor. The name of the University
 * may not be used to endorse or promote products derived from this
 * software without specific prior written permission. This software
 * is provided ``as is'' without express or implied warranty.
 */

#ifndef GSLC_ORACLE
#define GSLC_ORACLE

#ifdef __cplusplus
extern "C" {
#endif


#ifdef WINSOCK
