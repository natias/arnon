
=item *

C<-Werror=pointer-arith>

=item *

C<-Werror=vla>

=back

The following flags would be nice to have but they would first need
their own Augean stablemaster:

=over 4

=item *

C<-Wshadow>

=item *

C<-Wstrict-prototypes>

=back

The C<-Wtraditional> is another example of the annoying tendency of gcc
to bundle a lot of warnings under one switch (it would be impossible to
deploy in practice because it would complain a lot) but it does contain
some warnings that would be beneficial to have available on their own,
such as the warning about string constants inside macros containing the
macro arguments: this behaved differently pre-ANSI than it does in
ANSI, and some C compilers are still in transition, AIX being an
example.

=head2 Warnings of other C compilers

Other C compilers (yes, there B<are> other C compilers than gcc) often
have their "strict ANSI" or "strict ANSI with some portability
extensions" modes on, like for example the Sun Workshop has its C<-Xa>
mode on (though implicitly), or the DEC (these days, HP...) has its
C<-std1> mode on.

=head1 MEMORY DEBUGGERS

B<NOTE 1>: Running under older memory debuggers such as Purify,
valgrind or Third Degree greatly slows down the execution: seconds
become minutes, minutes become hours.  For example as of Perl 5.8.1,
the F<ext/Encode/t/Unicode.t> test takes extraordinarily long to
complete under e.g. Purify, Third Degree, and valgrind.  Under valgrind
it takes more than six hours, even on a snappy computer.  Said test
must be doing something that is quite unfriendly for memory debuggers.
If you don't feel like waiting, you can simply kill the perl process.
Roughly valgrind slows down execution by factor 10, AddressSanitizer by
factor 2.

B<NOTE 2>: To minimize the number of memory leak false alarms (see
L</PERL_DESTRUCT_LEVEL> for more information), you have to set the
environment variable C<PERL_DESTRUCT_LEVEL> to 2.  For example, like
this:

    env PERL_DESTRUCT_LEVEL=2 valgrind ./perl -Ilib ...

B<NOTE 3>: There are known memory leaks when there are compile-time
errors within C<eval> or C<require>; seeing C<S_doeval> in the call
stack is a good sign of these.  Fixing these leaks is non-trivial,
unfortunately, but they must be fixed eventually.

B<NOTE 4>: L<DynaLoader> will not clean up after itself completely
unless Perl is built with the Configure option
C<-Accflags=-DDL_UNLOAD_ALL_AT_EXIT>.

=head2 valgrind

The valgrind tool can be used to find out both memory leaks and illegal
heap memory accesses.  As of version 3.3.0, Valgrind only supports
Linux on x86, x86-64 and PowerPC and Darwin (OS X) on x86 and x86-64.
The special "test.valgrind" target can be used to run the tests under
valgrind.  Found errors and memory leaks are logged in files named
F<testfile.valgrind> and by default output is displayed inline.

Example usage:

    make test.valgrind

Since valgrind adds significant overhead, tests will take much longer
to run.  The valgrind tests support being run in parallel to help with
this:

    TEST_JOBS=9 make test.valgrind

Note that the above two invocations will be very verbose as reachable
memory and leak-checking is enabled by default.  If you want to just
see pure errors, try:

    VG_OPTS='-q --leak-check=no --show-reachable=no' TEST_JOBS=9 \
        make test.valgrind

Valgrind also provides a cachegrind tool, invoked on perl as:

    VG_OPTS=--tool=cachegrind make test.valgrind

As system libraries (most notably glibc) are also triggering errors,
valgrind allows to suppress such errors using suppression files.  The
default suppression file that comes with valgrind already catches a lot
of them.  Some additional suppressions are defined in F<t/perl.supp>.

To get valgrind and for more information see L<https://valgrind.org/>.

=head2 AddressSanitizer

AddressSanitizer ("ASan") consists of a compiler instrumentation module
and a run-time C<malloc> library. ASan is available for a variety of
architectures, operating systems, and compilers (see project link
below). It checks for unsafe memory usage, such as use after free and
buffer overflow conditions, and is fast enough that you can easily
compile your debugging or optimized perl with it. Modern versions of
ASan check for memory leaks by default on most platforms, otherwise
(e.g. x86_64 OS X) this feature can be enabled via
C<ASAN_OPTIONS=detect_leaks=1>.


To build perl with AddressSanitizer, your Configure invocation should
look like:

    sh Configure -des -Dcc=clang \
       -Accflags=-fsanitize=address -Aldflags=-fsanitize=address \
       -Alddlflags=-shared\ -fsanitize=address \
       -fsanitize-blacklist=`pwd`/asan_ignore

where these arguments mean:

=over 4

=item * -Dcc=clang

This should be replaced by the full path to your clang executable if it
is not in your path.

=item * -Accflags=-fsanitize=address

Compile perl and extensions sources with AddressSanitizer.

=item * -Aldflags=-fsanitize=address

Link the perl executable with AddressSanitizer.

=item * -Alddlflags=-shared\ -fsanitize=address

Link dynamic extensions with AddressSanitizer.  You must manually
specify C<-shared> because using C<-Alddlflags=-shared> will prevent
Configure from setting a default value for C<lddlflags>, which usually
contains C<-shared> (at least on Linux).

=item * -fsanitize-blacklist=`pwd`/asan_ignore

AddressSanitizer will ignore functions listed in the C<asan_ignore>
file.  (This file should contain a short explanation of why each of the
functions is listed.)

=back

See also L<https://github.com/google/sanitizers/wiki/AddressSanitizer>.

=head2 Dr Memory

Dr. Memory is a tool similar to valgrind which is usable on Windows
and Linux.

It supports heap checking like C<memcheck> from valgrind.  There are
also other tools included.

See L<https://drmemory.org/>.


=head1 PROFILING

Depending on your platform there are various ways of profiling Perl.

There are two commonly used techniques of profiling executables:
I<statistical time-sampling> and I<basic-block counting>.

The first method takes periodically samples of the CPU program counter,
and since the program counter can be correlated with the code generated
for functions, we get a statistical view of in which functions the
program is spending its time.  The caveats are that very small/fast
functions have lower probability of showing up in the profile, and that
periodically interrupting the program (this is usually done rather
frequently, in the scale of milliseconds) imposes an additional
overhead that may skew the results.  The first problem can be
alleviated by running the code for longer (in general this is a good
idea for profiling), the second problem is usually kept in guard by the
profiling tools themselves.

The second method divides up the generated code into I<basic blocks>.
Basic blocks are sections of code that are entered only in the
beginning and exited only at the end.  For example, a conditional jump
starts a basic block.  Basic block profiling usually works by
I<instrumenting> the code by adding I<enter basic block #nnnn>
book-keeping code to the generated code.  During the execution of the
code the basic block counters are then updated appropriately.  The
caveat is that the added extra code can skew the results: again, the
profiling tools usually try to factor their own effects out of the
results.

=head2 Gprof Profiling

I<gprof> is a profiling tool available in many Unix platforms which
uses I<statistical time-sampling>.  You can build a profiled version of
F<perl> by compiling using gcc with the flag C<-pg>.  Either edit
F<config.sh> or re-run F<Configure>.  Running the profiled version of
Perl will create an output file called F<gmon.out> which contains the
profiling data collected during the execution.

quick hint:

    $ sh Configure -des -Dusedevel -Accflags='-pg' \
        -Aldflags='-pg' -Alddlflags='-pg -shared' \
        && make perl
    $ ./perl ... # creates gmon.out in current directory
    $ gprof ./perl > out
    $ less out

(you probably need to add C<-shared> to the <-Alddlflags> line until RT
#118199 is resolved)

The F<gprof> tool can then display the collected data in various ways.
Usually F<gprof> understands the following options:

=over 4

=item * -a

Suppress statically defined functions from the profile.

=item * -b

Suppress the verbose descriptions in the profile.

=item * -e routine

Exclude the given routine and its descendants from the profile.

=item * -f routine

Display only the given routine and its descendants in the profile.

=item * -s

Generate a summary file called F<gmon.sum> which then may be given to
subsequent gprof runs to accumulate data over several runs.

=item * -z

Display routines that have zero usage.

=back

For more detailed explanation of the available commands and output
formats, see your own local documentation of F<gprof>.

=head2 GCC gcov Profiling

I<basic block profiling> is officially available in gcc 3.0 and later.
You can build a profiled version of F<perl> by compiling using gcc with
the flags C<-fprofile-arcs -ftest-coverage>.  Either edit F<config.sh>
or re-run F<Configure>.

quick hint:

    $ sh Configure -des -Dusedevel -Doptimize='-g' \
        -Accflags='-fprofile-arcs -ftest-coverage' \
        -Aldflags='-fprofile-arcs -ftest-coverage' \
        -Alddlflags='-fprofile-arcs -ftest-coverage -shared' \
        && make perl
    $ rm -f regexec.c.gcov regexec.gcda
    $ ./perl ...
    $ gcov regexec.c
    $ less regexec.c.gcov

(you probably need to add C<-shared> to the <-Alddlflags> line until RT
#118199 is resolved)

Running the profiled version of Perl will cause profile output to be
generated.  For each source file an accompanying F<.gcda> file will be
created.

To display the results you use the I<gcov> utility (which should be
installed if you have gcc 3.0 or newer installed).  F<gcov> is run on
source code files, like this

    gcov sv.c

which will cause F<sv.c.gcov> to be created.  The F<.gcov> files
contain the source code annotated with relative frequencies of
execution indicated by "#" markers.  If you want to generate F<.gcov>
files for all profiled object files, you can run something like this:

    for file in `find . -name \*.gcno`
    do sh -c "cd `dirname $file` && gcov `basename $file .gcno`"
    done

Useful options of F<gcov> include C<-b> which will summarise the basic
block, branch, and function call coverage, and C<-c> which instead of
relative frequencies will use the actual counts.  For more information
on the use of F<gcov> and basic block profiling with gcc, see the
latest GNU CC manual.  As of gcc 4.8, this is at
L<https://gcc.gnu.org/onlinedocs/gcc/Gcov-Intro.html#Gcov-Intro>.

=head2 callgrind profiling

callgrind is a valgrind tool for profiling source code. Paired with
kcachegrind (a Qt based UI), it gives you an overview of where code is
taking up time, as well as the ability to examine callers, call trees,
and more. One of its benefits is you can use it on perl and XS modules
that have not been compiled with debugging symbols.

If perl is compiled with debugging symbols (C<-g>), you can view the
annotated source and click around, much like L<Devel::NYTProf>'s HTML
output.

For basic usage:

    valgrind --tool=callgrind ./perl ...

By default it will write output to F<callgrind.out.PID>, but you can
change that with C<--callgrind-out-file=...>

To view the data, do:

    kcachegrind callgrind.out.PID

If you'd prefer to view the data in a terminal, you can use
F<callgrind_annotate>.  In its basic form:

    callgrind_annotate callgrind.out.PID | less

Some useful options are:

=over 4

=item * --threshold

Percentage of counts (of primary sort event) we are interested in. The
default is 99%, 100% might show things that seem to be missing.

=item * --auto

Annotate all source files containing functions that helped reach the
event count threshold.

=back

=head2 C<profiler> profiling (Cygwin)

Cygwin allows for C<gprof> profiling and C<gcov> coverage testing, but
this only profiles the main executable.

You can use the C<profiler> tool to perform sample based profiling, it
requires no special preparation of the executables beyond debugging
symbols.

This produces sampling data which can be processed with C<gprof>.

There is L<limited
documentation|https://www.cygwin.com/cygwin-ug-net/profiler.html> on
the Cygwin web site.

=head2 Visual Studio Profiling

You can use the Visual Studio profiler to profile perl if you've built
perl with MSVC, even though we build perl at the command-line.  You
will need to build perl with C<CFG=Debug> or C<CFG=DebugSymbols>.

The Visual Studio profiler is a sampling profiler.

See L<the visual studio
documentation|https://github.com/MicrosoftDocs/visualstudio-docs/blob/main/docs/profiling/beginners-guide-to-performance-profiling.md>
to get started.

=head1 MISCELLANEOUS TRICKS

=head2 PERL_DESTRUCT_LEVEL

If you want to run any of the tests yourself manually using e.g.
valgrind, please note that by default perl B<does not> explicitly clean
up all the memory it has allocated (such as global memory arenas) but
instead lets the C<exit()> of the whole program "take care" of such
allocations, also known as "global destruction of objects".

There is a way to tell perl to do complete cleanup: set the environment
variable C<PERL_DESTRUCT_LEVEL> to a non-zero value.  The F<t/TEST>
wrapper does set this to 2, and this is what you need to do too, if you
don't want to see the "global leaks": For example, for running under
valgrind

    env PERL_DESTRUCT_LEVEL=2 valgrind ./perl -Ilib t/foo/bar.t

(Note: the mod_perl Apache module uses this environment variable for
its own purposes and extends its semantics.  Refer to L<the mod_perl
documentation|https://perl.apache.org/docs/> for more information.
Also, spawned threads do the equivalent of setting this variable to the
value 1.)

If, at the end of a run, you get the message I<N scalars leaked>, you
can recompile with C<-DDEBUG_LEAKING_SCALARS> (C<Configure
-Accflags=-DDEBUG_LEAKING_SCALARS>), which will cause the addresses of
all those leaked SVs to be dumped along with details as to where each
SV was originally allocated.  This information is also displayed by
L<Devel::Peek>.  Note that the extra details recorded with each SV
increase memory usage, so it shouldn't be used in production
environments.  It also converts C<new_SV()> from a macro into a real
function, so you can use your favourite debugger to discover where
those pesky SVs were allocated.

If you see that you're leaking memory at runtime, but neither valgrind
nor C<-DDEBUG_LEAKING_SCALARS> will find anything, you're probably
leaking SVs that are still reachable and will be properly cleaned up
during destruction of the interpreter.  In such cases, using the C<-Dm>
switch can point you to the source of the leak.  If the executable was
built with C<-DDEBUG_LEAKING_SCALARS>, C<-Dm> will output SV
allocations in addition to memory allocations.  Each SV allocation has
a distinct serial number that will be written on creation and
destruction of the SV.  So if you're executing the leaking code in a
loop, you need to look for SVs that are created, but never destroyed
between each cycle.  If such an SV is found, set a conditional
breakpoint within C<new_SV()> and make it break only when
C<PL_sv_serial> is equal to the serial number of the leaking SV.  Then
you will catch the interpreter in exactly the state where the leaking
SV is allocated, which is sufficient in many cases to find the source
of the leak.

As C<-Dm> is using the PerlIO layer for output, it will by itself
allocate quite a bunch of SVs, which are hidden to avoid recursion. You
can bypass the PerlIO layer if you use the SV logging provided by
C<-DPERL_MEM_LOG> instead.

=for apidoc_section $debugging
=for apidoc Amnh||PL_sv_serial

=head2 Leaked SV spotting: sv_mark_arenas() and sv_sweep_arenas()

These functions exist only on C<DEBUGGING> builds. The first marks all
live SVs which can be found in the SV arenas with the C<SVf_BREAK> flag.
The second lists any such SVs which don't have the flag set, and resets
the flag on the rest. They are intended to identify SVs which are being
created, but not freed, between two points in code. They can be used
either by temporarily adding calls to them in the relevant places in the
code, or by calling them directly from a debugger.

For example, suppose the following code was found to be leaking:

    while (1) { eval '\(1..3)' }

A F<gdb> session on a threaded perl might look something like this:

    $ gdb ./perl
    (gdb) break Perl_pp_entereval
    (gdb) run -e'while (1) { eval q{\(1..3)} }'
    ...
    Breakpoint 1, Perl_pp_entereval ....
    (gdb) call Perl_sv_mark_arenas(my_perl)
    (gdb) continue
    ...
    Breakpoint 1, Perl_pp_entereval ....`
    (gdb) call Perl_sv_sweep_arenas(my_perl)
    Unmarked SV: 0xaf23a8: AV()
    Unmarked SV: 0xaf2408: IV(1)
    Unmarked SV: 0xaf2468: IV(2)
    Unmarked SV: 0xaf24c8: IV(3)
    Unmarked SV: 0xace6c8: PV("AV()"\0)
    Unmarked SV: 0xace848: PV("IV(1)"\0)
    (gdb) 

Here, at the start of the first call to pp_entereval(), all existing SVs
are marked. Then at the start of the second call, we list all the SVs
which have been since been created but not yet freed. It is quickly clear
that an array and its three elements are likely not being freed, perhaps
as a result of a bug during constant folding. The final two SVs are just
temporaries created during the debugging output and can be ignored.

This trick relies on the C<SVf_BREAK> flag not otherwise being used. This
flag is typically used only during global destruction, but also sometimes
for a mark and sweep operation when looking for common elements on the two
sides of a list assignment. The presence of the flag can also alter the
behaviour of some specific actions in the core, such as choosing whether to
copy or to COW a string SV. So turning it on can occasionally alter the
behaviour of code slightly.

=head2 PERL_MEM_LOG

If compiled with C<-DPERL_MEM_LOG> (C<-Accflags=-DPERL_MEM_LOG>), both
memory and SV allocations go through logging functions, which is handy
for breakpoint setting.

Unless C<-DPERL_MEM_LOG_NOIMPL> (C<-Accflags=-DPERL_MEM_LOG_NOIMPL>) is
also compiled, the logging functions read $ENV{PERL_MEM_LOG} to
determine whether to log the event, and if so how:

    $ENV{PERL_MEM_LOG} =~ /m/           Log all memory ops
    $ENV{PERL_MEM_LOG} =~ /s/           Log all SV ops
    $ENV{PERL_MEM_LOG} =~ /c/           Additionally log C backtrace for
                                        new_SV events
    $ENV{PERL_MEM_LOG} =~ /t/           include timestamp in Log
    $ENV{PERL_MEM_LOG} =~ /^(\d+)/      write to FD given (default is 2)

Memory logging is somewhat similar to C<-Dm> but is independent of
C<-DDEBUGGING>, and at a higher level; all uses of Newx(), Renew(), and
Safefree() are logged with the caller's source code file and line
number (and C function name, if supported by the C compiler).  In
contrast, C<-Dm> is directly at the point of C<malloc()>.  SV logging
is similar.

Since the logging doesn't use PerlIO, all SV allocations are logged and
no extra SV allocations are introduced by enabling the logging.  If
compiled with C<-DDEBUG_LEAKING_SCALARS>, the serial number for each SV
allocation is also logged.

The C<c> option uses the C<Perl_c_backtrace> facility, and therefore
additionally requires the Configure C<-Dusecbacktrace> compile flag in
order to access it.

=head2 DDD over gdb

Those debugging perl with the DDD frontend over gdb may find the
following useful:

You can extend the data conversion shortcuts menu, so for example you
can display an SV's IV value with one click, without doing any typing.
To do that simply edit ~/.ddd/init file and add after:

  ! Display shortcuts.
  Ddd*gdbDisplayShortcuts: \
  /t ()   // Convert to Bin\n\
  /d ()   // Convert to Dec\n\
  /x ()   // Convert to Hex\n\
  /o ()   // Convert to Oct(\n\

the following two lines:

  ((XPV*) (())->sv_any )->xpv_pv  // 2pvx\n\
  ((XPVIV*) (())->sv_any )->xiv_iv // 2ivx

so now you can do ivx and pvx lookups or you can plug there the sv_peek
"conversion":

  Perl_sv_peek(my_perl, (SV*)()) // sv_peek

(The my_perl is for threaded builds.)  Just remember that every line,
but the last one, should end with \n\

Alternatively edit the init file interactively via: 3rd mouse button ->
New Display -> Edit Menu

Note: you can define up to 20 conversion shortcuts in the gdb section.

=head2 C backtrace

On some platforms Perl supports retrieving the C level backtrace
(similar to what symbolic debuggers like gdb do).

The backtrace returns the stack trace of the C call frames, with the
symbol names (function names), the object names (like "perl"), and if
it can, also the source code locations (file:line).

The supported platforms are Linux, and OS X (some *BSD might work at
least partly, but they have not yet been tested).

This feature hasn't been tested with multiple threads, but it will only
show the backtrace of the thread doing the backtracing.

The feature needs to be enabled with C<Configure -Dusecbacktrace>.

The C<-Dusecbacktrace> also enables keeping the debug information when
compiling/linking (often: C<-g>).  Many compilers/linkers do support
having both optimization and keeping the debug information.  The debug
information is needed for the symbol names and the source locations.

Static functions might not be visible for the backtrace.

Source code locations, even if available, can often be missing or
misleading if the compiler has e.g. inlined code.  Optimizer can make
matching the source code and the object code quite challenging.

=over 4

=item Linux

You B<must> have the BFD (-lbfd) library installed, otherwise C<perl>
will fail to link.  The BFD is usually distributed as part of the GNU
binutils.

Summary: C<Configure ... -Dusecbacktrace> and you need C<-lbfd>.

=item OS X

The source code locations are supported B<only> if you have the
Developer Tools installed.  (BFD is B<not> needed.)

Summary: C<Configure ... -Dusecbacktrace> and installing the Developer
Tools would be good.

=back

Optionally, for trying out the feature, you may want to enable
automatic dumping of the backtrace just before a warning or croak (die)
message is emitted, by adding C<-Accflags=-DUSE_C_BACKTRACE_ON_ERROR>
for Configure.

Unless the above additional feature is enabled, nothing about the
backtrace functionality is visible, except for the Perl/XS level.

Furthermore, even if you have enabled this feature to be compiled, you
need to enable it in runtime with an environment variable:
C<PERL_C_BACKTRACE_ON_ERROR=10>.  It must be an integer higher than
zero, telling the desired frame count.

Retrieving the backtrace from Perl level (using for example an XS
extension) would be much less exciting than one would hope: normally
you would see C<runops>, C<entersub>, and not much else.  This API is
intended to be called B<from within> the Perl implementation, not from
Perl level execution.

The C API for the backtrace is as follows:

=over 4

=item get_c_backtrace

=item free_c_backtrace

=item get_c_backtrace_dump

=item dump_c_backtrace

=back

=head2 Poison

If you see in a debugger a memory area mysteriously full of 0xABABABAB
or 0xEFEFEFEF, you may be seeing the effect of the Poison() macros, see
L<perlclib>.

=head2 Read-only optrees

Under ithreads the optree is read only.  If you want to enforce this,
to check for write accesses from buggy code, compile with
C<-Accflags=-DPERL_DEBUG_READONLY_OPS> to enable code that allocates op
memory via C<mmap>, and sets it read-only when it is attached to a
subroutine. Any write access to an op results in a C<SIGBUS> and abort.

This code is intended for development only, and may not be portable
even to all Unix variants.  Also, it is an 80% solution, in that it
isn't able to make all ops read only.  Specifically it does not apply
to op slabs belonging to C<BEGIN> blocks.

However, as an 80% solution it is still effective, as it has caught
bugs in the past.

=head2 When is a bool not a bool?

There wasn't necessarily a standard C<bool> type on compilers prior to
C99, and so some workarounds were created.  The C<TRUE> and C<FALSE>
macros are still available as alternatives for C<true> and C<false>.
And the C<cBOOL> macro was created to correctly cast to a true/false
value in all circumstances, but should no longer be necessary.  Using
S<C<(bool)> I<expr>>> should now always work.

There are no plans to remove any of C<TRUE>, C<FALSE>, nor C<cBOOL>.

=head2 Finding unsafe truncations

You may wish to run C<Configure> with something like

    -Accflags='-Wconversion -Wno-sign-conversion -Wno-shorten-64-to-32'

or your compiler's equivalent to make it easier to spot any unsafe
truncations that show up.

=head2 The .i Targets

You can expand the macros in a F<foo.c> file by saying

    make foo.i

which will expand the macros using cpp.  Don't be scared by the
results.

=head1 AUTHOR

This document was originally written by Nathan Torkington, and is
maintained by the perl5-porters mailing list.

                                                                                                                                   usr/local/lib/perl5/5.40.0/pod/perlhacktut.pod                                                      0000644 0000000 0000000 00000014011 14714567415 017317  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =encoding utf8

=for comment
Consistent formatting of this file is achieved with:
  perl ./Porting/podtidy pod/perlhacktut.pod

=head1 NAME

perlhacktut - Walk through the creation of a simple C code patch

=head1 DESCRIPTION

This document takes you through a simple patch example.

If you haven't read L<perlhack> yet, go do that first! You might also
want to read through L<perlsource> too.

Once you're done here, check out L<perlhacktips> next.

=head1 EXAMPLE OF A SIMPLE PATCH

Let's take a simple patch from start to finish.

Here's something Larry suggested: if a C<U> is the first active format
during a C<pack>, (for example, C<pack "U3C8", @stuff>) then the
resulting string should be treated as UTF-8 encoded.

If you are working with a git clone of the Perl repository, you will
want to create a branch for your changes. This will make creating a
proper patch much simpler. See the L<perlgit> for details on how to do
this.

=head2 Writing the patch

How do we prepare to fix this up? First we locate the code in question
- the C<pack> happens at runtime, so it's going to be in one of the
F<pp> files. Sure enough, C<pp_pack> is in F<pp.c>. Since we're going
to be altering this file, let's copy it to F<pp.c~>.

[Well, it was in F<pp.c> when this tutorial was written. It has now
been split off with C<pp_unpack> to its own file, F<pp_pack.c>]

Now let's look over C<pp_pack>: we take a pattern into C<pat>, and then
loop over the pattern, taking each format character in turn into
C<datum_type>. Then for each possible format character, we swallow up
the other arguments in the pattern (a field width, an asterisk, and so
on) and convert the next chunk input into the specified format, adding
it onto the output SV C<cat>.

How do we know if the C<U> is the first format in the C<pat>? Well, if
we have a pointer to the start of C<pat> then, if we see a C<U> we can
test whether we're still at the start of the string. So, here's where
C<pat> is set up:

    STRLEN fromlen;
    char *pat = SvPVx(*++MARK, fromlen);
    char *patend = pat + fromlen;
    I32 len;
    I32 datumtype;
    SV *fromstr;

We'll have another string pointer in there:

    STRLEN fromlen;
    char *pat = SvPVx(*++MARK, fromlen);
    char *patend = pat + fromlen;
 +  char *patcopy;
    I32 len;
    I32 datumtype;
    SV *fromstr;

And just before we start the loop, we'll set C<patcopy> to be the start
of C<pat>:

    items = SP - MARK;
    MARK++;
    SvPVCLEAR(cat);
 +  patcopy = pat;
    while (pat < patend) {

Now if we see a C<U> which was at the start of the string, we turn on
the C<UTF8> flag for the output SV, C<cat>:

 +  if (datumtype == 'U' && pat==patcopy+1)
 +      SvUTF8_on(cat);
    if (datumtype == '#') {
        while (pat < patend && *pat != '\n')
            pat++;

Remember that it has to be C<patcopy+1> because the first character of
the string is the C<U> which has been swallowed into C<datumtype!>

Oops, we forgot one thing: what if there are spaces at the start of the
pattern? C<pack("  U*", @stuff)> will have C<U> as the first active
character, even though it's not the first thing in the pattern. In this
case, we have to advance C<patcopy> along with C<pat> when we see
spaces:

    if (isSPACE(datumtype))
        continue;

needs to become

    if (isSPACE(datumtype)) {
        patcopy++;
        continue;
    }

OK. That's the C part done. Now we must do two additional things before
this patch is ready to go: we've changed the behaviour of Perl, and so
we must document that change. We must also provide some more regression
tests to make sure our patch works and doesn't create a bug somewhere
else along the line.

=head2 Testing the patch

The regression tests for each operator live in F<t/op/>, and so we make
a copy of F<t/op/pack.t> to F<t/op/pack.t~>. Now we can add our tests
to the end. First, we'll test that the C<U> does indeed create Unicode
strings.

t/op/pack.t has a sensible ok() function, but if it didn't we could use
the one from t/test.pl.

 require './test.pl';
 plan( tests => 159 );

so instead of this:

 print 'not ' unless "1.20.300.4000" eq sprintf "%vd",
                                               pack("U*",1,20,300,4000);
 print "ok $test\n"; $test++;

we can write the more sensible (see L<Test::More> for a full
explanation of is() and other testing functions).

 is( "1.20.300.4000", sprintf "%vd", pack("U*",1,20,300,4000),
                                       "U* produces Unicode" );

Now we'll test that we got that space-at-the-beginning business right:

 is( "1.20.300.4000", sprintf "%vd", pack("  U*",1,20,300,4000),
                                     "  with spaces at the beginning" );

And finally we'll test that we don't make Unicode strings if C<U> is
B<not> the first active format:

 isnt( v1.20.300.4000, sprintf "%vd", pack("C0U*",1,20,300,4000),
                                       "U* not first isn't Unicode" );

Mustn't forget to change the number of tests which appears at the top,
or else the automated tester will get confused. This will either look
like this:

 print "1..156\n";

or this:

 plan( tests => 156 );

We now compile up Perl, and run it through the test suite. Our new
tests pass, hooray!

=head2 Documenting the patch

Finally, the documentation. The job is never done until the paperwork
is over, so let's describe the change we've just made. The relevant
place is F<pod/perlfunc.pod>; again, we make a copy, and then we'll
insert this text in the description of C<pack>:

 =item *

 If the pattern begins with a C<U>, the resulting string will be treated
 as UTF-8-encoded Unicode. You can force UTF-8 encoding on in a string
 with an initial C<U0>, and the bytes that follow will be interpreted as
 Unicode characters. If you don't want this to happen, you can begin
 your pattern with C<C0> (or anything else) to force Perl not to UTF-8
 encode your string, and then follow this with a C<U*> somewhere in your
 pattern.

=head2 Submit

See L<perlhack> for details on how to submit this patch.

=head1 AUTHOR

This document was originally written by Nathan Torkington, and is
maintained by the perl5-porters mailing list.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       usr/local/lib/perl5/5.40.0/pod/perlhaiku.pod                                                        0000644 0000000 0000000 00000003002 14714567415 016753  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # vim: syntax=pod

If you read this file _as_is_, just ignore the funny characters you see.
It is written in the POD format (see pod/perlpod.pod) which is specially
designed to be readable as is.

=head1 NAME

perlhaiku - Perl version 5.10+ on Haiku

=head1 DESCRIPTION

This file contains instructions how to build Perl for Haiku and lists
known problems.

=head1 BUILD AND INSTALL

The build procedure is completely standard:

  ./Configure -de
  make
  make install

Make perl executable and create a symlink for libperl:

  chmod a+x /boot/common/bin/perl
  cd /boot/common/lib; ln -s perl5/5.40.0/BePC-haiku/CORE/libperl.so .

Replace C<5.40.0> with your respective version of Perl.

=head1 KNOWN PROBLEMS

The following problems are encountered with Haiku revision 28311:

=over 4

=item *

Perl cannot be compiled with threading support ATM.

=item *

The F<cpan/Socket/t/socketpair.t> test fails. More precisely: the subtests
using datagram sockets fail. Unix datagram sockets aren't implemented in
Haiku yet.

=item *

A subtest of the F<cpan/Sys-Syslog/t/syslog.t> test fails. This is due to Haiku
not implementing F</dev/log> support yet.

=item *

The tests F<dist/Net-Ping/t/450_service.t> and F<dist/Net-Ping/t/510_ping_udp.t>
fail. This is due to bugs in Haiku's network stack implementation.

=back

=head1 CONTACT

For Haiku specific problems contact the HaikuPorts developers:
L<https://github.com/haikuports/haikuports>

The initial Haiku port was done by Ingo Weinhold <ingo_weinhold@gmx.de>.

Last update: 2008-10-29
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              usr/local/lib/perl5/5.40.0/pod/perlhist.pod                                                         0000644 0000000 0000000 00000165051 14714567415 016636  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =encoding utf8

=head1 NAME

perlhist - the Perl history records

=head1 DESCRIPTION

This document aims to record the Perl source code releases.

=head1 INTRODUCTION

Perl history in brief, by Larry Wall:

   Perl 0 introduced Perl to my officemates.
   Perl 1 introduced Perl to the world, and changed /\(...\|...\)/ to
       /(...|...)/.  \(Dan Faigin still hasn't forgiven me. :-\)
   Perl 2 introduced Henry Spencer's regular expression package.
   Perl 3 introduced the ability to handle binary data (embedded nulls).
   Perl 4 introduced the first Camel book.  Really.  We mostly just
       switched version numbers so the book could refer to 4.000.
   Perl 5 introduced everything else, including the ability to
       introduce everything else.

=head1 THE KEEPERS OF THE PUMPKIN

Larry Wall, Andy Dougherty, Tom Christiansen, Charles Bailey, Nick
Ing-Simmons, Chip Salzenberg, Tim Bunce, Malcolm Beattie, Gurusamy
Sarathy, Graham Barr, Jarkko Hietaniemi, Hugo van der Sanden,
Michael Schwern, Rafael Garcia-Suarez, Nicholas Clark, Richard Clamp,
Leon Brocard, Dave Mitchell, Jesse Vincent, Ricardo Signes, Steve Hay,
Matt S Trout, David Golden, Florian Ragwitz, Tatsuhiko Miyagawa,
Chris C<BinGOs> Williams, Zefram, Ævar Arnfjörð Bjarmason, Stevan
Little, Dave Rolsky, Max Maischein, Abigail, Jesse Luehrs, Tony Cook,
Dominic Hargreaves, Aaron Crane, Aristotle Pagaltzis, Matthew Horsfall,
Peter Martini, Sawyer X, Chad 'Exodist' Granum, Renee Bäcker, Eric Herman,
John SJ Anderson, Karen Etheridge, Zak B. Elep, Tom Hukins, Richard Leach,
Neil Bowers, Yves Orton, Paul Evans, Graham Knop, and Philippe Bruhat (BooK).

=head2 PUMPKIN?

[from Porting/pumpkin.pod in the Perl source code distribution]

=for disclaimer orking cows is hazardous, and not legal in all jurisdictions

Chip Salzenberg gets credit for that, with a nod to his cow orker,
David Croy.  We had passed around various names (baton, token, hot
potato) but none caught on.  Then, Chip asked:

[begin quote]

   Who has the patch pumpkin?

