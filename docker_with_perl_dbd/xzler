
=back

=over 3

 U8  PL_exit_flags

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<PL_origalen>

Described in L<perlembed>.

=back

=for hackers
Found in file pod/perlembed.pod

=over 4

=item C<PL_perl_destruct_level>
X<PL_perl_destruct_level>

This value may be set when embedding for full cleanup.

Possible values:

=over

=item * 0 - none

=item * 1 - full

=item * 2 or greater - full with checks.

=back

If C<$ENV{PERL_DESTRUCT_LEVEL}> is set to an integer greater than the
value of C<PL_perl_destruct_level> its value is used instead.

On threaded perls, each thread has an independent copy of this variable;
each initialized at creation time with the current value of the creating
thread's copy.

=over 3

 signed char  PL_perl_destruct_level

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<ptr_table_fetch>
X<ptr_table_fetch>

Look for C<sv> in the pointer-mapping table C<tbl>, returning its value, or
NULL if not found.

=over 3

 void *  ptr_table_fetch(PTR_TBL_t * const tbl,
                         const void * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<ptr_table_free>
X<ptr_table_free>

Clear and free a ptr table

=over 3

 void  ptr_table_free(PTR_TBL_t * const tbl)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<ptr_table_new>
X<ptr_table_new>

Create a new pointer-mapping table

=over 3

 PTR_TBL_t *  ptr_table_new()

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<ptr_table_split>
X<ptr_table_split>

Double the hash bucket size of an existing ptr table

=over 3

 void  ptr_table_split(PTR_TBL_t * const tbl)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<ptr_table_store>
X<ptr_table_store>

Add a new entry to a pointer-mapping table C<tbl>.
In hash terms, C<oldsv> is the key; Cnewsv> is the value.

The names "old" and "new" are specific to the core's typical use of ptr_tables
in thread cloning.

=over 3

 void  ptr_table_store(PTR_TBL_t * const tbl,
                       const void * const oldsv,
                       void * const newsv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<require_pv>
X<require_pv>

Tells Perl to C<require> the file named by the string argument.  It is
analogous to the Perl code C<eval "require '$file'">.  It's even
implemented that way; consider using load_module instead.

NOTE: the C<perl_require_pv()> form is B<deprecated>.

=over 3

 void  require_pv(const char *pv)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<vload_module>
X<vload_module>

Like C<L</load_module>> but the arguments are an encapsulated argument list.

=over 3

 void  vload_module(U32 flags, SV *name, SV *ver, va_list *args)

=back

=back

=for hackers
Found in file op.c

=head1 Errno

=over 4

=item C<sv_string_from_errnum>
X<sv_string_from_errnum>

Generates the message string describing an OS error and returns it as
an SV.  C<errnum> must be a value that C<errno> could take, identifying
the type of error.

If C<tgtsv> is non-null then the string will be written into that SV
(overwriting existing content) and it will be returned.  If C<tgtsv>
is a null pointer then the string will be written into a new mortal SV
which will be returned.

The message will be taken from whatever locale would be used by C<$!>,
and will be encoded in the SV in whatever manner would be used by C<$!>.
The details of this process are subject to future change.  Currently,
the message is taken from the C locale by default (usually producing an
English message), and from the currently selected locale when in the scope
of the C<use locale> pragma.  A heuristic attempt is made to decode the
message from the locale's character encoding, but it will only be decoded
as either UTF-8 or ISO-8859-1.  It is always correctly decoded in a UTF-8
locale, usually in an ISO-8859-1 locale, and never in any other locale.

The SV is always returned containing an actual string, and with no other
OK bits set.  Unlike C<$!>, a message is even yielded for C<errnum> zero
(meaning success), and if no useful message is available then a useless
string (currently empty) is returned.

=over 3

 SV *  sv_string_from_errnum(int errnum, SV *tgtsv)

=back

=back

=for hackers
Found in file mg.c

=head1 Exception Handling (simple) Macros

=over 4

=item C<dXCPT>
X<dXCPT>

Set up necessary local variables for exception handling.
See L<perlguts/"Exception Handling">.

=over 3

   dXCPT;

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<JMPENV_JUMP>

Described in L<perlinterp>.

=over 3

 void  JMPENV_JUMP(int v)

=back

=back

=for hackers
Found in file pod/perlinterp.pod

=over 4

=item C<JMPENV_PUSH>

Described in L<perlinterp>.

=over 3

 void  JMPENV_PUSH(int v)

=back

=back

=for hackers
Found in file pod/perlinterp.pod

=over 4

=item C<PL_restartop>

Described in L<perlinterp>.

=back

=for hackers
Found in file pod/perlinterp.pod

=over 4

=item C<XCPT_CATCH>
X<XCPT_CATCH>

Introduces a catch block.  See L<perlguts/"Exception Handling">.

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XCPT_RETHROW>
X<XCPT_RETHROW>

Rethrows a previously caught exception.  See L<perlguts/"Exception Handling">.

=over 3

   XCPT_RETHROW;

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XCPT_TRY_END>
X<XCPT_TRY_END>

Ends a try block.  See L<perlguts/"Exception Handling">.

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XCPT_TRY_START>
X<XCPT_TRY_START>

Starts a try block.  See L<perlguts/"Exception Handling">.

=back

=for hackers
Found in file XSUB.h

=head1 Filesystem configuration values

Also see L</List of capability HAS_foo symbols>.


=over 4

=item C<DIRNAMLEN>
X<DIRNAMLEN>

This symbol, if defined, indicates to the C program that the length
of directory entry names is provided by a C<d_namlen> field.  Otherwise
you need to do C<strlen()> on the C<d_name> field.

=back

=for hackers
Found in file config.h

=over 4

=item C<DOSUID>
X<DOSUID>

This symbol, if defined, indicates that the C program should
check the script that it is executing for setuid/setgid bits, and
attempt to emulate setuid/setgid on systems that have disabled
setuid #! scripts because the kernel can't do it securely.
It is up to the package designer to make sure that this emulation
is done securely.  Among other things, it should do an fstat on
the script it just opened to make sure it really is a setuid/setgid
script, it should make sure the arguments passed correspond exactly
to the argument on the #! line, and it should not trust any
subprocesses to which it must pass the filename rather than the
file descriptor of the script to be executed.

=back

=for hackers
Found in file config.h

=over 4

=item C<EOF_NONBLOCK>
X<EOF_NONBLOCK>

This symbol, if defined, indicates to the C program that a C<read()> on
a non-blocking file descriptor will return 0 on C<EOF>, and not the value
held in C<RD_NODATA> (-1 usually, in that case!).

=back

=for hackers
Found in file config.h

=over 4

=item C<FCNTL_CAN_LOCK>
X<FCNTL_CAN_LOCK>

This symbol, if defined, indicates that C<fcntl()> can be used
for file locking.  Normally on Unix systems this is defined.
It may be undefined on C<VMS>.

=back

=for hackers
Found in file config.h

=over 4

=item C<FFLUSH_ALL>
X<FFLUSH_ALL>

This symbol, if defined, tells that to flush
all pending stdio output one must loop through all
the stdio file handles stored in an array and fflush them.
Note that if C<fflushNULL> is defined, fflushall will not
even be probed for and will be left undefined.

=back

=for hackers
Found in file config.h

=over 4

=item C<FFLUSH_NULL>
X<FFLUSH_NULL>

This symbol, if defined, tells that C<fflush(NULL)> correctly
flushes all pending stdio output without side effects. In
particular, on some platforms calling C<fflush(NULL)> *still*
corrupts C<STDIN> if it is a pipe.

=back

=for hackers
Found in file config.h

=over 4

=item C<FILE_base>
X<FILE_base>

This macro is used to access the C<_base> field (or equivalent) of the
C<FILE> structure pointed to by its argument. This macro will always be
defined if C<USE_STDIO_BASE> is defined.

=over 3

 void *  FILE_base(FILE * f)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<FILE_bufsiz>
X<FILE_bufsiz>

This macro is used to determine the number of bytes in the I/O
buffer pointed to by C<_base> field (or equivalent) of the C<FILE>
structure pointed to its argument. This macro will always be defined
if C<USE_STDIO_BASE> is defined.

=over 3

 Size_t  FILE_bufsiz(FILE *f)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<FILE_cnt>
X<FILE_cnt>

This macro is used to access the C<_cnt> field (or equivalent) of the
C<FILE> structure pointed to by its argument. This macro will always be
defined if C<USE_STDIO_PTR> is defined.

=over 3

 Size_t  FILE_cnt(FILE * f)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<FILE_ptr>
X<FILE_ptr>

This macro is used to access the C<_ptr> field (or equivalent) of the
C<FILE> structure pointed to by its argument. This macro will always be
defined if C<USE_STDIO_PTR> is defined.

=over 3

 void *  FILE_ptr(FILE * f)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<FLEXFILENAMES>
X<FLEXFILENAMES>

This symbol, if defined, indicates that the system supports filenames
longer than 14 characters.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_DIR_DD_FD>
X<HAS_DIR_DD_FD>

This symbol, if defined, indicates that the C<DIR>* dirstream
structure contains a member variable named C<dd_fd>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_DUP2>
X<HAS_DUP2>

This symbol, if defined, indicates that the C<dup2> routine is
available to duplicate file descriptors.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_DUP3>
X<HAS_DUP3>

This symbol, if defined, indicates that the C<dup3> routine is
available to duplicate file descriptors.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FAST_STDIO>
X<HAS_FAST_STDIO>

This symbol, if defined, indicates that the "fast stdio"
is available to manipulate the stdio buffers directly.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FCHDIR>
X<HAS_FCHDIR>

This symbol, if defined, indicates that the C<fchdir> routine is
available to change directory using a file descriptor.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FCNTL>
X<HAS_FCNTL>

This symbol, if defined, indicates to the C program that
the C<fcntl()> function exists.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FDCLOSE>
X<HAS_FDCLOSE>

This symbol, if defined, indicates that the C<fdclose> routine is
available to free a C<FILE> structure without closing the underlying
file descriptor.  This function appeared in C<FreeBSD> 10.2.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FPATHCONF>
X<HAS_FPATHCONF>

This symbol, if defined, indicates that C<pathconf()> is available
to determine file-system related limits and options associated
with a given open file descriptor.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FPOS64_T>
X<HAS_FPOS64_T>

This symbol will be defined if the C compiler supports C<fpos64_t>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FSTATFS>
X<HAS_FSTATFS>

This symbol, if defined, indicates that the C<fstatfs> routine is
available to stat filesystems by file descriptors.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FSTATVFS>
X<HAS_FSTATVFS>

This symbol, if defined, indicates that the C<fstatvfs> routine is
available to stat filesystems by file descriptors.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_GETFSSTAT>
X<HAS_GETFSSTAT>

This symbol, if defined, indicates that the C<getfsstat> routine is
available to stat filesystems in bulk.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_GETMNT>
X<HAS_GETMNT>

This symbol, if defined, indicates that the C<getmnt> routine is
available to get filesystem mount info by filename.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_GETMNTENT>
X<HAS_GETMNTENT>

This symbol, if defined, indicates that the C<getmntent> routine is
available to iterate through mounted file systems to get their info.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_HASMNTOPT>
X<HAS_HASMNTOPT>

This symbol, if defined, indicates that the C<hasmntopt> routine is
available to query the mount options of file systems.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LSEEK_PROTO>
X<HAS_LSEEK_PROTO>

This symbol, if defined, indicates that the system provides
a prototype for the C<lseek()> function.  Otherwise, it is up
to the program to supply one.  A good guess is

 extern off_t lseek(int, off_t, int);

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_MKDIR>
X<HAS_MKDIR>

This symbol, if defined, indicates that the C<mkdir> routine is available
to create directories.  Otherwise you should fork off a new process to
exec F</bin/mkdir>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_OFF64_T>
X<HAS_OFF64_T>

This symbol will be defined if the C compiler supports C<off64_t>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_OPENAT>
X<HAS_OPENAT>

This symbol is defined if the C<openat()> routine is available.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_OPEN3>
X<HAS_OPEN3>

This manifest constant lets the C program know that the three
argument form of C<open(2)> is available.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_POLL>
X<HAS_POLL>

This symbol, if defined, indicates that the C<poll> routine is
available to C<poll> active file descriptors.  Please check C<I_POLL> and
C<I_SYS_POLL> to know which header should be included as well.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_READDIR>
X<HAS_READDIR>

This symbol, if defined, indicates that the C<readdir> routine is
available to read directory entries. You may have to include
F<dirent.h>. See C<L</I_DIRENT>>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_READDIR64_R>
X<HAS_READDIR64_R>

This symbol, if defined, indicates that the C<readdir64_r> routine
is available to readdir64 re-entrantly.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_REWINDDIR>
X<HAS_REWINDDIR>

This symbol, if defined, indicates that the C<rewinddir> routine is
available. You may have to include F<dirent.h>. See C<L</I_DIRENT>>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_RMDIR>
X<HAS_RMDIR>

This symbol, if defined, indicates that the C<rmdir> routine is
available to remove directories. Otherwise you should fork off a
new process to exec F</bin/rmdir>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SEEKDIR>
X<HAS_SEEKDIR>

This symbol, if defined, indicates that the C<seekdir> routine is
available. You may have to include F<dirent.h>. See C<L</I_DIRENT>>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SELECT>
X<HAS_SELECT>

This symbol, if defined, indicates that the C<select> routine is
available to C<select> active file descriptors. If the timeout field
is used, F<sys/time.h> may need to be included.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SETVBUF>
X<HAS_SETVBUF>

This symbol, if defined, indicates that the C<setvbuf> routine is
available to change buffering on an open stdio stream.
to a line-buffered mode.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_STDIO_STREAM_ARRAY>
X<HAS_STDIO_STREAM_ARRAY>

This symbol, if defined, tells that there is an array
holding the stdio streams.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_STRUCT_FS_DATA>
X<HAS_STRUCT_FS_DATA>

This symbol, if defined, indicates that the C<struct fs_data>
to do C<statfs()> is supported.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_STRUCT_STATFS>
X<HAS_STRUCT_STATFS>

This symbol, if defined, indicates that the C<struct statfs>
to do C<statfs()> is supported.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_STRUCT_STATFS_F_FLAGS>
X<HAS_STRUCT_STATFS_F_FLAGS>

This symbol, if defined, indicates that the C<struct statfs>
does have the C<f_flags> member containing the mount flags of
the filesystem containing the file.
This kind of C<struct statfs> is coming from F<sys/mount.h> (C<BSD> 4.3),
not from F<sys/statfs.h> (C<SYSV>).  Older C<BSDs> (like Ultrix) do not
have C<statfs()> and C<struct statfs>, they have C<ustat()> and C<getmnt()>
with C<struct ustat> and C<struct fs_data>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_TELLDIR>
X<HAS_TELLDIR>

This symbol, if defined, indicates that the C<telldir> routine is
available. You may have to include F<dirent.h>. See C<L</I_DIRENT>>.

=back

=for hackers
Found in file config.h

=over 4

