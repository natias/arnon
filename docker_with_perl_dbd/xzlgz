
=item Pluggable keywords

Introduced in Perl 5.11.2

See L<perlapi/PL_keyword_plugin> for the mechanism.

The ticket for this experiment is
L<[perl #13199]|https://github.com/Perl/perl5/issues/13199>.

=item Aliasing via reference

Introduced in Perl 5.22.0

Using this feature triggers warnings in the category
C<experimental::refaliasing>.

The ticket for this experiment is
L<[perl #14150]|https://github.com/Perl/perl5/issues/14150>.

See also: L<perlref/Assigning to References>

=item use re 'strict';

Introduced in Perl 5.22.0

Using this feature triggers warnings in the category
C<experimental::re_strict>.

The ticket for this experiment is
L<[perl #18755]|https://github.com/Perl/perl5/issues/18755>

See L<re/'strict' mode>

=item Declaring a reference to a variable

Introduced in Perl 5.26.0

Using this feature triggers warnings in the category
C<experimental::declared_refs>.

The ticket for this experiment is
L<[perl #15458]|https://github.com/Perl/perl5/issues/15458>.

See also: L<perlref/Declaring a Reference to a Variable>

=item There is an C<installhtml> target in the Makefile.

The ticket for this experiment is
L<[perl #12726]|https://github.com/Perl/perl5/issues/12726>.

=item (Limited) Variable-length look-behind

Introduced in Perl 5.30.0.

Variability of up to 255 characters is handled.

Using this feature triggers warnings in the category
C<experimental::vlb>.

The ticket for this experiment is
L<[perl #18756]|https://github.com/Perl/perl5/issues/18756>.

See also: L<perlre/(*positive_lookbehind:I<pattern>)> and
L<perlre/(*negative_lookbehind:I<pattern>)>

=item Unicode private use character hooks

Introduced in Perl 5.30.0.

This feature is part of an interface intended for internal and experimental
use by the perl5 developers.  You are unlikely to encounter it in the wild.

Using this feature triggers warnings in the category
C<experimental::private_use>.

The ticket for this experiment is
L<[perl #18758]|https://github.com/Perl/perl5/issues/18758>.

=item Unicode property wildcards

Introduced in Perl 5.30.0.

This feature allows regular expression matching against Unicode character
properties to be expressed more concisely.

Using this feature triggers warnings in the category
C<experimental::uniprop_wildcards>.

The ticket for this experiment is
L<[perl #18759]|https://github.com/Perl/perl5/issues/18759>.

=item try/catch control structure

Introduced in Perl 5.34.0.

Using the optional C<finally> block part of this feature triggers warnings in
the category C<experimental::try>.

The ticket for this experiment is
L<[perl #18760]|https://github.com/Perl/perl5/issues/18760>

=item Use of C<@_> within subroutine signatures

Introduced in Perl 5.36.0 as part of a reduction in the scope of experimental
subroutine signatures.

Using the default arguments array (C<@_>) within a subroutine that uses
signatures will emit a warning in the category
C<experimental::args_array_with_signatures>. This includes C<@_> directly,
elements of it such as C<$_[$index]>, or situations where the default
arguments array is accessed implicitly such as C<shift> or C<pop> without
arguments.

=item The builtin namespace

Introduced in Perl 5.36.0.

Using certain functions of this feature triggers warnings in the category
C<experimental::builtin>.

In Perl 5.36.0, a new namespace, C<builtin>, was created for new core functions
that will not be present in every namespace, but will be available for
importing.  The namespace itself was considered experimental until Perl 5.39.2.
Some specific functions within it remain experimental.

The ticket for this experiment is
L<[perl #19764]|https://github.com/Perl/perl5/issues/19764>.

=item The defer block modifier

Introduced in Perl 5.36.0

Using this feature triggers warnings in the category C<experimental::defer>.

This feature adds a new kind of block, a C<defer> block, which will not be
executed until the containing block is being exited.

The ticket for this experiment is
L<[perl #17949]|https://github.com/Perl/perl5/issues/17949>.

=item Extra paired delimiters for quote-like operators

Introduced in Perl 5.36.0

Using this feature triggers warnings in the category
C<experimental::extra_paired_delimiters>.

This feature allows for many non-ASCII pairs of mirroring delimiters, for
example:

    my @array = qw« tinker tailor soldier spy »;

The ticket for this experiment is
L<[perl #19765]|https://github.com/Perl/perl5/issues/19765>.

=back

=head2 Accepted features

These features were so wildly successful and played so well with others that
we decided to remove their experimental status and admit them as full, stable
features in the world of Perl, lavishing all the benefits and luxuries thereof.
They are also awarded +5 Stability and +3 Charisma.

=over 8

=item 64-bit support

Introduced in Perl 5.005

=item die accepts a reference

Introduced in Perl 5.005

=item DB module

Introduced in Perl 5.6.0

See also L<perldebug>, L<perldebtut>

=item Weak references

Introduced in Perl 5.6.0

=item Internal file glob

Introduced in Perl 5.6.0

=item fork() emulation

Introduced in Perl 5.6.1

See also L<perlfork>

=item -Dusemultiplicity -Duseithreads

Introduced in Perl 5.6.0

Accepted in Perl 5.8.0

=item Support for long doubles

Introduced in Perl 5.6.0

Accepted in Perl 5.8.1

=item The C<\N> regex character class

The C<\N> character class, not to be confused with the named character
sequence C<\N{NAME}>, denotes any non-newline character in a regular
expression.

Introduced in Perl 5.12

Exact version of acceptance unclear, but no later than Perl 5.18.

=item C<(?{code})> and C<(??{ code })>

Introduced in Perl 5.6.0

Accepted in Perl 5.20.0

See also L<perlre>

=item Linux abstract Unix domain sockets

Introduced in Perl 5.9.2

Accepted before Perl 5.20.0.  The Socket library is now primarily maintained
on CPAN, rather than in the perl core.

See also L<Socket>

=item Lvalue subroutines

Introduced in Perl 5.6.0

Accepted in Perl 5.20.0

See also L<perlsub>

=item Backtracking control verbs

C<(*ACCEPT)>

Introduced in Perl 5.10

Accepted in Perl 5.20.0

=item The C<:pop> IO pseudolayer

See also L<perlrun/PERLIO>

Accepted in Perl 5.20.0

=item C<\s> in regexp matches vertical tab

Accepted in Perl 5.22.0

=item Postfix dereference syntax

Introduced in Perl 5.20.0

Accepted in Perl 5.24.0

=item Lexical subroutines

Introduced in Perl 5.18.0

Accepted in Perl 5.26.0

=item String- and number-specific bitwise operators

Introduced in Perl 5.22.0

Accepted in Perl 5.28.0

=item Alphabetic assertions

Introduced in Perl 5.28.0

Accepted in Perl 5.32.0

=item Script runs

Introduced in Perl 5.28.0

Accepted in Perl 5.32.0

=item The infix C<isa> operator

Introduced in Perl 5.32.0

Accepted in Perl 5.36.0

=item Subroutine signatures

Introduced in Perl 5.20.0

Accepted in Perl 5.36.0

=item Regular Expression Set Operations

Introduced in Perl 5.18

Accepted in Perl 5.36

See : L<perlrecharclass/Extended Bracketed Character Classes>

=item try/catch control structure

Introduced in Perl 5.34.0.

Accepted in Perl 5.40 when not using the optional C<finally> block.

=item The "const" attribute

Introduced in Perl 5.22.0

Accepted in Perl 5.40

See also: L<perlsub/Constant Functions>

=item for loop with multiple iteration variables

Introduced in Perl 5.36.0.

Accepted in Perl 5.40.

This feature enables a parenthesized list of iteration variables for C<for>
rather than a single variable.

=back

=head2 Removed features

These features are no longer considered experimental and their functionality
has disappeared. It's your own fault if you wrote production programs using
these features after we explicitly told you not to (see L<perlpolicy>).

=over 8

=item 5.005-style threading

Introduced in Perl 5.005

Removed in Perl 5.10

=item perlcc

Introduced in Perl 5.005

Moved from Perl 5.9.0 to CPAN

=item The pseudo-hash data type

Introduced in Perl 5.6.0

Removed in Perl 5.9.0

=item GetOpt::Long Options can now take multiple values at once (experimental)

C<Getopt::Long> upgraded to version 2.35

Removed in Perl 5.8.8

=item Assertions

The C<-A> command line switch

Introduced in Perl 5.9.0

Removed in Perl 5.9.5

=item Test::Harness::Straps

Moved from Perl 5.10.1 to CPAN

=item C<legacy>

The experimental C<legacy> pragma was swallowed by the C<feature> pragma.

Introduced in Perl 5.11.2

Removed in Perl 5.11.3

=item Lexical C<$_>

Using this feature triggered warnings in the category
C<experimental::lexical_topic>.

Introduced in Perl 5.10.0

Removed in Perl 5.24.0

=item Array and hash container functions accept references

Using this feature triggered warnings in the category
C<experimental::autoderef>.

Superseded by L</Postfix dereference syntax>.

Introduced in Perl 5.14.0

Removed in Perl 5.24.0

=item C<our> can have an experimental optional attribute C<unique>

Introduced in Perl 5.8.0

Deprecated in Perl 5.10.0

Removed in Perl 5.28.0

=item The C<:win32> IO pseudolayer

Introduced in Perl 5.8.0 (or before)

Removed in Perl 5.36.0

=back

=head1 SEE ALSO

For a complete list of features check L<feature>.

=head1 AUTHORS

brian d foy C<< <brian.d.foy@gmail.com> >>

SE<eacute>bastien Aperghis-Tramoni C<< <saper@cpan.org> >>

=head1 COPYRIGHT

Copyright 2010, brian d foy C<< <brian.d.foy@gmail.com> >>

=head1 LICENSE

You can use and redistribute this document under the same terms as Perl
itself.

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              usr/local/lib/perl5/5.40.0/pod/perlfaq.pod                                                          0000644 0000000 0000000 00000054322 14714567415 016434  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

perlfaq - Frequently asked questions about Perl

=head1 VERSION

version 5.20240218

=head1 DESCRIPTION

The perlfaq comprises several documents that answer the most commonly
asked questions about Perl and Perl programming. It's divided by topic
into nine major sections outlined in this document.

=head2 Where to find the perlfaq

The perlfaq is an evolving document.  Read the latest version at
L<https://perldoc.perl.org/perlfaq>.  It is also included in the standard Perl
distribution.

=head2 How to use the perlfaq

The C<perldoc> command line tool is part of the standard Perl distribution. To
read the perlfaq:

    $ perldoc perlfaq

To search the perlfaq question headings:

    $ perldoc -q open

=head2 How to contribute to the perlfaq

Review L<https://github.com/perl-doc-cats/perlfaq/wiki>.  If you don't find
your suggestion create an issue or pull request against
L<https://github.com/perl-doc-cats/perlfaq>.

Once approved, changes will be distributed with the next Perl release and
subsequently appear at L<https://perldoc.perl.org/perlfaq>.

=head2 What if my question isn't answered in the FAQ?

Try the resources in L<perlfaq2>.

=head1 TABLE OF CONTENTS

=over 4

=item perlfaq1 - General Questions About Perl

=item perlfaq2 - Obtaining and Learning about Perl

=item perlfaq3 - Programming Tools

=item perlfaq4 - Data Manipulation

=item perlfaq5 - Files and Formats

=item perlfaq6 - Regular Expressions

=item perlfaq7 - General Perl Language Issues

=item perlfaq8 - System Interaction

=item perlfaq9 - Web, Email and Networking

=back

=head1 THE QUESTIONS

=head2 L<perlfaq1>: General Questions About Perl

This section of the FAQ answers very general, high-level questions about Perl.

=over 4

=item *

What is Perl?

=item *

Who supports Perl? Who develops it? Why is it free?

=item *

Which version of Perl should I use?

=item *

What is Raku (Perl 6)?

=item *

How stable is Perl?

=item *

How often are new versions of Perl released?

=item *

Is Perl difficult to learn?

=item *

How does Perl compare with other languages like Java, Python, REXX, Scheme, or Tcl?

=item *

Can I do [task] in Perl?

=item *

When shouldn't I program in Perl?

=item *

What's the difference between "perl" and "Perl"?

=item *

What is a JAPH?

=item *

How can I convince others to use Perl?

=back


=head2 L<perlfaq2>: Obtaining and Learning about Perl

This section of the FAQ answers questions about where to find source and documentation for Perl, support, and related matters.

=over 4

=item *

What machines support Perl? Where do I get it?

=item *

How can I get a binary version of Perl?

=item *

I don't have a C compiler. How can I build my own Perl interpreter?

=item *

I copied the Perl binary from one machine to another, but scripts don't work.

=item *

I grabbed the sources and tried to compile but gdbm/dynamic loading/malloc/linking/... failed. How do I make it work?

=item *

What modules and extensions are available for Perl? What is CPAN?

=item *

Where can I get information on Perl?

=item *

What is perl.com? Perl Mongers? pm.org? perl.org? cpan.org?

=item *

Where can I post questions?

=item *

Perl Books

=item *

Which magazines have Perl content?

=item *

Which Perl blogs should I read?

=item *

What mailing lists are there for Perl?

=item *

Where can I buy a commercial version of Perl?

=item *

Where do I send bug reports?

=back


=head2 L<perlfaq3>: Programming Tools

This section of the FAQ answers questions related to programmer tools and programming support.

=over 4

=item *

How do I do (anything)?

=item *

How can I use Perl interactively?

=item *

How do I find which modules are installed on my system?

=item *

How do I debug my Perl programs?

=item *

How do I profile my Perl programs?

=item *

How do I cross-reference my Perl programs?

=item *

Is there a pretty-printer (formatter) for Perl?

=item *

Is there an IDE or Windows Perl Editor?

=item *

Where can I get Perl macros for vi?

=item *

Where can I get perl-mode or cperl-mode for emacs?

=item *

How can I use curses with Perl?

=item *

How can I write a GUI (X, Tk, Gtk, etc.) in Perl?

=item *

How can I make my Perl program run faster?

=item *

How can I make my Perl program take less memory?

=item *

Is it safe to return a reference to local or lexical data?

=item *

How can I free an array or hash so my program shrinks?

=item *

How can I make my CGI script more efficient?

=item *

How can I hide the source for my Perl program?

=item *

How can I compile my Perl program into byte code or C?

=item *

How can I get C<#!perl> to work on [MS-DOS,NT,...]?

=item *

Can I write useful Perl programs on the command line?

=item *

Why don't Perl one-liners work on my DOS/Mac/VMS system?

=item *

Where can I learn about CGI or Web programming in Perl?

=item *

Where can I learn about object-oriented Perl programming?

=item *

Where can I learn about linking C with Perl?

=item *

I've read perlembed, perlguts, etc., but I can't embed perl in my C program; what am I doing wrong?

=item *

When I tried to run my script, I got this message. What does it mean?

=item *

What's MakeMaker?

=back


=head2 L<perlfaq4>: Data Manipulation

This section of the FAQ answers questions related to manipulating numbers, dates, strings, arrays, hashes, and miscellaneous data issues.

=over 4

=item *

Why am I getting long decimals (eg, 19.9499999999999) instead of the numbers I should be getting (eg, 19.95)?

=item *

Why is int() broken?

=item *

Why isn't my octal data interpreted correctly?

=item *

Does Perl have a round() function? What about ceil() and floor()? Trig functions?

=item *

How do I convert between numeric representations/bases/radixes?

=item *

Why doesn't & work the way I want it to?

=item *

How do I multiply matrices?

=item *

How do I perform an operation on a series of integers?

=item *

How can I output Roman numerals?

=item *

Why aren't my random numbers random?

=item *

How do I get a random number between X and Y?

=item *

How do I find the day or week of the year?

=item *

How do I find the current century or millennium?

=item *

How can I compare two dates and find the difference?

=item *

How can I take a string and turn it into epoch seconds?

=item *

How can I find the Julian Day?

=item *

How do I find yesterday's date?

=item *

Does Perl have a Year 2000 or 2038 problem? Is Perl Y2K compliant?

=item *

How do I validate input?

=item *

How do I unescape a string?

=item *

How do I remove consecutive pairs of characters?

=item *

How do I expand function calls in a string?

=item *

How do I find matching/nesting anything?

=item *

How do I reverse a string?

=item *

How do I expand tabs in a string?

=item *

How do I reformat a paragraph?

=item *

How can I access or change N characters of a string?

=item *

How do I change the Nth occurrence of something?

=item *

How can I count the number of occurrences of a substring within a string?

=item *

How do I capitalize all the words on one line?

=item *

How can I split a [character]-delimited string except when inside [character]?

=item *

How do I strip blank space from the beginning/end of a string?

=item *

How do I pad a string with blanks or pad a number with zeroes?

=item *

How do I extract selected columns from a string?

=item *

How do I find the soundex value of a string?

=item *

How can I expand variables in text strings?

=item *

Does Perl have anything like Ruby's #{} or Python's f string?

=item *

What's wrong with always quoting "$vars"?

=item *

Why don't my E<lt>E<lt>HERE documents work?

=item *

What is the difference between a list and an array?

=item *

What is the difference between $array[1] and @array[1]?

=item *

How can I remove duplicate elements from a list or array?

=item *

How can I tell whether a certain element is contained in a list or array?

=item *

How do I compute the difference of two arrays? How do I compute the intersection of two arrays?

=item *

How do I test whether two arrays or hashes are equal?

=item *

How do I find the first array element for which a condition is true?

=item *

How do I handle linked lists?

=item *

How do I handle circular lists?

=item *

How do I shuffle an array randomly?

=item *

How do I process/modify each element of an array?

=item *

How do I select a random element from an array?

=item *

How do I permute N elements of a list?

=item *

How do I sort an array by (anything)?

=item *

How do I manipulate arrays of bits?

=item *

Why does defined() return true on empty arrays and hashes?

=item *

How do I process an entire hash?

=item *

How do I merge two hashes?

=item *

