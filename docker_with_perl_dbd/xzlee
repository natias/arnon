used.

=item *

Width and precision in sprintf didn't handle characters above 255 correctly.
[RT #40473]

=item *

List slices with indices out of range now work more consistently.
[RT #39882]

=item *

A change introduced with perl 5.8.1 broke the parsing of arguments of the form
C<-foo=bar> with the C<-s> on the <#!> line. This has been fixed. See
http://bugs.activestate.com/show_bug.cgi?id=43483

=item *

C<tr///> is now threadsafe. Previously it was storing a swash inside its OP,
rather than in a pad.

=item *

F<pod2html> labels anchors more consistently and handles nested definition
lists better.

=item *

C<threads> cleanup veto has been extended to include C<perl_free()> and
C<perl_destruct()>

=item *

On some systems, changes to C<$ENV{TZ}> would not always be
respected by the underlying calls to C<localtime_r()>.  Perl now
forces the inspection of the environment on these systems.

=item *

The special variable C<$^R> is now more consistently set when executing
regexps using the C<(?{...})> construct.  In particular, it will still
be set even if backreferences or optional sub-patterns C<(?:...)?> are
used.

=back

=head1 New or Changed Diagnostics

=head2 panic: sv_chop %s

This new fatal error occurs when the C routine C<Perl_sv_chop()> was passed a
position that is not within the scalar's string buffer. This is caused by
buggy XS code, and at this point recovery is not possible.

=head2 Maximal count of pending signals (%s) exceeded

This new fatal error occurs when the perl process has to abort due to
too many pending signals, which is bound to prevent perl from being
able to handle further incoming signals safely.

=head2 panic: attempt to call %s in %s

This new fatal error occurs when the ACL version file test operator is used
where it is not available on the current platform. Earlier checks mean that
it should never be possible to get this.

=head2 FETCHSIZE returned a negative value

New error indicating that a tied array has claimed to have a negative
number of elements.

=head2 Can't upgrade %s (%d) to %d

Previously the internal error from the SV upgrade code was the less informative
I<Can't upgrade that kind of scalar>. It now reports the current internal type,
and the new type requested.

=head2 %s argument is not a HASH or ARRAY element or a subroutine

This error, thrown if an invalid argument is provided to C<exists> now
correctly includes "or a subroutine". [RT #38955]

=head2 Cannot make the non-overridable builtin %s fatal

This error in C<Fatal> previously did not show the name of the builtin in
question (now represented by %s above).

=head2 Unrecognized character '%s' in column %d

This error previously did not state the column.

=head2 Offset outside string

This can now also be generated by a C<seek> on a file handle using
C<PerlIO::scalar>.

=head2 Invalid escape in the specified encoding in regexp; marked by <-- HERE in m/%s/

New error, introduced as part of the fix to RT #40641 to handle encoding
of Unicode characters in regular expression comments.

=head2 Your machine doesn't support dump/undump

A more informative fatal error issued when calling C<dump> on Win32 and
Cygwin. (Given that the purpose of C<dump> is to abort with a core dump,
and core dumps can't be produced on these platforms, this is more useful than
silently exiting.)

=head1 Changed Internals

The perl sources can now be compiled with a C++ compiler instead of a C
compiler. A necessary implementation details is that under C++, the macro
C<XS> used to define XSUBs now includes an C<extern "C"> definition. A side
effect of this is that B<C++> code that used the construction

    typedef XS(SwigPerlWrapper);

now needs to be written

    typedef XSPROTO(SwigPerlWrapper);

using the new C<XSPROTO> macro, in order to compile. C extensions are
unaffected, although C extensions are encouraged to use C<XSPROTO> too.
This change was present in the 5.10.0 release of perl, so any actively
maintained code that happened to use this construction should already have
been adapted. Code that needs changing will fail with a compilation error.

C<set> magic on localizing/assigning to a magic variable will now only
trigger for I<container magics>, i.e. it will for C<%ENV> or C<%SIG>
but not for C<$#array>.

The new API macro C<newSVpvs()> can be used in place of constructions such as
C<newSVpvn("ISA", 3)>. It takes a single string constant, and at C compile
time determines its length.

The new API function C<Perl_newSV_type()> can be used as a more efficient
replacement of the common idiom

    sv = newSV(0);
    sv_upgrade(sv, type);

Similarly C<Perl_newSVpvn_flags()> can be used to combine
C<Perl_newSVpv()> with C<Perl_sv_2mortal()> or the equivalent
C<Perl_sv_newmortal()> with C<Perl_sv_setpvn()>

Two new macros C<mPUSHs()> and C<mXPUSHs()> are added, to make it easier to
push mortal SVs onto the stack. They were then used to fix several bugs where
values on the stack had not been mortalised.

A C<Perl_signbit()> function was added to test the sign of an C<NV>. It 
maps to the system one when available.

C<Perl_av_reify()>, C<Perl_lex_end()>, C<Perl_mod()>, C<Perl_op_clear()>,
C<Perl_pop_return()>, C<Perl_qerror()>, C<Perl_setdefout()>,
C<Perl_vivify_defelem()> and C<Perl_yylex()> are now visible to extensions.
This was required to allow C<Data::Alias> to work on Windows.

C<Perl_find_runcv()> is now visible to perl core extensions. This was required
to allow C<Sub::Current> to work on Windows.

C<ptr_table*> functions are now available in unthreaded perl. C<Storable>
takes advantage of this.

There have been many small cleanups made to the internals. In particular,
C<Perl_sv_upgrade()> has been simplified considerably, with a straight-through
code path that uses C<memset()> and C<memcpy()> to initialise the new body,
rather than assignment via multiple temporary variables. It has also
benefited from simplification and de-duplication of the arena management
code.

A lot of small improvements in the code base were made due to reports from
the Coverity static code analyzer.

Corrected use and documentation of C<Perl_gv_stashpv()>, C<Perl_gv_stashpvn()>,
C<Perl_gv_stashsv()> functions (last parameter is a bitmask, not boolean).

C<PERL_SYS_INIT>, C<PERL_SYS_INIT3> and C<PERL_SYS_TERM> macros have been
changed into functions.

C<PERLSYS_TERM> no longer requires a context. C<PerlIO_teardown()>
is now called without a context, and debugging output in this function has
been disabled because that required that an interpreter was present, an invalid
assumption at termination time.

All compile time options which affect binary compatibility have been grouped
together into a global variable (C<PL_bincompat_options>).

The values of C<PERL_REVISION>, C<PERL_VERSION> and C<PERL_SUBVERSION> are
now baked into global variables (and hence into any shared perl library).
Additionally under C<MULTIPLICITY>, the perl executable now records the size of
the interpreter structure (total, and for this version). Coupled with
C<PL_bincompat_options> this will allow 5.8.10 (and later), when compiled with a
shared perl library, to perform sanity checks in C<main()> to verify that the
shared library is indeed binary compatible.

Symbolic references can now have embedded NULs. The new public function
C<Perl_get_cvn_flags()> can be used in extensions if you have to handle them.

=head2 Macro cleanups

The core code, and XS code in F<ext> that is not dual-lived on CPAN, no longer
uses the macros C<PL_na>, C<NEWSV()>, C<Null()>, C<Nullav>, C<Nullcv>,
C<Nullhv>, C<Nullhv> I<etc>. Their use is discouraged in new code,
particularly C<PL_na>, which is a small performance hit.

=head1 New Tests

Many modules updated from CPAN incorporate new tests. Some core specific
tests have been added:

=over 4

=item ext/DynaLoader/t/DynaLoader.t

Tests for the C<DynaLoader> module.

=item t/comp/fold.t

Tests for compile-time constant folding.

=item t/io/pvbm.t

Tests incorporated from 5.10.0 which check that there is no unexpected
interaction between the internal types C<PVBM> and C<PVGV>.

=item t/lib/proxy_constant_subs.t

Tests for the new form of constant subroutines.

=item t/op/attrhand.t

Tests for C<Attribute::Handlers>.

=item t/op/dbm.t

Tests for C<dbmopen>.

=item t/op/inccode-tie.t

Calls all tests in F<t/op/inccode.t> after first tying C<@INC>.

=item t/op/incfilter.t

Tests for source filters returned from code references in C<@INC>.

=item t/op/kill0.t

Tests for RT #30970.

=item t/op/qrstack.t

Tests for RT #41484.

=item t/op/qr.t

Tests for the C<qr//> construct.

=item t/op/regexp_qr_embed.t

Tests for the C<qr//> construct within another regexp.

=item t/op/regexp_qr.t

Tests for the C<qr//> construct.

=item t/op/rxcode.t

Tests for RT #32840.

=item t/op/studytied.t

Tests for C<study> on tied scalars.

=item t/op/substT.t

Tests for C<subst> run under C<-T> mode.

=item t/op/symbolcache.t

Tests for C<undef> and C<delete> on stash entries that are bound to
subroutines or methods.

=item t/op/upgrade.t

Tests for C<Perl_sv_upgrade()>.

=item t/mro/package_aliases.t

MRO tests for C<isa> and package aliases.

=item t/pod/twice.t

Tests for calling C<Pod::Parser> twice.

=item t/run/cloexec.t

Tests for inheriting file descriptors across C<exec> (close-on-exec).

=item t/uni/cache.t

Tests for the UTF-8 caching code.

=item t/uni/chr.t

Test that strange encodings do not upset C<Perl_pp_chr()>.

=item t/uni/greek.t

Tests for RT #40641.

=item t/uni/latin2.t

Tests for RT #40641.

=item t/uni/overload.t

Tests for returning Unicode from overloaded values.

=item t/uni/tie.t

Tests for returning Unicode from tied variables.

=back

=head1 Known Problems

There are no known new bugs.

However, programs that rely on bugs that have been fixed will have problems.
Also, many bug fixes present in 5.10.0 can't be back-ported to the 5.8.x
branch, because they require changes that are binary incompatible, or because
the code changes are too large and hence too risky to incorporate.

We have only limited volunteer labour, and the maintenance burden is
getting increasingly complex. Hence this will be the last significant
release of the 5.8.x series. Any future releases of 5.8.x will likely
only be to deal with security issues, and platform build
failures. Hence you should look to migrating to 5.10.x, if you have
not started already. Alternatively, if business requirements constrain
you to continue to use 5.8.x, you may wish to consider commercial
support from firms such as ActiveState.

=head1 Platform Specific Notes

=head2 Win32

C<readdir()>, C<cwd()>, C<$^X> and C<@INC> now use the alternate (short)
filename if the long name is outside the current codepage (Jan Dubois).

=head3 Updated Modules

=over 4

=item *

C<Win32> upgraded to version 0.38. Now has a documented 'WinVista' response
from C<GetOSName> and support for Vista's privilege elevation in C<IsAdminUser>.
Support for Unicode characters in path names. Improved cygwin and Win64
compatibility. 

=item *

C<Win32API> updated to 0.1001_01

=item *

C<killpg()> support added to C<MSWin32> (Jan Dubois).

=item *

C<File::Spec::Win32> upgraded to version 3.2701

=back

=head2 OS/2

=head3 Updated Modules

=over 4

=item *

C<OS2::Process> upgraded to 1.03

Ilya Zakharevich has added and documented several C<Window*> and C<Clipbrd*>
functions.

=item *

C<OS2::REXX::DLL>, C<OS2::REXX> updated to version 1.03

=back

=head2 VMS

=head3 Updated Modules

=over 4

=item *

C<DCLsym> upgraded to version 1.03

=item *

C<Stdio> upgraded to version 2.4

=item *

C<VMS::XSSymSet> upgraded to 1.1.

=back

=head1 Obituary

Nick Ing-Simmons, long time Perl hacker, author of the C<Tk> and C<Encode>
modules, F<perlio.c> in the core, and 5.003_02 pumpking, died of a heart
attack on 25th September 2006. He will be missed.

=head1 Acknowledgements

Some of the work in this release was funded by a TPF grant.

Steve Hay worked behind the scenes working out the causes of the differences
between core modules, their CPAN releases, and previous core releases, and
the best way to rectify them. He doesn't want to do it again. I know this
feeling, and I'm very glad he did it this time, instead of me.

Paul Fenwick assembled a team of 18 volunteers, who broke the back of writing
this document. In particular, Bradley Dean, Eddy Tan, and Vincent Pit
provided half the team's contribution.

Schwern verified the list of updated module versions, correcting quite a few
errors that I (and everyone else) had missed, both wrongly stated module
versions, and changed modules that had not been listed.

The crack Berlin-based QA team of Andreas KE<ouml>nig and Slaven Rezic
tirelessly re-built snapshots, tested most everything CPAN against
them, and then identified the changes responsible for any module regressions,
ensuring that several show-stopper bugs were stomped before the first release
candidate was cut.

The other core committers contributed most of the changes, and applied most
of the patches sent in by the hundreds of contributors listed in F<AUTHORS>.

And obviously, Larry Wall, without whom we wouldn't have Perl.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.

If you believe you have an unreported bug, please run the B<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5-security-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for security
issues in the Perl core, not for modules independently distributed on CPAN.

=head1 SEE ALSO

The F<Changes> file for exhaustive details on what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
                                                                                                                                                                                                                                                                                                                                                                                   usr/local/lib/perl5/5.40.0/pod/perl58delta.pod                                                      0000644 0000000 0000000 00000340725 14714567415 017140  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

perl58delta - what is new for perl v5.8.0

=head1 DESCRIPTION

This document describes differences between the 5.6.0 release and
the 5.8.0 release.

Many of the bug fixes in 5.8.0 were already seen in the 5.6.1
maintenance release since the two releases were kept closely
coordinated (while 5.8.0 was still called 5.7.something).

Changes that were integrated into the 5.6.1 release are marked C<[561]>.
Many of these changes have been further developed since 5.6.1 was released,
those are marked C<[561+]>.

You can see the list of changes in the 5.6.1 release (both from the
5.005_03 release and the 5.6.0 release) by reading L<perl561delta>.

=head1 Highlights In 5.8.0

=over 4

=item *

Better Unicode support

=item *

New IO Implementation

=item *

New Thread Implementation

=item *

Better Numeric Accuracy

=item *

Safe Signals

=item *

Many New Modules

=item *

More Extensive Regression Testing

=back

=head1 Incompatible Changes

=head2 Binary Incompatibility

B<Perl 5.8 is not binary compatible with earlier releases of Perl.>

B<You have to recompile your XS modules.>

(Pure Perl modules should continue to work.)

The major reason for the discontinuity is the new IO architecture
called PerlIO.  PerlIO is the default configuration because without
it many new features of Perl 5.8 cannot be used.  In other words:
you just have to recompile your modules containing XS code, sorry
about that.

In future releases of Perl, non-PerlIO aware XS modules may become
completely unsupported.  This shouldn't be too difficult for module
authors, however: PerlIO has been designed as a drop-in replacement
(at the source code level) for the stdio interface.

Depending on your platform, there are also other reasons why
we decided to break binary compatibility, please read on.

=head2 64-bit platforms and malloc

If your pointers are 64 bits wide, the Perl malloc is no longer being
used because it does not work well with 8-byte pointers.  Also,
usually the system mallocs on such platforms are much better optimized
for such large memory models than the Perl malloc.  Some memory-hungry
Perl applications like the PDL don't work well with Perl's malloc.
Finally, other applications than Perl (such as mod_perl) tend to prefer
the system malloc.  Such platforms include Alpha and 64-bit HPPA,
MIPS, PPC, and Sparc.

=head2 AIX Dynaloading

The AIX dynaloading now uses in AIX releases 4.3 and newer the native
dlopen interface of AIX instead of the old emulated interface.  This
change will probably break backward compatibility with compiled
modules.  The change was made to make Perl more compliant with other
applications like mod_perl which are using the AIX native interface.

=head2 Attributes for C<my> variables now handled at run-time

The C<my EXPR : ATTRS> syntax now applies variable attributes at
run-time.  (Subroutine and C<our> variables still get attributes applied
at compile-time.)  See L<attributes> for additional details.  In particular,
however, this allows variable attributes to be useful for C<tie> interfaces,
which was a deficiency of earlier releases.  Note that the new semantics
doesn't work with the Attribute::Handlers module (as of version 0.76).

=head2 Socket Extension Dynamic in VMS

The Socket extension is now dynamically loaded instead of being
statically built in.  This may or may not be a problem with ancient
TCP/IP stacks of VMS: we do not know since we weren't able to test
Perl in such configurations.

=head2 IEEE-format Floating Point Default on OpenVMS Alpha

Perl now uses IEEE format (T_FLOAT) as the default internal floating
point format on OpenVMS Alpha, potentially breaking binary compatibility
with external libraries or existing data.  G_FLOAT is still available as
a configuration option.  The default on VAX (D_FLOAT) has not changed.

=head2 New Unicode Semantics (no more C<use utf8>, almost)

Previously in Perl 5.6 to use Unicode one would say "use utf8" and
then the operations (like string concatenation) were Unicode-aware
in that lexical scope.

This was found to be an inconvenient interface, and in Perl 5.8 the
Unicode model has completely changed: now the "Unicodeness" is bound
to the data itself, and for most of the time "use utf8" is not needed
at all.  The only remaining use of "use utf8" is when the Perl script
itself has been written in the UTF-8 encoding of Unicode.  (UTF-8 has
not been made the default since there are many Perl scripts out there
that are using various national eight-bit character sets, which would
be illegal in UTF-8.)

See L<perluniintro> for the explanation of the current model,
and L<utf8> for the current use of the utf8 pragma.

=head2 New Unicode Properties

Unicode I<scripts> are now supported. Scripts are similar to (and superior
to) Unicode I<blocks>. The difference between scripts and blocks is that
scripts are the glyphs used by a language or a group of languages, while
the blocks are more artificial groupings of (mostly) 256 characters based
on the Unicode numbering.

In general, scripts are more inclusive, but not universally so. For
example, while the script C<Latin> includes all the Latin characters and
their various diacritic-adorned versions, it does not include the various
punctuation or digits (since they are not solely C<Latin>).

A number of other properties are now supported, including C<\p{L&}>,
C<\p{Any}> C<\p{Assigned}>, C<\p{Unassigned}>, C<\p{Blank}> [561] and
C<\p{SpacePerl}> [561] (along with their C<\P{...}> versions, of course).
See L<perlunicode> for details, and more additions.

The C<In> or C<Is> prefix to names used with the C<\p{...}> and C<\P{...}>
are now almost always optional. The only exception is that a C<In> prefix
is required to signify a Unicode block when a block name conflicts with a
script name. For example, C<\p{Tibetan}> refers to the script, while
C<\p{InTibetan}> refers to the block. When there is no name conflict, you
can omit the C<In> from the block name (e.g. C<\p{BraillePatterns}>), but
to be safe, it's probably best to always use the C<In>).

=head2 REF(...) Instead Of SCALAR(...)

A reference to a reference now stringifies as "REF(0x81485ec)" instead
of "SCALAR(0x81485ec)" in order to be more consistent with the return
value of ref().

=head2 pack/unpack D/F recycled

The undocumented pack/unpack template letters D/F have been recycled
for better use: now they stand for long double (if supported by the
platform) and NV (Perl internal floating point type).  (They used
to be aliases for d/f, but you never knew that.)

=head2 glob() now returns filenames in alphabetical order

The list of filenames from glob() (or <...>) is now by default sorted
alphabetically to be csh-compliant (which is what happened before
in most Unix platforms).  (bsd_glob() does still sort platform
natively, ASCII or EBCDIC, unless GLOB_ALPHASORT is specified.) [561]

=head2 Deprecations

=over 4

=item *

The semantics of bless(REF, REF) were unclear and until someone proves
it to make some sense, it is forbidden.

=item *

The obsolete chat2 library that should never have been allowed
to escape the laboratory has been decommissioned.

=item *

Using chdir("") or chdir(undef) instead of explicit chdir() is
doubtful.  A failure (think chdir(some_function()) can lead into
unintended chdir() to the home directory, therefore this behaviour
is deprecated.

=item *

The builtin dump() function has probably outlived most of its
usefulness.  The core-dumping functionality will remain in future
available as an explicit call to C<CORE::dump()>, but in future
releases the behaviour of an unqualified C<dump()> call may change.

=item *

The very dusty examples in the eg/ directory have been removed.
Suggestions for new shiny examples welcome but the main issue is that
the examples need to be documented, tested and (most importantly)
maintained.

=item *

The (bogus) escape sequences \8 and \9 now give an optional warning
("Unrecognized escape passed through").  There is no need to \-escape
any C<\w> character.

=item *

The *glob{FILEHANDLE} is deprecated, use *glob{IO} instead.

=item *

The C<package;> syntax (C<package> without an argument) has been
deprecated.  Its semantics were never that clear and its
implementation even less so.  If you have used that feature to
disallow all but fully qualified variables, C<use strict;> instead.

=item *

The unimplemented POSIX regex features [[.cc.]] and [[=c=]] are still
recognised but now cause fatal errors.  The previous behaviour of
ignoring them by default and warning if requested was unacceptable
since it, in a way, falsely promised that the features could be used.

=item *

In future releases, non-PerlIO aware XS modules may become completely
unsupported.  Since PerlIO is a drop-in replacement for stdio at the
source code level, this shouldn't be that drastic a change.

=item *

Previous versions of perl and some readings of some sections of Camel
III implied that the C<:raw> "discipline" was the inverse of C<:crlf>.
Turning off "clrfness" is no longer enough to make a stream truly
binary. So the PerlIO C<:raw> layer (or "discipline", to use the Camel
book's older terminology) is now formally defined as being equivalent
to binmode(FH) - which is in turn defined as doing whatever is
necessary to pass each byte as-is without any translation.  In
particular binmode(FH) - and hence C<:raw> - will now turn off both
CRLF and UTF-8 translation and remove other layers (e.g. :encoding())
which would modify byte stream.

=item *

The current user-visible implementation of pseudo-hashes (the weird
use of the first array element) is deprecated starting from Perl 5.8.0
and will be removed in Perl 5.10.0, and the feature will be
implemented differently.  Not only is the current interface rather
ugly, but the current implementation slows down normal array and hash
use quite noticeably. The C<fields> pragma interface will remain
available.  The I<restricted hashes> interface is expected to
be the replacement interface (see L<Hash::Util>).  If your existing
programs depends on the underlying implementation, consider using
L<Class::PseudoHash> from CPAN.

=item *

The syntaxes C<< @a->[...] >> and  C<< %h->{...} >> have now been deprecated.

=item *

After years of trying, suidperl is considered to be too complex to
ever be considered truly secure.  The suidperl functionality is likely
to be removed in a future release.

=item *

The 5.005 threads model (module C<Thread>) is deprecated and expected
to be removed in Perl 5.10.  Multithreaded code should be migrated to
the new ithreads model (see L<threads>, L<threads::shared> and
L<perlthrtut>).

=item *

The long deprecated uppercase aliases for the string comparison
operators (EQ, NE, LT, LE, GE, GT) have now been removed.

=item *

The tr///C and tr///U features have been removed and will not return;
the interface was a mistake.  Sorry about that.  For similar
functionality, see pack('U0', ...) and pack('C0', ...). [561]

=item *

Earlier Perls treated "sub foo (@bar)" as equivalent to "sub foo (@)".
The prototypes are now checked better at compile-time for invalid
syntax.  An optional warning is generated ("Illegal character in
prototype...")  but this may be upgraded to a fatal error in a future
release.

=item *

The C<exec LIST> and C<system LIST> operations now produce warnings on
tainted data and in some future release they will produce fatal errors.

=item *

The existing behaviour when localising tied arrays and hashes is wrong,
and will be changed in a future release, so do not rely on the existing
behaviour. See L</"Localising Tied Arrays and Hashes Is Broken">.

=back

=head1 Core Enhancements

=head2 Unicode Overhaul

Unicode in general should be now much more usable than in Perl 5.6.0
(or even in 5.6.1).  Unicode can be used in hash keys, Unicode in
regular expressions should work now, Unicode in tr/// should work now,
Unicode in I/O should work now.  See L<perluniintro> for introduction
and L<perlunicode> for details.

=over 4

=item *

The Unicode Character Database coming with Perl has been upgraded
to Unicode 3.2.0.  For more information, see http://www.unicode.org/ .
[561+] (5.6.1 has UCD 3.0.1.)

=item *

For developers interested in enhancing Perl's Unicode capabilities:
almost all the UCD files are included with the Perl distribution in
the F<lib/unicore> subdirectory.  The most notable omission, for space
considerations, is the Unihan database.

=item *

The properties \p{Blank} and \p{SpacePerl} have been added. "Blank" is like
C isblank(), that is, it contains only "horizontal whitespace" (the space
character is, the newline isn't), and the "SpacePerl" is the Unicode
equivalent of C<\s> (\p{Space} isn't, since that includes the vertical
tabulator character, whereas C<\s> doesn't.)

See "New Unicode Properties" earlier in this document for additional
information on changes with Unicode properties.

=back

=head2 PerlIO is Now The Default

=over 4

=item *

IO is now by default done via PerlIO rather than system's "stdio".
PerlIO allows "layers" to be "pushed" onto a file handle to alter the
handle's behaviour.  Layers can be specified at open time via 3-arg
form of open:

   open($fh,'>:crlf :utf8', $path) || ...

or on already opened handles via extended C<binmode>:

   binmode($fh,':encoding(iso-8859-7)');

The built-in layers are: unix (low level read/write), stdio (as in
previous Perls), perlio (re-implementation of stdio buffering in a
portable manner), crlf (does CRLF <=> "\n" translation as on Win32,
but available on any platform).  A mmap layer may be available if
platform supports it (mostly Unixes).

Layers to be applied by default may be specified via the 'open' pragma.

See L</"Installation and Configuration Improvements"> for the effects
of PerlIO on your architecture name.

=item *

If your platform supports fork(), you can use the list form of C<open>
for pipes.  For example:

    open KID_PS, "-|", "ps", "aux" or die $!;

forks the ps(1) command (without spawning a shell, as there are more
than three arguments to open()), and reads its standard output via the
C<KID_PS> filehandle.  See L<perlipc>.

=item *

File handles can be marked as accepting Perl's internal encoding of Unicode
(UTF-8 or UTF-EBCDIC depending on platform) by a pseudo layer ":utf8" :

   open($fh,">:utf8","Uni.txt");

Note for EBCDIC users: the pseudo layer ":utf8" is erroneously named
for you since it's not UTF-8 what you will be getting but instead
UTF-EBCDIC.  See L<perlunicode>, L<utf8>, and
http://www.unicode.org/reports/tr16/ for more information.
In future releases this naming may change.  See L<perluniintro>
for more information about UTF-8.

=item *

If your environment variables (LC_ALL, LC_CTYPE, LANG) look like you
want to use UTF-8 (any of the variables match C</utf-?8/i>), your
STDIN, STDOUT, STDERR handles and the default open layer (see L<open>)
are marked as UTF-8.  (This feature, like other new features that
combine Unicode and I/O, work only if you are using PerlIO, but that's
the default.)

Note that after this Perl really does assume that everything is UTF-8:
for example if some input handle is not, Perl will probably very soon
complain about the input data like this "Malformed UTF-8 ..." since
any old eight-bit data is not legal UTF-8.

Note for code authors: if you want to enable your users to use UTF-8
as their default encoding  but in your code still have eight-bit I/O streams
(such as images or zip files), you need to explicitly open() or binmode()
with C<:bytes> (see L<perlfunc/open> and L<perlfunc/binmode>), or you
can just use C<binmode(FH)> (nice for pre-5.8.0 backward compatibility).

=item *

File handles can translate character encodings from/to Perl's internal
Unicode form on read/write via the ":encoding()" layer.

=item *

File handles can be opened to "in memory" files held in Perl scalars via:

   open($fh,'>', \$variable) || ...

=item *

Anonymous temporary files are available without need to
'use FileHandle' or other module via

   open($fh,"+>", undef) || ...

That is a literal undef, not an undefined value.

=back

=head2 ithreads

The new interpreter threads ("ithreads" for short) implementation of
multithreading, by Arthur Bergman, replaces the old "5.005 threads"
implementation.  In the ithreads model any data sharing between
threads must be explicit, as opposed to the model where data sharing
was implicit.  See L<threads> and L<threads::shared>, and
L<perlthrtut>.

As a part of the ithreads implementation Perl will also use
any necessary and detectable reentrant libc interfaces.

=head2 Restricted Hashes

A restricted hash is restricted to a certain set of keys, no keys
outside the set can be added.  Also individual keys can be restricted
so that the key cannot be deleted and the value cannot be changed.
No new syntax is involved: the Hash::Util module is the interface.

=head2 Safe Signals

Perl used to be fragile in that signals arriving at inopportune moments
could corrupt Perl's internal state.  Now Perl postpones handling of
signals until it's safe (between opcodes).

This change may have surprising side effects because signals no longer
interrupt Perl instantly.  Perl will now first finish whatever it was
doing, like finishing an internal operation (like sort()) or an
external operation (like an I/O operation), and only then look at any
arrived signals (and before starting the next operation).  No more corrupt
internal state since the current operation is always finished first,
but the signal may take more time to get heard.  Note that breaking
out from potentially blocking operations should still work, though.

=head2 Understanding of Numbers

In general a lot of fixing has happened in the area of Perl's
understanding of numbers, both integer and floating point.  Since in
many systems the standard number parsing functions like C<strtoul()>
and C<atof()> seem to have bugs, Perl tries to work around their
deficiencies.  This results hopefully in more accurate numbers.

Perl now tries internally to use integer values in numeric conversions
and basic arithmetics (+ - * /) if the arguments are integers, and
tries also to keep the results stored internally as integers.
This change leads to often slightly faster and always less lossy
arithmetics. (Previously Perl always preferred floating point numbers
in its math.)

=head2 Arrays now always interpolate into double-quoted strings [561]

In double-quoted strings, arrays now interpolate, no matter what.  The
behavior in earlier versions of perl 5 was that arrays would interpolate
into strings if the array had been mentioned before the string was
compiled, and otherwise Perl would raise a fatal compile-time error.
In versions 5.000 through 5.003, the error was

        Literal @example now requires backslash

