        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="508">A pixbuf loader.</doc>
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="509">Pointer to image data.</doc>
            <array length="1" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="510">Length of the @buf buffer in bytes.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_bytes"
              c:identifier="gdk_pixbuf_loader_write_bytes"
              version="2.30"
              throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-loader.c"
             line="567">Parses the next contents of the given image buffer.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-loader.c"
               line="575">`TRUE` if the write was successful, or `FALSE` if
  the loader cannot parse the buffer</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="569">A pixbuf loader.</doc>
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="570">The image data as a `GBytes` buffer.</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <glib:signal name="area-prepared" when="last">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-loader.c"
             line="154">This signal is emitted when the pixbuf loader has allocated the
pixbuf in the desired size.

After this signal is emitted, applications can call
gdk_pixbuf_loader_get_pixbuf() to fetch the partially-loaded
pixbuf.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="area-updated" when="last">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-loader.c"
             line="174">This signal is emitted when a significant area of the image being
loaded has been updated.

Normally it means that a complete scanline has been read in, but
it could be a different area as well.

Applications can use this signal to know when to repaint
areas of an image that is being loaded.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="177">X offset of upper-left corner of the updated area.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="178">Y offset of upper-left corner of the updated area.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="179">Width of updated area.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="180">Height of updated area.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="closed" when="last">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-loader.c"
             line="204">This signal is emitted when gdk_pixbuf_loader_close() is called.

It can be used by different parts of an application to receive
notification when an image loader is closed by the code that
drives it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="size-prepared" when="last">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-loader.c"
             line="129">This signal is emitted when the pixbuf loader has been fed the
initial amount of data that is required to figure out the size
of the image that it will create.

Applications can call gdk_pixbuf_loader_set_size() in response
to this signal to set the desired size to which the image
should be scaled.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="132">the original width of the image</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="133">the original height of the image</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PixbufLoaderClass"
            c:type="GdkPixbufLoaderClass"
            glib:is-gtype-struct-for="PixbufLoader">
      <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h" line="74"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="size_prepared">
        <callback name="size_prepared">
          <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="loader" transfer-ownership="none">
              <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="area_prepared">
        <callback name="area_prepared">
          <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="loader" transfer-ownership="none">
              <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="area_updated">
        <callback name="area_updated">
          <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h"
                           line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="loader" transfer-ownership="none">
              <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="closed">
        <callback name="closed">
          <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h"
                           line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="loader" transfer-ownership="none">
              <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="PixbufModule" c:type="GdkPixbufModule">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.c"
           line="50">A `GdkPixbufModule` contains the necessary functions to load and save
images in a certain file format.

If `GdkPixbuf` has been compiled with `GModule` support, it can be extended
by modules which can load (and perhaps also save) new image and animation
formats.

## Implementing modules

The `GdkPixbuf` interfaces needed for implementing modules are contained in
`gdk-pixbuf-io.h` (and `gdk-pixbuf-animation.h` if the module supports
animations). They are not covered by the same stability guarantees as the
regular GdkPixbuf API. To underline this fact, they are protected by the
`GDK_PIXBUF_ENABLE_BACKEND` pre-processor symbol.

Each loadable module must contain a `GdkPixbufModuleFillVtableFunc` function
named `fill_vtable`, which will get called when the module
is loaded and must set the function pointers of the `GdkPixbufModule`.

In order to make format-checking work before actually loading the modules
(which may require calling `dlopen` to load image libraries), modules export
their signatures (and other information) via the `fill_info` function. An
external utility, `gdk-pixbuf-query-loaders`, uses this to create a text
file containing a list of all available loaders and  their signatures.
This file is then read at runtime by `GdkPixbuf` to obtain the list of
available loaders and their signatures.

Modules may only implement a subset of the functionality available via
`GdkPixbufModule`. If a particular functionality is not implemented, the
`fill_vtable` function will simply not set the corresponding
function pointers of the `GdkPixbufModule` structure. If a module supports
incremental loading (i.e. provides `begin_load`, `stop_load` and
`load_increment`), it doesn't have to implement `load`, since `GdkPixbuf`
can supply a generic `load` implementation wrapping the incremental loading.

## Installing modules

Installing a module is a two-step process:

 - copy the module file(s) to the loader directory (normally
   `$libdir/gdk-pixbuf-2.0/$version/loaders`, unless overridden by the
   environment variable `GDK_PIXBUF_MODULEDIR`)
 - call `gdk-pixbuf-query-loaders` to update the module file (normally
   `$libdir/gdk-pixbuf-2.0/$version/loaders.cache`, unless overridden
   by the environment variable `GDK_PIXBUF_MODULE_FILE`)</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="400"/>
      <field name="module_name" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="52">the name of the module, usually the same as the
 usual file extension for images of this type, eg. "xpm", "jpeg" or "png".</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="module_path" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="54">the path from which the module is loaded.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="module" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="55">the loaded `GModule`.</doc>
        <type name="GModule.Module" c:type="GModule*"/>
      </field>
      <field name="info" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="56">a `GdkPixbufFormat` holding information about the module.</doc>
        <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
      </field>
      <field name="load" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="57">loads an image from a file.</doc>
        <type name="PixbufModuleLoadFunc" c:type="GdkPixbufModuleLoadFunc"/>
      </field>
      <field name="load_xpm_data" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="58">loads an image from data in memory.</doc>
        <type name="PixbufModuleLoadXpmDataFunc"
              c:type="GdkPixbufModuleLoadXpmDataFunc"/>
      </field>
      <field name="begin_load" introspectable="0" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="59">begins an incremental load.</doc>
        <type name="PixbufModuleBeginLoadFunc"
              c:type="GdkPixbufModuleBeginLoadFunc"/>
      </field>
      <field name="stop_load" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="60">stops an incremental load.</doc>
        <type name="PixbufModuleStopLoadFunc"
              c:type="GdkPixbufModuleStopLoadFunc"/>
      </field>
      <field name="load_increment" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="61">continues an incremental load.</doc>
        <type name="PixbufModuleIncrementLoadFunc"
              c:type="GdkPixbufModuleIncrementLoadFunc"/>
      </field>
      <field name="load_animation" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="62">loads an animation from a file.</doc>
        <type name="PixbufModuleLoadAnimationFunc"
              c:type="GdkPixbufModuleLoadAnimationFunc"/>
      </field>
      <field name="save" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="63">saves a `GdkPixbuf` to a file.</doc>
        <type name="PixbufModuleSaveFunc" c:type="GdkPixbufModuleSaveFunc"/>
      </field>
      <field name="save_to_callback" introspectable="0" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="64">saves a `GdkPixbuf` by calling the given `GdkPixbufSaveFunc`.</doc>
        <type name="PixbufModuleSaveCallbackFunc"
              c:type="GdkPixbufModuleSaveCallbackFunc"/>
      </field>
      <field name="is_save_option_supported" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="65">returns whether a save option key is supported by the module</doc>
        <type name="PixbufModuleSaveOptionSupportedFunc"
              c:type="GdkPixbufModuleSaveOptionSupportedFunc"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="396"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="397"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="398"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="399"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="PixbufModuleBeginLoadFunc"
              c:type="GdkPixbufModuleBeginLoadFunc"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="255">Sets up the image loading state.

The image loader is responsible for storing the given function pointers
and user data, and call them when needed.

The image loader should set up an internal state object, and return it
from this function; the state object will then be updated from the
[callback@GdkPixbuf.PixbufModuleIncrementLoadFunc] callback, and will be freed
by [callback@GdkPixbuf.PixbufModuleStopLoadFunc] callback.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="277"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="273">the data to be passed to
  [callback@GdkPixbuf.PixbufModuleIncrementLoadFunc]
  and [callback@GdkPixbuf.PixbufModuleStopLoadFunc], or `NULL` in case of error</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="size_func" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="257">the function to be called when the size is known</doc>
          <type name="PixbufModuleSizeFunc" c:type="GdkPixbufModuleSizeFunc"/>
        </parameter>
        <parameter name="prepared_func" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="258">the function to be called when the data has been prepared</doc>
          <type name="PixbufModulePreparedFunc"
                c:type="GdkPixbufModulePreparedFunc"/>
        </parameter>
        <parameter name="updated_func" transfer-ownership="none" closure="3">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="259">the function to be called when the data has been updated</doc>
          <type name="PixbufModuleUpdatedFunc"
                c:type="GdkPixbufModuleUpdatedFunc"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="260">the data to be passed to the functions</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PixbufModuleFillInfoFunc"
              c:type="GdkPixbufModuleFillInfoFunc"
              version="2.2">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="413">Defines the type of the function used to fill a
#GdkPixbufFormat structure with information about a module.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="422"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="415">a #GdkPixbufFormat.</doc>
          <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PixbufModuleFillVtableFunc"
              c:type="GdkPixbufModuleFillVtableFunc"
              version="2.2">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="402">Defines the type of the function used to set the vtable of a
#GdkPixbufModule when it is loaded.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="411"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="module" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="404">a #GdkPixbufModule.</doc>
          <type name="PixbufModule" c:type="GdkPixbufModule*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PixbufModuleIncrementLoadFunc"
              c:type="GdkPixbufModuleIncrementLoadFunc"
              throws="1">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="297">Incrementally loads a buffer into the image data.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="308"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="306">`TRUE` if the incremental load was successful</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="context"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="299">the state object created by [callback@GdkPixbuf.PixbufModuleBeginLoadFunc]</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="buf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="300">the data to load</doc>
          <array length="2" zero-terminated="0" c:type="const guchar*">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="301">the length of the data to load</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PixbufModuleLoadAnimationFunc"
              c:type="GdkPixbufModuleLoadAnimationFunc"
              throws="1">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="241">Loads a file from a standard C file stream into a new `GdkPixbufAnimation`.

In case of error, this function should return `NULL` and set the `error` argument.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="252"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="250">a newly created `GdkPixbufAnimation` for the contents of the file</doc>
        <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
      </return-value>
      <parameters>
        <parameter name="f"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="243">the file stream from which the image should be loaded</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PixbufModuleLoadFunc"
              c:type="GdkPixbufModuleLoadFunc"
              throws="1">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="217">Loads a file from a standard C file stream into a new `GdkPixbuf`.

In case of error, this function should return `NULL` and set the `error` argument.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="228"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="226">a newly created `GdkPixbuf` for the contents of the file</doc>
        <type name="Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="f"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="219">the file stream from which the image should be loaded</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PixbufModuleLoadXpmDataFunc"
              c:type="GdkPixbufModuleLoadXpmDataFunc">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="231">Loads XPM data into a new `GdkPixbuf`.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="239"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="237">a newly created `GdkPixbuf` for the XPM data</doc>
        <type name="Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="233">the XPM data</doc>
          <array c:type="const char**">
            <type name="utf8" c:type="char*"/>
          </array>
        </parameter>
      </parameters>
    </callback>
    <record name="PixbufModulePattern"
            c:type="GdkPixbufModulePattern"
            version="2.2">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="170">The signature prefix for a module.

The signature of a module is a set of prefixes. Prefixes are encoded as
pairs of ordinary strings, where the second string, called the mask, if
not `NULL`, must be of the same length as the first one and may contain
' ', '!', 'x', 'z', and 'n' to indicate bytes that must be matched,
not matched, "don't-care"-bytes, zeros and non-zeros, respectively.

Each prefix has an associated integer that describes the relevance of
the prefix, with 0 meaning a mismatch and 100 a "perfect match".

Starting with gdk-pixbuf 2.8, the first byte of the mask may be '*',
indicating an unanchored pattern that matches not only at the beginning,
but also in the middle. Versions prior to 2.8 will interpret the '*'
like an 'x'.

The signature of a module is stored as an array of
`GdkPixbufModulePatterns`. The array is terminated by a pattern
where the `prefix` is `NULL`.

```c
GdkPixbufModulePattern *signature[] = {
  { "abcdx", " !x z", 100 },
  { "bla", NULL,  90 },
  { NULL, NULL, 0 }
};
```

In the example above, the signature matches e.g. "auud\0" with
relevance 100, and "blau" with relevance 90.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="215"/>
      <field name="prefix" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="172">the prefix for this pattern</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="mask" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="173">mask containing bytes which modify how the prefix is matched against
 test data</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="relevance" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="175">relevance of this pattern</doc>
        <type name="gint" c:type="int"/>
      </field>
    </record>
    <callback name="PixbufModulePreparedFunc"
              c:type="GdkPixbufModulePreparedFunc"
              version="2.2">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="126">Defines the type of the function that gets called once the initial
setup of @pixbuf is done.

#GdkPixbufLoader uses a function of this type to emit the
"&lt;link linkend="GdkPixbufLoader-area-prepared"&gt;area_prepared&lt;/link&gt;"
signal.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="141"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="128">the #GdkPixbuf that is currently being loaded.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="anim" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="129">if an animation is being loaded, the #GdkPixbufAnimation, else %NULL.</doc>
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="130">the loader.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PixbufModuleSaveCallbackFunc"
              c:type="GdkPixbufModuleSaveCallbackFunc"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="336">Saves a `GdkPixbuf` by calling the provided function.

The optional `option_keys` and `option_values` arrays contain the keys and
values (in the same order) for attributes to be saved alongside the image
data.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="354"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="351">`TRUE` on success; in case of failure, `FALSE` is returned and
  the `error` is set</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="save_func" transfer-ownership="none" closure="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="338">the function to call when saving</doc>
          <type name="PixbufSaveFunc" c:type="GdkPixbufSaveFunc"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="339">the data to pass to @save_func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="340">the `GdkPixbuf` to save</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="option_keys"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="341">an array of option names</doc>
          <array c:type="gchar**">
            <type name="utf8" c:type="gchar*"/>
          </array>
        </parameter>
        <parameter name="option_values"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="342">an array of option values</doc>
          <array c:type="gchar**">
            <type name="utf8" c:type="gchar*"/>
          </array>
        </parameter>
      </parameters>
    </callback>
    <callback name="PixbufModuleSaveFunc"
              c:type="GdkPixbufModuleSaveFunc"
              throws="1">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="313">Saves a `GdkPixbuf` into a standard C file stream.

The optional `param_keys` and `param_values` arrays contain the keys and
values (in the same order) for attributes to be saved alongside the image
data.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="330"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="327">`TRUE` on success; in case of failure, `FALSE` is returned and
  the `error` is set</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="f"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="315">the file stream into which the image should be saved</doc>
          <type name="gpointer" c:type="FILE*"/>
        </parameter>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="316">the image to save</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="param_keys"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="317">parameter keys to save</doc>
          <array c:type="gchar**">
            <type name="utf8" c:type="gchar*"/>
          </array>
        </parameter>
        <parameter name="param_values"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="318">parameter values to save</doc>
          <array c:type="gchar**">
            <type name="utf8" c:type="gchar*"/>
          </array>
        </parameter>
      </parameters>
    </callback>
    <callback name="PixbufModuleSaveOptionSupportedFunc"
              c:type="GdkPixbufModuleSaveOptionSupportedFunc">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="361">Checks whether the given `option_key` is supported when saving.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="369"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="367">`TRUE` if the option is supported</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="option_key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="363">the option key to check</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PixbufModuleSizeFunc"
              c:type="GdkPixbufModuleSizeFunc"
              version="2.2">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="100">Defines the type of the function that gets called once the size
of the loaded image is known.

The function is expected to set @width and @height to the desired
size to which the image should be scaled. If a module has no efficient
way to achieve the desired scaling during the loading of the image, it may
either ignore the size request, or only approximate it - gdk-pixbuf will
then perform the required scaling on the completely loaded image.

If the function sets @width or @height to zero, the module should interpret
this as a hint that it will be closed soon and shouldn't allocate further
resources. This convention is used to implement gdk_pixbuf_get_file_info()
efficiently.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="122"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="width" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="102">pointer to a location containing the current image width</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="103">pointer to a location containing the current image height</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="104">the loader.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PixbufModuleStopLoadFunc"
              c:type="GdkPixbufModuleStopLoadFunc"
              throws="1">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="283">Finalizes the image loading state.

This function is called on success and error states.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="294"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="292">`TRUE` if the loading operation was successful</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="context"
                   transfer-ownership="full"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="285">the state object created by [callback@GdkPixbuf.PixbufModuleBeginLoadFunc]</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PixbufModuleUpdatedFunc"
              c:type="GdkPixbufModuleUpdatedFunc"
              version="2.2">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="145">Defines the type of the function that gets called every time a region
of @pixbuf is updated.

#GdkPixbufLoader uses a function of this type to emit the
"&lt;link linkend="GdkPixbufLoader-area-updated"&gt;area_updated&lt;/link&gt;"
signal.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="163"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="147">the #GdkPixbuf that is currently being loaded.</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="148">the X origin of the updated area.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="149">the Y origin of the updated area.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="150">the width of the updated area.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="151">the height of the updated area.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="5">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.h"
               line="152">the loader.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="PixbufNonAnim"
           c:symbol-prefix="pixbuf_non_anim"
           parent="PixbufAnimation"
           glib:type-name="GdkPixbufNonAnim"
           glib:get-type="gdk_pixbuf_non_anim_get_type">
      <constructor name="new" c:identifier="gdk_pixbuf_non_anim_new">
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="215"/>
        <return-value transfer-ownership="full">
