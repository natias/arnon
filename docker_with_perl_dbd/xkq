
    def __init__(self):
        self.cache = {}

    def add(self, entry):
        """Adds an entry"""
        try:
            list = self.cache[entry.key]
        except KeyError:
            list = self.cache[entry.key] = []
        list.append(entry)

    def remove(self, entry):
        """Removes an entry"""
        try:
            list = self.cache[entry.key]
            list.remove(entry)
        except KeyError:
            pass

    def get(self, entry):
        """Gets an entry by key.  Will return None if there is no
        matching entry."""
        try:
            list = self.cache[entry.key]
            return list[list.index(entry)]
        except (KeyError, ValueError):
            return None

    def getByDetails(self, name, type, clazz):
        """Gets an entry by details.  Will return None if there is
        no matching entry."""
        entry = DNSEntry(name, type, clazz)
        return self.get(entry)

    def entriesWithName(self, name):
        """Returns a list of entries whose key matches the name."""
        try:
            return self.cache[name]
        except KeyError:
            return []

    def entries(self):
        """Returns a list of all entries"""
        try:
            return list(itertools.chain.from_iterable(self.cache.values()))
        except Exception:
            return []


class Engine(threading.Thread):
    """An engine wraps read access to sockets, allowing objects that
    need to receive data from sockets to be called back when the
    sockets are ready.

    A reader needs a handle_read() method, which is called when the socket
    it is interested in is ready for reading.

    Writers are not implemented here, because we only send short
    packets.
    """

    def __init__(self, zeroconf):
        threading.Thread.__init__(self)
        self.zeroconf = zeroconf
        self.readers = {}  # maps socket to reader
        self.timeout = 5
        self.condition = threading.Condition()
        self.start()

    def run(self):
        while not globals()[b'_GLOBAL_DONE']:
            rs = self.getReaders()
            if len(rs) == 0:
                # No sockets to manage, but we wait for the timeout
                # or addition of a socket
                #
                self.condition.acquire()
                self.condition.wait(self.timeout)
                self.condition.release()
            else:
                try:
                    rr, wr, er = select.select(rs, [], [], self.timeout)
                    for sock in rr:
                        try:
                            self.readers[sock].handle_read()
                        except Exception:
                            if not globals()[b'_GLOBAL_DONE']:
                                traceback.print_exc()
                except Exception:
                    pass

    def getReaders(self):
        self.condition.acquire()
        result = self.readers.keys()
        self.condition.release()
        return result

    def addReader(self, reader, socket):
        self.condition.acquire()
        self.readers[socket] = reader
        self.condition.notify()
        self.condition.release()

    def delReader(self, socket):
        self.condition.acquire()
        del self.readers[socket]
        self.condition.notify()
        self.condition.release()

    def notify(self):
        self.condition.acquire()
        self.condition.notify()
        self.condition.release()


class Listener:
    """A Listener is used by this module to listen on the multicast
    group to which DNS messages are sent, allowing the implementation
    to cache information as it arrives.

    It requires registration with an Engine object in order to have
    the read() method called when a socket is available for reading."""

    def __init__(self, zeroconf):
        self.zeroconf = zeroconf
        self.zeroconf.engine.addReader(self, self.zeroconf.socket)

    def handle_read(self):
        sock = self.zeroconf.socket
        try:
            data, (addr, port) = sock.recvfrom(_MAX_MSG_ABSOLUTE)
        except socket.error as e:
            if e.errno == errno.EBADF:
                # some other thread may close the socket
                return
            else:
                raise
        self.data = data
        msg = DNSIncoming(data)
        if msg.isQuery():
            # Always multicast responses
            #
            if port == _MDNS_PORT:
                self.zeroconf.handleQuery(msg, _MDNS_ADDR, _MDNS_PORT)
            # If it's not a multicast query, reply via unicast
            # and multicast
            #
            elif port == _DNS_PORT:
                self.zeroconf.handleQuery(msg, addr, port)
                self.zeroconf.handleQuery(msg, _MDNS_ADDR, _MDNS_PORT)
        else:
            self.zeroconf.handleResponse(msg)


class Reaper(threading.Thread):
    """A Reaper is used by this module to remove cache entries that
    have expired."""

    def __init__(self, zeroconf):
        threading.Thread.__init__(self)
        self.zeroconf = zeroconf
        self.start()

    def run(self):
        while True:
            self.zeroconf.wait(10 * 1000)
            if globals()[b'_GLOBAL_DONE']:
                return
            now = currentTimeMillis()
            for record in self.zeroconf.cache.entries():
                if record.isExpired(now):
                    self.zeroconf.updateRecord(now, record)
                    self.zeroconf.cache.remove(record)


class ServiceBrowser(threading.Thread):
    """Used to browse for a service of a specific type.

    The listener object will have its addService() and
    removeService() methods called when this browser
    discovers changes in the services availability."""

    def __init__(self, zeroconf, type, listener):
        """Creates a browser for a specific type"""
        threading.Thread.__init__(self)
        self.zeroconf = zeroconf
        self.type = type
        self.listener = listener
        self.services = {}
        self.nexttime = currentTimeMillis()
        self.delay = _BROWSER_TIME
        self.list = []

        self.done = 0

        self.zeroconf.addListener(
            self, DNSQuestion(self.type, _TYPE_PTR, _CLASS_IN)
        )
        self.start()

    def updateRecord(self, zeroconf, now, record):
        """Callback invoked by Zeroconf when new information arrives.

        Updates information required by browser in the Zeroconf cache."""
        if record.type == _TYPE_PTR and record.name == self.type:
            expired = record.isExpired(now)
            try:
                oldrecord = self.services[record.alias.lower()]
                if not expired:
                    oldrecord.resetTTL(record)
                else:
                    del self.services[record.alias.lower()]
                    callback = lambda x: self.listener.removeService(
                        x, self.type, record.alias
                    )
                    self.list.append(callback)
                    return
            except Exception:
                if not expired:
                    self.services[record.alias.lower()] = record
                    callback = lambda x: self.listener.addService(
                        x, self.type, record.alias
                    )
                    self.list.append(callback)

            expires = record.getExpirationTime(75)
            if expires < self.nexttime:
                self.nexttime = expires

    def cancel(self):
        self.done = 1
        self.zeroconf.notifyAll()

    def run(self):
        while True:
            event = None
            now = currentTimeMillis()
            if len(self.list) == 0 and self.nexttime > now:
                self.zeroconf.wait(self.nexttime - now)
            if globals()[b'_GLOBAL_DONE'] or self.done:
                return
            now = currentTimeMillis()

            if self.nexttime <= now:
                out = DNSOutgoing(_FLAGS_QR_QUERY)
                out.addQuestion(DNSQuestion(self.type, _TYPE_PTR, _CLASS_IN))
                for record in self.services.values():
                    if not record.isExpired(now):
                        out.addAnswerAtTime(record, now)
                self.zeroconf.send(out)
                self.nexttime = now + self.delay
                self.delay = min(20 * 1000, self.delay * 2)

            if len(self.list) > 0:
                event = self.list.pop(0)

            if event is not None:
                event(self.zeroconf)


class ServiceInfo:
    """Service information"""

    def __init__(
        self,
        type,
        name,
        address=None,
        port=None,
        weight=0,
        priority=0,
        properties=None,
        server=None,
    ):
        """Create a service description.

        type: fully qualified service type name
        name: fully qualified service name
        address: IP address as unsigned short, network byte order
        port: port that the service runs on
        weight: weight of the service
        priority: priority of the service
        properties: dictionary of properties (or a string holding the bytes for
                    the text field)
        server: fully qualified name for service host (defaults to name)"""

        if not name.endswith(type):
            raise BadTypeInNameException
        self.type = type
        self.name = name
        self.address = address
        self.port = port
        self.weight = weight
        self.priority = priority
        if server:
            self.server = server
        else:
            self.server = name
        self.setProperties(properties)

    def setProperties(self, properties):
        """Sets properties and text of this info from a dictionary"""
        if isinstance(properties, dict):
            self.properties = properties
            list = []
            result = b''
            for key in properties:
                value = properties[key]
                if value is None:
                    suffix = b''
                elif isinstance(value, str):
                    suffix = value
                elif isinstance(value, int):
                    if value:
                        suffix = b'true'
                    else:
                        suffix = b'false'
                else:
                    suffix = b''
                list.append(b'='.join((key, suffix)))
            for item in list:
                result = b''.join(
                    (
                        result,
                        struct.pack(b'!c', pycompat.bytechr(len(item))),
                        item,
                    )
                )
            self.text = result
        else:
            self.text = properties

    def setText(self, text):
        """Sets properties and text given a text field"""
        self.text = text
        try:
            result = {}
            end = len(text)
            index = 0
            strs = []
            while index < end:
                length = ord(text[index])
                index += 1
                strs.append(text[index : index + length])
                index += length

            for s in strs:
                eindex = s.find(b'=')
                if eindex == -1:
                    # No equals sign at all
                    key = s
                    value = 0
                else:
                    key = s[:eindex]
                    value = s[eindex + 1 :]
                    if value == b'true':
                        value = 1
                    elif value == b'false' or not value:
                        value = 0

                # Only update non-existent properties
                if key and result.get(key) is None:
                    result[key] = value

            self.properties = result
        except Exception:
            traceback.print_exc()
            self.properties = None

    def getType(self):
        """Type accessor"""
        return self.type

    def getName(self):
        """Name accessor"""
        if self.type is not None and self.name.endswith(b"." + self.type):
            return self.name[: len(self.name) - len(self.type) - 1]
        return self.name

    def getAddress(self):
        """Address accessor"""
        return self.address

    def getPort(self):
        """Port accessor"""
        return self.port

    def getPriority(self):
        """Priority accessor"""
        return self.priority

    def getWeight(self):
        """Weight accessor"""
        return self.weight

    def getProperties(self):
        """Properties accessor"""
        return self.properties

    def getText(self):
        """Text accessor"""
        return self.text

    def getServer(self):
        """Server accessor"""
        return self.server

    def updateRecord(self, zeroconf, now, record):
        """Updates service information from a DNS record"""
        if record is not None and not record.isExpired(now):
            if record.type == _TYPE_A:
                # if record.name == self.name:
                if record.name == self.server:
                    self.address = record.address
            elif record.type == _TYPE_SRV:
                if record.name == self.name:
                    self.server = record.server
                    self.port = record.port
                    self.weight = record.weight
                    self.priority = record.priority
                    # self.address = None
                    self.updateRecord(
                        zeroconf,
                        now,
                        zeroconf.cache.getByDetails(
                            self.server, _TYPE_A, _CLASS_IN
                        ),
                    )
            elif record.type == _TYPE_TXT:
                if record.name == self.name:
                    self.setText(record.text)

    def request(self, zeroconf, timeout):
        """Returns true if the service could be discovered on the
        network, and updates this object with details discovered.
        """
        now = currentTimeMillis()
        delay = _LISTENER_TIME
        next = now + delay
        last = now + timeout
        try:
            zeroconf.addListener(
                self, DNSQuestion(self.name, _TYPE_ANY, _CLASS_IN)
            )
            while (
                self.server is None or self.address is None or self.text is None
            ):
                if last <= now:
                    return 0
                if next <= now:
                    out = DNSOutgoing(_FLAGS_QR_QUERY)
                    out.addQuestion(
                        DNSQuestion(self.name, _TYPE_SRV, _CLASS_IN)
                    )
                    out.addAnswerAtTime(
                        zeroconf.cache.getByDetails(
                            self.name, _TYPE_SRV, _CLASS_IN
                        ),
                        now,
                    )
                    out.addQuestion(
                        DNSQuestion(self.name, _TYPE_TXT, _CLASS_IN)
                    )
                    out.addAnswerAtTime(
                        zeroconf.cache.getByDetails(
                            self.name, _TYPE_TXT, _CLASS_IN
                        ),
                        now,
                    )
                    if self.server is not None:
                        out.addQuestion(
                            DNSQuestion(self.server, _TYPE_A, _CLASS_IN)
                        )
                        out.addAnswerAtTime(
                            zeroconf.cache.getByDetails(
                                self.server, _TYPE_A, _CLASS_IN
                            ),
                            now,
                        )
                    zeroconf.send(out)
                    next = now + delay
                    delay = delay * 2

                zeroconf.wait(min(next, last) - now)
                now = currentTimeMillis()
            result = 1
        finally:
            zeroconf.removeListener(self)

        return result

    def __eq__(self, other):
        """Tests equality of service name"""
        if isinstance(other, ServiceInfo):
            return other.name == self.name
        return 0

    def __ne__(self, other):
        """Non-equality test"""
        return not self.__eq__(other)

    def __repr__(self):
        """String representation"""
        result = b"service[%s,%s:%s," % (
            self.name,
            socket.inet_ntoa(self.getAddress()),
            self.port,
        )
        if self.text is None:
            result += b"None"
        else:
            if len(self.text) < 20:
                result += self.text
            else:
                result += self.text[:17] + b"..."
        result += b"]"
        return result


class Zeroconf:
    """Implementation of Zeroconf Multicast DNS Service Discovery

    Supports registration, unregistration, queries and browsing.
    """

    def __init__(self, bindaddress=None):
        """Creates an instance of the Zeroconf class, establishing
        multicast communications, listening and reaping threads."""
        globals()[b'_GLOBAL_DONE'] = 0
        if bindaddress is None:
            self.intf = socket.gethostbyname(socket.gethostname())
        else:
            self.intf = bindaddress
        self.group = (b'', _MDNS_PORT)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        try:
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
        except Exception:
            # SO_REUSEADDR should be equivalent to SO_REUSEPORT for
            # multicast UDP sockets (p 731, "TCP/IP Illustrated,
            # Volume 2"), but some BSD-derived systems require
            # SO_REUSEPORT to be specified explicitly.  Also, not all
            # versions of Python have SO_REUSEPORT available.  So
            # if you're on a BSD-based system, and haven't upgraded
            # to Python 2.3 yet, you may find this library doesn't
            # work as expected.
            #
            pass
        self.socket.setsockopt(socket.SOL_IP, socket.IP_MULTICAST_TTL, b"\xff")
        self.socket.setsockopt(socket.SOL_IP, socket.IP_MULTICAST_LOOP, b"\x01")
        try:
            self.socket.bind(self.group)
        except Exception:
            # Some versions of linux raise an exception even though
            # SO_REUSEADDR and SO_REUSEPORT have been set, so ignore it
            pass
        self.socket.setsockopt(
            socket.SOL_IP,
            socket.IP_ADD_MEMBERSHIP,
            socket.inet_aton(_MDNS_ADDR) + socket.inet_aton('0.0.0.0'),
        )

        self.listeners = []
        self.browsers = []
        self.services = {}
        self.servicetypes = {}

        self.cache = DNSCache()

        self.condition = threading.Condition()

        self.engine = Engine(self)
        self.listener = Listener(self)
        self.reaper = Reaper(self)

    def isLoopback(self):
        return self.intf.startswith(b"127.0.0.1")

    def isLinklocal(self):
        return self.intf.startswith(b"169.254.")

    def wait(self, timeout):
        """Calling thread waits for a given number of milliseconds or
        until notified."""
        self.condition.acquire()
        self.condition.wait(timeout / 1000)
        self.condition.release()

    def notifyAll(self):
        """Notifies all waiting threads"""
        self.condition.acquire()
        self.condition.notify_all()
        self.condition.release()

    def getServiceInfo(self, type, name, timeout=3000):
        """Returns network's service information for a particular
        name and type, or None if no service matches by the timeout,
        which defaults to 3 seconds."""
        info = ServiceInfo(type, name)
        if info.request(self, timeout):
            return info
        return None

    def addServiceListener(self, type, listener):
        """Adds a listener for a particular service type.  This object
        will then have its updateRecord method called when information
        arrives for that type."""
        self.removeServiceListener(listener)
        self.browsers.append(ServiceBrowser(self, type, listener))

    def removeServiceListener(self, listener):
        """Removes a listener from the set that is currently listening."""
        for browser in self.browsers:
            if browser.listener == listener:
                browser.cancel()
                del browser

    def registerService(self, info, ttl=_DNS_TTL):
        """Registers service information to the network with a default TTL
        of 60 seconds.  Zeroconf will then respond to requests for
        information for that service.  The name of the service may be
        changed if needed to make it unique on the network."""
        self.checkService(info)
        self.services[info.name.lower()] = info
        if info.type in self.servicetypes:
            self.servicetypes[info.type] += 1
        else:
            self.servicetypes[info.type] = 1
        now = currentTimeMillis()
        nexttime = now
        i = 0
        while i < 3:
            if now < nexttime:
                self.wait(nexttime - now)
                now = currentTimeMillis()
                continue
            out = DNSOutgoing(_FLAGS_QR_RESPONSE | _FLAGS_AA)
            out.addAnswerAtTime(
                DNSPointer(info.type, _TYPE_PTR, _CLASS_IN, ttl, info.name), 0
            )
            out.addAnswerAtTime(
                DNSService(
                    info.name,
                    _TYPE_SRV,
                    _CLASS_IN,
                    ttl,
                    info.priority,
                    info.weight,
                    info.port,
                    info.server,
                ),
                0,
            )
            out.addAnswerAtTime(
                DNSText(info.name, _TYPE_TXT, _CLASS_IN, ttl, info.text), 0
            )
            if info.address:
                out.addAnswerAtTime(
                    DNSAddress(
                        info.server, _TYPE_A, _CLASS_IN, ttl, info.address
                    ),
                    0,
                )
            self.send(out)
            i += 1
            nexttime += _REGISTER_TIME

    def unregisterService(self, info):
        """Unregister a service."""
        try:
            del self.services[info.name.lower()]
            if self.servicetypes[info.type] > 1:
                self.servicetypes[info.type] -= 1
            else:
                del self.servicetypes[info.type]
        except KeyError:
            pass
        now = currentTimeMillis()
        nexttime = now
        i = 0
        while i < 3:
            if now < nexttime:
                self.wait(nexttime - now)
                now = currentTimeMillis()
                continue
            out = DNSOutgoing(_FLAGS_QR_RESPONSE | _FLAGS_AA)
            out.addAnswerAtTime(
                DNSPointer(info.type, _TYPE_PTR, _CLASS_IN, 0, info.name), 0
            )
            out.addAnswerAtTime(
                DNSService(
                    info.name,
                    _TYPE_SRV,
                    _CLASS_IN,
                    0,
                    info.priority,
                    info.weight,
                    info.port,
                    info.name,
                ),
                0,
            )
            out.addAnswerAtTime(
                DNSText(info.name, _TYPE_TXT, _CLASS_IN, 0, info.text), 0
            )
            if info.address:
                out.addAnswerAtTime(
                    DNSAddress(
                        info.server, _TYPE_A, _CLASS_IN, 0, info.address
                    ),
                    0,
                )
            self.send(out)
            i += 1
            nexttime += _UNREGISTER_TIME

    def unregisterAllServices(self):
        """Unregister all registered services."""
        if len(self.services) > 0:
            now = currentTimeMillis()
            nexttime = now
            i = 0
            while i < 3:
                if now < nexttime:
                    self.wait(nexttime - now)
                    now = currentTimeMillis()
                    continue
                out = DNSOutgoing(_FLAGS_QR_RESPONSE | _FLAGS_AA)
                for info in self.services.values():
                    out.addAnswerAtTime(
                        DNSPointer(
                            info.type, _TYPE_PTR, _CLASS_IN, 0, info.name
                        ),
                        0,
                    )
                    out.addAnswerAtTime(
                        DNSService(
                            info.name,
                            _TYPE_SRV,
                            _CLASS_IN,
                            0,
                            info.priority,
                            info.weight,
                            info.port,
                            info.server,
                        ),
                        0,
                    )
                    out.addAnswerAtTime(
                        DNSText(info.name, _TYPE_TXT, _CLASS_IN, 0, info.text),
                        0,
                    )
                    if info.address:
                        out.addAnswerAtTime(
                            DNSAddress(
                                info.server, _TYPE_A, _CLASS_IN, 0, info.address
                            ),
                            0,
                        )
                self.send(out)
                i += 1
                nexttime += _UNREGISTER_TIME

    def checkService(self, info):
        """Checks the network for a unique service name, modifying the
        ServiceInfo passed in if it is not unique."""
        now = currentTimeMillis()
        nexttime = now
        i = 0
        while i < 3:
            for record in self.cache.entriesWithName(info.type):
                if (
                    record.type == _TYPE_PTR
                    and not record.isExpired(now)
                    and record.alias == info.name
                ):
                    if info.name.find(b'.') < 0:
                        info.name = b"%s.[%s:%d].%s" % (
                            info.name,
                            info.address,
                            info.port,
                            info.type,
                        )
                        self.checkService(info)
                        return
                    raise NonUniqueNameException
            if now < nexttime:
                self.wait(nexttime - now)
                now = currentTimeMillis()
                continue
            out = DNSOutgoing(_FLAGS_QR_QUERY | _FLAGS_AA)
            self.debug = out
            out.addQuestion(DNSQuestion(info.type, _TYPE_PTR, _CLASS_IN))
            out.addAuthoritativeAnswer(
                DNSPointer(info.type, _TYPE_PTR, _CLASS_IN, _DNS_TTL, info.name)
            )
            self.send(out)
            i += 1
            nexttime += _CHECK_TIME

    def addListener(self, listener, question):
        """Adds a listener for a given question.  The listener will have
        its updateRecord method called when information is available to
        answer the question."""
        now = currentTimeMillis()
        self.listeners.append(listener)
        if question is not None:
            for record in self.cache.entriesWithName(question.name):
                if question.answeredBy(record) and not record.isExpired(now):
                    listener.updateRecord(self, now, record)
        self.notifyAll()

    def removeListener(self, listener):
        """Removes a listener."""
        try:
            self.listeners.remove(listener)
            self.notifyAll()
        except Exception:
            pass

    def updateRecord(self, now, rec):
        """Used to notify listeners of new information that has updated
        a record."""
        for listener in self.listeners:
            listener.updateRecord(self, now, rec)
        self.notifyAll()

    def handleResponse(self, msg):
        """Deal with incoming response packets.  All answers
        are held in the cache, and listeners are notified."""
        now = currentTimeMillis()
        for record in msg.answers:
            expired = record.isExpired(now)
            if record in self.cache.entries():
                if expired:
                    self.cache.remove(record)
                else:
                    entry = self.cache.get(record)
                    if entry is not None:
                        entry.resetTTL(record)
                        record = entry
            else:
                self.cache.add(record)

            self.updateRecord(now, record)

    def handleQuery(self, msg, addr, port):
        """Deal with incoming query packets.  Provides a response if
        possible."""
        out = None

        # Support unicast client responses
        #
        if port != _MDNS_PORT:
            out = DNSOutgoing(_FLAGS_QR_RESPONSE | _FLAGS_AA, 0)
            for question in msg.questions:
                out.addQuestion(question)

        for question in msg.questions:
            if question.type == _TYPE_PTR:
                if question.name == b"_services._dns-sd._udp.local.":
                    for stype in self.servicetypes.keys():
                        if out is None:
                            out = DNSOutgoing(_FLAGS_QR_RESPONSE | _FLAGS_AA)
                        out.addAnswer(
                            msg,
                            DNSPointer(
                                b"_services._dns-sd._udp.local.",
                                _TYPE_PTR,
                                _CLASS_IN,
                                _DNS_TTL,
                                stype,
                            ),
                        )
                for service in self.services.values():
                    if question.name == service.type:
                        if out is None:
                            out = DNSOutgoing(_FLAGS_QR_RESPONSE | _FLAGS_AA)
                        out.addAnswer(
                            msg,
                            DNSPointer(
                                service.type,
                                _TYPE_PTR,
                                _CLASS_IN,
                                _DNS_TTL,
                                service.name,
                            ),
                        )
            else:
                try:
                    if out is None:
                        out = DNSOutgoing(_FLAGS_QR_RESPONSE | _FLAGS_AA)

                    # Answer A record queries for any service addresses we know
                    if question.type == _TYPE_A or question.type == _TYPE_ANY:
                        for service in self.services.values():
                            if service.server == question.name.lower():
                                out.addAnswer(
                                    msg,
                                    DNSAddress(
                                        question.name,
                                        _TYPE_A,
                                        _CLASS_IN | _CLASS_UNIQUE,
                                        _DNS_TTL,
                                        service.address,
                                    ),
                                )

                    service = self.services.get(question.name.lower(), None)
                    if not service:
                        continue

                    if question.type == _TYPE_SRV or question.type == _TYPE_ANY:
                        out.addAnswer(
                            msg,
                            DNSService(
                                question.name,
                                _TYPE_SRV,
                                _CLASS_IN | _CLASS_UNIQUE,
                                _DNS_TTL,
                                service.priority,
                                service.weight,
                                service.port,
                                service.server,
                            ),
                        )
                    if question.type == _TYPE_TXT or question.type == _TYPE_ANY:
                        out.addAnswer(
                            msg,
                            DNSText(
                                question.name,
                                _TYPE_TXT,
                                _CLASS_IN | _CLASS_UNIQUE,
                                _DNS_TTL,
                                service.text,
                            ),
                        )
                    if question.type == _TYPE_SRV:
                        out.addAdditionalAnswer(
                            DNSAddress(
                                service.server,
                                _TYPE_A,
                                _CLASS_IN | _CLASS_UNIQUE,
                                _DNS_TTL,
                                service.address,
                            )
                        )
                except Exception:
                    traceback.print_exc()

        if out is not None and out.answers:
            out.id = msg.id
            self.send(out, addr, port)

    def send(self, out, addr=_MDNS_ADDR, port=_MDNS_PORT):
        """Sends an outgoing packet."""
        # This is a quick test to see if we can parse the packets we generate
        # temp = DNSIncoming(out.packet())
        try:
            self.socket.sendto(out.packet(), 0, (addr, port))
        except Exception:
            # Ignore this, it may be a temporary loss of network connection
            pass

    def close(self):
        """Ends the background threads, and prevent this instance from
        servicing further queries."""
        if globals()[b'_GLOBAL_DONE'] == 0:
            globals()[b'_GLOBAL_DONE'] = 1
            self.notifyAll()
            self.engine.notify()
            self.unregisterAllServices()
            self.socket.setsockopt(
                socket.SOL_IP,
                socket.IP_DROP_MEMBERSHIP,
                socket.inet_aton(_MDNS_ADDR) + socket.inet_aton('0.0.0.0'),
            )
            self.socket.close()


# Test a few module features, including service registration, service
# query (for Zoe), and service unregistration.

if __name__ == '__main__':
    print(b"Multicast DNS Service Discovery for Python, version", __version__)
    r = Zeroconf()
    print(b"1. Testing registration of a service...")
    desc = {b'version': b'0.10', b'a': b'test value', b'b': b'another value'}
    info = ServiceInfo(
        b"_http._tcp.local.",
        b"My Service Name._http._tcp.local.",
        socket.inet_aton(b"127.0.0.1"),
        1234,
        0,
        0,
        desc,
    )
    print(b"   Registering service...")
