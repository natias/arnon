combination of the C<UTF8_DISALLOW_I<foo>> flags understood by
C<L</utf8n_to_uvchr>>, with the same meanings.

See also
C<L</is_utf8_invariant_string>>,
C<L</is_utf8_invariant_string_loc>>,
C<L</is_utf8_string>>,
C<L</is_utf8_string_loc>>,
C<L</is_utf8_string_loc_flags>>,
C<L</is_utf8_string_loclen>>,
C<L</is_utf8_string_loclen_flags>>,
C<L</is_utf8_fixed_width_buf_flags>>,
C<L</is_utf8_fixed_width_buf_loc_flags>>,
C<L</is_utf8_fixed_width_buf_loclen_flags>>,
C<L</is_strict_utf8_string>>,
C<L</is_strict_utf8_string_loc>>,
C<L</is_strict_utf8_string_loclen>>,
C<L</is_c9strict_utf8_string>>,
C<L</is_c9strict_utf8_string_loc>>,
and
C<L</is_c9strict_utf8_string_loclen>>.

=over 3

 bool  is_utf8_string_flags(const U8 *s, STRLEN len,
                            const U32 flags)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_utf8_string_loc>
X<is_utf8_string_loc>

Like C<L</is_utf8_string>> but stores the location of the failure (in the
case of "utf8ness failure") or the location C<s>+C<len> (in the case of
"utf8ness success") in the C<ep> pointer.

See also C<L</is_utf8_string_loclen>>.

=over 3

 bool  is_utf8_string_loc(const U8 *s, const STRLEN len,
                          const U8 **ep)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_utf8_string_loc_flags>
X<is_utf8_string_loc_flags>

Like C<L</is_utf8_string_flags>> but stores the location of the failure (in the
case of "utf8ness failure") or the location C<s>+C<len> (in the case of
"utf8ness success") in the C<ep> pointer.

See also C<L</is_utf8_string_loclen_flags>>.

=over 3

 bool  is_utf8_string_loc_flags(const U8 *s, STRLEN len,
                                const U8 **ep, const U32 flags)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_utf8_string_loclen>
X<is_utf8_string_loclen>

Like C<L</is_utf8_string>> but stores the location of the failure (in the
case of "utf8ness failure") or the location C<s>+C<len> (in the case of
"utf8ness success") in the C<ep> pointer, and the number of UTF-8
encoded characters in the C<el> pointer.

See also C<L</is_utf8_string_loc>>.

=over 3

 bool  is_utf8_string_loclen(const U8 *s, STRLEN len,
                             const U8 **ep, STRLEN *el)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_utf8_string_loclen_flags>
X<is_utf8_string_loclen_flags>

Like C<L</is_utf8_string_flags>> but stores the location of the failure (in the
case of "utf8ness failure") or the location C<s>+C<len> (in the case of
"utf8ness success") in the C<ep> pointer, and the number of UTF-8
encoded characters in the C<el> pointer.

See also C<L</is_utf8_string_loc_flags>>.

=over 3

 bool  is_utf8_string_loclen_flags(const U8 *s, STRLEN len,
                                   const U8 **ep, STRLEN *el,
                                   const U32 flags)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_utf8_valid_partial_char>
X<is_utf8_valid_partial_char>

Returns 0 if the sequence of bytes starting at C<s> and looking no further than
S<C<e - 1>> is the UTF-8 encoding, as extended by Perl, for one or more code
points.  Otherwise, it returns 1 if there exists at least one non-empty
sequence of bytes that when appended to sequence C<s>, starting at position
C<e> causes the entire sequence to be the well-formed UTF-8 of some code point;
otherwise returns 0.

In other words this returns TRUE if C<s> points to a partial UTF-8-encoded code
point.

This is useful when a fixed-length buffer is being tested for being well-formed
UTF-8, but the final few bytes in it don't comprise a full character; that is,
it is split somewhere in the middle of the final code point's UTF-8
representation.  (Presumably when the buffer is refreshed with the next chunk
of data, the new first bytes will complete the partial code point.)   This
function is used to verify that the final bytes in the current buffer are in
fact the legal beginning of some code point, so that if they aren't, the
failure can be signalled without having to wait for the next read.

=over 3

 bool  is_utf8_valid_partial_char(const U8 * const s0,
                                  const U8 * const e)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_utf8_valid_partial_char_flags>
X<is_utf8_valid_partial_char_flags>

Like C<L</is_utf8_valid_partial_char>>, it returns a boolean giving whether
or not the input is a valid UTF-8 encoded partial character, but it takes an
extra parameter, C<flags>, which can further restrict which code points are
considered valid.

If C<flags> is 0, this behaves identically to
C<L</is_utf8_valid_partial_char>>.  Otherwise C<flags> can be any combination
of the C<UTF8_DISALLOW_I<foo>> flags accepted by C<L</utf8n_to_uvchr>>.  If
there is any sequence of bytes that can complete the input partial character in
such a way that a non-prohibited character is formed, the function returns
TRUE; otherwise FALSE.  Non character code points cannot be determined based on
partial character input.  But many  of the other possible excluded types can be
determined from just the first one or two bytes.

=over 3

 bool  is_utf8_valid_partial_char_flags(const U8 * const s0,
                                        const U8 * const e,
                                        const U32 flags)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<LATIN1_TO_NATIVE>
X<LATIN1_TO_NATIVE>

Returns the native  equivalent of the input Latin-1 code point (including ASCII
and control characters) given by C<ch>.  Thus, C<LATIN1_TO_NATIVE(66)> on
EBCDIC platforms returns 194.  These each represent the character C<"B"> on
their respective platforms.  On ASCII platforms no conversion is needed, so
this macro expands to just its input, adding no time nor space requirements to
the implementation.

For conversion of code points potentially larger than will fit in a character,
use L</UNI_TO_NATIVE>.

=over 3

 U8  LATIN1_TO_NATIVE(U8 ch)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<NATIVE_TO_LATIN1>
X<NATIVE_TO_LATIN1>

Returns the Latin-1 (including ASCII and control characters) equivalent of the
input native code point given by C<ch>.  Thus, C<NATIVE_TO_LATIN1(193)> on
EBCDIC platforms returns 65.  These each represent the character C<"A"> on
their respective platforms.  On ASCII platforms no conversion is needed, so
this macro expands to just its input, adding no time nor space requirements to
the implementation.

For conversion of code points potentially larger than will fit in a character,
use L</NATIVE_TO_UNI>.

=over 3

 U8  NATIVE_TO_LATIN1(U8 ch)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<NATIVE_TO_UNI>
X<NATIVE_TO_UNI>

Returns the Unicode  equivalent of the input native code point given by C<ch>.
Thus, C<NATIVE_TO_UNI(195)> on EBCDIC platforms returns 67.  These each
represent the character C<"C"> on their respective platforms.  On ASCII
platforms no conversion is needed, so this macro expands to just its input,
adding no time nor space requirements to the implementation.

=over 3

 UV  NATIVE_TO_UNI(UV ch)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<pv_uni_display>
X<pv_uni_display>

Build to the scalar C<dsv> a displayable version of the UTF-8 encoded string
C<spv>, length C<len>, the displayable version being at most C<pvlim> bytes
long (if longer, the rest is truncated and C<"..."> will be appended).

The C<flags> argument can have C<UNI_DISPLAY_ISPRINT> set to display
C<isPRINT()>able characters as themselves, C<UNI_DISPLAY_BACKSLASH>
to display the C<\\[nrfta\\]> as the backslashed versions (like C<"\n">)
(C<UNI_DISPLAY_BACKSLASH> is preferred over C<UNI_DISPLAY_ISPRINT> for C<"\\">).
C<UNI_DISPLAY_QQ> (and its alias C<UNI_DISPLAY_REGEX>) have both
C<UNI_DISPLAY_BACKSLASH> and C<UNI_DISPLAY_ISPRINT> turned on.

Additionally, there is now C<UNI_DISPLAY_BACKSPACE> which allows C<\b> for a
backspace, but only when C<UNI_DISPLAY_BACKSLASH> also is set.

The pointer to the PV of the C<dsv> is returned.

See also L</sv_uni_display>.

=over 3

 char *  pv_uni_display(SV *dsv, const U8 *spv, STRLEN len,
                        STRLEN pvlim, UV flags)

=back

=back

=for hackers
Found in file utf8.c

=over 4

=item C<REPLACEMENT_CHARACTER_UTF8>
X<REPLACEMENT_CHARACTER_UTF8>

This is a macro that evaluates to a string constant of the  UTF-8 bytes that
define the Unicode REPLACEMENT CHARACTER (U+FFFD) for the platform that perl
is compiled on.  This allows code to use a mnemonic for this character that
works on both ASCII and EBCDIC platforms.
S<C<sizeof(REPLACEMENT_CHARACTER_UTF8) - 1>> can be used to get its length in
bytes.

=back

=for hackers
Found in file unicode_constants.h

=over 4

=item C<sv_cat_decode>
X<sv_cat_decode>

C<encoding> is assumed to be an C<Encode> object, the PV of C<ssv> is
assumed to be octets in that encoding and decoding the input starts
from the position which S<C<(PV + *offset)>> pointed to.  C<dsv> will be
concatenated with the decoded UTF-8 string from C<ssv>.  Decoding will terminate
when the string C<tstr> appears in decoding output or the input ends on
the PV of C<ssv>.  The value which C<offset> points will be modified
to the last input position on C<ssv>.

Returns TRUE if the terminator was found, else returns FALSE.

=over 3

 bool  sv_cat_decode(SV *dsv, SV *encoding, SV *ssv, int *offset,
                     char *tstr, int tlen)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_recode_to_utf8>
X<sv_recode_to_utf8>

C<encoding> is assumed to be an C<Encode> object, on entry the PV
of C<sv> is assumed to be octets in that encoding, and C<sv>
will be converted into Unicode (and UTF-8).

If C<sv> already is UTF-8 (or if it is not C<POK>), or if C<encoding>
is not a reference, nothing is done to C<sv>.  If C<encoding> is not
an C<Encode::XS> Encoding object, bad things will happen.
(See L<encoding> and L<Encode>.)

The PV of C<sv> is returned.

=over 3

 char *  sv_recode_to_utf8(SV *sv, SV *encoding)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_uni_display>
X<sv_uni_display>

Build to the scalar C<dsv> a displayable version of the scalar C<sv>,
the displayable version being at most C<pvlim> bytes long
(if longer, the rest is truncated and "..." will be appended).

The C<flags> argument is as in L</pv_uni_display>().

The pointer to the PV of the C<dsv> is returned.

=over 3

 char *  sv_uni_display(SV *dsv, SV *ssv, STRLEN pvlim, UV flags)

=back

=back

=for hackers
Found in file utf8.c

=over 4

=item C<UNICODE_IS_NONCHAR>
X<UNICODE_IS_NONCHAR>

Returns a boolean as to whether or not C<uv> is one of the Unicode
non-character code points

=over 3

 bool  UNICODE_IS_NONCHAR(const UV uv)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<UNICODE_IS_REPLACEMENT>
X<UNICODE_IS_REPLACEMENT>

Returns a boolean as to whether or not C<uv> is the Unicode REPLACEMENT
CHARACTER

=over 3

 bool  UNICODE_IS_REPLACEMENT(const UV uv)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<UNICODE_IS_SUPER>
X<UNICODE_IS_SUPER>

Returns a boolean as to whether or not C<uv> is above the maximum legal Unicode
code point of U+10FFFF.

=over 3

 bool  UNICODE_IS_SUPER(const UV uv)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<UNICODE_IS_SURROGATE>
X<UNICODE_IS_SURROGATE>

Returns a boolean as to whether or not C<uv> is one of the Unicode surrogate
code points

=over 3

 bool  UNICODE_IS_SURROGATE(const UV uv)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<UNICODE_REPLACEMENT>
X<UNICODE_REPLACEMENT>

Evaluates to 0xFFFD, the code point of the Unicode REPLACEMENT CHARACTER

=back

=for hackers
Found in file utf8.h

=over 4

=item C<UNI_TO_NATIVE>
X<UNI_TO_NATIVE>

Returns the native  equivalent of the input Unicode code point  given by C<ch>.
Thus, C<UNI_TO_NATIVE(68)> on EBCDIC platforms returns 196.  These each
represent the character C<"D"> on their respective platforms.  On ASCII
platforms no conversion is needed, so this macro expands to just its input,
adding no time nor space requirements to the implementation.

=over 3

 UV  UNI_TO_NATIVE(UV ch)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<UTF8_CHK_SKIP>
X<UTF8_CHK_SKIP>

This is a safer version of C<L</UTF8SKIP>>, but still not as safe as
C<L</UTF8_SAFE_SKIP>>.  This version doesn't blindly assume that the input
string pointed to by C<s> is well-formed, but verifies that there isn't a NUL
terminating character before the expected end of the next character in C<s>.
The length C<UTF8_CHK_SKIP> returns stops just before any such NUL.

Perl tends to add NULs, as an insurance policy, after the end of strings in
SV's, so it is likely that using this macro will prevent inadvertent reading
beyond the end of the input buffer, even if it is malformed UTF-8.

This macro is intended to be used by XS modules where the inputs could be
malformed, and it isn't feasible to restructure to use the safer
C<L</UTF8_SAFE_SKIP>>, for example when interfacing with a C library.

=over 3

 STRLEN  UTF8_CHK_SKIP(char* s)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<utf8_distance>
X<utf8_distance>

Returns the number of UTF-8 characters between the UTF-8 pointers C<a>
and C<b>.

WARNING: use only if you *know* that the pointers point inside the
same UTF-8 buffer.

=over 3

 IV  utf8_distance(const U8 *a, const U8 *b)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<utf8_hop>
X<utf8_hop>

Return the UTF-8 pointer C<s> displaced by C<off> characters, either
forward (if C<off> is positive) or backward (if negative).  C<s> does not need
to be pointing to the starting byte of a character.  If it isn't, one count of
C<off> will be used up to get to the start of the next character for forward
hops, and to the start of the current character for negative ones.

WARNING: Prefer L</utf8_hop_safe> to this one.

Do NOT use this function unless you B<know> C<off> is within
the UTF-8 data pointed to by C<s> B<and> that on entry C<s> is aligned
on the first byte of a character or just after the last byte of a character.

=over 3

 U8 *  utf8_hop(const U8 *s, SSize_t off)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<utf8_hop_back>
X<utf8_hop_back>

Return the UTF-8 pointer C<s> displaced by up to C<off> characters,
backward.  C<s> does not need to be pointing to the starting byte of a
character.  If it isn't, one count of C<off> will be used up to get to that
start.

C<off> must be non-positive.

C<s> must be after or equal to C<start>.

When moving backward it will not move before C<start>.

Will not exceed this limit even if the string is not valid "UTF-8".

=over 3

 U8 *  utf8_hop_back(const U8 *s, SSize_t off, const U8 *start)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<utf8_hop_forward>
X<utf8_hop_forward>

Return the UTF-8 pointer C<s> displaced by up to C<off> characters,
forward.  C<s> does not need to be pointing to the starting byte of a
character.  If it isn't, one count of C<off> will be used up to get to the
start of the next character.

C<off> must be non-negative.

C<s> must be before or equal to C<end>.

When moving forward it will not move beyond C<end>.

Will not exceed this limit even if the string is not valid "UTF-8".

=over 3

 U8 *  utf8_hop_forward(const U8 *s, SSize_t off, const U8 *end)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<utf8_hop_safe>
X<utf8_hop_safe>

Return the UTF-8 pointer C<s> displaced by up to C<off> characters,
either forward or backward.  C<s> does not need to be pointing to the starting
byte of a character.  If it isn't, one count of C<off> will be used up to get
to the start of the next character for forward hops, and to the start of the
current character for negative ones.

When moving backward it will not move before C<start>.

When moving forward it will not move beyond C<end>.

Will not exceed those limits even if the string is not valid "UTF-8".

=over 3

 U8 *  utf8_hop_safe(const U8 *s, SSize_t off, const U8 *start,
                     const U8 *end)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<UTF8_IS_INVARIANT>
X<UTF8_IS_INVARIANT>

Evaluates to 1 if the byte C<c> represents the same character when encoded in
UTF-8 as when not; otherwise evaluates to 0.  UTF-8 invariant characters can be
copied as-is when converting to/from UTF-8, saving time.

In spite of the name, this macro gives the correct result if the input string
from which C<c> comes is not encoded in UTF-8.

See C<L</UVCHR_IS_INVARIANT>> for checking if a UV is invariant.

=over 3

 bool  UTF8_IS_INVARIANT(char c)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<UTF8_IS_NONCHAR>
X<UTF8_IS_NONCHAR>

Evaluates to non-zero if the first few bytes of the string starting at C<s> and
looking no further than S<C<e - 1>> are well-formed UTF-8 that represents one
of the Unicode non-character code points; otherwise it evaluates to 0.  If
non-zero, the value gives how many bytes starting at C<s> comprise the code
point's representation.

=over 3

 bool  UTF8_IS_NONCHAR(const U8 *s, const U8 *e)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<UTF8_IS_REPLACEMENT>
X<UTF8_IS_REPLACEMENT>

Evaluates to non-zero if the first few bytes of the string starting at C<s> and
looking no further than S<C<e - 1>> are well-formed UTF-8 that represents the
Unicode REPLACEMENT CHARACTER; otherwise it evaluates to 0.  If non-zero, the
value gives how many bytes starting at C<s> comprise the code point's
representation.

=over 3

 bool  UTF8_IS_REPLACEMENT(const U8 *s, const U8 *e)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<UTF8_IS_SUPER>
X<UTF8_IS_SUPER>

Recall that Perl recognizes an extension to UTF-8 that can encode code
points larger than the ones defined by Unicode, which are 0..0x10FFFF.

This macro evaluates to non-zero if the first few bytes of the string starting
at C<s> and looking no further than S<C<e - 1>> are from this UTF-8 extension;
otherwise it evaluates to 0.  If non-zero, the return is how many bytes
starting at C<s> comprise the code point's representation.

0 is returned if the bytes are not well-formed extended UTF-8, or if they
represent a code point that cannot fit in a UV on the current platform.  Hence
this macro can give different results when run on a 64-bit word machine than on
one with a 32-bit word size.

Note that it is illegal in Perl to have code points that are larger than what can
fit in an IV on the current machine; and illegal in Unicode to have any that
this macro matches

=over 3

 bool  UTF8_IS_SUPER(const U8 *s, const U8 *e)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<UTF8_IS_SURROGATE>
X<UTF8_IS_SURROGATE>

Evaluates to non-zero if the first few bytes of the string starting at C<s> and
looking no further than S<C<e - 1>> are well-formed UTF-8 that represents one
of the Unicode surrogate code points; otherwise it evaluates to 0.  If
non-zero, the value gives how many bytes starting at C<s> comprise the code
point's representation.

=over 3

 bool  UTF8_IS_SURROGATE(const U8 *s, const U8 *e)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<utf8_length>
X<utf8_length>

Returns the number of characters in the sequence of UTF-8-encoded bytes starting
at C<s> and ending at the byte just before C<e>.  If <s> and <e> point to the
same place, it returns 0 with no warning raised.

If C<e E<lt> s> or if the scan would end up past C<e>, it raises a UTF8 warning
and returns the number of valid characters.

=over 3

 STRLEN  utf8_length(const U8 *s0, const U8 *e)

=back

=back

=for hackers
Found in file utf8.c

=over 4

=item C<UTF8_MAXBYTES>
X<UTF8_MAXBYTES>

The maximum width of a single UTF-8 encoded character, in bytes.

NOTE: Strictly speaking Perl's UTF-8 should not be called UTF-8 since UTF-8
is an encoding of Unicode, and Unicode's upper limit, 0x10FFFF, can be
expressed with 4 bytes.  However, Perl thinks of UTF-8 as a way to encode
non-negative integers in a binary format, even those above Unicode.

=back

=for hackers
Found in file utf8.h

=over 4

=item C<UTF8_MAXBYTES_CASE>
X<UTF8_MAXBYTES_CASE>

The maximum number of UTF-8 bytes a single Unicode character can
uppercase/lowercase/titlecase/fold into.

=back

=for hackers
Found in file utf8.h

=over 4

=item C<utf8ness_t>
X<utf8ness_t>

This typedef is used by several core functions that return PV strings, to
indicate the UTF-8ness of those strings.

(If you write a new function, you probably should instead return the PV in an
SV with the UTF-8 flag of the SV properly set, rather than use this mechanism.)

The possible values this can be are:

=over

=item C<UTF8NESS_YES>

This means the string definitely should be treated as a sequence of
UTF-8-encoded characters.

Most code that needs to handle this typedef should be of the form:

 if (utf8ness_flag == UTF8NESS_YES) {
     treat as utf8;  // like turning on an SV UTF-8 flag
 }

=item C<UTF8NESS_NO>

This means the string definitely should be treated as a sequence of bytes, not
encoded as UTF-8.

=item C<UTF8NESS_IMMATERIAL>

This means it is equally valid to treat the string as bytes, or as UTF-8
characters; use whichever way you want.  This happens when the string consists
entirely of characters which have the same representation whether encoded in
UTF-8 or not.

=item C<UTF8NESS_UNKNOWN>

This means it is unknown how the string should be treated.  No core function
will ever return this value to a non-core caller.  Instead, it is used by the
caller to initialize a variable to a non-legal value.  A typical call will look like:

 utf8ness_t string_is_utf8 = UTF8NESS_UNKNOWN
 const char * string = foo(arg1, arg2, ..., &string_is_utf8);
 if (string_is_utf8 == UTF8NESS_YES) {
    do something for UTF-8;
 }

=back

The following relationships hold between the enum values:

=over

=item S<C<0 E<lt>= I<enum value> E<lt>= UTF8NESS_IMMATERIAL>>

the string may be treated in code as non-UTF8

=item S<C<UTF8NESS_IMMATERIAL E<lt>= <I<enum value>>>

the string may be treated in code as encoded in UTF-8

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<utf8n_to_uvchr>
X<utf8n_to_uvchr>

THIS FUNCTION SHOULD BE USED IN ONLY VERY SPECIALIZED CIRCUMSTANCES.
Most code should use L</utf8_to_uvchr_buf>() rather than call this
directly.

Bottom level UTF-8 decode routine.
Returns the native code point value of the first character in the string C<s>,
which is assumed to be in UTF-8 (or UTF-EBCDIC) encoding, and no longer than
C<curlen> bytes; C<*retlen> (if C<retlen> isn't NULL) will be set to
the length, in bytes, of that character.

The value of C<flags> determines the behavior when C<s> does not point to a
well-formed UTF-8 character.  If C<flags> is 0, encountering a malformation
causes zero to be returned and C<*retlen> is set so that (S<C<s> + C<*retlen>>)
is the next possible position in C<s> that could begin a non-malformed
character.  Also, if UTF-8 warnings haven't been lexically disabled, a warning
is raised.  Some UTF-8 input sequences may contain multiple malformations.
This function tries to find every possible one in each call, so multiple
warnings can be raised for the same sequence.

Various ALLOW flags can be set in C<flags> to allow (and not warn on)
individual types of malformations, such as the sequence being overlong (that
is, when there is a shorter sequence that can express the same code point;
overlong sequences are expressly forbidden in the UTF-8 standard due to
potential security issues).  Another malformation example is the first byte of
a character not being a legal first byte.  See F<utf8.h> for the list of such
flags.  Even if allowed, this function generally returns the Unicode
REPLACEMENT CHARACTER when it encounters a malformation.  There are flags in
F<utf8.h> to override this behavior for the overlong malformations, but don't
do that except for very specialized purposes.

The C<UTF8_CHECK_ONLY> flag overrides the behavior when a non-allowed (by other
flags) malformation is found.  If this flag is set, the routine assumes that
the caller will raise a warning, and this function will silently just set
C<retlen> to C<-1> (cast to C<STRLEN>) and return zero.

Note that this API requires disambiguation between successful decoding a C<NUL>
character, and an error return (unless the C<UTF8_CHECK_ONLY> flag is set), as
in both cases, 0 is returned, and, depending on the malformation, C<retlen> may
be set to 1.  To disambiguate, upon a zero return, see if the first byte of
C<s> is 0 as well.  If so, the input was a C<NUL>; if not, the input had an
error.  Or you can use C<L</utf8n_to_uvchr_error>>.

Certain code points are considered problematic.  These are Unicode surrogates,
Unicode non-characters, and code points above the Unicode maximum of 0x10FFFF.
By default these are considered regular code points, but certain situations
warrant special handling for them, which can be specified using the C<flags>
parameter.  If C<flags> contains C<UTF8_DISALLOW_ILLEGAL_INTERCHANGE>, all
three classes are treated as malformations and handled as such.  The flags
C<UTF8_DISALLOW_SURROGATE>, C<UTF8_DISALLOW_NONCHAR>, and
C<UTF8_DISALLOW_SUPER> (meaning above the legal Unicode maximum) can be set to
disallow these categories individually.  C<UTF8_DISALLOW_ILLEGAL_INTERCHANGE>
restricts the allowed inputs to the strict UTF-8 traditionally defined by
Unicode.  Use C<UTF8_DISALLOW_ILLEGAL_C9_INTERCHANGE> to use the strictness
definition given by
L<Unicode Corrigendum #9|https://www.unicode.org/versions/corrigendum9.html>.
The difference between traditional strictness and C9 strictness is that the
latter does not forbid non-character code points.  (They are still discouraged,
however.)  For more discussion see L<perlunicode/Noncharacter code points>.

The flags C<UTF8_WARN_ILLEGAL_INTERCHANGE>,
C<UTF8_WARN_ILLEGAL_C9_INTERCHANGE>, C<UTF8_WARN_SURROGATE>,
C<UTF8_WARN_NONCHAR>, and C<UTF8_WARN_SUPER> will cause warning messages to be
raised for their respective categories, but otherwise the code points are
considered valid (not malformations).  To get a category to both be treated as
a malformation and raise a warning, specify both the WARN and DISALLOW flags.
(But note that warnings are not raised if lexically disabled nor if
C<UTF8_CHECK_ONLY> is also specified.)

Extremely high code points were never specified in any standard, and require an
