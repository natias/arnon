

@command(
    b'merge',
    [
        (
            b'f',
            b'force',
            None,
            _(b'force a merge including outstanding changes (DEPRECATED)'),
        ),
        (b'r', b'rev', b'', _(b'revision to merge'), _(b'REV')),
        (
            b'P',
            b'preview',
            None,
            _(b'review revisions to merge (no merge is performed)'),
        ),
        (b'', b'abort', None, _(b'abort the ongoing merge')),
    ]
    + mergetoolopts,
    _(b'[-P] [[-r] REV]'),
    helpcategory=command.CATEGORY_CHANGE_MANAGEMENT,
    helpbasic=True,
)
def merge(ui, repo, node=None, **opts):
    """merge another revision into working directory

    The current working directory is updated with all changes made in
    the requested revision since the last common predecessor revision.

    Files that changed between either parent are marked as changed for
    the next commit and a commit must be performed before any further
    updates to the repository are allowed. The next commit will have
    two parents.

    ``--tool`` can be used to specify the merge tool used for file
    merges. It overrides the HGMERGE environment variable and your
    configuration files. See :hg:`help merge-tools` for options.

    If no revision is specified, the working directory's parent is a
    head revision, and the current branch contains exactly one other
    head, the other head is merged with by default. Otherwise, an
    explicit revision with which to merge must be provided.

    See :hg:`help resolve` for information on handling file conflicts.

    To undo an uncommitted merge, use :hg:`merge --abort` which
    will check out a clean copy of the original merge parent, losing
    all changes.

    Returns 0 on success, 1 if there are unresolved files.
    """

    opts = pycompat.byteskwargs(opts)
    abort = opts.get(b'abort')
    if abort and repo.dirstate.p2() == repo.nullid:
        cmdutil.wrongtooltocontinue(repo, _(b'merge'))
    cmdutil.check_incompatible_arguments(opts, b'abort', [b'rev', b'preview'])
    if abort:
        state = cmdutil.getunfinishedstate(repo)
        if state and state._opname != b'merge':
            raise error.StateError(
                _(b'cannot abort merge with %s in progress') % (state._opname),
                hint=state.hint(),
            )
        if node:
            raise error.InputError(_(b"cannot specify a node with --abort"))
        return hg.abortmerge(repo.ui, repo)

    if opts.get(b'rev') and node:
        raise error.InputError(_(b"please specify just one revision"))
    if not node:
        node = opts.get(b'rev')

    if node:
        ctx = logcmdutil.revsingle(repo, node)
    else:
        if ui.configbool(b'commands', b'merge.require-rev'):
            raise error.InputError(
                _(
                    b'configuration requires specifying revision to merge '
                    b'with'
                )
            )
        ctx = repo[destutil.destmerge(repo)]

    if ctx.node() is None:
        raise error.InputError(
            _(b'merging with the working copy has no effect')
        )

    if opts.get(b'preview'):
        # find nodes that are ancestors of p2 but not of p1
        p1 = repo[b'.'].node()
        p2 = ctx.node()
        nodes = repo.changelog.findmissing(common=[p1], heads=[p2])

        displayer = logcmdutil.changesetdisplayer(ui, repo, opts)
        for node in nodes:
            displayer.show(repo[node])
        displayer.close()
        return 0

    # ui.forcemerge is an internal variable, do not document
    overrides = {(b'ui', b'forcemerge'): opts.get(b'tool', b'')}
    with ui.configoverride(overrides, b'merge'):
        force = opts.get(b'force')
        labels = [b'working copy', b'merge rev', b'common ancestor']
        return hg.merge(ctx, force=force, labels=labels)


statemod.addunfinished(
    b'merge',
    fname=None,
    clearable=True,
    allowcommit=True,
    cmdmsg=_(b'outstanding uncommitted merge'),
    abortfunc=hg.abortmerge,
    statushint=_(
        b'To continue:    hg commit\nTo abort:       hg merge --abort'
    ),
    cmdhint=_(b"use 'hg commit' or 'hg merge --abort'"),
)


@command(
    b'outgoing|out',
    [
        (
            b'f',
            b'force',
            None,
            _(b'run even when the destination is unrelated'),
        ),
        (
            b'r',
            b'rev',
            [],
            _(b'a changeset intended to be included in the destination'),
            _(b'REV'),
        ),
        (b'n', b'newest-first', None, _(b'show newest record first')),
        (b'B', b'bookmarks', False, _(b'compare bookmarks')),
        (
            b'b',
            b'branch',
            [],
            _(b'a specific branch you would like to push'),
            _(b'BRANCH'),
        ),
    ]
    + logopts
    + remoteopts
    + subrepoopts,
    _(b'[-M] [-p] [-n] [-f] [-r REV]... [DEST]...'),
    helpcategory=command.CATEGORY_REMOTE_REPO_MANAGEMENT,
)
def outgoing(ui, repo, *dests, **opts):
    """show changesets not found in the destination

    Show changesets not found in the specified destination repository
    or the default push location. These are the changesets that would
    be pushed if a push was requested.

    See pull for details of valid destination formats.

    .. container:: verbose

      With -B/--bookmarks, the result of bookmark comparison between
      local and remote repositories is displayed. With -v/--verbose,
      status is also displayed for each bookmark like below::

        BM1               01234567890a added
        BM2                            deleted
        BM3               234567890abc advanced
        BM4               34567890abcd diverged
        BM5               4567890abcde changed

      The action taken when pushing depends on the
      status of each bookmark:

      :``added``: push with ``-B`` will create it
      :``deleted``: push with ``-B`` will delete it
      :``advanced``: push will update it
      :``diverged``: push with ``-B`` will update it
      :``changed``: push with ``-B`` will update it

      From the point of view of pushing behavior, bookmarks
      existing only in the remote repository are treated as
      ``deleted``, even if it is in fact added remotely.

    Returns 0 if there are outgoing changes, 1 otherwise.
    """
    opts = pycompat.byteskwargs(opts)
    if opts.get(b'bookmarks'):
        for path in urlutil.get_push_paths(repo, ui, dests):
            dest = path.pushloc or path.loc
            other = hg.peer(repo, opts, dest)
            try:
                if b'bookmarks' not in other.listkeys(b'namespaces'):
                    ui.warn(_(b"remote doesn't support bookmarks\n"))
                    return 0
                ui.status(
                    _(b'comparing with %s\n') % urlutil.hidepassword(dest)
                )
                ui.pager(b'outgoing')
                return bookmarks.outgoing(ui, repo, other)
            finally:
                other.close()

    return hg.outgoing(ui, repo, dests, opts)


@command(
    b'parents',
    [
        (
            b'r',
            b'rev',
            b'',
            _(b'show parents of the specified revision'),
            _(b'REV'),
        ),
    ]
    + templateopts,
    _(b'[-r REV] [FILE]'),
    helpcategory=command.CATEGORY_CHANGE_NAVIGATION,
    inferrepo=True,
)
def parents(ui, repo, file_=None, **opts):
    """show the parents of the working directory or revision (DEPRECATED)

    Print the working directory's parent revisions. If a revision is
    given via -r/--rev, the parent of that revision will be printed.
    If a file argument is given, the revision in which the file was
    last changed (before the working directory revision or the
    argument to --rev if given) is printed.

    This command is equivalent to::

        hg log -r "p1()+p2()" or
        hg log -r "p1(REV)+p2(REV)" or
        hg log -r "max(::p1() and file(FILE))+max(::p2() and file(FILE))" or
        hg log -r "max(::p1(REV) and file(FILE))+max(::p2(REV) and file(FILE))"

    See :hg:`summary` and :hg:`help revsets` for related information.

    Returns 0 on success.
    """

    opts = pycompat.byteskwargs(opts)
    rev = opts.get(b'rev')
    if rev:
        repo = scmutil.unhidehashlikerevs(repo, [rev], b'nowarn')
    ctx = logcmdutil.revsingle(repo, rev, None)

    if file_:
        m = scmutil.match(ctx, (file_,), opts)
        if m.anypats() or len(m.files()) != 1:
            raise error.InputError(_(b'can only specify an explicit filename'))
        file_ = m.files()[0]
        filenodes = []
        for cp in ctx.parents():
            if not cp:
                continue
            try:
                filenodes.append(cp.filenode(file_))
            except error.LookupError:
                pass
        if not filenodes:
            raise error.InputError(_(b"'%s' not found in manifest") % file_)
        p = []
        for fn in filenodes:
            fctx = repo.filectx(file_, fileid=fn)
            p.append(fctx.node())
    else:
        p = [cp.node() for cp in ctx.parents()]

    displayer = logcmdutil.changesetdisplayer(ui, repo, opts)
    for n in p:
        if n != repo.nullid:
            displayer.show(repo[n])
    displayer.close()


@command(
    b'paths',
    formatteropts,
    _(b'[NAME]'),
    helpcategory=command.CATEGORY_REMOTE_REPO_MANAGEMENT,
    optionalrepo=True,
    intents={INTENT_READONLY},
)
def paths(ui, repo, search=None, **opts):
    """show aliases for remote repositories

    Show definition of symbolic path name NAME. If no name is given,
    show definition of all available names.

    Option -q/--quiet suppresses all output when searching for NAME
    and shows only the path names when listing all definitions.

    Path names are defined in the [paths] section of your
    configuration file and in ``/etc/mercurial/hgrc``. If run inside a
    repository, ``.hg/hgrc`` is used, too.

    The path names ``default`` and ``default-push`` have a special
    meaning.  When performing a push or pull operation, they are used
    as fallbacks if no location is specified on the command-line.
    When ``default-push`` is set, it will be used for push and
    ``default`` will be used for pull; otherwise ``default`` is used
    as the fallback for both.  When cloning a repository, the clone
    source is written as ``default`` in ``.hg/hgrc``.

    .. note::

       ``default`` and ``default-push`` apply to all inbound (e.g.
       :hg:`incoming`) and outbound (e.g. :hg:`outgoing`, :hg:`email`
       and :hg:`bundle`) operations.

    See :hg:`help urls` for more information.

    .. container:: verbose

      Template:

      The following keywords are supported. See also :hg:`help templates`.

      :name:    String. Symbolic name of the path alias.
      :pushurl: String. URL for push operations.
      :url:     String. URL or directory path for the other operations.

    Returns 0 on success.
    """

    opts = pycompat.byteskwargs(opts)

    pathitems = urlutil.list_paths(ui, search)
    ui.pager(b'paths')

    fm = ui.formatter(b'paths', opts)
    if fm.isplain():
        hidepassword = urlutil.hidepassword
    else:
        hidepassword = bytes
    if ui.quiet:
        namefmt = b'%s\n'
    else:
        namefmt = b'%s = '
    showsubopts = not search and not ui.quiet

    for name, path in pathitems:
        fm.startitem()
        fm.condwrite(not search, b'name', namefmt, name)
        fm.condwrite(not ui.quiet, b'url', b'%s\n', hidepassword(path.rawloc))
        for subopt, value in sorted(path.suboptions.items()):
            assert subopt not in (b'name', b'url')
            if showsubopts:
                fm.plain(b'%s:%s = ' % (name, subopt))
            if isinstance(value, bool):
                if value:
                    value = b'yes'
                else:
                    value = b'no'
            fm.condwrite(showsubopts, subopt, b'%s\n', value)

    fm.end()

    if search and not pathitems:
        if not ui.quiet:
            ui.warn(_(b"not found!\n"))
        return 1
    else:
        return 0


@command(
    b'phase',
    [
        (b'p', b'public', False, _(b'set changeset phase to public')),
        (b'd', b'draft', False, _(b'set changeset phase to draft')),
        (b's', b'secret', False, _(b'set changeset phase to secret')),
        (b'f', b'force', False, _(b'allow to move boundary backward')),
        (b'r', b'rev', [], _(b'target revision'), _(b'REV')),
    ],
    _(b'[-p|-d|-s] [-f] [-r] [REV...]'),
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
)
def phase(ui, repo, *revs, **opts):
    """set or show the current phase name

    With no argument, show the phase name of the current revision(s).

    With one of -p/--public, -d/--draft or -s/--secret, change the
    phase value of the specified revisions.

    Unless -f/--force is specified, :hg:`phase` won't move changesets from a
    lower phase to a higher phase. Phases are ordered as follows::

        public < draft < secret

    Returns 0 on success, 1 if some phases could not be changed.

    (For more information about the phases concept, see :hg:`help phases`.)
    """
    opts = pycompat.byteskwargs(opts)
    # search for a unique phase argument
    targetphase = None
    for idx, name in enumerate(phases.cmdphasenames):
        if opts[name]:
            if targetphase is not None:
                raise error.InputError(_(b'only one phase can be specified'))
            targetphase = idx

    # look for specified revision
    revs = list(revs)
    revs.extend(opts[b'rev'])
    if revs:
        revs = logcmdutil.revrange(repo, revs)
    else:
        # display both parents as the second parent phase can influence
        # the phase of a merge commit
        revs = [c.rev() for c in repo[None].parents()]

    ret = 0
    if targetphase is None:
        # display
        for r in revs:
            ctx = repo[r]
            ui.write(b'%i: %s\n' % (ctx.rev(), ctx.phasestr()))
    else:
        with repo.lock(), repo.transaction(b"phase") as tr:
            # set phase
            if not revs:
                raise error.InputError(_(b'empty revision set'))
            nodes = [repo[r].node() for r in revs]
            # moving revision from public to draft may hide them
            # We have to check result on an unfiltered repository
            unfi = repo.unfiltered()
            getphase = unfi._phasecache.phase
            olddata = [getphase(unfi, r) for r in unfi]
            phases.advanceboundary(repo, tr, targetphase, nodes)
            if opts[b'force']:
                phases.retractboundary(repo, tr, targetphase, nodes)
        getphase = unfi._phasecache.phase
        newdata = [getphase(unfi, r) for r in unfi]
        changes = sum(newdata[r] != olddata[r] for r in unfi)
        cl = unfi.changelog
        rejected = [n for n in nodes if newdata[cl.rev(n)] < targetphase]
        if rejected:
            ui.warn(
                _(
                    b'cannot move %i changesets to a higher '
                    b'phase, use --force\n'
                )
                % len(rejected)
            )
            ret = 1
        if changes:
            msg = _(b'phase changed for %i changesets\n') % changes
            if ret:
                ui.status(msg)
            else:
                ui.note(msg)
        else:
            ui.warn(_(b'no phases changed\n'))
    return ret


def postincoming(ui, repo, modheads, optupdate, checkout, brev):
    """Run after a changegroup has been added via pull/unbundle

    This takes arguments below:

    :modheads: change of heads by pull/unbundle
    :optupdate: updating working directory is needed or not
    :checkout: update destination revision (or None to default destination)
    :brev: a name, which might be a bookmark to be activated after updating

    return True if update raise any conflict, False otherwise.
    """
    if modheads == 0:
        return False
    if optupdate:
        try:
            return hg.updatetotally(ui, repo, checkout, brev)
        except error.UpdateAbort as inst:
            msg = _(b"not updating: %s") % stringutil.forcebytestr(inst)
            hint = inst.hint
            raise error.UpdateAbort(msg, hint=hint)
    if modheads is not None and modheads > 1:
        currentbranchheads = len(repo.branchheads())
        if currentbranchheads == modheads:
            ui.status(
                _(b"(run 'hg heads' to see heads, 'hg merge' to merge)\n")
            )
        elif currentbranchheads > 1:
            ui.status(
                _(b"(run 'hg heads .' to see heads, 'hg merge' to merge)\n")
            )
        else:
            ui.status(_(b"(run 'hg heads' to see heads)\n"))
    elif not ui.configbool(b'commands', b'update.requiredest'):
        ui.status(_(b"(run 'hg update' to get a working copy)\n"))
    return False


@command(
    b'pull',
    [
        (
            b'u',
            b'update',
            None,
            _(b'update to new branch head if new descendants were pulled'),
        ),
        (
            b'f',
            b'force',
            None,
            _(b'run even when remote repository is unrelated'),
        ),
        (
            b'',
            b'confirm',
            None,
            _(b'confirm pull before applying changes'),
        ),
        (
            b'r',
            b'rev',
            [],
            _(b'a remote changeset intended to be added'),
            _(b'REV'),
        ),
        (b'B', b'bookmark', [], _(b"bookmark to pull"), _(b'BOOKMARK')),
        (
            b'b',
            b'branch',
            [],
            _(b'a specific branch you would like to pull'),
            _(b'BRANCH'),
        ),
    ]
    + remoteopts,
    _(b'[-u] [-f] [-r REV]... [-e CMD] [--remotecmd CMD] [SOURCE]...'),
    helpcategory=command.CATEGORY_REMOTE_REPO_MANAGEMENT,
    helpbasic=True,
)
def pull(ui, repo, *sources, **opts):
    """pull changes from the specified source

    Pull changes from a remote repository to a local one.

    This finds all changes from the repository at the specified path
    or URL and adds them to a local repository (the current one unless
    -R is specified). By default, this does not update the copy of the
    project in the working directory.

    When cloning from servers that support it, Mercurial may fetch
    pre-generated data. When this is done, hooks operating on incoming
    changesets and changegroups may fire more than once, once for each
    pre-generated bundle and as well as for any additional remaining
    data. See :hg:`help -e clonebundles` for more.

    Use :hg:`incoming` if you want to see what would have been added
    by a pull at the time you issued this command. If you then decide
    to add those changes to the repository, you should use :hg:`pull
    -r X` where ``X`` is the last changeset listed by :hg:`incoming`.

    If SOURCE is omitted, the 'default' path will be used.
    See :hg:`help urls` for more information.

    If multiple sources are specified, they will be pulled sequentially as if
    the command was run multiple time. If --update is specify and the command
    will stop at the first failed --update.

    Specifying bookmark as ``.`` is equivalent to specifying the active
    bookmark's name.

    Returns 0 on success, 1 if an update had unresolved files.
    """

    opts = pycompat.byteskwargs(opts)
    if ui.configbool(b'commands', b'update.requiredest') and opts.get(
        b'update'
    ):
        msg = _(b'update destination required by configuration')
        hint = _(b'use hg pull followed by hg update DEST')
        raise error.InputError(msg, hint=hint)

    for path in urlutil.get_pull_paths(repo, ui, sources):
        source, branches = urlutil.parseurl(path.rawloc, opts.get(b'branch'))
        ui.status(_(b'pulling from %s\n') % urlutil.hidepassword(source))
        ui.flush()
        other = hg.peer(repo, opts, source)
        update_conflict = None
        try:
            revs, checkout = hg.addbranchrevs(
                repo, other, branches, opts.get(b'rev')
            )

            pullopargs = {}

            nodes = None
            if opts.get(b'bookmark') or revs:
                # The list of bookmark used here is the same used to actually update
                # the bookmark names, to avoid the race from issue 4689 and we do
                # all lookup and bookmark queries in one go so they see the same
                # version of the server state (issue 4700).
                nodes = []
                fnodes = []
                revs = revs or []
                if revs and not other.capable(b'lookup'):
                    err = _(
                        b"other repository doesn't support revision lookup, "
                        b"so a rev cannot be specified."
                    )
                    raise error.Abort(err)
                with other.commandexecutor() as e:
                    fremotebookmarks = e.callcommand(
                        b'listkeys', {b'namespace': b'bookmarks'}
                    )
                    for r in revs:
                        fnodes.append(e.callcommand(b'lookup', {b'key': r}))
                remotebookmarks = fremotebookmarks.result()
                remotebookmarks = bookmarks.unhexlifybookmarks(remotebookmarks)
                pullopargs[b'remotebookmarks'] = remotebookmarks
                for b in opts.get(b'bookmark', []):
                    b = repo._bookmarks.expandname(b)
                    if b not in remotebookmarks:
                        raise error.InputError(
                            _(b'remote bookmark %s not found!') % b
                        )
                    nodes.append(remotebookmarks[b])
                for i, rev in enumerate(revs):
                    node = fnodes[i].result()
                    nodes.append(node)
                    if rev == checkout:
                        checkout = node

            wlock = util.nullcontextmanager()
            if opts.get(b'update'):
                wlock = repo.wlock()
            with wlock:
                pullopargs.update(opts.get(b'opargs', {}))
                modheads = exchange.pull(
                    repo,
                    other,
                    path=path,
                    heads=nodes,
                    force=opts.get(b'force'),
                    bookmarks=opts.get(b'bookmark', ()),
                    opargs=pullopargs,
                    confirm=opts.get(b'confirm'),
                ).cgresult

                # brev is a name, which might be a bookmark to be activated at
                # the end of the update. In other words, it is an explicit
                # destination of the update
                brev = None

                if checkout:
                    checkout = repo.unfiltered().changelog.rev(checkout)

                    # order below depends on implementation of
                    # hg.addbranchrevs(). opts['bookmark'] is ignored,
                    # because 'checkout' is determined without it.
                    if opts.get(b'rev'):
                        brev = opts[b'rev'][0]
                    elif opts.get(b'branch'):
                        brev = opts[b'branch'][0]
                    else:
                        brev = branches[0]
                repo._subtoppath = source
                try:
                    update_conflict = postincoming(
                        ui, repo, modheads, opts.get(b'update'), checkout, brev
                    )
                except error.FilteredRepoLookupError as exc:
                    msg = _(b'cannot update to target: %s') % exc.args[0]
                    exc.args = (msg,) + exc.args[1:]
                    raise
                finally:
                    del repo._subtoppath

        finally:
            other.close()
        # skip the remaining pull source if they are some conflict.
        if update_conflict:
            break
    if update_conflict:
        return 1
    else:
        return 0


@command(
    b'purge|clean',
    [
        (b'a', b'abort-on-err', None, _(b'abort if an error occurs')),
        (b'', b'all', None, _(b'purge ignored files too')),
        (b'i', b'ignored', None, _(b'purge only ignored files')),
        (b'', b'dirs', None, _(b'purge empty directories')),
        (b'', b'files', None, _(b'purge files')),
        (b'p', b'print', None, _(b'print filenames instead of deleting them')),
        (
            b'0',
            b'print0',
            None,
            _(
                b'end filenames with NUL, for use with xargs'
                b' (implies -p/--print)'
            ),
        ),
        (b'', b'confirm', None, _(b'ask before permanently deleting files')),
    ]
    + cmdutil.walkopts,
    _(b'hg purge [OPTION]... [DIR]...'),
    helpcategory=command.CATEGORY_WORKING_DIRECTORY,
)
def purge(ui, repo, *dirs, **opts):
    """removes files not tracked by Mercurial

    Delete files not known to Mercurial. This is useful to test local
    and uncommitted changes in an otherwise-clean source tree.

    This means that purge will delete the following by default:

    - Unknown files: files marked with "?" by :hg:`status`
    - Empty directories: in fact Mercurial ignores directories unless
      they contain files under source control management

    But it will leave untouched:

    - Modified and unmodified tracked files
    - Ignored files (unless -i or --all is specified)
    - New files added to the repository (with :hg:`add`)

    The --files and --dirs options can be used to direct purge to delete
    only files, only directories, or both. If neither option is given,
    both will be deleted.

    If directories are given on the command line, only files in these
    directories are considered.

    Be careful with purge, as you could irreversibly delete some files
    you forgot to add to the repository. If you only want to print the
    list of files that this program would delete, use the --print
    option.
    """
    opts = pycompat.byteskwargs(opts)
    cmdutil.check_at_most_one_arg(opts, b'all', b'ignored')

    act = not opts.get(b'print')
    eol = b'\n'
    if opts.get(b'print0'):
        eol = b'\0'
        act = False  # --print0 implies --print
    if opts.get(b'all', False):
        ignored = True
        unknown = True
    else:
        ignored = opts.get(b'ignored', False)
        unknown = not ignored

    removefiles = opts.get(b'files')
    removedirs = opts.get(b'dirs')
    confirm = opts.get(b'confirm')
    if confirm is None:
        try:
            extensions.find(b'purge')
            confirm = False
        except KeyError:
            confirm = True

    if not removefiles and not removedirs:
        removefiles = True
        removedirs = True

    match = scmutil.match(repo[None], dirs, opts)

    paths = mergemod.purge(
        repo,
        match,
        unknown=unknown,
        ignored=ignored,
        removeemptydirs=removedirs,
        removefiles=removefiles,
        abortonerror=opts.get(b'abort_on_err'),
        noop=not act,
        confirm=confirm,
    )

    for path in paths:
        if not act:
            ui.write(b'%s%s' % (path, eol))


@command(
    b'push',
    [
        (b'f', b'force', None, _(b'force push')),
        (
            b'r',
            b'rev',
            [],
            _(b'a changeset intended to be included in the destination'),
            _(b'REV'),
        ),
        (b'B', b'bookmark', [], _(b"bookmark to push"), _(b'BOOKMARK')),
        (b'', b'all-bookmarks', None, _(b"push all bookmarks (EXPERIMENTAL)")),
        (
            b'b',
            b'branch',
            [],
            _(b'a specific branch you would like to push'),
            _(b'BRANCH'),
        ),
        (b'', b'new-branch', False, _(b'allow pushing a new branch')),
        (
            b'',
            b'pushvars',
            [],
            _(b'variables that can be sent to server (ADVANCED)'),
        ),
        (
            b'',
            b'publish',
            False,
            _(b'push the changeset as public (EXPERIMENTAL)'),
        ),
    ]
    + remoteopts,
    _(b'[-f] [-r REV]... [-e CMD] [--remotecmd CMD] [DEST]...'),
    helpcategory=command.CATEGORY_REMOTE_REPO_MANAGEMENT,
    helpbasic=True,
)
def push(ui, repo, *dests, **opts):
    """push changes to the specified destination

    Push changesets from the local repository to the specified
    destination.

    This operation is symmetrical to pull: it is identical to a pull
    in the destination repository from the current one.

    By default, push will not allow creation of new heads at the
    destination, since multiple heads would make it unclear which head
    to use. In this situation, it is recommended to pull and merge
    before pushing.

    Use --new-branch if you want to allow push to create a new named
    branch that is not present at the destination. This allows you to
    only create a new branch without forcing other changes.

    .. note::

       Extra care should be taken with the -f/--force option,
       which will push all new heads on all branches, an action which will
       almost always cause confusion for collaborators.

    If -r/--rev is used, the specified revision and all its ancestors
    will be pushed to the remote repository.

    If -B/--bookmark is used, the specified bookmarked revision, its
    ancestors, and the bookmark will be pushed to the remote
    repository. Specifying ``.`` is equivalent to specifying the active
    bookmark's name. Use the --all-bookmarks option for pushing all
    current bookmarks.

    Please see :hg:`help urls` for important details about ``ssh://``
    URLs. If DESTINATION is omitted, a default path will be used.

    When passed multiple destinations, push will process them one after the
    other, but stop should an error occur.

    .. container:: verbose

        The --pushvars option sends strings to the server that become
        environment variables prepended with ``HG_USERVAR_``. For example,
        ``--pushvars ENABLE_FEATURE=true``, provides the server side hooks with
        ``HG_USERVAR_ENABLE_FEATURE=true`` as part of their environment.

        pushvars can provide for user-overridable hooks as well as set debug
        levels. One example is having a hook that blocks commits containing
        conflict markers, but enables the user to override the hook if the file
        is using conflict markers for testing purposes or the file format has
        strings that look like conflict markers.

        By default, servers will ignore `--pushvars`. To enable it add the
        following to your configuration file::

            [push]
            pushvars.server = true

    Returns 0 if push was successful, 1 if nothing to push.
    """

    opts = pycompat.byteskwargs(opts)

    if opts.get(b'all_bookmarks'):
        cmdutil.check_incompatible_arguments(
            opts,
            b'all_bookmarks',
            [b'bookmark', b'rev'],
        )
        opts[b'bookmark'] = list(repo._bookmarks)

    if opts.get(b'bookmark'):
        ui.setconfig(b'bookmarks', b'pushing', opts[b'bookmark'], b'push')
        for b in opts[b'bookmark']:
            # translate -B options to -r so changesets get pushed
            b = repo._bookmarks.expandname(b)
            if b in repo._bookmarks:
                opts.setdefault(b'rev', []).append(b)
            else:
                # if we try to push a deleted bookmark, translate it to null
                # this lets simultaneous -r, -b options continue working
                opts.setdefault(b'rev', []).append(b"null")

    some_pushed = False
    result = 0
    for path in urlutil.get_push_paths(repo, ui, dests):
        dest = path.pushloc or path.loc
        branches = (path.branch, opts.get(b'branch') or [])
        ui.status(_(b'pushing to %s\n') % urlutil.hidepassword(dest))
        revs, checkout = hg.addbranchrevs(
            repo, repo, branches, opts.get(b'rev')
        )
        other = hg.peer(repo, opts, dest)

        try:
            if revs:
                revs = [repo[r].node() for r in logcmdutil.revrange(repo, revs)]
                if not revs:
                    raise error.InputError(
                        _(b"specified revisions evaluate to an empty set"),
                        hint=_(b"use different revision arguments"),
                    )
            elif path.pushrev:
                # It doesn't make any sense to specify ancestor revisions. So limit
                # to DAG heads to make discovery simpler.
                expr = revsetlang.formatspec(b'heads(%r)', path.pushrev)
                revs = scmutil.revrange(repo, [expr])
                revs = [repo[rev].node() for rev in revs]
                if not revs:
                    raise error.InputError(
                        _(
                            b'default push revset for path evaluates to an empty set'
                        )
                    )
            elif ui.configbool(b'commands', b'push.require-revs'):
                raise error.InputError(
                    _(b'no revisions specified to push'),
                    hint=_(b'did you mean "hg push -r ."?'),
                )

            repo._subtoppath = dest
            try:
                # push subrepos depth-first for coherent ordering
                c = repo[b'.']
                subs = c.substate  # only repos that are committed
                for s in sorted(subs):
                    sub_result = c.sub(s).push(opts)
                    if sub_result == 0:
                        return 1
            finally:
                del repo._subtoppath

            opargs = dict(
                opts.get(b'opargs', {})
            )  # copy opargs since we may mutate it
            opargs.setdefault(b'pushvars', []).extend(opts.get(b'pushvars', []))

            pushop = exchange.push(
                repo,
                other,
                opts.get(b'force'),
                revs=revs,
                newbranch=opts.get(b'new_branch'),
                bookmarks=opts.get(b'bookmark', ()),
                publish=opts.get(b'publish'),
                opargs=opargs,
            )

            if pushop.cgresult == 0:
                result = 1
            elif pushop.cgresult is not None:
                some_pushed = True

            if pushop.bkresult is not None:
                if pushop.bkresult == 2:
                    result = 2
                elif not result and pushop.bkresult:
                    result = 2

            if result:
                break
