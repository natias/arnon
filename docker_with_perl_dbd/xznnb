                        else
                        {
                            arg5_direct_access_type arg5Access =
                                getArrayAccess<arg5_direct_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_masked_access_type,
                                               arg2_direct_access_type,
                                               arg3_masked_access_type,
                                               arg4_masked_access_type,
                                               arg5_direct_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                    }
                    else
                    {
                        arg4_direct_access_type arg4Access =
                            getArrayAccess<arg4_direct_access_type> (arg4);

                        if (any_masked(arg5))
                        {
                            arg5_masked_access_type arg5Access =
                                getArrayAccess<arg5_masked_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_masked_access_type,
                                               arg2_direct_access_type,
                                               arg3_masked_access_type,
                                               arg4_direct_access_type,
                                               arg5_masked_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                        else
                        {
                            arg5_direct_access_type arg5Access =
                                getArrayAccess<arg5_direct_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_masked_access_type,
                                               arg2_direct_access_type,
                                               arg3_masked_access_type,
                                               arg4_direct_access_type,
                                               arg5_direct_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                    }
                }
                else
                {
                    arg3_direct_access_type arg3Access =
                         getArrayAccess<arg3_direct_access_type> (arg3);

                    if (any_masked(arg4))
                    {
                        arg4_masked_access_type arg4Access =
                            getArrayAccess<arg4_masked_access_type> (arg4);

                        if (any_masked(arg5))
                        {
                            arg5_masked_access_type arg5Access =
                                getArrayAccess<arg5_masked_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_masked_access_type,
                                               arg2_direct_access_type,
                                               arg3_direct_access_type,
                                               arg4_masked_access_type,
                                               arg5_masked_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                        else
                        {
                            arg5_direct_access_type arg5Access =
                                getArrayAccess<arg5_direct_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_masked_access_type,
                                               arg2_direct_access_type,
                                               arg3_direct_access_type,
                                               arg4_masked_access_type,
                                               arg5_direct_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                    }
                    else
                    {
                        arg4_direct_access_type arg4Access =
                            getArrayAccess<arg4_direct_access_type> (arg4);

                        if (any_masked(arg5))
                        {
                            arg5_masked_access_type arg5Access =
                                getArrayAccess<arg5_masked_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_masked_access_type,
                                               arg2_direct_access_type,
                                               arg3_direct_access_type,
                                               arg4_direct_access_type,
                                               arg5_masked_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                        else
                        {
                            arg5_direct_access_type arg5Access =
                                getArrayAccess<arg5_direct_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_masked_access_type,
                                               arg2_direct_access_type,
                                               arg3_direct_access_type,
                                               arg4_direct_access_type,
                                               arg5_direct_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                    }
                }
            }
        }
        else
        {
            arg1_direct_access_type arg1Access =
                 getArrayAccess<arg1_direct_access_type> (arg1);

            if (any_masked(arg2))
            {
                arg2_masked_access_type arg2Access =
                     getArrayAccess<arg2_masked_access_type> (arg2);

                if (any_masked(arg3))
                {
                    arg3_masked_access_type arg3Access =
                         getArrayAccess<arg3_masked_access_type> (arg3);

                    if (any_masked(arg4))
                    {
                        arg4_masked_access_type arg4Access =
                            getArrayAccess<arg4_masked_access_type> (arg4);

                        if (any_masked(arg5))
                        {
                            arg5_masked_access_type arg5Access =
                                getArrayAccess<arg5_masked_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_direct_access_type,
                                               arg2_masked_access_type,
                                               arg3_masked_access_type,
                                               arg4_masked_access_type,
                                               arg5_masked_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                        else
                        {
                            arg5_direct_access_type arg5Access =
                                getArrayAccess<arg5_direct_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_direct_access_type,
                                               arg2_masked_access_type,
                                               arg3_masked_access_type,
                                               arg4_masked_access_type,
                                               arg5_direct_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                    }
                    else
                    {
                        arg4_direct_access_type arg4Access =
                            getArrayAccess<arg4_direct_access_type> (arg4);

                        if (any_masked(arg5))
                        {
                            arg5_masked_access_type arg5Access =
                                getArrayAccess<arg5_masked_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_direct_access_type,
                                               arg2_masked_access_type,
                                               arg3_masked_access_type,
                                               arg4_direct_access_type,
                                               arg5_masked_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                        else
                        {
                            arg5_direct_access_type arg5Access =
                                getArrayAccess<arg5_direct_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_direct_access_type,
                                               arg2_masked_access_type,
                                               arg3_masked_access_type,
                                               arg4_direct_access_type,
                                               arg5_direct_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                    }
                }
                else
                {
                    arg3_direct_access_type arg3Access =
                         getArrayAccess<arg3_direct_access_type> (arg3);

                    if (any_masked(arg4))
                    {
                        arg4_masked_access_type arg4Access =
                            getArrayAccess<arg4_masked_access_type> (arg4);

                        if (any_masked(arg5))
                        {
                            arg5_masked_access_type arg5Access =
                                getArrayAccess<arg5_masked_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_direct_access_type,
                                               arg2_masked_access_type,
                                               arg3_direct_access_type,
                                               arg4_masked_access_type,
                                               arg5_masked_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                        else
                        {
                            arg5_direct_access_type arg5Access =
                                getArrayAccess<arg5_direct_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_direct_access_type,
                                               arg2_masked_access_type,
                                               arg3_direct_access_type,
                                               arg4_masked_access_type,
                                               arg5_direct_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                    }
                    else
                    {
                        arg4_direct_access_type arg4Access =
                            getArrayAccess<arg4_direct_access_type> (arg4);

                        if (any_masked(arg5))
                        {
                            arg5_masked_access_type arg5Access =
                                getArrayAccess<arg5_masked_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_direct_access_type,
                                               arg2_masked_access_type,
                                               arg3_direct_access_type,
                                               arg4_direct_access_type,
                                               arg5_masked_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                        else
                        {
                            arg5_direct_access_type arg5Access =
                                getArrayAccess<arg5_direct_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_direct_access_type,
                                               arg2_masked_access_type,
                                               arg3_direct_access_type,
                                               arg4_direct_access_type,
                                               arg5_direct_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                    }
                }
            }
            else
            {
                arg2_direct_access_type arg2Access =
                     getArrayAccess<arg2_direct_access_type> (arg2);

                if (any_masked(arg3))
                {
                    arg3_masked_access_type arg3Access =
                         getArrayAccess<arg3_masked_access_type> (arg3);

                    if (any_masked(arg4))
                    {
                        arg4_masked_access_type arg4Access =
                            getArrayAccess<arg4_masked_access_type> (arg4);

                        if (any_masked(arg5))
                        {
                            arg5_masked_access_type arg5Access =
                                getArrayAccess<arg5_masked_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_direct_access_type,
                                               arg2_direct_access_type,
                                               arg3_masked_access_type,
                                               arg4_masked_access_type,
                                               arg5_masked_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                        else
                        {
                            arg5_direct_access_type arg5Access =
                                getArrayAccess<arg5_direct_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_direct_access_type,
                                               arg2_direct_access_type,
                                               arg3_masked_access_type,
                                               arg4_masked_access_type,
                                               arg5_direct_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                    }
                    else
                    {
                        arg4_direct_access_type arg4Access =
                            getArrayAccess<arg4_direct_access_type> (arg4);

                        if (any_masked(arg5))
                        {
                            arg5_masked_access_type arg5Access =
                                getArrayAccess<arg5_masked_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_direct_access_type,
                                               arg2_direct_access_type,
                                               arg3_masked_access_type,
                                               arg4_direct_access_type,
                                               arg5_masked_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                        else
                        {
                            arg5_direct_access_type arg5Access =
                                getArrayAccess<arg5_direct_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_direct_access_type,
                                               arg2_direct_access_type,
                                               arg3_masked_access_type,
                                               arg4_direct_access_type,
                                               arg5_direct_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                    }
                }
                else
                {
                    arg3_direct_access_type arg3Access =
                         getArrayAccess<arg3_direct_access_type> (arg3);

                    if (any_masked(arg4))
                    {
                        arg4_masked_access_type arg4Access =
                            getArrayAccess<arg4_masked_access_type> (arg4);

                        if (any_masked(arg5))
                        {
                            arg5_masked_access_type arg5Access =
                                getArrayAccess<arg5_masked_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_direct_access_type,
                                               arg2_direct_access_type,
                                               arg3_direct_access_type,
                                               arg4_masked_access_type,
                                               arg5_masked_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                        else
                        {
                            arg5_direct_access_type arg5Access =
                                getArrayAccess<arg5_direct_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_direct_access_type,
                                               arg2_direct_access_type,
                                               arg3_direct_access_type,
                                               arg4_masked_access_type,
                                               arg5_direct_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                    }
                    else
                    {
                        arg4_direct_access_type arg4Access =
                            getArrayAccess<arg4_direct_access_type> (arg4);

                        if (any_masked(arg5))
                        {
                            arg5_masked_access_type arg5Access =
                                getArrayAccess<arg5_masked_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_direct_access_type,
                                               arg2_direct_access_type,
                                               arg3_direct_access_type,
                                               arg4_direct_access_type,
                                               arg5_masked_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                        else
                        {
                            arg5_direct_access_type arg5Access =
                                getArrayAccess<arg5_direct_access_type> (arg5);

                            VectorizedOperation5<Op,result_access_type,
                                               arg1_direct_access_type,
                                               arg2_direct_access_type,
                                               arg3_direct_access_type,
                                               arg4_direct_access_type,
                                               arg5_direct_access_type>
                                vop (resultAccess, arg1Access, arg2Access, arg3Access, arg4Access, arg5Access);
                            dispatchTask(vop,len);
                        }
                    }
                }
            }
        }

        PY_IMATH_RETURN_PYTHON;
        return retval;
    }

    static std::string
    format_arguments(const boost::python::detail::keywords<5> &args)
    {
        // TODO: add types here
        return std::string("(")+args.elements[0].name+","+args.elements[1].name+","+args.elements[2].name+","+args.elements[3].name+","+args.elements[4].name+") - ";
    }
};

template <class Op, class Func, class Keywords>
struct function_binding
{
    std::string _name, _doc;
    const Keywords &_args;


    function_binding(const std::string &name, const std::string &doc,const Keywords &args)
        : _name(name), _doc(doc), _args(args)
    {}

    template <class Vectorize>
    void operator()(Vectorize) const
    {
        typedef typename at<vector<
             int,  // unused, arity 0
             VectorizedFunction1<Op,Vectorize,Func>,
             VectorizedFunction2<Op,Vectorize,Func>,
             VectorizedFunction3<Op,Vectorize,Func>,
             VectorizedFunction4<Op,Vectorize,Func>,
             VectorizedFunction5<Op,Vectorize,Func>
            >,
            long_<function_traits<Func>::arity> >::type vectorized_function_type;
        std::string doc = _name + vectorized_function_type::format_arguments(_args) + _doc;
        boost::python::def(_name.c_str(),&vectorized_function_type::apply,doc.c_str(),_args);
    }
};

template <class Op,class Func,class Keywords>
function_binding<Op,Func,Keywords>
build_function_binding(Func *func,const std::string &name,const std::string &doc,const Keywords &args)
{
    return function_binding<Op,Func,Keywords>(name,doc,args);
}

template <class Op,class Vectorizable,class Keywords>
struct generate_bindings_struct
{
    //BOOST_STATIC_ASSERT(size<Vectorizable>::value == function_traits<Op::apply>::arity);
    static void apply(const std::string &name,const std::string &doc,const Keywords &args) {
        for_each<typename allowable_vectorizations<Vectorizable>::type>(build_function_binding<Op>(Op::apply,name,doc,args));
    }
};


template <class Op, class access_type>
struct VectorizedVoidOperation0 : public Task
{
    access_type access;

    VectorizedVoidOperation0 (access_type a) : access(a) {}

    void execute (size_t start, size_t end)
    {
        for (size_t i = start; i < end; ++i)
        {
            Op::apply (access[i]);
        }
    }
};

template <class Op, class access_type, class arg1_access_type>
struct VectorizedVoidOperation1 : public Task
{
    access_type      access;
    arg1_access_type arg1;

    VectorizedVoidOperation1(access_type a, arg1_access_type a1) : access(a), arg1(a1) {}

    void execute(size_t start, size_t end)
    {
        for (size_t i = start; i < end; ++i)
        {
            Op::apply (access[i], arg1[i]);
        }
    }
};

template <class Op, class access_type, class arg1_access_type, class array_type>
struct VectorizedMaskedVoidOperation1 : public Task
{
    access_type      access;
    arg1_access_type arg1;
    array_type       array;

    VectorizedMaskedVoidOperation1(access_type a, arg1_access_type a1, array_type arr)
        : access(a), arg1(a1), array(arr) {}

    void execute(size_t start, size_t end)
    {
        for (size_t i = start; i < end; ++i)
        {
            const size_t ri = array.raw_ptr_index(i);
            Op::apply (access[i], arg1[ri]);
        }
    }
};

template <class Op, class access_type, class arg1_access_type, class arg2_access_type>
struct VectorizedVoidOperation2 : public Task
{
    access_type      access;
    arg1_access_type arg1;
    arg2_access_type arg2;

    VectorizedVoidOperation2(access_type a, arg1_access_type a1, arg2_access_type a2)
        : access(a), arg1(a1), arg2(a2) {}

    void execute(size_t start, size_t end)
    {
        for (size_t i = start; i < end; ++i)
        {
            Op::apply (access[i], arg1[i], arg2[i]);
        }
    }
};


template <class Op, class Vectorize, class Func>
struct VectorizedVoidMemberFunction0 {
    BOOST_STATIC_ASSERT((size<Vectorize>::value+1 == function_traits<Func>::arity));

    typedef function_traits<Func> traits;

    typedef typename access_type<typename traits::arg1_type>::reference_type reference_type;
    typedef typename access_type<typename traits::arg1_type>::direct direct_access_type;
    typedef typename access_type<typename traits::arg1_type>::masked masked_access_type;

    static reference_type
    apply(reference_type array)
    {
        PY_IMATH_LEAVE_PYTHON;
        size_t len = measure_arguments(array);
        op_precompute<Op>::apply(len);

        if (any_masked(array))
        {
            masked_access_type access (array);
            VectorizedVoidOperation0<Op,masked_access_type> vop (access);
            dispatchTask(vop,len);
        }
        else
        {
            direct_access_type access (array);
            VectorizedVoidOperation0<Op,direct_access_type> vop (access);
            dispatchTask(vop,len);
        }

        PY_IMATH_RETURN_PYTHON;
        return array;
    }
};

template <class Op, class Vectorize, class Func>
struct VectorizedVoidMemberFunction1 {
    BOOST_STATIC_ASSERT((size<Vectorize>::value+1 == function_traits<Func>::arity));

    typedef function_traits<Func> traits;

    typedef typename access_type<typename traits::arg1_type>::reference_type reference_type;
    typedef typename access_type<typename traits::arg1_type>::direct direct_access_type;
    typedef typename access_type<typename traits::arg1_type>::masked masked_access_type;

    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<0> >::type>::type arg1_type;
    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<0> >::type>::direct arg1_direct_access_type;
    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<0> >::type>::masked arg1_masked_access_type;

    static reference_type
    apply(reference_type array, arg1_type arg1)
    {
        PY_IMATH_LEAVE_PYTHON;
        size_t len = measure_arguments(array,arg1);
        op_precompute<Op>::apply(len);

        if (any_masked(array))
        {
            masked_access_type arrayAccess (array);

            if (any_masked(arg1))
            {
                arg1_masked_access_type argAccess =
                     getArrayAccess<arg1_masked_access_type> (arg1);

                VectorizedVoidOperation1<Op,masked_access_type,arg1_masked_access_type>
                    vop (arrayAccess, argAccess);
                dispatchTask(vop,len);
            }
            else
            {
                arg1_direct_access_type argAccess =
                     getArrayAccess<arg1_direct_access_type> (arg1);

                VectorizedVoidOperation1<Op,masked_access_type,arg1_direct_access_type>
                    vop (arrayAccess, argAccess);
                dispatchTask(vop,len);
            }
        }
        else
        {
            direct_access_type arrayAccess (array);

            if (any_masked(arg1))
            {
                arg1_masked_access_type argAccess =
                     getArrayAccess<arg1_masked_access_type> (arg1);

                VectorizedVoidOperation1<Op,direct_access_type,arg1_masked_access_type>
                    vop (arrayAccess, argAccess);
                dispatchTask(vop,len);
            }
            else
            {
                arg1_direct_access_type argAccess =
                     getArrayAccess<arg1_direct_access_type> (arg1);

                VectorizedVoidOperation1<Op,direct_access_type,arg1_direct_access_type>
                    vop (arrayAccess, argAccess);
                dispatchTask(vop,len);
            }
        }

        PY_IMATH_RETURN_PYTHON;
        return array;
    }

    static std::string
    format_arguments(const boost::python::detail::keywords<1> &args)
    {
        // TODO: add types here
        return std::string("(")+args.elements[0].name+") - ";
    }
};

//
// special class to handle single argument void memberfunctions, such as those
// used for the inplace operators like +=, -=, etc.  In this case we allow additional
// compatibilty between a masked class and an unmasked right hand side, using the
// mask to select results.
//
template <class Op, class Func>
struct VectorizedVoidMaskableMemberFunction1 {
    BOOST_STATIC_ASSERT((2 == function_traits<Func>::arity));

    typedef function_traits<Func> traits;

    typedef typename access_type<typename traits::arg1_type>::reference_type reference_type;
    typedef typename access_type<typename traits::arg1_type>::direct direct_access_type;
    typedef typename access_type<typename traits::arg1_type>::masked masked_access_type;

    typedef typename argument_access_type<typename traits::arg2_type,
                                                   boost::mpl::true_>::type arg1_type;
    typedef typename argument_access_type<typename traits::arg2_type,
                                                   boost::mpl::true_>::direct arg1_direct_access_type;
    typedef typename argument_access_type<typename traits::arg2_type,
                                                   boost::mpl::true_>::masked arg1_masked_access_type;

    static reference_type
    apply(reference_type array, arg1_type arg1)
    {
        PY_IMATH_LEAVE_PYTHON;
        size_t len = array.match_dimension(arg1, false);
        op_precompute<Op>::apply(len);

        if (array.isMaskedReference() && (size_t) arg1.len() == array.unmaskedLength())
        {
            // class is masked, and the unmasked length matches the right hand side

            masked_access_type arrayAccess (array);

            if (any_masked(arg1))
            {
                arg1_masked_access_type argAccess =
                     getArrayAccess<arg1_masked_access_type> (arg1);

                VectorizedMaskedVoidOperation1<Op,masked_access_type,
                                             arg1_masked_access_type,
                                                      reference_type>
                    vop (arrayAccess, argAccess, array);
                dispatchTask(vop,len);
            }
            else
            {
                arg1_direct_access_type argAccess =
                     getArrayAccess<arg1_direct_access_type> (arg1);

                VectorizedMaskedVoidOperation1<Op,masked_access_type,
                                             arg1_direct_access_type,
                                                      reference_type>
                    vop (arrayAccess, argAccess, array);
                dispatchTask(vop,len);
            }
        }
        else
        {
            // the two arrays match length (masked or otherwise), use the standard path.

            if (any_masked(array))
            {
                masked_access_type arrayAccess (array);

                if (any_masked(arg1))
                {
                    arg1_masked_access_type argAccess =
                         getArrayAccess<arg1_masked_access_type> (arg1);

                    VectorizedVoidOperation1<Op,masked_access_type,arg1_masked_access_type>
                        vop (arrayAccess, argAccess);
                    dispatchTask(vop,len);
                }
                else
                {
                    arg1_direct_access_type argAccess =
                         getArrayAccess<arg1_direct_access_type> (arg1);

                    VectorizedVoidOperation1<Op,masked_access_type,arg1_direct_access_type>
                        vop (arrayAccess, argAccess);
                    dispatchTask(vop,len);
                }
            }
            else
            {
                direct_access_type arrayAccess (array);

                if (any_masked(arg1))
                {
                    arg1_masked_access_type argAccess =
                         getArrayAccess<arg1_masked_access_type> (arg1);

                    VectorizedVoidOperation1<Op,direct_access_type,arg1_masked_access_type>
                        vop (arrayAccess, argAccess);
                    dispatchTask(vop,len);
                }
                else
                {
                    arg1_direct_access_type argAccess =
                         getArrayAccess<arg1_direct_access_type> (arg1);

                    VectorizedVoidOperation1<Op,direct_access_type,arg1_direct_access_type>
                        vop (arrayAccess, argAccess);
                    dispatchTask(vop,len);
                }
            }
        }
           
        PY_IMATH_RETURN_PYTHON;
        return array;
    }

    static std::string
    format_arguments(const boost::python::detail::keywords<1> &args)
    {
        // TODO: add types here
        return std::string("(")+args.elements[0].name+") - ";
    }
};

template <class Op, class Vectorize, class Func>
struct VectorizedVoidMemberFunction2 {
    BOOST_STATIC_ASSERT((size<Vectorize>::value+1 == function_traits<Func>::arity));

    typedef function_traits<Func> traits;

    typedef typename access_type<typename traits::arg1_type>::reference_type reference_type;
    typedef typename access_type<typename traits::arg1_type>::direct direct_access_type;
    typedef typename access_type<typename traits::arg1_type>::masked masked_access_type;

    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<0> >::type>::type arg1_type;
    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<0> >::type>::direct arg1_direct_access_type;
    typedef typename argument_access_type<typename traits::arg2_type,
                              typename at<Vectorize,long_<0> >::type>::masked arg1_masked_access_type;

    typedef typename argument_access_type<typename traits::arg3_type,
                              typename at<Vectorize,long_<1> >::type>::type arg2_type;
    typedef typename argument_access_type<typename traits::arg3_type,
                              typename at<Vectorize,long_<1> >::type>::direct arg2_direct_access_type;
    typedef typename argument_access_type<typename traits::arg3_type,
                              typename at<Vectorize,long_<1> >::type>::masked arg2_masked_access_type;

    static reference_type
    apply(reference_type array, arg1_type arg1, arg2_type arg2)
    {
        PY_IMATH_LEAVE_PYTHON;
        size_t len = measure_arguments(array,arg1,arg2);
        op_precompute<Op>::apply(len);

        if (any_masked(array))
        {
            masked_access_type arrayAccess (array);

            if (any_masked(arg1))
            {
                arg1_masked_access_type arg1Access =
                     getArrayAccess<arg1_masked_access_type> (arg1);

                if (any_masked(arg2))
                {
                    arg2_masked_access_type arg2Access =
                         getArrayAccess<arg2_masked_access_type> (arg2);

                    VectorizedVoidOperation2<Op,masked_access_type,
                                           arg1_masked_access_type,
                                           arg2_masked_access_type>
                          vop (arrayAccess, arg1Access, arg2Access);
                    dispatchTask(vop,len);
                }
                else
                {
                    arg2_direct_access_type arg2Access =
                         getArrayAccess<arg2_direct_access_type> (arg2);

                    VectorizedVoidOperation2<Op,masked_access_type,
                                           arg1_masked_access_type,
                                           arg2_direct_access_type>
                          vop (arrayAccess, arg1Access, arg2Access);
                    dispatchTask(vop,len);
                }
            }
            else
            {
                arg1_direct_access_type arg1Access =
                     getArrayAccess<arg1_direct_access_type> (arg1);

                if (any_masked(arg2))
                {
                    arg2_masked_access_type arg2Access =
                         getArrayAccess<arg2_masked_access_type> (arg2);

                    VectorizedVoidOperation2<Op,masked_access_type,
                                           arg1_direct_access_type,
                                           arg2_masked_access_type>
                          vop (arrayAccess, arg1Access, arg2Access);
                    dispatchTask(vop,len);
                }
                else
                {
                    arg2_direct_access_type arg2Access =
                         getArrayAccess<arg2_direct_access_type> (arg2);

                    VectorizedVoidOperation2<Op,masked_access_type,
                                           arg1_direct_access_type,
                                           arg2_direct_access_type>
                          vop (arrayAccess, arg1Access, arg2Access);
                    dispatchTask(vop,len);
                }
            }
        }
        else
        {
            direct_access_type arrayAccess (array);

            if (any_masked(arg1))
            {
                arg1_masked_access_type arg1Access =
                     getArrayAccess<arg1_masked_access_type> (arg1);

                if (any_masked(arg2))
                {
                    arg2_masked_access_type arg2Access =
                         getArrayAccess<arg2_masked_access_type> (arg2);

                    VectorizedVoidOperation2<Op,direct_access_type,
                                           arg1_masked_access_type,
                                           arg2_masked_access_type>
                          vop (arrayAccess, arg1Access, arg2Access);
                    dispatchTask(vop,len);
                }
                else
                {
                    arg2_direct_access_type arg2Access =
                         getArrayAccess<arg2_direct_access_type> (arg2);

                    VectorizedVoidOperation2<Op,direct_access_type,
                                           arg1_masked_access_type,
                                           arg2_direct_access_type>
                          vop (arrayAccess, arg1Access, arg2Access);
                    dispatchTask(vop,len);
                }
            }
            else
            {
                arg1_direct_access_type arg1Access =
                     getArrayAccess<arg1_direct_access_type> (arg1);

                if (any_masked(arg2))
                {
                    arg2_masked_access_type arg2Access =
                         getArrayAccess<arg2_masked_access_type> (arg2);

                    VectorizedVoidOperation2<Op,direct_access_type,
                                           arg1_direct_access_type,
                                           arg2_masked_access_type>
                          vop (arrayAccess, arg1Access, arg2Access);
                    dispatchTask(vop,len);
                }
                else
                {
                    arg2_direct_access_type arg2Access =
                         getArrayAccess<arg2_direct_access_type> (arg2);

                    VectorizedVoidOperation2<Op,direct_access_type,
                                           arg1_direct_access_type,
                                           arg2_direct_access_type>
                          vop (arrayAccess, arg1Access, arg2Access);
                    dispatchTask(vop,len);
                }
            }
        }

        PY_IMATH_RETURN_PYTHON;
        return array;
    }

    static std::string
    format_arguments(const boost::python::detail::keywords<2> &args)
    {
        // TODO: add types here
        return std::string("(")+args.elements[0].name+","+args.elements[1].name+") - ";
    }
};


template <class Op, class Vectorize, class Func>
struct VectorizedMemberFunction0 {
    BOOST_STATIC_ASSERT((size<Vectorize>::value+1 == function_traits<Func>::arity));

    typedef function_traits<Func> traits;

    typedef typename vectorized_result_type<typename traits::result_type,true_>::type result_type;

    typedef typename access_type<typename traits::arg1_type>::reference_type reference_type;
    typedef typename access_type<typename traits::arg1_type>::direct direct_access_type;
    typedef typename access_type<typename traits::arg1_type>::masked masked_access_type;

    // The return value can't be const or masked.  Verify that condition.
    BOOST_STATIC_ASSERT( !is_const<result_type>::value );
    typedef typename result_type::WritableDirectAccess result_access_type;

    static result_type
    apply(reference_type array)
    {
        PY_IMATH_LEAVE_PYTHON;
        size_t len = measure_arguments(array);
