
=item C<i_stdlib>

From F<i_stdlib.U>:

This variable unconditionally defines the C<I_STDLIB> symbol.

=item C<i_sunmath>

From F<i_sunmath.U>:

This variable conditionally defines the C<I_SUNMATH> symbol, and indicates
whether a C program should include <sunmath.h>.

=item C<i_sysaccess>

From F<i_sysaccess.U>:

This variable conditionally defines the C<I_SYS_ACCESS> symbol,
and indicates whether a C program should include <sys/access.h>.

=item C<i_sysdir>

From F<i_sysdir.U>:

This variable conditionally defines the C<I_SYS_DIR> symbol, and indicates
whether a C program should include <sys/dir.h>.

=item C<i_sysfile>

From F<i_sysfile.U>:

This variable conditionally defines the C<I_SYS_FILE> symbol, and indicates
whether a C program should include <sys/file.h> to get C<R_OK> and friends.

=item C<i_sysfilio>

From F<i_sysioctl.U>:

This variable conditionally defines the C<I_SYS_FILIO> symbol, which
indicates to the C program that <sys/filio.h> exists and should
be included in preference to <sys/ioctl.h>.

=item C<i_sysin>

From F<i_niin.U>:

This variable conditionally defines C<I_SYS_IN>, which indicates
to the C program that it should include <sys/in.h> instead of
<netinet/in.h>.

=item C<i_sysioctl>

From F<i_sysioctl.U>:

This variable conditionally defines the C<I_SYS_IOCTL> symbol, which
indicates to the C program that <sys/ioctl.h> exists and should
be included.

=item C<i_syslog>

From F<i_syslog.U>:

This variable conditionally defines the C<I_SYSLOG> symbol,
and indicates whether a C program should include <syslog.h>.

=item C<i_sysmman>

From F<i_sysmman.U>:

This variable conditionally defines the C<I_SYS_MMAN> symbol,
and indicates whether a C program should include <sys/mman.h>.

=item C<i_sysmode>

From F<i_sysmode.U>:

This variable conditionally defines the C<I_SYSMODE> symbol,
and indicates whether a C program should include <sys/mode.h>.

=item C<i_sysmount>

From F<i_sysmount.U>:

This variable conditionally defines the C<I_SYSMOUNT> symbol,
and indicates whether a C program should include <sys/mount.h>.

=item C<i_sysndir>

From F<i_sysndir.U>:

This variable conditionally defines the C<I_SYS_NDIR> symbol, and indicates
whether a C program should include <sys/ndir.h>.

=item C<i_sysparam>

From F<i_sysparam.U>:

This variable conditionally defines the C<I_SYS_PARAM> symbol, and indicates
whether a C program should include <sys/param.h>.

=item C<i_syspoll>

From F<i_syspoll.U>:

This variable conditionally defines the C<I_SYS_POLL> symbol, which
indicates to the C program that it should include <sys/poll.h>.

=item C<i_sysresrc>

From F<i_sysresrc.U>:

This variable conditionally defines the C<I_SYS_RESOURCE> symbol,
and indicates whether a C program should include <sys/resource.h>.

=item C<i_syssecrt>

From F<i_syssecrt.U>:

This variable conditionally defines the C<I_SYS_SECURITY> symbol,
and indicates whether a C program should include <sys/security.h>.

=item C<i_sysselct>

From F<i_sysselct.U>:

This variable conditionally defines C<I_SYS_SELECT>, which indicates
to the C program that it should include <sys/select.h> in order to
get the definition of struct timeval.

=item C<i_syssockio>

From F<i_sysioctl.U>:

This variable conditionally defines C<I_SYS_SOCKIO> to indicate to the
C program that socket ioctl codes may be found in <sys/sockio.h>
instead of <sys/ioctl.h>.

=item C<i_sysstat>

From F<i_sysstat.U>:

This variable conditionally defines the C<I_SYS_STAT> symbol,
and indicates whether a C program should include <sys/stat.h>.

=item C<i_sysstatfs>

From F<i_sysstatfs.U>:

This variable conditionally defines the C<I_SYSSTATFS> symbol,
and indicates whether a C program should include <sys/statfs.h>.

=item C<i_sysstatvfs>

From F<i_sysstatvfs.U>:

This variable conditionally defines the C<I_SYSSTATVFS> symbol,
and indicates whether a C program should include <sys/statvfs.h>.

=item C<i_syssyscall>

From F<i_syssyscall.U>:

This variable conditionally defines the C<I_SYS_SYSCALL> symbol,
and indicates whether a C program should include <sys/syscall.h>.

=item C<i_systime>

From F<i_time.U>:

This variable conditionally defines C<I_SYS_TIME>, which indicates
to the C program that it should include <sys/time.h>.

=item C<i_systimek>

From F<i_time.U>:

This variable conditionally defines C<I_SYS_TIME_KERNEL>, which
indicates to the C program that it should include <sys/time.h>
with C<KERNEL> defined.

=item C<i_systimes>

From F<i_systimes.U>:

This variable conditionally defines the C<I_SYS_TIMES> symbol, and indicates
whether a C program should include <sys/times.h>.

=item C<i_systypes>

From F<i_systypes.U>:

This variable conditionally defines the C<I_SYS_TYPES> symbol,
and indicates whether a C program should include <sys/types.h>.

=item C<i_sysuio>

From F<i_sysuio.U>:

This variable conditionally defines the C<I_SYSUIO> symbol, and indicates
whether a C program should include <sys/uio.h>.

=item C<i_sysun>

From F<i_sysun.U>:

This variable conditionally defines C<I_SYS_UN>, which indicates
to the C program that it should include <sys/un.h> to get C<UNIX>
domain socket definitions.

=item C<i_sysutsname>

From F<i_sysutsname.U>:

This variable conditionally defines the C<I_SYSUTSNAME> symbol,
and indicates whether a C program should include <sys/utsname.h>.

=item C<i_sysvfs>

From F<i_sysvfs.U>:

This variable conditionally defines the C<I_SYSVFS> symbol,
and indicates whether a C program should include <sys/vfs.h>.

=item C<i_syswait>

From F<i_syswait.U>:

This variable conditionally defines C<I_SYS_WAIT>, which indicates
to the C program that it should include <sys/wait.h>.

=item C<i_termio>

From F<i_termio.U>:

This variable conditionally defines the C<I_TERMIO> symbol, which
indicates to the C program that it should include <termio.h> rather
than <sgtty.h>.

=item C<i_termios>

From F<i_termio.U>:

This variable conditionally defines the C<I_TERMIOS> symbol, which
indicates to the C program that the C<POSIX> <termios.h> file is
to be included.

=item C<i_time>

From F<i_time.U>:

This variable unconditionally defines C<I_TIME>, which indicates
to the C program that it should include <time.h>.

=item C<i_unistd>

From F<i_unistd.U>:

This variable conditionally defines the C<I_UNISTD> symbol, and indicates
whether a C program should include <unistd.h>.

=item C<i_ustat>

From F<i_ustat.U>:

This variable conditionally defines the C<I_USTAT> symbol, and indicates
whether a C program should include <ustat.h>.

=item C<i_utime>

From F<i_utime.U>:

This variable conditionally defines the C<I_UTIME> symbol, and indicates
whether a C program should include <utime.h>.

=item C<i_vfork>

From F<i_vfork.U>:

This variable conditionally defines the C<I_VFORK> symbol, and indicates
whether a C program should include F<vfork.h>.

=item C<i_wchar>

From F<i_wchar.U>:

This variable conditionally defines the C<I_WCHAR> symbol,
that indicates whether a C program may include <wchar.h>.

=item C<i_wctype>

From F<i_wctype.U>:

This variable conditionally defines the C<I_WCTYPE> symbol,
that indicates whether a C program may include <wctype.h>.

=item C<i_xlocale>

From F<d_newlocale.U>:

This symbol, if defined, indicates to the C program that the
header F<xlocale.h> is available.  See also xlocale_needed.

=item C<ignore_versioned_solibs>

From F<libs.U>:

This variable should be non-empty if non-versioned shared
libraries (F<libfoo.so.x.y>) are to be ignored (because they
cannot be linked against).

=item C<inc_version_list>

From F<inc_version_list.U>:

This variable specifies the list of subdirectories in over
which F<perl.c>:incpush() and F<lib/lib.pm> will automatically
search when adding directories to @C<INC>.  The elements in
the list are separated by spaces.  This is only useful
if you have a perl library directory tree structured like the
default one.  See C<INSTALL> for how this works.  The versioned
site_perl directory was introduced in 5.005, so that is the
lowest possible value.

This list includes architecture-dependent directories back to
version $api_versionstring (e.g. 5.5.640) and
architecture-independent directories all the way back to
5.005.

=item C<inc_version_list_init>

From F<inc_version_list.U>:

This variable holds the same list as inc_version_list, but
each item is enclosed in double quotes and separated by commas,
suitable for use in the C<PERL_INC_VERSION_LIST> initialization.

=item C<incpath>

From F<usrinc.U>:

This variable must precede the normal include path to get the
right one, as in F<$incpath/usr/include> or F<$incpath/usr/lib>.
Value can be "" or F</bsd43> on mips.

=item C<incpth>

From F<libpth.U>:

This variable must precede the normal include path to get the
right one, as in F<$incpath/usr/include> or F<$incpath/usr/lib>.
Value can be "" or F</bsd43> on mips.

=item C<inews>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<initialinstalllocation>

From F<bin.U>:

When userelocatableinc is true, this variable holds the location
that make install should copy the perl binary to, with all the
run-time relocatable paths calculated from this at install time.
When used, it is initialized to the original value of binexp, and
then binexp is set to F<.../>, as the other binaries are found
relative to the perl binary.

=item C<installarchlib>

From F<archlib.U>:

This variable is really the same as archlibexp but may differ on
those systems using C<AFS>. For extra portability, only this variable
should be used in makefiles.

=item C<installbin>

From F<bin.U>:

This variable is the same as binexp unless C<AFS> is running in which case
the user is explicitly prompted for it. This variable should always
be used in your makefiles for maximum portability.

=item C<installhtml1dir>

From F<html1dir.U>:

This variable is really the same as html1direxp, unless you are
using a different installprefix.  For extra portability, you
should only use this variable within your makefiles.

=item C<installhtml3dir>

From F<html3dir.U>:

This variable is really the same as html3direxp, unless you are
using a different installprefix.  For extra portability, you
should only use this variable within your makefiles.

=item C<installman1dir>

From F<man1dir.U>:

This variable is really the same as man1direxp, unless you are using
C<AFS> in which case it points to the read/write location whereas
man1direxp only points to the read-only access location. For extra
portability, you should only use this variable within your makefiles.

=item C<installman3dir>

From F<man3dir.U>:

This variable is really the same as man3direxp, unless you are using
C<AFS> in which case it points to the read/write location whereas
man3direxp only points to the read-only access location. For extra
portability, you should only use this variable within your makefiles.

=item C<installprefix>

From F<installprefix.U>:

This variable holds the name of the directory below which
"make install" will install the package.  For most users, this
is the same as prefix.  However, it is useful for
installing the software into a different (usually temporary)
location after which it can be bundled up and moved somehow
to the final location specified by prefix.

=item C<installprefixexp>

From F<installprefix.U>:

This variable holds the full absolute path of installprefix
with all F<~>-expansion done.

=item C<installprivlib>

From F<privlib.U>:

This variable is really the same as privlibexp but may differ on
those systems using C<AFS>. For extra portability, only this variable
should be used in makefiles.

=item C<installscript>

From F<scriptdir.U>:

This variable is usually the same as scriptdirexp, unless you are on
a system running C<AFS>, in which case they may differ slightly. You
should always use this variable within your makefiles for portability.

=item C<installsitearch>

From F<sitearch.U>:

This variable is really the same as sitearchexp but may differ on
those systems using C<AFS>. For extra portability, only this variable
should be used in makefiles.

=item C<installsitebin>

From F<sitebin.U>:

This variable is usually the same as sitebinexp, unless you are on
a system running C<AFS>, in which case they may differ slightly. You
should always use this variable within your makefiles for portability.

=item C<installsitehtml1dir>

From F<sitehtml1dir.U>:

This variable is really the same as sitehtml1direxp, unless you are using
C<AFS> in which case it points to the read/write location whereas
html1direxp only points to the read-only access location. For extra
portability, you should only use this variable within your makefiles.

=item C<installsitehtml3dir>

From F<sitehtml3dir.U>:

This variable is really the same as sitehtml3direxp, unless you are using
C<AFS> in which case it points to the read/write location whereas
html3direxp only points to the read-only access location. For extra
portability, you should only use this variable within your makefiles.

=item C<installsitelib>

From F<sitelib.U>:

This variable is really the same as sitelibexp but may differ on
those systems using C<AFS>. For extra portability, only this variable
should be used in makefiles.

=item C<installsiteman1dir>

From F<siteman1dir.U>:

This variable is really the same as siteman1direxp, unless you are using
C<AFS> in which case it points to the read/write location whereas
man1direxp only points to the read-only access location. For extra
portability, you should only use this variable within your makefiles.

=item C<installsiteman3dir>

From F<siteman3dir.U>:

This variable is really the same as siteman3direxp, unless you are using
C<AFS> in which case it points to the read/write location whereas
man3direxp only points to the read-only access location. For extra
portability, you should only use this variable within your makefiles.

=item C<installsitescript>

From F<sitescript.U>:

This variable is usually the same as sitescriptexp, unless you are on
a system running C<AFS>, in which case they may differ slightly. You
should always use this variable within your makefiles for portability.

=item C<installstyle>

From F<installstyle.U>:

This variable describes the C<style> of the perl installation.
This is intended to be useful for tools that need to
manipulate entire perl distributions.  Perl itself doesn't use
this to find its libraries -- the library directories are
stored directly in F<Config.pm>.  Currently, there are only two
styles:  C<lib> and F<lib/perl5>.  The default library locations
(e.g. privlib, sitelib) are either F<$prefix/lib> or
F<$prefix/lib/perl5>.  The former is useful if $prefix is a
directory dedicated to perl (e.g. F</opt/perl>), while the latter
is useful if $prefix is shared by many packages, e.g. if
$prefix=F</usr/local>.

Unfortunately, while this C<style> variable is used to set
defaults for all three directory hierarchies (core, vendor, and
site), there is no guarantee that the same style is actually
appropriate for all those directories.  For example, $prefix
might be F</opt/perl>, but $siteprefix might be F</usr/local>.
(Perhaps, in retrospect, the C<lib> style should never have been
supported, but it did seem like a nice idea at the time.)

The situation is even less clear for tools such as MakeMaker
that can be used to install additional modules into
non-standard places.  For example, if a user intends to install
a module into a private directory (perhaps by setting C<PREFIX> on
the F<Makefile.PL> command line), then there is no reason to
assume that the Configure-time $installstyle setting will be
relevant for that C<PREFIX>.

This may later be extended to include other information, so
be careful with pattern-matching on the results.

For compatibility with F<perl5.005> and earlier, the default
setting is based on whether or not $prefix contains the string
C<perl>.

=item C<installusrbinperl>

From F<instubperl.U>:

This variable tells whether Perl should be installed also as
F</usr/bin/perl> in addition to
F<$installbin/perl>

=item C<installvendorarch>

From F<vendorarch.U>:

This variable is really the same as vendorarchexp but may differ on
those systems using C<AFS>. For extra portability, only this variable
should be used in makefiles.

=item C<installvendorbin>

From F<vendorbin.U>:

This variable is really the same as vendorbinexp but may differ on
those systems using C<AFS>. For extra portability, only this variable
should be used in makefiles.

=item C<installvendorhtml1dir>

From F<vendorhtml1dir.U>:

This variable is really the same as vendorhtml1direxp but may differ on
those systems using C<AFS>. For extra portability, only this variable
should be used in makefiles.

=item C<installvendorhtml3dir>

From F<vendorhtml3dir.U>:

This variable is really the same as vendorhtml3direxp but may differ on
those systems using C<AFS>. For extra portability, only this variable
should be used in makefiles.

=item C<installvendorlib>

From F<vendorlib.U>:

This variable is really the same as vendorlibexp but may differ on
those systems using C<AFS>. For extra portability, only this variable
should be used in makefiles.

=item C<installvendorman1dir>

From F<vendorman1dir.U>:

This variable is really the same as vendorman1direxp but may differ on
those systems using C<AFS>. For extra portability, only this variable
should be used in makefiles.

=item C<installvendorman3dir>

From F<vendorman3dir.U>:

This variable is really the same as vendorman3direxp but may differ on
those systems using C<AFS>. For extra portability, only this variable
should be used in makefiles.

=item C<installvendorscript>

From F<vendorscript.U>:

This variable is really the same as vendorscriptexp but may differ on
those systems using C<AFS>. For extra portability, only this variable
should be used in makefiles.

=item C<intsize>

From F<intsize.U>:

This variable contains the value of the C<INTSIZE> symbol, which
indicates to the C program how many bytes there are in an int.

=item C<issymlink>

From F<issymlink.U>:

This variable holds the test command to test for a symbolic link
(if they are supported).  Typical values include C<test -h> and
C<test -L>.

=item C<ivdformat>

From F<perlxvf.U>:

This variable contains the format string used for printing
a Perl C<IV> as a signed decimal integer.

=item C<ivsize>

From F<perlxv.U>:

This variable is the size of an C<IV> in bytes.

=item C<ivtype>

From F<perlxv.U>:

This variable contains the C type used for Perl's C<IV>.

=back

=head2 k

=over 4

=item C<known_extensions>

From F<Extensions.U>:

This variable holds a list of all extensions (both C<XS> and non-xs)
included in the package source distribution.  This information is
only really of use during the Perl build, as the list makes no
distinction between extensions which were build and installed, and
those which where not.  See C<extensions> for the list of extensions
actually built and available.

=item C<ksh>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=back

=head2 l

=over 4

=item C<ld>

From F<dlsrc.U>:

This variable indicates the program to be used to link
libraries for dynamic loading.  On some systems, it is C<ld>.
On C<ELF> systems, it should be $cc.  Mostly, we'll try to respect
the hint file setting.

=item C<ld_can_script>

From F<dlsrc.U>:

This variable shows if the loader accepts scripts in the form of
-Wl,--version-script=F<ld.script>. This is currently only supported
for C<GNU> ld on C<ELF> in dynamic loading builds.

=item C<lddlflags>

From F<dlsrc.U>:

This variable contains any special flags that might need to be
passed to $ld to create a shared library suitable for dynamic
loading.  It is up to the makefile to use it.  For hpux, it
should be C<-b>.  For sunos 4.1, it is empty.

=item C<ldflags>

From F<ccflags.U>:

This variable contains any additional C loader flags desired by
the user.  It is up to the Makefile to use this.

=item C<ldflags_uselargefiles>

From F<uselfs.U>:

This variable contains the loader flags needed by large file builds
and added to ldflags by hints files.

=item C<ldlibpthname>

From F<libperl.U>:

This variable holds the name of the shared library
search path, often C<LD_LIBRARY_PATH>.  To get an empty
string, the hints file must set this to C<none>.

=item C<less>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the less program.  After Configure runs,
the value is reset to a plain C<less> and is not useful.

=item C<lib_ext>

From F<Unix.U>:

This is an old synonym for _a.

=item C<libc>

From F<libc.U>:

This variable contains the location of the C library.

=item C<libperl>

From F<libperl.U>:

The perl executable is obtained by linking F<perlmain.c> with
libperl, any static extensions (usually just DynaLoader),
and any other libraries needed on this system.  libperl
is usually F<libperl.a>, but can also be F<libperl.so.xxx> if
the user wishes to build a perl executable with a shared
library.

=item C<libpth>

From F<libpth.U>:

This variable holds the general path (space-separated) used to find
libraries. It is intended to be used by other units.

=item C<libs>

From F<libs.U>:

This variable holds the additional libraries we want to use.
It is up to the Makefile to deal with it.  The list can be empty.

=item C<libsdirs>

From F<libs.U>:

This variable holds the directory names aka dirnames of the libraries
we found and accepted, duplicates are removed.

=item C<libsfiles>

From F<libs.U>:

This variable holds the filenames aka basenames of the libraries
we found and accepted.

=item C<libsfound>

From F<libs.U>:

This variable holds the full pathnames of the libraries
we found and accepted.

=item C<libspath>

From F<libs.U>:

This variable holds the directory names probed for libraries.

=item C<libswanted>

From F<Myinit.U>:

This variable holds a list of all the libraries we want to
search.  The order is chosen to pick up the c library
ahead of ucb or bsd libraries for SVR4.

=item C<libswanted_uselargefiles>

From F<uselfs.U>:

This variable contains the libraries needed by large file builds
and added to ldflags by hints files.  It is a space separated list
of the library names without the C<lib> prefix or any suffix, just
like F<libswanted.>.

=item C<line>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<lint>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<lkflags>

From F<ccflags.U>:

This variable contains any additional C partial linker flags desired by
the user.  It is up to the Makefile to use this.

=item C<ln>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the ln program.  After Configure runs,
the value is reset to a plain C<ln> and is not useful.

=item C<lns>

From F<lns.U>:

This variable holds the name of the command to make
symbolic links (if they are supported).  It can be used
in the Makefile. It is either C<ln -s> or C<ln>

=item C<localtime_r_proto>

From F<d_localtime_r.U>:

This variable encodes the prototype of localtime_r.
It is zero if d_localtime_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_localtime_r
is defined.

=item C<locincpth>

From F<ccflags.U>:

This variable contains a list of additional directories to be
searched by the compiler.  The appropriate C<-I> directives will
be added to ccflags.  This is intended to simplify setting
local directories from the Configure command line.
It's not much, but it parallels the loclibpth stuff in F<libpth.U>.

=item C<loclibpth>

From F<libpth.U>:

This variable holds the paths (space-separated) used to find local
libraries.  It is prepended to libpth, and is intended to be easily
set from the command line.

=item C<longdblinfbytes>

From F<infnan.U>:

This variable contains comma-separated list of hexadecimal bytes
for the long double precision infinity.

=item C<longdblkind>

From F<d_longdbl.U>:

This variable, if defined, encodes the type of a long double:
0 = double,
1 = C<IEEE> 754 128-bit little endian,
2 = C<IEEE> 754 128-bit big endian,
3 = x86 80-bit little endian,
4 = x86 80-bit big endian,
5 = double-double 128-bit little endian,
6 = double-double 128-bit big endian,
7 = 128-bit mixed-endian double-double (64-bit LEs in C<BE>),
8 = 128-bit mixed-endian double-double (64-bit BEs in C<LE>),
9 = 128-bit C<PDP>-style mixed-endian long doubles,
-1 = unknown format.

=item C<longdblmantbits>

From F<mantbits.U>:

This symbol, if defined, tells how many mantissa bits
there are in long double precision floating point format.
Note that this can be C<LDBL_MANT_DIG> minus one,
since C<LDBL_MANT_DIG> can include the C<IEEE> 754 implicit bit.
The common x86-style 80-bit long double does not have
an implicit bit.

=item C<longdblnanbytes>

From F<infnan.U>:

This variable contains comma-separated list of hexadecimal bytes
for the long double precision not-a-number.

=item C<longdblsize>

From F<d_longdbl.U>:

This variable contains the value of the C<LONG_DOUBLESIZE> symbol, which
indicates to the C program how many bytes there are in a long double,
if this system supports long doubles.  Note that this is
sizeof(long double), which may include unused bytes.

=item C<longlongsize>

From F<d_longlong.U>:

This variable contains the value of the C<LONGLONGSIZE> symbol, which
indicates to the C program how many bytes there are in a long long,
if this system supports long long.

=item C<longsize>

From F<intsize.U>:

This variable contains the value of the C<LONGSIZE> symbol, which
indicates to the C program how many bytes there are in a long.

=item C<lp>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<lpr>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<ls>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the ls program.  After Configure runs,
the value is reset to a plain C<ls> and is not useful.

=item C<lseeksize>

From F<lseektype.U>:

This variable defines lseektype to be something like off_t, long,
or whatever type is used to declare lseek offset's type in the
kernel (which also appears to be lseek's return type).

=item C<lseektype>

From F<lseektype.U>:

This variable defines lseektype to be something like off_t, long,
