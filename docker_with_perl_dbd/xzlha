What happens if I add or remove keys from a hash while iterating over it?

=item *

How do I look up a hash element by value?

=item *

How can I know how many entries are in a hash?

=item *

How do I sort a hash (optionally by value instead of key)?

=item *

How can I always keep my hash sorted?

=item *

What's the difference between "delete" and "undef" with hashes?

=item *

Why don't my tied hashes make the defined/exists distinction?

=item *

How do I reset an each() operation part-way through?

=item *

How can I get the unique keys from two hashes?

=item *

How can I store a multidimensional array in a DBM file?

=item *

How can I make my hash remember the order I put elements into it?

=item *

Why does passing a subroutine an undefined element in a hash create it?

=item *

How can I make the Perl equivalent of a C structure/C++ class/hash or array of hashes or arrays?

=item *

How can I use a reference as a hash key?

=item *

How can I check if a key exists in a multilevel hash?

=item *

How can I prevent addition of unwanted keys into a hash?

=item *

How do I handle binary data correctly?

=item *

How do I determine whether a scalar is a number/whole/integer/float?

=item *

How do I keep persistent data across program calls?

=item *

How do I print out or copy a recursive data structure?

=item *

How do I define methods for every class/object?

=item *

How do I verify a credit card checksum?

=item *

How do I pack arrays of doubles or floats for XS code?

=back


=head2 L<perlfaq5>: Files and Formats

This section deals with I/O and the "f" issues: filehandles, flushing, formats, and footers.

=over 4

=item *

How do I flush/unbuffer an output filehandle? Why must I do this?

=item *

How do I change, delete, or insert a line in a file, or append to the beginning of a file?

=item *

How do I count the number of lines in a file?

=item *

How do I delete the last N lines from a file?

=item *

How can I use Perl's C<-i> option from within a program?

=item *

How can I copy a file?

=item *

How do I make a temporary file name?

=item *

How can I manipulate fixed-record-length files?

=item *

How can I make a filehandle local to a subroutine? How do I pass filehandles between subroutines? How do I make an array of filehandles?

=item *

How can I use a filehandle indirectly?

=item *

How can I open a filehandle to a string?

=item *

How can I set up a footer format to be used with write()?

=item *

How can I write() into a string?

=item *

How can I output my numbers with commas added?

=item *

How can I translate tildes (~) in a filename?

=item *

When I open a file read-write, why does it wipe it out?

=item *

Why do I sometimes get an "Argument list too long" when I use E<lt>*E<gt>?

=item *

How can I open a file named with a leading "E<gt>" or trailing blanks?

=item *

How can I reliably rename a file?

=item *

How can I lock a file?

=item *

Why can't I just open(FH, "E<gt>file.lock")?

=item *

I still don't get locking. I just want to increment the number in the file. How can I do this?

=item *

All I want to do is append a small amount of text to the end of a file. Do I still have to use locking?

=item *

How do I randomly update a binary file?

=item *

How do I get a file's timestamp in perl?

=item *

How do I set a file's timestamp in perl?

=item *

How do I print to more than one file at once?

=item *

How can I read in an entire file all at once?

=item *

How can I read in a file by paragraphs?

=item *

How can I read a single character from a file? From the keyboard?

=item *

How can I tell whether there's a character waiting on a filehandle?

=item *

How do I do a C<tail -f> in perl?

=item *

How do I dup() a filehandle in Perl?

=item *

How do I close a file descriptor by number?

=item *

Why can't I use "C:\temp\foo" in DOS paths? Why doesn't `C:\temp\foo.exe` work?

=item *

Why doesn't glob("*.*") get all the files?

=item *

Why does Perl let me delete read-only files? Why does C<-i> clobber protected files? Isn't this a bug in Perl?

=item *

How do I select a random line from a file?

=item *

Why do I get weird spaces when I print an array of lines?

=item *

How do I traverse a directory tree?

=item *

How do I delete a directory tree?

=item *

How do I copy an entire directory?

=back


=head2 L<perlfaq6>: Regular Expressions

This section is surprisingly small because the rest of the FAQ is littered with answers involving regular expressions. For example, decoding a URL and checking whether something is a number can be handled with regular expressions, but those answers are found elsewhere in this document (in perlfaq9 : "How do I decode or create those %-encodings on the web" and perlfaq4 : "How do I determine whether a scalar is a number/whole/integer/float", to be precise).

=over 4

=item *

How can I hope to use regular expressions without creating illegible and unmaintainable code?

=item *

I'm having trouble matching over more than one line. What's wrong?

=item *

How can I pull out lines between two patterns that are themselves on different lines?

=item *

How do I match XML, HTML, or other nasty, ugly things with a regex?

=item *

I put a regular expression into $/ but it didn't work. What's wrong?

=item *

How do I substitute case-insensitively on the LHS while preserving case on the RHS?

=item *

How can I make C<\w> match national character sets?

=item *

How can I match a locale-smart version of C</[a-zA-Z]/> ?

=item *

How can I quote a variable to use in a regex?

=item *

What is C</o> really for?

=item *

How do I use a regular expression to strip C-style comments from a file?

=item *

Can I use Perl regular expressions to match balanced text?

=item *

What does it mean that regexes are greedy? How can I get around it?

=item *

How do I process each word on each line?

=item *

How can I print out a word-frequency or line-frequency summary?

=item *

How can I do approximate matching?

=item *

How do I efficiently match many regular expressions at once?

=item *

Why don't word-boundary searches with C<\b> work for me?

=item *

Why does using $&, $`, or $' slow my program down?

=item *

What good is C<\G> in a regular expression?

=item *

Are Perl regexes DFAs or NFAs? Are they POSIX compliant?

=item *

What's wrong with using grep in a void context?

=item *

How can I match strings with multibyte characters?

=item *

How do I match a regular expression that's in a variable?

=back


=head2 L<perlfaq7>: General Perl Language Issues

This section deals with general Perl language issues that don't clearly fit into any of the other sections.

=over 4

=item *

Can I get a BNF/yacc/RE for the Perl language?

=item *

What are all these $@%&* punctuation signs, and how do I know when to use them?

=item *

Do I always/never have to quote my strings or use semicolons and commas?

=item *

How do I skip some return values?

=item *

How do I temporarily block warnings?

=item *

What's an extension?

=item *

Why do Perl operators have different precedence than C operators?

=item *

How do I declare/create a structure?

=item *

How do I create a module?

=item *

How do I adopt or take over a module already on CPAN?

=item *

How do I create a class?

=item *

How can I tell if a variable is tainted?

=item *

What's a closure?

=item *

What is variable suicide and how can I prevent it?

=item *

How can I pass/return a {Function, FileHandle, Array, Hash, Method, Regex}?

=item *

How do I create a static variable?

=item *

What's the difference between dynamic and lexical (static) scoping? Between local() and my()?

=item *

How can I access a dynamic variable while a similarly named lexical is in scope?

=item *

What's the difference between deep and shallow binding?

=item *

Why doesn't "my($foo) = E<lt>$fhE<gt>;" work right?

=item *

How do I redefine a builtin function, operator, or method?

=item *

What's the difference between calling a function as &foo and foo()?

=item *

How do I create a switch or case statement?

=item *

How can I catch accesses to undefined variables, functions, or methods?

=item *

Why can't a method included in this same file be found?

=item *

How can I find out my current or calling package?

=item *

How can I comment out a large block of Perl code?

=item *

How do I clear a package?

=item *

How can I use a variable as a variable name?

=item *

What does "bad interpreter" mean?

=item *

Do I need to recompile XS modules when there is a change in the C library?

=back


=head2 L<perlfaq8>: System Interaction

This section of the Perl FAQ covers questions involving operating system interaction. Topics include interprocess communication (IPC), control over the user-interface (keyboard, screen and pointing devices), and most anything else not related to data manipulation.

=over 4

=item *

How do I find out which operating system I'm running under?

=item *

Why does exec() not return?

=item *

How do I do fancy stuff with the keyboard/screen/mouse?

=item *

How do I print something out in color?

=item *

How do I read just one key without waiting for a return key?

=item *

How do I check whether input is ready on the keyboard?

=item *

How do I clear the screen?

=item *

How do I get the screen size?

=item *

How do I ask the user for a password?

=item *

How do I read and write the serial port?

=item *

How do I decode encrypted password files?

=item *

How do I start a process in the background?

=item *

How do I trap control characters/signals?

=item *

How do I modify the shadow password file on a Unix system?

=item *

How do I set the time and date?

=item *

How can I sleep() or alarm() for under a second?

=item *

How can I measure time under a second?

=item *

How can I do an atexit() or setjmp()/longjmp()? (Exception handling)

=item *

Why doesn't my sockets program work under System V (Solaris)? What does the error message "Protocol not supported" mean?

=item *

How can I call my system's unique C functions from Perl?

=item *

Where do I get the include files to do ioctl() or syscall()?

=item *

Why do setuid perl scripts complain about kernel problems?

=item *

How can I open a pipe both to and from a command?

=item *

Why can't I get the output of a command with system()?

=item *

How can I capture STDERR from an external command?

=item *

Why doesn't open() return an error when a pipe open fails?

=item *

What's wrong with using backticks in a void context?

=item *

How can I call backticks without shell processing?

=item *

Why can't my script read from STDIN after I gave it EOF (^D on Unix, ^Z on MS-DOS)?

=item *

How can I convert my shell script to perl?

=item *

Can I use perl to run a telnet or ftp session?

=item *

How can I write expect in Perl?

=item *

Is there a way to hide perl's command line from programs such as "ps"?

=item *

I {changed directory, modified my environment} in a perl script. How come the change disappeared when I exited the script? How do I get my changes to be visible?

=item *

How do I close a process's filehandle without waiting for it to complete?

=item *

How do I fork a daemon process?

=item *

How do I find out if I'm running interactively or not?

=item *

How do I timeout a slow event?

=item *

How do I set CPU limits?

=item *

How do I avoid zombies on a Unix system?

=item *

How do I use an SQL database?

=item *

How do I make a system() exit on control-C?

=item *

How do I open a file without blocking?

=item *

How do I tell the difference between errors from the shell and perl?

=item *

How do I install a module from CPAN?

=item *

What's the difference between require and use?

=item *

How do I keep my own module/library directory?

=item *

How do I add the directory my program lives in to the module/library search path?

=item *

How do I add a directory to my include path (@INC) at runtime?

=item *

Where are modules installed?

=item *

What is socket.ph and where do I get it?

=back


=head2 L<perlfaq9>: Web, Email and Networking

This section deals with questions related to running web sites, sending and receiving email as well as general networking.

=over 4

=item *

Should I use a web framework?

=item *

Which web framework should I use?

=item *

What is Plack and PSGI?

=item *

How do I remove HTML from a string?

=item *

How do I extract URLs?

=item *

How do I fetch an HTML file?

=item *

How do I automate an HTML form submission?

=item *

How do I decode or create those %-encodings on the web?

=item *

How do I redirect to another page?

=item *

How do I put a password on my web pages?

=item *

How do I make sure users can't enter values into a form that causes my CGI script to do bad things?

=item *

How do I parse a mail header?

=item *

How do I check a valid mail address?

=item *

How do I decode a MIME/BASE64 string?

=item *

How do I find the user's mail address?

=item *

How do I send email?

=item *

How do I use MIME to make an attachment to a mail message?

=item *

How do I read email?

=item *

How do I find out my hostname, domainname, or IP address?

=item *

How do I fetch/put an (S)FTP file?

=item *

How can I do RPC in Perl?

=back



=head1 CREDITS

Tom Christiansen wrote the original perlfaq then expanded it with the
help of Nat Torkington. brian d foy substantially edited and expanded
the perlfaq. perlfaq-workers and others have also supplied feedback,
patches and corrections over the years.

=head1 AUTHOR AND COPYRIGHT

Tom Christiansen wrote the original version of this document.
brian d foy C<< <bdfoy@cpan.org> >> wrote this version. See the
individual perlfaq documents for additional copyright information.

This document is available under the same terms as Perl itself. Code
examples in all the perlfaq documents are in the public domain. Use
them as you see fit (and at your own risk with no warranty from anyone).
                                                                                                                                                                                                                                                                                                              usr/local/lib/perl5/5.40.0/pod/perlfaq1.pod                                                         0000644 0000000 0000000 00000032241 14714567415 016511  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

perlfaq1 - General Questions About Perl

=head1 VERSION

version 5.20240218

=head1 DESCRIPTION

This section of the FAQ answers very general, high-level questions
about Perl.

=head2 What is Perl?

Perl is a high-level programming language with an eclectic heritage
written by Larry Wall and a cast of thousands.

Perl's process, file, and text manipulation facilities make it
particularly well-suited for tasks involving quick prototyping, system
utilities, software tools, system management tasks, database access,
graphical programming, networking, and web programming.

Perl derives from the ubiquitous C programming language and to a
lesser extent from sed, awk, the Unix shell, and many other tools
and languages.

These strengths make it especially popular with web developers
and system administrators. Mathematicians, geneticists, journalists,
managers and many other people also use Perl.

=head2 Who supports Perl? Who develops it? Why is it free?

The original culture of the pre-populist Internet and the deeply-held
beliefs of Perl's author, Larry Wall, gave rise to the free and open
distribution policy of Perl. Perl is supported by its users. The
core, the standard Perl library, the optional modules, and the
documentation you're reading now were all written by volunteers.

The core development team (known as the Perl Porters)
are a group of highly altruistic individuals committed to
producing better software for free than you could hope to purchase for
money. You may snoop on pending developments via the
L<archives|http://www.nntp.perl.org/group/perl.perl5.porters/>
or you can subscribe to the mailing list by sending
perl5-porters-subscribe@perl.org a subscription request
(an empty message with no subject is fine).

While the GNU project includes Perl in its distributions, there's no
such thing as "GNU Perl". Perl is not produced nor maintained by the
Free Software Foundation. Perl's licensing terms are also more open
than GNU software's tend to be.

You can get commercial support of Perl if you wish, although for most
users the informal support will more than suffice. See the answer to
"Where can I buy a commercial version of Perl?" for more information.

=head2 Which version of Perl should I use?

(contributed by brian d foy with updates from others)

There is often a matter of opinion and taste, and there isn't any one
answer that fits everyone. In general, you want to use either the current
stable release, or the stable release immediately prior to that one.

Beyond that, you have to consider several things and decide which is best
for you.

=over 4

=item *

If things aren't broken, upgrading perl may break them (or at least issue
new warnings).

=item *

The latest versions of perl have more bug fixes.

=item *

The latest versions of perl may contain performance improvements and
features not present in older versions.  There have been many changes
in perl since perl5 was first introduced.

=item *

The Perl community is geared toward supporting the most recent releases,
so you'll have an easier time finding help for those.

=item *

Older versions of perl may have security vulnerabilities, some of which
are serious (see L<perlsec> and search
L<CVEs|https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=Perl> for more
information).

=item *

The latest versions are probably the least deployed and widely tested, so
you may want to wait a few months after their release and see what
problems others have if you are risk averse.

=item *

The immediate, in addition to the current stable release, the previous
stable release is maintained.  See
L<perlpolicy/"MAINTENANCE AND SUPPORT"> for more information.

=item *

There are really two tracks of perl development: a maintenance version
and an experimental version. The maintenance versions are stable, and
have an even number as the minor release (i.e. perl5.24.x, where 24 is the
minor release). The experimental versions may include features that
don't make it into the stable versions, and have an odd number as the
minor release (i.e. perl5.25.x, where 25 is the minor release).

=item *

You can consult L<releases|http://dev.perl.org/perl5> to determine the
current stable release of Perl.

=back

=head2 What is Raku (Perl 6)?

Raku (formerly known as Perl 6) was I<originally> described as the community's
rewrite of Perl, however as the language evolved, it became clear that it is
a separate language, but in the same language family as Perl.

Raku is not intended primarily as a replacement for Perl, but as its
own thing - and libraries exist to allow you to call Perl code from Raku
programs and vice versa.

Contrary to popular belief, Raku and Perl peacefully coexist with one
another. Raku has proven to be a fascinating source of ideas for those
using Perl (the L<Moose> object system is a well-known example). There is
overlap in the communities, and this overlap fosters the tradition of sharing
and borrowing that have been instrumental to Perl's success.

For more about Raku see L<https://www.raku.org/>.

"We're really serious about reinventing everything that needs reinventing."
--Larry Wall

=head2 How stable is Perl?

Production releases, which incorporate bug fixes and new functionality,
are widely tested before release. Since the 5.000 release, we have
averaged about one production release per year.

The Perl development team occasionally make changes to the
internal core of the language, but all possible efforts are made toward
backward compatibility.

=head2 How often are new versions of Perl released?

Recently, the plan has been to release a new version of Perl roughly every
April, but getting the release right is more important than sticking rigidly to
a calendar date, so the release date is somewhat flexible.  The historical
release dates can be viewed at L<http://www.cpan.org/src/README.html>.

Even numbered minor versions (5.14, 5.16, 5.18) are production versions, and
odd numbered minor versions (5.15, 5.17, 5.19) are development versions. Unless
you want to try out an experimental feature, you probably never want to install
a development version of Perl.

The Perl development team are called Perl 5 Porters, and their
