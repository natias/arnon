        ),
        (b'', b'pull', None, _(b'use pull protocol to copy metadata')),
        (b'', b'uncompressed', None, _(b'an alias to --stream (DEPRECATED)')),
        (b'', b'stream', None, _(b'clone with minimal data processing')),
    ]
    + remoteopts,
    _(b'[OPTION]... SOURCE [DEST]'),
    helpcategory=command.CATEGORY_REPO_CREATION,
    helpbasic=True,
    norepo=True,
)
def clone(ui, source, dest=None, **opts):
    """make a copy of an existing repository

    Create a copy of an existing repository in a new directory.

    If no destination directory name is specified, it defaults to the
    basename of the source.

    The location of the source is added to the new repository's
    ``.hg/hgrc`` file, as the default to be used for future pulls.

    Only local paths and ``ssh://`` URLs are supported as
    destinations. For ``ssh://`` destinations, no working directory or
    ``.hg/hgrc`` will be created on the remote side.

    If the source repository has a bookmark called '@' set, that
    revision will be checked out in the new repository by default.

    To check out a particular version, use -u/--update, or
    -U/--noupdate to create a clone with no working directory.

    To pull only a subset of changesets, specify one or more revisions
    identifiers with -r/--rev or branches with -b/--branch. The
    resulting clone will contain only the specified changesets and
    their ancestors. These options (or 'clone src#rev dest') imply
    --pull, even for local source repositories.

    In normal clone mode, the remote normalizes repository data into a common
    exchange format and the receiving end translates this data into its local
    storage format. --stream activates a different clone mode that essentially
    copies repository files from the remote with minimal data processing. This
    significantly reduces the CPU cost of a clone both remotely and locally.
    However, it often increases the transferred data size by 30-40%. This can
    result in substantially faster clones where I/O throughput is plentiful,
    especially for larger repositories. A side-effect of --stream clones is
    that storage settings and requirements on the remote are applied locally:
    a modern client may inherit legacy or inefficient storage used by the
    remote or a legacy Mercurial client may not be able to clone from a
    modern Mercurial remote.

    .. note::

       Specifying a tag will include the tagged changeset but not the
       changeset containing the tag.

    .. container:: verbose

      For efficiency, hardlinks are used for cloning whenever the
      source and destination are on the same filesystem (note this
      applies only to the repository data, not to the working
      directory). Some filesystems, such as AFS, implement hardlinking
      incorrectly, but do not report errors. In these cases, use the
      --pull option to avoid hardlinking.

      Mercurial will update the working directory to the first applicable
      revision from this list:

      a) null if -U or the source repository has no changesets
      b) if -u . and the source repository is local, the first parent of
         the source repository's working directory
      c) the changeset specified with -u (if a branch name, this means the
         latest head of that branch)
      d) the changeset specified with -r
      e) the tipmost head specified with -b
      f) the tipmost head specified with the url#branch source syntax
      g) the revision marked with the '@' bookmark, if present
      h) the tipmost head of the default branch
      i) tip

      When cloning from servers that support it, Mercurial may fetch
      pre-generated data from a server-advertised URL or inline from the
      same stream. When this is done, hooks operating on incoming changesets
      and changegroups may fire more than once, once for each pre-generated
      bundle and as well as for any additional remaining data. In addition,
      if an error occurs, the repository may be rolled back to a partial
      clone. This behavior may change in future releases.
      See :hg:`help -e clonebundles` for more.

      Examples:

      - clone a remote repository to a new directory named hg/::

          hg clone https://www.mercurial-scm.org/repo/hg/

      - create a lightweight local clone::

          hg clone project/ project-feature/

      - clone from an absolute path on an ssh server (note double-slash)::

          hg clone ssh://user@server//home/projects/alpha/

      - do a streaming clone while checking out a specified version::

          hg clone --stream http://server/repo -u 1.5

      - create a repository without changesets after a particular revision::

          hg clone -r 04e544 experimental/ good/

      - clone (and track) a particular named branch::

          hg clone https://www.mercurial-scm.org/repo/hg/#stable

    See :hg:`help urls` for details on specifying URLs.

    Returns 0 on success.
    """
    opts = pycompat.byteskwargs(opts)
    cmdutil.check_at_most_one_arg(opts, b'noupdate', b'updaterev')

    # --include/--exclude can come from narrow or sparse.
    includepats, excludepats = None, None

    # hg.clone() differentiates between None and an empty set. So make sure
    # patterns are sets if narrow is requested without patterns.
    if opts.get(b'narrow'):
        includepats = set()
        excludepats = set()

        if opts.get(b'include'):
            includepats = narrowspec.parsepatterns(opts.get(b'include'))
        if opts.get(b'exclude'):
            excludepats = narrowspec.parsepatterns(opts.get(b'exclude'))

    r = hg.clone(
        ui,
        opts,
        source,
        dest,
        pull=opts.get(b'pull'),
        stream=opts.get(b'stream') or opts.get(b'uncompressed'),
        revs=opts.get(b'rev'),
        update=opts.get(b'updaterev') or not opts.get(b'noupdate'),
        branch=opts.get(b'branch'),
        shareopts=opts.get(b'shareopts'),
        storeincludepats=includepats,
        storeexcludepats=excludepats,
        depth=opts.get(b'depth') or None,
    )

    return r is None


@command(
    b'commit|ci',
    [
        (
            b'A',
            b'addremove',
            None,
            _(b'mark new/missing files as added/removed before committing'),
        ),
        (b'', b'close-branch', None, _(b'mark a branch head as closed')),
        (b'', b'amend', None, _(b'amend the parent of the working directory')),
        (b's', b'secret', None, _(b'use the secret phase for committing')),
        (b'e', b'edit', None, _(b'invoke editor on commit messages')),
        (
            b'',
            b'force-close-branch',
            None,
            _(b'forcibly close branch from a non-head changeset (ADVANCED)'),
        ),
        (b'i', b'interactive', None, _(b'use interactive mode')),
    ]
    + walkopts
    + commitopts
    + commitopts2
    + subrepoopts,
    _(b'[OPTION]... [FILE]...'),
    helpcategory=command.CATEGORY_COMMITTING,
    helpbasic=True,
    inferrepo=True,
)
def commit(ui, repo, *pats, **opts):
    """commit the specified files or all outstanding changes

    Commit changes to the given files into the repository. Unlike a
    centralized SCM, this operation is a local operation. See
    :hg:`push` for a way to actively distribute your changes.

    If a list of files is omitted, all changes reported by :hg:`status`
    will be committed.

    If you are committing the result of a merge, do not provide any
    filenames or -I/-X filters.

    If no commit message is specified, Mercurial starts your
    configured editor where you can enter a message. In case your
    commit fails, you will find a backup of your message in
    ``.hg/last-message.txt``.

    The --close-branch flag can be used to mark the current branch
    head closed. When all heads of a branch are closed, the branch
    will be considered closed and no longer listed.

    The --amend flag can be used to amend the parent of the
    working directory with a new commit that contains the changes
    in the parent in addition to those currently reported by :hg:`status`,
    if there are any. The old commit is stored in a backup bundle in
    ``.hg/strip-backup`` (see :hg:`help bundle` and :hg:`help unbundle`
    on how to restore it).

    Message, user and date are taken from the amended commit unless
    specified. When a message isn't specified on the command line,
    the editor will open with the message of the amended commit.

    It is not possible to amend public changesets (see :hg:`help phases`)
    or changesets that have children.

    See :hg:`help dates` for a list of formats valid for -d/--date.

    Returns 0 on success, 1 if nothing changed.

    .. container:: verbose

      Examples:

      - commit all files ending in .py::

          hg commit --include "set:**.py"

      - commit all non-binary files::

          hg commit --exclude "set:binary()"

      - amend the current commit and set the date to now::

          hg commit --amend --date now
    """
    with repo.wlock(), repo.lock():
        return _docommit(ui, repo, *pats, **opts)


def _docommit(ui, repo, *pats, **opts):
    if opts.get('interactive'):
        opts.pop('interactive')
        ret = cmdutil.dorecord(
            ui, repo, commit, None, False, cmdutil.recordfilter, *pats, **opts
        )
        # ret can be 0 (no changes to record) or the value returned by
        # commit(), 1 if nothing changed or None on success.
        return 1 if ret == 0 else ret

    if opts.get('subrepos'):
        cmdutil.check_incompatible_arguments(opts, 'subrepos', ['amend'])
        # Let --subrepos on the command line override config setting.
        ui.setconfig(b'ui', b'commitsubrepos', True, b'commit')

    cmdutil.checkunfinished(repo, commit=True)

    branch = repo[None].branch()
    bheads = repo.branchheads(branch)
    tip = repo.changelog.tip()

    extra = {}
    if opts.get('close_branch') or opts.get('force_close_branch'):
        extra[b'close'] = b'1'

        if repo[b'.'].closesbranch():
            # Not ideal, but let us do an extra status early to prevent early
            # bail out.
            matcher = scmutil.match(
                repo[None], pats, pycompat.byteskwargs(opts)
            )
            s = repo.status(match=matcher)
            if s.modified or s.added or s.removed:
                bheads = repo.branchheads(branch, closed=True)
            else:
                msg = _(b'current revision is already a branch closing head')
                raise error.InputError(msg)

        if not bheads:
            raise error.InputError(
                _(b'branch "%s" has no heads to close') % branch
            )
        elif (
            branch == repo[b'.'].branch()
            and repo[b'.'].node() not in bheads
            and not opts.get('force_close_branch')
        ):
            hint = _(
                b'use --force-close-branch to close branch from a non-head'
                b' changeset'
            )
            raise error.InputError(_(b'can only close branch heads'), hint=hint)
        elif opts.get('amend'):
            if (
                repo[b'.'].p1().branch() != branch
                and repo[b'.'].p2().branch() != branch
            ):
                raise error.InputError(_(b'can only close branch heads'))

    if opts.get('amend'):
        if ui.configbool(b'ui', b'commitsubrepos'):
            raise error.InputError(
                _(b'cannot amend with ui.commitsubrepos enabled')
            )

        old = repo[b'.']
        rewriteutil.precheck(repo, [old.rev()], b'amend')

        # Currently histedit gets confused if an amend happens while histedit
        # is in progress. Since we have a checkunfinished command, we are
        # temporarily honoring it.
        #
        # Note: eventually this guard will be removed. Please do not expect
        # this behavior to remain.
        if not obsolete.isenabled(repo, obsolete.createmarkersopt):
            cmdutil.checkunfinished(repo)

        node = cmdutil.amend(ui, repo, old, extra, pats, opts)
        opts = pycompat.byteskwargs(opts)
        if node == old.node():
            ui.status(_(b"nothing changed\n"))
            return 1
    else:

        def commitfunc(ui, repo, message, match, opts):
            overrides = {}
            if opts.get(b'secret'):
                overrides[(b'phases', b'new-commit')] = b'secret'

            baseui = repo.baseui
            with baseui.configoverride(overrides, b'commit'):
                with ui.configoverride(overrides, b'commit'):
                    editform = cmdutil.mergeeditform(
                        repo[None], b'commit.normal'
                    )
                    editor = cmdutil.getcommiteditor(
                        editform=editform, **pycompat.strkwargs(opts)
                    )
                    return repo.commit(
                        message,
                        opts.get(b'user'),
                        opts.get(b'date'),
                        match,
                        editor=editor,
                        extra=extra,
                    )

        opts = pycompat.byteskwargs(opts)
        node = cmdutil.commit(ui, repo, commitfunc, pats, opts)

        if not node:
            stat = cmdutil.postcommitstatus(repo, pats, opts)
            if stat.deleted:
                ui.status(
                    _(
                        b"nothing changed (%d missing files, see "
                        b"'hg status')\n"
                    )
                    % len(stat.deleted)
                )
            else:
                ui.status(_(b"nothing changed\n"))
            return 1

    cmdutil.commitstatus(repo, node, branch, bheads, tip, opts)

    if not ui.quiet and ui.configbool(b'commands', b'commit.post-status'):
        status(
            ui,
            repo,
            modified=True,
            added=True,
            removed=True,
            deleted=True,
            unknown=True,
            subrepos=opts.get(b'subrepos'),
        )


@command(
    b'config|showconfig|debugconfig',
    [
        (b'u', b'untrusted', None, _(b'show untrusted configuration options')),
        # This is experimental because we need
        # * reasonable behavior around aliases,
        # * decide if we display [debug] [experimental] and [devel] section par
        #   default
        # * some way to display "generic" config entry (the one matching
        #   regexp,
        # * proper display of the different value type
        # * a better way to handle <DYNAMIC> values (and variable types),
        # * maybe some type information ?
        (
            b'',
            b'exp-all-known',
            None,
            _(b'show all known config option (EXPERIMENTAL)'),
        ),
        (b'e', b'edit', None, _(b'edit user config')),
        (b'l', b'local', None, _(b'edit repository config')),
        (b'', b'source', None, _(b'show source of configuration value')),
        (
            b'',
            b'shared',
            None,
            _(b'edit shared source repository config (EXPERIMENTAL)'),
        ),
        (b'', b'non-shared', None, _(b'edit non shared config (EXPERIMENTAL)')),
        (b'g', b'global', None, _(b'edit global config')),
    ]
    + formatteropts,
    _(b'[-u] [NAME]...'),
    helpcategory=command.CATEGORY_HELP,
    optionalrepo=True,
    intents={INTENT_READONLY},
)
def config(ui, repo, *values, **opts):
    """show combined config settings from all hgrc files

    With no arguments, print names and values of all config items.

    With one argument of the form section.name, print just the value
    of that config item.

    With multiple arguments, print names and values of all config
    items with matching section names or section.names.

    With --edit, start an editor on the user-level config file. With
    --global, edit the system-wide config file. With --local, edit the
    repository-level config file.

    With --source, the source (filename and line number) is printed
    for each config item.

    See :hg:`help config` for more information about config files.

    .. container:: verbose

      --non-shared flag is used to edit `.hg/hgrc-not-shared` config file.
      This file is not shared across shares when in share-safe mode.

      Template:

      The following keywords are supported. See also :hg:`help templates`.

      :name:    String. Config name.
      :source:  String. Filename and line number where the item is defined.
      :value:   String. Config value.

      The --shared flag can be used to edit the config file of shared source
      repository. It only works when you have shared using the experimental
      share safe feature.

    Returns 0 on success, 1 if NAME does not exist.

    """

    opts = pycompat.byteskwargs(opts)
    editopts = (b'edit', b'local', b'global', b'shared', b'non_shared')
    if any(opts.get(o) for o in editopts):
        cmdutil.check_at_most_one_arg(opts, *editopts[1:])
        if opts.get(b'local'):
            if not repo:
                raise error.InputError(
                    _(b"can't use --local outside a repository")
                )
            paths = [repo.vfs.join(b'hgrc')]
        elif opts.get(b'global'):
            paths = rcutil.systemrcpath()
        elif opts.get(b'shared'):
            if not repo.shared():
                raise error.InputError(
                    _(b"repository is not shared; can't use --shared")
                )
            if requirements.SHARESAFE_REQUIREMENT not in repo.requirements:
                raise error.InputError(
                    _(
                        b"share safe feature not enabled; "
                        b"unable to edit shared source repository config"
                    )
                )
            paths = [vfsmod.vfs(repo.sharedpath).join(b'hgrc')]
        elif opts.get(b'non_shared'):
            paths = [repo.vfs.join(b'hgrc-not-shared')]
        else:
            paths = rcutil.userrcpath()

        for f in paths:
            if os.path.exists(f):
                break
        else:
            if opts.get(b'global'):
                samplehgrc = uimod.samplehgrcs[b'global']
            elif opts.get(b'local'):
                samplehgrc = uimod.samplehgrcs[b'local']
            else:
                samplehgrc = uimod.samplehgrcs[b'user']

            f = paths[0]
            fp = open(f, b"wb")
            fp.write(util.tonativeeol(samplehgrc))
            fp.close()

        editor = ui.geteditor()
        ui.system(
            b"%s \"%s\"" % (editor, f),
            onerr=error.InputError,
            errprefix=_(b"edit failed"),
            blockedtag=b'config_edit',
        )
        return
    ui.pager(b'config')
    fm = ui.formatter(b'config', opts)
    for t, f in rcutil.rccomponents():
        if t == b'path':
            ui.debug(b'read config from: %s\n' % f)
        elif t == b'resource':
            ui.debug(b'read config from: resource:%s.%s\n' % (f[0], f[1]))
        elif t == b'items':
            # Don't print anything for 'items'.
            pass
        else:
            raise error.ProgrammingError(b'unknown rctype: %s' % t)
    untrusted = bool(opts.get(b'untrusted'))

    selsections = selentries = []
    if values:
        selsections = [v for v in values if b'.' not in v]
        selentries = [v for v in values if b'.' in v]
    uniquesel = len(selentries) == 1 and not selsections
    selsections = set(selsections)
    selentries = set(selentries)

    matched = False
    all_known = opts[b'exp_all_known']
    show_source = ui.debugflag or opts.get(b'source')
    entries = ui.walkconfig(untrusted=untrusted, all_known=all_known)
    for section, name, value in entries:
        source = ui.configsource(section, name, untrusted)
        value = pycompat.bytestr(value)
        defaultvalue = ui.configdefault(section, name)
        if fm.isplain():
            source = source or b'none'
            value = value.replace(b'\n', b'\\n')
        entryname = section + b'.' + name
        if values and not (section in selsections or entryname in selentries):
            continue
        fm.startitem()
        fm.condwrite(show_source, b'source', b'%s: ', source)
        if uniquesel:
            fm.data(name=entryname)
            fm.write(b'value', b'%s\n', value)
        else:
            fm.write(b'name value', b'%s=%s\n', entryname, value)
        if formatter.isprintable(defaultvalue):
            fm.data(defaultvalue=defaultvalue)
        elif isinstance(defaultvalue, list) and all(
            formatter.isprintable(e) for e in defaultvalue
        ):
            fm.data(defaultvalue=fm.formatlist(defaultvalue, name=b'value'))
        # TODO: no idea how to process unsupported defaultvalue types
        matched = True
    fm.end()
    if matched:
        return 0
    return 1


@command(
    b'continue',
    dryrunopts,
    helpcategory=command.CATEGORY_CHANGE_MANAGEMENT,
    helpbasic=True,
)
def continuecmd(ui, repo, **opts):
    """resumes an interrupted operation (EXPERIMENTAL)

    Finishes a multistep operation like graft, histedit, rebase, merge,
    and unshelve if they are in an interrupted state.

    use --dry-run/-n to dry run the command.
    """
    dryrun = opts.get('dry_run')
    contstate = cmdutil.getunfinishedstate(repo)
    if not contstate:
        raise error.StateError(_(b'no operation in progress'))
    if not contstate.continuefunc:
        raise error.StateError(
            (
                _(b"%s in progress but does not support 'hg continue'")
                % (contstate._opname)
            ),
            hint=contstate.continuemsg(),
        )
    if dryrun:
        ui.status(_(b'%s in progress, will be resumed\n') % (contstate._opname))
        return
    return contstate.continuefunc(ui, repo)


@command(
    b'copy|cp',
    [
        (b'', b'forget', None, _(b'unmark a destination file as copied')),
        (b'A', b'after', None, _(b'record a copy that has already occurred')),
        (
            b'',
            b'at-rev',
            b'',
            _(b'(un)mark copies in the given revision (EXPERIMENTAL)'),
            _(b'REV'),
        ),
        (
            b'f',
            b'force',
            None,
            _(b'forcibly copy over an existing managed file'),
        ),
    ]
    + walkopts
    + dryrunopts,
    _(b'[OPTION]... (SOURCE... DEST | --forget DEST...)'),
    helpcategory=command.CATEGORY_FILE_CONTENTS,
)
def copy(ui, repo, *pats, **opts):
    """mark files as copied for the next commit

    Mark dest as having copies of source files. If dest is a
    directory, copies are put in that directory. If dest is a file,
    the source must be a single file.

    By default, this command copies the contents of files as they
    exist in the working directory. If invoked with -A/--after, the
    operation is recorded, but no copying is performed.

    To undo marking a destination file as copied, use --forget. With that
    option, all given (positional) arguments are unmarked as copies. The
    destination file(s) will be left in place (still tracked). Note that
    :hg:`copy --forget` behaves the same way as :hg:`rename --forget`.

    This command takes effect with the next commit by default.

    Returns 0 on success, 1 if errors are encountered.
    """
    opts = pycompat.byteskwargs(opts)
    with repo.wlock():
        return cmdutil.copy(ui, repo, pats, opts)


@command(
    b'debugcommands',
    [],
    _(b'[COMMAND]'),
    helpcategory=command.CATEGORY_HELP,
    norepo=True,
)
def debugcommands(ui, cmd=b'', *args):
    """list all available commands and options"""
    for cmd, vals in sorted(table.items()):
        cmd = cmd.split(b'|')[0]
        opts = b', '.join([i[1] for i in vals[1]])
        ui.write(b'%s: %s\n' % (cmd, opts))


@command(
    b'debugcomplete',
    [(b'o', b'options', None, _(b'show the command options'))],
    _(b'[-o] CMD'),
    helpcategory=command.CATEGORY_HELP,
    norepo=True,
)
def debugcomplete(ui, cmd=b'', **opts):
    """returns the completion list associated with the given command"""

    if opts.get('options'):
        options = []
        otables = [globalopts]
        if cmd:
            aliases, entry = cmdutil.findcmd(cmd, table, False)
            otables.append(entry[1])
        for t in otables:
            for o in t:
                if b"(DEPRECATED)" in o[3]:
                    continue
                if o[0]:
                    options.append(b'-%s' % o[0])
                options.append(b'--%s' % o[1])
        ui.write(b"%s\n" % b"\n".join(options))
        return

    cmdlist, unused_allcmds = cmdutil.findpossible(cmd, table)
    if ui.verbose:
        cmdlist = [b' '.join(c[0]) for c in cmdlist.values()]
    ui.write(b"%s\n" % b"\n".join(sorted(cmdlist)))


@command(
    b'diff',
    [
        (b'r', b'rev', [], _(b'revision (DEPRECATED)'), _(b'REV')),
        (b'', b'from', b'', _(b'revision to diff from'), _(b'REV1')),
        (b'', b'to', b'', _(b'revision to diff to'), _(b'REV2')),
        (b'c', b'change', b'', _(b'change made by revision'), _(b'REV')),
    ]
    + diffopts
    + diffopts2
    + walkopts
    + subrepoopts,
    _(b'[OPTION]... ([-c REV] | [--from REV1] [--to REV2]) [FILE]...'),
    helpcategory=command.CATEGORY_FILE_CONTENTS,
    helpbasic=True,
    inferrepo=True,
    intents={INTENT_READONLY},
)
def diff(ui, repo, *pats, **opts):
    """diff repository (or selected files)

    Show differences between revisions for the specified files.

    Differences between files are shown using the unified diff format.

    .. note::

       :hg:`diff` may generate unexpected results for merges, as it will
       default to comparing against the working directory's first
       parent changeset if no revisions are specified.  To diff against the
       conflict regions, you can use `--config diff.merge=yes`.

    By default, the working directory files are compared to its first parent. To
    see the differences from another revision, use --from. To see the difference
    to another revision, use --to. For example, :hg:`diff --from .^` will show
    the differences from the working copy's grandparent to the working copy,
    :hg:`diff --to .` will show the diff from the working copy to its parent
    (i.e. the reverse of the default), and :hg:`diff --from 1.0 --to 1.2` will
    show the diff between those two revisions.

    Alternatively you can specify -c/--change with a revision to see the changes
    in that changeset relative to its first parent (i.e. :hg:`diff -c 42` is
    equivalent to :hg:`diff --from 42^ --to 42`)

    Without the -a/--text option, diff will avoid generating diffs of
    files it detects as binary. With -a, diff will generate a diff
    anyway, probably with undesirable results.

    Use the -g/--git option to generate diffs in the git extended diff
    format. For more information, read :hg:`help diffs`.

    .. container:: verbose

      Examples:

      - compare a file in the current working directory to its parent::

          hg diff foo.c

      - compare two historical versions of a directory, with rename info::

          hg diff --git --from 1.0 --to 1.2 lib/

      - get change stats relative to the last change on some date::

          hg diff --stat --from "date('may 2')"

      - diff all newly-added files that contain a keyword::

          hg diff "set:added() and grep(GNU)"

      - compare a revision and its parents::

          hg diff -c 9353                  # compare against first parent
          hg diff --from 9353^ --to 9353   # same using revset syntax
          hg diff --from 9353^2 --to 9353  # compare against the second parent

    Returns 0 on success.
    """

    cmdutil.check_at_most_one_arg(opts, 'rev', 'change')
    opts = pycompat.byteskwargs(opts)
    revs = opts.get(b'rev')
    change = opts.get(b'change')
    from_rev = opts.get(b'from')
    to_rev = opts.get(b'to')
    stat = opts.get(b'stat')
    reverse = opts.get(b'reverse')

    cmdutil.check_incompatible_arguments(opts, b'from', [b'rev', b'change'])
    cmdutil.check_incompatible_arguments(opts, b'to', [b'rev', b'change'])
    if change:
        repo = scmutil.unhidehashlikerevs(repo, [change], b'nowarn')
        ctx2 = logcmdutil.revsingle(repo, change, None)
        ctx1 = logcmdutil.diff_parent(ctx2)
    elif from_rev or to_rev:
        repo = scmutil.unhidehashlikerevs(
            repo, [from_rev] + [to_rev], b'nowarn'
        )
        ctx1 = logcmdutil.revsingle(repo, from_rev, None)
        ctx2 = logcmdutil.revsingle(repo, to_rev, None)
    else:
        repo = scmutil.unhidehashlikerevs(repo, revs, b'nowarn')
        ctx1, ctx2 = logcmdutil.revpair(repo, revs)

    if reverse:
        ctxleft = ctx2
        ctxright = ctx1
    else:
        ctxleft = ctx1
        ctxright = ctx2

    diffopts = patch.diffallopts(ui, opts)
    m = scmutil.match(ctx2, pats, opts)
    m = repo.narrowmatch(m)
    ui.pager(b'diff')
    logcmdutil.diffordiffstat(
        ui,
        repo,
        diffopts,
        ctxleft,
        ctxright,
        m,
        stat=stat,
        listsubrepos=opts.get(b'subrepos'),
        root=opts.get(b'root'),
    )


@command(
    b'export',
    [
        (
            b'B',
            b'bookmark',
            b'',
            _(b'export changes only reachable by given bookmark'),
            _(b'BOOKMARK'),
        ),
        (
            b'o',
            b'output',
            b'',
            _(b'print output to file with formatted name'),
            _(b'FORMAT'),
        ),
        (b'', b'switch-parent', None, _(b'diff against the second parent')),
        (b'r', b'rev', [], _(b'revisions to export'), _(b'REV')),
    ]
    + diffopts
    + formatteropts,
    _(b'[OPTION]... [-o OUTFILESPEC] [-r] [REV]...'),
    helpcategory=command.CATEGORY_IMPORT_EXPORT,
    helpbasic=True,
    intents={INTENT_READONLY},
)
def export(ui, repo, *changesets, **opts):
    """dump the header and diffs for one or more changesets

    Print the changeset header and diffs for one or more revisions.
    If no revision is given, the parent of the working directory is used.

    The information shown in the changeset header is: author, date,
    branch name (if non-default), changeset hash, parent(s) and commit
    comment.

    .. note::

       :hg:`export` may generate unexpected diff output for merge
       changesets, as it will compare the merge changeset against its
       first parent only.

    Output may be to a file, in which case the name of the file is
    given using a template string. See :hg:`help templates`. In addition
    to the common template keywords, the following formatting rules are
    supported:

    :``%%``: literal "%" character
    :``%H``: changeset hash (40 hexadecimal digits)
    :``%N``: number of patches being generated
    :``%R``: changeset revision number
    :``%b``: basename of the exporting repository
    :``%h``: short-form changeset hash (12 hexadecimal digits)
    :``%m``: first line of the commit message (only alphanumeric characters)
    :``%n``: zero-padded sequence number, starting at 1
    :``%r``: zero-padded changeset revision number
    :``\\``: literal "\\" character

    Without the -a/--text option, export will avoid generating diffs
    of files it detects as binary. With -a, export will generate a
    diff anyway, probably with undesirable results.

    With -B/--bookmark changesets reachable by the given bookmark are
    selected.

    Use the -g/--git option to generate diffs in the git extended diff
    format. See :hg:`help diffs` for more information.

    With the --switch-parent option, the diff will be against the
    second parent. It can be useful to review a merge.

    .. container:: verbose

      Template:

      The following keywords are supported in addition to the common template
      keywords and functions. See also :hg:`help templates`.

      :diff:    String. Diff content.
      :parents: List of strings. Parent nodes of the changeset.

      Examples:

      - use export and import to transplant a bugfix to the current
        branch::

          hg export -r 9353 | hg import -

      - export all the changesets between two revisions to a file with
        rename information::

          hg export --git -r 123:150 > changes.txt

      - split outgoing changes into a series of patches with
        descriptive names::

          hg export -r "outgoing()" -o "%n-%m.patch"

    Returns 0 on success.
    """
    opts = pycompat.byteskwargs(opts)
    bookmark = opts.get(b'bookmark')
    changesets += tuple(opts.get(b'rev', []))

    cmdutil.check_at_most_one_arg(opts, b'rev', b'bookmark')

    if bookmark:
        if bookmark not in repo._bookmarks:
            raise error.InputError(_(b"bookmark '%s' not found") % bookmark)

        revs = scmutil.bookmarkrevs(repo, bookmark)
    else:
        if not changesets:
            changesets = [b'.']

        repo = scmutil.unhidehashlikerevs(repo, changesets, b'nowarn')
        revs = logcmdutil.revrange(repo, changesets)

    if not revs:
        raise error.InputError(_(b"export requires at least one changeset"))
    if len(revs) > 1:
        ui.note(_(b'exporting patches:\n'))
    else:
        ui.note(_(b'exporting patch:\n'))

    fntemplate = opts.get(b'output')
    if cmdutil.isstdiofilename(fntemplate):
        fntemplate = b''

    if fntemplate:
        fm = formatter.nullformatter(ui, b'export', opts)
    else:
        ui.pager(b'export')
        fm = ui.formatter(b'export', opts)
    with fm:
        cmdutil.export(
            repo,
            revs,
            fm,
            fntemplate=fntemplate,
            switch_parent=opts.get(b'switch_parent'),
            opts=patch.diffallopts(ui, opts),
        )


@command(
    b'files',
    [
        (
            b'r',
            b'rev',
            b'',
            _(b'search the repository as it is in REV'),
            _(b'REV'),
        ),
        (
            b'0',
            b'print0',
            None,
            _(b'end filenames with NUL, for use with xargs'),
        ),
    ]
    + walkopts
    + formatteropts
    + subrepoopts,
    _(b'[OPTION]... [FILE]...'),
    helpcategory=command.CATEGORY_WORKING_DIRECTORY,
    intents={INTENT_READONLY},
)
