
 bool  SvAMAGIC(SV * sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvAMAGIC_off>
X<SvAMAGIC_off>

Indicate that C<sv> has overloading (active magic) disabled.

=over 3

 void  SvAMAGIC_off(SV *sv)

=back

=back

=for hackers
Found in file sv_inline.h

=over 4

=item C<SvAMAGIC_on>
X<SvAMAGIC_on>

Indicate that C<sv> has overloading (active magic) enabled.

=over 3

 void  SvAMAGIC_on(SV *sv)

=back

=back

=for hackers
Found in file sv_inline.h

=over 4

=item C<sv_backoff>
X<sv_backoff>

Remove any string offset.  You should normally use the C<SvOOK_off> macro
wrapper instead.

=over 3

 void  sv_backoff(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_bless>
X<sv_bless>

Blesses an SV into a specified package.  The SV must be an RV.  The package
must be designated by its stash (see C<L</gv_stashpv>>).  The reference count
of the SV is unaffected.

=over 3

 SV *  sv_bless(SV * const sv, HV * const stash)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvBoolFlagsOK>
X<SvBoolFlagsOK>

Returns a bool indicating whether the SV has the right flags set such
that it is safe to call C<BOOL_INTERNALS_sv_isbool()> or
C<BOOL_INTERNALS_sv_isbool_true()> or
C<BOOL_INTERNALS_sv_isbool_false()>. Currently equivalent to
C<SvIandPOK(sv)> or C<SvIOK(sv) && SvPOK(sv)>. Serialization may want to
unroll this check. If so you are strongly recommended to add code like
C<assert(SvBoolFlagsOK(sv));> B<before> calling using any of the
BOOL_INTERNALS macros.

=over 3

 U32  SvBoolFlagsOK(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_catpv>

=item C<sv_catpv_flags>

=item C<sv_catpv_mg>

=item C<sv_catpv_nomg>
X<sv_catpv>X<sv_catpv_flags>X<sv_catpv_mg>X<sv_catpv_nomg>

These concatenate the C<NUL>-terminated string C<sstr> onto the end of the
string which is in the SV.
If the SV has the UTF-8 status set, then the bytes appended should be
valid UTF-8.

They differ only in how they handle magic:

C<sv_catpv_mg> performs both 'get' and 'set' magic.

C<sv_catpv> performs only 'get' magic.

C<sv_catpv_nomg> skips all magic.

C<sv_catpv_flags> has an extra C<flags> parameter which allows you to specify
any combination of magic handling (using C<SV_GMAGIC> and/or C<SV_SMAGIC>), and
to also override the UTF-8 handling.  By supplying the C<SV_CATUTF8> flag, the
appended string is forced to be interpreted as UTF-8; by supplying instead the
C<SV_CATBYTES> flag, it will be interpreted as just bytes.  Either the SV or
the string appended will be upgraded to UTF-8 if necessary.

=over 3

 void  sv_catpv      (SV * const dsv, const char *sstr)
 void  sv_catpv_flags(SV *dsv, const char *sstr, const I32 flags)
 void  sv_catpv_mg   (SV * const dsv, const char * const sstr)
 void  sv_catpv_nomg (SV * const dsv, const char *sstr)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_catpvf>

=item C<sv_catpvf_mg>

=item C<sv_catpvf_mg_nocontext>

=item C<sv_catpvf_nocontext>
X<sv_catpvf>X<sv_catpvf_mg>X<sv_catpvf_mg_nocontext>X<sv_catpvf_nocontext>

These process their arguments like C<sprintf>, and append the formatted
output to an SV.  As with C<sv_vcatpvfn>, argument reordering is not supporte
when called with a non-null C-style variable argument list.

If the appended data contains "wide" characters
(including, but not limited to, SVs with a UTF-8 PV formatted with C<%s>,
and characters >255 formatted with C<%c>), the original SV might get
upgraded to UTF-8.

If the original SV was UTF-8, the pattern should be
valid UTF-8; if the original SV was bytes, the pattern should be too.

All perform 'get' magic, but only C<sv_catpvf_mg> and C<sv_catpvf_mg_nocontext>
perform 'set' magic.

C<sv_catpvf_nocontext> and C<sv_catpvf_mg_nocontext> do not take a thread
context (C<aTHX>) parameter, so are used in situations where the caller
doesn't already have the thread context.

NOTE: C<sv_catpvf> must be explicitly called as
C<Perl_sv_catpvf>
with an C<aTHX_> parameter.

NOTE: C<sv_catpvf_mg> must be explicitly called as
C<Perl_sv_catpvf_mg>
with an C<aTHX_> parameter.

=over 3

 void  Perl_sv_catpvf        (pTHX_ SV * const sv,
                              const char * const pat, ...)
 void  Perl_sv_catpvf_mg     (pTHX_ SV * const sv,
                              const char * const pat, ...)
 void  sv_catpvf_mg_nocontext(SV * const sv,
                              const char * const pat, ...)
 void  sv_catpvf_nocontext   (SV * const sv,
                              const char * const pat, ...)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_catpvn>

=item C<sv_catpvn_flags>

=item C<sv_catpvn_mg>

=item C<sv_catpvn_nomg>
X<sv_catpvn>X<sv_catpvn_flags>X<sv_catpvn_mg>X<sv_catpvn_nomg>

These concatenate the C<len> bytes of the string beginning at C<ptr> onto the
end of the string which is in C<dsv>.  The caller must make sure C<ptr>
contains at least C<len> bytes.

For all but C<sv_catpvn_flags>, the string appended is assumed to be valid
UTF-8 if the SV has the UTF-8 status set, and a string of bytes otherwise.

They differ in that:

C<sv_catpvn_mg> performs both 'get' and 'set' magic on C<dsv>.

C<sv_catpvn> performs only 'get' magic.

C<sv_catpvn_nomg> skips all magic.

C<sv_catpvn_flags> has an extra C<flags> parameter which allows you to specify
any combination of magic handling (using C<SV_GMAGIC> and/or C<SV_SMAGIC>) and
to also override the UTF-8 handling.  By supplying the C<SV_CATBYTES> flag, the
appended string is interpreted as plain bytes; by supplying instead the
C<SV_CATUTF8> flag, it will be interpreted as UTF-8, and the C<dsv> will be
upgraded to UTF-8 if necessary.

C<sv_catpvn>, C<sv_catpvn_mg>, and C<sv_catpvn_nomg> are implemented
in terms of C<sv_catpvn_flags>.

=over 3

 void  sv_catpvn      (SV *dsv, const char *sstr, STRLEN len)
 void  sv_catpvn_flags(SV * const dsv, const char *sstr,
                       const STRLEN len, const I32 flags)
 void  sv_catpvn_mg   (SV *dsv, const char *sstr, STRLEN len)
 void  sv_catpvn_nomg (SV *dsv, const char *sstr, STRLEN len)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_catpvs>
X<sv_catpvs>

Like C<sv_catpvn>, but takes a literal string instead of a
string/length pair.

=over 3

 void  sv_catpvs(SV* sv, "literal string")

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<sv_catpvs_flags>
X<sv_catpvs_flags>

Like C<sv_catpvn_flags>, but takes a literal string instead
of a string/length pair.

=over 3

 void  sv_catpvs_flags(SV* sv, "literal string", I32 flags)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<sv_catpvs_mg>
X<sv_catpvs_mg>

Like C<sv_catpvn_mg>, but takes a literal string instead of a
string/length pair.

=over 3

 void  sv_catpvs_mg(SV* sv, "literal string")

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<sv_catpvs_nomg>
X<sv_catpvs_nomg>

Like C<sv_catpvn_nomg>, but takes a literal string instead of
a string/length pair.

=over 3

 void  sv_catpvs_nomg(SV* sv, "literal string")

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<sv_catsv>

=item C<sv_catsv_flags>

=item C<sv_catsv_mg>

=item C<sv_catsv_nomg>
X<sv_catsv>X<sv_catsv_flags>X<sv_catsv_mg>X<sv_catsv_nomg>

These concatenate the string from SV C<sstr> onto the end of the string in SV
C<dsv>.  If C<sstr> is null, these are no-ops; otherwise only C<dsv> is
modified.

They differ only in what magic they perform:

C<sv_catsv_mg> performs 'get' magic on both SVs before the copy, and 'set' magic
on C<dsv> afterwards.

C<sv_catsv> performs just 'get' magic, on both SVs.

C<sv_catsv_nomg> skips all magic.

C<sv_catsv_flags> has an extra C<flags> parameter which allows you to use
C<SV_GMAGIC> and/or C<SV_SMAGIC> to specify any combination of magic handling
(although either both or neither SV will have 'get' magic applied to it.)

C<sv_catsv>, C<sv_catsv_mg>, and C<sv_catsv_nomg> are implemented
in terms of C<sv_catsv_flags>.

=over 3

 void  sv_catsv      (SV *dsv, SV *sstr)
 void  sv_catsv_flags(SV * const dsv, SV * const sstr,
                      const I32 flags)
 void  sv_catsv_mg   (SV *dsv, SV *sstr)
 void  sv_catsv_nomg (SV *dsv, SV *sstr)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SV_CHECK_THINKFIRST>
X<SV_CHECK_THINKFIRST>

Remove any encumbrances from C<sv>, that need to be taken care of before it
is modifiable.  For example if it is Copy on Write (COW), now is the time to
make that copy.

If you know that you are about to change the PV value of C<sv>, instead use
L</C<SV_CHECK_THINKFIRST_COW_DROP>> to avoid the write that would be
immediately written again.

=over 3

 void  SV_CHECK_THINKFIRST(SV * sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SV_CHECK_THINKFIRST_COW_DROP>
X<SV_CHECK_THINKFIRST_COW_DROP>

Call this when you are about to replace the PV value in C<sv>, which is
potentially copy-on-write.  It stops any sharing with other SVs, so that no
Copy on Write (COW) actually happens.  This COW would be useless, as it would
immediately get changed to something else.  This function also removes any
other encumbrances that would be problematic when changing C<sv>.

=over 3

 void  SV_CHECK_THINKFIRST_COW_DROP(SV * sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_chop>
X<sv_chop>

Efficient removal of characters from the beginning of the string buffer.
C<SvPOK(sv)>, or at least C<SvPOKp(sv)>, must be true and C<ptr> must be a
pointer to somewhere inside the string buffer.  C<ptr> becomes the first
character of the adjusted string.  Uses the C<OOK> hack.  On return, only
C<SvPOK(sv)> and C<SvPOKp(sv)> among the C<OK> flags will be true.

Beware: after this function returns, C<ptr> and SvPVX_const(sv) may no longer
refer to the same chunk of data.

The unfortunate similarity of this function's name to that of Perl's C<chop>
operator is strictly coincidental.  This function works from the left;
C<chop> works from the right.

=over 3

 void  sv_chop(SV * const sv, const char * const ptr)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_clear>
X<sv_clear>

Clear an SV: call any destructors, free up any memory used by the body,
and free the body itself.  The SV's head is I<not> freed, although
its type is set to all 1's so that it won't inadvertently be assumed
to be live during global destruction etc.
This function should only be called when C<REFCNT> is zero.  Most of the time
you'll want to call C<SvREFCNT_dec> instead.

=over 3

 void  sv_clear(SV * const orig_sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_cmp>
X<sv_cmp>

Compares the strings in two SVs.  Returns -1, 0, or 1 indicating whether the
string in C<sv1> is less than, equal to, or greater than the string in
C<sv2>.  Is UTF-8 and S<C<'use bytes'>> aware, handles get magic, and will
coerce its args to strings if necessary.  See also C<L</sv_cmp_locale>>.

=over 3

 I32  sv_cmp(SV * const sv1, SV * const sv2)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_cmp_flags>
X<sv_cmp_flags>

Compares the strings in two SVs.  Returns -1, 0, or 1 indicating whether the
string in C<sv1> is less than, equal to, or greater than the string in
C<sv2>.  Is UTF-8 and S<C<'use bytes'>> aware and will coerce its args to strings
if necessary.  If the flags has the C<SV_GMAGIC> bit set, it handles get magic.  See
also C<L</sv_cmp_locale_flags>>.

=over 3

 I32  sv_cmp_flags(SV * const sv1, SV * const sv2, const U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_cmp_locale>
X<sv_cmp_locale>

Compares the strings in two SVs in a locale-aware manner.  Is UTF-8 and
S<C<'use bytes'>> aware, handles get magic, and will coerce its args to strings
if necessary.  See also C<L</sv_cmp>>.

=over 3

 I32  sv_cmp_locale(SV * const sv1, SV * const sv2)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_cmp_locale_flags>
X<sv_cmp_locale_flags>

Compares the strings in two SVs in a locale-aware manner.  Is UTF-8 and
S<C<'use bytes'>> aware and will coerce its args to strings if necessary.  If
the flags contain C<SV_GMAGIC>, it handles get magic.  See also
C<L</sv_cmp_flags>>.

=over 3

 I32  sv_cmp_locale_flags(SV * const sv1, SV * const sv2,
                          const U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_collxfrm>
X<sv_collxfrm>

This calls C<sv_collxfrm_flags> with the SV_GMAGIC flag.  See
C<L</sv_collxfrm_flags>>.

=over 3

 char *  sv_collxfrm(SV * const sv, STRLEN * const nxp)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_collxfrm_flags>
X<sv_collxfrm_flags>

Add Collate Transform magic to an SV if it doesn't already have it.  If the
flags contain C<SV_GMAGIC>, it handles get-magic.

Any scalar variable may carry C<PERL_MAGIC_collxfrm> magic that contains the
scalar data of the variable, but transformed to such a format that a normal
memory comparison can be used to compare the data according to the locale
settings.

=over 3

 char *  sv_collxfrm_flags(SV * const sv, STRLEN * const nxp,
                           I32 const flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_copypv>

=item C<sv_copypv_flags>

=item C<sv_copypv_nomg>
X<sv_copypv>X<sv_copypv_flags>X<sv_copypv_nomg>

These copy a stringified representation of the source SV into the
destination SV.  They automatically perform coercion of numeric values into
strings.  Guaranteed to preserve the C<UTF8> flag even from overloaded objects.
Similar in nature to C<sv_2pv[_flags]> but they operate directly on an SV
instead of just the string.  Mostly they use L</C<sv_2pv_flags>> to
do the work, except when that would lose the UTF-8'ness of the PV.

The three forms differ only in whether or not they perform 'get magic' on
C<sv>.  C<sv_copypv_nomg> skips 'get magic'; C<sv_copypv> performs it; and
C<sv_copypv_flags> either performs it (if the C<SV_GMAGIC> bit is set in
C<flags>) or doesn't (if that bit is cleared).

=over 3

 void  sv_copypv      (SV * const dsv, SV * const ssv)
 void  sv_copypv_flags(SV * const dsv, SV * const ssv,
                       const I32 flags)
 void  sv_copypv_nomg (SV * const dsv, SV * const ssv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvCUR>
X<SvCUR>

Returns the length, in bytes, of the PV inside the SV.
Note that this may not match Perl's C<length>; for that, use
C<sv_len_utf8(sv)>. See C<L</SvLEN>> also.

=over 3

 STRLEN  SvCUR(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvCUR_set>
X<SvCUR_set>

Sets the current length, in bytes, of the C string which is in the SV.
See C<L</SvCUR>> and C<SvIV_set>>.

=over 3

 void  SvCUR_set(SV* sv, STRLEN len)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_2cv>
X<sv_2cv>

Using various gambits, try to get a CV from an SV; in addition, try if
possible to set C<*st> and C<*gvp> to the stash and GV associated with it.
The flags in C<lref> are passed to C<gv_fetchsv>.

=over 3

 CV *  sv_2cv(SV *sv, HV ** const st, GV ** const gvp,
              const I32 lref)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_dec>

=item C<sv_dec_nomg>
X<sv_dec>X<sv_dec_nomg>

These auto-decrement the value in the SV, doing string to numeric conversion
if necessary.  They both handle operator overloading.

They differ only in that:

C<sv_dec> handles 'get' magic; C<sv_dec_nomg> skips 'get' magic.

=over 3

 void  sv_dec(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_derived_from>
X<sv_derived_from>

Exactly like L</sv_derived_from_pv>, but doesn't take a C<flags> parameter.

=over 3

 bool  sv_derived_from(SV *sv, const char * const name)

=back

=back

=for hackers
Found in file universal.c

=over 4

=item C<sv_derived_from_hv>
X<sv_derived_from_hv>

Exactly like L</sv_derived_from_pvn>, but takes the name string as the
C<HvNAME> of the given HV (which would presumably represent a stash).

=over 3

 bool  sv_derived_from_hv(SV *sv, HV *hv)

=back

=back

=for hackers
Found in file universal.c

=over 4

=item C<sv_derived_from_pv>
X<sv_derived_from_pv>

Exactly like L</sv_derived_from_pvn>, but takes a nul-terminated string 
instead of a string/length pair.

=over 3

 bool  sv_derived_from_pv(SV *sv, const char * const name,
                          U32 flags)

=back

=back

=for hackers
Found in file universal.c

=over 4

=item C<sv_derived_from_pvn>
X<sv_derived_from_pvn>

Returns a boolean indicating whether the SV is derived from the specified class
I<at the C level>.  To check derivation at the Perl level, call C<isa()> as a
normal Perl method.

Currently, the only significant value for C<flags> is SVf_UTF8.

=over 3

 bool  sv_derived_from_pvn(SV *sv, const char * const name,
                           const STRLEN len, U32 flags)

=back

=back

=for hackers
Found in file universal.c

=over 4

=item C<sv_derived_from_sv>
X<sv_derived_from_sv>

Exactly like L</sv_derived_from_pvn>, but takes the name string in the form
of an SV instead of a string/length pair. This is the advised form.

=over 3

 bool  sv_derived_from_sv(SV *sv, SV *namesv, U32 flags)

=back

=back

=for hackers
Found in file universal.c

=over 4

=item C<sv_does>
X<sv_does>

Like L</sv_does_pv>, but doesn't take a C<flags> parameter.

=over 3

 bool  sv_does(SV *sv, const char * const name)

=back

=back

=for hackers
Found in file universal.c

=over 4

=item C<sv_does_pv>
X<sv_does_pv>

Like L</sv_does_sv>, but takes a nul-terminated string instead of an SV.

=over 3

 bool  sv_does_pv(SV *sv, const char * const name, U32 flags)

=back

=back

=for hackers
Found in file universal.c

=over 4

=item C<sv_does_pvn>
X<sv_does_pvn>

Like L</sv_does_sv>, but takes a string/length pair instead of an SV.

=over 3

 bool  sv_does_pvn(SV *sv, const char * const name,
                   const STRLEN len, U32 flags)

=back

=back

=for hackers
Found in file universal.c

=over 4

=item C<sv_does_sv>
X<sv_does_sv>

Returns a boolean indicating whether the SV performs a specific, named role.
The SV can be a Perl object or the name of a Perl class.

=over 3

 bool  sv_does_sv(SV *sv, SV *namesv, U32 flags)

=back

=back

=for hackers
Found in file universal.c

=over 4

=item C<SvEND>
X<SvEND>

Returns a pointer to the spot just after the last character in
the string which is in the SV, where there is usually a trailing
C<NUL> character (even though Perl scalars do not strictly require it).
See C<L</SvCUR>>.  Access the character as C<*(SvEND(sv))>.

Warning: If C<SvCUR> is equal to C<SvLEN>, then C<SvEND> points to
unallocated memory.

=over 3

 char*  SvEND(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_eq>

=item C<sv_eq_flags>
X<sv_eq>X<sv_eq_flags>

These each return a boolean indicating whether or not the strings in the two
SVs are equal.  If S<C<'use bytes'>> is in effect, the comparison is
byte-by-byte; otherwise character-by-character.  Each will coerce its args to
strings if necessary.

They differ only in that C<sv_eq> always processes get magic, while
C<sv_eq_flags> processes get magic only when the C<flags> parameter has the
C<SV_GMAGIC> bit set.

These functions do not handle operator overloading.  For versions that do,
see instead C<L</sv_streq>> or C<L</sv_streq_flags>>.

=over 3

 I32  sv_eq      (SV *sv1, SV *sv2)
 I32  sv_eq_flags(SV *sv1, SV *sv2, const U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_force_normal>
X<sv_force_normal>

Undo various types of fakery on an SV: if the PV is a shared string, make
a private copy; if we're a ref, stop refing; if we're a glob, downgrade to
an C<xpvmg>.  See also C<L</sv_force_normal_flags>>.

=over 3

 void  sv_force_normal(SV *sv)

=back

=back

=for hackers
Found in file mathoms.c

=over 4

=item C<sv_force_normal_flags>
X<sv_force_normal_flags>

Undo various types of fakery on an SV, where fakery means
"more than" a string: if the PV is a shared string, make
a private copy; if we're a ref, stop refing; if we're a glob, downgrade to
an C<xpvmg>; if we're a copy-on-write scalar, this is the on-write time when
we do the copy, and is also used locally; if this is a
vstring, drop the vstring magic.  If C<SV_COW_DROP_PV> is set
then a copy-on-write scalar drops its PV buffer (if any) and becomes
C<SvPOK_off> rather than making a copy.  (Used where this
scalar is about to be set to some other value.)  In addition,
the C<flags> parameter gets passed to C<sv_unref_flags()>
when unreffing.  C<sv_force_normal> calls this function
with flags set to 0.

This function is expected to be used to signal to perl that this SV is
about to be written to, and any extra book-keeping needs to be taken care
of.  Hence, it croaks on read-only values.
