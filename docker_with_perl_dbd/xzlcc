If you are upgrading from an earlier release such as 5.12.0, first read
L<perl5140delta>, which describes differences between 5.12.0 and
5.14.0.

Some bug fixes in this release have been backported to later
releases of 5.14.x.  Those are indicated with the 5.14.x version in
parentheses.

=head1 Notice

With the release of Perl 5.16.0, the 5.12.x series of releases is now out of
its support period.  There may be future 5.12.x releases, but only in the
event of a critical security issue.  Users of Perl 5.12 or earlier should
consider upgrading to a more recent release of Perl.

This policy is described in greater detail in
L<perlpolicy|perlpolicy/MAINTENANCE AND SUPPORT>.

=head1 Core Enhancements

=head2 C<use I<VERSION>>

As of this release, version declarations like C<use v5.16> now disable
all features before enabling the new feature bundle.  This means that
the following holds true:

    use 5.016;
    # only 5.16 features enabled here
    use 5.014;
    # only 5.14 features enabled here (not 5.16)

C<use v5.12> and higher continue to enable strict, but explicit C<use
strict> and C<no strict> now override the version declaration, even
when they come first:

    no strict;
    use 5.012;
    # no strict here

There is a new ":default" feature bundle that represents the set of
features enabled before any version declaration or C<use feature> has
been seen.  Version declarations below 5.10 now enable the ":default"
feature set.  This does not actually change the behavior of C<use
v5.8>, because features added to the ":default" set are those that were
traditionally enabled by default, before they could be turned off.

C<< no feature >> now resets to the default feature set.  To disable all
features (which is likely to be a pretty special-purpose request, since
it presumably won't match any named set of semantics) you can now  
write C<< no feature ':all' >>.

C<$[> is now disabled under C<use v5.16>.  It is part of the default
feature set and can be turned on or off explicitly with C<use feature
'array_base'>.

=head2 C<__SUB__>

The new C<__SUB__> token, available under the C<current_sub> feature
(see L<feature>) or C<use v5.16>, returns a reference to the current
subroutine, making it easier to write recursive closures.

=head2 New and Improved Built-ins

=head3 More consistent C<eval>

The C<eval> operator sometimes treats a string argument as a sequence of
characters and sometimes as a sequence of bytes, depending on the
internal encoding.  The internal encoding is not supposed to make any
difference, but there is code that relies on this inconsistency.

The new C<unicode_eval> and C<evalbytes> features (enabled under C<use
5.16.0>) resolve this.  The C<unicode_eval> feature causes C<eval
$string> to treat the string always as Unicode.  The C<evalbytes>
features provides a function, itself called C<evalbytes>, which
evaluates its argument always as a string of bytes.

These features also fix oddities with source filters leaking to outer
dynamic scopes.

See L<feature> for more detail.

=head3 C<substr> lvalue revamp

=for comment Does this belong here, or under Incompatible Changes?

When C<substr> is called in lvalue or potential lvalue context with two
or three arguments, a special lvalue scalar is returned that modifies
the original string (the first argument) when assigned to.

Previously, the offsets (the second and third arguments) passed to
C<substr> would be converted immediately to match the string, negative
offsets being translated to positive and offsets beyond the end of the
string being truncated.

Now, the offsets are recorded without modification in the special
lvalue scalar that is returned, and the original string is not even
looked at by C<substr> itself, but only when the returned lvalue is
read or modified.

These changes result in an incompatible change:

If the original string changes length after the call to C<substr> but
before assignment to its return value, negative offsets will remember
their position from the end of the string, affecting code like this:

    my $string = "string";
    my $lvalue = \substr $string, -4, 2;
    print $$lvalue, "\n"; # prints "ri"
    $string = "bailing twine";
    print $$lvalue, "\n"; # prints "wi"; used to print "il"

The same thing happens with an omitted third argument.  The returned
lvalue will always extend to the end of the string, even if the string
becomes longer.

Since this change also allowed many bugs to be fixed (see
L</The C<substr> operator>), and since the behavior
of negative offsets has never been specified, the
change was deemed acceptable.

=head3 Return value of C<tied>

The value returned by C<tied> on a tied variable is now the actual
scalar that holds the object to which the variable is tied.  This
lets ties be weakened with C<Scalar::Util::weaken(tied
$tied_variable)>.

=head2 Unicode Support

=head3 Supports (I<almost>) Unicode 6.1

Besides the addition of whole new scripts, and new characters in
existing scripts, this new version of Unicode, as always, makes some
changes to existing characters.  One change that may trip up some
applications is that the General Category of two characters in the
Latin-1 range, PILCROW SIGN and SECTION SIGN, has been changed from
Other_Symbol to Other_Punctuation.  The same change has been made for
a character in each of Tibetan, Ethiopic, and Aegean.
The code points U+3248..U+324F (CIRCLED NUMBER TEN ON BLACK SQUARE
through CIRCLED NUMBER EIGHTY ON BLACK SQUARE) have had their General
Category changed from Other_Symbol to Other_Numeric.  The Line Break
property has changes for Hebrew and Japanese; and because of
other changes in 6.1, the Perl regular expression construct C<\X> now
works differently for some characters in Thai and Lao.

New aliases (synonyms) have been defined for many property values;
these, along with the previously existing ones, are all cross-indexed in
L<perluniprops>.

The return value of C<charnames::viacode()> is affected by other
changes:

 Code point      Old Name             New Name
   U+000A    LINE FEED (LF)        LINE FEED
   U+000C    FORM FEED (FF)        FORM FEED
   U+000D    CARRIAGE RETURN (CR)  CARRIAGE RETURN
   U+0085    NEXT LINE (NEL)       NEXT LINE
   U+008E    SINGLE-SHIFT 2        SINGLE-SHIFT-2
   U+008F    SINGLE-SHIFT 3        SINGLE-SHIFT-3
   U+0091    PRIVATE USE 1         PRIVATE USE-1
   U+0092    PRIVATE USE 2         PRIVATE USE-2
   U+2118    SCRIPT CAPITAL P      WEIERSTRASS ELLIPTIC FUNCTION

Perl will accept any of these names as input, but
C<charnames::viacode()> now returns the new name of each pair.  The
change for U+2118 is considered by Unicode to be a correction, that is
the original name was a mistake (but again, it will remain forever valid
to use it to refer to U+2118).  But most of these changes are the
fallout of the mistake Unicode 6.0 made in naming a character used in
Japanese cell phones to be "BELL", which conflicts with the longstanding
industry use of (and Unicode's recommendation to use) that name
to mean the ASCII control character at U+0007.  Therefore, that name
has been deprecated in Perl since v5.14, and any use of it will raise a
warning message (unless turned off).  The name "ALERT" is now the
preferred name for this code point, with "BEL" an acceptable short
form.  The name for the new cell phone character, at code point U+1F514,
remains undefined in this version of Perl (hence we don't 
implement quite all of Unicode 6.1), but starting in v5.18, BELL will mean
this character, and not U+0007.

Unicode has taken steps to make sure that this sort of mistake does not
happen again.  The Standard now includes all generally accepted
names and abbreviations for control characters, whereas previously it
didn't (though there were recommended names for most of them, which Perl
used).  This means that most of those recommended names are now
officially in the Standard.  Unicode did not recommend names for the
four code points listed above between U+008E and U+008F, and in
standardizing them Unicode subtly changed the names that Perl had
previously given them, by replacing the final blank in each name by a
hyphen.  Unicode also officially accepts names that Perl had deprecated,
such as FILE SEPARATOR.  Now the only deprecated name is BELL.
Finally, Perl now uses the new official names instead of the old
(now considered obsolete) names for the first four code points in the
list above (the ones which have the parentheses in them).

Now that the names have been placed in the Unicode standard, these kinds
of changes should not happen again, though corrections, such as to
U+2118, are still possible.

Unicode also added some name abbreviations, which Perl now accepts:
SP for SPACE;
TAB for CHARACTER TABULATION;
NEW LINE, END OF LINE, NL, and EOL for LINE FEED;
LOCKING-SHIFT ONE for SHIFT OUT;
LOCKING-SHIFT ZERO for SHIFT IN;
and ZWNBSP for ZERO WIDTH NO-BREAK SPACE.

More details on this version of Unicode are provided in
L<http://www.unicode.org/versions/Unicode6.1.0/>.

=head3 C<use charnames> is no longer needed for C<\N{I<name>}>

When C<\N{I<name>}> is encountered, the C<charnames> module is now
automatically loaded when needed as if the C<:full> and C<:short>
options had been specified.  See L<charnames> for more information.

=head3 C<\N{...}> can now have Unicode loose name matching

This is described in the C<charnames> item in
L</Updated Modules and Pragmata> below.

=head3 Unicode Symbol Names

Perl now has proper support for Unicode in symbol names.  It used to be
that C<*{$foo}> would ignore the internal UTF8 flag and use the bytes of
the underlying representation to look up the symbol.  That meant that
C<*{"\x{100}"}> and C<*{"\xc4\x80"}> would return the same thing.  All
these parts of Perl have been fixed to account for Unicode:

=over

=item *

Method names (including those passed to C<use overload>)

=item *

Typeglob names (including names of variables, subroutines, and filehandles)

=item *

Package names

=item *

C<goto>

=item *

Symbolic dereferencing

=item *

Second argument to C<bless()> and C<tie()>

=item *

Return value of C<ref()>

=item *

Subroutine prototypes

=item *

Attributes

=item *

Various warnings and error messages that mention variable names or values,
methods, etc.

=back

In addition, a parsing bug has been fixed that prevented C<*{é}> from
implicitly quoting the name, but instead interpreted it as C<*{+é}>, which
would cause a strict violation.

C<*{"*a::b"}> automatically strips off the * if it is followed by an ASCII
letter.  That has been extended to all Unicode identifier characters.

One-character non-ASCII non-punctuation variables (like C<$é>) are now
subject to "Used only once" warnings.  They used to be exempt, as they
were treated as punctuation variables.

Also, single-character Unicode punctuation variables (like C<$‰>) are now
supported [perl #69032].

=head3 Improved ability to mix locales and Unicode, including UTF-8 locales

An optional parameter has been added to C<use locale>

 use locale ':not_characters';

which tells Perl to use all but the C<LC_CTYPE> and C<LC_COLLATE>
portions of the current locale.  Instead, the character set is assumed
to be Unicode.  This lets locales and Unicode be seamlessly mixed,
including the increasingly frequent UTF-8 locales.  When using this
hybrid form of locales, the C<:locale> layer to the L<open> pragma can
be used to interface with the file system, and there are CPAN modules
available for ARGV and environment variable conversions.

Full details are in L<perllocale>.

=head3 New function C<fc> and corresponding escape sequence C<\F> for Unicode foldcase

Unicode foldcase is an extension to lowercase that gives better results
when comparing two strings case-insensitively.  It has long been used
internally in regular expression C</i> matching.  Now it is available
explicitly through the new C<fc> function call (enabled by
S<C<"use feature 'fc'">>, or C<use v5.16>, or explicitly callable via
C<CORE::fc>) or through the new C<\F> sequence in double-quotish
strings.

Full details are in L<perlfunc/fc>.

=head3 The Unicode C<Script_Extensions> property is now supported

New in Unicode 6.0, this is an improved C<Script> property.  Details
are in L<perlunicode/Scripts>.

=head2 XS Changes

=head3 Improved typemaps for Some Builtin Types

Most XS authors will know there is a longstanding bug in the
OUTPUT typemap for T_AVREF (C<AV*>), T_HVREF (C<HV*>), T_CVREF (C<CV*>),
and T_SVREF (C<SVREF> or C<\$foo>) that requires manually decrementing
the reference count of the return value instead of the typemap taking
care of this.  For backwards-compatibility, this cannot be changed in the
default typemaps.  But we now provide additional typemaps
C<T_AVREF_REFCOUNT_FIXED>, etc. that do not exhibit this bug.  Using
them in your extension is as simple as having one line in your
C<TYPEMAP> section:

  HV*	T_HVREF_REFCOUNT_FIXED

=head3 C<is_utf8_char()>

The XS-callable function C<is_utf8_char()>, when presented with
malformed UTF-8 input, can read up to 12 bytes beyond the end of the
string.  This cannot be fixed without changing its API, and so its
use is now deprecated.  Use C<is_utf8_char_buf()> (described just below)
instead.

=head3 Added C<is_utf8_char_buf()>

This function is designed to replace the deprecated L</is_utf8_char()>
function.  It includes an extra parameter to make sure it doesn't read
past the end of the input buffer.

=head3 Other C<is_utf8_foo()> functions, as well as C<utf8_to_foo()>, etc.

Most other XS-callable functions that take UTF-8 encoded input
implicitly assume that the UTF-8 is valid (not malformed) with respect to
buffer length.  Do not do things such as change a character's case or
see if it is alphanumeric without first being sure that it is valid
UTF-8.  This can be safely done for a whole string by using one of the
functions C<is_utf8_string()>, C<is_utf8_string_loc()>, and
C<is_utf8_string_loclen()>.

=head3 New Pad API

Many new functions have been added to the API for manipulating lexical
pads.  See L<perlapi/Pad Data Structures> for more information.

=head2 Changes to Special Variables

=head3 C<$$> can be assigned to

C<$$> was made read-only in Perl 5.8.0.  But only sometimes: C<local $$>
would make it writable again.  Some CPAN modules were using C<local $$> or
XS code to bypass the read-only check, so there is no reason to keep C<$$>
read-only.  (This change also allowed a bug to be fixed while maintaining
backward compatibility.)

=head3 C<$^X> converted to an absolute path on FreeBSD, OS X and Solaris

C<$^X> is now converted to an absolute path on OS X, FreeBSD (without
needing F</proc> mounted) and Solaris 10 and 11.  This augments the
previous approach of using F</proc> on Linux, FreeBSD, and NetBSD
(in all cases, where mounted).

This makes relocatable perl installations more useful on these platforms.
(See "Relocatable @INC" in F<INSTALL>)

=head2 Debugger Changes

=head3 Features inside the debugger

The current Perl's L<feature> bundle is now enabled for commands entered
in the interactive debugger.

=head3 New option for the debugger's B<t> command

The B<t> command in the debugger, which toggles tracing mode, now
accepts a numeric argument that determines how many levels of subroutine
calls to trace.

=head3 C<enable> and C<disable>

The debugger now has C<disable> and C<enable> commands for disabling
existing breakpoints and re-enabling them.  See L<perldebug>.

=head3 Breakpoints with file names

The debugger's "b" command for setting breakpoints now lets a line
number be prefixed with a file name.  See
L<perldebug/"b [file]:[line] [condition]">.

=head2 The C<CORE> Namespace

=head3 The C<CORE::> prefix

The C<CORE::> prefix can now be used on keywords enabled by
L<feature.pm|feature>, even outside the scope of C<use feature>.

=head3 Subroutines in the C<CORE> namespace

Many Perl keywords are now available as subroutines in the CORE namespace.
This lets them be aliased:

    BEGIN { *entangle = \&CORE::tie }
    entangle $variable, $package, @args;

And for prototypes to be bypassed:

    sub mytie(\[%$*@]$@) {
	my ($ref, $pack, @args) = @_;
	... do something ...
	goto &CORE::tie;
    }

Some of these cannot be called through references or via C<&foo> syntax,
but must be called as barewords.

See L<CORE> for details.

=head2 Other Changes

=head3 Anonymous handles

Automatically generated file handles are now named __ANONIO__ when the
variable name cannot be determined, rather than $__ANONIO__.

=head3 Autoloaded sort Subroutines

Custom sort subroutines can now be autoloaded [perl #30661]:

    sub AUTOLOAD { ... }
    @sorted = sort foo @list; # uses AUTOLOAD

=head3 C<continue> no longer requires the "switch" feature

The C<continue> keyword has two meanings.  It can introduce a C<continue>
block after a loop, or it can exit the current C<when> block.  Up to now,
the latter meaning was valid only with the "switch" feature enabled, and
was a syntax error otherwise.  Since the main purpose of feature.pm is to
avoid conflicts with user-defined subroutines, there is no reason for
C<continue> to depend on it.

=head3 DTrace probes for interpreter phase change

The C<phase-change> probes will fire when the interpreter's phase
changes, which tracks the C<${^GLOBAL_PHASE}> variable.  C<arg0> is
the new phase name; C<arg1> is the old one.  This is useful 
for limiting your instrumentation to one or more of: compile time,
run time, or destruct time.

=head3 C<__FILE__()> Syntax

The C<__FILE__>, C<__LINE__> and C<__PACKAGE__> tokens can now be written
with an empty pair of parentheses after them.  This makes them parse the
same way as C<time>, C<fork> and other built-in functions.

=head3 The C<\$> prototype accepts any scalar lvalue

The C<\$> and C<\[$]> subroutine prototypes now accept any scalar lvalue
argument.  Previously they accepted only scalars beginning with C<$> and
hash and array elements.  This change makes them consistent with the way
the built-in C<read> and C<recv> functions (among others) parse their
arguments.  This means that one can override the built-in functions with
custom subroutines that parse their arguments the same way.

=head3 C<_> in subroutine prototypes

The C<_> character in subroutine prototypes is now allowed before C<@> or
C<%>.

=head1 Security

=head2 Use C<is_utf8_char_buf()> and not C<is_utf8_char()>

The latter function is now deprecated because its API is insufficient to
guarantee that it doesn't read (up to 12 bytes in the worst case) beyond
the end of its input string.  See
L<is_utf8_char_buf()|/Added is_utf8_char_buf()>.

=head2 Malformed UTF-8 input could cause attempts to read beyond the end of the buffer

Two new XS-accessible functions, C<utf8_to_uvchr_buf()> and
C<utf8_to_uvuni_buf()> are now available to prevent this, and the Perl
core has been converted to use them.
See L</Internal Changes>.

=head2 C<File::Glob::bsd_glob()> memory error with GLOB_ALTDIRFUNC (CVE-2011-2728)

Calling C<File::Glob::bsd_glob> with the unsupported flag
GLOB_ALTDIRFUNC would cause an access violation / segfault.  A Perl
program that accepts a flags value from an external source could expose
itself to denial of service or arbitrary code execution attacks.  There
are no known exploits in the wild.  The problem has been corrected by
explicitly disabling all unsupported flags and setting unused function
pointers to null.  Bug reported by Clément Lecigne. (5.14.2)

=head2 Privileges are now set correctly when assigning to C<$(>

A hypothetical bug (probably unexploitable in practice) because the
incorrect setting of the effective group ID while setting C<$(> has been
fixed.  The bug would have affected only systems that have C<setresgid()>
but not C<setregid()>, but no such systems are known to exist.

=head1 Deprecations

=head2 Don't read the Unicode data base files in F<lib/unicore>

It is now deprecated to directly read the Unicode data base files.
These are stored in the F<lib/unicore> directory.  Instead, you should
use the new functions in L<Unicode::UCD>.  These provide a stable API,
and give complete information.

Perl may at some point in the future change or remove these files.  The
file which applications were most likely to have used is
F<lib/unicore/ToDigit.pl>.  L<Unicode::UCD/prop_invmap()> can be used to
get at its data instead.

=head2 XS functions C<is_utf8_char()>, C<utf8_to_uvchr()> and
C<utf8_to_uvuni()>

This function is deprecated because it could read beyond the end of the
input string.  Use the new L<is_utf8_char_buf()|/Added is_utf8_char_buf()>,
C<utf8_to_uvchr_buf()> and C<utf8_to_uvuni_buf()> instead.

=head1 Future Deprecations

This section serves as a notice of features that are I<likely> to be
removed or L<deprecated|perlpolicy/deprecated> in the next release of
perl (5.18.0).  If your code depends on these features, you should
contact the Perl 5 Porters via the L<mailing
list|http://lists.perl.org/list/perl5-porters.html> or L<perlbug> to
explain your use case and inform the deprecation process.

=head2 Core Modules

These modules may be marked as deprecated I<from the core>.  This only
means that they will no longer be installed by default with the core
distribution, but will remain available on the CPAN.

=over

=item *

CPANPLUS

=item *

Filter::Simple

=item *

PerlIO::mmap

=item *

Pod::LaTeX

=item *

Pod::Parser

=item *

SelfLoader

=item *

Text::Soundex

=item *

Thread.pm

=back

=head2 Platforms with no supporting programmers

These platforms will probably have their
special build support removed during the
5.17.0 development series.

=over

=item *

BeOS

=item *

djgpp

=item *

dgux

=item *

EPOC

=item *

MPE/iX

=item *

Rhapsody

=item *

UTS

=item *

VM/ESA

=back

=head2 Other Future Deprecations

=over

=item *

Swapping of $< and $>

For more information about this future deprecation, see L<the relevant RT
ticket|https://github.com/Perl/perl5/issues/11547>.

=item *

sfio, stdio

Perl supports being built without PerlIO proper, using a stdio or sfio
wrapper instead.  A perl build like this will not support IO layers and
thus Unicode IO, making it rather handicapped.

PerlIO supports a C<stdio> layer if stdio use is desired, and similarly a
sfio layer could be produced.

=item *

Unescaped literal C<< "{" >> in regular expressions.

Starting with v5.20, it is planned to require a literal C<"{"> to be
escaped, for example by preceding it with a backslash.  In v5.18, a
deprecated warning message will be emitted for all such uses.  
This affects only patterns that are to match a literal C<"{">.  Other
uses of this character, such as part of a quantifier or sequence as in
those below, are completely unaffected:

    /foo{3,5}/
    /\p{Alphabetic}/
    /\N{DIGIT ZERO}

Removing this will permit extensions to Perl's pattern syntax and better
error checking for existing syntax.  See L<perlre/Quantifiers> for an
example.

=item *

Revamping C<< "\Q" >> semantics in double-quotish strings when combined with other escapes.

There are several bugs and inconsistencies involving combinations
of C<\Q> and escapes like C<\x>, C<\L>, etc., within a C<\Q...\E> pair.
These need to be fixed, and doing so will necessarily change current
behavior.  The changes have not yet been settled.

=back

=head1 Incompatible Changes

=head2 Special blocks called in void context

Special blocks (C<BEGIN>, C<CHECK>, C<INIT>, C<UNITCHECK>, C<END>) are now
called in void context.  This avoids wasteful copying of the result of the
last statement [perl #108794].

=head2 The C<overloading> pragma and regexp objects

With C<no overloading>, regular expression objects returned by C<qr//> are
now stringified as "Regexp=REGEXP(0xbe600d)" instead of the regular
expression itself [perl #108780].

=head2 Two XS typemap Entries removed

Two presumably unused XS typemap entries have been removed from the
core typemap: T_DATAUNIT and T_CALLBACK.  If you are, against all odds,
a user of these, please see the instructions on how to restore them
in L<perlxstypemap>.

=head2 Unicode 6.1 has incompatibilities with Unicode 6.0

These are detailed in L</Supports (almost) Unicode 6.1> above.
You can compile this version of Perl to use Unicode 6.0.  See
L<perlunicode/Hacking Perl to work on earlier Unicode versions (for very serious hackers only)>.

=head2 Borland compiler

All support for the Borland compiler has been dropped.  The code had not
worked for a long time anyway.

=head2 Certain deprecated Unicode properties are no longer supported by default

Perl should never have exposed certain Unicode properties that are used
by Unicode internally and not meant to be publicly available.  Use of
these has generated deprecated warning messages since Perl 5.12.  The
removed properties are Other_Alphabetic,
Other_Default_Ignorable_Code_Point, Other_Grapheme_Extend,
Other_ID_Continue, Other_ID_Start, Other_Lowercase, Other_Math, and
Other_Uppercase.

Perl may be recompiled to include any or all of them; instructions are
given in
L<perluniprops/Unicode character properties that are NOT accepted by Perl>.

=head2 Dereferencing IO thingies as typeglobs

The C<*{...}> operator, when passed a reference to an IO thingy (as in
C<*{*STDIN{IO}}>), creates a new typeglob containing just that IO object.
Previously, it would stringify as an empty string, but some operators would
treat it as undefined, producing an "uninitialized" warning.
Now it stringifies as __ANONIO__ [perl #96326].

=head2 User-defined case-changing operations

This feature was deprecated in Perl 5.14, and has now been removed.
The CPAN module L<Unicode::Casing> provides better functionality without
the drawbacks that this feature had, as are detailed in the 5.14
documentation:
L<http://perldoc.perl.org/5.14.0/perlunicode.html#User-Defined-Case-Mappings-%28for-serious-hackers-only%29>

=head2 XSUBs are now 'static'

XSUB C functions are now 'static', that is, they are not visible from
outside the compilation unit.  Users can use the new C<XS_EXTERNAL(name)>
and C<XS_INTERNAL(name)> macros to pick the desired linking behavior.
The ordinary C<XS(name)> declaration for XSUBs will continue to declare
non-'static' XSUBs for compatibility, but the XS compiler,
L<ExtUtils::ParseXS> (C<xsubpp>) will emit 'static' XSUBs by default.
L<ExtUtils::ParseXS>'s behavior can be reconfigured from XS using the
C<EXPORT_XSUB_SYMBOLS> keyword.  See L<perlxs> for details.

=head2 Weakening read-only references

Weakening read-only references is no longer permitted.  It should never
have worked anyway, and could sometimes result in crashes.

=head2 Tying scalars that hold typeglobs

Attempting to tie a scalar after a typeglob was assigned to it would
instead tie the handle in the typeglob's IO slot.  This meant that it was
impossible to tie the scalar itself.  Similar problems affected C<tied> and
C<untie>: C<tied $scalar> would return false on a tied scalar if the last
thing returned was a typeglob, and C<untie $scalar> on such a tied scalar
would do nothing.

We fixed this problem before Perl 5.14.0, but it caused problems with some
CPAN modules, so we put in a deprecation cycle instead.

Now the deprecation has been removed and this bug has been fixed.  So
C<tie $scalar> will always tie the scalar, not the handle it holds.  To tie
the handle, use C<tie *$scalar> (with an explicit asterisk).  The same
applies to C<tied *$scalar> and C<untie *$scalar>.

=head2 IPC::Open3 no longer provides C<xfork()>, C<xclose_on_exec()>
and C<xpipe_anon()>

All three functions were private, undocumented, and unexported.  They do
not appear to be used by any code on CPAN.  Two have been inlined and one
deleted entirely.

=head2 C<$$> no longer caches PID

Previously, if one called fork(3) from C, Perl's
notion of C<$$> could go out of sync with what getpid() returns.  By always
fetching the value of C<$$> via getpid(), this potential bug is eliminated.
Code that depends on the caching behavior will break.  As described in
L<Core Enhancements|/C<$$> can be assigned to>,
C<$$> is now writable, but it will be reset during a
fork.

=head2 C<$$> and C<getppid()> no longer emulate POSIX semantics under LinuxThreads

The POSIX emulation of C<$$> and C<getppid()> under the obsolete
LinuxThreads implementation has been removed.
This only impacts users of Linux 2.4 and
users of Debian GNU/kFreeBSD up to and including 6.0, not the vast
majority of Linux installations that use NPTL threads.

This means that C<getppid()>, like C<$$>, is now always guaranteed to
return the OS's idea of the current state of the process, not perl's
cached version of it.

See the documentation for L<$$|perlvar/$$> for details.

=head2 C<< $< >>, C<< $> >>, C<$(> and C<$)> are no longer cached

Similarly to the changes to C<$$> and C<getppid()>, the internal
caching of C<< $< >>, C<< $> >>, C<$(> and C<$)> has been removed.

When we cached these values our idea of what they were would drift out
of sync with reality if someone (e.g., someone embedding perl) called
C<sete?[ug]id()> without updating C<PL_e?[ug]id>.  Having to deal with
this complexity wasn't worth it given how cheap the C<gete?[ug]id()>
system call is.

This change will break a handful of CPAN modules that use the XS-level
C<PL_uid>, C<PL_gid>, C<PL_euid> or C<PL_egid> variables.

The fix for those breakages is to use C<PerlProc_gete?[ug]id()> to
retrieve them (e.g., C<PerlProc_getuid()>), and not to assign to
C<PL_e?[ug]id> if you change the UID/GID/EUID/EGID.  There is no longer
any need to do so since perl will always retrieve the up-to-date
version of those values from the OS.

=head2 Which Non-ASCII characters get quoted by C<quotemeta> and C<\Q> has changed

This is unlikely to result in a real problem, as Perl does not attach
special meaning to any non-ASCII character, so it is currently
irrelevant which are quoted or not.  This change fixes bug [perl #77654] and
brings Perl's behavior more into line with Unicode's recommendations.
See L<perlfunc/quotemeta>.

=head1 Performance Enhancements

=over

=item *

Improved performance for Unicode properties in regular expressions

=for comment Can this be compacted some? -- rjbs, 2012-02-20

Matching a code point against a Unicode property is now done via a
binary search instead of linear.  This means for example that the worst
case for a 1000 item property is 10 probes instead of 1000.  This
inefficiency has been compensated for in the past by permanently storing
in a hash the results of a given probe plus the results for the adjacent
64 code points, under the theory that near-by code points are likely to
be searched for.  A separate hash was used for each mention of a Unicode
property in each regular expression.  Thus, C<qr/\p{foo}abc\p{foo}/>
would generate two hashes.  Any probes in one instance would be unknown
to the other, and the hashes could expand separately to be quite large
if the regular expression were used on many different widely-separated
code points.
Now, however, there is just one hash shared by all instances of a given
property.  This means that if C<\p{foo}> is matched against "A" in one
regular expression in a thread, the result will be known immediately to
all regular expressions, and the relentless march of using up memory is
slowed considerably.

=item *

Version declarations with the C<use> keyword (e.g., C<use 5.012>) are now
faster, as they enable features without loading F<feature.pm>.

=item *

C<local $_> is faster now, as it no longer iterates through magic that it
is not going to copy anyway.

=item *

Perl 5.12.0 sped up the destruction of objects whose classes define
empty C<DESTROY> methods (to prevent autoloading), by simply not
calling such empty methods.  This release takes this optimization a
step further, by not calling any C<DESTROY> method that begins with a
C<return> statement.  This can be useful for destructors that are only
used for debugging:

    use constant DEBUG => 1;
    sub DESTROY { return unless DEBUG; ... }

Constant-folding will reduce the first statement to C<return;> if DEBUG
is set to 0, triggering this optimization.

=item *

Assigning to a variable that holds a typeglob or copy-on-write scalar
is now much faster.  Previously the typeglob would be stringified or
the copy-on-write scalar would be copied before being clobbered.

=item *

Assignment to C<substr> in void context is now more than twice its
previous speed.  Instead of creating and returning a special lvalue
scalar that is then assigned to, C<substr> modifies the original string
itself.

=item *

C<substr> no longer calculates a value to return when called in void
context.

=item *

Due to changes in L<File::Glob>, Perl's C<glob> function and its C<<
<...> >> equivalent are now much faster.  The splitting of the pattern
into words has been rewritten in C, resulting in speed-ups of 20% for
some cases.

This does not affect C<glob> on VMS, as it does not use File::Glob.

=item *

The short-circuiting operators C<&&>, C<||>, and C<//>, when chained
(such as C<$a || $b || $c>), are now considerably faster to short-circuit,
due to reduced optree traversal.

=item *

The implementation of C<s///r> makes one fewer copy of the scalar's value.

=item *

Recursive calls to lvalue subroutines in lvalue scalar context use less
memory.

=back

=head1 Modules and Pragmata

=head2 Deprecated Modules

=over

=item L<Version::Requirements>

Version::Requirements is now DEPRECATED, use L<CPAN::Meta::Requirements>,
which is a drop-in replacement.  It will be deleted from perl.git blead
in v5.17.0.

=back

=head2 New Modules and Pragmata

=over 4

=item *

L<arybase> -- this new module implements the C<$[> variable.

=item *

L<PerlIO::mmap> 0.010 has been added to the Perl core.

The C<mmap> PerlIO layer is no longer implemented by perl itself, but has
been moved out into the new L<PerlIO::mmap> module.

=back

=head2 Updated Modules and Pragmata

This is only an overview of selected module updates.  For a complete list of
updates, run:

    $ corelist --diff 5.14.0 5.16.0

You can substitute your favorite version in place of 5.14.0, too.

=over 4

=item *

L<Archive::Extract> has been upgraded from version 0.48 to 0.58.

Includes a fix for FreeBSD to only use C<unzip> if it is located in
C</usr/local/bin>, as FreeBSD 9.0 will ship with a limited C<unzip> in
C</usr/bin>.

=item *

L<Archive::Tar> has been upgraded from version 1.76 to 1.82.

Adjustments to handle files >8gb (>0777777777777 octal) and a feature
to return the MD5SUM of files in the archive.

=item *

L<base> has been upgraded from version 2.16 to 2.18.

