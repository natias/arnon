	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200B,
	0x2011,
	0x2012,
	0x2017,
	0x2018,
	0x2024,
	0x2027,
	0x202F,
	0x2030,
	0x2033,
	0x2035,
	0x2036,
	0x2038,
	0x203C,
	0x203D,
	0x203E,
	0x203F,
	0x2047,
	0x204A,
	0x2057,
	0x2058,
	0x205F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A8,
	0x20A9,
	0x2100,
	0x2104,
	0x2105,
	0x2108,
	0x2109,
	0x2114,
	0x2115,
	0x2117,
	0x2119,
	0x211E,
	0x2120,
	0x2123,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x213A,
	0x213B,
	0x2141,
	0x2145,
	0x214A,
	0x2150,
	0x2180,
	0x2189,
	0x218A,
	0x219A,
	0x219C,
	0x21AE,
	0x21AF,
	0x21CD,
	0x21D0,
	0x2204,
	0x2205,
	0x2209,
	0x220A,
	0x220C,
	0x220D,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222C,
	0x222E,
	0x222F,
	0x2231,
	0x2241,
	0x2242,
	0x2244,
	0x2245,
	0x2247,
	0x2248,
	0x2249,
	0x224A,
	0x2260,
	0x2261,
	0x2262,
	0x2263,
	0x226D,
	0x2272,
	0x2274,
	0x2276,
	0x2278,
	0x227A,
	0x2280,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x228A,
	0x22AC,
	0x22B0,
	0x22E0,
	0x22E4,
	0x22EA,
	0x22EE,
	0x2329,
	0x232B,
	0x2460,
	0x24EB,
	0x2A0C,
	0x2A0D,
	0x2A74,
	0x2A77,
	0x2ADC,
	0x2ADD,
	0x2C7C,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x2E9F,
	0x2EA0,
	0x2EF3,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3000,
	0x3001,
	0x3036,
	0x3037,
	0x3038,
	0x303B,
	0x304C,
	0x304D,
	0x304E,
	0x304F,
	0x3050,
	0x3051,
	0x3052,
	0x3053,
	0x3054,
	0x3055,
	0x3056,
	0x3057,
	0x3058,
	0x3059,
	0x305A,
	0x305B,
	0x305C,
	0x305D,
	0x305E,
	0x305F,
	0x3060,
	0x3061,
	0x3062,
	0x3063,
	0x3065,
	0x3066,
	0x3067,
	0x3068,
	0x3069,
	0x306A,
	0x3070,
	0x3072,
	0x3073,
	0x3075,
	0x3076,
	0x3078,
	0x3079,
	0x307B,
	0x307C,
	0x307E,
	0x3094,
	0x3095,
	0x309B,
	0x309D,
	0x309E,
	0x30A0,
	0x30AC,
	0x30AD,
	0x30AE,
	0x30AF,
	0x30B0,
	0x30B1,
	0x30B2,
	0x30B3,
	0x30B4,
	0x30B5,
	0x30B6,
	0x30B7,
	0x30B8,
	0x30B9,
	0x30BA,
	0x30BB,
	0x30BC,
	0x30BD,
	0x30BE,
	0x30BF,
	0x30C0,
	0x30C1,
	0x30C2,
	0x30C3,
	0x30C5,
	0x30C6,
	0x30C7,
	0x30C8,
	0x30C9,
	0x30CA,
	0x30D0,
	0x30D2,
	0x30D3,
	0x30D5,
	0x30D6,
	0x30D8,
	0x30D9,
	0x30DB,
	0x30DC,
	0x30DE,
	0x30F4,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FE,
	0x3100,
	0x3131,
	0x318F,
	0x3192,
	0x31A0,
	0x3200,
	0x321F,
	0x3220,
	0x3248,
	0x3250,
	0x327F,
	0x3280,
	0x3400,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F2,
	0xA7F5,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xAB69,
	0xAB6A,
	0xAC00,
	0xD7A4,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFBB2,
	0xFBD3,
	0xFD3E,
	0xFD50,
	0xFD90,
	0xFD92,
	0xFDC8,
	0xFDF0,
	0xFDFD,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C,
	0xFE70,
	0xFE73,
	0xFE74,
	0xFE75,
	0xFE76,
	0xFEFD,
	0xFF01,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0x10781,
	0x10786,
	0x10787,
	0x107B1,
	0x107B2,
	0x107BB,
	0x1109A,
	0x1109B,
	0x1109C,
	0x1109D,
	0x110AB,
	0x110AC,
	0x1112E,
	0x11130,
	0x1134B,
	0x1134D,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x115BA,
	0x115BC,
	0x11938,
	0x11939,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1E030,
	0x1E06E,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F150,
	0x1F16A,
	0x1F16D,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1FBF0,
	0x1FBFA,
	0x2F800,
	0x2FA1E
};

#  endif	/* EBCDIC 037 */

static const UV UNI_DT__SML_invlist[] = {  /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFE50,
	0xFE53,
	0xFE54,
	0xFE67,
	0xFE68,
	0xFE6C
};

static const UV UNI_DT__SQR_invlist[] = {  /* for all charsets */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3250,
	0x3251,
	0x32CC,
	0x32D0,
	0x32FF,
	0x3358,
	0x3371,
	0x33E0,
	0x33FF,
	0x3400,
	0x1F130,
	0x1F150,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F203,
	0x1F210,
	0x1F23C
};

static const UV UNI_DT__SUB_invlist[] = {  /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D62,
	0x1D6B,
	0x2080,
	0x208F,
	0x2090,
	0x209D,
	0x2C7C,
	0x2C7D,
	0x1E051,
	0x1E06B
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_DT__SUP_invlist[] = {  /* for ASCII/Latin1 */
	63,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAA,
	0xAB,
	0xB2,
	0xB4,
	0xB9,
	0xBB,
	0x2B0,
	0x2B9,
	0x2E0,
	0x2E5,
	0x10FC,
	0x10FD,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D62,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x2070,
	0x2072,
	0x2074,
	0x2080,
	0x2120,
	0x2121,
	0x2122,
	0x2123,
	0x2C7D,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x3192,
	0x31A0,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F2,
	0xA7F5,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xAB69,
	0xAB6A,
	0x10781,
	0x10786,
	0x10787,
	0x107B1,
	0x107B2,
	0x107BB,
	0x1E030,
	0x1E051,
	0x1E06B,
	0x1E06E,
	0x1F16A,
	0x1F16D
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_DT__SUP_invlist[] = {  /* for EBCDIC 1047 */
	65,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9A,
	0x9C,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x2B0,
	0x2B9,
	0x2E0,
	0x2E5,
	0x10FC,
	0x10FD,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D62,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x2070,
	0x2072,
	0x2074,
	0x2080,
	0x2120,
	0x2121,
	0x2122,
	0x2123,
	0x2C7D,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x3192,
	0x31A0,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F2,
	0xA7F5,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xAB69,
	0xAB6A,
	0x10781,
	0x10786,
	0x10787,
	0x107B1,
	0x107B2,
	0x107BB,
	0x1E030,
	0x1E051,
	0x1E06B,
	0x1E06E,
	0x1F16A,
	0x1F16D
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_DT__SUP_invlist[] = {  /* for EBCDIC 037 */
	65,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9A,
	0x9C,
	0xDA,
	0xDB,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x2B0,
	0x2B9,
	0x2E0,
	0x2E5,
	0x10FC,
	0x10FD,
	0x1D2C,
	0x1D2F,
	0x1D30,
	0x1D3B,
	0x1D3C,
	0x1D4E,
	0x1D4F,
	0x1D62,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1DC0,
	0x2070,
	0x2072,
	0x2074,
	0x2080,
	0x2120,
	0x2121,
	0x2122,
	0x2123,
	0x2C7D,
	0x2C7E,
	0x2D6F,
	0x2D70,
	0x3192,
	0x31A0,
	0xA69C,
	0xA69E,
	0xA770,
	0xA771,
	0xA7F2,
	0xA7F5,
	0xA7F8,
	0xA7FA,
	0xAB5C,
	0xAB60,
	0xAB69,
	0xAB6A,
	0x10781,
	0x10786,
	0x10787,
	0x107B1,
	0x107B2,
	0x107BB,
	0x1E030,
	0x1E051,
	0x1E06B,
	0x1E06E,
	0x1F16A,
	0x1F16D
};

#  endif	/* EBCDIC 037 */

static const UV UNI_DT__VERT_invlist[] = {  /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x309F,
	0x30A0,
	0x30FF,
	0x3100,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE45,
	0xFE47,
	0xFE49
};

static const UV UNI_DUPL_invlist[] = {  /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA4
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_EA__A_invlist[] = {  /* for ASCII/Latin1 */
	359,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA1,
	0xA2,
	0xA4,
	0xA5,
	0xA7,
	0xA9,
	0xAA,
	0xAB,
	0xAD,
	0xAF,
	0xB0,
	0xB5,
	0xB6,
	0xBB,
	0xBC,
	0xC0,
	0xC6,
	0xC7,
	0xD0,
	0xD1,
	0xD7,
	0xD9,
	0xDE,
	0xE2,
	0xE6,
	0xE7,
	0xE8,
	0xEB,
	0xEC,
	0xEE,
	0xF0,
	0xF1,
	0xF2,
	0xF4,
	0xF7,
	0xFB,
	0xFC,
	0xFD,
	0xFE,
	0xFF,
	0x101,
	0x102,
	0x111,
	0x112,
	0x113,
	0x114,
	0x11B,
	0x11C,
	0x126,
	0x128,
	0x12B,
	0x12C,
	0x131,
	0x134,
	0x138,
	0x139,
	0x13F,
	0x143,
	0x144,
	0x145,
	0x148,
	0x14C,
	0x14D,
	0x14E,
	0x152,
	0x154,
	0x166,
	0x168,
	0x16B,
	0x16C,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DD,
	0x251,
	0x252,
	0x261,
	0x262,
	0x2C4,
	0x2C5,
	0x2C7,
	0x2C8,
	0x2C9,
	0x2CC,
	0x2CD,
	0x2CE,
	0x2D0,
	0x2D1,
	0x2D8,
	0x2DC,
	0x2DD,
	0x2DE,
	0x2DF,
	0x2E0,
	0x300,
	0x370,
	0x391,
	0x3A2,
	0x3A3,
	0x3AA,
	0x3B1,
	0x3C2,
	0x3C3,
	0x3CA,
	0x401,
	0x402,
	0x410,
	0x450,
	0x451,
	0x452,
	0x2010,
	0x2011,
	0x2013,
	0x2017,
	0x2018,
	0x201A,
	0x201C,
	0x201E,
	0x2020,
	0x2023,
	0x2024,
	0x2028,
	0x2030,
	0x2031,
	0x2032,
	0x2034,
	0x2035,
	0x2036,
	0x203B,
	0x203C,
	0x203E,
	0x203F,
	0x2074,
	0x2075,
	0x207F,
	0x2080,
