
    if ( $Options{no_year_munging} ) {
        $year -= 1900;
    }
    elsif ( !$Options{posix_year} ) {
        if ( $year >= 1000 ) {
            $year -= 1900;
        }
        elsif ( $year < 100 and $year >= 0 ) {
            $year += ( $year > $Breakpoint ) ? $Century : $NextCentury;
        }
    }

    unless ( $Options{no_range_check} ) {
        Carp::croak("Month '$month' out of range 0..11")
            if $month > 11
            or $month < 0;

        my $md = $MonthDays[$month];
        ++$md
            if $month == 1 && _is_leap_year( $year + 1900 );

        Carp::croak("Day '$mday' out of range 1..$md")
            if $mday > $md or $mday < 1;
        Carp::croak("Hour '$hour' out of range 0..23")
            if $hour > 23 or $hour < 0;
        Carp::croak("Minute '$min' out of range 0..59")
            if $min > 59 or $min < 0;
        Carp::croak("Second '$sec' out of range 0..59")
            if $sec >= 60 or $sec < 0;
    }

    my $days = _daygm( undef, undef, undef, $mday, $month, $year );

    if ( abs($days) > $MaxDay && !$Options{no_range_check} ) {
        my $msg = "Day too big - abs($days) > $MaxDay\n";

        $year += 1900;
        $msg
            .= "Cannot handle date ($sec, $min, $hour, $mday, $month, $year)";

        Carp::croak($msg);
    }

    # Adding in the $subsec value last seems to prevent floating point errors
    # from creeping in.
    return (
        (
                  $sec + $SecOff
                + ( SECS_PER_MINUTE * $min )
                + ( SECS_PER_HOUR * $hour )
                + ( SECS_PER_DAY * $days )
        ) + $subsec
    );
}

sub _is_leap_year {
    return 0 if $_[0] % 4;
    return 1 if $_[0] % 100;
    return 0 if $_[0] % 400;

    return 1;
}

sub timegm_nocheck {
    local $Options{no_range_check} = 1;
    return &timegm;
}

sub timegm_modern {
    local $Options{no_year_munging} = 1;
    return &timegm;
}

sub timegm_posix {
    local $Options{posix_year} = 1;
    return &timegm;
}

sub timelocal {
    my $sec    = shift;
    my $subsec = $sec - int($sec);
    $sec = int($sec);
    unshift @_, $sec;

    my $ref_t         = &timegm;
    my $loc_for_ref_t = _timegm( localtime($ref_t) );

    my $zone_off = $loc_for_ref_t - $ref_t
        or return $loc_for_ref_t + $subsec;

    # Adjust for timezone
    my $loc_t = $ref_t - $zone_off;

    # Are we close to a DST change or are we done
    my $dst_off = $ref_t - _timegm( localtime($loc_t) );

    # If this evaluates to true, it means that the value in $loc_t is
    # the _second_ hour after a DST change where the local time moves
    # backward.
    if (
        !$dst_off
        && ( ( $ref_t - SECS_PER_HOUR )
            - _timegm( localtime( $loc_t - SECS_PER_HOUR ) ) < 0 )
    ) {
        return ( $loc_t - SECS_PER_HOUR ) + $subsec;
    }

    # Adjust for DST change
    $loc_t += $dst_off;

    return $loc_t + $subsec if $dst_off > 0;

    # If the original date was a non-existent gap in a forward DST jump, we
    # should now have the wrong answer - undo the DST adjustment
    my ( $s, $m, $h ) = localtime($loc_t);
    $loc_t -= $dst_off if $s != $_[0] || $m != $_[1] || $h != $_[2];

    return $loc_t + $subsec;
}

sub timelocal_nocheck {
    local $Options{no_range_check} = 1;
    return &timelocal;
}

sub timelocal_modern {
    local $Options{no_year_munging} = 1;
    return &timelocal;
}

sub timelocal_posix {
    local $Options{posix_year} = 1;
    return &timelocal;
}

1;

# ABSTRACT: Efficiently compute time from local and GMT time

__END__

=pod

=encoding UTF-8

=head1 NAME

Time::Local - Efficiently compute time from local and GMT time

=head1 VERSION

version 1.35

=head1 SYNOPSIS

    use Time::Local qw( timelocal_posix timegm_posix );

    my $time = timelocal_posix( $sec, $min, $hour, $mday, $mon, $year );
    my $time = timegm_posix( $sec, $min, $hour, $mday, $mon, $year );

=head1 DESCRIPTION

This module provides functions that are the inverse of built-in perl functions
C<localtime()> and C<gmtime()>. They accept a date as a six-element array, and
return the corresponding C<time(2)> value in seconds since the system epoch
(Midnight, January 1, 1970 GMT on Unix, for example). This value can be
positive or negative, though POSIX only requires support for positive values,
so dates before the system's epoch may not work on all operating systems.

It is worth drawing particular attention to the expected ranges for the values
provided. The value for the day of the month is the actual day (i.e. 1..31),
while the month is the number of months since January (0..11). This is
consistent with the values returned from C<localtime()> and C<gmtime()>.

=head1 FUNCTIONS

=head2 C<timelocal_posix()> and C<timegm_posix()>

I<Since version 1.30.>

These functions are the exact inverse of Perl's built-in C<localtime> and
C<gmtime> functions. That means that calling C<< timelocal_posix(
localtime($value) ) >> will always give you the same C<$value> you started
with. The same applies to C<< timegm_posix( gmtime($value) ) >>.

The one exception is when the value returned from C<localtime()> represents an
ambiguous local time because of a DST change. See the documentation below for
more details.

These functions expect the year value to be the number of years since 1900,
which is what the C<localtime()> and C<gmtime()> built-ins returns.

They perform range checking by default on the input C<$sec>, C<$min>, C<$hour>,
C<$mday>, and C<$mon> values and will croak (using C<Carp::croak()>) if given a
value outside the allowed ranges.

While it would be nice to make this the default behavior, that would almost
certainly break a lot of code, so you must explicitly import these functions
and use them instead of the default C<timelocal()> and C<timegm()>.

You are B<strongly> encouraged to use these functions in any new code which
uses this module. It will almost certainly make your code's behavior less
surprising.

=head2 C<timelocal_modern()> and C<timegm_modern()>

I<Since version 1.27.>

When C<Time::Local> was first written, it was a common practice to represent
years as a two-digit value like C<99> for C<1999> or C<1> for C<2001>. This
caused all sorts of problems (google "Y2K problem" if you're very young) and
developers eventually realized that this was a terrible idea.

The default exports of C<timelocal()> and C<timegm()> do a complicated
calculation when given a year value less than 1000. This leads to surprising
results in many cases. See L</Year Value Interpretation> for details.

The C<time*_modern()> functions do not do this year munging and simply take the
year value as provided.

They perform range checking by default on the input C<$sec>, C<$min>, C<$hour>,
C<$mday>, and C<$mon> values and will croak (using C<Carp::croak()>) if given a
value outside the allowed ranges.

=head2 C<timelocal()> and C<timegm()>

This module exports two functions by default, C<timelocal()> and C<timegm()>.

They perform range checking by default on the input C<$sec>, C<$min>, C<$hour>,
C<$mday>, and C<$mon> values and will croak (using C<Carp::croak()>) if given a
value outside the allowed ranges.

B<Warning: The year value interpretation that these functions and their nocheck
variants use will almost certainly lead to bugs in your code, if not now, then
in the future. You are strongly discouraged from using these in new code, and
you should convert old code to using either the C<*_posix> or C<*_modern>
functions if possible.>

=head2 C<timelocal_nocheck()> and C<timegm_nocheck()>

If you are working with data you know to be valid, you can use the "nocheck"
variants, C<timelocal_nocheck()> and C<timegm_nocheck()>. These variants must
be explicitly imported.

If you supply data which is not valid (month 27, second 1,000) the results will
be unpredictable (so don't do that).

Note that my benchmarks show that this is just a 3% speed increase over the
checked versions, so unless calling C<Time::Local> is the hottest spot in your
application, using these nocheck variants is unlikely to have much impact on
your application.

=head2 Year Value Interpretation

B<This does not apply to the C<*_posix> or C<*_modern> functions. Use those
exports if you want to ensure consistent behavior as your code ages.>

Strictly speaking, the year should be specified in a form consistent with
C<localtime()>, i.e. the offset from 1900. In order to make the interpretation
of the year easier for humans, however, who are more accustomed to seeing years
as two-digit or four-digit values, the following conventions are followed:

=over 4

=item *

Years greater than 999 are interpreted as being the actual year, rather than
the offset from 1900. Thus, 1964 would indicate the year Martin Luther King won
the Nobel prize, not the year 3864.

=item *

Years in the range 100..999 are interpreted as offset from 1900, so that 112
indicates 2012. This rule also applies to years less than zero (but see note
below regarding date range).

=item *

Years in the range 0..99 are interpreted as shorthand for years in the rolling
"current century," defined as 50 years on either side of the current year.
Thus, today, in 1999, 0 would refer to 2000, and 45 to 2045, but 55 would refer
to 1955. Twenty years from now, 55 would instead refer to 2055. This is messy,
but matches the way people currently think about two digit dates. Whenever
possible, use an absolute four digit year instead.

=back

The scheme above allows interpretation of a wide range of dates, particularly
if 4-digit years are used. But it also means that the behavior of your code
changes as time passes, because the rolling "current century" changes each
year.

=head2 Limits of time_t

On perl versions older than 5.12.0, the range of dates that can be actually be
handled depends on the size of C<time_t> (usually a signed integer) on the
given platform. Currently, this is 32 bits for most systems, yielding an
approximate range from Dec 1901 to Jan 2038.

Both C<timelocal()> and C<timegm()> croak if given dates outside the supported
range.

As of version 5.12.0, perl has stopped using the time implementation of the
operating system it's running on. Instead, it has its own implementation of
those routines with a safe range of at least +/- 2**52 (about 142 million
years)

=head2 Ambiguous Local Times (DST)

Because of DST changes, there are many time zones where the same local time
occurs for two different GMT times on the same day. For example, in the
"Europe/Paris" time zone, the local time of 2001-10-28 02:30:00 can represent
either 2001-10-28 00:30:00 GMT, B<or> 2001-10-28 01:30:00 GMT.

When given an ambiguous local time, the timelocal() function will always return
the epoch for the I<earlier> of the two possible GMT times.

=head2 Non-Existent Local Times (DST)

When a DST change causes a locale clock to skip one hour forward, there will be
an hour's worth of local times that don't exist. Again, for the "Europe/Paris"
time zone, the local clock jumped from 2001-03-25 01:59:59 to 2001-03-25
03:00:00.

If the C<timelocal()> function is given a non-existent local time, it will
simply return an epoch value for the time one hour later.

=head2 Negative Epoch Values

On perl version 5.12.0 and newer, negative epoch values are fully supported.

On older versions of perl, negative epoch (C<time_t>) values, which are not
officially supported by the POSIX standards, are known not to work on some
systems. These include MacOS (pre-OSX) and Win32.

On systems which do support negative epoch values, this module should be able
to cope with dates before the start of the epoch, down the minimum value of
time_t for the system.

=head1 IMPLEMENTATION

These routines are quite efficient and yet are always guaranteed to agree with
C<localtime()> and C<gmtime()>. We manage this by caching the start times of
any months we've seen before. If we know the start time of the month, we can
always calculate any time within the month.  The start times are calculated
using a mathematical formula. Unlike other algorithms that do multiple calls to
C<gmtime()>.

The C<timelocal()> function is implemented using the same cache. We just assume
that we're translating a GMT time, and then fudge it when we're done for the
timezone and daylight savings arguments. Note that the timezone is evaluated
for each date because countries occasionally change their official timezones.
Assuming that C<localtime()> corrects for these changes, this routine will also
be correct.

=head1 AUTHORS EMERITUS

This module is based on a Perl 4 library, timelocal.pl, that was included with
Perl 4.036, and was most likely written by Tom Christiansen.

The current version was written by Graham Barr.

=head1 BUGS

The whole scheme for interpreting two-digit years can be considered a bug.

Bugs may be submitted at L<https://github.com/houseabsolute/Time-Local/issues>.

There is a mailing list available for users of this distribution,
L<mailto:datetime@perl.org>.

=head1 SOURCE

The source code repository for Time-Local can be found at L<https://github.com/houseabsolute/Time-Local>.

=head1 AUTHOR

Dave Rolsky <autarch@urth.org>

=head1 CONTRIBUTORS

=for stopwords Florian Ragwitz Gregory Oschwald J. Nick Koston Tom Wyant Unknown

=over 4

=item *

Florian Ragwitz <rafl@debian.org>

=item *

Gregory Oschwald <oschwald@gmail.com>

=item *

J. Nick Koston <nick@cpanel.net>

=item *

Tom Wyant <wyant@cpan.org>

=item *

Unknown <unknown@example.com>

=back

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 1997 - 2023 by Graham Barr & Dave Rolsky.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

The full text of the license can be found in the
F<LICENSE> file included with this distribution.

=cut
                                                                                                                                        usr/local/lib/perl5/5.40.0/Time/gmtime.pm                                                           0000444 0000000 0000000 00000004672 14714567415 016233  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Time::gmtime 1.05;
use v5.38;

use parent 'Time::tm';

our (   $tm_sec, $tm_min, $tm_hour, $tm_mday,
        $tm_mon, $tm_year, $tm_wday, $tm_yday, 
		$tm_isdst,
);

use Exporter 'import';
our @EXPORT      = qw(gmtime gmctime);
our @EXPORT_OK   = qw(
			$tm_sec $tm_min $tm_hour $tm_mday 
			$tm_mon $tm_year $tm_wday $tm_yday 
			$tm_isdst
		    );
our %EXPORT_TAGS = ( FIELDS => [ @EXPORT_OK, @EXPORT ] );

sub populate {
    return unless @_;
    my $tmob = Time::tm->new();
    @$tmob = (
		$tm_sec, $tm_min, $tm_hour, $tm_mday, 
		$tm_mon, $tm_year, $tm_wday, $tm_yday, 
		$tm_isdst )
	    = @_;
    return $tmob;
} 

sub gmtime  :prototype(;$) { populate CORE::gmtime(@_ ? shift : time) }
sub gmctime :prototype(;$) { scalar   CORE::gmtime(@_ ? shift : time) }

__END__

=head1 NAME

Time::gmtime - by-name interface to Perl's built-in gmtime() function

=head1 SYNOPSIS

 use Time::gmtime;
 $gm = gmtime();
 printf "The day in Greenwich is %s\n", 
    (qw(Sun Mon Tue Wed Thu Fri Sat Sun))[ $gm->wday() ];

 use Time::gmtime qw(:FIELDS);
 gmtime();
 printf "The day in Greenwich is %s\n", 
    (qw(Sun Mon Tue Wed Thu Fri Sat Sun))[ $tm_wday ];

 $now = gmctime();

 use Time::gmtime;
 use File::stat;
 $date_string = gmctime(stat($file)->mtime);

=head1 DESCRIPTION

This module's default exports override the core gmtime() function,
replacing it with a version that returns "Time::tm" objects.
This object has methods that return the similarly named structure field
name from the C's tm structure from F<time.h>; namely sec, min, hour,
mday, mon, year, wday, yday, and isdst.

You may also import all the structure fields directly into your namespace
as regular variables using the :FIELDS import tag.  (Note that this
still overrides your core functions.)  Access these fields as variables
named with a preceding C<tm_> in front their method names.  Thus,
C<$tm_obj-E<gt>mday()> corresponds to $tm_mday if you import the fields.

The gmctime() function provides a way of getting at the 
scalar sense of the original CORE::gmtime() function.

To access this functionality without the core overrides,
pass the C<use> an empty import list, and then access
function functions with their full qualified names.
On the other hand, the built-ins are still available
via the C<CORE::> pseudo-package.

=head1 NOTE

While this class is currently implemented using the Class::Struct
module to build a struct-like class, you shouldn't rely upon this.

=head1 AUTHOR

Tom Christiansen
                                                                      usr/local/lib/perl5/5.40.0/Time/localtime.pm                                                        0000444 0000000 0000000 00000004416 14714567415 016716  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Time::localtime 1.04;
use v5.38;

use parent 'Time::tm';

our (  
      $tm_sec, $tm_min, $tm_hour, $tm_mday,
      $tm_mon, $tm_year, $tm_wday, $tm_yday,
      $tm_isdst
);

use Exporter   'import';
our @EXPORT      = qw(localtime ctime);
our @EXPORT_OK   = qw(
			$tm_sec $tm_min $tm_hour $tm_mday 
			$tm_mon $tm_year $tm_wday $tm_yday 
			$tm_isdst
		    );
our %EXPORT_TAGS = ( FIELDS => [ @EXPORT_OK, @EXPORT ] );

sub populate {
    return unless @_;
    my $tmob = Time::tm->new();
    @$tmob = (
		$tm_sec, $tm_min, $tm_hour, $tm_mday, 
		$tm_mon, $tm_year, $tm_wday, $tm_yday, 
		$tm_isdst )
	    = @_;
    return $tmob;
} 

sub localtime :prototype(;$) { populate CORE::localtime(@_ ? shift : time) }
sub ctime     :prototype(;$) { scalar   CORE::localtime(@_ ? shift : time) }

__END__

=head1 NAME

Time::localtime - by-name interface to Perl's built-in localtime() function

=head1 SYNOPSIS

 use Time::localtime;
 printf "Year is %d\n", localtime->year() + 1900;

 $now = ctime();

 use Time::localtime;
 use File::stat;
 $date_string = ctime(stat($file)->mtime);

=head1 DESCRIPTION

This module's default exports override the core localtime() function,
replacing it with a version that returns "Time::tm" objects.
This object has methods that return the similarly named structure field
name from the C's tm structure from F<time.h>; namely sec, min, hour,
mday, mon, year, wday, yday, and isdst.

You may also import all the structure fields directly into your namespace
as regular variables using the :FIELDS import tag.  (Note that this still
overrides your core functions.)  Access these fields as
variables named with a preceding C<tm_> in front their method names.
Thus, C<$tm_obj-E<gt>mday()> corresponds to $tm_mday if you import
the fields.

The ctime() function provides a way of getting at the 
scalar sense of the original CORE::localtime() function.

To access this functionality without the core overrides,
pass the C<use> an empty import list, and then access
function functions with their full qualified names.
On the other hand, the built-ins are still available
via the C<CORE::> pseudo-package.

=head1 NOTE

While this class is currently implemented using the Class::Struct
module to build a struct-like class, you shouldn't rely upon this.

=head1 AUTHOR

Tom Christiansen
                                                                                                                                                                                                                                                  usr/local/lib/perl5/5.40.0/Time/tm.pm                                                               0000444 0000000 0000000 00000001234 14714567415 015360  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Time::tm 1.01;
use v5.38;

use Class::Struct qw(struct);
struct('Time::tm' => [
     map { $_ => '$' } qw{ sec min hour mday mon year wday yday isdst }
]);

__END__

=head1 NAME

Time::tm - internal object used by Time::gmtime and Time::localtime

=head1 SYNOPSIS

Don't use this module directly.

=head1 DESCRIPTION

This module is used internally as a base class by Time::localtime And
Time::gmtime functions.  It creates a Time::tm struct object which is
addressable just like's C's tm structure from F<time.h>; namely with sec,
min, hour, mday, mon, year, wday, yday, and isdst.

This class is an internal interface only. 

=head1 AUTHOR

Tom Christiansen
                                                                                                                                                                                                                                                                                                                                                                    usr/local/lib/perl5/5.40.0/UNIVERSAL.pm                                                             0000444 0000000 0000000 00000014500 14714567415 015412  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package UNIVERSAL;

our $VERSION = '1.17';

# UNIVERSAL.pm should not contain any methods/subs, they
# are all defined in universal.c

1;
__END__

=head1 NAME

UNIVERSAL - base class for ALL classes (blessed references)

=head1 SYNOPSIS

    my $obj_is_io    = $fd->isa("IO::Handle");
    my $cls_is_io    = Class->isa("IO::Handle");

    my $obj_does_log = $obj->DOES("Logger");
    my $cls_does_log = Class->DOES("Logger");

    my $obj_sub      = $obj->can("print");
    my $cls_sub      = Class->can("print");

    my $eval_sub     = eval { $ref->can("fandango") };
    my $ver          = $obj->VERSION;

    # but never do this!
    my $is_io        = UNIVERSAL::isa($fd, "IO::Handle");
    my $sub          = UNIVERSAL::can($obj, "print");

=head1 DESCRIPTION

C<UNIVERSAL> is the base class from which all blessed references inherit.
See L<perlobj>.

C<UNIVERSAL> provides the following methods:

=over 4

=item C<< $obj->isa( TYPE ) >>

=item C<< CLASS->isa( TYPE ) >>

=item C<< eval { VAL->isa( TYPE ) } >>

Where

=over 4

=item C<TYPE>

is a package name

=item C<$obj>

is a blessed reference or a package name

=item C<CLASS>

is a package name

=item C<VAL>

is any of the above or an unblessed reference

=back

When used as an instance or class method (C<< $obj->isa( TYPE ) >>),
C<isa> returns I<true> if $obj is blessed into package C<TYPE> or
inherits from package C<TYPE>.

When used as a class method (C<< CLASS->isa( TYPE ) >>, sometimes
referred to as a static method), C<isa> returns I<true> if C<CLASS>
inherits from (or is itself) the name of the package C<TYPE> or
inherits from package C<TYPE>.

If you're not sure what you have (the C<VAL> case), wrap the method call in an
C<eval> block to catch the exception if C<VAL> is undefined or an unblessed
reference. The L<C<isa> operator|perlop/"Class Instance Operator"> is an
alternative that simply returns false in this case, so the C<eval> is not
needed.

If you want to be sure that you're calling C<isa> on an instance, not a class,
check the invocant with C<blessed> from L<Scalar::Util> first:

  use Scalar::Util 'blessed';

  if ( blessed( $obj ) && $obj->isa("Some::Class") ) {
      ...
  }

=item C<< $obj->DOES( ROLE ) >>

=item C<< CLASS->DOES( ROLE ) >>

C<DOES> checks if the object or class performs the role C<ROLE>.  A role is a
named group of specific behavior (often methods of particular names and
signatures), similar to a class, but not necessarily a complete class by
itself.  For example, logging or serialization may be roles.

C<DOES> and C<isa> are similar, in that if either is true, you know that the
object or class on which you call the method can perform specific behavior.
However, C<DOES> is different from C<isa> in that it does not care I<how> the
invocand performs the operations, merely that it does.  (C<isa> of course
mandates an inheritance relationship.  Other relationships include aggregation,
delegation, and mocking.)

By default, classes in Perl only perform the C<UNIVERSAL> role, as well as the
role of all classes in their inheritance.  In other words, by default C<DOES>
responds identically to C<isa>.

There is a relationship between roles and classes, as each class implies the
existence of a role of the same name.  There is also a relationship between
inheritance and roles, in that a subclass that inherits from an ancestor class
implicitly performs any roles its parent performs.  Thus you can use C<DOES> in
place of C<isa> safely, as it will return true in all places where C<isa> will
return true (provided that any overridden C<DOES> I<and> C<isa> methods behave
appropriately).

=item C<< $obj->can( METHOD ) >>

=item C<< CLASS->can( METHOD ) >>

=item C<< eval { VAL->can( METHOD ) } >>

C<can> checks if the object or class has a method called C<METHOD>. If it does,
then it returns a reference to the sub.  If it does not, then it returns
I<undef>.  This includes methods inherited or imported by C<$obj>, C<CLASS>, or
C<VAL>.

C<can> cannot know whether an object will be able to provide a method through
AUTOLOAD (unless the object's class has overridden C<can> appropriately), so a
return value of I<undef> does not necessarily mean the object will not be able
to handle the method call. To get around this some module authors use a forward
declaration (see L<perlsub>) for methods they will handle via AUTOLOAD. For
such 'dummy' subs, C<can> will still return a code reference, which, when
called, will fall through to the AUTOLOAD. If no suitable AUTOLOAD is provided,
calling the coderef will cause an error.

You may call C<can> as a class (static) method or an object method.

Again, the same rule about having a valid invocand applies -- use an C<eval>
block or C<blessed> if you need to be extra paranoid.

=item C<VERSION ( [ REQUIRE ] )>

C<VERSION> will return the value of the variable C<$VERSION> in the
package the object is blessed into. If C<REQUIRE> is given then
it will do a comparison and die if the package version is not
greater than or equal to C<REQUIRE>, or if either C<$VERSION> or C<REQUIRE>
is not a "lax" version number (as defined by the L<version> module).

The return from C<VERSION> will actually be the stringified version object
using the package C<$VERSION> scalar, which is guaranteed to be equivalent
but may not be precisely the contents of the C<$VERSION> scalar.  If you want
the actual contents of C<$VERSION>, use C<$CLASS::VERSION> instead.

C<VERSION> can be called as either a class (static) method or an object
method.

=back

=head1 WARNINGS

B<NOTE:> C<can> directly uses Perl's internal code for method lookup, and
C<isa> uses a very similar method and cache-ing strategy. This may cause
strange effects if the Perl code dynamically changes @ISA in any package.

You may add other methods to the UNIVERSAL class via Perl or XS code.
You do not need to C<use UNIVERSAL> to make these methods
available to your program (and you should not do so).

=head1 EXPORTS

None.

Previous versions of this documentation suggested using C<isa> as
a function to determine the type of a reference:

  $yes = UNIVERSAL::isa($h, "HASH");
  $yes = UNIVERSAL::isa("Foo", "Bar");

The problem is that this code would I<never> call an overridden C<isa> method in
any class.  Instead, use C<reftype> from L<Scalar::Util> for the first case:

  use Scalar::Util 'reftype';

  $yes = reftype( $h ) eq "HASH";

and the method form of C<isa> for the second:

  $yes = Foo->isa("Bar");

=cut
                                                                                                                                                                                                usr/local/lib/perl5/5.40.0/Unicode/                                                                 0000755 0000000 0000000 00000000000 14714567415 015074  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/lib/perl5/5.40.0/Unicode/Collate/                                                         0000755 0000000 0000000 00000000000 14714567415 016457  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/lib/perl5/5.40.0/Unicode/Collate/CJK/                                                     0000755 0000000 0000000 00000000000 14714567415 017066  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/lib/perl5/5.40.0/Unicode/Collate/CJK/Big5.pm                                              0000444 0000000 0000000 00000201644 14714567415 020217  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Unicode::Collate::CJK::Big5;

use 5.006;
use strict;
use warnings;

our $VERSION = '1.31';

my %u2p;
my $wt = 0x8000;

while (<DATA>) {
    last if /^__END__/;
    my @c = split;
    for my $c (@c) {
	next if !$c;
	$u2p{hex($c)} = $wt;
	$wt++;
    }
}

sub weightBig5 {
    my $u = shift;
    return exists $u2p{$u} ? $u2p{$u} : undef;
}

1;
__DATA__
5159 515B 515E 515D 5161 5163 55E7 74E9 7CCE 4E00
4E59 4E01 4E03 4E43 4E5D 4E86 4E8C 4EBA 513F 5165
516B 51E0 5200 5201 529B 5315 5341 535C 53C8 4E09
4E0B 4E08 4E0A 4E2B 4E38 51E1 4E45 4E48 4E5F 4E5E
4E8E 4EA1 5140 5203 52FA 5343 53C9 53E3 571F 58EB
5915 5927 5973 5B50 5B51 5B53 5BF8 5C0F 5C22 5C38
5C71 5DDD 5DE5 5DF1 5DF2 5DF3 5DFE 5E72 5EFE 5F0B
5F13 624D 4E11 4E10 4E0D 4E2D 4E30 4E39 4E4B 5C39
4E88 4E91 4E95 4E92 4E94 4EA2 4EC1 4EC0 4EC3 4EC6
4EC7 4ECD 4ECA 4ECB 4EC4 5143 5141 5167 516D 516E
516C 5197 51F6 5206 5207 5208 52FB 52FE 52FF 5316
5339 5348 5347 5345 535E 5384 53CB 53CA 53CD 58EC
5929 592B 592A 592D 5B54 5C11 5C24 5C3A 5C6F 5DF4
5E7B 5EFF 5F14 5F15 5FC3 6208 6236 624B 624E 652F
6587 6597 65A4 65B9 65E5 66F0 6708 6728 6B20 6B62
6B79 6BCB 6BD4 6BDB 6C0F 6C34 706B 722A 7236 723B
7247 7259 725B 72AC 738B 4E19 4E16 4E15 4E14 4E18
4E3B 4E4D 4E4F 4E4E 4EE5 4ED8 4ED4 4ED5 4ED6 4ED7
4EE3 4EE4 4ED9 4EDE 5145 5144 5189 518A 51AC 51F9
51FA 51F8 520A 52A0 529F 5305 5306 5317 531D 4EDF
534A 5349 5361 5360 536F 536E 53BB 53EF 53E4 53F3
53EC 53EE 53E9 53E8 53FC 53F8 53F5 53EB 53E6 53EA
53F2 53F1 53F0 53E5 53ED 53FB 56DB 56DA 5916 592E
5931 5974 5976 5B55 5B83 5C3C 5DE8 5DE7 5DE6 5E02
5E03 5E73 5E7C 5F01 5F18 5F17 5FC5 620A 6253 6254
6252 6251 65A5 65E6 672E 672C 672A 672B 672D 6B63
6BCD 6C11 6C10 6C38 6C41 6C40 6C3E 72AF 7384 7389
74DC 74E6 7518 751F 7528 7529 7530 7531 7532 7533
758B 767D 76AE 76BF 76EE 77DB 77E2 77F3 793A 79BE
7A74 7ACB 4E1E 4E1F 4E52 4E53 4E69 4E99 4EA4 4EA6
4EA5 4EFF 4F09 4F19 4F0A 4F15 4F0D 4F10 4F11 4F0F
4EF2 4EF6 4EFB 4EF0 4EF3 4EFD 4F01 4F0B 5149 5147
5146 5148 5168 5171 518D 51B0 5217 5211 5212 520E
5216 52A3 5308 5321 5320 5370 5371 5409 540F 540C
540A 5410 5401 540B 5404 5411 540D 5408 5403 540E
5406 5412 56E0 56DE 56DD 5733 5730 5728 572D 572C
572F 5729 5919 591A 5937 5938 5984 5978 5983 597D
5979 5982 5981 5B57 5B58 5B87 5B88 5B85 5B89 5BFA
5C16 5C79 5DDE 5E06 5E76 5E74 5F0F 5F1B 5FD9 5FD6
620E 620C 620D 6210 6263 625B 6258 6536 65E9 65E8
65EC 65ED 66F2 66F3 6709 673D 6734 6731 6735 6B21
6B64 6B7B 6C16 6C5D 6C57 6C59 6C5F 6C60 6C50 6C55
6C61 6C5B 6C4D 6C4E 7070 725F 725D 767E 7AF9 7C73
7CF8 7F36 7F8A 7FBD 8001 8003 800C 8012 8033 807F
8089 808B 808C 81E3 81EA 81F3 81FC 820C 821B 821F
826E 8272 827E 866B 8840 884C 8863 897F 9621 4E32
4EA8 4F4D 4F4F 4F47 4F57 4F5E 4F34 4F5B 4F55 4F30
4F50 4F51 4F3D 4F3A 4F38 4F43 4F54 4F3C 4F46 4F63
4F5C 4F60 4F2F 4F4E 4F36 4F59 4F5D 4F48 4F5A 514C
514B 514D 5175 51B6 51B7 5225 5224 5229 522A 5228
52AB 52A9 52AA 52AC 5323 5373 5375 541D 542D 541E
543E 5426 544E 5427 5446 5443 5433 5448 5442 541B
5429 544A 5439 543B 5438 542E 5435 5436 5420 543C
5440 5431 542B 541F 542C 56EA 56F0 56E4 56EB 574A
5751 5740 574D 5747 574E 573E 5750 574F 573B 58EF
593E 599D 5992 59A8 599E 59A3 5999 5996 598D 59A4
5993 598A 59A5 5B5D 5B5C 5B5A 5B5B 5B8C 5B8B 5B8F
5C2C 5C40 5C41 5C3F 5C3E 5C90 5C91 5C94 5C8C 5DEB
5E0C 5E8F 5E87 5E8A 5EF7 5F04 5F1F 5F64 5F62 5F77
5F79 5FD8 5FCC 5FD7 5FCD 5FF1 5FEB 5FF8 5FEA 6212
6211 6284 6297 6296 6280 6276 6289 626D 628A 627C
627E 6279 6273 6292 626F 6298 626E 6295 6293 6291
6286 6539 653B 6538 65F1 66F4 675F 674E 674F 6750
6751 675C 6756 675E 6749 6746 6760 6753 6757 6B65
6BCF 6C42 6C5E 6C99 6C81 6C88 6C89 6C85 6C9B 6C6A
6C7A 6C90 6C70 6C8C 6C68 6C96 6C92 6C7D 6C83 6C72
6C7E 6C74 6C86 6C76 6C8D 6C94 6C98 6C82 7076 707C
707D 7078 7262 7261 7260 72C4 72C2 7396 752C 752B
7537 7538 7682 76EF 77E3 79C1 79C0 79BF 7A76 7CFB
7F55 8096 8093 809D 8098 809B 809A 80B2 826F 8292
828B 828D 898B 89D2 8A00 8C37 8C46 8C55 8C9D 8D64
8D70 8DB3 8EAB 8ECA 8F9B 8FB0 8FC2 8FC6 8FC5 8FC4
5DE1 9091 90A2 90AA 90A6 90A3 9149 91C6 91CC 9632
962E 9631 962A 962C 4E26 4E56 4E73 4E8B 4E9B 4E9E
4EAB 4EAC 4F6F 4F9D 4F8D 4F73 4F7F 4F6C 4F9B 4F8B
4F86 4F83 4F70 4F75 4F88 4F69 4F7B 4F96 4F7E 4F8F
4F91 4F7A 5154 5152 5155 5169 5177 5176 5178 51BD
51FD 523B 5238 5237 523A 5230 522E 5236 5241 52BE
52BB 5352 5354 5353 5351 5366 5377 5378 5379 53D6
53D4 53D7 5473 5475 5496 5478 5495 5480 547B 5477
5484 5492 5486 547C 5490 5471 5476 548C 549A 5462
5468 548B 547D 548E 56FA 5783 5777 576A 5769 5761
5766 5764 577C 591C 5949 5947 5948 5944 5954 59BE
59BB 59D4 59B9 59AE 59D1 59C6 59D0 59CD 59CB 59D3
59CA 59AF 59B3 59D2 59C5 5B5F 5B64 5B63 5B97 5B9A
5B98 5B9C 5B99 5B9B 5C1A 5C48 5C45 5C46 5CB7 5CA1
5CB8 5CA9 5CAB 5CB1 5CB3 5E18 5E1A 5E16 5E15 5E1B
5E11 5E78 5E9A 5E97 5E9C 5E95 5E96 5EF6 5F26 5F27
5F29 5F80 5F81 5F7F 5F7C 5FDD 5FE0 5FFD 5FF5 5FFF
600F 6014 602F 6035 6016 602A 6015 6021 6027 6029
602B 601B 6216 6215 623F 623E 6240 627F 62C9 62CC
62C4 62BF 62C2 62B9 62D2 62DB 62AB 62D3 62D4 62CB
62C8 62A8 62BD 62BC 62D0 62D9 62C7 62CD 62B5 62DA
62B1 62D8 62D6 62D7 62C6 62AC 62CE 653E 65A7 65BC
65FA 6614 6613 660C 6606 6602 660E 6600 660F 6615
660A 6607 670D 670B 676D 678B 6795 6771 679C 6773
6777 6787 679D 6797 676F 6770 677F 6789 677E 6790
6775 679A 6793 677C 676A 6772 6B23 6B66 6B67 6B7F
6C13 6C1B 6CE3 6CE8 6CF3 6CB1 6CCC 6CE5 6CB3 6CBD
6CBE 6CBC 6CE2 6CAB 6CD5 6CD3 6CB8 6CC4 6CB9 6CC1
6CAE 6CD7 6CC5 6CF1 6CBF 6CBB 6CE1 6CDB 6CCA 6CAC
6CEF 6CDC 6CD6 6CE0 7095 708E 7092 708A 7099 722C
722D 7238 7248 7267 7269 72C0 72CE 72D9 72D7 72D0
73A9 73A8 739F 73AB 73A5 753D 759D 7599 759A 7684
76C2 76F2 76F4 77E5 77FD 793E 7940 7941 79C9 79C8
7A7A 7A79 7AFA 7CFE 7F54 7F8C 7F8B 8005 80BA 80A5
80A2 80B1 80A1 80AB 80A9 80B4 80AA 80AF 81E5 81FE
820D 82B3 829D 8299 82AD 82BD 829F 82B9 82B1 82AC
82A5 82AF 82B8 82A3 82B0 82BE 82B7 864E 8671 521D
8868 8ECB 8FCE 8FD4 8FD1 90B5 90B8 90B1 90B6 91C7
91D1 9577 9580 961C 9640 963F 963B 9644 9642 96B9
96E8 9752 975E 4E9F 4EAD 4EAE 4FE1 4FB5 4FAF 4FBF
4FE0 4FD1 4FCF 4FDD 4FC3 4FB6 4FD8 4FDF 4FCA 4FD7
4FAE 4FD0 4FC4 4FC2 4FDA 4FCE 4FDE 4FB7 5157 5192
5191 51A0 524E 5243 524A 524D 524C 524B 5247 52C7
52C9 52C3 52C1 530D 5357 537B 539A 53DB 54AC 54C0
54A8 54CE 54C9 54B8 54A6 54B3 54C7 54C2 54BD 54AA
54C1 54C4 54C8 54AF 54AB 54B1 54BB 54A9 54A7 54BF
56FF 5782 578B 57A0 57A3 57A2 57CE 57AE 5793 5955
5951 594F 594E 5950 59DC 59D8 59FF 59E3 59E8 5A03
59E5 59EA 59DA 59E6 5A01 59FB 5B69 5BA3 5BA6 5BA4
5BA2 5BA5 5C01 5C4E 5C4F 5C4D 5C4B 5CD9 5CD2 5DF7
5E1D 5E25 5E1F 5E7D 5EA0 5EA6 5EFA 5F08 5F2D 5F65
5F88 5F85 5F8A 5F8B 5F87 5F8C 5F89 6012 601D 6020
6025 600E 6028 604D 6070 6068 6062 6046 6043 606C
606B 606A 6064 6241 62DC 6316 6309 62FC 62ED 6301
62EE 62FD 6307 62F1 62F7 62EF 62EC 62FE 62F4 6311
6302 653F 6545 65AB 65BD 65E2 6625 662D 6620 6627
662F 661F 6628 6631 6624 66F7 67FF 67D3 67F1 67D4
67D0 67EC 67B6 67AF 67F5 67E9 67EF 67C4 67D1 67B4
67DA 67E5 67B8 67CF 67DE 67F3 67B0 67D9 67E2 67DD
67D2 6B6A 6B83 6B86 6BB5 6BD2 6BD7 6C1F 6CC9 6D0B
6D32 6D2A 6D41 6D25 6D0C 6D31 6D1E 6D17 6D3B 6D3D
6D3E 6D36 6D1B 6CF5 6D39 6D27 6D38 6D29 6D2E 6D35
6D0E 6D2B 70AB 70BA 70B3 70AC 70AF 70AD 70B8 70AE
70A4 7230 7272 726F 7274 72E9 72E0 72E1 73B7 73CA
73BB 73B2 73CD 73C0 73B3 751A 752D 754F 754C 754E
754B 75AB 75A4 75A5 75A2 75A3 7678 7686 7687 7688
76C8 76C6 76C3 76C5 7701 76F9 76F8 7709 770B 76FE
76FC 7707 77DC 7802 7814 780C 780D 7946 7949 7948
7947 79B9 79BA 79D1 79D2 79CB 7A7F 7A81 7AFF 7AFD
7C7D 7D02 7D05 7D00 7D09 7D07 7D04 7D06 7F38 7F8E
7FBF 8004 8010 800D 8011 8036 80D6 80E5 80DA 80C3
80C4 80CC 80E1 80DB 80CE 80DE 80E4 80DD 81F4 8222
82E7 8303 8305 82E3 82DB 82E6 8304 82E5 8302 8309
82D2 82D7 82F1 8301 82DC 82D4 82D1 82DE 82D3 82DF
82EF 8306 8650 8679 867B 867A 884D 886B 8981 89D4
8A08 8A02 8A03 8C9E 8CA0 8D74 8D73 8DB4 8ECD 8ECC
8FF0 8FE6 8FE2 8FEA 8FE5 8FED 8FEB 8FE4 8FE8 90CA
90CE 90C1 90C3 914B 914A 91CD 9582 9650 964B 964C
964D 9762 9769 97CB 97ED 97F3 9801 98A8 98DB 98DF
9996 9999 4E58 4EB3 500C 500D 5023 4FEF 5026 5025
4FF8 5029 5016 5006 503C 501F 501A 5012 5011 4FFA
5000 5014 5028 4FF1 5021 500B 5019 5018 4FF3 4FEE
502D 502A 4FFE 502B 5009 517C 51A4 51A5 51A2 51CD
51CC 51C6 51CB 5256 525C 5254 525B 525D 532A 537F
