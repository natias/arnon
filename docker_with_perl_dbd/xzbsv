

# Bytes that break XML even in a CDATA block: control characters 0-31
# sans \t, \n and \r
CDATA_EVIL = re.compile(br"[\000-\010\013\014\016-\037]")

# Match feature conditionalized output lines in the form, capturing the feature
# list in group 2, and the preceeding line output in group 1:
#
#   output..output (feature !)\n
optline = re.compile(br'(.*) \((.+?) !\)\n$')


def cdatasafe(data):
    """Make a string safe to include in a CDATA block.

    Certain control characters are illegal in a CDATA block, and
    there's no way to include a ]]> in a CDATA either. This function
    replaces illegal bytes with ? and adds a space between the ]] so
    that it won't break the CDATA block.
    """
    return CDATA_EVIL.sub(b'?', data).replace(b']]>', b'] ]>')


def log(*msg):
    """Log something to stdout.

    Arguments are strings to print.
    """
    with iolock:
        if verbose:
            print(verbose, end=' ')
        for m in msg:
            print(m, end=' ')
        print()
        sys.stdout.flush()


def highlightdiff(line, color):
    if not color:
        return line
    assert pygmentspresent
    return pygments.highlight(
        line.decode('latin1'), difflexer, terminal256formatter
    ).encode('latin1')


def highlightmsg(msg, color):
    if not color:
        return msg
    assert pygmentspresent
    return pygments.highlight(msg, runnerlexer, runnerformatter)


def terminate(proc):
    """Terminate subprocess"""
    vlog('# Terminating process %d' % proc.pid)
    try:
        proc.terminate()
    except OSError:
        pass


def killdaemons(pidfile):
    import killdaemons as killmod

    return killmod.killdaemons(pidfile, tryhard=False, remove=True, logfn=vlog)


# sysconfig is not thread-safe (https://github.com/python/cpython/issues/92452)
sysconfiglock = threading.Lock()


class Test(unittest.TestCase):
    """Encapsulates a single, runnable test.

    While this class conforms to the unittest.TestCase API, it differs in that
    instances need to be instantiated manually. (Typically, unittest.TestCase
    classes are instantiated automatically by scanning modules.)
    """

    # Status code reserved for skipped tests (used by hghave).
    SKIPPED_STATUS = 80

    def __init__(
        self,
        path,
        outputdir,
        tmpdir,
        keeptmpdir=False,
        debug=False,
        first=False,
        timeout=None,
        startport=None,
        extraconfigopts=None,
        shell=None,
        hgcommand=None,
        slowtimeout=None,
        usechg=False,
        chgdebug=False,
        useipv6=False,
    ):
        """Create a test from parameters.

        path is the full path to the file defining the test.

        tmpdir is the main temporary directory to use for this test.

        keeptmpdir determines whether to keep the test's temporary directory
        after execution. It defaults to removal (False).

        debug mode will make the test execute verbosely, with unfiltered
        output.

        timeout controls the maximum run time of the test. It is ignored when
        debug is True. See slowtimeout for tests with #require slow.

        slowtimeout overrides timeout if the test has #require slow.

        startport controls the starting port number to use for this test. Each
        test will reserve 3 port numbers for execution. It is the caller's
        responsibility to allocate a non-overlapping port range to Test
        instances.

        extraconfigopts is an iterable of extra hgrc config options. Values
        must have the form "key=value" (something understood by hgrc). Values
        of the form "foo.key=value" will result in "[foo] key=value".

        shell is the shell to execute tests in.
        """
        if timeout is None:
            timeout = defaults['timeout']
        if startport is None:
            startport = defaults['port']
        if slowtimeout is None:
            slowtimeout = defaults['slowtimeout']
        self.path = path
        self.relpath = os.path.relpath(path)
        self.bname = os.path.basename(path)
        self.name = _bytes2sys(self.bname)
        self._testdir = os.path.dirname(path)
        self._outputdir = outputdir
        self._tmpname = os.path.basename(path)
        self.errpath = os.path.join(self._outputdir, b'%s.err' % self.bname)

        self._threadtmp = tmpdir
        self._keeptmpdir = keeptmpdir
        self._debug = debug
        self._first = first
        self._timeout = timeout
        self._slowtimeout = slowtimeout
        self._startport = startport
        self._extraconfigopts = extraconfigopts or []
        self._shell = _sys2bytes(shell)
        self._hgcommand = hgcommand or b'hg'
        self._usechg = usechg
        self._chgdebug = chgdebug
        self._useipv6 = useipv6

        self._aborted = False
        self._daemonpids = []
        self._finished = None
        self._ret = None
        self._out = None
        self._skipped = None
        self._testtmp = None
        self._chgsockdir = None

        self._refout = self.readrefout()

    def readrefout(self):
        """read reference output"""
        # If we're not in --debug mode and reference output file exists,
        # check test output against it.
        if self._debug:
            return None  # to match "out is None"
        elif os.path.exists(self.refpath):
            with open(self.refpath, 'rb') as f:
                return f.read().splitlines(True)
        else:
            return []

    # needed to get base class __repr__ running
    @property
    def _testMethodName(self):
        return self.name

    def __str__(self):
        return self.name

    def shortDescription(self):
        return self.name

    def setUp(self):
        """Tasks to perform before run()."""
        self._finished = False
        self._ret = None
        self._out = None
        self._skipped = None

        try:
            os.mkdir(self._threadtmp)
        except FileExistsError:
            pass

        name = self._tmpname
        self._testtmp = os.path.join(self._threadtmp, name)
        os.mkdir(self._testtmp)

        # Remove any previous output files.
        if os.path.exists(self.errpath):
            try:
                os.remove(self.errpath)
            except FileNotFoundError:
                # We might have raced another test to clean up a .err file,
                # so ignore FileNotFoundError when removing a previous .err
                # file.
                pass

        if self._usechg:
            self._chgsockdir = os.path.join(
                self._threadtmp, b'%s.chgsock' % name
            )
            os.mkdir(self._chgsockdir)

    def run(self, result):
        """Run this test and report results against a TestResult instance."""
        # This function is extremely similar to unittest.TestCase.run(). Once
        # we require Python 2.7 (or at least its version of unittest), this
        # function can largely go away.
        self._result = result
        result.startTest(self)
        try:
            try:
                self.setUp()
            except (KeyboardInterrupt, SystemExit):
                self._aborted = True
                raise
            except Exception:
                result.addError(self, sys.exc_info())
                return

            success = False
            try:
                self.runTest()
            except KeyboardInterrupt:
                self._aborted = True
                raise
            except unittest.SkipTest as e:
                result.addSkip(self, str(e))
                # The base class will have already counted this as a
                # test we "ran", but we want to exclude skipped tests
                # from those we count towards those run.
                result.testsRun -= 1
            except self.failureException as e:
                # This differs from unittest in that we don't capture
                # the stack trace. This is for historical reasons and
                # this decision could be revisited in the future,
                # especially for PythonTest instances.
                if result.addFailure(self, str(e)):
                    success = True
            except Exception:
                result.addError(self, sys.exc_info())
            else:
                success = True

            try:
                self.tearDown()
            except (KeyboardInterrupt, SystemExit):
                self._aborted = True
                raise
            except Exception:
                result.addError(self, sys.exc_info())
                success = False

            if success:
                result.addSuccess(self)
        finally:
            result.stopTest(self, interrupted=self._aborted)

    def runTest(self):
        """Run this test instance.

        This will return a tuple describing the result of the test.
        """
        env = self._getenv()
        self._genrestoreenv(env)
        self._daemonpids.append(env['DAEMON_PIDS'])
        self._createhgrc(env['HGRCPATH'])

        vlog('# Test', self.name)

        ret, out = self._run(env)
        self._finished = True
        self._ret = ret
        self._out = out

        def describe(ret):
            if ret < 0:
                return 'killed by signal: %d' % -ret
            return 'returned error code %d' % ret

        self._skipped = False

        if ret == self.SKIPPED_STATUS:
            if out is None:  # Debug mode, nothing to parse.
                missing = ['unknown']
                failed = None
            else:
                missing, failed = TTest.parsehghaveoutput(out)

            if not missing:
                missing = ['skipped']

            if failed:
                self.fail('hg have failed checking for %s' % failed[-1])
            else:
                self._skipped = True
                raise unittest.SkipTest(missing[-1])
        elif ret == 'timeout':
            self.fail('timed out')
        elif ret is False:
            self.fail('no result code from test')
        elif out != self._refout:
            # Diff generation may rely on written .err file.
            if (
                (ret != 0 or out != self._refout)
                and not self._skipped
                and not self._debug
            ):
                with open(self.errpath, 'wb') as f:
                    for line in out:
                        f.write(line)

            # The result object handles diff calculation for us.
            with firstlock:
                if self._result.addOutputMismatch(self, ret, out, self._refout):
                    # change was accepted, skip failing
                    return
                if self._first:
                    global firsterror
                    firsterror = True

            if ret:
                msg = 'output changed and ' + describe(ret)
            else:
                msg = 'output changed'

            self.fail(msg)
        elif ret:
            self.fail(describe(ret))

    def tearDown(self):
        """Tasks to perform after run()."""
        for entry in self._daemonpids:
            killdaemons(entry)
        self._daemonpids = []

        if self._keeptmpdir:
            log(
                '\nKeeping testtmp dir: %s\nKeeping threadtmp dir: %s'
                % (
                    _bytes2sys(self._testtmp),
                    _bytes2sys(self._threadtmp),
                )
            )
        else:
            try:
                shutil.rmtree(self._testtmp)
            except OSError:
                # unreadable directory may be left in $TESTTMP; fix permission
                # and try again
                makecleanable(self._testtmp)
                shutil.rmtree(self._testtmp, True)
            shutil.rmtree(self._threadtmp, True)

        if self._usechg:
            # chgservers will stop automatically after they find the socket
            # files are deleted
            shutil.rmtree(self._chgsockdir, True)

        if (
            (self._ret != 0 or self._out != self._refout)
            and not self._skipped
            and not self._debug
            and self._out
        ):
            with open(self.errpath, 'wb') as f:
                for line in self._out:
                    f.write(line)

        vlog("# Ret was:", self._ret, '(%s)' % self.name)

    def _run(self, env):
        # This should be implemented in child classes to run tests.
        raise unittest.SkipTest('unknown test type')

    def abort(self):
        """Terminate execution of this test."""
        self._aborted = True

    def _portmap(self, i):
        offset = b'' if i == 0 else b'%d' % i
        return (br':%d\b' % (self._startport + i), b':$HGPORT%s' % offset)

    def _getreplacements(self):
        """Obtain a mapping of text replacements to apply to test output.

        Test output needs to be normalized so it can be compared to expected
        output. This function defines how some of that normalization will
        occur.
        """
        r = [
            # This list should be parallel to defineport in _getenv
            self._portmap(0),
            self._portmap(1),
            self._portmap(2),
            (br'([^0-9])%s' % re.escape(self._localip()), br'\1$LOCALIP'),
            (br'\bHG_TXNID=TXN:[a-f0-9]{40}\b', br'HG_TXNID=TXN:$ID$'),
        ]
        r.append((self._escapepath(self._testtmp), b'$TESTTMP'))
        if WINDOWS:
            # JSON output escapes backslashes in Windows paths, so also catch a
            # double-escape.
            replaced = self._testtmp.replace(b'\\', br'\\')
            r.append((self._escapepath(replaced), b'$STR_REPR_TESTTMP'))

        replacementfile = os.path.join(self._testdir, b'common-pattern.py')

        if os.path.exists(replacementfile):
            data = {}
            with open(replacementfile, mode='rb') as source:
                # the intermediate 'compile' step help with debugging
                code = compile(source.read(), replacementfile, 'exec')
                exec(code, data)
                for value in data.get('substitutions', ()):
                    if len(value) != 2:
                        msg = 'malformatted substitution in %s: %r'
                        msg %= (replacementfile, value)
                        raise ValueError(msg)
                    r.append(value)
        return r

    def _escapepath(self, p):
        if WINDOWS:
            return b''.join(
                c.isalpha()
                and b'[%s%s]' % (c.lower(), c.upper())
                or c in b'/\\'
                and br'[/\\]'
                or c.isdigit()
                and c
                or b'\\' + c
                for c in [p[i : i + 1] for i in range(len(p))]
            )
        else:
            return re.escape(p)

    def _localip(self):
        if self._useipv6:
            return b'::1'
        else:
            return b'127.0.0.1'

    def _genrestoreenv(self, testenv):
        """Generate a script that can be used by tests to restore the original
        environment."""
        # Put the restoreenv script inside self._threadtmp
        scriptpath = os.path.join(self._threadtmp, b'restoreenv.sh')
        testenv['HGTEST_RESTOREENV'] = _bytes2sys(scriptpath)

        # Only restore environment variable names that the shell allows
        # us to export.
        name_regex = re.compile('^[a-zA-Z][a-zA-Z0-9_]*$')

        # Do not restore these variables; otherwise tests would fail.
        reqnames = {'PYTHON', 'TESTDIR', 'TESTTMP'}

        with open(scriptpath, 'w') as envf:
            for name, value in origenviron.items():
                if not name_regex.match(name):
                    # Skip environment variables with unusual names not
                    # allowed by most shells.
                    continue
                if name in reqnames:
                    continue
                envf.write('%s=%s\n' % (name, shellquote(value)))

            for name in testenv:
                if name in origenviron or name in reqnames:
                    continue
                envf.write('unset %s\n' % (name,))

    def _getenv(self):
        """Obtain environment variables to use during test execution."""

        def defineport(i):
            offset = '' if i == 0 else '%s' % i
            env["HGPORT%s" % offset] = '%s' % (self._startport + i)

        env = os.environ.copy()
        with sysconfiglock:
            env['PYTHONUSERBASE'] = sysconfig.get_config_var('userbase') or ''
        env['HGEMITWARNINGS'] = '1'
        env['TESTTMP'] = _bytes2sys(self._testtmp)
        # the FORWARD_SLASH version is useful when running `sh` on non unix
        # system (e.g. Windows)
        env['TESTTMP_FORWARD_SLASH'] = env['TESTTMP'].replace(os.sep, '/')
        uid_file = os.path.join(_bytes2sys(self._testtmp), 'UID')
        env['HGTEST_UUIDFILE'] = uid_file
        env['TESTNAME'] = self.name
        env['HOME'] = _bytes2sys(self._testtmp)
        if WINDOWS:
            env['REALUSERPROFILE'] = env['USERPROFILE']
            # py3.8+ ignores HOME: https://bugs.python.org/issue36264
            env['USERPROFILE'] = env['HOME']
        formated_timeout = _bytes2sys(b"%d" % default_defaults['timeout'][1])
        env['HGTEST_TIMEOUT_DEFAULT'] = formated_timeout
        env['HGTEST_TIMEOUT'] = _bytes2sys(b"%d" % self._timeout)
        # This number should match portneeded in _getport
        for port in range(3):
            # This list should be parallel to _portmap in _getreplacements
            defineport(port)
        env["HGRCPATH"] = _bytes2sys(os.path.join(self._threadtmp, b'.hgrc'))
        env["DAEMON_PIDS"] = _bytes2sys(
            os.path.join(self._threadtmp, b'daemon.pids')
        )
        env["HGEDITOR"] = (
            '"' + sysexecutable + '"' + ' -c "import sys; sys.exit(0)"'
        )
        env["HGUSER"] = "test"
        env["HGENCODING"] = "ascii"
        env["HGENCODINGMODE"] = "strict"
        env["HGHOSTNAME"] = "test-hostname"
        env['HGIPV6'] = str(int(self._useipv6))
        # See contrib/catapipe.py for how to use this functionality.
        if 'HGTESTCATAPULTSERVERPIPE' not in env:
            # If we don't have HGTESTCATAPULTSERVERPIPE explicitly set, pull the
            # non-test one in as a default, otherwise set to devnull
            env['HGTESTCATAPULTSERVERPIPE'] = env.get(
                'HGCATAPULTSERVERPIPE', os.devnull
            )

        extraextensions = []
        for opt in self._extraconfigopts:
            section, key = opt.split('.', 1)
            if section != 'extensions':
                continue
            name = key.split('=', 1)[0]
            extraextensions.append(name)

        if extraextensions:
            env['HGTESTEXTRAEXTENSIONS'] = ' '.join(extraextensions)

        # LOCALIP could be ::1 or 127.0.0.1. Useful for tests that require raw
        # IP addresses.
        env['LOCALIP'] = _bytes2sys(self._localip())

        # This has the same effect as Py_LegacyWindowsStdioFlag in exewrapper.c,
        # but this is needed for testing python instances like dummyssh,
        # dummysmtpd.py, and dumbhttp.py.
        if WINDOWS:
            env['PYTHONLEGACYWINDOWSSTDIO'] = '1'

        # Modified HOME in test environment can confuse Rust tools. So set
        # CARGO_HOME and RUSTUP_HOME automatically if a Rust toolchain is
        # present and these variables aren't already defined.
        cargo_home_path = os.path.expanduser('~/.cargo')
        rustup_home_path = os.path.expanduser('~/.rustup')

        if os.path.exists(cargo_home_path) and b'CARGO_HOME' not in osenvironb:
            env['CARGO_HOME'] = cargo_home_path
        if (
            os.path.exists(rustup_home_path)
            and b'RUSTUP_HOME' not in osenvironb
        ):
            env['RUSTUP_HOME'] = rustup_home_path

        # Reset some environment variables to well-known values so that
        # the tests produce repeatable output.
        env['LANG'] = env['LC_ALL'] = env['LANGUAGE'] = 'C'
        env['TZ'] = 'GMT'
        env["EMAIL"] = "Foo Bar <foo.bar@example.com>"
        env['COLUMNS'] = '80'
        env['TERM'] = 'xterm'

        dropped = [
            'CDPATH',
            'CHGDEBUG',
            'EDITOR',
            'GREP_OPTIONS',
            'HG',
            'HGMERGE',
            'HGPLAIN',
            'HGPLAINEXCEPT',
            'HGPROF',
            'http_proxy',
            'no_proxy',
            'NO_PROXY',
            'PAGER',
            'VISUAL',
        ]

        for k in dropped:
            if k in env:
                del env[k]

        # unset env related to hooks
        for k in list(env):
            if k.startswith('HG_'):
                del env[k]

        if self._usechg:
            env['CHGSOCKNAME'] = os.path.join(self._chgsockdir, b'server')
        if self._chgdebug:
            env['CHGDEBUG'] = 'true'

        return env

    def _createhgrc(self, path):
        """Create an hgrc file for this test."""
        with open(path, 'wb') as hgrc:
            hgrc.write(b'[ui]\n')
            hgrc.write(b'slash = True\n')
            hgrc.write(b'interactive = False\n')
            hgrc.write(b'detailed-exit-code = True\n')
            hgrc.write(b'merge = internal:merge\n')
            hgrc.write(b'mergemarkers = detailed\n')
            hgrc.write(b'promptecho = True\n')
            dummyssh = os.path.join(self._testdir, b'dummyssh')
            hgrc.write(b'ssh = "%s" "%s"\n' % (PYTHON, dummyssh))
            hgrc.write(b'timeout.warn=15\n')
            hgrc.write(b'[chgserver]\n')
            hgrc.write(b'idletimeout=60\n')
            hgrc.write(b'[defaults]\n')
            hgrc.write(b'[devel]\n')
            hgrc.write(b'all-warnings = true\n')
            hgrc.write(b'default-date = 0 0\n')
            hgrc.write(b'[largefiles]\n')
            hgrc.write(
                b'usercache = %s\n'
                % (os.path.join(self._testtmp, b'.cache/largefiles'))
            )
            hgrc.write(b'[lfs]\n')
            hgrc.write(
                b'usercache = %s\n'
                % (os.path.join(self._testtmp, b'.cache/lfs'))
            )
            hgrc.write(b'[web]\n')
            hgrc.write(b'address = localhost\n')
            hgrc.write(b'ipv6 = %r\n' % self._useipv6)
            hgrc.write(b'server-header = testing stub value\n')

            for opt in self._extraconfigopts:
                section, key = _sys2bytes(opt).split(b'.', 1)
                assert b'=' in key, (
                    'extra config opt %s must ' 'have an = for assignment' % opt
                )
                hgrc.write(b'[%s]\n%s\n' % (section, key))

    def fail(self, msg):
        # unittest differentiates between errored and failed.
        # Failed is denoted by AssertionError (by default at least).
        raise AssertionError(msg)

    def _runcommand(self, cmd, env, normalizenewlines=False):
        """Run command in a sub-process, capturing the output (stdout and
        stderr).

        Return a tuple (exitcode, output). output is None in debug mode.
        """
        if self._debug:
            proc = subprocess.Popen(
                _bytes2sys(cmd),
                shell=True,
                close_fds=closefds,
                cwd=_bytes2sys(self._testtmp),
                env=env,
            )
            ret = proc.wait()
            return (ret, None)

        proc = Popen4(cmd, self._testtmp, self._timeout, env)

        def cleanup():
            terminate(proc)
            ret = proc.wait()
            if ret == 0:
                ret = signal.SIGTERM << 8
            killdaemons(env['DAEMON_PIDS'])
            return ret

        proc.tochild.close()

        try:
            output = proc.fromchild.read()
        except KeyboardInterrupt:
            vlog('# Handling keyboard interrupt')
            cleanup()
            raise

        ret = proc.wait()
        if wifexited(ret):
            ret = os.WEXITSTATUS(ret)

        if proc.timeout:
            ret = 'timeout'

        if ret:
            killdaemons(env['DAEMON_PIDS'])

        for s, r in self._getreplacements():
            output = re.sub(s, r, output)

        if normalizenewlines:
            output = output.replace(b'\r\n', b'\n')

        return ret, output.splitlines(True)


class PythonTest(Test):
    """A Python-based test."""

    @property
    def refpath(self):
        return os.path.join(self._testdir, b'%s.out' % self.bname)

    def _run(self, env):
        # Quote the python(3) executable for Windows
        cmd = b'"%s" "%s"' % (PYTHON, self.path)
        vlog("# Running", cmd.decode("utf-8"))
        result = self._runcommand(cmd, env, normalizenewlines=WINDOWS)
        if self._aborted:
            raise KeyboardInterrupt()

        return result


# Some glob patterns apply only in some circumstances, so the script
# might want to remove (glob) annotations that otherwise should be
# retained.
checkcodeglobpats = [
    # On Windows it looks like \ doesn't require a (glob), but we know
    # better.
    re.compile(br'^pushing to \$TESTTMP/.*[^)]$'),
    re.compile(br'^moving \S+/.*[^)]$'),
    re.compile(br'^pulling from \$TESTTMP/.*[^)]$'),
    # Not all platforms have 127.0.0.1 as loopback (though most do),
    # so we always glob that too.
    re.compile(br'.*\$LOCALIP.*$'),
]

bchr = lambda x: bytes([x])

WARN_UNDEFINED = 1
WARN_YES = 2
WARN_NO = 3

MARK_OPTIONAL = b" (?)\n"


def isoptional(line):
    return line.endswith(MARK_OPTIONAL)


class TTest(Test):
    """A "t test" is a test backed by a .t file."""

    SKIPPED_PREFIX = b'skipped: '
    FAILED_PREFIX = b'hghave check failed: '
    NEEDESCAPE = re.compile(br'[\x00-\x08\x0b-\x1f\x7f-\xff]').search

    ESCAPESUB = re.compile(br'[\x00-\x08\x0b-\x1f\\\x7f-\xff]').sub
    ESCAPEMAP = {bchr(i): br'\x%02x' % i for i in range(256)}
    ESCAPEMAP.update({b'\\': b'\\\\', b'\r': br'\r'})

    def __init__(self, path, *args, **kwds):
        # accept an extra "case" parameter
        case = kwds.pop('case', [])
        self._case = case
        self._allcases = {x for y in parsettestcases(path) for x in y}
        super(TTest, self).__init__(path, *args, **kwds)
        if case:
            casepath = b'#'.join(case)
            self.name = '%s#%s' % (self.name, _bytes2sys(casepath))
            self.errpath = b'%s#%s.err' % (self.errpath[:-4], casepath)
            self._tmpname += b'-%s' % casepath.replace(b'#', b'-')
        self._have = {}

    @property
    def refpath(self):
        return os.path.join(self._testdir, self.bname)

    def _run(self, env):
        with open(self.path, 'rb') as f:
            lines = f.readlines()

        # .t file is both reference output and the test input, keep reference
        # output updated with the the test input. This avoids some race
        # conditions where the reference output does not match the actual test.
        if self._refout is not None:
            self._refout = lines

        salt, script, after, expected = self._parsetest(lines)

        # Write out the generated script.
        fname = b'%s.sh' % self._testtmp
        with open(fname, 'wb') as f:
            for l in script:
                f.write(l)

        cmd = b'%s "%s"' % (self._shell, fname)
        vlog("# Running", cmd.decode("utf-8"))

        exitcode, output = self._runcommand(cmd, env)

        if self._aborted:
            raise KeyboardInterrupt()

        # Do not merge output if skipped. Return hghave message instead.
        # Similarly, with --debug, output is None.
        if exitcode == self.SKIPPED_STATUS or output is None:
            return exitcode, output

        return self._processoutput(exitcode, output, salt, after, expected)

    def _hghave(self, reqs):
        allreqs = b' '.join(reqs)

        self._detectslow(reqs)

        if allreqs in self._have:
            return self._have.get(allreqs)

        # TODO do something smarter when all other uses of hghave are gone.
        runtestdir = osenvironb[b'RUNTESTDIR']
        tdir = runtestdir.replace(b'\\', b'/')
        proc = Popen4(
            b'%s -c "%s/hghave %s"' % (self._shell, tdir, allreqs),
            self._testtmp,
            0,
            self._getenv(),
        )
        stdout, stderr = proc.communicate()
        ret = proc.wait()
        if wifexited(ret):
            ret = os.WEXITSTATUS(ret)
        if ret == 2:
            print(stdout.decode('utf-8'))
            sys.exit(1)

        if ret != 0:
            self._have[allreqs] = (False, stdout)
            return False, stdout

        self._have[allreqs] = (True, None)
        return True, None

    def _detectslow(self, reqs):
        """update the timeout of slow test when appropriate"""
        if b'slow' in reqs:
            self._timeout = self._slowtimeout

    def _iftest(self, args):
        # implements "#if"
        reqs = []
        for arg in args:
            if arg.startswith(b'no-') and arg[3:] in self._allcases:
                if arg[3:] in self._case:
                    return False
            elif arg in self._allcases:
                if arg not in self._case:
                    return False
            else:
                reqs.append(arg)
        self._detectslow(reqs)
        return self._hghave(reqs)[0]

    def _parsetest(self, lines):
        # We generate a shell script which outputs unique markers to line
        # up script results with our source. These markers include input
        # line number and the last return code.
        salt = b"SALT%d" % time.time()

        def addsalt(line, inpython):
            if inpython:
                script.append(b'%s %d 0\n' % (salt, line))
            else:
                script.append(b'echo %s %d $?\n' % (salt, line))

        activetrace = []
        session = str(uuid.uuid4()).encode('ascii')
        hgcatapult = os.getenv('HGTESTCATAPULTSERVERPIPE') or os.getenv(
            'HGCATAPULTSERVERPIPE'
        )

        def toggletrace(cmd=None):
            if not hgcatapult or hgcatapult == os.devnull:
                return

            if activetrace:
                script.append(
                    b'echo END %s %s >> "$HGTESTCATAPULTSERVERPIPE"\n'
                    % (session, activetrace[0])
                )
            if cmd is None:
                return

            if isinstance(cmd, str):
                quoted = shellquote(cmd.strip())
            else:
                quoted = shellquote(cmd.strip().decode('utf8')).encode('utf8')
            quoted = quoted.replace(b'\\', b'\\\\')
            script.append(
                b'echo START %s %s >> "$HGTESTCATAPULTSERVERPIPE"\n'
                % (session, quoted)
            )
            activetrace[0:] = [quoted]

        script = []

        # After we run the shell script, we re-unify the script output
        # with non-active parts of the source, with synchronization by our
        # SALT line number markers. The after table contains the non-active
        # components, ordered by line number.
        after = {}

        # Expected shell script output.
        expected = {}

        pos = prepos = -1

        # True or False when in a true or false conditional section
        skipping = None

        # We keep track of whether or not we're in a Python block so we
        # can generate the surrounding doctest magic.
        inpython = False

        if self._debug:
            script.append(b'set -x\n')
        if os.getenv('MSYSTEM'):
            script.append(b'alias pwd="pwd -W"\n')

        if hgcatapult and hgcatapult != os.devnull:
            hgcatapult = hgcatapult.encode('utf8')
            cataname = self.name.encode('utf8')

            # Kludge: use a while loop to keep the pipe from getting
            # closed by our echo commands. The still-running file gets
            # reaped at the end of the script, which causes the while
            # loop to exit and closes the pipe. Sigh.
            script.append(
                b'rtendtracing() {\n'
                b'  echo END %(session)s %(name)s >> %(catapult)s\n'
                b'  rm -f "$TESTTMP/.still-running"\n'
                b'}\n'
                b'trap "rtendtracing" 0\n'
                b'touch "$TESTTMP/.still-running"\n'
                b'while [ -f "$TESTTMP/.still-running" ]; do sleep 1; done '
                b'> %(catapult)s &\n'
                b'HGCATAPULTSESSION=%(session)s ; export HGCATAPULTSESSION\n'
                b'echo START %(session)s %(name)s >> %(catapult)s\n'
                % {
                    b'name': cataname,
                    b'session': session,
                    b'catapult': hgcatapult,
                }
            )

        if self._case:
            casestr = b'#'.join(self._case)
            if isinstance(casestr, str):
                quoted = shellquote(casestr)
            else:
                quoted = shellquote(casestr.decode('utf8')).encode('utf8')
            script.append(b'TESTCASE=%s\n' % quoted)
            script.append(b'export TESTCASE\n')

        n = 0
        for n, l in enumerate(lines):
            if not l.endswith(b'\n'):
                l += b'\n'
            if l.startswith(b'#require'):
                lsplit = l.split()
                if len(lsplit) < 2 or lsplit[0] != b'#require':
                    after.setdefault(pos, []).append(
                        b'  !!! invalid #require\n'
                    )
                if not skipping:
                    haveresult, message = self._hghave(lsplit[1:])
                    if not haveresult:
                        script = [b'echo "%s"\nexit 80\n' % message]
                        break
                after.setdefault(pos, []).append(l)
            elif l.startswith(b'#if'):
                lsplit = l.split()
                if len(lsplit) < 2 or lsplit[0] != b'#if':
                    after.setdefault(pos, []).append(b'  !!! invalid #if\n')
                if skipping is not None:
