=over 3

 void  TAINT_set(bool s)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<TAINT_WARN_get>
X<TAINT_WARN_get>

Returns false if tainting violations are fatal;
Returns true if they're just warnings

=over 3

 bool  TAINT_WARN_get()

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<TAINT_WARN_set>
X<TAINT_WARN_set>

C<s> being true indicates L</C<TAINT_WARN_get>> should return that tainting
violations are just warnings

C<s> being false indicates L</C<TAINT_WARN_get>> should return that tainting
violations are fatal.

=over 3

 void  TAINT_WARN_set(bool s)

=back

=back

=for hackers
Found in file perl.h

=head1 Time

There are currently no internal API items in Time

=head1 Typedef names

There are currently no internal API items in Typedef names

=head1 Unicode Support
X<FOLDEQ_LOCALE>X<FOLDEQ_S1_ALREADY_FOLDED>X<FOLDEQ_S1_FOLDS_SANE>X<FOLDEQ_S2_ALREADY_FOLDED>X<FOLDEQ_S2_FOLDS_SANE>X<FOLDEQ_UTF8_NOMIX_ASCII>

=over 4

=item C<bytes_from_utf8_loc>
X<bytes_from_utf8_loc>

NOTE: C<bytes_from_utf8_loc> is B<experimental> and may change or be
removed without notice.

Like C<L<perlapi/bytes_from_utf8>()>, but takes an extra parameter, a pointer
to where to store the location of the first character in C<"s"> that cannot be
converted to non-UTF8.

If that parameter is C<NULL>, this function behaves identically to
C<bytes_from_utf8>.

Otherwise if C<*is_utf8p> is 0 on input, the function behaves identically to
C<bytes_from_utf8>, except it also sets C<*first_non_downgradable> to C<NULL>.

Otherwise, the function returns a newly created C<NUL>-terminated string
containing the non-UTF8 equivalent of the convertible first portion of
C<"s">.  C<*lenp> is set to its length, not including the terminating C<NUL>.
If the entire input string was converted, C<*is_utf8p> is set to a FALSE value,
and C<*first_non_downgradable> is set to C<NULL>.

Otherwise, C<*first_non_downgradable> is set to point to the first byte of the
first character in the original string that wasn't converted.  C<*is_utf8p> is
unchanged.  Note that the new string may have length 0.

Another way to look at it is, if C<*first_non_downgradable> is non-C<NULL> and
C<*is_utf8p> is TRUE, this function starts at the beginning of C<"s"> and
converts as many characters in it as possible stopping at the first one it
finds that can't be converted to non-UTF-8.  C<*first_non_downgradable> is
set to point to that.  The function returns the portion that could be converted
in a newly created C<NUL>-terminated string, and C<*lenp> is set to its length,
not including the terminating C<NUL>.  If the very first character in the
original could not be converted, C<*lenp> will be 0, and the new string will
contain just a single C<NUL>.  If the entire input string was converted,
C<*is_utf8p> is set to FALSE and C<*first_non_downgradable> is set to C<NULL>.

Upon successful return, the number of variants in the converted portion of the
string can be computed by having saved the value of C<*lenp> before the call,
and subtracting the after-call value of C<*lenp> from it.

=over 3

 U8 *  bytes_from_utf8_loc(const U8 *s, STRLEN *lenp,
                           bool *is_utf8p,
                           const U8 **first_unconverted)

=back

=back

=for hackers
Found in file utf8.c

=over 4

=item C<find_uninit_var>
X<find_uninit_var>

NOTE: C<find_uninit_var> is B<experimental> and may change or be
removed without notice.

Find the name of the undefined variable (if any) that caused the operator
to issue a "Use of uninitialized value" warning.
If match is true, only return a name if its value matches C<uninit_sv>.
So roughly speaking, if a unary operator (such as C<OP_COS>) generates a
warning, then following the direct child of the op may yield an
C<OP_PADSV> or C<OP_GV> that gives the name of the undefined variable.  On the
other hand, with C<OP_ADD> there are two branches to follow, so we only print
the variable name if we get an exact match.
C<desc_p> points to a string pointer holding the description of the op.
This may be updated if needed.

The name is returned as a mortal SV.

Assumes that C<PL_op> is the OP that originally triggered the error, and that
C<PL_comppad>/C<PL_curpad> points to the currently executing pad.

=over 3

 SV *  find_uninit_var(const OP * const obase,
                       const SV * const uninit_sv, bool match,
                       const char **desc_p)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<isSCRIPT_RUN>
X<isSCRIPT_RUN>

Returns a bool as to whether or not the sequence of bytes from C<s> up to but
not including C<send> form a "script run".  C<utf8_target> is TRUE iff the
sequence starting at C<s> is to be treated as UTF-8.  To be precise, except for
two degenerate cases given below, this function returns TRUE iff all code
points in it come from any combination of three "scripts" given by the Unicode
"Script Extensions" property: Common, Inherited, and possibly one other.
Additionally all decimal digits must come from the same consecutive sequence of
10.

For example, if all the characters in the sequence are Greek, or Common, or
Inherited, this function will return TRUE, provided any decimal digits in it
are from the same block of digits in Common.  (These are the ASCII digits
"0".."9" and additionally a block for full width forms of these, and several
others used in mathematical notation.)   For scripts (unlike Greek) that have
their own digits defined this will accept either digits from that set or from
one of the Common digit sets, but not a combination of the two.  Some scripts,
such as Arabic, have more than one set of digits.  All digits must come from
the same set for this function to return TRUE.

C<*ret_script>, if C<ret_script> is not NULL, will on return of TRUE
contain the script found, using the C<SCX_enum> typedef.  Its value will be
C<SCX_INVALID> if the function returns FALSE.

If the sequence is empty, TRUE is returned, but C<*ret_script> (if asked for)
will be C<SCX_INVALID>.

If the sequence contains a single code point which is unassigned to a character
in the version of Unicode being used, the function will return TRUE, and the
script will be C<SCX_Unknown>.  Any other combination of unassigned code points
in the input sequence will result in the function treating the input as not
being a script run.

The returned script will be C<SCX_Inherited> iff all the code points in it are
from the Inherited script.

Otherwise, the returned script will be C<SCX_Common> iff all the code points in
it are from the Inherited or Common scripts.

=over 3

 bool  isSCRIPT_RUN(const U8 *s, const U8 *send,
                    const bool utf8_target)

=back

=back

=for hackers
Found in file regexec.c

=over 4

=item C<is_utf8_non_invariant_string>
X<is_utf8_non_invariant_string>

Returns TRUE if L<perlapi/is_utf8_invariant_string> returns FALSE for the first
C<len> bytes of the string C<s>, but they are, nonetheless, legal Perl-extended
UTF-8; otherwise returns FALSE.

A TRUE return means that at least one code point represented by the sequence
either is a wide character not representable as a single byte, or the
representation differs depending on whether the sequence is encoded in UTF-8 or
not.

See also
C<L<perlapi/is_utf8_invariant_string>>,
C<L<perlapi/is_utf8_string>>

=over 3

 bool  is_utf8_non_invariant_string(const U8 * const s, STRLEN len)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<utf8n_to_uvuni>
X<utf8n_to_uvuni>

C<B<DEPRECATED!>>  It is planned to remove C<utf8n_to_uvuni>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

Instead use L<perlapi/utf8_to_uvchr_buf>, or rarely, L<perlapi/utf8n_to_uvchr>.

This function was useful for code that wanted to handle both EBCDIC and
ASCII platforms with Unicode properties, but starting in Perl v5.20, the
distinctions between the platforms have mostly been made invisible to most
code, so this function is quite unlikely to be what you want.  If you do need
this precise functionality, use instead
C<L<NATIVE_TO_UNI(utf8_to_uvchr_buf(...))|perlapi/utf8_to_uvchr_buf>>
or C<L<NATIVE_TO_UNI(utf8n_to_uvchr(...))|perlapi/utf8n_to_uvchr>>.

=over 3

 UV  utf8n_to_uvuni(const U8 *s, STRLEN curlen, STRLEN *retlen,
                    U32 flags)

=back

=back

=for hackers
Found in file mathoms.c

=over 4

=item C<utf8_to_uvuni>
X<utf8_to_uvuni>

C<B<DEPRECATED!>>  It is planned to remove C<utf8_to_uvuni>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

Returns the Unicode code point of the first character in the string C<s>
which is assumed to be in UTF-8 encoding; C<retlen> will be set to the
length, in bytes, of that character.

Some, but not all, UTF-8 malformations are detected, and in fact, some
malformed input could cause reading beyond the end of the input buffer, which
is one reason why this function is deprecated.  The other is that only in
extremely limited circumstances should the Unicode versus native code point be
of any interest to you.

If C<s> points to one of the detected malformations, and UTF8 warnings are
enabled, zero is returned and C<*retlen> is set (if C<retlen> doesn't point to
NULL) to -1.  If those warnings are off, the computed value if well-defined (or
the Unicode REPLACEMENT CHARACTER, if not) is silently returned, and C<*retlen>
is set (if C<retlen> isn't NULL) so that (S<C<s> + C<*retlen>>) is the
next possible position in C<s> that could begin a non-malformed character.
See L<perlapi/utf8n_to_uvchr> for details on when the REPLACEMENT CHARACTER is returned.

=over 3

 UV  utf8_to_uvuni(const U8 *s, STRLEN *retlen)

=back

=back

=for hackers
Found in file mathoms.c

=over 4

=item C<uvoffuni_to_utf8_flags>
X<uvoffuni_to_utf8_flags>

THIS FUNCTION SHOULD BE USED IN ONLY VERY SPECIALIZED CIRCUMSTANCES.
Instead, B<Almost all code should use L<perlapi/uvchr_to_utf8> or
L<perlapi/uvchr_to_utf8_flags>>.

This function is like them, but the input is a strict Unicode
(as opposed to native) code point.  Only in very rare circumstances should code
not be using the native code point.

For details, see the description for L<perlapi/uvchr_to_utf8_flags>.

=over 3

 U8 *  uvoffuni_to_utf8_flags(U8 *d, UV uv, UV flags)

=back

=back

=for hackers
Found in file utf8.c

=over 4

=item C<valid_utf8_to_uvchr>
X<valid_utf8_to_uvchr>

Like C<L<perlapi/utf8_to_uvchr_buf>>, but should only be called when it is
known that the next character in the input UTF-8 string C<s> is well-formed
(I<e.g.>, it passes C<L<perlapi/isUTF8_CHAR>>.  Surrogates, non-character code
points, and non-Unicode code points are allowed.

=over 3

 UV  valid_utf8_to_uvchr(const U8 *s, STRLEN *retlen)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<variant_under_utf8_count>
X<variant_under_utf8_count>

This function looks at the sequence of bytes between C<s> and C<e>, which are
assumed to be encoded in ASCII/Latin1, and returns how many of them would
change should the string be translated into UTF-8.  Due to the nature of UTF-8,
each of these would occupy two bytes instead of the single one in the input
string.  Thus, this function returns the precise number of bytes the string
would expand by when translated to UTF-8.

Unlike most of the other functions that have C<utf8> in their name, the input
to this function is NOT a UTF-8-encoded string.  The function name is slightly
I<odd> to emphasize this.

This function is internal to Perl because khw thinks that any XS code that
would want this is probably operating too close to the internals.  Presenting a
valid use case could change that.

See also
C<L<perlapi/is_utf8_invariant_string>>
and
C<L<perlapi/is_utf8_invariant_string_loc>>,

=over 3

 Size_t  variant_under_utf8_count(const U8 * const s,
                                  const U8 * const e)

=back

=back

=for hackers
Found in file inline.h

=head1 Utility Functions

=over 4

=item C<my_popen_list>
X<my_popen_list>

Implementing function on some systems for PerlProc_popen_list()

=over 3

 PerlIO *  my_popen_list(const char *mode, int n, SV **args)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<my_socketpair>
X<my_socketpair>

Emulates L<socketpair(2)> on systems that don't have it, but which do have
enough functionality for the emulation.

=over 3

 int  my_socketpair(int family, int type, int protocol, int fd[2])

=back

=back

=for hackers
Found in file util.c

=head1 Versioning

There are currently no internal API items in Versioning

=head1 Warning and Dieing

=over 4

=item C<deprecate>
X<deprecate>

Wrapper around Perl_ck_warner_d() to produce a deprecated warning in the
given category with an appropriate message. The C<message> argument must
be a C string. The string " is deprecated" will automatically be added
to the end of the C<message>.

=over 3

   deprecate(U32 category, "message")

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<deprecate_disappears_in>
X<deprecate_disappears_in>

Wrapper around Perl_ck_warner_d() to produce a deprecated warning in the
given category with an appropriate message that the construct referred
to by the message will disappear in a specific release.  The C<when> and
C<message> arguments must be a C string.  The C<when> string is expected
to be of the form "5.40", with no minor element in the version.  The actual
message output will be the result of the following expression C<message
" is deprecated, and will disappear in Perl " when> which is why C<message>
and C<when> must be literal C strings.

=over 3

   deprecate_disappears_in(U32 category, "when", "message")

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<deprecate_fatal_in>
X<deprecate_fatal_in>

Wrapper around Perl_ck_warner_d() to produce a deprecated warning in the
given category with an appropriate message that the construct referred
to by the message will become fatal in a specific release.  The C<when>
and C<message> arguments must be a C string.  The C<when> string is expected
to be of the form "5.40", with no minor element in the version.  The actual
message output will be the result of the following expression C<message " is
deprecated, and will become fatal in Perl " when> which is why C<message>
and C<when> must be literal C strings.

=over 3

   deprecate_fatal_in(U32 category, "when", "message")

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<PL_dowarn>
X<PL_dowarn>

The C variable that roughly corresponds to Perl's C<$^W> warning variable.
However, C<$^W> is treated as a boolean, whereas C<PL_dowarn> is a
collection of flag bits.

On threaded perls, each thread has an independent copy of this variable;
each initialized at creation time with the current value of the creating
thread's copy.

=over 3

 U8  PL_dowarn

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<report_uninit>
X<report_uninit>

Print appropriate "Use of uninitialized variable" warning.

=over 3

 void  report_uninit(const SV *uninit_sv)

=back

=back

=for hackers
Found in file sv.c

=head1 XS

There are currently no internal API items in XS

=head1 Undocumented elements


This section lists the elements that are otherwise undocumented.  If you use
any of them, please consider creating and submitting documentation for it.

Experimental and deprecated undocumented elements are listed separately at the
end.


X<abort_execution>X<add_above_Latin1_folds>X<add_cp_to_invlist>
X<_add_range_to_invlist>X<allocmy>X<amagic_cmp>X<amagic_cmp_desc>
X<amagic_cmp_locale>X<amagic_cmp_locale_desc>X<amagic_i_ncmp>
X<amagic_i_ncmp_desc>X<amagic_is_enabled>X<amagic_ncmp>X<amagic_ncmp_desc>
X<any_dup>X<append_utf8_from_native_byte>X<apply>X<atfork_lock>
X<atfork_unlock>X<av_arylen_p>X<av_extend_guts>X<av_iter_p>X<av_nonelem>
X<av_reify>X<bind_match>X<block_gimme>X<boot_core_builtin>X<boot_core_mro>
X<boot_core_PerlIO>X<boot_core_UNIVERSAL>X<build_infix_plugin>
X<_byte_dump_string>X<call_list>X<cando>X<capture_clear>X<cast_iv>
X<cast_i32>X<cast_ulong>X<cast_uv>X<check_hash_fields_and_hekify>
X<check_regnode_after>X<check_utf8_print>X<ck_anoncode>X<ck_backtick>
X<ck_bitop>X<ck_classname>X<ck_cmp>X<ck_concat>X<ck_defined>X<ck_delete>
X<ck_each>X<ck_entersub_args_core>X<ck_eof>X<ck_eval>X<ck_exec>
X<ck_exists>X<ck_ftst>X<ck_fun>X<ck_glob>X<ck_grep>X<ck_helemexistsor>
X<ck_index>X<ck_isa>X<ck_join>X<ck_length>X<ck_lfun>X<ck_listiob>
X<ck_match>X<ck_method>X<ck_null>X<ck_open>X<ck_prototype>X<ck_readline>
X<ck_refassign>X<ck_repeat>X<ck_require>X<ck_return>X<ck_rfun>
X<ck_rvconst>X<ck_sassign>X<ck_select>X<ck_shift>X<ck_smartmatch>
X<ck_sort>X<ck_spair>X<ck_split>X<ck_stringify>X<ck_subr>X<ck_substr>
X<ck_svconst>X<ck_tell>X<ck_trunc>X<ck_trycatch>X<ckwarn>X<ckwarn_d>
X<class_add_ADJUST>X<class_add_field>X<class_apply_attributes>
X<class_apply_field_attributes>X<class_prepare_initfield_parse>
X<class_prepare_method_parse>X<class_seal_stash>X<class_set_field_defop>
X<class_setup_stash>X<class_wrap_method_body>X<clear_defarray>
X<closest_cop>X<cmpchain_extend>X<cmpchain_finish>X<cmpchain_start>
X<cmp_desc>X<cmp_locale_desc>X<cntrl_to_mnemonic>
X<construct_ahocorasick_from_trie>X<cop_file_avn>X<coresub_op>
X<croak_caller>X<croak_kw_unless_class>X<croak_memory_wrap>X<croak_no_mem>
X<croak_no_mem_ext>X<croak_popstack>X<csighandler>X<csighandler1>
X<csighandler3>X<current_re_engine>X<custom_op_get_field>X<cv_clone_into>
X<cv_const_sv_or_av>X<cvgv_from_hek>X<cvgv_set>X<cvstash_set>
X<cv_undef_flags>X<cx_dump>X<cx_dup>X<cxinc>X<deb_stack_all>
X<debstackptrs>X<debug_hash_seed>X<debug_peep>X<debug_show_study_flags>
X<debug_studydata>X<defelem_target>X<despatch_signals>X<die_unwind>
X<do_aexec>X<do_aexec5>X<do_aspawn>X<do_eof>X<does_utf8_overflow>
X<do_exec>X<do_exec3>X<dofile>X<do_gv_dump>X<do_gvgv_dump>X<do_hv_dump>
X<doing_taint>X<do_ipcctl>X<do_ipcget>X<do_magic_dump>X<do_msgrcv>
X<do_msgsnd>X<do_ncmp>X<do_op_dump>X<do_pmop_dump>X<do_print>
X<do_readline>X<doref>X<do_seek>X<do_semop>X<do_shmio>X<do_spawn>
X<do_spawn_nowait>X<do_sv_dump>X<do_sysseek>X<do_tell>X<do_trans>
X<do_uniprop_match>X<do_vecget>X<do_vecset>X<do_vop>X<drand48_init_r>
X<drand48_r>X<dtrace_probe_call>X<dtrace_probe_load>X<dtrace_probe_op>
X<dtrace_probe_phase>X<dump_all_perl>X<dump_indent>X<dump_packsubs_perl>
X<dump_sub_perl>X<dump_sv_child>X<dumpuntil>X<dump_vindent>X<dup_warnings>
X<find_first_differing_byte_pos>X<find_lexical_cv>X<find_runcv_where>
X<find_script>X<finish_export_lexical>X<foldEQ_latin1_s2_folded>
X<foldEQ_latin1>X<foldEQ_utf8_flags>X<force_locale_unlock>
X<_force_out_malformed_utf8_message>X<form_alien_digit_msg>
X<form_cp_too_large_msg>X<free_tied_hv_pool>X<free_tmps>
X<get_and_check_backslash_N_name>X<get_ANYOFHbbm_contents>
X<get_ANYOFM_contents>X<get_db_sub>X<get_debug_opts>
X<get_deprecated_property_msg>X<getenv_len>X<get_extended_os_errno>
X<get_hash_seed>X<get_invlist_iter_addr>X<get_invlist_offset_addr>
X<get_invlist_previous_index_addr>X<get_mstats>X<get_prop_definition>
X<get_prop_values>X<get_regclass_aux_data>X<get_re_gclass_aux_data>
X<get_regex_charset_name>X<get_win32_message_utf8ness>X<gp_free>X<gp_ref>
X<grok_bin_oct_hex>X<grok_bslash_c>X<grok_bslash_o>X<grok_bslash_x>
X<gv_check>X<gv_fetchmeth_internal>X<gv_override>X<gv_setref>
X<gv_stashpvn_internal>X<he_dup>X<hek_dup>X<hfree_next_entry>
X<hv_auxalloc>X<hv_common>X<hv_common_key_len>X<hv_delayfree_ent>
X<hv_free_ent>X<hv_placeholders_p>X<hv_pushkv>X<hv_rand_set>
X<hv_undef_flags>X<import_builtin_bundle>X<infix_plugin_standard>
X<init_argv_symbols>X<init_constants>X<init_dbargs>X<init_debugger>
X<init_i18nl10n>X<init_named_cv>X<init_stacks>X<init_tm>X<init_uniprops>
X<_inverse_folds>X<invert>X<invlist_array>X<_invlist_array_init>
X<invlist_clear>X<invlist_clone>X<_invlist_contains_cp>X<invlist_contents>
X<_invlist_dump>X<_invlistEQ>X<invlist_extend>X<invlist_highest>
X<_invlist_intersection>X<_invlist_intersection_maybe_complement_2nd>
X<_invlist_invert>X<invlist_is_iterating>X<invlist_iterfinish>
X<invlist_iterinit>X<invlist_iternext>X<_invlist_len>X<invlist_max>
X<invlist_previous_index>X<_invlist_search>X<invlist_set_len>
X<invlist_set_previous_index>X<_invlist_subtract>X<invlist_trim>
X<_invlist_union>X<_invlist_union_maybe_complement_2nd>X<invmap_dump>
X<invoke_exception_hook>X<io_close>X<isFF_overlong>X<is_grapheme>
X<_is_in_locale_category>X<is_invlist>X<is_standard_filehandle_name>
X<_is_uni_FOO>X<_is_uni_perl_idcont>X<_is_uni_perl_idstart>
X<is_utf8_char_helper_>X<is_utf8_common>X<is_utf8_FF_helper_>
X<_is_utf8_FOO>X<is_utf8_overlong>X<_is_utf8_perl_idcont>
X<_is_utf8_perl_idstart>X<jmaybe>X<join_exact>X<keyword>
X<keyword_plugin_standard>X<list>X<load_charnames>X<locale_panic>
X<localize>X<lossless_NV_to_IV>X<lsbit_pos32>X<lsbit_pos64>
X<magic_clear_all_env>X<magic_cleararylen_p>X<magic_clearenv>
X<magic_clearhook>X<magic_clearhookall>X<magic_clearisa>X<magic_clearpack>
X<magic_clearsig>X<magic_copycallchecker>X<magic_existspack>
X<magic_freearylen_p>X<magic_freecollxfrm>X<magic_freemglob>
X<magic_freeovrld>X<magic_freeutf8>X<magic_get>X<magic_getarylen>
X<magic_getdebugvar>X<magic_getdefelem>X<magic_getnkeys>X<magic_getpack>
X<magic_getpos>X<magic_getsig>X<magic_getsubstr>X<magic_gettaint>
X<magic_getuvar>X<magic_getvec>X<magic_killbackrefs>X<magic_nextpack>
X<magic_regdata_cnt>X<magic_regdatum_get>X<magic_regdatum_set>
X<magic_scalarpack>X<magic_set>X<magic_set_all_env>X<magic_setarylen>
X<magic_setcollxfrm>X<magic_setdbline>X<magic_setdebugvar>
X<magic_setdefelem>X<magic_setenv>X<magic_sethook>X<magic_sethookall>
X<magic_setisa>X<magic_setlvref>X<magic_setmglob>X<magic_setnkeys>
X<magic_setnonelem>X<magic_setpack>X<magic_setpos>X<magic_setregexp>
X<magic_setsig>X<magic_setsigall>X<magic_setsubstr>X<magic_settaint>
X<magic_setutf8>X<magic_setuvar>X<magic_setvec>X<magic_sizepack>
X<magic_wipepack>X<make_trie>X<malloced_size>X<malloc_good_size>
X<markstack_grow>X<mbtowc_>X<mem_collxfrm_>X<mem_log_alloc>
X<mem_log_del_sv>X<mem_log_free>X<mem_log_new_sv>X<mem_log_realloc>
X<mg_find_mglob>X<mg_size>X<mode_from_discipline>X<more_bodies>X<more_sv>
X<moreswitches>X<mortal_getenv>X<mortalized_pv_copy>
X<mro_get_private_data>X<mro_meta_dup>X<mro_meta_init>X<msbit_pos32>
X<msbit_pos64>X<multiconcat_stringify>X<multideref_stringify>X<my_atof2>
X<my_atof3>X<my_attrs>X<my_clearenv>X<my_lstat>X<my_lstat_flags>
X<my_memrchr>X<my_mkostemp_cloexec>X<my_mkstemp_cloexec>X<my_stat>
X<my_stat_flags>X<my_strerror>X<my_unexec>X<newFORM>X<_new_invlist>
X<_new_invlist_C_array>X<newMETHOP_internal>X<newPROG>X<new_stackinfo>
X<new_stackinfo_flags>X<newSTUB>X<newSVavdefelem>X<newXS_deffile>
X<nextargv>X<no_bareword_allowed>X<no_bareword_filehandle>X<noperl_die>
X<notify_parser_that_changed_to_utf8>X<oopsAV>X<oopsHV>X<op_clear>
X<op_integerize>X<op_lvalue_flags>X<opmethod_stash>X<op_prune_chain_head>
X<op_relocate_sv>X<opslab_force_free>X<opslab_free>X<opslab_free_nopad>
X<op_std_init>X<op_varname>X<package>X<package_version>X<pad_add_weakref>
X<padlist_store>X<padname_free>X<PadnameIN_SCOPE>X<padnamelist_free>
X<parser_dup>X<parser_free>X<parser_free_nexttoke_ops>
X<parse_unicode_opts>X<path_is_searchable>X<peep>X<perl_alloc_using>
X<perl_clone_using>X<PerlEnv_putenv>X<PerlIO_context_layers>
X<PerlIO_restore_errno>X<PerlIO_save_errno>X<PerlLIO_dup_cloexec>
X<PerlLIO_dup2_cloexec>X<PerlLIO_open_cloexec>X<PerlLIO_open3_cloexec>
X<PerlProc_pipe_cloexec>X<PerlSock_accept_cloexec>
X<PerlSock_socket_cloexec>X<PerlSock_socketpair_cloexec>
X<perly_sighandler>X<pmruntime>X<POPMARK>
X<populate_anyof_bitmap_from_invlist>X<populate_bitmap_from_invlist>
X<populate_invlist_from_bitmap>X<populate_isa>X<pregfree>X<pregfree2>
X<prepare_export_lexical>X<ptr_hash>X<qerror>X<ReANY>X<reentrant_free>
X<reentrant_init>X<reentrant_retry>X<reentrant_size>X<re_exec_indentf>
X<ref>X<reg_add_data>X<regcurly>X<regdump>X<regdupe_internal>
X<regexec_flags>X<regfree_internal>X<reginitcolors>X<reg_named_buff>
X<reg_named_buff_all>X<reg_named_buff_exists>X<reg_named_buff_fetch>
X<reg_named_buff_firstkey>X<reg_named_buff_iter>X<reg_named_buff_nextkey>
X<reg_named_buff_scalar>X<regnext>X<regnode_after>
X<reg_numbered_buff_fetch>X<reg_numbered_buff_fetch_flags>
X<reg_numbered_buff_length>X<reg_numbered_buff_store>X<regprop>
X<reg_qr_package>X<reg_skipcomment>X<reg_temp_copy>X<re_indentf>
X<re_intuit_start>X<re_intuit_string>X<re_op_compile>X<report_evil_fh>
X<report_redefined_cv>X<report_wrongway_fh>X<re_printf>X<rpeep>
X<rsignal_restore>X<rsignal_save>X<rvpv_dup>X<rxres_save>X<same_dirent>
X<save_bool>X<save_clearsv>X<save_delete>X<save_destructor>
X<save_destructor_x>X<save_freeop>X<save_freepv>X<save_freesv>X<save_int>
X<save_iv>X<save_I8>X<save_I16>X<save_I32>X<save_mortalizesv>X<save_pptr>
X<save_pushi32ptr>X<save_pushptrptr>X<save_re_context>X<save_sptr>
X<savestack_grow>X<savestack_grow_cnt>X<save_strlen>X<sawparens>X<scalar>
X<scalarvoid>X<scan_commit>X<scan_num>X<seed>X<set_ANYOF_arg>
X<set_caret_X>X<setfd_cloexec>X<setfd_cloexec_for_nonsysfd>
X<setfd_cloexec_or_inhexec_by_sysfdness>X<setfd_inhexec>
X<setfd_inhexec_for_sysfd>X<set_numeric_standard>X<set_numeric_underlying>
X<set_padlist>X<_setup_canned_invlist>X<share_hek>X<should_warn_nl>
X<should_we_output_Debug_r>X<sighandler>X<sighandler1>X<sighandler3>
X<single_1bit_pos32>X<single_1bit_pos64>X<Slab_Alloc>X<Slab_Free>
X<Slab_to_ro>X<Slab_to_rw>X<softref2xv>X<sortsv_flags_impl>X<ssc_init>
X<stack_grow>X<str_to_version>X<strxfrm>X<study_chunk>X<sub_crush_depth>
X<sv_add_backref>X<sv_buf_to_ro>X<sv_del_backref>X<sv_i_ncmp>
X<sv_i_ncmp_desc>X<sv_2iv>X<sv_magicext_mglob>X<sv_mark_arenas>X<sv_ncmp>
X<sv_ncmp_desc>X<sv_only_taint_gmagic>X<sv_or_pv_pos_u2b>
X<sv_pvbyten_force_wrapper>X<sv_pvutf8n_force_wrapper>X<sv_resetpvn>
X<sv_sethek>X<sv_sweep_arenas>X<SvTRUE_common>X<sv_unglob>X<sv_2uv>
X<switch_locale_context>X<sys_init>X<sys_init3>X<sys_intern_clear>
X<sys_intern_dup>X<sys_intern_init>X<sys_term>X<tied_method>X<tmps_grow_p>
X<_to_fold_latin1>X<TOPMARK>X<to_uni_fold>X<_to_uni_fold_flags>
X<to_uni_lower>X<to_uni_title>X<to_uni_upper>X<_to_upper_title_latin1>
X<_to_utf8_fold_flags>X<_to_utf8_lower_flags>X<_to_utf8_title_flags>
X<_to_utf8_upper_flags>X<translate_substr_offsets>X<try_amagic_bin>
X<try_amagic_un>X<uiv_2buf>X<unlnk>X<unshare_hek>X<unwind_paren>
X<_utf8n_to_uvchr_msgs_helper>X<utf16_to_utf8_base>
X<utf16_to_utf8_reversed>X<utf16_to_utf8>X<utf8_to_uvchr_buf_helper>
X<utilize>X<uvoffuni_to_utf8_flags_msgs>X<variant_byte_number>X<varname>
X<vivify_defelem>X<vivify_ref>X<wait4pid>X<warn_elem_scalar_context>
X<warn_problematic_locale>X<was_lvalue_sub>X<watch>
X<win32_croak_not_implemented>X<write_to_stderr>X<xs_boot_epilog>
X<xs_handshake>X<yyerror>X<yyerror_pv>X<yyerror_pvn>X<yylex>X<yyparse>
X<yyquit>X<yyunlex>

 abort_execution
 add_above_Latin1_folds
 add_cp_to_invlist
 _add_range_to_invlist
 allocmy
 amagic_cmp
 amagic_cmp_desc
 amagic_cmp_locale
 amagic_cmp_locale_desc
 amagic_i_ncmp
 amagic_i_ncmp_desc
 amagic_is_enabled
 amagic_ncmp
 amagic_ncmp_desc
 any_dup
 append_utf8_from_native_byte
 apply
 atfork_lock
 atfork_unlock
 av_arylen_p
 av_extend_guts
 av_iter_p
 av_nonelem
 av_reify
 bind_match
 block_gimme
 boot_core_builtin
 boot_core_mro
 boot_core_PerlIO
 boot_core_UNIVERSAL
 build_infix_plugin
 _byte_dump_string
 call_list
 cando
 capture_clear
 cast_iv
 cast_i32
 cast_ulong
 cast_uv
 check_hash_fields_and_hekify
 check_regnode_after
 check_utf8_print
 ck_anoncode
 ck_backtick
 ck_bitop
 ck_classname
 ck_cmp
 ck_concat
 ck_defined
 ck_delete
 ck_each
 ck_entersub_args_core
 ck_eof
 ck_eval
 ck_exec
 ck_exists
 ck_ftst
 ck_fun
 ck_glob
 ck_grep
 ck_helemexistsor
 ck_index
 ck_isa
 ck_join
 ck_length
 ck_lfun
 ck_listiob
 ck_match
 ck_method
 ck_null
 ck_open
 ck_prototype
 ck_readline
 ck_refassign
 ck_repeat
 ck_require
 ck_return
 ck_rfun
 ck_rvconst
 ck_sassign
 ck_select
 ck_shift
 ck_smartmatch
 ck_sort
 ck_spair
 ck_split
 ck_stringify
 ck_subr
 ck_substr
 ck_svconst
 ck_tell
 ck_trunc
 ck_trycatch
 ckwarn
 ckwarn_d
 class_add_ADJUST
 class_add_field
 class_apply_attributes
 class_apply_field_attributes
 class_prepare_initfield_parse
 class_prepare_method_parse
 class_seal_stash
 class_set_field_defop
 class_setup_stash
 class_wrap_method_body
 clear_defarray
 closest_cop
 cmpchain_extend
 cmpchain_finish
 cmpchain_start
 cmp_desc
 cmp_locale_desc
 cntrl_to_mnemonic
 construct_ahocorasick_from_trie
 cop_file_avn
 coresub_op
 croak_caller
 croak_kw_unless_class
 croak_memory_wrap
 croak_no_mem
 croak_no_mem_ext
 croak_popstack
 csighandler
 csighandler1
 csighandler3
 current_re_engine
 custom_op_get_field
 cv_clone_into
 cv_const_sv_or_av
 cvgv_from_hek
 cvgv_set
 cvstash_set
 cv_undef_flags
 cx_dump
 cx_dup
 cxinc
 deb_stack_all
 debstackptrs
 debug_hash_seed
 debug_peep
 debug_show_study_flags
 debug_studydata
 defelem_target
 despatch_signals
 die_unwind
 do_aexec
 do_aexec5
 do_aspawn
 do_eof
 does_utf8_overflow
 do_exec
 do_exec3
 dofile
 do_gv_dump
 do_gvgv_dump
 do_hv_dump
 doing_taint
 do_ipcctl
 do_ipcget
 do_magic_dump
 do_msgrcv
 do_msgsnd
 do_ncmp
 do_op_dump
 do_pmop_dump
 do_print
 do_readline
 doref
 do_seek
 do_semop
 do_shmio
 do_spawn
 do_spawn_nowait
 do_sv_dump
 do_sysseek
 do_tell
 do_trans
 do_uniprop_match
 do_vecget
 do_vecset
 do_vop
 drand48_init_r
 drand48_r
 dtrace_probe_call
 dtrace_probe_load
 dtrace_probe_op
 dtrace_probe_phase
 dump_all_perl
 dump_indent
 dump_packsubs_perl
 dump_sub_perl
 dump_sv_child
 dumpuntil
 dump_vindent
 dup_warnings
 find_first_differing_byte_pos
 find_lexical_cv
 find_runcv_where
 find_script
 finish_export_lexical
 foldEQ_latin1_s2_folded
 foldEQ_latin1
 foldEQ_utf8_flags
 force_locale_unlock
 _force_out_malformed_utf8_message
 form_alien_digit_msg
 form_cp_too_large_msg
 free_tied_hv_pool
 free_tmps
 get_and_check_backslash_N_name
 get_ANYOFHbbm_contents
 get_ANYOFM_contents
 get_db_sub
 get_debug_opts
 get_deprecated_property_msg
 getenv_len
 get_extended_os_errno
 get_hash_seed
 get_invlist_iter_addr
 get_invlist_offset_addr
 get_invlist_previous_index_addr
 get_mstats
 get_prop_definition
 get_prop_values
 get_regclass_aux_data
 get_re_gclass_aux_data
 get_regex_charset_name
 get_win32_message_utf8ness
 gp_free
 gp_ref
 grok_bin_oct_hex
 grok_bslash_c
 grok_bslash_o
 grok_bslash_x
 gv_check
 gv_fetchmeth_internal
 gv_override
 gv_setref
 gv_stashpvn_internal
 he_dup
 hek_dup
 hfree_next_entry
 hv_auxalloc
 hv_common
 hv_common_key_len
 hv_delayfree_ent
 hv_free_ent
 hv_placeholders_p
 hv_pushkv
 hv_rand_set
 hv_undef_flags
 import_builtin_bundle
 infix_plugin_standard
 init_argv_symbols
 init_constants
 init_dbargs
 init_debugger
 init_i18nl10n
 init_named_cv
 init_stacks
 init_tm
 init_uniprops
