
F<harness> no longer waits for 30 seconds when running F<t/io/openpid.t>.
L<[GH #13535]|https://github.com/Perl/perl5/issues/13535>
L<[GH #16420]|https://github.com/Perl/perl5/issues/16420>

=back

=head1 Packaging

For the past few years we have released perl using three different archive
formats: bzip (C<.bz2>), LZMA2 (C<.xz>) and gzip (C<.gz>). Since xz compresses
better and decompresses faster, and gzip is more compatible and uses less
memory, we have dropped the C<.bz2> archive format with this release.
(If this poses a problem, do let us know; see L</Reporting Bugs>, below.)

=head1 Platform Support

=head2 Discontinued Platforms

=over 4

=item PowerUX / Power MAX OS

Compiler hints and other support for these apparently long-defunct
platforms has been removed.

=back

=head2 Platform-Specific Notes

=over 4

=item CentOS

Compilation on CentOS 5 is now fixed.

=item Cygwin

A build with the quadmath library can now be done on Cygwin.

=item Darwin

Perl now correctly uses reentrant functions, like C<asctime_r>, on
versions of Darwin that have support for them.

=item FreeBSD

FreeBSD's F<< /usr/share/mk/sys.mk >> specifies C<< -O2 >> for
architectures other than ARM and MIPS. By default, perl is now compiled
with the same optimization levels.

=item VMS

Several fix-ups for F<configure.com>, marking function VMS has
(or doesn't have).

CRTL features can now be set by embedders before invoking Perl by using
the C<decc$feature_set> and C<decc$feature_set_value> functions.
Previously any attempt to set features after image initialization were
ignored.

=item Windows

=over 4

=item *

Support for compiling perl on Windows using Microsoft Visual Studio 2017
(containing Visual C++ 14.1) has been added.

=item *

Visual C++ compiler version detection has been improved to work on non-English
language systems.

=item *

We now set C<$Config{libpth}> correctly for 64-bit builds using Visual C++
versions earlier than 14.1.

=back

=back

=head1 Internal Changes

=over 4

=item *

A new optimisation phase has been added to the compiler,
C<optimize_optree()>, which does a top-down scan of a complete optree
just before the peephole optimiser is run. This phase is not currently
hookable.

=item *

An C<OP_MULTICONCAT> op has been added. At C<optimize_optree()> time, a
chain of C<OP_CONCAT> and C<OP_CONST> ops, together optionally with an
C<OP_STRINGIFY> and/or C<OP_SASSIGN>, are combined into a single
C<OP_MULTICONCAT> op. The op is of type C<UNOP_AUX>, and the aux array
contains the argument count, plus a pointer to a constant string and a set
of segment lengths. For example with

    my $x = "foo=$foo, bar=$bar\n";

the constant string would be C<"foo=, bar=\n"> and the segment lengths
would be (4,6,1). If the string contains characters such as C<\x80>, whose
representation changes under utf8, two sets of strings plus lengths are
precomputed and stored.

=item *

Direct access to L<C<PL_keyword_plugin>|perlapi/PL_keyword_plugin> is not
safe in the presence of multithreading. A new
L<C<wrap_keyword_plugin>|perlapi/wrap_keyword_plugin> function has been
added to allow XS modules to safely define custom keywords even when
loaded from a thread, analogous to L<C<PL_check>|perlapi/PL_check> /
L<C<wrap_op_checker>|perlapi/wrap_op_checker>.

=item *

The C<PL_statbuf> interpreter variable has been removed.

=item *

The deprecated function C<to_utf8_case()>, accessible from XS code, has
been removed.

=item *

A new function
L<C<is_utf8_invariant_string_loc()>|perlapi/is_utf8_invariant_string_loc>
has been added that is like
L<C<is_utf8_invariant_string()>|perlapi/is_utf8_invariant_string>
but takes an extra pointer parameter into which is stored the location
of the first variant character, if any are found.

=item *

A new function, L<C<Perl_langinfo()>|perlapi/Perl_langinfo> has been
added.  It is an (almost) drop-in replacement for the system
C<nl_langinfo(3)>, but works on platforms that lack that; as well as
being more thread-safe, and hiding some gotchas with locale handling
from the caller.  Code that uses this, needn't use L<C<localeconv(3)>>
(and be affected by the gotchas) to find the decimal point, thousands
separator, or currency symbol.  See L<perlapi/Perl_langinfo>.

=item *

A new API function L<C<sv_rvunweaken()>|perlapi/sv_rvunweaken> has
been added to complement L<C<sv_rvweaken()>|perlapi/sv_rvweaken>.
The implementation was taken from L<Scalar::Util/unweaken>.

=item *

A new flag, C<SORTf_UNSTABLE>, has been added. This will allow a
future commit to make mergesort unstable when the user specifies ‘no
sort stable’, since it has been decided that mergesort should remain
stable by default.

=item *

XS modules can now automatically get reentrant versions of system
functions on threaded perls.

By adding

    #define PERL_REENTRANT

near the beginning of an C<XS> file, it will be compiled so that
whatever reentrant functions perl knows about on that system will
automatically and invisibly be used instead of the plain, non-reentrant
versions.  For example, if you write C<getpwnam()> in your code, on a
system that has C<getpwnam_r()> all calls to the former will be translated
invisibly into the latter.  This does not happen except on threaded
perls, as they aren't needed otherwise.  Be aware that which functions
have reentrant versions varies from system to system.

=item *

The C<PERL_NO_OP_PARENT> build define is no longer supported, which means
that perl is now always built with C<PERL_OP_PARENT> enabled.

=item *

The format and content of the non-utf8 transliteration table attached to
the C<op_pv> field of C<OP_TRANS>/C<OP_TRANSR> ops has changed. It's now a
C<struct OPtrans_map>.

=item *

A new compiler C<#define>, C<dTHX_DEBUGGING>. has been added.  This is
useful for XS or C code that only need the thread context because their
debugging statements that get compiled only under C<-DDEBUGGING> need
one.

=item *

A new API function L<perlapi/Perl_setlocale> has been added.

=item *

L<perlapi/sync_locale> has been revised to return a boolean as to
whether the system was using the global locale or not.

=item *

A new kind of magic scalar, called a "nonelem" scalar, has been introduced.
It is stored in an array to denote a non-existent element, whenever such an
element is accessed in a potential lvalue context.  It replaces the
existing "defelem" (deferred element) magic wherever this is possible,
being significantly more efficient.  This means that
C<some_sub($sparse_array[$nonelem])> no longer has to create a new magic
defelem scalar each time, as long as the element is within the array.

It partially fixes the rare bug of deferred elements getting out of synch
with their arrays when the array is shifted or unshifted.
L<[GH #16364]|https://github.com/Perl/perl5/issues/16364>

=back

=head1 Selected Bug Fixes

=over 4

=item *

List assignment (C<aassign>) could in some rare cases allocate an
entry on the mortals stack and leave the entry uninitialized, leading to
possible crashes.
L<[GH #16017]|https://github.com/Perl/perl5/issues/16017>

=item *

Attempting to apply an attribute to an C<our> variable where a
function of that name already exists could result in a NULL pointer
being supplied where an SV was expected, crashing perl.
L<[perl #131597]|https://rt.perl.org/Ticket/Display.html?id=131597>

=item *

C<split ' '> now correctly handles the argument being split when in the
scope of the L<< C<unicode_strings>|feature/"The 'unicode_strings' feature"
>> feature. Previously, when a string using the single-byte internal
representation contained characters that are whitespace by Unicode rules but
not by ASCII rules, it treated those characters as part of fields rather
than as field separators.
L<[GH #15904]|https://github.com/Perl/perl5/issues/15904>

=item *

Several built-in functions previously had bugs that could cause them to
write to the internal stack without allocating room for the item being
written. In rare situations, this could have led to a crash. These bugs have
now been fixed, and if any similar bugs are introduced in future, they will
be detected automatically in debugging builds.

These internal stack usage checks introduced are also done
by the C<entersub> operator when calling XSUBs.  This means we can
report which XSUB failed to allocate enough stack space.
L<[GH #16126]|https://github.com/Perl/perl5/issues/16126>

=item *

Using a symbolic ref with postderef syntax as the key in a hash lookup was
yielding an assertion failure on debugging builds.
L<[GH #16029]|https://github.com/Perl/perl5/issues/16029>

=item *

Array and hash variables whose names begin with a caret now admit indexing
inside their curlies when interpolated into strings, as in C<<
"${^CAPTURE[0]}" >> to index C<@{^CAPTURE}>.
L<[GH #16050]|https://github.com/Perl/perl5/issues/16050>

=item *

Fetching the name of a glob that was previously UTF-8 but wasn't any
longer would return that name flagged as UTF-8.
L<[GH #15971]|https://github.com/Perl/perl5/issues/15971>

=item *

The perl C<sprintf()> function (via the underlying C function
C<Perl_sv_vcatpvfn_flags()>) has been heavily reworked to fix many minor
bugs, including the integer wrapping of large width and precision
specifiers and potential buffer overruns. It has also been made faster in
many cases.

=item *

Exiting from an C<eval>, whether normally or via an exception, now always
frees temporary values (possibly calling destructors) I<before> setting
C<$@>. For example:

    sub DESTROY { eval { die "died in DESTROY"; } }
    eval { bless []; };
    # $@ used to be equal to "died in DESTROY" here; it's now "".

=item *

Fixed a duplicate symbol failure with C<-flto -mieee-fp> builds.
F<pp.c> defined C<_LIB_VERSION> which C<-lieee> already defines.
L<[GH #16086]|https://github.com/Perl/perl5/issues/16086>

=item *

The tokenizer no longer consumes the exponent part of a floating
point number if it's incomplete.
L<[GH #16073]|https://github.com/Perl/perl5/issues/16073>

=item *

On non-threaded builds, for C<m/$null/> where C<$null> is an empty
string is no longer treated as if the C</o> flag was present when the
previous matching match operator included the C</o> flag.  The
rewriting used to implement this behavior could confuse the
interpreter.  This matches the behaviour of threaded builds.
L<[GH #14668]|https://github.com/Perl/perl5/issues/14668>

=item *

Parsing a C<sub> definition could cause a use after free if the C<sub>
keyword was followed by whitespace including newlines (and comments.)
L<[GH #16097]|https://github.com/Perl/perl5/issues/16097>

=item *

The tokenizer now correctly adjusts a parse pointer when skipping
whitespace in a C<< ${identifier} >> construct.
L<[perl #131949]|https://rt.perl.org/Public/Bug/Display.html?id=131949>

=item *

Accesses to C<${^LAST_FH}> no longer assert after using any of a
variety of I/O operations on a non-glob.
L<[GH #15372]|https://github.com/Perl/perl5/issues/15372>

=item *

The XS-level C<Copy()>, C<Move()>, C<Zero()> macros and their variants now
assert if the pointers supplied are C<NULL>.  ISO C considers
supplying NULL pointers to the functions these macros are built upon
as undefined behaviour even when their count parameters are zero.
Based on these assertions and the original bug report three macro
calls were made conditional.
L<[GH #16079]|https://github.com/Perl/perl5/issues/16079>
L<[GH #16112]|https://github.com/Perl/perl5/issues/16112>

=item *

Only the C<=> operator is permitted for defining defaults for
parameters in subroutine signatures.  Previously other assignment
operators, e.g. C<+=>, were also accidentally permitted.
L<[GH #16084]|https://github.com/Perl/perl5/issues/16084>

=item *

Package names are now always included in C<:prototype> warnings
L<[perl #131833]|https://rt.perl.org/Public/Bug/Display.html?id=131833>

=item *

The C<je_old_stack_hwm> field, previously only found in the C<jmpenv>
structure on debugging builds, has been added to non-debug builds as
well. This fixes an issue with some CPAN modules caused by the size of
this structure varying between debugging and non-debugging builds.
L<[GH #16122]|https://github.com/Perl/perl5/issues/16122>

=item *

The arguments to the C<ninstr()> macro are now correctly parenthesized.

=item *

A NULL pointer dereference in the C<S_regmatch()> function has been
fixed.
L<[perl #132017]|https://rt.perl.org/Public/Bug/Display.html?id=132017>

=item *

Calling L<exec PROGRAM LIST|perlfunc/exec PROGRAM LIST> with an empty C<LIST>
has been fixed.  This should call C<execvp()> with an empty C<argv> array
(containing only the terminating C<NULL> pointer), but was instead just
returning false (and not setting L<C<$!>|perlvar/$!>).
L<[GH #16075]|https://github.com/Perl/perl5/issues/16075>

=item *

The C<gv_fetchmeth_sv> C function stopped working properly in Perl 5.22 when
fetching a constant with a UTF-8 name if that constant subroutine was stored in
the stash as a simple scalar reference, rather than a full typeglob.  This has
been corrected.

=item *

Single-letter debugger commands followed by an argument which starts with
punctuation  (e.g. C<p$^V> and C<x@ARGV>) now work again.  They had been
wrongly requiring a space between the command and the argument.
L<[GH #13342]|https://github.com/Perl/perl5/issues/13342>

=item *

L<splice|perlfunc/splice ARRAY,OFFSET,LENGTH,LIST> now throws an exception
("Modification of a read-only value attempted") when modifying a read-only
array.  Until now it had been silently modifying the array.  The new behaviour
is consistent with the behaviour of L<push|perlfunc/push ARRAY,LIST> and
L<unshift|perlfunc/unshift ARRAY,LIST>.
L<[GH #15923]|https://github.com/Perl/perl5/issues/15923>

=item *

C<stat()>, C<lstat()>, and file test operators now fail if given a
filename containing a nul character, in the same way that C<open()>
already fails.

=item *

C<stat()>, C<lstat()>, and file test operators now reliably set C<$!> when
failing due to being applied to a closed or otherwise invalid file handle.

=item *

File test operators for Unix permission bits that don't exist on a
particular platform, such as C<-k> (sticky bit) on Windows, now check that
the file being tested exists before returning the blanket false result,
and yield the appropriate errors if the argument doesn't refer to a file.

=item *

Fixed a 'read before buffer' overrun when parsing a range starting with
C<\N{}> at the beginning of the character set for the transliteration
operator.
L<[GH #16189]|https://github.com/Perl/perl5/issues/16189>

=item *

Fixed a leaked scalar when parsing an empty C<\N{}> at compile-time.
L<[GH #16189]|https://github.com/Perl/perl5/issues/16189>

=item *

Calling C<do $path> on a directory or block device now yields a meaningful
error code in C<$!>.
L<[GH #14841]|https://github.com/Perl/perl5/issues/14841>

=item *

Regexp substitution using an overloaded replacement value that provides
a tainted stringification now correctly taints the resulting string.
L<[GH #12495]|https://github.com/Perl/perl5/issues/12495>

=item *

Lexical sub declarations in C<do> blocks such as C<do { my sub lex; 123 }>
could corrupt the stack, erasing items already on the stack in the
enclosing statement.  This has been fixed.
L<[GH #16243]|https://github.com/Perl/perl5/issues/16243>

=item *

C<pack> and C<unpack> can now handle repeat counts and lengths that
exceed two billion.
L<[GH #13179]|https://github.com/Perl/perl5/issues/13179>

=item *

Digits past the radix point in octal and binary floating point literals
now have the correct weight on platforms where a floating point
significand doesn't fit into an integer type.

=item *

The canonical truth value no longer has a spurious special meaning as a
callable subroutine.  It used to be a magic placeholder for a missing
C<import> or C<unimport> method, but is now treated like any other string
C<1>.
L<[GH #14902]|https://github.com/Perl/perl5/issues/14902>

=item *

C<system> now reduces its arguments to strings in the parent process, so
any effects of stringifying them (such as overload methods being called
or warnings being emitted) are visible in the way the program expects.
L<[GH #13561]|https://github.com/Perl/perl5/issues/13561>

=item *

The C<readpipe()> built-in function now checks at compile time that
it has only one parameter expression, and puts it in scalar context,
thus ensuring that it doesn't corrupt the stack at runtime.
L<[GH #2793]|https://github.com/Perl/perl5/issues/2793>

=item *

C<sort> now performs correct reference counting when aliasing C<$a> and
C<$b>, thus avoiding premature destruction and leakage of scalars if they
are re-aliased during execution of the sort comparator.
L<[GH #11422]|https://github.com/Perl/perl5/issues/11422>

=item *

C<reverse> with no operand, reversing C<$_> by default, is no longer in
danger of corrupting the stack.
L<[GH #16291]|https://github.com/Perl/perl5/issues/16291>

=item *

C<exec>, C<system>, et al are no longer liable to have their argument
lists corrupted by reentrant calls and by magic such as tied scalars.
L<[GH #15660]|https://github.com/Perl/perl5/issues/15660>

=item *

Perl's own C<malloc> no longer gets confused by attempts to allocate
more than a gigabyte on a 64-bit platform.
L<[GH #13273]|https://github.com/Perl/perl5/issues/13273>

=item *

Stacked file test operators in a sort comparator expression no longer
cause a crash.
L<[GH #15626]|https://github.com/Perl/perl5/issues/15626>

=item *

An identity C<tr///> transformation on a reference is no longer mistaken
for that reference for the purposes of deciding whether it can be
assigned to.
L<[GH #15812]|https://github.com/Perl/perl5/issues/15812>

=item *

Lengthy hexadecimal, octal, or binary floating point literals no
longer cause undefined behaviour when parsing digits that are of such
low significance that they can't affect the floating point value.
L<[GH #16114]|https://github.com/Perl/perl5/issues/16114>

=item *

C<open $$scalarref...> and similar invocations no longer leak the file
handle.
L<[GH #12593]|https://github.com/Perl/perl5/issues/12593>

=item *

Some convoluted kinds of regexp no longer cause an arithmetic overflow
when compiled.
L<[GH #16113]|https://github.com/Perl/perl5/issues/16113>

=item *

The default typemap, by avoiding C<newGVgen>, now no longer leaks when
XSUBs return file handles (C<PerlIO *> or C<FILE *>).
L<[GH #12593]|https://github.com/Perl/perl5/issues/12593>

=item *

Creating a C<BEGIN> block as an XS subroutine with a prototype no longer
crashes because of the early freeing of the subroutine.

=item *

The C<printf> format specifier C<%.0f> no longer rounds incorrectly
L<[GH #9125]|https://github.com/Perl/perl5/issues/9125>,
and now shows the correct sign for a negative zero.

=item * 

Fixed an issue where the error C<< Scalar value @arrayname[0] better
written as $arrayname >> would give an error C<< Cannot printf Inf with 'c' >>
when arrayname starts with C<< Inf >>.
L<[GH #16335]|https://github.com/Perl/perl5/issues/16335>

=item *

The Perl implementation of C<< getcwd() >> in C<< Cwd >> in the PathTools
distribution now behaves the same as XS implementation on errors: it
returns an error, and sets C<< $! >>.
L<[GH #16338]|https://github.com/Perl/perl5/issues/16338>

=item *

Vivify array elements when putting them on the stack.
Fixes L<[GH #5310]|https://github.com/Perl/perl5/issues/5310>
(reported in April 2002).

=item *

Fixed parsing of braced subscript after parens. Fixes
L<[GH #4688]|https://github.com/Perl/perl5/issues/4688>
(reported in December 2001).

=item *

C<tr/non_utf8/long_non_utf8/c> could give the wrong results when the
length of the replacement character list was greater than 0x7fff.

=item *

C<tr/non_utf8/non_utf8/cd> failed to add the implied
C<\x{100}-\x{7fffffff}> to the search character list.

=item *

Compilation failures within "perl-within-perl" constructs, such as with
string interpolation and the right part of C<s///e>, now cause
compilation to abort earlier.

Previously compilation could continue in order to report other errors,
but the failed sub-parse could leave partly parsed constructs on the
parser shift-reduce stack, confusing the parser, leading to perl
crashes.
L<[GH #14739]|https://github.com/Perl/perl5/issues/14739>

=item *

On threaded perls where the decimal point (radix) character is not a
dot, it has been possible for a race to occur between threads when one
needs to use the real radix character (such as with C<sprintf>).  This has
now been fixed by use of a mutex on systems without thread-safe locales,
and the problem just doesn't come up on those with thread-safe locales.

=item *

Errors while compiling a regex character class could sometime trigger an
assertion failure.
L<[GH #16172]|https://github.com/Perl/perl5/issues/16172>

=back

=head1 Acknowledgements

Perl 5.28.0 represents approximately 13 months of development since Perl
5.26.0 and contains approximately 730,000 lines of changes across 2,200
files from 77 authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 580,000 lines of changes to 1,300 .pm, .t, .c and .h files.

Perl continues to flourish into its fourth decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.28.0:

Aaron Crane, Abigail, Ævar Arnfjörð Bjarmason, Alberto Simões, Alexandr
Savca, Andrew Fresh, Andy Dougherty, Andy Lester, Aristotle Pagaltzis, Ask
Bjørn Hansen, Chris 'BinGOs' Williams, Craig A. Berry, Dagfinn Ilmari
Mannsåker, Dan Collins, Daniel Dragan, David Cantrell, David Mitchell,
Dmitry Ulanov, Dominic Hargreaves, E. Choroba, Eric Herman, Eugen Konkov,
Father Chrysostomos, Gene Sullivan, George Hartzell, Graham Knop, Harald
Jörg, H.Merijn Brand, Hugo van der Sanden, Jacques Germishuys, James E
Keenan, Jarkko Hietaniemi, Jerry D. Hedden, J. Nick Koston, John Lightsey,
John Peacock, John P. Linderman, John SJ Anderson, Karen Etheridge, Karl
Williamson, Ken Brown, Ken Cotterill, Leon Timmermans, Lukas Mai, Marco
Fontani, Marc-Philip Werner, Matthew Horsfall, Neil Bowers, Nicholas Clark,
Nicolas R., Niko Tyni, Pali, Paul Marquess, Peter John Acklam, Reini Urban,
Renee Baecker, Ricardo Signes, Robin Barker, Sawyer X, Scott Lanning, Sergey
Aleynikov, Shirakata Kentaro, Shoichi Kaji, Slaven Rezic, Smylers, Steffen
Müller, Steve Hay, Sullivan Beck, Thomas Sibley, Todd Rinaldo, Tomasz
Konojacki, Tom Hukins, Tom Wyant, Tony Cook, Vitali Peil, Yves Orton,
Zefram.

The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not include
the names of the (very much appreciated) contributors who reported issues to
the Perl bug tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please
see the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
                                       usr/local/lib/perl5/5.40.0/pod/perl5281delta.pod                                                    0000644 0000000 0000000 00000010767 14714567415 017303  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =encoding utf8

=head1 NAME

perl5281delta - what is new for perl v5.28.1

=head1 DESCRIPTION

This document describes differences between the 5.28.0 release and the 5.28.1
release.

If you are upgrading from an earlier release such as 5.26.0, first read
L<perl5280delta>, which describes differences between 5.26.0 and 5.28.0.

=head1 Security

=head2 [CVE-2018-18311] Integer overflow leading to buffer overflow and segmentation fault

Integer arithmetic in C<Perl_my_setenv()> could wrap when the combined length
of the environment variable name and value exceeded around 0x7fffffff.  This
could lead to writing beyond the end of an allocated buffer with attacker
supplied data.

L<[GH #16560]|https://github.com/Perl/perl5/issues/16560>

=head2 [CVE-2018-18312] Heap-buffer-overflow write in S_regatom (regcomp.c)

A crafted regular expression could cause heap-buffer-overflow write during
compilation, potentially allowing arbitrary code execution.

L<[GH #16649]|https://github.com/Perl/perl5/issues/16649>

=head1 Incompatible Changes

There are no changes intentionally incompatible with 5.28.0.  If any exist,
they are bugs, and we request that you submit a report.  See
L</Reporting Bugs> below.

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

=over 4

=item *

L<Module::CoreList> has been upgraded from version 5.20180622 to 5.20181129_28.

=back

=head1 Selected Bug Fixes

=over 4

=item *

Perl 5.28 introduced an C<index()> optimization when comparing to -1 (or
indirectly, e.g. >= 0).  When this optimization was triggered inside a C<when>
clause it caused a warning ("Argument %s isn't numeric in smart match").  This
has now been fixed.
L<[GH #16626]|https://github.com/Perl/perl5/issues/16626>

=item *

Matching of decimal digits in script runs, introduced in Perl 5.28, had a bug
that led to C<"1\N{THAI DIGIT FIVE}"> matching C</^(*sr:\d+)$/> when it should
not.  This has now been fixed.

=item *

The new in-place editing code no longer leaks directory handles.
L<[GH #16602]|https://github.com/Perl/perl5/issues/16602>

=back

=head1 Acknowledgements

Perl 5.28.1 represents approximately 5 months of development since Perl 5.28.0
and contains approximately 6,100 lines of changes across 44 files from 12
authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 700 lines of changes to 12 .pm, .t, .c and .h files.

Perl continues to flourish into its fourth decade thanks to a vibrant community
of users and developers.  The following people are known to have contributed
the improvements that became Perl 5.28.1:

Aaron Crane, Abigail, Chris 'BinGOs' Williams, Dagfinn Ilmari Mannsåker, David
Mitchell, James E Keenan, John SJ Anderson, Karen Etheridge, Karl Williamson,
Sawyer X, Steve Hay, Tony Cook.

The list above is almost certainly incomplete as it is automatically generated
from version control history.  In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core.  We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
         usr/local/lib/perl5/5.40.0/pod/perl5282delta.pod                                                    0000644 0000000 0000000 00000014006 14714567415 017272  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =encoding utf8

=head1 NAME

perl5282delta - what is new for perl v5.28.2

=head1 DESCRIPTION

This document describes differences between the 5.28.1 release and the 5.28.2
release.

If you are upgrading from an earlier release such as 5.28.0, first read
L<perl5281delta>, which describes differences between 5.28.0 and 5.28.1.

=head1 Incompatible Changes

=head2 Any set of digits in the Common script are legal in a script run of
another script

There are several sets of digits in the Common script.  C<[0-9]> is the most
familiar.  But there are also C<[\x{FF10}-\x{FF19}]> (FULLWIDTH DIGIT ZERO -
FULLWIDTH DIGIT NINE), and several sets for use in mathematical notation, such
as the MATHEMATICAL DOUBLE-STRUCK DIGITs.  Any of these sets should be able to
appear in script runs of, say, Greek.  But the previous design overlooked all
but the ASCII digits C<[0-9]>, so the design was flawed.  This has been fixed,
so is both a bug fix and an incompatibility.

All digits in a run still have to come from the same set of ten digits.

L<[GH #16704]|https://github.com/Perl/perl5/issues/16704>

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

=over 4

=item *

L<Module::CoreList> has been upgraded from version 5.20181129_28 to 5.20190419.

=item *

L<PerlIO::scalar> has been upgraded from version 0.29 to 0.30.

=item *

L<Storable> has been upgraded from version 3.08 to 3.08_01.

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item Windows

The Windows Server 2003 SP1 Platform SDK build, with its early x64 compiler and
tools, was accidentally broken in Perl 5.27.9.  This has now been fixed.

=item Mac OS X

Perl's build and testing process on Mac OS X for C<-Duseshrplib> builds is now
compatible with Mac OS X System Integrity Protection (SIP).

SIP prevents binaries in F</bin> (and a few other places) being passed the
C<DYLD_LIBRARY_PATH> environment variable.  For our purposes this prevents
C<DYLD_LIBRARY_PATH> from being passed to the shell, which prevents that
variable being passed to the testing or build process, so running C<perl>
couldn't find F<libperl.dylib>.

To work around that, the initial build of the F<perl> executable expects to
find F<libperl.dylib> in the build directory, and the library path is then
adjusted during installation to point to the installed library.

L<[GH #15057]|https://github.com/Perl/perl5/issues/15057>

=back

=head1 Selected Bug Fixes

=over 4

=item *

If an in-place edit is still in progress during global destruction and the
process exit code (as stored in C<$?>) is zero, perl will now treat the
in-place edit as successful, replacing the input file with any output produced.

This allows code like:

  perl -i -ne 'print "Foo"; last'

to replace the input file, while code like:

  perl -i -ne 'print "Foo"; die'

will not.  Partly resolves [perl #133659].

L<[GH #16748]|https://github.com/Perl/perl5/issues/16748>

=item *

A regression in Perl 5.28 caused the following code to fail

 close(STDIN); open(CHILD, "|wc -l")'

because the child's stdin would be closed on exec.  This has now been fixed.

=item *

C<pack "u", "invalid uuencoding"> now properly NUL terminates the zero-length
SV produced.

L<[GH #16343]|https://github.com/Perl/perl5/issues/16343>

=item *

Failing to compile a format now aborts compilation.  Like other errors in
sub-parses this could leave the parser in a strange state, possibly crashing
perl if compilation continued.

L<[GH #16169]|https://github.com/Perl/perl5/issues/16169>

=item *

See L</Any set of digits in the Common script are legal in a script run of
another script>.

=back

=head1 Acknowledgements

Perl 5.28.2 represents approximately 4 months of development since Perl 5.28.1
and contains approximately 2,500 lines of changes across 75 files from 13
authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 1,200 lines of changes to 29 .pm, .t, .c and .h files.

Perl continues to flourish into its fourth decade thanks to a vibrant community
of users and developers.  The following people are known to have contributed
the improvements that became Perl 5.28.2:

Aaron Crane, Abigail, Andy Dougherty, David Mitchell, Karen Etheridge, Karl
