 * Flag argument.
 */
/* ------------------------- ODCIExtTableOpen Flags ------------------------ */
                                              /* Query Coordinator Mode call */
#define ODCI_EXTTABLE_OPEN_FLAGS_QC              0x00000001

                                                         /* Shadow Mode call */
#define ODCI_EXTTABLE_OPEN_FLAGS_SHADOW          0x00000002 

                                                         /* Slave  Mode call */
#define ODCI_EXTTABLE_OPEN_FLAGS_SLAVE           0x00000004

                                          /* GET GRANULES from access driver */
#define ODCI_EXTTABLE_OPEN_FLAGS_GET_GRANULES    0x00000008

                                                /* GET Access Driver ConTeXt */
#define ODCI_EXTTABLE_OPEN_FLAGS_GET_AD_CTX      0x00000010

                                                /* SET Access Driver ConTeXt */
#define ODCI_EXTTABLE_OPEN_FLAGS_SET_AD_CTX      0x00000020

                                                      /* GET Storage Objects */
#define ODCI_EXTTABLE_OPEN_FLAGS_GET_STGOBJ      0x00000040

                                         /* GET Storage Object Sizes (bytes) */
#define ODCI_EXTTABLE_OPEN_FLAGS_GET_STGOBJ_SIZE 0x00000080

                               /* GET Oracle column types from access driver */
#define ODCI_EXTTABLE_OPEN_FLAGS_GET_COLS        0x00000100

                               /* GET Native column types from access driver */
#define ODCI_EXTTABLE_OPEN_FLAGS_GET_NATIVE_COLS 0x00000200

                                /* GET partition metadata from access driver */
#define ODCI_EXTTABLE_OPEN_FLAGS_GET_PARTITIONS  0x00000400

               /* access driver should be "silent" (don't write to log file) */
#define ODCI_EXTTABLE_OPEN_FLAGS_SILENT          0x00000800

                                     /* SET absolute partition number vector */
#define ODCI_EXTTABLE_OPEN_FLAGS_SET_APNUM_VEC   0x00001000

                                               /* Partitioned external table */
#define ODCI_EXTTABLE_OPEN_FLAGS_PET             0x00002000

                                                      /* validate table data */
#define ODCI_EXTTABLE_OPEN_FLAGS_VALIDATE        0x00004000
                                              /* use old column array format */
#define ODCI_EXTTABLE_OPEN_FLAGS_OLD_CA          0x00008000
                  /* internal external table, =ODCI_EXTTABLE_FETCH_FLAGS_INT */
#define ODCI_EXTTABLE_OPEN_FLAGS_INT             0x80000000

/* ------------------------ ODCIExtTableFetch Flags ------------------------ */
/* ODCI_EXTTABLE_FETCH_FLAGS_EOS is an OUT parameter FROM the
 * Access Driver to indicate that end-of-stream has been reached.
 */
#define ODCI_EXTTABLE_FETCH_FLAGS_EOS   0x00000001 /* end-of-stream on fetch */

/* ODCI_EXTTABLE_FETCH_OPAQUE_GRAN is an IN parameter TO the
 * Access Driver to indicate that the RDBMS is suppling opaque granules.
 */
#define ODCI_EXTTABLE_FETCH_OPAQUE_GRAN 0x00000002   /* opaque granule given */

/* ODCI_EXTTABLE_FETCH_BIND_DOC is an IN parameter TO the
 * Access Driver to indicate that the RDBMS is supplying xadbinddoc XML document
 */
#define ODCI_EXTTABLE_FETCH_BIND_DOC    0x00000004          /* binddoc given */
#define ODCI_EXTTABLE_FETCH_FLAGS_INT ODCI_EXTTABLE_OPEN_FLAGS_INT

/* ------------------------ ODCIExtTableClose Flags ------------------------ */
#define ODCI_EXTTABLE_CLOSE_FLAGS_ERR   0x00000001
                                     /* rowsource close with error signalled */

/* Constants for Flags argument to ODCIAggregateTerminate */
#define ODCI_AGGREGATE_REUSE_CTX  1

/* Constants for ODCIColInfo.Flags */
#define ODCI_COMP_FILTERBY_COL     0x0001
#define ODCI_COMP_ORDERBY_COL      0x0002
#define ODCI_COMP_ORDERDSC_COL     0x0004
#define ODCI_COMP_UPDATED_COL      0x0008
#define ODCI_COMP_RENAMED_COL      0x0010
#define ODCI_COMP_RENAMED_TOPADT   0x0020
#define ODCI_COMP_REFERENCED_COL   0x0040

/* Constants for ODCIOrderByInfo.ExprType */
#define ODCI_COLUMN_EXPR   1
#define ODCI_ANCOP_EXPR    2

/* Constants for ODCIOrderByInfo.SortOrder */
#define ODCI_SORT_ASC    1
#define ODCI_SORT_DESC   2
#define ODCI_NULLS_FIRST 4

/* Constants for ODCIPartInfo.PartOp */
#define  ODCI_ADD_PARTITION   1
#define  ODCI_DROP_PARTITION  2

/*---------------------------------------------------------------------------
                     ODCI TYPES
  ---------------------------------------------------------------------------*/
/*
 * These are C mappings for the OTS types defined in catodci.sql
 */

typedef OCIRef   ODCIColInfo_ref;
typedef OCIRef   ODCIIndexInfo_ref;
typedef OCIRef   ODCIPredInfo_ref;
typedef OCIArray ODCIRidList;
typedef OCIRef   ODCIIndexCtx_ref;
typedef OCIRef   ODCIObject_ref;
typedef OCIArray ODCIObjectList;
typedef OCIRef   ODCIQueryInfo_ref;
typedef OCIRef   ODCIFuncInfo_ref;
typedef OCIRef   ODCICost_ref;
typedef OCIRef   ODCIArgDesc_ref;
typedef OCIRef   ODCIStatsOptions_ref;
typedef OCIRef   ODCIPartInfo_ref;
typedef OCIRef   ODCIEnv_ref;
typedef OCIRef   ODCIExtTableInfo_ref;             /* external table support */
typedef OCIRef   ODCIExtTableQCInfo_ref;           /* external table support */
typedef OCIRef   ODCIFuncCallInfo_ref;
typedef OCIArray ODCINumberList;
typedef OCIArray ODCIPartInfoList;
typedef OCIArray ODCIColValList;
typedef OCIArray ODCIColArrayList;
typedef OCIArray ODCIFilterInfoList;
typedef OCIArray ODCIOrderByInfoList;
typedef OCIRef   ODCIFilterInfo_ref;
typedef OCIRef   ODCIOrderByInfo_ref;
typedef OCIRef   ODCICompQueryInfo_ref;
typedef OCIArray ODCIColInfoList;
typedef OCIArray ODCIColInfoList2;
typedef OCIArray ODCIArgDescList;
typedef OCIArray ODCIGranuleList;
 
#endif /* ODCI_ORACLE */

#ifndef ODCI_KUTYXTT
#  define ODCI_KUTYXTT

#  ifndef KOL3_KUTYXTT
#   ifdef K3_ORACLE
#    include <kol3.h>
#   endif
#  endif

/*---------- External Tables ----------*/

/* Begin structure */

#ifndef ODCI_KUTY_BS
#  define ODCI_KUTY_BS(s) struct s {
#endif 

/* End structure */

#ifndef ODCI_KUTY_ES
#  define ODCI_KUTY_ES(s) }; typedef struct s s;
#endif

/* Scalar attr */

#ifndef ODCI_KUTY_SA
#  define ODCI_KUTY_SA( t, m, s ) t m;
#endif

/* Pointer attr */

#ifndef ODCI_KUTY_PA
#  define ODCI_KUTY_PA( t, m, s ) t *m;
#endif

/* large attr by value */
#ifndef ODCI_KUTY_LA
#  define ODCI_KUTY_LA( t, m, s ) t *m;
#endif

/* array attr */
#ifndef ODCI_KUTY_AA
#  define ODCI_KUTY_AA( t, m, s, e ) t *m;
#endif

ODCI_KUTY_BS( ODCIColInfo )
  ODCI_KUTY_PA( OCIString, TableSchema,         ODCIColInfo )
  ODCI_KUTY_PA( OCIString, TableName,           ODCIColInfo )
  ODCI_KUTY_PA( OCIString, ColName,             ODCIColInfo )
  ODCI_KUTY_PA( OCIString, ColTypName,          ODCIColInfo )
  ODCI_KUTY_PA( OCIString, ColTypSchema,        ODCIColInfo )
  ODCI_KUTY_PA( OCIString, TablePartition,      ODCIColInfo )
  ODCI_KUTY_SA( OCINumber, ColFlags,            ODCIColInfo )
  ODCI_KUTY_SA( OCINumber, ColOrderPos,         ODCIColInfo )
  ODCI_KUTY_SA( OCINumber, TablePartitionIden,  ODCIColInfo )
  ODCI_KUTY_SA( OCINumber, TablePartitionTotal, ODCIColInfo )
ODCI_KUTY_ES( ODCIColInfo )

ODCI_KUTY_BS( ODCIColInfo_ind )
  ODCI_KUTY_SA( OCIInd, atomic,              ODCIColInfo_ind )
  ODCI_KUTY_SA( OCIInd, TableSchema,         ODCIColInfo_ind )
  ODCI_KUTY_SA( OCIInd, TableName,           ODCIColInfo_ind )
  ODCI_KUTY_SA( OCIInd, ColName,             ODCIColInfo_ind )
  ODCI_KUTY_SA( OCIInd, ColTypName,          ODCIColInfo_ind )
  ODCI_KUTY_SA( OCIInd, ColTypSchema,        ODCIColInfo_ind )
  ODCI_KUTY_SA( OCIInd, TablePartition,      ODCIColInfo_ind )
  ODCI_KUTY_SA( OCIInd, ColFlags,            ODCIColInfo_ind )
  ODCI_KUTY_SA( OCIInd, ColOrderPos,         ODCIColInfo_ind )
  ODCI_KUTY_SA( OCIInd, TablePartitionIden,  ODCIColInfo_ind )
  ODCI_KUTY_SA( OCIInd, TablePartitionTotal, ODCIColInfo_ind )
ODCI_KUTY_ES( ODCIColInfo_ind )

ODCI_KUTY_BS( ODCIArgDesc )
  ODCI_KUTY_SA( OCINumber, ArgType,             ODCIArgDesc )
  ODCI_KUTY_PA( OCIString, TableName,           ODCIArgDesc )
  ODCI_KUTY_PA( OCIString, TableSchema,         ODCIArgDesc )
  ODCI_KUTY_PA( OCIString, ColName,             ODCIArgDesc )
  ODCI_KUTY_PA( OCIString, TablePartitionLower, ODCIArgDesc )
  ODCI_KUTY_PA( OCIString, TablePartitionUpper, ODCIArgDesc )
  ODCI_KUTY_SA( OCINumber, Cardinality,         ODCIArgDesc )
ODCI_KUTY_ES( ODCIArgDesc )

ODCI_KUTY_BS( ODCIArgDesc_ind )
  ODCI_KUTY_SA( OCIInd, atomic,              ODCIArgDesc_ind )
  ODCI_KUTY_SA( OCIInd, ArgType,             ODCIArgDesc_ind )
  ODCI_KUTY_SA( OCIInd, TableName,           ODCIArgDesc_ind )
  ODCI_KUTY_SA( OCIInd, TableSchema,         ODCIArgDesc_ind )
  ODCI_KUTY_SA( OCIInd, ColName,             ODCIArgDesc_ind )
  ODCI_KUTY_SA( OCIInd, TablePartitionLower, ODCIArgDesc_ind )
  ODCI_KUTY_SA( OCIInd, TablePartitionUpper, ODCIArgDesc_ind )
  ODCI_KUTY_SA( OCIInd, Cardinality,         ODCIArgDesc_ind )
ODCI_KUTY_ES( ODCIArgDesc_ind )

ODCI_KUTY_BS( ODCIExtTableInfo )

   ODCI_KUTY_PA( OCIString,       TableSchema,      ODCIExtTableInfo )
   ODCI_KUTY_PA( OCIString,       TableName,        ODCIExtTableInfo )
   ODCI_KUTY_AA( ODCIColInfoList, RefCols,          ODCIExtTableInfo, ODCIColInfo )
   ODCI_KUTY_LA( OCIClobLocator,  AccessParmClob,   ODCIExtTableInfo )
   ODCI_KUTY_LA( OCIBlobLocator,  AccessParmBlob,   ODCIExtTableInfo )
   ODCI_KUTY_AA( ODCIArgDescList, Locations,        ODCIExtTableInfo, ODCIArgDesc )
   ODCI_KUTY_AA( ODCIArgDescList, Directories,      ODCIExtTableInfo, ODCIArgDesc )
   ODCI_KUTY_PA( OCIString,       DefaultDirectory, ODCIExtTableInfo )
   ODCI_KUTY_PA( OCIString,       DriverType,       ODCIExtTableInfo )
   ODCI_KUTY_SA( OCINumber,       OpCode,           ODCIExtTableInfo )
   ODCI_KUTY_SA( OCINumber,       AgentNum,         ODCIExtTableInfo )
   ODCI_KUTY_SA( OCINumber,       GranuleSize,      ODCIExtTableInfo )
   ODCI_KUTY_SA( OCINumber,       Flag,             ODCIExtTableInfo )
   ODCI_KUTY_SA( OCINumber,       SamplePercent,    ODCIExtTableInfo )
   ODCI_KUTY_SA( OCINumber,       MaxDoP,           ODCIExtTableInfo )
   ODCI_KUTY_PA( OCIRaw,          SharedBuf,        ODCIExtTableInfo )
   ODCI_KUTY_PA( OCIString,       MTableName,       ODCIExtTableInfo )
   ODCI_KUTY_PA( OCIString,       MTableSchema,     ODCIExtTableInfo )
   ODCI_KUTY_SA( OCINumber,       TableObjNo,       ODCIExtTableInfo )
   ODCI_KUTY_PA( OCIString,       AccessParmMod,    ODCIExtTableInfo )

ODCI_KUTY_ES( ODCIExtTableInfo )

ODCI_KUTY_BS( ODCIExtTableInfo_ind )

   ODCI_KUTY_SA( OCIInd, _atomic,          ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, TableSchema,      ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, TableName,        ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, RefCols,          ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, AccessParmClob,   ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, AccessParmBlob,   ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, Locations,        ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, Directories,      ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, DefaultDirectory, ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, DriverType,       ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, OpCode,           ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, AgentNum,         ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, GranuleSize,      ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, Flag,             ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, SamplePercent,    ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, MaxDoP,           ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, SharedBuf,        ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, MTableName,       ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, MTableSchema,     ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, TableObjNo,       ODCIExtTableInfo_ind )
   ODCI_KUTY_SA( OCIInd, AccessParmMod,    ODCIExtTableInfo_ind )

ODCI_KUTY_ES( ODCIExtTableInfo_ind )

/* Proj 47082: GranuleInfo is currently not in use. Granule info is subsumed
 * by attributes in the xtArgs structure */
ODCI_KUTY_BS( ODCIExtTableQCInfo )

   ODCI_KUTY_SA( OCINumber,       NumGranules,            ODCIExtTableQCInfo )
   ODCI_KUTY_SA( OCINumber,       NumLocations,           ODCIExtTableQCInfo )
   ODCI_KUTY_AA( ODCIGranuleList, GranuleInfo,            ODCIExtTableQCInfo, OCINumber )
   ODCI_KUTY_SA( OCINumber,       IntraSourceConcurrency, ODCIExtTableQCInfo )
   ODCI_KUTY_SA( OCINumber,       MaxDoP,                 ODCIExtTableQCInfo )
   ODCI_KUTY_PA( OCIRaw,          SharedBuf,              ODCIExtTableQCInfo )

ODCI_KUTY_ES( ODCIExtTableQCInfo )

ODCI_KUTY_BS( ODCIExtTableQCInfo_ind )

   ODCI_KUTY_SA( OCIInd, _atomic,                ODCIExtTableQCInfo_ind )
   ODCI_KUTY_SA( OCIInd, NumGranules,            ODCIExtTableQCInfo_ind )
   ODCI_KUTY_SA( OCIInd, NumLocations,           ODCIExtTableQCInfo_ind )
   ODCI_KUTY_SA( OCIInd, GranuleInfo,            ODCIExtTableQCInfo_ind )
   ODCI_KUTY_SA( OCIInd, IntraSourceConcurrency, ODCIExtTableQCInfo_ind )
   ODCI_KUTY_SA( OCIInd, MaxDoP,                 ODCIExtTableQCInfo_ind )
   ODCI_KUTY_SA( OCIInd, SharedBuf,              ODCIExtTableQCInfo_ind )

ODCI_KUTY_ES( ODCIExtTableQCInfo_ind )

#ifdef KUTYXTTE_ORACLE
KUTYSA( ODCIColInfo_ptr_t )
KUTYSA( ODCIArgDesc_ptr_t )
KUTYSA( OCINumber_ptr_t )
#endif

#endif /* ODCI_KUTYXTT */

#ifdef ODCI_ORACLE_DEFINED

struct ODCIFuncCallInfo
{
   struct ODCIColInfo ColInfo;
};

struct ODCIFuncCallInfo_ind
{
  struct ODCIColInfo_ind ColInfo;
};

struct ODCITrustedColInfo
{
 oratext*  TableSchema;    /* QX_CINFO_TSCHEMA_POS */
 oratext*  TableName;      /* QX_CINFO_TNAME_POS */
 oratext*  ColName;        /* QX_CINFO_CNAME_POS */
 oratext*  ColTypeName;    /* QX_CINFO_CTYPNAME_POS */
 oratext*  ColTypeSchema;  /* QX_CINFO_CTYPSCHEMA_POS */
 oratext*  TablePartition; /* QX_CINFO_TPART_POS */
 ub1       ColFlags;          /* QX_CINFO_FLAGS_POS */
 ub2       ColOrderBy;        /* QX_CINFO_ORDERBY_POS */
 void*     TablePartitionIden;     /* QX_CINFO_TPIDEN_POS */
 ub4       TablePartitionIdenLen;
 void*     TablePartitionTotal;      /* QX_CINFO_TPTOTAL_POS */
 ub4       TablePartitionTotalLen;
 void*     cTableMut;
 void*     TableMut;
};
typedef struct ODCITrustedColInfo ODCITrustedColInfo;

struct ODCITrustedIndexInfo
{
   oratext*               IndexSchema;
   oratext*               IndexName;
   ODCITrustedColInfo**   IndexCols;
   ub4                    NumIndexCols;
   oratext*               IndexPartition;
   ub2                    IndexInfoFlags;
   ub2                    IndexParaDegree;
   void*                  IndexPartitionIden;
   ub4                    IndexPartitionIdenLen;
   void*                  IndexPartitionTotal;
   ub4                    IndexPartitionTotalLen;
   void*                  IndexMut;
};
typedef struct ODCITrustedIndexInfo ODCITrustedIndexInfo;

struct ODCITrustedUpdateInfo
{
  ODCITrustedIndexInfo *iinfo;
  oratext              *rid;
  ub4                   ridlen;
  void                 *oldval;
  void                 *newval;
  ub1                   EnvFlags;
  ub2                   CallProperty;
  ub4                   DebugLevel;
  sword                 CursorNum;
};
typedef struct ODCITrustedUpdateInfo ODCITrustedUpdateInfo;

struct ODCIIndexInfo
{
   OCIString*       IndexSchema;
   OCIString*       IndexName;
   ODCIColInfoList* IndexCols;
   OCIString*       IndexPartition;
   OCINumber        IndexInfoFlags;
   OCINumber        IndexParaDegree;
   OCINumber        IndexPartitionIden;
   OCINumber        IndexPartitionTotal;
};
typedef struct ODCIIndexInfo ODCIIndexInfo;
 
struct ODCIIndexInfo_ind
{
   OCIInd atomic;
   OCIInd IndexSchema;
   OCIInd IndexName;
   OCIInd IndexCols;
   OCIInd IndexPartition;
   OCIInd IndexInfoFlags;
   OCIInd IndexParaDegree;
   OCIInd IndexPartitionIden;
   OCIInd IndexPartitionTotal;
};
typedef struct ODCIIndexInfo_ind ODCIIndexInfo_ind;
 
struct ODCIPredInfo
{
   OCIString* ObjectSchema;
   OCIString* ObjectName;
   OCIString* MethodName;
   OCINumber  Flags;
};
typedef struct ODCIPredInfo ODCIPredInfo;
 
struct ODCIPredInfo_ind
{
   OCIInd atomic;
   OCIInd ObjectSchema;
   OCIInd ObjectName;
   OCIInd MethodName;
   OCIInd Flags;
};
typedef struct ODCIPredInfo_ind ODCIPredInfo_ind;

struct ODCIFilterInfo
{
  ODCIColInfo ColInfo;
  OCINumber Flags;
  OCIAnyData *strt;
  OCIAnyData *stop;
};
typedef struct ODCIFilterInfo ODCIFilterInfo;

struct ODCIFilterInfo_ind
{
  OCIInd atomic;
  ODCIColInfo_ind ColInfo;
  OCIInd  Flags;
  OCIInd  strt;
  OCIInd  stop;
};
typedef struct ODCIFilterInfo_ind ODCIFilterInfo_ind;


struct ODCIOrderByInfo
{
  OCINumber ExprType;
  OCIString *ObjectSchema;
  OCIString *TableName;
  OCIString *ExprName;
  OCINumber SortOrder;
};
typedef struct ODCIOrderByInfo ODCIOrderByInfo;

struct ODCIOrderByInfo_ind
{
  OCIInd atomic;
  OCIInd ExprType;
  OCIInd ObjectSchema;
  OCIInd TableName;
  OCIInd ExprName;
  OCIInd SortOrder;
};
typedef struct ODCIOrderByInfo_ind ODCIOrderByInfo_ind;


struct ODCICompQueryInfo
{
  ODCIFilterInfoList  *PredInfo;
  ODCIOrderByInfoList *ObyInfo;
};
typedef struct ODCICompQueryInfo ODCICompQueryInfo;

struct ODCICompQueryInfo_ind
{
  OCIInd atomic;
  OCIInd PredInfo;
  OCIInd ObyInfo;
};
typedef struct ODCICompQueryInfo_ind ODCICompQueryInfo_ind;

 
struct ODCIObject
{
   OCIString* ObjectSchema;
   OCIString* ObjectName;
};
typedef struct ODCIObject ODCIObject;
 
struct ODCIObject_ind
{
   OCIInd atomic;
   OCIInd ObjectSchema;
   OCIInd ObjectName;
};
typedef struct ODCIObject_ind ODCIObject_ind;
 
struct ODCIQueryInfo
{
   OCINumber       Flags;
   ODCIObjectList* AncOps;
   ODCICompQueryInfo CompInfo;
};
typedef struct ODCIQueryInfo ODCIQueryInfo;

 
struct ODCIQueryInfo_ind
{
   OCIInd atomic;
   OCIInd Flags;
   OCIInd AncOps;
   ODCICompQueryInfo_ind CompInfo;
};
typedef struct ODCIQueryInfo_ind ODCIQueryInfo_ind;
 
struct ODCIIndexCtx
{
   struct ODCIIndexInfo IndexInfo;
   OCIString*           Rid;
   struct ODCIQueryInfo QueryInfo;
};
typedef struct ODCIIndexCtx ODCIIndexCtx;
 
struct ODCIIndexCtx_ind
{
   OCIInd                   atomic;
   struct ODCIIndexInfo_ind IndexInfo;
   OCIInd                   Rid;
   struct ODCIQueryInfo_ind QueryInfo;
};
typedef struct ODCIIndexCtx_ind ODCIIndexCtx_ind;
 
struct ODCIFuncInfo
{
   OCIString* ObjectSchema;
   OCIString* ObjectName;
   OCIString* MethodName;
   OCINumber Flags;
};
typedef struct ODCIFuncInfo ODCIFuncInfo;
 
struct ODCIFuncInfo_ind
{
   OCIInd atomic;
   OCIInd ObjectSchema;
   OCIInd ObjectName;
   OCIInd MethodName;
   OCIInd Flags;
};
typedef struct ODCIFuncInfo_ind ODCIFuncInfo_ind;
 
struct ODCICost
{
   OCINumber  CPUcost;
   OCINumber  IOcost;
   OCINumber  NetworkCost;
   OCIString* IndexCostInfo;
};
typedef struct ODCICost ODCICost;
 
struct ODCICost_ind
{
   OCIInd atomic;
   OCIInd CPUcost;
   OCIInd IOcost;
   OCIInd NetworkCost;
   OCIInd IndexCostInfo;
};
typedef struct ODCICost_ind ODCICost_ind;
 
struct ODCIStatsOptions
{
   OCINumber Sample;
   OCINumber Options;
   OCINumber Flags;
};
typedef struct ODCIStatsOptions ODCIStatsOptions;
 
struct ODCIStatsOptions_ind
{
   OCIInd atomic;
   OCIInd Sample;
   OCIInd Options;
   OCIInd Flags;
};
typedef struct ODCIStatsOptions_ind ODCIStatsOptions_ind;

struct ODCIEnv
{
   OCINumber EnvFlags;
   OCINumber CallProperty;
   OCINumber DebugLevel;
   OCINumber CursorNum;
};
typedef struct ODCIEnv ODCIEnv;

struct ODCIEnv_ind
{
   OCIInd _atomic;
   OCIInd EnvFlags;
   OCIInd CallProperty;
   OCIInd DebugLevel;
   OCIInd CursorNum;
};
typedef struct ODCIEnv_ind ODCIEnv_ind;
 
struct ODCIPartInfo
{
   OCIString* TablePartition;
   OCIString* IndexPartition;
   OCINumber  IndexPartitionIden;
   OCINumber  PartOp;
};
typedef struct ODCIPartInfo ODCIPartInfo;
 
struct ODCIPartInfo_ind
{
   OCIInd atomic;
   OCIInd TablePartition;
   OCIInd IndexPartition;
   OCIInd IndexPartitionIden;
   OCIInd PartOp;
};
typedef struct ODCIPartInfo_ind ODCIPartInfo_ind;

/*********************************************************/
/* Table Function Info types (used by ODCITablePrepare)  */
/*********************************************************/

struct ODCITabFuncInfo
{
  ODCINumberList*  Attrs;
  OCIType*         RetType;
};
typedef struct ODCITabFuncInfo ODCITabFuncInfo;

struct ODCITabFuncInfo_ind
{
  OCIInd _atomic;
  OCIInd Attrs;
  OCIInd RetType;
};
typedef struct ODCITabFuncInfo_ind ODCITabFuncInfo_ind;

/*********************************************************************/
/* Table Function Statistics types (used by ODCIStatsTableFunction)  */
/*********************************************************************/

struct ODCITabFuncStats
{
  OCINumber num_rows;
};
typedef struct ODCITabFuncStats ODCITabFuncStats;

struct ODCITabFuncStats_ind
{
  OCIInd _atomic;
  OCIInd num_rows;
};
typedef struct ODCITabFuncStats_ind ODCITabFuncStats_ind;

/*---------------------------------------------------------------------------
                     PRIVATE TYPES AND CONSTANTS
  ---------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------
                           PUBLIC FUNCTIONS
  ---------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------
                          PRIVATE FUNCTIONS
  ---------------------------------------------------------------------------*/


#undef ODCI_ORACLE_DEFINED
#endif                                              /* ODCI_ORACLE_DEFINED */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     usr/include/oracle/19.6/client64/oratypes.h                                                         0000644 0000000 0000000 00000014716 13576202531 017026  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* $RCSfile: oratypes.h $ $Date: 20-jul-00.13:44:19 
   ----------------------------------------------------------------------
 Copyright (c) 1982, 2017, Oracle and/or its affiliates. All rights reserved.
   ---------------------------------------------------------------------- */
 
#ifndef ORATYPES
# define ORATYPES
# define SX_ORACLE
# define SX3_ORACLE 

#ifndef ORASTDDEF
# include <stddef.h>
# define ORASTDDEF
#endif

#ifndef ORALIMITS
# include <limits.h>
# define ORALIMITS
#endif

#ifndef ORASTDARG
# include <stdarg.h>
# define ORASTDARG
#endif

#ifndef TRUE
# define TRUE  1
# define FALSE 0
#endif

/* --- Signed/Unsigned one-byte scalar (sb1/ub1) --- */

#ifndef lint
  typedef unsigned char ub1;
  typedef   signed char sb1;
  typedef          char eb1;
#else 
# define ub1 unsigned char
# define sb1 signed char
# define eb1 char
#endif

#define UB1MAXVAL    ((ub1)UCHAR_MAX)
#define UB1MINVAL    ((ub1)       0)
#define SB1MAXVAL    ((sb1)SCHAR_MAX)
#define SB1MINVAL    ((sb1)SCHAR_MIN)

#define MINUB1MAXVAL ((ub1)  255)
#define MAXUB1MINVAL ((ub1)    0)
#define MINSB1MAXVAL ((sb1)  127)
#define MAXSB1MINVAL ((sb1) -127)

#define EB1MAXVAL    ((eb1)SCHAR_MAX)
#define EB1MINVAL    ((eb1)        0)

#define MINEB1MAXVAL ((eb1)  127)
#define MAXEB1MINVAL ((eb1)    0)

#define UB1BITS      CHAR_BIT
#define UB1MASK      ((1 << ((uword)CHAR_BIT)) - 1)

/* backwards compatibility */

#ifndef lint
  typedef sb1 b1;
#else
# define b1 sb1
#endif

#define B1MAXVAL SB1MAXVAL
#define B1MINVAL SB1MINVAL

/* --- Signed/Unsigned two-byte scalar (sb2/ub2) --- */

#ifndef lint 
  typedef unsigned short ub2;
  typedef   signed short sb2;
  typedef          short eb2;
#else
# define ub2 unsigned short
# define sb2 signed short
# define eb2 short
#endif

#define UB2MAXVAL    ((ub2)USHRT_MAX)
#define UB2MINVAL    ((ub2)        0)
#define SB2MAXVAL    ((sb2) SHRT_MAX)
#define SB2MINVAL    ((sb2) SHRT_MIN)

#define MINUB2MAXVAL ((ub2) 65535)
#define MAXUB2MINVAL ((ub2)     0)
#define MINSB2MAXVAL ((sb2) 32767)
#define MAXSB2MINVAL ((sb2)-32767)

#define EB2MAXVAL    ((eb2) SHRT_MAX)
#define EB2MINVAL    ((eb2)        0)

#define MINEB2MAXVAL ((eb2) 32767)
#define MAXEB2MINVAL ((eb2)     0)

/* backwards compatibility */

#ifndef lint
  typedef sb2 b2;
#else
# define b2 sb2
#endif

#define B2MAXVAL SB2MAXVAL
#define B2MINVAL SB2MINVAL

/* --- Signed/Unsigned four-byte scalar (sb4/ub4) --- */

#ifndef lint 
  typedef unsigned int ub4;
  typedef   signed int sb4;
  typedef          int eb4;
#else
# define ub4 unsigned int
# define sb4 signed int
# define eb4 int
#endif

#define UB4MAXVAL    ((ub4)UINT_MAX)
#define UB4MINVAL    ((ub4)       0)
#define SB4MAXVAL    ((sb4) INT_MAX)
#define SB4MINVAL    ((sb4) INT_MIN)

#define MINUB4MAXVAL ((ub4) 4294967295)
#define MAXUB4MINVAL ((ub4)          0)
#define MINSB4MAXVAL ((sb4) 2147483647)
#define MAXSB4MINVAL ((sb4)-2147483647)

#define EB4MAXVAL    ((eb4) INT_MAX)
#define EB4MINVAL    ((eb4)       0)

#define MINEB4MAXVAL ((eb4) 2147483647)
#define MAXEB4MINVAL ((eb4)          0)

/* --- Signed/Unsigned eight-byte scalar (orasb8/oraub8) --- */

# define ORAXB8_DEFINED
# ifndef lint
#  ifdef __LP64__
    typedef unsigned long oraub8;
    typedef   signed long orasb8;
#  else
    typedef unsigned long long oraub8;
    typedef   signed long long orasb8;
#  endif /* __LP64__ */
    typedef oraub8 ub8;
    typedef orasb8 sb8;
# else
#  define ub8 oraub8
#  define sb8 orasb8
#  ifdef __LP64__
#   define oraub8 unsigned long
#   define orasb8 signed long
#  else
#   define oraub8 unsigned long long
#   define orasb8 signed long long
#  endif /* __LP64__ */
# endif /* !lint */

# define ORAUB8MINVAL    ((oraub8)0)
# define ORAUB8MAXVAL    ((oraub8)18446744073709551615)
# define ORASB8MINVAL    ((orasb8)-9223372036854775808)
# define ORASB8MAXVAL    ((orasb8) 9223372036854775807)

# define MAXORAUB8MINVAL ((oraub8)0)
# define MINORAUB8MAXVAL ((oraub8)18446744073709551615)
# define MAXORASB8MINVAL ((orasb8)-9223372036854775807)
# define MINORASB8MAXVAL ((orasb8) 9223372036854775807)

/* backwards compatibility */

#ifndef lint
  typedef sb4 b4;
#else
# define b4 sb4
#endif

#define B4MAXVAL SB4MAXVAL
#define B4MINVAL SB4MINVAL

/* --- Character pointer --- */

#ifdef lint
# define oratext unsigned char
#else
  typedef unsigned char oratext;
#endif

#if !defined(LUSEMFC)
# ifdef lint
#  define text    unsigned char
#  define OraText oratext
# else
   typedef oratext text;
   typedef oratext OraText;
# endif
#endif

#if !defined(MOTIF) && !defined(LISPL)  && !defined(__cplusplus) && \
    !defined(LUSEMFC)
  typedef OraText *string;        
#endif 

#ifndef lint
  typedef unsigned short utext;
#else
# define utext  unsigned short
#endif

/* --- Boolean --- */

#ifndef boolean
# ifndef lint
   typedef int boolean;
# else
#  define boolean int
# endif
#endif

/* --- Other data types --- */

#ifndef lint
  typedef          int eword;
  typedef unsigned int uword;
  typedef   signed int sword;
#else
# define eword int
# define uword unsigned int
# define sword signed int
#endif 

#define  EWORDMAXVAL  ((eword) INT_MAX)
#define  EWORDMINVAL  ((eword)       0)

#define  UWORDMAXVAL  ((uword)UINT_MAX)
#define  UWORDMINVAL  ((uword)       0)

#define  SWORDMAXVAL  ((sword) INT_MAX)
#define  SWORDMINVAL  ((sword) INT_MIN)

#define  MINEWORDMAXVAL  ((eword)  2147483647)
#define  MAXEWORDMINVAL  ((eword)           0)

#define  MINUWORDMAXVAL  ((uword)  4294967295)
#define  MAXUWORDMINVAL  ((uword)           0)

#define  MINSWORDMAXVAL  ((sword)  2147483647)
#define  MAXSWORDMINVAL  ((sword) -2147483647)

#ifndef lint
  typedef unsigned long  ubig_ora;             
  typedef   signed long  sbig_ora;             
#else
# define ubig_ora unsigned long
# define sbig_ora signed long
#endif 

#define UBIG_ORAMAXVAL ((ubig_ora)ULONG_MAX)
#define UBIG_ORAMINVAL ((ubig_ora)        0)

#define SBIG_ORAMAXVAL ((sbig_ora) LONG_MAX)
#define SBIG_ORAMINVAL ((sbig_ora) LONG_MIN)

#define MINUBIG_ORAMAXVAL ((ubig_ora) 4294967295)
#define MAXUBIG_ORAMINVAL ((ubig_ora)          0)

#define MINSBIG_ORAMAXVAL ((sbig_ora) 2147483647)
#define MAXSBIG_ORAMINVAL ((sbig_ora)-2147483647)

#define UBIGORABITS      (UB1BITS * sizeof(ubig_ora))

/* --- Const --- */

#undef CONST
#define CONST const

/* --- Misc --- */

#define dvoid void

typedef void (*lgenfp_t)( void );

#ifndef ORASYS_TYPES
# include <sys/types.h>
# define ORASYS_TYPES
#endif 

#ifndef SIZE_TMAXVAL
# define SIZE_TMAXVAL UBIG_ORAMAXVAL
#endif

#ifndef MINSIZE_TMAXVAL
# define MINSIZE_TMAXVAL (size_t)4294967295
#endif

#endif /* ORATYPES */
                                                  usr/include/oracle/19.6/client64/ori.h                                                              0000644 0000000 0000000 00000310567 13576202531 015754  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* Copyright (c) 1994, 2006, Oracle. All rights reserved.  */

/*
  NAME
    ORI - OCI navigational interface

  DESCRIPTION

    This section is intended to give a brief introduction to the navigational
    interfaces.  Readers can refer to the documents listed in the section 
    'RELATED DOCUMENTS' for more information. 

    PURPOSE 
       The Oracle Call Interface (OCI) supports navigational access of objects.
       In the navigational paradigm, data is represented as a graph of objects 
       connected by references.  Objects in the graph are reached by following
       the references.

    OBJECT ENVIRONMENT

      The object environment is initialized when the OCI environment handle is
      initialized with the object option.  An object environment contains a
