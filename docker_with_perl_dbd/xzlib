
An X<prototypes, about>optional part of a B<subroutine> declaration telling
the Perl compiler how many and what flavor of arguments may be passed as
B<actual arguments>, so you can write subroutine calls that parse much like
built-in functions. (Or don’t parse, as the case may be.)

=item pseudofunction

A X<pseudofunctions>X<constructs, pseudofunctions>X<functions,
pseudofunctions>construct that sometimes looks like a function but really
isn’t. Usually reserved for B<lvalue> modifiers like C<my>, for B<context>
modifiers like C<scalar>, and for the pick-your-own-quotes constructs,
C<q//>, C<qq//>, C<qx//>, C<qw//>, C<qr//>, C<m//>, C<s///>, C<y///>, and
C<tr///>.

=item pseudohash

Formerly, a reference X<pseudohashes>X<hashes, pseudohashes>to an array
whose initial element happens to hold a reference to a hash. You used to be
able to treat a pseudohash reference as either an array reference or a hash
reference. Pseudohashes are no longer supported.

=item pseudoliteral

An B<operator> X<pseudoliterals>XC<that looks something like a B<literal>,
such as the output-grabbing operator, <literal
moreinfo="none">`>I<C<command>>C<`>.

=item public domain

Something X<public domain>not owned by anybody. Perl is copyrighted and is
thus I<not> in the public domain—it’s just B<freely available> and B<freely
redistributable>.

=item pumpkin

A X<pumpkin (term)>notional “baton” handed around the Perl community
indicating who is the lead integrator in some arena of development.

=item pumpking

A B<X<pumpking>pumpkin> holder, the person in charge of pumping the pump,
or at least priming it. Must be willing to play the part of the Great
Pumpkin now and then.

=item PV

A “X<PV (pointer value)>X<pointer value (PV)>pointer value”, which is Perl
Internals Talk for a C<char*>.

=back

=head2 Q

=over 4

=item qualified

Possessing a X<qualified (term)>complete name. The symbol C<$Ent::moot> is
qualified; C<$moot> is unqualified. A fully qualified filename is specified
from the top-level directory.

=item quantifier

A X<quantifiers, about>component of a B<regular expression> specifying how
many times the foregoing B<atom> may occur.

=back

=head2 R

=over 4

=item race condition

A X<race conditions, defined>race condition exists when the result of
several interrelated events depends on the ordering of those events, but
that order cannot be guaranteed due to nondeterministic timing effects. If
two or more programs, or parts of the same program, try to go through the
same series of events, one might interrupt the work of the other. This is a
good way to find an B<exploit>.

=item readable

With X<readable (term)>respect to files, one that has the proper permission
bit set to let you access the file. With respect to computer programs, one
that’s written well enough that someone has a chance of figuring out what
it’s trying to do.

=item reaping

The last X<reaping zombie processes>rites performed by a parent B<process>
on behalf of a deceased child process so that it doesn’t remain a
B<zombie>.  See the C<wait> and C<waitpid> function calls.

=item record

A set of X<records, defined>related data values in a B<file> or B<stream>,
often associated with a unique B<key> field. In Unix, often commensurate
with a B<line>, or a blank-line–terminated set of lines (a “paragraph”).
Each line of the I</etc/passwd> file is a record, keyed on login name,
containing information about that user.

=item recursion

The art of X<recursion, defined>defining something (at least partly) in
terms of itself, which is a naughty no-no in dictionaries but often works
out okay in computer programs if you’re careful not to recurse forever
(which is like an infinite loop with more spectacular failure modes).

=item reference

Where you X<references, about>look to find a pointer to information
somewhere else. (See B<indirection>.) References come in two flavors:
B<symbolic references> and B<hard references>.

=item referent

Whatever a X<referents, defined>reference refers to, which may or may not
have a name. Common types of referents include scalars, arrays, hashes, and
subroutines.

=item regex

See B<regular expression>.

=item regular expression

A single X<regular expressions, defined>entity with various
interpretations, like an elephant. To a computer scientist, it’s a grammar
for a little language in which some strings are legal and others aren’t. To
normal people, it’s a pattern you can use to find what you’re looking for
when it varies from case to case. Perl’s regular expressions are far from
regular in the theoretical sense, but in regular use they work quite well.
Here’s a regular expression: C</Oh s.*t./>. This will match strings like
“C<Oh say can you see by the dawn's early light>” and “C<Oh sit!>”. See
Camel chapter 5, “Pattern Matching”.

=item regular expression modifier

An option on a X<regular expression modifiers>X<modifiers, regular
expression>pattern or substitution, such as C</i> to render the pattern
case- insensitive.

=item regular file

A B<file> that’s X<regular files>X<files, regular>not a B<directory>, a
B<device>, a named B<pipe> or B<socket>, or a B<symbolic link>. Perl uses
the C<–f> file test operator to identify regular files. Sometimes called a
“plain” file.

=item relational operator

An B<operator> that X<relational operators>says whether a particular
ordering relationship is B<true> about a pair of B<operands>. Perl has both
numeric and string relational operators. See B<collating sequence>.

=item reserved words

A word with a X<reserved words>X<keywords (term)>specific, built-in meaning
to a B<compiler>, such as C<if> or C<delete>. In many languages (not Perl),
it’s illegal to use reserved words to name anything else. (Which is why
they’re reserved, after all.) In Perl, you just can’t use them to name
B<labels> or B<filehandles>. Also called “keywords”.

=item return value

The B<value> produced X<return values>X<values, return>by a B<subroutine>
or B<expression> when evaluated. In Perl, a return value may be either a
B<list> or a B<scalar>.

=item RFC

Request For Comment, X<Request For Comment (RFC)>X<RFC (Request For
Comment)>which despite the timid connotations is the name of a series of
important standards documents.

=item right shift

A B<bit shift> X<right shift (E<gt>E<gt>) bit operator>X<bit–shift
operators, right shift>X<E<gt>E<gt> (right shift) bit operator>that divides
a number by some power of 2.

=item role

A name X<roles (term)>for a concrete set of behaviors. A role is a way to
add behavior to a class without inheritance.

=item root

The X<root (term)>superuser (C<UID> == 0). Also the top-level directory of
the filesystem.

=item RTFM

What X<RTFM acronym>you are told when someone thinks you should Read The
Fine Manual.

=item run phase

Any X<run phase, defined>time after Perl starts running your main program.
See also B<compile phase>. Run phase is mostly spent in B<runtime> but may
also be spent in B<compile time> when C<require>, C<do> I<C<FILE>>, or
C<eval> I<C<STRING>> operators are executed, or when a substitution uses
the C</ee> modifier.

=item runtime

The time X<runtime (term), defined>when Perl is actually doing what your
code says to do, as opposed to the earlier period of time when it was
trying to figure out whether what you said made any sense whatsoever, which
is B<compile time>.

=item runtime pattern

A X<runtime patterns>X<patterns, runtime>pattern that contains one or more
variables to be interpolated before parsing the pattern as a B<regular
expression>, and that therefore cannot be analyzed at compile time, but
must be reanalyzed each time the pattern match operator is evaluated.
Runtime patterns are useful but expensive.

=item RV

A X<Reference Value (RV)>X<RV (Reference Value)>recreational vehicle, not
to be confused with vehicular recreation. RV also means an internal
Reference Value of the type a B<scalar> can hold. See also B<IV> and B<NV>
if you’re not confused yet.

=item rvalue

A B<value> that X<rvalue (term)>X<values, rvalue>you might find on the
right side of an B<assignment>. See also B<lvalue>.

=back

=head2 S

=over 4

=item sandbox

A X<sandbox, defined>walled off area that’s not supposed to affect beyond
its walls. You let kids play in the sandbox instead of running in the road.
See Camel chapter 20, “Security”.

=item scalar

A X<scalars, defined>simple, singular value; a number, B<string>, or
B<reference>.

=item scalar context

The X<scalar context, about>X<context, scalar>situation in which an
B<expression> is expected by its surroundings (the code calling it) to
return a single B<value> rather than a B<list> of values. See also
B<context> and B<list context>. A scalar context sometimes imposes
additional constraints on the return value—see B<string context> and
B<numeric context>. Sometimes we talk about a B<Boolean context> inside
conditionals, but this imposes no additional constraints, since any scalar
value, whether numeric or B<string>, is already true or false.

=item scalar literal

A X<scalar literals>X<literals, scalar>number or quoted B<string>—an actual
B<value> in the text of your program, as opposed to a B<variable>.

=item scalar value

A X<scalar values, about>X<values, scalar>X<SV>value that happens to be a
B<scalar> as opposed to a B<list>.

=item scalar variable

A B<variable> X<scalar variables, defined>X<variables, scalar>prefixed with
C<$> that holds a single value.

=item scope

From X<scopes, defined>how far away you can see a variable, looking through
one. Perl has two visibility mechanisms. It does B<dynamic scoping> of
C<local> B<variables>, meaning that the rest of the B<block>, and any
B<subroutines> that are called by the rest of the block, can see the
variables that are local to the block. Perl does B<lexical scoping> of
C<my> variables, meaning that the rest of the block can see the variable,
but other subroutines called by the block I<cannot> see the variable.

=item scratchpad

The X<scratchpads>area in which a particular invocation of a particular
file or subroutine keeps some of its temporary values, including any
lexically scoped variables.

=item script

A X<scripts (term)>X<programs, defined>text B<file> that is a program
intended to be B<executed> directly rather than B<compiled> to another form
of file before B<execution>.

Also, in the context of B<Unicode>, a writing system for a particular
language or group of languages, such as Greek, Bengali, or Tengwar.

=item script kiddie

A B<cracker> X<script kiddie>who is not a B<hacker> but knows just enough
to run canned scripts. A B<cargo-cult> programmer.

=item sed

A venerable Stream EDitor X<sed (Stream EDitor)>X<Stream EDitor (sed)>from
which Perl derives some of its ideas.

=item semaphore

A fancy X<semaphore>kind of interlock that prevents multiple B<threads> or
B<processes> from using up the same resources simultaneously.

=item separator

A B<character> X<separators>X<characters, separators>X<strings,
separators>or B<string> that keeps two surrounding strings from being
confused with each other. The C<split> function X<split function,
separators and>works on separators. Not to be confused with B<delimiters>
or B<terminators>. The “or” in the previous sentence separated the two
alternatives.

=item serialization

Putting a X<serialization>X<marshalling (term)>fancy B<data structure> into
linear order so that it can be stored as a B<string> in a disk file or
database, or sent through a B<pipe>. Also called marshalling.

=item server

In networking, X<servers, defined>X<processes, server>a B<process> that
either advertises a B<service> or just hangs around at a known location and
waits for B<clients> who need service to get in touch with it.

=item service

Something X<services (term)>you do for someone else to make them happy,
like giving them the time of day (or of their life). On some machines,
well-known services are listed by theX<getservent function> C<getservent>
function.

=item setgid

Same as B<setuid>, X<setgid program, about>only having to do with giving
away B<group> privileges.

=item setuid

Said of a program X<setuid program, about>that runs with the privileges of
its B<owner> rather than (as is usually the case) the privileges of whoever
is running it. Also describes the bit in the mode word (B<permission bits>)
that controls the feature. This bit must be explicitly set by the owner to
enable this feature, and the program must be carefully written not to give
away more privileges than it ought to.

=item shared memory

A piece of B<memory> X<shared memory>X<memory, shared>accessible by two
different B<processes> who otherwise would not see each other’s memory.

=item shebang

Irish for the X<shebang (term)>whole McGillicuddy. In Perl culture, a
portmanteau of “sharp” and “bang”, meaning the C<#!> sequence that tells
the system where to find the interpreter.

=item shell

A B<command>-X<shell program, defined>line B<interpreter>. The program that
interactively gives you a prompt, accepts one or more B<lines> of input,
and executes the programs you mentioned, feeding each of them their proper
B<arguments> and input data. Shells can also execute scripts containing
such commands. Under Unix, typical shells include the Bourne shell
(I</bin/sh>), the C shell (I</bin/csh>), and the Korn shell (I</bin/ksh>).
Perl is not strictly a shell because it’s not interactive (although Perl
programs can be interactive).

=item side effects

Something extra X<side effects>that happens when you evaluate an
B<expression>. Nowadays it can refer to almost anything. For example,
evaluating a simple assignment statement typically has the “side effect” of
assigning a value to a variable. (And you thought assigning the value was
your primary intent in the first place!) Likewise, assigning a value to the
special variable C<$|> (C<$AUTOFLUSH>) has the side effect of forcing a
flush after every C<write> or C<print> on the currently selected
filehandle.

=item sigil

A glyph X<sigils, defined>used in magic. Or, for Perl, the symbol in front
of a variable name, such as C<$>, C<@>, and C<%>.

=item signal

A bolt X<signals and signal handling, about>out of the blue; that is, an
event triggered by the B<operating system>, probably when you’re least
expecting it.

=item signal handler

A B<subroutine> that, X<handlers, signal>instead of being content to be
called in the normal fashion, sits around waiting for a bolt out of the
blue before it will deign to B<execute>. Under Perl, bolts out of the blue
are called signals, and you send them with the C<kill> built-in. See the
C<%SIG> hash in Camel chapter 25, “Special Names” and the section “Signals”
in Camel chapter 15, “Interprocess Communication”.

=item single inheritance

The features X<single inheritance>X<inheritance, single>you got from your
mother, if she told you that you don’t have a father. (See also
B<inheritance> and B<multiple inheritance>.) In computer languages, the
idea that B<classes> reproduce asexually so that a given class can only
have one direct ancestor or B<base class>. Perl supplies no such
restriction, though you may certainly program Perl that way if you like.

=item slice

A selection X<slices of elements>X<elements, slices of>of any number of
B<elements> from a B<list>, B<array>, or B<hash>.

=item slurp

To read an X<slurp (term)>entire B<file> into a B<string> in one operation.

=item socket

An endpoint for X<sockets, defined>network communication among multiple
B<processes> that works much like a telephone or a post office box. The
most important thing about a socket is its B<network address> (like a phone
number). Different kinds of sockets have different kinds of addresses—some
look like filenames, and some don’t.

=item soft reference

SeeX<soft references>X<references, soft> B<symbolic reference>.

=item source filter

A special X<source filters>X<filters, source>kind of B<module> that does
B<preprocessing> on your script just before it gets to the B<tokener>.

=item stack

A X<stacks, defined>device you can put things on the top of, and later take
them back off in the opposite order in which you put them on. See B<LIFO>.

=item standard

Included X<standard (term)>in the official Perl distribution, as in a
standard module, a standard tool, or a standard Perl B<manpage>.

=item standard error

The default output B<stream> for nasty remarks that don’t belong in
B<standard output>. Represented within a Perl program by theX<STDERR
filehandle, about> output>  B<filehandle> C<STDERR>. You can use this
stream explicitly, but the C<die> and C<warn> built-ins write to your
standard error stream automatically (unless trapped or otherwise
intercepted).

=item standard input

The X<STDIN filehandle, about>default input B<stream> for your program,
which if possible shouldn’t care where its data is coming from. Represented
within a Perl program by the B<filehandle> C<STDIN>.

=item standard I/O

A X<standard I/O>X<I/O (Input/Output), standard>X<Input/Output (I/O),
standard>X<STDIO filehandle>standard C library for doing B<buffered> input
and output to the B<operating system>. (The “standard” of standard I/O is
at most marginally related to the “standard” of standard input and output.)
In general, Perl relies on whatever implementation of standard I/O a given
operating system supplies, so the buffering characteristics of a Perl
program on one machine may not exactly match those on another machine.
Normally this only influences efficiency, not semantics. If your standard
I/O package is doing block buffering and you want it to B<flush> the buffer
more often, just set the C<$|> variable to a true value.

=item Standard Library

Everything X<Standard Perl Library, about>that comes with the official
I<perl> distribution. Some vendor versions of I<perl> change their
distributions, leaving out some parts or including extras. See also
B<dual-lived>.

=item standard output

The X<STDOUT filehandle, about>default output B<stream> for your program,
which if possible shouldn’t care where its data is going. Represented
within a Perl program by the B<filehandle> C<STDOUT>.

=item statement

A B<command> to X<statements, about>the computer about what to do next,
like a step in a recipe: “Add marmalade to batter and mix until mixed.” A
statement is distinguished from a B<declaration>, which doesn’t tell the
computer to do anything, but just to learn something.

=item statement modifier

A B<conditional> X<statement modifiers, about>X<modifiers, statement>or
B<loop> that you put after the B<statement> instead of before, if you know
what we mean.

=item static

Varying X<static (term)>slowly compared to something else. (Unfortunately,
everything is relatively stable compared to something else, except for
certain elementary particles, and we’re not so sure about them.) In
computers, where things are supposed to vary rapidly, “static” has a
derogatory connotation, indicating a slightly dysfunctional B<variable>,
B<subroutine>, or B<method>. In Perl culture, the word is politely avoided.

If you’re a C or C++ programmer, you might be looking for Perl’s C<state>
keyword.

=item static method

No such X<static methods>X<methods, static>thing. See B<class method>.

=item static scoping

No such thing. See B<lexical scoping>.

=item static variable

No such X<static variables>X<variables, static>thing. Just use a B<lexical
variable> in a scope larger than your B<subroutine>, or declare it with
C<state> instead of with C<my>.

=item stat structure

A special X<stat structure>X<data structures, stat structure>internal spot
in which Perl keeps the information about the last B<file> on which you
requested information.

=item status

The B<value> X<status value>X<values, status>X<exit status>returned to the
parent B<process> when one of its child processes dies. This value is
placed in the special variable C<$?>. Its upper eight B<bits> are the exit
status of the defunct process, and its lower eight bits identify the signal
(if any) that the process died from. On Unix systems, this status value is
the same as the status word returned by I<wait>(2). See C<system> in Camel
chapter 27, “Functions”.

=item STDERR

See B<standard error>.

=item STDIN

See B<standard input>.

=item STDIO

See B<standard I/O>.

=item STDOUT

See B<standard output>.

=item stream

A flow X<streaming data>X<processes, streaming data>of data into or out of
a process as a steady sequence of bytes or characters, without the
appearance of being broken up into packets. This is a kind of
B<interface>—the underlying B<implementation> may well break your data up
into separate packets for delivery, but this is hidden from you.

=item string

A sequence X<strings, defined>of characters such as “He said !@#*&%@#*?!”.
A string does not have to be entirely printable.

=item string context

The situation X<string context>X<context, string>in which an expression is
expected by its surroundings (the code calling it) to return a B<string>.
See also B<context> and B<numeric context>.

=item stringification

The process X<stringification>of producing a B<string> representation of an
abstract object.

=item struct

C keyword X<struct keyword>introducing a structure definition or name.

=item structure

SeeX<structures> B<data structure>.

=item subclass

See B<derived class>.

=item subpattern

A X<subpatterns, defined>component of a B<regular expression> pattern.

=item subroutine

A X<subroutines, defined>named or otherwise accessible piece of program
that can be invoked from elsewhere in the program in order to accomplish
some subgoal of the program. A subroutine is often parameterized to
accomplish different but related things depending on its input
B<arguments>. If the subroutine returns a meaningful B<value>, it is also
called a B<function>.

=item subscript

A B<value> X<subscripts>that indicates the position of a particular
B<array> B<element> in an array.

=item substitution

Changing X<substitution (s///) operator, about>X<strings, substitution
in>X<s/// (substitution) operator, about>parts of a string via the C<s///>
operator. (We avoid use of this term to mean B<variable interpolation>.)

=item substring

A portion of a B<string>, X<substrings (term)>starting at a certain
B<character> position (B<offset>) and proceeding for a certain number of
characters.

=item superclass

See B<base class>.

=item superuser

The X<superusers>person whom the B<operating system> will let do almost
anything. Typically your system administrator or someone pretending to be
your system administrator. On Unix systems, the B<root> user. On Windows
systems, usually the Administrator user.

=item SV

Short X<scalar values, about>X<values, scalar>for “scalar value”. But
within the Perl interpreter, every B<referent> is treated as a member of a
class derived from SV, in an object-oriented sort of way. Every B<value>
inside Perl is passed around as a C language C<SV*> pointer. The SV
B<struct> knows its own “referent type”, and the code is smart enough (we
hope) not to try to call a B<hash> function on a B<subroutine>.

=item switch

An X<switches, about>X<switches>option you give on a command line to
influence the way your program works, usually introduced with a minus sign.
The word is also used as a nickname for a B<switch statement>.

=item switch cluster

The X<switch clusters>X<clusters, switch>combination of multiple command-
line switches (I<e.g.>, C<–a –b –c>) into one switch (I<e.g.>, C<–abc>).
Any switch with an additional B<argument> must be the last switch in a
cluster.

=item switch statement

A X<switch statement>X<statements, switch>program technique that lets you
evaluate an B<expression> and then, based on the value of the expression,
do a multiway branch to the appropriate piece of code for that value. Also
called a “case structure”, named after the similar Pascal construct. Most
switch statements in Perl are spelled C<given>. See “The C<given>
statement” in Camel chapter 4, “Statements and Declarations”.

The C<given>, C<when> keywords and the smartmatch (C<~~>) operator will
be removed in Perl 5.42.

=item symbol

Generally, X<symbols>X<symbols>any B<token> or B<metasymbol>. Often used
more specifically to mean the sort of name you might find in a B<symbol
table>.

=item symbolic debugger

A program X<symbolic debugger>X<debugger, about>that lets you step through
the B<execution> of your program, stopping or printing things out here and
there to see whether anything has gone wrong, and, if so, what. The
“symbolic” part just means that you can talk to the debugger using the same
symbols with which your program is written.

=item symbolic link

An alternate X<symbolic links>X<links, symbolic>filename that points to the
real B<filename>, which in turn points to the real B<file>. Whenever the
B<operating system> is trying to parse a B<pathname> containing a symbolic
link, it merely substitutes the new name and continues parsing.

=item symbolic reference

A variable X<symbolic references>X<references, symbolic>whose value is the
name of another variable or subroutine. By B<dereferencing> the first
variable, you can get at the second one. Symbolic references are illegal
under C<use strict "refs">.

=item symbol table

Where X<symbol tables, about>a B<compiler> remembers symbols. A program
like Perl must somehow remember all the names of all the B<variables>,
B<filehandles>, and B<subroutines> you’ve used. It does this by placing the
names in a symbol table, which is implemented in Perl using a B<hash
table>. There is a separate symbol table for each B<package> to give each
package its own B<namespace>.

=item synchronous

Programming X<synchronous (term)>in which the orderly sequence of events
can be determined; that is, when things happen one after the other, not at
the same time.

=item syntactic sugar

An X<syntactic sugar>alternative way of writing something more easily; a
shortcut.

=item syntax

From X<syntax, about>Greek σύνταξις, “with-arrangement”. How things
(particularly symbols) are put together with each other.

=item syntax tree

An internal X<syntax tree>representation of your program wherein
lower-level B<constructs> dangle off the higher-level constructs enclosing
them.

=item syscall

A B<function> X<syscall function, about>call directly to the B<operating
system>. Many of the important subroutines and functions you use aren’t
direct system calls, but are built up in one or more layers above the
system call level. In general, Perl programmers don’t need to worry about
the distinction. However, if you do happen to know which Perl functions are
really syscalls, you can predict which of these will set the C<$!>
(C<$ERRNO>) variable on failure. Unfortunately, beginning programmers often
confusingly employ the term “system call” to mean what happens when you
call the Perl C<system> function, which actually involves many syscalls. To
avoid any confusion, we nearly always say “syscall” for something you could
call indirectly via Perl’s C<syscall> function, and never for something you
would call with Perl’s C<system> function.

=back

=head2 T

=over 4

=item taint checks

The X<taint checks, about>special bookkeeping Perl does to track the flow
of external data through your program and disallow their use in system
commands.

=item tainted

Said of X<tainted data, about>data derived from the grubby hands of a user,
and thus unsafe for a secure program to rely on. Perl does taint checks if
you run a B<setuid> (or B<setgid>) program, or if you use the C<–T> switch.

=item taint mode

Running X<taint mode>under the C<–T> switch, marking all external data as
suspect and refusing to use it with system commands. See Camel chapter 20,
“Security”.

=item TCP

Short for X<TCP (Transmission Control Protocol)>X<Transmission Control
Protocol (TCP)>Transmission Control Protocol. A protocol wrapped around the
Internet Protocol to make an unreliable packet transmission mechanism
appear to the application program to be a reliable B<stream> of bytes.
(Usually.)

=item term

Short for X<terms, defined>a “terminal”—that is, a leaf node of a B<syntax
tree>. A thing that functions grammatically as an B<operand> for the
operators in an expression.

=item terminator

A B<character> X<terminators (term)>X<characters, terminators>X<strings,
terminators in>or B<string> that marks the end of another string. The C<$/>
variable contains the string that terminates a C<readline> operation, which
C<chomp> deletes from the end. Not to be confused with B<delimiters> or
B<separators>. The period at the end of this sentence is a terminator.

=item ternary

An B<operator> X<ternary operators>taking three B<operands>. Sometimes
pronounced B<trinary>.

=item text

A B<string> or B<file> X<text, defined>X<strings, text>X<files,
text>X<text>containing primarily printable characters.

=item thread

Like a X<threads (term)>forked process, but without B<fork>’s inherent
memory protection. A thread is lighter weight than a full process, in that
a process could have multiple threads running around in it, all fighting
over the same process’s memory space unless steps are taken to protect
threads from one another.

=item tie

The bond X<tied variables, about>between a magical variable and its
implementation class. See the C<tie> function in Camel chapter 27,
“Functions” and Camel chapter 14, “Tied Variables”.

=item titlecase

The case X<titlecase characters>X<characters, titlecase>used for capitals
that are followed by lowercase characters instead of by more capitals.
Sometimes called sentence case or headline case. English doesn’t use
Unicode titlecase, but casing rules for English titles are more complicated
than simply capitalizing each word’s first character.

=item TMTOWTDI

There’s More Than One Way To Do It, the Perl MottoX<TMTOWTDI acronym>. The
notion that there can be more than one valid path to solving a programming
problem in context. (This doesn’t mean that more ways are always better or
that all possible paths are equally desirable—just that there need not be
One True Way.)

=item token

A morpheme X<tokens, defined>in a programming language, the smallest unit
of text with semantic significance.

=item tokener

A module that X<tokeners, defined>breaks a program text into a sequence of
B<tokens> for later analysis by a parser.

=item tokenizing

Splitting up a X<tokenizing>program text into B<tokens>. Also known as
“lexing”, in which case you get “lexemes” instead of tokens.

=item toolbox approach

The notion that, X<toolbox approach>with a complete set of simple tools
that work well together, you can build almost anything you want. Which is
fine if you’re assembling a tricycle, but if you’re building a
defranishizing comboflux regurgalator, you really want your own machine
shop in which to build special tools. Perl is sort of a machine shop.

=item topic

The thing you’re X<topics (term)>working on. Structures like
C<while(E<lt>E<gt>)>, C<for>, C<foreach>, and C<given> set the topic for
you by assigning to C<$_>, the default (I<topic>) variable.

=item transliterate

To turn one X<tr/// (transliteration) operator, about>X<strings,
transliteration of>X<transliteration (tr///) operator, about>string
representation into another by mapping each character of the source string
to its corresponding character in the result string. Not to be confused
with translation: for example, Greek I<πολύχρωμος> transliterates into
I<polychromos> but translates into I<many-colored>. See the C<tr///>
operator in Camel chapter 5, “Pattern Matching”.

=item trigger

An event X<triggers (term)>that causes a B<handler> to be run.

=item trinary

Not a X<trinary operators>stellar system with three stars, but an
B<operator> taking three B<operands>. Sometimes pronounced B<ternary>.

=item troff

A venerable X<troff language>typesetting language from which Perl derives
the name of its C<$%> variable and which is secretly used in the production
of Camel books.

=item true

Any X<true values>X<values, true>scalar value that doesn’t evaluate to 0 or
C<"">.

=item truncating

Emptying a X<truncate function>X<files, truncating>file of existing
contents, either automatically when opening a file for writing or
explicitly via the C<truncate> function.

=item type

SeeX<type> B<data type> and B<class>.

=item type casting

Converting X<type casting>data from one type to another. C permits this.
Perl does not need it. Nor want it.

=item typedef

A type X<typedef>definition in the C and C++ languages.

=item typed lexical

A B<lexical variable> X<typed lexicals>X<lexical variables, typed
lexicals>X<variables, variable> lexical>that is declared with a B<class>
type: C<my Pony $bill>.

=item typeglob

Use of X<typeglobs, defined>a single identifier, prefixed with C<*>. For
example, C<*name> stands for any or all of C<$name>, C<@name>, C<%name>,
C<&name>, or just C<name>. How you use it determines whether it is
interpreted as all or only one of them. See “Typeglobs and Filehandles” in
Camel chapter 2, “Bits and Pieces”.

=item typemap

A description of X<typemap>how C types may be transformed to and from Perl
types within an B<extension> module written in B<XS>.

=back

=head2 U

=over 4

=item UDP

User Datagram Protocol, the X<User Datagram Protocol (UDP)>X<UDP (User
Datagram Protocol)>X<datagrams, UDP support>typical way to send
B<datagrams> over the Internet.

=item UID

A user ID. X<UID (user ID)>X<user ID (UID)>Often used in the context of
B<file> or B<process> ownership.

=item umask

A X<umask function>mask of those B<permission bits> that should be forced
off when creating files or directories, in order to establish a policy of
whom you’ll ordinarily deny access to. See the C<umask> function.

=item unary operator

An X<unary operators, about>operator with only one B<operand>, like C<!> or
C<chdir>. Unary operators are usually prefix operators; that is, they
precede their operand. The C<++> and C<––> operators can be either prefix
or postfix. (Their position I<does> change their meanings.)

=item Unicode

A character set X<Unicode, about>comprising all the major character sets of
the world, more or less. See L<http://www.unicode.org>.

=item Unix

A very large X<Unix language>and constantly evolving language with several
alternative and largely incompatible syntaxes, in which anyone can define
anything any way they choose, and usually do. Speakers of this language
think it’s easy to learn because it’s so easily twisted to one’s own ends,
but dialectical differences make tribal intercommunication nearly
impossible, and travelers are often reduced to a pidgin-like subset of the
language. To be universally understood, a Unix shell programmer must spend
years of study in the art. Many have abandoned this discipline and now
communicate via an Esperanto-like language called Perl.

In ancient times, Unix was also used to refer to some code that a couple of
people at Bell Labs wrote to make use of a PDP-7 computer that wasn’t doing
much of anything else at the time.

=item uppercase

In Unicode, X<uppercase characters>X<characters, uppercase>not just
characters with the General Category of Uppercase Letter, but any character
with the Uppercase property, including some Letter Numbers and Symbols. Not
to be confused with B<titlecase>.

=item UTF-8 string

A L</string> whose ordinals represent a valid sequence of UTF-8 bytes.
Sometimes called a "UTF-8 encoded string".

(B<IMPORTANT:> This is unrelated to Perl’s internal
