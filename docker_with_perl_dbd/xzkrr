            #
            #    (a (mod m))

        }

    }

    $num->{value} = $value;
    $num->{sign}  = $sign;

    return $num -> round(@r);
}

sub bpow {
    # (BINT or num_str, BINT or num_str) return BINT
    # compute power of two numbers -- stolen from Knuth Vol 2 pg 233
    # modifies first argument

    # set up parameters
    my ($class, $x, $y, @r) = ref($_[0]) && ref($_[0]) eq ref($_[1])
                            ? (ref($_[0]), @_)
                            : objectify(2, @_);

    return $x if $x -> modify('bpow');

    # $x and/or $y is a NaN
    return $x -> bnan(@r) if $x -> is_nan() || $y -> is_nan();

    # $x and/or $y is a +/-Inf
    if ($x -> is_inf("-")) {
        return $x -> bzero(@r)      if $y -> is_negative();
        return $x -> bnan(@r)       if $y -> is_zero();
        return $x -> round(@r)      if $y -> is_odd();
        return $x -> bneg(@r);
    } elsif ($x -> is_inf("+")) {
        return $x -> bzero(@r)      if $y -> is_negative();
        return $x -> bnan(@r)       if $y -> is_zero();
        return $x -> round(@r);
    } elsif ($y -> is_inf("-")) {
        return $x -> bnan(@r)       if $x -> is_one("-");
        return $x -> binf("+", @r)  if $x -> is_zero();
        return $x -> bone(@r)       if $x -> is_one("+");
        return $x -> bzero(@r);
    } elsif ($y -> is_inf("+")) {
        return $x -> bnan(@r)       if $x -> is_one("-");
        return $x -> bzero(@r)      if $x -> is_zero();
        return $x -> bone(@r)       if $x -> is_one("+");
        return $x -> binf("+", @r);
    }

    if ($x -> is_zero()) {
        return $x -> bone(@r) if $y -> is_zero();
        return $x -> binf(@r) if $y -> is_negative();
        return $x -> round(@r);
    }

    if ($x -> is_one("+")) {
        return $x -> round(@r);
    }

    if ($x -> is_one("-")) {
        return $x -> round(@r) if $y -> is_odd();
        return $x -> bneg(@r);
    }

    return $upgrade -> bpow($x, $y, @r) if defined $upgrade;

    # We don't support finite non-integers, so return zero. The reason for
    # returning zero, not NaN, is that all output is in the open interval (0,1),
    # and truncating that to integer gives zero.

    if ($y->{sign} eq '-' || !$y -> isa(__PACKAGE__)) {
        return $x -> bzero(@r);
    }

    $r[3] = $y;                 # no push!

    $x->{value} = $LIB -> _pow($x->{value}, $y->{value});
    $x->{sign}  = $x -> is_negative() && $y -> is_odd() ? '-' : '+';
    $x -> round(@r);
}

sub binv {
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), $_[0]) : objectify(1, @_);

    return $x if $x -> modify('binv');

    return $x -> binf("+", @r)  if $x -> is_zero();
    return $x -> bzero(@r)      if $x -> is_inf();
    return $x -> bnan(@r)       if $x -> is_nan();
    return $x -> round(@r)      if $x -> is_one("+") || $x -> is_one("-");

    return $upgrade -> binv($x, @r) if defined $upgrade;
    $x -> bzero(@r);
}

sub blog {
    # Return the logarithm of the operand. If a second operand is defined, that
    # value is used as the base, otherwise the base is assumed to be Euler's
    # constant.

    my ($class, $x, $base, @r);

    # Only objectify the base if it is defined, since an undefined base, as in
    # $x->blog() or $x->blog(undef) signals that the base is Euler's number =
    # 2.718281828...

    if (!ref($_[0]) && $_[0] =~ /^[a-z]\w*(?:::\w+)*$/i) {
        # E.g., Math::BigInt->blog(256, 2)
        ($class, $x, $base, @r) =
          defined $_[2] ? objectify(2, @_) : objectify(1, @_);
    } else {
        # E.g., $x->blog(2) or the deprecated Math::BigInt::blog(256, 2)
        ($class, $x, $base, @r) =
          defined $_[1] ? objectify(2, @_) : objectify(1, @_);
    }

    return $x if $x->modify('blog');

    # Handle all exception cases and all trivial cases. I have used Wolfram
    # Alpha (http://www.wolframalpha.com) as the reference for these cases.

    return $x -> bnan(@r) if $x -> is_nan();

    if (defined $base) {
        $base = $class -> new($base)
          unless defined(blessed($base)) && $base -> isa(__PACKAGE__);
        if ($base -> is_nan() || $base -> is_one()) {
            return $x -> bnan(@r);
        } elsif ($base -> is_inf() || $base -> is_zero()) {
            return $x -> bnan(@r) if $x -> is_inf() || $x -> is_zero();
            return $x -> bzero(@r);
        } elsif ($base -> is_negative()) {              # -inf < base < 0
            return $x -> bzero(@r) if $x -> is_one();   #     x = 1
            return $x -> bone('+', @r)  if $x == $base; #     x = base
            # we can't handle these cases, so upgrade, if we can
            return $upgrade -> blog($x, $base, @r) if defined $upgrade;
            return $x -> bnan(@r);
        }
        return $x -> bone(@r) if $x == $base;   # 0 < base && 0 < x < inf
    }

    # We now know that the base is either undefined or >= 2 and finite.

    if ($x -> is_inf()) {                       # x = +/-inf
        return $x -> binf('+', @r);
    } elsif ($x -> is_neg()) {                  # -inf < x < 0
        return $upgrade -> blog($x, $base, @r) if defined $upgrade;
        return $x -> bnan(@r);
    } elsif ($x -> is_one()) {                  # x = 1
        return $x -> bzero(@r);
    } elsif ($x -> is_zero()) {                 # x = 0
        return $x -> binf('-', @r);
    }

    # At this point we are done handling all exception cases and trivial cases.

    return $upgrade -> blog($x, $base, @r) if defined $upgrade;

    # fix for bug #24969:
    # the default base is e (Euler's number) which is not an integer
    if (!defined $base) {
        require Math::BigFloat;

        # disable upgrading and downgrading

        my $upg = Math::BigFloat -> upgrade();
        my $dng = Math::BigFloat -> downgrade();
        Math::BigFloat -> upgrade(undef);
        Math::BigFloat -> downgrade(undef);

        my $u = Math::BigFloat -> blog($x) -> as_int();

        # reset upgrading and downgrading

        Math::BigFloat -> upgrade($upg);
        Math::BigFloat -> downgrade($dng);

        # modify $x in place

        $x->{value} = $u->{value};
        $x->{sign}  = $u->{sign};

        return $x -> round(@r);
    }

    my ($rc) = $LIB -> _log_int($x->{value}, $base->{value});
    return $x -> bnan(@r) unless defined $rc;   # not possible to take log?
    $x->{value} = $rc;
    $x = $x -> round(@r);
}

sub bexp {
    # Calculate e ** $x (Euler's number to the power of X), truncated to
    # an integer value.
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    return $x if $x->modify('bexp');

    # inf, -inf, NaN, <0 => NaN
    return $x -> bnan(@r)  if $x->{sign} eq 'NaN';
    return $x -> bone(@r)  if $x->is_zero();
    return $x -> round(@r) if $x->{sign} eq '+inf';
    return $x -> bzero(@r) if $x->{sign} eq '-inf';

    return $upgrade -> bexp($x, @r) if defined $upgrade;

    require Math::BigFloat;
    my $tmp = Math::BigFloat -> bexp($x, @r) -> as_int();
    $x->{value} = $tmp->{value};
    return $x -> round(@r);
}

sub bilog2 {
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    return $x if $x -> modify('bilog2');

    return $upgrade -> new($x, @r) unless $x -> isa(__PACKAGE__);

    return $x -> bnan(@r)        if $x -> is_nan();
    return $x -> binf("+", @r)   if $x -> is_inf("+");
    return $x -> binf("-", @r)   if $x -> is_zero();
    if ($x -> is_neg()) {
        return $upgrade -> bilog2($x, @r) if $upgrade;
        return $x -> bnan(@r);
    }

    $x -> {value} = $LIB -> _ilog2($x -> {value});
    return $x -> round(@r);
}

sub bilog10 {
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    return $x if $x -> modify('bilog10');

    return $upgrade -> new($x, @r) unless $x -> isa(__PACKAGE__);

    return $x -> bnan(@r)        if $x -> is_nan();
    return $x -> binf("+", @r)   if $x -> is_inf("+");
    return $x -> binf("-", @r)   if $x -> is_zero();
    if ($x -> is_neg()) {
        return $upgrade -> bilog2($x, @r) if $upgrade;
        return $x -> bnan(@r);
    }

    $x -> {value} = $LIB -> _ilog10($x -> {value});
    return $x -> round(@r);
}

sub bclog2 {
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    return $x if $x -> modify('bclog2');

    return $upgrade -> new($x, @r) unless $x -> isa(__PACKAGE__);

    return $x -> bnan(@r)        if $x -> is_nan();
    return $x -> binf("+", @r)   if $x -> is_inf("+");
    return $x -> binf("-", @r)   if $x -> is_zero();
    if ($x -> is_neg()) {
        return $upgrade -> bilog2($x, @r) if $upgrade;
        return $x -> bnan(@r);
    }

    $x -> {value} = $LIB -> _clog2($x -> {value});
    return $x -> round(@r);
}

sub bclog10 {
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    return $x if $x -> modify('bclog10');

    return $upgrade -> new($x, @r) unless $x -> isa(__PACKAGE__);

    return $x -> bnan(@r)        if $x -> is_nan();
    return $x -> binf("+", @r)   if $x -> is_inf("+");
    return $x -> binf("-", @r)   if $x -> is_zero();
    if ($x -> is_neg()) {
        return $upgrade -> bilog2($x, @r) if $upgrade;
        return $x -> bnan(@r);
    }

    $x -> {value} = $LIB -> _clog10($x -> {value});
    return $x -> round(@r);
}

sub bnok {
    # Calculate n over k (binomial coefficient or "choose" function) as
    # integer.

    # Set up parameters.
    my ($class, $n, $k, @r) = ref($_[0]) && ref($_[0]) eq ref($_[1])
                            ? (ref($_[0]), @_)
                            : objectify(2, @_);

    carp "Rounding is not supported for ", (caller(0))[3], "()" if @r;

    return $n if $n->modify('bnok');

    # All cases where at least one argument is NaN.

    return $n->bnan(@r) if $n->{sign} eq 'NaN' || $k->{sign} eq 'NaN';

    # All cases where at least one argument is +/-inf.

    if ($n -> is_inf()) {
        if ($k -> is_inf()) {                   # bnok(+/-inf,+/-inf)
            return $n -> bnan(@r);
        } elsif ($k -> is_neg()) {              # bnok(+/-inf,k), k < 0
            return $n -> bzero(@r);
        } elsif ($k -> is_zero()) {             # bnok(+/-inf,k), k = 0
            return $n -> bone(@r);
        } else {
            if ($n -> is_inf("+", @r)) {        # bnok(+inf,k), 0 < k < +inf
                return $n -> binf("+");
            } else {                            # bnok(-inf,k), k > 0
                my $sign = $k -> is_even() ? "+" : "-";
                return $n -> binf($sign, @r);
            }
        }
    }

    elsif ($k -> is_inf()) {            # bnok(n,+/-inf), -inf <= n <= inf
        return $n -> bnan(@r);
    }

    # At this point, both n and k are real numbers.

    return $upgrade -> bnok($n, $k, @r)
      if defined($upgrade) && (!$n -> isa(__PACKAGE__) ||
                               !$k -> isa(__PACKAGE__));

    my $sign = 1;

    if ($n >= 0) {
        if ($k < 0 || $k > $n) {
            return $n -> bzero(@r);
        }
    } else {

        if ($k >= 0) {

            # n < 0 and k >= 0: bnok(n,k) = (-1)^k * bnok(-n+k-1,k)

            $sign = (-1) ** $k;
            $n = $n -> bneg() -> badd($k) -> bdec();

        } elsif ($k <= $n) {

            # n < 0 and k <= n: bnok(n,k) = (-1)^(n-k) * bnok(-k-1,n-k)

            $sign = (-1) ** ($n - $k);
            my $x0 = $n -> copy();
            $n = $n -> bone() -> badd($k) -> bneg();
            $k = $k -> copy();
            $k = $k -> bneg() -> badd($x0);

        } else {

            # n < 0 and n < k < 0:

            return $n -> bzero(@r);
        }
    }

    # Some backends, e.g., Math::BigInt::GMP do not allow values of n and k
    # that are larger than the largest unsigned integer, so check for this, and
    # use the simpler and slower generic method in the superclass if n and/or k
    # are larger than the largest unsigned integer.

    my $uintmax = $LIB -> _new(~0);
    if ($LIB -> _acmp($n->{value}, $uintmax) > 0 ||
        $LIB -> _acmp($k->{value}, $uintmax) > 0)
    {
        $n->{value} = $LIB -> SUPER::_nok($n->{value}, $k->{value});
    } else {
        $n->{value} = $LIB -> _nok($n->{value}, $k->{value});
    }
    $n = $n -> bneg() if $sign == -1;

    $n -> round(@r);
}

sub buparrow {
    my $a = shift;
    my $y = $a -> uparrow(@_);
    $a -> {value} = $y -> {value};
    return $a;
}

sub uparrow {
    # Knuth's up-arrow notation buparrow(a, n, b)
    #
    # The following is a simple, recursive implementation of the up-arrow
    # notation, just to show the idea. Such implementations cause "Deep
    # recursion on subroutine ..." warnings, so we use a faster, non-recursive
    # algorithm below with @_ as a stack.
    #
    #   sub buparrow {
    #       my ($a, $n, $b) = @_;
    #       return $a ** $b if $n == 1;
    #       return $a * $b  if $n == 0;
    #       return 1        if $b == 0;
    #       return buparrow($a, $n - 1, buparrow($a, $n, $b - 1));
    #   }

    my ($a, $b, $n) = @_;
    my $class = ref $a;
    croak("a must be non-negative") if $a < 0;
    croak("n must be non-negative") if $n < 0;
    croak("b must be non-negative") if $b < 0;

    while (@_ >= 3) {

        # return $a ** $b if $n == 1;

        if ($_[-2] == 1) {
            my ($a, $n, $b) = splice @_, -3;
            push @_, $a ** $b;
            next;
        }

        # return $a * $b if $n == 0;

        if ($_[-2] == 0) {
            my ($a, $n, $b) = splice @_, -3;
            push @_, $a * $b;
            next;
        }

        # return 1 if $b == 0;

        if ($_[-1] == 0) {
            splice @_, -3;
            push @_, $class -> bone();
            next;
        }

        # return buparrow($a, $n - 1, buparrow($a, $n, $b - 1));

        my ($a, $n, $b) = splice @_, -3;
        push @_, ($a, $n - 1,
                      $a, $n, $b - 1);

    }

    pop @_;
}

sub backermann {
    my $m = shift;
    my $y = $m -> ackermann(@_);
    $m -> {value} = $y -> {value};
    return $m;
}

sub ackermann {
    # Ackermann's function ackermann(m, n)
    #
    # The following is a simple, recursive implementation of the ackermann
    # function, just to show the idea. Such implementations cause "Deep
    # recursion on subroutine ..." warnings, so we use a faster, non-recursive
    # algorithm below with @_ as a stack.
    #
    # sub ackermann {
    #     my ($m, $n) = @_;
    #     return $n + 1                                  if $m == 0;
    #     return ackermann($m - 1, 1)                    if $m > 0 && $n == 0;
    #     return ackermann($m - 1, ackermann($m, $n - 1) if $m > 0 && $n > 0;
    # }

    my ($m, $n) = @_;
    my $class = ref $m;
    croak("m must be non-negative") if $m < 0;
    croak("n must be non-negative") if $n < 0;

    my $two      = $class -> new("2");
    my $three    = $class -> new("3");
    my $thirteen = $class -> new("13");

    $n = pop;
    $n = $class -> new($n) unless ref($n);
    while (@_) {
        my $m = pop;
        if ($m > $three) {
            push @_, (--$m) x $n;
            while (--$m >= $three) {
                push @_, $m;
            }
            $n = $thirteen;
        } elsif ($m == $three) {
            $n = $class -> bone() -> blsft($n + $three) -> bsub($three);
        } elsif ($m == $two) {
            $n = $n -> bmul($two) -> badd($three);
        } elsif ($m >= 0) {
            $n = $n -> badd($m) -> binc();
        } else {
            die "negative m!";
        }
    }
    $n;
}

sub bsin {
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    return $x if $x -> modify('bsin');

    # Trivial cases.

    return $x -> bzero(@r) if $x -> is_zero();
    return $x -> bnan(@r)  if $x -> is_inf() || $x -> is_nan();

    if ($upgrade) {
        my $xtmp = $upgrade -> bsin($x, @r);
        if ($xtmp -> is_int()) {
            $xtmp = $xtmp -> as_int();
            %$x = %$xtmp;
        } else {
            %$x = %$xtmp;
            bless $x, $upgrade;
        }
        return $x;
    }

    # When x is an integer, sin(x) truncated to an integer is always zero.

    $x -> bzero(@r);
}

sub bcos {
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    return $x if $x -> modify('bcos');

    # Trivial cases.

    return $x -> bone(@r) if $x -> is_zero();
    return $x -> bnan(@r) if $x -> is_inf() || $x -> is_nan();

    if ($upgrade) {
        my $xtmp = $upgrade -> bcos($x, @r);
        if ($xtmp -> is_int()) {
            $xtmp = $xtmp -> as_int();
            %$x = %$xtmp;
        } else {
            %$x = %$xtmp;
            bless $x, $upgrade;
        }
        return $x;
    }

    # When x is a non-zero integer, cos(x) truncated to an integer is always
    # zero.

    $x -> bzero(@r);
}

sub batan {
    # Calculate arctan(x) to N digits. Unless upgrading is in effect, returns
    # the result truncated to an integer.
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    return $x if $x->modify('batan');

    return $x -> bnan(@r)  if $x -> is_nan();
    return $x -> bzero(@r) if $x -> is_zero();

    return $upgrade -> batan($x, @r) if defined $upgrade;

    return $x -> bone("+", @r) if $x -> bgt("1");
    return $x -> bone("-", @r) if $x -> blt("-1");

    $x -> bzero(@r);
}

sub batan2 {
    # calculate arcus tangens of ($y/$x)

    my ($class, $y, $x, @r) = ref($_[0]) && ref($_[0]) eq ref($_[1])
                            ? (ref($_[0]), @_) : objectify(2, @_);

    return $y if $y->modify('batan2');

    return $y->bnan() if ($y->{sign} eq $nan) || ($x->{sign} eq $nan);

    return $upgrade->batan2($y, $x, @r) if defined $upgrade;

    # Y    X
    # != 0 -inf result is +- pi
    if ($x->is_inf() || $y->is_inf()) {
        if ($y->is_inf()) {
            if ($x->{sign} eq '-inf') {
                # calculate 3 pi/4 => 2.3.. => 2
                $y = $y->bone(substr($y->{sign}, 0, 1));
                $y = $y->bmul($class->new(2));
            } elsif ($x->{sign} eq '+inf') {
                # calculate pi/4 => 0.7 => 0
                $y = $y->bzero();
            } else {
                # calculate pi/2 => 1.5 => 1
                $y = $y->bone(substr($y->{sign}, 0, 1));
            }
        } else {
            if ($x->{sign} eq '+inf') {
                # calculate pi/4 => 0.7 => 0
                $y = $y->bzero();
            } else {
                # PI => 3.1415.. => 3
                $y = $y->bone(substr($y->{sign}, 0, 1));
                $y = $y->bmul($class->new(3));
            }
        }
        return $y;
    }

    require Math::BigFloat;
    my $r = Math::BigFloat->new($y)
      ->batan2(Math::BigFloat->new($x), @r)
        ->as_int();

    $x->{value} = $r->{value};
    $x->{sign} = $r->{sign};

    $x->round(@r);
}

sub bsqrt {
    # calculate square root of $x
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    return $x if $x -> modify('bsqrt');

    return $x -> bnan(@r)  if $x -> is_nan();
    return $x -> round(@r) if $x -> is_zero() || $x -> is_inf("+");

    if ($upgrade) {
        $x = $upgrade -> bsqrt($x, @r);
        $x = $x -> as_int() if $x -> is_int();
        return $x;
    }

    return $x -> bnan(@r) if $x -> is_neg();

    $x->{value} = $LIB -> _sqrt($x->{value});
    return $x -> round(@r);
}

sub broot {
    # calculate $y'th root of $x

    # set up parameters

    my ($class, $x, $y, @r) = ref($_[0]) && ref($_[0]) eq ref($_[1])
                            ? (ref($_[0]), @_) : objectify(2, @_);

    $y = $class->new(2) unless defined $y;

    return $x if $x->modify('broot');

    # NaN handling: $x ** 1/0, x or y NaN, or y inf/-inf or y == 0
    return $x->bnan(@r) if $x->{sign} !~ /^\+/ || $y->is_zero() ||
                           $y->{sign} !~ /^\+$/;

    return $x->round(@r)
      if $x->is_zero() || $x->is_one() || $x->is_inf() || $y->is_one();

    return $upgrade->broot($x, $y, @r) if defined $upgrade;

    $x->{value} = $LIB->_root($x->{value}, $y->{value});
    $x->round(@r);
}

sub bfac {
    # (BINT or num_str, BINT or num_str) return BINT
    # compute factorial number from $x, modify $x in place
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    return $x if $x->modify('bfac') || $x->{sign} eq '+inf'; # inf => inf

    return $x->bnan(@r) if $x->{sign} ne '+'; # NaN, <0 => NaN

    return $upgrade -> bfac($x, @r)
      if defined($upgrade) && !$x -> isa(__PACKAGE__);

    $x->{value} = $LIB->_fac($x->{value});
    $x->round(@r);
}

sub bdfac {
    # compute double factorial, modify $x in place
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    return $x if $x->modify('bdfac') || $x->{sign} eq '+inf'; # inf => inf

    return $x->bnan(@r) if $x->is_nan() || $x <= -2;
    return $x->bone(@r) if $x <= 1;

    return $upgrade -> bdfac($x, @r)
      if defined($upgrade) && !$x -> isa(__PACKAGE__);

    croak("bdfac() requires a newer version of the $LIB library.")
        unless $LIB->can('_dfac');

    $x->{value} = $LIB->_dfac($x->{value});
    $x->round(@r);
}

sub btfac {
    # compute triple factorial, modify $x in place
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    return $x if $x->modify('btfac') || $x->{sign} eq '+inf'; # inf => inf

    return $x->bnan(@r) if $x->is_nan();

    return $upgrade -> btfac($x, @r)
      if defined($upgrade) && !$x -> isa(__PACKAGE__);

    my $k = $class -> new("3");
    return $x->bnan(@r) if $x <= -$k;

    my $one = $class -> bone();
    return $x->bone(@r) if $x <= $one;

    my $f = $x -> copy();
    while ($f -> bsub($k) > $one) {
        $x = $x -> bmul($f);
    }
    $x->round(@r);
}

sub bmfac {
    # compute multi-factorial

    my ($class, $x, $k, @r) = ref($_[0]) && ref($_[0]) eq ref($_[1])
                            ? (ref($_[0]), @_) : objectify(2, @_);

    return $x if $x->modify('bmfac') || $x->{sign} eq '+inf';
    return $x->bnan(@r) if $x->is_nan() || $k->is_nan() || $k < 1 || $x <= -$k;

    return $upgrade -> bmfac($x, $k, @r)
      if defined($upgrade) && !$x -> isa(__PACKAGE__);

    my $one = $class -> bone();
    return $x->bone(@r) if $x <= $one;

    my $f = $x -> copy();
    while ($f -> bsub($k) > $one) {
        $x = $x -> bmul($f);
    }
    $x->round(@r);
}

sub bfib {
    # compute Fibonacci number(s)
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    croak("bfib() requires a newer version of the $LIB library.")
        unless $LIB->can('_fib');

    return $x if $x->modify('bfib');

    return $upgrade -> bfib($x, @r)
      if defined($upgrade) && !$x -> isa(__PACKAGE__);

    # List context.

    if (wantarray) {
        return () if $x -> is_nan();
        croak("bfib() can't return an infinitely long list of numbers")
          if $x -> is_inf();

        my $n = $x -> numify();

        my @y;

        $y[0] = $x -> copy() -> babs();
        $y[0]{value} = $LIB -> _zero();
        return @y if $n == 0;

        $y[1] = $y[0] -> copy();
        $y[1]{value} = $LIB -> _one();
        return @y if $n == 1;

        for (my $i = 2 ; $i <= abs($n) ; $i++) {
            $y[$i] = $y[$i - 1] -> copy();
            $y[$i]{value} = $LIB -> _add($LIB -> _copy($y[$i - 1]{value}),
                                           $y[$i - 2]{value});
        }

        # The last element in the array is the invocand.

        $x->{value} = $y[-1]{value};
        $y[-1] = $x;

        # If negative, insert sign as appropriate.

        if ($x -> is_neg()) {
            for (my $i = 2 ; $i <= $#y ; $i += 2) {
                $y[$i]{sign} = '-';
            }
        }

        @y = map { $_ -> round(@r) } @y;
        return @y;
    }

    # Scalar context.

    else {
        return $x if $x -> is_inf('+');
        return $x -> bnan() if $x -> is_nan() || $x -> is_inf('-');

        $x->{sign}  = $x -> is_neg() && $x -> is_even() ? '-' : '+';
        $x->{value} = $LIB -> _fib($x->{value});
        return $x -> round(@r);
    }
}

sub blucas {
    # compute Lucas number(s)
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    croak("blucas() requires a newer version of the $LIB library.")
        unless $LIB->can('_lucas');

    return $x if $x->modify('blucas');

    return $upgrade -> blucas($x, @r)
      if defined($upgrade) && !$x -> isa(__PACKAGE__);

    # List context.

    if (wantarray) {
        return () if $x -> is_nan();
        croak("bfib() can't return an infinitely long list of numbers")
          if $x -> is_inf();

        my $n = $x -> numify();

        my @y;

        $y[0] = $x -> copy() -> babs();
        $y[0]{value} = $LIB -> _two();
        return @y if $n == 0;

        $y[1] = $y[0] -> copy();
        $y[1]{value} = $LIB -> _one();
        return @y if $n == 1;

        for (my $i = 2 ; $i <= abs($n) ; $i++) {
            $y[$i] = $y[$i - 1] -> copy();
            $y[$i]{value} = $LIB -> _add($LIB -> _copy($y[$i - 1]{value}),
                                           $y[$i - 2]{value});
        }

        # The last element in the array is the invocand.

        $x->{value} = $y[-1]{value};
        $y[-1] = $x;

        # If negative, insert sign as appropriate.

        if ($x -> is_neg()) {
            for (my $i = 2 ; $i <= $#y ; $i += 2) {
                $y[$i]{sign} = '-';
            }
        }

        @y = map { $_ -> round(@r) } @y;
        return @y;
    }

    # Scalar context.

    else {
        return $x if $x -> is_inf('+');
        return $x -> bnan() if $x -> is_nan() || $x -> is_inf('-');

        $x->{sign}  = $x -> is_neg() && $x -> is_even() ? '-' : '+';
        $x->{value} = $LIB -> _lucas($x->{value});
        return $x -> round(@r);
    }
}

sub blsft {
    # (BINT or num_str, BINT or num_str) return BINT
    # compute $x << $y, base $n

    my ($class, $x, $y, $b, @r);

    # Objectify the base only when it is defined, since an undefined base, as
    # in $x->blsft(3) or $x->blog(3, undef) means use the default base 2.

    if (!ref($_[0]) && $_[0] =~ /^[A-Za-z]|::/) {
        # E.g., Math::BigInt->blog(256, 5, 2)
        ($class, $x, $y, $b, @r) =
          defined $_[3] ? objectify(3, @_) : objectify(2, @_);
    } else {
        # E.g., Math::BigInt::blog(256, 5, 2) or $x->blog(5, 2)
        ($class, $x, $y, $b, @r) =
          defined $_[2] ? objectify(3, @_) : objectify(2, @_);
    }

    return $x if $x -> modify('blsft');

    # The default base is 2.

    $b = 2 unless defined $b;
    $b = $class -> new($b) unless defined(blessed($b));

    # Handle "foreign" objects.

    return $upgrade -> blsft($x, $y, $b, @r)
      if defined($upgrade) && (!$x -> isa(__PACKAGE__) ||
                               !$y -> isa(__PACKAGE__) ||
                               !$b -> isa(__PACKAGE__));

    # Handle NaN cases.

    return $x -> bnan(@r)
      if $x -> is_nan() || $y -> is_nan() || $b -> is_nan();

    # blsft($x, -$y, $b) = brsft($x, $y, $b)

    return $x -> brsft($y -> copy() -> bneg(), $b, @r) if $y -> is_neg();

    # Now handle all cases where at least one operand is ±Inf or the result
    # will be ±Inf or NaN.

    if ($y -> is_inf("+")) {
       if ($b -> is_one("-")) {
            return $x -> bnan(@r);
        } elsif ($b -> is_one("+")) {
            return $x -> round(@r);
        } elsif ($b -> is_zero()) {
            return $x -> bnan(@r) if $x -> is_inf();
            return $x -> bzero(@r);
        } else {
            return $x -> binf("-", @r) if $x -> is_negative();
            return $x -> binf("+", @r) if $x -> is_positive();
            return $x -> bnan(@r);
        }
    }

    if ($b -> is_inf()) {
        return $x -> bnan(@r) if $x -> is_zero() || $y -> is_zero();
        if ($b -> is_inf("-")) {
            return $x -> binf("+", @r)
              if ($x -> is_negative() && $y -> is_odd() ||
                  $x -> is_positive() && $y -> is_even());
            return $x -> binf("-", @r);
       } else {
           return $x -> binf("-", @r) if $x -> is_negative();
           return $x -> binf("+", @r);
        }
    }

    if ($b -> is_zero()) {
        return $x -> round(@r) if $y -> is_zero();
        return $x -> bnan(@r)  if $x -> is_inf();
        return $x -> bzero(@r);
    }

    if ($x -> is_inf()) {
        if ($b -> is_negative()) {
            if ($x -> is_inf("-")) {
                if ($y -> is_even()) {
                    return $x -> round(@r);
                } else {
                    return $x -> binf("+", @r);
                }
            } else {
                if ($y -> is_even()) {
                    return $x -> round(@r);
                } else {
                    return $x -> binf("-", @r);
                }
            }
        } else {
            return $x -> round(@r);
        }
    }

    # At this point, we know that both the input and the output is finite.
    # Handle some trivial cases.

    return $x -> round(@r) if $x -> is_zero() || $y -> is_zero()
                              || $b -> is_one("+")
                              || $b -> is_one("-") && $y -> is_even();

    return $x -> bneg(@r) if $b -> is_one("-") && $y -> is_odd();

    # While some of the libraries support an arbitrarily large base, not all of
    # them do, so rather than returning an incorrect result in those cases,
    # disallow bases that don't work with all libraries.
