                raise error.StateError(msg, hint=hint)
            if not wc.isinmemory():
                for s in sorted(wc.substate):
                    wc.sub(s).bailifchanged()

        elif not overwrite:
            if p1 == p2:  # no-op update
                # call the hooks and exit early
                repo.hook(b'preupdate', throw=True, parent1=xp2, parent2=b'')
                repo.hook(b'update', parent1=xp2, parent2=b'', error=0)
                return updateresult(0, 0, 0, 0)

            if updatecheck == UPDATECHECK_LINEAR and pas not in (
                [p1],
                [p2],
            ):  # nonlinear
                dirty = wc.dirty(missing=True)
                if dirty:
                    # Branching is a bit strange to ensure we do the minimal
                    # amount of call to obsutil.foreground.
                    foreground = obsutil.foreground(repo, [p1.node()])
                    # note: the <node> variable contains a random identifier
                    if repo[node].node() in foreground:
                        pass  # allow updating to successors
                    else:
                        msg = _(b"uncommitted changes")
                        hint = _(b"commit or update --clean to discard changes")
                        raise error.UpdateAbort(msg, hint=hint)
                else:
                    # Allow jumping branches if clean and specific rev given
                    pass

        if overwrite:
            pas = [wc]
        elif not branchmerge:
            pas = [p1]

        # deprecated config: merge.followcopies
        followcopies = repo.ui.configbool(b'merge', b'followcopies')
        if overwrite:
            followcopies = False
        elif not pas[0]:
            followcopies = False
        if not branchmerge and not wc.dirty(missing=True):
            followcopies = False

        ### calculate phase
        mresult = calculateupdates(
            repo,
            wc,
            p2,
            pas,
            branchmerge,
            force,
            mergeancestor,
            followcopies,
            matcher=matcher,
            mergeforce=mergeforce,
        )

        if updatecheck == UPDATECHECK_NO_CONFLICT:
            if mresult.hasconflicts():
                msg = _(b"conflicting changes")
                hint = _(b"commit or update --clean to discard changes")
                raise error.StateError(msg, hint=hint)

        # Prompt and create actions. Most of this is in the resolve phase
        # already, but we can't handle .hgsubstate in filemerge or
        # subrepoutil.submerge yet so we have to keep prompting for it.
        vals = mresult.getfile(b'.hgsubstate')
        if vals:
            f = b'.hgsubstate'
            m, args, msg = vals
            prompts = filemerge.partextras(labels)
            prompts[b'f'] = f
            if m == mergestatemod.ACTION_CHANGED_DELETED:
                if repo.ui.promptchoice(
                    _(
                        b"local%(l)s changed %(f)s which other%(o)s deleted\n"
                        b"use (c)hanged version or (d)elete?"
                        b"$$ &Changed $$ &Delete"
                    )
                    % prompts,
                    0,
                ):
                    mresult.addfile(
                        f,
                        mergestatemod.ACTION_REMOVE,
                        None,
                        b'prompt delete',
                    )
                elif f in p1:
                    mresult.addfile(
                        f,
                        mergestatemod.ACTION_ADD_MODIFIED,
                        None,
                        b'prompt keep',
                    )
                else:
                    mresult.addfile(
                        f,
                        mergestatemod.ACTION_ADD,
                        None,
                        b'prompt keep',
                    )
            elif m == mergestatemod.ACTION_DELETED_CHANGED:
                f1, f2, fa, move, anc = args
                flags = p2[f2].flags()
                if (
                    repo.ui.promptchoice(
                        _(
                            b"other%(o)s changed %(f)s which local%(l)s deleted\n"
                            b"use (c)hanged version or leave (d)eleted?"
                            b"$$ &Changed $$ &Deleted"
                        )
                        % prompts,
                        0,
                    )
                    == 0
                ):
                    mresult.addfile(
                        f,
                        mergestatemod.ACTION_GET,
                        (flags, False),
                        b'prompt recreating',
                    )
                else:
                    mresult.removefile(f)

        if not util.fscasesensitive(repo.path):
            # check collision between files only in p2 for clean update
            if not branchmerge and (
                force or not wc.dirty(missing=True, branch=False)
            ):
                _checkcollision(repo, p2.manifest(), None)
            else:
                _checkcollision(repo, wc.manifest(), mresult)

        # divergent renames
        for f, fl in sorted(mresult.diverge.items()):
            repo.ui.warn(
                _(
                    b"note: possible conflict - %s was renamed "
                    b"multiple times to:\n"
                )
                % f
            )
            for nf in sorted(fl):
                repo.ui.warn(b" %s\n" % nf)

        # rename and delete
        for f, fl in sorted(mresult.renamedelete.items()):
            repo.ui.warn(
                _(
                    b"note: possible conflict - %s was deleted "
                    b"and renamed to:\n"
                )
                % f
            )
            for nf in sorted(fl):
                repo.ui.warn(b" %s\n" % nf)

        ### apply phase
        if not branchmerge:  # just jump to the new rev
            fp1, fp2, xp1, xp2 = fp2, repo.nullid, xp2, b''
        # If we're doing a partial update, we need to skip updating
        # the dirstate.
        always = matcher is None or matcher.always()
        updatedirstate = updatedirstate and always and not wc.isinmemory()
        if updatedirstate:
            repo.hook(b'preupdate', throw=True, parent1=xp1, parent2=xp2)
            # note that we're in the middle of an update
            repo.vfs.write(b'updatestate', p2.hex())

        _advertisefsmonitor(
            repo, mresult.len((mergestatemod.ACTION_GET,)), p1.node()
        )

        wantfiledata = updatedirstate and not branchmerge
        stats, getfiledata, extraactions = applyupdates(
            repo,
            mresult,
            wc,
            p2,
            overwrite,
            wantfiledata,
            labels=labels,
        )

        if updatedirstate:
            if extraactions:
                for k, acts in extraactions.items():
                    for a in acts:
                        mresult.addfile(a[0], k, *a[1:])
                    if k == mergestatemod.ACTION_GET and wantfiledata:
                        # no filedata until mergestate is updated to provide it
                        for a in acts:
                            getfiledata[a[0]] = None

            assert len(getfiledata) == (
                mresult.len((mergestatemod.ACTION_GET,)) if wantfiledata else 0
            )
            with repo.dirstate.parentchange():
                ### Filter Filedata
                #
                # We gathered "cache" information for the clean file while
                # updating them: mtime, size and mode.
                #
                # At the time this comment is written, they are various issues
                # with how we gather the `mode` and `mtime` information (see
                # the comment in `batchget`).
                #
                # We are going to smooth one of this issue here : mtime ambiguity.
                #
                # i.e. even if the mtime gathered during `batchget` was
                # correct[1] a change happening right after it could change the
                # content while keeping the same mtime[2].
                #
                # When we reach the current code, the "on disk" part of the
                # update operation is finished. We still assume that no other
                # process raced that "on disk" part, but we want to at least
                # prevent later file change to alter the content of the file
                # right after the update operation. So quickly that the same
                # mtime is record for the operation.
                # To prevent such ambiguity to happens, we will only keep the
                # "file data" for files with mtime that are stricly in the past,
                # i.e. whose mtime is strictly lower than the current time.
                #
                # This protect us from race conditions from operation that could
                # run right after this one, especially other Mercurial
                # operation that could be waiting for the wlock to touch files
                # content and the dirstate.
                #
                # In an ideal world, we could only get reliable information in
                # `getfiledata` (from `getbatch`), however the current approach
                # have been a successful compromise since many years.
                #
                # At the time this comment is written, not using any "cache"
                # file data at all here would not be viable. As it would result is
                # a very large amount of work (equivalent to the previous `hg
                # update` during the next status after an update).
                #
                # [1] the current code cannot grantee that the `mtime` and
                # `mode` are correct, but the result is "okay in practice".
                # (see the comment in `batchget`).                #
                #
                # [2] using nano-second precision can greatly help here because
                # it makes the "different write with same mtime" issue
                # virtually vanish. However, dirstate v1 cannot store such
                # precision and a bunch of python-runtime, operating-system and
                # filesystem does not provide use with such precision, so we
                # have to operate as if it wasn't available.
                if getfiledata:
                    ambiguous_mtime = {}
                    now = timestamp.get_fs_now(repo.vfs)
                    if now is None:
                        # we can't write to the FS, so we won't actually update
                        # the dirstate content anyway, no need to put cache
                        # information.
                        getfiledata = None
                    else:
                        now_sec = now[0]
                        for f, m in getfiledata.items():
                            if m is not None and m[2][0] >= now_sec:
                                ambiguous_mtime[f] = (m[0], m[1], None)
                        for f, m in ambiguous_mtime.items():
                            getfiledata[f] = m

                repo.setparents(fp1, fp2)
                mergestatemod.recordupdates(
                    repo, mresult.actionsdict, branchmerge, getfiledata
                )
                # update completed, clear state
                util.unlink(repo.vfs.join(b'updatestate'))

                if not branchmerge:
                    repo.dirstate.setbranch(p2.branch())

                # If we're updating to a location, clean up any stale temporary includes
                # (ex: this happens during hg rebase --abort).
                if not branchmerge:
                    sparse.prunetemporaryincludes(repo)

    if updatedirstate:
        repo.hook(
            b'update', parent1=xp1, parent2=xp2, error=stats.unresolvedcount
        )
    return stats


def merge(ctx, labels=None, force=False, wc=None):
    """Merge another topological branch into the working copy.

    force = whether the merge was run with 'merge --force' (deprecated)
    """

    return _update(
        ctx.repo(),
        ctx.rev(),
        labels=labels,
        branchmerge=True,
        force=force,
        mergeforce=force,
        wc=wc,
    )


def update(ctx, updatecheck=None, wc=None):
    """Do a regular update to the given commit, aborting if there are conflicts.

    The 'updatecheck' argument can be used to control what to do in case of
    conflicts.

    Note: This is a new, higher-level update() than the one that used to exist
    in this module. That function is now called _update(). You can hopefully
    replace your callers to use this new update(), or clean_update(), merge(),
    revert_to(), or graft().
    """
    return _update(
        ctx.repo(),
        ctx.rev(),
        branchmerge=False,
        force=False,
        labels=[b'working copy', b'destination', b'working copy parent'],
        updatecheck=updatecheck,
        wc=wc,
    )


def clean_update(ctx, wc=None):
    """Do a clean update to the given commit.

    This involves updating to the commit and discarding any changes in the
    working copy.
    """
    return _update(ctx.repo(), ctx.rev(), branchmerge=False, force=True, wc=wc)


def revert_to(ctx, matcher=None, wc=None):
    """Revert the working copy to the given commit.

    The working copy will keep its current parent(s) but its content will
    be the same as in the given commit.
    """

    return _update(
        ctx.repo(),
        ctx.rev(),
        branchmerge=False,
        force=True,
        updatedirstate=False,
        matcher=matcher,
        wc=wc,
    )


def graft(
    repo,
    ctx,
    base=None,
    labels=None,
    keepparent=False,
    keepconflictparent=False,
    wctx=None,
):
    """Do a graft-like merge.

    This is a merge where the merge ancestor is chosen such that one
    or more changesets are grafted onto the current changeset. In
    addition to the merge, this fixes up the dirstate to include only
    a single parent (if keepparent is False) and tries to duplicate any
    renames/copies appropriately.

    ctx - changeset to rebase
    base - merge base, or ctx.p1() if not specified
    labels - merge labels eg ['local', 'graft']
    keepparent - keep second parent if any
    keepconflictparent - if unresolved, keep parent used for the merge

    """
    # If we're grafting a descendant onto an ancestor, be sure to pass
    # mergeancestor=True to update. This does two things: 1) allows the merge if
    # the destination is the same as the parent of the ctx (so we can use graft
    # to copy commits), and 2) informs update that the incoming changes are
    # newer than the destination so it doesn't prompt about "remote changed foo
    # which local deleted".
    # We also pass mergeancestor=True when base is the same revision as p1. 2)
    # doesn't matter as there can't possibly be conflicts, but 1) is necessary.
    wctx = wctx or repo[None]
    pctx = wctx.p1()
    base = base or ctx.p1()
    mergeancestor = (
        repo.changelog.isancestor(pctx.node(), ctx.node())
        or pctx.rev() == base.rev()
    )

    stats = _update(
        repo,
        ctx.node(),
        True,
        True,
        base.node(),
        mergeancestor=mergeancestor,
        labels=labels,
        wc=wctx,
    )

    if keepconflictparent and stats.unresolvedcount:
        pother = ctx.node()
    else:
        pother = repo.nullid
        parents = ctx.parents()
        if keepparent and len(parents) == 2 and base in parents:
            parents.remove(base)
            pother = parents[0].node()
    # Never set both parents equal to each other
    if pother == pctx.node():
        pother = repo.nullid

    if wctx.isinmemory():
        wctx.setparents(pctx.node(), pother)
        # fix up dirstate for copies and renames
        copies.graftcopies(wctx, ctx, base)
    else:
        with repo.dirstate.parentchange():
            repo.setparents(pctx.node(), pother)
            repo.dirstate.write(repo.currenttransaction())
            # fix up dirstate for copies and renames
            copies.graftcopies(wctx, ctx, base)
    return stats


def back_out(ctx, parent=None, wc=None):
    if parent is None:
        if ctx.p2() is not None:
            msg = b"must specify parent of merge commit to back out"
            raise error.ProgrammingError(msg)
        parent = ctx.p1()
    return _update(
        ctx.repo(),
        parent,
        branchmerge=True,
        force=True,
        ancestor=ctx.node(),
        mergeancestor=False,
    )


def purge(
    repo,
    matcher,
    unknown=True,
    ignored=False,
    removeemptydirs=True,
    removefiles=True,
    abortonerror=False,
    noop=False,
    confirm=False,
):
    """Purge the working directory of untracked files.

    ``matcher`` is a matcher configured to scan the working directory -
    potentially a subset.

    ``unknown`` controls whether unknown files should be purged.

    ``ignored`` controls whether ignored files should be purged.

    ``removeemptydirs`` controls whether empty directories should be removed.

    ``removefiles`` controls whether files are removed.

    ``abortonerror`` causes an exception to be raised if an error occurs
    deleting a file or directory.

    ``noop`` controls whether to actually remove files. If not defined, actions
    will be taken.

    ``confirm`` ask confirmation before actually removing anything.

    Returns an iterable of relative paths in the working directory that were
    or would be removed.
    """

    def remove(removefn, path):
        try:
            removefn(path)
        except OSError:
            m = _(b'%s cannot be removed') % path
            if abortonerror:
                raise error.Abort(m)
            else:
                repo.ui.warn(_(b'warning: %s\n') % m)

    # There's no API to copy a matcher. So mutate the passed matcher and
    # restore it when we're done.
    oldtraversedir = matcher.traversedir

    res = []

    try:
        if removeemptydirs:
            directories = []
            matcher.traversedir = directories.append

        status = repo.status(match=matcher, ignored=ignored, unknown=unknown)

        if confirm:
            msg = None
            nb_ignored = len(status.ignored)
            nb_unknown = len(status.unknown)
            if nb_unknown and nb_ignored:
                msg = _(b"permanently delete %d unknown and %d ignored files?")
                msg %= (nb_unknown, nb_ignored)
            elif nb_unknown:
                msg = _(b"permanently delete %d unknown files?")
                msg %= nb_unknown
            elif nb_ignored:
                msg = _(b"permanently delete %d ignored files?")
                msg %= nb_ignored
            elif removeemptydirs:
                dir_count = 0
                for f in directories:
                    if matcher(f) and not repo.wvfs.listdir(f):
                        dir_count += 1
                if dir_count:
                    msg = _(
                        b"permanently delete at least %d empty directories?"
                    )
                    msg %= dir_count
            if msg is None:
                return res
            else:
                msg += b" (yN)$$ &Yes $$ &No"
                if repo.ui.promptchoice(msg, default=1) == 1:
                    raise error.CanceledError(_(b'removal cancelled'))

        if removefiles:
            for f in sorted(status.unknown + status.ignored):
                if not noop:
                    repo.ui.note(_(b'removing file %s\n') % f)
                    remove(repo.wvfs.unlink, f)
                res.append(f)

        if removeemptydirs:
            for f in sorted(directories, reverse=True):
                if matcher(f) and not repo.wvfs.listdir(f):
                    if not noop:
                        repo.ui.note(_(b'removing directory %s\n') % f)
                        remove(repo.wvfs.rmdir, f)
                    res.append(f)

        return res

    finally:
        matcher.traversedir = oldtraversedir
                                                                                                                                                                                                                                                          usr/lib/python3/dist-packages/mercurial/mergestate.py                                               0000644 0000000 0000000 00000076213 14355257011 021457  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        import collections
import shutil
import struct
import weakref

from .i18n import _
from .node import (
    bin,
    hex,
    nullrev,
)
from . import (
    error,
    filemerge,
    util,
)
from .utils import hashutil

_pack = struct.pack
_unpack = struct.unpack


def _droponode(data):
    # used for compatibility for v1
    bits = data.split(b'\0')
    bits = bits[:-2] + bits[-1:]
    return b'\0'.join(bits)


def _filectxorabsent(hexnode, ctx, f):
    if hexnode == ctx.repo().nodeconstants.nullhex:
        return filemerge.absentfilectx(ctx, f)
    else:
        return ctx[f]


# Merge state record types. See ``mergestate`` docs for more.

####
# merge records which records metadata about a current merge
# exists only once in a mergestate
#####
RECORD_LOCAL = b'L'
RECORD_OTHER = b'O'
# record merge labels
RECORD_LABELS = b'l'

#####
# record extra information about files, with one entry containing info about one
# file. Hence, multiple of them can exists
#####
RECORD_FILE_VALUES = b'f'

#####
# merge records which represents state of individual merges of files/folders
# These are top level records for each entry containing merge related info.
# Each record of these has info about one file. Hence multiple of them can
# exists
#####
RECORD_MERGED = b'F'
RECORD_CHANGEDELETE_CONFLICT = b'C'
# the path was dir on one side of merge and file on another
RECORD_PATH_CONFLICT = b'P'

#####
# possible state which a merge entry can have. These are stored inside top-level
# merge records mentioned just above.
#####
MERGE_RECORD_UNRESOLVED = b'u'
MERGE_RECORD_RESOLVED = b'r'
MERGE_RECORD_UNRESOLVED_PATH = b'pu'
MERGE_RECORD_RESOLVED_PATH = b'pr'
# represents that the file was automatically merged in favor
# of other version. This info is used on commit.
# This is now deprecated and commit related information is now
# stored in RECORD_FILE_VALUES
MERGE_RECORD_MERGED_OTHER = b'o'

#####
# top level record which stores other unknown records. Multiple of these can
# exists
#####
RECORD_OVERRIDE = b't'

#####
# legacy records which are no longer used but kept to prevent breaking BC
#####
# This record was release in 5.4 and usage was removed in 5.5
LEGACY_RECORD_RESOLVED_OTHER = b'R'
# This record was release in 3.7 and usage was removed in 5.6
LEGACY_RECORD_DRIVER_RESOLVED = b'd'
# This record was release in 3.7 and usage was removed in 5.6
LEGACY_MERGE_DRIVER_STATE = b'm'
# This record was release in 3.7 and usage was removed in 5.6
LEGACY_MERGE_DRIVER_MERGE = b'D'

CHANGE_ADDED = b'added'
CHANGE_REMOVED = b'removed'
CHANGE_MODIFIED = b'modified'


class MergeAction:
    """represent an "action" merge need to take for a given file

    Attributes:

    _short: internal representation used to identify each action

    no_op:  True if the action does affect the file content or tracking status

    narrow_safe:
        True if the action can be safely used for a file outside of the narrow
        set

    changes:
        The types of changes that this actions involves. This is a work in
        progress and not all actions have one yet. In addition, some requires
        user changes and cannot be fully decided. The value currently available
        are:

        - ADDED: the files is new in both parents
        - REMOVED: the files existed in one parent and is getting removed
        - MODIFIED: the files existed in at least one parent and is getting changed
    """

    ALL_ACTIONS = weakref.WeakSet()
    NO_OP_ACTIONS = weakref.WeakSet()

    def __init__(self, short, no_op=False, narrow_safe=False, changes=None):
        self._short = short
        self.ALL_ACTIONS.add(self)
        self.no_op = no_op
        if self.no_op:
            self.NO_OP_ACTIONS.add(self)
        self.narrow_safe = narrow_safe
        self.changes = changes

    def __hash__(self):
        return hash(self._short)

    def __repr__(self):
        return 'MergeAction<%s>' % self._short.decode('ascii')

    def __bytes__(self):
        return self._short

    def __eq__(self, other):
        if other is None:
            return False
        assert isinstance(other, MergeAction)
        return self._short == other._short

    def __lt__(self, other):
        return self._short < other._short


ACTION_FORGET = MergeAction(b'f', narrow_safe=True, changes=CHANGE_REMOVED)
ACTION_REMOVE = MergeAction(b'r', narrow_safe=True, changes=CHANGE_REMOVED)
ACTION_ADD = MergeAction(b'a', narrow_safe=True, changes=CHANGE_ADDED)
ACTION_GET = MergeAction(b'g', narrow_safe=True, changes=CHANGE_MODIFIED)
ACTION_PATH_CONFLICT = MergeAction(b'p')
ACTION_PATH_CONFLICT_RESOLVE = MergeAction(b'pr')
ACTION_ADD_MODIFIED = MergeAction(
    b'am', narrow_safe=True, changes=CHANGE_ADDED
)  # not 100% about the changes value here
ACTION_CREATED = MergeAction(b'c', narrow_safe=True, changes=CHANGE_ADDED)
ACTION_DELETED_CHANGED = MergeAction(b'dc')
ACTION_CHANGED_DELETED = MergeAction(b'cd')
ACTION_MERGE = MergeAction(b'm')
ACTION_LOCAL_DIR_RENAME_GET = MergeAction(b'dg')
ACTION_DIR_RENAME_MOVE_LOCAL = MergeAction(b'dm')
ACTION_KEEP = MergeAction(b'k', no_op=True)
# the file was absent on local side before merge and we should
# keep it absent (absent means file not present, it can be a result
# of file deletion, rename etc.)
ACTION_KEEP_ABSENT = MergeAction(b'ka', no_op=True)
# the file is absent on the ancestor and remote side of the merge
# hence this file is new and we should keep it
ACTION_KEEP_NEW = MergeAction(b'kn', no_op=True)
ACTION_EXEC = MergeAction(b'e', narrow_safe=True, changes=CHANGE_MODIFIED)
ACTION_CREATED_MERGE = MergeAction(
    b'cm', narrow_safe=True, changes=CHANGE_ADDED
)


# Used by concert to detect situation it does not like, not sure what the exact
# criteria is
CONVERT_MERGE_ACTIONS = (
    ACTION_MERGE,
    ACTION_DIR_RENAME_MOVE_LOCAL,
    ACTION_CHANGED_DELETED,
    ACTION_DELETED_CHANGED,
)


class _mergestate_base:
    """track 3-way merge state of individual files

    The merge state is stored on disk when needed. Two files are used: one with
    an old format (version 1), and one with a new format (version 2). Version 2
    stores a superset of the data in version 1, including new kinds of records
    in the future. For more about the new format, see the documentation for
    `_readrecordsv2`.

    Each record can contain arbitrary content, and has an associated type. This
    `type` should be a letter. If `type` is uppercase, the record is mandatory:
    versions of Mercurial that don't support it should abort. If `type` is
    lowercase, the record can be safely ignored.

    Currently known records:

    L: the node of the "local" part of the merge (hexified version)
    O: the node of the "other" part of the merge (hexified version)
    F: a file to be merged entry
    C: a change/delete or delete/change conflict
    P: a path conflict (file vs directory)
    f: a (filename, dictionary) tuple of optional values for a given file
    l: the labels for the parts of the merge.

    Merge record states (stored in self._state, indexed by filename):
    u: unresolved conflict
    r: resolved conflict
    pu: unresolved path conflict (file conflicts with directory)
    pr: resolved path conflict
    o: file was merged in favor of other parent of merge (DEPRECATED)

    The resolve command transitions between 'u' and 'r' for conflicts and
    'pu' and 'pr' for path conflicts.
    """

    def __init__(self, repo):
        """Initialize the merge state.

        Do not use this directly! Instead call read() or clean()."""
        self._repo = repo
        self._state = {}
        self._stateextras = collections.defaultdict(dict)
        self._local = None
        self._other = None
        self._labels = None
        # contains a mapping of form:
        # {filename : (merge_return_value, action_to_be_performed}
        # these are results of re-running merge process
        # this dict is used to perform actions on dirstate caused by re-running
        # the merge
        self._results = {}
        self._dirty = False

    def reset(self):
        pass

    def start(self, node, other, labels=None):
        self._local = node
        self._other = other
        self._labels = labels

    @util.propertycache
    def local(self):
        if self._local is None:
            msg = b"local accessed but self._local isn't set"
            raise error.ProgrammingError(msg)
        return self._local

    @util.propertycache
    def localctx(self):
        return self._repo[self.local]

    @util.propertycache
    def other(self):
        if self._other is None:
            msg = b"other accessed but self._other isn't set"
            raise error.ProgrammingError(msg)
        return self._other

    @util.propertycache
    def otherctx(self):
        return self._repo[self.other]

    def active(self):
        """Whether mergestate is active.

        Returns True if there appears to be mergestate. This is a rough proxy
        for "is a merge in progress."
        """
        return bool(self._local) or bool(self._state)

    def commit(self):
        """Write current state on disk (if necessary)"""

    @staticmethod
    def getlocalkey(path):
        """hash the path of a local file context for storage in the .hg/merge
        directory."""

        return hex(hashutil.sha1(path).digest())

    def _make_backup(self, fctx, localkey):
        raise NotImplementedError()

    def _restore_backup(self, fctx, localkey, flags):
        raise NotImplementedError()

    def add(self, fcl, fco, fca, fd):
        """add a new (potentially?) conflicting file the merge state
        fcl: file context for local,
        fco: file context for remote,
        fca: file context for ancestors,
        fd:  file path of the resulting merge.

        note: also write the local version to the `.hg/merge` directory.
        """
        if fcl.isabsent():
            localkey = self._repo.nodeconstants.nullhex
        else:
            localkey = mergestate.getlocalkey(fcl.path())
            self._make_backup(fcl, localkey)
        self._state[fd] = [
            MERGE_RECORD_UNRESOLVED,
            localkey,
            fcl.path(),
            fca.path(),
            hex(fca.filenode()),
            fco.path(),
            hex(fco.filenode()),
            fcl.flags(),
        ]
        self._stateextras[fd][b'ancestorlinknode'] = hex(fca.node())
        self._dirty = True

    def addpathconflict(self, path, frename, forigin):
        """add a new conflicting path to the merge state
        path:    the path that conflicts
        frename: the filename the conflicting file was renamed to
        forigin: origin of the file ('l' or 'r' for local/remote)
        """
        self._state[path] = [MERGE_RECORD_UNRESOLVED_PATH, frename, forigin]
        self._dirty = True

    def addcommitinfo(self, path, data):
        """stores information which is required at commit
        into _stateextras"""
        self._stateextras[path].update(data)
        self._dirty = True

    def __contains__(self, dfile):
        return dfile in self._state

    def __getitem__(self, dfile):
        return self._state[dfile][0]

    def __iter__(self):
        return iter(sorted(self._state))

    def files(self):
        return self._state.keys()

    def mark(self, dfile, state):
        self._state[dfile][0] = state
        self._dirty = True

    def unresolved(self):
        """Obtain the paths of unresolved files."""

        for f, entry in self._state.items():
            if entry[0] in (
                MERGE_RECORD_UNRESOLVED,
                MERGE_RECORD_UNRESOLVED_PATH,
            ):
                yield f

    def allextras(self):
        """return all extras information stored with the mergestate"""
        return self._stateextras

    def extras(self, filename):
        """return extras stored with the mergestate for the given filename"""
        return self._stateextras[filename]

    def resolve(self, dfile, wctx):
        """run merge process for dfile

        Returns the exit code of the merge."""
        if self[dfile] in (
            MERGE_RECORD_RESOLVED,
            LEGACY_RECORD_DRIVER_RESOLVED,
        ):
            return 0
        stateentry = self._state[dfile]
        state, localkey, lfile, afile, anode, ofile, onode, flags = stateentry
        octx = self._repo[self._other]
        extras = self.extras(dfile)
        anccommitnode = extras.get(b'ancestorlinknode')
        if anccommitnode:
            actx = self._repo[anccommitnode]
        else:
            actx = None
        fcd = _filectxorabsent(localkey, wctx, dfile)
        fco = _filectxorabsent(onode, octx, ofile)
        # TODO: move this to filectxorabsent
        fca = self._repo.filectx(afile, fileid=anode, changectx=actx)
        # "premerge" x flags
        flo = fco.flags()
        fla = fca.flags()
        if b'x' in flags + flo + fla and b'l' not in flags + flo + fla:
            if fca.rev() == nullrev and flags != flo:
                self._repo.ui.warn(
                    _(
                        b'warning: cannot merge flags for %s '
                        b'without common ancestor - keeping local flags\n'
                    )
                    % afile
                )
            elif flags == fla:
                flags = flo
        # restore local
        if localkey != self._repo.nodeconstants.nullhex:
            self._restore_backup(wctx[dfile], localkey, flags)
        else:
            wctx[dfile].remove(ignoremissing=True)

        if not fco.cmp(fcd):  # files identical?
            # If return value of merge is None, then there are no real conflict
            del self._state[dfile]
            self._results[dfile] = None, None
            self._dirty = True
            return None

        merge_ret, deleted = filemerge.filemerge(
            self._repo,
            wctx,
            self._local,
            lfile,
            fcd,
            fco,
            fca,
            labels=self._labels,
        )

        if not merge_ret:
            self.mark(dfile, MERGE_RECORD_RESOLVED)

        action = None
        if deleted:
            if fcd.isabsent():
