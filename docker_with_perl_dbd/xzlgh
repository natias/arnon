	   'jerry' => 'welcome'
	   'this' => 'that'
	   'tom' => 'and'
	   'welcome' => undef  

The reference is truly dumped and we can finally see what we're dealing with. 
Our quoting was perfectly valid but wrong for our purposes, with 'and jerry'
being treated as 2 separate words rather than a phrase, thus throwing the
evenly paired hash structure out of alignment.

The 'B<-w>' switch would have told us about this, had we used it at the start,
and saved us a lot of trouble: 

	> perl -w data
	Odd number of elements in hash assignment at ./data line 5.    

We fix our quoting: 'tom' => q(and jerry), and run it again, this time we get
our expected output:

	> perl -w data
	Hello World


While we're here, take a closer look at the 'B<x>' command, it's really useful
and will merrily dump out nested references, complete objects, partial objects
- just about whatever you throw at it:

Let's make a quick object and x-plode it, first we'll start the debugger:
it wants some form of input from STDIN, so we give it something non-committal,
a zero:

 > perl -de 0
 Default die handler restored.

 Loading DB routines from perl5db.pl version 1.07
 Editor support available.

 Enter h or `h h' for help, or `man perldebug' for more help.

 main::(-e:1):   0

Now build an on-the-fly object over a couple of lines (note the backslash):

 DB<1> $obj = bless({'unique_id'=>'123', 'attr'=> \
 cont: 	{'col' => 'black', 'things' => [qw(this that etc)]}}, 'MY_class')

And let's have a look at it:

  	DB<2> x $obj
 0  MY_class=HASH(0x828ad98)
   		'attr' => HASH(0x828ad68)
      	'col' => 'black'
      	'things' => ARRAY(0x828abb8)
         	0  'this'
         	1  'that'
         	2  'etc'
   		'unique_id' => 123       
  	DB<3>

Useful, huh?  You can eval nearly anything in there, and experiment with bits
of code or regexes until the cows come home:

 DB<3> @data = qw(this that the other atheism leather theory scythe)

 DB<4> p 'saw -> '.($cnt += map { print "\t:\t$_\n" } grep(/the/, sort @data))
 atheism
 leather
 other
 scythe
 the
 theory
 saw -> 6

If you want to see the command History, type an 'B<H>':

 DB<5> H
 4: p 'saw -> '.($cnt += map { print "\t:\t$_\n" } grep(/the/, sort @data))
 3: @data = qw(this that the other atheism leather theory scythe)
 2: x $obj
 1: $obj = bless({'unique_id'=>'123', 'attr'=>
 {'col' => 'black', 'things' => [qw(this that etc)]}}, 'MY_class')
 DB<5>

And if you want to repeat any previous command, use the exclamation: 'B<!>':

 DB<5> !4
 p 'saw -> '.($cnt += map { print "$_\n" } grep(/the/, sort @data))
 atheism
 leather
 other
 scythe
 the
 theory
 saw -> 12

For more on references see L<perlref> and L<perlreftut>


=head1 Stepping through code

Here's a simple program which converts between Celsius and Fahrenheit, it too
has a problem:

 #!/usr/bin/perl
 use v5.36;

 my $arg = $ARGV[0] || '-c20';

 if ($arg =~ /^\-(c|f)((\-|\+)*\d+(\.\d+)*)$/) {
	my ($deg, $num) = ($1, $2);
	my ($in, $out) = ($num, $num);
	if ($deg eq 'c') {
		$deg = 'f';
		$out = &c2f($num);
	} else {
		$deg = 'c';
		$out = &f2c($num);
	}
	$out = sprintf('%0.2f', $out);
	$out =~ s/^((\-|\+)*\d+)\.0+$/$1/;
	print "$out $deg\n";
 } else {
	print "Usage: $0 -[c|f] num\n";
 }
 exit;

 sub f2c {
	my $f = shift;
	my $c = 5 * $f - 32 / 9;
	return $c;
 }

 sub c2f {
	my $c = shift;
	my $f = 9 * $c / 5 + 32;
	return $f;
 }


For some reason, the Fahrenheit to Celsius conversion fails to return the
expected output.  This is what it does:

 > temp -c0.72
 33.30 f

 > temp -f33.3
 162.94 c

Not very consistent!  We'll set a breakpoint in the code manually and run it
under the debugger to see what's going on.  A breakpoint is a flag, to which
the debugger will run without interruption, when it reaches the breakpoint, it
will stop execution and offer a prompt for further interaction.  In normal
use, these debugger commands are completely ignored, and they are safe - if a
little messy, to leave in production code.

	my ($in, $out) = ($num, $num);
	$DB::single=2; # insert at line 9!
	if ($deg eq 'c') 
		...

	> perl -d temp -f33.3
	Default die handler restored.

	Loading DB routines from perl5db.pl version 1.07
	Editor support available.

	Enter h or `h h' for help, or `man perldebug' for more help.

	main::(temp:4): my $arg = $ARGV[0] || '-c100';     

We'll simply continue down to our pre-set breakpoint with a 'B<c>':

  	DB<1> c
	main::(temp:10):                if ($deg eq 'c') {   

Followed by a view command to see where we are:

	DB<1> v
	7:              my ($deg, $num) = ($1, $2);
	8:              my ($in, $out) = ($num, $num);
	9:              $DB::single=2;
	10==>           if ($deg eq 'c') {
	11:                     $deg = 'f';
	12:                     $out = &c2f($num);
	13              } else {
	14:                     $deg = 'c';
	15:                     $out = &f2c($num);
	16              }                             

And a print to show what values we're currently using:

	DB<1> p $deg, $num
	f33.3

We can put another break point on any line beginning with a colon, we'll use
line 17 as that's just as we come out of the subroutine, and we'd like to
pause there later on:

	DB<2> b 17

There's no feedback from this, but you can see what breakpoints are set by
using the list 'L' command:

	DB<3> L
	temp:
 		17:            print "$out $deg\n";
   		break if (1)     

Note that to delete a breakpoint you use 'B'.

Now we'll continue down into our subroutine, this time rather than by line
number, we'll use the subroutine name, followed by the now familiar 'v':

	DB<3> c f2c
	main::f2c(temp:30):             my $f = shift;  

	DB<4> v
	24:     exit;
	25
	26      sub f2c {
	27==>           my $f = shift;
	28:             my $c = 5 * $f - 32 / 9; 
	29:             return $c;
	30      }
	31
	32      sub c2f {
	33:             my $c = shift;   


Note that if there was a subroutine call between us and line 29, and we wanted
to B<single-step> through it, we could use the 'B<s>' command, and to step
over it we would use 'B<n>' which would execute the sub, but not descend into
it for inspection.  In this case though, we simply continue down to line 29:

	DB<4> c 29  
	main::f2c(temp:29):             return $c;

And have a look at the return value:

	DB<5> p $c
	162.944444444444

This is not the right answer at all, but the sum looks correct.  I wonder if
it's anything to do with operator precedence?  We'll try a couple of other
possibilities with our sum:

	DB<6> p (5 * $f - 32 / 9)
	162.944444444444

	DB<7> p 5 * $f - (32 / 9) 
	162.944444444444

	DB<8> p (5 * $f) - 32 / 9
	162.944444444444

	DB<9> p 5 * ($f - 32) / 9
	0.722222222222221

:-) that's more like it!  Ok, now we can set our return variable and we'll
return out of the sub with an 'r':

	DB<10> $c = 5 * ($f - 32) / 9

	DB<11> r
	scalar context return from main::f2c: 0.722222222222221

Looks good, let's just continue off the end of the script:

	DB<12> c
	0.72 c 
	Debugged program terminated.  Use q to quit or R to restart,
  	use O inhibit_exit to avoid stopping after program termination,
  	h q, h R or h O to get additional info.   

A quick fix to the offending line (insert the missing parentheses) in the
actual program and we're finished.


=head1 Placeholder for a, w, t, T

Actions, watch variables, stack traces etc.: on the TODO list.

	a 

	w 

	t 

	T


=head1 REGULAR EXPRESSIONS

Ever wanted to know what a regex looked like?  You'll need perl compiled with
the DEBUGGING flag for this one:

  > perl -Dr -e '/^pe(a)*rl$/i'
  Compiling REx `^pe(a)*rl$'
  size 17 first at 2
  rarest char
   at 0
     1: BOL(2)
     2: EXACTF <pe>(4)
     4: CURLYN[1] {0,32767}(14)
     6:   NOTHING(8)
     8:   EXACTF <a>(0)
    12:   WHILEM(0)
    13: NOTHING(14)
    14: EXACTF <rl>(16)
    16: EOL(17)
    17: END(0)
  floating `'$ at 4..2147483647 (checking floating) stclass
    `EXACTF <pe>' anchored(BOL) minlen 4
  Omitting $` $& $' support.

  EXECUTING...

  Freeing REx: `^pe(a)*rl$'

Did you really want to know? :-)
For more gory details on getting regular expressions to work, have a look at
L<perlre>, L<perlretut>, and to decode the mysterious labels (BOL and CURLYN,
etc. above), see L<perldebguts>.


=head1 OUTPUT TIPS

To get all the output from your error log, and not miss any messages via
helpful operating system buffering, insert a line like this, at the start of
your script:

	$|=1;	

To watch the tail of a dynamically growing logfile, (from the command line):

	tail -f $error_log

Wrapping all die calls in a handler routine can be useful to see how, and from
where, they're being called, L<perlvar> has more information:

    BEGIN { $SIG{__DIE__} = sub { require Carp; Carp::confess(@_) } }

Various useful techniques for the redirection of STDOUT and STDERR filehandles
are explained in L<perlopentut> and L<perlfaq8>.


=head1 CGI

Just a quick hint here for all those CGI programmers who can't figure out how
on earth to get past that 'waiting for input' prompt, when running their CGI
script from the command-line, try something like this:

	> perl -d my_cgi.pl -nodebug 

Of course L<CGI> and L<perlfaq9> will tell you more.


=head1 GUIs

The command line interface is tightly integrated with an B<emacs> extension
and there's a B<vi> interface too.  

You don't have to do this all on the command line, though, there are a few GUI
options out there.  The nice thing about these is you can wave a mouse over a
variable and a dump of its data will appear in an appropriate window, or in a
popup balloon, no more tiresome typing of 'x $varname' :-)

In particular have a hunt around for the following:

B<ptkdb> perlTK based wrapper for the built-in debugger

B<ddd> data display debugger

B<PerlDevKit> and B<PerlBuilder> are NT specific

NB. (more info on these and others would be appreciated).


=head1 SUMMARY

We've seen how to encourage good coding practices with B<use strict> and
B<-w>.  We can run the perl debugger B<perl -d scriptname> to inspect your
data from within the perl debugger with the B<p> and B<x> commands.  You can
walk through your code, set breakpoints with B<b> and step through that code
with B<s> or B<n>, continue with B<c> and return from a sub with B<r>.  Fairly
intuitive stuff when you get down to it.  

There is of course lots more to find out about, this has just scratched the
surface.  The best way to learn more is to use perldoc to find out more about
the language, to read the on-line help (L<perldebug> is probably the next
place to go), and of course, experiment.  


=head1 SEE ALSO

L<perldebug>, 
L<perldebguts>, 
L<perl5db.pl>,
L<perldiag>,
L<perlrun>


=head1 AUTHOR

Richard Foley <richard.foley@rfi.net> Copyright (c) 2000


=head1 CONTRIBUTORS

Various people have made helpful suggestions and contributions, in particular:

Ronald J Kimball <rjk@linguist.dartmouth.edu>

Hugo van der Sanden <hv@crypt0.demon.co.uk>

Peter Scott <Peter@PSDT.com>

                                                                                                                                                                                                                                                                                                                                                                             usr/local/lib/perl5/5.40.0/pod/perldebug.pod                                                        0000644 0000000 0000000 00000115711 14714567415 016753  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME
X<debug> X<debugger>

perldebug - Perl debugging

=head1 DESCRIPTION

First of all, have you tried using L<C<use strict;>|strict> and
L<C<use warnings;>|warnings>?

If you're new to the Perl debugger, you may prefer to read
L<perldebtut>, which is a tutorial introduction to the debugger.

If you're looking for the nitty gritty details of how the debugger is
I<implemented>, you may prefer to read L<perldebguts>.

For in-depth technical usage details, see L<perl5db.pl>, the documentation
of the debugger itself.

=head1 The Perl Debugger

If you invoke Perl with the B<-d> switch, your script runs under the
Perl source debugger.  This works like an interactive Perl
environment, prompting for debugger commands that let you examine
source code, set breakpoints, get stack backtraces, change the values of
variables, etc.  This is so convenient that you often fire up
the debugger all by itself just to test out Perl constructs
interactively to see what they do.  For example:
X<-d>

    $ perl -d -e 42

In Perl, the debugger is not a separate program the way it usually is in the
typical compiled environment.  Instead, the B<-d> flag tells the compiler
to insert source information into the parse trees it's about to hand off
to the interpreter.  That means your code must first compile correctly
for the debugger to work on it.  Then when the interpreter starts up, it
preloads a special Perl library file containing the debugger.

The program will halt I<right before> the first run-time executable
statement (but see below regarding compile-time statements) and ask you
to enter a debugger command.  Contrary to popular expectations, whenever
the debugger halts and shows you a line of code, it always displays the
line it's I<about> to execute, rather than the one it has just executed.

Any command not recognized by the debugger is directly executed
(C<eval>'d) as Perl code in the current package.  (The debugger
uses the DB package for keeping its own state information.)

Note that the said C<eval> is bound by an implicit scope. As a
result any newly introduced lexical variable or any modified
capture buffer content is lost after the eval. The debugger is a
nice environment to learn Perl, but if you interactively experiment using
material which should be in the same scope, stuff it in one line.

For any text entered at the debugger prompt, leading and trailing whitespace
is first stripped before further processing.  If a debugger command
coincides with some function in your own program, merely precede the
function with something that doesn't look like a debugger command, such
as a leading C<;> or perhaps a C<+>, or by wrapping it with parentheses
or braces.

=head2 Calling the Debugger

There are several ways to call the debugger:

=over 4

=item perl -d program_name

On the given program identified by C<program_name>.

=item perl -d -e 0 

Interactively supply an arbitrary C<expression> using C<-e>.

=item perl -d:ptkdb program_name

Debug a given program via the L<Devel::ptkdb> GUI.

=item perl -dt threaded_program_name

Debug a given program using threads (experimental).

=back

If Perl is called with the C<-d> switch, the variable C<$^P> will hold a true
value. This is useful if you need to know if your code is running under the
debugger:

    if ( $^P ) {
        # running under the debugger
    }

See L<perlvar/$^P> for more information on the variable.

=head2 Debugger Commands

The interactive debugger understands the following commands:

=over 12

=item h
X<debugger command, h>

Prints out a summary help message

=item h [command]

Prints out a help message for the given debugger command.

=item h h

The special argument of C<h h> produces the entire help page, which is quite long.

If the output of the C<h h> command (or any command, for that matter) scrolls
past your screen, precede the command with a leading pipe symbol so
that it's run through your pager, as in

    DB> |h h

You may change the pager which is used via C<o pager=...> command.

=item p expr
X<debugger command, p>

Same as C<print {$DB::OUT} expr> in the current package.  In particular,
because this is just Perl's own C<print> function, this means that nested
data structures and objects are not dumped, unlike with the C<x> command.

The C<DB::OUT> filehandle is opened to F</dev/tty>, regardless of
where STDOUT may be redirected to.

=item x [maxdepth] expr
X<debugger command, x>

Evaluates its expression in list context and dumps out the result in a
pretty-printed fashion.  Nested data structures are printed out
recursively, unlike the real C<print> function in Perl.  When dumping
hashes, you'll probably prefer 'x \%h' rather than 'x %h'.
See L<Dumpvalue> if you'd like to do this yourself.

The output format is governed by multiple options described under
L</"Configurable Options">.

If the C<maxdepth> is included, it must be a numeral I<N>; the value is
dumped only I<N> levels deep, as if the C<dumpDepth> option had been
temporarily set to I<N>.

=item V [pkg [vars]]
X<debugger command, V>

Display all (or some) variables in package (defaulting to C<main>)
using a data pretty-printer (hashes show their keys and values so
you see what's what, control characters are made printable, etc.).
Make sure you don't put the type specifier (like C<$>) there, just
the symbol names, like this:

    V DB filename line

Use C<~pattern> and C<!pattern> for positive and negative regexes.

This is similar to calling the C<x> command on each applicable var.

=item X [vars]
X<debugger command, X>

Same as C<V currentpackage [vars]>.

=item y [level [vars]]
X<debugger command, y>

Display all (or some) lexical variables (mnemonic: C<mY> variables)
in the current scope or I<level> scopes higher.  You can limit the
variables that you see with I<vars> which works exactly as it does
for the C<V> and C<X> commands.  Requires the L<PadWalker> module
version 0.08 or higher; will warn if this isn't installed.  Output
is pretty-printed in the same style as for C<V> and the format is
controlled by the same options.

=item T
X<debugger command, T> X<backtrace> X<stack, backtrace>

Produce a stack backtrace.  See below for details on its output.

=item s [expr]
X<debugger command, s> X<step>

Single step.  Executes until the beginning of another
statement, descending into subroutine calls.  If an expression is
supplied that includes function calls, it too will be single-stepped.

=item n [expr]
X<debugger command, n>

Next.  Executes over subroutine calls, until the beginning
of the next statement.  If an expression is supplied that includes
function calls, those functions will be executed with stops before
each statement.

=item r
X<debugger command, r>

Continue until the return from the current subroutine.
Dump the return value if the C<PrintRet> option is set (default).

=item <CR>

Repeat last C<n> or C<s> command.

=item c [line|sub]
X<debugger command, c>

Continue, optionally inserting a one-time-only breakpoint
at the specified line or subroutine.

=item l
X<debugger command, l>

List next window of lines.

=item l min+incr

List C<incr+1> lines starting at C<min>.

=item l min-max

List lines C<min> through C<max>.  C<l -> is synonymous to C<->.

=item l line

List a single line.

=item l subname

List first window of lines from subroutine.  I<subname> may
be a variable that contains a code reference.

=item -
X<debugger command, ->

List previous window of lines.

=item v [line]
X<debugger command, v>

View a few lines of code around the current line.

=item .
X<debugger command, .>

Return the internal debugger pointer to the line last
executed, and print out that line.

=item f filename
X<debugger command, f>

Switch to viewing a different file or C<eval> statement.  If I<filename>
is not a full pathname found in the values of %INC, it is considered
a regex.

C<eval>ed strings (when accessible) are considered to be filenames:
C<f (eval 7)> and C<f eval 7\b> access the body of the 7th C<eval>ed string
(in the order of execution).  The bodies of the currently executed C<eval>
and of C<eval>ed strings that define subroutines are saved and thus
accessible.

=item /pattern/

Search forwards for pattern (a Perl regex); final / is optional.
The search is case-insensitive by default.

=item ?pattern?

Search backwards for pattern; final ? is optional.
The search is case-insensitive by default.

=item L [abw]
X<debugger command, L>

List (default all) actions, breakpoints and watch expressions

=item S [[!]regex]
X<debugger command, S>

List subroutine names [not] matching the regex.

=item t [n]
X<debugger command, t>

Toggle trace mode (see also the C<AutoTrace> option).
Optional argument is the maximum number of levels to trace below
the current one; anything deeper than that will be silent.

=item t [n] expr
X<debugger command, t>

Trace through execution of C<expr>.
Optional first argument is the maximum number of levels to trace below
the current one; anything deeper than that will be silent.
See L<perldebguts/"Frame Listing Output Examples"> for examples.

=item b
X<breakpoint>
X<debugger command, b>

Sets breakpoint on current line

=item b [line] [condition]
X<breakpoint>
X<debugger command, b>

Set a breakpoint before the given line.  If a condition
is specified, it's evaluated each time the statement is reached: a
breakpoint is taken only if the condition is true.  Breakpoints may
only be set on lines that begin an executable statement.  Conditions
don't use C<if>:

    b 237 $x > 30
    b 237 ++$count237 < 11
    b 33 /pattern/i

If the line number is C<.>, sets a breakpoint on the current line:

    b . $n > 100

=item b [file]:[line] [condition]
X<breakpoint>
X<debugger command, b>

Set a breakpoint before the given line in a (possibly different) file.  If a
condition is specified, it's evaluated each time the statement is reached: a
breakpoint is taken only if the condition is true.  Breakpoints may only be set
on lines that begin an executable statement.  Conditions don't use C<if>:

    b lib/MyModule.pm:237 $x > 30
    b /usr/lib/perl5/site_perl/CGI.pm:100 ++$count100 < 11

=item b subname [condition]
X<breakpoint>
X<debugger command, b>

Set a breakpoint before the first line of the named subroutine.  I<subname> may
be a variable containing a code reference (in this case I<condition>
is not supported).

=item b postpone subname [condition]
X<breakpoint>
X<debugger command, b>

Set a breakpoint at first line of subroutine after it is compiled.

=item b load filename
X<breakpoint>
X<debugger command, b>

Set a breakpoint before the first executed line of the I<filename>,
which should be a full pathname found amongst the %INC values.

=item b compile subname
X<breakpoint>
X<debugger command, b>

Sets a breakpoint before the first statement executed after the specified
subroutine is compiled.

=item B line
X<breakpoint>
X<debugger command, B>

Delete a breakpoint from the specified I<line>.

=item B *
X<breakpoint>
X<debugger command, B>

Delete all installed breakpoints.

=item disable [file]:[line]
X<breakpoint>
X<debugger command, disable>
X<disable>

Disable the breakpoint so it won't stop the execution of the program. 
Breakpoints are enabled by default and can be re-enabled using the C<enable>
command.

=item disable [line]
X<breakpoint>
X<debugger command, disable>
X<disable>

Disable the breakpoint so it won't stop the execution of the program. 
Breakpoints are enabled by default and can be re-enabled using the C<enable>
command.

This is done for a breakpoint in the current file.

=item enable [file]:[line]
X<breakpoint>
X<debugger command, disable>
X<disable>

Enable the breakpoint so it will stop the execution of the program. 

=item enable [line]
X<breakpoint>
X<debugger command, disable>
X<disable>

Enable the breakpoint so it will stop the execution of the program. 

This is done for a breakpoint in the current file.

=item a [line] command
X<debugger command, a>

Set an action to be done before the line is executed.  If I<line> is
omitted, set an action on the line about to be executed.
The sequence of steps taken by the debugger is

  1. check for a breakpoint at this line
  2. print the line if necessary (tracing)
  3. do any actions associated with that line
  4. prompt user if at a breakpoint or in single-step
  5. evaluate line

For example, this will print out $foo every time line
53 is passed:

    a 53 print "DB FOUND $foo\n"

=item A line
X<debugger command, A>

Delete an action from the specified line.

=item A *
X<debugger command, A>

Delete all installed actions.

=item w expr
X<debugger command, w>

Add a global watch-expression. Whenever a watched global changes the
debugger will stop and display the old and new values.

=item W expr
X<debugger command, W>

Delete watch-expression

=item W *
X<debugger command, W>

Delete all watch-expressions.

=item o
X<debugger command, o>

Display all options.

=item o booloption ...
X<debugger command, o>

Set each listed Boolean option to the value C<1>.

=item o anyoption? ...
X<debugger command, o>

Print out the value of one or more options.

=item o option=value ...
X<debugger command, o>

Set the value of one or more options.  If the value has internal
whitespace, it should be quoted.  For example, you could set C<o
pager="less -MQeicsNfr"> to call B<less> with those specific options.
You may use either single or double quotes, but if you do, you must
escape any embedded instances of same sort of quote you began with,
as well as any escaping any escapes that immediately precede that
quote but which are not meant to escape the quote itself.  In other
words, you follow single-quoting rules irrespective of the quote;
eg: C<o option='this isn\'t bad'> or C<o option="She said, \"Isn't
it?\"">.

For historical reasons, the C<=value> is optional, but defaults to
1 only where it is safe to do so--that is, mostly for Boolean
options.  It is always better to assign a specific value using C<=>.
The C<option> can be abbreviated, but for clarity probably should
not be.  Several options can be set together.  See L</"Configurable Options">
for a list of these.

=item < ?
X<< debugger command, < >>

List out all pre-prompt Perl command actions.

=item < [ command ]
X<< debugger command, < >>

Set an action (Perl command) to happen before every debugger prompt.
A multi-line command may be entered by backslashing the newlines.

=item < *
X<< debugger command, < >>

Delete all pre-prompt Perl command actions.

=item << command
X<< debugger command, << >>

Add an action (Perl command) to happen before every debugger prompt.
A multi-line command may be entered by backwhacking the newlines.

=item > ?
X<< debugger command, > >>

List out post-prompt Perl command actions.

=item > command
X<< debugger command, > >>

Set an action (Perl command) to happen after the prompt when you've
just given a command to return to executing the script.  A multi-line
command may be entered by backslashing the newlines (we bet you
couldn't have guessed this by now).

=item > *
X<< debugger command, > >>

Delete all post-prompt Perl command actions.

=item >> command
X<<< debugger command, >> >>>

Adds an action (Perl command) to happen after the prompt when you've
just given a command to return to executing the script.  A multi-line
command may be entered by backslashing the newlines.

=item { ?
X<debugger command, {>

List out pre-prompt debugger commands.

=item { [ command ]

Set an action (debugger command) to happen before every debugger prompt.
A multi-line command may be entered in the customary fashion.

Because this command is in some senses new, a warning is issued if
you appear to have accidentally entered a block instead.  If that's
what you mean to do, write it as with C<;{ ... }> or even
C<do { ... }>.

=item { *
X<debugger command, {>

Delete all pre-prompt debugger commands.

=item {{ command
X<debugger command, {{>

Add an action (debugger command) to happen before every debugger prompt.
A multi-line command may be entered, if you can guess how: see above.

=item ! number
X<debugger command, !>

Redo a previous command (defaults to the previous command).

=item ! -number
X<debugger command, !>

Redo number'th previous command.

=item ! pattern
X<debugger command, !>

Redo last command that started with pattern.
See S<C<o recallCommand>>, too.

