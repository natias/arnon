
L<Redundant argument in %s|perldiag/Redundant argument in %s>

(W redundant) You called a function with more arguments than were
needed, as indicated by information within other arguments you supplied
(I<e.g>. a printf format). Currently only emitted when a printf-type format
required fewer arguments than were supplied, but might be used in the
future for I<e.g.> L<perlfunc/pack>.

The warnings category C<< redundant >> is new. See also
L<[GH #13534]|https://github.com/Perl/perl5/issues/13534>.

=item *

L<Replacement list is longer than search list|perldiag/Replacement list is longer than search list>

This is not a new diagnostic, but in earlier releases was accidentally
not displayed if the transliteration contained wide characters.  This is
now fixed, so that you may see this diagnostic in places where you
previously didn't (but should have).

=item *

L<Use of \b{} for non-UTF-8 locale is wrong.  Assuming a UTF-8 locale|perldiag/"Use of \b{} for non-UTF-8 locale is wrong.  Assuming a UTF-8 locale">

(W locale) You are matching a regular expression using locale rules,
and a Unicode boundary is being matched, but the locale is not a Unicode
one.  This doesn't make sense.  Perl will continue, assuming a Unicode
(UTF-8) locale, but the results could well be wrong except if the locale
happens to be ISO-8859-1 (Latin1) where this message is spurious and can
be ignored.

The warnings category C<locale> is new.

=item *

L<< Using E<sol>u for '%s' instead of E<sol>%s in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>|perldiag/"Using E<sol>u for '%s' instead of E<sol>%s in regex; marked by <-- HERE in mE<sol>%sE<sol>" >>

(W regexp) You used a Unicode boundary (C<\b{...}> or C<\B{...}>) in a
portion of a regular expression where the character set modifiers C</a>
or C</aa> are in effect.  These two modifiers indicate an ASCII
interpretation, and this doesn't make sense for a Unicode definition.
The generated regular expression will compile so that the boundary uses
all of Unicode.  No other portion of the regular expression is affected.

=item *

L<The bitwise feature is experimental|perldiag/"The bitwise feature is experimental">

(S experimental::bitwise) This warning is emitted if you use bitwise
operators (C<& | ^ ~ &. |. ^. ~.>) with the "bitwise" feature enabled.
Simply suppress the warning if you want to use the feature, but know
that in doing so you are taking the risk of using an experimental
feature which may change or be removed in a future Perl version:

    no warnings "experimental::bitwise";
    use feature "bitwise";
    $x |.= $y;

=item *

L<Unescaped left brace in regex is deprecated, passed through in regex; marked by <-- HERE in mE<sol>%sE<sol>|perldiag/"Unescaped left brace in regex is deprecated, passed through in regex; marked by <-- HERE in m/%s/">

(D deprecated, regexp) You used a literal C<"{"> character in a regular
expression pattern. You should change to use C<"\{"> instead, because a future
version of Perl (tentatively v5.26) will consider this to be a syntax error.  If
the pattern delimiters are also braces, any matching right brace
(C<"}">) should also be escaped to avoid confusing the parser, for
example,

    qr{abc\{def\}ghi}

=item *

L<Use of literal non-graphic characters in variable names is deprecated|perldiag/"Use of literal non-graphic characters in variable names is deprecated">

(D deprecated) Using literal non-graphic (including control)
characters in the source to refer to the I<^FOO> variables, like C<$^X> and
C<${^GLOBAL_PHASE}> is now deprecated.

=item *

L<Useless use of attribute "const"|perldiag/Useless use of attribute "const">

(W misc) The C<const> attribute has no effect except
on anonymous closure prototypes.  You applied it to
a subroutine via L<attributes.pm|attributes>.  This is only useful
inside an attribute handler for an anonymous subroutine.

=item *

L<Useless use of E<sol>d modifier in transliteration operator|perldiag/"Useless use of /d modifier in transliteration operator">

This is not a new diagnostic, but in earlier releases was accidentally
not displayed if the transliteration contained wide characters.  This is
now fixed, so that you may see this diagnostic in places where you
previously didn't (but should have).

=item *

L<E<quot>use re 'strict'E<quot> is experimental|perldiag/"use re 'strict'" is experimental>

(S experimental::re_strict) The things that are different when a regular
expression pattern is compiled under C<'strict'> are subject to change
in future Perl releases in incompatible ways; there are also proposals
to change how to enable strict checking instead of using this subpragma.
This means that a pattern that compiles today may not in a future Perl
release.  This warning is to alert you to that risk.

=item *

L<Warning: unable to close filehandle properly: %s|perldiag/"Warning: unable to close filehandle properly: %s">

L<Warning: unable to close filehandle %s properly: %s|perldiag/"Warning: unable to close filehandle %s properly: %s">

(S io) Previously, perl silently ignored any errors when doing an implicit
close of a filehandle, I<i.e.> where the reference count of the filehandle
reached zero and the user's code hadn't already called C<close()>; I<e.g.>

    {
        open my $fh, '>', $file  or die "open: '$file': $!\n";
        print $fh, $data  or die;
    } # implicit close here

In a situation such as disk full, due to buffering, the error may only be
detected during the final close, so not checking the result of the close is
dangerous.

So perl now warns in such situations.

=item *

L<Wide character (U+%X) in %s|perldiag/"Wide character (U+%X) in %s">

(W locale) While in a single-byte locale (I<i.e.>, a non-UTF-8
one), a multi-byte character was encountered.   Perl considers this
character to be the specified Unicode code point.  Combining non-UTF-8
locales and Unicode is dangerous.  Almost certainly some characters
will have two different representations.  For example, in the ISO 8859-7
(Greek) locale, the code point 0xC3 represents a Capital Gamma.  But so
also does 0x393.  This will make string comparisons unreliable.

You likely need to figure out how this multi-byte character got mixed up
with your single-byte locale (or perhaps you thought you had a UTF-8
locale, but Perl disagrees).

The warnings category C<locale> is new.

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

<> should be quotes

This warning has been changed to
L<< <> at require-statement should be quotes|perldiag/"<> at require-statement should be quotes" >>
to make the issue more identifiable.

=item *

L<Argument "%s" isn't numeric%s|perldiag/"Argument "%s" isn't numeric%s">

The L<perldiag> entry for this warning has added this clarifying note:

 Note that for the Inf and NaN (infinity and not-a-number) the
 definition of "numeric" is somewhat unusual: the strings themselves
 (like "Inf") are considered numeric, and anything following them is
 considered non-numeric.

=item *

L<Global symbol "%s" requires explicit package name|perldiag/"Global symbol "%s" requires explicit package name (did you forget to declare "my %s"?)">

This message has had '(did you forget to declare "my %s"?)' appended to it, to
make it more helpful to new Perl programmers.
L<[GH #13732]|https://github.com/Perl/perl5/issues/13732>

=item *

'"my" variable &foo::bar can't be in a package' has been reworded to say
'subroutine' instead of 'variable'.

=item *

L<<< \N{} in character class restricted to one character in regex; marked by
S<< <-- HERE >> in mE<sol>%sE<sol>|perldiag/"\N{} in inverted character
class or as a range end-point is restricted to one character in regex;
marked by <-- HERE in m/%s/" >>>

This message has had I<character class> changed to I<inverted character
class or as a range end-point is> to reflect improvements in
C<qr/[\N{named sequence}]/> (see under L</Selected Bug Fixes>).

=item *

L<panic: frexp|perldiag/"panic: frexp: %f">

This message has had ': C<%f>' appended to it, to show what the offending
floating point number is.

=item *

I<Possible precedence problem on bitwise %c operator> reworded as
L<Possible precedence problem on bitwise %s operator|perldiag/"Possible precedence problem on bitwise %s operator">.

=item *

L<Unsuccessful %s on filename containing newline|perldiag/"Unsuccessful %s on filename containing newline">

This warning is now only produced when the newline is at the end of
the filename.

=item *

"Variable C<%s> will not stay shared" has been changed to say "Subroutine"
when it is actually a lexical sub that will not stay shared.

=item *

L<Variable length lookbehind not implemented in regex mE<sol>%sE<sol>|perldiag/"Variable length lookbehind not implemented in regex m/%s/">

The L<perldiag> entry for this warning has had information about Unicode
behavior added.

=back

=head2 Diagnostic Removals

=over

=item *

"Ambiguous use of -foo resolved as -&foo()"

There is actually no ambiguity here, and this impedes the use of negated
constants; I<e.g.>, C<-Inf>.

=item *

"Constant is not a FOO reference"

Compile-time checking of constant dereferencing (I<e.g.>, C<< my_constant->() >>)
has been removed, since it was not taking overloading into account.
L<[GH #9891]|https://github.com/Perl/perl5/issues/9891>
L<[GH #14044]|https://github.com/Perl/perl5/issues/14044>

=back

=head1 Utility Changes

=head2 F<find2perl>, F<s2p> and F<a2p> removal

=over 4

=item *

The F<x2p/> directory has been removed from the Perl core.

This removes find2perl, s2p and a2p. They have all been released to CPAN as
separate distributions (C<App::find2perl>, C<App::s2p>, C<App::a2p>).

=back

=head2 L<h2ph>

=over 4

=item *

F<h2ph> now handles hexadecimal constants in the compiler's predefined
macro definitions, as visible in C<$Config{cppsymbols}>.
L<[GH #14491]|https://github.com/Perl/perl5/issues/14491>.

=back

=head2 L<encguess>

=over 4

=item *

No longer depends on non-core modules.

=back

=head1 Configuration and Compilation

=over 4

=item *

F<Configure> now checks for C<lrintl()>, C<lroundl()>, C<llrintl()>, and
C<llroundl()>.

=item *

F<Configure> with C<-Dmksymlinks> should now be faster.
L<[GH #13890]|https://github.com/Perl/perl5/issues/13890>.

=item *

The C<pthreads> and C<cl> libraries will be linked by default if present.
This allows XS modules that require threading to work on non-threaded
perls. Note that you must still pass C<-Dusethreads> if you want a
threaded perl.

=item *

To get more precision and range for floating point numbers one can now
use the GCC quadmath library which implements the quadruple precision
floating point numbers on x86 and IA-64 platforms.  See F<INSTALL> for
details.

=item *

MurmurHash64A and MurmurHash64B can now be configured as the internal hash
function.

=item *

C<make test.valgrind> now supports parallel testing.

For example:

    TEST_JOBS=9 make test.valgrind

See L<perlhacktips/valgrind> for more information.

L<[GH #13658]|https://github.com/Perl/perl5/issues/13658>

=item *

The MAD (Misc Attribute Decoration) build option has been removed

This was an unmaintained attempt at preserving
the Perl parse tree more faithfully so that automatic conversion of
Perl 5 to Perl 6 would have been easier.

This build-time configuration option had been unmaintained for years,
and had probably seriously diverged on both Perl 5 and Perl 6 sides.

=item *

A new compilation flag, C<< -DPERL_OP_PARENT >> is available. For details,
see the discussion below at L<< /Internal Changes >>.

=item *

Pathtools no longer tries to load XS on miniperl. This speeds up building perl
slightly.

=back

=head1 Testing

=over 4

=item *

F<t/porting/re_context.t> has been added to test that L<utf8> and its
dependencies only use the subset of the C<$1..$n> capture vars that
C<Perl_save_re_context()> is hard-coded to localize, because that function
has no efficient way of determining at runtime what vars to localize.

=item *

Tests for performance issues have been added in the file F<t/perf/taint.t>.

=item *

Some regular expression tests are written in such a way that they will
run very slowly if certain optimizations break. These tests have been
moved into new files, F<< t/re/speed.t >> and F<< t/re/speed_thr.t >>,
and are run with a C<< watchdog() >>.

=item *

C<< test.pl >> now allows C<< plan skip_all => $reason >>, to make it
more compatible with C<< Test::More >>.

=item *

A new test script, F<op/infnan.t>, has been added to test if infinity and NaN are
working correctly.  See L</Infinity and NaN (not-a-number) handling improved>.

=back

=head1 Platform Support

=head2 Regained Platforms

=over 4

=item IRIX and Tru64 platforms are working again.

Some C<make test> failures remain:
L<[GH #14557]|https://github.com/Perl/perl5/issues/14557>
and L<[GH #14727]|https://github.com/Perl/perl5/issues/14727>
for IRIX; L<[GH #14629]|https://github.com/Perl/perl5/issues/14629>,
L<[cpan #99605]|https://rt.cpan.org/Public/Bug/Display.html?id=99605>, and
L<[cpan #104836]|https://rt.cpan.org/Ticket/Display.html?id=104836> for Tru64.

=item z/OS running EBCDIC Code Page 1047

Core perl now works on this EBCDIC platform.  Earlier perls also worked, but,
even though support wasn't officially withdrawn, recent perls would not compile
and run well.  Perl 5.20 would work, but had many bugs which have now been
fixed.  Many CPAN modules that ship with Perl still fail tests, including
C<Pod::Simple>.  However the version of C<Pod::Simple> currently on CPAN should work;
it was fixed too late to include in Perl 5.22.  Work is under way to fix many
of the still-broken CPAN modules, which likely will be installed on CPAN when
completed, so that you may not have to wait until Perl 5.24 to get a working
version.

=back

=head2 Discontinued Platforms

=over 4

=item NeXTSTEP/OPENSTEP

NeXTSTEP was a proprietary operating system bundled with NeXT's
workstations in the early to mid 90s; OPENSTEP was an API specification
that provided a NeXTSTEP-like environment on a non-NeXTSTEP system.  Both
are now long dead, so support for building Perl on them has been removed.

=back

=head2 Platform-Specific Notes

=over 4

=item EBCDIC

Special handling is required of the perl interpreter on EBCDIC platforms
to get C<qr/[i-j]/> to match only C<"i"> and C<"j">, since there are 7
characters between the
code points for C<"i"> and C<"j">.  This special handling had only been
invoked when both ends of the range are literals.  Now it is also
invoked if any of the C<\N{...}> forms for specifying a character by
name or Unicode code point is used instead of a literal.  See
L<perlrecharclass/Character Ranges>.

=item HP-UX

The archname now distinguishes use64bitint from use64bitall.

=item Android

Build support has been improved for cross-compiling in general and for
Android in particular.

=item VMS

=over 4

=item *

When spawning a subprocess without waiting, the return value is now
the correct PID.

=item *

Fix a prototype so linking doesn't fail under the VMS C++ compiler.

=item *

C<finite>, C<finitel>, and C<isfinite> detection has been added to
C<configure.com>, environment handling has had some minor changes, and
a fix for legacy feature checking status.

=back

=item Win32

=over 4

=item *

F<miniperl.exe> is now built with C<-fno-strict-aliasing>, allowing 64-bit
builds to complete on GCC 4.8.
L<[GH #14556]|https://github.com/Perl/perl5/issues/14556>

=item *

C<nmake minitest> now works on Win32.  Due to dependency issues you
need to build C<nmake test-prep> first, and a small number of the
tests fail.
L<[GH #14318]|https://github.com/Perl/perl5/issues/14318>

=item *

Perl can now be built in C++ mode on Windows by setting the makefile macro
C<USE_CPLUSPLUS> to the value "define".

=item *

The list form of piped open has been implemented for Win32.  Note: unlike
C<system LIST> this does not fall back to the shell.
L<[GH #13574]|https://github.com/Perl/perl5/issues/13574>

=item *

New C<DebugSymbols> and C<DebugFull> configuration options added to
Windows makefiles.

=item *

Previously, compiling XS modules (including CPAN ones) using Visual C++ for
Win64 resulted in around a dozen warnings per file from F<hv_func.h>.  These
warnings have been silenced.

=item *

Support for building without PerlIO has been removed from the Windows
makefiles.  Non-PerlIO builds were all but deprecated in Perl 5.18.0 and are
already not supported by F<Configure> on POSIX systems.

=item *

Between 2 and 6 milliseconds and seven I/O calls have been saved per attempt
to open a perl module for each path in C<@INC>.

=item *

Intel C builds are now always built with C99 mode on.

=item *

C<%I64d> is now being used instead of C<%lld> for MinGW.

=item *

In the experimental C<:win32> layer, a crash in C<open> was fixed. Also
opening F</dev/null> (which works under Win32 Perl's default C<:unix>
layer) was implemented for C<:win32>.
L<[GH #13968]|https://github.com/Perl/perl5/issues/13968>

=item *

A new makefile option, C<USE_LONG_DOUBLE>, has been added to the Windows
dmake makefile for gcc builds only.  Set this to "define" if you want perl to
use long doubles to give more accuracy and range for floating point numbers.

=back

=item OpenBSD

On OpenBSD, Perl will now default to using the system C<malloc> due to the
security features it provides. Perl's own malloc wrapper has been in use
since v5.14 due to performance reasons, but the OpenBSD project believes
the tradeoff is worth it and would prefer that users who need the speed
specifically ask for it.

L<[GH #13888]|https://github.com/Perl/perl5/issues/13888>.

=item Solaris

=over 4

=item *

We now look for the Sun Studio compiler in both F</opt/solstudio*> and
F</opt/solarisstudio*>.

=item *

Builds on Solaris 10 with C<-Dusedtrace> would fail early since make
didn't follow implied dependencies to build C<perldtrace.h>.  Added an
explicit dependency to C<depend>.
L<[GH #13334]|https://github.com/Perl/perl5/issues/13334>

=item *

C99 options have been cleaned up; hints look for C<solstudio>
as well as C<SUNWspro>; and support for native C<setenv> has been added.

=back

=back

=head1 Internal Changes

=over 4

=item *

Experimental support has been added to allow ops in the optree to locate
their parent, if any. This is enabled by the non-default build option
C<-DPERL_OP_PARENT>. It is envisaged that this will eventually become
enabled by default, so XS code which directly accesses the C<op_sibling>
field of ops should be updated to be future-proofed.

On C<PERL_OP_PARENT> builds, the C<op_sibling> field has been renamed
C<op_sibparent> and a new flag, C<op_moresib>, added. On the last op in a
sibling chain, C<op_moresib> is false and C<op_sibparent> points to the
parent (if any) rather than being C<NULL>.

To make existing code work transparently whether using C<PERL_OP_PARENT>
or not, a number of new macros and functions have been added that should
be used, rather than directly manipulating C<op_sibling>.

For the case of just reading C<op_sibling> to determine the next sibling,
two new macros have been added. A simple scan through a sibling chain
like this:

    for (; kid->op_sibling; kid = kid->op_sibling) { ... }

should now be written as:

    for (; OpHAS_SIBLING(kid); kid = OpSIBLING(kid)) { ... }

For altering optrees, a general-purpose function C<op_sibling_splice()>
has been added, which allows for manipulation of a chain of sibling ops.
By analogy with the Perl function C<splice()>, it allows you to cut out
zero or more ops from a sibling chain and replace them with zero or more
new ops.  It transparently handles all the updating of sibling, parent,
op_last pointers etc.

If you need to manipulate ops at a lower level, then three new macros,
C<OpMORESIB_set>, C<OpLASTSIB_set> and C<OpMAYBESIB_set> are intended to
be a low-level portable way to set C<op_sibling> / C<op_sibparent> while
also updating C<op_moresib>.  The first sets the sibling pointer to a new
sibling, the second makes the op the last sibling, and the third
conditionally does the first or second action.  Note that unlike
C<op_sibling_splice()> these macros won't maintain consistency in the
parent at the same time (I<e.g.> by updating C<op_first> and C<op_last> where
appropriate).

A C-level C<Perl_op_parent()> function and a Perl-level C<B::OP::parent()>
method have been added. The C function only exists under
C<PERL_OP_PARENT> builds (using it is build-time error on vanilla
perls).  C<B::OP::parent()> exists always, but on a vanilla build it
always returns C<NULL>. Under C<PERL_OP_PARENT>, they return the parent
of the current op, if any. The variable C<$B::OP::does_parent> allows you
to determine whether C<B> supports retrieving an op's parent.

C<PERL_OP_PARENT> was introduced in 5.21.2, but the interface was
changed considerably in 5.21.11. If you updated your code before the
5.21.11 changes, it may require further revision. The main changes after
5.21.2 were:

=over 4

=item *

The C<OP_SIBLING> and C<OP_HAS_SIBLING> macros have been renamed
C<OpSIBLING> and C<OpHAS_SIBLING> for consistency with other
op-manipulating macros.

=item *

The C<op_lastsib> field has been renamed C<op_moresib>, and its meaning
inverted.

=item *

The macro C<OpSIBLING_set> has been removed, and has been superseded by
C<OpMORESIB_set> I<et al>.

=item *

The C<op_sibling_splice()> function now accepts a null C<parent> argument
where the splicing doesn't affect the first or last ops in the sibling
chain

=back

=item *

Macros have been created to allow XS code to better manipulate the POSIX locale
category C<LC_NUMERIC>.  See L<perlapi/Locale-related functions and macros>.

=item *

The previous C<atoi> I<et al> replacement function, C<grok_atou>, has now been
superseded by C<grok_atoUV>.  See L<perlclib> for details.

=item *

A new function, C<Perl_sv_get_backrefs()>, has been added which allows you
retrieve the weak references, if any, which point at an SV.

=item *

The C<screaminstr()> function has been removed. Although marked as
public API, it was undocumented and had no usage in CPAN modules. Calling
it has been fatal since 5.17.0.

=item *

The C<newDEFSVOP()>, C<block_start()>, C<block_end()> and C<intro_my()>
functions have been added to the API.

=item *

The internal C<convert> function in F<op.c> has been renamed
C<op_convert_list> and added to the API.

=item *

The C<sv_magic()> function no longer forbids "ext" magic on read-only
values.  After all, perl can't know whether the custom magic will modify
the SV or not.
L<[GH #14202]|https://github.com/Perl/perl5/issues/14202>.

=item *

Accessing L<perlapi/CvPADLIST> on an XSUB is now forbidden.

The C<CvPADLIST> field has been reused for a different internal purpose
for XSUBs. So in particular, you can no longer rely on it being NULL as a
test of whether a CV is an XSUB. Use C<CvISXSUB()> instead.

=item *

SVs of type C<SVt_NV> are now sometimes bodiless when the build
configuration and platform allow it: specifically, when C<< sizeof(NV) <=
sizeof(IV) >>. "Bodiless" means that the NV value is stored directly in
the head of an SV, without requiring a separate body to be allocated. This
trick has already been used for IVs since 5.9.2 (though in the case of
IVs, it is always used, regardless of platform and build configuration).

=item *

The C<$DB::single>, C<$DB::signal> and C<$DB::trace> variables now have set- and
get-magic that stores their values as IVs, and those IVs are used when
testing their values in C<pp_dbstate()>.  This prevents perl from
recursing infinitely if an overloaded object is assigned to any of those
variables.
L<[GH #14013]|https://github.com/Perl/perl5/issues/14013>.

=item *

C<Perl_tmps_grow()>, which is marked as public API but is undocumented, has
been removed from the public API. This change does not affect XS code that
uses the C<EXTEND_MORTAL> macro to pre-extend the mortal stack.

=item *

Perl's internals no longer sets or uses the C<SVs_PADMY> flag.
C<SvPADMY()> now returns a true value for anything not marked C<PADTMP>
and C<SVs_PADMY> is now defined as 0.

=item *

The macros C<SETsv> and C<SETsvUN> have been removed. They were no longer used
in the core since commit 6f1401dc2a five years ago, and have not been
found present on CPAN.

=item *

The C<< SvFAKE >> bit (unused on HVs) got informally reserved by
David Mitchell for future work on vtables.

=item *

The C<sv_catpvn_flags()> function accepts C<SV_CATBYTES> and C<SV_CATUTF8>
flags, which specify whether the appended string is bytes or UTF-8,
respectively. (These flags have in fact been present since 5.16.0, but
were formerly not regarded as part of the API.)

=item *

A new opcode class, C<< METHOP >>, has been introduced. It holds
information used at runtime to improve the performance
of class/object method calls.

C<< OP_METHOD >> and C<< OP_METHOD_NAMED >> have changed from being
C<< UNOP/SVOP >> to being C<< METHOP >>.

=item *

C<cv_name()> is a new API function that can be passed a CV or GV.  It
returns an SV containing the name of the subroutine, for use in
diagnostics.

L<[GH #12767]|https://github.com/Perl/perl5/issues/12767>
L<[GH #13392]|https://github.com/Perl/perl5/issues/13392>

=item *

C<cv_set_call_checker_flags()> is a new API function that works like
C<cv_set_call_checker()>, except that it allows the caller to specify
whether the call checker requires a full GV for reporting the subroutine's
name, or whether it could be passed a CV instead.  Whatever value is
passed will be acceptable to C<cv_name()>.  C<cv_set_call_checker()>
guarantees there will be a GV, but it may have to create one on the fly,
which is inefficient.
L<[GH #12767]|https://github.com/Perl/perl5/issues/12767>

=item *

C<CvGV> (which is not part of the API) is now a more complex macro, which may
call a function and reify a GV.  For those cases where it has been used as a
boolean, C<CvHASGV> has been added, which will return true for CVs that
notionally have GVs, but without reifying the GV.  C<CvGV> also returns a GV
now for lexical subs.
L<[GH #13392]|https://github.com/Perl/perl5/issues/13392>

=item *

The L<perlapi/sync_locale> function has been added to the public API.
Changing the program's locale should be avoided by XS code. Nevertheless,
certain non-Perl libraries called from XS need to do so, such as C<Gtk>.
When this happens, Perl needs to be told that the locale has
changed.  Use this function to do so, before returning to Perl.

=item *

The defines and labels for the flags in the C<op_private> field of OPs are now
auto-generated from data in F<regen/op_private>.  The noticeable effect of this
is that some of the flag output of C<Concise> might differ slightly, and the
flag output of S<C<perl -Dx>> may differ considerably (they both use the same set
of labels now).  Also, debugging builds now have a new assertion in
C<op_free()> to ensure that the op doesn't have any unrecognized flags set in
C<op_private>.

=item *

The deprecated variable C<PL_sv_objcount> has been removed.

=item *

Perl now tries to keep the locale category C<LC_NUMERIC> set to "C"
except around operations that need it to be set to the program's
underlying locale.  This protects the many XS modules that cannot cope
with the decimal radix character not being a dot.  Prior to this
release, Perl initialized this category to "C", but a call to
C<POSIX::setlocale()> would change it.  Now such a call will change the
underlying locale of the C<LC_NUMERIC> category for the program, but the
locale exposed to XS code will remain "C".  There are new macros
to manipulate the LC_NUMERIC locale, including
C<STORE_LC_NUMERIC_SET_TO_NEEDED> and
C<STORE_LC_NUMERIC_FORCE_TO_UNDERLYING>.
See L<perlapi/Locale-related functions and macros>.

=item *

A new macro L<C<isUTF8_CHAR>|perlapi/isUTF8_CHAR> has been written which
efficiently determines if the string given by its parameters begins
with a well-formed UTF-8 encoded character.

=item *

The following private API functions had their context parameter removed:
C<Perl_cast_ulong>,  C<Perl_cast_i32>, C<Perl_cast_iv>,    C<Perl_cast_uv>,
C<Perl_cv_const_sv>, C<Perl_mg_find>,  C<Perl_mg_findext>, C<Perl_mg_magical>,
C<Perl_mini_mktime>, C<Perl_my_dirfd>, C<Perl_sv_backoff>, C<Perl_utf8_hop>.

Note that the prefix-less versions of those functions that are part of the
public API, such as C<cast_i32()>, remain unaffected.

=item *

The C<PADNAME> and C<PADNAMELIST> types are now separate types, and no
longer simply aliases for SV and AV.
L<[GH #14250]|https://github.com/Perl/perl5/issues/14250>.

=item *

Pad names are now always UTF-8.  The C<PadnameUTF8> macro always returns
true.  Previously, this was effectively the case already, but any support
for two different internal representations of pad names has now been
removed.

=item *

A new op class, C<UNOP_AUX>, has been added. This is a subclass of
C<UNOP> with an C<op_aux> field added, which points to an array of unions
of UV, SV* etc. It is intended for where an op needs to store more data
than a simple C<op_sv> or whatever. Currently the only op of this type is
C<OP_MULTIDEREF> (see next item).

=item *

A new op has been added, C<OP_MULTIDEREF>, which performs one or more
nested array and hash lookups where the key is a constant or simple
variable. For example the expression C<$a[0]{$k}[$i]>, which previously
involved ten C<rv2Xv>, C<Xelem>, C<gvsv> and C<const> ops is now performed
by a single C<multideref> op. It can also handle C<local>, C<exists> and
C<delete>. A non-simple index expression, such as C<[$i+1]> is still done
using C<aelem>/C<helem>, and single-level array lookup with a small constant
index is still done using C<aelemfast>.

=back

=head1 Selected Bug Fixes

=over 4

=item *

C<close> now sets C<$!>

When an I/O error occurs, the fact that there has been an error is recorded
in the handle.  C<close> returns false for such a handle.  Previously, the
value of C<$!> would be untouched by C<close>, so the common convention of
writing S<C<close $fh or die $!>> did not work reliably.  Now the handle
records the value of C<$!>, too, and C<close> restores it.

=item *

C<no re> now can turn off everything that C<use re> enables

Previously, running C<no re> would turn off only a few things. Now it
can turn off all the enabled things. For example, the only way to
stop debugging, once enabled, was to exit the enclosing block; that is
now fixed.

=item *

C<pack("D", $x)> and C<pack("F", $x)> now zero the padding on x86 long
double builds.  Under some build options on GCC 4.8 and later, they used
to either overwrite the zero-initialized padding, or bypass the
initialized buffer entirely.  This caused F<op/pack.t> to fail.
L<[GH #14554]|https://github.com/Perl/perl5/issues/14554>

=item *

Extending an array cloned from a parent thread could result in "Modification of
a read-only value attempted" errors when attempting to modify the new elements.
L<[GH #14605]|https://github.com/Perl/perl5/issues/14605>

=item *

An assertion failure and subsequent crash with C<< *x=<y> >> has been fixed.
L<[GH #14493]|https://github.com/Perl/perl5/issues/14493>

=item *

A possible crashing/looping bug related to compiling lexical subs has been
fixed.
L<[GH #14596]|https://github.com/Perl/perl5/issues/14596>

=item *

UTF-8 now works correctly in function names, in unquoted HERE-document
terminators, and in variable names used as array indexes.
L<[GH #14601]|https://github.com/Perl/perl5/issues/14601>

=item *

Repeated global pattern matches in scalar context on large tainted strings were
exponentially slow depending on the current match position in the string.
L<[GH #14238]|https://github.com/Perl/perl5/issues/14238>

=item *

Various crashes due to the parser getting confused by syntax errors have been
fixed.
L<[GH #14496]|https://github.com/Perl/perl5/issues/14496>
L<[GH #14497]|https://github.com/Perl/perl5/issues/14497>
L<[GH #14548]|https://github.com/Perl/perl5/issues/14548>
L<[GH #14564]|https://github.com/Perl/perl5/issues/14564>

=item *

C<split> in the scope of lexical C<$_> has been fixed not to fail assertions.
L<[GH #14483]|https://github.com/Perl/perl5/issues/14483>

=item *

C<my $x : attr> syntax inside various list operators no longer fails
assertions.
L<[GH #14500]|https://github.com/Perl/perl5/issues/14500>

=item *

An C<@> sign in quotes followed by a non-ASCII digit (which is not a valid
identifier) would cause the parser to crash, instead of simply trying the
C<@> as literal.  This has been fixed.
L<[GH #14553]|https://github.com/Perl/perl5/issues/14553>

=item *

C<*bar::=*foo::=*glob_with_hash> has been crashing since Perl 5.14, but no
longer does.
L<[GH #14512]|https://github.com/Perl/perl5/issues/14512>

=item *

C<foreach> in scalar context was not pushing an item on to the stack, resulting
in bugs.  (S<C<print 4, scalar do { foreach(@x){} } + 1>> would print 5.)
It has been fixed to return C<undef>.
L<[GH #14569]|https://github.com/Perl/perl5/issues/14569>

=item *

Several cases of data used to store environment variable contents in core C
code being potentially overwritten before being used have been fixed.
L<[GH #14476]|https://github.com/Perl/perl5/issues/14476>

=item *

