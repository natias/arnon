    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    repo.dirstate.hasdir(b"a")

    def setup():
        try:
            del repo.dirstate._map._dirs
        except AttributeError:
            pass

    def d():
        repo.dirstate.hasdir(b"a")

    timer(d, setup=setup)
    fm.end()


@command(b'perf::dirstatefoldmap|perfdirstatefoldmap', formatteropts)
def perfdirstatefoldmap(ui, repo, **opts):
    """benchmap a `dirstate._map.filefoldmap.get()` request

    The dirstate filefoldmap cache is dropped between every request.
    """
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    dirstate = repo.dirstate
    dirstate._map.filefoldmap.get(b'a')

    def setup():
        del dirstate._map.filefoldmap

    def d():
        dirstate._map.filefoldmap.get(b'a')

    timer(d, setup=setup)
    fm.end()


@command(b'perf::dirfoldmap|perfdirfoldmap', formatteropts)
def perfdirfoldmap(ui, repo, **opts):
    """benchmap a `dirstate._map.dirfoldmap.get()` request

    The dirstate dirfoldmap cache is dropped between every request.
    """
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    dirstate = repo.dirstate
    dirstate._map.dirfoldmap.get(b'a')

    def setup():
        del dirstate._map.dirfoldmap
        try:
            del dirstate._map._dirs
        except AttributeError:
            pass

    def d():
        dirstate._map.dirfoldmap.get(b'a')

    timer(d, setup=setup)
    fm.end()


@command(b'perf::dirstatewrite|perfdirstatewrite', formatteropts)
def perfdirstatewrite(ui, repo, **opts):
    """benchmap the time it take to write a dirstate on disk"""
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    ds = repo.dirstate
    b"a" in ds

    def setup():
        ds._dirty = True

    def d():
        ds.write(repo.currenttransaction())

    timer(d, setup=setup)
    fm.end()


def _getmergerevs(repo, opts):
    """parse command argument to return rev involved in merge

    input: options dictionnary with `rev`, `from` and `bse`
    output: (localctx, otherctx, basectx)
    """
    if opts[b'from']:
        fromrev = scmutil.revsingle(repo, opts[b'from'])
        wctx = repo[fromrev]
    else:
        wctx = repo[None]
        # we don't want working dir files to be stat'd in the benchmark, so
        # prime that cache
        wctx.dirty()
    rctx = scmutil.revsingle(repo, opts[b'rev'], opts[b'rev'])
    if opts[b'base']:
        fromrev = scmutil.revsingle(repo, opts[b'base'])
        ancestor = repo[fromrev]
    else:
        ancestor = wctx.ancestor(rctx)
    return (wctx, rctx, ancestor)


@command(
    b'perf::mergecalculate|perfmergecalculate',
    [
        (b'r', b'rev', b'.', b'rev to merge against'),
        (b'', b'from', b'', b'rev to merge from'),
        (b'', b'base', b'', b'the revision to use as base'),
    ]
    + formatteropts,
)
def perfmergecalculate(ui, repo, **opts):
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)

    wctx, rctx, ancestor = _getmergerevs(repo, opts)

    def d():
        # acceptremote is True because we don't want prompts in the middle of
        # our benchmark
        merge.calculateupdates(
            repo,
            wctx,
            rctx,
            [ancestor],
            branchmerge=False,
            force=False,
            acceptremote=True,
            followcopies=True,
        )

    timer(d)
    fm.end()


@command(
    b'perf::mergecopies|perfmergecopies',
    [
        (b'r', b'rev', b'.', b'rev to merge against'),
        (b'', b'from', b'', b'rev to merge from'),
        (b'', b'base', b'', b'the revision to use as base'),
    ]
    + formatteropts,
)
def perfmergecopies(ui, repo, **opts):
    """measure runtime of `copies.mergecopies`"""
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    wctx, rctx, ancestor = _getmergerevs(repo, opts)

    def d():
        # acceptremote is True because we don't want prompts in the middle of
        # our benchmark
        copies.mergecopies(repo, wctx, rctx, ancestor)

    timer(d)
    fm.end()


@command(b'perf::pathcopies|perfpathcopies', [], b"REV REV")
def perfpathcopies(ui, repo, rev1, rev2, **opts):
    """benchmark the copy tracing logic"""
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    ctx1 = scmutil.revsingle(repo, rev1, rev1)
    ctx2 = scmutil.revsingle(repo, rev2, rev2)

    def d():
        copies.pathcopies(ctx1, ctx2)

    timer(d)
    fm.end()


@command(
    b'perf::phases|perfphases',
    [
        (b'', b'full', False, b'include file reading time too'),
    ],
    b"",
)
def perfphases(ui, repo, **opts):
    """benchmark phasesets computation"""
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    _phases = repo._phasecache
    full = opts.get(b'full')

    def d():
        phases = _phases
        if full:
            clearfilecache(repo, b'_phasecache')
            phases = repo._phasecache
        phases.invalidate()
        phases.loadphaserevs(repo)

    timer(d)
    fm.end()


@command(b'perf::phasesremote|perfphasesremote', [], b"[DEST]")
def perfphasesremote(ui, repo, dest=None, **opts):
    """benchmark time needed to analyse phases of the remote server"""
    from mercurial.node import bin
    from mercurial import (
        exchange,
        hg,
        phases,
    )

    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)

    path = ui.getpath(dest, default=(b'default-push', b'default'))
    if not path:
        raise error.Abort(
            b'default repository not configured!',
            hint=b"see 'hg help config.paths'",
        )
    dest = path.pushloc or path.loc
    ui.statusnoi18n(b'analysing phase of %s\n' % util.hidepassword(dest))
    other = hg.peer(repo, opts, dest)

    # easier to perform discovery through the operation
    op = exchange.pushoperation(repo, other)
    exchange._pushdiscoverychangeset(op)

    remotesubset = op.fallbackheads

    with other.commandexecutor() as e:
        remotephases = e.callcommand(
            b'listkeys', {b'namespace': b'phases'}
        ).result()
    del other
    publishing = remotephases.get(b'publishing', False)
    if publishing:
        ui.statusnoi18n(b'publishing: yes\n')
    else:
        ui.statusnoi18n(b'publishing: no\n')

    has_node = getattr(repo.changelog.index, 'has_node', None)
    if has_node is None:
        has_node = repo.changelog.nodemap.__contains__
    nonpublishroots = 0
    for nhex, phase in remotephases.iteritems():
        if nhex == b'publishing':  # ignore data related to publish option
            continue
        node = bin(nhex)
        if has_node(node) and int(phase):
            nonpublishroots += 1
    ui.statusnoi18n(b'number of roots: %d\n' % len(remotephases))
    ui.statusnoi18n(b'number of known non public roots: %d\n' % nonpublishroots)

    def d():
        phases.remotephasessummary(repo, remotesubset, remotephases)

    timer(d)
    fm.end()


@command(
    b'perf::manifest|perfmanifest',
    [
        (b'm', b'manifest-rev', False, b'Look up a manifest node revision'),
        (b'', b'clear-disk', False, b'clear on-disk caches too'),
    ]
    + formatteropts,
    b'REV|NODE',
)
def perfmanifest(ui, repo, rev, manifest_rev=False, clear_disk=False, **opts):
    """benchmark the time to read a manifest from disk and return a usable
    dict-like object

    Manifest caches are cleared before retrieval."""
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    if not manifest_rev:
        ctx = scmutil.revsingle(repo, rev, rev)
        t = ctx.manifestnode()
    else:
        from mercurial.node import bin

        if len(rev) == 40:
            t = bin(rev)
        else:
            try:
                rev = int(rev)

                if util.safehasattr(repo.manifestlog, b'getstorage'):
                    t = repo.manifestlog.getstorage(b'').node(rev)
                else:
                    t = repo.manifestlog._revlog.lookup(rev)
            except ValueError:
                raise error.Abort(
                    b'manifest revision must be integer or full node'
                )

    def d():
        repo.manifestlog.clearcaches(clear_persisted_data=clear_disk)
        repo.manifestlog[t].read()

    timer(d)
    fm.end()


@command(b'perf::changeset|perfchangeset', formatteropts)
def perfchangeset(ui, repo, rev, **opts):
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    n = scmutil.revsingle(repo, rev).node()

    def d():
        repo.changelog.read(n)
        # repo.changelog._cache = None

    timer(d)
    fm.end()


@command(b'perf::ignore|perfignore', formatteropts)
def perfignore(ui, repo, **opts):
    """benchmark operation related to computing ignore"""
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    dirstate = repo.dirstate

    def setupone():
        dirstate.invalidate()
        clearfilecache(dirstate, b'_ignore')

    def runone():
        dirstate._ignore

    timer(runone, setup=setupone, title=b"load")
    fm.end()


@command(
    b'perf::index|perfindex',
    [
        (b'', b'rev', [], b'revision to be looked up (default tip)'),
        (b'', b'no-lookup', None, b'do not revision lookup post creation'),
    ]
    + formatteropts,
)
def perfindex(ui, repo, **opts):
    """benchmark index creation time followed by a lookup

    The default is to look `tip` up. Depending on the index implementation,
    the revision looked up can matters. For example, an implementation
    scanning the index will have a faster lookup time for `--rev tip` than for
    `--rev 0`. The number of looked up revisions and their order can also
    matters.

    Example of useful set to test:

    * tip
    * 0
    * -10:
    * :10
    * -10: + :10
    * :10: + -10:
    * -10000:
    * -10000: + 0

    It is not currently possible to check for lookup of a missing node. For
    deeper lookup benchmarking, checkout the `perfnodemap` command."""
    import mercurial.revlog

    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    mercurial.revlog._prereadsize = 2 ** 24  # disable lazy parser in old hg
    if opts[b'no_lookup']:
        if opts['rev']:
            raise error.Abort('--no-lookup and --rev are mutually exclusive')
        nodes = []
    elif not opts[b'rev']:
        nodes = [repo[b"tip"].node()]
    else:
        revs = scmutil.revrange(repo, opts[b'rev'])
        cl = repo.changelog
        nodes = [cl.node(r) for r in revs]

    unfi = repo.unfiltered()
    # find the filecache func directly
    # This avoid polluting the benchmark with the filecache logic
    makecl = unfi.__class__.changelog.func

    def setup():
        # probably not necessary, but for good measure
        clearchangelog(unfi)

    def d():
        cl = makecl(unfi)
        for n in nodes:
            cl.rev(n)

    timer(d, setup=setup)
    fm.end()


@command(
    b'perf::nodemap|perfnodemap',
    [
        (b'', b'rev', [], b'revision to be looked up (default tip)'),
        (b'', b'clear-caches', True, b'clear revlog cache between calls'),
    ]
    + formatteropts,
)
def perfnodemap(ui, repo, **opts):
    """benchmark the time necessary to look up revision from a cold nodemap

    Depending on the implementation, the amount and order of revision we look
    up can varies. Example of useful set to test:
    * tip
    * 0
    * -10:
    * :10
    * -10: + :10
    * :10: + -10:
    * -10000:
    * -10000: + 0

    The command currently focus on valid binary lookup. Benchmarking for
    hexlookup, prefix lookup and missing lookup would also be valuable.
    """
    import mercurial.revlog

    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    mercurial.revlog._prereadsize = 2 ** 24  # disable lazy parser in old hg

    unfi = repo.unfiltered()
    clearcaches = opts[b'clear_caches']
    # find the filecache func directly
    # This avoid polluting the benchmark with the filecache logic
    makecl = unfi.__class__.changelog.func
    if not opts[b'rev']:
        raise error.Abort(b'use --rev to specify revisions to look up')
    revs = scmutil.revrange(repo, opts[b'rev'])
    cl = repo.changelog
    nodes = [cl.node(r) for r in revs]

    # use a list to pass reference to a nodemap from one closure to the next
    nodeget = [None]

    def setnodeget():
        # probably not necessary, but for good measure
        clearchangelog(unfi)
        cl = makecl(unfi)
        if util.safehasattr(cl.index, 'get_rev'):
            nodeget[0] = cl.index.get_rev
        else:
            nodeget[0] = cl.nodemap.get

    def d():
        get = nodeget[0]
        for n in nodes:
            get(n)

    setup = None
    if clearcaches:

        def setup():
            setnodeget()

    else:
        setnodeget()
        d()  # prewarm the data structure
    timer(d, setup=setup)
    fm.end()


@command(b'perf::startup|perfstartup', formatteropts)
def perfstartup(ui, repo, **opts):
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)

    def d():
        if os.name != 'nt':
            os.system(
                b"HGRCPATH= %s version -q > /dev/null" % fsencode(sys.argv[0])
            )
        else:
            os.environ['HGRCPATH'] = r' '
            os.system("%s version -q > NUL" % sys.argv[0])

    timer(d)
    fm.end()


@command(b'perf::parents|perfparents', formatteropts)
def perfparents(ui, repo, **opts):
    """benchmark the time necessary to fetch one changeset's parents.

    The fetch is done using the `node identifier`, traversing all object layers
    from the repository object. The first N revisions will be used for this
    benchmark. N is controlled by the ``perf.parentscount`` config option
    (default: 1000).
    """
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    # control the number of commits perfparents iterates over
    # experimental config: perf.parentscount
    count = getint(ui, b"perf", b"parentscount", 1000)
    if len(repo.changelog) < count:
        raise error.Abort(b"repo needs %d commits for this test" % count)
    repo = repo.unfiltered()
    nl = [repo.changelog.node(i) for i in _xrange(count)]

    def d():
        for n in nl:
            repo.changelog.parents(n)

    timer(d)
    fm.end()


@command(b'perf::ctxfiles|perfctxfiles', formatteropts)
def perfctxfiles(ui, repo, x, **opts):
    opts = _byteskwargs(opts)
    x = int(x)
    timer, fm = gettimer(ui, opts)

    def d():
        len(repo[x].files())

    timer(d)
    fm.end()


@command(b'perf::rawfiles|perfrawfiles', formatteropts)
def perfrawfiles(ui, repo, x, **opts):
    opts = _byteskwargs(opts)
    x = int(x)
    timer, fm = gettimer(ui, opts)
    cl = repo.changelog

    def d():
        len(cl.read(x)[3])

    timer(d)
    fm.end()


@command(b'perf::lookup|perflookup', formatteropts)
def perflookup(ui, repo, rev, **opts):
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    timer(lambda: len(repo.lookup(rev)))
    fm.end()


@command(
    b'perf::linelogedits|perflinelogedits',
    [
        (b'n', b'edits', 10000, b'number of edits'),
        (b'', b'max-hunk-lines', 10, b'max lines in a hunk'),
    ],
    norepo=True,
)
def perflinelogedits(ui, **opts):
    from mercurial import linelog

    opts = _byteskwargs(opts)

    edits = opts[b'edits']
    maxhunklines = opts[b'max_hunk_lines']

    maxb1 = 100000
    random.seed(0)
    randint = random.randint
    currentlines = 0
    arglist = []
    for rev in _xrange(edits):
        a1 = randint(0, currentlines)
        a2 = randint(a1, min(currentlines, a1 + maxhunklines))
        b1 = randint(0, maxb1)
        b2 = randint(b1, b1 + maxhunklines)
        currentlines += (b2 - b1) - (a2 - a1)
        arglist.append((rev, a1, a2, b1, b2))

    def d():
        ll = linelog.linelog()
        for args in arglist:
            ll.replacelines(*args)

    timer, fm = gettimer(ui, opts)
    timer(d)
    fm.end()


@command(b'perf::revrange|perfrevrange', formatteropts)
def perfrevrange(ui, repo, *specs, **opts):
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    revrange = scmutil.revrange
    timer(lambda: len(revrange(repo, specs)))
    fm.end()


@command(b'perf::nodelookup|perfnodelookup', formatteropts)
def perfnodelookup(ui, repo, rev, **opts):
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    import mercurial.revlog

    mercurial.revlog._prereadsize = 2 ** 24  # disable lazy parser in old hg
    n = scmutil.revsingle(repo, rev).node()

    try:
        cl = revlog(getsvfs(repo), radix=b"00changelog")
    except TypeError:
        cl = revlog(getsvfs(repo), indexfile=b"00changelog.i")

    def d():
        cl.rev(n)
        clearcaches(cl)

    timer(d)
    fm.end()


@command(
    b'perf::log|perflog',
    [(b'', b'rename', False, b'ask log to follow renames')] + formatteropts,
)
def perflog(ui, repo, rev=None, **opts):
    opts = _byteskwargs(opts)
    if rev is None:
        rev = []
    timer, fm = gettimer(ui, opts)
    ui.pushbuffer()
    timer(
        lambda: commands.log(
            ui, repo, rev=rev, date=b'', user=b'', copies=opts.get(b'rename')
        )
    )
    ui.popbuffer()
    fm.end()


@command(b'perf::moonwalk|perfmoonwalk', formatteropts)
def perfmoonwalk(ui, repo, **opts):
    """benchmark walking the changelog backwards

    This also loads the changelog data for each revision in the changelog.
    """
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)

    def moonwalk():
        for i in repo.changelog.revs(start=(len(repo) - 1), stop=-1):
            ctx = repo[i]
            ctx.branch()  # read changelog data (in addition to the index)

    timer(moonwalk)
    fm.end()


@command(
    b'perf::templating|perftemplating',
    [
        (b'r', b'rev', [], b'revisions to run the template on'),
    ]
    + formatteropts,
)
def perftemplating(ui, repo, testedtemplate=None, **opts):
    """test the rendering time of a given template"""
    if makelogtemplater is None:
        raise error.Abort(
            b"perftemplating not available with this Mercurial",
            hint=b"use 4.3 or later",
        )

    opts = _byteskwargs(opts)

    nullui = ui.copy()
    nullui.fout = open(os.devnull, 'wb')
    nullui.disablepager()
    revs = opts.get(b'rev')
    if not revs:
        revs = [b'all()']
    revs = list(scmutil.revrange(repo, revs))

    defaulttemplate = (
        b'{date|shortdate} [{rev}:{node|short}]'
        b' {author|person}: {desc|firstline}\n'
    )
    if testedtemplate is None:
        testedtemplate = defaulttemplate
    displayer = makelogtemplater(nullui, repo, testedtemplate)

    def format():
        for r in revs:
            ctx = repo[r]
            displayer.show(ctx)
            displayer.flush(ctx)

    timer, fm = gettimer(ui, opts)
    timer(format)
    fm.end()


def _displaystats(ui, opts, entries, data):
    # use a second formatter because the data are quite different, not sure
    # how it flies with the templater.
    fm = ui.formatter(b'perf-stats', opts)
    for key, title in entries:
        values = data[key]
        nbvalues = len(data)
        values.sort()
        stats = {
            'key': key,
            'title': title,
            'nbitems': len(values),
            'min': values[0][0],
            '10%': values[(nbvalues * 10) // 100][0],
            '25%': values[(nbvalues * 25) // 100][0],
            '50%': values[(nbvalues * 50) // 100][0],
            '75%': values[(nbvalues * 75) // 100][0],
            '80%': values[(nbvalues * 80) // 100][0],
            '85%': values[(nbvalues * 85) // 100][0],
            '90%': values[(nbvalues * 90) // 100][0],
            '95%': values[(nbvalues * 95) // 100][0],
            '99%': values[(nbvalues * 99) // 100][0],
            'max': values[-1][0],
        }
        fm.startitem()
        fm.data(**stats)
        # make node pretty for the human output
        fm.plain('### %s (%d items)\n' % (title, len(values)))
        lines = [
            'min',
            '10%',
            '25%',
            '50%',
            '75%',
            '80%',
            '85%',
            '90%',
            '95%',
            '99%',
            'max',
        ]
        for l in lines:
            fm.plain('%s: %s\n' % (l, stats[l]))
    fm.end()


@command(
    b'perf::helper-mergecopies|perfhelper-mergecopies',
    formatteropts
    + [
        (b'r', b'revs', [], b'restrict search to these revisions'),
        (b'', b'timing', False, b'provides extra data (costly)'),
        (b'', b'stats', False, b'provides statistic about the measured data'),
    ],
)
def perfhelpermergecopies(ui, repo, revs=[], **opts):
    """find statistics about potential parameters for `perfmergecopies`

    This command find (base, p1, p2) triplet relevant for copytracing
    benchmarking in the context of a merge.  It reports values for some of the
    parameters that impact merge copy tracing time during merge.

    If `--timing` is set, rename detection is run and the associated timing
    will be reported. The extra details come at the cost of slower command
    execution.

    Since rename detection is only run once, other factors might easily
    affect the precision of the timing. However it should give a good
    approximation of which revision triplets are very costly.
    """
    opts = _byteskwargs(opts)
    fm = ui.formatter(b'perf', opts)
    dotiming = opts[b'timing']
    dostats = opts[b'stats']

    output_template = [
        ("base", "%(base)12s"),
        ("p1", "%(p1.node)12s"),
        ("p2", "%(p2.node)12s"),
        ("p1.nb-revs", "%(p1.nbrevs)12d"),
        ("p1.nb-files", "%(p1.nbmissingfiles)12d"),
        ("p1.renames", "%(p1.renamedfiles)12d"),
        ("p1.time", "%(p1.time)12.3f"),
        ("p2.nb-revs", "%(p2.nbrevs)12d"),
        ("p2.nb-files", "%(p2.nbmissingfiles)12d"),
        ("p2.renames", "%(p2.renamedfiles)12d"),
        ("p2.time", "%(p2.time)12.3f"),
        ("renames", "%(nbrenamedfiles)12d"),
        ("total.time", "%(time)12.3f"),
    ]
    if not dotiming:
        output_template = [
            i
            for i in output_template
            if not ('time' in i[0] or 'renames' in i[0])
        ]
    header_names = [h for (h, v) in output_template]
    output = ' '.join([v for (h, v) in output_template]) + '\n'
    header = ' '.join(['%12s'] * len(header_names)) + '\n'
    fm.plain(header % tuple(header_names))

    if not revs:
        revs = ['all()']
    revs = scmutil.revrange(repo, revs)

    if dostats:
        alldata = {
            'nbrevs': [],
            'nbmissingfiles': [],
        }
        if dotiming:
            alldata['parentnbrenames'] = []
            alldata['totalnbrenames'] = []
            alldata['parenttime'] = []
            alldata['totaltime'] = []

    roi = repo.revs('merge() and %ld', revs)
    for r in roi:
        ctx = repo[r]
        p1 = ctx.p1()
        p2 = ctx.p2()
        bases = repo.changelog._commonancestorsheads(p1.rev(), p2.rev())
        for b in bases:
            b = repo[b]
            p1missing = copies._computeforwardmissing(b, p1)
            p2missing = copies._computeforwardmissing(b, p2)
            data = {
                b'base': b.hex(),
                b'p1.node': p1.hex(),
                b'p1.nbrevs': len(repo.revs('only(%d, %d)', p1.rev(), b.rev())),
                b'p1.nbmissingfiles': len(p1missing),
                b'p2.node': p2.hex(),
                b'p2.nbrevs': len(repo.revs('only(%d, %d)', p2.rev(), b.rev())),
                b'p2.nbmissingfiles': len(p2missing),
            }
            if dostats:
                if p1missing:
                    alldata['nbrevs'].append(
                        (data['p1.nbrevs'], b.hex(), p1.hex())
                    )
                    alldata['nbmissingfiles'].append(
                        (data['p1.nbmissingfiles'], b.hex(), p1.hex())
                    )
                if p2missing:
                    alldata['nbrevs'].append(
                        (data['p2.nbrevs'], b.hex(), p2.hex())
                    )
                    alldata['nbmissingfiles'].append(
                        (data['p2.nbmissingfiles'], b.hex(), p2.hex())
                    )
            if dotiming:
                begin = util.timer()
                mergedata = copies.mergecopies(repo, p1, p2, b)
                end = util.timer()
                # not very stable timing since we did only one run
                data['time'] = end - begin
                # mergedata contains five dicts: "copy", "movewithdir",
                # "diverge", "renamedelete" and "dirmove".
                # The first 4 are about renamed file so lets count that.
                renames = len(mergedata[0])
                renames += len(mergedata[1])
                renames += len(mergedata[2])
                renames += len(mergedata[3])
                data['nbrenamedfiles'] = renames
                begin = util.timer()
                p1renames = copies.pathcopies(b, p1)
                end = util.timer()
                data['p1.time'] = end - begin
                begin = util.timer()
                p2renames = copies.pathcopies(b, p2)
                end = util.timer()
                data['p2.time'] = end - begin
                data['p1.renamedfiles'] = len(p1renames)
                data['p2.renamedfiles'] = len(p2renames)

                if dostats:
                    if p1missing:
                        alldata['parentnbrenames'].append(
                            (data['p1.renamedfiles'], b.hex(), p1.hex())
                        )
                        alldata['parenttime'].append(
                            (data['p1.time'], b.hex(), p1.hex())
                        )
                    if p2missing:
                        alldata['parentnbrenames'].append(
                            (data['p2.renamedfiles'], b.hex(), p2.hex())
                        )
                        alldata['parenttime'].append(
                            (data['p2.time'], b.hex(), p2.hex())
                        )
                    if p1missing or p2missing:
                        alldata['totalnbrenames'].append(
                            (
                                data['nbrenamedfiles'],
                                b.hex(),
                                p1.hex(),
                                p2.hex(),
                            )
                        )
                        alldata['totaltime'].append(
                            (data['time'], b.hex(), p1.hex(), p2.hex())
                        )
            fm.startitem()
            fm.data(**data)
            # make node pretty for the human output
            out = data.copy()
            out['base'] = fm.hexfunc(b.node())
            out['p1.node'] = fm.hexfunc(p1.node())
            out['p2.node'] = fm.hexfunc(p2.node())
            fm.plain(output % out)

    fm.end()
    if dostats:
        # use a second formatter because the data are quite different, not sure
        # how it flies with the templater.
        entries = [
            ('nbrevs', 'number of revision covered'),
            ('nbmissingfiles', 'number of missing files at head'),
        ]
        if dotiming:
            entries.append(
                ('parentnbrenames', 'rename from one parent to base')
            )
            entries.append(('totalnbrenames', 'total number of renames'))
            entries.append(('parenttime', 'time for one parent'))
            entries.append(('totaltime', 'time for both parents'))
        _displaystats(ui, opts, entries, alldata)


@command(
    b'perf::helper-pathcopies|perfhelper-pathcopies',
    formatteropts
    + [
        (b'r', b'revs', [], b'restrict search to these revisions'),
        (b'', b'timing', False, b'provides extra data (costly)'),
        (b'', b'stats', False, b'provides statistic about the measured data'),
    ],
)
def perfhelperpathcopies(ui, repo, revs=[], **opts):
    """find statistic about potential parameters for the `perftracecopies`

    This command find source-destination pair relevant for copytracing testing.
    It report value for some of the parameters that impact copy tracing time.

    If `--timing` is set, rename detection is run and the associated timing
    will be reported. The extra details comes at the cost of a slower command
    execution.

    Since the rename detection is only run once, other factors might easily
    affect the precision of the timing. However it should give a good
    approximation of which revision pairs are very costly.
    """
    opts = _byteskwargs(opts)
    fm = ui.formatter(b'perf', opts)
    dotiming = opts[b'timing']
    dostats = opts[b'stats']

    if dotiming:
        header = '%12s %12s %12s %12s %12s %12s\n'
        output = (
            "%(source)12s %(destination)12s "
            "%(nbrevs)12d %(nbmissingfiles)12d "
            "%(nbrenamedfiles)12d %(time)18.5f\n"
        )
        header_names = (
            "source",
            "destination",
            "nb-revs",
            "nb-files",
            "nb-renames",
            "time",
        )
        fm.plain(header % header_names)
    else:
        header = '%12s %12s %12s %12s\n'
        output = (
            "%(source)12s %(destination)12s "
            "%(nbrevs)12d %(nbmissingfiles)12d\n"
        )
        fm.plain(header % ("source", "destination", "nb-revs", "nb-files"))

    if not revs:
        revs = ['all()']
    revs = scmutil.revrange(repo, revs)

    if dostats:
        alldata = {
            'nbrevs': [],
            'nbmissingfiles': [],
        }
        if dotiming:
            alldata['nbrenames'] = []
            alldata['time'] = []

