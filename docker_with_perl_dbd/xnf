
        finally:
            other.close()
    if result == 0 and not some_pushed:
        result = 1
    return result


@command(
    b'recover',
    [
        (b'', b'verify', False, b"run `hg verify` after successful recover"),
    ],
    helpcategory=command.CATEGORY_MAINTENANCE,
)
def recover(ui, repo, **opts):
    """roll back an interrupted transaction

    Recover from an interrupted commit or pull.

    This command tries to fix the repository status after an
    interrupted operation. It should only be necessary when Mercurial
    suggests it.

    Returns 0 if successful, 1 if nothing to recover or verify fails.
    """
    ret = repo.recover()
    if ret:
        if opts['verify']:
            return hg.verify(repo)
        else:
            msg = _(
                b"(verify step skipped, run `hg verify` to check your "
                b"repository content)\n"
            )
            ui.warn(msg)
            return 0
    return 1


@command(
    b'remove|rm',
    [
        (b'A', b'after', None, _(b'record delete for missing files')),
        (b'f', b'force', None, _(b'forget added files, delete modified files')),
    ]
    + subrepoopts
    + walkopts
    + dryrunopts,
    _(b'[OPTION]... FILE...'),
    helpcategory=command.CATEGORY_WORKING_DIRECTORY,
    helpbasic=True,
    inferrepo=True,
)
def remove(ui, repo, *pats, **opts):
    """remove the specified files on the next commit

    Schedule the indicated files for removal from the current branch.

    This command schedules the files to be removed at the next commit.
    To undo a remove before that, see :hg:`revert`. To undo added
    files, see :hg:`forget`.

    .. container:: verbose

      -A/--after can be used to remove only files that have already
      been deleted, -f/--force can be used to force deletion, and -Af
      can be used to remove files from the next revision without
      deleting them from the working directory.

      The following table details the behavior of remove for different
      file states (columns) and option combinations (rows). The file
      states are Added [A], Clean [C], Modified [M] and Missing [!]
      (as reported by :hg:`status`). The actions are Warn, Remove
      (from branch) and Delete (from disk):

      ========= == == == ==
      opt/state A  C  M  !
      ========= == == == ==
      none      W  RD W  R
      -f        R  RD RD R
      -A        W  W  W  R
      -Af       R  R  R  R
      ========= == == == ==

      .. note::

         :hg:`remove` never deletes files in Added [A] state from the
         working directory, not even if ``--force`` is specified.

    Returns 0 on success, 1 if any warnings encountered.
    """

    opts = pycompat.byteskwargs(opts)
    after, force = opts.get(b'after'), opts.get(b'force')
    dryrun = opts.get(b'dry_run')
    if not pats and not after:
        raise error.InputError(_(b'no files specified'))

    m = scmutil.match(repo[None], pats, opts)
    subrepos = opts.get(b'subrepos')
    uipathfn = scmutil.getuipathfn(repo, legacyrelativevalue=True)
    return cmdutil.remove(
        ui, repo, m, b"", uipathfn, after, force, subrepos, dryrun=dryrun
    )


@command(
    b'rename|move|mv',
    [
        (b'', b'forget', None, _(b'unmark a destination file as renamed')),
        (b'A', b'after', None, _(b'record a rename that has already occurred')),
        (
            b'',
            b'at-rev',
            b'',
            _(b'(un)mark renames in the given revision (EXPERIMENTAL)'),
            _(b'REV'),
        ),
        (
            b'f',
            b'force',
            None,
            _(b'forcibly move over an existing managed file'),
        ),
    ]
    + walkopts
    + dryrunopts,
    _(b'[OPTION]... SOURCE... DEST'),
    helpcategory=command.CATEGORY_WORKING_DIRECTORY,
)
def rename(ui, repo, *pats, **opts):
    """rename files; equivalent of copy + remove

    Mark dest as copies of sources; mark sources for deletion. If dest
    is a directory, copies are put in that directory. If dest is a
    file, there can only be one source.

    By default, this command copies the contents of files as they
    exist in the working directory. If invoked with -A/--after, the
    operation is recorded, but no copying is performed.

    To undo marking a destination file as renamed, use --forget. With that
    option, all given (positional) arguments are unmarked as renames. The
    destination file(s) will be left in place (still tracked). The source
    file(s) will not be restored. Note that :hg:`rename --forget` behaves
    the same way as :hg:`copy --forget`.

    This command takes effect with the next commit by default.

    Returns 0 on success, 1 if errors are encountered.
    """
    opts = pycompat.byteskwargs(opts)
    with repo.wlock():
        return cmdutil.copy(ui, repo, pats, opts, rename=True)


@command(
    b'resolve',
    [
        (b'a', b'all', None, _(b'select all unresolved files')),
        (b'l', b'list', None, _(b'list state of files needing merge')),
        (b'm', b'mark', None, _(b'mark files as resolved')),
        (b'u', b'unmark', None, _(b'mark files as unresolved')),
        (b'n', b'no-status', None, _(b'hide status prefix')),
        (b'', b're-merge', None, _(b're-merge files')),
    ]
    + mergetoolopts
    + walkopts
    + formatteropts,
    _(b'[OPTION]... [FILE]...'),
    helpcategory=command.CATEGORY_WORKING_DIRECTORY,
    inferrepo=True,
)
def resolve(ui, repo, *pats, **opts):
    """redo merges or set/view the merge status of files

    Merges with unresolved conflicts are often the result of
    non-interactive merging using the ``internal:merge`` configuration
    setting, or a command-line merge tool like ``diff3``. The resolve
    command is used to manage the files involved in a merge, after
    :hg:`merge` has been run, and before :hg:`commit` is run (i.e. the
    working directory must have two parents). See :hg:`help
    merge-tools` for information on configuring merge tools.

    The resolve command can be used in the following ways:

    - :hg:`resolve [--re-merge] [--tool TOOL] FILE...`: attempt to re-merge
      the specified files, discarding any previous merge attempts. Re-merging
      is not performed for files already marked as resolved. Use ``--all/-a``
      to select all unresolved files. ``--tool`` can be used to specify
      the merge tool used for the given files. It overrides the HGMERGE
      environment variable and your configuration files.  Previous file
      contents are saved with a ``.orig`` suffix.

    - :hg:`resolve -m [FILE]`: mark a file as having been resolved
      (e.g. after having manually fixed-up the files). The default is
      to mark all unresolved files.

    - :hg:`resolve -u [FILE]...`: mark a file as unresolved. The
      default is to mark all resolved files.

    - :hg:`resolve -l`: list files which had or still have conflicts.
      In the printed list, ``U`` = unresolved and ``R`` = resolved.
      You can use ``set:unresolved()`` or ``set:resolved()`` to filter
      the list. See :hg:`help filesets` for details.

    .. note::

       Mercurial will not let you commit files with unresolved merge
       conflicts. You must use :hg:`resolve -m ...` before you can
       commit after a conflicting merge.

    .. container:: verbose

      Template:

      The following keywords are supported in addition to the common template
      keywords and functions. See also :hg:`help templates`.

      :mergestatus: String. Character denoting merge conflicts, ``U`` or ``R``.
      :path:    String. Repository-absolute path of the file.

    Returns 0 on success, 1 if any files fail a resolve attempt.
    """

    opts = pycompat.byteskwargs(opts)
    confirm = ui.configbool(b'commands', b'resolve.confirm')
    flaglist = b'all mark unmark list no_status re_merge'.split()
    all, mark, unmark, show, nostatus, remerge = [opts.get(o) for o in flaglist]

    actioncount = len(list(filter(None, [show, mark, unmark, remerge])))
    if actioncount > 1:
        raise error.InputError(_(b"too many actions specified"))
    elif actioncount == 0 and ui.configbool(
        b'commands', b'resolve.explicit-re-merge'
    ):
        hint = _(b'use --mark, --unmark, --list or --re-merge')
        raise error.InputError(_(b'no action specified'), hint=hint)
    if pats and all:
        raise error.InputError(_(b"can't specify --all and patterns"))
    if not (all or pats or show or mark or unmark):
        raise error.InputError(
            _(b'no files or directories specified'),
            hint=b'use --all to re-merge all unresolved files',
        )

    if confirm:
        if all:
            if ui.promptchoice(
                _(b're-merge all unresolved files (yn)?$$ &Yes $$ &No')
            ):
                raise error.CanceledError(_(b'user quit'))
        if mark and not pats:
            if ui.promptchoice(
                _(
                    b'mark all unresolved files as resolved (yn)?'
                    b'$$ &Yes $$ &No'
                )
            ):
                raise error.CanceledError(_(b'user quit'))
        if unmark and not pats:
            if ui.promptchoice(
                _(
                    b'mark all resolved files as unresolved (yn)?'
                    b'$$ &Yes $$ &No'
                )
            ):
                raise error.CanceledError(_(b'user quit'))

    uipathfn = scmutil.getuipathfn(repo)

    if show:
        ui.pager(b'resolve')
        fm = ui.formatter(b'resolve', opts)
        ms = mergestatemod.mergestate.read(repo)
        wctx = repo[None]
        m = scmutil.match(wctx, pats, opts)

        # Labels and keys based on merge state.  Unresolved path conflicts show
        # as 'P'.  Resolved path conflicts show as 'R', the same as normal
        # resolved conflicts.
        mergestateinfo = {
            mergestatemod.MERGE_RECORD_UNRESOLVED: (
                b'resolve.unresolved',
                b'U',
            ),
            mergestatemod.MERGE_RECORD_RESOLVED: (b'resolve.resolved', b'R'),
            mergestatemod.MERGE_RECORD_UNRESOLVED_PATH: (
                b'resolve.unresolved',
                b'P',
            ),
            mergestatemod.MERGE_RECORD_RESOLVED_PATH: (
                b'resolve.resolved',
                b'R',
            ),
        }

        for f in ms:
            if not m(f):
                continue

            label, key = mergestateinfo[ms[f]]
            fm.startitem()
            fm.context(ctx=wctx)
            fm.condwrite(not nostatus, b'mergestatus', b'%s ', key, label=label)
            fm.data(path=f)
            fm.plain(b'%s\n' % uipathfn(f), label=label)
        fm.end()
        return 0

    with repo.wlock():
        ms = mergestatemod.mergestate.read(repo)

        if not (ms.active() or repo.dirstate.p2() != repo.nullid):
            raise error.StateError(
                _(b'resolve command not applicable when not merging')
            )

        wctx = repo[None]
        m = scmutil.match(wctx, pats, opts)
        ret = 0
        didwork = False

        hasconflictmarkers = []
        if mark:
            markcheck = ui.config(b'commands', b'resolve.mark-check')
            if markcheck not in [b'warn', b'abort']:
                # Treat all invalid / unrecognized values as 'none'.
                markcheck = False
        for f in ms:
            if not m(f):
                continue

            didwork = True

            # path conflicts must be resolved manually
            if ms[f] in (
                mergestatemod.MERGE_RECORD_UNRESOLVED_PATH,
                mergestatemod.MERGE_RECORD_RESOLVED_PATH,
            ):
                if mark:
                    ms.mark(f, mergestatemod.MERGE_RECORD_RESOLVED_PATH)
                elif unmark:
                    ms.mark(f, mergestatemod.MERGE_RECORD_UNRESOLVED_PATH)
                elif ms[f] == mergestatemod.MERGE_RECORD_UNRESOLVED_PATH:
                    ui.warn(
                        _(b'%s: path conflict must be resolved manually\n')
                        % uipathfn(f)
                    )
                continue

            if mark:
                if markcheck:
                    fdata = repo.wvfs.tryread(f)
                    if (
                        filemerge.hasconflictmarkers(fdata)
                        and ms[f] != mergestatemod.MERGE_RECORD_RESOLVED
                    ):
                        hasconflictmarkers.append(f)
                ms.mark(f, mergestatemod.MERGE_RECORD_RESOLVED)
            elif unmark:
                ms.mark(f, mergestatemod.MERGE_RECORD_UNRESOLVED)
            else:
                # backup pre-resolve (merge uses .orig for its own purposes)
                a = repo.wjoin(f)
                try:
                    util.copyfile(a, a + b".resolve")
                except FileNotFoundError:
                    pass

                try:
                    # preresolve file
                    overrides = {(b'ui', b'forcemerge'): opts.get(b'tool', b'')}
                    with ui.configoverride(overrides, b'resolve'):
                        r = ms.resolve(f, wctx)
                    if r:
                        ret = 1
                finally:
                    ms.commit()

                # replace filemerge's .orig file with our resolve file
                try:
                    util.rename(
                        a + b".resolve", scmutil.backuppath(ui, repo, f)
                    )
                except FileNotFoundError:
                    pass

        if hasconflictmarkers:
            ui.warn(
                _(
                    b'warning: the following files still have conflict '
                    b'markers:\n'
                )
                + b''.join(
                    b'  ' + uipathfn(f) + b'\n' for f in hasconflictmarkers
                )
            )
            if markcheck == b'abort' and not all and not pats:
                raise error.StateError(
                    _(b'conflict markers detected'),
                    hint=_(b'use --all to mark anyway'),
                )

        ms.commit()
        branchmerge = repo.dirstate.p2() != repo.nullid
        # resolve is not doing a parent change here, however, `record updates`
        # will call some dirstate API that at intended for parent changes call.
        # Ideally we would not need this and could implement a lighter version
        # of the recordupdateslogic that will not have to deal with the part
        # related to parent changes. However this would requires that:
        # - we are sure we passed around enough information at update/merge
        #   time to no longer needs it at `hg resolve time`
        # - we are sure we store that information well enough to be able to reuse it
        # - we are the necessary logic to reuse it right.
        #
        # All this should eventually happens, but in the mean time, we use this
        # context manager slightly out of the context it should be.
        with repo.dirstate.parentchange():
            mergestatemod.recordupdates(repo, ms.actions(), branchmerge, None)

        if not didwork and pats:
            hint = None
            if not any([p for p in pats if p.find(b':') >= 0]):
                pats = [b'path:%s' % p for p in pats]
                m = scmutil.match(wctx, pats, opts)
                for f in ms:
                    if not m(f):
                        continue

                    def flag(o):
                        if o == b're_merge':
                            return b'--re-merge '
                        return b'-%s ' % o[0:1]

                    flags = b''.join([flag(o) for o in flaglist if opts.get(o)])
                    hint = _(b"(try: hg resolve %s%s)\n") % (
                        flags,
                        b' '.join(pats),
                    )
                    break
            ui.warn(_(b"arguments do not match paths that need resolving\n"))
            if hint:
                ui.warn(hint)

    unresolvedf = ms.unresolvedcount()
    if not unresolvedf:
        ui.status(_(b'(no more unresolved files)\n'))
        cmdutil.checkafterresolved(repo)

    return ret


@command(
    b'revert',
    [
        (b'a', b'all', None, _(b'revert all changes when no arguments given')),
        (b'd', b'date', b'', _(b'tipmost revision matching date'), _(b'DATE')),
        (b'r', b'rev', b'', _(b'revert to the specified revision'), _(b'REV')),
        (b'C', b'no-backup', None, _(b'do not save backup copies of files')),
        (b'i', b'interactive', None, _(b'interactively select the changes')),
    ]
    + walkopts
    + dryrunopts,
    _(b'[OPTION]... [-r REV] [NAME]...'),
    helpcategory=command.CATEGORY_WORKING_DIRECTORY,
)
def revert(ui, repo, *pats, **opts):
    """restore files to their checkout state

    .. note::

       To check out earlier revisions, you should use :hg:`update REV`.
       To cancel an uncommitted merge (and lose your changes),
       use :hg:`merge --abort`.

    With no revision specified, revert the specified files or directories
    to the contents they had in the parent of the working directory.
    This restores the contents of files to an unmodified
    state and unschedules adds, removes, copies, and renames. If the
    working directory has two parents, you must explicitly specify a
    revision.

    Using the -r/--rev or -d/--date options, revert the given files or
    directories to their states as of a specific revision. Because
    revert does not change the working directory parents, this will
    cause these files to appear modified. This can be helpful to "back
    out" some or all of an earlier change. See :hg:`backout` for a
    related method.

    Modified files are saved with a .orig suffix before reverting.
    To disable these backups, use --no-backup. It is possible to store
    the backup files in a custom directory relative to the root of the
    repository by setting the ``ui.origbackuppath`` configuration
    option.

    See :hg:`help dates` for a list of formats valid for -d/--date.

    See :hg:`help backout` for a way to reverse the effect of an
    earlier changeset.

    Returns 0 on success.
    """

    opts = pycompat.byteskwargs(opts)
    if opts.get(b"date"):
        cmdutil.check_incompatible_arguments(opts, b'date', [b'rev'])
        opts[b"rev"] = cmdutil.finddate(ui, repo, opts[b"date"])

    parent, p2 = repo.dirstate.parents()
    if not opts.get(b'rev') and p2 != repo.nullid:
        # revert after merge is a trap for new users (issue2915)
        raise error.InputError(
            _(b'uncommitted merge with no revision specified'),
            hint=_(b"use 'hg update' or see 'hg help revert'"),
        )

    rev = opts.get(b'rev')
    if rev:
        repo = scmutil.unhidehashlikerevs(repo, [rev], b'nowarn')
    ctx = logcmdutil.revsingle(repo, rev)

    if not (
        pats
        or opts.get(b'include')
        or opts.get(b'exclude')
        or opts.get(b'all')
        or opts.get(b'interactive')
    ):
        msg = _(b"no files or directories specified")
        if p2 != repo.nullid:
            hint = _(
                b"uncommitted merge, use --all to discard all changes,"
                b" or 'hg update -C .' to abort the merge"
            )
            raise error.InputError(msg, hint=hint)
        dirty = any(repo.status())
        node = ctx.node()
        if node != parent:
            if dirty:
                hint = (
                    _(
                        b"uncommitted changes, use --all to discard all"
                        b" changes, or 'hg update %d' to update"
                    )
                    % ctx.rev()
                )
            else:
                hint = (
                    _(
                        b"use --all to revert all files,"
                        b" or 'hg update %d' to update"
                    )
                    % ctx.rev()
                )
        elif dirty:
            hint = _(b"uncommitted changes, use --all to discard all changes")
        else:
            hint = _(b"use --all to revert all files")
        raise error.InputError(msg, hint=hint)

    return cmdutil.revert(ui, repo, ctx, *pats, **pycompat.strkwargs(opts))


@command(
    b'rollback',
    dryrunopts + [(b'f', b'force', False, _(b'ignore safety measures'))],
    helpcategory=command.CATEGORY_MAINTENANCE,
)
def rollback(ui, repo, **opts):
    """roll back the last transaction (DANGEROUS) (DEPRECATED)

    Please use :hg:`commit --amend` instead of rollback to correct
    mistakes in the last commit.

    This command should be used with care. There is only one level of
    rollback, and there is no way to undo a rollback. It will also
    restore the dirstate at the time of the last transaction, losing
    any dirstate changes since that time. This command does not alter
    the working directory.

    Transactions are used to encapsulate the effects of all commands
    that create new changesets or propagate existing changesets into a
    repository.

    .. container:: verbose

      For example, the following commands are transactional, and their
      effects can be rolled back:

      - commit
      - import
      - pull
      - push (with this repository as the destination)
      - unbundle

      To avoid permanent data loss, rollback will refuse to rollback a
      commit transaction if it isn't checked out. Use --force to
      override this protection.

      The rollback command can be entirely disabled by setting the
      ``ui.rollback`` configuration setting to false. If you're here
      because you want to use rollback and it's disabled, you can
      re-enable the command by setting ``ui.rollback`` to true.

    This command is not intended for use on public repositories. Once
    changes are visible for pull by other users, rolling a transaction
    back locally is ineffective (someone else may already have pulled
    the changes). Furthermore, a race is possible with readers of the
    repository; for example an in-progress pull from the repository
    may fail if a rollback is performed.

    Returns 0 on success, 1 if no rollback data is available.
    """
    if not ui.configbool(b'ui', b'rollback'):
        raise error.Abort(
            _(b'rollback is disabled because it is unsafe'),
            hint=b'see `hg help -v rollback` for information',
        )
    return repo.rollback(dryrun=opts.get('dry_run'), force=opts.get('force'))


@command(
    b'root',
    [] + formatteropts,
    intents={INTENT_READONLY},
    helpcategory=command.CATEGORY_WORKING_DIRECTORY,
)
def root(ui, repo, **opts):
    """print the root (top) of the current working directory

    Print the root directory of the current repository.

    .. container:: verbose

      Template:

      The following keywords are supported in addition to the common template
      keywords and functions. See also :hg:`help templates`.

      :hgpath:    String. Path to the .hg directory.
      :storepath: String. Path to the directory holding versioned data.

    Returns 0 on success.
    """
    opts = pycompat.byteskwargs(opts)
    with ui.formatter(b'root', opts) as fm:
        fm.startitem()
        fm.write(b'reporoot', b'%s\n', repo.root)
        fm.data(hgpath=repo.path, storepath=repo.spath)


@command(
    b'serve',
    [
        (
            b'A',
            b'accesslog',
            b'',
            _(b'name of access log file to write to'),
            _(b'FILE'),
        ),
        (b'd', b'daemon', None, _(b'run server in background')),
        (b'', b'daemon-postexec', [], _(b'used internally by daemon mode')),
        (
            b'E',
            b'errorlog',
            b'',
            _(b'name of error log file to write to'),
            _(b'FILE'),
        ),
        # use string type, then we can check if something was passed
        (
            b'p',
            b'port',
            b'',
            _(b'port to listen on (default: 8000)'),
            _(b'PORT'),
        ),
        (
            b'a',
            b'address',
            b'',
            _(b'address to listen on (default: all interfaces)'),
            _(b'ADDR'),
        ),
        (
            b'',
            b'prefix',
            b'',
            _(b'prefix path to serve from (default: server root)'),
            _(b'PREFIX'),
        ),
        (
            b'n',
            b'name',
            b'',
            _(b'name to show in web pages (default: working directory)'),
            _(b'NAME'),
        ),
        (
            b'',
            b'web-conf',
            b'',
            _(b"name of the hgweb config file (see 'hg help hgweb')"),
            _(b'FILE'),
        ),
        (
            b'',
            b'webdir-conf',
            b'',
            _(b'name of the hgweb config file (DEPRECATED)'),
            _(b'FILE'),
        ),
        (
            b'',
            b'pid-file',
            b'',
            _(b'name of file to write process ID to'),
            _(b'FILE'),
        ),
        (b'', b'stdio', None, _(b'for remote clients (ADVANCED)')),
        (
            b'',
            b'cmdserver',
            b'',
            _(b'for remote clients (ADVANCED)'),
            _(b'MODE'),
        ),
        (b't', b'templates', b'', _(b'web templates to use'), _(b'TEMPLATE')),
        (b'', b'style', b'', _(b'template style to use'), _(b'STYLE')),
        (b'6', b'ipv6', None, _(b'use IPv6 in addition to IPv4')),
        (b'', b'certificate', b'', _(b'SSL certificate file'), _(b'FILE')),
        (b'', b'print-url', None, _(b'start and print only the URL')),
    ]
    + subrepoopts,
    _(b'[OPTION]...'),
    helpcategory=command.CATEGORY_REMOTE_REPO_MANAGEMENT,
    helpbasic=True,
    optionalrepo=True,
)
def serve(ui, repo, **opts):
    """start stand-alone webserver

    Start a local HTTP repository browser and pull server. You can use
    this for ad-hoc sharing and browsing of repositories. It is
    recommended to use a real web server to serve a repository for
    longer periods of time.

    Please note that the server does not implement access control.
    This means that, by default, anybody can read from the server and
    nobody can write to it by default. Set the ``web.allow-push``
    option to ``*`` to allow everybody to push to the server. You
    should use a real web server if you need to authenticate users.

    By default, the server logs accesses to stdout and errors to
    stderr. Use the -A/--accesslog and -E/--errorlog options to log to
    files.

    To have the server choose a free port number to listen on, specify
    a port number of 0; in this case, the server will print the port
    number it uses.

    Returns 0 on success.
    """

    cmdutil.check_incompatible_arguments(opts, 'stdio', ['cmdserver'])
    opts = pycompat.byteskwargs(opts)
    if opts[b"print_url"] and ui.verbose:
        raise error.InputError(_(b"cannot use --print-url with --verbose"))

    if opts[b"stdio"]:
        if repo is None:
            raise error.RepoError(
                _(b"there is no Mercurial repository here (.hg not found)")
            )
        s = wireprotoserver.sshserver(ui, repo)
        s.serve_forever()
        return

    service = server.createservice(ui, repo, opts)
    return server.runservice(opts, initfn=service.init, runfn=service.run)


@command(
    b'shelve',
    [
        (
            b'A',
            b'addremove',
            None,
            _(b'mark new/missing files as added/removed before shelving'),
        ),
        (b'u', b'unknown', None, _(b'store unknown files in the shelve')),
        (b'', b'cleanup', None, _(b'delete all shelved changes')),
        (
            b'',
            b'date',
            b'',
            _(b'shelve with the specified commit date'),
            _(b'DATE'),
        ),
        (b'd', b'delete', None, _(b'delete the named shelved change(s)')),
        (b'e', b'edit', False, _(b'invoke editor on commit messages')),
        (
            b'k',
            b'keep',
            False,
            _(b'shelve, but keep changes in the working directory'),
        ),
        (b'l', b'list', None, _(b'list current shelves')),
        (b'm', b'message', b'', _(b'use text as shelve message'), _(b'TEXT')),
        (
            b'n',
            b'name',
            b'',
            _(b'use the given name for the shelved commit'),
            _(b'NAME'),
        ),
        (
            b'p',
            b'patch',
            None,
            _(
                b'output patches for changes (provide the names of the shelved '
                b'changes as positional arguments)'
            ),
        ),
        (b'i', b'interactive', None, _(b'interactive mode')),
        (
            b'',
            b'stat',
            None,
            _(
                b'output diffstat-style summary of changes (provide the names of '
                b'the shelved changes as positional arguments)'
            ),
        ),
    ]
    + cmdutil.walkopts,
    _(b'hg shelve [OPTION]... [FILE]...'),
    helpcategory=command.CATEGORY_WORKING_DIRECTORY,
)
def shelve(ui, repo, *pats, **opts):
    """save and set aside changes from the working directory

    Shelving takes files that "hg status" reports as not clean, saves
    the modifications to a bundle (a shelved change), and reverts the
    files so that their state in the working directory becomes clean.

    To restore these changes to the working directory, using "hg
    unshelve"; this will work even if you switch to a different
    commit.

    When no files are specified, "hg shelve" saves all not-clean
    files. If specific files or directories are named, only changes to
    those files are shelved.

    In bare shelve (when no files are specified, without interactive,
    include and exclude option), shelving remembers information if the
    working directory was on newly created branch, in other words working
    directory was on different branch than its first parent. In this
    situation unshelving restores branch information to the working directory.

    Each shelved change has a name that makes it easier to find later.
    The name of a shelved change defaults to being based on the active
    bookmark, or if there is no active bookmark, the current named
    branch.  To specify a different name, use ``--name``.

    To see a list of existing shelved changes, use the ``--list``
    option. For each shelved change, this will print its name, age,
    and description; use ``--patch`` or ``--stat`` for more details.

    To delete specific shelved changes, use ``--delete``. To delete
    all shelved changes, use ``--cleanup``.
    """
    opts = pycompat.byteskwargs(opts)
    allowables = [
        (b'addremove', {b'create'}),  # 'create' is pseudo action
        (b'unknown', {b'create'}),
        (b'cleanup', {b'cleanup'}),
        #       ('date', {'create'}), # ignored for passing '--date "0 0"' in tests
        (b'delete', {b'delete'}),
        (b'edit', {b'create'}),
        (b'keep', {b'create'}),
        (b'list', {b'list'}),
        (b'message', {b'create'}),
        (b'name', {b'create'}),
        (b'patch', {b'patch', b'list'}),
        (b'stat', {b'stat', b'list'}),
    ]

    def checkopt(opt):
        if opts.get(opt):
            for i, allowable in allowables:
                if opts[i] and opt not in allowable:
                    raise error.InputError(
                        _(
                            b"options '--%s' and '--%s' may not be "
                            b"used together"
                        )
                        % (opt, i)
                    )
            return True

    if checkopt(b'cleanup'):
        if pats:
            raise error.InputError(
                _(b"cannot specify names when using '--cleanup'")
            )
        return shelvemod.cleanupcmd(ui, repo)
    elif checkopt(b'delete'):
        return shelvemod.deletecmd(ui, repo, pats)
    elif checkopt(b'list'):
        return shelvemod.listcmd(ui, repo, pats, opts)
    elif checkopt(b'patch') or checkopt(b'stat'):
        return shelvemod.patchcmds(ui, repo, pats, opts)
    else:
        return shelvemod.createcmd(ui, repo, pats, opts)


_NOTTERSE = b'nothing'


@command(
    b'status|st',
    [
        (b'A', b'all', None, _(b'show status of all files')),
        (b'm', b'modified', None, _(b'show only modified files')),
        (b'a', b'added', None, _(b'show only added files')),
        (b'r', b'removed', None, _(b'show only removed files')),
        (b'd', b'deleted', None, _(b'show only missing files')),
        (b'c', b'clean', None, _(b'show only files without changes')),
        (b'u', b'unknown', None, _(b'show only unknown (not tracked) files')),
        (b'i', b'ignored', None, _(b'show only ignored files')),
        (b'n', b'no-status', None, _(b'hide status prefix')),
        (b't', b'terse', _NOTTERSE, _(b'show the terse output (EXPERIMENTAL)')),
        (
            b'C',
            b'copies',
            None,
            _(b'show source of copied files (DEFAULT: ui.statuscopies)'),
        ),
        (
            b'0',
            b'print0',
            None,
            _(b'end filenames with NUL, for use with xargs'),
        ),
        (b'', b'rev', [], _(b'show difference from revision'), _(b'REV')),
        (
            b'',
            b'change',
            b'',
            _(b'list the changed files of a revision'),
            _(b'REV'),
        ),
    ]
    + walkopts
    + subrepoopts
    + formatteropts,
    _(b'[OPTION]... [FILE]...'),
    helpcategory=command.CATEGORY_WORKING_DIRECTORY,
    helpbasic=True,
    inferrepo=True,
    intents={INTENT_READONLY},
)
def status(ui, repo, *pats, **opts):
    """show changed files in the working directory

    Show status of files in the repository. If names are given, only
    files that match are shown. Files that are clean or ignored or
    the source of a copy/move operation, are not listed unless
    -c/--clean, -i/--ignored, -C/--copies or -A/--all are given.
    Unless options described with "show only ..." are given, the
    options -mardu are used.

    Option -q/--quiet hides untracked (unknown and ignored) files
    unless explicitly requested with -u/--unknown or -i/--ignored.

    .. note::

       :hg:`status` may appear to disagree with diff if permissions have
       changed or a merge has occurred. The standard diff format does
       not report permission changes and diff only reports changes
       relative to one merge parent.

    If one revision is given, it is used as the base revision.
    If two revisions are given, the differences between them are
    shown. The --change option can also be used as a shortcut to list
    the changed files of a revision from its first parent.

    The codes used to show the status of files are::

      M = modified
      A = added
      R = removed
      C = clean
      ! = missing (deleted by non-hg command, but still tracked)
