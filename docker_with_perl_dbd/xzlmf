
=back

=item EXPORTS

=item KNOWN BUGS

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=item LICENCE

=item VERSION

=item DATE

=item HISTORY

=back

=head2 Net::Ping - check a remote host for reachability

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Functions

Net::Ping->new([proto, timeout, bytes, device, tos, ttl, family,	   
	   host, port, bind, gateway, retrans, pingstring,		   
     source_verify econnrefused dontfrag		      
IPV6_USE_MIN_MTU IPV6_RECVPATHMTU]) X<new>, $p->ping($host [, $timeout [,
$family]]); X<ping>, $p->source_verify( { 0 | 1 } ); X<source_verify>,
$p->service_check( { 0 | 1 } ); X<service_check>, $p->tcp_service_check( {
0 | 1 } ); X<tcp_service_check>, $p->hires( { 0 | 1 } ); X<hires>, $p->time
X<time>, $p->socket_blocking_mode( $fh, $mode ); X<socket_blocking_mode>,
$p->IPV6_USE_MIN_MTU X<IPV6_USE_MIN_MTU>, $p->IPV6_RECVPATHMTU
X<IPV6_RECVPATHMTU>, $p->IPV6_HOPLIMIT X<IPV6_HOPLIMIT>, $p->IPV6_REACHCONF
I<NYI> X<IPV6_REACHCONF>, $p->bind($local_addr); X<bind>,
$p->message_type([$ping_type]); X<message_type>, $p->open($host); X<open>,
$p->ack( [ $host ] ); X<ack>, $p->nack( $failed_ack_host ); X<nack>,
$p->ack_unfork($host) X<ack_unfork>, $p->ping_icmp([$host, $timeout,
$family]) X<ping_icmp>, $p->ping_icmpv6([$host, $timeout, $family])
X<ping_icmpv6>, $p->ping_stream([$host, $timeout, $family]) X<ping_stream>,
$p->ping_syn([$host, $ip, $start_time, $stop_time]) X<ping_syn>,
$p->ping_syn_fork([$host, $timeout, $family]) X<ping_syn_fork>,
$p->ping_tcp([$host, $timeout, $family]) X<ping_tcp>, $p->ping_udp([$host,
$timeout, $family]) X<ping_udp>, $p->ping_external([$host, $timeout,
$family]) X<ping_external>, $p->tcp_connect([$ip, $timeout])
X<tcp_connect>, $p->tcp_echo([$ip, $timeout, $pingstring]) X<tcp_echo>,
$p->close(); X<close>, $p->port_number([$port_number]) X<port_number>,
$p->mselect X<mselect>, $p->ntop X<ntop>, $p->checksum($msg) X<checksum>,
$p->icmp_result X<icmp_result>, pingecho($host [, $timeout]); X<pingecho>,
wakeonlan($mac, [$host, [$port]]) X<wakeonlan>

=back

=item NOTES

=item INSTALL

=item BUGS

=item AUTHORS

=item COPYRIGHT

=back

=head2 Net::SMTP - Simple Mail Transfer Protocol Client

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Class Methods

C<new([$host][, %options])>

=back

=item Object Methods

C<banner()>, C<domain()>, C<hello($domain)>, C<host()>, C<etrn($domain)>,
C<starttls(%sslargs)>, C<auth($username, $password)>, C<auth($sasl)>,
C<mail($address[, %options])>, C<send($address)>,
C<send_or_mail($address)>, C<send_and_mail($address)>, C<reset()>,
C<recipient($address[, $address[, ...]][, %options])>, C<to($address[,
$address[, ...]])>, C<cc($address[, $address[, ...]])>, C<bcc($address[,
$address[, ...]])>, C<data([$data])>, C<bdat($data)>, C<bdatlast($data)>,
C<expand($address)>, C<verify($address)>, C<help([$subject])>, C<quit()>,
C<can_inet6()>, C<can_ssl()>

=over 4

=item Addresses

=back

=item EXAMPLES

=item EXPORTS

=item KNOWN BUGS

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=item LICENCE

=item VERSION

=item DATE

=item HISTORY

=back

=head2 Net::Time - time and daytime network client interface

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Functions

C<inet_time([$host[, $protocol[, $timeout]]])>, C<inet_daytime([$host[,
$protocol[, $timeout]]])>

=back

=item EXPORTS

Default Exports, Optional Exports, Export Tags

=item KNOWN BUGS

=item AUTHOR

=item COPYRIGHT

=item LICENCE

=item VERSION

=item DATE

=item HISTORY

=back

=head2 Net::hostent - by-name interface to Perl's built-in gethost*()
functions

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item EXAMPLES

=item NOTE

=item AUTHOR

=back

=head2 Net::libnetFAQ, libnetFAQ - libnet Frequently Asked Questions

=over 4

=item DESCRIPTION

=over 4

=item Where to get this document

=item How to contribute to this document

=back

=item Author and Copyright Information

=over 4

=item Disclaimer

=back

=item Obtaining and installing libnet

=over 4

=item What is libnet ?

=item Which version of perl do I need ?

=item What other modules do I need ?

=item What machines support libnet ?

=item Where can I get the latest libnet release

=back

=item Using Net::FTP

=over 4

=item How do I download files from an FTP server ?

=item How do I transfer files in binary mode ?

=item How can I get the size of a file on a remote FTP server ?

=item How can I get the modification time of a file on a remote FTP server
?

=item How can I change the permissions of a file on a remote server ?

=item Can I do a reget operation like the ftp command ?

=item How do I get a directory listing from an FTP server ?

=item Changing directory to "" does not fail ?

=item I am behind a SOCKS firewall, but the Firewall option does not work ?

=item I am behind an FTP proxy firewall, but cannot access machines outside
?

=item My ftp proxy firewall does not listen on port 21

=item Is it possible to change the file permissions of a file on an FTP
server ?

=item I have seen scripts call a method message, but cannot find it
documented ?

=item Why does Net::FTP not implement mput and mget methods

=back

=item Using Net::SMTP

=over 4

=item Why can't the part of an Email address after the @ be used as the
hostname ?

=item Why does Net::SMTP not do DNS MX lookups ?

=item The verify method always returns true ?

=back

=item Debugging scripts

=over 4

=item How can I debug my scripts that use Net::* modules ?

=back

=item AUTHOR AND COPYRIGHT

=back

=head2 Net::netent - by-name interface to Perl's built-in getnet*()
functions

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item EXAMPLES

=item NOTE

=item AUTHOR

=back

=head2 Net::protoent - by-name interface to Perl's built-in getproto*()
functions

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item NOTE

=item AUTHOR

=back

=head2 Net::servent - by-name interface to Perl's built-in getserv*()
functions

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item EXAMPLES

=item NOTE

=item AUTHOR

=back

=head2 O - Generic interface to Perl Compiler backends

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item CONVENTIONS

=item IMPLEMENTATION

=item BUGS

=item AUTHOR

=back

=head2 Opcode - Disable named opcodes when compiling perl code

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item NOTE

=item WARNING

=item Operator Names and Operator Lists

an operator name (opname), an operator tag name (optag), a negated opname
or optag, an operator set (opset)

=item Opcode Functions

opcodes, opset (OP, ...), opset_to_ops (OPSET), opset_to_hex (OPSET),
full_opset, empty_opset, invert_opset (OPSET), verify_opset (OPSET, ...),
define_optag (OPTAG, OPSET), opmask_add (OPSET), opmask, opdesc (OP, ...),
opdump (PAT)

=item Manipulating Opsets

=item TO DO (maybe)

=back

=over 4

=item Predefined Opcode Tags

:base_core, :base_mem, :base_loop, :base_io, :base_orig, :base_math,
:base_thread, :default, :filesys_read, :sys_db, :browse, :filesys_open,
:filesys_write, :subprocess, :ownprocess, :others, :load,
:still_to_be_decided, :dangerous

=item SEE ALSO

=item AUTHORS

=back

=head2 POSIX - Perl interface to IEEE Std 1003.1

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item CAVEATS

=item FUNCTIONS

C<_exit>, C<abort>, C<abs>, C<access>, C<acos>, C<acosh>, C<alarm>,
C<asctime>, C<asin>, C<asinh>, C<assert>, C<atan>, C<atanh>, C<atan2>,
C<atexit>, C<atof>, C<atoi>, C<atol>, C<bsearch>, C<calloc>, C<cbrt>,
C<ceil>, C<chdir>, C<chmod>, C<chown>, C<clearerr>, C<clock>, C<close>,
C<closedir>, C<cos>, C<cosh>, C<copysign>, C<creat>, C<ctermid>, C<ctime>,
C<cuserid> [POSIX.1-1988], C<difftime>, C<div>, C<dup>, C<dup2>, C<erf>,
C<erfc>, C<errno>, C<execl>, C<execle>, C<execlp>, C<execv>, C<execve>,
C<execvp>, C<exit>, C<exp>, C<expm1>, C<fabs>, C<fcntl>, C<fdopen>,
C<feof>, C<ferror>, C<fflush>, C<fgetc>, C<fgetpos>, C<fgets>, C<fileno>,
C<floor>, C<fdim>, C<fegetround>, C<fesetround>, C<fma>, C<fmax>, C<fmin>,
C<fmod>, C<fopen>, C<fork>, C<fpathconf>, C<fpclassify>, C<fprintf>,
C<fputc>, C<fputs>, C<fread>, C<free>, C<freopen>, C<frexp>, C<fscanf>,
C<fseek>, C<fsetpos>, C<fstat>, C<fsync>, C<ftell>, C<fwrite>, C<getc>,
C<getchar>, C<getcwd>, C<getegid>, C<getenv>, C<geteuid>, C<getgid>,
C<getgrgid>, C<getgrnam>, C<getgroups>, C<getlogin>, C<getpayload>,
C<getpgrp>, C<getpid>, C<getppid>, C<getpwnam>, C<getpwuid>, C<gets>,
C<getuid>, C<gmtime>, C<hypot>, C<ilogb>, C<Inf>, C<isalnum>, C<isalpha>,
C<isatty>, C<iscntrl>, C<isdigit>, C<isfinite>, C<isgraph>, C<isgreater>,
C<isinf>, C<islower>, C<isnan>, C<isnormal>, C<isprint>, C<ispunct>,
C<issignaling>, C<isspace>, C<isupper>, C<isxdigit>, C<j0>, C<j1>, C<jn>,
C<y0>, C<y1>, C<yn>, C<kill>, C<labs>, C<lchown>, C<ldexp>, C<ldiv>,
C<lgamma>, C<log1p>, C<log2>, C<logb>, C<link>, C<localeconv>,
C<localtime>, C<log>, C<log10>, C<longjmp>, C<lseek>, C<lrint>, C<lround>,
C<malloc>, C<mblen>, C<mbtowc>, C<memchr>, C<memcmp>, C<memcpy>,
C<memmove>, C<memset>, C<mkdir>, C<mkfifo>, C<mktime>, C<modf>, C<NaN>,
C<nan>, C<nearbyint>, C<nextafter>, C<nexttoward>, C<nice>, C<offsetof>,
C<open>, C<opendir>, C<pathconf>, C<pause>, C<perror>, C<pipe>, C<pow>,
C<printf>, C<putc>, C<putchar>, C<puts>, C<qsort>, C<raise>, C<rand>,
C<read>, C<readdir>, C<realloc>, C<remainder>, C<remove>, C<remquo>,
C<rename>, C<rewind>, C<rewinddir>, C<rint>, C<rmdir>, C<round>, C<scalbn>,
C<scanf>, C<setgid>, C<setjmp>, C<setlocale>, C<setpayload>,
C<setpayloadsig>, C<setpgid>, C<setsid>, C<setuid>, C<sigaction>,
C<siglongjmp>, C<signbit>, C<sigpending>, C<sigprocmask>, C<sigsetjmp>,
C<sigsuspend>, C<sin>, C<sinh>, C<sleep>, C<sprintf>, C<sqrt>, C<srand>,
C<sscanf>, C<stat>, C<strcat>, C<strchr>, C<strcmp>, C<strcoll>, C<strcpy>,
C<strcspn>, C<strerror>, C<strftime>, C<strlen>, C<strncat>, C<strncmp>,
C<strncpy>, C<strpbrk>, C<strrchr>, C<strspn>, C<strstr>, C<strtod>,
C<strtok>, C<strtol>, C<strtold>, C<strtoul>, C<strxfrm>, C<sysconf>,
C<system>, C<tan>, C<tanh>, C<tcdrain>, C<tcflow>, C<tcflush>,
C<tcgetpgrp>, C<tcsendbreak>, C<tcsetpgrp>, C<tgamma>, C<time>, C<times>,
C<tmpfile>, C<tmpnam>, C<tolower>, C<toupper>, C<trunc>, C<ttyname>,
C<tzname>, C<tzset>, C<umask>, C<uname>, C<ungetc>, C<unlink>, C<utime>,
C<vfprintf>, C<vprintf>, C<vsprintf>, C<wait>, C<waitpid>, C<wctomb>,
C<write>

=item CLASSES

=over 4

=item C<POSIX::SigAction>

C<new>, C<handler>, C<mask>, C<flags>, C<safe>

=item C<POSIX::SigRt>

C<%SIGRT>, C<SIGRTMIN>, C<SIGRTMAX>

=item C<POSIX::SigSet>

C<new>, C<addset>, C<delset>, C<emptyset>, C<fillset>, C<ismember>

=item C<POSIX::Termios>

C<new>, C<getattr>, C<getcc>, C<getcflag>, C<getiflag>, C<getispeed>,
C<getlflag>, C<getoflag>, C<getospeed>, C<setattr>, C<setcc>, C<setcflag>,
C<setiflag>, C<setispeed>, C<setlflag>, C<setoflag>, C<setospeed>, Baud
rate values, Terminal interface values, C<c_cc> field values, C<c_cflag>
field values, C<c_iflag> field values, C<c_lflag> field values, C<c_oflag>
field values

=back

=item PATHNAME CONSTANTS

Constants

=item POSIX CONSTANTS

Constants

=item RESOURCE CONSTANTS

Constants

=item SYSTEM CONFIGURATION

Constants

=item ERRNO

Constants

=item FCNTL

Constants

=item FLOAT

Constants

=item FLOATING-POINT ENVIRONMENT

Constants

=item LIMITS

Constants

=item LOCALE

Constants

=item MATH

Constants

=item SIGNAL

Constants

=item STAT

Constants, Macros

=item STDLIB

Constants

=item STDIO

Constants

=item TIME

Constants

=item UNISTD

Constants

=item WAIT

Constants, C<WNOHANG>, C<WUNTRACED>, Macros, C<WIFEXITED>, C<WEXITSTATUS>,
C<WIFSIGNALED>, C<WTERMSIG>, C<WIFSTOPPED>, C<WSTOPSIG>

=item WINSOCK

Constants

=back

=head2 Params::Check - A generic input parsing/checking mechanism.

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item Template

default, required, strict_type, defined, no_override, store, allow

=item Functions

=over 4

=item check( \%tmpl, \%args, [$verbose] );

Template, Arguments, Verbose

=back

=back

=over 4

=item allow( $test_me, \@criteria );

string, regexp, subroutine, array ref

=back

=over 4

=item last_error()

=back

=over 4

=item Global Variables

=over 4

=item $Params::Check::VERBOSE

=item $Params::Check::STRICT_TYPE

=item $Params::Check::ALLOW_UNKNOWN

=item $Params::Check::STRIP_LEADING_DASHES

=item $Params::Check::NO_DUPLICATES

=item $Params::Check::PRESERVE_CASE

=item $Params::Check::ONLY_ALLOW_DEFINED

=item $Params::Check::SANITY_CHECK_TEMPLATE

=item $Params::Check::WARNINGS_FATAL

=item $Params::Check::CALLER_DEPTH

=back

=item Acknowledgements

=item BUG REPORTS

=item AUTHOR

=item COPYRIGHT

=back

=head2 Parse::CPAN::Meta - Parse META.yml and META.json CPAN metadata files

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item load_file

=item load_yaml_string

=item load_json_string

=item load_string

=item yaml_backend

=item json_backend

=item json_decoder

=back

=item FUNCTIONS

=over 4

=item Load

=item LoadFile

=back

=item ENVIRONMENT

=over 4

=item CPAN_META_JSON_DECODER

=item CPAN_META_JSON_BACKEND

=item PERL_JSON_BACKEND

=item PERL_YAML_BACKEND

=back

=item AUTHORS

=item COPYRIGHT AND LICENSE

=back

=head2 Perl::OSType - Map Perl operating system names to generic types

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

=item USAGE

=over 4

=item os_type()

=item is_os_type()

=back

=item SEE ALSO

=item SUPPORT

=over 4

=item Bugs / Feature Requests

=item Source Code

=back

=item AUTHOR

=item CONTRIBUTORS

=item COPYRIGHT AND LICENSE

=back

=head2 PerlIO - On demand loader for PerlIO layers and root of PerlIO::*
name space

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Layers

:unix, :stdio, :perlio, :crlf, :utf8, :bytes, :raw, :pop

=item Custom Layers

:encoding, :mmap, :via, :scalar

=item Alternatives to raw

=item Defaults and how to override them

=item Querying the layers of filehandles

=back

=item AUTHOR

=item SEE ALSO

=back

=head2 PerlIO::encoding - encoding layer

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item SEE ALSO

=back

=head2 PerlIO::mmap - Memory mapped IO

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item IMPLEMENTATION NOTE

=back

=head2 PerlIO::scalar - in-memory IO, scalar IO

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item IMPLEMENTATION NOTE

=back

=head2 PerlIO::via - Helper class for PerlIO layers implemented in perl

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item EXPECTED METHODS

$class->PUSHED([$mode,[$fh]]), $obj->POPPED([$fh]),
$obj->UTF8($belowFlag,[$fh]), $obj->OPEN($path,$mode,[$fh]),
$obj->BINMODE([$fh]), $obj->FDOPEN($fd,[$fh]),
$obj->SYSOPEN($path,$imode,$perm,[$fh]), $obj->FILENO($fh),
$obj->READ($buffer,$len,$fh), $obj->WRITE($buffer,$fh), $obj->FILL($fh),
$obj->CLOSE($fh), $obj->SEEK($posn,$whence,$fh), $obj->TELL($fh),
$obj->UNREAD($buffer,$fh), $obj->FLUSH($fh), $obj->SETLINEBUF($fh),
$obj->CLEARERR($fh), $obj->ERROR($fh), $obj->EOF($fh)

=item EXAMPLES

=over 4

=item Example - a Hexadecimal Handle

=back

=back

=head2 PerlIO::via::QuotedPrint - PerlIO layer for quoted-printable strings

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item EXPORTS

=item KNOWN BUGS

=item FEEDBACK

=item SEE ALSO

=item ACKNOWLEDGEMENTS

=item AVAILABILITY

=item INSTALLATION

=item AUTHOR

=item COPYRIGHT

=item LICENCE

=item VERSION

=item DATE

=item HISTORY

=back

=head2 Pod::Checker - check pod documents for syntax errors

=over 4

=item SYNOPSIS

=item OPTIONS/ARGUMENTS

=over 4

=item podchecker()

B<-warnings> =E<gt> I<val>, B<-quiet> =E<gt> I<val>

=back

=item DESCRIPTION

=item DIAGNOSTICS

=over 4

=item Errors

empty =headn, =over on line I<N> without closing =back, You forgot a
'=back' before '=headI<N>', =over is the last thing in the document?!,
'=item' outside of any '=over', =back without =over, Can't have a 0 in
=over I<N>, =over should be: '=over' or '=over positive_number', =begin
I<TARGET> without matching =end I<TARGET>, =begin without a target?, =end
I<TARGET> without matching =begin, '=end' without a target?, '=end
I<TARGET>' is invalid, =end I<CONTENT> doesn't match =begin I<TARGET>, =for
without a target?, unresolved internal link I<NAME>, Unknown directive:
I<CMD>, Deleting unknown formatting code I<SEQ>, Unterminated
I<SEQ>E<lt>E<gt> sequence, An EE<lt>...E<gt> surrounding strange content,
An empty EE<lt>E<gt>, An empty C<< LE<lt>E<gt> >>, An empty XE<lt>E<gt>,
Spurious text after =pod / =cut, =back doesn't take any parameters, but you
said =back I<ARGUMENT>, =pod directives shouldn't be over one line long! 
Ignoring all I<N> lines of content, =cut found outside a pod block, Invalid
=encoding syntax: I<CONTENT>

=item Warnings

nested commands I<CMD>E<lt>...I<CMD>E<lt>...E<gt>...E<gt>, multiple
occurrences (I<N>) of link target I<name>, line containing nothing but
whitespace in paragraph, =item has no contents, You can't have =items (as
at line I<N>) unless the first thing after the =over is an =item, Expected
'=item I<EXPECTED VALUE>', Expected '=item *', Possible =item type
mismatch: 'I<x>' found leading a supposed definition =item, You have '=item
x' instead of the expected '=item I<N>', Unknown E content in
EE<lt>I<CONTENT>E<gt>, empty =over/=back block, empty section in previous
paragraph, Verbatim paragraph in NAME section, =headI<n> without preceding
higher level, A non-empty ZE<lt>E<gt>

=item Hyperlinks

ignoring leading/trailing whitespace in link, alternative text/node '%s'
contains non-escaped | or /

=back

=item RETURN VALUE

=item EXAMPLES

=item SCRIPTS

=item INTERFACE

end_B, end_C, end_Document, end_F, end_I, end_L, end_Para, end_S, end_X,
end_fcode, end_for, end_head, end_head1, end_head2, end_head3, end_head4,
end_item, end_item_bullet, end_item_number, end_item_text,
handle_pod_and_cut, handle_text, handle_whiteline, hyperlink, scream,
start_B, start_C, start_Data, start_F, start_I, start_L, start_Para,
start_S, start_Verbatim, start_X, start_fcode, start_for, start_head,
start_head1, start_head2, start_head3, start_head4, start_item_bullet,
start_item_number, start_item_text, start_over, start_over_block,
start_over_bullet, start_over_empty, start_over_number, start_over_text,
whine

=back

C<Pod::Checker-E<gt>new( %options )>

C<$checker-E<gt>poderror( @args )>, C<$checker-E<gt>poderror( {%opts},
@args )>

C<$checker-E<gt>num_errors()>

C<$checker-E<gt>num_warnings()>

C<$checker-E<gt>name()>

C<$checker-E<gt>node()>

C<$checker-E<gt>idx()>

C<$checker-E<gt>hyperlinks()>

line()

type()

page()

node()

=over 4

=item AUTHOR

=back

=head2 Pod::Escapes - for resolving Pod EE<lt>...E<gt> sequences

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item GOODIES

e2char($e_content), e2charnum($e_content), $Name2character{I<name>},
$Name2character_number{I<name>}, $Latin1Code_to_fallback{I<integer>},
$Latin1Char_to_fallback{I<character>}, $Code2USASCII{I<integer>}

=item CAVEATS

