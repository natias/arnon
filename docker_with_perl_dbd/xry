        '''Set of files in this manifest that are not in the other'''
        if match is not None:
            match = matchmod.badmatch(match, lambda path, msg: None)
            sm2 = set(m2.walk(match))
            return {f for f in self.walk(match) if f not in sm2}
        return {f for f in self if f not in m2}

    @propertycache
    def _dirs(self):
        return pathutil.dirs(self)

    def dirs(self):
        return self._dirs

    def hasdir(self, dir):
        return dir in self._dirs

    def _filesfastpath(self, match):
        """Checks whether we can correctly and quickly iterate over matcher
        files instead of over manifest files."""
        files = match.files()
        return len(files) < 100 and (
            match.isexact()
            or (match.prefix() and all(fn in self for fn in files))
        )

    def walk(self, match):
        """Generates matching file names.

        Equivalent to manifest.matches(match).iterkeys(), but without creating
        an entirely new manifest.

        It also reports nonexistent files by marking them bad with match.bad().
        """
        if match.always():
            for f in iter(self):
                yield f
            return

        fset = set(match.files())

        # avoid the entire walk if we're only looking for specific files
        if self._filesfastpath(match):
            for fn in sorted(fset):
                if fn in self:
                    yield fn
            return

        for fn in self:
            if fn in fset:
                # specified pattern is the exact name
                fset.remove(fn)
            if match(fn):
                yield fn

        # for dirstate.walk, files=[''] means "walk the whole tree".
        # follow that here, too
        fset.discard(b'')

        for fn in sorted(fset):
            if not self.hasdir(fn):
                match.bad(fn, None)

    def _matches(self, match):
        '''generate a new manifest filtered by the match argument'''
        if match.always():
            return self.copy()

        if self._filesfastpath(match):
            m = manifestdict(self._nodelen)
            lm = self._lm
            for fn in match.files():
                if fn in lm:
                    m._lm[fn] = lm[fn]
            return m

        m = manifestdict(self._nodelen)
        m._lm = self._lm.filtercopy(match)
        return m

    def diff(self, m2, match=None, clean=False):
        """Finds changes between the current manifest and m2.

        Args:
          m2: the manifest to which this manifest should be compared.
          clean: if true, include files unchanged between these manifests
                 with a None value in the returned dictionary.

        The result is returned as a dict with filename as key and
        values of the form ((n1,fl1),(n2,fl2)), where n1/n2 is the
        nodeid in the current/other manifest and fl1/fl2 is the flag
        in the current/other manifest. Where the file does not exist,
        the nodeid will be None and the flags will be the empty
        string.
        """
        if match:
            m1 = self._matches(match)
            m2 = m2._matches(match)
            return m1.diff(m2, clean=clean)
        return self._lm.diff(m2._lm, clean)

    def setflag(self, key, flag):
        if flag not in _manifestflags:
            raise TypeError(b"Invalid manifest flag set.")
        self._lm[key] = self[key], flag

    def get(self, key, default=None):
        try:
            return self._lm[key][0]
        except KeyError:
            return default

    def flags(self, key):
        try:
            return self._lm[key][1]
        except KeyError:
            return b''

    def copy(self):
        c = manifestdict(self._nodelen)
        c._lm = self._lm.copy()
        return c

    def items(self):
        return (x[:2] for x in self._lm.iterentries())

    def iteritems(self):
        return (x[:2] for x in self._lm.iterentries())

    def iterentries(self):
        return self._lm.iterentries()

    def text(self):
        # most likely uses native version
        return self._lm.text()

    def fastdelta(self, base, changes):
        """Given a base manifest text as a bytearray and a list of changes
        relative to that text, compute a delta that can be used by revlog.
        """
        delta = []
        dstart = None
        dend = None
        dline = [b""]
        start = 0
        # zero copy representation of base as a buffer
        addbuf = util.buffer(base)

        changes = list(changes)
        if len(changes) < FASTDELTA_TEXTDIFF_THRESHOLD:
            # start with a readonly loop that finds the offset of
            # each line and creates the deltas
            for f, todelete in changes:
                # bs will either be the index of the item or the insert point
                start, end = _msearch(addbuf, f, start)
                if not todelete:
                    h, fl = self._lm[f]
                    l = b"%s\0%s%s\n" % (f, hex(h), fl)
                else:
                    if start == end:
                        # item we want to delete was not found, error out
                        raise AssertionError(
                            _(b"failed to remove %s from manifest") % f
                        )
                    l = b""
                if dstart is not None and dstart <= start and dend >= start:
                    if dend < end:
                        dend = end
                    if l:
                        dline.append(l)
                else:
                    if dstart is not None:
                        delta.append([dstart, dend, b"".join(dline)])
                    dstart = start
                    dend = end
                    dline = [l]

            if dstart is not None:
                delta.append([dstart, dend, b"".join(dline)])
            # apply the delta to the base, and get a delta for addrevision
            deltatext, arraytext = _addlistdelta(base, delta)
        else:
            # For large changes, it's much cheaper to just build the text and
            # diff it.
            arraytext = bytearray(self.text())
            deltatext = mdiff.textdiff(
                util.buffer(base), util.buffer(arraytext)
            )

        return arraytext, deltatext


def _msearch(m, s, lo=0, hi=None):
    """return a tuple (start, end) that says where to find s within m.

    If the string is found m[start:end] are the line containing
    that string.  If start == end the string was not found and
    they indicate the proper sorted insertion point.

    m should be a buffer, a memoryview or a byte string.
    s is a byte string"""

    def advance(i, c):
        while i < lenm and m[i : i + 1] != c:
            i += 1
        return i

    if not s:
        return (lo, lo)
    lenm = len(m)
    if not hi:
        hi = lenm
    while lo < hi:
        mid = (lo + hi) // 2
        start = mid
        while start > 0 and m[start - 1 : start] != b'\n':
            start -= 1
        end = advance(start, b'\0')
        if bytes(m[start:end]) < s:
            # we know that after the null there are 40 bytes of sha1
            # this translates to the bisect lo = mid + 1
            lo = advance(end + 40, b'\n') + 1
        else:
            # this translates to the bisect hi = mid
            hi = start
    end = advance(lo, b'\0')
    found = m[lo:end]
    if s == found:
        # we know that after the null there are 40 bytes of sha1
        end = advance(end + 40, b'\n')
        return (lo, end + 1)
    else:
        return (lo, lo)


def _checkforbidden(l):
    """Check filenames for illegal characters."""
    for f in l:
        if b'\n' in f or b'\r' in f:
            raise error.StorageError(
                _(b"'\\n' and '\\r' disallowed in filenames: %r")
                % pycompat.bytestr(f)
            )


# apply the changes collected during the bisect loop to our addlist
# return a delta suitable for addrevision
def _addlistdelta(addlist, x):
    # for large addlist arrays, building a new array is cheaper
    # than repeatedly modifying the existing one
    currentposition = 0
    newaddlist = bytearray()

    for start, end, content in x:
        newaddlist += addlist[currentposition:start]
        if content:
            newaddlist += bytearray(content)

        currentposition = end

    newaddlist += addlist[currentposition:]

    deltatext = b"".join(
        struct.pack(b">lll", start, end, len(content)) + content
        for start, end, content in x
    )
    return deltatext, newaddlist


def _splittopdir(f):
    if b'/' in f:
        dir, subpath = f.split(b'/', 1)
        return dir + b'/', subpath
    else:
        return b'', f


_noop = lambda s: None


@interfaceutil.implementer(repository.imanifestdict)
class treemanifest:
    def __init__(self, nodeconstants, dir=b'', text=b''):
        self._dir = dir
        self.nodeconstants = nodeconstants
        self._node = self.nodeconstants.nullid
        self._nodelen = self.nodeconstants.nodelen
        self._loadfunc = _noop
        self._copyfunc = _noop
        self._dirty = False
        self._dirs = {}
        self._lazydirs = {}
        # Using _lazymanifest here is a little slower than plain old dicts
        self._files = {}
        self._flags = {}
        if text:

            def readsubtree(subdir, subm):
                raise AssertionError(
                    b'treemanifest constructor only accepts flat manifests'
                )

            self.parse(text, readsubtree)
            self._dirty = True  # Mark flat manifest dirty after parsing

    def _subpath(self, path):
        return self._dir + path

    def _loadalllazy(self):
        selfdirs = self._dirs
        subpath = self._subpath
        for d, (node, readsubtree, docopy) in self._lazydirs.items():
            if docopy:
                selfdirs[d] = readsubtree(subpath(d), node).copy()
            else:
                selfdirs[d] = readsubtree(subpath(d), node)
        self._lazydirs = {}

    def _loadlazy(self, d):
        v = self._lazydirs.get(d)
        if v:
            node, readsubtree, docopy = v
            if docopy:
                self._dirs[d] = readsubtree(self._subpath(d), node).copy()
            else:
                self._dirs[d] = readsubtree(self._subpath(d), node)
            del self._lazydirs[d]

    def _loadchildrensetlazy(self, visit):
        if not visit:
            return None
        if visit == b'all' or visit == b'this':
            self._loadalllazy()
            return None

        loadlazy = self._loadlazy
        for k in visit:
            loadlazy(k + b'/')
        return visit

    def _loaddifflazy(self, t1, t2):
        """load items in t1 and t2 if they're needed for diffing.

        The criteria currently is:
        - if it's not present in _lazydirs in either t1 or t2, load it in the
          other (it may already be loaded or it may not exist, doesn't matter)
        - if it's present in _lazydirs in both, compare the nodeid; if it
          differs, load it in both
        """
        toloadlazy = []
        for d, v1 in t1._lazydirs.items():
            v2 = t2._lazydirs.get(d)
            if not v2 or v2[0] != v1[0]:
                toloadlazy.append(d)
        for d, v1 in t2._lazydirs.items():
            if d not in t1._lazydirs:
                toloadlazy.append(d)

        for d in toloadlazy:
            t1._loadlazy(d)
            t2._loadlazy(d)

    def __len__(self):
        self._load()
        size = len(self._files)
        self._loadalllazy()
        for m in self._dirs.values():
            size += m.__len__()
        return size

    def __nonzero__(self):
        # Faster than "__len() != 0" since it avoids loading sub-manifests
        return not self._isempty()

    __bool__ = __nonzero__

    def _isempty(self):
        self._load()  # for consistency; already loaded by all callers
        # See if we can skip loading everything.
        if self._files or (
            self._dirs and any(not m._isempty() for m in self._dirs.values())
        ):
            return False
        self._loadalllazy()
        return not self._dirs or all(m._isempty() for m in self._dirs.values())

    @encoding.strmethod
    def __repr__(self):
        return (
            b'<treemanifest dir=%s, node=%s, loaded=%r, dirty=%r at 0x%x>'
            % (
                self._dir,
                hex(self._node),
                bool(self._loadfunc is _noop),
                self._dirty,
                id(self),
            )
        )

    def dir(self):
        """The directory that this tree manifest represents, including a
        trailing '/'. Empty string for the repo root directory."""
        return self._dir

    def node(self):
        """This node of this instance. nullid for unsaved instances. Should
        be updated when the instance is read or written from a revlog.
        """
        assert not self._dirty
        return self._node

    def setnode(self, node):
        self._node = node
        self._dirty = False

    def iterentries(self):
        self._load()
        self._loadalllazy()
        for p, n in sorted(
            itertools.chain(self._dirs.items(), self._files.items())
        ):
            if p in self._files:
                yield self._subpath(p), n, self._flags.get(p, b'')
            else:
                for x in n.iterentries():
                    yield x

    def items(self):
        self._load()
        self._loadalllazy()
        for p, n in sorted(
            itertools.chain(self._dirs.items(), self._files.items())
        ):
            if p in self._files:
                yield self._subpath(p), n
            else:
                for f, sn in n.items():
                    yield f, sn

    iteritems = items

    def iterkeys(self):
        self._load()
        self._loadalllazy()
        for p in sorted(itertools.chain(self._dirs, self._files)):
            if p in self._files:
                yield self._subpath(p)
            else:
                for f in self._dirs[p]:
                    yield f

    def keys(self):
        return list(self.iterkeys())

    def __iter__(self):
        return self.iterkeys()

    def __contains__(self, f):
        if f is None:
            return False
        self._load()
        dir, subpath = _splittopdir(f)
        if dir:
            self._loadlazy(dir)

            if dir not in self._dirs:
                return False

            return self._dirs[dir].__contains__(subpath)
        else:
            return f in self._files

    def get(self, f, default=None):
        self._load()
        dir, subpath = _splittopdir(f)
        if dir:
            self._loadlazy(dir)

            if dir not in self._dirs:
                return default
            return self._dirs[dir].get(subpath, default)
        else:
            return self._files.get(f, default)

    def __getitem__(self, f):
        self._load()
        dir, subpath = _splittopdir(f)
        if dir:
            self._loadlazy(dir)

            return self._dirs[dir].__getitem__(subpath)
        else:
            return self._files[f]

    def flags(self, f):
        self._load()
        dir, subpath = _splittopdir(f)
        if dir:
            self._loadlazy(dir)

            if dir not in self._dirs:
                return b''
            return self._dirs[dir].flags(subpath)
        else:
            if f in self._lazydirs or f in self._dirs:
                return b''
            return self._flags.get(f, b'')

    def find(self, f):
        self._load()
        dir, subpath = _splittopdir(f)
        if dir:
            self._loadlazy(dir)

            return self._dirs[dir].find(subpath)
        else:
            return self._files[f], self._flags.get(f, b'')

    def __delitem__(self, f):
        self._load()
        dir, subpath = _splittopdir(f)
        if dir:
            self._loadlazy(dir)

            self._dirs[dir].__delitem__(subpath)
            # If the directory is now empty, remove it
            if self._dirs[dir]._isempty():
                del self._dirs[dir]
        else:
            del self._files[f]
            if f in self._flags:
                del self._flags[f]
        self._dirty = True

    def __setitem__(self, f, n):
        assert n is not None
        self._load()
        dir, subpath = _splittopdir(f)
        if dir:
            self._loadlazy(dir)
            if dir not in self._dirs:
                self._dirs[dir] = treemanifest(
                    self.nodeconstants, self._subpath(dir)
                )
            self._dirs[dir].__setitem__(subpath, n)
        else:
            # manifest nodes are either 20 bytes or 32 bytes,
            # depending on the hash in use. Assert this as historically
            # sometimes extra bytes were added.
            assert len(n) in (20, 32)
            self._files[f] = n
        self._dirty = True

    def _load(self):
        if self._loadfunc is not _noop:
            lf, self._loadfunc = self._loadfunc, _noop
            lf(self)
        elif self._copyfunc is not _noop:
            cf, self._copyfunc = self._copyfunc, _noop
            cf(self)

    def setflag(self, f, flags):
        """Set the flags (symlink, executable) for path f."""
        if flags not in _manifestflags:
            raise TypeError(b"Invalid manifest flag set.")
        self._load()
        dir, subpath = _splittopdir(f)
        if dir:
            self._loadlazy(dir)
            if dir not in self._dirs:
                self._dirs[dir] = treemanifest(
                    self.nodeconstants, self._subpath(dir)
                )
            self._dirs[dir].setflag(subpath, flags)
        else:
            self._flags[f] = flags
        self._dirty = True

    def copy(self):
        copy = treemanifest(self.nodeconstants, self._dir)
        copy._node = self._node
        copy._dirty = self._dirty
        if self._copyfunc is _noop:

            def _copyfunc(s):
                self._load()
                s._lazydirs = {
                    d: (n, r, True) for d, (n, r, c) in self._lazydirs.items()
                }
                sdirs = s._dirs
                for d, v in self._dirs.items():
                    sdirs[d] = v.copy()
                s._files = dict.copy(self._files)
                s._flags = dict.copy(self._flags)

            if self._loadfunc is _noop:
                _copyfunc(copy)
            else:
                copy._copyfunc = _copyfunc
        else:
            copy._copyfunc = self._copyfunc
        return copy

    def filesnotin(self, m2, match=None):
        '''Set of files in this manifest that are not in the other'''
        if match and not match.always():
            m1 = self._matches(match)
            m2 = m2._matches(match)
            return m1.filesnotin(m2)

        files = set()

        def _filesnotin(t1, t2):
            if t1._node == t2._node and not t1._dirty and not t2._dirty:
                return
            t1._load()
            t2._load()
            self._loaddifflazy(t1, t2)
            for d, m1 in t1._dirs.items():
                if d in t2._dirs:
                    m2 = t2._dirs[d]
                    _filesnotin(m1, m2)
                else:
                    files.update(m1.iterkeys())

            for fn in t1._files:
                if fn not in t2._files:
                    files.add(t1._subpath(fn))

        _filesnotin(self, m2)
        return files

    @propertycache
    def _alldirs(self):
        return pathutil.dirs(self)

    def dirs(self):
        return self._alldirs

    def hasdir(self, dir):
        self._load()
        topdir, subdir = _splittopdir(dir)
        if topdir:
            self._loadlazy(topdir)
            if topdir in self._dirs:
                return self._dirs[topdir].hasdir(subdir)
            return False
        dirslash = dir + b'/'
        return dirslash in self._dirs or dirslash in self._lazydirs

    def walk(self, match):
        """Generates matching file names.

        It also reports nonexistent files by marking them bad with match.bad().
        """
        if match.always():
            for f in iter(self):
                yield f
            return

        fset = set(match.files())

        for fn in self._walk(match):
            if fn in fset:
                # specified pattern is the exact name
                fset.remove(fn)
            yield fn

        # for dirstate.walk, files=[''] means "walk the whole tree".
        # follow that here, too
        fset.discard(b'')

        for fn in sorted(fset):
            if not self.hasdir(fn):
                match.bad(fn, None)

    def _walk(self, match):
        '''Recursively generates matching file names for walk().'''
        visit = match.visitchildrenset(self._dir[:-1])
        if not visit:
            return

        # yield this dir's files and walk its submanifests
        self._load()
        visit = self._loadchildrensetlazy(visit)
        for p in sorted(list(self._dirs) + list(self._files)):
            if p in self._files:
                fullp = self._subpath(p)
                if match(fullp):
                    yield fullp
            else:
                if not visit or p[:-1] in visit:
                    for f in self._dirs[p]._walk(match):
                        yield f

    def _matches(self, match):
        """recursively generate a new manifest filtered by the match argument."""
        if match.always():
            return self.copy()
        return self._matches_inner(match)

    def _matches_inner(self, match):
        if match.always():
            return self.copy()

        visit = match.visitchildrenset(self._dir[:-1])
        if visit == b'all':
            return self.copy()
        ret = treemanifest(self.nodeconstants, self._dir)
        if not visit:
            return ret

        self._load()
        for fn in self._files:
            # While visitchildrenset *usually* lists only subdirs, this is
            # actually up to the matcher and may have some files in the set().
            # If visit == 'this', we should obviously look at the files in this
            # directory; if visit is a set, and fn is in it, we should inspect
            # fn (but no need to inspect things not in the set).
            if visit != b'this' and fn not in visit:
                continue
            fullp = self._subpath(fn)
            # visitchildrenset isn't perfect, we still need to call the regular
            # matcher code to further filter results.
            if not match(fullp):
                continue
            ret._files[fn] = self._files[fn]
            if fn in self._flags:
                ret._flags[fn] = self._flags[fn]

        visit = self._loadchildrensetlazy(visit)
        for dir, subm in self._dirs.items():
            if visit and dir[:-1] not in visit:
                continue
            m = subm._matches_inner(match)
            if not m._isempty():
                ret._dirs[dir] = m

        if not ret._isempty():
            ret._dirty = True
        return ret

    def fastdelta(self, base, changes):
        raise FastdeltaUnavailable()

    def diff(self, m2, match=None, clean=False):
        """Finds changes between the current manifest and m2.

        Args:
          m2: the manifest to which this manifest should be compared.
          clean: if true, include files unchanged between these manifests
                 with a None value in the returned dictionary.

        The result is returned as a dict with filename as key and
        values of the form ((n1,fl1),(n2,fl2)), where n1/n2 is the
        nodeid in the current/other manifest and fl1/fl2 is the flag
        in the current/other manifest. Where the file does not exist,
        the nodeid will be None and the flags will be the empty
        string.
        """
        if match and not match.always():
            m1 = self._matches(match)
            m2 = m2._matches(match)
            return m1.diff(m2, clean=clean)
        result = {}
        emptytree = treemanifest(self.nodeconstants)

        def _iterativediff(t1, t2, stack):
            """compares two tree manifests and append new tree-manifests which
            needs to be compared to stack"""
            if t1._node == t2._node and not t1._dirty and not t2._dirty:
                return
            t1._load()
            t2._load()
            self._loaddifflazy(t1, t2)

            for d, m1 in t1._dirs.items():
                m2 = t2._dirs.get(d, emptytree)
                stack.append((m1, m2))

            for d, m2 in t2._dirs.items():
                if d not in t1._dirs:
                    stack.append((emptytree, m2))

            for fn, n1 in t1._files.items():
                fl1 = t1._flags.get(fn, b'')
                n2 = t2._files.get(fn, None)
                fl2 = t2._flags.get(fn, b'')
                if n1 != n2 or fl1 != fl2:
                    result[t1._subpath(fn)] = ((n1, fl1), (n2, fl2))
                elif clean:
                    result[t1._subpath(fn)] = None

            for fn, n2 in t2._files.items():
                if fn not in t1._files:
                    fl2 = t2._flags.get(fn, b'')
                    result[t2._subpath(fn)] = ((None, b''), (n2, fl2))

        stackls = []
        _iterativediff(self, m2, stackls)
        while stackls:
            t1, t2 = stackls.pop()
            # stackls is populated in the function call
            _iterativediff(t1, t2, stackls)
        return result

    def unmodifiedsince(self, m2):
        return not self._dirty and not m2._dirty and self._node == m2._node

    def parse(self, text, readsubtree):
        selflazy = self._lazydirs
        for f, n, fl in _parse(self._nodelen, text):
            if fl == b't':
                f = f + b'/'
                # False below means "doesn't need to be copied" and can use the
                # cached value from readsubtree directly.
                selflazy[f] = (n, readsubtree, False)
            elif b'/' in f:
                # This is a flat manifest, so use __setitem__ and setflag rather
                # than assigning directly to _files and _flags, so we can
                # assign a path in a subdirectory, and to mark dirty (compared
                # to nullid).
                self[f] = n
                if fl:
                    self.setflag(f, fl)
            else:
                # Assigning to _files and _flags avoids marking as dirty,
                # and should be a little faster.
                self._files[f] = n
                if fl:
                    self._flags[f] = fl

    def text(self):
        """Get the full data of this manifest as a bytestring."""
        self._load()
        return _text(self.iterentries())

    def dirtext(self):
        """Get the full data of this directory as a bytestring. Make sure that
        any submanifests have been written first, so their nodeids are correct.
        """
        self._load()
        flags = self.flags
        lazydirs = [(d[:-1], v[0], b't') for d, v in self._lazydirs.items()]
        dirs = [(d[:-1], self._dirs[d]._node, b't') for d in self._dirs]
        files = [(f, self._files[f], flags(f)) for f in self._files]
        return _text(sorted(dirs + files + lazydirs))

    def read(self, gettext, readsubtree):
        def _load_for_read(s):
            s.parse(gettext(), readsubtree)
            s._dirty = False

        self._loadfunc = _load_for_read

    def writesubtrees(self, m1, m2, writesubtree, match):
        self._load()  # for consistency; should never have any effect here
        m1._load()
        m2._load()
        emptytree = treemanifest(self.nodeconstants)

        def getnode(m, d):
            ld = m._lazydirs.get(d)
            if ld:
                return ld[0]
            return m._dirs.get(d, emptytree)._node

        # let's skip investigating things that `match` says we do not need.
        visit = match.visitchildrenset(self._dir[:-1])
        visit = self._loadchildrensetlazy(visit)
        if visit == b'this' or visit == b'all':
            visit = None
        for d, subm in self._dirs.items():
            if visit and d[:-1] not in visit:
                continue
            subp1 = getnode(m1, d)
            subp2 = getnode(m2, d)
            if subp1 == self.nodeconstants.nullid:
                subp1, subp2 = subp2, subp1
            writesubtree(subm, subp1, subp2, match)

    def walksubtrees(self, matcher=None):
        """Returns an iterator of the subtrees of this manifest, including this
        manifest itself.

        If `matcher` is provided, it only returns subtrees that match.
        """
        if matcher and not matcher.visitdir(self._dir[:-1]):
            return
        if not matcher or matcher(self._dir[:-1]):
            yield self

        self._load()
        # OPT: use visitchildrenset to avoid loading everything.
        self._loadalllazy()
        for d, subm in self._dirs.items():
            for subtree in subm.walksubtrees(matcher=matcher):
                yield subtree


class manifestfulltextcache(util.lrucachedict):
    """File-backed LRU cache for the manifest cache

    File consists of entries, up to EOF:

    - 20 bytes node, 4 bytes length, <length> manifest data

    These are written in reverse cache order (oldest to newest).

    """

    _file = b'manifestfulltextcache'

    def __init__(self, max):
        super(manifestfulltextcache, self).__init__(max)
        self._dirty = False
        self._read = False
        self._opener = None

    def read(self):
        if self._read or self._opener is None:
            return

        try:
            with self._opener(self._file) as fp:
                set = super(manifestfulltextcache, self).__setitem__
                # ignore trailing data, this is a cache, corruption is skipped
                while True:
                    # TODO do we need to do work here for sha1 portability?
                    node = fp.read(20)
                    if len(node) < 20:
                        break
                    try:
                        size = struct.unpack(b'>L', fp.read(4))[0]
                    except struct.error:
                        break
                    value = bytearray(fp.read(size))
                    if len(value) != size:
                        break
                    set(node, value)
        except IOError:
            # the file is allowed to be missing
            pass

        self._read = True
        self._dirty = False

    def write(self):
        if not self._dirty or self._opener is None:
            return
        # rotate backwards to the first used node
        try:
            with self._opener(
                self._file, b'w', atomictemp=True, checkambig=True
            ) as fp:
                node = self._head.prev
                while True:
                    if node.key in self._cache:
                        fp.write(node.key)
                        fp.write(struct.pack(b'>L', len(node.value)))
                        fp.write(node.value)
                    if node is self._head:
                        break
                    node = node.prev
        except IOError:
            # We could not write the cache (eg: permission error)
            # the content can be missing.
            #
            # We could try harder and see if we could recreate a wcache
            # directory were we coudl write too.
            #
            # XXX the error pass silently, having some way to issue an error
            # log `ui.log` would be nice.
            pass

    def __len__(self):
        if not self._read:
            self.read()
        return super(manifestfulltextcache, self).__len__()

    def __contains__(self, k):
        if not self._read:
            self.read()
        return super(manifestfulltextcache, self).__contains__(k)

    def __iter__(self):
        if not self._read:
            self.read()
        return super(manifestfulltextcache, self).__iter__()

    def __getitem__(self, k):
        if not self._read:
            self.read()
        # the cache lru order can change on read
        setdirty = self._cache.get(k) is not self._head
        value = super(manifestfulltextcache, self).__getitem__(k)
        if setdirty:
            self._dirty = True
        return value

