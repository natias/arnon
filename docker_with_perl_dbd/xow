
The payload of this part is raw changegroup data. See
:hg:`help internals.changegroups` for the format of changegroup data.

check:bookmarks
---------------

The ``check:bookmarks`` part is inserted into a bundle as a means for the
receiver to validate that the sender's known state of bookmarks matches
the receiver's.

This part has no parameters.

The payload is a binary stream of bookmark data. Each entry in the stream
consists of:

* 20 bytes binary node that bookmark is associated with
* 2 bytes unsigned short defining length of bookmark name
* N bytes containing the bookmark name

If all bits in the node value are ``1``, then this signifies a missing
bookmark.

When the receiver encounters this part, for each bookmark in the part
payload, it should validate that the current bookmark state matches
the specified state. If it doesn't, then the receiver should take
appropriate action. (In the case of pushes, this mismatch signifies
a race condition and the receiver should consider rejecting the push.)

check:heads
-----------

The ``check:heads`` part is a means to validate that the sender's state
of DAG heads matches the receiver's.

This part has no parameters.

The body of this part is an array of 20 byte binary nodes representing
changeset heads.

Receivers should compare the set of heads defined in this part to the
current set of repo heads and take action if there is a mismatch in that
set.

Note that this part applies to *all* heads in the repo.

check:phases
------------

The ``check:phases`` part validates that the sender's state of phase
boundaries matches the receiver's.

This part has no parameters.

The payload consists of an array of 24 byte entries. Each entry is
a big endian 32-bit integer defining the phase integer and 20 byte
binary node value.

For each changeset defined in this part, the receiver should validate
that its current phase matches the phase defined in this part. The
receiver should take appropriate action if a mismatch occurs.

check:updated-heads
-------------------

The ``check:updated-heads`` part validates that the sender's state of
DAG heads updated by this bundle matches the receiver's.

This type is nearly identical to ``check:heads`` except the heads
in the payload are only a subset of heads in the repository. The
receiver should validate that all nodes specified by the sender are
branch heads and take appropriate action if not.

error:abort
-----------

The ``error:abort`` part conveys a fatal error.

The following part parameters are defined:

message
   The string content of the error message.

hint
   Supplemental string giving a hint on how to fix the problem.

error:pushkey
-------------

The ``error:pushkey`` part conveys an error in the *pushkey* protocol.

The following part parameters are defined:

namespace
   The pushkey domain that exhibited the error.

key
   The key whose update failed.

new
   The value we tried to set the key to.

old
   The old value of the key (as supplied by the client).

ret
   The integer result code for the pushkey request.

in-reply-to
   Part ID that triggered this error.

This part is generated if there was an error applying *pushkey* data.
Pushkey data includes bookmarks, phases, and obsolescence markers.

error:pushraced
---------------

The ``error:pushraced`` part conveys that an error occurred and
the likely cause is losing a race with another pusher.

The following part parameters are defined:

message
   String error message.

This part is typically emitted when a receiver examining ``check:*``
parts encountered inconsistency between incoming state and local state.
The likely cause of that inconsistency is another repository change
operation (often another client performing an ``hg push``).

error:unsupportedcontent
------------------------

The ``error:unsupportedcontent`` part conveys that a bundle2 receiver
encountered a part or content it was not able to handle.

The following part parameters are defined:

parttype
   The name of the part that triggered this error.

params
   ``\0`` delimited list of parameters.

hgtagsfnodes
------------

The ``hgtagsfnodes`` type defines file nodes for the ``.hgtags`` file
for various changesets.

This part has no parameters.

The payload is an array of pairs of 20 byte binary nodes. The first node
is a changeset node. The second node is the ``.hgtags`` file node.

Resolving tags requires resolving the ``.hgtags`` file node for changesets.
On large repositories, this can be expensive. Repositories cache the
mapping of changeset to ``.hgtags`` file node on disk as a performance
optimization. This part allows that cached data to be transferred alongside
changeset data.

Receivers should update their ``.hgtags`` cache file node mappings with
the incoming data.

listkeys
--------

The ``listkeys`` part holds content for a *pushkey* namespace.

The following part parameters are defined:

namespace
   The pushkey domain this data belongs to.

The part payload contains a newline (``\n``) delimited list of
tab (``\t``) delimited key-value pairs defining entries in this pushkey
namespace.

obsmarkers
----------

The ``obsmarkers`` part defines obsolescence markers.

This part has no parameters.

The payload consists of obsolescence markers using the on-disk markers
format. The first byte defines the version format.

The receiver should apply the obsolescence markers defined in this
part. A ``reply:obsmarkers`` part should be sent to the sender, if possible.

output
------

The ``output`` part is used to display output on the receiver.

This part has no parameters.

The payload consists of raw data to be printed on the receiver.

phase-heads
-----------

The ``phase-heads`` part defines phase boundaries.

This part has no parameters.

The payload consists of an array of 24 byte entries. Each entry is
a big endian 32-bit integer defining the phase integer and 20 byte
binary node value.

pushkey
-------

The ``pushkey`` part communicates an intent to perform a ``pushkey``
request.

The following part parameters are defined:

namespace
   The pushkey domain to operate on.

key
   The key within the pushkey namespace that is being changed.

old
   The old value for the key being changed.

new
   The new value for the key being changed.

This part has no payload.

The receiver should perform a pushkey operation as described by this
part's parameters.

If the pushey operation fails, a ``reply:pushkey`` part should be sent
back to the sender, if possible. The ``in-reply-to`` part parameter
should reference the source part.

pushvars
--------

The ``pushvars`` part defines environment variables that should be
set when processing this bundle2 payload.

The part's advisory parameters define environment variables.

There is no part payload.

When received, part parameters are prefixed with ``USERVAR_`` and the
resulting variables are defined in the hooks context for the current
bundle2 application. This part provides a mechanism for senders to
inject extra state into the hook execution environment on the receiver.

remote-changegroup
------------------

The ``remote-changegroup`` part defines an external location of a bundle
to apply. This part can be used by servers to serve pre-generated bundles
hosted at arbitrary URLs.

The following part parameters are defined:

url
   The URL of the remote bundle.

size
   The size in bytes of the remote bundle.

digests
   A space separated list of the digest types provided in additional
   part parameters.

digest:<type>
   The hexadecimal representation of the digest (hash) of the remote bundle.

There is no payload for this part type.

When encountered, clients should attempt to fetch the URL being advertised
and read and apply it as a bundle.

The ``size`` and ``digest:<type>`` parameters should be used to validate
that the downloaded bundle matches what was advertised. If a mismatch occurs,
the client should abort.

reply:changegroup
-----------------

The ``reply:changegroup`` part conveys the results of application of a
``changegroup`` part.

The following part parameters are defined:

return
   Integer return code from changegroup application.

in-reply-to
   Part ID of part this reply is in response to.

reply:obsmarkers
----------------

The ``reply:obsmarkers`` part conveys the results of applying an
``obsmarkers`` part.

The following part parameters are defined:

new
   The integer number of new markers that were applied.

in-reply-to
   The part ID that this part is in reply to.

reply:pushkey
-------------

The ``reply:pushkey`` part conveys the result of a *pushkey* operation.

The following part parameters are defined:

return
   Integer result code from pushkey operation.

in-reply-to
   Part ID that triggered this pushkey operation.

This part has no payload.

replycaps
---------

The ``replycaps`` part notifies the receiver that a reply bundle should
be created.

This part has no parameters.

The payload consists of a bundle2 capabilities blob.

stream2
-------

The ``stream2`` part contains *streaming clone* version 2 data.

The following part parameters are defined:

requirements
   URL quoted repository requirements string. Requirements are delimited by a
   command (``,``).

filecount
   The total number of files being transferred in the payload.

bytecount
   The total size of file content being transferred in the payload.

The payload consists of raw stream clone version 2 data.

The ``filecount`` and ``bytecount`` parameters can be used for progress and
reporting purposes. The values may not be exact.
                                                                                                                                                                                                                                                                                                          usr/lib/python3/dist-packages/mercurial/helptext/internals/bundles.txt                              0000644 0000000 0000000 00000006306 14355257011 024772  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        A bundle is a container for repository data.

Bundles are used as standalone files as well as the interchange format
over the wire protocol used when two Mercurial peers communicate with
each other.

Headers
=======

Bundles produced since Mercurial 0.7 (September 2005) have a 4 byte
header identifying the major bundle type. The header always begins with
``HG`` and the follow 2 bytes indicate the bundle type/version. Some
bundle types have additional data after this 4 byte header.

The following sections describe each bundle header/type.

HG10
----

``HG10`` headers indicate a *changegroup bundle*. This is the original
bundle format, so it is sometimes referred to as *bundle1*. It has been
present since version 0.7 (released September 2005).

This header is followed by 2 bytes indicating the compression algorithm
used for data that follows. All subsequent data following this
compression identifier is compressed according to the algorithm/method
specified.

Supported algorithms include the following.

``BZ``
   *bzip2* compression.

   Bzip2 compressors emit a leading ``BZ`` header. Mercurial uses this
   leading ``BZ`` as part of the bundle header. Therefore consumers
   of bzip2 bundles need to *seed* the bzip2 decompressor with ``BZ`` or
   seek the input stream back to the beginning of the algorithm component
   of the bundle header so that decompressor input is valid. This behavior
   is unique among supported compression algorithms.

   Supported since version 0.7 (released December 2006).

``GZ``
  *zlib* compression.

   Supported since version 0.9.2 (released December 2006).

``UN``
  *Uncompressed* or no compression. Unmodified changegroup data follows.

  Supported since version 0.9.2 (released December 2006).

3rd party extensions may implement their own compression. However, no
authority reserves values for their compression algorithm identifiers.

HG2X
----

``HG2X`` headers (where ``X`` is any value) denote a *bundle2* bundle.
Bundle2 bundles are a container format for various kinds of repository
data and capabilities, beyond changegroup data (which was the only data
supported by ``HG10`` bundles.

``HG20`` is currently the only defined bundle2 version.

The ``HG20`` format is documented at :hg:`help internals.bundle2`.

Initial ``HG20`` support was added in Mercurial 3.0 (released May
2014). However, bundle2 bundles were hidden behind an experimental flag
until version 3.5 (released August 2015), when they were enabled in the
wire protocol. Various commands (including ``hg bundle``) did not
support generating bundle2 files until Mercurial 3.6 (released November
2015).

HGS1
----

*Experimental*

A ``HGS1`` header indicates a *streaming clone bundle*. This is a bundle
that contains raw revlog data from a repository store. (Typically revlog
data is exchanged in the form of changegroups.)

The purpose of *streaming clone bundles* are to *clone* repository data
very efficiently.

The ``HGS1`` header is always followed by 2 bytes indicating a
compression algorithm of the data that follows. Only ``UN``
(uncompressed data) is currently allowed.

``HGS1UN`` support was added as an experimental feature in version 3.6
(released November 2015) as part of the initial offering of the *clone
bundles* feature.
                                                                                                                                                                                                                                                                                                                          usr/lib/python3/dist-packages/mercurial/helptext/internals/cbor.txt                                 0000644 0000000 0000000 00000007530 14355257011 024263  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        Mercurial uses Concise Binary Object Representation (CBOR)
(RFC 7049) for various data formats.

This document describes the subset of CBOR that Mercurial uses and
gives recommendations for appropriate use of CBOR within Mercurial.

Type Limitations
================

Major types 0 and 1 (unsigned integers and negative integers) MUST be
fully supported.

Major type 2 (byte strings) MUST be fully supported. However, there
are limitations around the use of indefinite-length byte strings.
(See below.)

Major type 3 (text strings) are NOT supported.

Major type 4 (arrays) MUST be supported. However, values are limited
to the set of types described in the "Container Types" section below.
And indefinite-length arrays are NOT supported.

Major type 5 (maps) MUST be supported. However, key values are limited
to the set of types described in the "Container Types" section below.
And indefinite-length maps are NOT supported.

Major type 6 (semantic tagging of major types) can be used with the
following semantic tag values:

258
   Mathematical finite set. Suitable for representing Python's
   ``set`` type.

All other semantic tag values are not allowed.

Major type 7 (simple data types) can be used with the following
type values:

20
   False
21
   True
22
   Null
31
   Break stop code (for indefinite-length items).

All other simple data type values (including every value requiring the
1 byte extension) are disallowed.

Indefinite-Length Byte Strings
==============================

Indefinite-length byte strings (major type 2) are allowed. However,
they MUST NOT occur inside a container type (such as an array or map).
i.e. they can only occur as the "top-most" element in a stream of
values.

Encoders and decoders SHOULD *stream* indefinite-length byte strings.
i.e. an encoder or decoder SHOULD NOT buffer the entirety of a long
byte string value when indefinite-length byte strings are being used
if it can be avoided. Mercurial MAY use extremely long indefinite-length
byte strings and buffering the source or destination value COULD lead to
memory exhaustion.

Chunks in an indefinite-length byte string SHOULD NOT exceed 2^20
bytes.

Container Types
===============

Mercurial may use the array (major type 4), map (major type 5), and
set (semantic tag 258 plus major type 4 array) container types.

An array may contain any supported type as values.

A map MUST only use the following types as keys:

* unsigned integers (major type 0)
* negative integers (major type 1)
* byte strings (major type 2) (but not indefinite-length byte strings)
* false (simple type 20)
* true (simple type 21)
* null (simple type 22)

A map MUST only use the following types as values:

* all types supported as map keys
* arrays
* maps
* sets

A set may only use the following types as values:

* all types supported as map keys

It is recommended that keys in maps and values in sets and arrays all
be of a uniform type.

Avoiding Large Byte Strings
===========================

The use of large byte strings is discouraged, especially in scenarios where
the total size of the byte string may by unbound for some inputs (e.g. when
representing the content of a tracked file). It is highly recommended to use
indefinite-length byte strings for these purposes.

Since indefinite-length byte strings cannot be nested within an outer
container (such as an array or map), to associate a large byte string
with another data structure, it is recommended to use an array or
map followed immediately by an indefinite-length byte string. For example,
instead of the following map::

   {
      "key1": "value1",
      "key2": "value2",
      "long_value": "some very large value...",
   }

Use a map followed by a byte string:

   {
      "key1": "value1",
      "key2": "value2",
      "value_follows": True,
   }
   <BEGIN INDEFINITE-LENGTH BYTE STRING>
   "some very large value"
   "..."
   <END INDEFINITE-LENGTH BYTE STRING>
                                                                                                                                                                        usr/lib/python3/dist-packages/mercurial/helptext/internals/censor.txt                               0000644 0000000 0000000 00000002377 14355257011 024633  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        The censor system allows retroactively removing content from
files. Actually censoring a node requires using the censor extension,
but the functionality for handling censored nodes is partially in core.

Censored nodes in a filelog have the flag ``REVIDX_ISCENSORED`` set,
and the contents of the censored node are replaced with a censor
tombstone. For historical reasons, the tombstone is packed in the
filelog metadata field ``censored``. This allows censored nodes to be
(mostly) safely transmitted through old formats like changegroup
versions 1 and 2. When using changegroup formats older than 3, the
receiver is required to re-add the ``REVIDX_ISCENSORED`` flag when
storing the revision. This depends on the ``censored`` metadata key
never being used for anything other than censoring revisions, which is
true as of January 2017. Note that the revlog flag is the
authoritative marker of a censored node: the tombstone should only be
consulted when looking for a reason a node was censored or when revlog
flags are unavailable as mentioned above.

The tombstone data is a free-form string. It's expected that users of
censor will want to record the reason for censoring a node in the
tombstone. Censored nodes must be able to fit in the size of the
content being censored.
                                                                                                                                                                                                                                                                 usr/lib/python3/dist-packages/mercurial/helptext/internals/changegroups.txt                         0000644 0000000 0000000 00000024365 14355257011 026030  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        Changegroups are representations of repository revlog data, specifically
the changelog data, root/flat manifest data, treemanifest data, and
filelogs.

There are 4 versions of changegroups: ``1``, ``2``, ``3`` and ``4``. From a
high-level, versions ``1`` and ``2`` are almost exactly the same, with the
only difference being an additional item in the *delta header*. Version
``3`` adds support for storage flags in the *delta header* and optionally
exchanging treemanifests (enabled by setting an option on the
``changegroup`` part in the bundle2). Version ``4`` adds support for exchanging
sidedata (additional revision metadata not part of the digest).

Changegroups when not exchanging treemanifests consist of 3 logical
segments::

   +---------------------------------+
   |           |          |          |
   | changeset | manifest | filelogs |
   |           |          |          |
   |           |          |          |
   +---------------------------------+

When exchanging treemanifests, there are 4 logical segments::

   +-------------------------------------------------+
   |           |          |               |          |
   | changeset |   root   | treemanifests | filelogs |
   |           | manifest |               |          |
   |           |          |               |          |
   +-------------------------------------------------+

The principle building block of each segment is a *chunk*. A *chunk*
is a framed piece of data::

   +---------------------------------------+
   |           |                           |
   |  length   |           data            |
   | (4 bytes) |   (<length - 4> bytes)    |
   |           |                           |
   +---------------------------------------+

All integers are big-endian signed integers. Each chunk starts with a 32-bit
integer indicating the length of the entire chunk (including the length field
itself).

There is a special case chunk that has a value of 0 for the length
(``0x00000000``). We call this an *empty chunk*.

Delta Groups
============

A *delta group* expresses the content of a revlog as a series of deltas,
or patches against previous revisions.

Delta groups consist of 0 or more *chunks* followed by the *empty chunk*
to signal the end of the delta group::

  +------------------------------------------------------------------------+
  |                |             |               |             |           |
  | chunk0 length  | chunk0 data | chunk1 length | chunk1 data |    0x0    |
  |   (4 bytes)    |  (various)  |   (4 bytes)   |  (various)  | (4 bytes) |
  |                |             |               |             |           |
  +------------------------------------------------------------------------+

Each *chunk*'s data consists of the following::

  +---------------------------------------+
  |                        |              |
  |     delta header       |  delta data  |
  |  (various by version)  |  (various)   |
  |                        |              |
  +---------------------------------------+

The *delta data* is a series of *delta*s that describe a diff from an existing
entry (either that the recipient already has, or previously specified in the
bundle/changegroup).

The *delta header* is different between versions ``1``, ``2``, ``3`` and ``4``
of the changegroup format.

Version 1 (headerlen=80)::

   +------------------------------------------------------+
   |            |             |             |             |
   |    node    |   p1 node   |   p2 node   |  link node  |
   | (20 bytes) |  (20 bytes) |  (20 bytes) |  (20 bytes) |
   |            |             |             |             |
   +------------------------------------------------------+

Version 2 (headerlen=100)::

   +------------------------------------------------------------------+
   |            |             |             |            |            |
   |    node    |   p1 node   |   p2 node   | base node  | link node  |
   | (20 bytes) |  (20 bytes) |  (20 bytes) | (20 bytes) | (20 bytes) |
   |            |             |             |            |            |
   +------------------------------------------------------------------+

Version 3 (headerlen=102)::

   +------------------------------------------------------------------------------+
   |            |             |             |            |            |           |
   |    node    |   p1 node   |   p2 node   | base node  | link node  |   flags   |
   | (20 bytes) |  (20 bytes) |  (20 bytes) | (20 bytes) | (20 bytes) | (2 bytes) |
   |            |             |             |            |            |           |
   +------------------------------------------------------------------------------+

Version 4 (headerlen=103)::

   +------------------------------------------------------------------------------+----------+
   |            |             |             |            |            |           |          |
   |    node    |   p1 node   |   p2 node   | base node  | link node  |   flags   |  pflags  |
   | (20 bytes) |  (20 bytes) |  (20 bytes) | (20 bytes) | (20 bytes) | (2 bytes) | (1 byte) |
   |            |             |             |            |            |           |          |
   +------------------------------------------------------------------------------+----------+

The *delta data* consists of ``chunklen - 4 - headerlen`` bytes, which contain a
series of *delta*s, densely packed (no separators). These deltas describe a diff
from an existing entry (either that the recipient already has, or previously
specified in the bundle/changegroup). The format is described more fully in
``hg help internals.bdiff``, but briefly::

   +---------------------------------------------------------------+
   |              |            |            |                      |
   | start offset | end offset | new length |        content       |
   |  (4 bytes)   |  (4 bytes) |  (4 bytes) | (<new length> bytes) |
   |              |            |            |                      |
   +---------------------------------------------------------------+

Please note that the length field in the delta data does *not* include itself.

In version 1, the delta is always applied against the previous node from
the changegroup or the first parent if this is the first entry in the
changegroup.

In version 2 and up, the delta base node is encoded in the entry in the
changegroup. This allows the delta to be expressed against any parent,
which can result in smaller deltas and more efficient encoding of data.

The *flags* field holds bitwise flags affecting the processing of revision
data. The following flags are defined:

32768
   Censored revision. The revision's fulltext has been replaced by censor
   metadata. May only occur on file revisions.
16384
   Ellipsis revision. Revision hash does not match data (likely due to rewritten
   parents).
8192
   Externally stored. The revision fulltext contains ``key:value`` ``\n``
   delimited metadata defining an object stored elsewhere. Used by the LFS
   extension.
4096
   Contains copy information. This revision changes files in a way that could
   affect copy tracing. This does *not* affect changegroup handling, but is
   relevant for other parts of Mercurial.

For historical reasons, the integer values are identical to revlog version 1
per-revision storage flags and correspond to bits being set in this 2-byte
field. Bits were allocated starting from the most-significant bit, hence the
reverse ordering and allocation of these flags.

The *pflags* (protocol flags) field holds bitwise flags affecting the protocol
itself. They are first in the header since they may affect the handling of the
rest of the fields in a future version. They are defined as such:

1 indicates whether to read a chunk of sidedata (of variable length) right
  after the revision flags.


Changeset Segment
=================

The *changeset segment* consists of a single *delta group* holding
changelog data. The *empty chunk* at the end of the *delta group* denotes
the boundary to the *manifest segment*.

Manifest Segment
================

The *manifest segment* consists of a single *delta group* holding manifest
data. If treemanifests are in use, it contains only the manifest for the
root directory of the repository. Otherwise, it contains the entire
manifest data. The *empty chunk* at the end of the *delta group* denotes
the boundary to the next segment (either the *treemanifests segment* or the
*filelogs segment*, depending on version and the request options).

Treemanifests Segment
---------------------

The *treemanifests segment* only exists in changegroup version ``3`` and ``4``,
and only if the 'treemanifest' param is part of the bundle2 changegroup part
(it is not possible to use changegroup version 3 or 4 outside of bundle2).
Aside from the filenames in the *treemanifests segment* containing a
trailing ``/`` character, it behaves identically to the *filelogs segment*
(see below). The final sub-segment is followed by an *empty chunk* (logically,
a sub-segment with filename size 0). This denotes the boundary to the
*filelogs segment*.

Filelogs Segment
================

The *filelogs segment* consists of multiple sub-segments, each
corresponding to an individual file whose data is being described::

   +--------------------------------------------------+
   |          |          |          |     |           |
   | filelog0 | filelog1 | filelog2 | ... |    0x0    |
   |          |          |          |     | (4 bytes) |
   |          |          |          |     |           |
   +--------------------------------------------------+

The final filelog sub-segment is followed by an *empty chunk* (logically,
a sub-segment with filename size 0). This denotes the end of the segment
and of the overall changegroup.

Each filelog sub-segment consists of the following::

   +------------------------------------------------------+
   |                 |                      |             |
   | filename length |       filename       | delta group |
   |    (4 bytes)    | (<length - 4> bytes) |  (various)  |
   |                 |                      |             |
   +------------------------------------------------------+

That is, a *chunk* consisting of the filename (not terminated or padded)
followed by N chunks constituting the *delta group* for this file. The
*empty chunk* at the end of each *delta group* denotes the boundary to the
next filelog sub-segment.
                                                                                                                                                                                                                                                                           usr/lib/python3/dist-packages/mercurial/helptext/internals/config.txt                               0000644 0000000 0000000 00000006163 14355257011 024604  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        All config options used within Mercurial should be registered.

Config Option in Core
=====================

Config options used by Mercurial core are registered in the
``mercurial.configitems`` module.

Simple entry
------------

A registration entry typically looks like::

    coreconfigitem('section', 'option',
        default=MyDefaultValue,
    )

Once registered, Mercurial will know that ``section.option`` is a legitimate
config option and that ``MyDefaultValue`` should be used if no other values are
defined in configuration files.

Complex default value
---------------------

If the default provided is a callable, it is called to retrieve the default
value when accessing the config option. This is useful for default values that
are mutable like the empty list::

    coreconfigitem('pager', 'ignore',
        default=list,
    )

In addition, there are cases where the default is not fixed, but computed from
other properties. In this case, use the ``dynamicdefault`` object as the value
for the ``default`` parameter. A default value is then explicitly required when
reading the option::

    # registration
    coreconfigitem('web', 'name',
        default=dynamicdefault,
    )

    # usage
    ui.config('web', 'name', dirname)

Free form options
-----------------

Some config sections use free form options (e.g. ``paths``). You can register
them using the ``generic`` parameters::

    coreconfigitem('paths', '.*',
        default=None,
        generic=True,
    )

When ``generic=True`` is set, the option name is matched as a regular expression
(rooted to string start). It can be used to select specific sub parameters::

    coreconfigitem('merge-tools', br'.*\.args$',
        default="$local $base $other",
        generic=True,
        priority=-1,
    )

The ``priority`` parameter controls the order used to match the generic pattern
(lower first).

Config Option in Extensions
===========================

General case
------------

Extensions should register config items through the ``registrar`` API (also used
for commands and others)::

    configtable = {}
    configitem = registrar.configitem(configtable)

    configitem('blackbox', 'dirty',
        default=False,
    )

The ``dynamicdefault`` object is then available as
``configitem.dynamicdefault``.

Supporting older versions
-------------------------

The registrar was introduced in Mercurial 4.3, and the ``generic`` parameter was
introduced in 4.4. Starting with Mercurial 4.4, all core options were registered
and developer warnings are emitted when accessing unregistered option.

Extensions supporting versions older than Mercurial 4.3 cannot rely on the
default value being registered. The simplest way to register an option while
still supporting an older version is to use ``dynamicdefault`` for options
requiring a default value. The existing code passing an explicit default can
then stay in use until compatibility with Mercurial 4.2 is dropped.

As reminder, here are the default values for each config type:

    - config:      None
    - configbool:  False
    - configbytes: 0
    - configdate:  None
    - configint:   None
    - configlist:  []
    - configpath:  None
                                                                                                                                                                                                                                                                                                                                                                                                             usr/lib/python3/dist-packages/mercurial/helptext/internals/dirstate-v2.txt                          0000644 0000000 0000000 00000057530 14355257011 025507  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        The *dirstate* is what Mercurial uses internally to track
the state of files in the working directory,
such as set by commands like `hg add` and `hg rm`.
It also contains some cached data that help make `hg status` faster.
The name refers both to `.hg/dirstate` on the filesystem
and the corresponding data structure in memory while a Mercurial process
is running.

The original file format, retroactively dubbed `dirstate-v1`,
is described at https://www.mercurial-scm.org/wiki/DirState.
It is made of a flat sequence of unordered variable-size entries,
so accessing any information in it requires parsing all of it.
Similarly, saving changes requires rewriting the entire file.

The newer `dirstate-v2` file format is designed to fix these limitations
and make `hg status` faster.

User guide
==========

Compatibility
-------------

The file format is experimental and may still change.
Different versions of Mercurial may not be compatible with each other
when working on a local repository that uses this format.
When using an incompatible version with the experimental format,
anything can happen including data corruption.

Since the dirstate is entirely local and not relevant to the wire protocol,
`dirstate-v2` does not affect compatibility with remote Mercurial versions.

When `share-safe` is enabled, different repositories sharing the same store
can use different dirstate formats.

Enabling `dirstate-v2` for new local repositories
------------------------------------------------

When creating a new local repository such as with `hg init` or `hg clone`,
the `use-dirstate-v2` boolean in the `format` configuration section
controls whether to use this file format.
This is disabled by default as of this writing.
To enable it for a single repository, run for example::

    $ hg init my-project --config format.use-dirstate-v2=1

Checking the format of an existing local repository
--------------------------------------------------

The `debugformat` commands prints information about
which of multiple optional formats are used in the current repository,
including `dirstate-v2`::

    $ hg debugformat
    format-variant     repo
    fncache:            yes
    dirstate-v2:        yes
