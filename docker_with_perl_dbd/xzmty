#define PERL_ARGS_ASSERT_MAGIC_SETPOS           \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setregexp(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETREGEXP        \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setsig(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETSIG           \
        assert(mg)

PERL_CALLCONV int
Perl_magic_setsigall(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETSIGALL        \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setsubstr(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETSUBSTR        \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_settaint(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETTAINT         \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setutf8(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETUTF8          \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setuvar(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETUVAR          \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setvec(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETVEC           \
        assert(sv); assert(mg)

PERL_CALLCONV U32
Perl_magic_sizepack(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SIZEPACK         \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_wipepack(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_WIPEPACK         \
        assert(sv); assert(mg)

PERL_CALLCONV Malloc_t
Perl_malloc(MEM_SIZE nbytes)
        __attribute__malloc__
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_MALLOC

PERL_CALLCONV Stack_off_t *
Perl_markstack_grow(pTHX);
#define PERL_ARGS_ASSERT_MARKSTACK_GROW

PERL_CALLCONV int
Perl_mbtowc_(pTHX_ const wchar_t *pwc, const char *s, const Size_t len);
#define PERL_ARGS_ASSERT_MBTOWC_

PERL_CALLCONV SV *
Perl_mess(pTHX_ const char *pat, ...)
        __attribute__format__(__printf__,pTHX_1,pTHX_2);
#define PERL_ARGS_ASSERT_MESS                   \
        assert(pat)

PERL_CALLCONV SV *
Perl_mess_sv(pTHX_ SV *basemsg, bool consume);
#define PERL_ARGS_ASSERT_MESS_SV                \
        assert(basemsg)

PERL_CALLCONV Free_t
Perl_mfree(Malloc_t where);
#define PERL_ARGS_ASSERT_MFREE

PERL_CALLCONV int
Perl_mg_clear(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_MG_CLEAR               \
        assert(sv)

PERL_CALLCONV int
Perl_mg_copy(pTHX_ SV *sv, SV *nsv, const char *key, I32 klen);
#define PERL_ARGS_ASSERT_MG_COPY                \
        assert(sv); assert(nsv)

PERL_CALLCONV MAGIC *
Perl_mg_find(const SV *sv, int type)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_MG_FIND

PERL_CALLCONV MAGIC *
Perl_mg_find_mglob(pTHX_ SV *sv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_MG_FIND_MGLOB          \
        assert(sv)

PERL_CALLCONV MAGIC *
Perl_mg_findext(const SV *sv, int type, const MGVTBL *vtbl)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_MG_FINDEXT

PERL_CALLCONV int
Perl_mg_free(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_MG_FREE                \
        assert(sv)

PERL_CALLCONV void
Perl_mg_free_type(pTHX_ SV *sv, int how);
#define PERL_ARGS_ASSERT_MG_FREE_TYPE           \
        assert(sv)

PERL_CALLCONV void
Perl_mg_freeext(pTHX_ SV *sv, int how, const MGVTBL *vtbl);
#define PERL_ARGS_ASSERT_MG_FREEEXT             \
        assert(sv)

PERL_CALLCONV int
Perl_mg_get(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_MG_GET                 \
        assert(sv)

PERL_CALLCONV void
Perl_mg_localize(pTHX_ SV *sv, SV *nsv, bool setmagic)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MG_LOCALIZE            \
        assert(sv); assert(nsv)

PERL_CALLCONV void
Perl_mg_magical(SV *sv);
#define PERL_ARGS_ASSERT_MG_MAGICAL             \
        assert(sv)

PERL_CALLCONV int
Perl_mg_set(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_MG_SET                 \
        assert(sv)

PERL_CALLCONV I32
Perl_mg_size(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_MG_SIZE                \
        assert(sv)

PERL_CALLCONV void
Perl_mini_mktime(struct tm *ptm);
#define PERL_ARGS_ASSERT_MINI_MKTIME            \
        assert(ptm)

PERL_CALLCONV int
Perl_mode_from_discipline(pTHX_ const char *s, STRLEN len)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MODE_FROM_DISCIPLINE

PERL_CALLCONV void *
Perl_more_bodies(pTHX_ const svtype sv_type, const size_t body_size, const size_t arena_size);
#define PERL_ARGS_ASSERT_MORE_BODIES

PERL_CALLCONV const char *
Perl_moreswitches(pTHX_ const char *s);
#define PERL_ARGS_ASSERT_MORESWITCHES           \
        assert(s)

PERL_CALLCONV void
Perl_mortal_destructor_sv(pTHX_ SV *coderef, SV *args);
#define PERL_ARGS_ASSERT_MORTAL_DESTRUCTOR_SV   \
        assert(coderef)

PERL_CALLCONV void
Perl_mortal_svfunc_x(pTHX_ SVFUNC_t f, SV *p);
#define PERL_ARGS_ASSERT_MORTAL_SVFUNC_X

PERL_CALLCONV const struct mro_alg *
Perl_mro_get_from_name(pTHX_ SV *name);
#define PERL_ARGS_ASSERT_MRO_GET_FROM_NAME      \
        assert(name)

PERL_CALLCONV AV *
Perl_mro_get_linear_isa(pTHX_ HV *stash);
#define PERL_ARGS_ASSERT_MRO_GET_LINEAR_ISA     \
        assert(stash)

PERL_CALLCONV SV *
Perl_mro_get_private_data(pTHX_ struct mro_meta * const smeta, const struct mro_alg * const which);
#define PERL_ARGS_ASSERT_MRO_GET_PRIVATE_DATA   \
        assert(smeta); assert(which)

PERL_CALLCONV void
Perl_mro_isa_changed_in(pTHX_ HV *stash)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MRO_ISA_CHANGED_IN     \
        assert(stash)

PERL_CALLCONV struct mro_meta *
Perl_mro_meta_init(pTHX_ HV *stash);
#define PERL_ARGS_ASSERT_MRO_META_INIT          \
        assert(stash)

PERL_CALLCONV void
Perl_mro_method_changed_in(pTHX_ HV *stash);
#define PERL_ARGS_ASSERT_MRO_METHOD_CHANGED_IN  \
        assert(stash)

PERL_CALLCONV void
Perl_mro_package_moved(pTHX_ HV * const stash, HV * const oldstash, const GV * const gv, U32 flags);
#define PERL_ARGS_ASSERT_MRO_PACKAGE_MOVED      \
        assert(gv)

PERL_CALLCONV void
Perl_mro_register(pTHX_ const struct mro_alg *mro);
#define PERL_ARGS_ASSERT_MRO_REGISTER           \
        assert(mro)

PERL_CALLCONV void
Perl_mro_set_mro(pTHX_ struct mro_meta * const meta, SV * const name);
#define PERL_ARGS_ASSERT_MRO_SET_MRO            \
        assert(meta); assert(name)

PERL_CALLCONV SV *
Perl_mro_set_private_data(pTHX_ struct mro_meta * const smeta, const struct mro_alg * const which, SV * const data);
#define PERL_ARGS_ASSERT_MRO_SET_PRIVATE_DATA   \
        assert(smeta); assert(which); assert(data)

PERL_CALLCONV SV *
Perl_multiconcat_stringify(pTHX_ const OP *o);
#define PERL_ARGS_ASSERT_MULTICONCAT_STRINGIFY  \
        assert(o)

PERL_CALLCONV SV *
Perl_multideref_stringify(pTHX_ const OP *o, CV *cv);
#define PERL_ARGS_ASSERT_MULTIDEREF_STRINGIFY   \
        assert(o)

PERL_CALLCONV NV
Perl_my_atof(pTHX_ const char *s);
#define PERL_ARGS_ASSERT_MY_ATOF                \
        assert(s)

PERL_CALLCONV char *
Perl_my_atof2(pTHX_ const char *orig, NV *value);
#define PERL_ARGS_ASSERT_MY_ATOF2               \
        assert(orig); assert(value)

PERL_CALLCONV char *
Perl_my_atof3(pTHX_ const char *orig, NV *value, const STRLEN len);
#define PERL_ARGS_ASSERT_MY_ATOF3               \
        assert(orig); assert(value)

PERL_CALLCONV OP *
Perl_my_attrs(pTHX_ OP *o, OP *attrs)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MY_ATTRS               \
        assert(o)

PERL_CALLCONV void
Perl_my_clearenv(pTHX);
#define PERL_ARGS_ASSERT_MY_CLEARENV

PERL_CALLCONV int
Perl_my_dirfd(DIR *dir);
#define PERL_ARGS_ASSERT_MY_DIRFD

PERL_CALLCONV_NO_RET void
Perl_my_exit(pTHX_ U32 status)
        __attribute__noreturn__;
#define PERL_ARGS_ASSERT_MY_EXIT

PERL_CALLCONV_NO_RET void
Perl_my_failure_exit(pTHX)
        __attribute__noreturn__;
#define PERL_ARGS_ASSERT_MY_FAILURE_EXIT

PERL_CALLCONV I32
Perl_my_fflush_all(pTHX);
#define PERL_ARGS_ASSERT_MY_FFLUSH_ALL

PERL_CALLCONV Pid_t
Perl_my_fork(void);
#define PERL_ARGS_ASSERT_MY_FORK

/* PERL_CALLCONV I32
my_lstat(pTHX); */

PERL_CALLCONV I32
Perl_my_lstat_flags(pTHX_ const U32 flags);
#define PERL_ARGS_ASSERT_MY_LSTAT_FLAGS

PERL_CALLCONV int
Perl_my_mkostemp_cloexec(char *templte, int flags)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MY_MKOSTEMP_CLOEXEC    \
        assert(templte)

PERL_CALLCONV int
Perl_my_mkstemp_cloexec(char *templte)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MY_MKSTEMP_CLOEXEC     \
        assert(templte)

PERL_CALLCONV PerlIO *
Perl_my_popen_list(pTHX_ const char *mode, int n, SV **args);
#define PERL_ARGS_ASSERT_MY_POPEN_LIST          \
        assert(mode); assert(args)

PERL_CALLCONV void
Perl_my_setenv(pTHX_ const char *nam, const char *val);
#define PERL_ARGS_ASSERT_MY_SETENV

PERL_CALLCONV int
Perl_my_snprintf(char *buffer, const Size_t len, const char *format, ...)
        __attribute__format__(__printf__,3,4);
#define PERL_ARGS_ASSERT_MY_SNPRINTF            \
        assert(buffer); assert(format)

PERL_CALLCONV int
Perl_my_socketpair(int family, int type, int protocol, int fd[2]);
#define PERL_ARGS_ASSERT_MY_SOCKETPAIR

/* PERL_CALLCONV I32
my_stat(pTHX); */

PERL_CALLCONV I32
Perl_my_stat_flags(pTHX_ const U32 flags);
#define PERL_ARGS_ASSERT_MY_STAT_FLAGS

PERL_CALLCONV const char *
Perl_my_strerror(pTHX_ const int errnum, utf8ness_t *utf8ness)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MY_STRERROR            \
        assert(utf8ness)

PERL_CALLCONV char *
Perl_my_strftime(pTHX_ const char *fmt, int sec, int min, int hour, int mday, int mon, int year, int wday, int yday, int isdst)
        __attribute__format__(__strftime__,pTHX_1,0);
#define PERL_ARGS_ASSERT_MY_STRFTIME            \
        assert(fmt)

PERL_CALLCONV NV
Perl_my_strtod(const char * const s, char **e)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_MY_STRTOD              \
        assert(s)

PERL_CALLCONV void
Perl_my_unexec(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MY_UNEXEC

PERL_CALLCONV int
Perl_my_vsnprintf(char *buffer, const Size_t len, const char *format, va_list ap);
#define PERL_ARGS_ASSERT_MY_VSNPRINTF           \
        assert(buffer); assert(format)

PERL_CALLCONV OP *
Perl_newANONATTRSUB(pTHX_ I32 floor, OP *proto, OP *attrs, OP *block);
#define PERL_ARGS_ASSERT_NEWANONATTRSUB

PERL_CALLCONV OP *
Perl_newANONHASH(pTHX_ OP *o)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWANONHASH

PERL_CALLCONV OP *
Perl_newANONLIST(pTHX_ OP *o)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWANONLIST

PERL_CALLCONV OP *
Perl_newANONSUB(pTHX_ I32 floor, OP *proto, OP *block);
#define PERL_ARGS_ASSERT_NEWANONSUB

PERL_CALLCONV OP *
Perl_newARGDEFELEMOP(pTHX_ I32 flags, OP *expr, I32 argindex)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWARGDEFELEMOP        \
        assert(expr)

PERL_CALLCONV OP *
Perl_newASSIGNOP(pTHX_ I32 flags, OP *left, I32 optype, OP *right)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWASSIGNOP

/* PERL_CALLCONV CV *
newATTRSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block); */

PERL_CALLCONV CV *
Perl_newATTRSUB_x(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block, bool o_is_gv);
#define PERL_ARGS_ASSERT_NEWATTRSUB_X

PERL_CALLCONV OP *
Perl_newAVREF(pTHX_ OP *o)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWAVREF               \
        assert(o)

/* PERL_CALLCONV AV *
newAV_alloc_x(pTHX_ SSize_t size)
        __attribute__warn_unused_result__; */

/* PERL_CALLCONV AV *
newAV_alloc_xz(pTHX_ SSize_t size)
        __attribute__warn_unused_result__; */

/* PERL_CALLCONV AV *
newAV_mortal(pTHX)
        __attribute__warn_unused_result__; */

PERL_CALLCONV AV *
Perl_newAVav(pTHX_ AV *oav)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWAVAV

PERL_CALLCONV AV *
Perl_newAVhv(pTHX_ HV *ohv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWAVHV

PERL_CALLCONV OP *
Perl_newBINOP(pTHX_ I32 type, I32 flags, OP *first, OP *last)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWBINOP

PERL_CALLCONV OP *
Perl_newCONDOP(pTHX_ I32 flags, OP *first, OP *trueop, OP *falseop)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWCONDOP              \
        assert(first)

PERL_CALLCONV CV *
Perl_newCONSTSUB(pTHX_ HV *stash, const char *name, SV *sv);
#define PERL_ARGS_ASSERT_NEWCONSTSUB

PERL_CALLCONV CV *
Perl_newCONSTSUB_flags(pTHX_ HV *stash, const char *name, STRLEN len, U32 flags, SV *sv);
#define PERL_ARGS_ASSERT_NEWCONSTSUB_FLAGS

PERL_CALLCONV OP *
Perl_newCVREF(pTHX_ I32 flags, OP *o)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWCVREF

PERL_CALLCONV OP *
Perl_newDEFEROP(pTHX_ I32 flags, OP *block)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWDEFEROP             \
        assert(block)

PERL_CALLCONV OP *
Perl_newDEFSVOP(pTHX)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWDEFSVOP

PERL_CALLCONV void
Perl_newFORM(pTHX_ I32 floor, OP *o, OP *block);
#define PERL_ARGS_ASSERT_NEWFORM

PERL_CALLCONV OP *
Perl_newFOROP(pTHX_ I32 flags, OP *sv, OP *expr, OP *block, OP *cont)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWFOROP               \
        assert(expr)

PERL_CALLCONV OP *
Perl_newGIVENOP(pTHX_ OP *cond, OP *block, PADOFFSET defsv_off)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWGIVENOP             \
        assert(cond); assert(block)

PERL_CALLCONV GP *
Perl_newGP(pTHX_ GV * const gv);
#define PERL_ARGS_ASSERT_NEWGP                  \
        assert(gv)

PERL_CALLCONV OP *
Perl_newGVOP(pTHX_ I32 type, I32 flags, GV *gv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWGVOP                \
        assert(gv)

PERL_CALLCONV OP *
Perl_newGVREF(pTHX_ I32 type, OP *o)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWGVREF

/* PERL_CALLCONV GV *
newGVgen(pTHX_ const char *pack); */

PERL_CALLCONV GV *
Perl_newGVgen_flags(pTHX_ const char *pack, U32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWGVGEN_FLAGS         \
        assert(pack)

PERL_CALLCONV OP *
Perl_newHVREF(pTHX_ OP *o)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWHVREF               \
        assert(o)

PERL_CALLCONV HV *
Perl_newHVhv(pTHX_ HV *hv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWHVHV

PERL_CALLCONV OP *
Perl_newLISTOP(pTHX_ I32 type, I32 flags, OP *first, OP *last)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWLISTOP

PERL_CALLCONV OP *
Perl_newLISTOPn(pTHX_ I32 type, I32 flags, ...)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWLISTOPN

PERL_CALLCONV OP *
Perl_newLOGOP(pTHX_ I32 optype, I32 flags, OP *first, OP *other)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWLOGOP               \
        assert(first); assert(other)

PERL_CALLCONV OP *
Perl_newLOOPEX(pTHX_ I32 type, OP *label)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWLOOPEX              \
        assert(label)

PERL_CALLCONV OP *
Perl_newLOOPOP(pTHX_ I32 flags, I32 debuggable, OP *expr, OP *block)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWLOOPOP              \
        assert(expr)

PERL_CALLCONV OP *
Perl_newMETHOP(pTHX_ I32 type, I32 flags, OP *dynamic_meth)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWMETHOP              \
        assert(dynamic_meth)

PERL_CALLCONV OP *
Perl_newMETHOP_named(pTHX_ I32 type, I32 flags, SV * const_meth)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWMETHOP_NAMED        \
        assert(const_meth)

PERL_CALLCONV CV *
Perl_newMYSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block);
#define PERL_ARGS_ASSERT_NEWMYSUB               \
        assert(o)

PERL_CALLCONV OP *
Perl_newNULLLIST(pTHX)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWNULLLIST

PERL_CALLCONV OP *
Perl_newOP(pTHX_ I32 optype, I32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWOP

PERL_CALLCONV PADNAMELIST *
Perl_newPADNAMELIST(size_t max)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWPADNAMELIST

PERL_CALLCONV PADNAME *
Perl_newPADNAMEouter(PADNAME *outer)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWPADNAMEOUTER        \
        assert(outer)

PERL_CALLCONV PADNAME *
Perl_newPADNAMEpvn(const char *s, STRLEN len)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWPADNAMEPVN          \
        assert(s)

PERL_CALLCONV OP *
Perl_newPMOP(pTHX_ I32 type, I32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWPMOP

PERL_CALLCONV void
Perl_newPROG(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_NEWPROG                \
        assert(o)

PERL_CALLCONV OP *
Perl_newPVOP(pTHX_ I32 type, I32 flags, char *pv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWPVOP

PERL_CALLCONV OP *
Perl_newRANGE(pTHX_ I32 flags, OP *left, OP *right)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWRANGE               \
        assert(left); assert(right)

PERL_CALLCONV SV *
Perl_newRV(pTHX_ SV * const sv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWRV                  \
        assert(sv)

PERL_CALLCONV OP *
Perl_newSLICEOP(pTHX_ I32 flags, OP *subscript, OP *listop)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSLICEOP

PERL_CALLCONV OP *
Perl_newSTATEOP(pTHX_ I32 flags, char *label, OP *o)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSTATEOP

PERL_CALLCONV CV *
Perl_newSTUB(pTHX_ GV *gv, bool fake)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_NEWSTUB                \
        assert(gv)

PERL_CALLCONV SV *
Perl_newSV(pTHX_ const STRLEN len)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSV

PERL_CALLCONV OP *
Perl_newSVOP(pTHX_ I32 type, I32 flags, SV *sv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVOP                \
        assert(sv)

PERL_CALLCONV OP *
Perl_newSVREF(pTHX_ OP *o)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVREF               \
        assert(o)

PERL_CALLCONV SV *
Perl_newSV_false(pTHX)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSV_FALSE

PERL_CALLCONV SV *
Perl_newSV_true(pTHX)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSV_TRUE

PERL_CALLCONV SV *
Perl_newSVavdefelem(pTHX_ AV *av, SSize_t ix, bool extendible)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_NEWSVAVDEFELEM         \
        assert(av)

PERL_CALLCONV SV *
Perl_newSVbool(pTHX_ const bool bool_val)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVBOOL

PERL_CALLCONV SV *
Perl_newSVhek(pTHX_ const HEK * const hek)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVHEK

PERL_CALLCONV SV *
Perl_newSVhek_mortal(pTHX_ const HEK * const hek)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVHEK_MORTAL

PERL_CALLCONV SV *
Perl_newSViv(pTHX_ const IV i)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVIV

PERL_CALLCONV SV *
Perl_newSVnv(pTHX_ const NV n)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVNV

PERL_CALLCONV SV *
Perl_newSVpv(pTHX_ const char * const s, const STRLEN len)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVPV

PERL_CALLCONV SV *
Perl_newSVpv_share(pTHX_ const char *s, U32 hash)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVPV_SHARE

PERL_CALLCONV SV *
Perl_newSVpvf(pTHX_ const char * const pat, ...)
        __attribute__warn_unused_result__
        __attribute__format__(__printf__,pTHX_1,pTHX_2);
#define PERL_ARGS_ASSERT_NEWSVPVF               \
        assert(pat)

PERL_CALLCONV SV *
Perl_newSVpvn(pTHX_ const char * const buffer, const STRLEN len)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVPVN

PERL_CALLCONV SV *
Perl_newSVpvn_flags(pTHX_ const char * const s, const STRLEN len, const U32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVPVN_FLAGS

PERL_CALLCONV SV *
Perl_newSVpvn_share(pTHX_ const char *s, I32 len, U32 hash)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVPVN_SHARE

PERL_CALLCONV SV *
Perl_newSVrv(pTHX_ SV * const rv, const char * const classname);
#define PERL_ARGS_ASSERT_NEWSVRV                \
        assert(rv)

PERL_CALLCONV SV *
Perl_newSVsv_flags(pTHX_ SV * const old, I32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVSV_FLAGS

/* PERL_CALLCONV SV *
newSVsv_nomg(pTHX_ SV * const old)
        __attribute__warn_unused_result__; */

PERL_CALLCONV SV *
Perl_newSVuv(pTHX_ const UV u)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWSVUV

PERL_CALLCONV OP *
Perl_newTRYCATCHOP(pTHX_ I32 flags, OP *tryblock, OP *catchvar, OP *catchblock)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWTRYCATCHOP          \
        assert(tryblock); assert(catchvar); assert(catchblock)

PERL_CALLCONV OP *
Perl_newUNOP(pTHX_ I32 type, I32 flags, OP *first)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWUNOP

PERL_CALLCONV OP *
Perl_newUNOP_AUX(pTHX_ I32 type, I32 flags, OP *first, UNOP_AUX_item *aux)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWUNOP_AUX

PERL_CALLCONV OP *
Perl_newWHENOP(pTHX_ OP *cond, OP *block)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWWHENOP              \
        assert(block)

PERL_CALLCONV OP *
Perl_newWHILEOP(pTHX_ I32 flags, I32 debuggable, LOOP *loop, OP *expr, OP *block, OP *cont, I32 has_my)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEWWHILEOP

PERL_CALLCONV CV *
Perl_newXS(pTHX_ const char *name, XSUBADDR_t subaddr, const char *filename);
#define PERL_ARGS_ASSERT_NEWXS                  \
        assert(subaddr); assert(filename)

PERL_CALLCONV CV *
Perl_newXS_deffile(pTHX_ const char *name, XSUBADDR_t subaddr);
#define PERL_ARGS_ASSERT_NEWXS_DEFFILE          \
        assert(name); assert(subaddr)

PERL_CALLCONV CV *
Perl_newXS_flags(pTHX_ const char *name, XSUBADDR_t subaddr, const char * const filename, const char * const proto, U32 flags);
#define PERL_ARGS_ASSERT_NEWXS_FLAGS            \
        assert(subaddr); assert(filename)

PERL_CALLCONV CV *
Perl_newXS_len_flags(pTHX_ const char *name, STRLEN len, XSUBADDR_t subaddr, const char * const filename, const char * const proto, SV ** const_svp, U32 flags)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_NEWXS_LEN_FLAGS        \
        assert(subaddr)

PERL_CALLCONV PERL_SI *
Perl_new_stackinfo(pTHX_ I32 stitems, I32 cxitems)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEW_STACKINFO

PERL_CALLCONV PERL_SI *
Perl_new_stackinfo_flags(pTHX_ I32 stitems, I32 cxitems, UV flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEW_STACKINFO_FLAGS

PERL_CALLCONV SV *
Perl_new_version(pTHX_ SV *ver);
#define PERL_ARGS_ASSERT_NEW_VERSION            \
        assert(ver)

PERL_CALLCONV char *
Perl_new_warnings_bitfield(pTHX_ char *buffer, const char * const bits, STRLEN size)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_NEW_WARNINGS_BITFIELD  \
        assert(bits)

PERL_CALLCONV PerlIO *
Perl_nextargv(pTHX_ GV *gv, bool nomagicopen)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_NEXTARGV               \
        assert(gv)

PERL_CALLCONV char *
Perl_ninstr(const char *big, const char *bigend, const char *little, const char *lend)
        __attribute__warn_unused_result__
        __attribute__pure__;
#define PERL_ARGS_ASSERT_NINSTR                 \
        assert(big); assert(bigend); assert(little); assert(lend)

PERL_CALLCONV void
Perl_no_bareword_filehandle(pTHX_ const char *fhname)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_NO_BAREWORD_FILEHANDLE \
        assert(fhname)

PERL_CALLCONV_NO_RET void
Perl_noperl_die(const char *pat, ...)
        __attribute__noreturn__
        __attribute__format__(__printf__,1,2);
#define PERL_ARGS_ASSERT_NOPERL_DIE             \
        assert(pat)

PERL_CALLCONV int
Perl_nothreadhook(pTHX);
#define PERL_ARGS_ASSERT_NOTHREADHOOK

PERL_CALLCONV void
Perl_notify_parser_that_changed_to_utf8(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_NOTIFY_PARSER_THAT_CHANGED_TO_UTF8

PERL_CALLCONV OP *
Perl_oopsAV(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_OOPSAV                 \
        assert(o)

PERL_CALLCONV OP *
Perl_oopsHV(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_OOPSHV                 \
        assert(o)

PERL_CALLCONV OP *
Perl_op_append_elem(pTHX_ I32 optype, OP *first, OP *last);
#define PERL_ARGS_ASSERT_OP_APPEND_ELEM

PERL_CALLCONV OP *
Perl_op_append_list(pTHX_ I32 optype, OP *first, OP *last);
#define PERL_ARGS_ASSERT_OP_APPEND_LIST

PERL_CALLCONV OPclass
Perl_op_class(pTHX_ const OP *o);
#define PERL_ARGS_ASSERT_OP_CLASS

PERL_CALLCONV void
Perl_op_clear(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_OP_CLEAR               \
        assert(o)

PERL_CALLCONV OP *
Perl_op_contextualize(pTHX_ OP *o, I32 context);
#define PERL_ARGS_ASSERT_OP_CONTEXTUALIZE       \
        assert(o)

PERL_CALLCONV OP *
Perl_op_convert_list(pTHX_ I32 optype, I32 flags, OP *o)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_OP_CONVERT_LIST

PERL_CALLCONV void
Perl_op_dump(pTHX_ const OP *o);
#define PERL_ARGS_ASSERT_OP_DUMP                \
        assert(o)

PERL_CALLCONV OP *
Perl_op_force_list(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_OP_FORCE_LIST

PERL_CALLCONV void
Perl_op_free(pTHX_ OP *arg);
#define PERL_ARGS_ASSERT_OP_FREE

PERL_CALLCONV OP *
Perl_op_linklist(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_OP_LINKLIST            \
        assert(o)

/* PERL_CALLCONV OP *
op_lvalue(pTHX_ OP *o, I32 type); */

PERL_CALLCONV OP *
Perl_op_lvalue_flags(pTHX_ OP *o, I32 type, U32 flags);
#define PERL_ARGS_ASSERT_OP_LVALUE_FLAGS

PERL_CALLCONV void
Perl_op_null(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_OP_NULL                \
        assert(o)

PERL_CALLCONV OP *
Perl_op_parent(OP *o);
#define PERL_ARGS_ASSERT_OP_PARENT              \
        assert(o)

PERL_CALLCONV OP *
Perl_op_prepend_elem(pTHX_ I32 optype, OP *first, OP *last);
#define PERL_ARGS_ASSERT_OP_PREPEND_ELEM

PERL_CALLCONV void
Perl_op_refcnt_lock(pTHX);
#define PERL_ARGS_ASSERT_OP_REFCNT_LOCK

PERL_CALLCONV void
Perl_op_refcnt_unlock(pTHX);
#define PERL_ARGS_ASSERT_OP_REFCNT_UNLOCK

PERL_CALLCONV OP *
Perl_op_scope(pTHX_ OP *o);
#define PERL_ARGS_ASSERT_OP_SCOPE

PERL_CALLCONV OP *
Perl_op_sibling_splice(OP *parent, OP *start, int del_count, OP *insert);
#define PERL_ARGS_ASSERT_OP_SIBLING_SPLICE

PERL_CALLCONV OP *
Perl_op_unscope(pTHX_ OP *o)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_OP_UNSCOPE

PERL_CALLCONV OP *
Perl_op_wrap_finally(pTHX_ OP *block, OP *finally)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_OP_WRAP_FINALLY        \
        assert(block); assert(finally)

PERL_CALLCONV void
Perl_package(pTHX_ OP *o)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_PACKAGE                \
        assert(o)

PERL_CALLCONV void
Perl_package_version(pTHX_ OP *v)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_PACKAGE_VERSION        \
        assert(v)

PERL_CALLCONV void
Perl_packlist(pTHX_ SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist);
#define PERL_ARGS_ASSERT_PACKLIST               \
        assert(cat); assert(pat); assert(patend); assert(beglist); assert(endlist)

PERL_CALLCONV PADOFFSET
Perl_pad_add_anon(pTHX_ CV *func, I32 optype);
#define PERL_ARGS_ASSERT_PAD_ADD_ANON           \
        assert(func)

PERL_CALLCONV PADOFFSET
Perl_pad_add_name_pv(pTHX_ const char *name, const U32 flags, HV *typestash, HV *ourstash);
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_PV        \
        assert(name)

PERL_CALLCONV PADOFFSET
Perl_pad_add_name_pvn(pTHX_ const char *namepv, STRLEN namelen, U32 flags, HV *typestash, HV *ourstash);
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_PVN       \
        assert(namepv)

PERL_CALLCONV PADOFFSET
Perl_pad_add_name_sv(pTHX_ SV *name, U32 flags, HV *typestash, HV *ourstash);
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_SV        \
        assert(name)

PERL_CALLCONV void
Perl_pad_add_weakref(pTHX_ CV *func)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_PAD_ADD_WEAKREF        \
        assert(func)

