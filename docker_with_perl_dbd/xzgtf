
  my $info = $dbh->{Driver}->visit_child_handles(sub {
      my ($h, $info) = @_;
      ++$info->{ $h->{Type} }; # count types of handles (dr/db/st)
      return $info; # visit kids
  });

See also L</visit_child_handles>.

=head2 DBI Utility Functions

In addition to the DBI methods listed in the previous section,
the DBI package also provides several utility functions.

These can be imported into your code by listing them in
the C<use> statement. For example:

  use DBI qw(neat data_diff);

Alternatively, all these utility functions (except hash) can be
imported using the C<:utils> import tag. For example:

  use DBI qw(:utils);

=head3 C<data_string_desc>

  $description = data_string_desc($string);

Returns an informal description of the string. For example:

  UTF8 off, ASCII, 42 characters 42 bytes
  UTF8 off, non-ASCII, 42 characters 42 bytes
  UTF8 on, non-ASCII, 4 characters 6 bytes
  UTF8 on but INVALID encoding, non-ASCII, 4 characters 6 bytes
  UTF8 off, undef

The initial C<UTF8> on/off refers to Perl's internal SvUTF8 flag.
If $string has the SvUTF8 flag set but the sequence of bytes it
contains are not a valid UTF-8 encoding then data_string_desc()
will report C<UTF8 on but INVALID encoding>.

The C<ASCII> vs C<non-ASCII> portion shows C<ASCII> if I<all> the
characters in the string are ASCII (have code points <= 127).

The data_string_desc() function was added in DBI 1.46.

=head3 C<data_string_diff>

  $diff = data_string_diff($a, $b);

Returns an informal description of the first character difference
between the strings. If both $a and $b contain the same sequence
of characters then data_string_diff() returns an empty string.
For example:

 Params a & b     Result
 ------------     ------
 'aaa', 'aaa'     ''
 'aaa', 'abc'     'Strings differ at index 2: a[2]=a, b[2]=b'
 'aaa', undef     'String b is undef, string a has 3 characters'
 'aaa', 'aa'      'String b truncated after 2 characters'

Unicode characters are reported in C<\x{XXXX}> format. Unicode
code points in the range U+0800 to U+08FF are unassigned and most
likely to occur due to double-encoding. Characters in this range
are reported as C<\x{08XX}='C'> where C<C> is the corresponding
latin-1 character.

The data_string_diff() function only considers logical I<characters>
and not the underlying encoding. See L</data_diff> for an alternative.

The data_string_diff() function was added in DBI 1.46.

=head3 C<data_diff>

  $diff = data_diff($a, $b);
  $diff = data_diff($a, $b, $logical);

Returns an informal description of the difference between two strings.
It calls L</data_string_desc> and L</data_string_diff>
and returns the combined results as a multi-line string.

For example, C<data_diff("abc", "ab\x{263a}")> will return:

  a: UTF8 off, ASCII, 3 characters 3 bytes
  b: UTF8 on, non-ASCII, 3 characters 5 bytes
  Strings differ at index 2: a[2]=c, b[2]=\x{263A}

If $a and $b are identical in both the characters they contain I<and>
their physical encoding then data_diff() returns an empty string.
If $logical is true then physical encoding differences are ignored
(but are still reported if there is a difference in the characters).

The data_diff() function was added in DBI 1.46.

=head3 C<neat>

  $str = neat($value);
  $str = neat($value, $maxlen);

Return a string containing a neat (and tidy) representation of the
supplied value.

Strings will be quoted, although internal quotes will I<not> be escaped.
Values known to be numeric will be unquoted. Undefined (NULL) values
will be shown as C<undef> (without quotes).

If the string is flagged internally as utf8 then double quotes will
be used, otherwise single quotes are used and unprintable characters
will be replaced by dot (.).

For result strings longer than C<$maxlen> the result string will be
truncated to C<$maxlen-4> and "C<...'>" will be appended.  If C<$maxlen> is 0
or C<undef>, it defaults to C<$DBI::neat_maxlen> which, in turn, defaults to 400.

This function is designed to format values for human consumption.
It is used internally by the DBI for L</trace> output. It should
typically I<not> be used for formatting values for database use.
(See also L</quote>.)

=head3 C<neat_list>

  $str = neat_list(\@listref, $maxlen, $field_sep);

Calls C<neat> on each element of the list and returns a string
containing the results joined with C<$field_sep>. C<$field_sep> defaults
to C<", ">.

=head3 C<looks_like_number>

  @bool = looks_like_number(@array);

Returns true for each element that looks like a number.
Returns false for each element that does not look like a number.
Returns C<undef> for each element that is undefined or empty.

=head3 C<hash>

  $hash_value = DBI::hash($buffer, $type);

Return a 32-bit integer 'hash' value corresponding to the contents of $buffer.
The $type parameter selects which kind of hash algorithm should be used.

For the technically curious, type 0 (which is the default if $type
isn't specified) is based on the Perl 5.1 hash except that the value
is forced to be negative (for obscure historical reasons).
Type 1 is the better "Fowler / Noll / Vo" (FNV) hash. See
L<http://www.isthe.com/chongo/tech/comp/fnv/> for more information.
Both types are implemented in C and are very fast.

This function doesn't have much to do with databases, except that
it can sometimes be handy to store such values in a database.
It also doesn't have much to do with perl hashes, like %foo.

=head3 C<sql_type_cast>

  $sts = DBI::sql_type_cast($sv, $sql_type, $flags);

sql_type_cast attempts to cast C<$sv> to the SQL type (see L<DBI
Constants>) specified in C<$sql_type>. At present only the SQL types
C<SQL_INTEGER>, C<SQL_DOUBLE> and C<SQL_NUMERIC> are supported.

For C<SQL_INTEGER> the effect is similar to using the value in an expression
that requires an integer. It gives the perl scalar an 'integer aspect'.
(Technically the value gains an IV, or possibly a UV or NV if the value is too
large for an IV.)

For C<SQL_DOUBLE> the effect is similar to using the value in an expression
that requires a general numeric value. It gives the perl scalar a 'numeric
aspect'.  (Technically the value gains an NV.)

C<SQL_NUMERIC> is similar to C<SQL_INTEGER> or C<SQL_DOUBLE> but more
general and more cautious.  It will look at the string first and if it
looks like an integer (that will fit in an IV or UV) it will act like
C<SQL_INTEGER>, if it looks like a floating point value it will act
like C<SQL_DOUBLE>, if it looks like neither then it will do nothing -
and thereby avoid the warnings that would be generated by
C<SQL_INTEGER> and C<SQL_DOUBLE> when given non-numeric data.

C<$flags> may be:

=over 4

=item C<DBIstcf_DISCARD_STRING>

If this flag is specified then when the driver successfully casts the
bound perl scalar to a non-string type then the string portion of the
scalar will be discarded.

=item C<DBIstcf_STRICT>

If C<$sv> cannot be cast to the requested C<$sql_type> then by default
it is left untouched and no error is generated. If you specify
C<DBIstcf_STRICT> and the cast fails, this will generate an error.

=back

The returned C<$sts> value is:

  -2 sql_type is not handled
  -1 sv is undef so unchanged
   0 sv could not be cast cleanly and DBIstcf_STRICT was used
   1 sv could not be cast and DBIstcf_STRICT was not used
   2 sv was cast successfully

This method is exported by the :utils tag and was introduced in DBI
1.611.

=head2 DBI Dynamic Attributes

Dynamic attributes are always associated with the I<last handle used>
(that handle is represented by C<$h> in the descriptions below).

Where an attribute is equivalent to a method call, then refer to
the method call for all related documentation.

Warning: these attributes are provided as a convenience but they
do have limitations. Specifically, they have a short lifespan:
because they are associated with
the last handle used, they should only be used I<immediately> after
calling the method that "sets" them.
If in any doubt, use the corresponding method call.

=head3 C<$DBI::err>

Equivalent to C<$h-E<gt>err>.

=head3 C<$DBI::errstr>

Equivalent to C<$h-E<gt>errstr>.

=head3 C<$DBI::state>

Equivalent to C<$h-E<gt>state>.

=head3 C<$DBI::rows>

Equivalent to C<$h-E<gt>rows>. Please refer to the documentation
for the L</rows> method.

=head3 C<$DBI::lasth>

Returns the DBI object handle used for the most recent DBI method call.
If the last DBI method call was a DESTROY then $DBI::lasth will return
the handle of the parent of the destroyed handle, if there is one.


=head1 METHODS COMMON TO ALL HANDLES

The following methods can be used by all types of DBI handles.

=head3 C<err>

  $rv = $h->err;

Returns the I<native> database engine error code from the last driver
method called. The code is typically an integer but you should not
assume that.

The DBI resets $h->err to undef before almost all DBI method calls, so the
value only has a short lifespan. Also, for most drivers, the statement
handles share the same error variable as the parent database handle,
so calling a method on one handle may reset the error on the
related handles.

(Methods which don't reset err before being called include err() and errstr(),
obviously, state(), rows(), func(), trace(), trace_msg(), ping(), and the
tied hash attribute FETCH() and STORE() methods.)

If you need to test for specific error conditions I<and> have your program be
portable to different database engines, then you'll need to determine what the
corresponding error codes are for all those engines and test for all of them.

The DBI uses the value of $DBI::stderr as the C<err> value for internal errors.
Drivers should also do likewise.  The default value for $DBI::stderr is 2000000000.

A driver may return C<0> from err() to indicate a warning condition
after a method call. Similarly, a driver may return an empty string
to indicate a 'success with information' condition. In both these
cases the value is false but not undef. The errstr() and state()
methods may be used to retrieve extra information in these cases.

See L</set_err> for more information.

=head3 C<errstr>

  $str = $h->errstr;

Returns the native database engine error message from the last DBI
method called. This has the same lifespan issues as the L</err> method
described above.

The returned string may contain multiple messages separated by
newline characters.

The errstr() method should not be used to test for errors, use err()
for that, because drivers may return 'success with information' or
warning messages via errstr() for methods that have not 'failed'.

See L</set_err> for more information.

=head3 C<state>

  $str = $h->state;

Returns a state code in the standard SQLSTATE five character format.
Note that the specific success code C<00000> is translated to any empty string
(false). If the driver does not support SQLSTATE (and most don't),
then state() will return C<S1000> (General Error) for all errors.

The driver is free to return any value via C<state>, e.g., warning
codes, even if it has not declared an error by returning a true value
via the L</err> method described above.

The state() method should not be used to test for errors, use err()
for that, because drivers may return a 'success with information' or
warning state code via state() for methods that have not 'failed'.

=head3 C<set_err>

  $rv = $h->set_err($err, $errstr);
  $rv = $h->set_err($err, $errstr, $state);
  $rv = $h->set_err($err, $errstr, $state, $method);
  $rv = $h->set_err($err, $errstr, $state, $method, $rv);

Set the C<err>, C<errstr>, and C<state> values for the handle.
This method is typically only used by DBI drivers and DBI subclasses.

If the L</HandleSetErr> attribute holds a reference to a subroutine
it is called first. The subroutine can alter the $err, $errstr, $state,
and $method values. See L</HandleSetErr> for full details.
If the subroutine returns a true value then the handle C<err>,
C<errstr>, and C<state> values are not altered and set_err() returns
an empty list (it normally returns $rv which defaults to undef, see below).

Setting C<err> to a I<true> value indicates an error and will trigger
the normal DBI error handling mechanisms, such as C<RaiseError> and
C<HandleError>, if they are enabled, when execution returns from
the DBI back to the application.

Setting C<err> to C<""> indicates an 'information' state, and setting
it to C<"0"> indicates a 'warning' state. Setting C<err> to C<undef>
also sets C<errstr> to undef, and C<state> to C<"">, irrespective
of the values of the $errstr and $state parameters.

The $method parameter provides an alternate method name for the
C<RaiseError>/C<PrintError>/C<RaiseWarn>/C<PrintWarn> error string instead of
the fairly unhelpful 'C<set_err>'.

The C<set_err> method normally returns undef.  The $rv parameter
provides an alternate return value.

Some special rules apply if the C<err> or C<errstr>
values for the handle are I<already> set...

If C<errstr> is true then: "C< [err was %s now %s]>" is appended if $err is
true and C<err> is already true and the new err value differs from the original
one. Similarly "C< [state was %s now %s]>" is appended if $state is true and C<state> is
already true and the new state value differs from the original one. Finally
"C<\n>" and the new $errstr are appended if $errstr differs from the existing
errstr value. Obviously the C<%s>'s above are replaced by the corresponding values.

The handle C<err> value is set to $err if: $err is true; or handle
C<err> value is undef; or $err is defined and the length is greater
than the handle C<err> length. The effect is that an 'information'
state only overrides undef; a 'warning' overrides undef or 'information',
and an 'error' state overrides anything.

The handle C<state> value is set to $state if $state is true and
the handle C<err> value was set (by the rules above).

Support for warning and information states was added in DBI 1.41.

=head3 C<trace>

  $h->trace($trace_settings);
  $h->trace($trace_settings, $trace_filename);
  $trace_settings = $h->trace;

The trace() method is used to alter the trace settings for a handle
(and any future children of that handle).  It can also be used to
change where the trace output is sent.

There's a similar method, C<DBI-E<gt>trace>, which sets the global
default trace settings.

See the L</TRACING> section for full details about the DBI's powerful
tracing facilities.

=head3 C<trace_msg>

  $h->trace_msg($message_text);
  $h->trace_msg($message_text, $min_level);

Writes C<$message_text> to the trace file if the trace level is
greater than or equal to $min_level (which defaults to 1).
Can also be called as C<DBI-E<gt>trace_msg($msg)>.

See L</TRACING> for more details.

=head3 C<func>

  $h->func(@func_arguments, $func_name) or die ...;

The C<func> method can be used to call private non-standard and
non-portable methods implemented by the driver. Note that the function
name is given as the I<last> argument.

It's also important to note that the func() method does not clear
a previous error ($DBI::err etc.) and it does not trigger automatic
error detection (RaiseError etc.) so you must check the return
status and/or $h->err to detect errors.

(This method is not directly related to calling stored procedures.
Calling stored procedures is currently not defined by the DBI.
Some drivers, such as DBD::Oracle, support it in non-portable ways.
See driver documentation for more details.)

See also install_method() in L<DBI::DBD> for how you can avoid needing to
use func() and gain direct access to driver-private methods.

=head3 C<can>

  $is_implemented = $h->can($method_name);

Returns true if $method_name is implemented by the driver or a
default method is provided by the DBI's driver base class.
It returns false where a driver hasn't implemented a method and the
default method is provided by the DBI's driver base class is just an empty stub.

=head3 C<parse_trace_flags>

  $trace_settings_integer = $h->parse_trace_flags($trace_settings);

Parses a string containing trace settings and returns the corresponding
integer value used internally by the DBI and drivers.

The $trace_settings argument is a string containing a trace level
between 0 and 15 and/or trace flag names separated by vertical bar
("C<|>") or comma ("C<,>") characters. For example: C<"SQL|3|foo">.

It uses the parse_trace_flag() method, described below, to process
the individual trace flag names.

The parse_trace_flags() method was added in DBI 1.42.

=head3 C<parse_trace_flag>

  $bit_flag = $h->parse_trace_flag($trace_flag_name);

Returns the bit flag corresponding to the trace flag name in
$trace_flag_name.  Drivers are expected to override this method and
check if $trace_flag_name is a driver specific trace flags and, if
not, then call the DBI's default parse_trace_flag().

The parse_trace_flag() method was added in DBI 1.42.

=head3 C<private_attribute_info>

  $hash_ref = $h->private_attribute_info();

Returns a reference to a hash whose keys are the names of driver-private
handle attributes available for the kind of handle (driver, database, statement)
that the method was called on.

For example, the return value when called with a DBD::Sybase $dbh could look like this:

  {
      syb_dynamic_supported => undef,
      syb_oc_version => undef,
      syb_server_version => undef,
      syb_server_version_string => undef,
  }

and when called with a DBD::Sybase $sth they could look like this:

  {
      syb_types => undef,
      syb_proc_status => undef,
      syb_result_type => undef,
  }

The values should be undef. Meanings may be assigned to particular values in future.

=head3 C<swap_inner_handle>

  $rc = $h1->swap_inner_handle( $h2 );
  $rc = $h1->swap_inner_handle( $h2, $allow_reparent );

Brain transplants for handles. You don't need to know about this
unless you want to become a handle surgeon.

A DBI handle is a reference to a tied hash. A tied hash has an
I<inner> hash that actually holds the contents.  The swap_inner_handle()
method swaps the inner hashes between two handles. The $h1 and $h2
handles still point to the same tied hashes, but what those hashes
are tied to has been swapped.  In effect $h1 I<becomes> $h2 and
vice-versa. This is powerful stuff, expect problems. Use with care.

As a small safety measure, the two handles, $h1 and $h2, have to
share the same parent unless $allow_reparent is true.

The swap_inner_handle() method was added in DBI 1.44.

Here's a quick kind of 'diagram' as a worked example to help think about what's
happening:

    Original state:
            dbh1o -> dbh1i
            sthAo -> sthAi(dbh1i)
            dbh2o -> dbh2i

    swap_inner_handle dbh1o with dbh2o:
            dbh2o -> dbh1i
            sthAo -> sthAi(dbh1i)
            dbh1o -> dbh2i

    create new sth from dbh1o:
            dbh2o -> dbh1i
            sthAo -> sthAi(dbh1i)
            dbh1o -> dbh2i
            sthBo -> sthBi(dbh2i)

    swap_inner_handle sthAo with sthBo:
            dbh2o -> dbh1i
            sthBo -> sthAi(dbh1i)
            dbh1o -> dbh2i
            sthAo -> sthBi(dbh2i)

=head3 C<visit_child_handles>

  $h->visit_child_handles( $coderef );
  $h->visit_child_handles( $coderef, $info );

Where $coderef is a reference to a subroutine and $info is an arbitrary value
which, if undefined, defaults to a reference to an empty hash. Returns $info.

For each child handle of $h, if any, $coderef is invoked as:

  $coderef->($child_handle, $info);

If the execution of $coderef returns a true value then C<visit_child_handles>
is called on that child handle and passed the returned value as $info.

For example:

  # count database connections with names (DSN) matching a pattern
  my $connections = 0;
  $dbh->{Driver}->visit_child_handles(sub {
      my ($h, $info) = @_;
      ++$connections if $h->{Name} =~ /foo/;
      return 0; # don't visit kids
  })

See also L</visit_handles>.

=head1 ATTRIBUTES COMMON TO ALL HANDLES

These attributes are common to all types of DBI handles.

Some attributes are inherited by child handles. That is, the value
of an inherited attribute in a newly created statement handle is the
same as the value in the parent database handle. Changes to attributes
in the new statement handle do not affect the parent database handle
and changes to the database handle do not affect existing statement
handles, only future ones.

Attempting to set or get the value of an unknown attribute generates a warning,
except for private driver specific attributes (which all have names
starting with a lowercase letter).

Example:

  $h->{AttributeName} = ...;	# set/write
  ... = $h->{AttributeName};	# get/read

=head3 C<Warn>

Type: boolean, inherited

The C<Warn> attribute enables useful warnings for certain bad
practices. It is enabled by default and should only be disabled in
rare circumstances.  Since warnings are generated using the Perl
C<warn> function, they can be intercepted using the Perl C<$SIG{__WARN__}>
hook.

The C<Warn> attribute is not related to the C<PrintWarn> attribute.

=head3 C<Active>

Type: boolean, read-only

The C<Active> attribute is true if the handle object is "active". This is rarely used in
applications. The exact meaning of active is somewhat vague at the
moment. For a database handle it typically means that the handle is
connected to a database (C<$dbh-E<gt>disconnect> sets C<Active> off).  For
a statement handle it typically means that the handle is a C<SELECT>
that may have more data to fetch. (Fetching all the data or calling C<$sth-E<gt>finish>
sets C<Active> off.)

=head3 C<Executed>

Type: boolean

The C<Executed> attribute is true if the handle object has been "executed".
Currently only the $dbh do() method and the $sth execute(), execute_array(),
and execute_for_fetch() methods set the C<Executed> attribute.

When it's set on a handle it is also set on the parent handle at the
same time. So calling execute() on a $sth also sets the C<Executed>
attribute on the parent $dbh.

The C<Executed> attribute for a database handle is cleared by the commit() and
rollback() methods (even if they fail). The C<Executed> attribute of a
statement handle is not cleared by the DBI under any circumstances and so acts
as a permanent record of whether the statement handle was ever used.

The C<Executed> attribute was added in DBI 1.41.

=head3 C<Kids>

Type: integer, read-only

For a driver handle, C<Kids> is the number of currently existing database
handles that were created from that driver handle.  For a database
handle, C<Kids> is the number of currently existing statement handles that
were created from that database handle.
For a statement handle, the value is zero.

=head3 C<ActiveKids>

Type: integer, read-only

Like C<Kids>, but only counting those that are C<Active> (as above).

=head3 C<CachedKids>

Type: hash ref

For a database handle, C<CachedKids> returns a reference to the cache (hash) of
statement handles created by the L</prepare_cached> method.  For a
driver handle, returns a reference to the cache (hash) of
database handles created by the L</connect_cached> method.

=head3 C<Type>

Type: scalar, read-only

The C<Type> attribute identifies the type of a DBI handle.  Returns
"dr" for driver handles, "db" for database handles and "st" for
statement handles.

=head3 C<ChildHandles>

Type: array ref

The ChildHandles attribute contains a reference to an array of all the
handles created by this handle which are still accessible.  The
contents of the array are weak-refs and will become undef when the
handle goes out of scope. (They're cleared out occasionally.)

C<ChildHandles> returns undef if your perl version does not support weak
references (check the L<Scalar::Util|Scalar::Util> module).  The referenced
array returned should be treated as read-only.

For example, to enumerate all driver handles, database handles and
statement handles:

    sub show_child_handles {
        my ($h, $level) = @_;
        printf "%sh %s %s\n", $h->{Type}, "\t" x $level, $h;
        show_child_handles($_, $level + 1)
            for (grep { defined } @{$h->{ChildHandles}});
    }

    my %drivers = DBI->installed_drivers();
    show_child_handles($_, 0) for (values %drivers);

=head3 C<CompatMode>

Type: boolean, inherited

The C<CompatMode> attribute is used by emulation layers (such as
Oraperl) to enable compatible behaviour in the underlying driver
(e.g., DBD::Oracle) for this handle. Not normally set by application code.

It also has the effect of disabling the 'quick FETCH' of attribute
values from the handles attribute cache. So all attribute values
are handled by the drivers own FETCH method. This makes them slightly
slower but is useful for special-purpose drivers like DBD::Multiplex.

=head3 C<InactiveDestroy>

Type: boolean

The default value, false, means a handle will be fully destroyed
as normal when the last reference to it is removed, just as you'd expect.

If set true then the handle will be treated by the DESTROY as if it was no
longer Active, and so the I<database engine> related effects of DESTROYing a
handle will be skipped.  Think of the name as meaning 'treat the handle as
not-Active in the DESTROY method'.

For a database handle, this attribute does not disable an I<explicit>
call to the disconnect method, only the implicit call from DESTROY
that happens if the handle is still marked as C<Active>.

This attribute is specifically designed for use in Unix applications
that "fork" child processes.  For some drivers, when the child process exits
the destruction of inherited handles cause the corresponding handles in the
parent process to cease working.

Either the parent or the child process, but not both, should set
C<InactiveDestroy> true on all their shared handles. Alternatively, and
preferably, the L</AutoInactiveDestroy> can be set in the parent on connect.

To help tracing applications using fork the process id is shown in
the trace log whenever a DBI or handle trace() method is called.
The process id also shown for I<every> method call if the DBI trace
level (not handle trace level) is set high enough to show the trace
from the DBI's method dispatcher, e.g. >= 9.

=head3 C<AutoInactiveDestroy>

Type: boolean, inherited

The L</InactiveDestroy> attribute, described above, needs to be explicitly set
in the child process after a fork(), on every active database and statement handle.
This is a problem if the code that performs the fork() is not under your
control, perhaps in a third-party module.  Use C<AutoInactiveDestroy> to get
around this situation.

If set true, the DESTROY method will check the process id of the handle and, if
different from the current process id, it will set the I<InactiveDestroy> attribute.
It is strongly recommended that C<AutoInactiveDestroy> is enabled on all new code
(it's only not enabled by default to avoid backwards compatibility problems).

This is the example it's designed to deal with:

    my $dbh = DBI->connect(...);
    some_code_that_forks(); # Perhaps without your knowledge
    # Child process dies, destroying the inherited dbh
    $dbh->do(...); # Breaks because parent $dbh is now broken

The C<AutoInactiveDestroy> attribute was added in DBI 1.614.

=head3 C<PrintWarn>

Type: boolean, inherited

The C<PrintWarn> attribute controls the printing of warnings recorded
by the driver.  When set to a true value (the default) the DBI will check method
calls to see if a warning condition has been set. If so, the DBI
will effectively do a C<warn("$class $method warning: $DBI::errstr")>
where C<$class> is the driver class and C<$method> is the name of
the method which failed. E.g.,

  DBD::Oracle::db execute warning: ... warning text here ...

If desired, the warnings can be caught and processed using a C<$SIG{__WARN__}>
handler or modules like CGI::Carp and CGI::ErrorWrap.

See also L</set_err> for how warnings are recorded and L</HandleSetErr>
for how to influence it.

Fetching the full details of warnings can require an extra round-trip
to the database server for some drivers. In which case the driver
may opt to only fetch the full details of warnings if the C<PrintWarn>
attribute is true. If C<PrintWarn> is false then these drivers should
still indicate the fact that there were warnings by setting the
warning string to, for example: "3 warnings".

=head3 C<PrintError>

Type: boolean, inherited

The C<PrintError> attribute can be used to force errors to generate warnings (using
C<warn>) in addition to returning error codes in the normal way.  When set
"on", any method which results in an error occurring will cause the DBI to
effectively do a C<warn("$class $method failed: $DBI::errstr")> where C<$class>
is the driver class and C<$method> is the name of the method which failed. E.g.,

  DBD::Oracle::db prepare failed: ... error text here ...

By default, C<DBI-E<gt>connect> sets C<PrintError> "on".

If desired, the warnings can be caught and processed using a C<$SIG{__WARN__}>
handler or modules like CGI::Carp and CGI::ErrorWrap.

=head3 C<RaiseWarn>

Type: boolean, inherited

The C<RaiseWarn> attribute can be used to force warnings to raise exceptions rather
then simply printing them. It is "off" by default.
When set "on", any method which sets warning condition will cause
the DBI to effectively do a C<die("$class $method warning: $DBI::errstr")>,
where C<$class> is the driver class and C<$method> is the name of the method
that sets warning condition. E.g.,

  DBD::Oracle::db execute warning: ... warning text here ...

If you turn C<RaiseWarn> on then you'd normally turn C<PrintWarn> off.
If C<PrintWarn> is also on, then the C<PrintWarn> is done first (naturally).

This attribute was added in DBI 1.643.

=head3 C<RaiseError>

Type: boolean, inherited

The C<RaiseError> attribute can be used to force errors to raise exceptions rather
than simply return error codes in the normal way. It is "off" by default.
When set "on", any method which results in an error will cause
the DBI to effectively do a C<die("$class $method failed: $DBI::errstr")>,
where C<$class> is the driver class and C<$method> is the name of the method
that failed. E.g.,

  DBD::Oracle::db prepare failed: ... error text here ...

If you turn C<RaiseError> on then you'd normally turn C<PrintError> off.
If C<PrintError> is also on, then the C<PrintError> is done first (naturally).

Typically C<RaiseError> is used in conjunction with C<eval>,
or a module like L<Try::Tiny> or L<TryCatch>,
to catch the exception that's been thrown and handle it.
For example:

  use Try::Tiny;

  try {
    ...
    $sth->execute();
    ...
  } catch {
    # $sth->err and $DBI::err will be true if error was from DBI
    warn $_; # print the error (which Try::Tiny puts into $_)
    ... # do whatever you need to deal with the error
  };

In the catch block the $DBI::lasth variable can be useful for
diagnosis and reporting if you can't be sure which handle triggered
the error.  For example, $DBI::lasth->{Type} and $DBI::lasth->{Statement}.

See also L</Transactions>.

If you want to temporarily turn C<RaiseError> off (inside a library function
that is likely to fail, for example), the recommended way is like this:

  {
    local $h->{RaiseError};  # localize and turn off for this block
    ...
  }

The original value will automatically and reliably be restored by Perl,
regardless of how the block is exited.
The same logic applies to other attributes, including C<PrintError>.

=head3 C<HandleError>

Type: code ref, inherited

The C<HandleError> attribute can be used to provide your own alternative behaviour
in case of errors. If set to a reference to a subroutine then that
subroutine is called when an error is detected (at the same point that
C<RaiseError> and C<PrintError> are handled). It is called also when
C<RaiseWarn> is enabled and a warning is detected.

The subroutine is called with three parameters: the error message
string that C<RaiseError>, C<RaiseWarn> or C<PrintError> would use,
the DBI handle being used, and the first value being returned by
the method that failed (typically undef).

If the subroutine returns a false value then the C<RaiseError>, C<RaiseWarn>
and/or C<PrintError> attributes are checked and acted upon as normal.

For example, to C<die> with a full stack trace for any error:

  use Carp;
  $h->{HandleError} = sub { confess(shift) };

Or to turn errors into exceptions:

  use Exception; # or your own favourite exception module
  $h->{HandleError} = sub { Exception->new('DBI')->raise($_[0]) };

It is possible to 'stack' multiple HandleError handlers by using
closures:

  sub your_subroutine {
    my $previous_handler = $h->{HandleError};
    $h->{HandleError} = sub {
      return 1 if $previous_handler and &$previous_handler(@_);
      ... your code here ...
    };
  }

Using a C<my> inside a subroutine to store the previous C<HandleError>
value is important.  See L<perlsub> and L<perlref> for more information
about I<closures>.

It is possible for C<HandleError> to alter the error message that
will be used by C<RaiseError>, C<RaiseWarn> and C<PrintError> if it returns false.
It can do that by altering the value of $_[0]. This example appends
a stack trace to all errors and, unlike the previous example using
Carp::confess, this will work C<PrintError> as well as C<RaiseError>:

  $h->{HandleError} = sub { $_[0]=Carp::longmess($_[0]); 0; };

It is also possible for C<HandleError> to hide an error, to a limited
degree, by using L</set_err> to reset $DBI::err and $DBI::errstr,
and altering the return value of the failed method. For example:

  $h->{HandleError} = sub {
    return 0 unless $_[0] =~ /^\S+ fetchrow_arrayref failed:/;
    return 0 unless $_[1]->err == 1234; # the error to 'hide'
    $h->set_err(undef,undef);	# turn off the error
    $_[2] = [ ... ];	# supply alternative return value
    return 1;
  };

This only works for methods which return a single value and is hard
to make reliable (avoiding infinite loops, for example) and so isn't
recommended for general use!  If you find a I<good> use for it then
please let me know.

=head3 C<HandleSetErr>

Type: code ref, inherited

The C<HandleSetErr> attribute can be used to intercept
the setting of handle C<err>, C<errstr>, and C<state> values.
If set to a reference to a subroutine then that subroutine is called
whenever set_err() is called, typically by the driver or a subclass.

The subroutine is called with five arguments, the first five that
were passed to set_err(): the handle, the C<err>, C<errstr>, and
C<state> values being set, and the method name. These can be altered
by changing the values in the @_ array. The return value affects
set_err() behaviour, see L</set_err> for details.

It is possible to 'stack' multiple HandleSetErr handlers by using
closures. See L</HandleError> for an example.

The C<HandleSetErr> and C<HandleError> subroutines differ in subtle
but significant ways. HandleError is only invoked at the point where
the DBI is about to return to the application with C<err> set true.
It's not invoked by the failure of a method that's been called by
another DBI method.  HandleSetErr, on the other hand, is called
whenever set_err() is called with a defined C<err> value, even if false.
So it's not just for errors, despite the name, but also warn and info states.
The set_err() method, and thus HandleSetErr, may be called multiple
times within a method and is usually invoked from deep within driver code.

In theory a driver can use the return value from HandleSetErr via
set_err() to decide whether to continue or not. If set_err() returns
an empty list, indicating that the HandleSetErr code has 'handled'
the 'error', the driver could then continue instead of failing (if
that's a reasonable thing to do).  This isn't excepted to be
common and any such cases should be clearly marked in the driver
documentation and discussed on the dbi-dev mailing list.

The C<HandleSetErr> attribute was added in DBI 1.41.

=head3 C<ErrCount>

Type: unsigned integer

The C<ErrCount> attribute is incremented whenever the set_err()
method records an error. It isn't incremented by warnings or
information states. It is not reset by the DBI at any time.

The C<ErrCount> attribute was added in DBI 1.41. Older drivers may
not have been updated to use set_err() to record errors and so this
attribute may not be incremented when using them.


=head3 C<ShowErrorStatement>

Type: boolean, inherited

The C<ShowErrorStatement> attribute can be used to cause the relevant
Statement text to be appended to the error messages generated by
the C<RaiseError>, C<PrintError>, C<RaiseWarn> and C<PrintWarn> attributes.
Only applies to errors on statement handles
plus the prepare(), do(), and the various C<select*()> database handle methods.
(The exact format of the appended text is subject to change.)

If C<$h-E<gt>{ParamValues}> returns a hash reference of parameter
(placeholder) values then those are formatted and appended to the
end of the Statement text in the error message.

=head3 C<TraceLevel>

Type: integer, inherited

The C<TraceLevel> attribute can be used as an alternative to the
L</trace> method to set the DBI trace level and trace flags for a
specific handle.  See L</TRACING> for more details.

