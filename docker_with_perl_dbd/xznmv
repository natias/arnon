
template <class T>
template <class S>
IMATH_HOSTDEVICE constexpr inline bool
Quat<T>::operator!= (const Quat<S>& q) const IMATH_NOEXCEPT
{
    return r != q.r || v != q.v;
}

/// 4D dot product
template <class T>
IMATH_HOSTDEVICE constexpr inline T
operator^ (const Quat<T>& q1, const Quat<T>& q2) IMATH_NOEXCEPT
{
    return q1.r * q2.r + (q1.v ^ q2.v);
}

template <class T>
IMATH_HOSTDEVICE constexpr inline T
Quat<T>::length() const IMATH_NOEXCEPT
{
    return std::sqrt (r * r + (v ^ v));
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline Quat<T>&
Quat<T>::normalize() IMATH_NOEXCEPT
{
    if (T l = length())
    {
        r /= l;
        v /= l;
    }
    else
    {
        r = 1;
        v = Vec3<T> (0);
    }

    return *this;
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline Quat<T>
Quat<T>::normalized() const IMATH_NOEXCEPT
{
    if (T l = length())
        return Quat (r / l, v / l);

    return Quat();
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline Quat<T>
Quat<T>::inverse() const IMATH_NOEXCEPT
{
    //
    // 1    Q*
    // - = ----   where Q* is conjugate (operator~)
    // Q   Q* Q   and (Q* Q) == Q ^ Q (4D dot)
    //

    T qdot = *this ^ *this;
    return Quat (r / qdot, -v / qdot);
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline Quat<T>&
Quat<T>::invert() IMATH_NOEXCEPT
{
    T qdot = (*this) ^ (*this);
    r /= qdot;
    v = -v / qdot;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline Vec3<T>
Quat<T>::rotateVector (const Vec3<T>& original) const IMATH_NOEXCEPT
{
    //
    // Given a vector p and a quaternion q (aka this),
    // calculate p' = qpq*
    //
    // Assumes unit quaternions (because non-unit
    // quaternions cannot be used to rotate vectors
    // anyway).
    //

    Quat<T> vec (0, original); // temporarily promote grade of original
    Quat<T> inv (*this);
    inv.v *= -1; // unit multiplicative inverse
    Quat<T> result = *this * vec * inv;
    return result.v;
}

template <class T>
IMATH_HOSTDEVICE constexpr inline T
Quat<T>::euclideanInnerProduct (const Quat<T>& q) const IMATH_NOEXCEPT
{
    return r * q.r + v.x * q.v.x + v.y * q.v.y + v.z * q.v.z;
}

///
/// Compute the angle between two quaternions,
/// interpreting the quaternions as 4D vectors.
template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline T
angle4D (const Quat<T>& q1, const Quat<T>& q2) IMATH_NOEXCEPT
{
    Quat<T> d = q1 - q2;
    T lengthD = std::sqrt (d ^ d);

    Quat<T> s = q1 + q2;
    T lengthS = std::sqrt (s ^ s);

    return 2 * std::atan2 (lengthD, lengthS);
}

///
/// Spherical linear interpolation.
/// Assumes q1 and q2 are normalized and that q1 != -q2.
///
/// This method does *not* interpolate along the shortest
/// arc between q1 and q2.  If you desire interpolation
/// along the shortest arc, and q1^q2 is negative, then
/// consider calling slerpShortestArc(), below, or flipping
/// the second quaternion explicitly.
///
/// The implementation of squad() depends on a slerp()
/// that interpolates as is, without the automatic
/// flipping.
///
/// Don Hatch explains the method we use here on his
/// web page, The Right Way to Calculate Stuff, at
/// http://www.plunk.org/~hatch/rightway.php
template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline Quat<T>
slerp (const Quat<T>& q1, const Quat<T>& q2, T t) IMATH_NOEXCEPT
{
    T a = angle4D (q1, q2);
    T s = 1 - t;

    Quat<T> q = sinx_over_x (s * a) / sinx_over_x (a) * s * q1 +
                sinx_over_x (t * a) / sinx_over_x (a) * t * q2;

    return q.normalized();
}

///
/// Spherical linear interpolation along the shortest
/// arc from q1 to either q2 or -q2, whichever is closer.
/// Assumes q1 and q2 are unit quaternions.
template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline Quat<T>
slerpShortestArc (const Quat<T>& q1, const Quat<T>& q2, T t) IMATH_NOEXCEPT
{
    if ((q1 ^ q2) >= 0)
        return slerp (q1, q2, t);
    else
        return slerp (q1, -q2, t);
}

///
/// Spherical Cubic Spline Interpolation - from Advanced Animation and
/// Rendering Techniques by Watt and Watt, Page 366:
///
/// A spherical curve is constructed using three spherical linear
/// interpolations of a quadrangle of unit quaternions: q1, qa, qb,
/// q2.  Given a set of quaternion keys: q0, q1, q2, q3, this routine
/// does the interpolation between q1 and q2 by constructing two
/// intermediate quaternions: qa and qb. The qa and qb are computed by
/// the intermediate function to guarantee the continuity of tangents
/// across adjacent cubic segments. The qa represents in-tangent for
/// q1 and the qb represents the out-tangent for q2.
///
/// The q1 q2 is the cubic segment being interpolated.
///
/// The q0 is from the previous adjacent segment and q3 is from the
/// next adjacent segment. The q0 and q3 are used in computing qa and
/// qb.
template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline Quat<T>
spline (const Quat<T>& q0, const Quat<T>& q1, const Quat<T>& q2, const Quat<T>& q3, T t) IMATH_NOEXCEPT
{
    Quat<T> qa     = intermediate (q0, q1, q2);
    Quat<T> qb     = intermediate (q1, q2, q3);
    Quat<T> result = squad (q1, qa, qb, q2, t);

    return result;
}

///
/// Spherical Quadrangle Interpolation - from Advanced Animation and
/// Rendering Techniques by Watt and Watt, Page 366:
///
/// It constructs a spherical cubic interpolation as a series of three
/// spherical linear interpolations of a quadrangle of unit
/// quaternions.
template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline Quat<T>
squad (const Quat<T>& q1, const Quat<T>& qa, const Quat<T>& qb, const Quat<T>& q2, T t) IMATH_NOEXCEPT
{
    Quat<T> r1     = slerp (q1, q2, t);
    Quat<T> r2     = slerp (qa, qb, t);
    Quat<T> result = slerp (r1, r2, 2 * t * (1 - t));

    return result;
}

/// Compute the intermediate point between three quaternions `q0`, `q1`,
/// and `q2`.
template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline Quat<T>
intermediate (const Quat<T>& q0, const Quat<T>& q1, const Quat<T>& q2) IMATH_NOEXCEPT
{
    Quat<T> q1inv = q1.inverse();
    Quat<T> c1    = q1inv * q2;
    Quat<T> c2    = q1inv * q0;
    Quat<T> c3    = (T) (-0.25) * (c2.log() + c1.log());
    Quat<T> qa    = q1 * c3.exp();
    qa.normalize();
    return qa;
}

template <class T>
IMATH_HOSTDEVICE inline Quat<T>
Quat<T>::log() const IMATH_NOEXCEPT
{
    //
    // For unit quaternion, from Advanced Animation and
    // Rendering Techniques by Watt and Watt, Page 366:
    //

    T theta = std::acos (std::min (r, (T) 1.0));

    if (theta == 0)
        return Quat<T> (0, v);

    T sintheta = std::sin (theta);

    T k;
    if (std::abs(sintheta) < 1 && std::abs(theta) >= std::numeric_limits<T>::max() * std::abs(sintheta))
        k = 1;
    else
        k = theta / sintheta;

    return Quat<T> ((T) 0, v.x * k, v.y * k, v.z * k);
}

template <class T>
IMATH_HOSTDEVICE inline Quat<T>
Quat<T>::exp() const IMATH_NOEXCEPT
{
    //
    // For pure quaternion (zero scalar part):
    // from Advanced Animation and Rendering
    // Techniques by Watt and Watt, Page 366:
    //

    T theta    = v.length();
    T sintheta = std::sin (theta);

    T k;
    if (abs (theta) < 1 && abs (sintheta) >= std::numeric_limits<T>::max() * abs (theta))
        k = 1;
    else
        k = sintheta / theta;

    T costheta = std::cos (theta);

    return Quat<T> (costheta, v.x * k, v.y * k, v.z * k);
}

template <class T>
IMATH_HOSTDEVICE constexpr inline T
Quat<T>::angle() const IMATH_NOEXCEPT
{
    return 2 * std::atan2 (v.length(), r);
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec3<T>
Quat<T>::axis() const IMATH_NOEXCEPT
{
    return v.normalized();
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline Quat<T>&
Quat<T>::setAxisAngle (const Vec3<T>& axis, T radians) IMATH_NOEXCEPT
{
    r = std::cos (radians / 2);
    v = axis.normalized() * std::sin (radians / 2);
    return *this;
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline Quat<T>&
Quat<T>::setRotation (const Vec3<T>& from, const Vec3<T>& to) IMATH_NOEXCEPT
{
    //
    // Create a quaternion that rotates vector from into vector to,
    // such that the rotation is around an axis that is the cross
    // product of from and to.
    //
    // This function calls function setRotationInternal(), which is
    // numerically accurate only for rotation angles that are not much
    // greater than pi/2.  In order to achieve good accuracy for angles
    // greater than pi/2, we split large angles in half, and rotate in
    // two steps.
    //

    //
    // Normalize from and to, yielding f0 and t0.
    //

    Vec3<T> f0 = from.normalized();
    Vec3<T> t0 = to.normalized();

    if ((f0 ^ t0) >= 0)
    {
        //
        // The rotation angle is less than or equal to pi/2.
        //

        setRotationInternal (f0, t0, *this);
    }
    else
    {
        //
        // The angle is greater than pi/2.  After computing h0,
        // which is halfway between f0 and t0, we rotate first
        // from f0 to h0, then from h0 to t0.
        //

        Vec3<T> h0 = (f0 + t0).normalized();

        if ((h0 ^ h0) != 0)
        {
            setRotationInternal (f0, h0, *this);

            Quat<T> q;
            setRotationInternal (h0, t0, q);

            *this *= q;
        }
        else
        {
            //
            // f0 and t0 point in exactly opposite directions.
            // Pick an arbitrary axis that is orthogonal to f0,
            // and rotate by pi.
            //

            r = T (0);

            Vec3<T> f02 = f0 * f0;

            if (f02.x <= f02.y && f02.x <= f02.z)
                v = (f0 % Vec3<T> (1, 0, 0)).normalized();
            else if (f02.y <= f02.z)
                v = (f0 % Vec3<T> (0, 1, 0)).normalized();
            else
                v = (f0 % Vec3<T> (0, 0, 1)).normalized();
        }
    }

    return *this;
}

template <class T>
IMATH_HOSTDEVICE inline void
Quat<T>::setRotationInternal (const Vec3<T>& f0, const Vec3<T>& t0, Quat<T>& q) IMATH_NOEXCEPT
{
    //
    // The following is equivalent to setAxisAngle(n,2*phi),
    // where the rotation axis, n, is orthogonal to the f0 and
    // t0 vectors, and 2*phi is the angle between f0 and t0.
    //
    // This function is called by setRotation(), above; it assumes
    // that f0 and t0 are normalized and that the angle between
    // them is not much greater than pi/2.  This function becomes
    // numerically inaccurate if f0 and t0 point into nearly
    // opposite directions.
    //

    //
    // Find a normalized vector, h0, that is halfway between f0 and t0.
    // The angle between f0 and h0 is phi.
    //

    Vec3<T> h0 = (f0 + t0).normalized();

    //
    // Store the rotation axis and rotation angle.
    //

    q.r = f0 ^ h0; //  f0 ^ h0 == cos (phi)
    q.v = f0 % h0; // (f0 % h0).length() == sin (phi)
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Matrix33<T>
Quat<T>::toMatrix33() const IMATH_NOEXCEPT
{
    return Matrix33<T> (1 - 2 * (v.y * v.y + v.z * v.z),
                        2 * (v.x * v.y + v.z * r),
                        2 * (v.z * v.x - v.y * r),

                        2 * (v.x * v.y - v.z * r),
                        1 - 2 * (v.z * v.z + v.x * v.x),
                        2 * (v.y * v.z + v.x * r),

                        2 * (v.z * v.x + v.y * r),
                        2 * (v.y * v.z - v.x * r),
                        1 - 2 * (v.y * v.y + v.x * v.x));
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Matrix44<T>
Quat<T>::toMatrix44() const IMATH_NOEXCEPT
{
    return Matrix44<T> (1 - 2 * (v.y * v.y + v.z * v.z),
                        2 * (v.x * v.y + v.z * r),
                        2 * (v.z * v.x - v.y * r),
                        0,
                        2 * (v.x * v.y - v.z * r),
                        1 - 2 * (v.z * v.z + v.x * v.x),
                        2 * (v.y * v.z + v.x * r),
                        0,
                        2 * (v.z * v.x + v.y * r),
                        2 * (v.y * v.z - v.x * r),
                        1 - 2 * (v.y * v.y + v.x * v.x),
                        0,
                        0,
                        0,
                        0,
                        1);
}

/// Transform the quaternion by the matrix
/// @return M * q
template <class T>
IMATH_HOSTDEVICE constexpr inline Matrix33<T>
operator* (const Matrix33<T>& M, const Quat<T>& q) IMATH_NOEXCEPT
{
    return M * q.toMatrix33();
}

/// Transform the matrix by the quaterion:
/// @return q * M
template <class T>
IMATH_HOSTDEVICE constexpr inline Matrix33<T>
operator* (const Quat<T>& q, const Matrix33<T>& M) IMATH_NOEXCEPT
{
    return q.toMatrix33() * M;
}

/// Stream output as "(r x y z)"
template <class T>
std::ostream&
operator<< (std::ostream& o, const Quat<T>& q)
{
    return o << "(" << q.r << " " << q.v.x << " " << q.v.y << " " << q.v.z << ")";
}

/// Quaterion multiplication
template <class T>
IMATH_HOSTDEVICE constexpr inline Quat<T>
operator* (const Quat<T>& q1, const Quat<T>& q2) IMATH_NOEXCEPT
{
    return Quat<T> (q1.r * q2.r - (q1.v ^ q2.v), q1.r * q2.v + q1.v * q2.r + q1.v % q2.v);
}

/// Quaterion division
template <class T>
IMATH_HOSTDEVICE constexpr inline Quat<T>
operator/ (const Quat<T>& q1, const Quat<T>& q2) IMATH_NOEXCEPT
{
    return q1 * q2.inverse();
}

/// Quaterion division
template <class T>
IMATH_HOSTDEVICE constexpr inline Quat<T>
operator/ (const Quat<T>& q, T t) IMATH_NOEXCEPT
{
    return Quat<T> (q.r / t, q.v / t);
}

/// Quaterion*scalar multiplication
/// @return q * t
template <class T>
IMATH_HOSTDEVICE constexpr inline Quat<T>
operator* (const Quat<T>& q, T t) IMATH_NOEXCEPT
{
    return Quat<T> (q.r * t, q.v * t);
}

/// Quaterion*scalar multiplication
/// @return q * t
template <class T>
IMATH_HOSTDEVICE constexpr inline Quat<T>
operator* (T t, const Quat<T>& q) IMATH_NOEXCEPT
{
    return Quat<T> (q.r * t, q.v * t);
}

/// Quaterion addition
template <class T>
IMATH_HOSTDEVICE constexpr inline Quat<T>
operator+ (const Quat<T>& q1, const Quat<T>& q2) IMATH_NOEXCEPT
{
    return Quat<T> (q1.r + q2.r, q1.v + q2.v);
}

/// Quaterion subtraction
template <class T>
IMATH_HOSTDEVICE constexpr inline Quat<T>
operator- (const Quat<T>& q1, const Quat<T>& q2) IMATH_NOEXCEPT
{
    return Quat<T> (q1.r - q2.r, q1.v - q2.v);
}

/// Compute the conjugate
template <class T>
IMATH_HOSTDEVICE constexpr inline Quat<T>
operator~ (const Quat<T>& q) IMATH_NOEXCEPT
{
    return Quat<T> (q.r, -q.v);
}

/// Negate the quaterion
template <class T>
IMATH_HOSTDEVICE constexpr inline Quat<T>
operator- (const Quat<T>& q) IMATH_NOEXCEPT
{
    return Quat<T> (-q.r, -q.v);
}

/// Quaterion*vector multiplcation
/// @return v * q
template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline Vec3<T>
operator* (const Vec3<T>& v, const Quat<T>& q) IMATH_NOEXCEPT
{
    Vec3<T> a = q.v % v;
    Vec3<T> b = q.v % a;
    return v + T (2) * (q.r * a + b);
}

#if (defined _WIN32 || defined _WIN64) && defined _MSC_VER
#    pragma warning(pop)
#endif

IMATH_INTERNAL_NAMESPACE_HEADER_EXIT

#endif // INCLUDED_IMATHQUAT_H
                                                                                                                                                                                                                                                                                                                                                                                                                 usr/include/Imath/ImathRandom.h                                                                     0000644 0000000 0000000 00000015215 14330770346 015131  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright Contributors to the OpenEXR Project.
//

//
// Generators for uniformly distributed pseudo-random numbers and
// functions that use those generators to generate numbers with
// non-uniform distributions
//
// Note: class Rand48() calls erand48() and nrand48(), which are not
// available on all operating systems.  For compatibility we include
// our own versions of erand48() and nrand48().  Our functions
// have been reverse-engineered from the corresponding Unix/Linux
// man page.
//

#ifndef INCLUDED_IMATHRANDOM_H
#define INCLUDED_IMATHRANDOM_H

#include "ImathExport.h"
#include "ImathNamespace.h"

#include <math.h>
#include <stdlib.h>

IMATH_INTERNAL_NAMESPACE_HEADER_ENTER

/// Fast random-number generator that generates
/// a uniformly distributed sequence with a period
/// length of 2^32.
class IMATH_EXPORT Rand32
{
  public:

    /// Constructor, given a seed
    IMATH_HOSTDEVICE Rand32 (unsigned long int seed = 0);

    /// Re-initialize with a given seed
    IMATH_HOSTDEVICE void init (unsigned long int seed);

    /// Get the next value in the sequence (range: [false, true])
    IMATH_HOSTDEVICE bool nextb();

    /// Get the next value in the sequence (range: [0 ... 0xffffffff])
    IMATH_HOSTDEVICE unsigned long int nexti();

    /// Get the next value in the sequence (range: [0 ... 1[)
    IMATH_HOSTDEVICE float nextf();

    /// Get the next value in the sequence (range [rangeMin ... rangeMax[)
    IMATH_HOSTDEVICE float nextf (float rangeMin, float rangeMax);

  private:
    IMATH_HOSTDEVICE void next();

    unsigned long int _state;
};

/// Random-number generator based on the C Standard Library
/// functions erand48(), nrand48() & company; generates a
/// uniformly distributed sequence.
class Rand48
{
  public:

    /// Constructor
    IMATH_HOSTDEVICE Rand48 (unsigned long int seed = 0);

    /// Re-initialize with a given seed
    IMATH_HOSTDEVICE void init (unsigned long int seed);

    /// Get the next value in the sequence (range: [false, true])
    IMATH_HOSTDEVICE bool nextb();

    /// Get the next value in the sequence (range: [0 ... 0x7fffffff])
    IMATH_HOSTDEVICE long int nexti();

    /// Get the next value in the sequence (range: [0 ... 1[)
    IMATH_HOSTDEVICE double nextf();

    /// Get the next value in the sequence (range [rangeMin ... rangeMax[)
    IMATH_HOSTDEVICE double nextf (double rangeMin, double rangeMax);

  private:
    unsigned short int _state[3];
};

/// Return random points uniformly distributed in a sphere with
/// radius 1 around the origin (distance from origin <= 1).
template <class Vec, class Rand> IMATH_HOSTDEVICE Vec solidSphereRand (Rand& rand);

/// Return random points uniformly distributed on the surface of
/// a sphere with radius 1 around the origin.
template <class Vec, class Rand> IMATH_HOSTDEVICE Vec hollowSphereRand (Rand& rand);

/// Return random numbers with a normal (Gaussian)
/// distribution with zero mean and unit variance.
template <class Rand> IMATH_HOSTDEVICE float gaussRand (Rand& rand);

/// Return random points whose distance from the origin
/// has a normal (Gaussian) distribution with zero mean
/// and unit variance.
template <class Vec, class Rand> IMATH_HOSTDEVICE Vec gaussSphereRand (Rand& rand);

//---------------------------------
// erand48(), nrand48() and friends
//---------------------------------

/// @cond Doxygen_Suppress
IMATH_HOSTDEVICE IMATH_EXPORT double erand48 (unsigned short state[3]);
IMATH_HOSTDEVICE IMATH_EXPORT double drand48();
IMATH_HOSTDEVICE IMATH_EXPORT long int nrand48 (unsigned short state[3]);
IMATH_HOSTDEVICE IMATH_EXPORT long int lrand48();
IMATH_HOSTDEVICE IMATH_EXPORT void srand48 (long int seed);
/// @endcond

//---------------
// Implementation
//---------------

IMATH_HOSTDEVICE inline void
Rand32::init (unsigned long int seed)
{
    _state = (seed * 0xa5a573a5L) ^ 0x5a5a5a5aL;
}

IMATH_HOSTDEVICE inline Rand32::Rand32 (unsigned long int seed)
{
    init (seed);
}

IMATH_HOSTDEVICE inline void
Rand32::next()
{
    _state = 1664525L * _state + 1013904223L;
}

IMATH_HOSTDEVICE inline bool
Rand32::nextb()
{
    next();
    // Return the 31st (most significant) bit, by and-ing with 2 ^ 31.
    return !!(_state & 2147483648UL);
}

IMATH_HOSTDEVICE inline unsigned long int
Rand32::nexti()
{
    next();
    return _state & 0xffffffff;
}

IMATH_HOSTDEVICE inline float
Rand32::nextf (float rangeMin, float rangeMax)
{
    float f = nextf();
    return rangeMin * (1 - f) + rangeMax * f;
}

IMATH_HOSTDEVICE inline void
Rand48::init (unsigned long int seed)
{
    seed = (seed * 0xa5a573a5L) ^ 0x5a5a5a5aL;

    _state[0] = (unsigned short int) (seed & 0xFFFF);
    _state[1] = (unsigned short int) ((seed >> 16) & 0xFFFF);
    _state[2] = (unsigned short int) (seed & 0xFFFF);
}

IMATH_HOSTDEVICE inline Rand48::Rand48 (unsigned long int seed)
{
    init (seed);
}

IMATH_HOSTDEVICE inline bool
Rand48::nextb()
{
    return nrand48 (_state) & 1;
}

IMATH_HOSTDEVICE inline long int
Rand48::nexti()
{
    return nrand48 (_state);
}

IMATH_HOSTDEVICE inline double
Rand48::nextf()
{
    return erand48 (_state);
}

IMATH_HOSTDEVICE inline double
Rand48::nextf (double rangeMin, double rangeMax)
{
    double f = nextf();
    return rangeMin * (1 - f) + rangeMax * f;
}

template <class Vec, class Rand>
IMATH_HOSTDEVICE Vec
solidSphereRand (Rand& rand)
{
    Vec v;

    do
    {
        for (unsigned int i = 0; i < Vec::dimensions(); i++)
            v[i] = (typename Vec::BaseType) rand.nextf (-1, 1);
    } while (v.length2() > 1);

    return v;
}

template <class Vec, class Rand>
IMATH_HOSTDEVICE Vec
hollowSphereRand (Rand& rand)
{
    Vec v;
    typename Vec::BaseType length;

    do
    {
        for (unsigned int i = 0; i < Vec::dimensions(); i++)
            v[i] = (typename Vec::BaseType) rand.nextf (-1, 1);

        length = v.length();
    } while (length > 1 || length == 0);

    return v / length;
}

template <class Rand>
IMATH_HOSTDEVICE float
gaussRand (Rand& rand)
{
    float x;       // Note: to avoid numerical problems with very small
    float y;       // numbers, we make these variables singe-precision
    float length2; // floats, but later we call the double-precision log()
                   // and sqrt() functions instead of logf() and sqrtf().
    do
    {
        x       = float (rand.nextf (-1, 1));
        y       = float (rand.nextf (-1, 1));
        length2 = x * x + y * y;
    } while (length2 >= 1 || length2 == 0);

    return x * sqrt (-2 * log (double (length2)) / length2);
}

template <class Vec, class Rand>
IMATH_HOSTDEVICE Vec
gaussSphereRand (Rand& rand)
{
    return hollowSphereRand<Vec> (rand) * gaussRand (rand);
}

IMATH_INTERNAL_NAMESPACE_HEADER_EXIT

#endif // INCLUDED_IMATHRANDOM_H
                                                                                                                                                                                                                                                                                                                                                                                   usr/include/Imath/ImathRoots.h                                                                      0000644 0000000 0000000 00000011746 14330770346 015024  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright Contributors to the OpenEXR Project.
//

//
// Functions to solve linear, quadratic or cubic equations
//
// Note: It is possible that an equation has real solutions, but that
// the solutions (or some intermediate result) are not representable.
// In this case, either some of the solutions returned are invalid
// (nan or infinity), or, if floating-point exceptions have been
// enabled, an exception is thrown.
//

#ifndef INCLUDED_IMATHROOTS_H
#define INCLUDED_IMATHROOTS_H

#include "ImathMath.h"
#include "ImathNamespace.h"
#include <complex>

/// @cond Doxygen_Suppress

#ifdef __CUDACC__
#    include <thrust/complex.h>
#    define COMPLEX_NAMESPACE thrust
#else
#    define COMPLEX_NAMESPACE std
#endif

/// @endcond

IMATH_INTERNAL_NAMESPACE_HEADER_ENTER

///
/// Solve for x in the linear equation:
///
///     a * x + b == 0
///
/// @return 1 if the equation has a solution, 0 if there is no
/// solution, and -1 if all real numbers are solutions.
template <class T> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 int solveLinear (T a, T b, T& x);

///
/// Solve for x in the quadratic equation:
///
///     a * x*x + b * x + c == 0
///
/// @return 2 if the equation has two solutions, 1 if the equation has
/// a single solution, 0 if there is no solution, and -1 if all real
/// numbers are solutions.
template <class T> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 int solveQuadratic (T a, T b, T c, T x[2]);
template <class T>

///
/// Solve for x in the normalized cubic equation:
///
///     x*x*x + r * x*x + s * x + t == 0
///
/// The equation is solved using Cardano's Formula; even though only
/// real solutions are produced, some intermediate results are complex
/// (std::complex<T>).
///
/// @return 0 if there is no solution, and -1 if all real
/// numbers are solutions, otherwise return the number of solutions.
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 int solveNormalizedCubic (T r, T s, T t, T x[3]);

///
/// Solve for x in the cubic equation:
///
///     a * x*x*x + b * x*x + c * x + d == 0
///
/// The equation is solved using Cardano's Formula; even though only
/// real solutions are produced, some intermediate results are complex
/// (std::complex<T>).
///
/// @return 0 if there is no solution, and -1 if all real
/// numbers are solutions, otherwise return the number of solutions.
template <class T> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 int solveCubic (T a, T b, T c, T d, T x[3]);

//---------------
// Implementation
//---------------

template <class T>
IMATH_CONSTEXPR14 int
solveLinear (T a, T b, T& x)
{
    if (a != 0)
    {
        x = -b / a;
        return 1;
    }
    else if (b != 0)
    {
        return 0;
    }
    else
    {
        return -1;
    }
}

template <class T>
IMATH_CONSTEXPR14 int
solveQuadratic (T a, T b, T c, T x[2])
{
    if (a == 0)
    {
        return solveLinear (b, c, x[0]);
    }
    else
    {
        T D = b * b - 4 * a * c;

        if (D > 0)
        {
            T s = std::sqrt (D);
            T q = -(b + (b > 0 ? 1 : -1) * s) / T (2);

            x[0] = q / a;
            x[1] = c / q;
            return 2;
        }
        if (D == 0)
        {
            x[0] = -b / (2 * a);
            return 1;
        }
        else
        {
            return 0;
        }
    }
}

template <class T>
IMATH_CONSTEXPR14 int
solveNormalizedCubic (T r, T s, T t, T x[3])
{
    T p  = (3 * s - r * r) / 3;
    T q  = 2 * r * r * r / 27 - r * s / 3 + t;
    T p3 = p / 3;
    T q2 = q / 2;
    T D  = p3 * p3 * p3 + q2 * q2;

    if (D == 0 && p3 == 0)
    {
        x[0] = -r / 3;
        x[1] = -r / 3;
        x[2] = -r / 3;
        return 1;
    }

    if (D > 0)
    {
        auto real_root = [] (T a, T x) -> T {
            T sign = std::copysign(T(1), a);
            return sign * std::pow (sign * a, T (1) / x);
        };

        T u = real_root (-q / 2 + std::sqrt (D), 3);
        T v = -p / (T (3) * u);

        x[0] = u + v - r / 3;
        return 1;
    }

    namespace CN     = COMPLEX_NAMESPACE;
    CN::complex<T> u = CN::pow (-q / 2 + CN::sqrt (CN::complex<T> (D)), T (1) / T (3));
    CN::complex<T> v = -p / (T (3) * u);

    const T sqrt3 = T (1.73205080756887729352744634150587); // enough digits
                                                            // for long double
    CN::complex<T> y0 (u + v);
    CN::complex<T> y1 (-(u + v) / T (2) + (u - v) / T (2) * CN::complex<T> (0, sqrt3));
    CN::complex<T> y2 (-(u + v) / T (2) - (u - v) / T (2) * CN::complex<T> (0, sqrt3));

    if (D == 0)
