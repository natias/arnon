another one it is not specified what happens, beyond that the caller will
definitely receive an exception.

Besides throwing an exception, a C<defer> block is not permitted to
otherwise alter the control flow of its surrounding code. In particular, it
may not cause its containing function to C<return>, nor may it C<goto> a
label, or control a containing loop using C<next>, C<last> or C<redo>. These
constructions are however, permitted entirely within the body of the
C<defer>.

    use feature 'defer';

    {
        defer {
            foreach ( 1 .. 5 ) {
                last if $_ == 3;     # this is permitted
            }
        }
    }

    {
        foreach ( 6 .. 10 ) {
            defer {
                last if $_ == 8;     # this is not
            }
        }
    }

=head2 Switch Statements

X<switch> X<case> X<given> X<when> X<default>

Starting from Perl 5.10.1 (well, 5.10.0, but it didn't work
right), you can say

    use feature "switch";

to enable an experimental switch feature.  This is loosely based on an
old version of a Raku proposal, but it no longer resembles the Raku
construct.  You also get the switch feature whenever you declare that your
code prefers to run under a version of Perl between 5.10 and 5.34.  For
example:

    use v5.14;

Under the "switch" feature, Perl gains the experimental keywords
C<given>, C<when>, C<default>, C<continue>, and C<break>.
Starting from Perl 5.16, one can prefix the switch
keywords with C<CORE::> to access the feature without a C<use feature>
statement.  The keywords C<given> and
C<when> are analogous to C<switch> and
C<case> in other languages -- though C<continue> is not -- so the code
in the previous section could be rewritten as

    use v5.10.1;
    for ($var) {
        when (/^abc/) { $abc = 1 }
        when (/^def/) { $def = 1 }
        when (/^xyz/) { $xyz = 1 }
        default       { $nothing = 1 }
    }

The C<foreach> is the non-experimental way to set a topicalizer.
If you wish to use the highly experimental C<given>, that could be
written like this:

    use v5.10.1;
    given ($var) {
        when (/^abc/) { $abc = 1 }
        when (/^def/) { $def = 1 }
        when (/^xyz/) { $xyz = 1 }
        default       { $nothing = 1 }
    }

As of 5.14, that can also be written this way:

    use v5.14;
    for ($var) {
        $abc = 1 when /^abc/;
        $def = 1 when /^def/;
        $xyz = 1 when /^xyz/;
        default { $nothing = 1 }
    }

Or if you don't care to play it safe, like this:

    use v5.14;
    given ($var) {
        $abc = 1 when /^abc/;
        $def = 1 when /^def/;
        $xyz = 1 when /^xyz/;
        default { $nothing = 1 }
    }

The arguments to C<given> and C<when> are in scalar context,
and C<given> assigns the C<$_> variable its topic value.

Exactly what the I<EXPR> argument to C<when> does is hard to describe
precisely, but in general, it tries to guess what you want done.  Sometimes
it is interpreted as C<< $_ ~~ I<EXPR> >>, and sometimes it is not.  It
also behaves differently when lexically enclosed by a C<given> block than
it does when dynamically enclosed by a C<foreach> loop.  The rules are far
too difficult to understand to be described here.  See L</"Experimental Details
on given and when"> later on.

Due to an unfortunate bug in how C<given> was implemented between Perl 5.10
and 5.16, under those implementations the version of C<$_> governed by
C<given> is merely a lexically scoped copy of the original, not a
dynamically scoped alias to the original, as it would be if it were a
C<foreach> or under both the original and the current Raku language
specification.  This bug was fixed in Perl 5.18 (and lexicalized C<$_> itself
was removed in Perl 5.24).

If your code still needs to run on older versions,
stick to C<foreach> for your topicalizer and
you will be less unhappy.

=head2 Goto
X<goto>

Although not for the faint of heart, Perl does support a C<goto>
statement.  There are three forms: C<goto>-LABEL, C<goto>-EXPR, and
C<goto>-&NAME.  A loop's LABEL is not actually a valid target for
a C<goto>; it's just the name of the loop.

The C<goto>-LABEL form finds the statement labeled with LABEL and resumes
execution there.  It may not be used to go into any construct that
requires initialization, such as a subroutine or a C<foreach> loop.  It
also can't be used to go into a construct that is optimized away.  It
can be used to go almost anywhere else within the dynamic scope,
including out of subroutines, but it's usually better to use some other
construct such as C<last> or C<die>.  The author of Perl has never felt the
need to use this form of C<goto> (in Perl, that is--C is another matter).

The C<goto>-EXPR form expects a label name, whose scope will be resolved
dynamically.  This allows for computed C<goto>s per FORTRAN, but isn't
necessarily recommended if you're optimizing for maintainability:

    goto(("FOO", "BAR", "GLARCH")[$i]);

The C<goto>-&NAME form is highly magical, and substitutes a call to the
named subroutine for the currently running subroutine.  This is used by
C<AUTOLOAD()> subroutines that wish to load another subroutine and then
pretend that the other subroutine had been called in the first place
(except that any modifications to C<@_> in the current subroutine are
propagated to the other subroutine.)  After the C<goto>, not even C<caller()>
will be able to tell that this routine was called first.

In almost all cases like this, it's usually a far, far better idea to use the
structured control flow mechanisms of C<next>, C<last>, or C<redo> instead of
resorting to a C<goto>.  For certain applications, the catch and throw pair of
C<eval{}> and die() for exception processing can also be a prudent approach.

=head2 The Ellipsis Statement
X<...>
X<... statement>
X<ellipsis operator>
X<elliptical statement>
X<unimplemented statement>
X<unimplemented operator>
X<yada-yada>
X<yada-yada operator>
X<... operator>
X<whatever operator>
X<triple-dot operator>

Beginning in Perl 5.12, Perl accepts an ellipsis, "C<...>", as a
placeholder for code that you haven't implemented yet.
When Perl 5.12 or later encounters an ellipsis statement, it parses this
without error, but if and when you should actually try to execute it, Perl
throws an exception with the text C<Unimplemented>:

    use v5.12;
    sub unimplemented { ... }
    eval { unimplemented() };
    if ($@ =~ /^Unimplemented at /) {
        say "I found an ellipsis!";
    }

You can only use the elliptical statement to stand in for a complete
statement.  Syntactically, "C<...;>" is a complete statement, but,
as with other kinds of semicolon-terminated statement, the semicolon
may be omitted if "C<...>" appears immediately before a closing brace.
These examples show how the ellipsis works:

    use v5.12;
    { ... }
    sub foo { ... }
    ...;
    eval { ... };
    sub somemeth {
        my $self = shift;
        ...;
    }
    $x = do {
        my $n;
        ...;
        say "Hurrah!";
        $n;
    };

The elliptical statement cannot stand in for an expression that
is part of a larger statement.
These examples of attempts to use an ellipsis are syntax errors:

    use v5.12;

    print ...;
    open(my $fh, ">", "/dev/passwd") or ...;
    if ($condition && ... ) { say "Howdy" };
    ... if $x > $y;
    say "Cromulent" if ...;
    $flub = 5 + ...;

There are some cases where Perl can't immediately tell the difference
between an expression and a statement.  For instance, the syntax for a
block and an anonymous hash reference constructor look the same unless
there's something in the braces to give Perl a hint.  The ellipsis is a
syntax error if Perl doesn't guess that the C<{ ... }> is a block.
Inside your block, you can use a C<;> before the ellipsis to denote that the
C<{ ... }> is a block and not a hash reference constructor.

Note: Some folks colloquially refer to this bit of punctuation as a
"yada-yada" or "triple-dot", but its true name
is actually an ellipsis.

=head2 PODs: Embedded Documentation
X<POD> X<documentation>

Perl has a mechanism for intermixing documentation with source code.
While it's expecting the beginning of a new statement, if the compiler
encounters a line that begins with an equal sign and a word, like this

    =head1 Here There Be Pods!

Then that text and all remaining text up through and including a line
beginning with C<=cut> will be ignored.  The format of the intervening
text is described in L<perlpod>.

This allows you to intermix your source code
and your documentation text freely, as in

    =item snazzle($)

    The snazzle() function will behave in the most spectacular
    form that you can possibly imagine, not even excepting
    cybernetic pyrotechnics.

    =cut back to the compiler, nuff of this pod stuff!

    sub snazzle($) {
        my $thingie = shift;
        .........
    }

Note that pod translators should look at only paragraphs beginning
with a pod directive (it makes parsing easier), whereas the compiler
actually knows to look for pod escapes even in the middle of a
paragraph.  This means that the following secret stuff will be
ignored by both the compiler and the translators.

    $x=3;
    =secret stuff
     warn "Neither POD nor CODE!?"
    =cut back
    print "got $x\n";

You probably shouldn't rely upon the C<warn()> being podded out forever.
Not all pod translators are well-behaved in this regard, and perhaps
the compiler will become pickier.

One may also use pod directives to quickly comment out a section
of code.

=head2 Plain Old Comments (Not!)
X<comment> X<line> X<#> X<preprocessor> X<eval>

Perl can process line directives, much like the C preprocessor.  Using
this, one can control Perl's idea of filenames and line numbers in
error or warning messages (especially for strings that are processed
with C<eval()>).  The syntax for this mechanism is almost the same as for
most C preprocessors: it matches the regular expression

    # example: '# line 42 "new_filename.plx"'
    /^\#   \s*
      line \s+ (\d+)   \s*
      (?:\s("?)([^"]+)\g2)? \s*
     $/x

with C<$1> being the line number for the next line, and C<$3> being
the optional filename (specified with or without quotes).  Note that
no whitespace may precede the C<< # >>, unlike modern C preprocessors.

There is a fairly obvious gotcha included with the line directive:
Debuggers and profilers will only show the last source line to appear
at a particular line number in a given file.  Care should be taken not
to cause line number collisions in code you'd like to debug later.

Here are some examples that you should be able to type into your command
shell:

    % perl
    # line 200 "bzzzt"
    # the '#' on the previous line must be the first char on line
    die 'foo';
    __END__
    foo at bzzzt line 201.

    % perl
    # line 200 "bzzzt"
    eval qq[\n#line 2001 ""\ndie 'foo']; print $@;
    __END__
    foo at - line 2001.

    % perl
    eval qq[\n#line 200 "foo bar"\ndie 'foo']; print $@;
    __END__
    foo at foo bar line 200.

    % perl
    # line 345 "goop"
    eval "\n#line " . __LINE__ . ' "' . __FILE__ ."\"\ndie 'foo'";
    print $@;
    __END__
    foo at goop line 345.

=head2 Experimental Details on given and when

As previously mentioned, the "switch" feature is considered highly
experimental (it is also scheduled to be removed in perl 5.42.0);
it is subject to change with little notice.  In particular,
C<when> has tricky behaviours that are expected to change to become less
tricky in the future.  Do not rely upon its current (mis)implementation.
Before Perl 5.18, C<given> also had tricky behaviours that you should still
beware of if your code must run on older versions of Perl.

Here is a longer example of C<given>:

    use feature ":5.10";
    given ($foo) {
        when (undef) {
            say '$foo is undefined';
        }
        when ("foo") {
            say '$foo is the string "foo"';
        }
        when ([1,3,5,7,9]) {
            say '$foo is an odd digit';
            continue; # Fall through
        }
        when ($_ < 100) {
            say '$foo is numerically less than 100';
        }
        when (\&complicated_check) {
            say 'a complicated check for $foo is true';
        }
        default {
            die q(I don't know what to do with $foo);
        }
    }

Before Perl 5.18, C<given(EXPR)> assigned the value of I<EXPR> to
merely a lexically scoped I<B<copy>> (!) of C<$_>, not a dynamically
scoped alias the way C<foreach> does.  That made it similar to

        do { my $_ = EXPR; ... }

except that the block was automatically broken out of by a successful
C<when> or an explicit C<break>.  Because it was only a copy, and because
it was only lexically scoped, not dynamically scoped, you could not do the
things with it that you are used to in a C<foreach> loop.  In particular,
it did not work for arbitrary function calls if those functions might try
to access $_.  Best stick to C<foreach> for that.

Most of the power comes from the implicit smartmatching that can
sometimes apply.  Most of the time, C<when(EXPR)> is treated as an
implicit smartmatch of C<$_>, that is, C<$_ ~~ EXPR>.  (See
L<perlop/"Smartmatch Operator"> for more information on smartmatching.)
But when I<EXPR> is one of the 10 exceptional cases (or things like them)
listed below, it is used directly as a boolean.

=over 4

=item Z<>1.

A user-defined subroutine call or a method invocation.

=item Z<>2.

A regular expression match in the form of C</REGEX/>, C<$foo =~ /REGEX/>,
or C<$foo =~ EXPR>.  Also, a negated regular expression match in
the form C<!/REGEX/>, C<$foo !~ /REGEX/>, or C<$foo !~ EXPR>.

=item Z<>3.

A smart match that uses an explicit C<~~> operator, such as C<EXPR ~~ EXPR>.

B<NOTE:> You will often have to use C<$c ~~ $_> because the default case
uses C<$_ ~~ $c> , which is frequently the opposite of what you want.

=item Z<>4.

A boolean comparison operator such as C<$_ E<lt> 10> or C<$x eq "abc">.  The
relational operators that this applies to are the six numeric comparisons
(C<< < >>, C<< > >>, C<< <= >>, C<< >= >>, C<< == >>, and C<< != >>), and
the six string comparisons (C<lt>, C<gt>, C<le>, C<ge>, C<eq>, and C<ne>).

=item Z<>5.

At least the three builtin functions C<defined(...)>, C<exists(...)>, and
C<eof(...)>.  We might someday add more of these later if we think of them.

=item Z<>6.

A negated expression, whether C<!(EXPR)> or C<not(EXPR)>, or a logical
exclusive-or, C<(EXPR1) xor (EXPR2)>.  The bitwise versions (C<~> and C<^>)
are not included.

=item Z<>7.

A filetest operator, with exactly 4 exceptions: C<-s>, C<-M>, C<-A>, and
C<-C>, as these return numerical values, not boolean ones.  The C<-z>
filetest operator is not included in the exception list.

=item Z<>8.

The C<..> and C<...> flip-flop operators.  Note that the C<...> flip-flop
operator is completely different from the C<...> elliptical statement
just described.

=back

In those 8 cases above, the value of EXPR is used directly as a boolean, so
no smartmatching is done.  You may think of C<when> as a smartsmartmatch.

Furthermore, Perl inspects the operands of logical operators to
decide whether to use smartmatching for each one by applying the
above test to the operands:

=over 4

=item Z<>9.

If EXPR is C<EXPR1 && EXPR2> or C<EXPR1 and EXPR2>, the test is applied
I<recursively> to both EXPR1 and EXPR2.
Only if I<both> operands also pass the
test, I<recursively>, will the expression be treated as boolean.  Otherwise,
smartmatching is used.

=item Z<>10.

If EXPR is C<EXPR1 || EXPR2>, C<EXPR1 // EXPR2>, or C<EXPR1 or EXPR2>, the
test is applied I<recursively> to EXPR1 only (which might itself be a
higher-precedence AND operator, for example, and thus subject to the
previous rule), not to EXPR2.  If EXPR1 is to use smartmatching, then EXPR2
also does so, no matter what EXPR2 contains.  But if EXPR2 does not get to
use smartmatching, then the second argument will not be either.  This is
quite different from the C<&&> case just described, so be careful.

=back

These rules are complicated, but the goal is for them to do what you want
(even if you don't quite understand why they are doing it).  For example:

    when (/^\d+$/ && $_ < 75) { ... }

will be treated as a boolean match because the rules say both
a regex match and an explicit test on C<$_> will be treated
as boolean.

Also:

    when ([qw(foo bar)] && /baz/) { ... }

will use smartmatching because only I<one> of the operands is a boolean:
the other uses smartmatching, and that wins.

Further:

    when ([qw(foo bar)] || /^baz/) { ... }

will use smart matching (only the first operand is considered), whereas

    when (/^baz/ || [qw(foo bar)]) { ... }

will test only the regex, which causes both operands to be
treated as boolean.  Watch out for this one, then, because an
arrayref is always a true value, which makes it effectively
redundant.  Not a good idea.

Tautologous boolean operators are still going to be optimized
away.  Don't be tempted to write

    when ("foo" or "bar") { ... }

This will optimize down to C<"foo">, so C<"bar"> will never be considered (even
though the rules say to use a smartmatch
on C<"foo">).  For an alternation like
this, an array ref will work, because this will instigate smartmatching:

    when ([qw(foo bar)] { ... }

This is somewhat equivalent to the C-style switch statement's fallthrough
functionality (not to be confused with I<Perl's> fallthrough
functionality--see below), wherein the same block is used for several
C<case> statements.

Another useful shortcut is that, if you use a literal array or hash as the
argument to C<given>, it is turned into a reference.  So C<given(@foo)> is
the same as C<given(\@foo)>, for example.

C<default> behaves exactly like C<when(1 == 1)>, which is
to say that it always matches.

=head3 Breaking out

You can use the C<break> keyword to break out of the enclosing
C<given> block.  Every C<when> block is implicitly ended with
a C<break>.

=head3 Fall-through

You can use the C<continue> keyword to fall through from one
case to the next immediate C<when> or C<default>:

    given($foo) {
        when (/x/) { say '$foo contains an x'; continue }
        when (/y/) { say '$foo contains a y'            }
        default    { say '$foo does not contain a y'    }
    }

=head3 Return value

When a C<given> statement is also a valid expression (for example,
when it's the last statement of a block), it evaluates to:

=over 4

=item *

An empty list as soon as an explicit C<break> is encountered.

=item *

The value of the last evaluated expression of the successful
C<when>/C<default> clause, if there happens to be one.

=item *

The value of the last evaluated expression of the C<given> block if no
condition is true.

=back

In both last cases, the last expression is evaluated in the context that
was applied to the C<given> block.

Note that, unlike C<if> and C<unless>, failed C<when> statements always
evaluate to an empty list.

    my $price = do {
        given ($item) {
            when (["pear", "apple"]) { 1 }
            break when "vote";      # My vote cannot be bought
            1e10  when /Mona Lisa/;
            "unknown";
        }
    };

Currently, C<given> blocks can't always
be used as proper expressions.  This
may be addressed in a future version of Perl.

=head3 Switching in a loop

Instead of using C<given()>, you can use a C<foreach()> loop.
For example, here's one way to count how many times a particular
string occurs in an array:

    use v5.10.1;
    my $count = 0;
    for (@array) {
        when ("foo") { ++$count }
    }
    print "\@array contains $count copies of 'foo'\n";

Or in a more recent version:

    use v5.14;
    my $count = 0;
    for (@array) {
        ++$count when "foo";
    }
    print "\@array contains $count copies of 'foo'\n";

At the end of all C<when> blocks, there is an implicit C<next>.
You can override that with an explicit C<last> if you're
interested in only the first match alone.

This doesn't work if you explicitly specify a loop variable, as
in C<for $item (@array)>.  You have to use the default variable C<$_>.

=head3 Differences from Raku

The Perl 5 smartmatch and C<given>/C<when> constructs are not compatible
with their Raku analogues.  The most visible difference and least
important difference is that, in Perl 5, parentheses are required around
the argument to C<given()> and C<when()> (except when this last one is used
as a statement modifier).  Parentheses in Raku are always optional in a
control construct such as C<if()>, C<while()>, or C<when()>; they can't be
made optional in Perl 5 without a great deal of potential confusion,
because Perl 5 would parse the expression

    given $foo {
        ...
    }

as though the argument to C<given> were an element of the hash
C<%foo>, interpreting the braces as hash-element syntax.

However, there are many, many other differences.  For example,
this works in Perl 5:

    use v5.12;
    my @primary = ("red", "blue", "green");

    if (@primary ~~ "red") {
        say "primary smartmatches red";
    }

    if ("red" ~~ @primary) {
        say "red smartmatches primary";
    }

    say "that's all, folks!";

But it doesn't work at all in Raku.  Instead, you should
use the (parallelizable) C<any> operator:

   if any(@primary) eq "red" {
       say "primary smartmatches red";
   }

   if "red" eq any(@primary) {
       say "red smartmatches primary";
   }

The table of smartmatches in L<perlop/"Smartmatch Operator"> is not
identical to that proposed by the Raku specification, mainly due to
differences between Raku's and Perl 5's data models, but also because
the Raku spec has changed since Perl 5 rushed into early adoption.

In Raku, C<when()> will always do an implicit smartmatch with its
argument, while in Perl 5 it is convenient (albeit potentially confusing) to
suppress this implicit smartmatch in various rather loosely-defined
situations, as roughly outlined above.  (The difference is largely because
Perl 5 does not have, even internally, a boolean type.)

=cut
                                                                                                                                                                                                                                 usr/local/lib/perl5/5.40.0/pod/perlsynology.pod                                                     0000644 0000000 0000000 00000024130 14714567415 017542  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # vim: syntax=pod

If you read this file _as_is_, just ignore the funny characters you see.
It is written in the POD format (see pod/perlpod.pod) which is specially
designed to be readable as is. But if you have been into Perl you
probably already know this.

=head1 NAME

perlsynology - Perl 5 on Synology DSM systems

=head1 DESCRIPTION

Synology manufactures a vast number of Network Attached Storage (NAS)
devices that are very popular in large organisations as well as small
businesses and homes.

The NAS systems are equipped with Synology Disk Storage Manager (DSM),
which is a trimmed-down Linux system enhanced with several tools for
managing the NAS. There are several flavours of hardware: Marvell
Armada (ARMv5tel, ARMv7l), Intel Atom (i686, x86_64), Freescale QorIQ
(PPC), and more. For a full list see the
L<Synology FAQ|https://kb.synology.com/en-global/DSM/tutorial/What_kind_of_CPU_does_my_NAS_have>.

Since it is based on Linux, the NAS can run many popular Linux
software packages, including Perl. In fact, Synology provides a
ready-to-install package for Perl, depending on the version of DSM
the installed perl ranges from 5.8.6 on DSM-4.3 to 5.28.1 on DSM-7.1.

There is an active user community that provides many software packages
for the Synology DSM systems; at the time of writing this document
they provide Perl version 5.28.1.

This document describes various features of Synology DSM operating
system that will affect how Perl 5 (hereafter just Perl) is
configured, compiled and/or runs. It has been compiled and verified by
Johan Vromans for the Synology DS413 (QorIQ), with feedback from
H.Merijn Brand (DS213: ARMv5tel, RS815: Intel Atom x64, and DS218+:
Celeron J3355).

=head2 Setting up the build environment

=head3 DSM 7

For a comfortable development environment, Entware is currently the only
viable solution. Just follow the detailed instructions on
L<Install Entware on Synology NAS|https://github.com/Entware/Entware/wiki/Install-on-Synology-NAS>.
supported architectures are armv5, armv7, mipsel, wl500g, x86_32, and x86_64.
Check L<here|https://pkg.entware.net/binaries/> for supported platforms.

That github link also shows what environments should be supported.

It was tested on DSM-7.1 by H.Merijn Brand on a DS218+ and a DS220+ (both
Intel x64).

Entware comes with a precompiled 5.26.1 (Jan 2018) that allowes
building shared XS code. Note that this installation does B<not> use
a site_perl folder. The available C<cpan> works. If all required
development packages are installed too, also for XS.

Installing perl from the Community package center:

=over 4

=item *

Using your favourite browser open the DSM management page and start
the Package Center.

=item *

In Settings, add the following Package Sources:

  Name:     Community
  Location: https://synopackage.com/repository/spk/All

=item *

Still in Settings, in Channel Update, select Beta Channel.

=back

To complete the development environment, install make and gcc

 ds220# opkg install make gcc

Then, optionally, make sure you use the more recent bash and gawk.

 ds220# opkg install bash gawk
 ds220# cd /usr/bin
 ds220# mv bash bash.syno
 ds220# ln -s /opt/bin/bash .

In order to have Configure find the required libraries

 ds220# cd /opt/lib
 ds220# ln -s libcrypt.so.?       libcrypt.so
 ds220# ln -s libdl.so.?          libdl.so
 ds220# ln -s libgdbm.so.?        libgdbm.so
 ds220# ln -s libgdbm_compat.so.? libgdbm_compat.so
 ds220# ln -s libm.so.?           libm.so
 ds220# ln -s libpthread.so.?     libpthread.so
 ds220# ln -s libutil.so.?        libutil.so

=head3 DSM 6

Using iPkg has been deprecated on DSM 6, but an alternative is available
for DSM 6: entware/opkg. For instructions on how to use that, please read
L<Install Entware-ng on Synology NAS|https://github.com/Entware-ng/Entware-ng/wiki/Install-on-Synology-NAS>

That sadly does not (yet) work on QorIQ. At the moment of writing, the
supported architectures are armv5, armv7, mipsel, wl500g, x86_32, and x86_64.
Check L<here|https://pkg.entware.net/binaries/> for supported platforms.

Entware-ng comes with a precompiled 5.24.1 (June 2017) that allowes
building shared XS code. Note that this installation does B<not> use
a site_perl folder. The available C<cpan> works. If all required
development packages are installed too, also for XS.

=head3 DSM 5

As DSM is a trimmed-down Linux system, it lacks many of the tools and
libraries commonly found on Linux. The basic tools like sh, cp, rm,
etc. are implemented using
L<BusyBox|https://en.wikipedia.org/wiki/BusyBox>.

=over 4

=item *

Using your favourite browser open the DSM management page and start
the Package Center.

=item *

If you want to smoke test Perl, install C<Perl>.

=item *

In Settings, add the following Package Sources:

  https://www.cphub.net
  http://packages.quadrat4.de

As these two are both discontinued, it is unlikely you will be able
to set up a build environment on DSM 5.

=item *

Still in Settings, in Channel Update, select Beta Channel.

=item *

Press Refresh. In the left panel the item "Community" will appear.
Click it. Select "Bootstrap Installer Beta" and install it.

=item *

Likewise, install "iPKGui Beta".

The application window should now show an icon for iPKGui.

=item *

Start iPKGui. Install the packages C<make>, C<gcc> and C<coreutils>.

If you want to smoke test Perl, install C<patch>.

=back

The next step is to add some symlinks to system libraries. For
example, the development software expect a library C<libm.so> that
normally is a symlink to C<libm.so.6>. Synology only provides the
latter and not the symlink.

Here the actual architecture of the Synology system matters. You have
to find out where the gcc libraries have been installed. Look in /opt
for a directory similar to arm-none-linux-gnueab or
powerpc-linux-gnuspe. In the instructions below I'll use
powerpc-linux-gnuspe as an example.

=over 4

=item *

On the DSM management page start the Control Panel.

=item *

Click Terminal, and enable SSH service.

=item *

Close Terminal and the Control Panel.

=item *

Open a shell on the Synology using ssh and become root.

=item *

Execute the following commands:

  cd /lib
  ln -s libm.so.6 libm.so
  ln -s libcrypt.so.1 libcrypt.so
  ln -s libdl.so.2 libdl.so
  cd /opt/powerpc-linux-gnuspe/lib  (or
                                    /opt/arm-none-linux-gnueabi/lib)
  ln -s /lib/libdl.so.2 libdl.so

=back

B<WARNING:> When you perform a system software upgrade, these links
will disappear and need to be re-established.

=head2 Compiling Perl 5

When the build environment has been set up, building and testing Perl
is straightforward. The only thing you need to do is download the
sources as usual, and add a file Policy.sh as follows:

  # Administrivia.
  perladmin="your.email@goes.here"

  # Install Perl in a tree in /opt/perl instead of /opt/bin.
  prefix=/opt/perl

  # Select the compiler. Note that there is no 'cc' alias or link
  # on older DSM versions
  cc=gcc
  awk=/opt/bin/gawk

  # Build flags. Optional
  ccflags="-DDEBUGGING"

  # Library and include paths.
  locincpth="/opt/include"
  loclibpth="/opt/lib /usr/local/lib /usr/lib"
  libpth="/opt/lib /usr/local/lib /usr/lib"

You may want to create the destination directory and give it the right
permissions before installing, thus eliminating the need to build Perl
as a super user.

In the directory where you unpacked the sources, issue the familiar
commands:

  $ bash ./Configure -Dusedevel -Duseshrplib -Duse64bitall -des
  $ make -j2
  $ env TEST_JOBS=2 make test_harness
  $ make install

=head2 Known problems

=head3 Configure

The GNU C-compiler might spit out unexpected stuff under -v, which
causes the analysis of cppsymbols to fail because of unmatched quotes.

You'll note if config.sh fails with a syntax error.

=head3 Build

=over 4

=item Error message "No error definitions found".

This error is generated when it is not possible to find the local
definitions for error codes, due to the uncommon structure of the
Synology file system.

This error was fixed in the Perl development git for version 5.19,
commit 7a8f1212e5482613c8a5b0402528e3105b26ff24.

=back

=head3 Failing tests

=over 4

=item F<ext/DynaLoader/t/DynaLoader.t>

One subtest fails due to the uncommon structure of the Synology file
system. The file F</lib/glibc.so> is missing.

B<WARNING:> Do not symlink F</lib/glibc.so.6> to F</lib/glibc.so> or
some system components will start to fail.

=back

=head2 Smoke testing Perl

If building completes successfully, you can set up smoke testing as
described in the Test::Smoke documentation.

For smoke testing you need a running Perl. You can either install the
Synology supplied package for Perl 5.8.6, or build and install your
own, much more recent version.

Note that I could not run successful smokes when initiated by the
Synology Task Scheduler. I resorted to initiating the smokes via a
cron job run on another system, using ssh:

  ssh nas1 wrk/Test-Smoke/smoke/smokecurrent.sh

=head3 Local patches

When local patches are applied with smoke testing, the test driver
will automatically request regeneration of certain tables after the
patches are applied. The Synology supplied Perl 5.8.6 (at least on the
DS413) B<is NOT capable> of generating these tables. It will generate
opcodes with bogus values, causing the build to fail.

You can prevent regeneration by adding the setting

  'flags' => 0,

to the smoke config, or by adding another patch that inserts

  exit 0 if $] == 5.008006;

in the beginning of the C<regen.pl> program.

=head2 Adding libraries

The above procedure describes a basic environment and hence results in
a basic Perl. If you want to add additional libraries to Perl, you may
need some extra settings.

For example, the basic Perl does not have any of the DB libraries (db,
dbm, ndbm, gdsm). You can add these using iPKGui, however, you need to
set environment variable LD_LIBRARY_PATH to the appropriate value:

  LD_LIBRARY_PATH=/lib:/opt/lib
  export LD_LIBRARY_PATH

This setting needs to be in effect while Perl is built, but also when
the programs are run.

=head1 REVISION
