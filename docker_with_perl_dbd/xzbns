	(max pos (point-min))))))

(defun hg-restore-context (ctx)
  "Attempt to restore the user's editing context."
  (let ((point-context (nth 0 ctx))
	(mark-context (nth 1 ctx)))
    (goto-char (hg-find-context point-context))
    (when mark-context
      (set-mark (hg-find-context mark-context)))))


;;; Hooks.

(defun hg-mode-line-internal (status parents)
  (setq hg-status status
	hg-mode (and status (concat " Hg:"
				    parents
				    (cdr (assq status
					       '((normal . "")
						 (removed . "r")
						 (added . "a")
						 (deleted . "!")
						 (modified . "m"))))))))

(defun hg-mode-line (&optional force)
  "Update the modeline with the current status of a file.
An update occurs if optional argument FORCE is non-nil,
hg-update-modeline is non-nil, or we have not yet checked the state of
the file."
  (let ((root (hg-root)))
    (when (and root (or force hg-update-modeline (not hg-mode)))
      (let ((status (hg-file-status buffer-file-name))
	    (parents (hg-parents-for-mode-line root)))
	(hg-mode-line-internal status parents)
	status))))

(defun hg-mode (&optional toggle)
  "Minor mode for Mercurial distributed SCM integration.

The Mercurial mode user interface is based on that of VC mode, so if
you're already familiar with VC, the same keybindings and functions
will generally work.

Below is a list of many common SCM tasks.  In the list, `G/L\'
indicates whether a key binding is global (G) to a repository or
local (L) to a file.  Many commands take a prefix argument.

SCM Task                              G/L  Key Binding  Command Name
--------                              ---  -----------  ------------
Help overview (what you are reading)  G    C-c h h      hg-help-overview

Tell Mercurial to manage a file       G    C-c h a      hg-add
Commit changes to current file only   L    C-x v n      hg-commit-start
Undo changes to file since commit     L    C-x v u      hg-revert-buffer

Diff file vs last checkin             L    C-x v =      hg-diff

View file change history              L    C-x v l      hg-log
View annotated file                   L    C-x v a      hg-annotate

Diff repo vs last checkin             G    C-c h =      hg-diff-repo
View status of files in repo          G    C-c h s      hg-status
Commit all changes                    G    C-c h c      hg-commit-start

Undo all changes since last commit    G    C-c h U      hg-revert
View repo change history              G    C-c h l      hg-log-repo

See changes that can be pulled        G    C-c h ,      hg-incoming
Pull changes                          G    C-c h <      hg-pull
Update working directory after pull   G    C-c h u      hg-update
See changes that can be pushed        G    C-c h .      hg-outgoing
Push changes                          G    C-c h >      hg-push"
  (unless vc-make-backup-files
    (set (make-local-variable 'backup-inhibited) t))
  (run-hooks 'hg-mode-hook))

(defun hg-find-file-hook ()
  (ignore-errors
    (when (hg-mode-line)
      (hg-mode))))

(add-hook 'find-file-hooks 'hg-find-file-hook)

(defun hg-after-save-hook ()
  (ignore-errors
    (let ((old-status hg-status))
      (hg-mode-line)
      (if (and (not old-status) hg-status)
	  (hg-mode)))))

(add-hook 'after-save-hook 'hg-after-save-hook)


;;; User interface functions.

(defun hg-help-overview ()
  "This is an overview of the Mercurial SCM mode for Emacs.

You can find the source code, license (GPLv2+), and credits for this
code by typing `M-x find-library mercurial RET'."
  (interactive)
  (hg-view-output ("Mercurial Help Overview")
    (insert (documentation 'hg-help-overview))
    (let ((pos (point)))
      (insert (documentation 'hg-mode))
      (goto-char pos)
      (end-of-line 1)
      (delete-region pos (point)))
    (let ((hg-root-dir (hg-root)))
      (if (not hg-root-dir)
	  (error "error: %s: directory is not part of a Mercurial repository."
		 default-directory)
	(cd hg-root-dir)))))

(defun hg-fix-paths ()
  "Fix paths reported by some Mercurial commands."
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward " \\.\\.." nil t)
      (replace-match " " nil nil))))

(defun hg-add (path)
  "Add PATH to the Mercurial repository on the next commit.
With a prefix argument, prompt for the path to add."
  (interactive (list (hg-read-file-name " to add")))
  (let ((buf (current-buffer))
	(update (equal buffer-file-name path)))
    (hg-view-output (hg-output-buffer-name)
      (apply 'call-process (hg-binary) nil t nil (list "add" path))
      (hg-fix-paths)
      (goto-char (point-min))
      (cd (hg-root path)))
    (when update
      (unless vc-make-backup-files
	(set (make-local-variable 'backup-inhibited) t))
      (with-current-buffer buf
	(hg-mode-line)))))

(defun hg-addremove ()
  (interactive)
  (error "not implemented"))

(defun hg-annotate ()
  (interactive)
  (error "not implemented"))

(defun hg-commit-toggle-file (pos)
  "Toggle whether or not the file at POS will be committed."
  (interactive "d")
  (save-excursion
    (goto-char pos)
    (let (face
	  (inhibit-read-only t)
	  bol)
      (beginning-of-line)
      (setq bol (+ (point) 4))
      (setq face (get-text-property bol 'face))
      (end-of-line)
      (if (eq face 'bold)
	  (progn
	    (remove-text-properties bol (point) '(face nil))
	    (message "%s will not be committed"
		     (buffer-substring bol (point))))
	(add-text-properties bol (point) '(face bold))
	(message "%s will be committed"
		 (buffer-substring bol (point)))))))

(defun hg-commit-mouse-clicked (event)
  "Toggle whether or not the file at POS will be committed."
  (interactive "@e")
  (hg-commit-toggle-file (hg-event-point event)))

(defun hg-commit-kill ()
  "Kill the commit currently being prepared."
  (interactive)
  (when (or (not (buffer-modified-p)) (y-or-n-p "Really kill this commit? "))
    (let ((buf hg-prev-buffer))
      (kill-buffer nil)
      (switch-to-buffer buf))))

(defun hg-commit-finish ()
  "Finish preparing a commit, and perform the actual commit.
The hook hg-pre-commit-hook is run before anything else is done.  If
the commit message is empty and hg-commit-allow-empty-message is nil,
an error is raised.  If the list of files to commit is empty and
hg-commit-allow-empty-file-list is nil, an error is raised."
  (interactive)
  (let ((root hg-root))
    (save-excursion
      (run-hooks 'hg-pre-commit-hook)
      (goto-char (point-min))
      (search-forward hg-commit-message-start)
      (let (message files)
	(let ((start (point)))
	  (goto-char (point-max))
	  (search-backward hg-commit-message-end)
	  (setq message (hg-strip (buffer-substring start (point)))))
	(when (and (= (length message) 0)
		   (not hg-commit-allow-empty-message))
	  (error "Cannot proceed - commit message is empty"))
	(forward-line 1)
	(beginning-of-line)
	(while (< (point) (point-max))
	  (let ((pos (+ (point) 4)))
	    (end-of-line)
	    (when (eq (get-text-property pos 'face) 'bold)
	      (end-of-line)
	      (setq files (cons (buffer-substring pos (point)) files))))
	  (forward-line 1))
	(when (and (= (length files) 0)
		   (not hg-commit-allow-empty-file-list))
	  (error "Cannot proceed - no files to commit"))
	(setq message (concat message "\n"))
	(apply 'hg-run0 "--cwd" hg-root "commit" "-m" message files))
      (let ((buf hg-prev-buffer))
	(kill-buffer nil)
	(switch-to-buffer buf))
      (hg-update-mode-lines root))))

(defun hg-commit-mode ()
  "Mode for describing a commit of changes to a Mercurial repository.
This involves two actions: describing the changes with a commit
message, and choosing the files to commit.

To describe the commit, simply type some text in the designated area.

By default, all modified, added and removed files are selected for
committing.  Files that will be committed are displayed in bold face\;
those that will not are displayed in normal face.

To toggle whether a file will be committed, move the cursor over a
particular file and hit space or return.  Alternatively, middle click
on the file.

Key bindings
------------
\\[hg-commit-finish]		proceed with commit
\\[hg-commit-kill]		kill commit

\\[hg-diff-repo]		view diff of pending changes"
  (interactive)
  (use-local-map hg-commit-mode-map)
  (set-syntax-table text-mode-syntax-table)
  (setq local-abbrev-table text-mode-abbrev-table
	major-mode 'hg-commit-mode
	mode-name "Hg-Commit")
  (set-buffer-modified-p nil)
  (setq buffer-undo-list nil)
  (run-hooks 'text-mode-hook 'hg-commit-mode-hook))

(defun hg-commit-start ()
  "Prepare a commit of changes to the repository containing the current file."
  (interactive)
  (while hg-prev-buffer
    (set-buffer hg-prev-buffer))
  (let ((root (hg-root))
	(prev-buffer (current-buffer))
	modified-files)
    (unless root
      (error "Cannot commit outside a repository!"))
    (hg-sync-buffers root)
    (setq modified-files (hg-chomp (hg-run0 "--cwd" root "status" "-arm")))
    (when (and (= (length modified-files) 0)
	       (not hg-commit-allow-empty-file-list))
      (error "No pending changes to commit"))
    (let* ((buf-name (format "*Mercurial: Commit %s*" root)))
      (pop-to-buffer (get-buffer-create buf-name))
      (when (= (point-min) (point-max))
	(set (make-local-variable 'hg-root) root)
	(setq hg-prev-buffer prev-buffer)
	(insert "\n")
	(let ((bol (point)))
	  (insert hg-commit-message-end)
	  (add-text-properties bol (point) '(face bold-italic)))
	(let ((file-area (point)))
	  (insert modified-files)
	  (goto-char file-area)
	  (while (< (point) (point-max))
	    (let ((bol (point)))
	      (forward-char 1)
	      (insert "  ")
	      (end-of-line)
	      (add-text-properties (+ bol 4) (point)
				   '(face bold mouse-face highlight)))
	    (forward-line 1))
	  (goto-char file-area)
	  (add-text-properties (point) (point-max)
			       `(keymap ,hg-commit-mode-file-map))
	  (goto-char (point-min))
	  (insert hg-commit-message-start)
	  (add-text-properties (point-min) (point) '(face bold-italic))
	  (insert "\n\n")
	  (forward-line -1)
	  (save-excursion
	    (goto-char (point-max))
	    (search-backward hg-commit-message-end)
	    (add-text-properties (match-beginning 0) (point-max)
				 '(read-only t))
	    (goto-char (point-min))
	    (search-forward hg-commit-message-start)
	    (add-text-properties (match-beginning 0) (match-end 0)
				 '(read-only t)))
	  (hg-commit-mode)
          (cd root))))))

(defun hg-diff (path &optional rev1 rev2)
  "Show the differences between REV1 and REV2 of PATH.
When called interactively, the default behaviour is to treat REV1 as
the \"parent\" revision, REV2 as the current edited version of the file, and
PATH as the file edited in the current buffer.
With a prefix argument, prompt for all of these."
  (interactive (list (hg-read-file-name " to diff")
                     (let ((rev1 (hg-read-rev " to start with" 'parent)))
		       (and (not (eq rev1 'parent)) rev1))
		     (let ((rev2 (hg-read-rev " to end with" 'working-dir)))
		       (and (not (eq rev2 'working-dir)) rev2))))
  (hg-sync-buffers path)
  (let ((a-path (hg-abbrev-file-name path))
        ;; none revision is specified explicitly
        (none (and (not rev1) (not rev2)))
        ;; only one revision is specified explicitly
        (one (or (and (or (equal rev1 rev2) (not rev2)) rev1)
                 (and (not rev1) rev2)))
	diff)
    (hg-view-output ((cond
		      (none
		       (format "Mercurial: Diff against parent of %s" a-path))
		      (one
		       (format "Mercurial: Diff of rev %s of %s" one a-path))
		      (t
		       (format "Mercurial: Diff from rev %s to %s of %s"
			       rev1 rev2 a-path))))
      (cond
       (none
        (call-process (hg-binary) nil t nil "diff" path))
       (one
        (call-process (hg-binary) nil t nil "diff" "-r" one path))
       (t
        (call-process (hg-binary) nil t nil "diff" "-r" rev1 "-r" rev2 path)))
      (diff-mode)
      (setq diff (not (= (point-min) (point-max))))
      (font-lock-fontify-buffer)
      (cd (hg-root path)))
    diff))

(defun hg-diff-repo (path &optional rev1 rev2)
  "Show the differences between REV1 and REV2 of repository containing PATH.
When called interactively, the default behaviour is to treat REV1 as
the \"parent\" revision, REV2 as the current edited version of the file, and
PATH as the `hg-root' of the current buffer.
With a prefix argument, prompt for all of these."
  (interactive (list (hg-read-file-name " to diff")
                     (let ((rev1 (hg-read-rev " to start with" 'parent)))
		       (and (not (eq rev1 'parent)) rev1))
		     (let ((rev2 (hg-read-rev " to end with" 'working-dir)))
		       (and (not (eq rev2 'working-dir)) rev2))))
  (hg-diff (hg-root path) rev1 rev2))

(defun hg-forget (path)
  "Lose track of PATH, which has been added, but not yet committed.
This will prevent the file from being incorporated into the Mercurial
repository on the next commit.
With a prefix argument, prompt for the path to forget."
  (interactive (list (hg-read-file-name " to forget")))
  (let ((buf (current-buffer))
	(update (equal buffer-file-name path)))
    (hg-view-output (hg-output-buffer-name)
      (apply 'call-process (hg-binary) nil t nil (list "forget" path))
      ;; "hg forget" shows pathes relative NOT TO ROOT BUT TO REPOSITORY
      (hg-fix-paths)
      (goto-char (point-min))
      (cd (hg-root path)))
    (when update
      (with-current-buffer buf
        (when (local-variable-p 'backup-inhibited)
          (kill-local-variable 'backup-inhibited))
	(hg-mode-line)))))

(defun hg-incoming (&optional repo)
  "Display changesets present in REPO that are not present locally."
  (interactive (list (hg-read-repo-name " where changes would come from")))
  (hg-view-output ((format "Mercurial: Incoming from %s to %s"
			   (hg-abbrev-file-name (hg-root))
			   (hg-abbrev-file-name
			    (or repo hg-incoming-repository))))
    (call-process (hg-binary) nil t nil "incoming"
		  (or repo hg-incoming-repository))
    (hg-log-mode)
    (cd (hg-root))))

(defun hg-init ()
  (interactive)
  (error "not implemented"))

(defun hg-log-mode ()
  "Mode for viewing a Mercurial change log."
  (goto-char (point-min))
  (when (looking-at "^searching for changes.*$")
    (delete-region (match-beginning 0) (match-end 0)))
  (run-hooks 'hg-log-mode-hook))

(defun hg-log (path &optional rev1 rev2 log-limit)
  "Display the revision history of PATH.
History is displayed between REV1 and REV2.
Number of displayed changesets is limited to LOG-LIMIT.
REV1 defaults to the tip, while REV2 defaults to 0.
LOG-LIMIT defaults to `hg-log-limit'.
With a prefix argument, prompt for each parameter."
  (interactive (list (hg-read-file-name " to log")
                     (hg-read-rev " to start with"
                                  "tip")
                     (hg-read-rev " to end with"
				  "0")
                     (hg-read-number "Output limited to: "
                                     hg-log-limit)))
  (let ((a-path (hg-abbrev-file-name path))
        (r1 (or rev1 "tip"))
        (r2 (or rev2 "0"))
        (limit (format "%d" (or log-limit hg-log-limit))))
    (hg-view-output ((if (equal r1 r2)
                         (format "Mercurial: Log of rev %s of %s" rev1 a-path)
                       (format
                        "Mercurial: at most %s log(s) from rev %s to %s of %s"
                        limit r1 r2 a-path)))
      (eval (list* 'call-process (hg-binary) nil t nil
                   "log"
                   "-r" (format "%s:%s" r1 r2)
                   "-l" limit
                   (if (> (length path) (length (hg-root path)))
                       (cons path nil)
                     nil)))
      (hg-log-mode)
      (cd (hg-root path)))))

(defun hg-log-repo (path &optional rev1 rev2 log-limit)
  "Display the revision history of the repository containing PATH.
History is displayed between REV1 and REV2.
Number of displayed changesets is limited to LOG-LIMIT,
REV1 defaults to the tip, while REV2 defaults to 0.
LOG-LIMIT defaults to `hg-log-limit'.
With a prefix argument, prompt for each parameter."
  (interactive (list (hg-read-file-name " to log")
                     (hg-read-rev " to start with"
                                  "tip")
                     (hg-read-rev " to end with"
				  "0")
                     (hg-read-number "Output limited to: "
                                     hg-log-limit)))
  (hg-log (hg-root path) rev1 rev2 log-limit))

(defun hg-outgoing (&optional repo)
  "Display changesets present locally that are not present in REPO."
  (interactive (list (hg-read-repo-name " where changes would go to" nil
					hg-outgoing-repository)))
  (hg-view-output ((format "Mercurial: Outgoing from %s to %s"
			   (hg-abbrev-file-name (hg-root))
			   (hg-abbrev-file-name
			    (or repo hg-outgoing-repository))))
    (call-process (hg-binary) nil t nil "outgoing"
		  (or repo hg-outgoing-repository))
    (hg-log-mode)
    (cd (hg-root))))

(defun hg-pull (&optional repo)
  "Pull changes from repository REPO.
This does not update the working directory."
  (interactive (list (hg-read-repo-name " to pull from")))
  (hg-view-output ((format "Mercurial: Pull to %s from %s"
			   (hg-abbrev-file-name (hg-root))
			   (hg-abbrev-file-name
			    (or repo hg-incoming-repository))))
    (call-process (hg-binary) nil t nil "pull"
		  (or repo hg-incoming-repository))
    (cd (hg-root))))

(defun hg-push (&optional repo)
  "Push changes to repository REPO."
  (interactive (list (hg-read-repo-name " to push to")))
  (hg-view-output ((format "Mercurial: Push from %s to %s"
			   (hg-abbrev-file-name (hg-root))
			   (hg-abbrev-file-name
			    (or repo hg-outgoing-repository))))
    (call-process (hg-binary) nil t nil "push"
		  (or repo hg-outgoing-repository))
    (cd (hg-root))))

(defun hg-revert-buffer-internal ()
  (let ((ctx (hg-buffer-context)))
    (message "Reverting %s..." buffer-file-name)
    (hg-run0 "revert" buffer-file-name)
    (revert-buffer t t t)
    (hg-restore-context ctx)
    (hg-mode-line)
    (message "Reverting %s...done" buffer-file-name)))

(defun hg-revert-buffer ()
  "Revert current buffer's file back to the latest committed version.
If the file has not changed, nothing happens.  Otherwise, this
displays a diff and asks for confirmation before reverting."
  (interactive)
  (let ((vc-suppress-confirm nil)
	(obuf (current-buffer))
	diff)
    (vc-buffer-sync)
    (unwind-protect
	(setq diff (hg-diff buffer-file-name))
      (when diff
	(unless (yes-or-no-p "Discard changes? ")
	  (error "Revert cancelled")))
      (when diff
	(let ((buf (current-buffer)))
	  (delete-window (selected-window))
	  (kill-buffer buf))))
    (set-buffer obuf)
    (when diff
      (hg-revert-buffer-internal))))

(defun hg-root (&optional path)
  "Return the root of the repository that contains the given path.
If the path is outside a repository, return nil.
When called interactively, the root is printed.  A prefix argument
prompts for a path to check."
  (interactive (list (hg-read-file-name)))
  (if (or path (not hg-root))
      (let ((root (do ((prev nil dir)
		       (dir (file-name-directory
                             (or
                              path
                              buffer-file-name
                              (expand-file-name default-directory)))
			    (file-name-directory (directory-file-name dir))))
		      ((equal prev dir))
		    (when (file-directory-p (concat dir ".hg"))
		      (return dir)))))
	(when (interactive-p)
	  (if root
	      (message "The root of this repository is `%s'." root)
	    (message "The path `%s' is not in a Mercurial repository."
		     (hg-abbrev-file-name path))))
	root)
    hg-root))

(defun hg-cwd (&optional path)
  "Return the current directory of PATH within the repository."
  (do ((stack nil (cons (file-name-nondirectory
			 (directory-file-name dir))
			stack))
       (prev nil dir)
       (dir (file-name-directory (or path buffer-file-name
				     (expand-file-name default-directory)))
	    (file-name-directory (directory-file-name dir))))
      ((equal prev dir))
    (when (file-directory-p (concat dir ".hg"))
      (let ((cwd (mapconcat 'identity stack "/")))
	(unless (equal cwd "")
	  (return (file-name-as-directory cwd)))))))

(defun hg-status (path)
  "Print revision control status of a file or directory.
With prefix argument, prompt for the path to give status for.
Names are displayed relative to the repository root."
  (interactive (list (hg-read-file-name " for status" (hg-root))))
  (let ((root (hg-root)))
    (hg-view-output ((format "Mercurial: Status of %s in %s"
			     (let ((name (substring (expand-file-name path)
						    (length root))))
			       (if (> (length name) 0)
				   name
				 "*"))
			     (hg-abbrev-file-name root)))
      (apply 'call-process (hg-binary) nil t nil
	     (list "--cwd" root "status" path))
      (cd (hg-root path)))))

(defun hg-undo ()
  (interactive)
  (error "not implemented"))

(defun hg-update ()
  (interactive)
  (error "not implemented"))

(defun hg-version-other-window (rev)
  "Visit version REV of the current file in another window.
If the current file is named `F', the version is named `F.~REV~'.
If `F.~REV~' already exists, use it instead of checking it out again."
  (interactive "sVersion to visit (default is workfile version): ")
  (let* ((file buffer-file-name)
       	 (version (if (string-equal rev "")
		       "tip"
		        rev))
 	 (automatic-backup (vc-version-backup-file-name file version))
          (manual-backup (vc-version-backup-file-name file version 'manual)))
     (unless (file-exists-p manual-backup)
       (if (file-exists-p automatic-backup)
           (rename-file automatic-backup manual-backup nil)
         (hg-run0 "-q" "cat" "-r" version "-o" manual-backup file)))
     (find-file-other-window manual-backup)))


(provide 'mercurial)


;;; Local Variables:
;;; prompt-to-byte-compile: nil
;;; end:
                                                                                                                                                                                                                                                                                 usr/share/doc/mercurial-common/examples/perf.py                                                     0000644 0000000 0000000 00000362714 14355257011 020341  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # perf.py - performance test routines
'''helper extension to measure performance

Configurations
==============

``perf``
--------

``all-timing``
    When set, additional statistics will be reported for each benchmark: best,
    worst, median average. If not set only the best timing is reported
    (default: off).

``presleep``
  number of second to wait before any group of runs (default: 1)

``pre-run``
  number of run to perform before starting measurement.

``profile-benchmark``
  Enable profiling for the benchmarked section.
  (The first iteration is benchmarked)

``run-limits``
  Control the number of runs each benchmark will perform. The option value
  should be a list of `<time>-<numberofrun>` pairs. After each run the
  conditions are considered in order with the following logic:

      If benchmark has been running for <time> seconds, and we have performed
      <numberofrun> iterations, stop the benchmark,

  The default value is: `3.0-100, 10.0-3`

``stub``
    When set, benchmarks will only be run once, useful for testing
    (default: off)
'''

# "historical portability" policy of perf.py:
#
# We have to do:
# - make perf.py "loadable" with as wide Mercurial version as possible
#   This doesn't mean that perf commands work correctly with that Mercurial.
#   BTW, perf.py itself has been available since 1.1 (or eb240755386d).
# - make historical perf command work correctly with as wide Mercurial
#   version as possible
#
# We have to do, if possible with reasonable cost:
# - make recent perf command for historical feature work correctly
#   with early Mercurial
#
# We don't have to do:
# - make perf command for recent feature work correctly with early
#   Mercurial

import contextlib
import functools
import gc
import os
import random
import shutil
import struct
import sys
import tempfile
import threading
import time

import mercurial.revlog
from mercurial import (
    changegroup,
    cmdutil,
    commands,
    copies,
    error,
    extensions,
    hg,
    mdiff,
    merge,
    util,
)

# for "historical portability":
# try to import modules separately (in dict order), and ignore
# failure, because these aren't available with early Mercurial
try:
    from mercurial import branchmap  # since 2.5 (or bcee63733aad)
except ImportError:
    pass
try:
    from mercurial import obsolete  # since 2.3 (or ad0d6c2b3279)
except ImportError:
    pass
try:
    from mercurial import registrar  # since 3.7 (or 37d50250b696)

    dir(registrar)  # forcibly load it
except ImportError:
    registrar = None
try:
    from mercurial import repoview  # since 2.5 (or 3a6ddacb7198)
except ImportError:
    pass
try:
    from mercurial.utils import repoviewutil  # since 5.0
except ImportError:
    repoviewutil = None
try:
    from mercurial import scmutil  # since 1.9 (or 8b252e826c68)
except ImportError:
    pass
try:
    from mercurial import setdiscovery  # since 1.9 (or cb98fed52495)
except ImportError:
    pass

try:
    from mercurial import profiling
except ImportError:
    profiling = None

try:
    from mercurial.revlogutils import constants as revlog_constants

    perf_rl_kind = (revlog_constants.KIND_OTHER, b'created-by-perf')

    def revlog(opener, *args, **kwargs):
        return mercurial.revlog.revlog(opener, perf_rl_kind, *args, **kwargs)


except (ImportError, AttributeError):
    perf_rl_kind = None

    def revlog(opener, *args, **kwargs):
        return mercurial.revlog.revlog(opener, *args, **kwargs)


def identity(a):
    return a


try:
    from mercurial import pycompat

    getargspec = pycompat.getargspec  # added to module after 4.5
    _byteskwargs = pycompat.byteskwargs  # since 4.1 (or fbc3f73dc802)
    _sysstr = pycompat.sysstr  # since 4.0 (or 2219f4f82ede)
    _bytestr = pycompat.bytestr  # since 4.2 (or b70407bd84d5)
    _xrange = pycompat.xrange  # since 4.8 (or 7eba8f83129b)
    fsencode = pycompat.fsencode  # since 3.9 (or f4a5e0e86a7e)
    if pycompat.ispy3:
        _maxint = sys.maxsize  # per py3 docs for replacing maxint
    else:
        _maxint = sys.maxint
except (NameError, ImportError, AttributeError):
    import inspect

    getargspec = inspect.getargspec
    _byteskwargs = identity
    _bytestr = str
    fsencode = identity  # no py3 support
    _maxint = sys.maxint  # no py3 support
    _sysstr = lambda x: x  # no py3 support
    _xrange = xrange

try:
    # 4.7+
    queue = pycompat.queue.Queue
except (NameError, AttributeError, ImportError):
    # <4.7.
    try:
        queue = pycompat.queue
    except (NameError, AttributeError, ImportError):
        import Queue as queue

try:
    from mercurial import logcmdutil

    makelogtemplater = logcmdutil.maketemplater
except (AttributeError, ImportError):
    try:
        makelogtemplater = cmdutil.makelogtemplater
    except (AttributeError, ImportError):
        makelogtemplater = None

# for "historical portability":
# define util.safehasattr forcibly, because util.safehasattr has been
# available since 1.9.3 (or 94b200a11cf7)
_undefined = object()


def safehasattr(thing, attr):
    return getattr(thing, _sysstr(attr), _undefined) is not _undefined


setattr(util, 'safehasattr', safehasattr)

# for "historical portability":
# define util.timer forcibly, because util.timer has been available
# since ae5d60bb70c9
if safehasattr(time, 'perf_counter'):
    util.timer = time.perf_counter
elif os.name == b'nt':
    util.timer = time.clock
else:
    util.timer = time.time

# for "historical portability":
# use locally defined empty option list, if formatteropts isn't
# available, because commands.formatteropts has been available since
# 3.2 (or 7a7eed5176a4), even though formatting itself has been
# available since 2.2 (or ae5f92e154d3)
formatteropts = getattr(
    cmdutil, "formatteropts", getattr(commands, "formatteropts", [])
)

# for "historical portability":
# use locally defined option list, if debugrevlogopts isn't available,
# because commands.debugrevlogopts has been available since 3.7 (or
# 5606f7d0d063), even though cmdutil.openrevlog() has been available
# since 1.9 (or a79fea6b3e77).
revlogopts = getattr(
    cmdutil,
    "debugrevlogopts",
    getattr(
        commands,
        "debugrevlogopts",
        [
            (b'c', b'changelog', False, b'open changelog'),
            (b'm', b'manifest', False, b'open manifest'),
            (b'', b'dir', False, b'open directory manifest'),
        ],
    ),
)

cmdtable = {}

# for "historical portability":
# define parsealiases locally, because cmdutil.parsealiases has been
# available since 1.5 (or 6252852b4332)
def parsealiases(cmd):
    return cmd.split(b"|")


if safehasattr(registrar, 'command'):
    command = registrar.command(cmdtable)
elif safehasattr(cmdutil, 'command'):
    command = cmdutil.command(cmdtable)
    if 'norepo' not in getargspec(command).args:
        # for "historical portability":
        # wrap original cmdutil.command, because "norepo" option has
        # been available since 3.1 (or 75a96326cecb)
        _command = command

        def command(name, options=(), synopsis=None, norepo=False):
            if norepo:
                commands.norepo += b' %s' % b' '.join(parsealiases(name))
            return _command(name, list(options), synopsis)


else:
    # for "historical portability":
    # define "@command" annotation locally, because cmdutil.command
    # has been available since 1.9 (or 2daa5179e73f)
    def command(name, options=(), synopsis=None, norepo=False):
        def decorator(func):
            if synopsis:
                cmdtable[name] = func, list(options), synopsis
            else:
                cmdtable[name] = func, list(options)
            if norepo:
                commands.norepo += b' %s' % b' '.join(parsealiases(name))
            return func

        return decorator


try:
    import mercurial.registrar
    import mercurial.configitems

    configtable = {}
    configitem = mercurial.registrar.configitem(configtable)
    configitem(
        b'perf',
        b'presleep',
        default=mercurial.configitems.dynamicdefault,
        experimental=True,
    )
    configitem(
        b'perf',
        b'stub',
        default=mercurial.configitems.dynamicdefault,
        experimental=True,
    )
    configitem(
        b'perf',
        b'parentscount',
        default=mercurial.configitems.dynamicdefault,
        experimental=True,
    )
    configitem(
        b'perf',
        b'all-timing',
        default=mercurial.configitems.dynamicdefault,
        experimental=True,
    )
    configitem(
        b'perf',
        b'pre-run',
        default=mercurial.configitems.dynamicdefault,
    )
    configitem(
        b'perf',
        b'profile-benchmark',
        default=mercurial.configitems.dynamicdefault,
    )
    configitem(
        b'perf',
        b'run-limits',
        default=mercurial.configitems.dynamicdefault,
        experimental=True,
    )
except (ImportError, AttributeError):
    pass
except TypeError:
    # compatibility fix for a11fd395e83f
    # hg version: 5.2
    configitem(
        b'perf',
        b'presleep',
        default=mercurial.configitems.dynamicdefault,
    )
    configitem(
        b'perf',
        b'stub',
        default=mercurial.configitems.dynamicdefault,
    )
    configitem(
        b'perf',
        b'parentscount',
        default=mercurial.configitems.dynamicdefault,
    )
    configitem(
        b'perf',
        b'all-timing',
        default=mercurial.configitems.dynamicdefault,
    )
    configitem(
        b'perf',
        b'pre-run',
        default=mercurial.configitems.dynamicdefault,
    )
    configitem(
        b'perf',
        b'profile-benchmark',
        default=mercurial.configitems.dynamicdefault,
    )
    configitem(
        b'perf',
        b'run-limits',
        default=mercurial.configitems.dynamicdefault,
    )


def getlen(ui):
    if ui.configbool(b"perf", b"stub", False):
        return lambda x: 1
    return len


class noop:
    """dummy context manager"""

    def __enter__(self):
        pass

    def __exit__(self, *args):
        pass


NOOPCTX = noop()


def gettimer(ui, opts=None):
    """return a timer function and formatter: (timer, formatter)

    This function exists to gather the creation of formatter in a single
    place instead of duplicating it in all performance commands."""

    # enforce an idle period before execution to counteract power management
    # experimental config: perf.presleep
    time.sleep(getint(ui, b"perf", b"presleep", 1))

