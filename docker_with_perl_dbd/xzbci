	0x21A3,
	0x21A4,
	0x21A6,
	0x21A7,
	0x21AE,
	0x21AF,
	0x21CE,
	0x21D0,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x21F4,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2322,
	0x2329,
	0x232B,
	0x237C,
	0x237D,
	0x239B,
	0x23B4,
	0x23DC,
	0x23E2,
	0x2427,
	0x2440,
	0x244B,
	0x249C,
	0x24EA,
	0x2500,
	0x25B7,
	0x25B8,
	0x25C1,
	0x25C2,
	0x25F8,
	0x2600,
	0x266F,
	0x2670,
	0x2768,
	0x2794,
	0x27C0,
	0x2800,
	0x2900,
	0x2B00,
	0x2B30,
	0x2B45,
	0x2B47,
	0x2B4D,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B97,
	0x2C00,
	0x2CE5,
	0x2CEB,
	0x2E50,
	0x2E52,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3004,
	0x3005,
	0x3012,
	0x3014,
	0x3020,
	0x3021,
	0x3036,
	0x3038,
	0x303E,
	0x3040,
	0x3190,
	0x3192,
	0x3196,
	0x31A0,
	0x31C0,
	0x31E4,
	0x3200,
	0x321F,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA828,
	0xA82C,
	0xA836,
	0xA838,
	0xA839,
	0xA83A,
	0xAA77,
	0xAA7A,
	0xFD40,
	0xFD50,
	0xFDCF,
	0xFDD0,
	0xFDFD,
	0xFE00,
	0xFFE4,
	0xFFE5,
	0xFFE8,
	0xFFE9,
	0xFFED,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10137,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x1018F,
	0x10190,
	0x1019D,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10877,
	0x10879,
	0x10AC8,
	0x10AC9,
	0x1173F,
	0x11740,
	0x11FD5,
	0x11FDD,
	0x11FE1,
	0x11FF2,
	0x16B3C,
	0x16B40,
	0x16B45,
	0x16B46,
	0x1BC9C,
	0x1BC9D,
	0x1CF50,
	0x1CFC4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1EB,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1E14F,
	0x1E150,
	0x1ECAC,
	0x1ECAD,
	0x1ED2E,
	0x1ED2F,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F10D,
	0x1F1AE,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F3FB,
	0x1F400,
	0x1F6D8,
	0x1F6DD,
	0x1F6ED,
	0x1F6F0,
	0x1F6FD,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D9,
	0x1F7E0,
	0x1F7EC,
	0x1F7F0,
	0x1F7F1,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F8B0,
	0x1F8B2,
	0x1F900,
	0x1FA54,
	0x1FA60,
	0x1FA6E,
	0x1FA70,
	0x1FA75,
	0x1FA78,
	0x1FA7D,
	0x1FA80,
	0x1FA87,
	0x1FA90,
	0x1FAAD,
	0x1FAB0,
	0x1FABB,
	0x1FAC0,
	0x1FAC6,
	0x1FAD0,
	0x1FADA,
	0x1FAE0,
	0x1FAE8,
	0x1FAF0,
	0x1FAF7,
	0x1FB00,
	0x1FB93,
	0x1FB94,
	0x1FBCB
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_SO_invlist[] = {  /* for EBCDIC 037 */
	373,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6A,
	0x6B,
	0x90,
	0x91,
	0xAF,
	0xB0,
	0xB4,
	0xB5,
	0x482,
	0x483,
	0x58D,
	0x58F,
	0x60E,
	0x610,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x7F6,
	0x7F7,
	0x9FA,
	0x9FB,
	0xB70,
	0xB71,
	0xBF3,
	0xBF9,
	0xBFA,
	0xBFB,
	0xC7F,
	0xC80,
	0xD4F,
	0xD50,
	0xD79,
	0xD7A,
	0xF01,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xFBE,
	0xFC6,
	0xFC7,
	0xFCD,
	0xFCE,
	0xFD0,
	0xFD5,
	0xFD9,
	0x109E,
	0x10A0,
	0x1390,
	0x139A,
	0x166D,
	0x166E,
	0x1940,
	0x1941,
	0x19DE,
	0x1A00,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B7D,
	0x2100,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x214A,
	0x214B,
	0x214C,
	0x214E,
	0x214F,
	0x2150,
	0x218A,
	0x218C,
	0x2195,
	0x219A,
	0x219C,
	0x21A0,
	0x21A1,
	0x21A3,
	0x21A4,
	0x21A6,
	0x21A7,
	0x21AE,
	0x21AF,
	0x21CE,
	0x21D0,
	0x21D2,
	0x21D3,
	0x21D4,
	0x21D5,
	0x21F4,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2322,
	0x2329,
	0x232B,
	0x237C,
	0x237D,
	0x239B,
	0x23B4,
	0x23DC,
	0x23E2,
	0x2427,
	0x2440,
	0x244B,
	0x249C,
	0x24EA,
	0x2500,
	0x25B7,
	0x25B8,
	0x25C1,
	0x25C2,
	0x25F8,
	0x2600,
	0x266F,
	0x2670,
	0x2768,
	0x2794,
	0x27C0,
	0x2800,
	0x2900,
	0x2B00,
	0x2B30,
	0x2B45,
	0x2B47,
	0x2B4D,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B97,
	0x2C00,
	0x2CE5,
	0x2CEB,
	0x2E50,
	0x2E52,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3004,
	0x3005,
	0x3012,
	0x3014,
	0x3020,
	0x3021,
	0x3036,
	0x3038,
	0x303E,
	0x3040,
	0x3190,
	0x3192,
	0x3196,
	0x31A0,
	0x31C0,
	0x31E4,
	0x3200,
	0x321F,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA828,
	0xA82C,
	0xA836,
	0xA838,
	0xA839,
	0xA83A,
	0xAA77,
	0xAA7A,
	0xFD40,
	0xFD50,
	0xFDCF,
	0xFDD0,
	0xFDFD,
	0xFE00,
	0xFFE4,
	0xFFE5,
	0xFFE8,
	0xFFE9,
	0xFFED,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10137,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x1018F,
	0x10190,
	0x1019D,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10877,
	0x10879,
	0x10AC8,
	0x10AC9,
	0x1173F,
	0x11740,
	0x11FD5,
	0x11FDD,
	0x11FE1,
	0x11FF2,
	0x16B3C,
	0x16B40,
	0x16B45,
	0x16B46,
	0x1BC9C,
	0x1BC9D,
	0x1CF50,
	0x1CFC4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1EB,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1E14F,
	0x1E150,
	0x1ECAC,
	0x1ECAD,
	0x1ED2E,
	0x1ED2F,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F10D,
	0x1F1AE,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F3FB,
	0x1F400,
	0x1F6D8,
	0x1F6DD,
	0x1F6ED,
	0x1F6F0,
	0x1F6FD,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D9,
	0x1F7E0,
	0x1F7EC,
	0x1F7F0,
	0x1F7F1,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F8B0,
	0x1F8B2,
	0x1F900,
	0x1FA54,
	0x1FA60,
	0x1FA6E,
	0x1FA70,
	0x1FA75,
	0x1FA78,
	0x1FA7D,
	0x1FA80,
	0x1FA87,
	0x1FA90,
	0x1FAAD,
	0x1FAB0,
	0x1FABB,
	0x1FAC0,
	0x1FAC6,
	0x1FAD0,
	0x1FADA,
	0x1FAE0,
	0x1FAE8,
	0x1FAF0,
	0x1FAF7,
	0x1FB00,
	0x1FB93,
	0x1FB94,
	0x1FBCB
};

#  endif	/* EBCDIC 037 */

static const UV UNI_SOGD_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x640,
	0x641,
	0x10F30,
	0x10F5A
};

static const UV UNI_SOGO_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10F00,
	0x10F28
};

static const UV UNI_SORA_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA
};

static const UV UNI_SOYO_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11A50,
	0x11AA3
};

static const UV UNI_SPECIALS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFFF0,
	0x10000
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_STERM_invlist[] = {  /* for ASCII/Latin1 */
	159,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x22,
	0x2E,
	0x2F,
	0x3F,
	0x40,
	0x589,
	0x58A,
	0x61D,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x703,
	0x7F9,
	0x7FA,
	0x837,
	0x838,
	0x839,
	0x83A,
	0x83D,
	0x83F,
	0x964,
	0x966,
	0x104A,
	0x104C,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x166E,
	0x166F,
	0x1735,
	0x1737,
	0x1803,
	0x1804,
	0x1809,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1B7D,
	0x1B7F,
	0x1C3B,
	0x1C3D,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x2E53,
	0x2E55,
	0x3002,
	0x3003,
	0xA4FF,
	0xA500,
	0xA60E,
	0xA610,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C8,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE52,
	0xFE53,
	0xFE56,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF0E,
	0xFF0F,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0x10A56,
	0x10A58,
	0x10F55,
	0x10F5A,
	0x10F86,
	0x10F8A,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144D,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11944,
	0x11945,
	0x11946,
	0x11947,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11C41,
	0x11C43,
	0x11EF7,
	0x11EF9,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B39,
	0x16B44,
	0x16B45,
	0x16E98,
	0x16E99,
	0x1BC9F,
	0x1BCA0,
	0x1DA88,
	0x1DA89
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_STERM_invlist[] = {  /* for EBCDIC 1047 */
	159,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x5A,
	0x5B,
	0x6F,
	0x70,
	0x589,
	0x58A,
	0x61D,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x703,
	0x7F9,
	0x7FA,
	0x837,
	0x838,
	0x839,
	0x83A,
	0x83D,
	0x83F,
	0x964,
	0x966,
	0x104A,
	0x104C,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x166E,
	0x166F,
	0x1735,
	0x1737,
	0x1803,
	0x1804,
	0x1809,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1B7D,
	0x1B7F,
	0x1C3B,
	0x1C3D,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x2E53,
	0x2E55,
	0x3002,
	0x3003,
	0xA4FF,
	0xA500,
	0xA60E,
	0xA610,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C8,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE52,
	0xFE53,
	0xFE56,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF0E,
	0xFF0F,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0x10A56,
	0x10A58,
	0x10F55,
	0x10F5A,
	0x10F86,
	0x10F8A,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11141,
