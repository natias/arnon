
See also L</signbit>.

=item C<creat>

Create a new file.  This returns a file descriptor like the ones returned by
C<POSIX::open>.  Use C<POSIX::close> to close the file.

	$fd = POSIX::creat( "foo", 0611 );
	POSIX::close( $fd );

See also L<perlfunc/sysopen> and its C<O_CREAT> flag.

=item C<ctermid>

Generates the path name for the controlling terminal.

	$path = POSIX::ctermid();

=item C<ctime>

This is identical to the C function C<ctime()> and equivalent
to C<asctime(localtime(...))>, see L</asctime> and L</localtime>.

=item C<cuserid> [POSIX.1-1988]

Get the login name of the owner of the current process.

	$name = POSIX::cuserid();

Note: this function has not been specified by POSIX since 1990 and is included
only for backwards compatibility. New code should use L<C<getlogin()>|perlfunc/getlogin> instead.

=item C<difftime>

This is identical to the C function C<difftime()>, for returning
the time difference (in seconds) between two times (as returned
by C<time()>), see L</time>.

=item C<div>

Not implemented.  C<div()> is C-specific, use L<perlfunc/int> on the usual C</> division and
the modulus C<%>.

=item C<dup>

This is similar to the C function C<dup()>, for duplicating a file
descriptor.

This uses file descriptors such as those obtained by calling
C<POSIX::open>.

Returns C<undef> on failure.

=item C<dup2>

This is similar to the C function C<dup2()>, for duplicating a file
descriptor to an another known file descriptor.

This uses file descriptors such as those obtained by calling
C<POSIX::open>.

Returns C<undef> on failure.

=item C<erf>

The error function [C99].  Added in Perl v5.22.

=item C<erfc>

The complementary error function [C99].  Added in Perl v5.22.

=item C<errno>

Returns the value of errno.

	$errno = POSIX::errno();

This identical to the numerical values of the C<$!>, see L<perlvar/$ERRNO>.

=item C<execl>

Not implemented.  C<execl()> is C-specific, see L<perlfunc/exec>.

=item C<execle>

Not implemented.  C<execle()> is C-specific, see L<perlfunc/exec>.

=item C<execlp>

Not implemented.  C<execlp()> is C-specific, see L<perlfunc/exec>.

=item C<execv>

Not implemented.  C<execv()> is C-specific, see L<perlfunc/exec>.

=item C<execve>

Not implemented.  C<execve()> is C-specific, see L<perlfunc/exec>.

=item C<execvp>

Not implemented.  C<execvp()> is C-specific, see L<perlfunc/exec>.

=item C<exit>

This is identical to Perl's builtin C<exit()> function for exiting the
program, see L<perlfunc/exit>.

=item C<exp>

This is identical to Perl's builtin C<exp()> function for
returning the exponent (I<e>-based) of the numerical argument,
see L<perlfunc/exp>.

=item C<expm1>

Equivalent to C<exp(x) - 1>, but more precise for small argument values [C99].
Added in Perl v5.22.

See also L</log1p>.

=item C<fabs>

This is identical to Perl's builtin C<abs()> function for returning
the absolute value of the numerical argument, see L<perlfunc/abs>.

=item C<fclose>

Not implemented.  Use method C<IO::Handle::close()> instead, or see L<perlfunc/close>.

=item C<fcntl>

This is identical to Perl's builtin C<fcntl()> function,
see L<perlfunc/fcntl>.

=item C<fdopen>

Not implemented.  Use method C<IO::Handle::new_from_fd()> instead, or see L<perlfunc/open>.

=item C<feof>

Not implemented.  Use method C<IO::Handle::eof()> instead, or see L<perlfunc/eof>.

=item C<ferror>

Not implemented.  Use method C<IO::Handle::error()> instead.

=item C<fflush>

Not implemented.  Use method C<IO::Handle::flush()> instead.
See also C<L<perlvar/$OUTPUT_AUTOFLUSH>>.

=item C<fgetc>

Not implemented.  Use method C<IO::Handle::getc()> instead, or see L<perlfunc/read>.

=item C<fgetpos>

Not implemented.  Use method C<IO::Seekable::getpos()> instead, or see L<perlfunc/seek>.

=item C<fgets>

Not implemented.  Use method C<IO::Handle::gets()> instead.  Similar to E<lt>E<gt>, also known
as L<perlfunc/readline>.

=item C<fileno>

Not implemented.  Use method C<IO::Handle::fileno()> instead, or see L<perlfunc/fileno>.

=item C<floor>

This is identical to the C function C<floor()>, returning the largest
integer value less than or equal to the numerical argument.

=item C<fdim>

"Positive difference", S<C<x - y>> if S<C<x E<gt> y>>, zero otherwise [C99].
Added in Perl v5.22.

=item C<fegetround>

Returns the current floating point rounding mode, one of

  FE_TONEAREST FE_TOWARDZERO FE_UPWARD FE_DOWNWARD

C<FE_TONEAREST> is like L</round>, C<FE_TOWARDZERO> is like L</trunc> [C99].
Added in Perl v5.22.

=item C<fesetround>

Sets the floating point rounding mode, see L</fegetround> [C99].  Added in
Perl v5.22.

=item C<fma>

"Fused multiply-add", S<C<x * y + z>>, possibly faster (and less lossy)
than the explicit two operations [C99].  Added in Perl v5.22.

 my $fused = POSIX::fma($x, $y, $z);

=item C<fmax>

Maximum of C<x> and C<y>, except when either is C<NaN>, returns the other [C99].
Added in Perl v5.22.

 my $min = POSIX::fmax($x, $y);

=item C<fmin>

Minimum of C<x> and C<y>, except when either is C<NaN>, returns the other [C99].
Added in Perl v5.22.

 my $min = POSIX::fmin($x, $y);

=item C<fmod>

This is identical to the C function C<fmod()>.

	$r = fmod($x, $y);

It returns the remainder S<C<$r = $x - $n*$y>>, where S<C<$n = trunc($x/$y)>>.
The C<$r> has the same sign as C<$x> and magnitude (absolute value)
less than the magnitude of C<$y>.

=item C<fopen>

Not implemented.  Use method C<IO::File::open()> instead, or see L<perlfunc/open>.

=item C<fork>

This is identical to Perl's builtin C<fork()> function
for duplicating the current process, see L<perlfunc/fork>
and L<perlfork> if you are in Windows.

=item C<fpathconf>

Retrieves the value of a configurable limit on a file or directory.  This
uses file descriptors such as those obtained by calling C<POSIX::open>.

The following will determine the maximum length of the longest allowable
pathname on the filesystem which holds F</var/foo>.

	$fd = POSIX::open( "/var/foo", &POSIX::O_RDONLY );
	$path_max = POSIX::fpathconf($fd, &POSIX::_PC_PATH_MAX);

Returns C<undef> on failure.

=item C<fpclassify>

Returns one of

  FP_NORMAL FP_ZERO FP_SUBNORMAL FP_INFINITE FP_NAN

telling the class of the argument [C99].  C<FP_INFINITE> is positive
or negative infinity, C<FP_NAN> is not-a-number.  C<FP_SUBNORMAL>
means subnormal numbers (also known as denormals), very small numbers
with low precision. C<FP_ZERO> is zero.  C<FP_NORMAL> is all the rest.
Added in Perl v5.22.

=item C<fprintf>

Not implemented.  C<fprintf()> is C-specific, see L<perlfunc/printf> instead.

=item C<fputc>

Not implemented.  C<fputc()> is C-specific, see L<perlfunc/print> instead.

=item C<fputs>

Not implemented.  C<fputs()> is C-specific, see L<perlfunc/print> instead.

=item C<fread>

Not implemented.  C<fread()> is C-specific, see L<perlfunc/read> instead.

=item C<free>

Not implemented.  C<free()> is C-specific.  Perl does memory management transparently.

=item C<freopen>

Not implemented.  C<freopen()> is C-specific, see L<perlfunc/open> instead.

=item C<frexp>

Return the mantissa and exponent of a floating-point number.

	($mantissa, $exponent) = POSIX::frexp( 1.234e56 );

=item C<fscanf>

Not implemented.  C<fscanf()> is C-specific, use E<lt>E<gt> and regular expressions instead.

=item C<fseek>

Not implemented.  Use method C<IO::Seekable::seek()> instead, or see L<perlfunc/seek>.

=item C<fsetpos>

Not implemented.  Use method C<IO::Seekable::setpos()> instead, or seek L<perlfunc/seek>.

=item C<fstat>

Get file status.  This uses file descriptors such as those obtained by
calling C<POSIX::open>.  The data returned is identical to the data from
Perl's builtin C<stat> function.

	$fd = POSIX::open( "foo", &POSIX::O_RDONLY );
	@stats = POSIX::fstat( $fd );

=item C<fsync>

Not implemented.  Use method C<IO::Handle::sync()> instead.

=item C<ftell>

Not implemented.  Use method C<IO::Seekable::tell()> instead, or see L<perlfunc/tell>.

=item C<fwrite>

Not implemented.  C<fwrite()> is C-specific, see L<perlfunc/print> instead.

=item C<getc>

This is identical to Perl's builtin C<getc()> function,
see L<perlfunc/getc>.

=item C<getchar>

Returns one character from STDIN.  Identical to Perl's C<getc()>,
see L<perlfunc/getc>.

=item C<getcwd>

Returns the name of the current working directory.
See also L<Cwd>.

=item C<getegid>

Returns the effective group identifier.  Similar to Perl' s builtin
variable C<$(>, see L<perlvar/$EGID>.

=item C<getenv>

Returns the value of the specified environment variable.
The same information is available through the C<%ENV> array.

=item C<geteuid>

Returns the effective user identifier.  Identical to Perl's builtin C<$E<gt>>
variable, see L<perlvar/$EUID>.

=item C<getgid>

Returns the user's real group identifier.  Similar to Perl's builtin
variable C<$)>, see L<perlvar/$GID>.

=item C<getgrgid>

This is identical to Perl's builtin C<getgrgid()> function for
returning group entries by group identifiers, see
L<perlfunc/getgrgid>.

=item C<getgrnam>

This is identical to Perl's builtin C<getgrnam()> function for
returning group entries by group names, see L<perlfunc/getgrnam>.

=item C<getgroups>

Returns the ids of the user's supplementary groups.  Similar to Perl's
builtin variable C<$)>, see L<perlvar/$GID>.

=item C<getlogin>

This is identical to Perl's builtin C<getlogin()> function for
returning the user name associated with the current session, see
L<perlfunc/getlogin>.

=item C<getpayload>

	use POSIX ':nan_payload';
	getpayload($var)

Returns the C<NaN> payload.  Added in Perl v5.24.

Note the API instability warning in L</setpayload>.

See L</nan> for more discussion about C<NaN>.

=item C<getpgrp>

This is identical to Perl's builtin C<getpgrp()> function for
returning the process group identifier of the current process, see
L<perlfunc/getpgrp>.

=item C<getpid>

Returns the process identifier.  Identical to Perl's builtin
variable C<$$>, see L<perlvar/$PID>.

=item C<getppid>

This is identical to Perl's builtin C<getppid()> function for
returning the process identifier of the parent process of the current
process , see L<perlfunc/getppid>.

=item C<getpwnam>

This is identical to Perl's builtin C<getpwnam()> function for
returning user entries by user names, see L<perlfunc/getpwnam>.

=item C<getpwuid>

This is identical to Perl's builtin C<getpwuid()> function for
returning user entries by user identifiers, see L<perlfunc/getpwuid>.

=item C<gets>

Returns one line from C<STDIN>, similar to E<lt>E<gt>, also known
as the C<readline()> function, see L<perlfunc/readline>.

B<NOTE>: if you have C programs that still use C<gets()>, be very
afraid.  The C<gets()> function is a source of endless grief because
it has no buffer overrun checks.  It should B<never> be used.  The
C<fgets()> function should be preferred instead.

=item C<getuid>

Returns the user's identifier.  Identical to Perl's builtin C<$E<lt>> variable,
see L<perlvar/$UID>.

=item C<gmtime>

This is identical to Perl's builtin C<gmtime()> function for
converting seconds since the epoch to a date in Greenwich Mean Time,
see L<perlfunc/gmtime>.

=item C<hypot>

Equivalent to C<S<sqrt(x * x + y * y)>> except more stable on very large
or very small arguments [C99].  Added in Perl v5.22.

=item C<ilogb>

Integer binary logarithm [C99].  Added in Perl v5.22.

For example C<ilogb(20)> is 4, as an integer.

See also L</logb>.

=item C<Inf>

The infinity as a constant:

   use POSIX qw(Inf);
   my $pos_inf = +Inf;  # Or just Inf.
   my $neg_inf = -Inf;

See also L</isinf>, and L</fpclassify>.

=item C<isalnum>

This function has been removed as of Perl v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:alnum:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isalpha>

This function has been removed as of Perl v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:alpha:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isatty>

Returns a boolean indicating whether the specified filehandle is connected
to a tty.  Similar to the C<-t> operator, see L<perlfunc/-X>.

=item C<iscntrl>

This function has been removed as of Perl v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:cntrl:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isdigit>

This function has been removed as of Perl v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:digit:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isfinite>

Returns true if the argument is a finite number (that is, not an
infinity, or the not-a-number) [C99].  Added in Perl v5.22.

See also L</isinf>, L</isnan>, and L</fpclassify>.

=item C<isgraph>

This function has been removed as of Perl v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:graph:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isgreater>

(Also C<isgreaterequal>, C<isless>, C<islessequal>, C<islessgreater>,
C<isunordered>)

Floating point comparisons which handle the C<NaN> [C99].  Added in Perl
v5.22.

=item C<isinf>

Returns true if the argument is an infinity (positive or negative) [C99].
Added in Perl v5.22.

See also L</Inf>, L</isnan>, L</isfinite>, and L</fpclassify>.

=item C<islower>

This function has been removed as of Perl v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:lower:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isnan>

Returns true if the argument is C<NaN> (not-a-number) [C99].  Added in
Perl v5.22.

Note that you can also test for "C<NaN>-ness" with
L<equality operators|perlop/"Equality Operators"> (C<==> or C<!=>), as in

    print "x is not a NaN\n" if $x == $x;

since the C<NaN> is not equal to anything, B<including itself>.

See also L</nan>, L</NaN>, L</isinf>, and L</fpclassify>.

=item C<isnormal>

Returns true if the argument is normal (that is, not a subnormal/denormal,
and not an infinity, or a not-a-number) [C99].  Added in Perl v5.22.

See also L</isfinite>, and L</fpclassify>.

=item C<isprint>

This function has been removed as of Perl v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:print:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<ispunct>

This function has been removed as of Perl v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:punct:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<issignaling>

	use POSIX ':nan_payload';
	issignaling($var, $payload)

Return true if the argument is a I<signaling> NaN.  Added in Perl v5.24.

Note the API instability warning in L</setpayload>.

See L</nan> for more discussion about C<NaN>.

=item C<isspace>

This function has been removed as of Perl v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:space:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isupper>

This function has been removed as of Perl v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:upper:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isxdigit>

This function has been removed as of Perl v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:xdigit:]]+ $ /x>>, which you should
convert to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<j0>

=item C<j1>

=item C<jn>

=item C<y0>

=item C<y1>

=item C<yn>

The Bessel function of the first kind of the order zero.

=item C<kill>

This is identical to Perl's builtin C<kill()> function for sending
signals to processes (often to terminate them), see L<perlfunc/kill>.

=item C<labs>

Not implemented.  (For returning absolute values of long integers.)
C<labs()> is C-specific, see L<perlfunc/abs> instead.

=item C<lchown>

This is identical to the C function, except the order of arguments is
consistent with Perl's builtin C<chown()> with the added restriction
of only one path, not a list of paths.  Does the same thing as the
C<chown()> function but changes the owner of a symbolic link instead
of the file the symbolic link points to.

 POSIX::lchown($uid, $gid, $file_path);

=item C<ldexp>

This is identical to the C function C<ldexp()>
for multiplying floating point numbers with powers of two.

	$x_quadrupled = POSIX::ldexp($x, 2);

=item C<ldiv>

Not implemented.  (For computing dividends of long integers.)
C<ldiv()> is C-specific, use C</> and C<int()> instead.

=item C<lgamma>

The logarithm of the Gamma function [C99].  Added in Perl v5.22.

See also L</tgamma>.

=item C<log1p>

Equivalent to S<C<log(1 + x)>>, but more stable results for small argument
values [C99].  Added in Perl v5.22.

=item C<log2>

Logarithm base two [C99].  Added in Perl v5.22.

See also L</expm1>.

=item C<logb>

Integer binary logarithm [C99].  Added in Perl v5.22.

For example C<logb(20)> is 4, as a floating point number.

See also L</ilogb>.

=item C<link>

This is identical to Perl's builtin C<link()> function
for creating hard links into files, see L<perlfunc/link>.

=item C<localeconv>

Get numeric formatting information.  Returns a reference to a hash
containing the formatting values of the locale that currently underlies
the program, regardless of whether or not it is called from within the
scope of a S<C<use locale>>.  Users of this function should also read
L<perllocale>, which provides a comprehensive discussion of Perl locale
handling, including
L<a section devoted to this function|perllocale/The localeconv function>.
Prior to Perl 5.28, or when operating in a non thread-safe environment,
it should not be used in a threaded application unless it's certain that
the underlying locale is C or POSIX.  This is because it otherwise
changes the locale, which globally affects all threads simultaneously.
Windows platforms starting with Visual Studio 2005 are mostly
thread-safe, but use of this function in those prior to Visual Studio
2015 can have a race with a thread that has called
L<perlapi/switch_to_global_locale>.

Here is how to query the database for the B<de> (Deutsch or German) locale.

	my $loc = POSIX::setlocale( &POSIX::LC_ALL, "de" );
	print "Locale: \"$loc\"\n";
	my $lconv = POSIX::localeconv();
	foreach my $property (qw(
		decimal_point
		thousands_sep
		grouping
		int_curr_symbol
		currency_symbol
		mon_decimal_point
		mon_thousands_sep
		mon_grouping
		positive_sign
		negative_sign
		int_frac_digits
		frac_digits
		p_cs_precedes
		p_sep_by_space
		n_cs_precedes
		n_sep_by_space
		p_sign_posn
		n_sign_posn
		int_p_cs_precedes
		int_p_sep_by_space
		int_n_cs_precedes
		int_n_sep_by_space
		int_p_sign_posn
		int_n_sign_posn
	))
	{
		printf qq(%s: "%s",\n),
			$property, $lconv->{$property};
	}

The members whose names begin with C<int_p_> and C<int_n_> were added by
POSIX.1-2008 and are only available on systems that support them.

=item C<localtime>

This is identical to Perl's builtin C<localtime()> function for
converting seconds since the epoch to a date see L<perlfunc/localtime> except
that C<POSIX::localtime()> must be provided an explicit value (rather than
relying on an implicit C<$_>):

    @localtime = POSIX::localtime(time);    # good

    @localtime = localtime();               # good

    @localtime = POSIX::localtime();        # throws exception

=item C<log>

This is identical to Perl's builtin C<log()> function,
returning the natural (I<e>-based) logarithm of the numerical argument,
see L<perlfunc/log>.

=item C<log10>

This is identical to the C function C<log10()>,
returning the 10-base logarithm of the numerical argument.
You can also use

    sub log10 { log($_[0]) / log(10) }

or

    sub log10 { log($_[0]) / 2.30258509299405 }

or

    sub log10 { log($_[0]) * 0.434294481903252 }

=item C<longjmp>

Not implemented.  C<longjmp()> is C-specific: use L<perlfunc/die> instead.

=item C<lseek>

Move the file's read/write position.  This uses file descriptors such as
those obtained by calling C<POSIX::open>.

	$fd = POSIX::open( "foo", &POSIX::O_RDONLY );
	$off_t = POSIX::lseek( $fd, 0, &POSIX::SEEK_SET );

Returns C<undef> on failure.

=item C<lrint>

Depending on the current floating point rounding mode, rounds the
argument either toward nearest (like L</round>), toward zero (like
L</trunc>), downward (toward negative infinity), or upward (toward
positive infinity) [C99].  Added in Perl v5.22.

For the rounding mode, see L</fegetround>.

=item C<lround>

Like L</round>, but as integer, as opposed to floating point [C99].  Added
in Perl v5.22.

See also L</ceil>, L</floor>, L</trunc>.

Owing to an oversight, this is not currently exported by default, or as part of
the C<:math_h_c99> export tag; importing it must therefore be done by explicit
name.

=item C<malloc>

Not implemented.  C<malloc()> is C-specific.  Perl does memory management transparently.

=item C<mblen>

This is the same as the C function C<mblen()> on unthreaded perls.  On
threaded perls, it transparently (almost) substitutes the more
thread-safe L<C<mbrlen>(3)>, if available, instead of C<mblen>.

Core Perl does not have any support for wide and multibyte locales,
except Unicode UTF-8 locales.  This function, in conjunction with
L</mbtowc> and L</wctomb> may be used to roll your own decoding/encoding
of other types of multi-byte locales.

Use C<undef> as the first parameter to this function to get the effect
of passing NULL as the first parameter to C<mblen>.  This resets any
shift state to its initial value.  The return value is undefined if
C<mbrlen> was substituted, so you should never rely on it.

When the first parameter is a scalar containing a value that either is a
PV string or can be forced into one, the return value is the number of
bytes occupied by the first character of that string; or 0 if that first
character is the wide NUL character; or negative if there is an error.
This is based on the locale that currently underlies the program,
regardless of whether or not the function is called from Perl code that
is within the scope of S<C<use locale>>.  Perl makes no attempt at
hiding from your code any differences in the C<errno> setting between
C<mblen> and C<mbrlen>.  It does set C<errno> to 0 before calling them.

The optional second parameter is ignored if it is larger than the
actual length of the first parameter string.

=item C<mbtowc>

This is the same as the C function C<mbtowc()> on unthreaded perls.  On
threaded perls, it transparently (almost) substitutes the more
thread-safe L<C<mbrtowc>(3)>, if available, instead of C<mbtowc>.

Core Perl does not have any support for wide and multibyte locales,
except Unicode UTF-8 locales.  This function, in conjunction with
L</mblen> and L</wctomb> may be used to roll your own decoding/encoding
of other types of multi-byte locales.

The first parameter is a scalar into which, upon success, the wide
character represented by the multi-byte string contained in the second
parameter is stored.  The optional third parameter is ignored if it is
larger than the actual length of the second parameter string.

Use C<undef> as the second parameter to this function to get the effect
of passing NULL as the second parameter to C<mbtowc>.  This resets any
shift state to its initial value.  The return value is undefined if
C<mbrtowc> was substituted, so you should never rely on it.

When the second parameter is a scalar containing a value that either is
a PV string or can be forced into one, the return value is the number of
bytes occupied by the first character of that string; or 0 if that first
character is the wide NUL character; or negative if there is an error.
This is based on the locale that currently underlies the program,
regardless of whether or not the function is called from Perl code that
is within the scope of S<C<use locale>>.  Perl makes no attempt at
hiding from your code any differences in the C<errno> setting between
C<mbtowc> and C<mbrtowc>.  It does set C<errno> to 0 before calling
them.

=item C<memchr>

Not implemented.  C<memchr()> is C-specific, see L<perlfunc/index> instead.

=item C<memcmp>

Not implemented.  C<memcmp()> is C-specific, use C<eq> instead, see L<perlop>.

=item C<memcpy>

Not implemented.  C<memcpy()> is C-specific, use C<=>, see L<perlop>, or see L<perlfunc/substr>.

=item C<memmove>

Not implemented.  C<memmove()> is C-specific, use C<=>, see L<perlop>, or see L<perlfunc/substr>.

=item C<memset>

Not implemented.  C<memset()> is C-specific, use C<x> instead, see L<perlop>.

=item C<mkdir>

This is identical to Perl's builtin C<mkdir()> function
for creating directories, see L<perlfunc/mkdir>.

=item C<mkfifo>

This is similar to the C function C<mkfifo()> for creating
FIFO special files.

	if (mkfifo($path, $mode)) { ....

Returns C<undef> on failure.  The C<$mode> is similar to the
mode of C<mkdir()>, see L<perlfunc/mkdir>, though for C<mkfifo>
you B<must> specify the C<$mode>.

=item C<mktime>

Convert date/time info to a calendar time.

Synopsis:

	mktime(sec, min, hour, mday, mon, year, wday = 0,
	       yday = 0, isdst = -1)

The month (C<mon>), weekday (C<wday>), and yearday (C<yday>) begin at zero,
I<i.e.>, January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1.  The
year (C<year>) is given in years since 1900; I<i.e.>, the year 1995 is 95; the
year 2001 is 101.  Consult your system's C<mktime()> manpage for details
about these and the other arguments.

Calendar time for December 12, 1995, at 10:30 am.

	$time_t = POSIX::mktime( 0, 30, 10, 12, 11, 95 );
	print "Date = ", POSIX::ctime($time_t);

Returns C<undef> on failure.

=item C<modf>

Return the integral and fractional parts of a floating-point number.

	($fractional, $integral) = POSIX::modf( 3.14 );

See also L</round>.

=item C<NaN>

The not-a-number as a constant:

   use POSIX qw(NaN);
   my $nan = NaN;

See also L</nan>, C</isnan>, and L</fpclassify>.

=item C<nan>

   my $nan = nan();

Returns C<NaN>, not-a-number [C99].  Added in Perl v5.22.

The returned NaN is always a I<quiet> NaN, as opposed to I<signaling>.

With an argument, can be used to generate a NaN with I<payload>.
The argument is first interpreted as a floating point number,
but then any fractional parts are truncated (towards zero),
and the value is interpreted as an unsigned integer.
The bits of this integer are stored in the unused bits of the NaN.

The result has a dual nature: it is a NaN, but it also carries
the integer inside it.  The integer can be retrieved with L</getpayload>.
Note, though, that the payload is not propagated, not even on copies,
and definitely not in arithmetic operations.

How many bits fit in the NaN depends on what kind of floating points
are being used, but on the most common platforms (64-bit IEEE 754,
or the x86 80-bit long doubles) there are 51 and 61 bits available,
respectively.  (There would be 52 and 62, but the quiet/signaling
bit of NaNs takes away one.)  However, because of the floating-point-to-
integer-and-back conversions, please test carefully whether you get back
what you put in.  If your integers are only 32 bits wide, you probably
should not rely on more than 32 bits of payload.

Whether a "signaling" NaN is in any way different from a "quiet" NaN,
depends on the platform.  Also note that the payload of the default
NaN (no argument to nan()) is not necessarily zero, use C<setpayload>
to explicitly set the payload.  On some platforms like the 32-bit x86,
(unless using the 80-bit long doubles) the signaling bit is not supported
at all.

See also L</isnan>, L</NaN>, L</setpayload> and L</issignaling>.

=item C<nearbyint>

Returns the nearest integer to the argument, according to the current
rounding mode (see L</fegetround>) [C99].  Added in Perl v5.22.

=item C<nextafter>

Returns the next representable floating point number after C<x> in the
direction of C<y> [C99].  Added in Perl v5.22.

 my $nextafter = POSIX::nextafter($x, $y);

Like L</nexttoward>, but potentially less accurate.

=item C<nexttoward>

Returns the next representable floating point number after C<x> in the
direction of C<y> [C99].  Added in Perl v5.22.

 my $nexttoward = POSIX::nexttoward($x, $y);

Like L</nextafter>, but potentially more accurate.

=item C<nice>

This is similar to the C function C<nice()>, for changing
the scheduling preference of the current process.  Positive
arguments mean a more polite process, negative values a more
needy process.  Normal (non-root) user processes can only change towards
being more polite.

Returns C<undef> on failure.

=item C<offsetof>
