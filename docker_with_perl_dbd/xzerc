=item B<-n>, B<--no-scripts>

Do not modify F<postinst>/F<postrm>/F<prerm> scripts.

=item B<-o>, B<--only-scripts>

Only modify F<postinst>/F<postrm>/F<prerm> scripts, do not actually install
any init script, default files, upstart job or systemd service file. May be
useful if the file is shipped and/or installed by upstream in a way that
doesn't make it easy to let B<dh_installinit> find it.

B<Caveat>: This will bypass all the regular checks and
I<unconditionally> modify the scripts.  You will almost certainly want
to use this with B<-p> to limit, which packages are affected by the
call.  Example:

 override_dh_installinit:
	dh_installinit -pfoo --only-scripts
	dh_installinit --remaining

=item B<-R>, B<--restart-after-upgrade>

Do not stop the init script until after the package upgrade has been
completed.  This is the default behaviour in compat 10.

In early compat levels, the default was to stop the script in the
F<prerm>, and starts it again in the F<postinst>.

This can be useful for daemons that should not have a possibly long
downtime during upgrade. But you should make sure that the daemon will not
get confused by the package being upgraded while it's running before using
this option.

=item B<--no-restart-after-upgrade>

Undo a previous B<--restart-after-upgrade> (or the default of compat
10).  If no other options are given, this will cause the service to be
stopped in the F<prerm> script and started again in the F<postinst>
script.

=item B<-r>, B<--no-stop-on-upgrade>, B<--no-restart-on-upgrade>

Do not stop init script on upgrade.  This has the side-effect of not
restarting the service as a part of the upgrade.

If you want to restart the service with minimal downtime, please use
B<--restart-after-upgrade> (default in compat 10 or later).  If you want
the service to be restarted but be stopped during the upgrade, then please
use B<--no-restart-after-upgrade> (note the "after-upgrade").

Note that the B<--no-restart-on-upgrade> alias is deprecated and will
be removed in compat 12.  This is to avoid confusion with the
B<--no-restart-after-upgrade> option.  The B<--no-stop-on-upgrade>
variant was introduced in debhelper 10.2 (included in Debian stretch).

=item B<--no-start>

Do not start the init script on install or upgrade, or stop it on removal.
Only call B<update-rc.d>. Useful for rcS scripts.

=item B<--no-enable>

Disable the init script on purge, but do not enable them on install.
This implies a versioned dependency on B<< init-system-helpers (E<gt>=
1.51) >> as it is the first (functional) version that supports
B<< update-rc.d E<lt>scriptE<gt> defaults-disabled >>.

B<Note> that this option does not affect whether the services are
started.  Please remember to also use B<--no-start> if the service
should not be started.

Cannot be combined with B<-u>I<params>,
B<--update-rcd-params=>I<params>, or B<--> I<params>.

=item B<-d>, B<--remove-d>

Remove trailing B<d> from the name of the package, and use the result for the
filename the upstart job file is installed as in F<etc/init/> , and for the
filename the init script is installed as in etc/init.d and the default file
is installed as in F<etc/default/>. This may be useful for daemons with names
ending in B<d>. (Note: this takes precedence over the B<--init-script> parameter
described below.)

=item B<-u>I<params> B<--update-rcd-params=>I<params>

=item B<--> I<params>

Pass I<params> to L<update-rc.d(8)>. If not specified, B<defaults> (or
B<defaults-disabled> with B<--no-enable>) will be passed to
L<update-rc.d(8)>.

Cannot be combined with B<--no-enable>.

=item B<--name=>I<name>

Install the init script (and default file) as well as upstart job file
using the filename I<name> instead of the default filename, which is
the package name. When this parameter is used, B<dh_installinit> looks
for and installs files named F<debian/package.name.init>,
F<debian/package.name.default> and F<debian/package.name.upstart>
instead of the usual F<debian/package.init>, F<debian/package.default> and
F<debian/package.upstart>.

=item B<--init-script=>I<scriptname>

Use I<scriptname> as the filename the init script is installed as in
F<etc/init.d/> (and also use it as the filename for the defaults file, if it
is installed). If you use this parameter, B<dh_installinit> will look to see
if a file in the F<debian/> directory exists that looks like
F<package.scriptname> and if so will install it as the init script in
preference to the files it normally installs.

This parameter is deprecated, use the B<--name> parameter instead. This
parameter is incompatible with the use of upstart jobs.

=item B<--error-handler=>I<function>

Call the named shell I<function> if running the init script fails. The
function should be provided in the F<prerm> and F<postinst> scripts, before the
B<#DEBHELPER#> token.

=back

=head1 NOTES

Note that this command is not idempotent. L<dh_prep(1)> should be called
between invocations of this command. Otherwise, it may cause multiple
instances of the same text to be added to maintainer scripts.

=cut

$dh{RESTART_AFTER_UPGRADE} = '';
$dh{NO_START} = '';

init(options => {
	"r" => \$dh{R_FLAG},
	'no-stop-on-upgrade' => \$dh{R_FLAG},
	"no-restart-on-upgrade" => sub {
		$dh{R_FLAG} = 1;
		deprecated_functionality("--no-restart-on-upgrade has been renamed to --no-stop-on-upgrade",
								 12);
	},
	"no-start" => \$dh{NO_START},
	"R|restart-after-upgrade!" => \$dh{RESTART_AFTER_UPGRADE},
	"init-script=s" => \$dh{INIT_SCRIPT},
	"update-rcd-params=s", => \$dh{U_PARAMS},
	"remove-d" => \$dh{D_FLAG},
	"no-enable" => \$dh{NO_ENABLE},
});

if ($dh{RESTART_AFTER_UPGRADE} eq '') {
	$dh{RESTART_AFTER_UPGRADE} = 1 if not defined($dh{R_FLAG}) and $dh{NO_START} eq '';
}

# PROMISE: DH NOOP WITHOUT service tmpfile default upstart init init.d tmp(usr/lib/tmpfiles.d) tmp(etc/tmpfiles.d) cli-options(--init-script|-d|--remove-d|-o|--only-scripts)

my %snippet_options = ('snippet-order' => 'service');

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmp=tmpdir($package);

	# Figure out what filename to install it as.
	my $script;
	my $scriptsrc;
	my $jobfile=$package;
	if (defined $dh{NAME}) {
		$jobfile=$script=$scriptsrc=$dh{NAME};
	}
	elsif ($dh{D_FLAG}) {
		# -d on the command line sets D_FLAG. We will 
		# remove a trailing 'd' from the package name and 
		# use that as the name.
		$script=$package;
		if ($script=~m/(.*)d$/) {
			$jobfile=$script=$1;
		}
		else {
			warning("\"$package\" has no final d' in its name, but -d was specified.");
		}
		$scriptsrc=$script;
	}       
	elsif ($dh{INIT_SCRIPT}) {
		$script=$dh{INIT_SCRIPT};
		$scriptsrc=$script;
	}
	else {
		$script=$package;
		if (compat(9)) {
			$scriptsrc=$script;
		}
		else {
			$scriptsrc="init";
		}
	}       

	my $service='';
	$service=pkgfile($package,"service") if compat(10);
	if ($service ne '' && ! $dh{ONLYSCRIPTS}) {
		my $path="$tmp/lib/systemd/system";
		install_dir($path);
		install_file($service, "$path/$script.service");
	}

	my $tmpfile='';
	$tmpfile=pkgfile($package,"tmpfile") if compat(10);
	if ($tmpfile ne '' && ! $dh{ONLYSCRIPTS}) {
		my $path="$tmp/usr/lib/tmpfiles.d";
		install_dir($path);
		install_file($tmpfile, "$path/$script.conf");
	}

	my $job=pkgfile($package,"upstart");
	if ($job ne '' and not compat(11)) {
		isnative($package); # For the side-effect of setting $dh{VERSION}
		warning("Detected an upstart file; these are no longer supported by dh_installinit in compat 11");
		warning("Please ensure a proper removal by adding a \"rm_conffile\" line in debian/<pkg>.maintscript");
		warning("Example maintscript line:");
		warning("     rm_conffile /etc/init/${jobfile}.conf $dh{VERSION}");
		warning("(Note: the example is a best-effort guess and it is not always correct! Please verify before use)");
		warning("see \"man dh_installdeb\" for more information about the maintscript file");
		warning("");
		error("upstart jobs are no longer supported!  Please remove $job and check if you need to add a conffile removal");
	}
	if ($job ne '' && ! $dh{ONLYSCRIPTS}) {
		install_dir("$tmp/etc/init");
		install_file($job, "$tmp/etc/init/$jobfile.conf");
	}

	my $default=pkgfile($package,'default');
	if ($default ne '' && ! $dh{ONLYSCRIPTS}) {
		install_dir("$tmp/etc/default");
		install_file($default, "$tmp/etc/default/$script");
	}

	my $init=pkgfile($package,$scriptsrc) || pkgfile($package,"init") ||
		pkgfile($package,"init.d");

	if ($init ne '' && ! $dh{ONLYSCRIPTS}) {
		install_dir("$tmp/etc/init.d");
		install_prog($init,"$tmp/etc/init.d/$script");
	}

	if ($dh{INIT_SCRIPT} && $job ne '' && $init ne '') {
		error("Can't use --init-script with an upstart job");
	}

	if (compat(10) && !$dh{NOSCRIPTS}) {
		# Include postinst-init-tmpfiles if the package ships any files
		# in /usr/lib/tmpfiles.d or /etc/tmpfiles.d
		my @tmpfiles;
		find({
			wanted => sub {
				my $name = $File::Find::name;
				return unless -f $name;
				$name =~ s/^\Q$tmp\E//g;
				if ($name =~ m,^/usr/lib/tmpfiles\.d/, ||
					$name =~ m,^/etc/tmpfiles\.d/,) {
					push(@tmpfiles, basename($name));
				}
			},
			no_chdir => 1,
		}, $tmp);
		if (@tmpfiles > 0) {
			# Not migrated to hashref based autoscripts.  This will
			# happen as people migrate to dh_installsystemd.
			autoscript($package,"postinst", "postinst-init-tmpfiles",
				"s,#TMPFILES#," . join(" ", sort @tmpfiles).",g");
		}
	}

	if ($service ne '' || $job ne '' || $init ne '' || $dh{ONLYSCRIPTS}) {
		# This is set by the -u "foo" command line switch, it's
		# the parameters to pass to update-rc.d. If not set,
		# we have to say "defaults".
		my $params = 'defaults';
		my $update_rcd_params = compat(11) ? '' : '--skip-systemd-native ';
		if ($dh{NO_ENABLE}) {
			$params = 'defaults-disabled';
			addsubstvar($package, "misc:Depends", "init-system-helpers (>= 1.51)");
		}

		if (defined($dh{U_PARAMS}) and @{$dh{U_PARAMS}}) {
			error("--no-enable and -- params/-u/--update-rcd-params/ are mutually exclusive") if $dh{NO_ENABLE};
			$params=join(' ',@{$dh{U_PARAMS}});
		}	
		
		if (! $dh{NOSCRIPTS}) {
			my $replace = {
				'SCRIPT' => $script,
				'INITPARMS' => $params,
				'ERROR_HANDLER' => $dh{ERROR_HANDLER},
				'INVOKE_RCD_PARAMS' => $update_rcd_params,
			};
			autoscript($package, 'preinst', 'preinst-init-chmod', $replace, \%snippet_options);

			if (! $dh{NO_START}) {
				if ($dh{RESTART_AFTER_UPGRADE}) {
					# update-rc.d, and restart (or
					# start if new install) script
					autoscript($package, 'postinst', 'postinst-init-restart', $replace, \%snippet_options);
				}
				else {
					# update-rc.d, and start script
					autoscript($package, 'postinst', 'postinst-init', $replace, \%snippet_options);
				}

				autoscript($package, 'preinst', 'preinst-init-stop', $replace, \%snippet_options)
					unless ($dh{R_FLAG} || $dh{RESTART_AFTER_UPGRADE});

				# stops script only on remove
				autoscript($package, 'prerm', 'prerm-init-norestart', $replace, \%snippet_options);

				# The --skip-systemd-native option requires
				# init-system-helpers (>= 1.54) and since we need it
				# from prerm we need init-system-helpers to have been
				# unpacked before the package is being unpacked.
				addsubstvar($package, 'misc:Pre-Depends', 'init-system-helpers (>= 1.54~)')
					if $update_rcd_params !~ m/^\s*$/;
			}
			else {
				# just update-rc.d
				autoscript($package,"postinst", "postinst-init-nostart", $replace, \%snippet_options);
			}

			# removes rc.d links
			autoscript($package,"postrm","postrm-init",
				{ 'SCRIPT' => $script, 'ERROR_HANDLER' => $dh{ERROR_HANDLER} },
				\%snippet_options);
		}
	}
}

=head1 SEE ALSO

L<debhelper(7)>, L<dh_installsystemd(1)>

This program is a part of debhelper.

=head1 AUTHORS

Joey Hess <joeyh@debian.org>

Steve Langasek <steve.langasek@canonical.com>

Michael Stapelberg <stapelberg@debian.org>

=cut
                                           usr/bin/dh_installinitramfs                                                                         0000755 0000000 0000000 00000005003 14354570042 014613  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl

=head1 NAME

dh_installinitramfs - install initramfs hooks and setup maintscripts

=cut

use strict;
use warnings;
use Debian::Debhelper::Dh_Lib;

our $VERSION = DH_BUILTIN_VERSION;

=head1 SYNOPSIS

B<dh_installinitramfs> [S<B<debhelper options>>] [B<-n>]

=head1 DESCRIPTION

B<dh_installinitramfs> is a debhelper program that is responsible for
installing Debian package provided initramfs hooks.

If B<dh_installinitramfs> installs or detects one or more initramfs
hooks in the package, then it also automatically generates the noawait
trigger B<update-initframfs> command needed to interface with the
Debian initramfs system.  This trigger is inserted into the
packaging by L<dh_installdeb(1)>.

=head1 FILES

=over 4

=item debian/I<package>.initramfs-hook

Assumed to be an initramfs hook that will be installed into F<<
usr/share/initramfs-tools/hooks/I<package> >> in the package build
directory. See B<HOOK SCRIPTS> in L<initramfs-tools(8)> for more
information about initramfs hooks.

=back

=head1 OPTIONS

=over 4

=item B<-n>, B<--no-scripts>

Do not add the B<update-initramfs> trigger even if it seems like the package
might need it.  The option is called B<--no-scripts> for historical
reasons as B<dh_installinitramfs> would previously generate maintainer
scripts that called B<update-initramfs -u>.

Use this option, if you need to interface with the B<update-initramfs>
system that is not satisfied by the noawait trigger (e.g. because you need
the extra guarantees and head-aches of a await trigger).

=back

=head1 NOTES

Note that this command is not idempotent. L<dh_prep(1)> should be called
between invocations of this command. Otherwise, it may cause multiple
instances of the same text to be added to triggers file.

=cut

init();

# PROMISE: DH NOOP WITHOUT initramfs-hook tmp(usr/share/initramfs-tools/hooks) cli-options()

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmp = tmpdir($package);
	my $hook_script = pkgfile($package, 'initramfs-hook');
	my $has_hooks;
	my $hook_dir = "${tmp}/usr/share/initramfs-tools/hooks";

	if ($hook_script ne '') {
		install_dir($hook_dir);
		install_prog($hook_script, "${hook_dir}/${package}");
		$has_hooks = 1;
	} elsif (-d $hook_dir and not is_empty_dir($hook_dir)) {
		$has_hooks = 1;
	}

	if ($has_hooks && ! $dh{NOSCRIPTS}) {
		autotrigger($package, 'activate-noawait', 'update-initramfs');
	}
}

=head1 SEE ALSO

L<debhelper(7)>
L<update-initramfs(8)>
L<initramfs-tools(8)>

This program is a part of debhelper.

=head1 AUTHOR

Niels Thykier <niels@thykier.net>

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             usr/bin/dh_installlogcheck                                                                          0000755 0000000 0000000 00000003676 14354570042 014414  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl

=head1 NAME

dh_installlogcheck - install logcheck rulefiles into etc/logcheck/

=cut

use strict;
use warnings;
use Debian::Debhelper::Dh_Lib;

our $VERSION = DH_BUILTIN_VERSION;

=head1 SYNOPSIS

B<dh_installlogcheck> [S<I<debhelper options>>]

=head1 DESCRIPTION

B<dh_installlogcheck> is a debhelper program that is responsible for
installing logcheck rule files.

=head1 FILES

=over 4

=item debian/I<package>.logcheck.cracking

=item debian/I<package>.logcheck.violations

=item debian/I<package>.logcheck.violations.ignore

=item debian/I<package>.logcheck.ignore.workstation

=item debian/I<package>.logcheck.ignore.server

=item debian/I<package>.logcheck.ignore.paranoid

Each of these files, if present, are installed into corresponding
subdirectories of F<etc/logcheck/> in package build directories.

=back

=head1 OPTIONS

=over 4

=item B<--name=>I<name>

Look for files named F<debian/package.name.logcheck.*> and install
them into the corresponding subdirectories of F<etc/logcheck/>, but
use the specified name instead of that of the package.

=back

=cut

init();

# PROMISE: DH NOOP WITHOUT logcheck.cracking logcheck.violations logcheck.violations.ignore logcheck.ignore.workstation logcheck.ignore.server logcheck.ignore.paranoid cli-options()

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmp=tmpdir($package);

	foreach my $type (qw{ignore.d.workstation ignore.d.server
	                     ignore.d.paranoid cracking.d
                             violations.d violations.ignore.d}) {
		my $typenod=$type;
		$typenod=~s/\.d//;
		my $logcheck=pkgfile($package,"logcheck.$typenod");
		if ($logcheck) {
			my $packagenodot=pkgfilename($package); # run-parts..
			$packagenodot=~s/\./_/g;
			install_dir("$tmp/etc/logcheck/$type");
			install_file($logcheck, "$tmp/etc/logcheck/$type/$packagenodot");
		}
	}
}

=head1 SEE ALSO

L<debhelper(7)>

This program is a part of debhelper.
    
=head1 AUTHOR

Jon Middleton <jjm@debian.org>

=cut
                                                                  usr/bin/dh_installlogrotate                                                                         0000755 0000000 0000000 00000002215 14354570042 014621  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl

=head1 NAME

dh_installlogrotate - install logrotate config files

=cut

use strict;
use warnings;
use Debian::Debhelper::Dh_Lib;

our $VERSION = DH_BUILTIN_VERSION;

=head1 SYNOPSIS

B<dh_installlogrotate> [S<I<debhelper options>>] [B<--name=>I<name>]

=head1 DESCRIPTION

B<dh_installlogrotate> is a debhelper program that is responsible for installing
logrotate config files into F<etc/logrotate.d> in package build directories.
Files named F<debian/package.logrotate> are installed.

=head1 OPTIONS

=over 4

=item B<--name=>I<name>

Look for files named F<debian/package.name.logrotate> and install them as
F<etc/logrotate.d/name>, instead of using the usual files and installing them
as the package name.

=back

=cut

init();

# PROMISE: DH NOOP WITHOUT logrotate cli-options()

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmp=tmpdir($package);
	my $file=pkgfile($package,"logrotate");

	if ($file) {
		install_dir("$tmp/etc/logrotate.d");
		install_file($file,"$tmp/etc/logrotate.d/".pkgfilename($package));
	}
}

=head1 SEE ALSO

L<debhelper(7)>

This program is a part of debhelper.

=head1 AUTHOR

Joey Hess <joeyh@debian.org>

=cut
                                                                                                                                                                                                                                                                                                                                                                                   usr/bin/dh_installman                                                                               0000755 0000000 0000000 00000032576 14354570042 013411  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl

=head1 NAME

dh_installman - install man pages into package build directories

=cut

use strict;
use warnings;
use File::Find;
use Debian::Debhelper::Dh_Lib;

our $VERSION = DH_BUILTIN_VERSION;

=head1 SYNOPSIS

B<dh_installman> [S<I<debhelper options>>] [S<I<manpage> ...>]

=head1 DESCRIPTION

B<dh_installman> is a debhelper program that handles installing man
pages into the correct locations in package build directories.

In compat 10 and earlier, this program was primarily for when
upstream's build system does not properly install them as a part of
its install step (or it does not have an install step).  In compat 11
and later, it also supports the default searchdir plus --sourcedir
like dh_install(1) and has the advantage that it respects the nodoc
build profile (unlike dh_install(1)).

Even if you prefer to use L<dh_install(1)> for installing the manpages,
B<dh_installman> can still be useful for converting the manpage encoding
to UTF-8 and for converting F<.so> links (as described below).  However,
that part happens automatically without any explicit configuration.


You tell B<dh_installman> what man pages go in your packages, and it figures out
where to install them based on the section field in their B<.TH> or
B<.Dt> line. If you have a properly formatted B<.TH> or B<.Dt> line,
your man page will be installed into the right directory, with the
right name (this includes proper handling of pages with a subsection,
like B<3perl>, which are placed in F<man3>, and given an extension of
F<.3perl>). If your B<.TH> or B<.Dt> line is incorrect or missing, the
program may guess wrong based on the file extension.

It also supports translated man pages, by looking for extensions
like F<.ll.8> and F<.ll_LL.8>, or by use of the B<--language> switch.

If B<dh_installman> seems to install a man page into the wrong section or with
the wrong extension, this is because the man page has the wrong section
listed in its B<.TH> or B<.Dt> line. Edit the man page and correct the
section, and B<dh_installman> will follow suit. See L<man(7)> for details
about the B<.TH> section, and L<mdoc(7)> for the B<.Dt> section. If
B<dh_installman> seems to install a man page into a directory
like F</usr/share/man/pl/man1/>, that is because your program has a
name like F<foo.pl>, and B<dh_installman> assumes that means it is translated
into Polish. Use B<--language=C> to avoid this.

After the man page installation step, B<dh_installman> will check to see if
any of the man pages in the temporary directories of any of the packages it
is acting on contain F<.so> links. If so, it changes them to symlinks.

Also, B<dh_installman> will use man to guess the character encoding of each
manual page and convert it to UTF-8. If the guesswork fails for some
reason, you can override it using an encoding declaration. See
L<manconv(1)> for details.

From debhelper compatibility level 11 on, B<dh_install> will fall back to
looking in F<debian/tmp> for files, if it does not find them in the current
directory (or wherever you've told it to look using B<--sourcedir>).

=head1 FILES

=over 4

=item debian/I<package>.manpages

Lists man pages to be installed.

Supports substitution variables in compat 13 and later as
documented in L<debhelper(7)>.

=back

=head1 OPTIONS

=over 4

=item B<-A>, B<--all>

Install all files specified by command line parameters in ALL packages
acted on.

=item B<--language=>I<ll>

Use this to specify that the man pages being acted on are written in the
specified language.

=item B<--sourcedir=>I<dir>

Look in the specified directory for files to be installed.  This option
requires compat 11 or later (it is silently ignored in compat 10 or earlier).

Note that this is not the same as the B<--sourcedirectory> option used
by the B<dh_auto_>I<*> commands. You rarely need to use this option, since
B<dh_installman> automatically looks for files in F<debian/tmp> in debhelper
compatibility level 11 and above.

=item I<manpage> ...

Install these man pages into the first package acted on. (Or in all
packages if B<-A> is specified).

=back

=head1 EXAMPLES

An example F<debian/manpages> file could look like this:

  doc/man/foo.1
  # Translations
  doc/man/foo.da.1
  doc/man/foo.de.1
  doc/man/foo.fr.1
  # NB: The following line is considered a polish translation
  # of "foo.1" (and not a manpage written in perl called "foo.pl")
  doc/man/foo.pl.1
  # ...

=head1 NOTES

An older version of this program, L<dh_installmanpages(1)>, is still used
by some packages, and so is still included in debhelper.
It is, however, deprecated, due to its counterintuitive and inconsistent
interface. Use this program instead.

=cut

init(options => {
	"language=s" => \$dh{LANGUAGE},
	"sourcedir=s" => \$dh{SOURCEDIR},
});


# PROMISE: DH NOOP WITHOUT pkgfile-logged(manpages) tmp(usr/share/man) cli-options()

my (@sofiles, @sodests);
my @all_packages = getpackages();

my $default_error_handler = compat(10) ? \&glob_expand_error_handler_reject_nomagic_warn_discard : \&glob_expand_error_handler_reject;
my $nodocs = is_build_profile_active('nodoc') || get_buildoption('nodoc') ? 1 : 0;
# We cannot assume documentation is built under nodoc, but if it is we must flag it as handled
# or dh_missing might make noise.
$default_error_handler = \&glob_expand_error_handler_silently_ignore if $nodocs;

on_items_in_parallel(\@all_packages, sub {

	foreach my $package (@_) {
		next if is_udeb($package);

		my $tmp = tmpdir($package);
		my $file = pkgfile($package, "manpages");
		my @manpages;
		my @search_dirs = ('.');
		my $skip_install = process_pkg($package) ? 0 : 1;
		my $error_handler = $skip_install ? \&glob_expand_error_handler_silently_ignore : $default_error_handler;
		@search_dirs = ($dh{SOURCEDIR} // '.', default_sourcedir($package)) if not compat(10);

		@manpages = filearray($file, \@search_dirs, $error_handler) if $file;

		if (($package eq $dh{FIRSTPACKAGE} || $dh{PARAMS_ALL}) && @ARGV) {
			push @manpages, @ARGV;
		}

		log_installed_files($package, @manpages);

		next if $skip_install or $nodocs;

		foreach my $page (@manpages) {
			my $basename = basename($page);

			# Support compressed pages.
			my $gz = '';
			if ($basename =~ m/(.*)(\.gz)/) {
				$basename = $1;
				$gz = $2;
			}

			my ($fd, $section);
			# See if there is a .TH or .Dt entry in the man page. If so,
			# we'll pull the section field from that.
			if ($gz) {
				$fd = open_gz($page) or error("open $page failed: $!");
			}
			else {
				open($fd, '<', $page) or error("open $page failed: $!");
			}
			while (<$fd>) {
				if (/^\.TH\s+\S+\s+"?(\d+[^"\s]*)"?/ ||
					/^\.Dt\s+\S+\s+(\d+[^\s]*)/) {
					$section = $1;
					if ($section =~ m/^\d+[.]\d+/) {
						warning("Ignoring section defined in TH/Dt for ${page} as it looks like a version number: ${section}");
						$section = undef;
					}
					last;
				}
			}
			close($fd);
			# Failing that, we can try to get it from the filename.
			if (!$section) {
				($section) = $basename =~ m/\.([1-9]\w*)$/;
			}

			# Now get the numeric component of the section.
			my ($realsection) = $section =~ m/^(\d+)/ if defined $section;
			if (!$realsection or ($realsection < 0 or $realsection > 9)) {
				warning("Section for ${page} is computed as \"${section}\", which is not a valid section")
					if defined($section);
				error("Could not determine section for $page");
			}

			# Get the man page's name -- everything up to the last dot.
			my ($instname) = $basename =~ m/^(.*)\./;

			my $destdir = "$tmp/usr/share/man/man$realsection/";
			my $langcode;
			if (!defined $dh{LANGUAGE} || !exists $dh{LANGUAGE}) {
				if (not compat(10) and $page =~ m{/man/(?:([a-z][a-z](?:_[A-Z][A-Z])?)(?:\.[^/]+)?)?/man[1-9]/}) {
					# If it looks like it was installed in a proper man dir, assume the language
					# from that is correct.
					$langcode = $1;
				} else {
					# Translated man pages are typically specified by adding the
					# language code to the filename, so detect that and
					# redirect to appropriate directory, stripping the code.
					($langcode) = $basename =~ m/\.([a-z][a-z](?:_[A-Z][A-Z])?)\.(?:[1-9]|man)/;
					# Avoid false positives such as /usr/share/man/man8/libnss_myhostname.so.2.8
					if (defined $langcode && $langcode eq 'so' && $basename =~ /^lib.*\.so(\.[0-9]+)*$/) {
						$langcode = '';
					}
				}
			} elsif ($dh{LANGUAGE} ne 'C') {
				$langcode = $dh{LANGUAGE};
			}

			if (defined $langcode && $langcode ne '') {
				# Strip the language code from the instname.
				$instname =~ s/\.$langcode$//;
			}

			if (defined $langcode && $langcode ne '') {
				$destdir = "$tmp/usr/share/man/$langcode/man$realsection/";
			}
			$destdir =~ tr:/:/:s; # just for looks
			my $instpage = "$destdir$instname.$section";

			next if -l $instpage;

			install_dir($destdir);
			if ($gz) {
				doit({ stdout => $instpage }, 'zcat', $page);
			}
			else {
				install_file($page, $instpage);
			}
		}

		# Now the .so conversion.
		@sofiles = @sodests = ();
		foreach my $dir (qw{usr/share/man}) {
			if (-e "$tmp/$dir") {
				find(\&find_so_man, "$tmp/$dir");
			}
		}
		foreach my $sofile (@sofiles) {
			my $sodest = shift(@sodests);
			rm_files($sofile);
			make_symlink_raw_target($sodest, $sofile);
		}
	}

});

# Now utf-8 conversion.
my $has_man_recode = 0;
$has_man_recode = 1 if has_man_db_tool('man-recode');

if ($has_man_recode || has_man_db_tool('man')) {
	my (@manpages_to_reencode, @issues);
	for my $package (@{$dh{DOPACKAGES}}) {
		next if is_udeb($package);
		my $tmp = tmpdir($package);
		foreach my $dir (qw{usr/share/man}) {
			next unless -e "$tmp/$dir";
			my %seen;
			my $wanted = sub {
				my $path = $File::Find::name;
				return if -l $path || !-f _;
				if ($path =~ m/\.dh-new$/) {
					push(@issues, $path);
					return;
				}
				my $uncompressed_name = $path;
				$uncompressed_name =~ s/\.(?:gz|Z)$//;
				if (exists($seen{$uncompressed_name})) {
					my $msg = "Multiple definitions for manpage ${uncompressed_name} via different compressions.";
					my @values = sort ($path, $seen{$uncompressed_name});
					my $warn_msg = $msg . '  Picking ' . $values[0] . ' as the canonical definition.';
					my $error_msg = $msg . '  Please ensure there is at most one definition.';
					deprecated_functionality($warn_msg, 13, $error_msg);
					$path = $values[0];
					warn("Removing conflicting definition of ${uncompressed_name} (" . $values[1]
						. ') to ensure deterministic behaviour.');
					rm_files($values[1]);
				}
				$seen{$uncompressed_name} = $path;
			};
			find({
					no_chdir => 1,
					wanted => $wanted,
				}, "$tmp/$dir");
			push(@manpages_to_reencode, sort(values(%seen)));
		}

		if (@issues) {
			warning("Removing temporary manpages from another dh_installman instance");
			rm_files(@issues);
			warning("Possibly race-condition detected or left-overs from an interrupted dh_installman (e.g. with ^C)");
			error("Please ensure there are no parallel dh_installman's running (for this pkg) and then re-run dh_installman");
		}
	}
	if (@manpages_to_reencode) {
		on_items_in_parallel(\@manpages_to_reencode, \&reencode_manpages);
	}
} else {
	# Should only occur during debhelper building itself (to avoid a B-D on man-db).
	warning("man is not available.  Skipping re-encode of UTF-8 manpages")
}

# Check if a file is a .so man page, for use by File::Find.
sub find_so_man {
	# The -s test is because a .so file tends to be small. We don't want
	# to open every man page. 1024 is arbitrary.
	if (! -f $_ || -s _ > 1024 || -s _ == 0) {
		return;
	}

	# Test first line of file for the .so thing.
	my $fd;
	if (/\.gz$/) {
		$fd = open_gz($_) or error("open $_ failed: $!");
	}
	else {
		open($fd, '<', $_) || error("open $_ failed: $!");
	}
	my $l = <$fd>;
	close($fd);

	if (! defined $l) {
		error("failed to read $_");
	}

	if ($l=~m/\.so\s+(.*)\s*/) {
		my $solink=$1;
		# This test is here to prevent links like ... man8/../man8/foo.8
		if (basename($File::Find::dir) eq
		    dirname($solink)) {
			$solink=basename($solink);
		}
		# A so link with a path is relative to the base of the man
		# page hierarchy, but without a path, is relative to the
		# current section.
		elsif ($solink =~ m!/!) {
			$solink="../$solink";
		}

		if (-e $solink || -e "$solink.gz") {
			push @sofiles,"$File::Find::dir/$_";
			push @sodests,$solink;
		}
	}
}

sub has_man_db_tool {
	my ($tool) = @_;
	open(my $old_stderr, '>&', *STDERR) or error("dup(STDERR, tmp_fd): $!");
	# Ignore the error; it is intended as noise-reduction.  As long as we can restore
	# the stderr later, the log will just be slightly more noisy than planned.
	open(*STDERR, '>', '/dev/null') or warn("redirect stderr to /dev/null failed: $!");

	my $res = defined(`$tool --version`);
	open(*STDERR, '>&', $old_stderr) or error("dup(tmp_fd, STDERR): $!");
	close($old_stderr);
	return $res;
