        Group other
        port 80

=head2 mod_perl

    cd mod_perl-1.24_01/
    perl Makefile.PL \
        NO_HTTPD=1 \
        USE_APXS=1 \
        WITH_APXS=/opt/www/apache/bin/apxs \
        EVERYTHING=1
    make
    make install

=head2 htdig intranet search engine

    cd htdig-3.1.5/
    CC='cc' CPP='aCC' \
    ./configure \
        --prefix=/opt/www/htdig \
        --with-cgi-bin-dir=/opt/www/htdig/cgi-bin \
        --with-image-dir=/opt/www/htdig/images

=head1 CONTRIBUTORS

The following folks contributed to this document:

   Lincoln A. Baxter <lab@lincolnbaxter.com.Fix.This>
   H.Merijn Brand    <h.m.brand@xs4all.nl>
   Jay Strauss       <me@heyjay.com.Fix.This>
   Roger Foskett     <Roger.Foskett@icl.com.Fix.This>
   Weiguo Sun        <wesun@cisco.com.Fix.This>
   Tony Foiani       <anthony_foiani@non.hp.com.Fix.This>
   Hugh J. Hitchcock <hugh@hitchco.com.Fix.This>
   Heiko Herms  <Heiko.Herms.extern@HypoVereinsbank.de.Fix.This>
   Waldemar Zurowski <bilbek0@poczta.onet.pl.Fix.This>
   Michael Schuh     <Michael.Schuh@airborne.com.Fix.This>
   Gram M. Ludlow    <LUDLOW_GRAM_M@cat.com.Fix.This>

And probably others unknown to me.

=head1 AUTHOR

   Lincoln A. Baxter <lab@lincolnbaxter.com.Fix.This>
   H.Merijn Brand    <h.m.brand@xs4all.nl>

=head1 APPENDICES

=head2 Appendix A

(gcc build info from Waldemar Zurowski)

This is pretty much verbatim the build information I received from
Waldemar Zurowski on building Perl and DBD-Oracle using gcc on HP.  Note
that this build was on a PA-RISC1.1 machine.

=head3 Host

   HP-UX hostname B.11.11 U 9000/800 XXXXXXXXX unlimited-user license

=head3 Oracle

   Oracle 8.1.7

=head3 Parameters to build Perl

   ./Configure -des -Uinstallusrbinperl -Uusethreads -Uuseithreads
   -Duselargefiles -Dcc=gcc -Darchname=PA-RISC1.1 -Dprefix=/opt/perl-non-thread
   -Dlibs='-lcl -lpthread -L${ORACLE_HOME}/JRE/lib/PA_RISC/native_threads
   -ljava -lnsl -lnm -lndbm -ldld -lm -lc -lndir -lcrypt -lsec'

-L${ORACLE_HOME}/JRE/lib/PA_RISC/native_threads -ljava, was added
because DBD::Oracle wants to link with it (probably due to Oracle's own
build rules picked up by Makefile.PL)

Set environment variable LDOPTS to '+s' (see ld(1)). This holds extra
parameters to HP-UX's ld command, as I don't use GNU ld (does anybody?).
This allows you to build an executable, which when run would search for
dynamic linked libraries using SHLIB_PATH (for 32-bit executable) and
LD_LIBRARY_PATH (for 64-bit executable). Obviously LDOPTS is needed only
when building Perl _and_ DBI + DBD::Oracle.

Then, after building Perl + DBI + DBD::Oracle and moving it into
production environment it was enough to add to SHLIB_PATH
${ORACLE_HOME}/lib and ${ORACLE_HOME}/JRE/lib/PA_RISC/native_threads,
for example:

SHLIB_PATH=${ORACLE_HOME}/lib:${ORACLE_HOME}/JRE/lib/PA_RISC/native_threads:
$SHLIB_PATH

Please note output of ldd command:

   $ ldd -s ./perl
    [...]
     find library=/home/ora817/JRE/lib/PA_RISC/native_threads/libjava.sl;
   required by ./perl
       search path=/home/ora817/lib:/home/ora817/JRE/lib/PA_RISC/native_threads
   (SHLIB_PATH)
       trying path=/home/ora817/lib/libjava.sl
       trying path=/home/ora817/JRE/lib/PA_RISC/native_threads/libjava.sl
           /home/ora817/JRE/lib/PA_RISC/native_threads/libjava.sl =>
   /home/ora817/JRE/lib/PA_RISC/native_threads/libjava.sl
    [...]

All of this mess is necessary because of weakness of shl_load(3X),
explained in this document and in some discussion forums at HP.com
site. I have learned, that HP issued patch PHSS_24304 for HP-UX 11.11
and PHSS_24303 for HP-UX 11.00, which introduced variable LD_PRELOAD.
I haven't tried it yet, but it seems promising that it would allow you
to completely avoid building your own Perl binary, as it would be enough
to set LD_PRELOAD to libjava.sl (for example) and all
'Cannot load XXXlibrary' during building of DBD::Oracle should be gone.

The documentation says, that setting this variable should have the same
effect as linking binary with this library. Also please note, that this
variable is used only when binary is not setuid nor setgid binary (for
obvious security reasons).

It seems, that the best way to find out if you already have this patch
applied, is to check if 'man 5 dld.sl' says anything about LD_PRELOAD
environment variable.

Best regards,

Waldemar Zurowski

Authors Note:  Search for references to LD_PRELOAD else where in this
document.  Using LD_PRELOAD is probably a fragile solution at best.
Better to do what Waldemar actually did, which is to include libjava in
the extra link options.

=head2 Appendix B

(64 bit build with /usr/bin/cc -- bundled C compiler)

Gram M. Ludlow writes:

I recently had a problem with Oracle 9 64-bit on HPUX 11i. We have
another application that required SH_LIBRARY_PATH to point to the 64-bit
libraries, which "broke" the Oraperl module. So I did some research and
successfully recompiled and re-installed with the most recent versions of
everything (perl, DBI, DBD) that works with 64-bit shared libraries. This
is the error we were getting (basically)
"/usr/lib/dld.sl: Bad magic number for shared library:
/ora1/app/oracle/product/9.2.0.1.0/lib32"

Here is my step-by-step instructions, pretty much what you have but
streamlined for this particular case.

Required software:

   HPUX 11.11 (11i) PA-RISC
   perl 5.8.4 source
   DBI-1.42 source
   DBD-Oracle-1.16 source
   Oracle 9.2.0.1.0 installation

=over

=item Step 1: Compiling Perl

This compiles PERL using the default HPUX cc compiler. The important
things to note here are the configure parameters. the only non-default
option to take is to add "+z" to the additional cc flags step.

   gunzip perl-5.8.4.tar.gz
   tar -xf perl-5.8.4.tar
   cd perl-5.8.4
   ./Configure -Ubincompat5005 -Duselargefiles -A prepend:libswanted='cl pthread ' -Duse64bitall

Any additional cc flags?
Add +z to beginning of list, include all other options.

   make; make test

98% of tests should succeed. If less, something is wrong.

=item Step 2: DBI

   gunzip DBI-1.42.tar.gz
   tar -xvf DBI-1.42.tar
   cd DBI-1.42
   perl Makefile.PL
   make;make test
   make install

=item Step 3: Install DBD-Oracle

First, set the following environment variables specific you your Oracle
installation:

   export ORACLE_USERID=user/pass
   export ORACLE_HOME=/oracle/product/9.2.0.1.0
   export ORACLE_SID=orap1

Then unpack and build:

   gunzip DBD-Oracle-1.16.tar.gz
   tar -xvf DBD-Oracle-1.16.tar
   cd DBD-Oracle-1.16
   perl Makefile.PL -l
   make;make test
   make install

=back

Note from H.Merijn Brand: In more recent perl distributions using
HP C-ANSI-C should "just work" (TM), provided your C compiler can be
found and used, your database is up and running, and your environment
variables are set as noted. Example is for a 64bit build, as Oracle
ships Oracle 9 and up for HP-UX only in 64bit builds.

   gzip -d <perl-5.8.8.tgz | tar xf -
   cd perl-5.8.8
   sh ./Configure -Duse64bitall -A prepend:libswanted='cl pthread ' -des
   make
   make test_harness
   make install

   gzip -d <DBI-1.50.tgz | tar xf -
   perl Makefile.PL
   make
   make test
   make install

   gzip -d <DBD-Oracle-1.17.tgz | tar xf -
   perl Makefile.PL
   make
   make test
   make install

=head2 Appendix C

(Miscellaneous links which might be useful)

Michael Schuh writes:

It was a bit by trial and error and a bit more by following your
suggestions (and mapping them to gcc) that I got something that worked.

One of the most significant "mappings" was to take your suggestion under
"Configure" to add "+Z" to the ccflags variable and to change that to
"-fPIC" (which, I learned from the gcc man page, is different than
"-fpic", which is the counterpart for +z). -fPIC (+Z) allows I<big>
offsets in the Position Independent Code, where -fpic (+z) only allows
small offsets.

I suspect that your hint about adding -lcl and -lpthread were crucial,
but (after doing so) I never encountered any problems that were related
to them.

One thing that I did was create a shell script to set some variables,
as the initial environment for root on the target system didn't work
very well.  Here is that script, trimmed to remove a bunch of echo
statements, etc.:

   # -------------------------------------------------------------------
   # root.env - sets some environment variables the way I want them...
   #
   # Mike Schuh, June 2002, July 2002

   export CC=/usr/local/bin/gcc

   export INSTALL=./install-sh

   . appl_setup DDD

   export ORACLE_SID="SSS"
   export ORACLE_USERID="XXX/YYY"

   export PATH=/usr/local/bin:/usr/sbin:/usr/bin:/usr/ccs/bin:/opt/perl5/bin:/usr/c
   ontrib/bin:/opt/nettladm/bin:/opt/fc/bin:/opt/fcms/bin:/opt/pd/bin:/usr/bin/X11:
   /usr/contrib/bin/X11:/opt/hparray/bin:/opt/resmon/bin:/usr/sbin/diag/contrib:/op
   t/pred/bin:/opt/gnome/bin:/sbin

   # end of root.env

The appl_setup sets some Oracle variables (specific to our installation),
which I then override for the database that I am working on.  The script
(which I source) also uses some variables specific to other applications
(e.g., Tivoli), mostly to unclutter my debugging.  The INSTALL variable
is related to building libgdbm.

=head2 http://www.mail-archive.com/dbi-users@perl.org/msg18687.html

Garry Ferguson's notes on a successful build using perl 5.8.0, DBI-1.38
and DBD-Oracle-1.14 on HPUX 11.0 ( an L2000 machine ) with Oracle 9.0.1

=head2 http://www.sas.com/service/techsup/unotes/SN/001/001875.html

This is a note from the SAS support people documenting the
LhtStrInsert() and LhtStrCreate() undefined symbols errors, and how to
fix them in the Oracle makefiles.

=head1 Appendix D

(Why Dynamic Linking)

Some one posted to the DBI email list the following question:

   What are the advantages of building a dynamically linked version?
   Being able to use threads? Or something besides that?

The answer is there are too many to count, but here are several big ones:

=over

=item 1 Much smaller executables

Only the code referenced gets loaded... this
means faster execution times, and less machine resources (VM) used)

=item 2 Modular addition and updating of modules.

This is HUGE.  One does not relink B<EVERYTHING, EVERY time> one changes
or updates  a module.

=item 3 It eliminates Dynaloader warning (multiply defined).

This occurs with the static build when Perl is run with -w.  I fixed
this by removing -w from my #! lines, converting the pragam "use
warnings;". However, it was annoying, since all my scripts had -w in the
#! line.

=item 4 It's the default build

Since almost every OS now supports dynamic linking, I believe that static
linking is NOT getting the same level of vetting it maybe used to.
Dynamically linking is what you get by default, so its way better tested.

=item 5 It's required for Apache and mod_perl.

=back

=head1 Appendix E

(WebLogic Driver for Oracle with the Oracle8i Server Lob Bug)

Michael Fox reported a bug when you are using DBD-Oracle-1.18 or later and when using older Oracle versions.
The bug will result in an error report

   'Failed to load Oracle extension and/or shared libraries'.

This problem occurs if you use the WebLogic Driver for Oracle with the Oracle8i Server
- Enterprise Edition 8.1.7 and the corresponding Oracle Call Interface (OCI).
This problem occurs only in Oracle 8.1.7; it is fixed in Oracle 9i.

This link details the problem

=head1 http://e-docs.bea.com/platform/suppconfigs/configs70/hptru64unix51_alpha/70sp1.html#88784

The solution from this page is below;

To work around this problem, complete the following procedure:

=over

=item 1 Log in to your Oracle account:

   su - oracle

=item 2 In a text editor, open the following file:

   $ORACLE_HOME/rdbms/admin/shrept.lst

=item 3 Add the following line:

   rdbms:OCILobLocatorAssign

=item 4 (optional) Add the names of any other missing functions needed by applications, other than WebLogic Server 7.0, that you want to execute.
Note: The OCILobLocatorAssign function is not the only missing function that WebLogic Server 7.0 should be able to call, but it is the only missing function that WebLogic Server 7.0 requires. Other functions that WebLogic Server should be able to call, such as OCIEnvCreate and OCIerminate, are also missing. If these functions are required by other applications that you plan to run, you must add them to your environment by specifying them, too, in $ORACLE_HOME/rdbms/admin/shrept.lst.

=item 5 Rebuild the shared client library:

   $ cd $ORACLE_HOME/rdbms/lib
   $ make -f ins_rdbms.mk client_sharedlib

The make command updates the following files in /opt/oracle/product/8.1.7/lib:

   clntsh.map
   ldap.def libclntsh.so
   libclntsh.so.8.0 libclntst8.a
   network.def
   plsql.def
   precomp.def
   rdbms.def

Because OCILobLocatorAssign is now visible in libclntsh.so, WebLogic Server can call it.

=back

=head1 AUTHORS

=over 4

=item *

Tim Bunce <timb@cpan.org>

=item *

John Scoles <byterock@cpan.org>

=item *

Yanick Champoux <yanick@cpan.org>

=item *

Martin J. Evans <mjevans@cpan.org>

=back

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2024, 2023, 2022, 2021, 2019, 2014, 2013, 2012, 2011, 2010 by Tim Bunce.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
                                   root/.cpan/build/DBD-Oracle-1.90-2/lib/DBD/Oracle/Troubleshooting/Linux.pod                         0000644 0001750 0001750 00000012725 14616324562 024255  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #PODNAME: DBD::Oracle::Troubleshooting::Linux
#ABSTRACT: Tips and Hints to Troubleshoot DBD::Oracle on Linux

__END__

=pod

=encoding UTF-8

=head1 NAME

DBD::Oracle::Troubleshooting::Linux - Tips and Hints to Troubleshoot DBD::Oracle on Linux

=head1 VERSION

version 1.90

=head1 SELinux and httpd

If SELinux is running, it can prevents DBD::Oracle running in
an Apache process to load shared libraries it requires (libclntsh.so
or libnnz12.so). A typical symptom is a line like the following in
the Apache error logs:

    [Tue Apr 17 13:22:45 2012] [error] Can't load '.../DBD/Oracle/Oracle.so' for
    module DBD::Oracle: libnnz11.so: cannot enable executable stack as shared
    object requires: Permission denied at .../DynaLoader.pm line 190.\n at
    .../startup.pl line 17\nCompilation failed in require at ...

The fix:

    /usr/sbin/setsebool -P httpd_execmem

=head1 Installing with Instantclient .rpm files.

Nothing special with this you just have to set up you permissions as follows;

1) Have permission for RWE on '/usr/lib/oracle/10.2.0.3/client/' or the other directory where you RPMed to

2) Set export ORACLE_HOME=/usr/lib/oracle/10.2.0.3/client

3) Set export LD_LIBRARY_PATH=$ORACLE_HOME/lib

4) If you plan to use tnsnames to connect to remote servers and your tnsnames.ora file is not in $ORACLE_HOME/network/admin, you will need to Export TNS_ADMIN=dir to point DBD::Oracle to where your tnsnames.ora file is

=head1 undefined symbol: __cmpdi2 comes up when Oracle isn't properly linked to the libgcc.a library.

In version 8, this was corrected by changing the SYSLIBS entry in
$ORACLE_HOME/bin/genclntsh to include
"-L/usr/lib/gcc-lib/i386-redhat-linux/3.2 -lgcc".

I had tried this with no success as when this program was then run, the
error "unable to find libgcc" was generated.  Of course, this was the
library I was trying to describe!

It turns out that now it is necessary to edit the same file and append
"`gcc -print-libgcc-file-name`" (including the backquotes!).  If you do
this and then run "genclntsh", the libclntsh is properly generated and
the linkage with DBD::Oracle proceeds properly.

=head1 cc1: invalid option `tune=pentium4'" error

If you get the above it seems that either your Perl or OS where compiled with a different version of GCC or the GCC that is on your system is very old.

No real problem with the above however you will have to

1) run Perl Makefile.PL

2) edit the Makefile and remove the offending '-mtune=pentium4' text

3) save and exit

4) do the make install and it should work fine for you

=head1 Oracle 9i Lite

The advice is to use the regular Oracle9i not the lite version.

Another great source of help was: http://www.puschitz.com/InstallingOracle9i.html

just getting 9i and 9i lite installed.  I use fvwm2(nvidia X driver) as
a window manager which does not work with the 9i install program, works
fine with the default Gnomish(nv X driver), it could have been the X
driver too.

With Redhat9 it is REAL important to set LD_ASSUME_KERNEL to 2.4.1.

I didn't try this but it may be possible to install what is needed by
only downloading the first disk saving some 1.3GB of download fun.

I installed a custom install from the client group.  The packages I
installed are the Programmers section and sqlplus.  I noticed that the
Pro*C when on as a result of the checking the Programmers section I
assume.

Once Oracle was installed properly the DBD::Oracle install went as
smooth as just about every other CPAN module.

=head1 Oracle 10g Instantclient

The Makefile.PL will now work for  Oracle 10g Instantclient. To have both the Compile and
the test.pl to work you must first have the LD_LIBRARY_PATH correctly set to your
"instantclient" directory. (http://www.oracle.com/technology/tech/oci/instantclient/instantclient.html)

The present version of the make creates a link on your "instantclient" directory as follows
"ln -s libclntsh.so.10.1 libclntsh.so". It is needed for both the makefile creation and the compile
but is not need for the test.pl. It should be removed after the compile.

If the Makefile.PL or make fails try creating this link directly in your "instantclient" directory.

=head1 Oracle Database 10g Express Edition  10.2

To get 10Xe to compile correctly I had to add $ORACLE_HOME/lib to the LD_LIBRARY_PATH
as you would for an install against 10g Standard Edition, Standard Edition One, or
Enterprise Edition

=head1 UTF8 bug in Oracle  9.2.0.5.0 and 9.2.0.7.0

DBD::Oracle seems to hit some sort of bug with the above two versions of DB.
The bug seems to hit when you when the Oracle database charset: US7ASCII and the Oracle nchar charset: AL16UTF16 and it has also
been reported when the Oracle database charset: WE8ISO8850P1 Oracle nchar charset: AL32UTF16.

So far there is no patch for this but here are some workarounds

    use DBD::Oracle qw( SQLCS_IMPLICIT SQLCS_NCHAR );
    ...
    $sth->bind_param(1, $value, { ora_csform => SQLCS_NCHAR });

    or this way

    $dbh->{ora_ph_csform} = SQLCS_NCHAR; # default for all future placeholders

    or this way

    utf8::downgrade($parameter, 1);

=head1 AUTHORS

=over 4

=item *

Tim Bunce <timb@cpan.org>

=item *

John Scoles <byterock@cpan.org>

=item *

Yanick Champoux <yanick@cpan.org>

=item *

Martin J. Evans <mjevans@cpan.org>

=back

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2024, 2023, 2022, 2021, 2019, 2014, 2013, 2012, 2011, 2010 by Tim Bunce.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
                                           root/.cpan/build/DBD-Oracle-1.90-2/lib/DBD/Oracle/Troubleshooting/Macos.pod                         0000644 0001750 0001750 00000052703 14616324562 024220  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #PODNAME: DBD::Oracle::Troubleshooting::Macos
#ABSTRACT: Tips and Hints to Troubleshoot DBD::Oracle on MacOs

__END__

=pod

=encoding UTF-8

=head1 NAME

DBD::Oracle::Troubleshooting::Macos - Tips and Hints to Troubleshoot DBD::Oracle on MacOs

=head1 VERSION

version 1.90

=head1 General Info

These instructions allow for the compilation and successful testing of
DBD::Oracle on MacOS X 10.2.4 and higher, using Oracle 9iR2 DR
(Release 9.2.0.1.0) or the 10g Instant Client release (10.1.0.3 at the
time of writing).

MacOS X DBD::Oracle has been tested (and used) under Jaguar (10.2.x),
Panther (10.3.x), Snow Leopard (10.6.x), Lion (10.7.x). Jaguar comes
with a Perl version of 5.6.0., which I can report to work with
DBD::Oracle 1.14 and higher once you take certain steps (see below).
You may want to install a later perl, e.g., Perl 5.8.x. Please refer to:

    Installing Perl 5.8 on Jaguar
    http://developer.apple.com/internet/macosx/perl.html

for Perl 5.8.0 installation instructions.

DBD::Oracle is likely to not install out of the box on MacOS X
10.2. nor on 10.3. Manual but different changes will most likely be
required on both versions.

The key problem on 10.2. (Jaguar) is a symbol clash (caused by a
function poll() named identically) between the IO library in at least
Perl 5.6.0 (which is the version that comes with 10.2) and the Oracle
client library in 9iR2 developer's release for MacOS X. The symptom is
that your build appears to compile fine but then fails in the link
stage. If you are running a (possibly self-installed) version of Perl
other than 5.6.0, there's a chance that you are not affected by the
symbol clash. So, try to build first without any special measures, and
only resort to the instructions below if your build fails in the link
stage with a duplicate symbol error. Note: if it fails to even
compile, solve that problem first since it is not due to the symbol
clash.

The key problem on 10.3 (Panther) is that the default perl that comes
with the system is compiled with multi-threading turned on, which at
least with the 9iR2 developer's release exposes a memory leak. Your
DBD::Oracle build will compile, test, and install fine, but if you
execute the same prepared statement multiple times, the process will
quickly run up hundreds of megabytes of RAM, and depending on how much
memory you have it will die sooner or later.

Oracle recently released an "Instant Client" for MacOSX 10.3
(Panther), which as far as I can attest has none of the problems
above. Since it is also a very compact download (actually, a series of
downloads) I highly recommend you install and use the Instant Client
if you are on 10.3 (Panther) and you do not intend to run the Oracle
database server on your MacOSX box. See below (Instructions for
10.3.x) for details.

=head1 Instructions for 10.7.x (Lion)

Perl on Lion and later is built with 64-bit support, and therefore requires
the 64-bit Instant Client. As of this writing, only Instant Client 11.2
(64-bit) actually works. The 64-bit Instant Client 10.2 is L<incompatible with
Lion|http://only4left.jpiwowar.com/2011/08/instant-client-osx-lion-32-bit-only/>.
We therefore recommend the 11.2 client. If you must Instant Client 10.2, you
may need to recompile Perl with 32-bit support.

Either way, setup and configuration is the same:

=over

=item *

Download and install the basic, sqlplus, and sdk instantclient libraries and
install them in a central location, such as F</usr/oracle_instantclient>.
L<Downloads
here|http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html>

=item *

Create a symlink from F<libclntsh.dylib.10.1> to F<libclntsh.dylib>:

  cd /usr/oracle_instantclient/
  ln -s libclntsh.dylib.* libclntsh.dylib
  ln -s libocci.dylib.* libocci.dylib

=item *

Update your environment to point to the libraries:

  export ORACLE_HOME=/usr/oracle_instantclient
  export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/usr/oracle_instantclient

=item *

You should now be able to install DBD::Oracle from CPAN:

     cpan DBD::Oracle

=back

=head1 Instructions for 10.6.x (Snow Leopard)

These are taken from a stackoverflow answer by "nickisfat" who gave
his/her permission for its inclusion here. You can see the original
question and answers at http://stackoverflow.com/questions/5964999.

Getting a mac install of perl to play nicely with oracle is a bit of a
pain - once it's running it is fantastic, getting it running is a
little frustrating..

The below has worked for me on a few different intel macs, there could
well be superfluous steps in there and it is likely not going to be
the same for other platforms.

This will require use of shell, the root user and a bit of CPANing -
nothing too onerous

First off create a directory for the oracle pap - libraries, instant client etc

sudo mkdir /usr/oracle_instantClient64

Download and extract all 64 bit instant client packages from oracle to
the above directory

Create a symlink within that directory for one of the files in there

sudo cd /usr/oracle_instantClient64
sudo ln -s /usr/oracle_instantClient64/libclntsh.dylib.10.1 libclntsh.dylib

The following dir is hardcoded into the oracle instant client - god knows why - so need to create and symlink it

sudo mkdir -p /b/227/rdbms/
sudo cd /b/227/rdbms/
sudo ln -s /usr/oracle_instantClient64/ lib

Need to add a couple of environment variables, so edit /etc/profile
and add them so they exist for all users:

export ORACLE_HOME=/usr/oracle_instantClient64
export DYLD_LIBRARY_PATH=/usr/oracle_instantClient64

Now try and install DBD::Oracle through CPAN - this will fail, but it
means any dependencies will be downloaded and it retrieves the module
for us

sudo perl -MCPAN -e shell
install DBD::Oracle

When this fails exit CPAN and head to your .cpan/build dir - if you
used automatic config of CPAN it'll be

cd ~/.cpan/build

if you didn't auto configure you can find your build directory with
the following command in CPAN

o conf build_dir

Once in the build dir look for the DBD::Oracle dir which has just been
created (it'll be called something like DBD-Oracle-1.28-?) and cd into
it.

Now we need to switch to the root user. Root isn't enabled as default
in osx - for details on enabling see this post on the apple website

Once logged in as root we need to set the above environment variables for root:

export ORACLE_HOME=/usr/oracle_instantClient64
export DYLD_LIBRARY_PATH=/usr/oracle_instantClient64

Now while still logged in as root we need to run the makefile for the
module, then make, then install

perl Makefile.pl
make
install

Assuming that all worked without error log out of root: we're DBD'd
up! If this didn't work it's time to bust out google on whatever
errors you're seeing

Now just to install the DBI module

sudo perl -MCPAN -e shell
install DBI

Now you're all set - enjoy your perly oracley new life

=head1 Instructions for 10.2.x (Jaguar)

1) Install Oracle exactly per Oracle documentation. If you change
install locations, then you'll need to modify paths accordingly.

2) There are two ways to remedy the symbol clash. Either edit the
symbol table of the Oracle client library
$ORACLE_HOME/lib/libclntsh.dylib.9.0 such that the symbol _poll is no
longer exported. Alternatively, download, patch, and re-install the
perl IO modules. I could not successfully repeat the report for the
former, but I did succeed by doing the latter. Instructions for both
follow nonetheless.

  2a) SKIP IF YOU WANT TO OR HAVE SUCCESSFULLY TRIED 2b).  Make a
    backup copy of the $ORACLE_HOME/lib/libclntsh.dylib.9.0 file, or
    the file this name points to, since we're about to modify that
    library.  Note that the ".9.0" suffix of the file name is version
    dependent, and that you want to work with the file pointed to
    through one or a series of symbolic links rather than any of the
    symbolic links (e.g., one will be called libclntsh.dylib).

    As user 'oracle' execute the following command to fix namespace
    collisions in Oracle's dynamic libraries.

    nmedit -R ./hints/macos_lib.syms $ORACLE_HOME/lib/libclntsh.dylib.9.0

    *** Recall the above caveats regarding the file name.

    The problem with this is that the version of nm that comes with
    Jaguar doesn't support the -R flag. I'd be grateful to anyone who
    can suggest how to edit the symbol table of libraries on MacOS X.

  2b) SKIP IF YOU WANT TO OR HAVE SUCCESSFULLY TRIED 2a). In this
    variant, we will patch the Perl IO modules to change the name of
    the poll() function, as that is where it is defined. In this case,
    we do not need to do anything with the Oracle libraries. Follow
    these steps:

    - Download the module IO (IO.pm) from CPAN and unpack it. Check
      the documentation as to whether the version is compatible with
      your version of Perl; I used v1.20 with Perl 5.6.0 and had
      success.

    - The files IO.xs, poll.c, and poll.h need to be patched. Apply
      the following patches, e.g., by cutting and pasting the marked
      section into a file perlio.patch and using that file as input
      for patch:

      $ patch -p0 < perlio.patch

      The patch will basically rename the C implementation of poll()
      to io_poll(). The other patches were necessary to make v1.20
      compile with Perl 5.6.0; they may not be necessary with other
      versions of IO and Perl, respectively.

        +=+=+=+=+=+=+= Cut after this line
        diff -c ../IO-orig/IO-1.20/IO.xs ./IO.xs
        *** ../IO-orig/IO-1.20/IO.xs	Mon Jul 13 23:36:24 1998
        --- ./IO.xs	Sat May 10 15:20:02 2003
        ***************
        *** 205,211 ****
                ST(0) = sv_2mortal(newSVpv((char*)&pos, sizeof(Fpos_t)));
            }
            else {
        ! 	    ST(0) = &sv_undef;
                errno = EINVAL;
            }

        --- 205,211 ----
                ST(0) = sv_2mortal(newSVpv((char*)&pos, sizeof(Fpos_t)));
            }
            else {
        ! 	    ST(0) = &PL_sv_undef;
                errno = EINVAL;
            }

        ***************
        *** 249,255 ****
                SvREFCNT_dec(gv);   /* undo increment in newRV() */
            }
            else {
        ! 	    ST(0) = &sv_undef;
                SvREFCNT_dec(gv);
            }

        --- 249,255 ----
                SvREFCNT_dec(gv);   /* undo increment in newRV() */
            }
            else {
        ! 	    ST(0) = &PL_sv_undef;
                SvREFCNT_dec(gv);
            }

        ***************
        *** 272,278 ****
            i++;
            fds[j].revents = 0;
            }
        !     if((ret = poll(fds,nfd,timeout)) >= 0) {
            for(i=1, j=0 ; j < nfd ; j++) {
                sv_setiv(ST(i), fds[j].fd); i++;
                sv_setiv(ST(i), fds[j].revents); i++;
        --- 272,278 ----
            i++;
            fds[j].revents = 0;
            }
        !     if((ret = io_poll(fds,nfd,timeout)) >= 0) {
            for(i=1, j=0 ; j < nfd ; j++) {
                sv_setiv(ST(i), fds[j].fd); i++;
                sv_setiv(ST(i), fds[j].revents); i++;
        diff -c ../IO-orig/IO-1.20/poll.c ./poll.c
        *** ../IO-orig/IO-1.20/poll.c	Wed Mar 18 21:34:00 1998
        --- ./poll.c	Sat May 10 14:28:22 2003
        ***************
        *** 35,41 ****
        # define POLL_EVENTS_MASK (POLL_CAN_READ | POLL_CAN_WRITE | POLL_HAS_EXCP)

        int
        ! poll(fds, nfds, timeout)
        struct pollfd *fds;
        unsigned long nfds;
        int timeout;
        --- 35,41 ----
        # define POLL_EVENTS_MASK (POLL_CAN_READ | POLL_CAN_WRITE | POLL_HAS_EXCP)

        int
        ! io_poll(fds, nfds, timeout)
        struct pollfd *fds;
        unsigned long nfds;
        int timeout;
        diff -c ../IO-orig/IO-1.20/poll.h ./poll.h
        *** ../IO-orig/IO-1.20/poll.h	Wed Apr 15 20:33:02 1998
        --- ./poll.h	Sat May 10 14:29:11 2003
        ***************
        *** 44,50 ****
        #define	POLLHUP		0x0010
        #define	POLLNVAL	0x0020

        ! int poll _((struct pollfd *, unsigned long, int));

        #ifndef HAS_POLL
        #  define HAS_POLL
        --- 44,50 ----
        #define	POLLHUP		0x0010
        #define	POLLNVAL	0x0020

        ! int io_poll _((struct pollfd *, unsigned long, int));

        #ifndef HAS_POLL
        #  define HAS_POLL
        +=+=+=+=+=+=+= Cut to the previous line

    - compile and install as you usually would, making sure that
      existing but conflicting modules get removed:

      $ perl Makefile.PL
      $ make
      $ make test
      $ make install UNINST=1

    - You are done. Continue with 3).

3) Install the module DBI as per its instructions, if you haven't
   already done so.

4) Install the DBD::Oracle module.

      $ perl Makefile.PL
      $ make
      $ make test
      $ make install

=head1 Instructions for 10.3.x (Panther)

I highly recommend you install and use the Oracle 10g Instant Client
for MacOSX 10.3. Compared to traditional Oracle client installations
it is a very compact download, and it has the memory leak problem
fixed. As an added benefit, you will be able to seamlessly connect to
10g databases. Even if you do want to run the database server included
in the 9iR2 Developer's Release, I'd still use the Instant Client for
compiling OCI applications or drivers like DBD::Oracle.

If you still decide to use the full 9iR2 DR client, and if all you use
DBD::Oracle for on MacOSX is development and test scripts that don't
involve running the same query multiple times or many queries within
the same perl process, then note that the memory leak will most likely
never affect you in a serious way. In this case you may not need to
bother and instead just go ahead, build and install DBD::Oracle
straightforwardly without any special measures.

That said, here are the details.

0) (If you decided for the 9iR2 DR client, skip to 1.) If you decided
   to use the 10g Instant Client, make sure you download and install
   all parts. (Given that this is perl land you may not need the JDBC
   driver, but why bother sorting out the 25% you may or may not ever
   need.) Follow the Oracle instructions and copy the contents of each
   part into the same destination directory. Change to this
   destination directory and create a symlink lib pointing to '.'
   (without the quotes):

   $ cd </path/to/my/oracle/instantclient>
   $ ln -s lib .

   Also, set the environment variable ORACLE_HOME to the path to your
   instantclient destination directory. Makefile.PL needs it.

   Now return to your DBD::Oracle download. If the version is 1.16 or
   less you will need to patch Makefile.PL; in later versions this may
   be fixed already. Apply the following patch, e.g., by cutting and
   pasting into a file Makefile.PL.patch and then executing

   $ patch -p0 < Makefile.PL.patch

