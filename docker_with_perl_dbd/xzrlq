# Roland McGrath, Noah Friedman, david d zuhn, and many others.


# Table of contents
#
# 1. Generic tests for functions.
# 2. Functions to check with AC_CHECK_FUNCS
# 3. Tests for specific functions.


## -------------------------------- ##
## 1. Generic tests for functions.  ##
## -------------------------------- ##

# _AC_CHECK_FUNC_BODY
# -------------------
# Shell function body for AC_CHECK_FUNC.
m4_define([_AC_CHECK_FUNC_BODY],
[  AS_LINENO_PUSH([$[]1])
  AC_CACHE_CHECK([for $[]2], [$[]3],
  [AC_LINK_IFELSE([AC_LANG_FUNC_LINK_TRY($[]2)],
		  [AS_VAR_SET([$[]3], [yes])],
		  [AS_VAR_SET([$[]3], [no])])])
  AS_LINENO_POP
])# _AC_CHECK_FUNC_BODY


m4_define([_AC_CHECK_FUNC_FN],
[AC_REQUIRE_SHELL_FN([ac_fn_]_AC_LANG_ABBREV[_check_func],
  [AS_FUNCTION_DESCRIBE([ac_fn_]_AC_LANG_ABBREV[_check_func],
    [LINENO FUNC VAR],
    [Tests whether FUNC exists, setting the cache variable VAR accordingly])],
  [_AC_CHECK_FUNC_BODY])])

# AC_CHECK_FUNC(FUNCTION, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
# -----------------------------------------------------------------
# Check whether FUNCTION links in the current language.  Set the cache
# variable ac_cv_func_FUNCTION accordingly, then execute
# ACTION-IF-FOUND or ACTION-IF-NOT-FOUND.
AC_DEFUN([AC_CHECK_FUNC],
[_AC_CHECK_FUNC_FN()]dnl
[AS_VAR_PUSHDEF([ac_var], [ac_cv_func_$1])]dnl
[ac_fn_[]_AC_LANG_ABBREV[]_check_func "$LINENO" "$1" "ac_var"
AS_VAR_IF([ac_var], [yes], [$2], [$3])
AS_VAR_POPDEF([ac_var])])# AC_CHECK_FUNC


# _AH_CHECK_FUNC(FUNCTION)
# ------------------------
# Prepare the autoheader snippet for FUNCTION.
m4_define([_AH_CHECK_FUNC],
[AH_TEMPLATE(AS_TR_CPP([HAVE_$1]),
  [Define to 1 if you have the `$1' function.])])

# _AC_CHECK_FUNCS_ONE_U(FUNCTION)
# -------------------------------
# Perform the actions that need to be performed unconditionally
# for every FUNCTION that *could* be checked for by AC_CHECK_FUNCS.
m4_define([_AC_CHECK_FUNCS_ONE_U],
[AS_LITERAL_WORD_IF([$1],
  [_AH_CHECK_FUNC([$1])],
  [m4_warn([syntax], [AC_CHECK_FUNCS($1): you should use literals])])])

# _AC_CHECK_FUNCS_ONE_S(FUNCTION)
# -------------------------------
# If FUNCTION exists, define HAVE_FUNCTION.  FUNCTION must be literal.
# Used by AC_CHECK_FUNCS for its simplest case, when its FUNCTION list
# is fully literal and no optional actions were supplied.
m4_define([_AC_CHECK_FUNCS_ONE_S],
[_AH_CHECK_FUNC([$1])]dnl
[AC_CHECK_FUNC([$1],
  [AC_DEFINE(AS_TR_CPP([HAVE_$1]))])])

# _AC_CHECK_FUNCS_ONE_C(FUNCTION, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
# -------------------------------------------------------------------------
# If FUNCTION exists, define HAVE_FUNCTION and execute ACTION-IF-FOUND.
# Otherwise execute ACTION-IF-NOT-FOUND.  FUNCTION can be a shell variable.
# Used by AC_CHECK_FUNCS for complex cases.
m4_define([_AC_CHECK_FUNCS_ONE_C],
[AC_CHECK_FUNC([$1],
  [AC_DEFINE_UNQUOTED(AS_TR_CPP([HAVE_]$1)) $2],
  [$3])])

# AC_CHECK_FUNCS(FUNCTION..., [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
# ---------------------------------------------------------------------
# Check for each whitespace-separated FUNCTION, and perform
# ACTION-IF-FOUND or ACTION-IF-NOT-FOUND for each function.
# Additionally, make the preprocessor definition HAVE_FUNCTION
# available for each found function.  Either ACTION may include
# `break' to stop the search.
AC_DEFUN([AC_CHECK_FUNCS],
[_$0(m4_validate_w([$1]), [$2], [$3])])

m4_define([_AC_CHECK_FUNCS],
[m4_if([$2$3]AS_LITERAL_IF([$1], [[yes]], [[no]]), [yes],
  [m4_map_args_w([$1], [_AC_CHECK_FUNCS_ONE_S(], [)])],
  [m4_map_args_w([$1], [_AC_CHECK_FUNCS_ONE_U(], [)])]
  [AS_FOR([AC_func], [ac_func], [$1],
    [_AC_CHECK_FUNCS_ONE_C(AC_func, [$2], [$3])])])])


# _AC_CHECK_FUNC_ONCE(FUNCTION)
# -----------------------------
# Check for a single FUNCTION once.
m4_define([_AC_CHECK_FUNC_ONCE],
[_AH_CHECK_FUNC([$1])AC_DEFUN([_AC_Func_$1], [m4_divert_text([INIT_PREPARE],
  [AS_VAR_APPEND([ac_func_]]_AC_LANG_ABBREV[[_list],
  [" $1 ]AS_TR_CPP([HAVE_$1])["])])]dnl
[_AC_FUNCS_EXPANSION(_AC_LANG_ABBREV)])AC_REQUIRE([_AC_Func_$1])])

# AC_CHECK_FUNCS_ONCE(FUNCTION...)
# --------------------------------
# Add each whitespace-separated name in FUNCTION to the list of functions
# to check once.
AC_DEFUN([AC_CHECK_FUNCS_ONCE],
[m4_map_args_w(m4_validate_w([$1]), [_AC_CHECK_FUNC_ONCE(], [)])])

# _AC_FUNCS_EXPANSION(LANG)
# -------------------------
# One-shot code per language LANG for checking all functions registered by
# AC_CHECK_FUNCS_ONCE while that language was active.  We have to inline
# portions of AC_CHECK_FUNC, because although we operate on shell
# variables, we know they represent literals at that point in time,
# where we don't want to trigger normal AS_VAR_PUSHDEF shell code.
m4_define([_AC_FUNCS_EXPANSION],
[m4_ifndef([$0($1)], [m4_define([$0($1)])m4_divert_text([DEFAULTS],
[ac_func_$1_list=])ac_func=
for ac_item in $ac_func_$1_list
do
  if test $ac_func; then
    _AC_CHECK_FUNC_FN()ac_fn_$1_check_func "$LINENO" ]dnl
[$ac_func ac_cv_func_$ac_func
    if eval test \"x\$ac_cv_func_$ac_func\" = xyes; then
      echo "[#]define $ac_item 1" >> confdefs.h
    fi
    ac_func=
  else
    ac_func=$ac_item
  fi
done])])


# _AC_REPLACE_FUNC_U(FUNCTION)
# ----------------------------
# Perform the actions that need to be performed unconditionally
# for every FUNCTION that *could* be replaced by AC_REPLACE_FUNCS.
m4_define([_AC_REPLACE_FUNC_U],
[AS_LITERAL_WORD_IF([$1],
  [_AH_CHECK_FUNC([$1])AC_LIBSOURCE([$1.c])],
  [m4_warn([syntax], [AC_REPLACE_FUNCS($1): you should use literals])])])

# _AC_REPLACE_FUNC_L(FUNCTION)
# ----------------------------
# If FUNCTION exists, define HAVE_FUNCTION; else add FUNCTION.c
# to the list of library objects.  FUNCTION must be literal.
m4_define([_AC_REPLACE_FUNC_L],
[_AC_REPLACE_FUNC_U([$1])]dnl
[AC_CHECK_FUNC([$1],
  [AC_DEFINE(AS_TR_CPP([HAVE_$1]))],
  [_AC_LIBOBJ([$1])])])

# _AC_REPLACE_FUNC_NL(FUNCTION)
# -----------------------------
# If FUNCTION exists, define HAVE_FUNCTION; else add FUNCTION.c
# to the list of library objects.  FUNCTION can be a shell variable.
# (Because of this, neither _AH_CHECK_FUNC nor AC_LIBSOURCE is invoked
# for FUNCTION.)
m4_define([_AC_REPLACE_FUNC_NL],
[AC_CHECK_FUNC([$1],
               [AC_DEFINE_UNQUOTED(AS_TR_CPP([HAVE_]$1))],
               [_AC_LIBOBJ([$1])])])

# AC_REPLACE_FUNCS(FUNCTION...)
# -----------------------------
# For each FUNCTION in the whitespace separated list, perform the
# equivalent of AC_CHECK_FUNC, then call AC_LIBOBJ if the function
# was not found.
AC_DEFUN([AC_REPLACE_FUNCS],
[_$0(m4_validate_w([$1]))])

m4_define([_AC_REPLACE_FUNCS],
[AS_LITERAL_IF([$1],
  [m4_map_args_w([$1], [_AC_REPLACE_FUNC_L(], [)])],
  [m4_map_args_w([$1], [_AC_REPLACE_FUNC_U(], [)])]dnl
  [AS_FOR([AC_func], [ac_func], [$1], [_AC_REPLACE_FUNC_NL(AC_func)])])])


# AC_TRY_LINK_FUNC(FUNC, ACTION-IF-FOUND, ACTION-IF-NOT-FOUND)
# ------------------------------------------------------------
# Try to link a program that calls FUNC, handling GCC builtins.  If
# the link succeeds, execute ACTION-IF-FOUND; otherwise, execute
# ACTION-IF-NOT-FOUND.
AC_DEFUN([AC_TRY_LINK_FUNC],
[AC_LINK_IFELSE([AC_LANG_CALL([], [$1])], [$2], [$3])])


# AU::AC_FUNC_CHECK
# -----------------
AU_ALIAS([AC_FUNC_CHECK], [AC_CHECK_FUNC])


# AU::AC_HAVE_FUNCS
# -----------------
AU_ALIAS([AC_HAVE_FUNCS], [AC_CHECK_FUNCS])




## ------------------------------------------- ##
## 2. Functions to check with AC_CHECK_FUNCS.  ##
## ------------------------------------------- ##

AN_FUNCTION([__argz_count],            [AC_CHECK_FUNCS])
AN_FUNCTION([__argz_next],             [AC_CHECK_FUNCS])
AN_FUNCTION([__argz_stringify],        [AC_CHECK_FUNCS])
AN_FUNCTION([__fpending],              [AC_CHECK_FUNCS])
AN_FUNCTION([acl],                     [AC_CHECK_FUNCS])
AN_FUNCTION([alarm],                   [AC_CHECK_FUNCS])
AN_FUNCTION([atexit],                  [AC_CHECK_FUNCS])
AN_FUNCTION([btowc],                   [AC_CHECK_FUNCS])
AN_FUNCTION([bzero],                   [AC_CHECK_FUNCS])
AN_FUNCTION([clock_gettime],           [AC_CHECK_FUNCS])
AN_FUNCTION([doprnt],                  [AC_CHECK_FUNCS])
AN_FUNCTION([dup2],                    [AC_CHECK_FUNCS])
AN_FUNCTION([endgrent],                [AC_CHECK_FUNCS])
AN_FUNCTION([endpwent],                [AC_CHECK_FUNCS])
AN_FUNCTION([euidaccess],              [AC_CHECK_FUNCS])
AN_FUNCTION([fchdir],                  [AC_CHECK_FUNCS])
AN_FUNCTION([fdatasync],               [AC_CHECK_FUNCS])
AN_FUNCTION([fesetround],              [AC_CHECK_FUNCS])
AN_FUNCTION([floor],                   [AC_CHECK_FUNCS])
AN_FUNCTION([fs_stat_dev],             [AC_CHECK_FUNCS])
AN_FUNCTION([ftime],                   [AC_CHECK_FUNCS])
AN_FUNCTION([ftruncate],               [AC_CHECK_FUNCS])
AN_FUNCTION([getcwd],                  [AC_CHECK_FUNCS])
AN_FUNCTION([getdelim],                [AC_CHECK_FUNCS])
AN_FUNCTION([gethostbyaddr],           [AC_CHECK_FUNCS])
AN_FUNCTION([gethostbyname],           [AC_CHECK_FUNCS])
AN_FUNCTION([gethostname],             [AC_CHECK_FUNCS])
AN_FUNCTION([gethrtime],               [AC_CHECK_FUNCS])
AN_FUNCTION([getmntent],               [AC_CHECK_FUNCS])
AN_FUNCTION([getmntinfo],              [AC_CHECK_FUNCS])
AN_FUNCTION([getpagesize],             [AC_CHECK_FUNCS])
AN_FUNCTION([getpass],                 [AC_CHECK_FUNCS])
AN_FUNCTION([getspnam],                [AC_CHECK_FUNCS])
AN_FUNCTION([gettimeofday],            [AC_CHECK_FUNCS])
AN_FUNCTION([getusershell],            [AC_CHECK_FUNCS])
AN_FUNCTION([hasmntopt],               [AC_CHECK_FUNCS])
AN_FUNCTION([inet_ntoa],               [AC_CHECK_FUNCS])
AN_FUNCTION([isascii],                 [AC_CHECK_FUNCS])
AN_FUNCTION([iswprint],                [AC_CHECK_FUNCS])
AN_FUNCTION([lchown],                  [AC_CHECK_FUNCS])
AN_FUNCTION([listmntent],              [AC_CHECK_FUNCS])
AN_FUNCTION([localeconv],              [AC_CHECK_FUNCS])
AN_FUNCTION([localtime_r],             [AC_CHECK_FUNCS])
AN_FUNCTION([mblen],                   [AC_CHECK_FUNCS])
AN_FUNCTION([mbrlen],                  [AC_CHECK_FUNCS])
AN_FUNCTION([memchr],                  [AC_CHECK_FUNCS])
AN_FUNCTION([memmove],                 [AC_CHECK_FUNCS])
AN_FUNCTION([mempcpy],                 [AC_CHECK_FUNCS])
AN_FUNCTION([memset],                  [AC_CHECK_FUNCS])
AN_FUNCTION([mkdir],                   [AC_CHECK_FUNCS])
AN_FUNCTION([mkfifo],                  [AC_CHECK_FUNCS])
AN_FUNCTION([modf],                    [AC_CHECK_FUNCS])
AN_FUNCTION([munmap],                  [AC_CHECK_FUNCS])
AN_FUNCTION([next_dev],                [AC_CHECK_FUNCS])
AN_FUNCTION([nl_langinfo],             [AC_CHECK_FUNCS])
AN_FUNCTION([pathconf],                [AC_CHECK_FUNCS])
AN_FUNCTION([pow],                     [AC_CHECK_FUNCS])
AN_FUNCTION([pstat_getdynamic],        [AC_CHECK_FUNCS])
AN_FUNCTION([putenv],                  [AC_CHECK_FUNCS])
AN_FUNCTION([re_comp],                 [AC_CHECK_FUNCS])
AN_FUNCTION([realpath],                [AC_CHECK_FUNCS])
AN_FUNCTION([regcmp],                  [AC_CHECK_FUNCS])
AN_FUNCTION([regcomp],                 [AC_CHECK_FUNCS])
AN_FUNCTION([resolvepath],             [AC_CHECK_FUNCS])
AN_FUNCTION([rint],                    [AC_CHECK_FUNCS])
AN_FUNCTION([rmdir],                   [AC_CHECK_FUNCS])
AN_FUNCTION([rpmatch],                 [AC_CHECK_FUNCS])
AN_FUNCTION([select],                  [AC_CHECK_FUNCS])
AN_FUNCTION([setenv],                  [AC_CHECK_FUNCS])
AN_FUNCTION([sethostname],             [AC_CHECK_FUNCS])
AN_FUNCTION([setlocale],               [AC_CHECK_FUNCS])
AN_FUNCTION([socket],                  [AC_CHECK_FUNCS])
AN_FUNCTION([sqrt],                    [AC_CHECK_FUNCS])
AN_FUNCTION([stime],                   [AC_CHECK_FUNCS])
AN_FUNCTION([stpcpy],                  [AC_CHECK_FUNCS])
AN_FUNCTION([strcasecmp],              [AC_CHECK_FUNCS])
AN_FUNCTION([strchr],                  [AC_CHECK_FUNCS])
AN_FUNCTION([strcspn],                 [AC_CHECK_FUNCS])
AN_FUNCTION([strdup],                  [AC_CHECK_FUNCS])
AN_FUNCTION([strerror],                [AC_CHECK_FUNCS])
AN_FUNCTION([strncasecmp],             [AC_CHECK_FUNCS])
AN_FUNCTION([strndup],                 [AC_CHECK_FUNCS])
AN_FUNCTION([strpbrk],                 [AC_CHECK_FUNCS])
AN_FUNCTION([strrchr],                 [AC_CHECK_FUNCS])
AN_FUNCTION([strspn],                  [AC_CHECK_FUNCS])
AN_FUNCTION([strstr],                  [AC_CHECK_FUNCS])
AN_FUNCTION([strtol],                  [AC_CHECK_FUNCS])
AN_FUNCTION([strtoul],                 [AC_CHECK_FUNCS])
AN_FUNCTION([strtoull],                [AC_CHECK_FUNCS])
AN_FUNCTION([strtoumax],               [AC_CHECK_FUNCS])
AN_FUNCTION([strverscmp],              [AC_CHECK_FUNCS])
AN_FUNCTION([sysinfo],                 [AC_CHECK_FUNCS])
AN_FUNCTION([tzset],                   [AC_CHECK_FUNCS])
AN_FUNCTION([uname],                   [AC_CHECK_FUNCS])
AN_FUNCTION([utime],                   [AC_CHECK_FUNCS])
AN_FUNCTION([utmpname],                [AC_CHECK_FUNCS])
AN_FUNCTION([utmpxname],               [AC_CHECK_FUNCS])
AN_FUNCTION([wcwidth],                 [AC_CHECK_FUNCS])


AN_FUNCTION([dcgettext],    [AM_GNU_GETTEXT])
AN_FUNCTION([getwd],        [warn: getwd is deprecated, use getcwd instead])


## --------------------------------- ##
## 3. Tests for specific functions.  ##
## --------------------------------- ##


# The macros are sorted:
#
# 1. AC_FUNC_* macros are sorted by alphabetical order.
#
# 2. Helping macros such as _AC_LIBOBJ_* are before the macro that
#    uses it.
#
# 3. Obsolete macros are right after the modern macro.



# _AC_LIBOBJ_ALLOCA
# -----------------
# Set up the LIBOBJ replacement of 'alloca'.  Well, not exactly
# AC_LIBOBJ since we actually set the output variable 'ALLOCA'.
# Nevertheless, for Automake, AC_LIBSOURCES it.
m4_define([_AC_LIBOBJ_ALLOCA],
[# The SVR3 libPW and SVR4 libucb both contain incompatible functions
# that cause trouble.  Some versions do not even contain alloca or
# contain a buggy version.  If you still want to use their alloca,
# use ar to extract alloca.o from them instead of compiling alloca.c.
AC_LIBSOURCES(alloca.c)
AC_SUBST([ALLOCA], [\${LIBOBJDIR}alloca.$ac_objext])dnl
AC_DEFINE(C_ALLOCA, 1, [Define to 1 if using 'alloca.c'.])

AC_CACHE_CHECK([stack direction for C alloca],
	       [ac_cv_c_stack_direction],
[AC_RUN_IFELSE([AC_LANG_SOURCE(
[AC_INCLUDES_DEFAULT
int
find_stack_direction (int *addr, int depth)
{
  int dir, dummy = 0;
  if (! addr)
    addr = &dummy;
  *addr = addr < &dummy ? 1 : addr == &dummy ? 0 : -1;
  dir = depth ? find_stack_direction (addr, depth - 1) : 0;
  return dir + dummy;
}

int
main (int argc, char **argv)
{
  return find_stack_direction (0, argc + !argv + 20) < 0;
}])],
	       [ac_cv_c_stack_direction=1],
	       [ac_cv_c_stack_direction=-1],
	       [ac_cv_c_stack_direction=0])])
AH_VERBATIM([STACK_DIRECTION],
[/* If using the C implementation of alloca, define if you know the
   direction of stack growth for your system; otherwise it will be
   automatically deduced at runtime.
	STACK_DIRECTION > 0 => grows toward higher addresses
	STACK_DIRECTION < 0 => grows toward lower addresses
	STACK_DIRECTION = 0 => direction of growth unknown */
#undef STACK_DIRECTION])dnl
AC_DEFINE_UNQUOTED(STACK_DIRECTION, $ac_cv_c_stack_direction)
])# _AC_LIBOBJ_ALLOCA


# AC_FUNC_ALLOCA
# --------------
AN_FUNCTION([alloca], [AC_FUNC_ALLOCA])
AN_HEADER([alloca.h], [AC_FUNC_ALLOCA])
AC_DEFUN([AC_FUNC_ALLOCA],
[AC_REQUIRE([AC_TYPE_SIZE_T])]dnl
[# The Ultrix 4.2 mips builtin alloca declared by alloca.h only works
# for constant arguments.  Useless!
AC_CACHE_CHECK([for working alloca.h], ac_cv_working_alloca_h,
[AC_LINK_IFELSE(
       [AC_LANG_PROGRAM([[@%:@include <alloca.h>]],
			[[char *p = (char *) alloca (2 * sizeof (int));
			  if (p) return 0;]])],
		[ac_cv_working_alloca_h=yes],
		[ac_cv_working_alloca_h=no])])
if test $ac_cv_working_alloca_h = yes; then
  AC_DEFINE(HAVE_ALLOCA_H, 1,
	    [Define to 1 if <alloca.h> works.])
fi

AC_CACHE_CHECK([for alloca], ac_cv_func_alloca_works,
[if test $ac_cv_working_alloca_h = yes; then
  ac_cv_func_alloca_works=yes
else
  AC_LINK_IFELSE([AC_LANG_PROGRAM(
[[#include <stdlib.h>
#include <stddef.h>
#ifndef alloca
# ifdef __GNUC__
#  define alloca __builtin_alloca
# elif defined _MSC_VER
#  include <malloc.h>
#  define alloca _alloca
# else
#  ifdef  __cplusplus
extern "C"
#  endif
void *alloca (size_t);
# endif
#endif
]],                               [[char *p = (char *) alloca (1);
				    if (p) return 0;]])],
		[ac_cv_func_alloca_works=yes],
		[ac_cv_func_alloca_works=no])])
fi

if test $ac_cv_func_alloca_works = yes; then
  AC_DEFINE(HAVE_ALLOCA, 1,
	    [Define to 1 if you have 'alloca', as a function or macro.])
else
  _AC_LIBOBJ_ALLOCA
fi
])# AC_FUNC_ALLOCA


# AU::AC_ALLOCA
# -------------
AU_ALIAS([AC_ALLOCA], [AC_FUNC_ALLOCA])


# AC_FUNC_CHOWN
# -------------
# Determine whether chown accepts arguments of -1 for uid and gid.
AN_FUNCTION([chown], [AC_FUNC_CHOWN])
AC_DEFUN([AC_FUNC_CHOWN],
[AC_REQUIRE([AC_TYPE_UID_T])dnl
AC_REQUIRE([AC_CANONICAL_HOST])dnl for cross-compiles
AC_CACHE_CHECK([for working chown], ac_cv_func_chown_works,
[AC_RUN_IFELSE([AC_LANG_PROGRAM([AC_INCLUDES_DEFAULT
#include <fcntl.h>
],
[[  char *f = "conftest.chown";
  struct stat before, after;

  if (creat (f, 0600) < 0)
    return 1;
  if (stat (f, &before) < 0)
    return 1;
  if (chown (f, (uid_t) -1, (gid_t) -1) == -1)
    return 1;
  if (stat (f, &after) < 0)
    return 1;
  return ! (before.st_uid == after.st_uid && before.st_gid == after.st_gid);
]])],
	       [ac_cv_func_chown_works=yes],
	       [ac_cv_func_chown_works=no],
	       [case "$host_os" in # ((
			  # Guess yes on glibc systems.
		  *-gnu*) ac_cv_func_chown_works=yes ;;
			  # If we don't know, assume the worst.
		  *)      ac_cv_func_chown_works=no ;;
		esac])
rm -f conftest.chown
])
if test $ac_cv_func_chown_works = yes; then
  AC_DEFINE(HAVE_CHOWN, 1,
	    [Define to 1 if your system has a working `chown' function.])
fi
])# AC_FUNC_CHOWN


# AC_FUNC_CLOSEDIR_VOID
# ---------------------
# Check whether closedir returns void, and #define CLOSEDIR_VOID in
# that case.  Note: the test program *fails* to compile when closedir
# returns void.
AC_DEFUN([AC_FUNC_CLOSEDIR_VOID],
[AC_REQUIRE([AC_HEADER_DIRENT])dnl
AC_CACHE_CHECK([whether closedir returns void],
	       [ac_cv_func_closedir_void],
[AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#include <$ac_header_dirent>
]], [[
  return closedir(0);
]])],
	       [ac_cv_func_closedir_void=no],
	       [ac_cv_func_closedir_void=yes])])
if test $ac_cv_func_closedir_void = yes; then
  AC_DEFINE(CLOSEDIR_VOID, 1,
	    [Define to 1 if the `closedir' function returns void instead
	     of int.])
fi
])


# AC_FUNC_ERROR_AT_LINE
# ---------------------
AN_FUNCTION([error],         [AC_FUNC_ERROR_AT_LINE])
AN_FUNCTION([error_at_line], [AC_FUNC_ERROR_AT_LINE])
AC_DEFUN([AC_FUNC_ERROR_AT_LINE],
[AC_LIBSOURCES([error.h, error.c])dnl
AC_CACHE_CHECK([for error_at_line], ac_cv_lib_error_at_line,
[AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <error.h>],
				 [error_at_line (0, 0, "", 0, "an error occurred");])],
		[ac_cv_lib_error_at_line=yes],
		[ac_cv_lib_error_at_line=no])])
if test $ac_cv_lib_error_at_line = no; then
  AC_LIBOBJ(error)
fi
])


# AU::AM_FUNC_ERROR_AT_LINE
# -------------------------
AU_ALIAS([AM_FUNC_ERROR_AT_LINE], [AC_FUNC_ERROR_AT_LINE])


# _AC_FUNC_FNMATCH_IF(STANDARD = GNU | POSIX, CACHE_VAR, IF-TRUE, IF-FALSE)
# -------------------------------------------------------------------------
# If a STANDARD compliant fnmatch is found, run IF-TRUE, otherwise
# IF-FALSE.  Use CACHE_VAR.
AC_DEFUN([_AC_FUNC_FNMATCH_IF],
[AC_CACHE_CHECK(
   [for working $1 fnmatch],
   [$2],
  [# Some versions of Solaris, SCO, and the GNU C Library
   # have a broken or incompatible fnmatch.
   # So we run a test program.  If we are cross-compiling, take no chance.
   # Thanks to John Oleynick, Franc,ois Pinard, and Paul Eggert for this test.
   AC_RUN_IFELSE(
      [AC_LANG_PROGRAM(
	 [#include <fnmatch.h>
#	   define y(a, b, c) (fnmatch (a, b, c) == 0)
#	   define n(a, b, c) (fnmatch (a, b, c) == FNM_NOMATCH)
	 ],
	 [return
	   (!(y ("a*", "abc", 0)
	      && n ("d*/*1", "d/s/1", FNM_PATHNAME)
	      && y ("a\\\\bc", "abc", 0)
	      && n ("a\\\\bc", "abc", FNM_NOESCAPE)
	      && y ("*x", ".x", 0)
	      && n ("*x", ".x", FNM_PERIOD)
	      && m4_if([$1], [GNU],
		   [y ("xxXX", "xXxX", FNM_CASEFOLD)
		    && y ("a++(x|yy)b", "a+xyyyyxb", FNM_EXTMATCH)
		    && n ("d*/*1", "d/s/1", FNM_FILE_NAME)
		    && y ("*", "x", FNM_FILE_NAME | FNM_LEADING_DIR)
		    && y ("x*", "x/y/z", FNM_FILE_NAME | FNM_LEADING_DIR)
		    && y ("*c*", "c/x", FNM_FILE_NAME | FNM_LEADING_DIR)],
		   1)));])],
      [$2=yes],
      [$2=no],
      [$2=cross])])
AS_IF([test $$2 = yes], [$3], [$4])
])# _AC_FUNC_FNMATCH_IF


# AC_FUNC_FNMATCH
# ---------------
AC_DEFUN([AC_FUNC_FNMATCH],
[_AC_FUNC_FNMATCH_IF([POSIX], [ac_cv_func_fnmatch_works],
		     [AC_DEFINE([HAVE_FNMATCH], 1,
		     [Define to 1 if your system has a working POSIX `fnmatch'
		      function.])])
])# AC_FUNC_FNMATCH


# _AC_LIBOBJ_FNMATCH
# ------------------
# Prepare the replacement of fnmatch.
AC_DEFUN([_AC_LIBOBJ_FNMATCH],
[AC_REQUIRE([AC_C_CONST])dnl
AC_REQUIRE([AC_FUNC_ALLOCA])dnl
AC_REQUIRE([AC_TYPE_MBSTATE_T])dnl
AC_CHECK_DECLS_ONCE([getenv])
AC_CHECK_FUNCS_ONCE([btowc mbsrtowcs mempcpy wmempcpy])
AC_LIBOBJ([fnmatch])
AC_CONFIG_LINKS([$ac_config_libobj_dir/fnmatch.h:$ac_config_libobj_dir/fnmatch_.h])
AC_DEFINE(fnmatch, rpl_fnmatch,
	  [Define to rpl_fnmatch if the replacement function should be used.])
])# _AC_LIBOBJ_FNMATCH


# AC_REPLACE_FNMATCH
# ------------------
AC_DEFUN([AC_REPLACE_FNMATCH],
[_AC_FUNC_FNMATCH_IF([POSIX], [ac_cv_func_fnmatch_works],
		     [rm -f "$ac_config_libobj_dir/fnmatch.h"],
		     [_AC_LIBOBJ_FNMATCH])
])# AC_REPLACE_FNMATCH


# AC_FUNC_FNMATCH_GNU
# -------------------
AC_DEFUN([AC_FUNC_FNMATCH_GNU],
[AC_REQUIRE([AC_GNU_SOURCE])
_AC_FUNC_FNMATCH_IF([GNU], [ac_cv_func_fnmatch_gnu],
		    [rm -f "$ac_config_libobj_dir/fnmatch.h"],
		    [_AC_LIBOBJ_FNMATCH])
])# AC_FUNC_FNMATCH_GNU


# AU::AM_FUNC_FNMATCH
# AU::fp_FUNC_FNMATCH
# -------------------
AU_ALIAS([AM_FUNC_FNMATCH], [AC_FUNC_FNMATCH])
AU_ALIAS([fp_FUNC_FNMATCH], [AC_FUNC_FNMATCH])


# AC_FUNC_FSEEKO
# --------------
AN_FUNCTION([ftello], [AC_FUNC_FSEEKO])
AN_FUNCTION([fseeko], [AC_FUNC_FSEEKO])
AC_DEFUN([AC_FUNC_FSEEKO],
[_AC_SYS_LARGEFILE_MACRO_VALUE(_LARGEFILE_SOURCE, 1,
   [ac_cv_sys_largefile_source],
   [Define to 1 to make fseeko visible on some hosts (e.g. glibc 2.2).],
   [[#include <sys/types.h> /* for off_t */
     #include <stdio.h>]],
   [[int (*fp) (FILE *, off_t, int) = fseeko;
     return fseeko (stdin, 0, 0) && fp (stdin, 0, 0);]])

# We used to try defining _XOPEN_SOURCE=500 too, to work around a bug
# in glibc 2.1.3, but that breaks too many other things.
# If you want fseeko and ftello with glibc, upgrade to a fixed glibc.
if test $ac_cv_sys_largefile_source != unknown; then
  AC_DEFINE(HAVE_FSEEKO, 1,
    [Define to 1 if fseeko (and presumably ftello) exists and is declared.])
fi
])# AC_FUNC_FSEEKO


# AC_FUNC_GETGROUPS
# -----------------
# Try to find `getgroups', and check that it works.
# When cross-compiling, assume getgroups is broken.
AN_FUNCTION([getgroups], [AC_FUNC_GETGROUPS])
AC_DEFUN([AC_FUNC_GETGROUPS],
[AC_REQUIRE([AC_TYPE_GETGROUPS])dnl
AC_REQUIRE([AC_TYPE_SIZE_T])dnl
AC_REQUIRE([AC_CANONICAL_HOST])dnl for cross-compiles
AC_CHECK_FUNC(getgroups)

# If we don't yet have getgroups, see if it's in -lbsd.
# This is reported to be necessary on an ITOS 3000WS running SEIUX 3.1.
ac_save_LIBS=$LIBS
if test $ac_cv_func_getgroups = no; then
  AC_CHECK_LIB(bsd, getgroups, [GETGROUPS_LIB=-lbsd])
fi

# Run the program to test the functionality of the system-supplied
# getgroups function only if there is such a function.
if test $ac_cv_func_getgroups = yes; then
  AC_CACHE_CHECK([for working getgroups], ac_cv_func_getgroups_works,
   [AC_RUN_IFELSE([AC_LANG_PROGRAM([AC_INCLUDES_DEFAULT],
      [[/* On Ultrix 4.3, getgroups (0, 0) always fails.  */
       return getgroups (0, 0) == -1;]])],
		  [ac_cv_func_getgroups_works=yes],
		  [ac_cv_func_getgroups_works=no],
		  [case "$host_os" in # ((
			     # Guess yes on glibc systems.
		     *-gnu*) ac_cv_func_getgroups_works="guessing yes" ;;
			     # If we don't know, assume the worst.
		     *)      ac_cv_func_getgroups_works="guessing no" ;;
		   esac])
   ])
else
  ac_cv_func_getgroups_works=no
fi
case "$ac_cv_func_getgroups_works" in
  *yes)
    AC_DEFINE(HAVE_GETGROUPS, 1,
	      [Define to 1 if your system has a working `getgroups' function.])
    ;;
esac
LIBS=$ac_save_LIBS
])# AC_FUNC_GETGROUPS


# _AC_LIBOBJ_GETLOADAVG
# ---------------------
# Set up the AC_LIBOBJ replacement of `getloadavg'.
m4_define([_AC_LIBOBJ_GETLOADAVG],
[AC_LIBOBJ(getloadavg)
AC_DEFINE(C_GETLOADAVG, 1, [Define to 1 if using `getloadavg.c'.])
# Figure out what our getloadavg.c needs.
AC_CHECK_FUNCS_ONCE([setlocale])
ac_have_func=no
AC_CHECK_HEADER(sys/dg_sys_info.h,
[ac_have_func=yes
 AC_DEFINE(DGUX, 1, [Define to 1 for DGUX with <sys/dg_sys_info.h>.])
 AC_CHECK_LIB(dgc, dg_sys_info)])

# We cannot check for <dwarf.h>, because Solaris 2 does not use dwarf (it
# uses stabs), but it is still SVR4.  We cannot check for <elf.h> because
# Irix 4.0.5F has the header but not the library.
if test $ac_have_func = no && test "$ac_cv_lib_elf_elf_begin" = yes \
    && test "$ac_cv_lib_kvm_kvm_open" = yes; then
  ac_have_func=yes
  AC_DEFINE(SVR4, 1, [Define to 1 on System V Release 4.])
fi

if test $ac_have_func = no; then
  AC_CHECK_HEADER(inq_stats/cpustats.h,
  [ac_have_func=yes
   AC_DEFINE(UMAX, 1, [Define to 1 for Encore UMAX.])
   AC_DEFINE(UMAX4_3, 1,
	     [Define to 1 for Encore UMAX 4.3 that has <inq_status/cpustats.h>
	      instead of <sys/cpustats.h>.])])
fi

if test $ac_have_func = no; then
  AC_CHECK_HEADER(sys/cpustats.h,
  [ac_have_func=yes; AC_DEFINE(UMAX)])
fi

if test $ac_have_func = no; then
  AC_CHECK_HEADERS(mach/mach.h)
fi

AC_CHECK_HEADERS(nlist.h,
[AC_CHECK_MEMBERS([struct nlist.n_un.n_name],
		  [AC_DEFINE(NLIST_NAME_UNION, 1,
			     [Define to 1 if your `struct nlist' has an
			      `n_un' member.  Obsolete, depend on
			      `HAVE_STRUCT_NLIST_N_UN_N_NAME])], [],
		  [@%:@include <nlist.h>])
])dnl
])# _AC_LIBOBJ_GETLOADAVG


# AC_FUNC_GETLOADAVG
# ------------------
AC_DEFUN([AC_FUNC_GETLOADAVG],
[ac_have_func=no # yes means we've found a way to get the load average.

# Make sure getloadavg.c is where it belongs, at configure-time.
test -f "$srcdir/$ac_config_libobj_dir/getloadavg.c" ||
  AC_MSG_ERROR([$srcdir/$ac_config_libobj_dir/getloadavg.c is missing])

ac_save_LIBS=$LIBS

# Check for getloadavg, but be sure not to touch the cache variable.
(AC_CHECK_FUNC(getloadavg, exit 0, exit 1)) && ac_have_func=yes

# On HPUX9, an unprivileged user can get load averages through this function.
AC_CHECK_FUNCS(pstat_getdynamic)

# Solaris has libkstat which does not require root.
AC_CHECK_LIB(kstat, kstat_open)
test $ac_cv_lib_kstat_kstat_open = yes && ac_have_func=yes

# Some systems with -lutil have (and need) -lkvm as well, some do not.
# On Solaris, -lkvm requires nlist from -lelf, so check that first
# to get the right answer into the cache.
# For kstat on solaris, we need libelf to force the definition of SVR4 below.
if test $ac_have_func = no; then
  AC_CHECK_LIB(elf, elf_begin, LIBS="-lelf $LIBS")
fi
if test $ac_have_func = no; then
  AC_CHECK_LIB(kvm, kvm_open, LIBS="-lkvm $LIBS")
  # Check for the 4.4BSD definition of getloadavg.
  AC_CHECK_LIB(util, getloadavg,
    [LIBS="-lutil $LIBS" ac_have_func=yes ac_cv_func_getloadavg_setgid=yes])
fi

if test $ac_have_func = no; then
  # There is a commonly available library for RS/6000 AIX.
  # Since it is not a standard part of AIX, it might be installed locally.
  ac_getloadavg_LIBS=$LIBS
  LIBS="-L/usr/local/lib $LIBS"
  AC_CHECK_LIB(getloadavg, getloadavg,
	       [LIBS="-lgetloadavg $LIBS"], [LIBS=$ac_getloadavg_LIBS])
fi

# Make sure it is really in the library, if we think we found it,
# otherwise set up the replacement function.
AC_CHECK_FUNCS(getloadavg, [],
	       [_AC_LIBOBJ_GETLOADAVG])

# Some definitions of getloadavg require that the program be installed setgid.
AC_CACHE_CHECK(whether getloadavg requires setgid,
	       ac_cv_func_getloadavg_setgid,
[AC_EGREP_CPP([Yowza Am I SETGID yet],
[#include "$srcdir/$ac_config_libobj_dir/getloadavg.c"
#ifdef LDAV_PRIVILEGED
Yowza Am I SETGID yet
@%:@endif],
	      ac_cv_func_getloadavg_setgid=yes,
	      ac_cv_func_getloadavg_setgid=no)])
if test $ac_cv_func_getloadavg_setgid = yes; then
  NEED_SETGID=true
  AC_DEFINE(GETLOADAVG_PRIVILEGED, 1,
	    [Define to 1 if the `getloadavg' function needs to be run setuid
	     or setgid.])
else
  NEED_SETGID=false
fi
AC_SUBST(NEED_SETGID)dnl

if test $ac_cv_func_getloadavg_setgid = yes; then
  AC_CACHE_CHECK(group of /dev/kmem, ac_cv_group_kmem,
[ # On Solaris, /dev/kmem is a symlink.  Get info on the real file.
  ac_ls_output=`ls -lgL /dev/kmem 2>/dev/null`
  # If we got an error (system does not support symlinks), try without -L.
  test -z "$ac_ls_output" && ac_ls_output=`ls -lg /dev/kmem`
  ac_cv_group_kmem=`AS_ECHO(["$ac_ls_output"]) \
    | sed -ne ['s/[	 ][	 ]*/ /g;
	       s/^.[sSrwx-]* *[0-9]* *\([^0-9]*\)  *.*/\1/;
	       / /s/.* //;p;']`
])
  AC_SUBST(KMEM_GROUP, $ac_cv_group_kmem)dnl
fi
if test "x$ac_save_LIBS" = x; then
  GETLOADAVG_LIBS=$LIBS
else
  GETLOADAVG_LIBS=`AS_ECHO(["$LIBS"]) | sed "s|$ac_save_LIBS||"`
fi
LIBS=$ac_save_LIBS

AC_SUBST(GETLOADAVG_LIBS)dnl
])# AC_FUNC_GETLOADAVG


# AU::AC_GETLOADAVG
# -----------------
AU_ALIAS([AC_GETLOADAVG], [AC_FUNC_GETLOADAVG])


# AC_FUNC_GETMNTENT
# -----------------
AN_FUNCTION([getmntent], [AC_FUNC_GETMNTENT])
AC_DEFUN([AC_FUNC_GETMNTENT],
[# getmntent is in the standard C library on UNICOS, in -lsun on Irix 4,
# -lseq on Dynix/PTX, -lgen on Unixware.
AC_SEARCH_LIBS(getmntent, [sun seq gen],
	       [ac_cv_func_getmntent=yes
		AC_DEFINE([HAVE_GETMNTENT], 1,
			  [Define to 1 if you have the `getmntent' function.])],
	       [ac_cv_func_getmntent=no])
])


# AC_FUNC_GETPGRP
# ---------------
# Figure out whether getpgrp requires zero arguments.
AC_DEFUN([AC_FUNC_GETPGRP],
[AC_CACHE_CHECK(whether getpgrp requires zero arguments,
 ac_cv_func_getpgrp_void,
[# Use it with a single arg.
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([AC_INCLUDES_DEFAULT], [getpgrp (0);])],
		  [ac_cv_func_getpgrp_void=no],
		  [ac_cv_func_getpgrp_void=yes])
])
if test $ac_cv_func_getpgrp_void = yes; then
  AC_DEFINE(GETPGRP_VOID, 1,
	    [Define to 1 if the `getpgrp' function requires zero arguments.])
fi
])# AC_FUNC_GETPGRP


# AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK
# -------------------------------------
# When cross-compiling, be pessimistic so we will end up using the
# replacement version of lstat that checks for trailing slashes and
# calls lstat a second time when necessary.
AN_FUNCTION([lstat], [AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK])
AC_DEFUN([AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK],
[AC_REQUIRE([AC_CANONICAL_HOST])dnl for cross-compiles
AC_CACHE_CHECK(
       [whether lstat correctly handles trailing slash],
       [ac_cv_func_lstat_dereferences_slashed_symlink],
[rm -f conftest.sym conftest.file
echo >conftest.file
if test "$as_ln_s" = "ln -s" && ln -s conftest.file conftest.sym; then
  AC_RUN_IFELSE([AC_LANG_PROGRAM([AC_INCLUDES_DEFAULT],
    [struct stat sbuf;
     /* Linux will dereference the symlink and fail, as required by POSIX.
	That is better in the sense that it means we will not
	have to compile and use the lstat wrapper.  */
     return lstat ("conftest.sym/", &sbuf) == 0;])],
		[ac_cv_func_lstat_dereferences_slashed_symlink=yes],
		[ac_cv_func_lstat_dereferences_slashed_symlink=no],
		[case "$host_os" in # ((
			   # Guess yes on glibc systems.
		   *-gnu*) ac_cv_func_lstat_dereferences_slashed_symlink=yes ;;
			   # If we don't know, assume the worst.
		   *)      ac_cv_func_lstat_dereferences_slashed_symlink=no ;;
		 esac])
else
  # If the `ln -s' command failed, then we probably don't even
  # have an lstat function.
  ac_cv_func_lstat_dereferences_slashed_symlink=no
fi
rm -f conftest.sym conftest.file
])

test $ac_cv_func_lstat_dereferences_slashed_symlink = yes &&
  AC_DEFINE_UNQUOTED([LSTAT_FOLLOWS_SLASHED_SYMLINK], [1],
		     [Define to 1 if `lstat' dereferences a symlink specified
		      with a trailing slash.])

if test "x$ac_cv_func_lstat_dereferences_slashed_symlink" = xno; then
  AC_LIBOBJ([lstat])
fi
])


# _AC_FUNC_MALLOC_IF(IF-WORKS, IF-NOT)
# ------------------------------------
# If `malloc (0)' properly handled, run IF-WORKS, otherwise, IF-NOT.
AC_DEFUN([_AC_FUNC_MALLOC_IF],
[AC_REQUIRE([AC_CANONICAL_HOST])dnl for cross-compiles
AC_CACHE_CHECK([for GNU libc compatible malloc], ac_cv_func_malloc_0_nonnull,
[AC_RUN_IFELSE(
[AC_LANG_PROGRAM([[#include <stdlib.h>
                 ]],
		 [[void *p = malloc (0);
		   int result = !p;
		   free (p);
		   return result;]])],
	       [ac_cv_func_malloc_0_nonnull=yes],
	       [ac_cv_func_malloc_0_nonnull=no],
	       [case "$host_os" in # ((
		  # Guess yes on platforms where we know the result.
		  *-gnu* | freebsd* | netbsd* | openbsd* | bitrig* \
		  | hpux* | solaris* | cygwin* | mingw* | msys* )
		    ac_cv_func_malloc_0_nonnull=yes ;;
		  # If we don't know, assume the worst.
		  *) ac_cv_func_malloc_0_nonnull=no ;;
		esac])])
AS_IF([test $ac_cv_func_malloc_0_nonnull = yes], [$1], [$2])
])# _AC_FUNC_MALLOC_IF


# AC_FUNC_MALLOC
# --------------
# Report whether `malloc (0)' properly handled, and replace malloc if
# needed.
AN_FUNCTION([malloc], [AC_FUNC_MALLOC])
AC_DEFUN([AC_FUNC_MALLOC],
[_AC_FUNC_MALLOC_IF(
  [AC_DEFINE([HAVE_MALLOC], 1,
	     [Define to 1 if your system has a GNU libc compatible `malloc'
	      function, and to 0 otherwise.])],
  [AC_DEFINE([HAVE_MALLOC], 0)
   AC_LIBOBJ(malloc)
   AC_DEFINE([malloc], [rpl_malloc],
      [Define to rpl_malloc if the replacement function should be used.])])
])# AC_FUNC_MALLOC


# AC_FUNC_MBRTOWC
# ---------------
AN_FUNCTION([mbrtowc], [AC_FUNC_MBRTOWC])
AC_DEFUN([AC_FUNC_MBRTOWC],
[
  AC_CACHE_CHECK([whether mbrtowc and mbstate_t are properly declared],
    ac_cv_func_mbrtowc,
    [AC_LINK_IFELSE(
       [AC_LANG_PROGRAM(
	    [[@%:@include <wchar.h>]],
	    [[wchar_t wc;
	      char const s[] = "";
	      size_t n = 1;
	      mbstate_t state;
	      return ! (sizeof state && (mbrtowc) (&wc, s, n, &state));]])],
       ac_cv_func_mbrtowc=yes,
       ac_cv_func_mbrtowc=no)])
  if test $ac_cv_func_mbrtowc = yes; then
    AC_DEFINE([HAVE_MBRTOWC], 1,
      [Define to 1 if mbrtowc and mbstate_t are properly declared.])
  fi
])


# AC_FUNC_MEMCMP
# --------------
AC_DEFUN([AC_FUNC_MEMCMP],
[AC_CACHE_CHECK([for working memcmp], ac_cv_func_memcmp_working,
[AC_RUN_IFELSE([AC_LANG_PROGRAM([AC_INCLUDES_DEFAULT], [[
  /* Some versions of memcmp are not 8-bit clean.  */
  char c0 = '\100', c1 = '\200', c2 = '\201';
  if (memcmp(&c0, &c2, 1) >= 0 || memcmp(&c1, &c2, 1) >= 0)
    return 1;

  /* The Next x86 OpenStep bug shows up only when comparing 16 bytes
     or more and with at least one buffer not starting on a 4-byte boundary.
     William Lewis provided this test program.   */
