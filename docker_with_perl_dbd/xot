    Default to False, when True allow creating divergence when performing
    rebase of obsolete changesets.

``revsetalias``
---------------

Alias definitions for revsets. See :hg:`help revsets` for details.

``rewrite``
-----------

``backup-bundle``
    Whether to save stripped changesets to a bundle file. (default: True)

``update-timestamp``
    If true, updates the date and time of the changeset to current. It is only
    applicable for `hg amend`, `hg commit --amend` and `hg uncommit` in the
    current version.

``empty-successor``

    Control what happens with empty successors that are the result of rewrite
    operations. If set to ``skip``, the successor is not created. If set to
    ``keep``, the empty successor is created and kept.

    Currently, only the rebase and absorb commands consider this configuration.
    (EXPERIMENTAL)

``rhg``
-------

The pure Rust fast-path for Mercurial. See `rust/README.rst` in the Mercurial repository.

``fallback-executable``
    Path to the executable to run in a sub-process when falling back to
    another implementation of Mercurial.

``fallback-immediately``
    Fall back to ``fallback-executable`` as soon as possible, regardless of
    the `rhg.on-unsupported` configuration. Useful for debugging, for example to
    bypass `rhg` if the deault `hg` points to `rhg`.

    Note that because this requires loading the configuration, it is possible
    that `rhg` error out before being able to fall back.

``ignored-extensions``
    Controls which extensions should be ignored by `rhg`. By default, `rhg`
    triggers the `rhg.on-unsupported` behavior any unsupported extensions.
    Users can disable that behavior when they know that a given extension
    does not need support from `rhg`.

    Expects a list of extension names, or ``*`` to ignore all extensions.

    Note: ``*:<suboption>`` is also a valid extension name for this
    configuration option.
    As of this writing, the only valid "global" suboption is ``required``.

``on-unsupported``
    Controls the behavior of `rhg` when detecting unsupported features.

    Possible values are `abort` (default), `abort-silent` and `fallback`.

    ``abort``
        Print an error message describing what feature is not supported,
        and exit with code 252

    ``abort-silent``
        Silently exit with code 252

    ``fallback``
        Try running the fallback executable with the same parameters
        (and trace the fallback reason, use `RUST_LOG=trace` to see).

``share``
---------

``safe-mismatch.source-safe``
    Controls what happens when the shared repository does not use the
    share-safe mechanism but its source repository does.

    Possible values are `abort` (default), `allow`, `upgrade-abort` and
    `upgrade-allow`.

    ``abort``
        Disallows running any command and aborts
    ``allow``
        Respects the feature presence in the share source
    ``upgrade-abort``
        Tries to upgrade the share to use share-safe; if it fails, aborts
    ``upgrade-allow``
        Tries to upgrade the share; if it fails, continue by
        respecting the share source setting

    Check :hg:`help config.format.use-share-safe` for details about the
    share-safe feature.

``safe-mismatch.source-safe:verbose-upgrade``
    Display a message when upgrading, (default: True)

``safe-mismatch.source-safe.warn``
    Shows a warning on operations if the shared repository does not use
    share-safe, but the source repository does.
    (default: True)

``safe-mismatch.source-not-safe``
    Controls what happens when the shared repository uses the share-safe
    mechanism but its source does not.

    Possible values are `abort` (default), `allow`, `downgrade-abort` and
    `downgrade-allow`.

    ``abort``
        Disallows running any command and aborts
    ``allow``
        Respects the feature presence in the share source
    ``downgrade-abort``
        Tries to downgrade the share to not use share-safe; if it fails, aborts
    ``downgrade-allow``
        Tries to downgrade the share to not use share-safe;
        if it fails, continue by respecting the shared source setting

    Check :hg:`help config.format.use-share-safe` for details about the
    share-safe feature.

``safe-mismatch.source-not-safe:verbose-upgrade``
    Display a message when upgrading, (default: True)

``safe-mismatch.source-not-safe.warn``
    Shows a warning on operations if the shared repository uses share-safe,
    but the source repository does not.
    (default: True)

``storage``
-----------

Control the strategy Mercurial uses internally to store history. Options in this
category impact performance and repository size.

``revlog.issue6528.fix-incoming``
    Version 5.8 of Mercurial had a bug leading to altering the parent of file
    revision with copy information (or any other metadata) on exchange. This
    leads to the copy metadata to be overlooked by various internal logic. The
    issue was fixed in Mercurial 5.8.1.
    (See https://bz.mercurial-scm.org/show_bug.cgi?id=6528 for details)

    As a result Mercurial is now checking and fixing incoming file revisions to
    make sure there parents are in the right order. This behavior can be
    disabled by setting this option to `no`. This apply to revisions added
    through push, pull, clone and unbundle.

    To fix affected revisions that already exist within the repository, one can
    use :hg:`debug-repair-issue-6528`.

``revlog.optimize-delta-parent-choice``
    When storing a merge revision, both parents will be equally considered as
    a possible delta base. This results in better delta selection and improved
    revlog compression. This option is enabled by default.

    Turning this option off can result in large increase of repository size for
    repository with many merges.

``revlog.persistent-nodemap.mmap``
    Whether to use the Operating System "memory mapping" feature (when
    possible) to access the persistent nodemap data. This improve performance
    and reduce memory pressure.

    Default to True.

    For details on the "persistent-nodemap" feature, see:
    :hg:`help config.format.use-persistent-nodemap`.

``revlog.persistent-nodemap.slow-path``
    Control the behavior of Merucrial when using a repository with "persistent"
    nodemap with an installation of Mercurial without a fast implementation for
    the feature:

    ``allow``: Silently use the slower implementation to access the repository.
    ``warn``: Warn, but use the slower implementation to access the repository.
    ``abort``: Prevent access to such repositories. (This is the default)

    For details on the "persistent-nodemap" feature, see:
    :hg:`help config.format.use-persistent-nodemap`.

``revlog.reuse-external-delta-parent``
    Control the order in which delta parents are considered when adding new
    revisions from an external source.
    (typically: apply bundle from `hg pull` or `hg push`).

    New revisions are usually provided as a delta against other revisions. By
    default, Mercurial will try to reuse this delta first, therefore using the
    same "delta parent" as the source. Directly using delta's from the source
    reduces CPU usage and usually speeds up operation. However, in some case,
    the source might have sub-optimal delta bases and forcing their reevaluation
    is useful. For example, pushes from an old client could have sub-optimal
    delta's parent that the server want to optimize. (lack of general delta, bad
    parents, choice, lack of sparse-revlog, etc).

    This option is enabled by default. Turning it off will ensure bad delta
    parent choices from older client do not propagate to this repository, at
    the cost of a small increase in CPU consumption.

    Note: this option only control the order in which delta parents are
    considered.  Even when disabled, the existing delta from the source will be
    reused if the same delta parent is selected.

``revlog.reuse-external-delta``
    Control the reuse of delta from external source.
    (typically: apply bundle from `hg pull` or `hg push`).

    New revisions are usually provided as a delta against another revision. By
    default, Mercurial will not recompute the same delta again, trusting
    externally provided deltas. There have been rare cases of small adjustment
    to the diffing algorithm in the past. So in some rare case, recomputing
    delta provided by ancient clients can provides better results. Disabling
    this option means going through a full delta recomputation for all incoming
    revisions. It means a large increase in CPU usage and will slow operations
    down.

    This option is enabled by default. When disabled, it also disables the
    related ``storage.revlog.reuse-external-delta-parent`` option.

``revlog.zlib.level``
    Zlib compression level used when storing data into the repository. Accepted
    Value range from 1 (lowest compression) to 9 (highest compression). Zlib
    default value is 6.


``revlog.zstd.level``
    zstd compression level used when storing data into the repository. Accepted
    Value range from 1 (lowest compression) to 22 (highest compression).
    (default 3)

``server``
----------

Controls generic server settings.

``bookmarks-pushkey-compat``
    Trigger pushkey hook when being pushed bookmark updates. This config exist
    for compatibility purpose (default to True)

    If you use ``pushkey`` and ``pre-pushkey`` hooks to control bookmark
    movement we recommend you migrate them to ``txnclose-bookmark`` and
    ``pretxnclose-bookmark``.

``compressionengines``
    List of compression engines and their relative priority to advertise
    to clients.

    The order of compression engines determines their priority, the first
    having the highest priority. If a compression engine is not listed
    here, it won't be advertised to clients.

    If not set (the default), built-in defaults are used. Run
    :hg:`debuginstall` to list available compression engines and their
    default wire protocol priority.

    Older Mercurial clients only support zlib compression and this setting
    has no effect for legacy clients.

``uncompressed``
    Whether to allow clients to clone a repository using the
    uncompressed streaming protocol. This transfers about 40% more
    data than a regular clone, but uses less memory and CPU on both
    server and client. Over a LAN (100 Mbps or better) or a very fast
    WAN, an uncompressed streaming clone is a lot faster (~10x) than a
    regular clone. Over most WAN connections (anything slower than
    about 6 Mbps), uncompressed streaming is slower, because of the
    extra data transfer overhead. This mode will also temporarily hold
    the write lock while determining what data to transfer.
    (default: True)

``uncompressedallowsecret``
    Whether to allow stream clones when the repository contains secret
    changesets. (default: False)

``preferuncompressed``
    When set, clients will try to use the uncompressed streaming
    protocol. (default: False)

``disablefullbundle``
    When set, servers will refuse attempts to do pull-based clones.
    If this option is set, ``preferuncompressed`` and/or clone bundles
    are highly recommended. Partial clones will still be allowed.
    (default: False)

``streamunbundle``
    When set, servers will apply data sent from the client directly,
    otherwise it will be written to a temporary file first. This option
    effectively prevents concurrent pushes.

``pullbundle``
    When set, the server will check pullbundles.manifest for bundles
    covering the requested heads and common nodes. The first matching
    entry will be streamed to the client.

    For HTTP transport, the stream will still use zlib compression
    for older clients.

``concurrent-push-mode``
    Level of allowed race condition between two pushing clients.

    - 'strict': push is abort if another client touched the repository
      while the push was preparing.
    - 'check-related': push is only aborted if it affects head that got also
      affected while the push was preparing. (default since 5.4)

    'check-related' only takes effect for compatible clients (version
    4.3 and later). Older clients will use 'strict'.

``validate``
    Whether to validate the completeness of pushed changesets by
    checking that all new file revisions specified in manifests are
    present. (default: False)

``maxhttpheaderlen``
    Instruct HTTP clients not to send request headers longer than this
    many bytes. (default: 1024)

``bundle1``
    Whether to allow clients to push and pull using the legacy bundle1
    exchange format. (default: True)

``bundle1gd``
    Like ``bundle1`` but only used if the repository is using the
    *generaldelta* storage format. (default: True)

``bundle1.push``
    Whether to allow clients to push using the legacy bundle1 exchange
    format. (default: True)

``bundle1gd.push``
    Like ``bundle1.push`` but only used if the repository is using the
    *generaldelta* storage format. (default: True)

``bundle1.pull``
    Whether to allow clients to pull using the legacy bundle1 exchange
    format. (default: True)

``bundle1gd.pull``
    Like ``bundle1.pull`` but only used if the repository is using the
    *generaldelta* storage format. (default: True)

    Large repositories using the *generaldelta* storage format should
    consider setting this option because converting *generaldelta*
    repositories to the exchange format required by the bundle1 data
    format can consume a lot of CPU.

``bundle2.stream``
    Whether to allow clients to pull using the bundle2 streaming protocol.
    (default: True)

``zliblevel``
    Integer between ``-1`` and ``9`` that controls the zlib compression level
    for wire protocol commands that send zlib compressed output (notably the
    commands that send repository history data).

    The default (``-1``) uses the default zlib compression level, which is
    likely equivalent to ``6``. ``0`` means no compression. ``9`` means
    maximum compression.

    Setting this option allows server operators to make trade-offs between
    bandwidth and CPU used. Lowering the compression lowers CPU utilization
    but sends more bytes to clients.

    This option only impacts the HTTP server.

``zstdlevel``
    Integer between ``1`` and ``22`` that controls the zstd compression level
    for wire protocol commands. ``1`` is the minimal amount of compression and
    ``22`` is the highest amount of compression.

    The default (``3``) should be significantly faster than zlib while likely
    delivering better compression ratios.

    This option only impacts the HTTP server.

    See also ``server.zliblevel``.

``view``
    Repository filter used when exchanging revisions with the peer.

    The default view (``served``) excludes secret and hidden changesets.
    Another useful value is ``immutable`` (no draft, secret or hidden
    changesets). (EXPERIMENTAL)

``smtp``
--------

Configuration for extensions that need to send email messages.

``host``
    Host name of mail server, e.g. "mail.example.com".

``port``
    Optional. Port to connect to on mail server. (default: 465 if
    ``tls`` is smtps; 25 otherwise)

``tls``
    Optional. Method to enable TLS when connecting to mail server: starttls,
    smtps or none. (default: none)

``username``
    Optional. User name for authenticating with the SMTP server.
    (default: None)

``password``
    Optional. Password for authenticating with the SMTP server. If not
    specified, interactive sessions will prompt the user for a
    password; non-interactive sessions will fail. (default: None)

``local_hostname``
    Optional. The hostname that the sender can use to identify
    itself to the MTA.


``subpaths``
------------

Subrepository source URLs can go stale if a remote server changes name
or becomes temporarily unavailable. This section lets you define
rewrite rules of the form::

    <pattern> = <replacement>

where ``pattern`` is a regular expression matching a subrepository
source URL and ``replacement`` is the replacement string used to
rewrite it. Groups can be matched in ``pattern`` and referenced in
``replacements``. For instance::

    http://server/(.*)-hg/ = http://hg.server/\1/

rewrites ``http://server/foo-hg/`` into ``http://hg.server/foo/``.

Relative subrepository paths are first made absolute, and the
rewrite rules are then applied on the full (absolute) path. If ``pattern``
doesn't match the full path, an attempt is made to apply it on the
relative path alone. The rules are applied in definition order.

``subrepos``
------------

This section contains options that control the behavior of the
subrepositories feature. See also :hg:`help subrepos`.

Security note: auditing in Mercurial is known to be insufficient to
prevent clone-time code execution with carefully constructed Git
subrepos. It is unknown if a similar detect is present in Subversion
subrepos. Both Git and Subversion subrepos are disabled by default
out of security concerns. These subrepo types can be enabled using
the respective options below.

``allowed``
    Whether subrepositories are allowed in the working directory.

    When false, commands involving subrepositories (like :hg:`update`)
    will fail for all subrepository types.
    (default: true)

``hg:allowed``
    Whether Mercurial subrepositories are allowed in the working
    directory. This option only has an effect if ``subrepos.allowed``
    is true.
    (default: true)

``git:allowed``
    Whether Git subrepositories are allowed in the working directory.
    This option only has an effect if ``subrepos.allowed`` is true.

    See the security note above before enabling Git subrepos.
    (default: false)

``svn:allowed``
    Whether Subversion subrepositories are allowed in the working
    directory. This option only has an effect if ``subrepos.allowed``
    is true.

    See the security note above before enabling Subversion subrepos.
    (default: false)

``templatealias``
-----------------

Alias definitions for templates. See :hg:`help templates` for details.

``templates``
-------------

Use the ``[templates]`` section to define template strings.
See :hg:`help templates` for details.

``trusted``
-----------

Mercurial will not use the settings in the
``.hg/hgrc`` file from a repository if it doesn't belong to a trusted
user or to a trusted group, as various hgrc features allow arbitrary
commands to be run. This issue is often encountered when configuring
hooks or extensions for shared repositories or servers. However,
the web interface will use some safe settings from the ``[web]``
section.

This section specifies what users and groups are trusted. The
current user is always trusted. To trust everybody, list a user or a
group with name ``*``. These settings must be placed in an
*already-trusted file* to take effect, such as ``$HOME/.hgrc`` of the
user or service running Mercurial.

``users``
  Comma-separated list of trusted users.

``groups``
  Comma-separated list of trusted groups.


``ui``
------

User interface controls.

``archivemeta``
    Whether to include the .hg_archival.txt file containing meta data
    (hashes for the repository base and for tip) in archives created
    by the :hg:`archive` command or downloaded via hgweb.
    (default: True)

``askusername``
    Whether to prompt for a username when committing. If True, and
    neither ``$HGUSER`` nor ``$EMAIL`` has been specified, then the user will
    be prompted to enter a username. If no username is entered, the
    default ``USER@HOST`` is used instead.
    (default: False)

``clonebundles``
    Whether the "clone bundles" feature is enabled.

    When enabled, :hg:`clone` may download and apply a server-advertised
    bundle file from a URL instead of using the normal exchange mechanism.

    This can likely result in faster and more reliable clones.

    (default: True)

``clonebundlefallback``
    Whether failure to apply an advertised "clone bundle" from a server
    should result in fallback to a regular clone.

    This is disabled by default because servers advertising "clone
    bundles" often do so to reduce server load. If advertised bundles
    start mass failing and clients automatically fall back to a regular
    clone, this would add significant and unexpected load to the server
    since the server is expecting clone operations to be offloaded to
    pre-generated bundles. Failing fast (the default behavior) ensures
    clients don't overwhelm the server when "clone bundle" application
    fails.

    (default: False)

``clonebundleprefers``
    Defines preferences for which "clone bundles" to use.

    Servers advertising "clone bundles" may advertise multiple available
    bundles. Each bundle may have different attributes, such as the bundle
    type and compression format. This option is used to prefer a particular
    bundle over another.

    The following keys are defined by Mercurial:

    BUNDLESPEC
       A bundle type specifier. These are strings passed to :hg:`bundle -t`.
       e.g. ``gzip-v2`` or ``bzip2-v1``.

    COMPRESSION
       The compression format of the bundle. e.g. ``gzip`` and ``bzip2``.

    Server operators may define custom keys.

    Example values: ``COMPRESSION=bzip2``,
    ``BUNDLESPEC=gzip-v2, COMPRESSION=gzip``.

    By default, the first bundle advertised by the server is used.

``color``
    When to colorize output. Possible value are Boolean ("yes" or "no"), or
    "debug", or "always". (default: "yes"). "yes" will use color whenever it
    seems possible. See :hg:`help color` for details.

``commitsubrepos``
    Whether to commit modified subrepositories when committing the
    parent repository. If False and one subrepository has uncommitted
    changes, abort the commit.
    (default: False)

``debug``
    Print debugging information. (default: False)

``editor``
    The editor to use during a commit. (default: ``$EDITOR`` or ``vi``)

``fallbackencoding``
    Encoding to try if it's not possible to decode the changelog using
    UTF-8. (default: ISO-8859-1)

``graphnodetemplate``
    (DEPRECATED) Use ``command-templates.graphnode`` instead.

``ignore``
    A file to read per-user ignore patterns from. This file should be
    in the same format as a repository-wide .hgignore file. Filenames
    are relative to the repository root. This option supports hook syntax,
    so if you want to specify multiple ignore files, you can do so by
    setting something like ``ignore.other = ~/.hgignore2``. For details
    of the ignore file format, see the ``hgignore(5)`` man page.

``interactive``
    Allow to prompt the user. (default: True)

``interface``
    Select the default interface for interactive features (default: text).
    Possible values are 'text' and 'curses'.

``interface.chunkselector``
    Select the interface for change recording (e.g. :hg:`commit -i`).
    Possible values are 'text' and 'curses'.
    This config overrides the interface specified by ui.interface.

``large-file-limit``
    Largest file size that gives no memory use warning.
    Possible values are integers or 0 to disable the check.
    Value is expressed in bytes by default, one can use standard units for
    convenience (e.g. 10MB, 0.1GB, etc) (default: 10MB)

``logtemplate``
    (DEPRECATED) Use ``command-templates.log`` instead.

``merge``
    The conflict resolution program to use during a manual merge.
    For more information on merge tools see :hg:`help merge-tools`.
    For configuring merge tools see the ``[merge-tools]`` section.

``mergemarkers``
    Sets the merge conflict marker label styling. The ``detailed`` style
    uses the ``command-templates.mergemarker`` setting to style the labels.
    The ``basic`` style just uses 'local' and 'other' as the marker label.
    One of ``basic`` or ``detailed``.
    (default: ``basic``)

``mergemarkertemplate``
    (DEPRECATED) Use ``command-templates.mergemarker`` instead.

``message-output``
    Where to write status and error messages. (default: ``stdio``)

    ``channel``
      Use separate channel for structured output. (Command-server only)
    ``stderr``
      Everything to stderr.
    ``stdio``
      Status to stdout, and error to stderr.

``origbackuppath``
    The path to a directory used to store generated .orig files. If the path is
    not a directory, one will be created.  If set, files stored in this
    directory have the same name as the original file and do not have a .orig
    suffix.

``paginate``
  Control the pagination of command output (default: True). See :hg:`help pager`
  for details.

``patch``
    An optional external tool that ``hg import`` and some extensions
    will use for applying patches. By default Mercurial uses an
    internal patch utility. The external tool must work as the common
    Unix ``patch`` program. In particular, it must accept a ``-p``
    argument to strip patch headers, a ``-d`` argument to specify the
    current directory, a file name to patch, and a patch file to take
    from stdin.

    It is possible to specify a patch tool together with extra
    arguments. For example, setting this option to ``patch --merge``
    will use the ``patch`` program with its 2-way merge option.

``portablefilenames``
    Check for portable filenames. Can be ``warn``, ``ignore`` or ``abort``.
    (default: ``warn``)

    ``warn``
      Print a warning message on POSIX platforms, if a file with a non-portable
      filename is added (e.g. a file with a name that can't be created on
      Windows because it contains reserved parts like ``AUX``, reserved
      characters like ``:``, or would cause a case collision with an existing
      file).

    ``ignore``
      Don't print a warning.

    ``abort``
      The command is aborted.

    ``true``
      Alias for ``warn``.

    ``false``
      Alias for ``ignore``.

    .. container:: windows

      On Windows, this configuration option is ignored and the command aborted.

``pre-merge-tool-output-template``
    (DEPRECATED) Use ``command-template.pre-merge-tool-output`` instead.

``quiet``
    Reduce the amount of output printed.
    (default: False)

``relative-paths``
    Prefer relative paths in the UI.

``remotecmd``
    Remote command to use for clone/push/pull operations.
    (default: ``hg``)

``report_untrusted``
    Warn if a ``.hg/hgrc`` file is ignored due to not being owned by a
    trusted user or group.
    (default: True)

``slash``
    (Deprecated. Use ``slashpath`` template filter instead.)

    Display paths using a slash (``/``) as the path separator. This
    only makes a difference on systems where the default path
    separator is not the slash character (e.g. Windows uses the
    backslash character (``\``)).
    (default: False)

``statuscopies``
    Display copies in the status command.

``ssh``
    Command to use for SSH connections. (default: ``ssh``)

``ssherrorhint``
    A hint shown to the user in the case of SSH error (e.g.
    ``Please see http://company/internalwiki/ssh.html``)

``strict``
    Require exact command names, instead of allowing unambiguous
    abbreviations. (default: False)

``style``
    Name of style to use for command output.

``supportcontact``
    A URL where users should report a Mercurial traceback. Use this if you are a
    large organisation with its own Mercurial deployment process and crash
    reports should be addressed to your internal support.

``textwidth``
    Maximum width of help text. A longer line generated by ``hg help`` or
    ``hg subcommand --help`` will be broken after white space to get this
    width or the terminal width, whichever comes first.
    A non-positive value will disable this and the terminal width will be
    used. (default: 78)

``timeout``
    The timeout used when a lock is held (in seconds), a negative value
    means no timeout. (default: 600)

``timeout.warn``
    Time (in seconds) before a warning is printed about held lock. A negative
    value means no warning. (default: 0)

``traceback``
    Mercurial always prints a traceback when an unknown exception
    occurs. Setting this to True will make Mercurial print a traceback
    on all exceptions, even those recognized by Mercurial (such as
    IOError or MemoryError). (default: False)

``tweakdefaults``

    By default Mercurial's behavior changes very little from release
    to release, but over time the recommended config settings
    shift. Enable this config to opt in to get automatic tweaks to
    Mercurial's behavior over time. This config setting will have no
    effect if ``HGPLAIN`` is set or ``HGPLAINEXCEPT`` is set and does
    not include ``tweakdefaults``. (default: False)

    It currently means::

      .. tweakdefaultsmarker

``username``
    The committer of a changeset created when running "commit".
    Typically a person's name and email address, e.g. ``Fred Widget
    <fred@example.com>``. Environment variables in the
    username are expanded.

    (default: ``$EMAIL`` or ``username@hostname``. If the username in
    hgrc is empty, e.g. if the system admin set ``username =`` in the
    system hgrc, it has to be specified manually or in a different
    hgrc file)

``verbose``
    Increase the amount of output printed. (default: False)


``command-templates``
---------------------

Templates used for customizing the output of commands.

``graphnode``
    The template used to print changeset nodes in an ASCII revision graph.
    (default: ``{graphnode}``)

``log``
    Template string for commands that print changesets.

``mergemarker``
    The template used to print the commit description next to each conflict
    marker during merge conflicts. See :hg:`help templates` for the template
    format.

    Defaults to showing the hash, tags, branches, bookmarks, author, and
    the first line of the commit description.

    If you use non-ASCII characters in names for tags, branches, bookmarks,
    authors, and/or commit descriptions, you must pay attention to encodings of
    managed files. At template expansion, non-ASCII characters use the encoding
    specified by the ``--encoding`` global option, ``HGENCODING`` or other
    environment variables that govern your locale. If the encoding of the merge
    markers is different from the encoding of the merged files,
    serious problems may occur.

    Can be overridden per-merge-tool, see the ``[merge-tools]`` section.

``oneline-summary``
    A template used by `hg rebase` and other commands for showing a one-line
    summary of a commit. If the template configured here is longer than one
    line, then only the first line is used.

    The template can be overridden per command by defining a template in
    `oneline-summary.<command>`, where `<command>` can be e.g. "rebase".

``pre-merge-tool-output``
    A template that is printed before executing an external merge tool. This can
    be used to print out additional context that might be useful to have during
    the conflict resolution, such as the description of the various commits
    involved or bookmarks/tags.

    Additional information is available in the ``local`, ``base``, and ``other``
    dicts. For example: ``{local.label}``, ``{base.name}``, or
    ``{other.islink}``.


``web``
-------

Web interface configuration. The settings in this section apply to
both the builtin webserver (started by :hg:`serve`) and the script you
run through a webserver (``hgweb.cgi`` and the derivatives for FastCGI
and WSGI).

The Mercurial webserver does no authentication (it does not prompt for
usernames and passwords to validate *who* users are), but it does do
authorization (it grants or denies access for *authenticated users*
based on settings in this section). You must either configure your
webserver to do authentication for you, or disable the authorization
checks.

For a quick setup in a trusted environment, e.g., a private LAN, where
you want it to accept pushes from anybody, you can use the following
command line::

    $ hg --config web.allow-push=* --config web.push_ssl=False serve

Note that this will allow anybody to push anything to the server and
that this should not be used for public servers.

The full set of options is:

``accesslog``
    Where to output the access log. (default: stdout)

``address``
    Interface address to bind to. (default: all)

``allow-archive``
    List of archive format (bz2, gz, zip) allowed for downloading.
    (default: empty)

``allowbz2``
    (DEPRECATED) Whether to allow .tar.bz2 downloading of repository
    revisions.
    (default: False)

``allowgz``
    (DEPRECATED) Whether to allow .tar.gz downloading of repository
    revisions.
    (default: False)

``allow-pull``
    Whether to allow pulling from the repository. (default: True)

``allow-push``
    Whether to allow pushing to the repository. If empty or not set,
    pushing is not allowed. If the special value ``*``, any remote
    user can push, including unauthenticated users. Otherwise, the
    remote user must have been authenticated, and the authenticated
    user name must be present in this list. The contents of the
    allow-push list are examined after the deny_push list.

``allow_read``
    If the user has not already been denied repository access due to
    the contents of deny_read, this list determines whether to grant
    repository access to the user. If this list is not empty, and the
    user is unauthenticated or not present in the list, then access is
    denied for the user. If the list is empty or not set, then access
    is permitted to all users by default. Setting allow_read to the
    special value ``*`` is equivalent to it not being set (i.e. access
    is permitted to all users). The contents of the allow_read list are
    examined after the deny_read list.

``allowzip``
    (DEPRECATED) Whether to allow .zip downloading of repository
    revisions. This feature creates temporary files.
    (default: False)

``archivesubrepos``
    Whether to recurse into subrepositories when archiving.
    (default: False)

``baseurl``
    Base URL to use when publishing URLs in other locations, so
    third-party tools like email notification hooks can construct
    URLs. Example: ``http://hgserver/repos/``.

``cacerts``
    Path to file containing a list of PEM encoded certificate
    authority certificates. Environment variables and ``~user``
    constructs are expanded in the filename. If specified on the
    client, then it will verify the identity of remote HTTPS servers
    with these certificates.

    To disable SSL verification temporarily, specify ``--insecure`` from
    command line.

    You can use OpenSSL's CA certificate file if your platform has
    one. On most Linux systems this will be
    ``/etc/ssl/certs/ca-certificates.crt``. Otherwise you will have to
    generate this file manually. The form must be as follows::

        -----BEGIN CERTIFICATE-----
        ... (certificate in base64 PEM encoding) ...
        -----END CERTIFICATE-----
        -----BEGIN CERTIFICATE-----
        ... (certificate in base64 PEM encoding) ...
        -----END CERTIFICATE-----

``cache``
    Whether to support caching in hgweb. (default: True)

``certificate``
    Certificate to use when running :hg:`serve`.

``collapse``
    With ``descend`` enabled, repositories in subdirectories are shown at
    a single level alongside repositories in the current path. With
    ``collapse`` also enabled, repositories residing at a deeper level than
    the current path are grouped behind navigable directory entries that
    lead to the locations of these repositories. In effect, this setting
    collapses each collection of repositories found within a subdirectory
    into a single entry for that subdirectory. (default: False)

``comparisoncontext``
    Number of lines of context to show in side-by-side file comparison. If
    negative or the value ``full``, whole files are shown. (default: 5)

    This setting can be overridden by a ``context`` request parameter to the
    ``comparison`` command, taking the same values.

``contact``
    Name or email address of the person in charge of the repository.
    (default: ui.username or ``$EMAIL`` or "unknown" if unset or empty)

``csp``
    Send a ``Content-Security-Policy`` HTTP header with this value.

    The value may contain a special string ``%nonce%``, which will be replaced
    by a randomly-generated one-time use value. If the value contains
    ``%nonce%``, ``web.cache`` will be disabled, as caching undermines the
    one-time property of the nonce. This nonce will also be inserted into
    ``<script>`` elements containing inline JavaScript.

    Note: lots of HTML content sent by the server is derived from repository
    data. Please consider the potential for malicious repository data to
    "inject" itself into generated HTML content as part of your security
