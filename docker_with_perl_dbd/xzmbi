	0x2C6F,
	0x2C70,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7E,
	0x2C80,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CEB,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CF2,
	0x2CF3,
	0xA640,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA680,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA722,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77E,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA78B,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA790,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AB,
	0xA7AC,
	0xA7AD,
	0xA7AE,
	0xA7AF,
	0xA7B0,
	0xA7B1,
	0xA7B2,
	0xA7B3,
	0xA7B4,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7B9,
	0xA7BA,
	0xA7BB,
	0xA7BC,
	0xA7BD,
	0xA7BE,
	0xA7BF,
	0xA7C0,
	0xA7C1,
	0xA7C2,
	0xA7C3,
	0xA7C4,
	0xA7C5,
	0xA7C6,
	0xA7C7,
	0xA7C8,
	0xA7C9,
	0xA7CA,
	0xA7D0,
	0xA7D1,
	0xA7D6,
	0xA7D7,
	0xA7D8,
	0xA7D9,
	0xA7F5,
	0xA7F6,
	0xFF21,
	0xFF3B,
	0x10400,
	0x10428,
	0x104B0,
	0x104D4,
	0x10570,
	0x1057B,
	0x1057C,
	0x1058B,
	0x1058C,
	0x10593,
	0x10594,
	0x10596,
	0x10C80,
	0x10CB3,
	0x118A0,
	0x118C0,
	0x16E40,
	0x16E60,
	0x1E900,
	0x1E922
};

#  endif	/* EBCDIC 1047 */

#endif	/* (defined(PERL_IN_REGCOMP_C) && ! defined(PERL_IN_XSUB_RE)) */

#if defined(PERL_IN_UTF8_C)

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

/* Negative enum values indicate the need to use an auxiliary table
 * consisting of the list of enums this one expands to.  The absolute
 * values of the negative enums are indices into a table of the auxiliary
 * tables' addresses */
typedef enum {
	LC_0 = 0,
	LC_use_AUX_TABLE_1 = -1
} LC_enum;

#define HAS_LC_AUX_TABLES

static const U32 LC_AUX_TABLE_1[] = {
	0x89,
	0x307
};

static const U32 * const LC_AUX_TABLE_ptrs[] = {
	NULL,	/* Placeholder */
	LC_AUX_TABLE_1
};

/* Parallel table to the above, giving the number of elements in each table
 * pointed to */

static const U8 LC_AUX_TABLE_lengths[] = {
	0,	/* Placeholder */
	2	/* LC_AUX_TABLE_1 */
};

static const I32 Lowercase_Mapping_invmap[] = {  /* for EBCDIC 1047 */
	0,
	0x42,
	0,
	0x51,
	0,
	0x70,
	0,
	0x9C,
	0,
	0x8C,
	0,
	0x8E,
	0,
	0x8D,
	0,
	0x81,
	0,
	0x91,
	0,
	0xA2,
	0,
	0xCB,
	0,
	0xDB,
	0,
	0x101,
	0,
	0x103,
	0,
	0x105,
	0,
	0x107,
	0,
	0x109,
	0,
	0x10B,
	0,
	0x10D,
	0,
	0x10F,
	0,
	0x111,
	0,
	0x113,
	0,
	0x115,
	0,
	0x117,
	0,
	0x119,
	0,
	0x11B,
	0,
	0x11D,
	0,
	0x11F,
	0,
	0x121,
	0,
	0x123,
	0,
	0x125,
	0,
	0x127,
	0,
	0x129,
	0,
	0x12B,
	0,
	0x12D,
	0,
	0x12F,
	0,
	LC_use_AUX_TABLE_1,
	0,
	0x133,
	0,
	0x135,
	0,
	0x137,
	0,
	0x13A,
	0,
	0x13C,
	0,
	0x13E,
	0,
	0x140,
	0,
	0x142,
	0,
	0x144,
	0,
	0x146,
	0,
	0x148,
	0,
	0x14B,
	0,
	0x14D,
	0,
	0x14F,
	0,
	0x151,
	0,
	0x153,
	0,
	0x155,
	0,
	0x157,
	0,
	0x159,
	0,
	0x15B,
	0,
	0x15D,
	0,
	0x15F,
	0,
	0x161,
	0,
	0x163,
	0,
	0x165,
	0,
	0x167,
	0,
	0x169,
	0,
	0x16B,
	0,
	0x16D,
	0,
	0x16F,
	0,
	0x171,
	0,
	0x173,
	0,
	0x175,
	0,
	0x177,
	0,
	0xDF,
	0x17A,
	0,
	0x17C,
	0,
	0x17E,
	0,
	0x253,
	0x183,
	0,
	0x185,
	0,
	0x254,
	0x188,
	0,
	0x256,
	0x18C,
	0,
	0x1DD,
	0x259,
	0x25B,
	0x192,
	0,
	0x260,
	0x263,
	0,
	0x269,
	0x268,
	0x199,
	0,
	0x26F,
	0x272,
	0,
	0x275,
	0x1A1,
	0,
	0x1A3,
	0,
	0x1A5,
	0,
	0x280,
	0x1A8,
	0,
	0x283,
	0,
	0x1AD,
	0,
	0x288,
	0x1B0,
	0,
	0x28A,
	0x1B4,
	0,
	0x1B6,
	0,
	0x292,
	0x1B9,
	0,
	0x1BD,
	0,
	0x1C6,
	0x1C6,
	0,
	0x1C9,
	0x1C9,
	0,
	0x1CC,
	0x1CC,
	0,
	0x1CE,
	0,
	0x1D0,
	0,
	0x1D2,
	0,
	0x1D4,
	0,
	0x1D6,
	0,
	0x1D8,
	0,
	0x1DA,
	0,
	0x1DC,
	0,
	0x1DF,
	0,
	0x1E1,
	0,
	0x1E3,
	0,
	0x1E5,
	0,
	0x1E7,
	0,
	0x1E9,
	0,
	0x1EB,
	0,
	0x1ED,
	0,
	0x1EF,
	0,
	0x1F3,
	0x1F3,
	0,
	0x1F5,
	0,
	0x195,
	0x1BF,
	0x1F9,
	0,
	0x1FB,
	0,
	0x1FD,
	0,
	0x1FF,
	0,
	0x201,
	0,
	0x203,
	0,
	0x205,
	0,
	0x207,
	0,
	0x209,
	0,
	0x20B,
	0,
	0x20D,
	0,
	0x20F,
	0,
	0x211,
	0,
	0x213,
	0,
	0x215,
	0,
	0x217,
	0,
	0x219,
	0,
	0x21B,
	0,
	0x21D,
	0,
	0x21F,
	0,
	0x19E,
	0,
	0x223,
	0,
	0x225,
	0,
	0x227,
	0,
	0x229,
	0,
	0x22B,
	0,
	0x22D,
	0,
	0x22F,
	0,
	0x231,
	0,
	0x233,
	0,
	0x2C65,
	0x23C,
	0,
	0x19A,
	0x2C66,
	0,
	0x242,
	0,
	0x180,
	0x289,
	0x28C,
	0x247,
	0,
	0x249,
	0,
	0x24B,
	0,
	0x24D,
	0,
	0x24F,
	0,
	0x371,
	0,
	0x373,
	0,
	0x377,
	0,
	0x3F3,
	0,
	0x3AC,
	0,
	0x3AD,
	0,
	0x3CC,
	0,
	0x3CD,
	0,
	0x3B1,
	0,
	0x3C3,
	0,
	0x3D7,
	0,
	0x3D9,
	0,
	0x3DB,
	0,
	0x3DD,
	0,
	0x3DF,
	0,
	0x3E1,
	0,
	0x3E3,
	0,
	0x3E5,
	0,
	0x3E7,
	0,
	0x3E9,
	0,
	0x3EB,
	0,
	0x3ED,
	0,
	0x3EF,
	0,
	0x3B8,
	0,
	0x3F8,
	0,
	0x3F2,
	0x3FB,
	0,
	0x37B,
	0x450,
	0x430,
	0,
	0x461,
	0,
	0x463,
	0,
	0x465,
	0,
	0x467,
	0,
	0x469,
	0,
	0x46B,
	0,
	0x46D,
	0,
	0x46F,
	0,
	0x471,
	0,
	0x473,
	0,
	0x475,
	0,
	0x477,
	0,
	0x479,
	0,
	0x47B,
	0,
	0x47D,
	0,
	0x47F,
	0,
	0x481,
	0,
	0x48B,
	0,
	0x48D,
	0,
	0x48F,
	0,
	0x491,
	0,
	0x493,
	0,
	0x495,
	0,
	0x497,
	0,
	0x499,
	0,
	0x49B,
	0,
	0x49D,
	0,
	0x49F,
	0,
	0x4A1,
	0,
	0x4A3,
	0,
	0x4A5,
	0,
	0x4A7,
	0,
	0x4A9,
	0,
	0x4AB,
	0,
	0x4AD,
	0,
	0x4AF,
	0,
	0x4B1,
	0,
	0x4B3,
	0,
	0x4B5,
	0,
	0x4B7,
	0,
	0x4B9,
	0,
	0x4BB,
	0,
	0x4BD,
	0,
	0x4BF,
	0,
	0x4CF,
	0x4C2,
	0,
	0x4C4,
	0,
	0x4C6,
	0,
	0x4C8,
	0,
	0x4CA,
	0,
	0x4CC,
	0,
	0x4CE,
	0,
	0x4D1,
	0,
	0x4D3,
	0,
	0x4D5,
	0,
	0x4D7,
	0,
	0x4D9,
	0,
	0x4DB,
	0,
	0x4DD,
	0,
	0x4DF,
	0,
	0x4E1,
	0,
	0x4E3,
	0,
	0x4E5,
	0,
	0x4E7,
	0,
	0x4E9,
	0,
	0x4EB,
	0,
	0x4ED,
	0,
	0x4EF,
	0,
	0x4F1,
	0,
	0x4F3,
	0,
	0x4F5,
	0,
	0x4F7,
	0,
	0x4F9,
	0,
	0x4FB,
	0,
	0x4FD,
	0,
	0x4FF,
	0,
	0x501,
	0,
	0x503,
	0,
	0x505,
	0,
	0x507,
	0,
	0x509,
	0,
	0x50B,
	0,
	0x50D,
	0,
	0x50F,
	0,
	0x511,
	0,
	0x513,
	0,
	0x515,
	0,
	0x517,
	0,
	0x519,
	0,
	0x51B,
	0,
	0x51D,
	0,
	0x51F,
	0,
	0x521,
	0,
	0x523,
	0,
	0x525,
	0,
	0x527,
	0,
	0x529,
	0,
	0x52B,
	0,
	0x52D,
