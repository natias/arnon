
=over 3

 SV *  new_version(SV *ver)

=back

=back

=for hackers
Found in file vutil.c

=over 4

=item C<PERL_REVISION>
X<PERL_REVISION>

C<B<DEPRECATED!>>  It is planned to remove C<PERL_REVISION>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

The major number component of the perl interpreter currently being compiled or
executing.  This has been C<5> from 1993 into 2020.

Instead use one of the version comparison macros.  See C<L</PERL_VERSION_EQ>>.

=back

=for hackers
Found in file patchlevel.h

=over 4

=item C<PERL_SUBVERSION>
X<PERL_SUBVERSION>

C<B<DEPRECATED!>>  It is planned to remove C<PERL_SUBVERSION>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

The micro number component of the perl interpreter currently being compiled or
executing.  In stable releases this gives the dot release number for
maintenance updates.  In development releases this gives a tag for a snapshot
of the status at various points in the development cycle.

Instead use one of the version comparison macros.  See C<L</PERL_VERSION_EQ>>.

=back

=for hackers
Found in file patchlevel.h

=over 4

=item C<PERL_VERSION>
X<PERL_VERSION>

C<B<DEPRECATED!>>  It is planned to remove C<PERL_VERSION>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

The minor number component of the perl interpreter currently being compiled or
executing.  Between 1993 into 2020, this has ranged from 0 to 33.

Instead use one of the version comparison macros.  See C<L</PERL_VERSION_EQ>>.

=back

=for hackers
Found in file patchlevel.h

=over 4

=item C<PERL_VERSION_EQ>

=item C<PERL_VERSION_GE>

=item C<PERL_VERSION_GT>

=item C<PERL_VERSION_LE>

=item C<PERL_VERSION_LT>

=item C<PERL_VERSION_NE>
X<PERL_VERSION_EQ>X<PERL_VERSION_GE>X<PERL_VERSION_GT>X<PERL_VERSION_LE>X<PERL_VERSION_LT>X<PERL_VERSION_NE>

Returns whether or not the perl currently being compiled has the specified
relationship to the perl given by the parameters.  For example,

 #if PERL_VERSION_GT(5,24,2)
   code that will only be compiled on perls after v5.24.2
 #else
   fallback code
 #endif

Note that this is usable in making compile-time decisions

You may use the special value '*' for the final number to mean ALL possible
values for it.  Thus,

 #if PERL_VERSION_EQ(5,31,'*')

means all perls in the 5.31 series.  And

 #if PERL_VERSION_NE(5,24,'*')

means all perls EXCEPT 5.24 ones.  And

 #if PERL_VERSION_LE(5,9,'*')

is effectively

 #if PERL_VERSION_LT(5,10,0)

This means you don't have to think so much when converting from the existing
deprecated C<PERL_VERSION> to using this macro:

 #if PERL_VERSION <= 9

becomes

 #if PERL_VERSION_LE(5,9,'*')

=over 3

 bool  PERL_VERSION_EQ(const U8 major, const U8 minor,
                       const U8 patch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<prescan_version>
X<prescan_version>

Validate that a given string can be parsed as a version object, but doesn't
actually perform the parsing.  Can use either strict or lax validation rules.
Can optionally set a number of hint variables to save the parsing code
some time when tokenizing.

=over 3

 const char *  prescan_version(const char *s, bool strict,
                               const char **errstr, bool *sqv,
                               int *ssaw_decimal, int *swidth,
                               bool *salpha)

=back

=back

=for hackers
Found in file vutil.c

=over 4

=item C<scan_version>
X<scan_version>

Returns a pointer to the next character after the parsed
version string, as well as upgrading the passed in SV to
an RV.

Function must be called with an already existing SV like

    sv = newSV(0);
    s = scan_version(s, SV *sv, bool qv);

Performs some preprocessing to the string to ensure that
it has the correct characteristics of a version.  Flags the
object if it contains an underscore (which denotes this
is an alpha version).  The boolean qv denotes that the version
should be interpreted as if it had multiple decimals, even if
it doesn't.

=over 3

 const char *  scan_version(const char *s, SV *rv, bool qv)

=back

=back

=for hackers
Found in file vutil.c

=over 4

=item C<upg_version>
X<upg_version>

In-place upgrade of the supplied SV to a version object.

    SV *sv = upg_version(SV *sv, bool qv);

Returns a pointer to the upgraded SV.  Set the boolean qv if you want
to force this SV to be interpreted as an "extended" version.

=over 3

 SV *  upg_version(SV *ver, bool qv)

=back

=back

=for hackers
Found in file vutil.c

=over 4

=item C<vcmp>
X<vcmp>

Version object aware cmp.  Both operands must already have been
converted into version objects.

=over 3

 int  vcmp(SV *lhv, SV *rhv)

=back

=back

=for hackers
Found in file vutil.c

=over 4

=item C<vnormal>
X<vnormal>

Accepts a version object and returns the normalized string
representation.  Call like:

    sv = vnormal(rv);

NOTE: you can pass either the object directly or the SV
contained within the RV.

The SV returned has a refcount of 1.

=over 3

 SV *  vnormal(SV *vs)

=back

=back

=for hackers
Found in file vutil.c

=over 4

=item C<vnumify>
X<vnumify>

Accepts a version object and returns the normalized floating
point representation.  Call like:

    sv = vnumify(rv);

NOTE: you can pass either the object directly or the SV
contained within the RV.

The SV returned has a refcount of 1.

=over 3

 SV *  vnumify(SV *vs)

=back

=back

=for hackers
Found in file vutil.c

=over 4

=item C<vstringify>
X<vstringify>

In order to maintain maximum compatibility with earlier versions
of Perl, this function will return either the floating point
notation or the multiple dotted notation, depending on whether
the original version contained 1 or more dots, respectively.

The SV returned has a refcount of 1.

=over 3

 SV *  vstringify(SV *vs)

=back

=back

=for hackers
Found in file vutil.c

=over 4

=item C<vverify>
X<vverify>

Validates that the SV contains valid internal structure for a version object.
It may be passed either the version object (RV) or the hash itself (HV).  If
the structure is valid, it returns the HV.  If the structure is invalid,
it returns NULL.

    SV *hv = vverify(sv);

Note that it only confirms the bare minimum structure (so as not to get
confused by derived classes which may contain additional hash entries):

=over 4

=item * The SV is an HV or a reference to an HV

=item * The hash contains a "version" key

=item * The "version" key has a reference to an AV as its value

=back

=over 3

 SV *  vverify(SV *vs)

=back

=back

=for hackers
Found in file vutil.c

=head1 Warning and Dieing
X<WARN_ALL>X<WARN_AMBIGUOUS>X<WARN_BAREWORD>X<WARN_CLOSED>X<WARN_CLOSURE>X<WARN_DEBUGGING>X<WARN_DEPRECATED>X<WARN_DEPRECATED__APOSTROPHE_AS_PACKAGE_SEPARATOR>X<WARN_DEPRECATED__DELIMITER_WILL_BE_PAIRED>X<WARN_DEPRECATED__DOT_IN_INC>X<WARN_DEPRECATED__GOTO_CONSTRUCT>X<WARN_DEPRECATED__MISSING_IMPORT_CALLED_WITH_ARGS>X<WARN_DEPRECATED__SMARTMATCH>X<WARN_DEPRECATED__SUBSEQUENT_USE_VERSION>X<WARN_DEPRECATED__UNICODE_PROPERTY_NAME>X<WARN_DEPRECATED__VERSION_DOWNGRADE>X<WARN_DIGIT>X<WARN_EXEC>X<WARN_EXITING>X<WARN_EXPERIMENTAL>X<WARN_EXPERIMENTAL__ARGS_ARRAY_WITH_SIGNATURES>X<WARN_EXPERIMENTAL__BUILTIN>X<WARN_EXPERIMENTAL__CLASS>X<WARN_EXPERIMENTAL__DECLARED_REFS>X<WARN_EXPERIMENTAL__DEFER>X<WARN_EXPERIMENTAL__EXTRA_PAIRED_DELIMITERS>X<WARN_EXPERIMENTAL__PRIVATE_USE>X<WARN_EXPERIMENTAL__REFALIASING>X<WARN_EXPERIMENTAL__REGEX_SETS>X<WARN_EXPERIMENTAL__RE_STRICT>X<WARN_EXPERIMENTAL__TRY>X<WARN_EXPERIMENTAL__UNIPROP_WILDCARDS>X<WARN_EXPERIMENTAL__VLB>X<WARN_GLOB>X<WARN_ILLEGALPROTO>X<WARN_IMPRECISION>X<WARN_INPLACE>X<WARN_INTERNAL>X<WARN_IO>X<WARN_LAYER>X<WARN_LOCALE>X<WARN_MALLOC>X<WARN_MISC>X<WARN_MISSING>X<WARN_NEWLINE>X<WARN_NONCHAR>X<WARN_NON_UNICODE>X<WARN_NUMERIC>X<WARN_ONCE>X<WARN_OVERFLOW>X<WARN_PACK>X<WARN_PARENTHESIS>X<WARN_PIPE>X<WARN_PORTABLE>X<WARN_PRECEDENCE>X<WARN_PRINTF>X<WARN_PROTOTYPE>X<WARN_QW>X<WARN_RECURSION>X<WARN_REDEFINE>X<WARN_REDUNDANT>X<WARN_REGEXP>X<WARN_RESERVED>X<WARN_SCALAR>X<WARN_SEMICOLON>X<WARN_SEVERE>X<WARN_SHADOW>X<WARN_SIGNAL>X<WARN_SUBSTR>X<WARN_SURROGATE>X<WARN_SYNTAX>X<WARN_SYSCALLS>X<WARN_TAINT>X<WARN_THREADS>X<WARN_UNINITIALIZED>X<WARN_UNOPENED>X<WARN_UNPACK>X<WARN_UNTIE>X<WARN_UTF8>X<WARN_VOID>


In all these calls, the C<U32 wI<n>> parameters are warning category
constants.  You can see the ones currently available in
L<warnings/Category Hierarchy>, just capitalize all letters in the names
and prefix them by C<WARN_>.  So, for example, the category C<void> used in a
perl program becomes C<WARN_VOID> when used in XS code and passed to one of
the calls below.


=over 4

=item C<ckWARN>

=item C<ckWARN2>

=item C<ckWARN3>

=item C<ckWARN4>
X<ckWARN>X<ckWARN2>X<ckWARN3>X<ckWARN4>

These return a boolean as to whether or not warnings are enabled for any of
the warning category(ies) parameters:  C<w>, C<w1>, ....

Should any of the categories by default be enabled even if not within the
scope of S<C<use warnings>>, instead use the C<L</ckWARN_d>> macros.

The categories must be completely independent, one may not be subclassed from
the other.

=over 3

 bool  ckWARN (U32 w)
 bool  ckWARN2(U32 w1, U32 w2)
 bool  ckWARN3(U32 w1, U32 w2, U32 w3)
 bool  ckWARN4(U32 w1, U32 w2, U32 w3, U32 w4)

=back

=back

=for hackers
Found in file warnings.h

=over 4

=item C<ckWARN_d>

=item C<ckWARN2_d>

=item C<ckWARN3_d>

=item C<ckWARN4_d>
X<ckWARN_d>X<ckWARN2_d>X<ckWARN3_d>X<ckWARN4_d>

Like C<L</ckWARN>>, but for use if and only if the warning category(ies) is by
default enabled even if not within the scope of S<C<use warnings>>.

=over 3

 bool  ckWARN_d (U32 w)
 bool  ckWARN2_d(U32 w1, U32 w2)
 bool  ckWARN3_d(U32 w1, U32 w2, U32 w3)
 bool  ckWARN4_d(U32 w1, U32 w2, U32 w3, U32 w4)

=back

=back

=for hackers
Found in file warnings.h

=over 4

=item C<ck_warner>

=item C<ck_warner_d>
X<ck_warner>X<ck_warner_d>

If none of the warning categories given by C<err> are enabled, do nothing;
otherwise call C<L</warner>>  or C<L</warner_nocontext>> with the passed-in
parameters;.

C<err> must be one of the C<L</packWARN>>, C<packWARN2>, C<packWARN3>,
C<packWARN4> macros populated with the appropriate number of warning
categories.

The two forms differ only in that C<ck_warner_d> should be used if warnings for
any of the categories are by default enabled.

NOTE: C<ck_warner> must be explicitly called as
C<Perl_ck_warner>
with an C<aTHX_> parameter.

NOTE: C<ck_warner_d> must be explicitly called as
C<Perl_ck_warner_d>
with an C<aTHX_> parameter.

=over 3

 void  Perl_ck_warner(pTHX_ U32 err, const char *pat, ...)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<CLEAR_ERRSV>
X<CLEAR_ERRSV>

Clear the contents of C<$@>, setting it to the empty string.

This replaces any read-only SV with a fresh SV and removes any magic.

=over 3

 void  CLEAR_ERRSV()

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<croak>

=item C<croak_nocontext>
X<croak>X<croak_nocontext>

These are XS interfaces to Perl's C<die> function.

They take a sprintf-style format pattern and argument list, which are used to
generate a string message.  If the message does not end with a newline, then it
will be extended with some indication of the current location in the code, as
described for C<L</mess_sv>>.

The error message will be used as an exception, by default
returning control to the nearest enclosing C<eval>, but subject to
modification by a C<$SIG{__DIE__}> handler.  In any case, these croak
functions never return normally.

For historical reasons, if C<pat> is null then the contents of C<ERRSV>
(C<$@>) will be used as an error message or object instead of building an
error message from arguments.  If you want to throw a non-string object,
or build an error message in an SV yourself, it is preferable to use
the C<L</croak_sv>> function, which does not involve clobbering C<ERRSV>.

The two forms differ only in that C<croak_nocontext> does not take a thread
context (C<aTHX>) parameter.  It is usually preferred as it takes up fewer
bytes of code than plain C<Perl_croak>, and time is rarely a critical resource
when you are about to throw an exception.

NOTE: C<croak> must be explicitly called as
C<Perl_croak>
with an C<aTHX_> parameter.

=over 3

 void  Perl_croak     (pTHX_ const char *pat, ...)
 void  croak_nocontext(const char *pat, ...)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<croak_no_modify>
X<croak_no_modify>

This encapsulates a common reason for dying, generating terser object code than
using the generic C<Perl_croak>.  It is exactly equivalent to
C<Perl_croak(aTHX_ "%s", PL_no_modify)> (which expands to something like
"Modification of a read-only value attempted").

Less code used on exception code paths reduces CPU cache pressure.

=over 3

 void  croak_no_modify()

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<croak_sv>
X<croak_sv>

This is an XS interface to Perl's C<die> function.

C<baseex> is the error message or object.  If it is a reference, it
will be used as-is.  Otherwise it is used as a string, and if it does
not end with a newline then it will be extended with some indication of
the current location in the code, as described for L</mess_sv>.

The error message or object will be used as an exception, by default
returning control to the nearest enclosing C<eval>, but subject to
modification by a C<$SIG{__DIE__}> handler.  In any case, the C<croak_sv>
function never returns normally.

To die with a simple string message, the L</croak> function may be
more convenient.

=over 3

 void  croak_sv(SV *baseex)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<die>

=item C<die_nocontext>
X<die>X<die_nocontext>

These behave the same as L</croak>, except for the return type.
They should be used only where the C<OP *> return type is required.
They never actually return.

The two forms differ only in that C<die_nocontext> does not take a thread
context (C<aTHX>) parameter, so is used in situations where the caller doesn't
already have the thread context.

NOTE: C<die> must be explicitly called as
C<Perl_die>
with an C<aTHX_> parameter.

=over 3

 OP *  Perl_die     (pTHX_ const char *pat, ...)
 OP *  die_nocontext(const char *pat, ...)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<die_sv>
X<die_sv>

This behaves the same as L</croak_sv>, except for the return type.
It should be used only where the C<OP *> return type is required.
The function never actually returns.

=over 3

 OP *  die_sv(SV *baseex)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<ERRSV>
X<ERRSV>

Returns the SV for C<$@>, creating it if needed.

=over 3

 SV *  ERRSV

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<fatal_warner>
X<fatal_warner>

Like L</warner> except that it acts as if fatal warnings are enabled
for the warning.

If called when there are pending compilation errors this function may
return.

This is currently used to generate "used only once" fatal warnings
since the COP where the name being reported is no longer the current
COP when the warning is generated and may be useful for similar cases.

C<err> must be one of the C<L</packWARN>>, C<packWARN2>, C<packWARN3>,
C<packWARN4> macros populated with the appropriate number of warning
categories.

NOTE: C<fatal_warner> must be explicitly called as
C<Perl_fatal_warner>
with an C<aTHX_> parameter.

=over 3

 void  Perl_fatal_warner(pTHX_ U32 err, const char *pat, ...)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<packWARN>

=item C<packWARN2>

=item C<packWARN3>

=item C<packWARN4>
X<packWARN>X<packWARN2>X<packWARN3>X<packWARN4>

These macros are used to pack warning categories into a single U32 to pass to
macros and functions that take a warning category parameter.  The number of
categories to pack is given by the name, with a corresponding number of
category parameters passed.

=over 3

 U32  packWARN (U32 w1)
 U32  packWARN2(U32 w1, U32 w2)
 U32  packWARN3(U32 w1, U32 w2, U32 w3)
 U32  packWARN4(U32 w1, U32 w2, U32 w3, U32 w4)

=back

=back

=for hackers
Found in file warnings.h

=over 4

=item C<SANE_ERRSV>
X<SANE_ERRSV>

Clean up ERRSV so we can safely set it.

This replaces any read-only SV with a fresh writable copy and removes
any magic.

=over 3

 void  SANE_ERRSV()

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<vcroak>
X<vcroak>

This is an XS interface to Perl's C<die> function.

C<pat> and C<args> are a sprintf-style format pattern and encapsulated
argument list.  These are used to generate a string message.  If the
message does not end with a newline, then it will be extended with
some indication of the current location in the code, as described for
L</mess_sv>.

The error message will be used as an exception, by default
returning control to the nearest enclosing C<eval>, but subject to
modification by a C<$SIG{__DIE__}> handler.  In any case, the C<croak>
function never returns normally.

For historical reasons, if C<pat> is null then the contents of C<ERRSV>
(C<$@>) will be used as an error message or object instead of building an
error message from arguments.  If you want to throw a non-string object,
or build an error message in an SV yourself, it is preferable to use
the L</croak_sv> function, which does not involve clobbering C<ERRSV>.

=over 3

 void  vcroak(const char *pat, va_list *args)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<vfatal_warner>
X<vfatal_warner>

This is like C<L</fatal_warner>> but C<args> are an encapsulated
argument list.

=over 3

 void  vfatal_warner(U32 err, const char *pat, va_list *args)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<vwarn>
X<vwarn>

This is an XS interface to Perl's C<warn> function.

This is like C<L</warn>>, but C<args> are an encapsulated
argument list.

Unlike with L</vcroak>, C<pat> is not permitted to be null.

=over 3

 void  vwarn(const char *pat, va_list *args)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<vwarner>
X<vwarner>

This is like C<L</warner>>, but C<args> are an encapsulated argument list.

=over 3

 void  vwarner(U32 err, const char *pat, va_list *args)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<warn>

=item C<warn_nocontext>
X<warn>X<warn_nocontext>

These are XS interfaces to Perl's C<warn> function.

They take a sprintf-style format pattern and argument list, which  are used to
generate a string message.  If the message does not end with a newline, then it
will be extended with some indication of the current location in the code, as
described for C<L</mess_sv>>.

The error message or object will by default be written to standard error,
but this is subject to modification by a C<$SIG{__WARN__}> handler.

Unlike with C<L</croak>>, C<pat> is not permitted to be null.

The two forms differ only in that C<warn_nocontext> does not take a thread
context (C<aTHX>) parameter, so is used in situations where the caller doesn't
already have the thread context.

NOTE: C<warn> must be explicitly called as
C<Perl_warn>
with an C<aTHX_> parameter.

=over 3

 void  Perl_warn     (pTHX_ const char *pat, ...)
 void  warn_nocontext(const char *pat, ...)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<warner>

=item C<warner_nocontext>
X<warner>X<warner_nocontext>

These output a warning of the specified category (or categories) given by
C<err>, using the sprintf-style format pattern C<pat>, and argument list.

C<err> must be one of the C<L</packWARN>>, C<packWARN2>, C<packWARN3>,
C<packWARN4> macros populated with the appropriate number of warning
categories.  If any of the warning categories they specify is fatal, a fatal
exception is thrown.

In any event a message is generated by the pattern and arguments.  If the
message does not end with a newline, then it will be extended with some
indication of the current location in the code, as described for L</mess_sv>.

The error message or object will by default be written to standard error,
but this is subject to modification by a C<$SIG{__WARN__}> handler.

C<pat> is not permitted to be null.

The two forms differ only in that C<warner_nocontext> does not take a thread
context (C<aTHX>) parameter, so is used in situations where the caller doesn't
already have the thread context.

These functions differ from the similarly named C<L</warn>> functions, in that
the latter are for XS code to unconditionally display a warning, whereas these
are for code that may be compiling a perl program, and does extra checking to
see if the warning should be fatal.

NOTE: C<warner> must be explicitly called as
C<Perl_warner>
with an C<aTHX_> parameter.

=over 3

 void  Perl_warner     (pTHX_ U32 err, const char *pat, ...)
 void  warner_nocontext(U32 err, const char *pat, ...)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<warn_sv>
X<warn_sv>

This is an XS interface to Perl's C<warn> function.

C<baseex> is the error message or object.  If it is a reference, it
will be used as-is.  Otherwise it is used as a string, and if it does
not end with a newline then it will be extended with some indication of
the current location in the code, as described for L</mess_sv>.

The error message or object will by default be written to standard error,
but this is subject to modification by a C<$SIG{__WARN__}> handler.

To warn with a simple string message, the L</warn> function may be
more convenient.

=over 3

 void  warn_sv(SV *baseex)

=back

=back

=for hackers
Found in file util.c

=head1 XS


F<xsubpp> compiles XS code into C.  See L<perlutil/xsubpp>.

=for comment
Some variables below are flagged with 'u' because Devel::PPPort can't currently
readily test them as they spring into existence by compiling with xsubpp.


=over 4

=item C<aMY_CXT>

Described in L<perlxs>.

=back

=for hackers
Found in file dist/ExtUtils-ParseXS/lib/perlxs.pod

=over 4

=item C<_aMY_CXT>

Described in L<perlxs>.

=back

=for hackers
Found in file dist/ExtUtils-ParseXS/lib/perlxs.pod

=over 4

=item C<aMY_CXT_>

Described in L<perlxs>.

=back

=for hackers
Found in file dist/ExtUtils-ParseXS/lib/perlxs.pod

=over 4

=item C<ax>
X<ax>

Variable which is setup by C<xsubpp> to indicate the stack base offset,
used by the C<ST>, C<XSprePUSH> and C<XSRETURN> macros.  The C<dMARK> macro
must be called prior to setup the C<MARK> variable.

=over 3

 Stack_off_t  ax

=back

=back
