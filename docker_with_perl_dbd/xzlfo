
=over 3

 void  sv_force_normal_flags(SV * const sv, const U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_free>
X<sv_free>

Decrement an SV's reference count, and if it drops to zero, call
C<sv_clear> to invoke destructors and free up any memory used by
the body; finally, deallocating the SV's head itself.
Normally called via a wrapper macro C<SvREFCNT_dec>.

=over 3

 void  sv_free(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvGAMAGIC>
X<SvGAMAGIC>

Returns true if the SV has get magic or
overloading.  If either is true then
the scalar is active data, and has the potential to return a new value every
time it is accessed.  Hence you must be careful to
only read it once per user logical operation and work
with that returned value.  If neither is true then
the scalar's value cannot change unless written to.

=over 3

 U32  SvGAMAGIC(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_get_backrefs>
X<sv_get_backrefs>

NOTE: C<sv_get_backrefs> is B<experimental> and may change or be
removed without notice.

If C<sv> is the target of a weak reference then it returns the back
references structure associated with the sv; otherwise return C<NULL>.

When returning a non-null result the type of the return is relevant. If it
is an AV then the elements of the AV are the weak reference RVs which
point at this item. If it is any other type then the item itself is the
weak reference.

See also C<Perl_sv_add_backref()>, C<Perl_sv_del_backref()>,
C<Perl_sv_kill_backrefs()>

=over 3

 SV *  sv_get_backrefs(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvGETMAGIC>
X<SvGETMAGIC>

Invokes C<L</mg_get>> on an SV if it has 'get' magic.  For example, this
will call C<FETCH> on a tied variable.  As of 5.37.1, this function is
guaranteed to evaluate its argument exactly once.

=over 3

 void  SvGETMAGIC(SV *sv)

=back

=back

=for hackers
Found in file sv_inline.h

=over 4

=item C<sv_gets>
X<sv_gets>

Get a line from the filehandle and store it into the SV, optionally
appending to the currently-stored string.  If C<append> is not 0, the
line is appended to the SV instead of overwriting it.  C<append> should
be set to the byte offset that the appended string should start at
in the SV (typically, C<SvCUR(sv)> is a suitable choice).

=over 3

 char *  sv_gets(SV * const sv, PerlIO * const fp, I32 append)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvGROW>
X<SvGROW>

Expands the character buffer in the SV so that it has room for the
indicated number of bytes (remember to reserve space for an extra trailing
C<NUL> character).  Calls C<sv_grow> to perform the expansion if necessary.
Returns a pointer to the character
buffer.  SV must be of type >= C<SVt_PV>.  One
alternative is to call C<sv_grow> if you are not sure of the type of SV.

You might mistakenly think that C<len> is the number of bytes to add to the
existing size, but instead it is the total size C<sv> should be.

=over 3

 char *  SvGROW(SV* sv, STRLEN len)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvIandPOK>
X<SvIandPOK>

Returns a bool indicating whether the SV is both C<SvPOK()> and
C<SvIOK()> at the same time. Equivalent to C<SvIOK(sv) && SvPOK(sv)> but
more efficient.

=over 3

 U32  SvIandPOK(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvIandPOK_off>
X<SvIandPOK_off>

Unsets the PV and IV status of an SV in one operation. Equivalent to
C<SvIOK_off(sv); SvPK_off(v);> but more efficient.

=over 3

 void  SvIandPOK_off(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvIandPOK_on>
X<SvIandPOK_on>

Tells an SV that is a string and a number in one operation. Equivalent
to C<SvIOK_on(sv); SvPOK_on(sv);> but more efficient.

=over 3

 void  SvIandPOK_on(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_inc>

=item C<sv_inc_nomg>
X<sv_inc>X<sv_inc_nomg>

These auto-increment the value in the SV, doing string to numeric conversion
if necessary.  They both handle operator overloading.

They differ only in that C<sv_inc> performs 'get' magic; C<sv_inc_nomg> skips
any magic.

=over 3

 void  sv_inc(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_insert>

=item C<sv_insert_flags>
X<sv_insert>X<sv_insert_flags>

These insert and/or replace a string at the specified offset/length within the
SV.  Similar to the Perl C<substr()> function, with C<littlelen> bytes starting
at C<little> replacing C<len> bytes of the string in C<bigstr> starting at
C<offset>.  They handle get magic.

C<sv_insert_flags> is identical to plain C<sv_insert>, but the extra C<flags>
are passed to the C<SvPV_force_flags> operation that is internally applied to
C<bigstr>.

=over 3

 void  sv_insert      (SV * const bigstr, const STRLEN offset,
                       const STRLEN len, const char * const little,
                       const STRLEN littlelen)
 void  sv_insert_flags(SV * const bigstr, const STRLEN offset,
                       const STRLEN len, const char *little,
                       const STRLEN littlelen, const U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_2io>
X<sv_2io>

Using various gambits, try to get an IO from an SV: the IO slot if its a
GV; or the recursive result if we're an RV; or the IO slot of the symbol
named after the PV if we're a string.

'Get' magic is ignored on the C<sv> passed in, but will be called on
C<SvRV(sv)> if C<sv> is an RV.

=over 3

 IO *  sv_2io(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvIOK>
X<SvIOK>

Returns a U32 value indicating whether the SV contains an integer.

=over 3

 U32  SvIOK(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvIOK_notUV>
X<SvIOK_notUV>

Returns a boolean indicating whether the SV contains a signed integer.

=over 3

 bool  SvIOK_notUV(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvIOK_off>
X<SvIOK_off>

Unsets the IV status of an SV.

=over 3

 void  SvIOK_off(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvIOK_on>
X<SvIOK_on>

Tells an SV that it is an integer.

=over 3

 void  SvIOK_on(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvIOK_only>
X<SvIOK_only>

Tells an SV that it is an integer and disables all other C<OK> bits.

=over 3

 void  SvIOK_only(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvIOK_only_UV>
X<SvIOK_only_UV>

Tells an SV that it is an unsigned integer and disables all other C<OK> bits.

=over 3

 void  SvIOK_only_UV(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvIOKp>
X<SvIOKp>

Returns a U32 value indicating whether the SV contains an integer.  Checks
the B<private> setting.  Use C<SvIOK> instead.

=over 3

 U32  SvIOKp(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvIOK_UV>
X<SvIOK_UV>

Returns a boolean indicating whether the SV contains an integer that must be
interpreted as unsigned.  A non-negative integer whose value is within the
range of both an IV and a UV may be flagged as either C<SvUOK> or C<SvIOK>.

=over 3

 bool  SvIOK_UV(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_isa>
X<sv_isa>

Returns a boolean indicating whether the SV is blessed into the specified
class.

This does not check for subtypes or method overloading. Use C<sv_isa_sv> to
verify an inheritance relationship in the same way as the C<isa> operator by
respecting any C<isa()> method overloading; or C<sv_derived_from_sv> to test
directly on the actual object type.

=over 3

 int  sv_isa(SV *sv, const char * const name)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_isa_sv>
X<sv_isa_sv>

Returns a boolean indicating whether the SV is an object reference and is
derived from the specified class, respecting any C<isa()> method overloading
it may have. Returns false if C<sv> is not a reference to an object, or is
not derived from the specified class.

This is the function used to implement the behaviour of the C<isa> operator.

Does not invoke magic on C<sv>.

Not to be confused with the older C<sv_isa> function, which does not use an
overloaded C<isa()> method, nor will check subclassing.

=over 3

 bool  sv_isa_sv(SV *sv, SV *namesv)

=back

=back

=for hackers
Found in file universal.c

=over 4

=item C<SvIsBOOL>
X<SvIsBOOL>

Returns true if the SV is one of the special boolean constants (PL_sv_yes or
PL_sv_no), or is a regular SV whose last assignment stored a copy of one.

=over 3

 bool  SvIsBOOL(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvIsCOW>
X<SvIsCOW>

Returns a U32 value indicating whether the SV is Copy-On-Write (either shared
hash key scalars, or full Copy On Write scalars if 5.9.0 is configured for
COW).

=over 3

 U32  SvIsCOW(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvIsCOW_shared_hash>
X<SvIsCOW_shared_hash>

Returns a boolean indicating whether the SV is Copy-On-Write shared hash key
scalar.

=over 3

 bool  SvIsCOW_shared_hash(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_isobject>
X<sv_isobject>

Returns a boolean indicating whether the SV is an RV pointing to a blessed
object.  If the SV is not an RV, or if the object is not blessed, then this
will return false.

=over 3

 int  sv_isobject(SV *sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvIV>

=item C<SvIV_nomg>

=item C<SvIVx>
X<SvIV>X<SvIV_nomg>X<SvIVx>

These each coerce the given SV to IV and return it.  The returned value in many
circumstances will get stored in C<sv>'s IV slot, but not in all cases.  (Use
C<L</sv_setiv>> to make sure it does).

As of 5.37.1, all are guaranteed to evaluate C<sv> only once.

C<SvIVx> is now identical to C<SvIV>, but prior to 5.37.1, it was the only form
guaranteed to evaluate C<sv> only once.

C<SvIV_nomg> is the same as C<SvIV>, but does not perform 'get' magic.

=over 3

 IV  SvIV(SV *sv)

=back

=back

=for hackers
Found in file sv_inline.h

=over 4

=item C<sv_2iv_flags>
X<sv_2iv_flags>

Return the integer value of an SV, doing any necessary string
conversion.  If C<flags> has the C<SV_GMAGIC> bit set, does an C<mg_get()> first.
Normally used via the C<SvIV(sv)> and C<SvIVx(sv)> macros.

=over 3

 IV  sv_2iv_flags(SV * const sv, const I32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvIV_set>
X<SvIV_set>

Set the value of the IV pointer in sv to val.  It is possible to perform
the same function of this macro with an lvalue assignment to C<SvIVX>.
With future Perls, however, it will be more efficient to use
C<SvIV_set> instead of the lvalue assignment to C<SvIVX>.

=over 3

 void  SvIV_set(SV* sv, IV val)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvIVX>
X<SvIVX>

Returns the raw value in the SV's IV slot, without checks or conversions.
Only use when you are sure C<SvIOK> is true.  See also C<L</SvIV>>.

=over 3

 IV  SvIVX(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvLEN>
X<SvLEN>

Returns the size of the string buffer in the SV, not including any part
attributable to C<SvOOK>.  See C<L</SvCUR>>.

=over 3

 STRLEN  SvLEN(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_len>
X<sv_len>

Returns the length of the string in the SV.  Handles magic and type
coercion and sets the UTF8 flag appropriately.  See also C<L</SvCUR>>, which
gives raw access to the C<xpv_cur> slot.

=over 3

 STRLEN  sv_len(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvLEN_set>
X<SvLEN_set>

Set the size of the string buffer for the SV. See C<L</SvLEN>>.

=over 3

 void  SvLEN_set(SV* sv, STRLEN len)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_len_utf8>

=item C<sv_len_utf8_nomg>
X<sv_len_utf8>X<sv_len_utf8_nomg>

These return the number of characters in the string in an SV, counting wide
UTF-8 bytes as a single character.  Both handle type coercion.
They differ only in that C<sv_len_utf8> performs 'get' magic;
C<sv_len_utf8_nomg> skips any magic.

=over 3

 STRLEN  sv_len_utf8(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvLOCK>
X<SvLOCK>

Arranges for a mutual exclusion lock to be obtained on C<sv> if a suitable module
has been loaded.

=over 3

 void  SvLOCK(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_magic>
X<sv_magic>

Adds magic to an SV.  First upgrades C<sv> to type C<SVt_PVMG> if
necessary, then adds a new magic item of type C<how> to the head of the
magic list.

See C<L</sv_magicext>> (which C<sv_magic> now calls) for a description of the
handling of the C<name> and C<namlen> arguments.

You need to use C<sv_magicext> to add magic to C<SvREADONLY> SVs and also
to add more than one instance of the same C<how>.

=over 3

 void  sv_magic(SV * const sv, SV * const obj, const int how,
                const char * const name, const I32 namlen)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_magicext>
X<sv_magicext>

Adds magic to an SV, upgrading it if necessary.  Applies the
supplied C<vtable> and returns a pointer to the magic added.

Note that C<sv_magicext> will allow things that C<sv_magic> will not.
In particular, you can add magic to C<SvREADONLY> SVs, and add more than
one instance of the same C<how>.

If C<namlen> is greater than zero then a C<savepvn> I<copy> of C<name> is
stored, if C<namlen> is zero then C<name> is stored as-is and - as another
special case - if C<(name && namlen == HEf_SVKEY)> then C<name> is assumed
to contain an SV* and is stored as-is with its C<REFCNT> incremented.

(This is now used as a subroutine by C<sv_magic>.)

=over 3

 MAGIC *  sv_magicext(SV * const sv, SV * const obj, const int how,
                      const MGVTBL * const vtbl,
                      const char * const name, const I32 namlen)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvMAGIC_set>
X<SvMAGIC_set>

Set the value of the MAGIC pointer in C<sv> to val.  See C<L</SvIV_set>>.

=over 3

 void  SvMAGIC_set(SV* sv, MAGIC* val)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_2mortal>
X<sv_2mortal>

Marks an existing SV as mortal.  The SV will be destroyed "soon", either
by an explicit call to C<FREETMPS>, or by an implicit call at places such as
statement boundaries.  C<SvTEMP()> is turned on which means that the SV's
string buffer can be "stolen" if this SV is copied.  See also
C<L</sv_newmortal>> and C<L</sv_mortalcopy>>.

=over 3

 SV *  sv_2mortal(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_mortalcopy>
X<sv_mortalcopy>

Creates a new SV which is a copy of the original SV (using C<sv_setsv>).
The new SV is marked as mortal.  It will be destroyed "soon", either by an
explicit call to C<FREETMPS>, or by an implicit call at places such as
statement boundaries.  See also C<L</sv_newmortal>> and C<L</sv_2mortal>>.

=over 3

 SV *  sv_mortalcopy(SV * const oldsv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_mortalcopy_flags>
X<sv_mortalcopy_flags>

Like C<sv_mortalcopy>, but the extra C<flags> are passed to the
C<sv_setsv_flags>.

=over 3

 SV *  sv_mortalcopy_flags(SV * const oldsv, U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_newmortal>
X<sv_newmortal>

Creates a new null SV which is mortal.  The reference count of the SV is
set to 1.  It will be destroyed "soon", either by an explicit call to
C<FREETMPS>, or by an implicit call at places such as statement boundaries.
See also C<L</sv_mortalcopy>> and C<L</sv_2mortal>>.

=over 3

 SV *  sv_newmortal()

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvNIOK>
X<SvNIOK>

Returns a U32 value indicating whether the SV contains a number, integer or
double.

=over 3

 U32  SvNIOK(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvNIOK_off>
X<SvNIOK_off>

Unsets the NV/IV status of an SV.

=over 3

 void  SvNIOK_off(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvNIOKp>
X<SvNIOKp>

Returns a U32 value indicating whether the SV contains a number, integer or
double.  Checks the B<private> setting.  Use C<SvNIOK> instead.

=over 3

 U32  SvNIOKp(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvNOK>
X<SvNOK>

Returns a U32 value indicating whether the SV contains a double.

=over 3

 U32  SvNOK(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvNOK_off>
X<SvNOK_off>

Unsets the NV status of an SV.

