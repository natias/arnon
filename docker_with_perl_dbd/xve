
        # should this operation force re-delta of both parents
        self.force_re_delta_both_parents = (
            b're-delta-multibase' in upgrade_actions_names
        )

    @property
    def upgrade_actions_names(self):
        return set([a.name for a in self.upgrade_actions])

    @property
    def requirements_only(self):
        # does the operation only touches repository requirement
        return (
            self.touches_requirements
            and not self.touches_filelogs
            and not self.touches_manifests
            and not self.touches_changelog
            and not self.touches_dirstate
        )

    @property
    def touches_filelogs(self):
        for a in self.upgrade_actions:
            # in optimisations, we re-process the revlogs again
            if a.type == OPTIMISATION:
                return True
            elif a.touches_filelogs:
                return True
        for a in self.removed_actions:
            if a.touches_filelogs:
                return True
        return False

    @property
    def touches_manifests(self):
        for a in self.upgrade_actions:
            # in optimisations, we re-process the revlogs again
            if a.type == OPTIMISATION:
                return True
            elif a.touches_manifests:
                return True
        for a in self.removed_actions:
            if a.touches_manifests:
                return True
        return False

    @property
    def touches_changelog(self):
        for a in self.upgrade_actions:
            # in optimisations, we re-process the revlogs again
            if a.type == OPTIMISATION:
                return True
            elif a.touches_changelog:
                return True
        for a in self.removed_actions:
            if a.touches_changelog:
                return True
        return False

    @property
    def touches_requirements(self):
        for a in self.upgrade_actions:
            # optimisations are used to re-process revlogs and does not result
            # in a requirement being added or removed
            if a.type == OPTIMISATION:
                pass
            elif a.touches_requirements:
                return True
        for a in self.removed_actions:
            if a.touches_requirements:
                return True

    @property
    def touches_dirstate(self):
        for a in self.upgrade_actions:
            # revlog optimisations do not affect the dirstate
            if a.type == OPTIMISATION:
                pass
            elif a.touches_dirstate:
                return True
        for a in self.removed_actions:
            if a.touches_dirstate:
                return True

        return False

    def _write_labeled(self, l, label: bytes):
        """
        Utility function to aid writing of a list under one label
        """
        first = True
        for r in sorted(l):
            if not first:
                self.ui.write(b', ')
            self.ui.write(r, label=label)
            first = False

    def print_requirements(self):
        self.ui.write(_(b'requirements\n'))
        self.ui.write(_(b'   preserved: '))
        self._write_labeled(
            self._preserved_requirements, b"upgrade-repo.requirement.preserved"
        )
        self.ui.write((b'\n'))
        if self._removed_requirements:
            self.ui.write(_(b'   removed: '))
            self._write_labeled(
                self._removed_requirements, b"upgrade-repo.requirement.removed"
            )
            self.ui.write((b'\n'))
        if self._added_requirements:
            self.ui.write(_(b'   added: '))
            self._write_labeled(
                self._added_requirements, b"upgrade-repo.requirement.added"
            )
            self.ui.write((b'\n'))
        self.ui.write(b'\n')

    def print_optimisations(self):
        optimisations = [
            a for a in self.upgrade_actions if a.type == OPTIMISATION
        ]
        optimisations.sort(key=lambda a: a.name)
        if optimisations:
            self.ui.write(_(b'optimisations: '))
            self._write_labeled(
                [a.name for a in optimisations],
                b"upgrade-repo.optimisation.performed",
            )
            self.ui.write(b'\n\n')

    def print_upgrade_actions(self):
        for a in self.upgrade_actions:
            self.ui.status(b'%s\n   %s\n\n' % (a.name, a.upgrademessage))

    def print_affected_revlogs(self):
        if not self.revlogs_to_process:
            self.ui.write((b'no revlogs to process\n'))
        else:
            self.ui.write((b'processed revlogs:\n'))
            for r in sorted(self.revlogs_to_process):
                self.ui.write((b'  - %s\n' % r))
        self.ui.write((b'\n'))

    def print_unused_optimizations(self):
        for i in self.unused_optimizations:
            self.ui.status(_(b'%s\n   %s\n\n') % (i.name, i.description))

    def has_upgrade_action(self, name):
        """Check whether the upgrade operation will perform this action"""
        return name in self._upgrade_actions_names

    def print_post_op_messages(self):
        """print post upgrade operation warning messages"""
        for a in self.upgrade_actions:
            if a.postupgrademessage is not None:
                self.ui.warn(b'%s\n' % a.postupgrademessage)
        for a in self.removed_actions:
            if a.postdowngrademessage is not None:
                self.ui.warn(b'%s\n' % a.postdowngrademessage)


###  Code checking if a repository can got through the upgrade process at all. #


def requiredsourcerequirements(repo):
    """Obtain requirements required to be present to upgrade a repo.

    An upgrade will not be allowed if the repository doesn't have the
    requirements returned by this function.
    """
    return {
        # Introduced in Mercurial 0.9.2.
        requirements.STORE_REQUIREMENT,
    }


def blocksourcerequirements(repo):
    """Obtain requirements that will prevent an upgrade from occurring.

    An upgrade cannot be performed if the source repository contains a
    requirements in the returned set.
    """
    return {
        # The upgrade code does not yet support these experimental features.
        # This is an artificial limitation.
        requirements.TREEMANIFEST_REQUIREMENT,
        # This was a precursor to generaldelta and was never enabled by default.
        # It should (hopefully) not exist in the wild.
        b'parentdelta',
    }


def check_revlog_version(reqs):
    """Check that the requirements contain at least one Revlog version"""
    all_revlogs = {
        requirements.REVLOGV1_REQUIREMENT,
        requirements.REVLOGV2_REQUIREMENT,
    }
    if not all_revlogs.intersection(reqs):
        msg = _(b'cannot upgrade repository; missing a revlog version')
        raise error.Abort(msg)


def check_source_requirements(repo):
    """Ensure that no existing requirements prevent the repository upgrade"""

    check_revlog_version(repo.requirements)
    required = requiredsourcerequirements(repo)
    missingreqs = required - repo.requirements
    if missingreqs:
        msg = _(b'cannot upgrade repository; requirement missing: %s')
        missingreqs = b', '.join(sorted(missingreqs))
        raise error.Abort(msg % missingreqs)

    blocking = blocksourcerequirements(repo)
    blockingreqs = blocking & repo.requirements
    if blockingreqs:
        m = _(b'cannot upgrade repository; unsupported source requirement: %s')
        blockingreqs = b', '.join(sorted(blockingreqs))
        raise error.Abort(m % blockingreqs)
    # Upgrade should operate on the actual store, not the shared link.

    bad_share = (
        requirements.SHARED_REQUIREMENT in repo.requirements
        and requirements.SHARESAFE_REQUIREMENT not in repo.requirements
    )
    if bad_share:
        m = _(b'cannot upgrade repository; share repository without share-safe')
        h = _(b'check :hg:`help config.format.use-share-safe`')
        raise error.Abort(m, hint=h)


### Verify the validity of the planned requirement changes ####################


def supportremovedrequirements(repo):
    """Obtain requirements that can be removed during an upgrade.

    If an upgrade were to create a repository that dropped a requirement,
    the dropped requirement must appear in the returned set for the upgrade
    to be allowed.
    """
    supported = {
        requirements.SPARSEREVLOG_REQUIREMENT,
        requirements.COPIESSDC_REQUIREMENT,
        requirements.NODEMAP_REQUIREMENT,
        requirements.SHARESAFE_REQUIREMENT,
        requirements.REVLOGV2_REQUIREMENT,
        requirements.CHANGELOGV2_REQUIREMENT,
        requirements.REVLOGV1_REQUIREMENT,
        requirements.DIRSTATE_TRACKED_HINT_V1,
        requirements.DIRSTATE_V2_REQUIREMENT,
    }
    for name in compression.compengines:
        engine = compression.compengines[name]
        if engine.available() and engine.revlogheader():
            supported.add(b'exp-compression-%s' % name)
            if engine.name() == b'zstd':
                supported.add(b'revlog-compression-zstd')
    return supported


def supporteddestrequirements(repo):
    """Obtain requirements that upgrade supports in the destination.

    If the result of the upgrade would have requirements not in this set,
    the upgrade is disallowed.

    Extensions should monkeypatch this to add their custom requirements.
    """
    supported = {
        requirements.CHANGELOGV2_REQUIREMENT,
        requirements.COPIESSDC_REQUIREMENT,
        requirements.DIRSTATE_TRACKED_HINT_V1,
        requirements.DIRSTATE_V2_REQUIREMENT,
        requirements.DOTENCODE_REQUIREMENT,
        requirements.FNCACHE_REQUIREMENT,
        requirements.GENERALDELTA_REQUIREMENT,
        requirements.NODEMAP_REQUIREMENT,
        requirements.REVLOGV1_REQUIREMENT,  # allowed in case of downgrade
        requirements.REVLOGV2_REQUIREMENT,
        requirements.SHARED_REQUIREMENT,
        requirements.SHARESAFE_REQUIREMENT,
        requirements.SPARSEREVLOG_REQUIREMENT,
        requirements.STORE_REQUIREMENT,
        requirements.NARROW_REQUIREMENT,
    }
    for name in compression.compengines:
        engine = compression.compengines[name]
        if engine.available() and engine.revlogheader():
            supported.add(b'exp-compression-%s' % name)
            if engine.name() == b'zstd':
                supported.add(b'revlog-compression-zstd')
    return supported


def allowednewrequirements(repo):
    """Obtain requirements that can be added to a repository during upgrade.

    This is used to disallow proposed requirements from being added when
    they weren't present before.

    We use a list of allowed requirement additions instead of a list of known
    bad additions because the whitelist approach is safer and will prevent
    future, unknown requirements from accidentally being added.
    """
    supported = {
        requirements.DOTENCODE_REQUIREMENT,
        requirements.FNCACHE_REQUIREMENT,
        requirements.GENERALDELTA_REQUIREMENT,
        requirements.SPARSEREVLOG_REQUIREMENT,
        requirements.COPIESSDC_REQUIREMENT,
        requirements.NODEMAP_REQUIREMENT,
        requirements.SHARESAFE_REQUIREMENT,
        requirements.REVLOGV1_REQUIREMENT,
        requirements.REVLOGV2_REQUIREMENT,
        requirements.CHANGELOGV2_REQUIREMENT,
        requirements.DIRSTATE_TRACKED_HINT_V1,
        requirements.DIRSTATE_V2_REQUIREMENT,
    }
    for name in compression.compengines:
        engine = compression.compengines[name]
        if engine.available() and engine.revlogheader():
            supported.add(b'exp-compression-%s' % name)
            if engine.name() == b'zstd':
                supported.add(b'revlog-compression-zstd')
    return supported


def check_requirements_changes(repo, new_reqs):
    old_reqs = repo.requirements
    check_revlog_version(repo.requirements)
    support_removal = supportremovedrequirements(repo)
    no_remove_reqs = old_reqs - new_reqs - support_removal
    if no_remove_reqs:
        msg = _(b'cannot upgrade repository; requirement would be removed: %s')
        no_remove_reqs = b', '.join(sorted(no_remove_reqs))
        raise error.Abort(msg % no_remove_reqs)

    support_addition = allowednewrequirements(repo)
    no_add_reqs = new_reqs - old_reqs - support_addition
    if no_add_reqs:
        m = _(b'cannot upgrade repository; do not support adding requirement: ')
        no_add_reqs = b', '.join(sorted(no_add_reqs))
        raise error.Abort(m + no_add_reqs)

    supported = supporteddestrequirements(repo)
    unsupported_reqs = new_reqs - supported
    if unsupported_reqs:
        msg = _(
            b'cannot upgrade repository; do not support destination '
            b'requirement: %s'
        )
        unsupported_reqs = b', '.join(sorted(unsupported_reqs))
        raise error.Abort(msg % unsupported_reqs)
                                                                                                                                                          usr/lib/python3/dist-packages/mercurial/upgrade_utils/auto_upgrade.py                               0000644 0000000 0000000 00000021062 14355257011 024635  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # upgrade.py - functions for automatic upgrade of Mercurial repository
#
# Copyright (c) 2022-present, Pierre-Yves David
#
# This software may be used and distributed according to the terms of the
# GNU General Public License version 2 or any later version.
from ..i18n import _

from .. import (
    error,
    requirements as requirementsmod,
    scmutil,
)

from . import (
    actions,
    engine,
)


class AutoUpgradeOperation(actions.BaseOperation):
    """A limited Upgrade Operation used to run simple auto upgrade task

    (Expand it as needed in the future)
    """

    def __init__(self, req):
        super().__init__(
            new_requirements=req,
            backup_store=False,
        )


def get_share_safe_action(repo):
    """return an automatic-upgrade action for `share-safe` if applicable

    If no action is needed, return None, otherwise return a callback to upgrade
    or downgrade the repository according the configuration and repository
    format.
    """
    ui = repo.ui
    requirements = repo.requirements
    auto_upgrade_share_source = ui.configbool(
        b'format',
        b'use-share-safe.automatic-upgrade-of-mismatching-repositories',
    )
    auto_upgrade_quiet = ui.configbool(
        b'format',
        b'use-share-safe.automatic-upgrade-of-mismatching-repositories:quiet',
    )

    action = None

    if (
        auto_upgrade_share_source
        and requirementsmod.SHARED_REQUIREMENT not in requirements
    ):
        sf_config = ui.configbool(b'format', b'use-share-safe')
        sf_local = requirementsmod.SHARESAFE_REQUIREMENT in requirements
        if sf_config and not sf_local:
            msg = _(
                b"automatically upgrading repository to the `share-safe`"
                b" feature\n"
            )
            hint = b"(see `hg help config.format.use-share-safe` for details)\n"

            def action():
                if not (ui.quiet or auto_upgrade_quiet):
                    ui.write_err(msg)
                    ui.write_err(hint)
                requirements.add(requirementsmod.SHARESAFE_REQUIREMENT)
                scmutil.writereporequirements(repo, requirements)

        elif sf_local and not sf_config:
            msg = _(
                b"automatically downgrading repository from the `share-safe`"
                b" feature\n"
            )
            hint = b"(see `hg help config.format.use-share-safe` for details)\n"

            def action():
                if not (ui.quiet or auto_upgrade_quiet):
                    ui.write_err(msg)
                    ui.write_err(hint)
                requirements.discard(requirementsmod.SHARESAFE_REQUIREMENT)
                scmutil.writereporequirements(repo, requirements)

    return action


def get_tracked_hint_action(repo):
    """return an automatic-upgrade action for `tracked-hint` if applicable

    If no action is needed, return None, otherwise return a callback to upgrade
    or downgrade the repository according the configuration and repository
    format.
    """
    ui = repo.ui
    requirements = set(repo.requirements)
    auto_upgrade_tracked_hint = ui.configbool(
        b'format',
        b'use-dirstate-tracked-hint.automatic-upgrade-of-mismatching-repositories',
    )
    auto_upgrade_quiet = ui.configbool(
        b'format',
        b'use-dirstate-tracked-hint.automatic-upgrade-of-mismatching-repositories:quiet',
    )

    action = None

    if auto_upgrade_tracked_hint:
        th_config = ui.configbool(b'format', b'use-dirstate-tracked-hint')
        th_local = requirementsmod.DIRSTATE_TRACKED_HINT_V1 in requirements
        if th_config and not th_local:
            msg = _(
                b"automatically upgrading repository to the `tracked-hint`"
                b" feature\n"
            )
            hint = b"(see `hg help config.format.use-dirstate-tracked-hint` for details)\n"

            def action():
                if not (ui.quiet or auto_upgrade_quiet):
                    ui.write_err(msg)
                    ui.write_err(hint)
                requirements.add(requirementsmod.DIRSTATE_TRACKED_HINT_V1)
                op = AutoUpgradeOperation(requirements)
                engine.upgrade_tracked_hint(ui, repo, op, add=True)

        elif th_local and not th_config:
            msg = _(
                b"automatically downgrading repository from the `tracked-hint`"
                b" feature\n"
            )
            hint = b"(see `hg help config.format.use-dirstate-tracked-hint` for details)\n"

            def action():
                if not (ui.quiet or auto_upgrade_quiet):
                    ui.write_err(msg)
                    ui.write_err(hint)
                requirements.discard(requirementsmod.DIRSTATE_TRACKED_HINT_V1)
                op = AutoUpgradeOperation(requirements)
                engine.upgrade_tracked_hint(ui, repo, op, add=False)

    return action


def get_dirstate_v2_action(repo):
    """return an automatic-upgrade action for `dirstate-v2` if applicable

    If no action is needed, return None, otherwise return a callback to upgrade
    or downgrade the repository according the configuration and repository
    format.
    """
    ui = repo.ui
    requirements = set(repo.requirements)
    auto_upgrade_dv2 = ui.configbool(
        b'format',
        b'use-dirstate-v2.automatic-upgrade-of-mismatching-repositories',
    )
    auto_upgrade_dv2_quiet = ui.configbool(
        b'format',
        b'use-dirstate-v2.automatic-upgrade-of-mismatching-repositories:quiet',
    )

    action = None

    if auto_upgrade_dv2:
        d2_config = ui.configbool(b'format', b'use-dirstate-v2')
        d2_local = requirementsmod.DIRSTATE_V2_REQUIREMENT in requirements
        if d2_config and not d2_local:
            msg = _(
                b"automatically upgrading repository to the `dirstate-v2`"
                b" feature\n"
            )
            hint = (
                b"(see `hg help config.format.use-dirstate-v2` for details)\n"
            )

            def action():
                if not (ui.quiet or auto_upgrade_dv2_quiet):
                    ui.write_err(msg)
                    ui.write_err(hint)
                requirements.add(requirementsmod.DIRSTATE_V2_REQUIREMENT)
                fake_op = AutoUpgradeOperation(requirements)
                engine.upgrade_dirstate(repo.ui, repo, fake_op, b'v1', b'v2')

        elif d2_local and not d2_config:
            msg = _(
                b"automatically downgrading repository from the `dirstate-v2`"
                b" feature\n"
            )
            hint = (
                b"(see `hg help config.format.use-dirstate-v2` for details)\n"
            )

            def action():
                if not (ui.quiet or auto_upgrade_dv2_quiet):
                    ui.write_err(msg)
                    ui.write_err(hint)
                requirements.discard(requirementsmod.DIRSTATE_V2_REQUIREMENT)
                fake_op = AutoUpgradeOperation(requirements)
                engine.upgrade_dirstate(repo.ui, repo, fake_op, b'v2', b'v1')

    return action


AUTO_UPGRADE_ACTIONS = [
    get_dirstate_v2_action,
    get_share_safe_action,
    get_tracked_hint_action,
]


def may_auto_upgrade(repo, maker_func):
    """potentially perform auto-upgrade and return the final repository to use

    Auto-upgrade are "quick" repository upgrade that might automatically be run
    by "any" repository access. See `hg help config.format` for automatic
    upgrade documentation.

    note: each relevant upgrades are done one after the other for simplicity.
    This avoid having repository is partially inconsistent state while
    upgrading.

    repo: the current repository instance
    maker_func: a factory function that can recreate a repository after an upgrade
    """
    clear = False

    loop = 0

    try:
        while not clear:
            loop += 1
            if loop > 100:
                # XXX basic protection against infinite loop, make it better.
                raise error.ProgrammingError("Too many auto upgrade loops")
            clear = True
            for get_action in AUTO_UPGRADE_ACTIONS:
                action = get_action(repo)
                if action is not None:
                    clear = False
                    with repo.wlock(wait=False), repo.lock(wait=False):
                        action = get_action(repo)
                        if action is not None:
                            action()
                        repo = maker_func()
    except error.LockError:
        # if we cannot get the lock, ignore the auto-upgrade attemps and
        # proceed. We might want to make this behavior configurable in the
        # future.
        pass

    return repo
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              usr/lib/python3/dist-packages/mercurial/upgrade_utils/engine.py                                     0000644 0000000 0000000 00000053553 14355257011 023435  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # upgrade.py - functions for in place upgrade of Mercurial repository
#
# Copyright (c) 2016-present, Gregory Szorc
#
# This software may be used and distributed according to the terms of the
# GNU General Public License version 2 or any later version.


import stat

from ..i18n import _
from ..pycompat import getattr
from .. import (
    changelog,
    error,
    filelog,
    manifest,
    metadata,
    pycompat,
    requirements,
    scmutil,
    store,
    util,
    vfs as vfsmod,
)
from ..revlogutils import (
    constants as revlogconst,
    flagutil,
    nodemap,
    sidedata as sidedatamod,
)
from . import actions as upgrade_actions


def get_sidedata_helpers(srcrepo, dstrepo):
    use_w = srcrepo.ui.configbool(b'experimental', b'worker.repository-upgrade')
    sequential = pycompat.iswindows or not use_w
    if not sequential:
        srcrepo.register_sidedata_computer(
            revlogconst.KIND_CHANGELOG,
            sidedatamod.SD_FILES,
            (sidedatamod.SD_FILES,),
            metadata._get_worker_sidedata_adder(srcrepo, dstrepo),
            flagutil.REVIDX_HASCOPIESINFO,
            replace=True,
        )
    return sidedatamod.get_sidedata_helpers(srcrepo, dstrepo._wanted_sidedata)


def _revlogfrompath(repo, rl_type, path):
    """Obtain a revlog from a repo path.

    An instance of the appropriate class is returned.
    """
    if rl_type & store.FILEFLAGS_CHANGELOG:
        return changelog.changelog(repo.svfs)
    elif rl_type & store.FILEFLAGS_MANIFESTLOG:
        mandir = b''
        if b'/' in path:
            mandir = path.rsplit(b'/', 1)[0]
        return manifest.manifestrevlog(
            repo.nodeconstants, repo.svfs, tree=mandir
        )
    else:
        # drop the extension and the `data/` prefix
        path_part = path.rsplit(b'.', 1)[0].split(b'/', 1)
        if len(path_part) < 2:
            msg = _(b'cannot recognize revlog from filename: %s')
            msg %= path
            raise error.Abort(msg)
        path = path_part[1]
        return filelog.filelog(repo.svfs, path)


def _copyrevlog(tr, destrepo, oldrl, rl_type, unencodedname):
    """copy all relevant files for `oldrl` into `destrepo` store

    Files are copied "as is" without any transformation. The copy is performed
    without extra checks. Callers are responsible for making sure the copied
    content is compatible with format of the destination repository.
    """
    oldrl = getattr(oldrl, '_revlog', oldrl)
    newrl = _revlogfrompath(destrepo, rl_type, unencodedname)
    newrl = getattr(newrl, '_revlog', newrl)

    oldvfs = oldrl.opener
    newvfs = newrl.opener
    oldindex = oldvfs.join(oldrl._indexfile)
    newindex = newvfs.join(newrl._indexfile)
    olddata = oldvfs.join(oldrl._datafile)
    newdata = newvfs.join(newrl._datafile)

    with newvfs(newrl._indexfile, b'w'):
        pass  # create all the directories

    util.copyfile(oldindex, newindex)
    copydata = oldrl.opener.exists(oldrl._datafile)
    if copydata:
        util.copyfile(olddata, newdata)

    if rl_type & store.FILEFLAGS_FILELOG:
        destrepo.svfs.fncache.add(unencodedname)
        if copydata:
            destrepo.svfs.fncache.add(unencodedname[:-2] + b'.d')


UPGRADE_CHANGELOG = b"changelog"
UPGRADE_MANIFEST = b"manifest"
UPGRADE_FILELOGS = b"all-filelogs"

UPGRADE_ALL_REVLOGS = frozenset(
    [UPGRADE_CHANGELOG, UPGRADE_MANIFEST, UPGRADE_FILELOGS]
)


def matchrevlog(revlogfilter, rl_type):
    """check if a revlog is selected for cloning.

    In other words, are there any updates which need to be done on revlog
    or it can be blindly copied.

    The store entry is checked against the passed filter"""
    if rl_type & store.FILEFLAGS_CHANGELOG:
        return UPGRADE_CHANGELOG in revlogfilter
    elif rl_type & store.FILEFLAGS_MANIFESTLOG:
        return UPGRADE_MANIFEST in revlogfilter
    assert rl_type & store.FILEFLAGS_FILELOG
    return UPGRADE_FILELOGS in revlogfilter


def _perform_clone(
    ui,
    dstrepo,
    tr,
    old_revlog,
    rl_type,
    unencoded,
    upgrade_op,
    sidedata_helpers,
    oncopiedrevision,
):
    """returns the new revlog object created"""
    newrl = None
    if matchrevlog(upgrade_op.revlogs_to_process, rl_type):
        ui.note(
            _(b'cloning %d revisions from %s\n') % (len(old_revlog), unencoded)
        )
        newrl = _revlogfrompath(dstrepo, rl_type, unencoded)
        old_revlog.clone(
            tr,
            newrl,
            addrevisioncb=oncopiedrevision,
            deltareuse=upgrade_op.delta_reuse_mode,
            forcedeltabothparents=upgrade_op.force_re_delta_both_parents,
            sidedata_helpers=sidedata_helpers,
        )
    else:
        msg = _(b'blindly copying %s containing %i revisions\n')
        ui.note(msg % (unencoded, len(old_revlog)))
        _copyrevlog(tr, dstrepo, old_revlog, rl_type, unencoded)

        newrl = _revlogfrompath(dstrepo, rl_type, unencoded)
    return newrl


def _clonerevlogs(
    ui,
    srcrepo,
    dstrepo,
    tr,
    upgrade_op,
):
    """Copy revlogs between 2 repos."""
    revcount = 0
    srcsize = 0
    srcrawsize = 0
    dstsize = 0
    fcount = 0
    frevcount = 0
    fsrcsize = 0
    frawsize = 0
    fdstsize = 0
    mcount = 0
    mrevcount = 0
    msrcsize = 0
    mrawsize = 0
    mdstsize = 0
    crevcount = 0
    csrcsize = 0
    crawsize = 0
    cdstsize = 0

    alldatafiles = list(srcrepo.store.walk())
    # mapping of data files which needs to be cloned
    # key is unencoded filename
    # value is revlog_object_from_srcrepo
    manifests = {}
    changelogs = {}
    filelogs = {}

    # Perform a pass to collect metadata. This validates we can open all
    # source files and allows a unified progress bar to be displayed.
    for rl_type, unencoded, size in alldatafiles:
        if not rl_type & store.FILEFLAGS_REVLOG_MAIN:
            continue

        # the store.walk function will wrongly pickup transaction backup and
        # get confused. As a quick fix for 5.9 release, we ignore those.
        # (this is not a module constants because it seems better to keep the
        # hack together)
        skip_undo = (
            b'undo.backup.00changelog.i',
            b'undo.backup.00manifest.i',
        )
        if unencoded in skip_undo:
            continue

        rl = _revlogfrompath(srcrepo, rl_type, unencoded)

        info = rl.storageinfo(
            exclusivefiles=True,
            revisionscount=True,
            trackedsize=True,
            storedsize=True,
        )

        revcount += info[b'revisionscount'] or 0
        datasize = info[b'storedsize'] or 0
        rawsize = info[b'trackedsize'] or 0

        srcsize += datasize
        srcrawsize += rawsize

        # This is for the separate progress bars.
        if rl_type & store.FILEFLAGS_CHANGELOG:
            changelogs[unencoded] = rl_type
            crevcount += len(rl)
            csrcsize += datasize
            crawsize += rawsize
        elif rl_type & store.FILEFLAGS_MANIFESTLOG:
            manifests[unencoded] = rl_type
            mcount += 1
            mrevcount += len(rl)
            msrcsize += datasize
            mrawsize += rawsize
        elif rl_type & store.FILEFLAGS_FILELOG:
            filelogs[unencoded] = rl_type
            fcount += 1
            frevcount += len(rl)
            fsrcsize += datasize
            frawsize += rawsize
        else:
            error.ProgrammingError(b'unknown revlog type')

    if not revcount:
        return

    ui.status(
        _(
            b'migrating %d total revisions (%d in filelogs, %d in manifests, '
            b'%d in changelog)\n'
        )
        % (revcount, frevcount, mrevcount, crevcount)
    )
    ui.status(
        _(b'migrating %s in store; %s tracked data\n')
        % ((util.bytecount(srcsize), util.bytecount(srcrawsize)))
    )

    # Used to keep track of progress.
    progress = None

    def oncopiedrevision(rl, rev, node):
        progress.increment()

    sidedata_helpers = get_sidedata_helpers(srcrepo, dstrepo)

    # Migrating filelogs
    ui.status(
        _(
            b'migrating %d filelogs containing %d revisions '
            b'(%s in store; %s tracked data)\n'
        )
        % (
            fcount,
            frevcount,
            util.bytecount(fsrcsize),
            util.bytecount(frawsize),
        )
    )
    progress = srcrepo.ui.makeprogress(_(b'file revisions'), total=frevcount)
    for unencoded, rl_type in sorted(filelogs.items()):
        oldrl = _revlogfrompath(srcrepo, rl_type, unencoded)

        newrl = _perform_clone(
            ui,
            dstrepo,
            tr,
            oldrl,
            rl_type,
            unencoded,
            upgrade_op,
            sidedata_helpers,
            oncopiedrevision,
        )
        info = newrl.storageinfo(storedsize=True)
        fdstsize += info[b'storedsize'] or 0
    ui.status(
        _(
            b'finished migrating %d filelog revisions across %d '
            b'filelogs; change in size: %s\n'
        )
        % (frevcount, fcount, util.bytecount(fdstsize - fsrcsize))
    )

    # Migrating manifests
    ui.status(
        _(
            b'migrating %d manifests containing %d revisions '
            b'(%s in store; %s tracked data)\n'
        )
        % (
            mcount,
            mrevcount,
            util.bytecount(msrcsize),
            util.bytecount(mrawsize),
        )
    )
    if progress:
        progress.complete()
    progress = srcrepo.ui.makeprogress(
        _(b'manifest revisions'), total=mrevcount
    )
    for unencoded, rl_type in sorted(manifests.items()):
        oldrl = _revlogfrompath(srcrepo, rl_type, unencoded)
        newrl = _perform_clone(
            ui,
            dstrepo,
            tr,
            oldrl,
            rl_type,
            unencoded,
            upgrade_op,
            sidedata_helpers,
            oncopiedrevision,
        )
        info = newrl.storageinfo(storedsize=True)
        mdstsize += info[b'storedsize'] or 0
    ui.status(
        _(
            b'finished migrating %d manifest revisions across %d '
            b'manifests; change in size: %s\n'
        )
        % (mrevcount, mcount, util.bytecount(mdstsize - msrcsize))
    )

    # Migrating changelog
    ui.status(
        _(
            b'migrating changelog containing %d revisions '
            b'(%s in store; %s tracked data)\n'
        )
        % (
            crevcount,
            util.bytecount(csrcsize),
            util.bytecount(crawsize),
        )
    )
    if progress:
        progress.complete()
    progress = srcrepo.ui.makeprogress(
        _(b'changelog revisions'), total=crevcount
    )
    for unencoded, rl_type in sorted(changelogs.items()):
        oldrl = _revlogfrompath(srcrepo, rl_type, unencoded)
        newrl = _perform_clone(
            ui,
            dstrepo,
            tr,
            oldrl,
            rl_type,
            unencoded,
            upgrade_op,
            sidedata_helpers,
            oncopiedrevision,
        )
        info = newrl.storageinfo(storedsize=True)
        cdstsize += info[b'storedsize'] or 0
    progress.complete()
