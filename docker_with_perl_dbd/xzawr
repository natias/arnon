	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E130,
	0x1E137,
	0x1E2AE,
	0x1E2AF,
	0x1E2EC,
	0x1E2F0,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0x1F1E6,
	0x1F200,
	0x1F3FB,
	0x1F400,
	0xE0000,
	0xE1000
};

#  endif	/* EBCDIC 037 */

static const UV UNI_GEOMETRICSHAPES_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x25A0,
	0x2600
};

static const UV UNI_GEOMETRICSHAPESEXT_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F780,
	0x1F800
};

static const UV UNI_GEOR_invlist[] = {  /* for all charsets */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1100,
	0x1C90,
	0x1CBB,
	0x1CBD,
	0x1CC0,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E
};

static const UV UNI_GEORGIANEXT_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1C90,
	0x1CC0
};

static const UV UNI_GEORGIANSUP_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D00,
	0x2D30
};

static const UV UNI_GLAG_invlist[] = {  /* for all charsets */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x484,
	0x485,
	0x487,
	0x488,
	0x2C00,
	0x2C60,
	0x2E43,
	0x2E44,
	0xA66F,
	0xA670,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B
};

static const UV UNI_GLAGOLITICSUP_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1E000,
	0x1E030
};

static const UV UNI_GONG_invlist[] = {  /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x964,
	0x966,
	0x11D60,
	0x11D66,
	0x11D67,
	0x11D69,
	0x11D6A,
	0x11D8F,
	0x11D90,
	0x11D92,
	0x11D93,
	0x11D99,
	0x11DA0,
	0x11DAA
};

static const UV UNI_GONM_invlist[] = {  /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x964,
	0x966,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A
};

static const UV UNI_GOTH_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10330,
	0x1034B
};

static const UV UNI_GRAN_invlist[] = {  /* for all charsets */
	51,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0xBE6,
	0xBF4,
	0x1CD0,
	0x1CD1,
	0x1CD2,
	0x1CD4,
	0x1CF2,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x20F0,
	0x20F1,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133B,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11FD0,
	0x11FD2,
	0x11FD3,
	0x11FD4
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_GRBASE_invlist[] = {  /* for ASCII/Latin1 */
	1723,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x7F,
	0xA0,
	0xAD,
	0xAE,
	0x300,
	0x370,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x483,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x58B,
	0x58D,
	0x590,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5D0,
	0x5EB,
	0x5EF,
	0x5F5,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DE,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70E,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7C0,
	0x7EB,
	0x7F4,
	0x7FB,
	0x7FE,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x830,
	0x83F,
	0x840,
	0x859,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x870,
	0x88F,
	0x8A0,
	0x8CA,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9BF,
	0x9C1,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9E6,
	0x9FE,
	0xA03,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3E,
	0xA41,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA77,
	0xA83,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xAC1,
	0xAC9,
	0xACA,
	0xACB,
	0xACD,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAE6,
	0xAF2,
	0xAF9,
	0xAFA,
	0xB02,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB40,
	0xB41,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB66,
	0xB78,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBF,
	0xBC0,
	0xBC1,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD0,
	0xBD1,
	0xBE6,
	0xBFB,
	0xC01,
	0xC04,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC41,
	0xC45,
	0xC58,
	0xC5B,
	0xC5D,
	0xC5E,
	0xC60,
	0xC62,
	0xC66,
	0xC70,
	0xC77,
	0xC81,
	0xC82,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC2,
	0xCC3,
	0xCC5,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xCDD,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD02,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD3F,
	0xD41,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD4E,
	0xD50,
	0xD54,
	0xD57,
	0xD58,
	0xD62,
	0xD66,
	0xD80,
	0xD82,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDD0,
	0xDD2,
	0xDD8,
	0xDDF,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE3F,
	0xE47,
	0xE4F,
	0xE5C,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE86,
	0xE8B,
	0xE8C,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF48,
	0xF49,
	0xF6D,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xFBE,
	0xFC6,
	0xFC7,
	0xFCD,
	0xFCE,
	0xFDB,
	0x1000,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1360,
	0x137D,
	0x1380,
	0x139A,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1400,
	0x169D,
	0x16A0,
	0x16F9,
	0x1700,
	0x1712,
	0x1715,
	0x1716,
	0x171F,
	0x1732,
	0x1734,
	0x1737,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17E0,
	0x17EA,
	0x17F0,
	0x17FA,
	0x1800,
	0x180B,
	0x1810,
	0x181A,
	0x1820,
	0x1879,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1923,
	0x1927,
	0x1929,
	0x192C,
	0x1930,
	0x1932,
	0x1933,
	0x1939,
	0x1940,
	0x1941,
	0x1944,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1E,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1B04,
	0x1B34,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B4D,
	0x1B50,
	0x1B6B,
	0x1B74,
	0x1B7F,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1BF4,
	0x1BFC,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C89,
	0x1C90,
	0x1CBB,
	0x1CBD,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1CFB,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFF,
	0x2000,
	0x200B,
	0x2010,
	0x2028,
	0x202F,
	0x2060,
	0x2070,
	0x2072,
	0x2074,
	0x208F,
	0x2090,
	0x209D,
	0x20A0,
	0x20C1,
	0x2100,
	0x218C,
	0x2190,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B97,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2CF9,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E00,
	0x2E5E,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3000,
	0x302A,
	0x3030,
	0x3040,
	0x3041,
	0x3097,
	0x309B,
	0x3100,
	0x3105,
	0x3130,
	0x3131,
	0x318F,
	0x3190,
	0x31E4,
	0x31F0,
	0x321F,
	0x3220,
	0xA48D,
	0xA490,
