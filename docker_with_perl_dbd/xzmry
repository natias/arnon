#     define get_quantifier_value(a,b,c)        S_get_quantifier_value(aTHX_ a,b,c)
#     define grok_bslash_N(a,b,c,d,e,f,g)       S_grok_bslash_N(aTHX_ a,b,c,d,e,f,g)
#     define handle_named_backref(a,b,c,d)      S_handle_named_backref(aTHX_ a,b,c,d)
#     define handle_names_wildcard(a,b,c,d)     S_handle_names_wildcard(aTHX_ a,b,c,d)
#     define handle_possible_posix(a,b,c,d,e)   S_handle_possible_posix(aTHX_ a,b,c,d,e)
#     define handle_regex_sets(a,b,c,d)         S_handle_regex_sets(aTHX_ a,b,c,d)
#     define handle_user_defined_property(a,b,c,d,e,f,g,h,i,j) S_handle_user_defined_property(aTHX_ a,b,c,d,e,f,g,h,i,j)
#     define is_ssc_worth_it                    S_is_ssc_worth_it
#     define nextchar(a)                        S_nextchar(aTHX_ a)
#     define optimize_regclass(a,b,c,d,e,f,g,h,i,j) S_optimize_regclass(aTHX_ a,b,c,d,e,f,g,h,i,j)
#     define output_posix_warnings(a,b)         S_output_posix_warnings(aTHX_ a,b)
#     define parse_lparen_question_flags(a)     S_parse_lparen_question_flags(aTHX_ a)
#     define parse_uniprop_string(a,b,c,d,e,f,g,h,i,j) S_parse_uniprop_string(aTHX_ a,b,c,d,e,f,g,h,i,j)
#     define reg(a,b,c,d)                       S_reg(aTHX_ a,b,c,d)
#     define reg1node(a,b,c)                    S_reg1node(aTHX_ a,b,c)
#     define reg2node(a,b,c,d)                  S_reg2node(aTHX_ a,b,c,d)
#     define reg_la_NOTHING(a,b,c)              S_reg_la_NOTHING(aTHX_ a,b,c)
#     define reg_la_OPFAIL(a,b,c)               S_reg_la_OPFAIL(aTHX_ a,b,c)
#     define reg_node(a,b)                      S_reg_node(aTHX_ a,b)
#     define reg_scan_name(a,b)                 S_reg_scan_name(aTHX_ a,b)
#     define reg_skipcomment                    S_reg_skipcomment
#     define regatom(a,b,c)                     S_regatom(aTHX_ a,b,c)
#     define regbranch(a,b,c,d)                 S_regbranch(aTHX_ a,b,c,d)
#     define regclass(a,b,c,d,e,f,g,h,i)        S_regclass(aTHX_ a,b,c,d,e,f,g,h,i)
#     define regex_set_precedence               S_regex_set_precedence
#     define reginsert(a,b,c,d)                 S_reginsert(aTHX_ a,b,c,d)
#     define regnode_guts(a,b)                  S_regnode_guts(aTHX_ a,b)
#     define regpiece(a,b,c)                    S_regpiece(aTHX_ a,b,c)
#     define regpnode(a,b,c)                    S_regpnode(aTHX_ a,b,c)
#     define regtail(a,b,c,d)                   S_regtail(aTHX_ a,b,c,d)
#     define set_regex_pv(a,b)                  S_set_regex_pv(aTHX_ a,b)
#     define skip_to_be_ignored_text(a,b,c)     S_skip_to_be_ignored_text(aTHX_ a,b,c)
#     define ssc_finalize(a,b)                  S_ssc_finalize(aTHX_ a,b)
#     if defined(DEBUGGING)
#       define regnode_guts_debug(a,b,c)        S_regnode_guts_debug(aTHX_ a,b,c)
#       define regtail_study(a,b,c,d)           S_regtail_study(aTHX_ a,b,c,d)
#       if defined(ENABLE_REGEX_SETS_DEBUGGING)
#         define dump_regex_sets_structures(a,b,c,d) S_dump_regex_sets_structures(aTHX_ a,b,c,d)
#       endif
#     endif
#   endif /* defined(PERL_IN_REGCOMP_C) */
#   if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGCOMP_INVLIST_C)
#     define populate_bitmap_from_invlist(a,b,c,d) Perl_populate_bitmap_from_invlist(aTHX_ a,b,c,d)
#     define populate_invlist_from_bitmap(a,b,c,d) Perl_populate_invlist_from_bitmap(aTHX_ a,b,c,d)
#   endif
#   if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C) || \
       defined(PERL_IN_TOKE_C)
#     define is_grapheme(a,b,c,d)               Perl_is_grapheme(aTHX_ a,b,c,d)
#   endif
#   if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C) || \
       defined(PERL_IN_UTF8_C)
#     define _to_fold_latin1                    Perl__to_fold_latin1
#   endif
#   if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_TOKE_C)
#     define regcurly                           Perl_regcurly
#   endif
#   if defined(PERL_IN_REGCOMP_DEBUG_C) && defined(DEBUGGING)
#     define put_charclass_bitmap_innards(a,b,c,d,e,f,g) S_put_charclass_bitmap_innards(aTHX_ a,b,c,d,e,f,g)
#     define put_charclass_bitmap_innards_common(a,b,c,d,e,f) S_put_charclass_bitmap_innards_common(aTHX_ a,b,c,d,e,f)
#     define put_charclass_bitmap_innards_invlist(a,b) S_put_charclass_bitmap_innards_invlist(aTHX_ a,b)
#     define put_code_point(a,b)                S_put_code_point(aTHX_ a,b)
#     define put_range(a,b,c,d)                 S_put_range(aTHX_ a,b,c,d)
#     define regdump_extflags(a,b)              S_regdump_extflags(aTHX_ a,b)
#     define regdump_intflags(a,b)              S_regdump_intflags(aTHX_ a,b)
#   endif
#   if defined(PERL_IN_REGCOMP_INVLIST_C) && !defined(PERL_EXT_RE_BUILD)
#     define _append_range_to_invlist(a,b,c)    S__append_range_to_invlist(aTHX_ a,b,c)
#     define _invlist_array_init                S__invlist_array_init
#     define get_invlist_previous_index_addr    S_get_invlist_previous_index_addr
#     define invlist_clear(a)                   S_invlist_clear(aTHX_ a)
#     define invlist_max                        S_invlist_max
#     define invlist_previous_index             S_invlist_previous_index
#     define invlist_replace_list_destroys_src(a,b) S_invlist_replace_list_destroys_src(aTHX_ a,b)
#     define invlist_set_previous_index         S_invlist_set_previous_index
#     define invlist_trim                       S_invlist_trim
#   endif /*  defined(PERL_IN_REGCOMP_INVLIST_C) &&
             !defined(PERL_EXT_RE_BUILD) */
#   if defined(PERL_IN_REGCOMP_STUDY_C)
#     define get_ANYOF_cp_list_for_ssc(a,b)     S_get_ANYOF_cp_list_for_ssc(aTHX_ a,b)
#     define make_exactf_invlist(a,b)           S_make_exactf_invlist(aTHX_ a,b)
#     define rck_elide_nothing(a)               S_rck_elide_nothing(aTHX_ a)
#     define ssc_add_range(a,b,c)               S_ssc_add_range(aTHX_ a,b,c)
#     define ssc_and(a,b,c)                     S_ssc_and(aTHX_ a,b,c)
#     define ssc_anything(a)                    S_ssc_anything(aTHX_ a)
#     define ssc_clear_locale                   S_ssc_clear_locale
#     define ssc_cp_and(a,b)                    S_ssc_cp_and(aTHX_ a,b)
#     define ssc_intersection(a,b,c)            S_ssc_intersection(aTHX_ a,b,c)
#     define ssc_is_anything                    S_ssc_is_anything
#     define ssc_is_cp_posixl_init              S_ssc_is_cp_posixl_init
#     define ssc_or(a,b,c)                      S_ssc_or(aTHX_ a,b,c)
#     define ssc_union(a,b,c)                   S_ssc_union(aTHX_ a,b,c)
#     define unwind_scan_frames(a)              S_unwind_scan_frames(aTHX_ a)
#   endif /* defined(PERL_IN_REGCOMP_STUDY_C) */
#   if defined(PERL_IN_REGEXEC_C)
#     define advance_one_LB(a,b,c)              S_advance_one_LB(aTHX_ a,b,c)
#     define advance_one_SB(a,b,c)              S_advance_one_SB(aTHX_ a,b,c)
#     define advance_one_WB(a,b,c,d)            S_advance_one_WB(aTHX_ a,b,c,d)
#     define backup_one_GCB(a,b,c)              S_backup_one_GCB(aTHX_ a,b,c)
#     define backup_one_LB(a,b,c)               S_backup_one_LB(aTHX_ a,b,c)
#     define backup_one_SB(a,b,c)               S_backup_one_SB(aTHX_ a,b,c)
#     define backup_one_WB(a,b,c,d)             S_backup_one_WB(aTHX_ a,b,c,d)
#     define capture_clear(a,b,c,d)             S_capture_clear(aTHX_ a,b,c,d comma_aDEPTH)
#     define find_byclass(a,b,c,d,e)            S_find_byclass(aTHX_ a,b,c,d,e)
#     define find_next_masked                   S_find_next_masked
#     define find_span_end                      S_find_span_end
#     define find_span_end_mask                 S_find_span_end_mask
#     define foldEQ_latin1_s2_folded(a,b,c)     S_foldEQ_latin1_s2_folded(aTHX_ a,b,c)
#     define isFOO_lc(a,b)                      S_isFOO_lc(aTHX_ a,b)
#     define isFOO_utf8_lc(a,b,c)               S_isFOO_utf8_lc(aTHX_ a,b,c)
#     define isGCB(a,b,c,d,e)                   S_isGCB(aTHX_ a,b,c,d,e)
#     define isLB(a,b,c,d,e,f)                  S_isLB(aTHX_ a,b,c,d,e,f)
#     define isSB(a,b,c,d,e,f)                  S_isSB(aTHX_ a,b,c,d,e,f)
#     define isWB(a,b,c,d,e,f,g)                S_isWB(aTHX_ a,b,c,d,e,f,g)
#     define reg_check_named_buff_matched       S_reg_check_named_buff_matched
#     define regcp_restore(a,b,c)               S_regcp_restore(aTHX_ a,b,c comma_aDEPTH)
#     define regcppop(a,b)                      S_regcppop(aTHX_ a,b comma_aDEPTH)
#     define regcppush(a,b,c)                   S_regcppush(aTHX_ a,b,c comma_aDEPTH)
#     define reghop3                            S_reghop3
#     define reghop4                            S_reghop4
#     define reghopmaybe3                       S_reghopmaybe3
#     define reginclass(a,b,c,d,e)              S_reginclass(aTHX_ a,b,c,d,e)
#     define regmatch(a,b,c)                    S_regmatch(aTHX_ a,b,c)
#     define regrepeat(a,b,c,d,e,f)             S_regrepeat(aTHX_ a,b,c,d,e,f comma_aDEPTH)
#     define regtry(a,b)                        S_regtry(aTHX_ a,b)
#     define to_byte_substr(a)                  S_to_byte_substr(aTHX_ a)
#     define to_utf8_substr(a)                  S_to_utf8_substr(aTHX_ a)
#     define unwind_paren(a,b,c)                S_unwind_paren(aTHX_ a,b,c comma_aDEPTH)
#     if defined(DEBUGGING)
#       define debug_start_match(a,b,c,d,e)     S_debug_start_match(aTHX_ a,b,c,d,e)
#       define dump_exec_pos(a,b,c,d,e,f,g)     S_dump_exec_pos(aTHX_ a,b,c,d,e,f,g)
#       if !defined(MULTIPLICITY) || defined(PERL_CORE) || \
            defined(PERL_WANT_VARARGS)
#         define re_exec_indentf(a,...)         Perl_re_exec_indentf(aTHX_ a,__VA_ARGS__)
#       endif
#     endif
#   endif /* defined(PERL_IN_REGEXEC_C) */
# endif /* defined(PERL_CORE) || defined(PERL_EXT) */
# if defined(PERL_CORE) || defined(PERL_USE_VOLATILE_API)
#   define finalize_optree(a)                   Perl_finalize_optree(aTHX_ a)
#   define optimize_optree(a)                   Perl_optimize_optree(aTHX_ a)
# endif
# if !defined(PERL_IMPLICIT_SYS)
#   define my_pclose(a)                         Perl_my_pclose(aTHX_ a)
#   define my_popen(a,b)                        Perl_my_popen(aTHX_ a,b)
# endif
# if defined(PERL_IN_CLASS_C) || defined(PERL_IN_OP_C)    || \
     defined(PERL_IN_PAD_C)   || defined(PERL_IN_PERLY_C) || \
     defined(PERL_IN_TOKE_C)
#   define class_add_ADJUST(a,b)                Perl_class_add_ADJUST(aTHX_ a,b)
#   define class_add_field(a,b)                 Perl_class_add_field(aTHX_ a,b)
#   define class_apply_attributes(a,b)          Perl_class_apply_attributes(aTHX_ a,b)
#   define class_apply_field_attributes(a,b)    Perl_class_apply_field_attributes(aTHX_ a,b)
#   define class_prepare_initfield_parse()      Perl_class_prepare_initfield_parse(aTHX)
#   define class_prepare_method_parse(a)        Perl_class_prepare_method_parse(aTHX_ a)
#   define class_seal_stash(a)                  Perl_class_seal_stash(aTHX_ a)
#   define class_set_field_defop(a,b,c)         Perl_class_set_field_defop(aTHX_ a,b,c)
#   define class_setup_stash(a)                 Perl_class_setup_stash(aTHX_ a)
#   define class_wrap_method_body(a)            Perl_class_wrap_method_body(aTHX_ a)
#   define croak_kw_unless_class(a)             Perl_croak_kw_unless_class(aTHX_ a)
# endif /* defined(PERL_IN_CLASS_C) || defined(PERL_IN_OP_C)    ||
           defined(PERL_IN_PAD_C)   || defined(PERL_IN_PERLY_C) ||
           defined(PERL_IN_TOKE_C) */
# if defined(PERL_IN_REGEX_ENGINE)
#   define check_regnode_after(a,b)             Perl_check_regnode_after(aTHX_ a,b)
#   define regnext(a)                           Perl_regnext(aTHX_ a)
#   define regnode_after(a,b)                   Perl_regnode_after(aTHX_ a,b)
#   if defined(DEBUGGING) && ( defined(PERL_CORE) || defined(PERL_EXT) )
#     define debug_peep(a,b,c,d,e)              Perl_debug_peep(aTHX_ a,b,c,d,e)
#     define debug_show_study_flags(a,b,c)      Perl_debug_show_study_flags(aTHX_ a,b,c)
#     define debug_studydata(a,b,c,d,e,f,g)     Perl_debug_studydata(aTHX_ a,b,c,d,e,f,g)
#     define dumpuntil(a,b,c,d,e,f,g,h)         Perl_dumpuntil(aTHX_ a,b,c,d,e,f,g,h)
#     define regprop(a,b,c,d,e)                 Perl_regprop(aTHX_ a,b,c,d,e)
#     if !defined(MULTIPLICITY) || defined(PERL_CORE) || \
          defined(PERL_WANT_VARARGS)
#       define re_indentf(a,...)                Perl_re_indentf(aTHX_ a,__VA_ARGS__)
#       define re_printf(...)                   Perl_re_printf(aTHX_ __VA_ARGS__)
#     endif
#   endif /*   defined(DEBUGGING) &&
             ( defined(PERL_CORE) || defined(PERL_EXT) ) */
#   if defined(PERL_EXT_RE_BUILD)
#     if defined(PERL_CORE) || defined(PERL_EXT)
#       define get_re_gclass_aux_data(a,b,c,d,e,f) Perl_get_re_gclass_aux_data(aTHX_ a,b,c,d,e,f)
#     endif
#   elif defined(PERL_CORE) || defined(PERL_EXT)
#     define get_regclass_aux_data(a,b,c,d,e,f) Perl_get_regclass_aux_data(aTHX_ a,b,c,d,e,f)
#   endif
# endif /* defined(PERL_IN_REGEX_ENGINE) */
# if defined(PERL_IN_SV_C)
#   define more_sv()                            Perl_more_sv(aTHX)
#   if defined(PERL_CORE)
#     define F0convert                          S_F0convert
#     define anonymise_cv_maybe(a,b)            S_anonymise_cv_maybe(aTHX_ a,b)
#     define assert_uft8_cache_coherent(a,b,c,d) S_assert_uft8_cache_coherent(aTHX_ a,b,c,d)
#     define curse(a,b)                         S_curse(aTHX_ a,b)
#     define expect_number(a)                   S_expect_number(aTHX_ a)
#     define find_array_subscript(a,b)          S_find_array_subscript(aTHX_ a,b)
#     define find_hash_subscript(a,b)           S_find_hash_subscript(aTHX_ a,b)
#     define find_uninit_var(a,b,c,d)           S_find_uninit_var(aTHX_ a,b,c,d)
#     define glob_2number(a)                    S_glob_2number(aTHX_ a)
#     define glob_assign_glob(a,b,c)            S_glob_assign_glob(aTHX_ a,b,c)
#     define not_a_number(a)                    S_not_a_number(aTHX_ a)
#     define not_incrementable(a)               S_not_incrementable(aTHX_ a)
#     define ptr_table_find                     S_ptr_table_find
#     define sv_2iuv_common(a)                  S_sv_2iuv_common(aTHX_ a)
#     define sv_add_arena(a,b,c)                S_sv_add_arena(aTHX_ a,b,c)
#     define sv_display(a,b,c)                  S_sv_display(aTHX_ a,b,c)
#     define sv_pos_b2u_midway(a,b,c,d)         S_sv_pos_b2u_midway(aTHX_ a,b,c,d)
#     define sv_pos_u2b_cached(a,b,c,d,e,f,g)   S_sv_pos_u2b_cached(aTHX_ a,b,c,d,e,f,g)
#     define sv_pos_u2b_forwards                S_sv_pos_u2b_forwards
#     define sv_pos_u2b_midway                  S_sv_pos_u2b_midway
#     define sv_unglob(a,b)                     S_sv_unglob(aTHX_ a,b)
#     define uiv_2buf                           S_uiv_2buf
#     define utf8_mg_len_cache_update(a,b,c)    S_utf8_mg_len_cache_update(aTHX_ a,b,c)
#     define utf8_mg_pos_cache_update(a,b,c,d,e) S_utf8_mg_pos_cache_update(aTHX_ a,b,c,d,e)
#     define visit(a,b,c)                       S_visit(aTHX_ a,b,c)
#     if defined(DEBUGGING)
#       define del_sv(a)                        S_del_sv(aTHX_ a)
#       define sv_mark_arenas()                 Perl_sv_mark_arenas(aTHX)
#       define sv_sweep_arenas()                Perl_sv_sweep_arenas(aTHX)
#     endif
#     if !defined(NV_PRESERVES_UV)
#       if defined(DEBUGGING)
#         define sv_2iuv_non_preserve(a,b)      S_sv_2iuv_non_preserve(aTHX_ a,b)
#       else
#         define sv_2iuv_non_preserve(a)        S_sv_2iuv_non_preserve(aTHX_ a)
#       endif
#     endif
#     if defined(PERL_DEBUG_READONLY_COW)
#       define sv_buf_to_rw(a)                  S_sv_buf_to_rw(aTHX_ a)
#     endif
#     if defined(USE_ITHREADS)
#       define sv_dup_common(a,b)               S_sv_dup_common(aTHX_ a,b)
#       define sv_dup_hvaux(a,b,c)              S_sv_dup_hvaux(aTHX_ a,b,c)
#       define sv_dup_inc_multiple(a,b,c,d)     S_sv_dup_inc_multiple(aTHX_ a,b,c,d)
#       define unreferenced_to_tmp_stack(a)     S_unreferenced_to_tmp_stack(aTHX_ a)
#     endif
#   endif /* defined(PERL_CORE) */
# endif /* defined(PERL_IN_SV_C) */
# if defined(PERL_MEM_LOG)
#   define mem_log_alloc                        Perl_mem_log_alloc
#   define mem_log_del_sv                       Perl_mem_log_del_sv
#   define mem_log_free                         Perl_mem_log_free
#   define mem_log_new_sv                       Perl_mem_log_new_sv
#   define mem_log_realloc                      Perl_mem_log_realloc
# endif
# if !defined(PERL_NO_INLINE_FUNCTIONS)
#   define cx_popblock(a)                       Perl_cx_popblock(aTHX_ a)
#   define cx_popeval(a)                        Perl_cx_popeval(aTHX_ a)
#   define cx_popformat(a)                      Perl_cx_popformat(aTHX_ a)
#   define cx_popgiven(a)                       Perl_cx_popgiven(aTHX_ a)
#   define cx_poploop(a)                        Perl_cx_poploop(aTHX_ a)
#   define cx_popsub(a)                         Perl_cx_popsub(aTHX_ a)
#   define cx_popsub_args(a)                    Perl_cx_popsub_args(aTHX_ a)
#   define cx_popsub_common(a)                  Perl_cx_popsub_common(aTHX_ a)
#   define cx_popwhen(a)                        Perl_cx_popwhen(aTHX_ a)
#   define cx_pushblock(a,b,c,d)                Perl_cx_pushblock(aTHX_ a,b,c,d)
#   define cx_pusheval(a,b,c)                   Perl_cx_pusheval(aTHX_ a,b,c)
#   define cx_pushformat(a,b,c,d)               Perl_cx_pushformat(aTHX_ a,b,c,d)
#   define cx_pushgiven(a,b)                    Perl_cx_pushgiven(aTHX_ a,b)
#   define cx_pushloop_for(a,b,c)               Perl_cx_pushloop_for(aTHX_ a,b,c)
#   define cx_pushloop_plain(a)                 Perl_cx_pushloop_plain(aTHX_ a)
#   define cx_pushsub(a,b,c,d)                  Perl_cx_pushsub(aTHX_ a,b,c,d)
#   define cx_pushtry(a,b)                      Perl_cx_pushtry(aTHX_ a,b)
#   define cx_pushwhen(a)                       Perl_cx_pushwhen(aTHX_ a)
#   define cx_topblock(a)                       Perl_cx_topblock(aTHX_ a)
#   define gimme_V()                            Perl_gimme_V(aTHX)
# endif /* !defined(PERL_NO_INLINE_FUNCTIONS) */
# if defined(PERL_RC_STACK)
#   define runops_wrap()                        Perl_runops_wrap(aTHX)
# endif
# if defined(PERL_USE_3ARG_SIGHANDLER)
#   define csighandler                          Perl_csighandler
# else
#   define csighandler                          Perl_csighandler
# endif
# if defined(U64TYPE)
#   define lsbit_pos64                          Perl_lsbit_pos64
#   define msbit_pos64                          Perl_msbit_pos64
#   define single_1bit_pos64                    Perl_single_1bit_pos64
# endif
# if defined(UNLINK_ALL_VERSIONS)
#   define unlnk(a)                             Perl_unlnk(aTHX_ a)
# endif
# if defined(USE_C_BACKTRACE)
#   define dump_c_backtrace(a,b,c)              Perl_dump_c_backtrace(aTHX_ a,b,c)
#   define get_c_backtrace_dump(a,b)            Perl_get_c_backtrace_dump(aTHX_ a,b)
# endif
# if defined(USE_ITHREADS)
#   define alloccopstash(a)                     Perl_alloccopstash(aTHX_ a)
#   define any_dup(a,b)                         Perl_any_dup(aTHX_ a,b)
#   define cop_file_avn(a)                      Perl_cop_file_avn(aTHX_ a)
#   define cx_dup(a,b,c,d)                      Perl_cx_dup(aTHX_ a,b,c,d)
#   define dirp_dup(a,b)                        Perl_dirp_dup(aTHX_ a,b)
#   define fp_dup(a,b,c)                        Perl_fp_dup(aTHX_ a,b,c)
#   define gp_dup(a,b)                          Perl_gp_dup(aTHX_ a,b)
#   define he_dup(a,b,c)                        Perl_he_dup(aTHX_ a,b,c)
#   define hek_dup(a,b)                         Perl_hek_dup(aTHX_ a,b)
#   define mg_dup(a,b)                          Perl_mg_dup(aTHX_ a,b)
#   define newPADOP(a,b,c)                      Perl_newPADOP(aTHX_ a,b,c)
#   define parser_dup(a,b)                      Perl_parser_dup(aTHX_ a,b)
#   define re_dup_guts(a,b,c)                   Perl_re_dup_guts(aTHX_ a,b,c)
#   define regdupe_internal(a,b)                Perl_regdupe_internal(aTHX_ a,b)
#   define rvpv_dup(a,b,c)                      Perl_rvpv_dup(aTHX_ a,b,c)
#   define si_dup(a,b)                          Perl_si_dup(aTHX_ a,b)
#   define ss_dup(a,b)                          Perl_ss_dup(aTHX_ a,b)
#   define sv_dup(a,b)                          Perl_sv_dup(aTHX_ a,b)
#   define sv_dup_inc(a,b)                      Perl_sv_dup_inc(aTHX_ a,b)
# endif /* defined(USE_ITHREADS) */
# if defined(USE_LOCALE_COLLATE)
#   define sv_collxfrm_flags(a,b,c)             Perl_sv_collxfrm_flags(aTHX_ a,b,c)
#   if ( defined(PERL_CORE)        || defined(PERL_EXT) ) &&        \
       ( defined(PERL_IN_LOCALE_C) || defined(PERL_IN_MATHOMS_C) || \
         defined(PERL_IN_SV_C) )
#     define mem_collxfrm_(a,b,c,d)             Perl_mem_collxfrm_(aTHX_ a,b,c,d)
#   endif
# endif
# if defined(USE_PERLIO)
#   define PerlIO_clearerr(a)                   Perl_PerlIO_clearerr(aTHX_ a)
#   define PerlIO_close(a)                      Perl_PerlIO_close(aTHX_ a)
#   define PerlIO_eof(a)                        Perl_PerlIO_eof(aTHX_ a)
#   define PerlIO_error(a)                      Perl_PerlIO_error(aTHX_ a)
#   define PerlIO_fileno(a)                     Perl_PerlIO_fileno(aTHX_ a)
#   define PerlIO_fill(a)                       Perl_PerlIO_fill(aTHX_ a)
#   define PerlIO_flush(a)                      Perl_PerlIO_flush(aTHX_ a)
#   define PerlIO_get_base(a)                   Perl_PerlIO_get_base(aTHX_ a)
#   define PerlIO_get_bufsiz(a)                 Perl_PerlIO_get_bufsiz(aTHX_ a)
#   define PerlIO_get_cnt(a)                    Perl_PerlIO_get_cnt(aTHX_ a)
#   define PerlIO_get_ptr(a)                    Perl_PerlIO_get_ptr(aTHX_ a)
#   define PerlIO_read(a,b,c)                   Perl_PerlIO_read(aTHX_ a,b,c)
#   define PerlIO_seek(a,b,c)                   Perl_PerlIO_seek(aTHX_ a,b,c)
#   define PerlIO_set_cnt(a,b)                  Perl_PerlIO_set_cnt(aTHX_ a,b)
#   define PerlIO_set_ptrcnt(a,b,c)             Perl_PerlIO_set_ptrcnt(aTHX_ a,b,c)
#   define PerlIO_setlinebuf(a)                 Perl_PerlIO_setlinebuf(aTHX_ a)
#   define PerlIO_stderr()                      Perl_PerlIO_stderr(aTHX)
#   define PerlIO_stdin()                       Perl_PerlIO_stdin(aTHX)
#   define PerlIO_stdout()                      Perl_PerlIO_stdout(aTHX)
#   define PerlIO_tell(a)                       Perl_PerlIO_tell(aTHX_ a)
#   define PerlIO_unread(a,b,c)                 Perl_PerlIO_unread(aTHX_ a,b,c)
#   define PerlIO_write(a,b,c)                  Perl_PerlIO_write(aTHX_ a,b,c)
# endif /* defined(USE_PERLIO) */
# if defined(USE_THREADS)
#   define thread_locale_init()                 Perl_thread_locale_init(aTHX)
#   define thread_locale_term()                 Perl_thread_locale_term(aTHX)
# endif
# if defined(VMS) || defined(WIN32)
#   define do_aspawn(a,b,c)                     Perl_do_aspawn(aTHX_ a,b,c)
#   define do_spawn(a)                          Perl_do_spawn(aTHX_ a)
#   define do_spawn_nowait(a)                   Perl_do_spawn_nowait(aTHX_ a)
# endif
# if defined(WIN32)
#   define get_context                          Perl_get_context
# else
#   define get_context                          Perl_get_context
# endif
#endif /* !defined(PERL_NO_SHORT_NAMES) */

/* ex: set ro ft=c: */
                                           usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/CORE/embedvar.h                                         0000444 0000000 0000000 00000057446 14714567415 021074  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* -*- mode: C; buffer-read-only: t -*-
 *
 *    embedvar.h
 *
 *    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
 *    2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
 *    2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022
 *    by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is built by regen/embed.pl from embed.fnc, intrpvar.h,
 * perlvars.h, regen/opcodes, regen/embed.pl, regen/embed_lib.pl and
 * regen/HeaderParser.pm.
 * Any changes made here will be lost!
 *
 * Edit those files and run 'make regen_headers' to effect changes.
 */

#if defined(MULTIPLICITY)
# define vTHX                                   aTHX
# define PL_AboveLatin1                         (vTHX->IAboveLatin1)
# define PL_an                                  (vTHX->Ian)
# define PL_argvgv                              (vTHX->Iargvgv)
# define PL_argvout_stack                       (vTHX->Iargvout_stack)
# define PL_argvoutgv                           (vTHX->Iargvoutgv)
# define PL_Assigned_invlist                    (vTHX->IAssigned_invlist)
# define PL_basetime                            (vTHX->Ibasetime)
# define PL_beginav                             (vTHX->Ibeginav)
# define PL_beginav_save                        (vTHX->Ibeginav_save)
# define PL_blockhooks                          (vTHX->Iblockhooks)
# define PL_body_arenas                         (vTHX->Ibody_arenas)
# define PL_body_roots                          (vTHX->Ibody_roots)
# define PL_bodytarget                          (vTHX->Ibodytarget)
# define PL_breakable_sub_gen                   (vTHX->Ibreakable_sub_gen)
# define PL_CCC_non0_non230                     (vTHX->ICCC_non0_non230)
# define PL_checkav                             (vTHX->Icheckav)
# define PL_checkav_save                        (vTHX->Icheckav_save)
# define PL_chopset                             (vTHX->Ichopset)
# define PL_clocktick                           (vTHX->Iclocktick)
# define PL_collation_ix                        (vTHX->Icollation_ix)
# define PL_collation_name                      (vTHX->Icollation_name)
# define PL_collation_standard                  (vTHX->Icollation_standard)
# define PL_collxfrm_base                       (vTHX->Icollxfrm_base)
# define PL_collxfrm_mult                       (vTHX->Icollxfrm_mult)
# define PL_colors                              (vTHX->Icolors)
# define PL_colorset                            (vTHX->Icolorset)
# define PL_compcv                              (vTHX->Icompcv)
# define PL_compiling                           (vTHX->Icompiling)
# define PL_comppad                             (vTHX->Icomppad)
# define PL_comppad_name                        (vTHX->Icomppad_name)
# define PL_comppad_name_fill                   (vTHX->Icomppad_name_fill)
# define PL_comppad_name_floor                  (vTHX->Icomppad_name_floor)
# define PL_constpadix                          (vTHX->Iconstpadix)
# define PL_cop_seqmax                          (vTHX->Icop_seqmax)
# define PL_ctype_name                          (vTHX->Ictype_name)
# define PL_cur_LC_ALL                          (vTHX->Icur_LC_ALL)
# define PL_cur_locale_obj                      (vTHX->Icur_locale_obj)
# define PL_curcop                              (vTHX->Icurcop)
# define PL_curcopdb                            (vTHX->Icurcopdb)
# define PL_curlocales                          (vTHX->Icurlocales)
# define PL_curpad                              (vTHX->Icurpad)
# define PL_curpm                               (vTHX->Icurpm)
# define PL_curpm_under                         (vTHX->Icurpm_under)
# define PL_curstack                            (vTHX->Icurstack)
# define PL_curstackinfo                        (vTHX->Icurstackinfo)
# define PL_curstash                            (vTHX->Icurstash)
# define PL_curstname                           (vTHX->Icurstname)
# define PL_custom_op_descs                     (vTHX->Icustom_op_descs)
# define PL_custom_op_names                     (vTHX->Icustom_op_names)
# define PL_custom_ops                          (vTHX->Icustom_ops)
# define PL_cv_has_eval                         (vTHX->Icv_has_eval)
# define PL_dbargs                              (vTHX->Idbargs)
# define PL_DBcontrol                           (vTHX->IDBcontrol)
# define PL_DBcv                                (vTHX->IDBcv)
# define PL_DBgv                                (vTHX->IDBgv)
# define PL_DBline                              (vTHX->IDBline)
# define PL_DBsignal                            (vTHX->IDBsignal)
# define PL_DBsingle                            (vTHX->IDBsingle)
# define PL_DBsub                               (vTHX->IDBsub)
# define PL_DBtrace                             (vTHX->IDBtrace)
# define PL_debstash                            (vTHX->Idebstash)
# define PL_debug                               (vTHX->Idebug)
# define PL_debug_pad                           (vTHX->Idebug_pad)
# define PL_def_layerlist                       (vTHX->Idef_layerlist)
# define PL_defgv                               (vTHX->Idefgv)
# define PL_defoutgv                            (vTHX->Idefoutgv)
# define PL_defstash                            (vTHX->Idefstash)
# define PL_delaymagic                          (vTHX->Idelaymagic)
# define PL_delaymagic_egid                     (vTHX->Idelaymagic_egid)
# define PL_delaymagic_euid                     (vTHX->Idelaymagic_euid)
# define PL_delaymagic_gid                      (vTHX->Idelaymagic_gid)
# define PL_delaymagic_uid                      (vTHX->Idelaymagic_uid)
# define PL_destroyhook                         (vTHX->Idestroyhook)
# define PL_diehook                             (vTHX->Idiehook)
# define PL_Dir                                 (vTHX->IDir)
# define PL_doswitches                          (vTHX->Idoswitches)
# define PL_dowarn                              (vTHX->Idowarn)
# define PL_dump_re_max_len                     (vTHX->Idump_re_max_len)
# define PL_dumper_fd                           (vTHX->Idumper_fd)
# define PL_dumpindent                          (vTHX->Idumpindent)
# define PL_e_script                            (vTHX->Ie_script)
# define PL_efloatbuf                           (vTHX->Iefloatbuf)
# define PL_efloatsize                          (vTHX->Iefloatsize)
# define PL_endav                               (vTHX->Iendav)
# define PL_Env                                 (vTHX->IEnv)
# define PL_envgv                               (vTHX->Ienvgv)
# define PL_errgv                               (vTHX->Ierrgv)
# define PL_errors                              (vTHX->Ierrors)
# define PL_eval_begin_nest_depth               (vTHX->Ieval_begin_nest_depth)
# define PL_eval_root                           (vTHX->Ieval_root)
# define PL_eval_start                          (vTHX->Ieval_start)
# define PL_evalseq                             (vTHX->Ievalseq)
# define PL_exit_flags                          (vTHX->Iexit_flags)
# define PL_exitlist                            (vTHX->Iexitlist)
# define PL_exitlistlen                         (vTHX->Iexitlistlen)
# define PL_fdpid                               (vTHX->Ifdpid)
# define PL_filemode                            (vTHX->Ifilemode)
# define PL_firstgv                             (vTHX->Ifirstgv)
# define PL_fold_locale                         (vTHX->Ifold_locale)
# define PL_forkprocess                         (vTHX->Iforkprocess)
# define PL_formtarget                          (vTHX->Iformtarget)
# define PL_GCB_invlist                         (vTHX->IGCB_invlist)
# define PL_generation                          (vTHX->Igeneration)
# define PL_gensym                              (vTHX->Igensym)
# define PL_globalstash                         (vTHX->Iglobalstash)
# define PL_globhook                            (vTHX->Iglobhook)
# define PL_hash_rand_bits                      (vTHX->Ihash_rand_bits)
# define PL_hash_rand_bits_enabled              (vTHX->Ihash_rand_bits_enabled)
# define PL_HasMultiCharFold                    (vTHX->IHasMultiCharFold)
# define PL_hintgv                              (vTHX->Ihintgv)
# define PL_hook__require__after                (vTHX->Ihook__require__after)
# define PL_hook__require__before               (vTHX->Ihook__require__before)
# define PL_hv_fetch_ent_mh                     (vTHX->Ihv_fetch_ent_mh)
# define PL_in_clean_all                        (vTHX->Iin_clean_all)
# define PL_in_clean_objs                       (vTHX->Iin_clean_objs)
# define PL_in_eval                             (vTHX->Iin_eval)
# define PL_in_load_module                      (vTHX->Iin_load_module)
# define PL_in_some_fold                        (vTHX->Iin_some_fold)
# define PL_in_utf8_COLLATE_locale              (vTHX->Iin_utf8_COLLATE_locale)
# define PL_in_utf8_CTYPE_locale                (vTHX->Iin_utf8_CTYPE_locale)
# define PL_in_utf8_turkic_locale               (vTHX->Iin_utf8_turkic_locale)
# define PL_InBitmap                            (vTHX->IInBitmap)
# define PL_incgv                               (vTHX->Iincgv)
# define PL_initav                              (vTHX->Iinitav)
# define PL_InMultiCharFold                     (vTHX->IInMultiCharFold)
# define PL_inplace                             (vTHX->Iinplace)
# define PL_internal_random_state               (vTHX->Iinternal_random_state)
# define PL_isarev                              (vTHX->Iisarev)
# define PL_known_layers                        (vTHX->Iknown_layers)
# define PL_langinfo_sv                         (vTHX->Ilanginfo_sv)
# define PL_last_in_gv                          (vTHX->Ilast_in_gv)
# define PL_lastfd                              (vTHX->Ilastfd)
# define PL_lastgotoprobe                       (vTHX->Ilastgotoprobe)
# define PL_laststatval                         (vTHX->Ilaststatval)
# define PL_laststype                           (vTHX->Ilaststype)
# define PL_Latin1                              (vTHX->ILatin1)
# define PL_LB_invlist                          (vTHX->ILB_invlist)
# define PL_less_dicey_locale_buf               (vTHX->Iless_dicey_locale_buf)
# define PL_less_dicey_locale_bufsize           (vTHX->Iless_dicey_locale_bufsize)
# define PL_LIO                                 (vTHX->ILIO)
# define PL_locale_mutex_depth                  (vTHX->Ilocale_mutex_depth)
# define PL_localizing                          (vTHX->Ilocalizing)
# define PL_localpatches                        (vTHX->Ilocalpatches)
# define PL_lockhook                            (vTHX->Ilockhook)
# define PL_main_cv                             (vTHX->Imain_cv)
# define PL_main_root                           (vTHX->Imain_root)
# define PL_main_start                          (vTHX->Imain_start)
# define PL_mainstack                           (vTHX->Imainstack)
# define PL_markstack                           (vTHX->Imarkstack)
# define PL_markstack_max                       (vTHX->Imarkstack_max)
# define PL_markstack_ptr                       (vTHX->Imarkstack_ptr)
# define PL_max_intro_pending                   (vTHX->Imax_intro_pending)
# define PL_maxsysfd                            (vTHX->Imaxsysfd)
# define PL_mbrlen_ps                           (vTHX->Imbrlen_ps)
# define PL_mbrtowc_ps                          (vTHX->Imbrtowc_ps)
# define PL_Mem                                 (vTHX->IMem)
# define PL_mem_log                             (vTHX->Imem_log)
# define PL_memory_debug_header                 (vTHX->Imemory_debug_header)
# define PL_MemParse                            (vTHX->IMemParse)
# define PL_MemShared                           (vTHX->IMemShared)
# define PL_mess_sv                             (vTHX->Imess_sv)
# define PL_min_intro_pending                   (vTHX->Imin_intro_pending)
# define PL_minus_a                             (vTHX->Iminus_a)
# define PL_minus_c                             (vTHX->Iminus_c)
# define PL_minus_E                             (vTHX->Iminus_E)
# define PL_minus_F                             (vTHX->Iminus_F)
# define PL_minus_l                             (vTHX->Iminus_l)
# define PL_minus_n                             (vTHX->Iminus_n)
# define PL_minus_p                             (vTHX->Iminus_p)
# define PL_modcount                            (vTHX->Imodcount)
# define PL_modglobal                           (vTHX->Imodglobal)
# define PL_multideref_pc                       (vTHX->Imultideref_pc)
# define PL_my_cxt_list                         (vTHX->Imy_cxt_list)
# define PL_my_cxt_size                         (vTHX->Imy_cxt_size)
# define PL_na                                  (vTHX->Ina)
# define PL_nomemok                             (vTHX->Inomemok)
# define PL_numeric_name                        (vTHX->Inumeric_name)
# define PL_numeric_radix_sv                    (vTHX->Inumeric_radix_sv)
# define PL_numeric_standard                    (vTHX->Inumeric_standard)
# define PL_numeric_underlying                  (vTHX->Inumeric_underlying)
# define PL_numeric_underlying_is_standard      (vTHX->Inumeric_underlying_is_standard)
# define PL_ofsgv                               (vTHX->Iofsgv)
# define PL_oldname                             (vTHX->Ioldname)
# define PL_op                                  (vTHX->Iop)
# define PL_op_exec_cnt                         (vTHX->Iop_exec_cnt)
# define PL_op_mask                             (vTHX->Iop_mask)
# define PL_opfreehook                          (vTHX->Iopfreehook)
# define PL_origalen                            (vTHX->Iorigalen)
# define PL_origargc                            (vTHX->Iorigargc)
# define PL_origargv                            (vTHX->Iorigargv)
# define PL_origfilename                        (vTHX->Iorigfilename)
# define PL_ors_sv                              (vTHX->Iors_sv)
# define PL_osname                              (vTHX->Iosname)
# define PL_pad_reset_pending                   (vTHX->Ipad_reset_pending)
# define PL_padix                               (vTHX->Ipadix)
# define PL_padix_floor                         (vTHX->Ipadix_floor)
# define PL_padlist_generation                  (vTHX->Ipadlist_generation)
# define PL_padname_const                       (vTHX->Ipadname_const)
# define PL_padname_undef                       (vTHX->Ipadname_undef)
# define PL_parser                              (vTHX->Iparser)
# define PL_patchlevel                          (vTHX->Ipatchlevel)
# define PL_peepp                               (vTHX->Ipeepp)
# define PL_perl_destruct_level                 (vTHX->Iperl_destruct_level)
# define PL_perldb                              (vTHX->Iperldb)
# define PL_perlio                              (vTHX->Iperlio)
# define PL_phase                               (vTHX->Iphase)
# define PL_pidstatus                           (vTHX->Ipidstatus)
# define PL_Posix_ptrs                          (vTHX->IPosix_ptrs)
# define PL_preambleav                          (vTHX->Ipreambleav)
# define PL_prevailing_version                  (vTHX->Iprevailing_version)
# define PL_Private_Use                         (vTHX->IPrivate_Use)
# define PL_Proc                                (vTHX->IProc)
# define PL_profiledata                         (vTHX->Iprofiledata)
# define PL_psig_name                           (vTHX->Ipsig_name)
# define PL_psig_pend                           (vTHX->Ipsig_pend)
# define PL_psig_ptr                            (vTHX->Ipsig_ptr)
# define PL_ptr_table                           (vTHX->Iptr_table)
# define PL_random_state                        (vTHX->Irandom_state)
# define PL_reentrant_buffer                    (vTHX->Ireentrant_buffer)
# define PL_reentrant_retint                    (vTHX->Ireentrant_retint)
# define PL_reg_curpm                           (vTHX->Ireg_curpm)
# define PL_regex_pad                           (vTHX->Iregex_pad)
# define PL_regex_padav                         (vTHX->Iregex_padav)
# define PL_registered_mros                     (vTHX->Iregistered_mros)
# define PL_regmatch_slab                       (vTHX->Iregmatch_slab)
# define PL_regmatch_state                      (vTHX->Iregmatch_state)
# define PL_replgv                              (vTHX->Ireplgv)
# define PL_restartjmpenv                       (vTHX->Irestartjmpenv)
# define PL_restartop                           (vTHX->Irestartop)
# define PL_rpeepp                              (vTHX->Irpeepp)
# define PL_rs                                  (vTHX->Irs)
# define PL_runops                              (vTHX->Irunops)
# define PL_savebegin                           (vTHX->Isavebegin)
# define PL_savestack                           (vTHX->Isavestack)
# define PL_savestack_ix                        (vTHX->Isavestack_ix)
# define PL_savestack_max                       (vTHX->Isavestack_max)
# define PL_SB_invlist                          (vTHX->ISB_invlist)
# define PL_scopestack                          (vTHX->Iscopestack)
# define PL_scopestack_ix                       (vTHX->Iscopestack_ix)
# define PL_scopestack_max                      (vTHX->Iscopestack_max)
# define PL_scopestack_name                     (vTHX->Iscopestack_name)
# define PL_scratch_langinfo                    (vTHX->Iscratch_langinfo)
# define PL_scratch_locale_obj                  (vTHX->Iscratch_locale_obj)
# define PL_SCX_invlist                         (vTHX->ISCX_invlist)
# define PL_secondgv                            (vTHX->Isecondgv)
# define PL_setlocale_buf                       (vTHX->Isetlocale_buf)
# define PL_setlocale_bufsize                   (vTHX->Isetlocale_bufsize)
# define PL_sharehook                           (vTHX->Isharehook)
# define PL_sig_pending                         (vTHX->Isig_pending)
# define PL_sighandler1p                        (vTHX->Isighandler1p)
# define PL_sighandler3p                        (vTHX->Isighandler3p)
# define PL_sighandlerp                         (vTHX->Isighandlerp)
# define PL_signalhook                          (vTHX->Isignalhook)
# define PL_signals                             (vTHX->Isignals)
# define PL_Sock                                (vTHX->ISock)
# define PL_sortcop                             (vTHX->Isortcop)
# define PL_sortstash                           (vTHX->Isortstash)
# define PL_splitstr                            (vTHX->Isplitstr)
# define PL_srand_called                        (vTHX->Isrand_called)
# define PL_srand_override                      (vTHX->Isrand_override)
# define PL_srand_override_next                 (vTHX->Isrand_override_next)
# define PL_stack_base                          (vTHX->Istack_base)
# define PL_stack_max                           (vTHX->Istack_max)
# define PL_stack_sp                            (vTHX->Istack_sp)
# define PL_start_env                           (vTHX->Istart_env)
# define PL_stashcache                          (vTHX->Istashcache)
# define PL_stashpad                            (vTHX->Istashpad)
# define PL_stashpadix                          (vTHX->Istashpadix)
# define PL_stashpadmax                         (vTHX->Istashpadmax)
# define PL_statcache                           (vTHX->Istatcache)
# define PL_statgv                              (vTHX->Istatgv)
# define PL_statname                            (vTHX->Istatname)
# define PL_statusvalue                         (vTHX->Istatusvalue)
# define PL_statusvalue_posix                   (vTHX->Istatusvalue_posix)
# define PL_statusvalue_vms                     (vTHX->Istatusvalue_vms)
# define PL_stderrgv                            (vTHX->Istderrgv)
# define PL_stdingv                             (vTHX->Istdingv)
# define PL_StdIO                               (vTHX->IStdIO)
# define PL_strtab                              (vTHX->Istrtab)
# define PL_strxfrm_is_behaved                  (vTHX->Istrxfrm_is_behaved)
# define PL_strxfrm_max_cp                      (vTHX->Istrxfrm_max_cp)
# define PL_strxfrm_NUL_replacement             (vTHX->Istrxfrm_NUL_replacement)
# define PL_sub_generation                      (vTHX->Isub_generation)
# define PL_subline                             (vTHX->Isubline)
# define PL_subname                             (vTHX->Isubname)
# define PL_Sv                                  (vTHX->ISv)
# define PL_sv_arenaroot                        (vTHX->Isv_arenaroot)
# define PL_sv_consts                           (vTHX->Isv_consts)
# define PL_sv_count                            (vTHX->Isv_count)
# define PL_sv_immortals                        (vTHX->Isv_immortals)
# define PL_sv_no                               (vTHX->Isv_no)
# define PL_sv_root                             (vTHX->Isv_root)
# define PL_sv_serial                           (vTHX->Isv_serial)
# define PL_sv_undef                            (vTHX->Isv_undef)
# define PL_sv_yes                              (vTHX->Isv_yes)
# define PL_sv_zero                             (vTHX->Isv_zero)
# define PL_sys_intern                          (vTHX->Isys_intern)
# define PL_taint_warn                          (vTHX->Itaint_warn)
# define PL_tainted                             (vTHX->Itainted)
# define PL_tainting                            (vTHX->Itainting)
# define PL_threadhook                          (vTHX->Ithreadhook)
# define PL_tmps_floor                          (vTHX->Itmps_floor)
# define PL_tmps_ix                             (vTHX->Itmps_ix)
# define PL_tmps_max                            (vTHX->Itmps_max)
# define PL_tmps_stack                          (vTHX->Itmps_stack)
# define PL_top_env                             (vTHX->Itop_env)
# define PL_toptarget                           (vTHX->Itoptarget)
# define PL_TR_SPECIAL_HANDLING_UTF8            (vTHX->ITR_SPECIAL_HANDLING_UTF8)
# define PL_underlying_radix_sv                 (vTHX->Iunderlying_radix_sv)
# define PL_unicode                             (vTHX->Iunicode)
# define PL_unitcheckav                         (vTHX->Iunitcheckav)
# define PL_unitcheckav_save                    (vTHX->Iunitcheckav_save)
# define PL_unlockhook                          (vTHX->Iunlockhook)
# define PL_unsafe                              (vTHX->Iunsafe)
# define PL_UpperLatin1                         (vTHX->IUpperLatin1)
# define PL_utf8_charname_begin                 (vTHX->Iutf8_charname_begin)
# define PL_utf8_charname_continue              (vTHX->Iutf8_charname_continue)
# define PL_utf8_foldclosures                   (vTHX->Iutf8_foldclosures)
# define PL_utf8_idcont                         (vTHX->Iutf8_idcont)
# define PL_utf8_idstart                        (vTHX->Iutf8_idstart)
# define PL_utf8_mark                           (vTHX->Iutf8_mark)
# define PL_utf8_perl_idcont                    (vTHX->Iutf8_perl_idcont)
# define PL_utf8_perl_idstart                   (vTHX->Iutf8_perl_idstart)
# define PL_utf8_tofold                         (vTHX->Iutf8_tofold)
# define PL_utf8_tolower                        (vTHX->Iutf8_tolower)
# define PL_utf8_tosimplefold                   (vTHX->Iutf8_tosimplefold)
# define PL_utf8_totitle                        (vTHX->Iutf8_totitle)
# define PL_utf8_toupper                        (vTHX->Iutf8_toupper)
# define PL_utf8_xidcont                        (vTHX->Iutf8_xidcont)
# define PL_utf8_xidstart                       (vTHX->Iutf8_xidstart)
# define PL_utf8cache                           (vTHX->Iutf8cache)
# define PL_utf8locale                          (vTHX->Iutf8locale)
# define PL_warn_locale                         (vTHX->Iwarn_locale)
# define PL_warnhook                            (vTHX->Iwarnhook)
# define PL_watchaddr                           (vTHX->Iwatchaddr)
# define PL_watchok                             (vTHX->Iwatchok)
# define PL_WB_invlist                          (vTHX->IWB_invlist)
# define PL_wcrtomb_ps                          (vTHX->Iwcrtomb_ps)
# define PL_XPosix_ptrs                         (vTHX->IXPosix_ptrs)
# define PL_Xpv                                 (vTHX->IXpv)
# define PL_xsubfilename                        (vTHX->Ixsubfilename)
# if !defined(PL_sawampersand)
#   define PL_sawampersand                      (vTHX->Isawampersand)
# endif
#endif /* defined(MULTIPLICITY) */

/* ex: set ro ft=c: */
                                                                                                                                                                                                                          usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/CORE/fakesdio.h                                         0000444 0000000 0000000 00000006212 14714567415 021055  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*    fakesdio.h
 *
 *    Copyright (C) 2000, by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

/*
 * This is "source level" stdio compatibility mode.
 * We try and #define stdio functions in terms of PerlIO.
 */
#define _CANNOT "CANNOT"
#undef FILE
#define FILE			PerlIO
#undef clearerr
#undef fclose
#undef fdopen
#undef feof
#undef ferror
#undef fflush
#undef fgetc
#undef fgetpos
#undef fgets
#undef fileno
#undef flockfile
#undef fopen
#undef fprintf
#undef fputc
#undef fputs
#undef fread
#undef freopen
#undef fscanf
#undef fseek
#undef fsetpos
#undef ftell
#undef ftrylockfile
#undef funlockfile
#undef fwrite
#undef getc
#undef getc_unlocked
#undef getw
#undef pclose
#undef popen
#undef putc
#undef putc_unlocked
#undef putw
#undef rewind
#undef setbuf
#undef setvbuf
#undef stderr
#undef stdin
#undef stdout
#undef tmpfile
#undef ungetc
#undef vfprintf
#undef printf

/* printf used to live in perl.h like this - more sophisticated 
   than the rest 
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__) && !defined(PERL_GCC_PEDANTIC)
#define printf(fmt,args...) PerlIO_stdoutf(fmt,##args)
#else
#define printf PerlIO_stdoutf
#endif

#define fprintf			PerlIO_printf
#define stdin			PerlIO_stdin()
#define stdout			PerlIO_stdout()
#define stderr			PerlIO_stderr()
#define tmpfile()		PerlIO_tmpfile()
#define fclose(f)		PerlIO_close(f)
#define fflush(f)		PerlIO_flush(f)
#define fopen(p,m)		PerlIO_open(p,m)
#define vfprintf(f,fmt,a)	PerlIO_vprintf(f,fmt,a)
#define fgetc(f)		PerlIO_getc(f)
#define fputc(c,f)		PerlIO_putc(f,c)
#define fputs(s,f)		PerlIO_puts(f,s)
#define getc(f)			PerlIO_getc(f)
#define getc_unlocked(f)	PerlIO_getc(f)
#define putc(c,f)		PerlIO_putc(f,c)
#define putc_unlocked(c,f)	PerlIO_putc(c,f)
#define ungetc(c,f)		PerlIO_ungetc(f,c)
#if 0
/* return values of read/write need work */
#define fread(b,s,c,f)		PerlIO_read(f,b,(s*c))
#define fwrite(b,s,c,f)		PerlIO_write(f,b,(s*c))
#else
#define fread(b,s,c,f)		_CANNOT fread
#define fwrite(b,s,c,f)		_CANNOT fwrite
#endif
#define fseek(f,o,w)		PerlIO_seek(f,o,w)
#define ftell(f)		PerlIO_tell(f)
#define rewind(f)		PerlIO_rewind(f)
#define clearerr(f)		PerlIO_clearerr(f)
#define feof(f)			PerlIO_eof(f)
#define ferror(f)		PerlIO_error(f)
#define fdopen(fd,p)		PerlIO_fdopen(fd,p)
#define fileno(f)		PerlIO_fileno(f)
#define popen(c,m)		my_popen(c,m)
#define pclose(f)		my_pclose(f)

#define fsetpos(f,p)		_CANNOT _fsetpos_
#define fgetpos(f,p)		_CANNOT _fgetpos_

#define __filbuf(f)		_CANNOT __filbuf_
#define _filbuf(f)		_CANNOT _filbuf_
#define __flsbuf(c,f)		_CANNOT __flsbuf_
#define _flsbuf(c,f)		_CANNOT _flsbuf_
#define getw(f)			_CANNOT _getw_
#define putw(v,f)		_CANNOT _putw_
#if SFIO_VERSION < 20000101L
#define flockfile(f)		_CANNOT _flockfile_
#define ftrylockfile(f)		_CANNOT _ftrylockfile_
#define funlockfile(f)		_CANNOT _funlockfile_
#endif
#define freopen(p,m,f)		_CANNOT _freopen_
#define setbuf(f,b)		_CANNOT _setbuf_
#define setvbuf(f,b,x,s)	_CANNOT _setvbuf_
#define fscanf			_CANNOT _fscanf_
#define fgets(s,n,f)		_CANNOT _fgets_

/*
 * ex: set ts=8 sts=4 sw=4 et:
 */
                                                                                                                                                                                                                                                                                                                                                                                      usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/CORE/feature.h                                          0000444 0000000 0000000 00000045012 14714567415 020724  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* -*- mode: C; buffer-read-only: t -*-
   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by regen/feature.pl.
   Any changes made here will be lost!
 */


#ifndef PERL_FEATURE_H_
#define PERL_FEATURE_H_

#if defined(PERL_CORE) || defined (PERL_EXT)

#define HINT_FEATURE_SHIFT	26

#define FEATURE_BAREWORD_FILEHANDLES_BIT    0x0001
#define FEATURE_BITWISE_BIT                 0x0002
#define FEATURE_CLASS_BIT                   0x0004
#define FEATURE___SUB___BIT                 0x0008
#define FEATURE_MYREF_BIT                   0x0010
#define FEATURE_DEFER_BIT                   0x0020
#define FEATURE_EVALBYTES_BIT               0x0040
#define FEATURE_MORE_DELIMS_BIT             0x0080
#define FEATURE_FC_BIT                      0x0100
#define FEATURE_INDIRECT_BIT                0x0200
#define FEATURE_ISA_BIT                     0x0400
#define FEATURE_MODULE_TRUE_BIT             0x0800
#define FEATURE_MULTIDIMENSIONAL_BIT        0x1000
#define FEATURE_POSTDEREF_QQ_BIT            0x2000
#define FEATURE_REFALIASING_BIT             0x4000
#define FEATURE_SAY_BIT                     0x8000
#define FEATURE_SIGNATURES_BIT              0x10000
#define FEATURE_STATE_BIT                   0x20000
#define FEATURE_SWITCH_BIT                  0x40000
#define FEATURE_TRY_BIT                     0x80000
#define FEATURE_UNIEVAL_BIT                 0x100000
#define FEATURE_UNICODE_BIT                 0x200000

#define FEATURE_BUNDLE_DEFAULT	0
#define FEATURE_BUNDLE_510	1
#define FEATURE_BUNDLE_511	2
#define FEATURE_BUNDLE_515	3
#define FEATURE_BUNDLE_523	4
#define FEATURE_BUNDLE_527	5
#define FEATURE_BUNDLE_535	6
#define FEATURE_BUNDLE_537	7
#define FEATURE_BUNDLE_539	8
#define FEATURE_BUNDLE_CUSTOM	(HINT_FEATURE_MASK >> HINT_FEATURE_SHIFT)

/* this is preserved for testing and asserts */
#define OLD_CURRENT_HINTS \
    (PL_curcop == &PL_compiling ? PL_hints : PL_curcop->cop_hints)
/* this is the same thing, but simpler (no if) as PL_hints expands
   to PL_compiling.cop_hints */
#define CURRENT_HINTS \
    PL_curcop->cop_hints
#define CURRENT_FEATURE_BUNDLE \
    ((CURRENT_HINTS & HINT_FEATURE_MASK) >> HINT_FEATURE_SHIFT)

#define FEATURE_IS_ENABLED_MASK(mask)                   \
  ((CURRENT_HINTS & HINT_LOCALIZE_HH)                \
    ? (PL_curcop->cop_features & (mask)) : FALSE)

/* The longest string we pass in.  */
#define MAX_FEATURE_LEN (sizeof("bareword_filehandles")-1)

#define FEATURE_FC_IS_ENABLED \
    ( \
	(CURRENT_FEATURE_BUNDLE >= FEATURE_BUNDLE_515 && \
	 CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_539) \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED_MASK(FEATURE_FC_BIT)) \
    )

#define FEATURE_ISA_IS_ENABLED \
    ( \
	(CURRENT_FEATURE_BUNDLE >= FEATURE_BUNDLE_535 && \
	 CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_539) \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED_MASK(FEATURE_ISA_BIT)) \
    )

#define FEATURE_SAY_IS_ENABLED \
    ( \
	(CURRENT_FEATURE_BUNDLE >= FEATURE_BUNDLE_510 && \
	 CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_539) \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED_MASK(FEATURE_SAY_BIT)) \
    )

#define FEATURE_TRY_IS_ENABLED \
    ( \
	CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_539 \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED_MASK(FEATURE_TRY_BIT)) \
    )

#define FEATURE_CLASS_IS_ENABLED \
    ( \
	CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED_MASK(FEATURE_CLASS_BIT) \
    )

#define FEATURE_DEFER_IS_ENABLED \
    ( \
	CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED_MASK(FEATURE_DEFER_BIT) \
    )

#define FEATURE_STATE_IS_ENABLED \
    ( \
	(CURRENT_FEATURE_BUNDLE >= FEATURE_BUNDLE_510 && \
	 CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_539) \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED_MASK(FEATURE_STATE_BIT)) \
    )

#define FEATURE_SWITCH_IS_ENABLED \
    ( \
	(CURRENT_FEATURE_BUNDLE >= FEATURE_BUNDLE_510 && \
	 CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_527) \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED_MASK(FEATURE_SWITCH_BIT)) \
    )

#define FEATURE_BITWISE_IS_ENABLED \
    ( \
	(CURRENT_FEATURE_BUNDLE >= FEATURE_BUNDLE_527 && \
	 CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_539) \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED_MASK(FEATURE_BITWISE_BIT)) \
    )

#define FEATURE_INDIRECT_IS_ENABLED \
    ( \
	CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_527 \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED_MASK(FEATURE_INDIRECT_BIT)) \
    )

#define FEATURE_EVALBYTES_IS_ENABLED \
    ( \
	(CURRENT_FEATURE_BUNDLE >= FEATURE_BUNDLE_515 && \
	 CURRENT_FEATURE_BUNDLE <= FEATURE_BUNDLE_539) \
     || (CURRENT_FEATURE_BUNDLE == FEATURE_BUNDLE_CUSTOM && \
	 FEATURE_IS_ENABLED_MASK(FEATURE_EVALBYTES_BIT)) \
    )
