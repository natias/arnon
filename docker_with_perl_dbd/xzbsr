	}
	if {[llength $badcolors] >= $ncolors} {
	    set badcolors $origbad
	}
    }
    for {set i 0} {$i <= $ncolors} {incr i} {
	set c [lindex $colors $nextcolor]
	if {[incr nextcolor] >= $ncolors} {
	    set nextcolor 0
	}
	if {[lsearch -exact $badcolors $c]} break
    }
    set colormap($id) $c
}

proc initgraph {} {
    global canvy canvy0 lineno numcommits nextcolor linespc
    global mainline mainlinearrow sidelines
    global nchildren ncleft
    global displist nhyperspace

    allcanvs delete all
    set nextcolor 0
    set canvy $canvy0
    set lineno -1
    set numcommits 0
    catch {unset mainline}
    catch {unset mainlinearrow}
    catch {unset sidelines}
    foreach id [array names nchildren] {
	set ncleft($id) $nchildren($id)
    }
    set displist {}
    set nhyperspace 0
}

proc bindline {t id} {
    global canv

    $canv bind $t <Enter> "lineenter %x %y $id"
    $canv bind $t <Motion> "linemotion %x %y $id"
    $canv bind $t <Leave> "lineleave $id"
    $canv bind $t <Button-1> "lineclick %x %y $id 1"
}

proc drawlines {id xtra} {
    global mainline mainlinearrow sidelines lthickness colormap canv

    $canv delete lines.$id
    if {[info exists mainline($id)]} {
	set t [$canv create line $mainline($id) \
		   -width [expr {($xtra + 1) * $lthickness}] \
		   -fill $colormap($id) -tags lines.$id \
		   -arrow $mainlinearrow($id)]
	$canv lower $t
	bindline $t $id
    }
    if {[info exists sidelines($id)]} {
	foreach ls $sidelines($id) {
	    set coords [lindex $ls 0]
	    set thick [lindex $ls 1]
	    set arrow [lindex $ls 2]
	    set t [$canv create line $coords -fill $colormap($id) \
		       -width [expr {($thick + $xtra) * $lthickness}] \
		       -arrow $arrow -tags lines.$id]
	    $canv lower $t
	    bindline $t $id
	}
    }
}

# level here is an index in displist
proc drawcommitline {level} {
    global parents children nparents displist
    global canv canv2 canv3 mainfont namefont canvy linespc
    global lineid linehtag linentag linedtag commitinfo
    global colormap numcommits currentparents dupparents
    global idtags idline idheads idotherrefs idbookmarks
    global lineno lthickness mainline mainlinearrow sidelines
    global commitlisted rowtextx idpos lastuse displist
    global oldnlines olddlevel olddisplist
    global aucolormap curid curidfont obsolete

    incr numcommits
    incr lineno
    set id [lindex $displist $level]
    set lastuse($id) $lineno
    set lineid($lineno) $id
    set idline($id) $lineno
    set shape oval
    set outline #000080
    set ofill [expr {[info exists commitlisted($id)]? "#7f7fff": "white"}]
    if {![info exists commitinfo($id)]} {
	readcommit $id
	if {![info exists commitinfo($id)]} {
	    set commitinfo($id) {"No commit information available"}
	    set nparents($id) 0
	}
    } else {
	switch [lindex $commitinfo($id) 9] secret {
	    set shape rect
	} public {
	    set outline black
	    set ofill blue
	}
    }
    if {[info exists obsolete($id)]} {
	set outline darkgrey
	set ofill lightgrey
    }
    assigncolor $id
    set currentparents {}
    set dupparents {}
    if {[info exists commitlisted($id)] && [info exists parents($id)]} {
	foreach p $parents($id) {
	    if {[lsearch -exact $currentparents $p] < 0} {
		lappend currentparents $p
	    } else {
		# remember that this parent was listed twice
		lappend dupparents $p
	    }
	}
    }
    set x [xcoord $level $level $lineno]
    set y1 $canvy
    set canvy [expr $canvy + $linespc]
    allcanvs conf -scrollregion \
	[list 0 0 0 [expr $y1 + 0.5 * $linespc + 2]]
    if {[info exists mainline($id)]} {
	lappend mainline($id) $x $y1
	if {$mainlinearrow($id) ne "none"} {
	    set mainline($id) [trimdiagstart $mainline($id)]
	}
    }
    drawlines $id 0
    set orad [expr {$linespc / 3}]
    set t [$canv create $shape [expr $x - $orad] [expr $y1 - $orad] \
	       [expr $x + $orad - 1] [expr $y1 + $orad - 1] \
	       -fill $ofill -outline $outline -width 1]
    $canv raise $t
    $canv bind $t <1> {selcanvline {} %x %y}
    set xt [xcoord [llength $displist] $level $lineno]
    if {[llength $currentparents] > 2} {
	set xt [expr {$xt + ([llength $currentparents] - 2) * $linespc}]
    }
    set rowtextx($lineno) $xt
    set idpos($id) [list $x $xt $y1]
    if {[info exists idtags($id)] || [info exists idheads($id)]
	|| [info exists idotherrefs($id)] || [info exists idbookmarks($id)]} {
	set xt [drawtags $id $x $xt $y1]
    }
    set headline [lindex $commitinfo($id) 0]
    set name [lindex $commitinfo($id) 1]
    assignauthorcolor $name
    set fg $aucolormap($name)
    if {$id == $curid} {
	set fn $curidfont
    } else {
	set fn $mainfont
    }

    set date [lindex $commitinfo($id) 2]
    set linehtag($lineno) [$canv create text $xt $y1 -anchor w \
			       -text $headline -font $fn \
			       -fill $fg]
    $canv bind $linehtag($lineno) <<B3>> "rowmenu %X %Y $id"
    set linentag($lineno) [$canv2 create text 3 $y1 -anchor w \
			       -text $name -font $namefont \
			       -fill $fg]
    set linedtag($lineno) [$canv3 create text 3 $y1 -anchor w \
			       -text $date -font $mainfont \
			       -fill $fg]

    set olddlevel $level
    set olddisplist $displist
    set oldnlines [llength $displist]
}

proc drawtags {id x xt y1} {
    global bookmarkcurrent idtags idbookmarks idheads idotherrefs commitinfo
    global linespc lthickness
    global canv mainfont idline rowtextx

    set marks {}
    set nbookmarks 0
    set ntags 0
    set nheads 0
    if {[info exists idtags($id)]} {
	set marks $idtags($id)
	set ntags [llength $marks]
    }
    if {[info exists idbookmarks($id)]} {
	set marks [concat $marks $idbookmarks($id)]
	set nbookmarks [llength $idbookmarks($id)]
    }
    if {[info exists idheads($id)]} {
	set headmark [lindex $commitinfo($id) 7]
	if {$headmark ne "default"} {
	    lappend marks $headmark
	    set nheads 1
	}
    }
    if {$marks eq {}} {
	return $xt
    }

    set delta [expr {int(0.5 * ($linespc - $lthickness))}]
    set yt [expr $y1 - 0.5 * $linespc]
    set yb [expr $yt + $linespc - 1]
    set xvals {}
    set wvals {}
    foreach tag $marks {
	set wid [font measure $mainfont $tag]
	lappend xvals $xt
	lappend wvals $wid
	set xt [expr {$xt + $delta + $wid + $lthickness + $linespc}]
    }
    set t [$canv create line $x $y1 [lindex $xvals end] $y1 \
	       -width $lthickness -fill black -tags tag.$id]
    $canv lower $t
    foreach tag $marks x $xvals wid $wvals {
	set xl [expr $x + $delta]
	set xr [expr $x + $delta + $wid + $lthickness]
	if {[incr ntags -1] >= 0} {
	    # draw a tag
	    set t [$canv create polygon $x [expr $yt + $delta] $xl $yt \
		       $xr $yt $xr $yb $xl $yb $x [expr $yb - $delta] \
		       -width 1 -outline black -fill yellow -tags tag.$id]
	    $canv bind $t <1> [list showtag $tag 1]
	    set rowtextx($idline($id)) [expr {$xr + $linespc}]
	} elseif {[incr nbookmarks -1] >= 0} {
            # draw a tag
            set col "#7f7f7f"
            if {[string compare $bookmarkcurrent $tag] == 0} {
                set col "#bebebe"
            }
            set xl [expr $xl - $delta/2]
            $canv create polygon $x $yt $xr $yt $xr $yb $x $yb \
                -width 1 -outline black -fill $col -tags tag.$id
        } else {
            # draw a head or other ref
            if {[incr nheads -1] >= 0} {
                set col "#00ff00"
            } else {
                set col "#ddddff"
            }
            set xl [expr $xl - $delta/2]
            $canv create polygon $x $yt $xr $yt $xr $yb $x $yb \
                -width 1 -outline black -fill $col -tags tag.$id
	}
	set t [$canv create text $xl $y1 -anchor w -text $tag \
		   -font $mainfont -tags tag.$id]
	if {$ntags >= 0} {
	    $canv bind $t <1> [list showtag $tag 1]
	}
    }
    return $xt
}

proc notecrossings {id lo hi corner} {
    global olddisplist crossings cornercrossings

    for {set i $lo} {[incr i] < $hi} {} {
	set p [lindex $olddisplist $i]
	if {$p == {}} continue
	if {$i == $corner} {
	    if {![info exists cornercrossings($id)]
		|| [lsearch -exact $cornercrossings($id) $p] < 0} {
		lappend cornercrossings($id) $p
	    }
	    if {![info exists cornercrossings($p)]
		|| [lsearch -exact $cornercrossings($p) $id] < 0} {
		lappend cornercrossings($p) $id
	    }
	} else {
	    if {![info exists crossings($id)]
		|| [lsearch -exact $crossings($id) $p] < 0} {
		lappend crossings($id) $p
	    }
	    if {![info exists crossings($p)]
		|| [lsearch -exact $crossings($p) $id] < 0} {
		lappend crossings($p) $id
	    }
	}
    }
}

proc xcoord {i level ln} {
    global canvx0 xspc1 xspc2

    set x [expr {$canvx0 + $i * $xspc1($ln)}]
    if {$i > 0 && $i == $level} {
	set x [expr {$x + 0.5 * ($xspc2 - $xspc1($ln))}]
    } elseif {$i > $level} {
	set x [expr {$x + $xspc2 - $xspc1($ln)}]
    }
    return $x
}

# it seems Tk can't draw arrows on the end of diagonal line segments...
proc trimdiagend {line} {
    while {[llength $line] > 4} {
	set x1 [lindex $line end-3]
	set y1 [lindex $line end-2]
	set x2 [lindex $line end-1]
	set y2 [lindex $line end]
	if {($x1 == $x2) != ($y1 == $y2)} break
	set line [lreplace $line end-1 end]
    }
    return $line
}

proc trimdiagstart {line} {
    while {[llength $line] > 4} {
	set x1 [lindex $line 0]
	set y1 [lindex $line 1]
	set x2 [lindex $line 2]
	set y2 [lindex $line 3]
	if {($x1 == $x2) != ($y1 == $y2)} break
	set line [lreplace $line 0 1]
    }
    return $line
}

proc drawslants {id needonscreen nohs} {
    global canv mainline mainlinearrow sidelines
    global canvx0 canvy xspc1 xspc2 lthickness
    global currentparents dupparents
    global lthickness linespc canvy colormap lineno geometry
    global maxgraphpct maxwidth
    global displist onscreen lastuse
    global parents commitlisted
    global oldnlines olddlevel olddisplist
    global nhyperspace numcommits nnewparents

    if {$lineno < 0} {
	lappend displist $id
	set onscreen($id) 1
	return 0
    }

    set y1 [expr {$canvy - $linespc}]
    set y2 $canvy

    # work out what we need to get back on screen
    set reins {}
    if {$onscreen($id) < 0} {
	# next to do isn't displayed, better get it on screen...
	lappend reins [list $id 0]
    }
    # make sure all the previous commits's parents are on the screen
    foreach p $currentparents {
	if {$onscreen($p) < 0} {
	    lappend reins [list $p 0]
	}
    }
    # bring back anything requested by caller
    if {$needonscreen ne {}} {
	lappend reins $needonscreen
    }

    # try the shortcut
    if {$currentparents == $id && $onscreen($id) == 0 && $reins eq {}} {
	set dlevel $olddlevel
	set x [xcoord $dlevel $dlevel $lineno]
	set mainline($id) [list $x $y1]
	set mainlinearrow($id) none
	set lastuse($id) $lineno
	set displist [lreplace $displist $dlevel $dlevel $id]
	set onscreen($id) 1
	set xspc1([expr {$lineno + 1}]) $xspc1($lineno)
	return $dlevel
    }

    # update displist
    set displist [lreplace $displist $olddlevel $olddlevel]
    set j $olddlevel
    foreach p $currentparents {
	set lastuse($p) $lineno
	if {$onscreen($p) == 0} {
	    set displist [linsert $displist $j $p]
	    set onscreen($p) 1
	    incr j
	}
    }
    if {$onscreen($id) == 0} {
	lappend displist $id
	set onscreen($id) 1
    }

    # remove the null entry if present
    set nullentry [lsearch -exact $displist {}]
    if {$nullentry >= 0} {
	set displist [lreplace $displist $nullentry $nullentry]
    }

    # bring back the ones we need now (if we did it earlier
    # it would change displist and invalidate olddlevel)
    foreach pi $reins {
	# test again in case of duplicates in reins
	set p [lindex $pi 0]
	if {$onscreen($p) < 0} {
	    set onscreen($p) 1
	    set lastuse($p) $lineno
	    set displist [linsert $displist [lindex $pi 1] $p]
	    incr nhyperspace -1
	}
    }

    set lastuse($id) $lineno

    # see if we need to make any lines jump off into hyperspace
    set displ [llength $displist]
    if {$displ > $maxwidth} {
	set ages {}
	foreach x $displist {
	    lappend ages [list $lastuse($x) $x]
	}
	set ages [lsort -integer -index 0 $ages]
	set k 0
	while {$displ > $maxwidth} {
	    set use [lindex $ages $k 0]
	    set victim [lindex $ages $k 1]
	    if {$use >= $lineno - 5} break
	    incr k
	    if {[lsearch -exact $nohs $victim] >= 0} continue
	    set i [lsearch -exact $displist $victim]
	    set displist [lreplace $displist $i $i]
	    set onscreen($victim) -1
	    incr nhyperspace
	    incr displ -1
	    if {$i < $nullentry} {
		incr nullentry -1
	    }
	    set x [lindex $mainline($victim) end-1]
	    lappend mainline($victim) $x $y1
	    set line [trimdiagend $mainline($victim)]
	    set arrow "last"
	    if {$mainlinearrow($victim) ne "none"} {
		set line [trimdiagstart $line]
		set arrow "both"
	    }
	    lappend sidelines($victim) [list $line 1 $arrow]
	    unset mainline($victim)
	}
    }

    set dlevel [lsearch -exact $displist $id]

    # If we are reducing, put in a null entry
    if {$displ < $oldnlines} {
	# does the next line look like a merge?
	# i.e. does it have > 1 new parent?
	if {$nnewparents($id) > 1} {
	    set i [expr {$dlevel + 1}]
	} elseif {$nnewparents([lindex $olddisplist $olddlevel]) == 0} {
	    set i $olddlevel
	    if {$nullentry >= 0 && $nullentry < $i} {
		incr i -1
	    }
	} elseif {$nullentry >= 0} {
	    set i $nullentry
	    while {$i < $displ
		   && [lindex $olddisplist $i] == [lindex $displist $i]} {
		incr i
	    }
	} else {
	    set i $olddlevel
	    if {$dlevel >= $i} {
		incr i
	    }
	}
	if {$i < $displ} {
	    set displist [linsert $displist $i {}]
	    incr displ
	    if {$dlevel >= $i} {
		incr dlevel
	    }
	}
    }

    # decide on the line spacing for the next line
    set lj [expr {$lineno + 1}]
    set maxw [expr {$maxgraphpct * $geometry(canv1) / 100}]
    if {$displ <= 1 || $canvx0 + $displ * $xspc2 <= $maxw} {
	set xspc1($lj) $xspc2
    } else {
	set xspc1($lj) [expr {($maxw - $canvx0 - $xspc2) / ($displ - 1)}]
	if {$xspc1($lj) < $lthickness} {
	    set xspc1($lj) $lthickness
	}
    }

    foreach idi $reins {
	set id [lindex $idi 0]
	set j [lsearch -exact $displist $id]
	set xj [xcoord $j $dlevel $lj]
	set mainline($id) [list $xj $y2]
	set mainlinearrow($id) first
    }

    set i -1
    foreach id $olddisplist {
	incr i
	if {$id == {}} continue
	if {$onscreen($id) <= 0} continue
	set xi [xcoord $i $olddlevel $lineno]
	if {$i == $olddlevel} {
	    foreach p $currentparents {
		set j [lsearch -exact $displist $p]
		set coords [list $xi $y1]
		set xj [xcoord $j $dlevel $lj]
		if {$xj < $xi - $linespc} {
		    lappend coords [expr {$xj + $linespc}] $y1
		    notecrossings $p $j $i [expr {$j + 1}]
		} elseif {$xj > $xi + $linespc} {
		    lappend coords [expr {$xj - $linespc}] $y1
		    notecrossings $p $i $j [expr {$j - 1}]
		}
		if {[lsearch -exact $dupparents $p] >= 0} {
		    # draw a double-width line to indicate the doubled parent
		    lappend coords $xj $y2
		    lappend sidelines($p) [list $coords 2 none]
		    if {![info exists mainline($p)]} {
			set mainline($p) [list $xj $y2]
			set mainlinearrow($p) none
		    }
		} else {
		    # normal case, no parent duplicated
		    set yb $y2
		    set dx [expr {abs($xi - $xj)}]
		    if {0 && $dx < $linespc} {
			set yb [expr {$y1 + $dx}]
		    }
		    if {![info exists mainline($p)]} {
			if {$xi != $xj} {
			    lappend coords $xj $yb
			}
			set mainline($p) $coords
			set mainlinearrow($p) none
		    } else {
			lappend coords $xj $yb
			if {$yb < $y2} {
			    lappend coords $xj $y2
			}
			lappend sidelines($p) [list $coords 1 none]
		    }
		}
	    }
	} else {
	    set j $i
	    if {[lindex $displist $i] != $id} {
		set j [lsearch -exact $displist $id]
	    }
	    if {$j != $i || $xspc1($lineno) != $xspc1($lj)
		|| ($olddlevel < $i && $i < $dlevel)
		|| ($dlevel < $i && $i < $olddlevel)} {
		set xj [xcoord $j $dlevel $lj]
		lappend mainline($id) $xi $y1 $xj $y2
	    }
	}
    }
    return $dlevel
}

# search for x in a list of lists
proc llsearch {llist x} {
    set i 0
    foreach l $llist {
	if {$l == $x || [lsearch -exact $l $x] >= 0} {
	    return $i
	}
	incr i
    }
    return -1
}

proc drawmore {reading} {
    global displayorder numcommits ncmupdate nextupdate
    global stopped nhyperspace parents commitlisted
    global maxwidth onscreen displist currentparents olddlevel

    set n [llength $displayorder]
    while {$numcommits < $n} {
	set id [lindex $displayorder $numcommits]
	set ctxend [expr {$numcommits + 10}]
	if {!$reading && $ctxend > $n} {
	    set ctxend $n
	}
	set dlist {}
	if {$numcommits > 0} {
	    set dlist [lreplace $displist $olddlevel $olddlevel]
	    set i $olddlevel
	    foreach p $currentparents {
		if {$onscreen($p) == 0} {
		    set dlist [linsert $dlist $i $p]
		    incr i
		}
	    }
	}
	set nohs {}
	set reins {}
	set isfat [expr {[llength $dlist] > $maxwidth}]
	if {$nhyperspace > 0 || $isfat} {
	    if {$ctxend > $n} break
	    # work out what to bring back and
	    # what we want to don't want to send into hyperspace
	    set room 1
	    for {set k $numcommits} {$k < $ctxend} {incr k} {
		set x [lindex $displayorder $k]
		set i [llsearch $dlist $x]
		if {$i < 0} {
		    set i [llength $dlist]
		    lappend dlist $x
		}
		if {[lsearch -exact $nohs $x] < 0} {
		    lappend nohs $x
		}
		if {$reins eq {} && $onscreen($x) < 0 && $room} {
		    set reins [list $x $i]
		}
		set newp {}
		if {[info exists commitlisted($x)]} {
		    set right 0
		    foreach p $parents($x) {
			if {[llsearch $dlist $p] < 0} {
			    lappend newp $p
			    if {[lsearch -exact $nohs $p] < 0} {
				lappend nohs $p
			    }
			    if {$reins eq {} && $onscreen($p) < 0 && $room} {
				set reins [list $p [expr {$i + $right}]]
			    }
			}
			set right 1
		    }
		}
		set l [lindex $dlist $i]
		if {[llength $l] == 1} {
		    set l $newp
		} else {
		    set j [lsearch -exact $l $x]
		    set l [concat [lreplace $l $j $j] $newp]
		}
		set dlist [lreplace $dlist $i $i $l]
		if {$room && $isfat && [llength $newp] <= 1} {
		    set room 0
		}
	    }
	}

	set dlevel [drawslants $id $reins $nohs]
	drawcommitline $dlevel
	if {[clock clicks -milliseconds] >= $nextupdate
	    && $numcommits >= $ncmupdate} {
	    doupdate $reading
	    if {$stopped} break
	}
    }
}

# level here is an index in todo
proc updatetodo {level noshortcut} {
    global ncleft todo nnewparents
    global commitlisted parents onscreen

    set id [lindex $todo $level]
    set olds {}
    if {[info exists commitlisted($id)]} {
	foreach p $parents($id) {
	    if {[lsearch -exact $olds $p] < 0} {
		lappend olds $p
	    }
	}
    }
    if {!$noshortcut && [llength $olds] == 1} {
	set p [lindex $olds 0]
	if {$ncleft($p) == 1 && [lsearch -exact $todo $p] < 0} {
	    set ncleft($p) 0
	    set todo [lreplace $todo $level $level $p]
	    set onscreen($p) 0
	    set nnewparents($id) 1
	    return 0
	}
    }

    set todo [lreplace $todo $level $level]
    set i $level
    set n 0
    foreach p $olds {
	incr ncleft($p) -1
	set k [lsearch -exact $todo $p]
	if {$k < 0} {
	    set todo [linsert $todo $i $p]
	    set onscreen($p) 0
	    incr i
	    incr n
	}
    }
    set nnewparents($id) $n

    return 1
}

proc decidenext {{noread 0}} {
    global ncleft todo
    global datemode cdate
    global commitinfo

    # choose which one to do next time around
    set todol [llength $todo]
    set level -1
    set latest {}
    for {set k $todol} {[incr k -1] >= 0} {} {
	set p [lindex $todo $k]
	if {$ncleft($p) == 0} {
	    if {$datemode} {
		if {![info exists commitinfo($p)]} {
		    if {$noread} {
			return {}
		    }
		    readcommit $p
		}
		if {$latest == {} || $cdate($p) > $latest} {
		    set level $k
		    set latest $cdate($p)
		}
	    } else {
		set level $k
		break
	    }
	}
    }
    if {$level < 0} {
	if {$todo != {}} {
	    puts "ERROR: none of the pending commits can be done yet:"
	    foreach p $todo {
		puts "  $p ($ncleft($p))"
	    }
	}
	return -1
    }

    return $level
}

proc drawcommit {id} {
    global phase todo nchildren datemode nextupdate
    global numcommits ncmupdate displayorder todo onscreen

    if {$phase != "incrdraw"} {
	set phase incrdraw
	set displayorder {}
	set todo {}
	initgraph
    }
    if {$nchildren($id) == 0} {
	lappend todo $id
	set onscreen($id) 0
    }
    set level [decidenext 1]
    if {$level == {} || $id != [lindex $todo $level]} {
	return
    }
    while 1 {
	lappend displayorder [lindex $todo $level]
	if {[updatetodo $level $datemode]} {
	    set level [decidenext 1]
	    if {$level == {}} break
	}
	set id [lindex $todo $level]
	if {![info exists commitlisted($id)]} {
	    break
	}
    }
    drawmore 1
}

proc finishcommits {} {
    global phase
    global canv mainfont ctext maincursor textcursor

    if {$phase != "incrdraw"} {
	$canv delete all
	$canv create text 3 3 -anchor nw -text "No commits selected" \
	    -font $mainfont -tags textitems
	set phase {}
    } else {
	drawrest
    }
    . config -cursor $maincursor
    settextcursor $textcursor
}

# Don't change the text pane cursor if it is currently the hand cursor,
# showing that we are over a sha1 ID link.
proc settextcursor {c} {
    global ctext curtextcursor

    if {[$ctext cget -cursor] == $curtextcursor} {
	$ctext config -cursor $c
    }
    set curtextcursor $c
}

proc drawgraph {} {
    global nextupdate startmsecs ncmupdate
    global displayorder onscreen

    if {$displayorder == {}} return
    set startmsecs [clock clicks -milliseconds]
    set nextupdate [expr $startmsecs + 100]
    set ncmupdate 1
    initgraph
    foreach id $displayorder {
	set onscreen($id) 0
    }
    drawmore 0
}

proc drawrest {} {
    global phase stopped redisplaying selectedline
    global datemode todo displayorder
    global numcommits ncmupdate
    global nextupdate startmsecs

    set level [decidenext]
    if {$level >= 0} {
	set phase drawgraph
	while 1 {
	    lappend displayorder [lindex $todo $level]
	    set hard [updatetodo $level $datemode]
	    if {$hard} {
		set level [decidenext]
		if {$level < 0} break
	    }
	}
	drawmore 0
    }
    set phase {}
    set drawmsecs [expr [clock clicks -milliseconds] - $startmsecs]
    #puts "overall $drawmsecs ms for $numcommits commits"
    if {$redisplaying} {
	if {$stopped == 0 && [info exists selectedline]} {
	    selectline $selectedline 0
	}
	if {$stopped == 1} {
	    set stopped 0
	    after idle drawgraph
	} else {
	    set redisplaying 0
	}
    }
}

proc findmatches {f} {
    global findtype foundstring foundstrlen
    if {$findtype == "Regexp"} {
	set matches [regexp -indices -all -inline $foundstring $f]
    } else {
	if {$findtype == "IgnCase"} {
	    set str [string tolower $f]
	} else {
	    set str $f
	}
	set matches {}
	set i 0
	while {[set j [string first $foundstring $str $i]] >= 0} {
	    lappend matches [list $j [expr $j+$foundstrlen-1]]
	    set i [expr $j + $foundstrlen]
	}
    }
    return $matches
}

proc dofind {} {
    global findtype findloc findstring markedmatches commitinfo
    global numcommits lineid linehtag linentag linedtag
    global mainfont namefont canv canv2 canv3 selectedline
    global matchinglines foundstring foundstrlen

    stopfindproc
    unmarkmatches
    focus .
    set matchinglines {}
    if {$findloc == "Pickaxe"} {
	findpatches
	return
    }
    if {$findtype == "IgnCase"} {
	set foundstring [string tolower $findstring]
    } else {
	set foundstring $findstring
    }
    set foundstrlen [string length $findstring]
    if {$foundstrlen == 0} return
    if {$findloc == "Files"} {
	findfiles
	return
    }
    if {![info exists selectedline]} {
	set oldsel -1
    } else {
	set oldsel $selectedline
    }
    set didsel 0
    set fldtypes {Headline Author Date CDate Comment}
    for {set l 0} {$l < $numcommits} {incr l} {
	set id $lineid($l)
	set info $commitinfo($id)
	set doesmatch 0
	foreach f $info ty $fldtypes {
	    if {$findloc != "All fields" && $findloc != $ty} {
		continue
	    }
	    set matches [findmatches $f]
	    if {$matches == {}} continue
	    set doesmatch 1
	    if {$ty == "Headline"} {
		markmatches $canv $l $f $linehtag($l) $matches $mainfont
	    } elseif {$ty == "Author"} {
		markmatches $canv2 $l $f $linentag($l) $matches $namefont
	    } elseif {$ty == "Date"} {
		markmatches $canv3 $l $f $linedtag($l) $matches $mainfont
	    }
	}
	if {$doesmatch} {
	    lappend matchinglines $l
	    if {!$didsel && $l > $oldsel} {
		findselectline $l
		set didsel 1
	    }
	}
    }
    if {$matchinglines == {}} {
	bell
    } elseif {!$didsel} {
	findselectline [lindex $matchinglines 0]
    }
}

proc findselectline {l} {
    global findloc commentend ctext
    selectline $l 1
    if {$findloc == "All fields" || $findloc == "Comments"} {
	# highlight the matches in the comments
	set f [$ctext get 1.0 $commentend]
	set matches [findmatches $f]
	foreach match $matches {
	    set start [lindex $match 0]
	    set end [expr [lindex $match 1] + 1]
	    $ctext tag add found "1.0 + $start c" "1.0 + $end c"
	}
    }
}

proc findnext {restart} {
    global matchinglines selectedline
    if {![info exists matchinglines]} {
	if {$restart} {
	    dofind
	}
	return
    }
    if {![info exists selectedline]} return
    foreach l $matchinglines {
	if {$l > $selectedline} {
	    findselectline $l
	    return
	}
    }
    bell
}

proc findprev {} {
    global matchinglines selectedline
    if {![info exists matchinglines]} {
	dofind
	return
    }
    if {![info exists selectedline]} return
    set prev {}
    foreach l $matchinglines {
	if {$l >= $selectedline} break
	set prev $l
    }
    if {$prev != {}} {
	findselectline $prev
    } else {
	bell
    }
}

proc findlocchange {name ix op} {
    global findloc findtype findtypemenu
    if {$findloc == "Pickaxe"} {
	set findtype Exact
	set state disabled
    } else {
	set state normal
