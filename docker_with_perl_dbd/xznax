L<IO::Socket::SSL> inherits from another L<IO::Socket> module.
The choice of the super class depends on the installed modules:

=over 4

=item *

If L<IO::Socket::IP> with at least version 0.20 is installed it will use this
module as super class, transparently providing IPv6 and IPv4 support.

=item *

If L<IO::Socket::INET6> is installed it will use this module as super class,
transparently providing IPv6 and IPv4 support.

=item *

Otherwise it will fall back to L<IO::Socket::INET>, which is a perl core module.
With L<IO::Socket::INET> you only get IPv4 support.

=back

Please be aware that with the IPv6 capable super classes, it will look first
for the IPv6 address of a given hostname. If the resolver provides an IPv6
address, but the host cannot be reached by IPv6, there will be no automatic
fallback to IPv4.
To avoid these problems you can enforce IPv4 for a specific socket by
using the C<Domain> or C<Family> option with the value AF_INET as described in
L<IO::Socket::IP>. Alternatively you can enforce IPv4 globally by loading
L<IO::Socket::SSL> with the option 'inet4', in which case it will use the IPv4
only class L<IO::Socket::INET> as the super class.

L<IO::Socket::SSL> will provide all of the methods of its super class, but
sometimes it will override them to match the behavior expected from SSL or to
provide additional arguments.

The new or changed methods are described below, but please also read the
section about SSL specific error handling.

=over 4

=item Error Handling

If an SSL specific error occurs, the global variable C<$SSL_ERROR> will be set.
If the error occurred on an existing SSL socket, the method C<errstr> will
give access to the latest socket specific error.
Both C<$SSL_ERROR> and the C<errstr> method give a dualvar similar to C<$!>, e.g.
providing an error number in numeric context or an error description in string
context.


=item B<new(...)>

Creates a new L<IO::Socket::SSL> object.  You may use all the friendly options
that came bundled with the super class (e.g. L<IO::Socket::IP>,
L<IO::Socket::INET>, ...) plus (optionally) the ones described below.
If you don't specify any SSL related options it will do its best in using
secure defaults, e.g. choosing good ciphers, enabling proper verification, etc.

=over 2

=item SSL_server

Set this option to a true value if the socket should be used as a server.
If this is not explicitly set it is assumed if the C<Listen> parameter is given
when creating the socket.

=item SSL_hostname

This can be given to specify the hostname used for SNI, which is needed if you
have multiple SSL hostnames on the same IP address. If not given it will try to
determine the hostname from C<PeerAddr>, which will fail if only an IP was given or if
this argument is used within C<start_SSL>.

If you want to disable SNI, set this argument to ''.

Currently only supported for the client side and will be ignored for the server
side.

See section "SNI Support" for details of SNI the support.

=item SSL_startHandshake

If this option is set to false (defaults to true) it will not start the SSL
handshake yet. This has to be done later with C<accept_SSL> or C<connect_SSL>.
Before the handshake is started read/write/etc. can be used to exchange plain
data.

=item SSL_keepSocketOnError

If this option is set to true (defaults to false) it will not close the
underlying TCP socket on errors. In most cases there is no real use for this
behavior since both sides of the TCP connection will probably have a
different idea of the current state of the connection.

=item SSL_ca | SSL_ca_file | SSL_ca_path

Usually you want to verify that the peer certificate has been signed by a
trusted certificate authority. In this case you should use this option to
specify the file (C<SSL_ca_file>) or directory (C<SSL_ca_path>) containing the
certificateZ<>(s) of the trusted certificate authorities.

C<SSL_ca_path> can also be an array or a string containing multiple path, where
the path are separated by the platform specific separator. This separator is
C<;> on DOS, Windows, Netware, C<,> on VMS and C<:> for all the other systems.
If multiple path are given at least one of these must be accessible.

You can also give a list of X509* certificate handles (like you get from
L<Net::SSLeay> or L<IO::Socket::SSL::Utils::PEM_xxx2cert>) with C<SSL_ca>. These
will be added to the CA store before path and file and thus take precedence.
If neither SSL_ca, nor SSL_ca_file or SSL_ca_path are set it will use
C<default_ca()> to determine the user-set or system defaults.
If you really don't want to set a CA set SSL_ca_file or SSL_ca_path to
C<\undef> or SSL_ca to an empty list. (unfortunately C<''> is used by some
modules using L<IO::Socket::SSL> when CA is not explicitly given).

=item SSL_client_ca | SSL_client_ca_file

If verify_mode is VERIFY_PEER on the server side these options can be used to
set the list of acceptable CAs for the client. This way the client can select
they required certificate from a list of certificates.
The value for these options is similar to C<SSL_ca> and C<SSL_ca_file>.

=item SSL_fingerprint

Sometimes you have a self-signed certificate or a certificate issued by an
unknown CA and you really want to accept it, but don't want to disable
verification at all. In this case you can specify the fingerprint of the
certificate as C<'algo$hex_fingerprint'>. C<algo> is a fingerprint algorithm
supported by OpenSSL, e.g. 'sha1','sha256'... and C<hex_fingerprint> is the
hexadecimal representation of the binary fingerprint. Any colons inside the
hex string will be ignored.

If you want to use the fingerprint of the pubkey inside the certificate instead
of the certificate use the syntax C<'algo$pub$hex_fingerprint'> instead.
To get the fingerprint of an established connection you can use
C<get_fingerprint>.

It is also possible to skip C<algo$>, i.e. only specify the fingerprint. In
this case the likely algorithms will be automatically detected based on the
length of the digest string.

You can specify a list of fingerprints in case you have several acceptable
certificates.
If a fingerprint matches the topmost (i.e. leaf) certificate no additional
validations can make the verification fail.

=item SSL_cert_file | SSL_cert | SSL_key_file | SSL_key

If you create a server you usually need to specify a server certificate which
should be verified by the client. Same is true for client certificates, which
should be verified by the server.
The certificate can be given as a file with SSL_cert_file or as an internal
representation of an X509* object (like you get from L<Net::SSLeay> or
L<IO::Socket::SSL::Utils::PEM_xxx2cert>) with SSL_cert.
If given as a file it will automatically detect the format.
Supported file formats are PEM, DER and PKCS#12, where PEM and PKCS#12 can
contain the certificate and the chain to use, while DER can only contain a single
certificate.

If given as a list of X509* please note, that the all the chain certificates
(e.g. all except the first) will be "consumed" by openssl and will be freed
if the SSL context gets destroyed - so you should never free them yourself. But
the servers certificate (e.g. the first) will not be consumed by openssl and
thus must be freed by the application.

For each certificate a key is need, which can either be given as a file with
SSL_key_file or as an internal representation of an EVP_PKEY* object with
SSL_key (like you get from L<Net::SSLeay> or
L<IO::Socket::SSL::Utils::PEM_xxx2key>).
If a key was already given within the PKCS#12 file specified by SSL_cert_file
it will ignore any SSL_key or SSL_key_file.
If no SSL_key or SSL_key_file was given it will try to use the PEM file given
with SSL_cert_file again, maybe it contains the key too.

If your SSL server should be able to use different certificates on the same IP
address, depending on the name given by SNI, you can use a hash reference
instead of a file with C<<hostname => cert_file>>.

If your SSL server should be able to use both RSA and ECDSA certificates for the
same domain/IP a similar hash reference like with SNI is given. The
domain names used to specify the additional certificates should be
C<hostname%whatever>, i.e.  C<hostname%ecc> or similar. This needs at least
OpenSSL 1.0.2. To let the server pick the certificate based on the clients
cipher preference C<SSL_honor_cipher_order> should be set to false.

In case certs and keys are needed but not given it might fall back to builtin
defaults, see "Defaults for Cert, Key and CA".

Examples:

 SSL_cert_file => 'mycert.pem',
 SSL_key_file => 'mykey.pem',

 SSL_cert_file => {
    "foo.example.org" => 'foo-cert.pem',
    "foo.example.org%ecc" => 'foo-ecc-cert.pem',
    "bar.example.org" => 'bar-cert.pem',
    # used when nothing matches or client does not support SNI
    '' => 'default-cert.pem',
    '%ecc' => 'default-ecc-cert.pem',
 },
 SSL_key_file => {
    "foo.example.org" => 'foo-key.pem',
    "foo.example.org%ecc" => 'foo-ecc-key.pem',
    "bar.example.org" => 'bar-key.pem',
    # used when nothing matches or client does not support SNI
    '' => 'default-key.pem',
    '%ecc' => 'default-ecc-key.pem',
 }

=item SSL_passwd_cb

If your private key is encrypted, you might not want the default password prompt
from Net::SSLeay.  This option takes a reference to a subroutine that should
return the password required to decrypt your private key.

=item SSL_use_cert

If this is true, it forces IO::Socket::SSL to use a certificate and key, even if
you are setting up an SSL client.  If this is set to 0 (the default), then you
will only need a certificate and key if you are setting up a server.

SSL_use_cert will implicitly be set if SSL_server is set.
For convenience it is also set if it was not given but a cert was given for use
(SSL_cert_file or similar).


=item SSL_version

Sets the version of the SSL protocol used to transmit data.
'SSLv23' uses a handshake compatible with SSL2.0, SSL3.0 and TLS1.x, while
'SSLv2', 'SSLv3', 'TLSv1', 'TLSv1_1', 'TLSv1_2', or 'TLSv1_3' restrict
handshake and protocol to the specified version.
All values are case-insensitive.  Instead of 'TLSv1_1', 'TLSv1_2', and
'TLSv1_3' one can also use 'TLSv11', 'TLSv12', and 'TLSv13'.  Which protocol
versions are actually supported depend on the versions of OpenSSL and
Net::SSLeay installed, but modern protocols like TLS 1.3 are supported by these
for many years now.

Independent from the handshake format you can limit to set of accepted SSL
versions by adding !version separated by ':'.

The default SSL_version is 'SSLv23:!TLSv1:!TLSv1_1:!SSLv3:!SSLv2'. This means,
that the handshake format is compatible to SSL2.0 and higher, but that the
successful handshake is limited to TLS1.2 and higher, that is no SSL2.0, SSL3.0,
TLS 1.0 or TLS 1.1 because these versions have serious security issues and
should not be used anymore.

You can also use !TLSv1_1 and !TLSv1_2 to disable TLS versions 1.1 and 1.2 while
still allowing TLS version 1.0.
Setting the version instead to 'TLSv1' might break interaction with very old or
broken clients, which expect a SSL2.0 compatible handshake. On the other
side some broken clients just close the connection when they receive a TLS
version 1.1 request. In this case setting the version to
'SSLv23:!SSLv2:!SSLv3:!TLSv1_1:!TLSv1_2' might help.

=item SSL_cipher_list

If this option is set the cipher list for the connection will be set to the
given value, e.g. something like 'ALL:!LOW:!EXP:!aNULL'. This will only affect
ciphers for TLS 1.2 and lower. See the OpenSSL documentation
(L<https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html#CIPHER-STRINGS>)
for more details.

Unless you fail to contact your peer because of no shared ciphers it is
recommended to leave this option at the default setting, which uses the system
default but disables some insecure ciphers which might still be enabled on older
systems.

In case different cipher lists are needed for different SNI hosts a hash can be
given with the host as key and the cipher suite as value, similar to
B<SSL_cert*>.

=item SSL_ciphersuites

If this option is set the TLS 1.3 ciphersuites for the connection will be
set to the given value. This is similar to SSL_cipher_list, but only for TLS 1.3
ciphers. See argument C<-ciphersuites> in the OpenSSL documentation
(L<https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html>) for
details.

Unless you fail to contact your peer because of no shared ciphers it is
recommended to leave this option at the default setting, which uses the system
default.

In case different cipher lists are needed for different SNI hosts a hash can be
given with the host as key and the cipher suite as value, similar to
B<SSL_cert*>.

=item SSL_honor_cipher_order

If this option is true the cipher order the server specified is used instead
of the order proposed by the client. This option defaults to true to make use of
our secure cipher list setting.

=item SSL_dh_file

To create a server which provides forward secrecy you need to either give the DH
parameters or (better, because faster) the ECDH curve. This setting cares
about DH parameters.

To support non-elliptic Diffie-Hellman key exchange a suitable file needs to
be given here or the SSL_dh should be used with an appropriate value.
See dhparam command in openssl for more information.

If neither C<SSL_dh_file> nor C<SSL_dh> are set a builtin DH parameter with a
length of 2048 bit is used to offer DH key exchange by default. If you don't
want this (e.g. disable DH key exchange) explicitly set this or the C<SSL_dh>
parameter to undef.

=item SSL_dh

Like SSL_dh_file, but instead of giving a file you use a preloaded or generated
DH*.

=item SSL_ecdh_curve

To create a server which provides forward secrecy you need to either give the DH
parameters or (better, because faster) the ECDH curve. This setting cares
about the ECDH curve(s).

To support Elliptic Curve Diffie-Hellmann key exchange the OID or NID of at
least one suitable curve needs to be provided here.

With OpenSSL 1.1.0+ this parameter defaults to C<auto>, which means that it
lets OpenSSL pick the best settings. If support for CTX_set_ecdh_auto is
implemented in Net::SSLeay (needs at least version 1.86) it will use this to
implement the same default.  Otherwise it will default to C<prime256v1>
(builtin of OpenSSL) in order to offer ECDH key exchange by default.

If setting groups or curves is supported by Net::SSLeay (needs at least
version 1.86) then multiple curves can be given here in the order of the
preference, i.e.  C<P-521:P-384:P-256>. When used at the client side this
will include the supported curves as extension in the TLS handshake.

If you don't want to have ECDH key exchange this could be set to undef or
set C<SSL_ciphers> to exclude all of these ciphers.

You can check if ECDH support is available by calling
C<< IO::Socket::SSL->can_ecdh >>.

=item SSL_verify_mode

This option sets the verification mode for the peer certificate.
You may combine SSL_VERIFY_PEER (verify_peer), SSL_VERIFY_FAIL_IF_NO_PEER_CERT
(fail verification if no peer certificate exists; ignored for clients),
SSL_VERIFY_CLIENT_ONCE (verify client once; ignored for clients).
See OpenSSL man page for SSL_CTX_set_verify for more information.

The default is SSL_VERIFY_NONE for server  (e.g. no check for client
certificate) and SSL_VERIFY_PEER for client (check server certificate).

=item SSL_verify_callback

If you want to verify certificates yourself, you can pass a sub reference along
with this parameter to do so.  When the callback is called, it will be passed:

=over 4

=item 1.
a true/false value that indicates what OpenSSL thinks of the certificate,

=item 2.
a C-style memory address of the certificate store,

=item 3.
a string containing the certificate's issuer attributes and owner attributes,
and

=item 4.
a string containing any errors encountered (0 if no errors).

=item 5.
a C-style memory address of the peer's own certificate (convertible to
PEM form with Net::SSLeay::PEM_get_string_X509()).

=item 6.
The depth of the certificate in the chain. Depth 0 is the leaf certificate.

=back

The function should return 1 or 0, depending on whether it thinks the
certificate is valid or invalid.  The default is to let OpenSSL do all of the
busy work.

The callback will be called for each element in the certificate chain.

See the OpenSSL documentation for SSL_CTX_set_verify for more information.

=item SSL_verifycn_scheme

The scheme is used to correctly verify the identity inside the certificate
by using the hostname of the peer.
See the information about the verification schemes in B<verify_hostname>.

If you don't specify a scheme it will use 'default', but only complain loudly if
the name verification fails instead of letting the whole certificate
verification fail. THIS WILL CHANGE, e.g. it will let the certificate
verification fail in the future if the hostname does not match the certificate
!!!!  To override the name used in verification use B<SSL_verifycn_name>.

The scheme 'default' is a superset of the usual schemes, which will accept the
hostname in common name and subjectAltName and allow wildcards everywhere.
While using this scheme is way more secure than no name verification at all you
better should use the scheme specific to your application protocol, e.g. 'http',
'ftp'...

If you are really sure, that you don't want to verify the identity using the
hostname  you can use 'none' as a scheme. In this case you'd better have
alternative forms of verification, like a certificate fingerprint or do a manual
verification later by calling B<verify_hostname> yourself.

=item SSL_verifycn_publicsuffix

This option is used to specify the behavior when checking wildcards certificates
for public suffixes, e.g. no wildcard certificates for *.com or *.co.uk should
be accepted, while *.example.com or *.example.co.uk is ok.

If not specified it will simply use the builtin default of
L<IO::Socket::SSL::PublicSuffix>, you can create another object with
from_string or from_file of this module.

To disable verification of public suffix set this option to C<''>.

=item SSL_verifycn_name

Set the name which is used in verification of hostname. If SSL_verifycn_scheme
is set and no SSL_verifycn_name is given it will try to use SSL_hostname or
PeerHost and PeerAddr settings and fail if no name can be determined.
If SSL_verifycn_scheme is not set it will use a default scheme and warn if it
cannot determine a hostname, but it will not fail.

Using PeerHost or PeerAddr works only if you create the connection directly
with C<< IO::Socket::SSL->new >>, if an IO::Socket::INET object is upgraded
with B<start_SSL> the name has to be given in B<SSL_verifycn_name> or
B<SSL_hostname>.

=item SSL_check_crl

If you want to verify that the peer certificate has not been revoked
by the signing authority, set this value to true. OpenSSL will search
for the CRL in your SSL_ca_path, or use the file specified by
SSL_crl_file.  See the Net::SSLeay documentation for more details.
Note that this functionality appears to be broken with OpenSSL <
v0.9.7b, so its use with lower versions will result in an error.

=item SSL_crl_file

If you want to specify the CRL file to be used, set this value to the
pathname to be used.  This must be used in addition to setting
SSL_check_crl.

=item SSL_ocsp_mode

Defines how certificate revocation is done using OCSP (Online Status Revocation
Protocol). The default is to send a request for OCSP stapling to the server and
if the server sends an OCSP response back the result will be used.

Any other OCSP checking needs to be done manually with C<ocsp_resolver>.

The following flags can be combined with C<|>:

=over 8

=item SSL_OCSP_NO_STAPLE

Don't ask for OCSP stapling.
This is the default if SSL_verify_mode is VERIFY_NONE.

=item SSL_OCSP_TRY_STAPLE

Try OCSP stapling, but don't complain if it gets no stapled response back.
This is the default if SSL_verify_mode is VERIFY_PEER (the default).

=item SSL_OCSP_MUST_STAPLE

Consider it a hard error, if the server does not send a stapled OCSP response
back. Most servers currently send no stapled OCSP response back.

=item SSL_OCSP_FAIL_HARD

Fail hard on response errors, default is to fail soft like the browsers do.
Soft errors mean, that the OCSP response is not usable, e.g. no response,
error response, no valid signature etc.
Certificate revocations inside a verified response are considered hard errors
in any case.

Soft errors inside a stapled response are never considered hard, e.g. it is
expected that in this case an OCSP request will be send to the responsible
OCSP responder.

=item SSL_OCSP_FULL_CHAIN

This will set up the C<ocsp_resolver> so that all certificates from the peer
chain will be checked, otherwise only the leaf certificate will be checked
against revocation.

=back

=item SSL_ocsp_staple_callback

If this callback is defined, it will be called with the SSL object and the OCSP
response handle obtained from the peer, e.g. C<<$cb->($ssl,$resp)>>.
If the peer did not provide a stapled OCSP response the function will be called
with C<$resp=undef>.
Because the OCSP response handle is no longer valid after leaving this function
it should not by copied or freed. If access to the response is necessary after
leaving this function it can be serialized with
C<Net::SSLeay::i2d_OCSP_RESPONSE>.

If no such callback is provided, it will use the default one, which verifies the
response and uses it to check if the certificate(s) of the connection got
revoked.

=item SSL_ocsp_cache

With this option a cache can be given for caching OCSP responses, which could
be shared between different SSL contexts. If not given a cache specific to the
SSL context only will be used.

You can either create a new cache with
C<< IO::Socket::SSL::OCSP_Cache->new([size]) >> or implement your own cache,
which needs to have methods C<put($key,\%entry)> and C<get($key)> (returning
C<\%entry>) where entry is the hash representation of the OCSP response with
fields like C<nextUpdate>. The default implementation of the cache will consider
responses valid as long as C<nextUpdate> is less then the current time.

=item SSL_reuse_ctx

If you have already set the above options for a previous instance of
IO::Socket::SSL, then you can reuse the SSL context of that instance by passing
it as the value for the SSL_reuse_ctx parameter.  You may also create a
new instance of the IO::Socket::SSL::SSL_Context class, using any context
options that you desire without specifying connection options, and pass that
here instead.

If you use this option, all other context-related options that you pass
in the same call to new() will be ignored unless the context supplied was
invalid.  Note that, contrary to versions of IO::Socket::SSL below v0.90, a
global SSL context will not be implicitly used unless you use the
set_default_context() function.

=item SSL_create_ctx_callback

With this callback you can make individual settings to the context after it
got created and the default setup was done.
The callback will be called with the CTX object from Net::SSLeay as the single
argument.

Example for limiting the server session cache size:

  SSL_create_ctx_callback => sub {
      my $ctx = shift;
      Net::SSLeay::CTX_sess_set_cache_size($ctx,128);
  }

=item SSL_session_cache_size

If you make repeated connections to the same host/port and the SSL renegotiation
time is an issue, you can turn on client-side session caching with this option
by specifying a positive cache size.  For successive connections, pass the
SSL_reuse_ctx option to the new() calls (or use set_default_context()) to make
use of the cached sessions.  The session cache size refers to the number of
unique host/port pairs that can be stored at one time; the oldest sessions in
the cache will be removed if new ones are added.

This option does not effect the session cache a server has for it's clients,
e.g. it does not affect SSL objects with SSL_server set.

Note that session caching with TLS 1.3 needs at least Net::SSLeay 1.86.

=item SSL_session_cache

Specifies session cache object which should be used instead of creating a new.
Overrules SSL_session_cache_size.
This option is useful if you want to reuse the cache, but not the rest of
the context.

A session cache object can be created using
C<< IO::Socket::SSL::Session_Cache->new( cachesize ) >>.

Use set_default_session_cache() to set a global cache object.

=item SSL_session_key

Specifies a key to use for lookups and inserts into client-side session cache.
Per default ip:port of destination will be used, but sometimes you want to
share the same session over multiple ports on the same server (like with FTPS).

=item SSL_session_id_context

This gives an id for the servers session cache. It's necessary if you want
clients to connect with a client certificate. If not given but SSL_verify_mode
specifies the need for client certificate a context unique id will be picked.

=item SSL_error_trap

When using the accept() or connect() methods, it may be the case that the
actual socket connection works but the SSL negotiation fails, as in the case of
an HTTP client connecting to an HTTPS server.  Passing a subroutine ref attached
to this parameter allows you to gain control of the orphaned socket instead of
having it be closed forcibly.
The subroutine, if called, will be passed two parameters:
a reference to the socket on which the SSL negotiation failed and the full
text of the error message.

=item SSL_npn_protocols

If used on the server side it specifies list of protocols advertised by SSL
server as an array ref, e.g. ['spdy/2','http1.1'].
On the client side it specifies the protocols offered by the client for NPN
as an array ref.
See also method C<next_proto_negotiated>.

Next Protocol Negotiation (NPN) is available with Net::SSLeay 1.46+ and
openssl-1.0.1+. NPN is unavailable in TLSv1.3 protocol.
To check support you might call C<< IO::Socket::SSL->can_npn() >>.
If you use this option with an unsupported Net::SSLeay/OpenSSL it will
throw an error.

=item SSL_alpn_protocols

If used on the server side it specifies list of protocols supported by the SSL
server as an array ref, e.g. ['http/2.0', 'spdy/3.1','http/1.1'].
On the client side it specifies the protocols advertised by the client for ALPN
as an array ref.
See also method C<alpn_selected>.

Application-Layer Protocol Negotiation (ALPN) is available with Net::SSLeay
1.56+ and openssl-1.0.2+. More details about the extension are in RFC7301. To
check support you might call C<< IO::Socket::SSL->can_alpn() >>. If you use
this option with an unsupported Net::SSLeay/OpenSSL it will throw an error.

Note that some client implementations may encounter problems if both NPN and
ALPN are specified. Since ALPN is intended as a replacement for NPN, try
providing ALPN protocols then fall back to NPN if that fails.

=item SSL_ticket_keycb => [$sub,$data] | $sub

This is a callback used for stateless session reuse (Session Tickets, RFC 5077).

This callback will be called as C<< $sub->($data,[$key_name]) >> where C<$data>
is the argument given to SSL_ticket_keycb (or undef) and C<$key_name> depends
on the mode:

=over 8

=item encrypt ticket

If a ticket needs to be encrypted the callback will be called without
C<$key_name>. In this case it should return C<($current_key,$current_key_name>)
where C<$current_key> is the current key (32 byte random data) and
C<$current_key_name> the name associated with this key (exactly 16 byte). This
C<$current_key_name> will be incorporated into the ticket.

=item decrypt ticket

If a ticket needs to be decrypted the callback will be called with C<$key_name>
as found in the ticket. It should return C<($key,$current_key_name>) where
C<$key> is the key associated with the given C<$key_name> and
C<$current_key_name> the name associated with the currently active key.
If C<$current_key_name> is different from the given C<$key_name> the callback
will be called again to re-encrypt the ticket with the currently active key.

If no key can be found which matches the given C<$key_name> then this function
should return nothing (empty list).

This mechanism should be used to limit the life time for each key encrypting the
ticket. Compromise of a ticket encryption key might lead to decryption of SSL
sessions which used session tickets protected by this key.

=back

Example:

    Net::SSLeay::RAND_bytes(my $oldkey,32);
    Net::SSLeay::RAND_bytes(my $newkey,32);
    my $oldkey_name = pack("a16",'oldsecret');
    my $newkey_name = pack("a16",'newsecret');

    my @keys = (
       [ $newkey_name, $newkey ], # current active key
       [ $oldkey_name, $oldkey ], # already expired
    );

    my $keycb = [ sub {
       my ($mykeys,$name) = @_;

       # return (current_key, current_key_name) if no name given
       return ($mykeys->[0][1],$mykeys->[0][0]) if ! $name;

       # return (matching_key, current_key_name) if we find a key matching
       # the given name
       for(my $i = 0; $i<@$mykeys; $i++) {
	   next if $name ne $mykeys->[$i][0];
	   return ($mykeys->[$i][1],$mykeys->[0][0]);
       }

       # no matching key found
       return;
    },\@keys ];

    my $srv = IO::Socket::SSL->new(..., SSL_ticket_keycb => $keycb);

=item SSL_mode_release_buffers 1|0

This enables or disables the SSL_MODE_RELEASE_BUFFERS option on the SSL object.
With this option the read buffer will be released after each SSL_read but will
need to be reallocated for each new SSL_read. If memory usage is a concern this
might save lots of memory in the mean time though, about 34k per idle SSL
connection according to the documentation in SSL_CTX_set_mode(3ssl).

=back

=item B<accept>

This behaves similar to the accept function of the underlying socket class, but
additionally does the initial SSL handshake. But because the underlying socket
class does return a blocking file handle even when accept is called on a
non-blocking socket, the SSL handshake on the new file object will be done in a
blocking way. Please see the section about non-blocking I/O for details.
If you don't like this behavior you should do accept on the TCP socket and then
upgrade it with C<start_SSL> later.

=item B<connect(...)>

This behaves similar to the connect function but also does an SSL handshake.
Because you cannot give SSL specific arguments to this function, you should
better either use C<new> to create a connect SSL socket or C<start_SSL> to
upgrade an established TCP socket to SSL.

=item B<close(...)>

Contrary to a close for a simple INET socket a close in SSL also mandates a
proper shutdown of the SSL part. This is done by sending a close notify message
by both peers.

A naive implementation would thus wait until it receives the
close notify message from the peer - which conflicts with the commonly expected
semantic that a close will not block. The default behavior is thus to only send
a close notify but not  wait for the close notify of the peer. If this is
required C<SSL_fast_shutdown> need to be explicitly set to false.

There are also cases where a SSL shutdown should not be done at all. This is
true for example when forking to let a child deal with the socket and closing
the socket in the parent process. A naive explicit C<close> or an implicit close
when destroying the socket in the parent would send a close notify to the peer
which would make the SSL socket in the client process unusable. In this case an
explicit C<close> with C<SSL_no_shutdown> set to true should be done in the
parent process.

For more details and other arguments see C<stop_SSL> which gets called from
C<close> to shutdown the SSL state of the socket.

=item B<sysread( BUF, LEN, [ OFFSET ] )>

This function behaves from the outside the same as B<sysread> in other
L<IO::Socket> objects, e.g. it returns at most LEN bytes of data.
But in reality it reads not only LEN bytes from the underlying socket, but at
a single SSL frame. It then returns up to LEN bytes it decrypted from this SSL
frame. If the frame contained more data than requested it will return only LEN
data, buffer the rest and return it on further read calls.
This means, that it might be possible to read data, even if the underlying
socket is not readable, so using poll or select might not be sufficient.

sysread will only return data from a single SSL frame, e.g. either the pending
data from the already buffered frame or it will read a frame from the underlying
socket and return the decrypted data. It will not return data spanning several
SSL frames in a single call.

Also, calls to sysread might fail, because it must first finish an SSL
handshake.

To understand these behaviors is essential, if you write applications which use
event loops and/or non-blocking sockets. Please read the specific sections in
this documentation.

=item B<syswrite( BUF, [ LEN, [ OFFSET ]] )>

This functions behaves from the outside the same as B<syswrite> in other
L<IO::Socket> objects, e.g. it will write at most LEN bytes to the socket, but
there is no guarantee, that all LEN bytes are written. It will return the number
of bytes written.
Because it basically just calls SSL_write from OpenSSL syswrite will write at
most a single SSL frame. This means, that no more than 16.384 bytes, which is
the maximum size of an SSL frame, will be written at once.

For non-blocking sockets SSL specific behavior applies.
Pease read the specific section in this documentation.

=item B<peek( BUF, LEN, [ OFFSET ])>

This function has exactly the same syntax as B<sysread>, and performs nearly the
same task but will not advance the read position so that successive calls to
peek() with the same arguments will return the same results.  This function
requires OpenSSL 0.9.6a or later to work.

=item B<pending()>

This function gives you the number of bytes available without reading from the
underlying socket object. This function is essential if you work with event
loops, please see the section about polling SSL sockets.

=item B<get_fingerprint([algo,certificate,pubkey])>

This methods returns the fingerprint of the given certificate in the form
C<algo$digest_hex>, where C<algo> is the used algorithm, default 'sha256'.
If no certificate is given the peer certificate of the connection is used.
If C<pubkey> is true it will not return the fingerprint of the certificate but
instead the fingerprint of the pubkey inside the certificate as
C<algo$pub$digest_hex>.

=item B<get_fingerprint_bin([algo,certificate,pubkey])>

This methods returns the binary fingerprint of the given certificate by using
the algorithm C<algo>, default 'sha256'.
If no certificate is given the peer certificate of the connection is used.
If C<pubkey> is true it will not return the fingerprint of the certificate but
instead the fingerprint of the pubkey inside the certificate.

=item B<get_cipher()>

Returns the string form of the cipher that the IO::Socket::SSL object is using.

=item B<get_sslversion()>

Returns the string representation of the SSL version of an established
connection.

=item B<get_sslversion_int()>

Returns the integer representation of the SSL version of an established
connection.

=item B<get_session_reused()>

This returns true if the session got reused and false otherwise. Note that with
a reused session no certificates are send within the handshake and no ciphers
are offered and thus functions which rely on this might not work.

=item B<dump_peer_certificate()>

Returns a parsable string with select fields from the peer SSL certificate.
This method directly returns the result of the dump_peer_certificate() method of
Net::SSLeay.

=item B<peer_certificate($field;[$refresh])>

If a peer certificate exists, this function can retrieve values from it.
If no field is given the internal representation of certificate from Net::SSLeay
is returned.
If refresh is true it will not used a cached version, but check again in case
the certificate of the connection has changed due to renegotiation.

The following fields can be queried:

=over 8

=item authority (alias issuer)

The certificate authority which signed the certificate.

=item owner (alias subject)

The owner of the certificate.

=item commonName (alias cn) - only for Net::SSLeay version >=1.30

The common name, usually the server name for SSL certificates.

=item subjectAltNames - only for Net::SSLeay version >=1.33

Alternative names for the subject, usually different names for the same
server, like example.org, example.com, *.example.com.

It returns a list of (typ,value) with typ GEN_DNS, GEN_IPADD etc (these
constants are exported from IO::Socket::SSL).
See Net::SSLeay::X509_get_subjectAltNames.

=back

=item B<sock_certificate($field)>

This is similar to C<peer_certificate> but will return the sites own
certificate. The same arguments for B<$field> can be used.
If no B<$field> is given the certificate handle from the underlying OpenSSL will
be returned. This handle will only be valid as long as the SSL connection exists
and if used afterwards it might result in strange crashes of the application.

=item B<peer_certificates>

This returns all the certificates send by the peer, e.g. first the peers own
certificate and then the rest of the chain. You might use B<CERT_asHash> from
L<IO::Socket::SSL::Utils> to inspect each of the certificates.

This function depends on a version of Net::SSLeay >= 1.58 .

=item B<get_servername>

This gives the name requested by the client if Server Name Indication
(SNI) was used.

=item B<verify_hostname($hostname,$scheme,$publicsuffix)>

This verifies the given hostname against the peer certificate using the
given scheme. Hostname is usually what you specify within the PeerAddr.
See the C<SSL_verifycn_publicsuffix> parameter for an explanation of suffix
checking and for the possible values.

Verification of hostname against a certificate is different between various
applications and RFCs. Some scheme allow wildcards for hostnames, some only
in subjectAltNames, and even their different wildcard schemes are possible.
RFC 6125 provides a good overview.

To ease the verification the following schemes are predefined (both protocol
name and rfcXXXX name can be used):

=over 8

=item rfc2818, xmpp (rfc3920), ftp (rfc4217)

Extended wildcards in subjectAltNames and common name are possible, e.g.
*.example.org or even www*.example.org. The common
name will be only checked if no DNS names are given in subjectAltNames.

=item http (alias www)

While name checking is defined in rfc2818 the current browsers usually accept
also an IP address (w/o wildcards) within the common name as long as no
subjectAltNames are defined. Thus this is rfc2818 extended with this feature.

=item smtp (rfc2595), imap, pop3, acap (rfc4642), netconf (rfc5538), syslog (rfc5425), snmp (rfc5953)

Simple wildcards in subjectAltNames are possible, e.g. *.example.org matches
www.example.org but not lala.www.example.org. If nothing from subjectAltNames
match it checks against the common name, where wildcards are also allowed to
match the full leftmost label.

=item ldap (rfc4513)

Simple wildcards are allowed in subjectAltNames, but not in common name.
Common name will be checked even if subjectAltNames exist.

=item sip (rfc5922)

No wildcards are allowed and common name is checked even if subjectAltNames
exist.

=item gist (rfc5971)

Simple wildcards are allowed in subjectAltNames and common name, but common name
will only be checked if there are no DNS names in subjectAltNames.

=item default

This is a superset of all the rules and is automatically used if no scheme is
given but a hostname (instead of IP) is known.
Extended wildcards are allowed in subjectAltNames and common name and common
name is checked always.

=item none

No verification will be done.
Actually is does not make any sense to call verify_hostname in this case.

=back

The scheme can be given either by specifying the name for one of the above
predefined schemes, or by using a hash which can have the following keys and
values:

=over 8

=item check_cn:  0|'always'|'when_only'

Determines if the common name gets checked. If 'always' it will always be
checked (like in ldap), if 'when_only' it will only be checked if no names are
given in subjectAltNames (like in http), for any other values the common name
will not be checked.

=item wildcards_in_alt: 0|'full_label'|'anywhere'

Determines if and where wildcards in subjectAltNames are possible. If
'full_label' only cases like *.example.org will be possible (like in ldap), for
'anywhere' www*.example.org is possible too (like http), dangerous things like
but www.*.org or even '*' will not be allowed.
For compatibility with older versions 'leftmost' can be given instead of
'full_label'.

=item wildcards_in_cn: 0|'full_label'|'anywhere'

Similar to wildcards_in_alt, but checks the common name. There is no predefined
scheme which allows wildcards in common names.

=item ip_in_cn: 0|1|4|6

Determines if an IP address is allowed in the common name (no wildcards are
allowed). If set to 4 or 6 it only allows IPv4 or IPv6 addresses, any other
true value allows both.
