Test two buffers (which may contain embedded C<NUL> characters, to see if they
are not equal.  The C<len> parameter indicates the number of bytes to compare.
Returns true or false.  It is undefined behavior if either of the buffers
doesn't contain at least C<len> bytes.

=over 3

 bool  memNE(char* s1, char* s2, STRLEN len)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<memNEs>
X<memNEs>

Like L</memNE>, but the second string is a literal enclosed in double quotes,
C<l1> gives the number of bytes in C<s1>.
Returns true or false.

=over 3

 bool  memNEs(char* s1, STRLEN l1, "s2")

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<Move>

=item C<MoveD>
X<Move>X<MoveD>

The XSUB-writer's interface to the C C<memmove> function.  The C<src> is the
source, C<dest> is the destination, C<nitems> is the number of items, and
C<type> is the type.  Can do overlapping moves.  See also C<L</Copy>>.

C<MoveD> is like C<Move> but returns C<dest>.  Useful
for encouraging compilers to tail-call
optimise.

=over 3

 void    Move (void* src, void* dest, int nitems, type)
 void *  MoveD(void* src, void* dest, int nitems, type)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<my_snprintf>
X<my_snprintf>

The C library C<snprintf> functionality, if available and
standards-compliant (uses C<vsnprintf>, actually).  However, if the
C<vsnprintf> is not available, will unfortunately use the unsafe
C<vsprintf> which can overrun the buffer (there is an overrun check,
but that may be too late).  Consider using C<sv_vcatpvf> instead, or
getting C<vsnprintf>.

=over 3

 int  my_snprintf(char *buffer, const Size_t len,
                  const char *format, ...)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<my_sprintf>
X<my_sprintf>

C<B<DEPRECATED!>>  It is planned to remove C<my_sprintf>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

Do NOT use this due to the possibility of overflowing C<buffer>.  Instead use
my_snprintf()

=over 3

 int  my_sprintf(NN char *buffer, NN const char *pat, ...)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<my_strnlen>
X<my_strnlen>

The C library C<strnlen> if available, or a Perl implementation of it.

C<my_strnlen()> computes the length of the string, up to C<maxlen>
bytes.  It will never attempt to address more than C<maxlen>
bytes, making it suitable for use with strings that are not
guaranteed to be NUL-terminated.

=over 3

 Size_t  my_strnlen(const char *str, Size_t maxlen)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<my_vsnprintf>
X<my_vsnprintf>

The C library C<vsnprintf> if available and standards-compliant.
However, if the C<vsnprintf> is not available, will unfortunately
use the unsafe C<vsprintf> which can overrun the buffer (there is an
overrun check, but that may be too late).  Consider using
C<sv_vcatpvf> instead, or getting C<vsnprintf>.

=over 3

 int  my_vsnprintf(char *buffer, const Size_t len,
                   const char *format, va_list ap)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<NewCopy>
X<NewCopy>

Combines Newx() and Copy() into a single macro. Dest will be allocated
using Newx() and then src will be copied into it.

=over 3

 void  NewCopy(void* src, void* dest, int nitems, type)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<ninstr>
X<ninstr>

Find the first (leftmost) occurrence of a sequence of bytes within another
sequence.  This is the Perl version of C<strstr()>, extended to handle
arbitrary sequences, potentially containing embedded C<NUL> characters (C<NUL>
is what the initial C<n> in the function name stands for; some systems have an
equivalent, C<memmem()>, but with a somewhat different API).

Another way of thinking about this function is finding a needle in a haystack.
C<big> points to the first byte in the haystack.  C<big_end> points to one byte
beyond the final byte in the haystack.  C<little> points to the first byte in
the needle.  C<little_end> points to one byte beyond the final byte in the
needle.  All the parameters must be non-C<NULL>.

The function returns C<NULL> if there is no occurrence of C<little> within
C<big>.  If C<little> is the empty string, C<big> is returned.

Because this function operates at the byte level, and because of the inherent
characteristics of UTF-8 (or UTF-EBCDIC), it will work properly if both the
needle and the haystack are strings with the same UTF-8ness, but not if the
UTF-8ness differs.

=over 3

 char *  ninstr(const char *big, const char *bigend,
                const char *little, const char *lend)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<Nullch>
X<Nullch>

Null character pointer.  (No longer available when C<PERL_CORE> is
defined.)

=back

=for hackers
Found in file handy.h

=over 4

=item C<PL_na>
X<PL_na>

A scratch pad variable in which to store a C<STRLEN> value.  If would have been
better named something like C<PL_temp_strlen>.

It is is typically used with C<SvPV> when one is actually planning to discard
the returned length, (hence the length is "Not Applicable", which is how this
variable got its name).

B<BUT BEWARE>, if this is used in a situation where something that is using it
is in a call stack with something else that is using it, this variable would
get zapped, leading to hard-to-diagnose errors.

It is usually more efficient to either declare a local variable and use that
instead, or to use the C<SvPV_nolen> macro.

=over 3

 STRLEN  PL_na

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<rninstr>
X<rninstr>

Like C<L</ninstr>>, but instead finds the final (rightmost) occurrence of a
sequence of bytes within another sequence, returning C<NULL> if there is no
such occurrence.

=over 3

 char *  rninstr(const char *big, const char *bigend,
                 const char *little, const char *lend)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<savepv>
X<savepv>

Perl's version of C<strdup()>.  Returns a pointer to a newly allocated
string which is a duplicate of C<pv>.  The size of the string is
determined by C<strlen()>, which means it may not contain embedded C<NUL>
characters and must have a trailing C<NUL>.  To prevent memory leaks, the
memory allocated for the new string needs to be freed when no longer needed.
This can be done with the C<L</Safefree>> function, or
L<C<SAVEFREEPV>|perlguts/SAVEFREEPV(p)>.

On some platforms, Windows for example, all allocated memory owned by a thread
is deallocated when that thread ends.  So if you need that not to happen, you
need to use the shared memory functions, such as C<L</savesharedpv>>.

=over 3

 char *  savepv(const char *pv)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<savepvn>
X<savepvn>

Perl's version of what C<strndup()> would be if it existed.  Returns a
pointer to a newly allocated string which is a duplicate of the first
C<len> bytes from C<pv>, plus a trailing
C<NUL> byte.  The memory allocated for
the new string can be freed with the C<Safefree()> function.

On some platforms, Windows for example, all allocated memory owned by a thread
is deallocated when that thread ends.  So if you need that not to happen, you
need to use the shared memory functions, such as C<L</savesharedpvn>>.

=over 3

 char *  savepvn(const char *pv, Size_t len)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<savepvs>
X<savepvs>

Like C<savepvn>, but takes a literal string instead of a
string/length pair.

=over 3

 char*  savepvs("literal string")

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<savesharedpv>
X<savesharedpv>

A version of C<savepv()> which allocates the duplicate string in memory
which is shared between threads.

=over 3

 char *  savesharedpv(const char *pv)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<savesharedpvn>
X<savesharedpvn>

A version of C<savepvn()> which allocates the duplicate string in memory
which is shared between threads.  (With the specific difference that a C<NULL>
pointer is not acceptable)

=over 3

 char *  savesharedpvn(const char * const pv, const STRLEN len)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<savesharedpvs>
X<savesharedpvs>

A version of C<savepvs()> which allocates the duplicate string in memory
which is shared between threads.

=over 3

 char*  savesharedpvs("literal string")

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<savesharedsvpv>
X<savesharedsvpv>

A version of C<savesharedpv()> which allocates the duplicate string in
memory which is shared between threads.

=over 3

 char *  savesharedsvpv(SV *sv)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<savesvpv>
X<savesvpv>

A version of C<savepv()>/C<savepvn()> which gets the string to duplicate from
the passed in SV using C<SvPV()>

On some platforms, Windows for example, all allocated memory owned by a thread
is deallocated when that thread ends.  So if you need that not to happen, you
need to use the shared memory functions, such as C<L</savesharedsvpv>>.

=over 3

 char *  savesvpv(SV *sv)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<strEQ>
X<strEQ>

Test two C<NUL>-terminated strings to see if they are equal.  Returns true or
false.

=over 3

 bool  strEQ(char* s1, char* s2)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<strGE>
X<strGE>

Test two C<NUL>-terminated strings to see if the first, C<s1>, is greater than
or equal to the second, C<s2>.  Returns true or false.

=over 3

 bool  strGE(char* s1, char* s2)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<strGT>
X<strGT>

Test two C<NUL>-terminated strings to see if the first, C<s1>, is greater than
the second, C<s2>.  Returns true or false.

=over 3

 bool  strGT(char* s1, char* s2)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<STRINGIFY>
X<STRINGIFY>

This macro surrounds its token with double quotes.

=over 3

 string  STRINGIFY(token x)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<strLE>
X<strLE>

Test two C<NUL>-terminated strings to see if the first, C<s1>, is less than or
equal to the second, C<s2>.  Returns true or false.

=over 3

 bool  strLE(char* s1, char* s2)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<STRLEN>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<strLT>
X<strLT>

Test two C<NUL>-terminated strings to see if the first, C<s1>, is less than the
second, C<s2>.  Returns true or false.

=over 3

 bool  strLT(char* s1, char* s2)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<strNE>
X<strNE>

Test two C<NUL>-terminated strings to see if they are different.  Returns true
or false.

=over 3

 bool  strNE(char* s1, char* s2)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<strnEQ>
X<strnEQ>

Test two C<NUL>-terminated strings to see if they are equal.  The C<len>
parameter indicates the number of bytes to compare.  Returns true or false.  (A
wrapper for C<strncmp>).

=over 3

 bool  strnEQ(char* s1, char* s2, STRLEN len)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<strnNE>
X<strnNE>

Test two C<NUL>-terminated strings to see if they are different.  The C<len>
parameter indicates the number of bytes to compare.  Returns true or false.  (A
wrapper for C<strncmp>).

=over 3

 bool  strnNE(char* s1, char* s2, STRLEN len)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<STR_WITH_LEN>
X<STR_WITH_LEN>

Returns two comma separated tokens of the input literal string, and its length.
This is convenience macro which helps out in some API calls.
Note that it can't be used as an argument to macros or functions that under
some configurations might be macros, which means that it requires the full
Perl_xxx(aTHX_ ...) form for any API calls where it's used.

=over 3

 pair  STR_WITH_LEN("literal string")

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<Zero>

=item C<ZeroD>
X<Zero>X<ZeroD>

The XSUB-writer's interface to the C C<memzero> function.  The C<dest> is the
destination, C<nitems> is the number of items, and C<type> is the type.

C<ZeroD> is like C<Zero> but returns C<dest>.  Useful
for encouraging compilers to tail-call
optimise.

=over 3

 void    Zero (void* dest, int nitems, type)
 void *  ZeroD(void* dest, int nitems, type)

=back

=back

=for hackers
Found in file handy.h

=head1 SV Flags

=over 4

=item C<SVt_IV>
X<SVt_IV>

Type flag for scalars.  See L</svtype>.

=back

=for hackers
Found in file sv.h

=over 4

=item C<SVt_NULL>
X<SVt_NULL>

Type flag for scalars.  See L</svtype>.

=back

=for hackers
Found in file sv.h

=over 4

=item C<SVt_NV>
X<SVt_NV>

Type flag for scalars.  See L</svtype>.

=back

=for hackers
Found in file sv.h

=over 4

=item C<SVt_PV>
X<SVt_PV>

Type flag for scalars.  See L</svtype>.

=back

=for hackers
Found in file sv.h

=over 4

=item C<SVt_PVAV>
X<SVt_PVAV>

Type flag for arrays.  See L</svtype>.

=back

=for hackers
Found in file sv.h

=over 4

=item C<SVt_PVCV>
X<SVt_PVCV>

Type flag for subroutines.  See L</svtype>.

=back

=for hackers
Found in file sv.h

=over 4

=item C<SVt_PVFM>
X<SVt_PVFM>

Type flag for formats.  See L</svtype>.

=back

=for hackers
Found in file sv.h

=over 4

=item C<SVt_PVGV>
X<SVt_PVGV>

Type flag for typeglobs.  See L</svtype>.

=back

=for hackers
Found in file sv.h

=over 4

=item C<SVt_PVHV>
X<SVt_PVHV>

Type flag for hashes.  See L</svtype>.

=back

=for hackers
Found in file sv.h

=over 4

=item C<SVt_PVIO>
X<SVt_PVIO>

Type flag for I/O objects.  See L</svtype>.

=back

=for hackers
Found in file sv.h

=over 4

=item C<SVt_PVIV>
X<SVt_PVIV>

Type flag for scalars.  See L</svtype>.

=back

=for hackers
Found in file sv.h

=over 4

=item C<SVt_PVLV>
X<SVt_PVLV>

Type flag for scalars.  See L</svtype>.

=back

=for hackers
Found in file sv.h

=over 4

=item C<SVt_PVMG>
X<SVt_PVMG>

Type flag for scalars.  See L</svtype>.

=back

=for hackers
Found in file sv.h

=over 4

=item C<SVt_PVNV>
X<SVt_PVNV>

Type flag for scalars.  See L</svtype>.

=back

=for hackers
Found in file sv.h

=over 4

=item C<SVt_PVOBJ>
X<SVt_PVOBJ>

NOTE: C<SVt_PVOBJ> is B<experimental> and may change or be
removed without notice.

Type flag for object instances.  See L</svtype>.

=back

=for hackers
Found in file sv.h

=over 4

=item C<SVt_REGEXP>
X<SVt_REGEXP>

Type flag for regular expressions.  See L</svtype>.

=back

=for hackers
Found in file sv.h

=over 4

=item C<svtype>
X<svtype>

An enum of flags for Perl types.  These are found in the file F<sv.h>
in the C<svtype> enum.  Test these flags with the C<SvTYPE> macro.

The types are:

    SVt_NULL
    SVt_IV
    SVt_NV
    SVt_RV
    SVt_PV
    SVt_PVIV
    SVt_PVNV
    SVt_PVMG
    SVt_INVLIST
    SVt_REGEXP
    SVt_PVGV
    SVt_PVLV
    SVt_PVAV
    SVt_PVHV
    SVt_PVCV
    SVt_PVFM
    SVt_PVIO
    SVt_PVOBJ

These are most easily explained from the bottom up.

C<SVt_PVOBJ> is for object instances of the new `use feature 'class'` kind.
C<SVt_PVIO> is for I/O objects, C<SVt_PVFM> for formats, C<SVt_PVCV> for
subroutines, C<SVt_PVHV> for hashes and C<SVt_PVAV> for arrays.

All the others are scalar types, that is, things that can be bound to a
C<$> variable.  For these, the internal types are mostly orthogonal to
types in the Perl language.

Hence, checking C<< SvTYPE(sv) < SVt_PVAV >> is the best way to see whether
something is a scalar.

C<SVt_PVGV> represents a typeglob.  If C<!SvFAKE(sv)>, then it is a real,
incoercible typeglob.  If C<SvFAKE(sv)>, then it is a scalar to which a
typeglob has been assigned.  Assigning to it again will stop it from being
a typeglob.  C<SVt_PVLV> represents a scalar that delegates to another scalar
behind the scenes.  It is used, e.g., for the return value of C<substr> and
for tied hash and array elements.  It can hold any scalar value, including
a typeglob.  C<SVt_REGEXP> is for regular
expressions.  C<SVt_INVLIST> is for Perl
core internal use only.

C<SVt_PVMG> represents a "normal" scalar (not a typeglob, regular expression,
or delegate).  Since most scalars do not need all the internal fields of a
PVMG, we save memory by allocating smaller structs when possible.  All the
other types are just simpler forms of C<SVt_PVMG>, with fewer internal fields.
C<SVt_NULL> can only hold undef.  C<SVt_IV> can hold undef, an integer, or a
reference.  (C<SVt_RV> is an alias for C<SVt_IV>, which exists for backward
compatibility.)  C<SVt_NV> can hold undef or a double. (In builds that support
headless NVs, these could also hold a reference via a suitable offset, in the
same way that SVt_IV does, but this is not currently supported and seems to
be a rare use case.) C<SVt_PV> can hold C<undef>, a string, or a reference.
C<SVt_PVIV> is a superset of C<SVt_PV> and C<SVt_IV>. C<SVt_PVNV> is a
superset of C<SVt_PV> and C<SVt_NV>. C<SVt_PVMG> can hold anything C<SVt_PVNV>
can hold, but it may also be blessed or magical.

=back

=for hackers
Found in file sv.h

=head1 SV Handling
X<SV_CATBYTES>X<SV_CATUTF8>X<SV_COW_DROP_PV>X<SV_FORCE_UTF8_UPGRADE>X<SV_GMAGIC>X<SV_HAS_TRAILING_NUL>X<SV_IMMEDIATE_UNREF>X<SV_NOSTEAL>X<SV_SMAGIC>X<SV_UTF8_NO_ENCODING>X<SVs_TEMP>

=over 4

=item C<AV_FROM_REF>

=item C<CV_FROM_REF>

=item C<HV_FROM_REF>
X<AV_FROM_REF>X<CV_FROM_REF>X<HV_FROM_REF>

The C<I<*>V_FROM_REF> macros extract the C<SvRV()> from a given reference SV
and return a suitably-cast to pointer to the referenced SV. When running
under C<-DDEBUGGING>, assertions are also applied that check that I<ref> is
definitely a reference SV that refers to an SV of the right type.

=over 3

 AV *  AV_FROM_REF(SV * ref)
 CV *  CV_FROM_REF(SV * ref)
 HV *  HV_FROM_REF(SV * ref)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<BOOL_INTERNALS_sv_isbool>
X<BOOL_INTERNALS_sv_isbool>

Checks if a C<SvBoolFlagsOK()> sv is a bool. B<Note> that it is the
caller's responsibility to ensure that the sv is C<SvBoolFlagsOK()> before
calling this. This is only useful in specialized logic like
serialization code where performance is critical and the flags have
already been checked to be correct. Almost always you should be using
C<sv_isbool(sv)> instead.

=over 3

 bool  BOOL_INTERNALS_sv_isbool(SV* sv)

=back

=back

=for hackers
Found in file sv.h
