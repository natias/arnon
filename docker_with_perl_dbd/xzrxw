this method does not let you specify [flags@Rsvg.HandleFlags].

Otherwise, loading an SVG without GIO is not recommended, since librsvg will
need to buffer your entire data internally before actually being able to
parse it.  The deprecated way of doing this is by creating a handle with
[ctor@Rsvg.Handle.new] or [ctor@Rsvg.Handle.new_with_flags], and then using
[method@Rsvg.Handle.write] and [method@Rsvg.Handle.close] to feed the handle with SVG data.
Still, please try to use the GIO stream functions instead.

# Resolution of the rendered image (dots per inch, or DPI)

SVG images can contain dimensions like "`5cm`" or
"`2pt`" that must be converted from physical units into
device units.  To do this, librsvg needs to know the actual dots per inch
(DPI) of your target device.  You can call [method@Rsvg.Handle.set_dpi] or
[method@Rsvg.Handle.set_dpi_x_y] on an [class@Rsvg.Handle] to set the DPI before rendering
it.

# Rendering

The preferred way to render a whole SVG document is to use
[method@Rsvg.Handle.render_document].  Please see its documentation for
details.

# API ordering

Due to the way the librsvg API evolved over time, an [class@Rsvg.Handle] object is available
for use as soon as it is constructed.  However, not all of its methods can be
called at any time.  For example, an [class@Rsvg.Handle] just constructed with [ctor@Rsvg.Handle.new]
is not loaded yet, and it does not make sense to call [method@Rsvg.Handle.render_document] on it
just at that point.

The documentation for the available methods in [class@Rsvg.Handle] may mention that a particular
method is only callable on a "fully loaded handle".  This means either:

* The handle was loaded with [method@Rsvg.Handle.write] and [method@Rsvg.Handle.close], and
  those functions returned no errors.

* The handle was loaded with [method@Rsvg.Handle.read_stream_sync] and that function
  returned no errors.

Before librsvg 2.46, the library did not fully verify that a handle was in a
fully loaded state for the methods that require it.  To preserve
compatibility with old code which inadvertently called the API without
checking for errors, or which called some methods outside of the expected
order, librsvg will just emit a `g_critical()` message in those cases.

New methods introduced in librsvg 2.46 and later will check for the correct
ordering, and panic if they are called out of order.  This will abort
the program as if it had a failed assertion.</doc>
      <source-position filename="rsvg.h" line="378"/>
      <constructor name="new" c:identifier="rsvg_handle_new">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="523">Returns a new rsvg handle.  Must be freed with [method@GObject.Object.unref].  This
handle can be used to load an image.

The preferred way of loading SVG data into the returned [class@Rsvg.Handle] is with
[method@Rsvg.Handle.read_stream_sync].

The deprecated way of loading SVG data is with [method@Rsvg.Handle.write] and
[method@Rsvg.Handle.close]; note that these require buffering the entire file
internally, and for this reason it is better to use the stream functions:
[ctor@Rsvg.Handle.new_from_stream_sync], [method@Rsvg.Handle.read_stream_sync], or
[ctor@Rsvg.Handle.new_from_gfile_sync].

After loading the [class@Rsvg.Handle] with data, you can render it using Cairo or get
a GdkPixbuf from it. When finished, free the handle with [method@GObject.Object.unref]. No
more than one image can be loaded with one handle.

Note that this function creates an [class@Rsvg.Handle] with no flags set.  If you
require any of [flags@Rsvg.HandleFlags] to be set, use any of
[ctor@Rsvg.Handle.new_with_flags], [ctor@Rsvg.Handle.new_from_stream_sync], or
[ctor@Rsvg.Handle.new_from_gfile_sync].</doc>
        <source-position filename="rsvg.h" line="550"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="547">A new [class@Rsvg.Handle] with no flags set.</doc>
          <type name="Handle" c:type="RsvgHandle*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_data"
                   c:identifier="rsvg_handle_new_from_data"
                   version="2.14"
                   throws="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1127">Loads the SVG specified by @data.  Note that this function creates an
[class@Rsvg.Handle] without a base URL, and without any [flags@Rsvg.HandleFlags].  If you
need these, use [ctor@Rsvg.Handle.new_from_stream_sync] instead by creating
a [class@Gio.MemoryInputStream] from your data.</doc>
        <source-position filename="rsvg.h" line="1142"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1138">A [class@Rsvg.Handle] or `NULL` if an error occurs.</doc>
          <type name="Handle" c:type="RsvgHandle*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1129">The SVG data</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="data_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1130">The length of @data, in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="rsvg_handle_new_from_file"
                   version="2.14"
                   throws="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1144">Loads the SVG specified by @file_name.  Note that this function, like
[ctor@Rsvg.Handle.new], does not specify any loading flags for the resulting
handle.  If you require the use of [flags@Rsvg.HandleFlags], use
[ctor@Rsvg.Handle.new_from_gfile_sync].</doc>
        <source-position filename="rsvg.h" line="1158"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1154">A [class@Rsvg.Handle] or `NULL` if an error occurs.</doc>
          <type name="Handle" c:type="RsvgHandle*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1146">The file name to load, or a URI.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_gfile_sync"
                   c:identifier="rsvg_handle_new_from_gfile_sync"
                   version="2.32"
                   throws="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1069">Creates a new [class@Rsvg.Handle] for @file.

This function sets the "base file" of the handle to be @file itself, so SVG
elements like `&lt;image&gt;` which reference external
resources will be resolved relative to the location of @file.

If @cancellable is not `NULL`, then the operation can be cancelled by
triggering the cancellable object from another thread. If the
operation was cancelled, the error `G_IO_ERROR_CANCELLED` will be
returned in @error.</doc>
        <source-position filename="rsvg.h" line="1092"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1087">a new [class@Rsvg.Handle] on success, or `NULL` with @error filled in</doc>
          <type name="Handle" c:type="RsvgHandle*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1071">a `GFile`</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1072">flags from [flags@Rsvg.HandleFlags]</doc>
            <type name="HandleFlags" c:type="RsvgHandleFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1073">a `GCancellable`, or `NULL`</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stream_sync"
                   c:identifier="rsvg_handle_new_from_stream_sync"
                   version="2.32"
                   throws="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1097">Creates a new [class@Rsvg.Handle] for @stream.

This function sets the "base file" of the handle to be @base_file if
provided.  SVG elements like `&lt;image&gt;` which reference
external resources will be resolved relative to the location of @base_file.

If @cancellable is not `NULL`, then the operation can be cancelled by
triggering the cancellable object from another thread. If the
operation was cancelled, the error `G_IO_ERROR_CANCELLED` will be
returned in @error.</doc>
        <source-position filename="rsvg.h" line="1121"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1116">a new [class@Rsvg.Handle] on success, or `NULL` with @error filled in</doc>
          <type name="Handle" c:type="RsvgHandle*"/>
        </return-value>
        <parameters>
          <parameter name="input_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1099">a `GInputStream`</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="base_file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1100">a `GFile`, or `NULL`</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1101">flags from [flags@Rsvg.HandleFlags]</doc>
            <type name="HandleFlags" c:type="RsvgHandleFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1102">a `GCancellable`, or `NULL`</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_flags"
                   c:identifier="rsvg_handle_new_with_flags"
                   version="2.36">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1007">Creates a new [class@Rsvg.Handle] with flags @flags.  After calling this function,
you can feed the resulting handle with SVG data by using
[method@Rsvg.Handle.read_stream_sync].</doc>
        <source-position filename="rsvg.h" line="1020"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1015">a new [class@Rsvg.Handle]</doc>
          <type name="Handle" c:type="RsvgHandle*"/>
        </return-value>
        <parameters>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1009">flags from [flags@Rsvg.HandleFlags]</doc>
            <type name="HandleFlags" c:type="RsvgHandleFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="close"
              c:identifier="rsvg_handle_close"
              deprecated="1"
              deprecated-version="2.46."
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="584">This is used after calling [method@Rsvg.Handle.write] to indicate that there is no more data
to consume, and to start the actual parsing of the SVG document.  The only reason to
call this function is if you use use [method@Rsvg.Handle.write] to feed data into the @handle;
if you use the other methods like [ctor@Rsvg.Handle.new_from_file] or
[method@Rsvg.Handle.read_stream_sync], then you do not need to call this function.

This will return `TRUE` if the loader closed successfully and the
SVG data was parsed correctly.  Note that @handle isn't freed until
[method@GObject.Object.unref] is called.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Rsvg.Handle.read_stream_sync] or the constructor
functions [ctor@Rsvg.Handle.new_from_gfile_sync] or
[ctor@Rsvg.Handle.new_from_stream_sync].  See the deprecation notes for
[method@Rsvg.Handle.write] for more information.</doc-deprecated>
        <source-position filename="rsvg.h" line="607"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="599">`TRUE` on success, or `FALSE` on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="586">a [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="rsvg_handle_free" deprecated="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1226">Frees @handle.</doc>
        <doc-deprecated xml:space="preserve">Use [method@GObject.Object.unref] instead.</doc-deprecated>
        <source-position filename="rsvg.h" line="1234"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1228">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_base_uri"
              c:identifier="rsvg_handle_get_base_uri"
              glib:get-property="base-uri"
              version="2.8">
        <attribute name="org.gtk.Method.get_property" value="base-uri"/>
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="663">Gets the base uri for this [class@Rsvg.Handle].</doc>
        <source-position filename="rsvg.h" line="673"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="669">the base uri, possibly null</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="665">A [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_desc"
              c:identifier="rsvg_handle_get_desc"
              glib:get-property="desc"
              version="2.4"
              deprecated="1"
              deprecated-version="2.36.">
        <doc-deprecated xml:space="preserve">Librsvg does not read the metadata/desc/title elements;
this function always returns `NULL`.</doc-deprecated>
        <source-position filename="rsvg.h" line="1430"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1422">This function always returns `NULL`.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1420">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dimensions"
              c:identifier="rsvg_handle_get_dimensions"
              version="2.14"
              deprecated="1"
              deprecated-version="2.52.">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="690">Get the SVG's size. Do not call from within the size_func callback, because
an infinite loop will occur.

This function depends on the [class@Rsvg.Handle]'s DPI to compute dimensions in
pixels, so you should call [method@Rsvg.Handle.set_dpi] beforehand.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Rsvg.Handle.get_intrinsic_size_in_pixels] instead.  This
function is deprecated because it is not able to return exact fractional dimensions,
only integer pixels.</doc-deprecated>
        <source-position filename="rsvg.h" line="708"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="692">A [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="dimension_data"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="693">A place to store the SVG's size</doc>
            <type name="DimensionData" c:type="RsvgDimensionData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dimensions_sub"
              c:identifier="rsvg_handle_get_dimensions_sub"
              version="2.22"
              deprecated="1"
              deprecated-version="2.46.">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="710">Get the size of a subelement of the SVG file. Do not call from within the
size_func callback, because an infinite loop will occur.

This function depends on the [class@Rsvg.Handle]'s DPI to compute dimensions in
pixels, so you should call [method@Rsvg.Handle.set_dpi] beforehand.

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Rsvg.Handle.get_geometry_for_layer] instead.</doc-deprecated>
        <source-position filename="rsvg.h" line="735"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="728">`TRUE` if the dimensions could be obtained, `FALSE` if there was an error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="712">A [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="dimension_data"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="713">A place to store the SVG's size</doc>
            <type name="DimensionData" c:type="RsvgDimensionData*"/>
          </parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="714">An element's id within the SVG, starting with "#" (a single
hash character), for example, `#layer1`.  This notation corresponds to a
URL's fragment ID.  Alternatively, pass `NULL` to use the whole SVG.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_geometry_for_element"
              c:identifier="rsvg_handle_get_geometry_for_element"
              version="2.46"
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg-cairo.h"
             line="287">Computes the ink rectangle and logical rectangle of a single SVG element.

While `rsvg_handle_get_geometry_for_layer` computes the geometry of an SVG element subtree with
its transformation matrix, this other function will compute the element's geometry
as if it were being rendered under an identity transformation by itself.  That is,
the resulting geometry is as if the element got extracted by itself from the SVG.

This function is the counterpart to `rsvg_handle_render_element`.

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.

The "ink rectangle" is the bounding box that would be painted
for fully- stroked and filled elements.

The "logical rectangle" just takes into account the unstroked
paths and text outlines.

Note that these bounds are not minimum bounds; for example,
clipping paths are not taken into account.

You can pass `NULL` for the @id if you want to measure all
the elements in the SVG, i.e. to measure everything from the
root element.

This operation is not constant-time, as it involves going through all
the child elements.</doc>
        <source-position filename="rsvg-cairo.h" line="338"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg-cairo.h"
               line="327">`TRUE` if the geometry could be obtained, or `FALSE` on error.  Errors
are returned in the @error argument.

API ordering: This function must be called on a fully-loaded @handle.  See
the section "[API ordering](class.Handle.html#api-ordering)" for details.

Panics: this function will panic if the @handle is not fully-loaded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="289">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="290">An element's id within the SVG, starting with "#" (a single
hash character), for example, `#layer1`.  This notation corresponds to a
URL's fragment ID.  Alternatively, pass `NULL` to compute the geometry for the
whole SVG.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="out_ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="294">Place to store the ink rectangle of the element.</doc>
            <type name="Rectangle" c:type="RsvgRectangle*"/>
          </parameter>
          <parameter name="out_logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="295">Place to store the logical rectangle of the element.</doc>
            <type name="Rectangle" c:type="RsvgRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_geometry_for_layer"
              c:identifier="rsvg_handle_get_geometry_for_layer"
              version="2.46"
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg-cairo.h"
             line="186">Computes the ink rectangle and logical rectangle of an SVG element, or the
whole SVG, as if the whole SVG were rendered to a specific viewport.

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.

The "ink rectangle" is the bounding box that would be painted
for fully-stroked and filled elements.

The "logical rectangle" just takes into account the unstroked
paths and text outlines.

Note that these bounds are not minimum bounds; for example,
clipping paths are not taken into account.

You can pass `NULL` for the @id if you want to measure all
the elements in the SVG, i.e. to measure everything from the
root element.

This operation is not constant-time, as it involves going through all
the child elements.</doc>
        <source-position filename="rsvg-cairo.h" line="232"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg-cairo.h"
               line="221">`TRUE` if the geometry could be obtained, or `FALSE` on error.  Errors
are returned in the @error argument.

API ordering: This function must be called on a fully-loaded @handle.  See
the section "[API ordering](class.Handle.html#api-ordering)" for details.

Panics: this function will panic if the @handle is not fully-loaded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="188">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="189">An element's id within the SVG, starting with "#" (a single
hash character), for example, `#layer1`.  This notation corresponds to a
URL's fragment ID.  Alternatively, pass `NULL` to compute the geometry for the
whole SVG.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="viewport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="193">Viewport size at which the whole SVG would be fitted.</doc>
            <type name="Rectangle" c:type="const RsvgRectangle*"/>
          </parameter>
          <parameter name="out_ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="194">Place to store the ink rectangle of the element.</doc>
            <type name="Rectangle" c:type="RsvgRectangle*"/>
          </parameter>
          <parameter name="out_logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="195">Place to store the logical rectangle of the element.</doc>
            <type name="Rectangle" c:type="RsvgRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_intrinsic_dimensions"
              c:identifier="rsvg_handle_get_intrinsic_dimensions"
              version="2.46">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="839">In simple terms, queries the `width`, `height`, and `viewBox` attributes in an SVG document.

If you are calling this function to compute a scaling factor to render the SVG,
consider simply using [method@Rsvg.Handle.render_document] instead; it will do the
scaling computations automatically.

Before librsvg 2.54.0, the `out_has_width` and `out_has_height` arguments would be set to true or false
depending on whether the SVG document actually had `width` and `height` attributes, respectively.

However, since librsvg 2.54.0, `width` and `height` are now [geometry
properties](https://www.w3.org/TR/SVG2/geometry.html) per the SVG2 specification; they
are not plain attributes.  SVG2 made it so that the initial value of those properties
is `auto`, which is equivalent to specifing a value of `100%`.  In this sense, even SVG
documents which lack `width` or `height` attributes semantically have to make them
default to `100%`.  This is why since librsvg 2.54.0, `out_has_width` and
`out_has_heigth` are always returned as `TRUE`, since with SVG2 all documents *have* a
default width and height of `100%`.

As an example, the following SVG element has a `width` of 100 pixels and a `height` of 400 pixels, but no `viewBox`.  This
function will return those sizes in `out_width` and `out_height`, and set `out_has_viewbox` to `FALSE`.

```
&lt;svg xmlns="http://www.w3.org/2000/svg" width="100" height="400"&gt;
```

Conversely, the following element has a `viewBox`, but no `width` or `height`.  This function will
set `out_has_viewbox` to `TRUE`, and it will also set `out_has_width` and `out_has_height` to `TRUE` but
return both length values as `100%`.

```
&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 400"&gt;
```

Note that the `RsvgLength` return values have `RsvgUnits` in them; you should
not assume that they are always in pixels.  For example, the following SVG element
will return width and height values whose `units` fields are `RSVG_UNIT_MM`.

```
&lt;svg xmlns="http://www.w3.org/2000/svg" width="210mm" height="297mm"&gt;
```

API ordering: This function must be called on a fully-loaded @handle.  See
the section "[API ordering](class.Handle.html#api-ordering)" for details.

Panics: this function will panic if the @handle is not fully-loaded.</doc>
        <source-position filename="rsvg.h" line="898"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="841">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="out_has_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="842">Will be set to `TRUE`; see below.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_width"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="843">Will be set to the computed value of the `width` property in the toplevel SVG.</doc>
            <type name="Length" c:type="RsvgLength*"/>
          </parameter>
          <parameter name="out_has_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="844">Will be set to `TRUE`; see below.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_height"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="845">Will be set to the computed value of the `height` property in the toplevel SVG.</doc>
            <type name="Length" c:type="RsvgLength*"/>
          </parameter>
          <parameter name="out_has_viewbox"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="846">Will be set to `TRUE` if the toplevel SVG has a `viewBox` attribute</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_viewbox"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="847">Will be set to the value of the `viewBox` attribute in the toplevel SVG</doc>
            <type name="Rectangle" c:type="RsvgRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_intrinsic_size_in_pixels"
              c:identifier="rsvg_handle_get_intrinsic_size_in_pixels"
              version="2.52">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="906">Converts an SVG document's intrinsic dimensions to pixels, and returns the result.

This function is able to extract the size in pixels from an SVG document if the
document has both `width` and `height` attributes
with physical units (px, in, cm, mm, pt, pc) or font-based units (em, ex).  For
physical units, the dimensions are normalized to pixels using the dots-per-inch (DPI)
value set previously with [method@Rsvg.Handle.set_dpi].  For font-based units, this function
uses the computed value of the `font-size` property for the toplevel
`&lt;svg&gt;` element.  In those cases, this function returns `TRUE`.

This function is not able to extract the size in pixels directly from the intrinsic
dimensions of the SVG document if the `width` or
`height` are in percentage units (or if they do not exist, in which
case the SVG spec mandates that they default to 100%), as these require a
&lt;firstterm&gt;viewport&lt;/firstterm&gt; to be resolved to a final size.  In this case, the
function returns `FALSE`.

For example, the following document fragment has intrinsic dimensions that will resolve
to 20x30 pixels.

```
&lt;svg xmlns="http://www.w3.org/2000/svg" width="20" height="30"/&gt;
```

Similarly, if the DPI is set to 96, this document will resolve to 192×288 pixels (i.e. 96×2 × 96×3).

```
&lt;svg xmlns="http://www.w3.org/2000/svg" width="2in" height="3in"/&gt;
```

The dimensions of the following documents cannot be resolved to pixels directly, and
this function would return `FALSE` for them:

```
&lt;!-- Needs a viewport against which to compute the percentages. --&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%"/&gt;

&lt;!-- Does not have intrinsic width/height, just a 1:2 aspect ratio which
     needs to be fitted within a viewport. --&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 200"/&gt;
```

Instead of querying an SVG document's size, applications are encouraged to render SVG
documents to a size chosen by the application, by passing a suitably-sized viewport to
[method@Rsvg.Handle.render_document].</doc>
        <source-position filename="rsvg.h" line="969"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="958">`TRUE` if the dimensions could be converted directly to pixels; in this case
@out_width and @out_height will be set accordingly.  Note that the dimensions are
floating-point numbers, so your application can know the exact size of an SVG document.
To get integer dimensions, you should use `ceil()` to round up to the nearest integer
(just using `round()`, may may chop off pixels with fractional coverage).  If the
dimensions cannot be converted to pixels, returns `FALSE` and puts 0.0 in both
@out_width and @out_height.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="908">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="out_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="909">Will be set to the computed width; you should round this up to get integer pixels.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="out_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="910">Will be set to the computed height; you should round this up to get integer pixels.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_metadata"
              c:identifier="rsvg_handle_get_metadata"
              glib:get-property="metadata"
              version="2.9"
              deprecated="1"
              deprecated-version="2.36.">
        <doc-deprecated xml:space="preserve">Librsvg does not read the metadata/desc/title elements;
this function always returns `NULL`.</doc-deprecated>
        <source-position filename="rsvg.h" line="1444"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1436">This function always returns `NULL`.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1434">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixbuf" c:identifier="rsvg_handle_get_pixbuf">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="609">Returns the pixbuf loaded by @handle.  The pixbuf returned will be reffed, so
the caller of this function must assume that ref.

API ordering: This function must be called on a fully-loaded @handle.  See
the section "[API ordering](class.Handle.html#api-ordering)" for details.

This function depends on the [class@Rsvg.Handle]'s dots-per-inch value (DPI) to compute the
"natural size" of the document in pixels, so you should call [method@Rsvg.Handle.set_dpi]
beforehand.</doc>
        <source-position filename="rsvg.h" line="627"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="623">A pixbuf, or %NULL on error.
during rendering.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="611">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixbuf_sub"
              c:identifier="rsvg_handle_get_pixbuf_sub"
              version="2.14">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="629">Creates a `GdkPixbuf` the same size as the entire SVG loaded into @handle, but
only renders the sub-element that has the specified @id (and all its
sub-sub-elements recursively).  If @id is `NULL`, this function renders the
whole SVG.

This function depends on the [class@Rsvg.Handle]'s dots-per-inch value (DPI) to compute the
"natural size" of the document in pixels, so you should call [method@Rsvg.Handle.set_dpi]
beforehand.

If you need to render an image which is only big enough to fit a particular
sub-element of the SVG, consider using [method@Rsvg.Handle.render_element].

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.

API ordering: This function must be called on a fully-loaded @handle.  See
the section "[API ordering](class.Handle.html#api-ordering)" for details.</doc>
        <source-position filename="rsvg.h" line="661"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="655">a pixbuf, or `NULL` if an error occurs
during rendering.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="631">An #RsvgHandle</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="632">An element's id within the SVG, starting with "#" (a single
hash character), for example, `#layer1`.  This notation corresponds to a
URL's fragment ID.  Alternatively, pass `NULL` to use the whole SVG.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_position_sub"
              c:identifier="rsvg_handle_get_position_sub"
              version="2.22"
              deprecated="1"
              deprecated-version="2.46.">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="739">Get the position of a subelement of the SVG file. Do not call from within
the size_func callback, because an infinite loop will occur.

This function depends on the [class@Rsvg.Handle]'s DPI to compute dimensions in
pixels, so you should call [method@Rsvg.Handle.set_dpi] beforehand.

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Rsvg.Handle.get_geometry_for_layer] instead.  This function is
deprecated since it is not able to return exact floating-point positions, only integer
pixels.</doc-deprecated>
        <source-position filename="rsvg.h" line="766"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="757">`TRUE` if the position could be obtained, `FALSE` if there was an error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="741">A [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
