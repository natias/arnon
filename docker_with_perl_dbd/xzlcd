C<base> no longer sets a module's C<$VERSION> to "-1" when a module it
loads does not define a C<$VERSION>.  This change has been made because
"-1" is not a valid version number under the new "lax" criteria used
internally by C<UNIVERSAL::VERSION>.  (See L<version> for more on "lax"
version criteria.)

C<base> no longer internally skips loading modules it has already loaded
and instead relies on C<require> to inspect C<%INC>.  This fixes a bug
when C<base> is used with code that clear C<%INC> to force a module to
be reloaded.

=item *

L<Carp> has been upgraded from version 1.20 to 1.26.

It now includes last read filehandle info and puts a dot after the file
and line number, just like errors from C<die> [perl #106538].

=item *

L<charnames> has been updated from version 1.18 to 1.30.

C<charnames> can now be invoked with a new option, C<:loose>,
which is like the existing C<:full> option, but enables Unicode loose
name matching.  Details are in L<charnames/LOOSE MATCHES>.

=item *

L<B::Deparse> has been upgraded from version 1.03 to 1.14.  This fixes
numerous deparsing bugs.

=item *

L<CGI> has been upgraded from version 3.52 to 3.59.

It uses the public and documented FCGI.pm API in CGI::Fast.  CGI::Fast was
using an FCGI API that was deprecated and removed from documentation
more than ten years ago.  Usage of this deprecated API with FCGI E<gt>=
0.70 or FCGI E<lt>= 0.73 introduces a security issue.
L<https://rt.cpan.org/Public/Bug/Display.html?id=68380>
L<http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-2766>

Things that may break your code:

C<url()> was fixed to return C<PATH_INFO> when it is explicitly requested
with either the C<path=E<gt>1> or C<path_info=E<gt>1> flag.

If your code is running under mod_rewrite (or compatible) and you are
calling C<self_url()> or you are calling C<url()> and passing
C<path_info=E<gt>1>, these methods will actually be returning
C<PATH_INFO> now, as you have explicitly requested or C<self_url()>
has requested on your behalf.

The C<PATH_INFO> has been omitted in such URLs since the issue was
introduced in the 3.12 release in December, 2005.

This bug is so old your application may have come to depend on it or
workaround it. Check for application before upgrading to this release.

Examples of affected method calls:

  $q->url(-absolute => 1, -query => 1, -path_info => 1);
  $q->url(-path=>1);
  $q->url(-full=>1,-path=>1);
  $q->url(-rewrite=>1,-path=>1);
  $q->self_url();

We no longer read from STDIN when the Content-Length is not set,
preventing requests with no Content-Length from sometimes freezing.
This is consistent with the CGI RFC 3875, and is also consistent with
CGI::Simple.  However, the old behavior may have been expected by some
command-line uses of CGI.pm.

In addition, the DELETE HTTP verb is now supported.

=item *

L<Compress::Zlib> has been upgraded from version 2.035 to 2.048.

IO::Compress::Zip and IO::Uncompress::Unzip now have support for LZMA
(method 14).  There is a fix for a CRC issue in IO::Compress::Unzip and
it supports Streamed Stored context now.  And fixed a Zip64 issue in
IO::Compress::Zip when the content size was exactly 0xFFFFFFFF.

=item *

L<Digest::SHA> has been upgraded from version 5.61 to 5.71.

Added BITS mode to the addfile method and shasum.  This makes
partial-byte inputs possible via files/STDIN and lets shasum check
all 8074 NIST Msg vectors, where previously special programming was
required to do this.

=item *

L<Encode> has been upgraded from version 2.42 to 2.44.

Missing aliases added, a deep recursion error fixed and various
documentation updates.

Addressed 'decode_xs n-byte heap-overflow' security bug in Unicode.xs
(CVE-2011-2939). (5.14.2)

=item *

L<ExtUtils::CBuilder> updated from version 0.280203 to 0.280206.

The new version appends CFLAGS and LDFLAGS to their Config.pm
counterparts.

=item *

L<ExtUtils::ParseXS> has been upgraded from version 2.2210 to 3.16.

Much of L<ExtUtils::ParseXS>, the module behind the XS compiler C<xsubpp>,
was rewritten and cleaned up.  It has been made somewhat more extensible
and now finally uses strictures.

The typemap logic has been moved into a separate module,
L<ExtUtils::Typemaps>.  See L</New Modules and Pragmata>, above.

For a complete set of changes, please see the ExtUtils::ParseXS
changelog, available on the CPAN.

=item *

L<File::Glob> has been upgraded from version 1.12 to 1.17.

On Windows, tilde (~) expansion now checks the C<USERPROFILE> environment
variable, after checking C<HOME>.

It has a new C<:bsd_glob> export tag, intended to replace C<:glob>.  Like
C<:glob> it overrides C<glob> with a function that does not split the glob
pattern into words, but, unlike C<:glob>, it iterates properly in scalar
context, instead of returning the last file.

There are other changes affecting Perl's own C<glob> operator (which uses
File::Glob internally, except on VMS).  See L</Performance Enhancements>
and L</Selected Bug Fixes>.

=item *

L<FindBin> updated from version 1.50 to 1.51.

It no longer returns a wrong result if a script of the same name as the
current one exists in the path and is executable.

=item *

L<HTTP::Tiny> has been upgraded from version 0.012 to 0.017.

Added support for using C<$ENV{http_proxy}> to set the default proxy host.

Adds additional shorthand methods for all common HTTP verbs,
a C<post_form()> method for POST-ing x-www-form-urlencoded data and
a C<www_form_urlencode()> utility method.

=item *

L<IO> has been upgraded from version 1.25_04 to 1.25_06, and L<IO::Handle>
from version 1.31 to 1.33.

Together, these upgrades fix a problem with IO::Handle's C<getline> and
C<getlines> methods.  When these methods are called on the special ARGV
handle, the next file is automatically opened, as happens with the built-in
C<E<lt>E<gt>> and C<readline> functions.  But, unlike the built-ins, these
methods were not respecting the caller's use of the L<open> pragma and
applying the appropriate I/O layers to the newly-opened file
[rt.cpan.org #66474].

=item *

L<IPC::Cmd> has been upgraded from version 0.70 to 0.76.

Capturing of command output (both C<STDOUT> and C<STDERR>) is now supported
using L<IPC::Open3> on MSWin32 without requiring L<IPC::Run>.

=item *

L<IPC::Open3> has been upgraded from version 1.09 to 1.12.

Fixes a bug which prevented use of C<open3> on Windows when C<*STDIN>,
C<*STDOUT> or C<*STDERR> had been localized.

Fixes a bug which prevented duplicating numeric file descriptors on Windows.

C<open3> with "-" for the program name works once more.  This was broken in
version 1.06 (and hence in Perl 5.14.0) [perl #95748].

=item *

L<Locale::Codes> has been upgraded from version 3.16 to 3.21.

Added Language Extension codes (langext) and Language Variation codes (langvar)
as defined in the IANA language registry.

Added language codes from ISO 639-5

Added language/script codes from the IANA language subtag registry

Fixed an uninitialized value warning [rt.cpan.org #67438].

Fixed the return value for the all_XXX_codes and all_XXX_names functions
[rt.cpan.org #69100].

Reorganized modules to move Locale::MODULE to Locale::Codes::MODULE to allow
for cleaner future additions.  The original four modules (Locale::Language,
Locale::Currency, Locale::Country, Locale::Script) will continue to work, but
all new sets of codes will be added in the Locale::Codes namespace.

The code2XXX, XXX2code, all_XXX_codes, and all_XXX_names functions now
support retired codes.  All codesets may be specified by a constant or
by their name now.  Previously, they were specified only by a constant.

The alias_code function exists for backward compatibility.  It has been
replaced by rename_country_code.  The alias_code function will be
removed some time after September, 2013.

All work is now done in the central module (Locale::Codes).  Previously,
some was still done in the wrapper modules (Locale::Codes::*).  Added
Language Family codes (langfam) as defined in ISO 639-5.

=item *

L<Math::BigFloat> has been upgraded from version 1.993 to 1.997.

The C<numify> method has been corrected to return a normalized Perl number
(the result of C<0 + $thing>), instead of a string [rt.cpan.org #66732].

=item *

L<Math::BigInt> has been upgraded from version 1.994 to 1.998.

It provides a new C<bsgn> method that complements the C<babs> method.

It fixes the internal C<objectify> function's handling of "foreign objects"
so they are converted to the appropriate class (Math::BigInt or
Math::BigFloat).

=item *

L<Math::BigRat> has been upgraded from version 0.2602 to 0.2603.

C<int()> on a Math::BigRat object containing -1/2 now creates a
Math::BigInt containing 0, rather than -0.  L<Math::BigInt> does not even
support negative zero, so the resulting object was actually malformed
[perl #95530].

=item *

L<Math::Complex> has been upgraded from version 1.56 to 1.59
and L<Math::Trig> from version 1.2 to 1.22.

Fixes include: correct copy constructor usage; fix polarwise formatting with
numeric format specifier; and more stable C<great_circle_direction> algorithm.

=item *

L<Module::CoreList> has been upgraded from version 2.51 to 2.66.

The C<corelist> utility now understands the C<-r> option for displaying
Perl release dates and the C<--diff> option to print the set of modlib
changes between two perl distributions.

=item *

L<Module::Metadata> has been upgraded from version 1.000004 to 1.000009.

Adds C<provides> method to generate a CPAN META provides data structure
correctly; use of C<package_versions_from_directory> is discouraged.

=item *

L<ODBM_File> has been upgraded from version 1.10 to 1.12.

The XS code is now compiled with C<PERL_NO_GET_CONTEXT>, which will aid
performance under ithreads.

=item *

L<open> has been upgraded from version 1.08 to 1.10.

It no longer turns off layers on standard handles when invoked without the
":std" directive.  Similarly, when invoked I<with> the ":std" directive, it
now clears layers on STDERR before applying the new ones, and not just on
STDIN and STDOUT [perl #92728].

=item *

L<overload> has been upgraded from version 1.13 to 1.18.

C<overload::Overloaded> no longer calls C<can> on the class, but uses
another means to determine whether the object has overloading.  It was
never correct for it to call C<can>, as overloading does not respect
AUTOLOAD.  So classes that autoload methods and implement C<can> no longer
have to account for overloading [perl #40333].

A warning is now produced for invalid arguments.  See L</New Diagnostics>.

=item *

L<PerlIO::scalar> has been upgraded from version 0.11 to 0.14.

(This is the module that implements C<< open $fh, '>', \$scalar >>.)

It fixes a problem with C<< open my $fh, ">", \$scalar >> not working if
C<$scalar> is a copy-on-write scalar. (5.14.2)

It also fixes a hang that occurs with C<readline> or C<< <$fh> >> if a
typeglob has been assigned to $scalar [perl #92258].

It no longer assumes during C<seek> that $scalar is a string internally.
If it didn't crash, it was close to doing so [perl #92706].  Also, the
internal print routine no longer assumes that the position set by C<seek>
is valid, but extends the string to that position, filling the intervening
bytes (between the old length and the seek position) with nulls
[perl #78980].

Printing to an in-memory handle now works if the $scalar holds a reference,
stringifying the reference before modifying it.  References used to be
treated as empty strings.

Printing to an in-memory handle no longer crashes if the $scalar happens to
hold a number internally, but no string buffer.

Printing to an in-memory handle no longer creates scalars that confuse
the regular expression engine [perl #108398].

=item *

L<Pod::Functions> has been upgraded from version 1.04 to 1.05.

F<Functions.pm> is now generated at perl build time from annotations in
F<perlfunc.pod>.  This will ensure that L<Pod::Functions> and L<perlfunc>
remain in synchronisation.

=item *

L<Pod::Html> has been upgraded from version 1.11 to 1.1502.

This is an extensive rewrite of Pod::Html to use L<Pod::Simple> under
the hood.  The output has changed significantly.

=item *

L<Pod::Perldoc> has been upgraded from version 3.15_03 to 3.17.

It corrects the search paths on VMS [perl #90640]. (5.14.1)

The B<-v> option now fetches the right section for C<$0>.

This upgrade has numerous significant fixes.  Consult its changelog on
the CPAN for more information.

=item *

L<POSIX> has been upgraded from version 1.24 to 1.30.

L<POSIX> no longer uses L<AutoLoader>.  Any code which was relying on this
implementation detail was buggy, and may fail because of this change.
The module's Perl code has been considerably simplified, roughly halving
the number of lines, with no change in functionality.  The XS code has
been refactored to reduce the size of the shared object by about 12%,
with no change in functionality.  More POSIX functions now have tests.

C<sigsuspend> and C<pause> now run signal handlers before returning, as the
whole point of these two functions is to wait until a signal has
arrived, and then return I<after> it has been triggered.  Delayed, or
"safe", signals were preventing that from happening, possibly resulting in
race conditions [perl #107216].

C<POSIX::sleep> is now a direct call into the underlying OS C<sleep>
function, instead of being a Perl wrapper on C<CORE::sleep>.
C<POSIX::dup2> now returns the correct value on Win32 (I<i.e.>, the file
descriptor).  C<POSIX::SigSet> C<sigsuspend> and C<sigpending> and
C<POSIX::pause> now dispatch safe signals immediately before returning to
their caller.

C<POSIX::Termios::setattr> now defaults the third argument to C<TCSANOW>,
instead of 0. On most platforms C<TCSANOW> is defined to be 0, but on some
0 is not a valid parameter, which caused a call with defaults to fail.

=item *

L<Socket> has been upgraded from version 1.94 to 2.001.

It has new functions and constants for handling IPv6 sockets:

    pack_ipv6_mreq
    unpack_ipv6_mreq
    IPV6_ADD_MEMBERSHIP
    IPV6_DROP_MEMBERSHIP
    IPV6_MTU
    IPV6_MTU_DISCOVER
    IPV6_MULTICAST_HOPS
    IPV6_MULTICAST_IF
    IPV6_MULTICAST_LOOP
    IPV6_UNICAST_HOPS
    IPV6_V6ONLY

=item *

L<Storable> has been upgraded from version 2.27 to 2.34.

It no longer turns copy-on-write scalars into read-only scalars when
freezing and thawing.

=item *

L<Sys::Syslog> has been upgraded from version 0.27 to 0.29.

This upgrade closes many outstanding bugs.

=item *

L<Term::ANSIColor> has been upgraded from version 3.00 to 3.01.

Only interpret an initial array reference as a list of colors, not any initial
reference, allowing the colored function to work properly on objects with
stringification defined.

=item *

L<Term::ReadLine> has been upgraded from version 1.07 to 1.09.

Term::ReadLine now supports any event loop, including unpublished ones and
simple L<IO::Select>, loops without the need to rewrite existing code for
any particular framework [perl #108470].

=item *

L<threads::shared> has been upgraded from version 1.37 to 1.40.

Destructors on shared objects used to be ignored sometimes if the objects
were referenced only by shared data structures.  This has been mostly
fixed, but destructors may still be ignored if the objects still exist at
global destruction time [perl #98204].

=item *

L<Unicode::Collate> has been upgraded from version 0.73 to 0.89.

Updated to CLDR 1.9.1

Locales updated to CLDR 2.0: mk, mt, nb, nn, ro, ru, sk, sr, sv, uk,
zh__pinyin, zh__stroke

Newly supported locales: bn, fa, ml, mr, or, pa, sa, si, si__dictionary,
sr_Latn, sv__reformed, ta, te, th, ur, wae.

Tailored compatibility ideographs as well as unified ideographs for the
locales: ja, ko, zh__big5han, zh__gb2312han, zh__pinyin, zh__stroke.

Locale/*.pl files are now searched for in @INC.

=item *

L<Unicode::Normalize> has been upgraded from version 1.10 to 1.14.

Fixes for the removal of F<unicore/CompositionExclusions.txt> from core.

=item *

L<Unicode::UCD> has been upgraded from version 0.32 to 0.43.

This adds four new functions:  C<prop_aliases()> and
C<prop_value_aliases()>, which are used to find all Unicode-approved
synonyms for property names, or to convert from one name to another;
C<prop_invlist> which returns all code points matching a given
Unicode binary property; and C<prop_invmap> which returns the complete
specification of a given Unicode property.

=item *

L<Win32API::File> has been upgraded from version 0.1101 to 0.1200.

Added SetStdHandle and GetStdHandle functions

=back

=head2 Removed Modules and Pragmata

As promised in Perl 5.14.0's release notes, the following modules have
been removed from the core distribution, and if needed should be installed
from CPAN instead.

=over

=item *

L<Devel::DProf> has been removed from the Perl core.  Prior version was
20110228.00.

=item *

L<Shell> has been removed from the Perl core.  Prior version was 0.72_01.

=item *

Several old perl4-style libraries which have been deprecated with 5.14
are now removed:

    abbrev.pl assert.pl bigfloat.pl bigint.pl bigrat.pl cacheout.pl
    complete.pl ctime.pl dotsh.pl exceptions.pl fastcwd.pl flush.pl
    getcwd.pl getopt.pl getopts.pl hostname.pl importenv.pl
    lib/find{,depth}.pl look.pl newgetopt.pl open2.pl open3.pl
    pwd.pl shellwords.pl stat.pl tainted.pl termcap.pl timelocal.pl

They can be found on CPAN as L<Perl4::CoreLibs>.

=back

=head1 Documentation

=head2 New Documentation

=head3 L<perldtrace>

L<perldtrace> describes Perl's DTrace support, listing the provided probes
and gives examples of their use.

=head3 L<perlexperiment>

This document is intended to provide a list of experimental features in
Perl.  It is still a work in progress.

=head3 L<perlootut>

This a new OO tutorial.  It focuses on basic OO concepts, and then recommends
that readers choose an OO framework from CPAN.

=head3 L<perlxstypemap>

The new manual describes the XS typemapping mechanism in unprecedented
detail and combines new documentation with information extracted from
L<perlxs> and the previously unofficial list of all core typemaps.

=head2 Changes to Existing Documentation

=head3 L<perlapi>

=over 4

=item *

The HV API has long accepted negative lengths to show that the key is
in UTF8.  This is now documented.

=item *

The C<boolSV()> macro is now documented.

=back

=head3 L<perlfunc>

=over 4

=item *

C<dbmopen> treats a 0 mode as a special case, that prevents a nonexistent
file from being created.  This has been the case since Perl 5.000, but was
never documented anywhere.  Now the perlfunc entry mentions it
[perl #90064].

=item *

As an accident of history, C<open $fh, '<:', ...> applies the default
layers for the platform (C<:raw> on Unix, C<:crlf> on Windows), ignoring
whatever is declared by L<open.pm|open>.  This seems such a useful feature
it has been documented in L<perlfunc|perlfunc/open> and L<open>.

=item *

The entry for C<split> has been rewritten.  It is now far clearer than
before.

=back

=head3 L<perlguts>

=over 4

=item *

A new section, L<Autoloading with XSUBs|perlguts/Autoloading with XSUBs>,
has been added, which explains the two APIs for accessing the name of the
autoloaded sub.

=item *

Some function descriptions in L<perlguts> were confusing, as it was
not clear whether they referred to the function above or below the
description.  This has been clarified [perl #91790].

=back

=head3 L<perlobj>

=over 4

=item *

This document has been rewritten from scratch, and its coverage of various OO
concepts has been expanded.

=back

=head3 L<perlop>

=over 4

=item *

Documentation of the smartmatch operator has been reworked and moved from
perlsyn to perlop where it belongs.

It has also been corrected for the case of C<undef> on the left-hand
side.  The list of different smart match behaviors had an item in the
wrong place.

=item *

Documentation of the ellipsis statement (C<...>) has been reworked and
moved from perlop to perlsyn.

=item *

The explanation of bitwise operators has been expanded to explain how they
work on Unicode strings (5.14.1).

=item *

More examples for C<m//g> have been added (5.14.1).

=item *

The C<<< <<\FOO >>> here-doc syntax has been documented (5.14.1).

=back

=head3 L<perlpragma>

=over 4

=item *

There is now a standard convention for naming keys in the C<%^H>,
documented under L<Key naming|perlpragma/Key naming>.

=back

=head3 L<perlsec/Laundering and Detecting Tainted Data>

=over 4

=item *

The example function for checking for taintedness contained a subtle
error.  C<$@> needs to be localized to prevent its changing this
global's value outside the function.  The preferred method to check for
this remains L<Scalar::Util/tainted>.

=back

=head3 L<perllol>

=over

=item *

L<perllol> has been expanded with examples using the new C<push $scalar>
syntax introduced in Perl 5.14.0 (5.14.1).

=back

=head3 L<perlmod>

=over

=item *

L<perlmod> now states explicitly that some types of explicit symbol table
manipulation are not supported.  This codifies what was effectively already
the case [perl #78074].

=back

=head3 L<perlpodstyle>

=over 4

=item *

The tips on which formatting codes to use have been corrected and greatly
expanded.

=item *

There are now a couple of example one-liners for previewing POD files after
they have been edited.

=back

=head3 L<perlre>

=over

=item *

The C<(*COMMIT)> directive is now listed in the right section
(L<Verbs without an argument|perlre/Verbs without an argument>).

=back

=head3 L<perlrun>

=over

=item *

L<perlrun> has undergone a significant clean-up.  Most notably, the
B<-0x...> form of the B<-0> flag has been clarified, and the final section
on environment variables has been corrected and expanded (5.14.1).

=back

=head3 L<perlsub>

=over

=item *

The ($;) prototype syntax, which has existed for rather a long time, is now
documented in L<perlsub>.  It lets a unary function have the same
precedence as a list operator.

=back

=head3 L<perltie>

=over

=item *

The required syntax for tying handles has been documented.

=back

=head3 L<perlvar>

=over

=item *

The documentation for L<$!|perlvar/$!> has been corrected and clarified.
It used to state that $! could be C<undef>, which is not the case.  It was
also unclear whether system calls set C's C<errno> or Perl's C<$!>
[perl #91614].

=item *

Documentation for L<$$|perlvar/$$> has been amended with additional
cautions regarding changing the process ID.

=back

=head3 Other Changes

=over 4

=item *

L<perlxs> was extended with documentation on inline typemaps.

=item *

L<perlref> has a new L<Circular References|perlref/Circular References>
section explaining how circularities may not be freed and how to solve that
with weak references.

=item *

Parts of L<perlapi> were clarified, and Perl equivalents of some C
functions have been added as an additional mode of exposition.

=item *

A few parts of L<perlre> and L<perlrecharclass> were clarified.

=back

=head2 Removed Documentation

=head3 Old OO Documentation

The old OO tutorials, perltoot, perltooc, and perlboot, have been
removed.  The perlbot (bag of object tricks) document has been removed
as well.

=head3 Development Deltas

The perldelta files for development releases are no longer packaged with
perl.  These can still be found in the perl source code repository.

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

L<Cannot set tied @DB::args|perldiag/"Cannot set tied @DB::args">

This error occurs when C<caller> tries to set C<@DB::args> but finds it
tied.  Before this error was added, it used to crash instead.

=item *

L<Cannot tie unreifiable array|perldiag/"Cannot tie unreifiable array">

This error is part of a safety check that the C<tie> operator does before
tying a special array like C<@_>.  You should never see this message.

=item *

L<&CORE::%s cannot be called directly|perldiag/"&CORE::%s cannot be called directly">

This occurs when a subroutine in the C<CORE::> namespace is called
with C<&foo> syntax or through a reference.  Some subroutines
in this package cannot yet be called that way, but must be
called as barewords.  See L</Subroutines in the C<CORE> namespace>, above.

=item *

L<Source filters apply only to byte streams|perldiag/"Source filters apply only to byte streams">

This new error occurs when you try to activate a source filter (usually by
loading a source filter module) within a string passed to C<eval> under the
C<unicode_eval> feature.

=back

=head3 New Warnings

=over 4

=item *

L<defined(@array) is deprecated|perldiag/"defined(@array) is deprecated">

The long-deprecated C<defined(@array)> now also warns for package variables.
Previously it issued a warning for lexical variables only.

=item *

L<length() used on %s|perldiag/length() used on %s>

This new warning occurs when C<length> is used on an array or hash, instead
of C<scalar(@array)> or C<scalar(keys %hash)>.

=item *

L<lvalue attribute %s already-defined subroutine|perldiag/"lvalue attribute %s already-defined subroutine">

L<attributes.pm|attributes> now emits this warning when the :lvalue
attribute is applied to a Perl subroutine that has already been defined, as
doing so can have unexpected side-effects.

=item *

L<overload arg '%s' is invalid|perldiag/"overload arg '%s' is invalid">

This warning, in the "overload" category, is produced when the overload
pragma is given an argument it doesn't recognize, presumably a mistyped
operator.

=item *

L<$[ used in %s (did you mean $] ?)|perldiag/"$[ used in %s (did you mean $] ?)">

This new warning exists to catch the mistaken use of C<$[> in version
checks.  C<$]>, not C<$[>, contains the version number.

=item *

L<Useless assignment to a temporary|perldiag/"Useless assignment to a temporary">

Assigning to a temporary scalar returned
from an lvalue subroutine now produces this
warning [perl #31946].

=item *

L<Useless use of \E|perldiag/"Useless use of \E">

C<\E> does nothing unless preceded by C<\Q>, C<\L> or C<\U>.

=back

=head2 Removed Errors

=over

=item *

"sort is now a reserved word"

This error used to occur when C<sort> was called without arguments,
followed by C<;> or C<)>.  (E.g., C<sort;> would die, but C<{sort}> was
OK.)  This error message was added in Perl 3 to catch code like
C<close(sort)> which would no longer work.  More than two decades later,
this message is no longer appropriate.  Now C<sort> without arguments is
always allowed, and returns an empty list, as it did in those cases
where it was already allowed [perl #90030].

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

The "Applying pattern match..." or similar warning produced when an
array or hash is on the left-hand side of the C<=~> operator now
mentions the name of the variable.

=item *

The "Attempt to free non-existent shared string" has had the spelling
of "non-existent" corrected to "nonexistent".  It was already listed
with the correct spelling in L<perldiag>.

=item *

The error messages for using C<default> and C<when> outside a
topicalizer have been standardized to match the messages for C<continue>
and loop controls.  They now read 'Can't "default" outside a
topicalizer' and 'Can't "when" outside a topicalizer'.  They both used
to be 'Can't use when() outside a topicalizer' [perl #91514].

=item *

The message, "Code point 0x%X is not Unicode, no properties match it;
all inverse properties do" has been changed to "Code point 0x%X is not
Unicode, all \p{} matches fail; all \P{} matches succeed".

=item *

Redefinition warnings for constant subroutines used to be mandatory,
even occurring under C<no warnings>.  Now they respect the L<warnings>
pragma.

=item *

The "glob failed" warning message is now suppressible via C<no warnings>
[perl #111656].

=item *

The L<Invalid version format|perldiag/"Invalid version format (%s)">
error message now says "negative version number" within the parentheses,
rather than "non-numeric data", for negative numbers.

=item *

The two warnings
L<Possible attempt to put comments in qw() list|perldiag/"Possible attempt to put comments in qw() list">
and
L<Possible attempt to separate words with commas|perldiag/"Possible attempt to separate words with commas">
are no longer mutually exclusive: the same C<qw> construct may produce
both.

=item *

The uninitialized warning for C<y///r> when C<$_> is implicit and
undefined now mentions the variable name, just like the non-/r variation
of the operator.

=item *

The 'Use of "foo" without parentheses is ambiguous' warning has been
extended to apply also to user-defined subroutines with a (;$)
prototype, and not just to built-in functions.

=item *

Warnings that mention the names of lexical (C<my>) variables with
Unicode characters in them now respect the presence or absence of the
C<:utf8> layer on the output handle, instead of outputting UTF8
regardless.  Also, the correct names are included in the strings passed
to C<$SIG{__WARN__}> handlers, rather than the raw UTF8 bytes.
