        assert(pat)

STATIC regnode_offset
S_reg(pTHX_ RExC_state_t *pRExC_state, I32 paren, I32 *flagp, U32 depth);
# define PERL_ARGS_ASSERT_REG                   \
        assert(pRExC_state); assert(flagp)

STATIC regnode_offset
S_reg1node(pTHX_ RExC_state_t *pRExC_state, U8 op, U32 arg);
# define PERL_ARGS_ASSERT_REG1NODE              \
        assert(pRExC_state)

STATIC regnode_offset
S_reg2node(pTHX_ RExC_state_t *pRExC_state, const U8 op, const U32 arg1, const I32 arg2);
# define PERL_ARGS_ASSERT_REG2NODE              \
        assert(pRExC_state)

STATIC regnode_offset
S_reg_la_NOTHING(pTHX_ RExC_state_t *pRExC_state, U32 flags, const char *type);
# define PERL_ARGS_ASSERT_REG_LA_NOTHING        \
        assert(pRExC_state); assert(type)

STATIC regnode_offset
S_reg_la_OPFAIL(pTHX_ RExC_state_t *pRExC_state, U32 flags, const char *type);
# define PERL_ARGS_ASSERT_REG_LA_OPFAIL         \
        assert(pRExC_state); assert(type)

STATIC regnode_offset
S_reg_node(pTHX_ RExC_state_t *pRExC_state, U8 op);
# define PERL_ARGS_ASSERT_REG_NODE              \
        assert(pRExC_state)

STATIC SV *
S_reg_scan_name(pTHX_ RExC_state_t *pRExC_state, U32 flags);
# define PERL_ARGS_ASSERT_REG_SCAN_NAME         \
        assert(pRExC_state)

STATIC regnode_offset
S_regatom(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, U32 depth);
# define PERL_ARGS_ASSERT_REGATOM               \
        assert(pRExC_state); assert(flagp)

STATIC regnode_offset
S_regbranch(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, I32 first, U32 depth);
# define PERL_ARGS_ASSERT_REGBRANCH             \
        assert(pRExC_state); assert(flagp)

STATIC regnode_offset
S_regclass(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, U32 depth, const bool stop_at_1, bool allow_multi_fold, const bool silence_non_portable, const bool strict, bool optimizable, SV **ret_invlist);
# define PERL_ARGS_ASSERT_REGCLASS              \
        assert(pRExC_state); assert(flagp)

STATIC unsigned int
S_regex_set_precedence(const U8 my_operator)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_REGEX_SET_PRECEDENCE

STATIC void
S_reginsert(pTHX_ RExC_state_t *pRExC_state, const U8 op, const regnode_offset operand, const U32 depth);
# define PERL_ARGS_ASSERT_REGINSERT             \
        assert(pRExC_state)

STATIC regnode_offset
S_regnode_guts(pTHX_ RExC_state_t *pRExC_state, const STRLEN extra_len);
# define PERL_ARGS_ASSERT_REGNODE_GUTS          \
        assert(pRExC_state)

STATIC regnode_offset
S_regpiece(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, U32 depth);
# define PERL_ARGS_ASSERT_REGPIECE              \
        assert(pRExC_state); assert(flagp)

STATIC regnode_offset
S_regpnode(pTHX_ RExC_state_t *pRExC_state, U8 op, SV *arg);
# define PERL_ARGS_ASSERT_REGPNODE              \
        assert(pRExC_state); assert(arg)

STATIC bool
S_regtail(pTHX_ RExC_state_t *pRExC_state, const regnode_offset p, const regnode_offset val, const U32 depth)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_REGTAIL               \
        assert(pRExC_state); assert(p); assert(val)

STATIC void
S_set_regex_pv(pTHX_ RExC_state_t *pRExC_state, REGEXP *Rx);
# define PERL_ARGS_ASSERT_SET_REGEX_PV          \
        assert(pRExC_state); assert(Rx)

STATIC void
S_skip_to_be_ignored_text(pTHX_ RExC_state_t *pRExC_state, char **p, const bool force_to_xmod);
# define PERL_ARGS_ASSERT_SKIP_TO_BE_IGNORED_TEXT \
        assert(pRExC_state); assert(p)

STATIC void
S_ssc_finalize(pTHX_ RExC_state_t *pRExC_state, regnode_ssc *ssc);
# define PERL_ARGS_ASSERT_SSC_FINALIZE          \
        assert(pRExC_state); assert(ssc)

# if defined(DEBUGGING)
STATIC regnode_offset
S_regnode_guts_debug(pTHX_ RExC_state_t *pRExC_state, const U8 op, const STRLEN extra_len);
#   define PERL_ARGS_ASSERT_REGNODE_GUTS_DEBUG  \
        assert(pRExC_state)

STATIC bool
S_regtail_study(pTHX_ RExC_state_t *pRExC_state, regnode_offset p, const regnode_offset val, U32 depth)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_REGTAIL_STUDY       \
        assert(pRExC_state); assert(p); assert(val)

#   if defined(ENABLE_REGEX_SETS_DEBUGGING)
STATIC void
S_dump_regex_sets_structures(pTHX_ RExC_state_t *pRExC_state, AV *stack, const IV fence, AV *fence_stack);
#     define PERL_ARGS_ASSERT_DUMP_REGEX_SETS_STRUCTURES \
        assert(pRExC_state); assert(stack); assert(fence_stack)

#   endif
# endif /* defined(DEBUGGING) */
# if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE Size_t
S_find_first_differing_byte_pos(const U8 *s1, const U8 *s2, const Size_t max);
#   define PERL_ARGS_ASSERT_FIND_FIRST_DIFFERING_BYTE_POS \
        assert(s1); assert(s2)

PERL_STATIC_INLINE char *
S_reg_skipcomment(RExC_state_t *pRExC_state, char *p);
#   define PERL_ARGS_ASSERT_REG_SKIPCOMMENT     \
        assert(pRExC_state); assert(p)

# endif /* !defined(PERL_NO_INLINE_FUNCTIONS) */
#endif /* defined(PERL_IN_REGCOMP_C) */
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGCOMP_INVLIST_C)
PERL_CALLCONV void
Perl_populate_bitmap_from_invlist(pTHX_ SV *invlist, const UV offset, const U8 *bitmap, const Size_t len)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_POPULATE_BITMAP_FROM_INVLIST \
        assert(invlist); assert(bitmap)

PERL_CALLCONV void
Perl_populate_invlist_from_bitmap(pTHX_ const U8 *bitmap, const Size_t bitmap_len, SV **invlist, const UV offset)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_POPULATE_INVLIST_FROM_BITMAP \
        assert(bitmap); assert(invlist)

#endif /* defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGCOMP_INVLIST_C) */
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C) || \
    defined(PERL_IN_TOKE_C)
PERL_CALLCONV bool
Perl_is_grapheme(pTHX_ const U8 *strbeg, const U8 *s, const U8 *strend, const UV cp)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_IS_GRAPHEME           \
        assert(strbeg); assert(s); assert(strend)

#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C) || \
    defined(PERL_IN_UTF8_C)
PERL_CALLCONV UV
Perl__to_fold_latin1(const U8 c, U8 *p, STRLEN *lenp, const unsigned int flags);
# define PERL_ARGS_ASSERT__TO_FOLD_LATIN1       \
        assert(p); assert(lenp)

#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_TOKE_C)
PERL_CALLCONV bool
Perl_regcurly(const char *s, const char *e, const char *result[5])
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_REGCURLY              \
        assert(s); assert(e)

#endif
#if defined(PERL_IN_REGCOMP_DEBUG_C) && defined(DEBUGGING)
STATIC U8
S_put_charclass_bitmap_innards(pTHX_ SV *sv, char *bitmap, SV *nonbitmap_invlist, SV *only_utf8_locale_invlist, const regnode * const node, const U8 flags, const bool force_as_is_display);
# define PERL_ARGS_ASSERT_PUT_CHARCLASS_BITMAP_INNARDS \
        assert(sv)

STATIC SV *
S_put_charclass_bitmap_innards_common(pTHX_ SV *invlist, SV *posixes, SV *only_utf8, SV *not_utf8, SV *only_utf8_locale, const bool invert);
# define PERL_ARGS_ASSERT_PUT_CHARCLASS_BITMAP_INNARDS_COMMON \
        assert(invlist)

STATIC void
S_put_charclass_bitmap_innards_invlist(pTHX_ SV *sv, SV *invlist);
# define PERL_ARGS_ASSERT_PUT_CHARCLASS_BITMAP_INNARDS_INVLIST \
        assert(sv); assert(invlist)

STATIC void
S_put_code_point(pTHX_ SV *sv, UV c);
# define PERL_ARGS_ASSERT_PUT_CODE_POINT        \
        assert(sv)

STATIC void
S_put_range(pTHX_ SV *sv, UV start, const UV end, const bool allow_literals);
# define PERL_ARGS_ASSERT_PUT_RANGE             \
        assert(sv)

STATIC void
S_regdump_extflags(pTHX_ const char *lead, const U32 flags);
# define PERL_ARGS_ASSERT_REGDUMP_EXTFLAGS

STATIC void
S_regdump_intflags(pTHX_ const char *lead, const U32 flags);
# define PERL_ARGS_ASSERT_REGDUMP_INTFLAGS

#endif /* defined(PERL_IN_REGCOMP_DEBUG_C) && defined(DEBUGGING) */
#if defined(PERL_IN_REGCOMP_INVLIST_C) && !defined(PERL_EXT_RE_BUILD)
STATIC void
S__append_range_to_invlist(pTHX_ SV * const invlist, const UV start, const UV end);
# define PERL_ARGS_ASSERT__APPEND_RANGE_TO_INVLIST \
        assert(invlist)

STATIC void
S_initialize_invlist_guts(pTHX_ SV *invlist, const Size_t initial_size);
# define PERL_ARGS_ASSERT_INITIALIZE_INVLIST_GUTS \
        assert(invlist)

STATIC void
S_invlist_replace_list_destroys_src(pTHX_ SV *dest, SV *src);
# define PERL_ARGS_ASSERT_INVLIST_REPLACE_LIST_DESTROYS_SRC \
        assert(dest); assert(src)

# if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE UV *
S__invlist_array_init(SV * const invlist, const bool will_have_0)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT__INVLIST_ARRAY_INIT \
        assert(invlist)

PERL_STATIC_INLINE IV *
S_get_invlist_previous_index_addr(SV *invlist)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_GET_INVLIST_PREVIOUS_INDEX_ADDR \
        assert(invlist)

PERL_STATIC_INLINE void
S_invlist_clear(pTHX_ SV *invlist);
#   define PERL_ARGS_ASSERT_INVLIST_CLEAR       \
        assert(invlist)

PERL_STATIC_INLINE UV
S_invlist_max(const SV * const invlist)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_INVLIST_MAX         \
        assert(invlist)

PERL_STATIC_INLINE IV
S_invlist_previous_index(SV * const invlist)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_INVLIST_PREVIOUS_INDEX \
        assert(invlist)

PERL_STATIC_INLINE void
S_invlist_set_previous_index(SV * const invlist, const IV index);
#   define PERL_ARGS_ASSERT_INVLIST_SET_PREVIOUS_INDEX \
        assert(invlist)

PERL_STATIC_INLINE void
S_invlist_trim(SV *invlist);
#   define PERL_ARGS_ASSERT_INVLIST_TRIM        \
        assert(invlist)

# endif /* !defined(PERL_NO_INLINE_FUNCTIONS) */
#endif /* defined(PERL_IN_REGCOMP_INVLIST_C) && !defined(PERL_EXT_RE_BUILD) */
#if defined(PERL_IN_REGCOMP_STUDY_C)
STATIC SV *
S_get_ANYOF_cp_list_for_ssc(pTHX_ const RExC_state_t *pRExC_state, const regnode_charclass * const node);
# define PERL_ARGS_ASSERT_GET_ANYOF_CP_LIST_FOR_SSC \
        assert(pRExC_state); assert(node)

STATIC SV *
S_make_exactf_invlist(pTHX_ RExC_state_t *pRExC_state, regnode *node)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_MAKE_EXACTF_INVLIST   \
        assert(pRExC_state); assert(node)

STATIC void
S_rck_elide_nothing(pTHX_ regnode *node);
# define PERL_ARGS_ASSERT_RCK_ELIDE_NOTHING     \
        assert(node)

STATIC void
S_ssc_add_range(pTHX_ regnode_ssc *ssc, UV const start, UV const end);
# define PERL_ARGS_ASSERT_SSC_ADD_RANGE         \
        assert(ssc)

STATIC void
S_ssc_and(pTHX_ const RExC_state_t *pRExC_state, regnode_ssc *ssc, const regnode_charclass *and_with);
# define PERL_ARGS_ASSERT_SSC_AND               \
        assert(pRExC_state); assert(ssc); assert(and_with)

STATIC void
S_ssc_anything(pTHX_ regnode_ssc *ssc);
# define PERL_ARGS_ASSERT_SSC_ANYTHING          \
        assert(ssc)

STATIC void
S_ssc_clear_locale(regnode_ssc *ssc);
# define PERL_ARGS_ASSERT_SSC_CLEAR_LOCALE      \
        assert(ssc)

STATIC void
S_ssc_cp_and(pTHX_ regnode_ssc *ssc, UV const cp);
# define PERL_ARGS_ASSERT_SSC_CP_AND            \
        assert(ssc)

STATIC void
S_ssc_intersection(pTHX_ regnode_ssc *ssc, SV * const invlist, const bool invert_2nd);
# define PERL_ARGS_ASSERT_SSC_INTERSECTION      \
        assert(ssc); assert(invlist)

STATIC int
S_ssc_is_anything(const regnode_ssc *ssc)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SSC_IS_ANYTHING       \
        assert(ssc)

STATIC int
S_ssc_is_cp_posixl_init(const RExC_state_t *pRExC_state, const regnode_ssc *ssc)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SSC_IS_CP_POSIXL_INIT \
        assert(pRExC_state); assert(ssc)

STATIC void
S_ssc_or(pTHX_ const RExC_state_t *pRExC_state, regnode_ssc *ssc, const regnode_charclass *or_with);
# define PERL_ARGS_ASSERT_SSC_OR                \
        assert(pRExC_state); assert(ssc); assert(or_with)

STATIC void
S_ssc_union(pTHX_ regnode_ssc *ssc, SV * const invlist, const bool invert_2nd);
# define PERL_ARGS_ASSERT_SSC_UNION             \
        assert(ssc); assert(invlist)

STATIC void
S_unwind_scan_frames(pTHX_ const void *p);
# define PERL_ARGS_ASSERT_UNWIND_SCAN_FRAMES    \
        assert(p)

#endif /* defined(PERL_IN_REGCOMP_STUDY_C) */
#if defined(PERL_IN_REGEXEC_C)
STATIC LB_enum
S_advance_one_LB(pTHX_ U8 **curpos, const U8 * const strend, const bool utf8_target)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_ADVANCE_ONE_LB        \
        assert(curpos); assert(strend)

STATIC SB_enum
S_advance_one_SB(pTHX_ U8 **curpos, const U8 * const strend, const bool utf8_target)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_ADVANCE_ONE_SB        \
        assert(curpos); assert(strend)

STATIC WB_enum
S_advance_one_WB(pTHX_ U8 **curpos, const U8 * const strend, const bool utf8_target, const bool skip_Extend_Format)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_ADVANCE_ONE_WB        \
        assert(curpos); assert(strend)

STATIC GCB_enum
S_backup_one_GCB(pTHX_ const U8 * const strbeg, U8 **curpos, const bool utf8_target)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_BACKUP_ONE_GCB        \
        assert(strbeg); assert(curpos)

STATIC LB_enum
S_backup_one_LB(pTHX_ const U8 * const strbeg, U8 **curpos, const bool utf8_target)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_BACKUP_ONE_LB         \
        assert(strbeg); assert(curpos)

STATIC SB_enum
S_backup_one_SB(pTHX_ const U8 * const strbeg, U8 **curpos, const bool utf8_target)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_BACKUP_ONE_SB         \
        assert(strbeg); assert(curpos)

STATIC WB_enum
S_backup_one_WB(pTHX_ WB_enum *previous, const U8 * const strbeg, U8 **curpos, const bool utf8_target)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_BACKUP_ONE_WB         \
        assert(previous); assert(strbeg); assert(curpos)

STATIC char *
S_find_byclass(pTHX_ regexp *prog, const regnode *c, char *s, const char *strend, regmatch_info *reginfo)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_FIND_BYCLASS          \
        assert(prog); assert(c); assert(s); assert(strend)

STATIC U8 *
S_find_next_masked(U8 *s, const U8 *send, const U8 byte, const U8 mask)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_FIND_NEXT_MASKED      \
        assert(s); assert(send)

STATIC U8 *
S_find_span_end(U8 *s, const U8 *send, const U8 span_byte)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_FIND_SPAN_END         \
        assert(s); assert(send)

STATIC U8 *
S_find_span_end_mask(U8 *s, const U8 *send, const U8 span_byte, const U8 mask)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_FIND_SPAN_END_MASK    \
        assert(s); assert(send)

STATIC bool
S_isFOO_lc(pTHX_ const U8 classnum, const U8 character)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_ISFOO_LC

STATIC bool
S_isFOO_utf8_lc(pTHX_ const U8 classnum, const U8 *character, const U8 *e)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_ISFOO_UTF8_LC         \
        assert(character); assert(e)

STATIC bool
S_isGCB(pTHX_ const GCB_enum before, const GCB_enum after, const U8 * const strbeg, const U8 * const curpos, const bool utf8_target)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_ISGCB                 \
        assert(strbeg); assert(curpos)

STATIC bool
S_isLB(pTHX_ LB_enum before, LB_enum after, const U8 * const strbeg, const U8 * const curpos, const U8 * const strend, const bool utf8_target)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_ISLB                  \
        assert(strbeg); assert(curpos); assert(strend)

STATIC bool
S_isSB(pTHX_ SB_enum before, SB_enum after, const U8 * const strbeg, const U8 * const curpos, const U8 * const strend, const bool utf8_target)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_ISSB                  \
        assert(strbeg); assert(curpos); assert(strend)

STATIC bool
S_isWB(pTHX_ WB_enum previous, WB_enum before, WB_enum after, const U8 * const strbeg, const U8 * const curpos, const U8 * const strend, const bool utf8_target)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_ISWB                  \
        assert(strbeg); assert(curpos); assert(strend)

STATIC I32
S_reg_check_named_buff_matched(const regexp *rex, const regnode *scan)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_REG_CHECK_NAMED_BUFF_MATCHED \
        assert(rex); assert(scan)

STATIC void
S_regcp_restore(pTHX_ regexp *rex, I32 ix, U32 *maxopenparen_p comma_pDEPTH);
# define PERL_ARGS_ASSERT_REGCP_RESTORE         \
        assert(rex); assert(maxopenparen_p)

STATIC void
S_regcppop(pTHX_ regexp *rex, U32 *maxopenparen_p comma_pDEPTH);
# define PERL_ARGS_ASSERT_REGCPPOP              \
        assert(rex); assert(maxopenparen_p)

STATIC CHECKPOINT
S_regcppush(pTHX_ const regexp *rex, I32 parenfloor, U32 maxopenparen comma_pDEPTH);
# define PERL_ARGS_ASSERT_REGCPPUSH             \
        assert(rex)

STATIC U8 *
S_reghop3(U8 *s, SSize_t off, const U8 *lim)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_REGHOP3               \
        assert(s); assert(lim)

STATIC U8 *
S_reghop4(U8 *s, SSize_t off, const U8 *llim, const U8 *rlim)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_REGHOP4               \
        assert(s); assert(llim); assert(rlim)

STATIC U8 *
S_reghopmaybe3(U8 *s, SSize_t off, const U8 * const lim)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_REGHOPMAYBE3          \
        assert(s); assert(lim)

STATIC bool
S_reginclass(pTHX_ regexp * const prog, const regnode * const n, const U8 * const p, const U8 * const p_end, bool const utf8_target)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_REGINCLASS            \
        assert(n); assert(p); assert(p_end)

STATIC SSize_t
S_regmatch(pTHX_ regmatch_info *reginfo, char *startpos, regnode *prog)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_REGMATCH              \
        assert(reginfo); assert(startpos); assert(prog)

STATIC I32
S_regrepeat(pTHX_ regexp *prog, char **startposp, const regnode *p, char *loceol, regmatch_info * const reginfo, I32 max comma_pDEPTH)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_REGREPEAT             \
        assert(prog); assert(startposp); assert(p); assert(loceol); assert(reginfo); \
        assert(max)

STATIC bool
S_regtry(pTHX_ regmatch_info *reginfo, char **startposp)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_REGTRY                \
        assert(reginfo); assert(startposp)

STATIC bool
S_to_byte_substr(pTHX_ regexp *prog);
# define PERL_ARGS_ASSERT_TO_BYTE_SUBSTR        \
        assert(prog)

STATIC void
S_to_utf8_substr(pTHX_ regexp *prog);
# define PERL_ARGS_ASSERT_TO_UTF8_SUBSTR        \
        assert(prog)

# if defined(DEBUGGING)
STATIC void
S_debug_start_match(pTHX_ const REGEXP *prog, const bool do_utf8, const char *start, const char *end, const char *blurb);
#   define PERL_ARGS_ASSERT_DEBUG_START_MATCH   \
        assert(prog); assert(start); assert(end); assert(blurb)

STATIC void
S_dump_exec_pos(pTHX_ const char *locinput, const regnode *scan, const char *loc_regeol, const char *loc_bostr, const char *loc_reg_starttry, const bool do_utf8, const U32 depth);
#   define PERL_ARGS_ASSERT_DUMP_EXEC_POS       \
        assert(locinput); assert(scan); assert(loc_regeol); assert(loc_bostr); \
        assert(loc_reg_starttry)

PERL_CALLCONV int
Perl_re_exec_indentf(pTHX_ const char *fmt, U32 depth, ...)
        __attribute__visibility__("hidden");
#   define PERL_ARGS_ASSERT_RE_EXEC_INDENTF     \
        assert(fmt)

# endif /* defined(DEBUGGING) */
# if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE void
S_capture_clear(pTHX_ regexp *rex, U16 from_ix, U16 to_ix, const char *str comma_pDEPTH);
#   define PERL_ARGS_ASSERT_CAPTURE_CLEAR       \
        assert(rex); assert(str)

PERL_STATIC_INLINE I32
S_foldEQ_latin1_s2_folded(pTHX_ const char *a, const char *b, I32 len);
#   define PERL_ARGS_ASSERT_FOLDEQ_LATIN1_S2_FOLDED \
        assert(a); assert(b)

PERL_STATIC_INLINE void
S_unwind_paren(pTHX_ regexp *rex, U32 lp, U32 lcp comma_pDEPTH);
#   define PERL_ARGS_ASSERT_UNWIND_PAREN        \
        assert(rex)

# endif /* !defined(PERL_NO_INLINE_FUNCTIONS) */
#endif /* defined(PERL_IN_REGEXEC_C) */
#if defined(PERL_IN_REGEX_ENGINE)

# if defined(DEBUGGING)
PERL_CALLCONV void
Perl_debug_peep(pTHX_ const char *str, const RExC_state_t *pRExC_state, regnode *scan, U32 depth, U32 flags)
        __attribute__visibility__("hidden");
#   define PERL_ARGS_ASSERT_DEBUG_PEEP          \
        assert(str); assert(pRExC_state)

PERL_CALLCONV void
Perl_debug_show_study_flags(pTHX_ U32 flags, const char *open_str, const char *close_str)
        __attribute__visibility__("hidden");
#   define PERL_ARGS_ASSERT_DEBUG_SHOW_STUDY_FLAGS \
        assert(open_str); assert(close_str)

PERL_CALLCONV void
Perl_debug_studydata(pTHX_ const char *where, scan_data_t *data, U32 depth, int is_inf, SSize_t min, SSize_t stopmin, SSize_t delta)
        __attribute__visibility__("hidden");
#   define PERL_ARGS_ASSERT_DEBUG_STUDYDATA     \
        assert(where)

PERL_CALLCONV const regnode *
Perl_dumpuntil(pTHX_ const regexp *r, const regnode *start, const regnode *node, const regnode *last, const regnode *plast, SV *sv, I32 indent, U32 depth)
        __attribute__visibility__("hidden");
#   define PERL_ARGS_ASSERT_DUMPUNTIL           \
        assert(r); assert(start); assert(node); assert(sv)

PERL_CALLCONV int
Perl_re_indentf(pTHX_ const char *fmt, U32 depth, ...)
        __attribute__visibility__("hidden");
#   define PERL_ARGS_ASSERT_RE_INDENTF          \
        assert(fmt)

PERL_CALLCONV int
Perl_re_printf(pTHX_ const char *fmt, ...)
        __attribute__visibility__("hidden")
        __attribute__format__(__printf__,pTHX_1,pTHX_2);
#   define PERL_ARGS_ASSERT_RE_PRINTF           \
        assert(fmt)

PERL_CALLCONV void
Perl_regprop(pTHX_ const regexp *prog, SV *sv, const regnode *o, const regmatch_info *reginfo, const RExC_state_t *pRExC_state)
        __attribute__visibility__("hidden");
#   define PERL_ARGS_ASSERT_REGPROP             \
        assert(sv); assert(o)

# endif /* defined(DEBUGGING) */
# if defined(PERL_EXT_RE_BUILD)
PERL_CALLCONV SV *
Perl_get_re_gclass_aux_data(pTHX_ const regexp *prog, const struct regnode *node, bool doinit, SV **listsvp, SV **lonly_utf8_locale, SV **output_invlist)
        __attribute__visibility__("hidden");
#   define PERL_ARGS_ASSERT_GET_RE_GCLASS_AUX_DATA \
        assert(node)

# else
PERL_CALLCONV SV *
Perl_get_regclass_aux_data(pTHX_ const regexp *prog, const struct regnode *node, bool doinit, SV **listsvp, SV **lonly_utf8_locale, SV **output_invlist)
        __attribute__visibility__("hidden");
#   define PERL_ARGS_ASSERT_GET_REGCLASS_AUX_DATA \
        assert(node)

# endif
# if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE bool
Perl_check_regnode_after(pTHX_ const regnode *p, const STRLEN extra)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_CHECK_REGNODE_AFTER

PERL_STATIC_INLINE regnode *
Perl_regnext(pTHX_ const regnode *p)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_REGNEXT

PERL_STATIC_INLINE regnode *
Perl_regnode_after(pTHX_ const regnode *p, bool varies)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_REGNODE_AFTER

# endif /* !defined(PERL_NO_INLINE_FUNCTIONS) */
#endif /* defined(PERL_IN_REGEX_ENGINE) */
#if defined(PERL_IN_SCOPE_C)
STATIC void
S_save_pushptri32ptr(pTHX_ void * const ptr1, const I32 i, void * const ptr2, const int type);
# define PERL_ARGS_ASSERT_SAVE_PUSHPTRI32PTR

STATIC SV *
S_save_scalar_at(pTHX_ SV **sptr, const U32 flags);
# define PERL_ARGS_ASSERT_SAVE_SCALAR_AT        \
        assert(sptr)

#endif /* defined(PERL_IN_SCOPE_C) */
#if defined(PERL_IN_SV_C)
STATIC char *
S_F0convert(NV nv, char * const endbuf, STRLEN * const len);
# define PERL_ARGS_ASSERT_F0CONVERT             \
        assert(endbuf); assert(len)

STATIC void
S_anonymise_cv_maybe(pTHX_ GV *gv, CV *cv);
# define PERL_ARGS_ASSERT_ANONYMISE_CV_MAYBE    \
        assert(gv); assert(cv)

STATIC void
S_assert_uft8_cache_coherent(pTHX_ const char * const func, STRLEN from_cache, STRLEN real, SV * const sv);
# define PERL_ARGS_ASSERT_ASSERT_UFT8_CACHE_COHERENT \
        assert(func); assert(sv)

STATIC bool
S_curse(pTHX_ SV * const sv, const bool check_refcnt);
# define PERL_ARGS_ASSERT_CURSE                 \
        assert(sv)

STATIC STRLEN
S_expect_number(pTHX_ const char ** const pattern)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_EXPECT_NUMBER         \
        assert(pattern)

STATIC SSize_t
S_find_array_subscript(pTHX_ const AV * const av, const SV * const val);
# define PERL_ARGS_ASSERT_FIND_ARRAY_SUBSCRIPT  \
        assert(val)

STATIC SV *
S_find_hash_subscript(pTHX_ const HV * const hv, const SV * const val);
# define PERL_ARGS_ASSERT_FIND_HASH_SUBSCRIPT   \
        assert(val)

STATIC SV *
S_find_uninit_var(pTHX_ const OP * const obase, const SV * const uninit_sv, bool match, const char **desc_p);
# define PERL_ARGS_ASSERT_FIND_UNINIT_VAR       \
        assert(desc_p)

STATIC bool
S_glob_2number(pTHX_ GV * const gv);
# define PERL_ARGS_ASSERT_GLOB_2NUMBER          \
        assert(gv)

STATIC void
S_glob_assign_glob(pTHX_ SV * const dsv, SV * const ssv, const int dtype);
# define PERL_ARGS_ASSERT_GLOB_ASSIGN_GLOB      \
        assert(dsv); assert(ssv)

PERL_CALLCONV SV *
Perl_more_sv(pTHX);
# define PERL_ARGS_ASSERT_MORE_SV

STATIC void
S_not_a_number(pTHX_ SV * const sv);
# define PERL_ARGS_ASSERT_NOT_A_NUMBER          \
        assert(sv)

STATIC void
S_not_incrementable(pTHX_ SV * const sv);
# define PERL_ARGS_ASSERT_NOT_INCREMENTABLE     \
        assert(sv)

STATIC PTR_TBL_ENT_t *
S_ptr_table_find(PTR_TBL_t * const tbl, const void * const sv)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_PTR_TABLE_FIND        \
        assert(tbl)

STATIC bool
S_sv_2iuv_common(pTHX_ SV * const sv);
# define PERL_ARGS_ASSERT_SV_2IUV_COMMON        \
        assert(sv)

STATIC void
S_sv_add_arena(pTHX_ char * const ptr, const U32 size, const U32 flags);
# define PERL_ARGS_ASSERT_SV_ADD_ARENA          \
        assert(ptr)

STATIC const char *
S_sv_display(pTHX_ SV * const sv, char *tmpbuf, STRLEN tmpbuf_size);
# define PERL_ARGS_ASSERT_SV_DISPLAY            \
        assert(sv); assert(tmpbuf)

STATIC STRLEN
S_sv_pos_b2u_midway(pTHX_ const U8 * const s, const U8 * const target, const U8 *end, STRLEN endu);
# define PERL_ARGS_ASSERT_SV_POS_B2U_MIDWAY     \
        assert(s); assert(target); assert(end)

STATIC STRLEN
S_sv_pos_u2b_cached(pTHX_ SV * const sv, MAGIC ** const mgp, const U8 * const start, const U8 * const send, STRLEN uoffset, STRLEN uoffset0, STRLEN boffset0);
# define PERL_ARGS_ASSERT_SV_POS_U2B_CACHED     \
        assert(sv); assert(mgp); assert(start); assert(send)

STATIC STRLEN
S_sv_pos_u2b_forwards(const U8 * const start, const U8 * const send, STRLEN * const uoffset, bool * const at_end, bool *canonical_position);
# define PERL_ARGS_ASSERT_SV_POS_U2B_FORWARDS   \
        assert(start); assert(send); assert(uoffset); assert(at_end); assert(canonical_position)

STATIC STRLEN
S_sv_pos_u2b_midway(const U8 * const start, const U8 *send, STRLEN uoffset, const STRLEN uend);
# define PERL_ARGS_ASSERT_SV_POS_U2B_MIDWAY     \
        assert(start); assert(send)

STATIC void
S_utf8_mg_len_cache_update(pTHX_ SV * const sv, MAGIC ** const mgp, const STRLEN ulen);
# define PERL_ARGS_ASSERT_UTF8_MG_LEN_CACHE_UPDATE \
        assert(sv); assert(mgp)

STATIC void
S_utf8_mg_pos_cache_update(pTHX_ SV * const sv, MAGIC ** const mgp, const STRLEN byte, const STRLEN utf8, const STRLEN blen);
# define PERL_ARGS_ASSERT_UTF8_MG_POS_CACHE_UPDATE \
        assert(sv); assert(mgp)

STATIC SSize_t
S_visit(pTHX_ SVFUNC_t f, const U32 flags, const U32 mask);
# define PERL_ARGS_ASSERT_VISIT                 \
        assert(f)

# if defined(DEBUGGING)
STATIC void
S_del_sv(pTHX_ SV *p);
#   define PERL_ARGS_ASSERT_DEL_SV              \
        assert(p)

PERL_CALLCONV void
Perl_sv_mark_arenas(pTHX)
        __attribute__visibility__("hidden");
#   define PERL_ARGS_ASSERT_SV_MARK_ARENAS

PERL_CALLCONV void
Perl_sv_sweep_arenas(pTHX)
        __attribute__visibility__("hidden");
#   define PERL_ARGS_ASSERT_SV_SWEEP_ARENAS

# endif /* defined(DEBUGGING) */
# if !defined(NV_PRESERVES_UV)
#   if defined(DEBUGGING)
STATIC int
S_sv_2iuv_non_preserve(pTHX_ SV * const sv, I32 numtype);
#     define PERL_ARGS_ASSERT_SV_2IUV_NON_PRESERVE \
        assert(sv)

#   else
STATIC int
S_sv_2iuv_non_preserve(pTHX_ SV * const sv);
#     define PERL_ARGS_ASSERT_SV_2IUV_NON_PRESERVE \
        assert(sv)

#   endif
# endif /* !defined(NV_PRESERVES_UV) */
# if defined(PERL_DEBUG_READONLY_COW)
STATIC void
S_sv_buf_to_rw(pTHX_ SV *sv);
#   define PERL_ARGS_ASSERT_SV_BUF_TO_RW        \
        assert(sv)

# endif
# if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE void
S_sv_unglob(pTHX_ SV * const sv, U32 flags);
#   define PERL_ARGS_ASSERT_SV_UNGLOB           \
        assert(sv)

PERL_STATIC_INLINE char *
S_uiv_2buf(char * const buf, const IV iv, UV uv, const int is_uv, char ** const peob)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_UIV_2BUF            \
        assert(buf); assert(peob)

# endif /* !defined(PERL_NO_INLINE_FUNCTIONS) */
# if defined(USE_ITHREADS)
STATIC SV *
S_sv_dup_common(pTHX_ const SV * const ssv, CLONE_PARAMS * const param)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_SV_DUP_COMMON       \
        assert(ssv); assert(param)

STATIC void
S_sv_dup_hvaux(pTHX_ const SV * const ssv, SV *dsv, CLONE_PARAMS * const param);
#   define PERL_ARGS_ASSERT_SV_DUP_HVAUX        \
        assert(ssv); assert(dsv); assert(param)

STATIC SV **
S_sv_dup_inc_multiple(pTHX_ SV * const *source, SV **dest, SSize_t items, CLONE_PARAMS * const param);
#   define PERL_ARGS_ASSERT_SV_DUP_INC_MULTIPLE \
        assert(source); assert(dest); assert(param)

STATIC void
S_unreferenced_to_tmp_stack(pTHX_ AV * const unreferenced);
#   define PERL_ARGS_ASSERT_UNREFERENCED_TO_TMP_STACK \
        assert(unreferenced)

# endif /* defined(USE_ITHREADS) */
#endif /* defined(PERL_IN_SV_C) */
#if defined(PERL_IN_TOKE_C)
STATIC int
S_ao(pTHX_ int toketype);
# define PERL_ARGS_ASSERT_AO

STATIC void
S_check_uni(pTHX);
# define PERL_ARGS_ASSERT_CHECK_UNI

STATIC void
S_checkcomma(pTHX_ const char *s, const char *name, const char *what);
# define PERL_ARGS_ASSERT_CHECKCOMMA            \
        assert(s); assert(name); assert(what)

STATIC char *
S_filter_gets(pTHX_ SV *sv, STRLEN append)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_FILTER_GETS           \
        assert(sv)

STATIC HV *
S_find_in_my_stash(pTHX_ const char *pkgname, STRLEN len)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_FIND_IN_MY_STASH      \
        assert(pkgname)

STATIC void
S_force_ident(pTHX_ const char *s, int kind);
# define PERL_ARGS_ASSERT_FORCE_IDENT           \
        assert(s)

STATIC void
S_force_ident_maybe_lex(pTHX_ char pit);
# define PERL_ARGS_ASSERT_FORCE_IDENT_MAYBE_LEX

STATIC void
S_force_next(pTHX_ I32 type);
# define PERL_ARGS_ASSERT_FORCE_NEXT

STATIC char *
S_force_strict_version(pTHX_ char *s);
# define PERL_ARGS_ASSERT_FORCE_STRICT_VERSION  \
        assert(s)

STATIC char *
S_force_version(pTHX_ char *s, int guessing);
# define PERL_ARGS_ASSERT_FORCE_VERSION         \
        assert(s)

STATIC char *
S_force_word(pTHX_ char *start, int token, int check_keyword, int allow_pack);
# define PERL_ARGS_ASSERT_FORCE_WORD            \
        assert(start)

STATIC SV *
S_get_and_check_backslash_N_name_wrapper(pTHX_ const char *s, const char * const e)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_GET_AND_CHECK_BACKSLASH_N_NAME_WRAPPER \
        assert(s); assert(e)

STATIC void
S_incline(pTHX_ const char *s, const char *end);
# define PERL_ARGS_ASSERT_INCLINE               \
        assert(s); assert(end)

STATIC int
S_intuit_method(pTHX_ char *s, SV *ioname, CV *cv);
# define PERL_ARGS_ASSERT_INTUIT_METHOD         \
        assert(s)

STATIC int
S_intuit_more(pTHX_ char *s, char *e);
# define PERL_ARGS_ASSERT_INTUIT_MORE           \
        assert(s); assert(e)

STATIC I32
S_lop(pTHX_ I32 f, U8 x, char *s);
# define PERL_ARGS_ASSERT_LOP                   \
        assert(s)

PERL_STATIC_NO_RET void
S_missingterm(pTHX_ char *s, STRLEN len)
        __attribute__noreturn__;
# define PERL_ARGS_ASSERT_MISSINGTERM

STATIC SV *
S_new_constant(pTHX_ const char *s, STRLEN len, const char *key, STRLEN keylen, SV *sv, SV *pv, const char *type, STRLEN typelen, const char **error_msg);
# define PERL_ARGS_ASSERT_NEW_CONSTANT          \
        assert(key); assert(sv)

STATIC void
S_no_op(pTHX_ const char * const what, char *s);
# define PERL_ARGS_ASSERT_NO_OP                 \
        assert(what)

STATIC void
S_parse_ident(pTHX_ char **s, char **d, char * const e, int allow_package, bool is_utf8, bool check_dollar, bool tick_warn);
# define PERL_ARGS_ASSERT_PARSE_IDENT           \
        assert(s); assert(d); assert(e)

STATIC int
S_pending_ident(pTHX);
# define PERL_ARGS_ASSERT_PENDING_IDENT

STATIC char *
S_scan_const(pTHX_ char *start)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SCAN_CONST            \
        assert(start)

STATIC char *
S_scan_formline(pTHX_ char *s)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SCAN_FORMLINE         \
        assert(s)

STATIC char *
S_scan_heredoc(pTHX_ char *s)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SCAN_HEREDOC          \
        assert(s)

STATIC char *
S_scan_ident(pTHX_ char *s, char *dest, STRLEN destlen, I32 ck_uni);
# define PERL_ARGS_ASSERT_SCAN_IDENT            \
        assert(s); assert(dest)

STATIC char *
S_scan_inputsymbol(pTHX_ char *start)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SCAN_INPUTSYMBOL      \
        assert(start)

STATIC char *
S_scan_pat(pTHX_ char *start, I32 type)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SCAN_PAT              \
        assert(start)

STATIC char *
S_scan_subst(pTHX_ char *start)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SCAN_SUBST            \
        assert(start)

STATIC char *
S_scan_trans(pTHX_ char *start)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SCAN_TRANS            \
        assert(start)

STATIC I32
S_sublex_done(pTHX)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SUBLEX_DONE

STATIC I32
S_sublex_push(pTHX)
        __attribute__warn_unused_result__;
