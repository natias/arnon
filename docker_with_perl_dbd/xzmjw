	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA791,
	0xA792,
	0xA793,
	0xA795,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7B9,
	0xA7BA,
	0xA7BB,
	0xA7BC,
	0xA7BD,
	0xA7BE,
	0xA7BF,
	0xA7C0,
	0xA7C1,
	0xA7C2,
	0xA7C3,
	0xA7C4,
	0xA7C8,
	0xA7C9,
	0xA7CA,
	0xA7CB,
	0xA7D1,
	0xA7D2,
	0xA7D7,
	0xA7D8,
	0xA7D9,
	0xA7DA,
	0xA7F6,
	0xA7F7,
	0xAB53,
	0xAB54,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10597,
	0x105A2,
	0x105A3,
	0x105B2,
	0x105B3,
	0x105BA,
	0x105BB,
	0x105BD,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x16E60,
	0x16E80,
	0x1E922,
	0x1E944
};

#  endif	/* EBCDIC 037 */

static const UV UNI_CYPRIOTSYLLABARY_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10800,
	0x10840
};

static const UV UNI_CYRILLICEXTA_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2DE0,
	0x2E00
};

static const UV UNI_CYRILLICEXTB_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA640,
	0xA6A0
};

static const UV UNI_CYRILLICEXTC_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1C80,
	0x1C90
};

static const UV UNI_CYRILLICEXTD_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1E030,
	0x1E090
};

static const UV UNI_CYRILLICSUP_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x500,
	0x530
};

static const UV UNI_CYRL_invlist[] = {  /* for all charsets */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x400,
	0x530,
	0x1C80,
	0x1C89,
	0x1D2B,
	0x1D2C,
	0x1D78,
	0x1D79,
	0x1DF8,
	0x1DF9,
	0x2DE0,
	0x2E00,
	0x2E43,
	0x2E44,
	0xA640,
	0xA6A0,
	0xFE2E,
	0xFE30,
	0x1E030,
	0x1E06E,
	0x1E08F,
	0x1E090
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_DASH_invlist[] = {  /* for ASCII/Latin1 */
	47,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D,
	0x2E,
	0x58A,
	0x58B,
	0x5BE,
	0x5BF,
	0x1400,
	0x1401,
	0x1806,
	0x1807,
	0x2010,
	0x2016,
	0x2053,
	0x2054,
	0x207B,
	0x207C,
	0x208B,
	0x208C,
	0x2212,
	0x2213,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x2E5D,
	0x2E5E,
	0x301C,
	0x301D,
	0x3030,
	0x3031,
	0x30A0,
	0x30A1,
	0xFE31,
	0xFE33,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E,
	0x10EAD,
	0x10EAE
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_DASH_invlist[] = {  /* for EBCDIC 1047 */
	47,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0x58A,
	0x58B,
	0x5BE,
	0x5BF,
	0x1400,
	0x1401,
	0x1806,
	0x1807,
	0x2010,
	0x2016,
	0x2053,
	0x2054,
	0x207B,
	0x207C,
	0x208B,
	0x208C,
	0x2212,
	0x2213,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x2E5D,
	0x2E5E,
	0x301C,
	0x301D,
	0x3030,
	0x3031,
	0x30A0,
	0x30A1,
	0xFE31,
	0xFE33,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E,
	0x10EAD,
	0x10EAE
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_DASH_invlist[] = {  /* for EBCDIC 037 */
	47,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0x58A,
	0x58B,
	0x5BE,
	0x5BF,
	0x1400,
	0x1401,
	0x1806,
	0x1807,
	0x2010,
	0x2016,
	0x2053,
	0x2054,
	0x207B,
	0x207C,
	0x208B,
	0x208C,
	0x2212,
	0x2213,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x2E5D,
	0x2E5E,
	0x301C,
	0x301D,
	0x3030,
	0x3031,
	0x30A0,
	0x30A1,
	0xFE31,
	0xFE33,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E,
	0x10EAD,
	0x10EAE
};

#  endif	/* EBCDIC 037 */

static const UV UNI_DEP_invlist[] = {  /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x149,
	0x14A,
	0x673,
	0x674,
	0xF77,
	0xF78,
	0xF79,
	0xF7A,
	0x17A3,
	0x17A5,
	0x206A,
	0x2070,
	0x2329,
	0x232B,
	0xE0001,
	0xE0002
};

static const UV UNI_DEVA_invlist[] = {  /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x900,
	0x953,
	0x955,
	0x980,
	0x1CD0,
	0x1CF7,
	0x1CF8,
	0x1CFA,
	0x20F0,
	0x20F1,
	0xA830,
	0xA83A,
	0xA8E0,
	0xA900,
	0x11B00,
	0x11B0A
};

static const UV UNI_DEVANAGARIEXT_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA8E0,
	0xA900
};

static const UV UNI_DEVANAGARIEXTA_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11B00,
	0x11B60
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_DI_invlist[] = {  /* for ASCII/Latin1 */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAD,
	0xAE,
	0x34F,
	0x350,
	0x61C,
	0x61D,
	0x115F,
	0x1161,
	0x17B4,
	0x17B6,
	0x180B,
	0x1810,
	0x200B,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2070,
	0x3164,
	0x3165,
	0xFE00,
	0xFE10,
	0xFEFF,
	0xFF00,
	0xFFA0,
	0xFFA1,
	0xFFF0,
	0xFFF9,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0000,
	0xE1000
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_DI_invlist[] = {  /* for EBCDIC 1047 */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x34F,
	0x350,
	0x61C,
	0x61D,
	0x115F,
	0x1161,
	0x17B4,
	0x17B6,
	0x180B,
	0x1810,
	0x200B,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2070,
	0x3164,
	0x3165,
	0xFE00,
	0xFE10,
	0xFEFF,
	0xFF00,
	0xFFA0,
	0xFFA1,
	0xFFF0,
	0xFFF9,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0000,
	0xE1000
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_DI_invlist[] = {  /* for EBCDIC 037 */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x34F,
	0x350,
	0x61C,
	0x61D,
	0x115F,
	0x1161,
	0x17B4,
	0x17B6,
	0x180B,
	0x1810,
	0x200B,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2070,
	0x3164,
	0x3165,
	0xFE00,
	0xFE10,
	0xFEFF,
	0xFF00,
	0xFFA0,
	0xFFA1,
	0xFFF0,
	0xFFF9,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0000,
	0xE1000
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_DIA_invlist[] = {  /* for ASCII/Latin1 */
	391,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5E,
	0x5F,
	0x60,
	0x61,
	0xA8,
	0xA9,
	0xAF,
	0xB0,
	0xB4,
	0xB5,
	0xB7,
	0xB9,
	0x2B0,
	0x34F,
	0x350,
	0x358,
	0x35D,
	0x363,
	0x374,
	0x376,
	0x37A,
	0x37B,
	0x384,
	0x386,
	0x483,
	0x488,
	0x559,
	0x55A,
	0x591,
	0x5A2,
	0x5A3,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C5,
	0x64B,
	0x653,
	0x657,
	0x659,
	0x6DF,
	0x6E1,
	0x6E5,
	0x6E7,
	0x6EA,
	0x6ED,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F6,
	0x818,
	0x81A,
	0x898,
	0x8A0,
	0x8C9,
	0x8D3,
	0x8E3,
	0x8FF,
	0x93C,
	0x93D,
	0x94D,
	0x94E,
	0x951,
	0x955,
	0x971,
	0x972,
	0x9BC,
	0x9BD,
	0x9CD,
	0x9CE,
	0xA3C,
	0xA3D,
	0xA4D,
	0xA4E,
	0xABC,
	0xABD,
	0xACD,
	0xACE,
	0xAFD,
	0xB00,
	0xB3C,
	0xB3D,
	0xB4D,
	0xB4E,
	0xB55,
	0xB56,
	0xBCD,
	0xBCE,
	0xC3C,
	0xC3D,
	0xC4D,
	0xC4E,
	0xCBC,
	0xCBD,
	0xCCD,
	0xCCE,
	0xD3B,
	0xD3D,
	0xD4D,
	0xD4E,
	0xDCA,
	0xDCB,
	0xE47,
	0xE4D,
	0xE4E,
	0xE4F,
	0xEBA,
	0xEBB,
	0xEC8,
	0xECD,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF82,
	0xF85,
	0xF86,
	0xF88,
	0xFC6,
	0xFC7,
	0x1037,
	0x1038,
	0x1039,
	0x103B,
	0x1063,
	0x1065,
	0x1069,
	0x106E,
	0x1087,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109C,
	0x135D,
	0x1360,
	0x1714,
	0x1716,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x1939,
	0x193C,
	0x1A75,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ABF,
	0x1AC1,
	0x1ACC,
	0x1B34,
	0x1B35,
	0x1B44,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1BAA,
	0x1BAC,
	0x1C36,
	0x1C38,
	0x1C78,
	0x1C7E,
	0x1CD0,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1D2C,
	0x1D6B,
	0x1DC4,
	0x1DD0,
	0x1DF5,
	0x1E00,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x2CEF,
	0x2CF2,
	0x2E2F,
	0x2E30,
	0x302A,
	0x3030,
	0x3099,
	0x309D,
	0x30FC,
	0x30FD,
	0xA66F,
	0xA670,
	0xA67C,
	0xA67E,
	0xA67F,
	0xA680,
	0xA69C,
	0xA69E,
	0xA6F0,
	0xA6F2,
	0xA700,
	0xA722,
	0xA788,
	0xA78B,
	0xA7F8,
	0xA7FA,
	0xA8C4,
	0xA8C5,
	0xA8E0,
	0xA8F2,
	0xA92B,
	0xA92F,
	0xA953,
	0xA954,
	0xA9B3,
	0xA9B4,
	0xA9C0,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC3,
	0xAAF6,
	0xAAF7,
	0xAB5B,
	0xAB60,
	0xAB69,
	0xAB6C,
	0xABEC,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE20,
	0xFE30,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0xFFE3,
	0xFFE4,
	0x102E0,
	0x102E1,
	0x10780,
	0x10786,
	0x10787,
	0x107B1,
	0x107B2,
	0x107BB,
	0x10AE5,
	0x10AE7,
	0x10D22,
	0x10D28,
	0x10EFD,
	0x10F00,
	0x10F46,
	0x10F51,
	0x10F82,
	0x10F86,
	0x11046,
	0x11047,
	0x11070,
	0x11071,
	0x110B9,
	0x110BB,
	0x11133,
	0x11135,
	0x11173,
	0x11174,
	0x111C0,
	0x111C1,
	0x111CA,
	0x111CD,
	0x11235,
	0x11237,
	0x112E9,
	0x112EB,
	0x1133C,
	0x1133D,
	0x1134D,
	0x1134E,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11442,
	0x11443,
	0x11446,
	0x11447,
	0x114C2,
	0x114C4,
	0x115BF,
	0x115C1,
	0x1163F,
	0x11640,
	0x116B6,
	0x116B8,
	0x1172B,
	0x1172C,
	0x11839,
	0x1183B,
	0x1193D,
	0x1193F,
	0x11943,
	0x11944,
	0x119E0,
	0x119E1,
	0x11A34,
	0x11A35,
	0x11A47,
	0x11A48,
	0x11A99,
	0x11A9A,
	0x11C3F,
	0x11C40,
	0x11D42,
	0x11D43,
	0x11D44,
	0x11D46,
	0x11D97,
	0x11D98,
	0x13447,
	0x13456,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F8F,
	0x16FA0,
	0x16FF0,
	0x16FF2,
	0x1AFF0,
	0x1AFF4,
	0x1AFF5,
	0x1AFFC,
	0x1AFFD,
	0x1AFFF,
	0x1CF00,
	0x1CF2E,
	0x1CF30,
	0x1CF47,
	0x1D167,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
