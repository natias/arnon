
   CREATE OR REPLACE TYPE Person AS OBJECT (
     name    VARCHAR2(20),
     age     INTEGER)
   ) NOT FINAL;

   CREATE TYPE Employee UNDER Person (
     salary  NUMERIC(8,2)
   );

   CREATE TABLE people (id INTEGER, obj Person);

   INSERT INTO people VALUES (1, Person('Black', 25));
   INSERT INTO people VALUES (2, Employee('Smith', 44, 5000));

The following code will access the data;

   $dbh{'ora_objects'} =>1;

   $sth = $dbh->prepare("select * from people order by id");
   $sth->execute();

   # object are fetched as instance of DBD::Oracle::Object
   my ($id1, $obj1) = $sth->fetchrow();
   my ($id2, $obj2) = $sth->fetchrow();

   # get full type-name of object
   print $obj1->type_name."44\n";     # 'TEST.PERSON' is printed
   print $obj2->type_name."4\n";      # 'TEST.EMPLOYEE' is printed

   # get attribute NAME from object
   print $obj1->attr('NAME')."3\n";   # 'Black' is printed
   print $obj2->attr('NAME')."3\n";   # 'Smith' is printed

   # get all attributes as hash reference
   my $h1 = $obj1->attr;        # returns {'NAME' => 'Black', 'AGE' => 25}
   my $h2 = $obj2->attr;        # returns {'NAME' => 'Smith', 'AGE' => 44,
                                #          'SALARY' => 5000 }

   # get all attributes (names and values) as array
   my @a1 = $obj1->attributes;  # returns ('NAME', 'Black', 'AGE', 25)
   my @a2 = $obj2->attributes;  # returns ('NAME', 'Smith', 'AGE', 44,
                                #          'SALARY', 5000 )

So far DBD::Oracle has been tested on a table with 20 embedded Objects, Varrays and Tables
nested to 10 levels.

Any NULL values found in the embedded object will be returned as 'undef'.

=head1 OTHER DATA TYPES

DBD::Oracle does not I<explicitly> support most Oracle datatypes.
It simply asks Oracle to return them as strings and Oracle does so.
Mostly.  Similarly when binding placeholder values DBD::Oracle binds
them as strings and Oracle converts them to the appropriate type,
such as DATE, when used.

Some of these automatic conversions to and from strings use NLS
settings to control the formatting for output and the parsing for
input. The most common example is the DATE type. The default NLS
format for DATE might be DD-MON-YYYY and so when a DATE type is
fetched that's how Oracle will format the date. NLS settings also
control the default parsing of strings into DATE values. An error
will be generated if the contents of the string don't match the
NLS format. If you're dealing in dates which don't match the default
NLS format then you can either change the default NLS format or, more
commonly, use TO_CHAR(field, "format") and TO_DATE(?, "format")
to explicitly specify formats for converting to and from strings.

A slightly more subtle problem can occur with NUMBER types. The
default NLS settings might format numbers with a fullstop ("C<.>")
to separate thousands and a comma ("C<,>") as the decimal point.
Perl will generate warnings and use incorrect values when numbers,
returned and formatted as strings in this way by Oracle, are used
in a numeric context.  You could explicitly convert each numeric
value using the TO_CHAR(...) function but that gets tedious very
quickly. The best fix is to change the NLS settings. That can be
done for an individual connection by doing:

  $dbh->do("ALTER SESSION SET NLS_NUMERIC_CHARACTERS = '.,'");

There are some types, like BOOLEAN, that Oracle does not automatically
convert to or from strings (pity).  These need to be converted
explicitly using SQL or PL/SQL functions.

Examples:

  # DATE values
  my $sth0 = $dbh->prepare( <<SQL_END );
  SELECT username, TO_CHAR( created, ? )
      FROM all_users
      WHERE created >= TO_DATE( ?, ? )
   SQL_END
  $sth0->execute( 'YYYY-MM-DD HH24:MI:SS', "2003", 'YYYY' );

  # BOOLEAN values
  my $sth2 = $dbh->prepare( <<PLSQL_END );
  DECLARE
      b0 BOOLEAN;
      b1 BOOLEAN;
      o0 VARCHAR2(32);
      o1 VARCHAR2(32);

      FUNCTION to_bool( i VARCHAR2 ) RETURN BOOLEAN IS
      BEGIN
         IF    i IS NULL          THEN RETURN NULL;
         ELSIF i = 'F' OR i = '0' THEN RETURN FALSE;
         ELSE                          RETURN TRUE;
         END IF;
      END;
      FUNCTION from_bool( i BOOLEAN ) RETURN NUMBER IS
      BEGIN
         IF    i IS NULL THEN RETURN NULL;
         ELSIF i         THEN RETURN 1;
         ELSE                 RETURN 0;
         END IF;
      END;
  BEGIN
      -- Converting values to BOOLEAN
      b0 := to_bool( :i0 );
      b1 := to_bool( :i1 );

      -- Converting values from BOOLEAN
      :o0 := from_bool( b0 );
      :o1 := from_bool( b1 );
  END;
  PLSQL_END
  my ( $i0, $i1, $o0, $o1 ) = ( "", "Something else" );
  $sth2->bind_param( ":i0", $i0 );
  $sth2->bind_param( ":i1", $i1 );
  $sth2->bind_param_inout( ":o0", \$o0, 32 );
  $sth2->bind_param_inout( ":o1", \$o1, 32 );
  $sth2->execute();
  foreach ( $i0, $b0, $o0, $i1, $b1, $o1 ) {
      $_ = "(undef)" if ! defined $_;
  }
  print "$i0 to $o0, $i1 to $o1\n";
  # Result is : "'' to '(undef)', 'Something else' to '1'"

=head2 Support for Insert of XMLType (ORA_XMLTYPE)

Inserting large XML data sets into tables with XMLType fields is now supported by DBD::Oracle. The only special
requirement is the use of bind_param() with an attribute hash parameter that specifies ora_type as ORA_XMLTYPE. For
example with a table like this;

   create table books (book_id number, book_xml XMLType);

one can insert data using this code

   $SQL='insert into books values (1,:p_xml)';
   $xml= '<Books>
                 <Book id=1>
                        <Title>Programming the Perl DBI</Title>
                        <Subtitle>The Cheetah Book</Subtitle>
                        <Authors>
                               <Author>T. Bunce</Author>
                               <Author>Alligator Descartes</Author>
                        </Authors>

                </Book>
                <Book id=10000>...
            </Books>';
   my $sth =$dbh-> prepare($SQL);
   $sth-> bind_param("p_xml", $xml, { ora_type => ORA_XMLTYPE });
   $sth-> execute();

In the above case we will assume that $xml has 10000 Book nodes and is over 32k in size and is well formed XML.
This will also work for XML that is smaller than 32k as well. Attempting to insert malformed XML will cause an error.

=head2 Binding Cursors

Cursors can be returned from PL/SQL blocks, either from stored
functions (or procedures with OUT parameters) or
from direct C<OPEN> statements, as shown below:

  use DBI;
  use DBD::Oracle qw(:ora_types);
  my $dbh = DBI->connect(...);
  my $sth1 = $dbh->prepare(q{
      BEGIN OPEN :cursor FOR
          SELECT table_name, tablespace_name
          FROM user_tables WHERE tablespace_name = :space;
      END;
  });
  $sth1->bind_param(":space", "USERS");
  my $sth2;
  $sth1->bind_param_inout(":cursor", \$sth2, 0, { ora_type => ORA_RSET } );
  $sth1->execute;
  # $sth2 is now a valid DBI statement handle for the cursor
  while ( my @row = $sth2->fetchrow_array ) { ... }

The only special requirement is the use of C<bind_param_inout()> with an
attribute hash parameter that specifies C<ora_type> as C<ORA_RSET>.
If you don't do that you'll get an error from the C<execute()> like:
"ORA-06550: line X, column Y: PLS-00306: wrong number or types of
arguments in call to ...".

Here's an alternative form using a function that returns a cursor.
This example uses the pre-defined weak (or generic) REF CURSOR type
SYS_REFCURSOR. This is an Oracle 9 feature.

  # Create the function that returns a cursor
  $dbh->do(q{
      CREATE OR REPLACE FUNCTION sp_ListEmp RETURN SYS_REFCURSOR
      AS l_cursor SYS_REFCURSOR;
      BEGIN
          OPEN l_cursor FOR select ename, empno from emp
              ORDER BY ename;
          RETURN l_cursor;
      END;
  });

  # Use the function that returns a cursor
  my $sth1 = $dbh->prepare(q{BEGIN :cursor := sp_ListEmp; END;});
  my $sth2;
  $sth1->bind_param_inout(":cursor", \$sth2, 0, { ora_type => ORA_RSET } );
  $sth1->execute;
  # $sth2 is now a valid DBI statement handle for the cursor
  while ( my @row = $sth2->fetchrow_array ) { ... }

A cursor obtained from PL/SQL as above may be passed back to PL/SQL
by binding for input, as shown in this example, which explicitly
closes a cursor:

  my $sth3 = $dbh->prepare("BEGIN CLOSE :cursor; END;");
  $sth3->bind_param(":cursor", $sth2, { ora_type => ORA_RSET } );
  $sth3->execute;

It is not normally necessary to close a cursor explicitly in this
way. Oracle will close the cursor automatically at the first
client-server interaction after the cursor statement handle is
destroyed. An explicit close may be desirable if the reference to the
cursor handle from the PL/SQL statement handle delays the destruction
of the cursor handle for too long. This reference remains until the
PL/SQL handle is re-bound, re-executed or destroyed.

NOTE: From DBD::Oracle 1.57 functions or procedures returning
SYS_REFCURSORs which have not been opened (are still in the
initialised state) will return undef for the cursor statement handle
e.g., in the example above if the sp_ListEmp function simply returned l_cursor
instead of opening it. This means you can have a function/procedure
which can elect to open the cursor or not, Before this change if you called
a function/procedure which returned a SYS_REFCURSOR which was not opened
DBD::Oracle would error in the execute for a OCIAttrGet on the uninitialised
cursor.

See the C<curref.pl> script in the Oracle.ex directory in the DBD::Oracle
source distribution for a complete working example.

=head2 Fetching Nested Cursors

Oracle supports the use of select list expressions of type REF CURSOR.
These may be explicit cursor expressions - C<CURSOR(SELECT ...)>, or
calls to PL/SQL functions which return REF CURSOR values. The values
of these expressions are known as nested cursors.

The value returned to a Perl program when a nested cursor is fetched
is a statement handle. This statement handle is ready to be fetched from.
It should not (indeed, must not) be executed.

Oracle imposes a restriction on the order of fetching when nested
cursors are used. Suppose C<$sth1> is a handle for a select statement
involving nested cursors, and C<$sth2> is a nested cursor handle fetched
from C<$sth1>. C<$sth2> can only be fetched from while C<$sth1> is
still active, and the row containing C<$sth2> is still current in C<$sth1>.
Any attempt to fetch another row from C<$sth1> renders all nested cursor
handles previously fetched from C<$sth1> defunct.

Fetching from such a defunct handle results in an error with the message
C<ERROR nested cursor is defunct (parent row is no longer current)>.

This means that the C<fetchall...> or C<selectall...> methods are not useful
for queries returning nested cursors. By the time such a method returns,
all the nested cursor handles it has fetched will be defunct.

It is necessary to use an explicit fetch loop, and to do all the
fetching of nested cursors within the loop, as the following example
shows:

    use DBI;
    my $dbh = DBI->connect(...);
    my $sth = $dbh->prepare(q{
        SELECT dname, CURSOR(
            SELECT ename FROM emp
                WHERE emp.deptno = dept.deptno
                ORDER BY ename
        ) FROM dept ORDER BY dname
    });
    $sth->execute;
    while ( my ($dname, $nested) = $sth->fetchrow_array ) {
        print "$dname\n";
        while ( my ($ename) = $nested->fetchrow_array ) {
            print "        $ename\n";
        }
    }

The cursor returned by the function C<sp_ListEmp> defined in the
previous section can be fetched as a nested cursor as follows:

    my $sth = $dbh->prepare(q{SELECT sp_ListEmp FROM dual});
    $sth->execute;
    my ($nested) = $sth->fetchrow_array;
    while ( my @row = $nested->fetchrow_array ) { ... }

=head2 Pre-fetching Nested Cursors

By default, DBD::Oracle pre-fetches rows in order to reduce the number of
round trips to the server. For queries which do not involve nested cursors,
the number of pre-fetched rows is controlled by the DBI database handle
attribute C<RowCacheSize> (q.v.).

In Oracle, server side open cursors are a controlled resource, limited in
number, on a per session basis, to the value of the initialization
parameter C<OPEN_CURSORS>. Nested cursors count towards this limit.
Each nested cursor in the current row counts 1, as does
each nested cursor in a pre-fetched row. Defunct nested cursors do not count.

An Oracle specific database handle attribute, C<ora_max_nested_cursors>,
further controls pre-fetching for queries involving nested cursors. For
each statement handle, the total number of nested cursors in pre-fetched
rows is limited to the value of this parameter. The default value
is 0, which disables pre-fetching for queries involving nested cursors.

=head1 PL/SQL Examples

Most of these PL/SQL examples come from: Eric Bartley <bartley@cc.purdue.edu>.

   /*
    * PL/SQL to create package with stored procedures invoked by
    * Perl examples.  Execute using sqlplus.
    *
    * Use of "... OR REPLACE" prevents failure in the event that the
    * package already exists.
    */

    CREATE OR REPLACE PACKAGE plsql_example
    IS
      PROCEDURE proc_np;

      PROCEDURE proc_in (
          err_code IN NUMBER
      );

      PROCEDURE proc_in_inout (
          test_num IN NUMBER,
          is_odd IN OUT NUMBER
      );

      FUNCTION func_np
        RETURN VARCHAR2;

    END plsql_example;
  /

    CREATE OR REPLACE PACKAGE BODY plsql_example
    IS
      PROCEDURE proc_np
      IS
        whoami VARCHAR2(20) := NULL;
      BEGIN
        SELECT USER INTO whoami FROM DUAL;
      END;

      PROCEDURE proc_in (
        err_code IN NUMBER
      )
      IS
      BEGIN
        RAISE_APPLICATION_ERROR(err_code, 'This is a test.');
      END;

      PROCEDURE proc_in_inout (
        test_num IN NUMBER,
        is_odd IN OUT NUMBER
      )
      IS
      BEGIN
        is_odd := MOD(test_num, 2);
      END;

      FUNCTION func_np
        RETURN VARCHAR2
      IS
        ret_val VARCHAR2(20);
      BEGIN
        SELECT USER INTO ret_val FROM DUAL;
        RETURN ret_val;
      END;

    END plsql_example;
  /
  /* End PL/SQL for example package creation. */

  use DBI;

  my($db, $csr, $ret_val);

  $db = DBI->connect('dbi:Oracle:database','user','password')
        or die "Unable to connect: $DBI::errstr";

  # So we don't have to check every DBI call we set RaiseError.
  # See the DBI docs now if you're not familiar with RaiseError.
  $db->{RaiseError} = 1;

  # Example 1        Eric Bartley <bartley@cc.purdue.edu>
  #
  # Calling a PLSQL procedure that takes no parameters. This shows you the
  # basic's of what you need to execute a PLSQL procedure. Just wrap your
  # procedure call in a BEGIN END; block just like you'd do in SQL*Plus.
  #
  # p.s. If you've used SQL*Plus's exec command all it does is wrap the
  #      command in a BEGIN END; block for you.

  $csr = $db->prepare(q{
    BEGIN
      PLSQL_EXAMPLE.PROC_NP;
    END;
  });
  $csr->execute;


  # Example 2        Eric Bartley <bartley@cc.purdue.edu>
  #
  # Now we call a procedure that has 1 IN parameter. Here we use bind_param
  # to bind out parameter to the prepared statement just like you might
  # do for an INSERT, UPDATE, DELETE, or SELECT statement.
  #
  # I could have used positional placeholders (e.g. :1, :2, etc.) or
  # ODBC style placeholders (e.g. ?), but I prefer Oracle's named
  # placeholders (but few DBI drivers support them so they're not portable).

  my $err_code = -20001;

  $csr = $db->prepare(q{
          BEGIN
              PLSQL_EXAMPLE.PROC_IN(:err_code);
          END;
  });

  $csr->bind_param(":err_code", $err_code);

  # PROC_IN will RAISE_APPLICATION_ERROR which will cause the execute to 'fail'.
  # Because we set RaiseError, the DBI will croak (die) so we catch that with eval.
  eval {
    $csr->execute;
  };
  print 'After proc_in: $@=',"'$@', errstr=$DBI::errstr, ret_val=$ret_val\n";


  # Example 3        Eric Bartley <bartley@cc.purdue.edu>
  #
  # Building on the last example, I've added 1 IN OUT parameter. We still
  # use a placeholders in the call to prepare, the difference is that
  # we now call bind_param_inout to bind the value to the place holder.
  #
  # Note that the third parameter to bind_param_inout is the maximum size
  # of the variable. You normally make this slightly larger than necessary.
  # But note that the Perl variable will have that much memory assigned to
  # it even if the actual value returned is shorter.

  my $test_num = 5;
  my $is_odd;

  $csr = $db->prepare(q{
          BEGIN
              PLSQL_EXAMPLE.PROC_IN_INOUT(:test_num, :is_odd);
          END;
  });

  # The value of $test_num is _copied_ here
  $csr->bind_param(":test_num", $test_num);

  $csr->bind_param_inout(":is_odd", \$is_odd, 1);

  # The execute will automagically update the value of $is_odd
  $csr->execute;

  print "$test_num is ", ($is_odd) ? "odd - ok" : "even - error!", "\n";


  # Example 4        Eric Bartley <bartley@cc.purdue.edu>
  #
  # What about the return value of a PLSQL function? Well treat it the same
  # as you would a call to a function from SQL*Plus. We add a placeholder
  # for the return value and bind it with a call to bind_param_inout so
  # we can access its value after execute.

  my $whoami = "";

  $csr = $db->prepare(q{
          BEGIN
              :whoami := PLSQL_EXAMPLE.FUNC_NP;
          END;
  });

  $csr->bind_param_inout(":whoami", \$whoami, 20);
  $csr->execute;
  print "Your database user name is $whoami\n";

  $db->disconnect;

You can find more examples in the t/plsql.t file in the DBD::Oracle
source directory.

Oracle 9.2 appears to have a bug where a variable bound
with bind_param_inout() that isn't assigned to by the executed
PL/SQL block may contain garbage.
See L<http://www.mail-archive.com/dbi-users@perl.org/msg18835.html>

=head2 Avoid Using "SQL Call"

Avoid using the "SQL Call" statement with DBD:Oracle as you might find that
DBD::Oracle will not raise an exception in some case.  Specifically if you use
"SQL Call" to run a procedure all "No data found" exceptions will be quietly
ignored and returned as null. According to Oracle support this is part of the same
mechanism where;

  select (select * from dual where 0=1) from dual

returns a null value rather than an exception.

=head1 CONTRIBUTING

If you'd like DBD::Oracle to do something new or different the best way
to make that happen is to do it yourself and email to dbi-dev@perl.org a
patch of the source code (using 'diff' - see below) that shows the changes.

=head2 Speak before you patch

For anything non-trivial or possibly controversial it's a good idea
to discuss (on dbi-dev@perl.org) the changes you propose before
actually spending time working on them. Otherwise you run the risk
of them being rejected because they don't fit into some larger plans
you may not be aware of.

=head1 WHICH VERSION OF DBD::ORACLE IS FOR ME?

From version 1.25 onwards DBD::Oracle only support Oracle clients
9.2 or greater. Support for ProC connections was dropped in 1.29.

If you are still stuck with an older version of Oracle or its client you might want to look at the table below.

  +---------------------+-----------------------------------------------------+
  |                     |                   Oracle Version                    |
  +---------------------+----+-------------+---------+------+--------+--------+
  | DBD::Oracle Version | <8 | 8.0.3~8.0.6 | 8iR1~R2 | 8iR3 |   9i   | 9.2~11 |
  +---------------------+----+-------------+---------+------+--------+--------+
  |      0.1~16         | Y  |      Y      |    Y    |  Y   |    Y   |    Y   |
  +---------------------+----+-------------+---------+------+--------+--------+
  |      1.17           | Y  |      Y      |    Y    |  Y   |    Y   |    Y   |
  +---------------------+----+-------------+---------+------+--------+--------+
  |      1.18           | N  |      N      |    N    |  Y   |    Y   |    Y   |
  +---------------------+----+-------------+---------+------+--------+--------+
  |      1.19           | N  |      N      |    N    |  Y   |    Y   |    Y   |
  +---------------------+----+-------------+---------+------+--------+--------+
  |      1.20           | N  |      N      |    N    |  Y   |    Y   |    Y   |
  +---------------------+----+-------------+---------+------+--------+--------+
  |      1.21~1.24      | N  |      N      |    N    |  N   |    Y   |    Y   |
  +---------------------+----+-------------+---------+------+--------+--------+
  |      1.25+          | N  |      N      |    N    |  N   |    N   |    Y   |
  +---------------------+----+-------------+---------+------+--------+--------+

As there are dozens of different versions of Oracle's clients this
list does not include all of them, just the major released versions of
Oracle.

Note that one can still connect to any Oracle version with the older
DBD::Oracle versions the only problem you will have is that some of
the newer OCI and Oracle features available in later DBD::Oracle
releases will not be available to you.

So to make a short story a little longer:

=over

=item 1

If you are using Oracle 7 or early 8 DB and you can manage to get a 9 client and you can use
any DBD::Oracle version.

=item 2

If you have to use an Oracle 7 client then DBD::Oracle 1.17 should work

=item 3

Same thing for 8 up to R2, use 1.17, if you are lucky and have the right patch-set you might
go with 1.18.

=item 4

For 8iR3 you can use any of the DBD::Oracle versions up to 1.21. Again this depends on your
patch-set, If you run into trouble go with 1.19

=item 5

After 9.2 you can use any version you want.

=item 6

It seems that the 10g client can only connect to 9 and 11 DBs while the 9 can go back to 7
and even get to 10. I am not sure what the 11g client can connect to.

=back

=head1 SEE ALSO

=over

=item L<DBI>

http://search.cpan.org/~timb/DBD-Oracle/MANIFEST for all files in
the DBD::Oracle source distribution including the examples in the
Oracle.ex directory

=item DBD::Oracle Tutorial

https://blog.pythian.com/wp-content/uploads/introduction-dbd-oracle.html

=item Oracle Instant Client

https://www.oracle.com/database/technologies/instant-client/downloads.html

=item Oracle on Linux

http://www.ixora.com.au/

=item Free Oracle Tools and Links

ora_explain supplied and installed with DBD::Oracle.

https://www.orafaq.com/

https://www.oracletool.com/

=item Commercial Oracle Tools and Links

Assorted tools and references for general information.
No recommendation implied.

https://www.SoftTreeTech.com

Also PL/Vision from RevealNet and Steven Feuerstein, and
"Q" from Savant Corporation.

=back

=head1 ACKNOWLEDGEMENTS

A great many people have helped with DBD::Oracle over the 17 years
between 1994 and 2011.  Far too many to name, but we thank them all.
Many are named in the Changes file.

=head1 AUTHORS

=over 4

=item *

Tim Bunce <timb@cpan.org>

=item *

John Scoles <byterock@cpan.org>

=item *

Yanick Champoux <yanick@cpan.org>

=item *

Martin J. Evans <mjevans@cpan.org>

=back

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2024, 2023, 2022, 2021, 2019, 2014, 2013, 2012, 2011, 2010 by Tim Bunce.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
                                                                                                                                                                                                          root/.cpan/build/DBD-Oracle-1.90-2/mk.pm                                                            0000644 0000000 0000000 00000035213 14723047467 015634  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        $dbd_oracle_mm_opts = {
  "OBJECT" => "\$(O_FILES)",
  "dynamic_lib" => {
    "OTHERLDFLAGS" => ""
  },
  "INC" => "-I/usr/include/oracle/19.6/client64 -I/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBI",
  "AUTHOR" => "Tim Bunce (dbi-users\@perl.org)",
  "DIR" => [],
  "ABSTRACT_FROM" => "lib/DBD/Oracle.pm",
  "LICENSE" => "perl",
  "DEFINE" => " -Wall -Wno-comment -DUTF8_SUPPORT -DORA_OCI_VERSION=\\\"19.6.0.0\\\" -DORA_OCI_102 -DORA_OCI_112",
  "LIBS" => [
    "-L/usr/lib/oracle/19.6/client64/lib -lclntsh"
  ],
  "META_MERGE" => {
    "configure_requires" => {
      "DBI" => "1.623"
    },
    "build_requires" => {
      "DBI" => "1.623",
      "Test::Simple" => "0.90",
      "ExtUtils::MakeMaker" => 0
    }
  },
  "PREREQ_PM" => {
    "DBI" => "1.623"
  },
  "dist" => {
    "COMPRESS" => "gzip -v9",
    "DIST_DEFAULT" => "clean distcheck disttest tardist",
    "PREOP" => "\$(MAKE) -f Makefile.old distdir",
    "SUFFIX" => "gz"
  },
  "VERSION_FROM" => "lib/DBD/Oracle.pm",
  "clean" => {
    "FILES" => "xstmp.c Oracle.xsi dll.base dll.exp sqlnet.log libOracle.def mk.pm DBD_ORA_OBJ.*"
  },
  "NAME" => "DBD::Oracle"
};
$dbd_oracle_mm_self = bless( {
  "XS_VERSION_MACRO" => "XS_VERSION",
  "TEST_REQUIRES" => {},
  "PERL_INC" => "/usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/CORE",
  "MAKEMAKER" => "/usr/local/lib/perl5/5.40.0/ExtUtils/MakeMaker.pm",
  "LD" => "cc",
  "UNINSTALL" => "\$(ABSPERLRUN) -MExtUtils::Command::MM -e 'uninstall' --",
  "EXTRALIBS" => "-L/usr/lib/oracle/19.6/client64/lib -lclntsh",
  "DESTINSTALLVENDORLIB" => "\$(DESTDIR)\$(INSTALLVENDORLIB)",
  "VERSION" => "1.90",
  "FIRST_MAKEFILE" => "Makefile",
  "PERLRUNINST" => "\$(PERLRUN) \"-I\$(INST_ARCHLIB)\" \"-I\$(INST_LIB)\"",
  "FALSE" => "false",
  "CCDLFLAGS" => "-Wl,-E -Wl,-rpath,/usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/CORE",
  "MAP_TARGET" => "perl",
  "XS" => {
    "Oracle.xs" => "Oracle.c"
  },
  "WARN_IF_OLD_PACKLIST" => "\$(ABSPERLRUN) -MExtUtils::Command::MM -e 'warn_if_old_packlist' --",
  "FIXIN" => "\$(ABSPERLRUN) -MExtUtils::MY -e 'MY->fixin(shift)' --",
  "LDFLAGS" => " -fstack-protector-strong -L/usr/local/lib",
  "SITEPREFIX" => "/usr/local",
  "INSTALLSITEMAN1DIR" => "\$(INSTALLMAN1DIR)",
  "CHMOD" => "chmod",
  "H" => [
    "Oracle.h",
    "dbdimp.h",
    "dbivport.h",
    "ocitrace.h"
  ],
  "MAN1SECTION" => 1,
  "PMLIBDIRS" => [
    "lib"
  ],
  "INSTALLSCRIPT" => "/usr/local/bin",
  "PREOP" => "\$(NOECHO) \$(NOOP)",
  "ABSTRACT_FROM" => "lib/DBD/Oracle.pm",
  "DIR" => [],
  "INST_BOOT" => "\$(INST_ARCHAUTODIR)/\$(BASEEXT).bs",
  "clean" => {},
  "MOD_INSTALL" => "\$(ABSPERLRUN) -MExtUtils::Install -e 'install([ from_to => {\@ARGV}, verbose => '\\''\$(VERBINST)'\\'', uninstall_shadows => '\\''\$(UNINST)'\\'', dir_mode => '\\''\$(PERM_DIR)'\\'' ]);' --",
  "INSTALLVENDORMAN1DIR" => "\$(INSTALLMAN1DIR)",
  "MAKEFILE_OLD" => "Makefile.old",
  "HAS_LINK_CODE" => 1,
  "LDFROM" => "\$(OBJECT)",
  "INSTALLMAN1DIR" => "none",
  "INST_MAN1DIR" => "blib/man1",
  "DLBASE" => "\$(BASEEXT)",
  "INSTALLSITESCRIPT" => "/usr/local/bin",
  "INSTALLSITELIB" => "/usr/local/lib/perl5/site_perl/5.40.0",
  "SO" => "so",
  "dist" => {},
  "ZIP" => "zip",
  "PERL_SRC" => undef,
  "CI" => "ci -u",
  "INSTALLPRIVLIB" => "/usr/local/lib/perl5/5.40.0",
  "INSTALLVENDORLIB" => "/usr/local/lib/perl5/vendor_perl/5.40.0",
  "INST_LIBDIR" => "\$(INST_LIB)/DBD",
  "MACROSTART" => "",
  "TEST_F" => "test -f",
  "INST_DYNAMIC" => "\$(INST_ARCHAUTODIR)/\$(DLBASE).\$(DLEXT)",
  "DESTINSTALLVENDORBIN" => "\$(DESTDIR)\$(INSTALLVENDORBIN)",
  "MAN3PODS" => {},
  "FULLPERLRUNINST" => "\$(FULLPERLRUN) \"-I\$(INST_ARCHLIB)\" \"-I\$(INST_LIB)\"",
  "DESTINSTALLVENDORMAN3DIR" => "\$(DESTDIR)\$(INSTALLVENDORMAN3DIR)",
  "INC" => "-I/usr/include/oracle/19.6/client64 -I/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBI",
  "INST_ARCHAUTODIR" => "\$(INST_ARCHLIB)/auto/\$(FULLEXT)",
  "TEST_S" => "test -s",
  "UNINST" => 0,
  "INST_STATIC" => "\$(INST_ARCHAUTODIR)/\$(BASEEXT)\$(LIB_EXT)",
  "EQUALIZE_TIMESTAMP" => "\$(ABSPERLRUN) -MExtUtils::Command -e 'eqtime' --",
  "BUILD_REQUIRES" => {},
  "AR_STATIC_ARGS" => "cr",
  "VENDORPREFIX" => "/usr/local",
  "MAN1PODS" => {},
  "DESTINSTALLSITELIB" => "\$(DESTDIR)\$(INSTALLSITELIB)",
  "USEMAKEFILE" => "-f",
  "DESTINSTALLSITEARCH" => "\$(DESTDIR)\$(INSTALLSITEARCH)",
  "PERLPREFIX" => "/usr/local",
  "VERSION_SYM" => "1_90",
  "TARFLAGS" => "cvf",
  "AUTHOR" => [
    "Tim Bunce (dbi-users\@perl.org)"
  ],
  "FULL_AR" => "/usr/bin/ar",
  "O_FILES" => [
    "Oracle.o",
    "dbdcnx.o",
    "dbdimp.o",
    "oci8.o"
  ],
  "UMASK_NULL" => "umask 0",
  "ABSPERLRUN" => "\$(ABSPERL)",
  "DESTINSTALLBIN" => "\$(DESTDIR)\$(INSTALLBIN)",
  "SITELIBEXP" => "/usr/local/lib/perl5/site_perl/5.40.0",
  "CONFIGURE_REQUIRES" => {},
  "PREFIX" => "\$(SITEPREFIX)",
  "TO_UNIX" => "\$(NOECHO) \$(NOOP)",
  "LIBPERL_A" => "libperl.a",
  "OBJECT" => "\$(O_FILES)",
  "MM_VERSION" => "7.70",
  "PERL_CORE" => 0,
  "INSTALLBIN" => "/usr/local/bin",
  "LD_RUN_PATH" => "/usr/lib/oracle/19.6/client64/lib",
  "OBJ_EXT" => ".o",
  "MAN3SECTION" => 3,
  "DESTINSTALLSITEBIN" => "\$(DESTDIR)\$(INSTALLSITEBIN)",
  "EXE_EXT" => "",
  "LIBS" => [],
  "BOOTDEP" => "",
  "PERL_MALLOC_DEF" => "-DPERL_EXTMALLOC_DEF -Dmalloc=Perl_malloc -Dfree=Perl_mfree -Drealloc=Perl_realloc -Dcalloc=Perl_calloc",
  "CCCDLFLAGS" => "-fPIC",
  "FULLPERL" => "\"/usr/local/bin/perl\"",
  "NAME_SYM" => "DBD_Oracle",
  "INSTALLVENDORMAN3DIR" => "\$(INSTALLMAN3DIR)",
  "DISTVNAME" => "DBD-Oracle-1.90",
  "TRUE" => "true",
  "CP" => "cp",
  "LICENSE" => "perl",
  "PM" => {
    "lib/DBD/Oracle/GetInfo.pm" => "blib/lib/DBD/Oracle/GetInfo.pm",
    "lib/DBD/Oracle/Troubleshooting/Macos.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Macos.pod",
    "lib/DBD/Oracle/Troubleshooting/Linux.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Linux.pod",
    "mk.pm" => "\$(INST_LIB)/DBD/mk.pm",
    "lib/DBD/Oracle/Troubleshooting/Sun.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Sun.pod",
    "lib/DBD/Oracle/Troubleshooting/Aix.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Aix.pod",
    "lib/DBD/Oracle/Troubleshooting/Win64.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Win64.pod",
    "lib/DBD/Oracle/Object.pm" => "blib/lib/DBD/Oracle/Object.pm",
    "lib/DBD/Oracle/Troubleshooting/Hpux.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Hpux.pod",
    "lib/DBD/Oracle/Troubleshooting.pod" => "blib/lib/DBD/Oracle/Troubleshooting.pod",
    "lib/DBD/Oracle/Troubleshooting/Win32.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Win32.pod",
    "lib/DBD/Oracle.pm" => "blib/lib/DBD/Oracle.pm",
    "lib/DBD/Oracle/Troubleshooting/Vms.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Vms.pod",
    "lib/DBD/Oracle/Troubleshooting/Cygwin.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Cygwin.pod"
  },
  "DISTNAME" => "DBD-Oracle",
  "INSTALLSITEMAN3DIR" => "\$(INSTALLMAN3DIR)",
  "PERLRUN" => "\$(PERL)",
  "RM_RF" => "rm -rf",
  "C" => [
    "Oracle.c",
    "dbdcnx.c",
    "dbdimp.c",
    "oci8.c"
  ],
  "LIB_EXT" => ".a",
  "DESTINSTALLSITEMAN1DIR" => "\$(DESTDIR)\$(INSTALLSITEMAN1DIR)",
  "LDLOADLIBS" => "-L/usr/lib/oracle/19.6/client64/lib -lclntsh",
  "MAN3EXT" => 0,
  "PREREQ_PM" => {
    "DBI" => "1.623"
  },
  "MV" => "mv",
  "PERL_ARCHLIB" => "/usr/local/lib/perl5/5.40.0/x86_64-linux-gnu",
  "INSTALLVENDORARCH" => "/usr/local/lib/perl5/vendor_perl/5.40.0/x86_64-linux-gnu",
  "OSNAME" => "linux",
  "SITEARCHEXP" => "/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu",
  "FULLEXT" => "DBD/Oracle",
  "ABSPERL" => "\$(PERL)",
  "ZIPFLAGS" => "-r",
  "MAKE_APERL_FILE" => "Makefile.aperl",
  "NOECHO" => "\@",
  "LIBC" => "/lib/x86_64-linux-gnu/libc.so.6",
  "INST_ARCHLIB" => "blib/arch",
  "PERL_ARCHIVEDEP" => "",
  "INST_MAN3DIR" => "blib/man3",
  "MM_REVISION" => 77000,
  "PERM_DIR" => 755,
  "INSTALLSITEBIN" => "/usr/local/bin",
  "DIRFILESEP" => "/",
  "DESTINSTALLSITESCRIPT" => "\$(DESTDIR)\$(INSTALLSITESCRIPT)",
  "RCS_LABEL" => "rcs -Nv\$(VERSION_SYM): -q",
  "DESTINSTALLPRIVLIB" => "\$(DESTDIR)\$(INSTALLPRIVLIB)",
  "EXPORT_LIST" => "",
  "PERL_INCDEP" => "/usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/CORE",
  "ECHO_N" => "echo -n",
  "COMPRESS" => "gzip --best",
  "PERL" => "\"/usr/local/bin/perl\"",
  "DEFINE" => " -Wall -Wno-comment -DUTF8_SUPPORT -DORA_OCI_VERSION=\\\"19.6.0.0\\\" -DORA_OCI_102 -DORA_OCI_112",
  "OSVERS" => "6.5.0-1025-azure",
  "SUFFIX" => ".gz",
  "VENDORLIBEXP" => "/usr/local/lib/perl5/vendor_perl/5.40.0",
  "PERLMAINCC" => "\$(CC)",
  "POSTOP" => "\$(NOECHO) \$(NOOP)",
  "MAKE" => "make",
  "ECHO" => "echo",
  "PARENT_NAME" => "DBD",
  "INSTALLARCHLIB" => "/usr/local/lib/perl5/5.40.0/x86_64-linux-gnu",
  "PERL_ARCHLIBDEP" => "/usr/local/lib/perl5/5.40.0/x86_64-linux-gnu",
  "DLSRC" => "dl_dlopen.xs",
  "SHELL" => "/bin/sh",
  "DESTINSTALLSITEMAN3DIR" => "\$(DESTDIR)\$(INSTALLSITEMAN3DIR)",
  "TOUCH" => "touch",
  "NAME" => "DBD::Oracle",
  "ARGS" => {
    "dynamic_lib" => {},
    "OBJECT" => "\$(O_FILES)",
    "ABSTRACT_FROM" => "lib/DBD/Oracle.pm",
    "DIR" => [],
    "INC" => "-I/usr/include/oracle/19.6/client64 -I/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBI",
    "AUTHOR" => [],
    "DEFINE" => " -Wall -Wno-comment -DUTF8_SUPPORT -DORA_OCI_VERSION=\\\"19.6.0.0\\\" -DORA_OCI_102 -DORA_OCI_112",
    "LICENSE" => "perl",
    "LIBS" => [],
    "META_MERGE" => {},
    "PREREQ_PM" => {},
    "clean" => {},
    "NAME" => "DBD::Oracle",
    "VERSION_FROM" => "lib/DBD/Oracle.pm",
    "dist" => {}
  },
  "DESTINSTALLMAN3DIR" => "\$(DESTDIR)\$(INSTALLMAN3DIR)",
  "VENDORARCHEXP" => "/usr/local/lib/perl5/vendor_perl/5.40.0/x86_64-linux-gnu",
  "META_MERGE" => {},
  "XS_VERSION" => "1.90",
  "DESTINSTALLARCHLIB" => "\$(DESTDIR)\$(INSTALLARCHLIB)",
  "PL_FILES" => {},
  "BSLOADLIBS" => "",
  "XS_DEFINE_VERSION" => "-D\$(XS_VERSION_MACRO)=\\\"\$(XS_VERSION)\\\"",
  "PERL_ARCHIVE_AFTER" => "",
  "PERL_ARCHIVE" => "",
  "dynamic_lib" => {},
  "DESTINSTALLVENDORMAN1DIR" => "\$(DESTDIR)\$(INSTALLVENDORMAN1DIR)",
  "DIST_CP" => "best",
  "VERSION_MACRO" => "VERSION",
  "ABSTRACT" => "Oracle database driver for the DBI module",
  "LINKTYPE" => "dynamic",
  "RM_F" => "rm -f",
  "INST_BIN" => "blib/bin",
  "INSTALLDIRS" => "site",
  "ABSPERLRUNINST" => "\$(ABSPERLRUN) \"-I\$(INST_ARCHLIB)\" \"-I\$(INST_LIB)\"",
  "RESULT" => [
    "# This Makefile is for the DBD::Oracle extension to perl.\n#\n# It was generated automatically by MakeMaker version\n# 7.70 (Revision: 77000) from the contents of\n# Makefile.PL. Don't edit this file, edit Makefile.PL instead.\n#\n#       ANY CHANGES MADE HERE WILL BE LOST!\n#\n#   MakeMaker ARGV: ()\n#\n",
    "#   MakeMaker Parameters:\n",
    "#     ABSTRACT_FROM => q[lib/DBD/Oracle.pm]",
    "#     AUTHOR => [q[Tim Bunce (dbi-users\@perl.org)]]",
    "#     BUILD_REQUIRES => {  }",
    "#     CONFIGURE_REQUIRES => {  }",
    "#     DEFINE => q[ -Wall -Wno-comment -DUTF8_SUPPORT -DORA_OCI_VERSION=\\\"19.6.0.0\\\" -DORA_OCI_102 -DORA_OCI_112]",
    "#     DIR => []",
    "#     INC => q[-I/usr/include/oracle/19.6/client64 -I/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBI]",
    "#     LIBS => [q[-L/usr/lib/oracle/19.6/client64/lib -lclntsh]]",
    "#     LICENSE => q[perl]",
    "#     META_MERGE => { build_requires=>{ DBI=>q[1.623], ExtUtils::MakeMaker=>q[0], Test::Simple=>q[0.90] }, configure_requires=>{ DBI=>q[1.623] } }",
    "#     NAME => q[DBD::Oracle]",
    "#     OBJECT => q[\$(O_FILES)]",
    "#     PREREQ_PM => { DBI=>q[1.623] }",
    "#     TEST_REQUIRES => {  }",
    "#     VERSION_FROM => q[lib/DBD/Oracle.pm]",
    "#     clean => { FILES=>q[xstmp.c Oracle.xsi dll.base dll.exp sqlnet.log libOracle.def mk.pm DBD_ORA_OBJ.*] }",
    "#     dist => { COMPRESS=>q[gzip -v9], DIST_DEFAULT=>q[clean distcheck disttest tardist], PREOP=>q[\$(MAKE) -f Makefile.old distdir], SUFFIX=>q[gz] }",
    "#     dynamic_lib => { OTHERLDFLAGS=>q[] }",
    "\n# --- MakeMaker post_initialize section:"
  ],
  "RANLIB" => ":",
  "INSTALLVENDORSCRIPT" => "/usr/local/bin",
  "CC" => "cc",
  "MACROEND" => "",
  "DIST_DEFAULT" => "tardist",
  "LDDLFLAGS" => "-shared -O2 -L/usr/local/lib -fstack-protector-strong",
  "INSTALLMAN3DIR" => "none",
  "VERBINST" => 0,
  "DESTINSTALLVENDORSCRIPT" => "\$(DESTDIR)\$(INSTALLVENDORSCRIPT)",
  "DESTINSTALLMAN1DIR" => "\$(DESTDIR)\$(INSTALLMAN1DIR)",
  "FULLPERLRUN" => "\$(FULLPERL)",
  "DLEXT" => "so",
  "DEFINE_VERSION" => "-D\$(VERSION_MACRO)=\\\"\$(VERSION)\\\"",
  "CP_NONEMPTY" => "\$(ABSPERLRUN) -MExtUtils::Command::MM -e 'cp_nonempty' --",
  "CPPRUN" => "cc  -E",
  "PERL_LIB" => "/usr/local/lib/perl5/5.40.0",
  "NOOP" => "\$(TRUE)",
  "AR" => "ar",
  "PERM_RWX" => 755,
  "PMLIBPARENTDIRS" => [
    "lib"
  ],
  "SKIPHASH" => {},
  "MM_Unix_VERSION" => "7.70",
