	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F100,
	0x1F1AE,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D8,
	0x1F6DD,
	0x1F6ED,
	0x1F6F0,
	0x1F6FD,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D9,
	0x1F7E0,
	0x1F7EC,
	0x1F7F0,
	0x1F7F1,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F8B0,
	0x1F8B2,
	0x1F900,
	0x1FA54,
	0x1FA60,
	0x1FA6E,
	0x1FA70,
	0x1FA75,
	0x1FA78,
	0x1FA7D,
	0x1FA80,
	0x1FA87,
	0x1FA90,
	0x1FAAD,
	0x1FAB0,
	0x1FABB,
	0x1FAC0,
	0x1FAC6,
	0x1FAD0,
	0x1FADA,
	0x1FAE0,
	0x1FAE8,
	0x1FAF0,
	0x1FAF7,
	0x1FB00,
	0x1FB93,
	0x1FB94,
	0x1FBCB,
	0x1FBF0,
	0x1FBFA,
	0x20000,
	0x2A6E0,
	0x2A700,
	0x2B739,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0x30000,
	0x3134B,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_CASED_invlist[] = {  /* for ASCII/Latin1 */
	311,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x560,
	0x589,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FD,
	0x1100,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1C90,
	0x1CBB,
	0x1CBD,
	0x1CC0,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69E,
	0xA722,
	0xA788,
	0xA78B,
	0xA78F,
	0xA790,
	0xA7CB,
	0xA7D0,
	0xA7D2,
	0xA7D3,
	0xA7D4,
	0xA7D5,
	0xA7DA,
	0xA7F5,
	0xA7F7,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB69,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10570,
	0x1057B,
	0x1057C,
	0x1058B,
	0x1058C,
	0x10593,
	0x10594,
	0x10596,
	0x10597,
	0x105A2,
	0x105A3,
	0x105B2,
	0x105B3,
	0x105BA,
	0x105BB,
	0x105BD,
	0x10780,
	0x10781,
	0x10783,
	0x10786,
	0x10787,
	0x107B1,
	0x107B2,
	0x107BB,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x16E40,
	0x16E80,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1DF00,
	0x1DF0A,
	0x1DF0B,
	0x1DF1F,
	0x1E900,
	0x1E944,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_CASED_invlist[] = {  /* for EBCDIC 1047 */
	337,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xBA,
	0xBB,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x560,
	0x589,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FD,
	0x1100,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1C90,
	0x1CBB,
	0x1CBD,
	0x1CC0,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69E,
	0xA722,
	0xA788,
	0xA78B,
	0xA78F,
	0xA790,
	0xA7CB,
	0xA7D0,
	0xA7D2,
	0xA7D3,
	0xA7D4,
	0xA7D5,
	0xA7DA,
	0xA7F5,
	0xA7F7,
	0xA7F8,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB5C,
	0xAB69,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0x10400,
	0x10450,
	0x104B0,
	0x104D4,
	0x104D8,
	0x104FC,
	0x10570,
	0x1057B,
	0x1057C,
	0x1058B,
	0x1058C,
	0x10593,
	0x10594,
	0x10596,
	0x10597,
	0x105A2,
	0x105A3,
	0x105B2,
	0x105B3,
	0x105BA,
	0x105BB,
	0x105BD,
	0x10780,
	0x10781,
	0x10783,
	0x10786,
	0x10787,
	0x107B1,
	0x107B2,
	0x107BB,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x118A0,
	0x118E0,
	0x16E40,
	0x16E80,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CC,
	0x1DF00,
	0x1DF0A,
	0x1DF0B,
	0x1DF1F,
	0x1E900,
	0x1E944,
	0x1F130,
	0x1F14A,
	0x1F150,
	0x1F16A,
	0x1F170,
	0x1F18A
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_CASED_invlist[] = {  /* for EBCDIC 037 */
	333,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xC1,
	0xCA,
	0xCB,
	0xD0,
	0xD1,
	0xDA,
	0xDB,
	0xE0,
	0xE2,
	0xEA,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C2,
	0x2E0,
	0x2E5,
	0x345,
	0x346,
	0x370,
	0x374,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x560,
	0x589,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FD,
	0x1100,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0x1C80,
	0x1C89,
	0x1C90,
	0x1CBB,
	0x1CBD,
	0x1CC0,
	0x1D00,
	0x1DC0,
	0x1E00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FCD,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FE0,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFD,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2160,
	0x2180,
	0x2183,
	0x2185,
	0x24B6,
	0x24EA,
	0x2C00,
	0x2CE5,
	0x2CEB,
	0x2CEF,
	0x2CF2,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA640,
	0xA66E,
	0xA680,
	0xA69E,
	0xA722,
	0xA788,
	0xA78B,
	0xA78F,
	0xA790,
	0xA7CB,
	0xA7D0,
	0xA7D2,
	0xA7D3,
	0xA7D4,
