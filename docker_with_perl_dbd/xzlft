=back

=for hackers
Found in file config.h

=over 4

=item C<Rand_seed_t>
X<Rand_seed_t>

This symbol defines the type of the argument of the
random seed function.

=back

=for hackers
Found in file config.h

=over 4

=item C<Select_fd_set_t>
X<Select_fd_set_t>

This symbol holds the type used for the 2nd, 3rd, and 4th
arguments to select.  Usually, this is 'C<fd_set> *', if C<HAS_FD_SET>
is defined, and 'int *' otherwise.  This is only useful if you
have C<select()>, of course.

=back

=for hackers
Found in file config.h

=over 4

=item C<Shmat_t>
X<Shmat_t>

This symbol holds the return type of the C<shmat()> system call.
Usually set to 'void *' or 'char *'.

=back

=for hackers
Found in file config.h

=over 4

=item C<Signal_t>
X<Signal_t>

This symbol's value is either "void" or "int", corresponding to the
appropriate return type of a signal handler.  Thus, you can declare
a signal handler using "C<Signal_t> (*handler)()", and define the
handler using "C<Signal_t> C<handler(sig)>".

=back

=for hackers
Found in file config.h

=over 4

=item C<Size_t>
X<Size_t>

This symbol holds the type used to declare length parameters
for string functions.  It is usually C<size_t>, but may be
unsigned long, int, etc.  It may be necessary to include
F<sys/types.h> to get any typedef'ed information.

=back

=for hackers
Found in file config.h

=over 4

=item C<Size_t_size>
X<Size_t_size>

This symbol holds the size of a C<Size_t> in bytes.

=back

=for hackers
Found in file config.h

=over 4

=item C<Sock_size_t>
X<Sock_size_t>

This symbol holds the type used for the size argument of
various socket calls (just the base type, not the pointer-to).

=back

=for hackers
Found in file config.h

=over 4

=item C<SSize_t>
X<SSize_t>

This symbol holds the type used by functions that return
a count of bytes or an error condition.  It must be a signed type.
It is usually C<ssize_t>, but may be long or int, etc.
It may be necessary to include F<sys/types.h> or F<unistd.h>
to get any typedef'ed information.
We will pick a type such that C<sizeof(SSize_t)> == C<sizeof(Size_t)>.

=back

=for hackers
Found in file config.h

=over 4

=item C<Time_t>
X<Time_t>

This symbol holds the type returned by C<time()>. It can be long,
or C<time_t> on C<BSD> sites (in which case F<sys/types.h> should be
included).

=back

=for hackers
Found in file config.h

=over 4

=item C<Uid_t>
X<Uid_t>

This symbol holds the type used to declare user ids in the kernel.
It can be int, ushort, C<uid_t>, etc... It may be necessary to include
F<sys/types.h> to get any typedef'ed information.

=back

=for hackers
Found in file config.h

=over 4

=item C<Uid_t_f>
X<Uid_t_f>

This symbol defines the format string used for printing a C<Uid_t>.

=back

=for hackers
Found in file config.h

=over 4

=item C<Uid_t_sign>
X<Uid_t_sign>

This symbol holds the signedness of a C<Uid_t>.
1 for unsigned, -1 for signed.

=back

=for hackers
Found in file config.h

=over 4

=item C<Uid_t_size>
X<Uid_t_size>

This symbol holds the size of a C<Uid_t> in bytes.

=back

=for hackers
Found in file config.h

=head1 Unicode Support
X<UNICODE_DISALLOW_ABOVE_31_BIT>X<UNICODE_DISALLOW_ILLEGAL_C9_INTERCHANGE>X<UNICODE_DISALLOW_ILLEGAL_INTERCHANGE>X<UNICODE_DISALLOW_NONCHAR>X<UNICODE_DISALLOW_PERL_EXTENDED>X<UNICODE_DISALLOW_SUPER>X<UNICODE_DISALLOW_SURROGATE>X<UNICODE_WARN_ABOVE_31_BIT>X<UNICODE_WARN_ILLEGAL_C9_INTERCHANGE>X<UNICODE_WARN_ILLEGAL_INTERCHANGE>X<UNICODE_WARN_NONCHAR>X<UNICODE_WARN_PERL_EXTENDED>X<UNICODE_WARN_SUPER>X<UNICODE_WARN_SURROGATE>X<UNI_DISPLAY_BACKSLASH>X<UNI_DISPLAY_BACKSPACE>X<UNI_DISPLAY_ISPRINT>X<UNI_DISPLAY_QQ>X<UNI_DISPLAY_REGEX>X<UTF8_CHECK_ONLY>X<UTF8_DISALLOW_ILLEGAL_C9_INTERCHANGE>X<UTF8_DISALLOW_ILLEGAL_INTERCHANGE>X<UTF8_DISALLOW_NONCHAR>X<UTF8_DISALLOW_PERL_EXTENDED>X<UTF8_DISALLOW_SUPER>X<UTF8_DISALLOW_SURROGATE>X<UTF8_GOT_CONTINUATION>X<UTF8_GOT_EMPTY>X<UTF8_GOT_LONG>X<UTF8_GOT_NONCHAR>X<UTF8_GOT_NON_CONTINUATION>X<UTF8_GOT_OVERFLOW>X<UTF8_GOT_PERL_EXTENDED>X<UTF8_GOT_SHORT>X<UTF8_GOT_SUPER>X<UTF8_GOT_SURROGATE>X<UTF8_WARN_ILLEGAL_C9_INTERCHANGE>X<UTF8_WARN_ILLEGAL_INTERCHANGE>X<UTF8_WARN_NONCHAR>X<UTF8_WARN_PERL_EXTENDED>X<UTF8_WARN_SUPER>X<UTF8_WARN_SURROGATE>

L<perlguts/Unicode Support> has an introduction to this API.

See also C<L</Character classification>>,
C<L</Character case changing>>,
and C<L</String Handling>>.
Various functions outside this section also work specially with
Unicode.  Search for the string "utf8" in this document.


=over 4

=item C<BOM_UTF8>
X<BOM_UTF8>

This is a macro that evaluates to a string constant of the  UTF-8 bytes that
define the Unicode BYTE ORDER MARK (U+FEFF) for the platform that perl
is compiled on.  This allows code to use a mnemonic for this character that
works on both ASCII and EBCDIC platforms.
S<C<sizeof(BOM_UTF8) - 1>> can be used to get its length in
bytes.

=back

=for hackers
Found in file unicode_constants.h

=over 4

=item C<bytes_cmp_utf8>
X<bytes_cmp_utf8>

Compares the sequence of characters (stored as octets) in C<b>, C<blen> with the
sequence of characters (stored as UTF-8)
in C<u>, C<ulen>.  Returns 0 if they are
equal, -1 or -2 if the first string is less than the second string, +1 or +2
if the first string is greater than the second string.

-1 or +1 is returned if the shorter string was identical to the start of the
longer string.  -2 or +2 is returned if
there was a difference between characters
within the strings.

=over 3

 int  bytes_cmp_utf8(const U8 *b, STRLEN blen, const U8 *u,
                     STRLEN ulen)

=back

=back

=for hackers
Found in file utf8.c

=over 4

=item C<bytes_from_utf8>
X<bytes_from_utf8>

NOTE: C<bytes_from_utf8> is B<experimental> and may change or be
removed without notice.

Converts a potentially UTF-8 encoded string C<s> of length C<*lenp> into native
byte encoding.  On input, the boolean C<*is_utf8p> gives whether or not C<s> is
actually encoded in UTF-8.

Unlike L</utf8_to_bytes> but like L</bytes_to_utf8>, this is non-destructive of
the input string.

Do nothing if C<*is_utf8p> is 0, or if there are code points in the string
not expressible in native byte encoding.  In these cases, C<*is_utf8p> and
C<*lenp> are unchanged, and the return value is the original C<s>.

Otherwise, C<*is_utf8p> is set to 0, and the return value is a pointer to a
newly created string containing a downgraded copy of C<s>, and whose length is
returned in C<*lenp>, updated.  The new string is C<NUL>-terminated.  The
caller is responsible for arranging for the memory used by this string to get
freed.

Upon successful return, the number of variants in the string can be computed by
having saved the value of C<*lenp> before the call, and subtracting the
after-call value of C<*lenp> from it.

=over 3

 U8 *  bytes_from_utf8(const U8 *s, STRLEN *lenp, bool *is_utf8p)

=back

=back

=for hackers
Found in file utf8.c

=over 4

=item C<bytes_to_utf8>
X<bytes_to_utf8>

NOTE: C<bytes_to_utf8> is B<experimental> and may change or be
removed without notice.

Converts a string C<s> of length C<*lenp> bytes from the native encoding into
UTF-8.
Returns a pointer to the newly-created string, and sets C<*lenp> to
reflect the new length in bytes.  The caller is responsible for arranging for
the memory used by this string to get freed.

Upon successful return, the number of variants in the string can be computed by
having saved the value of C<*lenp> before the call, and subtracting it from the
after-call value of C<*lenp>.

A C<NUL> character will be written after the end of the string.

If you want to convert to UTF-8 from encodings other than
the native (Latin1 or EBCDIC),
see L</sv_recode_to_utf8>().

=over 3

 U8 *  bytes_to_utf8(const U8 *s, STRLEN *lenp)

=back

=back

=for hackers
Found in file utf8.c

=over 4

=item C<DO_UTF8>
X<DO_UTF8>

Returns a bool giving whether or not the PV in C<sv> is to be treated as being
encoded in UTF-8.

You should use this I<after> a call to C<SvPV()> or one of its variants, in
case any call to string overloading updates the internal UTF-8 encoding flag.

=over 3

 bool  DO_UTF8(SV* sv)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<foldEQ_utf8>
X<foldEQ_utf8>

Returns true if the leading portions of the strings C<s1> and C<s2> (either or
both of which may be in UTF-8) are the same case-insensitively; false
otherwise.  How far into the strings to compare is determined by other input
parameters.

If C<u1> is true, the string C<s1> is assumed to be in UTF-8-encoded Unicode;
otherwise it is assumed to be in native 8-bit encoding.  Correspondingly for
C<u2> with respect to C<s2>.

If the byte length C<l1> is non-zero, it says how far into C<s1> to check for
fold equality.  In other words, C<s1>+C<l1> will be used as a goal to reach.
The scan will not be considered to be a match unless the goal is reached, and
scanning won't continue past that goal.  Correspondingly for C<l2> with respect
to C<s2>.

If C<pe1> is non-C<NULL> and the pointer it points to is not C<NULL>, that
pointer is considered an end pointer to the position 1 byte past the maximum
point in C<s1> beyond which scanning will not continue under any circumstances.
(This routine assumes that UTF-8 encoded input strings are not malformed;
malformed input can cause it to read past C<pe1>).  This means that if both
C<l1> and C<pe1> are specified, and C<pe1> is less than C<s1>+C<l1>, the match
will never be successful because it can never
get as far as its goal (and in fact is asserted against).  Correspondingly for
C<pe2> with respect to C<s2>.

At least one of C<s1> and C<s2> must have a goal (at least one of C<l1> and
C<l2> must be non-zero), and if both do, both have to be
reached for a successful match.   Also, if the fold of a character is multiple
characters, all of them must be matched (see tr21 reference below for
'folding').

Upon a successful match, if C<pe1> is non-C<NULL>,
it will be set to point to the beginning of the I<next> character of C<s1>
beyond what was matched.  Correspondingly for C<pe2> and C<s2>.

For case-insensitiveness, the "casefolding" of Unicode is used
instead of upper/lowercasing both the characters, see
L<https://www.unicode.org/reports/tr21/> (Case Mappings).

=over 3

 I32  foldEQ_utf8(const char *s1, char **pe1, UV l1, bool u1,
                  const char *s2, char **pe2, UV l2, bool u2)

=back

=back

=for hackers
Found in file utf8.c

=over 4

=item C<is_ascii_string>
X<is_ascii_string>

This is a misleadingly-named synonym for L</is_utf8_invariant_string>.
On ASCII-ish platforms, the name isn't misleading: the ASCII-range characters
are exactly the UTF-8 invariants.  But EBCDIC machines have more invariants
than just the ASCII characters, so C<is_utf8_invariant_string> is preferred.

=over 3

 bool  is_ascii_string(const U8 * const s, STRLEN len)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<isC9_STRICT_UTF8_CHAR>
X<isC9_STRICT_UTF8_CHAR>

Evaluates to non-zero if the first few bytes of the string starting at C<s> and
looking no further than S<C<e - 1>> are well-formed UTF-8 that represents some
Unicode non-surrogate code point; otherwise it evaluates to 0.  If non-zero,
the value gives how many bytes starting at C<s> comprise the code point's
representation.  Any bytes remaining before C<e>, but beyond the ones needed to
form the first code point in C<s>, are not examined.

The largest acceptable code point is the Unicode maximum 0x10FFFF.  This
differs from C<L</isSTRICT_UTF8_CHAR>> only in that it accepts non-character
code points.  This corresponds to
L<Unicode Corrigendum #9|http://www.unicode.org/versions/corrigendum9.html>.
which said that non-character code points are merely discouraged rather than
completely forbidden in open interchange.  See
L<perlunicode/Noncharacter code points>.

Use C<L</isUTF8_CHAR>> to check for Perl's extended UTF-8; and
C<L</isUTF8_CHAR_flags>> for a more customized definition.

Use C<L</is_c9strict_utf8_string>>, C<L</is_c9strict_utf8_string_loc>>, and
C<L</is_c9strict_utf8_string_loclen>> to check entire strings.

=over 3

 Size_t  isC9_STRICT_UTF8_CHAR(const U8 * const s0,
                               const U8 * const e)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_c9strict_utf8_string>
X<is_c9strict_utf8_string>

Returns TRUE if the first C<len> bytes of string C<s> form a valid
UTF-8-encoded string that conforms to
L<Unicode Corrigendum #9|http://www.unicode.org/versions/corrigendum9.html>;
otherwise it returns FALSE.  If C<len> is 0, it will be calculated using
C<strlen(s)> (which means if you use this option, that C<s> can't have embedded
C<NUL> characters and has to have a terminating C<NUL> byte).  Note that all
characters being ASCII constitute 'a valid UTF-8 string'.

This function returns FALSE for strings containing any code points above the
Unicode max of 0x10FFFF or surrogate code points, but accepts non-character
code points per
L<Corrigendum #9|http://www.unicode.org/versions/corrigendum9.html>.

See also
C<L</is_utf8_invariant_string>>,
C<L</is_utf8_invariant_string_loc>>,
C<L</is_utf8_string>>,
C<L</is_utf8_string_flags>>,
C<L</is_utf8_string_loc>>,
C<L</is_utf8_string_loc_flags>>,
C<L</is_utf8_string_loclen>>,
C<L</is_utf8_string_loclen_flags>>,
C<L</is_utf8_fixed_width_buf_flags>>,
C<L</is_utf8_fixed_width_buf_loc_flags>>,
C<L</is_utf8_fixed_width_buf_loclen_flags>>,
C<L</is_strict_utf8_string>>,
C<L</is_strict_utf8_string_loc>>,
C<L</is_strict_utf8_string_loclen>>,
C<L</is_c9strict_utf8_string_loc>>,
and
C<L</is_c9strict_utf8_string_loclen>>.

=over 3

 bool  is_c9strict_utf8_string(const U8 *s, STRLEN len)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_c9strict_utf8_string_loc>
X<is_c9strict_utf8_string_loc>

Like C<L</is_c9strict_utf8_string>> but stores the location of the failure (in
the case of "utf8ness failure") or the location C<s>+C<len> (in the case of
"utf8ness success") in the C<ep> pointer.

See also C<L</is_c9strict_utf8_string_loclen>>.

=over 3

 bool  is_c9strict_utf8_string_loc(const U8 *s, STRLEN len,
                                   const U8 **ep)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_c9strict_utf8_string_loclen>
X<is_c9strict_utf8_string_loclen>

Like C<L</is_c9strict_utf8_string>> but stores the location of the failure (in
the case of "utf8ness failure") or the location C<s>+C<len> (in the case of
"utf8ness success") in the C<ep> pointer, and the number of UTF-8 encoded
characters in the C<el> pointer.

See also C<L</is_c9strict_utf8_string_loc>>.

=over 3

 bool  is_c9strict_utf8_string_loclen(const U8 *s, STRLEN len,
                                      const U8 **ep, STRLEN *el)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_invariant_string>
X<is_invariant_string>

This is a somewhat misleadingly-named synonym for L</is_utf8_invariant_string>.
C<is_utf8_invariant_string> is preferred, as it indicates under what conditions
the string is invariant.

=over 3

 bool  is_invariant_string(const U8 * const s, STRLEN len)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<isSTRICT_UTF8_CHAR>
X<isSTRICT_UTF8_CHAR>

Evaluates to non-zero if the first few bytes of the string starting at C<s> and
looking no further than S<C<e - 1>> are well-formed UTF-8 that represents some
Unicode code point completely acceptable for open interchange between all
applications; otherwise it evaluates to 0.  If non-zero, the value gives how
many bytes starting at C<s> comprise the code point's representation.  Any
bytes remaining before C<e>, but beyond the ones needed to form the first code
point in C<s>, are not examined.

The largest acceptable code point is the Unicode maximum 0x10FFFF, and must not
be a surrogate nor a non-character code point.  Thus this excludes any code
point from Perl's extended UTF-8.

This is used to efficiently decide if the next few bytes in C<s> is
legal Unicode-acceptable UTF-8 for a single character.

Use C<L</isC9_STRICT_UTF8_CHAR>> to use the L<Unicode Corrigendum
#9|http://www.unicode.org/versions/corrigendum9.html> definition of allowable
code points; C<L</isUTF8_CHAR>> to check for Perl's extended UTF-8;
and C<L</isUTF8_CHAR_flags>> for a more customized definition.

Use C<L</is_strict_utf8_string>>, C<L</is_strict_utf8_string_loc>>, and
C<L</is_strict_utf8_string_loclen>> to check entire strings.

=over 3

 Size_t  isSTRICT_UTF8_CHAR(const U8 * const s0,
                            const U8 * const e)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_strict_utf8_string>
X<is_strict_utf8_string>

Returns TRUE if the first C<len> bytes of string C<s> form a valid
UTF-8-encoded string that is fully interchangeable by any application using
Unicode rules; otherwise it returns FALSE.  If C<len> is 0, it will be
calculated using C<strlen(s)> (which means if you use this option, that C<s>
can't have embedded C<NUL> characters and has to have a terminating C<NUL>
byte).  Note that all characters being ASCII constitute 'a valid UTF-8 string'.

This function returns FALSE for strings containing any
code points above the Unicode max of 0x10FFFF, surrogate code points, or
non-character code points.

See also
C<L</is_utf8_invariant_string>>,
C<L</is_utf8_invariant_string_loc>>,
C<L</is_utf8_string>>,
C<L</is_utf8_string_flags>>,
C<L</is_utf8_string_loc>>,
C<L</is_utf8_string_loc_flags>>,
C<L</is_utf8_string_loclen>>,
C<L</is_utf8_string_loclen_flags>>,
C<L</is_utf8_fixed_width_buf_flags>>,
C<L</is_utf8_fixed_width_buf_loc_flags>>,
C<L</is_utf8_fixed_width_buf_loclen_flags>>,
C<L</is_strict_utf8_string_loc>>,
C<L</is_strict_utf8_string_loclen>>,
C<L</is_c9strict_utf8_string>>,
C<L</is_c9strict_utf8_string_loc>>,
and
C<L</is_c9strict_utf8_string_loclen>>.

=over 3

 bool  is_strict_utf8_string(const U8 *s, STRLEN len)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_strict_utf8_string_loc>
X<is_strict_utf8_string_loc>

Like C<L</is_strict_utf8_string>> but stores the location of the failure (in the
case of "utf8ness failure") or the location C<s>+C<len> (in the case of
"utf8ness success") in the C<ep> pointer.

See also C<L</is_strict_utf8_string_loclen>>.

=over 3

 bool  is_strict_utf8_string_loc(const U8 *s, STRLEN len,
                                 const U8 **ep)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_strict_utf8_string_loclen>
X<is_strict_utf8_string_loclen>

Like C<L</is_strict_utf8_string>> but stores the location of the failure (in the
case of "utf8ness failure") or the location C<s>+C<len> (in the case of
"utf8ness success") in the C<ep> pointer, and the number of UTF-8
encoded characters in the C<el> pointer.

See also C<L</is_strict_utf8_string_loc>>.

=over 3

 bool  is_strict_utf8_string_loclen(const U8 *s, STRLEN len,
                                    const U8 **ep, STRLEN *el)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<isUTF8_CHAR>
X<isUTF8_CHAR>

Evaluates to non-zero if the first few bytes of the string starting at C<s> and
looking no further than S<C<e - 1>> are well-formed UTF-8, as extended by Perl,
that represents some code point; otherwise it evaluates to 0.  If non-zero, the
value gives how many bytes starting at C<s> comprise the code point's
representation.  Any bytes remaining before C<e>, but beyond the ones needed to
form the first code point in C<s>, are not examined.

The code point can be any that will fit in an IV on this machine, using Perl's
extension to official UTF-8 to represent those higher than the Unicode maximum
of 0x10FFFF.  That means that this macro is used to efficiently decide if the
next few bytes in C<s> is legal UTF-8 for a single character.

Use C<L</isSTRICT_UTF8_CHAR>> to restrict the acceptable code points to those
defined by Unicode to be fully interchangeable across applications;
C<L</isC9_STRICT_UTF8_CHAR>> to use the L<Unicode Corrigendum
#9|http://www.unicode.org/versions/corrigendum9.html> definition of allowable
code points; and C<L</isUTF8_CHAR_flags>> for a more customized definition.

Use C<L</is_utf8_string>>, C<L</is_utf8_string_loc>>, and
C<L</is_utf8_string_loclen>> to check entire strings.

Note also that a UTF-8 "invariant" character (i.e. ASCII on non-EBCDIC
machines) is a valid UTF-8 character.

=over 3

 Size_t  isUTF8_CHAR(const U8 * const s0, const U8 * const e)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_utf8_char_buf>
X<is_utf8_char_buf>

This is identical to the macro L<perlapi/isUTF8_CHAR>.

=over 3

 STRLEN  is_utf8_char_buf(const U8 *buf, const U8 *buf_end)

=back

=back

=for hackers
Found in file mathoms.c

=over 4

=item C<isUTF8_CHAR_flags>
X<isUTF8_CHAR_flags>

Evaluates to non-zero if the first few bytes of the string starting at C<s> and
looking no further than S<C<e - 1>> are well-formed UTF-8, as extended by Perl,
that represents some code point, subject to the restrictions given by C<flags>;
otherwise it evaluates to 0.  If non-zero, the value gives how many bytes
starting at C<s> comprise the code point's representation.  Any bytes remaining
before C<e>, but beyond the ones needed to form the first code point in C<s>,
are not examined.

If C<flags> is 0, this gives the same results as C<L</isUTF8_CHAR>>;
if C<flags> is C<UTF8_DISALLOW_ILLEGAL_INTERCHANGE>, this gives the same results
as C<L</isSTRICT_UTF8_CHAR>>;
and if C<flags> is C<UTF8_DISALLOW_ILLEGAL_C9_INTERCHANGE>, this gives
the same results as C<L</isC9_STRICT_UTF8_CHAR>>.
Otherwise C<flags> may be any combination of the C<UTF8_DISALLOW_I<foo>> flags
understood by C<L</utf8n_to_uvchr>>, with the same meanings.

The three alternative macros are for the most commonly needed validations; they
are likely to run somewhat faster than this more general one, as they can be
inlined into your code.

Use L</is_utf8_string_flags>, L</is_utf8_string_loc_flags>, and
L</is_utf8_string_loclen_flags> to check entire strings.

=over 3

 Size_t  isUTF8_CHAR_flags(const U8 * const s0, const U8 * const e,
                           const U32 flags)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_utf8_fixed_width_buf_flags>
X<is_utf8_fixed_width_buf_flags>

Returns TRUE if the fixed-width buffer starting at C<s> with length C<len>
is entirely valid UTF-8, subject to the restrictions given by C<flags>;
otherwise it returns FALSE.

If C<flags> is 0, any well-formed UTF-8, as extended by Perl, is accepted
without restriction.  If the final few bytes of the buffer do not form a
complete code point, this will return TRUE anyway, provided that
C<L</is_utf8_valid_partial_char_flags>> returns TRUE for them.

If C<flags> in non-zero, it can be any combination of the
C<UTF8_DISALLOW_I<foo>> flags accepted by C<L</utf8n_to_uvchr>>, and with the
same meanings.

This function differs from C<L</is_utf8_string_flags>> only in that the latter
returns FALSE if the final few bytes of the string don't form a complete code
point.

=over 3

 bool  is_utf8_fixed_width_buf_flags(const U8 * const s,
                                     STRLEN len, const U32 flags)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_utf8_fixed_width_buf_loc_flags>
X<is_utf8_fixed_width_buf_loc_flags>

Like C<L</is_utf8_fixed_width_buf_flags>> but stores the location of the
failure in the C<ep> pointer.  If the function returns TRUE, C<*ep> will point
to the beginning of any partial character at the end of the buffer; if there is
no partial character C<*ep> will contain C<s>+C<len>.

See also C<L</is_utf8_fixed_width_buf_loclen_flags>>.

=over 3

 bool  is_utf8_fixed_width_buf_loc_flags(const U8 * const s,
                                         STRLEN len, const U8 **ep,
                                         const U32 flags)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_utf8_fixed_width_buf_loclen_flags>
X<is_utf8_fixed_width_buf_loclen_flags>

Like C<L</is_utf8_fixed_width_buf_loc_flags>> but stores the number of
complete, valid characters found in the C<el> pointer.

=over 3

 bool  is_utf8_fixed_width_buf_loclen_flags(const U8 * const s,
                                            STRLEN len,
                                            const U8 **ep,
                                            STRLEN *el,
                                            const U32 flags)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_utf8_invariant_string>
X<is_utf8_invariant_string>

Returns TRUE if the first C<len> bytes of the string C<s> are the same
regardless of the UTF-8 encoding of the string (or UTF-EBCDIC encoding on
EBCDIC machines); otherwise it returns FALSE.  That is, it returns TRUE if they
are UTF-8 invariant.  On ASCII-ish machines, all the ASCII characters and only
the ASCII characters fit this definition.  On EBCDIC machines, the ASCII-range
characters are invariant, but so also are the C1 controls.

If C<len> is 0, it will be calculated using C<strlen(s)>, (which means if you
use this option, that C<s> can't have embedded C<NUL> characters and has to
have a terminating C<NUL> byte).

See also
C<L</is_utf8_string>>,
C<L</is_utf8_string_flags>>,
C<L</is_utf8_string_loc>>,
C<L</is_utf8_string_loc_flags>>,
C<L</is_utf8_string_loclen>>,
C<L</is_utf8_string_loclen_flags>>,
C<L</is_utf8_fixed_width_buf_flags>>,
C<L</is_utf8_fixed_width_buf_loc_flags>>,
C<L</is_utf8_fixed_width_buf_loclen_flags>>,
C<L</is_strict_utf8_string>>,
C<L</is_strict_utf8_string_loc>>,
C<L</is_strict_utf8_string_loclen>>,
C<L</is_c9strict_utf8_string>>,
C<L</is_c9strict_utf8_string_loc>>,
and
C<L</is_c9strict_utf8_string_loclen>>.

=over 3

 bool  is_utf8_invariant_string(const U8 * const s, STRLEN len)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_utf8_invariant_string_loc>
X<is_utf8_invariant_string_loc>

Like C<L</is_utf8_invariant_string>> but upon failure, stores the location of
the first UTF-8 variant character in the C<ep> pointer; if all characters are
UTF-8 invariant, this function does not change the contents of C<*ep>.

=over 3

 bool  is_utf8_invariant_string_loc(const U8 * const s, STRLEN len,
                                    const U8 **ep)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_utf8_string>
X<is_utf8_string>

Returns TRUE if the first C<len> bytes of string C<s> form a valid
Perl-extended-UTF-8 string; returns FALSE otherwise.  If C<len> is 0, it will
be calculated using C<strlen(s)> (which means if you use this option, that C<s>
can't have embedded C<NUL> characters and has to have a terminating C<NUL>
byte).  Note that all characters being ASCII constitute 'a valid UTF-8 string'.

This function considers Perl's extended UTF-8 to be valid.  That means that
code points above Unicode, surrogates, and non-character code points are
considered valid by this function.  Use C<L</is_strict_utf8_string>>,
C<L</is_c9strict_utf8_string>>, or C<L</is_utf8_string_flags>> to restrict what
code points are considered valid.

See also
C<L</is_utf8_invariant_string>>,
C<L</is_utf8_invariant_string_loc>>,
C<L</is_utf8_string_loc>>,
C<L</is_utf8_string_loclen>>,
C<L</is_utf8_fixed_width_buf_flags>>,
C<L</is_utf8_fixed_width_buf_loc_flags>>,
C<L</is_utf8_fixed_width_buf_loclen_flags>>,

=over 3

 bool  is_utf8_string(const U8 *s, STRLEN len)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<is_utf8_string_flags>
X<is_utf8_string_flags>

Returns TRUE if the first C<len> bytes of string C<s> form a valid
UTF-8 string, subject to the restrictions imposed by C<flags>;
returns FALSE otherwise.  If C<len> is 0, it will be calculated
using C<strlen(s)> (which means if you use this option, that C<s> can't have
embedded C<NUL> characters and has to have a terminating C<NUL> byte).  Note
that all characters being ASCII constitute 'a valid UTF-8 string'.

If C<flags> is 0, this gives the same results as C<L</is_utf8_string>>; if
C<flags> is C<UTF8_DISALLOW_ILLEGAL_INTERCHANGE>, this gives the same results
as C<L</is_strict_utf8_string>>; and if C<flags> is
C<UTF8_DISALLOW_ILLEGAL_C9_INTERCHANGE>, this gives the same results as
C<L</is_c9strict_utf8_string>>.  Otherwise C<flags> may be any
