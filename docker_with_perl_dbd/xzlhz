A X<co–maintainers>person with permissions to index a B<namespace> in
B<PAUSE>. Anyone can upload any namespace, but only primary and
co-maintainers get their contributions indexed.

=item combining character

Any X<combining characters>X<characters, combining>character with the
General Category of Combining Mark (C<\p{GC=M}>), which may be spacing or
nonspacing. Some are even invisible. A sequence of combining characters
following a grapheme base character together make up a single user-visible
character called a B<grapheme>. Most but not all diacritics are combining
characters, and vice versa.

=item command

In B<shell> X<commands, defined>programming, the syntactic combination of a
program name and its arguments. More loosely, anything you type to a shell
(a command interpreter) that starts it doing something. Even more loosely, a
Perl B<statement>, which might start with a B<label> and typically ends with
a semicolon.

=item command buffering

A X<command buffering>X<buffering, command>mechanism in Perl that lets you
store up the output of each Perl B<command> and then flush it out as a
single request to the B<operating system>. It’s enabled by setting the C<$|>
(C<$AUTOFLUSH>) variable to a true value. It’s used when you don’t want data
sitting around, not going where it’s supposed to, which may happen because
the default on a B<file> or B<pipe> is to use B<block buffering>.

=item command-line arguments

The X<command–line arguments>B<X<arguments, command–line>values> you supply
along with a program name when you tell a B<shell> to execute a B<command>.
These values are passed to a Perl program through C<@ARGV>.

=item command name

The X<command names>name of the program currently executing, as typed on the
command line. In C, the B<command> name is passed to the program as the
first command-line argument. In Perl, it comes in separately as C<$0>.

=item comment

A X<comments, defined>remark that doesn’t affect the meaning of the program.
In Perl, a comment is introduced by a C<#> character and continues to the
end of the line.

=item compilation unit

The X<compilation units>B<file> (or B<string>, in the case of C<eval>) that
is currently being B<compiled>.

=item compile

The process of turning source code into a machine-usable form. See B<compile
phase>.

=item compile phase

Any X<compile phase, defined>time before Perl starts running your main
program. See also B<run phase>. Compile phase is mostly spent in B<compile
time>, but may also be spent in B<runtime> when C<BEGIN> blocks, C<use> or
C<no> declarations, or constant subexpressions are being evaluated. The
startup and import code of any C<use> declaration is also run during
compile phase.

=item compiler

Strictly X<compilers and compiling, about>speaking, a program that munches
up another program and spits out yet another file containing the program in
a “more executable” form, typically containing native machine instructions.
The I<perl> program is not a compiler by this definition, but it does
contain a kind of compiler that takes a program and turns it into a more
executable form (B<syntax trees>) within the I<perl> process itself, which
the B<interpreter> then interprets. There are, however, extension B<modules>
to get Perl to act more like a “real” compiler. See Camel chapter 16,
“Compiling”.

=item compile time

The X<compile time, defined>time when Perl is trying to make sense of your
code, as opposed to when it thinks it knows what your code means and is
merely trying to do what it thinks your code says to do, which is B<runtime>.

=item composer

A “constructor” X<composers, about>for a B<referent> that isn’t really an
B<object>, like an anonymous array or a hash (or a sonata, for that matter).
For example, a pair of braces acts as a composer for a hash, and a pair of
brackets acts as a composer for an array. See the section “Creating
References” in Camel chapter 8, “References”.

=item concatenation

The X<concatenating strings>X<strings, concatenating>process of gluing one
cat’s nose to another cat’s tail. Also a similar operation on two
B<strings>.

=item conditional

SomethingX<conditional (term)> “iffy”. See B<Boolean context>.

=item connection

In X<connections (term)>telephony, the temporary electrical circuit between
the caller’s and the callee’s phone. In networking, the same kind of
temporary circuit between a B<client> and a B<server>.

=item construct

As a X<constructs, defined>noun, a piece of syntax made up of smaller
pieces. As a transitive verb, to create an B<object> using a B<constructor>.

=item constructor

AnyX<constructors, defined> B<class method>, B<instance>, or B<subroutine>
that composes, initializes, blesses, and returns an B<object>. Sometimes we
use the term loosely to mean a B<composer>.

=item context

The X<context, about>surroundings or environment. The context given by the
surrounding code determines what kind of data a particular B<expression> is
expected to return. The three primary contexts are B<list context>,
B<scalar>, and B<void context>. Scalar context is sometimes subdivided into
B<Boolean context>, B<numeric context>, B<string context>, and B<void
context>. There’s also a “don’t care” context (which is dealt with in Camel
chapter 2, “Bits and Pieces”, if you care).

=item continuation

The X<continuation lines>treatment of more than one physical B<line> as a
single logical line. B<Makefile> lines are continued by putting a backslash
before the B<newline>. Mail headers, as defined by X<RFC 822>RFC 822, are
continued by putting a space or tab I<after> the newline. In general, lines
in Perl do not need any form of continuation mark, because B<whitespace>
(including newlines) is gleefully ignored. Usually.

=item core dump

The X<core dump>corpse of a B<process>, in the form of a file left in the
B<working directory> of the process, usually as a result of certain kinds
of fatal errors.

=item CPAN

The X<Comprehensive Perl Archive Network>X<CPAN (Comprehensive Perl Archive
Network), about>Comprehensive Perl Archive Network. (See the Camel Preface
and Camel chapter 19, “CPAN” for details.)

=item C preprocessor

The X<C preprocessor>typical C compiler’s first pass, which processes lines
beginning with C<#> for conditional compilation and macro definition, and
does various manipulations of the program text based on the current
definitions. Also known as I<cpp>(1).

=item cracker

Someone X<crackers>who breaks security on computer systems. A cracker may
be a true B<hacker> or only a B<script kiddie>.

=item currently selected output channel

The X<currently selected output channel>last B<filehandle> that was
designated with C<select(FILEHANDLE)>; C<STDOUT>, if no filehandle has
been selected.

=item current package

The B<package> X<current package>in which the current statement is
B<compiled>. Scan backward in the text of your program through the current
B<lexical scope> or any enclosing lexical scopes until you find a package
declaration. That’s your current package name.

=item current working directory

SeeX<current working directory> B<working directory>.

=item CV

In academia, a curriculum vitæ, a fancy kind of résumé. In Perl, an X<CV
(code value)>X<code value (CV)>internal “code value” typedef holding a
B<subroutine>. The C<CV> type is a subclass of B<SV>.

=back

=head2 D

=over 4

=item dangling statement

A bare, single B<X<dangling statements>X<statements, dangling>statement>,
without any braces, hanging off an C<if> or C<while> conditional. C allows
them. Perl doesn’t.

=item datagram

A packet of X<datagrams, defined>data, such as a B<UDP> message, that (from
the viewpoint of the programs involved) can be sent independently over the
network. (In fact, all packets are sent independently at the B<IP> level,
but B<stream> protocols such as B<TCP> hide this from your program.)

=item data structure

How your X<data structures, defined>various pieces of data relate to each
other and what shape they make when you put them all together, as in a
rectangular table or a triangular tree.

=item data type

A set of X<data types, defined>possible values, together with all the
operations that know how to deal with those values. For example, a numeric
data type has a certain set of numbers that you can work with, as well as
various mathematical operations that you can do on the numbers, but would
make little sense on, say, a string such as C<"Kilroy">. Strings have their
own operations, such as B<concatenation>. Compound types made of a number of
smaller pieces generally have operations to compose and decompose them, and
perhaps to rearrange them. B<Objects> that model things in the real world
often have operations that correspond to real activities. For instance, if
you model an elevator, your elevator object might have an C<open_door>
B<method>.

=item DBM

Stands for X<DBM (Database Management) routines>X<Database Management (DBM)
routines>“Database Management” routines, a set of routines that emulate an
B<associative array> using disk files. The routines use a dynamic hashing
scheme to locate any entry with only two disk accesses. DBM files allow a
Perl program to keep a persistent B<hash> across multiple invocations. You
can C<tie> your hash variables to various DBM implementations.

=item declaration

An B<assertion> X<declarations, defined>that states something exists and
perhaps describes what it’s like, without giving any commitment as to how
or where you’ll use it. A declaration is like the part of your recipe that
says, “two cups flour, one large egg, four or five tadpoles…” See
B<statement> for its opposite. Note that some declarations also function
as statements. Subroutine declarations also act as definitions if a body
is supplied.

=item declarator

Something X<declarators>that tells your program what sort of variable
you’d like. Perl doesn’t require you to declare variables, but you can use
C<my>, C<our>, or C<state> to denote that you want something other than
the default.

=item decrement

To X<decrementing values>X<values, decrementing>subtract a value from a
variable, as in “decrement C<$x>” (meaning to remove 1 from its value) or
“decrement C<$x> by 3”.

=item default

A B<value> X<default values>X<values, default>chosen for you if you don’t
supply a value of your own.

=item defined

Having a X<defined (term)>meaning. Perl thinks that some of the things
people try to do are devoid of meaning; in particular, making use of
variables that have never been given a B<value> and performing certain
operations on data that isn’t there. For example, if you try to read data
past the end of a file, Perl will hand you back an undefined value. See also
B<false> and the C<defined> entry in Camel chapter 27, “Functions”.

=item delimiter

A B<character> X<delimiters (term)>or B<string> that sets bounds to an
arbitrarily sized textual object, not to be confused with a B<separator> or
B<terminator>. “To delimit” really just means “to surround” or “to enclose”
(like these parentheses are doing).

=item dereference

A fancy X<dereference (term)>X<references, dereference>computer science term
meaning “to follow a B<reference> to what it points to”. The “de” part of it
refers to the fact that you’re taking away one level of B<indirection>.

=item derived class

A B<class> that X<derived classes>X<classes, derived>X<subclasses>X<classes,
subclasses>defines some of its B<methods> in terms of a more generic class,
called a B<base class>. Note that classes aren’t classified exclusively into
base classes or derived classes: a class can function as both a derived
class and a base class simultaneously, which is kind of classy.

=item descriptor

See B<file descriptor>.

=item destroy

To deallocate the X<destroy (term)>memory of a B<referent> (first triggering
its C<DESTROY> method, if it has one).

=item destructor

A special B<method> X<destructor method>X<methods, destructor>that is called
when an B<object> is thinking about B<destroying> itself. A Perl program’s
C<DESTROY> method doesn’t do the actual destruction; Perl just B<triggers>
the method in case the B<class> wants to do any associated cleanup.

=item device

A whiz-bang X<devices (term)>hardware gizmo (like a disk or tape drive or a
modem or a joystick or a mouse) attached to your computer, which the
B<operating system> tries to make look like a B<file> (or a bunch of files).
Under Unix, these fake files tend to live in the I</dev> directory.

=item directive

A B<pod> X<directives, defined>directive. See Camel chapter 23, “Plain Old
Documentation”.

=item directory

A special X<directories, defined>file that contains other files. Some
B<operating systems> call these “folders”, “drawers”, “catalogues”, or
“catalogs”.

=item directory handle

A name X<directory handle>that represents a particular instance of opening a
directory to read it, until you close it. See the C<opendir> function.

=item discipline

Some X<discipline (I/O layer)>people need this and some people avoid it.
For Perl, it’s an old way to say B<I/O layer>.

=item dispatch

To send X<dispatching>something to its correct destination. Often used
metaphorically to indicate a transfer of programmatic control to a
destination selected algorithmically, often by lookup in a table of function
B<references> or, in the case of object B<methods>, by traversing the
inheritance tree looking for the most specific definition for the method.

=item distribution

A standard, X<distributions, defined>bundled release of a system of
software. The default usage implies source code is included. If that is not
the case, it will be called a “binary-only” distribution.

=item dual-lived

Some X<dual–lived modules>X<modules, dual–lived>modules live both in the
B<Standard Library> and on B<CPAN>. These modules might be developed on two
tracks as people modify either version. The trend currently is to untangle
these situations.

=item dweomer

An enchantment, illusion, X<dweomer>phantasm, or jugglery. Said when Perl’s
magical B<dwimmer> effects don’t do what you expect, but rather seem to be
the product of arcane I<dweomercraft>, sorcery, or wonder working. [From
Middle English.]

=item dwimmer

DWIM X<DWIM (Do What I Mean) principle>X<Do What I Mean (DWIM) principle>is
an acronym for X<dwimming>“Do What I Mean”, the principle that something
should just do what you want it to do without an undue amount of fuss. A bit
of code that does “dwimming” is a “dwimmer”. Dwimming can require a great
deal of behind-the-scenes magic, which (if it doesn’t stay properly behind
the scenes) is called a B<dweomer> instead.

=item dynamic scoping

Dynamic X<dynamic scope>X<scopes, dynamic>scoping works over a B<dynamic
scope>, making variables visible throughout the rest of the B<block> in
which they are first used and in any B<subroutines> that are called by the
rest of the block. Dynamically scoped variables can have their values
temporarily changed (and implicitly restored later) by a C<local> operator.
(Compare B<lexical scoping>.) Used more loosely to mean how a subroutine
that is in the middle of calling another subroutine “contains” that
subroutine at B<runtime>.

=back

=head2 E

=over 4

=item eclectic

Derived X<eclectic (term)>from many sources. Some would say I<too> many.

=item element

A basic X<elements, about>building block. When you’re talking about an
B<array>, it’s one of the items that make up the array.

=item embedding

When X<embedding (term)>something is contained in something else,
particularly when that might be considered surprising: “I’ve embedded a
complete Perl interpreter in my editor!”

=item empty subclass test

The notion X<empty subclass test>that an empty B<derived class> should
behave exactly like its B<base class>.

=item encapsulation

The veil of X<encapsulation (term)>abstraction separating the B<interface>
from the B<implementation> (whether enforced or not), which mandates that
all access to an B<object>’s state be through B<methods> alone.

=item endian

See B<little-endian> and B<big-endian>.

=item en passant

When you X<en passant (term)>change a B<value> as it is being copied. [From
French “in passing”, as in the exotic pawn-capturing maneuver in chess.]

=item environment

The collectiveX<environment (term)> set of B<environment variables> your
B<process> inherits from its parent. Accessed via C<%ENV>.

=item environment variable

A mechanism X<environment variables>X<variables, environment>X<environment
variables>by which some high-level agent such as a user can pass its
preferences down to its future offspring (child B<processes>, grandchild
processes, great-grandchild processes, and so on). Each environment
variable is a B<key>/B<value> pair, like one entry in a B<hash>.

=item EOF

End of File. X<End of File (EOF)>X<EOF (End of File)>Sometimes used
metaphorically as the terminating string of a B<here document>.

=item errno

The X<errno (error number)>X<error number (errno)>error number returned by a
B<syscall> when it fails. Perl refers to the error by the name C<$!> (or
C<$OS_ERROR> if you use the English module).

=item error

See B<exception> or B<fatal error>.

=item escape sequence

See B<metasymbol>.

=item exception

A fancy term for an error. See B<fatal error>.

=item exception handling

The X<exception handling, defined>way a program responds to an error. The
exception-handling mechanism in Perl is the C<eval> operator.

=item exec

To X<exec function>throw away the current B<process>’s program and replace
it with another, without exiting the process or relinquishing any resources
held (apart from the old memory image).

=item executable file

A B<file> X<executable files>X<files, executable>that is specially marked to
tell the B<operating system> that it’s okay to run this file as a program.
Usually shortened to “executable”.

=item execute

To run X<execute (term)>a B<program> or B<subroutine>. (Has nothing to do
with the C<kill> built-in, unless you’re trying to run a B<signal handler>.)

=item execute bit

The X<execute bit>special mark that tells the operating system it can run
this program. There are actually three execute bits under Unix, and which
bit gets used depends on whether you own the file singularly, collectively,
or not at all.

=item exit status

See B<status>.

=item exploit

Used X<exploits, security>as a noun in this case, this refers to a known way
to compromise a program to get it to do something the author didn’t intend.
Your task is to write unexploitable programs.

=item export

To make X<exporting, defined>symbols from a B<module> available for
B<import> by other modules.

=item expression

Anything X<expressions, defined>X<expressions>you can legally say in a spot
where a B<value> is required. Typically composed of B<literals>,
B<variables>, B<operators>, B<functions>, and B<subroutine> calls, not
necessarily in that order.

=item extension

A Perl module X<extensions, defined>that also pulls in B<compiled> C or C++
code. More generally, any experimental option that can be B<compiled> into
Perl, such as multithreading.

=back

=head2 F

=over 4

=item false

In Perl, any value X<false values>X<values, false>that would look like C<"">
or C<"0"> if evaluated in a string context. Since undefined values evaluate
to C<"">, all undefined values are false, but not all false values are
undefined.

=item FAQ

Frequently Asked QuestionX<FAQ (Frequently Asked
Question)>X<Frequently Asked Question (FAQ)> (although not necessarily
frequently answered, especially if the answer appears in the Perl FAQ
shipped standard with Perl).

=item fatal error

An uncaught B<exception>, X<fatal errors>which causes termination of the
B<process> after printing a message on your B<standard error> stream. Errors
that happen inside an C<eval> are not fatal. Instead, the C<eval> terminates
after placing the exception message in the C<$@> (C<$EVAL_ERROR>) variable.
You can try to provoke a fatal error with the C<die> operator (known as
throwing or raising an exception), but this may be caught by a dynamically
enclosing C<eval>. If not caught, the C<die> becomes a fatal error.

=item feeping creaturism

A spoonerism X<feeping creaturism>X<creeping featurism>of “creeping
featurism”, noting the biological urge to add just one more feature to
a program.

=item field

A single X<fields (term)>piece of numeric or string data that is part of a
longer B<string>, B<record>, or B<line>. Variable-width fields are usually
split up by B<separators> (so use C<split> to extract the fields), while
fixed-width fields are usually at fixed positions (so use C<unpack>).
B<Instance variables> are also known as “fields”.

=item FIFO

First In, First Out.X<First In, First Out (FIFO)>X<FIFO (First In, First
Out)> See also B<LIFO>. Also a nickname for a B<named pipe>.

=item file

A named X<files, defined>collection of data, usually stored on disk in a
B<directory> in a B<filesystem>. Roughly like a document, if you’re into
office metaphors. In modern filesystems, you can actually give a file more
than one name. Some files have special properties, like directories and
devices.

=item file descriptor

The little X<file descriptors>X<descriptors, file>number the B<operating
system> uses to keep track of which opened B<file> you’re talking about.
Perl hides the file descriptor inside a B<standard I/O> stream and then
attaches the stream to a B<filehandle>.

=item fileglob

A “wildcard” X<fileglobs>match on B<filenames>. See the C<glob> function.

=item filehandle

An identifier X<filehandles, about>(not necessarily related to the real
name of a file) that represents a particular instance of opening a file,
until you close it. If you’re going to open and close several different
files in succession, it’s fine to open each of them with the same
filehandle, so you don’t have to write out separate code to process each
file.

=item filename

One name for a X<filenames, about>file. This name is listed in a
B<directory>. You can use it in an C<open> to tell the B<operating system>
exactly which file you want to open, and associate the file with a
B<filehandle>, which will carry the subsequent identity of that file in
your program, until you close it.

=item filesystem

A set X<filesystems, defined>of B<directories> and B<files> residing on a
partition of the disk. Sometimes known as a “partition”. You can change the
file’s name or even move a file around from directory to directory within a
filesystem without actually moving the file itself, at least under Unix.

=item file test operator

A built-in X<file test operators, about>unary operator that you use to
determine whether something is B<true> about a file, such as C<–o
$filename> to test whether you’re the owner of the file.

=item filter

A X<filters, defined>program designed to take a B<stream> of input and
transform it into a stream of output.

=item first-come

The X<first–come permissions>X<permissions, first–come>first B<PAUSE>
author to upload a B<namespace> automatically becomes the B<primary
maintainer> for that namespace. The “first come” permissions distinguish a
B<primary maintainer> who was assigned that role from one who received it
automatically.

=item flag

We X<flags (term)>tend to avoid this term because it means so many things.
It may mean a command-line B<switch> that takes no argument itself (such as
Perl’s C<–n> and C<–p> flags) or, less frequently, a single-bit indicator
(such as the C<O_CREAT> and C<O_EXCL> flags used in C<sysopen>). Sometimes
informally used to refer to certain regex modifiers.

=item floating point

A X<floating point methods>X<methods, floating point>method of storing
numbers in “scientific notation”, such that the precision of the number is
independent of its magnitude (the decimal point “floats”). Perl does its
numeric work with floating-point numbers (sometimes called “floats”) when
it can’t get away with using B<integers>. Floating-point numbers are mere
approximations of real numbers.

=item flush

The act of X<flushing buffers>X<buffers, flushing>emptying a B<buffer>,
often before it’s full.

=item FMTEYEWTK

Far More Than Everything You Ever Wanted To KnowX<FMTEYEWTK acronym>. An
exhaustive treatise on one narrow topic, something of a super-B<FAQ>. See
Tom for far more.

=item foldcase

The casemap X<foldcase (term)>used in Unicode when comparing or matching
without regard to case. Comparing lower-, title-, or uppercase are all
unreliable due to Unicode’s complex, one-to-many case mappings. Foldcase is
a B<lowercase> variant (using a partially decomposed B<normalization> form
for certain codepoints) created specifically to resolve this.

=item fork

To create a X<forking processes>X<processes, forking>child B<process>
identical to the parent process at its moment of conception, at least until
it gets ideas of its own. A thread with protected memory.

=item formal arguments

The X<formal arguments>X<arguments, formal>generic names by which a
B<subroutine> knows its B<arguments>. In many languages, formal arguments
are always given individual names; in Perl, the formal arguments are just
the elements of an array. The formal arguments to a Perl program are
C<$ARGV[0]>, C<$ARGV[1]>, and so on. Similarly, the formal arguments to a
Perl subroutine are C<$_[0]>, C<$_[1]>, and so on. You may give the
arguments individual names by assigning the values to a C<my> list. See
also B<actual arguments>.

=item format

A X<formats, defined>specification of how many spaces and digits and things
to put somewhere so that whatever you’re printing comes out nice and
pretty.

=item freely available

Means X<freely available (term)>you don’t have to pay money to get it, but
the copyright on it may still belong to someone else (like Larry).

=item freely redistributable

Means X<freely redistributable (term)>you’re not in legal trouble if you
give a bootleg copy of it to your friends and we find out about it. In
fact, we’d rather you gave a copy to all your friends.

=item freeware

Historically, X<freeware (term)>any software that you give away,
particularly if you make the source code available as well. Now often
called B<open source software>. Recently there has been a trend to use the
term in contradistinction to B<open source software>, to refer only to free
software released under the X<Free Software Foundation>Free Software
Foundation’s GPL (General Public License), but this is difficult to justify
etymologically.

=item function

Mathematically, X<functions, about>a mapping of each of a set of input
values to a particular output value. In computers, refers to a
B<subroutine> or B<operator> that returns a B<value>. It may or may not
have input values (called B<arguments>).

=item funny character

Someone X<funny characters>X<characters, funny>like Larry, or one of his
peculiar friends. Also refers to the strange prefixes that Perl requires as
noun markers on its variables.

=back

=head2 G

=over 4

=item garbage collection

A misnamed feature—X<garbage collection, defined>it should be called,
“expecting your mother to pick up after you”. Strictly speaking, Perl
doesn’t do this, but it relies on a reference-counting mechanism to keep
things tidy. However, we rarely speak strictly and will often refer to the
reference-counting scheme as a form of garbage collection. (If it’s any
comfort, when your interpreter exits, a “real” garbage collector runs to
make sure everything is cleaned up if you’ve been messy with circular
references and such.)

=item GID

Group ID—in Unix, X<GID (Group ID)>X<Group ID (GID)>the numeric group ID
that the B<operating system> uses to identify you and members of your
B<group>.

=item glob

Strictly, the X<glob (* character)>shell’s C<*> character, which will match
a “glob” of characters when you’re trying to generate a list of filenames.
Loosely, the act of using globs and similar symbols to do pattern matching.
See also B<fileglob> and B<typeglob>.

=item global

Something X<global (term)>you can see from anywhere, usually used of
B<variables> and B<subroutines> that are visible everywhere in your
program.  In Perl, only certain special variables are truly global—most
variables (and all subroutines) exist only in the current B<package>.
Global variables can be declared with C<our>. See “Global Declarations” in
Camel chapter 4, “Statements and Declarations”.

=item global destruction

The B<garbage X<global destruction>collection> of globals (and the running
of any associated object destructors) that takes place when a Perl
B<interpreter> is being shut down. Global destruction should not be
confused with the Apocalypse, except perhaps when it should.

=item glue language

A language X<glue language>such as Perl that is good at hooking things
together that weren’t intended to be hooked together.

=item granularity

The size of the X<granularity>pieces you’re dealing with, mentally
speaking.

=item grapheme

A graphene is X<graphemes, defined>an allotrope of carbon arranged in a
hexagonal crystal lattice one atom thick. A B<grapheme>, or more fully, a
I<grapheme cluster string> is a single user-visible B<character>, which may
in turn be several characters (B<codepoints>) long. For example, a carriage
return plus a line feed is a single grapheme but two characters, while a
“ȫ” is a single grapheme but one, two, or even three characters, depending
on B<normalization>.

=item greedy

A B<subpattern> X<greedy subpatterns>X<subpatterns, greedy>whose
B<quantifier> wants to match as many things as possible.

=item grep

Originally X<grep function>from the old Unix editor command for “Globally
search for a Regular Expression and Print it”, now used in the general
sense of any kind of search, especially text searches. Perl has a built-in
C<grep> function that searches a list for elements matching any given
criterion, whereas the B<grep>(1) program searches for lines matching a
B<regular expression> in one or more files.

=item group

A set of users X<groups, defined>of which you are a member. In some
operating systems (like Unix), you can give certain file access permissions
to other members of your group.

=item GV

An internal “glob value” X<GV (glob value)>X<glob value (GV)>typedef,
holding a B<typeglob>. The C<GV> type is a subclass of B<SV>.

=back

=head2 H

=over 4

=item hacker

Someone X<hackers>who is brilliantly persistent in solving technical
problems, whether these involve golfing, fighting orcs, or programming.
Hacker is a neutral term, morally speaking. Good hackers are not to be
confused with evil B<crackers> or clueless B<script kiddies>. If you
confuse them, we will presume that you are either evil or clueless.

=item handler

A B<subroutine> X<handlers, defined>or B<method> that Perl calls when your
program needs to respond to some internal event, such as a B<signal>, or an
encounter with an operator subject to B<operator overloading>. See also
B<callback>.

=item hard reference

A B<scalar> B<value> X<hard references, about>X<references, hard>containing
the actual address of a B<referent>, such that the referent’s B<reference>
count accounts for it. (Some hard references are held internally, such as
the implicit reference from one of a B<typeglob>’s variable slots to its
corresponding referent.) A hard reference is different from a B<symbolic
reference>.

=item hash

An unordered X<hashes, about>association of B<key>/B<value> X<key/value
pairs, about>pairs, stored such that you can easily use a string B<key> to
look up its associated data B<value>. This glossary is like a hash, where
the word to be defined is the key and the definition is the value. A hash
is also sometimes septisyllabically called an “associative array”, which is
a pretty good reason for simply calling it a “hash” instead.

=item hash table

A data X<hash tables>structure used internally by Perl for implementing
associative arrays (hashes) efficiently. See also B<bucket>.

=item header file

A file X<header files>X<files, header>containing certain required
definitions that you must include “ahead” of the rest of your program to do
certain obscure operations. A C header file has a I<.h> extension. Perl
doesn’t really have header files, though historically Perl has sometimes
used translated I<.h> files with a I<.ph> extension. See C<require> in
Camel chapter 27, “Functions”. (Header files have been superseded by the
B<module> mechanism.)

=item here document

So X<here documents>called because of a similar construct in B<shells> that
pretends that the B<lines> following the B<command> are a separate B<file>
to be fed to the command, up to some terminating string. In Perl, however,
it’s just a fancy form of quoting.

=item hexadecimal

A X<hexadecimals>number in base 16, “hex” for short. The digits for 10
through 15 are customarily represented by the letters C<a> through C<f>.
Hexadecimal constants in Perl start with C<0x>. See also the C<hex>
function in Camel chapter 27, “Functions”.

=item home directory

The X<home directory>X<directories, home>directory you are put into when
you log in. On a Unix system, the name is often placed into C<$ENV{HOME}>
or C<$ENV{LOGDIR}> by I<login>, but you can also find it with
C<(get>C<pwuid($E<lt>))[7]>. (Some platforms do not have a concept of a
home directory.)

=item host

The computer X<host computers>on which a program or other data resides.

=item hubris

Excessive pride, X<hubris quality>the sort of thing for which Zeus zaps
you.  Also the quality that makes you write (and maintain) programs that
other people won’t want to say bad things about. Hence, the third great
virtue of a programmer. See also B<laziness> and B<impatience>.

=item HV

Short for a “hash value” X<HV (hash value)>X<hash value (HV)>typedef, which
holds Perl’s internal representation of a hash. The C<HV> type is a
subclass of B<SV>.

=back

=head2 I

=over 4

=item identifier

A legally X<identifiers, defined>formed name for most anything in which a
computer program might be interested. Many languages (including Perl) allow
identifiers to start with an alphabetic character, and then contain
alphabetics and digits. Perl also allows connector punctuation like the
underscore character wherever it allows alphabetics. (Perl also has more
complicated names, like B<qualified> names.)

=item impatience

The anger X<impatience quality>you feel when the computer is being lazy.
This makes you write programs that don’t just react to your needs, but
actually anticipate them. Or at least that pretend to. Hence, the second
great virtue of a programmer. See also B<laziness> and B<hubris>.

=item implementation

How a X<implementation (term)>piece of code actually goes about doing its
job. Users of the code should not count on implementation details staying
the same unless they are part of the published B<interface>.

=item import

To gain X<import (term)>access to symbols that are exported from another
module. See C<use> in Camel chapter 27, “Functions”.

=item increment

To increase the X<incrementing values>X<values, incrementing>value of
something by 1 (or by some other number, if so specified).

=item indexing

In olden days, X<indexing (term)>the act of looking up a B<key> in an
actual index (such as a phone book). But now it's merely the act of using
any kind of key or position to find the corresponding B<value>, even if no
index is involved. Things have degenerated to the point that Perl’s
C<index> function merely locates the position (index) of one string in
another.

=item indirect filehandle

An B<expression> X<indirect filehandles>X<filehandles, indirect>that
evaluates to something that can be used as a B<filehandle>: a B<string>
(filehandle name), a B<typeglob>, a typeglob B<reference>, or a low-level
B<IO> object.

=item indirection

If something in a X<indirection (term)>program isn’t the value you’re
looking for but indicates where the value is, that’s indirection. This can
be done with either B<symbolic references> or B<hard>.

=item indirect object

In English grammar, X<indirect objects, defined>X<objects, indirect>a short
noun phrase between a verb and its direct object indicating the beneficiary
or recipient of the action. In Perl, C<print STDOUT "$foo\n";> can be
understood as “verb indirect-object object”, where C<STDOUT> is the
recipient of the C<print> action, and C<"$foo"> is the object being
printed.  Similarly, when invoking a B<method>, you might place the
invocant in the dative slot between the method and its arguments:

    $gollum = new Pathetic::Creature "Sméagol";
    give $gollum "Fisssssh!";
    give $gollum "Precious!";

=item indirect object slot

The syntactic X<indirect object slot>position falling between a method call
and its arguments when using the indirect object invocation syntax. (The
slot is distinguished by the absence of a comma between it and the next
argument.) C<STDERR> is in the indirect object slot here:

    print STDERR "Awake! Awake! Fear, Fire, Foes! Awake!\n";

=item infix

An B<operator> that X<infix operators>comes in between its B<operands>,
such as multiplication in C<24 * 7>.

=item inheritance

What you get from your X<inheritance, defined>ancestors, genetically or
otherwise. If you happen to be a B<class>, your ancestors are called B<base
classes> and your descendants are called B<derived classes>. See B<single
inheritance> and B<multiple inheritance>.
