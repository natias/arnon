This variable is read-only, and its value is dynamically scoped.

=item $POSTMATCH

=item $'
X<$'> X<$POSTMATCH> X<@->

The string following whatever was matched by the last successful
pattern match. (See L</Scoping Rules of Regex Variables>). Example:

    local $_ = 'abcdefghi';
    /def/;
    print "$`:$&:$'\n";       # prints abc:def:ghi

See L</Performance issues> above for the serious performance implications
of using this variable (even once) in your code.

This variable is read-only, and its value is dynamically scoped.

Mnemonic: C<'> often follows a quoted string.

=item ${^POSTMATCH}
X<${^POSTMATCH}>

It is only guaranteed to return a defined value when the pattern was
compiled or executed with the C</p> modifier.

This is similar to C<$'> (C<$POSTMATCH>) except that to use it you must
use the C</p> modifier when executing the pattern, and it does not incur
the performance penalty associated with that variable.

See L</Performance issues> above.

This variable was added in Perl v5.10.0.

This variable is read-only, and its value is dynamically scoped.

=item $LAST_PAREN_MATCH

=item $+
X<$+> X<$LAST_PAREN_MATCH>

The text matched by the highest used capture group of the last
successful search pattern. (See L</Scoping Rules of Regex Variables>).
It is logically equivalent to the highest
numbered capture variable (C<$1>, C<$2>, ...) which has a defined value.

This is useful if you don't know which one of a set of alternative patterns
matched.  For example:

    /Version: (.*)|Revision: (.*)/ && ($rev = $+);

This variable is read-only, and its value is dynamically scoped.

Mnemonic: be positive and forward looking.

=item $LAST_SUBMATCH_RESULT

=item $^N
X<$^N> X<$LAST_SUBMATCH_RESULT>

The text matched by the used group most-recently closed (i.e. the group
with the rightmost closing parenthesis) of the last successful match.
(See L</Scoping Rules of Regex Variables>).


This is subtly different from C<$+>. For example in

    "ab" =~ /^((.)(.))$/

we have

    $1,$^N   have the value "ab"
    $2       has  the value "a"
    $3,$+    have the value "b"

This is primarily used inside C<(?{...})> blocks for examining text
recently matched.  For example, to effectively capture text to a variable
(in addition to C<$1>, C<$2>, etc.), replace C<(...)> with

    (?:(...)(?{ $var = $^N }))

By setting and then using C<$var> in this way relieves you from having to
worry about exactly which numbered set of parentheses they are.

This variable is read-only, and its value is dynamically scoped.

This variable was added in Perl v5.8.0.

Mnemonic: the (possibly) Nested parenthesis that most recently closed.

=item @LAST_MATCH_END

=item @+
X<@+> X<@LAST_MATCH_END>

This array holds the offsets of the ends of the last successful
match and any matching capture buffers that the pattern contains.
(See L</Scoping Rules of Regex Variables>)

The number of elements it contains will be one more than the number
of capture buffers in the pattern, regardless of which capture buffers
actually matched. You can use this to determine how many capture
buffers there are in the pattern. (As opposed to C<@-> which may
have fewer elements.)

C<$+[0]> is the offset into the string of the end of the entire match.
This is the same value as what the C<pos> function returns when called
on the variable that was matched against. The I<n>th element of this
array holds the offset of the I<n>th submatch, so C<$+[1]> is the offset
past where C<$1> ends, C<$+[2]> the offset past where C<$2> ends, and so
on. You can use C<$#+> to determine how many subgroups were in the last
successful match. See the examples given for the C<@-> variable.

This variable is read-only, and its value is dynamically scoped.

This variable was added in Perl v5.6.0.

=item %{^CAPTURE}

=item %LAST_PAREN_MATCH

=item %+
X<%+> X<%LAST_PAREN_MATCH> X<%{^CAPTURE}>

Similar to C<@+>, the C<%+> hash allows access to the named capture
buffers, should they exist, in the last successful match in the
currently active dynamic scope. (See L</Scoping Rules of Regex Variables>).

For example, C<$+{foo}> is equivalent to C<$1> after the following match:

    'foo' =~ /(?<foo>foo)/;

The keys of the C<%+> hash list only the names of buffers that have
captured (and that are thus associated to defined values).

If multiple distinct capture groups have the same name, then
C<$+{NAME}> will refer to the leftmost defined group in the match.

The underlying behaviour of C<%+> is provided by the
L<Tie::Hash::NamedCapture> module.

B<Note:> C<%-> and C<%+> are tied views into a common internal hash
associated with the last successful regular expression.  Therefore mixing
iterative access to them via C<each> may have unpredictable results.
Likewise, if the last successful match changes, then the results may be
surprising.

This variable was added in Perl v5.10.0. The C<%{^CAPTURE}> alias was
added in 5.25.7.

This variable is read-only, and its value is dynamically scoped.

=item @LAST_MATCH_START

=item @-
X<@-> X<@LAST_MATCH_START>

This array holds the offsets of the beginnings of the last successful
match and any capture buffers it contains.
(See L</Scoping Rules of Regex Variables>).

The number of elements it contains will be one more than the number of
the highest capture buffers (also called a subgroup) that actually
matched something. (As opposed to C<@+> which may have more elements.)

C<$-[0]> is the offset of the start of the last successful match.
C<$-[I<n>]> is the offset of the start of the substring matched by
I<n>-th subpattern, or undef if the subpattern did not match.

Thus, after a match against C<$_>, C<$&> coincides with
C<substr $_, $-[0], $+[0] - $-[0]>.  Similarly, C<$I<n>> coincides
with C<substr $_, $-[n], $+[n] - $-[n]> if C<$-[n]> is defined, and
C<$+> coincides with C<substr $_, $-[$#-], $+[$#-] - $-[$#-]>.
One can use C<$#-> to find the last matched subgroup in the last
successful match.  Contrast with C<$#+>, the number of subgroups
in the regular expression.

C<$-[0]> is the offset into the string of the beginning of the
entire match.  The I<n>th element of this array holds the offset
of the I<n>th submatch, so C<$-[1]> is the offset where C<$1>
begins, C<$-[2]> the offset where C<$2> begins, and so on.

After a match against some variable C<$var>:

=over 5

=item C<$`> is the same as C<substr($var, 0, $-[0])>

=item C<$&> is the same as C<substr($var, $-[0], $+[0] - $-[0])>

=item C<$'> is the same as C<substr($var, $+[0])>

=item C<$1> is the same as C<substr($var, $-[1], $+[1] - $-[1])>

=item C<$2> is the same as C<substr($var, $-[2], $+[2] - $-[2])>

=item C<$3> is the same as C<substr($var, $-[3], $+[3] - $-[3])>

=back

This variable is read-only, and its value is dynamically scoped.

This variable was added in Perl v5.6.0.

=item %{^CAPTURE_ALL}
X<%{^CAPTURE_ALL}>

=item %-
X<%->

Similar to C<%+>, this variable allows access to the named capture
groups in the last successful match in the currently active dynamic
scope. (See L</Scoping Rules of Regex Variables>). To each capture group
name found in the regular expression, it associates a reference to an
array containing the list of values captured by all buffers with that
name (should there be several of them), in the order where they appear.

Here's an example:

    if ('1234' =~ /(?<A>1)(?<B>2)(?<A>3)(?<B>4)/) {
        foreach my $bufname (sort keys %-) {
            my $ary = $-{$bufname};
            foreach my $idx (0..$#$ary) {
                print "\$-{$bufname}[$idx] : ",
                      (defined($ary->[$idx])
                          ? "'$ary->[$idx]'"
                          : "undef"),
                      "\n";
            }
        }
    }

would print out:

    $-{A}[0] : '1'
    $-{A}[1] : '3'
    $-{B}[0] : '2'
    $-{B}[1] : '4'

The keys of the C<%-> hash correspond to all buffer names found in
the regular expression.

The behaviour of C<%-> is implemented via the
L<Tie::Hash::NamedCapture> module.

B<Note:> C<%-> and C<%+> are tied views into a common internal hash
associated with the last successful regular expression.  Therefore mixing
iterative access to them via C<each> may have unpredictable results.
Likewise, if the last successful match changes, then the results may be
surprising. See L</Scoping Rules of Regex Variables>.

This variable was added in Perl v5.10.0. The C<%{^CAPTURE_ALL}> alias was
added in 5.25.7.

This variable is read-only, and its value is dynamically scoped.

=item ${^LAST_SUCCESSFUL_PATTERN}

The last successful pattern that matched in the current scope.  The empty
pattern defaults to matching to this. For instance:

    if (m/foo/ || m/bar/) {
        s//BLAH/;
    }

and

    if (m/foo/ || m/bar/) {
        s/${^LAST_SUCCESSFUL_PATTERN}/BLAH/;
    }

are equivalent.

You can use this to debug which pattern matched last, or to match with it again.

Added in Perl 5.37.10.

=item $LAST_REGEXP_CODE_RESULT

=item $^R
X<$^R> X<$LAST_REGEXP_CODE_RESULT>

The result of evaluation of the last successful C<(?{ code })>
regular expression assertion (see L<perlre>).

This variable may be written to, and its value is scoped normally,
unlike most other regex variables.

This variable was added in Perl 5.005.

=item ${^RE_COMPILE_RECURSION_LIMIT}
X<${^RE_COMPILE_RECURSION_LIMIT}>

The current value giving the maximum number of open but unclosed
parenthetical groups there may be at any point during a regular
expression compilation.  The default is currently 1000 nested groups.
You may adjust it depending on your needs and the amount of memory
available.

This variable was added in Perl v5.30.0.

=item ${^RE_DEBUG_FLAGS}
X<${^RE_DEBUG_FLAGS}>

The current value of the regex debugging flags.  Set to 0 for no debug output
even when the C<re 'debug'> module is loaded.  See L<re> for details.

This variable was added in Perl v5.10.0.

=item ${^RE_TRIE_MAXBUF}
X<${^RE_TRIE_MAXBUF}>

Controls how certain regex optimisations are applied and how much memory they
utilize.  This value by default is 65536 which corresponds to a 512kB
temporary cache.  Set this to a higher value to trade
memory for speed when matching large alternations.  Set
it to a lower value if you want the optimisations to
be as conservative of memory as possible but still occur, and set it to a
negative value to prevent the optimisation and conserve the most memory.
Under normal situations this variable should be of no interest to you.

This variable was added in Perl v5.10.0.

=back

=head2 Variables related to filehandles

Variables that depend on the currently selected filehandle may be set
by calling an appropriate object method on the C<IO::Handle> object,
although this is less efficient than using the regular built-in
variables.  (Summary lines below for this contain the word HANDLE.)
First you must say

    use IO::Handle;

after which you may use either

    method HANDLE EXPR

or more safely,

    HANDLE->method(EXPR)

Each method returns the old value of the C<IO::Handle> attribute.  The
methods each take an optional EXPR, which, if supplied, specifies the
new value for the C<IO::Handle> attribute in question.  If not
supplied, most methods do nothing to the current value--except for
C<autoflush()>, which will assume a 1 for you, just to be different.

Because loading in the C<IO::Handle> class is an expensive operation,
you should learn how to use the regular built-in variables.

A few of these variables are considered "read-only".  This means that
if you try to assign to this variable, either directly or indirectly
through a reference, you'll raise a run-time exception.

You should be very careful when modifying the default values of most
special variables described in this document.  In most cases you want
to localize these variables before changing them, since if you don't,
the change may affect other modules which rely on the default values
of the special variables that you have changed.  This is one of the
correct ways to read the whole file at once:

    open my $fh, "<", "foo" or die $!;
    local $/; # enable localized slurp mode
    my $content = <$fh>;
    close $fh;

But the following code is quite bad:

    open my $fh, "<", "foo" or die $!;
    undef $/; # enable slurp mode
    my $content = <$fh>;
    close $fh;

since some other module, may want to read data from some file in the
default "line mode", so if the code we have just presented has been
executed, the global value of C<$/> is now changed for any other code
running inside the same Perl interpreter.

Usually when a variable is localized you want to make sure that this
change affects the shortest scope possible.  So unless you are already
inside some short C<{}> block, you should create one yourself.  For
example:

    my $content = '';
    open my $fh, "<", "foo" or die $!;
    {
        local $/;
        $content = <$fh>;
    }
    close $fh;

Here is an example of how your own code can go broken:

    for ( 1..3 ){
        $\ = "\r\n";
        nasty_break();
        print "$_";
    }

    sub nasty_break {
        $\ = "\f";
        # do something with $_
    }

You probably expect this code to print the equivalent of

    "1\r\n2\r\n3\r\n"

but instead you get:

    "1\f2\f3\f"

Why? Because C<nasty_break()> modifies C<$\> without localizing it
first.  The value you set in  C<nasty_break()> is still there when you
return.  The fix is to add C<local()> so the value doesn't leak out of
C<nasty_break()>:

    local $\ = "\f";

It's easy to notice the problem in such a short example, but in more
complicated code you are looking for trouble if you don't localize
changes to the special variables.

=over 8

=item $ARGV
X<$ARGV>

Contains the name of the current file when reading from C<< <> >>.

=item @ARGV
X<@ARGV>

The array C<@ARGV> contains the command-line arguments intended for
the script.  C<$#ARGV> is generally the number of arguments minus
one, because C<$ARGV[0]> is the first argument, I<not> the program's
command name itself.  See L</$0> for the command name.

=item ARGV
X<ARGV>

The special filehandle that iterates over command-line filenames in
C<@ARGV>.  Usually written as the null filehandle in the angle operator
C<< <> >>.  Note that currently C<ARGV> only has its magical effect
within the C<< <> >> operator; elsewhere it is just a plain filehandle
corresponding to the last file opened by C<< <> >>.  In particular,
passing C<\*ARGV> as a parameter to a function that expects a filehandle
may not cause your function to automatically read the contents of all the
files in C<@ARGV>.

=item ARGVOUT
X<ARGVOUT>

The special filehandle that points to the currently open output file
when doing edit-in-place processing with B<-i>.  Useful when you have
to do a lot of inserting and don't want to keep modifying C<$_>.  See
L<perlrun|perlrun/-i[extension]> for the B<-i> switch.

=item IO::Handle->output_field_separator( EXPR )

=item $OUTPUT_FIELD_SEPARATOR

=item $OFS

=item $,
X<$,> X<$OFS> X<$OUTPUT_FIELD_SEPARATOR>

The output field separator for the print operator.  If defined, this
value is printed between each of print's arguments.  Default is C<undef>.

You cannot call C<output_field_separator()> on a handle, only as a
static method.  See L<IO::Handle|IO::Handle>.

Mnemonic: what is printed when there is a "," in your print statement.

=item HANDLE->input_line_number( EXPR )

=item $INPUT_LINE_NUMBER

=item $NR

=item $.
X<$.> X<$NR> X<$INPUT_LINE_NUMBER> X<line number>

Current line number for the last filehandle accessed.

Each filehandle in Perl counts the number of lines that have been read
from it.  (Depending on the value of C<$/>, Perl's idea of what
constitutes a line may not match yours.)  When a line is read from a
filehandle (via C<readline()> or C<< <> >>), or when C<tell()> or
C<seek()> is called on it, C<$.> becomes an alias to the line counter
for that filehandle.

You can adjust the counter by assigning to C<$.>, but this will not
actually move the seek pointer.  I<Localizing C<$.> will not localize
the filehandle's line count>.  Instead, it will localize perl's notion
of which filehandle C<$.> is currently aliased to.

C<$.> is reset when the filehandle is closed, but B<not> when an open
filehandle is reopened without an intervening C<close()>.  For more
details, see L<perlop/"IE<sol>O Operators">.  Because C<< <> >> never does
an explicit close, line numbers increase across C<ARGV> files (but see
examples in L<perlfunc/eof>).

You can also use C<< HANDLE->input_line_number(EXPR) >> to access the
line counter for a given filehandle without having to worry about
which handle you last accessed.

Mnemonic: many programs use "." to mean the current line number.

=item IO::Handle->input_record_separator( EXPR )

=item $INPUT_RECORD_SEPARATOR

=item $RS

=item $/
X<$/> X<$RS> X<$INPUT_RECORD_SEPARATOR>

The input record separator, newline by default.  This influences Perl's
idea of what a "line" is.  Works like B<awk>'s RS variable, including
treating empty lines as a terminator if set to the null string (an
empty line cannot contain any spaces or tabs).  You may set it to a
multi-character string to match a multi-character terminator, or to
C<undef> to read through the end of file.  Setting it to C<"\n\n">
means something slightly different than setting to C<"">, if the file
contains consecutive empty lines.  Setting to C<""> will treat two or
more consecutive empty lines as a single empty line.  Setting to
C<"\n\n"> will blindly assume that the next input character belongs to
the next paragraph, even if it's a newline.

    local $/;           # enable "slurp" mode
    local $_ = <FH>;    # whole file now here
    s/\n[ \t]+/ /g;

Remember: the value of C<$/> is a string, not a regex.  B<awk> has to
be better for something. :-)

Setting C<$/> to an empty string -- the so-called I<paragraph mode> -- merits
special attention.  When C<$/> is set to C<""> and the entire file is read in
with that setting, any sequence of one or more consecutive newlines at the
beginning of the file is discarded.  With the exception of the final record in
the file, each sequence of characters ending in two or more newlines is
treated as one record and is read in to end in exactly two newlines.  If the
last record in the file ends in zero or one consecutive newlines, that record
is read in with that number of newlines.  If the last record ends in two or
more consecutive newlines, it is read in with two newlines like all preceding
records.

Suppose we wrote the following string to a file:

    my $string = "\n\n\n";
    $string .= "alpha beta\ngamma delta\n\n\n";
    $string .= "epsilon zeta eta\n\n";
    $string .= "theta\n";

    my $file = 'simple_file.txt';
    open my $OUT, '>', $file or die;
    print $OUT $string;
    close $OUT or die;

Now we read that file in paragraph mode:

    local $/ = ""; # paragraph mode
    open my $IN, '<', $file or die;
    my @records = <$IN>;
    close $IN or die;

C<@records> will consist of these 3 strings:

    (
      "alpha beta\ngamma delta\n\n",
      "epsilon zeta eta\n\n",
      "theta\n",
    )

Setting C<$/> to a reference to an integer, scalar containing an
integer, or scalar that's convertible to an integer will attempt to
read records instead of lines, with the maximum record size being the
referenced integer number of characters.  So this:

    local $/ = \32768; # or \"32768", or \$var_containing_32768
    open my $fh, "<", $myfile or die $!;
    local $_ = <$fh>;

will read a record of no more than 32768 characters from $fh.  If you're
not reading from a record-oriented file (or your OS doesn't have
record-oriented files), then you'll likely get a full chunk of data
with every read.  If a record is larger than the record size you've
set, you'll get the record back in pieces.  Trying to set the record
size to zero or less is deprecated and will cause $/ to have the value
of "undef", which will cause reading in the (rest of the) whole file.

As of 5.19.9 setting C<$/> to any other form of reference will throw a
fatal exception. This is in preparation for supporting new ways to set
C<$/> in the future.

On VMS only, record reads bypass PerlIO layers and any associated
buffering, so you must not mix record and non-record reads on the
same filehandle.  Record mode mixes with line mode only when the
same buffering layer is in use for both modes.

You cannot call C<input_record_separator()> on a handle, only as a
static method.  See L<IO::Handle|IO::Handle>.

See also L<perlport/"Newlines">.  Also see L</$.>.

Mnemonic: / delimits line boundaries when quoting poetry.

=item IO::Handle->output_record_separator( EXPR )

=item $OUTPUT_RECORD_SEPARATOR

=item $ORS

=item $\
X<$\> X<$ORS> X<$OUTPUT_RECORD_SEPARATOR>

The output record separator for the print operator.  If defined, this
value is printed after the last of print's arguments.  Default is C<undef>.

You cannot call C<output_record_separator()> on a handle, only as a
static method.  See L<IO::Handle|IO::Handle>.

Mnemonic: you set C<$\> instead of adding "\n" at the end of the print.
Also, it's just like C<$/>, but it's what you get "back" from Perl.

=item HANDLE->autoflush( EXPR )

=item $OUTPUT_AUTOFLUSH

=item $|
X<$|> X<autoflush> X<flush> X<$OUTPUT_AUTOFLUSH>

If set to nonzero, forces a flush right away and after every write or
print on the currently selected output channel.  Default is 0
(regardless of whether the channel is really buffered by the system or
not; C<$|> tells you only whether you've asked Perl explicitly to
flush after each write).  STDOUT will typically be line buffered if
output is to the terminal and block buffered otherwise.  Setting this
variable is useful primarily when you are outputting to a pipe or
socket, such as when you are running a Perl program under B<rsh> and
want to see the output as it's happening.  This has no effect on input
buffering.  See L<perlfunc/getc> for that.  See L<perlfunc/select> on
how to select the output channel.  See also L<IO::Handle>.

Mnemonic: when you want your pipes to be piping hot.

=item ${^LAST_FH}
X<${^LAST_FH}>

This read-only variable contains a reference to the last-read filehandle.
This is set by C<< <HANDLE> >>, C<readline>, C<tell>, C<eof> and C<seek>.
This is the same handle that C<$.> and C<tell> and C<eof> without arguments
use.  It is also the handle used when Perl appends ", <STDIN> line 1" to
an error or warning message.

This variable was added in Perl v5.18.0.

=back

=head3 Variables related to formats

The special variables for formats are a subset of those for
filehandles.  See L<perlform> for more information about Perl's
formats.

=over 8

=item $ACCUMULATOR

=item $^A
X<$^A> X<$ACCUMULATOR>

The current value of the C<write()> accumulator for C<format()> lines.
A format contains C<formline()> calls that put their result into
C<$^A>.  After calling its format, C<write()> prints out the contents
of C<$^A> and empties.  So you never really see the contents of C<$^A>
unless you call C<formline()> yourself and then look at it.  See
L<perlform> and L<perlfunc/"formline PICTURE,LIST">.

=item IO::Handle->format_formfeed(EXPR)

=item $FORMAT_FORMFEED

=item $^L
X<$^L> X<$FORMAT_FORMFEED>

What formats output as a form feed.  The default is C<\f>.

You cannot call C<format_formfeed()> on a handle, only as a static
method.  See L<IO::Handle|IO::Handle>.

=item HANDLE->format_page_number(EXPR)

=item $FORMAT_PAGE_NUMBER

=item $%
X<$%> X<$FORMAT_PAGE_NUMBER>

The current page number of the currently selected output channel.

Mnemonic: C<%> is page number in B<nroff>.

=item HANDLE->format_lines_left(EXPR)

=item $FORMAT_LINES_LEFT

=item $-
X<$-> X<$FORMAT_LINES_LEFT>

The number of lines left on the page of the currently selected output
channel.

Mnemonic: lines_on_page - lines_printed.

=item IO::Handle->format_line_break_characters EXPR

=item $FORMAT_LINE_BREAK_CHARACTERS

=item $:
X<$:> X<FORMAT_LINE_BREAK_CHARACTERS>

The current set of characters after which a string may be broken to
fill continuation fields (starting with C<^>) in a format.  The default is
S<" \n-">, to break on a space, newline, or a hyphen.

You cannot call C<format_line_break_characters()> on a handle, only as
a static method.  See L<IO::Handle|IO::Handle>.

Mnemonic: a "colon" in poetry is a part of a line.

=item HANDLE->format_lines_per_page(EXPR)

=item $FORMAT_LINES_PER_PAGE

=item $=
X<$=> X<$FORMAT_LINES_PER_PAGE>

The current page length (printable lines) of the currently selected
output channel.  The default is 60.

Mnemonic: = has horizontal lines.

=item HANDLE->format_top_name(EXPR)

=item $FORMAT_TOP_NAME

=item $^
X<$^> X<$FORMAT_TOP_NAME>

The name of the current top-of-page format for the currently selected
output channel.  The default is the name of the filehandle with C<_TOP>
appended.  For example, the default format top name for the C<STDOUT>
filehandle is C<STDOUT_TOP>.

Mnemonic: points to top of page.

=item HANDLE->format_name(EXPR)

=item $FORMAT_NAME

=item $~
X<$~> X<$FORMAT_NAME>

The name of the current report format for the currently selected
output channel.  The default format name is the same as the filehandle
name.  For example, the default format name for the C<STDOUT>
filehandle is just C<STDOUT>.

Mnemonic: brother to C<$^>.

=back

=head2 Error Variables
X<error> X<exception>

The variables C<$@>, C<$!>, C<$^E>, and C<$?> contain information
about different types of error conditions that may appear during
execution of a Perl program.  The variables are shown ordered by
the "distance" between the subsystem which reported the error and
the Perl process.  They correspond to errors detected by the Perl
interpreter, C library, operating system, or an external program,
respectively.

To illustrate the differences between these variables, consider the
following Perl expression, which uses a single-quoted string.  After
execution of this statement, perl may have set all four special error
variables:

    eval q{
        open my $pipe, "/cdrom/install |" or die $!;
        my @res = <$pipe>;
        close $pipe or die "bad pipe: $?, $!";
    };

When perl executes the C<eval()> expression, it translates the
C<open()>, C<< <PIPE> >>, and C<close> calls in the C run-time library
and thence to the operating system kernel.  perl sets C<$!> to
the C library's C<errno> if one of these calls fails.

C<$@> is set if the string to be C<eval>-ed did not compile (this may
happen if C<open> or C<close> were imported with bad prototypes), or
if Perl code executed during evaluation C<die()>d.  In these cases the
value of C<$@> is the compile error, or the argument to C<die> (which
will interpolate C<$!> and C<$?>).  (See also L<Fatal>, though.)

Under a few operating systems, C<$^E> may contain a more verbose error
indicator, such as in this case, "CDROM tray not closed."  Systems that
do not support extended error messages leave C<$^E> the same as C<$!>.

Finally, C<$?> may be set to a non-0 value if the external program
F</cdrom/install> fails.  The upper eight bits reflect specific error
conditions encountered by the program (the program's C<exit()> value).
The lower eight bits reflect mode of failure, like signal death and
core dump information.  See L<wait(2)> for details.  In contrast to
C<$!> and C<$^E>, which are set only if an error condition is detected,
the variable C<$?> is set on each C<wait> or pipe C<close>,
overwriting the old value.  This is more like C<$@>, which on every
C<eval()> is always set on failure and cleared on success.

For more details, see the individual descriptions at C<$@>, C<$!>,
C<$^E>, and C<$?>.

=over 8

=item ${^CHILD_ERROR_NATIVE}
X<$^CHILD_ERROR_NATIVE>

The native status returned by the last pipe close, backtick (C<``>)
command, successful call to C<wait()> or C<waitpid()>, or from the
C<system()> operator.  On POSIX-like systems this value can be decoded
with the WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WIFSTOPPED, and
WSTOPSIG functions provided by the L<POSIX> module.

Under VMS this reflects the actual VMS exit status; i.e. it is the
same as C<$?> when the pragma C<use vmsish 'status'> is in effect.

This variable was added in Perl v5.10.0.

=item $EXTENDED_OS_ERROR

=item $^E
X<$^E> X<$EXTENDED_OS_ERROR>

Error information specific to the current operating system.  At the
moment, this differs from C<L</$!>> under only VMS, OS/2, and Win32 (and
for MacPerl).  On all other platforms, C<$^E> is always just the same
as C<$!>.

Under VMS, C<$^E> provides the VMS status value from the last system
error.  This is more specific information about the last system error
than that provided by C<$!>.  This is particularly important when C<$!>
is set to B<EVMSERR>.

Under OS/2, C<$^E> is set to the error code of the last call to OS/2
API either via CRT, or directly from perl.

Under Win32, C<$^E> always returns the last error information reported
by the Win32 call C<GetLastError()> which describes the last error
from within the Win32 API.  Most Win32-specific code will report errors
via C<$^E>.  ANSI C and Unix-like calls set C<errno> and so most
portable Perl code will report errors via C<$!>.

Caveats mentioned in the description of C<L</$!>> generally apply to
C<$^E>, also.

This variable was added in Perl 5.003.

Mnemonic: Extra error explanation.

=item $EXCEPTIONS_BEING_CAUGHT

=item $^S
X<$^S> X<$EXCEPTIONS_BEING_CAUGHT>

Current state of the interpreter.

    $^S         State
    ---------   -------------------------------------
    undef       Parsing module, eval, or main program
    true (1)    Executing an eval or try block
    false (0)   Otherwise

The first state may happen in C<$SIG{__DIE__}> and C<$SIG{__WARN__}>
handlers.

The English name $EXCEPTIONS_BEING_CAUGHT is slightly misleading, because
the C<undef> value does not indicate whether exceptions are being caught,
since compilation of the main program does not catch exceptions.

This variable was added in Perl 5.004.

=item $WARNING

=item $^W
X<$^W> X<$WARNING>

The current value of the warning switch, initially true if B<-w> was
used, false otherwise, but directly modifiable.

See also L<warnings>.

Mnemonic: related to the B<-w> switch.

=item ${^WARNING_BITS}
X<${^WARNING_BITS}>

The current set of warning checks enabled by the C<use warnings> pragma.
It has the same scoping as the C<$^H> and C<%^H> variables.  The exact
values are considered internal to the L<warnings> pragma and may change
between versions of Perl.

Each time a statement completes being compiled, the current value of
C<${^WARNING_BITS}> is stored with that statement, and can later be
retrieved via C<(caller($level))[9]>.

This variable was added in Perl v5.6.0.

=item $OS_ERROR

=item $ERRNO

=item $!
X<$!> X<$ERRNO> X<$OS_ERROR>

When referenced, C<$!> retrieves the current value
of the C C<errno> integer variable.
If C<$!> is assigned a numerical value, that value is stored in C<errno>.
When referenced as a string, C<$!> yields the system error string
corresponding to C<errno>.

Many system or library calls set C<errno> if they fail,
to indicate the cause of failure.  They usually do B<not>
set C<errno> to zero if they succeed and may set C<errno> to a
non-zero value on success.  This means C<errno>, hence C<$!>, is
meaningful only I<immediately> after a B<failure>:

    if (open my $fh, "<", $filename) {
        # Here $! is meaningless.
        ...
    }
    else {
        # ONLY here is $! meaningful.
        ...
        # Already here $! might be meaningless.
    }
    # Since here we might have either success or failure,
    # $! is meaningless.

Here, I<meaningless> means that C<$!> may be unrelated to the outcome
of the C<open()> operator.  Assignment to C<$!> is similarly ephemeral.
It can be used immediately before invoking the C<die()> operator,
to set the exit value, or to inspect the system error string
corresponding to error I<n>, or to restore C<$!> to a meaningful state.

Perl itself may set C<errno> to a non-zero on failure even if no
system call is performed.

Mnemonic: What just went bang?

=item %OS_ERROR

=item %ERRNO

=item %!
X<%!> X<%OS_ERROR> X<%ERRNO>

Each element of C<%!> has a true value only if C<$!> is set to that
value.  For example, C<$!{ENOENT}> is true if and only if the current
value of C<$!> is C<ENOENT>; that is, if the most recent error was "No
such file or directory" (or its moral equivalent: not all operating
systems give that exact error, and certainly not all languages).  The
specific true value is not guaranteed, but in the past has generally
been the numeric value of C<$!>.  To check if a particular key is
meaningful on your system, use C<exists $!{the_key}>; for a list of legal
keys, use C<keys %!>.  See L<Errno> for more information, and also see
L</$!>.

This variable was added in Perl 5.005.

=item $CHILD_ERROR

=item $?
X<$?> X<$CHILD_ERROR>

The status returned by the last pipe close, backtick (C<``>) command,
successful call to C<wait()> or C<waitpid()>, or from the C<system()>
operator.  This is just the 16-bit status word returned by the
traditional Unix C<wait()> system call (or else is made up to look
like it).  Thus, the exit value of the subprocess is really (C<<< $? >>
8 >>>), and C<$? & 127> gives which signal, if any, the process died
from, and C<$? & 128> reports whether there was a core dump.

Additionally, if the C<h_errno> variable is supported in C, its value
is returned via C<$?> if any C<gethost*()> function fails.

