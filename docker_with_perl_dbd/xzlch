enhance security.  Please read that section.

=head2 C<Storable> security warning in documentation

The documentation for C<Storable> now includes a section which warns readers
of the danger of accepting Storable documents from untrusted sources. The
short version is that deserializing certain types of data can lead to loading
modules and other code execution. This is documented behavior and wanted
behavior, but this opens an attack vector for malicious entities.

=head2 C<Locale::Maketext> allowed code injection via a malicious template

If users could provide a translation string to Locale::Maketext, this could be
used to invoke arbitrary Perl subroutines available in the current process.

This has been fixed, but it is still possible to invoke any method provided by
C<Locale::Maketext> itself or a subclass that you are using. One of these
methods in turn will invoke the Perl core's C<sprintf> subroutine.

In summary, allowing users to provide translation strings without auditing
them is a bad idea.

This vulnerability is documented in CVE-2012-6329.

=head2 Avoid calling memset with a negative count

Poorly written perl code that allows an attacker to specify the count to perl's
C<x> string repeat operator can already cause a memory exhaustion
denial-of-service attack. A flaw in versions of perl before v5.15.5 can escalate
that into a heap buffer overrun; coupled with versions of glibc before 2.16, it
possibly allows the execution of arbitrary code.

The flaw addressed to this commit has been assigned identifier CVE-2012-5195
and was researched by Tim Brown.

=head1 Incompatible Changes

=head2 See also: hash overhaul

Some of the changes in the L<hash overhaul|/"Hash overhaul"> are not fully
compatible with previous versions of perl.  Please read that section.

=head2 An unknown character name in C<\N{...}> is now a syntax error

Previously, it warned, and the Unicode REPLACEMENT CHARACTER was
substituted.  Unicode now recommends that this situation be a syntax
error.  Also, the previous behavior led to some confusing warnings and
behaviors, and since the REPLACEMENT CHARACTER has no use other than as
a stand-in for some unknown character, any code that has this problem is
buggy.

=head2 Formerly deprecated characters in C<\N{}> character name aliases are now errors

Since v5.12.0, it has been deprecated to use certain characters in
user-defined C<\N{...}> character names.  These now cause a syntax
error.  For example, it is now an error to begin a name with a digit,
such as in

 my $undraftable = "\N{4F}";    # Syntax error!

or to have commas anywhere in the name.  See L<charnames/CUSTOM ALIASES>.

=head2 C<\N{BELL}> now refers to U+1F514 instead of U+0007

Unicode 6.0 reused the name "BELL" for a different code point than it
traditionally had meant.  Since Perl v5.14, use of this name still
referred to U+0007, but would raise a deprecation warning.  Now, "BELL"
refers to U+1F514, and the name for U+0007 is "ALERT".  All the
functions in L<charnames> have been correspondingly updated.

=head2 New Restrictions in Multi-Character Case-Insensitive Matching in Regular Expression Bracketed Character Classes

Unicode has now withdrawn their previous recommendation for regular
expressions to automatically handle cases where a single character can
match multiple characters case-insensitively, for example, the letter
LATIN SMALL LETTER SHARP S and the sequence C<ss>.  This is because
it turns out to be impracticable to do this correctly in all
circumstances.  Because Perl has tried to do this as best it can, it
will continue to do so.  (We are considering an option to turn it off.)
However, a new restriction is being added on such matches when they
occur in [bracketed] character classes.  People were specifying
things such as C</[\0-\xff]/i>, and being surprised that it matches the
two character sequence C<ss> (since LATIN SMALL LETTER SHARP S occurs in
this range).  This behavior is also inconsistent with using a
property instead of a range:  C<\p{Block=Latin1}> also includes LATIN
SMALL LETTER SHARP S, but C</[\p{Block=Latin1}]/i> does not match C<ss>.
The new rule is that for there to be a multi-character case-insensitive
match within a bracketed character class, the character must be
explicitly listed, and not as an end point of a range.  This more
closely obeys the Principle of Least Astonishment.  See
L<perlrecharclass/Bracketed Character Classes>.  Note that a bug [perl
#89774], now fixed as part of this change, prevented the previous
behavior from working fully.

=head2 Explicit rules for variable names and identifiers

Due to an oversight, single character variable names in v5.16 were
completely unrestricted.  This opened the door to several kinds of
insanity.  As of v5.18, these now follow the rules of other identifiers,
in addition to accepting characters that match the C<\p{POSIX_Punct}>
property.

There is no longer any difference in the parsing of identifiers
specified by using braces versus without braces.  For instance, perl
used to allow C<${foo:bar}> (with a single colon) but not C<$foo:bar>.
Now that both are handled by a single code path, they are both treated
the same way: both are forbidden.  Note that this change is about the
range of permissible literal identifiers, not other expressions.

=head2 Vertical tabs are now whitespace

No one could recall why C<\s> didn't match C<\cK>, the vertical tab.
Now it does.  Given the extreme rarity of that character, very little
breakage is expected.  That said, here's what it means:

C<\s> in a regex now matches a vertical tab in all circumstances.

Literal vertical tabs in a regex literal are ignored when the C</x>
modifier is used.

Leading vertical tabs, alone or mixed with other whitespace, are now
ignored when interpreting a string as a number.  For example:

  $dec = " \cK \t 123";
  $hex = " \cK \t 0xF";

  say 0 + $dec;   # was 0 with warning, now 123
  say int $dec;   # was 0, now 123
  say oct $hex;   # was 0, now  15

=head2 C</(?{})/> and C</(??{})/> have been heavily reworked

The implementation of this feature has been almost completely rewritten.
Although its main intent is to fix bugs, some behaviors, especially
related to the scope of lexical variables, will have changed.  This is
described more fully in the L</Selected Bug Fixes> section.

=head2 Stricter parsing of substitution replacement

It is no longer possible to abuse the way the parser parses C<s///e> like
this:

    %_=(_,"Just another ");
    $_="Perl hacker,\n";
    s//_}->{_/e;print

=head2 C<given> now aliases the global C<$_>

Instead of assigning to an implicit lexical C<$_>, C<given> now makes the
global C<$_> an alias for its argument, just like C<foreach>.  However, it
still uses lexical C<$_> if there is lexical C<$_> in scope (again, just like
C<foreach>) [perl #114020].

=head2 The smartmatch family of features are now experimental

Smart match, added in v5.10.0 and significantly revised in v5.10.1, has been
a regular point of complaint.  Although there are a number of ways in which
it is useful, it has also proven problematic and confusing for both users and
implementors of Perl.  There have been a number of proposals on how to best
address the problem.  It is clear that smartmatch is almost certainly either
going to change or go away in the future.  Relying on its current behavior
is not recommended.

Warnings will now be issued when the parser sees C<~~>, C<given>, or C<when>.
To disable these warnings, you can add this line to the appropriate scope:

  no if $] >= 5.018, warnings => "experimental::smartmatch";

Consider, though, replacing the use of these features, as they may change
behavior again before becoming stable.

=head2 Lexical C<$_> is now experimental

Since it was introduced in Perl v5.10, it has caused much confusion with no
obvious solution:

=over

=item *

Various modules (e.g., List::Util) expect callback routines to use the
global C<$_>.  C<use List::Util 'first'; my $_; first { $_ == 1 } @list>
does not work as one would expect.

=item *

A C<my $_> declaration earlier in the same file can cause confusing closure
warnings.

=item *

The "_" subroutine prototype character allows called subroutines to access
your lexical C<$_>, so it is not really private after all.

=item *

Nevertheless, subroutines with a "(@)" prototype and methods cannot access
the caller's lexical C<$_>, unless they are written in XS.

=item *

But even XS routines cannot access a lexical C<$_> declared, not in the
calling subroutine, but in an outer scope, iff that subroutine happened not
to mention C<$_> or use any operators that default to C<$_>.

=back

It is our hope that lexical C<$_> can be rehabilitated, but this may
cause changes in its behavior.  Please use it with caution until it
becomes stable.

=head2 readline() with C<$/ = \N> now reads N characters, not N bytes

Previously, when reading from a stream with I/O layers such as
C<encoding>, the readline() function, otherwise known as the C<< <> >>
operator, would read I<N> bytes from the top-most layer. [perl #79960]

Now, I<N> characters are read instead.

There is no change in behaviour when reading from streams with no
extra layers, since bytes map exactly to characters.

=head2 Overridden C<glob> is now passed one argument

C<glob> overrides used to be passed a magical undocumented second argument
that identified the caller.  Nothing on CPAN was using this, and it got in
the way of a bug fix, so it was removed.  If you really need to identify
the caller, see L<Devel::Callsite> on CPAN.

=head2 Here doc parsing

The body of a here document inside a quote-like operator now always begins
on the line after the "<<foo" marker.  Previously, it was documented to
begin on the line following the containing quote-like operator, but that
was only sometimes the case [perl #114040].

=head2 Alphanumeric operators must now be separated from the closing
delimiter of regular expressions

You may no longer write something like:

 m/a/and 1

Instead you must write

 m/a/ and 1

with whitespace separating the operator from the closing delimiter of
the regular expression.  Not having whitespace has resulted in a
deprecation warning since Perl v5.14.0.

=head2 qw(...) can no longer be used as parentheses

C<qw> lists used to fool the parser into thinking they were always
surrounded by parentheses.  This permitted some surprising constructions
such as C<foreach $x qw(a b c) {...}>, which should really be written
C<foreach $x (qw(a b c)) {...}>.  These would sometimes get the lexer into
the wrong state, so they didn't fully work, and the similar C<foreach qw(a
b c) {...}> that one might expect to be permitted never worked at all.

This side effect of C<qw> has now been abolished.  It has been deprecated
since Perl v5.13.11.  It is now necessary to use real parentheses
everywhere that the grammar calls for them.

=head2 Interaction of lexical and default warnings

Turning on any lexical warnings used first to disable all default warnings
if lexical warnings were not already enabled:

    $*; # deprecation warning
    use warnings "void";
    $#; # void warning; no deprecation warning

Now, the C<debugging>, C<deprecated>, C<glob>, C<inplace> and C<malloc> warnings
categories are left on when turning on lexical warnings (unless they are
turned off by C<no warnings>, of course).

This may cause deprecation warnings to occur in code that used to be free
of warnings.

Those are the only categories consisting only of default warnings.  Default
warnings in other categories are still disabled by C<< use warnings "category" >>,
as we do not yet have the infrastructure for controlling
individual warnings.

=head2 C<state sub> and C<our sub>

Due to an accident of history, C<state sub> and C<our sub> were equivalent
to a plain C<sub>, so one could even create an anonymous sub with
C<our sub { ... }>.  These are now disallowed outside of the "lexical_subs"
feature.  Under the "lexical_subs" feature they have new meanings described
in L<perlsub/Lexical Subroutines>.

=head2 Defined values stored in environment are forced to byte strings

A value stored in an environment variable has always been stringified when
inherited by child processes.

In this release, when assigning to C<%ENV>, values are immediately stringified,
and converted to be only a byte string.

First, it is forced to be only a string.  Then if the string is utf8 and the
equivalent of C<utf8::downgrade()> works, that result is used; otherwise, the
equivalent of C<utf8::encode()> is used, and a warning is issued about wide
characters (L</Diagnostics>).

=head2 C<require> dies for unreadable files

When C<require> encounters an unreadable file, it now dies.  It used to
ignore the file and continue searching the directories in C<@INC>
[perl #113422].

=head2 C<gv_fetchmeth_*> and SUPER

The various C<gv_fetchmeth_*> XS functions used to treat a package whose
named ended with C<::SUPER> specially.  A method lookup on the C<Foo::SUPER>
package would be treated as a C<SUPER> method lookup on the C<Foo> package.  This
is no longer the case.  To do a C<SUPER> lookup, pass the C<Foo> stash and the
C<GV_SUPER> flag.

=head2 C<split>'s first argument is more consistently interpreted

After some changes earlier in v5.17, C<split>'s behavior has been
simplified: if the PATTERN argument evaluates to a string
containing one space, it is treated the way that a I<literal> string
containing one space once was.

=head1 Deprecations

=head2 Module removals

The following modules will be removed from the core distribution in a future
release, and will at that time need to be installed from CPAN. Distributions
on CPAN which require these modules will need to list them as prerequisites.

The core versions of these modules will now issue C<"deprecated">-category
warnings to alert you to this fact. To silence these deprecation warnings,
install the modules in question from CPAN.

Note that these are (with rare exceptions) fine modules that you are encouraged
to continue to use. Their disinclusion from core primarily hinges on their
necessity to bootstrapping a fully functional, CPAN-capable Perl installation,
not usually on concerns over their design.

=over

=item L<encoding>

The use of this pragma is now strongly discouraged. It conflates the encoding
of source text with the encoding of I/O data, reinterprets escape sequences in
source text (a questionable choice), and introduces the UTF-8 bug to all runtime
handling of character strings. It is broken as designed and beyond repair.

For using non-ASCII literal characters in source text, please refer to L<utf8>.
For dealing with textual I/O data, please refer to L<Encode> and L<open>.

=item L<Archive::Extract>

=item L<B::Lint>

=item L<B::Lint::Debug>

=item L<CPANPLUS> and all included C<CPANPLUS::*> modules

=item L<Devel::InnerPackage>

=item L<Log::Message>

=item L<Log::Message::Config>

=item L<Log::Message::Handlers>

=item L<Log::Message::Item>

=item L<Log::Message::Simple>

=item L<Module::Pluggable>

=item L<Module::Pluggable::Object>

=item L<Object::Accessor>

=item L<Pod::LaTeX>

=item L<Term::UI>

=item L<Term::UI::History>

=back

=head2 Deprecated Utilities

The following utilities will be removed from the core distribution in a
future release as their associated modules have been deprecated. They
will remain available with the applicable CPAN distribution.

=over

=item L<cpanp>

=item C<cpanp-run-perl>

=item L<cpan2dist>

These items are part of the C<CPANPLUS> distribution.

=item L<pod2latex>

This item is part of the C<Pod::LaTeX> distribution.

=back

=head2 PL_sv_objcount

This interpreter-global variable used to track the total number of
Perl objects in the interpreter. It is no longer maintained and will
be removed altogether in Perl v5.20.

=head2 Five additional characters should be escaped in patterns with C</x>

When a regular expression pattern is compiled with C</x>, Perl treats 6
characters as white space to ignore, such as SPACE and TAB.  However,
Unicode recommends 11 characters be treated thusly.  We will conform
with this in a future Perl version.  In the meantime, use of any of the
missing characters will raise a deprecation warning, unless turned off.
The five characters are:

    U+0085 NEXT LINE
    U+200E LEFT-TO-RIGHT MARK
    U+200F RIGHT-TO-LEFT MARK
    U+2028 LINE SEPARATOR
    U+2029 PARAGRAPH SEPARATOR

=head2 User-defined charnames with surprising whitespace

A user-defined character name with trailing or multiple spaces in a row is
likely a typo.  This now generates a warning when defined, on the assumption
that uses of it will be unlikely to include the excess whitespace.

=head2 Various XS-callable functions are now deprecated

All the functions used to classify characters will be removed from a
future version of Perl, and should not be used.  With participating C
compilers (e.g., gcc), compiling any file that uses any of these will
generate a warning.  These were not intended for public use; there are
equivalent, faster, macros for most of them.

See L<perlapi/Character classes>.  The complete list is:

C<is_uni_alnum>, C<is_uni_alnumc>, C<is_uni_alnumc_lc>,
C<is_uni_alnum_lc>, C<is_uni_alpha>, C<is_uni_alpha_lc>,
C<is_uni_ascii>, C<is_uni_ascii_lc>, C<is_uni_blank>,
C<is_uni_blank_lc>, C<is_uni_cntrl>, C<is_uni_cntrl_lc>,
C<is_uni_digit>, C<is_uni_digit_lc>, C<is_uni_graph>,
C<is_uni_graph_lc>, C<is_uni_idfirst>, C<is_uni_idfirst_lc>,
C<is_uni_lower>, C<is_uni_lower_lc>, C<is_uni_print>,
C<is_uni_print_lc>, C<is_uni_punct>, C<is_uni_punct_lc>,
C<is_uni_space>, C<is_uni_space_lc>, C<is_uni_upper>,
C<is_uni_upper_lc>, C<is_uni_xdigit>, C<is_uni_xdigit_lc>,
C<is_utf8_alnum>, C<is_utf8_alnumc>, C<is_utf8_alpha>,
C<is_utf8_ascii>, C<is_utf8_blank>, C<is_utf8_char>,
C<is_utf8_cntrl>, C<is_utf8_digit>, C<is_utf8_graph>,
C<is_utf8_idcont>, C<is_utf8_idfirst>, C<is_utf8_lower>,
C<is_utf8_mark>, C<is_utf8_perl_space>, C<is_utf8_perl_word>,
C<is_utf8_posix_digit>, C<is_utf8_print>, C<is_utf8_punct>,
C<is_utf8_space>, C<is_utf8_upper>, C<is_utf8_xdigit>,
C<is_utf8_xidcont>, C<is_utf8_xidfirst>.

In addition these three functions that have never worked properly are
deprecated:
C<to_uni_lower_lc>, C<to_uni_title_lc>, and C<to_uni_upper_lc>.

=head2 Certain rare uses of backslashes within regexes are now deprecated

There are three pairs of characters that Perl recognizes as
metacharacters in regular expression patterns: C<{}>, C<[]>, and C<()>.
These can be used as well to delimit patterns, as in:

  m{foo}
  s(foo)(bar)

Since they are metacharacters, they have special meaning to regular
expression patterns, and it turns out that you can't turn off that
special meaning by the normal means of preceding them with a backslash,
if you use them, paired, within a pattern delimited by them.  For
example, in

  m{foo\{1,3\}}

the backslashes do not change the behavior, and this matches
S<C<"f o">> followed by one to three more occurrences of C<"o">.

Usages like this, where they are interpreted as metacharacters, are
exceedingly rare; we think there are none, for example, in all of CPAN.
Hence, this deprecation should affect very little code.  It does give
notice, however, that any such code needs to change, which will in turn
allow us to change the behavior in future Perl versions so that the
backslashes do have an effect, and without fear that we are silently
breaking any existing code.

=head2 Splitting the tokens C<(?> and C<(*> in regular expressions

A deprecation warning is now raised if the C<(> and C<?> are separated
by white space or comments in C<(?...)> regular expression constructs.
Similarly, if the C<(> and C<*> are separated in C<(*VERB...)>
constructs.

=head2 Pre-PerlIO IO implementations

In theory, you can currently build perl without PerlIO.  Instead, you'd use a
wrapper around stdio or sfio.  In practice, this isn't very useful.  It's not
well tested, and without any support for IO layers or (thus) Unicode, it's not
much of a perl.  Building without PerlIO will most likely be removed in the
next version of perl.

PerlIO supports a C<stdio> layer if stdio use is desired.  Similarly a
sfio layer could be produced in the future, if needed.

=head1 Future Deprecations

=over

=item *

Platforms without support infrastructure

Both Windows CE and z/OS have been historically under-maintained, and are
currently neither successfully building nor regularly being smoke tested.
Efforts are underway to change this situation, but it should not be taken for
granted that the platforms are safe and supported.  If they do not become
buildable and regularly smoked, support for them may be actively removed in
future releases.  If you have an interest in these platforms and you can lend
your time, expertise, or hardware to help support these platforms, please let
the perl development effort know by emailing C<perl5-porters@perl.org>.

Some platforms that appear otherwise entirely dead are also on the short list
for removal between now and v5.20.0:

=over

=item DG/UX

=item NeXT

=back

We also think it likely that current versions of Perl will no longer
build AmigaOS, DJGPP, NetWare (natively), OS/2 and Plan 9. If you
are using Perl on such a platform and have an interest in ensuring
Perl's future on them, please contact us.

We believe that Perl has long been unable to build on mixed endian
architectures (such as PDP-11s), and intend to remove any remaining
support code. Similarly, code supporting the long unmaintained GNU
dld will be removed soon if no-one makes themselves known as an
active user.

=item *

Swapping of $< and $>

Perl has supported the idiom of swapping $< and $> (and likewise $( and
$)) to temporarily drop permissions since 5.0, like this:

    ($<, $>) = ($>, $<);

However, this idiom modifies the real user/group id, which can have
undesirable side-effects, is no longer useful on any platform perl
supports and complicates the implementation of these variables and list
assignment in general.

As an alternative, assignment only to C<< $> >> is recommended:

    local $> = $<;

See also: L<Setuid Demystified|http://www.cs.berkeley.edu/~daw/papers/setuid-usenix02.pdf>.

=item *

C<microperl>, long broken and of unclear present purpose, will be removed.

=item *

Revamping C<< "\Q" >> semantics in double-quotish strings when combined with
other escapes.

There are several bugs and inconsistencies involving combinations
of C<\Q> and escapes like C<\x>, C<\L>, etc., within a C<\Q...\E> pair.
These need to be fixed, and doing so will necessarily change current
behavior.  The changes have not yet been settled.

=item *

Use of C<$x>, where C<x> stands for any actual (non-printing) C0 control
character will be disallowed in a future Perl version.  Use C<${x}>
instead (where again C<x> stands for a control character),
or better, C<$^A> , where C<^> is a caret (CIRCUMFLEX ACCENT),
and C<A> stands for any of the characters listed at the end of
L<perlebcdic/OPERATOR DIFFERENCES>.

=back

=head1 Performance Enhancements

=over 4

=item *

Lists of lexical variable declarations (C<my($x, $y)>) are now optimised
down to a single op and are hence faster than before.

=item *

A new C preprocessor define C<NO_TAINT_SUPPORT> was added that, if set,
disables Perl's taint support altogether.  Using the -T or -t command
line flags will cause a fatal error.  Beware that both core tests as
well as many a CPAN distribution's tests will fail with this change.  On
the upside, it provides a small performance benefit due to reduced
branching.

B<Do not enable this unless you know exactly what you are getting yourself
into.>

=item *

C<pack> with constant arguments is now constant folded in most cases
[perl #113470].

=item *

Speed up in regular expression matching against Unicode properties.  The
largest gain is for C<\X>, the Unicode "extended grapheme cluster."  The
gain for it is about 35% - 40%.  Bracketed character classes, e.g.,
C<[0-9\x{100}]> containing code points above 255 are also now faster.

=item *

On platforms supporting it, several former macros are now implemented as static
inline functions. This should speed things up slightly on non-GCC platforms.

=item *

The optimisation of hashes in boolean context has been extended to
affect C<scalar(%hash)>, C<%hash ? ... : ...>, and C<sub { %hash || ... }>.

=item *

Filetest operators manage the stack in a fractionally more efficient manner.

=item *

Globs used in a numeric context are now numified directly in most cases,
rather than being numified via stringification.

=item *

The C<x> repetition operator is now folded to a single constant at compile
time if called in scalar context with constant operands and no parentheses
around the left operand.

=back

=head1 Modules and Pragmata

=head2 New Modules and Pragmata

=over 4

=item *

L<Config::Perl::V> version 0.16 has been added as a dual-lifed module.
It provides structured data retrieval of C<perl -V> output including
information only known to the C<perl> binary and not available via L<Config>.

=back

=head2 Updated Modules and Pragmata

For a complete list of updates, run:

  $ corelist --diff 5.16.0 5.18.0

You can substitute your favorite version in place of C<5.16.0>, too.

=over

=item *

L<Archive::Extract> has been upgraded to 0.68.

Work around an edge case on Linux with Busybox's unzip.

=item *

L<Archive::Tar> has been upgraded to 1.90.

ptar now supports the -T option as well as dashless options
[rt.cpan.org #75473], [rt.cpan.org #75475].

Auto-encode filenames marked as UTF-8 [rt.cpan.org #75474].

Don't use C<tell> on L<IO::Zlib> handles [rt.cpan.org #64339].

Don't try to C<chown> on symlinks.

=item *

L<autodie> has been upgraded to 2.13.

C<autodie> now plays nicely with the 'open' pragma.

=item *

L<B> has been upgraded to 1.42.

The C<stashoff> method of COPs has been added.   This provides access to an
internal field added in perl 5.16 under threaded builds [perl #113034].

C<B::COP::stashpv> now supports UTF-8 package names and embedded NULs.

All C<CVf_*> and C<GVf_*>
and more SV-related flag values are now provided as constants in the C<B::>
namespace and available for export.  The default export list has not changed.

This makes the module work with the new pad API.

=item *

L<B::Concise> has been upgraded to 0.95.

The C<-nobanner> option has been fixed, and C<format>s can now be dumped.
When passed a sub name to dump, it will check also to see whether it
is the name of a format.  If a sub and a format share the same name,
it will dump both.

This adds support for the new C<OpMAYBE_TRUEBOOL> and C<OPpTRUEBOOL> flags.

=item *

L<B::Debug> has been upgraded to 1.18.

This adds support (experimentally) for C<B::PADLIST>, which was
added in Perl 5.17.4.

=item *

L<B::Deparse> has been upgraded to 1.20.

Avoid warning when run under C<perl -w>.

It now deparses
loop controls with the correct precedence, and multiple statements in a
C<format> line are also now deparsed correctly.

This release suppresses trailing semicolons in formats.

This release adds stub deparsing for lexical subroutines.

It no longer dies when deparsing C<sort> without arguments.  It now
correctly omits the comma for C<system $prog @args> and C<exec $prog
@args>.

=item *

L<bignum>, L<bigint> and L<bigrat> have been upgraded to 0.33.

The overrides for C<hex> and C<oct> have been rewritten, eliminating
several problems, and making one incompatible change:

=over

=item *

Formerly, whichever of C<use bigint> or C<use bigrat> was compiled later
would take precedence over the other, causing C<hex> and C<oct> not to
respect the other pragma when in scope.

=item *

Using any of these three pragmata would cause C<hex> and C<oct> anywhere
else in the program to evaluate their arguments in list context and prevent
them from inferring $_ when called without arguments.

=item *

Using any of these three pragmata would make C<oct("1234")> return 1234
(for any number not beginning with 0) anywhere in the program.  Now "1234"
is translated from octal to decimal, whether within the pragma's scope or
not.

=item *

The global overrides that facilitate lexical use of C<hex> and C<oct> now
respect any existing overrides that were in place before the new overrides
were installed, falling back to them outside of the scope of C<use bignum>.

=item *

C<use bignum "hex">, C<use bignum "oct"> and similar invocations for bigint
and bigrat now export a C<hex> or C<oct> function, instead of providing a
global override.

=back

=item *

L<Carp> has been upgraded to 1.29.

Carp is no longer confused when C<caller> returns undef for a package that
has been deleted.

The C<longmess()> and C<shortmess()> functions are now documented.

=item *

L<CGI> has been upgraded to 3.63.

Unrecognized HTML escape sequences are now handled better, problematic
trailing newlines are no longer inserted after E<lt>formE<gt> tags
by C<startform()> or C<start_form()>, and bogus "Insecure Dependency"
warnings appearing with some versions of perl are now worked around.

=item *

L<Class::Struct> has been upgraded to 0.64.

The constructor now respects overridden accessor methods [perl #29230].

=item *

L<Compress::Raw::Bzip2> has been upgraded to 2.060.

The misuse of Perl's "magic" API has been fixed.

=item *

L<Compress::Raw::Zlib> has been upgraded to 2.060.

Upgrade bundled zlib to version 1.2.7.

Fix build failures on Irix, Solaris, and Win32, and also when building as C++
[rt.cpan.org #69985], [rt.cpan.org #77030], [rt.cpan.org #75222].

The misuse of Perl's "magic" API has been fixed.

C<compress()>, C<uncompress()>, C<memGzip()> and C<memGunzip()> have
been speeded up by making parameter validation more efficient.

=item *

L<CPAN::Meta::Requirements> has been upgraded to 2.122.

Treat undef requirements to C<from_string_hash> as 0 (with a warning).

Added C<requirements_for_module> method.

=item *

L<CPANPLUS> has been upgraded to 0.9135.

Allow adding F<blib/script> to PATH.

Save the history between invocations of the shell.

Handle multiple C<makemakerargs> and C<makeflags> arguments better.

This resolves issues with the SQLite source engine.

=item *

L<Data::Dumper> has been upgraded to 2.145.

It has been optimized to only build a seen-scalar hash as necessary,
thereby speeding up serialization drastically.

Additional tests were added in order to improve statement, branch, condition
and subroutine coverage.  On the basis of the coverage analysis, some of the
internals of Dumper.pm were refactored.  Almost all methods are now
documented.

=item *

L<DB_File> has been upgraded to 1.827.

The main Perl module no longer uses the C<"@_"> construct.

=item *

L<Devel::Peek> has been upgraded to 1.11.

This fixes compilation with C++ compilers and makes the module work with
the new pad API.

=item *

L<Digest::MD5> has been upgraded to 2.52.

Fix C<Digest::Perl::MD5> OO fallback [rt.cpan.org #66634].

=item *

L<Digest::SHA> has been upgraded to 5.84.

This fixes a double-free bug, which might have caused vulnerabilities
in some cases.

=item *

L<DynaLoader> has been upgraded to 1.18.

This is due to a minor code change in the XS for the VMS implementation.

This fixes warnings about using C<CODE> sections without an C<OUTPUT>
section.

=item *

L<Encode> has been upgraded to 2.49.

The Mac alias x-mac-ce has been added, and various bugs have been fixed
in Encode::Unicode, Encode::UTF7 and Encode::GSM0338.

=item *

L<Env> has been upgraded to 1.04.

Its SPLICE implementation no longer misbehaves in list context.

=item *

L<ExtUtils::CBuilder> has been upgraded to 0.280210.

Manifest files are now correctly embedded for those versions of VC++ which
make use of them. [perl #111782, #111798].

A list of symbols to export can now be passed to C<link()> when on
Windows, as on other OSes [perl #115100].

=item *

L<ExtUtils::ParseXS> has been upgraded to 3.18.

The generated C code now avoids unnecessarily incrementing
C<PL_amagic_generation> on Perl versions where it's done automatically
(or on current Perl where the variable no longer exists).

This avoids a bogus warning for initialised XSUB non-parameters [perl
#112776].

=item *

L<File::Copy> has been upgraded to 2.26.

C<copy()> no longer zeros files when copying into the same directory,
and also now fails (as it has long been documented to do) when attempting
to copy a file over itself.

=item *

L<File::DosGlob> has been upgraded to 1.10.

The internal cache of file names that it keeps for each caller is now
freed when that caller is freed.  This means
C<< use File::DosGlob 'glob'; eval 'scalar <*>' >> no longer leaks memory.

=item *

L<File::Fetch> has been upgraded to 0.38.

Added the 'file_default' option for URLs that do not have a file
component.

Use C<File::HomeDir> when available, and provide C<PERL5_CPANPLUS_HOME> to
override the autodetection.

Always re-fetch F<CHECKSUMS> if C<fetchdir> is set.

=item *

L<File::Find> has been upgraded to 1.23.

This fixes inconsistent unixy path handling on VMS.

Individual files may now appear in list of directories to be searched
[perl #59750].

=item *

L<File::Glob> has been upgraded to 1.20.

File::Glob has had exactly the same fix as File::DosGlob.  Since it is
what Perl's own C<glob> operator itself uses (except on VMS), this means
C<< eval 'scalar <*>' >> no longer leaks.

A space-separated list of patterns return long lists of results no longer
results in memory corruption or crashes.  This bug was introduced in
Perl 5.16.0.  [perl #114984]

=item *

