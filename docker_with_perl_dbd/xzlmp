
=back

=over 4

=item FUNCTIONS

=back

=over 4

=item is_refcount

=back

=over 4

=item is_oneref

=back

=over 4

=item refcount

=back

=over 4

=item EXAMPLE

=item BUGS

Temporaries created on the stack

=item ACKNOWLEDGEMENTS

=item AUTHOR

=back

=head2 Test2::Tools::Spec - RSPEC implementation on top of Test2::Workflow

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

NAME, PARAMS, flat => $bool, async => $bool, iso => $bool, todo => $reason,
skip => $reason, CODEREF

=over 4

=item ESSENTIALS

tests NAME => sub { ... }, tests NAME => \%params, sub { ... },
tests($NAME, \%PARAMS, \&CODE), it NAME => sub { ... }, it NAME =>
\%params, sub { ... }, it($NAME, \%PARAMS, \&CODE), case NAME => sub { ...
}, case NAME => \%params, sub { ... }, case($NAME, \%PARAMS, \&CODE),
before_each NAME => sub { ... }, before_each NAME => \%params, sub { ... },
before_each($NAME, \%PARAMS, \&CODE), before_case NAME => sub { ... },
before_case NAME => \%params, sub { ... }, before_case($NAME, \%PARAMS,
\&CODE), before_all NAME => sub { ... }, before_all NAME => \%params, sub {
... }, before_all($NAME, \%PARAMS, \&CODE), around_each NAME => sub { ...
}, around_each NAME => \%params, sub { ... }, around_each($NAME, \%PARAMS,
\&CODE), around_case NAME => sub { ... }, around_case NAME => \%params, sub
{ ... }, around_case($NAME, \%PARAMS, \&CODE), around_all NAME => sub { ...
}, around_all NAME => \%params, sub { ... }, around_all($NAME, \%PARAMS,
\&CODE), after_each NAME => sub { ... }, after_each NAME => \%params, sub {
... }, after_each($NAME, \%PARAMS, \&CODE), after_case NAME => sub { ... },
after_case NAME => \%params, sub { ... }, after_case($NAME, \%PARAMS,
\&CODE), after_all NAME => sub { ... }, after_all NAME => \%params, sub {
... }, after_all($NAME, \%PARAMS, \&CODE)

=item SHORTCUTS

mini NAME => sub { ... }, iso NAME => sub { ... }, miso NAME => sub { ...
}, async NAME => sub { ... }, masync NAME => sub { ... }

=item CUSTOM ATTRIBUTE DEFAULTS

=back

=item EXECUTION ORDER

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Subtest - Tools for writing subtests

=over 4

=item DESCRIPTION

=item SYNOPSIS

=over 4

=item BUFFERED

=item STREAMED

=back

=item IMPORTANT NOTE

=item EXPORTS

subtest_streamed $name => $sub, subtest_streamed($name, $sub, @args),
subtest_streamed $name => \%params, $sub, subtest_streamed($name, \%params,
$sub, @args), subtest_buffered $name => $sub, subtest_buffered($name, $sub,
@args), subtest_buffered $name => \%params, $sub, subtest_buffered($name,
\%params, $sub, @args)

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Target - Alias the testing target package.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Tester - Tools to help you test other testing tools.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

$array_ref = filter $events => $PACKAGE, $array_ref = filter $events =>
$PACKAGE1, $PACKAGE2, $array_ref = filter $events => qr/match/, $array_ref
= filter $events => qr/match/, $PACKAGE, $grouped = group_events($events),
$arrayref = facets TYPE => $events

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Tiny - Tiny set of tools for unfortunate souls who
cannot use
L<Test2::Suite>.

=over 4

=item DESCRIPTION

=item USE Test2::Suite INSTEAD

=item EXPORTS

ok($bool, $name), ok($bool, $name, @diag), is($got, $want, $name), is($got,
$want, $name, @diag), isnt($got, $do_not_want, $name), isnt($got,
$do_not_want, $name, @diag), like($got, $regex, $name), like($got, $regex,
$name, @diag), unlike($got, $regex, $name), unlike($got, $regex, $name,
@diag), is_deeply($got, $want, $name), is_deeply($got, $want, $name,
@diag), diag($msg), note($msg), skip_all($reason), todo $reason => sub {
... }, plan($count), done_testing(), $warnings = warnings { ... },
$exception = exception { ... }, tests $name => sub { ... }, $output =
capture { ... }

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Warnings - Tools to verify warnings.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

$count = warns { ... }, $warning = warning { ... }, $warnings_ref =
warnings { ... }, $bool = no_warnings { ... }

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Transition - Transition notes when upgrading to Test2

=over 4

=item DESCRIPTION

=item THINGS THAT BREAK

=over 4

=item Test::Builder1.5/2 conditionals

=item Replacing the Test::Builder singleton

=item Directly Accessing Hash Elements

=item Subtest indentation

=back

=item DISTRIBUTIONS THAT BREAK OR NEED TO BE UPGRADED

=over 4

=item WORKS BUT TESTS WILL FAIL

Test::DBIx::Class::Schema, Device::Chip

=item UPGRADE SUGGESTED

Test::Exception, Data::Peek, circular::require, Test::Module::Used,
Test::Moose::More, Test::FITesque, Test::Kit, autouse

=item NEED TO UPGRADE

Test::SharedFork, Test::Builder::Clutch, Test::Dist::VersionSync,
Test::Modern, Test::UseAllModules, Test::More::Prefix

=item STILL BROKEN

Test::Aggregate, Test::Wrapper, Test::ParallelSubtest, Test::Pretty,
Net::BitTorrent, Test::Group, Test::Flatten,
Log::Dispatch::Config::TestLog, Test::Able

=back

=item MAKE ASSERTIONS -> SEND EVENTS

=over 4

=item LEGACY

=item TEST2

ok($bool, $name), diag(@messages), note(@messages), subtest($name, $code)

=back

=item WRAP EXISTING TOOLS

=over 4

=item LEGACY

=item TEST2

=back

=item USING UTF8

=over 4

=item LEGACY

=item TEST2

=back

=item AUTHORS, CONTRIBUTORS AND REVIEWERS

Chad Granum (EXODIST) E<lt>exodist@cpan.orgE<gt>

=item SOURCE

=item MAINTAINER

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Util - Tools used by Test2 and friends.

=over 4

=item DESCRIPTION

=item EXPORTS

($success, $error) = try { ... }, protect { ... }, CAN_FORK,
CAN_REALLY_FORK, CAN_THREAD, USE_THREADS, get_tid, my $file =
pkg_to_file($package), $string = ipc_separator(), $string = gen_uid(),
($ok, $err) = do_rename($old_name, $new_name), ($ok, $err) =
do_unlink($filename), ($ok, $err) = try_sig_mask { ... }, SIGINT, SIGALRM,
SIGHUP, SIGTERM, SIGUSR1, SIGUSR2

=item NOTES && CAVEATS

Devel::Cover

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>, Kent Fredric
E<lt>kentnl@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Util::ExternalMeta - Allow third party tools to safely attach
meta-data
to your instances.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item WHERE IS THE DATA STORED?

=item EXPORTS

$val = $obj->meta($key), $val = $obj->meta($key, $default), $val =
$obj->get_meta($key), $val = $obj->delete_meta($key), $obj->set_meta($key,
$val)

=item META-KEY RESTRICTIONS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Util::Facets2Legacy - Convert facet data to the legacy event
API.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=over 4

=item AS METHODS

=item AS FUNCTIONS

=back

=item NOTE ON CYCLES

=item EXPORTS

$bool = $e->causes_fail(), $bool = causes_fail($f), $bool =
$e->diagnostics(), $bool = diagnostics($f), $bool = $e->global(), $bool =
global($f), $bool = $e->increments_count(), $bool = increments_count($f),
$bool = $e->no_display(), $bool = no_display($f), ($max, $directive,
$reason) = $e->sets_plan(), ($max, $directive, $reason) = sets_plan($f),
$id = $e->subtest_id(), $id = subtest_id($f), $string = $e->summary(),
$string = summary($f), $undef_or_int = $e->terminate(), $undef_or_int =
terminate($f), $uuid = $e->uuid(), $uuid = uuid($f)

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Util::Grabber - Object used to temporarily intercept all
events.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

$grab = grab()

=item METHODS

$grab = $class->new(), $ar = $grab->flush(), $ar = $grab->events(), $ar =
$grab->finish(), $hub = $grab->hub()

=item ENDING BEHAVIOR

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Util::Guard - Inline copy of L<Scope::Guard>

=over 4

=item SEE ALSO

=item ORIGINAL AUTHOR

chocolateboy <chocolate@cpan.org>

=over 4

=item INLINE AND MODIFICATION AUTHOR

Chad Granum E<lt>exodist@cpan.orgE<gt>

=back

=item COPYRIGHT

=back

=head2 Test2::Util::HashBase - Build hash based classes.

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item THIS IS A BUNDLED COPY OF HASHBASE

=item METHODS

=over 4

=item PROVIDED BY HASH BASE

$it = $class->new(%PAIRS), $it = $class->new(\%PAIRS), $it =
$class->new(\@ORDERED_VALUES)

=item HOOKS

$self->init()

=back

=item ACCESSORS

=over 4

=item READ/WRITE

foo(), set_foo(), FOO()

=item READ ONLY

set_foo()

=item DEPRECATED SETTER

set_foo()

=item NO SETTER

=item NO READER

=item CONSTANT ONLY

=back

=item SUBCLASSING

=item GETTING A LIST OF ATTRIBUTES FOR A CLASS

@list = Test2::Util::HashBase::attr_list($class), @list =
$class->Test2::Util::HashBase::attr_list()

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Util::Importer - Inline copy of L<Importer>.

=over 4

=item DESCRIPTION

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Util::Ref - Tools for inspecting or manipulating references.

=over 4

=item DESCRIPTION

=item EXPORTS

$type = rtype($ref), $addr_str = render_ref($ref)

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>, Kent Fredric
E<lt>kentnl@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Util::Stash - Utilities for manipulating stashes and globs.

=over 4

=item DESCRIPTION

=item EXPORTS

$stash = get_stash($package), $sym_spec = parse_symbol($symbol), $sym_spec
= parse_symbol($symbol, $package), $glob_ref = get_glob($symbol), $glob_ref
= get_glob($symbol, $package), $ref = get_symbol($symbol), $ref =
get_symbol($symbol, $package), $ref = purge_symbol($symbol), $ref =
purge_symbol($symbol, $package), $sig = slot_to_sig($slot), $slot =
sig_to_slot($sig)

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Util::Sub - Tools for inspecting and manipulating subs.

=over 4

=item DESCRIPTION

=item EXPORTS

$name = sub_name(\&sub), my $hr = sub_info(\&code), $info->{ref} => \&code,
$info->{cobj} => $cobj, $info->{name} => "Some::Mod::code", $info->{file}
=> "Some/Mod.pm", $info->{package} => "Some::Mod", $info->{start_line} =>
22, $info->{end_line} => 42, $info->{lines} => [22, 42], $info->{all_lines}
=> [23, 25, ..., 39, 41]

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>, Kent Fredric
E<lt>kentnl@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Util::Table - Format a header and rows into a table

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

=over 4

=item @rows = table(...)

header => [ ... ], rows => [ [...], [...], ... ], collapse => $bool,
max_width => $num, sanitize => $bool, mark_tail => $bool

=item my $cols = term_size()

=back

=item NOTE ON UNICODE/WIDE CHARACTERS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Util::Table::LineBreak - Break up lines for use in tables.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Util::Times - Format timing/benchmark information.

=over 4

=item DESCRIPTION

=item EXPORTS

$str = render_bench($start, $end, $user, $system, $cuser, $csystem), $str =
render_bench($start, time(), times())

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Util::Trace - Legacy wrapper fro L<Test2::EventFacet::Trace>.

=over 4

=item DESCRIPTION

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::V0 - 0Th edition of the Test2 recommended bundle.

=over 4

=item DESCRIPTION

=item NAMING, USING, DEPENDING

=item SYNOPSIS

=item RESOLVING CONFLICTS WITH MOOSE

=over 4

=item TAGS

:DEFAULT

=item RENAMING ON IMPORT

'!ok', ok => {-as => 'my_ok'}

=back

=item PRAGMAS

=over 4

=item STRICT

=item WARNINGS

=item UTF8

=back

=item PLUGINS

=over 4

=item SRAND

=item UTF8

=item EXIT SUMMARY

=back

=item API FUNCTIONS

$ctx = context(), $events = intercept { ... }

=item TOOLS

=over 4

=item TARGET

$CLASS, $class = CLASS()

=item DEFER

def $func => @args;, do_def()

=item BASIC

ok($bool, $name), ok($bool, $name, @diag), pass($name), pass($name, @diag),
fail($name), fail($name, @diag), diag($message), note($message), $todo =
todo($reason), todo $reason => sub { ... }, skip($reason, $count),
plan($count), skip_all($reason), done_testing(), bail_out($reason)

=item COMPARE

is($got, $want, $name), isnt($got, $do_not_want, $name), like($got,
qr/match/, $name), unlike($got, qr/mismatch/, $name), $check =
match(qr/pattern/), $check = mismatch(qr/pattern/), $check = validator(sub
{ return $bool }), $check = hash { ... }, $check = array { ... }, $check =
bag { ... }, $check = object { ... }, $check = meta { ... }, $check =
number($num), $check = string($str), $check = bool($bool), $check =
check_isa($class_name), $check = in_set(@things), $check =
not_in_set(@things), $check = check_set(@things), $check = item($thing),
$check = item($idx => $thing), $check = field($name => $val), $check =
call($method => $expect), $check = call_list($method => $expect), $check =
call_hash($method => $expect), $check = prop($name => $expect), $check =
check($thing), $check = T(), $check = F(), $check = D(), $check = DF(),
$check = E(), $check = DNE(), $check = FDNE(), $check = U(), $check = L(),
$check = exact_ref($ref), end(), etc(), filter_items { grep { ... } @_ },
$check = event $type => .., @checks = fail_events $type => ..

=item CLASSIC COMPARE

cmp_ok($got, $op, $want, $name)

=item SUBTEST

subtest $name => sub { ... };

=item CLASS

can_ok($thing, @methods), isa_ok($thing, @classes), DOES_ok($thing, @roles)

=item ENCODING

set_encoding($encoding)

=item EXPORTS

imported_ok('function', '$scalar', ...), not_imported_ok('function',
'$scalar', ...)

=item REF

ref_ok($ref, $type), ref_is($got, $want), ref_is_not($got, $do_not_want),
is_refcount($ref, $count, $description), is_oneref($ref, $description),
$count = refcount($ref)

=item MOCK

$control = mock .., $bool = mocked($thing)

=item EXCEPTION

$exception = dies { ... }, $bool = lives { ... }, $bool = try_ok { ... }

=item WARNINGS

$count = warns { ... }, $warning = warning { ... }, $warnings_ref =
warnings { ... }, $bool = no_warnings { ... }

=back

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Workflow - A test workflow is a way of structuring tests
using
composable units.

=over 4

=item DESCRIPTION

=item IMPORTANT CONCEPTS

=over 4

=item BUILD

=item RUNNER

=item TASK

=back

=item EXPORTS

$parsed = parse_args(args => \@args), $parsed = parse_args(args => \@args,
level => $L), $parsed = parse_args(args => \@args, caller => [caller($L)]),
$build = init_root($pkg, %args), $build = root_build($pkg), $build =
current_build(), $build = build($name, \%params, sub { ... })

=item SEE ALSO

Test2::Tools::Spec

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Workflow::BlockBase - Base class for all workflow blocks.

=over 4

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back
