		    } else {
			lappend ncol mmax
		    }
		    break
		}
	    }
	} elseif {[llength $active] == $nmerge} {
	    # all parents are different, see if one is very similar
	    set bestsim 30
	    for {set pnum 0} {$pnum < $nmerge} {incr pnum} {
		set sim [similarity $pnum $l $nlc $f \
			     [lrange $events $i [expr {$j-1}]]]
		if {$sim > $bestsim} {
		    set bestsim $sim
		    set bestpn $pnum
		}
	    }
	    if {$bestpn >= 0} {
		lappend ncol m$bestpn
	    }
	}
	set pnum -1
	foreach p $parents($id) {
	    incr pnum
	    if {![info exists delta($pnum)] || $pnum == $bestpn} continue
	    set olc [expr {$nlc + $delta($pnum)}]
	    set ol [expr {$l + $diffoffset($p)}]
	    incr diffoffset($p) $delta($pnum)
	    unset delta($pnum)
	    for {} {$olc > 0} {incr olc -1} {
		$ctext insert end "-$filelines($p,$f,$ol)\n" m$pnum
		incr ol
	    }
	}
	set endl [expr {$l + $nlc}]
	if {$bestpn >= 0} {
	    # show this pretty much as a normal diff
	    set p [lindex $parents($id) $bestpn]
	    set ol [expr {$l + $diffoffset($p)}]
	    incr diffoffset($p) $delta($bestpn)
	    unset delta($bestpn)
	    for {set k $i} {$k < $j} {incr k} {
		set e [lindex $events $k]
		if {[lindex $e 2] != $bestpn} continue
		set nl [lindex $e 0]
		set ol [expr {$ol + $nl - $l}]
		for {} {$l < $nl} {incr l} {
		    $ctext insert end "+$filelines($id,$f,$l)\n" $ncol
		}
		set c [lindex $e 3]
		for {} {$c > 0} {incr c -1} {
		    $ctext insert end "-$filelines($p,$f,$ol)\n" m$bestpn
		    incr ol
		}
		set nl [lindex $e 1]
		for {} {$l < $nl} {incr l} {
		    $ctext insert end "+$filelines($id,$f,$l)\n" mresult
		}
	    }
	}
	for {} {$l < $endl} {incr l} {
	    $ctext insert end "+$filelines($id,$f,$l)\n" $ncol
	}
    }
    while {$l < $grouplineend} {
	$ctext insert end " $filelines($id,$f,$l)\n"
	incr l
    }
    $ctext conf -state disabled
}

proc similarity {pnum l nlc f events} {
    global diffmergeid parents diffoffset filelines

    set id $diffmergeid
    set p [lindex $parents($id) $pnum]
    set ol [expr {$l + $diffoffset($p)}]
    set endl [expr {$l + $nlc}]
    set same 0
    set diff 0
    foreach e $events {
	if {[lindex $e 2] != $pnum} continue
	set nl [lindex $e 0]
	set ol [expr {$ol + $nl - $l}]
	for {} {$l < $nl} {incr l} {
	    incr same [string length $filelines($id,$f,$l)]
	    incr same
	}
	set oc [lindex $e 3]
	for {} {$oc > 0} {incr oc -1} {
	    incr diff [string length $filelines($p,$f,$ol)]
	    incr diff
	    incr ol
	}
	set nl [lindex $e 1]
	for {} {$l < $nl} {incr l} {
	    incr diff [string length $filelines($id,$f,$l)]
	    incr diff
	}
    }
    for {} {$l < $endl} {incr l} {
	incr same [string length $filelines($id,$f,$l)]
	incr same
    }
    if {$same == 0} {
	return 0
    }
    return [expr {200 * $same / (2 * $same + $diff)}]
}

proc startdiff {ids} {
    global treediffs diffids treepending diffmergeid

    set diffids $ids
    catch {unset diffmergeid}
    if {![info exists treediffs($ids)]} {
	if {![info exists treepending]} {
	    gettreediffs $ids
	}
    } else {
	addtocflist $ids
    }
}

proc addtocflist {ids} {
    global treediffs cflist
    foreach f $treediffs($ids) {
	$cflist insert end $f
    }
    getblobdiffs $ids
}

proc gettreediffs {ids} {
    global treediff parents treepending env
    set treepending $ids
    set treediff {}
    set id [lindex $ids 0]
    set p [lindex $ids 1]
    if [catch {set gdtf [open "|{$env(HG)} --config ui.report_untrusted=false debug-diff-tree -r $p $id" r]}] return
    fconfigure $gdtf -blocking 0
    fileevent $gdtf readable [list gettreediffline $gdtf $ids]
}

proc gettreediffline {gdtf ids} {
    global treediff treediffs treepending diffids diffmergeid

    set n [gets $gdtf line]
    if {$n < 0} {
	if {![eof $gdtf]} return
	close $gdtf
	set treediffs($ids) $treediff
	unset treepending
	if {$ids != $diffids} {
	    gettreediffs $diffids
	} else {
	    if {[info exists diffmergeid]} {
		contmergediff $ids
	    } else {
		addtocflist $ids
	    }
	}
	return
    }
    set tab1 [expr [string first "\t" $line] + 1]
    set tab2 [expr [string first "\t" $line $tab1] - 1]
    set file [string range $line $tab1 $tab2]
    lappend treediff $file
}

proc getblobdiffs {ids} {
    global diffopts blobdifffd diffids env curdifftag curtagstart
    global difffilestart nextupdate diffinhdr treediffs

    set id [lindex $ids 0]
    set p [lindex $ids 1]
    set env(GIT_DIFF_OPTS) $diffopts
    set cmd [list | $env(HG) --config ui.report_untrusted=false debug-diff-tree -r -p -C $p $id]
    if {[catch {set bdf [open $cmd r]} err]} {
	puts "error getting diffs: $err"
	return
    }
    set diffinhdr 0
    fconfigure $bdf -blocking 0
    set blobdifffd($ids) $bdf
    set curdifftag Comments
    set curtagstart 0.0
    catch {unset difffilestart}
    fileevent $bdf readable [list getblobdiffline $bdf $diffids]
    set nextupdate [expr {[clock clicks -milliseconds] + 100}]
}

proc getblobdiffline {bdf ids} {
    global diffids blobdifffd ctext curdifftag curtagstart
    global diffnexthead diffnextnote difffilestart
    global nextupdate diffinhdr treediffs
    global gaudydiff

    set n [gets $bdf line]
    if {$n < 0} {
	if {[eof $bdf]} {
	    close $bdf
	    if {$ids == $diffids && $bdf == $blobdifffd($ids)} {
		$ctext tag add $curdifftag $curtagstart end
	    }
	}
	return
    }
    if {$ids != $diffids || $bdf != $blobdifffd($ids)} {
	return
    }
    regsub -all "\r" $line "" line
    $ctext conf -state normal
    if {[regexp {^diff --git a/(.*) b/(.*)} $line match fname newname]} {
	# start of a new file
	$ctext insert end "\n"
	$ctext tag add $curdifftag $curtagstart end
	set curtagstart [$ctext index "end - 1c"]
	set header $newname
	set here [$ctext index "end - 1c"]
	set i [lsearch -exact $treediffs($diffids) $fname]
	if {$i >= 0} {
	    set difffilestart($i) $here
	    incr i
	    $ctext mark set fmark.$i $here
	    $ctext mark gravity fmark.$i left
	}
	if {$newname != $fname} {
	    set i [lsearch -exact $treediffs($diffids) $newname]
	    if {$i >= 0} {
		set difffilestart($i) $here
		incr i
		$ctext mark set fmark.$i $here
		$ctext mark gravity fmark.$i left
	    }
	}
	set curdifftag "f:$fname"
	$ctext tag delete $curdifftag
	set l [expr {(78 - [string length $header]) / 2}]
	set pad [string range "----------------------------------------" 1 $l]
	$ctext insert end "$pad $header $pad\n" filesep
	set diffinhdr 1
    } elseif {[regexp {^(---|\+\+\+) } $line] && $diffinhdr} {
	set diffinhdr 1
    } elseif {[regexp {^@@ -([0-9]+),([0-9]+) \+([0-9]+),([0-9]+) @@(.*)} \
		   $line match f1l f1c f2l f2c rest]} {
	if {$gaudydiff} {
	    $ctext insert end "\t" hunksep
	    $ctext insert end "    $f1l    " d0 "    $f2l    " d1
	    $ctext insert end "    $rest \n" hunksep
	} else {
	    $ctext insert end "$line\n" hunksep
	}
	set diffinhdr 0
    } else {
	set x [string range $line 0 0]
	if {$x == "-" || $x == "+"} {
	    set tag [expr {$x == "+"}]
	    if {$gaudydiff} {
		set line [string range $line 1 end]
	    }
	    $ctext insert end "$line\n" d$tag
	} elseif {$x == " "} {
	    if {$gaudydiff} {
		set line [string range $line 1 end]
	    }
	    $ctext insert end "$line\n"
	} elseif {$diffinhdr || $x == "\\"} {
	    # e.g. "\ No newline at end of file"
	    $ctext insert end "$line\n" filesep
	} elseif  {$line != ""} {
	    # Something else we don't recognize
	    if {$curdifftag != "Comments"} {
		$ctext insert end "\n"
		$ctext tag add $curdifftag $curtagstart end
		set curtagstart [$ctext index "end - 1c"]
		set curdifftag Comments
	    }
	    $ctext insert end "$line\n" filesep
	}
    }
    $ctext conf -state disabled
    if {[clock clicks -milliseconds] >= $nextupdate} {
	incr nextupdate 100
	fileevent $bdf readable {}
	update
	fileevent $bdf readable "getblobdiffline $bdf {$ids}"
    }
}

proc nextfile {} {
    global difffilestart ctext
    set here [$ctext index @0,0]
    for {set i 0} {[info exists difffilestart($i)]} {incr i} {
	if {[$ctext compare $difffilestart($i) > $here]} {
	    if {![info exists pos]
		|| [$ctext compare $difffilestart($i) < $pos]} {
		set pos $difffilestart($i)
	    }
	}
    }
    if {[info exists pos]} {
	$ctext yview $pos
    }
}

proc listboxsel {} {
    global ctext cflist currentid
    if {![info exists currentid]} return
    set sel [lsort [$cflist curselection]]
    if {$sel eq {}} return
    set first [lindex $sel 0]
    catch {$ctext yview fmark.$first}
}

proc setcoords {} {
    global linespc charspc canvx0 canvy0 mainfont
    global xspc1 xspc2 lthickness

    set linespc [font metrics $mainfont -linespace]
    set charspc [font measure $mainfont "m"]
    set canvy0 [expr 3 + 0.5 * $linespc]
    set canvx0 [expr 3 + 0.5 * $linespc]
    set lthickness [expr {int($linespc / 9) + 1}]
    set xspc1(0) $linespc
    set xspc2 $linespc
}

proc redisplay {} {
    global stopped redisplaying phase
    if {$stopped > 1} return
    if {$phase == "getcommits"} return
    set redisplaying 1
    if {$phase == "drawgraph" || $phase == "incrdraw"} {
	set stopped 1
    } else {
	drawgraph
    }
}

proc incrfont {inc} {
    global mainfont namefont textfont ctext canv phase
    global stopped entries curidfont
    unmarkmatches
    set mainfont [lreplace $mainfont 1 1 [expr {[lindex $mainfont 1] + $inc}]]
    set curidfont [lreplace $curidfont 1 1 [expr {[lindex $curidfont 1] + $inc}]]
    set namefont [lreplace $namefont 1 1 [expr {[lindex $namefont 1] + $inc}]]
    set textfont [lreplace $textfont 1 1 [expr {[lindex $textfont 1] + $inc}]]
    setcoords
    $ctext conf -font $textfont
    $ctext tag conf filesep -font [concat $textfont bold]
    foreach e $entries {
	$e conf -font $mainfont
    }
    if {$phase == "getcommits"} {
	$canv itemconf textitems -font $mainfont
    }
    redisplay
}

proc clearsha1 {} {
    global sha1entry sha1string
    if {[string length $sha1string] == 40} {
	$sha1entry delete 0 end
    }
}

proc sha1change {n1 n2 op} {
    global sha1string currentid sha1but
    if {$sha1string == {}
	|| ([info exists currentid] && $sha1string == $currentid)} {
	set state disabled
    } else {
	set state normal
    }
    if {[$sha1but cget -state] == $state} return
    if {$state == "normal"} {
	$sha1but conf -state normal -relief raised -text "Goto: "
    } else {
	$sha1but conf -state disabled -relief flat -text "SHA1 ID: "
    }
}

proc gotocommit {} {
    global sha1string currentid idline tagids
    global lineid numcommits

    if {$sha1string == {}
	|| ([info exists currentid] && $sha1string == $currentid)} return
    if {[info exists tagids($sha1string)]} {
	set id $tagids($sha1string)
    } else {
	set id [string tolower $sha1string]
	if {[regexp {^[0-9a-f]{4,39}$} $id]} {
	    set matches {}
	    for {set l 0} {$l < $numcommits} {incr l} {
		if {[string match $id* $lineid($l)]} {
		    lappend matches $lineid($l)
		}
	    }
	    if {$matches ne {}} {
		if {[llength $matches] > 1} {
		    error_popup "Short SHA1 id $id is ambiguous"
		    return
		}
		set id [lindex $matches 0]
	    }
	}
    }
    if {[info exists idline($id)]} {
	selectline $idline($id) 1
	return
    }
    if {[regexp {^[0-9a-fA-F]{4,}$} $sha1string]} {
	set type "SHA1 id"
    } else {
	set type "Tag"
    }
    error_popup "$type $sha1string is not known"
}

proc lineenter {x y id} {
    global hoverx hovery hoverid hovertimer
    global commitinfo canv

    if {![info exists commitinfo($id)]} return
    set hoverx $x
    set hovery $y
    set hoverid $id
    if {[info exists hovertimer]} {
	after cancel $hovertimer
    }
    set hovertimer [after 500 linehover]
    $canv delete hover
}

proc linemotion {x y id} {
    global hoverx hovery hoverid hovertimer

    if {[info exists hoverid] && $id == $hoverid} {
	set hoverx $x
	set hovery $y
	if {[info exists hovertimer]} {
	    after cancel $hovertimer
	}
	set hovertimer [after 500 linehover]
    }
}

proc lineleave {id} {
    global hoverid hovertimer canv

    if {[info exists hoverid] && $id == $hoverid} {
	$canv delete hover
	if {[info exists hovertimer]} {
	    after cancel $hovertimer
	    unset hovertimer
	}
	unset hoverid
    }
}

proc linehover {} {
    global hoverx hovery hoverid hovertimer
    global canv linespc lthickness
    global commitinfo mainfont

    set text [lindex $commitinfo($hoverid) 0]
    set ymax [lindex [$canv cget -scrollregion] 3]
    if {$ymax == {}} return
    set yfrac [lindex [$canv yview] 0]
    set x [expr {$hoverx + 2 * $linespc}]
    set y [expr {$hovery + $yfrac * $ymax - $linespc / 2}]
    set x0 [expr {$x - 2 * $lthickness}]
    set y0 [expr {$y - 2 * $lthickness}]
    set x1 [expr {$x + [font measure $mainfont $text] + 2 * $lthickness}]
    set y1 [expr {$y + $linespc + 2 * $lthickness}]
    set t [$canv create rectangle $x0 $y0 $x1 $y1 \
	       -fill \#ffff80 -outline black -width 1 -tags hover]
    $canv raise $t
    set t [$canv create text $x $y -anchor nw -text $text -tags hover]
    $canv raise $t
}

proc clickisonarrow {id y} {
    global mainline mainlinearrow sidelines lthickness

    set thresh [expr {2 * $lthickness + 6}]
    if {[info exists mainline($id)]} {
	if {$mainlinearrow($id) ne "none"} {
	    if {abs([lindex $mainline($id) 1] - $y) < $thresh} {
		return "up"
	    }
	}
    }
    if {[info exists sidelines($id)]} {
	foreach ls $sidelines($id) {
	    set coords [lindex $ls 0]
	    set arrow [lindex $ls 2]
	    if {$arrow eq "first" || $arrow eq "both"} {
		if {abs([lindex $coords 1] - $y) < $thresh} {
		    return "up"
		}
	    }
	    if {$arrow eq "last" || $arrow eq "both"} {
		if {abs([lindex $coords end] - $y) < $thresh} {
		    return "down"
		}
	    }
	}
    }
    return {}
}

proc arrowjump {id dirn y} {
    global mainline sidelines canv

    set yt {}
    if {$dirn eq "down"} {
	if {[info exists mainline($id)]} {
	    set y1 [lindex $mainline($id) 1]
	    if {$y1 > $y} {
		set yt $y1
	    }
	}
	if {[info exists sidelines($id)]} {
	    foreach ls $sidelines($id) {
		set y1 [lindex $ls 0 1]
		if {$y1 > $y && ($yt eq {} || $y1 < $yt)} {
		    set yt $y1
		}
	    }
	}
    } else {
	if {[info exists sidelines($id)]} {
	    foreach ls $sidelines($id) {
		set y1 [lindex $ls 0 end]
		if {$y1 < $y && ($yt eq {} || $y1 > $yt)} {
		    set yt $y1
		}
	    }
	}
    }
    if {$yt eq {}} return
    set ymax [lindex [$canv cget -scrollregion] 3]
    if {$ymax eq {} || $ymax <= 0} return
    set view [$canv yview]
    set yspan [expr {[lindex $view 1] - [lindex $view 0]}]
    set yfrac [expr {$yt / $ymax - $yspan / 2}]
    if {$yfrac < 0} {
	set yfrac 0
    }
    $canv yview moveto $yfrac
}

proc lineclick {x y id isnew} {
    global ctext commitinfo children cflist canv thickerline

    unmarkmatches
    unselectline
    normalline
    $canv delete hover
    # draw this line thicker than normal
    drawlines $id 1
    set thickerline $id
    if {$isnew} {
	set ymax [lindex [$canv cget -scrollregion] 3]
	if {$ymax eq {}} return
	set yfrac [lindex [$canv yview] 0]
	set y [expr {$y + $yfrac * $ymax}]
    }
    set dirn [clickisonarrow $id $y]
    if {$dirn ne {}} {
	arrowjump $id $dirn $y
	return
    }

    if {$isnew} {
	addtohistory [list lineclick $x $y $id 0]
    }
    # fill the details pane with info about this line
    $ctext conf -state normal
    $ctext delete 0.0 end
    $ctext tag conf link -foreground blue -underline 1
    $ctext tag bind link <Enter> { %W configure -cursor hand2 }
    $ctext tag bind link <Leave> { %W configure -cursor $curtextcursor }
    $ctext insert end "Parent:\t"
    $ctext insert end $id [list link link0]
    $ctext tag bind link0 <1> [list selbyid $id]
    set info $commitinfo($id)
    $ctext insert end "\n\t[lindex $info 0]\n"
    $ctext insert end "\tUser:\t[lindex $info 1]\n"
    $ctext insert end "\tDate:\t[lindex $info 2]\n"
    if {[info exists children($id)]} {
	$ctext insert end "\nChildren:"
	set i 0
	foreach child $children($id) {
	    incr i
	    set info $commitinfo($child)
	    $ctext insert end "\n\t"
	    $ctext insert end $child [list link link$i]
	    $ctext tag bind link$i <1> [list selbyid $child]
	    $ctext insert end "\n\t[lindex $info 0]"
	    $ctext insert end "\n\tUser:\t[lindex $info 1]"
	    $ctext insert end "\n\tDate:\t[lindex $info 2]\n"
	}
    }
    $ctext conf -state disabled

    $cflist delete 0 end
}

proc normalline {} {
    global thickerline
    if {[info exists thickerline]} {
	drawlines $thickerline 0
	unset thickerline
    }
}

proc selbyid {id} {
    global idline
    if {[info exists idline($id)]} {
	selectline $idline($id) 1
    }
}

proc mstime {} {
    global startmstime
    if {![info exists startmstime]} {
	set startmstime [clock clicks -milliseconds]
    }
    return [format "%.3f" [expr {([clock click -milliseconds] - $startmstime) / 1000.0}]]
}

proc rowmenu {x y id} {
    global rowctxmenu idline selectedline rowmenuid hgvdiff

    if {![info exists selectedline] || $idline($id) eq $selectedline} {
	set state disabled
    } else {
	set state normal
    }
    $rowctxmenu entryconfigure 0 -state $state
    $rowctxmenu entryconfigure 1 -state $state
    $rowctxmenu entryconfigure 2 -state $state
    if { $hgvdiff ne "" } {
	$rowctxmenu entryconfigure 6 -state $state
    }
    set rowmenuid $id
    tk_popup $rowctxmenu $x $y
}

proc diffvssel {dirn} {
    global rowmenuid selectedline lineid

    if {![info exists selectedline]} return
    if {$dirn} {
	set oldid $lineid($selectedline)
	set newid $rowmenuid
    } else {
	set oldid $rowmenuid
	set newid $lineid($selectedline)
    }
    addtohistory [list doseldiff $oldid $newid]
    doseldiff $oldid $newid
}

proc doseldiff {oldid newid} {
    global ctext cflist
    global commitinfo

    $ctext conf -state normal
    $ctext delete 0.0 end
    $ctext mark set fmark.0 0.0
    $ctext mark gravity fmark.0 left
    $cflist delete 0 end
    $cflist insert end "Top"
    $ctext insert end "From "
    $ctext tag conf link -foreground blue -underline 1
    $ctext tag bind link <Enter> { %W configure -cursor hand2 }
    $ctext tag bind link <Leave> { %W configure -cursor $curtextcursor }
    $ctext tag bind link0 <1> [list selbyid $oldid]
    $ctext insert end $oldid [list link link0]
    $ctext insert end "\n     "
    $ctext insert end [lindex $commitinfo($oldid) 0]
    $ctext insert end "\n\nTo   "
    $ctext tag bind link1 <1> [list selbyid $newid]
    $ctext insert end $newid [list link link1]
    $ctext insert end "\n     "
    $ctext insert end [lindex $commitinfo($newid) 0]
    $ctext insert end "\n"
    $ctext conf -state disabled
    $ctext tag delete Comments
    $ctext tag remove found 1.0 end
    startdiff [list $newid $oldid]
}

proc mkpatch {} {
    global rowmenuid currentid commitinfo patchtop patchnum

    if {![info exists currentid]} return
    set oldid $currentid
    set oldhead [lindex $commitinfo($oldid) 0]
    set newid $rowmenuid
    set newhead [lindex $commitinfo($newid) 0]
    set top .patch
    set patchtop $top
    catch {destroy $top}
    toplevel $top
    ttk::label $top.from -text "From:"
    ttk::entry $top.fromsha1 -width 40
    $top.fromsha1 insert 0 $oldid
    $top.fromsha1 conf -state readonly
    grid $top.from $top.fromsha1 -sticky w -pady {10 0}
    ttk::entry $top.fromhead -width 60
    $top.fromhead insert 0 $oldhead
    $top.fromhead conf -state readonly
    grid x $top.fromhead -sticky w
    ttk::label $top.to -text "To:"
    ttk::entry $top.tosha1 -width 40
    $top.tosha1 insert 0 $newid
    $top.tosha1 conf -state readonly
    grid $top.to $top.tosha1 -sticky w
    ttk::entry $top.tohead -width 60
    $top.tohead insert 0 $newhead
    $top.tohead conf -state readonly
    grid x $top.tohead -sticky w
    ttk::button $top.rev -text "Reverse" -command mkpatchrev
    grid $top.rev x -pady 10
    ttk::label $top.flab -text "Output file:"
    ttk::entry $top.fname -width 60
    $top.fname insert 0 [file normalize "patch$patchnum.patch"]
    incr patchnum
    grid $top.flab $top.fname -sticky w
    ttk::frame $top.buts
    ttk::button $top.buts.gen -text "Generate" -command mkpatchgo
    ttk::button $top.buts.can -text "Cancel" -command mkpatchcan
    grid $top.buts.gen $top.buts.can
    grid columnconfigure $top.buts 0 -weight 1 -uniform a
    grid columnconfigure $top.buts 1 -weight 1 -uniform a
    grid $top.buts - -pady 10 -sticky ew
    focus $top.fname
    popupify $top
    wm title $top "Generate a patch"
}

proc mkpatchrev {} {
    global patchtop

    set oldid [$patchtop.fromsha1 get]
    set oldhead [$patchtop.fromhead get]
    set newid [$patchtop.tosha1 get]
    set newhead [$patchtop.tohead get]
    foreach e [list fromsha1 fromhead tosha1 tohead] \
	    v [list $newid $newhead $oldid $oldhead] {
	$patchtop.$e conf -state normal
	$patchtop.$e delete 0 end
	$patchtop.$e insert 0 $v
	$patchtop.$e conf -state readonly
    }
}

proc mkpatchgo {} {
    global patchtop env

    set oldid [$patchtop.fromsha1 get]
    set newid [$patchtop.tosha1 get]
    set fname [$patchtop.fname get]
    if {[catch {exec $env(HG) --config ui.report_untrusted=false debug-diff-tree -p $oldid $newid >$fname &} err]} {
	error_popup "Error creating patch: $err"
    }
    catch {destroy $patchtop}
    unset patchtop
}

proc mkpatchcan {} {
    global patchtop

    catch {destroy $patchtop}
    unset patchtop
}

proc mktag {} {
    global rowmenuid mktagtop commitinfo

    set top .maketag
    set mktagtop $top
    catch {destroy $top}
    toplevel $top
    ttk::label $top.id -text "ID:"
    ttk::entry $top.sha1 -width 40
    $top.sha1 insert 0 $rowmenuid
    $top.sha1 conf -state readonly
    grid $top.id $top.sha1 -sticky w -pady {10 0}
    ttk::entry $top.head -width 60
    $top.head insert 0 [lindex $commitinfo($rowmenuid) 0]
    $top.head conf -state readonly
    grid x $top.head -sticky w
    ttk::label $top.tlab -text "Tag name:"
    ttk::entry $top.tag -width 60
    grid $top.tlab $top.tag -sticky w
    ttk::frame $top.buts
    ttk::button $top.buts.gen -text "Create" -command mktaggo
    ttk::button $top.buts.can -text "Cancel" -command mktagcan
    grid $top.buts.gen $top.buts.can
    grid columnconfigure $top.buts 0 -weight 1 -uniform a
    grid columnconfigure $top.buts 1 -weight 1 -uniform a
    grid $top.buts - -pady 10 -sticky ew
    focus $top.tag
    popupify $top
    wm title $top "Create a tag"
}

proc domktag {} {
    global mktagtop env tagids idtags

    set id [$mktagtop.sha1 get]
    set tag [$mktagtop.tag get]
    if {$tag == {}} {
	error_popup "No tag name specified"
	return
    }
    if {[info exists tagids($tag)]} {
	error_popup "Tag \"$tag\" already exists"
	return
    }
    if {[catch {
	set out [exec $env(HG) --config ui.report_untrusted=false tag -r $id $tag]
    } err]} {
	error_popup "Error creating tag: $err"
	return
    }

    set tagids($tag) $id
    lappend idtags($id) $tag
    redrawtags $id
}

proc redrawtags {id} {
    global canv linehtag idline idpos selectedline

    if {![info exists idline($id)]} return
    $canv delete tag.$id
    set xt [eval drawtags $id $idpos($id)]
    $canv coords $linehtag($idline($id)) $xt [lindex $idpos($id) 2]
    if {[info exists selectedline] && $selectedline == $idline($id)} {
	selectline $selectedline 0
    }
}

proc mktagcan {} {
    global mktagtop

    catch {destroy $mktagtop}
    unset mktagtop
}

proc mktaggo {} {
    domktag
    mktagcan
}

proc writecommit {} {
    global rowmenuid wrcomtop commitinfo

    set top .writecommit
    set wrcomtop $top
    catch {destroy $top}
    toplevel $top
    ttk::label $top.id -text "ID:"
    ttk::entry $top.sha1 -width 40
    $top.sha1 insert 0 $rowmenuid
    $top.sha1 conf -state readonly
    grid $top.id $top.sha1 -sticky w -pady {10 0}
    ttk::entry $top.head -width 60
    $top.head insert 0 [lindex $commitinfo($rowmenuid) 0]
    $top.head conf -state readonly
    grid x $top.head -sticky w
    ttk::label $top.flab -text "Output file:"
    ttk::entry $top.fname -width 60
    $top.fname insert 0 [file normalize "commit-[string range $rowmenuid 0 6].diff"]
    grid $top.flab $top.fname -sticky w
    ttk::frame $top.buts
    ttk::button $top.buts.gen -text "Write" -command wrcomgo
    ttk::button $top.buts.can -text "Cancel" -command wrcomcan
    grid $top.buts.gen $top.buts.can
    grid columnconfigure $top.buts 0 -weight 1 -uniform a
    grid columnconfigure $top.buts 1 -weight 1 -uniform a
    grid $top.buts - -pady 10 -sticky ew
    focus $top.fname
    popupify $top
    wm title $top "Write commit to a file"
}

proc wrcomgo {} {
    global wrcomtop

    set id [$wrcomtop.sha1 get]
    set fname [$wrcomtop.fname get]
    if {[catch {exec $::env(HG) --config ui.report_untrusted=false export --git -o [string map {% %%} $fname] $id} err]} {
	error_popup "Error writing commit: $err"
    }
    catch {destroy $wrcomtop}
    unset wrcomtop
}

proc wrcomcan {} {
    global wrcomtop

    catch {destroy $wrcomtop}
    unset wrcomtop
}

proc listrefs {id} {
    global idtags idheads idotherrefs idbookmarks

    set w {}
    if {[info exists idbookmarks($id)]} {
	set w $idbookmarks($id)
    }
    set x {}
    if {[info exists idtags($id)]} {
	set x $idtags($id)
    }
    set y {}
    if {[info exists idheads($id)]} {
	set y $idheads($id)
    }
    set z {}
    if {[info exists idotherrefs($id)]} {
	set z $idotherrefs($id)
    }
    return [list $w $x $y $z]
}

proc rereadrefs {} {
    global idbookmarks idtags idheads idotherrefs
    global bookmarkids tagids headids otherrefids

    set refids [concat [array names idtags] \
		    [array names idheads] [array names idotherrefs] \
		    [array names idbookmarks]]
    foreach id $refids {
	if {![info exists ref($id)]} {
	    set ref($id) [listrefs $id]
	}
    }
    foreach v {tagids idtags headids idheads otherrefids idotherrefs \
        bookmarkids idbookmarks} {
	catch {unset $v}
    }
    readrefs
    set refids [lsort -unique [concat $refids [array names idtags] \
			[array names idheads] [array names idotherrefs] \
			[array names idbookmarks]]]
    foreach id $refids {
	set v [listrefs $id]
	if {![info exists ref($id)] || $ref($id) != $v} {
	    redrawtags $id
	}
    }
}

proc vdiff {withparent} {
    global env rowmenuid selectedline lineid hgvdiff

    if {![info exists rowmenuid]} return
    set curid $rowmenuid

    if {$withparent} {
	set parents [exec $env(HG) --config ui.report_untrusted=false parents --rev $curid --template "{node}\n"]
	set firstparent [lindex [split $parents "\n"] 0]
	set otherid $firstparent
    } else {
	if {![info exists selectedline]} return
	set otherid $lineid($selectedline)
    }
    set range "$otherid:$curid"
    if {[catch {exec $env(HG) --config ui.report_untrusted=false $hgvdiff -r $range} err]} {
        # Ignore errors, this is just visualization
    }
}

proc showtag {tag isnew} {
    global ctext cflist tagcontents tagids linknum

    if {$isnew} {
	addtohistory [list showtag $tag 0]
    }
    $ctext conf -state normal
    $ctext delete 0.0 end
    set linknum 0
    if {[info exists tagcontents($tag)]} {
	set text $tagcontents($tag)
    } else {
	set text "Tag: $tag\nId:  $tagids($tag)"
    }
    appendwithlinks $text
    $ctext conf -state disabled
    $cflist delete 0 end
