public :
    
    //
    // Description of the information represented by a single group of channels
    //
    class IMF_EXPORT_TYPE ChannelGroupManifest
    {
    private:
        std::set<std::string> _channels; // group of channels this manifest represents
        std::vector<std::string> _components; // ordered list of components represented by this channel group
        IdLifetime _lifeTime;
        std::string _hashScheme; //one of above strings or custom value e.g "nz.co.wetafx.cleverhash2"
        std::string _encodingScheme; //string identifying scheme to encode ID numbers within the image

        typedef std::map<uint64_t, std::vector<std::string> > IDTable;
        IDTable _table;

        // used for << operator to work: tracks the last item inserted into the Manifest 
        IDTable::iterator _insertionIterator; 
        bool _insertingEntry; // true if << has been called but not enough strings yet set

    public:
        IMF_EXPORT
        ChannelGroupManifest();

        IMF_EXPORT
        const std::set<std::string>& getChannels() const;

        IMF_EXPORT
        std::set<std::string>& getChannels();
        
        IMF_EXPORT
        void setChannels(const std::set<std::string>& channels);
        IMF_EXPORT
        void setChannel(const std::string& channel);
        
         // get list of components for this channel group
        IMF_EXPORT
         const std::vector<std::string>& getComponents() const;
         
         // set components: throws an exception if there are already entries in the table
         // and the component length changes
         IMF_EXPORT
         void setComponents(const std::vector<std::string>& components);
         
         // set name of single component: throws an exception if there are already entries in the table
         // unless there was previously one component
         IMF_EXPORT
         void setComponent(const std::string& component);
         
         IdLifetime getLifetime() const { return _lifeTime;}

         void setLifetime(const IdLifetime& lifeTime)      { _lifeTime = lifeTime;}
         
         const std::string& getHashScheme() const { return _hashScheme;}
         void setHashScheme(const std::string& hashScheme)             { _hashScheme = hashScheme;}
         
         const std::string& getEncodingScheme() const { return _encodingScheme;}
         void setEncodingScheme(const std::string& encodingScheme)             { _encodingScheme = encodingScheme;}
         
         
         class Iterator;          // iterator which allows modification of the text
         class ConstIterator;     // iterator which does not allow modification
         
         
         IMF_EXPORT
         Iterator begin();
         IMF_EXPORT
         ConstIterator begin() const;
         IMF_EXPORT
         Iterator end();
         IMF_EXPORT
         ConstIterator end() const;
         
         // return number of entries in manifest - could be 0
         IMF_EXPORT
         size_t size() const ;
         
         // insert a new entry - text must contain same number of items as getComponents
         IMF_EXPORT
         Iterator insert(uint64_t idValue,  const std::vector<std::string>& text);
         
         // insert a new entry - getComponents must be a single entry
         IMF_EXPORT
         Iterator insert(uint64_t idValue,  const std::string& text);
         
         
         // compute hash of given entry, insert into manifest, and return 
         // the computed hash. Exception will be thrown if hash scheme isn't recognised
         IMF_EXPORT
         uint64_t insert(const std::vector<std::string>& text);
         IMF_EXPORT
         uint64_t insert(const std::string& text);
         
         IMF_EXPORT
         Iterator find(uint64_t idValue);

         IMF_EXPORT
         ConstIterator find(uint64_t idValue) const;

         IMF_EXPORT
         void erase(uint64_t idValue); 
         
         // return reference to idName for given idValue. Adds the mapping to the vector if it doesn't exist
         IMF_EXPORT
         std::vector<std::string>& operator[](uint64_t idValue); 
         
         // add a new entry to the manifest as an insertion operator: <<
         // the component strings must also be inserted using <<
         // throws an exception if the previous insert operation didn't insert the correct number of string components
         IMF_EXPORT
         ChannelGroupManifest& operator<<(uint64_t idValue);
         
         // insert a string as the next component of a previously inserted attribute
         IMF_EXPORT
         ChannelGroupManifest& operator<<(const std::string& text);
         
         IMF_EXPORT
         bool operator==(const ChannelGroupManifest& other) const;

         bool operator!=(const ChannelGroupManifest& other) const { return !(*this==other);}
         
         friend class IDManifest;
         
    };
    
   
    
private:
    std::vector<ChannelGroupManifest> _manifest;

public:

    // add a new channel group definition to the table, presumably populated with mappings
    // 'table' will be copied to the internal manifest; to further modify use the return value
    IMF_EXPORT
    ChannelGroupManifest& add(const ChannelGroupManifest& table);
    
    
    //insert an empty table definition for the given channel / group of channels
    IMF_EXPORT
    ChannelGroupManifest& add(const std::set<std::string>& group);
    IMF_EXPORT
    ChannelGroupManifest& add(const std::string& channel);
    
 
    // return number of items in manifest
    IMF_EXPORT
    size_t size() const;
    
    // find the first manifest ChannelGroupManifest that defines the given channel
    // if channel not find, returns a value equal to size()
    IMF_EXPORT
    size_t find(const std::string& channel) const;

    IMF_EXPORT
    const ChannelGroupManifest& operator[](size_t index) const;    
    IMF_EXPORT
    ChannelGroupManifest& operator[](size_t index);
    
    //
    // serialize manifest into data array. Array will be resized to the required size
    //
    IMF_EXPORT
    void serialize(std::vector<char>& data) const;
    
    IMF_EXPORT
    bool operator==(const IDManifest& other) const;
    IMF_EXPORT
    bool operator!=(const IDManifest& other) const;
    
    
    //
    // add entries from 'other' into this manifest if possible
    // * all ChannelGroupsManifests for different ChannelGroups
    //   will be appended.
    // * Where 'other' contains a manifest for the same
    //   ChannelGroup:
    //     * If _components differs, the entire ChannelGroupManifest is skipped
    //     * Otherwise, entries not present in 'this' will be inserted
    //     * _hashScheme, _lifeTime and _encodingScheme will be unchanged
    // 
    // returns 'false' if the same ChannelGroupManifest appears in both 'other' and 'this',
    // but with different _components, _hashScheme, _lifeTime or _encodingScheme
    // or if any idValue maps to different strings in 'other' and 'this'
    //
    IMF_EXPORT
    bool merge(const IDManifest& other);
    
    
    //
    // static has generation functions
    //
    IMF_EXPORT
    static unsigned int MurmurHash32(const std::string& idString);    
    IMF_EXPORT
    static unsigned int MurmurHash32(const std::vector<std::string>& idString);
    
    IMF_EXPORT
    static uint64_t MurmurHash64(const std::string& idString);
    IMF_EXPORT
    static uint64_t MurmurHash64(const std::vector<std::string>& idString);
    

};


//
// zlip compressed version of IDManifest - the IDManifestAttribute encodes this format
// This should be transparent to the user, since there is implicit casting between the two types
//
class CompressedIDManifest
{
public:
    IMF_EXPORT
    CompressedIDManifest();
    IMF_EXPORT
    CompressedIDManifest(const CompressedIDManifest& other);
    
    IMF_EXPORT
    CompressedIDManifest& operator=(const CompressedIDManifest& other);
    
    //
    // construct a compressed version of the given manifest - to decompress it cast to an IDManifest
    //
    IMF_EXPORT
    CompressedIDManifest(const IDManifest& manifest);
    
    IMF_EXPORT
   ~CompressedIDManifest();

    int _compressedDataSize;
    size_t _uncompressedDataSize;
    unsigned char* _data;

    
};


//
// Read/Write Iterator object to access individual entries within a manifest
//

class IDManifest::ChannelGroupManifest::Iterator
{
public:
    IMF_EXPORT
    Iterator ();

    IMF_EXPORT
    explicit Iterator (const IDManifest::ChannelGroupManifest::IDTable::iterator &i);
    
    friend class IDManifest::ChannelGroupManifest::ConstIterator;
    IMF_EXPORT
    Iterator &                         operator ++ ();

    IMF_EXPORT
    uint64_t                           id() const;
    IMF_EXPORT
    std::vector<std::string>&          text();
    
private:
    std::map< uint64_t , std::vector<std::string> >::iterator _i;
    
};

//
// Read-only Iterator object to access individual entries within a manifest
//


class IDManifest::ChannelGroupManifest::ConstIterator
{
public:
    IMF_EXPORT
    ConstIterator ();

    // explicit cast from internal map operator (for internal use only)
    IMF_EXPORT
    explicit ConstIterator (const IDManifest::ChannelGroupManifest::IDTable::const_iterator &i);
    // cast from non-const to const iterator
    IMF_EXPORT
    ConstIterator (const IDManifest::ChannelGroupManifest::Iterator &other);
    IMF_EXPORT
    ConstIterator &                         operator ++ ();

    IMF_EXPORT
    uint64_t                                 id() const;
    IMF_EXPORT
    const std::vector<std::string>&          text() const;
    
    private:
        
    std::map< uint64_t , std::vector<std::string> >::const_iterator _i;

    friend bool operator == (const ConstIterator &, const ConstIterator &);
    friend bool operator != (const ConstIterator &, const ConstIterator &);
};


//
// ChannelGroupManifest::Iterator implementation: all inline
//

inline IDManifest::ChannelGroupManifest::Iterator::Iterator() {}
inline IDManifest::ChannelGroupManifest::Iterator::Iterator(const IDManifest::ChannelGroupManifest::IDTable::iterator &i) :_i(i) {}


inline uint64_t
IDManifest::ChannelGroupManifest::Iterator::id() const { return _i->first;}

inline  std::vector<std::string>&
IDManifest::ChannelGroupManifest::Iterator::text() { return _i->second;}

inline IDManifest::ChannelGroupManifest::Iterator&
IDManifest::ChannelGroupManifest::Iterator::operator++()
{
    ++_i;
    return *this;
}

//
// ChannelGroupManifest::ConstIterator implementation: all inline
//

inline IDManifest::ChannelGroupManifest::ConstIterator::ConstIterator() {}
inline IDManifest::ChannelGroupManifest::ConstIterator::ConstIterator(const IDManifest::ChannelGroupManifest::Iterator &other) : _i(other._i) {}
inline IDManifest::ChannelGroupManifest::ConstIterator::ConstIterator(const IDManifest::ChannelGroupManifest::IDTable::const_iterator &i) :_i(i) {}

inline uint64_t
IDManifest::ChannelGroupManifest::ConstIterator::id() const { return _i->first;}

inline const  std::vector<std::string>&
IDManifest::ChannelGroupManifest::ConstIterator::text() const { return _i->second;}

inline IDManifest::ChannelGroupManifest::ConstIterator &
IDManifest::ChannelGroupManifest::ConstIterator::operator++()
{
    ++_i;
    return *this;
}

inline bool
operator==(const IDManifest::ChannelGroupManifest::ConstIterator& a, const IDManifest::ChannelGroupManifest::ConstIterator& b)
{
   return a._i ==b._i;
}

inline bool
operator!=(const IDManifest::ChannelGroupManifest::ConstIterator& a, const IDManifest::ChannelGroupManifest::ConstIterator& b)
{
   return a._i !=b._i;
}





OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT
#endif
            usr/include/OpenEXR/ImfIDManifestAttribute.h                                                        0000644 0000000 0000000 00000001451 14223432711 017434  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        // SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.

#ifndef INCLUDED_IMF_IDMANIFEST_ATTRIBUTE_H
#define INCLUDED_IMF_IDMANIFEST_ATTRIBUTE_H

#include "ImfExport.h"
#include "ImfNamespace.h"

#include "ImfAttribute.h"
#include "ImfIDManifest.h"

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER


#if defined(_MSC_VER)
// suppress warning about non-exported base classes
#pragma warning (disable : 4251)
#pragma warning (disable : 4275)
#endif


typedef TypedAttribute<OPENEXR_IMF_INTERNAL_NAMESPACE::CompressedIDManifest>
    IDManifestAttribute;

#ifndef COMPILING_IMF_IDMANIFEST_ATTRIBUTE
extern template class IMF_EXPORT_EXTERN_TEMPLATE TypedAttribute<OPENEXR_IMF_INTERNAL_NAMESPACE::CompressedIDManifest>;
#endif


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT

#endif
                                                                                                                                                                                                                       usr/include/OpenEXR/ImfIO.h                                                                         0000644 0000000 0000000 00000014040 14223432711 014072  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMF_IO_H
#define INCLUDED_IMF_IO_H

//-----------------------------------------------------------------------------
//
//	Low-level file input and output for OpenEXR.
//
//-----------------------------------------------------------------------------

#include "ImfForward.h"

#include <string>
#include <cstdint>

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER

//-----------------------------------------------------------
// class IStream -- an abstract base class for input streams.
//-----------------------------------------------------------

class IMF_EXPORT_TYPE IStream
{
  public:

    //-----------
    // Destructor
    //-----------

    IMF_EXPORT virtual ~IStream ();
    
    
    //-------------------------------------------------
    // Does this input stream support memory-mapped IO?
    //
    // Memory-mapped streams can avoid an extra copy;
    // memory-mapped read operations return a pointer
    // to an internal buffer instead of copying data
    // into a buffer supplied by the caller.
    //-------------------------------------------------

    IMF_EXPORT virtual bool        isMemoryMapped () const;


    //------------------------------------------------------
    // Read from the stream:
    //
    // read(c,n) reads n bytes from the stream, and stores
    // them in array c.  If the stream contains less than n
    // bytes, or if an I/O error occurs, read(c,n) throws
    // an exception.  If read(c,n) reads the last byte from
    // the file it returns false, otherwise it returns true.
    //------------------------------------------------------

    virtual bool	read (char c[/*n*/], int n) = 0;
    
    
    //---------------------------------------------------
    // Read from a memory-mapped stream:
    //
    // readMemoryMapped(n) reads n bytes from the stream
    // and returns a pointer to the first byte.  The
    // returned pointer remains valid until the stream
    // is closed.  If there are less than n byte left to
    // read in the stream or if the stream is not memory-
    // mapped, readMemoryMapped(n) throws an exception.  
    //---------------------------------------------------

    IMF_EXPORT virtual char *	readMemoryMapped (int n);


    //--------------------------------------------------------
    // Get the current reading position, in bytes from the
    // beginning of the file.  If the next call to read() will
    // read the first byte in the file, tellg() returns 0.
    //--------------------------------------------------------

    virtual uint64_t	tellg () = 0;


    //-------------------------------------------
    // Set the current reading position.
    // After calling seekg(i), tellg() returns i.
    //-------------------------------------------

    virtual void	seekg (uint64_t pos) = 0;


    //------------------------------------------------------
    // Clear error conditions after an operation has failed.
    //------------------------------------------------------

    IMF_EXPORT virtual void	clear ();


    //------------------------------------------------------
    // Get the name of the file associated with this stream.
    //------------------------------------------------------

    IMF_EXPORT const char *	fileName () const;

  protected:

    IMF_EXPORT IStream (const char fileName[]);

  private:

    IStream (const IStream &) = delete;
    IStream & operator = (const IStream &) = delete;
    IStream (IStream &&) = delete;
    IStream & operator = (IStream &&) = delete;

    std::string		_fileName;
};


//-----------------------------------------------------------
// class OStream -- an abstract base class for output streams
//-----------------------------------------------------------

class IMF_EXPORT_TYPE OStream
{
  public:

    //-----------
    // Destructor
    //-----------

    IMF_EXPORT virtual ~OStream ();
  

    //----------------------------------------------------------
    // Write to the stream:
    //
    // write(c,n) takes n bytes from array c, and stores them
    // in the stream.  If an I/O error occurs, write(c,n) throws
    // an exception.
    //----------------------------------------------------------

    virtual void	write (const char c[/*n*/], int n) = 0;


    //---------------------------------------------------------
    // Get the current writing position, in bytes from the
    // beginning of the file.  If the next call to write() will
    // start writing at the beginning of the file, tellp()
    // returns 0.
    //---------------------------------------------------------

    virtual uint64_t	tellp () = 0;


    //-------------------------------------------
    // Set the current writing position.
    // After calling seekp(i), tellp() returns i.
    //-------------------------------------------

    virtual void	seekp (uint64_t pos) = 0;


    //------------------------------------------------------
    // Get the name of the file associated with this stream.
    //------------------------------------------------------

    IMF_EXPORT const char *	fileName () const;

  protected:

    IMF_EXPORT OStream (const char fileName[]);

  private:

    OStream (const OStream &) = delete;
    OStream & operator = (const OStream &) = delete;
    OStream (OStream &&) = delete;
    OStream & operator = (OStream &&) = delete;

    std::string		_fileName;
};


//-----------------------
// Helper classes for Xdr
//-----------------------

struct StreamIO
{
    static inline void
    writeChars (OStream &os, const char c[/*n*/], int n)
    {
        os.write (c, n);
    }

    static inline bool
    readChars (IStream &is, char c[/*n*/], int n)
    {
        return is.read (c, n);
    }
};


struct CharPtrIO
{
    static inline void
    writeChars (char *&op, const char c[/*n*/], int n)
    {
        while (n--)
            *op++ = *c++;
    }

    static inline bool
    readChars (const char *&ip, char c[/*n*/], int n)
    {
        while (n--)
            *c++ = *ip++;

        return true;
    }
};

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                usr/include/OpenEXR/ImfImage.h                                                                      0000644 0000000 0000000 00000030007 14223432711 014606  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMF_IMAGE_H
#define INCLUDED_IMF_IMAGE_H

//----------------------------------------------------------------------------
//
// class Image -- an in-memory data structure that can hold an arbitrary
// OpenEXR image, flat or deep, with one or multiple resolution levels,
// and with an arbitrary set of channels.
// 
// An image is a container for a set of image levels, and an image level
// is a container for a set of image channels.  An image channel contains
// an array of pixel values of type half, float or unsigned int.
// 
// For example:
// 
//     image --+-- level 0 --+-- channel "R" --- pixel data
//             |             |
//             |             +-- channel "G" --- pixel data
//             |             |
//             |             +-- channel "B" --- pixel data
//             |
//             +-- level 1 --+-- channel "R" --- pixel data
//             |             |
//             |             +-- channel "G" --- pixel data
//             |             |
//             |             +-- channel "B" --- pixel data
//             |
//             +-- level 2 --+-- channel "R" --- pixel data
//                           |
//                           +-- channel "G" --- pixel data
//                           |
//                           +-- channel "B" --- pixel data
// 
// An image has a level mode, which can be ONE_LEVEL, MIPMAP_LEVELS or
// RIPMAP_LEVELS, and a level rounding mode, which can be ROUND_UP or
// ROUND_DOWN.  Together, the level mode and the level rounding mode
// determine how many levels an image contains, and how large the data
// window for each level is.  All levels in an image have the same set
// of channels.
// 
// An image channel has a name (e.g. "R", "Z", or "xVelocity"), a type
// (HALF, FLOAT or UINT) and x and y sampling rates.  A channel stores
// samples for a pixel if the pixel is inside the data window of the
// level to which the channel belongs, and the x and y coordinates of
// the pixel are divisible by the x and y sampling rates of the channel.
//
// An image can be either flat or deep.  In a flat image each channel
// in each level stores at most one value per pixel.  In a deep image
// each channel in each level stores an arbitrary number of values per
// pixel.  As an exception, each level of a deep image has a sample count
// channel with a single value per pixel; this value determines how many
// values each of the other channels in the same level has at the same
// pixel location.
//
// The classes Image, ImageLevel and ImageChannel are abstract base
// classes.  Two sets of concrete classes, one for flat and one for
// deep images, are derived from the base classes.
//
//----------------------------------------------------------------------------

#include "ImfUtilExport.h"
#include "ImfNamespace.h"

#include "ImfImageLevel.h"
#include "ImfTileDescription.h"
#include "ImfArray.h"

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER

struct Channel;


class IMFUTIL_EXPORT_TYPE Image
{
  public:

    //
    // Constructor and destructor
    //

    IMFUTIL_EXPORT Image ();
    IMFUTIL_EXPORT virtual ~Image ();


    //
    // Access to the image's level mode and level rounding mode.
    //

	IMFUTIL_EXPORT LevelMode               levelMode() const;
	IMFUTIL_EXPORT LevelRoundingMode       levelRoundingMode() const;


    //
    // Number of levels:
    //
    // numXLevels() returns the image's number of levels in the x direction.
    //
    //	if levelMode() == ONE_LEVEL:
    //      return value is: 1
    //
    //	if levelMode() == MIPMAP_LEVELS:
    //      return value is: rfunc (log (max (w, h)) / log (2)) + 1
    //
    //	if levelMode() == RIPMAP_LEVELS:
    //      return value is: rfunc (log (w) / log (2)) + 1
    //
    //	where
    //	    w is the width of the image's data window,  max.x - min.x + 1,
    //	    h is the height of the image's data window, max.y - min.y + 1,
    //	    and rfunc(x) is either floor(x), or ceil(x), depending on
    //	    whether levelRoundingMode() returns ROUND_DOWN or ROUND_UP.
    //
    // numYLevels() returns the image's number of levels in the y direction.
    //
    //	if levelMode() == ONE_LEVEL or levelMode() == MIPMAP_LEVELS:
    //      return value is the same as for numXLevels()
    //
    //	if levelMode() == RIPMAP_LEVELS:
    //      return value is: rfunc (log (h) / log (2)) + 1
    //
    //
    // numLevels() is a convenience function for use with MIPMAP_LEVELS images.
    //
    //	if levelMode() == ONE_LEVEL or levelMode() == MIPMAP_LEVELS:
    //      return value is the same as for numXLevels()
    //
    //	if levelMode() == RIPMAP_LEVELS:
    //      a LogicExc exception is thrown
    //

	IMFUTIL_EXPORT int  numLevels() const;
	IMFUTIL_EXPORT int  numXLevels() const;
	IMFUTIL_EXPORT int  numYLevels() const;


    //
    // Per-level data windows
    //
    // dataWindow() returns the data window for the image; this is the
    // same as the data window for the level with level number (0, 0).
    //
    // dataWindowForLevel(lx, ly) returns the data window for level x,
    // that is, the window for which the image level with level number
    // (lx, ly) has allocated pixel storage.
    //
    //	return value is a Box2i with min value:
    //      (dataWindow().min.x,
    //       dataWindow().min.y)
    //
    //	and max value:
    //      (dataWindow().min.x + levelWidth(lx) - 1,
    //       dataWindow().min.y + levelHeight(ly) - 1)
    //
    // dataWindowForLevel(l) is a convenience function used for ONE_LEVEL
    // and MIPMAP_LEVELS files.  It returns dataWindowForLevel(l,l)).
    //
    IMFUTIL_EXPORT
	const IMATH_NAMESPACE::Box2i &  dataWindow() const;
    IMFUTIL_EXPORT
	const IMATH_NAMESPACE::Box2i &  dataWindowForLevel(int l) const;
    IMFUTIL_EXPORT
	const IMATH_NAMESPACE::Box2i &  dataWindowForLevel(int lx, int ly) const;


    //
    // Size of a level:
    //
    // levelWidth(lx) returns the width of a level with level
    // number (lx, *), where * is any number.
    //
    //	return value is:
    //      max (1, rfunc (w / pow (2, lx)))
    //
    //
    // levelHeight(ly) returns the height of a level with level
    // number (*, ly), where * is any number.
    //
    //	return value is:
    //      max (1, rfunc (h / pow (2, ly)))
    //

    IMFUTIL_EXPORT
    int			    levelWidth  (int lx) const;
    IMFUTIL_EXPORT
    int			    levelHeight (int ly) const;


    //
    // Resize the image:
    //
    // resize(dw,lm,lrm) sets the data window of the image to dw,
    // sets the level mode to lm and the level rounding mode to lrm,
    // and allocates new storage for image levels and image channels.
    // The set of channels in the image does not change.
    //
    // The contents of the image are lost; pixel data are not preserved
    // across the resize operation.  If resizing fails, then the image
    // will be left with an empty data window and no image levels.
    //
    // resize(dw) is the same as resize(dw,levelMode(),levelRoundingMode())
    //
    IMFUTIL_EXPORT
	void                    resize(const IMATH_NAMESPACE::Box2i &dataWindow);
    IMFUTIL_EXPORT
	virtual void            resize(const IMATH_NAMESPACE::Box2i &dataWindow,
                                    LevelMode levelMode,
                                    LevelRoundingMode levelRoundingMode);

    //
    // Shift the pixels and the data window of an image:
    //
    // shiftPixels(dx,dy) shifts the image by dx pixels horizontally and
    // dy pixels vertically.  A pixel at location (x,y) moves to position
    // (x+dx, y+dy).  The data window of the image is shifted along with
    // the pixels.  No pixel data are lost.
    //
    // The horizontal and vertical shift distances must be multiples of
    // the x and y sampling rates of all image channels.  If they are not,
    // shiftPixels() throws an ArgExc exception.
    //
    IMFUTIL_EXPORT
	void                    shiftPixels(int dx, int dy);


    //
    // Insert a new channel into the image.
    //
    // The arguments to this function are the same as for adding a
    // a channel to an OpenEXR file: channel name, x and y sampling
    // rates, and a "perceptually approximately linear" flag.
    //
    // If the image already contains a channel with the same name
    // as the new name then the existing channel is deleted before
    // the new channel is added.
    //
    IMFUTIL_EXPORT
    void                    insertChannel (const std::string &name,
                                           PixelType type,
                                           int xSampling = 1,
                                           int ySampling = 1,
                                           bool pLinear = false);
    IMFUTIL_EXPORT
    void                    insertChannel (const std::string &name,
                                           const Channel &channel);

    //
    // Erase channels from an image:
    //
    // eraseChannel(n) erases the channel with name n.
    // clearChannels() erases all channels.
    //
    IMFUTIL_EXPORT
	void                    eraseChannel(const std::string &name);
    IMFUTIL_EXPORT
	void                    clearChannels();


    //
    // Rename an image channel:
    //
    // renameChannel(nOld,nNew) changes the name of the image channel
    // with name nOld to nNew.
    //
    // If the image already contains a channel called nNew, or if the
    // image does not contain a channel called nOld, then renameChannel()
    // throws an ArgExc exception.
    //
    // In the (unlikely) event that renaming the image channel causes
    // the program to run out of memory, renameChannel() erases the
    // channel that is being renamed, and throws an exception.
    //
    IMFUTIL_EXPORT
	void                    renameChannel(const std::string &oldName,
                                           const std::string &newName);

    //
    // Rename multiple image channels at the same time:
    //
    // Given a map, m, from old to new channel names, renameChannels(m)
    // assigns new names to the channels in the image.  If m has an entry
    // for a channel named c, then the channel will be renamed to m[c].
    // If m has no entry for c, then the channel keeps its old name.
    //
    // If the same name would be assigned to more than one channel, then
    // renameChannels() does not rename any channels but throws an ArgExc
    // exception instead.
    // 
    // In the (unlikely) event that renaming the image channel causes the
    // program to run out of memory, renameChannels() erases all channels
    // in the image and throws an exception.
    //
    IMFUTIL_EXPORT
	void                    renameChannels(const RenamingMap &oldToNewNames);


    //
    // Accessing image levels by level number.
    //
    // level(lx,ly) returns a reference to the image level
    // with level number (lx,ly).
    //
    // level(l) returns level(l,l).
    //

    IMFUTIL_EXPORT virtual ImageLevel &            level (int l = 0);
    IMFUTIL_EXPORT virtual const ImageLevel &      level (int l = 0) const;

    IMFUTIL_EXPORT virtual ImageLevel &            level (int lx, int ly);
    IMFUTIL_EXPORT virtual const ImageLevel &      level (int lx, int ly) const;


  protected:

    virtual ImageLevel *
        newLevel (int lx, int ly, const IMATH_NAMESPACE::Box2i &dataWindow) = 0;

  private:
    IMFUTIL_HIDDEN bool        levelNumberIsValid (int lx, int ly) const;
    IMFUTIL_HIDDEN void        clearLevels ();

    struct IMFUTIL_HIDDEN ChannelInfo
    {
        ChannelInfo (PixelType type = HALF,
                     int xSampling = 1,
                     int ySampling = 1,
                     bool pLinear = false);

        PixelType   type;
        int         xSampling;
        int         ySampling;
        bool        pLinear;
    };

    typedef std::map <std::string, ChannelInfo> ChannelMap;

    IMATH_NAMESPACE::Box2i  _dataWindow;
    LevelMode               _levelMode;
    LevelRoundingMode       _levelRoundingMode;
    ChannelMap              _channels;
    Array2D<ImageLevel *>   _levels;
};


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/include/OpenEXR/ImfImageChannel.h                                                               0000644 0000000 0000000 00000005715 14223432711 016107  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMF_IMAGE_CHANNEL_H
#define INCLUDED_IMF_IMAGE_CHANNEL_H

//----------------------------------------------------------------------------
//
//      class ImageChannel
//
//      For an explanation of images, levels and channels,
//      see the comments in header file Image.h.
//
//----------------------------------------------------------------------------

#include "ImfUtilExport.h"

#include "ImfPixelType.h"
#include "ImfFrameBuffer.h"
#include "ImfChannelList.h"
#include "IexBaseExc.h"
#include <ImathBox.h>
#include <half.h>

#include <typeinfo>
#include <cstring>

