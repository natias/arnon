    #
    # returns: value corresponding to openssl's STACK_OF(X509) structure

=item * sk_X509_push

Pushes an X509 structure onto a STACK_OF(X509) structure.

    my $rv = Net::SSLeay::sk_X509_push($sk_x509, $x509);
    # $sk_x509 - value corresponding to openssl's STACK_OF(X509) structure
    # $x509 - value corresponding to openssl's X509 structure
    #
    # returns: total number of elements after the operation, 0 on failure

=item * sk_X509_pop

Pops an single X509 structure from a STACK_OF(X509) structure.

    my $x509 = Net::SSLeay::sk_X509_pop($sk_x509);
    # $sk_x509 - value corresponding to openssl's STACK_OF(X509) structure
    #
    # returns: a pointer to an X509 structure, undef on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/sk_TYPE_pop.html>

=item * sk_X509_shift

Shifts an single X509 structure onto a STACK_OF(X509) structure.

    my $x509 = Net::SSLeay::sk_X509_shift($sk_x509, $x509);
    # $sk_x509 - value corresponding to openssl's STACK_OF(X509) structure
    # $x509 - value corresponding to openssl's X509 structure
    #
    # returns: a pointer to an X509 structure, undef on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/sk_TYPE_shift.html>

=item * sk_X509_unshift

Unshifts an single X509 structure from a STACK_OF(X509) structure.

    my $rv = Net::SSLeay::sk_X509_unshift($sk_x509);
    # $sk_x509 - value corresponding to openssl's STACK_OF(X509) structure
    #
    # returns: total number of elements after the operation, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/sk_TYPE_unshift.html>

=item * sk_X509_insert

Inserts a single X509 structure into a STACK_OF(X509) at the specified index.

    my $rv = Net::SSLeay::sk_X509_insert($sk_x509, $x509, $index);
    # $sk_x509 - value corresponding to openssl's STACK_OF(X509) structure
    # $x509 - value corresponding to openssl's X509 structure
    # $index - integer - 0 based index
    #
    # returns: total number of elements after the operation, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/sk_TYPE_insert.html>

=item * sk_X509_delete

Delete a single X509 structure from a STACK_OF(X509) at the specified index.

    my $x509 = Net::SSLeay::sk_X509_delete($sk_x509, $index);
    # $sk_x509 - value corresponding to openssl's STACK_OF(X509) structure
    # $index - integer - 0 based index
    #
    # returns: a pointer to an X509 structure, undef on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/sk_TYPE_delete.html>

=item * sk_X509_value

Return a single X509 structure from a STACK_OF(X509) at the specified index.

    my $x509 = Net::SSLeay::sk_X509_value($sk_x509, $index);
    # $sk_x509 - value corresponding to openssl's STACK_OF(X509) structure
    # $index - integer - 0 based index
    #
    # returns: a pointer to an X509 structure, undef on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/sk_TYPE_value.html>

=item * sk_X509_num

Return the number of X509 elements in a STACK_OF(X509).

    my $num = Net::SSLeay::sk_X509_num($sk_x509);
    # $sk_x509 - value corresponding to openssl's STACK_OF(X509) structure
    #
    # returns: the number of elements in the stack, -1 if the passed stack is NULL

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/sk_TYPE_num.html>

=back

=head3 Low level API: X509_REQ_* related functions

=over

=item * X509_REQ_new

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Creates a new X509_REQ structure.

    my $rv = Net::SSLeay::X509_REQ_new();
    #
    # returns: value corresponding to openssl's X509_REQ structure (0 on failure)

=item * X509_REQ_free

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Free an allocated X509_REQ structure.

    Net::SSLeay::X509_REQ_free($x);
    # $x - value corresponding to openssl's X509_REQ structure
    #
    # returns: no return value

=item * X509_REQ_add1_attr_by_NID

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Adds an attribute whose name is defined by a NID $nid. The field value to be added is in $bytes.

    my $rv = Net::SSLeay::X509_REQ_add1_attr_by_NID($req, $nid, $type, $bytes);
    # $req - value corresponding to openssl's X509_REQ structure
    # $nid - (integer) NID value
    # $type - (integer) type of data in $bytes (see below)
    # $bytes - data to be set
    #
    # returns: 1 on success, 0 on failure

    # values for $type - use constants:
    # &Net::SSLeay::MBSTRING_UTF8     - $bytes contains utf8 encoded data
    # &Net::SSLeay::MBSTRING_ASC      - $bytes contains ASCII data

=item * X509_REQ_digest

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Computes digest/fingerprint of X509_REQ $data using $type hash function.

    my $digest_value = Net::SSLeay::X509_REQ_digest($data, $type);
    # $data - value corresponding to openssl's X509_REQ structure
    # $type - value corresponding to openssl's EVP_MD structure - e.g. got via EVP_get_digestbyname()
    #
    # returns: hash value (binary)

    # to get printable (hex) value of digest use:
    print unpack('H*', $digest_value);

=item * X509_REQ_get_attr_by_NID

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Retrieve the next index matching $nid after $lastpos ($lastpos should initially be set to -1).

    my $rv = Net::SSLeay::X509_REQ_get_attr_by_NID($req, $nid, $lastpos=-1);
    # $req - value corresponding to openssl's X509_REQ structure
    # $nid - (integer) NID value
    # $lastpos - [optional] (integer) index where to start search (default -1)
    #
    # returns: index (-1 if there are no more entries)

Note: use L</P_X509_REQ_get_attr> to get the actual attribute value - e.g.

    my $index = Net::SSLeay::X509_REQ_get_attr_by_NID($req, $nid);
    my @attr_values = Net::SSLeay::P_X509_REQ_get_attr($req, $index);

=item * X509_REQ_get_attr_by_OBJ

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Retrieve the next index matching $obj after $lastpos ($lastpos should initially be set to -1).

    my $rv = Net::SSLeay::X509_REQ_get_attr_by_OBJ($req, $obj, $lastpos=-1);
    # $req - value corresponding to openssl's X509_REQ structure
    # $obj - value corresponding to openssl's ASN1_OBJECT structure
    # $lastpos - [optional] (integer) index where to start search (default -1)
    #
    # returns: index (-1 if there are no more entries)

Note: use L</P_X509_REQ_get_attr> to get the actual attribute value - e.g.

    my $index = Net::SSLeay::X509_REQ_get_attr_by_NID($req, $nid);
    my @attr_values = Net::SSLeay::P_X509_REQ_get_attr($req, $index);

=item * X509_REQ_get_attr_count

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns the total number of attributes in $req.

    my $rv = Net::SSLeay::X509_REQ_get_attr_count($req);
    # $req - value corresponding to openssl's X509_REQ structure
    #
    # returns: (integer) items count

=item * X509_REQ_get_pubkey

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns public key corresponding to given X509_REQ object $x.

    my $rv = Net::SSLeay::X509_REQ_get_pubkey($x);
    # $x - value corresponding to openssl's X509_REQ structure
    #
    # returns: value corresponding to openssl's EVP_PKEY structure (0 on failure)

=item * X509_REQ_get_subject_name

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns X509_NAME object corresponding to subject name of given X509_REQ object $x.

    my $rv = Net::SSLeay::X509_REQ_get_subject_name($x);
    # $x - value corresponding to openssl's X509_REQ structure
    #
    # returns: value corresponding to openssl's X509_NAME structure (0 on failure)

=item * X509_REQ_get_version

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns 'version' value for given X509_REQ object $x.

    my $rv = Net::SSLeay::X509_REQ_get_version($x);
    # $x - value corresponding to openssl's X509_REQ structure
    #
    # returns: (integer) version e.g. 0 = "version 1"

=item * X509_REQ_set_pubkey

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sets public key of given X509_REQ object $x to $pkey.

    my $rv = Net::SSLeay::X509_REQ_set_pubkey($x, $pkey);
    # $x - value corresponding to openssl's X509_REQ structure
    # $pkey - value corresponding to openssl's EVP_PKEY structure
    #
    # returns: 1 on success, 0 on failure

=item * X509_REQ_set_subject_name

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sets subject name of given X509_REQ object $x to X509_NAME object $name.

    my $rv = Net::SSLeay::X509_REQ_set_subject_name($x, $name);
    # $x - value corresponding to openssl's X509_REQ structure
    # $name - value corresponding to openssl's X509_NAME structure
    #
    # returns: 1 on success, 0 on failure

=item * X509_REQ_set_version

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sets 'version' of given X509_REQ object $x to $version.

    my $rv = Net::SSLeay::X509_REQ_set_version($x, $version);
    # $x - value corresponding to openssl's X509_REQ structure
    # $version - (integer) e.g. 0 = "version 1"
    #
    # returns: 1 on success, 0 on failure

=item * X509_REQ_sign

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sign X509_REQ object $x with private key $pk (using digest algorithm $md).

    my $rv = Net::SSLeay::X509_REQ_sign($x, $pk, $md);
    # $x - value corresponding to openssl's X509_REQ structure
    # $pk - value corresponding to openssl's EVP_PKEY structure (requestor's private key)
    # $md - value corresponding to openssl's EVP_MD structure
    #
    # returns: 1 on success, 0 on failure

=item * X509_REQ_verify

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Verifies X509_REQ object $x using public key $r (pubkey of requesting party).

    my $rv = Net::SSLeay::X509_REQ_verify($x, $r);
    # $x - value corresponding to openssl's X509_REQ structure
    # $r - value corresponding to openssl's EVP_PKEY structure
    #
    # returns: 0 - verify failure, 1 - verify OK, <0 - error

=item * P_X509_REQ_add_extensions

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Adds one or more X509 extensions to X509_REQ object $x.

    my $rv = Net::SSLeay::P_X509_REQ_add_extensions($x, $nid, $value);
    # $x - value corresponding to openssl's X509_REQ structure
    # $nid - NID identifying extension to be set
    # $value - extension value
    #
    # returns: 1 on success, 0 on failure

You can set more extensions at once:

    my $rv = Net::SSLeay::P_X509_REQ_add_extensions($x509_req,
            &Net::SSLeay::NID_key_usage => 'digitalSignature,keyEncipherment',
            &Net::SSLeay::NID_basic_constraints => 'CA:FALSE',
            &Net::SSLeay::NID_ext_key_usage => 'serverAuth,clientAuth',
            &Net::SSLeay::NID_netscape_cert_type => 'server',
            &Net::SSLeay::NID_subject_alt_name => 'DNS:s1.com,DNS:s2.com',
            &Net::SSLeay::NID_crl_distribution_points => 'URI:http://pki.com/crl1,URI:http://pki.com/crl2',
          );

=item * P_X509_REQ_get_attr

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns attribute value for X509_REQ's attribute at index $n.

    Net::SSLeay::P_X509_REQ_get_attr($req, $n);
    # $req - value corresponding to openssl's X509_REQ structure
    # $n - (integer) attribute index
    #
    # returns: value corresponding to openssl's ASN1_STRING structure

=back

=head3 Low level API: X509_CRL_* related functions

=over

=item * X509_CRL_new

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Creates a new X509_CRL structure.

    my $rv = Net::SSLeay::X509_CRL_new();
    #
    # returns: value corresponding to openssl's X509_CRL structure (0 on failure)

=item * X509_CRL_free

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Free an allocated X509_CRL structure.

    Net::SSLeay::X509_CRL_free($x);
    # $x - value corresponding to openssl's X509_CRL structure
    #
    # returns: no return value

=item * X509_CRL_digest

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Computes digest/fingerprint of X509_CRL $data using $type hash function.

    my $digest_value = Net::SSLeay::X509_CRL_digest($data, $type);
    # $data - value corresponding to openssl's X509_CRL structure
    # $type - value corresponding to openssl's EVP_MD structure - e.g. got via EVP_get_digestbyname()
    #
    # returns: hash value (binary)

Example:

    my $x509_crl;
    my $md = Net::SSLeay::EVP_get_digestbyname("sha1");
    my $digest_value = Net::SSLeay::X509_CRL_digest($x509_crl, $md);
    # to get printable (hex) value of digest use:
    print "digest=", unpack('H*', $digest_value), "\n";

=item * X509_CRL_get_ext

B<COMPATIBILITY:> not available in Net-SSLeay-1.54 and before

Returns X509_EXTENSION from $x509 based on given position/index.

    my $rv = Net::SSLeay::X509_CRL_get_ext($x509, $index);
    # $x509 - value corresponding to openssl's X509_CRL structure
    # $index - (integer) position/index of extension within $x509
    #
    # returns: value corresponding to openssl's X509_EXTENSION structure (0 on failure)

=item * X509_CRL_get_ext_by_NID

B<COMPATIBILITY:> not available in Net-SSLeay-1.54 and before

Returns X509_EXTENSION from $x509 based on given NID.

    my $rv = Net::SSLeay::X509_CRL_get_ext_by_NID($x509, $nid, $loc);
    # $x509 - value corresponding to openssl's X509_CRL structure
    # $nid - (integer) NID value
    # $loc - (integer) position to start lookup at
    #
    # returns: position/index of extension, negative value on error
    #          call Net::SSLeay::X509_CRL_get_ext($x509, $rv) to get the actual extension

=item * X509_CRL_get_ext_count

B<COMPATIBILITY:> not available in Net-SSLeay-1.54 and before

Returns the total number of extensions in X509_CRL object $x.

    my $rv = Net::SSLeay::X509_CRL_get_ext_count($x);
    # $x - value corresponding to openssl's X509_CRL structure
    #
    # returns: count of extensions

=item * X509_CRL_get_issuer

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns X509_NAME object corresponding to the issuer of X509_CRL $x.

    my $rv = Net::SSLeay::X509_CRL_get_issuer($x);
    # $x - value corresponding to openssl's X509_CRL structure
    #
    # returns: value corresponding to openssl's X509_NAME structure (0 on failure)

See other C<X509_NAME_*> functions to get more info from X509_NAME structure.

=item * X509_CRL_get0_lastUpdate and X509_CRL_get_lastUpdate

B<COMPATIBILITY:> X509_CRL_get0_lastUpdate not available in Net-SSLeay-1.92 and before, X509_CRL_get_lastUpdate not available in Net-SSLeay-1.45 and before

Returns 'lastUpdate' date-time value of X509_CRL object $x.

    my $rv = Net::SSLeay::X509_CRL_get0_lastUpdate($x);
    # $x - value corresponding to openssl's X509_CRL structure
    #
    # returns: read-only value corresponding to openssl's ASN1_TIME structure

B<NOTE:> X509_CRL_get_lastUpdate is an alias and deprecated in OpenSSL 1.1.0 and later

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_CRL_get0_lastUpdate.html>

=item * X509_CRL_get0_nextUpdate and X509_CRL_get_nextUpdate

B<COMPATIBILITY:> X509_CRL_get0_nextUpdate not available in Net-SSLeay-1.92 and before, X509_CRL_get_nextUpdate not available in Net-SSLeay-1.45 and before

Returns 'nextUpdate' date-time value of X509_CRL object $x.

    my $rv = Net::SSLeay::X509_CRL_get0_nextUpdate($x);
    # $x - value corresponding to openssl's X509_CRL structure
    #
    # returns: read-only value corresponding to openssl's ASN1_TIME structure or 0 if 'nextUpdate' is not set

B<NOTE:> X509_CRL_get_nextUpdate is an alias and deprecated in OpenSSL 1.1.0 and later

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_CRL_get0_nextUpdate.html>

=item * X509_CRL_get_version

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns 'version' value of given X509_CRL structure $x.

    my $rv = Net::SSLeay::X509_CRL_get_version($x);
    # $x - value corresponding to openssl's X509_CRL structure
    #
    # returns: (integer) version

=item * X509_CRL_set_issuer_name

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sets the issuer of X509_CRL object $x to X509_NAME object $name.

    my $rv = Net::SSLeay::X509_CRL_set_issuer_name($x, $name);
    # $x - value corresponding to openssl's X509_CRL structure
    # $name - value corresponding to openssl's X509_NAME structure
    #
    # returns: 1 on success, 0 on failure

=item * X509_CRL_set1_lastUpdate and X509_CRL_set_lastUpdate

B<COMPATIBILITY:> X509_CRL_set1_lastUpdate not available in Net-SSLeay-1.92 and before, X509_CRL_set_lastUpdate not available in Net-SSLeay-1.45 and before

Sets 'lastUpdate' value of X509_CRL object $x to $tm.

    my $rv = Net::SSLeay::X509_CRL_set1_lastUpdate($x, $tm);
    # $x - value corresponding to openssl's X509_CRL structure
    # $tm - value corresponding to openssl's ASN1_TIME structure
    #
    # returns: 1 on success, 0 on failure

B<NOTE:> X509_CRL_set_lastUpdate is an alias and deprecated in OpenSSL 1.1.0 and later

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_CRL_set1_lastUpdate.html>

=item * X509_CRL_set1_nextUpdate and X509_CRL_set_nextUpdate

B<COMPATIBILITY:> X509_CRL_set1_nextUpdate not available in Net-SSLeay-1.92 and before, X509_CRL_set_nextUpdate not available in Net-SSLeay-1.45 and before

Sets 'nextUpdate' value of X509_CRL object $x to $tm.

    my $rv = Net::SSLeay::X509_CRL_set1_nextUpdate($x, $tm);
    # $x - value corresponding to openssl's X509_CRL structure
    # $tm - value corresponding to openssl's ASN1_TIME structure
    #
    # returns: 1 on success, 0 on failure

B<NOTE:> X509_CRL_set_nextUpdate is an alias and deprecated in OpenSSL 1.1.0 and later

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_CRL_set1_nextUpdate.html>

=item * X509_CRL_set_version

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sets 'version' value of given X509_CRL structure $x to $version.

    my $rv = Net::SSLeay::X509_CRL_set_version($x, $version);
    # $x - value corresponding to openssl's X509_CRL structure
    # $version - (integer) version number (1 = version 2 CRL)
    #
    # returns: 1 on success, 0 on failure

Note that if you want to use any X509_CRL extension you need to set "version 2 CRL" - C<Net::SSLeay::X509_CRL_set_version($x, 1)>.

=item * X509_CRL_sign

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sign X509_CRL object $x with private key $pkey (using digest algorithm $md).

    my $rv = Net::SSLeay::X509_CRL_sign($x, $pkey, $md);
    # $x - value corresponding to openssl's X509_CRL structure
    # $pkey - value corresponding to openssl's EVP_PKEY structure
    # $md - value corresponding to openssl's EVP_MD structure
    #
    # returns: 1 on success, 0 on failure

=item * X509_CRL_sort

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sorts the data of X509_CRL object so it will be written in serial number order.

    my $rv = Net::SSLeay::X509_CRL_sort($x);
    # $x - value corresponding to openssl's X509_CRL structure
    #
    # returns: 1 on success, 0 on failure

=item * X509_CRL_verify

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Verifies X509_CRL object $a using public key $r (pubkey of issuing CA).

    my $rv = Net::SSLeay::X509_CRL_verify($a, $r);
    # $a - value corresponding to openssl's X509_CRL structure
    # $r - value corresponding to openssl's EVP_PKEY structure
    #
    # returns: 0 - verify failure, 1 - verify OK, <0 - error

=item * P_X509_CRL_add_revoked_serial_hex

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Adds given serial number $serial_hex to X509_CRL object $crl.

    Net::SSLeay::P_X509_CRL_add_revoked_serial_hex($crl, $serial_hex, $rev_time, $reason_code, $comp_time);
    # $crl - value corresponding to openssl's X509_CRL structure
    # $serial_hex - string (hexadecimal) representation of serial number
    # $rev_time - (revocation time) value corresponding to openssl's ASN1_TIME structure
    # $reason_code - [optional] (integer) reason code (see below) - default 0
    # $comp_time - [optional] (compromise time) value corresponding to openssl's ASN1_TIME structure
    #
    # returns: no return value

    # reason codes:
    # 0 - unspecified
    # 1 - keyCompromise
    # 2 - CACompromise
    # 3 - affiliationChanged
    # 4 - superseded
    # 5 - cessationOfOperation
    # 6 - certificateHold
    # 7 - (value 7 is not used)
    # 8 - removeFromCRL
    # 9 - privilegeWithdrawn
    # 10 - aACompromise

=item * P_X509_CRL_get_serial

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns serial number of X509_CRL object.

    my $rv = Net::SSLeay::P_X509_CRL_get_serial($crl);
    # $crl - value corresponding to openssl's X509_CRL structure
    #
    # returns: value corresponding to openssl's ASN1_INTEGER structure (0 on failure)

=item * P_X509_CRL_set_serial

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sets serial number of X509_CRL object to $crl_number.

    my $rv = Net::SSLeay::P_X509_CRL_set_serial($crl, $crl_number);
    # $crl - value corresponding to openssl's X509_CRL structure
    # $crl_number - value corresponding to openssl's ASN1_INTEGER structure
    #
    # returns: 1 on success, 0 on failure

=item * P_X509_CRL_add_extensions

B<COMPATIBILITY:> not available in Net-SSLeay-1.88 and before

Adds one or more X509 extensions to X509 CRL object $x.

    my $rv = Net::SSLeay::P_X509_CRL_add_extensions($x, $ca_cert, $nid, $value);
    # $x - value corresponding to openssl's X509 CRL structure
    # $ca_cert - value corresponding to openssl's X509 structure (issuer's cert - necessary for setting NID_authority_key_identifier)
    # $nid - NID identifying extension to be set
    # $value - extension value
    #
    # returns: 1 on success, 0 on failure

For more details see L</P_X509_add_extensions>.

=back

=head3 Low level API: X509_EXTENSION_* related functions

=over

=item * X509_EXTENSION_get_critical

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns 'critical' flag of given X509_EXTENSION object $ex.

    my $rv = Net::SSLeay::X509_EXTENSION_get_critical($ex);
    # $ex - value corresponding to openssl's X509_EXTENSION structure
    #
    # returns: (integer) 1 - critical, 0 - noncritical

=item * X509_EXTENSION_get_data

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns value (raw data) of X509_EXTENSION object $ne.

    my $rv = Net::SSLeay::X509_EXTENSION_get_data($ne);
    # $ne - value corresponding to openssl's X509_EXTENSION structure
    #
    # returns: value corresponding to openssl's ASN1_OCTET_STRING structure (0 on failure)

Note: you can use L</P_ASN1_STRING_get> to convert ASN1_OCTET_STRING into perl scalar variable.

=item * X509_EXTENSION_get_object

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns OID (ASN1_OBJECT) of X509_EXTENSION object $ne.

    my $rv = Net::SSLeay::X509_EXTENSION_get_object($ex);
    # $ex - value corresponding to openssl's X509_EXTENSION structure
    #
    # returns: value corresponding to openssl's ASN1_OBJECT structure (0 on failure)

=item * X509V3_EXT_print

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns string representation of given X509_EXTENSION object $ext.

    Net::SSLeay::X509V3_EXT_print($ext, $flags, $utf8_decode);
    # $ext - value corresponding to openssl's X509_EXTENSION structure
    # $flags - [optional] (integer) Currently the flag argument is unused and should be set to 0
    # $utf8_decode - [optional] 0 or 1 whether the returned value should be utf8 decoded (default=0)
    #
    # returns: no return value

=item * X509V3_EXT_d2i

Parses an extension and returns its internal structure.

    my $rv = Net::SSLeay::X509V3_EXT_d2i($ext);
    # $ext - value corresponding to openssl's X509_EXTENSION structure
    #
    # returns: pointer ???

=back

=head3 Low level API: X509_NAME_* related functions

=over

=item * X509_NAME_ENTRY_get_data

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Retrieves the field value of $ne in and ASN1_STRING structure.

    my $rv = Net::SSLeay::X509_NAME_ENTRY_get_data($ne);
    # $ne - value corresponding to openssl's X509_NAME_ENTRY structure
    #
    # returns: value corresponding to openssl's ASN1_STRING structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_NAME_ENTRY_get_object.html>

=item * X509_NAME_ENTRY_get_object

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Retrieves the field name of $ne in and ASN1_OBJECT structure.

    my $rv = Net::SSLeay::X509_NAME_ENTRY_get_object($ne);
    # $ne - value corresponding to openssl's X509_NAME_ENTRY structure
    #
    # returns: value corresponding to openssl's ASN1_OBJECT structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_NAME_ENTRY_get_object.html>

=item * X509_NAME_new

B<COMPATIBILITY:> not available in Net-SSLeay-1.55 and before

Creates a new X509_NAME structure.
Adds a field whose name is defined by a string $field. The field value to be added is in $bytes.

    my $rv = Net::SSLeay::X509_NAME_new();
    #
    # returns: value corresponding to openssl's X509_NAME structure (0 on failure)

=item * X509_NAME_hash

B<COMPATIBILITY:> not available in Net-SSLeay-1.55 and before

Sort of a checksum of issuer name $name.
The result is not a full hash (e.g. sha-1), it is kind-of-a-hash truncated to the size of 'unsigned long' (32 bits).
The resulting value might differ across different openssl versions for the same X509 certificate.

    my $rv = Net::SSLeay::X509_NAME_hash($name);
    # $name - value corresponding to openssl's X509_NAME structure
    #
    # returns: number representing checksum

=item * X509_NAME_add_entry_by_txt

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Adds a field whose name is defined by a string $field. The field value to be added is in $bytes.

    my $rv = Net::SSLeay::X509_NAME_add_entry_by_txt($name, $field, $type, $bytes, $len, $loc, $set);
    # $name - value corresponding to openssl's X509_NAME structure
    # $field - (string) field definition (name) - e.g. "organizationName"
    # $type - (integer) type of data in $bytes (see below)
    # $bytes - data to be set
    # $loc - [optional] (integer) index where the new entry is inserted: if it is -1 (default) it is appended
    # $set - [optional] (integer) determines how the new type is added. If it is 0 (default) a new RDN is created
    #
    # returns: 1 on success, 0 on failure

    # values for $type - use constants:
    # &Net::SSLeay::MBSTRING_UTF8     - $bytes contains utf8 encoded data
    # &Net::SSLeay::MBSTRING_ASC      - $bytes contains ASCII data

Unicode note: when passing non-ascii (unicode) string in $bytes do not forget to set C<$flags = &Net::SSLeay::MBSTRING_UTF8> and encode the perl $string via C<$bytes = encode('utf-8', $string)>.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_NAME_add_entry_by_txt.html>

=item * X509_NAME_add_entry_by_NID

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Adds a field whose name is defined by a NID $nid. The field value to be added is in $bytes.

    my $rv = Net::SSLeay::X509_NAME_add_entry_by_NID($name, $nid, $type, $bytes, $len, $loc, $set);
    # $name - value corresponding to openssl's X509_NAME structure
    # $nid - (integer) field definition - NID value
    # $type - (integer) type of data in $bytes (see below)
    # $bytes - data to be set
    # $loc - [optional] (integer) index where the new entry is inserted: if it is -1 (default) it is appended
    # $set - [optional] (integer) determines how the new type is added. If it is 0 (default) a new RDN is created
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_NAME_add_entry_by_txt.html>

=item * X509_NAME_add_entry_by_OBJ

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Adds a field whose name is defined by a object (OID) $obj . The field value to be added is in $bytes.

    my $rv = Net::SSLeay::X509_NAME_add_entry_by_OBJ($name, $obj, $type, $bytes, $len, $loc, $set);
    # $name - value corresponding to openssl's X509_NAME structure
    # $obj - field definition - value corresponding to openssl's ASN1_OBJECT structure
    # $type - (integer) type of data in $bytes (see below)
    # $bytes - data to be set
    # $loc - [optional] (integer) index where the new entry is inserted: if it is -1 (default) it is appended
    # $set - [optional] (integer) determines how the new type is added. If it is 0 (default) a new RDN is created
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_NAME_add_entry_by_txt.html>

=item * X509_NAME_cmp

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Compares two X509_NAME objects.

    my $rv = Net::SSLeay::X509_NAME_cmp($a, $b);
    # $a - value corresponding to openssl's X509_NAME structure
    # $b - value corresponding to openssl's X509_NAME structure
    #
    # returns: 0 if $a matches $b; non zero otherwise

=item * X509_NAME_digest

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Computes digest/fingerprint of X509_NAME $data using $type hash function.

    my $digest_value = Net::SSLeay::X509_NAME_digest($data, $type);
    # $data - value corresponding to openssl's X509_NAME structure
    # $type - value corresponding to openssl's EVP_MD structure - e.g. got via EVP_get_digestbyname()
    #
    # returns: hash value (binary)

    # to get printable (hex) value of digest use:
    print unpack('H*', $digest_value);

=item * X509_NAME_entry_count

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns the total number of entries in $name.

    my $rv = Net::SSLeay::X509_NAME_entry_count($name);
    # $name - value corresponding to openssl's X509_NAME structure
    #
    # returns: (integer) entries count

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_NAME_get_index_by_NID.html>

=item * X509_NAME_get_entry

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Retrieves the X509_NAME_ENTRY from $name corresponding to index $loc. Acceptable values for $loc run
from 0 to C<Net::SSLeay::X509_NAME_entry_count($name) - 1>. The value returned is an internal pointer which must not be freed.

    my $rv = Net::SSLeay::X509_NAME_get_entry($name, $loc);
    # $name - value corresponding to openssl's X509_NAME structure
    # $loc - (integer) index of wanted entry
    #
    # returns: value corresponding to openssl's X509_NAME_ENTRY structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_NAME_get_index_by_NID.html>

=item * X509_NAME_print_ex

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns a string with human readable version of $name.

    Net::SSLeay::X509_NAME_print_ex($name, $flags, $utf8_decode);
    # $name - value corresponding to openssl's X509_NAME structure
    # $flags - [optional] conversion flags (default XN_FLAG_RFC2253) - see below
    # $utf8_decode - [optional] 0 or 1 whether the returned value should be utf8 decoded (default=0)
    #
    # returns: string representation of $name

    # available conversion flags - use constants:
    # &Net::SSLeay::XN_FLAG_COMPAT
    # &Net::SSLeay::XN_FLAG_DN_REV
    # &Net::SSLeay::XN_FLAG_DUMP_UNKNOWN_FIELDS
    # &Net::SSLeay::XN_FLAG_FN_ALIGN
    # &Net::SSLeay::XN_FLAG_FN_LN
    # &Net::SSLeay::XN_FLAG_FN_MASK
    # &Net::SSLeay::XN_FLAG_FN_NONE
    # &Net::SSLeay::XN_FLAG_FN_OID
    # &Net::SSLeay::XN_FLAG_FN_SN
    # &Net::SSLeay::XN_FLAG_MULTILINE
    # &Net::SSLeay::XN_FLAG_ONELINE
    # &Net::SSLeay::XN_FLAG_RFC2253
    # &Net::SSLeay::XN_FLAG_SEP_COMMA_PLUS
    # &Net::SSLeay::XN_FLAG_SEP_CPLUS_SPC
    # &Net::SSLeay::XN_FLAG_SEP_MASK
    # &Net::SSLeay::XN_FLAG_SEP_MULTILINE
    # &Net::SSLeay::XN_FLAG_SEP_SPLUS_SPC
    # &Net::SSLeay::XN_FLAG_SPC_EQ

Most likely you will be fine with default:

    Net::SSLeay::X509_NAME_print_ex($name, &Net::SSLeay::XN_FLAG_RFC2253);

Or you might want RFC2253-like output without utf8 chars escaping:

    use Net::SSLeay qw/XN_FLAG_RFC2253 ASN1_STRFLGS_ESC_MSB/;
    my $flag_rfc22536_utf8 = (XN_FLAG_RFC2253) & (~ ASN1_STRFLGS_ESC_MSB);
    my $result = Net::SSLeay::X509_NAME_print_ex($name, $flag_rfc22536_utf8, 1);

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_NAME_print_ex.html>

=item * X509_NAME_get_text_by_NID

Retrieves the text from the first entry in name which matches $nid, if no
such entry exists -1 is returned.

B<openssl note:> this is a legacy function which has various limitations which
makes it of minimal use in practice. It can only find the first matching
entry and will copy the contents of the field verbatim: this can be highly
confusing if the target is a multicharacter string type like a BMPString or a UTF8String.

    Net::SSLeay::X509_NAME_get_text_by_NID($name, $nid);
    # $name - value corresponding to openssl's X509_NAME structure
    # $nid - NID value (integer)
    #
    # returns: text value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_NAME_get_index_by_NID.html>

=item * X509_NAME_oneline

Return an ASCII version of $name.

    Net::SSLeay::X509_NAME_oneline($name);
    # $name - value corresponding to openssl's X509_NAME structure
    #
    # returns: (string) ASCII version of $name

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_NAME_print_ex.html>

=item * sk_X509_NAME_free

Free an allocated STACK_OF(X509_NAME) structure.

    Net::SSLeay::sk_X509_NAME_free($sk);
    # $sk - value corresponding to openssl's STACK_OF(X509_NAME) structure
    #
    # returns: no return value

=item * sk_X509_NAME_num

Return number of items in STACK_OF(X509_NAME)

    my $rv = Net::SSLeay::sk_X509_NAME_num($sk);
    # $sk - value corresponding to openssl's STACK_OF(X509_NAME) structure
    #
    # returns: number of items

=item * sk_X509_NAME_value

Returns X509_NAME from position $index in STACK_OF(X509_NAME)

    my $rv = Net::SSLeay::sk_X509_NAME_value($sk, $i);
    # $sk - value corresponding to openssl's STACK_OF(X509_NAME) structure
    # $i - (integer) index/position
    #
    # returns: value corresponding to openssl's X509_NAME structure (0 on failure)

=item * add_file_cert_subjects_to_stack

Add a file of certs to a stack. All certs in $file that are not already in the $stackCAs will be added.

    my $rv = Net::SSLeay::add_file_cert_subjects_to_stack($stackCAs, $file);
    # $stackCAs - value corresponding to openssl's STACK_OF(X509_NAME) structure
    # $file - (string) filename
    #
    # returns: 1 on success, 0 on failure

=item * add_dir_cert_subjects_to_stack

Add a directory of certs to a stack. All certs in $dir that are not already in the $stackCAs will be added.

    my $rv = Net::SSLeay::add_dir_cert_subjects_to_stack($stackCAs, $dir);
    # $stackCAs - value corresponding to openssl's STACK_OF(X509_NAME) structure
    # $dir - (string) the directory to append from. All files in this directory will be examined as potential certs. Any that are acceptable to SSL_add_dir_cert_subjects_to_stack() that are not already in the stack will be included.
    #
    # returns: 1 on success, 0 on failure

=back

=head3 Low level API: X509_STORE_* related functions

=over

=item * X509_STORE_CTX_new

returns a newly initialised X509_STORE_CTX structure.

=item * X509_STORE_CTX_init

X509_STORE_CTX_init() sets up an X509_STORE_CTX for a subsequent verification operation.
