        return 0

    def commitfunc(ui, repo, message, match, opts):
        editform = b'backout'
        e = cmdutil.getcommiteditor(
            editform=editform, **pycompat.strkwargs(opts)
        )
        if not message:
            # we don't translate commit messages
            message = b"Backed out changeset %s" % short(node)
            e = cmdutil.getcommiteditor(edit=True, editform=editform)
        return repo.commit(
            message, opts.get(b'user'), opts.get(b'date'), match, editor=e
        )

    # save to detect changes
    tip = repo.changelog.tip()

    newnode = cmdutil.commit(ui, repo, commitfunc, [], opts)
    if not newnode:
        ui.status(_(b"nothing changed\n"))
        return 1
    cmdutil.commitstatus(repo, newnode, branch, bheads, tip)

    def nice(node):
        return b'%d:%s' % (repo.changelog.rev(node), short(node))

    ui.status(
        _(b'changeset %s backs out changeset %s\n')
        % (nice(newnode), nice(node))
    )
    if opts.get(b'merge') and op1 != node:
        hg.clean(repo, op1, show_stats=False)
        ui.status(_(b'merging with changeset %s\n') % nice(newnode))
        overrides = {(b'ui', b'forcemerge'): opts.get(b'tool', b'')}
        with ui.configoverride(overrides, b'backout'):
            return hg.merge(repo[b'tip'])
    return 0


@command(
    b'bisect',
    [
        (b'r', b'reset', False, _(b'reset bisect state')),
        (b'g', b'good', False, _(b'mark changeset good')),
        (b'b', b'bad', False, _(b'mark changeset bad')),
        (b's', b'skip', False, _(b'skip testing changeset')),
        (b'e', b'extend', False, _(b'extend the bisect range')),
        (
            b'c',
            b'command',
            b'',
            _(b'use command to check changeset state'),
            _(b'CMD'),
        ),
        (b'U', b'noupdate', False, _(b'do not update to target')),
    ],
    _(b"[-gbsr] [-U] [-c CMD] [REV]"),
    helpcategory=command.CATEGORY_CHANGE_NAVIGATION,
)
def bisect(
    ui,
    repo,
    positional_1=None,
    positional_2=None,
    command=None,
    reset=None,
    good=None,
    bad=None,
    skip=None,
    extend=None,
    noupdate=None,
):
    """subdivision search of changesets

    This command helps to find changesets which introduce problems. To
    use, mark the earliest changeset you know exhibits the problem as
    bad, then mark the latest changeset which is free from the problem
    as good. Bisect will update your working directory to a revision
    for testing (unless the -U/--noupdate option is specified). Once
    you have performed tests, mark the working directory as good or
    bad, and bisect will either update to another candidate changeset
    or announce that it has found the bad revision.

    As a shortcut, you can also use the revision argument to mark a
    revision as good or bad without checking it out first.

    If you supply a command, it will be used for automatic bisection.
    The environment variable HG_NODE will contain the ID of the
    changeset being tested. The exit status of the command will be
    used to mark revisions as good or bad: status 0 means good, 125
    means to skip the revision, 127 (command not found) will abort the
    bisection, and any other non-zero exit status means the revision
    is bad.

    .. container:: verbose

      Some examples:

      - start a bisection with known bad revision 34, and good revision 12::

          hg bisect --bad 34
          hg bisect --good 12

      - advance the current bisection by marking current revision as good or
        bad::

          hg bisect --good
          hg bisect --bad

      - mark the current revision, or a known revision, to be skipped (e.g. if
        that revision is not usable because of another issue)::

          hg bisect --skip
          hg bisect --skip 23

      - skip all revisions that do not touch directories ``foo`` or ``bar``::

          hg bisect --skip "!( file('path:foo') & file('path:bar') )"

      - forget the current bisection::

          hg bisect --reset

      - use 'make && make tests' to automatically find the first broken
        revision::

          hg bisect --reset
          hg bisect --bad 34
          hg bisect --good 12
          hg bisect --command "make && make tests"

      - see all changesets whose states are already known in the current
        bisection::

          hg log -r "bisect(pruned)"

      - see the changeset currently being bisected (especially useful
        if running with -U/--noupdate)::

          hg log -r "bisect(current)"

      - see all changesets that took part in the current bisection::

          hg log -r "bisect(range)"

      - you can even get a nice graph::

          hg log --graph -r "bisect(range)"

      See :hg:`help revisions.bisect` for more about the `bisect()` predicate.

    Returns 0 on success.
    """
    rev = []
    # backward compatibility
    if positional_1 in (b"good", b"bad", b"reset", b"init"):
        ui.warn(_(b"(use of 'hg bisect <cmd>' is deprecated)\n"))
        cmd = positional_1
        rev.append(positional_2)
        if cmd == b"good":
            good = True
        elif cmd == b"bad":
            bad = True
        else:
            reset = True
    elif positional_2:
        raise error.InputError(_(b'incompatible arguments'))
    elif positional_1 is not None:
        rev.append(positional_1)

    incompatibles = {
        b'--bad': bad,
        b'--command': bool(command),
        b'--extend': extend,
        b'--good': good,
        b'--reset': reset,
        b'--skip': skip,
    }

    enabled = [x for x in incompatibles if incompatibles[x]]

    if len(enabled) > 1:
        raise error.InputError(
            _(b'%s and %s are incompatible') % tuple(sorted(enabled)[0:2])
        )

    if reset:
        hbisect.resetstate(repo)
        return

    state = hbisect.load_state(repo)

    if rev:
        revs = logcmdutil.revrange(repo, rev)
        goodnodes = state[b'good']
        badnodes = state[b'bad']
        if goodnodes and badnodes:
            candidates = repo.revs(b'(%ln)::(%ln)', goodnodes, badnodes)
            candidates += repo.revs(b'(%ln)::(%ln)', badnodes, goodnodes)
            revs = candidates & revs
        nodes = [repo.changelog.node(i) for i in revs]
    else:
        nodes = [repo.lookup(b'.')]

    # update state
    if good or bad or skip:
        if good:
            state[b'good'] += nodes
        elif bad:
            state[b'bad'] += nodes
        elif skip:
            state[b'skip'] += nodes
        hbisect.save_state(repo, state)
        if not (state[b'good'] and state[b'bad']):
            return

    def mayupdate(repo, node, show_stats=True):
        """common used update sequence"""
        if noupdate:
            return
        cmdutil.checkunfinished(repo)
        cmdutil.bailifchanged(repo)
        return hg.clean(repo, node, show_stats=show_stats)

    displayer = logcmdutil.changesetdisplayer(ui, repo, {})

    if command:
        changesets = 1
        if noupdate:
            try:
                node = state[b'current'][0]
            except LookupError:
                raise error.StateError(
                    _(
                        b'current bisect revision is unknown - '
                        b'start a new bisect to fix'
                    )
                )
        else:
            node, p2 = repo.dirstate.parents()
            if p2 != repo.nullid:
                raise error.StateError(_(b'current bisect revision is a merge'))
        if rev:
            if not nodes:
                raise error.InputError(_(b'empty revision set'))
            node = repo[nodes[-1]].node()
        with hbisect.restore_state(repo, state, node):
            while changesets:
                # update state
                state[b'current'] = [node]
                hbisect.save_state(repo, state)
                status = ui.system(
                    command,
                    environ={b'HG_NODE': hex(node)},
                    blockedtag=b'bisect_check',
                )
                if status == 125:
                    transition = b"skip"
                elif status == 0:
                    transition = b"good"
                # status < 0 means process was killed
                elif status == 127:
                    raise error.Abort(_(b"failed to execute %s") % command)
                elif status < 0:
                    raise error.Abort(_(b"%s killed") % command)
                else:
                    transition = b"bad"
                state[transition].append(node)
                ctx = repo[node]
                summary = cmdutil.format_changeset_summary(ui, ctx, b'bisect')
                ui.status(_(b'changeset %s: %s\n') % (summary, transition))
                hbisect.checkstate(state)
                # bisect
                nodes, changesets, bgood = hbisect.bisect(repo, state)
                # update to next check
                node = nodes[0]
                mayupdate(repo, node, show_stats=False)
        hbisect.printresult(ui, repo, state, displayer, nodes, bgood)
        return

    hbisect.checkstate(state)

    # actually bisect
    nodes, changesets, good = hbisect.bisect(repo, state)
    if extend:
        if not changesets:
            extendctx = hbisect.extendrange(repo, state, nodes, good)
            if extendctx is not None:
                ui.write(
                    _(b"Extending search to changeset %s\n")
                    % cmdutil.format_changeset_summary(ui, extendctx, b'bisect')
                )
                state[b'current'] = [extendctx.node()]
                hbisect.save_state(repo, state)
                return mayupdate(repo, extendctx.node())
        raise error.StateError(_(b"nothing to extend"))

    if changesets == 0:
        hbisect.printresult(ui, repo, state, displayer, nodes, good)
    else:
        assert len(nodes) == 1  # only a single node can be tested next
        node = nodes[0]
        # compute the approximate number of remaining tests
        tests, size = 0, 2
        while size <= changesets:
            tests, size = tests + 1, size * 2
        rev = repo.changelog.rev(node)
        summary = cmdutil.format_changeset_summary(ui, repo[rev], b'bisect')
        ui.write(
            _(
                b"Testing changeset %s "
                b"(%d changesets remaining, ~%d tests)\n"
            )
            % (summary, changesets, tests)
        )
        state[b'current'] = [node]
        hbisect.save_state(repo, state)
        return mayupdate(repo, node)


@command(
    b'bookmarks|bookmark',
    [
        (b'f', b'force', False, _(b'force')),
        (b'r', b'rev', b'', _(b'revision for bookmark action'), _(b'REV')),
        (b'd', b'delete', False, _(b'delete a given bookmark')),
        (b'm', b'rename', b'', _(b'rename a given bookmark'), _(b'OLD')),
        (b'i', b'inactive', False, _(b'mark a bookmark inactive')),
        (b'l', b'list', False, _(b'list existing bookmarks')),
    ]
    + formatteropts,
    _(b'hg bookmarks [OPTIONS]... [NAME]...'),
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
)
def bookmark(ui, repo, *names, **opts):
    """create a new bookmark or list existing bookmarks

    Bookmarks are labels on changesets to help track lines of development.
    Bookmarks are unversioned and can be moved, renamed and deleted.
    Deleting or moving a bookmark has no effect on the associated changesets.

    Creating or updating to a bookmark causes it to be marked as 'active'.
    The active bookmark is indicated with a '*'.
    When a commit is made, the active bookmark will advance to the new commit.
    A plain :hg:`update` will also advance an active bookmark, if possible.
    Updating away from a bookmark will cause it to be deactivated.

    Bookmarks can be pushed and pulled between repositories (see
    :hg:`help push` and :hg:`help pull`). If a shared bookmark has
    diverged, a new 'divergent bookmark' of the form 'name@path' will
    be created. Using :hg:`merge` will resolve the divergence.

    Specifying bookmark as '.' to -m/-d/-l options is equivalent to specifying
    the active bookmark's name.

    A bookmark named '@' has the special property that :hg:`clone` will
    check it out by default if it exists.

    .. container:: verbose

      Template:

      The following keywords are supported in addition to the common template
      keywords and functions such as ``{bookmark}``. See also
      :hg:`help templates`.

      :active:  Boolean. True if the bookmark is active.

      Examples:

      - create an active bookmark for a new line of development::

          hg book new-feature

      - create an inactive bookmark as a place marker::

          hg book -i reviewed

      - create an inactive bookmark on another changeset::

          hg book -r .^ tested

      - rename bookmark turkey to dinner::

          hg book -m turkey dinner

      - move the '@' bookmark from another branch::

          hg book -f @

      - print only the active bookmark name::

          hg book -ql .
    """
    opts = pycompat.byteskwargs(opts)
    force = opts.get(b'force')
    rev = opts.get(b'rev')
    inactive = opts.get(b'inactive')  # meaning add/rename to inactive bookmark

    action = cmdutil.check_at_most_one_arg(opts, b'delete', b'rename', b'list')
    if action:
        cmdutil.check_incompatible_arguments(opts, action, [b'rev'])
    elif names or rev:
        action = b'add'
    elif inactive:
        action = b'inactive'  # meaning deactivate
    else:
        action = b'list'

    cmdutil.check_incompatible_arguments(
        opts, b'inactive', [b'delete', b'list']
    )
    if not names and action in {b'add', b'delete'}:
        raise error.InputError(_(b"bookmark name required"))

    if action in {b'add', b'delete', b'rename', b'inactive'}:
        with repo.wlock(), repo.lock(), repo.transaction(b'bookmark') as tr:
            if action == b'delete':
                names = pycompat.maplist(repo._bookmarks.expandname, names)
                bookmarks.delete(repo, tr, names)
            elif action == b'rename':
                if not names:
                    raise error.InputError(_(b"new bookmark name required"))
                elif len(names) > 1:
                    raise error.InputError(
                        _(b"only one new bookmark name allowed")
                    )
                oldname = repo._bookmarks.expandname(opts[b'rename'])
                bookmarks.rename(repo, tr, oldname, names[0], force, inactive)
            elif action == b'add':
                bookmarks.addbookmarks(repo, tr, names, rev, force, inactive)
            elif action == b'inactive':
                if len(repo._bookmarks) == 0:
                    ui.status(_(b"no bookmarks set\n"))
                elif not repo._activebookmark:
                    ui.status(_(b"no active bookmark\n"))
                else:
                    bookmarks.deactivate(repo)
    elif action == b'list':
        names = pycompat.maplist(repo._bookmarks.expandname, names)
        with ui.formatter(b'bookmarks', opts) as fm:
            bookmarks.printbookmarks(ui, repo, fm, names)
    else:
        raise error.ProgrammingError(b'invalid action: %s' % action)


@command(
    b'branch',
    [
        (
            b'f',
            b'force',
            None,
            _(b'set branch name even if it shadows an existing branch'),
        ),
        (b'C', b'clean', None, _(b'reset branch name to parent branch name')),
        (
            b'r',
            b'rev',
            [],
            _(b'change branches of the given revs (EXPERIMENTAL)'),
        ),
    ],
    _(b'[-fC] [NAME]'),
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
)
def branch(ui, repo, label=None, **opts):
    """set or show the current branch name

    .. note::

       Branch names are permanent and global. Use :hg:`bookmark` to create a
       light-weight bookmark instead. See :hg:`help glossary` for more
       information about named branches and bookmarks.

    With no argument, show the current branch name. With one argument,
    set the working directory branch name (the branch will not exist
    in the repository until the next commit). Standard practice
    recommends that primary development take place on the 'default'
    branch.

    Unless -f/--force is specified, branch will not let you set a
    branch name that already exists.

    Use -C/--clean to reset the working directory branch to that of
    the parent of the working directory, negating a previous branch
    change.

    Use the command :hg:`update` to switch to an existing branch. Use
    :hg:`commit --close-branch` to mark this branch head as closed.
    When all heads of a branch are closed, the branch will be
    considered closed.

    Returns 0 on success.
    """
    opts = pycompat.byteskwargs(opts)
    revs = opts.get(b'rev')
    if label:
        label = label.strip()

    if not opts.get(b'clean') and not label:
        if revs:
            raise error.InputError(
                _(b"no branch name specified for the revisions")
            )
        ui.write(b"%s\n" % repo.dirstate.branch())
        return

    with repo.wlock():
        if opts.get(b'clean'):
            label = repo[b'.'].branch()
            repo.dirstate.setbranch(label)
            ui.status(_(b'reset working directory to branch %s\n') % label)
        elif label:

            scmutil.checknewlabel(repo, label, b'branch')
            if revs:
                return cmdutil.changebranch(ui, repo, revs, label, opts)

            if not opts.get(b'force') and label in repo.branchmap():
                if label not in [p.branch() for p in repo[None].parents()]:
                    raise error.InputError(
                        _(b'a branch of the same name already exists'),
                        # i18n: "it" refers to an existing branch
                        hint=_(b"use 'hg update' to switch to it"),
                    )

            repo.dirstate.setbranch(label)
            ui.status(_(b'marked working directory as branch %s\n') % label)

            # find any open named branches aside from default
            for n, h, t, c in repo.branchmap().iterbranches():
                if n != b"default" and not c:
                    return 0
            ui.status(
                _(
                    b'(branches are permanent and global, '
                    b'did you want a bookmark?)\n'
                )
            )


@command(
    b'branches',
    [
        (
            b'a',
            b'active',
            False,
            _(b'show only branches that have unmerged heads (DEPRECATED)'),
        ),
        (b'c', b'closed', False, _(b'show normal and closed branches')),
        (b'r', b'rev', [], _(b'show branch name(s) of the given rev')),
    ]
    + formatteropts,
    _(b'[-c]'),
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
    intents={INTENT_READONLY},
)
def branches(ui, repo, active=False, closed=False, **opts):
    """list repository named branches

    List the repository's named branches, indicating which ones are
    inactive. If -c/--closed is specified, also list branches which have
    been marked closed (see :hg:`commit --close-branch`).

    Use the command :hg:`update` to switch to an existing branch.

    .. container:: verbose

      Template:

      The following keywords are supported in addition to the common template
      keywords and functions such as ``{branch}``. See also
      :hg:`help templates`.

      :active:  Boolean. True if the branch is active.
      :closed:  Boolean. True if the branch is closed.
      :current: Boolean. True if it is the current branch.

    Returns 0.
    """

    opts = pycompat.byteskwargs(opts)
    revs = opts.get(b'rev')
    selectedbranches = None
    if revs:
        revs = logcmdutil.revrange(repo, revs)
        getbi = repo.revbranchcache().branchinfo
        selectedbranches = {getbi(r)[0] for r in revs}

    ui.pager(b'branches')
    fm = ui.formatter(b'branches', opts)
    hexfunc = fm.hexfunc

    allheads = set(repo.heads())
    branches = []
    for tag, heads, tip, isclosed in repo.branchmap().iterbranches():
        if selectedbranches is not None and tag not in selectedbranches:
            continue
        isactive = False
        if not isclosed:
            openheads = set(repo.branchmap().iteropen(heads))
            isactive = bool(openheads & allheads)
        branches.append((tag, repo[tip], isactive, not isclosed))
    branches.sort(key=lambda i: (i[2], i[1].rev(), i[0], i[3]), reverse=True)

    for tag, ctx, isactive, isopen in branches:
        if active and not isactive:
            continue
        if isactive:
            label = b'branches.active'
            notice = b''
        elif not isopen:
            if not closed:
                continue
            label = b'branches.closed'
            notice = _(b' (closed)')
        else:
            label = b'branches.inactive'
            notice = _(b' (inactive)')
        current = tag == repo.dirstate.branch()
        if current:
            label = b'branches.current'

        fm.startitem()
        fm.write(b'branch', b'%s', tag, label=label)
        rev = ctx.rev()
        padsize = max(31 - len(b"%d" % rev) - encoding.colwidth(tag), 0)
        fmt = b' ' * padsize + b' %d:%s'
        fm.condwrite(
            not ui.quiet,
            b'rev node',
            fmt,
            rev,
            hexfunc(ctx.node()),
            label=b'log.changeset changeset.%s' % ctx.phasestr(),
        )
        fm.context(ctx=ctx)
        fm.data(active=isactive, closed=not isopen, current=current)
        if not ui.quiet:
            fm.plain(notice)
        fm.plain(b'\n')
    fm.end()


@command(
    b'bundle',
    [
        (
            b'',
            b'exact',
            None,
            _(b'compute the base from the revision specified'),
        ),
        (
            b'f',
            b'force',
            None,
            _(b'run even when the destination is unrelated'),
        ),
        (
            b'r',
            b'rev',
            [],
            _(b'a changeset intended to be added to the destination'),
            _(b'REV'),
        ),
        (
            b'b',
            b'branch',
            [],
            _(b'a specific branch you would like to bundle'),
            _(b'BRANCH'),
        ),
        (
            b'',
            b'base',
            [],
            _(b'a base changeset assumed to be available at the destination'),
            _(b'REV'),
        ),
        (b'a', b'all', None, _(b'bundle all changesets in the repository')),
        (
            b't',
            b'type',
            b'bzip2',
            _(b'bundle compression type to use'),
            _(b'TYPE'),
        ),
    ]
    + remoteopts,
    _(b'[-f] [-t BUNDLESPEC] [-a] [-r REV]... [--base REV]... FILE [DEST]...'),
    helpcategory=command.CATEGORY_IMPORT_EXPORT,
)
def bundle(ui, repo, fname, *dests, **opts):
    """create a bundle file

    Generate a bundle file containing data to be transferred to another
    repository.

    To create a bundle containing all changesets, use -a/--all
    (or --base null). Otherwise, hg assumes the destination will have
    all the nodes you specify with --base parameters. Otherwise, hg
    will assume the repository has all the nodes in destination, or
    default-push/default if no destination is specified, where destination
    is the repositories you provide through DEST option.

    You can change bundle format with the -t/--type option. See
    :hg:`help bundlespec` for documentation on this format. By default,
    the most appropriate format is used and compression defaults to
    bzip2.

    The bundle file can then be transferred using conventional means
    and applied to another repository with the unbundle or pull
    command. This is useful when direct push and pull are not
    available or when exporting an entire repository is undesirable.

    Applying bundles preserves all changeset contents including
    permissions, copy/rename information, and revision history.

    Returns 0 on success, 1 if no changes found.
    """
    opts = pycompat.byteskwargs(opts)

    revs = None
    if b'rev' in opts:
        revstrings = opts[b'rev']
        revs = logcmdutil.revrange(repo, revstrings)
        if revstrings and not revs:
            raise error.InputError(_(b'no commits to bundle'))

    bundletype = opts.get(b'type', b'bzip2').lower()
    try:
        bundlespec = bundlecaches.parsebundlespec(
            repo, bundletype, strict=False
        )
    except error.UnsupportedBundleSpecification as e:
        raise error.InputError(
            pycompat.bytestr(e),
            hint=_(b"see 'hg help bundlespec' for supported values for --type"),
        )
    cgversion = bundlespec.params[b"cg.version"]

    # Packed bundles are a pseudo bundle format for now.
    if cgversion == b's1':
        raise error.InputError(
            _(b'packed bundles cannot be produced by "hg bundle"'),
            hint=_(b"use 'hg debugcreatestreamclonebundle'"),
        )

    if opts.get(b'all'):
        if dests:
            raise error.InputError(
                _(b"--all is incompatible with specifying destinations")
            )
        if opts.get(b'base'):
            ui.warn(_(b"ignoring --base because --all was specified\n"))
        if opts.get(b'exact'):
            ui.warn(_(b"ignoring --exact because --all was specified\n"))
        base = [nullrev]
    elif opts.get(b'exact'):
        if dests:
            raise error.InputError(
                _(b"--exact is incompatible with specifying destinations")
            )
        if opts.get(b'base'):
            ui.warn(_(b"ignoring --base because --exact was specified\n"))
        base = repo.revs(b'parents(%ld) - %ld', revs, revs)
        if not base:
            base = [nullrev]
    else:
        base = logcmdutil.revrange(repo, opts.get(b'base'))
    if cgversion not in changegroup.supportedoutgoingversions(repo):
        raise error.Abort(
            _(b"repository does not support bundle version %s") % cgversion
        )

    if base:
        if dests:
            raise error.InputError(
                _(b"--base is incompatible with specifying destinations")
            )
        cl = repo.changelog
        common = [cl.node(rev) for rev in base]
        heads = [cl.node(r) for r in revs] if revs else None
        outgoing = discovery.outgoing(repo, common, heads)
        missing = outgoing.missing
        excluded = outgoing.excluded
    else:
        missing = set()
        excluded = set()
        for path in urlutil.get_push_paths(repo, ui, dests):
            other = hg.peer(repo, opts, path.rawloc)
            if revs is not None:
                hex_revs = [repo[r].hex() for r in revs]
            else:
                hex_revs = None
            branches = (path.branch, [])
            head_revs, checkout = hg.addbranchrevs(
                repo, repo, branches, hex_revs
            )
            heads = (
                head_revs
                and pycompat.maplist(repo.lookup, head_revs)
                or head_revs
            )
            outgoing = discovery.findcommonoutgoing(
                repo,
                other,
                onlyheads=heads,
                force=opts.get(b'force'),
                portable=True,
            )
            missing.update(outgoing.missing)
            excluded.update(outgoing.excluded)

    if not missing:
        scmutil.nochangesfound(ui, repo, not base and excluded)
        return 1

    if heads:
        outgoing = discovery.outgoing(
            repo, missingroots=missing, ancestorsof=heads
        )
    else:
        outgoing = discovery.outgoing(repo, missingroots=missing)
    outgoing.excluded = sorted(excluded)

    if cgversion == b'01':  # bundle1
        bversion = b'HG10' + bundlespec.wirecompression
        bcompression = None
    elif cgversion in (b'02', b'03'):
        bversion = b'HG20'
        bcompression = bundlespec.wirecompression
    else:
        raise error.ProgrammingError(
            b'bundle: unexpected changegroup version %s' % cgversion
        )

    # TODO compression options should be derived from bundlespec parsing.
    # This is a temporary hack to allow adjusting bundle compression
    # level without a) formalizing the bundlespec changes to declare it
    # b) introducing a command flag.
    compopts = {}
    complevel = ui.configint(
        b'experimental', b'bundlecomplevel.' + bundlespec.compression
    )
    if complevel is None:
        complevel = ui.configint(b'experimental', b'bundlecomplevel')
    if complevel is not None:
        compopts[b'level'] = complevel

    compthreads = ui.configint(
        b'experimental', b'bundlecompthreads.' + bundlespec.compression
    )
    if compthreads is None:
        compthreads = ui.configint(b'experimental', b'bundlecompthreads')
    if compthreads is not None:
        compopts[b'threads'] = compthreads

    # Bundling of obsmarker and phases is optional as not all clients
    # support the necessary features.
    cfg = ui.configbool
    obsolescence_cfg = cfg(b'experimental', b'evolution.bundle-obsmarker')
    bundlespec.set_param(b'obsolescence', obsolescence_cfg, overwrite=False)
    obs_mand_cfg = cfg(b'experimental', b'evolution.bundle-obsmarker:mandatory')
    bundlespec.set_param(
        b'obsolescence-mandatory', obs_mand_cfg, overwrite=False
    )
    phases_cfg = cfg(b'experimental', b'bundle-phases')
    bundlespec.set_param(b'phases', phases_cfg, overwrite=False)

    bundle2.writenewbundle(
        ui,
        repo,
        b'bundle',
        fname,
        bversion,
        outgoing,
        bundlespec.params,
        compression=bcompression,
        compopts=compopts,
    )


@command(
    b'cat',
    [
        (
            b'o',
            b'output',
            b'',
            _(b'print output to file with formatted name'),
            _(b'FORMAT'),
        ),
        (b'r', b'rev', b'', _(b'print the given revision'), _(b'REV')),
        (b'', b'decode', None, _(b'apply any matching decode filter')),
    ]
    + walkopts
    + formatteropts,
    _(b'[OPTION]... FILE...'),
    helpcategory=command.CATEGORY_FILE_CONTENTS,
    inferrepo=True,
    intents={INTENT_READONLY},
)
def cat(ui, repo, file1, *pats, **opts):
    """output the current or given revision of files

    Print the specified files as they were at the given revision. If
    no revision is given, the parent of the working directory is used.

    Output may be to a file, in which case the name of the file is
    given using a template string. See :hg:`help templates`. In addition
    to the common template keywords, the following formatting rules are
    supported:

    :``%%``: literal "%" character
    :``%s``: basename of file being printed
    :``%d``: dirname of file being printed, or '.' if in repository root
    :``%p``: root-relative path name of file being printed
    :``%H``: changeset hash (40 hexadecimal digits)
    :``%R``: changeset revision number
    :``%h``: short-form changeset hash (12 hexadecimal digits)
    :``%r``: zero-padded changeset revision number
    :``%b``: basename of the exporting repository
    :``\\``: literal "\\" character

    .. container:: verbose

      Template:

      The following keywords are supported in addition to the common template
      keywords and functions. See also :hg:`help templates`.

      :data:    String. File content.
      :path:    String. Repository-absolute path of the file.

    Returns 0 on success.
    """
    opts = pycompat.byteskwargs(opts)
    rev = opts.get(b'rev')
    if rev:
        repo = scmutil.unhidehashlikerevs(repo, [rev], b'nowarn')
    ctx = logcmdutil.revsingle(repo, rev)
    m = scmutil.match(ctx, (file1,) + pats, opts)
    fntemplate = opts.pop(b'output', b'')
    if cmdutil.isstdiofilename(fntemplate):
        fntemplate = b''

    if fntemplate:
        fm = formatter.nullformatter(ui, b'cat', opts)
    else:
        ui.pager(b'cat')
        fm = ui.formatter(b'cat', opts)
    with fm:
        return cmdutil.cat(
            ui, repo, ctx, m, fm, fntemplate, b'', **pycompat.strkwargs(opts)
        )


@command(
    b'clone',
    [
        (
            b'U',
            b'noupdate',
            None,
            _(
                b'the clone will include an empty working '
                b'directory (only a repository)'
            ),
        ),
        (
            b'u',
            b'updaterev',
            b'',
            _(b'revision, tag, or branch to check out'),
            _(b'REV'),
        ),
        (
            b'r',
            b'rev',
            [],
            _(
                b'do not clone everything, but include this changeset'
                b' and its ancestors'
            ),
            _(b'REV'),
        ),
        (
            b'b',
            b'branch',
            [],
            _(
                b'do not clone everything, but include this branch\'s'
                b' changesets and their ancestors'
            ),
            _(b'BRANCH'),
