=back

All the functions return an integer. This is a count of the number of
items returned by the Perl subroutine. The actual items returned by the
subroutine are stored on the Perl stack.

As a general rule you should I<always> check the return value from
these functions.  Even if you are expecting only a particular number of
values to be returned from the Perl subroutine, there is nothing to
stop someone from doing something unexpected--don't say you haven't
been warned.

=head1 FLAG VALUES

The C<flags> parameter in all the I<call_*> functions is one of C<G_VOID>,
C<G_SCALAR>, or C<G_LIST>, which indicate the call context, OR'ed together
with a bit mask of any combination of the other G_* symbols defined below.

=head2  G_VOID

=for apidoc AmnUh||G_VOID

Calls the Perl subroutine in a void context.

This flag has 2 effects:

=over 5

=item 1.

It indicates to the subroutine being called that it is executing in
a void context (if it executes I<wantarray> the result will be the
undefined value).

=item 2.

It ensures that nothing is actually returned from the subroutine.

=back

The value returned by the I<call_*> function indicates how many
items have been returned by the Perl subroutine--in this case it will
be 0.


=head2  G_SCALAR

=for apidoc AmnUh||G_SCALAR

Calls the Perl subroutine in a scalar context.  This is the default
context flag setting for all the I<call_*> functions.

This flag has 2 effects:

=over 5

=item 1.

It indicates to the subroutine being called that it is executing in a
scalar context (if it executes I<wantarray> the result will be false).

=item 2.

It ensures that only a scalar is actually returned from the subroutine.
The subroutine can, of course,  ignore the I<wantarray> and return a
list anyway. If so, then only the last element of the list will be
returned.

=back

The value returned by the I<call_*> function indicates how many
items have been returned by the Perl subroutine - in this case it will
be either 0 or 1.

If 0, then you have specified the G_DISCARD flag.

If 1, then the item actually returned by the Perl subroutine will be
stored on the Perl stack - the section L</Returning a Scalar> shows how
to access this value on the stack.  Remember that regardless of how
many items the Perl subroutine returns, only the last one will be
accessible from the stack - think of the case where only one value is
returned as being a list with only one element.  Any other items that
were returned will not exist by the time control returns from the
I<call_*> function.  The section L</Returning a List in Scalar
Context> shows an example of this behavior.


=head2 G_LIST

=for apidoc AmnUh||G_LIST

Calls the Perl subroutine in a list context. Prior to Perl version
5.35.1 this was called C<G_ARRAY>.

As with G_SCALAR, this flag has 2 effects:

=over 5

=item 1.

It indicates to the subroutine being called that it is executing in a
list context (if it executes I<wantarray> the result will be true).

=item 2.

It ensures that all items returned from the subroutine will be
accessible when control returns from the I<call_*> function.

=back

The value returned by the I<call_*> function indicates how many
items have been returned by the Perl subroutine.

If 0, then you have specified the G_DISCARD flag.

If not 0, then it will be a count of the number of items returned by
the subroutine. These items will be stored on the Perl stack.  The
section L</Returning a List of Values> gives an example of using the
G_LIST flag and the mechanics of accessing the returned items from the
Perl stack.

=head2 G_DISCARD

=for apidoc AmnUh||G_DISCARD

By default, the I<call_*> functions place the items returned from
by the Perl subroutine on the stack.  If you are not interested in
these items, then setting this flag will make Perl get rid of them
automatically for you.  Note that it is still possible to indicate a
context to the Perl subroutine by using either G_SCALAR or G_LIST.

If you do not set this flag then it is I<very> important that you make
sure that any temporaries (i.e., parameters passed to the Perl
subroutine and values returned from the subroutine) are disposed of
yourself.  The section L</Returning a Scalar> gives details of how to
dispose of these temporaries explicitly and the section L</Using Perl to
Dispose of Temporaries> discusses the specific circumstances where you
can ignore the problem and let Perl deal with it for you.

=head2 G_NOARGS

=for apidoc AmnUh||G_NOARGS

Whenever a Perl subroutine is called using one of the I<call_*>
functions, it is assumed by default that parameters are to be passed to
the subroutine.  If you are not passing any parameters to the Perl
subroutine, you can save a bit of time by setting this flag.  It has
the effect of not creating the C<@_> array for the Perl subroutine.

Although the functionality provided by this flag may seem
straightforward, it should be used only if there is a good reason to do
so.  The reason for being cautious is that, even if you have specified
the G_NOARGS flag, it is still possible for the Perl subroutine that
has been called to think that you have passed it parameters.

In fact, what can happen is that the Perl subroutine you have called
can access the C<@_> array from a previous Perl subroutine.  This will
occur when the code that is executing the I<call_*> function has
itself been called from another Perl subroutine. The code below
illustrates this

    sub fred
      { print "@_\n"  }

    sub joe
      { &fred }

    &joe(1,2,3);

This will print

    1 2 3

What has happened is that C<fred> accesses the C<@_> array which
belongs to C<joe>.


=head2 G_EVAL

=for apidoc AmnUh||G_EVAL

It is possible for the Perl subroutine you are calling to terminate
abnormally, e.g., by calling I<die> explicitly or by not actually
existing.  By default, when either of these events occurs, the
process will terminate immediately.  If you want to trap this
type of event, specify the G_EVAL flag.  It will put an I<eval { }>
around the subroutine call.

Whenever control returns from the I<call_*> function you need to
check the C<$@> variable as you would in a normal Perl script.

The value returned from the I<call_*> function is dependent on
what other flags have been specified and whether an error has
occurred.  Here are all the different cases that can occur:

=over 5

=item *

If the I<call_*> function returns normally, then the value
returned is as specified in the previous sections.

=item *

If G_DISCARD is specified, the return value will always be 0.

=item *

If G_LIST is specified I<and> an error has occurred, the return value
will always be 0.

=item *

If G_SCALAR is specified I<and> an error has occurred, the return value
will be 1 and the value on the top of the stack will be I<undef>. This
means that if you have already detected the error by checking C<$@> and
you want the program to continue, you must remember to pop the I<undef>
from the stack.

=back

See L</Using G_EVAL> for details on using G_EVAL.

=head2 G_KEEPERR

=for apidoc AmnUh||G_KEEPERR

Using the G_EVAL flag described above will always set C<$@>: clearing
it if there was no error, and setting it to describe the error if there
was an error in the called code.  This is what you want if your intention
is to handle possible errors, but sometimes you just want to trap errors
and stop them interfering with the rest of the program.

This scenario will mostly be applicable to code that is meant to be called
from within destructors, asynchronous callbacks, and signal handlers.
In such situations, where the code being called has little relation to the
surrounding dynamic context, the main program needs to be insulated from
errors in the called code, even if they can't be handled intelligently.
It may also be useful to do this with code for C<__DIE__> or C<__WARN__>
hooks, and C<tie> functions.

The G_KEEPERR flag is meant to be used in conjunction with G_EVAL in
I<call_*> functions that are used to implement such code, or with
C<eval_sv>.  This flag has no effect on the C<call_*> functions when
G_EVAL is not used.

When G_KEEPERR is used, any error in the called code will terminate the
call as usual, and the error will not propagate beyond the call (as usual
for G_EVAL), but it will not go into C<$@>.  Instead the error will be
converted into a warning, prefixed with the string "\t(in cleanup)".
This can be disabled using C<no warnings 'misc'>.  If there is no error,
C<$@> will not be cleared.

Note that the G_KEEPERR flag does not propagate into inner evals; these
may still set C<$@>.

The G_KEEPERR flag was introduced in Perl version 5.002.

See L</Using G_KEEPERR> for an example of a situation that warrants the
use of this flag.

=head2 Determining the Context

As mentioned above, you can determine the context of the currently
executing subroutine in Perl with I<wantarray>.  The equivalent test
can be made in C by using the C<GIMME_V> macro, which returns
C<G_LIST> if you have been called in a list context, C<G_SCALAR> if
in a scalar context, or C<G_VOID> if in a void context (i.e., the
return value will not be used).  An older version of this macro is
called C<GIMME>; in a void context it returns C<G_SCALAR> instead of
C<G_VOID>.  An example of using the C<GIMME_V> macro is shown in
section L</Using GIMME_V>.

=head1 EXAMPLES

Enough of the definition talk! Let's have a few examples.

Perl provides many macros to assist in accessing the Perl stack.
Wherever possible, these macros should always be used when interfacing
to Perl internals.  We hope this should make the code less vulnerable
to any changes made to Perl in the future.

Another point worth noting is that in the first series of examples I
have made use of only the I<call_pv> function.  This has been done
to keep the code simpler and ease you into the topic.  Wherever
possible, if the choice is between using I<call_pv> and
I<call_sv>, you should always try to use I<call_sv>.  See
L</Using call_sv> for details.

=head2 No Parameters, Nothing Returned

This first trivial example will call a Perl subroutine, I<PrintUID>, to
print out the UID of the process.

    sub PrintUID
    {
        print "UID is $<\n";
    }

and here is a C function to call it

    static void
    call_PrintUID()
    {
        dSP;

        PUSHMARK(SP);
        call_pv("PrintUID", G_DISCARD|G_NOARGS);
    }

Simple, eh?

A few points to note about this example:

=over 5

=item 1.

Ignore C<dSP> and C<PUSHMARK(SP)> for now. They will be discussed in
the next example.

=item 2.

We aren't passing any parameters to I<PrintUID> so G_NOARGS can be
specified.

=item 3.

We aren't interested in anything returned from I<PrintUID>, so
G_DISCARD is specified. Even if I<PrintUID> was changed to
return some value(s), having specified G_DISCARD will mean that they
will be wiped by the time control returns from I<call_pv>.

=item 4.

As I<call_pv> is being used, the Perl subroutine is specified as a
C string. In this case the subroutine name has been 'hard-wired' into the
code.

=item 5.

Because we specified G_DISCARD, it is not necessary to check the value
returned from I<call_pv>. It will always be 0.

=back

=head2 Passing Parameters

Now let's make a slightly more complex example. This time we want to
call a Perl subroutine, C<LeftString>, which will take 2 parameters--a
string ($s) and an integer ($n).  The subroutine will simply
print the first $n characters of the string.

So the Perl subroutine would look like this:

    sub LeftString
    {
        my($s, $n) = @_;
        print substr($s, 0, $n), "\n";
    }

The C function required to call I<LeftString> would look like this:

    static void
    call_LeftString(a, b)
    char * a;
    int b;
    {
        dSP;

	ENTER;
        SAVETMPS;

        PUSHMARK(SP);
        EXTEND(SP, 2);
        PUSHs(sv_2mortal(newSVpv(a, 0)));
        PUSHs(sv_2mortal(newSViv(b)));
        PUTBACK;

        call_pv("LeftString", G_DISCARD);

        FREETMPS;
        LEAVE;
    }

Here are a few notes on the C function I<call_LeftString>.

=over 5

=item 1.

Parameters are passed to the Perl subroutine using the Perl stack.
This is the purpose of the code beginning with the line C<dSP> and
ending with the line C<PUTBACK>.  The C<dSP> declares a local copy
of the stack pointer.  This local copy should B<always> be accessed
as C<SP>.

=item 2.

If you are going to put something onto the Perl stack, you need to know
where to put it. This is the purpose of the macro C<dSP>--it declares
and initializes a I<local> copy of the Perl stack pointer.

All the other macros which will be used in this example require you to
have used this macro.

The exception to this rule is if you are calling a Perl subroutine
directly from an XSUB function. In this case it is not necessary to
use the C<dSP> macro explicitly--it will be declared for you
automatically.

=item 3.

Any parameters to be pushed onto the stack should be bracketed by the
C<PUSHMARK> and C<PUTBACK> macros.  The purpose of these two macros, in
this context, is to count the number of parameters you are
pushing automatically.  Then whenever Perl is creating the C<@_> array for the
subroutine, it knows how big to make it.

The C<PUSHMARK> macro tells Perl to make a mental note of the current
stack pointer. Even if you aren't passing any parameters (like the
example shown in the section L</No Parameters, Nothing Returned>) you
must still call the C<PUSHMARK> macro before you can call any of the
I<call_*> functions--Perl still needs to know that there are no
parameters.

The C<PUTBACK> macro sets the global copy of the stack pointer to be
the same as our local copy. If we didn't do this, I<call_pv>
wouldn't know where the two parameters we pushed were--remember that
up to now all the stack pointer manipulation we have done is with our
local copy, I<not> the global copy.

=item 4.

Next, we come to EXTEND and PUSHs. This is where the parameters
actually get pushed onto the stack. In this case we are pushing a
string and an integer.

Alternatively you can use the XPUSHs() macro, which combines a
C<EXTEND(SP, 1)> and C<PUSHs()>.  This is less efficient if you're
pushing multiple values.

See L<perlguts/"XSUBs and the Argument Stack"> for details
on how the PUSH macros work.

=item 5.

Because we created temporary values (by means of sv_2mortal() calls)
we will have to tidy up the Perl stack and dispose of mortal SVs.

This is the purpose of

    ENTER;
    SAVETMPS;

at the start of the function, and

    FREETMPS;
    LEAVE;

at the end. The C<ENTER>/C<SAVETMPS> pair creates a boundary for any
temporaries we create.  This means that the temporaries we get rid of
will be limited to those which were created after these calls.

The C<FREETMPS>/C<LEAVE> pair will get rid of any values returned by
the Perl subroutine (see next example), plus it will also dump the
mortal SVs we have created.  Having C<ENTER>/C<SAVETMPS> at the
beginning of the code makes sure that no other mortals are destroyed.

Think of these macros as working a bit like C<{> and C<}> in Perl
to limit the scope of local variables.

See the section L</Using Perl to Dispose of Temporaries> for details of
an alternative to using these macros.

=item 6.

Finally, I<LeftString> can now be called via the I<call_pv> function.
The only flag specified this time is G_DISCARD. Because we are passing
2 parameters to the Perl subroutine this time, we have not specified
G_NOARGS.

=back

=head2 Returning a Scalar

Now for an example of dealing with the items returned from a Perl
subroutine.

Here is a Perl subroutine, I<Adder>, that takes 2 integer parameters
and simply returns their sum.

    sub Adder
    {
        my($x, $y) = @_;
        $x + $y;
    }

Because we are now concerned with the return value from I<Adder>, the C
function required to call it is now a bit more complex.

    static void
    call_Adder(a, b)
    int a;
    int b;
    {
        dSP;
        int count;

        ENTER;
        SAVETMPS;

        PUSHMARK(SP);
        EXTEND(SP, 2);
        PUSHs(sv_2mortal(newSViv(a)));
        PUSHs(sv_2mortal(newSViv(b)));
        PUTBACK;

        count = call_pv("Adder", G_SCALAR);

        SPAGAIN;

        if (count != 1)
            croak("Big trouble\n");

        printf ("The sum of %d and %d is %d\n", a, b, POPi);

        PUTBACK;
        FREETMPS;
        LEAVE;
    }

Points to note this time are

=over 5

=item 1.

The only flag specified this time was G_SCALAR. That means that the C<@_>
array will be created and that the value returned by I<Adder> will
still exist after the call to I<call_pv>.

=item 2.

The purpose of the macro C<SPAGAIN> is to refresh the local copy of the
stack pointer. This is necessary because it is possible that the memory
allocated to the Perl stack has been reallocated during the
I<call_pv> call.

If you are making use of the Perl stack pointer in your code you must
always refresh the local copy using SPAGAIN whenever you make use
of the I<call_*> functions or any other Perl internal function.

=item 3.

Although only a single value was expected to be returned from I<Adder>,
it is still good practice to check the return code from I<call_pv>
anyway.

Expecting a single value is not quite the same as knowing that there
will be one. If someone modified I<Adder> to return a list and we
didn't check for that possibility and take appropriate action the Perl
stack would end up in an inconsistent state. That is something you
I<really> don't want to happen ever.

=item 4.

The C<POPi> macro is used here to pop the return value from the stack.
In this case we wanted an integer, so C<POPi> was used.


Here is the complete list of POP macros available, along with the types
they return.

    POPs	SV
    POPp	pointer (PV)
    POPpbytex   pointer to bytes (PV)
    POPn	double (NV)
    POPi	integer (IV)
    POPu        unsigned integer (UV)
    POPl	long
    POPul       unsigned long

Since these macros have side-effects don't use them as arguments to
macros that may evaluate their argument several times, for example:

  /* Bad idea, don't do this */
  STRLEN len;
  const char *s = SvPV(POPs, len);

Instead, use a temporary:

  STRLEN len;
  SV *sv = POPs;
  const char *s = SvPV(sv, len);

or a macro that guarantees it will evaluate its arguments only once:

  STRLEN len;
  const char *s = SvPVx(POPs, len);

=item 5.

The final C<PUTBACK> is used to leave the Perl stack in a consistent
state before exiting the function.  This is necessary because when we
popped the return value from the stack with C<POPi> it updated only our
local copy of the stack pointer.  Remember, C<PUTBACK> sets the global
stack pointer to be the same as our local copy.

=back


=head2 Returning a List of Values

Now, let's extend the previous example to return both the sum of the
parameters and the difference.

Here is the Perl subroutine

    sub AddSubtract
    {
       my($x, $y) = @_;
       ($x+$y, $x-$y);
    }

and this is the C function

    static void
    call_AddSubtract(a, b)
    int a;
    int b;
    {
        dSP;
        int count;

        ENTER;
        SAVETMPS;

        PUSHMARK(SP);
        EXTEND(SP, 2);
        PUSHs(sv_2mortal(newSViv(a)));
        PUSHs(sv_2mortal(newSViv(b)));
        PUTBACK;

        count = call_pv("AddSubtract", G_LIST);

        SPAGAIN;

        if (count != 2)
            croak("Big trouble\n");

        printf ("%d - %d = %d\n", a, b, POPi);
        printf ("%d + %d = %d\n", a, b, POPi);

        PUTBACK;
        FREETMPS;
        LEAVE;
    }

If I<call_AddSubtract> is called like this

    call_AddSubtract(7, 4);

then here is the output

    7 - 4 = 3
    7 + 4 = 11

Notes

=over 5

=item 1.

We wanted list context, so G_LIST was used.

=item 2.

Not surprisingly C<POPi> is used twice this time because we were
retrieving 2 values from the stack. The important thing to note is that
when using the C<POP*> macros they come off the stack in I<reverse>
order.

=back

=head2 Returning a List in Scalar Context

Say the Perl subroutine in the previous section was called in a scalar
context, like this

    static void
    call_AddSubScalar(a, b)
    int a;
    int b;
    {
        dSP;
        int count;
        int i;

        ENTER;
        SAVETMPS;

        PUSHMARK(SP);
        EXTEND(SP, 2);
        PUSHs(sv_2mortal(newSViv(a)));
        PUSHs(sv_2mortal(newSViv(b)));
        PUTBACK;

        count = call_pv("AddSubtract", G_SCALAR);

        SPAGAIN;

        printf ("Items Returned = %d\n", count);

        for (i = 1; i <= count; ++i)
            printf ("Value %d = %d\n", i, POPi);

        PUTBACK;
        FREETMPS;
        LEAVE;
    }

The other modification made is that I<call_AddSubScalar> will print the
number of items returned from the Perl subroutine and their value (for
simplicity it assumes that they are integer).  So if
I<call_AddSubScalar> is called

    call_AddSubScalar(7, 4);

then the output will be

    Items Returned = 1
    Value 1 = 3

In this case the main point to note is that only the last item in the
list is returned from the subroutine. I<AddSubtract> actually made it back to
I<call_AddSubScalar>.


=head2 Returning Data from Perl via the Parameter List

It is also possible to return values directly via the parameter
list--whether it is actually desirable to do it is another matter entirely.

The Perl subroutine, I<Inc>, below takes 2 parameters and increments
each directly.

    sub Inc
    {
        ++ $_[0];
        ++ $_[1];
    }

and here is a C function to call it.

    static void
    call_Inc(a, b)
    int a;
    int b;
    {
        dSP;
        int count;
        SV * sva;
        SV * svb;

        ENTER;
        SAVETMPS;

        sva = sv_2mortal(newSViv(a));
        svb = sv_2mortal(newSViv(b));

        PUSHMARK(SP);
        EXTEND(SP, 2);
        PUSHs(sva);
        PUSHs(svb);
        PUTBACK;

        count = call_pv("Inc", G_DISCARD);

        if (count != 0)
            croak ("call_Inc: expected 0 values from 'Inc', got %d\n",
                   count);

        printf ("%d + 1 = %d\n", a, SvIV(sva));
        printf ("%d + 1 = %d\n", b, SvIV(svb));

	FREETMPS;
	LEAVE;
    }

To be able to access the two parameters that were pushed onto the stack
after they return from I<call_pv> it is necessary to make a note
of their addresses--thus the two variables C<sva> and C<svb>.

The reason this is necessary is that the area of the Perl stack which
held them will very likely have been overwritten by something else by
the time control returns from I<call_pv>.




=head2 Using G_EVAL

Now an example using G_EVAL. Below is a Perl subroutine which computes
the difference of its 2 parameters. If this would result in a negative
result, the subroutine calls I<die>.

    sub Subtract
    {
        my ($x, $y) = @_;

        die "death can be fatal\n" if $x < $y;

        $x - $y;
    }

and some C to call it

 static void
 call_Subtract(a, b)
 int a;
 int b;
 {
     dSP;
     int count;
     SV *err_tmp;

     ENTER;
     SAVETMPS;

     PUSHMARK(SP);
     EXTEND(SP, 2);
     PUSHs(sv_2mortal(newSViv(a)));
     PUSHs(sv_2mortal(newSViv(b)));
     PUTBACK;

     count = call_pv("Subtract", G_EVAL|G_SCALAR);

     SPAGAIN;

     /* Check the eval first */
     err_tmp = ERRSV;
     if (SvTRUE(err_tmp))
     {
         printf ("Uh oh - %s\n", SvPV_nolen(err_tmp));
         POPs;
     }
     else
     {
       if (count != 1)
        croak("call_Subtract: wanted 1 value from 'Subtract', got %d\n",
              count);

         printf ("%d - %d = %d\n", a, b, POPi);
     }

     PUTBACK;
     FREETMPS;
     LEAVE;
 }

If I<call_Subtract> is called thus

    call_Subtract(4, 5)

the following will be printed

    Uh oh - death can be fatal

Notes

=over 5

=item 1.

We want to be able to catch the I<die> so we have used the G_EVAL
flag.  Not specifying this flag would mean that the program would
terminate immediately at the I<die> statement in the subroutine
I<Subtract>.

=item 2.

The code

    err_tmp = ERRSV;
    if (SvTRUE(err_tmp))
    {
        printf ("Uh oh - %s\n", SvPV_nolen(err_tmp));
        POPs;
    }

is the direct equivalent of this bit of Perl

    print "Uh oh - $@\n" if $@;

C<PL_errgv> is a perl global of type C<GV *> that points to the symbol
table entry containing the error.  C<ERRSV> therefore refers to the C
equivalent of C<$@>.  We use a local temporary, C<err_tmp>, since
C<ERRSV> is a macro that calls a function, and C<SvTRUE(ERRSV)> would
end up calling that function multiple times.

=for apidoc AmnUh|GV *|PL_errgv

=item 3.

Note that the stack is popped using C<POPs> in the block where
C<SvTRUE(err_tmp)> is true.  This is necessary because whenever a
I<call_*> function invoked with G_EVAL|G_SCALAR returns an error,
the top of the stack holds the value I<undef>. Because we want the
program to continue after detecting this error, it is essential that
the stack be tidied up by removing the I<undef>.

=back


=head2 Using G_KEEPERR

Consider this rather facetious example, where we have used an XS
version of the call_Subtract example above inside a destructor:

    package Foo;
    sub new { bless {}, $_[0] }
    sub Subtract {
        my($x,$y) = @_;
        die "death can be fatal" if $x < $y;
        $x - $y;
    }
    sub DESTROY { call_Subtract(5, 4); }
    sub foo { die "foo dies"; }

    package main;
    {
	my $foo = Foo->new;
	eval { $foo->foo };
    }
    print "Saw: $@" if $@;             # should be, but isn't

This example will fail to recognize that an error occurred inside the
C<eval {}>.  Here's why: the call_Subtract code got executed while perl
was cleaning up temporaries when exiting the outer braced block, and because
call_Subtract is implemented with I<call_pv> using the G_EVAL
flag, it promptly reset C<$@>.  This results in the failure of the
outermost test for C<$@>, and thereby the failure of the error trap.

Appending the G_KEEPERR flag, so that the I<call_pv> call in
call_Subtract reads:

        count = call_pv("Subtract", G_EVAL|G_SCALAR|G_KEEPERR);

will preserve the error and restore reliable error handling.

=head2 Using call_sv

In all the previous examples I have 'hard-wired' the name of the Perl
subroutine to be called from C.  Most of the time though, it is more
convenient to be able to specify the name of the Perl subroutine from
within the Perl script, and you'll want to use
L<call_sv|perlapi/call_sv>.

Consider the Perl code below

    sub fred
    {
        print "Hello there\n";
    }

    CallSubPV("fred");

Here is a snippet of XSUB which defines I<CallSubPV>.

    void
    CallSubPV(name)
    	char *	name
    	CODE:
	PUSHMARK(SP);
	call_pv(name, G_DISCARD|G_NOARGS);

That is fine as far as it goes. The thing is, the Perl subroutine
can be specified as only a string, however, Perl allows references
to subroutines and anonymous subroutines.
This is where I<call_sv> is useful.

The code below for I<CallSubSV> is identical to I<CallSubPV> except
that the C<name> parameter is now defined as an SV* and we use
I<call_sv> instead of I<call_pv>.

    void
    CallSubSV(name)
    	SV *	name
    	CODE:
	PUSHMARK(SP);
	call_sv(name, G_DISCARD|G_NOARGS);

Because we are using an SV to call I<fred> the following can all be used:

    CallSubSV("fred");
    CallSubSV(\&fred);
    $ref = \&fred;
    CallSubSV($ref);
    CallSubSV( sub { print "Hello there\n" } );
