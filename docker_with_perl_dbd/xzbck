	0xA610,
	0xA6F3,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C7,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAADF,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE50,
	0xFE53,
	0xFE54,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0xFF64,
	0xFF65,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A56,
	0x10A58,
	0x10AF0,
	0x10AF6,
	0x10B3A,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x10F55,
	0x10F5A,
	0x10F86,
	0x10F8A,
	0x11047,
	0x1104E,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144E,
	0x1145A,
	0x1145C,
	0x115C2,
	0x115C6,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11944,
	0x11945,
	0x11946,
	0x11947,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11AA1,
	0x11AA3,
	0x11C41,
	0x11C44,
	0x11C71,
	0x11C72,
	0x11EF7,
	0x11EF9,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x16E97,
	0x16E99,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8B
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_TERM_invlist[] = {  /* for EBCDIC 037 */
	217,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x5A,
	0x5B,
	0x5E,
	0x5F,
	0x6B,
	0x6C,
	0x6F,
	0x70,
	0x7A,
	0x7B,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x589,
	0x58A,
	0x5C3,
	0x5C4,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x70B,
	0x70C,
	0x70D,
	0x7F8,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0xE5A,
	0xE5C,
	0xF08,
	0xF09,
	0xF0D,
	0xF13,
	0x104A,
	0x104C,
	0x1361,
	0x1369,
	0x166E,
	0x166F,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17DA,
	0x17DB,
	0x1802,
	0x1806,
	0x1808,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5D,
	0x1B60,
	0x1B7D,
	0x1B7F,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x2E41,
	0x2E42,
	0x2E4C,
	0x2E4D,
	0x2E4E,
	0x2E50,
	0x2E53,
	0x2E55,
	0x3001,
	0x3003,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA6F3,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C7,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAADF,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE50,
	0xFE53,
	0xFE54,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0xFF64,
	0xFF65,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A56,
	0x10A58,
	0x10AF0,
	0x10AF6,
	0x10B3A,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x10F55,
	0x10F5A,
	0x10F86,
	0x10F8A,
	0x11047,
	0x1104E,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144E,
	0x1145A,
	0x1145C,
	0x115C2,
	0x115C6,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11944,
	0x11945,
	0x11946,
	0x11947,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11AA1,
	0x11AA3,
	0x11C41,
	0x11C44,
	0x11C71,
	0x11C72,
	0x11EF7,
	0x11EF9,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x16E97,
	0x16E99,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8B
};

#  endif	/* EBCDIC 037 */

static const UV UNI_TFNG_invlist[] = {  /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D71,
	0x2D7F,
	0x2D80
};

static const UV UNI_TGLG_invlist[] = {  /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1700,
	0x1716,
	0x171F,
	0x1720,
	0x1735,
	0x1737
};

static const UV UNI_THAA_invlist[] = {  /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60C,
	0x60D,
	0x61B,
	0x61D,
	0x61F,
	0x620,
	0x660,
	0x66A,
	0x780,
	0x7B2,
	0xFDF2,
	0xFDF3,
	0xFDFD,
	0xFDFE
};

static const UV UNI_THAI_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE01,
	0xE3B,
	0xE40,
	0xE5C
};

static const UV UNI_TIBT_invlist[] = {  /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFD5,
	0xFD9,
	0xFDB
};

static const UV UNI_TIRH_invlist[] = {  /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0x1CF2,
	0x1CF3,
	0xA830,
	0xA83A,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA
};

static const UV UNI_TNSA_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16A70,
	0x16ABF,
	0x16AC0,
	0x16ACA
};

static const UV UNI_TOTO_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1E290,
	0x1E2AF
};

static const UV UNI_TRANSPORTANDMAP_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F680,
	0x1F700
};

static const UV UNI_UCAS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1400,
	0x1680
};

static const UV UNI_UCASEXT_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x18B0,
	0x1900
};

static const UV UNI_UCASEXTA_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11AB0,
	0x11AC0
};

static const UV UNI_UGAR_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10380,
	0x1039E,
	0x1039F,
	0x103A0
};

static const UV UNI_UIDEO_invlist[] = {  /* for all charsets */
	31,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA000,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0x20000,
	0x2A6E0,
	0x2A700,
	0x2B739,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x30000,
	0x3134B
};

static const UV UNI_VAI_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA500,
	0xA62C
};

static const UV UNI_VEDICEXT_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1CD0,
	0x1D00
};

static const UV UNI_VERTICALFORMS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFE10,
	0xFE20
};

static const UV UNI_VITH_invlist[] = {  /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10570,
	0x1057B,
	0x1057C,
	0x1058B,
	0x1058C,
	0x10593,
	0x10594,
	0x10596,
	0x10597,
	0x105A2,
	0x105A3,
	0x105B2,
	0x105B3,
	0x105BA,
	0x105BB,
	0x105BD
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_VO__R_invlist[] = {  /* for ASCII/Latin1 */
	179,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA7,
	0xA8,
	0xA9,
	0xAA,
	0xAE,
	0xAF,
	0xB1,
	0xB2,
	0xBC,
	0xBF,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2EA,
	0x2EC,
	0x1100,
	0x1200,
	0x1401,
	0x1680,
	0x18B0,
	0x1900,
	0x2016,
	0x2017,
	0x2020,
	0x2022,
	0x2030,
	0x2032,
	0x203B,
	0x203D,
	0x2042,
	0x2043,
	0x2047,
	0x204A,
	0x2051,
	0x2052,
	0x2065,
	0x2066,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x2100,
	0x2102,
	0x2103,
	0x210A,
	0x210F,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2140,
	0x2145,
	0x214B,
	0x214C,
	0x214E,
	0x214F,
	0x218A,
	0x218C,
	0x2190,
	0x221E,
	0x221F,
	0x2234,
	0x2236,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2324,
	0x232C,
	0x237D,
	0x239B,
	0x23BE,
	0x23CE,
	0x23CF,
	0x23D0,
	0x23D1,
	0x23DC,
	0x23E2,
	0x2423,
	0x2424,
	0x2500,
	0x25A0,
	0x261A,
	0x2620,
	0x2768,
	0x2776,
	0x2794,
	0x2B12,
	0x2B30,
	0x2B50,
	0x2B5A,
	0x2B97,
	0x2B98,
	0x2BB8,
	0x2BD2,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2E50,
	0x2E52,
	0x2E80,
	0xA4D0,
	0xA960,
	0xA980,
	0xAC00,
	0xD800,
	0xE000,
	0xFB00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE49,
	0xFE50,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE67,
	0xFE70,
	0xFF01,
	0xFF0D,
	0xFF0E,
	0xFF1C,
	0xFF1F,
	0xFF61,
	0xFFE0,
	0xFFE8,
	0xFFF0,
	0xFFF9,
	0xFFFC,
	0xFFFE,
	0x10980,
	0x109A0,
	0x11580,
	0x11600,
	0x11A00,
	0x11AC0,
	0x13000,
	0x13440,
	0x14400,
	0x14680,
	0x16FE0,
	0x18D80,
	0x1AFF0,
	0x1B300,
	0x1CF00,
	0x1CFD0,
	0x1D000,
	0x1D200,
	0x1D2E0,
	0x1D380,
	0x1D800,
	0x1DAB0,
	0x1F000,
	0x1F800,
	0x1F900,
	0x1FB00,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_VO__R_invlist[] = {  /* for EBCDIC 1047 */
	177,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8F,
	0x90,
	0xAF,
	0xB0,
	0xB4,
	0xB6,
	0xB7,
	0xBA,
	0xBF,
	0xC0,
	0xE1,
	0xE2,
	0x2EA,
	0x2EC,
	0x1100,
	0x1200,
	0x1401,
	0x1680,
	0x18B0,
	0x1900,
	0x2016,
	0x2017,
	0x2020,
	0x2022,
	0x2030,
	0x2032,
	0x203B,
	0x203D,
	0x2042,
	0x2043,
	0x2047,
	0x204A,
	0x2051,
	0x2052,
	0x2065,
	0x2066,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x2100,
	0x2102,
	0x2103,
	0x210A,
	0x210F,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2140,
	0x2145,
	0x214B,
	0x214C,
	0x214E,
	0x214F,
	0x218A,
	0x218C,
	0x2190,
	0x221E,
	0x221F,
	0x2234,
	0x2236,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2324,
	0x232C,
	0x237D,
	0x239B,
	0x23BE,
	0x23CE,
	0x23CF,
	0x23D0,
	0x23D1,
	0x23DC,
	0x23E2,
	0x2423,
	0x2424,
	0x2500,
	0x25A0,
	0x261A,
	0x2620,
	0x2768,
	0x2776,
	0x2794,
	0x2B12,
	0x2B30,
	0x2B50,
	0x2B5A,
	0x2B97,
	0x2B98,
	0x2BB8,
	0x2BD2,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2E50,
	0x2E52,
	0x2E80,
	0xA4D0,
	0xA960,
	0xA980,
	0xAC00,
	0xD800,
	0xE000,
	0xFB00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE49,
	0xFE50,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE67,
	0xFE70,
	0xFF01,
	0xFF0D,
	0xFF0E,
	0xFF1C,
	0xFF1F,
	0xFF61,
	0xFFE0,
	0xFFE8,
	0xFFF0,
	0xFFF9,
	0xFFFC,
	0xFFFE,
	0x10980,
	0x109A0,
	0x11580,
	0x11600,
	0x11A00,
	0x11AC0,
	0x13000,
	0x13440,
	0x14400,
	0x14680,
	0x16FE0,
	0x18D80,
	0x1AFF0,
	0x1B300,
	0x1CF00,
	0x1CFD0,
	0x1D000,
	0x1D200,
	0x1D2E0,
	0x1D380,
	0x1D800,
	0x1DAB0,
	0x1F000,
	0x1F800,
	0x1F900,
	0x1FB00,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};
