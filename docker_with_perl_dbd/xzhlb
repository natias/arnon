the programs in question one uses terminfo and the other uses termcap
(also see |+terminfo|).

In your particular problem, you are looking for the control sequences
^[[?47h and ^[[?47l.  These switch between xterms alternate and main screen
buffer.  As a quick workaround a command sequence like >
	echo -n "^[[?47h"; vim ... ; echo -n "^[[?47l"
may do what you want.  (My notation ^[ means the ESC character, further down
you'll see that the databases use \E instead).

On startup, vim echoes the value of the termcap variable ti (terminfo:
smcup) to the terminal.  When exiting, it echoes te (terminfo: rmcup).  Thus
these two variables are the correct place where the above mentioned control
sequences should go.

Compare your xterm termcap entry (found in /etc/termcap) with your xterm
terminfo entry (retrieved with "infocmp -C xterm").  Both should contain
entries similar to: >
	:te=\E[2J\E[?47l\E8:ti=\E7\E[?47h:

PS: If you find any difference, someone (your sysadmin?) should better check
    the complete termcap and terminfo database for consistency.

NOTE 1: If you recompile Vim with FEAT_XTERM_SAVE defined in feature.h, the
builtin xterm will include the mentioned "te" and "ti" entries.

NOTE 2: If you want to disable the screen switching, and you don't want to
change your termcap, you can add these lines to your .vimrc: >
	:set t_ti= t_te=

==============================================================================
Scrolling in Insert mode				*scroll-insert*

If you are in insert mode and you want to see something that is just off the
screen, you can use CTRL-X CTRL-E and CTRL-X CTRL-Y to scroll the screen.
						|i_CTRL-X_CTRL-E|

To make this easier, you could use these mappings: >
	:inoremap <C-E> <C-X><C-E>
	:inoremap <C-Y> <C-X><C-Y>
(Type this literally, make sure the '<' flag is not in 'cpoptions').
You then lose the ability to copy text from the line above/below the cursor
|i_CTRL-E|.

Also consider setting 'scrolloff' to a larger value, so that you can always see
some context around the cursor.  If 'scrolloff' is bigger than half the window
height, the cursor will always be in the middle and the text is scrolled when
the cursor is moved up/down.

==============================================================================
Smooth scrolling					*scroll-smooth*

If you like the scrolling to go a bit smoother, you can use these mappings: >
	:map <C-U> <C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y>
	:map <C-D> <C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E>

(Type this literally, make sure the '<' flag is not in 'cpoptions').

==============================================================================
Correcting common typing mistakes			*type-mistakes*

When there are a few words that you keep on typing in the wrong way, make
abbreviations that correct them.  For example: >
	:ab teh the
	:ab fro for

==============================================================================
Counting words, lines, etc.				*count-items*

To count how often any pattern occurs in the current buffer use the substitute
command and add the 'n' flag to avoid the substitution.  The reported number
of substitutions is the number of items.  Examples: >

	:%s/./&/gn		characters
	:%s/\i\+/&/gn		words
	:%s/^//n		lines
	:%s/the/&/gn		"the" anywhere
	:%s/\<the\>/&/gn	"the" as a word

You might want to reset 'hlsearch' or do ":nohlsearch".
Add the 'e' flag if you don't want an error when there are no matches.

An alternative is using |v_g_CTRL-G| in Visual mode.

If you want to find matches in multiple files use |:vimgrep|.

							*count-bytes*
If you want to count bytes, you can use this:

	Visually select the characters (block is also possible)
	Use "y" to yank the characters
	Use the strlen() function: >
		:echo strlen(@")
A line break is counted for one byte.

==============================================================================
Restoring the cursor position				*restore-position*

Sometimes you want to write a mapping that makes a change somewhere in the
file and restores the cursor position, without scrolling the text.  For
example, to change the date mark in a file: >
   :map <F2> msHmtgg/Last [cC]hange:\s*/e+1<CR>"_D"=strftime("%Y %b %d")<CR>p'tzt`s

Breaking up saving the position:
	ms	store cursor position in the 's' mark
	H	go to the first line in the window
	mt	store this position in the 't' mark

Breaking up restoring the position:
	't	go to the line previously at the top of the window
	zt	scroll to move this line to the top of the window
	`s	jump to the original position of the cursor

For something more advanced see |winsaveview()| and |winrestview()|.

==============================================================================
Renaming files						*rename-files*

Say I have a directory with the following files in them (directory picked at
random :-):

buffer.c
charset.c
digraph.c
...

and I want to rename *.c *.bla.  I'd do it like this: >

	$ vim
	:r !ls *.c
	:%s/\(.*\).c/mv & \1.bla
	:w !sh
	:q!

==============================================================================
Change a name in multiple files				*change-name*

Example for using a script file to change a name in several files:

	Create a file "subs.vim" containing substitute commands and a :update
	command: >
		:%s/Jones/Smith/g
		:%s/Allen/Peter/g
		:update
<
	Execute Vim on all files you want to change, and source the script for
	each argument: >

		vim *.let
		argdo source subs.vim

See |:argdo|.

==============================================================================
Speeding up external commands				*speed-up*

In some situations, execution of an external command can be very slow.  This
can also slow down wildcard expansion on Unix.  Here are a few suggestions to
increase the speed.

If your .cshrc (or other file, depending on the shell used) is very long, you
should separate it into a section for interactive use and a section for
non-interactive use (often called secondary shells).  When you execute a
command from Vim like ":!ls", you do not need the interactive things (for
example, setting the prompt).  Put the stuff that is not needed after these
lines: >

	if ($?prompt == 0) then
		exit 0
	endif

Another way is to include the "-f" flag in the 'shell' option, e.g.: >

	:set shell=csh\ -f

(the backslash is needed to include the space in the option).
This will make csh completely skip the use of the .cshrc file.  This may cause
some things to stop working though.

==============================================================================
Useful mappings						*useful-mappings*

Here are a few mappings that some people like to use.

							*map-backtick*  >
	:map ' `
Make the single quote work like a backtick.  Puts the cursor on the column of
a mark, instead of going to the first non-blank character in the line.

							*emacs-keys*
For Emacs-style editing on the command-line: >
	" start of line
	:cnoremap <C-A>		<Home>
	" back one character
	:cnoremap <C-B>		<Left>
	" delete character under cursor
	:cnoremap <C-D>		<Del>
	" end of line
	:cnoremap <C-E>		<End>
	" forward one character
	:cnoremap <C-F>		<Right>
	" recall newer command-line
	:cnoremap <C-N>		<Down>
	" recall previous (older) command-line
	:cnoremap <C-P>		<Up>
	" back one word
	:cnoremap <Esc><C-B>	<S-Left>
	" forward one word
	:cnoremap <Esc><C-F>	<S-Right>

NOTE: This requires that the '<' flag is excluded from 'cpoptions'. |<>|

							*format-bullet-list*
This mapping will format any bullet list.  It requires that there is an empty
line above and below each list entry.  The expression commands are used to
be able to give comments to the parts of the mapping. >

	:let m =     ":map _f  :set ai<CR>"   " need 'autoindent' set
	:let m ..= "{O<Esc>"		      " add empty line above item
	:let m ..= "}{)^W"		      " move to text after bullet
	:let m ..= "i     <CR>     <Esc>"     " add space for indent
	:let m ..= "gq}"		      " format text after the bullet
	:let m ..= "{dd"		      " remove the empty line
	:let m ..= "5lDJ"		      " put text after bullet
	:execute m			      |" define the mapping

(<> notation |<>|.  Note that this is all typed literally.  ^W is "^" "W", not
CTRL-W.  You can copy/paste this into Vim if '<' is not included in
'cpoptions'.)

Note that the last comment starts with |", because the ":execute" command
doesn't accept a comment directly.

You also need to set 'textwidth' to a non-zero value, e.g., >
	:set tw=70

A mapping that does about the same, but takes the indent for the list from the
first line (Note: this mapping is a single long line with a lot of spaces): >
	:map _f :set ai<CR>}{a                                                          <Esc>WWmmkD`mi<CR><Esc>kkddpJgq}'mJO<Esc>j
<
							*collapse*
These two mappings reduce a sequence of empty (;b) or blank (;n) lines into a
single line >
    :map ;b   GoZ<Esc>:g/^$/.,/./-j<CR>Gdd
    :map ;n   GoZ<Esc>:g/^[ <Tab>]*$/.,/[^ <Tab>]/-j<CR>Gdd

==============================================================================
Compressing the help files				*gzip-helpfile*

For those of you who are really short on disk space, you can compress the help
files and still be able to view them with Vim.  This makes accessing the help
files a bit slower and requires the "gzip" program.

(1) Compress all the help files: "gzip doc/*.txt".

(2) Edit "doc/tags" and change the ".txt" to ".txt.gz": >
	:%s=\(\t.*\.txt\)\t=\1.gz\t=

(3) Add this line to your vimrc: >
	set helpfile={dirname}/help.txt.gz

Where {dirname} is the directory where the help files are.  The |gzip| plugin
will take care of decompressing the files.
You must make sure that $VIMRUNTIME is set to where the other Vim files are,
when they are not in the same location as the compressed "doc" directory.  See
|$VIMRUNTIME|.

==============================================================================
Executing shell commands in a window			*shell-window*

See |terminal|.

Another solution is splitting your terminal screen or display window with the
"splitvt" program.  You can probably find it on some ftp server.  The person
that knows more about this is Sam Lantinga <slouken@cs.ucdavis.edu>.

Another alternative is the "window" command, found on BSD Unix systems, which
supports multiple overlapped windows.  Or the "screen" program, found at
www.uni-erlangen.de, which supports a stack of windows.

==============================================================================
Hex editing					*hex-editing* *using-xxd*

See section |23.4| of the user manual.

If one has a particular extension that one uses for binary files (such as exe,
bin, etc), you may find it helpful to automate the process with the following
bit of autocmds for your <.vimrc>.  Change that "*.bin" to whatever
comma-separated list of extension(s) you find yourself wanting to edit: >

	" vim -b : edit binary using xxd-format!
	augroup Binary
	  au!
	  au BufReadPre  *.bin let &bin=1
	  au BufReadPost *.bin if &bin | %!xxd
	  au BufReadPost *.bin set ft=xxd | endif
	  au BufWritePre *.bin if &bin | %!xxd -r
	  au BufWritePre *.bin endif
	  au BufWritePost *.bin if &bin | %!xxd
	  au BufWritePost *.bin set nomod | endif
	augroup END

==============================================================================
Using <> notation in autocommands			*autocmd-<>*

The <> notation is not recognized in the argument of an :autocmd.  To avoid
having to use special characters, you could use a self-destroying mapping to
get the <> notation and then call the mapping from the autocmd.  Example:

						*map-self-destroy*  >
 " This is for automatically adding the name of the file to the menu list.
 " It uses a self-destroying mapping!
 " 1. use a line in the buffer to convert the 'dots' in the file name to \.
 " 2. store that in register '"'
 " 3. add that name to the Buffers menu list
 " WARNING: this does have some side effects, like overwriting the
 " current register contents and removing any mapping for the "i" command.
 "
 autocmd BufNewFile,BufReadPre * nmap i :nunmap i<CR>O<C-R>%<Esc>:.g/\./s/\./\\./g<CR>0"9y$u:menu Buffers.<C-R>9 :buffer <C-R>%<C-V><CR><CR>
 autocmd BufNewFile,BufReadPre * normal i

Another method, perhaps better, is to use the ":execute" command.  In the
string you can use the <> notation by preceding it with a backslash.  Don't
forget to double the number of existing backslashes and put a backslash before
'"'.
>
  autocmd BufNewFile,BufReadPre * exe "normal O\<C-R>%\<Esc>:.g/\\./s/\\./\\\\./g\<CR>0\"9y$u:menu Buffers.\<C-R>9 :buffer \<C-R>%\<C-V>\<CR>\<CR>"

For a real buffer menu, user functions should be used (see |:function|), but
then the <> notation isn't used, which defeats using it as an example here.

==============================================================================
Highlighting matching parens					*match-parens*

This example shows the use of a few advanced tricks:
- using the |CursorMoved| autocommand event
- using |searchpairpos()| to find a matching paren
- using |synID()| to detect whether the cursor is in a string or comment
- using |:match| to highlight something
- using a |pattern| to match a specific position in the file.

This should be put in a Vim script file, since it uses script-local variables.
It skips matches in strings or comments, unless the cursor started in string
or comment.  This requires syntax highlighting.

A slightly more advanced version is used in the |matchparen| plugin.
>
	let s:paren_hl_on = 0
	function s:Highlight_Matching_Paren()
	  if s:paren_hl_on
	    match none
	    let s:paren_hl_on = 0
	  endif

	  let c_lnum = line('.')
	  let c_col = col('.')

	  let c = getline(c_lnum)[c_col - 1]
	  let plist = split(&matchpairs, ':\|,')
	  let i = index(plist, c)
	  if i < 0
	    return
	  endif
	  if i % 2 == 0
	    let s_flags = 'nW'
	    let c2 = plist[i + 1]
	  else
	    let s_flags = 'nbW'
	    let c2 = c
	    let c = plist[i - 1]
	  endif
	  if c == '['
	    let c = '\['
	    let c2 = '\]'
	  endif
	  let s_skip ='synIDattr(synID(line("."), col("."), 0), "name") ' ..
		\ '=~?	"string\\|comment"'
	  execute 'if' s_skip '| let s_skip = 0 | endif'

	  let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip)

	  if m_lnum > 0 && m_lnum >= line('w0') && m_lnum <= line('w$')
	    exe 'match Search /\(\%' .. c_lnum .. 'l\%' .. c_col ..
		  \ 'c\)\|\(\%' .. m_lnum .. 'l\%' .. m_col .. 'c\)/'
	    let s:paren_hl_on = 1
	  endif
	endfunction

	autocmd CursorMoved,CursorMovedI * call s:Highlight_Matching_Paren()
	autocmd InsertEnter * match none
<

==============================================================================
Opening help in the current window				*help-curwin*

By default, help is displayed in a split window.  If you prefer it opens in
the current window, try this custom `:HelpCurwin` command:
>
	command -bar -nargs=? -complete=help HelpCurwin execute s:HelpCurwin(<q-args>)
	let s:did_open_help = v:false

	function s:HelpCurwin(subject) abort
	  let mods = 'silent noautocmd keepalt'
	  if !s:did_open_help
	    execute mods .. ' help'
	    execute mods .. ' helpclose'
	    let s:did_open_help = v:true
	  endif
	  if !getcompletion(a:subject, 'help')->empty()
	    execute mods .. ' edit ' .. &helpfile
	    set buftype=help
	  endif
	  return 'help ' .. a:subject
	endfunction
<


 vim:tw=78:ts=8:noet:ft=help:norl:
                                                                                                                                                                                                                                                                                                                                                                                                                            usr/share/vim/vim90/doc/todo.txt                                                                    0000644 0000000 0000000 00001141610 14424703754 015207  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        *todo.txt*      For Vim version 9.0.  Last change: 2023 Feb 26


		  VIM REFERENCE MANUAL	  by Bram Moolenaar


			      TODO list for Vim		*todo*

This is a veeeery long list of known bugs, current work and desired
improvements.  To make it a little bit accessible, the older items are grouped
by subject.  In the first column of the line a classification is used to be
able to look for "the next thing to do":

Priority classification:
9   next point release
8   next release
7   as soon as possible
6   soon
5   should be included
4   nice to have
3   consider including
2   maybe not
1   probably not
-   unclassified

						    *votes-for-changes*
See |develop.txt| for development plans.  You can vote for which items should
be worked on, but only if you sponsor Vim development.  See |sponsor|.

Issues can also be entered online: https://github.com/vim/vim/issues
Only use this for bug reports, not for questions!  Those belong on the
maillist.  Updates will be forwarded to the |vim_dev| maillist.  Issues
entered there will not be repeated below, unless there is extra information.

The #1234 numbers refer to an issue or pull request on github.  To see it in a
browser use: https://github.com/vim/vim/issues/1234
(replace 1234 with the issue/pull number)
							*known-bugs*
-------------------- Known bugs and current work -----------------------

Crash when splitting window: #11961.  Set RedrawingDisabled in
win_split_ins().

CI: include #12008 end of February.

In runtime/autoload/dist/script.vim change "set ft=" to "setlocal ft=" ?

CTRL-J mapping is not used if halfway another mapping. #12002
Is simplified mapping not used but escape code has been simplified?

Include #11952 after a runtime files update.

Errors when running tests with valgrind:
- test_codestyle.vim:  e.g.:
    command line..script /home/mool/vim/vim90/src/testdir/runtest.vim[569]..function RunTheTest[52]..Test_test_files line 6: keycode_check.vim: space before tab: Expected 0 but got 7
    command line..script /home/mool/vim/vim90/src/testdir/runtest.vim[569]..function RunTheTest[52]..Test_test_files line 10: setup.vim: trailing white space: Expected 0 but got 23
- test_gui.vim:
    Found errors in Test_gui_mouse_event():

Upcoming larger works:
- Make spell checking work with recent .dic/.aff files, e.g. French.  #4916
    Make Vim understand the format somehow?   Search for "spell" below.
    Make sure suggestions are speedy, also with composed words (German).
- Discuss alternatives for using other grammars (treesitter, TextMate).
   - Possibly conversion to Vim syntax rules.
   - Other mechanism than group and cluster to nest syntax items, to be used
     for grammars.
   - Possibly keeping the parsed syntax tree and incremental updates.
   - tree-sitter doesn't handle incorrect syntax (while typing) properly.
   - Make clear how it relates to LSP.
   - example plugin: https://github.com/uga-rosa/dps-vsctm.vim


Further Vim9 improvements, possibly after launch:
- implement :class and :interface: See |vim9-classes
  - Change access: public by default, private by prefixing "_".
	Check for error: can't have same name twice (ignoring "_" prefix).
  - Make ":defcompile ClassName" compile all functions and methods in the
    class.
  - Private methods?
	either: private def Func()
	    or: def _Func()
    Perhaps use "private" keyword instead of "_" prefix?
  - "final" object members - can only be set in the constructor.
  - accept line breaks in member initialization.  #11957
  - object empty(), len() - can class define a method to be used for them?
  - add to help: when using a default new() method then reordering object
    members may cause trouble.  Can define new() without arguments to avoid.
  - TODO items: check types for "implements" - members and methods
  - how about lock/unlock?
  - When checking "implements" also check types of members and function args.
  - For chaining, allow using the class name as type for function return
    value.
  - Implement generics
  - Add "instanceof" (exact class name).  And "assignable" (class or child)?
  - More efficient way for interface member index than iterating over list?
  - a variant of type() that returns a different type for each class?
      list<number> and list<string> should also differ.
  - Issue #11822: any.Func() can be a dict or an object call, need to handle
    this at runtime.
- implement :type
- implement :enum
- Promise class, could be used to wait on a popup close callback?
- class local to a function
- Use Vim9 for more runtime files.
- Inline call to map() and filter(), better type checking.
- When evaluating constants for script variables, some functions could work:
    has(featureName), len(someString)
- Implement as part of an expression: ++expr, --expr, expr++, expr--.

Information missing in terminfo:
- Accept "hyper" and "meta" modifiers (16 and 32) from Kitty like Meta?
    8 is actually "super".
- t_RV	request terminal version string; xterm:	"\033[>c"
    change in terminfo for "RV" uses the wrong escape sequence 7 - 14 Jan only
Codes used for focus gained and lost (currently using use_xterm_like_mouse())
  termcodes are hard-coded in set_termname(), not named.
    Use the XF flag?  enables recognizing the focus in/out events.
    Check if t_fe is not empty.
    Check for "1004" in t_XM. (disadvantage: only focus events when mouse is
    used)
- t_fe	enable focus-event tracking
- t_fd	disable focus-event tracking
Modifiers for various keys
- flag to indicate "xterm compatible modifiers" ?
Underline and similar:
- t_AU - Set underline color: like "AF" and "AB" entries.
- t_Ce	undercurl and underline end
- t_Cs	undercurl (curly underline) mode
- t_Us	double underline mode
- t_ds	dotted underline mode
- t_Ds	dashed underline mode
- t_Te	strikethrough end
- t_Ts	strikethrough mode
Cursor codes: |termcap-cursor-shape|
- t_RC	request terminal cursor blinking
- t_RS	request terminal cursor style
- t_VS	cursor normally visible (no blink)
- t_SI	start insert mode (bar cursor shape)
- t_SR	start replace mode (underline cursor shape)
- t_EI	end insert or replace mode (block cursor shape)
- t_SC	set cursor color start
- t_EC	set cursor color end
- t_SH	set cursor shape
State requests:
- t_RF	request terminal foreground color
- t_RB	request terminal background color
Less important (not needed for regular editing):
- t_IS	set icon text start
- t_IE	set icon text end
- t_ST	save window title to stack
- t_RT	restore window title from stack
- t_Si	save icon text to stack
- t_Ri	restore icon text from stack
- t_WP	set window position (Y, X) in pixels
- t_GP	get window position (Y, X) in pixels
- t_WS	set window size (height, width in cells)
Vim internal, but there should be a terminfo entry for these:
- t_8f	set foreground color (R, G, B) in printf() format
- t_8b	set background color (R, G, B) in printf() format
- t_8u	set underline color (R, G, B) in printf() format
Probably Vim internal, not in terminfo:
- t_TE	end of "raw" mode
- t_TI	put terminal into "raw" mode
- t_RK	request terminal keyboard protocol state; sent after |t_TI|
Already working, not properly documented:
- t_u7	request cursor position

Popup windows:
- Add a function to redraw a specific popup window.  Esp. to be used when
  editing the command line, when screen updating doesn't happen. (Shougo)
  #10210  Example that shows the need on the issue.
  Probably need to update all popup windows (they may overlap)
  If the display is scrolled need to redraw everything later.
- Add a flag to make a popup window focusable?
    CTRL-W P cycle over any preview window or focusable popup, end up back in
	     current window.
    ? - switch between current window and all popup windows
    Esc in popup window goes back to previous current window
- Add a termcap entry for changing the cursor when it goes under the popup and
  back.  like t_SI and t_EI  (t_SU and t_EU, where "U" means under?)
- With terminal in popup, allow for popup_hide() to temporarily hide it.?
- Make it possible to scroll horizontally when 'wrap' is off.  Does this
  require an ascii scrollbar, like with the vertical one?
- Fire some autocommand event after a new popup window was created and
  positioned?  PopupNew?  Could be used to set some options or move it out of
  the way. (#5737)
  However, it may also cause trouble, changing the popup of another plugin.
- Width is not computed correctly when minwidth and maxwidth are &columns
  and padding and a scrollbar are used.  (#6676)
- Should popup_getoptions() also return the mask?  #7774
- Add a way to use popup_menu() synchronously: instead of invoking the
  callback, return the choice. (Ben Jackson, #6534)
- When using a popup for the info of a completion menu, and there is not
  enough space, let the popup overlap with the menu. (#4544)
- Implement flip option.
- Make redrawing more efficient and avoid flicker:
    - put popup menu also in popup_mask?
- Match does not have right BG color if line length equals popup width.
  (#5658)
- Figure out the size and position better if wrapping inserts indent

'incsearch' with :s:
- :s/foo  using CTRL-G moves to another line, should not happen, or use the
  correct line (it uses the last but one line) (Lifepillar, Aug 18, #3345)
- Also support range: :/foo/,/bar/delete
- Also support for user command, e.g. Cfilter
- :%s/foo should take the first match below the cursor line, unless there
  isn't one?
  Then :%s?foo should take the first match above the cursor line.

Prompt buffer:
- Add a command line history, using up/down keys.  issue #5010
- delay next prompt until plugin gives OK?
- add prompt_addtext({buf}, {expr})	none	add text to a prompt buffer

Terminal debugger:
- Add a mechanism for configuration.  Instead of several global variables use
  a dictionary.  Use callbacks for some things, e.g. opening a debug window in
  a certain position.
- Make prompt-buffer variant work better.
- Add option to not open the program window.  It's not used when attaching to
  an already running program. (M. Kelly)
- Use the optional token on requests, match the result with it. #10300
- When only gdb window exists, on "quit" edit another buffer.
- Termdebug does not work when Vim was built with mzscheme: gdb hangs just
  after "run".  Everything else works, including communication channel.  Not
  initializing mzscheme avoid the problem, thus it's not some #ifdef.
- Add support for lldb?  issue #3565
- Could we do something similar for debugging Vim scripts?  At least see the
  script while stepping through it.  Simple version would use an extra window.
  More complete solution would actually run Vim in a Terminal and control it
  with another Vim instance.

Terminal emulator window:
- Can escape a terminal popup with win_gotoid(), should be an error
- No support for underline color, t_8u.
- When in terminal-Normal mode when the job finishes, the cursor jumps to the
  end but the window is not updated.  This only happens when typing "a".
      :term bash -c "for V in {0..5}; do echo $V; sleep 1; done"
- When started with ":terminal ++close" and the shell exits but there is a
  background process, the window remains open, because the channel still
  exists (and output still shows).  Perhaps close the window when an explicit
  ++close was used? (#5931)
- Using "CTRL-W :confirm quite" and selecting "yes" should work like ":quit!".
    (Harm te Hennepe, #6129)
- When the job in the terminal doesn't use mouse events, let the scroll wheel
  scroll the scrollback, like a terminal does at the shell prompt. #2490
  A bit like using CTRL-W N first.
  Jump back like with "a" when any key is typed.
  And use modeless selection.  #2962
- Use CTRL-W CTRL-K to enter a digraph? #5371
- When Vim runs in the terminal and changes the title, the statusline needs to
  be redrawn.
- GUI: When using ":set go+=!" a system() call causes the hit-enter prompt.
  (#3327)
- Allow for specifying the directory, with ++cwd={dir}.
- When pasting should call vterm_keyboard_start_paste(), e.g. when using
  K_MIDDLEMOUSE, calling insert_reg().
- Users expect parsing the :term argument like a shell does, also support
  single quotes.  E.g. with:  :term grep 'alice says "hello"'  (#1999)
- Win32: Redirecting input does not work, half of Test_terminal_redir_file()
  is disabled.
- Win32: Redirecting output works but includes escape sequences.
- Win32: Make terminal used for :!cmd in the GUI work better.  Allow for
  redirection.
- When the job only outputs lines, we could handle resizing the terminal
  better: store lines separated by line breaks, instead of screen lines,
  then when the window is resized redraw those lines.
- Redrawing is slow with Motif. (Ramel Eshed)
- For the GUI fill termios with default values, perhaps like pangoterm:
  http://bazaar.launchpad.net/~leonerd/pangoterm/trunk/view/head:/main.c#L134
- When 'encoding' is not utf-8, or the job is using another encoding, setup
  conversions.

Patch adds showcmd() function  #11708

Crash when a variable is removed while listing variables (Issue #11435)

Autoconf: must use autoconf 2.69, later version generates lots of warnings
- try using autoconf 2.71 and fix all "obsolete" warnings  #11322

Problem with Visual highlight when 'linebreak' and 'showbreak' are set.
#11272

Can deref_func_name() and deref_function_name() be merged?

After patch 8.2.4915 w_botline is computed much more often. Can this be
reduced?

Add BufDeletePost.  #11041

Add winid arg to col() and charcol()  #11466 (request #11461)

Can we make 'noendofline' and 'endoffile' visible?  Should show by default,
since it's an unusual situation.
- Show 'noendofline' when it would be used for writing ('fileformat' "dos")
  with an upside down exclamation mark?  NonText highlighting.
- Show 'endoffile' when it would be used for writing ('fileformat' "dos") with
  "CTRL-Z", NonText highlighting.
- Add 'fillchars' items to change this, default behavior like:
	noeol:¡
	eof:CTRL-Z

Test property disappears when using CR twice in a row.  OK when some text was
entered. (#11151)

Add 'keywordprg' to various ftplugin files:
https://github.com/vim/vim/pull/5566

PR #11579 to add visualtext(), return Visually selected text.

Stray characters in the shell #11719, caused by requesting a response for:
- XT key sequences
- Whether modifyOtherKeys is active
- Whether kitty keyboard protocol is active
Can we not request XT key sequences, or reduce them drastically?

Issue #10512: Dynamic loading broken with Perl 5.36
Damien has a patch (2022 Dec 4)

Request #11965: Allow severaql "%=" items in 'statusline', makes it possible
to have text in the center.

Add some kind of ":whathappend" command and functions to make visible what the
last few typed keys and executed commands are.  To be used when the user
wonders what went wrong.  Could also be used for statistics #12046.
- typed keys - Normal mode command - like what is recorded in a register and
  displayed by 'showcmd'.
- register used - #12063
- executed command lines
- with more verbosity: what scripts/functions/autocommands were executed

NFA regexp does not handle composing characters well: #10286
    [ɔ̃] matches both ɔ and ɔ̃
    \(ɔ\|ɔ̃\) matches ɔ and not ɔ̃

Is there a way to make 'autowriteall' make a clean exit when the xterm is
closed? (Dennis Nazic says files are preserved, okt 28).  Perhaps handle TERM
like HUP?

Better terminal emulator support:
  > Somehow request the terminfo entry from the terminal itself.  The $TERM
    value then is only relevant for whether this feature is supported or not.
    Replaces the xterm mechanism to request each entry separately. #6609
    Multiplexers (screen, tmux) can request it to the underlying terminal, and
    pass it on with modifications.
    How to get all the text quickly (also over ssh)? Can we use a side channel?
  > When xterm supports sending an Escape sequence for the Esc key, should
    have a way to request this state.  That could be an XTGETTCAP entry, e.g.
    "k!".  Add "esc_sends_sequence" flag.
    If we know this state, then do not pretend going out of Insert mode in
    vgetorpeek(), where kitty_protocol_state is checked.
  > If a response ends up in a shell command, one way to avoid this is by
    sending t_RV last and delay starting a shell command until the response
    has been seen.
  > Can we use the req_more_codes_from_term() mechanism with more terminals?
    Should we repeat it after executing a shell command?
    Can also add this to the 'keyprotocol' option: "mok2+tcap"
  > In the table of terminal names pointing to the list of termcap entries,
    add an optional additional one.  So that "xterm-kitty" can first load
    "xterm" and then add "kitty" entries.

Using "A" and "o" in manually created fold (in empty buffer) does not behave
consistently (James McCoy, #10698)

In a timer callback, when using ":echo" and then input() the message is
overwritten.  Could use ":echowin" and call redraw_cmd() in get_user_input().
#11299

Syntax include problem: #11277.  Related to Patch 8.2.2761

To avoid flicker: add an option that when a screen clear is requested, instead
of clearing it draws everything and uses "clear to end of line" for every line.
Resetting 't_ut' already causes this?

When scheme can't be found by configure there is no clear "not found" message:
    configure:5769: checking MzScheme install prefix
    configure:5781: result:

Can "CSI nr X" be used instead of outputting spaces?  Is it faster?  #8002

Typed keys invisible after calling interrupt() from a timer. #10631

With a window height of 6 and 'scrolloff' set to 3, using "j" does not scroll
evenly. (#10545)  Need to handle this in scroll_cursor_bot().

Idea: when typing ":e /some/dir/" and "dir" does not exist, highlight in red.

":set shellpipe&" and ":set shellredir&" should use the logic from
initialization to figure out the default value from 'shell'.  Add a test for
this.

Support translations for plugins: #11637
- Need a tool like xgettext for Vim script, generates a .pot file.
  Need the equivalent of _() and N_(), perhaps TR() and TRN().
- Instructions for how to create .po files and translate.
- Script or Makefile to generate .mo files.
- Instructions and perhaps a script to install the .mo files in the right
  place.
- Add variant of gettext() that takes a package name.

With concealed text mouse click doesn't put the cursor in the right position.
(Herb Sitz)  Fix by Christian Brabandt, 2011 Jun 16.  Doesn't work properly,
need to make the change in where RET_WIN_BUF_CHARTABSIZE() is called.
IDEA: when drawing the text, store the text byte index in ScreenLinesIdx[].
When converting screen column to text position use this.
The line number can be obtained from win->w_lines[].

Version of getchar() that does not move the cursor - #10603 Use a separate
argument for the new flag.

test_arglist func Test_all_not_allowed_from_cmdwin() hangs on MS-Windows.

Can we add highlighting to ":echowindow"?

Information for a specific terminal (e.g. gnome, tmux, konsole, alacritty) is
spread out.  Make a section with copy/paste examples of script and pointers to
more information.

Problem that a previous silent ":throw" causes a following try/catch not to
work. (ZyX, 2013 Sep 28) With examples: (Malcolm Rowe, 2015 Dec 24)
Also see #8487 for an example.

Request to use "." for the cursor column in search pattern \%<.c and \%<.v.
(#8179)

":filter set termcap" only filters terminal codes, not keys. (#9297)

Add an option to restrict 'incsearch' to not scroll the view. (Tavis Ormandy)

Remove SPACE_IN_FILENAME ? It is only used for completion.

When 'term' starts with "foot" then default t_TI and t_TE to the values used
for the builtin xterm termcap.

Adding "10" to 'spellsuggest' causes spell suggestions to become very slow.
(#4087)  Did patch 8.2.2379 help?
Also, z= in German on a long word can take a very long time, but CTRL-C to
interrupt does not work. Where to add ui_breakcheck()?
New English spell files also have very slow suggestions.

When 'spelloptions' is "camel" then zG doesn't work on some words.
(Gary Johnson, 17 Oct 2022)

Make "g>" and "g<" in Visual mode move the text right or left.
Also for a block selection.  #8558

When using dictionary insert completion with 'ignorecase', the leading capital
in a word should be preserved.

Add optional argument to virtcol() that specifies "start", "cursor" or "end"
to tell which value from getvvcol() should be used. (#7964)
Value returned by virtcol() changes depending on how lines wrap.  This is
inconsistent with the documentation.

globpath() does not use 'wildignorecase' at all? (related to #8350)

mksession uses :buffer instead of :edit in one place but not another. #10629

Add 'termguiattr' option, use "gui=" attributes in the terminal?  Would work
with 'termguicolors'. #1740

Patch for blockwise paste reporting changes: #6660.  Asked for a PR.

Missing filetype test for bashrc, PKGBUILD, etc.

Add an option to not fetch terminal codes in xterm, to avoid flicker when t_Co
changes.

Add ??= operator, "a ??= b" works like "a = a ?? b". #10343

When ":redir" is used while already active, the previous one is ended.  But
when redirecting to a local variable (function or script) storing the value
won't work.  At least give an error.  Is there a way to make it work?
#10616

Completion for ":runtime" should show valid values, not what's in the current
directory. (#11447)

Add an option to start_timer() to return from the input loop with K_IGNORE.
This is useful e.g. when a popup was created that disables mappings, we need
to return from vgetc() to make this happen.  #7011

Expanding <mods> should put the tab number from cmdmod.tab before "tab".
Any way to convert "$" back by using a special value? (#6901)

Can we detect true color support?  https://gist.github.com/XVilka/8346728
Try setting a color then request the current color, like using t_u7.

Add a v:register_used variable, which has the name of the register used for
the last command, e.g. put.  #12003

Make the jumplist behave like a tag stack. (#7738)  Should there be a more
time bound navigation, like with undo?

For testing, make a copy of ml_line_ptr instead of pointing it into the data
block, so that valgrind can do out of bounds check.  Set ML_LINE_DIRTY flag or
add ML_LINE_ALLOCED.

Changing a capturing group to non-capturing changes the result: #7607
    :echo matchstr('aaa bbb', '\(.\{-1,}\>\)\|.*')
    aaa
    :echo matchstr('aaa bbb', '\%(.\{-1,}\>\)\|.*')
    aaa bbb
Should also work without any group:
    :echo matchstr('aaa bbb', '.\{-1,}\>\|.*')
    aaa bbb  (should be aaa)

Should add a match/str/list/pos method that also returns the test and position
of submatches.  #8355

Check out PR #543 (Roland Puntaier).
Patch for multibyte characters in langmap and applying a mapping on them.
(Christian Brabandt, 2015 Jun 12, update July 25)
Is this the right solution?  Need to cleanup langmap behavior:
- in vgetorpeek() apply langmap to the typeahead buffer and put the result in
  a copy-buffer, only when langmap is appropriate for the current mode. Then
  check for mapping and let gotchars() work on the copy-buffer.
- Remove LANGMAP_ADJUST() in other parts of the code.  Make sure the mode is
  covered by the above change.
So that replaying the register doesn't use keymap/langmap and still does the
same thing.
Also see #737: langmap not applied to replaying recording.
Perhaps also related: #5147

Matchparen doesn't remove highlight after undo. (#7054)
Is OK when syntax HL is active.

Currently Del can be used to delete the last character of a typed count.
Can it also be used to delete an incomplete Normal mode command? (#7096)
After an operator: should work.  After "a" or "i" for text objects: should
work.

Using "au!" after "filetype on" is a bit slow.  Can the matching of
autocommands be made faster?  (#7056)

Using a search pattern containing "\%V" and 'hlsearch' set keeps old matches
when the Visual area changes.  #11694.  Do a redraw when starting a Visual
selection?

Append in Visual block mode inserts the wrong character.
Test_visual_block_mode() already has the proper check, which is commented out.
(#8288)

Add the <=> (spaceship) operator and "cond ?< expr ?= expr ?> expr"
    replace this:
	let left = GetLeftFunc()
	let right = GetRightFunc()
	let res = left < right ? lower : left == right ? equal : upper
    by:
	let res = GetLeftFunc() <=> GetRightFunc() ?< lower ?= equal ?> upper
Patch to make :q work with local arglist. (Christian Brabandt, #6286)

Why does Test_invalid_sid() not work in the GUI?

":pedit" ignores the local working directory when 'pvp' is set (#7267)

Lua: updating wrong buffer when using newly created, unloaded buffer.
(#6539)

File marks merging has duplicates since 7.4.1925. (Ingo Karkat, #5733)

A syntax plugin cannot use autocommands, it could be sourced from setting
'syntax' in a modeline.  Add a function that indicates whether "secure"
and/or "sandbox" are set.

Problem with auto-formatting - inserting space and putting cursor before added
character. (#6154)
Auto-formatting comments joins a following non-comment line when the comment
ends in a space. (Adam Levy, 18 Oct 2022)

When 'lazyredraw' is set sometimes the title is not updated.
(Jason Franklin, 2020 Feb 3)  Looks like a race condition.

With bash ":make" does not set v:shell_error.  Possible solution: set
'shellpipe' to "2>&1| tee %s; exit ${PIPESTATUS[0]}"  #5994

Using mode() when "/pat" is used in Visual mode returns "v" instead of "c",
which is not useful.  Return "c/v" instead.  And "c/o" when using "d/pat".
#6127

