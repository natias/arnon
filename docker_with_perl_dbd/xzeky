	$(NOECHO) $(ECHO) '            "DBD::AnyData" : "0.110",' >> META_new.json
	$(NOECHO) $(ECHO) '            "DBD::CSV" : "0.36",' >> META_new.json
	$(NOECHO) $(ECHO) '            "DBD::Google" : "0.51",' >> META_new.json
	$(NOECHO) $(ECHO) '            "DBD::PO" : "2.10",' >> META_new.json
	$(NOECHO) $(ECHO) '            "DBD::RAM" : "0.072",' >> META_new.json
	$(NOECHO) $(ECHO) '            "SQL::Statement" : "1.33"' >> META_new.json
	$(NOECHO) $(ECHO) '         },' >> META_new.json
	$(NOECHO) $(ECHO) '         "requires" : {' >> META_new.json
	$(NOECHO) $(ECHO) '            "perl" : "5.008001"' >> META_new.json
	$(NOECHO) $(ECHO) '         }' >> META_new.json
	$(NOECHO) $(ECHO) '      }' >> META_new.json
	$(NOECHO) $(ECHO) '   },' >> META_new.json
	$(NOECHO) $(ECHO) '   "release_status" : "stable",' >> META_new.json
	$(NOECHO) $(ECHO) '   "resources" : {' >> META_new.json
	$(NOECHO) $(ECHO) '      "homepage" : "http://dbi.perl.org/",' >> META_new.json
	$(NOECHO) $(ECHO) '      "license" : [' >> META_new.json
	$(NOECHO) $(ECHO) '         "http://dev.perl.org/licenses/"' >> META_new.json
	$(NOECHO) $(ECHO) '      ],' >> META_new.json
	$(NOECHO) $(ECHO) '      "repository" : {' >> META_new.json
	$(NOECHO) $(ECHO) '         "url" : "https://github.com/perl5-dbi/dbi"' >> META_new.json
	$(NOECHO) $(ECHO) '      },' >> META_new.json
	$(NOECHO) $(ECHO) '      "x_IRC" : "irc://irc.perl.org/#dbi",' >> META_new.json
	$(NOECHO) $(ECHO) '      "x_MailingList" : "mailto:dbi-dev@perl.org"' >> META_new.json
	$(NOECHO) $(ECHO) '   },' >> META_new.json
	$(NOECHO) $(ECHO) '   "version" : "1.645",' >> META_new.json
	$(NOECHO) $(ECHO) '   "x_serialization_backend" : "JSON::PP version 4.16",' >> META_new.json
	$(NOECHO) $(ECHO) '   "x_suggests" : {' >> META_new.json
	$(NOECHO) $(ECHO) '      "Clone" : 0.47,' >> META_new.json
	$(NOECHO) $(ECHO) '      "DB_File" : 0,' >> META_new.json
	$(NOECHO) $(ECHO) '      "MLDBM" : 0,' >> META_new.json
	$(NOECHO) $(ECHO) '      "Net::Daemon" : 0,' >> META_new.json
	$(NOECHO) $(ECHO) '      "RPC::PlServer" : 0.202,' >> META_new.json
	$(NOECHO) $(ECHO) '      "SQL::Statement" : 1.414' >> META_new.json
	$(NOECHO) $(ECHO) '   }' >> META_new.json
	$(NOECHO) $(ECHO) '}' >> META_new.json
	-$(NOECHO) $(MV) META_new.json $(DISTVNAME)/META.json


# --- MakeMaker signature section:
signature :
	cpansign -s


# --- MakeMaker dist_basics section:
distclean :: realclean distcheck
	$(NOECHO) $(NOOP)

distcheck :
	$(PERLRUN) "-MExtUtils::Manifest=fullcheck" -e fullcheck

skipcheck :
	$(PERLRUN) "-MExtUtils::Manifest=skipcheck" -e skipcheck

manifest :
	$(PERLRUN) "-MExtUtils::Manifest=mkmanifest" -e mkmanifest

veryclean : realclean
	$(RM_F) *~ */*~ *.orig */*.orig *.bak */*.bak *.old */*.old



# --- MakeMaker dist_core section:

dist : $(DIST_DEFAULT) $(FIRST_MAKEFILE)
	$(NOECHO) $(ABSPERLRUN) -l -e 'print '\''Warning: Makefile possibly out of date with $(VERSION_FROM)'\''' \
	  -e '    if -e '\''$(VERSION_FROM)'\'' and -M '\''$(VERSION_FROM)'\'' < -M '\''$(FIRST_MAKEFILE)'\'';' --

tardist : $(DISTVNAME).tar$(SUFFIX)
	$(NOECHO) $(NOOP)

uutardist : $(DISTVNAME).tar$(SUFFIX)
	uuencode $(DISTVNAME).tar$(SUFFIX) $(DISTVNAME).tar$(SUFFIX) > $(DISTVNAME).tar$(SUFFIX)_uu
	$(NOECHO) $(ECHO) 'Created $(DISTVNAME).tar$(SUFFIX)_uu'

$(DISTVNAME).tar$(SUFFIX) : distdir
	$(PREOP)
	$(TO_UNIX)
	$(TAR) $(TARFLAGS) $(DISTVNAME).tar $(DISTVNAME)
	$(RM_RF) $(DISTVNAME)
	$(COMPRESS) $(DISTVNAME).tar
	$(NOECHO) $(ECHO) 'Created $(DISTVNAME).tar$(SUFFIX)'
	$(POSTOP)

zipdist : $(DISTVNAME).zip
	$(NOECHO) $(NOOP)

$(DISTVNAME).zip : distdir
	$(PREOP)
	$(ZIP) $(ZIPFLAGS) $(DISTVNAME).zip $(DISTVNAME)
	$(RM_RF) $(DISTVNAME)
	$(NOECHO) $(ECHO) 'Created $(DISTVNAME).zip'
	$(POSTOP)

shdist : distdir
	$(PREOP)
	$(SHAR) $(DISTVNAME) > $(DISTVNAME).shar
	$(RM_RF) $(DISTVNAME)
	$(NOECHO) $(ECHO) 'Created $(DISTVNAME).shar'
	$(POSTOP)


# --- MakeMaker distdir section:
create_distdir :
	$(RM_RF) $(DISTVNAME)
	$(PERLRUN) "-MExtUtils::Manifest=manicopy,maniread" \
		-e "manicopy(maniread(),'$(DISTVNAME)', '$(DIST_CP)');"

distdir : create_distdir distmeta 
	$(NOECHO) $(NOOP)



# --- MakeMaker dist_test section:
disttest : distdir
	cd $(DISTVNAME) && $(ABSPERLRUN) Makefile.PL 
	cd $(DISTVNAME) && $(MAKE) $(PASTHRU)
	cd $(DISTVNAME) && $(MAKE) test $(PASTHRU)



# --- MakeMaker dist_ci section:
ci :
	$(ABSPERLRUN) -MExtUtils::Manifest=maniread -e '@all = sort keys %{ maniread() };' \
	  -e 'print(qq{Executing $(CI) @all\n});' \
	  -e 'system(qq{$(CI) @all}) == 0 or die $$!;' \
	  -e 'print(qq{Executing $(RCS_LABEL) ...\n});' \
	  -e 'system(qq{$(RCS_LABEL) @all}) == 0 or die $$!;' --


# --- MakeMaker distmeta section:
distmeta : create_distdir metafile
	$(NOECHO) cd $(DISTVNAME) && $(ABSPERLRUN) -MExtUtils::Manifest=maniadd -e 'exit unless -e q{META.yml};' \
	  -e 'eval { maniadd({q{META.yml} => q{Module YAML meta-data (added by MakeMaker)}}) }' \
	  -e '    or die "Could not add META.yml to MANIFEST: $${'\''@'\''}"' --
	$(NOECHO) cd $(DISTVNAME) && $(ABSPERLRUN) -MExtUtils::Manifest=maniadd -e 'exit unless -f q{META.json};' \
	  -e 'eval { maniadd({q{META.json} => q{Module JSON meta-data (added by MakeMaker)}}) }' \
	  -e '    or die "Could not add META.json to MANIFEST: $${'\''@'\''}"' --



# --- MakeMaker distsignature section:
distsignature : distmeta
	$(NOECHO) cd $(DISTVNAME) && $(ABSPERLRUN) -MExtUtils::Manifest=maniadd -e 'eval { maniadd({q{SIGNATURE} => q{Public-key signature (added by MakeMaker)}}) }' \
	  -e '    or die "Could not add SIGNATURE to MANIFEST: $${'\''@'\''}"' --
	$(NOECHO) cd $(DISTVNAME) && $(TOUCH) SIGNATURE
	cd $(DISTVNAME) && cpansign -s



# --- MakeMaker install section:

install :: pure_install doc_install
	$(NOECHO) $(NOOP)

install_perl :: pure_perl_install doc_perl_install
	$(NOECHO) $(NOOP)

install_site :: pure_site_install doc_site_install
	$(NOECHO) $(NOOP)

install_vendor :: pure_vendor_install doc_vendor_install
	$(NOECHO) $(NOOP)

pure_install :: pure_$(INSTALLDIRS)_install
	$(NOECHO) $(NOOP)

doc_install :: doc_$(INSTALLDIRS)_install
	$(NOECHO) $(NOOP)

pure__install : pure_site_install
	$(NOECHO) $(ECHO) INSTALLDIRS not defined, defaulting to INSTALLDIRS=site

doc__install : doc_site_install
	$(NOECHO) $(ECHO) INSTALLDIRS not defined, defaulting to INSTALLDIRS=site

pure_perl_install :: all
	$(NOECHO) $(MOD_INSTALL) \
		read "$(PERL_ARCHLIB)/auto/$(FULLEXT)/.packlist" \
		write "$(DESTINSTALLARCHLIB)/auto/$(FULLEXT)/.packlist" \
		"$(INST_LIB)" "$(DESTINSTALLPRIVLIB)" \
		"$(INST_ARCHLIB)" "$(DESTINSTALLARCHLIB)" \
		"$(INST_BIN)" "$(DESTINSTALLBIN)" \
		"$(INST_SCRIPT)" "$(DESTINSTALLSCRIPT)" \
		"$(INST_MAN1DIR)" "$(DESTINSTALLMAN1DIR)" \
		"$(INST_MAN3DIR)" "$(DESTINSTALLMAN3DIR)"
	$(NOECHO) $(WARN_IF_OLD_PACKLIST) \
		"$(SITEARCHEXP)/auto/$(FULLEXT)"


pure_site_install :: all
	$(NOECHO) $(MOD_INSTALL) \
		read "$(SITEARCHEXP)/auto/$(FULLEXT)/.packlist" \
		write "$(DESTINSTALLSITEARCH)/auto/$(FULLEXT)/.packlist" \
		"$(INST_LIB)" "$(DESTINSTALLSITELIB)" \
		"$(INST_ARCHLIB)" "$(DESTINSTALLSITEARCH)" \
		"$(INST_BIN)" "$(DESTINSTALLSITEBIN)" \
		"$(INST_SCRIPT)" "$(DESTINSTALLSITESCRIPT)" \
		"$(INST_MAN1DIR)" "$(DESTINSTALLSITEMAN1DIR)" \
		"$(INST_MAN3DIR)" "$(DESTINSTALLSITEMAN3DIR)"
	$(NOECHO) $(WARN_IF_OLD_PACKLIST) \
		"$(PERL_ARCHLIB)/auto/$(FULLEXT)"

pure_vendor_install :: all
	$(NOECHO) $(MOD_INSTALL) \
		read "$(VENDORARCHEXP)/auto/$(FULLEXT)/.packlist" \
		write "$(DESTINSTALLVENDORARCH)/auto/$(FULLEXT)/.packlist" \
		"$(INST_LIB)" "$(DESTINSTALLVENDORLIB)" \
		"$(INST_ARCHLIB)" "$(DESTINSTALLVENDORARCH)" \
		"$(INST_BIN)" "$(DESTINSTALLVENDORBIN)" \
		"$(INST_SCRIPT)" "$(DESTINSTALLVENDORSCRIPT)" \
		"$(INST_MAN1DIR)" "$(DESTINSTALLVENDORMAN1DIR)" \
		"$(INST_MAN3DIR)" "$(DESTINSTALLVENDORMAN3DIR)"


doc_perl_install :: all
	$(NOECHO) $(ECHO) Appending installation info to "$(DESTINSTALLARCHLIB)/perllocal.pod"
	-$(NOECHO) $(MKPATH) "$(DESTINSTALLARCHLIB)"
	-$(NOECHO) $(DOC_INSTALL) \
		"Module" "$(NAME)" \
		"installed into" "$(INSTALLPRIVLIB)" \
		LINKTYPE "$(LINKTYPE)" \
		VERSION "$(VERSION)" \
		EXE_FILES "$(EXE_FILES)" \
		>> "$(DESTINSTALLARCHLIB)/perllocal.pod"

doc_site_install :: all
	$(NOECHO) $(ECHO) Appending installation info to "$(DESTINSTALLARCHLIB)/perllocal.pod"
	-$(NOECHO) $(MKPATH) "$(DESTINSTALLARCHLIB)"
	-$(NOECHO) $(DOC_INSTALL) \
		"Module" "$(NAME)" \
		"installed into" "$(INSTALLSITELIB)" \
		LINKTYPE "$(LINKTYPE)" \
		VERSION "$(VERSION)" \
		EXE_FILES "$(EXE_FILES)" \
		>> "$(DESTINSTALLARCHLIB)/perllocal.pod"

doc_vendor_install :: all
	$(NOECHO) $(ECHO) Appending installation info to "$(DESTINSTALLARCHLIB)/perllocal.pod"
	-$(NOECHO) $(MKPATH) "$(DESTINSTALLARCHLIB)"
	-$(NOECHO) $(DOC_INSTALL) \
		"Module" "$(NAME)" \
		"installed into" "$(INSTALLVENDORLIB)" \
		LINKTYPE "$(LINKTYPE)" \
		VERSION "$(VERSION)" \
		EXE_FILES "$(EXE_FILES)" \
		>> "$(DESTINSTALLARCHLIB)/perllocal.pod"


uninstall :: uninstall_from_$(INSTALLDIRS)dirs
	$(NOECHO) $(NOOP)

uninstall_from_perldirs ::
	$(NOECHO) $(UNINSTALL) "$(PERL_ARCHLIB)/auto/$(FULLEXT)/.packlist"

uninstall_from_sitedirs ::
	$(NOECHO) $(UNINSTALL) "$(SITEARCHEXP)/auto/$(FULLEXT)/.packlist"

uninstall_from_vendordirs ::
	$(NOECHO) $(UNINSTALL) "$(VENDORARCHEXP)/auto/$(FULLEXT)/.packlist"


# --- MakeMaker force section:
# Phony target to force checking subdirectories.
FORCE :
	$(NOECHO) $(NOOP)


# --- MakeMaker perldepend section:
PERL_HDRS = \
        $(PERL_INCDEP)/EXTERN.h            \
        $(PERL_INCDEP)/INTERN.h            \
        $(PERL_INCDEP)/XSUB.h            \
        $(PERL_INCDEP)/av.h            \
        $(PERL_INCDEP)/bitcount.h            \
        $(PERL_INCDEP)/charclass_invlists.h            \
        $(PERL_INCDEP)/config.h            \
        $(PERL_INCDEP)/cop.h            \
        $(PERL_INCDEP)/cv.h            \
        $(PERL_INCDEP)/dosish.h            \
        $(PERL_INCDEP)/ebcdic_tables.h            \
        $(PERL_INCDEP)/embed.h            \
        $(PERL_INCDEP)/embedvar.h            \
        $(PERL_INCDEP)/fakesdio.h            \
        $(PERL_INCDEP)/feature.h            \
        $(PERL_INCDEP)/form.h            \
        $(PERL_INCDEP)/git_version.h            \
        $(PERL_INCDEP)/gv.h            \
        $(PERL_INCDEP)/handy.h            \
        $(PERL_INCDEP)/hv.h            \
        $(PERL_INCDEP)/hv_func.h            \
        $(PERL_INCDEP)/hv_macro.h            \
        $(PERL_INCDEP)/inline.h            \
        $(PERL_INCDEP)/intrpvar.h            \
        $(PERL_INCDEP)/invlist_inline.h            \
        $(PERL_INCDEP)/iperlsys.h            \
        $(PERL_INCDEP)/keywords.h            \
        $(PERL_INCDEP)/l1_char_class_tab.h            \
        $(PERL_INCDEP)/locale_table.h            \
        $(PERL_INCDEP)/malloc_ctl.h            \
        $(PERL_INCDEP)/metaconfig.h            \
        $(PERL_INCDEP)/mg.h            \
        $(PERL_INCDEP)/mg_data.h            \
        $(PERL_INCDEP)/mg_raw.h            \
        $(PERL_INCDEP)/mg_vtable.h            \
        $(PERL_INCDEP)/mydtrace.h            \
        $(PERL_INCDEP)/nostdio.h            \
        $(PERL_INCDEP)/op.h            \
        $(PERL_INCDEP)/op_reg_common.h            \
        $(PERL_INCDEP)/opcode.h            \
        $(PERL_INCDEP)/opnames.h            \
        $(PERL_INCDEP)/overload.h            \
        $(PERL_INCDEP)/pad.h            \
        $(PERL_INCDEP)/parser.h            \
        $(PERL_INCDEP)/patchlevel.h            \
        $(PERL_INCDEP)/perl.h            \
        $(PERL_INCDEP)/perl_inc_macro.h            \
        $(PERL_INCDEP)/perl_langinfo.h            \
        $(PERL_INCDEP)/perl_siphash.h            \
        $(PERL_INCDEP)/perlapi.h            \
        $(PERL_INCDEP)/perlio.h            \
        $(PERL_INCDEP)/perliol.h            \
        $(PERL_INCDEP)/perlsdio.h            \
        $(PERL_INCDEP)/perlstatic.h            \
        $(PERL_INCDEP)/perlvars.h            \
        $(PERL_INCDEP)/perly.h            \
        $(PERL_INCDEP)/pp.h            \
        $(PERL_INCDEP)/pp_proto.h            \
        $(PERL_INCDEP)/proto.h            \
        $(PERL_INCDEP)/reentr.h            \
        $(PERL_INCDEP)/regcharclass.h            \
        $(PERL_INCDEP)/regcomp.h            \
        $(PERL_INCDEP)/regcomp_internal.h            \
        $(PERL_INCDEP)/regexp.h            \
        $(PERL_INCDEP)/reginline.h            \
        $(PERL_INCDEP)/regnodes.h            \
        $(PERL_INCDEP)/sbox32_hash.h            \
        $(PERL_INCDEP)/scope.h            \
        $(PERL_INCDEP)/scope_types.h            \
        $(PERL_INCDEP)/sv.h            \
        $(PERL_INCDEP)/sv_inline.h            \
        $(PERL_INCDEP)/thread.h            \
        $(PERL_INCDEP)/time64.h            \
        $(PERL_INCDEP)/time64_config.h            \
        $(PERL_INCDEP)/uni_keywords.h            \
        $(PERL_INCDEP)/unicode_constants.h            \
        $(PERL_INCDEP)/unixish.h            \
        $(PERL_INCDEP)/utf8.h            \
        $(PERL_INCDEP)/utfebcdic.h            \
        $(PERL_INCDEP)/util.h            \
        $(PERL_INCDEP)/uudmap.h            \
        $(PERL_INCDEP)/vutil.h            \
        $(PERL_INCDEP)/warnings.h            \
        $(PERL_INCDEP)/zaphod32_hash.h            

$(OBJECT) : $(PERL_HDRS)

DBI.c Perl.c : $(XSUBPPDEPS)


# --- MakeMaker makefile section:

$(OBJECT) : $(FIRST_MAKEFILE)

# We take a very conservative approach here, but it's worth it.
# We move Makefile to Makefile.old here to avoid gnu make looping.
$(FIRST_MAKEFILE) : Makefile.PL $(CONFIGDEP)
	$(NOECHO) $(ECHO) "Makefile out-of-date with respect to $?"
	$(NOECHO) $(ECHO) "Cleaning current config before rebuilding Makefile..."
	-$(NOECHO) $(RM_F) $(MAKEFILE_OLD)
	-$(NOECHO) $(MV)   $(FIRST_MAKEFILE) $(MAKEFILE_OLD)
	- $(MAKE) $(USEMAKEFILE) $(MAKEFILE_OLD) clean $(DEV_NULL)
	$(PERLRUN) Makefile.PL 
	$(NOECHO) $(ECHO) "==> Your Makefile has been rebuilt. <=="
	$(NOECHO) $(ECHO) "==> Please rerun the $(MAKE) command.  <=="
	$(FALSE)



# --- MakeMaker staticmake section:

# --- MakeMaker makeaperl section ---
MAP_TARGET    = perl
FULLPERL      = "/usr/local/bin/perl"
MAP_PERLINC   = "-Iblib/arch" "-Iblib/lib" "-I/usr/local/lib/perl5/5.40.0/x86_64-linux-gnu" "-I/usr/local/lib/perl5/5.40.0"

$(MAP_TARGET) :: $(MAKE_APERL_FILE)
	$(MAKE) $(USEMAKEFILE) $(MAKE_APERL_FILE) $@

$(MAKE_APERL_FILE) : static $(FIRST_MAKEFILE) pm_to_blib
	$(NOECHO) $(ECHO) Writing \"$(MAKE_APERL_FILE)\" for this $(MAP_TARGET)
	$(NOECHO) $(PERLRUNINST) \
		Makefile.PL DIR="" \
		MAKEFILE=$(MAKE_APERL_FILE) LINKTYPE=static \
		MAKEAPERL=1 NORECURS=1 CCCDLFLAGS=


# --- MakeMaker test section:
TEST_VERBOSE=0
TEST_TYPE=test_$(LINKTYPE)
TEST_FILE = test.pl
TEST_FILES = t/*.t
TESTDB_SW = -d

testdb :: testdb_$(LINKTYPE)
	$(NOECHO) $(NOOP)

test :: $(TEST_TYPE)
	$(NOECHO) $(NOOP)

# Occasionally we may face this degenerate target:
test_ : test_dynamic
	$(NOECHO) $(NOOP)

subdirs-test_dynamic :: dynamic pure_all

test_dynamic :: subdirs-test_dynamic
	PERL_DL_NONLAZY=1 $(FULLPERLRUN) "-MExtUtils::Command::MM" "-MTest::Harness" "-e" "undef *Test::Harness::Switches; test_harness($(TEST_VERBOSE), '$(INST_LIB)', '$(INST_ARCHLIB)')" $(TEST_FILES)

testdb_dynamic :: dynamic pure_all
	PERL_DL_NONLAZY=1 $(FULLPERLRUN) $(TESTDB_SW) "-I$(INST_LIB)" "-I$(INST_ARCHLIB)" $(TEST_FILE)

subdirs-test_static :: static pure_all

test_static :: subdirs-test_static $(MAP_TARGET)
	PERL_DL_NONLAZY=1 "/root/.cpan/build/DBI-1.645-0/$(MAP_TARGET)" $(MAP_PERLINC) "-MExtUtils::Command::MM" "-MTest::Harness" "-e" "undef *Test::Harness::Switches; test_harness($(TEST_VERBOSE), '$(INST_LIB)', '$(INST_ARCHLIB)')" $(TEST_FILES)

testdb_static :: static pure_all $(MAP_TARGET)
	PERL_DL_NONLAZY=1 "/root/.cpan/build/DBI-1.645-0/$(MAP_TARGET)" $(MAP_PERLINC) "-I$(INST_LIB)" "-I$(INST_ARCHLIB)" $(TEST_FILE)



# --- MakeMaker ppd section:
# Creates a PPD (Perl Package Description) for a binary distribution.
ppd :
	$(NOECHO) $(ECHO) '<SOFTPKG NAME="DBI" VERSION="1.645">' > DBI.ppd
	$(NOECHO) $(ECHO) '    <ABSTRACT>Database independent interface for Perl</ABSTRACT>' >> DBI.ppd
	$(NOECHO) $(ECHO) '    <AUTHOR>DBI team (dbi-users@perl.org)</AUTHOR>' >> DBI.ppd
	$(NOECHO) $(ECHO) '    <IMPLEMENTATION>' >> DBI.ppd
	$(NOECHO) $(ECHO) '        <PERLCORE VERSION="5,008001,0,0" />' >> DBI.ppd
	$(NOECHO) $(ECHO) '        <ARCHITECTURE NAME="x86_64-linux-gnu-5.40" />' >> DBI.ppd
	$(NOECHO) $(ECHO) '        <CODEBASE HREF="" />' >> DBI.ppd
	$(NOECHO) $(ECHO) '    </IMPLEMENTATION>' >> DBI.ppd
	$(NOECHO) $(ECHO) '</SOFTPKG>' >> DBI.ppd


# --- MakeMaker pm_to_blib section:

pm_to_blib : $(FIRST_MAKEFILE) $(TO_INST_PM)
	$(NOECHO) $(ABSPERLRUN) -MExtUtils::Install -e 'pm_to_blib({@ARGV}, '\''$(INST_LIB)/auto'\'', q[$(PM_FILTER)], '\''$(PERM_DIR)'\'')' -- \
	  'DBI.pm' '$(INST_LIB)/DBI.pm' \
	  'DBIXS.h' '$(INST_ARCHLIB)/auto/$(FULLEXT)/DBIXS.h' \
	  'Driver.xst' '$(INST_ARCHLIB)/auto/$(FULLEXT)/Driver.xst' \
	  'Driver_xst.h' '$(INST_ARCHLIB)/auto/$(FULLEXT)/Driver_xst.h' \
	  'dbd_xsh.h' '$(INST_ARCHLIB)/auto/$(FULLEXT)/dbd_xsh.h' \
	  'dbi_sql.h' '$(INST_ARCHLIB)/auto/$(FULLEXT)/dbi_sql.h' \
	  'dbipport.h' '$(INST_ARCHLIB)/auto/$(FULLEXT)/dbipport.h' \
	  'dbivport.h' '$(INST_ARCHLIB)/auto/$(FULLEXT)/dbivport.h' \
	  'dbixs_rev.h' '$(INST_ARCHLIB)/auto/$(FULLEXT)/dbixs_rev.h' \
	  'dbixs_rev.pl' '$(INST_LIB)/dbixs_rev.pl' \
	  'lib/Bundle/DBI.pm' 'blib/lib/Bundle/DBI.pm' \
	  'lib/DBD/DBM.pm' 'blib/lib/DBD/DBM.pm' \
	  'lib/DBD/ExampleP.pm' 'blib/lib/DBD/ExampleP.pm' \
	  'lib/DBD/File.pm' 'blib/lib/DBD/File.pm' \
	  'lib/DBD/File/Developers.pod' 'blib/lib/DBD/File/Developers.pod' \
	  'lib/DBD/File/HowTo.pod' 'blib/lib/DBD/File/HowTo.pod' \
	  'lib/DBD/File/Roadmap.pod' 'blib/lib/DBD/File/Roadmap.pod' \
	  'lib/DBD/Gofer.pm' 'blib/lib/DBD/Gofer.pm' \
	  'lib/DBD/Gofer/Policy/Base.pm' 'blib/lib/DBD/Gofer/Policy/Base.pm' \
	  'lib/DBD/Gofer/Policy/classic.pm' 'blib/lib/DBD/Gofer/Policy/classic.pm' \
	  'lib/DBD/Gofer/Policy/pedantic.pm' 'blib/lib/DBD/Gofer/Policy/pedantic.pm' \
	  'lib/DBD/Gofer/Policy/rush.pm' 'blib/lib/DBD/Gofer/Policy/rush.pm' \
	  'lib/DBD/Gofer/Transport/Base.pm' 'blib/lib/DBD/Gofer/Transport/Base.pm' \
	  'lib/DBD/Gofer/Transport/corostream.pm' 'blib/lib/DBD/Gofer/Transport/corostream.pm' \
	  'lib/DBD/Gofer/Transport/null.pm' 'blib/lib/DBD/Gofer/Transport/null.pm' \
	  'lib/DBD/Gofer/Transport/pipeone.pm' 'blib/lib/DBD/Gofer/Transport/pipeone.pm' \
	  'lib/DBD/Gofer/Transport/stream.pm' 'blib/lib/DBD/Gofer/Transport/stream.pm' \
	  'lib/DBD/Mem.pm' 'blib/lib/DBD/Mem.pm' \
	  'lib/DBD/NullP.pm' 'blib/lib/DBD/NullP.pm' \
	  'lib/DBD/Proxy.pm' 'blib/lib/DBD/Proxy.pm' \
	  'lib/DBD/Sponge.pm' 'blib/lib/DBD/Sponge.pm' \
	  'lib/DBI/Changes.pm' 'blib/lib/DBI/Changes.pm' \
	  'lib/DBI/Const/GetInfo/ANSI.pm' 'blib/lib/DBI/Const/GetInfo/ANSI.pm' \
	  'lib/DBI/Const/GetInfo/ODBC.pm' 'blib/lib/DBI/Const/GetInfo/ODBC.pm' \
	  'lib/DBI/Const/GetInfoReturn.pm' 'blib/lib/DBI/Const/GetInfoReturn.pm' \
	  'lib/DBI/Const/GetInfoType.pm' 'blib/lib/DBI/Const/GetInfoType.pm' \
	  'lib/DBI/DBD.pm' 'blib/lib/DBI/DBD.pm' \
	  'lib/DBI/DBD/Metadata.pm' 'blib/lib/DBI/DBD/Metadata.pm' \
	  'lib/DBI/DBD/SqlEngine.pm' 'blib/lib/DBI/DBD/SqlEngine.pm' \
	  'lib/DBI/DBD/SqlEngine/Developers.pod' 'blib/lib/DBI/DBD/SqlEngine/Developers.pod' \
	  'lib/DBI/DBD/SqlEngine/HowTo.pod' 'blib/lib/DBI/DBD/SqlEngine/HowTo.pod' \
	  'lib/DBI/Gofer/Execute.pm' 'blib/lib/DBI/Gofer/Execute.pm' \
	  'lib/DBI/Gofer/Request.pm' 'blib/lib/DBI/Gofer/Request.pm' 
	$(NOECHO) $(ABSPERLRUN) -MExtUtils::Install -e 'pm_to_blib({@ARGV}, '\''$(INST_LIB)/auto'\'', q[$(PM_FILTER)], '\''$(PERM_DIR)'\'')' -- \
	  'lib/DBI/Gofer/Response.pm' 'blib/lib/DBI/Gofer/Response.pm' \
	  'lib/DBI/Gofer/Serializer/Base.pm' 'blib/lib/DBI/Gofer/Serializer/Base.pm' \
	  'lib/DBI/Gofer/Serializer/DataDumper.pm' 'blib/lib/DBI/Gofer/Serializer/DataDumper.pm' \
	  'lib/DBI/Gofer/Serializer/Storable.pm' 'blib/lib/DBI/Gofer/Serializer/Storable.pm' \
	  'lib/DBI/Gofer/Transport/Base.pm' 'blib/lib/DBI/Gofer/Transport/Base.pm' \
	  'lib/DBI/Gofer/Transport/pipeone.pm' 'blib/lib/DBI/Gofer/Transport/pipeone.pm' \
	  'lib/DBI/Gofer/Transport/stream.pm' 'blib/lib/DBI/Gofer/Transport/stream.pm' \
	  'lib/DBI/Profile.pm' 'blib/lib/DBI/Profile.pm' \
	  'lib/DBI/ProfileData.pm' 'blib/lib/DBI/ProfileData.pm' \
	  'lib/DBI/ProfileDumper.pm' 'blib/lib/DBI/ProfileDumper.pm' \
	  'lib/DBI/ProfileDumper/Apache.pm' 'blib/lib/DBI/ProfileDumper/Apache.pm' \
	  'lib/DBI/ProfileSubs.pm' 'blib/lib/DBI/ProfileSubs.pm' \
	  'lib/DBI/ProxyServer.pm' 'blib/lib/DBI/ProxyServer.pm' \
	  'lib/DBI/PurePerl.pm' 'blib/lib/DBI/PurePerl.pm' \
	  'lib/DBI/SQL/Nano.pm' 'blib/lib/DBI/SQL/Nano.pm' \
	  'lib/DBI/Util/CacheMemory.pm' 'blib/lib/DBI/Util/CacheMemory.pm' \
	  'lib/DBI/Util/_accessor.pm' 'blib/lib/DBI/Util/_accessor.pm' \
	  'lib/DBI/W32ODBC.pm' 'blib/lib/DBI/W32ODBC.pm' \
	  'lib/Win32/DBIODBC.pm' 'blib/lib/Win32/DBIODBC.pm' 
	$(NOECHO) $(TOUCH) pm_to_blib


# --- MakeMaker selfdocument section:

# here so even if top_targets is overridden, these will still be defined
# gmake will silently still work if any are .PHONY-ed but nmake won't

static ::
	$(NOECHO) $(NOOP)

dynamic ::
	$(NOECHO) $(NOOP)

config ::
	$(NOECHO) $(NOOP)


# --- MakeMaker postamble section:


# End.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       root/.cpan/build/DBI-1.645-0/Makefile.PL                                                            0000644 0000313 0000144 00000032656 14665544400 015551  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl
# -*- perl -*-
#
# $Id$
#
#  Copyright (c) 1994-2024  Tim Bunce  Ireland
#  Copyright (c) 2024-2024  DBI team
#
# See COPYRIGHT section in DBI.pm for usage and distribution rights.

use 5.008_001;

use ExtUtils::MakeMaker 5.16, qw(WriteMakefile $Verbose prompt);
use Getopt::Long;
use Config;
use File::Find;
use File::Spec;
use strict;

use lib "lib"; # for use DBI::DBD
use DBI::DBD;

$| = 1;
$^W = 1;
my $os = $^O;
my $osvers = $Config{osvers};
$osvers =~ s/^\s*(\d+\.\d+).*/$1/;  # drop sub-sub-version: 2.5.1 -> 2.5
my $ext_pl = $^O eq "VMS" ? ".pl" : "";
my $is_developer = ((-d ".svn" || -d ".git") && -f "MANIFEST.SKIP");

$::opt_v = 0;
$::opt_thread = $Config{useithreads};	# thread if we can, use "-nothread" to disable
$::opt_g = 0;
$::opt_g = 1 if $is_developer && $ENV{LOGNAME} && $ENV{LOGNAME} eq "timbo"; # it's me! (probably)

GetOptions (qw(v! g! thread!))  or die "Invalid arguments\n";

$::opt_g &&= "-g";  # convert to actual string

if (($ENV{LANG}||"") =~ m/utf-?8/i) {
    print "\n";
    print "*** Your LANG environment variable is set to '$ENV{LANG}'\n";
    print "*** This may cause problems for some perl installations.\n";
    print "*** If you get test failures, please try again with LANG unset.\n";
    print "*** If that then works, please email dbi-dev\@perl.org with details\n";
    print "*** including the output of 'perl -V'\n";
    print "\n";
    sleep 1;
    }

if ($^O eq "MSWin32" && $] < 5.012 && $File::Spec::VERSION < 3.31) {
    warn "Windows requires File::Spec-3.31, which is CORE as of perl-5.11.3\n";
    warn "As this is just perl-$] with File::Spec-$File::Spec::VERSION\n";
    exit 1;
    }

my %opts = (
    NAME                      => "DBI",
    AUTHOR                    => 'DBI team (dbi-users@perl.org)',
    VERSION_FROM              => "DBI.pm",
    ABSTRACT_FROM             => "DBI.pm",
    MIN_PERL_VERSION          => "5.008001",
    BUILD_REQUIRES            => {
        "ExtUtils::MakeMaker" => "6.48",
        "Test::Simple"        => "0.90",
	},
    META_MERGE                => {
	resources             => {
	    repository        => "https://github.com/perl5-dbi/dbi",
	    MailingList       => 'mailto:dbi-dev@perl.org',
	    license           => "http://dev.perl.org/licenses/",
	    homepage          => "http://dbi.perl.org/",
	    IRC               => "irc://irc.perl.org/#dbi",
	    },
	suggests              => {
	    "RPC::PlServer"   => 0.2020,
	    "Net::Daemon"     => 0,
	    "SQL::Statement"  => 1.414,
	    "Clone"           => 0.47,
	    "MLDBM"           => 0,
	    "DB_File"         => 0,
	    },
	},
    CONFLICTS                 => {
	"SQL::Statement"      => "1.33",
	"DBD::AnyData"        => "0.110",
	"DBD::CSV"            => "0.36",
	"DBD::RAM"            => "0.072",
	"DBD::PO"             => "2.10",
	"DBD::Google"         => "0.51",
	"DBD::Amazon"         => "0.10",
	},
    LICENSE                   => "perl",
    EXE_FILES                 => [ "dbiproxy$ext_pl", "dbiprof$ext_pl", "dbilogstrip$ext_pl" ],
    DIR                       => [ ],
    dynamic_lib               => {
	OTHERLDFLAGS          => "$::opt_g",
	},
    clean                     => {
	FILES                 => "\$(DISTVNAME) Perl.xsi t/zv*_*.t dbi__null_test_tmp* test_output_*"
                ." dbiproxy$ext_pl dbiprof$ext_pl dbilogstrip$ext_pl dbiproxy.*log dbitrace.log dbi*.prof ndtest.prt" },
    dist                      => {
	DIST_DEFAULT          => "clean distcheck disttest tardist",
	PREOP                 => '$(MAKE) -f Makefile.old distdir',
	COMPRESS              => "gzip -v9", SUFFIX => "gz",
	},
    macro                     => {
	TARFLAGS              => "--format=ustar -c -v -f",
	},
    );
$opts{CAPI} = "TRUE" if $Config{archname} =~ /-object\b/i;

if (my $gccversion = $Config{gccversion}) {	# ask gcc to be more pedantic
    if ($gccversion =~ m/ clang ([0-9][-0-9.]*)/i) {
	print "Your perl was compiled with Clang (version $1). As this is not GCC, version checking is skipped.\n";
	# https://clang.llvm.org/docs/DiagnosticsReference.html
	$opts{DEFINE} .= " -W -Wall -Wpointer-arith -Wbad-function-cast";
	$opts{DEFINE} .= " -Wno-comment -Wno-sign-compare -Wno-cast-qual";
	$opts{DEFINE} .= " -Wmissing-noreturn -Wno-unused-parameter";
	$opts{DEFINE} .= " -Wno-compound-token-split-by-macro -Wno-constant-conversion";
	$opts{DEFINE} .= " -Wno-implicit-const-int-float-conversion";
	if ($is_developer && $::opt_g) {
	    $opts{DEFINE} .= " -Wmissing-prototypes";
	    }
	}
    else {
	warn "WARNING: Your GNU C $gccversion compiler is very old. Please upgrade it and rebuild perl.\n"
	    if $gccversion =~ m/^\D*(1|2\.[1-8])\b/;
	print "Your perl was compiled with gcc (version $Config{gccversion}), okay.\n";
	$gccversion =~ s/[^\d\.]//g; # just a number please
	$opts{DEFINE} .= " -W -Wall -Wpointer-arith -Wbad-function-cast";
	$opts{DEFINE} .= " -Wno-comment -Wno-sign-compare -Wno-cast-qual";
	$opts{DEFINE} .= " -Wmissing-noreturn -Wno-unused-parameter" if $gccversion ge "3.0";
	if ($is_developer && $::opt_g) {
	    $opts{DEFINE} .= " -DPERL_GCC_PEDANTIC -ansi -pedantic"  if $gccversion ge "3.0";
	    $opts{DEFINE} .= " -Wdisabled-optimization -Wformat"     if $gccversion ge "3.0";
	    $opts{DEFINE} .= " -Wmissing-prototypes";
	    }
	}
    }

$opts{DEFINE} .= " -DDBI_NO_THREADS" unless $::opt_thread;

# HP-UX 9 cannot link a non-PIC object file into a shared library.
# Since the # .a libs that Oracle supplies contain non-PIC object
# files, we sadly have to build static on HP-UX 9 :(
if ($os eq "hpux" and $osvers < 10) {
    $opts{LINKTYPE} = "static";
    print "Warning: Forced to build static not dynamic on $os $osvers.\a\n";
    print "** Note: DBI will be built *into* a NEW perl binary. You MUST use that new perl.\n";
    print "         See README and Makefile.PL for more information.\a\n";
    }

if ($os eq "MSWin32"  &&  $Config{libs} =~ /\bPerlCRT.lib\b/ &&  -f "$Config{archlib}/CORE/PerlCRT.lib") {
    # ActiveState Perl needs this; should better be done in MakeMaker, but
    # as a temporary workaround it seems ok.
    $opts{LIBS} = "-L$Config{archlib}/CORE";
    }

# Set aside some values for post_initialize() in package MY
my ($cfg_privlibexp, $cfg_archlibexp, $cfg_sitelibexp, $cfg_sitearchexp, $cfg_man3direxp) =
     @Config{qw( privlibexp archlibexp sitelibexp sitearchexp man3direxp )};
for ($cfg_privlibexp, $cfg_archlibexp, $cfg_sitelibexp, $cfg_sitearchexp, $cfg_man3direxp) {
     $_ = "" unless defined $_;
    }

my $conflictMsg = <<EOCM;
***
    This version of DBI conflicts with the version of
    module %s (%s) you have installed.

    It's strongly recommended that you update it after
    installing this version of DBI.
***
EOCM

sub CheckConflicts {
    my %params    = @_;
    my %conflicts = %{ $params{CONFLICTS} };
    my $found     = 0;

    while (my ($module, $version) = each %conflicts) {
        undef $@;
        eval "require $module";
        $@ and next;

        my $installed = eval "\$" . $module . "::VERSION";
        $installed gt $version and next;

	++$found;
	my $msg = $conflictMsg;
	my $warning = sprintf( $msg, $module, $installed );
	warn $warning;
	}

    return !$found;
    } # CheckConflicts

sub WriteMakefile1 {
    #Written by Alexandr Ciornii, version 0.21. Added by eumm-upgrade.
    my %params       = @_;
    my $eumm_version = $ExtUtils::MakeMaker::VERSION;
    $eumm_version = eval $eumm_version;
    die "EXTRA_META is deprecated" if  exists $params{EXTRA_META};
    die "License not specified"    if !exists $params{LICENSE};
    if ($params{BUILD_REQUIRES} and $eumm_version < 6.5503) {
        # EUMM 6.5502 has problems with BUILD_REQUIRES
        $params{PREREQ_PM} = { %{ $params{PREREQ_PM} || {} }, %{ $params{BUILD_REQUIRES} } };
        delete $params{BUILD_REQUIRES};
	}

    # more or less taken from Moose' Makefile.PL
    if ($params{CONFLICTS}) {
        my $ok = CheckConflicts (%params);
        exit 0 if ($params{PREREQ_FATAL} and not $ok);
        my $cpan_smoker = grep { $_ =~ m/(?:CR_SMOKER|CPAN_REPORTER|AUTOMATED_TESTING)/ } keys %ENV;
        unless ($cpan_smoker || $ENV{PERL_MM_USE_DEFAULT}) {
            sleep 4 unless $ok;
	    }
	%{$params{META_MERGE}{conflicts}} = %{$params{CONFLICTS}};
        delete $params{CONFLICTS};
	}

    delete $params{CONFIGURE_REQUIRES} if $eumm_version < 6.52;
    delete $params{MIN_PERL_VERSION}   if $eumm_version < 6.48;
    delete $params{META_MERGE}         if $eumm_version < 6.46;
    delete $params{META_ADD}           if $eumm_version < 6.46;
    delete $params{LICENSE}            if $eumm_version < 6.31;

    WriteMakefile (%params);
    } # WriteMakefile1

$Verbose = $::opt_v;
WriteMakefile1 (
    dbd_edit_mm_attribs (\%opts, {
	create_pp_tests   => 1,
	create_nano_tests => 1,
	create_gap_tests  => 1,
	})
    );
# WriteMakefile call is last thing executed
# so return value is propagated

# =====================================================================

package MY;

sub postamble {
warn <<EOT;

    I see you're using perl $] on $Config::Config{archname}, okay.
    Remember to actually *read* the README file!
    Use  'make' to build the software (dmake or nmake on Windows).
    Then 'make test' to execute self tests.
    Then 'make install' to install the DBI and then delete this working
    directory before unpacking and building any DBD::* drivers.

EOT
warn <<EOT if $os eq "MSWin32";
    Windows users need to use the correct make command.
    That may be nmake or dmake depending on which Perl you are using.
    If using the Win32 ActiveState build then it is recommended that you
    use the ppm utility to fetch and install a prebuilt DBI instead.

EOT

    # This here instead of post_constants, as otherwise xt/ would be tested *before* t/
    my $min_vsn = ($] >= 5.024 && -d "xt" && -d "sandbox" && ($ENV{AUTOMATED_TESTING} || 0) != 1)
	? join "\n" =>
	    'test ::',
	    '	-@env TEST_FILES="xt/*.t" make -e test_dynamic',
	    ''
	: "";

    return join "\n" =>
	$min_vsn;
    } # postamble

sub libscan {
    my($self, $path) = @_;
    ($path =~ /\~$|\B\.(svn|git)\b/) ? undef : $path;
    } # libscan

sub const_cccmd {
    my $self = shift;
    local ($_) = $self->SUPER::const_cccmd (@_);
    # If perl Makefile.PL *-g* then switch on debugging
    if ($::opt_g) {
	s/\s-O\d?\b//;      # delete optimise option
	s/\s-/ -g -/;       # add -g option
	}
    $_;
    } # const_cccmd

sub post_initialize {
    my $self = shift;

    if ($cfg_privlibexp ne $cfg_sitelibexp) {
	# this block could probably be removed now
	my %old;
	File::Find::find (sub {
	    local $_ = $File::Find::name;
	    s{\\}{/}g if $os eq "MSWin32";
	    $File::Find::prune = 1, return
		if -d $_ && ($_ eq $cfg_sitelibexp  ||
			     $_ eq $cfg_sitearchexp ||
			     $_ eq $cfg_man3direxp);
	    ++$old{$_} if m{\bDB(I|D$)}; # DBI files, but just DBD dirs
	    }, $cfg_privlibexp, $cfg_archlibexp);
	if (%old) {
	    warn "
Warning: By default new modules are installed into your 'site_lib'
         directories. Since site_lib directories come after the normal library
         directories you must delete old DBI files and directories from your
         'privlib' and 'archlib' directories and their auto subdirectories.

Reinstall DBI and your DBD::* drivers after deleting the old directories.

Here's a list of probable old files and directories:

 " . join ("\n ", (sort keys %old), "\n" );
	    }
	}

    # install files that DBD's may need
    File::Find::find (sub {

	# may be '.' or '[]' depending on File::Find version
	$_ = "." if $^O eq "VMS" && $_ eq File::Spec->curdir;

	$File::Find::prune = 1, return if -d $_ && "." ne $_;
	$self->{PM}->{$_} = File::Spec->catfile ($self->{INST_ARCHAUTODIR}, $_)
	    if ".h" eq substr ($_, -2) || ".xst" eq substr ($_, -4);
        }, ".");

    delete $self->{$_}{"git-svn-vsn.pl"} for qw( PM MAN3PODS );

    return "";
    } # post_initialize

sub post_constants {
    my $self = shift;

    # ensure that Driver.xst and related code gets tested
    my $xst = main::dbd_postamble ();
    $xst =~ s/\$\(BASEEXT\)/Perl/g;
    $xst .= '
dbixs_rev.h: DBIXS.h Driver_xst.h dbipport.h dbivport.h dbixs_rev.pl
	$(PERL) dbixs_rev.pl

DBI.c: Perl$(OBJ_EXT)

# make Changes file available as installed pod docs "perldoc DBI::Changes"
inst_libdbi = ' . File::Spec->catdir  ($self->{INST_LIB}, 'DBI') . '
changes_pm1 = ' . File::Spec->catfile ('lib', 'DBI', 'Changes.pm') . '
changes_pm2 = ' . File::Spec->catfile ($self->{INST_LIB}, 'DBI', 'Changes.pm') . '
'.q{

config :: $(changes_pm)
	$(NOECHO) $(NOOP)

$(changes_pm): Changes
	$(MKPATH) $(inst_libdbi)
	$(RM_F) $(changes_pm)
	perl changes2pm.pl
	$(CP) $(changes_pm1) $(changes_pm2)

ptest:  all
	prove --blib --jobs 8 --shuffle

faq:
	: checkin any local changes not already checked in before overwriting
	svn commit --message "dbi.tiddlyspot.com FAQ update" dbi.tiddlyspot.com.html
	wget --ignore-length --output-document=dbi.tiddlyspot.com.html --timestamping http://dbi.tiddlyspot.com/download
	svn commit --message "dbi.tiddlyspot.com FAQ update" dbi.tiddlyspot.com.html

checkkeywords:
	$(RM_RF) blib
	find . -type f \( -name .svn -prune -o -name \*.pm -o -name \*.PL -o -name \*.pl \) \
            -exec bash -c '[ -z "$$(svn pg svn:keywords {})" ] && echo svn propset svn:keywords \"Id Revision\" {}' \;

.PHONY:	doc
doc:
	perl make-doc.pl
dbipport:
	perl sandbox/genPPPort_h.pl
ppport:		dbipport.h
	perl dbipport.h --compat-version=5.8.0 DBI.xs

lib/DBI/Changes.pm:	Changes
	perl changes2pm.pl

checkpod:
	$(RM_RF) blib
	find . -type f \( -name .svn -prune -o -name \*.pm -o -name \*.PL -o -name \*.pl \) \
            -exec podchecker {} \; 2>&1 | grep -v 'pod syntax OK'
};

    return $xst;
    } # post_constants

1;
                                                                                  root/.cpan/build/DBI-1.645-0/Perl.c                                                                 0000644 0000000 0000000 00000125256 14723046262 014622  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*
 * This file was generated automatically by ExtUtils::ParseXS version 3.51 from the
 * contents of Perl.xs. Do not edit this file, edit Perl.xs instead.
 *
 *    ANY CHANGES MADE HERE WILL BE LOST!
 *
 */

#line 1 "Perl.xs"
/* This is a skeleton driver that only serves as a basic sanity check
   that the Driver.xst mechansim doesn't have compile-time errors in it.
   vim: ts=8:sw=4:expandtab
*/

#define PERL_NO_GET_CONTEXT
#include "DBIXS.h"
#include "dbd_xsh.h"

#undef DBIh_SET_ERR_CHAR        /* to syntax check emulation */
#include "dbivport.h"

DBISTATE_DECLARE;


struct imp_drh_st {
    dbih_drc_t com;     /* MUST be first element in structure   */
};
struct imp_dbh_st {
    dbih_dbc_t com;     /* MUST be first element in structure   */
};
struct imp_sth_st {
    dbih_stc_t com;     /* MUST be first element in structure   */
};



#define dbd_discon_all(drh, imp_drh)            (drh=drh,imp_drh=imp_drh,1)
#define dbd_dr_data_sources(drh, imp_drh, attr) (drh=drh,imp_drh=imp_drh,attr=attr,Nullav)
#define dbd_db_do4_iv(dbh,imp_dbh,p3,p4)        (dbh=dbh,imp_dbh=imp_dbh,(void*)p3,p4=p4,-2)
#define dbd_db_last_insert_id(dbh, imp_dbh, p3,p4,p5,p6, attr) \
        (dbh=dbh,imp_dbh=imp_dbh,p3=p3,p4=p4,p5=p5,p6=p6,attr=attr,&PL_sv_undef)
#define dbd_take_imp_data(h, imp_xxh, p3)       (h=h,imp_xxh=imp_xxh,&PL_sv_undef)
#define dbd_st_execute_for_fetch(sth, imp_sth, p3, p4) \
        (sth=sth,imp_sth=imp_sth,p3=p3,p4=p4,&PL_sv_undef)

#define dbd_st_bind_col(sth, imp_sth, param, ref, sql_type, attribs) \
        (sth=sth,imp_sth=imp_sth,param=param,ref=ref,sql_type=sql_type,attribs=attribs,1)

int     /* just to test syntax of macros etc */
dbd_st_rows(SV *h, imp_sth_t *imp_sth)
{
    dTHX;
    PERL_UNUSED_VAR(h);
    DBIh_SET_ERR_CHAR(h, imp_sth, 0, 1, "err msg", "12345", Nullch);
    return -1;
}


#line 60 "Perl.c"
#ifndef PERL_UNUSED_VAR
#  define PERL_UNUSED_VAR(var) if (0) var = var
#endif

#ifndef dVAR
