L<File::Spec::Unix> has been upgraded to 3.40.

C<abs2rel> could produce incorrect results when given two relative paths or
the root directory twice [perl #111510].

=item *

L<File::stat> has been upgraded to 1.07.

C<File::stat> ignores the L<filetest> pragma, and warns when used in
combination therewith.  But it was not warning for C<-r>.  This has been
fixed [perl #111640].

C<-p> now works, and does not return false for pipes [perl #111638].

Previously C<File::stat>'s overloaded C<-x> and C<-X> operators did not give
the correct results for directories or executable files when running as
root. They had been treating executable permissions for root just like for
any other user, performing group membership tests I<etc> for files not owned
by root. They now follow the correct Unix behaviour - for a directory they
are always true, and for a file if any of the three execute permission bits
are set then they report that root can execute the file. Perl's builtin
C<-x> and C<-X> operators have always been correct.

=item *

L<File::Temp> has been upgraded to 0.23

Fixes various bugs involving directory removal.  Defers unlinking tempfiles if
the initial unlink fails, which fixes problems on NFS.

=item *

L<GDBM_File> has been upgraded to 1.15.

The undocumented optional fifth parameter to C<TIEHASH> has been
removed. This was intended to provide control of the callback used by
C<gdbm*> functions in case of fatal errors (such as filesystem problems),
but did not work (and could never have worked). No code on CPAN even
attempted to use it. The callback is now always the previous default,
C<croak>. Problems on some platforms with how the C<C> C<croak> function
is called have also been resolved.

=item *

L<Hash::Util> has been upgraded to 0.15.

C<hash_unlocked> and C<hashref_unlocked> now returns true if the hash is
unlocked, instead of always returning false [perl #112126].

C<hash_unlocked>, C<hashref_unlocked>, C<lock_hash_recurse> and
C<unlock_hash_recurse> are now exportable [perl #112126].

Two new functions, C<hash_locked> and C<hashref_locked>, have been added.
Oddly enough, these two functions were already exported, even though they
did not exist [perl #112126].

=item *

L<HTTP::Tiny> has been upgraded to 0.025.

Add SSL verification features [github #6], [github #9].

Include the final URL in the response hashref.

Add C<local_address> option.

This improves SSL support.

=item *

L<IO> has been upgraded to 1.28.

C<sync()> can now be called on read-only file handles [perl #64772].

L<IO::Socket> tries harder to cache or otherwise fetch socket
information.

=item *

L<IPC::Cmd> has been upgraded to 0.80.

Use C<POSIX::_exit> instead of C<exit> in C<run_forked> [rt.cpan.org #76901].

=item *

L<IPC::Open3> has been upgraded to 1.13.

The C<open3()> function no longer uses C<POSIX::close()> to close file
descriptors since that breaks the ref-counting of file descriptors done by
PerlIO in cases where the file descriptors are shared by PerlIO streams,
leading to attempts to close the file descriptors a second time when
any such PerlIO streams are closed later on.

=item *

L<Locale::Codes> has been upgraded to 3.25.

It includes some new codes.

=item *

L<Memoize> has been upgraded to 1.03.

Fix the C<MERGE> cache option.

=item *

L<Module::Build> has been upgraded to 0.4003.

Fixed bug where modules without C<$VERSION> might have a version of '0' listed
in 'provides' metadata, which will be rejected by PAUSE.

Fixed bug in PodParser to allow numerals in module names.

Fixed bug where giving arguments twice led to them becoming arrays, resulting
in install paths like F<ARRAY(0xdeadbeef)/lib/Foo.pm>.

A minor bug fix allows markup to be used around the leading "Name" in
a POD "abstract" line, and some documentation improvements have been made.

=item *

L<Module::CoreList> has been upgraded to 2.90

Version information is now stored as a delta, which greatly reduces the
size of the F<CoreList.pm> file.

This restores compatibility with older versions of perl and cleans up
the corelist data for various modules.

=item *

L<Module::Load::Conditional> has been upgraded to 0.54.

Fix use of C<requires> on perls installed to a path with spaces.

Various enhancements include the new use of Module::Metadata.

=item *

L<Module::Metadata> has been upgraded to 1.000011.

The creation of a Module::Metadata object for a typical module file has
been sped up by about 40%, and some spurious warnings about C<$VERSION>s
have been suppressed.

=item *

L<Module::Pluggable> has been upgraded to 4.7.

Amongst other changes, triggers are now allowed on events, which gives
a powerful way to modify behaviour.

=item *

L<Net::Ping> has been upgraded to 2.41.

This fixes some test failures on Windows.

=item *

L<Opcode> has been upgraded to 1.25.

Reflect the removal of the boolkeys opcode and the addition of the
clonecv, introcv and padcv opcodes.

=item *

L<overload> has been upgraded to 1.22.

C<no overload> now warns for invalid arguments, just like C<use overload>.

=item *

L<PerlIO::encoding> has been upgraded to 0.16.

This is the module implementing the ":encoding(...)" I/O layer.  It no
longer corrupts memory or crashes when the encoding back-end reallocates
the buffer or gives it a typeglob or shared hash key scalar.

=item *

L<PerlIO::scalar> has been upgraded to 0.16.

The buffer scalar supplied may now only contain code points 0xFF or
lower. [perl #109828]

=item *

L<Perl::OSType> has been upgraded to 1.003.

This fixes a bug detecting the VOS operating system.

=item *

L<Pod::Html> has been upgraded to 1.18.

The option C<--libpods> has been reinstated. It is deprecated, and its use
does nothing other than issue a warning that it is no longer supported.

Since the HTML files generated by pod2html claim to have a UTF-8 charset,
actually write the files out using UTF-8 [perl #111446].

=item *

L<Pod::Simple> has been upgraded to 3.28.

Numerous improvements have been made, mostly to Pod::Simple::XHTML,
which also has a compatibility change: the C<codes_in_verbatim> option
is now disabled by default.  See F<cpan/Pod-Simple/ChangeLog> for the
full details.

=item *

L<re> has been upgraded to 0.23

Single character [class]es like C</[s]/> or C</[s]/i> are now optimized
as if they did not have the brackets, i.e. C</s/> or C</s/i>.

See note about C<op_comp> in the L</Internal Changes> section below.

=item *

L<Safe> has been upgraded to 2.35.

Fix interactions with C<Devel::Cover>.

Don't eval code under C<no strict>.

=item *

L<Scalar::Util> has been upgraded to version 1.27.

Fix an overloading issue with C<sum>.

C<first> and C<reduce> now check the callback first (so C<&first(1)> is
disallowed).

Fix C<tainted> on magical values [rt.cpan.org #55763].

Fix C<sum> on previously magical values [rt.cpan.org #61118].

Fix reading past the end of a fixed buffer [rt.cpan.org #72700].

=item *

L<Search::Dict> has been upgraded to 1.07.

No longer require C<stat> on filehandles.

Use C<fc> for casefolding.

=item *

L<Socket> has been upgraded to 2.009.

Constants and functions required for IP multicast source group membership
have been added.

C<unpack_sockaddr_in()> and C<unpack_sockaddr_in6()> now return just the IP
address in scalar context, and C<inet_ntop()> now guards against incorrect
length scalars being passed in.

This fixes an uninitialized memory read.

=item *

L<Storable> has been upgraded to 2.41.

Modifying C<$_[0]> within C<STORABLE_freeze> no longer results in crashes
[perl #112358].

An object whose class implements C<STORABLE_attach> is now thawed only once
when there are multiple references to it in the structure being thawed
[perl #111918].

Restricted hashes were not always thawed correctly [perl #73972].

Storable would croak when freezing a blessed REF object with a
C<STORABLE_freeze()> method [perl #113880].

It can now freeze and thaw vstrings correctly.  This causes a slight
incompatible change in the storage format, so the format version has
increased to 2.9.

This contains various bugfixes, including compatibility fixes for older
versions of Perl and vstring handling.

=item *

L<Sys::Syslog> has been upgraded to 0.32.

This contains several bug fixes relating to C<getservbyname()>,
C<setlogsock()>and log levels in C<syslog()>, together with fixes for
Windows, Haiku-OS and GNU/kFreeBSD.  See F<cpan/Sys-Syslog/Changes>
for the full details.

=item *

L<Term::ANSIColor> has been upgraded to 4.02.

Add support for italics.

Improve error handling.

=item *

L<Term::ReadLine> has been upgraded to 1.10.  This fixes the
use of the B<cpan> and B<cpanp> shells on Windows in the event that the current
drive happens to contain a F<\dev\tty> file.

=item *

L<Test::Harness> has been upgraded to 3.26.

Fix glob semantics on Win32 [rt.cpan.org #49732].

Don't use C<Win32::GetShortPathName> when calling perl [rt.cpan.org #47890].

Ignore -T when reading shebang [rt.cpan.org #64404].

Handle the case where we don't know the wait status of the test more
gracefully.

Make the test summary 'ok' line overridable so that it can be changed to a
plugin to make the output of prove idempotent.

Don't run world-writable files.

=item *

L<Text::Tabs> and L<Text::Wrap> have been upgraded to
2012.0818.  Support for Unicode combining characters has been added to them
both.

=item *

L<threads::shared> has been upgraded to 1.31.

This adds the option to warn about or ignore attempts to clone structures
that can't be cloned, as opposed to just unconditionally dying in
that case.

This adds support for dual-valued values as created by
L<Scalar::Util::dualvar|Scalar::Util/"dualvar NUM, STRING">.

=item *

L<Tie::StdHandle> has been upgraded to 4.3.

C<READ> now respects the offset argument to C<read> [perl #112826].

=item *

L<Time::Local> has been upgraded to 1.2300.

Seconds values greater than 59 but less than 60 no longer cause
C<timegm()> and C<timelocal()> to croak.

=item *

L<Unicode::UCD> has been upgraded to 0.53.

This adds a function L<all_casefolds()|Unicode::UCD/all_casefolds()>
that returns all the casefolds.

=item *

L<Win32> has been upgraded to 0.47.

New APIs have been added for getting and setting the current code page.

=back


=head2 Removed Modules and Pragmata

=over

=item *

L<Version::Requirements> has been removed from the core distribution.  It is
available under a different name: L<CPAN::Meta::Requirements>.

=back

=head1 Documentation

=head2 Changes to Existing Documentation

=head3 L<perlcheat>

=over 4

=item *

L<perlcheat> has been reorganized, and a few new sections were added.

=back

=head3 L<perldata>

=over 4

=item *

Now explicitly documents the behaviour of hash initializer lists that
contain duplicate keys.

=back

=head3 L<perldiag>

=over 4

=item *

The explanation of symbolic references being prevented by "strict refs"
now doesn't assume that the reader knows what symbolic references are.

=back

=head3 L<perlfaq>

=over 4

=item *

L<perlfaq> has been synchronized with version 5.0150040 from CPAN.

=back

=head3 L<perlfunc>

=over 4

=item *

The return value of C<pipe> is now documented.

=item *

Clarified documentation of C<our>.

=back

=head3 L<perlop>

=over 4

=item *

Loop control verbs (C<dump>, C<goto>, C<next>, C<last> and C<redo>) have always
had the same precedence as assignment operators, but this was not documented
until now.

=back

=head3 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

L<Unterminated delimiter for here document|perldiag/"Unterminated delimiter for here document">

This message now occurs when a here document label has an initial quotation
mark but the final quotation mark is missing.

This replaces a bogus and misleading error message about not finding the label
itself [perl #114104].

=item *

L<panic: child pseudo-process was never scheduled|perldiag/"panic: child pseudo-process was never scheduled">

This error is thrown when a child pseudo-process in the ithreads implementation
on Windows was not scheduled within the time period allowed and therefore was
not able to initialize properly [perl #88840].

=item *

L<Group name must start with a non-digit word character in regex; marked by <-- HERE in mE<sol>%sE<sol>|perldiag/"Group name must start with a non-digit word character in regex; marked by <-- HERE in m/%s/">

This error has been added for C<(?&0)>, which is invalid.  It used to
produce an incomprehensible error message [perl #101666].

=item *

L<Can't use an undefined value as a subroutine reference|perldiag/"Can't use an undefined value as %s reference">

Calling an undefined value as a subroutine now produces this error message.
It used to, but was accidentally disabled, first in Perl 5.004 for
non-magical variables, and then in Perl v5.14 for magical (e.g., tied)
variables.  It has now been restored.  In the mean time, undef was treated
as an empty string [perl #113576].

=item *

L<Experimental "%s" subs not enabled|perldiag/"Experimental "%s" subs not enabled">

To use lexical subs, you must first enable them:

    no warnings 'experimental::lexical_subs';
    use feature 'lexical_subs';
    my sub foo { ... }

=back

=head3 New Warnings

=over 4

=item *

L<'Strings with code points over 0xFF may not be mapped into in-memory file handles'|perldiag/"Strings with code points over 0xFF may not be mapped into in-memory file handles">

=item *

L<'%s' resolved to '\o{%s}%d'|perldiag/"'%s' resolved to '\o{%s}%d'">

=item *

L<'Trailing white-space in a charnames alias definition is deprecated'|perldiag/"Trailing white-space in a charnames alias definition is deprecated">

=item *

L<'A sequence of multiple spaces in a charnames alias definition is deprecated'|perldiag/"A sequence of multiple spaces in a charnames alias definition is deprecated">

=item *

L<'Passing malformed UTF-8 to "%s" is deprecated'|perldiag/"Passing malformed UTF-8 to "%s" is deprecated">

=item *

L<Subroutine "&%s" is not available|perldiag/"Subroutine "&%s" is not available">

(W closure) During compilation, an inner named subroutine or eval is
attempting to capture an outer lexical subroutine that is not currently
available.  This can happen for one of two reasons.  First, the lexical
subroutine may be declared in an outer anonymous subroutine that has not
yet been created.  (Remember that named subs are created at compile time,
while anonymous subs are created at run-time.)  For example,

    sub { my sub a {...} sub f { \&a } }

At the time that f is created, it can't capture the current the "a" sub,
since the anonymous subroutine hasn't been created yet.  Conversely, the
following won't give a warning since the anonymous subroutine has by now
been created and is live:

    sub { my sub a {...} eval 'sub f { \&a }' }->();

The second situation is caused by an eval accessing a variable that has
gone out of scope, for example,

    sub f {
        my sub a {...}
        sub { eval '\&a' }
    }
    f()->();

Here, when the '\&a' in the eval is being compiled, f() is not currently
being executed, so its &a is not available for capture.

=item *

L<"%s" subroutine &%s masks earlier declaration in same %s|perldiag/"%s" subroutine &%s masks earlier declaration in same %s>

(W misc) A "my" or "state" subroutine has been redeclared in the
current scope or statement, effectively eliminating all access to
the previous instance.  This is almost always a typographical error.
Note that the earlier subroutine will still exist until the end of
the scope or until all closure references to it are destroyed.

=item *

L<The %s feature is experimental|perldiag/"The %s feature is experimental">

(S experimental) This warning is emitted if you enable an experimental
feature via C<use feature>.  Simply suppress the warning if you want
to use the feature, but know that in doing so you are taking the risk
of using an experimental feature which may change or be removed in a
future Perl version:

    no warnings "experimental::lexical_subs";
    use feature "lexical_subs";

=item *

L<sleep(%u) too large|perldiag/"sleep(%u) too large">

(W overflow) You called C<sleep> with a number that was larger than it can
reliably handle and C<sleep> probably slept for less time than requested.

=item *

L<Wide character in setenv|perldiag/"Wide character in %s">

Attempts to put wide characters into environment variables via C<%ENV> now
provoke this warning.

=item *

"L<Invalid negative number (%s) in chr|perldiag/"Invalid negative number (%s) in chr">"

C<chr()> now warns when passed a negative value [perl #83048].

=item *

"L<Integer overflow in srand|perldiag/"Integer overflow in srand">"

C<srand()> now warns when passed a value that doesn't fit in a C<UV> (since the
value will be truncated rather than overflowing) [perl #40605].

=item *

"L<-i used with no filenames on the command line, reading from STDIN|perldiag/"-i used with no filenames on the command line, reading from STDIN">"

Running perl with the C<-i> flag now warns if no input files are provided on
the command line [perl #113410].

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

L<$* is no longer supported|perldiag/"$* is no longer supported">

The warning that use of C<$*> and C<$#> is no longer supported is now
generated for every location that references them.  Previously it would fail
to be generated if another variable using the same typeglob was seen first
(e.g. C<@*> before C<$*>), and would not be generated for the second and
subsequent uses.  (It's hard to fix the failure to generate warnings at all
without also generating them every time, and warning every time is
consistent with the warnings that C<$[> used to generate.)

=item *

The warnings for C<\b{> and C<\B{> were added.  They are a deprecation
warning which should be turned off by that category.  One should not
have to turn off regular regexp warnings as well to get rid of these.

=item *

L<Constant(%s): Call to &{$^H{%s}} did not return a defined value|perldiag/Constant(%s): Call to &{$^H{%s}} did not return a defined value>

Constant overloading that returns C<undef> results in this error message.
For numeric constants, it used to say "Constant(undef)".  "undef" has been
replaced with the number itself.

=item *

The error produced when a module cannot be loaded now includes a hint that
the module may need to be installed: "Can't locate hopping.pm in @INC (you
may need to install the hopping module) (@INC contains: ...)"

=item *

L<vector argument not supported with alpha versions|perldiag/vector argument not supported with alpha versions>

This warning was not suppressible, even with C<no warnings>.  Now it is
suppressible, and has been moved from the "internal" category to the
"printf" category.

=item *

C<< Can't do {n,m} with n > m in regex; marked by <-- HERE in m/%s/ >>

This fatal error has been turned into a warning that reads:

L<< Quantifier {n,m} with n > m can't match in regex | perldiag/Quantifier {n,m} with n > m can't match in regex >>

(W regexp) Minima should be less than or equal to maxima.  If you really want
your regexp to match something 0 times, just put {0}.

=item *

The "Runaway prototype" warning that occurs in bizarre cases has been
removed as being unhelpful and inconsistent.

=item *

The "Not a format reference" error has been removed, as the only case in
which it could be triggered was a bug.

=item *

The "Unable to create sub named %s" error has been removed for the same
reason.

=item *

The 'Can't use "my %s" in sort comparison' error has been downgraded to a
warning, '"my %s" used in sort comparison' (with 'state' instead of 'my'
for state variables).  In addition, the heuristics for guessing whether
lexical $a or $b has been misused have been improved to generate fewer
false positives.  Lexical $a and $b are no longer disallowed if they are
outside the sort block.  Also, a named unary or list operator inside the
sort block no longer causes the $a or $b to be ignored [perl #86136].

=back

=head1 Utility Changes

=head3 L<h2xs>

=over 4

=item *

F<h2xs> no longer produces invalid code for empty defines.  [perl #20636]

=back

=head1 Configuration and Compilation

=over 4

=item *

Added C<useversionedarchname> option to Configure

When set, it includes 'api_versionstring' in 'archname'. E.g.
x86_64-linux-5.13.6-thread-multi.  It is unset by default.

This feature was requested by Tim Bunce, who observed that
C<INSTALL_BASE> creates a library structure that does not
differentiate by perl version.  Instead, it places architecture
specific files in "$install_base/lib/perl5/$archname".  This makes
it difficult to use a common C<INSTALL_BASE> library path with
multiple versions of perl.

By setting C<-Duseversionedarchname>, the $archname will be
distinct for architecture I<and> API version, allowing mixed use of
C<INSTALL_BASE>.

=item *

Add a C<PERL_NO_INLINE_FUNCTIONS> option

If C<PERL_NO_INLINE_FUNCTIONS> is defined, don't include "inline.h"

This permits test code to include the perl headers for definitions without
creating a link dependency on the perl library (which may not exist yet).

=item *

Configure will honour the external C<MAILDOMAIN> environment variable, if set.

=item *

C<installman> no longer ignores the silent option

=item *

Both C<META.yml> and C<META.json> files are now included in the distribution.

=item *

F<Configure> will now correctly detect C<isblank()> when compiling with a C++
compiler.

=item *

The pager detection in F<Configure> has been improved to allow responses which
specify options after the program name, e.g. B</usr/bin/less -R>, if the user
accepts the default value.  This helps B<perldoc> when handling ANSI escapes
[perl #72156].

=back

=head1 Testing

=over 4

=item *

The test suite now has a section for tests that require very large amounts
of memory.  These tests won't run by default; they can be enabled by
setting the C<PERL_TEST_MEMORY> environment variable to the number of
gibibytes of memory that may be safely used.

=back

=head1 Platform Support

=head2 Discontinued Platforms

=over 4

=item BeOS

BeOS was an operating system for personal computers developed by Be Inc,
initially for their BeBox hardware. The OS Haiku was written as an open
source replacement for/continuation of BeOS, and its perl port is current and
actively maintained.

=item UTS Global

Support code relating to UTS global has been removed.  UTS was a mainframe
version of System V created by Amdahl, subsequently sold to UTS Global.  The
port has not been touched since before Perl v5.8.0, and UTS Global is now
defunct.

=item VM/ESA

Support for VM/ESA has been removed. The port was tested on 2.3.0, which
IBM ended service on in March 2002. 2.4.0 ended service in June 2003, and
was superseded by Z/VM. The current version of Z/VM is V6.2.0, and scheduled
for end of service on 2015/04/30.

=item MPE/IX

Support for MPE/IX has been removed.

=item EPOC

Support code relating to EPOC has been removed.  EPOC was a family of
operating systems developed by Psion for mobile devices.  It was the
predecessor of Symbian.  The port was last updated in April 2002.

=item Rhapsody

Support for Rhapsody has been removed.

=back

=head2 Platform-Specific Notes

=head3 AIX

Configure now always adds C<-qlanglvl=extc99> to the CC flags on AIX when
using xlC.  This will make it easier to compile a number of XS-based modules
that assume C99 [perl #113778].

=head3 clang++

There is now a workaround for a compiler bug that prevented compiling
with clang++ since Perl v5.15.7 [perl #112786].

=head3 C++

When compiling the Perl core as C++ (which is only semi-supported), the
mathom functions are now compiled as C<extern "C">, to ensure proper
binary compatibility.  (However, binary compatibility isn't generally
guaranteed anyway in the situations where this would matter.)

=head3 Darwin

Stop hardcoding an alignment on 8 byte boundaries to fix builds using
-Dusemorebits.

=head3 Haiku

Perl should now work out of the box on Haiku R1 Alpha 4.

=head3 MidnightBSD

C<libc_r> was removed from recent versions of MidnightBSD and older versions
work better with C<pthread>. Threading is now enabled using C<pthread> which
corrects build errors with threading enabled on 0.4-CURRENT.

=head3 Solaris

In Configure, avoid running sed commands with flags not supported on Solaris.

=head3 VMS

=over

=item *

Where possible, the case of filenames and command-line arguments is now
preserved by enabling the CRTL features C<DECC$EFS_CASE_PRESERVE> and
C<DECC$ARGV_PARSE_STYLE> at start-up time.  The latter only takes effect
when extended parse is enabled in the process from which Perl is run.

=item *

The character set for Extended Filename Syntax (EFS) is now enabled by default
on VMS.  Among other things, this provides better handling of dots in directory
names, multiple dots in filenames, and spaces in filenames.  To obtain the old
behavior, set the logical name C<DECC$EFS_CHARSET> to C<DISABLE>.

=item *

Fixed linking on builds configured with C<-Dusemymalloc=y>.

=item *

Experimental support for building Perl with the HP C++ compiler is available
by configuring with C<-Dusecxx>.

=item *

All C header files from the top-level directory of the distribution are now
installed on VMS, providing consistency with a long-standing practice on other
platforms. Previously only a subset were installed, which broke non-core
extension builds for extensions that depended on the missing include files.

=item *

Quotes are now removed from the command verb (but not the parameters) for
commands spawned via C<system>, backticks, or a piped C<open>.  Previously,
quotes on the verb were passed through to DCL, which would fail to recognize
the command.  Also, if the verb is actually a path to an image or command
procedure on an ODS-5 volume, quoting it now allows the path to contain spaces.

=item *

The B<a2p> build has been fixed for the HP C++ compiler on OpenVMS.

=back

=head3 Win32

=over

=item *

Perl can now be built using Microsoft's Visual C++ 2012 compiler by specifying
CCTYPE=MSVC110 (or MSVC110FREE if you are using the free Express edition for
Windows Desktop) in F<win32/Makefile>.

=item *

The option to build without C<USE_SOCKETS_AS_HANDLES> has been removed.

=item *

Fixed a problem where perl could crash while cleaning up threads (including the
main thread) in threaded debugging builds on Win32 and possibly other platforms
[perl #114496].

=item *

A rare race condition that would lead to L<sleep|perlfunc/sleep> taking more
time than requested, and possibly even hanging, has been fixed [perl #33096].

=item *

C<link> on Win32 now attempts to set C<$!> to more appropriate values
based on the Win32 API error code. [perl #112272]

Perl no longer mangles the environment block, e.g. when launching a new
sub-process, when the environment contains non-ASCII characters. Known
problems still remain, however, when the environment contains characters
outside of the current ANSI codepage (e.g. see the item about Unicode in
C<%ENV> in L<http://perl5.git.perl.org/perl.git/blob/HEAD:/Porting/todo.pod>).
[perl #113536]

=item *

Building perl with some Windows compilers used to fail due to a problem
with miniperl's C<glob> operator (which uses the C<perlglob> program)
deleting the PATH environment variable [perl #113798].

=item *

A new makefile option, C<USE_64_BIT_INT>, has been added to the Windows
makefiles.  Set this to "define" when building a 32-bit perl if you want
it to use 64-bit integers.

Machine code size reductions, already made to the DLLs of XS modules in
Perl v5.17.2, have now been extended to the perl DLL itself.

Building with VC++ 6.0 was inadvertently broken in Perl v5.17.2 but has
now been fixed again.

=back

=head3 WinCE

Building on WinCE is now possible once again, although more work is required
to fully restore a clean build.

=head1 Internal Changes

=over

=item *

Synonyms for the misleadingly named C<av_len()> have been created:
C<av_top_index()> and C<av_tindex>.  All three of these return the
number of the highest index in the array, not the number of elements it
contains.

