Details of the various stacks within the perl interpreter are now explained
here.

=item *

Advice has been added regarding the usage of C<< ZE<lt>E<gt> >>.

=back

=head3 L<perlport>

=over 4

=item *

Update C<timegm> example to use the correct year format I<1970> instead of I<70>.
[L<GH #16431|https://github.com/Perl/perl5/issues/16431>]

=back

=head3 L<perlreref>

=over 4

=item *

Fix some typos.

=back

=head3 L<perlvar>

=over 4

=item *

Now recommends stringifying C<$]> and comparing it numerically.

=back

=head3 L<perlapi>, L<perlintern>

=over 4

=item *

Documentation has been added for several functions that were
lacking it before.

=back

=head3 L<perlxs>

=over 4

=item *

Suggest using C<libffi> for simple library bindings via CPAN modules
like L<FFI::Platypus> or L<FFI::Raw>.

=back

=head3 L<POSIX>

=over 4

=item *

C<setlocale> warning about threaded builds updated to note it does not
apply on Perl 5.28.X and later.

=item *

C<< Posix::SigSet->new(...) >> updated to state it throws an error if any of
the supplied signals cannot be added to the set.

=back

Additionally, the following selected changes have been made:

=head3 Updating of links

=over 4

=item *

Links to the now defunct L<https://search.cpan.org> site now point at
the equivalent L<https://metacpan.org> URL. [L<GH #17393|https://github.com/Perl/perl5/issues/17393>]

=item *

The man page for L<ExtUtils::XSSymSet> is now only installed on VMS,
which is the only platform the module is installed on. [L<GH #17424|https://github.com/Perl/perl5/issues/17424>]

=item *

URLs have been changed to C<https://> and stale links have been updated.

Where applicable, the URLs in the documentation have been moved from using the
C<http://> protocol to C<https://>. This also affects the location of the bug
tracker at L<https://rt.perl.org>.

=item *

Some links to OS/2 libraries, Address Sanitizer and other system tools had gone
stale. These have been updated with working links.

=item *

Some links to old email addresses on perl5-porters had gone stale. These have been
updated with working links.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages. For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

L<Expecting interpolated extended charclass in regex; marked by <-- HERE in mE<sol>%sE<sol>
|perldiag/"Expecting interpolated extended charclass in regex; marked by <-- HERE in mE<sol>%sE<sol>">

This is a replacement for several error messages listed under
L</Changes to Existing Diagnostics>.

=item *

C<L<No digits found for %s literal|perldiag/"No digits found for %s literal">>

(F) No hexadecimal digits were found following C<0x> or no binary digits were
found following C<0b>.

=back

=head3 New Warnings

=over 4

=item *

L<Code point 0x%X is not Unicode, and not portable|perldiag/"Code point 0x%X is not Unicode, and not portable">

This is actually not a new message, but it is now output when the
warnings category C<portable> is enabled.

When raised during regular expression pattern compilation, the warning
has extra text added at the end marking where precisely in the pattern
it occurred.

=item *

L<Non-hex character '%c' terminates \x early.  Resolved as "%s"|perldiag/"Non-hex character '%c' terminates \x early.  Resolved as "%s"">

This replaces a warning that was much less specific, and which gave
false information. This new warning parallels the similar
already-existing one raised for C<\o{}>.

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

L<Character following "\c" must be printable ASCII|perldiag/"Character following "\c" must be printable ASCII">

...now has extra text added at the end, when raised during regular
expression pattern compilation, marking where precisely in the pattern
it occurred.

=item *

L<Use "%s" instead of "%s"|perldiag/"Use "%s" instead of "%s"">

...now has extra text added at the end, when raised during regular
expression pattern compilation, marking where precisely in the pattern
it occurred.

=item *

L<Sequence "\c{" invalid|perldiag/"Sequence "\c{" invalid">

...now has extra text added at the end, when raised during regular
expression pattern compilation, marking where precisely in the pattern
it occurred.

=item *

L<"\c%c" is more clearly written simply as "%s"|perldiag/""\c%c" is more clearly written simply as "%s"">

...now has extra text added at the end, when raised during regular
expression pattern compilation, marking where precisely in the pattern
it occurred.

=item *

L<Non-octal character '%c' terminates \o early.  Resolved as "%s"|perldiag/"Non-octal character '%c' terminates \o early.  Resolved as "%s"">

...now includes the phrase "terminates \o early", and has extra text added
at the end, when raised during regular expression pattern compilation,
marking where precisely in the pattern it occurred. In some instances
the text of the resolution has been clarified.

=item *

L<'%s' resolved to '\o{%s}%d'|perldiag/'%s' resolved to '\o{%s}%d'>

As of Perl 5.32, this message is no longer generated. Instead,
L<perldiag/Non-octal character '%c' terminates \o early.  Resolved as "%s">
is used instead.

=item *

L<Use of code point 0x%s is not allowed; the permissible max is 0x%X|perldiag/"Use of code point 0x%s is not allowed; the permissible max is 0x%X">

Some instances of this message previously output the hex digits C<A>,
C<B>, C<C>, C<D>, C<E>, and C<F> in lower case. Now they are all
consistently upper case.

=item *

The following three diagnostics have been removed, and replaced by
L<C<Expecting interpolated extended charclass in regex; marked by <-- HERE in mE<sol>%sE<sol>>
|perldiag/"Expecting interpolated extended charclass in regex; marked by <-- HERE in mE<sol>%sE<sol>">:
C<Expecting close paren for nested extended charclass in regex; marked
by <-- HERE in mE<sol>%sE<sol>>,
C<Expecting close paren for wrapper for nested extended charclass in
regex; marked by <-- HERE in mE<sol>%sE<sol>>,
and
C<Expecting '(?flags:(?[...' in regex; marked by S<<-- HERE> in mE<sol>%sE<sol>>.

=item *

The C<Code point 0x%X is not Unicode, and not portable> warning removed
the line C<Code points above 0xFFFF_FFFF require larger than a 32 bit word.>
as code points that large are no longer legal on 32-bit platforms.

=item *

L<Can't use global %s in %s|perldiag/"Can't use global %s in %s">

This error message has been slightly reformatted from the original C<Can't use
global %s in "%s">, and in particular misleading error messages like C<Can't
use global $_ in "my"> are now rendered as C<Can't use global $_ in subroutine
signature>.

=item *

L<Constants from lexical variables potentially modified elsewhere are no longer permitted|perldiag/"Constants from lexical variables potentially modified elsewhere are no longer permitted">

This error message replaces the former C<Constants from lexical variables
potentially modified elsewhere are deprecated. This will not be allowed in Perl
5.32> to reflect the fact that this previously deprecated usage has now been
transformed into an exception. The message's classification has also been
updated from D (deprecated) to F (fatal).

See also L</Incompatible Changes>.

=item *

C<\N{} here is restricted to one character> is now emitted in the same
circumstances where previously C<\N{} in inverted character class or as a range
end-point is restricted to one character> was.

This is due to new circumstances having been added in Perl 5.30 that weren't
covered by the earlier wording.

=back

=head1 Utility Changes

=head2 L<perlbug>

=over 4

=item * The bug tracker homepage URL now points to GitHub.

=back

=head2 L<streamzip>

=over 4

=item *

This is a new utility, included as part of an
L<IO::Compress::Base> upgrade.

L<streamzip> creates a zip file from stdin. The program will read data
from stdin, compress it into a zip container and, by default, write a
streamed zip file to stdout.

=back

=head1 Configuration and Compilation

=head2 F<Configure>

=over 4

=item *

For clang++, add C<< #include <stdlib.h> >> to Configure's probes for
C<futimes>, C<strtoll>, C<strtoul>, C<strtoull>, C<strtouq>, otherwise the
probes would fail to compile.

=item *

Use a compile and run test for C<lchown> to satisfy clang++ which should
more reliably detect it.

=item *

For C++ compilers, add C<< #include <stdio.h> >> to Configure's probes for
C<getpgrp> and C<setpgrp> as they use printf and C++ compilers may fail
compilation instead of just warning.

=item *

Check if the compiler can handle inline attribute.

=item *

Check for character data alignment.

=item *

F<Configure> now correctly handles gcc-10. Previously it was interpreting it
as gcc-1 and turned on C<-fpcc-struct-return>.

=item *

Perl now no longer probes for C<d_u32align>, defaulting to C<define> on all
platforms. This check was error-prone when it was done, which was on 32-bit
platforms only.
L<[GH #16680]|https://github.com/Perl/perl5/issues/16680>

=item *

Documentation and hints for building perl on Z/OS (native EBCDIC) have been
updated. This is still a work in progress.

=item *

A new probe for C<malloc_usable_size> has been added.

=item *

Improvements in F<Configure> to detection in C++ and clang++. Work ongoing by
Andy Dougherty. L<[GH #17033]|https://github.com/Perl/perl5/issues/17033>

=item *

F<autodoc.pl>

This tool that regenerates L<perlintern> and L<perlapi> has been overhauled
significantly, restoring consistency in flags used in F<embed.fnc> and
L<Devel::PPPort> and allowing removal of many redundant C<=for apidoc>
entries in code.

=item *

The C<ECHO> macro is now defined. This is used in a C<dtrace> rule that was
originally changed for FreeBSD, and the FreeBSD make apparently predefines it.
The Solaris make does not predefine C<ECHO> which broke this rule on Solaris.
L<[GH #17057]|https://github.com/Perl/perl5/issues/17057>

=item *

Bison versions 3.1 through 3.4 are now supported.

=back

=head1 Testing

Tests were added and changed to reflect the other additions and
changes in this release. Furthermore, these significant changes were
made:

=over 4

=item *

F<t/run/switches.t> no longer uses (and re-uses) the F<tmpinplace/>
directory under F<t/>. This may prevent spurious failures. [L<GH #17424|https://github.com/Perl/perl5/issues/17424>]

=item *

Various bugs in C<POSIX::mbtowc> were fixed. Potential races with
other threads are now avoided, and previously the returned wide
character could well be garbage.

=item *

Various bugs in C<POSIX::wctomb> were fixed. Potential races with other
threads are now avoided, and previously it would segfault if the string
parameter was shared or hadn't been pre-allocated with a string of
sufficient length to hold the result.

=item *

Certain test output of scalars containing control characters and Unicode
has been fixed on EBCDIC.

=item *

F<t/charset_tools.pl>: Avoid some work on ASCII platforms.

=item *

F<t/re/regexp.t>: Speed up many regex tests on ASCII platform

=item *

F<t/re/pat.t>: Skip tests that don't work on EBCDIC.

=back

=head1 Platform Support

=head2 Discontinued Platforms

=over 4

=item Windows CE

Support for building perl on Windows CE has now been removed.

=back

=head2 Platform-Specific Notes

=over 4

=item Linux

C<cc> will be used to populate C<plibpth> if C<cc> is C<clang>.
L<[GH #17043]|https://github.com/Perl/perl5/issues/17043>

=item NetBSD 8.0

Fix compilation of Perl on NetBSD 8.0 with g++.
[L<GH #17381|https://github.com/Perl/perl5/issues/17381>]

=item Windows

=over 4

=item *

The configuration for C<ccflags> and C<optimize> are now separate, as
with POSIX platforms. [L<GH #17156|https://github.com/Perl/perl5/issues/17156>]

=item *

Support for building perl with Visual C++ 6.0 has now been removed.

=item *

The locale tests could crash on Win32 due to a Windows bug, and
separately due to the CRT throwing an exception if the locale name
wasn't validly encoded in the current code page.

For the second we now decode the locale name ourselves, and always
decode it as UTF-8. L<[GH #16922]|https://github.com/Perl/perl5/issues/16922>

=item *

F<t/op/magic.t> could fail if environment variables starting with
C<FOO> already existed.

=item *

MYMALLOC (PERL_MALLOC) build has been fixed.

=back

=item Solaris

=over 4

=item *

C<Configure> will now find recent versions of the Oracle Developer Studio
compiler, which are found under C</opt/developerstudio*>.

=item *

C<Configure> now uses the detected types for C<gethostby*> functions, allowing
Perl to once again compile on certain configurations of Solaris.

=back

=item VMS

=over 4

=item *

With the release of the patch kit C99 V2.0, VSI has provided support for a
number of previously-missing C99 features. On systems with that patch kit
installed, Perl's configuration process will now detect the presence of the
header C<stdint.h> and the following functions: C<fpclassify>, C<isblank>, C<isless>,
C<llrint>, C<llrintl>, C<llround>, C<llroundl>, C<nearbyint>, C<round>, C<scalbn>,
and C<scalbnl>.

=item *

C<-Duse64bitint> is now the default on VMS.

=back

=item z/OS

Perl 5.32 has been tested on z/OS 2.4, with the following caveats:

=over 4

=item *

Only static builds (the default) build reliably

=item *

When using locales, z/OS does not handle the C<LC_MESSAGES> category
properly, so when compiling perl, you should add the following to your
F<Configure> options

 ./Configure <other options> -Accflags=-DNO_LOCALE_MESSAGES

=item *

z/OS does not support locales with threads, so when compiling a threaded
perl, you should add the following to your F<Configure> options

 ./Configure <other Configure options> -Accflags=-DNO_LOCALE

=item *

Some CPAN modules that are shipped with perl fail at least one of their
self-tests.  These are:
Archive::Tar,
Config::Perl::V,
CPAN::Meta,
CPAN::Meta::YAML,
Digest::MD5,
Digest::SHA,
Encode,
ExtUtils::MakeMaker,
ExtUtils::Manifest,
HTTP::Tiny,
IO::Compress,
IPC::Cmd,
JSON::PP,
libnet,
MIME::Base64,
Module::Metadata,
PerlIO::via-QuotedPrint,
Pod::Checker,
podlators,
Pod::Simple,
Socket,
and Test::Harness.

The causes of the failures range from the self-test itself is flawed,
and the module actually works fine, up to the module doesn't work at all
on EBCDIC platforms.

=back

=back

=head1 Internal Changes

=over 4

=item *

C<savepvn>'s len parameter is now a C<Size_t> instead of an C<I32> since we
can handle longer strings than 31 bits.

=item *

The lexer (C<Perl_yylex()> in F<toke.c>) was previously a single 4100-line
function, relying heavily on C<goto> and a lot of widely-scoped local variables
to do its work. It has now been pulled apart into a few dozen smaller static
functions; the largest remaining chunk (C<yyl_word_or_keyword()>) is a little
over 900 lines, and consists of a single C<switch> statement, all of whose
C<case> groups are independent. This should be much easier to understand and
maintain.

=item *

The OS-level signal handlers and type (Sighandler_t) used by the perl core
were declared as having three parameters, but the OS was always told to
call them with one argument. This has been fixed by declaring them to have
one parameter. See the merge commit C<v5.31.5-346-g116e19abbf> for full
details.

=item *

The code that handles C<tr///> has been extensively revised, fixing
various bugs, especially when the source and/or replacement strings
contain characters whose code points are above 255. Some of the bugs
were undocumented, one being that under some circumstances (but not all)
with C</s>, the squeezing was done based on the source, rather than the
replacement. A documented bug that got fixed was
L<[GH #14777]|https://github.com/Perl/perl5/issues/14777>.

=item *

A new macro for XS writers dealing with UTF-8-encoded Unicode strings
has been created L<perlapi/C<UTF8_CHK_SKIP>> that is safer in the face
of malformed UTF-8 input than L<perlapi/C<UTF8_SKIP>> (but not as safe
as L<perlapi/C<UTF8_SAFE_SKIP>>). It won't read past a NUL character.
It has been backported in L<Devel::PPPort> 3.55 and later.

=item *

Added the C<< PL_curstackinfo->si_cxsubix >> field. This records the stack index
of the most recently pushed sub/format/eval context. It is set and restored
automatically by C<cx_pushsub()>, C<cx_popsub()> etc., but would need to be
manually managed if you do any unusual manipulation of the context stack.

=item *

Various macros dealing with character type classification and changing case
where the input is encoded in UTF-8 now require an extra parameter to prevent
potential reads beyond the end of the buffer. Use of these has generated a
deprecation warning since Perl 5.26. Details are in
L<perldeprecation/In XS code, use of various macros dealing with UTF-8.>

=item *

A new parser function L<parse_subsignature()|perlapi/parse_subsignature>
allows a keyword plugin to parse a subroutine signature while C<use feature
'signatures'> is in effect. This allows custom keywords to implement
semantics similar to regular C<sub> declarations that include signatures.
L<[GH #16261]|https://github.com/Perl/perl5/issues/16261>

=item *

Since on some platforms we need to hold a mutex when temporarily
switching locales, new macros (C<STORE_LC_NUMERIC_SET_TO_NEEDED_IN>,
C<WITH_LC_NUMERIC_SET_TO_NEEDED> and C<WITH_LC_NUMERIC_SET_TO_NEEDED_IN>)
have been added to make it easier to do this safely and efficiently
as part of L<[GH #17034]|https://github.com/Perl/perl5/issues/17034>.

=item *

The memory bookkeeping overhead for allocating an OP structure has been
reduced by 8 bytes per OP on 64-bit systems.

=item *

L<eval_pv()|perlapi/eval_pv> no longer stringifies the exception when
C<[GH #17035]|https://github.com/Perl/perl5/issues/17035>]

=item *

The PERL_DESTRUCT_LEVEL environment variable was formerly only honoured on perl
binaries built with DEBUGGING support. It is now checked on all perl builds.
Its normal use is to force perl to individually free every block of memory
which it has allocated before exiting, which is useful when using automated
leak detection tools such as valgrind.

=item *

The API eval_sv() now accepts a C<G_RETHROW> flag. If this flag is set and an
exception is thrown while compiling or executing the supplied code, it will be
rethrown, and eval_sv() will not return.
L<[GH #17036]|https://github.com/Perl/perl5/issues/17036>

=item *

As part of the fix for
L<[GH #1537]|https://github.com/Perl/perl5/issues/1537> perl_parse()
now returns non-zero if exit(0) is called in a C<BEGIN>, C<UNITCHECK> or
C<CHECK> block.

=item *

Most functions which recursively walked an op tree during compilation have been
made non-recursive. This avoids SEGVs from stack overflow when the op tree is
deeply nested, such as C<$n == 1 ? "one" : $n == 2 ? "two" : ....> (especially
in code which is auto-generated).

This is particularly noticeable where the code is compiled within a separate
thread, as threads tend to have small stacks by default.

=back

=head1 Selected Bug Fixes

=over 4

=item *

Previously L<perlfunc/require> would only treat the special built-in
SV C<&PL_sv_undef> as a value in C<%INC> as if a previous C<require>
has failed, treating other undefined SVs as if the previous C<require>
has succeeded. This could cause unexpected success from C<require>
e.g., on C<local %INC = %INC;>. This has been fixed. [L<GH #17428|https://github.com/Perl/perl5/issues/17428>]

=item *

C<(?{...})> eval groups in regular expressions no longer unintentionally
trigger "EVAL without pos change exceeded limit in regex" [L<GH #17490|https://github.com/Perl/perl5/issues/17490>].

=item *

C<(?[...])> extended bracketed character classes do not wrongly raise an
error on some cases where a previously-compiled such class is
interpolated into another. The heuristics previously used have been
replaced by a reliable method, and hence the diagnostics generated have
changed. See L</Diagnostics>.

=item *

The debug display (say by specifying C<-Dr> or S<C<use re>> (with
appropriate options) of compiled Unicode property wildcard subpatterns no
longer has extraneous output.

=item *

Fix an assertion failure in the regular expression engine.
[L<GH #17372|https://github.com/Perl/perl5/issues/17372>]

=item *

Fix coredump in pp_hot.c after C<B::UNOP_AUX::aux_list()>.
[L<GH #17301|https://github.com/Perl/perl5/issues/17301>]

=item *

Loading IO is now threadsafe.
[L<GH #14816|https://github.com/Perl/perl5/issues/14816>]

=item *

C<\p{user-defined}> overrides official Unicode [L<GH #17025|https://github.com/Perl/perl5/issues/17025>]

Prior to this patch, the override was only sometimes in effect.

=item *

Properly handle filled C</il> regnodes and multi-char folds

=item *

Compilation error during make minitest [L<GH #17293|https://github.com/Perl/perl5/issues/17293>]

=item *

Move the implementation of C<%->, C<%+> into core.

=item *

Read beyond buffer in C<grok_inf_nan> [L<GH #17370|https://github.com/Perl/perl5/issues/17370>]

=item *

Workaround glibc bug with C<LC_MESSAGES> [L<GH #17081|https://github.com/Perl/perl5/issues/17081>]

=item *

C<printf()> or C<sprintf()> with the C<%n> format could cause a panic on
debugging builds, or report an incorrectly cached length value when
producing C<SVfUTF8> flagged strings. [L<GH #17221|https://github.com/Perl/perl5/issues/17221>]

=item *

The tokenizer has been extensively refactored.
[L<GH #17241|https://github.com/Perl/perl5/issues/17241>]
[L<GH #17189|https://github.com/Perl/perl5/issues/17189>]

=item *

C<use strict "subs"> is now enforced for bareword constants optimized
into a C<multiconcat> operator. [L<GH #17254|https://github.com/Perl/perl5/issues/17254>]

=item *

A memory leak in regular expression patterns has been fixed. [L<GH #17218|https://github.com/Perl/perl5/issues/17218>]

=item *

Perl no longer treats strings starting with "0x" or "0b" as hex or
binary numbers respectively when converting a string to a number.
This reverts a change in behaviour inadvertently introduced in perl
5.30.0 intended to improve precision when converting a string to a
floating point number. L<[GH #17062]|https://github.com/Perl/perl5/issues/17062>

=item *

Matching a non-C<SVf_UTF8> string against a regular expression
containing unicode literals could leak a SV on each match attempt.
L<[GH #17140]|https://github.com/Perl/perl5/issues/17140>

=item *

Overloads for octal and binary floating point literals were always
passed a string with a C<0x> prefix instead of the appropriate C<0> or
C<[GH #14791]|https://github.com/Perl/perl5/issues/14791>]

=item *

C<< $@ = 100; die; >> now correctly propagates the 100 as an exception
instead of ignoring it. L<[GH #17098]|https://github.com/Perl/perl5/issues/17098>

=item *

C<[GH #17108]|https://github.com/Perl/perl5/issues/17108>]

=item *

Exceptions thrown while C<$@> is read-only could result in infinite
recursion as perl tried to update C<$@>, which throws another
exception, resulting in a stack overflow. Perl now replaces C<$@>
with a copy if it's not a simple writable SV. L<[GH #17083]|https://github.com/Perl/perl5/issues/17083>

=item *

Setting C<$)> now properly sets supplementary group ids if you have
the necessary privileges. L<[GH #17031]|https://github.com/Perl/perl5/issues/17031>

=item *

close() on a pipe now preemptively clears the PerlIO object from the
IO SV. This prevents a second attempt to close the already closed
PerlIO object if a signal handler calls die() or exit() while close()
is waiting for the child process to complete. L<[GH #13929]|https://github.com/Perl/perl5/issues/13929>

=item *

C<< sprintf("%.*a", -10000, $x) >> would cause a buffer overflow due
to mishandling of the negative precision value. L<[GH #16942]|https://github.com/Perl/perl5/issues/16942>

=item *

scalar() on a reference could cause an erroneous assertion failure
during compilation. L<[GH #16969]|https://github.com/Perl/perl5/issues/16969>

=item *

C<%{^CAPTURE_ALL}> is now an alias to C<%-> as documented, rather than
incorrectly an alias for C<[GH #16105]|https://github.com/Perl/perl5/issues/16105>]

=item *

C<%{^CAPTURE}> didn't work if C<@{^CAPTURE}> was mentioned first.
Similarly for C<%{^CAPTURE_ALL}> and C<@{^CAPTURE_ALL}>, though
C<[GH #17045]|https://github.com/Perl/perl5/issues/17045>]

=item *

Extraordinarily large (over 2GB) floating point format widths could
cause an integer overflow in the underlying call to snprintf(),
resulting in an assertion. Formatted floating point widths are now
limited to the range of int, the return value of snprintf(). 
[L<#16881|https://github.com/Perl/perl5/issues/16881>]

=item *

Parsing the following constructs within a sub-parse (such as with
C<"${code here}"> or C<s/.../code here/e>) has changed to match how
they're parsed normally:

=over

=item *

C<print $fh ...> no longer produces a syntax error.

=item *

Code like C<s/.../ ${time} /e> now properly produces an "Ambiguous use
of ${time} resolved to $time at ..." warning when warnings are enabled.

=item *

C<@x {"a"}> (with the space) in a sub-parse now properly produces a
"better written as" warning when warnings are enabled.

=item *

Attributes can now be used in a sub-parse.
L<[GH #16847]|https://github.com/Perl/perl5/issues/16847>

=back

=item *

Incomplete hex and binary literals like C<0x> and C<0b> are now
treated as if the C<x> or C<b> is part of the next token. 
[L<#17010|https://github.com/Perl/perl5/issues/17010>]

=item *

A spurious C<)> in a subparse, such as in C<s/.../code here/e> or
C<"...${code here}">, no longer confuses the parser.

Previously a subparse was bracketed with generated C<(> and C<)>
tokens, so a spurious C<)> would close the construct without doing the
normal subparse clean up, confusing the parser and possible causing an
assertion failure.

Such constructs are now surrounded by artificial tokens that can't be
included in the source. L<[GH #15814]|https://github.com/Perl/perl5/issues/15814>

=item *

Reference assignment of a sub, such as C<\&foo = \&bar;>, silently did
nothing in the C<[GH #16987]|https://github.com/Perl/perl5/issues/16987>]

=item *

sv_gets() now recovers better if the target SV is modified by a signal
handler. L<[GH #16960]|https://github.com/Perl/perl5/issues/16960>

=item *

C<readline @foo> now evaluates C<@foo> in scalar context. Previously
it would be evaluated in list context, and since readline() pops only
one argument from the stack, the stack could underflow, or be left
with unexpected values on the stack. L<[GH #16929]|https://github.com/Perl/perl5/issues/16929>

=item *

Parsing incomplete hex or binary literals was changed in 5.31.1 to treat such a
literal as just the 0, leaving the following C<x> or C<b> to be parsed as part
of the next token. This could lead to some silent changes in behaviour, so now
incomplete hex or binary literals produce a fatal error.
L<[GH #17010]|https://github.com/Perl/perl5/issues/17010>

=item *

eval_pv()'s I<croak_on_error> flag will now throw even if the exception is a
false overloaded value.
L<[GH #17036]|https://github.com/Perl/perl5/issues/17036>

=item *

C<INIT> blocks and the program itself are no longer run if exit(0) is called
within a C<BEGIN>, C<UNITCHECK> or C<CHECK> block.
L<[GH #1537]|https://github.com/Perl/perl5/issues/1537>

=item *

C<< open my $fh, ">>+", undef >> now opens the temporary file in append mode:
writes will seek to the end of file before writing.
L<[GH #17058]|https://github.com/Perl/perl5/issues/17058>

=item *

Fixed a SEGV when searching for the source of an uninitialized value warning on
an op whose subtree includes an OP_MULTIDEREF.
L<[GH #17088]|https://github.com/Perl/perl5/issues/17088>

=back

=head1 Obituary

Jeff Goff (JGOFF or DrForr), an integral part of the Perl and Raku
communities and a dear friend to all of us, has passed away on March
13th, 2020. DrForr was a prominent member of the communities, attending
and speaking at countless events, contributing to numerous projects,
and assisting and helping in any way he could.

His passing leaves a hole in our hearts and in our communities and he
will be sorely missed.

=head1 Acknowledgements

Perl 5.32.0 represents approximately 13 months of development since Perl
5.30.0 and contains approximately 220,000 lines of changes across 1,800
files from 89 authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 140,000 lines of changes to 880 .pm, .t, .c and .h files.

Perl continues to flourish into its fourth decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.32.0:

Aaron Crane, Alberto Simões, Alexandr Savca, Andreas König, Andrew Fresh,
Andy Dougherty, Ask Bjørn Hansen, Atsushi Sugawara, Bernhard M. Wiedemann,
brian d foy, Bryan Stenson, Chad Granum, Chase Whitener, Chris 'BinGOs'
Williams, Craig A. Berry, Dagfinn Ilmari Mannsåker, Dan Book, Daniel
Dragan, Dan Kogai, Dave Cross, Dave Rolsky, David Cantrell, David Mitchell,
