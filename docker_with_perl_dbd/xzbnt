    if opts is None:
        opts = {}
    # redirect all to stderr unless buffer api is in use
    if not ui._buffers:
        ui = ui.copy()
        uifout = safeattrsetter(ui, b'fout', ignoremissing=True)
        if uifout:
            # for "historical portability":
            # ui.fout/ferr have been available since 1.9 (or 4e1ccd4c2b6d)
            uifout.set(ui.ferr)

    # get a formatter
    uiformatter = getattr(ui, 'formatter', None)
    if uiformatter:
        fm = uiformatter(b'perf', opts)
    else:
        # for "historical portability":
        # define formatter locally, because ui.formatter has been
        # available since 2.2 (or ae5f92e154d3)
        from mercurial import node

        class defaultformatter:
            """Minimized composition of baseformatter and plainformatter"""

            def __init__(self, ui, topic, opts):
                self._ui = ui
                if ui.debugflag:
                    self.hexfunc = node.hex
                else:
                    self.hexfunc = node.short

            def __nonzero__(self):
                return False

            __bool__ = __nonzero__

            def startitem(self):
                pass

            def data(self, **data):
                pass

            def write(self, fields, deftext, *fielddata, **opts):
                self._ui.write(deftext % fielddata, **opts)

            def condwrite(self, cond, fields, deftext, *fielddata, **opts):
                if cond:
                    self._ui.write(deftext % fielddata, **opts)

            def plain(self, text, **opts):
                self._ui.write(text, **opts)

            def end(self):
                pass

        fm = defaultformatter(ui, b'perf', opts)

    # stub function, runs code only once instead of in a loop
    # experimental config: perf.stub
    if ui.configbool(b"perf", b"stub", False):
        return functools.partial(stub_timer, fm), fm

    # experimental config: perf.all-timing
    displayall = ui.configbool(b"perf", b"all-timing", False)

    # experimental config: perf.run-limits
    limitspec = ui.configlist(b"perf", b"run-limits", [])
    limits = []
    for item in limitspec:
        parts = item.split(b'-', 1)
        if len(parts) < 2:
            ui.warn((b'malformatted run limit entry, missing "-": %s\n' % item))
            continue
        try:
            time_limit = float(_sysstr(parts[0]))
        except ValueError as e:
            ui.warn(
                (
                    b'malformatted run limit entry, %s: %s\n'
                    % (_bytestr(e), item)
                )
            )
            continue
        try:
            run_limit = int(_sysstr(parts[1]))
        except ValueError as e:
            ui.warn(
                (
                    b'malformatted run limit entry, %s: %s\n'
                    % (_bytestr(e), item)
                )
            )
            continue
        limits.append((time_limit, run_limit))
    if not limits:
        limits = DEFAULTLIMITS

    profiler = None
    if profiling is not None:
        if ui.configbool(b"perf", b"profile-benchmark", False):
            profiler = profiling.profile(ui)

    prerun = getint(ui, b"perf", b"pre-run", 0)
    t = functools.partial(
        _timer,
        fm,
        displayall=displayall,
        limits=limits,
        prerun=prerun,
        profiler=profiler,
    )
    return t, fm


def stub_timer(fm, func, setup=None, title=None):
    if setup is not None:
        setup()
    func()


@contextlib.contextmanager
def timeone():
    r = []
    ostart = os.times()
    cstart = util.timer()
    yield r
    cstop = util.timer()
    ostop = os.times()
    a, b = ostart, ostop
    r.append((cstop - cstart, b[0] - a[0], b[1] - a[1]))


# list of stop condition (elapsed time, minimal run count)
DEFAULTLIMITS = (
    (3.0, 100),
    (10.0, 3),
)


def _timer(
    fm,
    func,
    setup=None,
    title=None,
    displayall=False,
    limits=DEFAULTLIMITS,
    prerun=0,
    profiler=None,
):
    gc.collect()
    results = []
    begin = util.timer()
    count = 0
    if profiler is None:
        profiler = NOOPCTX
    for i in range(prerun):
        if setup is not None:
            setup()
        func()
    keepgoing = True
    while keepgoing:
        if setup is not None:
            setup()
        with profiler:
            with timeone() as item:
                r = func()
        profiler = NOOPCTX
        count += 1
        results.append(item[0])
        cstop = util.timer()
        # Look for a stop condition.
        elapsed = cstop - begin
        for t, mincount in limits:
            if elapsed >= t and count >= mincount:
                keepgoing = False
                break

    formatone(fm, results, title=title, result=r, displayall=displayall)


def formatone(fm, timings, title=None, result=None, displayall=False):

    count = len(timings)

    fm.startitem()

    if title:
        fm.write(b'title', b'! %s\n', title)
    if result:
        fm.write(b'result', b'! result: %s\n', result)

    def display(role, entry):
        prefix = b''
        if role != b'best':
            prefix = b'%s.' % role
        fm.plain(b'!')
        fm.write(prefix + b'wall', b' wall %f', entry[0])
        fm.write(prefix + b'comb', b' comb %f', entry[1] + entry[2])
        fm.write(prefix + b'user', b' user %f', entry[1])
        fm.write(prefix + b'sys', b' sys %f', entry[2])
        fm.write(prefix + b'count', b' (%s of %%d)' % role, count)
        fm.plain(b'\n')

    timings.sort()
    min_val = timings[0]
    display(b'best', min_val)
    if displayall:
        max_val = timings[-1]
        display(b'max', max_val)
        avg = tuple([sum(x) / count for x in zip(*timings)])
        display(b'avg', avg)
        median = timings[len(timings) // 2]
        display(b'median', median)


# utilities for historical portability


def getint(ui, section, name, default):
    # for "historical portability":
    # ui.configint has been available since 1.9 (or fa2b596db182)
    v = ui.config(section, name, None)
    if v is None:
        return default
    try:
        return int(v)
    except ValueError:
        raise error.ConfigError(
            b"%s.%s is not an integer ('%s')" % (section, name, v)
        )


def safeattrsetter(obj, name, ignoremissing=False):
    """Ensure that 'obj' has 'name' attribute before subsequent setattr

    This function is aborted, if 'obj' doesn't have 'name' attribute
    at runtime. This avoids overlooking removal of an attribute, which
    breaks assumption of performance measurement, in the future.

    This function returns the object to (1) assign a new value, and
    (2) restore an original value to the attribute.

    If 'ignoremissing' is true, missing 'name' attribute doesn't cause
    abortion, and this function returns None. This is useful to
    examine an attribute, which isn't ensured in all Mercurial
    versions.
    """
    if not util.safehasattr(obj, name):
        if ignoremissing:
            return None
        raise error.Abort(
            (
                b"missing attribute %s of %s might break assumption"
                b" of performance measurement"
            )
            % (name, obj)
        )

    origvalue = getattr(obj, _sysstr(name))

    class attrutil:
        def set(self, newvalue):
            setattr(obj, _sysstr(name), newvalue)

        def restore(self):
            setattr(obj, _sysstr(name), origvalue)

    return attrutil()


# utilities to examine each internal API changes


def getbranchmapsubsettable():
    # for "historical portability":
    # subsettable is defined in:
    # - branchmap since 2.9 (or 175c6fd8cacc)
    # - repoview since 2.5 (or 59a9f18d4587)
    # - repoviewutil since 5.0
    for mod in (branchmap, repoview, repoviewutil):
        subsettable = getattr(mod, 'subsettable', None)
        if subsettable:
            return subsettable

    # bisecting in bcee63733aad::59a9f18d4587 can reach here (both
    # branchmap and repoview modules exist, but subsettable attribute
    # doesn't)
    raise error.Abort(
        b"perfbranchmap not available with this Mercurial",
        hint=b"use 2.5 or later",
    )


def getsvfs(repo):
    """Return appropriate object to access files under .hg/store"""
    # for "historical portability":
    # repo.svfs has been available since 2.3 (or 7034365089bf)
    svfs = getattr(repo, 'svfs', None)
    if svfs:
        return svfs
    else:
        return getattr(repo, 'sopener')


def getvfs(repo):
    """Return appropriate object to access files under .hg"""
    # for "historical portability":
    # repo.vfs has been available since 2.3 (or 7034365089bf)
    vfs = getattr(repo, 'vfs', None)
    if vfs:
        return vfs
    else:
        return getattr(repo, 'opener')


def repocleartagscachefunc(repo):
    """Return the function to clear tags cache according to repo internal API"""
    if util.safehasattr(repo, b'_tagscache'):  # since 2.0 (or 9dca7653b525)
        # in this case, setattr(repo, '_tagscache', None) or so isn't
        # correct way to clear tags cache, because existing code paths
        # expect _tagscache to be a structured object.
        def clearcache():
            # _tagscache has been filteredpropertycache since 2.5 (or
            # 98c867ac1330), and delattr() can't work in such case
            if '_tagscache' in vars(repo):
                del repo.__dict__['_tagscache']

        return clearcache

    repotags = safeattrsetter(repo, b'_tags', ignoremissing=True)
    if repotags:  # since 1.4 (or 5614a628d173)
        return lambda: repotags.set(None)

    repotagscache = safeattrsetter(repo, b'tagscache', ignoremissing=True)
    if repotagscache:  # since 0.6 (or d7df759d0e97)
        return lambda: repotagscache.set(None)

    # Mercurial earlier than 0.6 (or d7df759d0e97) logically reaches
    # this point, but it isn't so problematic, because:
    # - repo.tags of such Mercurial isn't "callable", and repo.tags()
    #   in perftags() causes failure soon
    # - perf.py itself has been available since 1.1 (or eb240755386d)
    raise error.Abort(b"tags API of this hg command is unknown")


# utilities to clear cache


def clearfilecache(obj, attrname):
    unfiltered = getattr(obj, 'unfiltered', None)
    if unfiltered is not None:
        obj = obj.unfiltered()
    if attrname in vars(obj):
        delattr(obj, attrname)
    obj._filecache.pop(attrname, None)


def clearchangelog(repo):
    if repo is not repo.unfiltered():
        object.__setattr__(repo, '_clcachekey', None)
        object.__setattr__(repo, '_clcache', None)
    clearfilecache(repo.unfiltered(), 'changelog')


# perf commands


@command(b'perf::walk|perfwalk', formatteropts)
def perfwalk(ui, repo, *pats, **opts):
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    m = scmutil.match(repo[None], pats, {})
    timer(
        lambda: len(
            list(
                repo.dirstate.walk(m, subrepos=[], unknown=True, ignored=False)
            )
        )
    )
    fm.end()


@command(b'perf::annotate|perfannotate', formatteropts)
def perfannotate(ui, repo, f, **opts):
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    fc = repo[b'.'][f]
    timer(lambda: len(fc.annotate(True)))
    fm.end()


@command(
    b'perf::status|perfstatus',
    [
        (b'u', b'unknown', False, b'ask status to look for unknown files'),
        (b'', b'dirstate', False, b'benchmark the internal dirstate call'),
    ]
    + formatteropts,
)
def perfstatus(ui, repo, **opts):
    """benchmark the performance of a single status call

    The repository data are preserved between each call.

    By default, only the status of the tracked file are requested. If
    `--unknown` is passed, the "unknown" files are also tracked.
    """
    opts = _byteskwargs(opts)
    # m = match.always(repo.root, repo.getcwd())
    # timer(lambda: sum(map(len, repo.dirstate.status(m, [], False, False,
    #                                                False))))
    timer, fm = gettimer(ui, opts)
    if opts[b'dirstate']:
        dirstate = repo.dirstate
        m = scmutil.matchall(repo)
        unknown = opts[b'unknown']

        def status_dirstate():
            s = dirstate.status(
                m, subrepos=[], ignored=False, clean=False, unknown=unknown
            )
            sum(map(bool, s))

        timer(status_dirstate)
    else:
        timer(lambda: sum(map(len, repo.status(unknown=opts[b'unknown']))))
    fm.end()


@command(b'perf::addremove|perfaddremove', formatteropts)
def perfaddremove(ui, repo, **opts):
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    try:
        oldquiet = repo.ui.quiet
        repo.ui.quiet = True
        matcher = scmutil.match(repo[None])
        opts[b'dry_run'] = True
        if 'uipathfn' in getargspec(scmutil.addremove).args:
            uipathfn = scmutil.getuipathfn(repo)
            timer(lambda: scmutil.addremove(repo, matcher, b"", uipathfn, opts))
        else:
            timer(lambda: scmutil.addremove(repo, matcher, b"", opts))
    finally:
        repo.ui.quiet = oldquiet
        fm.end()


def clearcaches(cl):
    # behave somewhat consistently across internal API changes
    if util.safehasattr(cl, b'clearcaches'):
        cl.clearcaches()
    elif util.safehasattr(cl, b'_nodecache'):
        # <= hg-5.2
        from mercurial.node import nullid, nullrev

        cl._nodecache = {nullid: nullrev}
        cl._nodepos = None


@command(b'perf::heads|perfheads', formatteropts)
def perfheads(ui, repo, **opts):
    """benchmark the computation of a changelog heads"""
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    cl = repo.changelog

    def s():
        clearcaches(cl)

    def d():
        len(cl.headrevs())

    timer(d, setup=s)
    fm.end()


@command(
    b'perf::tags|perftags',
    formatteropts
    + [
        (b'', b'clear-revlogs', False, b'refresh changelog and manifest'),
    ],
)
def perftags(ui, repo, **opts):
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    repocleartagscache = repocleartagscachefunc(repo)
    clearrevlogs = opts[b'clear_revlogs']

    def s():
        if clearrevlogs:
            clearchangelog(repo)
            clearfilecache(repo.unfiltered(), 'manifest')
        repocleartagscache()

    def t():
        return len(repo.tags())

    timer(t, setup=s)
    fm.end()


@command(b'perf::ancestors|perfancestors', formatteropts)
def perfancestors(ui, repo, **opts):
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    heads = repo.changelog.headrevs()

    def d():
        for a in repo.changelog.ancestors(heads):
            pass

    timer(d)
    fm.end()


@command(b'perf::ancestorset|perfancestorset', formatteropts)
def perfancestorset(ui, repo, revset, **opts):
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    revs = repo.revs(revset)
    heads = repo.changelog.headrevs()

    def d():
        s = repo.changelog.ancestors(heads)
        for rev in revs:
            rev in s

    timer(d)
    fm.end()


@command(
    b'perf::delta-find',
    revlogopts + formatteropts,
    b'-c|-m|FILE REV',
)
def perf_delta_find(ui, repo, arg_1, arg_2=None, **opts):
    """benchmark the process of finding a valid delta for a revlog revision

    When a revlog receives a new revision (e.g. from a commit, or from an
    incoming bundle), it searches for a suitable delta-base to produce a delta.
    This perf command measures how much time we spend in this process. It
    operates on an already stored revision.

    See `hg help debug-delta-find` for another related command.
    """
    from mercurial import revlogutils
    import mercurial.revlogutils.deltas as deltautil

    opts = _byteskwargs(opts)
    if arg_2 is None:
        file_ = None
        rev = arg_1
    else:
        file_ = arg_1
        rev = arg_2

    repo = repo.unfiltered()

    timer, fm = gettimer(ui, opts)

    rev = int(rev)

    revlog = cmdutil.openrevlog(repo, b'perf::delta-find', file_, opts)

    deltacomputer = deltautil.deltacomputer(revlog)

    node = revlog.node(rev)
    p1r, p2r = revlog.parentrevs(rev)
    p1 = revlog.node(p1r)
    p2 = revlog.node(p2r)
    full_text = revlog.revision(rev)
    textlen = len(full_text)
    cachedelta = None
    flags = revlog.flags(rev)

    revinfo = revlogutils.revisioninfo(
        node,
        p1,
        p2,
        [full_text],  # btext
        textlen,
        cachedelta,
        flags,
    )

    # Note: we should probably purge the potential caches (like the full
    # manifest cache) between runs.
    def find_one():
        with revlog._datafp() as fh:
            deltacomputer.finddeltainfo(revinfo, fh, target_rev=rev)

    timer(find_one)
    fm.end()


@command(b'perf::discovery|perfdiscovery', formatteropts, b'PATH')
def perfdiscovery(ui, repo, path, **opts):
    """benchmark discovery between local repo and the peer at given path"""
    repos = [repo, None]
    timer, fm = gettimer(ui, opts)

    try:
        from mercurial.utils.urlutil import get_unique_pull_path

        path = get_unique_pull_path(b'perfdiscovery', repo, ui, path)[0]
    except ImportError:
        path = ui.expandpath(path)

    def s():
        repos[1] = hg.peer(ui, opts, path)

    def d():
        setdiscovery.findcommonheads(ui, *repos)

    timer(d, setup=s)
    fm.end()


@command(
    b'perf::bookmarks|perfbookmarks',
    formatteropts
    + [
        (b'', b'clear-revlogs', False, b'refresh changelog and manifest'),
    ],
)
def perfbookmarks(ui, repo, **opts):
    """benchmark parsing bookmarks from disk to memory"""
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)

    clearrevlogs = opts[b'clear_revlogs']

    def s():
        if clearrevlogs:
            clearchangelog(repo)
        clearfilecache(repo, b'_bookmarks')

    def d():
        repo._bookmarks

    timer(d, setup=s)
    fm.end()


@command(
    b'perf::bundle',
    [
        (
            b'r',
            b'rev',
            [],
            b'changesets to bundle',
            b'REV',
        ),
        (
            b't',
            b'type',
            b'none',
            b'bundlespec to use (see `hg help bundlespec`)',
            b'TYPE',
        ),
    ]
    + formatteropts,
    b'REVS',
)
def perfbundle(ui, repo, *revs, **opts):
    """benchmark the creation of a bundle from a repository

    For now, this only supports "none" compression.
    """
    try:
        from mercurial import bundlecaches

        parsebundlespec = bundlecaches.parsebundlespec
    except ImportError:
        from mercurial import exchange

        parsebundlespec = exchange.parsebundlespec

    from mercurial import discovery
    from mercurial import bundle2

    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)

    cl = repo.changelog
    revs = list(revs)
    revs.extend(opts.get(b'rev', ()))
    revs = scmutil.revrange(repo, revs)
    if not revs:
        raise error.Abort(b"not revision specified")
    # make it a consistent set (ie: without topological gaps)
    old_len = len(revs)
    revs = list(repo.revs(b"%ld::%ld", revs, revs))
    if old_len != len(revs):
        new_count = len(revs) - old_len
        msg = b"add %d new revisions to make it a consistent set\n"
        ui.write_err(msg % new_count)

    targets = [cl.node(r) for r in repo.revs(b"heads(::%ld)", revs)]
    bases = [cl.node(r) for r in repo.revs(b"heads(::%ld - %ld)", revs, revs)]
    outgoing = discovery.outgoing(repo, bases, targets)

    bundle_spec = opts.get(b'type')

    bundle_spec = parsebundlespec(repo, bundle_spec, strict=False)

    cgversion = bundle_spec.params.get(b"cg.version")
    if cgversion is None:
        if bundle_spec.version == b'v1':
            cgversion = b'01'
        if bundle_spec.version == b'v2':
            cgversion = b'02'
    if cgversion not in changegroup.supportedoutgoingversions(repo):
        err = b"repository does not support bundle version %s"
        raise error.Abort(err % cgversion)

    if cgversion == b'01':  # bundle1
        bversion = b'HG10' + bundle_spec.wirecompression
        bcompression = None
    elif cgversion in (b'02', b'03'):
        bversion = b'HG20'
        bcompression = bundle_spec.wirecompression
    else:
        err = b'perf::bundle: unexpected changegroup version %s'
        raise error.ProgrammingError(err % cgversion)

    if bcompression is None:
        bcompression = b'UN'

    if bcompression != b'UN':
        err = b'perf::bundle: compression currently unsupported: %s'
        raise error.ProgrammingError(err % bcompression)

    def do_bundle():
        bundle2.writenewbundle(
            ui,
            repo,
            b'perf::bundle',
            os.devnull,
            bversion,
            outgoing,
            bundle_spec.params,
        )

    timer(do_bundle)
    fm.end()


@command(b'perf::bundleread|perfbundleread', formatteropts, b'BUNDLE')
def perfbundleread(ui, repo, bundlepath, **opts):
    """Benchmark reading of bundle files.

    This command is meant to isolate the I/O part of bundle reading as
    much as possible.
    """
    from mercurial import (
        bundle2,
        exchange,
        streamclone,
    )

    opts = _byteskwargs(opts)

    def makebench(fn):
        def run():
            with open(bundlepath, b'rb') as fh:
                bundle = exchange.readbundle(ui, fh, bundlepath)
                fn(bundle)

        return run

    def makereadnbytes(size):
        def run():
            with open(bundlepath, b'rb') as fh:
                bundle = exchange.readbundle(ui, fh, bundlepath)
                while bundle.read(size):
                    pass

        return run

    def makestdioread(size):
        def run():
            with open(bundlepath, b'rb') as fh:
                while fh.read(size):
                    pass

        return run

    # bundle1

    def deltaiter(bundle):
        for delta in bundle.deltaiter():
            pass

    def iterchunks(bundle):
        for chunk in bundle.getchunks():
            pass

    # bundle2

    def forwardchunks(bundle):
        for chunk in bundle._forwardchunks():
            pass

    def iterparts(bundle):
        for part in bundle.iterparts():
            pass

    def iterpartsseekable(bundle):
        for part in bundle.iterparts(seekable=True):
            pass

    def seek(bundle):
        for part in bundle.iterparts(seekable=True):
            part.seek(0, os.SEEK_END)

    def makepartreadnbytes(size):
        def run():
            with open(bundlepath, b'rb') as fh:
                bundle = exchange.readbundle(ui, fh, bundlepath)
                for part in bundle.iterparts():
                    while part.read(size):
                        pass

        return run

    benches = [
        (makestdioread(8192), b'read(8k)'),
        (makestdioread(16384), b'read(16k)'),
        (makestdioread(32768), b'read(32k)'),
        (makestdioread(131072), b'read(128k)'),
    ]

    with open(bundlepath, b'rb') as fh:
        bundle = exchange.readbundle(ui, fh, bundlepath)

        if isinstance(bundle, changegroup.cg1unpacker):
            benches.extend(
                [
                    (makebench(deltaiter), b'cg1 deltaiter()'),
                    (makebench(iterchunks), b'cg1 getchunks()'),
                    (makereadnbytes(8192), b'cg1 read(8k)'),
                    (makereadnbytes(16384), b'cg1 read(16k)'),
                    (makereadnbytes(32768), b'cg1 read(32k)'),
                    (makereadnbytes(131072), b'cg1 read(128k)'),
                ]
            )
        elif isinstance(bundle, bundle2.unbundle20):
            benches.extend(
                [
                    (makebench(forwardchunks), b'bundle2 forwardchunks()'),
                    (makebench(iterparts), b'bundle2 iterparts()'),
                    (
                        makebench(iterpartsseekable),
                        b'bundle2 iterparts() seekable',
                    ),
                    (makebench(seek), b'bundle2 part seek()'),
                    (makepartreadnbytes(8192), b'bundle2 part read(8k)'),
                    (makepartreadnbytes(16384), b'bundle2 part read(16k)'),
                    (makepartreadnbytes(32768), b'bundle2 part read(32k)'),
                    (makepartreadnbytes(131072), b'bundle2 part read(128k)'),
                ]
            )
        elif isinstance(bundle, streamclone.streamcloneapplier):
            raise error.Abort(b'stream clone bundles not supported')
        else:
            raise error.Abort(b'unhandled bundle type: %s' % type(bundle))

    for fn, title in benches:
        timer, fm = gettimer(ui, opts)
        timer(fn, title=title)
        fm.end()


@command(
    b'perf::changegroupchangelog|perfchangegroupchangelog',
    formatteropts
    + [
        (b'', b'cgversion', b'02', b'changegroup version'),
        (b'r', b'rev', b'', b'revisions to add to changegroup'),
    ],
)
def perfchangegroupchangelog(ui, repo, cgversion=b'02', rev=None, **opts):
    """Benchmark producing a changelog group for a changegroup.

    This measures the time spent processing the changelog during a
    bundle operation. This occurs during `hg bundle` and on a server
    processing a `getbundle` wire protocol request (handles clones
    and pull requests).

    By default, all revisions are added to the changegroup.
    """
    opts = _byteskwargs(opts)
    cl = repo.changelog
    nodes = [cl.lookup(r) for r in repo.revs(rev or b'all()')]
    bundler = changegroup.getbundler(cgversion, repo)

    def d():
        state, chunks = bundler._generatechangelog(cl, nodes)
        for chunk in chunks:
            pass

    timer, fm = gettimer(ui, opts)

    # Terminal printing can interfere with timing. So disable it.
    with ui.configoverride({(b'progress', b'disable'): True}):
        timer(d)

    fm.end()


@command(b'perf::dirs|perfdirs', formatteropts)
def perfdirs(ui, repo, **opts):
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    dirstate = repo.dirstate
    b'a' in dirstate

    def d():
        dirstate.hasdir(b'a')
        try:
            del dirstate._map._dirs
        except AttributeError:
            pass

    timer(d)
    fm.end()


@command(
    b'perf::dirstate|perfdirstate',
    [
        (
            b'',
            b'iteration',
            None,
            b'benchmark a full iteration for the dirstate',
        ),
        (
            b'',
            b'contains',
            None,
            b'benchmark a large amount of `nf in dirstate` calls',
        ),
    ]
    + formatteropts,
)
def perfdirstate(ui, repo, **opts):
    """benchmap the time of various distate operations

    By default benchmark the time necessary to load a dirstate from scratch.
    The dirstate is loaded to the point were a "contains" request can be
    answered.
    """
    opts = _byteskwargs(opts)
    timer, fm = gettimer(ui, opts)
    b"a" in repo.dirstate

    if opts[b'iteration'] and opts[b'contains']:
        msg = b'only specify one of --iteration or --contains'
        raise error.Abort(msg)

    if opts[b'iteration']:
        setup = None
        dirstate = repo.dirstate

        def d():
            for f in dirstate:
                pass

    elif opts[b'contains']:
        setup = None
        dirstate = repo.dirstate
        allfiles = list(dirstate)
        # also add file path that will be "missing" from the dirstate
        allfiles.extend([f[::-1] for f in allfiles])

        def d():
            for f in allfiles:
                f in dirstate

    else:

        def setup():
            repo.dirstate.invalidate()

        def d():
            b"a" in repo.dirstate

    timer(d, setup=setup)
    fm.end()


@command(b'perf::dirstatedirs|perfdirstatedirs', formatteropts)
def perfdirstatedirs(ui, repo, **opts):
    """benchmap a 'dirstate.hasdir' call from an empty `dirs` cache"""
