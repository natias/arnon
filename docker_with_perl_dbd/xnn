        ui = self._repo.ui
        date = ui.configdate(b'devel', b'default-date')
        if date is None:
            date = dateutil.makedate()
        return date

    def subrev(self, subpath):
        return None

    def manifestnode(self):
        return None

    def user(self):
        return self._user or self._repo.ui.username()

    def date(self):
        return self._date

    def description(self):
        return self._text

    def files(self):
        return sorted(
            self._status.modified + self._status.added + self._status.removed
        )

    def modified(self):
        return self._status.modified

    def added(self):
        return self._status.added

    def removed(self):
        return self._status.removed

    def deleted(self):
        return self._status.deleted

    filesmodified = modified
    filesadded = added
    filesremoved = removed

    def branch(self):
        return encoding.tolocal(self._extra[b'branch'])

    def closesbranch(self):
        return b'close' in self._extra

    def extra(self):
        return self._extra

    def isinmemory(self):
        return False

    def tags(self):
        return []

    def bookmarks(self):
        b = []
        for p in self.parents():
            b.extend(p.bookmarks())
        return b

    def phase(self):
        phase = phases.newcommitphase(self._repo.ui)
        for p in self.parents():
            phase = max(phase, p.phase())
        return phase

    def hidden(self):
        return False

    def children(self):
        return []

    def flags(self, path):
        if '_manifest' in self.__dict__:
            try:
                return self._manifest.flags(path)
            except KeyError:
                return b''

        try:
            return self._flagfunc(path)
        except OSError:
            return b''

    def ancestor(self, c2):
        """return the "best" ancestor context of self and c2"""
        return self._parents[0].ancestor(c2)  # punt on two parents for now

    def ancestors(self):
        for p in self._parents:
            yield p
        for a in self._repo.changelog.ancestors(
            [p.rev() for p in self._parents]
        ):
            yield self._repo[a]

    def markcommitted(self, node):
        """Perform post-commit cleanup necessary after committing this ctx

        Specifically, this updates backing stores this working context
        wraps to reflect the fact that the changes reflected by this
        workingctx have been committed.  For example, it marks
        modified and added files as normal in the dirstate.

        """

    def dirty(self, missing=False, merge=True, branch=True):
        return False


class workingctx(committablectx):
    """A workingctx object makes access to data related to
    the current working directory convenient.
    date - any valid date string or (unixtime, offset), or None.
    user - username string, or None.
    extra - a dictionary of extra values, or None.
    changes - a list of file lists as returned by localrepo.status()
               or None to use the repository status.
    """

    def __init__(
        self, repo, text=b"", user=None, date=None, extra=None, changes=None
    ):
        branch = None
        if not extra or b'branch' not in extra:
            try:
                branch = repo.dirstate.branch()
            except UnicodeDecodeError:
                raise error.Abort(_(b'branch name not in UTF-8!'))
        super(workingctx, self).__init__(
            repo, text, user, date, extra, changes, branch=branch
        )

    def __iter__(self):
        d = self._repo.dirstate
        for f in d:
            if d.get_entry(f).tracked:
                yield f

    def __contains__(self, key):
        return self._repo.dirstate.get_entry(key).tracked

    def hex(self):
        return self._repo.nodeconstants.wdirhex

    @propertycache
    def _parents(self):
        p = self._repo.dirstate.parents()
        if p[1] == self._repo.nodeconstants.nullid:
            p = p[:-1]
        # use unfiltered repo to delay/avoid loading obsmarkers
        unfi = self._repo.unfiltered()
        return [
            changectx(
                self._repo, unfi.changelog.rev(n), n, maybe_filtered=False
            )
            for n in p
        ]

    def setparents(self, p1node, p2node=None):
        if p2node is None:
            p2node = self._repo.nodeconstants.nullid
        dirstate = self._repo.dirstate
        with dirstate.parentchange():
            copies = dirstate.setparents(p1node, p2node)
            pctx = self._repo[p1node]
            if copies:
                # Adjust copy records, the dirstate cannot do it, it
                # requires access to parents manifests. Preserve them
                # only for entries added to first parent.
                for f in copies:
                    if f not in pctx and copies[f] in pctx:
                        dirstate.copy(copies[f], f)
            if p2node == self._repo.nodeconstants.nullid:
                for f, s in sorted(dirstate.copies().items()):
                    if f not in pctx and s not in pctx:
                        dirstate.copy(None, f)

    def _fileinfo(self, path):
        # populate __dict__['_manifest'] as workingctx has no _manifestdelta
        self._manifest
        return super(workingctx, self)._fileinfo(path)

    def _buildflagfunc(self):
        # Create a fallback function for getting file flags when the
        # filesystem doesn't support them

        copiesget = self._repo.dirstate.copies().get
        parents = self.parents()
        if len(parents) < 2:
            # when we have one parent, it's easy: copy from parent
            man = parents[0].manifest()

            def func(f):
                f = copiesget(f, f)
                return man.flags(f)

        else:
            # merges are tricky: we try to reconstruct the unstored
            # result from the merge (issue1802)
            p1, p2 = parents
            pa = p1.ancestor(p2)
            m1, m2, ma = p1.manifest(), p2.manifest(), pa.manifest()

            def func(f):
                f = copiesget(f, f)  # may be wrong for merges with copies
                fl1, fl2, fla = m1.flags(f), m2.flags(f), ma.flags(f)
                if fl1 == fl2:
                    return fl1
                if fl1 == fla:
                    return fl2
                if fl2 == fla:
                    return fl1
                return b''  # punt for conflicts

        return func

    @propertycache
    def _flagfunc(self):
        return self._repo.dirstate.flagfunc(self._buildflagfunc)

    def flags(self, path):
        try:
            return self._flagfunc(path)
        except OSError:
            return b''

    def filectx(self, path, filelog=None):
        """get a file context from the working directory"""
        return workingfilectx(
            self._repo, path, workingctx=self, filelog=filelog
        )

    def dirty(self, missing=False, merge=True, branch=True):
        """check whether a working directory is modified"""
        # check subrepos first
        for s in sorted(self.substate):
            if self.sub(s).dirty(missing=missing):
                return True
        # check current working dir
        return (
            (merge and self.p2())
            or (branch and self.branch() != self.p1().branch())
            or self.modified()
            or self.added()
            or self.removed()
            or (missing and self.deleted())
        )

    def add(self, list, prefix=b""):
        with self._repo.wlock():
            ui, ds = self._repo.ui, self._repo.dirstate
            uipath = lambda f: ds.pathto(pathutil.join(prefix, f))
            rejected = []
            lstat = self._repo.wvfs.lstat
            for f in list:
                # ds.pathto() returns an absolute file when this is invoked from
                # the keyword extension.  That gets flagged as non-portable on
                # Windows, since it contains the drive letter and colon.
                scmutil.checkportable(ui, os.path.join(prefix, f))
                try:
                    st = lstat(f)
                except OSError:
                    ui.warn(_(b"%s does not exist!\n") % uipath(f))
                    rejected.append(f)
                    continue
                limit = ui.configbytes(b'ui', b'large-file-limit')
                if limit != 0 and st.st_size > limit:
                    ui.warn(
                        _(
                            b"%s: up to %d MB of RAM may be required "
                            b"to manage this file\n"
                            b"(use 'hg revert %s' to cancel the "
                            b"pending addition)\n"
                        )
                        % (f, 3 * st.st_size // 1000000, uipath(f))
                    )
                if not (stat.S_ISREG(st.st_mode) or stat.S_ISLNK(st.st_mode)):
                    ui.warn(
                        _(
                            b"%s not added: only files and symlinks "
                            b"supported currently\n"
                        )
                        % uipath(f)
                    )
                    rejected.append(f)
                elif not ds.set_tracked(f):
                    ui.warn(_(b"%s already tracked!\n") % uipath(f))
            return rejected

    def forget(self, files, prefix=b""):
        with self._repo.wlock():
            ds = self._repo.dirstate
            uipath = lambda f: ds.pathto(pathutil.join(prefix, f))
            rejected = []
            for f in files:
                if not ds.set_untracked(f):
                    self._repo.ui.warn(_(b"%s not tracked!\n") % uipath(f))
                    rejected.append(f)
            return rejected

    def copy(self, source, dest):
        try:
            st = self._repo.wvfs.lstat(dest)
        except FileNotFoundError:
            self._repo.ui.warn(
                _(b"%s does not exist!\n") % self._repo.dirstate.pathto(dest)
            )
            return
        if not (stat.S_ISREG(st.st_mode) or stat.S_ISLNK(st.st_mode)):
            self._repo.ui.warn(
                _(b"copy failed: %s is not a file or a symbolic link\n")
                % self._repo.dirstate.pathto(dest)
            )
        else:
            with self._repo.wlock():
                ds = self._repo.dirstate
                ds.set_tracked(dest)
                ds.copy(source, dest)

    def match(
        self,
        pats=None,
        include=None,
        exclude=None,
        default=b'glob',
        listsubrepos=False,
        badfn=None,
        cwd=None,
    ):
        r = self._repo
        if not cwd:
            cwd = r.getcwd()

        # Only a case insensitive filesystem needs magic to translate user input
        # to actual case in the filesystem.
        icasefs = not util.fscasesensitive(r.root)
        return matchmod.match(
            r.root,
            cwd,
            pats,
            include,
            exclude,
            default,
            auditor=r.auditor,
            ctx=self,
            listsubrepos=listsubrepos,
            badfn=badfn,
            icasefs=icasefs,
        )

    def _filtersuspectsymlink(self, files):
        if not files or self._repo.dirstate._checklink:
            return files

        # Symlink placeholders may get non-symlink-like contents
        # via user error or dereferencing by NFS or Samba servers,
        # so we filter out any placeholders that don't look like a
        # symlink
        sane = []
        for f in files:
            if self.flags(f) == b'l':
                d = self[f].data()
                if (
                    d == b''
                    or len(d) >= 1024
                    or b'\n' in d
                    or stringutil.binary(d)
                ):
                    self._repo.ui.debug(
                        b'ignoring suspect symlink placeholder "%s"\n' % f
                    )
                    continue
            sane.append(f)
        return sane

    def _checklookup(self, files, mtime_boundary):
        # check for any possibly clean files
        if not files:
            return [], [], [], []

        modified = []
        deleted = []
        clean = []
        fixup = []
        pctx = self._parents[0]
        # do a full compare of any files that might have changed
        for f in sorted(files):
            try:
                # This will return True for a file that got replaced by a
                # directory in the interim, but fixing that is pretty hard.
                if (
                    f not in pctx
                    or self.flags(f) != pctx.flags(f)
                    or pctx[f].cmp(self[f])
                ):
                    modified.append(f)
                elif mtime_boundary is None:
                    clean.append(f)
                else:
                    s = self[f].lstat()
                    mode = s.st_mode
                    size = s.st_size
                    file_mtime = timestamp.reliable_mtime_of(s, mtime_boundary)
                    if file_mtime is not None:
                        cache_info = (mode, size, file_mtime)
                        fixup.append((f, cache_info))
                    else:
                        clean.append(f)
            except (IOError, OSError):
                # A file become inaccessible in between? Mark it as deleted,
                # matching dirstate behavior (issue5584).
                # The dirstate has more complex behavior around whether a
                # missing file matches a directory, etc, but we don't need to
                # bother with that: if f has made it to this point, we're sure
                # it's in the dirstate.
                deleted.append(f)

        return modified, deleted, clean, fixup

    def _poststatusfixup(self, status, fixup):
        """update dirstate for files that are actually clean"""
        poststatus = self._repo.postdsstatus()
        if fixup or poststatus or self._repo.dirstate._dirty:
            try:
                oldid = self._repo.dirstate.identity()

                # updating the dirstate is optional
                # so we don't wait on the lock
                # wlock can invalidate the dirstate, so cache normal _after_
                # taking the lock
                with self._repo.wlock(False):
                    dirstate = self._repo.dirstate
                    if dirstate.identity() == oldid:
                        if fixup:
                            if dirstate.pendingparentchange():
                                normal = lambda f, pfd: dirstate.update_file(
                                    f, p1_tracked=True, wc_tracked=True
                                )
                            else:
                                normal = dirstate.set_clean
                            for f, pdf in fixup:
                                normal(f, pdf)
                            # write changes out explicitly, because nesting
                            # wlock at runtime may prevent 'wlock.release()'
                            # after this block from doing so for subsequent
                            # changing files
                            tr = self._repo.currenttransaction()
                            self._repo.dirstate.write(tr)

                        if poststatus:
                            for ps in poststatus:
                                ps(self, status)
                    else:
                        # in this case, writing changes out breaks
                        # consistency, because .hg/dirstate was
                        # already changed simultaneously after last
                        # caching (see also issue5584 for detail)
                        self._repo.ui.debug(
                            b'skip updating dirstate: identity mismatch\n'
                        )
            except error.LockError:
                pass
            finally:
                # Even if the wlock couldn't be grabbed, clear out the list.
                self._repo.clearpostdsstatus()

    def _dirstatestatus(self, match, ignored=False, clean=False, unknown=False):
        '''Gets the status from the dirstate -- internal use only.'''
        subrepos = []
        if b'.hgsub' in self:
            subrepos = sorted(self.substate)
        cmp, s, mtime_boundary = self._repo.dirstate.status(
            match, subrepos, ignored=ignored, clean=clean, unknown=unknown
        )

        # check for any possibly clean files
        fixup = []
        if cmp:
            modified2, deleted2, clean_set, fixup = self._checklookup(
                cmp, mtime_boundary
            )
            s.modified.extend(modified2)
            s.deleted.extend(deleted2)

            if clean_set and clean:
                s.clean.extend(clean_set)
            if fixup and clean:
                s.clean.extend((f for f, _ in fixup))

        self._poststatusfixup(s, fixup)

        if match.always():
            # cache for performance
            if s.unknown or s.ignored or s.clean:
                # "_status" is cached with list*=False in the normal route
                self._status = scmutil.status(
                    s.modified, s.added, s.removed, s.deleted, [], [], []
                )
            else:
                self._status = s

        return s

    @propertycache
    def _copies(self):
        p1copies = {}
        p2copies = {}
        parents = self._repo.dirstate.parents()
        p1manifest = self._repo[parents[0]].manifest()
        p2manifest = self._repo[parents[1]].manifest()
        changedset = set(self.added()) | set(self.modified())
        narrowmatch = self._repo.narrowmatch()
        for dst, src in self._repo.dirstate.copies().items():
            if dst not in changedset or not narrowmatch(dst):
                continue
            if src in p1manifest:
                p1copies[dst] = src
            elif src in p2manifest:
                p2copies[dst] = src
        return p1copies, p2copies

    @propertycache
    def _manifest(self):
        """generate a manifest corresponding to the values in self._status

        This reuse the file nodeid from parent, but we use special node
        identifiers for added and modified files. This is used by manifests
        merge to see that files are different and by update logic to avoid
        deleting newly added files.
        """
        return self._buildstatusmanifest(self._status)

    def _buildstatusmanifest(self, status):
        """Builds a manifest that includes the given status results."""
        parents = self.parents()

        man = parents[0].manifest().copy()

        ff = self._flagfunc
        for i, l in (
            (self._repo.nodeconstants.addednodeid, status.added),
            (self._repo.nodeconstants.modifiednodeid, status.modified),
        ):
            for f in l:
                man[f] = i
                try:
                    man.setflag(f, ff(f))
                except OSError:
                    pass

        for f in status.deleted + status.removed:
            if f in man:
                del man[f]

        return man

    def _buildstatus(
        self, other, s, match, listignored, listclean, listunknown
    ):
        """build a status with respect to another context

        This includes logic for maintaining the fast path of status when
        comparing the working directory against its parent, which is to skip
        building a new manifest if self (working directory) is not comparing
        against its parent (repo['.']).
        """
        s = self._dirstatestatus(match, listignored, listclean, listunknown)
        # Filter out symlinks that, in the case of FAT32 and NTFS filesystems,
        # might have accidentally ended up with the entire contents of the file
        # they are supposed to be linking to.
        s.modified[:] = self._filtersuspectsymlink(s.modified)
        if other != self._repo[b'.']:
            s = super(workingctx, self)._buildstatus(
                other, s, match, listignored, listclean, listunknown
            )
        return s

    def _matchstatus(self, other, match):
        """override the match method with a filter for directory patterns

        We use inheritance to customize the match.bad method only in cases of
        workingctx since it belongs only to the working directory when
        comparing against the parent changeset.

        If we aren't comparing against the working directory's parent, then we
        just use the default match object sent to us.
        """
        if other != self._repo[b'.']:

            def bad(f, msg):
                # 'f' may be a directory pattern from 'match.files()',
                # so 'f not in ctx1' is not enough
                if f not in other and not other.hasdir(f):
                    self._repo.ui.warn(
                        b'%s: %s\n' % (self._repo.dirstate.pathto(f), msg)
                    )

            match.bad = bad
        return match

    def walk(self, match):
        '''Generates matching file names.'''
        return sorted(
            self._repo.dirstate.walk(
                self._repo.narrowmatch(match),
                subrepos=sorted(self.substate),
                unknown=True,
                ignored=False,
            )
        )

    def matches(self, match):
        match = self._repo.narrowmatch(match)
        ds = self._repo.dirstate
        return sorted(f for f in ds.matches(match) if ds.get_entry(f).tracked)

    def markcommitted(self, node):
        with self._repo.dirstate.parentchange():
            for f in self.modified() + self.added():
                self._repo.dirstate.update_file(
                    f, p1_tracked=True, wc_tracked=True
                )
            for f in self.removed():
                self._repo.dirstate.update_file(
                    f, p1_tracked=False, wc_tracked=False
                )
            self._repo.dirstate.setparents(node)
            self._repo._quick_access_changeid_invalidate()

            sparse.aftercommit(self._repo, node)

        # write changes out explicitly, because nesting wlock at
        # runtime may prevent 'wlock.release()' in 'repo.commit()'
        # from immediately doing so for subsequent changing files
        self._repo.dirstate.write(self._repo.currenttransaction())

    def mergestate(self, clean=False):
        if clean:
            return mergestatemod.mergestate.clean(self._repo)
        return mergestatemod.mergestate.read(self._repo)


class committablefilectx(basefilectx):
    """A committablefilectx provides common functionality for a file context
    that wants the ability to commit, e.g. workingfilectx or memfilectx."""

    def __init__(self, repo, path, filelog=None, ctx=None):
        self._repo = repo
        self._path = path
        self._changeid = None
        self._filerev = self._filenode = None

        if filelog is not None:
            self._filelog = filelog
        if ctx:
            self._changectx = ctx

    def __nonzero__(self):
        return True

    __bool__ = __nonzero__

    def linkrev(self):
        # linked to self._changectx no matter if file is modified or not
        return self.rev()

    def renamed(self):
        path = self.copysource()
        if not path:
            return None
        return (
            path,
            self._changectx._parents[0]._manifest.get(
                path, self._repo.nodeconstants.nullid
            ),
        )

    def parents(self):
        '''return parent filectxs, following copies if necessary'''

        def filenode(ctx, path):
            return ctx._manifest.get(path, self._repo.nodeconstants.nullid)

        path = self._path
        fl = self._filelog
        pcl = self._changectx._parents
        renamed = self.renamed()

        if renamed:
            pl = [renamed + (None,)]
        else:
            pl = [(path, filenode(pcl[0], path), fl)]

        for pc in pcl[1:]:
            pl.append((path, filenode(pc, path), fl))

        return [
            self._parentfilectx(p, fileid=n, filelog=l)
            for p, n, l in pl
            if n != self._repo.nodeconstants.nullid
        ]

    def children(self):
        return []


class workingfilectx(committablefilectx):
    """A workingfilectx object makes access to data related to a particular
    file in the working directory convenient."""

    def __init__(self, repo, path, filelog=None, workingctx=None):
        super(workingfilectx, self).__init__(repo, path, filelog, workingctx)

    @propertycache
    def _changectx(self):
        return workingctx(self._repo)

    def data(self):
        return self._repo.wread(self._path)

    def copysource(self):
        return self._repo.dirstate.copied(self._path)

    def size(self):
        return self._repo.wvfs.lstat(self._path).st_size

    def lstat(self):
        return self._repo.wvfs.lstat(self._path)

    def date(self):
        t, tz = self._changectx.date()
        try:
            return (self._repo.wvfs.lstat(self._path)[stat.ST_MTIME], tz)
        except FileNotFoundError:
            return (t, tz)

    def exists(self):
        return self._repo.wvfs.exists(self._path)

    def lexists(self):
        return self._repo.wvfs.lexists(self._path)

    def audit(self):
        return self._repo.wvfs.audit(self._path)

    def cmp(self, fctx):
        """compare with other file context

        returns True if different than fctx.
        """
        # fctx should be a filectx (not a workingfilectx)
        # invert comparison to reuse the same code path
        return fctx.cmp(self)

    def remove(self, ignoremissing=False):
        """wraps unlink for a repo's working directory"""
        rmdir = self._repo.ui.configbool(b'experimental', b'removeemptydirs')
        self._repo.wvfs.unlinkpath(
            self._path, ignoremissing=ignoremissing, rmdir=rmdir
        )

    def write(self, data, flags, backgroundclose=False, **kwargs):
        """wraps repo.wwrite"""
        return self._repo.wwrite(
            self._path, data, flags, backgroundclose=backgroundclose, **kwargs
        )

    def markcopied(self, src):
        """marks this file a copy of `src`"""
        self._repo.dirstate.copy(src, self._path)

    def clearunknown(self):
        """Removes conflicting items in the working directory so that
        ``write()`` can be called successfully.
        """
        wvfs = self._repo.wvfs
        f = self._path
        wvfs.audit(f)
        if self._repo.ui.configbool(
            b'experimental', b'merge.checkpathconflicts'
        ):
            # remove files under the directory as they should already be
            # warned and backed up
            if wvfs.isdir(f) and not wvfs.islink(f):
                wvfs.rmtree(f, forcibly=True)
            for p in reversed(list(pathutil.finddirs(f))):
                if wvfs.isfileorlink(p):
                    wvfs.unlink(p)
                    break
        else:
            # don't remove files if path conflicts are not processed
            if wvfs.isdir(f) and not wvfs.islink(f):
                wvfs.removedirs(f)

    def setflags(self, l, x):
        self._repo.wvfs.setflags(self._path, l, x)


class overlayworkingctx(committablectx):
    """Wraps another mutable context with a write-back cache that can be
    converted into a commit context.

    self._cache[path] maps to a dict with keys: {
        'exists': bool?
        'date': date?
        'data': str?
        'flags': str?
        'copied': str? (path or None)
    }
    If `exists` is True, `flags` must be non-None and 'date' is non-None. If it
    is `False`, the file was deleted.
    """

    def __init__(self, repo):
        super(overlayworkingctx, self).__init__(repo)
        self.clean()

    def setbase(self, wrappedctx):
        self._wrappedctx = wrappedctx
        self._parents = [wrappedctx]
        # Drop old manifest cache as it is now out of date.
        # This is necessary when, e.g., rebasing several nodes with one
        # ``overlayworkingctx`` (e.g. with --collapse).
        util.clearcachedproperty(self, b'_manifest')

    def setparents(self, p1node, p2node=None):
        if p2node is None:
            p2node = self._repo.nodeconstants.nullid
        assert p1node == self._wrappedctx.node()
        self._parents = [self._wrappedctx, self._repo.unfiltered()[p2node]]

    def data(self, path):
        if self.isdirty(path):
            if self._cache[path][b'exists']:
                if self._cache[path][b'data'] is not None:
                    return self._cache[path][b'data']
                else:
                    # Must fallback here, too, because we only set flags.
                    return self._wrappedctx[path].data()
            else:
                raise error.ProgrammingError(
                    b"No such file or directory: %s" % path
                )
        else:
            return self._wrappedctx[path].data()

    @propertycache
    def _manifest(self):
        parents = self.parents()
        man = parents[0].manifest().copy()

        flag = self._flagfunc
        for path in self.added():
            man[path] = self._repo.nodeconstants.addednodeid
            man.setflag(path, flag(path))
        for path in self.modified():
            man[path] = self._repo.nodeconstants.modifiednodeid
            man.setflag(path, flag(path))
        for path in self.removed():
            del man[path]
        return man

    @propertycache
    def _flagfunc(self):
        def f(path):
            return self._cache[path][b'flags']

        return f

    def files(self):
        return sorted(self.added() + self.modified() + self.removed())

    def modified(self):
        return [
            f
            for f in self._cache.keys()
            if self._cache[f][b'exists'] and self._existsinparent(f)
        ]

    def added(self):
        return [
            f
            for f in self._cache.keys()
            if self._cache[f][b'exists'] and not self._existsinparent(f)
        ]

    def removed(self):
        return [
            f
            for f in self._cache.keys()
            if not self._cache[f][b'exists'] and self._existsinparent(f)
        ]

    def p1copies(self):
        copies = {}
        narrowmatch = self._repo.narrowmatch()
        for f in self._cache.keys():
            if not narrowmatch(f):
                continue
            copies.pop(f, None)  # delete if it exists
            source = self._cache[f][b'copied']
            if source:
                copies[f] = source
        return copies

    def p2copies(self):
        copies = {}
        narrowmatch = self._repo.narrowmatch()
        for f in self._cache.keys():
            if not narrowmatch(f):
                continue
            copies.pop(f, None)  # delete if it exists
            source = self._cache[f][b'copied']
            if source:
                copies[f] = source
        return copies

    def isinmemory(self):
        return True

    def filedate(self, path):
        if self.isdirty(path):
            return self._cache[path][b'date']
        else:
            return self._wrappedctx[path].date()

    def markcopied(self, path, origin):
        self._markdirty(
            path,
            exists=True,
            date=self.filedate(path),
            flags=self.flags(path),
            copied=origin,
        )

    def copydata(self, path):
        if self.isdirty(path):
            return self._cache[path][b'copied']
        else:
            return None

    def flags(self, path):
        if self.isdirty(path):
            if self._cache[path][b'exists']:
                return self._cache[path][b'flags']
            else:
                raise error.ProgrammingError(
                    b"No such file or directory: %s" % path
                )
        else:
            return self._wrappedctx[path].flags()

    def __contains__(self, key):
        if key in self._cache:
            return self._cache[key][b'exists']
        return key in self.p1()

    def _existsinparent(self, path):
        try:
            # ``commitctx` raises a ``ManifestLookupError`` if a path does not
            # exist, unlike ``workingctx``, which returns a ``workingfilectx``
            # with an ``exists()`` function.
            self._wrappedctx[path]
            return True
        except error.ManifestLookupError:
            return False

    def _auditconflicts(self, path):
        """Replicates conflict checks done by wvfs.write().

        Since we never write to the filesystem and never call `applyupdates` in
        IMM, we'll never check that a path is actually writable -- e.g., because
        it adds `a/foo`, but `a` is actually a file in the other commit.
        """

        def fail(path, component):
            # p1() is the base and we're receiving "writes" for p2()'s
            # files.
            if b'l' in self.p1()[component].flags():
                raise error.Abort(
                    b"error: %s conflicts with symlink %s "
                    b"in %d." % (path, component, self.p1().rev())
                )
            else:
                raise error.Abort(
                    b"error: '%s' conflicts with file '%s' in "
                    b"%d." % (path, component, self.p1().rev())
                )

        # Test that each new directory to be created to write this path from p2
        # is not a file in p1.
        components = path.split(b'/')
        for i in range(len(components)):
            component = b"/".join(components[0:i])
            if component in self:
                fail(path, component)
