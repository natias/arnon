    If any file patterns are provided, the refreshed patch will
    contain only the modifications that match those patterns; the
    remaining modifications will remain in the working directory.

    If -s/--short is specified, files currently included in the patch
    will be refreshed just like matched files and remain in the patch.

    If -e/--edit is specified, Mercurial will start your configured editor for
    you to enter a message. In case qrefresh fails, you will find a backup of
    your message in ``.hg/last-message.txt``.

    hg add/remove/copy/rename work as usual, though you might want to
    use git-style patches (-g/--git or [diff] git=1) to track copies
    and renames. See the diffs help topic for more information on the
    git diff format.

    Returns 0 on success.
    """
    opts = pycompat.byteskwargs(opts)
    q = repo.mq
    message = cmdutil.logmessage(ui, opts)
    setupheaderopts(ui, opts)
    with repo.wlock():
        ret = q.refresh(repo, pats, msg=message, **pycompat.strkwargs(opts))
        q.savedirty()
        return ret


@command(
    b"qdiff",
    cmdutil.diffopts + cmdutil.diffopts2 + cmdutil.walkopts,
    _(b'hg qdiff [OPTION]... [FILE]...'),
    helpcategory=command.CATEGORY_FILE_CONTENTS,
    helpbasic=True,
    inferrepo=True,
)
def diff(ui, repo, *pats, **opts):
    """diff of the current patch and subsequent modifications

    Shows a diff which includes the current patch as well as any
    changes which have been made in the working directory since the
    last refresh (thus showing what the current patch would become
    after a qrefresh).

    Use :hg:`diff` if you only want to see the changes made since the
    last qrefresh, or :hg:`export qtip` if you want to see changes
    made by the current patch without including changes made since the
    qrefresh.

    Returns 0 on success.
    """
    ui.pager(b'qdiff')
    repo.mq.diff(repo, pats, pycompat.byteskwargs(opts))
    return 0


@command(
    b'qfold',
    [
        (b'e', b'edit', None, _(b'invoke editor on commit messages')),
        (b'k', b'keep', None, _(b'keep folded patch files')),
    ]
    + cmdutil.commitopts,
    _(b'hg qfold [-e] [-k] [-m TEXT] [-l FILE] PATCH...'),
    helpcategory=command.CATEGORY_CHANGE_MANAGEMENT,
)
def fold(ui, repo, *files, **opts):
    """fold the named patches into the current patch

    Patches must not yet be applied. Each patch will be successively
    applied to the current patch in the order given. If all the
    patches apply successfully, the current patch will be refreshed
    with the new cumulative patch, and the folded patches will be
    deleted. With -k/--keep, the folded patch files will not be
    removed afterwards.

    The header for each folded patch will be concatenated with the
    current patch header, separated by a line of ``* * *``.

    Returns 0 on success."""
    opts = pycompat.byteskwargs(opts)
    q = repo.mq
    if not files:
        raise error.Abort(_(b'qfold requires at least one patch name'))
    if not q.checktoppatch(repo)[0]:
        raise error.Abort(_(b'no patches applied'))
    q.checklocalchanges(repo)

    message = cmdutil.logmessage(ui, opts)

    parent = q.lookup(b'qtip')
    patches = []
    messages = []
    for f in files:
        p = q.lookup(f)
        if p in patches or p == parent:
            ui.warn(_(b'skipping already folded patch %s\n') % p)
        if q.isapplied(p):
            raise error.Abort(
                _(b'qfold cannot fold already applied patch %s') % p
            )
        patches.append(p)

    for p in patches:
        if not message:
            ph = patchheader(q.join(p), q.plainmode)
            if ph.message:
                messages.append(ph.message)
        pf = q.join(p)
        (patchsuccess, files, fuzz) = q.patch(repo, pf)
        if not patchsuccess:
            raise error.Abort(_(b'error folding patch %s') % p)

    if not message:
        ph = patchheader(q.join(parent), q.plainmode)
        message = ph.message
        for msg in messages:
            if msg:
                if message:
                    message.append(b'* * *')
                message.extend(msg)
        message = b'\n'.join(message)

    diffopts = q.patchopts(q.diffopts(), *patches)
    with repo.wlock():
        q.refresh(
            repo,
            msg=message,
            git=diffopts.git,
            edit=opts.get(b'edit'),
            editform=b'mq.qfold',
        )
        q.delete(repo, patches, opts)
        q.savedirty()


@command(
    b"qgoto",
    [
        (
            b'',
            b'keep-changes',
            None,
            _(b'tolerate non-conflicting local changes'),
        ),
        (b'f', b'force', None, _(b'overwrite any local changes')),
        (b'', b'no-backup', None, _(b'do not save backup copies of files')),
    ],
    _(b'hg qgoto [OPTION]... PATCH'),
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
)
def goto(ui, repo, patch, **opts):
    """push or pop patches until named patch is at top of stack

    Returns 0 on success."""
    opts = pycompat.byteskwargs(opts)
    opts = fixkeepchangesopts(ui, opts)
    q = repo.mq
    patch = q.lookup(patch)
    nobackup = opts.get(b'no_backup')
    keepchanges = opts.get(b'keep_changes')
    if q.isapplied(patch):
        ret = q.pop(
            repo,
            patch,
            force=opts.get(b'force'),
            nobackup=nobackup,
            keepchanges=keepchanges,
        )
    else:
        ret = q.push(
            repo,
            patch,
            force=opts.get(b'force'),
            nobackup=nobackup,
            keepchanges=keepchanges,
        )
    q.savedirty()
    return ret


@command(
    b"qguard",
    [
        (b'l', b'list', None, _(b'list all patches and guards')),
        (b'n', b'none', None, _(b'drop all guards')),
    ],
    _(b'hg qguard [-l] [-n] [PATCH] [-- [+GUARD]... [-GUARD]...]'),
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
)
def guard(ui, repo, *args, **opts):
    """set or print guards for a patch

    Guards control whether a patch can be pushed. A patch with no
    guards is always pushed. A patch with a positive guard ("+foo") is
    pushed only if the :hg:`qselect` command has activated it. A patch with
    a negative guard ("-foo") is never pushed if the :hg:`qselect` command
    has activated it.

    With no arguments, print the currently active guards.
    With arguments, set guards for the named patch.

    .. note::

       Specifying negative guards now requires '--'.

    To set guards on another patch::

      hg qguard other.patch -- +2.6.17 -stable

    Returns 0 on success.
    """

    def status(idx):
        guards = q.seriesguards[idx] or [b'unguarded']
        if q.series[idx] in applied:
            state = b'applied'
        elif q.pushable(idx)[0]:
            state = b'unapplied'
        else:
            state = b'guarded'
        label = b'qguard.patch qguard.%s qseries.%s' % (state, state)
        ui.write(b'%s: ' % ui.label(q.series[idx], label))

        for i, guard in enumerate(guards):
            if guard.startswith(b'+'):
                ui.write(guard, label=b'qguard.positive')
            elif guard.startswith(b'-'):
                ui.write(guard, label=b'qguard.negative')
            else:
                ui.write(guard, label=b'qguard.unguarded')
            if i != len(guards) - 1:
                ui.write(b' ')
        ui.write(b'\n')

    q = repo.mq
    applied = {p.name for p in q.applied}
    patch = None
    args = list(args)
    if opts.get('list'):
        if args or opts.get('none'):
            raise error.Abort(
                _(b'cannot mix -l/--list with options or arguments')
            )
        for i in range(len(q.series)):
            status(i)
        return
    if not args or args[0][0:1] in b'-+':
        if not q.applied:
            raise error.Abort(_(b'no patches applied'))
        patch = q.applied[-1].name
    if patch is None and args[0][0:1] not in b'-+':
        patch = args.pop(0)
    if patch is None:
        raise error.Abort(_(b'no patch to work with'))
    if args or opts.get('none'):
        idx = q.findseries(patch)
        if idx is None:
            raise error.Abort(_(b'no patch named %s') % patch)
        q.setguards(idx, args)
        q.savedirty()
    else:
        status(q.series.index(q.lookup(patch)))


@command(
    b"qheader",
    [],
    _(b'hg qheader [PATCH]'),
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
)
def header(ui, repo, patch=None):
    """print the header of the topmost or specified patch

    Returns 0 on success."""
    q = repo.mq

    if patch:
        patch = q.lookup(patch)
    else:
        if not q.applied:
            ui.write(_(b'no patches applied\n'))
            return 1
        patch = q.lookup(b'qtip')
    ph = patchheader(q.join(patch), q.plainmode)

    ui.write(b'\n'.join(ph.message) + b'\n')


def lastsavename(path):
    (directory, base) = os.path.split(path)
    names = os.listdir(directory)
    namere = re.compile(b"%s.([0-9]+)" % base)
    maxindex = None
    maxname = None
    for f in names:
        m = namere.match(f)
        if m:
            index = int(m.group(1))
            if maxindex is None or index > maxindex:
                maxindex = index
                maxname = f
    if maxname:
        return (os.path.join(directory, maxname), maxindex)
    return (None, None)


def savename(path):
    (last, index) = lastsavename(path)
    if last is None:
        index = 0
    newpath = path + b".%d" % (index + 1)
    return newpath


@command(
    b"qpush",
    [
        (
            b'',
            b'keep-changes',
            None,
            _(b'tolerate non-conflicting local changes'),
        ),
        (b'f', b'force', None, _(b'apply on top of local changes')),
        (
            b'e',
            b'exact',
            None,
            _(b'apply the target patch to its recorded parent'),
        ),
        (b'l', b'list', None, _(b'list patch name in commit text')),
        (b'a', b'all', None, _(b'apply all patches')),
        (b'm', b'merge', None, _(b'merge from another queue (DEPRECATED)')),
        (b'n', b'name', b'', _(b'merge queue name (DEPRECATED)'), _(b'NAME')),
        (
            b'',
            b'move',
            None,
            _(b'reorder patch series and apply only the patch'),
        ),
        (b'', b'no-backup', None, _(b'do not save backup copies of files')),
    ],
    _(b'hg qpush [-f] [-l] [-a] [--move] [PATCH | INDEX]'),
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
    helpbasic=True,
)
def push(ui, repo, patch=None, **opts):
    """push the next patch onto the stack

    By default, abort if the working directory contains uncommitted
    changes. With --keep-changes, abort only if the uncommitted files
    overlap with patched files. With -f/--force, backup and patch over
    uncommitted changes.

    Return 0 on success.
    """
    q = repo.mq
    mergeq = None

    opts = pycompat.byteskwargs(opts)
    opts = fixkeepchangesopts(ui, opts)
    if opts.get(b'merge'):
        if opts.get(b'name'):
            newpath = repo.vfs.join(opts.get(b'name'))
        else:
            newpath, i = lastsavename(q.path)
        if not newpath:
            ui.warn(_(b"no saved queues found, please use -n\n"))
            return 1
        mergeq = queue(ui, repo.baseui, repo.path, newpath)
        ui.warn(_(b"merging with queue at: %s\n") % mergeq.path)
    ret = q.push(
        repo,
        patch,
        force=opts.get(b'force'),
        list=opts.get(b'list'),
        mergeq=mergeq,
        all=opts.get(b'all'),
        move=opts.get(b'move'),
        exact=opts.get(b'exact'),
        nobackup=opts.get(b'no_backup'),
        keepchanges=opts.get(b'keep_changes'),
    )
    return ret


@command(
    b"qpop",
    [
        (b'a', b'all', None, _(b'pop all patches')),
        (b'n', b'name', b'', _(b'queue name to pop (DEPRECATED)'), _(b'NAME')),
        (
            b'',
            b'keep-changes',
            None,
            _(b'tolerate non-conflicting local changes'),
        ),
        (b'f', b'force', None, _(b'forget any local changes to patched files')),
        (b'', b'no-backup', None, _(b'do not save backup copies of files')),
    ],
    _(b'hg qpop [-a] [-f] [PATCH | INDEX]'),
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
    helpbasic=True,
)
def pop(ui, repo, patch=None, **opts):
    """pop the current patch off the stack

    Without argument, pops off the top of the patch stack. If given a
    patch name, keeps popping off patches until the named patch is at
    the top of the stack.

    By default, abort if the working directory contains uncommitted
    changes. With --keep-changes, abort only if the uncommitted files
    overlap with patched files. With -f/--force, backup and discard
    changes made to such files.

    Return 0 on success.
    """
    opts = pycompat.byteskwargs(opts)
    opts = fixkeepchangesopts(ui, opts)
    localupdate = True
    if opts.get(b'name'):
        q = queue(ui, repo.baseui, repo.path, repo.vfs.join(opts.get(b'name')))
        ui.warn(_(b'using patch queue: %s\n') % q.path)
        localupdate = False
    else:
        q = repo.mq
    ret = q.pop(
        repo,
        patch,
        force=opts.get(b'force'),
        update=localupdate,
        all=opts.get(b'all'),
        nobackup=opts.get(b'no_backup'),
        keepchanges=opts.get(b'keep_changes'),
    )
    q.savedirty()
    return ret


@command(
    b"qrename|qmv",
    [],
    _(b'hg qrename PATCH1 [PATCH2]'),
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
)
def rename(ui, repo, patch, name=None, **opts):
    """rename a patch

    With one argument, renames the current patch to PATCH1.
    With two arguments, renames PATCH1 to PATCH2.

    Returns 0 on success."""
    q = repo.mq
    if not name:
        name = patch
        patch = None

    if patch:
        patch = q.lookup(patch)
    else:
        if not q.applied:
            ui.write(_(b'no patches applied\n'))
            return
        patch = q.lookup(b'qtip')
    absdest = q.join(name)
    if os.path.isdir(absdest):
        name = normname(os.path.join(name, os.path.basename(patch)))
        absdest = q.join(name)
    q.checkpatchname(name)

    ui.note(_(b'renaming %s to %s\n') % (patch, name))
    i = q.findseries(patch)
    guards = q.guard_re.findall(q.fullseries[i])
    q.fullseries[i] = name + b''.join([b' #' + g for g in guards])
    q.parseseries()
    q.seriesdirty = True

    info = q.isapplied(patch)
    if info:
        q.applied[info[0]] = statusentry(info[1], name)
    q.applieddirty = True

    destdir = os.path.dirname(absdest)
    if not os.path.isdir(destdir):
        os.makedirs(destdir)
    util.rename(q.join(patch), absdest)
    r = q.qrepo()
    if r and patch in r.dirstate:
        wctx = r[None]
        with r.wlock():
            if r.dirstate.get_entry(patch).added:
                r.dirstate.set_untracked(patch)
                r.dirstate.set_tracked(name)
            else:
                wctx.copy(patch, name)
                wctx.forget([patch])

    q.savedirty()


@command(
    b"qrestore",
    [
        (b'd', b'delete', None, _(b'delete save entry')),
        (b'u', b'update', None, _(b'update queue working directory')),
    ],
    _(b'hg qrestore [-d] [-u] REV'),
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
)
def restore(ui, repo, rev, **opts):
    """restore the queue state saved by a revision (DEPRECATED)

    This command is deprecated, use :hg:`rebase` instead."""
    rev = repo.lookup(rev)
    q = repo.mq
    q.restore(repo, rev, delete=opts.get('delete'), qupdate=opts.get('update'))
    q.savedirty()
    return 0


@command(
    b"qsave",
    [
        (b'c', b'copy', None, _(b'copy patch directory')),
        (b'n', b'name', b'', _(b'copy directory name'), _(b'NAME')),
        (b'e', b'empty', None, _(b'clear queue status file')),
        (b'f', b'force', None, _(b'force copy')),
    ]
    + cmdutil.commitopts,
    _(b'hg qsave [-m TEXT] [-l FILE] [-c] [-n NAME] [-e] [-f]'),
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
)
def save(ui, repo, **opts):
    """save current queue state (DEPRECATED)

    This command is deprecated, use :hg:`rebase` instead."""
    q = repo.mq
    opts = pycompat.byteskwargs(opts)
    message = cmdutil.logmessage(ui, opts)
    ret = q.save(repo, msg=message)
    if ret:
        return ret
    q.savedirty()  # save to .hg/patches before copying
    if opts.get(b'copy'):
        path = q.path
        if opts.get(b'name'):
            newpath = os.path.join(q.basepath, opts.get(b'name'))
            if os.path.exists(newpath):
                if not os.path.isdir(newpath):
                    raise error.Abort(
                        _(b'destination %s exists and is not a directory')
                        % newpath
                    )
                if not opts.get(b'force'):
                    raise error.Abort(
                        _(b'destination %s exists, use -f to force') % newpath
                    )
        else:
            newpath = savename(path)
        ui.warn(_(b"copy %s to %s\n") % (path, newpath))
        util.copyfiles(path, newpath)
    if opts.get(b'empty'):
        del q.applied[:]
        q.applieddirty = True
        q.savedirty()
    return 0


@command(
    b"qselect",
    [
        (b'n', b'none', None, _(b'disable all guards')),
        (b's', b'series', None, _(b'list all guards in series file')),
        (b'', b'pop', None, _(b'pop to before first guarded applied patch')),
        (b'', b'reapply', None, _(b'pop, then reapply patches')),
    ],
    _(b'hg qselect [OPTION]... [GUARD]...'),
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
)
def select(ui, repo, *args, **opts):
    """set or print guarded patches to push

    Use the :hg:`qguard` command to set or print guards on patch, then use
    qselect to tell mq which guards to use. A patch will be pushed if
    it has no guards or any positive guards match the currently
    selected guard, but will not be pushed if any negative guards
    match the current guard. For example::

        qguard foo.patch -- -stable    (negative guard)
        qguard bar.patch    +stable    (positive guard)
        qselect stable

    This activates the "stable" guard. mq will skip foo.patch (because
    it has a negative match) but push bar.patch (because it has a
    positive match).

    With no arguments, prints the currently active guards.
    With one argument, sets the active guard.

    Use -n/--none to deactivate guards (no other arguments needed).
    When no guards are active, patches with positive guards are
    skipped and patches with negative guards are pushed.

    qselect can change the guards on applied patches. It does not pop
    guarded patches by default. Use --pop to pop back to the last
    applied patch that is not guarded. Use --reapply (which implies
    --pop) to push back to the current patch afterwards, but skip
    guarded patches.

    Use -s/--series to print a list of all guards in the series file
    (no other arguments needed). Use -v for more information.

    Returns 0 on success."""

    q = repo.mq
    opts = pycompat.byteskwargs(opts)
    guards = q.active()
    pushable = lambda i: q.pushable(q.applied[i].name)[0]
    if args or opts.get(b'none'):
        old_unapplied = q.unapplied(repo)
        old_guarded = [i for i in range(len(q.applied)) if not pushable(i)]
        q.setactive(args)
        q.savedirty()
        if not args:
            ui.status(_(b'guards deactivated\n'))
        if not opts.get(b'pop') and not opts.get(b'reapply'):
            unapplied = q.unapplied(repo)
            guarded = [i for i in range(len(q.applied)) if not pushable(i)]
            if len(unapplied) != len(old_unapplied):
                ui.status(
                    _(
                        b'number of unguarded, unapplied patches has '
                        b'changed from %d to %d\n'
                    )
                    % (len(old_unapplied), len(unapplied))
                )
            if len(guarded) != len(old_guarded):
                ui.status(
                    _(
                        b'number of guarded, applied patches has changed '
                        b'from %d to %d\n'
                    )
                    % (len(old_guarded), len(guarded))
                )
    elif opts.get(b'series'):
        guards = {}
        noguards = 0
        for gs in q.seriesguards:
            if not gs:
                noguards += 1
            for g in gs:
                guards.setdefault(g, 0)
                guards[g] += 1
        if ui.verbose:
            guards[b'NONE'] = noguards
        guards = list(guards.items())
        guards.sort(key=lambda x: x[0][1:])
        if guards:
            ui.note(_(b'guards in series file:\n'))
            for guard, count in guards:
                ui.note(b'%2d  ' % count)
                ui.write(guard, b'\n')
        else:
            ui.note(_(b'no guards in series file\n'))
    else:
        if guards:
            ui.note(_(b'active guards:\n'))
            for g in guards:
                ui.write(g, b'\n')
        else:
            ui.write(_(b'no active guards\n'))
    reapply = opts.get(b'reapply') and q.applied and q.applied[-1].name
    popped = False
    if opts.get(b'pop') or opts.get(b'reapply'):
        for i in range(len(q.applied)):
            if not pushable(i):
                ui.status(_(b'popping guarded patches\n'))
                popped = True
                if i == 0:
                    q.pop(repo, all=True)
                else:
                    q.pop(repo, q.applied[i - 1].name)
                break
    if popped:
        try:
            if reapply:
                ui.status(_(b'reapplying unguarded patches\n'))
                q.push(repo, reapply)
        finally:
            q.savedirty()


@command(
    b"qfinish",
    [(b'a', b'applied', None, _(b'finish all applied changesets'))],
    _(b'hg qfinish [-a] [REV]...'),
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
)
def finish(ui, repo, *revrange, **opts):
    """move applied patches into repository history

    Finishes the specified revisions (corresponding to applied
    patches) by moving them out of mq control into regular repository
    history.

    Accepts a revision range or the -a/--applied option. If --applied
    is specified, all applied mq revisions are removed from mq
    control. Otherwise, the given revisions must be at the base of the
    stack of applied patches.

    This can be especially useful if your changes have been applied to
    an upstream repository, or if you are about to push your changes
    to upstream.

    Returns 0 on success.
    """
    if not opts.get('applied') and not revrange:
        raise error.Abort(_(b'no revisions specified'))
    elif opts.get('applied'):
        revrange = (b'qbase::qtip',) + revrange

    q = repo.mq
    if not q.applied:
        ui.status(_(b'no patches applied\n'))
        return 0

    revs = logcmdutil.revrange(repo, revrange)
    if repo[b'.'].rev() in revs and repo[None].files():
        ui.warn(_(b'warning: uncommitted changes in the working directory\n'))
    # queue.finish may changes phases but leave the responsibility to lock the
    # repo to the caller to avoid deadlock with wlock. This command code is
    # responsibility for this locking.
    with repo.lock():
        q.finish(repo, revs)
        q.savedirty()
    return 0


@command(
    b"qqueue",
    [
        (b'l', b'list', False, _(b'list all available queues')),
        (b'', b'active', False, _(b'print name of active queue')),
        (b'c', b'create', False, _(b'create new queue')),
        (b'', b'rename', False, _(b'rename active queue')),
        (b'', b'delete', False, _(b'delete reference to queue')),
        (b'', b'purge', False, _(b'delete queue, and remove patch dir')),
    ],
    _(b'[OPTION] [QUEUE]'),
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
)
def qqueue(ui, repo, name=None, **opts):
    """manage multiple patch queues

    Supports switching between different patch queues, as well as creating
    new patch queues and deleting existing ones.

    Omitting a queue name or specifying -l/--list will show you the registered
    queues - by default the "normal" patches queue is registered. The currently
    active queue will be marked with "(active)". Specifying --active will print
    only the name of the active queue.

    To create a new queue, use -c/--create. The queue is automatically made
    active, except in the case where there are applied patches from the
    currently active queue in the repository. Then the queue will only be
    created and switching will fail.

    To delete an existing queue, use --delete. You cannot delete the currently
    active queue.

    Returns 0 on success.
    """
    q = repo.mq
    _defaultqueue = b'patches'
    _allqueues = b'patches.queues'
    _activequeue = b'patches.queue'

    def _getcurrent():
        cur = os.path.basename(q.path)
        if cur.startswith(b'patches-'):
            cur = cur[8:]
        return cur

    def _noqueues():
        try:
            fh = repo.vfs(_allqueues, b'r')
            fh.close()
        except IOError:
            return True

        return False

    def _getqueues():
        current = _getcurrent()

        try:
            fh = repo.vfs(_allqueues, b'r')
            queues = [queue.strip() for queue in fh if queue.strip()]
            fh.close()
            if current not in queues:
                queues.append(current)
        except IOError:
            queues = [_defaultqueue]

        return sorted(queues)

    def _setactive(name):
        if q.applied:
            raise error.Abort(
                _(
                    b'new queue created, but cannot make active '
                    b'as patches are applied'
                )
            )
        _setactivenocheck(name)

    def _setactivenocheck(name):
        fh = repo.vfs(_activequeue, b'w')
        if name != b'patches':
            fh.write(name)
        fh.close()

    def _addqueue(name):
        fh = repo.vfs(_allqueues, b'a')
        fh.write(b'%s\n' % (name,))
        fh.close()

    def _queuedir(name):
        if name == b'patches':
            return repo.vfs.join(b'patches')
        else:
            return repo.vfs.join(b'patches-' + name)

    def _validname(name):
        for n in name:
            if n in b':\\/.':
                return False
        return True

    def _delete(name):
        if name not in existing:
            raise error.Abort(_(b'cannot delete queue that does not exist'))

        current = _getcurrent()

        if name == current:
            raise error.Abort(_(b'cannot delete currently active queue'))

        fh = repo.vfs(b'patches.queues.new', b'w')
        for queue in existing:
            if queue == name:
                continue
            fh.write(b'%s\n' % (queue,))
        fh.close()
        repo.vfs.rename(b'patches.queues.new', _allqueues)

    opts = pycompat.byteskwargs(opts)
    if not name or opts.get(b'list') or opts.get(b'active'):
        current = _getcurrent()
        if opts.get(b'active'):
            ui.write(b'%s\n' % (current,))
            return
        for queue in _getqueues():
            ui.write(b'%s' % (queue,))
            if queue == current and not ui.quiet:
                ui.write(_(b' (active)\n'))
            else:
                ui.write(b'\n')
        return

    if not _validname(name):
        raise error.Abort(
            _(b'invalid queue name, may not contain the characters ":\\/."')
        )

    with repo.wlock():
        existing = _getqueues()

        if opts.get(b'create'):
            if name in existing:
                raise error.Abort(_(b'queue "%s" already exists') % name)
            if _noqueues():
                _addqueue(_defaultqueue)
            _addqueue(name)
            _setactive(name)
        elif opts.get(b'rename'):
            current = _getcurrent()
            if name == current:
                raise error.Abort(
                    _(b'can\'t rename "%s" to its current name') % name
                )
            if name in existing:
                raise error.Abort(_(b'queue "%s" already exists') % name)

            olddir = _queuedir(current)
            newdir = _queuedir(name)

            if os.path.exists(newdir):
                raise error.Abort(
                    _(b'non-queue directory "%s" already exists') % newdir
                )

            fh = repo.vfs(b'patches.queues.new', b'w')
            for queue in existing:
                if queue == current:
                    fh.write(b'%s\n' % (name,))
                    if os.path.exists(olddir):
                        util.rename(olddir, newdir)
                else:
                    fh.write(b'%s\n' % (queue,))
            fh.close()
            repo.vfs.rename(b'patches.queues.new', _allqueues)
            _setactivenocheck(name)
        elif opts.get(b'delete'):
            _delete(name)
        elif opts.get(b'purge'):
            if name in existing:
                _delete(name)
            qdir = _queuedir(name)
            if os.path.exists(qdir):
                shutil.rmtree(qdir)
        else:
            if name not in existing:
                raise error.Abort(_(b'use --create to create a new queue'))
            _setactive(name)


def mqphasedefaults(repo, roots):
    """callback used to set mq changeset as secret when no phase data exists"""
    if repo.mq.applied:
        if repo.ui.configbool(b'mq', b'secret'):
            mqphase = phases.secret
        else:
            mqphase = phases.draft
        qbase = repo[repo.mq.applied[0].node]
        roots[mqphase].add(qbase.node())
    return roots


def reposetup(ui, repo):
    class mqrepo(repo.__class__):
        @localrepo.unfilteredpropertycache
        def mq(self):
            return queue(self.ui, self.baseui, self.path)

        def invalidateall(self):
            super(mqrepo, self).invalidateall()
            if localrepo.hasunfilteredcache(self, 'mq'):
                # recreate mq in case queue path was changed
                delattr(self.unfiltered(), 'mq')

        def abortifwdirpatched(self, errmsg, force=False):
            if self.mq.applied and self.mq.checkapplied and not force:
                parents = self.dirstate.parents()
                patches = [s.node for s in self.mq.applied]
                if any(p in patches for p in parents):
                    raise error.Abort(errmsg)

        def commit(
            self,
            text=b"",
            user=None,
            date=None,
            match=None,
            force=False,
            editor=False,
            extra=None,
        ):
            if extra is None:
                extra = {}
            self.abortifwdirpatched(
                _(b'cannot commit over an applied mq patch'), force
            )

            return super(mqrepo, self).commit(
                text, user, date, match, force, editor, extra
            )

        def checkpush(self, pushop):
            if self.mq.applied and self.mq.checkapplied and not pushop.force:
                outapplied = [e.node for e in self.mq.applied]
                if pushop.revs:
                    # Assume applied patches have no non-patch descendants and
                    # are not on remote already. Filtering any changeset not
                    # pushed.
                    heads = set(pushop.revs)
                    for node in reversed(outapplied):
                        if node in heads:
                            break
                        else:
                            outapplied.pop()
                # looking for pushed and shared changeset
                for node in outapplied:
                    if self[node].phase() < phases.secret:
                        raise error.Abort(_(b'source has mq patches applied'))
                # no non-secret patches pushed
            super(mqrepo, self).checkpush(pushop)

