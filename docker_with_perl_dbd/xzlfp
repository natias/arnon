=over 3

 void  SvNOK_off(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvNOK_on>
X<SvNOK_on>

Tells an SV that it is a double.

=over 3

 void  SvNOK_on(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvNOK_only>
X<SvNOK_only>

Tells an SV that it is a double and disables all other OK bits.

=over 3

 void  SvNOK_only(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvNOKp>
X<SvNOKp>

Returns a U32 value indicating whether the SV contains a double.  Checks the
B<private> setting.  Use C<SvNOK> instead.

=over 3

 U32  SvNOKp(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_nolocking>
X<sv_nolocking>

C<B<DEPRECATED!>>  It is planned to remove C<sv_nolocking>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

Dummy routine which "locks" an SV when there is no locking module present.
Exists to avoid test for a C<NULL> function pointer and because it could
potentially warn under some level of strict-ness.

"Superseded" by C<sv_nosharing()>.

=over 3

 void  sv_nolocking(SV *sv)

=back

=back

=for hackers
Found in file mathoms.c

=over 4

=item C<sv_nounlocking>
X<sv_nounlocking>

C<B<DEPRECATED!>>  It is planned to remove C<sv_nounlocking>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

Dummy routine which "unlocks" an SV when there is no locking module present.
Exists to avoid test for a C<NULL> function pointer and because it could
potentially warn under some level of strict-ness.

"Superseded" by C<sv_nosharing()>.

=over 3

 void  sv_nounlocking(SV *sv)

=back

=back

=for hackers
Found in file mathoms.c

=over 4

=item C<sv_numeq>
X<sv_numeq>

A convenient shortcut for calling C<sv_numeq_flags> with the C<SV_GMAGIC>
flag. This function basically behaves like the Perl code C<$sv1 == $sv2>.

=over 3

 bool  sv_numeq(SV *sv1, SV *sv2)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_numeq_flags>
X<sv_numeq_flags>

Returns a boolean indicating whether the numbers in the two SVs are
identical. If the flags argument has the C<SV_GMAGIC> bit set, it handles
get-magic too. Will coerce its args to numbers if necessary. Treats
C<NULL> as undef.

If flags does not have the C<SV_SKIP_OVERLOAD> bit set, an attempt to use
C<==> overloading will be made. If such overloading does not exist or the
flag is set, then regular numerical comparison will be used instead.

=over 3

 bool  sv_numeq_flags(SV *sv1, SV *sv2, const U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvNV>

=item C<SvNV_nomg>

=item C<SvNVx>
X<SvNV>X<SvNV_nomg>X<SvNVx>

These each coerce the given SV to NV and return it.  The returned value in many
circumstances will get stored in C<sv>'s NV slot, but not in all cases.  (Use
C<L</sv_setnv>> to make sure it does).

As of 5.37.1, all are guaranteed to evaluate C<sv> only once.

C<SvNVx> is now identical to C<SvNV>, but prior to 5.37.1, it was the only form
guaranteed to evaluate C<sv> only once.

C<SvNV_nomg> is the same as C<SvNV>, but does not perform 'get' magic.

=over 3

 NV  SvNV(SV *sv)

=back

=back

=for hackers
Found in file sv_inline.h

=over 4

=item C<sv_2nv_flags>
X<sv_2nv_flags>

Return the num value of an SV, doing any necessary string or integer
conversion.  If C<flags> has the C<SV_GMAGIC> bit set, does an C<mg_get()> first.
Normally used via the C<SvNV(sv)> and C<SvNVx(sv)> macros.

=over 3

 NV  sv_2nv_flags(SV * const sv, const I32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvNV_set>
X<SvNV_set>

Set the value of the NV pointer in C<sv> to val.  See C<L</SvIV_set>>.

=over 3

 void  SvNV_set(SV* sv, NV val)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvNVX>
X<SvNVX>

Returns the raw value in the SV's NV slot, without checks or conversions.
Only use when you are sure C<SvNOK> is true.  See also C<L</SvNV>>.

=over 3

 NV  SvNVX(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvOK>
X<SvOK>

Returns a U32 value indicating whether the value is defined.  This is
only meaningful for scalars.

=over 3

 U32  SvOK(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvOOK>
X<SvOOK>

Returns a U32 indicating whether the pointer to the string buffer is offset.
This hack is used internally to speed up removal of characters from the
beginning of a C<L</SvPV>>.  When C<SvOOK> is true, then the start of the
allocated string buffer is actually C<SvOOK_offset()> bytes before C<SvPVX>.
This offset used to be stored in C<SvIVX>, but is now stored within the spare
part of the buffer.

=over 3

 U32  SvOOK(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvOOK_off>
X<SvOOK_off>

Remove any string offset.

=over 3

 void  SvOOK_off(SV * sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvOOK_offset>
X<SvOOK_offset>

Reads into C<len> the offset from C<SvPVX> back to the true start of the
allocated buffer, which will be non-zero if C<sv_chop> has been used to
efficiently remove characters from start of the buffer.  Implemented as a
macro, which takes the address of C<len>, which must be of type C<STRLEN>.
Evaluates C<sv> more than once.  Sets C<len> to 0 if C<SvOOK(sv)> is false.

=over 3

 void  SvOOK_offset(SV*sv, STRLEN len)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvPOK>
X<SvPOK>

Returns a U32 value indicating whether the SV contains a character
string.

=over 3

 U32  SvPOK(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvPOK_off>
X<SvPOK_off>

Unsets the PV status of an SV.

=over 3

 void  SvPOK_off(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvPOK_on>
X<SvPOK_on>

Tells an SV that it is a string.

=over 3

 void  SvPOK_on(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvPOK_only>
X<SvPOK_only>

Tells an SV that it is a string and disables all other C<OK> bits.
Will also turn off the UTF-8 status.

=over 3

 void  SvPOK_only(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvPOK_only_UTF8>
X<SvPOK_only_UTF8>

Tells an SV that it is a string and disables all other C<OK> bits,
and leaves the UTF-8 status as it was.

=over 3

 void  SvPOK_only_UTF8(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvPOKp>
X<SvPOKp>

Returns a U32 value indicating whether the SV contains a character string.
Checks the B<private> setting.  Use C<SvPOK> instead.

=over 3

 U32  SvPOKp(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_pos_b2u>
X<sv_pos_b2u>

Converts the value pointed to by C<offsetp> from a count of bytes from the
start of the string, to a count of the equivalent number of UTF-8 chars.
Handles magic and type coercion.

Use C<sv_pos_b2u_flags> in preference, which correctly handles strings
longer than 2Gb.

=over 3

 void  sv_pos_b2u(SV * const sv, I32 * const offsetp)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_pos_b2u_flags>
X<sv_pos_b2u_flags>

Converts C<offset> from a count of bytes from the start of the string, to
a count of the equivalent number of UTF-8 chars.  Handles type coercion.
C<flags> is passed to C<SvPV_flags>, and usually should be
C<SV_GMAGIC|SV_CONST_RETURN> to handle magic.

=over 3

 STRLEN  sv_pos_b2u_flags(SV * const sv, STRLEN const offset,
                          U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_pos_u2b>
X<sv_pos_u2b>

Converts the value pointed to by C<offsetp> from a count of UTF-8 chars from
the start of the string, to a count of the equivalent number of bytes; if
C<lenp> is non-zero, it does the same to C<lenp>, but this time starting from
the offset, rather than from the start of the string.  Handles magic and
type coercion.

Use C<sv_pos_u2b_flags> in preference, which correctly handles strings longer
than 2Gb.

=over 3

 void  sv_pos_u2b(SV * const sv, I32 * const offsetp,
                  I32 * const lenp)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_pos_u2b_flags>
X<sv_pos_u2b_flags>

Converts the offset from a count of UTF-8 chars from
the start of the string, to a count of the equivalent number of bytes; if
C<lenp> is non-zero, it does the same to C<lenp>, but this time starting from
C<offset>, rather than from the start
of the string.  Handles type coercion.
C<flags> is passed to C<SvPV_flags>, and usually should be
C<SV_GMAGIC|SV_CONST_RETURN> to handle magic.

=over 3

 STRLEN  sv_pos_u2b_flags(SV * const sv, STRLEN uoffset,
                          STRLEN * const lenp, U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvPV>

=item C<SvPV_const>

=item C<SvPV_flags>

=item C<SvPV_flags_const>

=item C<SvPV_flags_mutable>

=item C<SvPV_mutable>

=item C<SvPV_nolen>

=item C<SvPV_nolen_const>

=item C<SvPV_nomg>

=item C<SvPV_nomg_const>

=item C<SvPV_nomg_const_nolen>

=item C<SvPV_nomg_nolen>

=item C<SvPVbyte>

=item C<SvPVbyte_nolen>

=item C<SvPVbyte_nomg>

=item C<SvPVbyte_or_null>

=item C<SvPVbyte_or_null_nomg>

=item C<SvPVbytex>

=item C<SvPVbytex_nolen>

=item C<SvPVutf8>

=item C<SvPVutf8_nolen>

=item C<SvPVutf8_nomg>

=item C<SvPVutf8_or_null>

=item C<SvPVutf8_or_null_nomg>

=item C<SvPVutf8x>

=item C<SvPVx>

=item C<SvPVx_const>

=item C<SvPVx_nolen>

=item C<SvPVx_nolen_const>
X<SvPV>X<SvPV_const>X<SvPV_flags>X<SvPV_flags_const>X<SvPV_flags_mutable>X<SvPV_mutable>X<SvPV_nolen>X<SvPV_nolen_const>X<SvPV_nomg>X<SvPV_nomg_const>X<SvPV_nomg_const_nolen>X<SvPV_nomg_nolen>X<SvPVbyte>X<SvPVbyte_nolen>X<SvPVbyte_nomg>X<SvPVbyte_or_null>X<SvPVbyte_or_null_nomg>X<SvPVbytex>X<SvPVbytex_nolen>X<SvPVutf8>X<SvPVutf8_nolen>X<SvPVutf8_nomg>X<SvPVutf8_or_null>X<SvPVutf8_or_null_nomg>X<SvPVutf8x>X<SvPVx>X<SvPVx_const>X<SvPVx_nolen>X<SvPVx_nolen_const>

These each return a pointer to the string in C<sv>, or a stringified form of
C<sv> if it does not contain a string.  The SV may cache the stringified
version becoming C<SvPOK>.

This is a very basic and common operation, so there are lots of slightly
different versions of it.

Note that there is no guarantee that the return value of C<SvPV(sv)>, for
example, is equal to C<SvPVX(sv)>, or that C<SvPVX(sv)> contains valid data, or
that successive calls to C<SvPV(sv)> (or another of these forms) will return
the same pointer value each time.  This is due to the way that things like
overloading and Copy-On-Write are handled.  In these cases, the return value
may point to a temporary buffer or similar.  If you absolutely need the
C<SvPVX> field to be valid (for example, if you intend to write to it), then
see C<L</SvPV_force>>.

The differences between the forms are:

The forms with neither C<byte> nor C<utf8> in their names (e.g., C<SvPV> or
C<SvPV_nolen>) can expose the SV's internal string buffer. If
that buffer consists entirely of bytes 0-255 and includes any bytes above
127, then you B<MUST> consult C<SvUTF8> to determine the actual code points
the string is meant to contain. Generally speaking, it is probably safer to
prefer C<SvPVbyte>, C<SvPVutf8>, and the like. See
L<perlguts/How do I pass a Perl string to a C library?> for more details.

The forms with C<flags> in their names allow you to use the C<flags> parameter
to specify to process 'get' magic (by setting the C<SV_GMAGIC> flag) or to skip
'get' magic (by clearing it).  The other forms process 'get' magic, except for
the ones with C<nomg> in their names, which skip 'get' magic.

The forms that take a C<len> parameter will set that variable to the byte
length of the resultant string (these are macros, so don't use C<&len>).

The forms with C<nolen> in their names indicate they don't have a C<len>
parameter.  They should be used only when it is known that the PV is a C
string, terminated by a NUL byte, and without intermediate NUL characters; or
when you don't care about its length.

The forms with C<const> in their names return S<C<const char *>> so that the
compiler will hopefully complain if you were to try to modify the contents of
the string (unless you cast away const yourself).

The other forms return a mutable pointer so that the string is modifiable by
the caller; this is emphasized for the ones with C<mutable> in their names.

As of 5.38, all forms are guaranteed to evaluate C<sv> exactly once.  For
earlier Perls, use a form whose name ends with C<x> for single evaluation.

C<SvPVutf8> is like C<SvPV>, but converts C<sv> to UTF-8 first if not already
UTF-8.  Similarly, the other forms with C<utf8> in their names correspond to
their respective forms without.

C<SvPVutf8_or_null> and C<SvPVutf8_or_null_nomg> don't have corresponding
non-C<utf8> forms.  Instead they are like C<SvPVutf8_nomg>, but when C<sv> is
undef, they return C<NULL>.

C<SvPVbyte> is like C<SvPV>, but converts C<sv> to byte representation first if
currently encoded as UTF-8.  If C<sv> cannot be downgraded from UTF-8, it
croaks.  Similarly, the other forms with C<byte> in their names correspond to
their respective forms without.

C<SvPVbyte_or_null> doesn't have a corresponding non-C<byte> form.  Instead it
is like C<SvPVbyte>, but when C<sv> is undef, it returns C<NULL>.

=over 3

 char*        SvPV                 (SV* sv, STRLEN len)
 const char*  SvPV_const           (SV* sv, STRLEN len)
 char*        SvPV_flags           (SV* sv, STRLEN len, U32 flags)
 const char*  SvPV_flags_const     (SV* sv, STRLEN len, U32 flags)
 char*        SvPV_flags_mutable   (SV* sv, STRLEN len, U32 flags)
 char*        SvPV_mutable         (SV* sv, STRLEN len)
 char*        SvPV_nolen           (SV* sv)
 const char*  SvPV_nolen_const     (SV* sv)
 char*        SvPV_nomg            (SV* sv, STRLEN len)
 const char*  SvPV_nomg_const      (SV* sv, STRLEN len)
 const char*  SvPV_nomg_const_nolen(SV* sv)
 char*        SvPV_nomg_nolen      (SV* sv)
 char*        SvPVbyte             (SV* sv, STRLEN len)
 char*        SvPVbyte_nolen       (SV* sv)
 char*        SvPVbyte_nomg        (SV* sv, STRLEN len)
 char*        SvPVbyte_or_null     (SV* sv, STRLEN len)
 char*        SvPVbyte_or_null_nomg(SV* sv, STRLEN len)
 char*        SvPVbytex            (SV* sv, STRLEN len)
 char*        SvPVbytex_nolen      (SV* sv)
 char*        SvPVutf8             (SV* sv, STRLEN len)
 char*        SvPVutf8_nolen       (SV* sv)
 char*        SvPVutf8_nomg        (SV* sv, STRLEN len)
 char*        SvPVutf8_or_null     (SV* sv, STRLEN len)
 char*        SvPVutf8_or_null_nomg(SV* sv, STRLEN len)
 char*        SvPVutf8x            (SV* sv, STRLEN len)
 char*        SvPVx                (SV* sv, STRLEN len)
 const char*  SvPVx_const          (SV* sv, STRLEN len)
 char*        SvPVx_nolen          (SV* sv)
 const char*  SvPVx_nolen_const    (SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_2pv>

=item C<sv_2pv_flags>
X<sv_2pv>X<sv_2pv_flags>

These implement the various forms of the L<perlapi/C<SvPV>> macros.
The macros are the preferred interface.

These return a pointer to the string value of an SV (coercing it to a string if
necessary), and set C<*lp> to its length in bytes.

The forms differ in that plain C<sv_2pvbyte> always processes 'get' magic; and
C<sv_2pvbyte_flags> processes 'get' magic if and only if C<flags> contains
C<SV_GMAGIC>.

=over 3

 char *  sv_2pv      (SV *sv, STRLEN *lp)
 char *  sv_2pv_flags(SV * const sv, STRLEN * const lp,
                      const U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_2pvbyte>

=item C<sv_2pvbyte_flags>
X<sv_2pvbyte>X<sv_2pvbyte_flags>

These implement the various forms of the L<perlapi/C<SvPVbyte>> macros.
The macros are the preferred interface.

These return a pointer to the byte-encoded representation of the SV, and set
C<*lp> to its length.  If the SV is marked as being encoded as UTF-8, it will
be downgraded, if possible, to a byte string.  If the SV cannot be downgraded,
they croak.

The forms differ in that plain C<sv_2pvbyte> always processes 'get' magic; and
C<sv_2pvbyte_flags> processes 'get' magic if and only if C<flags> contains
C<SV_GMAGIC>.

=over 3

 char *  sv_2pvbyte      (SV *sv, STRLEN * const lp)
 char *  sv_2pvbyte_flags(SV *sv, STRLEN * const lp,
                          const U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvPVCLEAR>
X<SvPVCLEAR>

Ensures that sv is a SVt_PV and that its SvCUR is 0, and that it is
properly null terminated. Equivalent to sv_setpvs(""), but more efficient.

=over 3

 char *  SvPVCLEAR(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvPVCLEAR_FRESH>
X<SvPVCLEAR_FRESH>

Like SvPVCLEAR, but optimized for newly-minted SVt_PV/PVIV/PVNV/PVMG
that already have a PV buffer allocated, but no SvTHINKFIRST.

=over 3

 char *  SvPVCLEAR_FRESH(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvPV_force>

=item C<SvPV_force_flags>

=item C<SvPV_force_flags_mutable>

=item C<SvPV_force_flags_nolen>

=item C<SvPV_force_mutable>

=item C<SvPV_force_nolen>

=item C<SvPV_force_nomg>

=item C<SvPV_force_nomg_nolen>

=item C<SvPVbyte_force>

=item C<SvPVbytex_force>

=item C<SvPVutf8_force>

=item C<SvPVutf8x_force>

=item C<SvPVx_force>
X<SvPV_force>X<SvPV_force_flags>X<SvPV_force_flags_mutable>X<SvPV_force_flags_nolen>X<SvPV_force_mutable>X<SvPV_force_nolen>X<SvPV_force_nomg>X<SvPV_force_nomg_nolen>X<SvPVbyte_force>X<SvPVbytex_force>X<SvPVutf8_force>X<SvPVutf8x_force>X<SvPVx_force>

These are like C<L</SvPV>>, returning the string in the SV, but will force the
SV into containing a string (C<L</SvPOK>>), and only a string
(C<L</SvPOK_only>>), by hook or by crook.  You need to use one of these
C<force> routines if you are going to update the C<L</SvPVX>> directly.

Note that coercing an arbitrary scalar into a plain PV will potentially
strip useful data from it.  For example if the SV was C<SvROK>, then the
referent will have its reference count decremented, and the SV itself may
be converted to an C<SvPOK> scalar with a string buffer containing a value
such as C<"ARRAY(0x1234)">.

The differences between the forms are:

The forms with C<flags> in their names allow you to use the C<flags> parameter
to specify to perform 'get' magic (by setting the C<SV_GMAGIC> flag) or to skip
'get' magic (by clearing it).  The other forms do perform 'get' magic, except
for the ones with C<nomg> in their names, which skip 'get' magic.

The forms that take a C<len> parameter will set that variable to the byte
length of the resultant string (these are macros, so don't use C<&len>).

The forms with C<nolen> in their names indicate they don't have a C<len>
parameter.  They should be used only when it is known that the PV is a C
string, terminated by a NUL byte, and without intermediate NUL characters; or
when you don't care about its length.

The forms with C<mutable> in their names are effectively the same as those without,
but the name emphasizes that the string is modifiable by the caller, which it is
in all the forms.

C<SvPVutf8_force> is like C<SvPV_force>, but converts C<sv> to UTF-8 first if
not already UTF-8.

C<SvPVutf8x_force> is like C<SvPVutf8_force>, but guarantees to evaluate C<sv>
only once; use the more efficient C<SvPVutf8_force> otherwise.

C<SvPVbyte_force> is like C<SvPV_force>, but converts C<sv> to byte
representation first if currently encoded as UTF-8.  If the SV cannot be
downgraded from UTF-8, this croaks.

C<SvPVbytex_force> is like C<SvPVbyte_force>, but guarantees to evaluate C<sv>
only once; use the more efficient C<SvPVbyte_force> otherwise.

=over 3

 char*  SvPV_force              (SV* sv, STRLEN len)
 char*  SvPV_force_flags        (SV * sv, STRLEN len, U32 flags)
 char*  SvPV_force_flags_mutable(SV * sv, STRLEN len, U32 flags)
 char*  SvPV_force_flags_nolen  (SV * sv, U32 flags)
 char*  SvPV_force_mutable      (SV * sv, STRLEN len)
 char*  SvPV_force_nolen        (SV* sv)
 char*  SvPV_force_nomg         (SV* sv, STRLEN len)
 char*  SvPV_force_nomg_nolen   (SV * sv)
 char*  SvPVbyte_force          (SV * sv, STRLEN len)
 char*  SvPVbytex_force         (SV * sv, STRLEN len)
 char*  SvPVutf8_force          (SV * sv, STRLEN len)
 char*  SvPVutf8x_force         (SV * sv, STRLEN len)
 char*  SvPVx_force             (SV* sv, STRLEN len)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvPV_free>
X<SvPV_free>

Frees the PV buffer in C<sv>, leaving things in a precarious state, so should
only be used as part of a larger operation

=over 3

 void  SvPV_free(SV * sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_pvn_force_flags>
X<sv_pvn_force_flags>

Get a sensible string out of the SV somehow.
If C<flags> has the C<SV_GMAGIC> bit set, will C<L</mg_get>> on C<sv> if
appropriate, else not.  C<sv_pvn_force> and C<sv_pvn_force_nomg> are
implemented in terms of this function.
You normally want to use the various wrapper macros instead: see
C<L</SvPV_force>> and C<L</SvPV_force_nomg>>.

=over 3

 char *  sv_pvn_force_flags(SV * const sv, STRLEN * const lp,
                            const U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvPV_renew>
X<SvPV_renew>

Low level micro optimization of C<L</SvGROW>>.  It is generally better to use
C<SvGROW> instead.  This is because C<SvPV_renew> ignores potential issues that
C<SvGROW> handles.  C<sv> needs to have a real C<PV> that is unencumbered by
things like COW.  Using C<SV_CHECK_THINKFIRST> or
C<SV_CHECK_THINKFIRST_COW_DROP> before calling this should clean it up, but
why not just use C<SvGROW> if you're not sure about the provenance?

=over 3

 void  SvPV_renew(SV* sv, STRLEN len)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvPV_set>
X<SvPV_set>

This is probably not what you want to use, you probably wanted
L</sv_usepvn_flags> or L</sv_setpvn> or L</sv_setpvs>.

Set the value of the PV pointer in C<sv> to the Perl allocated
C<NUL>-terminated string C<val>.  See also C<L</SvIV_set>>.

Remember to free the previous PV buffer. There are many things to check.
Beware that the existing pointer may be involved in copy-on-write or other
mischief, so do C<SvOOK_off(sv)> and use C<sv_force_normal> or
C<SvPV_force> (or check the C<SvIsCOW> flag) first to make sure this
modification is safe. Then finally, if it is not a COW, call
C<L</SvPV_free>> to free the previous PV buffer.

=over 3

 void  SvPV_set(SV* sv, char* val)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvPV_shrink_to_cur>
X<SvPV_shrink_to_cur>

