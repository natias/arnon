
As of Perl 5.12.0 there is a new interface for plugging and using method
resolution orders other than the default linear depth first search.
The C3 method resolution order added in 5.10.0 has been re-implemented as
a plugin, without changing its Perl-space interface. See L<perlmroapi> for
more information.



=head2 C<\N> experimental regex escape

Perl now supports C<\N>, a new regex escape which you can think of as
the inverse of C<\n>. It will match any character that is not a newline,
independently from the presence or absence of the single line match
modifier C</s>. It is not usable within a character class.  C<\N{3}>
means to match 3 non-newlines; C<\N{5,}> means to match at least 5.
C<\N{NAME}> still means the character or sequence named C<NAME>, but
C<NAME> no longer can be things like C<3>, or C<5,>.

This will break a L<custom charnames translator|charnames/CUSTOM
TRANSLATORS> which allows numbers for character names, as C<\N{3}> will
now mean to match 3 non-newline characters, and not the character whose
name is C<3>. (No name defined by the Unicode standard is a number,
so only custom translators might be affected.)

Perl's developers are somewhat concerned about possible user confusion
with the existing C<\N{...}> construct which matches characters by their
Unicode name. Consequently, this feature is experimental. We may remove
it or change it in a backwards-incompatible way in Perl 5.14.

=head2 DTrace support

Perl now has some support for DTrace. See "DTrace support" in F<INSTALL>.

=head2 Support for C<configure_requires> in CPAN module metadata

Both C<CPAN> and C<CPANPLUS> now support the C<configure_requires>
keyword in the F<META.yml> metadata file included in most recent CPAN
distributions.  This allows distribution authors to specify configuration
prerequisites that must be installed before running F<Makefile.PL>
or F<Build.PL>.

See the documentation for C<ExtUtils::MakeMaker> or C<Module::Build> for
more on how to specify C<configure_requires> when creating a distribution
for CPAN.

=head2 C<each>, C<keys>, C<values> are now more flexible

The C<each>, C<keys>, C<values> function can now operate on arrays.

=head2 C<when> as a statement modifier

C<when> is now allowed to be used as a statement modifier.

=head2 C<$,> flexibility

The variable C<$,> may now be tied.

=head2 // in when clauses

// now behaves like || in when clauses

=head2 Enabling warnings from your shell environment

You can now set C<-W> from the C<PERL5OPT> environment variable

=head2 C<delete local>

C<delete local> now allows you to locally delete a hash entry.

=head2 New support for Abstract namespace sockets

Abstract namespace sockets are Linux-specific socket type that live in
AF_UNIX family, slightly abusing it to be able to use arbitrary
character arrays as addresses: They start with nul byte and are not
terminated by nul byte, but with the length passed to the socket()
system call.

=head2 32-bit limit on substr arguments removed

The 32-bit limit on C<substr> arguments has now been removed. The full
range of the system's signed and unsigned integers is now available for
the C<pos> and C<len> arguments.

=head1 Potentially Incompatible Changes

=head2 Deprecations warn by default

Over the years, Perl's developers have deprecated a number of language
features for a variety of reasons.  Perl now defaults to issuing a
warning if a deprecated language feature is used. Many of the deprecations
Perl now warns you about have been deprecated for many years.  You can
find a list of what was deprecated in a given release of Perl in the
C<perl5xxdelta.pod> file for that release.

To disable this feature in a given lexical scope, you should use C<no
warnings 'deprecated';> For information about which language features
are deprecated and explanations of various deprecation warnings, please
see L<perldiag>. See L</Deprecations> below for the list of features
and modules Perl's developers have deprecated as part of this release.

=head2 Version number formats

Acceptable version number formats have been formalized into "strict" and
"lax" rules. C<package NAME VERSION> takes a strict version number.
C<UNIVERSAL::VERSION> and the L<version> object constructors take lax
version numbers. Providing an invalid version will result in a fatal
error. The version argument in C<use NAME VERSION> is first parsed as a
numeric literal or v-string and then passed to C<UNIVERSAL::VERSION>
(and must then pass the "lax" format test).

These formats are documented fully in the L<version> module. To a first
approximation, a "strict" version number is a positive decimal number
(integer or decimal-fraction) without exponentiation or else a
dotted-decimal v-string with a leading 'v' character and at least three
components. A "lax" version number allows v-strings with fewer than
three components or without a leading 'v'. Under "lax" rules, both
decimal and dotted-decimal versions may have a trailing "alpha"
component separated by an underscore character after a fractional or
dotted-decimal component.

The L<version> module adds C<version::is_strict> and C<version::is_lax>
functions to check a scalar against these rules.

=head2 @INC reorganization

In C<@INC>, C<ARCHLIB> and C<PRIVLIB> now occur after the current
version's C<site_perl> and C<vendor_perl>.  Modules installed into
C<site_perl> and C<vendor_perl> will now be loaded in preference to
those installed in C<ARCHLIB> and C<PRIVLIB>.


=head2 REGEXPs are now first class

Internally, Perl now treats compiled regular expressions (such as
those created with C<qr//>) as first class entities. Perl modules which
serialize, deserialize or otherwise have deep interaction with Perl's
internal data structures need to be updated for this change.  Most
affected CPAN modules have already been updated as of this writing.

=head2 Switch statement changes

The C<given>/C<when> switch statement handles complex statements better
than Perl 5.10.0 did (These enhancements are also available in
5.10.1 and subsequent 5.10 releases.) There are two new cases where
C<when> now interprets its argument as a boolean, instead of an
expression to be used in a smart match:

=over

=item flip-flop operators

The C<..> and C<...> flip-flop operators are now evaluated in boolean
context, following their usual semantics; see L<perlop/"Range Operators">.

Note that, as in perl 5.10.0, C<when (1..10)> will not work to test
whether a given value is an integer between 1 and 10; you should use
C<when ([1..10])> instead (note the array reference).

However, contrary to 5.10.0, evaluating the flip-flop operators in
boolean context ensures it can now be useful in a C<when()>, notably
for implementing bistable conditions, like in:

    when (/^=begin/ .. /^=end/) {
      # do something
    }

=item defined-or operator

A compound expression involving the defined-or operator, as in
C<when (expr1 // expr2)>, will be treated as boolean if the first
expression is boolean. (This just extends the existing rule that applies
to the regular or operator, as in C<when (expr1 || expr2)>.)

=back

=head2 Smart match changes

Since Perl 5.10.0, Perl's developers have made a number of changes to
the smart match operator. These, of course, also alter the behaviour
of the switch statements where smart matching is implicitly used.
These changes were also made for the 5.10.1 release, and will remain in
subsequent 5.10 releases.

=head3 Changes to type-based dispatch

The smart match operator C<~~> is no longer commutative. The behaviour of
a smart match now depends primarily on the type of its right hand
argument. Moreover, its semantics have been adjusted for greater
consistency or usefulness in several cases. While the general backwards
compatibility is maintained, several changes must be noted:

=over 4

=item *

Code references with an empty prototype are no longer treated specially.
They are passed an argument like the other code references (even if they
choose to ignore it).

=item *

C<%hash ~~ sub {}> and C<@array ~~ sub {}> now test that the subroutine
returns a true value for each key of the hash (or element of the
array), instead of passing the whole hash or array as a reference to
the subroutine.

=item *

Due to the commutativity breakage, code references are no longer
treated specially when appearing on the left of the C<~~> operator,
but like any vulgar scalar.

=item *

C<undef ~~ %hash> is always false (since C<undef> can't be a key in a
hash). No implicit conversion to C<""> is done (as was the case in perl
5.10.0).

=item *

C<$scalar ~~ @array> now always distributes the smart match across the
elements of the array. It's true if one element in @array verifies
C<$scalar ~~ $element>. This is a generalization of the old behaviour
that tested whether the array contained the scalar.

=back

The full dispatch table for the smart match operator is given in
L<perlsyn/"Smart matching in detail">.

=head3 Smart match and overloading

According to the rule of dispatch based on the rightmost argument type,
when an object overloading C<~~> appears on the right side of the
operator, the overload routine will always be called (with a 3rd argument
set to a true value, see L<overload>.) However, when the object will
appear on the left, the overload routine will be called only when the
rightmost argument is a simple scalar. This way, distributivity of smart
match across arrays is not broken, as well as the other behaviours with
complex types (coderefs, hashes, regexes). Thus, writers of overloading
routines for smart match mostly need to worry only with comparing
against a scalar, and possibly with stringification overloading; the
other common cases will be automatically handled consistently.

C<~~> will now refuse to work on objects that do not overload it (in order
to avoid relying on the object's underlying structure). (However, if the
object overloads the stringification or the numification operators, and
if overload fallback is active, it will be used instead, as usual.)

=head2 Other potentially incompatible changes

=over 4

=item *

The definitions of a number of Unicode properties have changed to match
those of the current Unicode standard. These are listed above under
L</Unicode overhaul>. This change may break code that expects the old
definitions.

=item *

The boolkeys op has moved to the group of hash ops. This breaks binary
compatibility.

=item *

Filehandles are now always blessed into C<IO::File>.

The previous behaviour was to bless Filehandles into L<FileHandle>
(an empty proxy class) if it was loaded into memory and otherwise
to bless them into C<IO::Handle>.

=item *

The semantics of C<use feature :5.10*> have changed slightly.
See L</"Modules and Pragmata"> for more information.

=item *

Perl's developers now use git, rather than Perforce.  This should be
a purely internal change only relevant to people actively working on
the core.  However, you may see minor difference in perl as a consequence
of the change.  For example in some of details of the output of C<perl
-V>. See L<perlrepository> for more information.

=item *

As part of the C<Test::Harness> 2.x to 3.x upgrade, the experimental
C<Test::Harness::Straps> module has been removed.
See L</"Modules and Pragmata"> for more details.

=item *

As part of the C<ExtUtils::MakeMaker> upgrade, the
C<ExtUtils::MakeMaker::bytes> and C<ExtUtils::MakeMaker::vmsish> modules
have been removed from this distribution.

=item *

C<Module::CoreList> no longer contains the C<%:patchlevel> hash.

=item *

C<length undef> now returns undef.

=item *

Unsupported private C API functions are now declared "static" to prevent
leakage to Perl's public API.

=item *

To support the bootstrapping process, F<miniperl> no longer builds with
UTF-8 support in the regexp engine.

This allows a build to complete with PERL_UNICODE set and a UTF-8 locale.
Without this there's a bootstrapping problem, as miniperl can't load
the UTF-8 components of the regexp engine, because they're not yet built.

=item *

F<miniperl>'s @INC is now restricted to just C<-I...>, the split of
C<$ENV{PERL5LIB}>, and "C<.>"

=item *

A space or a newline is now required after a C<"#line XXX"> directive.

=item *

Tied filehandles now have an additional method EOF which provides the
EOF type.

=item *

To better match all other flow control statements, C<foreach> may no
longer be used as an attribute.

=item *

Perl's command-line switch "-P", which was deprecated in version 5.10.0, has
now been removed. The CPAN module C<< Filter::cpp >> can be used as an 
alternative.

=back


=head1 Deprecations

From time to time, Perl's developers find it necessary to deprecate
features or modules we've previously shipped as part of the core
distribution. We are well aware of the pain and frustration that a
backwards-incompatible change to Perl can cause for developers building
or maintaining software in Perl. You can be sure that when we deprecate
a functionality or syntax, it isn't a choice we make lightly. Sometimes,
we choose to deprecate functionality or syntax because it was found to
be poorly designed or implemented. Sometimes, this is because they're
holding back other features or causing performance problems. Sometimes,
the reasons are more complex. Wherever possible, we try to keep deprecated
functionality available to developers in its previous form for at least
one major release. So long as a deprecated feature isn't actively
disrupting our ability to maintain and extend Perl, we'll try to leave
it in place as long as possible.

The following items are now deprecated:

=over

=item suidperl

C<suidperl> is no longer part of Perl. It used to provide a mechanism to
emulate setuid permission bits on systems that don't support it properly.

=item Use of C<:=> to mean an empty attribute list

An accident of Perl's parser meant that these constructions were all
equivalent:

    my $pi := 4;
    my $pi : = 4;
    my $pi :  = 4;

with the C<:> being treated as the start of an attribute list, which
ends before the C<=>. As whitespace is not significant here, all are
parsed as an empty attribute list, hence all the above are equivalent
to, and better written as

    my $pi = 4;

because no attribute processing is done for an empty list.

As is, this meant that C<:=> cannot be used as a new token, without
silently changing the meaning of existing code. Hence that particular
form is now deprecated, and will become a syntax error. If it is
absolutely necessary to have empty attribute lists (for example,
because of a code generator) then avoid the warning by adding a space
before the C<=>.

=item C<< UNIVERSAL->import() >>

The method C<< UNIVERSAL->import() >> is now deprecated. Attempting to
pass import arguments to a C<use UNIVERSAL> statement will result in a
deprecation warning.

=item Use of "goto" to jump into a construct

Using C<goto> to jump from an outer scope into an inner scope is now
deprecated. This rare use case was causing problems in the
implementation of scopes.

=item Custom character names in \N{name} that don't look like names

In C<\N{I<name>}>, I<name> can be just about anything. The standard
Unicode names have a very limited domain, but a custom name translator
could create names that are, for example, made up entirely of punctuation
symbols. It is now deprecated to make names that don't begin with an
alphabetic character, and aren't alphanumeric or contain other than
a very few other characters, namely spaces, dashes, parentheses
and colons. Because of the added meaning of C<\N> (See C<L</\N>
experimental regex escape>), names that look like curly brace -enclosed
quantifiers won't work. For example, C<\N{3,4}> now means to match 3 to
4 non-newlines; before a custom name C<3,4> could have been created.

=item Deprecated Modules

The following modules will be removed from the core distribution in a
future release, and should be installed from CPAN instead. Distributions
on CPAN which require these should add them to their prerequisites. The
core versions of these modules warnings will issue a deprecation warning.

If you ship a packaged version of Perl, either alone or as part of a
larger system, then you should carefully consider the repercussions of
core module deprecations. You may want to consider shipping your default
build of Perl with packages for some or all deprecated modules which
install into C<vendor> or C<site> perl library directories. This will
inhibit the deprecation warnings.

Alternatively, you may want to consider patching F<lib/deprecate.pm>
to provide deprecation warnings specific to your packaging system
or distribution of Perl, consistent with how your packaging system
or distribution manages a staged transition from a release where the
installation of a single package provides the given functionality, to
a later release where the system administrator needs to know to install
multiple packages to get that same functionality.

You can silence these deprecation warnings by installing the modules
in question from CPAN.  To install the latest version of all of them,
just install C<Task::Deprecations::5_12>.

=over

=item L<Class::ISA>

=item L<Pod::Plainer>

=item L<Shell>

=item L<Switch>

Switch is buggy and should be avoided. You may find Perl's new
C<given>/C<when> feature a suitable replacement.  See L<perlsyn/"Switch
statements"> for more information.

=back

=item Assignment to $[

=item Use of the attribute :locked on subroutines

=item Use of "locked" with the attributes pragma

=item Use of "unique" with the attributes pragma

=item Perl_pmflag

C<Perl_pmflag> is no longer part of Perl's public API. Calling it now
generates a deprecation warning, and it will be removed in a future
release. Although listed as part of the API, it was never documented,
and only ever used in F<toke.c>, and prior to 5.10, F<regcomp.c>. In
core, it has been replaced by a static function.

=item Numerous Perl 4-era libraries

F<termcap.pl>, F<tainted.pl>, F<stat.pl>, F<shellwords.pl>, F<pwd.pl>,
F<open3.pl>, F<open2.pl>, F<newgetopt.pl>, F<look.pl>, F<find.pl>,
F<finddepth.pl>, F<importenv.pl>, F<hostname.pl>, F<getopts.pl>,
F<getopt.pl>, F<getcwd.pl>, F<flush.pl>, F<fastcwd.pl>, F<exceptions.pl>,
F<ctime.pl>, F<complete.pl>, F<cacheout.pl>, F<bigrat.pl>, F<bigint.pl>,
F<bigfloat.pl>, F<assert.pl>, F<abbrev.pl>, F<dotsh.pl>, and
F<timelocal.pl> are all now deprecated.  Earlier, Perl's developers
intended to remove these libraries from Perl's core for the 5.14.0 release.

During final testing before the release of 5.12.0, several developers
discovered current production code using these ancient libraries, some
inside the Perl core itself.  Accordingly, the pumpking granted them
a stay of execution. They will begin to warn about their deprecation
in the 5.14.0 release and will be removed in the 5.16.0 release.


=back

=head1 Unicode overhaul

Perl's developers have made a concerted effort to update Perl to be in
sync with the latest Unicode standard. Changes for this include:

Perl can now handle every Unicode character property. New documentation,
L<perluniprops>, lists all available non-Unihan character properties. By
default, perl does not expose Unihan, deprecated or Unicode-internal
properties.  See below for more details on these; there is also a section
in the pod listing them, and explaining why they are not exposed.

Perl now fully supports the Unicode compound-style of using C<=>
and C<:> in writing regular expressions: C<\p{property=value}> and
C<\p{property:value}> (both of which mean the same thing).

Perl now fully supports the Unicode loose matching rules for text between
the braces in C<\p{...}> constructs. In addition, Perl allows underscores
between digits of numbers.

Perl now accepts all the Unicode-defined synonyms for properties and
property values.

C<qr/\X/>, which matches a Unicode logical character, has
been expanded to work better with various Asian languages. It
now is defined as an I<extended grapheme cluster>. (See
L<http://www.unicode.org/reports/tr29/>).  Anything matched previously
and that made sense will continue to be accepted.   Additionally:

=over

=item *

C<\X> will not break apart a C<S<CR LF>> sequence.

=item *

C<\X> will now match a sequence which includes the C<ZWJ> and C<ZWNJ>
characters.

=item *

C<\X> will now always match at least one character, including an initial
mark.  Marks generally come after a base character, but it is possible in
Unicode to have them in isolation, and C<\X> will now handle that case,
for example at the beginning of a line, or after a C<ZWSP>. And this is
the part where C<\X> doesn't match the things that it used to that don't
make sense. Formerly, for example, you could have the nonsensical case
of an accented LF.

=item *

C<\X> will now match a (Korean) Hangul syllable sequence, and the Thai
and Lao exception cases.

=back

Otherwise, this change should be transparent for the non-affected
languages.

C<\p{...}> matches using the Canonical_Combining_Class property were
completely broken in previous releases of Perl.  They should now work
correctly.

Before Perl 5.12, the Unicode C<Decomposition_Type=Compat> property
and a Perl extension had the same name, which led to neither matching
all the correct values (with more than 100 mistakes in one, and several
thousand in the other). The Perl extension has now been renamed to be
C<Decomposition_Type=Noncanonical> (short: C<dt=noncanon>). It has the
same meaning as was previously intended, namely the union of all the
non-canonical Decomposition types, with Unicode C<Compat> being just
one of those.

C<\p{Decomposition_Type=Canonical}> now includes the Hangul syllables.

C<\p{Uppercase}> and C<\p{Lowercase}> now work as the Unicode standard
says they should.  This means they each match a few more characters than
they used to.

C<\p{Cntrl}> now matches the same characters as C<\p{Control}>. This
means it no longer will match Private Use (gc=co), Surrogates (gc=cs),
nor Format (gc=cf) code points. The Format code points represent the
biggest possible problem. All but 36 of them are either officially
deprecated or strongly discouraged from being used. Of those 36, likely
the most widely used are the soft hyphen (U+00AD), and BOM, ZWSP, ZWNJ,
WJ, and similar characters, plus bidirectional controls.

C<\p{Alpha}> now matches the same characters as C<\p{Alphabetic}>. Before
5.12, Perl's definition included a number of things that aren't
really alpha (all marks) while omitting many that were. The definitions
of C<\p{Alnum}> and C<\p{Word}> depend on Alpha's definition and have
changed accordingly.

C<\p{Word}> no longer incorrectly matches non-word characters such
as fractions.

C<\p{Print}> no longer matches the line control characters: Tab, LF,
CR, FF, VT, and NEL. This brings it in line with standards and the
documentation.

C<\p{XDigit}> now matches the same characters as C<\p{Hex_Digit}>. This
means that in addition to the characters it currently matches,
C<[A-Fa-f0-9]>, it will also match the 22 fullwidth equivalents, for
example U+FF10: FULLWIDTH DIGIT ZERO.

The Numeric type property has been extended to include the Unihan
characters.

There is a new Perl extension, the 'Present_In', or simply 'In',
property. This is an extension of the Unicode Age property, but
C<\p{In=5.0}> matches any code point whose usage has been determined
I<as of> Unicode version 5.0. The C<\p{Age=5.0}> only matches code points
added in I<precisely> version 5.0.

A number of properties now have the correct values for unassigned
code points. The affected properties are Bidi_Class, East_Asian_Width,
Joining_Type, Decomposition_Type, Hangul_Syllable_Type, Numeric_Type,
and Line_Break.

The Default_Ignorable_Code_Point, ID_Continue, and ID_Start properties
are now up to date with current Unicode definitions.

Earlier versions of Perl erroneously exposed certain properties that
are supposed to be Unicode internal-only.  Use of these in regular
expressions will now generate, if enabled, a deprecation warning message.
The properties are: Other_Alphabetic, Other_Default_Ignorable_Code_Point,
Other_Grapheme_Extend, Other_ID_Continue, Other_ID_Start, Other_Lowercase,
Other_Math, and Other_Uppercase.

It is now possible to change which Unicode properties Perl understands
on a per-installation basis. As mentioned above, certain properties
are turned off by default.  These include all the Unihan properties
(which should be accessible via the CPAN module Unicode::Unihan) and any
deprecated or Unicode internal-only property that Perl has never exposed.

The generated files in the C<lib/unicore/To> directory are now more
clearly marked as being stable, directly usable by applications.  New hash
entries in them give the format of the normal entries, which allows for
easier machine parsing. Perl can generate files in this directory for
any property, though most are suppressed.  You can find instructions
for changing which are written in L<perluniprops>.

=head1 Modules and Pragmata

=head2 New Modules and Pragmata

=over 4

=item C<autodie>

C<autodie> is a new lexically-scoped alternative for the C<Fatal> module.
The bundled version is 2.06_01. Note that in this release, using a string
eval when C<autodie> is in effect can cause the autodie behaviour to leak
into the surrounding scope. See L<autodie/"BUGS"> for more details.

Version 2.06_01 has been added to the Perl core.

=item C<Compress::Raw::Bzip2>

Version 2.024 has been added to the Perl core.

=item C<overloading>

C<overloading> allows you to lexically disable or enable overloading
for some or all operations.

Version 0.001 has been added to the Perl core.

=item C<parent>

C<parent> establishes an ISA relationship with base classes at compile
time. It provides the key feature of C<base> without further unwanted
behaviors.

Version 0.223 has been added to the Perl core.

=item C<Parse::CPAN::Meta>

Version 1.40 has been added to the Perl core.

=item C<VMS::DCLsym>

Version 1.03 has been added to the Perl core.

=item C<VMS::Stdio>

Version 2.4 has been added to the Perl core.

=item C<XS::APItest::KeywordRPN>

Version 0.003 has been added to the Perl core.

=back

=head2 Updated Pragmata

=over 4

=item C<base>

Upgraded from version 2.13 to 2.15.

=item C<bignum>

Upgraded from version 0.22 to 0.23.

=item C<charnames>

C<charnames> now contains the Unicode F<NameAliases.txt> database file.
This has the effect of adding some extra C<\N> character names that
formerly wouldn't have been recognised; for example, C<"\N{LATIN CAPITAL
LETTER GHA}">.

Upgraded from version 1.06 to 1.07.

=item C<constant>

Upgraded from version 1.13 to 1.20.

=item C<diagnostics>

C<diagnostics> now supports %.0f formatting internally.

C<diagnostics> no longer suppresses C<Use of uninitialized value in range
(or flip)> warnings. [perl #71204]

Upgraded from version 1.17 to 1.19.

=item C<feature>

In C<feature>, the meaning of the C<:5.10> and C<:5.10.X> feature
bundles has changed slightly. The last component, if any (i.e. C<X>) is
simply ignored.  This is predicated on the assumption that new features
will not, in general, be added to maintenance releases. So C<:5.10>
and C<:5.10.X> have identical effect. This is a change to the behaviour
documented for 5.10.0.

C<feature> now includes the C<unicode_strings> feature:

    use feature "unicode_strings";

This pragma turns on Unicode semantics for the case-changing operations
(C<uc>, C<lc>, C<ucfirst>, C<lcfirst>) on strings that don't have the
internal UTF-8 flag set, but that contain single-byte characters between
128 and 255.

Upgraded from version 1.11 to 1.16.

=item C<less>

C<less> now includes the C<stash_name> method to allow subclasses of
C<less> to pick where in %^H to store their stash.

Upgraded from version 0.02 to 0.03.

=item C<lib>

Upgraded from version 0.5565 to 0.62.

=item C<mro>

C<mro> is now implemented as an XS extension. The documented interface has
not changed. Code relying on the implementation detail that some C<mro::>
methods happened to be available at all times gets to "keep both pieces".

Upgraded from version 1.00 to 1.02.

=item C<overload>

C<overload> now allow overloading of 'qr'.

Upgraded from version 1.06 to 1.10.

=item C<threads>

Upgraded from version 1.67 to 1.75.

=item C<threads::shared>

Upgraded from version 1.14 to 1.32.

=item C<version>

C<version> now has support for L</Version number formats> as described
earlier in this document and in its own documentation.

Upgraded from version 0.74 to 0.82.

=item C<warnings>

C<warnings> has a new C<warnings::fatal_enabled()> function.  It also
includes a new C<illegalproto> warning category. See also L</New or
Changed Diagnostics> for this change.

Upgraded from version 1.06 to 1.09.

=back

=head2 Updated Modules

=over 4

=item C<Archive::Extract>

Upgraded from version 0.24 to 0.38.

=item C<Archive::Tar>

Upgraded from version 1.38 to 1.54.

=item C<Attribute::Handlers>

Upgraded from version 0.79 to 0.87.

=item C<AutoLoader>

Upgraded from version 5.63 to 5.70.

=item C<B::Concise>

Upgraded from version 0.74 to 0.78.

=item C<B::Debug>

Upgraded from version 1.05 to 1.12.

=item C<B::Deparse>

Upgraded from version 0.83 to 0.96.

=item C<B::Lint>

Upgraded from version 1.09 to 1.11_01.

=item C<CGI>

Upgraded from version 3.29 to 3.48.

=item C<Class::ISA>

Upgraded from version 0.33 to 0.36.

NOTE: C<Class::ISA> is deprecated and may be removed from a future
version of Perl.

=item C<Compress::Raw::Zlib>

Upgraded from version 2.008 to 2.024.

=item C<CPAN>

Upgraded from version 1.9205 to 1.94_56.

=item C<CPANPLUS>

Upgraded from version 0.84 to 0.90.

=item C<CPANPLUS::Dist::Build>

Upgraded from version 0.06_02 to 0.46.

=item C<Data::Dumper>

Upgraded from version 2.121_14 to 2.125.

=item C<DB_File>

Upgraded from version 1.816_1 to 1.820.

=item C<Devel::PPPort>

Upgraded from version 3.13 to 3.19.

=item C<Digest>

Upgraded from version 1.15 to 1.16.

=item C<Digest::MD5>

Upgraded from version 2.36_01 to 2.39.

=item C<Digest::SHA>

Upgraded from version 5.45 to 5.47.

=item C<Encode>

Upgraded from version 2.23 to 2.39.

=item C<Exporter>

Upgraded from version 5.62 to 5.64_01.

=item C<ExtUtils::CBuilder>

Upgraded from version 0.21 to 0.27.

=item C<ExtUtils::Command>

Upgraded from version 1.13 to 1.16.

=item C<ExtUtils::Constant>

Upgraded from version 0.2 to 0.22.

=item C<ExtUtils::Install>

Upgraded from version 1.44 to 1.55.

=item C<ExtUtils::MakeMaker>

Upgraded from version 6.42 to 6.56.

=item C<ExtUtils::Manifest>

Upgraded from version 1.51_01 to 1.57.

=item C<ExtUtils::ParseXS>

Upgraded from version 2.18_02 to 2.21.

=item C<File::Fetch>

Upgraded from version 0.14 to 0.24.

=item C<File::Path>

Upgraded from version 2.04 to 2.08_01.

=item C<File::Temp>

Upgraded from version 0.18 to 0.22.

=item C<Filter::Simple>

Upgraded from version 0.82 to 0.84.

=item C<Filter::Util::Call>

Upgraded from version 1.07 to 1.08.

=item C<Getopt::Long>

Upgraded from version 2.37 to 2.38.

=item C<IO>

Upgraded from version 1.23_01 to 1.25_02.

=item C<IO::Zlib>

Upgraded from version 1.07 to 1.10.

=item C<IPC::Cmd>

Upgraded from version 0.40_1 to 0.54.

=item C<IPC::SysV>

Upgraded from version 1.05 to 2.01.

=item C<Locale::Maketext>

Upgraded from version 1.12 to 1.14.

=item C<Locale::Maketext::Simple>

Upgraded from version 0.18 to 0.21.

=item C<Log::Message>

Upgraded from version 0.01 to 0.02.

=item C<Log::Message::Simple>

Upgraded from version 0.04 to 0.06.

=item C<Math::BigInt>

Upgraded from version 1.88 to 1.89_01.

=item C<Math::BigInt::FastCalc>

Upgraded from version 0.16 to 0.19.

=item C<Math::BigRat>

Upgraded from version 0.21 to 0.24.

=item C<Math::Complex>

Upgraded from version 1.37 to 1.56.

=item C<Memoize>

Upgraded from version 1.01_02 to 1.01_03.

=item C<MIME::Base64>
