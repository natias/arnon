
def forget(
    ui, repo, match, prefix, uipathfn, explicitonly, dryrun, interactive
):
    if dryrun and interactive:
        raise error.InputError(
            _(b"cannot specify both --dry-run and --interactive")
        )
    bad = []
    badfn = lambda x, y: bad.append(x) or match.bad(x, y)
    wctx = repo[None]
    forgot = []

    s = repo.status(match=matchmod.badmatch(match, badfn), clean=True)
    forget = sorted(s.modified + s.added + s.deleted + s.clean)
    if explicitonly:
        forget = [f for f in forget if match.exact(f)]

    for subpath in sorted(wctx.substate):
        sub = wctx.sub(subpath)
        submatch = matchmod.subdirmatcher(subpath, match)
        subprefix = repo.wvfs.reljoin(prefix, subpath)
        subuipathfn = scmutil.subdiruipathfn(subpath, uipathfn)
        try:
            subbad, subforgot = sub.forget(
                submatch,
                subprefix,
                subuipathfn,
                dryrun=dryrun,
                interactive=interactive,
            )
            bad.extend([subpath + b'/' + f for f in subbad])
            forgot.extend([subpath + b'/' + f for f in subforgot])
        except error.LookupError:
            ui.status(
                _(b"skipping missing subrepository: %s\n") % uipathfn(subpath)
            )

    if not explicitonly:
        for f in match.files():
            if f not in repo.dirstate and not repo.wvfs.isdir(f):
                if f not in forgot:
                    if repo.wvfs.exists(f):
                        # Don't complain if the exact case match wasn't given.
                        # But don't do this until after checking 'forgot', so
                        # that subrepo files aren't normalized, and this op is
                        # purely from data cached by the status walk above.
                        if repo.dirstate.normalize(f) in repo.dirstate:
                            continue
                        ui.warn(
                            _(
                                b'not removing %s: '
                                b'file is already untracked\n'
                            )
                            % uipathfn(f)
                        )
                    bad.append(f)

    if interactive:
        responses = _(
            b'[Ynsa?]'
            b'$$ &Yes, forget this file'
            b'$$ &No, skip this file'
            b'$$ &Skip remaining files'
            b'$$ Include &all remaining files'
            b'$$ &? (display help)'
        )
        for filename in forget[:]:
            r = ui.promptchoice(
                _(b'forget %s %s') % (uipathfn(filename), responses)
            )
            if r == 4:  # ?
                while r == 4:
                    for c, t in ui.extractchoices(responses)[1]:
                        ui.write(b'%s - %s\n' % (c, encoding.lower(t)))
                    r = ui.promptchoice(
                        _(b'forget %s %s') % (uipathfn(filename), responses)
                    )
            if r == 0:  # yes
                continue
            elif r == 1:  # no
                forget.remove(filename)
            elif r == 2:  # Skip
                fnindex = forget.index(filename)
                del forget[fnindex:]
                break
            elif r == 3:  # All
                break

    for f in forget:
        if ui.verbose or not match.exact(f) or interactive:
            ui.status(
                _(b'removing %s\n') % uipathfn(f), label=b'ui.addremove.removed'
            )

    if not dryrun:
        rejected = wctx.forget(forget, prefix)
        bad.extend(f for f in rejected if f in match.files())
        forgot.extend(f for f in forget if f not in rejected)
    return bad, forgot


def files(ui, ctx, m, uipathfn, fm, fmt, subrepos):
    ret = 1

    needsfctx = ui.verbose or {b'size', b'flags'} & fm.datahint()
    if fm.isplain() and not needsfctx:
        # Fast path. The speed-up comes from skipping the formatter, and batching
        # calls to ui.write.
        buf = []
        for f in ctx.matches(m):
            buf.append(fmt % uipathfn(f))
            if len(buf) > 100:
                ui.write(b''.join(buf))
                del buf[:]
            ret = 0
        if buf:
            ui.write(b''.join(buf))
    else:
        for f in ctx.matches(m):
            fm.startitem()
            fm.context(ctx=ctx)
            if needsfctx:
                fc = ctx[f]
                fm.write(b'size flags', b'% 10d % 1s ', fc.size(), fc.flags())
            fm.data(path=f)
            fm.plain(fmt % uipathfn(f))
            ret = 0

    for subpath in sorted(ctx.substate):
        submatch = matchmod.subdirmatcher(subpath, m)
        subuipathfn = scmutil.subdiruipathfn(subpath, uipathfn)
        if subrepos or m.exact(subpath) or any(submatch.files()):
            sub = ctx.sub(subpath)
            try:
                recurse = m.exact(subpath) or subrepos
                if (
                    sub.printfiles(ui, submatch, subuipathfn, fm, fmt, recurse)
                    == 0
                ):
                    ret = 0
            except error.LookupError:
                ui.status(
                    _(b"skipping missing subrepository: %s\n")
                    % uipathfn(subpath)
                )

    return ret


def remove(
    ui, repo, m, prefix, uipathfn, after, force, subrepos, dryrun, warnings=None
):
    ret = 0
    s = repo.status(match=m, clean=True)
    modified, added, deleted, clean = s.modified, s.added, s.deleted, s.clean

    wctx = repo[None]

    if warnings is None:
        warnings = []
        warn = True
    else:
        warn = False

    subs = sorted(wctx.substate)
    progress = ui.makeprogress(
        _(b'searching'), total=len(subs), unit=_(b'subrepos')
    )
    for subpath in subs:
        submatch = matchmod.subdirmatcher(subpath, m)
        subprefix = repo.wvfs.reljoin(prefix, subpath)
        subuipathfn = scmutil.subdiruipathfn(subpath, uipathfn)
        if subrepos or m.exact(subpath) or any(submatch.files()):
            progress.increment()
            sub = wctx.sub(subpath)
            try:
                if sub.removefiles(
                    submatch,
                    subprefix,
                    subuipathfn,
                    after,
                    force,
                    subrepos,
                    dryrun,
                    warnings,
                ):
                    ret = 1
            except error.LookupError:
                warnings.append(
                    _(b"skipping missing subrepository: %s\n")
                    % uipathfn(subpath)
                )
    progress.complete()

    # warn about failure to delete explicit files/dirs
    deleteddirs = pathutil.dirs(deleted)
    files = m.files()
    progress = ui.makeprogress(
        _(b'deleting'), total=len(files), unit=_(b'files')
    )
    for f in files:

        def insubrepo():
            for subpath in wctx.substate:
                if f.startswith(subpath + b'/'):
                    return True
            return False

        progress.increment()
        isdir = f in deleteddirs or wctx.hasdir(f)
        if f in repo.dirstate or isdir or f == b'.' or insubrepo() or f in subs:
            continue

        if repo.wvfs.exists(f):
            if repo.wvfs.isdir(f):
                warnings.append(
                    _(b'not removing %s: no tracked files\n') % uipathfn(f)
                )
            else:
                warnings.append(
                    _(b'not removing %s: file is untracked\n') % uipathfn(f)
                )
        # missing files will generate a warning elsewhere
        ret = 1
    progress.complete()

    if force:
        list = modified + deleted + clean + added
    elif after:
        list = deleted
        remaining = modified + added + clean
        progress = ui.makeprogress(
            _(b'skipping'), total=len(remaining), unit=_(b'files')
        )
        for f in remaining:
            progress.increment()
            if ui.verbose or (f in files):
                warnings.append(
                    _(b'not removing %s: file still exists\n') % uipathfn(f)
                )
            ret = 1
        progress.complete()
    else:
        list = deleted + clean
        progress = ui.makeprogress(
            _(b'skipping'), total=(len(modified) + len(added)), unit=_(b'files')
        )
        for f in modified:
            progress.increment()
            warnings.append(
                _(
                    b'not removing %s: file is modified (use -f'
                    b' to force removal)\n'
                )
                % uipathfn(f)
            )
            ret = 1
        for f in added:
            progress.increment()
            warnings.append(
                _(
                    b"not removing %s: file has been marked for add"
                    b" (use 'hg forget' to undo add)\n"
                )
                % uipathfn(f)
            )
            ret = 1
        progress.complete()

    list = sorted(list)
    progress = ui.makeprogress(
        _(b'deleting'), total=len(list), unit=_(b'files')
    )
    for f in list:
        if ui.verbose or not m.exact(f):
            progress.increment()
            ui.status(
                _(b'removing %s\n') % uipathfn(f), label=b'ui.addremove.removed'
            )
    progress.complete()

    if not dryrun:
        with repo.wlock():
            if not after:
                for f in list:
                    if f in added:
                        continue  # we never unlink added files on remove
                    rmdir = repo.ui.configbool(
                        b'experimental', b'removeemptydirs'
                    )
                    repo.wvfs.unlinkpath(f, ignoremissing=True, rmdir=rmdir)
            repo[None].forget(list)

    if warn:
        for warning in warnings:
            ui.warn(warning)

    return ret


def _catfmtneedsdata(fm):
    return not fm.datahint() or b'data' in fm.datahint()


def _updatecatformatter(fm, ctx, matcher, path, decode):
    """Hook for adding data to the formatter used by ``hg cat``.

    Extensions (e.g., lfs) can wrap this to inject keywords/data, but must call
    this method first."""

    # data() can be expensive to fetch (e.g. lfs), so don't fetch it if it
    # wasn't requested.
    data = b''
    if _catfmtneedsdata(fm):
        data = ctx[path].data()
        if decode:
            data = ctx.repo().wwritedata(path, data)
    fm.startitem()
    fm.context(ctx=ctx)
    fm.write(b'data', b'%s', data)
    fm.data(path=path)


def cat(ui, repo, ctx, matcher, basefm, fntemplate, prefix, **opts):
    err = 1
    opts = pycompat.byteskwargs(opts)

    def write(path):
        filename = None
        if fntemplate:
            filename = makefilename(
                ctx, fntemplate, pathname=os.path.join(prefix, path)
            )
            # attempt to create the directory if it does not already exist
            try:
                os.makedirs(os.path.dirname(filename))
            except OSError:
                pass
        with formatter.maybereopen(basefm, filename) as fm:
            _updatecatformatter(fm, ctx, matcher, path, opts.get(b'decode'))

    # Automation often uses hg cat on single files, so special case it
    # for performance to avoid the cost of parsing the manifest.
    if len(matcher.files()) == 1 and not matcher.anypats():
        file = matcher.files()[0]
        mfl = repo.manifestlog
        mfnode = ctx.manifestnode()
        try:
            if mfnode and mfl[mfnode].find(file)[0]:
                if _catfmtneedsdata(basefm):
                    scmutil.prefetchfiles(repo, [(ctx.rev(), matcher)])
                write(file)
                return 0
        except KeyError:
            pass

    if _catfmtneedsdata(basefm):
        scmutil.prefetchfiles(repo, [(ctx.rev(), matcher)])

    for abs in ctx.walk(matcher):
        write(abs)
        err = 0

    uipathfn = scmutil.getuipathfn(repo, legacyrelativevalue=True)
    for subpath in sorted(ctx.substate):
        sub = ctx.sub(subpath)
        try:
            submatch = matchmod.subdirmatcher(subpath, matcher)
            subprefix = os.path.join(prefix, subpath)
            if not sub.cat(
                submatch,
                basefm,
                fntemplate,
                subprefix,
                **pycompat.strkwargs(opts)
            ):
                err = 0
        except error.RepoLookupError:
            ui.status(
                _(b"skipping missing subrepository: %s\n") % uipathfn(subpath)
            )

    return err


def commit(ui, repo, commitfunc, pats, opts):
    '''commit the specified files or all outstanding changes'''
    date = opts.get(b'date')
    if date:
        opts[b'date'] = dateutil.parsedate(date)
    message = logmessage(ui, opts)
    matcher = scmutil.match(repo[None], pats, opts)

    dsguard = None
    # extract addremove carefully -- this function can be called from a command
    # that doesn't support addremove
    if opts.get(b'addremove'):
        dsguard = dirstateguard.dirstateguard(repo, b'commit')
    with dsguard or util.nullcontextmanager():
        if dsguard:
            relative = scmutil.anypats(pats, opts)
            uipathfn = scmutil.getuipathfn(repo, legacyrelativevalue=relative)
            if scmutil.addremove(repo, matcher, b"", uipathfn, opts) != 0:
                raise error.Abort(
                    _(b"failed to mark all new/missing files as added/removed")
                )

        return commitfunc(ui, repo, message, matcher, opts)


def samefile(f, ctx1, ctx2):
    if f in ctx1.manifest():
        a = ctx1.filectx(f)
        if f in ctx2.manifest():
            b = ctx2.filectx(f)
            return not a.cmp(b) and a.flags() == b.flags()
        else:
            return False
    else:
        return f not in ctx2.manifest()


def amend(ui, repo, old, extra, pats, opts):
    # avoid cycle context -> subrepo -> cmdutil
    from . import context

    # amend will reuse the existing user if not specified, but the obsolete
    # marker creation requires that the current user's name is specified.
    if obsolete.isenabled(repo, obsolete.createmarkersopt):
        ui.username()  # raise exception if username not set

    ui.note(_(b'amending changeset %s\n') % old)
    base = old.p1()

    with repo.wlock(), repo.lock(), repo.transaction(b'amend'):
        # Participating changesets:
        #
        # wctx     o - workingctx that contains changes from working copy
        #          |   to go into amending commit
        #          |
        # old      o - changeset to amend
        #          |
        # base     o - first parent of the changeset to amend
        wctx = repo[None]

        # Copy to avoid mutating input
        extra = extra.copy()
        # Update extra dict from amended commit (e.g. to preserve graft
        # source)
        extra.update(old.extra())

        # Also update it from the from the wctx
        extra.update(wctx.extra())

        # date-only change should be ignored?
        datemaydiffer = resolve_commit_options(ui, opts)
        opts = pycompat.byteskwargs(opts)

        date = old.date()
        if opts.get(b'date'):
            date = dateutil.parsedate(opts.get(b'date'))
        user = opts.get(b'user') or old.user()

        if len(old.parents()) > 1:
            # ctx.files() isn't reliable for merges, so fall back to the
            # slower repo.status() method
            st = base.status(old)
            files = set(st.modified) | set(st.added) | set(st.removed)
        else:
            files = set(old.files())

        # add/remove the files to the working copy if the "addremove" option
        # was specified.
        matcher = scmutil.match(wctx, pats, opts)
        relative = scmutil.anypats(pats, opts)
        uipathfn = scmutil.getuipathfn(repo, legacyrelativevalue=relative)
        if opts.get(b'addremove') and scmutil.addremove(
            repo, matcher, b"", uipathfn, opts
        ):
            raise error.Abort(
                _(b"failed to mark all new/missing files as added/removed")
            )

        # Check subrepos. This depends on in-place wctx._status update in
        # subrepo.precommit(). To minimize the risk of this hack, we do
        # nothing if .hgsub does not exist.
        if b'.hgsub' in wctx or b'.hgsub' in old:
            subs, commitsubs, newsubstate = subrepoutil.precommit(
                ui, wctx, wctx._status, matcher
            )
            # amend should abort if commitsubrepos is enabled
            assert not commitsubs
            if subs:
                subrepoutil.writestate(repo, newsubstate)

        ms = mergestatemod.mergestate.read(repo)
        mergeutil.checkunresolved(ms)

        filestoamend = {f for f in wctx.files() if matcher(f)}

        changes = len(filestoamend) > 0
        changeset_copies = (
            repo.ui.config(b'experimental', b'copies.read-from')
            != b'filelog-only'
        )
        # If there are changes to amend or if copy information needs to be read
        # from the changeset extras, we cannot take the fast path of using
        # filectxs from the old commit.
        if changes or changeset_copies:
            # Recompute copies (avoid recording a -> b -> a)
            copied = copies.pathcopies(base, wctx)
            if old.p2():
                copied.update(copies.pathcopies(old.p2(), wctx))

            # Prune files which were reverted by the updates: if old
            # introduced file X and the file was renamed in the working
            # copy, then those two files are the same and
            # we can discard X from our list of files. Likewise if X
            # was removed, it's no longer relevant. If X is missing (aka
            # deleted), old X must be preserved.
            files.update(filestoamend)
            files = [
                f
                for f in files
                if (f not in filestoamend or not samefile(f, wctx, base))
            ]

            def filectxfn(repo, ctx_, path):
                try:
                    # If the file being considered is not amongst the files
                    # to be amended, we should use the file context from the
                    # old changeset. This avoids issues when only some files in
                    # the working copy are being amended but there are also
                    # changes to other files from the old changeset.
                    if path in filestoamend:
                        # Return None for removed files.
                        if path in wctx.removed():
                            return None
                        fctx = wctx[path]
                    else:
                        fctx = old.filectx(path)
                    flags = fctx.flags()
                    mctx = context.memfilectx(
                        repo,
                        ctx_,
                        fctx.path(),
                        fctx.data(),
                        islink=b'l' in flags,
                        isexec=b'x' in flags,
                        copysource=copied.get(path),
                    )
                    return mctx
                except KeyError:
                    return None

        else:
            ui.note(_(b'copying changeset %s to %s\n') % (old, base))

            # Use version of files as in the old cset
            def filectxfn(repo, ctx_, path):
                try:
                    return old.filectx(path)
                except KeyError:
                    return None

        # See if we got a message from -m or -l, if not, open the editor with
        # the message of the changeset to amend.
        message = logmessage(ui, opts)

        editform = mergeeditform(old, b'commit.amend')

        if not message:
            message = old.description()
            # Default if message isn't provided and --edit is not passed is to
            # invoke editor, but allow --no-edit. If somehow we don't have any
            # description, let's always start the editor.
            doedit = not message or opts.get(b'edit') in [True, None]
        else:
            # Default if message is provided is to not invoke editor, but allow
            # --edit.
            doedit = opts.get(b'edit') is True
        editor = getcommiteditor(edit=doedit, editform=editform)

        pureextra = extra.copy()
        extra[b'amend_source'] = old.hex()

        new = context.memctx(
            repo,
            parents=[base.node(), old.p2().node()],
            text=message,
            files=files,
            filectxfn=filectxfn,
            user=user,
            date=date,
            extra=extra,
            editor=editor,
        )

        newdesc = changelog.stripdesc(new.description())
        if (
            (not changes)
            and newdesc == old.description()
            and user == old.user()
            and (date == old.date() or datemaydiffer)
            and pureextra == old.extra()
        ):
            # nothing changed. continuing here would create a new node
            # anyway because of the amend_source noise.
            #
            # This not what we expect from amend.
            return old.node()

        commitphase = None
        if opts.get(b'secret'):
            commitphase = phases.secret
        newid = repo.commitctx(new)
        ms.reset()

        with repo.dirstate.parentchange():
            # Reroute the working copy parent to the new changeset
            repo.setparents(newid, repo.nullid)

            # Fixing the dirstate because localrepo.commitctx does not update
            # it. This is rather convenient because we did not need to update
            # the dirstate for all the files in the new commit which commitctx
            # could have done if it updated the dirstate. Now, we can
            # selectively update the dirstate only for the amended files.
            dirstate = repo.dirstate

            # Update the state of the files which were added and modified in the
            # amend to "normal" in the dirstate. We need to use "normallookup" since
            # the files may have changed since the command started; using "normal"
            # would mark them as clean but with uncommitted contents.
            normalfiles = set(wctx.modified() + wctx.added()) & filestoamend
            for f in normalfiles:
                dirstate.update_file(
                    f, p1_tracked=True, wc_tracked=True, possibly_dirty=True
                )

            # Update the state of files which were removed in the amend
            # to "removed" in the dirstate.
            removedfiles = set(wctx.removed()) & filestoamend
            for f in removedfiles:
                dirstate.update_file(f, p1_tracked=False, wc_tracked=False)

        mapping = {old.node(): (newid,)}
        obsmetadata = None
        if opts.get(b'note'):
            obsmetadata = {b'note': encoding.fromlocal(opts[b'note'])}
        backup = ui.configbool(b'rewrite', b'backup-bundle')
        scmutil.cleanupnodes(
            repo,
            mapping,
            b'amend',
            metadata=obsmetadata,
            fixphase=True,
            targetphase=commitphase,
            backup=backup,
        )

    return newid


def commiteditor(repo, ctx, subs, editform=b''):
    if ctx.description():
        return ctx.description()
    return commitforceeditor(
        repo, ctx, subs, editform=editform, unchangedmessagedetection=True
    )


def commitforceeditor(
    repo,
    ctx,
    subs,
    finishdesc=None,
    extramsg=None,
    editform=b'',
    unchangedmessagedetection=False,
):
    if not extramsg:
        extramsg = _(b"Leave message empty to abort commit.")

    forms = [e for e in editform.split(b'.') if e]
    forms.insert(0, b'changeset')
    templatetext = None
    while forms:
        ref = b'.'.join(forms)
        if repo.ui.config(b'committemplate', ref):
            templatetext = committext = buildcommittemplate(
                repo, ctx, subs, extramsg, ref
            )
            break
        forms.pop()
    else:
        committext = buildcommittext(repo, ctx, subs, extramsg)

    # run editor in the repository root
    olddir = encoding.getcwd()
    os.chdir(repo.root)

    # make in-memory changes visible to external process
    tr = repo.currenttransaction()
    repo.dirstate.write(tr)
    pending = tr and tr.writepending() and repo.root

    editortext = repo.ui.edit(
        committext,
        ctx.user(),
        ctx.extra(),
        editform=editform,
        pending=pending,
        repopath=repo.path,
        action=b'commit',
    )
    text = editortext

    # strip away anything below this special string (used for editors that want
    # to display the diff)
    stripbelow = re.search(_linebelow, text, flags=re.MULTILINE)
    if stripbelow:
        text = text[: stripbelow.start()]

    text = re.sub(b"(?m)^HG:.*(\n|$)", b"", text)
    os.chdir(olddir)

    if finishdesc:
        text = finishdesc(text)
    if not text.strip():
        raise error.InputError(_(b"empty commit message"))
    if unchangedmessagedetection and editortext == templatetext:
        raise error.InputError(_(b"commit message unchanged"))

    return text


def buildcommittemplate(repo, ctx, subs, extramsg, ref):
    ui = repo.ui
    spec = formatter.reference_templatespec(ref)
    t = logcmdutil.changesettemplater(ui, repo, spec)
    t.t.cache.update(
        (k, templater.unquotestring(v))
        for k, v in repo.ui.configitems(b'committemplate')
    )

    if not extramsg:
        extramsg = b''  # ensure that extramsg is string

    ui.pushbuffer()
    t.show(ctx, extramsg=extramsg)
    return ui.popbuffer()


def hgprefix(msg):
    return b"\n".join([b"HG: %s" % a for a in msg.split(b"\n") if a])


def buildcommittext(repo, ctx, subs, extramsg):
    edittext = []
    modified, added, removed = ctx.modified(), ctx.added(), ctx.removed()
    if ctx.description():
        edittext.append(ctx.description())
    edittext.append(b"")
    edittext.append(b"")  # Empty line between message and comments.
    edittext.append(
        hgprefix(
            _(
                b"Enter commit message."
                b"  Lines beginning with 'HG:' are removed."
            )
        )
    )
    edittext.append(hgprefix(extramsg))
    edittext.append(b"HG: --")
    edittext.append(hgprefix(_(b"user: %s") % ctx.user()))
    if ctx.p2():
        edittext.append(hgprefix(_(b"branch merge")))
    if ctx.branch():
        edittext.append(hgprefix(_(b"branch '%s'") % ctx.branch()))
    if bookmarks.isactivewdirparent(repo):
        edittext.append(hgprefix(_(b"bookmark '%s'") % repo._activebookmark))
    edittext.extend([hgprefix(_(b"subrepo %s") % s) for s in subs])
    edittext.extend([hgprefix(_(b"added %s") % f) for f in added])
    edittext.extend([hgprefix(_(b"changed %s") % f) for f in modified])
    edittext.extend([hgprefix(_(b"removed %s") % f) for f in removed])
    if not added and not modified and not removed:
        edittext.append(hgprefix(_(b"no files changed")))
    edittext.append(b"")

    return b"\n".join(edittext)


def commitstatus(repo, node, branch, bheads=None, tip=None, opts=None):
    if opts is None:
        opts = {}
    ctx = repo[node]
    parents = ctx.parents()

    if tip is not None and repo.changelog.tip() == tip:
        # avoid reporting something like "committed new head" when
        # recommitting old changesets, and issue a helpful warning
        # for most instances
        repo.ui.warn(_(b"warning: commit already existed in the repository!\n"))
    elif (
        not opts.get(b'amend')
        and bheads
        and node not in bheads
        and not any(
            p.node() in bheads and p.branch() == branch for p in parents
        )
    ):
        repo.ui.status(_(b'created new head\n'))
        # The message is not printed for initial roots. For the other
        # changesets, it is printed in the following situations:
        #
        # Par column: for the 2 parents with ...
        #   N: null or no parent
        #   B: parent is on another named branch
        #   C: parent is a regular non head changeset
        #   H: parent was a branch head of the current branch
        # Msg column: whether we print "created new head" message
        # In the following, it is assumed that there already exists some
        # initial branch heads of the current branch, otherwise nothing is
        # printed anyway.
        #
        # Par Msg Comment
        # N N  y  additional topo root
        #
        # B N  y  additional branch root
        # C N  y  additional topo head
        # H N  n  usual case
        #
        # B B  y  weird additional branch root
        # C B  y  branch merge
        # H B  n  merge with named branch
        #
        # C C  y  additional head from merge
        # C H  n  merge with a head
        #
        # H H  n  head merge: head count decreases

    if not opts.get(b'close_branch'):
        for r in parents:
            if r.closesbranch() and r.branch() == branch:
                repo.ui.status(
                    _(b'reopening closed branch head %d\n') % r.rev()
                )

    if repo.ui.debugflag:
        repo.ui.write(
            _(b'committed changeset %d:%s\n') % (ctx.rev(), ctx.hex())
        )
    elif repo.ui.verbose:
        repo.ui.write(_(b'committed changeset %d:%s\n') % (ctx.rev(), ctx))


def postcommitstatus(repo, pats, opts):
    return repo.status(match=scmutil.match(repo[None], pats, opts))


def revert(ui, repo, ctx, *pats, **opts):
    opts = pycompat.byteskwargs(opts)
    parent, p2 = repo.dirstate.parents()
    node = ctx.node()

    mf = ctx.manifest()
    if node == p2:
        parent = p2

    # need all matching names in dirstate and manifest of target rev,
    # so have to walk both. do not print errors if files exist in one
    # but not other. in both cases, filesets should be evaluated against
    # workingctx to get consistent result (issue4497). this means 'set:**'
    # cannot be used to select missing files from target rev.

    # `names` is a mapping for all elements in working copy and target revision
    # The mapping is in the form:
    #   <abs path in repo> -> (<path from CWD>, <exactly specified by matcher?>)
    names = {}
    uipathfn = scmutil.getuipathfn(repo, legacyrelativevalue=True)

    with repo.wlock():
        ## filling of the `names` mapping
        # walk dirstate to fill `names`

        interactive = opts.get(b'interactive', False)
        wctx = repo[None]
        m = scmutil.match(wctx, pats, opts)

        # we'll need this later
        targetsubs = sorted(s for s in wctx.substate if m(s))

        if not m.always():
            matcher = matchmod.badmatch(m, lambda x, y: False)
            for abs in wctx.walk(matcher):
                names[abs] = m.exact(abs)

            # walk target manifest to fill `names`

            def badfn(path, msg):
                if path in names:
                    return
                if path in ctx.substate:
                    return
                path_ = path + b'/'
                for f in names:
                    if f.startswith(path_):
                        return
                ui.warn(b"%s: %s\n" % (uipathfn(path), msg))

            for abs in ctx.walk(matchmod.badmatch(m, badfn)):
                if abs not in names:
                    names[abs] = m.exact(abs)

            # Find status of all file in `names`.
            m = scmutil.matchfiles(repo, names)

            changes = repo.status(
                node1=node, match=m, unknown=True, ignored=True, clean=True
            )
        else:
            changes = repo.status(node1=node, match=m)
            for kind in changes:
                for abs in kind:
                    names[abs] = m.exact(abs)

            m = scmutil.matchfiles(repo, names)

        modified = set(changes.modified)
        added = set(changes.added)
        removed = set(changes.removed)
        _deleted = set(changes.deleted)
        unknown = set(changes.unknown)
        unknown.update(changes.ignored)
        clean = set(changes.clean)
        modadded = set()

        # We need to account for the state of the file in the dirstate,
        # even when we revert against something else than parent. This will
        # slightly alter the behavior of revert (doing back up or not, delete
        # or just forget etc).
        if parent == node:
            dsmodified = modified
            dsadded = added
            dsremoved = removed
            # store all local modifications, useful later for rename detection
            localchanges = dsmodified | dsadded
            modified, added, removed = set(), set(), set()
        else:
            changes = repo.status(node1=parent, match=m)
            dsmodified = set(changes.modified)
            dsadded = set(changes.added)
            dsremoved = set(changes.removed)
            # store all local modifications, useful later for rename detection
            localchanges = dsmodified | dsadded

            # only take into account for removes between wc and target
            clean |= dsremoved - removed
            dsremoved &= removed
            # distinct between dirstate remove and other
            removed -= dsremoved

            modadded = added & dsmodified
            added -= modadded

            # tell newly modified apart.
            dsmodified &= modified
            dsmodified |= modified & dsadded  # dirstate added may need backup
            modified -= dsmodified

            # We need to wait for some post-processing to update this set
            # before making the distinction. The dirstate will be used for
            # that purpose.
            dsadded = added

        # in case of merge, files that are actually added can be reported as
        # modified, we need to post process the result
        if p2 != repo.nullid:
            mergeadd = set(dsmodified)
            for path in dsmodified:
                if path in mf:
                    mergeadd.remove(path)
            dsadded |= mergeadd
            dsmodified -= mergeadd

        # if f is a rename, update `names` to also revert the source
        for f in localchanges:
            src = repo.dirstate.copied(f)
            # XXX should we check for rename down to target node?
            if (
                src
                and src not in names
                and repo.dirstate.get_entry(src).removed
            ):
                dsremoved.add(src)
                names[src] = True

        # determine the exact nature of the deleted changesets
        deladded = set(_deleted)
