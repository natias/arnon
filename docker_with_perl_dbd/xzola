 * @out_width: (out)(optional): Will be set to the computed width; you should round this up to get integer pixels.
 * @out_height: (out)(optional): Will be set to the computed height; you should round this up to get integer pixels.
 *
 * Converts an SVG document's intrinsic dimensions to pixels, and returns the result.
 *
 * This function is able to extract the size in pixels from an SVG document if the
 * document has both `width` and `height` attributes
 * with physical units (px, in, cm, mm, pt, pc) or font-based units (em, ex).  For
 * physical units, the dimensions are normalized to pixels using the dots-per-inch (DPI)
 * value set previously with [method@Rsvg.Handle.set_dpi].  For font-based units, this function
 * uses the computed value of the `font-size` property for the toplevel
 * `<svg>` element.  In those cases, this function returns `TRUE`.
 *
 * This function is not able to extract the size in pixels directly from the intrinsic
 * dimensions of the SVG document if the `width` or
 * `height` are in percentage units (or if they do not exist, in which
 * case the SVG spec mandates that they default to 100%), as these require a
 * <firstterm>viewport</firstterm> to be resolved to a final size.  In this case, the
 * function returns `FALSE`.
 *
 * For example, the following document fragment has intrinsic dimensions that will resolve
 * to 20x30 pixels.
 *
 * ```
 * <svg xmlns="http://www.w3.org/2000/svg" width="20" height="30"/>
 * ```
 *
 * Similarly, if the DPI is set to 96, this document will resolve to 192×288 pixels (i.e. 96×2 × 96×3).
 *
 * ```
 * <svg xmlns="http://www.w3.org/2000/svg" width="2in" height="3in"/>
 * ```
 *
 * The dimensions of the following documents cannot be resolved to pixels directly, and
 * this function would return `FALSE` for them:
 *
 * ```
 * <!-- Needs a viewport against which to compute the percentages. -->
 * <svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%"/>
 *
 * <!-- Does not have intrinsic width/height, just a 1:2 aspect ratio which
 *      needs to be fitted within a viewport. -->
 * <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 200"/>
 * ```
 *
 * Instead of querying an SVG document's size, applications are encouraged to render SVG
 * documents to a size chosen by the application, by passing a suitably-sized viewport to
 * [method@Rsvg.Handle.render_document].
 *
 * Returns: `TRUE` if the dimensions could be converted directly to pixels; in this case
 * @out_width and @out_height will be set accordingly.  Note that the dimensions are
 * floating-point numbers, so your application can know the exact size of an SVG document.
 * To get integer dimensions, you should use `ceil()` to round up to the nearest integer
 * (just using `round()`, may may chop off pixels with fractional coverage).  If the
 * dimensions cannot be converted to pixels, returns `FALSE` and puts 0.0 in both
 * @out_width and @out_height.
 *
 * Since: 2.52
 */
RSVG_API
gboolean rsvg_handle_get_intrinsic_size_in_pixels (RsvgHandle *handle,
                                                   gdouble    *out_width,
                                                   gdouble    *out_height);

/* GIO APIs */

/**
 * RsvgHandleFlags:
 * @RSVG_HANDLE_FLAGS_NONE: No flags are set.
 * @RSVG_HANDLE_FLAG_UNLIMITED: Disable safety limits in the XML parser.  Libxml2 has
 * [several limits](https://gitlab.gnome.org/GNOME/libxml2/blob/master/include/libxml/parserInternals.h)
 * designed to keep malicious XML content from consuming too much memory while parsing.
 * For security reasons, this should only be used for trusted input!  Since: 2.40.3
 * @RSVG_HANDLE_FLAG_KEEP_IMAGE_DATA: Use this if the Cairo surface to which you are
 * rendering is a PDF, PostScript, SVG, or Win32 Printing surface.  This will make librsvg
 * and Cairo use the original, compressed data for images in the final output, instead of
 * passing uncompressed images.  For example, this will make the a resulting PDF file
 * smaller and faster.  Please see [the Cairo
 * documentation](https://www.cairographics.org/manual/cairo-cairo-surface-t.html#cairo-surface-set-mime-data)
 * for details.
 *
 * Configuration flags for an [class@Rsvg.Handle].  Note that not all of [class@Rsvg.Handle]'s
 * constructors let you specify flags.  For this reason, [ctor@Rsvg.Handle.new_from_gfile_sync]
 * and [ctor@Rsvg.Handle.new_from_stream_sync] are the preferred ways to create a handle.
 *
 * Since: 2.40.3
 */
typedef enum /*< flags >*/
{
    RSVG_HANDLE_FLAGS_NONE           = 0,
    RSVG_HANDLE_FLAG_UNLIMITED       = 1 << 0,
    RSVG_HANDLE_FLAG_KEEP_IMAGE_DATA = 1 << 1
} RsvgHandleFlags;

RSVG_API
GType rsvg_handle_flags_get_type (void);
#define RSVG_TYPE_HANDLE_FLAGS (rsvg_handle_flags_get_type())

/**
 * rsvg_handle_new_with_flags:
 * @flags: flags from [flags@Rsvg.HandleFlags]
 *
 * Creates a new [class@Rsvg.Handle] with flags @flags.  After calling this function,
 * you can feed the resulting handle with SVG data by using
 * [method@Rsvg.Handle.read_stream_sync].
 *
 * Returns: (transfer full): a new [class@Rsvg.Handle]
 *
 * Since: 2.36
 **/
RSVG_API
RsvgHandle *rsvg_handle_new_with_flags (RsvgHandleFlags flags);

/**
 * rsvg_handle_set_base_gfile:
 * @handle: a [class@Rsvg.Handle]
 * @base_file: a `GFile`
 *
 * Set the base URI for @handle from @file.
 *
 * Note: This function may only be called before [method@Rsvg.Handle.write] or
 * [method@Rsvg.Handle.read_stream_sync] have been called.
 *
 * Since: 2.32
 */
RSVG_API
void rsvg_handle_set_base_gfile (RsvgHandle *handle,
                                 GFile      *base_file);

/**
 * rsvg_handle_read_stream_sync:
 * @handle: a [class@Rsvg.Handle]
 * @stream: a `GInputStream`
 * @cancellable: (nullable): a `GCancellable`, or `NULL`
 * @error: return location for a `GError`
 *
 * Reads @stream and writes the data from it to @handle.
 *
 * Before calling this function, you may need to call [method@Rsvg.Handle.set_base_uri]
 * or [method@Rsvg.Handle.set_base_gfile] to set the "base file" for resolving
 * references to external resources.  SVG elements like
 * `<image>` which reference external resources will be
 * resolved relative to the location you specify with those functions.
 *
 * If @cancellable is not `NULL`, then the operation can be cancelled by
 * triggering the cancellable object from another thread. If the
 * operation was cancelled, the error `G_IO_ERROR_CANCELLED` will be
 * returned.
 *
 * Returns: `TRUE` if reading @stream succeeded, or `FALSE` otherwise
 *   with @error filled in
 *
 * Since: 2.32
 */
RSVG_API
gboolean rsvg_handle_read_stream_sync (RsvgHandle   *handle,
                                       GInputStream *stream,
                                       GCancellable *cancellable,
                                       GError      **error);

/**
 * rsvg_handle_new_from_gfile_sync:
 * @file: a `GFile`
 * @flags: flags from [flags@Rsvg.HandleFlags]
 * @cancellable: (nullable): a `GCancellable`, or `NULL`
 * @error: return location for a `GError`
 *
 * Creates a new [class@Rsvg.Handle] for @file.
 *
 * This function sets the "base file" of the handle to be @file itself, so SVG
 * elements like `<image>` which reference external
 * resources will be resolved relative to the location of @file.
 *
 * If @cancellable is not `NULL`, then the operation can be cancelled by
 * triggering the cancellable object from another thread. If the
 * operation was cancelled, the error `G_IO_ERROR_CANCELLED` will be
 * returned in @error.
 *
 * Returns: (transfer full) (nullable): a new [class@Rsvg.Handle] on success, or `NULL` with @error filled in
 *
 * Since: 2.32
 */
RSVG_API
RsvgHandle *rsvg_handle_new_from_gfile_sync (GFile          *file,
                                             RsvgHandleFlags flags,
                                             GCancellable   *cancellable,
                                             GError        **error);

/**
 * rsvg_handle_new_from_stream_sync:
 * @input_stream: a `GInputStream`
 * @base_file: (nullable): a `GFile`, or `NULL`
 * @flags: flags from [flags@Rsvg.HandleFlags]
 * @cancellable: (nullable): a `GCancellable`, or `NULL`
 * @error: return location for a `GError`
 *
 * Creates a new [class@Rsvg.Handle] for @stream.
 *
 * This function sets the "base file" of the handle to be @base_file if
 * provided.  SVG elements like `<image>` which reference
 * external resources will be resolved relative to the location of @base_file.
 *
 * If @cancellable is not `NULL`, then the operation can be cancelled by
 * triggering the cancellable object from another thread. If the
 * operation was cancelled, the error `G_IO_ERROR_CANCELLED` will be
 * returned in @error.
 *
 * Returns: (transfer full) (nullable): a new [class@Rsvg.Handle] on success, or `NULL` with @error filled in
 *
 * Since: 2.32
 */
RSVG_API
RsvgHandle *rsvg_handle_new_from_stream_sync (GInputStream   *input_stream,
                                              GFile          *base_file,
                                              RsvgHandleFlags flags,
                                              GCancellable   *cancellable,
                                              GError        **error);

/**
 * rsvg_handle_new_from_data:
 * @data: (array length=data_len): The SVG data
 * @data_len: The length of @data, in bytes
 * @error: return location for a `GError`
 *
 * Loads the SVG specified by @data.  Note that this function creates an
 * [class@Rsvg.Handle] without a base URL, and without any [flags@Rsvg.HandleFlags].  If you
 * need these, use [ctor@Rsvg.Handle.new_from_stream_sync] instead by creating
 * a [class@Gio.MemoryInputStream] from your data.
 *
 * Returns: (transfer full) (nullable): A [class@Rsvg.Handle] or `NULL` if an error occurs.
 * Since: 2.14
 */
RSVG_API
RsvgHandle *rsvg_handle_new_from_data (const guint8 *data, gsize data_len, GError **error);

/**
 * rsvg_handle_new_from_file:
 * @filename: The file name to load, or a URI.
 * @error: return location for a `GError`
 *
 * Loads the SVG specified by @file_name.  Note that this function, like
 * [ctor@Rsvg.Handle.new], does not specify any loading flags for the resulting
 * handle.  If you require the use of [flags@Rsvg.HandleFlags], use
 * [ctor@Rsvg.Handle.new_from_gfile_sync].
 *
 * Returns: (transfer full) (nullable): A [class@Rsvg.Handle] or `NULL` if an error occurs.
 * Since: 2.14
 */
RSVG_API
RsvgHandle *rsvg_handle_new_from_file (const gchar *filename, GError **error);

/**
 * rsvg_handle_set_stylesheet:
 * @handle: A [class@Rsvg.Handle].
 * @css: (array length=css_len): String with CSS data; must be valid UTF-8.
 * @css_len: Length of the @css data in bytes.
 * @error: return location for a `GError`
 *
 * Sets a CSS stylesheet to use for an SVG document.
 *
 * The @css_len argument is mandatory; this function will not compute the length
 * of the @css string.  This is because a provided stylesheet, which the calling
 * program could read from a file, can have nul characters in it.
 *
 * During the CSS cascade, the specified stylesheet will be used with a "User"
 * [origin](https://drafts.csswg.org/css-cascade-3/#cascading-origins).
 *
 * Note that `@import` rules will not be resolved, except for `data:` URLs.
 *
 * Returns: `TRUE` on success, `FALSE` on error.  Errors are returned
 * in the @error argument.
 *
 * Since: 2.48
 */
RSVG_API
gboolean rsvg_handle_set_stylesheet (RsvgHandle   *handle,
                                     const guint8 *css,
                                     gsize         css_len,
                                     GError      **error);

#ifndef __GTK_DOC_IGNORE__
/**
 * rsvg_handle_internal_set_testing:
 * @handle: a [class@Rsvg.Handle]
 * @testing: Whether to enable testing mode
 *
 * Do not call this function.  This is intended for librsvg's internal
 * test suite only.
 **/
RSVG_API
void rsvg_handle_internal_set_testing (RsvgHandle *handle, gboolean testing);
#endif /* __GTK_DOC_IGNORE__ */

/* BEGIN deprecated APIs. Do not use! */

/**
 * rsvg_init:
 *
 * This function does nothing.
 *
 * Since: 2.9
 * Deprecated: 2.36: There is no need to initialize librsvg.
 **/
RSVG_DEPRECATED_FOR(g_type_init)
void rsvg_init (void);

/**
 * rsvg_term:
 *
 * This function does nothing.
 *
 * Since: 2.9
 * Deprecated: 2.36: There is no need to de-initialize librsvg.
 **/
RSVG_DEPRECATED
void rsvg_term (void);

/**
 * rsvg_handle_free:
 * @handle: An [class@Rsvg.Handle]
 *
 * Frees @handle.
 * Deprecated: Use [method@GObject.Object.unref] instead.
 **/
RSVG_DEPRECATED_FOR(g_object_unref)
void rsvg_handle_free (RsvgHandle *handle);

/**
 * RsvgSizeFunc:
 * @width: (out): the width of the SVG
 * @height: (out): the height of the SVG
 * @user_data: user data
 *
 * Function to let a user of the library specify the SVG's dimensions
 *
 * See the documentation for [method@Rsvg.Handle.set_size_callback] for an example, and
 * for the reasons for deprecation.
 *
 * Deprecated: 2.14.  Use [method@Rsvg.Handle.render_document] instead, which lets you specify
 * a viewport size in which to render the SVG document.
 */
typedef void (*RsvgSizeFunc) (gint * width, gint * height, gpointer user_data);

/**
 * rsvg_handle_set_size_callback:
 * @handle: An [class@Rsvg.Handle]
 * @size_func: (nullable): A sizing function, or `NULL`
 * @user_data: User data to pass to @size_func, or `NULL`
 * @user_data_destroy: Function to be called to destroy the data passed in @user_data,
 *   or `NULL`.
 *
 * Sets the sizing function for the @handle, which can be used to override the
 * size that librsvg computes for SVG images.  The @size_func is called from the
 * following functions:
 *
 * * [method@Rsvg.Handle.get_dimensions]
 * * [method@Rsvg.Handle.get_dimensions_sub]
 * * [method@Rsvg.Handle.get_position_sub]
 * * [method@Rsvg.Handle.render_cairo]
 * * [method@Rsvg.Handle.render_cairo_sub]
 *
 * Librsvg computes the size of the SVG being rendered, and passes it to the
 * @size_func, which may then modify these values to set the final size of the
 * generated image.
 *
 * Deprecated: 2.14.  Use [method@Rsvg.Handle.render_document] instead.
 * This function was deprecated because when the @size_func is used, it makes it
 * unclear when the librsvg functions which call the @size_func will use the
 * size computed originally, or the callback-specified size, or whether it
 * refers to the whole SVG or to just a sub-element of it.  It is easier, and
 * unambiguous, to use code similar to the example above.
 **/
RSVG_DEPRECATED
void rsvg_handle_set_size_callback (RsvgHandle    *handle,
                                    RsvgSizeFunc   size_func,
                                    gpointer       user_data,
                                    GDestroyNotify user_data_destroy);

/* GdkPixbuf convenience API */

/**
 * rsvg-pixbuf:
 *
 * Years ago, GNOME and GTK used the gdk-pixbuf library as a general mechanism to load
 * raster images into memory (PNG, JPEG, etc.) and pass them around.  The general idiom
 * was, "load this image file and give me a `GdkPixbuf` object", which is basically a pixel
 * buffer.  Librsvg supports this kind of interface to load and render SVG documents, but
 * it is deprecated in favor of rendering to Cairo contexts.
 */

/**
 * rsvg_pixbuf_from_file:
 * @filename: A file name
 * @error: return location for a `GError`
 * 
 * Loads a new `GdkPixbuf` from @filename and returns it.  The caller must
 * assume the reference to the reurned pixbuf. If an error occurred, @error is
 * set and `NULL` is returned.
 * 
 * Returns: (transfer full) (nullable): A pixbuf, or %NULL on error.
 * Deprecated: Use [ctor@Rsvg.Handle.new_from_file] and [method@Rsvg.Handle.render_document] instead.
 **/
RSVG_DEPRECATED
GdkPixbuf *rsvg_pixbuf_from_file (const gchar *filename,
                                  GError     **error);

/**
 * rsvg_pixbuf_from_file_at_zoom:
 * @filename: A file name
 * @x_zoom: The horizontal zoom factor
 * @y_zoom: The vertical zoom factor
 * @error: return location for a `GError`
 * 
 * Loads a new `GdkPixbuf` from @filename and returns it.  This pixbuf is scaled
 * from the size indicated by the file by a factor of @x_zoom and @y_zoom.  The
 * caller must assume the reference to the returned pixbuf. If an error
 * occurred, @error is set and `NULL` is returned.
 * 
 * Returns: (transfer full) (nullable): A pixbuf, or %NULL on error.
 * Deprecated: Use [ctor@Rsvg.Handle.new_from_file] and [method@Rsvg.Handle.render_document] instead.
 **/
RSVG_DEPRECATED
GdkPixbuf *rsvg_pixbuf_from_file_at_zoom (const gchar *filename,
                                          double       x_zoom,
                                          double       y_zoom,
                                          GError     **error);

/**
 * rsvg_pixbuf_from_file_at_size:
 * @filename: A file name
 * @width: The new width, or -1
 * @height: The new height, or -1
 * @error: return location for a `GError`
 * 
 * Loads a new `GdkPixbuf` from @filename and returns it.  This pixbuf is scaled
 * from the size indicated to the new size indicated by @width and @height.  If
 * both of these are -1, then the default size of the image being loaded is
 * used.  The caller must assume the reference to the returned pixbuf. If an
 * error occurred, @error is set and `NULL` is returned.
 * 
 * Returns: (transfer full) (nullable): A pixbuf, or %NULL on error.
 * Deprecated: Use [ctor@Rsvg.Handle.new_from_file] and [method@Rsvg.Handle.render_document] instead.
 **/
RSVG_DEPRECATED
GdkPixbuf *rsvg_pixbuf_from_file_at_size (const gchar *filename,
                                          gint         width,
                                          gint         height,
                                          GError     **error);

/**
 * rsvg_pixbuf_from_file_at_max_size:
 * @filename: A file name
 * @max_width: The requested max width
 * @max_height: The requested max height
 * @error: return location for a `GError`
 * 
 * Loads a new `GdkPixbuf` from @filename and returns it.  This pixbuf is uniformly
 * scaled so that the it fits into a rectangle of size `max_width * max_height`. The
 * caller must assume the reference to the returned pixbuf. If an error occurred,
 * @error is set and `NULL` is returned.
 * 
 * Returns: (transfer full) (nullable): A pixbuf, or %NULL on error.
 * Deprecated: Use [ctor@Rsvg.Handle.new_from_file] and [method@Rsvg.Handle.render_document] instead.
 **/
RSVG_DEPRECATED
GdkPixbuf *rsvg_pixbuf_from_file_at_max_size (const gchar *filename,
                                              gint         max_width,
                                              gint         max_height,
                                              GError     **error);
/**
 * rsvg_pixbuf_from_file_at_zoom_with_max:
 * @filename: A file name
 * @x_zoom: The horizontal zoom factor
 * @y_zoom: The vertical zoom factor
 * @max_width: The requested max width
 * @max_height: The requested max height
 * @error: return location for a `GError`
 * 
 * Loads a new `GdkPixbuf` from @filename and returns it.  This pixbuf is scaled
 * from the size indicated by the file by a factor of @x_zoom and @y_zoom. If the
 * resulting pixbuf would be larger than max_width/max_heigh it is uniformly scaled
 * down to fit in that rectangle. The caller must assume the reference to the
 * returned pixbuf. If an error occurred, @error is set and `NULL` is returned.
 * 
 * Returns: (transfer full) (nullable): A pixbuf, or %NULL on error.
 * Deprecated: Use [ctor@Rsvg.Handle.new_from_file] and [method@Rsvg.Handle.render_document] instead.
 **/
RSVG_DEPRECATED
GdkPixbuf *rsvg_pixbuf_from_file_at_zoom_with_max (const gchar *filename,
                                                   double       x_zoom,
                                                   double       y_zoom,
                                                   gint         max_width,
                                                   gint         max_height,
                                                   GError     **error);

/**
 * rsvg_handle_get_title:
 * @handle: An [class@Rsvg.Handle]
 *
 * Returns: (nullable): This function always returns `NULL`.
 *
 * Since: 2.4
 *
 * Deprecated: 2.36.  Librsvg does not read the metadata/desc/title elements;
 * this function always returns `NULL`.
 */
RSVG_DEPRECATED
const char *rsvg_handle_get_title (RsvgHandle *handle);

/**
 * rsvg_handle_get_desc:
 * @handle: An [class@Rsvg.Handle]
 *
 * Returns: (nullable): This function always returns `NULL`.
 *
 * Since: 2.4
 *
 * Deprecated: 2.36.  Librsvg does not read the metadata/desc/title elements;
 * this function always returns `NULL`.
 */
RSVG_DEPRECATED
const char *rsvg_handle_get_desc (RsvgHandle *handle);

/**
 * rsvg_handle_get_metadata:
 * @handle: An [class@Rsvg.Handle]
 *
 * Returns: (nullable): This function always returns `NULL`.
 *
 * Since: 2.9
 *
 * Deprecated: 2.36.  Librsvg does not read the metadata/desc/title elements;
 * this function always returns `NULL`.
 */
RSVG_DEPRECATED
const char *rsvg_handle_get_metadata (RsvgHandle *handle);

/* END deprecated APIs. */

G_END_DECLS

#include <librsvg/rsvg-features.h>
#include <librsvg/rsvg-version.h>
#include <librsvg/rsvg-cairo.h>

#undef __RSVG_RSVG_H_INSIDE__

#endif                          /* RSVG_H */
                                                                                             usr/include/libwmf/                                                                                 0000755 0000000 0000000 00000000000 14714557565 013003  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/include/libwmf/api.h                                                                            0000644 0000000 0000000 00000025705 14425477016 013725  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* libwmf (<libwmf/api.h>): library for wmf conversion
   Copyright (C) 2000 - various; see CREDITS, ChangeLog, and sources

   The libwmf Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   The libwmf Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with the libwmf Library; see the file COPYING.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */


#ifndef LIBWMF_API_H
#define LIBWMF_API_H

#include <zlib.h>

#include <libwmf/types.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Initializes library
 */
extern wmf_error_t wmf_api_create (wmfAPI**,unsigned long,wmfAPI_Options*);

/**
 * Possibly completes output, and otherwise frees all allocated memory
 */
extern wmf_error_t wmf_api_destroy (wmfAPI*);

/**
 * Initializes library - 'lite' interface only
 */
extern wmf_error_t wmf_lite_create (wmfAPI**,unsigned long,wmfAPI_Options*);

/**
 * Possibly completes output, and otherwise frees all allocated memory - 'lite' interface only
 */
extern wmf_error_t wmf_lite_destroy (wmfAPI*);

/**
 * Reads the header of the current metafile
 */
extern wmf_error_t wmf_header_read (wmfAPI*);

/**
 * Scans the current metafile to determine bounding box and resources
 */
extern wmf_error_t wmf_scan (wmfAPI*,unsigned long,wmfD_Rect*);

/**
 * Plays the current metafile, calling exporter graphics procedures
 */
extern wmf_error_t wmf_play (wmfAPI*,unsigned long,wmfD_Rect*);

/**
 * Supplies a width and height for the current metafile
 */
extern wmf_error_t wmf_size (wmfAPI*,float*,float*);

/**
 * Supplies a display (integer-) width and height for the current metafile
 */
extern wmf_error_t wmf_display_size (wmfAPI*,unsigned int*,unsigned int*,double,double);

/**
 * Sets user defines input stream functions for reading a metafile
 */
extern wmf_error_t wmf_bbuf_input (wmfAPI*,wmfRead,wmfSeek,wmfTell,void*);

/**
 * Opens a file as the current metafile
 */
extern wmf_error_t wmf_file_open (wmfAPI*,const char*);

/**
 * Closes the file corresponding to the current metafile
 */
extern wmf_error_t wmf_file_close (wmfAPI*);

/**
 * Specifies an array of unsigned char as the current metafile
 */
extern wmf_error_t wmf_mem_open (wmfAPI*,unsigned char*,long);

/**
 * Disassociates array corresponding to the current metafile
 */
extern wmf_error_t wmf_mem_close (wmfAPI*);

/* wmf_stream_create: set FILE stream to 0 to write to memory;
 * wmf_stream_destroy: returns pointer to memory, if not a FILE stream
 */

/**
 * Creates compressed character output file stream
 */
extern wmfStream* wmf_ztream_create (wmfAPI*,gzFile);

/**
 * Creates uncompressed character output file or memory stream
 */
extern wmfStream* wmf_stream_create (wmfAPI*,FILE*);

/**
 * Finalizes compressed character output file stream
 */
extern void wmf_ztream_destroy (wmfAPI*,wmfStream*,char**,unsigned long*);

/**
 * Finalizes uncompressed character output file stream
 */
extern void wmf_stream_destroy (wmfAPI*,wmfStream*,char**,unsigned long*);

/**
 * Formatted print to character output file stream
 */
extern int wmf_stream_printf (wmfAPI*,wmfStream*,char*,...);

/**
 * malloc() & attach to library's memory manager
 */
extern void* wmf_malloc (wmfAPI*,size_t);

/**
 * calloc() & attach to library's memory manager
 */
extern void* wmf_calloc (wmfAPI*,size_t,size_t);

/**
 * realloc() memory attached to library's memory manager
 */
extern void* wmf_realloc (wmfAPI*,void*,size_t);

/**
 * free() memory attached to library's memory manager
 */
extern void wmf_free (wmfAPI*,void*);

/**
 * Detach memory from library's memory manager
 */
extern void  wmf_detach (wmfAPI*,void*);

/**
 * strdup() & attach to library's memory manager
 */
extern char* wmf_strdup (wmfAPI*,const char*);

/**
 * create concatenation of two strings and attach to library's memory manager
 */
extern char* wmf_str_append (wmfAPI*,char*,char*);

/**
 * strstr()
 */
extern char* wmf_strstr (const char*,const char*);

/**
 * Increases size of API's string buffer; returns new size or 0 on error
 */
extern unsigned long wmf_strbuf_grow (wmfAPI*);

/**
 * Initializes the metafile player (called by wmf_api_create())
 */
extern wmf_error_t wmf_player_init (wmfAPI*);

/**
 * Returns the Aldus Checksum of the metafile's header
 */
extern U16 wmf_aldus_checksum (wmfAPI*);

/**
 * Reads a two-byte sequence from the current metafile, returns U16
 */
extern U16 wmf_read_16 (wmfAPI*);

/**
 * Reads a four-byte sequence from the current metafile, returns U32
 */
extern U32 wmf_read_32 (wmfAPI*,U16*,U16*);

/**
 * file input (wmf_file_open): fgetc()
 */
extern int wmf_file_read (void*);

/**
 * file input (wmf_file_open): fseek()
 */
extern int wmf_file_seek (void*,long);

/**
 * file input (wmf_file_open): ftell()
 */
extern long wmf_file_tell (void*);

/**
 * memory input (wmf_mem_open): fgetc() equiv.
 */
extern int wmf_mem_read (void*);

/**
 * memory input (wmf_mem_open): fseek() equiv.
 */
extern int wmf_mem_seek (void*,long);

/**
 * memory input (wmf_mem_open): ftell() equiv.
 */
extern long wmf_mem_tell (void*);

/* default ztream functions; NOT to be used directly! */

/**
 * compressed char output (wmf_ztream_create): fputs()
 */
extern int wmf_stream_zputs (char*,void*);

/**
 * compressed char output (wmf_ztream_create): rewind()
 */
extern int wmf_stream_rezet (void*);

/**
 * uncompressed char output (wmf_stream_create): fputs()
 */
extern int wmf_stream_sputs (char*,void*); /* default stream functions; NOT to be used directly! */

/**
 * uncompressed char output (wmf_stream_create): rewind()
 */
extern int wmf_stream_reset (void*);

/**
 * Writes message to error stream (use WMF_ERROR macro)
 */
extern void wmf_error (wmfAPI*,char*,int,char*);

/**
 * Writes message to debug stream (use WMF_DEBUG macro)
 */
extern void wmf_debug (wmfAPI*,char*,int,char*);

/**
 * Formatted print to debug stream
 */
extern void wmf_printf (wmfAPI*,char*,...);

/**
 * Asserts on zero expression (use WMF_ASSERT macro)
 */
extern void wmf_assert (wmfAPI*,char*,int);

/**
 * Outputs library-specific command-line options
 */
extern char* wmf_help (void);

/**
 * Sets drawing origin in device coordinates
 */
extern void wmf_set_viewport_origin (wmfAPI*,wmfD_Coord);

/**
 * Sets call-back function, called after every metafile record
 */
extern void wmf_status_function (wmfAPI*,void*,wmfStatus);

/**
 * Writes to --wmf-write file (which may be WMF or home-made wmfxml)
 */
extern void wmf_write (wmfAPI*,unsigned long,unsigned int,const char*,
		       char**,const unsigned char*,unsigned long);

/**
 * Open --wmf-write file (which may be WMF or home-made wmfxml)
 */
extern void wmf_write_begin (wmfAPI*,const char*);

/**
 * Close --wmf-write file (which may be WMF or home-made wmfxml)
 */
extern void wmf_write_end (wmfAPI*);

/**
 * Initialize a wmfAttributes structure
 */
extern void wmf_attr_new (wmfAPI*,wmfAttributes*);

/**
 * Clear/Empty a wmfAttributes structure
 */
extern void wmf_attr_clear (wmfAPI*,wmfAttributes*);

/**
 * Free memory associated with a wmfAttributes structure
 */
extern void wmf_attr_free (wmfAPI*,wmfAttributes*);

/**
 * Add an name&value to a wmfAttributes structure; returns ptr to value-in-list
 */
extern const char * wmf_attr_add (wmfAPI*,wmfAttributes*,const char*,const char*);

/**
 * Return value of name in a wmfAttributes structure; returns 0 if name not found
 */
extern const char * wmf_attr_query (wmfAPI*,wmfAttributes*,const char*);

/**
 * Load wmfxml file and wmf_mem_open() it
 */
extern wmf_error_t wmf_wmfxml_import (wmfAPI*,const char*);

#ifdef __cplusplus
}
#endif

/* Useful defs & macros
 */

/**
 * @param Z the API handle
 * @param M string to send to the error stream via wmf_error()
 */
#define WMF_ERROR(Z,M) wmf_error (Z,__FILE__,__LINE__,M)

#ifdef DEBUG
#define WMF_DEBUG(Z,M) wmf_debug (Z,__FILE__,__LINE__,M)
#define WMF_ASSERT(Z,M) if (!(M)) wmf_assert (Z,__FILE__,__LINE__)
#else
/**
 * @param Z the API handle
 * @param M string to send to the debug stream via wmf_debug()
 * 
 * (debug build only)
 */
#define WMF_DEBUG(Z,M) (void)Z

/**
 * @param Z the API handle
 * @param M an <expr>, if zero then call wmf_assert()
 * 
 * (debug build only)
 */
#define WMF_ASSERT(Z,M)
#endif

/* Flags to be passed in wmf_api_create: flags to lie in range (1<<0) to (1<<19)
 */

/**
 * Option to wmf_api_create()
 * 
 * use provided [*]alloc/free functions
 */
#define WMF_OPT_ALLOC           (1<<0)

/**
 * Option to wmf_api_create()
 * 
 * check provided command line for --wmf-<option>
 */
#define WMF_OPT_ARGS            (1<<1)

/**
 * Option to wmf_api_create()
 * 
 * font directories specified
 */
#define WMF_OPT_FONTDIRS        (1<<2)

/**
 * Option to wmf_api_create()
 * 
 * font mappings specified
 */
#define WMF_OPT_FONTMAP         (1<<3)

/**
 * Option to wmf_api_create()
 * 
 * use system fonts, if found
 */
#define WMF_OPT_SYS_FONTS       (1<<4)

/**
 * Option to wmf_api_create()
 * 
 * use specified XML system fontmap file
 */
#define WMF_OPT_SYS_FONTMAP     (1<<5)

/**
 * Option to wmf_api_create()
 * 
 * use non-system fonts, if found
 */
#define WMF_OPT_XTRA_FONTS      (1<<6)

/**
 * Option to wmf_api_create()
 * 
 * use specified XML non-system fontmap file
 */
#define WMF_OPT_XTRA_FONTMAP    (1<<7)

/**
 * Option to wmf_api_create()
 * 
 * use specified ghostscript fontmap file
 */
#define WMF_OPT_GS_FONTMAP      (1<<8)

/**
 * Option to wmf_api_create()
 * 
 * write metafile to specified file
 */
#define WMF_OPT_WRITE           (1<<9)

/**
 * Option to wmf_api_create()
 * 
 * initialize device-layer with supplied function
 */
#define WMF_OPT_FUNCTION        (1<<10)

/**
 * Option to wmf_api_create()
 * 
 * initialize device-layer with specified module
 */
#define WMF_OPT_MODULE          (1<<11)

/**
 * Option to wmf_api_create()
 * 
 * check for module also in specified directories
