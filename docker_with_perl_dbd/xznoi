} exr_tile_level_mode_t;

/** @brief Enum representing how to scale positions between levels. */
typedef enum
{
    EXR_TILE_ROUND_DOWN = 0,
    EXR_TILE_ROUND_UP   = 1,
    EXR_TILE_ROUND_LAST_TYPE
} exr_tile_round_mode_t;

/** @brief Enum capturing the underlying data type on a channel. */
typedef enum
{
    EXR_PIXEL_UINT  = 0,
    EXR_PIXEL_HALF  = 1,
    EXR_PIXEL_FLOAT = 2,
    EXR_PIXEL_LAST_TYPE
} exr_pixel_type_t;

/* /////////////////////////////////////// */
/* First set of structs are data where we can read directly with no allocation needed... */

/* Most are naturally aligned, but force some of these
 * structs to be tightly packed
 */
#pragma pack(push, 1)

/** @brief Struct to hold color chromaticities to interpret the tristimulus color values in the image data. */
typedef struct
{
    float red_x;
    float red_y;
    float green_x;
    float green_y;
    float blue_x;
    float blue_y;
    float white_x;
    float white_y;
} exr_attr_chromaticities_t;

/** @brief Struct to hold keycode information. */
typedef struct
{
    int32_t film_mfc_code;
    int32_t film_type;
    int32_t prefix;
    int32_t count;
    int32_t perf_offset;
    int32_t perfs_per_frame;
    int32_t perfs_per_count;
} exr_attr_keycode_t;

/** @brief struct to hold a 32-bit floating-point 3x3 matrix. */
typedef struct
{
    float m[9];
} exr_attr_m33f_t;

/** @brief struct to hold a 64-bit floating-point 3x3 matrix. */
typedef struct
{
    double m[9];
} exr_attr_m33d_t;

/** @brief Struct to hold a 32-bit floating-point 4x4 matrix. */
typedef struct
{
    float m[16];
} exr_attr_m44f_t;

/** @brief Struct to hold a 64-bit floating-point 4x4 matrix. */
typedef struct
{
    double m[16];
} exr_attr_m44d_t;

/** @brief Struct to hold an integer ratio value. */
typedef struct
{
    int32_t  num;
    uint32_t denom;
} exr_attr_rational_t;

/** @brief Struct to hold timecode information. */
typedef struct
{
    uint32_t time_and_flags;
    uint32_t user_data;
} exr_attr_timecode_t;

/** @brief Struct to hold a 2-element integer vector. */
typedef struct
{
    union
    {
        struct
        {
            int32_t x, y;
        };
        int32_t arr[2];
    };
} exr_attr_v2i_t;

/** @brief Struct to hold a 2-element 32-bit float vector. */
typedef struct
{
    union
    {
        struct
        {
            float x, y;
        };
        float arr[2];
    };
} exr_attr_v2f_t;

/** @brief Struct to hold a 2-element 64-bit float vector. */
typedef struct
{
    union
    {
        struct
        {
            double x, y;
        };
        double arr[2];
    };
} exr_attr_v2d_t;

/** @brief Struct to hold a 3-element integer vector. */
typedef struct
{
    union
    {
        struct
        {
            int32_t x, y, z;
        };
        int32_t arr[3];
    };
} exr_attr_v3i_t;

/** @brief Struct to hold a 3-element 32-bit float vector. */
typedef struct
{
    union
    {
        struct
        {
            float x, y, z;
        };
        float arr[3];
    };
} exr_attr_v3f_t;

/** @brief Struct to hold a 3-element 64-bit float vector. */
typedef struct
{
    union
    {
        struct
        {
            double x, y, z;
        };
        double arr[3];
    };
} exr_attr_v3d_t;

/** @brief Struct to hold an integer box/region definition. */
typedef struct
{
    exr_attr_v2i_t min;
    exr_attr_v2i_t max;
} exr_attr_box2i_t;

/** @brief Struct to hold a floating-point box/region definition. */
typedef struct
{
    exr_attr_v2f_t min;
    exr_attr_v2f_t max;
} exr_attr_box2f_t;

/** @brief Struct holding base tiledesc attribute type defined in spec
 *
 * NB: This is in a tightly packed area so it can be read directly, be
 * careful it doesn't become padded to the next \c uint32_t boundary.
 */
typedef struct
{
    uint32_t x_size;
    uint32_t y_size;
    uint8_t  level_and_round;
} exr_attr_tiledesc_t;

/** @brief Macro to access type of tiling from packed structure. */
#define EXR_GET_TILE_LEVEL_MODE(tiledesc)                                      \
    ((exr_tile_level_mode_t) (((tiledesc).level_and_round) & 0xF))
/** @brief Macro to access the rounding mode of tiling from packed structure. */
#define EXR_GET_TILE_ROUND_MODE(tiledesc)                                      \
    ((exr_tile_round_mode_t) ((((tiledesc).level_and_round) >> 4) & 0xF))
/** @brief Macro to pack the tiling type and rounding mode into packed structure. */
#define EXR_PACK_TILE_LEVEL_ROUND(lvl, mode)                                   \
    ((uint8_t) ((((uint8_t) ((mode) &0xF) << 4)) | ((uint8_t) ((lvl) &0xF))))

#pragma pack(pop)

/* /////////////////////////////////////// */
/* Now structs that involve heap allocation to store data. */

/** Storage for a string. */
typedef struct
{
    int32_t length;
    /** If this is non-zero, the string owns the data, if 0, is a const ref to a static string. */
    int32_t alloc_size;

    const char* str;
} exr_attr_string_t;

/** Storage for a string vector. */
typedef struct
{
    int32_t n_strings;
    /** If this is non-zero, the string vector owns the data, if 0, is a const ref. */
    int32_t alloc_size;

    const exr_attr_string_t* strings;
} exr_attr_string_vector_t;

/** Float vector storage struct. */
typedef struct
{
    int32_t length;
    /** If this is non-zero, the float vector owns the data, if 0, is a const ref. */
    int32_t alloc_size;

    const float* arr;
} exr_attr_float_vector_t;

/** Hint for lossy compression methods about how to treat values
 * (logarithmic or linear), meaning a human sees values like R, G, B,
 * luminance difference between 0.1 and 0.2 as about the same as 1.0
 * to 2.0 (logarithmic), where chroma coordinates are closer to linear
 * (0.1 and 0.2 is about the same difference as 1.0 and 1.1).
 */
typedef enum
{
    EXR_PERCEPTUALLY_LOGARITHMIC  = 0,
    EXR_PERCEPTUALLY_LINEAR   = 1
} exr_perceptual_treatment_t;

/** Individual channel information. */
typedef struct
{
    exr_attr_string_t name;
    /** Data representation for these pixels: uint, half, float. */
    exr_pixel_type_t pixel_type;
    /** Possible values are 0 and 1 per docs exr_perceptual_treatment_t. */
    uint8_t p_linear;
    uint8_t reserved[3];
    int32_t x_sampling;
    int32_t y_sampling;
} exr_attr_chlist_entry_t;

/** List of channel information (sorted alphabetically). */
typedef struct
{
    int num_channels;
    int num_alloced;

    const exr_attr_chlist_entry_t* entries;
} exr_attr_chlist_t;

/** @brief Struct to define attributes of an embedded preview image. */
typedef struct
{
    uint32_t width;
    uint32_t height;
    /** If this is non-zero, the preview owns the data, if 0, is a const ref. */
    size_t alloc_size;

    const uint8_t* rgba;
} exr_attr_preview_t;

/** Custom storage structure for opaque data.
 *
 * Handlers for opaque types can be registered, then when a
 * non-builtin type is encountered with a registered handler, the
 * function pointers to unpack/pack it will be set up.
 *
 * @sa exr_register_attr_type_handler
 */
typedef struct
{
    int32_t size;
    int32_t unpacked_size;
    /** If this is non-zero, the struct owns the data, if 0, is a const ref. */
    int32_t packed_alloc_size;
    uint8_t pad[4];

    void*   packed_data;

    /** When an application wants to have custom data, they can store
     * an unpacked form here which will be requested to be destroyed
     * upon destruction of the attribute.
     */
    void* unpacked_data;

    /** An application can register an attribute handler which then
     * fills in these function pointers. This allows a user to delay
     * the expansion of the custom type until access is desired, and
     * similarly, to delay the packing of the data until write time.
     */
    exr_result_t (*unpack_func_ptr) (
        exr_context_t ctxt,
        const void*   data,
        int32_t       attrsize,
        int32_t*      outsize,
        void**        outbuffer);
    exr_result_t (*pack_func_ptr) (
        exr_context_t ctxt,
        const void*   data,
        int32_t       datasize,
        int32_t*      outsize,
        void*         outbuffer);
    void (*destroy_unpacked_func_ptr) (
        exr_context_t ctxt, void* data, int32_t attrsize);
} exr_attr_opaquedata_t;

/* /////////////////////////////////////// */

/** @brief Built-in/native attribute type enum.
 *
 * This will enable us to do a tagged type struct to generically store
 * attributes.
 */
typedef enum
{
    EXR_ATTR_UNKNOWN =
        0,           /**< Type indicating an error or uninitialized attribute. */
    EXR_ATTR_BOX2I,  /**< Integer region definition. @see exr_attr_box2i_t. */
    EXR_ATTR_BOX2F,  /**< Float region definition. @see exr_attr_box2f_t. */
    EXR_ATTR_CHLIST, /**< Definition of channels in file @see exr_chlist_entry. */
    EXR_ATTR_CHROMATICITIES, /**< Values to specify color space of colors in file @see exr_attr_chromaticities_t. */
    EXR_ATTR_COMPRESSION,    /**< ``uint8_t`` declaring compression present. */
    EXR_ATTR_DOUBLE,         /**< Double precision floating point number. */
    EXR_ATTR_ENVMAP,         /**< ``uint8_t`` declaring environment map type. */
    EXR_ATTR_FLOAT, /**< Normal (4 byte) precision floating point number. */
    EXR_ATTR_FLOAT_VECTOR, /**< List of normal (4 byte) precision floating point numbers. */
    EXR_ATTR_INT,     /**< 32-bit signed integer value. */
    EXR_ATTR_KEYCODE, /**< Struct recording keycode @see exr_attr_keycode_t. */
    EXR_ATTR_LINEORDER, /**< ``uint8_t`` declaring scanline ordering. */
    EXR_ATTR_M33F,      /**< 9 32-bit floats representing a 3x3 matrix. */
    EXR_ATTR_M33D,      /**< 9 64-bit floats representing a 3x3 matrix. */
    EXR_ATTR_M44F,      /**< 16 32-bit floats representing a 4x4 matrix. */
    EXR_ATTR_M44D,      /**< 16 64-bit floats representing a 4x4 matrix. */
    EXR_ATTR_PREVIEW, /**< 2 ``unsigned ints`` followed by 4 x w x h ``uint8_t`` image. */
    EXR_ATTR_RATIONAL, /**< \c int followed by ``unsigned int`` */
    EXR_ATTR_STRING,   /**< ``int`` (length) followed by char string data. */
    EXR_ATTR_STRING_VECTOR, /**< 0 or more text strings (int + string). number is based on attribute size. */
    EXR_ATTR_TILEDESC, /**< 2 ``unsigned ints`` ``xSize``, ``ySize`` followed by mode. */
    EXR_ATTR_TIMECODE, /**< 2 ``unsigned ints`` time and flags, user data. */
    EXR_ATTR_V2I,      /**< Pair of 32-bit integers. */
    EXR_ATTR_V2F,      /**< Pair of 32-bit floats. */
    EXR_ATTR_V2D,      /**< Pair of 64-bit floats. */
    EXR_ATTR_V3I,      /**< Set of 3 32-bit integers. */
    EXR_ATTR_V3F,      /**< Set of 3 32-bit floats. */
    EXR_ATTR_V3D,      /**< Set of 3 64-bit floats. */
    EXR_ATTR_OPAQUE,   /**< User/unknown provided type. */
    EXR_ATTR_LAST_KNOWN_TYPE
} exr_attribute_type_t;

/** @brief Storage, name and type information for an attribute.
 *
 * Attributes (metadata) for the file cause a surprising amount of
 * overhead. It is not uncommon for a production-grade EXR to have
 * many attributes. As such, the attribute struct is designed in a
 * slightly more complicated manner. It is optimized to have the
 * storage for that attribute: the struct itself, the name, the type,
 * and the data all allocated as one block. Further, the type and
 * standard names may use a static string to avoid allocating space
 * for those as necessary with the pointers pointing to static strings
 * (not to be freed). Finally, small values are optimized for.
 */
typedef struct 
{
    /** Name of the attribute. */
    const char* name;
    /** String type name of the attribute. */
    const char* type_name;
    /** Length of name string (short flag is 31 max, long allows 255). */
    uint8_t name_length;
    /** Length of type string (short flag is 31 max, long allows 255). */
    uint8_t type_name_length;

    uint8_t pad[2];

    /** Enum of the attribute type. */
    exr_attribute_type_t type;

    /** Union of pointers of different types that can be used to type
     * pun to an appropriate type for builtins. Do note that while
     * this looks like a big thing, it is only the size of a single
     * pointer.  These are all pointers into some other data block
     * storing the value you want, with the exception of the pod types
     * which are just put in place (i.e. small value optimization).
     *
     * The attribute type \c type should directly correlate to one
     * of these entries.
     */
    union
    {
        // NB: not pointers for POD types
        uint8_t uc;
        double  d;
        float   f;
        int32_t i;

        exr_attr_box2i_t*          box2i;
        exr_attr_box2f_t*          box2f;
        exr_attr_chlist_t*         chlist;
        exr_attr_chromaticities_t* chromaticities;
        exr_attr_keycode_t*        keycode;
        exr_attr_float_vector_t*   floatvector;
        exr_attr_m33f_t*           m33f;
        exr_attr_m33d_t*           m33d;
        exr_attr_m44f_t*           m44f;
        exr_attr_m44d_t*           m44d;
        exr_attr_preview_t*        preview;
        exr_attr_rational_t*       rational;
        exr_attr_string_t*         string;
        exr_attr_string_vector_t*  stringvector;
        exr_attr_tiledesc_t*       tiledesc;
        exr_attr_timecode_t*       timecode;
        exr_attr_v2i_t*            v2i;
        exr_attr_v2f_t*            v2f;
        exr_attr_v2d_t*            v2d;
        exr_attr_v3i_t*            v3i;
        exr_attr_v3f_t*            v3f;
        exr_attr_v3d_t*            v3d;
        exr_attr_opaquedata_t*     opaque;
        uint8_t*                   rawptr;
    };
} exr_attribute_t;

/** @} */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* OPENEXR_ATTR_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                       usr/include/OpenEXR/openexr_base.h                                                                  0000644 0000000 0000000 00000014623 14223432711 015610  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*
** SPDX-License-Identifier: BSD-3-Clause
** Copyright Contributors to the OpenEXR Project.
*/

#ifndef OPENEXR_BASE_H
#define OPENEXR_BASE_H

#include "openexr_conf.h"

#include <stddef.h>

#ifdef __cplusplus
extern "C" {
#endif

/** @file */

/** @brief Retrieve the current library version. The @p extra string is for
 * custom installs, and is a static string, do not free the returned
 * pointer.
 */
EXR_EXPORT void
exr_get_library_version (int* maj, int* min, int* patch, const char** extra);

/** 
 * @defgroup SafetyChecks Controls for internal safety checks
 * @{
 */

/** @brief Limit the size of image allowed to be parsed or created by
 * the library.
 *
 * This is used as a safety check against corrupt files, but can also
 * serve to avoid potential issues on machines which have very
 * constrained RAM.
 *
 * These values are among the only globals in the core layer of
 * OpenEXR. The intended use is for applications to define a global
 * default, which will be combined with the values provided to the
 * individual context creation routine. The values are used to check
 * against parsed header values. This adds some level of safety from
 * memory overruns where a corrupt file given to the system may cause
 * a large allocation to happen, enabling buffer overruns or other
 * potential security issue.
 *
 * These global values are combined with the values in
 * \ref exr_context_initializer_t using the following rules:
 *
 * 1. negative values are ignored.
 *
 * 2. if either value has a positive (non-zero) value, and the other
 *    has 0, the positive value is preferred.
 *
 * 3. If both are positive (non-zero), the minimum value is used.
 *
 * 4. If both values are 0, this disables the constrained size checks.
 *
 * This function does not fail.
 */
EXR_EXPORT void exr_set_default_maximum_image_size (int w, int h);

/** @brief Retrieve the global default maximum image size.
 *
 * This function does not fail.
 */
EXR_EXPORT void exr_get_default_maximum_image_size (int* w, int* h);

/** @brief Limit the size of an image tile allowed to be parsed or
 * created by the library.
 *
 * Similar to image size, this places constraints on the maximum tile
 * size as a safety check against bad file data
 *
 * This is used as a safety check against corrupt files, but can also
 * serve to avoid potential issues on machines which have very
 * constrained RAM
 *
 * These values are among the only globals in the core layer of
 * OpenEXR. The intended use is for applications to define a global
 * default, which will be combined with the values provided to the
 * individual context creation routine. The values are used to check
 * against parsed header values. This adds some level of safety from
 * memory overruns where a corrupt file given to the system may cause
 * a large allocation to happen, enabling buffer overruns or other
 * potential security issue.
 *
 * These global values are combined with the values in
 * \ref exr_context_initializer_t using the following rules:
 *
 * 1. negative values are ignored.
 *
 * 2. if either value has a positive (non-zero) value, and the other
 *    has 0, the positive value is preferred.
 *
 * 3. If both are positive (non-zero), the minimum value is used.
 *
 * 4. If both values are 0, this disables the constrained size checks.
 *
 * This function does not fail.
 */
EXR_EXPORT void exr_set_default_maximum_tile_size (int w, int h);

/** @brief Retrieve the global maximum tile size.
 *
 * This function does not fail.
 */
EXR_EXPORT void exr_get_default_maximum_tile_size (int* w, int* h);

/** @} */

/**
 * @defgroup CompressionDefaults Provides default compression settings
 * @{
 */

/** @brief Assigns a default zip compression level.
 *
 * This value may be controlled separately on each part, but this
 * global control determines the initial value.
 */
EXR_EXPORT void exr_set_default_zip_compression_level (int l);

/** @brief Retrieve the global default zip compression value
 */
EXR_EXPORT void exr_get_default_zip_compression_level (int* l);

/** @brief Assigns a default DWA compression quality level.
 *
 * This value may be controlled separately on each part, but this
 * global control determines the initial value.
 */
EXR_EXPORT void exr_set_default_dwa_compression_quality (float q);

/** @brief Retrieve the global default dwa compression quality
 */
EXR_EXPORT void exr_get_default_dwa_compression_quality (float* q);

/** @} */

/**
 * @defgroup MemoryAllocators Provides global control over memory allocators
 * @{
 */

/** @brief Function pointer used to hold a malloc-like routine.
 *
 * Providing these to a context will override what memory is used to
 * allocate the context itself, as well as any allocations which
 * happen during processing of a file or stream. This can be used by
 * systems which provide rich malloc tracking routines to override the
 * internal allocations performed by the library.
 *
 * This function is expected to allocate and return a new memory
 * handle, or `NULL` if allocation failed (which the library will then
 * handle and return an out-of-memory error).
 *
 * If one is provided, both should be provided.
 * @sa exr_memory_free_func_t
 */
typedef void* (*exr_memory_allocation_func_t) (size_t bytes);

/** @brief Function pointer used to hold a free-like routine.
 *
 * Providing these to a context will override what memory is used to
 * allocate the context itself, as well as any allocations which
 * happen during processing of a file or stream. This can be used by
 * systems which provide rich malloc tracking routines to override the
 * internal allocations performed by the library.
 *
 * This function is expected to return memory to the system, ala free
 * from the C library.
 *
 * If providing one, probably need to provide both routines.
 * @sa exr_memory_allocation_func_t
 */
typedef void (*exr_memory_free_func_t) (void* ptr);

/** @brief Allow the user to override default allocator used internal
 * allocations necessary for files, attributes, and other temporary
 * memory.
 *
 * These routines may be overridden when creating a specific context,
 * however this provides global defaults such that the default can be
 * applied.
 *
 * If either pointer is 0, the appropriate malloc/free routine will be
 * substituted.
 *
 * This function does not fail.
 */
EXR_EXPORT void exr_set_default_memory_routines (
    exr_memory_allocation_func_t alloc_func, exr_memory_free_func_t free_func);

/** @} */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* OPENEXR_BASE_H */
                                                                                                             usr/include/OpenEXR/openexr_chunkio.h                                                               0000644 0000000 0000000 00000010772 14223432711 016337  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*
** SPDX-License-Identifier: BSD-3-Clause
** Copyright Contributors to the OpenEXR Project.
*/

#ifndef OPENEXR_CORE_CHUNKIO_H
#define OPENEXR_CORE_CHUNKIO_H

#include "openexr_part.h"

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/** @file */

/**
 * Struct describing raw data information about a chunk.
 *
 * A chunk is the generic term for a pixel data block in an EXR file,
 * as described in the OpenEXR File Layout documentation. This is
 * common between all different forms of data that can be stored.
 */
typedef struct
{
    int32_t idx;

    /** For tiles, this is the tilex; for scans it is the x. */
    int32_t start_x;
    /** For tiles, this is the tiley; for scans it is the scanline y. */
    int32_t start_y;
    int32_t height; /**< For this chunk. */
    int32_t width;  /**< For this chunk. */

    uint8_t level_x; /**< For tiled files. */
    uint8_t level_y; /**< For tiled files. */

    uint8_t type;
    uint8_t compression;

    uint64_t data_offset;
    uint64_t packed_size;
    uint64_t unpacked_size;

    uint64_t sample_count_data_offset;
    uint64_t sample_count_table_size;
} exr_chunk_info_t;

EXR_EXPORT
exr_result_t exr_read_scanline_chunk_info (
    exr_const_context_t ctxt, int part_index, int y, exr_chunk_info_t* cinfo);

EXR_EXPORT
exr_result_t exr_read_tile_chunk_info (
    exr_const_context_t ctxt,
    int                 part_index,
    int                 tilex,
    int                 tiley,
    int                 levelx,
    int                 levely,
    exr_chunk_info_t*   cinfo);

/** Read the packed data block for a chunk.
 *
 * This assumes that the buffer pointed to by @p packed_data is
 * large enough to hold the chunk block info packed_size bytes.
 */
EXR_EXPORT
exr_result_t exr_read_chunk (
    exr_const_context_t     ctxt,
    int                     part_index,
    const exr_chunk_info_t* cinfo,
    void*                   packed_data);

/**
 * Read chunk for deep data.
 *
 * This allows one to read the packed data, the sample count data, or both.
 * \c exr_read_chunk also works to read deep data packed data,
 * but this is a routine to get the sample count table and the packed
 * data in one go, or if you want to pre-read the sample count data,
 * you can get just that buffer.
 */
EXR_EXPORT
exr_result_t exr_read_deep_chunk (
    exr_const_context_t     ctxt,
    int                     part_index,
    const exr_chunk_info_t* cinfo,
    void*                   packed_data,
    void*                   sample_data);

/**************************************/

/** Initialize a \c exr_chunk_info_t structure when encoding scanline
 * data (similar to read but does not do anything with a chunk
 * table).
 */
EXR_EXPORT
exr_result_t exr_write_scanline_chunk_info (
    exr_context_t ctxt, int part_index, int y, exr_chunk_info_t* cinfo);

/** Initialize a \c exr_chunk_info_t structure when encoding tiled data
 * (similar to read but does not do anything with a chunk table).
 */
EXR_EXPORT
exr_result_t exr_write_tile_chunk_info (
    exr_context_t     ctxt,
    int               part_index,
    int               tilex,
    int               tiley,
    int               levelx,
    int               levely,
    exr_chunk_info_t* cinfo);

/**
 * @p y must the appropriate starting y for the specified chunk.
 */
EXR_EXPORT
exr_result_t exr_write_scanline_chunk (
    exr_context_t ctxt,
    int           part_index,
    int           y,
    const void*   packed_data,
    uint64_t      packed_size);

/**
 * @p y must the appropriate starting y for the specified chunk.
 */
EXR_EXPORT
exr_result_t exr_write_deep_scanline_chunk (
    exr_context_t ctxt,
    int           part_index,
    int           y,
    const void*   packed_data,
    uint64_t      packed_size,
    uint64_t      unpacked_size,
    const void*   sample_data,
    uint64_t      sample_data_size);

EXR_EXPORT
exr_result_t exr_write_tile_chunk (
    exr_context_t ctxt,
    int           part_index,
    int           tilex,
    int           tiley,
    int           levelx,
    int           levely,
    const void*   packed_data,
    uint64_t      packed_size);

EXR_EXPORT
exr_result_t exr_write_deep_tile_chunk (
    exr_context_t ctxt,
    int           part_index,
    int           tilex,
    int           tiley,
    int           levelx,
    int           levely,
    const void*   packed_data,
    uint64_t      packed_size,
    uint64_t      unpacked_size,
    const void*   sample_data,
    uint64_t      sample_data_size);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* OPENEXR_CORE_CHUNKIO_H */
      usr/include/OpenEXR/openexr_coding.h                                                                0000644 0000000 0000000 00000010345 14223432711 016136  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*
** SPDX-License-Identifier: BSD-3-Clause
** Copyright Contributors to the OpenEXR Project.
*/

#ifndef OPENEXR_CORE_CODING_H
#define OPENEXR_CORE_CODING_H

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/** @file */

/**
 * Enum for use in a custom allocator in the encode/decode pipelines
 * (that is, so the implementor knows whether to allocate on which
 * device based on the buffer disposition).
 */
typedef enum exr_transcoding_pipeline_buffer_id
{
    EXR_TRANSCODE_BUFFER_PACKED,
    EXR_TRANSCODE_BUFFER_UNPACKED,
    EXR_TRANSCODE_BUFFER_COMPRESSED,
    EXR_TRANSCODE_BUFFER_SCRATCH1,
    EXR_TRANSCODE_BUFFER_SCRATCH2,
    EXR_TRANSCODE_BUFFER_PACKED_SAMPLES,
    EXR_TRANSCODE_BUFFER_SAMPLES
} exr_transcoding_pipeline_buffer_id_t;

/** @brief Struct for negotiating buffers when decoding/encoding
 * chunks of data.
 *
 * This is generic and meant to negotiate exr data bi-directionally,
 * in that the same structure is used for both decoding and encoding
 * chunks for read and write, respectively.
 *
 * The first half of the structure will be filled by the library, and
 * the caller is expected to fill the second half appropriately.
 */
typedef struct
{
    /**************************************************
     * Elements below are populated by the library when
     * decoding is initialized/updated and must be left
     * untouched when using the default decoder routines.
     **************************************************/

    /** Channel name.
     *
     * This is provided as a convenient reference. Do not free, this
     * refers to the internal data structure in the context.
     */
    const char* channel_name;

    /** Number of lines for this channel in this chunk.
     *
     * May be 0 or less than overall image height based on sampling
     * (i.e. when in 4:2:0 type sampling)
     */
    int32_t height;

    /** Width in pixel count.
     *
     * May be 0 or less than overall image width based on sampling
     * (i.e. 4:2:2 will have some channels have fewer values).
     */
    int32_t width;

    /** Horizontal subsampling information. */
    int32_t x_samples;
    /** Vertical subsampling information. */
    int32_t y_samples;

    /** Linear flag from channel definition (used by b44). */
    uint8_t p_linear;

    /** How many bytes per pixel this channel consumes (2 for float16,
     * 4 for float32/uint32).
     */
    int8_t bytes_per_element;

    /** Small form of exr_pixel_type_t enum (EXR_PIXEL_UINT/HALF/FLOAT). */
    uint16_t data_type;

    /**************************************************
     * Elements below must be edited by the caller
     * to control encoding/decoding.
     **************************************************/

    /** How many bytes per pixel the input is or output should be
     * (2 for float16, 4 for float32/uint32). Defaults to same
     * size as input.
     */
    int16_t user_bytes_per_element;

    /** Small form of exr_pixel_type_t enum
     * (EXR_PIXEL_UINT/HALF/FLOAT). Defaults to same type as input.
     */
    uint16_t user_data_type;

    /** Increment to get to next pixel.
     *
     * This is in bytes. Must be specified when the decode pointer is
     * specified (and always for encode).
     *
     * This is useful for implementing transcoding generically of
     * planar or interleaved data. For planar data, where the layout
     * is RRRRRGGGGGBBBBB, you can pass in 1 * bytes per component.
     */

    int32_t user_pixel_stride;

    /** When \c lines > 1 for a chunk, this is the increment used to get
     * from beginning of line to beginning of next line.
     *
     * This is in bytes. Must be specified when the decode pointer is
     * specified (and always for encode).
     */
    int32_t user_line_stride;

    /** This data member has different requirements reading vs
     * writing. When reading, if this is left as `NULL`, the channel
     * will be skipped during read and not filled in.  During a write
     * operation, this pointer is considered const and not
     * modified. To make this more clear, a union is used here.
     */
    union
    {
        uint8_t*       decode_to_ptr;
        const uint8_t* encode_from_ptr;
    };
} exr_coding_channel_info_t;

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* OPENEXR_CORE_CODING_H */
                                                                                                                                                                                                                                                                                           usr/include/OpenEXR/openexr_conf.h                                                                  0000644 0000000 0000000 00000002014 14223432711 015612  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*
** SPDX-License-Identifier: BSD-3-Clause
** Copyright Contributors to the OpenEXR Project.
*/

#ifndef OPENEXR_CONF_H
#define OPENEXR_CONF_H
#pragma once

#include "OpenEXRConfig.h"

/// \addtogroup ExportMacros
/// @{

// are we making a DLL under windows (might be msvc or mingw or others)
#if defined(OPENEXR_DLL)

// when building as a DLL for windows, typical dllexport/import case
// where we need to switch depending on whether we are compiling
// internally or not
#    if defined(OPENEXRCORE_EXPORTS)
#        define EXR_EXPORT __declspec(dllexport)
#    else
#        define EXR_EXPORT __declspec(dllimport)
#    endif

#else

#    define EXR_EXPORT OPENEXR_EXPORT

#endif

/*
 * MSVC does have printf format checks, but it is not in the form of a
 * function attribute, so just skip for non-GCC/clang builds
