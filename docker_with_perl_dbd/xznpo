{
    int			newfd;
    int			in;
    unsigned char	length;
    char		buf[256];
    struct sockaddr_un	*sunaddr;

    prmsg(2,"PTSAccept(%x->%d)\n",ciptr,ciptr->fd);

    if( (in=read(ciptr->fd,&length,1)) <= 0 ){
	if( !in ) {
		prmsg(2,
		"PTSAccept: Incoming connection closed\n");
		}
	else {
		prmsg(1,
	"PTSAccept: Error reading incoming connection. errno=%d \n",
								errno);
		}
	*status = TRANS_ACCEPT_MISC_ERROR;
	return -1;
    }

    if( (in=read(ciptr->fd,buf,length)) <= 0 ){
	if( !in ) {
		prmsg(2,
		"PTSAccept: Incoming connection closed\n");
		}
	else {
		prmsg(1,
"PTSAccept: Error reading device name for new connection. errno=%d \n",
								errno);
		}
	*status = TRANS_ACCEPT_MISC_ERROR;
	return -1;
    }

    buf[length] = '\0';

    if( (newfd=open(buf,O_RDWR)) < 0 ) {
	prmsg(1, "PTSAccept: Failed to open %s\n",buf);
	*status = TRANS_ACCEPT_MISC_ERROR;
	return -1;
    }

    write(newfd,"1",1);

    /*
     * Everything looks good: fill in the XtransConnInfo structure.
     */

    newciptr->addrlen=ciptr->addrlen;
    if( (newciptr->addr = malloc(newciptr->addrlen)) == NULL ) {
	prmsg(1,"PTSAccept: failed to allocate memory for peer addr\n");
	close(newfd);
	*status = TRANS_ACCEPT_BAD_MALLOC;
	return -1;
    }

    memcpy(newciptr->addr,ciptr->addr,newciptr->addrlen);

    newciptr->peeraddrlen=sizeof(struct sockaddr_un);
    if( (sunaddr = malloc(newciptr->peeraddrlen)) == NULL ) {
	prmsg(1,"PTSAccept: failed to allocate memory for peer addr\n");
	free(newciptr->addr);
	close(newfd);
	*status = TRANS_ACCEPT_BAD_MALLOC;
	return -1;
    }

    sunaddr->sun_family=AF_UNIX;
    strcpy(sunaddr->sun_path,buf);
#if defined(BSD44SOCKETS)
    sunaddr->sun_len=strlen(sunaddr->sun_path);
#endif

    newciptr->peeraddr=(char *)sunaddr;

    *status = 0;

    return newfd;
}

#endif /* TRANS_SERVER */
#endif /* LOCAL_TRANS_PTS */


#ifdef LOCAL_TRANS_NAMED

/* NAMED */

#ifdef TRANS_CLIENT

static int
TRANS(NAMEDOpenClient)(XtransConnInfo ciptr, const char *port)

{
#ifdef NAMEDNODENAME
    int			fd;
    char		server_path[64];
    struct stat		filestat;
# ifndef __sun
    extern int		isastream(int);
# endif
#endif

    prmsg(2,"NAMEDOpenClient(%s)\n", port);

#if !defined(NAMEDNODENAME)
    prmsg(1,"NAMEDOpenClient: Protocol is not supported by a NAMED connection\n");
    return -1;
#else
    if ( port && *port ) {
	if( *port == '/' ) { /* A full pathname */
		(void) snprintf(server_path, sizeof(server_path), "%s", port);
	    } else {
		(void) snprintf(server_path, sizeof(server_path), "%s%s", NAMEDNODENAME, port);
	    }
    } else {
	(void) snprintf(server_path, sizeof(server_path), "%s%ld", NAMEDNODENAME, (long)getpid());
    }

    if ((fd = open(server_path, O_RDWR)) < 0) {
	prmsg(1,"NAMEDOpenClient: Cannot open %s for NAMED connection\n", server_path);
	return -1;
    }

    if (fstat(fd, &filestat) < 0 ) {
	prmsg(1,"NAMEDOpenClient: Cannot stat %s for NAMED connection\n", server_path);
	(void) close(fd);
	return -1;
    }

    if ((filestat.st_mode & S_IFMT) != S_IFIFO) {
	prmsg(1,"NAMEDOpenClient: Device %s is not a FIFO\n", server_path);
	/* Is this really a failure? */
	(void) close(fd);
	return -1;
    }


    if (isastream(fd) <= 0) {
	prmsg(1,"NAMEDOpenClient: %s is not a streams device\n", server_path);
	(void) close(fd);
	return -1;
    }

    /*
     * Everything looks good: fill in the XtransConnInfo structure.
     */

    if (TRANS(FillAddrInfo) (ciptr, server_path, server_path) == 0)
    {
	prmsg(1,"NAMEDOpenClient: failed to fill in addr info\n");
	close(fd);
	return -1;
    }

    return(fd);

#endif /* !NAMEDNODENAME */
}

#endif /* TRANS_CLIENT */


#ifdef TRANS_SERVER


#ifdef NAMEDNODENAME
static int
TRANS(NAMEDOpenPipe)(const char *server_path)
{
    int			fd, pipefd[2];
    struct stat		sbuf;
    int			mode;

    prmsg(2,"NAMEDOpenPipe(%s)\n", server_path);

#ifdef HAS_STICKY_DIR_BIT
    mode = 01777;
#else
    mode = 0777;
#endif
    if (trans_mkdir(X_STREAMS_DIR, mode) == -1) {
	prmsg (1, "NAMEDOpenPipe: mkdir(%s) failed, errno = %d\n",
	       X_STREAMS_DIR, errno);
	return(-1);
    }

    if(stat(server_path, &sbuf) != 0) {
	if (errno == ENOENT) {
	    if ((fd = creat(server_path, (mode_t)0666)) == -1) {
		prmsg(1, "NAMEDOpenPipe: Can't open %s\n", server_path);
		return(-1);
	    }
	    if (fchmod(fd, (mode_t)0666) < 0) {
		prmsg(1, "NAMEDOpenPipe: Can't chmod %s\n", server_path);
		close(fd);
		return(-1);
	    }
	    close(fd);
	} else {
	    prmsg(1, "NAMEDOpenPipe: stat on %s failed\n", server_path);
	    return(-1);
	}
    }

    if( pipe(pipefd) != 0) {
	prmsg(1, "NAMEDOpenPipe: pipe() failed, errno=%d\n",errno);
	return(-1);
    }

    if( ioctl(pipefd[0], I_PUSH, "connld") != 0) {
	prmsg(1, "NAMEDOpenPipe: ioctl(I_PUSH,\"connld\") failed, errno=%d\n",errno);
	close(pipefd[0]);
	close(pipefd[1]);
	return(-1);
    }

    if( fattach(pipefd[0], server_path) != 0) {
	prmsg(1, "NAMEDOpenPipe: fattach(%s) failed, errno=%d\n", server_path,errno);
	close(pipefd[0]);
	close(pipefd[1]);
	return(-1);
    }

    return(pipefd[1]);
}
#endif

static int
TRANS(NAMEDOpenServer)(XtransConnInfo ciptr, const char *port)
{
#ifdef NAMEDNODENAME
    int			fd;
    char		server_path[64];
#endif

    prmsg(2,"NAMEDOpenServer(%s)\n", port);

#if !defined(NAMEDNODENAME)
    prmsg(1,"NAMEDOpenServer: Protocol is not supported by a NAMED connection\n");
    return -1;
#else
    if ( port && *port ) {
	if( *port == '/' ) { /* A full pathname */
	    (void) snprintf(server_path, sizeof(server_path), "%s", port);
	} else {
	    (void) snprintf(server_path, sizeof(server_path), "%s%s",
			    NAMEDNODENAME, port);
	}
    } else {
	(void) snprintf(server_path, sizeof(server_path), "%s%ld",
		       NAMEDNODENAME, (long)getpid());
    }

    fd = TRANS(NAMEDOpenPipe)(server_path);
    if (fd < 0) {
	return -1;
    }

    /*
     * Everything looks good: fill in the XtransConnInfo structure.
     */

    if (TRANS(FillAddrInfo) (ciptr, server_path, server_path) == 0)
    {
	prmsg(1,"NAMEDOpenServer: failed to fill in addr info\n");
	TRANS(LocalClose)(ciptr);
	return -1;
    }

    return fd;

#endif /* !NAMEDNODENAME */
}

static int
TRANS(NAMEDResetListener) (XtransConnInfo ciptr)

{
  struct sockaddr_un      *sockname=(struct sockaddr_un *) ciptr->addr;
  struct stat     statb;

  prmsg(2,"NAMEDResetListener(%p, %d)\n", ciptr, ciptr->fd);

  if (ciptr->fd != -1) {
    /*
     * see if the pipe has disappeared
     */

    if (stat (sockname->sun_path, &statb) == -1 ||
	(statb.st_mode & S_IFMT) != S_IFIFO) {
      prmsg(3, "Pipe %s trashed, recreating\n", sockname->sun_path);
      TRANS(LocalClose)(ciptr);
      ciptr->fd = TRANS(NAMEDOpenPipe)(sockname->sun_path);
      if (ciptr->fd >= 0)
	  return TRANS_RESET_NEW_FD;
      else
	  return TRANS_CREATE_LISTENER_FAILED;
    }
  }
  return TRANS_RESET_NOOP;
}

static int
TRANS(NAMEDAccept)(XtransConnInfo ciptr, XtransConnInfo newciptr, int *status)

{
    struct strrecvfd str;

    prmsg(2,"NAMEDAccept(%p->%d)\n", ciptr, ciptr->fd);

    if( ioctl(ciptr->fd, I_RECVFD, &str ) < 0 ) {
	prmsg(1, "NAMEDAccept: ioctl(I_RECVFD) failed, errno=%d\n", errno);
	*status = TRANS_ACCEPT_MISC_ERROR;
	return(-1);
    }

    /*
     * Everything looks good: fill in the XtransConnInfo structure.
     */
    newciptr->family=ciptr->family;
    newciptr->addrlen=ciptr->addrlen;
    if( (newciptr->addr = malloc(newciptr->addrlen)) == NULL ) {
	prmsg(1,
	      "NAMEDAccept: failed to allocate memory for pipe addr\n");
	close(str.fd);
	*status = TRANS_ACCEPT_BAD_MALLOC;
	return -1;
    }

    memcpy(newciptr->addr,ciptr->addr,newciptr->addrlen);

    newciptr->peeraddrlen=newciptr->addrlen;
    if( (newciptr->peeraddr = malloc(newciptr->peeraddrlen)) == NULL ) {
	prmsg(1,
	"NAMEDAccept: failed to allocate memory for peer addr\n");
	free(newciptr->addr);
	close(str.fd);
	*status = TRANS_ACCEPT_BAD_MALLOC;
	return -1;
    }

    memcpy(newciptr->peeraddr,newciptr->addr,newciptr->peeraddrlen);

    *status = 0;

    return str.fd;
}

#endif /* TRANS_SERVER */

#endif /* LOCAL_TRANS_NAMED */



#if defined(LOCAL_TRANS_SCO)

/*
 * connect_spipe is used by the SCO connection type.
 */
static int
connect_spipe(int fd1, int fd2)
{
    long temp;
    struct strfdinsert sbuf;

    sbuf.databuf.maxlen = -1;
    sbuf.databuf.len = -1;
    sbuf.databuf.buf = NULL;
    sbuf.ctlbuf.maxlen = sizeof(long);
    sbuf.ctlbuf.len = sizeof(long);
    sbuf.ctlbuf.buf = (caddr_t)&temp;
    sbuf.offset = 0;
    sbuf.fildes = fd2;
    sbuf.flags = 0;

    if( ioctl(fd1, I_FDINSERT, &sbuf) < 0 )
	return(-1);

    return(0);
}

/*
 * named_spipe is used by the SCO connection type.
 */

static int
named_spipe(int fd, char *path)

{
    int oldUmask, ret;
    struct stat sbuf;

    oldUmask = umask(0);

    (void) fstat(fd, &sbuf);
    ret = mknod(path, 0020666, sbuf.st_rdev);

    umask(oldUmask);

    if (ret < 0) {
	ret = -1;
    } else {
	ret = fd;
    }

    return(ret);
}

#endif /* defined(LOCAL_TRANS_SCO) */




#ifdef LOCAL_TRANS_SCO
/* SCO */

/*
 * 2002-11-09 (jkj@sco.com)
 *
 * This code has been modified to match what is in the actual SCO X server.
 * This greatly helps inter-operability between X11R6 and X11R5 (the native
 * SCO server). Mainly, it relies on streams nodes existing in /dev, not
 * creating them or unlinking them, which breaks the native X server.
 *
 * However, this is only for the X protocol. For all other protocols, we
 * do in fact create the nodes, as only X11R6 will use them, and this makes
 * it possible to have both types of clients running, otherwise we get all
 * kinds of nasty errors on startup for anything that doesnt use the X
 * protocol (like SM, when KDE starts up).
 */

#ifdef TRANS_CLIENT

static int
TRANS(SCOOpenClient)(XtransConnInfo ciptr, const char *port)
{
#ifdef SCORNODENAME
    int			fd, server, fl, ret;
    char		server_path[64];
    struct strbuf	ctlbuf;
    unsigned long	alarm_time;
    void		(*savef)();
    long		temp;
    extern int	getmsg(), putmsg();
#endif

    prmsg(2,"SCOOpenClient(%s)\n", port);
    if (!port || !port[0])
	port = "0";

#if !defined(SCORNODENAME)
    prmsg(2,"SCOOpenClient: Protocol is not supported by a SCO connection\n");
    return -1;
#else
    (void) sprintf(server_path, SCORNODENAME, port);

    if ((server = open(server_path, O_RDWR)) < 0) {
	prmsg(1,"SCOOpenClient: failed to open %s\n", server_path);
	return -1;
    }

    if ((fd = open(DEV_SPX, O_RDWR)) < 0) {
	prmsg(1,"SCOOpenClient: failed to open %s\n", DEV_SPX);
	close(server);
	return -1;
    }

    (void) write(server, &server, 1);
    ctlbuf.len = 0;
    ctlbuf.maxlen = sizeof(long);
    ctlbuf.buf = (caddr_t)&temp;
    fl = 0;

    savef = signal(SIGALRM, _dummy);
    alarm_time = alarm(10);

    ret = getmsg(server, &ctlbuf, 0, &fl);

    (void) alarm(alarm_time);
    (void) signal(SIGALRM, savef);

    if (ret < 0) {
	prmsg(1,"SCOOpenClient: error from getmsg\n");
	close(fd);
	close(server);
	return -1;
    }

    /* The msg we got via getmsg is the result of an
     * I_FDINSERT, so if we do a putmsg with whatever
     * we recieved, we're doing another I_FDINSERT ...
     */
    (void) putmsg(fd, &ctlbuf, 0, 0);
    (void) fcntl(fd,F_SETFL,fcntl(fd,F_GETFL,0)|O_NDELAY);

    (void) close(server);

    /*
     * Everything looks good: fill in the XtransConnInfo structure.
     */

#if defined(X11_t) && defined(__SCO__)
    ciptr->flags |= TRANS_NOUNLINK;
#endif
    if (TRANS(FillAddrInfo) (ciptr, server_path, server_path) == 0)
    {
	prmsg(1,"SCOOpenClient: failed to fill addr info\n");
	close(fd);
	return -1;
    }

    return(fd);

#endif  /* !SCORNODENAME */
}

#endif /* TRANS_CLIENT */


#ifdef TRANS_SERVER

static int
TRANS(SCOOpenServer)(XtransConnInfo ciptr, const char *port)
{
#ifdef SCORNODENAME
    char		serverR_path[64];
    char		serverS_path[64];
    struct flock	mylock;
    int			fdr = -1;
    int			fds = -1;
#endif

    prmsg(2,"SCOOpenServer(%s)\n", port);
    if (!port || !port[0])
	port = "0";

#if !defined(SCORNODENAME)
    prmsg(1,"SCOOpenServer: Protocol is not supported by a SCO connection\n");
    return -1;
#else
    (void) sprintf(serverR_path, SCORNODENAME, port);
    (void) sprintf(serverS_path, SCOSNODENAME, port);

#if !defined(X11_t) || !defined(__SCO__)
    unlink(serverR_path);
    unlink(serverS_path);

    if ((fds = open(DEV_SPX, O_RDWR)) < 0 ||
	(fdr = open(DEV_SPX, O_RDWR)) < 0 ) {
	prmsg(1,"SCOOpenServer: failed to open %s\n", DEV_SPX);
	if (fds >= 0)
		close(fds);
	if (fdr >= 0)
		close(fdr);
	return -1;
    }

    if (named_spipe (fds, serverS_path) == -1) {
	prmsg(1,"SCOOpenServer: failed to create %s\n", serverS_path);
	close (fdr);
	close (fds);
	return -1;
    }

    if (named_spipe (fdr, serverR_path) == -1) {
	prmsg(1,"SCOOpenServer: failed to create %s\n", serverR_path);
	close (fdr);
	close (fds);
	return -1;
    }
#else /* X11_t */

    fds = open (serverS_path, O_RDWR | O_NDELAY);
    if (fds < 0) {
	prmsg(1,"SCOOpenServer: failed to open %s\n", serverS_path);
	return -1;
    }

    /*
     * Lock the connection device for the duration of the server.
     * This resolves multiple server starts especially on SMP machines.
     */
    mylock.l_type	= F_WRLCK;
    mylock.l_whence	= 0;
    mylock.l_start	= 0;
    mylock.l_len	= 0;
    if (fcntl (fds, F_SETLK, &mylock) < 0) {
	prmsg(1,"SCOOpenServer: failed to lock %s\n", serverS_path);
	close (fds);
	return -1;
    }

    fdr = open (serverR_path, O_RDWR | O_NDELAY);
    if (fdr < 0) {
	prmsg(1,"SCOOpenServer: failed to open %s\n", serverR_path);
	close (fds);
	return -1;
    }
#endif /* X11_t */

    if (connect_spipe(fds, fdr)) {
	prmsg(1,"SCOOpenServer: ioctl(I_FDINSERT) failed on %s\n",
	      serverS_path);
	close (fdr);
	close (fds);
	return -1;
    }

    /*
     * Everything looks good: fill in the XtransConnInfo structure.
     */

#if defined(X11_t) && defined(__SCO__)
    ciptr->flags |= TRANS_NOUNLINK;
#endif
    if (TRANS(FillAddrInfo) (ciptr, serverS_path, serverR_path) == 0) {
	prmsg(1,"SCOOpenServer: failed to fill in addr info\n");
	close(fds);
	close(fdr);
	return -1;
    }

    return(fds);

#endif /* !SCORNODENAME */
}

static int
TRANS(SCOAccept)(XtransConnInfo ciptr, XtransConnInfo newciptr, int *status)
{
    char		c;
    int			fd;

    prmsg(2,"SCOAccept(%d)\n", ciptr->fd);

    if (read(ciptr->fd, &c, 1) < 0) {
	prmsg(1,"SCOAccept: can't read from client\n");
	*status = TRANS_ACCEPT_MISC_ERROR;
	return(-1);
    }

    if( (fd = open(DEV_SPX, O_RDWR)) < 0 ) {
	prmsg(1,"SCOAccept: can't open \"%s\"\n",DEV_SPX);
	*status = TRANS_ACCEPT_MISC_ERROR;
	return(-1);
    }

    if (connect_spipe (ciptr->fd, fd) < 0) {
	prmsg(1,"SCOAccept: ioctl(I_FDINSERT) failed\n");
	close (fd);
	*status = TRANS_ACCEPT_MISC_ERROR;
	return -1;
    }

    /*
     * Everything looks good: fill in the XtransConnInfo structure.
     */

    newciptr->addrlen=ciptr->addrlen;
    if( (newciptr->addr = malloc(newciptr->addrlen)) == NULL ) {
	prmsg(1,
	      "SCOAccept: failed to allocate memory for peer addr\n");
	close(fd);
	*status = TRANS_ACCEPT_BAD_MALLOC;
	return -1;
    }

    memcpy(newciptr->addr,ciptr->addr,newciptr->addrlen);
#if defined(__SCO__)
    newciptr->flags |= TRANS_NOUNLINK;
#endif

    newciptr->peeraddrlen=newciptr->addrlen;
    if( (newciptr->peeraddr = malloc(newciptr->peeraddrlen)) == NULL ) {
	prmsg(1,
	      "SCOAccept: failed to allocate memory for peer addr\n");
	free(newciptr->addr);
	close(fd);
	*status = TRANS_ACCEPT_BAD_MALLOC;
	return -1;
    }

    memcpy(newciptr->peeraddr,newciptr->addr,newciptr->peeraddrlen);

    *status = 0;

    return(fd);
}

#endif /* TRANS_SERVER */
#endif /* LOCAL_TRANS_SCO */



#ifdef TRANS_REOPEN
#ifdef LOCAL_TRANS_PTS

static int
TRANS(PTSReopenServer)(XtransConnInfo ciptr, int fd, const char *port)

{
#ifdef PTSNODENAME
    char server_path[64];
#endif

    prmsg(2,"PTSReopenServer(%d,%s)\n", fd, port);

#if !defined(PTSNODENAME)
    prmsg(1,"PTSReopenServer: Protocol is not supported by a pts connection\n");
    return 0;
#else
    if (port && *port ) {
	if( *port == '/' ) { /* A full pathname */
	    snprintf(server_path, sizeof(server_path), "%s", port);
	} else {
	    snprintf(server_path, sizeof(server_path), "%s%s",
		     PTSNODENAME, port);
	}
    } else {
	snprintf(server_path, sizeof(server_path), "%s%ld",
		PTSNODENAME, (long)getpid());
    }

    if (TRANS(FillAddrInfo) (ciptr, server_path, server_path) == 0)
    {
	prmsg(1,"PTSReopenServer: failed to fill in addr info\n");
	return 0;
    }

    return 1;

#endif /* !PTSNODENAME */
}

#endif /* LOCAL_TRANS_PTS */

#ifdef LOCAL_TRANS_NAMED

static int
TRANS(NAMEDReopenServer)(XtransConnInfo ciptr, int fd _X_UNUSED, const char *port)

{
#ifdef NAMEDNODENAME
    char server_path[64];
#endif

    prmsg(2,"NAMEDReopenServer(%s)\n", port);

#if !defined(NAMEDNODENAME)
    prmsg(1,"NAMEDReopenServer: Protocol is not supported by a NAMED connection\n");
    return 0;
#else
    if ( port && *port ) {
	if( *port == '/' ) { /* A full pathname */
	    snprintf(server_path, sizeof(server_path),"%s", port);
	} else {
	    snprintf(server_path, sizeof(server_path), "%s%s",
		     NAMEDNODENAME, port);
	}
    } else {
	snprintf(server_path, sizeof(server_path), "%s%ld",
		NAMEDNODENAME, (long)getpid());
    }

    if (TRANS(FillAddrInfo) (ciptr, server_path, server_path) == 0)
    {
	prmsg(1,"NAMEDReopenServer: failed to fill in addr info\n");
	return 0;
    }

    return 1;

#endif /* !NAMEDNODENAME */
}

#endif /* LOCAL_TRANS_NAMED */


#ifdef LOCAL_TRANS_SCO
static int
TRANS(SCOReopenServer)(XtransConnInfo ciptr, int fd, const char *port)

{
#ifdef SCORNODENAME
    char serverR_path[64], serverS_path[64];
#endif

    prmsg(2,"SCOReopenServer(%s)\n", port);
    if (!port || !port[0])
      port = "0";

#if !defined(SCORNODENAME)
    prmsg(2,"SCOReopenServer: Protocol is not supported by a SCO connection\n");
    return 0;
#else
    (void) sprintf(serverR_path, SCORNODENAME, port);
    (void) sprintf(serverS_path, SCOSNODENAME, port);

#if defined(X11_t) && defined(__SCO__)
    ciptr->flags |= TRANS_NOUNLINK;
#endif
    if (TRANS(FillAddrInfo) (ciptr, serverS_path, serverR_path) == 0)
    {
	prmsg(1, "SCOReopenServer: failed to fill in addr info\n");
	return 0;
    }

    return 1;

#endif /* SCORNODENAME */
}

#endif /* LOCAL_TRANS_SCO */

#endif /* TRANS_REOPEN */



/*
 * This table contains all of the entry points for the different local
 * connection mechanisms.
 */

typedef struct _LOCALtrans2dev {
    const char	*transname;

#ifdef TRANS_CLIENT

    int	(*devcotsopenclient)(
	XtransConnInfo, const char * /*port*/
);

#endif /* TRANS_CLIENT */

#ifdef TRANS_SERVER

    int	(*devcotsopenserver)(
	XtransConnInfo, const char * /*port*/
);

#endif /* TRANS_SERVER */

#ifdef TRANS_CLIENT

    int	(*devcltsopenclient)(
	XtransConnInfo, const char * /*port*/
);

#endif /* TRANS_CLIENT */

#ifdef TRANS_SERVER

    int	(*devcltsopenserver)(
	XtransConnInfo, const char * /*port*/
);

#endif /* TRANS_SERVER */

#ifdef TRANS_REOPEN

    int	(*devcotsreopenserver)(
	XtransConnInfo,
	int, 	/* fd */
	const char * 	/* port */
);

    int	(*devcltsreopenserver)(
	XtransConnInfo,
	int, 	/* fd */
	const char *	/* port */
);

#endif /* TRANS_REOPEN */

#ifdef TRANS_SERVER

    int (*devreset)(
	XtransConnInfo /* ciptr */
);

    int	(*devaccept)(
	XtransConnInfo, XtransConnInfo, int *
);

#endif /* TRANS_SERVER */

} LOCALtrans2dev;

static LOCALtrans2dev LOCALtrans2devtab[] = {
#ifdef LOCAL_TRANS_PTS
{"",
#ifdef TRANS_CLIENT
     TRANS(PTSOpenClient),
#endif /* TRANS_CLIENT */
#ifdef TRANS_SERVER
     TRANS(PTSOpenServer),
#endif /* TRANS_SERVER */
#ifdef TRANS_CLIENT
     TRANS(OpenFail),
#endif /* TRANS_CLIENT */
#ifdef TRANS_SERVER
     TRANS(OpenFail),
#endif /* TRANS_SERVER */
#ifdef TRANS_REOPEN
     TRANS(PTSReopenServer),
     TRANS(ReopenFail),
#endif
#ifdef TRANS_SERVER
     NULL,		/* ResetListener */
     TRANS(PTSAccept)
#endif /* TRANS_SERVER */
},

{"local",
#ifdef TRANS_CLIENT
     TRANS(PTSOpenClient),
#endif /* TRANS_CLIENT */
#ifdef TRANS_SERVER
     TRANS(PTSOpenServer),
#endif /* TRANS_SERVER */
#ifdef TRANS_CLIENT
     TRANS(OpenFail),
#endif /* TRANS_CLIENT */
#ifdef TRANS_SERVER
     TRANS(OpenFail),
#endif /* TRANS_SERVER */
#ifdef TRANS_REOPEN
     TRANS(PTSReopenServer),
     TRANS(ReopenFail),
#endif
#ifdef TRANS_SERVER
     NULL,		/* ResetListener */
     TRANS(PTSAccept)
#endif /* TRANS_SERVER */
},

{"pts",
#ifdef TRANS_CLIENT
     TRANS(PTSOpenClient),
#endif /* TRANS_CLIENT */
#ifdef TRANS_SERVER
     TRANS(PTSOpenServer),
#endif /* TRANS_SERVER */
#ifdef TRANS_CLIENT
     TRANS(OpenFail),
#endif /* TRANS_CLIENT */
#ifdef TRANS_SERVER
     TRANS(OpenFail),
#endif /* TRANS_SERVER */
#ifdef TRANS_REOPEN
     TRANS(PTSReopenServer),
     TRANS(ReopenFail),
#endif
#ifdef TRANS_SERVER
     NULL,		/* ResetListener */
     TRANS(PTSAccept)
#endif /* TRANS_SERVER */
},
#else /* !LOCAL_TRANS_PTS */
{"",
#ifdef TRANS_CLIENT
     TRANS(NAMEDOpenClient),
#endif /* TRANS_CLIENT */
#ifdef TRANS_SERVER
     TRANS(NAMEDOpenServer),
#endif /* TRANS_SERVER */
#ifdef TRANS_CLIENT
     TRANS(OpenFail),
#endif /* TRANS_CLIENT */
#ifdef TRANS_SERVER
     TRANS(OpenFail),
#endif /* TRANS_SERVER */
#ifdef TRANS_REOPEN
     TRANS(NAMEDReopenServer),
     TRANS(ReopenFail),
#endif
#ifdef TRANS_SERVER
     TRANS(NAMEDResetListener),
     TRANS(NAMEDAccept)
#endif /* TRANS_SERVER */
},

{"local",
#ifdef TRANS_CLIENT
     TRANS(NAMEDOpenClient),
#endif /* TRANS_CLIENT */
#ifdef TRANS_SERVER
     TRANS(NAMEDOpenServer),
#endif /* TRANS_SERVER */
#ifdef TRANS_CLIENT
     TRANS(OpenFail),
#endif /* TRANS_CLIENT */
#ifdef TRANS_SERVER
     TRANS(OpenFail),
#endif /* TRANS_SERVER */
#ifdef TRANS_REOPEN
