        Values will be ``nullid`` if the parent is empty.
        """

    def parentrevs(rev):
        """Like parents() but operates on revision numbers."""

    def rev(node):
        """Obtain the revision number given a node.

        Raises ``error.LookupError`` if the node is not known.
        """

    def node(rev):
        """Obtain the node value given a revision number.

        Raises ``IndexError`` if the node is not known.
        """

    def lookup(node):
        """Attempt to resolve a value to a node.

        Value can be a binary node, hex node, revision number, or a string
        that can be converted to an integer.

        Raises ``error.LookupError`` if a node could not be resolved.
        """

    def linkrev(rev):
        """Obtain the changeset revision number a revision is linked to."""

    def iscensored(rev):
        """Return whether a revision's content has been censored."""

    def commonancestorsheads(node1, node2):
        """Obtain an iterable of nodes containing heads of common ancestors.

        See ``ancestor.commonancestorsheads()``.
        """

    def descendants(revs):
        """Obtain descendant revision numbers for a set of revision numbers.

        If ``nullrev`` is in the set, this is equivalent to ``revs()``.
        """

    def heads(start=None, stop=None):
        """Obtain a list of nodes that are DAG heads, with control.

        The set of revisions examined can be limited by specifying
        ``start`` and ``stop``. ``start`` is a node. ``stop`` is an
        iterable of nodes. DAG traversal starts at earlier revision
        ``start`` and iterates forward until any node in ``stop`` is
        encountered.
        """

    def children(node):
        """Obtain nodes that are children of a node.

        Returns a list of nodes.
        """


class ifiledata(interfaceutil.Interface):
    """Storage interface for data storage of a specific file.

    This complements ``ifileindex`` and provides an interface for accessing
    data for a tracked file.
    """

    def size(rev):
        """Obtain the fulltext size of file data.

        Any metadata is excluded from size measurements.
        """

    def revision(node, raw=False):
        """Obtain fulltext data for a node.

        By default, any storage transformations are applied before the data
        is returned. If ``raw`` is True, non-raw storage transformations
        are not applied.

        The fulltext data may contain a header containing metadata. Most
        consumers should use ``read()`` to obtain the actual file data.
        """

    def rawdata(node):
        """Obtain raw data for a node."""

    def read(node):
        """Resolve file fulltext data.

        This is similar to ``revision()`` except any metadata in the data
        headers is stripped.
        """

    def renamed(node):
        """Obtain copy metadata for a node.

        Returns ``False`` if no copy metadata is stored or a 2-tuple of
        (path, node) from which this revision was copied.
        """

    def cmp(node, fulltext):
        """Compare fulltext to another revision.

        Returns True if the fulltext is different from what is stored.

        This takes copy metadata into account.

        TODO better document the copy metadata and censoring logic.
        """

    def emitrevisions(
        nodes,
        nodesorder=None,
        revisiondata=False,
        assumehaveparentrevisions=False,
        deltamode=CG_DELTAMODE_STD,
    ):
        """Produce ``irevisiondelta`` for revisions.

        Given an iterable of nodes, emits objects conforming to the
        ``irevisiondelta`` interface that describe revisions in storage.

        This method is a generator.

        The input nodes may be unordered. Implementations must ensure that a
        node's parents are emitted before the node itself. Transitively, this
        means that a node may only be emitted once all its ancestors in
        ``nodes`` have also been emitted.

        By default, emits "index" data (the ``node``, ``p1node``, and
        ``p2node`` attributes). If ``revisiondata`` is set, revision data
        will also be present on the emitted objects.

        With default argument values, implementations can choose to emit
        either fulltext revision data or a delta. When emitting deltas,
        implementations must consider whether the delta's base revision
        fulltext is available to the receiver.

        The base revision fulltext is guaranteed to be available if any of
        the following are met:

        * Its fulltext revision was emitted by this method call.
        * A delta for that revision was emitted by this method call.
        * ``assumehaveparentrevisions`` is True and the base revision is a
          parent of the node.

        ``nodesorder`` can be used to control the order that revisions are
        emitted. By default, revisions can be reordered as long as they are
        in DAG topological order (see above). If the value is ``nodes``,
        the iteration order from ``nodes`` should be used. If the value is
        ``storage``, then the native order from the backing storage layer
        is used. (Not all storage layers will have strong ordering and behavior
        of this mode is storage-dependent.) ``nodes`` ordering can force
        revisions to be emitted before their ancestors, so consumers should
        use it with care.

        The ``linknode`` attribute on the returned ``irevisiondelta`` may not
        be set and it is the caller's responsibility to resolve it, if needed.

        If ``deltamode`` is CG_DELTAMODE_PREV and revision data is requested,
        all revision data should be emitted as deltas against the revision
        emitted just prior. The initial revision should be a delta against its
        1st parent.
        """


class ifilemutation(interfaceutil.Interface):
    """Storage interface for mutation events of a tracked file."""

    def add(filedata, meta, transaction, linkrev, p1, p2):
        """Add a new revision to the store.

        Takes file data, dictionary of metadata, a transaction, linkrev,
        and parent nodes.

        Returns the node that was added.

        May no-op if a revision matching the supplied data is already stored.
        """

    def addrevision(
        revisiondata,
        transaction,
        linkrev,
        p1,
        p2,
        node=None,
        flags=0,
        cachedelta=None,
    ):
        """Add a new revision to the store and return its number.

        This is similar to ``add()`` except it operates at a lower level.

        The data passed in already contains a metadata header, if any.

        ``node`` and ``flags`` can be used to define the expected node and
        the flags to use with storage. ``flags`` is a bitwise value composed
        of the various ``REVISION_FLAG_*`` constants.

        ``add()`` is usually called when adding files from e.g. the working
        directory. ``addrevision()`` is often called by ``add()`` and for
        scenarios where revision data has already been computed, such as when
        applying raw data from a peer repo.
        """

    def addgroup(
        deltas,
        linkmapper,
        transaction,
        addrevisioncb=None,
        duplicaterevisioncb=None,
        maybemissingparents=False,
    ):
        """Process a series of deltas for storage.

        ``deltas`` is an iterable of 7-tuples of
        (node, p1, p2, linknode, deltabase, delta, flags) defining revisions
        to add.

        The ``delta`` field contains ``mpatch`` data to apply to a base
        revision, identified by ``deltabase``. The base node can be
        ``nullid``, in which case the header from the delta can be ignored
        and the delta used as the fulltext.

        ``alwayscache`` instructs the lower layers to cache the content of the
        newly added revision, even if it needs to be explicitly computed.
        This used to be the default when ``addrevisioncb`` was provided up to
        Mercurial 5.8.

        ``addrevisioncb`` should be called for each new rev as it is committed.
        ``duplicaterevisioncb`` should be called for all revs with a
        pre-existing node.

        ``maybemissingparents`` is a bool indicating whether the incoming
        data may reference parents/ancestor revisions that aren't present.
        This flag is set when receiving data into a "shallow" store that
        doesn't hold all history.

        Returns a list of nodes that were processed. A node will be in the list
        even if it existed in the store previously.
        """

    def censorrevision(tr, node, tombstone=b''):
        """Remove the content of a single revision.

        The specified ``node`` will have its content purged from storage.
        Future attempts to access the revision data for this node will
        result in failure.

        A ``tombstone`` message can optionally be stored. This message may be
        displayed to users when they attempt to access the missing revision
        data.

        Storage backends may have stored deltas against the previous content
        in this revision. As part of censoring a revision, these storage
        backends are expected to rewrite any internally stored deltas such
        that they no longer reference the deleted content.
        """

    def getstrippoint(minlink):
        """Find the minimum revision that must be stripped to strip a linkrev.

        Returns a 2-tuple containing the minimum revision number and a set
        of all revisions numbers that would be broken by this strip.

        TODO this is highly revlog centric and should be abstracted into
        a higher-level deletion API. ``repair.strip()`` relies on this.
        """

    def strip(minlink, transaction):
        """Remove storage of items starting at a linkrev.

        This uses ``getstrippoint()`` to determine the first node to remove.
        Then it effectively truncates storage for all revisions after that.

        TODO this is highly revlog centric and should be abstracted into a
        higher-level deletion API.
        """


class ifilestorage(ifileindex, ifiledata, ifilemutation):
    """Complete storage interface for a single tracked file."""

    def files():
        """Obtain paths that are backing storage for this file.

        TODO this is used heavily by verify code and there should probably
        be a better API for that.
        """

    def storageinfo(
        exclusivefiles=False,
        sharedfiles=False,
        revisionscount=False,
        trackedsize=False,
        storedsize=False,
    ):
        """Obtain information about storage for this file's data.

        Returns a dict describing storage for this tracked path. The keys
        in the dict map to arguments of the same. The arguments are bools
        indicating whether to calculate and obtain that data.

        exclusivefiles
           Iterable of (vfs, path) describing files that are exclusively
           used to back storage for this tracked path.

        sharedfiles
           Iterable of (vfs, path) describing files that are used to back
           storage for this tracked path. Those files may also provide storage
           for other stored entities.

        revisionscount
           Number of revisions available for retrieval.

        trackedsize
           Total size in bytes of all tracked revisions. This is a sum of the
           length of the fulltext of all revisions.

        storedsize
           Total size in bytes used to store data for all tracked revisions.
           This is commonly less than ``trackedsize`` due to internal usage
           of deltas rather than fulltext revisions.

        Not all storage backends may support all queries are have a reasonable
        value to use. In that case, the value should be set to ``None`` and
        callers are expected to handle this special value.
        """

    def verifyintegrity(state):
        """Verifies the integrity of file storage.

        ``state`` is a dict holding state of the verifier process. It can be
        used to communicate data between invocations of multiple storage
        primitives.

        If individual revisions cannot have their revision content resolved,
        the method is expected to set the ``skipread`` key to a set of nodes
        that encountered problems.  If set, the method can also add the node(s)
        to ``safe_renamed`` in order to indicate nodes that may perform the
        rename checks with currently accessible data.

        The method yields objects conforming to the ``iverifyproblem``
        interface.
        """


class idirs(interfaceutil.Interface):
    """Interface representing a collection of directories from paths.

    This interface is essentially a derived data structure representing
    directories from a collection of paths.
    """

    def addpath(path):
        """Add a path to the collection.

        All directories in the path will be added to the collection.
        """

    def delpath(path):
        """Remove a path from the collection.

        If the removal was the last path in a particular directory, the
        directory is removed from the collection.
        """

    def __iter__():
        """Iterate over the directories in this collection of paths."""

    def __contains__(path):
        """Whether a specific directory is in this collection."""


class imanifestdict(interfaceutil.Interface):
    """Interface representing a manifest data structure.

    A manifest is effectively a dict mapping paths to entries. Each entry
    consists of a binary node and extra flags affecting that entry.
    """

    def __getitem__(path):
        """Returns the binary node value for a path in the manifest.

        Raises ``KeyError`` if the path does not exist in the manifest.

        Equivalent to ``self.find(path)[0]``.
        """

    def find(path):
        """Returns the entry for a path in the manifest.

        Returns a 2-tuple of (node, flags).

        Raises ``KeyError`` if the path does not exist in the manifest.
        """

    def __len__():
        """Return the number of entries in the manifest."""

    def __nonzero__():
        """Returns True if the manifest has entries, False otherwise."""

    __bool__ = __nonzero__

    def __setitem__(path, node):
        """Define the node value for a path in the manifest.

        If the path is already in the manifest, its flags will be copied to
        the new entry.
        """

    def __contains__(path):
        """Whether a path exists in the manifest."""

    def __delitem__(path):
        """Remove a path from the manifest.

        Raises ``KeyError`` if the path is not in the manifest.
        """

    def __iter__():
        """Iterate over paths in the manifest."""

    def iterkeys():
        """Iterate over paths in the manifest."""

    def keys():
        """Obtain a list of paths in the manifest."""

    def filesnotin(other, match=None):
        """Obtain the set of paths in this manifest but not in another.

        ``match`` is an optional matcher function to be applied to both
        manifests.

        Returns a set of paths.
        """

    def dirs():
        """Returns an object implementing the ``idirs`` interface."""

    def hasdir(dir):
        """Returns a bool indicating if a directory is in this manifest."""

    def walk(match):
        """Generator of paths in manifest satisfying a matcher.

        If the matcher has explicit files listed and they don't exist in
        the manifest, ``match.bad()`` is called for each missing file.
        """

    def diff(other, match=None, clean=False):
        """Find differences between this manifest and another.

        This manifest is compared to ``other``.

        If ``match`` is provided, the two manifests are filtered against this
        matcher and only entries satisfying the matcher are compared.

        If ``clean`` is True, unchanged files are included in the returned
        object.

        Returns a dict with paths as keys and values of 2-tuples of 2-tuples of
        the form ``((node1, flag1), (node2, flag2))`` where ``(node1, flag1)``
        represents the node and flags for this manifest and ``(node2, flag2)``
        are the same for the other manifest.
        """

    def setflag(path, flag):
        """Set the flag value for a given path.

        Raises ``KeyError`` if the path is not already in the manifest.
        """

    def get(path, default=None):
        """Obtain the node value for a path or a default value if missing."""

    def flags(path):
        """Return the flags value for a path (default: empty bytestring)."""

    def copy():
        """Return a copy of this manifest."""

    def items():
        """Returns an iterable of (path, node) for items in this manifest."""

    def iteritems():
        """Identical to items()."""

    def iterentries():
        """Returns an iterable of (path, node, flags) for this manifest.

        Similar to ``iteritems()`` except items are a 3-tuple and include
        flags.
        """

    def text():
        """Obtain the raw data representation for this manifest.

        Result is used to create a manifest revision.
        """

    def fastdelta(base, changes):
        """Obtain a delta between this manifest and another given changes.

        ``base`` in the raw data representation for another manifest.

        ``changes`` is an iterable of ``(path, to_delete)``.

        Returns a 2-tuple containing ``bytearray(self.text())`` and the
        delta between ``base`` and this manifest.

        If this manifest implementation can't support ``fastdelta()``,
        raise ``mercurial.manifest.FastdeltaUnavailable``.
        """


class imanifestrevisionbase(interfaceutil.Interface):
    """Base interface representing a single revision of a manifest.

    Should not be used as a primary interface: should always be inherited
    as part of a larger interface.
    """

    def copy():
        """Obtain a copy of this manifest instance.

        Returns an object conforming to the ``imanifestrevisionwritable``
        interface. The instance will be associated with the same
        ``imanifestlog`` collection as this instance.
        """

    def read():
        """Obtain the parsed manifest data structure.

        The returned object conforms to the ``imanifestdict`` interface.
        """


class imanifestrevisionstored(imanifestrevisionbase):
    """Interface representing a manifest revision committed to storage."""

    def node():
        """The binary node for this manifest."""

    parents = interfaceutil.Attribute(
        """List of binary nodes that are parents for this manifest revision."""
    )

    def readdelta(shallow=False):
        """Obtain the manifest data structure representing changes from parent.

        This manifest is compared to its 1st parent. A new manifest representing
        those differences is constructed.

        The returned object conforms to the ``imanifestdict`` interface.
        """

    def readfast(shallow=False):
        """Calls either ``read()`` or ``readdelta()``.

        The faster of the two options is called.
        """

    def find(key):
        """Calls self.read().find(key)``.

        Returns a 2-tuple of ``(node, flags)`` or raises ``KeyError``.
        """


class imanifestrevisionwritable(imanifestrevisionbase):
    """Interface representing a manifest revision that can be committed."""

    def write(transaction, linkrev, p1node, p2node, added, removed, match=None):
        """Add this revision to storage.

        Takes a transaction object, the changeset revision number it will
        be associated with, its parent nodes, and lists of added and
        removed paths.

        If match is provided, storage can choose not to inspect or write out
        items that do not match. Storage is still required to be able to provide
        the full manifest in the future for any directories written (these
        manifests should not be "narrowed on disk").

        Returns the binary node of the created revision.
        """


class imanifeststorage(interfaceutil.Interface):
    """Storage interface for manifest data."""

    nodeconstants = interfaceutil.Attribute(
        """nodeconstants used by the current repository."""
    )

    tree = interfaceutil.Attribute(
        """The path to the directory this manifest tracks.

        The empty bytestring represents the root manifest.
        """
    )

    index = interfaceutil.Attribute(
        """An ``ifilerevisionssequence`` instance."""
    )

    opener = interfaceutil.Attribute(
        """VFS opener to use to access underlying files used for storage.

        TODO this is revlog specific and should not be exposed.
        """
    )

    _generaldelta = interfaceutil.Attribute(
        """Whether generaldelta storage is being used.

        TODO this is revlog specific and should not be exposed.
        """
    )

    fulltextcache = interfaceutil.Attribute(
        """Dict with cache of fulltexts.

        TODO this doesn't feel appropriate for the storage interface.
        """
    )

    def __len__():
        """Obtain the number of revisions stored for this manifest."""

    def __iter__():
        """Iterate over revision numbers for this manifest."""

    def rev(node):
        """Obtain the revision number given a binary node.

        Raises ``error.LookupError`` if the node is not known.
        """

    def node(rev):
        """Obtain the node value given a revision number.

        Raises ``error.LookupError`` if the revision is not known.
        """

    def lookup(value):
        """Attempt to resolve a value to a node.

        Value can be a binary node, hex node, revision number, or a bytes
        that can be converted to an integer.

        Raises ``error.LookupError`` if a ndoe could not be resolved.
        """

    def parents(node):
        """Returns a 2-tuple of parent nodes for a node.

        Values will be ``nullid`` if the parent is empty.
        """

    def parentrevs(rev):
        """Like parents() but operates on revision numbers."""

    def linkrev(rev):
        """Obtain the changeset revision number a revision is linked to."""

    def revision(node, _df=None):
        """Obtain fulltext data for a node."""

    def rawdata(node, _df=None):
        """Obtain raw data for a node."""

    def revdiff(rev1, rev2):
        """Obtain a delta between two revision numbers.

        The returned data is the result of ``bdiff.bdiff()`` on the raw
        revision data.
        """

    def cmp(node, fulltext):
        """Compare fulltext to another revision.

        Returns True if the fulltext is different from what is stored.
        """

    def emitrevisions(
        nodes,
        nodesorder=None,
        revisiondata=False,
        assumehaveparentrevisions=False,
    ):
        """Produce ``irevisiondelta`` describing revisions.

        See the documentation for ``ifiledata`` for more.
        """

    def addgroup(
        deltas,
        linkmapper,
        transaction,
        addrevisioncb=None,
        duplicaterevisioncb=None,
    ):
        """Process a series of deltas for storage.

        See the documentation in ``ifilemutation`` for more.
        """

    def rawsize(rev):
        """Obtain the size of tracked data.

        Is equivalent to ``len(m.rawdata(node))``.

        TODO this method is only used by upgrade code and may be removed.
        """

    def getstrippoint(minlink):
        """Find minimum revision that must be stripped to strip a linkrev.

        See the documentation in ``ifilemutation`` for more.
        """

    def strip(minlink, transaction):
        """Remove storage of items starting at a linkrev.

        See the documentation in ``ifilemutation`` for more.
        """

    def checksize():
        """Obtain the expected sizes of backing files.

        TODO this is used by verify and it should not be part of the interface.
        """

    def files():
        """Obtain paths that are backing storage for this manifest.

        TODO this is used by verify and there should probably be a better API
        for this functionality.
        """

    def deltaparent(rev):
        """Obtain the revision that a revision is delta'd against.

        TODO delta encoding is an implementation detail of storage and should
        not be exposed to the storage interface.
        """

    def clone(tr, dest, **kwargs):
        """Clone this instance to another."""

    def clearcaches(clear_persisted_data=False):
        """Clear any caches associated with this instance."""

    def dirlog(d):
        """Obtain a manifest storage instance for a tree."""

    def add(
        m, transaction, link, p1, p2, added, removed, readtree=None, match=None
    ):
        """Add a revision to storage.

        ``m`` is an object conforming to ``imanifestdict``.

        ``link`` is the linkrev revision number.

        ``p1`` and ``p2`` are the parent revision numbers.

        ``added`` and ``removed`` are iterables of added and removed paths,
        respectively.

        ``readtree`` is a function that can be used to read the child tree(s)
        when recursively writing the full tree structure when using
        treemanifets.

        ``match`` is a matcher that can be used to hint to storage that not all
        paths must be inspected; this is an optimization and can be safely
        ignored. Note that the storage must still be able to reproduce a full
        manifest including files that did not match.
        """

    def storageinfo(
        exclusivefiles=False,
        sharedfiles=False,
        revisionscount=False,
        trackedsize=False,
        storedsize=False,
    ):
        """Obtain information about storage for this manifest's data.

        See ``ifilestorage.storageinfo()`` for a description of this method.
        This one behaves the same way, except for manifest data.
        """


class imanifestlog(interfaceutil.Interface):
    """Interface representing a collection of manifest snapshots.

    Represents the root manifest in a repository.

    Also serves as a means to access nested tree manifests and to cache
    tree manifests.
    """

    nodeconstants = interfaceutil.Attribute(
        """nodeconstants used by the current repository."""
    )

    def __getitem__(node):
        """Obtain a manifest instance for a given binary node.

        Equivalent to calling ``self.get('', node)``.

        The returned object conforms to the ``imanifestrevisionstored``
        interface.
        """

    def get(tree, node, verify=True):
        """Retrieve the manifest instance for a given directory and binary node.

        ``node`` always refers to the node of the root manifest (which will be
        the only manifest if flat manifests are being used).

        If ``tree`` is the empty string, the root manifest is returned.
        Otherwise the manifest for the specified directory will be returned
        (requires tree manifests).

        If ``verify`` is True, ``LookupError`` is raised if the node is not
        known.

        The returned object conforms to the ``imanifestrevisionstored``
        interface.
        """

    def getstorage(tree):
        """Retrieve an interface to storage for a particular tree.

        If ``tree`` is the empty bytestring, storage for the root manifest will
        be returned. Otherwise storage for a tree manifest is returned.

        TODO formalize interface for returned object.
        """

    def clearcaches():
        """Clear caches associated with this collection."""

    def rev(node):
        """Obtain the revision number for a binary node.

        Raises ``error.LookupError`` if the node is not known.
        """

    def update_caches(transaction):
        """update whatever cache are relevant for the used storage."""


class ilocalrepositoryfilestorage(interfaceutil.Interface):
    """Local repository sub-interface providing access to tracked file storage.

    This interface defines how a repository accesses storage for a single
    tracked file path.
    """

    def file(f):
        """Obtain a filelog for a tracked path.

        The returned type conforms to the ``ifilestorage`` interface.
        """


class ilocalrepositorymain(interfaceutil.Interface):
    """Main interface for local repositories.

    This currently captures the reality of things - not how things should be.
    """

    nodeconstants = interfaceutil.Attribute(
        """Constant nodes matching the hash function used by the repository."""
    )
    nullid = interfaceutil.Attribute(
        """null revision for the hash function used by the repository."""
    )

    supported = interfaceutil.Attribute(
        """Set of requirements that this repo is capable of opening."""
    )

    requirements = interfaceutil.Attribute(
        """Set of requirements this repo uses."""
    )

    features = interfaceutil.Attribute(
        """Set of "features" this repository supports.

        A "feature" is a loosely-defined term. It can refer to a feature
        in the classical sense or can describe an implementation detail
        of the repository. For example, a ``readonly`` feature may denote
        the repository as read-only. Or a ``revlogfilestore`` feature may
        denote that the repository is using revlogs for file storage.

        The intent of features is to provide a machine-queryable mechanism
        for repo consumers to test for various repository characteristics.

        Features are similar to ``requirements``. The main difference is that
        requirements are stored on-disk and represent requirements to open the
        repository. Features are more run-time capabilities of the repository
        and more granular capabilities (which may be derived from requirements).
        """
    )

    filtername = interfaceutil.Attribute(
        """Name of the repoview that is active on this repo."""
    )

    wvfs = interfaceutil.Attribute(
        """VFS used to access the working directory."""
    )

    vfs = interfaceutil.Attribute(
        """VFS rooted at the .hg directory.

        Used to access repository data not in the store.
        """
    )

    svfs = interfaceutil.Attribute(
        """VFS rooted at the store.

        Used to access repository data in the store. Typically .hg/store.
        But can point elsewhere if the store is shared.
        """
    )

    root = interfaceutil.Attribute(
        """Path to the root of the working directory."""
    )

    path = interfaceutil.Attribute("""Path to the .hg directory.""")

    origroot = interfaceutil.Attribute(
        """The filesystem path that was used to construct the repo."""
    )

    auditor = interfaceutil.Attribute(
        """A pathauditor for the working directory.

        This checks if a path refers to a nested repository.

        Operates on the filesystem.
        """
    )

    nofsauditor = interfaceutil.Attribute(
        """A pathauditor for the working directory.

        This is like ``auditor`` except it doesn't do filesystem checks.
        """
    )

    baseui = interfaceutil.Attribute(
        """Original ui instance passed into constructor."""
    )

    ui = interfaceutil.Attribute("""Main ui instance for this instance.""")

    sharedpath = interfaceutil.Attribute(
        """Path to the .hg directory of the repo this repo was shared from."""
    )

    store = interfaceutil.Attribute("""A store instance.""")

    spath = interfaceutil.Attribute("""Path to the store.""")

    sjoin = interfaceutil.Attribute("""Alias to self.store.join.""")

    cachevfs = interfaceutil.Attribute(
        """A VFS used to access the cache directory.

        Typically .hg/cache.
        """
    )

    wcachevfs = interfaceutil.Attribute(
        """A VFS used to access the cache directory dedicated to working copy

        Typically .hg/wcache.
        """
    )

    filteredrevcache = interfaceutil.Attribute(
        """Holds sets of revisions to be filtered."""
    )

