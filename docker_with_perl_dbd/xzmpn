	0xAAC2,
	0xAAEB,
	0xAAF0,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFF9E,
	0xFFA0,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x10D24,
	0x10D28,
	0x10EAB,
	0x10EAD,
	0x10EFD,
	0x10F00,
	0x10F46,
	0x10F51,
	0x10F82,
	0x10F86,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11070,
	0x11071,
	0x11073,
	0x11075,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110C2,
	0x110C3,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11145,
	0x11147,
	0x11173,
	0x11174,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C9,
	0x111CD,
	0x111CE,
	0x111D0,
	0x1122C,
	0x11238,
	0x1123E,
	0x1123F,
	0x11241,
	0x11242,
	0x112DF,
	0x112EB,
	0x11300,
	0x11304,
	0x1133B,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11447,
	0x1145E,
	0x1145F,
	0x114B0,
	0x114C4,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x116AB,
	0x116B8,
	0x1171D,
	0x1172C,
	0x1182C,
	0x1183B,
	0x11930,
	0x11936,
	0x11937,
	0x11939,
	0x1193B,
	0x1193F,
	0x11940,
	0x11941,
	0x11942,
	0x11944,
	0x119D1,
	0x119D8,
	0x119DA,
	0x119E1,
	0x119E4,
	0x119E5,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A5C,
	0x11A8A,
	0x11A9A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x11D8A,
	0x11D8F,
	0x11D90,
	0x11D92,
	0x11D93,
	0x11D98,
	0x11EF3,
	0x11EF7,
	0x11F00,
	0x11F02,
	0x11F03,
	0x11F04,
	0x11F34,
	0x11F3B,
	0x11F3E,
	0x11F43,
	0x13440,
	0x13441,
	0x13447,
	0x13456,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F4F,
	0x16F50,
	0x16F51,
	0x16F88,
	0x16F8F,
	0x16F93,
	0x16FE4,
	0x16FE5,
	0x16FF0,
	0x16FF2,
	0x1BC9D,
	0x1BC9F,
	0x1CF00,
	0x1CF2E,
	0x1CF30,
	0x1CF47,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E08F,
	0x1E090,
	0x1E130,
	0x1E137,
	0x1E2AE,
	0x1E2AF,
	0x1E2EC,
	0x1E2F0,
	0x1E4EC,
	0x1E4F0,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_SB__FO_invlist[] = {  /* for ASCII/Latin1 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAD,
	0xAE,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x890,
	0x892,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x110CD,
	0x110CE,
	0x13430,
	0x13440,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_SB__FO_invlist[] = {  /* for EBCDIC 1047 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x890,
	0x892,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x110CD,
	0x110CE,
	0x13430,
	0x13440,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_SB__FO_invlist[] = {  /* for EBCDIC 037 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x890,
	0x892,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x110CD,
	0x110CE,
	0x13430,
	0x13440,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002
};

#  endif	/* EBCDIC 037 */

static const UV UNI_SB__LE_invlist[] = {  /* for all charsets */
	1087,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C6,
	0x2D2,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x374,
	0x375,
	0x559,
	0x55A,
	0x5D0,
	0x5EB,
	0x5EF,
	0x5F4,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6E5,
	0x6E7,
	0x6EE,
	0x6F0,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74D,
	0x7A6,
	0x7B1,
	0x7B2,
	0x7CA,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FB,
	0x800,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x840,
	0x859,
	0x860,
	0x86B,
	0x870,
	0x888,
	0x889,
	0x88F,
	0x8A0,
	0x8CA,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x971,
	0x981,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BD,
	0x9BE,
	0x9CE,
	0x9CF,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E2,
	0x9F0,
	0x9F2,
	0x9FC,
	0x9FD,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA72,
	0xA75,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABD,
	0xABE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE2,
	0xAF9,
	0xAFA,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3D,
	0xB3E,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB62,
	0xB71,
	0xB72,
	0xB83,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBD0,
	0xBD1,
	0xC05,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5B,
	0xC5D,
	0xC5E,
	0xC60,
	0xC62,
	0xC80,
	0xC81,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBD,
	0xCBE,
	0xCDD,
	0xCDF,
	0xCE0,
	0xCE2,
	0xCF1,
	0xCF3,
	0xD04,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD4E,
	0xD4F,
	0xD54,
	0xD57,
	0xD5F,
	0xD62,
	0xD7A,
	0xD80,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE31,
	0xE32,
	0xE34,
	0xE40,
	0xE47,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE86,
	0xE8B,
	0xE8C,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF88,
	0xF8D,
	0x1000,
	0x102B,
	0x103F,
	0x1040,
	0x1050,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x10D0,
	0x10FB,
	0x10FD,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x1380,
	0x1390,
	0x1401,
	0x166D,
	0x166F,
	0x1680,
	0x1681,
	0x169B,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x1712,
	0x171F,
	0x1732,
	0x1740,
	0x1752,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17B4,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x1820,
	0x1879,
	0x1880,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0x18B0,
	0x18F6,
	0x1900,
	0x191F,
	0x1950,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A55,
	0x1AA7,
	0x1AA8,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B4D,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBA,
	0x1BE6,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0x1C5A,
	0x1C7E,
	0x1C90,
	0x1CBB,
	0x1CBD,
	0x1CC0,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1CFB,
	0x2135,
	0x2139,
	0x2180,
	0x2183,
	0x2185,
	0x2189,
	0x2D30,
	0x2D68,
	0x2D6F,
	0x2D70,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3008,
	0x3021,
	0x302A,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3041,
	0x3097,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x3100,
	0x3105,
	0x3130,
	0x3131,
	0x318F,
	0x31A0,
	0x31C0,
	0x31F0,
	0x3200,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA48D,
	0xA4D0,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA620,
	0xA62A,
	0xA62C,
	0xA66E,
	0xA66F,
	0xA67F,
	0xA680,
	0xA6A0,
	0xA6F0,
	0xA717,
	0xA720,
	0xA788,
	0xA789,
	0xA78F,
	0xA790,
	0xA7F7,
	0xA7F8,
	0xA7FB,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA874,
	0xA882,
	0xA8B4,
	0xA8F2,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA8FF,
	0xA90A,
	0xA926,
	0xA930,
	0xA947,
	0xA960,
	0xA97D,
	0xA984,
	0xA9B3,
	0xA9CF,
	0xA9D0,
	0xA9E0,
	0xA9E5,
	0xA9E6,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA00,
	0xAA29,
	0xAA40,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3,
	0xAADB,
	0xAADE,
	0xAAE0,
	0xAAEB,
	0xAAF2,
	0xAAF5,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
