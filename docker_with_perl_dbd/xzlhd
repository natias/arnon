built-in to get a random number between 0 and 1. From there, you shift
that into the range that you want.

C<rand($x)> returns a number such that C<< 0 <= rand($x) < $x >>. Thus
what you want to have perl figure out is a random number in the range
from 0 to the difference between your I<X> and I<Y>.

That is, to get a number between 10 and 15, inclusive, you want a
random number between 0 and 5 that you can then add to 10.

    my $number = 10 + int rand( 15-10+1 ); # ( 10,11,12,13,14, or 15 )

Hence you derive the following simple function to abstract
that. It selects a random integer between the two given
integers (inclusive). For example: C<random_int_between(50,120)>.

    sub random_int_between {
        my($min, $max) = @_;
        # Assumes that the two arguments are integers themselves!
        return $min if $min == $max;
        ($min, $max) = ($max, $min)  if  $min > $max;
        return $min + int rand(1 + $max - $min);
    }

=head1 Data: Dates

=head2 How do I find the day or week of the year?

The day of the year is in the list returned
by the C<localtime> function. Without an
argument C<localtime> uses the current time.

    my $day_of_year = (localtime)[7];

The L<POSIX> module can also format a date as the day of the year or
week of the year.

    use POSIX qw/strftime/;
    my $day_of_year  = strftime "%j", localtime;
    my $week_of_year = strftime "%W", localtime;

To get the day of year for any date, use L<POSIX>'s C<mktime> to get
a time in epoch seconds for the argument to C<localtime>.

    use POSIX qw/mktime strftime/;
    my $week_of_year = strftime "%j",
        localtime( mktime( 0, 0, 0, 18, 11, 87 ) );

You can also use L<Time::Piece>, which comes with Perl and provides a
C<localtime> that returns an object:

    use Time::Piece;
    my $day_of_year  = localtime->yday;
    my $week_of_year = localtime->week;

The L<Date::Calc> module provides two functions to calculate these, too:

    use Date::Calc;
    my $day_of_year  = Day_of_Year(  1987, 12, 18 );
    my $week_of_year = Week_of_Year( 1987, 12, 18 );

=head2 How do I find the current century or millennium?

Use the following simple functions:

    sub get_century    {
        return int((((localtime(shift || time))[5] + 1999))/100);
    }

    sub get_millennium {
        return 1+int((((localtime(shift || time))[5] + 1899))/1000);
    }

On some systems, the L<POSIX> module's C<strftime()> function has been
extended in a non-standard way to use a C<%C> format, which they
sometimes claim is the "century". It isn't, because on most such
systems, this is only the first two digits of the four-digit year, and
thus cannot be used to determine reliably the current century or
millennium.

=head2 How can I compare two dates and find the difference?

(contributed by brian d foy)

You could just store all your dates as a number and then subtract.
Life isn't always that simple though.

The L<Time::Piece> module, which comes with Perl, replaces L<localtime>
with a version that returns an object. It also overloads the comparison
operators so you can compare them directly:

    use Time::Piece;
    my $date1 = localtime( $some_time );
    my $date2 = localtime( $some_other_time );

    if( $date1 < $date2 ) {
        print "The date was in the past\n";
    }

You can also get differences with a subtraction, which returns a
L<Time::Seconds> object:

    my $date_diff = $date1 - $date2;
    print "The difference is ", $date_diff->days, " days\n";

If you want to work with formatted dates, the L<Date::Manip>,
L<Date::Calc>, or L<DateTime> modules can help you.

=head2 How can I take a string and turn it into epoch seconds?

If it's a regular enough string that it always has the same format,
you can split it up and pass the parts to C<timelocal> in the standard
L<Time::Local> module. Otherwise, you should look into the L<Date::Calc>,
L<Date::Parse>, and L<Date::Manip> modules from CPAN.

=head2 How can I find the Julian Day?

(contributed by brian d foy and Dave Cross)

You can use the L<Time::Piece> module, part of the Standard Library,
which can convert a date/time to a Julian Day:

    $ perl -MTime::Piece -le 'print localtime->julian_day'
    2455607.7959375

Or the modified Julian Day:

    $ perl -MTime::Piece -le 'print localtime->mjd'
    55607.2961226851

Or even the day of the year (which is what some people think of as a
Julian day):

    $ perl -MTime::Piece -le 'print localtime->yday'
    45

You can also do the same things with the L<DateTime> module:

    $ perl -MDateTime -le'print DateTime->today->jd'
    2453401.5
    $ perl -MDateTime -le'print DateTime->today->mjd'
    53401
    $ perl -MDateTime -le'print DateTime->today->doy'
    31

You can use the L<Time::JulianDay> module available on CPAN. Ensure
that you really want to find a Julian day, though, as many people have
different ideas about Julian days (see L<http://www.hermetic.ch/cal_stud/jdn.htm>
for instance):

    $  perl -MTime::JulianDay -le 'print local_julian_day( time )'
    55608

=head2 How do I find yesterday's date?
X<date> X<yesterday> X<DateTime> X<Date::Calc> X<Time::Local>
X<daylight saving time> X<day> X<Today_and_Now> X<localtime>
X<timelocal>

(contributed by brian d foy)

To do it correctly, you can use one of the C<Date> modules since they
work with calendars instead of times. The L<DateTime> module makes it
simple, and give you the same time of day, only the day before,
despite daylight saving time changes:

    use DateTime;

    my $yesterday = DateTime->now->subtract( days => 1 );

    print "Yesterday was $yesterday\n";

You can also use the L<Date::Calc> module using its C<Today_and_Now>
function.

    use Date::Calc qw( Today_and_Now Add_Delta_DHMS );

    my @date_time = Add_Delta_DHMS( Today_and_Now(), -1, 0, 0, 0 );

    print "@date_time\n";

Most people try to use the time rather than the calendar to figure out
dates, but that assumes that days are twenty-four hours each. For
most people, there are two days a year when they aren't: the switch to
and from summer time throws this off. For example, the rest of the
suggestions will be wrong sometimes:

Starting with Perl 5.10, L<Time::Piece> and L<Time::Seconds> are part
of the standard distribution, so you might think that you could do
something like this:

    use Time::Piece;
    use Time::Seconds;

    my $yesterday = localtime() - ONE_DAY; # WRONG
    print "Yesterday was $yesterday\n";

The L<Time::Piece> module exports a new C<localtime> that returns an
object, and L<Time::Seconds> exports the C<ONE_DAY> constant that is a
set number of seconds. This means that it always gives the time 24
hours ago, which is not always yesterday. This can cause problems
around the end of daylight saving time when there's one day that is 25
hours long.

You have the same problem with L<Time::Local>, which will give the wrong
answer for those same special cases:

    # contributed by Gunnar Hjalmarsson
     use Time::Local;
     my $today = timelocal 0, 0, 12, ( localtime )[3..5];
     my ($d, $m, $y) = ( localtime $today-86400 )[3..5]; # WRONG
     printf "Yesterday: %d-%02d-%02d\n", $y+1900, $m+1, $d;

=head2 Does Perl have a Year 2000 or 2038 problem? Is Perl Y2K compliant?

(contributed by brian d foy)

Perl itself never had a Y2K problem, although that never stopped people
from creating Y2K problems on their own. See the documentation for
C<localtime> for its proper use.

Starting with Perl 5.12, C<localtime> and C<gmtime> can handle dates past
03:14:08 January 19, 2038, when a 32-bit based time would overflow. You
still might get a warning on a 32-bit C<perl>:

    % perl5.12 -E 'say scalar localtime( 0x9FFF_FFFFFFFF )'
    Integer overflow in hexadecimal number at -e line 1.
    Wed Nov  1 19:42:39 5576711

On a 64-bit C<perl>, you can get even larger dates for those really long
running projects:

    % perl5.12 -E 'say scalar gmtime( 0x9FFF_FFFFFFFF )'
    Thu Nov  2 00:42:39 5576711

You're still out of luck if you need to keep track of decaying protons
though.

=head1 Data: Strings

=head2 How do I validate input?

(contributed by brian d foy)

There are many ways to ensure that values are what you expect or
want to accept. Besides the specific examples that we cover in the
perlfaq, you can also look at the modules with "Assert" and "Validate"
in their names, along with other modules such as L<Regexp::Common>.

Some modules have validation for particular types of input, such
as L<Business::ISBN>, L<Business::CreditCard>, L<Email::Valid>,
and L<Data::Validate::IP>.

=head2 How do I unescape a string?

It depends just what you mean by "escape". URL escapes are dealt
with in L<perlfaq9>. Shell escapes with the backslash (C<\>)
character are removed with

    s/\\(.)/$1/g;

This won't expand C<"\n"> or C<"\t"> or any other special escapes.

=head2 How do I remove consecutive pairs of characters?

(contributed by brian d foy)

You can use the substitution operator to find pairs of characters (or
runs of characters) and replace them with a single instance. In this
substitution, we find a character in C<(.)>. The memory parentheses
store the matched character in the back-reference C<\g1> and we use
that to require that the same thing immediately follow it. We replace
that part of the string with the character in C<$1>.

    s/(.)\g1/$1/g;

We can also use the transliteration operator, C<tr///>. In this
example, the search list side of our C<tr///> contains nothing, but
the C<c> option complements that so it contains everything. The
replacement list also contains nothing, so the transliteration is
almost a no-op since it won't do any replacements (or more exactly,
replace the character with itself). However, the C<s> option squashes
duplicated and consecutive characters in the string so a character
does not show up next to itself

    my $str = 'Haarlem';   # in the Netherlands
    $str =~ tr///cs;       # Now Harlem, like in New York

=head2 How do I expand function calls in a string?

(contributed by brian d foy)

This is documented in L<perlref>, and although it's not the easiest
thing to read, it does work. In each of these examples, we call the
function inside the braces used to dereference a reference. If we
have more than one return value, we can construct and dereference an
anonymous array. In this case, we call the function in list context.

    print "The time values are @{ [localtime] }.\n";

If we want to call the function in scalar context, we have to do a bit
more work. We can really have any code we like inside the braces, so
we simply have to end with the scalar reference, although how you do
that is up to you, and you can use code inside the braces. Note that
the use of parens creates a list context, so we need C<scalar> to
force the scalar context on the function:

    print "The time is ${\(scalar localtime)}.\n"

    print "The time is ${ my $x = localtime; \$x }.\n";

If your function already returns a reference, you don't need to create
the reference yourself.

    sub timestamp { my $t = localtime; \$t }

    print "The time is ${ timestamp() }.\n";

The C<Interpolation> module can also do a lot of magic for you. You can
specify a variable name, in this case C<E>, to set up a tied hash that
does the interpolation for you. It has several other methods to do this
as well.

    use Interpolation E => 'eval';
    print "The time values are $E{localtime()}.\n";

In most cases, it is probably easier to simply use string concatenation,
which also forces scalar context.

    print "The time is " . localtime() . ".\n";

=head2 How do I find matching/nesting anything?

To find something between two single
characters, a pattern like C</x([^x]*)x/> will get the intervening
bits in $1. For multiple ones, then something more like
C</alpha(.*?)omega/> would be needed. For nested patterns
and/or balanced expressions, see the so-called
L<< (?PARNO)|perlre/C<(?PARNO)> C<(?-PARNO)> C<(?+PARNO)> C<(?R)> C<(?0)> >>
construct (available since perl 5.10).
The CPAN module L<Regexp::Common> can help to build such
regular expressions (see in particular
L<Regexp::Common::balanced> and L<Regexp::Common::delimited>).

More complex cases will require to write a parser, probably
using a parsing module from CPAN, like
L<Regexp::Grammars>, L<Parse::RecDescent>, L<Parse::Yapp>,
L<Text::Balanced>, or L<Marpa::R2>.

=head2 How do I reverse a string?

Use C<reverse()> in scalar context, as documented in
L<perlfunc/reverse>.

    my $reversed = reverse $string;

=head2 How do I expand tabs in a string?

You can do it yourself:

    1 while $string =~ s/\t+/' ' x (length($&) * 8 - length($`) % 8)/e;

Or you can just use the L<Text::Tabs> module (part of the standard Perl
distribution).

    use Text::Tabs;
    my @expanded_lines = expand(@lines_with_tabs);

=head2 How do I reformat a paragraph?

Use L<Text::Wrap> (part of the standard Perl distribution):

    use Text::Wrap;
    print wrap("\t", '  ', @paragraphs);

The paragraphs you give to L<Text::Wrap> should not contain embedded
newlines. L<Text::Wrap> doesn't justify the lines (flush-right).

Or use the CPAN module L<Text::Autoformat>. Formatting files can be
easily done by making a shell alias, like so:

    alias fmt="perl -i -MText::Autoformat -n0777 \
        -e 'print autoformat $_, {all=>1}' $*"

See the documentation for L<Text::Autoformat> to appreciate its many
capabilities.

=head2 How can I access or change N characters of a string?

You can access the first characters of a string with substr().
To get the first character, for example, start at position 0
and grab the string of length 1.


    my $string = "Just another Perl Hacker";
    my $first_char = substr( $string, 0, 1 );  #  'J'

To change part of a string, you can use the optional fourth
argument which is the replacement string.

    substr( $string, 13, 4, "Perl 5.8.0" );

You can also use substr() as an lvalue.

    substr( $string, 13, 4 ) =  "Perl 5.8.0";

=head2 How do I change the Nth occurrence of something?

You have to keep track of N yourself. For example, let's say you want
to change the fifth occurrence of C<"whoever"> or C<"whomever"> into
C<"whosoever"> or C<"whomsoever">, case insensitively. These
all assume that $_ contains the string to be altered.

    $count = 0;
    s{((whom?)ever)}{
    ++$count == 5       # is it the 5th?
        ? "${2}soever"  # yes, swap
        : $1            # renege and leave it there
        }ige;

In the more general case, you can use the C</g> modifier in a C<while>
loop, keeping count of matches.

    $WANT = 3;
    $count = 0;
    $_ = "One fish two fish red fish blue fish";
    while (/(\w+)\s+fish\b/gi) {
        if (++$count == $WANT) {
            print "The third fish is a $1 one.\n";
        }
    }

That prints out: C<"The third fish is a red one.">  You can also use a
repetition count and repeated pattern like this:

    /(?:\w+\s+fish\s+){2}(\w+)\s+fish/i;

=head2 How can I count the number of occurrences of a substring within a string?

There are a number of ways, with varying efficiency. If you want a
count of a certain single character (X) within a string, you can use the
C<tr///> function like so:

    my $string = "ThisXlineXhasXsomeXx'sXinXit";
    my $count = ($string =~ tr/X//);
    print "There are $count X characters in the string";

This is fine if you are just looking for a single character. However,
if you are trying to count multiple character substrings within a
larger string, C<tr///> won't work. What you can do is wrap a while()
loop around a global pattern match. For example, let's count negative
integers:

    my $string = "-9 55 48 -2 23 -76 4 14 -44";
    my $count = 0;
    while ($string =~ /-\d+/g) { $count++ }
    print "There are $count negative numbers in the string";

Another version uses a global match in list context, then assigns the
result to a scalar, producing a count of the number of matches.

    my $count = () = $string =~ /-\d+/g;

=head2 How do I capitalize all the words on one line?
X<Text::Autoformat> X<capitalize> X<case, title> X<case, sentence>

(contributed by brian d foy)

Damian Conway's L<Text::Autoformat> handles all of the thinking
for you:

    use Text::Autoformat;
    my $s = "Going to the desert with a camel";

    printf "%-10s %s\n", "original:", $s;
    for my $style (qw( sentence title highlight )) {
    	printf "%-10s %s\n",
        	"$style:",
			autoformat($s, { case => $style }) =~ s/\R+\z//r;
    }

Each style has a different idea of what if should do with small words:

	original:  Going to the desert with a camel
	sentence:  Going to the desert with a camel
	title:     Going To The Desert With A Camel
	highlight: Going to the Desert with a Camel

Trying this yourself in a simple regex has more than a few pitfalls.
Perl "words" are groups of C<\w+>, but that's not what you want to
capitalize. Some of those characters aren't even letters. What if you
used a word boundary, C<\b>?

	my $string = "A camel's journey";
	$string =~ s/\b(\w)/\U$1/g;  # A Camel'S Journey

How is Perl supposed to know not to capitalize that C<s>? You could work
harder to look for preceding whitespace or the beginning of the string:

    $string =~ s/( (?:^|\s) \w ) /\U$1/xg; # A Camel's Journey

Or maybe you match the entire group, lowercase it all (C<L>), then
uppercase the first letter (C<\u>):

    $string =~ s/([\w']+)/\u\L$1/g;

Each of these have their annoying edge cases. Perl v5.22 added fancier
Unicode word and sentence boundaries to fix this sort of problem. The
C<\b{wb}> word boundary ignores some things that it doesn't think start
or end "human" words:

	use v5.22;
	my $string = "A camel's journey";
	$string =~ s/\b{wb}(\w)/\U$1/g;  # A Camel's Journey

The details are in Unicode Technical Report #29
(L<https://unicode.org/reports/tr29/>), and you should make sure that
its idea of a word boundary corresponds to yours.

Now, what if you don't want to capitalize that "and" or "the"? Just use
L<Text::Autoformat> and get on with the next problem. :)

=head2 How can I split a [character]-delimited string except when inside [character]?

Several modules can handle this sort of parsing--L<Text::Balanced>,
L<Text::CSV>, L<Text::CSV_XS>, and L<Text::ParseWords>, among others.

Take the example case of trying to split a string that is
comma-separated into its different fields. You can't use C<split(/,/)>
because you shouldn't split if the comma is inside quotes. For
example, take a data line like this:

    SAR001,"","Cimetrix, Inc","Bob Smith","CAM",N,8,1,0,7,"Error, Core Dumped"

Due to the restriction of the quotes, this is a fairly complex
problem. Thankfully, we have Jeffrey Friedl, author of
I<Mastering Regular Expressions>, to handle these for us. He
suggests (assuming your string is contained in C<$text>):

     my @new = ();
     push(@new, $+) while $text =~ m{
         "([^\"\\]*(?:\\.[^\"\\]*)*)",? # groups the phrase inside the quotes
        | ([^,]+),?
        | ,
     }gx;
     push(@new, undef) if substr($text,-1,1) eq ',';

If you want to represent quotation marks inside a
quotation-mark-delimited field, escape them with backslashes (eg,
C<"like \"this\"">.

Alternatively, the L<Text::ParseWords> module (part of the standard
Perl distribution) lets you say:

    use Text::ParseWords;
    @new = quotewords(",", 0, $text);

For parsing or generating CSV, though, using L<Text::CSV> rather than
implementing it yourself is highly recommended; you'll save yourself odd bugs
popping up later by just using code which has already been tried and tested in
production for years.

=head2 How do I strip blank space from the beginning/end of a string?

(contributed by brian d foy)

A substitution can do this for you. For a single line, you want to
replace all the leading or trailing whitespace with nothing. You
can do that with a pair of substitutions:

    s/^\s+//;
    s/\s+$//;

You can also write that as a single substitution, although it turns
out the combined statement is slower than the separate ones. That
might not matter to you, though:

    s/^\s+|\s+$//g;

In this regular expression, the alternation matches either at the
beginning or the end of the string since the anchors have a lower
precedence than the alternation. With the C</g> flag, the substitution
makes all possible matches, so it gets both. Remember, the trailing
newline matches the C<\s+>, and  the C<$> anchor can match to the
absolute end of the string, so the newline disappears too. Just add
the newline to the output, which has the added benefit of preserving
"blank" (consisting entirely of whitespace) lines which the C<^\s+>
would remove all by itself:

    while( <> ) {
        s/^\s+|\s+$//g;
        print "$_\n";
    }

For a multi-line string, you can apply the regular expression to each
logical line in the string by adding the C</m> flag (for
"multi-line"). With the C</m> flag, the C<$> matches I<before> an
embedded newline, so it doesn't remove it. This pattern still removes
the newline at the end of the string:

    $string =~ s/^\s+|\s+$//gm;

Remember that lines consisting entirely of whitespace will disappear,
since the first part of the alternation can match the entire string
and replace it with nothing. If you need to keep embedded blank lines,
you have to do a little more work. Instead of matching any whitespace
(since that includes a newline), just match the other whitespace:

    $string =~ s/^[\t\f ]+|[\t\f ]+$//mg;

=head2 How do I pad a string with blanks or pad a number with zeroes?

In the following examples, C<$pad_len> is the length to which you wish
to pad the string, C<$text> or C<$num> contains the string to be padded,
and C<$pad_char> contains the padding character. You can use a single
character string constant instead of the C<$pad_char> variable if you
know what it is in advance. And in the same way you can use an integer in
place of C<$pad_len> if you know the pad length in advance.

The simplest method uses the C<sprintf> function. It can pad on the left
or right with blanks and on the left with zeroes and it will not
truncate the result. The C<pack> function can only pad strings on the
right with blanks and it will truncate the result to a maximum length of
C<$pad_len>.

    # Left padding a string with blanks (no truncation):
    my $padded = sprintf("%${pad_len}s", $text);
    my $padded = sprintf("%*s", $pad_len, $text);  # same thing

    # Right padding a string with blanks (no truncation):
    my $padded = sprintf("%-${pad_len}s", $text);
    my $padded = sprintf("%-*s", $pad_len, $text); # same thing

    # Left padding a number with 0 (no truncation):
    my $padded = sprintf("%0${pad_len}d", $num);
    my $padded = sprintf("%0*d", $pad_len, $num); # same thing

    # Right padding a string with blanks using pack (will truncate):
    my $padded = pack("A$pad_len",$text);

If you need to pad with a character other than blank or zero you can use
one of the following methods. They all generate a pad string with the
C<x> operator and combine that with C<$text>. These methods do
not truncate C<$text>.

Left and right padding with any character, creating a new string:

    my $padded = $pad_char x ( $pad_len - length( $text ) ) . $text;
    my $padded = $text . $pad_char x ( $pad_len - length( $text ) );

Left and right padding with any character, modifying C<$text> directly:

    substr( $text, 0, 0 ) = $pad_char x ( $pad_len - length( $text ) );
    $text .= $pad_char x ( $pad_len - length( $text ) );

=head2 How do I extract selected columns from a string?

(contributed by brian d foy)

If you know the columns that contain the data, you can
use C<substr> to extract a single column.

    my $column = substr( $line, $start_column, $length );

You can use C<split> if the columns are separated by whitespace or
some other delimiter, as long as whitespace or the delimiter cannot
appear as part of the data.

    my $line    = ' fred barney   betty   ';
    my @columns = split /\s+/, $line;
        # ( '', 'fred', 'barney', 'betty' );

    my $line    = 'fred||barney||betty';
    my @columns = split /\|/, $line;
        # ( 'fred', '', 'barney', '', 'betty' );

If you want to work with comma-separated values, don't do this since
that format is a bit more complicated. Use one of the modules that
handle that format, such as L<Text::CSV>, L<Text::CSV_XS>, or
L<Text::CSV_PP>.

If you want to break apart an entire line of fixed columns, you can use
C<unpack> with the A (ASCII) format. By using a number after the format
specifier, you can denote the column width. See the C<pack> and C<unpack>
entries in L<perlfunc> for more details.

    my @fields = unpack( $line, "A8 A8 A8 A16 A4" );

Note that spaces in the format argument to C<unpack> do not denote literal
spaces. If you have space separated data, you may want C<split> instead.

=head2 How do I find the soundex value of a string?

(contributed by brian d foy)

You can use the C<Text::Soundex> module. If you want to do fuzzy or close
matching, you might also try the L<String::Approx>, and
L<Text::Metaphone>, and L<Text::DoubleMetaphone> modules.

=head2 How can I expand variables in text strings?

(contributed by brian d foy)

If you can avoid it, don't, or if you can use a templating system,
such as L<Text::Template> or L<Template> Toolkit, do that instead. You
might even be able to get the job done with C<sprintf> or C<printf>:

    my $string = sprintf 'Say hello to %s and %s', $foo, $bar;

However, for the one-off simple case where I don't want to pull out a
full templating system, I'll use a string that has two Perl scalar
variables in it. In this example, I want to expand C<$foo> and C<$bar>
to their variable's values:

    my $foo = 'Fred';
    my $bar = 'Barney';
    $string = 'Say hello to $foo and $bar';

One way I can do this involves the substitution operator and a double
C</e> flag. The first C</e> evaluates C<$1> on the replacement side and
turns it into C<$foo>. The second /e starts with C<$foo> and replaces
it with its value. C<$foo>, then, turns into 'Fred', and that's finally
what's left in the string:

    $string =~ s/(\$\w+)/$1/eeg; # 'Say hello to Fred and Barney'

The C</e> will also silently ignore violations of strict, replacing
undefined variable names with the empty string. Since I'm using the
C</e> flag (twice even!), I have all of the same security problems I
have with C<eval> in its string form. If there's something odd in
C<$foo>, perhaps something like C<@{[ system "rm -rf /" ]}>, then
I could get myself in trouble.

To get around the security problem, I could also pull the values from
a hash instead of evaluating variable names. Using a single C</e>, I
can check the hash to ensure the value exists, and if it doesn't, I
can replace the missing value with a marker, in this case C<???> to
signal that I missed something:

    my $string = 'This has $foo and $bar';

    my %Replacements = (
        foo  => 'Fred',
        );

    # $string =~ s/\$(\w+)/$Replacements{$1}/g;
    $string =~ s/\$(\w+)/
        exists $Replacements{$1} ? $Replacements{$1} : '???'
        /eg;

    print $string;


=head2 Does Perl have anything like Ruby's #{} or Python's f string?

Unlike the others, Perl allows you to embed a variable naked in a double
quoted string, e.g. C<"variable $variable">. When there isn't whitespace or
other non-word characters following the variable name, you can add braces
(e.g. C<"foo ${foo}bar">) to ensure correct parsing.

An array can also be embedded directly in a string, and will be expanded
by default with spaces between the elements. The default
L<LIST_SEPARATOR|perlvar/$LIST_SEPARATOR> can be changed by assigning a
different string to the special variable C<$">, such as C<local $" = ', ';>.

Perl also supports references within a string providing the equivalent of
the features in the other two languages.

C<${\ ... }> embedded within a string will work for most simple statements
such as an object->method call. More complex code can be wrapped in a do
block C<${\ do{...} }>.

When you want a list to be expanded per C<$">, use C<@{[ ... ]}>.

    use Time::Piece;
    use Time::Seconds;
    my $scalar = 'STRING';
    my @array = ( 'zorro', 'a', 1, 'B', 3 );

    # Print the current date and time and then Tommorrow
    my $t = Time::Piece->new;
    say "Now is: ${\ $t->cdate() }";
    say "Tomorrow: ${\ do{ my $T=Time::Piece->new + ONE_DAY ; $T->fullday }}";

    # some variables in strings
    say "This is some scalar I have $scalar, this is an array @array.";
    say "You can also write it like this ${scalar} @{array}.";

    # Change the $LIST_SEPARATOR
    local $" = ':';
    say "Set \$\" to delimit with ':' and sort the Array @{[ sort @array ]}";

You may also want to look at the module
L<Quote::Code>, and templating tools such as L<Template::Toolkit> and
L<Mojo::Template>.

See also: L</"How can I expand variables in text strings?"> and
L</"How do I expand function calls in a string?"> in this FAQ.

=head2 What's wrong with always quoting "$vars"?

The problem is that those double-quotes force
stringification--coercing numbers and references into strings--even
when you don't want them to be strings. Think of it this way:
double-quote expansion is used to produce new strings. If you already
have a string, why do you need more?

If you get used to writing odd things like these:

    print "$var";       # BAD
    my $new = "$old";       # BAD
    somefunc("$var");    # BAD

You'll be in trouble. Those should (in 99.8% of the cases) be
the simpler and more direct:

    print $var;
    my $new = $old;
    somefunc($var);

Otherwise, besides slowing you down, you're going to break code when
the thing in the scalar is actually neither a string nor a number, but
a reference:

    func(\@array);
    sub func {
        my $aref = shift;
        my $oref = "$aref";  # WRONG
    }

You can also get into subtle problems on those few operations in Perl
that actually do care about the difference between a string and a
number, such as the magical C<++> autoincrement operator or the
syscall() function.

Stringification also destroys arrays.

    my @lines = `command`;
    print "@lines";     # WRONG - extra blanks
    print @lines;       # right

=head2 Why don't my E<lt>E<lt>HERE documents work?

Here documents are found in L<perlop>. Check for these three things:

=over 4

=item There must be no space after the E<lt>E<lt> part.

=item There (probably) should be a semicolon at the end of the opening token

=item You can't (easily) have any space in front of the tag.

=item There needs to be at least a line separator after the end token.

=back

If you want to indent the text in the here document, you
can do this:

    # all in one
    (my $VAR = <<HERE_TARGET) =~ s/^\s+//gm;
        your text
        goes here
    HERE_TARGET

But the HERE_TARGET must still be flush against the margin.
If you want that indented also, you'll have to quote
in the indentation.

    (my $quote = <<'    FINIS') =~ s/^\s+//gm;
            ...we will have peace, when you and all your works have
            perished--and the works of your dark master to whom you
            would deliver us. You are a liar, Saruman, and a corrupter
            of men's hearts. --Theoden in /usr/src/perl/taint.c
        FINIS
    $quote =~ s/\s+--/\n--/;

A nice general-purpose fixer-upper function for indented here documents
follows. It expects to be called with a here document as its argument.
It looks to see whether each line begins with a common substring, and
if so, strips that substring off. Otherwise, it takes the amount of leading
whitespace found on the first line and removes that much off each
subsequent line.

    sub fix {
        local $_ = shift;
        my ($white, $leader);  # common whitespace and common leading string
        if (/^\s*(?:([^\w\s]+)(\s*).*\n)(?:\s*\g1\g2?.*\n)+$/) {
            ($white, $leader) = ($2, quotemeta($1));
        } else {
            ($white, $leader) = (/^(\s+)/, '');
        }
        s/^\s*?$leader(?:$white)?//gm;
        return $_;
    }

This works with leading special strings, dynamically determined:

    my $remember_the_main = fix<<'    MAIN_INTERPRETER_LOOP';
    @@@ int
    @@@ runops() {
    @@@     SAVEI32(runlevel);
    @@@     runlevel++;
    @@@     while ( op = (*op->op_ppaddr)() );
    @@@     TAINT_NOT;
    @@@     return 0;
    @@@ }
    MAIN_INTERPRETER_LOOP

Or with a fixed amount of leading whitespace, with remaining
indentation correctly preserved:

    my $poem = fix<<EVER_ON_AND_ON;
       Now far ahead the Road has gone,
      And I must follow, if I can,
       Pursuing it with eager feet,
      Until it joins some larger way
       Where many paths and errands meet.
      And whither then? I cannot say.
        --Bilbo in /usr/src/perl/pp_ctl.c
    EVER_ON_AND_ON

Beginning with Perl version 5.26, a much simpler and cleaner way to
write indented here documents has been added to the language: the
tilde (~) modifier. See L<perlop/"Indented Here-docs"> for details.

=head1 Data: Arrays

=head2 What is the difference between a list and an array?

(contributed by brian d foy)

A list is a fixed collection of scalars. An array is a variable that
holds a variable collection of scalars. An array can supply its collection
for list operations, so list operations also work on arrays:

    # slices
    ( 'dog', 'cat', 'bird' )[2,3];
    @animals[2,3];

    # iteration
    foreach ( qw( dog cat bird ) ) { ... }
    foreach ( @animals ) { ... }

    my @three = grep { length == 3 } qw( dog cat bird );
    my @three = grep { length == 3 } @animals;

    # supply an argument list
    wash_animals( qw( dog cat bird ) );
    wash_animals( @animals );

Array operations, which change the scalars, rearrange them, or add
or subtract some scalars, only work on arrays. These can't work on a
list, which is fixed. Array operations include C<shift>, C<unshift>,
C<push>, C<pop>, and C<splice>.

An array can also change its length:

    $#animals = 1;  # truncate to two elements
    $#animals = 10000; # pre-extend to 10,001 elements

You can change an array element, but you can't change a list element:

    $animals[0] = 'Rottweiler';
    qw( dog cat bird )[0] = 'Rottweiler'; # syntax error!

    foreach ( @animals ) {
        s/^d/fr/;  # works fine
    }

    foreach ( qw( dog cat bird ) ) {
        s/^d/fr/;  # Error! Modification of read only value!
    }

However, if the list element is itself a variable, it appears that you
can change a list element. However, the list element is the variable, not
the data. You're not changing the list element, but something the list
element refers to. The list element itself doesn't change: it's still
the same variable.

You also have to be careful about context. You can assign an array to
a scalar to get the number of elements in the array. This only works
for arrays, though:

    my $count = @animals;  # only works with arrays

If you try to do the same thing with what you think is a list, you
get a quite different result. Although it looks like you have a list
on the righthand side, Perl actually sees a bunch of scalars separated
by a comma:

    my $scalar = ( 'dog', 'cat', 'bird' );  # $scalar gets bird

Since you're assigning to a scalar, the righthand side is in scalar
context. The comma operator (yes, it's an operator!) in scalar
context evaluates its lefthand side, throws away the result, and
evaluates its righthand side and returns the result. In effect,
that list-lookalike assigns to C<$scalar> its rightmost value. Many
people mess this up because they choose a list-lookalike whose
last element is also the count they expect:
