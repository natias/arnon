This has no effect if your perl was built without taint support.

=item B<-T>
X<-T>

turns on "taint" so you can test them.  Ordinarily
these checks are done only when running setuid or setgid.  It's a
good idea to turn them on explicitly for programs that run on behalf
of someone else whom you might not necessarily trust, such as CGI
programs or any internet servers you might write in Perl.  See
L<perlsec> for details.  For security reasons, this option must be
seen by Perl quite early; usually this means it must appear early
on the command line or in the C<#!> line for systems which support
that construct.

=item B<-u>
X<-u>

This switch causes Perl to dump core after compiling your
program.  You can then in theory take this core dump and turn it
into an executable file by using the I<undump> program (not supplied).
This speeds startup at the expense of some disk space (which you
can minimize by stripping the executable).  (Still, a "hello world"
executable comes out to about 200K on my machine.)  If you want to
execute a portion of your program before dumping, use the C<CORE::dump()>
function instead.  Note: availability of I<undump> is platform
specific and may not be available for a specific port of Perl.

=item B<-U>
X<-U>

allows Perl to do unsafe operations.  Currently the only "unsafe"
operations are attempting to unlink directories while running as superuser
and running setuid programs with fatal taint checks turned into warnings.
Note that warnings must be enabled along with this option to actually
I<generate> the taint-check warnings.

=item B<-v>
X<-v>

prints the version and patchlevel of your perl executable.

=item B<-V>
X<-V>

prints summary of the major perl configuration values and the current
values of @INC.

=item B<-V:>I<configvar>

Prints to STDOUT the value of the named configuration variable(s),
with multiples when your C<I<configvar>> argument looks like a regex (has
non-letters).  For example:

    $ perl -V:libc
	libc='/lib/libc-2.2.4.so';
    $ perl -V:lib.
	libs='-lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc';
	libc='/lib/libc-2.2.4.so';
    $ perl -V:lib.*
	libpth='/usr/local/lib /lib /usr/lib';
	libs='-lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc';
	lib_ext='.a';
	libc='/lib/libc-2.2.4.so';
	libperl='libperl.a';
	....

Additionally, extra colons can be used to control formatting.  A
trailing colon suppresses the linefeed and terminator ";", allowing
you to embed queries into shell commands.  (mnemonic: PATH separator
":".)

    $ echo "compression-vars: " `perl -V:z.*: ` " are here !"
    compression-vars:  zcat='' zip='zip'  are here !

A leading colon removes the "name=" part of the response, this allows
you to map to the name you need.  (mnemonic: empty label)

    $ echo "goodvfork="`./perl -Ilib -V::usevfork`
    goodvfork=false;

Leading and trailing colons can be used together if you need
positional parameter values without the names.  Note that in the case
below, the C<PERL_API> params are returned in alphabetical order.

    $ echo building_on `perl -V::osname: -V::PERL_API_.*:` now
    building_on 'linux' '5' '1' '9' now

=item B<-w>
X<-w>

prints warnings about dubious constructs, such as variable names
mentioned only once and scalar variables used
before being set; redefined subroutines; references to undefined
filehandles; filehandles opened read-only that you are attempting
to write on; values used as a number that don't I<look> like numbers;
using an array as though it were a scalar; if your subroutines
recurse more than 100 deep; and innumerable other things.

This switch really just enables the global C<$^W> variable; normally,
the lexically scoped C<use warnings> pragma is preferred. You
can disable or promote into fatal errors specific warnings using
C<__WARN__> hooks, as described in L<perlvar> and L<perlfunc/warn>.
See also L<perldiag> and L<perltrap>.  A fine-grained warning
facility is also available if you want to manipulate entire classes
of warnings; see L<warnings>.

=item B<-W>
X<-W>

Enables all warnings regardless of C<no warnings> or C<$^W>.
See L<warnings>.

=item B<-X>
X<-X>

Disables all warnings regardless of C<use warnings> or C<$^W>.
See L<warnings>.

Forbidden in C<L</PERL5OPT>>.

=item B<-x>
X<-x>

=item B<-x>I<directory>

tells Perl that the program is embedded in a larger chunk of unrelated
text, such as in a mail message.  Leading garbage will be
discarded until the first line that starts with C<#!> and contains the
string "perl".  Any meaningful switches on that line will be applied.

All references to line numbers by the program (warnings, errors, ...)
will treat the C<#!> line as the first line.
Thus a warning on the 2nd line of the program, which is on the 100th
line in the file will be reported as line 2, not as line 100.
This can be overridden by using the C<#line> directive.
(See L<perlsyn/"Plain Old Comments (Not!)">)

If a directory name is specified, Perl will switch to that directory
before running the program.  The B<-x> switch controls only the
disposal of leading garbage.  The program must be terminated with
C<__END__> if there is trailing garbage to be ignored;  the program
can process any or all of the trailing garbage via the C<DATA> filehandle
if desired.

The directory, if specified, must appear immediately following the B<-x>
with no intervening whitespace.

=back

=head1 ENVIRONMENT
X<perl, environment variables>

=over 12

=item HOME
X<HOME>

Used if C<chdir> has no argument.

=item LOGDIR
X<LOGDIR>

Used if C<chdir> has no argument and L</HOME> is not set.

=item PATH
X<PATH>

Used in executing subprocesses, and in finding the program if L</-S> is
used.

=item PERL5LIB
X<PERL5LIB>

A list of directories in which to look for Perl library files before
looking in the standard library.
Any architecture-specific and version-specific directories,
such as F<version/archname/>, F<version/>, or F<archname/> under the
specified locations are automatically included if they exist, with this
lookup done at interpreter startup time.  In addition, any directories
matching the entries in C<$Config{inc_version_list}> are added.
(These typically would be for older compatible perl versions installed
in the same directory tree.)

If PERL5LIB is not defined, L</PERLLIB> is used.  Directories are separated
(like in PATH) by a colon on Unixish platforms and by a semicolon on
Windows (the proper path separator being given by the command C<perl
-V:I<path_sep>>).

When running taint checks, either because the program was running setuid or
setgid, or the L</-T> or L</-t> switch was specified, neither PERL5LIB nor
L</PERLLIB> is consulted. The program should instead say:

    use lib "/my/directory";

=item PERL5OPT
X<PERL5OPT>

Command-line options (switches).  Switches in this variable are treated
as if they were on every Perl command line.  Only the B<-[CDIMTUWdmtw]>
switches are allowed.  When running taint checks (either because the
program was running setuid or setgid, or because the L</-T> or L</-t>
switch was used), this variable is ignored.  If PERL5OPT begins with
B<-T>, tainting will be enabled and subsequent options ignored.  If
PERL5OPT begins with B<-t>, tainting will be enabled, a writable dot
removed from @INC, and subsequent options honored.

=item PERLIO
X<PERLIO>

A space (or colon) separated list of PerlIO layers. If perl is built
to use PerlIO system for IO (the default) these layers affect Perl's IO.

It is conventional to start layer names with a colon (for example, C<:perlio>) to
emphasize their similarity to variable "attributes". But the code that parses
layer specification strings, which is also used to decode the PERLIO
environment variable, treats the colon as a separator.

An unset or empty PERLIO is equivalent to the default set of layers for
your platform; for example, C<:unix:perlio> on Unix-like systems
and C<:unix:crlf> on Windows and other DOS-like systems.

The list becomes the default for I<all> Perl's IO. Consequently only built-in
layers can appear in this list, as external layers (such as C<:encoding()>) need
IO in order to load them!  See L<"open pragma"|open> for how to add external
encodings as defaults.

Layers it makes sense to include in the PERLIO environment
variable are briefly summarized below. For more details see L<PerlIO>.

=over 8

=item :crlf
X<:crlf>

A layer which does CRLF to C<"\n"> translation distinguishing "text" and
"binary" files in the manner of MS-DOS and similar operating systems,
and also provides buffering similar to C<:perlio> on these architectures.

=item :perlio
X<:perlio>

This is a re-implementation of stdio-like buffering written as a
PerlIO layer.  As such it will call whatever layer is below it for
its operations, typically C<:unix>.

=item :stdio
X<:stdio>

This layer provides a PerlIO interface by wrapping system's ANSI C "stdio"
library calls. The layer provides both buffering and IO.
Note that the C<:stdio> layer does I<not> do CRLF translation even if that
is the platform's normal behaviour. You will need a C<:crlf> layer above it
to do that.

=item :unix
X<:unix>

Low-level layer that calls C<read>, C<write>, C<lseek>, etc.

=back

The default set of layers should give acceptable results on all platforms.

For Unix platforms that will be the equivalent of ":unix:perlio" or ":stdio".
Configure is set up to prefer the ":stdio" implementation if the system's library
provides for fast access to the buffer (not common on modern architectures);
otherwise, it uses the ":unix:perlio" implementation.

On Win32 the default in this release (5.30) is ":unix:crlf". Win32's ":stdio"
has a number of bugs/mis-features for Perl IO which are somewhat depending
on the version and vendor of the C compiler. Using our own C<:crlf> layer as
the buffer avoids those issues and makes things more uniform.

This release (5.30) uses C<:unix> as the bottom layer on Win32, and so still
uses the C compiler's numeric file descriptor routines.

The PERLIO environment variable is completely ignored when Perl
is run in taint mode.

=item PERLIO_DEBUG
X<PERLIO_DEBUG>

If set to the name of a file or device when Perl is run with the
L<-Di|/-Dletters> command-line switch, the logging of certain operations
of the PerlIO subsystem will be redirected to the specified file rather
than going to stderr, which is the default. The file is opened in append
mode. Typical uses are in Unix:

   % env PERLIO_DEBUG=/tmp/perlio.log perl -Di script ...

and under Win32, the approximately equivalent:

   > set PERLIO_DEBUG=CON
   perl -Di script ...

This functionality is disabled for setuid scripts, for scripts run
with L</-T>, and for scripts run on a Perl built without C<-DDEBUGGING>
support.

=item PERLLIB
X<PERLLIB>

A list of directories in which to look for Perl library
files before looking in the standard library.
If L</PERL5LIB> is defined, PERLLIB is not used.

The PERLLIB environment variable is completely ignored when Perl
is run in taint mode.

=item PERL5DB
X<PERL5DB>

The command used to load the debugger code.  The default is:

	BEGIN { require "perl5db.pl" }

The PERL5DB environment variable is only used when Perl is started with
a bare L</-d> switch.

=item PERL5DB_THREADED
X<PERL5DB_THREADED>

If set to a true value, indicates to the debugger that the code being
debugged uses threads.

=item PERL5SHELL (specific to the Win32 port)
X<PERL5SHELL>

On Win32 ports only, may be set to an alternative shell that Perl must use
internally for executing "backtick" commands or system().  Default is
C<cmd.exe /x/d/c> on WindowsNT and C<command.com /c> on Windows95.  The
value is considered space-separated.  Precede any character that
needs to be protected, like a space or backslash, with another backslash.

Note that Perl doesn't use COMSPEC for this purpose because
COMSPEC has a high degree of variability among users, leading to
portability concerns.  Besides, Perl can use a shell that may not be
fit for interactive use, and setting COMSPEC to such a shell may
interfere with the proper functioning of other programs (which usually
look in COMSPEC to find a shell fit for interactive use).

Before Perl 5.10.0 and 5.8.8, PERL5SHELL was not taint checked
when running external commands.  It is recommended that
you explicitly set (or delete) C<$ENV{PERL5SHELL}> when running
in taint mode under Windows.

=item PERL_ALLOW_NON_IFS_LSP (specific to the Win32 port)
X<PERL_ALLOW_NON_IFS_LSP>

Set to 1 to allow the use of non-IFS compatible LSPs (Layered Service Providers).
Perl normally searches for an IFS-compatible LSP because this is required
for its emulation of Windows sockets as real filehandles.  However, this may
cause problems if you have a firewall such as I<McAfee Guardian>, which requires
that all applications use its LSP but which is not IFS-compatible, because clearly
Perl will normally avoid using such an LSP.

Setting this environment variable to 1 means that Perl will simply use the
first suitable LSP enumerated in the catalog, which keeps I<McAfee Guardian>
happy--and in that particular case Perl still works too because I<McAfee
Guardian>'s LSP actually plays other games which allow applications
requiring IFS compatibility to work.

=item PERL_DEBUG_MSTATS
X<PERL_DEBUG_MSTATS>

Relevant only if Perl is compiled with the C<malloc> included with the Perl
distribution; that is, if C<perl -V:d_mymalloc> is "define".

If set, this dumps out memory statistics after execution.  If set
to an integer greater than one, also dumps out memory statistics
after compilation.

=item PERL_DESTRUCT_LEVEL
X<PERL_DESTRUCT_LEVEL>

Controls the behaviour of global destruction of objects and other
references.  See L<perlhacktips/PERL_DESTRUCT_LEVEL> for more information.

=item PERL_DL_NONLAZY
X<PERL_DL_NONLAZY>

Set to C<"1"> to have Perl resolve I<all> undefined symbols when it loads
a dynamic library.  The default behaviour is to resolve symbols when
they are used.  Setting this variable is useful during testing of
extensions, as it ensures that you get an error on misspelled function
names even if the test suite doesn't call them.

=item PERL_ENCODING
X<PERL_ENCODING>

If using the C<use encoding> pragma without an explicit encoding name, the
PERL_ENCODING environment variable is consulted for an encoding name.

=item PERL_HASH_SEED
X<PERL_HASH_SEED>

(Since Perl 5.8.1, new semantics in Perl 5.18.0)  Used to override
the randomization of Perl's internal hash function. The value is expressed
in hexadecimal, and may include a leading 0x. Truncated patterns
are treated as though they are suffixed with sufficient 0's as required.

If the option is provided, and C<PERL_PERTURB_KEYS> is NOT set, then
a value of '0' implies C<PERL_PERTURB_KEYS=0>/C<PERL_PERTURB_KEYS=NO>
and any other value implies
C<PERL_PERTURB_KEYS=2>/C<PERL_PERTURB_KEYS=DETERMINISTIC>. See the
documentation for L<PERL_PERTURB_KEYS|/PERL_PERTURB_KEYS> for important
caveats regarding the C<DETERMINISTIC> mode.

B<PLEASE NOTE: The hash seed is sensitive information>. Hashes are
randomized to protect against local and remote attacks against Perl
code. By manually setting a seed, this protection may be partially or
completely lost.

See L<perlsec/"Algorithmic Complexity Attacks">, L</PERL_PERTURB_KEYS>, and
L</PERL_HASH_SEED_DEBUG> for more information.

=item PERL_PERTURB_KEYS
X<PERL_PERTURB_KEYS>

(Since Perl 5.18.0)  Set to C<"0"> or C<"NO"> then traversing keys
will be repeatable from run to run for the same C<PERL_HASH_SEED>.
Insertion into a hash will not change the order, except to provide
for more space in the hash. When combined with setting PERL_HASH_SEED
this mode is as close to pre 5.18 behavior as you can get.

When set to C<"1"> or C<"RANDOM"> then traversing keys will be randomized.
Every time a hash is inserted into the key order will change in a random
fashion. The order may not be repeatable in a following program run
even if the PERL_HASH_SEED has been specified. This is the default
mode for perl when no PERL_HASH_SEED has been explicitly provided.

When set to C<"2"> or C<"DETERMINISTIC"> then inserting keys into a hash
will cause the key order to change, but in a way that is repeatable from
program run to program run, provided that the same hash seed is used,
and that the code does not itself perform any non-deterministic
operations and also provided exactly the same environment context.
Adding or removing an environment variable may and likely will change
the key order. If any part of the code builds a hash using non-
deterministic keys, for instance a hash keyed by the stringified form of
a reference, or the address of the objects it contains, then this may
and likely will have a global effect on the key order of *every* hash in
the process. To work properly this setting MUST be coupled with the
L<PERL_HASH_SEED|/"PERL_HASH_SEED"> to produce deterministic results,
and in fact, if you do set the C<PERL_HASH_SEED> explicitly you do not
need to set this as well, it will be automatically set to this mode.

B<NOTE:> Use of this option is considered insecure, and is intended only
for debugging non-deterministic behavior in Perl's hash function. Do
not use it in production.

See L<perlsec/"Algorithmic Complexity Attacks"> and L</PERL_HASH_SEED>
and L</PERL_HASH_SEED_DEBUG> for more information. You can get and set the
key traversal mask for a specific hash by using the C<hash_traversal_mask()>
function from L<Hash::Util>.

=item PERL_HASH_SEED_DEBUG
X<PERL_HASH_SEED_DEBUG>

(Since Perl 5.8.1.)  Set to C<"1"> to display (to STDERR) information
about the hash function, seed, and what type of key traversal
randomization is in effect at the beginning of execution.  This, combined
with L</PERL_HASH_SEED> and L</PERL_PERTURB_KEYS> is intended to aid in
debugging nondeterministic behaviour caused by hash randomization.

B<Note> that any information about the hash function, especially the hash
seed is B<sensitive information>: by knowing it, one can craft a denial-of-service
attack against Perl code, even remotely; see L<perlsec/"Algorithmic Complexity Attacks">
for more information. B<Do not disclose the hash seed> to people who
don't need to know it. See also L<C<hash_seed()>|Hash::Util/hash_seed> and
L<C<hash_traversal_mask()>|Hash::Util/hash_traversal_mask>.

An example output might be:

 HASH_FUNCTION = ONE_AT_A_TIME_HARD HASH_SEED = 0x652e9b9349a7a032 PERTURB_KEYS = 1 (RANDOM)

=item PERL_MEM_LOG
X<PERL_MEM_LOG>

If your Perl was configured with B<-Accflags=-DPERL_MEM_LOG>, setting
the environment variable C<PERL_MEM_LOG> enables logging debug
messages. The value has the form C<< <I<number>>[m][s][t] >>, where
C<I<number>> is the file descriptor number you want to write to (2 is
default), and the combination of letters specifies that you want
information about (m)emory and/or (s)v, optionally with
(t)imestamps. For example, C<PERL_MEM_LOG=1mst> logs all
information to stdout. You can write to other opened file descriptors
in a variety of ways:

  $ 3>foo3 PERL_MEM_LOG=3m perl ...

=item PERL_ROOT (specific to the VMS port)
X<PERL_ROOT>

A translation-concealed rooted logical name that contains Perl and the
logical device for the @INC path on VMS only.  Other logical names that
affect Perl on VMS include PERLSHR, PERL_ENV_TABLES, and
SYS$TIMEZONE_DIFFERENTIAL, but are optional and discussed further in
L<perlvms> and in F<README.vms> in the Perl source distribution.

=item PERL_SIGNALS
X<PERL_SIGNALS>

Available in Perls 5.8.1 and later.  If set to C<"unsafe">, the pre-Perl-5.8.0
signal behaviour (which is immediate but unsafe) is restored.  If set
to C<safe>, then safe (but deferred) signals are used.  See
L<perlipc/"Deferred Signals (Safe Signals)">.

=item PERL_UNICODE
X<PERL_UNICODE>

Equivalent to the L<-C|/-C [numberE<sol>list]> command-line switch.  Note
that this is not a boolean variable. Setting this to C<"1"> is not the
right way to "enable Unicode" (whatever that would mean).  You can use
C<"0"> to "disable Unicode", though (or alternatively unset PERL_UNICODE
in your shell before starting Perl).  See the description of the
L<-C|/-C [numberE<sol>list]> switch for more information.

=item PERL_USE_UNSAFE_INC
X<PERL_USE_UNSAFE_INC>

If perl has been configured to not have the current directory in
L<C<@INC>|perlvar/@INC> by default, this variable can be set to C<"1">
to reinstate it.  It's primarily intended for use while building and
testing modules that have not been updated to deal with "." not being in
C<@INC> and should not be set in the environment for day-to-day use.

=item SYS$LOGIN (specific to the VMS port)
X<SYS$LOGIN>

Used if chdir has no argument and L</HOME> and L</LOGDIR> are not set.

=item PERL_INTERNAL_RAND_SEED
X<PERL_INTERNAL_RAND_SEED>

Set to a non-negative integer to seed the random number generator used
internally by perl for a variety of purposes.

Ignored if perl is run setuid or setgid.  Used only for some limited
startup randomization (hash keys) if C<-T> or C<-t> perl is started
with tainting enabled.

Perl may be built to ignore this variable.

=item PERL_RAND_SEED
X<PERL_RAND_SEED>

When set to an integer value this value will be used to seed the perl
internal random number generator used for C<rand()> when it is used
without an explicit C<srand()> call or for when an explicit no-argument
C<srand()> call is made.

Normally calling C<rand()> prior to calling C<srand()> or calling
C<srand()> explicitly with no arguments should result in the random
number generator using "best efforts" to seed the generator state with a
relatively high quality random seed. When this environment variable is
set then the seeds used will be deterministically computed from the
value provided in the env var in such a way that the application process
and any forks or threads should continue to have their own unique seed but
that the program may be run twice with identical results as far as
C<rand()> goes (assuming all else is equal).

PERL_RAND_SEED is intended for performance measurements and debugging
and is explicitly NOT intended for stable testing. The only guarantee is
that a specific perl executable will produce the same results twice in a
row, there is no guarantee that the results will be the same between
perl releases or on different architectures.

Ignored if perl is run setuid or setgid.

=back

Perl also has environment variables that control how Perl handles data
specific to particular natural languages; see L<perllocale>.

Perl and its various modules and components, including its test frameworks,
may sometimes make use of certain other environment variables.  Some of
these are specific to a particular platform.  Please consult the
appropriate module documentation and any documentation for your platform
(like L<perlsolaris>, L<perllinux>, L<perlmacosx>, L<perlwin32>, etc) for
variables peculiar to those specific situations.

Perl makes all environment variables available to the program being
executed, and passes these along to any child processes it starts.
However, programs running setuid would do well to execute the following
lines before doing anything else, just to keep people honest:

    $ENV{PATH}  = "/bin:/usr/bin";    # or whatever you need
    $ENV{SHELL} = "/bin/sh" if exists $ENV{SHELL};
    delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};

=head1 ORDER OF APPLICATION

Some options, in particular C<-I>, C<-M>, C<PERL5LIB> and C<PERL5OPT> can
interact, and the order in which they are applied is important.

Note that this section does not document what I<actually> happens inside the
perl interpreter, it documents what I<effectively> happens.

=over

=item -I

The effect of multiple C<-I> options is to C<unshift> them onto C<@INC>
from right to left. So for example:

    perl -I 1 -I 2 -I 3

will first prepend C<3> onto the front of C<@INC>, then prepend C<2>, and
then prepend C<1>. The result is that C<@INC> begins with:

    qw(1 2 3)

=item -M

Multiple C<-M> options are processed from left to right. So this:

    perl -Mlib=1 -Mlib=2 -Mlib=3

will first use the L<lib> pragma to prepend C<1> to C<@INC>, then
it will prepend C<2>, then it will prepend C<3>, resulting in an C<@INC>
that begins with:

    qw(3 2 1)

=item the PERL5LIB environment variable

This contains a list of directories, separated by colons. The entire list
is prepended to C<@INC> in one go. This:

    PERL5LIB=1:2:3 perl

will result in an C<@INC> that begins with:

    qw(1 2 3)

=item combinations of -I, -M and PERL5LIB

C<PERL5LIB> is applied first, then all the C<-I> arguments, then all the
C<-M> arguments. This:

    PERL5LIB=e1:e2 perl -I i1 -Mlib=m1 -I i2 -Mlib=m2

will result in an C<@INC> that begins with:

    qw(m2 m1 i1 i2 e1 e2)

=item the PERL5OPT environment variable

This contains a space separated list of switches. We only consider the
effects of C<-M> and C<-I> in this section.

After normal processing of C<-I> switches from the command line, all
the C<-I> switches in C<PERL5OPT> are extracted. They are processed from
left to right instead of from right to left. Also note that while
whitespace is allowed between a C<-I> and its directory on the command
line, it is not allowed in C<PERL5OPT>.

After normal processing of C<-M> switches from the command line, all
the C<-M> switches in C<PERL5OPT> are extracted. They are processed from
left to right, I<i.e.> the same as those on the command line.

An example may make this clearer:

    export PERL5OPT="-Mlib=optm1 -Iopti1 -Mlib=optm2 -Iopti2"
    export PERL5LIB=e1:e2
    perl -I i1 -Mlib=m1 -I i2 -Mlib=m2

will result in an C<@INC> that begins with:

    qw(
        optm2
        optm1

        m2
        m1

        opti2
        opti1

        i1
        i2

        e1
        e2
    )

=item Other complications

There are some complications that are ignored in the examples above:

=over

=item arch and version subdirs

All of C<-I>, C<PERL5LIB> and C<use lib> will also prepend arch and version
subdirs if they are present

=item sitecustomize.pl

=back

=back
                                                                                                                                                                                                                                                         usr/local/lib/perl5/5.40.0/pod/perlsec.pod                                                          0000644 0000000 0000000 00000066352 14714567415 016445  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

perlsec - Perl security

=head1 DESCRIPTION

Perl is designed to make it easy to program securely even when running
with extra privileges, like setuid or setgid programs.  Unlike most
command line shells, which are based on multiple substitution passes on
each line of the script, Perl uses a more conventional evaluation scheme
with fewer hidden snags.  Additionally, because the language has more
builtin functionality, it can rely less upon external (and possibly
untrustworthy) programs to accomplish its purposes.

=head1 SECURITY VULNERABILITY CONTACT INFORMATION

If you believe you have found a security vulnerability in the Perl
interpreter or modules maintained in the core Perl codebase,
email the details to
L<perl-security@perl.org|mailto:perl-security@perl.org>.
This address is a closed membership mailing list monitored by the Perl
security team.

See L<perlsecpolicy> for additional information.

=head1 SECURITY MECHANISMS AND CONCERNS

=head2 Taint mode

By default,
Perl automatically enables a set of special security checks, called I<taint
mode>, when it detects its program running with differing real and effective
user or group IDs.  The setuid bit in Unix permissions is mode 04000, the
setgid bit mode 02000; either or both may be set.  You can also enable taint
mode explicitly by using the B<-T> command line flag.  This flag is
I<strongly> suggested for server programs and any program run on behalf of
someone else, such as a CGI script.  Once taint mode is on, it's on for
the remainder of your script.

While in this mode, Perl takes special precautions called I<taint
checks> to prevent both obvious and subtle traps.  Some of these checks
are reasonably simple, such as verifying that path directories aren't
writable by others; careful programmers have always used checks like
these.  Other checks, however, are best supported by the language itself,
and it is these checks especially that contribute to making a set-id Perl
program more secure than the corresponding C program.

Support for taint checks adds an overhead to all Perl programs,
whether or not you're using the taint features.
Perl 5.18 introduced C preprocessor symbols that can
be used to disable the taint features when building perl.

When taint is enabled,
you may not use data derived from outside your program to affect
something else outside your program--at least, not by accident.  All
command line arguments, environment variables, locale information (see
L<perllocale>), results of certain system calls (C<readdir()>,
C<readlink()>, the variable of C<shmread()>, the messages returned by
C<msgrcv()>, the password, gcos and shell fields returned by the
C<getpwxxx()> calls), and all file input are marked as "tainted".
Tainted data may not be used directly or indirectly in any command
that invokes a sub-shell, nor in any command that modifies files,
directories, or processes, B<with the following exceptions>:

=over 4

=item *

Arguments to C<print> and C<syswrite> are B<not> checked for taintedness.

=item *

Symbolic methods

    $obj->$method(@args);

and symbolic sub references

    &{$foo}(@args);
    $foo->(@args);

are not checked for taintedness.  This requires extra carefulness
unless you want external data to affect your control flow.  Unless
you carefully limit what these symbolic values are, people are able
to call functions B<outside> your Perl code, such as POSIX::system,
in which case they are able to run arbitrary external code.

=item *

Hash keys are B<never> tainted.

=back

For efficiency reasons, Perl takes a conservative view of
whether data is tainted.  If an expression contains tainted data,
any subexpression may be considered tainted, even if the value
of the subexpression is not itself affected by the tainted data.

Because taintedness is associated with each scalar value, some
elements of an array or hash can be tainted and others not.
The keys of a hash are B<never> tainted.

For example:

    $arg = shift;		# $arg is tainted
    $hid = $arg . 'bar';	# $hid is also tainted
    $line = <>;			# Tainted
    $line = <STDIN>;		# Also tainted
    open FOO, "/home/me/bar" or die $!;
    $line = <FOO>;		# Still tainted
    $path = $ENV{'PATH'};	# Tainted, but see below
    $data = 'abc';		# Not tainted

    system "echo $arg";		# Insecure
    system "/bin/echo", $arg;	# Considered insecure
				# (Perl doesn't know about /bin/echo)
    system "echo $hid";		# Insecure
    system "echo $data";	# Insecure until PATH set

    $path = $ENV{'PATH'};	# $path now tainted

    $ENV{'PATH'} = '/bin:/usr/bin';
    delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

    $path = $ENV{'PATH'};	# $path now NOT tainted
    system "echo $data";	# Is secure now!

    open(FOO, "< $arg");	# OK - read-only file
    open(FOO, "> $arg"); 	# Not OK - trying to write

    open(FOO,"echo $arg|");	# Not OK
    open(FOO,"-|")
	or exec 'echo', $arg;	# Also not OK

    $shout = `echo $arg`;	# Insecure, $shout now tainted

    unlink $data, $arg;		# Insecure
    umask $arg;			# Insecure

    exec "echo $arg";		# Insecure
    exec "echo", $arg;		# Insecure
    exec "sh", '-c', $arg;	# Very insecure!

    @files = <*.c>;		# insecure (uses readdir() or similar)
    @files = glob('*.c');	# insecure (uses readdir() or similar)

    # In either case, the results of glob are tainted, since the list of
    # filenames comes from outside of the program.

    $bad = ($arg, 23);		# $bad will be tainted
    $arg, `true`;		# Insecure (although it isn't really)

If you try to do something insecure, you will get a fatal error saying
something like "Insecure dependency" or "Insecure $ENV{PATH}".

The exception to the principle of "one tainted value taints the whole
expression" is with the ternary conditional operator C<?:>.  Since code
with a ternary conditional

    $result = $tainted_value ? "Untainted" : "Also untainted";

is effectively

    if ( $tainted_value ) {
        $result = "Untainted";
    } else {
        $result = "Also untainted";
    }

it doesn't make sense for C<$result> to be tainted.

=head2 Laundering and Detecting Tainted Data

To test whether a variable contains tainted data, and whose use would
thus trigger an "Insecure dependency" message, you can use the
C<tainted()> function of the Scalar::Util module, available in your
nearby CPAN mirror, and included in Perl starting from the release 5.8.0.
Or you may be able to use the following C<is_tainted()> function.

    sub is_tainted {
        local $@;   # Don't pollute caller's value.
        return ! eval { eval("#" . substr(join("", @_), 0, 0)); 1 };
    }

This function makes use of the fact that the presence of tainted data
anywhere within an expression renders the entire expression tainted.  It
would be inefficient for every operator to test every argument for
taintedness.  Instead, the slightly more efficient and conservative
approach is used that if any tainted value has been accessed within the
same expression, the whole expression is considered tainted.

But testing for taintedness gets you only so far.  Sometimes you have just
to clear your data's taintedness.  Values may be untainted by using them
as keys in a hash; otherwise the only way to bypass the tainting
mechanism is by referencing subpatterns from a regular expression match.
Perl presumes that if you reference a substring using $1, $2, etc. in a
non-tainting pattern, that
you knew what you were doing when you wrote that pattern.  That means using
a bit of thought--don't just blindly untaint anything, or you defeat the
entire mechanism.  It's better to verify that the variable has only good
characters (for certain values of "good") rather than checking whether it
has any bad characters.  That's because it's far too easy to miss bad
characters that you never thought of.

Here's a test to make sure that the data contains nothing but "word"
characters (alphabetics, numerics, and underscores), a hyphen, an at sign,
or a dot.

    if ($data =~ /^([-\@\w.]+)$/) {
	$data = $1; 			# $data now untainted
    } else {
	die "Bad data in '$data'"; 	# log this somewhere
    }

This is fairly secure because C</\w+/> doesn't normally match shell
metacharacters, nor are dot, dash, or at going to mean something special
to the shell.  Use of C</.+/> would have been insecure in theory because
it lets everything through, but Perl doesn't check for that.  The lesson
is that when untainting, you must be exceedingly careful with your patterns.
Laundering data using regular expression is the I<only> mechanism for
untainting dirty data, unless you use the strategy detailed below to fork
a child of lesser privilege.

The example does not untaint C<$data> if C<use locale> is in effect,
because the characters matched by C<\w> are determined by the locale.
Perl considers that locale definitions are untrustworthy because they
contain data from outside the program.  If you are writing a
locale-aware program, and want to launder data with a regular expression
containing C<\w>, put C<no locale> ahead of the expression in the same
block.  See L<perllocale/SECURITY> for further discussion and examples.

=head2 Switches On the "#!" Line

When you make a script executable, in order to make it usable as a
command, the system will pass switches to perl from the script's #!
line.  Perl checks that any command line switches given to a setuid
(or setgid) script actually match the ones set on the #! line.  Some
Unix and Unix-like environments impose a one-switch limit on the #!
line, so you may need to use something like C<-wU> instead of C<-w -U>
under such systems.  (This issue should arise only in Unix or
Unix-like environments that support #! and setuid or setgid scripts.)

=head2 Taint mode and @INC

When taint mode (C<-T>) is in effect, the environment variables
C<PERL5LIB>, C<PERLLIB>, and C<PERL_USE_UNSAFE_INC>
are ignored by Perl.  You can still adjust C<@INC> from outside the
program by using the C<-I> command line option as explained in
L<perlrun|perlrun/-Idirectory>.  The two environment variables are
ignored because they are obscured, and a user running a program could
be unaware that they are set, whereas the C<-I> option is clearly
visible and therefore permitted.

Another way to modify C<@INC> without modifying the program, is to use
the C<lib> pragma, e.g.:

  perl -Mlib=/foo program

The benefit of using C<-Mlib=/foo> over C<-I/foo>, is that the former
will automagically remove any duplicated directories, while the latter
will not.

Note that if a tainted string is added to C<@INC>, the following
problem will be reported:

  Insecure dependency in require while running with -T switch

On versions of Perl before 5.26, activating taint mode will also remove
the current directory (".") from the default value of C<@INC>. Since
version 5.26, the current directory isn't included in C<@INC> by
default.

=head2 Cleaning Up Your Path

For "Insecure C<$ENV{PATH}>" messages, you need to set C<$ENV{'PATH'}> to
a known value, and each directory in the path must be absolute and
non-writable by others than its owner and group.  You may be surprised to
get this message even if the pathname to your executable is fully
qualified.  This is I<not> generated because you didn't supply a full path
to the program; instead, it's generated because you never set your PATH
environment variable, or you didn't set it to something that was safe.
Because Perl can't guarantee that the executable in question isn't itself
going to turn around and execute some other program that is dependent on
your PATH, it makes sure you set the PATH.

The PATH isn't the only environment variable which can cause problems.
Because some shells may use the variables IFS, CDPATH, ENV, and
BASH_ENV, Perl checks that those are either empty or untainted when
starting subprocesses.  You may wish to add something like this to your
setid and taint-checking scripts.

    delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};   # Make %ENV safer

It's also possible to get into trouble with other operations that don't
care whether they use tainted values.  Make judicious use of the file
tests in dealing with any user-supplied filenames.  When possible, do
opens and such B<after> properly dropping any special user (or group!)
