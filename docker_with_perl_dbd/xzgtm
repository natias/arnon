	ub1			nullok;
	char 		*name;
	SV			*name_sv;	/* only set for OCI8			*/
	/* OCI docs say OCI_ATTR_CHAR_USED is ub4, they're wrong	*/
	ub1			len_char_used;	/* OCI_ATTR_CHAR_USED			*/
	ub2			len_char_size;	/* OCI_ATTR_CHAR_SIZE			*/
	ub2			csid;		/* OCI_ATTR_CHARSET_ID			*/
	ub1			csform;		/* OCI_ATTR_CHARSET_FORM		*/
	ub4			disize;		/* max display/buffer size		*/
	ub4			piece_size; /*used in callback to set the size of the piece to get*/
	char		*bless;		/* for Oracle::OCI style handle data	*/
	void		*special;	/* hook for special purposes (LOBs etc)	*/
	int			pers_lob;   /*for persistant lobs 10g Release 2. or later*/
	int			clbk_lob;   /*for persistant lobs 10g Release 2. or later*/
	int			piece_lob;  /*use piecewise fetch for lobs*/

	/* Our storage space for the field data as it's fetched	*/

	sword		ftype;		/* external datatype we wish to get	*/
	IV			req_type;	/* type passed to bind_col */
	UV			bind_flags;	/* flags passed to bind_col */
	fb_ary_t	*fb_ary ;	/* field buffer array			*/
	/* if this is an embedded object we use this */
	fbh_obj_t	*obj;


 };

 /* Placeholder structure */
 /* Note: phs_t is serialized into scalar value, and de-serialized then. */
 /* Be carefull! */

typedef struct phs_st phs_t;	/* scalar placeholder   */

struct phs_st {	/* scalar placeholder EXPERIMENTAL	*/
	imp_sth_t		*imp_sth; /* 'parent' statement			*/
	sword 			ftype;	/* external OCI field type		*/

	SV				*sv;		/* the scalar holding the value		*/
	U32 			sv_type;	/* original sv type at time of bind	*/
	ub2 			csid_orig;	/* original oracle default csid 	*/
	ub2 			csid;		/* 0 for automatic			*/
	ub1 			csform;		/* 0 for automatic			*/
	ub4 			maxdata_size;	/* set OCI_ATTR_MAXDATA_SIZE if >0	*/
	bool			is_inout;

	IV				maxlen;		/* max possible len (=allocated buffer)	*/
					/* Note: for array bind = buffer for each entry */
	OCIBind			*bndhp;
	void			*desc_h;	/* descriptor if needed (LOBs etc)	*/
	ub4				desc_t;	/* OCI type of desc_h			*/
	ub4				alen;
	ub2				arcode;
	int				idx;	  /* 0-based index for ?/:1 style, or -1  */

	sb2				indp;		/* null indicator			*/
	char			*progv;

	int(*out_prepost_exec)_((SV *, imp_sth_t *, phs_t *, int pre_exec));
	SV				*ora_field;		/* from attribute (for LOB binds)	*/
	ub4				alen_incnull;	/* 0 or 1 if alen should include null	*/
	/* Array bind support */
	char			*array_buf;			/* Temporary buffer = malloc(array_buflen) */
	int				array_buflen;		 /* Allocated length of array_buf */
	int				array_numstruct;	  /* Number of bound structures in buffer */
	OCIInd			*array_indicators;	 /* Indicator array	   = malloc( array_numallocated * sizeof(OCIInd) ) */
	unsigned short	*array_lengths; /* Array entries lengths = malloc( array_numallocated * sizeof(unsigned short) ) */
	int				array_numallocated;   /* Allocated number of indicators/lengths */
	int				ora_maxarray_numentries; /* Number of entries to send allocated to Oracle. (may be less, than total allocated) */

	/* Support for different internal C-types, representing Oracle data */
	int				ora_internal_type; /* Which C-type would be bound instead of SQLT_CHR. */

	char			name[1];	/* struct is malloc'd bigger as needed	*/
};


/* ------ define functions and external variables ------ */

extern int ora_fetchtest;
extern int dbd_verbose;
extern int oci_warn;
extern int ora_objects;
extern int ora_ncs_buff_mtpl;
extern ub2 us7ascii_csid;
extern ub2 utf8_csid;
extern ub2 al32utf8_csid;
extern ub2 al16utf16_csid;

#define CS_IS_UTF8( cs ) \
	(  ( cs == utf8_csid ) || ( cs == al32utf8_csid ) )

#define CS_IS_NOT_UTF8_COMPATIBLE( cs ) \
  ( cs == us7ascii_csid  )

 #define CS_IS_UTF16( cs ) ( cs == al16utf16_csid )


#define CSFORM_IMPLIED_CSID(imp_xxh, csform) \
	((csform==SQLCS_NCHAR) ? (imp_xxh)->ncset : (imp_xxh)->cset)

#define CSFORM_IMPLIES_UTF8(imp_xxh, csform) \
	CS_IS_UTF8( CSFORM_IMPLIED_CSID(imp_xxh, csform ) )


void dbd_init_oci _((dbistate_t *dbistate));
void dbd_preparse _((imp_sth_t *imp_sth, char *statement));
void dbd_fbh_dump(imp_sth_t *imp_sth, imp_fbh_t *fbh, int i, int aidx);
void ora_free_fbh_contents _((SV *sth, imp_fbh_t *fbh));
void ora_free_templob _((SV *sth, imp_sth_t *imp_sth, OCILobLocator *lobloc));
int ora_dbtype_is_long _((int dbtype));
fb_ary_t *fb_ary_alloc _((ub4 bufl, int size));
fb_ary_t *fb_ary_cb_alloc _((ub4 piece_size,ub4 max_len, int size));

int ora_db_reauthenticate _((SV *dbh, imp_dbh_t *imp_dbh, char *uid, char *pwd));

void dbd_phs_sv_complete _((imp_sth_t *imp_sth, phs_t *phs, SV *sv, I32 debug));
void dbd_phs_avsv_complete _((imp_sth_t *imp_sth, phs_t *phs, I32 index, I32 debug));

int pp_exec_rset _((SV *sth, imp_sth_t *imp_sth, phs_t *phs, int pre_exec));
int pp_rebind_ph_rset_in _((SV *sth, imp_sth_t *imp_sth, phs_t *phs));

#define OTYPE_IS_LONG(t)  ((t)==8 || (t)==24 || (t)==94 || (t)==95)

int oci_error_err _((SV *h, OCIError *errhp, sword status, char *what, sb4 force_err));
#define oci_error(h, errhp, status, what) oci_error_err(h, errhp, status, what, 0)
char *oci_stmt_type_name _((int stmt_type));
char *oci_typecode_name _((int typecode));
char *sql_typecode_name _((int dbtype));
char *oci_status_name _((sword status));
char *oci_mode _((ub4  mode));
char *oci_bind_options _((ub4 options));
char *oci_define_options _((ub4 options));
char *oci_hdtype_name _((ub4 hdtype));
char *oci_attr_name _((ub4 attr));
char *oci_exe_mode _((ub4 mode));
char *dbd_yes_no _((int yes_no));
char *oci_col_return_codes _((int rc));
char *oci_csform_name _((ub4 attr));
/*char *oci_sql_function_code_name _((int sqlfncode));
  char *oci_ptype_name _((int ptype));*/

int dbd_rebind_ph_lob _((SV *sth, imp_sth_t *imp_sth, phs_t *phs));

int dbd_rebind_ph_nty _((SV *sth, imp_sth_t *imp_sth, phs_t *phs));

int ora_st_execute_array _((SV *sth, imp_sth_t *imp_sth, SV *tuples,
							SV *tuples_status, SV *columns, ub4 exe_count, SV *err_count));


SV * ora_create_xml _((SV *dbh, char *source));

void ora_free_lob_refetch _((SV *sth, imp_sth_t *imp_sth));
void dbd_phs_avsv_complete _((imp_sth_t *imp_sth, phs_t *phs, I32 index, I32 debug));
void dbd_phs_sv_complete _((imp_sth_t *imp_sth, phs_t *phs, SV *sv, I32 debug));
int post_execute_lobs _((SV *sth, imp_sth_t *imp_sth, ub4 row_count));
char *ora_sql_error _((imp_sth_t *imp_sth, char *msg));
char *ora_env_var(char *name, char *buf, unsigned long size);

#if defined(__CYGWIN__) || defined(__CYGWIN32__)
void ora_cygwin_set_env(char *name, char *value);

#endif /* __CYGWIN__ */

sb4 dbd_phs_in _((dvoid *octxp, OCIBind *bindp, ub4 iter, ub4 index,
			  dvoid **bufpp, ub4 *alenp, ub1 *piecep, dvoid **indpp));
sb4 dbd_phs_out _((dvoid *octxp, OCIBind *bindp, ub4 iter, ub4 index,
			 dvoid **bufpp, ub4 **alenpp, ub1 *piecep,
			 dvoid **indpp, ub2 **rcodepp));
sb4 presist_lob_fetch_cbk _((dvoid *octxp, OCIDefine *dfnhp, ub4 iter, dvoid **bufpp,
					  ub4 **alenpp, ub1 *piecep, dvoid **indpp, ub2 **rcpp));
int dbd_rebind_ph_rset _((SV *sth, imp_sth_t *imp_sth, phs_t *phs));

void * oci_db_handle(imp_dbh_t *imp_dbh, int handle_type, int flags);
void * oci_st_handle(imp_sth_t *imp_sth, int handle_type, int flags);
void fb_ary_free(fb_ary_t *fb_ary);
void rs_array_init(imp_sth_t *imp_sth);

ub4 ora_db_version _((SV *dbh, imp_dbh_t *imp_dbh));
sb4 reg_taf_callback _((SV *dbh, imp_dbh_t *imp_dbh));

int cnx_establish (pTHX_ dblogin_info_t * );
void cnx_drop_dr(pTHX_ imp_drh_t *);
void cnx_clean(pTHX_ imp_dbh_t * );
void cnx_detach(pTHX_ imp_dbh_t * );
void ora_shared_release(pTHX_ SV * );

#ifdef ORA_OCI_112
int cnx_get_pool_mode(pTHX_ SV *, imp_dbh_t * );
void cnx_pool_mode(pTHX_ SV * , imp_dbh_t * , ub4);

#if OCI_MAJOR_VERSION > 18
int cnx_get_pool_wait(pTHX_ SV *, imp_dbh_t * );
void cnx_pool_wait(pTHX_ SV * , imp_dbh_t * , ub4);
#endif

int cnx_get_pool_used(pTHX_ SV *, imp_dbh_t * );

int cnx_get_pool_rlb(pTHX_ SV *, imp_dbh_t * );

int cnx_get_pool_incr(pTHX_ SV *, imp_dbh_t * );
void cnx_pool_incr(pTHX_ SV * , imp_dbh_t * , ub4);

int cnx_get_pool_min(pTHX_ SV *, imp_dbh_t * );
void cnx_pool_min(pTHX_ SV * , imp_dbh_t * , ub4);

int cnx_get_pool_max(pTHX_ SV *, imp_dbh_t * );
void cnx_pool_max(pTHX_ SV * , imp_dbh_t * , ub4);

int cnx_is_pooled_session(pTHX_ SV *, imp_dbh_t *);
#endif

/* These defines avoid name clashes for multiple statically linked DBD's	*/

#define dbd_init			ora_init
#define dbd_dr_destroy		ora_dr_destroy
#define dbd_db_login		ora_db_login
#define dbd_db_login6		ora_db_login6
#define dbd_db_do			ora_db_do
#define dbd_db_commit		ora_db_commit
#define dbd_db_rollback		ora_db_rollback
#define dbd_db_cancel		ora_db_cancel
#define dbd_db_disconnect	ora_db_disconnect
#define dbd_db_destroy		ora_db_destroy
#define dbd_take_imp_data	ora_take_imp_data
#define dbd_db_STORE_attrib	ora_db_STORE_attrib
#define dbd_db_FETCH_attrib	ora_db_FETCH_attrib
#define dbd_st_prepare		ora_st_prepare
#define dbd_st_rows			ora_st_rows
#define dbd_st_cancel		ora_st_cancel
#define dbd_st_execute		ora_st_execute
#define dbd_st_fetch		ora_st_fetch
#define dbd_st_finish		ora_st_finish
#define dbd_st_destroy		ora_st_destroy
#define dbd_st_blob_read	ora_st_blob_read
#define dbd_st_STORE_attrib	ora_st_STORE_attrib
#define dbd_st_FETCH_attrib	ora_st_FETCH_attrib
#define dbd_describe		ora_describe
#define dbd_bind_ph			ora_bind_ph
#define dbd_st_bind_col		ora_st_bind_col
#include "ocitrace.h"

/* end */

                                                                                                                                                                                                           usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBD/Oracle/dbivport.h                    0000444 0000000 0000000 00000003740 14616324562 025123  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* dbivport.h

	Provides macros that enable greater portability between DBI versions.

	This file should be *copied* and included in driver distributions
	and #included into the source, after #include DBIXS.h

	New driver releases should include an updated copy of dbivport.h
	from the most recent DBI release.
*/

#ifndef DBI_VPORT_H
#define DBI_VPORT_H

#ifndef DBIh_SET_ERR_CHAR
/* Emulate DBIh_SET_ERR_CHAR
	Only uses the err_i, errstr and state parameters.
*/
#define DBIh_SET_ERR_CHAR(h, imp_xxh, err_c, err_i, errstr, state, method) \
        sv_setiv(DBIc_ERR(imp_xxh), err_i); \
        (state) ? (void)sv_setpv(DBIc_STATE(imp_xxh), state) : (void)SvOK_off(DBIc_STATE(imp_xxh)); \
        sv_setpv(DBIc_ERRSTR(imp_xxh), errstr)
#endif

#ifndef DBIcf_Executed
#define DBIcf_Executed    0x080000
#endif

#ifndef DBIc_TRACE_LEVEL_MASK
#define DBIc_TRACE_LEVEL_MASK   0x0000000F
#define DBIc_TRACE_FLAGS_MASK   0xFFFFFF00
#define DBIc_TRACE_SETTINGS(imp) (DBIc_DBISTATE(imp)->debug)
#define DBIc_TRACE_LEVEL(imp)   (DBIc_TRACE_SETTINGS(imp) & DBIc_TRACE_LEVEL_MASK)
#define DBIc_TRACE_FLAGS(imp)   (DBIc_TRACE_SETTINGS(imp) & DBIc_TRACE_FLAGS_MASK)
/* DBIc_TRACE_MATCHES - true if s1 'matches' s2  (c.f. trace_msg())
   DBIc_TRACE_MATCHES(foo, DBIc_TRACE_SETTINGS(imp))
*/
#define DBIc_TRACE_MATCHES(s1, s2)      \
        (  ((s1 & DBIc_TRACE_LEVEL_MASK) >= (s2 & DBIc_TRACE_LEVEL_MASK)) \
        || ((s1 & DBIc_TRACE_FLAGS_MASK)  & (s2 & DBIc_TRACE_FLAGS_MASK)) )
/* DBIc_TRACE - true if flags match & DBI level>=flaglevel, or if DBI level>level
   DBIc_TRACE(imp,         0, 0, 4) = if level >= 4
   DBIc_TRACE(imp, DBDtf_FOO, 2, 4) = if tracing DBDtf_FOO & level>=2 or level>=4
   DBIc_TRACE(imp, DBDtf_FOO, 2, 0) = as above but never trace just due to level
*/
#define DBIc_TRACE(imp, flags, flaglevel, level)        \
        (  (flags && (DBIc_TRACE_FLAGS(imp) & flags) && (DBIc_TRACE_LEVEL(imp) >= flaglevel)) \
        || (level && DBIc_TRACE_LEVEL(imp) >= level) )
#endif


#endif /* !DBI_VPORT_H */
                                usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBD/Oracle/mk.pm                         0000444 0000000 0000000 00000035213 14723047467 024073  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        $dbd_oracle_mm_opts = {
  "OBJECT" => "\$(O_FILES)",
  "dynamic_lib" => {
    "OTHERLDFLAGS" => ""
  },
  "INC" => "-I/usr/include/oracle/19.6/client64 -I/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBI",
  "AUTHOR" => "Tim Bunce (dbi-users\@perl.org)",
  "DIR" => [],
  "ABSTRACT_FROM" => "lib/DBD/Oracle.pm",
  "LICENSE" => "perl",
  "DEFINE" => " -Wall -Wno-comment -DUTF8_SUPPORT -DORA_OCI_VERSION=\\\"19.6.0.0\\\" -DORA_OCI_102 -DORA_OCI_112",
  "LIBS" => [
    "-L/usr/lib/oracle/19.6/client64/lib -lclntsh"
  ],
  "META_MERGE" => {
    "configure_requires" => {
      "DBI" => "1.623"
    },
    "build_requires" => {
      "DBI" => "1.623",
      "Test::Simple" => "0.90",
      "ExtUtils::MakeMaker" => 0
    }
  },
  "PREREQ_PM" => {
    "DBI" => "1.623"
  },
  "dist" => {
    "COMPRESS" => "gzip -v9",
    "DIST_DEFAULT" => "clean distcheck disttest tardist",
    "PREOP" => "\$(MAKE) -f Makefile.old distdir",
    "SUFFIX" => "gz"
  },
  "VERSION_FROM" => "lib/DBD/Oracle.pm",
  "clean" => {
    "FILES" => "xstmp.c Oracle.xsi dll.base dll.exp sqlnet.log libOracle.def mk.pm DBD_ORA_OBJ.*"
  },
  "NAME" => "DBD::Oracle"
};
$dbd_oracle_mm_self = bless( {
  "XS_VERSION_MACRO" => "XS_VERSION",
  "TEST_REQUIRES" => {},
  "PERL_INC" => "/usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/CORE",
  "MAKEMAKER" => "/usr/local/lib/perl5/5.40.0/ExtUtils/MakeMaker.pm",
  "LD" => "cc",
  "UNINSTALL" => "\$(ABSPERLRUN) -MExtUtils::Command::MM -e 'uninstall' --",
  "EXTRALIBS" => "-L/usr/lib/oracle/19.6/client64/lib -lclntsh",
  "DESTINSTALLVENDORLIB" => "\$(DESTDIR)\$(INSTALLVENDORLIB)",
  "VERSION" => "1.90",
  "FIRST_MAKEFILE" => "Makefile",
  "PERLRUNINST" => "\$(PERLRUN) \"-I\$(INST_ARCHLIB)\" \"-I\$(INST_LIB)\"",
  "FALSE" => "false",
  "CCDLFLAGS" => "-Wl,-E -Wl,-rpath,/usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/CORE",
  "MAP_TARGET" => "perl",
  "XS" => {
    "Oracle.xs" => "Oracle.c"
  },
  "WARN_IF_OLD_PACKLIST" => "\$(ABSPERLRUN) -MExtUtils::Command::MM -e 'warn_if_old_packlist' --",
  "FIXIN" => "\$(ABSPERLRUN) -MExtUtils::MY -e 'MY->fixin(shift)' --",
  "LDFLAGS" => " -fstack-protector-strong -L/usr/local/lib",
  "SITEPREFIX" => "/usr/local",
  "INSTALLSITEMAN1DIR" => "\$(INSTALLMAN1DIR)",
  "CHMOD" => "chmod",
  "H" => [
    "Oracle.h",
    "dbdimp.h",
    "dbivport.h",
    "ocitrace.h"
  ],
  "MAN1SECTION" => 1,
  "PMLIBDIRS" => [
    "lib"
  ],
  "INSTALLSCRIPT" => "/usr/local/bin",
  "PREOP" => "\$(NOECHO) \$(NOOP)",
  "ABSTRACT_FROM" => "lib/DBD/Oracle.pm",
  "DIR" => [],
  "INST_BOOT" => "\$(INST_ARCHAUTODIR)/\$(BASEEXT).bs",
  "clean" => {},
  "MOD_INSTALL" => "\$(ABSPERLRUN) -MExtUtils::Install -e 'install([ from_to => {\@ARGV}, verbose => '\\''\$(VERBINST)'\\'', uninstall_shadows => '\\''\$(UNINST)'\\'', dir_mode => '\\''\$(PERM_DIR)'\\'' ]);' --",
  "INSTALLVENDORMAN1DIR" => "\$(INSTALLMAN1DIR)",
  "MAKEFILE_OLD" => "Makefile.old",
  "HAS_LINK_CODE" => 1,
  "LDFROM" => "\$(OBJECT)",
  "INSTALLMAN1DIR" => "none",
  "INST_MAN1DIR" => "blib/man1",
  "DLBASE" => "\$(BASEEXT)",
  "INSTALLSITESCRIPT" => "/usr/local/bin",
  "INSTALLSITELIB" => "/usr/local/lib/perl5/site_perl/5.40.0",
  "SO" => "so",
  "dist" => {},
  "ZIP" => "zip",
  "PERL_SRC" => undef,
  "CI" => "ci -u",
  "INSTALLPRIVLIB" => "/usr/local/lib/perl5/5.40.0",
  "INSTALLVENDORLIB" => "/usr/local/lib/perl5/vendor_perl/5.40.0",
  "INST_LIBDIR" => "\$(INST_LIB)/DBD",
  "MACROSTART" => "",
  "TEST_F" => "test -f",
  "INST_DYNAMIC" => "\$(INST_ARCHAUTODIR)/\$(DLBASE).\$(DLEXT)",
  "DESTINSTALLVENDORBIN" => "\$(DESTDIR)\$(INSTALLVENDORBIN)",
  "MAN3PODS" => {},
  "FULLPERLRUNINST" => "\$(FULLPERLRUN) \"-I\$(INST_ARCHLIB)\" \"-I\$(INST_LIB)\"",
  "DESTINSTALLVENDORMAN3DIR" => "\$(DESTDIR)\$(INSTALLVENDORMAN3DIR)",
  "INC" => "-I/usr/include/oracle/19.6/client64 -I/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBI",
  "INST_ARCHAUTODIR" => "\$(INST_ARCHLIB)/auto/\$(FULLEXT)",
  "TEST_S" => "test -s",
  "UNINST" => 0,
  "INST_STATIC" => "\$(INST_ARCHAUTODIR)/\$(BASEEXT)\$(LIB_EXT)",
  "EQUALIZE_TIMESTAMP" => "\$(ABSPERLRUN) -MExtUtils::Command -e 'eqtime' --",
  "BUILD_REQUIRES" => {},
  "AR_STATIC_ARGS" => "cr",
  "VENDORPREFIX" => "/usr/local",
  "MAN1PODS" => {},
  "DESTINSTALLSITELIB" => "\$(DESTDIR)\$(INSTALLSITELIB)",
  "USEMAKEFILE" => "-f",
  "DESTINSTALLSITEARCH" => "\$(DESTDIR)\$(INSTALLSITEARCH)",
  "PERLPREFIX" => "/usr/local",
  "VERSION_SYM" => "1_90",
  "TARFLAGS" => "cvf",
  "AUTHOR" => [
    "Tim Bunce (dbi-users\@perl.org)"
  ],
  "FULL_AR" => "/usr/bin/ar",
  "O_FILES" => [
    "Oracle.o",
    "dbdcnx.o",
    "dbdimp.o",
    "oci8.o"
  ],
  "UMASK_NULL" => "umask 0",
  "ABSPERLRUN" => "\$(ABSPERL)",
  "DESTINSTALLBIN" => "\$(DESTDIR)\$(INSTALLBIN)",
  "SITELIBEXP" => "/usr/local/lib/perl5/site_perl/5.40.0",
  "CONFIGURE_REQUIRES" => {},
  "PREFIX" => "\$(SITEPREFIX)",
  "TO_UNIX" => "\$(NOECHO) \$(NOOP)",
  "LIBPERL_A" => "libperl.a",
  "OBJECT" => "\$(O_FILES)",
  "MM_VERSION" => "7.70",
  "PERL_CORE" => 0,
  "INSTALLBIN" => "/usr/local/bin",
  "LD_RUN_PATH" => "/usr/lib/oracle/19.6/client64/lib",
  "OBJ_EXT" => ".o",
  "MAN3SECTION" => 3,
  "DESTINSTALLSITEBIN" => "\$(DESTDIR)\$(INSTALLSITEBIN)",
  "EXE_EXT" => "",
  "LIBS" => [],
  "BOOTDEP" => "",
  "PERL_MALLOC_DEF" => "-DPERL_EXTMALLOC_DEF -Dmalloc=Perl_malloc -Dfree=Perl_mfree -Drealloc=Perl_realloc -Dcalloc=Perl_calloc",
  "CCCDLFLAGS" => "-fPIC",
  "FULLPERL" => "\"/usr/local/bin/perl\"",
  "NAME_SYM" => "DBD_Oracle",
  "INSTALLVENDORMAN3DIR" => "\$(INSTALLMAN3DIR)",
  "DISTVNAME" => "DBD-Oracle-1.90",
  "TRUE" => "true",
  "CP" => "cp",
  "LICENSE" => "perl",
  "PM" => {
    "lib/DBD/Oracle/GetInfo.pm" => "blib/lib/DBD/Oracle/GetInfo.pm",
    "lib/DBD/Oracle/Troubleshooting/Macos.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Macos.pod",
    "lib/DBD/Oracle/Troubleshooting/Linux.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Linux.pod",
    "mk.pm" => "\$(INST_LIB)/DBD/mk.pm",
    "lib/DBD/Oracle/Troubleshooting/Sun.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Sun.pod",
    "lib/DBD/Oracle/Troubleshooting/Aix.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Aix.pod",
    "lib/DBD/Oracle/Troubleshooting/Win64.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Win64.pod",
    "lib/DBD/Oracle/Object.pm" => "blib/lib/DBD/Oracle/Object.pm",
    "lib/DBD/Oracle/Troubleshooting/Hpux.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Hpux.pod",
    "lib/DBD/Oracle/Troubleshooting.pod" => "blib/lib/DBD/Oracle/Troubleshooting.pod",
    "lib/DBD/Oracle/Troubleshooting/Win32.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Win32.pod",
    "lib/DBD/Oracle.pm" => "blib/lib/DBD/Oracle.pm",
    "lib/DBD/Oracle/Troubleshooting/Vms.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Vms.pod",
    "lib/DBD/Oracle/Troubleshooting/Cygwin.pod" => "blib/lib/DBD/Oracle/Troubleshooting/Cygwin.pod"
  },
  "DISTNAME" => "DBD-Oracle",
  "INSTALLSITEMAN3DIR" => "\$(INSTALLMAN3DIR)",
  "PERLRUN" => "\$(PERL)",
  "RM_RF" => "rm -rf",
  "C" => [
    "Oracle.c",
    "dbdcnx.c",
    "dbdimp.c",
    "oci8.c"
  ],
  "LIB_EXT" => ".a",
  "DESTINSTALLSITEMAN1DIR" => "\$(DESTDIR)\$(INSTALLSITEMAN1DIR)",
  "LDLOADLIBS" => "-L/usr/lib/oracle/19.6/client64/lib -lclntsh",
  "MAN3EXT" => 0,
  "PREREQ_PM" => {
    "DBI" => "1.623"
  },
  "MV" => "mv",
  "PERL_ARCHLIB" => "/usr/local/lib/perl5/5.40.0/x86_64-linux-gnu",
  "INSTALLVENDORARCH" => "/usr/local/lib/perl5/vendor_perl/5.40.0/x86_64-linux-gnu",
  "OSNAME" => "linux",
  "SITEARCHEXP" => "/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu",
  "FULLEXT" => "DBD/Oracle",
  "ABSPERL" => "\$(PERL)",
  "ZIPFLAGS" => "-r",
  "MAKE_APERL_FILE" => "Makefile.aperl",
  "NOECHO" => "\@",
  "LIBC" => "/lib/x86_64-linux-gnu/libc.so.6",
  "INST_ARCHLIB" => "blib/arch",
  "PERL_ARCHIVEDEP" => "",
  "INST_MAN3DIR" => "blib/man3",
  "MM_REVISION" => 77000,
  "PERM_DIR" => 755,
  "INSTALLSITEBIN" => "/usr/local/bin",
  "DIRFILESEP" => "/",
  "DESTINSTALLSITESCRIPT" => "\$(DESTDIR)\$(INSTALLSITESCRIPT)",
  "RCS_LABEL" => "rcs -Nv\$(VERSION_SYM): -q",
  "DESTINSTALLPRIVLIB" => "\$(DESTDIR)\$(INSTALLPRIVLIB)",
  "EXPORT_LIST" => "",
  "PERL_INCDEP" => "/usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/CORE",
  "ECHO_N" => "echo -n",
  "COMPRESS" => "gzip --best",
  "PERL" => "\"/usr/local/bin/perl\"",
  "DEFINE" => " -Wall -Wno-comment -DUTF8_SUPPORT -DORA_OCI_VERSION=\\\"19.6.0.0\\\" -DORA_OCI_102 -DORA_OCI_112",
  "OSVERS" => "6.5.0-1025-azure",
  "SUFFIX" => ".gz",
  "VENDORLIBEXP" => "/usr/local/lib/perl5/vendor_perl/5.40.0",
  "PERLMAINCC" => "\$(CC)",
  "POSTOP" => "\$(NOECHO) \$(NOOP)",
  "MAKE" => "make",
  "ECHO" => "echo",
  "PARENT_NAME" => "DBD",
  "INSTALLARCHLIB" => "/usr/local/lib/perl5/5.40.0/x86_64-linux-gnu",
  "PERL_ARCHLIBDEP" => "/usr/local/lib/perl5/5.40.0/x86_64-linux-gnu",
  "DLSRC" => "dl_dlopen.xs",
  "SHELL" => "/bin/sh",
  "DESTINSTALLSITEMAN3DIR" => "\$(DESTDIR)\$(INSTALLSITEMAN3DIR)",
  "TOUCH" => "touch",
  "NAME" => "DBD::Oracle",
  "ARGS" => {
    "dynamic_lib" => {},
    "OBJECT" => "\$(O_FILES)",
    "ABSTRACT_FROM" => "lib/DBD/Oracle.pm",
    "DIR" => [],
    "INC" => "-I/usr/include/oracle/19.6/client64 -I/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBI",
    "AUTHOR" => [],
    "DEFINE" => " -Wall -Wno-comment -DUTF8_SUPPORT -DORA_OCI_VERSION=\\\"19.6.0.0\\\" -DORA_OCI_102 -DORA_OCI_112",
    "LICENSE" => "perl",
    "LIBS" => [],
    "META_MERGE" => {},
    "PREREQ_PM" => {},
    "clean" => {},
    "NAME" => "DBD::Oracle",
    "VERSION_FROM" => "lib/DBD/Oracle.pm",
    "dist" => {}
  },
  "DESTINSTALLMAN3DIR" => "\$(DESTDIR)\$(INSTALLMAN3DIR)",
  "VENDORARCHEXP" => "/usr/local/lib/perl5/vendor_perl/5.40.0/x86_64-linux-gnu",
  "META_MERGE" => {},
  "XS_VERSION" => "1.90",
  "DESTINSTALLARCHLIB" => "\$(DESTDIR)\$(INSTALLARCHLIB)",
  "PL_FILES" => {},
  "BSLOADLIBS" => "",
  "XS_DEFINE_VERSION" => "-D\$(XS_VERSION_MACRO)=\\\"\$(XS_VERSION)\\\"",
  "PERL_ARCHIVE_AFTER" => "",
  "PERL_ARCHIVE" => "",
  "dynamic_lib" => {},
  "DESTINSTALLVENDORMAN1DIR" => "\$(DESTDIR)\$(INSTALLVENDORMAN1DIR)",
  "DIST_CP" => "best",
  "VERSION_MACRO" => "VERSION",
  "ABSTRACT" => "Oracle database driver for the DBI module",
  "LINKTYPE" => "dynamic",
  "RM_F" => "rm -f",
  "INST_BIN" => "blib/bin",
  "INSTALLDIRS" => "site",
  "ABSPERLRUNINST" => "\$(ABSPERLRUN) \"-I\$(INST_ARCHLIB)\" \"-I\$(INST_LIB)\"",
  "RESULT" => [
    "# This Makefile is for the DBD::Oracle extension to perl.\n#\n# It was generated automatically by MakeMaker version\n# 7.70 (Revision: 77000) from the contents of\n# Makefile.PL. Don't edit this file, edit Makefile.PL instead.\n#\n#       ANY CHANGES MADE HERE WILL BE LOST!\n#\n#   MakeMaker ARGV: ()\n#\n",
    "#   MakeMaker Parameters:\n",
    "#     ABSTRACT_FROM => q[lib/DBD/Oracle.pm]",
    "#     AUTHOR => [q[Tim Bunce (dbi-users\@perl.org)]]",
    "#     BUILD_REQUIRES => {  }",
    "#     CONFIGURE_REQUIRES => {  }",
    "#     DEFINE => q[ -Wall -Wno-comment -DUTF8_SUPPORT -DORA_OCI_VERSION=\\\"19.6.0.0\\\" -DORA_OCI_102 -DORA_OCI_112]",
    "#     DIR => []",
    "#     INC => q[-I/usr/include/oracle/19.6/client64 -I/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBI]",
    "#     LIBS => [q[-L/usr/lib/oracle/19.6/client64/lib -lclntsh]]",
    "#     LICENSE => q[perl]",
    "#     META_MERGE => { build_requires=>{ DBI=>q[1.623], ExtUtils::MakeMaker=>q[0], Test::Simple=>q[0.90] }, configure_requires=>{ DBI=>q[1.623] } }",
    "#     NAME => q[DBD::Oracle]",
    "#     OBJECT => q[\$(O_FILES)]",
    "#     PREREQ_PM => { DBI=>q[1.623] }",
    "#     TEST_REQUIRES => {  }",
    "#     VERSION_FROM => q[lib/DBD/Oracle.pm]",
    "#     clean => { FILES=>q[xstmp.c Oracle.xsi dll.base dll.exp sqlnet.log libOracle.def mk.pm DBD_ORA_OBJ.*] }",
    "#     dist => { COMPRESS=>q[gzip -v9], DIST_DEFAULT=>q[clean distcheck disttest tardist], PREOP=>q[\$(MAKE) -f Makefile.old distdir], SUFFIX=>q[gz] }",
    "#     dynamic_lib => { OTHERLDFLAGS=>q[] }",
    "\n# --- MakeMaker post_initialize section:"
  ],
  "RANLIB" => ":",
  "INSTALLVENDORSCRIPT" => "/usr/local/bin",
  "CC" => "cc",
  "MACROEND" => "",
  "DIST_DEFAULT" => "tardist",
  "LDDLFLAGS" => "-shared -O2 -L/usr/local/lib -fstack-protector-strong",
  "INSTALLMAN3DIR" => "none",
  "VERBINST" => 0,
  "DESTINSTALLVENDORSCRIPT" => "\$(DESTDIR)\$(INSTALLVENDORSCRIPT)",
  "DESTINSTALLMAN1DIR" => "\$(DESTDIR)\$(INSTALLMAN1DIR)",
  "FULLPERLRUN" => "\$(FULLPERL)",
  "DLEXT" => "so",
  "DEFINE_VERSION" => "-D\$(VERSION_MACRO)=\\\"\$(VERSION)\\\"",
  "CP_NONEMPTY" => "\$(ABSPERLRUN) -MExtUtils::Command::MM -e 'cp_nonempty' --",
  "CPPRUN" => "cc  -E",
  "PERL_LIB" => "/usr/local/lib/perl5/5.40.0",
  "NOOP" => "\$(TRUE)",
  "AR" => "ar",
  "PERM_RWX" => 755,
  "PMLIBPARENTDIRS" => [
    "lib"
  ],
  "SKIPHASH" => {},
  "MM_Unix_VERSION" => "7.70",
  "INST_AUTODIR" => "\$(INST_LIB)/auto/\$(FULLEXT)",
  "VERSION_FROM" => "lib/DBD/Oracle.pm",
  "TAR" => "tar",
  "CONFIG" => [
    "ar",
    "cc",
    "cccdlflags",
    "ccdlflags",
    "cpprun",
    "dlext",
    "dlsrc",
    "exe_ext",
    "full_ar",
    "ld",
    "lddlflags",
    "ldflags",
    "libc",
    "lib_ext",
    "obj_ext",
    "osname",
    "osvers",
    "ranlib",
    "sitelibexp",
    "sitearchexp",
    "so",
    "vendorarchexp",
    "vendorlibexp"
  ],
  "BASEEXT" => "Oracle",
  "INSTALLSITEARCH" => "/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu",
  "INSTALLVENDORBIN" => "/usr/local/bin",
  "INST_ARCHLIBDIR" => "\$(INST_ARCHLIB)/DBD",
  "MAKEFILE" => "Makefile",
  "PERM_RW" => 644,
  "DOC_INSTALL" => "\$(ABSPERLRUN) -MExtUtils::Command::MM -e 'perllocal_install' --",
  "SHAR" => "shar",
  "INST_SCRIPT" => "blib/script",
  "MKPATH" => "\$(ABSPERLRUN) -MExtUtils::Command -e 'mkpath' --",
  "INST_LIB" => "blib/lib",
  "DEV_NULL" => "> /dev/null 2>&1",
  "DESTINSTALLVENDORARCH" => "\$(DESTDIR)\$(INSTALLVENDORARCH)",
  "MAN1EXT" => 0,
  "DESTDIR" => "",
  "DESTINSTALLSCRIPT" => "\$(DESTDIR)\$(INSTALLSCRIPT)"
}, 'PACK001' );
$dbd_oracle_mm_self->{"DIR"} = $dbd_oracle_mm_opts->{"DIR"};
$dbd_oracle_mm_self->{"clean"} = $dbd_oracle_mm_opts->{"clean"};
$dbd_oracle_mm_self->{"dist"} = $dbd_oracle_mm_opts->{"dist"};
$dbd_oracle_mm_self->{"LIBS"} = $dbd_oracle_mm_opts->{"LIBS"};
$dbd_oracle_mm_self->{"ARGS"}{"dynamic_lib"} = $dbd_oracle_mm_opts->{"dynamic_lib"};
$dbd_oracle_mm_self->{"ARGS"}{"DIR"} = $dbd_oracle_mm_opts->{"DIR"};
$dbd_oracle_mm_self->{"ARGS"}{"AUTHOR"} = $dbd_oracle_mm_self->{"AUTHOR"};
$dbd_oracle_mm_self->{"ARGS"}{"LIBS"} = $dbd_oracle_mm_opts->{"LIBS"};
$dbd_oracle_mm_self->{"ARGS"}{"META_MERGE"} = $dbd_oracle_mm_opts->{"META_MERGE"};
$dbd_oracle_mm_self->{"ARGS"}{"PREREQ_PM"} = $dbd_oracle_mm_opts->{"PREREQ_PM"};
$dbd_oracle_mm_self->{"ARGS"}{"clean"} = $dbd_oracle_mm_opts->{"clean"};
$dbd_oracle_mm_self->{"ARGS"}{"dist"} = $dbd_oracle_mm_opts->{"dist"};
$dbd_oracle_mm_self->{"META_MERGE"} = $dbd_oracle_mm_opts->{"META_MERGE"};
$dbd_oracle_mm_self->{"dynamic_lib"} = $dbd_oracle_mm_opts->{"dynamic_lib"};
                                                                                                                                                                                                                                                                                                                                                                                     usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBD/Oracle/ocitrace.h                    0000444 0000000 0000000 00000070641 14616324562 025067  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #ifndef DBD_OCI_TRACEON

/* OCI functions "wrapped" to produce tracefile dumps (may be handy when giving
	diagnostic info to Oracle Support, or just learning about OCI)
	Macros are named "_log" as a mnemonic that they log to the tracefile if needed
	Macros named "_log_stat" return status in last parameter.
*/

#define DBD_OCI_TRACEON(h) (DBIc_DBISTATE(h)->debug >= 6 || dbd_verbose >= 6)
#define DBD_OCI_TRACEFP(h) (DBIc_LOGPIO(h))
#define OciTp		("\tOCI")		/* OCI Trace Prefix */
#define OciTstr(s)	((s) ? (text*)(s) : (text*)"<NULL>")
#define ul_t(v)		((unsigned long)(v))
#define pul_t(v)	((unsigned long *)(v))
#define sl_t(v)		((signed long)(v))
#define psl_t(v)	((signed long *)(v))

/* XXX TO DO

	1.	Add parenthesis around all macro args. (or do item 4 below case-by-case)
	DMG: Partly done, sort of. At least the types all match the doc'd casts, anyway.

	2.	#define a set of OciTxxx macros for different types of parameters
	that would allow
	a: casting to be hidden
	b: casting easily changed on different platforms (64bit etc)
	c: mapping of some type values to strings,
	d: return pointed-to value instead of pointer where applicable

	How to output arguments that are handles to opaque entities (OCIEnv*, etc)?
	Output of pointer address is a quick n' dirty way of identifying
	any number of handles that may be allocated.... yuck...
	It sure would be nice to give something more mnemonic! (and meaningful!)
	XXX Turn pointers into variable names by adding a prefix letter and, where
	appropriate an &, thus: "...,&p%ld,...",
	If done well the log will read like a compilable program.
*/

#define OCIServerRelease_log_stat(impdbh,sc,errhp,b,bl,ht,ver,stat) \
	stat =OCIServerRelease(sc,errhp,b,bl,ht,ver);\
	(DBD_OCI_TRACEON(impdbh))                   \
    ? PerlIO_printf(DBD_OCI_TRACEFP(impdbh),         \
				 "%sOCIServerRelease(%p)=%s\n",\
				 OciTp, sc,oci_status_name(stat)),stat \
	: stat

#define OCISessionRelease_log_stat(impdbh,svchp,errhp,tag,tagl,mode,stat)	\
	stat =OCISessionRelease(svchp, errhp, tag, tagl, mode);\
	(DBD_OCI_TRACEON(impdbh))                                       \
    ? PerlIO_printf(DBD_OCI_TRACEFP(impdbh),                             \
						 "%sOCISessionRelease(svchp=%p,mode=%u)=%s\n",\
						 OciTp, svchp,mode,oci_status_name(stat)),stat	\
	: stat

#define OCISessionPoolDestroy_log_stat(impdbh, ph, errhp,stat )  \
	stat =OCISessionPoolDestroy(ph, errhp,OCI_DEFAULT);\
	(DBD_OCI_TRACEON(impdbh))                         \
    ? PerlIO_printf(DBD_OCI_TRACEFP(impdbh),               \
					 "%sOCISessionPoolDestroy(ph=%p)=%s\n",\
					 OciTp, ph,oci_status_name(stat)),stat \
	: stat
#define OCISessionGet_log_stat(impdbh,envhp,errhp,sh,ah,pn,pnl,tag,tagl,rettag,rettagl,found,stat) \
	stat =OCISessionGet(envhp, errhp, sh, ah,pn,pnl,tag,tagl,rettag,rettagl,found, OCI_SESSGET_SPOOL);\
	(DBD_OCI_TRACEON(impdbh))                                          \
    ? PerlIO_printf(DBD_OCI_TRACEFP(impdbh),                           \
					 "%sOCISessionGet(envhp=%p,sh=%p,ah=%p,pn=%p,pnl=%d,found=%d)=%s\n",\
					 OciTp, envhp,sh,ah,pn,pnl,*found,oci_status_name(stat)),stat \
	: stat

#define OCISessionPoolCreate_log_stat(impdbh,envhp,errhp,ph,pn,pnl,dbn,dbl,sn,sm,si,un,unl,pw,pwl,mode,stat) \
    stat =OCISessionPoolCreate(envhp,errhp,ph,pn,pnl,dbn,dbl,sn,sm,si,un,unl,pw,pwl,mode);\
    (DBD_OCI_TRACEON(impdbh))                                          \
    ? PerlIO_printf(DBD_OCI_TRACEFP(impdbh),                           \
					 "%sOCISessionPoolCreate(envhp=%p,ph=%p,pn=%p,pnl=%p,min=%d,max=%d,incr=%d, un=%s,unl=%lu,pw=%s,pwl=%lu,mode=%u)=%s\n",\
					 OciTp, envhp,ph,pn,pnl,sn,sm,si,un,(unsigned long)unl,pw,(unsigned long)pwl,mode,oci_status_name(stat)),stat \
	: stat

#if defined(ORA_OCI_102)
#define OCIPing_log_stat(impdbh,sc,errhp,stat)  \
	stat =OCIPing(sc,errhp,OCI_DEFAULT);\
	(DBD_OCI_TRACEON(impdbh))                  \
    ? PerlIO_printf(DBD_OCI_TRACEFP(impdbh),   \
				 "%sOCIPing(%p)=%s\n",\
				 OciTp, sc,oci_status_name(stat)),stat \
	: stat
#endif

#define OCIServerVersion_log_stat(impdbh,sc,errhp,b,bl,ht,stat) \
	stat =OCIServerVersion(sc,errhp,b,bl,ht);\
	(DBD_OCI_TRACEON(impdbh))               \
    ? PerlIO_printf(DBD_OCI_TRACEFP(impdbh),               \
				 "%sOCIServerVersion_log_stat(%p,%s)=%s\n",\
				 OciTp, sc,b,oci_status_name(stat)),stat \
	: stat

#define OCIStmtGetPieceInfo_log_stat(impsth,stmhp,errhp,hdlptr,hdltyp,in_out,iter,idx,piece,stat) \
	stat =OCIStmtGetPieceInfo(stmhp,errhp,hdlptr,hdltyp,in_out,iter,idx,piece);\
	(DBD_OCI_TRACEON(impsth))                                          \
    ? PerlIO_printf(DBD_OCI_TRACEFP(impsth),                           \
				"%sOCIStmtGetPieceInfo_log_stat(%p,%p,%u)=%s\n",\
				OciTp, (void*)errhp,fbh,*piece,oci_status_name(stat)),stat \
	: stat


#define OCIStmtSetPieceInfo_log_stat(impsth,ptr,errhp,buf,blen,p,indp,rc,stat) \
	stat =OCIStmtSetPieceInfo(ptr,OCI_HTYPE_DEFINE,errhp, buf, blen, p,indp,rc);\
	(DBD_OCI_TRACEON(impsth))                                          \
    ? PerlIO_printf(DBD_OCI_TRACEFP(impsth),                           \
				 "%sOCIStmtSetPieceInfo_log_stat(%p,%p,%d,%p)=%s\n",\
				 OciTp, (void*)errhp,fbh,piece,blen,oci_status_name(stat)),stat \
	: stat


#define OCIDefineDynamic_log_stat(impsth,defnp,errhp,fbh,stat)          \
	stat =OCIDefineDynamic(defnp,errhp,fbh,(OCICallbackDefine) presist_lob_fetch_cbk );\
	(DBD_OCI_TRACEON(impsth))                                          \
    ? PerlIO_printf(DBD_OCI_TRACEFP(impsth),                           \
				 "%sOCIDefineDynamic_log_stat(%p,%p,%p)=%s\n",\
				 OciTp, (void*)defnp, (void*)errhp,fbh,oci_status_name(stat)),stat \
	: stat

#define OCIXMLTypeCreateFromSrc_log_stat(impdbh,svchp,errhp,duration,src_type,src_ptr,ind,xml,stat) \
	stat =OCIXMLTypeCreateFromSrc (svchp,errhp,duration,(ub1)src_type,(dvoid *)src_ptr,(sb4)ind, xml);\
	(DBD_OCI_TRACEON(impdbh))                                          \
    ? PerlIO_printf(DBD_OCI_TRACEFP(impdbh),                           \
				 "%sOCIXMLTypeCreateFromSrc_log_stat(%p,%p,%d,%d,%p,%d,%p)=%s\n",\
                    OciTp,	(void*)svchp,(void*)errhp, duration, src_type, src_ptr, ind, xml, oci_status_name(stat)),stat \
	: stat

#define OCILobFileIsOpen_log_stat(impdbh,envhp,errhp,loc,is_open,stat)  \
    stat = OCILobFileIsOpen(envhp,errhp,loc,is_open);\
    (DBD_OCI_TRACEON(impdbh))                       \
    ? PerlIO_printf(DBD_OCI_TRACEFP(impdbh),                           \
                 "%sOCILobFileIsOpen_log_stat(%p,%p,%p,%p,%d)=%s\n",\
                            OciTp, (void*)envhp, (void*)errhp, loc, is_open, *is_open,oci_status_name(stat)),stat : stat

#define OCILobLocatorIsInit_log_stat(impdbh,envhp,errhp,loc,is_initp,stat) \
	stat =OCILobLocatorIsInit (envhp,errhp,loc,is_initp );\
	(DBD_OCI_TRACEON(impdbh))                            \
    ? PerlIO_printf(DBD_OCI_TRACEFP(impdbh),                           \
				 "%sOCILobLocatorIsInit_log_stat(%p,%p,%p,%d)=%s\n",\
				 OciTp, (void*)envhp, (void*)errhp,loc,*is_initp,oci_status_name(stat)),stat \
	: stat

#define OCIObjectPin_log_stat(impsth,envhp,errhp,or,ot,stat)            \
	stat = OCIObjectPin(envhp,errhp,or,(OCIComplexObject *)0,OCI_PIN_LATEST,OCI_DURATION_TRANS,OCI_LOCK_NONE,ot);\
	(DBD_OCI_TRACEON(impsth))                                          \
    ?	PerlIO_printf(DBD_OCI_TRACEFP(impsth),                         \
				 "%sObjectPin_log_stat(%p,%p,%p,%p)=%s\n",\
				 OciTp, (void*)envhp, (void*)errhp,or,ot,oci_status_name(stat)),stat \
	: stat

/*
#define OCICollGetElem_log_stat(envhp,errhp,v,i,ex,e,ne,stat)\
	stat = OCICollGetElem(envhp,errhp, v,i,ex,e,ne);\
	(DBD_OCI_TRACEON) \
			?	PerlIO_printf(DBD_OCI_TRACEFP,\
				 "%sOCICollGetElem_log_stat(%p,%p,%d,%d,%d,%d,%d)=%s\n",\
				 OciTp, (void*)envhp, (void*)errhp,v,i,ex,e,ne,oci_status_name(stat)),stat \
	: stat
*/
/*
#define OCITableFirst_log_stat(envhp,errhp,v,i,stat)\
	stat = OCITableFirst(envhp,errhp,v,i);\
	(DBD_OCI_TRACEON) \
			?	PerlIO_printf(DBD_OCI_TRACEFP,\
				 "%sOCITableFirst_log_stat(%p,%p,%d,%d)=%s\n",\
				 OciTp, (void*)envhp, (void*)errhp,v,i,oci_status_name(stat)),stat \
	: stat
*/
#define OCIObjectGetAttr_log_stat(impsth,envhp,errhp,instance,nullstruct,tdo,names,lengths,namecount,indexes,indexcount,attrnullstatus,attrnullstruct,attrvalue, attrtdo, stat) \
	stat = OCIObjectGetAttr(envhp,errhp,instance,nullstruct,tdo,names,lengths,namecount,indexes,indexcount,attrnullstatus,attrnullstruct,attrvalue,attrtdo); \
	(DBD_OCI_TRACEON(impsth))                                          \
    ?	PerlIO_printf(DBD_OCI_TRACEFP(impsth),                         \
				 "%sOCIObjectGetAttr_log_stat(%p,%p,%p,%p,%p,%p,%p,%d,%p,%d,%p,%p,%p,%p)=%s\n",\
				 OciTp, (void*)envhp,(void*)errhp,instance,nullstruct,tdo,names,lengths,namecount,indexes,indexcount,attrnullstatus,attrnullstruct,attrvalue,attrtdo,oci_status_name(stat)),stat \
	: stat



#define OCIIntervalToText_log_stat(impsth,envhp,errhp,di,sb,ln,sl,stat) \
	stat = OCIIntervalToText(envhp,errhp, *(OCIInterval**)di,3,3,sb,ln,sl);\
	(DBD_OCI_TRACEON(impsth))                                          \
    ?	PerlIO_printf(DBD_OCI_TRACEFP(impsth),                         \
				"%sOCIIntervalToText(%p,%p,%p,%s)=%s\n",\
				OciTp, (void*)errhp, di,sl,sb,oci_status_name(stat)),stat \
	: stat

#define OCIDateTimeToText_log_stat(impsth,envhp,errhp,d,sl,sb,stat)     \
	stat = OCIDateTimeToText(envhp,errhp, *(OCIDateTime**)d,(CONST text*) 0,(ub1) 0,6, (CONST text*) 0, (ub4) 0,(ub4 *)sl,sb );\
	(DBD_OCI_TRACEON(impsth))                                          \
    ?	PerlIO_printf(DBD_OCI_TRACEFP(impsth),                         \
				 "%sOCIDateTimeToText(%p,%p,%p,%s)=%s\n",\
				 OciTp, (void*)errhp, d,sl,sb,oci_status_name(stat)),stat \
	: stat


#define OCIDateToText_log_stat(impsth,errhp,d,sl,sb,stat)               \
	stat = OCIDateToText(errhp, (CONST OCIDate *) d,(CONST text*) 0,(ub1) 0, (CONST text*) 0, (ub4) 0,(ub4 *)sl,sb );\
	(DBD_OCI_TRACEON(impsth))                                          \
    ?	PerlIO_printf(DBD_OCI_TRACEFP(impsth),                         \
				 "%sDateToText_log_stat(%p,%p,%p,%s)=%s\n",\
				 OciTp, (void*)errhp, d,sl,sb,oci_status_name(stat)),stat \
	: stat


#define OCIIterDelete_log_stat(impsth,envhp,errhp,itr,stat) \
	stat = OCIIterDelete(envhp,errhp,itr );\
	(DBD_OCI_TRACEON(impsth))                  \
    ?	PerlIO_printf(DBD_OCI_TRACEFP(impsth),             \
				 "%sOCIIterDelete_log_stat(%p,%p,%p)=%s\n",\
				 OciTp, (void*)envhp, (void*)errhp,itr,oci_status_name(stat)),stat \
	: stat


#define OCIIterCreate_log_stat(impsth,envhp,errhp,coll,itr,stat)    \
	stat = OCIIterCreate(envhp,errhp,coll,itr);\
	(DBD_OCI_TRACEON(impsth))                 \
    ?	PerlIO_printf(DBD_OCI_TRACEFP(impsth),             \
				 "%sIterCreate_log_stat(%p,%p,%p)=%s\n",\
				 OciTp, (void*)envhp, (void*)errhp,(void*)coll,oci_status_name(stat)),stat \
	: stat
/*
#define OCICollSize_log_stat(envhp,errhp,coll,coll_siz,stat)\
	stat = OCICollSize(envhp,errhp,(CONST OCIColl *)coll,coll_siz);\
	(DBD_OCI_TRACEON) \
			?	PerlIO_printf(DBD_OCI_TRACEFP,\
				 "%sOCICollSize_log_stat(%p,%p,%d)=%s\n",\
				 OciTp, (void*)envhp, (void*)errhp,oci_status_name(stat)),stat \
	: stat
*/
#define OCIDefineObject_log_stat(impsth,defnp,errhp,tdo,eo_buff,eo_ind,stat) \
	stat = OCIDefineObject(defnp,errhp,tdo,eo_buff,0,eo_ind, 0);\
	(DBD_OCI_TRACEON(impsth))                                  \
    ?	PerlIO_printf(DBD_OCI_TRACEFP(impsth),                 \
				 "%sOCIDefineObject(%p,%p,%p)=%s\n",\
			 OciTp, (void*)defnp, (void*)errhp, (void*)tdo,oci_status_name(stat)),stat \
	: stat

#define OCITypeByName_log(impsth,envhp,errhp,svchp,sn,snl,tn,tnl,vn,vnl,duration,option,tdo,stat) \
	stat = OCITypeByName(envhp,errhp,svchp,sn,snl,tn,tnl,vn,vnl,duration,option,tdo); \
	(DBD_OCI_TRACEON(impsth)) \
    ? PerlIO_printf(DBD_OCI_TRACEFP(impsth),                      \
                    "%sTypeByName(%p,%p,%p,%s,%d,%s,%d,\"\",0,%d,%d,%p)=%s\n", \
                    OciTp, (void*)envhp, (void*)errhp, (void*)svchp, sn,snl,tn,tnl,duration,option,tdo,oci_status_name(stat)), stat \
        :stat

#define OCITypeByRef_log_stat(impsth,envhp,errhp,ref,tdo,stat)          \
	stat = OCITypeByRef(envhp,errhp,ref,OCI_DURATION_TRANS,OCI_TYPEGET_ALL,tdo);\
	(DBD_OCI_TRACEON(impsth))                                          \
    ?	PerlIO_printf(DBD_OCI_TRACEFP(impsth),                         \
			 "%sTypeByRef(%p,%p,%p)=%s\n",\
			 OciTp, (void*)envhp, (void*)errhp, (void*)ref,oci_status_name(stat)),stat \
	: stat

/* added by lab */
#define OCILobCharSetId_log_stat(impxxh, envhp, errhp, locp, csidp, stat ) \
	stat = OCILobCharSetId( envhp, errhp, locp, csidp ); \
	(DBD_OCI_TRACEON(impxxh))                           \
	?	PerlIO_printf(DBD_OCI_TRACEFP(impxxh),          \
		 "%sLobCharSetId(%p,%p,%p,%d)=%s\n",\
		 OciTp, (void*)envhp, (void*)errhp, (void*)locp, *csidp, oci_status_name(stat)),stat \
	: stat

/* added by lab */
#define OCILobCharSetForm_log_stat(impxxh, envhp, errhp, locp, formp, stat ) \
	stat = OCILobCharSetForm( envhp, errhp, locp, formp ); \
	(DBD_OCI_TRACEON(impxxh))                             \
	?	PerlIO_printf(DBD_OCI_TRACEFP(impxxh),            \
		 "%sLobCharSetForm(%p,%p,%p,%d)=%s\n",\
		 OciTp, (void*)envhp, (void*)errhp, (void*)locp, *formp, oci_status_name(stat)),stat \
	: stat

/* added by lab */
#define OCINlsEnvironmentVariableGet_log_stat(impdbh, valp, size, item, charset, rsizep ,stat ) \
	stat = OCINlsEnvironmentVariableGet(	valp, size, item, charset, rsizep ); \
	(DBD_OCI_TRACEON(impdbh))                                          \
	?	PerlIO_printf(DBD_OCI_TRACEFP(impdbh),                         \
		 "%sNlsEnvironmentVariableGet(%d,%lu,%d,%d,%lu)=%s\n",\
		 OciTp, *valp, (unsigned long)size, item, charset, (unsigned long)*rsizep, oci_status_name(stat)),stat \
	: stat

/* added by lab */
#define OCIEnvNlsCreate_log_stat(impdbh, envp, mode, ctxp, f1, f2, f3, sz, usremepp ,chset, nchset ,stat ) \
	stat = OCIEnvNlsCreate(envp, mode, ctxp, f1, f2, f3, sz, usremepp ,chset, nchset ); \
	(DBD_OCI_TRACEON(impdbh))                                          \
	?	PerlIO_printf(DBD_OCI_TRACEFP(impdbh),                         \
		 "%sEnvNlsEnvCreate(%p,%s,%d,%d,%p,%p,%p,%d,%p,%d,%d)=%s\n", \
		 OciTp, (void*)envp, oci_mode(mode),mode, ctxp, (void*)f1, (void*)f2, (void*)f3, sz, (void*)usremepp ,chset, nchset, oci_status_name(stat)),stat \
	: stat


#define OCIAttrGet_log_stat(impxxh, th,ht,ah,sp,at,eh,stat)  \
	stat = OCIAttrGet(th,ht,ah,sp,at,eh);				\
	(DBD_OCI_TRACEON(impxxh)) ? PerlIO_printf(DBD_OCI_TRACEFP(impxxh), \
		"%sAttrGet(%p,%s,%p,%p,%s,%p)=%s\n",			\
		OciTp, (void*)th,oci_hdtype_name(ht),(void*)ah,pul_t(sp),oci_attr_name(at),(void*)eh,\
		oci_status_name(stat)),stat : stat

#define OCIAttrGet_d_log_stat(impsth, th,ht,ah,sp,at,eh,stat)    \
	stat = OCIAttrGet(th,ht,ah,sp,at,eh);				\
	(DBD_OCI_TRACEON(impsth)) ? PerlIO_printf(DBD_OCI_TRACEFP(impsth), \
		"%sAttrGet(%p,%s,%p,%p,%s,%p)=%s\n",			\
		OciTp, (void*)th,oci_hdtype_name(ht),(void*)ah,pul_t(sp),oci_dtype_attr_name(at),(void*)eh,\
		oci_status_name(stat)),stat : stat

 #define OCIAttrGet_parmap(imp_sth,dh, ht, p1, l, stat)				\
        OCIAttrGet_log_stat(imp_sth, dh, ht,                                \
		(void*)(p1), (l), OCI_ATTR_PARAM, imp_sth->errhp, stat)


#define OCIAttrGet_parmdp(imp_sth, parmdp, p1, l, a, stat)				\
	OCIAttrGet_d_log_stat(imp_sth, parmdp, OCI_DTYPE_PARAM,              \
		(void*)(p1), (l), (a), imp_sth->errhp, stat)

#define OCIAttrGet_stmhp_stat(imp_sth, p1, l, a, stat)					\
	OCIAttrGet_log_stat(imp_sth, imp_sth->stmhp, OCI_HTYPE_STMT,         \
		(void*)(p1), (l), (a), imp_sth->errhp, stat)

#define OCIAttrGet_stmhp_stat2(imp_sth, stmhp, p1, l, a, stat)              \
	OCIAttrGet_log_stat(imp_sth, stmhp, OCI_HTYPE_STMT,         \
		(void*)(p1), (l), (a), imp_sth->errhp, stat)

#define OCIAttrSet_log_stat(impxxh,th,ht,ah,s1,a,eh,stat)   do{\
	stat=OCIAttrSet(th,ht,ah,s1,a,eh);				\
	(DBD_OCI_TRACEON(impxxh)) ? PerlIO_printf(DBD_OCI_TRACEFP(impxxh), \
		"%sAttrSet(%p,%s, %p,%lu,Attr=%s,%p)=%s\n",			\
		OciTp, (void*)th,oci_hdtype_name(ht),(void *)ah,ul_t(s1),oci_attr_name(a),(void*)eh,	\
