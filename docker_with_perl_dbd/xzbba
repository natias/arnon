	0x109CC,
	0x10E6B,
	0x10E6C,
	0x10F24,
	0x10F25,
	0x1105D,
	0x1105E,
	0x111EC,
	0x111ED,
	0x118EC,
	0x118ED,
	0x11C65,
	0x11C66,
	0x1D36B,
	0x1D36C,
	0x1EC7C,
	0x1EC7D,
	0x1ED0C,
	0x1ED0D,
	0x20983,
	0x20984
};

static const UV UNI_NV__300_invlist[] = {  /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1011B,
	0x1011C,
	0x1016B,
	0x1016C,
	0x102F5,
	0x102F6,
	0x109D4,
	0x109D5,
	0x10E74,
	0x10E75,
	0x1EC85,
	0x1EC86,
	0x1ED15,
	0x1ED16
};

static const UV UNI_NV__3000_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10124,
	0x10125,
	0x109DD,
	0x109DE,
	0x1EC8E,
	0x1EC8F,
	0x1ED1E,
	0x1ED1F
};

static const UV UNI_NV__30000_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1012D,
	0x1012E,
	0x109E6,
	0x109E7,
	0x1EC97,
	0x1EC98,
	0x1ED27,
	0x1ED28
};

static const UV UNI_NV__300000_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x109EF,
	0x109F0
};

static const UV UNI_NV__31_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x325B,
	0x325C
};

static const UV UNI_NV__32_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x325C,
	0x325D
};

static const UV UNI_NV__33_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x325D,
	0x325E
};

static const UV UNI_NV__34_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x325E,
	0x325F
};

static const UV UNI_NV__35_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x325F,
	0x3260
};

static const UV UNI_NV__36_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32B1,
	0x32B2
};

static const UV UNI_NV__37_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32B2,
	0x32B3
};

static const UV UNI_NV__38_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32B3,
	0x32B4
};

static const UV UNI_NV__39_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x32B4,
	0x32B5
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_NV__4_invlist[] = {  /* for ASCII/Latin1 */
	255,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x34,
	0x35,
	0x664,
	0x665,
	0x6F4,
	0x6F5,
	0x7C4,
	0x7C5,
	0x96A,
	0x96B,
	0x9EA,
	0x9EB,
	0xA6A,
	0xA6B,
	0xAEA,
	0xAEB,
	0xB6A,
	0xB6B,
	0xBEA,
	0xBEB,
	0xC6A,
	0xC6B,
	0xCEA,
	0xCEB,
	0xD6A,
	0xD6B,
	0xDEA,
	0xDEB,
	0xE54,
	0xE55,
	0xED4,
	0xED5,
	0xF24,
	0xF25,
	0x1044,
	0x1045,
	0x1094,
	0x1095,
	0x136C,
	0x136D,
	0x17E4,
	0x17E5,
	0x17F4,
	0x17F5,
	0x1814,
	0x1815,
	0x194A,
	0x194B,
	0x19D4,
	0x19D5,
	0x1A84,
	0x1A85,
	0x1A94,
	0x1A95,
	0x1B54,
	0x1B55,
	0x1BB4,
	0x1BB5,
	0x1C44,
	0x1C45,
	0x1C54,
	0x1C55,
	0x2074,
	0x2075,
	0x2084,
	0x2085,
	0x2163,
	0x2164,
	0x2173,
	0x2174,
	0x2463,
	0x2464,
	0x2477,
	0x2478,
	0x248B,
	0x248C,
	0x24F8,
	0x24F9,
	0x2779,
	0x277A,
	0x2783,
	0x2784,
	0x278D,
	0x278E,
	0x3024,
	0x3025,
	0x3195,
	0x3196,
	0x3223,
	0x3224,
	0x3283,
	0x3284,
	0x4E96,
	0x4E97,
	0x56DB,
	0x56DC,
	0x8086,
	0x8087,
	0xA624,
	0xA625,
	0xA6E9,
	0xA6EA,
	0xA8D4,
	0xA8D5,
	0xA904,
	0xA905,
	0xA9D4,
	0xA9D5,
	0xA9F4,
	0xA9F5,
	0xAA54,
	0xAA55,
	0xABF4,
	0xABF5,
	0xFF14,
	0xFF15,
	0x1010A,
	0x1010B,
	0x102E4,
	0x102E5,
	0x104A4,
	0x104A5,
	0x1087C,
	0x1087D,
	0x108AA,
	0x108AC,
	0x109C3,
	0x109C4,
	0x10A43,
	0x10A44,
	0x10B5B,
	0x10B5C,
	0x10B7B,
	0x10B7C,
	0x10BAC,
	0x10BAD,
	0x10D34,
	0x10D35,
	0x10E63,
	0x10E64,
	0x10F20,
	0x10F21,
	0x10FC8,
	0x10FC9,
	0x11055,
	0x11056,
	0x1106A,
	0x1106B,
	0x110F4,
	0x110F5,
	0x1113A,
	0x1113B,
	0x111D4,
	0x111D5,
	0x111E4,
	0x111E5,
	0x112F4,
	0x112F5,
	0x11454,
	0x11455,
	0x114D4,
	0x114D5,
	0x11654,
	0x11655,
	0x116C4,
	0x116C5,
	0x11734,
	0x11735,
	0x118E4,
	0x118E5,
	0x11954,
	0x11955,
	0x11C54,
	0x11C55,
	0x11C5D,
	0x11C5E,
	0x11D54,
	0x11D55,
	0x11DA4,
	0x11DA5,
	0x12402,
	0x12403,
	0x12409,
	0x1240A,
	0x1240F,
	0x12410,
	0x12418,
	0x12419,
	0x12421,
	0x12422,
	0x12426,
	0x12427,
	0x12430,
	0x12431,
	0x12438,
	0x12439,
	0x1243C,
	0x12440,
	0x1244C,
	0x1244D,
	0x12452,
	0x12454,
	0x12469,
	0x1246A,
	0x16A64,
	0x16A65,
	0x16AC4,
	0x16AC5,
	0x16B54,
	0x16B55,
	0x16E84,
	0x16E85,
	0x1D2E4,
	0x1D2E5,
	0x1D363,
	0x1D364,
	0x1D375,
	0x1D376,
	0x1D7D2,
	0x1D7D3,
	0x1D7DC,
	0x1D7DD,
	0x1D7E6,
	0x1D7E7,
	0x1D7F0,
	0x1D7F1,
	0x1D7FA,
	0x1D7FB,
	0x1E144,
	0x1E145,
	0x1E2F4,
	0x1E2F5,
	0x1E8CA,
	0x1E8CB,
	0x1E954,
	0x1E955,
	0x1EC74,
	0x1EC75,
	0x1ECA6,
	0x1ECA7,
	0x1ED04,
	0x1ED05,
	0x1ED31,
	0x1ED32,
	0x1F105,
	0x1F106,
	0x1FBF4,
	0x1FBF5,
	0x20064,
	0x20065,
	0x200E2,
	0x200E3,
	0x2626D,
	0x2626E
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_NV__4_invlist[] = {  /* for EBCDIC 1047 */
	255,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF4,
	0xF5,
	0x664,
	0x665,
	0x6F4,
	0x6F5,
	0x7C4,
	0x7C5,
	0x96A,
	0x96B,
	0x9EA,
	0x9EB,
	0xA6A,
	0xA6B,
	0xAEA,
	0xAEB,
	0xB6A,
	0xB6B,
	0xBEA,
	0xBEB,
	0xC6A,
	0xC6B,
	0xCEA,
	0xCEB,
	0xD6A,
	0xD6B,
	0xDEA,
	0xDEB,
	0xE54,
	0xE55,
	0xED4,
	0xED5,
	0xF24,
	0xF25,
	0x1044,
	0x1045,
	0x1094,
	0x1095,
	0x136C,
	0x136D,
	0x17E4,
	0x17E5,
	0x17F4,
	0x17F5,
	0x1814,
	0x1815,
	0x194A,
	0x194B,
	0x19D4,
	0x19D5,
	0x1A84,
	0x1A85,
	0x1A94,
	0x1A95,
	0x1B54,
	0x1B55,
	0x1BB4,
	0x1BB5,
	0x1C44,
	0x1C45,
	0x1C54,
	0x1C55,
	0x2074,
	0x2075,
	0x2084,
	0x2085,
	0x2163,
	0x2164,
	0x2173,
	0x2174,
	0x2463,
	0x2464,
	0x2477,
	0x2478,
	0x248B,
	0x248C,
	0x24F8,
	0x24F9,
	0x2779,
	0x277A,
	0x2783,
	0x2784,
	0x278D,
	0x278E,
	0x3024,
	0x3025,
	0x3195,
	0x3196,
	0x3223,
	0x3224,
	0x3283,
	0x3284,
	0x4E96,
	0x4E97,
	0x56DB,
	0x56DC,
	0x8086,
	0x8087,
	0xA624,
	0xA625,
	0xA6E9,
	0xA6EA,
	0xA8D4,
	0xA8D5,
	0xA904,
	0xA905,
	0xA9D4,
	0xA9D5,
	0xA9F4,
	0xA9F5,
	0xAA54,
	0xAA55,
	0xABF4,
	0xABF5,
	0xFF14,
	0xFF15,
	0x1010A,
	0x1010B,
	0x102E4,
	0x102E5,
	0x104A4,
	0x104A5,
	0x1087C,
	0x1087D,
	0x108AA,
	0x108AC,
	0x109C3,
	0x109C4,
	0x10A43,
	0x10A44,
	0x10B5B,
	0x10B5C,
	0x10B7B,
	0x10B7C,
	0x10BAC,
	0x10BAD,
	0x10D34,
	0x10D35,
	0x10E63,
	0x10E64,
	0x10F20,
	0x10F21,
	0x10FC8,
	0x10FC9,
	0x11055,
	0x11056,
	0x1106A,
	0x1106B,
	0x110F4,
	0x110F5,
	0x1113A,
	0x1113B,
	0x111D4,
	0x111D5,
	0x111E4,
	0x111E5,
	0x112F4,
	0x112F5,
	0x11454,
	0x11455,
	0x114D4,
	0x114D5,
	0x11654,
	0x11655,
	0x116C4,
	0x116C5,
	0x11734,
	0x11735,
	0x118E4,
	0x118E5,
	0x11954,
	0x11955,
	0x11C54,
	0x11C55,
	0x11C5D,
	0x11C5E,
	0x11D54,
	0x11D55,
	0x11DA4,
	0x11DA5,
	0x12402,
	0x12403,
	0x12409,
	0x1240A,
	0x1240F,
	0x12410,
	0x12418,
	0x12419,
	0x12421,
	0x12422,
	0x12426,
	0x12427,
	0x12430,
	0x12431,
	0x12438,
	0x12439,
	0x1243C,
	0x12440,
	0x1244C,
	0x1244D,
	0x12452,
	0x12454,
	0x12469,
	0x1246A,
	0x16A64,
	0x16A65,
	0x16AC4,
	0x16AC5,
	0x16B54,
	0x16B55,
	0x16E84,
	0x16E85,
	0x1D2E4,
	0x1D2E5,
	0x1D363,
	0x1D364,
	0x1D375,
	0x1D376,
	0x1D7D2,
	0x1D7D3,
	0x1D7DC,
	0x1D7DD,
	0x1D7E6,
	0x1D7E7,
	0x1D7F0,
	0x1D7F1,
	0x1D7FA,
	0x1D7FB,
	0x1E144,
	0x1E145,
	0x1E2F4,
	0x1E2F5,
	0x1E8CA,
	0x1E8CB,
	0x1E954,
	0x1E955,
	0x1EC74,
	0x1EC75,
	0x1ECA6,
	0x1ECA7,
	0x1ED04,
	0x1ED05,
	0x1ED31,
	0x1ED32,
	0x1F105,
	0x1F106,
	0x1FBF4,
	0x1FBF5,
	0x20064,
	0x20065,
	0x200E2,
	0x200E3,
	0x2626D,
	0x2626E
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_NV__4_invlist[] = {  /* for EBCDIC 037 */
	255,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF4,
	0xF5,
	0x664,
	0x665,
	0x6F4,
	0x6F5,
	0x7C4,
	0x7C5,
	0x96A,
	0x96B,
	0x9EA,
	0x9EB,
	0xA6A,
	0xA6B,
	0xAEA,
	0xAEB,
	0xB6A,
	0xB6B,
	0xBEA,
	0xBEB,
	0xC6A,
	0xC6B,
	0xCEA,
	0xCEB,
	0xD6A,
	0xD6B,
	0xDEA,
	0xDEB,
	0xE54,
	0xE55,
	0xED4,
	0xED5,
	0xF24,
	0xF25,
	0x1044,
	0x1045,
	0x1094,
	0x1095,
	0x136C,
	0x136D,
	0x17E4,
	0x17E5,
	0x17F4,
	0x17F5,
	0x1814,
	0x1815,
	0x194A,
	0x194B,
	0x19D4,
	0x19D5,
	0x1A84,
	0x1A85,
	0x1A94,
	0x1A95,
	0x1B54,
	0x1B55,
	0x1BB4,
	0x1BB5,
	0x1C44,
	0x1C45,
	0x1C54,
	0x1C55,
	0x2074,
	0x2075,
	0x2084,
	0x2085,
	0x2163,
	0x2164,
	0x2173,
	0x2174,
	0x2463,
	0x2464,
	0x2477,
	0x2478,
	0x248B,
	0x248C,
	0x24F8,
	0x24F9,
	0x2779,
	0x277A,
	0x2783,
	0x2784,
	0x278D,
	0x278E,
	0x3024,
	0x3025,
	0x3195,
	0x3196,
	0x3223,
	0x3224,
	0x3283,
	0x3284,
	0x4E96,
	0x4E97,
	0x56DB,
	0x56DC,
	0x8086,
	0x8087,
	0xA624,
	0xA625,
	0xA6E9,
	0xA6EA,
	0xA8D4,
	0xA8D5,
	0xA904,
	0xA905,
	0xA9D4,
	0xA9D5,
	0xA9F4,
	0xA9F5,
	0xAA54,
	0xAA55,
	0xABF4,
	0xABF5,
	0xFF14,
	0xFF15,
	0x1010A,
	0x1010B,
	0x102E4,
	0x102E5,
	0x104A4,
	0x104A5,
	0x1087C,
	0x1087D,
	0x108AA,
	0x108AC,
	0x109C3,
	0x109C4,
	0x10A43,
	0x10A44,
	0x10B5B,
	0x10B5C,
	0x10B7B,
	0x10B7C,
	0x10BAC,
	0x10BAD,
	0x10D34,
	0x10D35,
	0x10E63,
	0x10E64,
	0x10F20,
	0x10F21,
	0x10FC8,
	0x10FC9,
	0x11055,
	0x11056,
	0x1106A,
	0x1106B,
	0x110F4,
	0x110F5,
	0x1113A,
	0x1113B,
	0x111D4,
	0x111D5,
	0x111E4,
	0x111E5,
	0x112F4,
	0x112F5,
	0x11454,
	0x11455,
	0x114D4,
	0x114D5,
	0x11654,
	0x11655,
	0x116C4,
	0x116C5,
	0x11734,
	0x11735,
	0x118E4,
	0x118E5,
	0x11954,
	0x11955,
	0x11C54,
	0x11C55,
	0x11C5D,
	0x11C5E,
	0x11D54,
	0x11D55,
	0x11DA4,
	0x11DA5,
	0x12402,
	0x12403,
	0x12409,
	0x1240A,
	0x1240F,
	0x12410,
	0x12418,
	0x12419,
	0x12421,
	0x12422,
	0x12426,
	0x12427,
	0x12430,
	0x12431,
	0x12438,
	0x12439,
	0x1243C,
	0x12440,
	0x1244C,
	0x1244D,
	0x12452,
	0x12454,
	0x12469,
	0x1246A,
	0x16A64,
	0x16A65,
	0x16AC4,
	0x16AC5,
	0x16B54,
	0x16B55,
	0x16E84,
	0x16E85,
	0x1D2E4,
	0x1D2E5,
	0x1D363,
	0x1D364,
	0x1D375,
	0x1D376,
	0x1D7D2,
	0x1D7D3,
	0x1D7DC,
	0x1D7DD,
	0x1D7E6,
	0x1D7E7,
	0x1D7F0,
	0x1D7F1,
	0x1D7FA,
	0x1D7FB,
	0x1E144,
	0x1E145,
	0x1E2F4,
	0x1E2F5,
	0x1E8CA,
	0x1E8CB,
	0x1E954,
	0x1E955,
	0x1EC74,
	0x1EC75,
	0x1ECA6,
	0x1ECA7,
	0x1ED04,
	0x1ED05,
	0x1ED31,
	0x1ED32,
	0x1F105,
	0x1F106,
	0x1FBF4,
	0x1FBF5,
	0x20064,
	0x20065,
	0x200E2,
	0x200E3,
	0x2626D,
	0x2626E
};

#  endif	/* EBCDIC 037 */

static const UV UNI_NV__4_SLASH_5_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2158,
	0x2159
};

static const UV UNI_NV__40_invlist[] = {  /* for all charsets */
	37,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1375,
	0x1376,
	0x324B,
