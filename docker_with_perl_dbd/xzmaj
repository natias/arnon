    'lowercaseletter' => 749,
    'lowsurrogates' => 750,
    'lt' => 1154,
    'lu' => 1163,
    'lyci' => 751,
    'lydi' => 752,
    'm' => 753,
    'mahj' => 754,
    'mahjong' => 755,
    'maka' => 756,
    'mand' => 757,
    'mani' => 758,
    'marc' => 759,
    'math' => 760,
    'mathalphanum' => 761,
    'mathoperators' => 762,
    'mayannumerals' => 763,
    'mc' => 764,
    'me' => 765,
    'medf' => 766,
    'meeteimayekext' => 767,
    'mend' => 768,
    'merc' => 769,
    'mero' => 770,
    'miao' => 771,
    'miscarrows' => 772,
    'miscmathsymbolsa' => 773,
    'miscmathsymbolsb' => 774,
    'miscpictographs' => 775,
    'miscsymbols' => 776,
    'misctechnical' => 777,
    'mlym' => 778,
    'mn' => 779,
    'modi' => 780,
    'modifierletters' => 781,
    'modifiertoneletters' => 782,
    'mong' => 783,
    'mongoliansup' => 784,
    'mro' => 785,
    'mtei' => 786,
    'mult' => 787,
    'music' => 788,
    'myanmarexta' => 789,
    'myanmarextb' => 790,
    'mymr' => 791,
    'n' => 792,
    'nagm' => 793,
    'nand' => 794,
    'narb' => 795,
    'nb' => 796,
    'nbat' => 797,
    'nd' => 1199,
    'newa' => 798,
    'nfcqc=m' => 799,
    'nfcqc=y' => 800,
    'nfdqc=y' => 801,
    'nfkcqc=n' => 802,
    'nfkcqc=y' => 803,
    'nfkdqc=n' => 804,
    'nko' => 805,
    'nl' => 806,
    'no' => 807,
    'nshu' => 808,
    'nt=di' => 809,
    'nt=nu' => 810,
    'numberforms' => 811,
    'nv=0' => 812,
    'nv=1' => 813,
    'nv=1/10' => 838,
    'nv=1/12' => 839,
    'nv=1/16' => 840,
    'nv=1/160' => 841,
    'nv=1/2' => 842,
    'nv=1/20' => 843,
    'nv=1/3' => 844,
    'nv=1/32' => 845,
    'nv=1/320' => 846,
    'nv=1/4' => 847,
    'nv=1/40' => 848,
    'nv=1/5' => 849,
    'nv=1/6' => 850,
    'nv=1/64' => 851,
    'nv=1/7' => 852,
    'nv=1/8' => 853,
    'nv=1/80' => 854,
    'nv=1/9' => 855,
    'nv=10' => 814,
    'nv=100' => 815,
    'nv=1000' => 816,
    'nv=10000' => 817,
    'nv=100000' => 818,
    'nv=1000000' => 819,
    'nv=10000000' => 820,
    'nv=100000000' => 821,
    'nv=10000000000' => 822,
    'nv=1000000000000' => 823,
    'nv=11' => 824,
    'nv=11/12' => 825,
    'nv=11/2' => 826,
    'nv=12' => 827,
    'nv=13' => 828,
    'nv=13/2' => 829,
    'nv=14' => 830,
    'nv=15' => 831,
    'nv=15/2' => 832,
    'nv=16' => 833,
    'nv=17' => 834,
    'nv=17/2' => 835,
    'nv=18' => 836,
    'nv=19' => 837,
    'nv=2' => 856,
    'nv=2/3' => 873,
    'nv=2/5' => 874,
    'nv=20' => 857,
    'nv=200' => 858,
    'nv=2000' => 859,
    'nv=20000' => 860,
    'nv=200000' => 861,
    'nv=20000000' => 862,
    'nv=21' => 863,
    'nv=216000' => 864,
    'nv=22' => 865,
    'nv=23' => 866,
    'nv=24' => 867,
    'nv=25' => 868,
    'nv=26' => 869,
    'nv=27' => 870,
    'nv=28' => 871,
    'nv=29' => 872,
    'nv=3' => 875,
    'nv=3/16' => 890,
    'nv=3/2' => 891,
    'nv=3/20' => 892,
    'nv=3/4' => 893,
    'nv=3/5' => 894,
    'nv=3/64' => 895,
    'nv=3/8' => 896,
    'nv=3/80' => 897,
    'nv=30' => 876,
    'nv=300' => 877,
    'nv=3000' => 878,
    'nv=30000' => 879,
    'nv=300000' => 880,
    'nv=31' => 881,
    'nv=32' => 882,
    'nv=33' => 883,
    'nv=34' => 884,
    'nv=35' => 885,
    'nv=36' => 886,
    'nv=37' => 887,
    'nv=38' => 888,
    'nv=39' => 889,
    'nv=4' => 898,
    'nv=4/5' => 914,
    'nv=40' => 899,
    'nv=400' => 900,
    'nv=4000' => 901,
    'nv=40000' => 902,
    'nv=400000' => 903,
    'nv=41' => 904,
    'nv=42' => 905,
    'nv=43' => 906,
    'nv=432000' => 907,
    'nv=44' => 908,
    'nv=45' => 909,
    'nv=46' => 910,
    'nv=47' => 911,
    'nv=48' => 912,
    'nv=49' => 913,
    'nv=5' => 915,
    'nv=5/12' => 921,
    'nv=5/2' => 922,
    'nv=5/6' => 923,
    'nv=5/8' => 924,
    'nv=50' => 916,
    'nv=500' => 917,
    'nv=5000' => 918,
    'nv=50000' => 919,
    'nv=500000' => 920,
    'nv=6' => 925,
    'nv=60' => 926,
    'nv=600' => 927,
    'nv=6000' => 928,
    'nv=60000' => 929,
    'nv=600000' => 930,
    'nv=7' => 931,
    'nv=7/12' => 937,
    'nv=7/2' => 938,
    'nv=7/8' => 939,
    'nv=70' => 932,
    'nv=700' => 933,
    'nv=7000' => 934,
    'nv=70000' => 935,
    'nv=700000' => 936,
    'nv=8' => 940,
    'nv=80' => 941,
    'nv=800' => 942,
    'nv=8000' => 943,
    'nv=80000' => 944,
    'nv=800000' => 945,
    'nv=9' => 946,
    'nv=9/2' => 952,
    'nv=90' => 947,
    'nv=900' => 948,
    'nv=9000' => 949,
    'nv=90000' => 950,
    'nv=900000' => 951,
    'nv=_minus_1/2' => 954,
    'nv=nan' => 953,
    'ocr' => 955,
    'ogam' => 956,
    'olck' => 957,
    'orkh' => 958,
    'ornamentaldingbats' => 959,
    'orya' => 960,
    'osge' => 961,
    'osma' => 962,
    'ottomansiyaqnumbers' => 963,
    'ougr' => 964,
    'p' => 965,
    'palm' => 966,
    'patsyn' => 967,
    'pauc' => 968,
    'pc' => 969,
    'pcm' => 970,
    'pd' => 971,
    'pe' => 972,
    'perlspace' => 994,
    'perlword' => 996,
    'perm' => 973,
    'pf' => 974,
    'phag' => 975,
    'phaistos' => 976,
    'phli' => 977,
    'phlp' => 978,
    'phnx' => 979,
    'phoneticext' => 980,
    'phoneticextsup' => 981,
    'pi' => 982,
    'playingcards' => 983,
    'po' => 984,
    'posixalnum' => 985,
    'posixalpha' => 986,
    'posixblank' => 987,
    'posixcntrl' => 988,
    'posixdigit' => 989,
    'posixgraph' => 990,
    'posixlower' => 991,
    'posixprint' => 992,
    'posixpunct' => 993,
    'posixspace' => 994,
    'posixupper' => 995,
    'posixword' => 996,
    'posixxdigit' => 997,
    'print' => 1202,
    'prti' => 998,
    'ps' => 999,
    'pua' => 1000,
    'qaai' => 1001,
    'qmark' => 1002,
    'radical' => 1003,
    'ri' => 1004,
    'rjng' => 1005,
    'rohg' => 1006,
    'rumi' => 1007,
    'runr' => 1008,
    's' => 1009,
    'samr' => 1010,
    'sarb' => 1011,
    'saur' => 1012,
    'sb=at' => 1013,
    'sb=cl' => 1014,
    'sb=ex' => 1015,
    'sb=fo' => 1016,
    'sb=le' => 1017,
    'sb=lo' => 1018,
    'sb=nu' => 1019,
    'sb=sc' => 1020,
    'sb=se' => 1021,
    'sb=sp' => 1022,
    'sb=st' => 1023,
    'sb=up' => 1024,
    'sb=xx' => 1025,
    'sc' => 1026,
    'sc=adlm' => 1027,
    'sc=arab' => 1028,
    'sc=beng' => 1029,
    'sc=bopo' => 1030,
    'sc=bugi' => 1031,
    'sc=buhd' => 1032,
    'sc=cakm' => 1033,
    'sc=copt' => 1034,
    'sc=cpmn' => 1035,
    'sc=cprt' => 1036,
    'sc=cyrl' => 1037,
    'sc=deva' => 1038,
    'sc=dogr' => 1039,
    'sc=dupl' => 1040,
    'sc=geor' => 1041,
    'sc=glag' => 1042,
    'sc=gong' => 1043,
    'sc=gonm' => 1044,
    'sc=gran' => 1045,
    'sc=grek' => 1046,
    'sc=gujr' => 1047,
    'sc=guru' => 1048,
    'sc=han' => 1049,
    'sc=hang' => 1050,
    'sc=hano' => 1051,
    'sc=hira' => 1052,
    'sc=java' => 1053,
    'sc=kali' => 1054,
    'sc=kana' => 1055,
    'sc=khoj' => 1056,
    'sc=knda' => 1057,
    'sc=kthi' => 1058,
    'sc=latn' => 1059,
    'sc=limb' => 1060,
    'sc=lina' => 1061,
    'sc=linb' => 1062,
    'sc=mahj' => 1063,
    'sc=mand' => 1064,
    'sc=mani' => 1065,
    'sc=mlym' => 1066,
    'sc=modi' => 1067,
    'sc=mong' => 1068,
    'sc=mult' => 1069,
    'sc=mymr' => 1070,
    'sc=nand' => 1071,
    'sc=nko' => 1072,
    'sc=orya' => 1073,
    'sc=ougr' => 1074,
    'sc=perm' => 1075,
    'sc=phag' => 1076,
    'sc=phlp' => 1077,
    'sc=qaai' => 1078,
    'sc=rohg' => 1079,
    'sc=shrd' => 1080,
    'sc=sind' => 1081,
    'sc=sinh' => 1082,
    'sc=sogd' => 1083,
    'sc=sylo' => 1084,
    'sc=syrc' => 1085,
    'sc=tagb' => 1086,
    'sc=takr' => 1087,
    'sc=tale' => 1088,
    'sc=taml' => 1089,
    'sc=telu' => 1090,
    'sc=tglg' => 1091,
    'sc=thaa' => 1092,
    'sc=tirh' => 1093,
    'sc=yezi' => 1094,
    'sc=yi' => 1095,
    'sc=zyyy' => 1096,
    'sd' => 1097,
    'sgnw' => 1098,
    'shaw' => 1099,
    'shorthandformatcontrols' => 1100,
    'shrd' => 1101,
    'sidd' => 1102,
    'sind' => 1103,
    'sinh' => 1104,
    'sinhalaarchaicnumbers' => 1105,
    'sk' => 1106,
    'sm' => 1107,
    'smallforms' => 1108,
    'smallkanaext' => 1109,
    'so' => 1110,
    'sogd' => 1111,
    'sogo' => 1112,
    'sora' => 1113,
    'soyo' => 1114,
    'space' => 1204,
    'spaceperl' => 1204,
    'specials' => 1115,
    'sterm' => 1116,
    'sund' => 1117,
    'sundanesesup' => 1118,
    'suparrowsa' => 1119,
    'suparrowsb' => 1120,
    'suparrowsc' => 1121,
    'superandsub' => 1122,
    'supmathoperators' => 1123,
    'suppuaa' => 1124,
    'suppuab' => 1125,
    'suppunctuation' => 1126,
    'supsymbolsandpictographs' => 1127,
    'suttonsignwriting' => 1128,
    'sylo' => 1129,
    'symbolsandpictographsexta' => 1130,
    'symbolsforlegacycomputing' => 1131,
    'syrc' => 1132,
    'syriacsup' => 1133,
    'tagb' => 1134,
    'tags' => 1135,
    'taixuanjing' => 1136,
    'takr' => 1137,
    'tale' => 1138,
    'talu' => 1139,
    'tamilsup' => 1140,
    'taml' => 1141,
    'tang' => 1142,
    'tangutcomponents' => 1143,
    'tangutsup' => 1144,
    'tavt' => 1145,
    'telu' => 1146,
    'term' => 1147,
    'tfng' => 1148,
    'tglg' => 1149,
    'thaa' => 1150,
    'thai' => 1151,
    'tibt' => 1152,
    'tirh' => 1153,
    'title' => 1154,
    'titlecase' => 1154,
    'titlecaseletter' => 1154,
    'tnsa' => 1155,
    'toto' => 1156,
    'transportandmap' => 1157,
    'ucas' => 1158,
    'ucasext' => 1159,
    'ucasexta' => 1160,
    'ugar' => 1161,
    'uideo' => 1162,
    'upper' => 1205,
    'uppercase' => 1205,
    'uppercaseletter' => 1163,
    'vai' => 1164,
    'vedicext' => 1165,
    'verticalforms' => 1166,
    'vertspace' => 1167,
    'vith' => 1168,
    'vo=r' => 1169,
    'vo=tr' => 1170,
    'vo=tu' => 1171,
    'vo=u' => 1172,
    'vs' => 1173,
    'vssup' => 1174,
    'wara' => 1175,
    'wb=dq' => 1176,
    'wb=eb' => 1177,
    'wb=ex' => 1178,
    'wb=extend' => 1179,
    'wb=fo' => 1180,
    'wb=ka' => 1181,
    'wb=le' => 1182,
    'wb=mb' => 1183,
    'wb=ml' => 1184,
    'wb=mn' => 1185,
    'wb=nl' => 1186,
    'wb=nu' => 1187,
    'wb=sq' => 1188,
    'wb=wsegspace' => 1189,
    'wb=xx' => 1190,
    'wcho' => 1191,
    'whitespace' => 1204,
    'word' => 1206,
    'wspace' => 1204,
    'xdigit' => 1207,
    'xidc' => 1192,
    'xids' => 1193,
    'xpeo' => 1194,
    'xperlspace' => 1204,
    'xposixalnum' => 1195,
    'xposixalpha' => 1196,
    'xposixblank' => 1197,
    'xposixcntrl' => 1198,
    'xposixdigit' => 1199,
    'xposixgraph' => 1200,
    'xposixlower' => 1201,
    'xposixprint' => 1202,
    'xposixpunct' => 1203,
    'xposixspace' => 1204,
    'xposixupper' => 1205,
    'xposixword' => 1206,
    'xposixxdigit' => 1207,
    'xsux' => 1208,
    'yezi' => 1209,
    'yi' => 1210,
    'yijing' => 1211,
    'yiradicals' => 1212,
    'yisyllables' => 1213,
    'z' => 1214,
    'zanb' => 1215,
    'zl' => 1216,
    'znamennymusic' => 1217,
    'zp' => 1218,
    'zs' => 1219,
    'zyyy' => 1220,
    'zzzz' => 1221,
);

1;

# Generated from:
# 688d673ec947f7ccf898b4eae9848139d4d33676b688dee54f449f8bf9d3bbd2 lib/Unicode/UCD.pm
# eb840f36e0a7446293578c684a54c6d83d249abde7bdd4dfa89794af1d7fe9e9 lib/unicore/ArabicShaping.txt
# 333ae1e99db0504ca8a046a07dc45b5e7aa91869c685e6bf955ebe674804827a lib/unicore/BidiBrackets.txt
# b4b9e1d87d8ea273613880de9d2b2f0b0b696244b42152bfa0a3106e7d983a20 lib/unicore/BidiMirroring.txt
# 529dc5d0f6386d52f2f56e004bbfab48ce2d587eea9d38ba546c4052491bd820 lib/unicore/Blocks.txt
# cdd49e55eae3bbf1f0a3f6580c974a0263cb86a6a08daa10fbf705b4808a56f7 lib/unicore/CaseFolding.txt
# 3b019c0a33c3140cbc920c078f4f9af2680ba4f71869c8d4de5190667c70b6a3 lib/unicore/CompositionExclusions.txt
# 7570877e0fa197c45338f7c41a02636da4e14c8dba6a3611a01cd30bf329d5ca lib/unicore/DAge.txt
# d367290bc0867e6b484c68370530bdd1a08b6b32404601b8c7accaf83e05628d lib/unicore/DCoreProperties.txt
# d5687a48c95c7d6e1ec59cb29c0f2e8b052018eb069a4371b7368d0561e12a29 lib/unicore/DNormalizationProps.txt
# 743e7bc435c04ab1a8459710b1c3cad56eedced5b806b4659b6e69b85d0adf2a lib/unicore/EastAsianWidth.txt
# f2e04bae8c856fad3a16353a99d4cc2de6c72770260379f5e4974a97548aad2a lib/unicore/EquivalentUnifiedIdeograph.txt
# 9a3ab36d36a22bdb84de7a17b17e9b9c242134f0080f0a8b4b28d209465a8fc8 lib/unicore/HangulSyllableType.txt
# 790bc9595795c0e0a3860a21a7f97157a134b61a4fc4ab03c7d315d07c9a6eb7 lib/unicore/IdStatus.txt
# 71d3ed8f15cd5d8cd00cdebe62015ff26356462774b261b4a2b83d3bf46b1639 lib/unicore/IdType.txt
# 0ce56c1294da405c0a0a0071582ac839fd229bbf97bdd260462ee571309d4ec4 lib/unicore/IndicPositionalCategory.txt
# ffae561a51b47ddbbe267fdd8505ac3776b85b2932268809127acee84200b573 lib/unicore/IndicSyllabicCategory.txt
# 14733bcb6731ae0c07485bf59a41cb3db08785a50bd2b46b836b4341eab7ee46 lib/unicore/Jamo.txt
# 012bca868e2c4e59a5a10a7546baf0c6fb1b2ef458c277f054915c8a49d292bf lib/unicore/LineBreak.txt
# 3e39509e8fae3e5d50ba73759d0b97194501d14a9c63107a6372a46b38be18e8 lib/unicore/NameAliases.txt
# 1d5202155f14841973aa540b1625f4befbde185ac77ce5aceaaaa0501a68bd66 lib/unicore/NamedSequences.txt
# fb9ac8cc154a80cad6caac9897af55a4e75176af6f4e2bb6edc2bf8b1d57f326 lib/unicore/NormTest.txt
# e05c0a2811d113dae4abd832884199a3ea8d187ee1b872d8240a788a96540bfd lib/unicore/PropList.txt
# 13a7666843abea5c6b7eb8c057c57ab9bb2ba96cfc936e204224dd67d71cafad lib/unicore/PropValueAliases.txt
# e4935149af407fa455901832b710bccb63d2453e46d09190e234d019bcfbba45 lib/unicore/PropertyAliases.txt
# 7e07313d9d0bee42220c476b64485995130ae30917bbcf7780b602d677d7e33f lib/unicore/ScriptExtensions.txt
# cca85d830f46aece2e7c1459ef1249993dca8f2e46d51e869255be140d7ea4b0 lib/unicore/Scripts.txt
# 78b29c64b5840d25c11a9f31b665ee551b8a499eca6c70d770fcad7dd710f494 lib/unicore/SpecialCasing.txt
# 806e9aed65037197f1ec85e12be6e8cd870fc5608b4de0fffd990f689f376a73 lib/unicore/UnicodeData.txt
# ca6d332f485a6f5f452b29b4a74146af0f2c17b7577aa4c821d597210f70611a lib/unicore/VerticalOrientation.txt
# 0d2080d0def294a4b7660801cc03ddfe5866ff300c789c2cc1b50fd7802b2d97 lib/unicore/auxiliary/GCBTest.txt
# 5a0f8748575432f8ff95e1dd5bfaa27bda1a844809e17d6939ee912bba6568a1 lib/unicore/auxiliary/GraphemeBreakProperty.txt
# 371bde4052aa593b108684ae292d8ea2dbb93c19990e0cdf416fa7239557aac3 lib/unicore/auxiliary/LBTest.txt
# f62279d8fd10935ba0cf0d8417a1dcbe7ab0d4e62f59c17e02cbe40f580c4162 lib/unicore/auxiliary/SBTest.txt
# 61e4ba975b0a5bc1a76ee931b94914395d7289ef624e3c0d4d6b9460ee387bea lib/unicore/auxiliary/SentenceBreakProperty.txt
# 2a676130c71194245e7c74a837e58330f202600d8ddcf4518129dd476f26e18e lib/unicore/auxiliary/WBTest.txt
# 5188a56e91593467c2e912601ebc78750e6adc9b04541b8c5becb5441e388ce2 lib/unicore/auxiliary/WordBreakProperty.txt
# 29071dba22c72c27783a73016afb8ffaeb025866740791f9c2d0b55cc45a3470 lib/unicore/emoji/emoji.txt
# 4841f2090c2dbc592d3ce43bb74c2191b3da50fb9a0d00274f1448c202851b02 lib/unicore/extracted/DBidiClass.txt
# f10a35451429137f7348825f22d624b6390c526ead3d8e756d2af9e5ed5b2b67 lib/unicore/extracted/DBinaryProperties.txt
# ca54f6360cd288ad92113415bf1f77749015abe11cbd6798d21f7fa81f04205d lib/unicore/extracted/DCombiningClass.txt
# db059ce45e3cec49bfda56e262fa658b3a5561b1648de266c818d2a08a85b78a lib/unicore/extracted/DDecompositionType.txt
# d62e6950f086e53f47c593a38342621f8838f48c49a1de070cf83d3959bd1688 lib/unicore/extracted/DEastAsianWidth.txt
# fe29a45c0882500e591140aaa5c4f5067e6a5d746806148af34400c48b9c06f9 lib/unicore/extracted/DGeneralCategory.txt
# e13ca1344b16023aa38c6ada39f9658536fc6bb7c3c24d579f0bc316a4f4f1e0 lib/unicore/extracted/DJoinGroup.txt
# c4870b11e2b8b7d0eb70b99ce85608e5c28a399efa316cca97238a58ae160e5e lib/unicore/extracted/DJoinType.txt
# 3f4f32ed2a577344a508114527e721d7a8b633d32f38945d47fe0c743650c585 lib/unicore/extracted/DLineBreak.txt
# 710abf2d581ac9c57f244c0834f9d9969d9781e0396adccd330eaae658ac7d6b lib/unicore/extracted/DNumType.txt
# 6bd30f385f3baf3ab5d5308c111a81de87bea5f494ba0ba69e8ab45263b8c34d lib/unicore/extracted/DNumValues.txt
# 8968a5ee00063fa31ff15474b95ccb6b9c228e3ebad6c20bc77f4225187e2023 lib/unicore/mktables
# 55d90fdc3f902e5c0b16b3378f9eaa36e970a1c09723c33de7d47d0370044012 lib/unicore/version
# 0a6b5ab33bb1026531f816efe81aea1a8ffcd34a27cbea37dd6a70a63d73c844 regen/charset_translations.pl
# c7ff8e0d207d3538c7feb4a1a152b159e5e902d20293b303569ea8323e84633e regen/mk_PL_charclass.pl
# cdbafee25193032242e77f2a6332b731d8392ce342fa616dbabc2c14c7b44eb6 regen/mk_invlists.pl
# ex: set ro ft=perl:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          usr/local/lib/perl5/5.40.0/unicore/version                                                          0000444 0000000 0000000 00000000007 14714567415 016555  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        15.0.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/local/lib/perl5/5.40.0/utf8.pm                                                                  0000444 0000000 0000000 00000025210 14714567415 014730  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package utf8;

use strict;
use warnings;

our $hint_bits = 0x00800000;

our $VERSION = '1.25';
our $AUTOLOAD;

sub import {
    $^H |= $hint_bits;
}

sub unimport {
    $^H &= ~$hint_bits;
}

sub AUTOLOAD {
    goto &$AUTOLOAD if defined &$AUTOLOAD;
    require Carp;
    Carp::croak("Undefined subroutine $AUTOLOAD called");
}

1;
__END__

=head1 NAME

utf8 - Perl pragma to enable/disable UTF-8 (or UTF-EBCDIC) in source code

=head1 SYNOPSIS

 use utf8;
 no utf8;

 # Convert the internal representation of a Perl scalar to/from UTF-8.

 $num_octets = utf8::upgrade($string);
 $success    = utf8::downgrade($string[, $fail_ok]);

 # Change each character of a Perl scalar to/from a series of
 # characters that represent the UTF-8 bytes of each original character.

 utf8::encode($string);  # "\x{100}"  becomes "\xc4\x80"
 utf8::decode($string);  # "\xc4\x80" becomes "\x{100}"

 # Convert a code point from the platform native character set to
 # Unicode, and vice-versa.
 $unicode = utf8::native_to_unicode(ord('A')); # returns 65 on both
                                               # ASCII and EBCDIC
                                               # platforms
 $native = utf8::unicode_to_native(65);        # returns 65 on ASCII
                                               # platforms; 193 on
                                               # EBCDIC

 $flag = utf8::is_utf8($string); # since Perl 5.8.1
 $flag = utf8::valid($string);

=head1 DESCRIPTION

The C<use utf8> pragma tells the Perl parser to allow UTF-8 in the
program text in the current lexical scope.  The C<no utf8> pragma tells Perl
to switch back to treating the source text as literal bytes in the current
lexical scope.  (On EBCDIC platforms, technically it is allowing UTF-EBCDIC,
and not UTF-8, but this distinction is academic, so in this document the term
UTF-8 is used to mean both).

B<Do not use this pragma for anything else than telling Perl that your
script is written in UTF-8.> The utility functions described below are
directly usable without C<use utf8;>.

Because it is not possible to reliably tell UTF-8 from native 8 bit
encodings, you need either a Byte Order Mark at the beginning of your
source code, or C<use utf8;>, to instruct perl.

When UTF-8 becomes the standard source format, this pragma will
effectively become a no-op.

See also the effects of the C<-C> switch and its cousin, the
C<PERL_UNICODE> environment variable, in L<perlrun>.

Enabling the C<utf8> pragma has the following effect:

=over 4

=item *

Bytes in the source text that are not in the ASCII character set will be
treated as being part of a literal UTF-8 sequence.  This includes most
literals such as identifier names, string constants, and constant
regular expression patterns.

=back

Note that if you have non-ASCII, non-UTF-8 bytes in your script (for example
embedded Latin-1 in your string literals), C<use utf8> will be unhappy.  If
you want to have such bytes under C<use utf8>, you can disable this pragma
until the end the block (or file, if at top level) by C<no utf8;>.

=head2 Utility functions

The following functions are defined in the C<utf8::> package by the
Perl core.  You do not need to say C<use utf8> to use these and in fact
you should not say that unless you really want to have UTF-8 source code.

=over 4

=item * C<$num_octets = utf8::upgrade($string)>

(Since Perl v5.8.0)
Converts in-place the internal representation of the string from an octet
sequence in the native encoding (Latin-1 or EBCDIC) to UTF-8. The
logical character sequence itself is unchanged.  If I<$string> is already
upgraded, then this is a no-op. Returns the
number of octets necessary to represent the string as UTF-8.
Since Perl v5.38, if C<$string> is C<undef> no action is taken; prior to that,
it would be converted to be defined and zero-length.

If your code needs to be compatible with versions of perl without
C<use feature 'unicode_strings';>, you can force Unicode semantics on
a given string:

  # force unicode semantics for $string without the
  # "unicode_strings" feature
  utf8::upgrade($string);

For example:

  # without explicit or implicit use feature 'unicode_strings'
  my $x = "\xDF";    # LATIN SMALL LETTER SHARP S
  $x =~ /ss/i;       # won't match
  my $y = uc($x);    # won't convert
  utf8::upgrade($x);
  $x =~ /ss/i;       # matches
  my $z = uc($x);    # converts to "SS"

B<Note that this function does not handle arbitrary encodings>;
use L<Encode> instead.

=item * C<$success = utf8::downgrade($string[, $fail_ok])>

(Since Perl v5.8.0)
Converts in-place the internal representation of the string from UTF-8 to the
equivalent octet sequence in the native encoding (Latin-1 or EBCDIC). The
logical character sequence itself is unchanged. If I<$string> is already
stored as native 8 bit, then this is a no-op.  Can be used to make sure that
the UTF-8 flag is off, e.g. when you want to make sure that the substr() or
length() function works with the usually faster byte algorithm.

Fails if the original UTF-8 sequence cannot be represented in the
native 8 bit encoding. On failure dies or, if the value of I<$fail_ok> is
true, returns false. 

Returns true on success.

If your code expects an octet sequence this can be used to validate
that you've received one:

  # throw an exception if not representable as octets
  utf8::downgrade($string)

  # or do your own error handling
  utf8::downgrade($string, 1) or die "string must be octets";

B<Note that this function does not handle arbitrary encodings>;
use L<Encode> instead.

=item * C<utf8::encode($string)>

(Since Perl v5.8.0)
Converts in-place the character sequence to the corresponding octet
sequence in Perl's extended UTF-8. That is, every (possibly wide) character
gets replaced with a sequence of one or more characters that represent the
individual UTF-8 bytes of the character.  The UTF8 flag is turned off.
Returns nothing.

 my $x = "\x{100}"; # $x contains one character, with ord 0x100
 utf8::encode($x);  # $x contains two characters, with ords (on
                    # ASCII platforms) 0xc4 and 0x80.  On EBCDIC
                    # 1047, this would instead be 0x8C and 0x41.

Similar to:

  use Encode;
  $x = Encode::encode("utf8", $x);

B<Note that this function does not handle arbitrary encodings>;
use L<Encode> instead.

=item * C<$success = utf8::decode($string)>

(Since Perl v5.8.0)
Attempts to convert in-place the octet sequence encoded in Perl's extended
UTF-8 to the corresponding character sequence. That is, it replaces each
sequence of characters in the string whose ords represent a valid (extended)
UTF-8 byte sequence, with the corresponding single character.  The UTF-8 flag
is turned on only if the source string contains multiple-byte UTF-8
characters.  If I<$string> is invalid as extended UTF-8, returns false;
otherwise returns true.

 my $x = "\xc4\x80"; # $x contains two characters, with ords
                     # 0xc4 and 0x80
 utf8::decode($x);   # On ASCII platforms, $x contains one char,
                     # with ord 0x100.   Since these bytes aren't
                     # legal UTF-EBCDIC, on EBCDIC platforms, $x is
                     # unchanged and the function returns FALSE.
 my $y = "\xc3\x83\xc2\xab"; This has been encoded twice; this
                     # example is only for ASCII platforms
 utf8::decode($y);   # Converts $y to \xc3\xab, returns TRUE;
 utf8::decode($y);   # Further converts to \xeb, returns TRUE;
 utf8::decode($y);   # Returns FALSE, leaves $y unchanged

B<Note that this function does not handle arbitrary encodings>;
use L<Encode> instead.

=item * C<$unicode = utf8::native_to_unicode($code_point)>

(Since Perl v5.8.0)
This takes an unsigned integer (which represents the ordinal number of a
character (or a code point) on the platform the program is being run on) and
returns its Unicode equivalent value.  Since ASCII platforms natively use the
Unicode code points, this function returns its input on them.  On EBCDIC
platforms it converts from EBCDIC to Unicode.

A meaningless value will currently be returned if the input is not an unsigned
integer.

Since Perl v5.22.0, calls to this function are optimized out on ASCII
platforms, so there is no performance hit in using it there.

=item * C<$native = utf8::unicode_to_native($code_point)>

(Since Perl v5.8.0)
This is the inverse of C<utf8::native_to_unicode()>, converting the other
direction.  Again, on ASCII platforms, this returns its input, but on EBCDIC
platforms it will find the native platform code point, given any Unicode one.

A meaningless value will currently be returned if the input is not an unsigned
integer.

Since Perl v5.22.0, calls to this function are optimized out on ASCII
platforms, so there is no performance hit in using it there.

=item * C<$flag = utf8::is_utf8($string)>

(Since Perl 5.8.1)  Test whether I<$string> is marked internally as encoded in
UTF-8.  Functionally the same as C<Encode::is_utf8($string)>.

Typically only necessary for debugging and testing, if you need to
dump the internals of an SV, L<Devel::Peek's|Devel::Peek> Dump()
provides more detail in a compact form.

If you still think you need this outside of debugging, testing or
dealing with filenames, you should probably read L<perlunitut> and
L<perlunifaq/What is "the UTF8 flag"?>.

Don't use this flag as a marker to distinguish character and binary
data: that should be decided for each variable when you write your
code.

To force unicode semantics in code portable to perl 5.8 and 5.10, call
C<utf8::upgrade($string)> unconditionally.

=item * C<$flag = utf8::valid($string)>

[INTERNAL] Test whether I<$string> is in a consistent state regarding
UTF-8.  Will return true if it is well-formed Perl extended UTF-8 and has the
UTF-8 flag
on B<or> if I<$string> is held as bytes (both these states are 'consistent').
The main reason for this routine is to allow Perl's test suite to check
that operations have left strings in a consistent state.

=back

C<utf8::encode> is like C<utf8::upgrade>, but the UTF8 flag is
cleared.  See L<perlunicode>, and the C API
functions C<L<sv_utf8_upgrade|perlapi/sv_utf8_upgrade>>,
C<L<perlapi/sv_utf8_downgrade>>, C<L<perlapi/sv_utf8_encode>>,
and C<L<perlapi/sv_utf8_decode>>, which are wrapped by the Perl functions
C<utf8::upgrade>, C<utf8::downgrade>, C<utf8::encode> and
C<utf8::decode>.  Also, the functions C<utf8::is_utf8>, C<utf8::valid>,
C<utf8::encode>, C<utf8::decode>, C<utf8::upgrade>, and C<utf8::downgrade> are
actually internal, and thus always available, without a C<require utf8>
statement.

=head1 BUGS

Some filesystems may not support UTF-8 file names, or they may be supported
incompatibly with Perl.  Therefore UTF-8 names that are visible to the
filesystem, such as module names may not work.

=head1 SEE ALSO

L<perlunitut>, L<perluniintro>, L<perlrun>, L<bytes>, L<perlunicode>

=cut
                                                                                                                                                                                                                                                                                                                                                                                        usr/local/lib/perl5/5.40.0/vars.pm                                                                  0000444 0000000 0000000 00000004632 14714567415 015022  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package vars;

use 5.006;

our $VERSION = '1.05';

use warnings::register;
use strict qw(vars subs);

sub import {
    my $callpack = caller;
    my (undef, @imports) = @_;
    my ($sym, $ch);
    foreach (@imports) {
        if (($ch, $sym) = /^([\$\@\%\*\&])(.+)/) {
	    if ($sym =~ /\W/) {
		# time for a more-detailed check-up
		if ($sym =~ /^\w+[[{].*[]}]$/) {
		    require Carp;
		    Carp::croak("Can't declare individual elements of hash or array");
		} elsif (warnings::enabled() and length($sym) == 1 and $sym !~ tr/a-zA-Z//) {
		    warnings::warn("No need to declare built-in vars");
		} elsif  (($^H & strict::bits('vars'))) {
		    require Carp;
		    Carp::croak("'$_' is not a valid variable name under strict vars");
		}
	    }
	    $sym = "${callpack}::$sym" unless $sym =~ /::/;
	    *$sym =
		(  $ch eq "\$" ? \$$sym
		 : $ch eq "\@" ? \@$sym
		 : $ch eq "\%" ? \%$sym
		 : $ch eq "\*" ? \*$sym
		 : $ch eq "\&" ? \&$sym 
		 : do {
		     require Carp;
		     Carp::croak("'$_' is not a valid variable name");
		 });
	} else {
	    require Carp;
	    Carp::croak("'$_' is not a valid variable name");
	}
    }
};

1;
__END__

=head1 NAME

vars - Perl pragma to predeclare global variable names

=head1 SYNOPSIS

    use vars qw($frob @mung %seen);

=head1 DESCRIPTION

NOTE: For use with variables in the current package for a single scope, the
functionality provided by this pragma has been superseded by C<our>
declarations, available in Perl v5.6.0 or later, and use of this pragma is
discouraged.  See L<perlfunc/our>.

This pragma will predeclare all the variables whose names are
in the list, allowing you to use them under C<use strict>, and
disabling any typo warnings for them.

Unlike pragmas that affect the C<$^H> hints variable, the C<use vars> and
C<use subs> declarations are not lexically scoped to the block they appear
in: they affect
the entire package in which they appear.  It is not possible to rescind these
declarations with C<no vars> or C<no subs>.

Packages such as the B<AutoLoader> and B<SelfLoader> that delay
loading of subroutines within packages can create problems with
package lexicals defined using C<my()>. While the B<vars> pragma
cannot duplicate the effect of package lexicals (total transparency
outside of the package), it can act as an acceptable substitute by
pre-declaring global symbols, ensuring their availability to the
later-loaded routines.

See L<perlmodlib/Pragmatic Modules>.

=cut
                                                                                                      usr/local/lib/perl5/5.40.0/version/                                                                 0000755 0000000 0000000 00000000000 14714567415 015173  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/lib/perl5/5.40.0/version/Internals.pod                                                    0000444 0000000 0000000 00000060702 14714567415 017641  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

version::Internals - Perl extension for Version Objects

=head1 DESCRIPTION

Overloaded version objects for all modern versions of Perl.  This documents
the internal data representation and underlying code for version.pm.  See
F<version.pod> for daily usage.  This document is only useful for users
interested in the gory details.

=head1 WHAT IS A VERSION?

For the purposes of this module, a version "number" is a sequence of
positive integer values separated by one or more decimal points and
optionally a single underscore.  This corresponds to what Perl itself
uses for a version, as well as extending the "version as number" that
is discussed in the various editions of the Camel book.

There are actually two distinct kinds of version objects:

=over 4

=item Decimal versions

Any version which "looks like a number", see L<Decimal Versions>.  This
also includes versions with a single decimal point and a single embedded
underscore, see L<Alpha Versions>, even though these must be quoted
to preserve the underscore formatting.

=item Dotted-Decimal versions

Also referred to as "Dotted-Integer", these contains more than one decimal
point and may have an optional embedded underscore, see L<Dotted-Decimal
Versions>.  This is what is commonly used in most open source software as
the "external" version (the one used as part of the tag or tarfile name).
A leading 'v' character is now required and will warn if it missing.

=back

Both of these methods will produce similar version objects, in that
the default stringification will yield the version L<Normal Form> only
if required:

  $v  = version->new(1.002);     # 1.002, but compares like 1.2.0
  $v  = version->new(1.002003);  # 1.002003
  $v2 = version->new("v1.2.3");  # v1.2.3

In specific, version numbers initialized as L<Decimal Versions> will
stringify as they were originally created (i.e. the same string that was
passed to C<new()>.  Version numbers initialized as L<Dotted-Decimal Versions>
will be stringified as L<Normal Form>.

=head2 Decimal Versions

These correspond to historical versions of Perl itself prior to 5.6.0,
as well as all other modules which follow the Camel rules for the
$VERSION scalar.  A Decimal version is initialized with what looks like
a floating point number.  Leading zeros B<are> significant and trailing
zeros are implied so that a minimum of three places is maintained
between subversions.  What this means is that any subversion (digits
to the right of the decimal place) that contains less than three digits
will have trailing zeros added to make up the difference, but only for
purposes of comparison with other version objects.  For example:

                                   # Prints     Equivalent to
  $v = version->new(      1.2);    # 1.2        v1.200.0
  $v = version->new(     1.02);    # 1.02       v1.20.0
