=item C<sv_setrv_inc_mg>
X<sv_setrv_inc>X<sv_setrv_inc_mg>

As C<sv_setrv_noinc> but increments the reference count of I<ref>.

C<sv_setrv_inc_mg> will invoke 'set' magic on the SV; C<sv_setrv_inc> will
not.

=over 3

 void  sv_setrv_inc(SV * const sv, SV * const ref)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_setrv_noinc>

=item C<sv_setrv_noinc_mg>
X<sv_setrv_noinc>X<sv_setrv_noinc_mg>

Copies an SV pointer into the given SV as an SV reference, upgrading it if
necessary. After this, C<SvRV(sv)> is equal to I<ref>. This does not adjust
the reference count of I<ref>. The reference I<ref> must not be NULL.

C<sv_setrv_noinc_mg> will invoke 'set' magic on the SV; C<sv_setrv_noinc> will
not.

=over 3

 void  sv_setrv_noinc(SV * const sv, SV * const ref)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_setsv>

=item C<sv_setsv_flags>

=item C<sv_setsv_mg>

=item C<sv_setsv_nomg>
X<sv_setsv>X<sv_setsv_flags>X<sv_setsv_mg>X<sv_setsv_nomg>

These copy the contents of the source SV C<ssv> into the destination SV C<dsv>.
C<ssv> may be destroyed if it is mortal, so don't use these functions if
the source SV needs to be reused.
Loosely speaking, they perform a copy-by-value, obliterating any previous
content of the destination.

They differ only in that:

C<sv_setsv> calls 'get' magic on C<ssv>, but skips 'set' magic on C<dsv>.

C<sv_setsv_mg> calls both 'get' magic on C<ssv> and 'set' magic on C<dsv>.

C<sv_setsv_nomg> skips all magic.

C<sv_setsv_flags> has a C<flags> parameter which you can use to specify any
combination of magic handling, and also you can specify C<SV_NOSTEAL> so that
the buffers of temps will not be stolen.

You probably want to instead use one of the assortment of wrappers, such as
C<L</SvSetSV>>, C<L</SvSetSV_nosteal>>, C<L</SvSetMagicSV>> and
C<L</SvSetMagicSV_nosteal>>.

C<sv_setsv_flags> is the primary function for copying scalars, and most other
copy-ish functions and macros use it underneath.

=over 3

 void  sv_setsv      (SV *dsv, SV *ssv)
 void  sv_setsv_flags(SV *dsv, SV *ssv, const I32 flags)
 void  sv_setsv_mg   (SV * const dsv, SV * const ssv)
 void  sv_setsv_nomg (SV *dsv, SV *ssv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_set_true>
X<sv_set_true>

Equivalent to C<sv_setsv(sv, &PL_sv_yes)>, but may be made more
efficient in the future. Doesn't handle set magic.

The perl equivalent is C<$sv = !0;>.

Introduced in perl 5.35.11.

=over 3

 void  sv_set_true(SV *sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_set_undef>
X<sv_set_undef>

Equivalent to C<sv_setsv(sv, &PL_sv_undef)>, but more efficient.
Doesn't handle set magic.

The perl equivalent is C<$sv = undef;>. Note that it doesn't free any string
buffer, unlike C<undef $sv>.

Introduced in perl 5.25.12.

=over 3

 void  sv_set_undef(SV *sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_setuv>

=item C<sv_setuv_mg>
X<sv_setuv>X<sv_setuv_mg>

These copy an unsigned integer into the given SV, upgrading first if necessary.


They differ only in that C<sv_setuv_mg> handles 'set' magic; C<sv_setuv> does
not.

=over 3

 void  sv_setuv   (SV * const sv, const UV num)
 void  sv_setuv_mg(SV * const sv, const UV u)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvSHARE>
X<SvSHARE>

Arranges for C<sv> to be shared between threads if a suitable module
has been loaded.

=over 3

 void  SvSHARE(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvSHARED_HASH>
X<SvSHARED_HASH>

Returns the hash for C<sv> created by C<L</newSVpvn_share>>.

=over 3

 struct hek*  SvSHARED_HASH(SV * sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvSTASH>
X<SvSTASH>

Returns the stash of the SV.

=over 3

 HV*  SvSTASH(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvSTASH_set>
X<SvSTASH_set>

Set the value of the STASH pointer in C<sv> to val.  See C<L</SvIV_set>>.

=over 3

 void  SvSTASH_set(SV* sv, HV* val)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_streq>
X<sv_streq>

A convenient shortcut for calling C<sv_streq_flags> with the C<SV_GMAGIC>
flag. This function basically behaves like the Perl code C<$sv1 eq $sv2>.

=over 3

 bool  sv_streq(SV *sv1, SV *sv2)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_streq_flags>
X<sv_streq_flags>

Returns a boolean indicating whether the strings in the two SVs are
identical. If the flags argument has the C<SV_GMAGIC> bit set, it handles
get-magic too. Will coerce its args to strings if necessary. Treats
C<NULL> as undef. Correctly handles the UTF8 flag.

If flags does not have the C<SV_SKIP_OVERLOAD> bit set, an attempt to use
C<eq> overloading will be made. If such overloading does not exist or the
flag is set, then regular string comparison will be used instead.

=over 3

 bool  sv_streq_flags(SV *sv1, SV *sv2, const U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvTRUE>

=item C<SvTRUE_NN>

=item C<SvTRUE_nomg>

=item C<SvTRUE_nomg_NN>

=item C<SvTRUEx>
X<SvTRUE>X<SvTRUE_NN>X<SvTRUE_nomg>X<SvTRUE_nomg_NN>X<SvTRUEx>

These return a boolean indicating whether Perl would evaluate the SV as true or
false.  See C<L</SvOK>> for a defined/undefined test.

As of Perl 5.32, all are guaranteed to evaluate C<sv> only once.  Prior to that
release, only C<SvTRUEx> guaranteed single evaluation; now C<SvTRUEx> is
identical to C<SvTRUE>.

C<SvTRUE_nomg> and C<TRUE_nomg_NN> do not perform 'get' magic; the others do
unless the scalar is already C<SvPOK>, C<SvIOK>, or C<SvNOK> (the public, not
the private flags).

C<SvTRUE_NN> is like C<L</SvTRUE>>, but C<sv> is assumed to be
non-null (NN).  If there is a possibility that it is NULL, use plain
C<SvTRUE>.

C<SvTRUE_nomg_NN> is like C<L</SvTRUE_nomg>>, but C<sv> is assumed to be
non-null (NN).  If there is a possibility that it is NULL, use plain
C<SvTRUE_nomg>.

=over 3

 bool  SvTRUE(SV *sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvTYPE>
X<SvTYPE>

Returns the type of the SV.  See C<L</svtype>>.

=over 3

 svtype  SvTYPE(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvUNLOCK>
X<SvUNLOCK>

Releases a mutual exclusion lock on C<sv> if a suitable module
has been loaded.

=over 3

 void  SvUNLOCK(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_unmagic>
X<sv_unmagic>

Removes all magic of type C<type> from an SV.

=over 3

 int  sv_unmagic(SV * const sv, const int type)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_unmagicext>
X<sv_unmagicext>

Removes all magic of type C<type> with the specified C<vtbl> from an SV.

=over 3

 int  sv_unmagicext(SV * const sv, const int type,
                    const MGVTBL *vtbl)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_unref>
X<sv_unref>

Unsets the RV status of the SV, and decrements the reference count of
whatever was being referenced by the RV.  This can almost be thought of
as a reversal of C<newSVrv>.  This is C<sv_unref_flags> with the C<flag>
being zero.  See C<L</SvROK_off>>.

=over 3

 void  sv_unref(SV *sv)

=back

=back

=for hackers
Found in file mathoms.c

=over 4

=item C<sv_unref_flags>
X<sv_unref_flags>

Unsets the RV status of the SV, and decrements the reference count of
whatever was being referenced by the RV.  This can almost be thought of
as a reversal of C<newSVrv>.  The C<cflags> argument can contain
C<SV_IMMEDIATE_UNREF> to force the reference count to be decremented
(otherwise the decrementing is conditional on the reference count being
different from one or the reference being a readonly SV).
See C<L</SvROK_off>>.

=over 3

 void  sv_unref_flags(SV * const ref, const U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvUOK>
X<SvUOK>

Returns a boolean indicating whether the SV contains an integer that must be
interpreted as unsigned.  A non-negative integer whose value is within the
range of both an IV and a UV may be flagged as either C<SvUOK> or C<SvIOK>.

=over 3

 bool  SvUOK(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvUPGRADE>
X<SvUPGRADE>

Used to upgrade an SV to a more complex form.  Uses C<sv_upgrade> to
perform the upgrade if necessary.  See C<L</svtype>>.

=over 3

 void  SvUPGRADE(SV* sv, svtype type)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_upgrade>
X<sv_upgrade>

Upgrade an SV to a more complex form.  Generally adds a new body type to the
SV, then copies across as much information as possible from the old body.
It croaks if the SV is already in a more complex form than requested.  You
generally want to use the C<SvUPGRADE> macro wrapper, which checks the type
before calling C<sv_upgrade>, and hence does not croak.  See also
C<L</svtype>>.

=over 3

 void  sv_upgrade(SV * const sv, svtype new_type)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_usepvn>

=item C<sv_usepvn_flags>

=item C<sv_usepvn_mg>
X<sv_usepvn>X<sv_usepvn_flags>X<sv_usepvn_mg>

These tell an SV to use C<ptr> for its string value.  Normally SVs have
their string stored inside the SV, but these tell the SV to use an
external string instead.

C<ptr> should point to memory that was allocated
by L</C<Newx>>.  It must be
the start of a C<Newx>-ed block of memory, and not a pointer to the
middle of it (beware of L<C<OOK>|perlguts/Offsets> and copy-on-write),
and not be from a non-C<Newx> memory allocator like C<malloc>.  The
string length, C<len>, must be supplied.  By default this function
will L</C<Renew>> (i.e. realloc, move) the memory pointed to by C<ptr>,
so that the pointer should not be freed or used by the programmer after giving
it to C<sv_usepvn>, and neither should any pointers from "behind" that pointer
(I<e.g.>, S<C<ptr> + 1>) be used.

In the C<sv_usepvn_flags> form, if S<C<flags & SV_SMAGIC>> is true,
C<SvSETMAGIC> is called before returning.
And if S<C<flags & SV_HAS_TRAILING_NUL>> is true, then C<ptr[len]> must be
C<NUL>, and the realloc will be skipped (I<i.e.>, the buffer is actually at
least 1 byte longer than C<len>, and already meets the requirements for storing
in C<SvPVX>).

C<sv_usepvn> is merely C<sv_usepvn_flags> with C<flags> set to 0, so 'set'
magic is skipped.

C<sv_usepvn_mg> is merely C<sv_usepvn_flags> with C<flags> set to C<SV_SMAGIC>,
so 'set' magic is performed.

=over 3

 void  sv_usepvn      (SV *sv, char *ptr, STRLEN len)
 void  sv_usepvn_flags(SV * const sv, char *ptr, const STRLEN len,
                       const U32 flags)
 void  sv_usepvn_mg   (SV *sv, char *ptr, STRLEN len)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_utf8_decode>
X<sv_utf8_decode>

If the PV of the SV is an octet sequence in Perl's extended UTF-8
and contains a multiple-byte character, the C<SvUTF8> flag is turned on
so that it looks like a character.  If the PV contains only single-byte
characters, the C<SvUTF8> flag stays off.
Scans PV for validity and returns FALSE if the PV is invalid UTF-8.

=over 3

 bool  sv_utf8_decode(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_utf8_downgrade>

=item C<sv_utf8_downgrade_flags>

=item C<sv_utf8_downgrade_nomg>
X<sv_utf8_downgrade>X<sv_utf8_downgrade_flags>X<sv_utf8_downgrade_nomg>

These attempt to convert the PV of an SV from characters to bytes.  If the PV
contains a character that cannot fit in a byte, this conversion will fail; in
this case, C<FALSE> is returned if C<fail_ok> is true; otherwise they croak.

They are not a general purpose Unicode to byte encoding interface:
use the C<Encode> extension for that.

They differ only in that:

C<sv_utf8_downgrade> processes 'get' magic on C<sv>.

C<sv_utf8_downgrade_nomg> does not.

C<sv_utf8_downgrade_flags> has an additional C<flags> parameter in which you can specify
C<SV_GMAGIC> to process 'get' magic, or leave it cleared to not process 'get' magic.

=over 3

 bool  sv_utf8_downgrade      (SV * const sv, const bool fail_ok)
 bool  sv_utf8_downgrade_flags(SV * const sv, const bool fail_ok,
                               const U32 flags)
 bool  sv_utf8_downgrade_nomg (SV * const sv, const bool fail_ok)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_utf8_encode>
X<sv_utf8_encode>

Converts the PV of an SV to UTF-8, but then turns the C<SvUTF8>
flag off so that it looks like octets again.

=over 3

 void  sv_utf8_encode(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvUTF8_off>
X<SvUTF8_off>

Unsets the UTF-8 status of an SV (the data is not changed, just the flag).
Do not use frivolously.

=over 3

 void  SvUTF8_off(SV *sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvUTF8_on>
X<SvUTF8_on>

Turn on the UTF-8 status of an SV (the data is not changed, just the flag).
Do not use frivolously.

=over 3

 void  SvUTF8_on(SV *sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_utf8_upgrade>

=item C<sv_utf8_upgrade_flags>

=item C<sv_utf8_upgrade_flags_grow>

=item C<sv_utf8_upgrade_nomg>
X<sv_utf8_upgrade>X<sv_utf8_upgrade_flags>X<sv_utf8_upgrade_flags_grow>X<sv_utf8_upgrade_nomg>

These convert the PV of an SV to its UTF-8-encoded form.
The SV is forced to string form if it is not already.
They always set the C<SvUTF8> flag to avoid future validity checks even if the
whole string is the same in UTF-8 as not.
They return the number of bytes in the converted string

The forms differ in just two ways.  The main difference is whether or not they
perform 'get magic' on C<sv>.  C<sv_utf8_upgrade_nomg> skips 'get magic';
C<sv_utf8_upgrade> performs it; and C<sv_utf8_upgrade_flags> and
C<sv_utf8_upgrade_flags_grow> either perform it (if the C<SV_GMAGIC> bit is set
in C<flags>) or don't (if that bit is cleared).

The other difference is that C<sv_utf8_upgrade_flags_grow> has an additional
parameter, C<extra>, which allows the caller to specify an amount of space to
be reserved as spare beyond what is needed for the actual conversion.  This is
used when the caller knows it will soon be needing yet more space, and it is
more efficient to request space from the system in a single call.
This form is otherwise identical to C<sv_utf8_upgrade_flags>.

These are not a general purpose byte encoding to Unicode interface: use the
Encode extension for that.

The C<SV_FORCE_UTF8_UPGRADE> flag is now ignored.

=over 3

 STRLEN  sv_utf8_upgrade           (SV *sv)
 STRLEN  sv_utf8_upgrade_flags     (SV * const sv, const I32 flags)
 STRLEN  sv_utf8_upgrade_flags_grow(SV * const sv, const I32 flags,
                                    STRLEN extra)
 STRLEN  sv_utf8_upgrade_nomg      (SV *sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvUTF8>
X<SvUTF8>

Returns a U32 value indicating the UTF-8 status of an SV.  If things are set-up
properly, this indicates whether or not the SV contains UTF-8 encoded data.
You should use this I<after> a call to C<L</SvPV>> or one of its variants, in
case any call to string overloading updates the internal flag.

If you want to take into account the L<bytes> pragma, use C<L</DO_UTF8>>
instead.

=over 3

 U32  SvUTF8(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvUV>

=item C<SvUV_nomg>

=item C<SvUVx>
X<SvUV>X<SvUV_nomg>X<SvUVx>

These each coerce the given SV to UV and return it.  The returned value in many
circumstances will get stored in C<sv>'s UV slot, but not in all cases.  (Use
C<L</sv_setuv>> to make sure it does).

As of 5.37.1, all are guaranteed to evaluate C<sv> only once.

C<SvUVx> is now identical to C<SvUV>, but prior to 5.37.1, it was the only form
guaranteed to evaluate C<sv> only once.

=over 3

 UV  SvUV(SV *sv)

=back

=back

=for hackers
Found in file sv_inline.h

=over 4

=item C<sv_2uv_flags>
X<sv_2uv_flags>

Return the unsigned integer value of an SV, doing any necessary string
conversion.  If C<flags> has the C<SV_GMAGIC> bit set, does an C<mg_get()> first.
Normally used via the C<SvUV(sv)> and C<SvUVx(sv)> macros.

=over 3

 UV  sv_2uv_flags(SV * const sv, const I32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvUV_set>
X<SvUV_set>

Set the value of the UV pointer in C<sv> to val.  See C<L</SvIV_set>>.

=over 3

 void  SvUV_set(SV* sv, UV val)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvUVX>
X<SvUVX>

Returns the raw value in the SV's UV slot, without checks or conversions.
Only use when you are sure C<SvIOK> is true.  See also C<L</SvUV>>.

=over 3

 UV  SvUVX(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvUVXx>
X<SvUVXx>

C<B<DEPRECATED!>>  It is planned to remove C<SvUVXx>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

This is an unnecessary synonym for L</SvUVX>

=over 3

 UV  SvUVXx(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_vcatpvf>

=item C<sv_vcatpvf_mg>
X<sv_vcatpvf>X<sv_vcatpvf_mg>

These process their arguments like C<sv_vcatpvfn> called with a non-null
C-style variable argument list, and append the formatted output to C<sv>.

They differ only in that C<sv_vcatpvf_mg> performs 'set' magic;
C<sv_vcatpvf> skips 'set' magic.

Both perform 'get' magic.

They are usually accessed via their frontends C<L</sv_catpvf>> and
C<L</sv_catpvf_mg>>.

=over 3

 void  sv_vcatpvf(SV * const sv, const char * const pat,
                  va_list * const args)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_vcatpvfn>

=item C<sv_vcatpvfn_flags>
X<sv_vcatpvfn>X<sv_vcatpvfn_flags>

These process their arguments like C<L<vsprintf(3)>> and append the formatted output
to an SV.  They use an array of SVs if the C-style variable argument list is
missing (C<NULL>). Argument reordering (using format specifiers like C<%2$d> or
C<%*2$d>) is supported only when using an array of SVs; using a C-style
C<va_list> argument list with a format string that uses argument reordering
will yield an exception.

When running with taint checks enabled, they indicate via C<maybe_tainted> if
results are untrustworthy (often due to the use of locales).

They assume that C<pat> has the same utf8-ness as C<sv>.  It's the caller's
responsibility to ensure that this is so.

They differ in that C<sv_vcatpvfn_flags> has a C<flags> parameter in which you
can set or clear the C<SV_GMAGIC> and/or S<SV_SMAGIC> flags, to specify which
magic to handle or not handle; whereas plain C<sv_vcatpvfn> always specifies
both 'get' and 'set' magic.

They are usually used via one of the frontends L</C<sv_vcatpvf>> and
L</C<sv_vcatpvf_mg>>.

=over 3

 void  sv_vcatpvfn      (SV * const sv, const char * const pat,
                         const STRLEN patlen, va_list * const args,
                         SV ** const svargs, const Size_t sv_count,
                         bool * const maybe_tainted)
 void  sv_vcatpvfn_flags(SV * const sv, const char * const pat,
                         const STRLEN patlen, va_list * const args,
                         SV ** const svargs, const Size_t sv_count,
                         bool * const maybe_tainted,
                         const U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvVOK>
X<SvVOK>

Returns a boolean indicating whether the SV contains a v-string.

=over 3

 bool  SvVOK(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_vsetpvf>

=item C<sv_vsetpvf_mg>
X<sv_vsetpvf>X<sv_vsetpvf_mg>

These work like C<L</sv_vcatpvf>> but copy the text into the SV instead of
appending it.

They differ only in that C<sv_vsetpvf_mg> performs 'set' magic;
C<sv_vsetpvf> skips all magic.

They are usually used via their frontends, C<L</sv_setpvf>> and
C<L</sv_setpvf_mg>>.

B<The UTF-8 flag is not changed by these functions.>

=over 3

 void  sv_vsetpvf(SV * const sv, const char * const pat,
                  va_list * const args)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_vsetpvfn>
X<sv_vsetpvfn>

Works like C<sv_vcatpvfn> but copies the text into the SV instead of
appending it.

B<The UTF-8 flag is not changed by this function.>

Usually used via one of its frontends L</C<sv_vsetpvf>> and
L</C<sv_vsetpvf_mg>>.

=over 3

 void  sv_vsetpvfn(SV * const sv, const char * const pat,
                   const STRLEN patlen, va_list * const args,
