#define PERL_ARGS_ASSERT_GROK_BIN_OCT_HEX       \
        assert(start); assert(len_p); assert(flags)

PERL_CALLCONV UV
Perl_grok_hex(pTHX_ const char *start, STRLEN *len_p, I32 *flags, NV *result);
#define PERL_ARGS_ASSERT_GROK_HEX               \
        assert(start); assert(len_p); assert(flags)

PERL_CALLCONV int
Perl_grok_infnan(pTHX_ const char **sp, const char *send);
#define PERL_ARGS_ASSERT_GROK_INFNAN            \
        assert(sp); assert(send)

PERL_CALLCONV int
Perl_grok_number(pTHX_ const char *pv, STRLEN len, UV *valuep);
#define PERL_ARGS_ASSERT_GROK_NUMBER            \
        assert(pv)

PERL_CALLCONV int
Perl_grok_number_flags(pTHX_ const char *pv, STRLEN len, UV *valuep, U32 flags);
#define PERL_ARGS_ASSERT_GROK_NUMBER_FLAGS      \
        assert(pv)

PERL_CALLCONV bool
Perl_grok_numeric_radix(pTHX_ const char **sp, const char *send)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GROK_NUMERIC_RADIX     \
        assert(sp); assert(send)

PERL_CALLCONV UV
Perl_grok_oct(pTHX_ const char *start, STRLEN *len_p, I32 *flags, NV *result);
#define PERL_ARGS_ASSERT_GROK_OCT               \
        assert(start); assert(len_p); assert(flags)

PERL_CALLCONV GV *
Perl_gv_add_by_type(pTHX_ GV *gv, svtype type);
#define PERL_ARGS_ASSERT_GV_ADD_BY_TYPE

/* PERL_CALLCONV GV *
gv_autoload4(pTHX_ HV *stash, const char *name, STRLEN len, I32 method)
        __attribute__warn_unused_result__; */

PERL_CALLCONV GV *
Perl_gv_autoload_pv(pTHX_ HV *stash, const char *namepv, U32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GV_AUTOLOAD_PV         \
        assert(namepv)

PERL_CALLCONV GV *
Perl_gv_autoload_pvn(pTHX_ HV *stash, const char *name, STRLEN len, U32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GV_AUTOLOAD_PVN        \
        assert(name)

PERL_CALLCONV GV *
Perl_gv_autoload_sv(pTHX_ HV *stash, SV *namesv, U32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GV_AUTOLOAD_SV         \
        assert(namesv)

PERL_CALLCONV void
Perl_gv_check(pTHX_ HV *stash);
#define PERL_ARGS_ASSERT_GV_CHECK               \
        assert(stash)

PERL_CALLCONV SV *
Perl_gv_const_sv(pTHX_ GV *gv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GV_CONST_SV            \
        assert(gv)

PERL_CALLCONV void
Perl_gv_dump(pTHX_ GV *gv);
#define PERL_ARGS_ASSERT_GV_DUMP

PERL_CALLCONV void
Perl_gv_efullname4(pTHX_ SV *sv, const GV *gv, const char *prefix, bool keepmain);
#define PERL_ARGS_ASSERT_GV_EFULLNAME4          \
        assert(sv); assert(gv)

PERL_CALLCONV GV *
Perl_gv_fetchfile(pTHX_ const char *name);
#define PERL_ARGS_ASSERT_GV_FETCHFILE           \
        assert(name)

PERL_CALLCONV GV *
Perl_gv_fetchfile_flags(pTHX_ const char * const name, const STRLEN len, const U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHFILE_FLAGS     \
        assert(name)

/* PERL_CALLCONV GV *
gv_fetchmeth(pTHX_ HV *stash, const char *name, STRLEN len, I32 level); */

/* PERL_CALLCONV GV *
gv_fetchmeth_autoload(pTHX_ HV *stash, const char *name, STRLEN len, I32 level); */

PERL_CALLCONV GV *
Perl_gv_fetchmeth_pv(pTHX_ HV *stash, const char *name, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PV        \
        assert(name)

PERL_CALLCONV GV *
Perl_gv_fetchmeth_pv_autoload(pTHX_ HV *stash, const char *name, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PV_AUTOLOAD \
        assert(name)

PERL_CALLCONV GV *
Perl_gv_fetchmeth_pvn(pTHX_ HV *stash, const char *name, STRLEN len, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PVN       \
        assert(name)

PERL_CALLCONV GV *
Perl_gv_fetchmeth_pvn_autoload(pTHX_ HV *stash, const char *name, STRLEN len, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PVN_AUTOLOAD \
        assert(name)

PERL_CALLCONV GV *
Perl_gv_fetchmeth_sv(pTHX_ HV *stash, SV *namesv, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_SV        \
        assert(namesv)

PERL_CALLCONV GV *
Perl_gv_fetchmeth_sv_autoload(pTHX_ HV *stash, SV *namesv, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_SV_AUTOLOAD \
        assert(namesv)

PERL_CALLCONV GV *
Perl_gv_fetchmethod_autoload(pTHX_ HV *stash, const char *name, I32 autoload);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_AUTOLOAD \
        assert(stash); assert(name)

PERL_CALLCONV GV *
Perl_gv_fetchmethod_pv_flags(pTHX_ HV *stash, const char *name, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_PV_FLAGS \
        assert(stash); assert(name)

PERL_CALLCONV GV *
Perl_gv_fetchmethod_pvn_flags(pTHX_ HV *stash, const char *name, const STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_PVN_FLAGS \
        assert(stash); assert(name)

PERL_CALLCONV GV *
Perl_gv_fetchmethod_sv_flags(pTHX_ HV *stash, SV *namesv, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_SV_FLAGS \
        assert(stash); assert(namesv)

PERL_CALLCONV GV *
Perl_gv_fetchpv(pTHX_ const char *nambeg, I32 flags, const svtype sv_type);
#define PERL_ARGS_ASSERT_GV_FETCHPV             \
        assert(nambeg)

PERL_CALLCONV GV *
Perl_gv_fetchpvn_flags(pTHX_ const char *name, STRLEN len, I32 flags, const svtype sv_type);
#define PERL_ARGS_ASSERT_GV_FETCHPVN_FLAGS      \
        assert(name)

PERL_CALLCONV GV *
Perl_gv_fetchsv(pTHX_ SV *name, I32 flags, const svtype sv_type);
#define PERL_ARGS_ASSERT_GV_FETCHSV             \
        assert(name)

PERL_CALLCONV void
Perl_gv_fullname4(pTHX_ SV *sv, const GV *gv, const char *prefix, bool keepmain);
#define PERL_ARGS_ASSERT_GV_FULLNAME4           \
        assert(sv); assert(gv)

PERL_CALLCONV CV *
Perl_gv_handler(pTHX_ HV *stash, I32 id)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GV_HANDLER

/* PERL_CALLCONV void
gv_init(pTHX_ GV *gv, HV *stash, const char *name, STRLEN len, int multi); */

PERL_CALLCONV void
Perl_gv_init_pv(pTHX_ GV *gv, HV *stash, const char *name, U32 flags);
#define PERL_ARGS_ASSERT_GV_INIT_PV             \
        assert(gv); assert(name)

PERL_CALLCONV void
Perl_gv_init_pvn(pTHX_ GV *gv, HV *stash, const char *name, STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_GV_INIT_PVN            \
        assert(gv); assert(name)

PERL_CALLCONV void
Perl_gv_init_sv(pTHX_ GV *gv, HV *stash, SV *namesv, U32 flags);
#define PERL_ARGS_ASSERT_GV_INIT_SV             \
        assert(gv); assert(namesv)

PERL_CALLCONV void
Perl_gv_name_set(pTHX_ GV *gv, const char *name, U32 len, U32 flags);
#define PERL_ARGS_ASSERT_GV_NAME_SET            \
        assert(gv); assert(name)

PERL_CALLCONV GV *
Perl_gv_override(pTHX_ const char * const name, const STRLEN len);
#define PERL_ARGS_ASSERT_GV_OVERRIDE            \
        assert(name)

PERL_CALLCONV void
Perl_gv_setref(pTHX_ SV * const dsv, SV * const ssv)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_GV_SETREF              \
        assert(dsv); assert(ssv)

PERL_CALLCONV HV *
Perl_gv_stashpv(pTHX_ const char *name, I32 flags);
#define PERL_ARGS_ASSERT_GV_STASHPV             \
        assert(name)

PERL_CALLCONV HV *
Perl_gv_stashpvn(pTHX_ const char *name, U32 namelen, I32 flags);
#define PERL_ARGS_ASSERT_GV_STASHPVN            \
        assert(name)

PERL_CALLCONV HV *
Perl_gv_stashsv(pTHX_ SV *sv, I32 flags);
#define PERL_ARGS_ASSERT_GV_STASHSV             \
        assert(sv)

PERL_CALLCONV void
Perl_gv_try_downgrade(pTHX_ GV *gv);
#define PERL_ARGS_ASSERT_GV_TRY_DOWNGRADE       \
        assert(gv)

PERL_CALLCONV struct xpvhv_aux *
Perl_hv_auxalloc(pTHX_ HV *hv)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_HV_AUXALLOC            \
        assert(hv)

PERL_CALLCONV AV **
Perl_hv_backreferences_p(pTHX_ HV *hv)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_HV_BACKREFERENCES_P    \
        assert(hv)

PERL_CALLCONV SV *
Perl_hv_bucket_ratio(pTHX_ HV *hv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_BUCKET_RATIO        \
        assert(hv)

PERL_CALLCONV void
Perl_hv_clear(pTHX_ HV *hv);
#define PERL_ARGS_ASSERT_HV_CLEAR

PERL_CALLCONV void
Perl_hv_clear_placeholders(pTHX_ HV *hv);
#define PERL_ARGS_ASSERT_HV_CLEAR_PLACEHOLDERS  \
        assert(hv)

PERL_CALLCONV void *
Perl_hv_common(pTHX_ HV *hv, SV *keysv, const char *key, STRLEN klen, int flags, int action, SV *val, U32 hash);
#define PERL_ARGS_ASSERT_HV_COMMON

PERL_CALLCONV void *
Perl_hv_common_key_len(pTHX_ HV *hv, const char *key, I32 klen_i32, const int action, SV *val, const U32 hash);
#define PERL_ARGS_ASSERT_HV_COMMON_KEY_LEN      \
        assert(key)

PERL_CALLCONV HV *
Perl_hv_copy_hints_hv(pTHX_ HV * const ohv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_COPY_HINTS_HV

PERL_CALLCONV void
Perl_hv_delayfree_ent(pTHX_ HV *notused, HE *entry);
#define PERL_ARGS_ASSERT_HV_DELAYFREE_ENT

PERL_CALLCONV void
Perl_hv_dump(pTHX_ HV *hv);
#define PERL_ARGS_ASSERT_HV_DUMP

PERL_CALLCONV HE **
Perl_hv_eiter_p(pTHX_ HV *hv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_EITER_P             \
        assert(hv)

PERL_CALLCONV void
Perl_hv_eiter_set(pTHX_ HV *hv, HE *eiter);
#define PERL_ARGS_ASSERT_HV_EITER_SET           \
        assert(hv)

PERL_CALLCONV void
Perl_hv_ename_add(pTHX_ HV *hv, const char *name, U32 len, U32 flags)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_HV_ENAME_ADD           \
        assert(hv); assert(name)

PERL_CALLCONV void
Perl_hv_ename_delete(pTHX_ HV *hv, const char *name, U32 len, U32 flags)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_HV_ENAME_DELETE        \
        assert(hv); assert(name)

PERL_CALLCONV STRLEN
Perl_hv_fill(pTHX_ HV * const hv);
#define PERL_ARGS_ASSERT_HV_FILL                \
        assert(hv)

PERL_CALLCONV void
Perl_hv_free_ent(pTHX_ HV *notused, HE *entry);
#define PERL_ARGS_ASSERT_HV_FREE_ENT

PERL_CALLCONV I32
Perl_hv_iterinit(pTHX_ HV *hv);
#define PERL_ARGS_ASSERT_HV_ITERINIT            \
        assert(hv)

PERL_CALLCONV char *
Perl_hv_iterkey(pTHX_ HE *entry, I32 *retlen)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_ITERKEY             \
        assert(entry); assert(retlen)

PERL_CALLCONV SV *
Perl_hv_iterkeysv(pTHX_ HE *entry)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_ITERKEYSV           \
        assert(entry)

PERL_CALLCONV HE *
Perl_hv_iternext_flags(pTHX_ HV *hv, I32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_ITERNEXT_FLAGS      \
        assert(hv)

PERL_CALLCONV SV *
Perl_hv_iternextsv(pTHX_ HV *hv, char **key, I32 *retlen)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_ITERNEXTSV          \
        assert(hv); assert(key); assert(retlen)

PERL_CALLCONV SV *
Perl_hv_iterval(pTHX_ HV *hv, HE *entry)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_ITERVAL             \
        assert(hv); assert(entry)

PERL_CALLCONV void
Perl_hv_ksplit(pTHX_ HV *hv, IV newmax);
#define PERL_ARGS_ASSERT_HV_KSPLIT              \
        assert(hv)

PERL_CALLCONV void
Perl_hv_name_set(pTHX_ HV *hv, const char *name, U32 len, U32 flags);
#define PERL_ARGS_ASSERT_HV_NAME_SET            \
        assert(hv)

PERL_CALLCONV I32
Perl_hv_placeholders_get(pTHX_ const HV *hv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_GET    \
        assert(hv)

PERL_CALLCONV SSize_t *
Perl_hv_placeholders_p(pTHX_ HV *hv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_P      \
        assert(hv)

PERL_CALLCONV void
Perl_hv_placeholders_set(pTHX_ HV *hv, I32 ph);
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_SET    \
        assert(hv)

PERL_CALLCONV void
Perl_hv_pushkv(pTHX_ HV *hv, U32 flags)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_HV_PUSHKV              \
        assert(hv)

PERL_CALLCONV void
Perl_hv_rand_set(pTHX_ HV *hv, U32 new_xhv_rand);
#define PERL_ARGS_ASSERT_HV_RAND_SET            \
        assert(hv)

PERL_CALLCONV I32 *
Perl_hv_riter_p(pTHX_ HV *hv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_RITER_P             \
        assert(hv)

PERL_CALLCONV void
Perl_hv_riter_set(pTHX_ HV *hv, I32 riter);
#define PERL_ARGS_ASSERT_HV_RITER_SET           \
        assert(hv)

PERL_CALLCONV SV *
Perl_hv_scalar(pTHX_ HV *hv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_HV_SCALAR              \
        assert(hv)

/* PERL_CALLCONV SV **
hv_stores(pTHX_ HV *hv, const char * const key, SV *val); */

/* PERL_CALLCONV void
hv_undef(pTHX_ HV *hv); */

PERL_CALLCONV void
Perl_hv_undef_flags(pTHX_ HV *hv, U32 flags);
#define PERL_ARGS_ASSERT_HV_UNDEF_FLAGS

/* PERL_CALLCONV I32
ibcmp(pTHX_ const char *a, const char *b, I32 len)
        __attribute__warn_unused_result__
        __attribute__pure__; */

/* PERL_CALLCONV I32
ibcmp_locale(pTHX_ const char *a, const char *b, I32 len)
        __attribute__warn_unused_result__
        __attribute__pure__; */

/* PERL_CALLCONV I32
ibcmp_utf8(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2); */

PERL_CALLCONV STRLEN
Perl_infix_plugin_standard(pTHX_ char *operator_ptr, STRLEN operator_len, struct Perl_custom_infix **def);
#define PERL_ARGS_ASSERT_INFIX_PLUGIN_STANDARD  \
        assert(operator_ptr); assert(def)

PERL_CALLCONV void
Perl_init_argv_symbols(pTHX_ int argc, char **argv)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_INIT_ARGV_SYMBOLS      \
        assert(argv)

PERL_CALLCONV void
Perl_init_constants(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_INIT_CONSTANTS

PERL_CALLCONV void
Perl_init_dbargs(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_INIT_DBARGS

PERL_CALLCONV void
Perl_init_debugger(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_INIT_DEBUGGER

PERL_CALLCONV int
Perl_init_i18nl10n(pTHX_ int printwarn);
#define PERL_ARGS_ASSERT_INIT_I18NL10N

PERL_CALLCONV void
Perl_init_named_cv(pTHX_ CV *cv, OP *nameop);
#define PERL_ARGS_ASSERT_INIT_NAMED_CV          \
        assert(cv); assert(nameop)

PERL_CALLCONV void
Perl_init_stacks(pTHX);
#define PERL_ARGS_ASSERT_INIT_STACKS

PERL_CALLCONV void
Perl_init_tm(pTHX_ struct tm *ptm);
#define PERL_ARGS_ASSERT_INIT_TM                \
        assert(ptm)

PERL_CALLCONV void
Perl_init_uniprops(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_INIT_UNIPROPS

PERL_CALLCONV U32
Perl_intro_my(pTHX);
#define PERL_ARGS_ASSERT_INTRO_MY

PERL_CALLCONV OP *
Perl_invert(pTHX_ OP *cmd)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_INVERT

PERL_CALLCONV void
Perl_invmap_dump(pTHX_ SV *invlist, UV *map)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_INVMAP_DUMP            \
        assert(invlist); assert(map)

PERL_CALLCONV bool
Perl_io_close(pTHX_ IO *io, GV *gv, bool is_explicit, bool warn_on_fail)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_IO_CLOSE               \
        assert(io)

/* PERL_CALLCONV bool
is_ascii_string(const U8 * const s, STRLEN len)
        __attribute__warn_unused_result__
        __attribute__pure__; */

/* PERL_CALLCONV bool
is_c9strict_utf8_string(const U8 *s, STRLEN len)
        __attribute__warn_unused_result__; */

/* PERL_CALLCONV bool
is_c9strict_utf8_string_loc(const U8 *s, STRLEN len, const U8 **ep); */

/* PERL_CALLCONV bool
is_invariant_string(const U8 * const s, STRLEN len)
        __attribute__warn_unused_result__
        __attribute__pure__; */

PERL_CALLCONV I32
Perl_is_lvalue_sub(pTHX)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_IS_LVALUE_SUB

/* PERL_CALLCONV bool
is_strict_utf8_string(const U8 *s, STRLEN len)
        __attribute__warn_unused_result__; */

/* PERL_CALLCONV bool
is_strict_utf8_string_loc(const U8 *s, STRLEN len, const U8 **ep); */

PERL_CALLCONV Size_t
Perl_is_utf8_FF_helper_(const U8 * const s0, const U8 * const e, const bool require_partial)
        __attribute__warn_unused_result__
        __attribute__pure__;
#define PERL_ARGS_ASSERT_IS_UTF8_FF_HELPER_     \
        assert(s0); assert(e)

PERL_CALLCONV STRLEN
Perl_is_utf8_char_helper_(const U8 * const s, const U8 *e, const U32 flags)
        __attribute__warn_unused_result__
        __attribute__pure__;
#define PERL_ARGS_ASSERT_IS_UTF8_CHAR_HELPER_   \
        assert(s); assert(e)

/* PERL_CALLCONV bool
is_utf8_fixed_width_buf_flags(const U8 * const s, STRLEN len, const U32 flags); */

/* PERL_CALLCONV bool
is_utf8_fixed_width_buf_loc_flags(const U8 * const s, STRLEN len, const U8 **ep, const U32 flags); */

/* PERL_CALLCONV bool
is_utf8_invariant_string(const U8 * const s, STRLEN len)
        __attribute__warn_unused_result__; */

/* PERL_CALLCONV bool
is_utf8_string(const U8 *s, STRLEN len)
        __attribute__warn_unused_result__; */

/* PERL_CALLCONV bool
is_utf8_string_loc_flags(const U8 *s, STRLEN len, const U8 **ep, const U32 flags); */

/* PERL_CALLCONV bool
is_utf8_valid_partial_char(const U8 * const s0, const U8 * const e)
        __attribute__warn_unused_result__
        __attribute__pure__; */

PERL_CALLCONV bool
Perl_isinfnan(NV nv)
        __attribute__warn_unused_result__
        __attribute__pure__;
#define PERL_ARGS_ASSERT_ISINFNAN

PERL_CALLCONV bool
Perl_isinfnansv(pTHX_ SV *sv)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_ISINFNANSV             \
        assert(sv)

PERL_CALLCONV OP *
Perl_jmaybe(pTHX_ OP *o)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_JMAYBE                 \
        assert(o)

PERL_CALLCONV I32
Perl_keyword(pTHX_ const char *name, I32 len, bool all_keywords)
        __attribute__warn_unused_result__
        __attribute__pure__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_KEYWORD                \
        assert(name)

PERL_CALLCONV int
Perl_keyword_plugin_standard(pTHX_ char *keyword_ptr, STRLEN keyword_len, OP **op_ptr);
#define PERL_ARGS_ASSERT_KEYWORD_PLUGIN_STANDARD \
        assert(keyword_ptr); assert(op_ptr)

PERL_CALLCONV void
Perl_leave_adjust_stacks(pTHX_ SV **from_sp, SV **to_sp, U8 gimme, int filter);
#define PERL_ARGS_ASSERT_LEAVE_ADJUST_STACKS    \
        assert(from_sp); assert(to_sp)

PERL_CALLCONV void
Perl_leave_scope(pTHX_ I32 base);
#define PERL_ARGS_ASSERT_LEAVE_SCOPE

PERL_CALLCONV bool
Perl_lex_bufutf8(pTHX);
#define PERL_ARGS_ASSERT_LEX_BUFUTF8

PERL_CALLCONV void
Perl_lex_discard_to(pTHX_ char *ptr);
#define PERL_ARGS_ASSERT_LEX_DISCARD_TO         \
        assert(ptr)

PERL_CALLCONV char *
Perl_lex_grow_linestr(pTHX_ STRLEN len);
#define PERL_ARGS_ASSERT_LEX_GROW_LINESTR

PERL_CALLCONV bool
Perl_lex_next_chunk(pTHX_ U32 flags);
#define PERL_ARGS_ASSERT_LEX_NEXT_CHUNK

PERL_CALLCONV I32
Perl_lex_peek_unichar(pTHX_ U32 flags);
#define PERL_ARGS_ASSERT_LEX_PEEK_UNICHAR

PERL_CALLCONV void
Perl_lex_read_space(pTHX_ U32 flags);
#define PERL_ARGS_ASSERT_LEX_READ_SPACE

PERL_CALLCONV void
Perl_lex_read_to(pTHX_ char *ptr);
#define PERL_ARGS_ASSERT_LEX_READ_TO            \
        assert(ptr)

PERL_CALLCONV I32
Perl_lex_read_unichar(pTHX_ U32 flags);
#define PERL_ARGS_ASSERT_LEX_READ_UNICHAR

PERL_CALLCONV void
Perl_lex_start(pTHX_ SV *line, PerlIO *rsfp, U32 flags);
#define PERL_ARGS_ASSERT_LEX_START

PERL_CALLCONV void
Perl_lex_stuff_pv(pTHX_ const char *pv, U32 flags);
#define PERL_ARGS_ASSERT_LEX_STUFF_PV           \
        assert(pv)

PERL_CALLCONV void
Perl_lex_stuff_pvn(pTHX_ const char *pv, STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_LEX_STUFF_PVN          \
        assert(pv)

PERL_CALLCONV void
Perl_lex_stuff_sv(pTHX_ SV *sv, U32 flags);
#define PERL_ARGS_ASSERT_LEX_STUFF_SV           \
        assert(sv)

PERL_CALLCONV void
Perl_lex_unstuff(pTHX_ char *ptr);
#define PERL_ARGS_ASSERT_LEX_UNSTUFF            \
        assert(ptr)

PERL_CALLCONV OP *
Perl_list(pTHX_ OP *o)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_LIST

PERL_CALLCONV HV *
Perl_load_charnames(pTHX_ SV *char_name, const char *context, const STRLEN context_len, const char **error_msg)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_LOAD_CHARNAMES         \
        assert(char_name); assert(context); assert(error_msg)

PERL_CALLCONV void
Perl_load_module(pTHX_ U32 flags, SV *name, SV *ver, ...);
#define PERL_ARGS_ASSERT_LOAD_MODULE            \
        assert(name)

PERL_CALLCONV_NO_RET void
Perl_locale_panic(const char *msg, const line_t immediate_caller_line, const char * const higher_caller_file, const line_t higher_caller_line)
        __attribute__noreturn__;
#define PERL_ARGS_ASSERT_LOCALE_PANIC           \
        assert(msg); assert(higher_caller_file)

PERL_CALLCONV OP *
Perl_localize(pTHX_ OP *o, I32 lex)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_LOCALIZE               \
        assert(o)

PERL_CALLCONV I32
Perl_looks_like_number(pTHX_ SV * const sv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_LOOKS_LIKE_NUMBER      \
        assert(sv)

PERL_CALLCONV int
Perl_magic_clear_all_env(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_CLEAR_ALL_ENV    \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_cleararylen_p(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_CLEARARYLEN_P    \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_clearenv(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_CLEARENV         \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_clearhint(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_CLEARHINT        \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_clearhints(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_CLEARHINTS       \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_clearhook(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_CLEARHOOK        \
        assert(mg)

PERL_CALLCONV int
Perl_magic_clearhookall(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_CLEARHOOKALL     \
        assert(mg)

PERL_CALLCONV int
Perl_magic_clearisa(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_CLEARISA         \
        assert(mg)

PERL_CALLCONV int
Perl_magic_clearpack(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_CLEARPACK        \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_clearsig(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_CLEARSIG         \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_copycallchecker(pTHX_ SV *sv, MAGIC *mg, SV *nsv, const char *name, I32 namlen)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_COPYCALLCHECKER  \
        assert(sv); assert(mg); assert(nsv)

PERL_CALLCONV void
Perl_magic_dump(pTHX_ const MAGIC *mg);
#define PERL_ARGS_ASSERT_MAGIC_DUMP

PERL_CALLCONV int
Perl_magic_existspack(pTHX_ SV *sv, const MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_EXISTSPACK       \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_freearylen_p(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_FREEARYLEN_P     \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_freedestruct(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_FREEDESTRUCT     \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_freemglob(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_FREEMGLOB        \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_freeovrld(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_FREEOVRLD        \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_freeutf8(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_FREEUTF8         \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_get(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_GET              \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_getarylen(pTHX_ SV *sv, const MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_GETARYLEN        \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_getdebugvar(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_GETDEBUGVAR      \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_getdefelem(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_GETDEFELEM       \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_getnkeys(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_GETNKEYS         \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_getpack(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_GETPACK          \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_getpos(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_GETPOS           \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_getsig(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_GETSIG           \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_getsubstr(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_GETSUBSTR        \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_gettaint(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_GETTAINT         \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_getuvar(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_GETUVAR          \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_getvec(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_GETVEC           \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_killbackrefs(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_KILLBACKREFS     \
        assert(sv); assert(mg)

PERL_CALLCONV SV *
Perl_magic_methcall(pTHX_ SV *sv, const MAGIC *mg, SV *meth, U32 flags, U32 argc, ...)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_METHCALL         \
        assert(sv); assert(mg); assert(meth)

PERL_CALLCONV int
Perl_magic_nextpack(pTHX_ SV *sv, MAGIC *mg, SV *key)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_NEXTPACK         \
        assert(sv); assert(mg); assert(key)

PERL_CALLCONV U32
Perl_magic_regdata_cnt(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_REGDATA_CNT      \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_regdatum_get(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_REGDATUM_GET     \
        assert(sv); assert(mg)

PERL_CALLCONV SV *
Perl_magic_scalarpack(pTHX_ HV *hv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SCALARPACK       \
        assert(hv); assert(mg)

PERL_CALLCONV int
Perl_magic_set(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SET              \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_set_all_env(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SET_ALL_ENV      \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setarylen(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETARYLEN        \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setdbline(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETDBLINE        \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setdebugvar(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETDEBUGVAR      \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setdefelem(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETDEFELEM       \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setenv(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETENV           \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_sethint(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETHINT          \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_sethook(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETHOOK          \
        assert(mg)

PERL_CALLCONV int
Perl_magic_sethookall(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETHOOKALL       \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setisa(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETISA           \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setlvref(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETLVREF         \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setmglob(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETMGLOB         \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setnkeys(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETNKEYS         \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setnonelem(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETNONELEM       \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setpack(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_MAGIC_SETPACK          \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setpos(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
