          };
          eval {
              $Val = sub {
                  # Return value
                  my ($hkey) = @_;
                  return $hkey->{ORACLE_HOME} || '';
              };
              $Keys = sub {
                  # Return list of sub-folder keys
                  my ($hkey) = @_;
                  # MAC: %$hkey and related method calls don't work under
                  #      perl5db, so don't try single stepping through here
                  return map {m:/$: ? $hkey->{$_} : ()} keys %$hkey;
              };
          } if $hkey;
      }

      # Win32::Registry imports some symbols into main::
      # this is not commonly wanted, so try this as a last resort
      # MAC: it is available under mingw and might be available under cygwin
      #      If cygwin doesn't have it, move the rest inside the other if block
      eval {
          require Win32::Registry;
          $main::HKEY_LOCAL_MACHINE->Open('SOFTWARE\\ORACLE', $hkey);
          my $dummy = $main::HKEY_LOCAL_MACHINE; # avoid single use complaint
          eval {
             my $hval;
             $hkey->GetValues($hval);
             $default_home = $hval->{ORACLE_HOME}[2] || '';
          };
          $Val = sub {
              # Return value
              my ($hkey) = @_;
              my $hval;
              $hkey->GetValues($hval);
              return $hval->{ORACLE_HOME}[2] || '';
          };
          $Keys = sub {
              # Return list of sub-folder keys
              my ($hkey) = @_;
              my @hkey;
              $hkey->GetKeys(\@hkey);
              @hkey = map { $hkey->Open($_, $_); $_ } @hkey;
              return @hkey;
          };
      } unless $req_ok;

      # Workaround Win32::TieRegistry FETCH error during global destruction.
      undef $Win32::TieRegistry::Registry if $Win32::TieRegistry::Registry;

      # Look for ORACLE_HOME in all ORACLE sub-folders, use last one found
      #     before 8.1.5, there should be only one
      eval {
          my ($oh1, %oh);
          my @hkey = ($hkey);
          # JLU: December 5, 2002: if the "default" home is set and has
          # an OCI directory, then use it.
          if ($default_home && -d $default_home && -d $default_home . "/oci") {
             $oh = $default_home;
          } else {
             # use previous logic if default home doesn't have OCI
             # directory
             while (@hkey) {
                $hkey = shift @hkey;
              $oh   = $oh1, $oh{$oh1} = 1
                  if ($oh1 = &$Val($hkey)) && -d $oh1;
              push @hkey, &$Keys($hkey);
             }
             if (1 < keys %oh) {
                # JLU: 8/21/01 Oracle's default home is the first one in
                # the path, at least with 8i
                print "\n\007Multiple Oracle homes: ", join(" ", sort keys %oh), "\n\n";
                my @path = split(";", $ENV{PATH});
                my $dir;
                foreach $dir (@path) {
                   # the path will be c:\path\to\home\bin, so remove \bin if it's there.
                   $dir =~ s/\\bin$//;
                   if (defined($oh{$dir})) {
                      print "$dir is first in the PATH, so we'll use that as Oracle's default home.\n\n";
                      $oh = $dir;
                      last;
                   }
                }
             }
          }
      } if defined $Keys;
  }

  $oh =~ s:\\:/:g if $oh;
  return $oh
}



sub read_sysliblist {
    my $syslibs = (-f "$OH/lib/sysliblist")
        ? read_file("$OH/lib/sysliblist")
        : (-f "$OH/rdbms/lib/sysliblist") ? read_file("$OH/rdbms/lib/sysliblist") : '';
    if ($^O eq "hpux") {
       $syslibs =~ s/-l:lib(\w+).(sl|a)\b/-l$1/g;
       $syslibs =~ s/\s*-ldld\b//g;
       $linkwith =~ m/-lcl\b/ or
           $syslibs =~ s/\s*-lcl\b//g;
    }
    if (lc(@Config{qw(myuname)}) =~ /debian/) {
        $syslibs .= " -Wl,--no-as-needed -lnnz12 -lons -lclntshcore -lipc1 -lmql1";
    }
    return $syslibs;
}


sub perl_is_64bit {
    return defined $Config{use64bitall} ;
}
sub ora_libdir {
    my $libdir = 'lib' ;
    if ( $client_version >= 9 ) {
        $libdir = 'lib32' if ! perl_is_64bit() and -d "$OH/lib32";
        $libdir = 'lib/64' if perl_is_64bit() and -d "$OH/lib/64";
           # Solaris OIC 12+ from pkg
    }
    else {
        $libdir = 'lib64' if   perl_is_64bit() and -d "$OH/lib64";
    }

    return $libdir;
}

sub del_crtobj {
    my $orig = shift;
    my $verbose = shift || $::opt_v;
    my $str = $orig;
    # E.g. for changing the COMPOBJS line (and sometimes LDSTRING)
    # old: COMPOBJS=$(COMPOBJ)/crti.o $(COMPOBJ)/crt1.o $(COMPOBJ)/__fstd.o
    # new: COMPOBJS=$(COMPOBJ)/__fstd.o
    my @del;
    push @del, $1 while $str =~ s:([^\s=]*\bcrt[1in]\.o)\b::;
    if ($orig ne $str) {
        print "Deleted @del from link args.\n" if $verbose;
        print "del_crtobj: $orig\n          : $str\n@del\n" if $::opt_v;
    }
    return $str;
}


sub find_mkfile {

    my @mk_oci32 = (
            'rdbms/demo/demo_xe.mk',
        'rdbms/demo/demo_rdbms32.mk',
        'rdbms/demo/demo_rdbms.mk',
        'rdbms/lib/ins_rdbms.mk', #Oracle 11 full client
        'sdk/demo/demo.mk' #OIC .mk location
    );
    my @mk_oci64 = (
        'rdbms/demo/demo_xe.mk',
        'rdbms/lib/oracle.mk',
        'rdbms/demo/oracle.mk',
        'rdbms/demo/demo_rdbms.mk',
        'rdbms/demo/demo_rdbms64.mk',
        'rdbms/lib/ins_rdbms.mk', #Oracle 11 full client
    'sdk/demo/demo.mk'        # git issue 20 - path on mac os
    );
    my @mk_oci = perl_is_64bit() ? @mk_oci64 : @mk_oci32;

    # Add build.mk from /usr/share/oracle based on the oracle home location if
    # oracle home is under /usr/lib/oracle (Linux RPM install).
    # The 11g instant client only contains build.mk located in
    # /usr/share/oracle/
    push @mk_oci, "/usr/share/oracle/$1/demo.mk" if ($OH =~ m|^/usr/lib/oracle/(.*)|);

    my @mkplaces = ($::opt_p) ? (@mk_oci) : (@mk_oci);
    if ($::opt_m) {
        $::opt_m = cwd()."/$::opt_m" unless $::opt_m =~ m:^/:;
        die "-m $::opt_m: not found" unless -f $::opt_m;
        unshift @mkplaces, $::opt_m;
    }
    my $mkfile;
    for my $place (@mkplaces) {
        $place = "$OH/$place"
            unless $place =~ m:^[/\.]:; # abs or relative path
        next unless -f $place;
        $mkfile ||= $place; # use first one found
        print "Found $place\n";
    }
    unless ($^O eq 'MSWin32' || $^O eq 'VMS' || ($mkfile && -f $mkfile) || $::opt_F) {
        $::opt_l or return ($mkfile = undef);
        die qq{
        Unable to locate an oracle.mk or other suitable *.mk
        file in your Oracle installation.  (I looked in
        @mkplaces under $OH)

        The oracle.mk (or demo_rdbms.mk) file is part of the Oracle
        RDBMS product.  You need to build DBD::Oracle on a
        system which has one of these Oracle components installed.
        (Other *.mk files such as the env_*.mk files will not work.)
        Alternatively you can use Oracle Instant Client.

        In the unlikely event that a suitable *.mk file is installed
        somewhere non-standard you can specify where it is using the -m option:
                perl Makefile.PL -m /path/to/your.mk

        See the appropriate troubleshooting guide for your OS for more information and some alternatives.
        };
    }

    print "Using $mkfile\n";
    return $mkfile;
}


sub fetch_oci_macros {
    my $file = shift;

    # Read $file makefile, extract macro definitions from it
    # and store them in $MK, @MK and %MK.

    # Don't include the following definitions in the generated
    # makefile (note that %MK stills gets these values).
    my @edit = qw(
        SHELL CC CPP CFLAGS CCFLAGS OPTIMIZE ASFLAGS RCC LD LDFLAGS
        AR AS CHMOD ECHO EXE OBJS PERL OBJ_EXT LIB_EXT VERSION
    );
    my %edit; @edit{@edit} = ('$_ = ""') x @edit;

    $edit{ORA_NLS} = $edit{ORA_NLS33} = $edit{ORA_NLS32} = q{
        print "Deleting $_\n",
            "  because it is not already set in the environment\n",
            "  and it can cause ORA-01019 errors.\n";
        $_ = '';
    } unless $ENV{ORA_NLS} || $ENV{ORA_NLS33} || $ENV{ORA_NLS32}
        || 1; # Old problem? Let's try without it for a while

    $edit{COMPOBJS} = q{
        # Firstly a Solaris specific edit:
        $_ = del_crtobj($_) if $^O eq 'solaris';

        # Delete any object files in COMPOBJS that don't actually exist
        my $of;
        foreach $of (split(/=|\s+/)) {
            next if !$of or $of eq "COMPOBJS";
            my $obj = expand_mkvars($of,0,0);
            next if -e $obj;
            print "Deleting $of from COMPOBJS because $obj doesn't exist.\n";
            s:\Q$of::;
        }
    };

    # deal with (some subversions) of Oracle8.0.3's incompatible use of OBJ_EXT
    my $incompat_ext = ($MK{OBJ_EXT} && $MK{OBJ_EXT} !~ /^\./);
    warn "OBJ_EXT correction enabled ($MK{OBJ_EXT})\n" if $incompat_ext;
    # Don't include compiler options for these compilers
    my @ignore_def = qw( BUILD_CCC296 BUILD_ICC );
    my %ignore_def; @ignore_def{@ignore_def} = ('1') x @ignore_def;

    my $mkver = 0;
    my $lastline = '';
    my @lines = read_inc_file($file);
    for(1; $_ = shift(@lines); $lastline = $_){
        # Join split lines but retain backwack and newlines:
        $_ .= shift @lines while(m/\\[\r\n]+$/);
        chomp;
        push @MK, '' if $_ eq '' and $lastline ne ''; # squeeze multiple blank lines
        next unless $_;

        if ($incompat_ext) {
            s/\.(\$\(OBJ_EXT\))/$1/g;
            s/\.(\$\(LIB_EXT\))/$1/g;
        }
        # skip compiler options for undesirable compilers
        m/^ifdef (\w+)/ and do {
                if ($ignore_def{$1}) {
                        $_ = shift @lines until m/^endif/;
                        next;
                }
        };


        if (m!^([-\w/+.\$()\s]+)\s*:+\s*([^=]*)!) {     # skip targets
            my @tgts = split(/ /, $1);  # multiple target names in Oracle9i's demo_rdbms.mk
            for (@tgts) { $mk_target_deps{$_} = $2 || '' }
            my @rules;
            while (@lines && $lines[0] =~ m!^\t! && chomp $lines[0]) {
                my $tmp_line = shift @lines;
                while($tmp_line =~ m!\\$!) { # continuations!
                    $tmp_line =~ s/\s+\\$/ /;
                    $tmp_line .= shift @lines;
                    chomp($tmp_line);
                }
                push @rules, $tmp_line;
                #print "target @tgts => $mk_target_deps{$tgt} => @{$mk_target_rules{$tgt}}\n";
            }
            for (@tgts) { push @{ $mk_target_rules{$_} ||= [] }, @rules }
            next;
        }

        next if m!^\t!; # skip target build rules
        next if m/^\s*\.SUFFIXES/;

        unless($MK{mkver}) { # still want to get version number
            my $line = $_; $line =~ s/[\\\r\n]/ /g;
            $MK{mkver} = $mkver = $1
                if $line =~ m/\$Header:.*?\.mk.+(\d+\.\d+)/;
        }

        # We always store values into %MK before checking %edit
        # %edit can edit this in addition to $_ if needed.
        my $name;
        if (m/^\s*(\w+)\s*(\+?)=\s*/) {
            $name = $1;
            my $append = $2;
            my $value  = $';
            $value =~ s/^\@`/`/;
            if ($append) {
                my $expanded = expand_mkvars($value, 0, 1);
                print "Appending '$expanded' to $name\n" if $::opt_v;
                $value = $MK{$name} ? "$MK{$name} $expanded" : $expanded;
            }
            elsif ($MK{$name} && $MK{$name} ne $value) {
                print "$name macro redefined by Oracle\n from $MK{$name}\n   to $value\n"
                        if $::opt_d;
            }
            $MK{$name} = $value;
            $MK{$name} =~ s/^([^#]*)#.*/$1/; # remove comments

            if (exists $edit{$name}) {
                my $pre = $_;
                eval $edit{$name}; # execute code to edit $_
                print "Edit $name ($edit{$name}) failed: $@\n" if $@;
                if ($_ ne $pre and $::opt_v) {
                    $_ ? print "Edited $name definition\n from: $pre\n   to: $_\n"
                       : print "Deleted $name definition: $pre\n";
                }
            }
        }

        push(@MK, $_);
    }

    # --- now decide what to link with ---
    my $linkvia;

    if ($::opt_n) {
        $linkvia = "\$($::opt_n)" if $MK{$::opt_n};
        warn "Can't use '$::opt_n': not defined by .mk files\n"
                unless $linkvia;
    }

    # modern Oracle .mk files define OCISTATICLIBS and OCISHAREDLIBS
    if (!$linkvia && ($MK{OCISHAREDLIBS} || $MK{OCISTATICLIBS})) {
        $linkvia = '';
        if ($MK{OCISTATICLIBS} &&
                (  ($opts{LINKTYPE}||'') eq 'static'
                || "@ARGV" =~ m/\bLINKTYPE=static\b/
                || $::opt_c)
    ) {
            $linkvia .= '$(DEF_ON) '   if $MK{DEF_ON};
            $linkvia .= '$(SSCOREED) ' if $MK{SSCOREED};
            $linkvia .= '$(OCISTATICLIBS)';
        }
        else {
            $linkvia .= '$(SSDBED) '    if $MK{SSDBED};
            $linkvia .= '$(DEF_OPT) '   if $MK{DEF_OPT};
            if ($client_version_full =~ m/^8\.0\./ and $^O eq 'dec_osf' and $osvers >= 4.0) {
                $linkvia .= '$(SCOREPT) $(NAETAB) $(NAEDHS) $(LLIBRDBMS_CLT) $(LLIBMM) ';
                $linkvia .= '$(NETLIBS) $(CORELIBS) $(LLIBCOMMON) $(LLIBEPC) ';
                $need_ldlp_env = "LD_LIBRARY_PATH";
            }
            $linkvia .= '$(OCISHAREDLIBS)';
        }
    }

    $linkvia = '$(LIBCLNTSH)' if !$linkvia && $MK{LIBCLNTSH};

    # The oracle.mk file tends to define OCILDLIBS
    $linkvia = '$(OCILDLIBS)' if !$linkvia && $MK{OCILDLIBS};

    # Now we get into strange land of twisty turny macros
    if (!$linkvia && $MK{PROLDLIBS}) { # Oracle 7.3.x
        # XXX tweak for threaded perl? - use PROLLSsharedthread
        if ($MK{PROLDLIBS} =~ /thread/i && $MK{PROLLSshared}) {
            $linkvia = '$(PROLLSshared)';
        }
        else {
            $linkvia = '$(PROLDLIBS)';
        }
    }
    elsif (!$linkvia && int($mkver) == 1) {
        if ($MK{LLIBOCIC}) {
            $linkvia = '$(LLIBOCIC) $(TTLIBS)';
        } else {
            print "WARNING: Guessing what to link with.\n";
            $linkvia = '-locic $(TTLIBS)'; # XXX GUESS HACK
        }
    }
    elsif (!$linkvia && $MK{CCLIB}) { # Oracle XE
        $linkvia = '$(CCLIB)';
    }
    unless ($linkvia){
        die "ERROR parsing $file: Unable to determine what to link with.\n"
        ."Please send me copies of these files (one per mail message):\n@mkfiles\n";
    }
    $MK_TEXT = join("\n", @MK);
    return $linkvia;
}


sub read_inc_file {
    my $file = shift;
    my $fh;
    unless ($fh = new FileHandle "<$file") {
        # Workaround more oracle bungling (Oracle 7.3.2/Solaris x86)
        my $alt; ($alt = $file) =~ s/\.dk\.mk$/\.mk/;
        $fh = new FileHandle "<$alt";
        die "Unable to read $file: $!" unless $fh;
    }
    print "Reading $file\n";
    my @lines;
    push(@mkfiles, $file);
    while(<$fh>) {
        # soak up while looking for include directives
        push(@lines, $_), next
            unless /^\s*include\s+(.*?)\s*$/m;
        my $inc_file = $1;
        # deal with "include $(ORACLE_HOME)/..."
        # (can't use expand_mkvars() here)
        $inc_file =~ s/\$\((ORACLE_HOME|ORACLE_ROOT)\)/$ENV{$ORACLE_ENV}/og;
        push(@lines, read_inc_file($inc_file));
    }
    print "Read a total of ".@lines." lines from $file (including inclusions)\n" if $::opt_v;
    return @lines;
}


my %expand_shellescape;
sub expand_shellescape {
    my($orig, $level) = @_;
    my $cmd = $orig;
    my $debug = $::opt_d || $::opt_v;
    print "Evaluating `$orig`\n"
        if $debug && !$expand_shellescape{$orig};
    # ensure we have no $(...) vars left - strip out undefined ones:
    $cmd =~ s/\$[({](\w+)[})]/mkvar("$1", 1, 0, $level+1)/ge;
    print "  expanded `$cmd`\n" if $debug and $cmd ne $orig;
    my $result = `$cmd`;
    $result =~ s/\s+$/ /; # newlines etc to single space
    print "  returned '$result'\n"
        if $debug && !$expand_shellescape{$orig};
    $expand_shellescape{$orig} = $result;
    $result;
}

sub expand_mkvars {
    my ($string, $strip, $backtick, $level, $maxlevel) = @_;

    return if(!defined $string);

    $level ||= 1;
    local($_) = $string;
    print "$level Expanding $_\n" if $::opt_d;
    # handle whizzo AIX make feature used by Oracle
    s/\$[({] (\w+) \? ([^(]*?) : ([^(]*?) [})]/
        my ($vname, $vT, $vF) = ($1,$2,$3);
        $MK{$vname} = (mkvar($vname, 1, $backtick, $level+1)) ? $vT : $vF
    /xge; # can recurse
    s/\$[({] (\w+) [})]/
        mkvar("$1", $strip, $backtick, $level+1, $maxlevel)
    /xge; # can recurse
    s/`(.*?[^\\])`/expand_shellescape("$1", $level+1)/esg if $backtick; # can recurse
    s/\s*\\\n\s*/ /g; # merge continuations
    s/\s+/ /g; # shrink whitespace
    print "$level Expanded $string\n  to       $_\n\n" if $::opt_d and $_ ne $string;
    $_;
}


sub mkvar {
    my($var, $strip, $backtick, $level, $maxlevel) = @_;
    my  $default = $strip ? '' : "\$($var)";
    print "$level Variable: $var\n" if $::opt_d;
    return '$(LIBHOME)' if $var eq 'LIBHOME' && !$strip; # gets noisy
    return $ENV{$ORACLE_ENV} if $var eq 'ORACLE_HOME';
    my $val = $MK{$var};
    if (!defined $val and exists $ENV{$var}) {
        $val = $ENV{$var};
        print "Using value of $var from environment: $val\n"
                unless $var eq 'LD_LIBRARY_PATH';
    }
    return $default unless defined $val;
    if ($MK_expanding{$var}) {
        print "Definition of \$($var) includes \$($var).\n";
        return "\$($var)";
    }
    local($MK_expanding{$var}) = 1;
    return $val if $maxlevel && $level >= $maxlevel;
    return expand_mkvars($val, $strip, $backtick, $level+1, $maxlevel); # can recurse
}


sub read_file {
    my $file = shift;
    unless (open(ROL, "<$file")) {
        warn "WARNING: Unable to open $file: $!\n";
        return "";
    }
    my $text = join "", <ROL>;
    $text =~ s/\n+/ /g;
    close ROL;
    return $text;
}


sub find_bin{
    my $bin = shift;
    my $path_sep = $Config{path_sep};
    foreach (split(/\Q$path_sep/, $ENV{PATH})){
      return "$_/$bin" if -x "$_/$bin";
      {
        # let's try harder
        # see rt#84530 for why we don't go straight for it
        use filetest 'access';
        return "$_/$bin" if -x "$_/$bin";
      }
    }
    return undef;
}


sub find_headers {

    # compensate for case where final .0 isn't in the install directory name
    (my $client_version_trim = $client_version_full) =~ s/\.0$//;
    # for case where point is not in install directory name. OCI 21+
    (my $client_version_major = $client_version) =~ s/\..*$//;

    my @try = grep { -d $_ } ( # search the ORACLE_HOME we're using first
       # --- Traditional full-install locations
       "$OH/rdbms/public", # prefer public over others
       "$OH/rdbms",
       "$OH/plsql", # oratypes.h sometimes here (eg HPUX 11.23 Itanium Oracle 9.2.0),
       # --- Oracle SDK Instant Client locations
       "$OH/sdk/include",
       "$OH/include",
       # --- Oracle RPM Instant Client locations
       map { ( $_, $_."64"   ) }
       map { ( $_, "/usr$_" ) }
       map { "/include/oracle/$_/client" }
           $client_version,
           $client_version_trim,
           $client_version_full,
           $client_version_major,

       #"/include/oracle/$client_version_full/client",       # Instant Client for RedHat FC3
       #"/include/oracle/$client_version_trim/client",       # Instant Client for RedHat FC3
       #"/include/oracle/$client_version_major/client",      # Instant Client RPM (21+)
       #"/usr/include/oracle/$client_version/client64",      # Instant Client 11.1 and up
       #"/usr/include/oracle/$client_version/client",        # Instant Client 11.1 and up
       #"/usr/include/oracle/$client_version_full/client64", # Instant Client 64
       #"/usr/include/oracle/$client_version_full/client",   # Instant Client for RedHat FC4
       #"/usr/include/oracle/$client_version_trim/client64", # Instant Client 64
       #"/usr/include/oracle/$client_version_major/client64",# Instant Client RPM (21+)
       #"/usr/include/oracle/$client_version_trim/client",   # Instant Client for RedHat FC4
       #"/usr/include/oracle/$client_version_major/client",  # Instant Client RPM (21+)
    );

   # Add /usr/include/oracle based on the oracle home location if oracle home is under
   # /usr/lib/oracle ( Linux RPM install ).  The 11g instant client reports
   # client_version as 11.1.0.6 from sqlplus, but installs under 11.1.0.1.
   push @try, "/usr/include/oracle/$1" if ($OH =~ m|^/usr/lib/oracle/(.*)|);

   unshift @try, $::opt_h if $::opt_h;
   @try = grep { -d $_ } @try;

    my %h_file;
    if (@try) {
      find( sub {
         return unless /^o(ci.{3,4}|ratypes)\.h$/i;
         my $dir = $File::Find::dir;
         $h_file{$_} ||= $dir; # record first one found
         print "Found $dir/$_\n" if $::opt_d;
       }, @try);
    }

    my %h_dir = reverse %h_file; # distinct first found dirs
    my @h_dir = keys %h_dir;

    print "Found header files in @h_dir.\n" if @h_dir;

    if (!$h_file{'oratypes.h'} || !$h_file{'ocidfn.h'}) {
        print "\n\n*********************************************************\n";
        print "I can't find the header files I need in your Oracle installation.\n";
        print "You probably need to install some more Oracle components.\n";
        print "For Instant Client that means the SDK package.\n";
        print "I'll keep going, but the compile will probably fail.\n";
        print "See the appropriate troubleshooting guide for your OS for more information.$BELL\n";
        print "*********************************************************\n\n";
        sleep 5;
    }
    return @h_dir;
}


sub get_client_version {
    my ($force_version) = @_;

    my $client_version_full = '';

    my $sqlplus_exe = ($^O eq 'Win32' || $^O eq 'MSWin32' || $^O eq 'cygwin') ? "sqlplus.exe" : "sqlplus";

    # When building under Cygwin, ORACLE_HOME must be a native Windows
    # path so Oracle itself can use it, but it needs to be translated
    # to a Cygwin path so it can be joined into the PATH.
    # Otherwise, the colon in the drive specification (e.g. "c:") is
    # treated as a separator.
    my $OH_path = $OH;
    chomp($OH_path = `/usr/bin/cygpath -u $OH_path`) if $^O eq 'cygwin' && $OH;

    # if we have an ORACLE_HOME then prepend it to the PATH
    local $ENV{PATH} = join $Config{path_sep}, "$OH_path/bin", $OH_path, $ENV{PATH} if $OH;
    print "PATH=$ENV{PATH}\n" if $::opt_v;

    if (find_bin($sqlplus_exe)) {
        local $ENV{SQLPATH} = ""; # avoid $SQLPATH/login.sql causing sqlplus to hang
        # Try to use the _SQLPLUS_RELEASE predefined variable from sqlplus
        # Documented in the SQL*Plus reference guide:
        #  http://download-west.oracle.com/docs/cd/B12037_01/server.101/b12170/ch13.htm#i2675128
        # Output is in the following format:
        #   DEFINE _SQLPLUS_RELEASE = "902000400" (CHAR)       Representing 9.2.0.4.0
        #   DEFINE _SQLPLUS_RELEASE = "1001000200" (CHAR)      Representing 10.1.0.2.0
        open my $FH, '>', 'define.sql' or warn "Can't create define.sql: $!";
        print $FH "DEFINE _SQLPLUS_RELEASE\nQUIT\n";
        close $FH;
        my $sqlplus_release = `$sqlplus_exe -S /nolog \@define.sql 2>&1`;
        if ($sqlplus_release =~ m/(SP2-0750)|(SP2-0642)/) {
            my $x = $ENV{ORACLE_HOME};
            delete $ENV{ORACLE_HOME};
            $sqlplus_release = `$sqlplus_exe -S /nolog \@define.sql 2>&1`;
            $ENV{ORACLE_HOME} = $x;
        }
        unlink "define.sql";
        print $sqlplus_release; # the _SQLPLUS_RELEASE may not be on first line:
        if ($sqlplus_release =~ /DEFINE _SQLPLUS_RELEASE = "(\d?\d)(\d\d)(\d\d)(\d\d)(\d\d)"/) {
            $client_version_full = sprintf("%d.%d.%d.%d", $1, $2, $3, $4);
        }
        else {
            my $ldlib_note = ($Config{ldlibpthname})
                    ? "Specifically, your $Config{ldlibpthname} environment variable"
                : "Many systems need an environment variable (such as LD_LIBRARY_PATH, DYLD_LIBRARY_PATH)";
            warn qq{
            If sqlplus failed due to a linker/symbol/relocation/library error or similar problem
            then it's likely that you've not configured your environment correctly.
            $ldlib_note
            set to include the directory containing the Oracle libraries.
            \a\n};
            sleep 5;
        }
    }
    else {
        warn "Can't find sqlplus. Pity, it would have helped.\n";
    }

    if (!$client_version_full && $OH && open INST, "<$OH/install/unix.rgs") {
        local $/ = undef;
        <INST> =~ m/^(rdbms|sql\*plus)\s+([\d.]+)/m;
        $client_version_full = $2 if $2;
        close INST;
    }

    if (!$client_version_full && $OH && -x "$OH/orainst/inspdver" ) {
        open my $INST, "$OH/orainst/inspdver |"; # client only install does not have this
        my @inspdver = <$INST>;
        close $INST;
        foreach (@inspdver) {
            $client_version_full = $1 if m/^(\d+\.\d+\.\d+)\S*\s+.*RDBMS/;
            next unless $::opt_v
                or m/RDBMS/i   or m/PL.SQL/i
                or m/Precomp/i or m/Pro\*C/i;
            print $_;
        }
    }
    if (!$client_version_full) {
        print "I'm having trouble finding your Oracle version number... trying harder\n"
            unless $force_version;
        if ( $OH =~ m![^\d\.]((?:8|9|1\d)\.\d+\.\d+(\.\d+)?)! ) { #decode it from $OH if possible
            $client_version_full = $1;
        }
        elsif ( "$OH/" =~ m!\D(8|9|10)(\d)(\d?)\D!) { # scary but handy
            $client_version_full = join ".", $1, $2, ($3||'0');
        }
        elsif ( "$OH/" =~ m!/10g!) { # scary but handy
            $client_version_full = "10.0.0.0";
        }
   elsif ( "$OH/" =~ m!/usr/lib/oracle/(\d+\.\d)/!) { # Linux RPM
       $client_version_full = "$1.0.0";
   }
    }

    if ($force_version && $force_version ne $client_version_full) {
        print "Forcing Oracle version to be treated as $force_version\n";
        $client_version_full = $force_version;
    }

    if ($client_version_full && $client_version_full !~ m/^([789]|[12][0-9])\.[0-9]+/
    ) {
        print "Oracle version seems to be $client_version_full but that looks wrong so I'll ignore it.\n";
        $client_version_full = "";
    }

    if (!$client_version_full) {

      # set a supported client version as default
      $client_version_full = "9.2.0.4.0";

      print qq{
WARNING: Could not determine Oracle client version, defaulting to
version $client_version_full. Some features of DBD::Oracle may not work.
Oracle version-based logic in Makefile.PL may produce erroneous
results. You can use "perl Makefile.PL -V X.Y.Z" to specify your
client version.\n
};
      # pause for focus
      sleep 3;
    }

    # hack up a simple floating point form of the version: 8.1.6.2 => 8.1
    ($client_version = $client_version_full) =~ s/^(\d+\.\d+).*/$1/;

    print "Oracle Version $client_version_full ($client_version)\n";

    return $client_version unless wantarray;
    return ($client_version, $client_version_full);
}


sub symbol_search {
    $::opt_s ||= $::opt_S;
    print "Searching for symbol '$::opt_s' in $OH ...\n";
    my $dlext = $Config{dlext};
    system(qq{ cd $OH; for i in lib/*.[ao] lib/*.$dlext */lib/*.[ao];
        do echo "  searching oracle \$i ..."; PATH=/usr/ccs/bin:\$PATH nm \$i | grep $::opt_s; done
    });
    if ($::opt_S) {
        my @libpth = split ' ', $Config{libpth};
        print "Searching for symbol '$::opt_s' in @libpth ...\n";
        @libpth = map { ("$_/lib*.$dlext", "$_/lib*.a") } @libpth;
        system(qq{ cd $OH; for i in @libpth;
            do echo "  searching \$i ..."; PATH=/usr/ccs/bin:\$PATH nm \$i | grep $::opt_s; done
        });
    }
    print "Search done.\n";
    print "(Please only include the 'interesting' parts when mailing.)\n";
    exit;
}


# =====================================================================


{
    package MY; # SUPER needs package context, $self is not sufficient

    use strict;
    use Config;

    sub libscan {
       my($self, $path) = @_;
       return '' if $path =~ m/\.pl$/;
       $path;
    }


    sub post_initialize {
        my $self = shift;

        print "\nNote: \$ORACLE_HOME/lib must be added to your $need_ldlp_env environment variable\n",
              "before running \"make test\" and whenever DBD::Oracle is used.\n\n"
            if $need_ldlp_env && ($ENV{$need_ldlp_env}||'') !~ m:\Q$OH/lib\b:;

        eval { # This chunk is for Oracle::OCI
            require Data::Dumper;
            my $dmp = Data::Dumper->new([\%opts, $self], [qw(dbd_oracle_mm_opts dbd_oracle_mm_self)]);
            print main::MK_PM $dmp->Purity(1)->Terse(0)->Indent(1)->Useqq(1)->Dump;
        };
        if ($@) {
            warn "Can't dump config to mk.pm so you won't be able to build Oracle::OCI later if you wanted to: $@\n";
            print main::MK_PM qq{die "You need to reinstall DBD::Oracle after installing Data::Dumper\n"; };
        }
        close main::MK_PM or die "Error closing mk.pm: $!\n";

        foreach (qw(mk.pm Oracle.h dbdimp.h dbivport.h ocitrace.h)) {
            $self->{PM}->{$_} = '$(INST_ARCHAUTODIR)/'.$_;
        }

        # Add $linkwith to EXTRALIBS for those doing static linking
        $self->{EXTRALIBS} .= " -L\$(LIBHOME)";
        $self->{EXTRALIBS} .= " $linkwith" if $linkwith;

        '';
    }


    sub postamble {
        return main::dbd_postamble(@_);
    }


    sub const_loadlibs {
        my $self = shift;

        # ExtUtils::MM_Unix v1.50 (invoked by ExtUtils::MakeMaker)
        # requires that $self->{LD_RUN_PATH} be defined and not be
        # an empty string for Makefile to specify its use during the
        # build. This is required by both SUPER::const_loadlibs
        # and SUPER::dynamic_lib. hence it is best if we define
        # or modify $self->{LD_RUN_PATH} here *before* calling
        # SUPER::const_loadlibs.


        # edit LD_RUN_PATH ...
        my ($ldrp) = $self->{LD_RUN_PATH};
        # remove redundant /lib or /usr/lib as it can cause problems
        $ldrp =~ s!:(/usr)?/lib$!! if $ldrp;
    # if it's empty then set it manually
    #Lincoln: if pick the right library path
    my $libdir = main::ora_libdir();
    $ldrp ||= "$OH/$libdir:$OH/rdbms/$libdir";
        $self->{LD_RUN_PATH} = $ldrp;

        local($_) = $self->SUPER::const_loadlibs(@_);

        print "Ignoring LD_RUN_PATH='$ENV{LD_RUN_PATH}' in environment\n" if $ENV{LD_RUN_PATH};
        print "LD_RUN_PATH=$ldrp\n";
        return $_;
    }


    sub post_constants {
        my $self = shift;
        return '' unless $::opt_f;
        # Oracle Definitions, based on $(ORACLE_HOME)/proc/lib/proc.mk
        '
###################################################################
#
ORACLE_HOME = '.$OH.'

# The following text has been extracted from '.join("\n#\t", '', @mkfiles).'

'.$MK_TEXT.'

# End of extract from '."@mkfiles".'
#
###################################################################
';
    }


    sub const_cccmd {
        my ($self) = shift;
        print "Using DBD::Oracle $self->{VERSION}.\n";

        local($_) = $self->SUPER::const_cccmd(@_);
        # If perl Makefile.PL *-g* then switch on debugging
        if ($::opt_g) {
           if ($^O eq "MSWin32" and $Config::Config{cc} eq 'cl') {
              s/\s-/ -Zi -/;
              s/-O1//;
           } else {
            s/\s-O\d?\b//;      # delete optimise option
            s/\s-/ -g -/;       # add -g option
           }
        }
        # are we using the non-bundled hpux compiler?
        if ($^O eq "hpux" and $Config::Config{ccflags} =~ /-Aa\b/) {
            print "Changing -Aa to -Ae for HP-UX in ccmd.\n"
             if s/-Aa\b/-Ae/g;  # allow "long long" in oratypes.h
        }

        $_;
    }

    sub cflags {
        my ($self) = shift;
        local($_) = $self->SUPER::cflags(@_);
        # If perl Makefile.PL *-g* then switch on debugging
        if ($::opt_g) {
           if ($^O eq "MSWin32" and $Config::Config{cc} eq 'cl') {
              s/\s-/ -Zi -/;
              s/-O1//;

           } else {
              s/\s-O\d?\b//;    # delete optimise option
                s/\s-/ -g -/;     # add -g option
           }
        }
        # are we using the non-bundled hpux compiler?
        if ($^O eq "hpux" and $Config::Config{ccflags} =~ /-Aa\b/) {
            print "Changing -Aa to -Ae for HP-UX in cflags.\n"
             if s/-Aa\b/-Ae/g;  # allow "long long" in oratypes.h
        }
        $_;
    }

    sub dynamic_lib {
        my($self) = shift;

        unless ($^O eq 'VMS') {
                my $m = $self->SUPER::dynamic_lib(@_);
                if ($^O eq 'darwin') {
                        $m =  "NMEDIT = nmedit\n" . $m .
                              "\t\$(NMEDIT) -R ./hints/macos_bundle.syms \$(INST_DYNAMIC) || true\n";
                }
                elsif (($^O eq 'hpux') and ($osvers <11)) {
                         $m =~ s/LD_RUN_PATH=(\S+)\s+(\S+)/$2 -Wl,+b $1/;

                }
                return ($m);
        }

        # special code for VMS only
        my(%attribs) = @_;
        return '' unless $self->needs_linking(); #might be because of a subdir
        return '' unless $self->has_link_code();

        my $OtherText;
        my($otherldflags) = $attribs{OTHERLDFLAGS} || "";
        my($inst_dynamic_dep) = $attribs{INST_DYNAMIC_DEP} || "";
        my @m;
        push @m, "OTHERLDFLAGS = $otherldflags\n";
        push @m, "INST_DYNAMIC_DEP = $inst_dynamic_dep\n";
    if ($] < 5.00450) {
        push @m, '
$(INST_DYNAMIC) : $(INST_STATIC) $(PERL_INC)perlshr_attr.opt rtls.opt $(INST_ARCHAUTODIR).exists $(EXPORT_LIST) $(PERL_ARCHIVE) $(INST_DYNAMIC_DEP)
        $(NOECHO) $(MKPATH) $(INST_ARCHAUTODIR)
        $(NOECHO) If F$TrnLNm("PerlShr").eqs."" Then Define/NoLog/User PerlShr Sys$Share:PerlShr.',$Config::Config{'dlext'},'
        Lnproc $(MMS$TARGET)$(OTHERLDFLAGS) $(BASEEXT).opt/Option,rtls.opt/Option,$(PERL_INC)perlshr_attr.opt/Option i
';
  } else {
        push @m, '
$(INST_DYNAMIC) : $(INST_STATIC) $(PERL_INC)perlshr_attr.opt $(INST_ARCHAUTODIR).exists $(EXPORT_LIST) $(PERL_ARCHIVE) $(INST_DYNAMIC_DEP)
        $(NOECHO) $(MKPATH) $(INST_ARCHAUTODIR)
        $(NOECHO) If F$TrnLNm("PerlShr").eqs."" Then Define/NoLog/User PerlShr Sys$Share:PerlShr.',$Config::Config{'dlext'},'
        Lnproc $(MMS$TARGET)$(OTHERLDFLAGS) $(BASEEXT).opt/Option,$(PERL_INC)perlshr_attr.opt/Option i
';

  }
        push @m, $self->dir_target('$(INST_ARCHAUTODIR)');
        join('',@m);
    }

}


sub ldlibpth_info {
    my $verbose = shift;

    my ($ldlibpthname, $val);

    if ($^O eq "hpux") { # hpux is odd again: can use two env vars
        my @envs = grep { $ENV{$_} } qw( LD_LIBRARY_PATH SHLIB_PATH );
        $ldlibpthname = join "/", @envs;
        $val          = join $Config{path_sep}, @ENV{@envs}
    }
    else {
        $ldlibpthname = $Config{ldlibpthname} or return;
        $val          = $ENV{$ldlibpthname} || '';
    }

    print "Your $ldlibpthname env var is set to '$val'\n" if $verbose;

    return ( $ldlibpthname, $val, split /\Q$Config{path_sep}/, $val );
}


sub check_ldlibpthname {
    my $libdir = shift || join '/', $OH, ora_libdir();

    $libdir =~ s:[\\/]$::;  # cut final / or \

    my ($ldlibpthname, $val, @dirs) = ldlibpth_info(1);

    my $warn_name = $ldlibpthname;

    # It is also ok if we are using symbolic links
    return 1 if grep { s:[\\/]$::; $_ eq $libdir }
                map  { $_, Cwd::abs_path($_) } @dirs;

    # on solaris, it can be under LD_LIBRARY_PATH_(32|64)
    if ( $^O eq 'solaris' ) {
        my $ld_library_path_name = 'LD_LIBRARY_PATH_'
                                 . ( perl_is_64bit() ? '64' : '32' );

        $warn_name .= " or $ld_library_path_name";

        my @dirs = split quotemeta($Config{path_sep}),
                         $ENV{$ld_library_path_name};

        s#[\\/]$## for @dirs;  # cut potential final / or \

        return 1 if grep { $_ eq $libdir } @dirs;
    }
