
=item What has happened here?

=item Anatomy of .xs file

=item Getting the fat out of XSUBs

=item More about XSUB arguments

=item The Argument Stack

=item Extending your Extension

=item Documenting your Extension

=item Installing your Extension

=item EXAMPLE 5

=item New Things in this Example

=item EXAMPLE 6

=item New Things in this Example

=item EXAMPLE 7 (Coming Soon)

=item EXAMPLE 8 (Coming Soon)

=item EXAMPLE 9 Passing open files to XSes

=item Troubleshooting these Examples

=back

=item See also

=item Author

=over 4

=item Last Changed

=back

=back

=head2 perlxs - XS language reference manual

=over 4

=item DESCRIPTION

=over 4

=item Introduction

=item On The Road

=item The Anatomy of an XSUB

=item The Argument Stack

=item The RETVAL Variable

=item Returning SVs, AVs and HVs through RETVAL

=item The MODULE Keyword

=item The PACKAGE Keyword

=item The PREFIX Keyword

=item The OUTPUT: Keyword

=item The NO_OUTPUT Keyword

=item The CODE: Keyword

=item The INIT: Keyword

=item The NO_INIT Keyword

=item The TYPEMAP: Keyword

=item Initializing Function Parameters

=item Default Parameter Values

=item The PREINIT: Keyword

=item The SCOPE: Keyword

=item The INPUT: Keyword

=item The IN/OUTLIST/IN_OUTLIST/OUT/IN_OUT Keywords

=item The C<length(NAME)> Keyword

=item Variable-length Parameter Lists

=item The C_ARGS: Keyword

=item The PPCODE: Keyword

=item Returning Undef And Empty Lists

=item The REQUIRE: Keyword

=item The CLEANUP: Keyword

=item The POSTCALL: Keyword

=item The BOOT: Keyword

=item The VERSIONCHECK: Keyword

=item The PROTOTYPES: Keyword

=item The PROTOTYPE: Keyword

=item The ALIAS: Keyword

=item The OVERLOAD: Keyword

=item The FALLBACK: Keyword

=item The INTERFACE: Keyword

=item The INTERFACE_MACRO: Keyword

=item The INCLUDE: Keyword

=item The INCLUDE_COMMAND: Keyword

=item The CASE: Keyword

=item The EXPORT_XSUB_SYMBOLS: Keyword

=item The & Unary Operator

=item Inserting POD, Comments and C Preprocessor Directives

=item Using XS With C++

=item Interface Strategy

=item Perl Objects And C Structures

=item Safely Storing Static Data in XS

MY_CXT_KEY, typedef my_cxt_t, START_MY_CXT, MY_CXT_INIT, dMY_CXT, MY_CXT,
aMY_CXT/pMY_CXT, MY_CXT_CLONE, MY_CXT_INIT_INTERP(my_perl),
dMY_CXT_INTERP(my_perl)

=back

=item EXAMPLES

=item CAVEATS

=over 4

=item Use of standard C library functions

=item Event loops and control flow

=back

=item XS VERSION

=item AUTHOR DIAGNOSTICS

=item AUTHOR

=back

=head2 perlxstypemap - Perl XS C/Perl type mapping

=over 4

=item DESCRIPTION

=over 4

=item Anatomy of a typemap

=item The Role of the typemap File in Your Distribution

=item Sharing typemaps Between CPAN Distributions

=item Writing typemap Entries

=item Full Listing of Core Typemaps

T_SV, T_SVREF, T_SVREF_FIXED, T_AVREF, T_AVREF_REFCOUNT_FIXED, T_HVREF,
T_HVREF_REFCOUNT_FIXED, T_CVREF, T_CVREF_REFCOUNT_FIXED, T_SYSRET, T_UV,
T_IV, T_INT, T_ENUM, T_BOOL, T_U_INT, T_SHORT, T_U_SHORT, T_LONG, T_U_LONG,
T_CHAR, T_U_CHAR, T_FLOAT, T_NV, T_DOUBLE, T_PV, T_PTR, T_PTRREF, T_PTROBJ,
T_REF_IV_REF, T_REF_IV_PTR, T_PTRDESC, T_REFREF, T_REFOBJ, T_OPAQUEPTR,
T_OPAQUE, Implicit array, T_PACKED, T_PACKEDARRAY, T_DATAUNIT, T_CALLBACK,
T_ARRAY, T_STDIO, T_INOUT, T_IN, T_OUT

=back

=back

=head2 perlclib - Interacting with standard C library functions

=over 4

=item DESCRIPTION

=item libc functions to avoid

=over 4

=item Conventions

C<~>, C<t>, C<p>, C<n>, C<s>

=item File Operations

=item File Input and Output

=item File Positioning

=item Memory Management and String Handling

=item Character Class Tests

=item F<stdlib.h> functions

=item Miscellaneous functions

=back

=item Dealing with locales

=item Dealing with embedded perls and threads

=over 4

=item Functions always unsuitable for use under multi-threads

=item Functions which must be called at least once before starting threads

=item Functions that are thread-safe when called with appropriate arguments

=item Functions vulnerable to signals

=item General issues with thread-safety

=item Reentrant equivalent functions

For items marked C<*>, For the remaining items, If you #define
PERL_REENTRANT, If you don't enable automatic substitution

=item Functions that need the environment to be constant

=item Locale-specific issues

=back

=item SEE ALSO

=back

=head2 perlguts - Introduction to the Perl API

=over 4

=item DESCRIPTION

=item Variables

=over 4

=item Datatypes

=item What is an "IV"?

=item Working with SVs

C<SvIV(SV*)> (C<IV>) and C<SvUV(SV*)> (C<UV>), C<SvNV(SV*)> (C<double>),
Strings are a bit complicated:, Byte string: C<SvPVbyte(SV*, STRLEN len)>
or C<SvPVbyte_nolen(SV*)>, UTF-8 string: C<SvPVutf8(SV*, STRLEN len)> or
C<SvPVutf8_nolen(SV*)>, You can also use C<SvPV(SV*, STRLEN len)> or
C<SvPV_nolen(SV*)> to fetch the SV's raw internal buffer. This is tricky,
though; if your Perl string is C<"\xff\xff">, then depending on the SV's
internal encoding you might get back a 2-byte B<OR> a 4-byte C<char*>.
Moreover, if it's the 4-byte string, that could come from either Perl
C<"\xff\xff"> stored UTF-8 encoded, or Perl C<"\xc3\xbf\xc3\xbf"> stored as
raw octets. To differentiate between these you B<MUST> look up the SV's
UTF8 bit (cf. C<SvUTF8>) to know whether the source Perl string is 2
characters (C<SvUTF8> would be on) or 4 characters (C<SvUTF8> would be off)

=item Offsets

=item What's Really Stored in an SV?

=item Working with AVs

C<av_store_simple>, C<av_fetch_simple>, C<av_push_simple>, are not magical,
are not readonly, are "real" (refcounted) AVs, have an av_top_index value >
-2

=item Working with HVs

=item Hash API Extensions

=item AVs, HVs and undefined values

=item References

=item Blessed References and Class Objects

=item Creating New Variables

GV_ADDMULTI, GV_ADDWARN

=item Reference Counts and Mortality

=item Stashes and Globs

=item I/O Handles

=item Double-Typed SVs

=item Read-Only Values

=item Copy on Write

=item Magic Variables

=item Assigning Magic

=item Magic Virtual Tables

=item Finding Magic

=item Understanding the Magic of Tied Hashes and Arrays

=item Localizing changes

C<SAVEINT(int i)>, C<SAVEIV(IV i)>, C<SAVEI32(I32 i)>, C<SAVELONG(long i)>,
C<SAVEI8(I8 i)>, C<SAVEI16(I16 i)>, C<SAVEBOOL(int i)>, C<SAVESTRLEN(STRLEN
i)>, C<SAVESPTR(s)>, C<SAVEPPTR(p)>, C<SAVERCPV(char **ppv)>,
C<SAVEGENERICSV(SV **psv)>, C<SAVEFREESV(SV *sv)>, C<SAVEMORTALIZESV(SV
*sv)>, C<SAVEFREEOP(OP *op)>, C<SAVEFREEPV(p)>, C<SAVEFREERCPV(char *pv)>,
C<SAVECLEARSV(SV *sv)>, C<SAVEDELETE(HV *hv, char *key, I32 length)>,
C<SAVEDESTRUCTOR(DESTRUCTORFUNC_NOCONTEXT_t f, void *p)>,
C<SAVEDESTRUCTOR_X(DESTRUCTORFUNC_t f, void *p)>, C<MORTALSVFUNC_X(SVFUNC_t
f, SV *sv)>, C<MORTALDESTRUCTOR_SV(SV *coderef, SV *args)>,
C<SAVESTACK_POS()>, C<SV* save_scalar(GV *gv)>, C<AV* save_ary(GV *gv)>,
C<HV* save_hash(GV *gv)>, C<void save_item(SV *item)>, C<SV* save_svref(SV
**sptr)>, C<void save_aptr(AV **aptr)>, C<void save_hptr(HV **hptr)>

=back

=item Subroutines

=over 4

=item XSUBs and the Argument Stack

=item Autoloading with XSUBs

=item Calling Perl Routines from within C Programs

=item Putting a C value on Perl stack

=item Scratchpads

=item Scratchpads and recursion

=back

=item Memory Allocation

=over 4

=item Allocation

=item Reallocation

=item Moving

=back

=item PerlIO

=item Compiled code

=over 4

=item Code tree

=item Examining the tree

=item Compile pass 1: check routines

=item Compile pass 1a: constant folding

=item Compile pass 2: context propagation

=item Compile pass 3: peephole optimization

=item Pluggable runops

=item Compile-time scope hooks

C<void bhk_start(pTHX_ int full)>, C<void bhk_pre_end(pTHX_ OP **o)>,
C<void bhk_post_end(pTHX_ OP **o)>, C<void bhk_eval(pTHX_ OP *const o)>

=back

=item Examining internal data structures with the C<dump> functions

=item How multiple interpreters and concurrency are supported

=over 4

=item Background and MULTIPLICITY

=item So what happened to dTHR?

=item How do I use all this in extensions?

=item Should I do anything special if I call perl from multiple threads?

=item Future Plans and PERL_IMPLICIT_SYS

=back

=item Internal Functions

=over 4

=item Formatted Printing of IVs, UVs, and NVs

=item Formatted Printing of SVs

=item Formatted Printing of Strings

=back

=back

=over 4

=item Formatted Printing of C<Size_t> and C<SSize_t>

=item Formatted Printing of C<Ptrdiff_t>, C<intmax_t>, C<short> and other
special sizes

=item Pointer-To-Integer and Integer-To-Pointer

=item Exception Handling

=item Source Documentation

=item Backwards compatibility

=back

=over 4

=item Unicode Support

=over 4

=item What B<is> Unicode, anyway?

=item How can I recognise a UTF-8 string?

=item How does UTF-8 represent Unicode characters?

=item How does Perl store UTF-8 strings?

=item How do I pass a Perl string to a C library?

bytes: 0x64 0x78 0x8c, UTF-8: 0x64 0x78 0xc2 0x8c

=item How do I convert a string to UTF-8?

=item How do I compare strings?

=item Is there anything else I need to know?

=back

=item Custom Operators

xop_name, xop_desc, xop_class, OA_BASEOP, OA_UNOP, OA_BINOP, OA_LOGOP,
OA_LISTOP, OA_PMOP, OA_SVOP, OA_PADOP, OA_PVOP_OR_SVOP, OA_LOOP, OA_COP,
xop_peep

=item Stacks

=over 4

=item Value Stack

=item Mark Stack

=item Temporaries Stack

=item Save Stack

=item Scope Stack

=back

=item Dynamic Scope and the Context Stack

=over 4

=item Introduction to the context stack

=item Pushing contexts

=item Popping contexts

=item Redoing contexts

=back

=item Reference-counted argument stack

=over 4

=item Introduction

=item Reference counted stack states

not reference-counted, fully reference-counted, partially reference-counted
(split)

=item Wrapping

=item (Re)writing a PP function using the rpp_() API

=back

=item Slab-based operator allocation

=item AUTHORS

=item SEE ALSO

=back

=head2 perlcall - Perl calling conventions from C

=over 4

=item DESCRIPTION

An Error Handler, An Event-Driven Program

=item THE CALL_ FUNCTIONS

call_sv, call_pv, call_method, call_argv

=item FLAG VALUES

=over 4

=item  G_VOID

=item  G_SCALAR

=item G_LIST

=item G_DISCARD

=item G_NOARGS

=item G_EVAL

=item G_KEEPERR

=item Determining the Context

=back

=item EXAMPLES

=over 4

=item No Parameters, Nothing Returned

=item Passing Parameters

=item Returning a Scalar

=item Returning a List of Values

=item Returning a List in Scalar Context

=item Returning Data from Perl via the Parameter List

=item Using G_EVAL

=item Using G_KEEPERR

=item Using call_sv

=item Using call_argv

=item Using call_method

=item Using GIMME_V

=item Using Perl to Dispose of Temporaries

=item Strategies for Storing Callback Context Information

1. Ignore the problem - Allow only 1 callback, 2. Create a sequence of
callbacks - hard wired limit, 3. Use a parameter to map to the Perl
callback

=item Alternate Stack Manipulation

=item Creating and Calling an Anonymous Subroutine in C

=back

=item LIGHTWEIGHT CALLBACKS

=item SEE ALSO

=item AUTHOR

=item DATE

=back

=head2 perlmroapi - Perl method resolution plugin interface

=over 4

=item DESCRIPTION

resolve, name, length, kflags, hash

=item Callbacks

=item Caching

=item Examples

=item AUTHORS

=back

=head2 perlreapi - Perl regular expression plugin interface

=over 4

=item DESCRIPTION

=item Callbacks

=over 4

=item comp

C</m> - RXf_PMf_MULTILINE, C</s> - RXf_PMf_SINGLELINE, C</i> -
RXf_PMf_FOLD, C</x> - RXf_PMf_EXTENDED, C</p> - RXf_PMf_KEEPCOPY, Character
set, RXf_SPLIT, RXf_SKIPWHITE, RXf_START_ONLY, RXf_WHITE, RXf_NULL,
RXf_NO_INPLACE_SUBST

=item exec

rx, sv, strbeg, strend, stringarg, minend, data, flags

=item intuit

=item checkstr

=item free

=item Numbered capture callbacks

=item Named capture callbacks

=item qr_package

=item dupe

=item op_comp

=back

=item The REGEXP structure

=over 4

=item C<engine>

=item C<mother_re>

=item C<extflags>

=item C<minlen> C<minlenret>

=item C<gofs>

=item C<substrs>

=item C<nparens>, C<logical_nparens>

=item C<logical_to_parno>, C<parno_to_logical>, C<parno_to_logical_next>

=item C<lastparen>, and C<lastcloseparen>

=item C<intflags>

=item C<pprivate>

=item C<offs>

=item C<RX_PRECOMP> C<RX_PRELEN>

=item C<paren_names>

=item C<substrs>

=item C<subbeg> C<sublen> C<saved_copy> C<suboffset> C<subcoffset>

=item C<RX_WRAPPED> C<RX_WRAPLEN>

=item C<RX_REFCNT()>

=back

=item HISTORY

=item AUTHORS

=item LICENSE

=back

=head2 perlreguts - Description of the Perl regular expression engine.

=over 4

=item DESCRIPTION

=item OVERVIEW

=over 4

=item A quick note on terms

=item What is a regular expression engine?

=item Structure of a Regexp Program

C<regnode_1>, C<regnode_2>, C<regnode_string>, C<regnode_charclass>,
C<regnode_charclass_posixl>, "REGNODE_AFTER", "regnext"

=back

=item Process Overview

A. Compilation, 1. Parsing, 2. Peep-hole optimisation and analysis, B.
Execution, 3. Start position and no-match optimisations, 4. Program
execution

=over 4

=item Compilation

anchored fixed strings, floating fixed strings, minimum and maximum length
requirements, start class, Beginning/End of line positions

=item Execution

=back

=item MISCELLANEOUS

=over 4

=item Unicode and Localisation Support

=item Base Structures

C<regstclass>, C<data>, C<code_blocks>, C<proglen>, C<name_list_idx>,
C<program>

=back

=item SEE ALSO

=item AUTHOR

=item LICENCE

=item REFERENCES

=back

=head2 perlclassguts - Internals of how C<feature 'class'> and class syntax
works

=over 4

=item DESCRIPTION

=item DATA STORAGE

=over 4

=item Classes

=item Fields

=item Methods

=item Instances

=back

=item API

=over 4

=item Class Manipulation

=item Field Manipulation

=item Method Manipulation

=item Object Instances

=back

=item OPCODES

=over 4

=item OP_METHSTART

=item OP_INITFIELD

=back

=item COMPILE-TIME BEHAVIOUR

=over 4

=item C<ADJUST> Phasers

=item Attributes

=item Field Initializing Expressions

=back

=item RUNTIME BEHAVIOUR

=over 4

=item Constructor

=item C<$self> Access During Methods

=back

=item AUTHORS

=back

=head2 perlapi - autogenerated documentation for the perl public API

=over 4

=item DESCRIPTION
X<Perl API> X<API> X<api>

L<perlapi/AV Handling>, L<perlapi/Callback Functions>, L<perlapi/Casting>,
L<perlapi/Character case changing>, L<perlapi/Character classification>,
L<perlapi/Compiler and Preprocessor information>, L<perlapi/Compiler
directives>, L<perlapi/Compile-time scope hooks>, L<perlapi/Concurrency>,
L<perlapi/COPs and Hint Hashes>, L<perlapi/Custom Operators>, L<perlapi/CV
Handling>, L<perlapi/Debugging>, L<perlapi/Display functions>,
L<perlapi/Embedding, Threads, and Interpreter Cloning>, L<perlapi/Errno>,
L<perlapi/Exception Handling (simple) Macros>, L<perlapi/Filesystem
configuration values>, L<perlapi/Floating point>, L<perlapi/General
Configuration>, L<perlapi/Global Variables>, L<perlapi/GV Handling and
Stashes>, L<perlapi/Hook manipulation>, L<perlapi/HV Handling>,
L<perlapi/Input/Output>, L<perlapi/Integer>, L<perlapi/I/O Formats>,
L<perlapi/Lexer interface>, L<perlapi/Locales>, L<perlapi/Magic>,
L<perlapi/Memory Management>, L<perlapi/MRO>, L<perlapi/Multicall
Functions>, L<perlapi/Numeric Functions>, L<perlapi/Optrees>,
L<perlapi/Pack and Unpack>, L<perlapi/Pad Data Structures>,
L<perlapi/Password and Group access>, L<perlapi/Paths to system commands>,
L<perlapi/Prototype information>, L<perlapi/Reference-counted stack
manipulation>, L<perlapi/REGEXP Functions>, L<perlapi/Reports and Formats>,
L<perlapi/Signals>, L<perlapi/Site configuration>, L<perlapi/Sockets
configuration values>, L<perlapi/Source Filters>, L<perlapi/Stack
Manipulation Macros>, L<perlapi/String Handling>, L<perlapi/SV Flags>,
L<perlapi/SV Handling>, L<perlapi/Tainting>, L<perlapi/Time>,
L<perlapi/Typedef names>, L<perlapi/Unicode Support>, L<perlapi/Utility
Functions>, L<perlapi/Versioning>, L<perlapi/Warning and Dieing>,
L<perlapi/XS>, L<perlapi/Undocumented elements>

=item AV Handling

C<AV>, C<AvALLOC>, C<AvARRAY> X<AvARRAY>, C<av_clear> X<av_clear>,
C<av_count> X<av_count>, C<av_create_and_push> X<av_create_and_push>,
C<av_create_and_unshift_one> X<av_create_and_unshift_one>, C<av_delete>
X<av_delete>, C<av_exists> X<av_exists>, C<av_extend> X<av_extend>,
C<av_fetch> X<av_fetch>, C<AvFILL> X<AvFILL>, C<av_fill> X<av_fill>,
C<av_len> X<av_len>, C<av_make> X<av_make>, C<av_pop> X<av_pop>, C<av_push>
X<av_push>, C<av_push_simple> X<av_push_simple>, C<av_shift> X<av_shift>,
C<av_store> X<av_store>, C<av_tindex>, C<av_top_index>
X<av_tindex>X<av_top_index>, C<av_undef> X<av_undef>, C<av_unshift>
X<av_unshift>, C<get_av> X<get_av>, C<newAV>, C<newAV_mortal>,
C<newAV_alloc_x>, C<newAV_alloc_xz>
X<newAV>X<newAV_mortal>X<newAV_alloc_x>X<newAV_alloc_xz>, C<newAV> form,
C<newAV_mortal> form, C<newAV_alloc_x> form, C<newAV_alloc_xz> form,
C<newAVav> X<newAVav>, C<newAVhv> X<newAVhv>, C<Nullav> X<Nullav>

=item Callback Functions
X<G_METHOD>X<G_METHOD_NAMED>X<G_RETHROW>X<G_USEHINTS>X<SAVEf_KEEPOLDELEM>X<
SAVEf_SETMAGIC>

C<call_argv> X<call_argv>, C<call_method> X<call_method>, C<call_pv>
X<call_pv>, C<call_sv> X<call_sv>, C<DESTRUCTORFUNC_NOCONTEXT_t>,
C<DESTRUCTORFUNC_t>, C<ENTER> X<ENTER>, C<ENTER_with_name>
X<ENTER_with_name>, C<eval_pv> X<eval_pv>, C<eval_sv> X<eval_sv>,
C<FREETMPS> X<FREETMPS>, C<G_DISCARD>, C<G_EVAL>, C<GIMME> X<GIMME>,
C<GIMME_V> X<GIMME_V>, C<G_KEEPERR>, C<G_LIST>, C<G_NOARGS>, C<G_SCALAR>,
C<G_VOID>, C<is_lvalue_sub> X<is_lvalue_sub>, C<LEAVE> X<LEAVE>,
C<LEAVE_with_name> X<LEAVE_with_name>, C<MORTALDESTRUCTOR_SV>,
C<mortal_destructor_sv> X<mortal_destructor_sv>, C<MORTALSVFUNC_X>,
C<PL_errgv>, C<save_aelem>, C<save_aelem_flags>
X<save_aelem>X<save_aelem_flags>, C<save_aptr>, C<save_ary>, C<SAVEBOOL>,
C<SAVEDELETE>, C<SAVEDESTRUCTOR>, C<SAVEDESTRUCTOR_X>, C<SAVEFREEOP>,
C<SAVEFREEPV>, C<SAVEFREERCPV>, C<SAVEFREESV>, C<SAVEGENERICSV>,
C<save_hash>, C<save_helem>, C<save_helem_flags>
X<save_helem>X<save_helem_flags>, C<save_hptr>, C<SAVEINT>, C<save_item>,
C<SAVEIV>, C<SAVEI8>, C<SAVEI16>, C<SAVEI32>, C<SAVELONG>,
C<SAVEMORTALIZESV>, C<SAVEPPTR>, C<SAVERCPV>, C<save_scalar>, C<SAVESPTR>,
C<SAVESTACK_POS>, C<SAVESTRLEN>, C<save_svref>, C<SAVETMPS> X<SAVETMPS>

=item Casting

C<Atof> X<Atof>, C<cBOOL> X<cBOOL>, C<INT2PTR>, C<I_V> X<I_V>, C<I_32>
X<I_32>, C<PTR2IV>, C<PTR2nat>, C<PTR2NV>, C<PTR2ul>, C<PTR2UV>, C<PTRV>,
C<U_V> X<U_V>, C<U_32> X<U_32>

=item Character case changing

C<toFOLD>, C<toFOLD_A>, C<toFOLD_utf8>, C<toFOLD_utf8_safe>,
C<toFOLD_uvchr>
X<toFOLD>X<toFOLD_A>X<toFOLD_utf8>X<toFOLD_utf8_safe>X<toFOLD_uvchr>,
C<toLOWER>, C<toLOWER_A>, C<toLOWER_LATIN1>, C<toLOWER_LC>, C<toLOWER_L1>,
C<toLOWER_utf8>, C<toLOWER_utf8_safe>, C<toLOWER_uvchr>
X<toLOWER>X<toLOWER_A>X<toLOWER_LATIN1>X<toLOWER_LC>X<toLOWER_L1>X<toLOWER_
utf8>X<toLOWER_utf8_safe>X<toLOWER_uvchr>, C<toTITLE>, C<toTITLE_A>,
C<toTITLE_utf8>, C<toTITLE_utf8_safe>, C<toTITLE_uvchr>
X<toTITLE>X<toTITLE_A>X<toTITLE_utf8>X<toTITLE_utf8_safe>X<toTITLE_uvchr>,
C<toUPPER>, C<toUPPER_A>, C<toUPPER_utf8>, C<toUPPER_utf8_safe>,
C<toUPPER_uvchr>
X<toUPPER>X<toUPPER_A>X<toUPPER_utf8>X<toUPPER_utf8_safe>X<toUPPER_uvchr>

=item Character classification

C<isALNUM>, C<isALNUM_A>, C<isALNUM_LC>, C<isALNUM_LC_uvchr>
X<isALNUM>X<isALNUM_A>X<isALNUM_LC>X<isALNUM_LC_uvchr>, C<isALNUMC>,
C<isALNUMC_A>, C<isALNUMC_LC>, C<isALNUMC_LC_uvchr>, C<isALNUMC_L1>
X<isALNUMC>X<isALNUMC_A>X<isALNUMC_LC>X<isALNUMC_LC_uvchr>X<isALNUMC_L1>,
C<isALPHA>, C<isALPHA_A>, C<isALPHA_LC>, C<isALPHA_LC_utf8_safe>,
C<isALPHA_LC_uvchr>, C<isALPHA_L1>, C<isALPHA_utf8>, C<isALPHA_utf8_safe>,
C<isALPHA_uvchr>
X<isALPHA>X<isALPHA_A>X<isALPHA_LC>X<isALPHA_LC_utf8_safe>X<isALPHA_LC_uvch
r>X<isALPHA_L1>X<isALPHA_utf8>X<isALPHA_utf8_safe>X<isALPHA_uvchr>,
C<isALPHANUMERIC>, C<isALPHANUMERIC_A>, C<isALPHANUMERIC_LC>,
C<isALPHANUMERIC_LC_utf8_safe>, C<isALPHANUMERIC_LC_uvchr>,
C<isALPHANUMERIC_L1>, C<isALPHANUMERIC_utf8>, C<isALPHANUMERIC_utf8_safe>,
C<isALPHANUMERIC_uvchr>
X<isALPHANUMERIC>X<isALPHANUMERIC_A>X<isALPHANUMERIC_LC>X<isALPHANUMERIC_LC
_utf8_safe>X<isALPHANUMERIC_LC_uvchr>X<isALPHANUMERIC_L1>X<isALPHANUMERIC_u
tf8>X<isALPHANUMERIC_utf8_safe>X<isALPHANUMERIC_uvchr>, C<isASCII>,
C<isASCII_A>, C<isASCII_LC>, C<isASCII_LC_utf8_safe>, C<isASCII_LC_uvchr>,
C<isASCII_L1>, C<isASCII_utf8>, C<isASCII_utf8_safe>, C<isASCII_uvchr>
X<isASCII>X<isASCII_A>X<isASCII_LC>X<isASCII_LC_utf8_safe>X<isASCII_LC_uvch
r>X<isASCII_L1>X<isASCII_utf8>X<isASCII_utf8_safe>X<isASCII_uvchr>,
C<isBLANK>, C<isBLANK_A>, C<isBLANK_LC>, C<isBLANK_LC_utf8_safe>,
C<isBLANK_LC_uvchr>, C<isBLANK_L1>, C<isBLANK_utf8>, C<isBLANK_utf8_safe>,
C<isBLANK_uvchr>
X<isBLANK>X<isBLANK_A>X<isBLANK_LC>X<isBLANK_LC_utf8_safe>X<isBLANK_LC_uvch
r>X<isBLANK_L1>X<isBLANK_utf8>X<isBLANK_utf8_safe>X<isBLANK_uvchr>,
