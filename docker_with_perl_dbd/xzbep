	0x0001140d,	/* semop */
	0x0011140d,	/* semget */
	0x0111140d,	/* semctl */
	0x00009bc4,	/* require */
	0x00001140,	/* dofile */
	0x00000604,	/* hintseval */
	0x00009bc0,	/* entereval */
	0x00001100,	/* leaveeval */
	0x00000340,	/* entertry */
	0x00000400,	/* leavetry */
	0x00001b00,	/* ghbyname */
	0x00011400,	/* ghbyaddr */
	0x00000000,	/* ghostent */
	0x00001b00,	/* gnbyname */
	0x00011400,	/* gnbyaddr */
	0x00000000,	/* gnetent */
	0x00001b00,	/* gpbyname */
	0x00001400,	/* gpbynumber */
	0x00000000,	/* gprotoent */
	0x00011400,	/* gsbyname */
	0x00011400,	/* gsbyport */
	0x00000000,	/* gservent */
	0x00001b04,	/* shostent */
	0x00001b04,	/* snetent */
	0x00001b04,	/* sprotoent */
	0x00001b04,	/* sservent */
	0x00000004,	/* ehostent */
	0x00000004,	/* enetent */
	0x00000004,	/* eprotoent */
	0x00000004,	/* eservent */
	0x00001b00,	/* gpwnam */
	0x00001b00,	/* gpwuid */
	0x00000000,	/* gpwent */
	0x00000004,	/* spwent */
	0x00000004,	/* epwent */
	0x00001b00,	/* ggrnam */
	0x00001b00,	/* ggrgid */
	0x00000000,	/* ggrent */
	0x00000004,	/* sgrent */
	0x00000004,	/* egrent */
	0x0000000c,	/* getlogin */
	0x0002140d,	/* syscall */
	0x00007b04,	/* lock */
	0x00000300,	/* once */
	0x00000000,	/* custom */
	0x00000600,	/* coreargs */
	0x00000108,	/* avhvswitch */
	0x00000004,	/* runcv */
	0x00009b8e,	/* fc */
	0x00000040,	/* padcv */
	0x00000040,	/* introcv */
	0x00000040,	/* clonecv */
	0x00000040,	/* padrange */
	0x00000244,	/* refassign */
	0x00000b40,	/* lvref */
	0x00000440,	/* lvrefslice */
	0x00000b40,	/* lvavref */
	0x00000144,	/* anonconst */
	0x00000204,	/* isa */
	0x00000300,	/* cmpchain_and */
	0x00000100,	/* cmpchain_dup */
	0x00000300,	/* entertrycatch */
	0x00000400,	/* leavetrycatch */
	0x00000400,	/* poptry */
	0x00000300,	/* catch */
	0x00000300,	/* pushdefer */
	0x0000011e,	/* is_bool */
	0x0000011e,	/* is_weak */
	0x00000100,	/* weaken */
	0x00000100,	/* unweaken */
	0x00000106,	/* blessed */
	0x0000011e,	/* refaddr */
	0x0000011e,	/* reftype */
	0x0000011e,	/* ceil */
	0x0000011e,	/* floor */
};
#endif

END_EXTERN_C


#define OPpARGELEM_SV           0x00
#define OPpLVREF_SV             0x00
#define OPpARG1_MASK            0x01
#define OPpCOREARGS_DEREF1      0x01
#define OPpENTERSUB_INARGS      0x01
#define OPpPADHV_ISKEYS         0x01
#define OPpRV2HV_ISKEYS         0x01
#define OPpSORT_NUMERIC         0x01
#define OPpTRANS_CAN_FORCE_UTF8 0x01
#define OPpARGELEM_AV           0x02
#define OPpCONST_NOVER          0x02
#define OPpCOREARGS_DEREF2      0x02
#define OPpEVAL_HAS_HH          0x02
#define OPpFT_ACCESS            0x02
#define OPpHINT_STRICT_REFS     0x02
#define OPpITER_REVERSED        0x02
#define OPpSORT_INTEGER         0x02
#define OPpTRANS_USE_SVOP       0x02
#define OPpARG2_MASK            0x03
#define OPpAVHVSWITCH_MASK      0x03
#define OPpARGELEM_HV           0x04
#define OPpASSIGN_TRUEBOOL      0x04
#define OPpCONST_SHORTCIRCUIT   0x04
#define OPpDONT_INIT_GV         0x04
#define OPpENTERSUB_HASTARG     0x04
#define OPpEVAL_UNICODE         0x04
#define OPpFT_STACKED           0x04
#define OPpLVREF_ELEM           0x04
#define OPpSLICEWARNING         0x04
#define OPpSORT_REVERSE         0x04
#define OPpSPLIT_IMPLIM         0x04
#define OPpTRANS_IDENTICAL      0x04
#define OPpUSEINT               0x04
#define OPpARGELEM_MASK         0x06
#define OPpARG3_MASK            0x07
#define OPpPADRANGE_COUNTSHIFT  0x07
#define OPpCONST_STRICT         0x08
#define OPpENTERSUB_AMPER       0x08
#define OPpEVAL_BYTES           0x08
#define OPpFT_STACKING          0x08
#define OPpITER_DEF             0x08
#define OPpLVREF_ITER           0x08
#define OPpMAYBE_LVSUB          0x08
#define OPpMULTICONCAT_STRINGIFY 0x08
#define OPpREVERSE_INPLACE      0x08
#define OPpSORT_INPLACE         0x08
#define OPpSPLIT_LEX            0x08
#define OPpTRANS_SQUASH         0x08
#define OPpARG4_MASK            0x0f
#define OPpASSIGN_COMMON_AGG    0x10
#define OPpCONST_ENTERED        0x10
#define OPpDEREF_AV             0x10
#define OPpEVAL_COPHH           0x10
#define OPpFT_AFTER_t           0x10
#define OPpLVREF_AV             0x10
#define OPpMAYBE_TRUEBOOL       0x10
#define OPpMULTIDEREF_EXISTS    0x10
#define OPpOPEN_IN_RAW          0x10
#define OPpSORT_DESCEND         0x10
#define OPpSPLIT_ASSIGN         0x10
#define OPpSUBSTR_REPL_FIRST    0x10
#define OPpTARGET_MY            0x10
#define OPpASSIGN_COMMON_RC1    0x20
#define OPpDEREF_HV             0x20
#define OPpEARLY_CV             0x20
#define OPpEVAL_RE_REPARSING    0x20
#define OPpHUSH_VMSISH          0x20
#define OPpKVSLICE              0x20
#define OPpLVREF_HV             0x20
#define OPpMAY_RETURN_CONSTANT  0x20
#define OPpMULTICONCAT_FAKE     0x20
#define OPpMULTIDEREF_DELETE    0x20
#define OPpOPEN_IN_CRLF         0x20
#define OPpTRANS_COMPLEMENT     0x20
#define OPpTRUEBOOL             0x20
#define OPpDEREF                0x30
#define OPpDEREF_SV             0x30
#define OPpLVREF_CV             0x30
#define OPpLVREF_TYPE           0x30
#define OPpALLOW_FAKE           0x40
#define OPpASSIGN_BACKWARDS     0x40
#define OPpASSIGN_COMMON_SCALAR 0x40
#define OPpCONCAT_NESTED        0x40
#define OPpCONST_BARE           0x40
#define OPpCOREARGS_SCALARMOD   0x40
#define OPpENTERSUB_DB          0x40
#define OPpEXISTS_SUB           0x40
#define OPpFLIP_LINENUM         0x40
#define OPpINDEX_BOOLNEG        0x40
#define OPpLIST_GUESSED         0x40
#define OPpLVAL_DEFER           0x40
#define OPpMULTICONCAT_APPEND   0x40
#define OPpOPEN_OUT_RAW         0x40
#define OPpOUR_INTRO            0x40
#define OPpPAD_STATE            0x40
#define OPpREFCOUNTED           0x40
#define OPpREPEAT_DOLIST        0x40
#define OPpSLICE                0x40
#define OPpTRANS_GROWS          0x40
#define OPpPADRANGE_COUNTMASK   0x7f
#define OPpASSIGN_CV_TO_GV      0x80
#define OPpCOREARGS_PUSHMARK    0x80
#define OPpDEFER_FINALLY        0x80
#define OPpENTERSUB_NOPAREN     0x80
#define OPpLVALUE               0x80
#define OPpLVAL_INTRO           0x80
#define OPpOFFBYONE             0x80
#define OPpOPEN_OUT_CRLF        0x80
#define OPpPV_IS_UTF8           0x80
#define OPpTRANS_DELETE         0x80
START_EXTERN_C

#ifndef DOINIT

/* data about the flags in op_private */

EXTCONST I16  PL_op_private_bitdef_ix[];
EXTCONST U16  PL_op_private_bitdefs[];
EXTCONST char PL_op_private_labels[];
EXTCONST I16  PL_op_private_bitfields[];
EXTCONST U8   PL_op_private_valid[];

#else


/* PL_op_private_labels[]: the short descriptions of private flags.
 * All labels are concatenated into a single char array
 * (separated by \0's) for compactness.
 */

EXTCONST char PL_op_private_labels[] = {
    '$','M','O','D','\0',
    '+','1','\0',
    '-','\0',
    'A','M','P','E','R','\0',
    'A','P','P','E','N','D','\0',
    'A','S','S','I','G','N','\0',
    'A','V','\0',
    'B','A','R','E','\0',
    'B','K','W','A','R','D','\0',
    'B','O','O','L','\0',
    'B','O','O','L','?','\0',
    'B','Y','T','E','S','\0',
    'C','A','N','_','F','O','R','C','E','_','U','T','F','8','\0',
    'C','O','M','P','L','\0',
    'C','O','M','_','A','G','G','\0',
    'C','O','M','_','R','C','1','\0',
    'C','O','M','_','S','C','A','L','A','R','\0',
    'C','O','N','S','T','\0',
    'C','O','P','H','H','\0',
    'C','V','\0',
    'C','V','2','G','V','\0',
    'D','B','G','\0',
    'D','E','F','\0',
    'D','E','L','\0',
    'D','E','L','E','T','E','\0',
    'D','E','R','E','F','1','\0',
    'D','E','R','E','F','2','\0',
    'D','E','S','C','\0',
    'D','O','L','I','S','T','\0',
    'D','R','E','F','A','V','\0',
    'D','R','E','F','H','V','\0',
    'D','R','E','F','S','V','\0',
    'E','A','R','L','Y','C','V','\0',
    'E','L','E','M','\0',
    'E','N','T','E','R','E','D','\0',
    'E','X','I','S','T','S','\0',
    'F','A','K','E','\0',
    'F','I','N','A','L','L','Y','\0',
    'F','T','A','C','C','E','S','S','\0',
    'F','T','A','F','T','E','R','t','\0',
    'F','T','S','T','A','C','K','E','D','\0',
    'F','T','S','T','A','C','K','I','N','G','\0',
    'G','R','O','W','S','\0',
    'G','U','E','S','S','E','D','\0',
    'H','A','S','_','H','H','\0',
    'H','U','S','H','\0',
    'H','V','\0',
    'I','D','E','N','T','\0',
    'I','M','P','L','I','M','\0',
    'I','N','A','R','G','S','\0',
    'I','N','B','I','N','\0',
    'I','N','C','R','\0',
    'I','N','P','L','A','C','E','\0',
    'I','N','T','\0',
    'I','T','E','R','\0',
    'K','E','Y','S','\0',
    'K','V','S','L','I','C','E','\0',
    'L','E','X','\0',
    'L','I','N','E','N','U','M','\0',
    'L','V','\0',
    'L','V','D','E','F','E','R','\0',
    'L','V','I','N','T','R','O','\0',
    'L','V','S','U','B','\0',
    'M','A','R','K','\0',
    'N','E','G','\0',
    'N','E','S','T','E','D','\0',
    'N','O','(',')','\0',
    'N','O','I','N','I','T','\0',
    'N','O','V','E','R','\0',
    'N','U','M','\0',
    'O','U','R','I','N','T','R','\0',
    'O','U','T','B','I','N','\0',
    'O','U','T','C','R','\0',
    'R','E','F','C','\0',
    'R','E','P','A','R','S','E','\0',
    'R','E','P','L','1','S','T','\0',
    'R','E','V','\0',
    'R','E','V','E','R','S','E','D','\0',
    'S','H','O','R','T','\0',
    'S','L','I','C','E','\0',
    'S','L','I','C','E','W','A','R','N','\0',
    'S','Q','U','A','S','H','\0',
    'S','T','A','T','E','\0',
    'S','T','R','I','C','T','\0',
    'S','T','R','I','N','G','I','F','Y','\0',
    'S','U','B','\0',
    'S','V','\0',
    'T','A','R','G','\0',
    'T','A','R','G','M','Y','\0',
    'U','N','I','\0',
    'U','S','E','I','N','T','\0',
    'U','S','E','_','S','V','O','P','\0',
    'U','T','F','\0',
    'k','e','y','\0',
    'o','f','f','s','e','t','\0',
    'r','a','n','g','e','\0',

};



/* PL_op_private_bitfields[]: details about each bit field type.
 * Each definition consists of the following list of words:
 *    bitmin
 *    label (index into PL_op_private_labels[]; -1 if no label)
 *    repeat for each enum entry (if any):
 *       enum value
 *       enum label (index into PL_op_private_labels[])
 *    -1
 */

EXTCONST I16 PL_op_private_bitfields[] = {
    0, 8, -1,
    0, 8, -1,
    0, 596, -1,
    0, 8, -1,
    0, 8, -1,
    0, 603, -1,
    0, 592, -1,
    1, -1, 0, 553, 1, 30, 2, 303, -1,
    4, -1, 1, 176, 2, 183, 3, 190, -1,
    4, -1, 0, 553, 1, 30, 2, 303, 3, 122, -1,

};


/* PL_op_private_bitdef_ix[]: map an op number to a starting position
 * in PL_op_private_bitdefs.  If -1, the op has no bits defined */

EXTCONST I16  PL_op_private_bitdef_ix[] = {
      -1, /* null */
      -1, /* stub */
       0, /* scalar */
       1, /* pushmark */
       3, /* wantarray */
       4, /* const */
       9, /* gvsv */
      11, /* gv */
      12, /* gelem */
      13, /* padsv */
      16, /* padav */
      21, /* padhv */
      -1, /* padany */
      28, /* rv2gv */
      35, /* rv2sv */
      40, /* av2arylen */
      42, /* rv2cv */
      -1, /* anoncode */
       0, /* prototype */
       0, /* refgen */
       0, /* srefgen */
      49, /* ref */
      52, /* bless */
      53, /* backtick */
      52, /* glob */
       0, /* readline */
      -1, /* rcatline */
       0, /* regcmaybe */
       0, /* regcreset */
       0, /* regcomp */
      -1, /* match */
      -1, /* qr */
      58, /* subst */
       0, /* substcont */
      59, /* trans */
      59, /* transr */
      66, /* sassign */
      69, /* aassign */
       0, /* chop */
       0, /* schop */
      75, /* chomp */
      75, /* schomp */
       0, /* defined */
       0, /* undef */
       0, /* study */
      77, /* pos */
       0, /* preinc */
       0, /* i_preinc */
       0, /* predec */
       0, /* i_predec */
       0, /* postinc */
       0, /* i_postinc */
       0, /* postdec */
       0, /* i_postdec */
      80, /* pow */
      80, /* multiply */
      80, /* i_multiply */
      80, /* divide */
      80, /* i_divide */
      80, /* modulo */
      80, /* i_modulo */
      82, /* repeat */
      80, /* add */
      80, /* i_add */
      80, /* subtract */
      80, /* i_subtract */
      84, /* concat */
      87, /* multiconcat */
      93, /* stringify */
      95, /* left_shift */
      95, /* right_shift */
      12, /* lt */
      12, /* i_lt */
      12, /* gt */
      12, /* i_gt */
      12, /* le */
      12, /* i_le */
      12, /* ge */
      12, /* i_ge */
      12, /* eq */
      12, /* i_eq */
      12, /* ne */
      12, /* i_ne */
      12, /* ncmp */
      12, /* i_ncmp */
      12, /* slt */
      12, /* sgt */
      12, /* sle */
      12, /* sge */
      12, /* seq */
      12, /* sne */
      12, /* scmp */
      97, /* bit_and */
      97, /* bit_xor */
      97, /* bit_or */
      95, /* nbit_and */
      95, /* nbit_xor */
      95, /* nbit_or */
      97, /* sbit_and */
      97, /* sbit_xor */
      97, /* sbit_or */
       0, /* negate */
       0, /* i_negate */
       0, /* not */
      97, /* complement */
      95, /* ncomplement */
      75, /* scomplement */
      12, /* smartmatch */
      93, /* atan2 */
      75, /* sin */
      75, /* cos */
      93, /* rand */
      93, /* srand */
      75, /* exp */
      75, /* log */
      75, /* sqrt */
      75, /* int */
      75, /* hex */
      75, /* oct */
      75, /* abs */
      98, /* length */
     101, /* substr */
     104, /* vec */
     106, /* index */
     106, /* rindex */
      52, /* sprintf */
      52, /* formline */
      75, /* ord */
      75, /* chr */
      93, /* crypt */
       0, /* ucfirst */
       0, /* lcfirst */
       0, /* uc */
       0, /* lc */
       0, /* quotemeta */
     110, /* rv2av */
     117, /* aelemfast */
     117, /* aelemfast_lex */
     118, /* aelem */
     123, /* aslice */
     126, /* kvaslice */
       0, /* aeach */
       0, /* avalues */
      40, /* akeys */
       0, /* each */
      40, /* values */
      40, /* keys */
     127, /* delete */
     131, /* exists */
     133, /* rv2hv */
     118, /* helem */
     123, /* hslice */
     126, /* kvhslice */
     141, /* multideref */
      52, /* unpack */
      52, /* pack */
     148, /* split */
      52, /* join */
     153, /* list */
      12, /* lslice */
      52, /* anonlist */
      52, /* anonhash */
      52, /* splice */
      93, /* push */
       0, /* pop */
       0, /* shift */
      93, /* unshift */
     155, /* sort */
     160, /* reverse */
       0, /* grepstart */
     162, /* grepwhile */
       0, /* mapstart */
       0, /* mapwhile */
       0, /* range */
     164, /* flip */
     164, /* flop */
       0, /* and */
       0, /* or */
      12, /* xor */
       0, /* dor */
     166, /* cond_expr */
       0, /* andassign */
       0, /* orassign */
       0, /* dorassign */
     168, /* entersub */
     175, /* leavesub */
     175, /* leavesublv */
       0, /* argcheck */
     177, /* argelem */
       0, /* argdefelem */
     179, /* caller */
      52, /* warn */
      52, /* die */
      52, /* reset */
      -1, /* lineseq */
     181, /* nextstate */
     181, /* dbstate */
      -1, /* unstack */
      -1, /* enter */
     182, /* leave */
      -1, /* scope */
     184, /* enteriter */
     188, /* iter */
      -1, /* enterloop */
     189, /* leaveloop */
      -1, /* return */
     191, /* last */
     191, /* next */
     191, /* redo */
     191, /* dump */
     191, /* goto */
      52, /* exit */
       0, /* method */
       0, /* method_named */
       0, /* method_super */
       0, /* method_redir */
       0, /* method_redir_super */
       0, /* entergiven */
       0, /* leavegiven */
       0, /* enterwhen */
       0, /* leavewhen */
      -1, /* break */
      -1, /* continue */
     193, /* open */
      52, /* close */
      52, /* pipe_op */
      52, /* fileno */
      52, /* umask */
      52, /* binmode */
      52, /* tie */
       0, /* untie */
       0, /* tied */
      52, /* dbmopen */
       0, /* dbmclose */
      52, /* sselect */
      52, /* select */
      52, /* getc */
      52, /* read */
      52, /* enterwrite */
     175, /* leavewrite */
      -1, /* prtf */
      -1, /* print */
      -1, /* say */
      52, /* sysopen */
      52, /* sysseek */
      52, /* sysread */
      52, /* syswrite */
      52, /* eof */
      52, /* tell */
      52, /* seek */
      52, /* truncate */
      52, /* fcntl */
      52, /* ioctl */
      93, /* flock */
      52, /* send */
      52, /* recv */
      52, /* socket */
      52, /* sockpair */
      52, /* bind */
      52, /* connect */
      52, /* listen */
      52, /* accept */
      52, /* shutdown */
      52, /* gsockopt */
      52, /* ssockopt */
       0, /* getsockname */
       0, /* getpeername */
       0, /* lstat */
       0, /* stat */
     198, /* ftrread */
     198, /* ftrwrite */
     198, /* ftrexec */
     198, /* fteread */
     198, /* ftewrite */
     198, /* fteexec */
     203, /* ftis */
     203, /* ftsize */
     203, /* ftmtime */
     203, /* ftatime */
     203, /* ftctime */
     203, /* ftrowned */
     203, /* fteowned */
     203, /* ftzero */
     203, /* ftsock */
     203, /* ftchr */
     203, /* ftblk */
     203, /* ftfile */
     203, /* ftdir */
     203, /* ftpipe */
     203, /* ftsuid */
     203, /* ftsgid */
     203, /* ftsvtx */
     203, /* ftlink */
     203, /* fttty */
     203, /* fttext */
     203, /* ftbinary */
      93, /* chdir */
      93, /* chown */
      75, /* chroot */
      93, /* unlink */
      93, /* chmod */
      93, /* utime */
      93, /* rename */
      93, /* link */
      93, /* symlink */
       0, /* readlink */
      93, /* mkdir */
      75, /* rmdir */
      52, /* open_dir */
       0, /* readdir */
       0, /* telldir */
      52, /* seekdir */
       0, /* rewinddir */
       0, /* closedir */
      -1, /* fork */
     207, /* wait */
      93, /* waitpid */
      93, /* system */
      93, /* exec */
      93, /* kill */
     207, /* getppid */
      93, /* getpgrp */
      93, /* setpgrp */
      93, /* getpriority */
      93, /* setpriority */
     207, /* time */
      -1, /* tms */
       0, /* localtime */
      52, /* gmtime */
       0, /* alarm */
      93, /* sleep */
      52, /* shmget */
      52, /* shmctl */
      52, /* shmread */
      52, /* shmwrite */
      52, /* msgget */
      52, /* msgctl */
      52, /* msgsnd */
      52, /* msgrcv */
      52, /* semop */
      52, /* semget */
      52, /* semctl */
       0, /* require */
       0, /* dofile */
      -1, /* hintseval */
     208, /* entereval */
     175, /* leaveeval */
       0, /* entertry */
      -1, /* leavetry */
       0, /* ghbyname */
      52, /* ghbyaddr */
      -1, /* ghostent */
       0, /* gnbyname */
      52, /* gnbyaddr */
      -1, /* gnetent */
       0, /* gpbyname */
      52, /* gpbynumber */
      -1, /* gprotoent */
      52, /* gsbyname */
      52, /* gsbyport */
      -1, /* gservent */
       0, /* shostent */
       0, /* snetent */
       0, /* sprotoent */
       0, /* sservent */
      -1, /* ehostent */
      -1, /* enetent */
      -1, /* eprotoent */
      -1, /* eservent */
       0, /* gpwnam */
       0, /* gpwuid */
      -1, /* gpwent */
      -1, /* spwent */
      -1, /* epwent */
       0, /* ggrnam */
       0, /* ggrgid */
      -1, /* ggrent */
      -1, /* sgrent */
      -1, /* egrent */
      -1, /* getlogin */
      52, /* syscall */
       0, /* lock */
       0, /* once */
      -1, /* custom */
     214, /* coreargs */
     218, /* avhvswitch */
       3, /* runcv */
       0, /* fc */
      -1, /* padcv */
      -1, /* introcv */
      -1, /* clonecv */
     220, /* padrange */
     222, /* refassign */
     228, /* lvref */
     234, /* lvrefslice */
     235, /* lvavref */
       0, /* anonconst */
      12, /* isa */
       0, /* cmpchain_and */
       0, /* cmpchain_dup */
       0, /* entertrycatch */
      -1, /* leavetrycatch */
      -1, /* poptry */
       0, /* catch */
     238, /* pushdefer */
      75, /* is_bool */
      75, /* is_weak */
       0, /* weaken */
       0, /* unweaken */
      49, /* blessed */
      75, /* refaddr */
      75, /* reftype */
      75, /* ceil */
      75, /* floor */

};



/* PL_op_private_bitdefs[]: given a starting position in this array (as
 * supplied by PL_op_private_bitdef_ix[]), each word (until a stop bit is
 * seen) defines the meaning of a particular op_private bit for a
 * particular op. Each word consists of:
 *  bit  0:     stop bit: this is the last bit def for the current op
 *  bit  1:     bitfield: if set, this defines a bit field rather than a flag
 *  bits 2..4:  unsigned number in the range 0..7 which is the bit number
 *  bits 5..15: unsigned number in the range 0..2047 which is an index
 *              into PL_op_private_labels[]    (for a flag), or
 *              into PL_op_private_bitfields[] (for a bit field)
 */

EXTCONST U16  PL_op_private_bitdefs[] = {
    0x0003, /* scalar, prototype, refgen, srefgen, readline, regcmaybe, regcreset, regcomp, substcont, chop, schop, defined, undef, study, preinc, i_preinc, predec, i_predec, postinc, i_postinc, postdec, i_postdec, negate, i_negate, not, ucfirst, lcfirst, uc, lc, quotemeta, aeach, avalues, each, pop, shift, grepstart, mapstart, mapwhile, range, and, or, dor, andassign, orassign, dorassign, argcheck, argdefelem, method, method_named, method_super, method_redir, method_redir_super, entergiven, leavegiven, enterwhen, leavewhen, untie, tied, dbmclose, getsockname, getpeername, lstat, stat, readlink, readdir, telldir, rewinddir, closedir, localtime, alarm, require, dofile, entertry, ghbyname, gnbyname, gpbyname, shostent, snetent, sprotoent, sservent, gpwnam, gpwuid, ggrnam, ggrgid, lock, once, fc, anonconst, cmpchain_and, cmpchain_dup, entertrycatch, catch, weaken, unweaken */
    0x30dc, 0x41d9, /* pushmark */
    0x00bd, /* wantarray, runcv */
    0x0438, 0x1a50, 0x428c, 0x3e28, 0x3605, /* const */
    0x30dc, 0x3759, /* gvsv */
    0x18b5, /* gv */
    0x0067, /* gelem, lt, i_lt, gt, i_gt, le, i_le, ge, i_ge, eq, i_eq, ne, i_ne, ncmp, i_ncmp, slt, sgt, sle, sge, seq, sne, scmp, smartmatch, lslice, xor, isa */
    0x30dc, 0x41d8, 0x03d7, /* padsv */
    0x30dc, 0x41d8, 0x05b4, 0x31cc, 0x3fa9, /* padav */
    0x30dc, 0x41d8, 0x05b4, 0x0650, 0x31cc, 0x3fa8, 0x2c41, /* padhv */
    0x30dc, 0x1c38, 0x03d6, 0x31cc, 0x3528, 0x4284, 0x0003, /* rv2gv */
    0x30dc, 0x3758, 0x03d6, 0x4284, 0x0003, /* rv2sv */
    0x31cc, 0x0003, /* av2arylen, akeys, values, keys */
    0x349c, 0x1078, 0x0dd4, 0x014c, 0x4588, 0x4284, 0x0003, /* rv2cv */
    0x05b4, 0x0650, 0x0003, /* ref, blessed */
    0x018f, /* bless, glob, sprintf, formline, unpack, pack, join, anonlist, anonhash, splice, warn, die, reset, exit, close, pipe_op, fileno, umask, binmode, tie, dbmopen, sselect, select, getc, read, enterwrite, sysopen, sysseek, sysread, syswrite, eof, tell, seek, truncate, fcntl, ioctl, send, recv, socket, sockpair, bind, connect, listen, accept, shutdown, gsockopt, ssockopt, open_dir, seekdir, gmtime, shmget, shmctl, shmread, shmwrite, msgget, msgctl, msgsnd, msgrcv, semop, semget, semctl, ghbyaddr, gnbyaddr, gpbynumber, gsbyname, gsbyport, syscall */
    0x393c, 0x3858, 0x2994, 0x28d0, 0x0003, /* backtick */
    0x05b5, /* subst */
    0x117c, 0x22b8, 0x09b4, 0x40ec, 0x2648, 0x4864, 0x07c1, /* trans, transr */
    0x0fbc, 0x04d8, 0x0067, /* sassign */
    0x0c78, 0x0b74, 0x0a70, 0x31cc, 0x05a8, 0x0067, /* aassign */
    0x4630, 0x0003, /* chomp, schomp, scomplement, sin, cos, exp, log, sqrt, int, hex, oct, abs, ord, chr, chroot, rmdir, is_bool, is_weak, refaddr, reftype, ceil, floor */
    0x05b4, 0x31cc, 0x0003, /* pos */
    0x4630, 0x0067, /* pow, multiply, i_multiply, divide, i_divide, modulo, i_modulo, add, i_add, subtract, i_subtract */
    0x1538, 0x0067, /* repeat */
    0x33b8, 0x4630, 0x0067, /* concat */
    0x30dc, 0x0218, 0x1c34, 0x4630, 0x436c, 0x0003, /* multiconcat */
    0x4630, 0x018f, /* stringify, atan2, rand, srand, crypt, push, unshift, flock, chdir, chown, unlink, chmod, utime, rename, link, symlink, mkdir, waitpid, system, exec, kill, getpgrp, setpgrp, getpriority, setpriority, sleep */
    0x4630, 0x4789, /* left_shift, right_shift, nbit_and, nbit_xor, nbit_or, ncomplement */
    0x4789, /* bit_and, bit_xor, bit_or, sbit_and, sbit_xor, sbit_or, complement */
    0x05b4, 0x4630, 0x0003, /* length */
    0x3b90, 0x31cc, 0x012b, /* substr */
    0x31cc, 0x0067, /* vec */
    0x3338, 0x05b4, 0x4630, 0x018f, /* index, rindex */
    0x30dc, 0x3758, 0x05b4, 0x31cc, 0x3fa8, 0x4284, 0x0003, /* rv2av */
    0x025f, /* aelemfast, aelemfast_lex */
    0x30dc, 0x2fd8, 0x03d6, 0x31cc, 0x0067, /* aelem, helem */
    0x30dc, 0x31cc, 0x3fa9, /* aslice, hslice */
    0x31cd, /* kvaslice, kvhslice */
    0x30dc, 0x3ef8, 0x2cf4, 0x0003, /* delete */
    0x44b8, 0x0003, /* exists */
    0x30dc, 0x3758, 0x05b4, 0x0650, 0x31cc, 0x3fa8, 0x4284, 0x2c41, /* rv2hv */
    0x30dc, 0x2fd8, 0x11f4, 0x1b50, 0x31cc, 0x4284, 0x0003, /* multideref */
    0x30dc, 0x3758, 0x02f0, 0x2dec, 0x2709, /* split */
    0x30dc, 0x2379, /* list */
    0x1490, 0x2a2c, 0x3c88, 0x2b24, 0x36c1, /* sort */
    0x2a2c, 0x0003, /* reverse */
    0x05b4, 0x0003, /* grepwhile */
    0x2e78, 0x0003, /* flip, flop */
    0x30dc, 0x0003, /* cond_expr */
    0x30dc, 0x1078, 0x03d6, 0x014c, 0x4588, 0x4284, 0x27e1, /* entersub */
    0x39f8, 0x0003, /* leavesub, leavesublv, leavewrite, leaveeval */
    0x02aa, 0x0003, /* argelem */
    0x00bc, 0x018f, /* caller */
    0x2555, /* nextstate, dbstate */
    0x2f7c, 0x39f9, /* leave */
    0x30dc, 0x3758, 0x10ec, 0x3d05, /* enteriter */
    0x3d05, /* iter */
    0x2f7c, 0x0067, /* leaveloop */
    0x499c, 0x0003, /* last, next, redo, dump, goto */
    0x393c, 0x3858, 0x2994, 0x28d0, 0x018f, /* open */
    0x1ef0, 0x214c, 0x2008, 0x1dc4, 0x0003, /* ftrread, ftrwrite, ftrexec, fteread, ftewrite, fteexec */
    0x1ef0, 0x214c, 0x2008, 0x0003, /* ftis, ftsize, ftmtime, ftatime, ftctime, ftrowned, fteowned, ftzero, ftsock, ftchr, ftblk, ftfile, ftdir, ftpipe, ftsuid, ftsgid, ftsvtx, ftlink, fttty, fttext, ftbinary */
    0x4631, /* wait, getppid, time */
    0x3a94, 0x0e90, 0x070c, 0x4708, 0x2464, 0x0003, /* entereval */
    0x329c, 0x0018, 0x13a4, 0x12c1, /* coreargs */
    0x31cc, 0x00c7, /* avhvswitch */
    0x30dc, 0x01fb, /* padrange */
    0x30dc, 0x41d8, 0x04f6, 0x2bac, 0x19a8, 0x0067, /* refassign */
    0x30dc, 0x41d8, 0x04f6, 0x2bac, 0x19a8, 0x0003, /* lvref */
    0x30dd, /* lvrefslice */
    0x30dc, 0x41d8, 0x0003, /* lvavref */
    0x1cdc, 0x0003, /* pushdefer */

};


/* PL_op_private_valid: for each op, indexed by op_type, indicate which
 * flags bits in op_private are legal */

EXTCONST U8 PL_op_private_valid[] = {
    /* NULL       */ (0xff),
    /* STUB       */ (0),
    /* SCALAR     */ (OPpARG1_MASK),
    /* PUSHMARK   */ (OPpPAD_STATE|OPpLVAL_INTRO),
    /* WANTARRAY  */ (OPpOFFBYONE),
    /* CONST      */ (OPpCONST_NOVER|OPpCONST_SHORTCIRCUIT|OPpCONST_STRICT|OPpCONST_ENTERED|OPpCONST_BARE),
    /* GVSV       */ (OPpOUR_INTRO|OPpLVAL_INTRO),
    /* GV         */ (OPpEARLY_CV),
    /* GELEM      */ (OPpARG2_MASK),
    /* PADSV      */ (OPpDEREF|OPpPAD_STATE|OPpLVAL_INTRO),
    /* PADAV      */ (OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpTRUEBOOL|OPpPAD_STATE|OPpLVAL_INTRO),
    /* PADHV      */ (OPpPADHV_ISKEYS|OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpMAYBE_TRUEBOOL|OPpTRUEBOOL|OPpPAD_STATE|OPpLVAL_INTRO),
    /* PADANY     */ (0),
    /* RV2GV      */ (OPpARG1_MASK|OPpHINT_STRICT_REFS|OPpDONT_INIT_GV|OPpMAYBE_LVSUB|OPpDEREF|OPpALLOW_FAKE|OPpLVAL_INTRO),
    /* RV2SV      */ (OPpARG1_MASK|OPpHINT_STRICT_REFS|OPpDEREF|OPpOUR_INTRO|OPpLVAL_INTRO),
    /* AV2ARYLEN  */ (OPpARG1_MASK|OPpMAYBE_LVSUB),
    /* RV2CV      */ (OPpARG1_MASK|OPpHINT_STRICT_REFS|OPpENTERSUB_HASTARG|OPpENTERSUB_AMPER|OPpMAY_RETURN_CONSTANT|OPpENTERSUB_DB|OPpENTERSUB_NOPAREN),
    /* ANONCODE   */ (0),
    /* PROTOTYPE  */ (OPpARG1_MASK),
    /* REFGEN     */ (OPpARG1_MASK),
    /* SREFGEN    */ (OPpARG1_MASK),
    /* REF        */ (OPpARG1_MASK|OPpMAYBE_TRUEBOOL|OPpTRUEBOOL),
    /* BLESS      */ (OPpARG4_MASK),
    /* BACKTICK   */ (OPpARG1_MASK|OPpOPEN_IN_RAW|OPpOPEN_IN_CRLF|OPpOPEN_OUT_RAW|OPpOPEN_OUT_CRLF),
    /* GLOB       */ (OPpARG4_MASK),
    /* READLINE   */ (OPpARG1_MASK),
    /* RCATLINE   */ (0),
    /* REGCMAYBE  */ (OPpARG1_MASK),
    /* REGCRESET  */ (OPpARG1_MASK),
    /* REGCOMP    */ (OPpARG1_MASK),
    /* MATCH      */ (0),
    /* QR         */ (0),
    /* SUBST      */ (OPpTRUEBOOL),
    /* SUBSTCONT  */ (OPpARG1_MASK),
    /* TRANS      */ (OPpTRANS_CAN_FORCE_UTF8|OPpTRANS_USE_SVOP|OPpTRANS_IDENTICAL|OPpTRANS_SQUASH|OPpTRANS_COMPLEMENT|OPpTRANS_GROWS|OPpTRANS_DELETE),
    /* TRANSR     */ (OPpTRANS_CAN_FORCE_UTF8|OPpTRANS_USE_SVOP|OPpTRANS_IDENTICAL|OPpTRANS_SQUASH|OPpTRANS_COMPLEMENT|OPpTRANS_GROWS|OPpTRANS_DELETE),
    /* SASSIGN    */ (OPpARG2_MASK|OPpASSIGN_BACKWARDS|OPpASSIGN_CV_TO_GV),
    /* AASSIGN    */ (OPpARG2_MASK|OPpASSIGN_TRUEBOOL|OPpMAYBE_LVSUB|OPpASSIGN_COMMON_AGG|OPpASSIGN_COMMON_RC1|OPpASSIGN_COMMON_SCALAR),
    /* CHOP       */ (OPpARG1_MASK),
    /* SCHOP      */ (OPpARG1_MASK),
    /* CHOMP      */ (OPpARG1_MASK|OPpTARGET_MY),
    /* SCHOMP     */ (OPpARG1_MASK|OPpTARGET_MY),
    /* DEFINED    */ (OPpARG1_MASK),
    /* UNDEF      */ (OPpARG1_MASK),
    /* STUDY      */ (OPpARG1_MASK),
    /* POS        */ (OPpARG1_MASK|OPpMAYBE_LVSUB|OPpTRUEBOOL),
    /* PREINC     */ (OPpARG1_MASK),
    /* I_PREINC   */ (OPpARG1_MASK),
    /* PREDEC     */ (OPpARG1_MASK),
    /* I_PREDEC   */ (OPpARG1_MASK),
    /* POSTINC    */ (OPpARG1_MASK),
    /* I_POSTINC  */ (OPpARG1_MASK),
    /* POSTDEC    */ (OPpARG1_MASK),
    /* I_POSTDEC  */ (OPpARG1_MASK),
    /* POW        */ (OPpARG2_MASK|OPpTARGET_MY),
    /* MULTIPLY   */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_MULTIPLY */ (OPpARG2_MASK|OPpTARGET_MY),
    /* DIVIDE     */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_DIVIDE   */ (OPpARG2_MASK|OPpTARGET_MY),
    /* MODULO     */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_MODULO   */ (OPpARG2_MASK|OPpTARGET_MY),
    /* REPEAT     */ (OPpARG2_MASK|OPpREPEAT_DOLIST),
    /* ADD        */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_ADD      */ (OPpARG2_MASK|OPpTARGET_MY),
    /* SUBTRACT   */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_SUBTRACT */ (OPpARG2_MASK|OPpTARGET_MY),
    /* CONCAT     */ (OPpARG2_MASK|OPpTARGET_MY|OPpCONCAT_NESTED),
    /* MULTICONCAT */ (OPpARG1_MASK|OPpMULTICONCAT_STRINGIFY|OPpTARGET_MY|OPpMULTICONCAT_FAKE|OPpMULTICONCAT_APPEND|OPpLVAL_INTRO),
    /* STRINGIFY  */ (OPpARG4_MASK|OPpTARGET_MY),
    /* LEFT_SHIFT */ (OPpUSEINT|OPpTARGET_MY),
    /* RIGHT_SHIFT */ (OPpUSEINT|OPpTARGET_MY),
    /* LT         */ (OPpARG2_MASK),
    /* I_LT       */ (OPpARG2_MASK),
    /* GT         */ (OPpARG2_MASK),
    /* I_GT       */ (OPpARG2_MASK),
    /* LE         */ (OPpARG2_MASK),
    /* I_LE       */ (OPpARG2_MASK),
    /* GE         */ (OPpARG2_MASK),
    /* I_GE       */ (OPpARG2_MASK),
    /* EQ         */ (OPpARG2_MASK),
    /* I_EQ       */ (OPpARG2_MASK),
    /* NE         */ (OPpARG2_MASK),
    /* I_NE       */ (OPpARG2_MASK),
    /* NCMP       */ (OPpARG2_MASK),
    /* I_NCMP     */ (OPpARG2_MASK),
    /* SLT        */ (OPpARG2_MASK),
    /* SGT        */ (OPpARG2_MASK),
    /* SLE        */ (OPpARG2_MASK),
    /* SGE        */ (OPpARG2_MASK),
    /* SEQ        */ (OPpARG2_MASK),
    /* SNE        */ (OPpARG2_MASK),
    /* SCMP       */ (OPpARG2_MASK),
    /* BIT_AND    */ (OPpUSEINT),
    /* BIT_XOR    */ (OPpUSEINT),
    /* BIT_OR     */ (OPpUSEINT),
    /* NBIT_AND   */ (OPpUSEINT|OPpTARGET_MY),
    /* NBIT_XOR   */ (OPpUSEINT|OPpTARGET_MY),
    /* NBIT_OR    */ (OPpUSEINT|OPpTARGET_MY),
    /* SBIT_AND   */ (OPpUSEINT),
    /* SBIT_XOR   */ (OPpUSEINT),
    /* SBIT_OR    */ (OPpUSEINT),
    /* NEGATE     */ (OPpARG1_MASK),
    /* I_NEGATE   */ (OPpARG1_MASK),
    /* NOT        */ (OPpARG1_MASK),
    /* COMPLEMENT */ (OPpUSEINT),
    /* NCOMPLEMENT */ (OPpUSEINT|OPpTARGET_MY),
    /* SCOMPLEMENT */ (OPpARG1_MASK|OPpTARGET_MY),
    /* SMARTMATCH */ (OPpARG2_MASK),
    /* ATAN2      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SIN        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* COS        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* RAND       */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SRAND      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* EXP        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* LOG        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* SQRT       */ (OPpARG1_MASK|OPpTARGET_MY),
    /* INT        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* HEX        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* OCT        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* ABS        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* LENGTH     */ (OPpARG1_MASK|OPpTARGET_MY|OPpTRUEBOOL),
    /* SUBSTR     */ (OPpARG3_MASK|OPpMAYBE_LVSUB|OPpSUBSTR_REPL_FIRST),
    /* VEC        */ (OPpARG2_MASK|OPpMAYBE_LVSUB),
    /* INDEX      */ (OPpARG4_MASK|OPpTARGET_MY|OPpTRUEBOOL|OPpINDEX_BOOLNEG),
    /* RINDEX     */ (OPpARG4_MASK|OPpTARGET_MY|OPpTRUEBOOL|OPpINDEX_BOOLNEG),
    /* SPRINTF    */ (OPpARG4_MASK),
    /* FORMLINE   */ (OPpARG4_MASK),
    /* ORD        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* CHR        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* CRYPT      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* UCFIRST    */ (OPpARG1_MASK),
    /* LCFIRST    */ (OPpARG1_MASK),
    /* UC         */ (OPpARG1_MASK),
    /* LC         */ (OPpARG1_MASK),
    /* QUOTEMETA  */ (OPpARG1_MASK),
    /* RV2AV      */ (OPpARG1_MASK|OPpHINT_STRICT_REFS|OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpTRUEBOOL|OPpOUR_INTRO|OPpLVAL_INTRO),
    /* AELEMFAST  */ (255),
    /* AELEMFAST_LEX */ (255),
    /* AELEM      */ (OPpARG2_MASK|OPpMAYBE_LVSUB|OPpDEREF|OPpLVAL_DEFER|OPpLVAL_INTRO),
    /* ASLICE     */ (OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpLVAL_INTRO),
    /* KVASLICE   */ (OPpMAYBE_LVSUB),
    /* AEACH      */ (OPpARG1_MASK),
    /* AVALUES    */ (OPpARG1_MASK),
    /* AKEYS      */ (OPpARG1_MASK|OPpMAYBE_LVSUB),
    /* EACH       */ (OPpARG1_MASK),
