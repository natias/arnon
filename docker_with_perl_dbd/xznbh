
=item * ASN1_INTEGER_free

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Free an allocated ASN1_INTEGER structure.

    Net::SSLeay::ASN1_INTEGER_free($i);
    # $i - value corresponding to openssl's ASN1_INTEGER structure
    #
    # returns: no return value

=item * ASN1_INTEGER_get

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns integer value of given ASN1_INTEGER object.

B<BEWARE:> If the value stored in ASN1_INTEGER is greater than max. integer that can be stored
in 'long' type (usually 32bit but may vary according to platform) then this function will return -1.
For getting large ASN1_INTEGER values consider using L</P_ASN1_INTEGER_get_dec> or L</P_ASN1_INTEGER_get_hex>.

    my $rv = Net::SSLeay::ASN1_INTEGER_get($a);
    # $a - value corresponding to openssl's ASN1_INTEGER structure
    #
    # returns: integer value of ASN1_INTEGER object in $a

=item * ASN1_INTEGER_set

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sets value of given ASN1_INTEGER object to value $val

B<BEWARE:> $val has max. limit (= max. integer that can be stored in 'long' type).
For setting large ASN1_INTEGER values consider using L</P_ASN1_INTEGER_set_dec> or L</P_ASN1_INTEGER_set_hex>.

    my $rv = Net::SSLeay::ASN1_INTEGER_set($i, $val);
    # $i - value corresponding to openssl's ASN1_INTEGER structure
    # $val - integer value
    #
    # returns: 1 on success, 0 on failure

=item * P_ASN1_INTEGER_get_dec

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns string with decimal representation of integer value of given ASN1_INTEGER object.

    Net::SSLeay::P_ASN1_INTEGER_get_dec($i);
    # $i - value corresponding to openssl's ASN1_INTEGER structure
    #
    # returns: string with decimal representation

=item * P_ASN1_INTEGER_get_hex

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns string with hexadecimal representation of integer value of given ASN1_INTEGER object.

    Net::SSLeay::P_ASN1_INTEGER_get_hex($i);
    # $i - value corresponding to openssl's ASN1_INTEGER structure
    #
    # returns: string with hexadecimal representation

=item * P_ASN1_INTEGER_set_dec

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sets value of given ASN1_INTEGER object to value $val (decimal string, suitable for large integers)

    Net::SSLeay::P_ASN1_INTEGER_set_dec($i, $str);
    # $i - value corresponding to openssl's ASN1_INTEGER structure
    # $str - string with decimal representation
    #
    # returns: 1 on success, 0 on failure

=item * P_ASN1_INTEGER_set_hex

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sets value of given ASN1_INTEGER object to value $val (hexadecimal string, suitable for large integers)

    Net::SSLeay::P_ASN1_INTEGER_set_hex($i, $str);
    # $i - value corresponding to openssl's ASN1_INTEGER structure
    # $str - string with hexadecimal representation
    #
    # returns: 1 on success, 0 on failure

=back

=head3 Low level API: ASN1_STRING_* related functions

=over

=item * P_ASN1_STRING_get

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns string value of given ASN1_STRING object.

    Net::SSLeay::P_ASN1_STRING_get($s, $utf8_decode);
    # $s - value corresponding to openssl's ASN1_STRING structure
    # $utf8_decode - [optional] 0 or 1 whether the returned value should be utf8 decoded (default=0)
    #
    # returns: string

    $string = Net::SSLeay::P_ASN1_STRING_get($s);
    # is the same as:
    $string = Net::SSLeay::P_ASN1_STRING_get($s, 0);

=back

=head3 Low level API: ASN1_TIME_* related functions

=over

=item * ASN1_TIME_new

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

    my $time = ASN1_TIME_new();
    # returns: value corresponding to openssl's ASN1_TIME structure

=item * ASN1_TIME_free

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

    ASN1_TIME_free($time);
    # $time - value corresponding to openssl's ASN1_TIME structure

=item * ASN1_TIME_set

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

    ASN1_TIME_set($time, $t);
    # $time - value corresponding to openssl's ASN1_TIME structure
    # $t - time value in seconds since 1.1.1970

B<BEWARE:> It is platform dependent how this function will handle dates after 2038.
Although perl's integer is large enough the internal implementation of this function
is dependent on the size of time_t structure (32bit time_t has problem with 2038).

If you want to safely set date and time after 2038 use function L</P_ASN1_TIME_set_isotime>.

=item * P_ASN1_TIME_get_isotime

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

B<NOTE:> Does not exactly correspond to any low level API function

Gives ISO-8601 string representation of ASN1_TIME structure.

    my $datetime_string = P_ASN1_TIME_get_isotime($time);
    # $time - value corresponding to openssl's ASN1_TIME structure
    #
    # returns: datetime string like '2033-05-16T20:39:37Z' or '' on failure

The output format is compatible with module L<DateTime::Format::RFC3339>

=item * P_ASN1_TIME_set_isotime

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

B<NOTE:> Does not exactly correspond to any low level API function

Sets time and date value of ANS1_time structure.

    my $rv = P_ASN1_TIME_set_isotime($time, $string);
    # $time - value corresponding to openssl's ASN1_TIME structure
    # $string - ISO-8601 timedate string like '2033-05-16T20:39:37Z'
    #
    # returns: 1 on success, 0 on failure

The C<$string> parameter has to be in full form like C<"2012-03-22T23:55:33"> or
C<"2012-03-22T23:55:33Z"> or C<"2012-03-22T23:55:33CET">. Short forms like
C<"2012-03-22T23:55"> or C<"2012-03-22"> are not supported.

=item * P_ASN1_TIME_put2string

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before, has bugs with OpenSSL 0.9.8i

B<NOTE:> Does not exactly correspond to any low level API function

Gives string representation of ASN1_TIME structure.

    my $str = P_ASN1_TIME_put2string($time);
    # $time - value corresponding to openssl's ASN1_TIME structure
    #
    # returns: datetime string like 'May 16 20:39:37 2033 GMT'

=item * P_ASN1_UTCTIME_put2string

B<NOTE:> deprecated function, only for backward compatibility, just an alias
for L</P_ASN1_TIME_put2string>

=back

=head3 Low level API: X509_* related functions

=over

=item * X509_new

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Allocates and initializes a X509 structure.

    my $rv = Net::SSLeay::X509_new();
    #
    # returns: value corresponding to openssl's X509 structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_new.html>

=item * X509_free

Frees up the X509 structure.

    Net::SSLeay::X509_free($a);
    # $a - value corresponding to openssl's X509 structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_new.html>

=item * X509_check_host

B<COMPATIBILITY:> not available in Net-SSLeay-1.68 and before; requires at least OpenSSL 1.0.2. X509_CHECK_FLAG_NEVER_CHECK_SUBJECT requires OpenSSL 1.1.0.

Checks if the certificate Subject Alternative Name (SAN) or Subject CommonName
(CN) matches the specified host name.

    my $rv = Net::SSLeay::X509_check_host($cert, $name, $flags, $peername);
    # $cert - value corresponding to openssl's X509 structure
    # $name - host name to check
    # $flags (optional, default: 0) - can be the bitwise OR of:
    #   &Net::SSLeay::X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT
    #   &Net::SSLeay::X509_CHECK_FLAG_NO_WILDCARDS
    #   &Net::SSLeay::X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS
    #   &Net::SSLeay::X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS
    #   &Net::SSLeay::X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS
    #   &Net::SSLeay::X509_CHECK_FLAG_NEVER_CHECK_SUBJECT
    # $peername (optional) - If not omitted and $host matches $cert,
    #                        a copy of the matching SAN or CN from
    #                        the peer certificate is stored in $peername.
    #
    # returns:
    #   1 for a successful match
    #   0 for a failed match
    #  -1 for an internal error
    #  -2 if the input is malformed

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_check_host.html>.

=item * X509_check_email

B<COMPATIBILITY:> not available in Net-SSLeay-1.68 and before; requires at least OpenSSL 1.0.2.

Checks if the certificate matches the specified email address.

    my $rv = Net::SSLeay::X509_check_email($cert, $address, $flags);
    # $cert - value corresponding to openssl's X509 structure
    # $address - email address to check
    # $flags (optional, default: 0) - see X509_check_host()
    #
    # returns: see X509_check_host()

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_check_email.html>.

=item * X509_check_ip

B<COMPATIBILITY:> not available in Net-SSLeay-1.68 and before; requires at least OpenSSL 1.0.2.

Checks if the certificate matches the specified IPv4 or IPv6 address.

    my $rv = Net::SSLeay::X509_check_ip($cert, $address, $flags);
    # $cert - value corresponding to openssl's X509 structure
    # $address - IP address to check in binary format, in network byte order
    # $flags (optional, default: 0) - see X509_check_host()
    #
    # returns: see X509_check_host()

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_check_ip.html>.

=item * X509_check_ip_asc

B<COMPATIBILITY:> not available in Net-SSLeay-1.68 and before; requires at least OpenSSL 1.0.2.

Checks if the certificate matches the specified IPv4 or IPv6 address.

    my $rv = Net::SSLeay::X509_check_ip_asc($cert, $address, $flags);
    # $cert - value corresponding to openssl's X509 structure
    # $address - IP address to check in text representation
    # $flags (optional, default: 0) - see X509_check_host()
    #
    # returns: see X509_check_host()

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_check_ip_asc.html>.

=item * X509_certificate_type

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns bitmask with type of certificate $x.

    my $rv = Net::SSLeay::X509_certificate_type($x);
    # $x - value corresponding to openssl's X509 structure
    #
    # returns: (integer) bitmask with certificate type

    # to decode bitmask returned by this function use these constants:
    # &Net::SSLeay::EVP_PKS_DSA
    # &Net::SSLeay::EVP_PKS_EC
    # &Net::SSLeay::EVP_PKS_RSA
    # &Net::SSLeay::EVP_PKT_ENC
    # &Net::SSLeay::EVP_PKT_EXCH
    # &Net::SSLeay::EVP_PKT_EXP
    # &Net::SSLeay::EVP_PKT_SIGN
    # &Net::SSLeay::EVP_PK_DH
    # &Net::SSLeay::EVP_PK_DSA
    # &Net::SSLeay::EVP_PK_EC
    # &Net::SSLeay::EVP_PK_RSA

=item * X509_digest

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Computes digest/fingerprint of X509 $data using $type hash function.

    my $digest_value = Net::SSLeay::X509_digest($data, $type);
    # $data - value corresponding to openssl's X509 structure
    # $type - value corresponding to openssl's EVP_MD structure - e.g. got via EVP_get_digestbyname()
    #
    # returns: hash value (binary)

    # to get printable (hex) value of digest use:
    print unpack('H*', $digest_value);

=item * X509_issuer_and_serial_hash

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sort of a checksum of issuer name and serial number of X509 certificate $x.
The result is not a full hash (e.g. sha-1), it is kind-of-a-hash truncated to the size of 'unsigned long' (32 bits).
The resulting value might differ across different openssl versions for the same X509 certificate.

    my $rv = Net::SSLeay::X509_issuer_and_serial_hash($x);
    # $x - value corresponding to openssl's X509 structure
    #
    # returns: number representing checksum

=item * X509_issuer_name_hash

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sort of a checksum of issuer name of X509 certificate $x.
The result is not a full hash (e.g. sha-1), it is kind-of-a-hash truncated to the size of 'unsigned long' (32 bits).
The resulting value might differ across different openssl versions for the same X509 certificate.

    my $rv = Net::SSLeay::X509_issuer_name_hash($x);
    # $x - value corresponding to openssl's X509 structure
    #
    # returns: number representing checksum

=item * X509_subject_name_hash

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sort of a checksum of subject name of X509 certificate $x.
The result is not a full hash (e.g. sha-1), it is kind-of-a-hash truncated to the size of 'unsigned long' (32 bits).
The resulting value might differ across different openssl versions for the same X509 certificate.

    my $rv = Net::SSLeay::X509_subject_name_hash($x);
    # $x - value corresponding to openssl's X509 structure
    #
    # returns: number representing checksum

=item * X509_pubkey_digest

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Computes digest/fingerprint of public key from X509 certificate $data using $type hash function.

    my $digest_value = Net::SSLeay::X509_pubkey_digest($data, $type);
    # $data - value corresponding to openssl's X509 structure
    # $type - value corresponding to openssl's EVP_MD structure - e.g. got via EVP_get_digestbyname()
    #
    # returns: hash value (binary)

    # to get printable (hex) value of digest use:
    print unpack('H*', $digest_value);

=item * X509_set_issuer_name

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sets issuer of X509 certificate $x to $name.

    my $rv = Net::SSLeay::X509_set_issuer_name($x, $name);
    # $x - value corresponding to openssl's X509 structure
    # $name - value corresponding to openssl's X509_NAME structure
    #
    # returns: 1 on success, 0 on failure

=item * X509_set_pubkey

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sets public key of X509 certificate $x to $pkey.

    my $rv = Net::SSLeay::X509_set_pubkey($x, $pkey);
    # $x - value corresponding to openssl's X509 structure
    # $pkey - value corresponding to openssl's EVP_PKEY structure
    #
    # returns: 1 on success, 0 on failure

=item * X509_set_serialNumber

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sets serial number of X509 certificate $x to $serial.

    my $rv = Net::SSLeay::X509_set_serialNumber($x, $serial);
    # $x - value corresponding to openssl's X509 structure
    # $serial - value corresponding to openssl's ASN1_INTEGER structure
    #
    # returns: 1 on success, 0 on failure

    # to create $serial value use one of these:
    $serial = Net::SSLeay::P_ASN1_INTEGER_set_hex('45ad6f');
    $serial = Net::SSLeay::P_ASN1_INTEGER_set_dec('7896541238529631478');
    $serial = Net::SSLeay::ASN1_INTEGER_set(45896);

=item * X509_set_subject_name

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sets subject of X509 certificate $x to $name.

    my $rv = Net::SSLeay::X509_set_subject_name($x, $name);
    # $x - value corresponding to openssl's X509 structure
    # $name - value corresponding to openssl's X509_NAME structure
    #
    # returns: 1 on success, 0 on failure

=item * X509_set_version

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Set 'version' value for X509 certificate $ to $version.

    my $rv = Net::SSLeay::X509_set_version($x, $version);
    # $x - value corresponding to openssl's X509 structure
    # $version - (integer) version number
    #
    # returns: 1 on success, 0 on failure

=item * X509_sign

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Sign X509 certificate $x with private key $pkey (using digest algorithm $md).

    my $rv = Net::SSLeay::X509_sign($x, $pkey, $md);
    # $x - value corresponding to openssl's X509 structure
    # $pkey - value corresponding to openssl's EVP_PKEY structure
    # $md - value corresponding to openssl's EVP_MD structure
    #
    # returns: 1 on success, 0 on failure

=item * X509_verify

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Verifies X509 object $a using public key $r (pubkey of issuing CA).

    my $rv = Net::SSLeay::X509_verify($x, $r);
    # $x - value corresponding to openssl's X509 structure
    # $r - value corresponding to openssl's EVP_PKEY structure
    #
    # returns: 0 - verify failure, 1 - verify OK, <0 - error

=item * X509_get_ext_count

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns the total number of extensions in X509 object $x.

    my $rv = Net::SSLeay::X509_get_ext_count($x);
    # $x - value corresponding to openssl's X509 structure
    #
    # returns: count of extensions

=item * X509_get_pubkey

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns public key corresponding to given X509 object $x.

    my $rv = Net::SSLeay::X509_get_pubkey($x);
    # $x - value corresponding to openssl's X509 structure
    #
    # returns: value corresponding to openssl's EVP_PKEY structure (0 on failure)

B<NOTE:> This method returns only the public key's key bits, without the
algorithm or parameters.  Use C<X509_get_X509_PUBKEY()> to return the full
public key (SPKI) instead.

=item * X509_get_X509_PUBKEY

B<COMPATIBILITY:> not available in Net-SSLeay-1.72 and before

Returns the full public key (SPKI) of given X509 certificate $x.

    Net::SSLeay::X509_get_X509_PUBKEY($x);
    # $x - value corresponding to openssl's X509 structure
    #
    # returns: public key data in DER format (binary)

=item * X509_get_serialNumber

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns serial number of X509 certificate $x.

    my $rv = Net::SSLeay::X509_get_serialNumber($x);
    # $x - value corresponding to openssl's X509 structure
    #
    # returns: value corresponding to openssl's ASN1_INTEGER structure (0 on failure)

See L</P_ASN1_INTEGER_get_dec>, L</P_ASN1_INTEGER_get_hex> or L</ASN1_INTEGER_get> to decode ASN1_INTEGER object.

=item * X509_get0_serialNumber

B<COMPATIBILITY:> available in Net-SSLeay-1.86 onwards

X509_get0_serialNumber() is the same as X509_get_serialNumber() except it accepts a const parameter and returns a const result.

=item * X509_get_version

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns 'version' value of given X509 certificate $x.

    my $rv = Net::SSLeay::X509_get_version($x);
    # $x - value corresponding to openssl's X509 structure
    #
    # returns: (integer) version

=item * X509_get_ext

Returns X509_EXTENSION from $x509 based on given position/index.

    my $rv = Net::SSLeay::X509_get_ext($x509, $index);
    # $x509 - value corresponding to openssl's X509 structure
    # $index - (integer) position/index of extension within $x509
    #
    # returns: value corresponding to openssl's X509_EXTENSION structure (0 on failure)

=item * X509_get_ext_by_NID

Returns X509_EXTENSION from $x509 based on given NID.

    my $rv = Net::SSLeay::X509_get_ext_by_NID($x509, $nid, $loc);
    # $x509 - value corresponding to openssl's X509 structure
    # $nid - (integer) NID value
    # $loc - (integer) position to start lookup at
    #
    # returns: position/index of extension, negative value on error
    #          call Net::SSLeay::X509_get_ext($x509, $rv) to get the actual extension

=item * X509_get_fingerprint

Returns fingerprint of certificate $cert.

B<NOTE:> Does not exactly correspond to any low level API function. The implementation
is based on openssl's C<X509_digest()>.

    Net::SSLeay::X509_get_fingerprint($x509, $type);
    # $x509 - value corresponding to openssl's X509 structure
    # $type - (string) digest type, currently supported values:
    #         "md5"
    #         "sha1"
    #         "sha256"
    #         "ripemd160"
    #
    # returns: certificate digest - hexadecimal string (NOT binary data!)

=item * X509_get_issuer_name

Return an X509_NAME object representing the issuer of the certificate $cert.

    my $rv = Net::SSLeay::X509_get_issuer_name($cert);
    # $cert - value corresponding to openssl's X509 structure
    #
    # returns: value corresponding to openssl's X509_NAME structure (0 on failure)

=item * X509_get0_notAfter, X509_getm_notAfter and X509_get_notAfter

B<COMPATIBILITY:> X509_get0_notAfter and X509_getm_notAfter are not available in Net-SSLeay-1.92 and before

Return an object giving the time after which the certificate $cert is not valid.

    my $rv  = Net::SSLeay::X509_get0_notAfter($cert);
    my $rvm = Net::SSLeay::X509_getm_notAfter($cert);
    # $cert - value corresponding to openssl's X509 structure
    #
    # returns: $rv  read-only value corresponding to openssl's ASN1_TIME structure
    #          $rvm mutable   value corresponding to openssl's ASN1_TIME structure

To get human readable/printable form the return value you can use:

    my $time = Net::SSLeay::X509_get_notAfter($cert);
    print "notAfter=", Net::SSLeay::P_ASN1_TIME_get_isotime($time), "\n";

B<NOTE:> X509_get_notAfter is an alias and deprecated in OpenSSL 1.1.0 and later

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_get0_notAfter.html>

=item * X509_get0_notBefore, X509_getm_notBefore and X509_get_notBefore

B<COMPATIBILITY:> X509_get0_notBefore and X509_getm_notBefore are not available in Net-SSLeay-1.92 and before

Return an object giving the time before which the certificate $cert is not valid

    my $rv  = Net::SSLeay::X509_get0_notBefore($cert);
    my $rvm = Net::SSLeay::X509_getm_notBefore($cert);
    # $cert - value corresponding to openssl's X509 structure
    #
    # returns: $rv  read-only value corresponding to openssl's ASN1_TIME structure
    #          $rvm mutable   value corresponding to openssl's ASN1_TIME structure

To get human readable/printable form the return value you can use:

    my $time = Net::SSLeay::X509_get_notBefore($cert);
    print "notBefore=", Net::SSLeay::P_ASN1_TIME_get_isotime($time), "\n";

B<NOTE:> X509_get_notBefore is an alias and deprecated in OpenSSL 1.1.0 and later

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_get0_notBefore.html>

=item * X509_get_subjectAltNames

B<NOTE:> Does not exactly correspond to any low level API function.

Returns the list of alternative subject names from X509 certificate $cert.

    my @rv = Net::SSLeay::X509_get_subjectAltNames($cert);
    # $cert - value corresponding to openssl's X509 structure
    #
    # returns: list containing pairs - name_type (integer), name_value (string)
    #          where name_type can be:
    #          0 - GEN_OTHERNAME
    #          1 - GEN_EMAIL
    #          2 - GEN_DNS
    #          3 - GEN_X400
    #          4 - GEN_DIRNAME
    #          5 - GEN_EDIPARTY
    #          6 - GEN_URI
    #          7 - GEN_IPADD
    #          8 - GEN_RID

Note: type 7 - GEN_IPADD contains the IP address as a packed binary
address. GEN_RID is available in Net-SSLeay-1.90 and later. Maximum
length for returned RID string is currently 2500. Invalid and overly
long RID values are skipped and not returned. GEN_X400 and
GEN_EDIPARTY are not supported and will not be returned even when
present in the certificate.

=item * X509_get_subject_name

Returns the subject of the certificate $cert.

    my $rv = Net::SSLeay::X509_get_subject_name($cert);
    # $cert - value corresponding to openssl's X509 structure
    #
    # returns: value corresponding to openssl's X509_NAME structure (0 on failure)

=item * X509_gmtime_adj

Adjust the ASN1_TIME object to the timestamp (in GMT).

    my $rv = Net::SSLeay::X509_gmtime_adj($s, $adj);
    # $s - value corresponding to openssl's ASN1_TIME structure
    # $adj - timestamp (seconds since 1.1.1970)
    #
    # returns: value corresponding to openssl's ASN1_TIME structure (0 on failure)

B<BEWARE:> this function may fail for dates after 2038 as it is dependent on time_t size on your
system (32bit time_t does not work after 2038). Consider using L</P_ASN1_TIME_set_isotime> instead).

=item * X509_load_cert_crl_file

Takes PEM file and loads all X509 certificates and X509 CRLs from that file into X509_LOOKUP structure.

    my $rv = Net::SSLeay::X509_load_cert_crl_file($ctx, $file, $type);
    # $ctx - value corresponding to openssl's X509_LOOKUP structure
    # $file - (string) file name
    # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
    #                          if not FILETYPE_PEM then behaves as Net::SSLeay::X509_load_cert_file()
    #
    # returns: 1 on success, 0 on failure

=item * X509_load_cert_file

Loads/adds X509 certificate from $file to X509_LOOKUP structure

    my $rv = Net::SSLeay::X509_load_cert_file($ctx, $file, $type);
    # $ctx - value corresponding to openssl's X509_LOOKUP structure
    # $file - (string) file name
    # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
    #
    # returns: 1 on success, 0 on failure

=item * X509_load_crl_file

Loads/adds X509 CRL from $file to X509_LOOKUP structure

    my $rv = Net::SSLeay::X509_load_crl_file($ctx, $file, $type);
    # $ctx - value corresponding to openssl's X509_LOOKUP structure
    # $file - (string) file name
    # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
    #
    # returns: 1 on success, 0 on failure

=item * X509_policy_level_get0_node

B<COMPATIBILITY:> no longer available in LibreSSL 3.8.0 and later

??? (more info needed)

    my $rv = Net::SSLeay::X509_policy_level_get0_node($level, $i);
    # $level - value corresponding to openssl's X509_POLICY_LEVEL structure
    # $i - (integer) index/position
    #
    # returns: value corresponding to openssl's X509_POLICY_NODE structure (0 on failure)

=item * X509_policy_level_node_count

B<COMPATIBILITY:> no longer available in LibreSSL 3.8.0 and later

??? (more info needed)

    my $rv = Net::SSLeay::X509_policy_level_node_count($level);
    # $level - value corresponding to openssl's X509_POLICY_LEVEL structure
    #
    # returns: (integer) node count

=item * X509_policy_node_get0_parent

B<COMPATIBILITY:> no longer available in LibreSSL 3.8.0 and later

??? (more info needed)

    my $rv = Net::SSLeay::X509_policy_node_get0_parent($node);
    # $node - value corresponding to openssl's X509_POLICY_NODE structure
    #
    # returns: value corresponding to openssl's X509_POLICY_NODE structure (0 on failure)

=item * X509_policy_node_get0_policy

B<COMPATIBILITY:> no longer available in LibreSSL 3.8.0 and later

??? (more info needed)

    my $rv = Net::SSLeay::X509_policy_node_get0_policy($node);
    # $node - value corresponding to openssl's X509_POLICY_NODE structure
    #
    # returns: value corresponding to openssl's ASN1_OBJECT structure (0 on failure)

=item * X509_policy_node_get0_qualifiers

B<COMPATIBILITY:> no longer available in LibreSSL 3.8.0 and later

??? (more info needed)

    my $rv = Net::SSLeay::X509_policy_node_get0_qualifiers($node);
    # $node - value corresponding to openssl's X509_POLICY_NODE structure
    #
    # returns: value corresponding to openssl's STACK_OF(POLICYQUALINFO) structure (0 on failure)

=item * X509_policy_tree_free

B<COMPATIBILITY:> no longer available in LibreSSL 3.8.0 and later

??? (more info needed)

    Net::SSLeay::X509_policy_tree_free($tree);
    # $tree - value corresponding to openssl's X509_POLICY_TREE structure
    #
    # returns: no return value

=item * X509_policy_tree_get0_level

B<COMPATIBILITY:> no longer available in LibreSSL 3.8.0 and later

??? (more info needed)

    my $rv = Net::SSLeay::X509_policy_tree_get0_level($tree, $i);
    # $tree - value corresponding to openssl's X509_POLICY_TREE structure
    # $i - (integer) level index
    #
    # returns: value corresponding to openssl's X509_POLICY_LEVEL structure (0 on failure)

=item * X509_policy_tree_get0_policies

B<COMPATIBILITY:> no longer available in LibreSSL 3.8.0 and later

??? (more info needed)

    my $rv = Net::SSLeay::X509_policy_tree_get0_policies($tree);
    # $tree - value corresponding to openssl's X509_POLICY_TREE structure
    #
    # returns: value corresponding to openssl's STACK_OF(X509_POLICY_NODE) structure (0 on failure)

=item * X509_policy_tree_get0_user_policies

B<COMPATIBILITY:> no longer available in LibreSSL 3.8.0 and later

??? (more info needed)

    my $rv = Net::SSLeay::X509_policy_tree_get0_user_policies($tree);
    # $tree - value corresponding to openssl's X509_POLICY_TREE structure
    #
    # returns: value corresponding to openssl's STACK_OF(X509_POLICY_NODE) structure (0 on failure)

=item * X509_policy_tree_level_count

B<COMPATIBILITY:> no longer available in LibreSSL 3.8.0 and later

??? (more info needed)

    my $rv = Net::SSLeay::X509_policy_tree_level_count($tree);
    # $tree - value corresponding to openssl's X509_POLICY_TREE structure
    #
    # returns: (integer) count

=item * X509_verify_cert_error_string

Returns a human readable error string for verification error $n.

    my $rv = Net::SSLeay::X509_verify_cert_error_string($n);
    # $n - (long) numeric error code
    #
    # returns: error string

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_STORE_CTX_get_error.html>

=item * P_X509_add_extensions

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Adds one or more X509 extensions to X509 object $x.

    my $rv = Net::SSLeay::P_X509_add_extensions($x, $ca_cert, $nid, $value);
    # $x - value corresponding to openssl's X509 structure
    # $ca_cert - value corresponding to openssl's X509 structure (issuer's cert - necessary for setting NID_authority_key_identifier)
    # $nid - NID identifying extension to be set
    # $value - extension value
    #
    # returns: 1 on success, 0 on failure

You can set more extensions at once:

    my $rv = Net::SSLeay::P_X509_add_extensions($x509, $ca_cert,
                &Net::SSLeay::NID_key_usage => 'digitalSignature,keyEncipherment',
                &Net::SSLeay::NID_subject_key_identifier => 'hash',
                &Net::SSLeay::NID_authority_key_identifier => 'keyid',
                &Net::SSLeay::NID_authority_key_identifier => 'issuer',
                &Net::SSLeay::NID_basic_constraints => 'CA:FALSE',
                &Net::SSLeay::NID_ext_key_usage => 'serverAuth,clientAuth',
                &Net::SSLeay::NID_netscape_cert_type => 'server',
                &Net::SSLeay::NID_subject_alt_name => 'DNS:s1.dom.com,DNS:s2.dom.com,DNS:s3.dom.com',
          );

=item * P_X509_copy_extensions

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Copies X509 extensions from X509_REQ object to X509 object - handy when you need to turn X509_REQ into X509 certificate.

    Net::SSLeay::P_X509_copy_extensions($x509_req, $x509, $override);
    # $x509_req - value corresponding to openssl's X509_REQ structure
    # $x509 - value corresponding to openssl's X509 structure
    # $override - (integer) flag indication whether to override already existing items in $x509 (default 1)
    #
    # returns: 1 on success, 0 on failure

=item * P_X509_get_crl_distribution_points

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Get the list of CRL distribution points from X509 certificate.

    my @cdp = Net::SSLeay::P_X509_get_crl_distribution_points($x509);
    # $x509 - value corresponding to openssl's X509 structure
    #
    # returns: list of distribution points (usually URLs)

=item * P_X509_get_ext_key_usage

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Gets the list of extended key usage of given X509 certificate $cert.

    my @ext_usage = Net::SSLeay::P_X509_get_ext_key_usage($cert, $format);
    # $cert - value corresponding to openssl's X509 structure
    # $format - choose type of return values: 0=OIDs, 1=NIDs, 2=shortnames, 3=longnames
    #
    # returns: list of values

Examples:

    my @extkeyusage_oid = Net::SSLeay::P_X509_get_ext_key_usage($x509,0);
    # returns for example: ("1.3.6.1.5.5.7.3.1", "1.3.6.1.5.5.7.3.2")

    my @extkeyusage_nid = Net::SSLeay::P_X509_get_ext_key_usage($x509,1);
    # returns for example: (129, 130)

    my @extkeyusage_sn  = Net::SSLeay::P_X509_get_ext_key_usage($x509,2);
    # returns for example: ("serverAuth", "clientAuth")

    my @extkeyusage_ln  = Net::SSLeay::P_X509_get_ext_key_usage($x509,3);
    # returns for example: ("TLS Web Server Authentication",  "TLS Web Client Authentication")

=item * P_X509_get_key_usage

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Gets the list of key usage of given X509 certificate $cert.

    my @keyusage = Net::SSLeay::P_X509_get_key_usage($cert);
    # $cert - value corresponding to openssl's X509 structure
    #
    # returns: list of key usage values which can be none, one or more from the following list:
    #          "digitalSignature"
    #          "nonRepudiation"
    #          "keyEncipherment"
    #          "dataEncipherment"
    #          "keyAgreement"
    #          "keyCertSign"
    #          "cRLSign"
    #          "encipherOnly"
    #          "decipherOnly"

=item * P_X509_get_netscape_cert_type

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Gets the list of Netscape cert types of given X509 certificate $cert.

    Net::SSLeay::P_X509_get_netscape_cert_type($cert);
    # $cert - value corresponding to openssl's X509 structure
    #
    # returns: list of Netscape type values which can be none, one or more from the following list:
    #          "client"
    #          "server"
    #          "email"
    #          "objsign"
    #          "reserved"
    #          "sslCA"
    #          "emailCA"
    #          "objCA"

=item * P_X509_get_pubkey_alg

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns ASN1_OBJECT corresponding to X509 certificate public key algorithm.

    my $rv = Net::SSLeay::P_X509_get_pubkey_alg($x);
    # $x - value corresponding to openssl's X509 structure
    #
    # returns: value corresponding to openssl's ASN1_OBJECT structure (0 on failure)

To get textual representation use:

    my $alg = Net::SSLeay::OBJ_obj2txt(Net::SSLeay::P_X509_get_pubkey_alg($x509));
    # returns for example: "rsaEncryption"

=item * P_X509_get_signature_alg

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns ASN1_OBJECT corresponding to X509 signature key algorithm.

    my $rv = Net::SSLeay::P_X509_get_signature_alg($x);
    # $x - value corresponding to openssl's X509 structure
    #
    # returns: value corresponding to openssl's ASN1_OBJECT structure (0 on failure)

To get textual representation use:

    my $alg = Net::SSLeay::OBJ_obj2txt(Net::SSLeay::P_X509_get_signature_alg($x509));
    # returns for example: "sha1WithRSAEncryption"

=item * sk_X509_new_null

Returns a new, empty, STACK_OF(X509) structure.

    my $rv = Net::SSLeay::sk_X509_new_null();
