			 LineOrder lineOrder = INCREASING_Y,
			 Compression compression = ZIP_COMPRESSION,
                         int numThreads = globalThreadCount ());

    IMF_EXPORT
    virtual ~TiledRgbaOutputFile ();


    //------------------------------------------------
    // Define a frame buffer as the pixel data source:
    // Pixel (x, y) is at address
    //
    //  base + x * xStride + y * yStride
    //
    //------------------------------------------------

    IMF_EXPORT
    void		setFrameBuffer (const Rgba *base,
					size_t xStride,
					size_t yStride);

    //--------------------------
    // Access to the file header
    //--------------------------

    IMF_EXPORT
    const Header &		header () const;
    IMF_EXPORT
    const FrameBuffer &		frameBuffer () const;
    IMF_EXPORT
    const IMATH_NAMESPACE::Box2i &	displayWindow () const;
    IMF_EXPORT
    const IMATH_NAMESPACE::Box2i &	dataWindow () const;
    IMF_EXPORT
    float			pixelAspectRatio () const;
    IMF_EXPORT
    const IMATH_NAMESPACE::V2f		screenWindowCenter () const;
    IMF_EXPORT
    float			screenWindowWidth () const;
    IMF_EXPORT
    LineOrder			lineOrder () const;
    IMF_EXPORT
    Compression			compression () const;
    IMF_EXPORT
    RgbaChannels		channels () const;


    //----------------------------------------------------
    // Utility functions (same as in Imf::TiledOutputFile)
    //----------------------------------------------------

    IMF_EXPORT
    unsigned int	tileXSize () const;
    IMF_EXPORT
    unsigned int	tileYSize () const;
    IMF_EXPORT
    LevelMode		levelMode () const;
    IMF_EXPORT
    LevelRoundingMode	levelRoundingMode () const;

    IMF_EXPORT
    int			numLevels () const;
    IMF_EXPORT
    int			numXLevels () const;
    IMF_EXPORT
    int			numYLevels () const;
    IMF_EXPORT
    bool		isValidLevel (int lx, int ly) const;

    IMF_EXPORT
    int			levelWidth  (int lx) const;
    IMF_EXPORT
    int			levelHeight (int ly) const;

    IMF_EXPORT
    int			numXTiles (int lx = 0) const;
    IMF_EXPORT
    int			numYTiles (int ly = 0) const;

    IMF_EXPORT
    IMATH_NAMESPACE::Box2i	dataWindowForLevel (int l = 0) const;
    IMF_EXPORT
    IMATH_NAMESPACE::Box2i	dataWindowForLevel (int lx, int ly) const;

    IMF_EXPORT
    IMATH_NAMESPACE::Box2i	dataWindowForTile (int dx, int dy,
					   int l = 0) const;

    IMF_EXPORT
    IMATH_NAMESPACE::Box2i	dataWindowForTile (int dx, int dy,
					   int lx, int ly) const;

    //------------------------------------------------------------------
    // Write pixel data:
    //
    // writeTile(dx, dy, lx, ly) writes the tile with tile
    // coordinates (dx, dy), and level number (lx, ly) to
    // the file.
    //
    //   dx must lie in the interval [0, numXTiles(lx)-1]
    //   dy must lie in the interval [0, numYTiles(ly)-1]
    //
    //   lx must lie in the interval [0, numXLevels()-1]
    //   ly must lie in the inverval [0, numYLevels()-1]
    //
    // writeTile(dx, dy, level) is a convenience function
    // used for ONE_LEVEL and MIPMAP_LEVEL files.  It calls
    // writeTile(dx, dy, level, level).
    //
    // The two writeTiles(dx1, dx2, dy1, dy2, ...) functions allow
    // writing multiple tiles at once.  If multi-threading is used
    // multiple tiles are written concurrently.
    //
    // Pixels that are outside the pixel coordinate range for the tile's
    // level, are never accessed by writeTile().
    //
    // Each tile in the file must be written exactly once.
    //
    //------------------------------------------------------------------

    IMF_EXPORT
    void		writeTile (int dx, int dy, int l = 0);
    IMF_EXPORT
    void		writeTile (int dx, int dy, int lx, int ly);

    IMF_EXPORT
    void		writeTiles (int dxMin, int dxMax, int dyMin, int dyMax,
                                    int lx, int ly);

    IMF_EXPORT
    void		writeTiles (int dxMin, int dxMax, int dyMin, int dyMax,
                                    int l = 0);


    // -------------------------------------------------------------------------
    // Update the preview image (see Imf::TiledOutputFile::updatePreviewImage())
    // -------------------------------------------------------------------------

    IMF_EXPORT
    void		updatePreviewImage (const PreviewRgba[]);


    //------------------------------------------------
    // Break a tile -- for testing and debugging only
    // (see Imf::TiledOutputFile::breakTile())
    //
    // Warning: Calling this function usually results
    // in a broken image file.  The file or parts of
    // it may not be readable, or the file may contain
    // bad data.
    //
    //------------------------------------------------

    IMF_EXPORT
    void		breakTile  (int dx, int dy,
				    int lx, int ly,
				    int offset,
				    int length,
				    char c);
  private:

    //
    // Copy constructor and assignment are not implemented
    //

    TiledRgbaOutputFile (const TiledRgbaOutputFile &) = delete;	
    TiledRgbaOutputFile & operator = (const TiledRgbaOutputFile &) = delete;
    TiledRgbaOutputFile (TiledRgbaOutputFile &&) = delete;	
    TiledRgbaOutputFile & operator = (TiledRgbaOutputFile &&) = delete;

    class IMF_HIDDEN ToYa;

    TiledOutputFile *            _outputFile;
    ToYa *			_toYa;
};



//
// Tiled RGBA input file
//

class IMF_EXPORT_TYPE TiledRgbaInputFile
{
  public:

    //--------------------------------------------------------
    // Constructor -- opens the file with the specified name.
    // Destroying TiledRgbaInputFile objects constructed with
    // this constructor automatically closes the corresponding
    // files.
    //--------------------------------------------------------

    IMF_EXPORT
    TiledRgbaInputFile (const char name[],
                        int numThreads = globalThreadCount ());


    //-------------------------------------------------------
    // Constructor -- attaches the new TiledRgbaInputFile
    // object to a file that has already been opened by the
    // caller.
    // Destroying TiledRgbaInputFile objects constructed with
    // this constructor does not automatically close the
    // corresponding files.
    //-------------------------------------------------------

    IMF_EXPORT
    TiledRgbaInputFile (OPENEXR_IMF_INTERNAL_NAMESPACE::IStream &is, int numThreads = globalThreadCount ());


    //------------------------------------------------------------
    // Constructors -- the same as the previous two, but the names
    // of the red, green, blue, alpha, and luminance channels are
    // expected to be layerName.R, layerName.G, etc.
    //------------------------------------------------------------

    IMF_EXPORT
    TiledRgbaInputFile (const char name[],
		        const std::string &layerName,
		        int numThreads = globalThreadCount());

    IMF_EXPORT
    TiledRgbaInputFile (OPENEXR_IMF_INTERNAL_NAMESPACE::IStream &is,
		        const std::string &layerName,
		        int numThreads = globalThreadCount());

    //-----------
    // Destructor
    //-----------

    IMF_EXPORT
    virtual ~TiledRgbaInputFile ();


    //-----------------------------------------------------
    // Define a frame buffer as the pixel data destination:
    // Pixel (x, y) is at address
    //
    //  base + x * xStride + y * yStride
    //
    //-----------------------------------------------------

    IMF_EXPORT
    void			setFrameBuffer (Rgba *base,
						size_t xStride,
						size_t yStride);

    //-------------------------------------------------------------------
    // Switch to a different layer -- subsequent calls to readTile()
    // and readTiles() will read channels layerName.R, layerName.G, etc.
    // After each call to setLayerName(), setFrameBuffer() must be called
    // at least once before the next call to readTile() or readTiles().
    //-------------------------------------------------------------------

    IMF_EXPORT
    void			setLayerName (const std::string &layerName);


    //--------------------------
    // Access to the file header
    //--------------------------

    IMF_EXPORT
    const Header &		header () const;
    IMF_EXPORT
    const FrameBuffer &		frameBuffer () const;
    IMF_EXPORT
    const IMATH_NAMESPACE::Box2i &	displayWindow () const;
    IMF_EXPORT
    const IMATH_NAMESPACE::Box2i &	dataWindow () const;
    IMF_EXPORT
    float			pixelAspectRatio () const;
    IMF_EXPORT
    const IMATH_NAMESPACE::V2f		screenWindowCenter () const;
    IMF_EXPORT
    float			screenWindowWidth () const;
    IMF_EXPORT
    LineOrder			lineOrder () const;
    IMF_EXPORT
    Compression			compression () const;
    IMF_EXPORT
    RgbaChannels		channels () const;
    IMF_EXPORT
    const char *                fileName () const;
    IMF_EXPORT
    bool			isComplete () const;

    //----------------------------------
    // Access to the file format version
    //----------------------------------

    IMF_EXPORT
    int				version () const;


    //---------------------------------------------------
    // Utility functions (same as in Imf::TiledInputFile)
    //---------------------------------------------------

    IMF_EXPORT
    unsigned int	tileXSize () const;
    IMF_EXPORT
    unsigned int	tileYSize () const;
    IMF_EXPORT
    LevelMode		levelMode () const;
    IMF_EXPORT
    LevelRoundingMode	levelRoundingMode () const;

    IMF_EXPORT
    int			numLevels () const;
    IMF_EXPORT
    int			numXLevels () const;
    IMF_EXPORT
    int			numYLevels () const;
    IMF_EXPORT
    bool		isValidLevel (int lx, int ly) const;

    IMF_EXPORT
    int			levelWidth  (int lx) const;
    IMF_EXPORT
    int			levelHeight (int ly) const;

    IMF_EXPORT
    int			numXTiles (int lx = 0) const;
    IMF_EXPORT
    int			numYTiles (int ly = 0) const;

    IMF_EXPORT
    IMATH_NAMESPACE::Box2i	dataWindowForLevel (int l = 0) const;
    IMF_EXPORT
    IMATH_NAMESPACE::Box2i	dataWindowForLevel (int lx, int ly) const;

    IMF_EXPORT
    IMATH_NAMESPACE::Box2i	dataWindowForTile (int dx, int dy,
					   int l = 0) const;

    IMF_EXPORT
    IMATH_NAMESPACE::Box2i	dataWindowForTile (int dx, int dy,
					   int lx, int ly) const;
					   

    //----------------------------------------------------------------
    // Read pixel data:
    //
    // readTile(dx, dy, lx, ly) reads the tile with tile
    // coordinates (dx, dy), and level number (lx, ly),
    // and stores it in the current frame buffer.
    //
    //   dx must lie in the interval [0, numXTiles(lx)-1]
    //   dy must lie in the interval [0, numYTiles(ly)-1]
    //
    //   lx must lie in the interval [0, numXLevels()-1]
    //   ly must lie in the inverval [0, numYLevels()-1]
    //
    // readTile(dx, dy, level) is a convenience function used
    // for ONE_LEVEL and MIPMAP_LEVELS files.  It calls
    // readTile(dx, dy, level, level).
    //
    // The two readTiles(dx1, dx2, dy1, dy2, ...) functions allow
    // reading multiple tiles at once.  If multi-threading is used
    // multiple tiles are read concurrently.
    //
    // Pixels that are outside the pixel coordinate range for the
    // tile's level, are never accessed by readTile().
    //
    // Attempting to access a tile that is not present in the file
    // throws an InputExc exception.
    //
    //----------------------------------------------------------------

    IMF_EXPORT
    void           	readTile (int dx, int dy, int l = 0);
    IMF_EXPORT
    void           	readTile (int dx, int dy, int lx, int ly);

    IMF_EXPORT
    void		readTiles (int dxMin, int dxMax,
                                   int dyMin, int dyMax, int lx, int ly);

    IMF_EXPORT
    void		readTiles (int dxMin, int dxMax,
                                   int dyMin, int dyMax, int l = 0);

  private:

    //
    // Copy constructor and assignment are not implemented
    //

    TiledRgbaInputFile (const TiledRgbaInputFile &) = delete;
    TiledRgbaInputFile & operator = (const TiledRgbaInputFile &) = delete;
    TiledRgbaInputFile (TiledRgbaInputFile &&) = delete;
    TiledRgbaInputFile & operator = (TiledRgbaInputFile &&) = delete;

    class FromYa;

    TiledInputFile *	_inputFile;
    FromYa *		_fromYa;
    std::string		_channelNamePrefix;
};


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT





#endif
                                                                                                                                                                                                                                                                                                                                                   usr/include/OpenEXR/ImfTimeCode.h                                                                   0000644 0000000 0000000 00000013576 14223432711 015271  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMF_TIME_CODE_H
#define INCLUDED_IMF_TIME_CODE_H

#include "ImfExport.h"
#include "ImfNamespace.h"

//-----------------------------------------------------------------------------
//
//	class TimeCode
// 	
// 	A TimeCode object stores time and control codes as described
// 	in SMPTE standard 12M-1999.  A TimeCode object contains the
// 	following fields:
//
// 	    Time Address:
//
//		hours			integer, range 0 - 23
//		minutes			integer, range 0 - 59
//		seconds			integer, range 0 - 59
//		frame 			integer, range 0 - 29
//
// 	    Flags:
//
// 		drop frame flag		boolean
//		color frame flag	boolean
//		field/phase flag	boolean
//		bgf0			boolean
//		bgf1			boolean
//		bgf2			boolean
//
// 	    Binary groups for user-defined data and control codes:
//
//		binary group 1		integer, range 0 - 15
//		binary group 2		integer, range 0 - 15
//		...
//		binary group 8		integer, range 0 - 15
//
//	Class TimeCode contains methods to convert between the fields
//	listed above and a more compact representation where the fields
//	are packed into two unsigned 32-bit integers.  In the packed
//	integer representations, bit 0 is the least significant bit,
//	and bit 31 is the most significant bit of the integer value.
//
//	The time address and flags fields can be packed in three
//	different ways:
//
//	      bits	packing for	  packing for	    packing for
//	    		24-frame 	  60-field 	    50-field
//	    		film		  television	    television
//
//	     0 -  3	frame units	  frame units	    frame units
//	     4 -  5	frame tens	  frame tens	    frame tens
//	     6		unused, set to 0  drop frame flag   unused, set to 0
//	     7		unused, set to 0  color frame flag  color frame flag
//	     8 - 11	seconds units	  seconds units	    seconds units
//	    12 - 14	seconds tens	  seconds tens	    seconds tens
//	    15		phase flag	  field/phase flag  bgf0
//	    16 - 19	minutes units	  minutes units	    minutes units
//	    20 - 22	minutes tens	  minutes tens	    minutes tens
//	    23		bgf0		  bgf0		    bgf2
//	    24 - 27	hours units	  hours units	    hours units
//	    28 - 29	hours tens	  hours tens	    hours tens
//	    30		bgf1		  bgf1		    bgf1
//	    31		bgf2		  bgf2		    field/phase flag
//
//	User-defined data and control codes are packed as follows:
//
//	      bits	field
//
//	     0 -  3	binary group 1
//	     4 -  7	binary group 2
//	     8 - 11	binary group 3
//	    12 - 15	binary group 4
//	    16 - 19	binary group 5
//	    20 - 23	binary group 6
//	    24 - 27	binary group 7
//	    28 - 31	binary group 8
//
//-----------------------------------------------------------------------------

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER

   
class IMF_EXPORT_TYPE TimeCode
{
  public:

    //---------------------
    // Bit packing variants
    //---------------------

    enum IMF_EXPORT_ENUM Packing
    {
	TV60_PACKING,		// packing for 60-field television
	TV50_PACKING,		// packing for 50-field television
	FILM24_PACKING		// packing for 24-frame film
    };


    //-------------------------------------
    // Constructors and assignment operator
    //-------------------------------------

    IMF_EXPORT
    TimeCode ();  // all fields set to 0 or false

    IMF_EXPORT
    TimeCode (int hours,
	      int minutes,
	      int seconds,
	      int frame,
	      bool dropFrame = false,
	      bool colorFrame = false,
	      bool fieldPhase = false,
	      bool bgf0 = false,
	      bool bgf1 = false,
	      bool bgf2 = false,
	      int binaryGroup1 = 0,
	      int binaryGroup2 = 0,
	      int binaryGroup3 = 0,
	      int binaryGroup4 = 0,
	      int binaryGroup5 = 0,
	      int binaryGroup6 = 0,
	      int binaryGroup7 = 0,
	      int binaryGroup8 = 0);

    IMF_EXPORT
    TimeCode (unsigned int timeAndFlags,
	      unsigned int userData = 0,
	      Packing packing = TV60_PACKING);

    IMF_EXPORT
    TimeCode (const TimeCode &other);

    ~TimeCode () = default;

    IMF_EXPORT
    TimeCode & operator = (const TimeCode &other);


    //----------------------------
    // Access to individual fields
    //----------------------------

    IMF_EXPORT
    int		hours () const;
    IMF_EXPORT
    void	setHours (int value);

    IMF_EXPORT
    int		minutes () const;
    IMF_EXPORT
    void	setMinutes (int value);

    IMF_EXPORT
    int		seconds () const;
    IMF_EXPORT
    void	setSeconds (int value);

    IMF_EXPORT
    int		frame () const;
    IMF_EXPORT
    void	setFrame (int value);

    IMF_EXPORT
    bool	dropFrame () const;
    IMF_EXPORT
    void	setDropFrame (bool value);

    IMF_EXPORT
    bool	colorFrame () const;
    IMF_EXPORT
    void	setColorFrame (bool value);

    IMF_EXPORT
    bool	fieldPhase () const;
    IMF_EXPORT
    void	setFieldPhase (bool value);

    IMF_EXPORT
    bool	bgf0 () const;
    IMF_EXPORT
    void	setBgf0 (bool value);

    IMF_EXPORT
    bool	bgf1 () const;
    IMF_EXPORT
    void	setBgf1 (bool value);

    IMF_EXPORT
    bool	bgf2 () const;
    IMF_EXPORT
    void	setBgf2 (bool value);

    IMF_EXPORT
    int		binaryGroup (int group) const; // group must be between 1 and 8
    IMF_EXPORT
    void	setBinaryGroup (int group, int value);

    
    //---------------------------------
    // Access to packed representations
    //---------------------------------

    IMF_EXPORT
    unsigned int	timeAndFlags (Packing packing = TV60_PACKING) const;

    IMF_EXPORT
    void		setTimeAndFlags (unsigned int value,
					 Packing packing = TV60_PACKING);

    IMF_EXPORT
    unsigned int	userData () const;

    IMF_EXPORT
    void		setUserData (unsigned int value);
    
    
    //---------
    // Equality
    //---------
    
    IMF_EXPORT
    bool		operator == (const TimeCode &v) const;    
    IMF_EXPORT
    bool		operator != (const TimeCode &v) const;
    
  private:

    unsigned int	_time;
    unsigned int	_user;
};



OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT





#endif
                                                                                                                                  usr/include/OpenEXR/ImfTimeCodeAttribute.h                                                          0000644 0000000 0000000 00000001474 14223432711 017147  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMF_TIME_CODE_ATTRIBUTE_H
#define INCLUDED_IMF_TIME_CODE_ATTRIBUTE_H


//-----------------------------------------------------------------------------
//
//	class TimeCodeAttribute
//
//-----------------------------------------------------------------------------

#include "ImfExport.h"
#include "ImfNamespace.h"

#include "ImfAttribute.h"
#include "ImfTimeCode.h"

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER


typedef TypedAttribute<OPENEXR_IMF_INTERNAL_NAMESPACE::TimeCode> TimeCodeAttribute;

#ifndef COMPILING_IMF_TIMECODE_ATTRIBUTE
extern template class IMF_EXPORT_EXTERN_TEMPLATE TypedAttribute<OPENEXR_IMF_INTERNAL_NAMESPACE::TimeCode>;
#endif


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT




#endif
                                                                                                                                                                                                    usr/include/OpenEXR/ImfUtilExport.h                                                                 0000644 0000000 0000000 00000004065 14223432711 015710  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMFUTILEXPORT_H
#define INCLUDED_IMFUTILEXPORT_H

#include "OpenEXRConfig.h"

/// \addtogroup ExportMacros
/// @{

// are we making a DLL under windows (might be msvc or mingw or others)
#if defined(OPENEXR_DLL)

#  if defined(OPENEXRUTIL_EXPORTS)
#    define IMFUTIL_EXPORT __declspec(dllexport)

     // mingw needs the export when the extern is defined
#    if defined(__MINGW32__)
#      define IMFUTIL_EXPORT_EXTERN_TEMPLATE IMFUTIL_EXPORT
#      define IMFUTIL_EXPORT_TEMPLATE_INSTANCE
       // for mingw windows, we need to cause this to export the
       // typeinfo tables (but you don't need to have the
       // complementary import, because might be a local template too!)
#      define IMFUTIL_EXPORT_TEMPLATE_TYPE IMFUTIL_EXPORT
#    else
       // for normal msvc, need to export the actual instantiation in
       // the cpp code, and none of the others
#      define IMFUTIL_EXPORT_EXTERN_TEMPLATE
#      define IMFUTIL_EXPORT_TEMPLATE_INSTANCE IMFUTIL_EXPORT
#      define IMFUTIL_EXPORT_TEMPLATE_TYPE
#    endif

#  else // OPENEXRUTIL_EXPORTS
#    define IMFUTIL_EXPORT __declspec(dllimport)
#    define IMFUTIL_EXPORT_EXTERN_TEMPLATE IMFUTIL_EXPORT
#    define IMFUTIL_EXPORT_TEMPLATE_INSTANCE
#    define IMFUTIL_EXPORT_TEMPLATE_TYPE
#  endif

// DLLs don't support these types of visibility controls, just leave them as empty
#  define IMFUTIL_EXPORT_TYPE
#  define IMFUTIL_EXPORT_ENUM
#  define IMFUTIL_HIDDEN

#else // not an OPENEXR_DLL

// just pass these through from the top level config
#  define IMFUTIL_EXPORT OPENEXR_EXPORT
#  define IMFUTIL_HIDDEN OPENEXR_HIDDEN
#  define IMFUTIL_EXPORT_ENUM OPENEXR_EXPORT_ENUM
#  define IMFUTIL_EXPORT_TYPE OPENEXR_EXPORT_TYPE
#  define IMFUTIL_EXPORT_TEMPLATE_TYPE OPENEXR_EXPORT_TEMPLATE_TYPE
#  define IMFUTIL_EXPORT_EXTERN_TEMPLATE OPENEXR_EXPORT_EXTERN_TEMPLATE
#  define IMFUTIL_EXPORT_TEMPLATE_INSTANCE OPENEXR_EXPORT_TEMPLATE_INSTANCE

#endif // OPENEXR_DLL

/// @}

#endif // INCLUDED_IMFUTILEXPORT_H
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           usr/include/OpenEXR/ImfVecAttribute.h                                                               0000644 0000000 0000000 00000003522 14223432711 016167  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//


#ifndef INCLUDED_IMF_VEC_ATTRIBUTE_H
#define INCLUDED_IMF_VEC_ATTRIBUTE_H

//-----------------------------------------------------------------------------
//
//	class V2iAttribute
//	class V2fAttribute
//	class V2dAttribute
//	class V3iAttribute
//	class V3fAttribute
//	class V3dAttribute
//
//-----------------------------------------------------------------------------

#include "ImfExport.h"
#include "ImfNamespace.h"

#include "ImfAttribute.h"
#include <ImathVec.h>


#if defined(_MSC_VER)
// suppress warning about non-exported base classes
#pragma warning (push)
#pragma warning (disable : 4251)
#pragma warning (disable : 4275)
#endif

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER

typedef TypedAttribute<IMATH_NAMESPACE::V2i> V2iAttribute;
typedef TypedAttribute<IMATH_NAMESPACE::V2f> V2fAttribute;
typedef TypedAttribute<IMATH_NAMESPACE::V2d> V2dAttribute;
typedef TypedAttribute<IMATH_NAMESPACE::V3i> V3iAttribute;
typedef TypedAttribute<IMATH_NAMESPACE::V3f> V3fAttribute;
typedef TypedAttribute<IMATH_NAMESPACE::V3d> V3dAttribute;

#ifndef COMPILING_IMF_VECTOR_ATTRIBUTE
extern template class IMF_EXPORT_EXTERN_TEMPLATE TypedAttribute<IMATH_NAMESPACE::V2i>;
extern template class IMF_EXPORT_EXTERN_TEMPLATE TypedAttribute<IMATH_NAMESPACE::V2f>;
extern template class IMF_EXPORT_EXTERN_TEMPLATE TypedAttribute<IMATH_NAMESPACE::V2d>;
extern template class IMF_EXPORT_EXTERN_TEMPLATE TypedAttribute<IMATH_NAMESPACE::V3i>;
extern template class IMF_EXPORT_EXTERN_TEMPLATE TypedAttribute<IMATH_NAMESPACE::V3f>;
extern template class IMF_EXPORT_EXTERN_TEMPLATE TypedAttribute<IMATH_NAMESPACE::V3d>;
#endif


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT


#if defined(_MSC_VER)
// suppress warning about non-exported base classes
#pragma warning (pop)
#endif

#endif
                                                                                                                                                                              usr/include/OpenEXR/ImfVersion.h                                                                    0000644 0000000 0000000 00000006067 14223432711 015222  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMF_VERSION_H
#define INCLUDED_IMF_VERSION_H

//-----------------------------------------------------------------------------
//
//	Magic and version number.
//
//-----------------------------------------------------------------------------

#include "ImfExport.h"
#include "ImfNamespace.h"

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER

//
// The MAGIC number is stored in the first four bytes of every
// OpenEXR image file.  This can be used to quickly test whether
// a given file is an OpenEXR image file (see isImfMagic(), below).
//

static const int MAGIC = 20000630;


//
// The second item in each OpenEXR image file, right after the
// magic number, is a four-byte file version identifier.  Depending
// on a file's version identifier, a file reader can enable various
// backwards-compatibility switches, or it can quickly reject files
// that it cannot read.
//
// The version identifier is split into an 8-bit version number,
// and a 24-bit flags field.
//

static const int VERSION_NUMBER_FIELD	= 0x000000ff;
static const int VERSION_FLAGS_FIELD	= 0xffffff00;


//
// Value that goes into VERSION_NUMBER_FIELD.
//

static const int EXR_VERSION		= 2;


//
// Flags that can go into VERSION_FLAGS_FIELD.
// Flags can only occupy the 1 bits in VERSION_FLAGS_FIELD.
//

static const int TILED_FLAG		= 0x00000200;   // File is tiled
static
const int LONG_NAMES_FLAG       = 0x00000400;   // File contains long
                                                // attribute or channel
                                                // names
static
const int NON_IMAGE_FLAG        = 0x00000800;   // File has at least one part
                                                // which is not a regular
                                                // scanline image or regular tiled image
                                                // (that is, it is a deep format)
static
const int MULTI_PART_FILE_FLAG  = 0x00001000;   // File has multiple parts

//
// Bitwise OR of all known flags.
//
static
const int ALL_FLAGS		= TILED_FLAG | LONG_NAMES_FLAG |
                                  NON_IMAGE_FLAG | MULTI_PART_FILE_FLAG;


//
// Utility functions
//

inline bool  isTiled (int version)	{return !!(version & TILED_FLAG);}
inline bool  isMultiPart (int version)  {return !!(version & MULTI_PART_FILE_FLAG); }
inline bool  isNonImage(int version)    {return !!(version & NON_IMAGE_FLAG); }
inline int   makeTiled (int version)	{return version | TILED_FLAG;}
inline int   makeNotTiled (int version) {return version & ~TILED_FLAG;}
inline int   getVersion (int version)	{return version & VERSION_NUMBER_FIELD;}
inline int   getFlags (int version)	{return version & VERSION_FLAGS_FIELD;}
inline bool  supportsFlags (int flags)	{return !(flags & ~ALL_FLAGS);}


//
// Given the first four bytes of a file, returns true if the
// file is probably an OpenEXR image file, false if not.
//

IMF_EXPORT 
bool	     isImfMagic (const char bytes[4]);


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT





#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/include/OpenEXR/ImfWav.h                                                                        0000644 0000000 0000000 00000002112 14223432711 014315  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//


#ifndef INCLUDED_IMF_WAV_H
#define INCLUDED_IMF_WAV_H

//-----------------------------------------------------------------------------
//
//	16-bit Haar Wavelet encoding and decoding
//
//-----------------------------------------------------------------------------
#include "ImfNamespace.h"
#include "ImfExport.h"

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER


IMF_EXPORT 
void
wav2Encode
    (unsigned short *in, // io: values in[y][x] are transformed in place
     int     nx,	 // i : x size
     int     ox,	 // i : x offset
     int     ny,	 // i : y size
     int     oy,	 // i : y offset
     unsigned short mx); // i : maximum in[x][y] value

IMF_EXPORT
void
wav2Decode
    (unsigned short *in, // io: values in[y][x] are transformed in place
     int     nx,	 // i : x size
     int     ox,	 // i : x offset
     int     ny,	 // i : y size
     int     oy,	 // i : y offset
     unsigned short mx); // i : maximum in[x][y] value


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT





#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                      usr/include/OpenEXR/ImfXdr.h                                                                        0000644 0000000 0000000 00000035205 14223432711 014326  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMF_XDR_H
#define INCLUDED_IMF_XDR_H


//----------------------------------------------------------------------------
//
//	Xdr -- routines to convert data between the machine's native
//	format and a machine-independent external data representation:
//
//	    write<R> (T &o, S v);	converts a value, v, of type S
//					into a machine-independent
//					representation and stores the
//					result in an output buffer, o.
//
//	    read<R> (T &i, S &v);	reads the machine-independent
//					representation of a value of type
//					S from input buffer i, converts
//					the value into the machine's native
//					representation, and stores the result
//					in v.
//
//	    size<S>();			returns the size, in bytes, of the
