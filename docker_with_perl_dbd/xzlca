
=item *

A bug when replacing the glob of a loop variable within the loop has been fixed
[perl #21469].  This
means the following code will no longer crash:

    for $x (...) {
        *x = *y;
    }

=item *

Assigning a glob to a PVLV used to convert it to a plain string.  Now it
works correctly, and a PVLV can hold a glob.  This would happen when a
nonexistent hash or array element was passed to a subroutine:

  sub { $_[0] = *foo }->($hash{key});
  # $_[0] would have been the string "*main::foo"

It also happened when a glob was assigned to, or returned from, an element
of a tied array or hash [perl #36051].

=item *

When trying to report C<Use of uninitialized value $Foo::BAR>, crashes could
occur if the glob holding the global variable in question had been detached
from its original stash by, for example, C<delete $::{"Foo::"}>.  This has
been fixed by disabling the reporting of variable names in those
cases.

=item *

During the restoration of a localised typeglob on scope exit, any
destructors called as a result would be able to see the typeglob in an
inconsistent state, containing freed entries, which could result in a
crash.  This would affect code like this:

  local *@;
  eval { die bless [] }; # puts an object in $@
  sub DESTROY {
    local $@; # boom
  }

Now the glob entries are cleared before any destructors are called.  This
also means that destructors can vivify entries in the glob.  So Perl tries
again and, if the entries are re-created too many times, dies with a
"panic: gp_free ..." error message.

=item *

If a typeglob is freed while a subroutine attached to it is still
referenced elsewhere, the subroutine is renamed to C<__ANON__> in the same
package, unless the package has been undefined, in which case the C<__ANON__>
package is used.  This could cause packages to be sometimes autovivified,
such as if the package had been deleted.  Now this no longer occurs.
The C<__ANON__> package is also now used when the original package is
no longer attached to the symbol table.  This avoids memory leaks in some
cases [perl #87664].

=item *

Subroutines and package variables inside a package whose name ends with
C<::> can now be accessed with a fully qualified name.

=back

=head2 Unicode

=over

=item *

What has become known as "the Unicode Bug" is almost completely resolved in
this release.  Under C<use feature 'unicode_strings'> (which is
automatically selected by C<use 5.012> and above), the internal
storage format of a string no longer affects the external semantics.
[perl #58182].

There are two known exceptions:

=over

=item 1

The now-deprecated, user-defined case-changing
functions require utf8-encoded strings to operate.  The CPAN module
L<Unicode::Casing> has been written to replace this feature without its
drawbacks, and the feature is scheduled to be removed in 5.16.

=item 2

quotemeta() (and its in-line equivalent C<\Q>) can also give different
results depending on whether a string is encoded in UTF-8.  See
L<perlunicode/The "Unicode Bug">.

=back

=item *

Handling of Unicode non-character code points has changed.
Previously they were mostly considered illegal, except that in some
place only one of the 66 of them was known.  The Unicode Standard
considers them all legal, but forbids their "open interchange".
This is part of the change to allow internal use of any code
point (see L</Core Enhancements>).  Together, these changes resolve
[perl #38722], [perl #51918], [perl #51936], and [perl #63446].

=item *

Case-insensitive C<"/i"> regular expression matching of Unicode
characters that match multiple characters now works much more as
intended.  For example

 "\N{LATIN SMALL LIGATURE FFI}" =~ /ffi/ui

and

 "ffi" =~ /\N{LATIN SMALL LIGATURE FFI}/ui

are both true.  Previously, there were many bugs with this feature.
What hasn't been fixed are the places where the pattern contains the
multiple characters, but the characters are split up by other things,
such as in

 "\N{LATIN SMALL LIGATURE FFI}" =~ /(f)(f)i/ui

or

 "\N{LATIN SMALL LIGATURE FFI}" =~ /ffi*/ui

or

 "\N{LATIN SMALL LIGATURE FFI}" =~ /[a-f][f-m][g-z]/ui

None of these match.

Also, this matching doesn't fully conform to the current Unicode
Standard, which asks that the matching be made upon the NFD
(Normalization Form Decomposed) of the text.  However, as of this
writing (April 2010), the Unicode Standard is currently in flux about
what they will recommend doing with regard in such scenarios.  It may be
that they will throw out the whole concept of multi-character matches.
[perl #71736].

=item *

Naming a deprecated character in C<\N{I<NAME>}> no longer leaks memory.

=item *

We fixed a bug that could cause C<\N{I<NAME>}> constructs followed by
a single C<"."> to be parsed incorrectly [perl #74978] (5.12.1).

=item *

C<chop> now correctly handles characters above C<"\x{7fffffff}">
[perl #73246].

=item *

Passing to C<index> an offset beyond the end of the string when the string
is encoded internally in UTF8 no longer causes panics [perl #75898].

=item *

warn() and die() now respect utf8-encoded scalars [perl #45549].

=item *

Sometimes the UTF8 length cache would not be reset on a value
returned by substr, causing C<length(substr($uni_string, ...))> to give
wrong answers.  With C<${^UTF8CACHE}> set to -1, it would also produce
a "panic" error message [perl #77692].

=back

=head2 Ties, Overloading and Other Magic

=over

=item *

Overloading now works properly in conjunction with tied
variables.  What formerly happened was that most ops checked their
arguments for overloading I<before> checking for magic, so for example
an overloaded object returned by a tied array access would usually be
treated as not overloaded [RT #57012].

=item *

Various instances of magic (like tie methods) being called on tied variables
too many or too few times have been fixed:

=over

=item *

C<< $tied->() >> did not always call FETCH [perl #8438].

=item *

Filetest operators and C<y///> and C<tr///> were calling FETCH too
many times.

=item *

The C<=> operator used to ignore magic on its right-hand side if the
scalar happened to hold a typeglob (if a typeglob was the last thing
returned from or assigned to a tied scalar) [perl #77498].

=item *

Dereference operators used to ignore magic if the argument was a
reference already (such as from a previous FETCH) [perl #72144].

=item *

C<splice> now calls set-magic (so changes made
by C<splice @ISA> are respected by method calls) [perl #78400].

=item *

In-memory files created by C<< open($fh, ">", \$buffer) >> were not calling
FETCH/STORE at all [perl #43789] (5.12.2).

=item *

utf8::is_utf8() now respects get-magic (like C<$1>) (5.12.1).

=back

=item *

Non-commutative binary operators used to swap their operands if the same
tied scalar was used for both operands and returned a different value for
each FETCH.  For instance, if C<$t> returned 2 the first time and 3 the
second, then C<$t/$t> would evaluate to 1.5.  This has been fixed
[perl #87708].

=item *

String C<eval> now detects taintedness of overloaded or tied
arguments [perl #75716].

=item *

String C<eval> and regular expression matches against objects with string
overloading no longer cause memory corruption or crashes [perl #77084].

=item *

L<readline|perlfunc/"readline EXPR"> now honors C<< <> >> overloading on tied
arguments.

=item *

C<< <expr> >> always respects overloading now if the expression is
overloaded.

Because "S<< <> as >> glob" was parsed differently from
"S<< <> as >> filehandle" from 5.6 onwards, something like C<< <$foo[0]> >> did
not handle overloading, even if C<$foo[0]> was an overloaded object.  This
was contrary to the documentation for L<overload>, and meant that C<< <> >>
could not be used as a general overloaded iterator operator.

=item *

The fallback behaviour of overloading on binary operators was asymmetric
[perl #71286].

=item *

Magic applied to variables in the main package no longer affects other packages.
See L</Magic variables outside the main package> above [perl #76138].

=item *

Sometimes magic (ties, taintedness, etc.) attached to variables could cause
an object to last longer than it should, or cause a crash if a tied
variable were freed from within a tie method.  These have been fixed
[perl #81230].

=item *

DESTROY methods of objects implementing ties are no longer able to crash by
accessing the tied variable through a weak reference [perl #86328].

=item *

Fixed a regression of kill() when a match variable is used for the
process ID to kill [perl #75812].

=item *

C<$AUTOLOAD> used to remain tainted forever if it ever became tainted.  Now
it is correctly untainted if an autoloaded method is called and the method
name was not tainted.

=item *

C<sprintf> now dies when passed a tainted scalar for the format.  It did
already die for arbitrary expressions, but not for simple scalars
[perl #82250].

=item *

C<lc>, C<uc>, C<lcfirst>, and C<ucfirst> no longer return untainted strings
when the argument is tainted.  This has been broken since perl 5.8.9
[perl #87336].

=back

=head2 The Debugger

=over

=item *

The Perl debugger now also works in taint mode [perl #76872].

=item *

Subroutine redefinition works once more in the debugger [perl #48332].

=item *

When B<-d> is used on the shebang (C<#!>) line, the debugger now has access
to the lines of the main program.  In the past, this sometimes worked and
sometimes did not, depending on the order in which things happened to be
arranged in memory [perl #71806].

=item *

A possible memory leak when using L<caller()|perlfunc/"caller EXPR"> to set
C<@DB::args> has been fixed (5.12.2).

=item *

Perl no longer stomps on C<$DB::single>, C<$DB::trace>, and C<$DB::signal> 
if these variables already have values when C<$^P> is assigned to [perl #72422].

=item *

C<#line> directives in string evals were not properly updating the arrays
of lines of code (C<< @{"_< ..."} >>) that the debugger (or any debugging or
profiling module) uses.  In threaded builds, they were not being updated at
all.  In non-threaded builds, the line number was ignored, so any change to
the existing line number would cause the lines to be misnumbered
[perl #79442].

=back

=head2 Threads

=over

=item *

Perl no longer accidentally clones lexicals in scope within active stack
frames in the parent when creating a child thread [perl #73086].

=item *

Several memory leaks in cloning and freeing threaded Perl interpreters have been
fixed [perl #77352].

=item *

Creating a new thread when directory handles were open used to cause a
crash, because the handles were not cloned, but simply passed to the new
thread, resulting in a double free.

Now directory handles are cloned properly on Windows
and on systems that have a C<fchdir> function.  On other
systems, new threads simply do not inherit directory
handles from their parent threads [perl #75154].

=item *

The typeglob C<*,>, which holds the scalar variable C<$,> (output field
separator), had the wrong reference count in child threads.

=item *

[perl #78494] When pipes are shared between threads, the C<close> function
(and any implicit close, such as on thread exit) no longer blocks.

=item *

Perl now does a timely cleanup of SVs that are cloned into a new
thread but then discovered to be orphaned (that is, their owners
are I<not> cloned).  This eliminates several "scalars leaked"
warnings when joining threads.

=back

=head2 Scoping and Subroutines

=over

=item *

Lvalue subroutines are again able to return copy-on-write scalars.  This
had been broken since version 5.10.0 [perl #75656] (5.12.3).

=item *

C<require> no longer causes C<caller> to return the wrong file name for
the scope that called C<require> and other scopes higher up that had the
same file name [perl #68712].

=item *

C<sort> with a C<($$)>-prototyped comparison routine used to cause the value
of C<@_> to leak out of the sort.  Taking a reference to C<@_> within the
sorting routine could cause a crash [perl #72334].

=item *

Match variables (like C<$1>) no longer persist between calls to a sort
subroutine [perl #76026].

=item *

Iterating with C<foreach> over an array returned by an lvalue sub now works
[perl #23790].

=item *

C<$@> is now localised during calls to C<binmode> to prevent action at a
distance [perl #78844].

=item *

Calling a closure prototype (what is passed to an attribute handler for a
closure) now results in a "Closure prototype called" error message instead
of a crash [perl #68560].

=item *

Mentioning a read-only lexical variable from the enclosing scope in a
string C<eval> no longer causes the variable to become writable
[perl #19135].

=back

=head2 Signals

=over

=item *

Within signal handlers, C<$!> is now implicitly localized.

=item *

CHLD signals are no longer unblocked after a signal handler is called if
they were blocked before by C<POSIX::sigprocmask> [perl #82040].

=item *

A signal handler called within a signal handler could cause leaks or
double-frees.  Now fixed [perl #76248].

=back

=head2 Miscellaneous Memory Leaks

=over

=item *

Several memory leaks when loading XS modules were fixed (5.12.2).

=item *

L<substr()|perlfunc/"substr EXPR,OFFSET,LENGTH,REPLACEMENT">,
L<pos()|perlfunc/"index STR,SUBSTR,POSITION">, L<keys()|perlfunc/"keys HASH">,
and L<vec()|perlfunc/"vec EXPR,OFFSET,BITS"> could, when used in combination
with lvalues, result in leaking the scalar value they operate on, and cause its
destruction to happen too late.  This has now been fixed.

=item *

The postincrement and postdecrement operators, C<++> and C<-->, used to cause
leaks when used on references.  This has now been fixed.

=item *

Nested C<map> and C<grep> blocks no longer leak memory when processing
large lists [perl #48004].

=item *

C<use I<VERSION>> and C<no I<VERSION>> no longer leak memory [perl #78436]
[perl #69050].

=item *

C<.=> followed by C<< <> >> or C<readline> would leak memory if C<$/>
contained characters beyond the octet range and the scalar assigned to
happened to be encoded as UTF8 internally [perl #72246].

=item *

C<eval 'BEGIN{die}'> no longer leaks memory on non-threaded builds.

=back

=head2 Memory Corruption and Crashes

=over

=item *

glob() no longer crashes when C<%File::Glob::> is empty and
C<CORE::GLOBAL::glob> isn't present [perl #75464] (5.12.2).

=item *

readline() has been fixed when interrupted by signals so it no longer
returns the "same thing" as before or random memory.

=item *

When assigning a list with duplicated keys to a hash, the assignment used to
return garbage and/or freed values:

    @a = %h = (list with some duplicate keys);

This has now been fixed [perl #31865].

=item *

The mechanism for freeing objects in globs used to leave dangling
pointers to freed SVs, meaning Perl users could see corrupted state
during destruction.

Perl now frees only the affected slots of the GV, rather than freeing
the GV itself.  This makes sure that there are no dangling refs or
corrupted state during destruction.

=item *

The interpreter no longer crashes when freeing deeply-nested arrays of
arrays.  Hashes have not been fixed yet [perl #44225].

=item *

Concatenating long strings under C<use encoding> no longer causes Perl to
crash [perl #78674].

=item *

Calling C<< ->import >> on a class lacking an import method could corrupt
the stack, resulting in strange behaviour.  For instance,

  push @a, "foo", $b = bar->import;

would assign "foo" to C<$b> [perl #63790].

=item *

The C<recv> function could crash when called with the MSG_TRUNC flag
[perl #75082].

=item *

C<formline> no longer crashes when passed a tainted format picture.  It also
taints C<$^A> now if its arguments are tainted [perl #79138].

=item *

A bug in how we process filetest operations could cause a segfault.
Filetests don't always expect an op on the stack, so we now use
TOPs only if we're sure that we're not C<stat>ing the C<_> filehandle.
This is indicated by C<OPf_KIDS> (as checked in ck_ftst) [perl #74542]
(5.12.1).

=item *

unpack() now handles scalar context correctly for C<%32H> and C<%32u>,
fixing a potential crash.  split() would crash because the third item
on the stack wasn't the regular expression it expected.  C<unpack("%2H",
...)> would return both the unpacked result and the checksum on the stack,
as would C<unpack("%2u", ...)> [perl #73814] (5.12.2).

=back

=head2 Fixes to Various Perl Operators

=over

=item *

The C<&>, C<|>, and C<^> bitwise operators no longer coerce read-only arguments
[perl #20661].

=item *

Stringifying a scalar containing "-0.0" no longer has the effect of turning
false into true [perl #45133].

=item *

Some numeric operators were converting integers to floating point,
resulting in loss of precision on 64-bit platforms [perl #77456].

=item *

sprintf() was ignoring locales when called with constant arguments
[perl #78632].

=item *

Combining the vector (C<%v>) flag and dynamic precision would
cause C<sprintf> to confuse the order of its arguments, making it 
treat the string as the precision and vice-versa [perl #83194].

=back

=head2 Bugs Relating to the C API

=over

=item *

The C-level C<lex_stuff_pvn> function would sometimes cause a spurious
syntax error on the last line of the file if it lacked a final semicolon
[perl #74006] (5.12.1).

=item *

The C<eval_sv> and C<eval_pv> C functions now set C<$@> correctly when
there is a syntax error and no C<G_KEEPERR> flag, and never set it if the
C<G_KEEPERR> flag is present [perl #3719].

=item *

The XS multicall API no longer causes subroutines to lose reference counts
if called via the multicall interface from within those very subroutines.
This affects modules like L<List::Util>.  Calling one of its functions with an
active subroutine as the first argument could cause a crash [perl #78070].

=item *

The C<SvPVbyte> function available to XS modules now calls magic before
downgrading the SV, to avoid warnings about wide characters [perl #72398].

=item *

The ref types in the typemap for XS bindings now support magical variables
[perl #72684].

=item *

C<sv_catsv_flags> no longer calls C<mg_get> on its second argument (the
source string) if the flags passed to it do not include SV_GMAGIC.  So it
now matches the documentation.

=item *

C<my_strftime> no longer leaks memory.  This fixes a memory leak in
C<POSIX::strftime> [perl #73520].

=item *

F<XSUB.h> now correctly redefines fgets under PERL_IMPLICIT_SYS [perl #55049]
(5.12.1).

=item *

XS code using fputc() or fputs() on Windows could cause an error
due to their arguments being swapped [perl #72704] (5.12.1).

=item *

A possible segfault in the C<T_PTROBJ> default typemap has been fixed
(5.12.2).

=item *

A bug that could cause "Unknown error" messages when
C<call_sv(code, G_EVAL)> is called from an XS destructor has been fixed
(5.12.2).

=back

=head1 Known Problems

This is a list of significant unresolved issues which are regressions
from earlier versions of Perl or which affect widely-used CPAN modules.

=over 4

=item *

C<List::Util::first> misbehaves in the presence of a lexical C<$_>
(typically introduced by C<my $_> or implicitly by C<given>).  The variable
that gets set for each iteration is the package variable C<$_>, not the
lexical C<$_>.

A similar issue may occur in other modules that provide functions which
take a block as their first argument, like

    foo { ... $_ ...} list

See also: L<https://github.com/Perl/perl5/issues/9798>

=item *

readline() returns an empty string instead of a cached previous value
when it is interrupted by a signal

=item *

The changes in prototype handling break L<Switch>.  A patch has been sent
upstream and will hopefully appear on CPAN soon.

=item *

The upgrade to F<ExtUtils-MakeMaker-6.57_05> has caused
some tests in the F<Module-Install> distribution on CPAN to
fail. (Specifically, F<02_mymeta.t> tests 5 and 21; F<18_all_from.t>
tests 6 and 15; F<19_authors.t> tests 5, 13, 21, and 29; and
F<20_authors_with_special_characters.t> tests 6, 15, and 23 in version
1.00 of that distribution now fail.)

=item *

On VMS, C<Time::HiRes> tests will fail due to a bug in the CRTL's
implementation of C<setitimer>: previous timer values would be cleared
if a timer expired but not if the timer was reset before expiring.  HP
OpenVMS Engineering have corrected the problem and will release a patch
in due course (Quix case # QXCM1001115136).

=item *

On VMS, there were a handful of C<Module::Build> test failures we didn't
get to before the release; please watch CPAN for updates.

=back

=head1 Errata

=head2 keys(), values(), and each() work on arrays

You can now use the keys(), values(), and each() builtins on arrays;
previously you could use them only on hashes.  See L<perlfunc> for details.
This is actually a change introduced in perl 5.12.0, but it was missed from
that release's L<perl5120delta>.

=head2 split() and C<@_>

split() no longer modifies C<@_> when called in scalar or void context.
In void context it now produces a "Useless use of split" warning.
This was also a perl 5.12.0 change that missed the perldelta.

=head1 Obituary

Randy Kobes, creator of http://kobesearch.cpan.org/ and
contributor/maintainer to several core Perl toolchain modules, passed
away on September 18, 2010 after a battle with lung cancer.  The community
was richer for his involvement.  He will be missed.

=head1 Acknowledgements

Perl 5.14.0 represents one year of development since
Perl 5.12.0 and contains nearly 550,000 lines of changes across nearly
3,000 files from 150 authors and committers.

Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.14.0:

Aaron Crane, Abhijit Menon-Sen, Abigail, Ævar Arnfjörð Bjarmason,
Alastair Douglas, Alexander Alekseev, Alexander Hartmaier, Alexandr
Ciornii, Alex Davies, Alex Vandiver, Ali Polatel, Allen Smith, Andreas
König, Andrew Rodland, Andy Armstrong, Andy Dougherty, Aristotle
Pagaltzis, Arkturuz, Arvan, A. Sinan Unur, Ben Morrow, Bo Lindbergh,
Boris Ratner, Brad Gilbert, Bram, brian d foy, Brian Phillips, Casey
West, Charles Bailey, Chas. Owens, Chip Salzenberg, Chris 'BinGOs'
Williams, chromatic, Craig A. Berry, Curtis Jewell, Dagfinn Ilmari
Mannsåker, Dan Dascalescu, Dave Rolsky, David Caldwell, David Cantrell,
David Golden, David Leadbeater, David Mitchell, David Wheeler, Eric
Brine, Father Chrysostomos, Fingle Nark, Florian Ragwitz, Frank Wiegand,
Franz Fasching, Gene Sullivan, George Greer, Gerard Goossen, Gisle Aas,
Goro Fuji, Grant McLean, gregor herrmann, H.Merijn Brand, Hongwen Qiu,
Hugo van der Sanden, Ian Goodacre, James E Keenan, James Mastros, Jan
Dubois, Jay Hannah, Jerry D. Hedden, Jesse Vincent, Jim Cromie, Jirka
Hruška, John Peacock, Joshua ben Jore, Joshua Pritikin, Karl Williamson,
Kevin Ryde, kmx, Lars Dɪᴇᴄᴋᴏᴡ 迪拉斯, Larwan Berke, Leon Brocard, Leon
Timmermans, Lubomir Rintel, Lukas Mai, Maik Hentsche, Marty Pauley,
Marvin Humphrey, Matt Johnson, Matt S Trout, Max Maischein, Michael
Breen, Michael Fig, Michael G Schwern, Michael Parker, Michael Stevens,
Michael Witten, Mike Kelly, Moritz Lenz, Nicholas Clark, Nick Cleaton,
Nick Johnston, Nicolas Kaiser, Niko Tyni, Noirin Shirley, Nuno Carvalho,
Paul Evans, Paul Green, Paul Johnson, Paul Marquess, Peter J. Holzer,
Peter John Acklam, Peter Martini, Philippe Bruhat (BooK), Piotr Fusik,
Rafael Garcia-Suarez, Rainer Tammer, Reini Urban, Renee Baecker, Ricardo
Signes, Richard Möhn, Richard Soderberg, Rob Hoelz, Robin Barker, Ruslan
Zakirov, Salvador Fandiño, Salvador Ortiz Garcia, Shlomi Fish, Sinan
Unur, Sisyphus, Slaven Rezic, Steffen Müller, Steve Hay, Steven
Schubiger, Steve Peters, Sullivan Beck, Tatsuhiko Miyagawa, Tim Bunce,
Todd Rinaldo, Tom Christiansen, Tom Hukins, Tony Cook, Tye McQueen,
Vadim Konovalov, Vernon Lyon, Vincent Pit, Walt Mankowski, Wolfram
Humann, Yves Orton, Zefram, and Zsbán Ambrus.

This is woefully incomplete as it's automatically generated from version
control history.  In particular, it doesn't include the names of the
(very much appreciated) contributors who reported issues in previous
versions of Perl that helped make Perl 5.14.0 better. For a more complete
list of all of Perl's historical contributors, please see the C<AUTHORS>
file in the Perl 5.14.0 distribution.

Many of the changes included in this version originated in the CPAN
modules included in Perl's core. We're grateful to the entire CPAN
community for helping Perl to flourish.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the Perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5-security-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who are able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please use this address for
security issues in the Perl core I<only>, not for modules independently
distributed on CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details
on what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
                                                                                       usr/local/lib/perl5/5.40.0/pod/perl5141delta.pod                                                    0000644 0000000 0000000 00000017436 14714567415 017276  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =encoding utf8

=head1 NAME

perl5141delta - what is new for perl v5.14.1

=head1 DESCRIPTION

This document describes differences between the 5.14.0 release and
the 5.14.1 release.

If you are upgrading from an earlier release such as 5.12.0, first read
L<perl5140delta>, which describes differences between 5.12.0 and
5.14.0.

=head1 Core Enhancements

No changes since 5.14.0.

=head1 Security

No changes since 5.14.0.

=head1 Incompatible Changes

There are no changes intentionally incompatible with 5.14.0. If any
exist, they are bugs and reports are welcome.

=head1 Deprecations

There have been no deprecations since 5.14.0.

=head1 Modules and Pragmata

=head2 New Modules and Pragmata

None

=head2 Updated Modules and Pragmata

=over 4

=item *

L<B::Deparse> has been upgraded from version 1.03 to 1.04, to address two
regressions in Perl 5.14.0:

Deparsing of the C<glob> operator and its diamond (C<< <> >>) form now
works again. [perl #90898]

The presence of subroutines named C<::::> or C<::::::> no longer causes
B::Deparse to hang.

=item *

L<Pod::Perldoc> has been upgraded from version 3.15_03 to 3.15_04.

It corrects the search paths on VMS. [perl #90640]

=back

=head2 Removed Modules and Pragmata

None

=head1 Documentation

=head2 New Documentation

None

=head2 Changes to Existing Documentation

=head3 L<perlfunc>

=over

=item *

C<given>, C<when> and C<default> are now listed in L<perlfunc>.

=item *

Documentation for C<use> now includes a pointer to F<if.pm>.

=back

=head3 L<perllol>

=over

=item *

L<perllol> has been expanded with examples using the new C<push $scalar>
syntax introduced in Perl 5.14.0.

=back

=head3 L<perlop>

=over 4

=item *

The explanation of bitwise operators has been expanded to explain how they
work on Unicode strings.

=item *

The section on the triple-dot or yada-yada operator has been moved up, as
it used to separate two closely related sections about the comma operator.

=item *

More examples for C<m//g> have been added.

=item *

The C<<< <<\FOO >>> here-doc syntax has been documented.

=back

=head3 L<perlrun>

=over

=item *

L<perlrun> has undergone a significant clean-up.  Most notably, the
B<-0x...> form of the B<-0> flag has been clarified, and the final section
on environment variables has been corrected and expanded.

=back

=head3 L<POSIX>

=over 

=item *

The invocation documentation for C<WIFEXITED>, C<WEXITSTATUS>,
C<WIFSIGNALED>, C<WTERMSIG>, C<WIFSTOPPED>, and C<WSTOPSIG> was corrected.

=back

