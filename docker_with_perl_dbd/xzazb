	0xA872,
	0xA873,
	0xA892,
	0xA8B4,
	0xA90A,
	0xA922,
	0xA930,
	0xA947,
	0xA989,
	0xA98C,
	0xA98F,
	0xA9B3,
	0xA9E0,
	0xA9E5,
	0xA9E7,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA06,
	0xAA29,
	0xAA60,
	0xAA70,
	0xAA71,
	0xAA74,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAE2,
	0xAAEB,
	0xABC0,
	0xABCE,
	0xABD0,
	0xABD1,
	0xABD2,
	0xABDB,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A36,
	0x11013,
	0x11038,
	0x11075,
	0x11076,
	0x1108D,
	0x110B0,
	0x11107,
	0x11127,
	0x11144,
	0x11145,
	0x11147,
	0x11148,
	0x11155,
	0x11173,
	0x11191,
	0x111B3,
	0x11208,
	0x11212,
	0x11213,
	0x1122C,
	0x11284,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112BA,
	0x112DF,
	0x11315,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1140E,
	0x11435,
	0x1148F,
	0x114B0,
	0x1158E,
	0x115AF,
	0x1160E,
	0x11630,
	0x1168A,
	0x116AB,
	0x116B8,
	0x116B9,
	0x11700,
	0x1171B,
	0x11740,
	0x11747,
	0x1180A,
	0x1182C,
	0x1190C,
	0x11914,
	0x11915,
	0x11917,
	0x11918,
	0x11930,
	0x119AE,
	0x119D1,
	0x11A0B,
	0x11A33,
	0x11A5C,
	0x11A84,
	0x11C0E,
	0x11C2F,
	0x11C72,
	0x11C90,
	0x11D0C,
	0x11D31,
	0x11D6C,
	0x11D8A,
	0x11EE0,
	0x11EF2
};

static const UV UNI_INSC__CONSONANTDEAD_invlist[] = {  /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9CE,
	0x9CF,
	0xC5D,
	0xC5E,
	0xCDD,
	0xCDE,
	0xD54,
	0xD57,
	0xD7A,
	0xD80,
	0x1CF2,
	0x1CF4
};

static const UV UNI_INSC__CONSONANTFINAL_invlist[] = {  /* for all charsets */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1930,
	0x1932,
	0x1933,
	0x193A,
	0x19C1,
	0x19C8,
	0x1A58,
	0x1A5A,
	0x1B03,
	0x1B04,
	0x1B81,
	0x1B82,
	0x1BBE,
	0x1BC0,
	0x1BF0,
	0x1BF2,
	0x1C2D,
	0x1C34,
	0xA94F,
	0xA953,
	0xA982,
	0xA983,
	0xAA40,
	0xAA4E,
	0xABDB,
	0xABE3,
	0x11A8A,
	0x11A96
};

static const UV UNI_INSC__CONSONANTHEADLETTER_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF88,
	0xF8D
};

static const UV UNI_INSC__CONSONANTINITIALPOSTFIXED_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1A5A,
	0x1A5B
};

static const UV UNI_INSC__CONSONANTKILLER_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE4C,
	0xE4D,
	0x17CD,
	0x17CE
};

static const UV UNI_INSC__CONSONANTMEDIAL_invlist[] = {  /* for all charsets */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA75,
	0xA76,
	0xEBC,
	0xEBE,
	0x103B,
	0x103F,
	0x105E,
	0x1061,
	0x1082,
	0x1083,
	0x1A55,
	0x1A57,
	0xA8B4,
	0xA8B5,
	0xA9BD,
	0xA9C0,
	0xAA33,
	0xAA37,
	0x1171D,
	0x11720,
	0x11940,
	0x11941,
	0x11942,
	0x11943,
	0x11A3B,
	0x11A3F,
	0x11D47,
	0x11D48
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_INSC__CONSONANTPLACEHOLDER_invlist[] = {  /* for ASCII/Latin1 */
	31,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D,
	0x2E,
	0xA0,
	0xA1,
	0xD7,
	0xD8,
	0x980,
	0x981,
	0xA72,
	0xA74,
	0x104B,
	0x104C,
	0x104E,
	0x104F,
	0x1900,
	0x1901,
	0x1CFA,
	0x1CFB,
	0x2010,
	0x2015,
	0x25CC,
	0x25CD,
	0xAA74,
	0xAA77,
	0x11A3F,
	0x11A40,
	0x11A45,
	0x11A46,
	0x11EF2,
	0x11EF3
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_INSC__CONSONANTPLACEHOLDER_invlist[] = {  /* for EBCDIC 1047 */
	31,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x60,
	0x61,
	0xBF,
	0xC0,
	0x980,
	0x981,
	0xA72,
	0xA74,
	0x104B,
	0x104C,
	0x104E,
	0x104F,
	0x1900,
	0x1901,
	0x1CFA,
	0x1CFB,
	0x2010,
	0x2015,
	0x25CC,
	0x25CD,
	0xAA74,
	0xAA77,
	0x11A3F,
	0x11A40,
	0x11A45,
	0x11A46,
	0x11EF2,
	0x11EF3
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_INSC__CONSONANTPLACEHOLDER_invlist[] = {  /* for EBCDIC 037 */
	31,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x60,
	0x61,
	0xBF,
	0xC0,
	0x980,
	0x981,
	0xA72,
	0xA74,
	0x104B,
	0x104C,
	0x104E,
	0x104F,
	0x1900,
	0x1901,
	0x1CFA,
	0x1CFB,
	0x2010,
	0x2015,
	0x25CC,
	0x25CD,
	0xAA74,
	0xAA77,
	0x11A3F,
	0x11A40,
	0x11A45,
	0x11A46,
	0x11EF2,
	0x11EF3
};

#  endif	/* EBCDIC 037 */

static const UV UNI_INSC__CONSONANTPRECEDINGREPHA_invlist[] = {  /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD4E,
	0xD4F,
	0x11941,
	0x11942,
	0x11D46,
	0x11D47
};

static const UV UNI_INSC__CONSONANTPREFIXED_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x111C2,
	0x111C4,
	0x1193F,
	0x11940,
	0x11A3A,
	0x11A3B,
	0x11A84,
	0x11A8A
};

static const UV UNI_INSC__CONSONANTSUBJOINED_invlist[] = {  /* for all charsets */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0x1929,
	0x192C,
	0x1A57,
	0x1A58,
	0x1A5B,
	0x1A5F,
	0x1BA1,
	0x1BA4,
	0x1BAC,
	0x1BAE,
	0x1C24,
	0x1C26,
	0xA867,
	0xA869,
	0xA871,
	0xA872,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB0
};

static const UV UNI_INSC__CONSONANTSUCCEEDINGREPHA_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x17CC,
	0x17CD
};

static const UV UNI_INSC__CONSONANTWITHSTACKER_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCF1,
	0xCF3,
	0x1CF5,
	0x1CF7,
	0x11003,
	0x11005,
	0x11460,
	0x11462
};

static const UV UNI_INSC__GEMINATIONMARK_invlist[] = {  /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA71,
	0xA72,
	0x11237,
	0x11238,
	0x11A98,
	0x11A99
};

static const UV UNI_INSC__INVISIBLESTACKER_invlist[] = {  /* for all charsets */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1039,
	0x103A,
	0x17D2,
	0x17D3,
	0x1A60,
	0x1A61,
	0x1BAB,
	0x1BAC,
	0xAAF6,
	0xAAF7,
	0x10A3F,
	0x10A40,
	0x11133,
	0x11134,
	0x1193E,
	0x1193F,
	0x11A47,
	0x11A48,
	0x11A99,
	0x11A9A,
	0x11D45,
	0x11D46,
	0x11D97,
	0x11D98
};

static const UV UNI_INSC__MODIFYINGLETTER_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB83,
	0xB84
};

static const UV UNI_INSC__NONJOINER_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x200C,
	0x200D
};

static const UV UNI_INSC__NUKTA_invlist[] = {  /* for all charsets */
	55,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x93C,
	0x93D,
	0x9BC,
	0x9BD,
	0xA3C,
	0xA3D,
	0xABC,
	0xABD,
	0xAFD,
	0xB00,
	0xB3C,
	0xB3D,
	0xC3C,
	0xC3D,
	0xCBC,
	0xCBD,
	0xF39,
	0xF3A,
	0x1B34,
	0x1B35,
	0x1BE6,
	0x1BE7,
	0x1C37,
	0x1C38,
	0xA9B3,
	0xA9B4,
	0x10A38,
	0x10A3B,
	0x110BA,
	0x110BB,
	0x11173,
	0x11174,
	0x111CA,
	0x111CB,
	0x11236,
	0x11237,
	0x112E9,
	0x112EA,
	0x1133B,
	0x1133D,
	0x11446,
	0x11447,
	0x114C3,
	0x114C4,
	0x115C0,
	0x115C1,
	0x116B7,
	0x116B8,
	0x1183A,
	0x1183B,
	0x11943,
	0x11944,
	0x11D42,
	0x11D43
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_INSC__NUMBER_invlist[] = {  /* for ASCII/Latin1 */
	91,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF34,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1946,
	0x1950,
	0x19D0,
	0x19DB,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0x10A40,
	0x10A49,
	0x11066,
	0x11070,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x111E1,
	0x111F5,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173C,
	0x11950,
	0x1195A,
	0x11C50,
	0x11C6D,
	0x11D50,
	0x11D5A,
	0x11DA0,
	0x11DAA
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_INSC__NUMBER_invlist[] = {  /* for EBCDIC 1047 */
	91,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF34,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1946,
	0x1950,
	0x19D0,
	0x19DB,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0x10A40,
	0x10A49,
	0x11066,
	0x11070,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x111E1,
	0x111F5,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173C,
	0x11950,
	0x1195A,
	0x11C50,
	0x11C6D,
	0x11D50,
	0x11D5A,
	0x11DA0,
	0x11DAA
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_INSC__NUMBER_invlist[] = {  /* for EBCDIC 037 */
	91,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF34,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1946,
	0x1950,
	0x19D0,
	0x19DB,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0x10A40,
	0x10A49,
	0x11066,
	0x11070,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x111E1,
	0x111F5,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173C,
	0x11950,
	0x1195A,
	0x11C50,
	0x11C6D,
	0x11D50,
	0x11D5A,
	0x11DA0,
	0x11DAA
};

#  endif	/* EBCDIC 037 */

static const UV UNI_INSC__NUMBERJOINER_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1107F,
	0x11080
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_INSC__OTHER_invlist[] = {  /* for ASCII/Latin1 */
	647,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D,
	0x2E,
	0x30,
	0x3A,
	0xA0,
	0xA1,
	0xB2,
	0xB4,
	0xD7,
	0xD8,
	0x900,
	0x950,
	0x951,
	0x953,
	0x955,
	0x964,
	0x966,
	0x970,
	0x972,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0x9FE,
	0x9FF,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
