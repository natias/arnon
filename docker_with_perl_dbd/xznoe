// modification transforms for this image.
// 

IMF_STD_ATTRIBUTE_DEF (renderingTransform, RenderingTransform, std::string)
IMF_STD_ATTRIBUTE_DEF (lookModTransform, LookModTransform, std::string)


//
// xDensity -- horizontal output density, in pixels per inch.
// The image's vertical output density is xDensity * pixelAspectRatio.
//

IMF_STD_ATTRIBUTE_DEF (xDensity, XDensity, float)


//
// owner -- name of the owner of the image
//

IMF_STD_ATTRIBUTE_DEF (owner, Owner, std::string)
   

//
// comments -- additional image information in human-readable
// form, for example a verbal description of the image
//

IMF_STD_ATTRIBUTE_DEF (comments, Comments, std::string)


//
// capDate -- the date when the image was created or captured,
// in local time, and formatted as
//
//    YYYY:MM:DD hh:mm:ss
//
// where YYYY is the year (4 digits, e.g. 2003), MM is the month
// (2 digits, 01, 02, ... 12), DD is the day of the month (2 digits,
// 01, 02, ... 31), hh is the hour (2 digits, 00, 01, ... 23), mm
// is the minute, and ss is the second (2 digits, 00, 01, ... 59).
//
//

IMF_STD_ATTRIBUTE_DEF (capDate, CapDate, std::string)


//
// utcOffset -- offset of local time at capDate from
// Universal Coordinated Time (UTC), in seconds:
//
//    UTC == local time + utcOffset
//

IMF_STD_ATTRIBUTE_DEF (utcOffset, UtcOffset, float)


//
// longitude, latitude, altitude -- for images of real objects, the
// location where the image was recorded.  Longitude and latitude are
// in degrees east of Greenwich and north of the equator.  Altitude
// is in meters above sea level.  For example, Kathmandu, Nepal is
// at longitude 85.317, latitude 27.717, altitude 1305.
//

IMF_STD_ATTRIBUTE_DEF (longitude, Longitude, float)
IMF_STD_ATTRIBUTE_DEF (latitude, Latitude, float)
IMF_STD_ATTRIBUTE_DEF (altitude, Altitude, float)


//
// focus -- the camera's focus distance, in meters
//

IMF_STD_ATTRIBUTE_DEF (focus, Focus, float)


//
// exposure -- exposure time, in seconds
//

IMF_STD_ATTRIBUTE_DEF (expTime, ExpTime, float)


//
// aperture -- the camera's lens aperture, in f-stops (focal length
// of the lens divided by the diameter of the iris opening)
//

IMF_STD_ATTRIBUTE_DEF (aperture, Aperture, float)


//
// isoSpeed -- the ISO speed of the film or image sensor
// that was used to record the image
//

IMF_STD_ATTRIBUTE_DEF (isoSpeed, IsoSpeed, float)


//
// envmap -- if this attribute is present, the image represents
// an environment map.  The attribute's value defines how 3D
// directions are mapped to 2D pixel locations.  For details
// see header file ImfEnvmap.h
//

IMF_STD_ATTRIBUTE_DEF (envmap, Envmap, Envmap)


//
// keyCode -- for motion picture film frames.  Identifies film
// manufacturer, film type, film roll and frame position within
// the roll.
//

IMF_STD_ATTRIBUTE_DEF (keyCode, KeyCode, KeyCode)


//
// timeCode -- time and control code
//

IMF_STD_ATTRIBUTE_DEF (timeCode, TimeCode, TimeCode)


//
// wrapmodes -- determines how texture map images are extrapolated.
// If an OpenEXR file is used as a texture map for 3D rendering,
// texture coordinates (0.0, 0.0) and (1.0, 1.0) correspond to
// the upper left and lower right corners of the data window.
// If the image is mapped onto a surface with texture coordinates
// outside the zero-to-one range, then the image must be extrapolated.
// This attribute tells the renderer how to do this extrapolation.
// The attribute contains either a pair of comma-separated keywords,
// to specify separate extrapolation modes for the horizontal and
// vertical directions; or a single keyword, to specify extrapolation
// in both directions (e.g. "clamp,periodic" or "clamp").  Extra white
// space surrounding the keywords is allowed, but should be ignored
// by the renderer ("clamp, black " is equivalent to "clamp,black").
// The keywords listed below are predefined; some renderers may support
// additional extrapolation modes:
//
//	black		pixels outside the zero-to-one range are black
//
//	clamp		texture coordinates less than 0.0 and greater
//			than 1.0 are clamped to 0.0 and 1.0 respectively
//
//	periodic	the texture image repeats periodically
//
//	mirror		the texture image repeats periodically, but
//			every other instance is mirrored
//

IMF_STD_ATTRIBUTE_DEF (wrapmodes, Wrapmodes, std::string)


//
// framesPerSecond -- defines the nominal playback frame rate for image
// sequences, in frames per second.  Every image in a sequence should
// have a framesPerSecond attribute, and the attribute value should be
// the same for all images in the sequence.  If an image sequence has
// no framesPerSecond attribute, playback software should assume that
// the frame rate for the sequence is 24 frames per second.
//
// In order to allow exact representation of NTSC frame and field rates,
// framesPerSecond is stored as a rational number.  A rational number is
// a pair of integers, n and d, that represents the value n/d.
//
// For the exact values of commonly used frame rates, please see header
// file ImfFramesPerSecond.h.
//

IMF_STD_ATTRIBUTE_DEF (framesPerSecond, FramesPerSecond, Rational)


//
// multiView -- defines the view names for multi-view image files.
// A multi-view image contains two or more views of the same scene,
// as seen from different viewpoints, for example a left-eye and
// a right-eye view for stereo displays.  The multiView attribute
// lists the names of the views in an image, and a naming convention
// identifies the channels that belong to each view.
//
// For details, please see header file ImfMultiView.h
//

IMF_STD_ATTRIBUTE_DEF (multiView , MultiView, StringVector)


// 
// worldToCamera -- for images generated by 3D computer graphics rendering,
// a matrix that transforms 3D points from the world to the camera coordinate
// space of the renderer.
// 
// The camera coordinate space is left-handed.  Its origin indicates the
// location of the camera.  The positive x and y axes correspond to the
// "right" and "up" directions in the rendered image.  The positive z
// axis indicates the camera's viewing direction.  (Objects in front of
// the camera have positive z coordinates.)
// 
// Camera coordinate space in OpenEXR is the same as in Pixar's Renderman.
// 

IMF_STD_ATTRIBUTE_DEF (worldToCamera, WorldToCamera, IMATH_NAMESPACE::M44f)


// 
// worldToNDC -- for images generated by 3D computer graphics rendering, a
// matrix that transforms 3D points from the world to the Normalized Device
// Coordinate (NDC) space of the renderer.
// 
// NDC is a 2D coordinate space that corresponds to the image plane, with
// positive x and pointing to the right and y positive pointing down.  The
// coordinates (0, 0) and (1, 1) correspond to the upper left and lower right
// corners of the OpenEXR display window.
// 
// To transform a 3D point in word space into a 2D point in NDC space,
// multiply the 3D point by the worldToNDC matrix and discard the z
// coordinate.
// 
// NDC space in OpenEXR is the same as in Pixar's Renderman.
// 

IMF_STD_ATTRIBUTE_DEF (worldToNDC, WorldToNDC, IMATH_NAMESPACE::M44f)


//
// deepImageState -- specifies whether the pixels in a deep image are
// sorted and non-overlapping.
//
// Note: this attribute can be set by application code that writes a file
// in order to tell applications that read the file whether the pixel data
// must be cleaned up prior to image processing operations such as flattening. 
// The OpenEXR library does not verify that the attribute is consistent with
// the actual state of the pixels.  Application software may assume that the
// attribute is valid, as long as the software will not crash or lock up if
// any pixels are inconsistent with the deepImageState attribute.
//

IMF_STD_ATTRIBUTE_DEF (deepImageState, DeepImageState, DeepImageState)


//
// originalDataWindow -- if application software crops an image, then it
// should save the data window of the original, un-cropped image in the
// originalDataWindow attribute.
//

IMF_STD_ATTRIBUTE_DEF
    (originalDataWindow, OriginalDataWindow, IMATH_NAMESPACE::Box2i)


//
// dwaCompressionLevel -- sets the quality level for images compressed
// with the DWAA or DWAB method.
//
// DEPRECATED: use the methods directly in the header
IMF_STD_ATTRIBUTE_DEF_DEPRECATED (
    dwaCompressionLevel,
    DwaCompressionLevel,
    float,
    "use compression method in ImfHeader")

//
// ID Manifest
//

IMF_STD_ATTRIBUTE_DEF( idManifest,IDManifest,CompressedIDManifest)

#endif
                                                                                                                                           usr/include/OpenEXR/ImfStdIO.h                                                                      0000644 0000000 0000000 00000012326 14223432711 014552  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMF_STD_IO_H
#define INCLUDED_IMF_STD_IO_H

//-----------------------------------------------------------------------------
//
//	Low-level file input and output for OpenEXR
//	based on C++ standard iostreams.
//
//-----------------------------------------------------------------------------

#include "ImfExport.h"
#include "ImfNamespace.h"

#include "ImfIO.h"

#include <fstream>
#include <sstream>


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER

//-------------------------------------------
// class StdIFStream -- an implementation of
// class OPENEXR_IMF_INTERNAL_NAMESPACE::IStream based on class std::ifstream
//-------------------------------------------

class IMF_EXPORT_TYPE StdIFStream: public OPENEXR_IMF_INTERNAL_NAMESPACE::IStream
{
  public:

    //-------------------------------------------------------
    // A constructor that opens the file with the given name.
    // The destructor will close the file.
    //-------------------------------------------------------

    IMF_EXPORT StdIFStream (const char fileName[]);

    
    //---------------------------------------------------------
    // A constructor that uses a std::ifstream that has already
    // been opened by the caller.  The StdIFStream's destructor
    // will not close the std::ifstream.
    //---------------------------------------------------------

    IMF_EXPORT StdIFStream (std::ifstream &is, const char fileName[]);


    IMF_EXPORT virtual ~StdIFStream ();
    StdIFStream (const StdIFStream &) = delete;
    StdIFStream (StdIFStream &&) = delete;
    StdIFStream &operator=(const StdIFStream &) = delete;
    StdIFStream &operator=(StdIFStream &&) = delete;

    IMF_EXPORT virtual bool     read (char c[/*n*/], int n);
    IMF_EXPORT virtual uint64_t tellg ();
    IMF_EXPORT virtual void     seekg (uint64_t pos);
    IMF_EXPORT virtual void     clear ();

  private:

    std::ifstream *	_is;
    bool		_deleteStream;
};


//------------------------------------------------
// class StdISStream -- an implementation of class
// OPENEXR_IMF_INTERNAL_NAMESPACE::IStream, based on class std::istringstream
//------------------------------------------------

class IMF_EXPORT_TYPE StdISStream: public OPENEXR_IMF_INTERNAL_NAMESPACE::IStream
{
  public:

    IMF_EXPORT StdISStream ();
    IMF_EXPORT ~StdISStream ();
    StdISStream (const StdISStream &) = delete;
    StdISStream (StdISStream &&) = delete;
    StdISStream &operator=(const StdISStream &) = delete;
    StdISStream &operator=(StdISStream &&) = delete;

    IMF_EXPORT virtual bool     read (char c[/*n*/], int n);
    IMF_EXPORT virtual uint64_t tellg ();
    IMF_EXPORT virtual void     seekg (uint64_t pos);
    IMF_EXPORT virtual void     clear ();

    IMF_EXPORT std::string   str () const; 

    IMF_EXPORT void          str (const std::string &s);

  private:

    std::istringstream 	_is;
};



//-------------------------------------------
// class StdOFStream -- an implementation of
// class OPENEXR_IMF_INTERNAL_NAMESPACE::OStream based on class std::ofstream
//-------------------------------------------

class IMF_EXPORT_TYPE StdOFStream: public OPENEXR_IMF_INTERNAL_NAMESPACE::OStream
{
  public:

    //-------------------------------------------------------
    // A constructor that opens the file with the given name.
    // The destructor will close the file.
    //-------------------------------------------------------

    IMF_EXPORT StdOFStream (const char fileName[]);


    //---------------------------------------------------------
    // A constructor that uses a std::ofstream that has already
    // been opened by the caller.  The StdOFStream's destructor
    // will not close the std::ofstream.
    //---------------------------------------------------------

    IMF_EXPORT StdOFStream (std::ofstream &os, const char fileName[]);


    IMF_EXPORT virtual ~StdOFStream ();
    StdOFStream (const StdOFStream &) = delete;
    StdOFStream (StdOFStream &&) = delete;
    StdOFStream &operator=(const StdOFStream &) = delete;
    StdOFStream &operator=(StdOFStream &&) = delete;

    IMF_EXPORT virtual void     write (const char c[/*n*/], int n);
    IMF_EXPORT virtual uint64_t tellp ();
    IMF_EXPORT virtual void     seekp (uint64_t pos);

  private:

    std::ofstream *	_os;
    bool		_deleteStream;
};


//------------------------------------------------
// class StdOSStream -- an implementation of class
// OPENEXR_IMF_INTERNAL_NAMESPACE::OStream, based on class std::ostringstream
//------------------------------------------------

class IMF_EXPORT_TYPE StdOSStream: public OPENEXR_IMF_INTERNAL_NAMESPACE::OStream
{
  public:

    IMF_EXPORT StdOSStream ();
    IMF_EXPORT ~StdOSStream ();
    StdOSStream (const StdOSStream &) = delete;
    StdOSStream (StdOSStream &&) = delete;
    StdOSStream &operator=(const StdOSStream &) = delete;
    StdOSStream &operator=(StdOSStream &&) = delete;

    IMF_EXPORT virtual void     write (const char c[/*n*/], int n);
    IMF_EXPORT virtual uint64_t tellp ();
    IMF_EXPORT virtual void     seekp (uint64_t pos);

    IMF_EXPORT std::string      str () const;

  private:

    std::ostringstream 	_os;
};


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT

#endif
                                                                                                                                                                                                                                                                                                          usr/include/OpenEXR/ImfStringAttribute.h                                                            0000644 0000000 0000000 00000001355 14223432711 016722  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//


#ifndef INCLUDED_IMF_STRING_ATTRIBUTE_H
#define INCLUDED_IMF_STRING_ATTRIBUTE_H

//-----------------------------------------------------------------------------
//
//	class StringAttribute
//
//-----------------------------------------------------------------------------

#include "ImfExport.h"
#include "ImfNamespace.h"

#include "ImfAttribute.h"

#include <string>

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER


typedef TypedAttribute<std::string> StringAttribute;

#ifndef COMPILING_IMF_STRING_ATTRIBUTE
extern template class IMF_EXPORT_EXTERN_TEMPLATE TypedAttribute<std::string>;
#endif


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT

#endif
                                                                                                                                                                                                                                                                                   usr/include/OpenEXR/ImfStringVectorAttribute.h                                                      0000644 0000000 0000000 00000001646 14223432711 020110  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Weta Digital, Ltd and Contributors to the OpenEXR Project.
//



#ifndef INCLUDED_IMF_STRINGVECTOR_ATTRIBUTE_H
#define INCLUDED_IMF_STRINGVECTOR_ATTRIBUTE_H

//-----------------------------------------------------------------------------
//
//	class StringVectorAttribute
//
//-----------------------------------------------------------------------------

#include "ImfExport.h"
#include "ImfNamespace.h"

#include "ImfAttribute.h"

#include <string>
#include <vector>


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER

typedef std::vector<std::string> StringVector;
typedef TypedAttribute<OPENEXR_IMF_INTERNAL_NAMESPACE::StringVector> StringVectorAttribute;

#ifndef COMPILING_IMF_STRING_VECTOR_ATTRIBUTE
extern template class IMF_EXPORT_EXTERN_TEMPLATE TypedAttribute<OPENEXR_IMF_INTERNAL_NAMESPACE::StringVector>;
#endif


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT

#endif
                                                                                          usr/include/OpenEXR/ImfTestFile.h                                                                   0000644 0000000 0000000 00000003544 14223432711 015311  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMF_TEST_FILE_H
#define INCLUDED_IMF_TEST_FILE_H

//-----------------------------------------------------------------------------
//
//	Utility routines to test quickly if a given
//	file is an OpenEXR file, and whether the
//	file is scanline-based or tiled.
//
//-----------------------------------------------------------------------------

#include "ImfForward.h"

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER


IMF_EXPORT bool isOpenExrFile (const char fileName[]);

IMF_EXPORT bool isOpenExrFile (const char fileName[],
                               bool &isTiled);

IMF_EXPORT bool isOpenExrFile (const char fileName[],
                               bool &isTiled,
                               bool &isDeep);

IMF_EXPORT bool isOpenExrFile (const char fileName[],
                               bool &isTiled,
                               bool &isDeep,
                               bool &isMultiPart);

IMF_EXPORT bool isTiledOpenExrFile (const char fileName[]);

IMF_EXPORT bool isDeepOpenExrFile (const char fileName[]);

IMF_EXPORT bool isMultiPartOpenExrFile (const char fileName[]);

IMF_EXPORT bool isOpenExrFile (IStream &is);

IMF_EXPORT bool isOpenExrFile (IStream &is,
                               bool &isTiled);

IMF_EXPORT bool isOpenExrFile (IStream &is,
                               bool &isTiled,
                               bool &isDeep);

IMF_EXPORT bool isOpenExrFile (IStream &is,
                               bool &isTiled,
                               bool &isDeep,
                               bool &isMultiPart);

IMF_EXPORT bool isTiledOpenExrFile (IStream &is);

IMF_EXPORT bool isDeepOpenExrFile (IStream &is);

IMF_EXPORT bool isMultiPartOpenExrFile (IStream &is);


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT

#endif
                                                                                                                                                            usr/include/OpenEXR/ImfThreading.h                                                                  0000644 0000000 0000000 00000005134 14223432711 015474  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMF_THREADING_H
#define INCLUDED_IMF_THREADING_H

#include "ImfExport.h"
#include "ImfNamespace.h"

//-----------------------------------------------------------------------------
//
//	Threading support for the OpenEXR library
//
//	The OpenEXR library uses threads to perform reading and writing
//	of OpenEXR files in parallel.  The thread that calls the library
//	always performs the actual file IO (this is usually the main
//	application thread) whereas a several worker threads perform
//	data compression and decompression.  The number of worker
//	threads can be any non-negative value (a value of zero reverts
//	to single-threaded operation).  As long as there is at least
//	one worker thread, file IO and compression can potentially be
//	done concurrently through pinelining.  If there are two or more
//	worker threads, then pipelining as well as concurrent compression
//	of multiple blocks can be performed.
// 
//	Threading in the EXR library is controllable at two granularities:
//
//	* The functions in this file query and control the total number
//	  of worker threads, which will be created globally for the whole
//	  library.  Regardless of how many input or output files are
//	  opened simultaneously, the library will use at most this number
//	  of worker threads to perform all work.  The default number of
//	  global worker threads is zero (i.e. single-threaded operation;
//	  everything happens in the thread that calls the library).
//
//	* Furthermore, it is possible to set the number of threads that
//	  each input or output file should keep busy.  This number can
//	  be explicitly set for each file.  The default behavior is for
//	  each file to try to occupy all worker threads in the library's
//	  thread pool.
//
//-----------------------------------------------------------------------------

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER


//-----------------------------------------------------------------------------
// Return the number of Imf-global worker threads used for parallel
// compression and decompression of OpenEXR files.
//-----------------------------------------------------------------------------
    
IMF_EXPORT int     globalThreadCount ();


//-----------------------------------------------------------------------------
// Change the number of Imf-global worker threads
//-----------------------------------------------------------------------------

IMF_EXPORT void    setGlobalThreadCount (int count);


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                    usr/include/OpenEXR/ImfTileDescription.h                                                            0000644 0000000 0000000 00000003045 14223432711 016667  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMF_TILE_DESCRIPTION_H
#define INCLUDED_IMF_TILE_DESCRIPTION_H

//-----------------------------------------------------------------------------
//
//	class TileDescription and enum LevelMode
//
//-----------------------------------------------------------------------------
#include "ImfExport.h"
#include "ImfNamespace.h"

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER


enum IMF_EXPORT_ENUM LevelMode
{
    ONE_LEVEL = 0,
    MIPMAP_LEVELS = 1,
    RIPMAP_LEVELS = 2,
    
    NUM_LEVELMODES	// number of different level modes
};


enum IMF_EXPORT_ENUM LevelRoundingMode
{
    ROUND_DOWN = 0,
    ROUND_UP = 1,

    NUM_ROUNDINGMODES	// number of different rounding modes
};


class IMF_EXPORT_TYPE TileDescription
{
  public:

    unsigned int	xSize;		// size of a tile in the x dimension
    unsigned int	ySize;		// size of a tile in the y dimension
    LevelMode		mode;
    LevelRoundingMode	roundingMode;

    TileDescription (unsigned int xs = 32,
		     unsigned int ys = 32,
                     LevelMode m = ONE_LEVEL,
		     LevelRoundingMode r = ROUND_DOWN)
    :
        xSize (xs),
	ySize (ys),
	mode (m),
	roundingMode (r)
    {
	// empty
    }

    bool
    operator == (const TileDescription &other) const
    {
	return xSize        == other.xSize &&
	       ySize        == other.ySize &&
	       mode         == other.mode &&
	       roundingMode == other.roundingMode;
    }
};


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT





#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           usr/include/OpenEXR/ImfTileDescriptionAttribute.h                                                   0000644 0000000 0000000 00000001555 14223432711 020557  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMF_TILE_DESCRIPTION_ATTRIBUTE_H
#define INCLUDED_IMF_TILE_DESCRIPTION_ATTRIBUTE_H

//-----------------------------------------------------------------------------
//
//	class TileDescriptionAttribute
//
//-----------------------------------------------------------------------------

#include "ImfExport.h"
#include "ImfNamespace.h"

#include "ImfAttribute.h"
#include "ImfTileDescription.h"

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER

typedef TypedAttribute<OPENEXR_IMF_INTERNAL_NAMESPACE::TileDescription> TileDescriptionAttribute;

#ifndef COMPILING_IMF_STRING_VECTOR_ATTRIBUTE
extern template class IMF_EXPORT_EXTERN_TEMPLATE TypedAttribute<OPENEXR_IMF_INTERNAL_NAMESPACE::TileDescription>;
#endif


OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT

#endif
                                                                                                                                                   usr/include/OpenEXR/ImfTiledInputFile.h                                                             0000644 0000000 0000000 00000031321 14223432711 016445  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Contributors to the OpenEXR Project.
//

#ifndef INCLUDED_IMF_TILED_INPUT_FILE_H
#define INCLUDED_IMF_TILED_INPUT_FILE_H

//-----------------------------------------------------------------------------
//
//	class TiledInputFile
//
//-----------------------------------------------------------------------------

#include "ImfForward.h"

#include "ImfThreading.h"
#include "ImfGenericInputFile.h"

#include "ImfTileDescription.h"
#include <ImathBox.h>

OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER


class IMF_EXPORT_TYPE TiledInputFile : public GenericInputFile
{
  public:

    //--------------------------------------------------------------------
    // A constructor that opens the file with the specified name, and
    // reads the file header.  The constructor throws an IEX_NAMESPACE::ArgExc
    // exception if the file is not tiled.
    // The numThreads parameter specifies how many worker threads this
    // file will try to keep busy when decompressing individual tiles.
    // Destroying TiledInputFile objects constructed with this constructor
    // automatically closes the corresponding files.
    //--------------------------------------------------------------------

    IMF_EXPORT
    TiledInputFile (const char fileName[],
                    int numThreads = globalThreadCount ());

    
    // ----------------------------------------------------------
    // A constructor that attaches the new TiledInputFile object
    // to a file that has already been opened.  
    // Destroying TiledInputFile objects constructed with this
    // constructor does not automatically close the corresponding
    // files.
    // ----------------------------------------------------------

    IMF_EXPORT
    TiledInputFile (OPENEXR_IMF_INTERNAL_NAMESPACE::IStream &is, int numThreads = globalThreadCount ());


    //-----------
    // Destructor
    //-----------

    IMF_EXPORT
    virtual ~TiledInputFile ();

    TiledInputFile (const TiledInputFile& other) = delete;
    TiledInputFile& operator = (const TiledInputFile& other) = delete;
    TiledInputFile (TiledInputFile&& other) = delete;
    TiledInputFile& operator = (TiledInputFile&& other) = delete;


    //------------------------
    // Access to the file name
    //------------------------

    IMF_EXPORT
    const char *	fileName () const;


    //--------------------------
    // Access to the file header
    //--------------------------

    IMF_EXPORT
    const Header &	header () const;


    //----------------------------------
    // Access to the file format version
    //----------------------------------

    IMF_EXPORT
    int			version () const;


    //-----------------------------------------------------------
    // Set the current frame buffer -- copies the FrameBuffer
    // object into the TiledInputFile object.
    //
    // The current frame buffer is the destination for the pixel
    // data read from the file.  The current frame buffer must be
    // set at least once before readTile() is called.
    // The current frame buffer can be changed after each call
    // to readTile().
    //-----------------------------------------------------------

    IMF_EXPORT
    void		setFrameBuffer (const FrameBuffer &frameBuffer);


    //-----------------------------------
    // Access to the current frame buffer
    //-----------------------------------

    IMF_EXPORT
    const FrameBuffer &	frameBuffer () const;


    //------------------------------------------------------------
    // Check if the file is complete:
    //
    // isComplete() returns true if all pixels in the data window
    // (in all levels) are present in the input file, or false if
    // any pixels are missing.  (Another program may still be busy
    // writing the file, or file writing may have been aborted
    // prematurely.)
    //------------------------------------------------------------

    IMF_EXPORT
    bool		isComplete () const;


    //--------------------------------------------------
    // Utility functions:
    //--------------------------------------------------

    //---------------------------------------------------------
    // Multiresolution mode and tile size:
    // The following functions return the xSize, ySize and mode
    // fields of the file header's TileDescriptionAttribute.
    //---------------------------------------------------------

    IMF_EXPORT
    unsigned int	tileXSize () const;
    IMF_EXPORT
    unsigned int	tileYSize () const;
    IMF_EXPORT
    LevelMode		levelMode () const;
    IMF_EXPORT
    LevelRoundingMode	levelRoundingMode () const;


    //--------------------------------------------------------------------
    // Number of levels:
    //
    // numXLevels() returns the file's number of levels in x direction.
    //
    //	if levelMode() == ONE_LEVEL:
    //      return value is: 1
    //
    //	if levelMode() == MIPMAP_LEVELS:
    //      return value is: rfunc (log (max (w, h)) / log (2)) + 1
    //
    //	if levelMode() == RIPMAP_LEVELS:
    //      return value is: rfunc (log (w) / log (2)) + 1
    //
    //	where
    //	    w is the width of the image's data window,  max.x - min.x + 1,
    //	    y is the height of the image's data window, max.y - min.y + 1,
    //	    and rfunc(x) is either floor(x), or ceil(x), depending on
    //	    whether levelRoundingMode() returns ROUND_DOWN or ROUND_UP.
    //
    // numYLevels() returns the file's number of levels in y direction.
    //
    //	if levelMode() == ONE_LEVEL or levelMode() == MIPMAP_LEVELS:
    //      return value is the same as for numXLevels()
    //
    //	if levelMode() == RIPMAP_LEVELS:
    //      return value is: rfunc (log (h) / log (2)) + 1
    //
    //
    // numLevels() is a convenience function for use with
    // MIPMAP_LEVELS files.
    //
    //	if levelMode() == ONE_LEVEL or levelMode() == MIPMAP_LEVELS:
    //      return value is the same as for numXLevels()
    //
    //	if levelMode() == RIPMAP_LEVELS:
    //      an IEX_NAMESPACE::LogicExc exception is thrown
    //
    // isValidLevel(lx, ly) returns true if the file contains 
    // a level with level number (lx, ly), false if not.
    //
    //--------------------------------------------------------------------

    IMF_EXPORT
    int			numLevels () const;
    IMF_EXPORT
    int			numXLevels () const;
    IMF_EXPORT
    int			numYLevels () const;
    IMF_EXPORT
    bool		isValidLevel (int lx, int ly) const;


    //----------------------------------------------------------
    // Dimensions of a level:
    //
    // levelWidth(lx) returns the width of a level with level
    // number (lx, *), where * is any number.
    //
    //	return value is:
    //      max (1, rfunc (w / pow (2, lx)))
    //
    //
    // levelHeight(ly) returns the height of a level with level
    // number (*, ly), where * is any number.
    //
    //	return value is:
    //      max (1, rfunc (h / pow (2, ly)))
    //
    //----------------------------------------------------------

    IMF_EXPORT
    int			levelWidth  (int lx) const;
    IMF_EXPORT
    int			levelHeight (int ly) const;


    //--------------------------------------------------------------
    // Number of tiles:
    //
    // numXTiles(lx) returns the number of tiles in x direction
    // that cover a level with level number (lx, *), where * is
    // any number.
    //
    //	return value is:
    //      (levelWidth(lx) + tileXSize() - 1) / tileXSize()
    //
    //
    // numYTiles(ly) returns the number of tiles in y direction
    // that cover a level with level number (*, ly), where * is
