template <> const Vec2<int64_t>& Vec2<int64_t>::normalizeExc() = delete;
template <> IMATH_HOSTDEVICE const Vec2<int64_t>& Vec2<int64_t>::normalizeNonNull() IMATH_NOEXCEPT = delete;
template <> IMATH_HOSTDEVICE Vec2<int64_t> Vec2<int64_t>::normalized() const IMATH_NOEXCEPT = delete;
template <> Vec2<int64_t> Vec2<int64_t>::normalizedExc() const = delete;
template <> IMATH_HOSTDEVICE Vec2<int64_t> Vec2<int64_t>::normalizedNonNull() const IMATH_NOEXCEPT = delete;

// Vec3<short>
template <> IMATH_HOSTDEVICE short Vec3<short>::length() const IMATH_NOEXCEPT = delete;
template <> IMATH_HOSTDEVICE const Vec3<short>& Vec3<short>::normalize() IMATH_NOEXCEPT = delete;
template <> const Vec3<short>& Vec3<short>::normalizeExc() = delete;
template <> IMATH_HOSTDEVICE const Vec3<short>& Vec3<short>::normalizeNonNull() IMATH_NOEXCEPT = delete;
template <> IMATH_HOSTDEVICE Vec3<short> Vec3<short>::normalized() const IMATH_NOEXCEPT = delete;
template <> Vec3<short> Vec3<short>::normalizedExc() const = delete;
template <> IMATH_HOSTDEVICE Vec3<short> Vec3<short>::normalizedNonNull() const IMATH_NOEXCEPT = delete;

// Vec3<int>
template <> IMATH_HOSTDEVICE int Vec3<int>::length() const IMATH_NOEXCEPT = delete;
template <> IMATH_HOSTDEVICE const Vec3<int>& Vec3<int>::normalize() IMATH_NOEXCEPT = delete;
template <> const Vec3<int>& Vec3<int>::normalizeExc() = delete;
template <> IMATH_HOSTDEVICE const Vec3<int>& Vec3<int>::normalizeNonNull() IMATH_NOEXCEPT = delete;
template <> IMATH_HOSTDEVICE Vec3<int> Vec3<int>::normalized() const IMATH_NOEXCEPT = delete;
template <> Vec3<int> Vec3<int>::normalizedExc() const = delete;
template <> IMATH_HOSTDEVICE Vec3<int> Vec3<int>::normalizedNonNull() const IMATH_NOEXCEPT = delete;

// Vec3<int64_t>
template <> IMATH_HOSTDEVICE int64_t Vec3<int64_t>::length() const IMATH_NOEXCEPT = delete;
template <> IMATH_HOSTDEVICE const Vec3<int64_t>& Vec3<int64_t>::normalize() IMATH_NOEXCEPT = delete;
template <> const Vec3<int64_t>& Vec3<int64_t>::normalizeExc() = delete;
template <> IMATH_HOSTDEVICE const Vec3<int64_t>& Vec3<int64_t>::normalizeNonNull() IMATH_NOEXCEPT = delete;
template <> IMATH_HOSTDEVICE Vec3<int64_t> Vec3<int64_t>::normalized() const IMATH_NOEXCEPT = delete;
template <> Vec3<int64_t> Vec3<int64_t>::normalizedExc() const = delete;
template <> IMATH_HOSTDEVICE Vec3<int64_t> Vec3<int64_t>::normalizedNonNull() const IMATH_NOEXCEPT = delete;

// Vec4<short>
template <> IMATH_HOSTDEVICE short Vec4<short>::length() const IMATH_NOEXCEPT = delete;
template <> IMATH_HOSTDEVICE const Vec4<short>& Vec4<short>::normalize() IMATH_NOEXCEPT = delete;
template <> const Vec4<short>& Vec4<short>::normalizeExc() = delete;
template <> IMATH_HOSTDEVICE const Vec4<short>& Vec4<short>::normalizeNonNull() IMATH_NOEXCEPT = delete;
template <> IMATH_HOSTDEVICE Vec4<short> Vec4<short>::normalized() const IMATH_NOEXCEPT = delete;
template <> Vec4<short> Vec4<short>::normalizedExc() const = delete;
template <> IMATH_HOSTDEVICE Vec4<short> Vec4<short>::normalizedNonNull() const IMATH_NOEXCEPT = delete;

// Vec4<int>
template <> IMATH_HOSTDEVICE int Vec4<int>::length() const IMATH_NOEXCEPT = delete;
template <> IMATH_HOSTDEVICE const Vec4<int>& Vec4<int>::normalize() IMATH_NOEXCEPT = delete;
template <> const Vec4<int>& Vec4<int>::normalizeExc() = delete;
template <> IMATH_HOSTDEVICE const Vec4<int>& Vec4<int>::normalizeNonNull() IMATH_NOEXCEPT = delete;
template <> IMATH_HOSTDEVICE Vec4<int> Vec4<int>::normalized() const IMATH_NOEXCEPT = delete;
template <> Vec4<int> Vec4<int>::normalizedExc() const = delete;
template <> IMATH_HOSTDEVICE Vec4<int> Vec4<int>::normalizedNonNull() const IMATH_NOEXCEPT = delete;

// Vec4<int64_t>
template <> IMATH_HOSTDEVICE int64_t Vec4<int64_t>::length() const IMATH_NOEXCEPT = delete;
template <> IMATH_HOSTDEVICE const Vec4<int64_t>& Vec4<int64_t>::normalize() IMATH_NOEXCEPT = delete;
template <> const Vec4<int64_t>& Vec4<int64_t>::normalizeExc() = delete;
template <> IMATH_HOSTDEVICE const Vec4<int64_t>& Vec4<int64_t>::normalizeNonNull() IMATH_NOEXCEPT = delete;
template <> IMATH_HOSTDEVICE Vec4<int64_t> Vec4<int64_t>::normalized() const IMATH_NOEXCEPT = delete;
template <> Vec4<int64_t> Vec4<int64_t>::normalizedExc() const = delete;
template <> IMATH_HOSTDEVICE Vec4<int64_t> Vec4<int64_t>::normalizedNonNull() const IMATH_NOEXCEPT = delete;

/// @endcond Doxygen_Suppress

//------------------------
// Implementation of Vec2:
//------------------------

template <class T>
IMATH_CONSTEXPR14 IMATH_HOSTDEVICE inline T&
Vec2<T>::operator[] (int i) IMATH_NOEXCEPT
{
    return (&x)[i]; // NOSONAR - suppress SonarCloud bug report.
}

template <class T>
constexpr IMATH_HOSTDEVICE inline const T&
Vec2<T>::operator[] (int i) const IMATH_NOEXCEPT
{
    return (&x)[i]; // NOSONAR - suppress SonarCloud bug report.
}

template <class T> IMATH_HOSTDEVICE inline Vec2<T>::Vec2() IMATH_NOEXCEPT
{
    // empty, and not constexpr because data is uninitialized.
}

template <class T> IMATH_HOSTDEVICE constexpr inline Vec2<T>::Vec2 (T a) IMATH_NOEXCEPT
    : x(a), y(a)
{
}

template <class T> IMATH_HOSTDEVICE constexpr inline Vec2<T>::Vec2 (T a, T b) IMATH_NOEXCEPT
    : x(a), y(b)
{
}

template <class T> IMATH_HOSTDEVICE constexpr inline Vec2<T>::Vec2 (const Vec2& v) IMATH_NOEXCEPT
    : x(v.x), y(v.y)
{
}

template <class T> template <class S> IMATH_HOSTDEVICE constexpr inline Vec2<T>::Vec2 (const Vec2<S>& v) IMATH_NOEXCEPT
    : x(T(v.x)), y(T(v.y))
{
}

template <class T>
IMATH_CONSTEXPR14 IMATH_HOSTDEVICE inline const Vec2<T>&
Vec2<T>::operator= (const Vec2& v) IMATH_NOEXCEPT
{
    x = v.x;
    y = v.y;
    return *this;
}

template <class T>
template <class S>
IMATH_HOSTDEVICE inline void
Vec2<T>::setValue (S a, S b) IMATH_NOEXCEPT
{
    x = T (a);
    y = T (b);
}

template <class T>
template <class S>
IMATH_HOSTDEVICE inline void
Vec2<T>::setValue (const Vec2<S>& v) IMATH_NOEXCEPT
{
    x = T (v.x);
    y = T (v.y);
}

template <class T>
template <class S>
IMATH_HOSTDEVICE inline void
Vec2<T>::getValue (S& a, S& b) const IMATH_NOEXCEPT
{
    a = S (x);
    b = S (y);
}

template <class T>
template <class S>
IMATH_HOSTDEVICE inline void
Vec2<T>::getValue (Vec2<S>& v) const IMATH_NOEXCEPT
{
    v.x = S (x);
    v.y = S (y);
}

template <class T>
IMATH_HOSTDEVICE inline T*
Vec2<T>::getValue() IMATH_NOEXCEPT
{
    return (T*) &x;
}

template <class T>
IMATH_HOSTDEVICE inline const T*
Vec2<T>::getValue() const IMATH_NOEXCEPT
{
    return (const T*) &x;
}

template <class T>
template <class S>
IMATH_HOSTDEVICE constexpr inline bool
Vec2<T>::operator== (const Vec2<S>& v) const IMATH_NOEXCEPT
{
    return x == v.x && y == v.y;
}

template <class T>
template <class S>
IMATH_HOSTDEVICE constexpr inline bool
Vec2<T>::operator!= (const Vec2<S>& v) const IMATH_NOEXCEPT
{
    return x != v.x || y != v.y;
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline bool
Vec2<T>::equalWithAbsError (const Vec2<T>& v, T e) const IMATH_NOEXCEPT
{
    for (int i = 0; i < 2; i++)
        if (!IMATH_INTERNAL_NAMESPACE::equalWithAbsError ((*this)[i], v[i], e))
            return false;

    return true;
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline bool
Vec2<T>::equalWithRelError (const Vec2<T>& v, T e) const IMATH_NOEXCEPT
{
    for (int i = 0; i < 2; i++)
        if (!IMATH_INTERNAL_NAMESPACE::equalWithRelError ((*this)[i], v[i], e))
            return false;

    return true;
}

template <class T>
IMATH_HOSTDEVICE constexpr inline T
Vec2<T>::dot (const Vec2& v) const IMATH_NOEXCEPT
{
    return x * v.x + y * v.y;
}

template <class T>
IMATH_HOSTDEVICE constexpr inline T
Vec2<T>::operator^ (const Vec2& v) const IMATH_NOEXCEPT
{
    return dot (v);
}

template <class T>
IMATH_HOSTDEVICE constexpr inline T
Vec2<T>::cross (const Vec2& v) const IMATH_NOEXCEPT
{
    return x * v.y - y * v.x;
}

template <class T>
IMATH_HOSTDEVICE constexpr inline T
Vec2<T>::operator% (const Vec2& v) const IMATH_NOEXCEPT
{
    return x * v.y - y * v.x;
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec2<T>&
Vec2<T>::operator+= (const Vec2& v) IMATH_NOEXCEPT
{
    x += v.x;
    y += v.y;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec2<T>
Vec2<T>::operator+ (const Vec2& v) const IMATH_NOEXCEPT
{
    return Vec2 (x + v.x, y + v.y);
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec2<T>&
Vec2<T>::operator-= (const Vec2& v) IMATH_NOEXCEPT
{
    x -= v.x;
    y -= v.y;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec2<T>
Vec2<T>::operator- (const Vec2& v) const IMATH_NOEXCEPT
{
    return Vec2 (x - v.x, y - v.y);
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec2<T>
Vec2<T>::operator-() const IMATH_NOEXCEPT
{
    return Vec2 (-x, -y);
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec2<T>&
Vec2<T>::negate() IMATH_NOEXCEPT
{
    x = -x;
    y = -y;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec2<T>&
Vec2<T>::operator*= (const Vec2& v) IMATH_NOEXCEPT
{
    x *= v.x;
    y *= v.y;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec2<T>&
Vec2<T>::operator*= (T a) IMATH_NOEXCEPT
{
    x *= a;
    y *= a;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec2<T>
Vec2<T>::operator* (const Vec2& v) const IMATH_NOEXCEPT
{
    return Vec2 (x * v.x, y * v.y);
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec2<T>
Vec2<T>::operator* (T a) const IMATH_NOEXCEPT
{
    return Vec2 (x * a, y * a);
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec2<T>&
Vec2<T>::operator/= (const Vec2& v) IMATH_NOEXCEPT
{
    x /= v.x;
    y /= v.y;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec2<T>&
Vec2<T>::operator/= (T a) IMATH_NOEXCEPT
{
    x /= a;
    y /= a;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec2<T>
Vec2<T>::operator/ (const Vec2& v) const IMATH_NOEXCEPT
{
    return Vec2 (x / v.x, y / v.y);
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec2<T>
Vec2<T>::operator/ (T a) const IMATH_NOEXCEPT
{
    return Vec2 (x / a, y / a);
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline T
Vec2<T>::lengthTiny() const IMATH_NOEXCEPT
{
    T absX = std::abs(x);
    T absY = std::abs(y);

    T max = absX;

    if (max < absY)
        max = absY;

    if (IMATH_UNLIKELY(max == T (0)))
        return T (0);

    //
    // Do not replace the divisions by max with multiplications by 1/max.
    // Computing 1/max can overflow but the divisions below will always
    // produce results less than or equal to 1.
    //

    absX /= max;
    absY /= max;

    return max * std::sqrt (absX * absX + absY * absY);
}

template <class T>
IMATH_HOSTDEVICE inline T
Vec2<T>::length() const IMATH_NOEXCEPT
{
    T length2 = dot (*this);

    if (IMATH_UNLIKELY(length2 < T (2) * std::numeric_limits<T>::min()))
        return lengthTiny();

    return std::sqrt (length2);
}

template <class T>
IMATH_HOSTDEVICE constexpr inline T
Vec2<T>::length2() const IMATH_NOEXCEPT
{
    return dot (*this);
}

template <class T>
IMATH_HOSTDEVICE inline const Vec2<T>&
Vec2<T>::normalize() IMATH_NOEXCEPT
{
    T l = length();

    if (IMATH_LIKELY(l != T (0)))
    {
        //
        // Do not replace the divisions by l with multiplications by 1/l.
        // Computing 1/l can overflow but the divisions below will always
        // produce results less than or equal to 1.
        //

        x /= l;
        y /= l;
    }

    return *this;
}

template <class T>
inline const Vec2<T>&
Vec2<T>::normalizeExc()
{
    T l = length();

    if (IMATH_UNLIKELY(l == T (0)))
        throw std::domain_error ("Cannot normalize null vector.");

    x /= l;
    y /= l;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE inline const Vec2<T>&
Vec2<T>::normalizeNonNull() IMATH_NOEXCEPT
{
    T l = length();
    x /= l;
    y /= l;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE inline Vec2<T>
Vec2<T>::normalized() const IMATH_NOEXCEPT
{
    T l = length();

    if (IMATH_UNLIKELY(l == T (0)))
        return Vec2 (T (0));

    return Vec2 (x / l, y / l);
}

template <class T>
inline Vec2<T>
Vec2<T>::normalizedExc() const
{
    T l = length();

    if (IMATH_UNLIKELY(l == T (0)))
        throw std::domain_error ("Cannot normalize null vector.");

    return Vec2 (x / l, y / l);
}

template <class T>
IMATH_HOSTDEVICE inline Vec2<T>
Vec2<T>::normalizedNonNull() const IMATH_NOEXCEPT
{
    T l = length();
    return Vec2 (x / l, y / l);
}

//-----------------------
// Implementation of Vec3
//-----------------------

template <class T>
IMATH_HOSTDEVICE
IMATH_CONSTEXPR14 inline T&
Vec3<T>::operator[] (int i) IMATH_NOEXCEPT
{
    return (&x)[i]; // NOSONAR - suppress SonarCloud bug report.
}

template <class T>
IMATH_HOSTDEVICE constexpr inline const T&
Vec3<T>::operator[] (int i) const IMATH_NOEXCEPT
{
    return (&x)[i]; // NOSONAR - suppress SonarCloud bug report.
}

template <class T> IMATH_HOSTDEVICE inline Vec3<T>::Vec3() IMATH_NOEXCEPT
{
    // empty, and not constexpr because data is uninitialized.
}

template <class T> IMATH_HOSTDEVICE constexpr inline Vec3<T>::Vec3 (T a) IMATH_NOEXCEPT
    : x(a), y(a), z(a)
{
}

template <class T> IMATH_HOSTDEVICE constexpr inline Vec3<T>::Vec3 (T a, T b, T c) IMATH_NOEXCEPT
    : x(a), y(b), z(c)
{
}

template <class T> IMATH_HOSTDEVICE constexpr inline Vec3<T>::Vec3 (const Vec3& v) IMATH_NOEXCEPT
    : x(v.x), y(v.y), z(v.z)
{
}

template <class T> template <class S>
IMATH_HOSTDEVICE constexpr inline Vec3<T>::Vec3 (const Vec3<S>& v) IMATH_NOEXCEPT
    : x(T(v.x)), y(T(v.y)), z(T(v.z))
{
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec3<T>&
Vec3<T>::operator= (const Vec3& v) IMATH_NOEXCEPT
{
    x = v.x;
    y = v.y;
    z = v.z;
    return *this;
}

template <class T> template <class S>
IMATH_HOSTDEVICE constexpr inline Vec3<T>::Vec3 (const Vec4<S>& v) IMATH_NOEXCEPT
    : x(T(v.x/v.w)), y(T(v.y/v.w)), z(T(v.z/v.w))
{
}

template <class T>
template <class S>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline Vec3<T>::Vec3 (const Vec4<S>& v, InfException)
{
    T vx = T (v.x);
    T vy = T (v.y);
    T vz = T (v.z);
    T vw = T (v.w);

    T absW = (vw >= T (0)) ? vw : -vw;

    if (absW < 1)
    {
        T m = baseTypeMax() * absW;

        if (vx <= -m || vx >= m || vy <= -m || vy >= m || vz <= -m || vz >= m)
            throw std::domain_error ("Cannot normalize point at infinity.");
    }

    x = vx / vw;
    y = vy / vw;
    z = vz / vw;
}

template <class T>
template <class S>
IMATH_HOSTDEVICE inline void
Vec3<T>::setValue (S a, S b, S c) IMATH_NOEXCEPT
{
    x = T (a);
    y = T (b);
    z = T (c);
}

template <class T>
template <class S>
IMATH_HOSTDEVICE inline void
Vec3<T>::setValue (const Vec3<S>& v) IMATH_NOEXCEPT
{
    x = T (v.x);
    y = T (v.y);
    z = T (v.z);
}

template <class T>
template <class S>
IMATH_HOSTDEVICE inline void
Vec3<T>::getValue (S& a, S& b, S& c) const IMATH_NOEXCEPT
{
    a = S (x);
    b = S (y);
    c = S (z);
}

template <class T>
template <class S>
IMATH_HOSTDEVICE inline void
Vec3<T>::getValue (Vec3<S>& v) const IMATH_NOEXCEPT
{
    v.x = S (x);
    v.y = S (y);
    v.z = S (z);
}

template <class T>
IMATH_HOSTDEVICE inline T*
Vec3<T>::getValue() IMATH_NOEXCEPT
{
    return (T*) &x;
}

template <class T>
IMATH_HOSTDEVICE inline const T*
Vec3<T>::getValue() const IMATH_NOEXCEPT
{
    return (const T*) &x;
}

template <class T>
template <class S>
IMATH_HOSTDEVICE constexpr inline bool
Vec3<T>::operator== (const Vec3<S>& v) const IMATH_NOEXCEPT
{
    return x == v.x && y == v.y && z == v.z;
}

template <class T>
template <class S>
IMATH_HOSTDEVICE constexpr inline bool
Vec3<T>::operator!= (const Vec3<S>& v) const IMATH_NOEXCEPT
{
    return x != v.x || y != v.y || z != v.z;
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline bool
Vec3<T>::equalWithAbsError (const Vec3<T>& v, T e) const IMATH_NOEXCEPT
{
    for (int i = 0; i < 3; i++)
        if (!IMATH_INTERNAL_NAMESPACE::equalWithAbsError ((*this)[i], v[i], e))
            return false;

    return true;
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline bool
Vec3<T>::equalWithRelError (const Vec3<T>& v, T e) const IMATH_NOEXCEPT
{
    for (int i = 0; i < 3; i++)
        if (!IMATH_INTERNAL_NAMESPACE::equalWithRelError ((*this)[i], v[i], e))
            return false;

    return true;
}

template <class T>
IMATH_HOSTDEVICE constexpr inline T
Vec3<T>::dot (const Vec3& v) const IMATH_NOEXCEPT
{
    return x * v.x + y * v.y + z * v.z;
}

template <class T>
IMATH_HOSTDEVICE constexpr inline T
Vec3<T>::operator^ (const Vec3& v) const IMATH_NOEXCEPT
{
    return dot (v);
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec3<T>
Vec3<T>::cross (const Vec3& v) const IMATH_NOEXCEPT
{
    return Vec3 (y * v.z - z * v.y, z * v.x - x * v.z, x * v.y - y * v.x);
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec3<T>&
Vec3<T>::operator%= (const Vec3& v) IMATH_NOEXCEPT
{
    T a = y * v.z - z * v.y;
    T b = z * v.x - x * v.z;
    T c = x * v.y - y * v.x;
    x   = a;
    y   = b;
    z   = c;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec3<T>
Vec3<T>::operator% (const Vec3& v) const IMATH_NOEXCEPT
{
    return Vec3 (y * v.z - z * v.y, z * v.x - x * v.z, x * v.y - y * v.x);
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec3<T>&
Vec3<T>::operator+= (const Vec3& v) IMATH_NOEXCEPT
{
    x += v.x;
    y += v.y;
    z += v.z;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec3<T>
Vec3<T>::operator+ (const Vec3& v) const IMATH_NOEXCEPT
{
    return Vec3 (x + v.x, y + v.y, z + v.z);
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec3<T>&
Vec3<T>::operator-= (const Vec3& v) IMATH_NOEXCEPT
{
    x -= v.x;
    y -= v.y;
    z -= v.z;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec3<T>
Vec3<T>::operator- (const Vec3& v) const IMATH_NOEXCEPT
{
    return Vec3 (x - v.x, y - v.y, z - v.z);
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec3<T>
Vec3<T>::operator-() const IMATH_NOEXCEPT
{
    return Vec3 (-x, -y, -z);
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec3<T>&
Vec3<T>::negate() IMATH_NOEXCEPT
{
    x = -x;
    y = -y;
    z = -z;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec3<T>&
Vec3<T>::operator*= (const Vec3& v) IMATH_NOEXCEPT
{
    x *= v.x;
    y *= v.y;
    z *= v.z;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec3<T>&
Vec3<T>::operator*= (T a) IMATH_NOEXCEPT
{
    x *= a;
    y *= a;
    z *= a;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec3<T>
Vec3<T>::operator* (const Vec3& v) const IMATH_NOEXCEPT
{
    return Vec3 (x * v.x, y * v.y, z * v.z);
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec3<T>
Vec3<T>::operator* (T a) const IMATH_NOEXCEPT
{
    return Vec3 (x * a, y * a, z * a);
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec3<T>&
Vec3<T>::operator/= (const Vec3& v) IMATH_NOEXCEPT
{
    x /= v.x;
    y /= v.y;
    z /= v.z;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec3<T>&
Vec3<T>::operator/= (T a) IMATH_NOEXCEPT
{
    x /= a;
    y /= a;
    z /= a;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec3<T>
Vec3<T>::operator/ (const Vec3& v) const IMATH_NOEXCEPT
{
    return Vec3 (x / v.x, y / v.y, z / v.z);
}

template <class T>
IMATH_HOSTDEVICE constexpr inline Vec3<T>
Vec3<T>::operator/ (T a) const IMATH_NOEXCEPT
{
    return Vec3 (x / a, y / a, z / a);
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline T
Vec3<T>::lengthTiny() const IMATH_NOEXCEPT
{
    T absX = (x >= T (0)) ? x : -x;
    T absY = (y >= T (0)) ? y : -y;
    T absZ = (z >= T (0)) ? z : -z;

    T max = absX;

    if (max < absY)
        max = absY;

    if (max < absZ)
        max = absZ;

    if (IMATH_UNLIKELY(max == T (0)))
        return T (0);

    //
    // Do not replace the divisions by max with multiplications by 1/max.
    // Computing 1/max can overflow but the divisions below will always
    // produce results less than or equal to 1.
    //

    absX /= max;
    absY /= max;
    absZ /= max;

    return max * std::sqrt (absX * absX + absY * absY + absZ * absZ);
}

template <class T>
IMATH_HOSTDEVICE inline T
Vec3<T>::length() const IMATH_NOEXCEPT
{
    T length2 = dot (*this);

    if (IMATH_UNLIKELY(length2 < T (2) * std::numeric_limits<T>::min()))
        return lengthTiny();

    return std::sqrt (length2);
}

template <class T>
IMATH_HOSTDEVICE constexpr inline T
Vec3<T>::length2() const IMATH_NOEXCEPT
{
    return dot (*this);
}

template <class T>
IMATH_HOSTDEVICE inline const Vec3<T>&
Vec3<T>::normalize() IMATH_NOEXCEPT
{
    T l = length();

    if (IMATH_LIKELY(l != T (0)))
    {
        //
        // Do not replace the divisions by l with multiplications by 1/l.
        // Computing 1/l can overflow but the divisions below will always
        // produce results less than or equal to 1.
        //

        x /= l;
        y /= l;
        z /= l;
    }

    return *this;
}

template <class T>
inline const Vec3<T>&
Vec3<T>::normalizeExc()
{
    T l = length();

    if (IMATH_UNLIKELY(l == T (0)))
        throw std::domain_error ("Cannot normalize null vector.");

    x /= l;
    y /= l;
    z /= l;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE inline const Vec3<T>&
Vec3<T>::normalizeNonNull() IMATH_NOEXCEPT
{
    T l = length();
    x /= l;
    y /= l;
    z /= l;
    return *this;
}

template <class T>
IMATH_HOSTDEVICE inline Vec3<T>
Vec3<T>::normalized() const IMATH_NOEXCEPT
{
    T l = length();

    if (IMATH_UNLIKELY((l == T (0))))
        return Vec3 (T (0));

    return Vec3 (x / l, y / l, z / l);
}

template <class T>
inline Vec3<T>
Vec3<T>::normalizedExc() const
{
    T l = length();

    if (IMATH_UNLIKELY(l == T (0)))
        throw std::domain_error ("Cannot normalize null vector.");

    return Vec3 (x / l, y / l, z / l);
}

template <class T>
IMATH_HOSTDEVICE inline Vec3<T>
Vec3<T>::normalizedNonNull() const IMATH_NOEXCEPT
{
    T l = length();
    return Vec3 (x / l, y / l, z / l);
}

//-----------------------
// Implementation of Vec4
//-----------------------

template <class T>
IMATH_HOSTDEVICE
IMATH_CONSTEXPR14 inline T&
Vec4<T>::operator[] (int i) IMATH_NOEXCEPT
{
    return (&x)[i]; // NOSONAR - suppress SonarCloud bug report.
}

template <class T>
IMATH_HOSTDEVICE constexpr inline const T&
Vec4<T>::operator[] (int i) const IMATH_NOEXCEPT
{
    return (&x)[i]; // NOSONAR - suppress SonarCloud bug report.
}

template <class T> IMATH_HOSTDEVICE inline Vec4<T>::Vec4() IMATH_NOEXCEPT
{
    // empty, and not constexpr because data is uninitialized.
}

template <class T> IMATH_HOSTDEVICE constexpr inline Vec4<T>::Vec4 (T a) IMATH_NOEXCEPT
    : x(a), y(a), z(a), w(a)
{
}

template <class T> IMATH_HOSTDEVICE constexpr inline Vec4<T>::Vec4 (T a, T b, T c, T d) IMATH_NOEXCEPT
    : x(a), y(b), z(c), w(d)
{
}

template <class T> IMATH_HOSTDEVICE constexpr inline Vec4<T>::Vec4 (const Vec4& v) IMATH_NOEXCEPT
    : x(v.x), y(v.y), z(v.z), w(v.w)
{
}

template <class T> template <class S>
IMATH_HOSTDEVICE constexpr inline Vec4<T>::Vec4 (const Vec4<S>& v) IMATH_NOEXCEPT
    : x(T(v.x)), y(T(v.y)), z(T(v.z)), w(T(v.w))
{
}

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 inline const Vec4<T>&
Vec4<T>::operator= (const Vec4& v) IMATH_NOEXCEPT
{
    x = v.x;
    y = v.y;
    z = v.z;
    w = v.w;
    return *this;
}

template <class T> template <class S>
IMATH_HOSTDEVICE constexpr inline Vec4<T>::Vec4 (const Vec3<S>& v) IMATH_NOEXCEPT
    : x(T(v.x)), y(T(v.y)), z(T(v.z)), w(T(1))
{
}

template <class T>
template <class S>
IMATH_HOSTDEVICE constexpr inline bool
Vec4<T>::operator== (const Vec4<S>& v) const IMATH_NOEXCEPT
{
