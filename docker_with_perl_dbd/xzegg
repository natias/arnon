his/her permission for its inclusion here. You can see the original
question and answers at http://stackoverflow.com/questions/5964999.

Getting a mac install of perl to play nicely with oracle is a bit of a
pain - once it's running it is fantastic, getting it running is a
little frustrating..

The below has worked for me on a few different intel macs, there could
well be superfluous steps in there and it is likely not going to be
the same for other platforms.

This will require use of shell, the root user and a bit of CPANing -
nothing too onerous

First off create a directory for the oracle pap - libraries, instant client etc

sudo mkdir /usr/oracle_instantClient64

Download and extract all 64 bit instant client packages from oracle to
the above directory

Create a symlink within that directory for one of the files in there

sudo cd /usr/oracle_instantClient64
sudo ln -s /usr/oracle_instantClient64/libclntsh.dylib.10.1 libclntsh.dylib

The following dir is hardcoded into the oracle instant client - god knows why - so need to create and symlink it

sudo mkdir -p /b/227/rdbms/
sudo cd /b/227/rdbms/
sudo ln -s /usr/oracle_instantClient64/ lib

Need to add a couple of environment variables, so edit /etc/profile
and add them so they exist for all users:

export ORACLE_HOME=/usr/oracle_instantClient64
export DYLD_LIBRARY_PATH=/usr/oracle_instantClient64

Now try and install DBD::Oracle through CPAN - this will fail, but it
means any dependencies will be downloaded and it retrieves the module
for us

sudo perl -MCPAN -e shell
install DBD::Oracle

When this fails exit CPAN and head to your .cpan/build dir - if you
used automatic config of CPAN it'll be

cd ~/.cpan/build

if you didn't auto configure you can find your build directory with
the following command in CPAN

o conf build_dir

Once in the build dir look for the DBD::Oracle dir which has just been
created (it'll be called something like DBD-Oracle-1.28-?) and cd into
it.

Now we need to switch to the root user. Root isn't enabled as default
in osx - for details on enabling see this post on the apple website

Once logged in as root we need to set the above environment variables for root:

export ORACLE_HOME=/usr/oracle_instantClient64
export DYLD_LIBRARY_PATH=/usr/oracle_instantClient64

Now while still logged in as root we need to run the makefile for the
module, then make, then install

perl Makefile.pl
make
install

Assuming that all worked without error log out of root: we're DBD'd
up! If this didn't work it's time to bust out google on whatever
errors you're seeing

Now just to install the DBI module

sudo perl -MCPAN -e shell
install DBI

Now you're all set - enjoy your perly oracley new life

=head1 Instructions for 10.2.x (Jaguar)

1) Install Oracle exactly per Oracle documentation. If you change
install locations, then you'll need to modify paths accordingly.

2) There are two ways to remedy the symbol clash. Either edit the
symbol table of the Oracle client library
$ORACLE_HOME/lib/libclntsh.dylib.9.0 such that the symbol _poll is no
longer exported. Alternatively, download, patch, and re-install the
perl IO modules. I could not successfully repeat the report for the
former, but I did succeed by doing the latter. Instructions for both
follow nonetheless.

  2a) SKIP IF YOU WANT TO OR HAVE SUCCESSFULLY TRIED 2b).  Make a
    backup copy of the $ORACLE_HOME/lib/libclntsh.dylib.9.0 file, or
    the file this name points to, since we're about to modify that
    library.  Note that the ".9.0" suffix of the file name is version
    dependent, and that you want to work with the file pointed to
    through one or a series of symbolic links rather than any of the
    symbolic links (e.g., one will be called libclntsh.dylib).

    As user 'oracle' execute the following command to fix namespace
    collisions in Oracle's dynamic libraries.

    nmedit -R ./hints/macos_lib.syms $ORACLE_HOME/lib/libclntsh.dylib.9.0

    *** Recall the above caveats regarding the file name.

    The problem with this is that the version of nm that comes with
    Jaguar doesn't support the -R flag. I'd be grateful to anyone who
    can suggest how to edit the symbol table of libraries on MacOS X.

  2b) SKIP IF YOU WANT TO OR HAVE SUCCESSFULLY TRIED 2a). In this
    variant, we will patch the Perl IO modules to change the name of
    the poll() function, as that is where it is defined. In this case,
    we do not need to do anything with the Oracle libraries. Follow
    these steps:

    - Download the module IO (IO.pm) from CPAN and unpack it. Check
      the documentation as to whether the version is compatible with
      your version of Perl; I used v1.20 with Perl 5.6.0 and had
      success.

    - The files IO.xs, poll.c, and poll.h need to be patched. Apply
      the following patches, e.g., by cutting and pasting the marked
      section into a file perlio.patch and using that file as input
      for patch:

      $ patch -p0 < perlio.patch

      The patch will basically rename the C implementation of poll()
      to io_poll(). The other patches were necessary to make v1.20
      compile with Perl 5.6.0; they may not be necessary with other
      versions of IO and Perl, respectively.

        +=+=+=+=+=+=+= Cut after this line
        diff -c ../IO-orig/IO-1.20/IO.xs ./IO.xs
        *** ../IO-orig/IO-1.20/IO.xs	Mon Jul 13 23:36:24 1998
        --- ./IO.xs	Sat May 10 15:20:02 2003
        ***************
        *** 205,211 ****
                ST(0) = sv_2mortal(newSVpv((char*)&pos, sizeof(Fpos_t)));
            }
            else {
        ! 	    ST(0) = &sv_undef;
                errno = EINVAL;
            }

        --- 205,211 ----
                ST(0) = sv_2mortal(newSVpv((char*)&pos, sizeof(Fpos_t)));
            }
            else {
        ! 	    ST(0) = &PL_sv_undef;
                errno = EINVAL;
            }

        ***************
        *** 249,255 ****
                SvREFCNT_dec(gv);   /* undo increment in newRV() */
            }
            else {
        ! 	    ST(0) = &sv_undef;
                SvREFCNT_dec(gv);
            }

        --- 249,255 ----
                SvREFCNT_dec(gv);   /* undo increment in newRV() */
            }
            else {
        ! 	    ST(0) = &PL_sv_undef;
                SvREFCNT_dec(gv);
            }

        ***************
        *** 272,278 ****
            i++;
            fds[j].revents = 0;
            }
        !     if((ret = poll(fds,nfd,timeout)) >= 0) {
            for(i=1, j=0 ; j < nfd ; j++) {
                sv_setiv(ST(i), fds[j].fd); i++;
                sv_setiv(ST(i), fds[j].revents); i++;
        --- 272,278 ----
            i++;
            fds[j].revents = 0;
            }
        !     if((ret = io_poll(fds,nfd,timeout)) >= 0) {
            for(i=1, j=0 ; j < nfd ; j++) {
                sv_setiv(ST(i), fds[j].fd); i++;
                sv_setiv(ST(i), fds[j].revents); i++;
        diff -c ../IO-orig/IO-1.20/poll.c ./poll.c
        *** ../IO-orig/IO-1.20/poll.c	Wed Mar 18 21:34:00 1998
        --- ./poll.c	Sat May 10 14:28:22 2003
        ***************
        *** 35,41 ****
        # define POLL_EVENTS_MASK (POLL_CAN_READ | POLL_CAN_WRITE | POLL_HAS_EXCP)

        int
        ! poll(fds, nfds, timeout)
        struct pollfd *fds;
        unsigned long nfds;
        int timeout;
        --- 35,41 ----
        # define POLL_EVENTS_MASK (POLL_CAN_READ | POLL_CAN_WRITE | POLL_HAS_EXCP)

        int
        ! io_poll(fds, nfds, timeout)
        struct pollfd *fds;
        unsigned long nfds;
        int timeout;
        diff -c ../IO-orig/IO-1.20/poll.h ./poll.h
        *** ../IO-orig/IO-1.20/poll.h	Wed Apr 15 20:33:02 1998
        --- ./poll.h	Sat May 10 14:29:11 2003
        ***************
        *** 44,50 ****
        #define	POLLHUP		0x0010
        #define	POLLNVAL	0x0020

        ! int poll _((struct pollfd *, unsigned long, int));

        #ifndef HAS_POLL
        #  define HAS_POLL
        --- 44,50 ----
        #define	POLLHUP		0x0010
        #define	POLLNVAL	0x0020

        ! int io_poll _((struct pollfd *, unsigned long, int));

        #ifndef HAS_POLL
        #  define HAS_POLL
        +=+=+=+=+=+=+= Cut to the previous line

    - compile and install as you usually would, making sure that
      existing but conflicting modules get removed:

      $ perl Makefile.PL
      $ make
      $ make test
      $ make install UNINST=1

    - You are done. Continue with 3).

3) Install the module DBI as per its instructions, if you haven't
   already done so.

4) Install the DBD::Oracle module.

      $ perl Makefile.PL
      $ make
      $ make test
      $ make install

=head1 Instructions for 10.3.x (Panther)

I highly recommend you install and use the Oracle 10g Instant Client
for MacOSX 10.3. Compared to traditional Oracle client installations
it is a very compact download, and it has the memory leak problem
fixed. As an added benefit, you will be able to seamlessly connect to
10g databases. Even if you do want to run the database server included
in the 9iR2 Developer's Release, I'd still use the Instant Client for
compiling OCI applications or drivers like DBD::Oracle.

If you still decide to use the full 9iR2 DR client, and if all you use
DBD::Oracle for on MacOSX is development and test scripts that don't
involve running the same query multiple times or many queries within
the same perl process, then note that the memory leak will most likely
never affect you in a serious way. In this case you may not need to
bother and instead just go ahead, build and install DBD::Oracle
straightforwardly without any special measures.

That said, here are the details.

0) (If you decided for the 9iR2 DR client, skip to 1.) If you decided
   to use the 10g Instant Client, make sure you download and install
   all parts. (Given that this is perl land you may not need the JDBC
   driver, but why bother sorting out the 25% you may or may not ever
   need.) Follow the Oracle instructions and copy the contents of each
   part into the same destination directory. Change to this
   destination directory and create a symlink lib pointing to '.'
   (without the quotes):

   $ cd </path/to/my/oracle/instantclient>
   $ ln -s lib .

   Also, set the environment variable ORACLE_HOME to the path to your
   instantclient destination directory. Makefile.PL needs it.

   Now return to your DBD::Oracle download. If the version is 1.16 or
   less you will need to patch Makefile.PL; in later versions this may
   be fixed already. Apply the following patch, e.g., by cutting and
   pasting into a file Makefile.PL.patch and then executing

   $ patch -p0 < Makefile.PL.patch

   Here is the patch:

    +=+=+=+=+=+=+= Cut after this line
    *** Makefile.PL.orig	Fri Oct 22 02:07:04 2004
    --- Makefile.PL	Fri May 13 14:28:53 2005
    ***************
    *** 1252,1257 ****
    --- 1252,1258 ----
        print "Found $dir/$_\n" if $::opt_d;
        }, "$OH/rdbms",
            "$OH/plsql", # oratypes.h sometimes here (eg HPUX 11.23 Itanium Oracle 9.2.0)
    +        "$OH/sdk", # Oracle Instant Client default location (10g)
        );
        @h_dir = keys %h_dir;
        print "Found header files in @h_dir.\n" if @h_dir;
    ***************
    *** 1286,1292 ****
    --- 1287,1297 ----
        open FH, ">define.sql" or warn "Can't create define.sql: $!";
        print FH "DEFINE _SQLPLUS_RELEASE\nQUIT\n";
        close FH;
    + 	# we need to temporarily disable login sql scripts
    + 	my $sqlpath = $ENV{SQLPATH};
    + 	delete $ENV{SQLPATH};
        my $sqlplus_release = `$sqlplus_exe -S /nolog \@define.sql 2>&1`;
    + 	$ENV{SQLPATH} = $sqlpath if $sqlpath;
        unlink "define.sql";
        print $sqlplus_release;
        if ($sqlplus_release =~ /^DEFINE _SQLPLUS_RELEASE = "(\d?\d)(\d\d)(\d\d)(\d\d)(\d\d)"/) {
    +=+=+=+=+=+=+= Cut to the previous line

   The first hunk allows Makefile.PL to find the header files which
   are in a subdirectory sdk, and the second temporarily disables any
   global and local login.sql scripts which may make the sqlplus call
   fail. If you don't have a local login.sql script you will most
   likely be fine without the second hunk.

   Now run Makefile.PL and make sure you provide the -l flag:

   $ perl Makefile.PL -l

   If you receive some ugly error message stating that some *.mk file
   couldn't be found you forgot to add the -l flag.

   The continue the standard build process by running make. In
   DBD::Oracle versions 1.16 and earlier this will end in an error due
   to a failed execution of nmedit -R. Ignore this error. Move on to
   running the tests, making sure the test scripts can log in to your
   database (e.g., by setting ORACLE_USERID). Note that by default the
   Instant Client does not have a network/admin/tnsnames.ora
   installed. Either install a suitable one, or point TNS_ADMIN to the
   directory where you keep your tnsnames.ora, or include the full
   SQLNET connection string in ORACLE_USERID. All three options are
   documented by Oracle in the README_IC.htm file that comes with the
   Instant Client, so be sure you read it if you don't understand what
   I'm writing here.

   All tests should succeed. Complete by make install. You are done!
   Skip the other steps below, they do NOT apply to the Instant
   Client. (Although of course you may still install a later version
   of perl if you have the need.)

1) Until the reason for the memory leak has been found and fixed, you
   need to remove the condition that exposes it. Apparently, this is
   multi-threading being enabled in Perl. The Perl 5.8.1RC3 that comes
   with Panther was compiled with multi-threading enabled, and AFAIK
   it cannot be turned off at runtime. Note that the problem is
   independent of whether you run multiple concurrent threads or not.

   Therefore, the solution is to build your own perl. I leave it up to
   you whether you want to replace the system perl or not. At least
   Perl 5.8.x comes with instructions as to how to replace the system
   perl on MacOS X, and what the caveats and risks are. I used 5.8.4,
   installed in /usr/local, and it worked perfectly fine.

   The key when configuring your custom build of perl is to disable
   multi-threading (usethreads, useithreads, and usemultiplicity
   options). More precisely, do not enable them, as they are disabled
   by default, at least up to version 5.8.5. You can check whether
   threads are enabled or not by passing -V to ther Perl interpreter:

   $ /path/to/your/perl -V | grep usethreads

   You need to see a line saying, among other things,
   usethreads=undef. If you see usethreads=define then multi-threading
   is enabled.

2) If you choose not to replace the system perl, make sure that when
   you build DBI and DBD::Oracle you provide the full path to your own
   perl when running Makefile.PL, like so (assuming you installed in
   /usr/local, which is the default):

   $ /usr/local/bin/perl Makefile.PL

   Also, every time you run a DBD::Oracle script, you must use the
   full path too, unless your custom-built perl comes before the
   system perl in the PATH environment. The easiest way to ensure you
   are using the right perl is to uninstall DBI from the system perl
   if you did install it under that as well.

3) Continue with 3) as in instructions for Jaguar (making path
   substitutions for perl as discussed in 2).
======================================================================

If you have any problems then follow the instructions in the
README. Please post details of any problems (or changes you needed to
make) to dbi-users@perl.org and CC them to brooksch@mac.com on MacOSX
specific problems. Rewrite of part of this readme, Panther
instructions, and the Perl IO patch is credit to Hilmar Lapp, hlapp at
gmx.net.

Earlier and original instructions thanks to:
    Andy Lester
    Steve Sapovits
    Tom Mornini

Date: Tue, 15 Apr 2003 16:02:17 +1000
Subject: Compilation bug in DBI on OSX with threaded Perl 5.8.0
From: Danial Pearce

In regards to a previous message on this list:

http://archive.develooper.com/dbi-users@perl.org/msg16365.html

I have some more info:

I have compiled and installed Perl just fine with threads enabled:

./Configure -de -Dusethreads -Dprefix=/usr
make
make test
sudo make install

I have then successfully installed Apache and mod_perl as well.

When I try to compile and install DBI, I get a bus error, just like the
people on this list have previously discussed on the thread above.

If I unpack the DBI, and run perl Makefile.pl, then alter the created
Makefile so that it uses gcc2 rather than just "cc" then it compiles,
installs and runs just fine.

The issue here is that Apple have just recently release 10.2.4, which
updates /usr/bin/{gcc3,gcc2,g++3,g++2} and /usr/bin/cc is a symlink to
/usr/bin/gcc3, so compilation of DBI under Apple's gcc3 does not work. It
works find with gcc2 however.

I had the same problem with DBD::Pg, and was able to compile and install
that using the same fix.

I am unsure if this is a problem with Apple's version of gcc, or a problem
with the DBI/DBD code itself. Given that all my other open source
applications are compiling and installing fine, I am thinking there isn't
anything Apple are going to do about it.

cheers
Danial

=head1 AUTHORS

=over 4

=item *

Tim Bunce <timb@cpan.org>

=item *

John Scoles <byterock@cpan.org>

=item *

Yanick Champoux <yanick@cpan.org>

=item *

Martin J. Evans <mjevans@cpan.org>

=back

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2024, 2023, 2022, 2021, 2019, 2014, 2013, 2012, 2011, 2010 by Tim Bunce.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
                                                             root/.cpan/build/DBD-Oracle-1.90-1/blib/lib/DBD/Oracle/Troubleshooting/Sun.pod                      0000444 0000000 0000000 00000003151 14616324562 024567  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #PODNAME: DBD::Oracle::Troubleshooting::Sun
#ABSTRACT: Tips and Hints to Troubleshoot DBD::Oracle on Sun

__END__

=pod

=encoding UTF-8

=head1 NAME

DBD::Oracle::Troubleshooting::Sun - Tips and Hints to Troubleshoot DBD::Oracle on Sun

=head1 VERSION

version 1.90

=head1 General Info

If you get this on a Solaris 9 and 10 box

  "Outofmemory!
   Callback called exit.
   END failed--call queue aborted."

The solution may be as simple as not having you "ORACLE_HOME" Defined in the
environment.

It seems that having it defined will prevent the error.

=head1 Setting library load path for instant client libraries

Usually you set LD_LIBRARY_PATH to point to the location of
your Oracle Instant Client (you need to do this when building
DBD::Oracle). However, afterwards it can be a pain to keep
ensuring this is set and changing LD_LIBRARY_PATH in your Perl
script does not work (needs to be done beforehand) as the dynamic
linker caches its value.

An alternative under newer versions of Solaris is:

root>  crle -u -l /youroracledir/lib/instantclient_11_2

however, make sure you check the crle options as you may need to
set the architecture etc as well.

=head1 AUTHORS

=over 4

=item *

Tim Bunce <timb@cpan.org>

=item *

John Scoles <byterock@cpan.org>

=item *

Yanick Champoux <yanick@cpan.org>

=item *

Martin J. Evans <mjevans@cpan.org>

=back

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2024, 2023, 2022, 2021, 2019, 2014, 2013, 2012, 2011, 2010 by Tim Bunce.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                       root/.cpan/build/DBD-Oracle-1.90-1/blib/lib/DBD/Oracle/Troubleshooting/Vms.pod                      0000444 0000000 0000000 00000007725 14616324562 024602  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #PODNAME: DBD::Oracle::Troubleshooting::Vms
#ABSTRACT: Tips and Hints to Troubleshoot DBD::Oracle on Vms

__END__

=pod

=encoding UTF-8

=head1 NAME

DBD::Oracle::Troubleshooting::Vms - Tips and Hints to Troubleshoot DBD::Oracle on Vms

=head1 VERSION

version 1.90

=head1 General Info

This is related to Oracle RDBMS 9.2 and later, since Oracle
made fundamental changes to oracle installation requirements
and factual installation with this release.

Oracle's goal was to make VMS installation be more like on
*nix and Windows, with an all new Oracle Home structure too,
requiring an ODS-5 disk to install Oracle Home on instead of
the good old ODS-2.

Another major change is the introduction of an Oracle generated
logical name table for oracle logical names like ORA_ROOT and all
its derivatives like ORA_PROGINT etc. And that this logical name
table is inserted in LNM$FILE_DEV in LNM$PROCESS_DIRECTORY.

    (LNM$PROCESS_DIRECTORY)

    "LNM$FILE_DEV" = "SERVER_810111112"
            = "LNM$PROCESS"
            = "LNM$JOB"
            = "LNM$GROUP"
            = "LNM$SYSTEM"
            = "DECW$LOGICAL_NAMES"

This ensures that any process that needs to have access to
oracle gets the environment by just adding one logical name table
to a central process specific mechanism.

But as it is inserted at the very top of LNM$FILE_DEV it also
represents a source of misfortune - especially if a user with
enough privilege to update the oracle table does so (presumably
unintentionally), as an example by changing NLS_LANG.

PERL has the ability to define, redefine and undefine (deassign)
logical names, but if not told otherwise by the user does it
in the first table in above list, and not as one would normally
expect in the process table.

Installing DBI and DBD::Oracle has influence upon this since in
both cases a few environment variables are read or set in the
test phase.
For DBI it is the logical SYS$SCRATCH, which is a JOB logical.
For DBD-Oracle it is when testing a new feature in the Oracle
RDBMS: UTF8 and UTF16 character set functionality, and in order
to do this it sets and unsets the related environment variables
NLS_NCHAR and NLS_LANG.

If one is not careful this changes the values set in the oracle
table - and in the worst case stays active until the next major
system reset. It can also be a very hard error to track down
since it happens in a place where one normally never looks.

Furthermore, it is very possibly that some or all of the UTF tests
fails, since if one have a variable like NLS_LANG in his process
table, then even though 'mms test' sets it in the wrong table
it is not invoked as it is overruled by the process logical...

The way to ensure that no logicals are set in the oracle table and
that the UTF tests get the best environment to test in, and that
DBI correctly translates the SYS$SCRATCH logical, use the
logical

      PERL_ENV_TABLES

to ensure that PERL's behavior is to leave the oracle table alone and
use the process table instead:

      $ DEFINE PERL_ENV_TABLES LNM$PROCESS, LNM$JOB

This tells PERL to use the LNM$PROCESS table as the default place to
set and unset variables so that only the perl users environment
is affected when installing DBD::Oracle, and ensures that the
LNM$JOB table is read when SYS$SCRATCH is to be translated.

PERL_ENV_TABLES is well documented in the PERLVMS man page.

Oracle8 releases are not affected, as they don't have the
oracle table implementation, and no UTF support.

Oracle 9.0 is uncertain, since testing has not been possible yet,
but the remedy will not hurt :)

=head1 AUTHORS

=over 4

=item *

Tim Bunce <timb@cpan.org>

=item *

John Scoles <byterock@cpan.org>

=item *

Yanick Champoux <yanick@cpan.org>

=item *

Martin J. Evans <mjevans@cpan.org>

=back

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2024, 2023, 2022, 2021, 2019, 2014, 2013, 2012, 2011, 2010 by Tim Bunce.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
                                           root/.cpan/build/DBD-Oracle-1.90-1/blib/lib/DBD/Oracle/Troubleshooting/Win32.pod                    0000444 0000000 0000000 00000027664 14616324562 024743  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #PODNAME: DBD::Oracle::Troubleshooting::Win32
#ABSTRACT: Tips and Hints to Troubleshoot DBD::Oracle on Win32

__END__

=pod

=encoding UTF-8

=head1 NAME

DBD::Oracle::Troubleshooting::Win32 - Tips and Hints to Troubleshoot DBD::Oracle on Win32

=head1 VERSION

version 1.90

=head1 GENERAL INFO

In general, on Windows, it's best to just use ActiveState Perl and the
PPM package manager to install a pre-built version of DBD::Oracle however only version 1.17 is available there.

=head1 Oracle Instant Client 11.1.0.6.0 Notes

So far I have managed to get it to Makefile and compile test and install and work.  However it seems one needs to set "NLS_LANG" to a valid value
in the environment variables.

As well IC 11 seems to have trouble finding the .ORA files. A quick fix for this is to add "TNS_ADMIN"
to the environment variables and point it to where your .ORA files are.

=head1 Other information, some of which is out of date ---

    DBD-Oracle for Windows and Oracle Instantclient and 10XE (Express Edition)
    By: John Scoles
    The Pythian Group

The preferred method of getting DBD::Oracle is to use a pre-built version from the ActiveState
repository, which can be installed with PPM.

Compiling and installing DBD::Oracle 1.18 or later on a windows 2000 professional or XP OS for use
with Oracle instantClient ver 10.2.0.1 & 10.1.0.5 or Oracle XE requires only a few downloads and
a minimal number of environment setting.  The procedures below were tested on a clean
Windows platform having no Oracle or other development environment installed.

    1) The first part of the process is to download and install the latest version of
    Active Perl from http://www.activeperl.com/.

    2) Use the PPM application to get the latest version of DBI

    3) Download the latest DBD::Oracle from http://svn.perl.org/modules/dbd-oracle/trunk/

    4) Download and unzip the Oracle Instant Client (10.2.0.1 or 10.1.0.5) 32 bit from
    http://www.oracle.com/technology/tech/oci/instantclient/instantclient.html
    You will need all three of these products
        i.	Instant Client Package - Basic
        ii.	Instant Client Package - SQL*Plus:
        iii.	Instant Client Package - SDK:
    or

    install oracle 10XE http://www.oracle.com/technology/products/database/xe/index.html

    5) You will now need the Microsoft Visual C++ toolkit 2003. Unfortunately this product is no longer available from Microsoft.
    The file name was VCToolkitSetup.exe  and is available at this mirror site http://www.filewatcher.com/m/VCToolkitSetup.exe.32952488.0.0.html at the time of writing.
    Microsoft's replacement for this tool kit is Visual C++ 2005 Express Edition and all attempts to compile DBD::Oracle with this product fail. It has been successfully compiled
    using a complete edition of Microsoft Visual Studio 2005.
    Download and then install this product.

    6) You will also need the Windows SDK. Which can be found at
    http://www.microsoft.com/downloads/details.aspx?FamilyId=A55B6B43-E24F-4EA3-A93E-40C0EC4F68E5&displaylang=en
    You have the choice to of either to download the entire SDK and install or run an online install from the page.
    Both have been tested and proven to work.

    7) Next download and install the Microsoft .net framework 1.1 skd from
    http://www.microsoft.com/downloads/details.aspx?FamilyID=9b3a2ca6-3647-4070-9f41-a333c6b9181d&displaylang=en

    8) You will also need a copy of nmake.exe which you can download here http://download.microsoft.com/download/vc15/patch/1.52/w95/en-us/nmake15.exe

    9) Enough Downloading and installing go have a coffee.

    10) You should at this time attempt to connect to an Oracle database with the version SQL*Plus that
    you installed in step 4.  If you are unable to connect at this stage then any problems you encounter
    later may have nothing to do with DBD::Oracle

    11) On the path where you installed Visual C++ find and edit the vcvars32.bat file as follows.  You may have to modify
        these path values depending where you installed the products on you computer,

        i.   Add  the local path to the windows platform SDK include directory to the Set INCLUDE
                Command Line to include the needed files from the Windows SDK.

                e.g.  "C:\Program Files\Microsoft Platform SDK\Include;"

        ii.  Add the local path to the .net Vc7 lib directory to the Set LIB command
                to include the needed library file from the .Net SKD

                e.g. C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\lib;

            iii. Add the local path to the windows platform SDK Lib directory to the Set Lib command
                to include the needed library files from the Windows SDK

            e.g. C:\Program Files\Microsoft Platform SDK\Lib;

    12) Open a Windows Visual C++ command window from the start menu.

    13) Add the path to the instant client to the Path command. If you are compiling against a 10XE db/client then you can skip steps
        12 to 14.
        e.g.  PATH = C:/Oracle/instantclient;%PATH%

    14) Using the "Set" command add "ORACLE_HOME=path to Instant client" to the environment variables.
        e.g. Set ORACLE_HOME=C:\Oracle\instantclient

    15) Using the "Set" command add "NLS_LANG=.WE8ISO8859P15" to the environment variables. The globalization variable is required,
        with this or another compatible value, by Oracle instantclient in order for it to compile correctly.
        e.g. Set NLS_LANG=.WE8ISO8859P15

    16) Using the "Set" command add "ORACLE_USERID=test/test@test" substituting test with the username/password@database
        you wish to run the make test files against.
            Note: it is not necessary to do this step for the compile and install to work.
        However: The self-test programs included with Oracle-DBD will mostly fail.

    17) Move to the DBD-Oracle directory in the Visual C++ window DOS prompt and enter the following.

                c:\oracle-dbd\>perl Makefile.PL

        The Makefile should then run and compile Oracle-dbd without reporting any errors.

    18) From this DOS prompt enter the following command

            c:\oracle-dbd\>nmake

        The Visual C++ make executable will then build you DBD-execuable. There should be no errors at this point.

    19) You can test the compile by either entering

            c:\oracle-dbd\>nmake test

        As long as you have given a valid user name, password and database name in step 15 you will see some results.  If it appears to
        run but you do not get a connection check the following.

            i.   User name password and DB Name
            ii.  Ensure the a valid TNSNAMES.ORA file is in the Instantclient directory
            iii. Attempt to log into the version of SQLPLUS that comes with Instantclient.
                        If you manage to log on use the username password and TNS name with
                        the Set ORACLE_USERID = and rerun the tests.
                    iv   If you are compiling against 10XE and have skipped steps 12 to 14 try again bu this time carry out these steps

    20) You can now install DBD-Oracle into you system by entering the following command from the Visual C++ window dos prompt;

                c:\oracle-dbd\>nmake install

    21) You should now be able to run DBD-Oracle on you system

=head1 09/30 2006 from asu

DBD::Oracle 1.18a

Linux, Debian unstable (
DBI: 1.52
perl v5.8.8 built for i486-linux-gnu-thread-multi
)

Oracle Instant client (10.1.0.5)

The problem is in Makefile.PL. In line 130 the function find_oracle_home
is used to guess a value form $ORACLE_HOME if it is not set explicitly.
This value is used in line 138 to setup the environment (regardless
which client is used).

in line 1443 (sub get_client_version) sqlplus is used to get the
version string, but for the oracle instant client you must not set
$ORACLE_HOME (it will generate an error "SP2-0642: SQL*Plus internal
error state 2165, context 4294967295:0:0")

A solution that worked for me was to set
local $ENV{ORACLE_HOME} = '';
in line 1463 immediately before sqlplus is called (but I cannot tell if
this fails for full client installations)

11/30/05 -- John Scoles
I have confirmed that this Makefile.pl will work for both Oracle InstantClient
10.2.0.1 & 10.1.0.4 using same process the Andy Hassall uses. Starting with a clean OD
One needs only to get the latest version of Active Perl 5.8.7 use PPM to get DBI and then
install Microsoft Visual C++ toolkit, Windows SDK, and the Microsoft .net
framework 1.1. and modify the vcvars32.bat in C++ dir as follows

   1) Add  the local path to the windows platform SDK include directory to the
      Set INCLUDE Command Line to include the needed files from the Windows SDK.
        e.g.  "C:\Program Files\Microsoft Platform SDK\Include;"
   2) Add the local path to the .net Vc7 lib directory to the Set LIB
      command to include the needed library files from the .Net SKD
        e.g. C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\lib;
   3) Add the local path to the windows platform SDK Lib directory to the Set Lib
      command to include the needed library files from the Windows SDK
        e.g. C:\Program Files\Microsoft Platform SDK\Lib;

If one happens to have visual studio installed you may not have to download additional MS products.

12/01/05 --- John Scoles
Oracle 10XE
No big problem here as 10XE seems to use the instantclient as well. Just ensure your
 NLS_LANG and ORACLE_HOME are set to the same directory that 10XE uses

10/07/05 --John Scoles
Andy Hassall kindly added some changes to the Makefile.PL
so it will work for the Instant Client 10g on Windows OSs.  Below is how he set
up his environment and the steps he preformed to get it to compile.

  Setting environment for using Microsoft Visual Studio .NET 2003 tools.
  (If you have another version of Visual Studio or Visual C++ installed and wish
  to use its tools from the command line, run vcvars32.bat for that version.)

  C:\Documents and Settings\andyh>d:

  D:\>cd cygwin\home\andyh\src\pythian

  D:\cygwin\home\andyh\src\pythian>set ORACLE_HOME=d:\lib\instantclient_10_2

  D:\cygwin\home\andyh\src\pythian>set NLS_LANG=.WE8ISO8859P15

  D:\cygwin\home\andyh\src\pythian>set PATH=d:\lib\instantclient_10_2;D:\Program F
  iles\Microsoft Visual Studio .NET 2003\Common7\IDE;D:\Program Files\Microsoft Vi
  sual Studio .NET 2003\VC7\BIN;D:\Program Files\Microsoft Visual Studio .NET 2003
  \Common7\Tools;D:\Program Files\Microsoft Visual Studio .NET 2003\Common7\Tools\
  bin\prerelease;D:\Program Files\Microsoft Visual Studio .NET 2003\Common7\Tools\
  bin;D:\Program Files\Microsoft Visual Studio .NET 2003\SDK\v1.1\bin;C:\WINNT\Mic
  rosoft.NET\Framework\v1.1.4322;d:\Perl\bin\;C:\WINNT\system32;C:\WINNT;C:\WINNT\
  System32\Wbem;D:\Program Files\Microsoft SDK\Bin;D:\Program Files\Microsoft SDK\
  Bin\WinNT

  D:\cygwin\home\andyh\src\pythian>set ORACLE_USERID=test/test@test102

  D:\cygwin\home\andyh\src\pythian>perl Makefile.PL

4/27/04 -- Jeff Urlwin

Do not untar this distribution in a directory with spaces.  This will not work.

    i.e. C:\Program Files\ORacle\DBD Oracle Distribution is bad while
    c:\dev\dbd-oracle-1.15 is good ;)

9/14/02 -- Michael Chase

Makefile.PL uses Win32::TieRegistry or Win32::Registry to find the
current Oracle Home directory if the ORACLE_HOME environment variable
is not set.  If neither module is installed, you must set ORACLE_HOME
before running Makefile.PL.  Since the registry location of the current
Oracle Home is in different locations in different Oracle versions,
it is usually safer to set ORACLE_HOME before running Makefile.PL.

=head1 AUTHORS

=over 4

=item *

Tim Bunce <timb@cpan.org>

=item *

John Scoles <byterock@cpan.org>

=item *

Yanick Champoux <yanick@cpan.org>

=item *

Martin J. Evans <mjevans@cpan.org>

=back

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2024, 2023, 2022, 2021, 2019, 2014, 2013, 2012, 2011, 2010 by Tim Bunce.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
                                                                            root/.cpan/build/DBD-Oracle-1.90-1/blib/lib/DBD/Oracle/Troubleshooting/Win64.pod                    0000444 0000000 0000000 00000020060 14616324562 024727  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #PODNAME: DBD::Oracle::Troubleshooting::Win64
#ABSTRACT: Tips and Hints to Troubleshoot DBD::Oracle on Win64

__END__

=pod

=encoding UTF-8

=head1 NAME

DBD::Oracle::Troubleshooting::Win64 - Tips and Hints to Troubleshoot DBD::Oracle on Win64

=head1 VERSION

version 1.90

=head1 DBD::Oracle and Windows 64bit 

I have successfully compiled and installed  DBD::Oracle on Windows 2008 server 64bit operating system today.  

I used the latest version of <a href='http://search.cpan.org/~pythian/DBD-Oracle-1.24a/'>DBD::Oracle 1.24</A>
version 11.2.0.1.0 for 64bit windows of Oracle's
<a href='http://www.oracle.com/technology/software/tech/oci/instantclient/htdocs/winx64soft.html'>Instant Client Package - Basic</a>
along with the Instant Client Package - SQL*Plus and finally the Instant Client Package - SDK.

To get it to Make and compile correctly I had to download Microsoft's <a href='http://www.microsoft.com/visualstudio/en-ca/download'>Visual Studio Ultimate</a>

which should contain all the files you need.  It is rather portly at 2+gb so you might want to grab lunch while you are downloading it.
