	0xFE1A,
	0xFE30,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE54,
	0xFE55,
	0xFE56,
	0xFE5F,
	0xFE60,
	0xFE62,
	0xFE64,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFE6B,
	0xFE6C,
	0xFF01,
	0xFF03,
	0xFF06,
	0xFF0B,
	0xFF1B,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFE2,
	0xFFE5,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10101,
	0x10102,
	0x10140,
	0x1018D,
	0x10190,
	0x1019D,
	0x101A0,
	0x101A1,
	0x1091F,
	0x10920,
	0x10B39,
	0x10B40,
	0x11052,
	0x11066,
	0x11660,
	0x1166D,
	0x11FD5,
	0x11FDD,
	0x11FE1,
	0x11FF2,
	0x16FE2,
	0x16FE3,
	0x1D1E9,
	0x1D1EB,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D6DB,
	0x1D6DC,
	0x1D715,
	0x1D716,
	0x1D74F,
	0x1D750,
	0x1D789,
	0x1D78A,
	0x1D7C3,
	0x1D7C4,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16A,
	0x1F170,
	0x1F1AD,
	0x1F1AE,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D8,
	0x1F6DD,
	0x1F6ED,
	0x1F6F0,
	0x1F6FD,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D9,
	0x1F7E0,
	0x1F7EC,
	0x1F7F0,
	0x1F7F1,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F8B0,
	0x1F8B2,
	0x1F900,
	0x1FA54,
	0x1FA60,
	0x1FA6E,
	0x1FA70,
	0x1FA75,
	0x1FA78,
	0x1FA7D,
	0x1FA80,
	0x1FA87,
	0x1FA90,
	0x1FAAD,
	0x1FAB0,
	0x1FABB,
	0x1FAC0,
	0x1FAC6,
	0x1FAD0,
	0x1FADA,
	0x1FAE0,
	0x1FAE8,
	0x1FAF0,
	0x1FAF7,
	0x1FB00,
	0x1FB93,
	0x1FB94,
	0x1FBCB
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_BC__ON_invlist[] = {  /* for EBCDIC 037 */
	387,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4C,
	0x4E,
	0x4F,
	0x51,
	0x5A,
	0x5B,
	0x5C,
	0x60,
	0x6A,
	0x6B,
	0x6D,
	0x70,
	0x79,
	0x7A,
	0x7C,
	0x80,
	0x8A,
	0x8C,
	0x9D,
	0x9E,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xB1,
	0xB3,
	0xC1,
	0xD0,
	0xD1,
	0xE0,
	0xE2,
	0x2B9,
	0x2BB,
	0x2C2,
	0x2D0,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EE,
	0x2EF,
	0x300,
	0x374,
	0x376,
	0x37E,
	0x37F,
	0x384,
	0x386,
	0x387,
	0x388,
	0x3F6,
	0x3F7,
	0x58A,
	0x58B,
	0x58D,
	0x58F,
	0x606,
	0x608,
	0x60E,
	0x610,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x7F6,
	0x7FA,
	0xBF3,
	0xBF9,
	0xBFA,
	0xBFB,
	0xC78,
	0xC7F,
	0xF3A,
	0xF3E,
	0x1390,
	0x139A,
	0x1400,
	0x1401,
	0x169B,
	0x169D,
	0x17F0,
	0x17FA,
	0x1800,
	0x180B,
	0x1940,
	0x1941,
	0x1944,
	0x1946,
	0x19DE,
	0x1A00,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x2010,
	0x2028,
	0x2035,
	0x2044,
	0x2045,
	0x205F,
	0x207C,
	0x207F,
	0x208C,
	0x208F,
	0x2100,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x2150,
	0x2160,
	0x2189,
	0x218C,
	0x2190,
	0x2212,
	0x2214,
	0x2336,
	0x237B,
	0x2395,
	0x2396,
	0x2427,
	0x2440,
	0x244B,
	0x2460,
	0x2488,
	0x24EA,
	0x26AC,
	0x26AD,
	0x2800,
	0x2900,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B97,
	0x2C00,
	0x2CE5,
	0x2CEB,
	0x2CF9,
	0x2D00,
	0x2E00,
	0x2E5E,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3001,
	0x3005,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0x3036,
	0x3038,
	0x303D,
	0x3040,
	0x309B,
	0x309D,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0x31C0,
	0x31E4,
	0x321D,
	0x321F,
	0x3250,
	0x3260,
	0x327C,
	0x327F,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32D0,
	0x3377,
	0x337B,
	0x33DE,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA680,
	0xA700,
	0xA722,
	0xA788,
	0xA789,
	0xA828,
	0xA82C,
	0xA874,
	0xA878,
	0xAB6A,
	0xAB6C,
	0xFD3E,
	0xFD50,
	0xFDCF,
	0xFDD0,
	0xFDFD,
	0xFE00,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE50,
	0xFE51,
	0xFE52,
	0xFE54,
	0xFE55,
	0xFE56,
	0xFE5F,
	0xFE60,
	0xFE62,
	0xFE64,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFE6B,
	0xFE6C,
	0xFF01,
	0xFF03,
	0xFF06,
	0xFF0B,
	0xFF1B,
	0xFF21,
	0xFF3B,
	0xFF41,
	0xFF5B,
	0xFF66,
	0xFFE2,
	0xFFE5,
	0xFFE8,
	0xFFEF,
	0xFFF9,
	0xFFFE,
	0x10101,
	0x10102,
	0x10140,
	0x1018D,
	0x10190,
	0x1019D,
	0x101A0,
	0x101A1,
	0x1091F,
	0x10920,
	0x10B39,
	0x10B40,
	0x11052,
	0x11066,
	0x11660,
	0x1166D,
	0x11FD5,
	0x11FDD,
	0x11FE1,
	0x11FF2,
	0x16FE2,
	0x16FE3,
	0x1D1E9,
	0x1D1EB,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D6DB,
	0x1D6DC,
	0x1D715,
	0x1D716,
	0x1D74F,
	0x1D750,
	0x1D789,
	0x1D78A,
	0x1D7C3,
	0x1D7C4,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F130,
	0x1F16A,
	0x1F170,
	0x1F1AD,
	0x1F1AE,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D8,
	0x1F6DD,
	0x1F6ED,
	0x1F6F0,
	0x1F6FD,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D9,
	0x1F7E0,
	0x1F7EC,
	0x1F7F0,
	0x1F7F1,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F8B0,
	0x1F8B2,
	0x1F900,
	0x1FA54,
	0x1FA60,
	0x1FA6E,
	0x1FA70,
	0x1FA75,
	0x1FA78,
	0x1FA7D,
	0x1FA80,
	0x1FA87,
	0x1FA90,
	0x1FAAD,
	0x1FAB0,
	0x1FABB,
	0x1FAC0,
	0x1FAC6,
	0x1FAD0,
	0x1FADA,
	0x1FAE0,
	0x1FAE8,
	0x1FAF0,
	0x1FAF7,
	0x1FB00,
	0x1FB93,
	0x1FB94,
	0x1FBCB
};

#  endif	/* EBCDIC 037 */

static const UV UNI_BC__PDF_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x202C,
	0x202D
};

static const UV UNI_BC__PDI_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2069,
	0x206A
};

static const UV UNI_BC__R_invlist[] = {  /* for all charsets */
	79,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x590,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x600,
	0x7C0,
	0x7EB,
	0x7F4,
	0x7F6,
	0x7FA,
	0x7FD,
	0x7FE,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x860,
	0x200F,
	0x2010,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB29,
	0xFB2A,
	0xFB50,
	0x10800,
	0x1091F,
	0x10920,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x10B39,
	0x10B40,
	0x10D00,
	0x10D40,
	0x10E60,
	0x10E7F,
	0x10EAB,
	0x10EAD,
	0x10F30,
	0x10F70,
	0x10F82,
	0x10F86,
	0x11000,
	0x1E800,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0x1EC70,
	0x1ECC0,
	0x1ED00,
	0x1ED50,
	0x1EE00,
	0x1EF00,
	0x1F000
};

static const UV UNI_BC__RLE_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x202B,
	0x202C
};

static const UV UNI_BC__RLI_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2067,
	0x2068
};

static const UV UNI_BC__RLO_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x202E,
	0x202F
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_BC__S_invlist[] = {  /* for ASCII/Latin1 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xA,
	0xB,
	0xC,
	0x1F,
	0x20
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_BC__S_invlist[] = {  /* for EBCDIC 1047 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xC,
	0x1F,
	0x20
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_BC__S_invlist[] = {  /* for EBCDIC 037 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xC,
	0x1F,
	0x20
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_BC__WS_invlist[] = {  /* for ASCII/Latin1 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC,
	0xD,
	0x20,
	0x21,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x2029,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_BC__WS_invlist[] = {  /* for EBCDIC 1047 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC,
	0xD,
	0x40,
	0x41,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x2029,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_BC__WS_invlist[] = {  /* for EBCDIC 037 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC,
	0xD,
	0x40,
	0x41,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x2029,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#  endif	/* EBCDIC 037 */

static const UV UNI_BENG_invlist[] = {  /* for all charsets */
	53,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0x980,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FF,
	0x1CD0,
	0x1CD1,
	0x1CD2,
	0x1CD3,
	0x1CD5,
	0x1CD7,
	0x1CD8,
	0x1CD9,
	0x1CE1,
	0x1CE2,
	0x1CEA,
	0x1CEB,
	0x1CED,
	0x1CEE,
	0x1CF2,
	0x1CF3,
	0x1CF5,
	0x1CF8,
	0xA8F1,
	0xA8F2
};

static const UV UNI_BHKS_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D
};

static const UV UNI_BIDIC_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61C,
	0x61D,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2066,
	0x206A
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_BIDIM_invlist[] = {  /* for ASCII/Latin1 */
	229,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x28,
	0x2A,
	0x3C,
	0x3D,
	0x3E,
	0x3F,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x7B,
	0x7C,
	0x7D,
	0x7E,
	0xAB,
	0xAC,
	0xBB,
	0xBC,
	0xF3A,
	0xF3E,
	0x169B,
	0x169D,
	0x2039,
	0x203B,
	0x2045,
	0x2047,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2140,
	0x2141,
	0x2201,
	0x2205,
	0x2208,
	0x220E,
	0x2211,
	0x2212,
	0x2215,
	0x2217,
	0x221A,
	0x221E,
	0x221F,
	0x2223,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x222B,
	0x2234,
	0x2239,
	0x223A,
	0x223B,
	0x224D,
	0x2252,
	0x2256,
	0x225F,
	0x2261,
	0x2262,
	0x2263,
	0x2264,
	0x226C,
	0x226E,
	0x228D,
	0x228F,
	0x2293,
