=head1 Global Variables

There are currently no internal API items in Global Variables

=head1 GV Handling and Stashes
X<GV_CACHE_ONLY>

=over 4

=item C<amagic_applies>
X<amagic_applies>

Check C<sv> to see if the overloaded (active magic) operation C<method>
applies to it. If the sv is not SvROK or it is not an object then returns
false, otherwise checks if the object is blessed into a class supporting
overloaded operations, and returns true if a call to amagic_call() with
this SV and the given method would trigger an amagic operation, including
via the overload fallback rules or via nomethod. Thus a call like:

    amagic_applies(sv, string_amg, AMG_unary)

would return true for an object with overloading set up in any of the
following ways:

    use overload q("") => sub { ... };
    use overload q(0+) => sub { ... }, fallback => 1;

and could be used to tell if a given object would stringify to something
other than the normal default ref stringification.

Note that the fact that this function returns TRUE does not mean you
can succesfully perform the operation with amagic_call(), for instance
any overloaded method might throw a fatal exception,  however if this
function returns FALSE you can be confident that it will NOT perform
the given overload operation.

C<method> is an integer enum, one of the values found in F<overload.h>,
for instance C<string_amg>.

C<flags> should be set to AMG_unary for unary operations.

=over 3

 bool  amagic_applies(SV *sv, int method, int flags)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gp_dup>
X<gp_dup>

Duplicate a typeglob, returning a pointer to the cloned object.

=over 3

 GP *  gp_dup(GP * const gp, CLONE_PARAMS * const param)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<gv_handler>
X<gv_handler>

Implements C<StashHANDLER>, which you should use instead

=over 3

 CV *  gv_handler(HV *stash, I32 id)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_stashsvpvn_cached>
X<gv_stashsvpvn_cached>

Returns a pointer to the stash for a specified package, possibly
cached.  Implements both L<perlapi/C<gv_stashpvn>> and
L<perlapi/C<gv_stashsv>>.

Requires one of either C<namesv> or C<namepv> to be non-null.

If the flag C<GV_CACHE_ONLY> is set, return the stash only if found in the
cache; see L<perlapi/C<gv_stashpvn>> for details on the other C<flags>.

Note it is strongly preferred for C<namesv> to be non-null, for performance
reasons.

=over 3

 HV *  gv_stashsvpvn_cached(SV *namesv, const char *name,
                            U32 namelen, I32 flags)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_try_downgrade>
X<gv_try_downgrade>

NOTE: C<gv_try_downgrade> is B<experimental> and may change or be
removed without notice.

If the typeglob C<gv> can be expressed more succinctly, by having
something other than a real GV in its place in the stash, replace it
with the optimised form.  Basic requirements for this are that C<gv>
is a real typeglob, is sufficiently ordinary, and is only referenced
from its package.  This function is meant to be used when a GV has been
looked up in part to see what was there, causing upgrading, but based
on what was found it turns out that the real GV isn't required after all.

If C<gv> is a completely empty typeglob, it is deleted from the stash.

If C<gv> is a typeglob containing only a sufficiently-ordinary constant
sub, the typeglob is replaced with a scalar-reference placeholder that
more compactly represents the same thing.

=over 3

 void  gv_try_downgrade(GV *gv)

=back

=back

=for hackers
Found in file gv.c

=head1 Hook manipulation

There are currently no internal API items in Hook manipulation

=head1 HV Handling
X<HvNAME_get>

=over 4

=item C<hv_eiter_p>
X<hv_eiter_p>

Implements C<HvEITER> which you should use instead.

NOTE: C<hv_eiter_p> must be explicitly called as
C<Perl_hv_eiter_p>
with an C<aTHX_> parameter.

=over 3

 HE **  Perl_hv_eiter_p(pTHX_ HV *hv)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_eiter_set>
X<hv_eiter_set>

Implements C<HvEITER_set> which you should use instead.

NOTE: C<hv_eiter_set> must be explicitly called as
C<Perl_hv_eiter_set>
with an C<aTHX_> parameter.

=over 3

 void  Perl_hv_eiter_set(pTHX_ HV *hv, HE *eiter)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_ename_add>
X<hv_ename_add>

Adds a name to a stash's internal list of effective names.  See
C<L</hv_ename_delete>>.

This is called when a stash is assigned to a new location in the symbol
table.

=over 3

 void  hv_ename_add(HV *hv, const char *name, U32 len, U32 flags)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_ename_delete>
X<hv_ename_delete>

Removes a name from a stash's internal list of effective names.  If this is
the name returned by C<HvENAME>, then another name in the list will take
its place (C<HvENAME> will use it).

This is called when a stash is deleted from the symbol table.

=over 3

 void  hv_ename_delete(HV *hv, const char *name, U32 len,
                       U32 flags)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_fill>
X<hv_fill>

Returns the number of hash buckets that happen to be in use.

This function implements the L<C<HvFILL> macro|perlapi/HvFILL> which you should
use instead.

As of perl 5.25 this function is used only for debugging
purposes, and the number of used hash buckets is not
in any way cached, thus this function can be costly
to execute as it must iterate over all the buckets in the
hash.

NOTE: C<hv_fill> must be explicitly called as
C<Perl_hv_fill>
with an C<aTHX_> parameter.

=over 3

 STRLEN  Perl_hv_fill(pTHX_ HV * const hv)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_placeholders_get>
X<hv_placeholders_get>

Implements C<HvPLACEHOLDERS_get>, which you should use instead.

NOTE: C<hv_placeholders_get> must be explicitly called as
C<Perl_hv_placeholders_get>
with an C<aTHX_> parameter.

=over 3

 I32  Perl_hv_placeholders_get(pTHX_ const HV *hv)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_placeholders_set>
X<hv_placeholders_set>

Implements C<HvPLACEHOLDERS_set>, which you should use instead.

NOTE: C<hv_placeholders_set> must be explicitly called as
C<Perl_hv_placeholders_set>
with an C<aTHX_> parameter.

=over 3

 void  Perl_hv_placeholders_set(pTHX_ HV *hv, I32 ph)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_riter_p>
X<hv_riter_p>

Implements C<HvRITER> which you should use instead.

NOTE: C<hv_riter_p> must be explicitly called as
C<Perl_hv_riter_p>
with an C<aTHX_> parameter.

=over 3

 I32 *  Perl_hv_riter_p(pTHX_ HV *hv)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<hv_riter_set>
X<hv_riter_set>

Implements C<HvRITER_set> which you should use instead.

NOTE: C<hv_riter_set> must be explicitly called as
C<Perl_hv_riter_set>
with an C<aTHX_> parameter.

=over 3

 void  Perl_hv_riter_set(pTHX_ HV *hv, I32 riter)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<refcounted_he_chain_2hv>
X<refcounted_he_chain_2hv>

Generates and returns a C<HV *> representing the content of a
C<refcounted_he> chain.
C<flags> is currently unused and must be zero.

=over 3

 HV *  refcounted_he_chain_2hv(const struct refcounted_he *c,
                               U32 flags)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<refcounted_he_fetch_pv>
X<refcounted_he_fetch_pv>

Like L</refcounted_he_fetch_pvn>, but takes a nul-terminated string
instead of a string/length pair.

=over 3

 SV *  refcounted_he_fetch_pv(const struct refcounted_he *chain,
                              const char *key, U32 hash, U32 flags)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<refcounted_he_fetch_pvn>
X<refcounted_he_fetch_pvn>

Search along a C<refcounted_he> chain for an entry with the key specified
by C<keypv> and C<keylen>.  If C<flags> has the C<REFCOUNTED_HE_KEY_UTF8>
bit set, the key octets are interpreted as UTF-8, otherwise they
are interpreted as Latin-1.  C<hash> is a precomputed hash of the key
string, or zero if it has not been precomputed.  Returns a mortal scalar
representing the value associated with the key, or C<&PL_sv_placeholder>
if there is no value associated with the key.

=over 3

 SV *  refcounted_he_fetch_pvn(const struct refcounted_he *chain,
                               const char *keypv, STRLEN keylen,
                               U32 hash, U32 flags)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<refcounted_he_fetch_pvs>
X<refcounted_he_fetch_pvs>

Like L</refcounted_he_fetch_pvn>, but takes a literal string
instead of a string/length pair, and no precomputed hash.

=over 3

 SV *  refcounted_he_fetch_pvs(const struct refcounted_he *chain,
                               "key", U32 flags)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<refcounted_he_fetch_sv>
X<refcounted_he_fetch_sv>

Like L</refcounted_he_fetch_pvn>, but takes a Perl scalar instead of a
string/length pair.

=over 3

 SV *  refcounted_he_fetch_sv(const struct refcounted_he *chain,
                              SV *key, U32 hash, U32 flags)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<refcounted_he_free>
X<refcounted_he_free>

Decrements the reference count of a C<refcounted_he> by one.  If the
reference count reaches zero the structure's memory is freed, which
(recursively) causes a reduction of its parent C<refcounted_he>'s
reference count.  It is safe to pass a null pointer to this function:
no action occurs in this case.

=over 3

 void  refcounted_he_free(struct refcounted_he *he)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<refcounted_he_inc>
X<refcounted_he_inc>

Increment the reference count of a C<refcounted_he>.  The pointer to the
C<refcounted_he> is also returned.  It is safe to pass a null pointer
to this function: no action occurs and a null pointer is returned.

=over 3

 struct refcounted_he *  refcounted_he_inc(
                                          struct refcounted_he *he)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<refcounted_he_new_pv>
X<refcounted_he_new_pv>

Like L</refcounted_he_new_pvn>, but takes a nul-terminated string instead
of a string/length pair.

=over 3

 struct refcounted_he *  refcounted_he_new_pv(
                                      struct refcounted_he *parent,
                                      const char *key, U32 hash,
                                      SV *value, U32 flags)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<refcounted_he_new_pvn>
X<refcounted_he_new_pvn>

Creates a new C<refcounted_he>.  This consists of a single key/value
pair and a reference to an existing C<refcounted_he> chain (which may
be empty), and thus forms a longer chain.  When using the longer chain,
the new key/value pair takes precedence over any entry for the same key
further along the chain.

The new key is specified by C<keypv> and C<keylen>.  If C<flags> has
the C<REFCOUNTED_HE_KEY_UTF8> bit set, the key octets are interpreted
as UTF-8, otherwise they are interpreted as Latin-1.  C<hash> is
a precomputed hash of the key string, or zero if it has not been
precomputed.

C<value> is the scalar value to store for this key.  C<value> is copied
by this function, which thus does not take ownership of any reference
to it, and later changes to the scalar will not be reflected in the
value visible in the C<refcounted_he>.  Complex types of scalar will not
be stored with referential integrity, but will be coerced to strings.
C<value> may be either null or C<&PL_sv_placeholder> to indicate that no
value is to be associated with the key; this, as with any non-null value,
takes precedence over the existence of a value for the key further along
the chain.

C<parent> points to the rest of the C<refcounted_he> chain to be
attached to the new C<refcounted_he>.  This function takes ownership
of one reference to C<parent>, and returns one reference to the new
C<refcounted_he>.

=over 3

 struct refcounted_he *  refcounted_he_new_pvn(
                                      struct refcounted_he *parent,
                                      const char *keypv,
                                      STRLEN keylen, U32 hash,
                                      SV *value, U32 flags)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<refcounted_he_new_pvs>
X<refcounted_he_new_pvs>

Like L</refcounted_he_new_pvn>, but takes a literal string
instead of a string/length pair, and no precomputed hash.

=over 3

 struct refcounted_he *  refcounted_he_new_pvs(
                                      struct refcounted_he *parent,
                                      "key", SV *value, U32 flags)

=back

=back

=for hackers
Found in file hv.h

=over 4

=item C<refcounted_he_new_sv>
X<refcounted_he_new_sv>

Like L</refcounted_he_new_pvn>, but takes a Perl scalar instead of a
string/length pair.

=over 3

 struct refcounted_he *  refcounted_he_new_sv(
                                      struct refcounted_he *parent,
                                      SV *key, U32 hash, SV *value,
                                      U32 flags)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<unsharepvn>
X<unsharepvn>

If no one has access to shared string C<str> with length C<len>, free it.

C<len> and C<hash> must both be valid for C<str>.

=over 3

 void  unsharepvn(const char *sv, I32 len, U32 hash)

=back

=back

=for hackers
Found in file hv.c

=head1 Input/Output

=over 4

=item C<dirp_dup>
X<dirp_dup>

Duplicate a directory handle, returning a pointer to the cloned object.

=over 3

 DIR *  dirp_dup(DIR * const dp, CLONE_PARAMS * const param)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<fp_dup>
X<fp_dup>

Duplicate a file handle, returning a pointer to the cloned object.

=over 3

 PerlIO *  fp_dup(PerlIO * const fp, const char type,
                  CLONE_PARAMS * const param)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<my_fflush_all>
X<my_fflush_all>

Implements C<PERL_FLUSHALL_FOR_CHILD> on some platforms.

=over 3

 I32  my_fflush_all()

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<my_mkostemp>
X<my_mkostemp>

The C library C<L<mkostemp(3)>> if available, or a Perl implementation of it.

NOTE: C<my_mkostemp> must be explicitly called as
C<Perl_my_mkostemp>
.

=over 3

 int  Perl_my_mkostemp(char *templte, int flags)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<my_mkstemp>
X<my_mkstemp>

The C library C<L<mkstemp(3)>> if available, or a Perl implementation of it.

NOTE: C<my_mkstemp> must be explicitly called as
C<Perl_my_mkstemp>
.

=over 3

 int  Perl_my_mkstemp(char *templte)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<PL_last_in_gv>
X<PL_last_in_gv>

The GV which was last used for a filehandle input operation.  (C<< <FH> >>)

On threaded perls, each thread has an independent copy of this variable;
each initialized at creation time with the current value of the creating
thread's copy.

=over 3

 GV*  PL_last_in_gv

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<PL_ofsgv>
X<PL_ofsgv>

The glob containing the output field separator - C<*,> in Perl space.

On threaded perls, each thread has an independent copy of this variable;
each initialized at creation time with the current value of the creating
thread's copy.

=over 3

 GV*  PL_ofsgv

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<PL_rs>
X<PL_rs>

The input record separator - C<$/> in Perl space.

On threaded perls, each thread has an independent copy of this variable;
each initialized at creation time with the current value of the creating
thread's copy.

=over 3

 SV*  PL_rs

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<start_glob>
X<start_glob>

NOTE: C<start_glob> is B<experimental> and may change or be
removed without notice.

Function called by C<do_readline> to spawn a glob (or do the glob inside
perl on VMS).  This code used to be inline, but now perl uses C<File::Glob>
this glob starter is only used by miniperl during the build process,
or when PERL_EXTERNAL_GLOB is defined.
Moving it away shrinks F<pp_hot.c>; shrinking F<pp_hot.c> helps speed perl up.

NOTE: C<start_glob> must be explicitly called as
C<Perl_start_glob>
with an C<aTHX_> parameter.

=over 3

 PerlIO *  Perl_start_glob(pTHX_ SV *tmpglob, IO *io)

=back

=back

=for hackers
Found in file doio.c

=head1 Integer

There are currently no internal API items in Integer

=head1 I/O Formats

There are currently no internal API items in I/O Formats

=head1 Lexer interface

=over 4

=item C<resume_compcv_and_save>
X<resume_compcv_and_save>

Resumes a buffer previously suspended by the C<suspend_compcv> function, in a
way that will be re-suspended at the end of the scope so it can be used again
later.  This should be used within an C<ENTER>/C<LEAVE> scoped pair.

=over 3

 void  resume_compcv_and_save(struct suspended_compcv *buffer)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<resume_compcv_final>
X<resume_compcv_final>

Resumes the parser state previously saved using the C<suspend_compcv> function
for a final time before being compiled into a full CV.  This should be used
within an C<ENTER>/C<LEAVE> scoped pair.

=over 3

 void  resume_compcv_final(struct suspended_compcv *buffer)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<validate_proto>
X<validate_proto>

NOTE: C<validate_proto> is B<experimental> and may change or be
removed without notice.

This function performs syntax checking on a prototype, C<proto>.
If C<warn> is true, any illegal characters or mismatched brackets
will trigger illegalproto warnings, declaring that they were
detected in the prototype for C<name>.

The return value is C<true> if this is a valid prototype, and
C<false> if it is not, regardless of whether C<warn> was C<true> or
C<false>.

Note that C<NULL> is a valid C<proto> and will always return C<true>.

=over 3

 bool  validate_proto(SV *name, SV *proto, bool warn,
                      bool curstash)

=back

=back

=for hackers
Found in file toke.c

=head1 Locales

There are currently no internal API items in Locales

=head1 Magic

=over 4

=item C<magic_clearhint>
X<magic_clearhint>

Triggered by a delete from C<%^H>, records the key to
C<PL_compiling.cop_hints_hash>.

=over 3

 int  magic_clearhint(SV *sv, MAGIC *mg)

=back

=back

=for hackers
Found in file mg.c

=over 4

=item C<magic_clearhints>
X<magic_clearhints>

Triggered by clearing C<%^H>, resets C<PL_compiling.cop_hints_hash>.

=over 3

 int  magic_clearhints(SV *sv, MAGIC *mg)

=back

=back

=for hackers
Found in file mg.c

=over 4

=item C<magic_methcall>
X<magic_methcall>

Invoke a magic method (like FETCH).

C<sv> and C<mg> are the tied thingy and the tie magic.

C<meth> is the name of the method to call.

C<argc> is the number of args (in addition to $self) to pass to the method.

The C<flags> can be:

    G_DISCARD     invoke method with G_DISCARD flag and don't
                  return a value
    G_UNDEF_FILL  fill the stack with argc pointers to
                  PL_sv_undef

The arguments themselves are any values following the C<flags> argument.

Returns the SV (if any) returned by the method, or C<NULL> on failure.

NOTE: C<magic_methcall> must be explicitly called as
C<Perl_magic_methcall>
with an C<aTHX_> parameter.

=over 3

 SV *  Perl_magic_methcall(pTHX_ SV *sv, const MAGIC *mg,
                           SV *meth, U32 flags, U32 argc, ...)

