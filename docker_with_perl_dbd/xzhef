
=item examples/ziptest.pl      -- Another way to check a Zip file for validity

=back

=head1 Can't Read/modify/write same Zip file

B<Q:> Why can't I open a Zip file, add a member, and write it back? I get an
error message when I try.

B<A:> Because Archive::Zip doesn't (and can't, generally) read file contents into memory,
the original Zip file is required to stay around until the writing of the new
file is completed.

The best way to do this is to write the Zip to a temporary file and then
rename the temporary file to have the old name (possibly after deleting the
old one).

Archive::Zip v1.02 added the archive methods C<overwrite()> and
C<overwriteAs()> to do this simply and carefully.

See C<examples/updateZip.pl> for an example of this technique.

=head1 File creation time not set

B<Q:> Upon extracting files, I see that their modification (and access) times are
set to the time in the Zip archive. However, their creation time is not set to
the same time. Why?

B<A:> Mostly because Perl doesn't give cross-platform access to I<creation time>.
Indeed, many systems (like Unix) don't support such a concept.
However, if yours does, you can easily set it. Get the modification time from
the member using C<lastModTime()>.

=head1 Can't use Archive::Zip on gzip files

B<Q:> Can I use Archive::Zip to extract Unix gzip files?

B<A:> No.

There is a distinction between Unix gzip files, and Zip archives that
also can use the gzip compression.

Depending on the format of the gzip file, you can use L<Compress::Raw::Zlib>, or
L<Archive::Tar> to decompress it (and de-archive it in the case of Tar files).

You can unzip PKZIP/WinZip/etc/ archives using Archive::Zip (that's what
it's for) as long as any compressed members are compressed using
Deflate compression.

=head1 Add a directory/tree to a Zip

B<Q:> How can I add a directory (or tree) full of files to a Zip?

B<A:> You can use the Archive::Zip::addTree*() methods:

   use Archive::Zip;
   my $zip = Archive::Zip->new();
   # add all readable files and directories below . as xyz/*
   $zip->addTree( '.', 'xyz' );
   # add all readable plain files below /abc as def/*
   $zip->addTree( '/abc', 'def', sub { -f && -r } );
   # add all .c files below /tmp as stuff/*
   $zip->addTreeMatching( '/tmp', 'stuff', '\.c$' );
   # add all .o files below /tmp as stuff/* if they aren't writable
   $zip->addTreeMatching( '/tmp', 'stuff', '\.o$', sub { ! -w } );
   # add all .so files below /tmp that are smaller than 200 bytes as stuff/*
   $zip->addTreeMatching( '/tmp', 'stuff', '\.o$', sub { -s < 200 } );
   # and write them into a file
   $zip->writeToFileNamed('xxx.zip');

=head1 Extract a directory/tree

B<Q:> How can I extract some (or all) files from a Zip into a different
directory?

B<A:> You can use the Archive::Zip::extractTree() method:
??? ||

   # now extract the same files into /tmpx
   $zip->extractTree( 'stuff', '/tmpx' );

=head1 Update a directory/tree

B<Q:> How can I update a Zip from a directory tree, adding or replacing only
the newer files?

B<A:> You can use the Archive::Zip::updateTree() method that was added in version 1.09.

=head1 Zip times might be off by 1 second

B<Q:> It bothers me greatly that my file times are wrong by one second about half
the time. Why don't you do something about it?

B<A:> Get over it. This is a result of the Zip format storing times in DOS
format, which has a resolution of only two seconds.

=head1 Zip times don't include time zone information

B<Q:> My file times don't respect time zones. What gives?

B<A:> If this is important to you, please submit patches to read the various
Extra Fields that encode times with time zones. I'm just using the DOS
Date/Time, which doesn't have a time zone.

=head1 How do I make a self-extracting Zip

B<Q:> I want to make a self-extracting Zip file. Can I do this?

B<A:> Yes. You can write a self-extracting archive stub (that is, a version of
unzip) to the output filehandle that you pass to writeToFileHandle(). See
examples/selfex.pl for how to write a self-extracting archive.

However, you should understand that this will only work on one kind of
platform (the one for which the stub was compiled).

=head1 How can I deal with Zips with prepended garbage (i.e. from Sircam)

B<Q:> How can I tell if a Zip has been damaged by adding garbage to the
beginning or inside the file?

B<A:> I added code for this for the Amavis virus scanner. You can query archives
for their 'eocdOffset' property, which should be 0:

  if ($zip->eocdOffset > 0)
    { warn($zip->eocdOffset . " bytes of garbage at beginning or within Zip") }

When members are extracted, this offset will be used to adjust the start of
the member if necessary.

=head1 Can't extract Shrunk files

B<Q:> I'm trying to extract a file out of a Zip produced by PKZIP, and keep
getting this error message:

  error: Unsupported compression combination: read 6, write 0

B<A:> You can't uncompress this archive member. Archive::Zip only supports uncompressed
members, and compressed members that are compressed using the compression
supported by Compress::Raw::Zlib. That means only Deflated and Stored members.

Your file is compressed using the Shrink format, which is not supported by
Compress::Raw::Zlib.

You could, perhaps, use a command-line UnZip program (like the Info-Zip
one) to extract this.

=head1 Can't do decryption

B<Q:> How do I decrypt encrypted Zip members?

B<A:> With some other program or library. Archive::Zip doesn't support decryption,
and probably never will (unless I<you> write it).

=head1 How to test file integrity?

B<Q:> How can Archive::Zip can test the validity of a Zip file?

B<A:> If you try to decompress the file, the gzip streams will report errors
if you have garbage. Most of the time.

If you try to open the file and a central directory structure can't be
found, an error will be reported.

When a file is being read, if we can't find a proper PK.. signature in
the right places we report a format error.

If there is added garbage at the beginning of a Zip file (as inserted
by some viruses), you can find out about it, but Archive::Zip will ignore it,
and you can still use the archive. When it gets written back out the
added stuff will be gone.

There are two ready-to-use utilities in the examples directory that can
be used to test file integrity, or that you can use as examples
for your own code:

=over 4

=item examples/zipcheck.pl shows how to use an attempted extraction to test a file.

=item examples/ziptest.pl shows how to test CRCs in a file.

=back

=head1 Duplicate files in Zip?

B<Q:> Archive::Zip let me put the same file in my Zip twice! Why don't you prevent this?

B<A:> As far as I can tell, this is not disallowed by the Zip spec. If you
think it's a bad idea, check for it yourself:

  $zip->addFile($someFile, $someName) unless $zip->memberNamed($someName);

I can even imagine cases where this might be useful (for instance, multiple
versions of files).

=head1 File ownership/permissions/ACLS/etc

B<Q:> Why doesn't Archive::Zip deal with file ownership, ACLs, etc.?

B<A:> There is no standard way to represent these in the Zip file format. If
you want to send me code to properly handle the various extra fields that
have been used to represent these through the years, I'll look at it.

=head1 I can't compile but ActiveState only has an old version of Archive::Zip

B<Q:> I've only installed modules using ActiveState's PPM program and
repository. But they have a much older version of Archive::Zip than is in CPAN. Will
you send me a newer PPM?

B<A:> Probably not, unless I get lots of extra time. But there's no reason you
can't install the version from CPAN. Archive::Zip is pure Perl, so all you need is
NMAKE, which you can get for free from Microsoft (see the FAQ in the
ActiveState documentation for details on how to install CPAN modules).

=head1 My JPEGs (or MP3's) don't compress when I put them into Zips!

B<Q:> How come my JPEGs and MP3's don't compress much when I put them into Zips?

B<A:> Because they're already compressed.

=head1 Under Windows, things lock up/get damaged

B<Q:> I'm using Windows. When I try to use Archive::Zip, my machine locks up/makes
funny sounds/displays a BSOD/corrupts data. How can I fix this?

B<A:> First, try the newest version of Compress::Raw::Zlib. I know of
Windows-related problems prior to v1.14 of that library.

=head1 Zip contents in a scalar

B<Q:> I want to read a Zip file from (or write one to) a scalar variable instead
of a file. How can I do this?

B<A:> Use C<IO::String> and the C<readFromFileHandle()> and
C<writeToFileHandle()> methods.
See C<examples/readScalar.pl> and C<examples/writeScalar.pl>.

=head1 Reading from streams

B<Q:> How do I read from a stream (like for the Info-Zip C<funzip> program)?

B<A:> This is not currently supported, though writing to a stream is.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     usr/share/perl5/Archive/Zip/FileMember.pm                                                           0000644 0000000 0000000 00000002472 13632474012 016705  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Archive::Zip::FileMember;

use strict;
use vars qw( $VERSION @ISA );

BEGIN {
    $VERSION = '1.68';
    @ISA     = qw ( Archive::Zip::Member );
}

use Archive::Zip qw(
  :UTILITY_METHODS
);

sub externalFileName {
    shift->{'externalFileName'};
}

# Return true if I depend on the named file
sub _usesFileNamed {
    my $self     = shift;
    my $fileName = shift;
    my $xfn      = $self->externalFileName();
    return undef if ref($xfn);
    return $xfn eq $fileName;
}

sub fh {
    my $self = shift;
    $self->_openFile()
      if !defined($self->{'fh'}) || !$self->{'fh'}->opened();
    return $self->{'fh'};
}

# opens my file handle from my file name
sub _openFile {
    my $self = shift;
    my ($status, $fh) = _newFileHandle($self->externalFileName(), 'r');
    if (!$status) {
        _ioError("Can't open", $self->externalFileName());
        return undef;
    }
    $self->{'fh'} = $fh;
    _binmode($fh);
    return $fh;
}

# Make sure I close my file handle
sub endRead {
    my $self = shift;
    undef $self->{'fh'};    # _closeFile();
    return $self->SUPER::endRead(@_);
}

sub _become {
    my $self     = shift;
    my $newClass = shift;
    return $self if ref($self) eq $newClass;
    delete($self->{'externalFileName'});
    delete($self->{'fh'});
    return $self->SUPER::_become($newClass);
}

1;
                                                                                                                                                                                                      usr/share/perl5/Archive/Zip/Member.pm                                                               0000644 0000000 0000000 00000140165 13632474012 016107  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Archive::Zip::Member;

# A generic member of an archive

use strict;
use vars qw( $VERSION @ISA );

BEGIN {
    $VERSION = '1.68';
    @ISA     = qw( Archive::Zip );

    if ($^O eq 'MSWin32') {
        require Win32;
        require Encode;
        Encode->import(qw{ decode_utf8 });
    }
}

use Archive::Zip qw(
  :CONSTANTS
  :MISC_CONSTANTS
  :ERROR_CODES
  :PKZIP_CONSTANTS
  :UTILITY_METHODS
);

use Time::Local ();
use Compress::Raw::Zlib qw( Z_OK Z_STREAM_END MAX_WBITS );
use File::Path;
use File::Basename;

# Unix perms for default creation of files/dirs.
use constant DEFAULT_DIRECTORY_PERMISSIONS => 040755;
use constant DEFAULT_FILE_PERMISSIONS      => 0100666;
use constant DIRECTORY_ATTRIB              => 040000;
use constant FILE_ATTRIB                   => 0100000;
use constant OS_SUPPORTS_SYMLINK           => do {
  local $@;
  !!eval { symlink("",""); 1 };
};

# Returns self if successful, else undef
# Assumes that fh is positioned at beginning of central directory file header.
# Leaves fh positioned immediately after file header or EOCD signature.
sub _newFromZipFile {
    my $class = shift;
    my $self  = Archive::Zip::ZipFileMember->_newFromZipFile(@_);
    return $self;
}

sub newFromString {
    my $class = shift;

    my ($stringOrStringRef, $fileName);
    if (ref($_[0]) eq 'HASH') {
        $stringOrStringRef = $_[0]->{string};
        $fileName          = $_[0]->{zipName};
    } else {
        ($stringOrStringRef, $fileName) = @_;
    }

    my $self =
      Archive::Zip::StringMember->_newFromString($stringOrStringRef, $fileName);
    return $self;
}

sub newFromFile {
    my $class = shift;

    my ($fileName, $zipName);
    if (ref($_[0]) eq 'HASH') {
        $fileName = $_[0]->{fileName};
        $zipName  = $_[0]->{zipName};
    } else {
        ($fileName, $zipName) = @_;
    }

    my $self =
      Archive::Zip::NewFileMember->_newFromFileNamed($fileName, $zipName);
    return $self;
}

sub newDirectoryNamed {
    my $class = shift;

    my ($directoryName, $newName);
    if (ref($_[0]) eq 'HASH') {
        $directoryName = $_[0]->{directoryName};
        $newName       = $_[0]->{zipName};
    } else {
        ($directoryName, $newName) = @_;
    }

    my $self =
      Archive::Zip::DirectoryMember->_newNamed($directoryName, $newName);
    return $self;
}

sub new {
    my $class = shift;
    # Info-Zip 3.0 (I guess) seems to use the following values
    # for the version fields in local and central directory
    # headers, regardless of whether the member has an zip64
    # extended information extra field or not:
    #
    #   version made by:
    #     30
    #
    #   version needed to extract:
    #     10 for directory and stored entries
    #     20 for anything else
    my $self  = {
        'lastModFileDateTime'      => 0,
        'fileAttributeFormat'      => FA_UNIX,
        'zip64'                    => 0,
        'desiredZip64Mode'         => ZIP64_AS_NEEDED,
        'versionMadeBy'            => 20,
        'versionNeededToExtract'   => 20,
        'bitFlag'                  => ($Archive::Zip::UNICODE ? 0x0800 : 0),
        'compressionMethod'        => COMPRESSION_STORED,
        'desiredCompressionMethod' => COMPRESSION_STORED,
        'desiredCompressionLevel'  => COMPRESSION_LEVEL_NONE,
        'internalFileAttributes'   => 0,
        'externalFileAttributes'   => 0,                        # set later
        'fileName'                 => '',
        'cdExtraField'             => '',
        'localExtraField'          => '',
        'fileComment'              => '',
        'crc32'                    => 0,
        'compressedSize'           => 0,
        'uncompressedSize'         => 0,
        'password'                 => undef,    # password for encrypted data
        'crc32c'                   => -1,       # crc for decrypted data
        @_
    };
    bless($self, $class);
    $self->unixFileAttributes($self->DEFAULT_FILE_PERMISSIONS);
    return $self;
}

# Morph into given class (do whatever cleanup I need to do)
sub _become {
    return bless($_[0], $_[1]);
}

sub fileAttributeFormat {
    my $self = shift;

    if (@_) {
        $self->{fileAttributeFormat} =
          (ref($_[0]) eq 'HASH') ? $_[0]->{format} : $_[0];
    } else {
        return $self->{fileAttributeFormat};
    }
}

sub zip64 {
    shift->{'zip64'};
}

sub desiredZip64Mode {
    my $self = shift;
    my $desiredZip64Mode = $self->{'desiredZip64Mode'};
    if (@_) {
        $self->{'desiredZip64Mode'} =
          ref($_[0]) eq 'HASH' ? shift->{desiredZip64Mode} : shift;
    }
    return $desiredZip64Mode;
}

sub versionMadeBy {
    shift->{'versionMadeBy'};
}

sub versionNeededToExtract {
    shift->{'versionNeededToExtract'};
}

sub bitFlag {
    my $self = shift;

# Set General Purpose Bit Flags according to the desiredCompressionLevel setting
    if (   $self->desiredCompressionLevel == 1
        || $self->desiredCompressionLevel == 2) {
        $self->{'bitFlag'} |= DEFLATING_COMPRESSION_FAST;
    } elsif ($self->desiredCompressionLevel == 3
        || $self->desiredCompressionLevel == 4
        || $self->desiredCompressionLevel == 5
        || $self->desiredCompressionLevel == 6
        || $self->desiredCompressionLevel == 7) {
        $self->{'bitFlag'} |= DEFLATING_COMPRESSION_NORMAL;
    } elsif ($self->desiredCompressionLevel == 8
        || $self->desiredCompressionLevel == 9) {
        $self->{'bitFlag'} |= DEFLATING_COMPRESSION_MAXIMUM;
    }

    if ($Archive::Zip::UNICODE) {
        $self->{'bitFlag'} |= 0x0800;
    }
    $self->{'bitFlag'};
}

sub password {
    my $self = shift;
    $self->{'password'} = shift if @_;
    $self->{'password'};
}

sub compressionMethod {
    shift->{'compressionMethod'};
}

sub desiredCompressionMethod {
    my $self = shift;
    my $newDesiredCompressionMethod =
      (ref($_[0]) eq 'HASH') ? shift->{compressionMethod} : shift;
    my $oldDesiredCompressionMethod = $self->{'desiredCompressionMethod'};
    if (defined($newDesiredCompressionMethod)) {
        $self->{'desiredCompressionMethod'} = $newDesiredCompressionMethod;
        if ($newDesiredCompressionMethod == COMPRESSION_STORED) {
            $self->{'desiredCompressionLevel'} = 0;
            $self->{'bitFlag'} &= ~GPBF_HAS_DATA_DESCRIPTOR_MASK
                if $self->uncompressedSize() == 0;
        } elsif ($oldDesiredCompressionMethod == COMPRESSION_STORED) {
            $self->{'desiredCompressionLevel'} = COMPRESSION_LEVEL_DEFAULT;
        }
    }
    return $oldDesiredCompressionMethod;
}

sub desiredCompressionLevel {
    my $self = shift;
    my $newDesiredCompressionLevel =
      (ref($_[0]) eq 'HASH') ? shift->{compressionLevel} : shift;
    my $oldDesiredCompressionLevel = $self->{'desiredCompressionLevel'};
    if (defined($newDesiredCompressionLevel)) {
        $self->{'desiredCompressionLevel'}  = $newDesiredCompressionLevel;
        $self->{'desiredCompressionMethod'} = (
            $newDesiredCompressionLevel
            ? COMPRESSION_DEFLATED
            : COMPRESSION_STORED
        );
    }
    return $oldDesiredCompressionLevel;
}

sub fileName {
    my $self    = shift;
    my $newName = shift;
    if (defined $newName) {
        $newName =~ y{\\/}{/}s;    # deal with dos/windoze problems
        $self->{'fileName'} = $newName;
    }
    return $self->{'fileName'};
}

sub fileNameAsBytes {
    my $self  = shift;
    my $bytes = $self->{'fileName'};
    if($self->{'bitFlag'} & 0x800){
        $bytes = Encode::encode_utf8($bytes);
    }
    return $bytes;
}

sub lastModFileDateTime {
    my $modTime = shift->{'lastModFileDateTime'};
    $modTime =~ m/^(\d+)$/;           # untaint
    return $1;
}

sub lastModTime {
    my $self = shift;
    return _dosToUnixTime($self->lastModFileDateTime());
}

sub setLastModFileDateTimeFromUnix {
    my $self   = shift;
    my $time_t = shift;
    $self->{'lastModFileDateTime'} = _unixToDosTime($time_t);
}

sub internalFileAttributes {
    shift->{'internalFileAttributes'};
}

sub externalFileAttributes {
    shift->{'externalFileAttributes'};
}

# Convert UNIX permissions into proper value for zip file
# Usable as a function or a method
sub _mapPermissionsFromUnix {
    my $self    = shift;
    my $mode    = shift;
    my $attribs = $mode << 16;

    # Microsoft Windows Explorer needs this bit set for directories
    if ($mode & DIRECTORY_ATTRIB) {
        $attribs |= 16;
    }

    return $attribs;

    # TODO: map more MS-DOS perms
}

# Convert ZIP permissions into Unix ones
#
# This was taken from Info-ZIP group's portable UnZip
# zipfile-extraction program, version 5.50.
# http://www.info-zip.org/pub/infozip/
#
# See the mapattr() function in unix/unix.c
# See the attribute format constants in unzpriv.h
#
# XXX Note that there's one situation that is not implemented
# yet that depends on the "extra field."
sub _mapPermissionsToUnix {
    my $self = shift;

    my $format  = $self->{'fileAttributeFormat'};
    my $attribs = $self->{'externalFileAttributes'};

    my $mode = 0;

    if ($format == FA_AMIGA) {
        $attribs = $attribs >> 17 & 7;                         # Amiga RWE bits
        $mode    = $attribs << 6 | $attribs << 3 | $attribs;
        return $mode;
    }

    if ($format == FA_THEOS) {
        $attribs &= 0xF1FFFFFF;
        if (($attribs & 0xF0000000) != 0x40000000) {
            $attribs &= 0x01FFFFFF;    # not a dir, mask all ftype bits
        } else {
            $attribs &= 0x41FFFFFF;    # leave directory bit as set
        }
    }

    if (   $format == FA_UNIX
        || $format == FA_VAX_VMS
        || $format == FA_ACORN
        || $format == FA_ATARI_ST
        || $format == FA_BEOS
        || $format == FA_QDOS
        || $format == FA_TANDEM) {
        $mode = $attribs >> 16;
        return $mode if $mode != 0 or not $self->localExtraField;

        # warn("local extra field is: ", $self->localExtraField, "\n");

        # XXX This condition is not implemented
        # I'm just including the comments from the info-zip section for now.

        # Some (non-Info-ZIP) implementations of Zip for Unix and
        # VMS (and probably others ??) leave 0 in the upper 16-bit
        # part of the external_file_attributes field. Instead, they
        # store file permission attributes in some extra field.
        # As a work-around, we search for the presence of one of
        # these extra fields and fall back to the MSDOS compatible
        # part of external_file_attributes if one of the known
        # e.f. types has been detected.
        # Later, we might implement extraction of the permission
        # bits from the VMS extra field. But for now, the work-around
        # should be sufficient to provide "readable" extracted files.
        # (For ASI Unix e.f., an experimental remap from the e.f.
        # mode value IS already provided!)
    }

    # PKWARE's PKZip for Unix marks entries as FA_MSDOS, but stores the
    # Unix attributes in the upper 16 bits of the external attributes
    # field, just like Info-ZIP's Zip for Unix.  We try to use that
    # value, after a check for consistency with the MSDOS attribute
    # bits (see below).
    if ($format == FA_MSDOS) {
        $mode = $attribs >> 16;
    }

    # FA_MSDOS, FA_OS2_HPFS, FA_WINDOWS_NTFS, FA_MACINTOSH, FA_TOPS20
    $attribs = !($attribs & 1) << 1 | ($attribs & 0x10) >> 4;

    # keep previous $mode setting when its "owner"
    # part appears to be consistent with DOS attribute flags!
    return $mode if ($mode & 0700) == (0400 | $attribs << 6);
    $mode = 0444 | $attribs << 6 | $attribs << 3 | $attribs;
    return $mode;
}

sub unixFileAttributes {
    my $self     = shift;
    my $oldPerms = $self->_mapPermissionsToUnix;

    my $perms;
    if (@_) {
        $perms = (ref($_[0]) eq 'HASH') ? $_[0]->{attributes} : $_[0];

        if ($self->isDirectory) {
            $perms &= ~FILE_ATTRIB;
            $perms |= DIRECTORY_ATTRIB;
        } else {
            $perms &= ~DIRECTORY_ATTRIB;
            $perms |= FILE_ATTRIB;
        }
        $self->{externalFileAttributes} =
          $self->_mapPermissionsFromUnix($perms);
    }

    return $oldPerms;
}

sub localExtraField {
    my $self = shift;

    if (@_) {
        my $localExtraField =
          (ref($_[0]) eq 'HASH') ? $_[0]->{field} : $_[0];
        my ($status, $zip64) =
          $self->_extractZip64ExtraField($localExtraField, undef, undef);
        if ($status != AZ_OK) {
            return $status;
        }
        elsif ($zip64) {
            return _formatError('invalid extra field (contains zip64 information)');
        }
        else {
            $self->{localExtraField} = $localExtraField;
            return AZ_OK;
        }
    } else {
        return $self->{localExtraField};
    }
}

sub cdExtraField {
    my $self = shift;

    if (@_) {
        my $cdExtraField =
          (ref($_[0]) eq 'HASH') ? $_[0]->{field} : $_[0];
        my ($status, $zip64) =
          $self->_extractZip64ExtraField($cdExtraField, undef, undef);
        if ($status != AZ_OK) {
            return $status;
        }
        elsif ($zip64) {
            return _formatError('invalid extra field (contains zip64 information)');
        }
        else {
            $self->{cdExtraField} = $cdExtraField;
            return AZ_OK;
        }
    } else {
        return $self->{cdExtraField};
    }
}

sub extraFields {
    my $self = shift;
    return $self->localExtraField() . $self->cdExtraField();
}

sub fileComment {
    my $self = shift;

    if (@_) {
        $self->{fileComment} =
          (ref($_[0]) eq 'HASH')
          ? pack('C0a*', $_[0]->{comment})
          : pack('C0a*', $_[0]);
    } else {
        return $self->{fileComment};
    }
}

sub hasDataDescriptor {
    my $self = shift;
    if (@_) {
        my $shouldHave = shift;
        if ($shouldHave) {
            $self->{'bitFlag'} |= GPBF_HAS_DATA_DESCRIPTOR_MASK;
        } else {
            $self->{'bitFlag'} &= ~GPBF_HAS_DATA_DESCRIPTOR_MASK;
        }
    }
    return $self->{'bitFlag'} & GPBF_HAS_DATA_DESCRIPTOR_MASK;
}

sub crc32 {
    shift->{'crc32'};
}

sub crc32String {
    sprintf("%08x", shift->{'crc32'});
}

sub compressedSize {
    shift->{'compressedSize'};
}

sub uncompressedSize {
    shift->{'uncompressedSize'};
}

sub isEncrypted {
    shift->{'bitFlag'} & GPBF_ENCRYPTED_MASK;
}

sub isTextFile {
    my $self = shift;
    my $bit  = $self->internalFileAttributes() & IFA_TEXT_FILE_MASK;
    if (@_) {
        my $flag = (ref($_[0]) eq 'HASH') ? shift->{flag} : shift;
        $self->{'internalFileAttributes'} &= ~IFA_TEXT_FILE_MASK;
        $self->{'internalFileAttributes'} |=
          ($flag ? IFA_TEXT_FILE : IFA_BINARY_FILE);
    }
    return $bit == IFA_TEXT_FILE;
}

sub isBinaryFile {
    my $self = shift;
    my $bit  = $self->internalFileAttributes() & IFA_TEXT_FILE_MASK;
    if (@_) {
        my $flag = shift;
        $self->{'internalFileAttributes'} &= ~IFA_TEXT_FILE_MASK;
        $self->{'internalFileAttributes'} |=
          ($flag ? IFA_BINARY_FILE : IFA_TEXT_FILE);
    }
    return $bit == IFA_BINARY_FILE;
}

sub extractToFileNamed {
    my $self = shift;

    # local FS name
    my $name = (ref($_[0]) eq 'HASH') ? $_[0]->{name} : $_[0];

    # Create directory for regular files as well as for symbolic
    # links
    if ($^O eq 'MSWin32' && $Archive::Zip::UNICODE) {
        $name = decode_utf8(Win32::GetFullPathName($name));
        mkpath_win32($name);
    } else {
        mkpath(dirname($name));    # croaks on error
    }

    # Check if the file / directory is a symbolic link *and* if
    # the operating system supports these.  Only in that case
    # call method extractToFileHandle with the name of the
    # symbolic link.  If the operating system does not support
    # symbolic links, process the member using the usual
    # extraction routines, which creates a file containing the
    # link target.
    if ($self->isSymbolicLink() && OS_SUPPORTS_SYMLINK) {
        return $self->extractToFileHandle($name);
    } else {
        my ($status, $fh);
        if ($^O eq 'MSWin32' && $Archive::Zip::UNICODE) {
            Win32::CreateFile($name);
            ($status, $fh) = _newFileHandle(Win32::GetANSIPathName($name), 'w');
        } else {
            ($status, $fh) = _newFileHandle($name, 'w');
        }
        return _ioError("Can't open file $name for write") unless $status;
        $status = $self->extractToFileHandle($fh);
        $fh->close();
        chmod($self->unixFileAttributes(), $name)
          or return _error("Can't chmod() ${name}: $!");
        utime($self->lastModTime(), $self->lastModTime(), $name);
        return $status;
    }
}

sub mkpath_win32 {
    my $path = shift;
    use File::Spec;

    my ($volume, @path) = File::Spec->splitdir($path);
    $path = File::Spec->catfile($volume, shift @path);
    pop @path;
    while (@path) {
        $path = File::Spec->catfile($path, shift @path);
        Win32::CreateDirectory($path);
    }
}

sub isSymbolicLink {
    return shift->{'externalFileAttributes'} == 0xA1FF0000;
}

sub isDirectory {
    return 0;
}

sub externalFileName {
    return undef;
}

# Search the given extra field string for a zip64 extended
# information extra field and "correct" the header fields given
# in the remaining parameters with the information from that
# extra field, if required.  Writes back the extra field string
# sans the zip64 information.  The extra field string and all
# header fields must be passed as lvalues or the undefined value.
#
# This method returns a pair ($status, $zip64) in list context,
# where the latter flag specifies whether a zip64 extended
# information extra field was found.
#
# This method must be called with two header fields for local
# file headers and with four header fields for Central Directory
# headers.
sub _extractZip64ExtraField
{
    my $classOrSelf = shift;

    my $extraField = $_[0];

    my ($zip64Data, $newExtraField) = (undef, '');
    while (length($extraField) >= 4) {
        my ($headerId, $dataSize) = unpack('v v', $extraField);
        if (length($extraField) < 4 + $dataSize) {
            return _formatError('invalid extra field (bad data)');
        }
        elsif ($headerId != 0x0001) {
            $newExtraField .= substr($extraField, 0, 4 + $dataSize);
            $extraField     = substr($extraField, 4 + $dataSize);
        }
        else {
            $zip64Data      = substr($extraField, 4, $dataSize);
            $extraField     = substr($extraField, 4 + $dataSize);
        }
    }
    if (length($extraField) != 0) {
        return _formatError('invalid extra field (bad header ID or data size)');
    }

    my $zip64 = 0;
    if (defined($zip64Data)) {
        return _zip64NotSupported() unless ZIP64_SUPPORTED;

        my $dataLength = length($zip64Data);

        # Try to be tolerant with respect to the fields to be
        # extracted from the zip64 extended information extra
        # field and derive that information from the data itself,
        # if possible.  This works around, for example, incorrect
        # extra fields written by certain versions of package
        # IO::Compress::Zip.  That package provides the disk
        # number start in the extra field without setting the
        # corresponding regular field to 0xffff.  Plus it
        # provides the full set of fields even for the local file
        # header.
        #
        # Field zero is the extra field string which we must keep
        # in @_ for future modification, so account for that.
        my @fields;
        if (@_ == 3 && $dataLength == 16) {
            @fields = (undef, 0xffffffff, 0xffffffff);
        }
        elsif (@_ == 3 && $dataLength == 24) {
            push(@_, undef);
            @fields = (undef, 0xffffffff, 0xffffffff, 0xffffffff);
        }
        elsif (@_ == 3 && $dataLength == 28) {
            push(@_, undef, undef);
            @fields = (undef, 0xffffffff, 0xffffffff, 0xffffffff, 0xffff);
        }
        elsif (@_ == 5 && $dataLength == 24) {
            @fields = (undef, 0xffffffff, 0xffffffff, 0xffffffff);
        }
        elsif (@_ == 5 && $dataLength == 28) {
            @fields = (undef, 0xffffffff, 0xffffffff, 0xffffffff, 0xffff);
        }
        else {
            @fields = map { defined $_ ? $_ : 0 } @_;
        }

        my @fieldIndexes  = (0);
        my $fieldFormat   = '';
        my $expDataLength = 0;
        if ($fields[1] == 0xffffffff) {
            push(@fieldIndexes, 1);
            $fieldFormat .= 'Q< ';
            $expDataLength += 8;
        }
        if ($fields[2] == 0xffffffff) {
            push(@fieldIndexes, 2);
            $fieldFormat .= 'Q< ';
            $expDataLength += 8;
        }
