diagnostic messages, see L<perldiag>.

=head2 Changes to Existing Diagnostics

=over 4

=item *

As noted under L<Incompatible Changes> above, the deprecation warning
"Unescaped left brace in regex is deprecated here (and will be fatal in Perl
5.30), passed through in regex; marked by S<<-- HERE> in m/%s/" has been
changed to the non-deprecation warning "Unescaped left brace in regex is passed
through in regex; marked by S<<-- HERE> in m/%s/".

=item *

Specifying C<\o{}> without anything between the braces now yields the
fatal error message "Empty \o{}".  Previously it was  "Number with no
digits".  This means the same wording is used for this kind of error as
with similar constructs such as C<\p{}>.

=item *

Within the scope of the experimental feature C<use re 'strict'>,
specifying C<\x{}> without anything between the braces now yields the
fatal error message "Empty \x{}".  Previously it was  "Number with no
digits".  This means the same wording is used for this kind of error as
with similar constructs such as C<\p{}>.  It is legal, though not wise
to have an empty C<\x> outside of C<re 'strict'>; it silently generates
a NUL character.

=item *

L<Type of arg %d to %s must be %s (not %s)|perldiag/"Type of arg %d to %s must be %s (not %s)">

Attempts to push, pop, etc on a hash or glob now produce this message
rather than complaining that they no longer work on scalars.
L<[GH #15774]|https://github.com/Perl/perl5/issues/15774>.

=item *

L<Prototype not terminated|perldiag/"Prototype not terminated">

The file and line number is now reported for this error.
L<[GH #16697]|https://github.com/Perl/perl5/issues/16697>

=item *

Under C<< -Dr >> (or C<< use re 'Debug' >>) the compiled regex engine
program is displayed. It used to use two different spellings for I<<
infinity >>,
C<< INFINITY >>, and C<< INFTY >>. It now uses the latter exclusively,
as that spelling has been around the longest.

=back

=head1 Utility Changes

=head2 L<xsubpp>

=over 4

=item *

The generated prototype (with C<< PROTOTYPES: ENABLE >>) would include
C<< OUTLIST >> parameters, but these aren't arguments to the perl function.
This has been rectified.
L<[GH #16746]|https://github.com/Perl/perl5/issues/16746>.

=back

=head1 Configuration and Compilation

=over 4

=item *

Normally the thread-safe locale functions are used only on threaded
builds.  It is now possible to force their use on unthreaded builds on
systems that have them available, by including the
C<-Accflags='-DUSE_THREAD_SAFE_LOCALE'> option to F<Configure>.

=item *

Improve detection of memrchr, strlcat, and strlcpy

=item *

Improve Configure detection of memmem().
L<[GH #16807]|https://github.com/Perl/perl5/issues/16807>.

=item *

Multiple improvements and fixes for -DPERL_GLOBAL_STRUCT build option.

=item *

Fix -DPERL_GLOBAL_STRUCT_PRIVATE build option.

=back

=head1 Testing

=over 4

=item *

F<t/lib/croak/op>
L<[GH #15774]|https://github.com/Perl/perl5/issues/15774>.

separate error for C<push>, etc. on hash/glob.

=item *

F<t/op/svleak.t>
L<[GH #16749]|https://github.com/Perl/perl5/issues/16749>.

Add test for C<goto &sub> in overload leaking.

=item *

Split F<t/re/fold_grind.t> into multiple test files.

=item *

Fix intermittent tests which failed due to race conditions which
surface during parallel testing.
L<[GH #16795]|https://github.com/Perl/perl5/issues/16795>.

=item *

Thoroughly test paragraph mode, using a new test file,
F<t/io/paragraph_mode.t>.
L<[GH #16787]|https://github.com/Perl/perl5/issues/16787>.

=item *

Some tests in F<< t/io/eintr.t >> caused the process to hang on
pre-16 Darwin. These tests are skipped for those version of Darwin.

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item HP-UX 11.11

An obscure problem in C<pack()> when compiling with HP C-ANSI-C has been fixed
by disabling optimizations in F<pp_pack.c>.

=item Mac OS X

Perl's build and testing process on Mac OS X for C<-Duseshrplib>
builds is now compatible with Mac OS X System Integrity Protection
(SIP).

SIP prevents binaries in F</bin> (and a few other places) being passed
the C<DYLD_LIBRARY_PATH> environment variable.  For our purposes this
prevents C<DYLD_LIBRARY_PATH> from being passed to the shell, which
prevents that variable being passed to the testing or build process,
so running C<perl> couldn't find F<libperl.dylib>.

To work around that, the initial build of the F<perl> executable
expects to find F<libperl.dylib> in the build directory, and the
library path is then adjusted during installation to point to the
installed library.

L<[GH #15057]|https://github.com/Perl/perl5/issues/15057>.

=item Minix3

Some support for Minix3 has been re-added.

=item Cygwin

Cygwin doesn't make C<< cuserid >> visible.

=item Win32 Mingw

C99 math functions are now available.

=item Windows

=over 4

=item *

The C<USE_CPLUSPLUS> build option which has long been available in
F<win32/Makefile> (for B<nmake>) and F<win32/makefile.mk> (for B<dmake>) is now
also available in F<win32/GNUmakefile> (for B<gmake>).

=item *

The B<nmake> makefile no longer defaults to Visual C++ 6.0 (a very old version
which is unlikely to be widely used today).  As a result, it is now a
requirement to specify the C<CCTYPE> since there is no obvious choice of which
modern version to default to instead.  Failure to specify C<CCTYPE> will result
in an error being output and the build will stop.

(The B<dmake> and B<gmake> makefiles will automatically detect which compiler
is being used, so do not require C<CCTYPE> to be set.  This feature has not yet
been added to the B<nmake> makefile.)

=item *

C<sleep()> with warnings enabled for a C<USE_IMP_SYS> build no longer
warns about the sleep timeout being too large.
L<[GH #16631]|https://github.com/Perl/perl5/issues/16631>.

=item *

Support for compiling perl on Windows using Microsoft Visual Studio 2019
(containing Visual C++ 14.2) has been added.

=item *

socket() now sets C<$!> if the protocol, address family and socket
type combination is not found.
L<[GH #16849]|https://github.com/Perl/perl5/issues/16849>.

=item *

The Windows Server 2003 SP1 Platform SDK build, with its early x64 compiler and
tools, was accidentally broken in Perl 5.27.9.  This has now been fixed.

=back

=back

=head1 Internal Changes

=over 4

=item *

The sizing pass has been eliminated from the regular expression
compiler.  An extra pass may instead be needed in some cases to count
the number of parenthetical capture groups.

=item *

A new function L<perlapi/C<my_strtod>> or its synonym, Strtod(), is
now available with the same signature as the libc strtod().  It provides
strotod() equivalent behavior on all platforms, using the best available
precision, depending on platform capabilities and F<Configure> options,
while handling locale-related issues, such as if the radix character
should be a dot or comma.

=item *

Added C<newSVsv_nomg()> to copy a SV without processing get magic on
the source.
L<[GH #16461]|https://github.com/Perl/perl5/issues/16461>.

=item *

It is now forbidden to malloc more than C<PTRDIFF_T_MAX> bytes.  Much
code (including C optimizers) assumes that all data structures will not
be larger than this, so this catches such attempts before overflow
happens.

=item *

Two new regnodes have been introduced C<< EXACT_ONLY8 >>, and
C<< EXACTFU_ONLY8 >>. They're equivalent to C<< EXACT >> and C<< EXACTFU >>,
except that they contain a code point which requires UTF-8 to
represent/match. Hence, if the target string isn't UTF-8, we know
it can't possibly match, without needing to try.

=item *

C<< print_bytes_for_locale() >> is now defined if C<< DEBUGGING >>,
Prior, it didn't get defined unless C<< LC_COLLATE >> was defined
on the platform.

=back

=head1 Selected Bug Fixes

=over 4

=item *

Compilation under C<-DPERL_MEM_LOG> and C<-DNO_LOCALE> have been fixed.

=item *

Perl 5.28 introduced an C<index()> optimization when comparing to -1 (or
indirectly, e.g. >= 0).  When this optimization was triggered inside a C<when>
clause it caused a warning ("Argument %s isn't numeric in smart match").  This
has now been fixed.
L<[GH #16626]|https://github.com/Perl/perl5/issues/16626>

=item *

The new in-place editing code no longer leaks directory handles.
L<[GH #16602]|https://github.com/Perl/perl5/issues/16602>.

=item *

Warnings produced from constant folding operations on overloaded
values no longer produce spurious "Use of uninitialized value"
warnings.
L<[GH #16349]|https://github.com/Perl/perl5/issues/16349>.

=item *

Fix for "mutator not seen in (lex = ...) .= ..."
L<[GH #16655]|https://github.com/Perl/perl5/issues/16655>.

=item *

C<pack "u", "invalid uuencoding"> now properly NUL terminates the
zero-length SV produced.
L<[GH #16343]|https://github.com/Perl/perl5/issues/16343>.

=item *

Improve the debugging output for calloc() calls with C<-Dm>.
L<[GH #16653]|https://github.com/Perl/perl5/issues/16653>.

=item *

Regexp script runs were failing to permit ASCII digits in some cases.
L<[GH #16704]|https://github.com/Perl/perl5/issues/16704>.

=item *

On Unix-like systems supporting a platform-specific technique for
determining L<< C<$^X>|perlvar/$^X >>, Perl failed to fall back to the
generic technique when the platform-specific one fails (for example, a Linux
system with /proc not mounted).  This was a regression in Perl 5.28.0.
L<[GH #16715]|https://github.com/Perl/perl5/issues/16715>.

=item *

L<SDBM_File> is now more robust with corrupt database files.  The
improvements do not make SDBM files suitable as an interchange format.
L<[GH #16164]|https://github.com/Perl/perl5/issues/16164>.

=item *

C<binmode($fh);> or C<binmode($fh, ':raw');> now properly removes the
C<:utf8> flag from the default C<:crlf> I/O layer on Win32.
L<[GH #16730]|https://github.com/Perl/perl5/issues/16730>.

=item *

The experimental reference aliasing feature was misinterpreting array and
hash slice assignment as being localised, e.g.

    \(@a[3,5,7]) = \(....);

was being interpreted as:

    local \(@a[3,5,7]) = \(....);

L<[GH #16701]|https://github.com/Perl/perl5/issues/16701>.

=item *

C<sort SUBNAME> within an C<eval EXPR> when C<EXPR> was UTF-8 upgraded
could panic if the C<SUBNAME> was non-ASCII.
L<[GH #16979]|https://github.com/Perl/perl5/issues/16979>.

=item *

Correctly handle realloc() modifying C<errno> on success so that the
modification isn't visible to the perl user, since realloc() is called
implicitly by the interpreter.  This modification is permitted by the
C standard, but has only been observed on FreeBSD 13.0-CURRENT.
L<[GH #16907]|https://github.com/Perl/perl5/issues/16907>.

=item *

Perl now exposes POSIX C<getcwd> as C<Internals::getcwd()> if
available.  This is intended for use by C<Cwd.pm> during bootstrapping
and may be removed or changed without notice.  This fixes some
bootstrapping issues while building perl in a directory where some
ancestor directory isn't readable.
L<[GH #16903]|https://github.com/Perl/perl5/issues/16903>.

=item *

C<pack()> no longer can return malformed UTF-8.  It croaks if it would
otherwise return a UTF-8 string that contains malformed UTF-8.  This
protects against potential security threats.
L<[GH #16035]|https://github.com/Perl/perl5/issues/16035>.

=item *

See L</Any set of digits in the Common script are legal in a script run
of another script>.

=item *

Regular expression matching no longer leaves stale UTF-8 length magic
when updating C<$^R>. This could result in C<length($^R)> returning
an incorrect value.

=item *

Reduce recursion on ops
L<[GH #11866]|https://github.com/Perl/perl5/issues/11866>.

This can prevent stack overflow when processing extremely deep op
trees.

=item *

Avoid leak in multiconcat with overloading.
L<[GH #16823]|https://github.com/Perl/perl5/issues/16823>.

=item *

The handling of user-defined C<\p{}> properties (see
L<perlunicode/User-Defined Character Properties>) has been rewritten to
be in C (instead of Perl).  This speeds things up, but in the process
several inconsistencies and bug fixes are made.

=over 4

=item 1

A few error messages have minor wording changes.  This is essentially
because the new way is integrated into the regex error handling
mechanism that marks the position in the input at which the error
occurred.  That was not possible previously.  The messages now also
contain additional back-trace-like information in case the error occurs
deep in nested calls.

=item 2

A user-defined property is implemented as a perl subroutine with certain
highly constrained naming conventions.  It was documented previously
that the sub would be in the current package if the package was
unspecified.  This turned out not to be true in all cases, but now it
is.

=item 3

All recursive calls are treated as infinite recursion.  Previously they
would cause the interpreter to panic.  Now, they cause the regex pattern
to fail to compile.

=item 4

Similarly, any other error likely would lead to a panic; now to just the
pattern failing to compile.

=item 5

The old mechanism did not detect illegal ranges in the definition of the
property.  Now, the range max must not be smaller than the range min.
Otherwise, the pattern fails to compile.

=item 6

The intention was to have each sub called only once during the lifetime
of the program, so that a property's definition is immutable.  This was
relaxed so that it could be called once for all /i compilations, and
potentially a second time for non-/i (the sub is passed a parameter
indicating which).  However, in practice there were instances when this
was broken, and multiple calls were possible.  Those have been fixed.
Now (besides the /i,non-/i cases) the only way a sub can be called
multiple times is if some component of it has not been defined yet.  For
example, suppose we have sub IsA() whose definition is known at compile
time, and it in turn calls isB() whose definition is not yet known.
isA() will be called each time a pattern it appears in is compiled.  If
isA() also calls isC() and that definition is known, isC() will be
called just once.

=item 7

There were some races and very long hangs should one thread be compiling
the same property as another simultaneously.  These have now been fixed.

=back

=item *

Fixed a failure to match properly.

An EXACTFish regnode has a finite length it can hold for the string
being matched.  If that length is exceeded, a second node is used for
the next segment of the string, for as many regnodes as are needed.
Care has to be taken where to break the string, in order to deal
multi-character folds in Unicode correctly. If we want to break a
string at a place which could potentially be in the middle of a
multi-character fold, we back off one (or more) characters, leaving
a shorter EXACTFish regnode. This backing off mechanism contained
an off-by-one error.
L<[GH #16806]|https://github.com/Perl/perl5/issues/16806>.

=item *

A bare C<eof> call with no previous file handle now returns true.
L<[GH #16786]|https://github.com/Perl/perl5/issues/16786>

=item *

Failing to compile a format now aborts compilation.  Like other errors
in sub-parses this could leave the parser in a strange state, possibly
crashing perl if compilation continued.
L<[GH #16169]|https://github.com/Perl/perl5/issues/16169>

=item *

If an in-place edit is still in progress during global destruction and
the process exit code (as stored in C<$?>) is zero, perl will now
treat the in-place edit as successful, replacing the input file with
any output produced.

This allows code like:

  perl -i -ne 'print "Foo"; last'

to replace the input file, while code like:

  perl -i -ne 'print "Foo"; die'

will not.  Partly resolves
L<[GH #16748]|https://github.com/Perl/perl5/issues/16748>.

=item *

A regression in 5.28 caused the following code to fail

 close(STDIN); open(CHILD, "|wc -l")'

because the child's stdin would be closed on exec. This has now been fixed.

=item *

Fixed an issue where compiling a regexp containing both compile-time
and run-time code blocks could lead to trying to compile something
which is invalid syntax.

=item *

Fixed build failures with C<< -DNO_LOCALE_NUMERIC >> and
C<< -DNO_LOCALE_COLLATE >>.
L<[GH #16771]|https://github.com/Perl/perl5/issues/16771>.

=item *

Prevent the tests in F<< ext/B/t/strict.t >> from being skipped.
L<[GH #16783]|https://github.com/Perl/perl5/issues/16783>.

=item *

C<< /di >> nodes ending or beginning in I<s> are now C<< EXACTF >>. We do not
want two C<< EXACTFU >> to be joined together during optimization,
and to form a C<< ss >>, C<< sS >>, C<< Ss >> or C<< SS >> sequence;
they are the only multi-character sequences which may match differently
under C<< /ui >> and C<< /di >>.

=back

=head1 Acknowledgements

Perl 5.30.0 represents approximately 11 months of development since Perl
5.28.0 and contains approximately 620,000 lines of changes across 1,300
files from 58 authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 510,000 lines of changes to 750 .pm, .t, .c and .h files.

Perl continues to flourish into its fourth decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.30.0:

Aaron Crane, Abigail, Alberto Simões, Alexandr Savca, Andreas König, Andy
Dougherty, Aristotle Pagaltzis, Brian Greenfield, Chad Granum, Chris
'BinGOs' Williams, Craig A. Berry, Dagfinn Ilmari Mannsåker, Dan Book, Dan
Dedrick, Daniel Dragan, Dan Kogai, David Cantrell, David Mitchell, Dominic
Hargreaves, E. Choroba, Ed J, Eugen Konkov, François Perrad, Graham Knop,
Hauke D, H.Merijn Brand, Hugo van der Sanden, Jakub Wilk, James Clarke,
James E Keenan, Jerry D. Hedden, Jim Cromie, John SJ Anderson, Karen
Etheridge, Karl Williamson, Leon Timmermans, Matthias Bethke, Nicholas
Clark, Nicolas R., Niko Tyni, Pali, Petr Písař, Phil Pearl (Lobbes),
Richard Leach, Ryan Voots, Sawyer X, Shlomi Fish, Sisyphus, Slaven Rezic,
Steve Hay, Sullivan Beck, Tina Müller, Tomasz Konojacki, Tom Wyant, Tony
Cook, Unicode Consortium, Yves Orton, Zak B. Elep.

The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not include
the names of most of the (very much appreciated) contributors who reported
issues to the Perl bug tracker. Noteworthy in this release were the large
number of bug fixes made possible by Sergey Aleynikov's high quality perlbug
reports for issues he discovered by fuzzing with AFL.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please
see the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://rt.perl.org/>.  There may also be information at
L<http://www.perl.org/>, the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        usr/local/lib/perl5/5.40.0/pod/perl5301delta.pod                                                    0000644 0000000 0000000 00000013142 14714567415 017262  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =encoding utf8

=head1 NAME

perl5301delta - what is new for perl v5.30.1

=head1 DESCRIPTION

This document describes differences between the 5.30.0 release and the 5.30.1
release.

If you are upgrading from an earlier release such as 5.28.0, first read
L<perl5300delta>, which describes differences between 5.28.0 and 5.30.0.

=head1 Incompatible Changes

There are no changes intentionally incompatible with 5.30.1.  If any exist,
they are bugs, and we request that you submit a report.  See
L</Reporting Bugs> below.

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

=over 4

=item *

L<Module::CoreList> has been upgraded from version 5.20190522 to 5.20191110.

=back

=head1 Documentation

=head2 Changes to Existing Documentation

We have attempted to update the documentation to reflect the changes listed in
this document.  If you find any we have missed, send email to
L<perlbug@perl.org|mailto:perlbug@perl.org>.

Additionally, documentation has been updated to reference GitHub as the new
canonical repository and to describe the new GitHub pull request workflow.

=head1 Configuration and Compilation

=over 4

=item *

The C<ECHO> macro is now defined.  This is used in a C<dtrace> rule that was
originally changed for FreeBSD, and the FreeBSD make apparently predefines it.
The Solaris make does not predefine C<ECHO> which broke this rule on Solaris.
L<[perl #17057]|https://github.com/perl/perl5/issues/17057>

=back

=head1 Testing

Tests were added and changed to reflect the other additions and changes in this
release.

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item Win32

The locale tests could crash on Win32 due to a Windows bug, and separately due
to the CRT throwing an exception if the locale name wasn't validly encoded in
the current code page.

For the second we now decode the locale name ourselves, and always decode it as
UTF-8.

L<[perl #16922]|https://github.com/perl/perl5/issues/16922>

=back

=head1 Selected Bug Fixes

=over 4

=item *

Setting C<$)> now properly sets supplementary group ids, if you have the
necessary privileges.
L<[perl #17031]|https://github.com/perl/perl5/issues/17031>

=item *

C<readline @foo> now evaluates C<@foo> in scalar context.  Previously, it would
be evaluated in list context, and since readline() pops only one argument from
the stack, the stack could underflow, or be left with unexpected values on it.
L<[perl #16929]|https://github.com/perl/perl5/issues/16929>

=item *

sv_gets() now recovers better if the target SV is modified by a signal handler.
L<[perl #16960]|https://github.com/perl/perl5/issues/16960>

=item *

Matching a non-C<SVf_UTF8> string against a regular expression containing
Unicode literals could leak an SV on each match attempt.
L<[perl #17140]|https://github.com/perl/perl5/issues/17140>

=item *

C<< sprintf("%.*a", -10000, $x) >> would cause a buffer overflow due to
mishandling of the negative precision value.
L<[perl #16942]|https://github.com/perl/perl5/issues/16942>

=item *

C<scalar()> on a reference could cause an erroneous assertion failure during
compilation.
L<[perl #16969]|https://github.com/perl/perl5/issues/16969>

=back

=head1 Acknowledgements

Perl 5.30.1 represents approximately 6 months of development since Perl 5.30.0
and contains approximately 4,700 lines of changes across 67 files from 14
authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 910 lines of changes to 20 .pm, .t, .c and .h files.

Perl continues to flourish into its fourth decade thanks to a vibrant community
of users and developers.  The following people are known to have contributed
the improvements that became Perl 5.30.1:

Chris 'BinGOs' Williams, Dan Book, David Mitchell, Hugo van der Sanden, James E
Keenan, Karen Etheridge, Karl Williamson, Manuel Mausz, Max Maischein, Nicolas
R., Sawyer X, Steve Hay, Tom Hukins, Tony Cook.

The list above is almost certainly incomplete as it is automatically generated
from version control history.  In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core.  We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database at
L<https://rt.perl.org/>.  There may also be information at
L<http://www.perl.org/>, the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION> for details of how to
report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5, you
can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                              usr/local/lib/perl5/5.40.0/pod/perl5302delta.pod                                                    0000644 0000000 0000000 00000011112 14714567415 017256  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =encoding utf8

=head1 NAME

perl5302delta - what is new for perl v5.30.2

=head1 DESCRIPTION

This document describes differences between the 5.30.1 release and the 5.30.2
release.

If you are upgrading from an earlier release such as 5.30.0, first read
L<perl5301delta>, which describes differences between 5.30.0 and 5.30.1.

=head1 Incompatible Changes

There are no changes intentionally incompatible with 5.30.0.  If any exist,
they are bugs, and we request that you submit a report.  See L</Reporting Bugs>
below.

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

=over 4

=item *

L<Compress::Raw::Bzip2> has been upgraded from version 2.084 to 2.089.

=item *

L<Module::CoreList> has been upgraded from version 5.20191110 to 5.20200314.

=back

=head1 Documentation

=head2 Changes to Existing Documentation

We have attempted to update the documentation to reflect the changes
listed in this document.  If you find any we have missed, send email
to L<https://github.com/Perl/perl5/issues>.

=head1 Configuration and Compilation

=over 4

=item *

GCC 10 is now supported by F<Configure>.

=back

=head1 Testing

Tests were added and changed to reflect the other additions and changes in this
release.

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item Windows

The MYMALLOC (PERL_MALLOC) build on Windows has been fixed.

=back

=head1 Selected Bug Fixes

=over 4

=item *

printf() or sprintf() with the C<%n> format no longer cause a panic on
debugging builds, or report an incorrectly cached length value when producing
C<SVfUTF8> flagged strings.

[L<GH #17221|https://github.com/Perl/perl5/issues/17221>]

=item *

A memory leak in regular expression patterns has been fixed.

[L<GH #17218|https://github.com/Perl/perl5/issues/17218>]

=item *

A read beyond buffer in grok_infnan has been fixed.

[L<GH #17370|https://github.com/Perl/perl5/issues/17370>]

=item *

An assertion failure in the regular expression engine has been fixed.

[L<GH #17372|https://github.com/Perl/perl5/issues/17372>]

=item *

C<(?{...})> eval groups in regular expressions no longer unintentionally
trigger "EVAL without pos change exceeded limit in regex".

[L<GH #17490|https://github.com/Perl/perl5/issues/17490>]

=back

=head1 Acknowledgements

Perl 5.30.2 represents approximately 4 months of development since Perl 5.30.1
and contains approximately 2,100 lines of changes across 110 files from 15
authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 920 lines of changes to 30 .pm, .t, .c and .h files.

Perl continues to flourish into its fourth decade thanks to a vibrant community
of users and developers.  The following people are known to have contributed
the improvements that became Perl 5.30.2:

Chris 'BinGOs' Williams, Dan Book, David Mitchell, Hugo van der Sanden, Karen
Etheridge, Karl Williamson, Matthew Horsfall, Nicolas R., Petr Písař, Renee
Baecker, Sawyer X, Steve Hay, Tomasz Konojacki, Tony Cook, Yves Orton.

The list above is almost certainly incomplete as it is automatically generated
from version control history.  In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core.  We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database at
L<https://rt.perl.org/>.  There may also be information at
L<http://www.perl.org/>, the Perl Home Page.

If you believe you have an unreported bug, please open an issue at
L<https://github.com/Perl/perl5/issues>.  Be sure to trim your bug down to a
tiny but sufficient test case.

If the bug you are reporting has security implications which make it
inappropriate to send to a public issue tracker, then see L<perlsec/SECURITY
VULNERABILITY CONTACT INFORMATION> for details of how to report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

