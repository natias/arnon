	SV **svp;
	mode = OCI_DEFAULT;
	DBD_ATTRIB_GET_IV(attribs, "ora_mode", 8, svp, mode);
	admhp = (OCIAdmin*)0;
	OCIDBShutdown_log_stat(imp_dbh, imp_dbh->svchp, imp_dbh->errhp, admhp, mode, status);
	if (status != OCI_SUCCESS) {
		oci_error(dbh, imp_dbh->errhp, status, "OCIDBShutdown");
		ST(0) = &PL_sv_undef;
	}
	else {
		ST(0) = &PL_sv_yes;
	}
#else
	croak("OCIDBShutdown not available");
#endif
#line 1959 "Oracle.c"
    }
    XSRETURN(1);
}


XS_EUPXS(XS_DBD__Oracle__db_ora_can_taf); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle__db_ora_can_taf)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "dbh");
    {
	SV *	dbh = ST(0)
;
#line 379 "Oracle.xs"
	D_imp_dbh(dbh);
	sword status;
	ub4 can_taf = 0;
#line 1978 "Oracle.c"
#line 383 "Oracle.xs"
#ifdef OCI_ATTR_TAF_ENABLED
	OCIAttrGet_log_stat(imp_dbh, imp_dbh->srvhp, OCI_HTYPE_SERVER, &can_taf, NULL,
				OCI_ATTR_TAF_ENABLED, imp_dbh->errhp, status);
	if (status != OCI_SUCCESS) {
# else
    if ( 1 ) {
# endif
		oci_error(dbh, imp_dbh->errhp, status, "OCIAttrGet OCI_ATTR_TAF_ENABLED");
		XSRETURN_IV(0);
	}
	else {
		XSRETURN_IV(can_taf);
	}
#line 1993 "Oracle.c"
    }
    XSRETURN_EMPTY;
}


XS_EUPXS(XS_DBD__Oracle__db_ora_ping); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle__db_ora_ping)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "dbh");
    {
	SV *	dbh = ST(0)
;
#line 401 "Oracle.xs"
	D_imp_dbh(dbh);
	sword status;
#if defined(ORA_OCI_102)
	ub4 vernum;
#endif
 	text buf[2];
#line 2015 "Oracle.c"
#line 408 "Oracle.xs"
	/*when OCIPing not available,*/
	/*simply does a call to OCIServerVersion which should make 1 round trip*/
	/*later I will replace this with the actual OCIPing command*/
	/*This will work if the DB goes down, */
	/*If the listener goes down it is another case as the Listener is needed to establish the connection not maintain it*/
	/*so we should stay connected but we cannot get nay new connections*/
	{
        /* RT 69059 - despite OCIPing being introduced in 10.2
         * it is not available in all versions of 10.2 for AIX
         * e.g., 10.2.0.4 does not have it and 10.2.0.5 does
         * see http://comments.gmane.org/gmane.comp.lang.perl.modules.dbi.general/16206
         * We don't do versions to that accuracy so for AIX you have
         * to wait until 11.2 for OCIPing.
         *
         * Further comments on dbi-dev
         * "DBD::Oracle RTs a summary and request for help" suggested it
         * was Oracle bug 5759845 and fixes in 10.2.0.2.
         */
#if !defined(ORA_OCI_102) || (defined(_AIX) && !defined(ORA_OCI_112))
	OCIServerVersion_log_stat(imp_dbh, imp_dbh->svchp,imp_dbh->errhp,buf,2,OCI_HTYPE_SVCCTX,status);
#else
	vernum = ora_db_version(dbh,imp_dbh);
	/* OCIPing causes server failures if called against server ver < 10.2 */
	if (((int)((vernum>>24) & 0xFF) < 10 ) || (((int)((vernum>>24) & 0xFF) == 10 ) && ((int)((vernum>>20) & 0x0F) < 2 ))){
		OCIServerVersion_log_stat(imp_dbh, imp_dbh->svchp,imp_dbh->errhp,buf,2,OCI_HTYPE_SVCCTX,status);
	} else {
    	OCIPing_log_stat(imp_dbh, imp_dbh->svchp,imp_dbh->errhp,status);
	}
#endif
	if (status != OCI_SUCCESS){
		XSRETURN_IV(0);
	} else {
		XSRETURN_IV(1);
	}
}
#line 2052 "Oracle.c"
    }
    XSRETURN_EMPTY;
}


XS_EUPXS(XS_DBD__Oracle__db_reauthenticate); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle__db_reauthenticate)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "dbh, usv, psv");
    {
	SV *	dbh = ST(0)
;
	SV *	usv = ST(1)
;
	SV *	psv = ST(2)
;
#line 451 "Oracle.xs"
    STRLEN ulen, plen;
    char * uid, * pwd;
	D_imp_dbh(dbh);

    uid = (char*)SvPV(usv, ulen);
    pwd = (char*)SvPV(psv, plen);
    if(plen == 0 && ulen != 0)
    {
        char * b = strchr(uid, '/');
        if(b != NULL && b != uid)
        {
            size_t off = b - uid;
            SV * tmp = sv_mortalcopy(usv);
            uid = (char *)SvPV(tmp, ulen);
            uid[off] = 0;
            pwd = uid + off + 1;
        }
    }
	ST(0) = ora_db_reauthenticate(dbh, imp_dbh, uid, pwd) ? &PL_sv_yes : &PL_sv_no;
#line 2091 "Oracle.c"
    }
    XSRETURN(1);
}


XS_EUPXS(XS_DBD__Oracle__db_ora_lob_write); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle__db_ora_lob_write)
{
    dVAR; dXSARGS;
    if (items != 4)
       croak_xs_usage(cv,  "dbh, locator, offset, data");
    {
	SV *	dbh = ST(0)
;
	OCILobLocator *	locator;
	UV	offset = (UV)SvUV(ST(2))
;
	SV *	data = ST(3)
;
#line 478 "Oracle.xs"
	D_imp_dbh(dbh);
	ub4 amtp;
	STRLEN data_len; /* bytes not chars */
	dvoid *bufp;
	sword status;
	ub2 csid;
	ub1 csform;
#line 2119 "Oracle.c"

	if (SvROK(ST(1)) && sv_derived_from(ST(1), "OCILobLocatorPtr")) {
	    IV tmp = SvIV((SV*)SvRV(ST(1)));
	    locator = INT2PTR(OCILobLocator *,tmp);
	}
	else {
		const char* refstr = SvROK(ST(1)) ? "" : SvOK(ST(1)) ? "scalar " : "undef";
	    Perl_croak_nocontext("%s: Expected %s to be of type %s; got %s%" SVf " instead",
			"DBD::Oracle::db::ora_lob_write",
			"locator", "OCILobLocatorPtr",
			refstr, ST(1)
		);
	}
;
#line 486 "Oracle.xs"
	csid = 0;
	csform = SQLCS_IMPLICIT;
	bufp = SvPV(data, data_len);
	amtp = data_len;
	/* if locator is CLOB and data is UTF8 and not in bytes pragma */
	/* if (0 && SvUTF8(data) && !IN_BYTES) { amtp = sv_len_utf8(data); }  */
	/* added by lab: */
	/* LAB do something about length here? see above comment */
	 OCILobCharSetForm_log_stat(imp_dbh, imp_dbh->envhp, imp_dbh->errhp, locator, &csform, status );
	if (status != OCI_SUCCESS) {
		oci_error(dbh, imp_dbh->errhp, status, "OCILobCharSetForm");
	ST(0) = &PL_sv_undef;
		return;
	}
#ifdef OCI_ATTR_CHARSET_ID
	/* Effectively only used so AL32UTF8 works properly */
	OCILobCharSetId_log_stat(imp_dbh,
                             imp_dbh->envhp,
                             imp_dbh->errhp,
                             locator,
                             &csid,
                             status );
	if (status != OCI_SUCCESS) {
		oci_error(dbh, imp_dbh->errhp, status, "OCILobCharSetId");
	ST(0) = &PL_sv_undef;
		return;
	}
#endif /* OCI_ATTR_CHARSET_ID */
	/* if data is utf8 but charset isn't then switch to utf8 csid */
	csid = (SvUTF8(data) && !CS_IS_UTF8(csid)) ? utf8_csid : CSFORM_IMPLIED_CSID(imp_dbh, csform);

	OCILobWrite_log_stat(imp_dbh, imp_dbh->svchp, imp_dbh->errhp, locator,
		&amtp, (ub4)offset,
		bufp, (ub4)data_len, OCI_ONE_PIECE,
		NULL, NULL,
		(ub2)0, csform , status);
	if (status != OCI_SUCCESS) {
		oci_error(dbh, imp_dbh->errhp, status, "OCILobWrite");
	ST(0) = &PL_sv_undef;
	}
	else {
		ST(0) = &PL_sv_yes;
	}
#line 2178 "Oracle.c"
    }
    XSRETURN(1);
}


XS_EUPXS(XS_DBD__Oracle__db_ora_lob_append); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle__db_ora_lob_append)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "dbh, locator, data");
    {
	SV *	dbh = ST(0)
;
	OCILobLocator *	locator;
	SV *	data = ST(2)
;
#line 536 "Oracle.xs"
	D_imp_dbh(dbh);
	ub4 amtp;
	STRLEN data_len; /* bytes not chars */
	dvoid *bufp;
	sword status;
#if !defined(OCI_HTYPE_DIRPATH_FN_CTX) /* Oracle is < 9.0 */
	ub4 startp;
#endif
	ub1 csform;
	ub2 csid;
#line 2207 "Oracle.c"

	if (SvROK(ST(1)) && sv_derived_from(ST(1), "OCILobLocatorPtr")) {
	    IV tmp = SvIV((SV*)SvRV(ST(1)));
	    locator = INT2PTR(OCILobLocator *,tmp);
	}
	else {
		const char* refstr = SvROK(ST(1)) ? "" : SvOK(ST(1)) ? "scalar " : "undef";
	    Perl_croak_nocontext("%s: Expected %s to be of type %s; got %s%" SVf " instead",
			"DBD::Oracle::db::ora_lob_append",
			"locator", "OCILobLocatorPtr",
			refstr, ST(1)
		);
	}
;
#line 547 "Oracle.xs"
	csid = 0;
	csform = SQLCS_IMPLICIT;
	bufp = SvPV(data, data_len);
	amtp = data_len;
	/* if locator is CLOB and data is UTF8 and not in bytes pragma */
	/* if (1 && SvUTF8(data) && !IN_BYTES) */
	/* added by lab: */
	/* LAB do something about length here? see above comment */
	OCILobCharSetForm_log_stat(imp_dbh, imp_dbh->envhp, imp_dbh->errhp, locator, &csform, status );
	if (status != OCI_SUCCESS) {
		oci_error(dbh, imp_dbh->errhp, status, "OCILobCharSetForm");
	ST(0) = &PL_sv_undef;
		return;
	}
#ifdef OCI_ATTR_CHARSET_ID
	/* Effectively only used so AL32UTF8 works properly */
	OCILobCharSetId_log_stat(imp_dbh,
                             imp_dbh->envhp,
                             imp_dbh->errhp,
                             locator,
                             &csid,
                             status );
	if (status != OCI_SUCCESS) {
		oci_error(dbh, imp_dbh->errhp, status, "OCILobCharSetId");
	ST(0) = &PL_sv_undef;
		return;
	}
#endif /* OCI_ATTR_CHARSET_ID */
	/* if data is utf8 but charset isn't then switch to utf8 csid */
	csid = (SvUTF8(data) && !CS_IS_UTF8(csid)) ? utf8_csid : CSFORM_IMPLIED_CSID(imp_dbh, csform);
	OCILobWriteAppend_log_stat(imp_dbh, imp_dbh->svchp, imp_dbh->errhp, locator,
				   &amtp, bufp, (ub4)data_len, OCI_ONE_PIECE,
				   NULL, NULL,
				   csid, csform, status);
	if (status != OCI_SUCCESS) {
	   oci_error(dbh, imp_dbh->errhp, status, "OCILobWriteAppend");
	   ST(0) = &PL_sv_undef;
	}
	else {
	   ST(0) = &PL_sv_yes;
	}
#line 2264 "Oracle.c"
    }
    XSRETURN(1);
}


XS_EUPXS(XS_DBD__Oracle__db_ora_lob_read); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle__db_ora_lob_read)
{
    dVAR; dXSARGS;
    if (items != 4)
       croak_xs_usage(cv,  "dbh, locator, offset, length");
    {
	SV *	dbh = ST(0)
;
	OCILobLocator *	locator;
	UV	offset = (UV)SvUV(ST(2))
;
	UV	length = (UV)SvUV(ST(3))
;
#line 599 "Oracle.xs"
	D_imp_dbh(dbh);
	ub4 amtp;
	STRLEN bufp_len;
	SV *dest_sv;
	dvoid *bufp;
	sword status;
	ub1 csform;
#line 2292 "Oracle.c"

	if (SvROK(ST(1)) && sv_derived_from(ST(1), "OCILobLocatorPtr")) {
	    IV tmp = SvIV((SV*)SvRV(ST(1)));
	    locator = INT2PTR(OCILobLocator *,tmp);
	}
	else {
		const char* refstr = SvROK(ST(1)) ? "" : SvOK(ST(1)) ? "scalar " : "undef";
	    Perl_croak_nocontext("%s: Expected %s to be of type %s; got %s%" SVf " instead",
			"DBD::Oracle::db::ora_lob_read",
			"locator", "OCILobLocatorPtr",
			refstr, ST(1)
		);
	}
;
#line 608 "Oracle.xs"
	csform = SQLCS_IMPLICIT;
    /* NOTE, if length is 0 this will create an empty SV of undef
       see RT55028 */
	dest_sv = sv_2mortal(newSV(length*4)); /*LAB: crude hack that works... tim did it else where XXX */

    if (length > 0) {
        SvPOK_on(dest_sv);
        bufp_len = SvLEN(dest_sv);	/* XXX bytes not chars? (lab: yes) */
        bufp = SvPVX(dest_sv);
        amtp = length;	/* if utf8 and clob/nclob: in: chars, out: bytes */
        /* http://www.lc.leidenuniv.nl/awcourse/oracle/appdev.920/a96584/oci16m40.htm#427818 */
        /* if locator is CLOB and data is UTF8 and not in bytes pragma */
        /* if (0 && SvUTF8(dest_sv) && !IN_BYTES) { amtp = sv_len_utf8(dest_sv); }  */
        /* added by lab: */
        OCILobCharSetForm_log_stat(imp_dbh,  imp_dbh->envhp, imp_dbh->errhp, locator, &csform, status );
        if (status != OCI_SUCCESS) {
            oci_error(dbh, imp_dbh->errhp, status, "OCILobCharSetForm");
            dest_sv = &PL_sv_undef;
            return;
        }
        {
            /* see rt 75163 */
            boolean is_open;

            OCILobFileIsOpen_log_stat(imp_dbh, imp_dbh->svchp, imp_dbh->errhp, locator, &is_open, status);
            if (status == OCI_SUCCESS && !is_open) {
                OCILobFileOpen_log_stat(imp_dbh, imp_dbh->svchp, imp_dbh->errhp, locator,
                                        (ub1)OCI_FILE_READONLY, status);
                if (status != OCI_SUCCESS) {
                    oci_error(dbh, imp_dbh->errhp, status, "OCILobFileOpen");
                    dest_sv = &PL_sv_undef;
                }
            }
        }

        OCILobRead_log_stat(imp_dbh, imp_dbh->svchp, imp_dbh->errhp, locator,
                            &amtp, (ub4)offset, /* offset starts at 1 */
                            bufp, (ub4)bufp_len,
                            0, 0, (ub2)0, csform, status);
        if (status != OCI_SUCCESS) {
            oci_error(dbh, imp_dbh->errhp, status, "OCILobRead");
            dest_sv = &PL_sv_undef;
        }
        else {
            SvCUR(dest_sv) = amtp; /* always bytes here */
            *SvEND(dest_sv) = '\0';
            if (csform){
                if (CSFORM_IMPLIES_UTF8(imp_dbh, csform)){
                    SvUTF8_on(dest_sv);
                }
            }
        }
    } /* length > 0 */

	ST(0) = dest_sv;
#line 2363 "Oracle.c"
    }
    XSRETURN(1);
}


XS_EUPXS(XS_DBD__Oracle__db_ora_lob_trim); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle__db_ora_lob_trim)
{
    dVAR; dXSARGS;
    if (items != 3)
       croak_xs_usage(cv,  "dbh, locator, length");
    {
	SV *	dbh = ST(0)
;
	OCILobLocator *	locator;
	UV	length = (UV)SvUV(ST(2))
;
#line 670 "Oracle.xs"
	D_imp_dbh(dbh);
	sword status;
#line 2384 "Oracle.c"

	if (SvROK(ST(1)) && sv_derived_from(ST(1), "OCILobLocatorPtr")) {
	    IV tmp = SvIV((SV*)SvRV(ST(1)));
	    locator = INT2PTR(OCILobLocator *,tmp);
	}
	else {
		const char* refstr = SvROK(ST(1)) ? "" : SvOK(ST(1)) ? "scalar " : "undef";
	    Perl_croak_nocontext("%s: Expected %s to be of type %s; got %s%" SVf " instead",
			"DBD::Oracle::db::ora_lob_trim",
			"locator", "OCILobLocatorPtr",
			refstr, ST(1)
		);
	}
;
#line 673 "Oracle.xs"
	OCILobTrim_log_stat(imp_dbh, imp_dbh->svchp, imp_dbh->errhp, locator, length, status);
	if (status != OCI_SUCCESS) {
		oci_error(dbh, imp_dbh->errhp, status, "OCILobTrim");
	ST(0) = &PL_sv_undef;
	}
	else {
	ST(0) = &PL_sv_yes;
	}
#line 2408 "Oracle.c"
    }
    XSRETURN(1);
}


XS_EUPXS(XS_DBD__Oracle__db_ora_lob_is_init); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle__db_ora_lob_is_init)
{
    dVAR; dXSARGS;
    if (items != 2)
       croak_xs_usage(cv,  "dbh, locator");
    {
	SV *	dbh = ST(0)
;
	OCILobLocator *	locator;
#line 687 "Oracle.xs"
	D_imp_dbh(dbh);
	sword status;
	boolean is_init = 0;
#line 2428 "Oracle.c"

	if (SvROK(ST(1)) && sv_derived_from(ST(1), "OCILobLocatorPtr")) {
	    IV tmp = SvIV((SV*)SvRV(ST(1)));
	    locator = INT2PTR(OCILobLocator *,tmp);
	}
	else {
		const char* refstr = SvROK(ST(1)) ? "" : SvOK(ST(1)) ? "scalar " : "undef";
	    Perl_croak_nocontext("%s: Expected %s to be of type %s; got %s%" SVf " instead",
			"DBD::Oracle::db::ora_lob_is_init",
			"locator", "OCILobLocatorPtr",
			refstr, ST(1)
		);
	}
;
#line 691 "Oracle.xs"
	OCILobLocatorIsInit_log_stat(imp_dbh, imp_dbh->envhp,imp_dbh->errhp,locator,&is_init,status);
	if (status != OCI_SUCCESS) {
		oci_error(dbh, imp_dbh->errhp, status, "OCILobLocatorIsInit ora_lob_is_init");
	    ST(0) = &PL_sv_undef;
	}
	else {
	    ST(0) = sv_2mortal(newSVuv(is_init));
	}
#line 2452 "Oracle.c"
    }
    XSRETURN(1);
}


XS_EUPXS(XS_DBD__Oracle__db_ora_lob_length); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle__db_ora_lob_length)
{
    dVAR; dXSARGS;
    if (items != 2)
       croak_xs_usage(cv,  "dbh, locator");
    {
	SV *	dbh = ST(0)
;
	OCILobLocator *	locator;
#line 705 "Oracle.xs"
	D_imp_dbh(dbh);
	sword status;
	ub4 len = 0;
#line 2472 "Oracle.c"

	if (SvROK(ST(1)) && sv_derived_from(ST(1), "OCILobLocatorPtr")) {
	    IV tmp = SvIV((SV*)SvRV(ST(1)));
	    locator = INT2PTR(OCILobLocator *,tmp);
	}
	else {
		const char* refstr = SvROK(ST(1)) ? "" : SvOK(ST(1)) ? "scalar " : "undef";
	    Perl_croak_nocontext("%s: Expected %s to be of type %s; got %s%" SVf " instead",
			"DBD::Oracle::db::ora_lob_length",
			"locator", "OCILobLocatorPtr",
			refstr, ST(1)
		);
	}
;
#line 709 "Oracle.xs"
	OCILobGetLength_log_stat(imp_dbh, imp_dbh->svchp, imp_dbh->errhp, locator, &len, status);
	if (status != OCI_SUCCESS) {
		oci_error(dbh, imp_dbh->errhp, status, "OCILobGetLength ora_lob_length");
	ST(0) = &PL_sv_undef;
	}
	else {
	ST(0) = sv_2mortal(newSVuv(len));
	}
#line 2496 "Oracle.c"
    }
    XSRETURN(1);
}


XS_EUPXS(XS_DBD__Oracle__db_ora_lob_chunk_size); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle__db_ora_lob_chunk_size)
{
    dVAR; dXSARGS;
    if (items != 2)
       croak_xs_usage(cv,  "dbh, locator");
    {
	SV *	dbh = ST(0)
;
	OCILobLocator *	locator;
#line 724 "Oracle.xs"
	D_imp_dbh(dbh);
	sword status;
	ub4 chunk_size = 0;
#line 2516 "Oracle.c"

	if (SvROK(ST(1)) && sv_derived_from(ST(1), "OCILobLocatorPtr")) {
	    IV tmp = SvIV((SV*)SvRV(ST(1)));
	    locator = INT2PTR(OCILobLocator *,tmp);
	}
	else {
		const char* refstr = SvROK(ST(1)) ? "" : SvOK(ST(1)) ? "scalar " : "undef";
	    Perl_croak_nocontext("%s: Expected %s to be of type %s; got %s%" SVf " instead",
			"DBD::Oracle::db::ora_lob_chunk_size",
			"locator", "OCILobLocatorPtr",
			refstr, ST(1)
		);
	}
;
#line 728 "Oracle.xs"
	OCILobGetChunkSize_log_stat(imp_dbh, imp_dbh->svchp, imp_dbh->errhp, locator, &chunk_size, status);
	if (status != OCI_SUCCESS) {
		oci_error(dbh, imp_dbh->errhp, status, "OCILobGetChunkSize");
		ST(0) = &PL_sv_undef;
	}
	else {
		ST(0) = sv_2mortal(newSVuv(chunk_size));
	}
#line 2540 "Oracle.c"
    }
    XSRETURN(1);
}


XS_EUPXS(XS_DBD__Oracle__dr_init_globals); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle__dr_init_globals)
{
    dVAR; dXSARGS;
    if (items != 0)
       croak_xs_usage(cv,  "");
    {
#line 747 "Oracle.xs"
    dbd_dr_globals_init();
#line 2555 "Oracle.c"
    }
    XSRETURN_EMPTY;
}


XS_EUPXS(XS_DBD__Oracle__dr_init_oci); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle__dr_init_oci)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "drh");
    {
	SV *	drh = ST(0)
;
#line 753 "Oracle.xs"
	D_imp_drh(drh);
	dbd_init_oci(DBIS) ;
	dbd_init_oci_drh(imp_drh) ;
    dbd_dr_mng();
#line 2575 "Oracle.c"
    }
    XSRETURN_EMPTY;
}


XS_EUPXS(XS_DBD__Oracle__dr_DESTROY); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle__dr_DESTROY)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "drh");
    PERL_UNUSED_VAR(ax); /* -Wall */
    SP -= items;
    {
	SV *	drh = ST(0)
;
#line 762 "Oracle.xs"
    /* keep in sync with default DESTROY in DBI.xs (currently there is no dr default) */
    D_imp_drh(drh);
    ST(0) = &PL_sv_yes;
    dbd_dr_destroy(drh, imp_drh);
#line 2597 "Oracle.c"
	PUTBACK;
	return;
    }
}

#ifdef __cplusplus
extern "C" {
#endif
XS_EXTERNAL(boot_DBD__Oracle); /* prototype to pass -Wmissing-prototypes */
XS_EXTERNAL(boot_DBD__Oracle)
{
#if PERL_VERSION_LE(5, 21, 5)
    dVAR; dXSARGS;
#else
    dVAR; dXSBOOTARGSXSAPIVERCHK;
#endif
#if PERL_VERSION_LE(5, 8, 999) /* PERL_VERSION_LT is 5.33+ */
    char* file = __FILE__;
#else
    const char* file = __FILE__;
#endif

    PERL_UNUSED_VAR(file);

    PERL_UNUSED_VAR(cv); /* -W */
    PERL_UNUSED_VAR(items); /* -W */
#if PERL_VERSION_LE(5, 21, 5)
    XS_VERSION_BOOTCHECK;
#  ifdef XS_APIVERSION_BOOTCHECK
    XS_APIVERSION_BOOTCHECK;
#  endif
#endif

        cv = newXS_deffile("DBD::Oracle::OCI_BATCH_ERRORS", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x80;
        cv = newXS_deffile("DBD::Oracle::OCI_BATCH_MODE", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x01;
        cv = newXS_deffile("DBD::Oracle::OCI_COMMIT_ON_SUCCESS", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x20;
        cv = newXS_deffile("DBD::Oracle::OCI_DBSHUTDOWN_ABORT", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 4;
        cv = newXS_deffile("DBD::Oracle::OCI_DBSHUTDOWN_FINAL", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 5;
        cv = newXS_deffile("DBD::Oracle::OCI_DBSHUTDOWN_IMMEDIATE", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 3;
        cv = newXS_deffile("DBD::Oracle::OCI_DBSHUTDOWN_TRANSACTIONAL", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 1;
        cv = newXS_deffile("DBD::Oracle::OCI_DBSHUTDOWN_TRANSACTIONAL_LOCAL", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 2;
        cv = newXS_deffile("DBD::Oracle::OCI_DBSTARTUPFLAG_FORCE", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x00000001;
        cv = newXS_deffile("DBD::Oracle::OCI_DBSTARTUPFLAG_RESTRICT", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x00000002;
        cv = newXS_deffile("DBD::Oracle::OCI_DESCRIBE_ONLY", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x10;
        cv = newXS_deffile("DBD::Oracle::OCI_EXACT_FETCH", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x02;
        cv = newXS_deffile("DBD::Oracle::OCI_FETCH_ABSOLUTE", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FETCH_ABSOLUTE;
        cv = newXS_deffile("DBD::Oracle::OCI_FETCH_CURRENT", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FETCH_CURRENT;
        cv = newXS_deffile("DBD::Oracle::OCI_FETCH_FIRST", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FETCH_FIRST;
        cv = newXS_deffile("DBD::Oracle::OCI_FETCH_LAST", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FETCH_LAST;
        cv = newXS_deffile("DBD::Oracle::OCI_FETCH_NEXT", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FETCH_NEXT;
        cv = newXS_deffile("DBD::Oracle::OCI_FETCH_PRIOR", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FETCH_PRIOR;
        cv = newXS_deffile("DBD::Oracle::OCI_FETCH_RELATIVE", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FETCH_RELATIVE;
        cv = newXS_deffile("DBD::Oracle::OCI_FO_ABORT", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FO_ABORT;
        cv = newXS_deffile("DBD::Oracle::OCI_FO_BEGIN", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FO_BEGIN;
        cv = newXS_deffile("DBD::Oracle::OCI_FO_END", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FO_END;
        cv = newXS_deffile("DBD::Oracle::OCI_FO_ERROR", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FO_ERROR;
        cv = newXS_deffile("DBD::Oracle::OCI_FO_NONE", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FO_NONE;
        cv = newXS_deffile("DBD::Oracle::OCI_FO_REAUTH", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FO_REAUTH;
        cv = newXS_deffile("DBD::Oracle::OCI_FO_RETRY", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FO_RETRY;
        cv = newXS_deffile("DBD::Oracle::OCI_FO_SELECT", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FO_SELECT;
        cv = newXS_deffile("DBD::Oracle::OCI_FO_SESSION", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FO_SESSION;
        cv = newXS_deffile("DBD::Oracle::OCI_FO_TXNAL", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_FO_TXNAL;
        cv = newXS_deffile("DBD::Oracle::OCI_KEEP_FETCH_STATE", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x04;
        cv = newXS_deffile("DBD::Oracle::OCI_NON_BLOCKING", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x40;
        cv = newXS_deffile("DBD::Oracle::OCI_PARSE_ONLY", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x100;
        cv = newXS_deffile("DBD::Oracle::OCI_PRELIM_AUTH", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x00000008;
        cv = newXS_deffile("DBD::Oracle::OCI_SHOW_DML_WARNINGS", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x400;
        cv = newXS_deffile("DBD::Oracle::OCI_SPOOL_ATTRVAL_FORCEGET", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_SPOOL_ATTRVAL_FORCEGET;
        cv = newXS_deffile("DBD::Oracle::OCI_SPOOL_ATTRVAL_NOWAIT", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_SPOOL_ATTRVAL_NOWAIT;
        cv = newXS_deffile("DBD::Oracle::OCI_SPOOL_ATTRVAL_TIMEDWAIT", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_SPOOL_ATTRVAL_TIMEDWAIT;
        cv = newXS_deffile("DBD::Oracle::OCI_SPOOL_ATTRVAL_WAIT", XS_DBD__Oracle_constant);
        XSANY.any_i32 = OCI_SPOOL_ATTRVAL_WAIT;
        cv = newXS_deffile("DBD::Oracle::OCI_STMT_SCROLLABLE_READONLY", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x08;
        cv = newXS_deffile("DBD::Oracle::ORA_BLOB", XS_DBD__Oracle_constant);
        XSANY.any_i32 = ORA_BLOB;
        cv = newXS_deffile("DBD::Oracle::ORA_CHAR", XS_DBD__Oracle_constant);
        XSANY.any_i32 = ORA_CHAR;
        cv = newXS_deffile("DBD::Oracle::ORA_CHARZ", XS_DBD__Oracle_constant);
        XSANY.any_i32 = ORA_CHARZ;
        cv = newXS_deffile("DBD::Oracle::ORA_CLOB", XS_DBD__Oracle_constant);
        XSANY.any_i32 = ORA_CLOB;
        cv = newXS_deffile("DBD::Oracle::ORA_DATE", XS_DBD__Oracle_constant);
        XSANY.any_i32 = ORA_DATE;
        cv = newXS_deffile("DBD::Oracle::ORA_LONG", XS_DBD__Oracle_constant);
        XSANY.any_i32 = ORA_LONG;
        cv = newXS_deffile("DBD::Oracle::ORA_LONGRAW", XS_DBD__Oracle_constant);
        XSANY.any_i32 = ORA_LONGRAW;
        cv = newXS_deffile("DBD::Oracle::ORA_MLSLABEL", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 105;
        cv = newXS_deffile("DBD::Oracle::ORA_NUMBER", XS_DBD__Oracle_constant);
        XSANY.any_i32 = ORA_NUMBER;
        cv = newXS_deffile("DBD::Oracle::ORA_NUMBER_TABLE", XS_DBD__Oracle_constant);
        XSANY.any_i32 = ORA_NUMBER_TABLE;
        cv = newXS_deffile("DBD::Oracle::ORA_RAW", XS_DBD__Oracle_constant);
        XSANY.any_i32 = ORA_RAW;
        cv = newXS_deffile("DBD::Oracle::ORA_ROWID", XS_DBD__Oracle_constant);
        XSANY.any_i32 = ORA_ROWID;
        cv = newXS_deffile("DBD::Oracle::ORA_RSET", XS_DBD__Oracle_constant);
        XSANY.any_i32 = ORA_RSET;
        cv = newXS_deffile("DBD::Oracle::ORA_STRING", XS_DBD__Oracle_constant);
        XSANY.any_i32 = ORA_STRING;
        cv = newXS_deffile("DBD::Oracle::ORA_SYSASM", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x8000;
        cv = newXS_deffile("DBD::Oracle::ORA_SYSBACKUP", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x00020000;
        cv = newXS_deffile("DBD::Oracle::ORA_SYSDBA", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x0002;
        cv = newXS_deffile("DBD::Oracle::ORA_SYSDG", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x00040000;
        cv = newXS_deffile("DBD::Oracle::ORA_SYSKM", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x00080000;
        cv = newXS_deffile("DBD::Oracle::ORA_SYSOPER", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0x0004;
        cv = newXS_deffile("DBD::Oracle::ORA_VARCHAR2", XS_DBD__Oracle_constant);
        XSANY.any_i32 = ORA_VARCHAR2;
        cv = newXS_deffile("DBD::Oracle::ORA_VARCHAR2_TABLE", XS_DBD__Oracle_constant);
        XSANY.any_i32 = ORA_VARCHAR2_TABLE;
        cv = newXS_deffile("DBD::Oracle::ORA_XMLTYPE", XS_DBD__Oracle_constant);
        XSANY.any_i32 = ORA_XMLTYPE;
        cv = newXS_deffile("DBD::Oracle::SQLCS_IMPLICIT", XS_DBD__Oracle_constant);
        XSANY.any_i32 = SQLCS_IMPLICIT;
        cv = newXS_deffile("DBD::Oracle::SQLCS_NCHAR", XS_DBD__Oracle_constant);
        XSANY.any_i32 = SQLCS_NCHAR;
        cv = newXS_deffile("DBD::Oracle::SQLT_BIN", XS_DBD__Oracle_constant);
        XSANY.any_i32 = SQLT_BIN;
        cv = newXS_deffile("DBD::Oracle::SQLT_CHR", XS_DBD__Oracle_constant);
        XSANY.any_i32 = SQLT_CHR;
        cv = newXS_deffile("DBD::Oracle::SQLT_FLT", XS_DBD__Oracle_constant);
        XSANY.any_i32 = SQLT_FLT;
        cv = newXS_deffile("DBD::Oracle::SQLT_INT", XS_DBD__Oracle_constant);
        XSANY.any_i32 = SQLT_INT;
        cv = newXS_deffile("DBD::Oracle::constant", XS_DBD__Oracle_constant);
        XSANY.any_i32 = 0;
        newXS_deffile("DBD::Oracle::ORA_OCI", XS_DBD__Oracle_ORA_OCI);
        newXS_deffile("DBD::Oracle::ora_env_var", XS_DBD__Oracle_ora_env_var);
#if XSubPPtmpAAAA
        newXS_deffile("DBD::Oracle::ora_cygwin_set_env", XS_DBD__Oracle_ora_cygwin_set_env);
#endif
        newXS_deffile("DBD::Oracle::ora_shared_release", XS_DBD__Oracle_ora_shared_release);
        newXS_deffile("DBD::Oracle::dr::dbixs_revision", XS_DBD__Oracle__dr_dbixs_revision);
#if XSubPPtmpAAAB
        cv = newXS_deffile("DBD::Oracle::dr::discon_all_", XS_DBD__Oracle__dr_discon_all_);
        XSANY.any_i32 = 0;
        cv = newXS_deffile("DBD::Oracle::dr::disconnect_all", XS_DBD__Oracle__dr_discon_all_);
        XSANY.any_i32 = 1;
#endif
#if XSubPPtmpAAAC
        newXS_deffile("DBD::Oracle::dr::data_sources", XS_DBD__Oracle__dr_data_sources);
#endif
        newXS_deffile("DBD::Oracle::db::_login", XS_DBD__Oracle__db__login);
        newXS_deffile("DBD::Oracle::db::selectall_arrayref", XS_DBD__Oracle__db_selectall_arrayref);
        cv = newXS_deffile("DBD::Oracle::db::selectrow_array", XS_DBD__Oracle__db_selectrow_arrayref);
        XSANY.any_i32 = 1;
        cv = newXS_deffile("DBD::Oracle::db::selectrow_arrayref", XS_DBD__Oracle__db_selectrow_arrayref);
        XSANY.any_i32 = 0;
#if XSubPPtmpAAAD
        newXS_deffile("DBD::Oracle::db::do", XS_DBD__Oracle__db_do);
#endif
#if XSubPPtmpAAAE
        newXS_deffile("DBD::Oracle::db::last_insert_id", XS_DBD__Oracle__db_last_insert_id);
#endif
        newXS_deffile("DBD::Oracle::db::commit", XS_DBD__Oracle__db_commit);
        newXS_deffile("DBD::Oracle::db::rollback", XS_DBD__Oracle__db_rollback);
        newXS_deffile("DBD::Oracle::db::disconnect", XS_DBD__Oracle__db_disconnect);
        newXS_deffile("DBD::Oracle::db::STORE", XS_DBD__Oracle__db_STORE);
        newXS_deffile("DBD::Oracle::db::FETCH", XS_DBD__Oracle__db_FETCH);
        newXS_deffile("DBD::Oracle::db::DESTROY", XS_DBD__Oracle__db_DESTROY);
#if XSubPPtmpAAAF
        newXS_deffile("DBD::Oracle::db::take_imp_data", XS_DBD__Oracle__db_take_imp_data);
#endif
#if XSubPPtmpAAAG
        newXS_deffile("DBD::Oracle::db::data_sources", XS_DBD__Oracle__db_data_sources);
#endif
        newXS_deffile("DBD::Oracle::st::_prepare", XS_DBD__Oracle__st__prepare);
#if XSubPPtmpAAAH
        newXS_deffile("DBD::Oracle::st::rows", XS_DBD__Oracle__st_rows);
#endif
#if XSubPPtmpAAAI
        newXS_deffile("DBD::Oracle::st::bind_col", XS_DBD__Oracle__st_bind_col);
#endif
        newXS_deffile("DBD::Oracle::st::bind_param", XS_DBD__Oracle__st_bind_param);
        newXS_deffile("DBD::Oracle::st::bind_param_inout", XS_DBD__Oracle__st_bind_param_inout);
        newXS_deffile("DBD::Oracle::st::execute", XS_DBD__Oracle__st_execute);
#if XSubPPtmpAAAJ
        newXS_deffile("DBD::Oracle::st::execute_for_fetch", XS_DBD__Oracle__st_execute_for_fetch);
#endif
#if XSubPPtmpAAAK
        newXS_deffile("DBD::Oracle::st::last_insert_id", XS_DBD__Oracle__st_last_insert_id);
#endif
        cv = newXS_deffile("DBD::Oracle::st::fetch", XS_DBD__Oracle__st_fetchrow_arrayref);
        XSANY.any_i32 = 1;
        cv = newXS_deffile("DBD::Oracle::st::fetchrow_arrayref", XS_DBD__Oracle__st_fetchrow_arrayref);
        XSANY.any_i32 = 0;
        cv = newXS_deffile("DBD::Oracle::st::fetchrow", XS_DBD__Oracle__st_fetchrow_array);
        XSANY.any_i32 = 1;
        cv = newXS_deffile("DBD::Oracle::st::fetchrow_array", XS_DBD__Oracle__st_fetchrow_array);
        XSANY.any_i32 = 0;
        newXS_deffile("DBD::Oracle::st::fetchall_arrayref", XS_DBD__Oracle__st_fetchall_arrayref);
        newXS_deffile("DBD::Oracle::st::finish", XS_DBD__Oracle__st_finish);
        newXS_deffile("DBD::Oracle::st::blob_read", XS_DBD__Oracle__st_blob_read);
        newXS_deffile("DBD::Oracle::st::STORE", XS_DBD__Oracle__st_STORE);
        cv = newXS_deffile("DBD::Oracle::st::FETCH", XS_DBD__Oracle__st_FETCH_attrib);
        XSANY.any_i32 = 1;
        cv = newXS_deffile("DBD::Oracle::st::FETCH_attrib", XS_DBD__Oracle__st_FETCH_attrib);
        XSANY.any_i32 = 0;
        newXS_deffile("DBD::Oracle::st::DESTROY", XS_DBD__Oracle__st_DESTROY);
        newXS_deffile("DBD::Oracle::st::ora_stmt_type", XS_DBD__Oracle__st_ora_stmt_type);
        newXS_deffile("DBD::Oracle::st::ora_stmt_type_name", XS_DBD__Oracle__st_ora_stmt_type_name);
        newXS_deffile("DBD::Oracle::st::ora_scroll_position", XS_DBD__Oracle__st_ora_scroll_position);
        newXS_deffile("DBD::Oracle::st::ora_fetch_scroll", XS_DBD__Oracle__st_ora_fetch_scroll);
        newXS_deffile("DBD::Oracle::st::ora_bind_param_inout_array", XS_DBD__Oracle__st_ora_bind_param_inout_array);
        newXS_deffile("DBD::Oracle::st::ora_fetch", XS_DBD__Oracle__st_ora_fetch);
        newXS_deffile("DBD::Oracle::st::ora_execute_array", XS_DBD__Oracle__st_ora_execute_array);
        newXS_deffile("DBD::Oracle::st::cancel", XS_DBD__Oracle__st_cancel);
        newXS_deffile("DBD::Oracle::db::ora_db_startup", XS_DBD__Oracle__db_ora_db_startup);
        newXS_deffile("DBD::Oracle::db::ora_db_shutdown", XS_DBD__Oracle__db_ora_db_shutdown);
        newXS_deffile("DBD::Oracle::db::ora_can_taf", XS_DBD__Oracle__db_ora_can_taf);
        newXS_deffile("DBD::Oracle::db::ora_ping", XS_DBD__Oracle__db_ora_ping);
        newXS_deffile("DBD::Oracle::db::reauthenticate", XS_DBD__Oracle__db_reauthenticate);
        newXS_deffile("DBD::Oracle::db::ora_lob_write", XS_DBD__Oracle__db_ora_lob_write);
        newXS_deffile("DBD::Oracle::db::ora_lob_append", XS_DBD__Oracle__db_ora_lob_append);
        newXS_deffile("DBD::Oracle::db::ora_lob_read", XS_DBD__Oracle__db_ora_lob_read);
        newXS_deffile("DBD::Oracle::db::ora_lob_trim", XS_DBD__Oracle__db_ora_lob_trim);
        newXS_deffile("DBD::Oracle::db::ora_lob_is_init", XS_DBD__Oracle__db_ora_lob_is_init);
        newXS_deffile("DBD::Oracle::db::ora_lob_length", XS_DBD__Oracle__db_ora_lob_length);
        newXS_deffile("DBD::Oracle::db::ora_lob_chunk_size", XS_DBD__Oracle__db_ora_lob_chunk_size);
        newXS_deffile("DBD::Oracle::dr::init_globals", XS_DBD__Oracle__dr_init_globals);
        newXS_deffile("DBD::Oracle::dr::init_oci", XS_DBD__Oracle__dr_init_oci);
        newXS_deffile("DBD::Oracle::dr::DESTROY", XS_DBD__Oracle__dr_DESTROY);

    /* Initialisation Section */

#if XSubPPtmpAAAA
#endif
#line 39 "./Oracle.xsi"
    PERL_UNUSED_VAR(items);
    DBISTATE_INIT;
    /* XXX this interface will change: */
    DBI_IMP_SIZE("DBD::Oracle::dr::imp_data_size", sizeof(imp_drh_t));
    DBI_IMP_SIZE("DBD::Oracle::db::imp_data_size", sizeof(imp_dbh_t));
    DBI_IMP_SIZE("DBD::Oracle::st::imp_data_size", sizeof(imp_sth_t));
    dbd_init(DBIS);

#if XSubPPtmpAAAB
#endif
#if XSubPPtmpAAAC
#endif
#if XSubPPtmpAAAD
#endif
#if XSubPPtmpAAAE
#endif
#if XSubPPtmpAAAF
#endif
#if XSubPPtmpAAAG
#endif
#if XSubPPtmpAAAH
#endif
#if XSubPPtmpAAAI
#endif
#if XSubPPtmpAAAJ
#endif
#if XSubPPtmpAAAK
#endif
#line 2899 "Oracle.c"

    /* End of Initialisation Section */

#if PERL_VERSION_LE(5, 21, 5)
#  if PERL_VERSION_GE(5, 9, 0)
    if (PL_unitcheckav)
        call_list(PL_scopestack_ix, PL_unitcheckav);
#  endif
    XSRETURN_YES;
#else
    Perl_xs_boot_epilog(aTHX_ ax);
#endif
}

#ifdef __cplusplus
}
#endif
                                                                                                                                                                                                                                                                            root/.cpan/build/DBD-Oracle-1.90-2/Oracle.h                                                         0000644 0001750 0001750 00000011256 14616324562 016273  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*
   Copyright (c) 1994-2006  Tim Bunce

   See the COPYRIGHT section in the Oracle.pm file for terms.

*/

/* ====== Include Oracle Header Files ====== */

#ifndef CAN_PROTOTYPE
#define signed	/* Oracle headers use signed */
#endif

/* The following define avoids a problem with Oracle >=7.3 where
 * ociapr.h has the line:
 *	sword  obindps(struct cda_def *cursor, ub1 opcode, text *sqlvar, ...
 * In some compilers that clashes with perls 'opcode' enum definition.
 */
#define opcode opcode_redefined

/* Hack to fix broken Oracle oratypes.h on OSF Alpha. Sigh.	*/
#if defined(__osf__) && defined(__alpha)
#ifndef A_OSF
#define A_OSF
#endif
#endif

