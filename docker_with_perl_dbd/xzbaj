	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_MATH_invlist[] = {  /* for EBCDIC 1047 */
	279,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4C,
	0x4D,
	0x4E,
	0x50,
	0x5F,
	0x60,
	0x6E,
	0x6F,
	0x7E,
	0x7F,
	0x8F,
	0x90,
	0xA1,
	0xA2,
	0xB0,
	0xB1,
	0xBF,
	0xC0,
	0xE1,
	0xE2,
	0x3D0,
	0x3D3,
	0x3D5,
	0x3D6,
	0x3F0,
	0x3F2,
	0x3F4,
	0x3F7,
	0x606,
	0x609,
	0x2016,
	0x2017,
	0x2032,
	0x2035,
	0x2040,
	0x2041,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x2061,
	0x2065,
	0x207A,
	0x207F,
	0x208A,
	0x208F,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20E7,
	0x20EB,
	0x20F0,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2128,
	0x212A,
	0x212C,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x2139,
	0x213C,
	0x214A,
	0x214B,
	0x214C,
	0x2190,
	0x21A8,
	0x21A9,
	0x21AF,
	0x21B0,
	0x21B2,
	0x21B6,
	0x21B8,
	0x21BC,
	0x21DC,
	0x21DD,
	0x21DE,
	0x21E4,
	0x21E6,
	0x21F4,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2322,
	0x237C,
	0x237D,
	0x239B,
	0x23B6,
	0x23B7,
	0x23B8,
	0x23D0,
	0x23D1,
	0x23DC,
	0x23E3,
	0x25A0,
	0x25A2,
	0x25AE,
	0x25B8,
	0x25BC,
	0x25C2,
	0x25C6,
	0x25C8,
	0x25CA,
	0x25CC,
	0x25CF,
	0x25D4,
	0x25E2,
	0x25E3,
	0x25E4,
	0x25E5,
	0x25E7,
	0x25ED,
	0x25F8,
	0x2600,
	0x2605,
	0x2607,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2660,
	0x2664,
	0x266D,
	0x2670,
	0x27C0,
	0x2800,
	0x2900,
	0x2B00,
	0x2B30,
	0x2B45,
	0x2B47,
	0x2B4D,
	0xFB29,
	0xFB2A,
	0xFE61,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFF0B,
	0xFF0C,
	0xFF1C,
	0xFF1F,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF3F,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFFE2,
	0xFFE3,
	0xFFE9,
	0xFFED,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_MATH_invlist[] = {  /* for EBCDIC 037 */
	279,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4C,
	0x4D,
	0x4E,
	0x50,
	0x5F,
	0x60,
	0x6E,
	0x6F,
	0x7E,
	0x7F,
	0x8F,
	0x90,
	0xA1,
	0xA2,
	0xB0,
	0xB1,
	0xBF,
	0xC0,
	0xE1,
	0xE2,
	0x3D0,
	0x3D3,
	0x3D5,
	0x3D6,
	0x3F0,
	0x3F2,
	0x3F4,
	0x3F7,
	0x606,
	0x609,
	0x2016,
	0x2017,
	0x2032,
	0x2035,
	0x2040,
	0x2041,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x2061,
	0x2065,
	0x207A,
	0x207F,
	0x208A,
	0x208F,
	0x20D0,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x20E7,
	0x20EB,
	0x20F0,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2128,
	0x212A,
	0x212C,
	0x212E,
	0x212F,
	0x2132,
	0x2133,
	0x2139,
	0x213C,
	0x214A,
	0x214B,
	0x214C,
	0x2190,
	0x21A8,
	0x21A9,
	0x21AF,
	0x21B0,
	0x21B2,
	0x21B6,
	0x21B8,
	0x21BC,
	0x21DC,
	0x21DD,
	0x21DE,
	0x21E4,
	0x21E6,
	0x21F4,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2322,
	0x237C,
	0x237D,
	0x239B,
	0x23B6,
	0x23B7,
	0x23B8,
	0x23D0,
	0x23D1,
	0x23DC,
	0x23E3,
	0x25A0,
	0x25A2,
	0x25AE,
	0x25B8,
	0x25BC,
	0x25C2,
	0x25C6,
	0x25C8,
	0x25CA,
	0x25CC,
	0x25CF,
	0x25D4,
	0x25E2,
	0x25E3,
	0x25E4,
	0x25E5,
	0x25E7,
	0x25ED,
	0x25F8,
	0x2600,
	0x2605,
	0x2607,
	0x2640,
	0x2641,
	0x2642,
	0x2643,
	0x2660,
	0x2664,
	0x266D,
	0x2670,
	0x27C0,
	0x2800,
	0x2900,
	0x2B00,
	0x2B30,
	0x2B45,
	0x2B47,
	0x2B4D,
	0xFB29,
	0xFB2A,
	0xFE61,
	0xFE67,
	0xFE68,
	0xFE69,
	0xFF0B,
	0xFF0C,
	0xFF1C,
	0xFF1F,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF3F,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFFE2,
	0xFFE3,
	0xFFE9,
	0xFFED,
	0x1D400,
	0x1D455,
	0x1D456,
	0x1D49D,
	0x1D49E,
	0x1D4A0,
	0x1D4A2,
	0x1D4A3,
	0x1D4A5,
	0x1D4A7,
	0x1D4A9,
	0x1D4AD,
	0x1D4AE,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D506,
	0x1D507,
	0x1D50B,
	0x1D50D,
	0x1D515,
	0x1D516,
	0x1D51D,
	0x1D51E,
	0x1D53A,
	0x1D53B,
	0x1D53F,
	0x1D540,
	0x1D545,
	0x1D546,
	0x1D547,
	0x1D54A,
	0x1D551,
	0x1D552,
	0x1D6A6,
	0x1D6A8,
	0x1D7CC,
	0x1D7CE,
	0x1D800,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2
};

#  endif	/* EBCDIC 037 */

static const UV UNI_MATHALPHANUM_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D400,
	0x1D800
};

static const UV UNI_MATHOPERATORS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2200,
	0x2300
};

static const UV UNI_MAYANNUMERALS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D2E0,
	0x1D300
};

static const UV UNI_MC_invlist[] = {  /* for all charsets */
	355,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x903,
	0x904,
	0x93B,
	0x93C,
	0x93E,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x950,
	0x982,
	0x984,
	0x9BE,
	0x9C1,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9D7,
	0x9D8,
	0xA03,
	0xA04,
	0xA3E,
	0xA41,
	0xA83,
	0xA84,
	0xABE,
	0xAC1,
	0xAC9,
	0xACA,
	0xACB,
	0xACD,
	0xB02,
	0xB04,
	0xB3E,
	0xB3F,
	0xB40,
	0xB41,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB57,
	0xB58,
	0xBBE,
	0xBC0,
	0xBC1,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD7,
	0xBD8,
	0xC01,
	0xC04,
	0xC41,
	0xC45,
	0xC82,
	0xC84,
	0xCBE,
	0xCBF,
	0xCC0,
	0xCC5,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xCD5,
	0xCD7,
	0xD02,
	0xD04,
	0xD3E,
	0xD41,
	0xD46,
	0xD49,
	0xD4A,
	0xD4D,
	0xD57,
	0xD58,
	0xD82,
	0xD84,
	0xDCF,
	0xDD2,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xF3E,
	0xF40,
	0xF7F,
	0xF80,
	0x102B,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x1056,
	0x1058,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108F,
	0x1090,
	0x109A,
	0x109D,
	0x1715,
	0x1716,
	0x1734,
	0x1735,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x1923,
	0x1927,
	0x1929,
	0x192C,
	0x1930,
	0x1932,
	0x1933,
	0x1939,
	0x1A19,
	0x1A1B,
	0x1A55,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1B04,
	0x1B05,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B45,
	0x1B82,
	0x1B83,
	0x1BA1,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1BF4,
	0x1C24,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1CE1,
	0x1CE2,
	0x1CF7,
	0x1CF8,
	0x302E,
	0x3030,
	0xA823,
	0xA825,
	0xA827,
	0xA828,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C4,
	0xA952,
	0xA954,
	0xA983,
	0xA984,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BE,
	0xA9C1,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA4D,
	0xAA4E,
	0xAA7B,
	0xAA7C,
	0xAA7D,
	0xAA7E,
	0xAAEB,
	0xAAEC,
	0xAAEE,
	0xAAF0,
	0xAAF5,
	0xAAF6,
	0xABE3,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABEB,
	0xABEC,
	0xABED,
	0x11000,
	0x11001,
	0x11002,
	0x11003,
	0x11082,
	0x11083,
	0x110B0,
	0x110B3,
	0x110B7,
	0x110B9,
	0x1112C,
	0x1112D,
	0x11145,
	0x11147,
	0x11182,
	0x11183,
	0x111B3,
	0x111B6,
	0x111BF,
	0x111C1,
	0x111CE,
	0x111CF,
	0x1122C,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x112E0,
	0x112E3,
	0x11302,
	0x11304,
	0x1133E,
	0x11340,
	0x11341,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11435,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x114B0,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x115AF,
	0x115B2,
	0x115B8,
	0x115BC,
	0x115BE,
	0x115BF,
	0x11630,
	0x11633,
	0x1163B,
	0x1163D,
	0x1163E,
	0x1163F,
	0x116AC,
	0x116AD,
	0x116AE,
	0x116B0,
	0x116B6,
	0x116B7,
	0x11720,
	0x11722,
	0x11726,
	0x11727,
	0x1182C,
	0x1182F,
