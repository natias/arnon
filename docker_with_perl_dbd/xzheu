            $error .= "Bad recipient <$to>: $server_reply\n";
        }
    }
    unless ($to_ok) {
        return fail("No valid recipient");
    }

    # start data part

    socket_write("DATA$CRLF")
        || return fail("send DATA error");
    socket_read()
        || return fail("DATA error ($_)");

    # print headers
    foreach $header (keys %mail) {
        next if $header eq "Message";
        $mail{$header} =~ s/\s+$//o; # kill possible trailing garbage
        socket_write("$header: $mail{$header}$CRLF")
            || return fail("send $header: error");
    };

    #- test disconnecting from network here, to see what happens
    #- print STDERR "DISCONNECT NOW!\n";
    #- sleep 4;
    #- print STDERR "trying to continue, expecting an error... \n";

    # send message body (passed as a reference, in case it's big)
    socket_write($CRLF, \$mail{'Message'}, "$CRLF.$CRLF")
           || return fail("send message error");
    socket_read()
        || return fail("message transmission error ($_)");
    $log .= "\nResult: $_";

    # finish
    socket_write("QUIT$CRLF")
           || return fail("send QUIT error");
    socket_read();
    close S;

    return 1;
} # end sub sendmail

1;
__END__

=head1 SYNOPSIS

  use Mail::Sendmail;

  %mail = ( To      => 'you@there.com',
            From    => 'me@here.com',
            Message => "This is a very short message"
           );

  sendmail(%mail) or die $Mail::Sendmail::error;

  print "OK. Log says:\n", $Mail::Sendmail::log;

=head1 DESCRIPTION

Simple platform independent e-mail from your perl script. Only requires
Perl 5 and a network connection.

Mail::Sendmail takes a hash with the message to send and sends it to your
mail server. It is intended to be very easy to setup and
use. See also L<"FEATURES"> below, and as usual, read this documentation.

There is also a FAQ (see L<"NOTES">).

=head1 INSTALLATION

=over 4

=item Best

C<perl -MCPAN -e "install Mail::Sendmail">

=item Traditional

    perl Makefile.PL
    make
    make test
    make install

=item Manual

Copy Sendmail.pm to Mail/ in your Perl lib directory.

    (eg. c:\Perl\site\lib\Mail\
     or  /usr/lib/perl5/site_perl/Mail/
     or whatever it is on your system.
     They are listed when you type C< perl -V >)

=item ActivePerl's PPM

Depending on your PPM version:

    ppm install --location=http://alma.ch/perl/ppm Mail-Sendmail

or

    ppm install http://alma.ch/perl/ppm/Mail-Sendmail.ppd

But this way you don't get a chance to have a look at other files (Changes,
Todo, test.pl, ...).

=back

At the top of Sendmail.pm, set your default SMTP server(s), unless you specify
it with each message, or want to use the default (localhost).

Install MIME::QuotedPrint. This is not required but strongly recommended.

=head1 FEATURES

Automatic time zone detection, Date: header, MIME quoted-printable encoding
(if MIME::QuotedPrint installed), all of which can be overridden.

Bcc: and Cc: support.

Allows real names in From:, To: and Cc: fields

Doesn't send an X-Mailer: header (unless you do), and allows you to send any
header(s) you want.

Configurable retries and use of alternate servers if your mail server is
down

Good plain text error reporting

Experimental support for SMTP AUTHentication

=head1 LIMITATIONS

Headers are not encoded, even if they have accented characters.

Since the whole message is in memory, it's not suitable for
sending very big attached files.

The SMTP server has to be set manually in Sendmail.pm or in your script,
unless you have a mail server on localhost.

Doesn't work on OpenVMS, I was told. Cannot test this myself.

=head1 CONFIGURATION

=over 4

=item Default SMTP server(s)

This is probably all you want to configure. It is usually done through
I<$mailcfg{smtp}>, which you can edit at the top of the Sendmail.pm file.
This is a reference to a list of SMTP servers. You can also set it from
your script:

C<unshift @{$Mail::Sendmail::mailcfg{'smtp'}} , 'my.mail.server';>

Alternatively, you can specify the server in the I<%mail> hash you send
from your script, which will do the same thing:

C<$mail{smtp} = 'my.mail.server';>

A future version will (hopefully) try to set useful defaults for you
during the Makefile.PL.

=item Other configuration settings

See I<%mailcfg> under L<"DETAILS"> below for other configuration options.

=back

=head1 DETAILS

=head2 sendmail()

sendmail is the only thing exported to your namespace by default

C<sendmail(%mail) || print "Error sending mail: $Mail::Sendmail::error\n";>

It takes a hash containing the full message, with keys for all headers
and the body, as well as for some specific options.

It returns 1 on success or 0 on error, and rewrites
C<$Mail::Sendmail::error> and C<$Mail::Sendmail::log>.

Keys are NOT case-sensitive.

The colon after headers is not necessary.

The Body part key can be called 'Body', 'Message' or 'Text'.

The SMTP server key can be called 'Smtp' or 'Server'. If the connection to
this one fails, the other ones in C<$mailcfg{smtp}> will still be tried.

The following headers are added unless you specify them yourself:

    Mime-Version: 1.0
    Content-Type: 'text/plain; charset="iso-8859-1"'

    Content-Transfer-Encoding: quoted-printable
    or (if MIME::QuotedPrint not installed)
    Content-Transfer-Encoding: 8bit

    Date: [string returned by time_to_date()]

If you wish to use an envelope sender address different than the
From: address, set C<$mail{Sender}> in your %mail hash.



The following are not exported by default, but you can still access them
with their full name, or request their export on the use line like in:
C<use Mail::Sendmail qw(sendmail $address_rx time_to_date);>

=head3 embedding options in your %mail hash

The following options can be set in your %mail hash. The corresponding keys
will be removed before sending the mail.

=over 4

=item $mail{smtp} or $mail{server}

The SMTP server to try first. It will be added

=item $mail{port}

This option will be removed. To use a non-standard port, set it in your server name:

$mail{server}='my.smtp.server:2525' will try to connect to port 2525 on server my.smtp.server

=item $mail{auth}

This must be a reference to a hash containing all your authentication options:

$mail{auth} = \%options;
or
$mail{auth} = {user=>"username", password=>"password", method=>"DIGEST-MD5", required=>0 };

=over

=item user

username

=item pass or password

password

=item method

optional method. compared (stripped down) to available methods. If empty, will try all available.

=item required

optional. defaults to false. If set to true, no delivery will be attempted if
authentication fails. If false or undefined, and authentication fails or is not available, sending is tried without.

(different auth for different servers?)

=back

=back

=head2 Mail::Sendmail::time_to_date()

convert time ( as from C<time()> ) to an RFC 822 compliant string for the
Date header. See also L<"%Mail::Sendmail::mailcfg">.

=head2 $Mail::Sendmail::error

When you don't run with the B<-w> flag, the module sends no errors to
STDERR, but puts anything it has to complain about in here. You should
probably always check if it says something.

=head2 $Mail::Sendmail::log

A summary that you could write to a log file after each send

=head2 $Mail::Sendmail::address_rx

A handy regex to recognize e-mail addresses.

A correct regex for valid e-mail addresses was written by one of the judges
in the obfuscated Perl contest... :-) It is quite big. This one is an
attempt to a reasonable compromise, and should accept all real-world
internet style addresses. The domain part is required and comments or
characters that would need to be quoted are not supported.

  Example:
    $rx = $Mail::Sendmail::address_rx;
    if (/$rx/) {
      $address=$1;
      $user=$2;
      $domain=$3;
    }

=head2 %Mail::Sendmail::mailcfg

This hash contains installation-wide configuration options. You normally edit it once (if
ever) in Sendmail.pm and forget about it, but you could also access it from
your scripts. For readability, I'll assume you have imported it
(with something like C<use Mail::Sendmail qw(sendmail %mailcfg)>).

The keys are not case-sensitive: they are all converted to lowercase before
use. Writing C<$mailcfg{Port} = 2525;> is OK: the default $mailcfg{port}
(25) will be deleted and replaced with your new value of 2525.

=over 4

=item $mailcfg{smtp}

C<$mailcfg{smtp} = [qw(localhost my.other.mail.server)];>

This is a reference to a list of smtp servers, so if your main server is
down, the module tries the next one. If one of your servers uses a special
port, add it to the server name with a colon in front, to override the
default port (like in my.special.server:2525).

Default: localhost.

=item $mailcfg{from}

C<$mailcfg{from} = 'Mailing script me@mydomain.com';>

From address used if you don't supply one in your script. Should not be of
type 'user@localhost' since that may not be valid on the recipient's
host.

Default: undefined.

=item $mailcfg{mime}

C<$mailcfg{mime} = 1;>

Set this to 0 if you don't want any automatic MIME encoding. You normally
don't need this, the module should 'Do the right thing' anyway.

Default: 1;

=item $mailcfg{retries}

C<$mailcfg{retries} = 1;>

How many times should the connection to the same SMTP server be retried in
case of a failure.

Default: 1;

=item $mailcfg{delay}

C<$mailcfg{delay} = 1;>

Number of seconds to wait between retries. This delay also happens before
trying the next server in the list, if the retries for the current server
have been exhausted. For CGI scripts, you want few retries and short delays
to return with a results page before the http connection times out. For
unattended scripts, you may want to use many retries and long delays to
have a good chance of your mail being sent even with temporary failures on
your network.

Default: 1 (second);

=item $mailcfg{tz}

C<$mailcfg{tz} = '+0800';>

Normally, your time zone is set automatically, from the difference between
C<time()> and C<gmtime()>. This allows you to override automatic detection
in cases where your system is confused (such as some Win32 systems in zones
which do not use daylight savings time: see Microsoft KB article Q148681)

Default: undefined (automatic detection at run-time).

=item $mailcfg{port}

C<$mailcfg{port} = 25;>

Port used when none is specified in the server name.

Default: 25.

=item $mailcfg{debug}

C<$mailcfg{debug} = 0;>

Prints stuff to STDERR. Current maximum is 6, which prints the whole SMTP
session, except data exceeding 500 bytes.

Default: 0;

=back

=head2 $Mail::Sendmail::VERSION

The package version number (you can not import this one)

=head2 Configuration variables from previous versions

The following global variables were used in version 0.74 for configuration.
As from version 0.78_1, they are not supported anymore.
Use the I<%mailcfg> hash if you need to access the configuration
from your scripts.

=over 4

=item $Mail::Sendmail::default_smtp_server

=item $Mail::Sendmail::default_smtp_port

=item $Mail::Sendmail::default_sender

=item $Mail::Sendmail::TZ

=item $Mail::Sendmail::connect_retries

=item $Mail::Sendmail::retry_delay

=item $Mail::Sendmail::use_MIME

=back

=head1 ANOTHER EXAMPLE

  use Mail::Sendmail;

  print "Testing Mail::Sendmail version $Mail::Sendmail::VERSION\n";
  print "Default server: $Mail::Sendmail::mailcfg{smtp}->[0]\n";
  print "Default sender: $Mail::Sendmail::mailcfg{from}\n";

  %mail = (
      #To      => 'No to field this time, only Bcc and Cc',
      #From    => 'not needed, use default',
      Bcc     => 'Someone <him@there.com>, Someone else her@there.com',
      # only addresses are extracted from Bcc, real names disregarded
      Cc      => 'Yet someone else <xz@whatever.com>',
      # Cc will appear in the header. (Bcc will not)
      Subject => 'Test message',
      'X-Mailer' => "Mail::Sendmail version $Mail::Sendmail::VERSION",
  );


  $mail{Smtp} = 'special_server.for-this-message-only.domain.com';
  $mail{'X-custom'} = 'My custom additional header';
  $mail{'mESSaGE : '} = "The message key looks terrible, but works.";
  # cheat on the date:
  $mail{Date} = Mail::Sendmail::time_to_date( time() - 86400 );

  if (sendmail %mail) { print "Mail sent OK.\n" }
  else { print "Error sending mail: $Mail::Sendmail::error \n" }

  print "\n\$Mail::Sendmail::log says:\n", $Mail::Sendmail::log;

Also see http://alma.ch/perl/Mail-Sendmail-FAQ.html for examples
of HTML mail and sending attachments.

=head1 CHANGES

Main changes since version 0.79:

Experimental SMTP AUTH support (LOGIN PLAIN CRAM-MD5 DIGEST-MD5)

Fix bug where one refused RCPT TO: would abort everything

send EHLO, and parse response

Better handling of multi-line responses, and better error-messages

Non-conforming line-endings also normalized in headers

Now keeps the Sender header if it was used. Previous versions
only used it for the MAIL FROM: command and deleted it.

See the F<Changes> file for the full history. If you don't have it
because you installed through PPM, you can also find the latest
one on F<http://alma.ch/perl/scripts/Sendmail/Changes>.

=head1 NOTES

MIME::QuotedPrint is used by default on every message if available. It
allows reliable sending of accented characters, and also takes care of
too long lines (which can happen in HTML mails). It is available in the
MIME-Base64 package at http://www.perl.com/CPAN/modules/by-module/MIME/ or
through PPM.

Look at http://alma.ch/perl/Mail-Sendmail-FAQ.html for additional
info (CGI, examples of sending attachments, HTML mail etc...)

You can use this module freely. (Someone complained this is too vague.
So, more precisely: do whatever you want with it, but be warned that
terrible things will happen to you if you use it badly, like for sending
spam, or ...?)

Thanks to the many users who sent me feedback, bug reports, suggestions, etc.
And please excuse me if I forgot to answer your mail. I am not always reliable
in answering mail. I intend to set up a mailing list soon.

Last revision: 06.02.2003. Latest version should be available on
CPAN: F<http://www.cpan.org/modules/by-authors/id/M/MI/MIVKOVIC/>.

On Debian systems Sys::Hostname::Long is tried before Sys::Hostname in order
get a fully qualified domain name.

=head1 AUTHOR

Milivoj Ivkovic <mi\x40alma.ch> ("\x40" is "@" of course)

=head1 COPYRIGHT

Copyright (c) 1998-2017 Milivoj Ivkovic.  All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=cut
                                                                                                                                                                                                                                                                                                                                                                             usr/share/perl5/Sub/                                                                                0000755 0000000 0000000 00000000000 14723045613 012744  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl5/Sub/.wh..wh..opq                                                                    0000755 0000000 0000000 00000000000 00000000000 014657  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl5/Sub/Override.pm                                                                     0000644 0000000 0000000 00000020167 12075572750 015074  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Sub::Override;

use strict;
use warnings;

our $VERSION = '0.09';

my $_croak = sub {
    local *__ANON__ = '__ANON__croak';
    my ( $proto, $message ) = @_;
    require Carp;
    Carp::croak($message);
};

my $_validate_code_slot = sub {
    local *__ANON__ = '__ANON__validate_code_slot';
    my ( $self, $code_slot ) = @_;
    no strict 'refs';
    unless ( defined *{$code_slot}{CODE} ) {
        $self->$_croak("Cannot replace non-existent sub ($code_slot)");
    }
    return $self;
};

my $_validate_sub_ref = sub {
    local *__ANON__ = '__ANON__validate_sub_ref';
    my ( $self, $sub_ref ) = @_;
    unless ( 'CODE' eq ref $sub_ref ) {
        $self->$_croak("($sub_ref) must be a code reference");
    }
    return $self;
};

my $_normalize_sub_name = sub {
    local *__ANON__ = '__ANON__normalize_sub_name';
    my ( $self, $subname ) = @_;
    if ( ( $subname || '' ) =~ /^\w+$/ ) { # || "" for suppressing test warnings
        my $package = do {
            my $call_level = 0;
            my $this_package;
            while ( !$this_package || __PACKAGE__ eq $this_package ) {
                ($this_package) = caller($call_level);
                $call_level++;
            }
            $this_package;
        };
        $subname = "${package}::$subname";
    }
    return $subname;
};

sub new {
    my $class = shift;
    my $self = bless {}, $class;
    $self->replace(@_) if @_;
    return $self;
}

# because override() was a better name and this is what it should have been
# called.
*override = *replace{CODE};

sub replace {
    my ( $self, $sub_to_replace, $new_sub ) = @_;
    $sub_to_replace = $self->$_normalize_sub_name($sub_to_replace);
    $self->$_validate_code_slot($sub_to_replace)->$_validate_sub_ref($new_sub);
    {
        no strict 'refs';
        $self->{$sub_to_replace} ||= *$sub_to_replace{CODE};
        no warnings 'redefine';
        *$sub_to_replace = $new_sub;
    }
    return $self;
}

sub restore {
    my ( $self, $name_of_sub ) = @_;
    $name_of_sub = $self->$_normalize_sub_name($name_of_sub);
    if ( !$name_of_sub && 1 == keys %$self ) {
        ($name_of_sub) = keys %$self;
    }
    $self->$_croak(
        sprintf 'You must provide the name of a sub to restore: (%s)' => join
          ', ' => sort keys %$self )
      unless $name_of_sub;
    $self->$_croak("Cannot restore a sub that was not replaced ($name_of_sub)")
      unless exists $self->{$name_of_sub};
    no strict 'refs';
    no warnings 'redefine';
    *$name_of_sub = delete $self->{$name_of_sub};
    return $self;
}

sub DESTROY {
    my $self = shift;
    no strict 'refs';
    no warnings 'redefine';
    while ( my ( $sub_name, $sub_ref ) = each %$self ) {
        *$sub_name = $sub_ref;
    }
}

1;

__END__

=head1 NAME

Sub::Override - Perl extension for easily overriding subroutines

=head1 VERSION

0.09

=head1 SYNOPSIS

  use Sub::Override;

  sub foo { 'original sub' };
  print foo(); # prints 'original sub'

  my $override = Sub::Override->new( foo => sub { 'overridden sub' } );
  print foo(); # prints 'overridden sub'
  $override->restore;
  print foo(); # prints 'original sub'

=head1 DESCRIPTION

=head2 The Problem

Sometimes subroutines need to be overridden.  In fact, your author does this
constantly for tests.  Particularly when testing, using a Mock Object can be
overkill when all you want to do is override one tiny, little function.

Overriding a subroutine is often done with syntax similar to the following.

 {
   local *Some::sub = sub {'some behavior'};
   # do something
 }
 # original subroutine behavior restored

This has a few problems.

 {
   local *Get::some_feild = { 'some behavior' };
   # do something
 }

In the above example, not only have we probably misspelled the subroutine name,
but even if their had been a subroutine with that name, we haven't overridden
it.  These two bugs can be subtle to detect.

Further, if we're attempting to localize the effect by placing this code in a
block, the entire construct is cumbersome.

Hook::LexWrap also allows us to override sub behavior, but I can never remember
the exact syntax.

=head2 An easier way to replace subroutines

Instead, C<Sub::Override> allows the programmer to simply name the sub to
replace and to supply a sub to replace it with.

  my $override = Sub::Override->new('Some::sub', sub {'new data'});

  # which is equivalent to:
  my $override = Sub::Override->new;
  $override->replace('Some::sub', sub { 'new data' });

You can replace multiple subroutines, if needed:

  $override->replace('Some::sub1', sub { 'new data1' });
  $override->replace('Some::sub2', sub { 'new data2' });
  $override->replace('Some::sub3', sub { 'new data3' });

If replacing the subroutine succeeds, the object is returned.  This allows the
programmer to chain the calls, if this style of programming is preferred:

  $override->replace('Some::sub1', sub { 'new data1' })
           ->replace('Some::sub2', sub { 'new data2' })
           ->replace('Some::sub3', sub { 'new data3' });

If the subroutine has a prototype, the new subroutine should be declared with
same prototype as original one:

  $override->replace('Some::sub_with_proto', sub ($$) { ($_[0], $_ [1]) });

A subroutine may be replaced as many times as desired.  This is most useful
when testing how code behaves with multiple conditions.

  $override->replace('Some::thing', sub { 0 });
  is($object->foo, 'wibble', 'wibble is returned if Some::thing is false');

  $override->replace('Some::thing', sub { 1 });
  is($object->foo, 'puppies', 'puppies are returned if Some::thing is true');

=head2 Restoring subroutines

If the object falls out of scope, the original subs are restored.  However, if
you need to restore a subroutine early, just use the restore method:

  my $override = Sub::Override->new('Some::sub', sub {'new data'});
  # do stuff
  $override->restore;

Which is somewhat equivalent to:

  {
    my $override = Sub::Override->new('Some::sub', sub {'new data'});
    # do stuff
  }

If you have override more than one subroutine with an override object, you
will have to explicitly name the subroutine you wish to restore:

  $override->restore('This::sub');

Note C<restore()> will always restore the original behavior of the subroutine
no matter how many times you have overridden it.

=head2 Which package is the subroutine in?

Ordinarily, you want to fully qualify the subroutine by including the package
name.  However, failure to fully qualify the subroutine name will assume the
current package.

  package Foo;
  use Sub::Override;
  sub foo { 23 };
  my $override = Sub::Override->new( foo => sub { 42 } ); # assumes Foo::foo
  print foo(); # prints 42
  $override->restore;
  print foo(); # prints 23

=head1 METHODS

=head2 new

  my $sub = Sub::Override->new;
  my $sub = Sub::Override->new($sub_name, $sub_ref);

Creates a new C<Sub::Override> instance.  Optionally, you may override a 
subroutine while creating a new object.

=head2 replace

 $sub->replace($sub_name, $sub_body);

Temporarily replaces a subroutine with another subroutine.  Returns the
instance, so chaining the method is allowed:

 $sub->replace($sub_name, $sub_body)
     ->replace($another_sub, $another_body);

This method will C<croak> is the subroutine to be replaced does not exist.

=head2 override

 my $sub = Sub::Override->new;
 $sub->override($sub_name, $sub_body);

C<override> is an alternate name for C<replace>.  They are the same method.

=cut

=head2 restore

 $sub->restore($sub_name);

Restores the previous behavior of the subroutine.  This will happen
automatically if the C<Sub::Override> object falls out of scope.

=cut

=head1 EXPORT

None by default.

=head1 BUGS

Probably.  Tell me about 'em.

=head1 SEE ALSO

=over 4

=item *
Hook::LexWrap -- can also override subs, but with different capabilities

=item *
Test::MockObject -- use this if you need to alter an entire class

=back

=head1 AUTHOR

Curtis "Ovid" Poe, C<< <ovid [at] cpan [dot] org> >>

Reverse the name to email me.

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2004-2005 by Curtis "Ovid" Poe

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.2 or,
at your option, any later version of Perl 5 you may have available.


=cut
                                                                                                                                                                                                                                                                                                                                                                                                         usr/share/perl5/Sys/                                                                                0000755 0000000 0000000 00000000000 14723045615 012773  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl5/Sys/.wh..wh..opq                                                                    0000755 0000000 0000000 00000000000 00000000000 014704  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl5/Sys/Hostname/                                                                       0000755 0000000 0000000 00000000000 14723045615 014551  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl5/Sys/Hostname/Long.pm                                                                0000644 0000000 0000000 00000024720 14343165214 016007  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Sys::Hostname::Long;
use strict;
use Carp;

require Exporter;
use Sys::Hostname;

# Use perl < 5.6 compatible methods for now, change to 'use base' soon
@Sys::Hostname::Long::ISA     = qw/ Exporter Sys::Hostname /;

# Use perl < 5.6 compatible methods for now, change to 'our' soon.
use vars qw(@EXPORT $VERSION $hostlong %dispatch $lastdispatch);
@EXPORT  = qw/ hostname_long /;
$VERSION = '1.5';

%dispatch = (

	'gethostbyname' => {
		'title' => 'Get Host by Name',
		'description' => '',
		'exec' => sub {
			return gethostbyname('localhost');
		},
	},

	'exec_hostname' => {
		'title' => 'Execute "hostname"',
		'description' => '',
		'exec' => sub {
			my $tmp = `hostname`;
			$tmp =~ tr/\0\r\n//d;
			return $tmp;
		},
	},

	'win32_registry1' => {
		'title' => 'WIN32 Registry',
		'description' => 'LMachine/System/CurrentControlSet/Service/VxD/MSTCP/Domain',
		'exec' => sub {
			return eval q{
				use Win32::TieRegistry ( TiedHash => '%RegistryHash' );
				$RegistryHash{'LMachine'}{'System'}{'CurrentControlSet'}{'Services'}{'VxD'}{'MSTCP'}{'Domain'};
			};
		},
	},

	'uname' => {
		'title' => 'POSIX::uname',
		'description' => '',
		'exec' => sub {
			return eval {
				local $SIG{__DIE__};
				require POSIX;
				(POSIX::uname())[1];
			};
		},
	},

	# XXX This is the same as above - what happened to the other one !!!
	'win32_registry2' => {
		'title' => 'WIN32 Registry',
		'description' => 'LMachine/System/CurrentControlSet/Services/VxD/MSTCP/Domain',
		'exec' => sub {
			return eval q{
				use Win32::TieRegistry ( TiedHash => '%RegistryHash' );
				$RegistryHash{'LMachine'}{'System'}{'CurrentControlSet'}{'Services'}{'VxD'}{'MSTCP'}{'Domain'};
			};
		},
	},

	'exec_hostname_fqdn' => {
		'title' => 'Execute "hostname --fqdn"',
		'description' => '',
		'exec' => sub {
			# Skip for Solaris, and only run as non-root
			# Skip for darwin (Mac OS X), RT#28894
			my $tmp;
			if ( $^O ne 'darwin' ) {
				if ($< == 0) {
					$tmp = `su -s /bin/sh nobody -c "hostname --fqdn"`;
				} else {
					$tmp = `hostname --fqdn`;
				}
				$tmp =~ tr/\0\r\n//d;
			}
			return $tmp;
		},
	},

	'exec_hostname_domainname' => {
		'title' => 'Execute "hostname" and "domainname"',
		'description' => '',
		'exec' => sub {
			my $tmp = `hostname` . '.' . `domainname`;
			$tmp =~ tr/\0\r\n//d;
			return $tmp;
		},
	},


	'network' => {
		'title' => 'Network Socket hostname (not DNS)',
		'description' => '',
		'exec' => sub {
			return eval q{
				use IO::Socket;
				my $s = IO::Socket::INET->new(
					# m.root-servers.net (a remote IP number)
					PeerAddr => '202.12.27.33',
					# random safe port
					PeerPort => 2000,
					# We don't actually want to connect
					Proto => 'udp',
				) or die "Faile socket - $!";
				gethostbyaddr($s->sockaddr(), AF_INET);
			};
		},
	},

	'ip' => {
		'title' => 'Network Socket IP then Hostname via DNS',
		'description' => '',
		'exec' => sub {
			return eval q{
				use IO::Socket;
				my $s = IO::Socket::INET->new(
					# m.root-servers.net (a remote IP number)
					PeerAddr => '202.12.27.33',
					# random safe port
					PeerPort => 2000,
					# We don't actually want to connect
					Proto => 'udp',
				) or die "Faile socket - $!";
				$s->sockhost;
			};
		},
	},

);

# Dispatch from table
sub dispatcher {
	my ($method, @rest) = @_;
	$lastdispatch = $method;
	return $dispatch{$method}{exec}(@rest);
}

sub dispatch_keys {
	return sort keys %dispatch;
}

sub dispatch_title {
	return $dispatch{$_[0]}{title};
}

sub dispatch_description {
	return $dispatch{$_[0]}{description};
}

sub hostname_long {
	return $hostlong if defined $hostlong; 	# Cached copy (takes a while to lookup sometimes)
	my ($ip, $debug) = @_;

	$hostlong = dispatcher('uname');

	unless ($hostlong =~ m|.*\..*|) {
		if ($^O eq 'MacOS') {
			# http://bumppo.net/lists/macperl/1999/03/msg00282.html
			#	suggests that it will work (checking localhost) on both
			#	Mac and Windows.
			#	Personally this makes no sense what so ever as
			$hostlong = dispatcher('gethostbyname');

		} elsif ($^O eq 'IRIX') {	# XXX Patter match string !
