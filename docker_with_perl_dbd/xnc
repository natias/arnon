def files(ui, repo, *pats, **opts):
    """list tracked files

    Print files under Mercurial control in the working directory or
    specified revision for given files (excluding removed files).
    Files can be specified as filenames or filesets.

    If no files are given to match, this command prints the names
    of all files under Mercurial control.

    .. container:: verbose

      Template:

      The following keywords are supported in addition to the common template
      keywords and functions. See also :hg:`help templates`.

      :flags:   String. Character denoting file's symlink and executable bits.
      :path:    String. Repository-absolute path of the file.
      :size:    Integer. Size of the file in bytes.

      Examples:

      - list all files under the current directory::

          hg files .

      - shows sizes and flags for current revision::

          hg files -vr .

      - list all files named README::

          hg files -I "**/README"

      - list all binary files::

          hg files "set:binary()"

      - find files containing a regular expression::

          hg files "set:grep('bob')"

      - search tracked file contents with xargs and grep::

          hg files -0 | xargs -0 grep foo

    See :hg:`help patterns` and :hg:`help filesets` for more information
    on specifying file patterns.

    Returns 0 if a match is found, 1 otherwise.

    """

    opts = pycompat.byteskwargs(opts)
    rev = opts.get(b'rev')
    if rev:
        repo = scmutil.unhidehashlikerevs(repo, [rev], b'nowarn')
    ctx = logcmdutil.revsingle(repo, rev, None)

    end = b'\n'
    if opts.get(b'print0'):
        end = b'\0'
    fmt = b'%s' + end

    m = scmutil.match(ctx, pats, opts)
    ui.pager(b'files')
    uipathfn = scmutil.getuipathfn(ctx.repo(), legacyrelativevalue=True)
    with ui.formatter(b'files', opts) as fm:
        return cmdutil.files(
            ui, ctx, m, uipathfn, fm, fmt, opts.get(b'subrepos')
        )


@command(
    b'forget',
    [
        (b'i', b'interactive', None, _(b'use interactive mode')),
    ]
    + walkopts
    + dryrunopts,
    _(b'[OPTION]... FILE...'),
    helpcategory=command.CATEGORY_WORKING_DIRECTORY,
    helpbasic=True,
    inferrepo=True,
)
def forget(ui, repo, *pats, **opts):
    """forget the specified files on the next commit

    Mark the specified files so they will no longer be tracked
    after the next commit.

    This only removes files from the current branch, not from the
    entire project history, and it does not delete them from the
    working directory.

    To delete the file from the working directory, see :hg:`remove`.

    To undo a forget before the next commit, see :hg:`add`.

    .. container:: verbose

      Examples:

      - forget newly-added binary files::

          hg forget "set:added() and binary()"

      - forget files that would be excluded by .hgignore::

          hg forget "set:hgignore()"

    Returns 0 on success.
    """

    opts = pycompat.byteskwargs(opts)
    if not pats:
        raise error.InputError(_(b'no files specified'))

    m = scmutil.match(repo[None], pats, opts)
    dryrun, interactive = opts.get(b'dry_run'), opts.get(b'interactive')
    uipathfn = scmutil.getuipathfn(repo, legacyrelativevalue=True)
    rejected = cmdutil.forget(
        ui,
        repo,
        m,
        prefix=b"",
        uipathfn=uipathfn,
        explicitonly=False,
        dryrun=dryrun,
        interactive=interactive,
    )[0]
    return rejected and 1 or 0


@command(
    b'graft',
    [
        (b'r', b'rev', [], _(b'revisions to graft'), _(b'REV')),
        (
            b'',
            b'base',
            b'',
            _(b'base revision when doing the graft merge (ADVANCED)'),
            _(b'REV'),
        ),
        (b'c', b'continue', False, _(b'resume interrupted graft')),
        (b'', b'stop', False, _(b'stop interrupted graft')),
        (b'', b'abort', False, _(b'abort interrupted graft')),
        (b'e', b'edit', False, _(b'invoke editor on commit messages')),
        (b'', b'log', None, _(b'append graft info to log message')),
        (
            b'',
            b'no-commit',
            None,
            _(b"don't commit, just apply the changes in working directory"),
        ),
        (b'f', b'force', False, _(b'force graft')),
        (
            b'D',
            b'currentdate',
            False,
            _(b'record the current date as commit date'),
        ),
        (
            b'U',
            b'currentuser',
            False,
            _(b'record the current user as committer'),
        ),
    ]
    + commitopts2
    + mergetoolopts
    + dryrunopts,
    _(b'[OPTION]... [-r REV]... REV...'),
    helpcategory=command.CATEGORY_CHANGE_MANAGEMENT,
)
def graft(ui, repo, *revs, **opts):
    """copy changes from other branches onto the current branch

    This command uses Mercurial's merge logic to copy individual
    changes from other branches without merging branches in the
    history graph. This is sometimes known as 'backporting' or
    'cherry-picking'. By default, graft will copy user, date, and
    description from the source changesets.

    Changesets that are ancestors of the current revision, that have
    already been grafted, or that are merges will be skipped.

    If --log is specified, log messages will have a comment appended
    of the form::

      (grafted from CHANGESETHASH)

    If --force is specified, revisions will be grafted even if they
    are already ancestors of, or have been grafted to, the destination.
    This is useful when the revisions have since been backed out.

    If a graft merge results in conflicts, the graft process is
    interrupted so that the current merge can be manually resolved.
    Once all conflicts are addressed, the graft process can be
    continued with the -c/--continue option.

    The -c/--continue option reapplies all the earlier options.

    .. container:: verbose

      The --base option exposes more of how graft internally uses merge with a
      custom base revision. --base can be used to specify another ancestor than
      the first and only parent.

      The command::

        hg graft -r 345 --base 234

      is thus pretty much the same as::

        hg diff --from 234 --to 345 | hg import

      but using merge to resolve conflicts and track moved files.

      The result of a merge can thus be backported as a single commit by
      specifying one of the merge parents as base, and thus effectively
      grafting the changes from the other side.

      It is also possible to collapse multiple changesets and clean up history
      by specifying another ancestor as base, much like rebase --collapse
      --keep.

      The commit message can be tweaked after the fact using commit --amend .

      For using non-ancestors as the base to backout changes, see the backout
      command and the hidden --parent option.

    .. container:: verbose

      Examples:

      - copy a single change to the stable branch and edit its description::

          hg update stable
          hg graft --edit 9393

      - graft a range of changesets with one exception, updating dates::

          hg graft -D "2085::2093 and not 2091"

      - continue a graft after resolving conflicts::

          hg graft -c

      - show the source of a grafted changeset::

          hg log --debug -r .

      - show revisions sorted by date::

          hg log -r "sort(all(), date)"

      - backport the result of a merge as a single commit::

          hg graft -r 123 --base 123^

      - land a feature branch as one changeset::

          hg up -cr default
          hg graft -r featureX --base "ancestor('featureX', 'default')"

    See :hg:`help revisions` for more about specifying revisions.

    Returns 0 on successful completion, 1 if there are unresolved files.
    """
    with repo.wlock():
        return _dograft(ui, repo, *revs, **opts)


def _dograft(ui, repo, *revs, **opts):
    if revs and opts.get('rev'):
        ui.warn(
            _(
                b'warning: inconsistent use of --rev might give unexpected '
                b'revision ordering!\n'
            )
        )

    revs = list(revs)
    revs.extend(opts.get('rev'))
    # a dict of data to be stored in state file
    statedata = {}
    # list of new nodes created by ongoing graft
    statedata[b'newnodes'] = []

    cmdutil.resolve_commit_options(ui, opts)

    editor = cmdutil.getcommiteditor(editform=b'graft', **opts)

    cmdutil.check_at_most_one_arg(opts, 'abort', 'stop', 'continue')

    cont = False
    if opts.get('no_commit'):
        cmdutil.check_incompatible_arguments(
            opts,
            'no_commit',
            ['edit', 'currentuser', 'currentdate', 'log'],
        )

    graftstate = statemod.cmdstate(repo, b'graftstate')

    if opts.get('stop'):
        cmdutil.check_incompatible_arguments(
            opts,
            'stop',
            [
                'edit',
                'log',
                'user',
                'date',
                'currentdate',
                'currentuser',
                'rev',
            ],
        )
        return _stopgraft(ui, repo, graftstate)
    elif opts.get('abort'):
        cmdutil.check_incompatible_arguments(
            opts,
            'abort',
            [
                'edit',
                'log',
                'user',
                'date',
                'currentdate',
                'currentuser',
                'rev',
            ],
        )
        return cmdutil.abortgraft(ui, repo, graftstate)
    elif opts.get('continue'):
        cont = True
        if revs:
            raise error.InputError(_(b"can't specify --continue and revisions"))
        # read in unfinished revisions
        if graftstate.exists():
            statedata = cmdutil.readgraftstate(repo, graftstate)
            if statedata.get(b'date'):
                opts['date'] = statedata[b'date']
            if statedata.get(b'user'):
                opts['user'] = statedata[b'user']
            if statedata.get(b'log'):
                opts['log'] = True
            if statedata.get(b'no_commit'):
                opts['no_commit'] = statedata.get(b'no_commit')
            if statedata.get(b'base'):
                opts['base'] = statedata.get(b'base')
            nodes = statedata[b'nodes']
            revs = [repo[node].rev() for node in nodes]
        else:
            cmdutil.wrongtooltocontinue(repo, _(b'graft'))
    else:
        if not revs:
            raise error.InputError(_(b'no revisions specified'))
        cmdutil.checkunfinished(repo)
        cmdutil.bailifchanged(repo)
        revs = logcmdutil.revrange(repo, revs)

    skipped = set()
    basectx = None
    if opts.get('base'):
        basectx = logcmdutil.revsingle(repo, opts['base'], None)
    if basectx is None:
        # check for merges
        for rev in repo.revs(b'%ld and merge()', revs):
            ui.warn(_(b'skipping ungraftable merge revision %d\n') % rev)
            skipped.add(rev)
    revs = [r for r in revs if r not in skipped]
    if not revs:
        return -1
    if basectx is not None and len(revs) != 1:
        raise error.InputError(_(b'only one revision allowed with --base '))

    # Don't check in the --continue case, in effect retaining --force across
    # --continues. That's because without --force, any revisions we decided to
    # skip would have been filtered out here, so they wouldn't have made their
    # way to the graftstate. With --force, any revisions we would have otherwise
    # skipped would not have been filtered out, and if they hadn't been applied
    # already, they'd have been in the graftstate.
    if not (cont or opts.get('force')) and basectx is None:
        # check for ancestors of dest branch
        ancestors = repo.revs(b'%ld & (::.)', revs)
        for rev in ancestors:
            ui.warn(_(b'skipping ancestor revision %d:%s\n') % (rev, repo[rev]))

        revs = [r for r in revs if r not in ancestors]

        if not revs:
            return -1

        # analyze revs for earlier grafts
        ids = {}
        for ctx in repo.set(b"%ld", revs):
            ids[ctx.hex()] = ctx.rev()
            n = ctx.extra().get(b'source')
            if n:
                ids[n] = ctx.rev()

        # check ancestors for earlier grafts
        ui.debug(b'scanning for duplicate grafts\n')

        # The only changesets we can be sure doesn't contain grafts of any
        # revs, are the ones that are common ancestors of *all* revs:
        for rev in repo.revs(b'only(%d,ancestor(%ld))', repo[b'.'].rev(), revs):
            ctx = repo[rev]
            n = ctx.extra().get(b'source')
            if n in ids:
                try:
                    r = repo[n].rev()
                except error.RepoLookupError:
                    r = None
                if r in revs:
                    ui.warn(
                        _(
                            b'skipping revision %d:%s '
                            b'(already grafted to %d:%s)\n'
                        )
                        % (r, repo[r], rev, ctx)
                    )
                    revs.remove(r)
                elif ids[n] in revs:
                    if r is None:
                        ui.warn(
                            _(
                                b'skipping already grafted revision %d:%s '
                                b'(%d:%s also has unknown origin %s)\n'
                            )
                            % (ids[n], repo[ids[n]], rev, ctx, n[:12])
                        )
                    else:
                        ui.warn(
                            _(
                                b'skipping already grafted revision %d:%s '
                                b'(%d:%s also has origin %d:%s)\n'
                            )
                            % (ids[n], repo[ids[n]], rev, ctx, r, n[:12])
                        )
                    revs.remove(ids[n])
            elif ctx.hex() in ids:
                r = ids[ctx.hex()]
                if r in revs:
                    ui.warn(
                        _(
                            b'skipping already grafted revision %d:%s '
                            b'(was grafted from %d:%s)\n'
                        )
                        % (r, repo[r], rev, ctx)
                    )
                    revs.remove(r)
        if not revs:
            return -1

    if opts.get('no_commit'):
        statedata[b'no_commit'] = True
    if opts.get('base'):
        statedata[b'base'] = opts['base']
    for pos, ctx in enumerate(repo.set(b"%ld", revs)):
        desc = b'%d:%s "%s"' % (
            ctx.rev(),
            ctx,
            ctx.description().split(b'\n', 1)[0],
        )
        names = repo.nodetags(ctx.node()) + repo.nodebookmarks(ctx.node())
        if names:
            desc += b' (%s)' % b' '.join(names)
        ui.status(_(b'grafting %s\n') % desc)
        if opts.get('dry_run'):
            continue

        source = ctx.extra().get(b'source')
        extra = {}
        if source:
            extra[b'source'] = source
            extra[b'intermediate-source'] = ctx.hex()
        else:
            extra[b'source'] = ctx.hex()
        user = ctx.user()
        if opts.get('user'):
            user = opts['user']
            statedata[b'user'] = user
        date = ctx.date()
        if opts.get('date'):
            date = opts['date']
            statedata[b'date'] = date
        message = ctx.description()
        if opts.get('log'):
            message += b'\n(grafted from %s)' % ctx.hex()
            statedata[b'log'] = True

        # we don't merge the first commit when continuing
        if not cont:
            # perform the graft merge with p1(rev) as 'ancestor'
            overrides = {(b'ui', b'forcemerge'): opts.get('tool', b'')}
            base = ctx.p1() if basectx is None else basectx
            with ui.configoverride(overrides, b'graft'):
                stats = mergemod.graft(
                    repo, ctx, base, [b'local', b'graft', b'parent of graft']
                )
            # report any conflicts
            if stats.unresolvedcount > 0:
                # write out state for --continue
                nodes = [repo[rev].hex() for rev in revs[pos:]]
                statedata[b'nodes'] = nodes
                stateversion = 1
                graftstate.save(stateversion, statedata)
                ui.error(_(b"abort: unresolved conflicts, can't continue\n"))
                ui.error(_(b"(use 'hg resolve' and 'hg graft --continue')\n"))
                return 1
        else:
            cont = False

        # commit if --no-commit is false
        if not opts.get('no_commit'):
            node = repo.commit(
                text=message, user=user, date=date, extra=extra, editor=editor
            )
            if node is None:
                ui.warn(
                    _(b'note: graft of %d:%s created no changes to commit\n')
                    % (ctx.rev(), ctx)
                )
            # checking that newnodes exist because old state files won't have it
            elif statedata.get(b'newnodes') is not None:
                nn = statedata[b'newnodes']
                assert isinstance(nn, list)  # list of bytes
                nn.append(node)

    # remove state when we complete successfully
    if not opts.get('dry_run'):
        graftstate.delete()

    return 0


def _stopgraft(ui, repo, graftstate):
    """stop the interrupted graft"""
    if not graftstate.exists():
        raise error.StateError(_(b"no interrupted graft found"))
    pctx = repo[b'.']
    mergemod.clean_update(pctx)
    graftstate.delete()
    ui.status(_(b"stopped the interrupted graft\n"))
    ui.status(_(b"working directory is now at %s\n") % pctx.hex()[:12])
    return 0


statemod.addunfinished(
    b'graft',
    fname=b'graftstate',
    clearable=True,
    stopflag=True,
    continueflag=True,
    abortfunc=cmdutil.hgabortgraft,
    cmdhint=_(b"use 'hg graft --continue' or 'hg graft --stop' to stop"),
)


@command(
    b'grep',
    [
        (b'0', b'print0', None, _(b'end fields with NUL')),
        (b'', b'all', None, _(b'an alias to --diff (DEPRECATED)')),
        (
            b'',
            b'diff',
            None,
            _(
                b'search revision differences for when the pattern was added '
                b'or removed'
            ),
        ),
        (b'a', b'text', None, _(b'treat all files as text')),
        (
            b'f',
            b'follow',
            None,
            _(
                b'follow changeset history,'
                b' or file history across copies and renames'
            ),
        ),
        (b'i', b'ignore-case', None, _(b'ignore case when matching')),
        (
            b'l',
            b'files-with-matches',
            None,
            _(b'print only filenames and revisions that match'),
        ),
        (b'n', b'line-number', None, _(b'print matching line numbers')),
        (
            b'r',
            b'rev',
            [],
            _(b'search files changed within revision range'),
            _(b'REV'),
        ),
        (
            b'',
            b'all-files',
            None,
            _(
                b'include all files in the changeset while grepping (DEPRECATED)'
            ),
        ),
        (b'u', b'user', None, _(b'list the author (long with -v)')),
        (b'd', b'date', None, _(b'list the date (short with -q)')),
    ]
    + formatteropts
    + walkopts,
    _(b'[--diff] [OPTION]... PATTERN [FILE]...'),
    helpcategory=command.CATEGORY_FILE_CONTENTS,
    inferrepo=True,
    intents={INTENT_READONLY},
)
def grep(ui, repo, pattern, *pats, **opts):
    """search for a pattern in specified files

    Search the working directory or revision history for a regular
    expression in the specified files for the entire repository.

    By default, grep searches the repository files in the working
    directory and prints the files where it finds a match. To specify
    historical revisions instead of the working directory, use the
    --rev flag.

    To search instead historical revision differences that contains a
    change in match status ("-" for a match that becomes a non-match,
    or "+" for a non-match that becomes a match), use the --diff flag.

    PATTERN can be any Python (roughly Perl-compatible) regular
    expression.

    If no FILEs are specified and the --rev flag isn't supplied, all
    files in the working directory are searched. When using the --rev
    flag and specifying FILEs, use the --follow argument to also
    follow the specified FILEs across renames and copies.

    .. container:: verbose

      Template:

      The following keywords are supported in addition to the common template
      keywords and functions. See also :hg:`help templates`.

      :change:  String. Character denoting insertion ``+`` or removal ``-``.
                Available if ``--diff`` is specified.
      :lineno:  Integer. Line number of the match.
      :path:    String. Repository-absolute path of the file.
      :texts:   List of text chunks.

      And each entry of ``{texts}`` provides the following sub-keywords.

      :matched: Boolean. True if the chunk matches the specified pattern.
      :text:    String. Chunk content.

      See :hg:`help templates.operators` for the list expansion syntax.

    Returns 0 if a match is found, 1 otherwise.

    """
    cmdutil.check_incompatible_arguments(opts, 'all_files', ['all', 'diff'])
    opts = pycompat.byteskwargs(opts)
    diff = opts.get(b'all') or opts.get(b'diff')
    follow = opts.get(b'follow')
    if opts.get(b'all_files') is None and not diff:
        opts[b'all_files'] = True
    plaingrep = (
        opts.get(b'all_files')
        and not opts.get(b'rev')
        and not opts.get(b'follow')
    )
    all_files = opts.get(b'all_files')
    if plaingrep:
        opts[b'rev'] = [b'wdir()']

    reflags = re.M
    if opts.get(b'ignore_case'):
        reflags |= re.I
    try:
        regexp = util.re.compile(pattern, reflags)
    except re.error as inst:
        ui.warn(
            _(b"grep: invalid match pattern: %s\n")
            % stringutil.forcebytestr(inst)
        )
        return 1
    sep, eol = b':', b'\n'
    if opts.get(b'print0'):
        sep = eol = b'\0'

    searcher = grepmod.grepsearcher(
        ui, repo, regexp, all_files=all_files, diff=diff, follow=follow
    )

    getfile = searcher._getfile

    uipathfn = scmutil.getuipathfn(repo)

    def display(fm, fn, ctx, pstates, states):
        rev = scmutil.intrev(ctx)
        if fm.isplain():
            formatuser = ui.shortuser
        else:
            formatuser = pycompat.bytestr
        if ui.quiet:
            datefmt = b'%Y-%m-%d'
        else:
            datefmt = b'%a %b %d %H:%M:%S %Y %1%2'
        found = False

        @util.cachefunc
        def binary():
            flog = getfile(fn)
            try:
                return stringutil.binary(flog.read(ctx.filenode(fn)))
            except error.WdirUnsupported:
                return ctx[fn].isbinary()

        fieldnamemap = {b'linenumber': b'lineno'}
        if diff:
            iter = grepmod.difflinestates(pstates, states)
        else:
            iter = [(b'', l) for l in states]
        for change, l in iter:
            fm.startitem()
            fm.context(ctx=ctx)
            fm.data(node=fm.hexfunc(scmutil.binnode(ctx)), path=fn)
            fm.plain(uipathfn(fn), label=b'grep.filename')

            cols = [
                (b'rev', b'%d', rev, not plaingrep, b''),
                (
                    b'linenumber',
                    b'%d',
                    l.linenum,
                    opts.get(b'line_number'),
                    b'',
                ),
            ]
            if diff:
                cols.append(
                    (
                        b'change',
                        b'%s',
                        change,
                        True,
                        b'grep.inserted '
                        if change == b'+'
                        else b'grep.deleted ',
                    )
                )
            cols.extend(
                [
                    (
                        b'user',
                        b'%s',
                        formatuser(ctx.user()),
                        opts.get(b'user'),
                        b'',
                    ),
                    (
                        b'date',
                        b'%s',
                        fm.formatdate(ctx.date(), datefmt),
                        opts.get(b'date'),
                        b'',
                    ),
                ]
            )
            for name, fmt, data, cond, extra_label in cols:
                if cond:
                    fm.plain(sep, label=b'grep.sep')
                field = fieldnamemap.get(name, name)
                label = extra_label + (b'grep.%s' % name)
                fm.condwrite(cond, field, fmt, data, label=label)
            if not opts.get(b'files_with_matches'):
                fm.plain(sep, label=b'grep.sep')
                if not opts.get(b'text') and binary():
                    fm.plain(_(b" Binary file matches"))
                else:
                    displaymatches(fm.nested(b'texts', tmpl=b'{text}'), l)
            fm.plain(eol)
            found = True
            if opts.get(b'files_with_matches'):
                break
        return found

    def displaymatches(fm, l):
        p = 0
        for s, e in l.findpos(regexp):
            if p < s:
                fm.startitem()
                fm.write(b'text', b'%s', l.line[p:s])
                fm.data(matched=False)
            fm.startitem()
            fm.write(b'text', b'%s', l.line[s:e], label=b'grep.match')
            fm.data(matched=True)
            p = e
        if p < len(l.line):
            fm.startitem()
            fm.write(b'text', b'%s', l.line[p:])
            fm.data(matched=False)
        fm.end()

    found = False

    wopts = logcmdutil.walkopts(
        pats=pats,
        opts=opts,
        revspec=opts[b'rev'],
        include_pats=opts[b'include'],
        exclude_pats=opts[b'exclude'],
        follow=follow,
        force_changelog_traversal=all_files,
        filter_revisions_by_pats=not all_files,
    )
    revs, makefilematcher = logcmdutil.makewalker(repo, wopts)

    ui.pager(b'grep')
    fm = ui.formatter(b'grep', opts)
    for fn, ctx, pstates, states in searcher.searchfiles(revs, makefilematcher):
        r = display(fm, fn, ctx, pstates, states)
        found = found or r
        if r and not diff and not all_files:
            searcher.skipfile(fn, ctx.rev())
    fm.end()

    return not found


@command(
    b'heads',
    [
        (
            b'r',
            b'rev',
            b'',
            _(b'show only heads which are descendants of STARTREV'),
            _(b'STARTREV'),
        ),
        (b't', b'topo', False, _(b'show topological heads only')),
        (
            b'a',
            b'active',
            False,
            _(b'show active branchheads only (DEPRECATED)'),
        ),
        (b'c', b'closed', False, _(b'show normal and closed branch heads')),
    ]
    + templateopts,
    _(b'[-ct] [-r STARTREV] [REV]...'),
    helpcategory=command.CATEGORY_CHANGE_NAVIGATION,
    intents={INTENT_READONLY},
)
def heads(ui, repo, *branchrevs, **opts):
    """show branch heads

    With no arguments, show all open branch heads in the repository.
    Branch heads are changesets that have no descendants on the
    same branch. They are where development generally takes place and
    are the usual targets for update and merge operations.

    If one or more REVs are given, only open branch heads on the
    branches associated with the specified changesets are shown. This
    means that you can use :hg:`heads .` to see the heads on the
    currently checked-out branch.

    If -c/--closed is specified, also show branch heads marked closed
    (see :hg:`commit --close-branch`).

    If STARTREV is specified, only those heads that are descendants of
    STARTREV will be displayed.

    If -t/--topo is specified, named branch mechanics will be ignored and only
    topological heads (changesets with no children) will be shown.

    Returns 0 if matching heads are found, 1 if not.
    """

    opts = pycompat.byteskwargs(opts)
    start = None
    rev = opts.get(b'rev')
    if rev:
        repo = scmutil.unhidehashlikerevs(repo, [rev], b'nowarn')
        start = logcmdutil.revsingle(repo, rev, None).node()

    if opts.get(b'topo'):
        heads = [repo[h] for h in repo.heads(start)]
    else:
        heads = []
        for branch in repo.branchmap():
            heads += repo.branchheads(branch, start, opts.get(b'closed'))
        heads = [repo[h] for h in heads]

    if branchrevs:
        branches = {
            repo[r].branch() for r in logcmdutil.revrange(repo, branchrevs)
        }
        heads = [h for h in heads if h.branch() in branches]

    if opts.get(b'active') and branchrevs:
        dagheads = repo.heads(start)
        heads = [h for h in heads if h.node() in dagheads]

    if branchrevs:
        haveheads = {h.branch() for h in heads}
        if branches - haveheads:
            headless = b', '.join(b for b in branches - haveheads)
            msg = _(b'no open branch heads found on branches %s')
            if opts.get(b'rev'):
                msg += _(b' (started at %s)') % opts[b'rev']
            ui.warn((msg + b'\n') % headless)

    if not heads:
        return 1

    ui.pager(b'heads')
    heads = sorted(heads, key=lambda x: -(x.rev()))
    displayer = logcmdutil.changesetdisplayer(ui, repo, opts)
    for ctx in heads:
        displayer.show(ctx)
    displayer.close()


@command(
    b'help',
    [
        (b'e', b'extension', None, _(b'show only help for extensions')),
        (b'c', b'command', None, _(b'show only help for commands')),
        (b'k', b'keyword', None, _(b'show topics matching keyword')),
        (
            b's',
            b'system',
            [],
            _(b'show help for specific platform(s)'),
            _(b'PLATFORM'),
        ),
    ],
    _(b'[-eck] [-s PLATFORM] [TOPIC]'),
    helpcategory=command.CATEGORY_HELP,
    norepo=True,
    intents={INTENT_READONLY},
)
def help_(ui, name=None, **opts):
    """show help for a given topic or a help overview

    With no arguments, print a list of commands with short help messages.

    Given a topic, extension, or command name, print help for that
    topic.

    Returns 0 if successful.
    """

    keep = opts.get('system') or []
    if len(keep) == 0:
        if pycompat.sysplatform.startswith(b'win'):
            keep.append(b'windows')
        elif pycompat.sysplatform == b'OpenVMS':
            keep.append(b'vms')
        elif pycompat.sysplatform == b'plan9':
            keep.append(b'plan9')
        else:
            keep.append(b'unix')
            keep.append(pycompat.sysplatform.lower())
    if ui.verbose:
        keep.append(b'verbose')

    commands = sys.modules[__name__]
    formatted = help.formattedhelp(ui, commands, name, keep=keep, **opts)
    ui.pager(b'help')
    ui.write(formatted)


@command(
    b'identify|id',
    [
        (b'r', b'rev', b'', _(b'identify the specified revision'), _(b'REV')),
        (b'n', b'num', None, _(b'show local revision number')),
        (b'i', b'id', None, _(b'show global revision id')),
        (b'b', b'branch', None, _(b'show branch')),
        (b't', b'tags', None, _(b'show tags')),
        (b'B', b'bookmarks', None, _(b'show bookmarks')),
    ]
    + remoteopts
    + formatteropts,
    _(b'[-nibtB] [-r REV] [SOURCE]'),
    helpcategory=command.CATEGORY_CHANGE_NAVIGATION,
    optionalrepo=True,
    intents={INTENT_READONLY},
)
def identify(
