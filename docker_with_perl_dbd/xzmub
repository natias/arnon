PERL_CALLCONV void
Perl_wrap_keyword_plugin(pTHX_ Perl_keyword_plugin_t new_plugin, Perl_keyword_plugin_t *old_plugin_p);
#define PERL_ARGS_ASSERT_WRAP_KEYWORD_PLUGIN    \
        assert(new_plugin); assert(old_plugin_p)

PERL_CALLCONV void
Perl_wrap_op_checker(pTHX_ Optype opcode, Perl_check_t new_checker, Perl_check_t *old_checker_p);
#define PERL_ARGS_ASSERT_WRAP_OP_CHECKER        \
        assert(new_checker); assert(old_checker_p)

PERL_CALLCONV void
Perl_write_to_stderr(pTHX_ SV *msv)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_WRITE_TO_STDERR        \
        assert(msv)

PERL_CALLCONV void
Perl_xs_boot_epilog(pTHX_ const SSize_t ax);
#define PERL_ARGS_ASSERT_XS_BOOT_EPILOG

PERL_CALLCONV Stack_off_t
Perl_xs_handshake(const U32 key, void *v_my_perl, const char *file, ...);
#define PERL_ARGS_ASSERT_XS_HANDSHAKE           \
        assert(v_my_perl); assert(file)

PERL_CALLCONV int
Perl_yyerror(pTHX_ const char * const s)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_YYERROR                \
        assert(s)

PERL_CALLCONV int
Perl_yyerror_pv(pTHX_ const char * const s, U32 flags)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_YYERROR_PV             \
        assert(s)

PERL_CALLCONV int
Perl_yyerror_pvn(pTHX_ const char * const s, STRLEN len, U32 flags)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_YYERROR_PVN

PERL_CALLCONV int
Perl_yylex(pTHX);
#define PERL_ARGS_ASSERT_YYLEX

PERL_CALLCONV int
Perl_yyparse(pTHX_ int gramtype)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_YYPARSE

PERL_CALLCONV void
Perl_yyquit(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_YYQUIT

PERL_CALLCONV void
Perl_yyunlex(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_YYUNLEX

#if defined(DEBUGGING)
PERL_CALLCONV int
Perl_get_debug_opts(pTHX_ const char **s, bool givehelp)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_GET_DEBUG_OPTS        \
        assert(s)

PERL_CALLCONV void
Perl_hv_assert(pTHX_ HV *hv);
# define PERL_ARGS_ASSERT_HV_ASSERT             \
        assert(hv)

PERL_CALLCONV void
Perl_pad_setsv(pTHX_ PADOFFSET po, SV *sv);
# define PERL_ARGS_ASSERT_PAD_SETSV             \
        assert(sv)

PERL_CALLCONV SV *
Perl_pad_sv(pTHX_ PADOFFSET po);
# define PERL_ARGS_ASSERT_PAD_SV

PERL_CALLCONV void
Perl_set_padlist(CV *cv, PADLIST *padlist);
# define PERL_ARGS_ASSERT_SET_PADLIST           \
        assert(cv)

#endif /* defined(DEBUGGING) */
#if defined(DEBUG_LEAKING_SCALARS_FORK_DUMP)
PERL_CALLCONV void
Perl_dump_sv_child(pTHX_ SV *sv)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_DUMP_SV_CHILD         \
        assert(sv)

#endif
#if !defined(EBCDIC)

# if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE unsigned int
Perl_variant_byte_number(PERL_UINTMAX_T word)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_VARIANT_BYTE_NUMBER

# endif
#endif
#if defined(F_FREESP) && !defined(HAS_CHSIZE) && !defined(HAS_TRUNCATE)
PERL_CALLCONV I32
Perl_my_chsize(pTHX_ int fd, Off_t length)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_MY_CHSIZE

#endif
#if !defined(HAS_GETENV_LEN)
PERL_CALLCONV char *
Perl_getenv_len(pTHX_ const char *env_elem, unsigned long *len)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_GETENV_LEN            \
        assert(env_elem); assert(len)

#endif
#if !defined(HAS_MKOSTEMP)
PERL_CALLCONV int
Perl_my_mkostemp(char *templte, int flags)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_MY_MKOSTEMP           \
        assert(templte)

#endif
#if !defined(HAS_MKSTEMP)
PERL_CALLCONV int
Perl_my_mkstemp(char *templte)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_MY_MKSTEMP            \
        assert(templte)

#endif
#if defined(HAS_MSG) || defined(HAS_SEM) || defined(HAS_SHM)
PERL_CALLCONV I32
Perl_do_ipcctl(pTHX_ I32 optype, SV **mark, SV **sp)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_DO_IPCCTL             \
        assert(mark); assert(sp)

PERL_CALLCONV I32
Perl_do_ipcget(pTHX_ I32 optype, SV **mark, SV **sp)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_DO_IPCGET             \
        assert(mark); assert(sp)

PERL_CALLCONV SSize_t
Perl_do_msgrcv(pTHX_ SV **mark, SV **sp)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_DO_MSGRCV             \
        assert(mark); assert(sp)

PERL_CALLCONV I32
Perl_do_msgsnd(pTHX_ SV **mark, SV **sp)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_DO_MSGSND             \
        assert(mark); assert(sp)

PERL_CALLCONV I32
Perl_do_semop(pTHX_ SV **mark, SV **sp)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_DO_SEMOP              \
        assert(mark); assert(sp)

PERL_CALLCONV I32
Perl_do_shmio(pTHX_ I32 optype, SV **mark, SV **sp)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_DO_SHMIO              \
        assert(mark); assert(sp)

#endif /* defined(HAS_MSG) || defined(HAS_SEM) || defined(HAS_SHM) */
#if defined(HAS_PIPE)
PERL_CALLCONV int
Perl_PerlProc_pipe_cloexec(pTHX_ int *pipefd)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_PERLPROC_PIPE_CLOEXEC \
        assert(pipefd)

#endif
#if !defined(HAS_RENAME)
PERL_CALLCONV I32
Perl_same_dirent(pTHX_ const char *a, const char *b)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_SAME_DIRENT           \
        assert(a); assert(b)

#endif
#if !defined(HAS_SIGNBIT)
PERL_CALLCONV int
Perl_signbit(NV f)
        __attribute__warn_unused_result__
        __attribute__pure__;
# define PERL_ARGS_ASSERT_PERL_SIGNBIT

#endif
#if defined(HAS_SOCKET)
PERL_CALLCONV int
Perl_PerlSock_accept_cloexec(pTHX_ int listenfd, struct sockaddr *addr, Sock_size_t *addrlen)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_PERLSOCK_ACCEPT_CLOEXEC

PERL_CALLCONV int
Perl_PerlSock_socket_cloexec(pTHX_ int domain, int type, int protocol)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_PERLSOCK_SOCKET_CLOEXEC

#endif /* defined(HAS_SOCKET) */
#if   defined(HAS_SOCKETPAIR) ||                                     \
    ( defined(AF_INET) && defined(HAS_SOCKET) && defined(PF_INET) && \
      defined(SOCK_DGRAM) )
PERL_CALLCONV int
Perl_PerlSock_socketpair_cloexec(pTHX_ int domain, int type, int protocol, int *pairfd)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_PERLSOCK_SOCKETPAIR_CLOEXEC \
        assert(pairfd)

#endif
#if !defined(HAS_STRLCPY)
STATIC Size_t
Perl_my_strlcpy(char *dst, const char *src, Size_t size);
# define PERL_ARGS_ASSERT_MY_STRLCPY

#endif
#if defined(HAVE_INTERP_INTERN)
PERL_CALLCONV void
Perl_sys_intern_clear(pTHX);
# define PERL_ARGS_ASSERT_SYS_INTERN_CLEAR

PERL_CALLCONV void
Perl_sys_intern_init(pTHX);
# define PERL_ARGS_ASSERT_SYS_INTERN_INIT

# if defined(USE_ITHREADS)
PERL_CALLCONV void
Perl_sys_intern_dup(pTHX_ struct interp_intern *src, struct interp_intern *dst);
#   define PERL_ARGS_ASSERT_SYS_INTERN_DUP      \
        assert(src); assert(dst)

# endif
#endif /* defined(HAVE_INTERP_INTERN) */
#if defined(_MSC_VER)
PERL_CALLCONV int
Perl_magic_regdatum_set(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_MAGIC_REGDATUM_SET    \
        assert(sv); assert(mg)

#else
PERL_CALLCONV_NO_RET int
Perl_magic_regdatum_set(pTHX_ SV *sv, MAGIC *mg)
        __attribute__noreturn__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_MAGIC_REGDATUM_SET    \
        assert(sv); assert(mg)

#endif
#if defined(MULTIPLICITY)
PERL_CALLCONV_NO_RET void
Perl_croak_nocontext(const char *pat, ...)
        __attribute__noreturn__
        __attribute__format__null_ok__(__printf__,1,2);
# define PERL_ARGS_ASSERT_CROAK_NOCONTEXT

PERL_CALLCONV void
Perl_deb_nocontext(const char *pat, ...)
        __attribute__format__(__printf__,1,2);
# define PERL_ARGS_ASSERT_DEB_NOCONTEXT         \
        assert(pat)

PERL_CALLCONV_NO_RET OP *
Perl_die_nocontext(const char *pat, ...)
        __attribute__noreturn__
        __attribute__format__null_ok__(__printf__,1,2);
# define PERL_ARGS_ASSERT_DIE_NOCONTEXT

PERL_CALLCONV char *
Perl_form_nocontext(const char *pat, ...)
        __attribute__format__(__printf__,1,2);
# define PERL_ARGS_ASSERT_FORM_NOCONTEXT        \
        assert(pat)

PERL_CALLCONV void
Perl_load_module_nocontext(U32 flags, SV *name, SV *ver, ...);
# define PERL_ARGS_ASSERT_LOAD_MODULE_NOCONTEXT \
        assert(name)

PERL_CALLCONV SV *
Perl_mess_nocontext(const char *pat, ...)
        __attribute__format__(__printf__,1,2);
# define PERL_ARGS_ASSERT_MESS_NOCONTEXT        \
        assert(pat)

PERL_CALLCONV void *
Perl_my_cxt_init(pTHX_ int *indexp, size_t size);
# define PERL_ARGS_ASSERT_MY_CXT_INIT           \
        assert(indexp)

PERL_CALLCONV SV *
Perl_newSVpvf_nocontext(const char * const pat, ...)
        __attribute__format__(__printf__,1,2);
# define PERL_ARGS_ASSERT_NEWSVPVF_NOCONTEXT    \
        assert(pat)

PERL_CALLCONV void
Perl_sv_catpvf_mg_nocontext(SV * const sv, const char * const pat, ...)
        __attribute__format__(__printf__,2,3);
# define PERL_ARGS_ASSERT_SV_CATPVF_MG_NOCONTEXT \
        assert(sv); assert(pat)

PERL_CALLCONV void
Perl_sv_catpvf_nocontext(SV * const sv, const char * const pat, ...)
        __attribute__format__(__printf__,2,3);
# define PERL_ARGS_ASSERT_SV_CATPVF_NOCONTEXT   \
        assert(sv); assert(pat)

PERL_CALLCONV void
Perl_sv_setpvf_mg_nocontext(SV * const sv, const char * const pat, ...)
        __attribute__format__(__printf__,2,3);
# define PERL_ARGS_ASSERT_SV_SETPVF_MG_NOCONTEXT \
        assert(sv); assert(pat)

PERL_CALLCONV void
Perl_sv_setpvf_nocontext(SV * const sv, const char * const pat, ...)
        __attribute__format__(__printf__,2,3);
# define PERL_ARGS_ASSERT_SV_SETPVF_NOCONTEXT   \
        assert(sv); assert(pat)

PERL_CALLCONV void
Perl_warn_nocontext(const char *pat, ...)
        __attribute__format__(__printf__,1,2);
# define PERL_ARGS_ASSERT_WARN_NOCONTEXT        \
        assert(pat)

PERL_CALLCONV void
Perl_warner_nocontext(U32 err, const char *pat, ...)
        __attribute__format__(__printf__,2,3);
# define PERL_ARGS_ASSERT_WARNER_NOCONTEXT      \
        assert(pat)

#endif /* defined(MULTIPLICITY) */
#if defined(MYMALLOC)
PERL_CALLCONV void
Perl_dump_mstats(pTHX_ const char *s);
# define PERL_ARGS_ASSERT_DUMP_MSTATS           \
        assert(s)

PERL_CALLCONV int
Perl_get_mstats(pTHX_ perl_mstats_t *buf, int buflen, int level);
# define PERL_ARGS_ASSERT_GET_MSTATS            \
        assert(buf)

PERL_CALLCONV MEM_SIZE
Perl_malloc_good_size(size_t nbytes)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_MALLOC_GOOD_SIZE

PERL_CALLCONV MEM_SIZE
Perl_malloced_size(void *p)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_MALLOCED_SIZE         \
        assert(p)

#endif /* defined(MYMALLOC) */
#if !defined(NO_MATHOMS)
PERL_CALLCONV bool
Perl_do_aexec(pTHX_ SV *really, SV **mark, SV **sp);
# define PERL_ARGS_ASSERT_DO_AEXEC              \
        assert(mark); assert(sp)

PERL_CALLCONV bool
Perl_do_open(pTHX_ GV *gv, const char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp);
# define PERL_ARGS_ASSERT_DO_OPEN               \
        assert(gv); assert(name)

PERL_CALLCONV GV *
Perl_gv_AVadd(pTHX_ GV *gv);
# define PERL_ARGS_ASSERT_GV_AVADD

PERL_CALLCONV GV *
Perl_gv_HVadd(pTHX_ GV *gv);
# define PERL_ARGS_ASSERT_GV_HVADD

PERL_CALLCONV GV *
Perl_gv_IOadd(pTHX_ GV *gv);
# define PERL_ARGS_ASSERT_GV_IOADD

PERL_CALLCONV void
Perl_gv_efullname3(pTHX_ SV *sv, const GV *gv, const char *prefix);
# define PERL_ARGS_ASSERT_GV_EFULLNAME3         \
        assert(sv); assert(gv)

PERL_CALLCONV GV *
Perl_gv_fetchmethod(pTHX_ HV *stash, const char *name);
# define PERL_ARGS_ASSERT_GV_FETCHMETHOD        \
        assert(stash); assert(name)

PERL_CALLCONV void
Perl_gv_fullname3(pTHX_ SV *sv, const GV *gv, const char *prefix);
# define PERL_ARGS_ASSERT_GV_FULLNAME3          \
        assert(sv); assert(gv)

PERL_CALLCONV SV *
Perl_hv_delete(pTHX_ HV *hv, const char *key, I32 klen, I32 flags);
# define PERL_ARGS_ASSERT_HV_DELETE             \
        assert(key)

PERL_CALLCONV SV *
Perl_hv_delete_ent(pTHX_ HV *hv, SV *keysv, I32 flags, U32 hash);
# define PERL_ARGS_ASSERT_HV_DELETE_ENT         \
        assert(keysv)

PERL_CALLCONV bool
Perl_hv_exists(pTHX_ HV *hv, const char *key, I32 klen)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_HV_EXISTS             \
        assert(key)

PERL_CALLCONV bool
Perl_hv_exists_ent(pTHX_ HV *hv, SV *keysv, U32 hash)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_HV_EXISTS_ENT         \
        assert(keysv)

PERL_CALLCONV SV **
Perl_hv_fetch(pTHX_ HV *hv, const char *key, I32 klen, I32 lval);
# define PERL_ARGS_ASSERT_HV_FETCH              \
        assert(key)

PERL_CALLCONV HE *
Perl_hv_fetch_ent(pTHX_ HV *hv, SV *keysv, I32 lval, U32 hash);
# define PERL_ARGS_ASSERT_HV_FETCH_ENT          \
        assert(keysv)

PERL_CALLCONV HE *
Perl_hv_iternext(pTHX_ HV *hv)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_HV_ITERNEXT           \
        assert(hv)

PERL_CALLCONV void
Perl_hv_magic(pTHX_ HV *hv, GV *gv, int how);
# define PERL_ARGS_ASSERT_HV_MAGIC              \
        assert(hv)

PERL_CALLCONV SV **
Perl_hv_store(pTHX_ HV *hv, const char *key, I32 klen, SV *val, U32 hash);
# define PERL_ARGS_ASSERT_HV_STORE

PERL_CALLCONV HE *
Perl_hv_store_ent(pTHX_ HV *hv, SV *key, SV *val, U32 hash);
# define PERL_ARGS_ASSERT_HV_STORE_ENT

PERL_CALLCONV SV **
Perl_hv_store_flags(pTHX_ HV *hv, const char *key, I32 klen, SV *val, U32 hash, int flags);
# define PERL_ARGS_ASSERT_HV_STORE_FLAGS

PERL_CALLCONV char *
Perl_instr(const char *big, const char *little)
        __attribute__warn_unused_result__
        __attribute__pure__;
# define PERL_ARGS_ASSERT_INSTR                 \
        assert(big); assert(little)

PERL_CALLCONV STRLEN
Perl_is_utf8_char_buf(const U8 *buf, const U8 *buf_end);
# define PERL_ARGS_ASSERT_IS_UTF8_CHAR_BUF      \
        assert(buf); assert(buf_end)

PERL_CALLCONV bool
Perl_is_utf8_string_loc(const U8 *s, const STRLEN len, const U8 **ep);
# define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOC    \
        assert(s); assert(ep)

PERL_CALLCONV AV *
Perl_newAV(pTHX)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_NEWAV

PERL_CALLCONV HV *
Perl_newHV(pTHX)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_NEWHV

PERL_CALLCONV IO *
Perl_newIO(pTHX)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_NEWIO

PERL_CALLCONV CV *
Perl_newSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *block);
# define PERL_ARGS_ASSERT_NEWSUB

PERL_CALLCONV SV *
Perl_newSVsv(pTHX_ SV * const old)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_NEWSVSV

PERL_CALLCONV void
Perl_save_freeop(pTHX_ OP *o);
# define PERL_ARGS_ASSERT_SAVE_FREEOP

PERL_CALLCONV void
Perl_save_freepv(pTHX_ char *pv);
# define PERL_ARGS_ASSERT_SAVE_FREEPV

PERL_CALLCONV void
Perl_save_freesv(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SAVE_FREESV

PERL_CALLCONV void
Perl_save_mortalizesv(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SAVE_MORTALIZESV      \
        assert(sv)

PERL_CALLCONV void
Perl_save_op(pTHX);
# define PERL_ARGS_ASSERT_SAVE_OP

PERL_CALLCONV bool
Perl_sv_2bool(pTHX_ SV * const sv);
# define PERL_ARGS_ASSERT_SV_2BOOL              \
        assert(sv)

PERL_CALLCONV IV
Perl_sv_2iv(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SV_2IV                \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_2pv(pTHX_ SV *sv, STRLEN *lp);
# define PERL_ARGS_ASSERT_SV_2PV                \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_2pv_nolen(pTHX_ SV *sv)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SV_2PV_NOLEN          \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_2pvbyte(pTHX_ SV *sv, STRLEN * const lp);
# define PERL_ARGS_ASSERT_SV_2PVBYTE            \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_2pvbyte_nolen(pTHX_ SV *sv)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SV_2PVBYTE_NOLEN      \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_2pvutf8(pTHX_ SV *sv, STRLEN * const lp);
# define PERL_ARGS_ASSERT_SV_2PVUTF8            \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_2pvutf8_nolen(pTHX_ SV *sv)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SV_2PVUTF8_NOLEN      \
        assert(sv)

PERL_CALLCONV UV
Perl_sv_2uv(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SV_2UV                \
        assert(sv)

PERL_CALLCONV void
Perl_sv_catpvn(pTHX_ SV *dsv, const char *sstr, STRLEN len);
# define PERL_ARGS_ASSERT_SV_CATPVN             \
        assert(dsv); assert(sstr)

PERL_CALLCONV void
Perl_sv_catpvn_mg(pTHX_ SV *dsv, const char *sstr, STRLEN len);
# define PERL_ARGS_ASSERT_SV_CATPVN_MG          \
        assert(dsv); assert(sstr)

PERL_CALLCONV void
Perl_sv_catsv(pTHX_ SV *dsv, SV *sstr);
# define PERL_ARGS_ASSERT_SV_CATSV              \
        assert(dsv)

PERL_CALLCONV void
Perl_sv_catsv_mg(pTHX_ SV *dsv, SV *sstr);
# define PERL_ARGS_ASSERT_SV_CATSV_MG           \
        assert(dsv)

PERL_CALLCONV void
Perl_sv_copypv(pTHX_ SV * const dsv, SV * const ssv);
# define PERL_ARGS_ASSERT_SV_COPYPV             \
        assert(dsv); assert(ssv)

PERL_CALLCONV I32
Perl_sv_eq(pTHX_ SV *sv1, SV *sv2);
# define PERL_ARGS_ASSERT_SV_EQ

PERL_CALLCONV void
Perl_sv_force_normal(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SV_FORCE_NORMAL       \
        assert(sv)

PERL_CALLCONV void
Perl_sv_insert(pTHX_ SV * const bigstr, const STRLEN offset, const STRLEN len, const char * const little, const STRLEN littlelen);
# define PERL_ARGS_ASSERT_SV_INSERT             \
        assert(bigstr); assert(little)

PERL_CALLCONV SV *
Perl_sv_mortalcopy(pTHX_ SV * const oldsv)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SV_MORTALCOPY

PERL_CALLCONV void
Perl_sv_nolocking(pTHX_ SV *sv)
        __attribute__deprecated__;
# define PERL_ARGS_ASSERT_SV_NOLOCKING

PERL_CALLCONV void
Perl_sv_nounlocking(pTHX_ SV *sv)
        __attribute__deprecated__;
# define PERL_ARGS_ASSERT_SV_NOUNLOCKING

PERL_CALLCONV char *
Perl_sv_pv(pTHX_ SV *sv)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SV_PV                 \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_pvbyte(pTHX_ SV *sv)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SV_PVBYTE             \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_pvn_force(pTHX_ SV *sv, STRLEN *lp);
# define PERL_ARGS_ASSERT_SV_PVN_FORCE          \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_pvutf8(pTHX_ SV *sv)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SV_PVUTF8             \
        assert(sv)

PERL_CALLCONV void
Perl_sv_setsv(pTHX_ SV *dsv, SV *ssv);
# define PERL_ARGS_ASSERT_SV_SETSV              \
        assert(dsv)

PERL_CALLCONV void
Perl_sv_taint(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SV_TAINT              \
        assert(sv)

PERL_CALLCONV void
Perl_sv_unref(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SV_UNREF              \
        assert(sv)

PERL_CALLCONV void
Perl_sv_usepvn(pTHX_ SV *sv, char *ptr, STRLEN len);
# define PERL_ARGS_ASSERT_SV_USEPVN             \
        assert(sv)

PERL_CALLCONV void
Perl_sv_usepvn_mg(pTHX_ SV *sv, char *ptr, STRLEN len);
# define PERL_ARGS_ASSERT_SV_USEPVN_MG          \
        assert(sv)

PERL_CALLCONV bool
Perl_sv_utf8_downgrade(pTHX_ SV * const sv, const bool fail_ok);
# define PERL_ARGS_ASSERT_SV_UTF8_DOWNGRADE     \
        assert(sv)

PERL_CALLCONV STRLEN
Perl_sv_utf8_upgrade(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE       \
        assert(sv)

PERL_CALLCONV UV
Perl_utf8_to_uvchr(pTHX_ const U8 *s, STRLEN *retlen)
        __attribute__deprecated__;
# define PERL_ARGS_ASSERT_UTF8_TO_UVCHR         \
        assert(s)

PERL_CALLCONV UV
Perl_utf8_to_uvuni(pTHX_ const U8 *s, STRLEN *retlen)
        __attribute__deprecated__;
# define PERL_ARGS_ASSERT_UTF8_TO_UVUNI         \
        assert(s)

PERL_CALLCONV UV
Perl_utf8n_to_uvuni(pTHX_ const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
        __attribute__deprecated__;
# define PERL_ARGS_ASSERT_UTF8N_TO_UVUNI        \
        assert(s)

PERL_CALLCONV U8 *
Perl_uvuni_to_utf8(pTHX_ U8 *d, UV uv)
        __attribute__deprecated__;
# define PERL_ARGS_ASSERT_UVUNI_TO_UTF8         \
        assert(d)

# if defined(PERL_DONT_CREATE_GVSV)
PERL_CALLCONV GV *
Perl_gv_SVadd(pTHX_ GV *gv);
#   define PERL_ARGS_ASSERT_GV_SVADD

# endif
# if defined(PERL_IN_MATHOMS_C) || defined(PERL_IN_OP_C) || \
     defined(PERL_IN_PERLY_C)   || defined(PERL_IN_TOKE_C)
PERL_CALLCONV OP *
Perl_ref(pTHX_ OP *o, I32 type);
#   define PERL_ARGS_ASSERT_REF

# endif
# if defined(USE_LOCALE_COLLATE)
PERL_CALLCONV char *
Perl_sv_collxfrm(pTHX_ SV * const sv, STRLEN * const nxp);
#   define PERL_ARGS_ASSERT_SV_COLLXFRM         \
        assert(sv); assert(nxp)

# endif
#endif /* !defined(NO_MATHOMS) */
#if defined(PERL_ANY_COW)
PERL_CALLCONV SV *
Perl_sv_setsv_cow(pTHX_ SV *dsv, SV *ssv);
# define PERL_ARGS_ASSERT_SV_SETSV_COW          \
        assert(ssv)

#endif
#if defined(PERL_CORE)
PERL_CALLCONV void
Perl_opslab_force_free(pTHX_ OPSLAB *slab)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_OPSLAB_FORCE_FREE     \
        assert(slab)

PERL_CALLCONV void
Perl_opslab_free(pTHX_ OPSLAB *slab)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_OPSLAB_FREE           \
        assert(slab)

PERL_CALLCONV void
Perl_opslab_free_nopad(pTHX_ OPSLAB *slab)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_OPSLAB_FREE_NOPAD     \
        assert(slab)

PERL_CALLCONV void
Perl_parser_free_nexttoke_ops(pTHX_ yy_parser *parser, OPSLAB *slab)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_PARSER_FREE_NEXTTOKE_OPS \
        assert(parser); assert(slab)

# if defined(PERL_DEBUG_READONLY_OPS)
PERL_CALLCONV void
Perl_Slab_to_ro(pTHX_ OPSLAB *slab);
#   define PERL_ARGS_ASSERT_SLAB_TO_RO          \
        assert(slab)

PERL_CALLCONV void
Perl_Slab_to_rw(pTHX_ OPSLAB * const slab);
#   define PERL_ARGS_ASSERT_SLAB_TO_RW          \
        assert(slab)

# endif /* defined(PERL_DEBUG_READONLY_OPS) */
# if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE bool
S_should_warn_nl(const char *pv)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_SHOULD_WARN_NL      \
        assert(pv)

# endif
#endif /* defined(PERL_CORE) */
#if defined(PERL_CORE) || defined(PERL_EXT)
PERL_CALLCONV bool
Perl_isSCRIPT_RUN(pTHX_ const U8 *s, const U8 *send, const bool utf8_target)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_ISSCRIPT_RUN          \
        assert(s); assert(send)

#endif /* defined(PERL_CORE) || defined(PERL_EXT) */
#if defined(PERL_CORE) || defined(PERL_USE_VOLATILE_API)
PERL_CALLCONV void
Perl_finalize_optree(pTHX_ OP *o);
# define PERL_ARGS_ASSERT_FINALIZE_OPTREE       \
        assert(o)

PERL_CALLCONV void
Perl_optimize_optree(pTHX_ OP *o);
# define PERL_ARGS_ASSERT_OPTIMIZE_OPTREE       \
        assert(o)

#endif /* defined(PERL_CORE) || defined(PERL_USE_VOLATILE_API) */
#if defined(PERL_DEBUG_READONLY_COW)
PERL_CALLCONV void
Perl_sv_buf_to_ro(pTHX_ SV *sv)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_SV_BUF_TO_RO          \
        assert(sv)

#endif
#if defined(PERL_DEBUG_READONLY_OPS)
PERL_CALLCONV PADOFFSET
Perl_op_refcnt_dec(pTHX_ OP *o);
# define PERL_ARGS_ASSERT_OP_REFCNT_DEC         \
        assert(o)

PERL_CALLCONV OP *
Perl_op_refcnt_inc(pTHX_ OP *o);
# define PERL_ARGS_ASSERT_OP_REFCNT_INC

#endif /* defined(PERL_DEBUG_READONLY_OPS) */
#if defined(PERL_DEFAULT_DO_EXEC3_IMPLEMENTATION)
PERL_CALLCONV bool
Perl_do_exec(pTHX_ const char *cmd)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_DO_EXEC               \
        assert(cmd)

#else
PERL_CALLCONV bool
Perl_do_exec(pTHX_ const char *cmd)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_DO_EXEC               \
        assert(cmd)

#endif
#if defined(PERL_IMPLICIT_SYS)
PERL_CALLCONV PerlInterpreter *
perl_alloc_using(struct IPerlMem *ipM, struct IPerlMem *ipMS, struct IPerlMem *ipMP, struct IPerlEnv *ipE, struct IPerlStdIO *ipStd, struct IPerlLIO *ipLIO, struct IPerlDir *ipD, struct IPerlSock *ipS, struct IPerlProc *ipP);
# define PERL_ARGS_ASSERT_PERL_ALLOC_USING      \
        assert(ipM); assert(ipMS); assert(ipMP); assert(ipE); assert(ipStd); \
        assert(ipLIO); assert(ipD); assert(ipS); assert(ipP)

# if defined(USE_ITHREADS)
PERL_CALLCONV PerlInterpreter *
perl_clone_using(PerlInterpreter *proto_perl, UV flags, struct IPerlMem *ipM, struct IPerlMem *ipMS, struct IPerlMem *ipMP, struct IPerlEnv *ipE, struct IPerlStdIO *ipStd, struct IPerlLIO *ipLIO, struct IPerlDir *ipD, struct IPerlSock *ipS, struct IPerlProc *ipP);
#   define PERL_ARGS_ASSERT_PERL_CLONE_USING    \
        assert(proto_perl); assert(ipM); assert(ipMS); assert(ipMP); assert(ipE); \
        assert(ipStd); assert(ipLIO); assert(ipD); assert(ipS); assert(ipP)

# endif
#else /* if !defined(PERL_IMPLICIT_SYS) */
PERL_CALLCONV I32
Perl_my_pclose(pTHX_ PerlIO *ptr);
# define PERL_ARGS_ASSERT_MY_PCLOSE

PERL_CALLCONV PerlIO *
Perl_my_popen(pTHX_ const char *cmd, const char *mode);
# define PERL_ARGS_ASSERT_MY_POPEN              \
        assert(cmd); assert(mode)

#endif /* !defined(PERL_IMPLICIT_SYS) */
#if defined(PERL_IN_AV_C)
STATIC MAGIC *
S_get_aux_mg(pTHX_ AV *av);
# define PERL_ARGS_ASSERT_GET_AUX_MG            \
        assert(av)

#endif
#if defined(PERL_IN_BUILTIN_C) || defined(PERL_IN_OP_C)
PERL_CALLCONV void
Perl_finish_export_lexical(pTHX)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_FINISH_EXPORT_LEXICAL

PERL_CALLCONV void
Perl_import_builtin_bundle(pTHX_ U16 ver)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_IMPORT_BUILTIN_BUNDLE

PERL_CALLCONV void
Perl_prepare_export_lexical(pTHX)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_PREPARE_EXPORT_LEXICAL

#endif /* defined(PERL_IN_BUILTIN_C) || defined(PERL_IN_OP_C) */
#if defined(PERL_IN_CLASS_C) || defined(PERL_IN_GLOBALS_C) || \
    defined(PERL_IN_OP_C)    || defined(PERL_IN_PEEP_C)
PERL_CALLCONV OP *
Perl_ck_anoncode(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CK_ANONCODE           \
        assert(o)

PERL_CALLCONV OP *
Perl_ck_backtick(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CK_BACKTICK           \
        assert(o)

PERL_CALLCONV OP *
Perl_ck_bitop(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CK_BITOP              \
        assert(o)

PERL_CALLCONV OP *
Perl_ck_classname(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CK_CLASSNAME          \
        assert(o)

PERL_CALLCONV OP *
Perl_ck_cmp(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CK_CMP                \
        assert(o)

PERL_CALLCONV OP *
Perl_ck_concat(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CK_CONCAT             \
        assert(o)

PERL_CALLCONV OP *
Perl_ck_defined(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CK_DEFINED            \
        assert(o)

PERL_CALLCONV OP *
Perl_ck_delete(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CK_DELETE             \
        assert(o)

PERL_CALLCONV OP *
Perl_ck_each(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CK_EACH               \
        assert(o)

PERL_CALLCONV OP *
Perl_ck_eof(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CK_EOF                \
        assert(o)

PERL_CALLCONV OP *
Perl_ck_eval(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CK_EVAL               \
        assert(o)

PERL_CALLCONV OP *
Perl_ck_exec(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CK_EXEC               \
        assert(o)

PERL_CALLCONV OP *
Perl_ck_exists(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CK_EXISTS             \
        assert(o)

PERL_CALLCONV OP *
Perl_ck_ftst(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CK_FTST               \
        assert(o)

PERL_CALLCONV OP *
Perl_ck_fun(pTHX_ OP *o)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CK_FUN                \
        assert(o)

PERL_CALLCONV OP *
Perl_ck_glob(pTHX_ OP *o)
