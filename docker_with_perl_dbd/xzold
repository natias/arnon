   Boston, MA 02111-1307, USA.  */


/* Interface Programmable des Applications ??
 */
#ifndef LIBWMF_IPA_H
#define LIBWMF_IPA_H

#include <libwmf/types.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Type declarations
 */
typedef struct _wmfRGB                 wmfRGB;
typedef struct _wmfBMP                 wmfBMP;

typedef struct _wmfBrush               wmfBrush;
typedef struct _wmfPen                 wmfPen;
typedef struct _wmfFont                wmfFont;

typedef struct _wmfFontData            wmfFontData;
typedef struct _wmfColorData           wmfColorData;

typedef struct _wmfDC                  wmfDC;

typedef struct _wmfFlood_t             wmfFlood_t;
typedef struct _wmfDrawPixel_t         wmfDrawPixel_t;
typedef struct _wmfDrawArc_t           wmfDrawArc_t;
typedef struct _wmfDrawLine_t          wmfDrawLine_t;
typedef struct _wmfPolyLine_t          wmfPolyLine_t;
typedef struct _wmfPolyPoly_t          wmfPolyPoly_t;
typedef struct _wmfDrawRectangle_t     wmfDrawRectangle_t;
typedef struct _wmfPolyRectangle_t     wmfPolyRectangle_t;
typedef struct _wmfBMP_Read_t          wmfBMP_Read_t;
typedef struct _wmfBMP_Draw_t          wmfBMP_Draw_t;
typedef struct _wmfROP_Draw_t          wmfROP_Draw_t;
typedef struct _wmfDrawText_t          wmfDrawText_t;
typedef struct _wmfUserData_t          wmfUserData_t;

typedef struct _wmfFunctionReference   wmfFunctionReference;

typedef float (*wmfStringWidth) (wmfAPI*,wmfFont*,char*);
typedef void  (*wmfMap)         (wmfAPI*,wmfFont*);

/* Device-layer device-independent default functions
 */
extern void   wmf_ipa_bmp_b64 (wmfAPI*,wmfBMP_Draw_t*,wmfStream*);
extern void   wmf_ipa_bmp_png (wmfAPI*,wmfBMP_Draw_t*,char*);
extern void   wmf_ipa_bmp_jpg (wmfAPI*,wmfBMP_Draw_t*,char*);
extern void   wmf_ipa_bmp_eps (wmfAPI*,wmfBMP_Draw_t*,char*);
extern void   wmf_ipa_bmp_read (wmfAPI*,wmfBMP_Read_t*);
extern void   wmf_ipa_bmp_free (wmfAPI*,wmfBMP*);
extern wmfBMP wmf_ipa_bmp_copy (wmfAPI*,wmfBMP*,unsigned int,unsigned int);
extern int    wmf_ipa_bmp_color (wmfAPI*,wmfBMP*,wmfRGB*,unsigned int,unsigned int);
extern void   wmf_ipa_bmp_setcolor (wmfAPI*,wmfBMP*,wmfRGB*,unsigned char,unsigned int,unsigned int);
extern int    wmf_ipa_bmp_interpolate (wmfAPI*,wmfBMP*,wmfRGB*,float,float);

extern void          wmf_ipa_color_init (wmfAPI*);
extern void          wmf_ipa_color_add (wmfAPI*,wmfRGB*);
extern unsigned long wmf_ipa_color_index (wmfAPI*,wmfRGB*);
extern unsigned long wmf_ipa_color_count (wmfAPI*);
extern wmfRGB*       wmf_ipa_color (wmfAPI*,unsigned long);

extern char*        wmf_ipa_page_format (wmfAPI*,wmf_page_t);
extern unsigned int wmf_ipa_page_width  (wmfAPI*,wmf_page_t);
extern unsigned int wmf_ipa_page_height (wmfAPI*,wmf_page_t);

/* Other useful functions
 */
extern wmfRGB wmf_rgb_white (void);
extern wmfRGB wmf_rgb_black (void);
extern wmfRGB wmf_rgb_color (wmfAPI*,float,float,float);

/* Structure definitions
 */
struct _wmfRGB
{	unsigned char r;
	unsigned char g;
	unsigned char b;
};

struct _wmfBMP
{	U16 width;
	U16 height;

	void* data;
};

struct _wmfPen
{	U16 lopnStyle;

	double width;
	double height;

	wmfRGB lopnColor;
};

struct _wmfBrush
{	U16 lbStyle;
	U16 lbHatch;

	wmfRGB lbColor;
	wmfBMP bmp;
};

struct _wmfFont
{	U16 lfHeight;
	U16 lfWidth;

	S16 lfEscapement;
	S16 lfOrientation;

	U16 lfWeight;

	U8 lfItalic;
	U8 lfUnderline;
	U8 lfStrikeOut;
	U8 lfCharSet;
	U8 lfOutPrecision;
	U8 lfClipPrecision;
	U8 lfQuality;
	U8 lfPitchAndFamily;

	char* lfFaceName;

	void* user_data;
};

/**
 * API->font_data is a pointer to a wmfFontData. wmf_api_create () sets this up automatically, but
 * wmf_lite_create () does not. If you use wmf_lite_create () then you \b must create your own
 * wmfFontData. \b libwmflite requires you to define \p map and \p stringwidth functions but the
 * rest of these fields are ignored (they are only used by \b libwmf).
 */
struct _wmfFontData
{	/**
	 * Necessary field: exactly what the function does is irrelevant.
	 */
	wmfMap map;

	/**
	 * Necessary field: returns width of specified string in points, assuming (unstretched)
	 * font size of 1pt.
	 */
	wmfStringWidth stringwidth;

	/**
	 * A handle for data, unused by libwmflite
	 */
	void* user_data;
};

struct _wmfColorData
{	unsigned long max;
	unsigned long count;

	wmfRGB* rgb;
};

struct _wmfDC
{	void* userdata;

	wmfBrush* brush;
	wmfPen* pen;
	wmfFont* font;

	wmfRGB textcolor;
	wmfRGB bgcolor;

	U16 textalign;
	U16 bgmode;
	U16 polyfillmode;
	U16 charextra;
	U16 breakextra;

	U16 ROPmode;

	struct
	{	S32 Ox;
		S32 Oy;
		S32 width;
		S32 height;
	} Window;

	double pixel_width; /* Display pixel dimensions (inches) */
	double pixel_height;

	U16 map_mode;

	void* clip;
};

/* IPA info structures
 */
struct _wmfFlood_t
{	wmfDC* dc;

	wmfD_Coord pt;
	wmfRGB color;

	U16 type;

	double pixel_width;
	double pixel_height;
};

struct _wmfDrawPixel_t
{	wmfDC* dc;

	wmfD_Coord pt;
	wmfRGB color;

	double pixel_width;
	double pixel_height;
};

struct _wmfDrawArc_t
{	wmfDC* dc;

	wmfD_Coord TL;
	wmfD_Coord BR;

	wmfD_Coord start; /* draw_ellipse: (ignored) */
	wmfD_Coord end;
};

struct _wmfDrawLine_t
{	wmfDC* dc;

	wmfD_Coord from;
	wmfD_Coord to;
};

struct _wmfPolyLine_t
{	wmfDC* dc;

	wmfD_Coord* pt;

	U16 count;
};

struct _wmfPolyPoly_t
{	wmfDC* dc;

	wmfD_Coord** pt; /* pt[i][*] = points of ith polygon */

	U16* count;      /* points in ith polygon */
	U16  npoly;      /* number of polygons */
};

struct _wmfDrawRectangle_t
{	wmfDC* dc;

	wmfD_Coord TL;
	wmfD_Coord BR;

	float width; /* draw_rectangle: axes of corner ellipses; zero if un-rounded */
	float height;
};

struct _wmfPolyRectangle_t
{	wmfDC* dc;

	wmfD_Coord* TL; /* region_frame & region_paint: TL[count],BR[count] give the */
	wmfD_Coord* BR; /* final `extents'... */

	unsigned int count;

	float width;  /* region_frame: border thickness; zero otherwise */
	float height;
};

struct _wmfBMP_Read_t          /* Two means available for accessing BMP image:        */
{	long offset;           /* (1) position in source file of start of BMP;        *
                                * use API->bbuf.seek to set pos(ition), etc.          */
	long length;           /* (2) buffer of length length containing image of BMP */
	unsigned char* buffer;

	U16 width;  /* WMF player may preset these values; zero otherwise. */
	U16 height; /* Use caution - may be buggy... ?? [TODO]             */

	wmfBMP bmp;
};

struct _wmfBMP_Draw_t
{	wmfDC* dc;

	wmfD_Coord pt;
	wmfBMP bmp;

	U32 type;

	struct
	{	U16 x;
		U16 y;
		U16 w;
		U16 h;
	} crop;

	double pixel_width;
	double pixel_height;
};

struct _wmfROP_Draw_t
{	wmfDC* dc;

	wmfD_Coord TL;
	wmfD_Coord BR;

	U32 ROP;

	double pixel_width;
	double pixel_height;
};

struct _wmfDrawText_t
{	wmfDC* dc;

	wmfD_Coord pt;

	wmfD_Coord TL; /* Clip zone */
	wmfD_Coord BR;

	struct /* An estimated surround zone */
	{	wmfD_Coord TL;
		wmfD_Coord TR;
		wmfD_Coord BL;
		wmfD_Coord BR;
	} bbox;

	char* str;

	U16 flags;

	double font_height;
	double font_ratio;  /* width to height ratio */
};

struct _wmfUserData_t	/* TODO: Need to be careful with usage here; not all these are set by the player! */
{	wmfDC* dc;          /* dc is guaranteed */

	void* data;         /* data also, except for init */
};

struct _wmfFunctionReference
{	void (*device_open) (wmfAPI*);
	void (*device_close) (wmfAPI*);
	void (*device_begin) (wmfAPI*);
	void (*device_end) (wmfAPI*);

	void (*flood_interior) (wmfAPI*,wmfFlood_t*);
	void (*flood_exterior) (wmfAPI*,wmfFlood_t*);

	void (*draw_pixel) (wmfAPI*,wmfDrawPixel_t*);
	void (*draw_pie) (wmfAPI*,wmfDrawArc_t*);
	void (*draw_chord) (wmfAPI*,wmfDrawArc_t*);
	void (*draw_arc) (wmfAPI*,wmfDrawArc_t*);
	void (*draw_ellipse) (wmfAPI*,wmfDrawArc_t*);
	void (*draw_line) (wmfAPI*,wmfDrawLine_t*);
	void (*poly_line) (wmfAPI*,wmfPolyLine_t*);
	void (*draw_polygon) (wmfAPI*,wmfPolyLine_t*);
	void (*draw_polypolygon) (wmfAPI*,wmfPolyPoly_t*);
	void (*draw_rectangle) (wmfAPI*,wmfDrawRectangle_t*);

	void (*rop_draw) (wmfAPI*,wmfROP_Draw_t*);
	void (*bmp_draw) (wmfAPI*,wmfBMP_Draw_t*);
	void (*bmp_read) (wmfAPI*,wmfBMP_Read_t*);
	void (*bmp_free) (wmfAPI*,wmfBMP*);

	void (*draw_text) (wmfAPI*,wmfDrawText_t*);

	void (*udata_init) (wmfAPI*,wmfUserData_t*);
	void (*udata_copy) (wmfAPI*,wmfUserData_t*);
	void (*udata_set) (wmfAPI*,wmfUserData_t*);
	void (*udata_free) (wmfAPI*,wmfUserData_t*);

	void (*region_frame) (wmfAPI*,wmfPolyRectangle_t*);
	void (*region_paint) (wmfAPI*,wmfPolyRectangle_t*);
	void (*region_clip) (wmfAPI*,wmfPolyRectangle_t*);
};

#ifdef __cplusplus
}
#endif

#endif /* ! LIBWMF_IPA_H */
                                                                                                                                                                                                                                                                         usr/include/libwmf/macro.h                                                                          0000644 0000000 0000000 00000024255 14425477016 014254  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* libwmf (<libwmf/macro.h>): library for wmf conversion
   Copyright (C) 2000 - various; see CREDITS, ChangeLog, and sources

   The libwmf Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   The libwmf Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with the libwmf Library; see the file COPYING.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */


#ifndef LIBWMF_MACRO_H
#define LIBWMF_MACRO_H

#include <math.h>

#include <libwmf/defs.h>
#include <libwmf/types.h>
#include <libwmf/ipa.h>

/**
 * WMF_PEN_STYLE(wmfPen* P)  -> (U16) pen style
 */
#define WMF_PEN_STYLE(P)  ((P)->lopnStyle & PS_STYLE_MASK)

/**
 * WMF_PEN_ENDCAP(wmfPen* P) -> (U16) endcap style
 */
#define WMF_PEN_ENDCAP(P) ((P)->lopnStyle & PS_ENDCAP_MASK)

/**
 * WMF_PEN_JOIN(wmfPen* P)   -> (U16) join style
 */
#define WMF_PEN_JOIN(P)   ((P)->lopnStyle & PS_JOIN_MASK)

/**
 * WMF_PEN_TYPE(wmfPen* P)   -> (U16) `type' of pen (??)
 */
#define WMF_PEN_TYPE(P)   ((P)->lopnStyle & PS_TYPE_MASK)

/**
 * WMF_PEN_WIDTH(wmfPen* P)  -> (double) pen `width'  (thickness w.r.t. x-axis)
 */
#define WMF_PEN_WIDTH(P)  ((P)->width)

/**
 * WMF_PEN_HEIGHT(wmfPen* P) -> (double) pen `height' (thickness w.r.t. y-axis)
 */
#define WMF_PEN_HEIGHT(P) ((P)->height)

/**
 * WMF_PEN_COLOR(wmfPen* P) -> (wmfRGB*) pen color
 */
#define WMF_PEN_COLOR(P)  (&((P)->lopnColor))

/**
 * WMF_PEN_SET_STYLE(wmfPen* P,(U16) pen style)
 */
#define WMF_PEN_SET_STYLE(P,Z)  (P)->lopnStyle = ((P)->lopnStyle & ~PS_STYLE_MASK ) | ((Z) & PS_STYLE_MASK )

/**
 * WMF_PEN_SET_ENDCAP(wmfPen* P,(U16) endcap style)
 */
#define WMF_PEN_SET_ENDCAP(P,Z) (P)->lopnStyle = ((P)->lopnStyle & ~PS_ENDCAP_MASK) | ((Z) & PS_ENDCAP_MASK)

/**
 * WMF_PEN_SET_JOIN(wmfPen* P,(U16) join style)
 */
#define WMF_PEN_SET_JOIN(P,Z)   (P)->lopnStyle = ((P)->lopnStyle & ~PS_JOIN_MASK  ) | ((Z) & PS_JOIN_MASK  )

/**
 * WMF_PEN_SET_TYPE(wmfPen* P,(U16) `type' of pen)
 */
#define WMF_PEN_SET_TYPE(P,Z)   (P)->lopnStyle = ((P)->lopnStyle & ~PS_TYPE_MASK  ) | ((Z) & PS_TYPE_MASK  )

/**
 * WMF_PEN_SET_WIDTH(wmfPen* P,(double) pen `width')
 */
#define WMF_PEN_SET_WIDTH(P,Z)  (P)->width  = (Z)

/**
 * WMF_PEN_SET_HEIGHT(wmfPen* P,(double) pen `height')
 */
#define WMF_PEN_SET_HEIGHT(P,Z) (P)->height = (Z)

/**
 * WMF_PEN_SET_COLOR(wmfPen* P,(wmfRGB*) pen color)
 */
#define WMF_PEN_SET_COLOR(P,Z)  (P)->lopnColor = (*(Z))

/**
 * WMF_BRUSH_STYLE(wmfBrush* B) -> (U16) brush style
 */
#define WMF_BRUSH_STYLE(B)  ((B)->lbStyle)

/**
 * WMF_BRUSH_HATCH(wmfBrush* B) -> (U16) brush hatch style
 */
#define WMF_BRUSH_HATCH(B)  ((B)->lbHatch)

/**
 * WMF_BRUSH_COLOR(wmfBrush* B) -> (wmfRGB*) brush color
 */
#define WMF_BRUSH_COLOR(B)  (&((B)->lbColor))

/**
 * WMF_BRUSH_BITMAP(wmfBrush* B) -> (wmfBMP*) brush bitmap
 */
#define WMF_BRUSH_BITMAP(B) (&((B)->bmp))

/**
 * WMF_BRUSH_SET_STYLE(wmfBrush* B,(U16) brush style)
 */
#define WMF_BRUSH_SET_STYLE(B,Z)  (B)->lbStyle = (Z)

/**
 * WMF_BRUSH_SET_HATCH(wmfBrush* B,(U16) brush hatch style)
 */
#define WMF_BRUSH_SET_HATCH(B,Z)  (B)->lbHatch = (Z)

/**
 * WMF_BRUSH_SET_COLOR(wmfBrush* B,(wmfRGB*) brush color)
 */
#define WMF_BRUSH_SET_COLOR(B,Z)  (B)->lbColor = (*(Z))

/**
 * WMF_BRUSH_SET_BITMAP(wmfBrush* B,(wmfBMP*) brush bitmap)
 */
#define WMF_BRUSH_SET_BITMAP(B,Z) (B)->bmp = (*(Z))

/**
 * WMF_TEXT_ANGLE(wmfFont* F) -> (double) text angle in radians
 */
#define WMF_TEXT_ANGLE(F)     ((((double) (F)->lfEscapement) / 10) * M_PI / 180)

/**
 * WMF_TEXT_UNDERLINE(wmfFont* F) -> (U8) ?? whether to underline (?? how thick)
 */
#define WMF_TEXT_UNDERLINE(F)   ((F)->lfUnderline)

/**
 * WMF_TEXT_STRIKEOUT(wmfFont* F) -> (U8) ?? whether to strikeout (?? how thick)
 */
#define WMF_TEXT_STRIKEOUT(F)   ((F)->lfStrikeOut)

/**
 * WMF_FONT_WIDTH(wmfFont* F)   -> (U16) font `width'
 */
#define WMF_FONT_WIDTH(F)       ((F)->lfWidth)

/**
 * WMF_FONT_HEIGHT(wmfFont* F)  -> (U16) font height
 */
#define WMF_FONT_HEIGHT(F)      ((F)->lfHeight)

/**
 * WMF_FONT_ESCAPEMENT(wmfFont* F)  -> (S16) escapement [use WMF_TEXT_ANGLE instead]
 */
#define WMF_FONT_ESCAPEMENT(F)  ((F)->lfEscapement)

/**
 * WMF_FONT_ORIENTATION(wmfFont* F) -> (S16) orientation [??]
 */
#define WMF_FONT_ORIENTATION(F) ((F)->lfOrientation)

/**
 * WMF_FONT_WEIGHT(wmfFont* F) -> (U16) weight
 */
#define WMF_FONT_WEIGHT(F)      ((F)->lfWeight)

/**
 * WMF_FONT_ITALIC(wmfFont* F) -> (U8) italic
 */
#define WMF_FONT_ITALIC(F)      ((F)->lfItalic)

/**
 * WMF_FONT_OUT(wmfFont* F)     -> (U8) output precision [??]
 */
#define WMF_FONT_OUT(F)         ((F)->lfOutPrecision)

/**
 * WMF_FONT_CLIP(wmfFont* F)    -> (U8) clip precision [??]
 */
#define WMF_FONT_CLIP(F)        ((F)->lfClipPrecision)

/**
 * WMF_FONT_QUALITY(wmfFont* F) -> (U8) quality [??]
 */
#define WMF_FONT_QUALITY(F)     ((F)->lfQuality)

/**
 * WMF_FONT_PITCH(wmfFont* F)   -> (U8) pitch & family [??]
 */
#define WMF_FONT_PITCH(F)       ((F)->lfPitchAndFamily)

/**
 * WMF_FONT_CHARSET(wmfFont* F) -> (U8) character set
 */
#define WMF_FONT_CHARSET(F)     ((F)->lfCharSet)

/**
 * WMF_FONT_NAME(wmfFont* F)   -> (char*) font name supplied by metafile
 */
#define WMF_FONT_NAME(F)        ((F)->lfFaceName)

/**
 * WMF_TEXT_SET_UNDERLINE(wmfFont* F,(U8) ?? whether to underline (?? how thick))
 */
#define WMF_TEXT_SET_UNDERLINE(F,Z)   (F)->lfUnderline = (Z)

/**
 * WMF_TEXT_SET_STRIKEOUT(wmfFont* F,(U8) ?? whether to strikeout (?? how thick))
 */
#define WMF_TEXT_SET_STRIKEOUT(F,Z)   (F)->lfStrikeOut = (Z)

/**
 * WMF_FONT_SET_WIDTH(wmfFont* F,(U16) font `width')
 */
#define WMF_FONT_SET_WIDTH(F,Z)       (F)->lfWidth = (Z)

/**
 * WMF_FONT_SET_HEIGHT(wmfFont* F,(U16) font height)
 */
#define WMF_FONT_SET_HEIGHT(F,Z)      (F)->lfHeight = (Z)

/**
 * WMF_FONT_SET_ESCAPEMENT(wmfFont* F,(S16) escapement)
 */
#define WMF_FONT_SET_ESCAPEMENT(F,Z)  (F)->lfEscapement = (Z)

/**
 * WMF_FONT_SET_ORIENTATION(wmfFont* F,(S16) orientation [??])
 */
#define WMF_FONT_SET_ORIENTATION(F,Z) (F)->lfOrientation = (Z)

/**
 * WMF_FONT_SET_WEIGHT(wmfFont* F,(U16) weight)
 */
#define WMF_FONT_SET_WEIGHT(F,Z)      (F)->lfWeight = (Z)

/**
 * WMF_FONT_SET_ITALIC(wmfFont* F,(U8) italic)
 */
#define WMF_FONT_SET_ITALIC(F,Z)      (F)->lfItalic = (Z)

/**
 * WMF_FONT_SET_OUT(wmfFont* F,(U8) output precision [??])
 */
#define WMF_FONT_SET_OUT(F,Z)         (F)->lfOutPrecision = (Z)

/**
 * WMF_FONT_SET_CLIP(wmfFont* F,(U8) clip precision [??])
 */
#define WMF_FONT_SET_CLIP(F,Z)        (F)->lfClipPrecision = (Z)

/**
 * WMF_FONT_SET_QUALITY(wmfFont* F,(U8) quality [??])
 */
#define WMF_FONT_SET_QUALITY(F,Z)     (F)->lfQuality = (Z)

/**
 * WMF_FONT_SET_PITCH(wmfFont* F,(U8) pitch & family [??])
 */
#define WMF_FONT_SET_PITCH(F,Z)       (F)->lfPitchAndFamily = (Z)

/**
 * WMF_FONT_SET_CHARSET(wmfFont* F,(U8) chracter set)
 */
#define WMF_FONT_SET_CHARSET(F,Z)     (F)->lfCharSet = (Z)

/**
 * WMF_FONT_SET_NAME(wmfFont* F,(char*) font name supplied by metafile [do not free this string!])
 */
#define WMF_FONT_SET_NAME(F,Z)        (F)->lfFaceName = (Z)

/**
 * WMF_DC_BRUSH(wmfDC* C) -> (wmfBrush*) current brush
 */
#define WMF_DC_BRUSH(C)        ((C)->brush)

/**
 * WMF_DC_PEN(wmfDC* C)   -> (wmfPen*)   current pen
 */
#define WMF_DC_PEN(C)          ((C)->pen)

/**
 * WMF_DC_FONT(wmfDC* C)  -> (wmfFont*)  current font
 */
#define WMF_DC_FONT(C)         ((C)->font)

/**
 * WMF_DC_TEXTCOLOR(wmfDC* C)  -> (wmfRGB*) text color
 */
#define WMF_DC_TEXTCOLOR(C)  (&((C)->textcolor))

/**
 * WMF_DC_BACKGROUND(wmfDC* C) -> (wmfRGB*) background color
 */
#define WMF_DC_BACKGROUND(C) (&((C)->bgcolor))

/**
 * WMF_DC_OPAQUE(wmfDC* C)      -> (U16) whether to fill opaque (non-zero if true)
 */
#define WMF_DC_OPAQUE(C)       ((C)->bgmode == OPAQUE)

/**
 * WMF_DC_TRANSPARENT(wmfDC* C) -> (U16) whether to fill transparent
 */
#define WMF_DC_TRANSPARENT(C)  ((C)->bgmode == TRANSPARENT)

/**
 * WMF_DC_POLYFILL(wmfDC* C) -> (U16) how to fill polygons
 */
#define WMF_DC_POLYFILL(C)     ((C)->polyfillmode)

/**
 * WMF_DC_ROP(wmfDC* C) -> (U16) ROP mode
 */
#define WMF_DC_ROP(C)          ((C)->ROPmode)

/**
 * WMF_DC_TEXTALIGN(wmfDC* C) -> (U16) how to align text
 */
#define WMF_DC_TEXTALIGN(C)    ((C)->textalign)

/**
 * WMF_DC_CHAREXTRA(wmfDC* C)  -> (U16) char [extended character set??]
 */
#define WMF_DC_CHAREXTRA(C)    ((C)->charextra)

/**
 * WMF_DC_BREAKEXTRA(wmfDC* C) -> (U16) break [line break??]
 */
#define WMF_DC_BREAKEXTRA(C)   ((C)->breakextra)

/* Definition subject to change:
 */

/**
 * WMF_DC_SET_PEN(wmfDC* C,(wmfPen*) current pen)
 */
#define WMF_DC_SET_PEN(C,Z)    (C)->pen = (Z)

/**
 * WMF_DC_SET_BRUSH(wmfDC* C,(wmfBrush*) current brush)
 */
#define WMF_DC_SET_BRUSH(C,Z)  (C)->brush = (Z)

/**
 * WMF_DC_SET_FONT(wmfDC* C,(wmfFont*) current font)
 */
#define WMF_DC_SET_FONT(C,Z)   (C)->font = (Z)

/**
 * WMF_DC_SET_TEXTCOLOR(wmfDC* C,(wmfRGB*) text color)
 */
#define WMF_DC_SET_TEXTCOLOR(C,Z)  (C)->textcolor = (*(Z))

/**
 * WMF_DC_SET_BACKGROUND(wmfDC* C,(wmfRGB*) background color)
 */
#define WMF_DC_SET_BACKGROUND(C,Z) (C)->bgcolor = (*(Z))

/**
 * WMF_DC_SET_OPAQUE(wmfDC* C)
 */
#define WMF_DC_SET_OPAQUE(C)       (C)->bgmode = OPAQUE

/**
 * WMF_DC_SET_TRANSPARENT(wmfDC* C)
 */
#define WMF_DC_SET_TRANSPARENT(C)  (C)->bgmode = TRANSPARENT

/**
 * WMF_DC_SET_POLYFILL(wmfDC* C,(U16) how to fill polygons)
 */
#define WMF_DC_SET_POLYFILL(C,Z)   (C)->polyfillmode = (Z)

/**
 * WMF_DC_SET_ROP(wmfDC* C,(U16) ROP mode)
 */
#define WMF_DC_SET_ROP(C,Z)        (C)->ROPmode = (Z)

/**
 * WMF_DC_SET_TEXTALIGN(wmfDC* C,(U16) how to align text)
 */
#define WMF_DC_SET_TEXTALIGN(C,Z)  (C)->textalign = (Z)

/**
 * WMF_DC_SET_CHAREXTRA(wmfDC* C,(U16) char [extended character set??])
 */
#define WMF_DC_SET_CHAREXTRA(C,Z)  (C)->charextra = (Z)

/**
 * WMF_DC_SET_BREAKEXTRA(wmfDC* C,(U16) break [line break??])
 */
#define WMF_DC_SET_BREAKEXTRA(C,Z) (C)->breakextra = (Z)

#endif /* ! LIBWMF_MACRO_H */
                                                                                                                                                                                                                                                                                                                                                   usr/include/libwmf/svg.h                                                                            0000644 0000000 0000000 00000003127 14425477016 013745  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* libwmf (<libwmf/svg.h>): library for wmf conversion
   Copyright (C) 2000 - various; see CREDITS, ChangeLog, and sources

   The libwmf Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   The libwmf Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with the libwmf Library; see the file COPYING.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */


#ifndef LIBWMF_SVG_H
#define LIBWMF_SVG_H

#include <stdio.h>

#include <libwmf/types.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct _wmf_svg_t wmf_svg_t;

struct _wmf_svg_t
{	/* other */

	wmfD_Rect bbox;

	wmfStream* out; /* Output stream */

	char* Description;

	unsigned int width;
	unsigned int height;

	struct _wmf_svg_image /* SVG device layer writes raster images as PNG */
	{	void* context;
		char* (*name) (void*); /* takes context; returns file name */
	} image;

	unsigned long flags;
};

#define WMF_SVG_GetData(Z) ((wmf_svg_t*)((Z)->device_data))

#define WMF_SVG_INLINE_IMAGES (1 << 0)

extern void wmf_svg_function (wmfAPI*);

#ifdef __cplusplus
}
#endif

#endif /* ! LIBWMF_SVG_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/include/libwmf/types.h                                                                          0000644 0000000 0000000 00000024364 14425477016 014320  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* libwmf (<libwmf/types.h>): library for wmf conversion
   Copyright (C) 2000 - various; see CREDITS, ChangeLog, and sources

   The libwmf Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   The libwmf Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with the libwmf Library; see the file COPYING.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */


#ifndef LIBWMF_TYPES_H
#define LIBWMF_TYPES_H

#include <stdio.h>
#include <sys/types.h>

#include <ft2build.h>
#include FT_FREETYPE_H

#include <libwmf/fund.h>

#ifdef __cplusplus
extern "C" {
#endif

/* API Enumeration defs
 */

/**
 * \b wmf_bool_t is the (enumeration) type used for boolean
 */
typedef enum _wmf_bool_t
{	wmf_false = 0,	/**< False */
	wmf_true	/**< True */
} wmf_bool_t;

/**
 * \b wmf_error_t is the (enumeration) type used for the library error state.
 */
typedef enum _wmf_error_t
{	wmf_E_None = 0,		/**< No error. */
	wmf_E_InsMem,		/**< An attempt to allocate memory has failed. */
	wmf_E_BadFile,		/**< Attempt to open an unreadable file, or to read from an unopened file. */
	wmf_E_BadFormat,	/**< The metafile, if indeed it is a metafile, has been corrupted. */
	wmf_E_EOF,		/**< An unexpected end-of-file has been reached. */
	wmf_E_DeviceError,	/**< Device-layer error. */
	wmf_E_Glitch,		/**< Programmer's error. Sorry. */
	wmf_E_Assert,		/**< Internally forced error. */
	wmf_E_UserExit		/**< The status function has returned non-zero; exit is premature. */
} wmf_error_t;

/**
 * \b wmf_page_t is the (enumeration) type used to indicate page size.
 */
typedef enum _wmf_page_t
{	wmf_P_A5,	/**< A5 (420 x 595) */
	wmf_P_A4,	/**< A4 (595 x 842) */
	wmf_P_A3,	/**< A3 (842 x 1191) */
	wmf_P_A2,	/**< A2 (1191 x 1684) */
	wmf_P_A1,	/**< A1 (1684 x 2384) */
	wmf_P_A0,	/**< A0 (2384 x 3370) */
	wmf_P_B5,	/**< B5 (516 x 729) */
	wmf_P_Letter,	/**< Letter (612 x 792) */
	wmf_P_Legal,	/**< Legal (612 x 1008) */
	wmf_P_Ledger,	/**< Ledger (1224 x 792) */
	wmf_P_Tabloid	/**< Tabloid (792 x 1224) */
} wmf_page_t;

/**
 * \b wmf_image_t is the (enumeration) type used to indicate image type.
 */
typedef enum _wmf_image_t
{	wmf_I_gd
} wmf_image_t;

/**
 * User redefinable function for input-stream access:
 * 
 * wmfRead: returns unsigned char cast to int, or EOF
 * 
 * See \b wmf_bbuf_input().
 */
typedef int  (*wmfRead) (void*);

/**
 * User redefinable function for input-stream access:
 * 
 * wmfSeek: returns (-1) on error, else 0
 * 
 * See \b wmf_bbuf_input().
 */
typedef int  (*wmfSeek) (void*,long);

/**
 * User redefinable function for input-stream access:
 * 
 * wmfTell: returns (-1) on error, else pos
 * 
 * See \b wmf_bbuf_input().
 */
typedef long (*wmfTell) (void*);

/**
 * User redefinable function for character-based output-stream:
 * 
 * wmfSPutS: returns EOF on error, else 0
 * 
 * See \b wmfStream.
 */
typedef int (*wmfSPutS) (char*,void*);

/**
 * User redefinable function for character-based output-stream:
 * 
 * wmfReset: resets stream to start; returns non-zero on failure
 * 
 * See \b wmfStream.
 */
typedef int (*wmfReset) (void*);

/**
 * User definable function indicating progress.
 * 
 * @param context  handle for user data
 * @param fraction fraction of metafile parsed so far
 * 
 * @return Should return non-zero only if premature exit is required for whatever reason.
 * 
 * See \b wmf_status_function().
 */
typedef int (*wmfStatus) (void* context,float fraction);

