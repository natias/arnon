
    my $scalar = ( 1, 2, 3 );  # $scalar gets 3, accidentally

=head2 What is the difference between $array[1] and @array[1]?

(contributed by brian d foy)

The difference is the sigil, that special character in front of the
array name. The C<$> sigil means "exactly one item", while the C<@>
sigil means "zero or more items". The C<$> gets you a single scalar,
while the C<@> gets you a list.

The confusion arises because people incorrectly assume that the sigil
denotes the variable type.

The C<$array[1]> is a single-element access to the array. It's going
to return the item in index 1 (or undef if there is no item there).
If you intend to get exactly one element from the array, this is the
form you should use.

The C<@array[1]> is an array slice, although it has only one index.
You can pull out multiple elements simultaneously by specifying
additional indices as a list, like C<@array[1,4,3,0]>.

Using a slice on the lefthand side of the assignment supplies list
context to the righthand side. This can lead to unexpected results.
For instance, if you want to read a single line from a filehandle,
assigning to a scalar value is fine:

    $array[1] = <STDIN>;

However, in list context, the line input operator returns all of the
lines as a list. The first line goes into C<@array[1]> and the rest
of the lines mysteriously disappear:

    @array[1] = <STDIN>;  # most likely not what you want

Either the C<use warnings> pragma or the B<-w> flag will warn you when
you use an array slice with a single index.

=head2 How can I remove duplicate elements from a list or array?

(contributed by brian d foy)

Use a hash. When you think the words "unique" or "duplicated", think
"hash keys".

If you don't care about the order of the elements, you could just
create the hash then extract the keys. It's not important how you
create that hash: just that you use C<keys> to get the unique
elements.

    my %hash   = map { $_, 1 } @array;
    # or a hash slice: @hash{ @array } = ();
    # or a foreach: $hash{$_} = 1 foreach ( @array );

    my @unique = keys %hash;

If you want to use a module, try the C<uniq> function from
L<List::Util>. In list context it returns the unique elements,
preserving their order in the list. In scalar context, it returns the
number of unique elements.

    use List::Util qw(uniq);

    my @unique = uniq( 1, 2, 3, 4, 4, 5, 6, 5, 8 ); # 1,2,3,4,5,6,8
    my $unique = uniq( 1, 2, 3, 4, 4, 5, 6, 5, 8 ); # 7

You can also go through each element and skip the ones you've seen
before. Use a hash to keep track. The first time the loop sees an
element, that element has no key in C<%seen>. The C<next> statement
creates the key and immediately uses its value, which is C<undef>, so
the loop continues to the C<push> and increments the value for that
key. The next time the loop sees that same element, its key exists in
the hash I<and> the value for that key is true (since it's not 0 or
C<undef>), so the next skips that iteration and the loop goes to the
next element.

    my @unique = ();
    my %seen   = ();

    foreach my $elem ( @array ) {
        next if $seen{ $elem }++;
        push @unique, $elem;
    }

You can write this more briefly using a grep, which does the
same thing.

    my %seen = ();
    my @unique = grep { ! $seen{ $_ }++ } @array;

=head2 How can I tell whether a certain element is contained in a list or array?

(portions of this answer contributed by Anno Siegel and brian d foy)

Hearing the word "in" is an I<in>dication that you probably should have
used a hash, not a list or array, to store your data. Hashes are
designed to answer this question quickly and efficiently. Arrays aren't.

That being said, there are several ways to approach this. If you
are going to make this query many times over arbitrary string values,
the fastest way is probably to invert the original array and maintain a
hash whose keys are the first array's values:

    my @blues = qw/azure cerulean teal turquoise lapis-lazuli/;
    my %is_blue = ();
    for (@blues) { $is_blue{$_} = 1 }

Now you can check whether C<$is_blue{$some_color}>. It might have
been a good idea to keep the blues all in a hash in the first place.

If the values are all small integers, you could use a simple indexed
array. This kind of an array will take up less space:

    my @primes = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31);
    my @is_tiny_prime = ();
    for (@primes) { $is_tiny_prime[$_] = 1 }
    # or simply  @istiny_prime[@primes] = (1) x @primes;

Now you check whether $is_tiny_prime[$some_number].

If the values in question are integers instead of strings, you can save
quite a lot of space by using bit strings instead:

    my @articles = ( 1..10, 150..2000, 2017 );
    undef $read;
    for (@articles) { vec($read,$_,1) = 1 }

Now check whether C<vec($read,$n,1)> is true for some C<$n>.

These methods guarantee fast individual tests but require a re-organization
of the original list or array. They only pay off if you have to test
multiple values against the same array.

If you are testing only once, the standard module L<List::Util> exports
the function C<any> for this purpose. It works by stopping once it
finds the element. It's written in C for speed, and its Perl equivalent
looks like this subroutine:

    sub any (&@) {
        my $code = shift;
        foreach (@_) {
            return 1 if $code->();
        }
        return 0;
    }

If speed is of little concern, the common idiom uses grep in scalar context
(which returns the number of items that passed its condition) to traverse the
entire list. This does have the benefit of telling you how many matches it
found, though.

    my $is_there = grep $_ eq $whatever, @array;

If you want to actually extract the matching elements, simply use grep in
list context.

    my @matches = grep $_ eq $whatever, @array;

=head2 How do I compute the difference of two arrays? How do I compute the intersection of two arrays?

Use a hash. Here's code to do both and more. It assumes that each
element is unique in a given array:

    my (@union, @intersection, @difference);
    my %count = ();
    foreach my $element (@array1, @array2) { $count{$element}++ }
    foreach my $element (keys %count) {
        push @union, $element;
        push @{ $count{$element} > 1 ? \@intersection : \@difference }, $element;
    }

Note that this is the I<symmetric difference>, that is, all elements
in either A or in B but not in both. Think of it as an xor operation.

=head2 How do I test whether two arrays or hashes are equal?

The following code works for single-level arrays. It uses a
stringwise comparison, and does not distinguish defined versus
undefined empty strings. Modify if you have other needs.

    $are_equal = compare_arrays(\@frogs, \@toads);

    sub compare_arrays {
        my ($first, $second) = @_;
        no warnings;  # silence spurious -w undef complaints
        return 0 unless @$first == @$second;
        for (my $i = 0; $i < @$first; $i++) {
            return 0 if $first->[$i] ne $second->[$i];
        }
        return 1;
    }

For multilevel structures, you may wish to use an approach more
like this one. It uses the CPAN module L<FreezeThaw>:

    use FreezeThaw qw(cmpStr);
    my @a = my @b = ( "this", "that", [ "more", "stuff" ] );

    printf "a and b contain %s arrays\n",
        cmpStr(\@a, \@b) == 0
        ? "the same"
        : "different";

This approach also works for comparing hashes. Here we'll demonstrate
two different answers:

    use FreezeThaw qw(cmpStr cmpStrHard);

    my %a = my %b = ( "this" => "that", "extra" => [ "more", "stuff" ] );
    $a{EXTRA} = \%b;
    $b{EXTRA} = \%a;

    printf "a and b contain %s hashes\n",
    cmpStr(\%a, \%b) == 0 ? "the same" : "different";

    printf "a and b contain %s hashes\n",
    cmpStrHard(\%a, \%b) == 0 ? "the same" : "different";


The first reports that both those the hashes contain the same data,
while the second reports that they do not. Which you prefer is left as
an exercise to the reader.

=head2 How do I find the first array element for which a condition is true?

To find the first array element which satisfies a condition, you can
use the C<first()> function in the L<List::Util> module, which comes
with Perl 5.8. This example finds the first element that contains
"Perl".

    use List::Util qw(first);

    my $element = first { /Perl/ } @array;

If you cannot use L<List::Util>, you can make your own loop to do the
same thing. Once you find the element, you stop the loop with last.

    my $found;
    foreach ( @array ) {
        if( /Perl/ ) { $found = $_; last }
    }

If you want the array index, use the C<firstidx()> function from
C<List::MoreUtils>:

    use List::MoreUtils qw(firstidx);
    my $index = firstidx { /Perl/ } @array;

Or write it yourself, iterating through the indices
and checking the array element at each index until you find one
that satisfies the condition:

    my( $found, $index ) = ( undef, -1 );
    for( $i = 0; $i < @array; $i++ ) {
        if( $array[$i] =~ /Perl/ ) {
            $found = $array[$i];
            $index = $i;
            last;
        }
    }

=head2 How do I handle linked lists?

(contributed by brian d foy)

Perl's arrays do not have a fixed size, so you don't need linked lists
if you just want to add or remove items. You can use array operations
such as C<push>, C<pop>, C<shift>, C<unshift>, or C<splice> to do
that.

Sometimes, however, linked lists can be useful in situations where you
want to "shard" an array so you have many small arrays instead of
a single big array. You can keep arrays longer than Perl's largest
array index, lock smaller arrays separately in threaded programs,
reallocate less memory, or quickly insert elements in the middle of
the chain.

Steve Lembark goes through the details in his YAPC::NA 2009 talk "Perly
Linked Lists" ( L<http://www.slideshare.net/lembark/perly-linked-lists> ),
although you can just use his L<LinkedList::Single> module.

=head2 How do I handle circular lists?
X<circular> X<array> X<Tie::Cycle> X<Array::Iterator::Circular>
X<cycle> X<modulus>

(contributed by brian d foy)

If you want to cycle through an array endlessly, you can increment the
index modulo the number of elements in the array:

    my @array = qw( a b c );
    my $i = 0;

    while( 1 ) {
        print $array[ $i++ % @array ], "\n";
        last if $i > 20;
    }

You can also use L<Tie::Cycle> to use a scalar that always has the
next element of the circular array:

    use Tie::Cycle;

    tie my $cycle, 'Tie::Cycle', [ qw( FFFFFF 000000 FFFF00 ) ];

    print $cycle; # FFFFFF
    print $cycle; # 000000
    print $cycle; # FFFF00

The L<Array::Iterator::Circular> creates an iterator object for
circular arrays:

    use Array::Iterator::Circular;

    my $color_iterator = Array::Iterator::Circular->new(
        qw(red green blue orange)
        );

    foreach ( 1 .. 20 ) {
        print $color_iterator->next, "\n";
    }

=head2 How do I shuffle an array randomly?

If you either have Perl 5.8.0 or later installed, or if you have
Scalar-List-Utils 1.03 or later installed, you can say:

    use List::Util 'shuffle';

    @shuffled = shuffle(@list);

If not, you can use a Fisher-Yates shuffle.

    sub fisher_yates_shuffle {
        my $deck = shift;  # $deck is a reference to an array
        return unless @$deck; # must not be empty!

        my $i = @$deck;
        while (--$i) {
            my $j = int rand ($i+1);
            @$deck[$i,$j] = @$deck[$j,$i];
        }
    }

    # shuffle my mpeg collection
    #
    my @mpeg = <audio/*/*.mp3>;
    fisher_yates_shuffle( \@mpeg );    # randomize @mpeg in place
    print @mpeg;

Note that the above implementation shuffles an array in place,
unlike the C<List::Util::shuffle()> which takes a list and returns
a new shuffled list.

You've probably seen shuffling algorithms that work using splice,
randomly picking another element to swap the current element with

    srand;
    @new = ();
    @old = 1 .. 10;  # just a demo
    while (@old) {
        push(@new, splice(@old, rand @old, 1));
    }

This is bad because splice is already O(N), and since you do it N
times, you just invented a quadratic algorithm; that is, O(N**2).
This does not scale, although Perl is so efficient that you probably
won't notice this until you have rather largish arrays.

=head2 How do I process/modify each element of an array?

Use C<for>/C<foreach>:

    for (@lines) {
        s/foo/bar/;    # change that word
        tr/XZ/ZX/;    # swap those letters
    }

Here's another; let's compute spherical volumes:

    my @volumes = @radii;
    for (@volumes) {   # @volumes has changed parts
        $_ **= 3;
        $_ *= (4/3) * 3.14159;  # this will be constant folded
    }

which can also be done with C<map()> which is made to transform
one list into another:

    my @volumes = map {$_ ** 3 * (4/3) * 3.14159} @radii;

If you want to do the same thing to modify the values of the
hash, you can use the C<values> function. As of Perl 5.6
the values are not copied, so if you modify $orbit (in this
case), you modify the value.

    for my $orbit ( values %orbits ) {
        ($orbit **= 3) *= (4/3) * 3.14159;
    }

Prior to perl 5.6 C<values> returned copies of the values,
so older perl code often contains constructions such as
C<@orbits{keys %orbits}> instead of C<values %orbits> where
the hash is to be modified.

=head2 How do I select a random element from an array?

Use the C<rand()> function (see L<perlfunc/rand>):

    my $index   = rand @array;
    my $element = $array[$index];

Or, simply:

    my $element = $array[ rand @array ];

=head2 How do I permute N elements of a list?
X<List::Permutor> X<permute> X<Algorithm::Loops> X<Knuth>
X<The Art of Computer Programming> X<Fischer-Krause>

Use the L<List::Permutor> module on CPAN. If the list is actually an
array, try the L<Algorithm::Permute> module (also on CPAN). It's
written in XS code and is very efficient:

    use Algorithm::Permute;

    my @array = 'a'..'d';
    my $p_iterator = Algorithm::Permute->new ( \@array );

    while (my @perm = $p_iterator->next) {
       print "next permutation: (@perm)\n";
    }

For even faster execution, you could do:

    use Algorithm::Permute;

    my @array = 'a'..'d';

    Algorithm::Permute::permute {
        print "next permutation: (@array)\n";
    } @array;

Here's a little program that generates all permutations of all the
words on each line of input. The algorithm embodied in the
C<permute()> function is discussed in Volume 4 (still unpublished) of
Knuth's I<The Art of Computer Programming> and will work on any list:

    #!/usr/bin/perl -n
    # Fischer-Krause ordered permutation generator

    sub permute (&@) {
        my $code = shift;
        my @idx = 0..$#_;
        while ( $code->(@_[@idx]) ) {
            my $p = $#idx;
            --$p while $idx[$p-1] > $idx[$p];
            my $q = $p or return;
            push @idx, reverse splice @idx, $p;
            ++$q while $idx[$p-1] > $idx[$q];
            @idx[$p-1,$q]=@idx[$q,$p-1];
        }
    }

    permute { print "@_\n" } split;

The L<Algorithm::Loops> module also provides the C<NextPermute> and
C<NextPermuteNum> functions which efficiently find all unique permutations
of an array, even if it contains duplicate values, modifying it in-place:
if its elements are in reverse-sorted order then the array is reversed,
making it sorted, and it returns false; otherwise the next
permutation is returned.

C<NextPermute> uses string order and C<NextPermuteNum> numeric order, so
you can enumerate all the permutations of C<0..9> like this:

    use Algorithm::Loops qw(NextPermuteNum);

    my @list= 0..9;
    do { print "@list\n" } while NextPermuteNum @list;

=head2 How do I sort an array by (anything)?

Supply a comparison function to sort() (described in L<perlfunc/sort>):

    @list = sort { $a <=> $b } @list;

The default sort function is cmp, string comparison, which would
sort C<(1, 2, 10)> into C<(1, 10, 2)>. C<< <=> >>, used above, is
the numerical comparison operator.

If you have a complicated function needed to pull out the part you
want to sort on, then don't do it inside the sort function. Pull it
out first, because the sort BLOCK can be called many times for the
same element. Here's an example of how to pull out the first word
after the first number on each item, and then sort those words
case-insensitively.

    my @idx;
    for (@data) {
        my $item;
        ($item) = /\d+\s*(\S+)/;
        push @idx, uc($item);
    }
    my @sorted = @data[ sort { $idx[$a] cmp $idx[$b] } 0 .. $#idx ];

which could also be written this way, using a trick
that's come to be known as the Schwartzian Transform:

    my @sorted = map  { $_->[0] }
        sort { $a->[1] cmp $b->[1] }
        map  { [ $_, uc( (/\d+\s*(\S+)/)[0]) ] } @data;

If you need to sort on several fields, the following paradigm is useful.

    my @sorted = sort {
        field1($a) <=> field1($b) ||
        field2($a) cmp field2($b) ||
        field3($a) cmp field3($b)
    } @data;

This can be conveniently combined with precalculation of keys as given
above.

See the F<sort> article in the "Far More Than You Ever Wanted
To Know" collection in L<http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz> for
more about this approach.

See also the question later in L<perlfaq4> on sorting hashes.

=head2 How do I manipulate arrays of bits?

Use C<pack()> and C<unpack()>, or else C<vec()> and the bitwise
operations.

For example, you don't have to store individual bits in an array
(which would mean that you're wasting a lot of space). To convert an
array of bits to a string, use C<vec()> to set the right bits. This
sets C<$vec> to have bit N set only if C<$ints[N]> was set:

    my @ints = (...); # array of bits, e.g. ( 1, 0, 0, 1, 1, 0 ... )
    my $vec = '';
    foreach( 0 .. $#ints ) {
        vec($vec,$_,1) = 1 if $ints[$_];
    }

The string C<$vec> only takes up as many bits as it needs. For
instance, if you had 16 entries in C<@ints>, C<$vec> only needs two
bytes to store them (not counting the scalar variable overhead).

Here's how, given a vector in C<$vec>, you can get those bits into
your C<@ints> array:

    sub bitvec_to_list {
        my $vec = shift;
        my @ints;
        # Find null-byte density then select best algorithm
        if ($vec =~ tr/\0// / length $vec > 0.95) {
            use integer;
            my $i;

            # This method is faster with mostly null-bytes
            while($vec =~ /[^\0]/g ) {
                $i = -9 + 8 * pos $vec;
                push @ints, $i if vec($vec, ++$i, 1);
                push @ints, $i if vec($vec, ++$i, 1);
                push @ints, $i if vec($vec, ++$i, 1);
                push @ints, $i if vec($vec, ++$i, 1);
                push @ints, $i if vec($vec, ++$i, 1);
                push @ints, $i if vec($vec, ++$i, 1);
                push @ints, $i if vec($vec, ++$i, 1);
                push @ints, $i if vec($vec, ++$i, 1);
            }
        }
        else {
            # This method is a fast general algorithm
            use integer;
            my $bits = unpack "b*", $vec;
            push @ints, 0 if $bits =~ s/^(\d)// && $1;
            push @ints, pos $bits while($bits =~ /1/g);
        }

        return \@ints;
    }

This method gets faster the more sparse the bit vector is.
(Courtesy of Tim Bunce and Winfried Koenig.)

You can make the while loop a lot shorter with this suggestion
from Benjamin Goldberg:

    while($vec =~ /[^\0]+/g ) {
        push @ints, grep vec($vec, $_, 1), $-[0] * 8 .. $+[0] * 8;
    }

Or use the CPAN module L<Bit::Vector>:

    my $vector = Bit::Vector->new($num_of_bits);
    $vector->Index_List_Store(@ints);
    my @ints = $vector->Index_List_Read();

L<Bit::Vector> provides efficient methods for bit vector, sets of
small integers and "big int" math.

Here's a more extensive illustration using vec():

    # vec demo
    my $vector = "\xff\x0f\xef\xfe";
    print "Ilya's string \\xff\\x0f\\xef\\xfe represents the number ",
    unpack("N", $vector), "\n";
    my $is_set = vec($vector, 23, 1);
    print "Its 23rd bit is ", $is_set ? "set" : "clear", ".\n";
    pvec($vector);

    set_vec(1,1,1);
    set_vec(3,1,1);
    set_vec(23,1,1);

    set_vec(3,1,3);
    set_vec(3,2,3);
    set_vec(3,4,3);
    set_vec(3,4,7);
    set_vec(3,8,3);
    set_vec(3,8,7);

    set_vec(0,32,17);
    set_vec(1,32,17);

    sub set_vec {
        my ($offset, $width, $value) = @_;
        my $vector = '';
        vec($vector, $offset, $width) = $value;
        print "offset=$offset width=$width value=$value\n";
        pvec($vector);
    }

    sub pvec {
        my $vector = shift;
        my $bits = unpack("b*", $vector);
        my $i = 0;
        my $BASE = 8;

        print "vector length in bytes: ", length($vector), "\n";
        @bytes = unpack("A8" x length($vector), $bits);
        print "bits are: @bytes\n\n";
    }

=head2 Why does defined() return true on empty arrays and hashes?

The short story is that you should probably only use defined on scalars or
functions, not on aggregates (arrays and hashes). See L<perlfunc/defined>
in the 5.004 release or later of Perl for more detail.

=head1 Data: Hashes (Associative Arrays)

=head2 How do I process an entire hash?

(contributed by brian d foy)

There are a couple of ways that you can process an entire hash. You
can get a list of keys, then go through each key, or grab a one
key-value pair at a time.

To go through all of the keys, use the C<keys> function. This extracts
all of the keys of the hash and gives them back to you as a list. You
can then get the value through the particular key you're processing:

    foreach my $key ( keys %hash ) {
        my $value = $hash{$key}
        ...
    }

Once you have the list of keys, you can process that list before you
process the hash elements. For instance, you can sort the keys so you
can process them in lexical order:

    foreach my $key ( sort keys %hash ) {
        my $value = $hash{$key}
        ...
    }

Or, you might want to only process some of the items. If you only want
to deal with the keys that start with C<text:>, you can select just
those using C<grep>:

    foreach my $key ( grep /^text:/, keys %hash ) {
        my $value = $hash{$key}
        ...
    }

If the hash is very large, you might not want to create a long list of
keys. To save some memory, you can grab one key-value pair at a time using
C<each()>, which returns a pair you haven't seen yet:

    while( my( $key, $value ) = each( %hash ) ) {
        ...
    }

The C<each> operator returns the pairs in apparently random order, so if
ordering matters to you, you'll have to stick with the C<keys> method.

The C<each()> operator can be a bit tricky though. You can't add or
delete keys of the hash while you're using it without possibly
skipping or re-processing some pairs after Perl internally rehashes
all of the elements. Additionally, a hash has only one iterator, so if
you mix C<keys>, C<values>, or C<each> on the same hash, you risk resetting
the iterator and messing up your processing. See the C<each> entry in
L<perlfunc> for more details.

=head2 How do I merge two hashes?
X<hash> X<merge> X<slice, hash>

(contributed by brian d foy)

Before you decide to merge two hashes, you have to decide what to do
if both hashes contain keys that are the same and if you want to leave
the original hashes as they were.

If you want to preserve the original hashes, copy one hash (C<%hash1>)
to a new hash (C<%new_hash>), then add the keys from the other hash
(C<%hash2> to the new hash. Checking that the key already exists in
C<%new_hash> gives you a chance to decide what to do with the
duplicates:

    my %new_hash = %hash1; # make a copy; leave %hash1 alone

    foreach my $key2 ( keys %hash2 ) {
        if( exists $new_hash{$key2} ) {
            warn "Key [$key2] is in both hashes!";
            # handle the duplicate (perhaps only warning)
            ...
            next;
        }
        else {
            $new_hash{$key2} = $hash2{$key2};
        }
    }

If you don't want to create a new hash, you can still use this looping
technique; just change the C<%new_hash> to C<%hash1>.

    foreach my $key2 ( keys %hash2 ) {
        if( exists $hash1{$key2} ) {
            warn "Key [$key2] is in both hashes!";
            # handle the duplicate (perhaps only warning)
            ...
            next;
        }
        else {
            $hash1{$key2} = $hash2{$key2};
        }
      }

If you don't care that one hash overwrites keys and values from the other, you
could just use a hash slice to add one hash to another. In this case, values
from C<%hash2> replace values from C<%hash1> when they have keys in common:

    @hash1{ keys %hash2 } = values %hash2;

=head2 What happens if I add or remove keys from a hash while iterating over it?

(contributed by brian d foy)

The easy answer is "Don't do that!"

If you iterate through the hash with each(), you can delete the key
most recently returned without worrying about it. If you delete or add
other keys, the iterator may skip or double up on them since perl
may rearrange the hash table. See the
entry for C<each()> in L<perlfunc>.

=head2 How do I look up a hash element by value?

Create a reverse hash:

    my %by_value = reverse %by_key;
    my $key = $by_value{$value};

That's not particularly efficient. It would be more space-efficient
to use:

    while (my ($key, $value) = each %by_key) {
        $by_value{$value} = $key;
    }

If your hash could have repeated values, the methods above will only find
one of the associated keys.  This may or may not worry you. If it does
worry you, you can always reverse the hash into a hash of arrays instead:

    while (my ($key, $value) = each %by_key) {
         push @{$key_list_by_value{$value}}, $key;
    }

=head2 How can I know how many entries are in a hash?

(contributed by brian d foy)

This is very similar to "How do I process an entire hash?", also in
L<perlfaq4>, but a bit simpler in the common cases.

You can use the C<keys()> built-in function in scalar context to find out
how many entries you have in a hash:

    my $key_count = keys %hash; # must be scalar context!

If you want to find out how many entries have a defined value, that's
a bit different. You have to check each value. A C<grep> is handy:

    my $defined_value_count = grep { defined } values %hash;

You can use that same structure to count the entries any way that
you like. If you want the count of the keys with vowels in them,
you just test for that instead:

    my $vowel_count = grep { /[aeiou]/ } keys %hash;

The C<grep> in scalar context returns the count. If you want the list
of matching items, just use it in list context instead:

    my @defined_values = grep { defined } values %hash;

The C<keys()> function also resets the iterator, which means that you may
see strange results if you use this between uses of other hash operators
such as C<each()>.

=head2 How do I sort a hash (optionally by value instead of key)?

(contributed by brian d foy)

To sort a hash, start with the keys. In this example, we give the list of
keys to the sort function which then compares them as strings. The output list
has the keys in string order. Once we have the keys, we can go through them to
create a report which lists the keys in string order:

    my @keys = sort { $a cmp $b } keys %hash;

    foreach my $key ( @keys ) {
        printf "%-20s %6d\n", $key, $hash{$key};
    }

We could get more fancy in the C<sort()> block though. Instead of
comparing the keys, we can compute a value with them and use that
value as the comparison.

For instance, to make our report order case-insensitive, we use
C<fc> to safely lowercase the keys before comparing them:

    use v5.16;
    my @keys = sort { fc($a) cmp fc($b) } keys %hash;

Earlier versions of this answer used C<lc>, but that could give
unexpected results with some Unicode strings. See L<perlfunc/fc>
for the details. The Unicode::UCD module does the same thing for
earlier perls.

Note: if the computation is expensive or the hash has many elements,
you may want to look at the Schwartzian Transform to cache the
computation results.

If we want to sort by the hash value instead, we use the hash key
to look it up. We still get out a list of keys, but this time they
are ordered by their value:

    my @keys = sort { $hash{$a} <=> $hash{$b} } keys %hash;

From there we can get more complex. If the hash values are the same,
we can provide a secondary sort on the hash key:

    use v5.16;
    my @keys = sort {
        $hash{$a} <=> $hash{$b}
            or
        fc($a) cmp fc($b)
    } keys %hash;

=head2 How can I always keep my hash sorted?
X<hash tie sort DB_File Tie::IxHash>

You can look into using the C<DB_File> module and C<tie()> using the
C<$DB_BTREE> hash bindings as documented in L<DB_File/"In Memory
Databases">. The L<Tie::IxHash> module from CPAN might also be
instructive. Although this does keep your hash sorted, you might not
like the slowdown you suffer from the tie interface. Are you sure you
need to do this? :)

=head2 What's the difference between "delete" and "undef" with hashes?

Hashes contain pairs of scalars: the first is the key, the
second is the value. The key will be coerced to a string,
although the value can be any kind of scalar: string,
number, or reference. If a key C<$key> is present in
%hash, C<exists($hash{$key})> will return true. The value
for a given key can be C<undef>, in which case
C<$hash{$key}> will be C<undef> while C<exists $hash{$key}>
will return true. This corresponds to (C<$key>, C<undef>)
being in the hash.

Pictures help... Here's the C<%hash> table:

      keys  values
    +------+------+
    |  a   |  3   |
    |  x   |  7   |
    |  d   |  0   |
    |  e   |  2   |
    +------+------+

And these conditions hold

    $hash{'a'}                       is true
    $hash{'d'}                       is false
    defined $hash{'d'}               is true
    defined $hash{'a'}               is true
    exists $hash{'a'}                is true (Perl 5 only)
    grep ($_ eq 'a', keys %hash)     is true

If you now say

    undef $hash{'a'}

your table now reads:


      keys  values
    +------+------+
    |  a   | undef|
    |  x   |  7   |
    |  d   |  0   |
    |  e   |  2   |
    +------+------+

and these conditions now hold; changes in caps:

    $hash{'a'}                       is FALSE
    $hash{'d'}                       is false
    defined $hash{'d'}               is true
    defined $hash{'a'}               is FALSE
    exists $hash{'a'}                is true (Perl 5 only)
    grep ($_ eq 'a', keys %hash)     is true

Notice the last two: you have an undef value, but a defined key!

Now, consider this:

    delete $hash{'a'}

your table now reads:

      keys  values
    +------+------+
    |  x   |  7   |
    |  d   |  0   |
    |  e   |  2   |
    +------+------+

and these conditions now hold; changes in caps:

    $hash{'a'}                       is false
    $hash{'d'}                       is false
    defined $hash{'d'}               is true
    defined $hash{'a'}               is false
    exists $hash{'a'}                is FALSE (Perl 5 only)
    grep ($_ eq 'a', keys %hash)     is FALSE

See, the whole entry is gone!

=head2 Why don't my tied hashes make the defined/exists distinction?

This depends on the tied hash's implementation of EXISTS().
For example, there isn't the concept of undef with hashes
that are tied to DBM* files. It also means that exists() and
defined() do the same thing with a DBM* file, and what they
end up doing is not what they do with ordinary hashes.

=head2 How do I reset an each() operation part-way through?

(contributed by brian d foy)

You can use the C<keys> or C<values> functions to reset C<each>. To
simply reset the iterator used by C<each> without doing anything else,
use one of them in void context:

    keys %hash; # resets iterator, nothing else.
    values %hash; # resets iterator, nothing else.

See the documentation for C<each> in L<perlfunc>.

=head2 How can I get the unique keys from two hashes?

First you extract the keys from the hashes into lists, then solve
the "removing duplicates" problem described above. For example:

    my %seen = ();
    for my $element (keys(%foo), keys(%bar)) {
        $seen{$element}++;
    }
    my @uniq = keys %seen;

