
The debugger now saves the current working directory on startup and
restores it when you restart your program with C<R> or C<rerun>.
L<[GH #13691]|https://github.com/Perl/perl5/issues/13691>

=item *

L<PerlIO::scalar> has been upgraded to version 0.22.

Reading from a position well past the end of the scalar now correctly
returns end of file.  [perl #123443]

Seeking to a negative position still fails, but no longer leaves the
file position set to a negation location.

C<eof()> on a C<PerlIO::scalar> handle now properly returns true when
the file position is past the 2GB mark on 32-bit systems.

Attempting to write at file positions impossible for the platform now
fail early rather than wrapping at 4GB.

=item *

L<Pod::Perldoc> has been upgraded to version 3.25.

Filehandles opened for reading or writing now have C<:encoding(UTF-8)> set.
L<[cpan #98019]|https://rt.cpan.org/Ticket/Display.html?id=98019>

=item *

L<POSIX> has been upgraded to version 1.53.

The C99 math functions and constants (for example C<acosh>, C<isinf>, C<isnan>, C<round>,
C<trunc>; C<M_E>, C<M_SQRT2>, C<M_PI>) have been added.

C<POSIX::tmpnam()> now produces a deprecation warning.  [perl #122005]

=item *

L<Safe> has been upgraded to version 2.39.

C<reval> was not propagating void context properly.

=item *

Scalar-List-Utils has been upgraded to version 1.41.

A new module, L<Sub::Util>, has been added, containing functions related to
CODE refs, including C<subname> (inspired by C<Sub::Identity>) and C<set_subname>
(copied and renamed from C<Sub::Name>).
The use of C<GetMagic> in C<List::Util::reduce()> has also been fixed.
L<[cpan #63211]|https://rt.cpan.org/Ticket/Display.html?id=63211>

=item *

L<SDBM_File> has been upgraded to version 1.13.

Simplified the build process.  [perl #123413]

=item *

L<Time::Piece> has been upgraded to version 1.29.

When pretty printing negative C<Time::Seconds>, the "minus" is no longer lost.

=item *

L<Unicode::Collate> has been upgraded to version 1.12.

Version 0.67's improved discontiguous contractions is invalidated by default
and is supported as a parameter C<long_contraction>.

=item *

L<Unicode::Normalize> has been upgraded to version 1.18.

The XSUB implementation has been removed in favor of pure Perl.

=item *

L<Unicode::UCD> has been upgraded to version 0.61.

A new function L<property_values()|Unicode::UCD/prop_values()>
has been added to return a given property's possible values.

A new function L<charprop()|Unicode::UCD/charprop()>
has been added to return the value of a given property for a given code
point.

A new function L<charprops_all()|Unicode::UCD/charprops_all()>
has been added to return the values of all Unicode properties for a
given code point.

A bug has been fixed so that L<propaliases()|Unicode::UCD/prop_aliases()>
returns the correct short and long names for the Perl extensions where
it was incorrect.

A bug has been fixed so that
L<prop_value_aliases()|Unicode::UCD/prop_value_aliases()>
returns C<undef> instead of a wrong result for properties that are Perl
extensions.

This module now works on EBCDIC platforms.

=item *

L<utf8> has been upgraded to version 1.17

A mismatch between the documentation and the code in C<utf8::downgrade()>
was fixed in favor of the documentation. The optional second argument
is now correctly treated as a perl boolean (true/false semantics) and
not as an integer.

=item *

L<version> has been upgraded to version 0.9909.

Numerous changes.  See the F<Changes> file in the CPAN distribution for
details.

=item *

L<Win32> has been upgraded to version 0.51.

C<GetOSName()> now supports Windows 8.1, and building in C++ mode now works.

=item *

L<Win32API::File> has been upgraded to version 0.1202

Building in C++ mode now works.

=item *

L<XSLoader> has been upgraded to version 0.20.

Allow XSLoader to load modules from a different namespace.
[perl #122455]

=back

=head2 Removed Modules and Pragmata

The following modules (and associated modules) have been removed from the core
perl distribution:

=over 4

=item *

L<CGI>

=item *

L<Module::Build>

=back

=head1 Documentation

=head2 New Documentation

=head3 L<perlunicook>

This document, by Tom Christiansen, provides examples of handling Unicode in
Perl.

=head2 Changes to Existing Documentation

=head3 L<perlaix>

=over 4

=item *

A note on long doubles has been added.

=back


=head3 L<perlapi>

=over 4

=item *

Note that C<SvSetSV> doesn't do set magic.

=item *

C<sv_usepvn_flags> - fix documentation to mention the use of C<Newx> instead of
C<malloc>.

L<[GH #13835]|https://github.com/Perl/perl5/issues/13835>

=item *

Clarify where C<NUL> may be embedded or is required to terminate a string.

=item *

Some documentation that was previously missing due to formatting errors is
now included.

=item *

Entries are now organized into groups rather than by the file where they
are found.

=item *

Alphabetical sorting of entries is now done consistently (automatically
by the POD generator) to make entries easier to find when scanning.

=back

=head3 L<perldata>

=over 4

=item *

The syntax of single-character variable names has been brought
up-to-date and more fully explained.

=item *

Hexadecimal floating point numbers are described, as are infinity and
NaN.

=back

=head3 L<perlebcdic>

=over 4

=item *

This document has been significantly updated in the light of recent
improvements to EBCDIC support.

=back

=head3 L<perlfilter>

=over 4

=item *

Added a L<LIMITATIONS|perlfilter/LIMITATIONS> section.

=back


=head3 L<perlfunc>

=over 4

=item *

Mention that C<study()> is currently a no-op.

=item *

Calling C<delete> or C<exists> on array values is now described as "strongly
discouraged" rather than "deprecated".

=item *

Improve documentation of C<< our >>.

=item *

C<-l> now notes that it will return false if symlinks aren't supported by the
file system.
L<[GH #13695]|https://github.com/Perl/perl5/issues/13695>

=item *

Note that C<exec LIST> and C<system LIST> may fall back to the shell on
Win32. Only the indirect-object syntax C<exec PROGRAM LIST> and
C<system PROGRAM LIST> will reliably avoid using the shell.

This has also been noted in L<perlport>.

L<[GH #13907]|https://github.com/Perl/perl5/issues/13907>

=back

=head3 L<perlguts>

=over 4

=item *

The OOK example has been updated to account for COW changes and a change in the
storage of the offset.

=item *

Details on C level symbols and libperl.t added.

=item *

Information on Unicode handling has been added

=item *

Information on EBCDIC handling has been added

=back

=head3 L<perlhack>

=over 4

=item *

A note has been added about running on platforms with non-ASCII
character sets

=item *

A note has been added about performance testing

=back

=head3 L<perlhacktips>

=over 4

=item *

Documentation has been added illustrating the perils of assuming that
there is no change to the contents of static memory pointed to by the
return values of Perl's wrappers for C library functions.

=item *

Replacements for C<tmpfile>, C<atoi>, C<strtol>, and C<strtoul> are now
recommended.

=item *

Updated documentation for the C<test.valgrind> C<make> target.
L<[GH #13658]|https://github.com/Perl/perl5/issues/13658>

=item *

Information is given about writing test files portably to non-ASCII
platforms.

=item *

A note has been added about how to get a C language stack backtrace.

=back

=head3 L<perlhpux>

=over 4

=item *

Note that the message "Redeclaration of "sendpath" with a different
storage class specifier" is harmless.

=back

=head3 L<perllocale>

=over 4

=item *

Updated for the enhancements in v5.22, along with some clarifications.

=back

=head3 L<perlmodstyle>

=over 4

=item *

Instead of pointing to the module list, we are now pointing to
L<PrePAN|http://prepan.org/>.

=back

=head3 L<perlop>

=over 4

=item *

Updated for the enhancements in v5.22, along with some clarifications.

=back

=head3 L<perlpodspec>

=over 4

=item *

The specification of the pod language is changing so that the default
encoding of pods that aren't in UTF-8 (unless otherwise indicated) is
CP1252 instead of ISO 8859-1 (Latin1).

=back

=head3 L<perlpolicy>

=over 4

=item *

We now have a code of conduct for the I<< p5p >> mailing list, as documented
in L<< perlpolicy/STANDARDS OF CONDUCT >>.

=item *

The conditions for marking an experimental feature as non-experimental are now
set out.

=item *

Clarification has been made as to what sorts of changes are permissible in
maintenance releases.

=back

=head3 L<perlport>

=over 4

=item *

Out-of-date VMS-specific information has been fixed and/or simplified.

=item *

Notes about EBCDIC have been added.

=back

=head3 L<perlre>

=over 4

=item *

The description of the C</x> modifier has been clarified to note that
comments cannot be continued onto the next line by escaping them; and
there is now a list of all the characters that are considered whitespace
by this modifier.

=item *

The new C</n> modifier is described.

=item *

A note has been added on how to make bracketed character class ranges
portable to non-ASCII machines.

=back

=head3 L<perlrebackslash>

=over 4

=item *

Added documentation of C<\b{sb}>, C<\b{wb}>, C<\b{gcb}>, and C<\b{g}>.

=back

=head3 L<perlrecharclass>

=over 4

=item *

Clarifications have been added to L<perlrecharclass/Character Ranges>
to the effect C<[A-Z]>, C<[a-z]>, C<[0-9]> and
any subranges thereof in regular expression bracketed character classes
are guaranteed to match exactly what a naive English speaker would
expect them to match, even on platforms (such as EBCDIC) where perl
has to do extra work to accomplish this.

=item *

The documentation of Bracketed Character Classes has been expanded to cover the
improvements in C<qr/[\N{named sequence}]/> (see under L</Selected Bug Fixes>).

=back

=head3 L<perlref>

=over 4

=item *

A new section has been added
L<Assigning to References|perlref/Assigning to References>

=back

=head3 L<perlsec>

=over 4

=item *

Comments added on algorithmic complexity and tied hashes.

=back

=head3 L<perlsyn>

=over 4

=item *

An ambiguity in the documentation of the C<...> statement has been corrected.
L<[GH #14054]|https://github.com/Perl/perl5/issues/14054>

=item *

The empty conditional in C<< for >> and C<< while >> is now documented
in L<< perlsyn >>.

=back

=head3 L<perlunicode>

=over 4

=item *

This has had extensive revisions to bring it up-to-date with current
Unicode support and to make it more readable.  Notable is that Unicode
7.0 changed what it should do with non-characters.  Perl retains the old
way of handling for reasons of backward compatibility.  See
L<perlunicode/Noncharacter code points>.

=back

=head3 L<perluniintro>

=over 4

=item *

Advice for how to make sure your strings and regular expression patterns are
interpreted as Unicode has been updated.

=back

=head3 L<perlvar>

=over 4

=item *

C<$]> is no longer listed as being deprecated.  Instead, discussion has
been added on the advantages and disadvantages of using it versus
C<$^V>.  C<$OLD_PERL_VERSION> was re-added to the documentation as the long
form of C<$]>.

=item *

C<${^ENCODING}> is now marked as deprecated.

=item *

The entry for C<%^H> has been clarified to indicate it can only handle
simple values.

=back

=head3 L<perlvms>

=over 4

=item *

Out-of-date and/or incorrect material has been removed.

=item *

Updated documentation on environment and shell interaction in VMS.

=back

=head3 L<perlxs>

=over 4

=item *

Added a discussion of locale issues in XS code.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

L<Bad symbol for scalar|perldiag/"Bad symbol for scalar">

(P) An internal request asked to add a scalar entry to something that
wasn't a symbol table entry.

=item *

L<Can't use a hash as a reference|perldiag/"Can't use a hash as a reference">

(F) You tried to use a hash as a reference, as in
C<< %foo->{"bar"} >> or C<< %$ref->{"hello"} >>.  Versions of perl E<lt>= 5.6.1
used to allow this syntax, but shouldn't have.

=item *

L<Can't use an array as a reference|perldiag/"Can't use an array as a reference">

(F) You tried to use an array as a reference, as in
C<< @foo->[23] >> or C<< @$ref->[99] >>.  Versions of perl E<lt>= 5.6.1 used to
allow this syntax, but shouldn't have.

=item *

L<Can't use 'defined(@array)' (Maybe you should just omit the defined()?)|perldiag/"Can't use 'defined(@array)' (Maybe you should just omit the defined()?)">

(F) C<defined()> is not useful on arrays because it
checks for an undefined I<scalar> value.  If you want to see if the
array is empty, just use S<C<if (@array) { # not empty }>> for example.

=item *

L<Can't use 'defined(%hash)' (Maybe you should just omit the defined()?)|perldiag/"Can't use 'defined(%hash)' (Maybe you should just omit the defined()?)">

(F) C<defined()> is not usually right on hashes.

Although S<C<defined %hash>> is false on a plain not-yet-used hash, it
becomes true in several non-obvious circumstances, including iterators,
weak references, stash names, even remaining true after S<C<undef %hash>>.
These things make S<C<defined %hash>> fairly useless in practice, so it now
generates a fatal error.

If a check for non-empty is what you wanted then just put it in boolean
context (see L<perldata/Scalar values>):

    if (%hash) {
       # not empty
    }

If you had S<C<defined %Foo::Bar::QUUX>> to check whether such a package
variable exists then that's never really been reliable, and isn't
a good way to enquire about the features of a package, or whether
it's loaded, etc.

=item *

L<Cannot chr %f|perldiag/"Cannot chr %f">

(F) You passed an invalid number (like an infinity or not-a-number) to
C<chr>.

=item *

L<Cannot compress %f in pack|perldiag/"Cannot compress %f in pack">

(F) You tried converting an infinity or not-a-number to an unsigned
character, which makes no sense.

=item *

L<Cannot pack %f with '%c'|perldiag/"Cannot pack %f with '%c'">

(F) You tried converting an infinity or not-a-number to a character,
which makes no sense.

=item *

L<Cannot print %f with '%c'|perldiag/"Cannot printf %f with '%c'">

(F) You tried printing an infinity or not-a-number as a character (C<%c>),
which makes no sense.  Maybe you meant C<'%s'>, or just stringifying it?

=item *

L<charnames alias definitions may not contain a sequence of multiple spaces|perldiag/"charnames alias definitions may not contain a sequence of multiple spaces">

(F) You defined a character name which had multiple space
characters in a row.  Change them to single spaces.  Usually these
names are defined in the C<:alias> import argument to C<use charnames>, but
they could be defined by a translator installed into C<$^H{charnames}>.
See L<charnames/CUSTOM ALIASES>.

=item *

L<charnames alias definitions may not contain trailing white-space|perldiag/"charnames alias definitions may not contain trailing white-space">

(F) You defined a character name which ended in a space
character.  Remove the trailing space(s).  Usually these names are
defined in the C<:alias> import argument to C<use charnames>, but they
could be defined by a translator installed into C<$^H{charnames}>.
See L<charnames/CUSTOM ALIASES>.

=item *

L<:const is not permitted on named subroutines|perldiag/":const is not permitted on named subroutines">

(F) The C<const> attribute causes an anonymous subroutine to be run and
its value captured at the time that it is cloned.  Named subroutines are
not cloned like this, so the attribute does not make sense on them.

=item *

L<Hexadecimal float: internal error|perldiag/"Hexadecimal float: internal error">

(F) Something went horribly bad in hexadecimal float handling.

=item *

L<Hexadecimal float: unsupported long double format|perldiag/"Hexadecimal float: unsupported long double format">

(F) You have configured Perl to use long doubles but
the internals of the long double format are unknown,
therefore the hexadecimal float output is impossible.

=item *

L<Illegal suidscript|perldiag/"Illegal suidscript">

(F) The script run under suidperl was somehow illegal.

=item *

L<In '(?...)', the '(' and '?' must be adjacent in regex; marked by S<<-- HERE> in mE<sol>%sE<sol>|perldiag/"In '(?...)', the '(' and '?' must be adjacent in regex; marked by <-- HERE in m/%s/">

(F) The two-character sequence C<"(?"> in
this context in a regular expression pattern should be an
indivisible token, with nothing intervening between the C<"(">
and the C<"?">, but you separated them.

=item *

L<In '(*VERB...)', the '(' and '*' must be adjacent in regex; marked by S<<-- HERE> in mE<sol>%sE<sol>|perldiag/"In '(*VERB...)', the '(' and '*' must be adjacent in regex; marked by <-- HERE in m/%s/">

(F) The two-character sequence C<"(*"> in
this context in a regular expression pattern should be an
indivisible token, with nothing intervening between the C<"(">
and the C<"*">, but you separated them.

=item *

L<Invalid quantifier in {,} in regex; marked by <-- HERE in mE<sol>%sE<sol>|perldiag/"Invalid quantifier in {,} in regex; marked by <-- HERE in m/%s/">

(F) The pattern looks like a {min,max} quantifier, but the min or max could not
be parsed as a valid number: either it has leading zeroes, or it represents
too big a number to cope with.  The S<<-- HERE> shows where in the regular
expression the problem was discovered.  See L<perlre>.

=item *

L<'%s' is an unknown bound type in regex|perldiag/"'%s' is an unknown bound type in regex; marked by <-- HERE in m/%s/">

(F) You used C<\b{...}> or C<\B{...}> and the C<...> is not known to
Perl.  The current valid ones are given in
L<perlrebackslash/\b{}, \b, \B{}, \B>.

=item *

L<Missing or undefined argument to require|perldiag/Missing or undefined argument to require>

(F) You tried to call C<require> with no argument or with an undefined
value as an argument.  C<require> expects either a package name or a
file-specification as an argument.  See L<perlfunc/require>.

Formerly, C<require> with no argument or C<undef> warned about a Null filename.

=back

=head3 New Warnings

=over 4

=item *

L<\C is deprecated in regex|perldiag/"\C is deprecated in regex; marked by <-- HERE in m/%s/">

(D deprecated) The C<< /\C/ >> character class was deprecated in v5.20, and
now emits a warning. It is intended that it will become an error in v5.24.
This character class matches a single byte even if it appears within a
multi-byte character, breaks encapsulation, and can corrupt UTF-8
strings.

=item *

L<"%s" is more clearly written simply as "%s" in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>|perldiag/"%s" is more clearly written simply as "%s" in regex; marked by <-- HERE in mE<sol>%sE<sol>>

(W regexp) (only under C<S<use re 'strict'>> or within C<(?[...])>)

You specified a character that has the given plainer way of writing it,
and which is also portable to platforms running with different character
sets.

=item *

L<Argument "%s" treated as 0 in increment (++)|perldiag/"Argument "%s" treated
as 0 in increment (++)">

(W numeric) The indicated string was fed as an argument to the C<++> operator
which expects either a number or a string matching C</^[a-zA-Z]*[0-9]*\z/>.
See L<perlop/Auto-increment and Auto-decrement> for details.

=item *

L<Both or neither range ends should be Unicode in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>|perldiag/"Both or neither range ends should be Unicode in regex; marked by <-- HERE in m/%s/">

(W regexp) (only under C<S<use re 'strict'>> or within C<(?[...])>)

In a bracketed character class in a regular expression pattern, you
had a range which has exactly one end of it specified using C<\N{}>, and
the other end is specified using a non-portable mechanism.  Perl treats
the range as a Unicode range, that is, all the characters in it are
considered to be the Unicode characters, and which may be different code
points on some platforms Perl runs on.  For example, C<[\N{U+06}-\x08]>
is treated as if you had instead said C<[\N{U+06}-\N{U+08}]>, that is it
matches the characters whose code points in Unicode are 6, 7, and 8.
But that C<\x08> might indicate that you meant something different, so
the warning gets raised.

=item *

L<Can't do %s("%s") on non-UTF-8 locale; resolved to "%s".|perldiag/Can't do %s("%s") on non-UTF-8 locale; resolved to "%s".>

(W locale) You are 1) running under "C<use locale>"; 2) the current
locale is not a UTF-8 one; 3) you tried to do the designated case-change
operation on the specified Unicode character; and 4) the result of this
operation would mix Unicode and locale rules, which likely conflict.

The warnings category C<locale> is new.

=item *

L<:const is experimental|perldiag/":const is experimental">

(S experimental::const_attr) The C<const> attribute is experimental.
If you want to use the feature, disable the warning with C<no warnings
'experimental::const_attr'>, but know that in doing so you are taking
the risk that your code may break in a future Perl version.

=item *

L<gmtime(%f) failed|perldiag/"gmtime(%f) failed">

(W overflow) You called C<gmtime> with a number that it could not handle:
too large, too small, or NaN.  The returned value is C<undef>.

=item *

L<Hexadecimal float: exponent overflow|perldiag/"Hexadecimal float: exponent overflow">

(W overflow) The hexadecimal floating point has larger exponent
than the floating point supports.

=item *

L<Hexadecimal float: exponent underflow|perldiag/"Hexadecimal float: exponent underflow">

(W overflow) The hexadecimal floating point has smaller exponent
than the floating point supports.

=item *

L<Hexadecimal float: mantissa overflow|perldiag/"Hexadecimal float: mantissa overflow">

(W overflow) The hexadecimal floating point literal had more bits in
the mantissa (the part between the C<0x> and the exponent, also known as
the fraction or the significand) than the floating point supports.

=item *

L<Hexadecimal float: precision loss|perldiag/"Hexadecimal float: precision loss">

(W overflow) The hexadecimal floating point had internally more
digits than could be output.  This can be caused by unsupported
long double formats, or by 64-bit integers not being available
(needed to retrieve the digits under some configurations).

=item *

L<Locale '%s' may not work well.%s|perldiag/Locale '%s' may not work well.%s>

(W locale) You are using the named locale, which is a non-UTF-8 one, and
which perl has determined is not fully compatible with what it can
handle.  The second C<%s> gives a reason.

The warnings category C<locale> is new.

=item *

L<localtime(%f) failed|perldiag/"localtime(%f) failed">

(W overflow) You called C<localtime> with a number that it could not handle:
too large, too small, or NaN.  The returned value is C<undef>.

=item *

L<Negative repeat count does nothing|perldiag/"Negative repeat count does nothing">

(W numeric) You tried to execute the
L<C<x>|perlop/Multiplicative Operators> repetition operator fewer than 0
times, which doesn't make sense.

=item *

L<NO-BREAK SPACE in a charnames alias definition is deprecated|perldiag/"NO-BREAK SPACE in a charnames alias definition is deprecated">

(D deprecated) You defined a character name which contained a no-break
space character.  Change it to a regular space.  Usually these names are
defined in the C<:alias> import argument to C<use charnames>, but they
could be defined by a translator installed into C<$^H{charnames}>.  See
L<charnames/CUSTOM ALIASES>.

=item *

L<Non-finite repeat count does nothing|perldiag/"Non-finite repeat count does nothing">

(W numeric) You tried to execute the
L<C<x>|perlop/Multiplicative Operators> repetition operator C<Inf> (or
C<-Inf>) or NaN times, which doesn't make sense.

=item *

L<PerlIO layer ':win32' is experimental|perldiag/"PerlIO layer ':win32' is experimental">

(S experimental::win32_perlio) The C<:win32> PerlIO layer is
experimental.  If you want to take the risk of using this layer,
simply disable this warning:

    no warnings "experimental::win32_perlio";

=item *

L<Ranges of ASCII printables should be some subset of "0-9", "A-Z", or "a-z" in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>|perldiag/"Ranges of ASCII printables should be some subset of "0-9", "A-Z", or "a-z" in regex; marked by <-- HERE in mE<sol>%sE<sol>">

(W regexp) (only under C<S<use re 'strict'>> or within C<(?[...])>)

Stricter rules help to find typos and other errors.  Perhaps you didn't
even intend a range here, if the C<"-"> was meant to be some other
character, or should have been escaped (like C<"\-">).  If you did
intend a range, the one that was used is not portable between ASCII and
EBCDIC platforms, and doesn't have an obvious meaning to a casual
reader.

 [3-7]    # OK; Obvious and portable
 [d-g]    # OK; Obvious and portable
 [A-Y]    # OK; Obvious and portable
 [A-z]    # WRONG; Not portable; not clear what is meant
 [a-Z]    # WRONG; Not portable; not clear what is meant
 [%-.]    # WRONG; Not portable; not clear what is meant
 [\x41-Z] # WRONG; Not portable; not obvious to non-geek

(You can force portability by specifying a Unicode range, which means that
the endpoints are specified by
L<C<\N{...}>|perlrecharclass/Character Ranges>, but the meaning may
still not be obvious.)
The stricter rules require that ranges that start or stop with an ASCII
character that is not a control have all their endpoints be a literal
character, and not some escape sequence (like C<"\x41">), and the ranges
must be all digits, or all uppercase letters, or all lowercase letters.

=item *

L<Ranges of digits should be from the same group in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>|perldiag/"Ranges of digits should be from the same group in regex; marked by <-- HERE in m/%s/">

(W regexp) (only under C<S<use re 'strict'>> or within C<(?[...])>)

Stricter rules help to find typos and other errors.  You included a
range, and at least one of the end points is a decimal digit.  Under the
stricter rules, when this happens, both end points should be digits in
the same group of 10 consecutive digits.

=item *
