Trim any trailing unused memory in the PV of C<sv>, which needs to have a real
C<PV> that is unencumbered by things like COW.  Think first before using this
functionality.  Is the space saving really worth giving up COW?  Will the
needed size of C<sv> stay the same?

If the answers are both yes, then use L</C<SV_CHECK_THINKFIRST>> or
L</C<SV_CHECK_THINKFIRST_COW_DROP>> before calling this.

=over 3

 void  SvPV_shrink_to_cur(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_2pvutf8>

=item C<sv_2pvutf8_flags>
X<sv_2pvutf8>X<sv_2pvutf8_flags>

These implement the various forms of the L<perlapi/C<SvPVutf8>> macros.
The macros are the preferred interface.

These return a pointer to the UTF-8-encoded representation of the SV, and set
C<*lp> to its length in bytes.  They may cause the SV to be upgraded to UTF-8
as a side-effect.

The forms differ in that plain C<sv_2pvutf8> always processes 'get' magic; and
C<sv_2pvutf8_flags> processes 'get' magic if and only if C<flags> contains
C<SV_GMAGIC>.

=over 3

 char *  sv_2pvutf8      (SV *sv, STRLEN * const lp)
 char *  sv_2pvutf8_flags(SV *sv, STRLEN * const lp,
                          const U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvPVX>

=item C<SvPVX_const>

=item C<SvPVX_mutable>

=item C<SvPVXx>
X<SvPVX>X<SvPVX_const>X<SvPVX_mutable>X<SvPVXx>

These return a pointer to the physical string in the SV.  The SV must contain a
string.  Prior to 5.9.3 it is not safe to execute these unless the SV's
type >= C<SVt_PV>.

These are also used to store the name of an autoloaded subroutine in an XS
AUTOLOAD routine.  See L<perlguts/Autoloading with XSUBs>.

C<SvPVXx> is identical to C<SvPVX>.

C<SvPVX_mutable> is merely a synonym for C<SvPVX>, but its name emphasizes that
the string is modifiable by the caller.

C<SvPVX_const> differs in that the return value has been cast so that the
compiler will complain if you were to try to modify the contents of the string,
(unless you cast away const yourself).

=over 3

 char*        SvPVX        (SV* sv)
 const char*  SvPVX_const  (SV* sv)
 char*        SvPVX_mutable(SV* sv)
 char*        SvPVXx       (SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvPVXtrue>
X<SvPVXtrue>

Returns a boolean as to whether or not C<sv> contains a PV that is considered
TRUE.  FALSE is returned if C<sv> doesn't contain a PV, or if the PV it does
contain is zero length, or consists of just the single character '0'.  Every
other PV value is considered TRUE.

As of Perl v5.37.1, C<sv> is evaluated exactly once; in earlier releases, it
could be evaluated more than once.

=over 3

 bool  SvPVXtrue(SV *sv)

=back

=back

=for hackers
Found in file sv_inline.h

=over 4

=item C<SvREADONLY>
X<SvREADONLY>

Returns true if the argument is readonly, otherwise returns false.
Exposed to perl code via Internals::SvREADONLY().

=over 3

 U32  SvREADONLY(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvREADONLY_off>
X<SvREADONLY_off>

Mark an object as not-readonly. Exactly what this mean depends on the
object type. Exposed to perl code via Internals::SvREADONLY().

=over 3

 U32  SvREADONLY_off(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvREADONLY_on>
X<SvREADONLY_on>

Mark an object as readonly. Exactly what this means depends on the object
type. Exposed to perl code via Internals::SvREADONLY().

=over 3

 U32  SvREADONLY_on(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_ref>
X<sv_ref>

Returns a SV describing what the SV passed in is a reference to.

dst can be a SV to be set to the description or NULL, in which case a
mortal SV is returned.

If ob is true and the SV is blessed, the description is the class
name, otherwise it is the type of the SV, "SCALAR", "ARRAY" etc.

=over 3

 SV *  sv_ref(SV *dst, const SV * const sv, const int ob)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvREFCNT>
X<SvREFCNT>

Returns the value of the object's reference count. Exposed
to perl code via Internals::SvREFCNT().

=over 3

 U32  SvREFCNT(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvREFCNT_dec>

=item C<SvREFCNT_dec_set_NULL>

=item C<SvREFCNT_dec_ret_NULL>

=item C<SvREFCNT_dec_NN>
X<SvREFCNT_dec>X<SvREFCNT_dec_set_NULL>X<SvREFCNT_dec_ret_NULL>X<SvREFCNT_dec_NN>

These decrement the reference count of the given SV.

C<SvREFCNT_dec_NN> may only be used when C<sv> is known to not be C<NULL>.

The function C<SvREFCNT_dec_ret_NULL()> is identical to the
C<SvREFCNT_dec()> except it returns a NULL C<SV *>.  It is used by
C<SvREFCNT_dec_set_NULL()> which is a macro which will, when passed a
non-NULL argument, decrement the reference count of its argument and
then set it to NULL. You can replace code of the following form:

    if (sv) {
       SvREFCNT_dec_NN(sv);
       sv = NULL;
    }

with

    SvREFCNT_dec_set_NULL(sv);

=over 3

 void  SvREFCNT_dec         (SV *sv)
 void  SvREFCNT_dec_set_NULL(SV *sv)
 SV *  SvREFCNT_dec_ret_NULL(SV *sv)
 void  SvREFCNT_dec_NN      (SV *sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvREFCNT_inc>

=item C<SvREFCNT_inc_NN>

=item C<SvREFCNT_inc_simple>

=item C<SvREFCNT_inc_simple_NN>

=item C<SvREFCNT_inc_simple_void>

=item C<SvREFCNT_inc_simple_void_NN>

=item C<SvREFCNT_inc_void>

=item C<SvREFCNT_inc_void_NN>
X<SvREFCNT_inc>X<SvREFCNT_inc_NN>X<SvREFCNT_inc_simple>X<SvREFCNT_inc_simple_NN>X<SvREFCNT_inc_simple_void>X<SvREFCNT_inc_simple_void_NN>X<SvREFCNT_inc_void>X<SvREFCNT_inc_void_NN>

These all increment the reference count of the given SV.
The ones without C<void> in their names return the SV.

C<SvREFCNT_inc> is the base operation; the rest are optimizations if various
input constraints are known to be true; hence, all can be replaced with
C<SvREFCNT_inc>.

C<SvREFCNT_inc_NN> can only be used if you know C<sv> is not C<NULL>.  Since we
don't have to check the NULLness, it's faster and smaller.

C<SvREFCNT_inc_void> can only be used if you don't need the
return value.  The macro doesn't need to return a meaningful value.

C<SvREFCNT_inc_void_NN> can only be used if you both don't need the return
value, and you know that C<sv> is not C<NULL>.  The macro doesn't need to
return a meaningful value, or check for NULLness, so it's smaller and faster.

C<SvREFCNT_inc_simple> can only be used with expressions without side
effects.  Since we don't have to store a temporary value, it's faster.

C<SvREFCNT_inc_simple_NN> can only be used with expressions without side
effects and you know C<sv> is not C<NULL>.  Since we don't have to store a
temporary value, nor check for NULLness, it's faster and smaller.

C<SvREFCNT_inc_simple_void> can only be used with expressions without side
effects and you don't need the return value.

C<SvREFCNT_inc_simple_void_NN> can only be used with expressions without side
effects, you don't need the return value, and you know C<sv> is not C<NULL>.

=over 3

 SV *  SvREFCNT_inc               (SV *sv)
 SV *  SvREFCNT_inc_NN            (SV *sv)
 SV*   SvREFCNT_inc_simple        (SV* sv)
 SV*   SvREFCNT_inc_simple_NN     (SV* sv)
 void  SvREFCNT_inc_simple_void   (SV* sv)
 void  SvREFCNT_inc_simple_void_NN(SV* sv)
 void  SvREFCNT_inc_void          (SV *sv)
 void  SvREFCNT_inc_void_NN       (SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_reftype>
X<sv_reftype>

Returns a string describing what the SV is a reference to.

If ob is true and the SV is blessed, the string is the class name,
otherwise it is the type of the SV, "SCALAR", "ARRAY" etc.

=over 3

 const char *  sv_reftype(const SV * const sv, const int ob)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_replace>
X<sv_replace>

Make the first argument a copy of the second, then delete the original.
The target SV physically takes over ownership of the body of the source SV
and inherits its flags; however, the target keeps any magic it owns,
and any magic in the source is discarded.
Note that this is a rather specialist SV copying operation; most of the
time you'll want to use C<sv_setsv> or one of its many macro front-ends.

=over 3

 void  sv_replace(SV * const sv, SV * const nsv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_report_used>
X<sv_report_used>

Dump the contents of all SVs not yet freed (debugging aid).

=over 3

 void  sv_report_used()

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_reset>
X<sv_reset>

Underlying implementation for the C<reset> Perl function.
Note that the perl-level function is vaguely deprecated.

=over 3

 void  sv_reset(const char *s, HV * const stash)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvROK>
X<SvROK>

Tests if the SV is an RV.

=over 3

 U32  SvROK(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvROK_off>
X<SvROK_off>

Unsets the RV status of an SV.

=over 3

 void  SvROK_off(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvROK_on>
X<SvROK_on>

Tells an SV that it is an RV.

=over 3

 void  SvROK_on(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvRV>
X<SvRV>

Dereferences an RV to return the SV.

=over 3

 SV*  SvRV(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvRV_set>
X<SvRV_set>

Set the value of the RV pointer in C<sv> to val.  See C<L</SvIV_set>>.

=over 3

 void  SvRV_set(SV* sv, SV* val)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_rvunweaken>
X<sv_rvunweaken>

Unweaken a reference: Clear the C<SvWEAKREF> flag on this RV; remove
the backreference to this RV from the array of backreferences
associated with the target SV, increment the refcount of the target.
Silently ignores C<undef> and warns on non-weak references.

=over 3

 SV *  sv_rvunweaken(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_rvweaken>
X<sv_rvweaken>

Weaken a reference: set the C<SvWEAKREF> flag on this RV; give the
referred-to SV C<PERL_MAGIC_backref> magic if it hasn't already; and
push a back-reference to this RV onto the array of backreferences
associated with that magic.  If the RV is magical, set magic will be
called after the RV is cleared.  Silently ignores C<undef> and warns
on already-weak references.

=over 3

 SV *  sv_rvweaken(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_setbool>

=item C<sv_setbool_mg>
X<sv_setbool>X<sv_setbool_mg>

These set an SV to a true or false boolean value, upgrading first if necessary.

They differ only in that C<sv_setbool_mg> handles 'set' magic; C<sv_setbool>
does not.

=over 3

 void  sv_setbool(SV *sv, bool b)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_set_bool>
X<sv_set_bool>

Equivalent to C<sv_setsv(sv, bool_val ? &Pl_sv_yes : &PL_sv_no)>, but
may be made more efficient in the future. Doesn't handle set magic.

The perl equivalent is C<$sv = !!$expr;>.

Introduced in perl 5.35.11.

=over 3

 void  sv_set_bool(SV *sv, const bool bool_val)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_set_false>
X<sv_set_false>

Equivalent to C<sv_setsv(sv, &PL_sv_no)>, but may be made more
efficient in the future. Doesn't handle set magic.

The perl equivalent is C<$sv = !1;>.

Introduced in perl 5.35.11.

=over 3

 void  sv_set_false(SV *sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_setiv>

=item C<sv_setiv_mg>
X<sv_setiv>X<sv_setiv_mg>

These copy an integer into the given SV, upgrading first if necessary.

They differ only in that C<sv_setiv_mg> handles 'set' magic; C<sv_setiv> does
not.

=over 3

 void  sv_setiv   (SV * const sv, const IV num)
 void  sv_setiv_mg(SV * const sv, const IV i)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvSETMAGIC>
X<SvSETMAGIC>

Invokes C<L</mg_set>> on an SV if it has 'set' magic.  This is necessary
after modifying a scalar, in case it is a magical variable like C<$|>
or a tied variable (it calls C<STORE>).  This macro evaluates its
argument more than once.

=over 3

 void  SvSETMAGIC(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvSetMagicSV>

=item C<SvSetMagicSV_nosteal>

=item C<SvSetSV>

=item C<SvSetSV_nosteal>
X<SvSetMagicSV>X<SvSetMagicSV_nosteal>X<SvSetSV>X<SvSetSV_nosteal>

if C<dsv> is the same as C<ssv>, these do nothing.  Otherwise they all call
some form of C<L</sv_setsv>>.  They may evaluate their arguments more than
once.

The only differences are:

C<SvSetMagicSV> and C<SvSetMagicSV_nosteal> perform any required 'set' magic
afterwards on the destination SV; C<SvSetSV> and C<SvSetSV_nosteal> do not.

C<SvSetSV_nosteal> C<SvSetMagicSV_nosteal> call a non-destructive version of
C<sv_setsv>.

=over 3

 void  SvSetMagicSV(SV* dsv, SV* ssv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<sv_setnv>

=item C<sv_setnv_mg>
X<sv_setnv>X<sv_setnv_mg>

These copy a double into the given SV, upgrading first if necessary.

They differ only in that C<sv_setnv_mg> handles 'set' magic; C<sv_setnv> does
not.

=over 3

 void  sv_setnv(SV * const sv, const NV num)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_setpv>

=item C<sv_setpv_mg>

=item C<sv_setpvn>

=item C<sv_setpvn_fresh>

=item C<sv_setpvn_mg>

=item C<sv_setpvs>

=item C<sv_setpvs_mg>
X<sv_setpv>X<sv_setpv_mg>X<sv_setpvn>X<sv_setpvn_fresh>X<sv_setpvn_mg>X<sv_setpvs>X<sv_setpvs_mg>

These copy a string into the SV C<sv>, making sure it is C<L</SvPOK_only>>.

In the C<pvs> forms, the string must be a C literal string, enclosed in double
quotes.

In the C<pvn> forms, the first byte of the string is pointed to by C<ptr>, and
C<len> indicates the number of bytes to be copied, potentially including
embedded C<NUL> characters.

In the plain C<pv> forms, C<ptr> points to a NUL-terminated C string.  That is,
it points to the first byte of the string, and the copy proceeds up through the
first encountered C<NUL> byte.

In the forms that take a C<ptr> argument, if it is NULL, the SV will become
undefined.

B<The UTF-8 flag is not changed by these functions.>

A terminating NUL byte is guaranteed in the result.

The C<_mg> forms handle 'set' magic; the other forms skip all magic.

C<sv_setpvn_fresh> is a cut-down alternative to C<sv_setpvn>, intended ONLY
to be used with a fresh sv that has been upgraded to a SVt_PV, SVt_PVIV,
SVt_PVNV, or SVt_PVMG.

=over 3

 void  sv_setpv       (SV * const sv, const char * const ptr)
 void  sv_setpv_mg    (SV * const sv, const char * const ptr)
 void  sv_setpvn      (SV * const sv, const char * const ptr,
                       const STRLEN len)
 void  sv_setpvn_fresh(SV * const sv, const char * const ptr,
                       const STRLEN len)
 void  sv_setpvn_mg   (SV * const sv, const char * const ptr,
                       const STRLEN len)
 void  sv_setpvs      (SV* sv, "literal string")
 void  sv_setpvs_mg   (SV* sv, "literal string")

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_setpv_bufsize>
X<sv_setpv_bufsize>

Sets the SV to be a string of C<cur> bytes length, with at least
C<len> bytes available.   Ensures that there is a null byte at C<SvEND>.

Returns a char * pointer to the SvPV buffer.

The caller must set the first C<cur> bytes of C<sv> before the first use of its
contents.  This means that if C<cur> is zero, the SV is immediately fully
formed and ready to use, just like any other SV containing an empty string.

=over 3

 char  *  sv_setpv_bufsize(SV * const sv, const STRLEN cur,
                           const STRLEN len)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_setpvf>

=item C<sv_setpvf_mg>

=item C<sv_setpvf_mg_nocontext>

=item C<sv_setpvf_nocontext>
X<sv_setpvf>X<sv_setpvf_mg>X<sv_setpvf_mg_nocontext>X<sv_setpvf_nocontext>

These work like C<L</sv_catpvf>> but copy the text into the SV instead of
appending it.

The differences between these are:

C<sv_setpvf_mg> and C<sv_setpvf_mg_nocontext> perform 'set' magic; C<sv_setpvf>
and C<sv_setpvf_nocontext> skip all magic.

C<sv_setpvf_nocontext> and C<sv_setpvf_mg_nocontext> do not take a thread
context (C<aTHX>) parameter, so are used in situations where the caller
doesn't already have the thread context.

B<The UTF-8 flag is not changed by these functions.>

NOTE: C<sv_setpvf> must be explicitly called as
C<Perl_sv_setpvf>
with an C<aTHX_> parameter.

NOTE: C<sv_setpvf_mg> must be explicitly called as
C<Perl_sv_setpvf_mg>
with an C<aTHX_> parameter.

=over 3

 void  Perl_sv_setpvf        (pTHX_ SV * const sv,
                              const char * const pat, ...)
 void  Perl_sv_setpvf_mg     (pTHX_ SV * const sv,
                              const char * const pat, ...)
 void  sv_setpvf_mg_nocontext(SV * const sv,
                              const char * const pat, ...)
 void  sv_setpvf_nocontext   (SV * const sv,
                              const char * const pat, ...)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_setref_iv>
X<sv_setref_iv>

Copies an integer into a new SV, optionally blessing the SV.  The C<rv>
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  The C<classname> argument indicates the package for the
blessing.  Set C<classname> to C<NULL> to avoid the blessing.  The new SV
will have a reference count of 1, and the RV will be returned.

=over 3

 SV *  sv_setref_iv(SV * const rv, const char * const classname,
                    const IV iv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_setref_nv>
X<sv_setref_nv>

Copies a double into a new SV, optionally blessing the SV.  The C<rv>
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  The C<classname> argument indicates the package for the
blessing.  Set C<classname> to C<NULL> to avoid the blessing.  The new SV
will have a reference count of 1, and the RV will be returned.

=over 3

 SV *  sv_setref_nv(SV * const rv, const char * const classname,
                    const NV nv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_setref_pv>
X<sv_setref_pv>

Copies a pointer into a new SV, optionally blessing the SV.  The C<rv>
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  If the C<pv> argument is C<NULL>, then C<PL_sv_undef> will be placed
into the SV.  The C<classname> argument indicates the package for the
blessing.  Set C<classname> to C<NULL> to avoid the blessing.  The new SV
will have a reference count of 1, and the RV will be returned.

Do not use with other Perl types such as HV, AV, SV, CV, because those
objects will become corrupted by the pointer copy process.

Note that C<sv_setref_pvn> copies the string while this copies the pointer.

=over 3

 SV *  sv_setref_pv(SV * const rv, const char * const classname,
                    void * const pv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_setref_pvn>
X<sv_setref_pvn>

Copies a string into a new SV, optionally blessing the SV.  The length of the
string must be specified with C<n>.  The C<rv> argument will be upgraded to
an RV.  That RV will be modified to point to the new SV.  The C<classname>
argument indicates the package for the blessing.  Set C<classname> to
C<NULL> to avoid the blessing.  The new SV will have a reference count
of 1, and the RV will be returned.

Note that C<sv_setref_pv> copies the pointer while this copies the string.

=over 3

 SV *  sv_setref_pvn(SV * const rv, const char * const classname,
                     const char * const pv, const STRLEN n)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_setref_pvs>
X<sv_setref_pvs>

Like C<sv_setref_pvn>, but takes a literal string instead of
a string/length pair.

=over 3

 SV *  sv_setref_pvs(SV *const rv, const char *const classname,
                     "literal string")

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<sv_setref_uv>
X<sv_setref_uv>

Copies an unsigned integer into a new SV, optionally blessing the SV.  The C<rv>
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  The C<classname> argument indicates the package for the
blessing.  Set C<classname> to C<NULL> to avoid the blessing.  The new SV
will have a reference count of 1, and the RV will be returned.

=over 3

 SV *  sv_setref_uv(SV * const rv, const char * const classname,
                    const UV uv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<sv_setrv_inc>

