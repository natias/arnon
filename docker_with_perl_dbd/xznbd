
    my ($privkey, $cert) = Net::SSLeay::P_PKCS12_load_file($filename);
    # or
    my ($privkey, $cert) = Net::SSLeay::P_PKCS12_load_file($filename, 0, $password);
    # or
    my ($privkey, $cert, @cachain) = Net::SSLeay::P_PKCS12_load_file($filename, 1);
    # or
    my ($privkey, $cert, @cachain) = Net::SSLeay::P_PKCS12_load_file($filename, 1, $password);

    # BEWARE: THIS IS WRONG - MEMORY LEAKS! (you cannot free @cachain items)
    my ($privkey, $cert) = Net::SSLeay::P_PKCS12_load_file($filename, 1, $password);

B<NOTE> Net::SSLeay 1.92_01 and earlier: With some combinations of
Windows, perl, compiler and compiler options, you may see a runtime
error "no OPENSSL_Applink", when calling
Net::SSLeay::P_PKCS12_load_file. See README.Win32 for more details.

=back

=head3 Low level API: SESSION_* related functions

=over

=item * d2i_SSL_SESSION

B<COMPATIBILITY:> does not work in Net-SSLeay-1.85 and before

Transforms the binary ASN1 representation string of an SSL/TLS session into an
SSL_SESSION object.

    my $ses = Net::SSLeay::d2i_SSL_SESSION($data);
    # $data - the session as ASN1 representation string
    #
    # returns: $ses - the new SSL_SESSION

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/i2d_SSL_SESSION.html>

=item * i2d_SSL_SESSION

B<COMPATIBILITY:> does not work in Net-SSLeay-1.85 and before

Transforms the SSL_SESSION object in into the ASN1 representation and returns
it as string.

    my $data = Net::SSLeay::i2d_SSL_SESSION($ses);
    # $ses - value corresponding to openssl's SSL_SESSION structure
    #
    # returns: $data - session as string

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/d2i_SSL_SESSION.html>

=item * SESSION_new

Creates a new SSL_SESSION structure.

    my $rv = Net::SSLeay::SESSION_new();
    #
    # returns: value corresponding to openssl's SSL_SESSION structure (0 on failure)

=item * SESSION_free

Free an allocated SSL_SESSION structure.

    Net::SSLeay::SESSION_free($ses);
    # $ses - value corresponding to openssl's SSL_SESSION structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_SESSION_free.html>

=item * SESSION_up_ref

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.0-pre4 or LibreSSL 2.7.0

Increases the reference counter on a SSL_SESSION structure.

    Net::SSLeay::SESSION_up_ref($ses);
    # $ses - value corresponding to openssl's SSL_SESSION structure
    #
    # returns: 1 on success else 0

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_SESSION_up_ref.html>

=item * SESSION_dup

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.1, not in LibreSSL

Duplicates a SSL_SESSION structure.

    Net::SSLeay::SESSION_dup($ses);
    # $ses - value corresponding to openssl's SSL_SESSION structure
    #
    # returns: the duplicated session

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_SESSION_dup.html>

=item * SESSION_is_resumable

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.1, not in LibreSSL

Determine whether an SSL_SESSION object can be used for resumption.

    Net::SSLeay::SESSION_is_resumable($ses);
    # $ses - value corresponding to openssl's SSL_SESSION structure
    #
    # returns: (integer) 1 if it can or 0 if not

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_SESSION_is_resumable.html>

=item * SESSION_cmp

Compare two SSL_SESSION structures.

    my $rv = Net::SSLeay::SESSION_cmp($sesa, $sesb);
    # $sesa - value corresponding to openssl's SSL_SESSION structure
    # $sesb - value corresponding to openssl's SSL_SESSION structure
    #
    # returns: 0 if the two structures are the same

B<NOTE:> Not available in openssl 1.0 or later

=item * SESSION_get_app_data

Can be used to get application defined value/data.

    my $rv = Net::SSLeay::SESSION_get_app_data($ses);
    # $ses - value corresponding to openssl's SSL_SESSION structure
    #
    # returns: string/buffer/pointer ???

=item * SESSION_set_app_data

Can be used to set some application defined value/data.

    my $rv = Net::SSLeay::SESSION_set_app_data($s, $a);
    # $s - value corresponding to openssl's SSL_SESSION structure
    # $a - (string/buffer/pointer ???) data
    #
    # returns: ???

=item * SESSION_get_ex_data

Is used to retrieve the information for $idx from session $ses.

    my $rv = Net::SSLeay::SESSION_get_ex_data($ses, $idx);
    # $ses - value corresponding to openssl's SSL_SESSION structure
    # $idx - (integer) index for application specific data
    #
    # returns: pointer to ???

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_SESSION_get_ex_new_index.html>

=item * SESSION_set_ex_data

Is used to store application data at arg for idx into the session object.

    my $rv = Net::SSLeay::SESSION_set_ex_data($ss, $idx, $data);
    # $ss - value corresponding to openssl's SSL_SESSION structure
    # $idx - (integer) ???
    # $data - (pointer) ???
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_SESSION_get_ex_new_index.html>

=item * SESSION_get_ex_new_index

Is used to register a new index for application specific data.

    my $rv = Net::SSLeay::SESSION_get_ex_new_index($argl, $argp, $new_func, $dup_func, $free_func);
    # $argl - (long) ???
    # $argp - (pointer) ???
    # $new_func - function pointer ??? (CRYPTO_EX_new *)
    # $dup_func - function pointer ??? (CRYPTO_EX_dup *)
    # $free_func - function pointer ??? (CRYPTO_EX_free *)
    #
    # returns: (integer) ???

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_SESSION_get_ex_new_index.html>

=item * SESSION_get_master_key

B<NOTE:> Does not exactly correspond to any low level API function

Returns 'master_key' value from SSL_SESSION structure $s

    Net::SSLeay::SESSION_get_master_key($s);
    # $s - value corresponding to openssl's SSL_SESSION structure
    #
    # returns: master key (binary data)

=item * SESSION_set1_master_key

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before; requires at least OpenSSL 1.1.1pre1, not in LibreSSL

Sets the master key value associated with a SSL_SESSION.

    my $ret = Net::SSLeay::SESSION_set1_master_key($sess, $key);
    # $sess - value corresponding to OpenSSL SSL_SESSION structure
    # $key - PSK key in packed binary format
    #
    # returns: 1 on success, 0 on failure

Example:

    my $key = pack('H*', 'deadbeef');
    my $ret = Net::SSLeay::SESSION_set1_master_key($sess, $key);

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_SESSION_set1_master_key.html>

=item * SESSION_set_master_key

Sets 'master_key' value for SSL_SESSION structure $s

    Net::SSLeay::SESSION_set_master_key($s, $key);
    # $s - value corresponding to openssl's SSL_SESSION structure
    # $key - master key (binary data)
    #
    # returns: no return value

Not available with OpenSSL 1.1 and later.
Code that previously used SESSION_set_master_key must now set $secret in the session_secret callback set with SSL_set_session_secret_cb.

=item * SESSION_set_cipher

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before; requires at least OpenSSL 1.1.1pre1, not in LibreSSL

Set the ciphersuite associated with an SSL_SESSION.

    my $ret = Net::SSLeay::SESSION_set_cipher($s, $cipher);
    # $s - value corresponding to OpenSSL SSL_SESSION structure
    # $cipher - value corresponding to OpenSSL SSL_CIPHER structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_SESSION_set_cipher.html>

=item * SESSION_set_protocol_version

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before; requires at least OpenSSL 1.1.1pre1, not in LibreSSL

Sets the protocol version associated with an SSL_SESSION.

    my $ret = Net::SSLeay::SESSION_set_protocol_version($s, $version);
    # $s - value corresponding to OpenSSL SSL_SESSION structure
    # $version - integer version constant. For example Net::SSLeay::TLS1_3_VERSION()
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_SESSION_set_protocol_version.html>

=item * SESSION_get0_cipher

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before; requires at least OpenSSL 1.1.0 or LibreSSL 3.4.0

Returns the value corresponding to OpenSSL's SSL_CIPHER associated with an SSL_SESSION.

    my $ret = Net::SSLeay::SESSION_get0_cipher($s);
    # $s - value corresponding to OpenSSL SSL_SESSION structure
    #
    # returns: A value corresponding to OpenSSL's SSL_CIPHER structure or undef if SSL_CIPHER can't be determined.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_SESSION_get0_cipher.html>

=item * SESSION_get_time

Returns the time at which the session s was established.
The time is given in seconds since 1.1.1970.

    my $rv = Net::SSLeay::SESSION_get_time($s);
    # $s - value corresponding to openssl's SSL_SESSION structure
    #
    # returns: timestamp (seconds since 1.1.1970)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_SESSION_get_time.html>

=item * get_time

Technically the same functionality as L</SESSION_get_time>.

    my $rv = Net::SSLeay::get_time($s);

=item * SESSION_get_timeout

Returns the timeout value set for session $s in seconds.

    my $rv = Net::SSLeay::SESSION_get_timeout($s);
    # $s - value corresponding to openssl's SSL_SESSION structure
    #
    # returns: timeout (in seconds)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_SESSION_get_time.html>

=item * get_timeout

Technically the same functionality as L</SESSION_get_timeout>.

    my $rv = Net::SSLeay::get_timeout($s);

=item * SESSION_print

B<NOTE:> Does not exactly correspond to any low level API function

Prints session details (e.g. protocol version, cipher, session-id ...) to BIO.

    my $rv = Net::SSLeay::SESSION_print($fp, $ses);
    # $fp - value corresponding to openssl's BIO structure
    # $ses - value corresponding to openssl's SSL_SESSION structure
    #
    # returns: 1 on success, 0 on failure

You have to use necessary BIO functions like this:

    # let us have $ssl corresponding to openssl's SSL structure
    my $ses = Net::SSLeay::get_session($ssl);
    my $bio = Net::SSLeay::BIO_new(&Net::SSLeay::BIO_s_mem);
    Net::SSLeay::SESSION_print($bio, $ses);
    print Net::SSLeay::BIO_read($bio);

=item * SESSION_print_fp

Prints session details (e.g. protocol version, cipher, session-id ...) to file handle.

B<NOTE> With some combinations of Windows, perl, compiler and compiler
options, you may see a runtime error "no OPENSSL_Applink", when
calling Net::SSLeay::SESSION_print_fp. See README.Win32 for more
details.

    my $rv = Net::SSLeay::SESSION_print_fp($fp, $ses);
    # $fp - perl file handle
    # $ses - value corresponding to openssl's SSL_SESSION structure
    #
    # returns: 1 on success, 0 on failure

Example:

    # let us have $ssl corresponding to openssl's SSL structure
    my $ses = Net::SSLeay::get_session($ssl);
    open my $fh, ">", "output.txt";
    Net::SSLeay::SESSION_print_fp($fh,$ses);

Similar functionality without Net::SSLeay::SESSION_print_fp

    my $ses = Net::SSLeay::get_session($ssl);
    my $bio = Net::SSLeay::BIO_new_file('output.txt', 'w');
    Net::SSLeay::SESSION_print($bio, $ses);

=item * SESSION_set_time

Replaces the creation time of the session s with the chosen value $t (seconds since 1.1.1970).

    my $rv = Net::SSLeay::SESSION_set_time($ses, $t);
    # $ses - value corresponding to openssl's SSL_SESSION structure
    # $t - time value
    #
    # returns: 1 on success

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_SESSION_get_time.html>

=item * set_time

Technically the same functionality as L</SESSION_set_time>.

    my $rv = Net::SSLeay::set_time($ses, $t);

=item * SESSION_set_timeout

Sets the timeout value for session s in seconds to $t.

    my $rv = Net::SSLeay::SESSION_set_timeout($s, $t);
    # $s - value corresponding to openssl's SSL_SESSION structure
    # $t - timeout (in seconds)
    #
    # returns: 1 on success

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_SESSION_get_time.html>

=item * set_timeout

Technically the same functionality as L</SESSION_set_timeout>.

    my $rv = Net::SSLeay::set_timeout($ses, $t);

=back

=head3 Low level API: SSL_CTX_* related functions

B<NOTE:> Please note that the function described in this chapter have "SSL_" part stripped from their original openssl names.

=over

=item * CTX_add_client_CA

Adds the CA name extracted from $cacert to the list of CAs sent to the client when requesting a client certificate for $ctx.

    my $rv = Net::SSLeay::CTX_add_client_CA($ctx, $cacert);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $cacert - value corresponding to openssl's X509 structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_client_CA_list.html>

=item * CTX_add_extra_chain_cert

Adds the certificate $x509 to the certificate chain presented together with the certificate. Several certificates can be added one after the other.

    my $rv = Net::SSLeay::CTX_add_extra_chain_cert($ctx, $x509);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $x509 - value corresponding to openssl's X509 structure
    #
    # returns: 1 on success, check out the error stack to find out the reason for failure otherwise

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_add_extra_chain_cert.html>

=item * CTX_add_session

Adds the session $ses to the context $ctx.

    my $rv = Net::SSLeay::CTX_add_session($ctx, $ses);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $ses - value corresponding to openssl's SSL_SESSION structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_add_session.html>

=item * CTX_callback_ctrl

??? (more info needed)

    my $rv = Net::SSLeay::CTX_callback_ctrl($ctx, $cmd, $fp);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $cmd - (integer) command id
    # $fp - (function pointer) ???
    #
    # returns: ???

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_ctrl.html>

=item * CTX_check_private_key

Checks the consistency of a private key with the corresponding certificate loaded into $ctx.

    my $rv = Net::SSLeay::CTX_check_private_key($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * CTX_ctrl

Internal handling function for SSL_CTX objects.

B<BEWARE:> openssl doc says: This function should never be called directly!

    my $rv = Net::SSLeay::CTX_ctrl($ctx, $cmd, $larg, $parg);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $cmd - (integer) command id
    # $larg - (integer) long ???
    # $parg - (string/pointer) ???
    #
    # returns: (long) result of given command ???

    # valid $cmd values
    # 1 - SSL_CTRL_NEED_TMP_RSA
    # 2 - SSL_CTRL_SET_TMP_RSA
    # 3 - SSL_CTRL_SET_TMP_DH
    # 4 - SSL_CTRL_SET_TMP_ECDH
    # 5 - SSL_CTRL_SET_TMP_RSA_CB
    # 6 - SSL_CTRL_SET_TMP_DH_CB
    # 7 - SSL_CTRL_SET_TMP_ECDH_CB
    # 8 - SSL_CTRL_GET_SESSION_REUSED
    # 9 - SSL_CTRL_GET_CLIENT_CERT_REQUEST
    # 10 - SSL_CTRL_GET_NUM_RENEGOTIATIONS
    # 11 - SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
    # 12 - SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
    # 13 - SSL_CTRL_GET_FLAGS
    # 14 - SSL_CTRL_EXTRA_CHAIN_CERT
    # 15 - SSL_CTRL_SET_MSG_CALLBACK
    # 16 - SSL_CTRL_SET_MSG_CALLBACK_ARG
    # 17 - SSL_CTRL_SET_MTU
    # 20 - SSL_CTRL_SESS_NUMBER
    # 21 - SSL_CTRL_SESS_CONNECT
    # 22 - SSL_CTRL_SESS_CONNECT_GOOD
    # 23 - SSL_CTRL_SESS_CONNECT_RENEGOTIATE
    # 24 - SSL_CTRL_SESS_ACCEPT
    # 25 - SSL_CTRL_SESS_ACCEPT_GOOD
    # 26 - SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
    # 27 - SSL_CTRL_SESS_HIT
    # 28 - SSL_CTRL_SESS_CB_HIT
    # 29 - SSL_CTRL_SESS_MISSES
    # 30 - SSL_CTRL_SESS_TIMEOUTS
    # 31 - SSL_CTRL_SESS_CACHE_FULL
    # 32 - SSL_CTRL_OPTIONS
    # 33 - SSL_CTRL_MODE
    # 40 - SSL_CTRL_GET_READ_AHEAD
    # 41 - SSL_CTRL_SET_READ_AHEAD
    # 42 - SSL_CTRL_SET_SESS_CACHE_SIZE
    # 43 - SSL_CTRL_GET_SESS_CACHE_SIZE
    # 44 - SSL_CTRL_SET_SESS_CACHE_MODE
    # 45 - SSL_CTRL_GET_SESS_CACHE_MODE
    # 50 - SSL_CTRL_GET_MAX_CERT_LIST
    # 51 - SSL_CTRL_SET_MAX_CERT_LIST
    # 52 - SSL_CTRL_SET_MAX_SEND_FRAGMENT
    # 53 - SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
    # 54 - SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
    # 55 - SSL_CTRL_SET_TLSEXT_HOSTNAME
    # 56 - SSL_CTRL_SET_TLSEXT_DEBUG_CB
    # 57 - SSL_CTRL_SET_TLSEXT_DEBUG_ARG
    # 58 - SSL_CTRL_GET_TLSEXT_TICKET_KEYS
    # 59 - SSL_CTRL_SET_TLSEXT_TICKET_KEYS
    # 60 - SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
    # 61 - SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
    # 62 - SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
    # 63 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
    # 64 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
    # 65 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
    # 66 - SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
    # 67 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
    # 68 - SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
    # 69 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
    # 70 - SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
    # 71 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
    # 72 - SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
    # 73 - DTLS_CTRL_GET_TIMEOUT
    # 74 - DTLS_CTRL_HANDLE_TIMEOUT
    # 75 - DTLS_CTRL_LISTEN
    # 76 - SSL_CTRL_GET_RI_SUPPORT
    # 77 - SSL_CTRL_CLEAR_OPTIONS
    # 78 - SSL_CTRL_CLEAR_MODE

    # 82 - SSL_CTRL_GET_EXTRA_CHAIN_CERTS
    # 83 - SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS

    # 88 - SSL_CTRL_CHAIN
    # 89 - SSL_CTRL_CHAIN_CERT

    # 90 - SSL_CTRL_GET_CURVES
    # 91 - SSL_CTRL_SET_CURVES
    # 92 - SSL_CTRL_SET_CURVES_LIST
    # 93 - SSL_CTRL_GET_SHARED_CURVE
    # 94 - SSL_CTRL_SET_ECDH_AUTO
    # 97 - SSL_CTRL_SET_SIGALGS
    # 98 - SSL_CTRL_SET_SIGALGS_LIST
    # 99 - SSL_CTRL_CERT_FLAGS
    # 100 - SSL_CTRL_CLEAR_CERT_FLAGS
    # 101 - SSL_CTRL_SET_CLIENT_SIGALGS
    # 102 - SSL_CTRL_SET_CLIENT_SIGALGS_LIST
    # 103 - SSL_CTRL_GET_CLIENT_CERT_TYPES
    # 104 - SSL_CTRL_SET_CLIENT_CERT_TYPES
    # 105 - SSL_CTRL_BUILD_CERT_CHAIN
    # 106 - SSL_CTRL_SET_VERIFY_CERT_STORE
    # 107 - SSL_CTRL_SET_CHAIN_CERT_STORE
    # 108 - SSL_CTRL_GET_PEER_SIGNATURE_NID
    # 109 - SSL_CTRL_GET_SERVER_TMP_KEY
    # 110 - SSL_CTRL_GET_RAW_CIPHERLIST
    # 111 - SSL_CTRL_GET_EC_POINT_FORMATS
    # 112 - SSL_CTRL_GET_TLSA_RECORD
    # 113 - SSL_CTRL_SET_TLSA_RECORD
    # 114 - SSL_CTRL_PULL_TLSA_RECORD

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_ctrl.html>

=item * CTX_flush_sessions

Causes a run through the session cache of $ctx to remove sessions expired at time $tm.

    Net::SSLeay::CTX_flush_sessions($ctx, $tm);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $tm - specifies the time which should be used for the expiration test (seconds since 1.1.1970)
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_flush_sessions.html>

=item * CTX_free

Free an allocated SSL_CTX object.

    Net::SSLeay::CTX_free($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_free.html>

=item * CTX_get_app_data

Can be used to get application defined value/data.

    my $rv = Net::SSLeay::CTX_get_app_data($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: string/buffer/pointer ???

=item * CTX_set_app_data

Can be used to set some application defined value/data.

    my $rv = Net::SSLeay::CTX_set_app_data($ctx, $arg);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $arg - (string/buffer/pointer ???) data
    #
    # returns: ???

=item * CTX_get0_param

B<COMPATIBILITY:> not available in Net-SSLeay-1.82 and before; requires at least OpenSSL 1.0.2-beta1 or LibreSSL 2.7.0

Returns the current verification parameters.

    my $vpm = Net::SSLeay::CTX_get0_param($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: value corresponding to openssl's X509_VERIFY_PARAM structure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get0_param.html>

=item * CTX_get_cert_store

Returns the current certificate verification storage.

    my $rv = Net::SSLeay::CTX_get_cert_store($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: value corresponding to openssl's X509_STORE structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_cert_store.html>

=item * CTX_get_client_CA_list

Returns the list of client CAs explicitly set for $ctx using L</CTX_set_client_CA_list>.

    my $rv = Net::SSLeay::CTX_get_client_CA_list($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: value corresponding to openssl's X509_NAME_STACK structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_client_CA_list.html>

=item * CTX_get_ex_data

Is used to retrieve the information for index $idx from $ctx.

    my $rv = Net::SSLeay::CTX_get_ex_data($ssl, $idx);
    # $ssl - value corresponding to openssl's SSL_CTX structure
    # $idx - (integer) index for application specific data
    #
    # returns: pointer to ???

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get_ex_new_index.html>

=item * CTX_get_ex_new_index

Is used to register a new index for application specific data.

    my $rv = Net::SSLeay::CTX_get_ex_new_index($argl, $argp, $new_func, $dup_func, $free_func);
    # $argl - (long) ???
    # $argp - (pointer) ???
    # $new_func - function pointer ??? (CRYPTO_EX_new *)
    # $dup_func - function pointer ??? (CRYPTO_EX_dup *)
    # $free_func - function pointer ??? (CRYPTO_EX_free *)
    #
    # returns: (integer) ???

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get_ex_new_index.html>

=item * CTX_get_mode

Returns the mode set for ctx.

    my $rv = Net::SSLeay::CTX_get_mode($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: mode (bitmask)

    # to decode the return value (bitmask) use:
    # 0x00000001 corresponds to SSL_MODE_ENABLE_PARTIAL_WRITE
    # 0x00000002 corresponds to SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
    # 0x00000004 corresponds to SSL_MODE_AUTO_RETRY
    # 0x00000008 corresponds to SSL_MODE_NO_AUTO_CHAIN
    # 0x00000010 corresponds to SSL_MODE_RELEASE_BUFFERS
    # (note: some of the bits might not be supported by older openssl versions)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_mode.html>

=item * CTX_set_mode

Adds the mode set via bitmask in $mode to $ctx. Options already set before are not cleared.

    my $rv = Net::SSLeay::CTX_set_mode($ctx, $mode);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $mode - mode bitmask
    #
    # returns: the new mode bitmask after adding $mode

For bitmask details see L</CTX_get_mode> (above).

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_mode.html>

=item * CTX_get_options

Returns the options (bitmask) set for $ctx.

    my $rv = Net::SSLeay::CTX_get_options($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: options (bitmask)

B<BEWARE:> The available constants and their values in bitmask depend
on the TLS library. For example, SSL_OP_NO_TLSv1_3 became available
much later than SSL_OP_NO_COMPRESS which is already deprecated by some
libraries. Also, some previously used option values have been recycled
and are now used for newer options. See the list of constants in this
document for options Net::SSLeay currently supports.

You are strongly encouraged to B<check your TLS library> if you need
to use numeric values directly. The following is a sample of historic
values. It may not be correct anymore.

    # to decode the return value (bitmask) use:
    # 0x00000004 corresponds to SSL_OP_LEGACY_SERVER_CONNECT
    # 0x00000800 corresponds to SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
    # 0x00004000 corresponds to SSL_OP_NO_TICKET
    # 0x00010000 corresponds to SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
    # 0x00400000 corresponds to SSL_OP_CIPHER_SERVER_PREFERENCE
    # 0x04000000 corresponds to SSL_OP_NO_TLSv1

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get_options.html>

=item * CTX_set_options

Adds the options set via bitmask in $options to ctx. Options already set before are not cleared.

    Net::SSLeay::CTX_set_options($ctx, $options);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $options - options bitmask
    #
    # returns: the new options bitmask after adding $options

For bitmask details see L</CTX_get_options> (above).

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_options.html>

=item * CTX_get_quiet_shutdown

Returns the 'quiet shutdown' setting of $ctx.

    my $rv = Net::SSLeay::CTX_get_quiet_shutdown($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: (integer) the current setting

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_quiet_shutdown.html>

=item * CTX_get_read_ahead

    my $rv = Net::SSLeay::CTX_get_read_ahead($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: (integer) read_ahead value

=item * CTX_get_session_cache_mode

Returns the currently used cache mode (bitmask).

    my $rv = Net::SSLeay::CTX_get_session_cache_mode($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: mode (bitmask)

B<BEWARE:> SESS_CACHE_OFF and other constants are not available in
Net-SSLeay-1.82 and before.  If the constants are not available, the
following values have historically been correct. You are strongly
encouraged to B<check your TLS library> for the current values.

    # to decode the return value (bitmask) use:
    # 0x0000 corresponds to SSL_SESS_CACHE_OFF
    # 0x0001 corresponds to SSL_SESS_CACHE_CLIENT
    # 0x0002 corresponds to SSL_SESS_CACHE_SERVER
    # 0x0080 corresponds to SSL_SESS_CACHE_NO_AUTO_CLEAR
    # 0x0100 corresponds to SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
    # 0x0200 corresponds to SSL_SESS_CACHE_NO_INTERNAL_STORE
    # (note: some of the bits might not be supported by older openssl versions)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_session_cache_mode.html>

=item * CTX_set_session_cache_mode

Enables/disables session caching by setting the operational mode for $ctx to $mode.

    my $rv = Net::SSLeay::CTX_set_session_cache_mode($ctx, $mode);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $mode - mode (bitmask)
    #
    # returns: previously set cache mode

For bitmask details see L</CTX_get_session_cache_mode> (above).

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_session_cache_mode.html>

=item * CTX_get_timeout

Returns the currently set timeout value for $ctx.

    my $rv = Net::SSLeay::CTX_get_timeout($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: timeout in seconds

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_timeout.html>

=item * CTX_get_verify_depth

Returns the verification depth limit currently set in $ctx. If no limit has been explicitly set, -1 is returned and the default value will be used.

    my $rv = Net::SSLeay::CTX_get_verify_depth($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: depth limit currently set in $ctx, -1 if no limit has been explicitly set

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get_verify_mode.html>

=item * CTX_get_verify_mode

Returns the verification mode (bitmask) currently set in $ctx.

    my $rv = Net::SSLeay::CTX_get_verify_mode($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: mode (bitmask)

For bitmask details see L</"CTX_set_verify">.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get_verify_mode.html>

=item * CTX_set_verify

Sets the verification flags for $ctx to be $mode and specifies the verify_callback function to be used.

    Net::SSLeay::CTX_set_verify($ctx, $mode, $callback);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $mode - mode (bitmask), see OpenSSL manual
    # $callback - [optional] reference to perl callback function
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_verify.html>

=item * CTX_set_post_handshake_auth

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.1, not in LibreSSL

Enable the Post-Handshake Authentication extension to be added to the ClientHello such that post-handshake authentication can be requested by the server.

    Net::SSLeay::CTX_set_posthandshake_auth($ctx, $val);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $val - 0 then the extension is not sent, otherwise it is
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_post_handshake_auth.html>

=item * CTX_load_verify_locations

Specifies the locations for $ctx, at which CA certificates for verification purposes are located. The certificates available via $CAfile and $CApath are trusted.

    my $rv = Net::SSLeay::CTX_load_verify_locations($ctx, $CAfile, $CApath);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $CAfile - (string) file of CA certificates in PEM format, the file can contain several CA certificates (or '')
    # $CApath - (string) directory containing CA certificates in PEM format (or '')
    #
    # returns: 1 on success, 0 on failure (check the error stack to find out the reason)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_load_verify_locations.html>

=item * CTX_need_tmp_RSA

Return the result of C<SSL_CTX_ctrl(ctx,SSL_CTRL_NEED_TMP_RSA,0,NULL)>

    my $rv = Net::SSLeay::CTX_need_tmp_RSA($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: result of SSL_CTRL_NEED_TMP_RSA command

Not available with OpenSSL 1.1 and later.

=item * CTX_new

The same as L</CTX_v23_new>

    my $rv = Net::SSLeay::CTX_new();
    #
    # returns: value corresponding to openssl's SSL_CTX structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_new.html>

Not available with OpenSSL 1.1 and later.

=item * CTX_v2_new

Creates a new SSL_CTX object - based on SSLv2_method() - as framework to establish TLS/SSL enabled connections.

    my $rv = Net::SSLeay::CTX_v2_new();
    #
    # returns: value corresponding to openssl's SSL_CTX structure (0 on failure)

=item * CTX_v23_new

Creates a new SSL_CTX object - based on SSLv23_method() - as framework to establish TLS/SSL enabled connections.

    my $rv = Net::SSLeay::CTX_v23_new();
    #
    # returns: value corresponding to openssl's SSL_CTX structure (0 on failure)

=item * CTX_v3_new

Creates a new SSL_CTX object - based on SSLv3_method() - as framework to establish TLS/SSL enabled connections.

    my $rv = Net::SSLeay::CTX_v3_new();
    #
    # returns: value corresponding to openssl's SSL_CTX structure (0 on failure)

=item * CTX_tlsv1_new

B<COMPATIBILITY:> Requires OpenSSL or LibreSSL built with support for TLSv1.

Creates a new SSL_CTX object - based on C<TLSv1_method()> - as a framework for establishing connections using TLSv1.

    my $rv = Net::SSLeay::CTX_tlsv1_new();
    #
    # returns: value corresponding to openssl's SSL_CTX structure (0 on failure)

=item * CTX_tlsv1_1_new

B<COMPATIBILITY:> Requires OpenSSL >= 1.0.1 or LibreSSL built with support for TLSv1.1.

Creates a new SSL_CTX object - based on C<TLSv1_1_method()> - as a framework for establishing connections using TLSv1.1.

    my $rv = Net::SSLeay::CTX_tlsv1_1_new();
    #
    # returns: value corresponding to openssl's SSL_CTX structure (0 on failure)

=item * CTX_tlsv1_2_new

B<COMPATIBILITY:> Requires OpenSSL >= 1.0.1 or LibreSSL built with support for TLSv1.2.

Creates a new SSL_CTX object - based on C<TLSv1_2_method()> - as a framework for establishing connections using TLSv1.2.

    my $rv = Net::SSLeay::CTX_tlsv1_2_new();
    #
    # returns: value corresponding to openssl's SSL_CTX structure (0 on failure)

=item * CTX_new_with_method

Creates a new SSL_CTX object based on $meth method

    my $rv = Net::SSLeay::CTX_new_with_method($meth);
    # $meth - value corresponding to openssl's SSL_METHOD structure
    #
    # returns: value corresponding to openssl's SSL_CTX structure (0 on failure)

    # example
    my $ctx = Net::SSLeay::CTX_new_with_method(&Net::SSLeay::TLSv1_method);

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_new.html>

=item * CTX_set_min_proto_version, CTX_set_max_proto_version, set_min_proto_version and set_max_proto_version,

B<COMPATIBILITY:> not available in Net-SSLeay-1.82 and before; requires at least OpenSSL 1.1.0-pre2 or LibreSSL 2.6.0

Set the minimum and maximum supported protocol for $ctx or $ssl.

    my $rv = Net::SSLeay::CTX_set_min_proto_version($ctx, $version);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $version - (integer) constant version value or 0 for automatic lowest or highest value
    #
    # returns: 1 on success, 0 on failure

    # example: allow only TLS 1.2 for a SSL_CTX
    my $rv_min = Net::SSLeay::CTX_set_min_proto_version($ctx, Net::SSLeay::TLS1_2_VERSION());
    my $rv_max = Net::SSLeay::CTX_set_max_proto_version($ctx, Net::SSLeay::TLS1_2_VERSION());

    # example: allow only TLS 1.1 for a SSL
    my $rv_min = Net::SSLeay::set_min_proto_version($ssl, Net::SSLeay::TLS1_1_VERSION());
    my $rv_max = Net::SSLeay::set_max_proto_version($ssl, Net::SSLeay::TLS1_1_VERSION());

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_min_proto_version.html>

=item * CTX_get_min_proto_version, CTX_get_max_proto_version, get_min_proto_version and get_max_proto_version,

B<COMPATIBILITY:> not available in Net-SSLeay-1.82 and before; requires at least OpenSSL 1.1.0g

Get the minimum and maximum supported protocol for $ctx or $ssl.

    my $version = Net::SSLeay::CTX_get_min_proto_version($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
