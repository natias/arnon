
=item *

C<piconv> is an implementation of the character conversion utility
C<iconv>, demonstrating the new Encode module.

=item *

C<pod2html> now allows specifying a cache directory.

=item *

C<pod2html> now produces XHTML 1.0.

=item *

C<pod2html> now understands POD written using different line endings
(PC-like CRLF versus Unix-like LF versus MacClassic-like CR).

=item *

C<s2p> has been completely rewritten in Perl.  (It is in fact a full
implementation of sed in Perl: you can use the sed functionality by
using the C<psed> utility.)

=item *

C<xsubpp> now understands POD documentation embedded in the *.xs
files. [561]

=item *

C<xsubpp> now supports the OUT keyword.

=back

=head1 New Documentation

=over 4

=item *

perl56delta details the changes between the 5.005 release and the
5.6.0 release.

=item *

perlclib documents the internal replacements for standard C library
functions.  (Interesting only for extension writers and Perl core
hackers.) [561+]

=item *

perldebtut is a Perl debugging tutorial. [561+]

=item *

perlebcdic contains considerations for running Perl on EBCDIC
platforms. [561+]

=item *

perlintro is a gentle introduction to Perl.

=item *

perliol documents the internals of PerlIO with layers.

=item *

perlmodstyle is a style guide for writing modules.

=item *

perlnewmod tells about writing and submitting a new module. [561+]

=item *

perlpacktut is a pack() tutorial.

=item *

perlpod has been rewritten to be clearer and to record the best
practices gathered over the years.

=item *

perlpodspec is a more formal specification of the pod format,
mainly of interest for writers of pod applications, not to
people writing in pod.

=item *

perlretut is a regular expression tutorial. [561+]

=item *

perlrequick is a regular expressions quick-start guide.
Yes, much quicker than perlretut. [561]

=item *

perltodo has been updated.

=item *

perltootc has been renamed as perltooc (to not to conflict
with perltoot in filesystems restricted to "8.3" names).

=item *

perluniintro is an introduction to using Unicode in Perl.
(perlunicode is more of a detailed reference and background
information)

=item *

perlutil explains the command line utilities packaged with the Perl
distribution. [561+]

=back

The following platform-specific documents are available before
the installation as README.I<platform>, and after the installation
as perlI<platform>:

    perlaix perlamiga perlapollo perlbeos perlbs2000
    perlce perlcygwin perldgux perldos perlepoc perlfreebsd perlhpux
    perlhurd perlirix perlmachten perlmacos perlmint perlmpeix
    perlnetware perlos2 perlos390 perlplan9 perlqnx perlsolaris
    perltru64 perluts perlvmesa perlvms perlvos perlwin32

These documents usually detail one or more of the following subjects:
configuring, building, testing, installing, and sometimes also using
Perl on the said platform.

Eastern Asian Perl users are now welcomed in their own languages:
README.jp (Japanese), README.ko (Korean), README.cn (simplified
Chinese) and README.tw (traditional Chinese), which are written in
normal pod but encoded in EUC-JP, EUC-KR, EUC-CN and Big5.  These
will get installed as

   perljp perlko perlcn perltw

=over 4

=item *

The documentation for the POSIX-BC platform is called "BS2000", to avoid
confusion with the Perl POSIX module.

=item *

The documentation for the WinCE platform is called perlce (README.ce
in the source code kit), to avoid confusion with the perlwin32
documentation on 8.3-restricted filesystems.

=back

=head1 Performance Enhancements

=over 4

=item *

map() could get pathologically slow when the result list it generates
is larger than the source list.  The performance has been improved for
common scenarios. [561]

=item *

sort() is also fully reentrant, in the sense that the sort function
can itself call sort().  This did not work reliably in previous
releases. [561]

=item *

sort() has been changed to use primarily mergesort internally as
opposed to the earlier quicksort.  For very small lists this may
result in slightly slower sorting times, but in general the speedup
should be at least 20%.  Additional bonuses are that the worst case
behaviour of sort() is now better (in computer science terms it now
runs in time O(N log N), as opposed to quicksort's Theta(N**2)
worst-case run time behaviour), and that sort() is now stable
(meaning that elements with identical keys will stay ordered as they
were before the sort).  See the C<sort> pragma for information.

The story in more detail: suppose you want to serve yourself a little
slice of Pi.

    @digits = ( 3,1,4,1,5,9 );

A numerical sort of the digits will yield (1,1,3,4,5,9), as expected.
Which C<1> comes first is hard to know, since one C<1> looks pretty
much like any other.  You can regard this as totally trivial,
or somewhat profound.  However, if you just want to sort the even
digits ahead of the odd ones, then what will

    sort { ($a % 2) <=> ($b % 2) } @digits;

yield?  The only even digit, C<4>, will come first.  But how about
the odd numbers, which all compare equal?  With the quicksort algorithm
used to implement Perl 5.6 and earlier, the order of ties is left up
to the sort.  So, as you add more and more digits of Pi, the order
in which the sorted even and odd digits appear will change.
and, for sufficiently large slices of Pi, the quicksort algorithm
in Perl 5.8 won't return the same results even if reinvoked with the
same input.  The justification for this rests with quicksort's
worst case behavior.  If you run

   sort { $a <=> $b } ( 1 .. $N , 1 .. $N );

(something you might approximate if you wanted to merge two sorted
arrays using sort), doubling $N doesn't just double the quicksort time,
it I<quadruples> it.  Quicksort has a worst case run time that can
grow like N**2, so-called I<quadratic> behaviour, and it can happen
on patterns that may well arise in normal use.  You won't notice this
for small arrays, but you I<will> notice it with larger arrays,
and you may not live long enough for the sort to complete on arrays
of a million elements.  So the 5.8 quicksort scrambles large arrays
before sorting them, as a statistical defence against quadratic behaviour.
But that means if you sort the same large array twice, ties may be
broken in different ways.

Because of the unpredictability of tie-breaking order, and the quadratic
worst-case behaviour, quicksort was I<almost> replaced completely with
a stable mergesort.  I<Stable> means that ties are broken to preserve
the original order of appearance in the input array.  So

    sort { ($a % 2) <=> ($b % 2) } (3,1,4,1,5,9);

will yield (4,3,1,1,5,9), guaranteed.  The even and odd numbers
appear in the output in the same order they appeared in the input.
Mergesort has worst case O(N log N) behaviour, the best value
attainable.  And, ironically, this mergesort does particularly
well where quicksort goes quadratic:  mergesort sorts (1..$N, 1..$N)
in O(N) time.  But quicksort was rescued at the last moment because
it is faster than mergesort on certain inputs and platforms.
For example, if you really I<don't> care about the order of even
and odd digits, quicksort will run in O(N) time; it's very good
at sorting many repetitions of a small number of distinct elements.
The quicksort divide and conquer strategy works well on platforms
with relatively small, very fast, caches.  Eventually, the problem gets
whittled down to one that fits in the cache, from which point it
benefits from the increased memory speed.

Quicksort was rescued by implementing a sort pragma to control aspects
of the sort.  The B<stable> subpragma forces stable behaviour,
regardless of algorithm.  The B<_quicksort> and B<_mergesort>
subpragmas are heavy-handed ways to select the underlying implementation.
The leading C<_> is a reminder that these subpragmas may not survive
beyond 5.8.  More appropriate mechanisms for selecting the implementation
exist, but they wouldn't have arrived in time to save quicksort.

=item *

Hashes now use Bob Jenkins "One-at-a-Time" hashing key algorithm
( http://burtleburtle.net/bob/hash/doobs.html ).  This algorithm is
reasonably fast while producing a much better spread of values than
the old hashing algorithm (originally by Chris Torek, later tweaked by
Ilya Zakharevich).  Hash values output from the algorithm on a hash of
all 3-char printable ASCII keys comes much closer to passing the
DIEHARD random number generation tests.  According to perlbench, this
change has not affected the overall speed of Perl.

=item *

unshift() should now be noticeably faster.

=back

=head1 Installation and Configuration Improvements

=head2 Generic Improvements

=over 4

=item *

INSTALL now explains how you can configure Perl to use 64-bit
integers even on non-64-bit platforms.

=item *

Policy.sh policy change: if you are reusing a Policy.sh file
(see INSTALL) and you use Configure -Dprefix=/foo/bar and in the old
Policy $prefix eq $siteprefix and $prefix eq $vendorprefix, all of
them will now be changed to the new prefix, /foo/bar.  (Previously
only $prefix changed.)  If you do not like this new behaviour,
specify prefix, siteprefix, and vendorprefix explicitly.

=item *

A new optional location for Perl libraries, otherlibdirs, is available.
It can be used for example for vendor add-ons without disturbing Perl's
own library directories.

=item *

In many platforms, the vendor-supplied 'cc' is too stripped-down to
build Perl (basically, 'cc' doesn't do ANSI C).  If this seems
to be the case and 'cc' does not seem to be the GNU C compiler
'gcc', an automatic attempt is made to find and use 'gcc' instead.

=item *

gcc needs to closely track the operating system release to avoid
build problems. If Configure finds that gcc was built for a different
operating system release than is running, it now gives a clearly visible
warning that there may be trouble ahead.

=item *

Since Perl 5.8 is not binary-compatible with previous releases
of Perl, Configure no longer suggests including the 5.005
modules in @INC.

=item *

Configure C<-S> can now run non-interactively. [561]

=item *

Configure support for pdp11-style memory models has been removed due
to obsolescence. [561]

=item *

configure.gnu now works with options with whitespace in them.

=item *

installperl now outputs everything to STDERR.

=item *

Because PerlIO is now the default on most platforms, "-perlio" doesn't
get appended to the $Config{archname} (also known as $^O) anymore.
Instead, if you explicitly choose not to use perlio (Configure command
line option -Uuseperlio), you will get "-stdio" appended.

=item *

Another change related to the architecture name is that "-64all"
(-Duse64bitall, or "maximally 64-bit") is appended only if your
pointers are 64 bits wide.  (To be exact, the use64bitall is ignored.)

=item *

In AFS installations, one can configure the root of the AFS to be
somewhere else than the default F</afs> by using the Configure
parameter C<-Dafsroot=/some/where/else>.

=item *

APPLLIB_EXP, a lesser-known configuration-time definition, has been
documented.  It can be used to prepend site-specific directories
to Perl's default search path (@INC); see INSTALL for information.

=item *

The version of Berkeley DB used when the Perl (and, presumably, the
DB_File extension) was built is now available as
C<@Config{qw(db_version_major db_version_minor db_version_patch)}>
from Perl and as C<DB_VERSION_MAJOR_CFG DB_VERSION_MINOR_CFG
DB_VERSION_PATCH_CFG> from C.

=item *

Building Berkeley DB3 for compatibility modes for DB, NDBM, and ODBM
has been documented in INSTALL.

=item *

If you have CPAN access (either network or a local copy such as a
CD-ROM) you can during specify extra modules to Configure to build and
install with Perl using the -Dextras=...  option.  See INSTALL for
more details.

=item *

In addition to config.over, a new override file, config.arch, is
available.  This file is supposed to be used by hints file writers
for architecture-wide changes (as opposed to config.over which is
for site-wide changes).

=item *

If your file system supports symbolic links, you can build Perl outside
of the source directory by

	mkdir perl/build/directory
	cd perl/build/directory
	sh /path/to/perl/source/Configure -Dmksymlinks ...

This will create in perl/build/directory a tree of symbolic links
pointing to files in /path/to/perl/source.  The original files are left
unaffected.  After Configure has finished, you can just say

	make all test

and Perl will be built and tested, all in perl/build/directory.
[561]

=item *

For Perl developers, several new make targets for profiling
and debugging have been added; see L<perlhack>.

=over 8

=item *

Use of the F<gprof> tool to profile Perl has been documented in
L<perlhack>.  There is a make target called "perl.gprof" for
generating a gprofiled Perl executable.

=item *

If you have GCC 3, there is a make target called "perl.gcov" for
creating a gcoved Perl executable for coverage analysis.  See
L<perlhack>.

=item *

If you are on IRIX or Tru64 platforms, new profiling/debugging options
have been added; see L<perlhack> for more information about pixie and
Third Degree.

=back

=item *

Guidelines of how to construct minimal Perl installations have
been added to INSTALL.

=item *

The Thread extension is now not built at all under ithreads
(C<Configure -Duseithreads>) because it wouldn't work anyway (the
Thread extension requires being Configured with C<-Duse5005threads>).

B<Note that the 5.005 threads are unsupported and deprecated: if you
have code written for the old threads you should migrate it to the
new ithreads model.>

=item *

The Gconvert macro ($Config{d_Gconvert}) used by perl for stringifying
floating-point numbers is now more picky about using sprintf %.*g
rules for the conversion.  Some platforms that used to use gcvt may
now resort to the slower sprintf.

=item *

The obsolete method of making a special (e.g., debugging) flavor
of perl by saying

	make LIBPERL=libperld.a

has been removed. Use -DDEBUGGING instead.

=back

=head2 New Or Improved Platforms

For the list of platforms known to support Perl,
see L<perlport/"Supported Platforms">.

=over 4

=item *

AIX dynamic loading should be now better supported.

=item *

AIX should now work better with gcc, threads, and 64-bitness.  Also the
long doubles support in AIX should be better now.  See L<perlaix>.

=item *

AtheOS ( http://www.atheos.cx/ ) is a new platform.

=item *

BeOS has been reclaimed.

=item *

The DG/UX platform now supports 5.005-style threads.
See L<perldgux>.

=item *

The DYNIX/ptx platform (also known as dynixptx) is supported at or
near osvers 4.5.2.

=item *

EBCDIC platforms (z/OS (also known as OS/390), POSIX-BC, and VM/ESA)
have been regained.  Many test suite tests still fail and the
co-existence of Unicode and EBCDIC isn't quite settled, but the
situation is much better than with Perl 5.6.  See L<perlos390>,
L<perlbs2000> (for POSIX-BC), and perlvmesa for more information.
(B<Note:> support for VM/ESA was removed in Perl v5.18.0. The relevant
information was in F<README.vmesa>)

=item *

Building perl with -Duseithreads or -Duse5005threads now works under
HP-UX 10.20 (previously it only worked under 10.30 or later). You will
need a thread library package installed. See README.hpux. [561]

=item *

Mac OS Classic is now supported in the mainstream source package
(MacPerl has of course been available since perl 5.004 but now the
source code bases of standard Perl and MacPerl have been synchronised)
[561]

=item *

Mac OS X (or Darwin) should now be able to build Perl even on HFS+
filesystems.  (The case-insensitivity used to confuse the Perl build
process.)

=item *

NCR MP-RAS is now supported. [561]

=item *

All the NetBSD specific patches (except for the installation
specific ones) have been merged back to the main distribution.

=item *

NetWare from Novell is now supported.  See L<perlnetware>.

=item *

NonStop-UX is now supported. [561]

=item *

NEC SUPER-UX is now supported.

=item *

All the OpenBSD specific patches (except for the installation
specific ones) have been merged back to the main distribution.

=item *

Perl has been tested with the GNU pth userlevel thread package
( http://www.gnu.org/software/pth/pth.html ).  All thread tests
of Perl now work, but not without adding some yield()s to the tests,
so while pth (and other userlevel thread implementations) can be
considered to be "working" with Perl ithreads, keep in mind the
possible non-preemptability of the underlying thread implementation.

=item *

Stratus VOS is now supported using Perl's native build method
(Configure).  This is the recommended method to build Perl on
VOS.  The older methods, which build miniperl, are still
available.  See L<perlvos>. [561+]

=item *

The Amdahl UTS Unix mainframe platform is now supported. [561]

=item *

WinCE is now supported.  See L<perlce>.

=item *

z/OS (formerly known as OS/390, formerly known as MVS OE) now has
support for dynamic loading.  This is not selected by default,
however, you must specify -Dusedl in the arguments of Configure. [561]

=back

=head1 Selected Bug Fixes

Numerous memory leaks and uninitialized memory accesses have been
hunted down.  Most importantly, anonymous subs used to leak quite
a bit. [561]

=over 4

=item *

The autouse pragma didn't work for Multi::Part::Function::Names.

=item *

caller() could cause core dumps in certain situations.  Carp was
sometimes affected by this problem.  In particular, caller() now
returns a subroutine name of C<(unknown)> for subroutines that have
been removed from the symbol table.

=item *

chop(@list) in list context returned the characters chopped in
reverse order.  This has been reversed to be in the right order. [561]

=item *

Configure no longer includes the DBM libraries (dbm, gdbm, db, ndbm)
when building the Perl binary.  The only exception to this is SunOS 4.x,
which needs them. [561]

=item *

The behaviour of non-decimal but numeric string constants such as
"0x23" was platform-dependent: in some platforms that was seen as 35,
in some as 0, in some as a floating point number (don't ask).  This
was caused by Perl's using the operating system libraries in a situation
where the result of the string to number conversion is undefined: now
Perl consistently handles such strings as zero in numeric contexts.

=item *

Several debugger fixes: exit code now reflects the script exit code,
condition C<"0"> now treated correctly, the C<d> command now checks
line number, C<$.> no longer gets corrupted, and all debugger output
now goes correctly to the socket if RemotePort is set. [561]

=item *

The debugger (perl5db.pl) has been modified to present a more
consistent commands interface, via (CommandSet=580).  perl5db.t was
also added to test the changes, and as a placeholder for further tests.

See L<perldebug>.

=item *

The debugger has a new C<dumpDepth> option to control the maximum
depth to which nested structures are dumped.  The C<x> command has
been extended so that C<x N EXPR> dumps out the value of I<EXPR> to a
depth of at most I<N> levels.

=item *

The debugger can now show lexical variables if you have the CPAN
module PadWalker installed.

=item *

The order of DESTROYs has been made more predictable.

=item *

Perl 5.6.0 could emit spurious warnings about redefinition of
dl_error() when statically building extensions into perl.
This has been corrected. [561]

=item *

L<dprofpp> -R didn't work.

=item *

C<*foo{FORMAT}> now works.

=item *

Infinity is now recognized as a number.

=item *

UNIVERSAL::isa no longer caches methods incorrectly.  (This broke
the Tk extension with 5.6.0.) [561]

=item *

Lexicals I: lexicals outside an eval "" weren't resolved
correctly inside a subroutine definition inside the eval "" if they
were not already referenced in the top level of the eval""ed code.

=item *

Lexicals II: lexicals leaked at file scope into subroutines that
were declared before the lexicals.

=item *

Lexical warnings now propagating correctly between scopes
and into C<eval "...">.

=item *

C<use warnings qw(FATAL all)> did not work as intended.  This has been
corrected. [561]

=item *

warnings::enabled() now reports the state of $^W correctly if the caller
isn't using lexical warnings. [561]

=item *

Line renumbering with eval and C<#line> now works. [561]

=item *

Fixed numerous memory leaks, especially in eval "".

=item *

Localised tied variables no longer leak memory

    use Tie::Hash;
    tie my %tied_hash => 'Tie::StdHash';

    ...

    # Used to leak memory every time local() was called;
    # in a loop, this added up.
    local($tied_hash{Foo}) = 1;

=item *

Localised hash elements (and %ENV) are correctly unlocalised to not
exist, if they didn't before they were localised.


    use Tie::Hash;
    tie my %tied_hash => 'Tie::StdHash';

    ...

    # Nothing has set the FOO element so far

    { local $tied_hash{FOO} = 'Bar' }

    # This used to print, but not now.
    print "exists!\n" if exists $tied_hash{FOO};

As a side effect of this fix, tied hash interfaces B<must> define
the EXISTS and DELETE methods.

=item *

mkdir() now ignores trailing slashes in the directory name,
as mandated by POSIX.

=item *

Some versions of glibc have a broken modfl().  This affects builds
with C<-Duselongdouble>.  This version of Perl detects this brokenness
and has a workaround for it.  The glibc release 2.2.2 is known to have
fixed the modfl() bug.

=item *

Modulus of unsigned numbers now works (4063328477 % 65535 used to
return 27406, instead of 27047). [561]

=item *

Some "not a number" warnings introduced in 5.6.0 eliminated to be
more compatible with 5.005.  Infinity is now recognised as a number. [561]

=item *

Numeric conversions did not recognize changes in the string value
properly in certain circumstances. [561]

=item *

Attributes (such as :shared) didn't work with our().

=item *

our() variables will not cause bogus "Variable will not stay shared"
warnings. [561]

=item *

"our" variables of the same name declared in two sibling blocks
resulted in bogus warnings about "redeclaration" of the variables.
The problem has been corrected. [561]

=item *

pack "Z" now correctly terminates the string with "\0".

=item *

Fix password routines which in some shadow password platforms
(e.g. HP-UX) caused getpwent() to return every other entry.

=item *

The PERL5OPT environment variable (for passing command line arguments
to Perl) didn't work for more than a single group of options. [561]

=item *

PERL5OPT with embedded spaces didn't work.

=item *

printf() no longer resets the numeric locale to "C".

=item *

C<qw(a\\b)> now parses correctly as C<'a\\b'>: that is, as three
characters, not four. [561]

=item *

pos() did not return the correct value within s///ge in earlier
versions.  This is now handled correctly. [561]

=item *

Printing quads (64-bit integers) with printf/sprintf now works
without the q L ll prefixes (assuming you are on a quad-capable platform).

=item *

Regular expressions on references and overloaded scalars now work. [561+]

=item *

Right-hand side magic (GMAGIC) could in many cases such as string
concatenation be invoked too many times.

=item *

scalar() now forces scalar context even when used in void context.

=item *

SOCKS support is now much more robust.

=item *

sort() arguments are now compiled in the right wantarray context
(they were accidentally using the context of the sort() itself).
The comparison block is now run in scalar context, and the arguments
to be sorted are always provided list context. [561]

=item *

Changed the POSIX character class C<[[:space:]]> to include the (very
rarely used) vertical tab character.  Added a new POSIX-ish character
class C<[[:blank:]]> which stands for horizontal whitespace
(currently, the space and the tab).

=item *

The tainting behaviour of sprintf() has been rationalized.  It does
not taint the result of floating point formats anymore, making the
behaviour consistent with that of string interpolation. [561]

=item *

Some cases of inconsistent taint propagation (such as within hash
values) have been fixed.

=item *

The RE engine found in Perl 5.6.0 accidentally pessimised certain kinds
of simple pattern matches.  These are now handled better. [561]

=item *

Regular expression debug output (whether through C<use re 'debug'>
or via C<-Dr>) now looks better. [561]

=item *

Multi-line matches like C<"a\nxb\n" =~ /(?!\A)x/m> were flawed.  The
bug has been fixed. [561]

=item *

Use of $& could trigger a core dump under some situations.  This
is now avoided. [561]

=item *

The regular expression captured submatches ($1, $2, ...) are now
more consistently unset if the match fails, instead of leaving false
data lying around in them. [561]

=item *

readline() on files opened in "slurp" mode could return an extra
"" (blank line) at the end in certain situations.  This has been
corrected. [561]

=item *

Autovivification of symbolic references of special variables described
in L<perlvar> (as in C<${$num}>) was accidentally disabled.  This works
again now. [561]

=item *

Sys::Syslog ignored the C<LOG_AUTH> constant.

=item *

$AUTOLOAD, sort(), lock(), and spawning subprocesses
in multiple threads simultaneously are now thread-safe.

=item *

Tie::Array's SPLICE method was broken.

=item *

Allow a read-only string on the left-hand side of a non-modifying tr///.

=item *

If C<STDERR> is tied, warnings caused by C<warn> and C<die> now
correctly pass to it.

=item *

Several Unicode fixes.

=over 8

=item *

BOMs (byte order marks) at the beginning of Perl files
(scripts, modules) should now be transparently skipped.
UTF-16 and UCS-2 encoded Perl files should now be read correctly.

=item *

The character tables have been updated to Unicode 3.2.0.

=item *

Comparing with utf8 data does not magically upgrade non-utf8 data
into utf8.  (This was a problem for example if you were mixing data
from I/O and Unicode data: your output might have got magically encoded
as UTF-8.)

=item *

Generating illegal Unicode code points such as U+FFFE, or the UTF-16
surrogates, now also generates an optional warning.

=item *

C<IsAlnum>, C<IsAlpha>, and C<IsWord> now match titlecase.

=item *

Concatenation with the C<.> operator or via variable interpolation,
C<eq>, C<substr>, C<reverse>, C<quotemeta>, the C<x> operator,
substitution with C<s///>, single-quoted UTF-8, should now work.

=item *

The C<tr///> operator now works.  Note that the C<tr///CU>
functionality has been removed (but see pack('U0', ...)).

=item *

C<eval "v200"> now works.

=item *

Perl 5.6.0 parsed m/\x{ab}/ incorrectly, leading to spurious warnings.
This has been corrected. [561]

=item *

Zero entries were missing from the Unicode classes such as C<IsDigit>.

=back

=item *

Large unsigned numbers (those above 2**31) could sometimes lose their
unsignedness, causing bogus results in arithmetic operations. [561]

=item *

The Perl parser has been stress tested using both random input and
Markov chain input and the few found crashes and lockups have been
fixed.

=back

=head2 Platform Specific Changes and Fixes

