            len_b = bmatch - ib
            len_base = zmatch - iz
            assert len_a >= 0
            assert len_b >= 0
            assert len_base >= 0

            # print 'unmatched a=%d, b=%d' % (len_a, len_b)

            if len_a or len_b:
                # try to avoid actually slicing the lists
                equal_a = compare_range(
                    self.a, ia, amatch, self.base, iz, zmatch
                )
                equal_b = compare_range(
                    self.b, ib, bmatch, self.base, iz, zmatch
                )
                same = compare_range(self.a, ia, amatch, self.b, ib, bmatch)

                if same:
                    yield b'same', ia, amatch
                elif equal_a and not equal_b:
                    yield b'b', ib, bmatch
                elif equal_b and not equal_a:
                    yield b'a', ia, amatch
                elif not equal_a and not equal_b:
                    yield b'conflict', iz, zmatch, ia, amatch, ib, bmatch
                else:
                    raise AssertionError(b"can't handle a=b=base but unmatched")

                ia = amatch
                ib = bmatch
            iz = zmatch

            # if the same part of the base was deleted on both sides
            # that's OK, we can just skip it.

            if matchlen > 0:
                assert ia == amatch
                assert ib == bmatch
                assert iz == zmatch

                yield b'unchanged', zmatch, zend
                iz = zend
                ia = aend
                ib = bend

    def find_sync_regions(self):
        """Return a list of sync regions, where both descendants match the base.

        Generates a list of (base1, base2, a1, a2, b1, b2).  There is
        always a zero-length sync region at the end of all the files.
        """

        ia = ib = 0
        amatches = mdiff.get_matching_blocks(self.basetext, self.atext)
        bmatches = mdiff.get_matching_blocks(self.basetext, self.btext)
        len_a = len(amatches)
        len_b = len(bmatches)

        sl = []

        while ia < len_a and ib < len_b:
            abase, amatch, alen = amatches[ia]
            bbase, bmatch, blen = bmatches[ib]

            # there is an unconflicted block at i; how long does it
            # extend?  until whichever one ends earlier.
            i = intersect((abase, abase + alen), (bbase, bbase + blen))
            if i:
                intbase = i[0]
                intend = i[1]
                intlen = intend - intbase

                # found a match of base[i[0], i[1]]; this may be less than
                # the region that matches in either one
                assert intlen <= alen
                assert intlen <= blen
                assert abase <= intbase
                assert bbase <= intbase

                asub = amatch + (intbase - abase)
                bsub = bmatch + (intbase - bbase)
                aend = asub + intlen
                bend = bsub + intlen

                assert self.base[intbase:intend] == self.a[asub:aend], (
                    self.base[intbase:intend],
                    self.a[asub:aend],
                )

                assert self.base[intbase:intend] == self.b[bsub:bend]

                sl.append((intbase, intend, asub, aend, bsub, bend))

            # advance whichever one ends first in the base text
            if (abase + alen) < (bbase + blen):
                ia += 1
            else:
                ib += 1

        intbase = len(self.base)
        abase = len(self.a)
        bbase = len(self.b)
        sl.append((intbase, intbase, abase, abase, bbase, bbase))

        return sl


def _verifytext(input):
    """verifies that text is non-binary (unless opts[text] is passed,
    then we just warn)"""
    if stringutil.binary(input.text()):
        msg = _(b"%s looks like a binary file.") % input.fctx.path()
        raise error.Abort(msg)


def _format_labels(*inputs):
    pad = max(len(input.label) if input.label else 0 for input in inputs)
    labels = []
    for input in inputs:
        if input.label:
            if input.label_detail:
                label = (
                    (input.label + b':').ljust(pad + 1)
                    + b' '
                    + input.label_detail
                )
            else:
                label = input.label
            # 8 for the prefix of conflict marker lines (e.g. '<<<<<<< ')
            labels.append(stringutil.ellipsis(label, 80 - 8))
        else:
            labels.append(None)
    return labels


def _detect_newline(m3):
    if len(m3.a) > 0:
        if m3.a[0].endswith(b'\r\n'):
            return b'\r\n'
        elif m3.a[0].endswith(b'\r'):
            return b'\r'
    return b'\n'


def _minimize(a_lines, b_lines):
    """Trim conflict regions of lines where A and B sides match.

    Lines where both A and B have made the same changes at the beginning
    or the end of each merge region are eliminated from the conflict
    region and are instead considered the same.
    """
    alen = len(a_lines)
    blen = len(b_lines)

    # find matches at the front
    ii = 0
    while ii < alen and ii < blen and a_lines[ii] == b_lines[ii]:
        ii += 1
    startmatches = ii

    # find matches at the end
    ii = 0
    while ii < alen and ii < blen and a_lines[-ii - 1] == b_lines[-ii - 1]:
        ii += 1
    endmatches = ii

    lines_before = a_lines[:startmatches]
    new_a_lines = a_lines[startmatches : alen - endmatches]
    new_b_lines = b_lines[startmatches : blen - endmatches]
    lines_after = a_lines[alen - endmatches :]
    return lines_before, new_a_lines, new_b_lines, lines_after


def render_minimized(
    m3,
    name_a=None,
    name_b=None,
    start_marker=b'<<<<<<<',
    mid_marker=b'=======',
    end_marker=b'>>>>>>>',
):
    """Return merge in cvs-like form."""
    newline = _detect_newline(m3)
    conflicts = False
    if name_a:
        start_marker = start_marker + b' ' + name_a
    if name_b:
        end_marker = end_marker + b' ' + name_b
    merge_groups = m3.merge_groups()
    lines = []
    for what, group_lines in merge_groups:
        if what == b'conflict':
            conflicts = True
            base_lines, a_lines, b_lines = group_lines
            minimized = _minimize(a_lines, b_lines)
            lines_before, a_lines, b_lines, lines_after = minimized
            lines.extend(lines_before)
            lines.append(start_marker + newline)
            lines.extend(a_lines)
            lines.append(mid_marker + newline)
            lines.extend(b_lines)
            lines.append(end_marker + newline)
            lines.extend(lines_after)
        else:
            lines.extend(group_lines)
    return lines, conflicts


def render_merge3(m3, name_a, name_b, name_base):
    """Render conflicts as 3-way conflict markers."""
    newline = _detect_newline(m3)
    conflicts = False
    lines = []
    for what, group_lines in m3.merge_groups():
        if what == b'conflict':
            base_lines, a_lines, b_lines = group_lines
            conflicts = True
            lines.append(b'<<<<<<< ' + name_a + newline)
            lines.extend(a_lines)
            lines.append(b'||||||| ' + name_base + newline)
            lines.extend(base_lines)
            lines.append(b'=======' + newline)
            lines.extend(b_lines)
            lines.append(b'>>>>>>> ' + name_b + newline)
        else:
            lines.extend(group_lines)
    return lines, conflicts


def render_mergediff(m3, name_a, name_b, name_base):
    """Render conflicts as conflict markers with one snapshot and one diff."""
    newline = _detect_newline(m3)
    lines = []
    conflicts = False
    for what, group_lines in m3.merge_groups():
        if what == b'conflict':
            base_lines, a_lines, b_lines = group_lines
            base_text = b''.join(base_lines)
            b_blocks = list(
                mdiff.allblocks(
                    base_text,
                    b''.join(b_lines),
                    lines1=base_lines,
                    lines2=b_lines,
                )
            )
            a_blocks = list(
                mdiff.allblocks(
                    base_text,
                    b''.join(a_lines),
                    lines1=base_lines,
                    lines2=b_lines,
                )
            )

            def matching_lines(blocks):
                return sum(
                    block[1] - block[0]
                    for block, kind in blocks
                    if kind == b'='
                )

            def diff_lines(blocks, lines1, lines2):
                for block, kind in blocks:
                    if kind == b'=':
                        for line in lines1[block[0] : block[1]]:
                            yield b' ' + line
                    else:
                        for line in lines1[block[0] : block[1]]:
                            yield b'-' + line
                        for line in lines2[block[2] : block[3]]:
                            yield b'+' + line

            lines.append(b"<<<<<<<" + newline)
            if matching_lines(a_blocks) < matching_lines(b_blocks):
                lines.append(b"======= " + name_a + newline)
                lines.extend(a_lines)
                lines.append(b"------- " + name_base + newline)
                lines.append(b"+++++++ " + name_b + newline)
                lines.extend(diff_lines(b_blocks, base_lines, b_lines))
            else:
                lines.append(b"------- " + name_base + newline)
                lines.append(b"+++++++ " + name_a + newline)
                lines.extend(diff_lines(a_blocks, base_lines, a_lines))
                lines.append(b"======= " + name_b + newline)
                lines.extend(b_lines)
            lines.append(b">>>>>>>" + newline)
            conflicts = True
        else:
            lines.extend(group_lines)
    return lines, conflicts


def _resolve(m3, sides):
    lines = []
    for what, group_lines in m3.merge_groups():
        if what == b'conflict':
            for side in sides:
                lines.extend(group_lines[side])
        else:
            lines.extend(group_lines)
    return lines


class MergeInput:
    def __init__(self, fctx, label=None, label_detail=None):
        self.fctx = fctx
        self.label = label
        # If the "detail" part is set, then that is rendered after the label and
        # separated by a ':'. The label is padded to make the ':' aligned among
        # all merge inputs.
        self.label_detail = label_detail
        self._text = None

    def text(self):
        if self._text is None:
            # Merges were always run in the working copy before, which means
            # they used decoded data, if the user defined any repository
            # filters.
            #
            # Maintain that behavior today for BC, though perhaps in the future
            # it'd be worth considering whether merging encoded data (what the
            # repository usually sees) might be more useful.
            self._text = self.fctx.decodeddata()
        return self._text

    def set_text(self, text):
        self._text = text


def simplemerge(
    local,
    base,
    other,
    mode=b'merge',
    allow_binary=False,
):
    """Performs the simplemerge algorithm.

    The merged result is written into `localctx`.
    """

    if not allow_binary:
        _verifytext(local)
        _verifytext(base)
        _verifytext(other)

    m3 = Merge3Text(base.text(), local.text(), other.text())
    conflicts = False
    if mode == b'union':
        lines = _resolve(m3, (1, 2))
    elif mode == b'local':
        lines = _resolve(m3, (1,))
    elif mode == b'other':
        lines = _resolve(m3, (2,))
    else:
        if mode == b'mergediff':
            labels = _format_labels(local, other, base)
            lines, conflicts = render_mergediff(m3, *labels)
        elif mode == b'merge3':
            labels = _format_labels(local, other, base)
            lines, conflicts = render_merge3(m3, *labels)
        else:
            labels = _format_labels(local, other)
            lines, conflicts = render_minimized(m3, *labels)

    mergedtext = b''.join(lines)
    return mergedtext, conflicts
                                                                                                                                                                                              usr/lib/python3/dist-packages/mercurial/smartset.py                                                 0000644 0000000 0000000 00000103075 14355257011 021156  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # smartset.py - data structure for revision set
#
# Copyright 2010 Olivia Mackall <olivia@selenic.com>
#
# This software may be used and distributed according to the terms of the
# GNU General Public License version 2 or any later version.


from .pycompat import getattr
from . import (
    encoding,
    error,
    pycompat,
    util,
)
from .utils import stringutil


def _typename(o):
    return pycompat.sysbytes(type(o).__name__).lstrip(b'_')


class abstractsmartset:
    def __nonzero__(self):
        """True if the smartset is not empty"""
        raise NotImplementedError()

    __bool__ = __nonzero__

    def __contains__(self, rev):
        """provide fast membership testing"""
        raise NotImplementedError()

    def __iter__(self):
        """iterate the set in the order it is supposed to be iterated"""
        raise NotImplementedError()

    # Attributes containing a function to perform a fast iteration in a given
    # direction. A smartset can have none, one, or both defined.
    #
    # Default value is None instead of a function returning None to avoid
    # initializing an iterator just for testing if a fast method exists.
    fastasc = None
    fastdesc = None

    def isascending(self):
        """True if the set will iterate in ascending order"""
        raise NotImplementedError()

    def isdescending(self):
        """True if the set will iterate in descending order"""
        raise NotImplementedError()

    def istopo(self):
        """True if the set will iterate in topographical order"""
        raise NotImplementedError()

    def min(self):
        """return the minimum element in the set"""
        if self.fastasc is None:
            v = min(self)
        else:
            for v in self.fastasc():
                break
            else:
                raise ValueError(b'arg is an empty sequence')
        self.min = lambda: v
        return v

    def max(self):
        """return the maximum element in the set"""
        if self.fastdesc is None:
            return max(self)
        else:
            for v in self.fastdesc():
                break
            else:
                raise ValueError(b'arg is an empty sequence')
        self.max = lambda: v
        return v

    def first(self):
        """return the first element in the set (user iteration perspective)

        Return None if the set is empty"""
        raise NotImplementedError()

    def last(self):
        """return the last element in the set (user iteration perspective)

        Return None if the set is empty"""
        raise NotImplementedError()

    def __len__(self):
        """return the length of the smartsets

        This can be expensive on smartset that could be lazy otherwise."""
        raise NotImplementedError()

    def reverse(self):
        """reverse the expected iteration order"""
        raise NotImplementedError()

    def sort(self, reverse=False):
        """get the set to iterate in an ascending or descending order"""
        raise NotImplementedError()

    def __and__(self, other):
        """Returns a new object with the intersection of the two collections.

        This is part of the mandatory API for smartset."""
        if isinstance(other, fullreposet):
            return self
        return self.filter(other.__contains__, condrepr=other, cache=False)

    def __add__(self, other):
        """Returns a new object with the union of the two collections.

        This is part of the mandatory API for smartset."""
        return addset(self, other)

    def __sub__(self, other):
        """Returns a new object with the substraction of the two collections.

        This is part of the mandatory API for smartset."""
        c = other.__contains__
        return self.filter(
            lambda r: not c(r), condrepr=(b'<not %r>', other), cache=False
        )

    def filter(self, condition, condrepr=None, cache=True):
        """Returns this smartset filtered by condition as a new smartset.

        `condition` is a callable which takes a revision number and returns a
        boolean. Optional `condrepr` provides a printable representation of
        the given `condition`.

        This is part of the mandatory API for smartset."""
        # builtin cannot be cached. but do not needs to
        if cache and util.safehasattr(condition, b'__code__'):
            condition = util.cachefunc(condition)
        return filteredset(self, condition, condrepr)

    def slice(self, start, stop):
        """Return new smartset that contains selected elements from this set"""
        if start < 0 or stop < 0:
            raise error.ProgrammingError(b'negative index not allowed')
        return self._slice(start, stop)

    def _slice(self, start, stop):
        # sub classes may override this. start and stop must not be negative,
        # but start > stop is allowed, which should be an empty set.
        ys = []
        it = iter(self)
        for x in range(start):
            y = next(it, None)
            if y is None:
                break
        for x in range(stop - start):
            y = next(it, None)
            if y is None:
                break
            ys.append(y)
        return baseset(ys, datarepr=(b'slice=%d:%d %r', start, stop, self))


class baseset(abstractsmartset):
    """Basic data structure that represents a revset and contains the basic
    operation that it should be able to perform.

    Every method in this class should be implemented by any smartset class.

    This class could be constructed by an (unordered) set, or an (ordered)
    list-like object. If a set is provided, it'll be sorted lazily.

    >>> x = [4, 0, 7, 6]
    >>> y = [5, 6, 7, 3]

    Construct by a set:
    >>> xs = baseset(set(x))
    >>> ys = baseset(set(y))
    >>> [list(i) for i in [xs + ys, xs & ys, xs - ys]]
    [[0, 4, 6, 7, 3, 5], [6, 7], [0, 4]]
    >>> [type(i).__name__ for i in [xs + ys, xs & ys, xs - ys]]
    ['addset', 'baseset', 'baseset']

    Construct by a list-like:
    >>> xs = baseset(x)
    >>> ys = baseset(i for i in y)
    >>> [list(i) for i in [xs + ys, xs & ys, xs - ys]]
    [[4, 0, 7, 6, 5, 3], [7, 6], [4, 0]]
    >>> [type(i).__name__ for i in [xs + ys, xs & ys, xs - ys]]
    ['addset', 'filteredset', 'filteredset']

    Populate "_set" fields in the lists so set optimization may be used:
    >>> [1 in xs, 3 in ys]
    [False, True]

    Without sort(), results won't be changed:
    >>> [list(i) for i in [xs + ys, xs & ys, xs - ys]]
    [[4, 0, 7, 6, 5, 3], [7, 6], [4, 0]]
    >>> [type(i).__name__ for i in [xs + ys, xs & ys, xs - ys]]
    ['addset', 'filteredset', 'filteredset']

    With sort(), set optimization could be used:
    >>> xs.sort(reverse=True)
    >>> [list(i) for i in [xs + ys, xs & ys, xs - ys]]
    [[7, 6, 4, 0, 5, 3], [7, 6], [4, 0]]
    >>> [type(i).__name__ for i in [xs + ys, xs & ys, xs - ys]]
    ['addset', 'baseset', 'baseset']

    >>> ys.sort()
    >>> [list(i) for i in [xs + ys, xs & ys, xs - ys]]
    [[7, 6, 4, 0, 3, 5], [7, 6], [4, 0]]
    >>> [type(i).__name__ for i in [xs + ys, xs & ys, xs - ys]]
    ['addset', 'baseset', 'baseset']

    istopo is preserved across set operations
    >>> xs = baseset(set(x), istopo=True)
    >>> rs = xs & ys
    >>> type(rs).__name__
    'baseset'
    >>> rs._istopo
    True
    """

    def __init__(self, data=(), datarepr=None, istopo=False):
        """
        datarepr: a tuple of (format, obj, ...), a function or an object that
                  provides a printable representation of the given data.
        """
        self._ascending = None
        self._istopo = istopo
        if isinstance(data, set):
            # converting set to list has a cost, do it lazily
            self._set = data
            # set has no order we pick one for stability purpose
            self._ascending = True
        else:
            if not isinstance(data, list):
                data = list(data)
            self._list = data
        self._datarepr = datarepr

    @util.propertycache
    def _set(self):
        return set(self._list)

    @util.propertycache
    def _asclist(self):
        asclist = self._list[:]
        asclist.sort()
        return asclist

    @util.propertycache
    def _list(self):
        # _list is only lazily constructed if we have _set
        assert '_set' in self.__dict__
        return list(self._set)

    def __iter__(self):
        if self._ascending is None:
            return iter(self._list)
        elif self._ascending:
            return iter(self._asclist)
        else:
            return reversed(self._asclist)

    def fastasc(self):
        return iter(self._asclist)

    def fastdesc(self):
        return reversed(self._asclist)

    @util.propertycache
    def __contains__(self):
        return self._set.__contains__

    def __nonzero__(self):
        return bool(len(self))

    __bool__ = __nonzero__

    def sort(self, reverse=False):
        self._ascending = not bool(reverse)
        self._istopo = False

    def reverse(self):
        if self._ascending is None:
            self._list.reverse()
        else:
            self._ascending = not self._ascending
        self._istopo = False

    def __len__(self):
        if '_list' in self.__dict__:
            return len(self._list)
        else:
            return len(self._set)

    def isascending(self):
        """Returns True if the collection is ascending order, False if not.

        This is part of the mandatory API for smartset."""
        if len(self) <= 1:
            return True
        return self._ascending is not None and self._ascending

    def isdescending(self):
        """Returns True if the collection is descending order, False if not.

        This is part of the mandatory API for smartset."""
        if len(self) <= 1:
            return True
        return self._ascending is not None and not self._ascending

    def istopo(self):
        """Is the collection is in topographical order or not.

        This is part of the mandatory API for smartset."""
        if len(self) <= 1:
            return True
        return self._istopo

    def first(self):
        if self:
            if self._ascending is None:
                return self._list[0]
            elif self._ascending:
                return self._asclist[0]
            else:
                return self._asclist[-1]
        return None

    def last(self):
        if self:
            if self._ascending is None:
                return self._list[-1]
            elif self._ascending:
                return self._asclist[-1]
            else:
                return self._asclist[0]
        return None

    def _fastsetop(self, other, op):
        # try to use native set operations as fast paths
        if (
            type(other) is baseset
            and '_set' in other.__dict__
            and '_set' in self.__dict__
            and self._ascending is not None
        ):
            s = baseset(
                data=getattr(self._set, op)(other._set), istopo=self._istopo
            )
            s._ascending = self._ascending
        else:
            s = getattr(super(baseset, self), op)(other)
        return s

    def __and__(self, other):
        return self._fastsetop(other, b'__and__')

    def __sub__(self, other):
        return self._fastsetop(other, b'__sub__')

    def _slice(self, start, stop):
        # creating new list should be generally cheaper than iterating items
        if self._ascending is None:
            return baseset(self._list[start:stop], istopo=self._istopo)

        data = self._asclist
        if not self._ascending:
            start, stop = max(len(data) - stop, 0), max(len(data) - start, 0)
        s = baseset(data[start:stop], istopo=self._istopo)
        s._ascending = self._ascending
        return s

    @encoding.strmethod
    def __repr__(self):
        d = {None: b'', False: b'-', True: b'+'}[self._ascending]
        s = stringutil.buildrepr(self._datarepr)
        if not s:
            l = self._list
            # if _list has been built from a set, it might have a different
            # order from one python implementation to another.
            # We fallback to the sorted version for a stable output.
            if self._ascending is not None:
                l = self._asclist
            s = pycompat.byterepr(l)
        return b'<%s%s %s>' % (_typename(self), d, s)


class filteredset(abstractsmartset):
    """Duck type for baseset class which iterates lazily over the revisions in
    the subset and contains a function which tests for membership in the
    revset
    """

    def __init__(self, subset, condition=lambda x: True, condrepr=None):
        """
        condition: a function that decide whether a revision in the subset
                   belongs to the revset or not.
        condrepr: a tuple of (format, obj, ...), a function or an object that
                  provides a printable representation of the given condition.
        """
        self._subset = subset
        self._condition = condition
        self._condrepr = condrepr

    def __contains__(self, x):
        return x in self._subset and self._condition(x)

    def __iter__(self):
        return self._iterfilter(self._subset)

    def _iterfilter(self, it):
        cond = self._condition
        for x in it:
            if cond(x):
                yield x

    @property
    def fastasc(self):
        it = self._subset.fastasc
        if it is None:
            return None
        return lambda: self._iterfilter(it())

    @property
    def fastdesc(self):
        it = self._subset.fastdesc
        if it is None:
            return None
        return lambda: self._iterfilter(it())

    def __nonzero__(self):
        fast = None
        candidates = [
            self.fastasc if self.isascending() else None,
            self.fastdesc if self.isdescending() else None,
            self.fastasc,
            self.fastdesc,
        ]
        for candidate in candidates:
            if candidate is not None:
                fast = candidate
                break

        if fast is not None:
            it = fast()
        else:
            it = self

        for r in it:
            return True
        return False

    __bool__ = __nonzero__

    def __len__(self):
        # Basic implementation to be changed in future patches.
        # until this gets improved, we use generator expression
        # here, since list comprehensions are free to call __len__ again
        # causing infinite recursion
        l = baseset(r for r in self)
        return len(l)

    def sort(self, reverse=False):
        self._subset.sort(reverse=reverse)

    def reverse(self):
        self._subset.reverse()

    def isascending(self):
        return self._subset.isascending()

    def isdescending(self):
        return self._subset.isdescending()

    def istopo(self):
        return self._subset.istopo()

    def first(self):
        for x in self:
            return x
        return None

    def last(self):
        it = None
        if self.isascending():
            it = self.fastdesc
        elif self.isdescending():
            it = self.fastasc
        if it is not None:
            for x in it():
                return x
            return None  # empty case
        else:
            x = None
            for x in self:
                pass
            return x

    @encoding.strmethod
    def __repr__(self):
        xs = [pycompat.byterepr(self._subset)]
        s = stringutil.buildrepr(self._condrepr)
        if s:
            xs.append(s)
        return b'<%s %s>' % (_typename(self), b', '.join(xs))


def _iterordered(ascending, iter1, iter2):
    """produce an ordered iteration from two iterators with the same order

    The ascending is used to indicated the iteration direction.
    """
    choice = max
    if ascending:
        choice = min

    val1 = None
    val2 = None
    try:
        # Consume both iterators in an ordered way until one is empty
        while True:
            if val1 is None:
                val1 = next(iter1)
            if val2 is None:
                val2 = next(iter2)
            n = choice(val1, val2)
            yield n
            if val1 == n:
                val1 = None
            if val2 == n:
                val2 = None
    except StopIteration:
        # Flush any remaining values and consume the other one
        it = iter2
        if val1 is not None:
            yield val1
            it = iter1
        elif val2 is not None:
            # might have been equality and both are empty
            yield val2
        for val in it:
            yield val


class addset(abstractsmartset):
    """Represent the addition of two sets

    Wrapper structure for lazily adding two structures without losing much
    performance on the __contains__ method

    If the ascending attribute is set, that means the two structures are
    ordered in either an ascending or descending way. Therefore, we can add
    them maintaining the order by iterating over both at the same time

    >>> xs = baseset([0, 3, 2])
    >>> ys = baseset([5, 2, 4])

    >>> rs = addset(xs, ys)
    >>> bool(rs), 0 in rs, 1 in rs, 5 in rs, rs.first(), rs.last()
    (True, True, False, True, 0, 4)
    >>> rs = addset(xs, baseset([]))
    >>> bool(rs), 0 in rs, 1 in rs, rs.first(), rs.last()
    (True, True, False, 0, 2)
    >>> rs = addset(baseset([]), baseset([]))
    >>> bool(rs), 0 in rs, rs.first(), rs.last()
    (False, False, None, None)

    iterate unsorted:
    >>> rs = addset(xs, ys)
    >>> # (use generator because pypy could call len())
    >>> list(x for x in rs)  # without _genlist
    [0, 3, 2, 5, 4]
    >>> assert not rs._genlist
    >>> len(rs)
    5
    >>> [x for x in rs]  # with _genlist
    [0, 3, 2, 5, 4]
    >>> assert rs._genlist

    iterate ascending:
    >>> rs = addset(xs, ys, ascending=True)
    >>> # (use generator because pypy could call len())
    >>> list(x for x in rs), list(x for x in rs.fastasc())  # without _asclist
    ([0, 2, 3, 4, 5], [0, 2, 3, 4, 5])
    >>> assert not rs._asclist
    >>> len(rs)
    5
    >>> [x for x in rs], [x for x in rs.fastasc()]
    ([0, 2, 3, 4, 5], [0, 2, 3, 4, 5])
    >>> assert rs._asclist

    iterate descending:
    >>> rs = addset(xs, ys, ascending=False)
    >>> # (use generator because pypy could call len())
    >>> list(x for x in rs), list(x for x in rs.fastdesc())  # without _asclist
    ([5, 4, 3, 2, 0], [5, 4, 3, 2, 0])
    >>> assert not rs._asclist
    >>> len(rs)
    5
    >>> [x for x in rs], [x for x in rs.fastdesc()]
    ([5, 4, 3, 2, 0], [5, 4, 3, 2, 0])
    >>> assert rs._asclist

    iterate ascending without fastasc:
    >>> rs = addset(xs, generatorset(ys), ascending=True)
    >>> assert rs.fastasc is None
    >>> [x for x in rs]
    [0, 2, 3, 4, 5]

    iterate descending without fastdesc:
    >>> rs = addset(generatorset(xs), ys, ascending=False)
    >>> assert rs.fastdesc is None
    >>> [x for x in rs]
    [5, 4, 3, 2, 0]
    """

    def __init__(self, revs1, revs2, ascending=None):
        self._r1 = revs1
        self._r2 = revs2
        self._iter = None
        self._ascending = ascending
        self._genlist = None
        self._asclist = None

    def __len__(self):
