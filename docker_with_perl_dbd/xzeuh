 *    persona  {IN}  Persona.
 *    inlen    {IN}  Length of input.
 *    tdulen   {OUT} Buffer needed for signature.
 *
 * NOTES
 *    
 * RETURNS
 *    NZERROR_OK           Success.
 *    NZERROR_TK_NOTOPEN   Persona is not open.
 *    NZERROR_TK_NOTSUPP   Function not supported with persona.
 */
nzerror nztxSignExpansion( nzctx *, nzttPersona *, ub4, ub4 * );

/*--------------- nztxsd_SignDetachedExpansion ---------------*/

/*
 * NAME
 *    nztxsd_SignDetachedExpansion - Determine the size of buffer needed.
 * 
 * PARAMETERS
 *    osscntxt {IN}  OSS context.
 *    persona  {IN}  Persona.
 *    inlen    {IN}  Length of input.
 *    tdulen   {OUT} Buffer needed for signature.
 * 
 * NOTES
 *    
 * RETURNS
 *    NZERROR_OK           Success.
 *    NZERROR_TK_NOTOPEN   Persona is not open.
 *    NZERROR_TK_NOTSUPP   Function not supported with persona.
 */
nzerror nztxsd_SignDetachedExpansion( nzctx *, nzttPersona *, ub4,
                                         ub4 * );

/*------------------------ nztEncrypt ------------------------*/

/*
 * NAME
 *    nztEncrypt - Symmetrically encrypt
 * 
 * PARAMETERS
 *    osscntxt    {IN}     OSS context.
 *    persona     {IN}     Persona.
 *    inlen       {IN}     Length of this input part.
 *    in          {IN}     This input part.
 *    tdubuf      {IN/OUT} TDU buffer.
 * 
 * NOTES
 *    
 * RETURNS
 *    NZERROR_OK           Success.
 *    NZERROR_TK_CANTGROW  Needed to grow TDU buffer but could not.
 *    NZERROR_TK_NOTOPEN   Persona is not open.
 *    NZERROR_TK_NOTSUPP   Function not supported with persona.
 */
nzerror nztEncrypt( nzctx *, nzttPersona *, nzttces, ub4, ub1 *,
                       nzttBufferBlock * );

/*------------------- nztxEncryptExpansion -------------------*/

/*
 * NAME
 *    nztxEncryptExpansion - Determine the size of the TDU to encrypt.
 * 
 * PARAMETERS
 *    osscntxt    {IN}  OSS context.
 *    persona     {IN}  Persona.
 *    inlen       {IN}  Length of this input part.
 *    tdulen      {OUT} Length of TDU.
 * 
 * NOTES
 *    
 * RETURNS
 *    NZERROR_OK           Success.
 *    NZERROR_TK_NOTOPEN   Persona is not open.
 *    NZERROR_TK_NOTSUPP   Function not supported with persona.
 */
nzerror nztxEncryptExpansion( nzctx *, nzttPersona *, ub4, ub4 * );

/*------------------------ nztDecrypt ------------------------*/

/*
 * NAME
 *    nztDecrypt - Decrypt an Encrypted message.
 * 
 * PARAMETERS
 *    osscntxt {IN}     OSS context.
 *    persona  {IN}     Persona.
 *    state    {IN}     State of decryption.
 *    inlen    {IN}     Length of this input part.
 *    in       {IN}     This input part.
 *    out      {IN/OUT} Cleartext message.
 * 
 * NOTES
 *    
 * RETURNS
 *    NZERROR_OK           Success.
 *    NZERROR_TK_CANTGROW  Needed to grow TDU buffer but could not.
 *    NZERROR_TK_NOTOPEN   Persona is not open.
 *    NZERROR_TK_NOTSUPP   Function not supported with persona.
 */
nzerror nztDecrypt( nzctx *, nzttPersona *, nzttces, ub4, ub1 *,
                       nzttBufferBlock * );

/*------------------------ nztEnvelope ------------------------*/

/*
 * NAME
 *    nztEnvelope - Sign and PKEncrypt a message.
 * 
 * PARAMETERS
 *    osscntxt    {IN}     OSS context.
 *    persona     {IN}     Persona.
 *    nrecipients {IN}     Number of recipients for this encryption.
 *    recipients  {IN}     List of recipients.
 *    state       {IN}     State of encryption.
 *    inlen       {IN}     Length of this input part.
 *    in          {IN}     This input part.
 *    tdubuf      {IN/OUT} TDU buffer.
 *
 * NOTES
 *    
 * RETURNS
 *    NZERROR_OK           Success.
 *    NZERROR_TK_CANTGROW  Needed to grow output buffer but could not.
 *    NZERROR_TK_NOTOPEN   Persona is not open.
 *    NZERROR_TK_NOTSUPP   Function not supported with persona.
 */
nzerror nztEnvelope( nzctx *, nzttPersona *, ub4, nzttIdentity *,
                        nzttces, ub4, ub1 *, nzttBufferBlock * );

/*----------------------- nztDeEnvelope -----------------------*/

/*
 * NAME
 *    nztDeEnvelope - PKDecrypt and verify a message.
 * 
 * PARAMETERS
 *    osscntxt    {IN}     OSS context.
 *    persona     {IN}     Persona.
 *    state       {IN}     State of encryption.
 *    inlen       {IN}     Length of this input part.
 *    in          {IN}     This input part.
 *    out         {OUT}    Message from TDU.
 *    verified    {OUT}    TRUE if verified.
 *    validated   {OUT}    TRUE if validated.
 *    sender      {OUT}    Identity of sender.
 *
 * NOTES
 *    
 * RETURNS
 *    NZERROR_OK           Success.
 *    NZERROR_TK_CANTGROW  Needed to grow TDU buffer but could not.
 *    NZERROR_TK_NOTOPEN   Persona is not open.
 *    NZERROR_TK_NOTSUPP   Function not supported with persona.
 */
nzerror nztDeEnvelope( nzctx *, nzttPersona *, nzttces, ub4, ub1 *,
                          nzttBufferBlock *, boolean *, boolean *,
                          nzttIdentity ** );

/*----------------------- nztKeyedHash -----------------------*/

/*
 * NAME
 *    nztKeyedHash - Generate a keyed hash.
 * 
 * PARAMETERS
 *    osscntxt {IN}     OSS context.
 *    persona  {IN}     Persona.
 *    state    {IN}     State of hash.
 *    inlen    {IN}     Length of this input.
 *    in       {IN}     This input.
 *    tdu      {IN/OUT} Output tdu.
 * 
 * NOTES
 *    
 * RETURNS
 *    NZERROR_OK           Success.
 *    NZERROR_TK_CANTGROW  Needed to grow TDU buffer but could not.
 *    NZERROR_TK_NOTOPEN   Persona is not open.
 *    NZERROR_TK_NOTSUPP   Function not supported with persona.
 */
nzerror nztKeyedHash( nzctx *, nzttPersona *, nzttces, ub4, ub1 *,
                         nzttBufferBlock * );

/*------------------ nztxKeyedHashExpansion ------------------*/

/*
 * NAME
 *    nztxKeyedHashExpansion - Determine the space needed for a keyed hash.
 * 
 * PARAMETERS
 *    osscntxt {IN}  OSS context.
 *    persona  {IN}  Persona.
 *    inlen    {IN}  Length of this input.
 *    tdulen   {OUT} TDU length.
 * 
 * NOTES
 *    
 * RETURNS
 *    NZERROR_OK           Success.
 *    NZERROR_TK_NOTOPEN   Persona is not open.
 *    NZERROR_TK_NOTSUPP   Function not supported with persona.
 */
nzerror nztxKeyedHashExpansion( nzctx *, nzttPersona *, ub4, 
                                   ub4 * );

/*--------------------- nztxHashExpansion ---------------------*/

/*
 * NAME
 *    nztxHashExpansion - Determine the size of the TDU for a hash.
 * 
 * PARAMETERS
 *    osscntxt {IN}  OSS context.
 *    persona  {IN}  Persona.
 *    inlen    {IN}  Length of this input.
 *    tdulen   {OUT} TDU length.
 * 
 * NOTES
 *    
 * RETURNS
 *    NZERROR_OK           Success.
 *    NZERROR_TK_NOTOPEN   Persona is not open.
 *    NZERROR_TK_NOTSUPP   Function not supported with persona.
 */
nzerror nztxHashExpansion( nzctx *, nzttPersona *, ub4, ub4 * );

/*---------------- nztiae_IsAuthEnabled ----------------*/

/*
 * NAME
 *    nztiae_IsAuthEnabled -  Checks to see if Authentication is Enabled
 *                               in the current Cipher Spec.
 * 
 * PARAMETERS
 *    ctx   {IN}   Oracle SSL Context
 *      ncipher {IN}    CipherSuite
 *      authEnabled {OUT} Boolean for is Auth Enabled?
 * 
 * NOTES
 *    
 * RETURNS
 *      NZERROR_OK on success.
 *      NZERROR_TK_INV_CIPHR_TYPE if Cipher Spec is not Recognized.
 */

nzerror nztiae_IsAuthEnabled( nzctx *ctx, 
                                  ub2 ncipher, 
                                  boolean *authEnabled );

/*---------------- nztiee_IsEncrEnabled ----------------*/
/*
 * NAME
 *    nztiee_IsEncrEnabled -  Checks to see if Encryption is Enabled
 *                               in the current Cipher Spec.
 * 
 * PARAMETERS
 *    ctx   {IN}   Oracle SSL Context
 *      ncipher {IN}    CipherSuite
 *      EncrEnabled {OUT} Boolean for is Auth Enabled?
 * 
 * NOTES
 *    
 * RETURNS
 *      NZERROR_OK on success.
 *      NZERROR_TK_INV_CIPHR_TYPE if Cipher Spec is not Recognized.
 */

nzerror nztiee_IsEncrEnabled( nzctx *ctx, 
                                  ub2 ncipher, 
                                  boolean *EncrEnabled );

/*---------------- nztihe_IsHashEnabled ----------------*/
/*
 * NAME
 *    nztihe_IsHashEnabled -  Checks to see if HAshing is Enabled
 *                               in the current Cipher Spec.
 * 
 * PARAMETERS
 *    ctx   {IN}   Oracle SSL Context
 *      ncipher {IN}    CipherSuite
 *      hashEnabled {OUT} Boolean for is Auth Enabled?
 * 
 * NOTES
 *    
 * RETURNS
 *      NZERROR_OK on success.
 *      NZERROR_TK_INV_CIPHR_TYPE if Cipher Spec is not Recognized.
 */

nzerror nztihe_IsHashEnabled( nzctx *ctx, 
                                  ub2 ncipher, 
                                  boolean *hashEnabled );

/*
 *
 */

nzerror nztGetIssuerName( nzctx *ctx,
                             nzttIdentity *identity,
                             ub1  **issuername,
                             ub4   *issuernamelen );

nzerror nztGetSubjectName( nzctx *ctx,
                              nzttIdentity *identity,
                              ub1  **subjectname,
                              ub4   *subjectnamelen );

nzerror nztGetBase64Cert( nzctx *ctx,
                              nzttIdentity *identity,
                              ub1  **b64cert,
                              ub4   *b64certlen );

nzerror nztGetSerialNumber( nzctx *ctx,
                              nzttIdentity *identity,
                              ub1   **serialnum,
                              ub4    *serialnumlen );

nzerror nztSS_Serialnum_to_String( nzctx* ctx,
                                    nzstrc *pSerialNum,
                                    ub1 *pCertserial,
                                    ub4 certseriallen);

nzerror nztGetValidDate( nzctx *ctx,
                            nzttIdentity *identity,
                            ub4  *startdate, 
                            ub4  *enddate  );

nzerror nztGetValidDate_ext( nzctx *ctx,
                            nzttIdentity *identity,
                            ub8  *startdate,
                            ub8  *enddate  );

nzerror nztGetVersion( nzctx *ctx,
                          nzttIdentity *identity,
                          nzstrc *pVerStr  );

nzerror nztGetPublicKey( nzctx *ctx,
                            nzttIdentity *identity,
                            ub1  **pubKey,
                            ub4   *pubKeylen );

nzerror nztGenericDestroy( nzctx *ctx,
                              ub1  **var );

nzerror nztSetAppDefaultLocation( nzctx *ctx,
                                     text *,
                                     size_t );

nzerror nztSearchNZDefault( nzctx *ctx,
                            boolean *search );

nzerror nztSetLightWeight(nzctx *ctx,
                          boolean flag);

/* ****************** nzICE_Install_Cert_ext ****************** */
/* Installs a Cert into a wallet if it meets certain conditions.
 * It calls the function below, nztnAC_Add_Certificate().
 * Finally, it returns a ptr to where the actual object has been added into the
 * wallet. This is used in support of OWM
 * This is an extention of nztnIC_Install_Cert to support Trust flag.

 nzctx *oss_context,     (IN)
 nzttWallet *pWallet,    (IN)
 nzttPersona *pPersona,  (IN)
 ub1* pCertbuf,          (IN)
 ub4 certbuflen,         (IN)
 boolean certtype,       (IN)
 nzstrc *pIdtypestr,     (IN)
 nzTrustFlag trustflag   (IN)
 */
nzerror nzICE_Install_Cert_ext( nzctx *oss_context,
                                    nzttWallet *pWallet,
                                    nzttPersona *pPersona,
                                    ub1* pCertbuf,
                                    ub4 certbuflen,
                                    boolean certtype,
                                    nzstrc *pIdtypestr,
                                    nzTrustFlag trustflag,
                                    nzttIdentity **ppCertOrTP );

/******************** nzMF_Modify_TrustFlags **************************/
/* This function would be used to modify trust flags assigned
 * to a certificate. The already assigned trust flag would get replaced
 * by new trust flag value
*/

nzerror nzMF_Modify_TrustFlags(nzctx *oss_context,
                                  nzttWallet *pWallet,
                                  nzttPersona *pPersona,
                                  nzttIdentity *pCert,
                                  int trustflag);


#endif /* NZT_ORACLE */

                                                                                                                                                                                                                                                                                      usr/include/oracle/19.6/client64/occi.h                                                             0000644 0000000 0000000 00000004103 13576202531 016062  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* Copyright (c) 2000, 2002, Oracle Corporation.  All rights reserved.  */
 
/* 
   NAME 
     occi.h - Oracle C++ Interface header files.

   DESCRIPTION 
     <short description of facility this file declares/defines> 

   RELATED DOCUMENTS 
     <note any documents related to this facility>
 
   EXPORT FUNCTION(S) 
     <external functions declared for use outside package - one-line 
      descriptions>

   INTERNAL FUNCTION(S)
     <other external functions declared - one-line descriptions>

   EXAMPLES

   NOTES
     <other useful comments, qualifications, etc.>

   MODIFIED   (MM/DD/YY)
   vvinay      08/19/02 - 
   aahluwal    06/03/02 - bug 2360115
   gayyappa    01/03/01 - removed inclusions before occiCommon.h
   kmohan      04/11/00 - include oci.h and occiCommon.h also
   rkasamse    04/03/00 - header file for all the OCCI classes
   rkasamse    04/03/00 - Creation

*/

#ifndef OCCI_ORACLE
# define OCCI_ORACLE

#ifndef OCCICOMMON_ORACLE
#include <occiCommon.h>
#endif

#ifndef OCCIDATA_ORACLE
#include <occiData.h>
#endif

#ifndef OCCICONTROL_ORACLE
#include <occiControl.h>
#endif

#ifndef OCCIOBJECTS_ORACLE
#include <occiObjects.h>
#endif

#ifndef OCCIAQ_ORACLE
#include <occiAQ.h>
#endif

/*---------------------------------------------------------------------------
                     PUBLIC TYPES AND CONSTANTS
  ---------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------
                     PRIVATE TYPES AND CONSTANTS
  ---------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------
                           EXPORT FUNCTIONS
  ---------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------
                          INTERNAL FUNCTIONS
  ---------------------------------------------------------------------------*/


#endif                                              /* OCCI_ORACLE */
                                                                                                                                                                                                                                                                                                                                                                                                                                                             usr/include/oracle/19.6/client64/occiAQ.h                                                           0000644 0000000 0000000 00000026601 13576202531 016313  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* Copyright (c) 2002, 2013, Oracle and/or its affiliates. 
All rights reserved.*/
 
/* 
   NAME 
     occiAQ.h - Header file for occi AQ classes

   DESCRIPTION 
     Class declarations for Producer, Consumer, Message, Agent
     Listener, Subscription

   RELATED DOCUMENTS 
     <note any documents related to this facility>
 
   EXPORT FUNCTION(S) 
     <external functions declared for use outside package - one-line 
     descriptions>

   INTERNAL FUNCTION(S)
     <other external functions declared - one-line descriptions>

   EXAMPLES

   NOTES
     <other useful comments, qualifications, etc.>

   MODIFIED   (MM/DD/YY)
   cparampa    10/12/02 - creation

*/

#ifndef _olint   /* disable olint check */

#ifndef OCCIAQ_ORACLE
# define OCCIAQ_ORACLE

#ifndef OCCICOMMON_ORACLE
#include <occiCommon.h>
#endif

#ifdef RAW 
#undef RAW 
#endif /* RAW */

namespace oracle {
namespace occi {
namespace aq{

/*---------------------------------------------------------------------------
                     PUBLIC TYPES AND CONSTANTS
  ---------------------------------------------------------------------------*/

class Message
{
  public:

     enum MessageState
     {
        MSG_READY = OCI_MSG_READY,
        MSG_WAITING = OCI_MSG_WAITING,
        MSG_PROCESSED = OCI_MSG_PROCESSED,
        MSG_EXPIRED = OCI_MSG_EXPIRED
     };
     enum PayloadType
     {
        RAW,
        ANYDATA,
        OBJECT
     };

     Message( const Environment *env );
     Message( const Message& rhs);
     ~Message();
     
     void operator=(const Message& rhs);
     int getAttemptsToDequeue() const ;
     void setCorrelationId( const OCCI_STD_NAMESPACE::string& corr_id ) ;
     OCCI_STD_NAMESPACE::string getCorrelationId() const ;
     void setDelay( int delay ) ;
     int getDelay() const ;
     Date getMessageEnqueuedTime() const ;
     void setExceptionQueueName( const OCCI_STD_NAMESPACE::string& queue ) ;
     OCCI_STD_NAMESPACE::string getExceptionQueueName() const ;
     void setExpiration( int exp ) ;
     int getExpiration() const ;
     MessageState getMessageState() const ;
     void setPriority( int priority ) ;
     int getPriority() const ;
     void setRecipientList( OCCI_STD_NAMESPACE::vector<Agent>& ag_list ) ;
     void setSenderId( const Agent& sender ) ;
     Agent getSenderId() const ;
     void setOriginalMessageId( const Bytes& queue ) ;
     Bytes getOriginalMessageId() const ;
     void setNull();
     bool isNull() const;

     void setBytes( const Bytes& bytes); 
     void setObject( PObject* pobj);
     void setAnyData( const AnyData& any);

     Bytes getBytes() const ;
     PObject *getObject() ;
     AnyData getAnyData() const ;

     PayloadType getPayloadType( ) const;

   private:
     Ptr<MessageImpl> ptr;
     OCIAQMsgProperties* getOCIMsgProperties() const;
     Message( const Environment *env, const Connection *con, 
          OCIAQMsgProperties *msgprop, void *data, unsigned int dataLen, 
          bool isNull, PayloadType pType);
     friend class ConsumerImpl;
     friend class ProducerImpl;
     friend class NotifyResult;
};

class Producer
{
   public:

     enum EnqueueSequence
     {
       ENQ_BEFORE = OCI_ENQ_BEFORE,
       ENQ_TOP    = OCI_ENQ_TOP
     };
     enum Visibility
     {
       ENQ_IMMEDIATE = OCI_ENQ_IMMEDIATE,
       ENQ_ON_COMMIT = OCI_ENQ_ON_COMMIT
     };
     
     Producer( const Connection *conn ); 
     Producer( const Connection *conn, 
               const OCCI_STD_NAMESPACE::string& queue ); 
     Producer( const Producer& rhs);
     ~Producer();

     void operator=(const Producer& prod);
     void setRelativeMessageId( const Bytes& msgid );
     Bytes getRelativeMessageId() const;
     void setSequenceDeviation( EnqueueSequence option );
     EnqueueSequence getSequenceDeviation() const;
     void setVisibility( Visibility option );
     Visibility getVisibility() const;
     void setQueueName( const OCCI_STD_NAMESPACE::string& queue );
     OCCI_STD_NAMESPACE::string getQueueName() const;
     void setTransformation( const OCCI_STD_NAMESPACE::string& fName);
     OCCI_STD_NAMESPACE::string getTransformation() const;
     Bytes send( Message& msg, const OCCI_STD_NAMESPACE::string& queue );
     Bytes send( Message& msg );
     void setNull();
     bool isNull() const;

  private:
     Ptr<ProducerImpl> ptr; 
};

class Consumer
{
   public:

     enum DequeueMode
     {
       DEQ_BROWSE  = OCI_DEQ_BROWSE,
       DEQ_LOCKED  = OCI_DEQ_LOCKED,
       DEQ_REMOVE  = OCI_DEQ_REMOVE,
       DEQ_REMOVE_NODATA = OCI_DEQ_REMOVE_NODATA
     };
     enum Navigation
     {
       DEQ_FIRST_MSG        = OCI_DEQ_FIRST_MSG,
       DEQ_NEXT_TRANSACTION = OCI_DEQ_NEXT_TRANSACTION,
       DEQ_NEXT_MSG         = OCI_DEQ_NEXT_MSG
     };
     enum Visibility
     {
       DEQ_IMMEDIATE = OCI_DEQ_IMMEDIATE,
       DEQ_ON_COMMIT = OCI_DEQ_ON_COMMIT
     };
     enum
     {
       DEQ_WAIT_FOREVER = OCI_DEQ_WAIT_FOREVER,
       DEQ_NO_WAIT      = OCI_DEQ_NO_WAIT
     };
     
     Consumer( const Connection *conn ); 
     Consumer( const Connection * conn, const Agent& agent); 
     Consumer( const Connection *conn,
               const OCCI_STD_NAMESPACE::string& queue ); 
     Consumer(const Consumer& con);
     ~Consumer();
    
     void operator=(const Consumer& con);
     void setAgent(const Agent& agent);
     void setConsumerName( const OCCI_STD_NAMESPACE::string& name );
     OCCI_STD_NAMESPACE::string getConsumerName() const;
     void setCorrelationId( const OCCI_STD_NAMESPACE::string& cor_id );
     OCCI_STD_NAMESPACE::string getCorrelationId() const;
     void setDequeueMode( DequeueMode mode );
     DequeueMode getDequeueMode() const;
     void setMessageIdToDequeue( const Bytes& msgid );
     Bytes getMessageIdToDequeue() const;
     void setPositionOfMessage( Navigation pos );
     Navigation getPositionOfMessage() const;
     void setVisibility( Visibility option );
     Visibility getVisibility() const;
     void setWaitTime( unsigned int wait );
     unsigned int getWaitTime() const;
     void setQueueName( const OCCI_STD_NAMESPACE::string& queue );
     OCCI_STD_NAMESPACE::string getQueueName() const;
     void setTransformation( const OCCI_STD_NAMESPACE::string& fName);
     OCCI_STD_NAMESPACE::string getTransformation() const;
     Message receive( Message::PayloadType pType,
                      const OCCI_STD_NAMESPACE::string& type="",
                      const OCCI_STD_NAMESPACE::string& schema="");
     void setNull();
     bool isNull() const;

   private:
     Ptr<ConsumerImpl> ptr; 
};

class Agent
{
   public:
     Agent( const Environment *env ); 
     Agent( const Environment *env, 
            const OCCI_STD_NAMESPACE::string& name, 
            const OCCI_STD_NAMESPACE::string& address, 
            unsigned int protocol=0 ) ; 
     Agent(const Agent& a);
     ~Agent() ;
 
     void operator=(const Agent& a);
     void setName( const OCCI_STD_NAMESPACE::string& name );
     OCCI_STD_NAMESPACE::string getName() const;
     void setAddress( const OCCI_STD_NAMESPACE::string& addr );
     OCCI_STD_NAMESPACE::string getAddress() const;
     void setProtocol(unsigned int protocol = 0);
     unsigned int getProtocol() const; 
     void setNull(); 
     bool isNull() const;
     OCIAQAgent* getOCIAQAgent() const;

   private:
     Ptr<AgentImpl> ptr;
     Agent( const Environment *env, OCIAQAgent *rhs, bool toFree = false );
     friend class Listener;
     friend class MessageImpl;
};

class Listener
{
   public:
     Listener( const Connection *conn ); 
     Listener( const Connection *conn, 
               OCCI_STD_NAMESPACE::vector<Agent> &agList, 
               int waitTime=0 );
     ~Listener();
     
     Agent listen();
     void setAgentList(OCCI_STD_NAMESPACE::vector<Agent> &agList);
     void setTimeOutForListen(int waitTime);
     OCCI_STD_NAMESPACE::vector<Agent> getAgentList() const;
     int getTimeOutForListen() const; 

   private:
     const ConnectionImpl *conn; 
     OCIAQAgent** agentList; 
     unsigned int numAgents;
     int timeOut;
     void *listenerExt;
};


class Subscription
{
  public:
    enum Presentation
    {
       PRES_DEFAULT = OCI_SUBSCR_PRES_DEFAULT,
       PRES_XML = OCI_SUBSCR_PRES_XML
    };
    enum Protocol
    {
       PROTO_CBK = OCI_SUBSCR_PROTO_OCI,
       PROTO_MAIL = OCI_SUBSCR_PROTO_MAIL,
       PROTO_SERVER = OCI_SUBSCR_PROTO_SERVER,
       PROTO_HTTP = OCI_SUBSCR_PROTO_HTTP
    };
    enum Namespace
    {
       NS_ANONYMOUS = OCI_SUBSCR_NAMESPACE_ANONYMOUS,
       NS_AQ = OCI_SUBSCR_NAMESPACE_AQ
    }; 
    
    Subscription(const Environment* env);
    Subscription(const Environment* env, OCISubscription* sub);
    Subscription(const Subscription& sub);
    ~Subscription();
    
    void operator=(const Subscription& sub);
    unsigned int getDatabaseServersCount() const;
    void setDatabaseServerNames(
        const OCCI_STD_NAMESPACE::vector<OCCI_STD_NAMESPACE::string>& dbsrv);
    OCCI_STD_NAMESPACE::vector<OCCI_STD_NAMESPACE::string>
                      getDatabaseServerNames() const ;
    void setNotifyCallback(unsigned int (*callback)(Subscription& sub, 
                                                    NotifyResult *nr));
    unsigned int  (*getNotifyCallback() const)(Subscription& sub, 
                                               NotifyResult *nr); 
    void setCallbackContext(void* ctx);
    void* getCallbackContext() const;
    void setSubscriptionName(const OCCI_STD_NAMESPACE::string& name);
    OCCI_STD_NAMESPACE::string getSubscriptionName() const ;
    void setSubscriptionNamespace(Namespace nameSpace);
    Namespace getSubscriptionNamespace() const ;
    void setPayload(const Bytes& payload);
    Bytes getPayload() const ;
    void setRecipientName( const OCCI_STD_NAMESPACE::string& name);
    OCCI_STD_NAMESPACE::string getRecipientName() const;
    void setPresentation( Presentation pres) ;
    Presentation getPresentation() const ;
    void setProtocol( Protocol prot) ;
    Protocol getProtocol() const ;
    OCISubscription* getOCISubscription() const;
    void setNull();
    bool isNull() const;
    Environment* getEnvironment() const;

  private:
    Ptr<SubscriptionImpl> ptr;
};

class NotifyResult
{
   public:
     Bytes getPayload() const;
     Message getMessage() const;
     Bytes getMessageId() const;
     OCCI_STD_NAMESPACE::string getConsumerName() const;
     OCCI_STD_NAMESPACE::string getQueueName() const;

  private:
     const EnvironmentImpl *env;
     void *payload;
     unsigned int payloadLen;
     void *desc;
     ub4 mode;
     void *notifyResultExt;

     //private constructor
     NotifyResult(const Environment *env, void *payload, ub4 payloadLen, 
                  void *pdescriptor, ub4 mode);

     friend class SubscriptionImpl;
};
      
/*---------------------------------------------------------------------------
                     PRIVATE TYPES AND CONSTANTS
  ---------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------
                           EXPORT FUNCTIONS
  ---------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------
                          INTERNAL FUNCTIONS
  ---------------------------------------------------------------------------*/
} /* end of namespace aq */
} /* end of namespace occi */
} /* end of namespace oracle */

#endif                                              /* OCCIAQ_ORACLE */

#endif                                              /* _olint */
                                                                                                                               usr/include/oracle/19.6/client64/occiCommon.h                                                       0000644 0000000 0000000 00000105424 13576202531 017243  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* Copyright (c) 2000, 2013, Oracle and/or its affiliates. 
All rights reserved. */
 
/* 
   NAME 
     occiCommon.h - header file for doing forward references

   DESCRIPTION 
     Just declare all the classes

   RELATED DOCUMENTS 
     OCCI Programmer's Guide 
 
   EXPORT FUNCTION(S) 
     none

   INTERNAL FUNCTION(S)
     none

   EXAMPLES

   NOTES
     none

*/


#ifndef OCCICOMMON_ORACLE
# define OCCICOMMON_ORACLE

#ifndef _olint

#ifndef OCI_ORACLE
#include <oci.h>
#endif

#ifndef ORASTRINGSTL
#define ORASTRINGSTL
#include <string>
#endif

#ifndef ORAVECTORSTL
#include <vector>
#define ORAVECTORSTL
#endif

#ifndef ORALISTSTL
#include <list>
#define ORALISTSTL
#endif

#define OCCI_STD_NAMESPACE std
#define OCCI_HAVE_STD_NAMESPACE 1

// version definitions
#define OCCI_MAJOR_VERSION OCI_MAJOR_VERSION
#define OCCI_MINOR_VERSION OCI_MINOR_VERSION

namespace oracle {
namespace occi {

//UString is the class for UTF16 characterset
//check for version = 3.2 or 3.3
#if (__GNUC__ == 3 && (__GNUC_MINOR__ == 2 || __GNUC_MINOR__ == 3))  
  //char_traits<T> specialization for utext for gcc 3.2.3
  struct utext_char_traits
  {
  typedef utext          char_type;
  typedef unsigned int   int_type;

  typedef OCCI_STD_NAMESPACE::streampos      pos_type;
  typedef OCCI_STD_NAMESPACE::streamoff      off_type;
  typedef OCCI_STD_NAMESPACE::mbstate_t      state_type;

  //assign one char to another
  static void assign(char_type& c1, const char_type& c2)
    { 
        c1 = c2; 
    }

  //are 2 chars equal ?
  static bool eq(const char_type& c1, const char_type& c2) 
    {
       return c1 == c2; 
    }

  //is char c1 less then c2 ?
  static bool lt(const char_type& c1, const char_type& c2) 
    { 
       return c1 < c2; 
    }

  //compare 2 strings of char
  static int compare(const char_type* s1, const char_type* s2, size_t n) 
    {
      for (size_t i = 0; i < n; ++i)
        if (!eq(s1[i], s2[i]))
          return s1[i] < s2[i] ? -1 : 1;
      return 0;
    }

  //length of a char string
  static size_t length(const char_type* s) 
    {
      const char_type nullchar = char_type(0);
      size_t i = 0;
   
        while (!eq(*s++, nullchar)) i++; 
        return i;
    }

  //find a character in the char string
  static const char_type* find(const char_type* s, 
                      size_t n, const char_type& c)
    {
       for ( ; n > 0 ; ++s, --n)
         if (eq(*s, c))
           return s;
       return 0;
    }

  //move n chars from s2 to s1
  static char_type* move(char_type* s1, const char_type* s2, size_t n) 
    {
       memmove(s1, s2, n * sizeof(char_type));
       return s1;
    }
 
  //copy n chars from s2 to s1   
  static char_type* copy(char_type* s1, const char_type* s2, size_t n) 
    {
       memcpy(s1, s2, n * sizeof(char_type));
       return s1;
    } 

  //fill char c into s
  static char_type* assign(char_type* s, size_t n, char_type c) 
    {
      for (size_t i = 0; i < n; ++i)
        assign(s[i], c);
      return s;
    }

  //is the int representation eof ?
  static int_type not_eof(const int_type& c) 
