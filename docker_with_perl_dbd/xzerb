
=head1 EXAMPLES

This is an example of a F<debian/package.docs> file:

  README
  TODO
  debian/notes-for-maintainers.txt
  docs/manual.txt
  docs/manual.pdf
  docs/manual-html/

=head1 NOTES

Note that B<dh_installdocs> will happily copy entire directory hierarchies if
you ask it to (similar to B<cp -a>). If it is asked to install a
directory, it will install the complete contents of the directory.

=cut

my %docdir_created;
# Create documentation directories on demand. This allows us to use dangling
# symlinks for linked documentation directories unless additional files need
# to be installed.
sub ensure_docdir {
	my $package=shift;
	return if $docdir_created{$package};
	my $tmp=tmpdir($package);

	my $target;
	if ($dh{LINK_DOC} && $dh{LINK_DOC} ne $package) {
		$target="$tmp/usr/share/doc/$dh{LINK_DOC}";
	}
	else {
		$target="$tmp/usr/share/doc/$package";
	}

	# If this is a symlink, leave it alone.
	if (! -d $target && ! -l $target) {
		install_dir($target);
	}
	$docdir_created{$package}=1;
}

init(options => {
	"link-doc=s" => \$dh{LINK_DOC},
	"sourcedir=s" => \$dh{SOURCEDIR},
	'doc-main-package=s' => \$dh{DOC_MAIN_PACKAGE},
});

my $called_getpackages = 0;
my $default_error_handler = compat(10) ? \&glob_expand_error_handler_reject_nomagic_warn_discard : \&glob_expand_error_handler_reject;
my $nodocs = is_build_profile_active('nodoc') || get_buildoption('nodoc') ? 1 : 0;
# We cannot assume documentation is built under nodoc, but if it is we must flag it as handled
# or dh_missing might make noise.
$default_error_handler = \&glob_expand_error_handler_silently_ignore if $nodocs;

if (@{$dh{DOPACKAGES}} > 1 and $dh{DOC_MAIN_PACKAGE}) {
	error('--doc-main-package should be used with -p<doc-pkg>');
}

if ($dh{DOC_MAIN_PACKAGE}) {
	assert_opt_is_known_package($dh{DOC_MAIN_PACKAGE}, '--doc-main-package');
}

foreach my $package (getpackages()) {
	next if is_udeb($package);
	
	my $tmp=tmpdir($package);
	my $file=pkgfile($package,"docs");
	my $link_doc=($dh{LINK_DOC} && $dh{LINK_DOC} ne $package);
	my $skip_install = process_pkg($package) ? 0 : 1;
	my @search_dirs = ('.');
	my $error_handler = $skip_install ? \&glob_expand_error_handler_silently_ignore : $default_error_handler;
	@search_dirs = ($dh{SOURCEDIR} // '.', default_sourcedir($package)) if not compat(10);

	if (not $skip_install) {
		if ($link_doc) {
			getpackages('both') unless $called_getpackages++;

			if (package_binary_arch($package) ne package_binary_arch($dh{LINK_DOC})) {
				if (compat(9)) {
					warning("WARNING: --link-doc between architecture all and not all packages breaks binNMUs");
				} else {
					error("--link-doc not allowed between ${package} and $dh{LINK_DOC} (one is arch:all and the other not)");
				}
			}
			# Make sure that the parent directory exists.
			if (!-d "$tmp/usr/share/doc" && !-l "$tmp/usr/share/doc") {
				install_dir("$tmp/usr/share/doc");
			}
			# Create symlink to another documentation directory if
			# necessary.
			if (!-d "$tmp/usr/share/doc/$package" &&
				!-l "$tmp/usr/share/doc/$package") {
				make_symlink_raw_target($dh{LINK_DOC}, "$tmp/usr/share/doc/$package");
				# Policy says that if you make your documentation
				# directory a symlink, then you have to depend on
				# the target.
				addsubstvar($package, 'misc:Depends', "$dh{LINK_DOC} (= \${binary:Version})");
			}
		} else {
			ensure_docdir($package);
		}
	}

	my @docs;

	if ($file) {
		@docs = filearray($file, \@search_dirs, $error_handler);
	}

	if (($package eq $dh{FIRSTPACKAGE} || ($dh{PARAMS_ALL} && !$link_doc)) && @ARGV) {
		push @docs, @ARGV;
	}

	log_installed_files($package, @docs);

	next if $skip_install;

	if (not $nodocs and @docs) {
		my $exclude = ' -and ! -empty';
		my $target_package = compute_doc_main_package($package);
		if (not defined($target_package)) {
			warning("Cannot auto-detect main package for ${package}.  If the default is wrong, please use --doc-main-package");
			$target_package = $package;
		} elsif ($dh{PARAMS_ALL} and $package ne $target_package and not $dh{DOC_MAIN_PACKAGE}) {
			warning("Not using auto-detected $target_package as main doc package for $package: With -A/--all, this would cause file-conflicts.");
			$target_package = $package;
		}
		if ($dh{EXCLUDE_FIND}) {
			$exclude .= ' -and ! \( '.$dh{EXCLUDE_FIND}.' \)';
		}
		my $target_dir = "${tmp}/usr/share/doc/${target_package}";
		install_dir($target_dir) unless -l $target_dir;

		foreach my $doc (@docs) {
			next if excludefile($doc);
			next if -f $doc && ! -s _; # ignore empty files
			ensure_docdir($package);
			if (-d $doc && length $exclude) {
				my $basename = basename($doc);
				my $dir = ($basename eq '.') ? $doc : "$doc/..";
				my $pwd=`pwd`;
				chomp $pwd;
				# Gracefully handling tmpdir being absolute (-P/...)
				my $docdir = $target_dir =~ m{^/} ? $target_dir : "${pwd}/${target_dir}";
				complex_doit("cd '$dir' && " .
							 "find '$basename' \\( -type f -or -type l \\)$exclude -print0 | LC_ALL=C sort -z | " .
							 "xargs -0 -I {} cp --reflink=auto --parents -dp {} $docdir");
			}
			else {
				doit("cp", '--reflink=auto', "-a", $doc, $target_dir);
			}
		}
		doit("chown","-R","0:0","$tmp/usr/share/doc") if should_use_root();
		doit("chmod","-R","u+rw,go=rX","$tmp/usr/share/doc");
	}

	# .Debian is correct, according to policy, but I'm easy.
	my $readme_debian=pkgfile($package,'README.Debian');
	if (! $readme_debian) {
		$readme_debian=pkgfile($package,'README.debian');
	}
	if (! $link_doc && $readme_debian && ! excludefile($readme_debian)) {
		ensure_docdir($package);
		install_file($readme_debian,
					 "$tmp/usr/share/doc/$package/README.Debian");
	}

	my $todo=pkgfile($package,'TODO');
	if (! $link_doc && $todo && ! excludefile($todo)) {
		ensure_docdir($package);
		if (isnative($package)) {
			install_file($todo, "$tmp/usr/share/doc/$package/TODO");
		}
		else {
			install_file($todo,
				"$tmp/usr/share/doc/$package/TODO.Debian");
		}
	}

	# If the "directory" is a dangling symlink, then don't install
	# the copyright file. This is useful for multibinary packages 
	# that share a doc directory.
	if (! $link_doc && (! -l "$tmp/usr/share/doc/$package" || -d "$tmp/usr/share/doc/$package")) {
		# Support debian/package.copyright, but if not present, fall
		# back on debian/copyright for all packages, not just the 
		# main binary package.
		my $copyright=pkgfile($package,'copyright');
		if (! $copyright && -e "debian/copyright") {
			$copyright="debian/copyright";
		}
		if ($copyright && ! excludefile($copyright)) {
			ensure_docdir($package);
			install_file($copyright,
				"$tmp/usr/share/doc/$package/copyright");
		}
	}

	next if $nodocs;

	# Handle doc-base files. There are two filename formats, the usual
	# plus an extended format (debian/package.*).
	my %doc_ids;
	
	opendir(DEB,"debian/") || error("can't read debian directory: $!");
	# If this is the main package, we need to handle unprefixed filenames.
	# For all packages, we must support both the usual filename format plus
	# that format with a period an something appended.
	my $regexp="\Q$package\E\.";
	if ($package eq $dh{MAINPACKAGE}) {
		$regexp="(|$regexp)";
	}
	foreach my $fn (grep {/^${regexp}doc-base(\..*)?$/} readdir(DEB)) {
		# .EX are example files, generated by eg, dh-make
		next if $fn=~/\.EX$/;
		next if excludefile($fn);
		# Parse the file to get the doc id.
		open(my $fd, '<', "debian/$fn") || die "Cannot read debian/$fn.";
		while (<$fd>) {
			s/\s*$//;
			if (/^Document\s*:\s*(.*)/) {
				$doc_ids{$fn}=$1;
				last;
			}
		}
		if (! exists $doc_ids{$fn}) {
			warning("Could not parse $fn for doc-base Document id; skipping");
		}
		close($fd);
	}
	closedir(DEB);
	
	if (%doc_ids) {
		install_dir("$tmp/usr/share/doc-base/");
	}
	foreach my $fn (keys %doc_ids) {
		# To avoid issues with duplicated document IDs, we will always
		# install to usr/share/doc-base/<packagename>.<doc_id> instead
		# of just usr/share/doc-base/<packagename> or just
		# usr/share/doc-base/<doc_id>. See #525821 and #980903.
		install_file("debian/$fn",
					 "$tmp/usr/share/doc-base/$package.$doc_ids{$fn}");
	}
}

=head1 SEE ALSO

L<debhelper(7)>

This program is a part of debhelper.

=head1 AUTHOR

Joey Hess <joeyh@debian.org>

=cut
                                                                                                                                                                                                                                                                                                                                                                        usr/bin/dh_installemacsen                                                                           0000755 0000000 0000000 00000007364 14354570042 014246  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl

=head1 NAME

dh_installemacsen - register an Emacs add on package

=cut

use strict;
use warnings;
use Debian::Debhelper::Dh_Lib;

our $VERSION = DH_BUILTIN_VERSION;

=head1 SYNOPSIS

B<dh_installemacsen> [S<I<debhelper options>>] [B<-n>] [B<--priority=>I<n>] [B<--flavor=>I<foo>]

=head1 DESCRIPTION

B<dh_installemacsen> is a debhelper program that is responsible for installing
files used by the Debian B<emacsen-common> package into package build
directories.

It also automatically generates the F<preinst> F<postinst> and F<prerm>
commands needed to register a package as an Emacs add on package. The commands
are added to the maintainer scripts by B<dh_installdeb>. See
L<dh_installdeb(1)> for an explanation of how this works.

=head1 FILES

=over 4

=item debian/I<package>.emacsen-compat

Installed into F<usr/lib/emacsen-common/packages/compat/package> in the
package build directory.

=item debian/I<package>.emacsen-install

Installed into F<usr/lib/emacsen-common/packages/install/package> in the
package build directory.

=item debian/I<package>.emacsen-remove

Installed into F<usr/lib/emacsen-common/packages/remove/package> in the
package build directory.

=item debian/I<package>.emacsen-startup

Installed into etc/emacs/site-start.d/50I<package>.el in the package
build directory. Use B<--priority> to use a different priority than 50.

=back

=head1 OPTIONS

=over 4

=item B<-n>, B<--no-scripts>

Do not modify F<postinst>/F<prerm> scripts.

=item B<--priority=>I<n>

Sets the priority number of a F<site-start.d> file. Default is 50.

=item B<--flavor=>I<foo>

Sets the flavor a F<site-start.d> file will be installed in. Default is
B<emacs>, alternatives include B<xemacs> and B<emacs20>.

=back

=head1 NOTES

Note that this command is not idempotent. L<dh_prep(1)> should be called
between invocations of this command. Otherwise, it may cause multiple
instances of the same text to be added to maintainer scripts.

=cut

init(options => {
	"flavor=s" => \$dh{FLAVOR},
	"priority=s" => \$dh{PRIORITY},
});

if (! defined $dh{PRIORITY}) {
	$dh{PRIORITY}=50;
}
if (! defined $dh{FLAVOR}) {
	$dh{FLAVOR}='emacs';
}

# PROMISE: DH NOOP WITHOUT emacsen-common emacsen-install emacsen-remove emacsen-startup cli-options()

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmp=tmpdir($package);

	my $emacsen_compat=pkgfile($package,"emacsen-compat");
	my $emacsen_install=pkgfile($package,"emacsen-install");
	my $emacsen_remove=pkgfile($package,"emacsen-remove");
	my $emacsen_startup=pkgfile($package,"emacsen-startup");

	if ($emacsen_compat ne '') {
		install_dir("$tmp/usr/lib/emacsen-common/packages/compat");
		install_file($emacsen_compat,
					 "$tmp/usr/lib/emacsen-common/packages/compat/$package");
	}

	if ($emacsen_install ne '') {
		install_dir("$tmp/usr/lib/emacsen-common/packages/install");
		install_prog($emacsen_install,"$tmp/usr/lib/emacsen-common/packages/install/$package");
	}

	if ($emacsen_remove ne '') {
		install_dir("$tmp/usr/lib/emacsen-common/packages/remove");
		install_prog("$emacsen_remove","$tmp/usr/lib/emacsen-common/packages/remove/$package");
	}

	if ($emacsen_startup ne '') {
		install_dir("$tmp/etc/$dh{FLAVOR}/site-start.d/");
		install_file($emacsen_startup,"$tmp/etc/$dh{FLAVOR}/site-start.d/$dh{PRIORITY}$package.el");
	}

	if ($emacsen_install ne '' || $emacsen_remove ne '') {
		if (! $dh{NOSCRIPTS}) {
			autoscript($package,"preinst","preinst-emacsen",
				{ 'PACKAGE' => $package });
			autoscript($package,"postinst","postinst-emacsen",
				{ 'PACKAGE' => $package });
			autoscript($package,"prerm","prerm-emacsen",
				{ 'PACKAGE' => $package });
		}
	}
}

=head1 SEE ALSO

L<debhelper(7)>
L</usr/share/doc/emacsen-common/debian-emacs-policy.gz>

This program is a part of debhelper.

=head1 AUTHOR

Joey Hess <joeyh@debian.org>

=cut
                                                                                                                                                                                                                                                                            usr/bin/dh_installexamples                                                                          0000755 0000000 0000000 00000013225 14354570042 014442  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl

=encoding UTF-8

=head1 NAME

dh_installexamples - install example files into package build directories

=cut

use strict;
use warnings;
use Debian::Debhelper::Dh_Lib;

our $VERSION = DH_BUILTIN_VERSION;

=head1 SYNOPSIS

B<dh_installexamples> [S<I<debhelper options>>] [B<-A>] [B<-X>I<item>] [S<I<file> ...>]

=head1 DESCRIPTION

B<dh_installexamples> is a debhelper program that is responsible for
installing examples into F<usr/share/doc/package/examples> in package
build directories.

From debhelper compatibility level 11 on, B<dh_install> will fall back to
looking in F<debian/tmp> for files, if it does not find them in the current
directory (or wherever you've told it to look using B<--sourcedir>).

=head1 FILES

=over 4

=item debian/I<package>.examples

Lists example files or directories to be installed.

If upstream provides an F<examples> directory, you will often want to use B<examples/*> rather
than B<examples> in this file.  The latter would create
F<< /usr/share/doc/I<package>/examples/examples >>, which is rarely what you want.

Supports substitution variables in compat 13 and later as
documented in L<debhelper(7)>.

=back

=head1 OPTIONS

=over 4

=item B<-A>, B<--all>

Install any files specified by command line parameters in ALL packages
acted on.

=item B<--sourcedir=>I<dir>

Look in the specified directory for files to be installed.  This option
requires compat 11 or later (it is silently ignored in compat 10 or earlier).

Note that this is not the same as the B<--sourcedirectory> option used
by the B<dh_auto_>I<*> commands. You rarely need to use this option, since
B<dh_installexamples> automatically looks for files in F<debian/tmp> in debhelper
compatibility level 11 and above.

=item B<--doc-main-package=>I<main-package>

Set the main package for a documentation package.  This is used to
install the documentation of the documentation package in F<<
/usr/share/doc/I<main-package> >> as recommended by the Debian policy
manual 3.9.7 in §12.3.

In compat 11 (or later), this option is only useful if debhelper's
auto-detection of the main package is wrong.  The option can also be
used to silence a warning from debhelper when the auto-detection fails
but the default happens to be correct.

This option cannot be used when B<dh_installexamples> is instructed to act
on multiple packages.  If you need this option, you will generally
need to combine it with B<-p> to ensure exactly one package is acted
on.

=item B<-X>I<item>, B<--exclude=>I<item>

Exclude files that contain I<item> anywhere in their filename from
being installed.

=item I<file> ...

Install these files (or directories) as examples into the first package
acted on. (Or into all packages if B<-A> is specified.)

=back

=head1 NOTES

Note that B<dh_installexamples> will happily copy entire directory hierarchies
if you ask it to (similar to B<cp -a>). If it is asked to install a
directory, it will install the complete contents of the directory.

=cut

init(options => {
	"sourcedir=s" => \$dh{SOURCEDIR},
	'doc-main-package=s' => \$dh{DOC_MAIN_PACKAGE},
});

# PROMISE: DH NOOP WITHOUT pkgfile-logged(examples) cli-options()

my $pwd;
my $default_error_handler = compat(10) ? \&glob_expand_error_handler_reject_nomagic_warn_discard : \&glob_expand_error_handler_reject;
my $nodocs = is_build_profile_active('nodoc') || get_buildoption('nodoc') ? 1 : 0;
# We cannot assume documentation is built under nodoc, but if it is we must flag it as handled
# or dh_missing might make noise.
$default_error_handler = \&glob_expand_error_handler_silently_ignore if $nodocs;

if (@{$dh{DOPACKAGES}} > 1 and $dh{DOC_MAIN_PACKAGE}) {
	error('--doc-main-package should be used with -p<doc-pkg>');
}
if ($dh{DOC_MAIN_PACKAGE}) {
	assert_opt_is_known_package($dh{DOC_MAIN_PACKAGE}, '--doc-main-package');
}

foreach my $package (getpackages()) {
	next if is_udeb($package);

	my $tmp=tmpdir($package);
	my $file=pkgfile($package,"examples");
	my @search_dirs = ('.');
	my $skip_install = process_pkg($package) ? 0 : 1;
	my $error_handler = $skip_install ? \&glob_expand_error_handler_silently_ignore : $default_error_handler;
	@search_dirs = ($dh{SOURCEDIR} // '.', default_sourcedir($package)) if not compat(10);
	
	my @examples;
	
	if ($file) {
		@examples = filearray($file, \@search_dirs, $error_handler) if $file;
	}	

	if (($package eq $dh{FIRSTPACKAGE} || $dh{PARAMS_ALL}) && @ARGV) {
		push @examples, @ARGV;
	}

	log_installed_files($package, @examples);

	next if $skip_install or $nodocs;

	if (@examples) {
		my $target_package = compute_doc_main_package($package);
		if (not defined($target_package)) {
			warning("Cannot auto-detect main package for ${package}.  If the default is wrong, please use --doc-main-package");
			$target_package = $package;
		}
		my $target_dir = "${tmp}/usr/share/doc/${target_package}/examples";
		install_dir($target_dir);

		my $exclude = '';
		if ($dh{EXCLUDE_FIND}) {
			$exclude .= ' -and ! \( '.$dh{EXCLUDE_FIND}.' \)';
		}
		
		foreach my $example (@examples) {
			next if excludefile($example);
			if (-d $example && $exclude) {
				my $basename = basename($example);
				my $dir = ($basename eq '.') ? $example : "$example/..";
				chomp($pwd=`pwd`) if not defined($pwd);
				# Gracefully handling tmpdir being absolute (-P/...)
				my $destdir = $target_dir =~ m{^/} ? $target_dir : "${pwd}/${target_dir}";
				complex_doit("cd '$dir' && " .
							 "find '$basename' -type f$exclude -print0 | LC_ALL=C sort -z | " .
							 "xargs -0 -I {} cp --reflink=auto --parents -dp {} ${destdir}");
			}
			else {
				doit("cp", '--reflink=auto', "-a", $example, $target_dir);
			}
		}
	}
}

=head1 SEE ALSO

L<debhelper(7)>

This program is a part of debhelper.

=head1 AUTHOR

Joey Hess <joeyh@debian.org>

=cut
                                                                                                                                                                                                                                                                                                                                                                           usr/bin/dh_installgsettings                                                                         0000755 0000000 0000000 00000004367 14354570042 014642  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl

=head1 NAME

dh_installgsettings - install GSettings overrides and set dependencies

=cut

use strict;
use warnings;
use Debian::Debhelper::Dh_Lib;

our $VERSION = DH_BUILTIN_VERSION;

=head1 SYNOPSIS

B<dh_installgsettings> [S<I<debhelper options>>] [B<--priority=<number>>]

=head1 DESCRIPTION

B<dh_installgsettings> is a debhelper program that is responsible for installing
GSettings override files and generating appropriate dependencies on the
GSettings backend.

The dependency on the backend will be generated in B<${misc:Depends}>.

=head1 FILES

=over 4

=item debian/I<package>.gsettings-override

Installed into usr/share/glib-2.0/schemas/10_I<package>.gschema.override in
the package build directory, with "I<package>" replaced by the package name.

The format of the file is the following:

  [org.gnome.mypackage]
  boolean-setting=true
  string-setting='string'
  ...

=back

=head1 OPTIONS

=over 4

=item B<--priority> I<priority>

Use I<priority> (which should be a 2-digit number) as the override
priority instead of 10. Higher values than ten can be used by 
derived distributions (20), blend distributions (50), or site-specific
packages (90).

=cut

init(options => {
	"priority=s" => \$dh{PRIORITY},
});

my $priority=10;
if (defined $dh{PRIORITY}) {
	$priority=$dh{PRIORITY};
}

# PROMISE: DH NOOP WITHOUT gsettings-override tmp(usr/share/glib-2.0/schemas) cli-options()

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmp=tmpdir($package);

	my $gsettings_schemas_dir = "$tmp/usr/share/glib-2.0/schemas/";

	my $override = pkgfile($package,"gsettings-override");
	if ($override ne '') {
		install_dir($gsettings_schemas_dir);
		install_file($override,
					 "$gsettings_schemas_dir/${priority}_$package.gschema.override");
	}

	if (-d "$gsettings_schemas_dir") {
		# Get a list of the schemas
		my $schemas = qx_cmd('find', $gsettings_schemas_dir, '-type', 'f',
							 '(', '-name', '*.xml', '-o', '-name', '*.override',
							 ')', '-printf', '%P');
		if ($schemas ne '') {
			addsubstvar($package, "misc:Depends", "dconf-gsettings-backend | gsettings-backend");
		}
	}
}

=back

=head1 SEE ALSO

L<debhelper(7)>

This program is a part of debhelper.

=head1 AUTHOR

Laurent Bigonville <bigon@debian.org>,
Josselin Mouette <joss@debian.org>

=cut

                                                                                                                                                                                                                                                                         usr/bin/dh_installifupdown                                                                          0000755 0000000 0000000 00000002737 14354570042 014465  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl

=head1 NAME

dh_installifupdown - install if-up and if-down hooks

=cut

use strict;
use warnings;
use Debian::Debhelper::Dh_Lib;

our $VERSION = DH_BUILTIN_VERSION;

=head1 SYNOPSIS

B<dh_installifupdown> [S<I<debhelper options>>] [B<--name=>I<name>]

=head1 DESCRIPTION

B<dh_installifupdown> is a debhelper program that is responsible for installing
F<if-up>, F<if-down>, F<if-pre-up>, and F<if-post-down> hook scripts into package build
directories.

=head1 FILES

=over 4

=item debian/I<package>.if-up

=item debian/I<package>.if-down

=item debian/I<package>.if-pre-up

=item debian/I<package>.if-post-down

These files are installed into etc/network/if-*.d/I<package> in
the package build directory.

=back

=head1 OPTIONS

=over 4

=item B<--name=>I<name>

Look for files named F<debian/package.name.if-*> and install them as
F<etc/network/if-*/name>, instead of using the usual files and installing them
as the package name.

=back

=cut

init();

# PROMISE: DH NOOP WITHOUT if-pre-up if-up if-down if-post-down cli-options()

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmp=tmpdir($package);

	foreach my $script (qw(pre-up up down post-down)) {
		my $file=pkgfile($package, "if-$script");
		if ($file ne '') {
			install_dir("$tmp/etc/network/if-$script.d");
			install_prog($file,"$tmp/etc/network/if-$script.d/".pkgfilename($package));
		}
	}
}

=head1 SEE ALSO

L<debhelper(7)>

This program is a part of debhelper.

=head1 AUTHOR

Joey Hess <joeyh@debian.org>

=cut
                                 usr/bin/dh_installinfo                                                                              0000755 0000000 0000000 00000006604 14354570042 013562  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl

=head1 NAME

dh_installinfo - install info files

=cut

use strict;
use warnings;
use Debian::Debhelper::Dh_Lib;

our $VERSION = DH_BUILTIN_VERSION;

=head1 SYNOPSIS

B<dh_installinfo> [S<I<debhelper options>>] [B<-A>] [S<I<file> ...>]

=head1 DESCRIPTION

B<dh_installinfo> is a debhelper program that is responsible for installing
info files into F<usr/share/info> in the package build directory.

From debhelper compatibility level 11 on, B<dh_install> will fall back to
looking in F<debian/tmp> for files, if it does not find them in the current
directory (or wherever you've told it to look using B<--sourcedir>).

=head1 FILES

=over 4

=item debian/I<package>.info

List info files to be installed.

Supports substitution variables in compat 13 and later as
documented in L<debhelper(7)>.

=back

=head1 OPTIONS

=over 4

=item B<-A>, B<--all>

Install all files specified by command line parameters in ALL packages
acted on.

=item B<--sourcedir=>I<dir>

Look in the specified directory for files to be installed.  This option
requires compat 11 or later (it is silently ignored in compat 10 or earlier).

Note that this is not the same as the B<--sourcedirectory> option used
by the B<dh_auto_>I<*> commands. You rarely need to use this option, since
B<dh_installinfo> automatically looks for files in F<debian/tmp> in debhelper
compatibility level 11 and above.

=item I<file> ...

Install these info files into the first package acted on. (Or in
all packages if B<-A> is specified).

=back

=cut

init(options => {
	"sourcedir=s" => \$dh{SOURCEDIR},
});

# PROMISE: DH NOOP WITHOUT pkgfile-logged(info) cli-options() tmp(usr/share/info/dir)

my $default_error_handler = compat(10) ? \&glob_expand_error_handler_reject_nomagic_warn_discard : \&glob_expand_error_handler_reject;
my $nodocs = is_build_profile_active('nodoc') || get_buildoption('nodoc') ? 1 : 0;
# We cannot assume documentation is built under nodoc, but if it is we must flag it as handled
# or dh_missing might make noise.
$default_error_handler = \&glob_expand_error_handler_silently_ignore if $nodocs;

foreach my $package (getpackages()) {
	my $tmp=tmpdir($package);
	my $file=pkgfile($package,"info");
	my @search_dirs = ('.');
	my @ignored_files;
	my $skip_install = process_pkg($package) ? 0 : 1;
	my $error_handler = $skip_install ? \&glob_expand_error_handler_silently_ignore : $default_error_handler;
	@search_dirs = ($dh{SOURCEDIR} // '.', default_sourcedir($package)) if not compat(10);

	my @info;
	
	if ($file) {
		@info = filearray($file, \@search_dirs, $error_handler) if $file;
	}

	if (($package eq $dh{FIRSTPACKAGE} || $dh{PARAMS_ALL}) && @ARGV) {
		push @info, @ARGV;
	}

	# Pretend that we handled usr/share/info/dir.  We do not want to install it as it causes
	# file conflicts between packages and we also do not want dh_missing to drop a bomb on
	# the user for it.
	#
	# See #971036
	for my $path (@search_dirs) {
		if ( -e "${path}/usr/share/info/dir" ) {
			push(@ignored_files, 'usr/share/info/dir');
			last;
		}
	}

	log_installed_files($package, @info, @ignored_files);

	next if $skip_install or $nodocs;

	if (@info) {
		install_dir("$tmp/usr/share/info");
		xargs(\@info, "cp", '--reflink=auto', XARGS_INSERT_PARAMS_HERE, "$tmp/usr/share/info");
		doit("chmod","-R", "u+rw,go=rX","$tmp/usr/share/info/");
	}
}

=head1 SEE ALSO

L<debhelper(7)>

This program is a part of debhelper.

=head1 AUTHOR

Joey Hess <joeyh@debian.org>

=cut
                                                                                                                            usr/bin/dh_installinit                                                                              0000755 0000000 0000000 00000033725 14354570042 013576  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl

=head1 NAME

dh_installinit - install service init files into package build directories

=cut

use strict;
use warnings;
use Debian::Debhelper::Dh_Lib;
use File::Find;

our $VERSION = DH_BUILTIN_VERSION;

=head1 SYNOPSIS

B<dh_installinit> [S<I<debhelper options>>] [B<--name=>I<name>] [B<-n>] [B<-R>] [B<-r>] [B<-d>] [S<B<--> I<params>>]

=head1 DESCRIPTION

B<dh_installinit> is a debhelper program that is responsible for
installing init scripts with associated defaults files.  In
compatibility levels up to and including 10, B<dh_installinit> will
also install some systemd related files provided by the debian
packaging (see the L</FILES> section below).  In compatibility levels
up to and including 11, B<dh_installinit> will also handle upstart
jobs provided in the debian packaging (see the L</FILES> for more
information on this as well).

It also automatically generates the F<postinst> and F<postrm> and F<prerm>
commands needed to set up the symlinks in F</etc/rc*.d/> to start and stop
the init scripts.

In compat 10 or earlier: If a package only ships a systemd service
file and no sysvinit script is provided, you may want to exclude the
call to dh_installinit for that package (e.g. via B<-N>).  Otherwise,
you may get warnings from lintian about init.d scripts not being
included in the package.

=head1 FILES

=over 4

=item debian/I<package>.init

If this exists, it is installed into etc/init.d/I<package> in the package
build directory.

=item debian/I<package>.default

If this exists, it is installed into etc/default/I<package> in the package
build directory.

=item debian/I<package>.upstart

In compatibility level 11, this file will trigger an error with a reminder
about ensuring the proper removal of the upstart file in the previous package
version.  Please consider using the "rm_conffile" feature from
L<dh_installdeb(1)> to ensure the proper removal of previous upstart files.

In compatibility level 10, if this file exists, it is installed into
etc/init/I<package>.conf in the package build directory.

=item debian/I<package>.service

If this exists, it is installed into F<< lib/systemd/system/I<package>.service >> in
the package build directory. Only used in compat levels 10 and below.

=item debian/I<package>.tmpfile

If this exists, it is installed into usr/lib/tmpfiles.d/I<package>.conf in the
package build directory. Only used in compat levels 10 and below.

=back

=head1 OPTIONS

=over 4

