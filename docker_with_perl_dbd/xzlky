thing. Particularly, perl will mistakenly return true when you clear the 
hash by repeatedly calling DELETE until it is empty. You are therefore 
advised to supply your own SCALAR method when you want to be absolutely 
sure that your hash behaves nicely in scalar context.

In our example we can just call C<scalar> on the underlying hash
referenced by C<$self-E<gt>{LIST}>:

    sub SCALAR {
	carp &whowasi if $DEBUG;
	my $self = shift;
	return scalar $self->{LIST}->%*
    }

NOTE: In perl 5.25 the behavior of scalar %hash on an untied hash changed
to return the count of keys. Prior to this it returned a string containing
information about the bucket setup of the hash. See
L<Hash::Util/bucket_ratio> for a backwards compatibility path.

=item UNTIE this
X<UNTIE>

This is called when C<untie> occurs.  See L</The C<untie> Gotcha> below.

=item DESTROY this
X<DESTROY>

This method is triggered when a tied hash is about to go out of
scope.  You don't really need it unless you're trying to add debugging
or have auxiliary state to clean up.  Here's a very simple function:

    sub DESTROY  {
	carp &whowasi if $DEBUG;
    }

=back

Note that functions such as keys() and values() may return huge lists
when used on large objects, like DBM files.  You may prefer to use the
each() function to iterate over such.  Example:

    # print out history file offsets
    use NDBM_File;
    tie(%HIST, 'NDBM_File', '/usr/lib/news/history', 1, 0);
    while (($key,$val) = each %HIST) {
        print $key, ' = ', unpack('L',$val), "\n";
    }
    untie(%HIST);

=head2 Tying FileHandles
X<filehandle, tying>

This is partially implemented now.

A class implementing a tied filehandle should define the following
methods: TIEHANDLE, at least one of PRINT, PRINTF, WRITE, READLINE, GETC,
READ, and possibly CLOSE, UNTIE and DESTROY.  The class can also provide: BINMODE,
OPEN, EOF, FILENO, SEEK, TELL - if the corresponding perl operators are
used on the handle.

When STDERR is tied, its PRINT method will be called to issue warnings
and error messages.  This feature is temporarily disabled during the call, 
which means you can use C<warn()> inside PRINT without starting a recursive
loop.  And just like C<__WARN__> and C<__DIE__> handlers, STDERR's PRINT
method may be called to report parser errors, so the caveats mentioned under 
L<perlvar/%SIG> apply.

All of this is especially useful when perl is embedded in some other 
program, where output to STDOUT and STDERR may have to be redirected 
in some special way.  See nvi and the Apache module for examples.

When tying a handle, the first argument to C<tie> should begin with an
asterisk.  So, if you are tying STDOUT, use C<*STDOUT>.  If you have
assigned it to a scalar variable, say C<$handle>, use C<*$handle>.
C<tie $handle> ties the scalar variable C<$handle>, not the handle inside
it.

In our example we're going to create a shouting handle.

    package Shout;

=over 4

=item TIEHANDLE classname, LIST
X<TIEHANDLE>

This is the constructor for the class.  That means it is expected to
return a blessed reference of some sort. The reference can be used to
hold some internal information.

    sub TIEHANDLE { print "<shout>\n"; my $i; bless \$i, shift }

=item WRITE this, LIST
X<WRITE>

This method will be called when the handle is written to via the
C<syswrite> function.

 sub WRITE {
     $r = shift;
     my($buf,$len,$offset) = @_;
     print "WRITE called, \$buf=$buf, \$len=$len, \$offset=$offset";
 }

=item PRINT this, LIST
X<PRINT>

This method will be triggered every time the tied handle is printed to
with the C<print()> or C<say()> functions.  Beyond its self reference
it also expects the list that was passed to the print function.

  sub PRINT { $r = shift; $$r++; print join($,,map(uc($_),@_)),$\ }

C<say()> acts just like C<print()> except $\ will be localized to C<\n> so
you need do nothing special to handle C<say()> in C<PRINT()>.

=item PRINTF this, LIST
X<PRINTF>

This method will be triggered every time the tied handle is printed to
with the C<printf()> function.
Beyond its self reference it also expects the format and list that was
passed to the printf function.

    sub PRINTF {
        shift;
        my $fmt = shift;
        print sprintf($fmt, @_);
    }

=item READ this, LIST
X<READ>

This method will be called when the handle is read from via the C<read>
or C<sysread> functions.

 sub READ {
   my $self = shift;
   my $bufref = \$_[0];
   my(undef,$len,$offset) = @_;
   print "READ called, \$buf=$bufref, \$len=$len, \$offset=$offset";
   # add to $$bufref, set $len to number of characters read
   $len;
 }

=item READLINE this
X<READLINE>

This method is called when the handle is read via C<E<lt>HANDLEE<gt>>
or C<readline HANDLE>.

As per L<C<readline>|perlfunc/readline>, in scalar context it should return
the next line, or C<undef> for no more data.  In list context it should
return all remaining lines, or an empty list for no more data.  The strings
returned should include the input record separator C<$/> (see L<perlvar>),
unless it is C<undef> (which means "slurp" mode).

    sub READLINE {
      my $r = shift;
      if (wantarray) {
        return ("all remaining\n",
                "lines up\n",
                "to eof\n");
      } else {
        return "READLINE called " . ++$$r . " times\n";
      }
    }

=item GETC this
X<GETC>

This method will be called when the C<getc> function is called.

    sub GETC { print "Don't GETC, Get Perl"; return "a"; }

=item EOF this
X<EOF>

This method will be called when the C<eof> function is called.

Starting with Perl 5.12, an additional integer parameter will be passed.  It
will be zero if C<eof> is called without parameter; C<1> if C<eof> is given
a filehandle as a parameter, e.g. C<eof(FH)>; and C<2> in the very special
case that the tied filehandle is C<ARGV> and C<eof> is called with an empty
parameter list, e.g. C<eof()>.

    sub EOF { not length $stringbuf }

=item CLOSE this
X<CLOSE>

This method will be called when the handle is closed via the C<close>
function.

    sub CLOSE { print "CLOSE called.\n" }

=item UNTIE this
X<UNTIE>

As with the other types of ties, this method will be called when C<untie> happens.
It may be appropriate to "auto CLOSE" when this occurs.  See
L</The C<untie> Gotcha> below.

=item DESTROY this
X<DESTROY>

As with the other types of ties, this method will be called when the
tied handle is about to be destroyed. This is useful for debugging and
possibly cleaning up.

    sub DESTROY { print "</shout>\n" }

=back

Here's how to use our little example:

    tie(*FOO,'Shout');
    print FOO "hello\n";
    $x = 4; $y = 6;
    print FOO $x, " plus ", $y, " equals ", $x + $y, "\n";
    print <FOO>;

=head2 UNTIE this
X<UNTIE>

You can define for all tie types an UNTIE method that will be called
at untie().  See L</The C<untie> Gotcha> below.

=head2 The C<untie> Gotcha
X<untie>

If you intend making use of the object returned from either tie() or
tied(), and if the tie's target class defines a destructor, there is a
subtle gotcha you I<must> guard against.

As setup, consider this (admittedly rather contrived) example of a
tie; all it does is use a file to keep a log of the values assigned to
a scalar.

    package Remember;

    use v5.36;
    use IO::File;

    sub TIESCALAR {
        my $class = shift;
        my $filename = shift;
        my $handle = IO::File->new( "> $filename" )
                         or die "Cannot open $filename: $!\n";

        print $handle "The Start\n";
        bless {FH => $handle, Value => 0}, $class;
    }

    sub FETCH {
        my $self = shift;
        return $self->{Value};
    }

    sub STORE {
        my $self = shift;
        my $value = shift;
        my $handle = $self->{FH};
        print $handle "$value\n";
        $self->{Value} = $value;
    }

    sub DESTROY {
        my $self = shift;
        my $handle = $self->{FH};
        print $handle "The End\n";
        close $handle;
    }

    1;

Here is an example that makes use of this tie:

    use strict;
    use Remember;

    my $fred;
    tie $fred, 'Remember', 'myfile.txt';
    $fred = 1;
    $fred = 4;
    $fred = 5;
    untie $fred;
    system "cat myfile.txt";

This is the output when it is executed:

    The Start
    1
    4
    5
    The End

So far so good.  Those of you who have been paying attention will have
spotted that the tied object hasn't been used so far.  So lets add an
extra method to the Remember class to allow comments to be included in
the file; say, something like this:

    sub comment {
        my $self = shift;
        my $text = shift;
        my $handle = $self->{FH};
        print $handle $text, "\n";
    }

And here is the previous example modified to use the C<comment> method
(which requires the tied object):

    use strict;
    use Remember;

    my ($fred, $x);
    $x = tie $fred, 'Remember', 'myfile.txt';
    $fred = 1;
    $fred = 4;
    comment $x "changing...";
    $fred = 5;
    untie $fred;
    system "cat myfile.txt";

When this code is executed there is no output.  Here's why:

When a variable is tied, it is associated with the object which is the
return value of the TIESCALAR, TIEARRAY, or TIEHASH function.  This
object normally has only one reference, namely, the implicit reference
from the tied variable.  When untie() is called, that reference is
destroyed.  Then, as in the first example above, the object's
destructor (DESTROY) is called, which is normal for objects that have
no more valid references; and thus the file is closed.

In the second example, however, we have stored another reference to
the tied object in $x.  That means that when untie() gets called
there will still be a valid reference to the object in existence, so
the destructor is not called at that time, and thus the file is not
closed.  The reason there is no output is because the file buffers
have not been flushed to disk.

Now that you know what the problem is, what can you do to avoid it?
Prior to the introduction of the optional UNTIE method the only way
was the good old C<-w> flag. Which will spot any instances where you call
untie() and there are still valid references to the tied object.  If
the second script above this near the top C<use warnings 'untie'>
or was run with the C<-w> flag, Perl prints this
warning message:

    untie attempted while 1 inner references still exist

To get the script to work properly and silence the warning make sure
there are no valid references to the tied object I<before> untie() is
called:

    undef $x;
    untie $fred;

Now that UNTIE exists the class designer can decide which parts of the
class functionality are really associated with C<untie> and which with
the object being destroyed. What makes sense for a given class depends
on whether the inner references are being kept so that non-tie-related
methods can be called on the object. But in most cases it probably makes
sense to move the functionality that would have been in DESTROY to the UNTIE
method.

If the UNTIE method exists then the warning above does not occur. Instead the
UNTIE method is passed the count of "extra" references and can issue its own
warning if appropriate. e.g. to replicate the no UNTIE case this method can
be used:

 sub UNTIE
 {
  my ($obj,$count) = @_;
  carp "untie attempted while $count inner references still exist"
                                                              if $count;
 }

=head1 SEE ALSO

See L<DB_File> or L<Config> for some interesting tie() implementations.
A good starting point for many tie() implementations is with one of the
modules L<Tie::Scalar>, L<Tie::Array>, L<Tie::Hash>, or L<Tie::Handle>.

=head1 BUGS

The normal return provided by C<scalar(%hash)> is not
available.  What this means is that using %tied_hash in boolean
context doesn't work right (currently this always tests false,
regardless of whether the hash is empty or hash elements).
[ This paragraph needs review in light of changes in 5.25 ]

Localizing tied arrays or hashes does not work.  After exiting the
scope the arrays or the hashes are not restored.

Counting the number of entries in a hash via C<scalar(keys(%hash))>
or C<scalar(values(%hash)>) is inefficient since it needs to iterate
through all the entries with FIRSTKEY/NEXTKEY.

Tied hash/array slices cause multiple FETCH/STORE pairs, there are no
tie methods for slice operations.

You cannot easily tie a multilevel data structure (such as a hash of
hashes) to a dbm file.  The first problem is that all but GDBM and
Berkeley DB have size limitations, but beyond that, you also have problems
with how references are to be represented on disk.  One
module that does attempt to address this need is DBM::Deep.  Check your
nearest CPAN site as described in L<perlmodlib> for source code.  Note
that despite its name, DBM::Deep does not use dbm.  Another earlier attempt
at solving the problem is MLDBM, which is also available on the CPAN, but
which has some fairly serious limitations.

Tied filehandles are still incomplete.  sysopen(), truncate(),
flock(), fcntl(), stat() and -X can't currently be trapped.

=head1 AUTHOR

Tom Christiansen

TIEHANDLE by Sven Verdoolaege <F<skimo@dns.ufsia.ac.be>> and Doug MacEachern <F<dougm@osf.org>>

UNTIE by Nick Ing-Simmons <F<nick@ing-simmons.net>>

SCALAR by Tassilo von Parseval <F<tassilo.von.parseval@rwth-aachen.de>>

Tying Arrays by Casey West <F<casey@geeknest.com>>
                                                                                                                                                                                                                                                                                                                                                                               usr/local/lib/perl5/5.40.0/pod/perltoc.pod                                                          0000644 0000000 0000000 00003162174 14714567415 016462  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        
# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
# This file is autogenerated by buildtoc from all the other pods.
# Edit those files and run pod/buildtoc to effect changes.

=encoding UTF-8

=head1 NAME

perltoc - perl documentation table of contents

=head1 DESCRIPTION

This page provides a brief table of contents for the rest of the Perl
documentation set.  It is meant to be scanned quickly or grepped
through to locate the proper section you're looking for.

=head1 BASIC DOCUMENTATION

=head2 perl - The Perl 5 language interpreter

=over 4

=item SYNOPSIS

=item GETTING HELP

=over 4

=item Overview

=item Tutorials

=item Reference Manual

=item Internals and C Language Interface

=item History

=item Miscellaneous

=item Language-Specific

=item Platform-Specific

=item Stubs for Deleted Documents

=back

=item DESCRIPTION

=item AVAILABILITY

=item ENVIRONMENT

=item AUTHOR

=item FILES

=item SEE ALSO

L<https://www.perl.org/>, L<https://www.perl.com/>,
L<https://www.cpan.org/>, L<https://www.pm.org/>

=item DIAGNOSTICS

=item BUGS

=item NOTES

=back

=head2 perlintro - a brief introduction and overview of Perl

=over 4

=item DESCRIPTION

=over 4

=item What is Perl?

=item Running Perl programs

=item Safety net

=item Basic syntax overview

=item Perl variable types

Scalars, Arrays, Hashes

=item Variable scoping

=item Conditional and looping constructs

if, while, for, foreach

=item Builtin operators and functions

Arithmetic, Numeric comparison, String comparison, Boolean logic,
Miscellaneous

=item Files and I/O

=item Regular expressions

Simple matching, Simple substitution, More complex regular expressions,
Parentheses for capturing, Other regexp features

=item Writing subroutines

=item OO Perl

=item Using Perl modules

=back

=item AUTHOR

=back

=head2 perlrun - how to execute the Perl interpreter

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item #! and quoting on non-Unix systems
X<hashbang> X<#!>

OS/2, MS-DOS, Win95/NT, VMS

=item Location of Perl
X<perl, location of interpreter>

=item Command Switches
X<perl, command switches> X<command switches>

B<-0>[I<octal/hexadecimal>] X<-0> X<$/>, B<-a> X<-a> X<autosplit>, B<-C
[I<number/list>]> X<-C>, B<-c> X<-c>, B<-d> X<-d> X<-dt>, B<-dt>,
B<-d:>I<MOD[=bar,baz]> X<-d> X<-dt>, B<-dt:>I<MOD[=bar,baz]>,
B<-D>I<letters> X<-D> X<DEBUGGING> X<-DDEBUGGING>, B<-D>I<number>, B<-e>
I<commandline> X<-e>, B<-E> I<commandline> X<-E>, B<-f> X<-f>
X<sitecustomize> X<sitecustomize.pl>, B<-F>I<pattern> X<-F>, B<-g> X<-g>,
B<-h> X<-h>, B<-?> X<-?>, B<-i>[I<extension>] X<-i> X<in-place>,
B<-I>I<directory> X<-I> X<@INC>, B<-l>[I<octnum>] X<-l> X<$/> X<$\>,
B<-m>[B<->]I<module> X<-m> X<-M>, B<-M>[B<->]I<module>,
B<-M>[B<->]I<'module ...'>, B<-[mM]>[B<->]I<module=arg[,arg]...>, B<-n>
X<-n>, B<-p> X<-p>, B<-s> X<-s>, B<-S> X<-S>, B<-t> X<-t>, B<-T> X<-T>,
B<-u> X<-u>, B<-U> X<-U>, B<-v> X<-v>, B<-V> X<-V>, B<-V:>I<configvar>,
B<-w> X<-w>, B<-W> X<-W>, B<-X> X<-X>, B<-x> X<-x>, B<-x>I<directory>

=back

=item ENVIRONMENT
X<perl, environment variables>

HOME X<HOME>, LOGDIR X<LOGDIR>, PATH X<PATH>, PERL5LIB X<PERL5LIB>,
PERL5OPT X<PERL5OPT>, PERLIO X<PERLIO>, :crlf X<:crlf>, :perlio X<:perlio>,
:stdio X<:stdio>, :unix X<:unix>, PERLIO_DEBUG X<PERLIO_DEBUG>, PERLLIB
X<PERLLIB>, PERL5DB X<PERL5DB>, PERL5DB_THREADED X<PERL5DB_THREADED>,
PERL5SHELL (specific to the Win32 port) X<PERL5SHELL>,
PERL_ALLOW_NON_IFS_LSP (specific to the Win32 port)
X<PERL_ALLOW_NON_IFS_LSP>, PERL_DEBUG_MSTATS X<PERL_DEBUG_MSTATS>,
PERL_DESTRUCT_LEVEL X<PERL_DESTRUCT_LEVEL>, PERL_DL_NONLAZY
X<PERL_DL_NONLAZY>, PERL_ENCODING X<PERL_ENCODING>, PERL_HASH_SEED
X<PERL_HASH_SEED>, PERL_PERTURB_KEYS X<PERL_PERTURB_KEYS>,
PERL_HASH_SEED_DEBUG X<PERL_HASH_SEED_DEBUG>, PERL_MEM_LOG X<PERL_MEM_LOG>,
PERL_ROOT (specific to the VMS port) X<PERL_ROOT>, PERL_SIGNALS
X<PERL_SIGNALS>, PERL_UNICODE X<PERL_UNICODE>, PERL_USE_UNSAFE_INC
X<PERL_USE_UNSAFE_INC>, SYS$LOGIN (specific to the VMS port) X<SYS$LOGIN>,
PERL_INTERNAL_RAND_SEED X<PERL_INTERNAL_RAND_SEED>, PERL_RAND_SEED
X<PERL_RAND_SEED>

=item ORDER OF APPLICATION

-I, -M, the PERL5LIB environment variable, combinations of -I, -M and
PERL5LIB, the PERL5OPT environment variable, Other complications, arch and
version subdirs, sitecustomize.pl

=back

=head2 perlreftut - Mark's very short tutorial about references

=over 4

=item DESCRIPTION

=item Who Needs Complicated Data Structures?

=item The Solution

=item Syntax

=over 4

=item Making References

=item Using References

=item An Example

=item Arrow Rule

=back

=item Solution

=item The Rest

=item Summary

=item Credits

=over 4

=item Distribution Conditions

=back

=back

=head2 perldsc - Perl Data Structures Cookbook

=over 4

=item DESCRIPTION

arrays of arrays, hashes of arrays, arrays of hashes, hashes of hashes,
more elaborate constructs

=item REFERENCES
X<reference> X<dereference> X<dereferencing> X<pointer>

=item COMMON MISTAKES

=item CAVEAT ON PRECEDENCE
X<dereference, precedence> X<dereferencing, precedence>

=item WHY YOU SHOULD ALWAYS C<use VERSION>

=item DEBUGGING
X<data structure, debugging> X<complex data structure, debugging>
X<AoA, debugging> X<HoA, debugging> X<AoH, debugging> X<HoH, debugging>
X<array of arrays, debugging> X<hash of arrays, debugging>
X<array of hashes, debugging> X<hash of hashes, debugging>

=item CODE EXAMPLES

=item ARRAYS OF ARRAYS
X<array of arrays> X<AoA>

=over 4

=item Declaration of an ARRAY OF ARRAYS

=item Generation of an ARRAY OF ARRAYS

=item Access and Printing of an ARRAY OF ARRAYS

=back

=item HASHES OF ARRAYS
X<hash of arrays> X<HoA>

=over 4

=item Declaration of a HASH OF ARRAYS

=item Generation of a HASH OF ARRAYS

=item Access and Printing of a HASH OF ARRAYS

=back

=item ARRAYS OF HASHES
X<array of hashes> X<AoH>

=over 4

=item Declaration of an ARRAY OF HASHES

=item Generation of an ARRAY OF HASHES

=item Access and Printing of an ARRAY OF HASHES

=back

=item HASHES OF HASHES
X<hash of hashes> X<HoH>

=over 4

=item Declaration of a HASH OF HASHES

=item Generation of a HASH OF HASHES

=item Access and Printing of a HASH OF HASHES

=back

=item MORE ELABORATE RECORDS
X<record> X<structure> X<struct>

=over 4

=item Declaration of MORE ELABORATE RECORDS

=item Declaration of a HASH OF COMPLEX RECORDS

=item Generation of a HASH OF COMPLEX RECORDS

=back

=item Database Ties

=item SEE ALSO

=item AUTHOR

=back

=head2 perllol - Manipulating Arrays of Arrays in Perl

=over 4

=item DESCRIPTION

=over 4

=item Declaration and Access of Arrays of Arrays

=item Growing Your Own

=item Access and Printing

=item Slices

=back

=item SEE ALSO

=item AUTHOR

=back

=head2 perlrequick - Perl regular expressions quick start

=over 4

=item DESCRIPTION

=item The Guide

=over 4

=item Simple word matching

=item Using character classes

=item Matching this or that

=item Grouping things and hierarchical matching

=item Extracting matches

=item Matching repetitions

=item More matching

=item Search and replace

=item The split operator

=item C<use re 'strict'>

=back

=item BUGS

=item SEE ALSO

=item AUTHOR AND COPYRIGHT

=over 4

=item Acknowledgments

=back

=back

=head2 perlretut - Perl regular expressions tutorial

=over 4

=item DESCRIPTION

=item Part 1: The basics

=over 4

=item Simple word matching

=item Using character classes

=item Matching this or that

=item Grouping things and hierarchical matching

=item Extracting matches

=item Backreferences

=item Relative backreferences

=item Named backreferences

=item Alternative capture group numbering

=item Position information

=item Non-capturing groupings

=item Matching repetitions

=item Possessive quantifiers

=item Building a regexp

=item Using regular expressions in Perl

=back

=item Part 2: Power tools

=over 4

=item More on characters, strings, and character classes

=item Compiling and saving regular expressions

=item Composing regular expressions at runtime

=item Embedding comments and modifiers in a regular expression

=item Looking ahead and looking behind

=item Using independent subexpressions to prevent backtracking

=item Conditional expressions

=item Defining named patterns

=item Recursive patterns

=item A bit of magic: executing Perl code in a regular expression

=item Backtracking control verbs

=item Pragmas and debugging

=back

=item SEE ALSO

=item AUTHOR AND COPYRIGHT

=over 4

=item Acknowledgments

=back

=back

=head2 perlootut - Object-Oriented Programming in Perl Tutorial

=over 4

=item DATE

=item DESCRIPTION

=item OBJECT-ORIENTED FUNDAMENTALS

=over 4

=item Object

=item Class

=item Methods

=item Attributes

=item Polymorphism

=item Inheritance

=item Encapsulation

=item Composition

=item Roles

=item When to Use OO

=back

=item PERL OO SYSTEMS

=over 4

=item Moose

Declarative sugar, Roles built-in, A miniature type system, Full
introspection and manipulation, Self-hosted and extensible, Rich ecosystem,
Many more features

=item Class::Accessor

=item Class::Tiny

=item Role::Tiny

=item OO System Summary

L<Moose>, L<Class::Accessor>, L<Class::Tiny>, L<Role::Tiny>

=item Other OO Systems

=back

=item CONCLUSION

=back

=head2 perlperf - Perl Performance and Optimization Techniques

=over 4

=item DESCRIPTION

=item OVERVIEW

=over 4

=item ONE STEP SIDEWAYS

=item ONE STEP FORWARD

=item ANOTHER STEP SIDEWAYS

=back

=item GENERAL GUIDELINES

=item BENCHMARKS

=over 4

=item  Assigning and Dereferencing Variables

=item  Search and replace or tr

=back

=item PROFILING TOOLS
