}

if ($dh{ENABLE_DBGSYM}) {
	error("--keep-debug and explicit --automatic-dbgsym are mutually exclusive") if ($dh{K_FLAG});
	error("--dbg-package and explicit --automatic-dbgsym are mutually exclusive") if ($dh{DEBUGPACKAGE});
}

$dh{ENABLE_DBGSYM} = 1 if not defined($dh{ENABLE_DBGSYM});

if ($dh{MIGRATE_DBGSYM} and not $dh{ENABLE_DBGSYM}) {
	error("--dbgsym-migration and --no-automatic-dbgsym are mutually exclusive");
}

# This variable can be used to turn off stripping (see Policy).
exit 0 if (get_buildoption('nostrip'));

my $no_auto_dbgsym = 0;
$no_auto_dbgsym = 1 if get_buildoption('noautodbgsym') or get_buildoption('noddebs');

# Check if a file is an elf binary, shared library, or static library,
# for use by File::Find. It'll fill the 3 first arrays with anything
# it finds.  The @build_ids will be the collected build-ids (if any)
my (@shared_libs, @executables, @static_libs, @build_ids, %file_output);
sub testfile {
	my $fn = $_;
	return if -l $fn; # Always skip symlinks.
	
	# See if we were asked to exclude this file.
	# Note that we have to test on the full filename, including directory.
	if (excludefile($fn)) {
		$File::Find::prune = 1 if -d _;
		return;
	}
	# Ignore the .../debug/.build-id/ directory.  It is not really helpful
	# to strip debug symbols.
	$File::Find::prune = 1 if -d _ && index($fn, '/debug/.build-id/') > -1;
	return if -d _;

	# Is it a debug library in a debug subdir?
	return if $fn=~m{debug/.*\.so};
	return if $fn=~m{/guile/.*\.go$};

	# Exploit the previous stat call to get the $mode, so we can check
	# later if it is executable or not.
	#
	# NB: compat() can issue a stat, so we /should/ do this now
	my (undef, undef, $mode, undef) = stat(_);

	if (compat(10)) {
		# In compat 10 and earlier, we used filenames and file(1)

		# Does its filename look like a shared library?
		#  - *.cmxs are OCaml native code shared libraries
		#  - *.node are also native ELF binaries (for node-js)
		if ($fn =~ m/\.(?:so.*?|cmxs|node)$/) {
			# Ok, do the expensive test.
			my $type = get_file_type($fn, 1);
			if ($type =~ m/ELF.*shared/) {
				push @shared_libs, $fn;
				return;
			}
		}

		# -x is not good enough for this test
		if ($mode & 0111) {
			# Ok, expensive test.
			my $type = get_file_type($fn, 1);
			if ($type =~ m/ELF.*(executable|shared)/) {
				push(@executables, $fn);
				return;
			}
		}
	} else {
		# In compat 11, we check the ELF header manually (because bulking file(1) is a pain and
		# it is too slow otherwise)

		if (is_so_or_exec_elf_file($fn)) {
			# -x is not good enough for this test
			if ($mode & 0111) {
				push(@executables, $fn);
			} else {
				push(@shared_libs, $fn);
			}
			return;
		}
	}
	# Is it a static library, and not a debug library?
	if ($fn =~ m/\/lib[^\/]*\.a$/ && $fn !~ m/.*_g\.a$/) {
		# Is it a binary file, or something else (maybe a linker
		# script on Hurd, for example? I don't use file, because
		# file returns a variety of things on static libraries.
		if (-B $fn) {
			push @static_libs, $fn;
			return;
		}
	}
}

sub write_buildid_file {
	my ($package, $build_ids) = @_;
	my $dir = "debian/.debhelper/${package}";
	my $path = "${dir}/dbgsym-build-ids";
	install_dir($dir);
	open(my $fd, '>>', $path) or error("open $path failed: $!");
	print {$fd} join(q{ }, sort(@{$build_ids})) . ' ';
	close($fd) or error("close $path failed: $!");
}

# I could just use `file $_[0]`, but this is safer
sub get_file_type {
	my ($file, $cache_ok) = @_;
	return $file_output{$file} if $cache_ok && $file_output{$file};
	my @file_args = Debian::Debhelper::Dh_Lib::_internal_optional_file_args();
	my @cmdline = ('file', @file_args, '--brief', '-e', 'apptype', '-e', 'ascii', '-e', 'encoding', '-e', 'cdf',
				   '-e', 'compress', '-e', 'tar', '--', $file);

	open(my $fd, '-|', @cmdline) // error("cannot fork+exec file: $!");
	my $type = <$fd>;
	close($fd) || error_exitcode(escape_shell(@cmdline));

	error("file(1) gave no result for $file!?") if (not $type) ;
	return $file_output{$file} = $type;
}

sub make_debug {
	my ($objcopy, $file, $tmp, $desttmp, $use_build_id) = @_;
	my ($debug_path, $debug_build_id);

	# Don't try to copy debug symbols out if the file is already
	# stripped.
	#
	# Disable caching for non-build-id based extractions.
	# Unfortunately, it breaks when there are hardlinks to the same
	# ELF files.
	my $file_info = get_file_type($file, $use_build_id ? 1 : 0);
	return unless $file_info =~ /not stripped/;

	if ($use_build_id) {
		if ($file_info =~ m/BuildID\[sha1]\s*=\s*([0-9a-f]{2})([0-9a-f]+)/ or
			  `LC_ALL=C readelf -n $file`=~ /^\s+Build ID: ([0-9a-f]{2})([0-9a-f]+)$/m) {
			$debug_path=$desttmp."/usr/lib/debug/.build-id/$1/$2.debug";
			$debug_build_id="${1}${2}";
			push(@build_ids, $debug_build_id);
		} else {
			# For dbgsyms, we need build-id (else it will not be
			# co-installable).
			warning("Could not find the BuildID in $file");
			return if $use_build_id > 1;
		}
	}
	if (not $debug_path) {
		# Either not using build_id OR no build-id available
		my ($base_file)=$file=~/^\Q$tmp\E(.*)/;
		$debug_path=$desttmp."/usr/lib/debug/".$base_file;
	}
	install_dir(dirname($debug_path));
	if (compat(8) && $use_build_id < 2) {
		doit($objcopy, "--only-keep-debug", $file, $debug_path);
	}
	else {
		# Compat 9 OR a dbgsym package.
		doit($objcopy, "--only-keep-debug", "--compress-debug-sections", $file, $debug_path) unless -e $debug_path;
	}

	# No reason for this to be executable.
	reset_perm_and_owner(0644, $debug_path);
	return $debug_path;
}

sub attach_debug {
	my ($objcopy, $file, $debug_path) = @_;
	doit($objcopy, "--add-gnu-debuglink", $debug_path, $file);
}

my %all_packages = map { $_ => 1 } getpackages();

sub process_packages {
	foreach my $package (@_) {
		my $tmp=tmpdir($package);
		my $objcopy = cross_command($package, "objcopy");
		my $strip = cross_command($package, "strip");

		# Support for keeping the debugging symbols in a detached file.
		my $keep_debug=$dh{K_FLAG};
		my $debugtmp=$tmp;
		my $use_build_id = compat(8) ? 0 : 1;
		if ($dh{DEBUGPACKAGE}) {
			$keep_debug=1;
			my $debugpackage=$dh{DEBUGPACKAGE};
			error("debug package $debugpackage is not listed in the control file") if (!$all_packages{$debugpackage});
			$debugtmp=tmpdir($debugpackage);
		}
		# Temporary workaround: Do not build dbgsym packages for udebs as
		# dpkg-gencontrol and dpkg-deb does not agree on the file
		# extension.
		if ($dh{ENABLE_DBGSYM} and not $keep_debug and not package_is_arch_all($package) and not is_udeb($package)) {
			# Avoid creating a dbgsym that would clash with a registered
			# package or looks like a manual -dbg package.
			if (not $all_packages{"${package}-dbgsym"} and $package !~ m/-dbg(?:sym)?$/) {
				$debugtmp = dbgsym_tmpdir($package);
				$keep_debug = 1;
				$use_build_id = 2;
			}
		}
		%file_output=@shared_libs=@executables=@static_libs=();
		find({
			wanted => \&testfile,
			no_chdir => 1,
		}, $tmp);

		foreach (@shared_libs) {
			my $debug_path = make_debug($objcopy, $_, $tmp, $debugtmp, $use_build_id) if $keep_debug;
			# Note that all calls to strip on shared libs
			# *must* include the --strip-unneeded.
			doit($strip, "--remove-section=.comment", "--remove-section=.note", "--strip-unneeded", $_);
			attach_debug($objcopy, $_, $debug_path) if defined $debug_path;
		}

		foreach (@executables) {
			my $debug_path = make_debug($objcopy, $_, $tmp, $debugtmp, $use_build_id) if $keep_debug;
			doit($strip, "--remove-section=.comment", "--remove-section=.note", $_);
			attach_debug($objcopy, $_, $debug_path) if defined $debug_path;
		}

		foreach (@static_libs) {
			# NB: The short variant (-D) is broken in Jessie
			# (binutils/2.25-3)
			doit($strip, '--strip-debug', '--remove-section=.comment',
				 '--remove-section=.note', '--enable-deterministic-archives',
				  '-R', '.gnu.lto_*', '-R', '.gnu.debuglto_*',
				  '-N', '__gnu_lto_slim', '-N', '__gnu_lto_v1',
				  $_);
		}
		if (-d "$tmp/usr/lib/debug/.dwz" and ($use_build_id > 1 or ($dh{DEBUGPACKAGE} and $dh{DEBUGPACKAGE} ne $package))) {
			my @files = glob_expand(["$tmp/usr/lib/debug/.dwz"], \&glob_expand_error_handler_reject, '*');
			install_dir("$debugtmp/usr/lib/debug/.dwz");
			xargs(\@files, 'cp', '--reflink=auto', "-a", XARGS_INSERT_PARAMS_HERE, "$debugtmp/usr/lib/debug/.dwz");
			doit('rm', '-fr', "$tmp/usr/lib/debug/.dwz");
			doit('rmdir', '-p', '--ignore-fail-on-non-empty', "$tmp/usr/lib/debug");
		}

		if ($no_auto_dbgsym and $use_build_id > 1) {
			# When DEB_BUILD_OPTIONS contains noautodbgsym, remove the
			# dbgsym dir and clear the build-ids.
			#
			# Note we have to extract the dbg symbols as usual, since
			# attach_debug (objcopy --add-gnu-debuglink) requires the dbg
			# file to exist.
			doit('rm', '-fr', $debugtmp);
			@build_ids = ();
		}
		if ($use_build_id > 1 and -d $debugtmp) {
			my $dbgsym_docdir = "${debugtmp}/usr/share/doc";
			my $doc_symlink = "${dbgsym_docdir}/${package}-dbgsym";
			if ( not -l $doc_symlink and not -e _ ) {
				install_dir($dbgsym_docdir);
				make_symlink_raw_target($package, $doc_symlink);
			}
			if ($dh{MIGRATE_DBGSYM}) {
				my $path = "debian/.debhelper/${package}/dbgsym-migration";
				open(my $fd, '>', $path) or error("open $path failed: $!");
				print {$fd} "$dh{MIGRATE_DBGSYM}\n";
				close($fd) or error("close $path failed: $!");
			}
		}
		if ($use_build_id > 1 and @build_ids) {
			write_buildid_file($package, \@build_ids);
			@build_ids = ();
		}
	}
	if (@build_ids and $dh{DEBUGPACKAGE}) {
		write_buildid_file($dh{DEBUGPACKAGE}, \@build_ids);
	}
}

if ($dh{DEBUGPACKAGE}) {
	# Non-deterministic issues with --dbg-package and parallelism (see
	# #872007).  Analysis and patches welcome for this case.
	process_packages(@{$dh{DOPACKAGES}});
} else {
	on_pkgs_in_parallel(\&process_packages);
}

=head1 SEE ALSO

L<debhelper(7)>

This program is a part of debhelper.

=head1 AUTHOR

Joey Hess <joeyh@debian.org>

=cut
                                                                                                                                                       usr/bin/dh_strip_nondeterminism                                                                     0000755 0000000 0000000 00000006176 14361054711 015516  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl -w

=head1 NAME

dh_strip_nondeterminism - strip uninteresting, nondeterministic information from files

=cut

use strict;
use warnings;
use B;
use File::Find;
use Debian::Debhelper::Dh_Lib;
use File::StripNondeterminism;

=head1 SYNOPSIS

B<dh_strip_nondeterminism> [S<I<debhelper options>>] [B<-X>I<item>]

=head1 DESCRIPTION

B<dh_strip_nondeterminism> is a debhelper program that is responsible
for stripping uninteresting, nondeterministic information, such as
timestamps, from compiled files so that the build is reproducible.

This program examines your package build directories and works out what
to strip on its own. It uses L<file(1)> and filenames to figure out what
files should have nondeterminism stripped from them.  In general it
seems to make very good guesses, and will do the right thing in almost
all cases.

=head1 OPTIONS

=over 4

=item B<-X>I<item>, B<--exclude=>I<item>

Exclude files that contain I<item> anywhere in their filename from being
stripped. You may use this option multiple times to build up a list of
things to exclude.

=back

=cut

init();

my (@nondeterministic_files, %seen);

sub testfile {
	return if -l $_ or -d $_; # Skip directories and symlinks always.

	# See if we were asked to exclude this file.
	# Note that we have to test on the full filename, including directory.
	my $fn="$File::Find::dir/$_";
	foreach my $f (@{$dh{EXCLUDE}}) {
		return if ($fn=~m/\Q$f\E/);
	}

	# Deduplicate hardlinks to avoid issues under parallelism
	my ($dev, $inode, undef, $nlink) = stat($_);
	return if defined $nlink && $nlink > 1 && $seen{"$inode.$dev"};
	$seen{"$inode.$dev"} = 1;

	my $normalizer = File::StripNondeterminism::get_normalizer_for_file($_);
	return unless $normalizer;

	unless (-w $_) {
		warning("Ignoring unwritable file: $_");
		return;
	}

	push @nondeterministic_files, [$fn, $normalizer];
}

sub handler_name {
	eval {
		my $obj = B::svref_2object(shift());
		return $obj->GV->STASH->NAME;
	} || "unknown handler";
}

File::StripNondeterminism::init();

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmp=tmpdir($package);

	next if not -d $tmp;

	@nondeterministic_files=();
	find(\&testfile,$tmp);
	next unless @nondeterministic_files;

	# This has been introduced in debhelper/13.5.3 specifically for
	# strip-nondeterminism.  See https://bugs.debian.org/999665 for the
	# background of get_non_binnmu_date_epoch().
	if (eval "get_non_binnmu_date_epoch()") {
		$File::StripNondeterminism::canonical_time
		  = get_non_binnmu_date_epoch();
		$ENV{SOURCE_DATE_EPOCH} = get_non_binnmu_date_epoch()
	} else {
		$File::StripNondeterminism::canonical_time = get_source_date_epoch();
	}

	verbose_print("Using $File::StripNondeterminism::canonical_time as canonical time");

	on_items_in_parallel(\@nondeterministic_files, sub {
		foreach (@_) {
			my ($path, $normalize) = @$_;
			verbose_print("Normalizing $path using " . handler_name($normalize));
			eval { $normalize->($path) or nonquiet_print("Normalized $path"); 1; }
			  or error("$path: $@");
		}
	});
}

=head1 SEE ALSO

L<debhelper(7)>

This program is a part of debhelper.

=head1 AUTHORS

Andrew Ayer <agwa@andrewayer.name>
Chris Lamb <lamby@debian.org>

=cut
                                                                                                                                                                                                                                                                                                                                                                                                  usr/bin/dh_systemd_enable                                                                           0000755 0000000 0000000 00000021760 14354570042 014236  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl -w

=head1 NAME

dh_systemd_enable - enable/disable systemd unit files

=cut

use strict;
use warnings;
use Debian::Debhelper::Dh_Lib;
use File::Find;

our $VERSION = DH_BUILTIN_VERSION;

=head1 SYNOPSIS

B<dh_systemd_enable> [S<I<debhelper options>>] [B<--no-enable>] [B<--name=>I<name>] [S<I<unit file> ...>]

=head1 DESCRIPTION

B<dh_systemd_enable> is a debhelper program that is responsible for enabling
and disabling systemd unit files.

In the simple case, it finds all unit files installed by a package (e.g.
bacula-fd.service) and enables them. It is not necessary that the machine
actually runs systemd during package installation time, enabling happens on all
machines in order to be able to switch from sysvinit to systemd and back.

In the complex case, you can call B<dh_systemd_enable> and B<dh_systemd_start>
manually (by overwriting the debian/rules targets) and specify flags per unit
file. An example is colord, which ships colord.service, a dbus-activated
service without an [Install] section. This service file cannot be enabled or
disabled (a state called "static" by systemd) because it has no
[Install] section. Therefore, running dh_systemd_enable does not make sense.

For only generating blocks for specific service files, you need to pass them as
arguments, e.g. B<dh_systemd_enable quota.service> and B<dh_systemd_enable
--name=quotarpc quotarpc.service>.

=head1 FILES

=over 4

=item debian/I<package>.service, debian/I<package>@.service

If this exists, it is installed into F<<  lib/systemd/system/I<package>.service >> (or
F<< lib/systemd/system/I<package>@.service >>) in the package build directory.

=item debian/I<package>.tmpfile

If this exists, it is installed into usr/lib/tmpfiles.d/I<package>.conf in the
package build directory.

=item debian/I<package>.target, debian/I<package>@.target

If this exists, it is installed into F<< lib/systemd/system/I<package>.target >> (or
F<< lib/systemd/system/I<package>@.target >>) in the package build directory.

=item debian/I<package>.socket, debian/I<package>@.socket

If this exists, it is installed into F<< lib/systemd/system/I<package>.socket >> (or
F<< lib/systemd/system/I<package>@.socket >>) in the package build directory.

=item debian/I<package>.mount

If this exists, it is installed into F<< lib/systemd/system/I<package>.mount >>
in the package build directory.

=item debian/I<package>.path, debian/I<package>@.path

If this exists, it is installed into F<< lib/systemd/system/I<package>.path >> (or
F<< lib/systemd/system/I<package>@.path >>) in the package build directory.

=item debian/I<package>.timer, debian/I<package>@.timer

If this exists, it is installed into F<< lib/systemd/system/I<package>.timer >> (or
F<< lib/systemd/system/I<package>@.timer >>) in the package build directory.

=back

=head1 OPTIONS

=over 4

=item B<--no-enable>

Disable the service(s) on purge, but do not enable them on install.

B<Note> that this option does not affect whether the services are
started.  That is controlled by L<dh_systemd_start(1)> (using e.g. its
B<--no-start> option).

=item B<--name=>I<name>

Install the service file as I<name.service> instead of the default filename,
which is the I<package.service>. When this parameter is used,
B<dh_systemd_enable> looks for and installs files named
F<debian/package.name.service> instead of the usual F<debian/package.service>.

=back

=head1 NOTES

Note that this command is not idempotent. L<dh_prep(1)> should be called
between invocations of this command (with the same arguments). Otherwise, it
may cause multiple instances of the same text to be added to maintainer
scripts.

Note that B<dh_systemd_enable> should be run before B<dh_installinit>.
The default sequence in B<dh> does the right thing, this note is only relevant
when you are calling B<dh_systemd_enable> manually.

=cut

if (not compat(10)) {
	error("dh_systemd_enable is no longer used in compat >= 11, please use dh_installsystemd instead");
}

init(options => {
	"no-enable" => \$dh{NO_ENABLE},
});

sub contains_install_section {
	my ($unit_path) = @_;
	open(my $fh, '<', $unit_path) or error("Cannot open($unit_path) to check for [Install]: $!");
	while (my $line = <$fh>) {
		chomp($line);
		return 1 if $line =~ /^\s*\[Install\]$/i;
	}
	close($fh);
	return 0;
}

sub install_unit {
	my ($package, $script, $pkgsuffix, $path, $installsuffix) = @_;
	$installsuffix = $installsuffix || $pkgsuffix;
	my $unit = pkgfile($package, $pkgsuffix);
	return if $unit eq '';
	install_dir($path);
	install_file($unit, "${path}/${script}.${installsuffix}");
}

# PROMISE: DH NOOP WITHOUT tmp(lib/systemd/system) mount path service socket target tmpfile timer

my %requested_files = map { basename($_) => 1 } @ARGV;
my %installed_files;

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmpdir = tmpdir($package);
	my @installed_units;
	my @units;

	# XXX: This is duplicated in dh_installinit, which is unfortunate.
	# We do need the service files before running dh_installinit though,
	# every other solution makes things much worse for all the maintainers.

	# Figure out what filename to install it as.
	my $script;
	my $jobfile=$package;
	if (defined $dh{NAME}) {
		$jobfile=$script=$dh{NAME};
	}
	elsif ($dh{D_FLAG}) {
		# -d on the command line sets D_FLAG. We will
		# remove a trailing 'd' from the package name and
		# use that as the name.
		$script=$package;
		if ($script=~m/(.*)d$/) {
			$jobfile=$script=$1;
		}
		else {
			warning("\"$package\" has no final d' in its name, but -d was specified.");
		}
	}
	elsif ($dh{INIT_SCRIPT}) {
		$script=$dh{INIT_SCRIPT};
	}
	else {
		$script=$package;
	}

	for my $service_type (qw(service target socket path timer)) {
		install_unit($package, $script, $service_type, "$tmpdir/lib/systemd/system");
		install_unit("${package}@", "${script}@", $service_type, "$tmpdir/lib/systemd/system");
	}

	install_unit($package, $script, 'mount', "$tmpdir/lib/systemd/system");
	install_unit($package, $script, 'tmpfile', "$tmpdir/usr/lib/tmpfiles.d", 'conf');

	find({
		wanted => sub {
			my $name = $File::Find::name;
			return unless -f $name;
			# Skip symbolic links, their only legitimate use is for
			# adding an alias, e.g. linking smartmontools.service
			# -> smartd.service.
			return if -l $name;
			return unless $name =~ m,^$tmpdir/lib/systemd/system/[^/]+$,;
			push @installed_units, $name;
		},
		no_chdir => 1,
	}, "${tmpdir}/lib/systemd/system") if -d "${tmpdir}/lib/systemd/system";

	# Handle either only the unit files which were passed as arguments or
	# all unit files that are installed in this package.
	my @args = @ARGV > 0 ? @ARGV : @installed_units;

	# support excluding units via -X
	foreach my $x (@{$dh{EXCLUDE}}) {
		@args = grep !/(^|\/)$x$/, @args;
	}

	for my $name (@args) {
		my $base = basename($name);
		# Try to make the path absolute, so that the user can call
		# dh_installsystemd bacula-fd.service
		if ($base eq $name) {
			# NB: This works because @installed_units contains
			# files from precisely one directory.
			my ($full) = grep { basename($_) eq $base } @installed_units;
			if (defined($full)) {
				$name = $full;
			} elsif (not exists($requested_files{$base})) {
				warning(qq|Could not find "$name" in the /lib/systemd/system directory of $package. | .
					qq|This could be a typo, or using Also= with a service file from another package. | .
					qq|Please check carefully that this message is harmless.|);
			} else {
				# Ignore an explicitly requested file that is missing; happens when we are acting on
				# multiple packages and only a subset of them have the unit file.
				next;
			}
		}

		$installed_files{$base} = 1 if exists($requested_files{$base});

		# Skip template service files like e.g. getty@.service.
		# Enabling, disabling, starting or stopping those services
		# without specifying the instance (e.g. getty@ttyS0.service) is
		# not useful.
		if ($name =~ /\@/) {
			next;
		}

		# Skip unit files that don’t have an [Install] section.
		next unless contains_install_section($name);

		push @units, $name;
	}

	next if @units == 0;

	# Wrap the basenames in '' to preserve \x2d when the shell parses the
	# name.  (#764730)
	my $unitargs = join(' ', sort map { q{'} . basename($_) . q{'}  } @units);
	for my $unit (sort @units) {
		# Wrap the basenames in '' to preserve \x2d when the shell parses the
		# name.  (#764730)
		my $base = q{'} . basename($unit) . q{'};
		if ($dh{NO_ENABLE}) {
			autoscript($package, 'postinst', 'postinst-systemd-dont-enable', { 'UNITFILE' => $base });
		} else {
			autoscript($package, 'postinst', 'postinst-systemd-enable', { 'UNITFILE' => $base });
		}
	}
	autoscript($package, 'postrm', 'postrm-systemd', {'UNITFILES' => $unitargs });
}

if (%requested_files) {
	my $any_missing = 0;
	for my $name (sort(keys(%requested_files))) {
		if (not exists($installed_files{$name})) {
			warning(qq{Requested unit "$name" but it was not found in any package acted on.});
			$any_missing = 1;
		}
	}
	error("Could not handle all of the requested services") if $any_missing;
}

=head1 SEE ALSO

L<dh_systemd_start(1)>, L<debhelper(7)>

=head1 AUTHORS

pkg-systemd-maintainers@lists.alioth.debian.org

=cut
                usr/bin/dh_systemd_start                                                                            0000755 0000000 0000000 00000021107 14354570042 014140  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl -w

=head1 NAME

dh_systemd_start - start/stop/restart systemd unit files

=cut

use strict;
use warnings;
use Debian::Debhelper::Dh_Lib;
use File::Find;
use Cwd qw(getcwd abs_path);

our $VERSION = DH_BUILTIN_VERSION;

=head1 SYNOPSIS

B<dh_systemd_start> [S<I<debhelper options>>] [B<--restart-after-upgrade>] [B<--no-stop-on-upgrade>] [S<I<unit file> ...>]

=head1 DESCRIPTION

B<dh_systemd_start> is a debhelper program that is responsible for
starting/stopping or restarting systemd unit files in case no corresponding
sysv init script is available.

As with B<dh_installinit>, the unit file is stopped before
upgrades and started afterwards (unless B<--restart-after-upgrade> is
specified, in which case it will only be restarted after the upgrade).
This logic is not used when there is a corresponding SysV init script
because invoke-rc.d performs the stop/start/restart in that case.

=head1 OPTIONS

=over 4

=item B<--restart-after-upgrade>

Do not stop the unit file until after the package upgrade has been completed.
This is the default behaviour in compat 10.

In earlier compat levels the default was to stop the unit file in the
F<prerm>, and start it again in the F<postinst>.

This can be useful for daemons that should not have a possibly long
downtime during upgrade. But you should make sure that the daemon will not
get confused by the package being upgraded while it's running before using
this option.

=item B<--no-restart-after-upgrade>

Undo a previous B<--restart-after-upgrade> (or the default of compat
10).  If no other options are given, this will cause the service to be
stopped in the F<prerm> script and started again in the F<postinst>
script.

=item B<-r>, B<--no-stop-on-upgrade>, B<--no-restart-on-upgrade>

Do not stop service on upgrade.

=item B<--no-start>

Do not start the unit file after upgrades and after initial installation (the
latter is only relevant for services without a corresponding init script).

=back

=head1 NOTES

Note that this command is not idempotent. L<dh_prep(1)> should be called
between invocations of this command (with the same arguments). Otherwise, it
may cause multiple instances of the same text to be added to maintainer
scripts.

Note that B<dh_systemd_start> should be run after B<dh_installinit> so that it
can detect corresponding SysV init scripts. The default sequence in B<dh> does
the right thing, this note is only relevant when you are calling
B<dh_systemd_start> manually.

=cut

if (not compat(10)) {
	error("dh_systemd_start is no longer used in compat >= 11, please use dh_installsystemd instead");
}

$dh{RESTART_AFTER_UPGRADE} = 1 if not compat(9);

init(options => {
	"r" => \$dh{R_FLAG},
	'no-stop-on-upgrade' => \$dh{R_FLAG},
	"no-restart-on-upgrade" => \$dh{R_FLAG},
	"no-start" => \$dh{NO_START},
	"R|restart-after-upgrade!" => \$dh{RESTART_AFTER_UPGRADE},
	"no-also" => \$dh{NO_ALSO},
});

# Extracts the Also= or Alias= line(s) from a unit file.
# In case this produces horribly wrong results, you can pass --no-also, but
# that should really not be necessary. Please report bugs to
# pkg-systemd-maintainers.
sub extract_key {
	my ($unit_path, $key) = @_;
	my @values;

	return if $dh{NO_ALSO};

	open(my $fh, '<', $unit_path) or error("Cannot open($unit_path) for extracting the Also= line(s): $!");

	while (my $line = <$fh>) {
		chomp($line);

		# The keys parsed from the unit file below can only have
		# unit names as values. Since unit names can't have
		# whitespace in systemd, simply use split and strip any
		# leading/trailing quotes. See systemd-escape(1) for
		# examples of valid unit names.
		if ($line =~ /^\s*$key=(.+)$/i) {
			for my $value (split(/\s+/, $1)) {
				$value =~ s/^(["'])(.*)\g1$/$2/;
				push @values, $value;
			}
		}
	}
	close($fh);
	return @values;
}


# PROMISE: DH NOOP WITHOUT tmp(lib/systemd/system)

my %requested_files = map { basename($_) => 1 } @ARGV;
my %installed_files;

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmpdir = tmpdir($package);
	my @installed_units;
	my @units;
	my %aliases;

	my $oldcwd = getcwd();
	find({
		wanted => sub {
			my $name = $File::Find::name;
			return unless -f;
			return unless $name =~ m,^\Q${tmpdir}\E/lib/systemd/system/[^/]+$,;
			if (-l) {
				my $target = abs_path(readlink());
				$target =~ s,^\Q${oldcwd}\E/,,g;
				$aliases{$target} = [ $_ ];
			} else {
				push @installed_units, $name;
			}
		},
	}, "${tmpdir}/lib/systemd/system") if -d "${tmpdir}/lib/systemd/system";
	chdir($oldcwd);

	# Handle either only the unit files which were passed as arguments or
	# all unit files that are installed in this package.
	my @args = @ARGV > 0 ? @ARGV : @installed_units;

	# support excluding units via -X
	foreach my $x (@{$dh{EXCLUDE}}) {
		@args = grep !/(^|\/)$x$/, @args;
	}

	# This hash prevents us from looping forever in the following while loop.
	# An actual real-world example of such a loop is systemd’s
	# systemd-readahead-drop.service, which contains
	# Also=systemd-readahead-collect.service, and that file in turn
	# contains Also=systemd-readahead-drop.service, thus forming an endless
	# loop.
	my %seen;

	# We use while/shift because we push to the list in the body.
	while (@args) {
		my $name = shift @args;
		my $base = basename($name);

		# Try to make the path absolute, so that the user can call
		# dh_installsystemd bacula-fd.service
		if ($base eq $name) {
			# NB: This works because @installed_units contains
			# files from precisely one directory.
			my ($full) = grep { basename($_) eq $base } @installed_units;
			if (defined($full)) {
				$name = $full;
			} elsif (not exists($requested_files{$base})) {
				warning(qq|Could not find "$name" in the /lib/systemd/system directory of $package. | .
					qq|This could be a typo, or using Also= with a service file from another package. | .
					qq|Please check carefully that this message is harmless.|);
			} else {
				# Ignore an explicitly requested file that is missing; happens when we are acting on
				# multiple packages and only a subset of them have the unit file.
				next;
			}
		}

		$installed_files{$base} = 1 if exists($requested_files{$base});

		# Skip template service files like e.g. getty@.service.
		# Enabling, disabling, starting or stopping those services
		# without specifying the instance (e.g. getty@ttyS0.service) is
		# not useful.
		if ($name =~ /\@/) {
			next;
		}

		# Handle all unit files specified via Also= explicitly.
		# This is not necessary for enabling, but for disabling, as we
		# cannot read the unit file when disabling (it was already
		# deleted).
		my @also = grep { !exists($seen{$_}) } extract_key($name, 'Also');
		$seen{$_} = 1 for @also;
		@args = (@args, @also);

		push @{$aliases{$name}}, $_ for extract_key($name, 'Alias');
		my @sysv = grep {
				my $base = $_;
				$base =~ s/\.(?:mount|service|socket|target|path)$//g;
				-f "$tmpdir/etc/init.d/$base"
			} ($base, @{$aliases{$name}});
		if (@sysv == 0 && !grep { $_ eq $name } @units) {
			push @units, $name;
		}
	}

	next if @units == 0;

	# Wrap the basenames in '' to preserve \x2d when the shell parses the
	# name.  (#764730)
	my $unitargs = join(' ', sort map { q{'} . basename($_) . q{'} } @units);
	# The $package and $sed parameters are always the same.
	# This wrapper function makes the following logic easier to read.
	my $sd_autoscript = sub {
		my ($script, $filename, $restart_action) = @_;
		my $replace = {
			'UNITFILES' => $unitargs,
			'RESTART_ACTION' => $restart_action // '',
		};
		autoscript($package, $script, $filename, $replace);
	};

	if ($dh{RESTART_AFTER_UPGRADE}) {
		my ($snippet, $restart_action);
		if ($dh{NO_START}) {
			$snippet = 'postinst-systemd-restartnostart';
			$restart_action = 'try-restart';
		} else {
			$snippet = 'postinst-systemd-restart';
			$restart_action = 'restart';
		}
		$sd_autoscript->("postinst", $snippet, $restart_action);
	} elsif (!$dh{NO_START}) {
		# We need to stop/start before/after the upgrade.
		$sd_autoscript->("postinst", "postinst-systemd-start");
	}

	$sd_autoscript->("postrm", "postrm-systemd-reload-only");

	if ($dh{R_FLAG} || $dh{RESTART_AFTER_UPGRADE}) {
		# stop service only on remove
		$sd_autoscript->("prerm", "prerm-systemd-restart");
	} elsif (!$dh{NO_START}) {
		# always stop service
		$sd_autoscript->("prerm", "prerm-systemd");
	}
}

if (%requested_files) {
	my $any_missing = 0;
	for my $name (sort(keys(%requested_files))) {
		if (not exists($installed_files{$name})) {
			warning(qq{Requested unit "$name" but it was not found in any package acted on.});
			$any_missing = 1;
		}
	}
	error("Could not handle all of the requested services") if $any_missing;
}

=head1 SEE ALSO

L<debhelper(7)>

=head1 AUTHORS

pkg-systemd-maintainers@lists.alioth.debian.org

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/bin/dh_testdir                                                                                  0000755 0000000 0000000 00000002471 14354570042 012714  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl

