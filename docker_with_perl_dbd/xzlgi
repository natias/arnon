=item !! cmd
X<debugger command, !!>

Run cmd in a subprocess (reads from DB::IN, writes to DB::OUT) See
S<C<o shellBang>>, also.  Note that the user's current shell (well,
their C<$ENV{SHELL}> variable) will be used, which can interfere
with proper interpretation of exit status or signal and coredump
information.

=item source file
X<debugger command, source>

Read and execute debugger commands from I<file>.
I<file> may itself contain C<source> commands.

=item H -number
X<debugger command, H>

Display last n commands.  Only commands longer than one character are
listed.  If I<number> is omitted, list them all.

=item q or ^D
X<debugger command, q>
X<debugger command, ^D>

Quit.  ("quit" doesn't work for this, unless you've made an alias)
This is the only supported way to exit the debugger, though typing
C<exit> twice might work.

Set the C<inhibit_exit> option to 0 if you want to be able to step
off the end the script.  You may also need to set $finished to 0
if you want to step through global destruction.

=item R
X<debugger command, R>

Restart the debugger by C<exec()>ing a new session.  We try to maintain
your history across this, but internal settings and command-line options
may be lost.

The following setting are currently preserved: history, breakpoints,
actions, debugger options, and the Perl command-line
options B<-w>, B<-I>, and B<-e>.

=item |dbcmd
X<debugger command, |>

Run the debugger command, piping DB::OUT into your current pager.

=item ||dbcmd
X<debugger command, ||>

Same as C<|dbcmd> but DB::OUT is temporarily C<select>ed as well.

=item = [alias value]
X<debugger command, =>

Define a command alias, like

    = quit q

or list current aliases.

=item command

Execute command as a Perl statement.  A trailing semicolon will be
supplied.  If the Perl statement would otherwise be confused for a
Perl debugger, use a leading semicolon, too.

=item m expr
X<debugger command, m>

List which methods may be called on the result of the evaluated
expression.  The expression may evaluated to a reference to a
blessed object, or to a package name.

=item M
X<debugger command, M>

Display all loaded modules and their versions.

=item man [manpage]
X<debugger command, man>

Despite its name, this calls your system's default documentation
viewer on the given page, or on the viewer itself if I<manpage> is
omitted.  If that viewer is B<man>, the current C<Config> information
is used to invoke B<man> using the proper MANPATH or S<B<-M>
I<manpath>> option.  Failed lookups of the form C<XXX> that match
known manpages of the form I<perlXXX> will be retried.  This lets
you type C<man debug> or C<man op> from the debugger.

On systems traditionally bereft of a usable B<man> command, the
debugger invokes B<perldoc>.  Occasionally this determination is
incorrect due to recalcitrant vendors or rather more felicitously,
to enterprising users.  If you fall into either category, just
manually set the $DB::doccmd variable to whatever viewer to view
the Perl documentation on your system.  This may be set in an rc
file, or through direct assignment.  We're still waiting for a
working example of something along the lines of:

    $DB::doccmd = 'netscape -remote http://something.here/';

=back

=head2 Configurable Options

The debugger has numerous options settable using the C<o> command,
either interactively or from the environment or an rc file. The file
is named F<./.perldb> or F<~/.perldb> under Unix with F</dev/tty>,
F<perldb.ini> otherwise.

=over 12

=item C<recallCommand>, C<ShellBang>
X<debugger option, recallCommand>
X<debugger option, ShellBang>

The characters used to recall a command or spawn a shell.  By
default, both are set to C<!>, which is unfortunate.

=item C<pager>
X<debugger option, pager>

Program to use for output of pager-piped commands (those beginning
with a C<|> character.)  By default, C<$ENV{PAGER}> will be used.
Because the debugger uses your current terminal characteristics
for bold and underlining, if the chosen pager does not pass escape
sequences through unchanged, the output of some debugger commands
will not be readable when sent through the pager.

=item C<tkRunning>
X<debugger option, tkRunning>

Run Tk while prompting (with ReadLine).

=item C<signalLevel>, C<warnLevel>, C<dieLevel>
X<debugger option, signalLevel> X<debugger option, warnLevel>
X<debugger option, dieLevel>

Level of verbosity.  By default, the debugger leaves your exceptions
and warnings alone, because altering them can break correctly running
programs.  It will attempt to print a message when uncaught INT, BUS, or
SEGV signals arrive.  (But see the mention of signals in L</BUGS> below.)

To disable this default safe mode, set these values to something higher
than 0.  At a level of 1, you get backtraces upon receiving any kind
of warning (this is often annoying) or exception (this is
often valuable).  Unfortunately, the debugger cannot discern fatal
exceptions from non-fatal ones.  If C<dieLevel> is even 1, then your
non-fatal exceptions are also traced and unceremoniously altered if they
came from C<eval'ed> strings or from any kind of C<eval> within modules
you're attempting to load.  If C<dieLevel> is 2, the debugger doesn't
care where they came from:  It usurps your exception handler and prints
out a trace, then modifies all exceptions with its own embellishments.
This may perhaps be useful for some tracing purposes, but tends to hopelessly
destroy any program that takes its exception handling seriously.

=item C<AutoTrace>
X<debugger option, AutoTrace>

Trace mode (similar to C<t> command, but can be put into
C<PERLDB_OPTS>).

=item C<LineInfo>
X<debugger option, LineInfo>

File or pipe to print line number info to.  If it is a pipe (say,
C<|visual_perl_db>), then a short message is used.  This is the
mechanism used to interact with a client editor or visual debugger,
such as the special C<vi> or C<emacs> hooks, or the C<ddd> graphical
debugger.

=item C<inhibit_exit>
X<debugger option, inhibit_exit>

If 0, allows I<stepping off> the end of the script.

=item C<PrintRet>
X<debugger option, PrintRet>

Print return value after C<r> command if set (default).

=item C<ornaments>
X<debugger option, ornaments>

Affects screen appearance of the command line (see L<Term::ReadLine>).
There is currently no way to disable these, which can render
some output illegible on some displays, or with some pagers.
This is considered a bug.

=item C<frame>
X<debugger option, frame>

Affects the printing of messages upon entry and exit from subroutines.  If
C<frame & 2> is false, messages are printed on entry only. (Printing
on exit might be useful if interspersed with other messages.)

If C<frame & 4>, arguments to functions are printed, plus context
and caller info.  If C<frame & 8>, overloaded C<stringify> and
C<tie>d C<FETCH> is enabled on the printed arguments.  If C<frame
& 16>, the return value from the subroutine is printed.

The length at which the argument list is truncated is governed by the
next option:

=item C<maxTraceLen>
X<debugger option, maxTraceLen>

Length to truncate the argument list when the C<frame> option's
bit 4 is set.

=item C<windowSize>
X<debugger option, windowSize>

Change the size of code list window (default is 10 lines).

=back

The following options affect what happens with C<V>, C<X>, and C<x>
commands:

=over 12

=item C<arrayDepth>, C<hashDepth>
X<debugger option, arrayDepth> X<debugger option, hashDepth>

Print only first N elements ('' for all).

=item C<dumpDepth>
X<debugger option, dumpDepth>

Limit recursion depth to N levels when dumping structures.
Negative values are interpreted as infinity.  Default: infinity.

=item C<compactDump>, C<veryCompact>
X<debugger option, compactDump> X<debugger option, veryCompact>

Change the style of array and hash output.  If C<compactDump>, short array
may be printed on one line.

=item C<globPrint>
X<debugger option, globPrint>

Whether to print contents of globs.

=item C<DumpDBFiles>
X<debugger option, DumpDBFiles>

Dump arrays holding debugged files.

=item C<DumpPackages>
X<debugger option, DumpPackages>

Dump symbol tables of packages.

=item C<DumpReused>
X<debugger option, DumpReused>

Dump contents of "reused" addresses.

=item C<quote>, C<HighBit>, C<undefPrint>
X<debugger option, quote> X<debugger option, HighBit>
X<debugger option, undefPrint>

Change the style of string dump.  The default value for C<quote>
is C<auto>; one can enable double-quotish or single-quotish format
by setting it to C<"> or C<'>, respectively.  By default, characters
with their high bit set are printed verbatim.

=item C<UsageOnly>
X<debugger option, UsageOnly>

Rudimentary per-package memory usage dump.  Calculates total
size of strings found in variables in the package.  This does not
include lexicals in a module's file scope, or lost in closures.

=item C<HistFile>
X<debugger option, history, HistFile>

The path of the file from which the history (assuming a usable
L<Term::ReadLine> backend) will be read on the debugger's startup, and to which
it will be saved on shutdown (for persistence across sessions). Similar in
concept to Bash's C<.bash_history> file.

=item C<HistSize>
X<debugger option, history, HistSize>

The count of the saved lines in the history (assuming C<HistFile> above).

=back

After the rc file is read, the debugger reads the C<$ENV{PERLDB_OPTS}>
environment variable and parses this as the remainder of a "O ..."
line as one might enter at the debugger prompt.  You may place the
initialization options C<TTY>, C<noTTY>, C<ReadLine>, and C<NonStop>
there.

If your rc file contains:

  parse_options("NonStop=1 LineInfo=db.out AutoTrace");

then your script will run without human intervention, putting trace
information into the file I<db.out>.  (If you interrupt it, you'd
better reset C<LineInfo> to F</dev/tty> if you expect to see anything.)

=over 12

=item C<TTY>
X<debugger option, TTY>

The TTY to use for debugging I/O.

=item C<noTTY>
X<debugger option, noTTY>

If set, the debugger goes into C<NonStop> mode and will not connect to a TTY.  If
interrupted (or if control goes to the debugger via explicit setting of
$DB::signal or $DB::single from the Perl script), it connects to a TTY
specified in the C<TTY> option at startup, or to a tty found at
runtime using the C<Term::Rendezvous> module of your choice.

This module should implement a method named C<new> that returns an object
with two methods: C<IN> and C<OUT>.  These should return filehandles to use
for debugging input and output correspondingly.  The C<new> method should
inspect an argument containing the value of C<$ENV{PERLDB_NOTTY}> at
startup, or C<"$ENV{HOME}/.perldbtty$$"> otherwise.  This file is not
inspected for proper ownership, so security hazards are theoretically
possible.

=item C<ReadLine>
X<debugger option, ReadLine>

If false, readline support in the debugger is disabled in order
to debug applications that themselves use ReadLine.

=item C<NonStop>
X<debugger option, NonStop>

If set, the debugger goes into non-interactive mode until interrupted, or
programmatically by setting $DB::signal or $DB::single.

=back

Here's an example of using the C<$ENV{PERLDB_OPTS}> variable:

    $ PERLDB_OPTS="NonStop frame=2" perl -d myprogram

That will run the script B<myprogram> without human intervention,
printing out the call tree with entry and exit points.  Note that
C<NonStop=1 frame=2> is equivalent to C<N f=2>, and that originally,
options could be uniquely abbreviated by the first letter (modulo
the C<Dump*> options).  It is nevertheless recommended that you
always spell them out in full for legibility and future compatibility.

Other examples include

    $ PERLDB_OPTS="NonStop LineInfo=listing frame=2" perl -d myprogram

which runs script non-interactively, printing info on each entry
into a subroutine and each executed line into the file named F<listing>.
(If you interrupt it, you would better reset C<LineInfo> to something
"interactive"!)

Other examples include (using standard shell syntax to show environment
variable settings):

  $ ( PERLDB_OPTS="NonStop frame=1 AutoTrace LineInfo=tperl.out"
      perl -d myprogram )

which may be useful for debugging a program that uses L<Term::ReadLine>
itself.  Do not forget to detach your shell from the TTY in the window that
corresponds to F</dev/ttyXX>, say, by issuing a command like

  $ sleep 1000000

See L<perldebguts/"Debugger Internals"> for details.

=head2 Debugger Input/Output

=over 8

=item Prompt

The debugger prompt is something like

    DB<8>

or even

    DB<<17>>

where that number is the command number, and which you'd use to
access with the built-in B<csh>-like history mechanism.  For example,
C<!17> would repeat command number 17.  The depth of the angle
brackets indicates the nesting depth of the debugger.  You could
get more than one set of brackets, for example, if you'd already
at a breakpoint and then printed the result of a function call that
itself has a breakpoint, or you step into an expression via C<s/n/t
expression> command.

=item Multiline commands

If you want to enter a multi-line command, such as a subroutine
definition with several statements or a format, escape the newline
that would normally end the debugger command with a backslash.
Here's an example:

      DB<1> for (1..4) {         \
      cont:     print "ok\n";   \
      cont: }
      ok
      ok
      ok
      ok

Note that this business of escaping a newline is specific to interactive
commands typed into the debugger.

=item Stack backtrace
X<backtrace> X<stack, backtrace>

Here's an example of what a stack backtrace via C<T> command might
look like:

 $ = main::infested called from file 'Ambulation.pm' line 10
 @ = Ambulation::legs(1, 2, 3, 4) called from file 'camel_flea'
                                                          line 7
 $ = main::pests('bactrian', 4) called from file 'camel_flea'
                                                          line 4

The left-hand character up there indicates the context in which the
function was called, with C<$> and C<@> meaning scalar or list
contexts respectively, and C<.> meaning void context (which is
actually a sort of scalar context).  The display above says
that you were in the function C<main::infested> when you ran the
stack dump, and that it was called in scalar context from line
10 of the file I<Ambulation.pm>, but without any arguments at all,
meaning it was called as C<&infested>.  The next stack frame shows
that the function C<Ambulation::legs> was called in list context
from the I<camel_flea> file with four arguments.  The last stack
frame shows that C<main::pests> was called in scalar context,
also from I<camel_flea>, but from line 4.

If you execute the C<T> command from inside an active C<use>
statement, the backtrace will contain both a C<require> frame and
an C<eval> frame.

=item Line Listing Format

This shows the sorts of output the C<l> command can produce:

   DB<<13>> l
 101:        @i{@i} = ();
 102:b       @isa{@i,$pack} = ()
 103             if(exists $i{$prevpack} || exists $isa{$pack});
 104     }
 105
 106     next
 107==>      if(exists $isa{$pack});
 108
 109:a   if ($extra-- > 0) {
 110:        %isa = ($pack,1);

Breakable lines are marked with C<:>.  Lines with breakpoints are
marked by C<b> and those with actions by C<a>.  The line that's
about to be executed is marked by C<< ==> >>.

Please be aware that code in debugger listings may not look the same
as your original source code.  Line directives and external source
filters can alter the code before Perl sees it, causing code to move
from its original positions or take on entirely different forms.

=item Frame listing

When the C<frame> option is set, the debugger would print entered (and
optionally exited) subroutines in different styles.  See L<perldebguts>
for incredibly long examples of these.

=back

=head2 Debugging Compile-Time Statements

If you have compile-time executable statements (such as code within
BEGIN, UNITCHECK and CHECK blocks or C<use> statements), these will
I<not> be stopped by debugger, although C<require>s and INIT blocks
will, and compile-time statements can be traced with the C<AutoTrace>
option set in C<PERLDB_OPTS>).  From your own Perl code, however, you
can transfer control back to the debugger using the following
statement, which is harmless if the debugger is not running:

    $DB::single = 1;

If you set C<$DB::single> to 2, it's equivalent to having
just typed the C<n> command, whereas a value of 1 means the C<s>
command.  The C<$DB::trace>  variable should be set to 1 to simulate
having typed the C<t> command.

Another way to debug compile-time code is to start the debugger, set a
breakpoint on the I<load> of some module:

    DB<7> b load f:/perllib/lib/Carp.pm
  Will stop on load of 'f:/perllib/lib/Carp.pm'.

and then restart the debugger using the C<R> command (if possible).  One can use C<b
compile subname> for the same purpose.

=head2 Debugger Customization

The debugger probably contains enough configuration hooks that you
won't ever have to modify it yourself.  You may change the behaviour
of the debugger from within the debugger using its C<o> command, from
the command line via the C<PERLDB_OPTS> environment variable, and
from customization files.

You can do some customization by setting up a F<.perldb> file, which
contains initialization code.  For instance, you could make aliases
like these (the last one is one people expect to be there):

    $DB::alias{'len'}  = 's/^len(.*)/p length($1)/';
    $DB::alias{'stop'} = 's/^stop (at|in)/b/';
    $DB::alias{'ps'}   = 's/^ps\b/p scalar /';
    $DB::alias{'quit'} = 's/^quit(\s*)/exit/';

You can change options from F<.perldb> by using calls like this one;

    parse_options("NonStop=1 LineInfo=db.out AutoTrace=1 frame=2");

The code is executed in the package C<DB>.  Note that F<.perldb> is
processed before processing C<PERLDB_OPTS>.  If F<.perldb> defines the
subroutine C<afterinit>, that function is called after debugger
initialization ends.  F<.perldb> may be contained in the current
directory, or in the home directory.  Because this file is sourced
in by Perl and may contain arbitrary commands, for security reasons,
it must be owned by the superuser or the current user, and writable
by no one but its owner.

You can mock TTY input to debugger by adding arbitrary commands to
@DB::typeahead. For example, your F<.perldb> file might contain:

    sub afterinit { push @DB::typeahead, "b 4", "b 6"; }

Which would attempt to set breakpoints on lines 4 and 6 immediately
after debugger initialization. Note that @DB::typeahead is not a supported
interface and is subject to change in future releases.

If you want to modify the debugger, copy F<perl5db.pl> from the
Perl library to another name and hack it to your heart's content.
You'll then want to set your C<PERL5DB> environment variable to say
something like this:

    BEGIN { require "myperl5db.pl" }

As a last resort, you could also use C<PERL5DB> to customize the debugger
by directly setting internal variables or calling debugger functions.

Note that any variables and functions that are not documented in
this document (or in L<perldebguts>) are considered for internal
use only, and as such are subject to change without notice.

=head2 Readline Support / History in the Debugger

As shipped, the only command-line history supplied is a simplistic one
that checks for leading exclamation points.  However, if you install
the L<Term::ReadKey> and one of the C<Term::ReadLine::*> modules from CPAN (such as
L<Term::ReadLine::Gnu>, L<Term::ReadLine::Perl>, ...) you will
have full editing capabilities much like those GNU I<readline>(3) provides.
Look for these in the F<modules/by-module/Term> directory on CPAN.
These do not support normal B<vi> command-line editing, however.

A rudimentary command-line completion is also available, including
lexical variables in the current scope if the L<PadWalker> module
is installed.

Without Readline support you may see the symbols "^[[A", "^[[C", "^[[B",
"^[[D"", "^H", ... when using the arrow keys and/or the backspace key.

=head2 Editor Support for Debugging

If you have the GNU's version of B<emacs> installed on your system,
it can interact with the Perl debugger to provide an integrated
software development environment reminiscent of its interactions
with C debuggers.

Recent versions of Emacs come with a
start file for making B<emacs> act like a
syntax-directed editor that understands (some of) Perl's syntax.
See L<perlfaq3>.

Users of B<vi> should also look into B<vim> and B<gvim>, the mousey
and windy version, for coloring of Perl keywords.

Note that only perl can truly parse Perl, so all such CASE tools
fall somewhat short of the mark, especially if you don't program
your Perl as a C programmer might.

=head2 The Perl Profiler
X<profile> X<profiling> X<profiler>

If you wish to supply an alternative debugger for Perl to run,
invoke your script with a colon and a package argument given to the
B<-d> flag.  Perl's alternative debuggers include a Perl profiler,
L<Devel::NYTProf>, which is available separately as a CPAN
distribution.  To profile your Perl program in the file F<mycode.pl>,
just type:

    $ perl -d:NYTProf mycode.pl

When the script terminates the profiler will create a database of the
profile information that you can turn into reports using the profiler's
tools. See <perlperf> for details.

=head1 Debugging Regular Expressions
X<regular expression, debugging>
X<regex, debugging> X<regexp, debugging>

C<use re 'debug'> enables you to see the gory details of how the Perl
regular expression engine works. In order to understand this typically
voluminous output, one must not only have some idea about how regular
expression matching works in general, but also know how Perl's regular
expressions are internally compiled into an automaton. These matters
are explored in some detail in
L<perldebguts/"Debugging Regular Expressions">.

=head1 Debugging Memory Usage
X<memory usage>

Perl contains internal support for reporting its own memory usage,
but this is a fairly advanced concept that requires some understanding
of how memory allocation works.
See L<perldebguts/"Debugging Perl Memory Usage"> for the details.

=head1 SEE ALSO

You do have C<use strict> and C<use warnings> enabled, don't you?

L<perldebtut>,
L<perldebguts>,
L<perl5db.pl>,
L<re>,
L<DB>,
L<Devel::NYTProf>,
L<Dumpvalue>,
and
L<perlrun>.

When debugging a script that uses #! and is thus normally found in
$PATH, the -S option causes perl to search $PATH for it, so you don't
have to type the path or C<which $scriptname>.

  $ perl -Sd foo.pl

=head1 BUGS

You cannot get stack frame information or in any fashion debug functions
that were not compiled by Perl, such as those from C or C++ extensions.

If you alter your @_ arguments in a subroutine (such as with C<shift>
or C<pop>), the stack backtrace will not show the original values.

The debugger does not currently work in conjunction with the B<-W>
command-line switch, because it itself is not free of warnings.

If you're in a slow syscall (like C<wait>ing, C<accept>ing, or C<read>ing
from your keyboard or a socket) and haven't set up your own C<$SIG{INT}>
handler, then you won't be able to CTRL-C your way back to the debugger,
because the debugger's own C<$SIG{INT}> handler doesn't understand that
it needs to raise an exception to longjmp(3) out of slow syscalls.
                                                       usr/local/lib/perl5/5.40.0/pod/perldelta.pod                                                        0000644 0000000 0000000 00000143627 14714567415 016765  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =encoding utf8

=head1 NAME

perldelta - what is new for perl v5.40.0

=head1 DESCRIPTION

This document describes differences between the 5.38.0 release and the 5.40.0
release.

=head1 Core Enhancements

=head2 New C<__CLASS__> Keyword

When using the new C<class> feature, code inside a method, C<ADJUST> block or
field initializer expression is now permitted to use the new C<__CLASS__>
keyword.  This yields a class name, similar to C<__PACKAGE__>, but whereas that
gives the compile-time package that the code appears in, the C<__CLASS__>
keyword is aware of the actual run-time class that the object instance is a
member of.  This makes it useful for method dispatch on that class, especially
during constructors, where access to C<$self> is not permitted.

For more information, see L<perlfunc/__CLASS__>.

=head2 C<:reader> attribute for field variables

When using the C<class> feature, field variables can now take a C<:reader>
attribute.  This requests that an accessor method be automatically created
that simply returns the value of the field variable from the given instance.

    field $name :reader;

Is equivalent to

    field $name;
    method name () { return $name; }

An alternative name can also be provided:

    field $name :reader(get_name);

For more detail, see L<perlclass/:reader>.

=head2 Permit a space in C<-M> command-line option

When processing command-line options, perl now allows a space between the
C<-M> switch and the name of the module after it.

    $ perl -M Data::Dumper=Dumper -E 'say Dumper [1,2,3]'

This matches the existing behaviour of the C<-I> option.

=head2 Restrictions to C<use VERSION> declarations

In Perl 5.36, a deprecation warning was added when downgrading a
C<use VERSION> declaration from one above version 5.11, to below. This has
now been made a fatal error.

Additionally, it is now a fatal error to issue a subsequent C<use VERSION>
declaration when another is in scope, when either version is 5.39 or above.
This is to avoid complications surrounding imported lexical functions from
L<builtin>.  A deprecation warning has also been added for any other
subsequent C<use VERSION> declaration below version 5.39, to warn that it
will no longer be permitted in Perl version 5.44.

=head2 New C<builtin::inf> and C<builtin::nan> functions (experimental)

Two new functions, C<inf> and C<nan>, have been added to the C<builtin>
namespace.  These act like constants that yield the floating-point infinity
and Not-a-Number value respectively.

=head2 New C<^^> logical xor operator

Perl has always had three low-precedence logical operators C<and>, C<or> and
C<xor>, as well as three high-precedence bitwise versions C<&>, C<^> and C<|>.
Until this release, while the medium-precedence logical operators of C<&&> and
C<||> were also present, there was no exclusive-or equivalent.  This release
of Perl adds the final C<^^> operator, completing the set.

    $x ^^ $y and say "One of x or y is true, but not both";

=head2 C<try>/C<catch> feature is no longer experimental

Prior to this release, the C<try>/C<catch> feature for handling errors was
considered experimental. Introduced in Perl version 5.34.0, this is now
considered a stable language feature and its use no longer prints a warning.
It still must be enabled with L<the 'try' feature|feature/The 'try' feature>.

See L<perlsyn/Try Catch Exception Handling>.

=head2 C<for> iterating over multiple values at a time is no longer experimental

Prior to this release, iterating over multiple values at a time with C<for> was
considered experimental. Introduced in Perl version 5.36.0, this is now
considered a stable language feature and its use no longer prints a warning.
See L<perlsyn/Compound Statements>.

=head2 C<builtin> module is no longer experimental

Prior to this release, the L<builtin> module and all of its functions were
considered experimental. Introduced in Perl version 5.36.0, this module is now
considered stable its use no longer prints a warning. However, several of its
functions are still considered experimental.

=head2 The C<:5.40> feature bundle adds C<try>

The latest version feature bundle now contains the recently-stablized feature
C<try>. As this feature bundle is used by the C<-E> commandline switch, these
are immediately available in C<-E> scripts.

=head2 C<use v5.40;> imports builtin functions

In addition to importing a feature bundle, C<use v5.40;> (or later versions)
imports the corresponding L<builtin version bundle|builtin/Version Bundles>.

=head1 Security

=head2 CVE-2023-47038 - Write past buffer end via illegal user-defined Unicode property

This vulnerability was reported directly to the Perl security team by
Nathan Mills C<the.true.nathan.mills@gmail.com>.

A crafted regular expression when compiled by perl 5.30.0 through
5.38.0 can cause a one-byte attacker controlled buffer overflow in a
heap allocated buffer.

=head2 CVE-2023-47039 - Perl for Windows binary hijacking vulnerability

This vulnerability was reported to the Intel Product Security Incident
Response Team (PSIRT) by GitHub user ycdxsb
L<https://github.com/ycdxsb/WindowsPrivilegeEscalation>. PSIRT then
reported it to the Perl security team.

Perl for Windows relies on the system path environment variable to
find the shell (C<cmd.exe>). When running an executable which uses
Windows Perl interpreter, Perl attempts to find and execute C<cmd.exe>
within the operating system. However, due to path search order issues,
Perl initially looks for cmd.exe in the current working directory.

An attacker with limited privileges can exploit this behavior by
placing C<cmd.exe> in locations with weak permissions, such as
C<C:\ProgramData>. By doing so, when an administrator attempts to use
this executable from these compromised locations, arbitrary code can
be executed.

=head1 Incompatible Changes

=head2 reset EXPR now calls set-magic on scalars

Previously C<reset EXPR> did not call set magic when clearing scalar variables.
This meant that changes did not propagate to the underlying internal state
where needed, such as for C<$^W>, and did not result in an exception where the
underlying magic would normally throw an exception, such as for C<$1>.

This means code that had no effect before may now actually have an effect,
including possibly throwing an exception.

C<reset EXPR> already called set magic when modifying arrays and hashes.

This has no effect on plain C<reset> used to reset one-match searches as with
C<m?pattern?>.

[L<GH #20763|https://github.com/Perl/perl5/issues/20763>]

=head2 Calling the import method of an unknown package produces a warning

Historically, it has been possible to call the C<import> or C<unimport> method of
any class, including ones which have not been defined, with an argument and not
experience an error.  For instance, this code will not throw an error in Perl
5.38:

    Class::That::Does::Not::Exist->import("foo");

However, as of Perl 5.39.1 this is deprecated and will issue a warning. Note
that calling these methods with no arguments continues to silently succeed and
do nothing. For instance,

    Class::That::Does::Not::Exist->import();

will continue to not throw an error.  This is because every class
implicitly inherits from the class L<UNIVERSAL> which now defines an
C<import> method.  In older perls there was no such method defined,
and instead the method calls for C<import> and C<unimport> were special
cased to not throw errors if there was no such method defined.

This change has been added because it makes it easier to detect case typos in
C<use> statements when running on case-insensitive file systems.  For instance,
on Windows or other platforms with case-insensitive file systems on older perls
the following code

    use STRICT 'refs';

would silently do nothing as the module is actually called F<strict.pm>, not
F<STRICT.pm>, so it would be loaded but its import method would never be called.
It will also detect cases where a user passes an argument when using a package
that does not provide its own import, for instance most "pure" class
definitions do not define an import method.

=head2 C<return> no longer allows an indirect object

The C<return> operator syntax now rejects indirect objects.  In most
cases this would compile and even run, but wasn't documented and could
produce confusing results, for example:

    # note that sum hasn't been defined
    sub sum_positive {
        return sum grep $_ > 0, @_;
        # unexpectedly parsed as:
        #   return *sum, grep $_ > 0, @_;
        # ... with the bareword acting like an extra (typeglob) argument
    }
    say for sum_positive(-1, 2, 3)

produced:

    *main::sum
    2
    3

[L<GH #21716|https://github.com/Perl/perl5/issues/21716>]

=head2 Class barewords no longer resolved as file handles in method calls under C<no feature "bareword_filehandles">

Under C<no feature "bareword_filehandles"> bareword file handles
continued to be resolved in method calls:

    open FH, "<", $somefile or die;
    no feature 'bareword_filehandles';
    FH->binmode;

This has been fixed, so the:

    FH->binmode;

will attempt to resolve C<FH> as a class, typically resulting in a
runtime error.

The standard file handles such as C<STDOUT> continue to be resolved as
a handle:

    no feature 'bareword_filehandles';
    STDOUT->flush; # continues to work

Note that once perl resolves a bareword name as a class it will
continue to do so:

    package SomeClass {
        sub somemethod{}
    }
    open SomeClass, "<", "somefile" or die;
    # SomeClass resolved as a handle
    SomeClass->binmode;
    {
        no feature "bareword_filehandles";
        SomeClass->somemethod;
    }
    # SomeClass resolved as a class
    SomeClass->binmode;

[L<GH #19426|https://github.com/Perl/perl5/issues/19426>]

=head1 Deprecations

=over 4

=item *

Using C<goto> to jump from an outer scope into an inner scope is deprecated
and will be removed completely in Perl 5.42.  [L<GH #21601|https://github.com/Perl/perl5/issues/21601>]

=back

=head1 Performance Enhancements

=over 4

=item *

The negation OPs have been modified to support the generic C<TARGMY> optimization.
[L<GH #21442|https://github.com/Perl/perl5/issues/21442>]

=back

=head1 Modules and Pragmata

=head2 New Modules and Pragmata

=over 4

=item *

L<Term::Table> 0.018 has been added to the Perl core.

This module is a dependency of L<Test2::Suite>.

=item *

L<Test2::Suite> 0.000162 has been added to the Perl core.

This distribution contains a comprehensive set of test tools for writing unit
tests.  It is the successor to L<Test::More> and similar modules.  Its
inclusion in the Perl core means that CPAN module tests can be written using
this suite of tools without extra dependencies.

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

L<Archive::Tar> has been upgraded from version 2.40 to 3.02_001.

=item *

L<attributes> has been upgraded from version 0.35 to 0.36.

=item *

L<autodie> has been upgraded from version 2.36 to 2.37.

=item *

L<B> has been upgraded from version 1.88 to 1.89.

=item *

L<B::Deparse> has been upgraded from version 1.74 to 1.76.

=item *
