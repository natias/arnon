	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301E,
	0x3020,
	0xFD3E,
	0xFD3F,
	0xFE18,
	0xFE19,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE45,
	0xFE48,
	0xFE49,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFF09,
	0xFF0A,
	0xFF3D,
	0xFF3E,
	0xFF5D,
	0xFF5E,
	0xFF60,
	0xFF61,
	0xFF63,
	0xFF64
};

#  endif	/* EBCDIC 037 */

static const UV UNI_PERM_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x483,
	0x484,
	0x10350,
	0x1037B
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_PF_invlist[] = {  /* for ASCII/Latin1 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xBB,
	0xBC,
	0x2019,
	0x201A,
	0x201D,
	0x201E,
	0x203A,
	0x203B,
	0x2E03,
	0x2E04,
	0x2E05,
	0x2E06,
	0x2E0A,
	0x2E0B,
	0x2E0D,
	0x2E0E,
	0x2E1D,
	0x2E1E,
	0x2E21,
	0x2E22
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_PF_invlist[] = {  /* for EBCDIC 1047 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8B,
	0x8C,
	0x2019,
	0x201A,
	0x201D,
	0x201E,
	0x203A,
	0x203B,
	0x2E03,
	0x2E04,
	0x2E05,
	0x2E06,
	0x2E0A,
	0x2E0B,
	0x2E0D,
	0x2E0E,
	0x2E1D,
	0x2E1E,
	0x2E21,
	0x2E22
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_PF_invlist[] = {  /* for EBCDIC 037 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8B,
	0x8C,
	0x2019,
	0x201A,
	0x201D,
	0x201E,
	0x203A,
	0x203B,
	0x2E03,
	0x2E04,
	0x2E05,
	0x2E06,
	0x2E0A,
	0x2E0B,
	0x2E0D,
	0x2E0E,
	0x2E1D,
	0x2E1E,
	0x2E21,
	0x2E22
};

#  endif	/* EBCDIC 037 */

static const UV UNI_PHAG_invlist[] = {  /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1802,
	0x1804,
	0x1805,
	0x1806,
	0xA840,
	0xA878
};

static const UV UNI_PHAISTOS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x101D0,
	0x10200
};

static const UV UNI_PHLI_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10B60,
	0x10B73,
	0x10B78,
	0x10B80
};

static const UV UNI_PHLP_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x640,
	0x641,
	0x10B80,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0
};

static const UV UNI_PHNX_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10900,
	0x1091C,
	0x1091F,
	0x10920
};

static const UV UNI_PHONETICEXT_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D00,
	0x1D80
};

static const UV UNI_PHONETICEXTSUP_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D80,
	0x1DC0
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_PI_invlist[] = {  /* for ASCII/Latin1 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAB,
	0xAC,
	0x2018,
	0x2019,
	0x201B,
	0x201D,
	0x201F,
	0x2020,
	0x2039,
	0x203A,
	0x2E02,
	0x2E03,
	0x2E04,
	0x2E05,
	0x2E09,
	0x2E0A,
	0x2E0C,
	0x2E0D,
	0x2E1C,
	0x2E1D,
	0x2E20,
	0x2E21
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_PI_invlist[] = {  /* for EBCDIC 1047 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8A,
	0x8B,
	0x2018,
	0x2019,
	0x201B,
	0x201D,
	0x201F,
	0x2020,
	0x2039,
	0x203A,
	0x2E02,
	0x2E03,
	0x2E04,
	0x2E05,
	0x2E09,
	0x2E0A,
	0x2E0C,
	0x2E0D,
	0x2E1C,
	0x2E1D,
	0x2E20,
	0x2E21
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_PI_invlist[] = {  /* for EBCDIC 037 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8A,
	0x8B,
	0x2018,
	0x2019,
	0x201B,
	0x201D,
	0x201F,
	0x2020,
	0x2039,
	0x203A,
	0x2E02,
	0x2E03,
	0x2E04,
	0x2E05,
	0x2E09,
	0x2E0A,
	0x2E0C,
	0x2E0D,
	0x2E1C,
	0x2E1D,
	0x2E20,
	0x2E21
};

#  endif	/* EBCDIC 037 */

static const UV UNI_PLAYINGCARDS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F0A0,
	0x1F100
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_PO_invlist[] = {  /* for ASCII/Latin1 */
	371,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x24,
	0x25,
	0x28,
	0x2A,
	0x2B,
	0x2C,
	0x2D,
	0x2E,
	0x30,
	0x3A,
	0x3C,
	0x3F,
	0x41,
	0x5C,
	0x5D,
	0xA1,
	0xA2,
	0xA7,
	0xA8,
	0xB6,
	0xB8,
	0xBF,
	0xC0,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x55A,
	0x560,
	0x589,
	0x58A,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5F3,
	0x5F5,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x700,
	0x70E,
	0x7F7,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0x970,
	0x971,
	0x9FD,
	0x9FE,
	0xA76,
	0xA77,
	0xAF0,
	0xAF1,
	0xC77,
	0xC78,
	0xC84,
	0xC85,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF85,
	0xF86,
	0xFD0,
	0xFD5,
	0xFD9,
	0xFDB,
	0x104A,
	0x1050,
	0x10FB,
	0x10FC,
	0x1360,
	0x1369,
	0x166E,
	0x166F,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DB,
	0x1800,
	0x1806,
	0x1807,
	0x180B,
	0x1944,
	0x1946,
	0x1A1E,
	0x1A20,
	0x1AA0,
	0x1AA7,
	0x1AA8,
	0x1AAE,
	0x1B5A,
	0x1B61,
	0x1B7D,
	0x1B7F,
	0x1BFC,
	0x1C00,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x2016,
	0x2018,
	0x2020,
	0x2028,
	0x2030,
	0x2039,
	0x203B,
	0x203F,
	0x2041,
	0x2044,
	0x2047,
	0x2052,
	0x2053,
	0x2054,
	0x2055,
	0x205F,
	0x2CF9,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E00,
	0x2E02,
	0x2E06,
	0x2E09,
	0x2E0B,
	0x2E0C,
	0x2E0E,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E2F,
	0x2E30,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x2E42,
	0x2E43,
	0x2E50,
	0x2E52,
	0x2E55,
	0x3001,
	0x3004,
	0x303D,
	0x303E,
	0x30FB,
	0x30FC,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F8,
	0xA874,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA92E,
	0xA930,
	0xA95F,
	0xA960,
	0xA9C1,
	0xA9CE,
	0xA9DE,
	0xA9E0,
	0xAA5C,
	0xAA60,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE10,
	0xFE17,
	0xFE19,
	0xFE1A,
	0xFE30,
	0xFE31,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE4D,
	0xFE50,
	0xFE53,
	0xFE54,
	0xFE58,
	0xFE5F,
	0xFE62,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6C,
	0xFF01,
	0xFF04,
	0xFF05,
	0xFF08,
	0xFF0A,
	0xFF0B,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF10,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF21,
	0xFF3C,
	0xFF3D,
	0xFF61,
	0xFF62,
	0xFF64,
	0xFF66,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x1056F,
	0x10570,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x1093F,
	0x10940,
	0x10A50,
	0x10A59,
	0x10A7F,
	0x10A80,
	0x10AF0,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x10F55,
	0x10F5A,
	0x10F86,
	0x10F8A,
	0x11047,
	0x1104E,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x11174,
	0x11176,
	0x111C5,
	0x111C9,
	0x111CD,
	0x111CE,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123E,
	0x112A9,
	0x112AA,
	0x1144B,
	0x11450,
	0x1145A,
	0x1145C,
	0x1145D,
	0x1145E,
	0x114C6,
	0x114C7,
	0x115C1,
	0x115D8,
	0x11641,
	0x11644,
	0x11660,
	0x1166D,
	0x116B9,
	0x116BA,
	0x1173C,
	0x1173F,
	0x1183B,
	0x1183C,
	0x11944,
	0x11947,
	0x119E2,
	0x119E3,
	0x11A3F,
	0x11A47,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11C41,
	0x11C46,
	0x11C70,
	0x11C72,
	0x11EF7,
	0x11EF9,
	0x11FFF,
	0x12000,
	0x12470,
	0x12475,
	0x12FF1,
	0x12FF3,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3C,
	0x16B44,
	0x16B45,
	0x16E97,
	0x16E9B,
	0x16FE2,
	0x16FE3,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8C,
	0x1E95E,
	0x1E960
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_PO_invlist[] = {  /* for EBCDIC 1047 */
	375,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x50,
	0x51,
	0x5A,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x5F,
	0x61,
	0x62,
	0x6B,
	0x6D,
	0x6F,
	0x70,
	0x7A,
	0x7E,
	0x7F,
	0x80,
	0xAA,
	0xAC,
	0xB3,
	0xB4,
	0xB5,
	0xB7,
	0xE0,
	0xE1,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x55A,
	0x560,
	0x589,
	0x58A,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5F3,
	0x5F5,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x700,
	0x70E,
	0x7F7,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0x970,
	0x971,
	0x9FD,
	0x9FE,
	0xA76,
	0xA77,
	0xAF0,
	0xAF1,
	0xC77,
	0xC78,
	0xC84,
	0xC85,
	0xDF4,
	0xDF5,
	0xE4F,
	0xE50,
	0xE5A,
	0xE5C,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF85,
	0xF86,
	0xFD0,
	0xFD5,
	0xFD9,
	0xFDB,
	0x104A,
	0x1050,
	0x10FB,
	0x10FC,
	0x1360,
	0x1369,
	0x166E,
	0x166F,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DB,
	0x1800,
	0x1806,
	0x1807,
	0x180B,
	0x1944,
	0x1946,
	0x1A1E,
	0x1A20,
	0x1AA0,
	0x1AA7,
	0x1AA8,
	0x1AAE,
	0x1B5A,
	0x1B61,
	0x1B7D,
	0x1B7F,
	0x1BFC,
	0x1C00,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x2016,
	0x2018,
	0x2020,
	0x2028,
	0x2030,
	0x2039,
	0x203B,
	0x203F,
	0x2041,
	0x2044,
	0x2047,
	0x2052,
	0x2053,
	0x2054,
	0x2055,
	0x205F,
	0x2CF9,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E00,
	0x2E02,
	0x2E06,
	0x2E09,
	0x2E0B,
	0x2E0C,
	0x2E0E,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E2F,
	0x2E30,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x2E42,
	0x2E43,
	0x2E50,
	0x2E52,
	0x2E55,
	0x3001,
	0x3004,
	0x303D,
	0x303E,
	0x30FB,
	0x30FC,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F8,
	0xA874,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA92E,
	0xA930,
	0xA95F,
	0xA960,
	0xA9C1,
	0xA9CE,
	0xA9DE,
	0xA9E0,
	0xAA5C,
	0xAA60,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE10,
	0xFE17,
	0xFE19,
	0xFE1A,
	0xFE30,
	0xFE31,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE4D,
