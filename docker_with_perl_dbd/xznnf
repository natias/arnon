    setitem_vector_mask(const FixedArray2D<int> &mask, const FixedArray2D &data)
    {
        IMATH_NAMESPACE::Vec2<size_t> len = match_dimension(mask);
        if (data.len() == len) {
            for (size_t j = 0; j < len.y; j++)
                for (size_t i=0; i<len.x; ++i)
                    if (mask(i,j))
                        (*this)(i,j) = data(i,j);
        } else {
            PyErr_SetString(PyExc_IndexError, "Dimensions of source data do not match destination");
            boost::python::throw_error_already_set();
        }
    }

    void
    setitem_array1d_mask(const FixedArray2D<int> &mask, const FixedArray<T> &data)
    {
        IMATH_NAMESPACE::Vec2<size_t> len = match_dimension(mask);
        if ((size_t) data.len() == len.x*len.y) {
            for (size_t j = 0, z = 0; j < len.y; j++)
                for (size_t i=0; i<len.x; ++i, ++z)
                    if (mask(i,j))
                        (*this)(i,j) = data[z];
        } else {
            size_t count = 0;
            for (size_t j = 0, z = 0; j < len.y; j++)
                for (size_t i=0; i<len.x; ++i, ++z)
                    if (mask(i,j)) count++;

            if ((size_t) data.len() != count) {
                PyErr_SetString(PyExc_IndexError, "Dimensions of source data do not match destination either masked or unmasked");
                boost::python::throw_error_already_set();
            }

            for (size_t j = 0, z = 0; j < len.y; j++)
                for (size_t i=0; i<len.x; ++i)
                    if (mask(i,j))
                        (*this)(i,j) = data[z++];
        }
    }

    void
    setitem_array1d(PyObject *index, const FixedArray<T> &data)
    {
        //TODO:sanity check
        size_t startx=0, endx=0, slicelengthx=0;
        size_t starty=0, endy=0, slicelengthy=0;
        Py_ssize_t stepx=0;
        Py_ssize_t stepy=0;
        extract_slice_indices(PyTuple_GetItem(index, 0),_length.x,startx,endx,stepx,slicelengthx);
        extract_slice_indices(PyTuple_GetItem(index, 1),_length.y,starty,endy,stepy,slicelengthy);
        // we have a valid range of indices
        if ((size_t) data.len() != slicelengthx*slicelengthy) {
            PyErr_SetString(PyExc_IndexError, "Dimensions of source data do not match destination");
            boost::python::throw_error_already_set();
        }
        for (size_t j=0, z=0; j<slicelengthy; ++j)
            for (size_t i=0; i<slicelengthx; ++i, ++z)
                (*this)(startx+i*stepx, starty+j*stepy) = data[z];
    }

    IMATH_NAMESPACE::Vec2<size_t> len() const { return _length; }
    IMATH_NAMESPACE::Vec2<size_t> stride() const { return _stride; }
    T       & operator () (size_t i, size_t j)       { return _ptr[_stride.x*(j*_stride.y + i)]; }
    const T & operator () (size_t i, size_t j) const { return _ptr[_stride.x*(j*_stride.y + i)]; }
    size_t totalLen() const { return _size; }
    boost::python::tuple size() const
    {
        return boost::python::make_tuple(_length.x, _length.y);
    }

    static boost::python::class_<FixedArray2D<T> > register_(const char *name, const char *doc)
    {
        // a little tricky, but here we go - class types return internal references
        // but fundemental types just get copied.  this typedef sets up the appropriate
        // call policy for each type.
        typedef typename boost::mpl::if_<
            boost::is_class<T>,
            boost::python::return_internal_reference<>,
            boost::python::default_call_policies>::type call_policy;

        boost::python::class_<FixedArray2D<T> > c(name,doc, boost::python::init<size_t, size_t>(
            "construct an array of the specified length initialized to the default value for the type"));
        c
            .def(boost::python::init<const FixedArray2D<T> &>("construct an array with the same values as the given array"))
            .def(boost::python::init<const T &,size_t,size_t>("construct an array of the specified length initialized to the specified default value"))
            .def("__getitem__", &FixedArray2D<T>::getslice)
            .def("__getitem__", &FixedArray2D<T>::getslice_mask)
//             .def("__getitem__", &FixedArray2D<T>::getitem, call_policy())
            .def("item", &FixedArray2D<T>::getitem, call_policy())
//             .def("__setitem__", &FixedArray2D<T>::setitem)
            .def("__setitem__", &FixedArray2D<T>::setitem_scalar)
            .def("__setitem__", &FixedArray2D<T>::setitem_scalar_mask)
            .def("__setitem__", &FixedArray2D<T>::setitem_vector)
            .def("__setitem__", &FixedArray2D<T>::setitem_vector_mask)
            .def("__setitem__", &FixedArray2D<T>::setitem_array1d)
            .def("__setitem__", &FixedArray2D<T>::setitem_array1d_mask)
            .def("__len__",&FixedArray2D<T>::totalLen)
            .def("size",&FixedArray2D<T>::size)
            .def("ifelse",&FixedArray2D<T>::ifelse_scalar)
            .def("ifelse",&FixedArray2D<T>::ifelse_vector)
            ;
        return c;
    }

//     template <class T2>
//     size_t match_dimension(const FixedArray<T2> &a1) const
//     {
//         if (_length.x != a1.len()) {
//             PyErr_SetString(PyExc_IndexError, "Dimensions of source do not match destination");
//             boost::python::throw_error_already_set();
//         }
//         return _length.x;
//     }

    template <class T2>
    IMATH_NAMESPACE::Vec2<size_t> match_dimension(const FixedArray2D<T2> &a1) const
    {
        if (len() != a1.len()) {
            PyErr_SetString(PyExc_IndexError, "Dimensions of source do not match destination");
            boost::python::throw_error_already_set();
        }
        return len();
    }

    FixedArray2D<T> ifelse_vector(const FixedArray2D<int> &choice, const FixedArray2D<T> &other) {
        IMATH_NAMESPACE::Vec2<size_t> len = match_dimension(choice);
        match_dimension(other);
        FixedArray2D<T> tmp(len); // should use default construction but V3f doens't initialize
        for (size_t j = 0; j < len.y; ++j)
            for (size_t i = 0; i < len.x; ++i)
                tmp(i,j) = choice(i,j) ? (*this)(i,j) : other(i,j);
        return tmp;
    }

    FixedArray2D<T> ifelse_scalar(const FixedArray2D<int> &choice, const T &other) {
        IMATH_NAMESPACE::Vec2<size_t> len = match_dimension(choice);
        FixedArray2D<T> tmp(len); // should use default construction but V3f doens't initialize
        for (size_t j = 0; j < len.y; ++j)
            for (size_t i = 0; i < len.x; ++i)
                tmp(i,j) = choice(i,j) ? (*this)(i,j) : other;
        return tmp;
    }

};
 
// unary operation application
template <template <class,class> class Op, class T1, class Ret>
FixedArray2D<Ret> apply_array2d_unary_op(const FixedArray2D<T1> &a1)
{
    IMATH_NAMESPACE::Vec2<size_t> len = a1.len();
    FixedArray2D<Ret> retval(len.x,len.y);
    for (size_t j=0; j<len.y; ++j) {
        for (size_t i=0;i<len.x;++i) {
            retval(i,j) = Op<T1,Ret>::apply(a1(i,j));
        }
    }
    return retval;
}

// binary operation application
template <template <class,class,class> class Op, class T1, class T2, class Ret>
FixedArray2D<Ret> apply_array2d_array2d_binary_op(const FixedArray2D<T1> &a1, const FixedArray2D<T2> &a2)
{
    IMATH_NAMESPACE::Vec2<size_t> len = a1.match_dimension(a2);
    FixedArray2D<Ret> retval(len.x,len.y);
    for (size_t j=0; j<len.y; ++j) {
        for (size_t i=0;i<len.x;++i) {
            retval(i,j) = Op<T1,T2,Ret>::apply(a1(i,j),a2(i,j));
        }
    }
    return retval;
}

template <template <class,class,class> class Op, class T1, class T2, class Ret>
FixedArray2D<Ret> apply_array2d_scalar_binary_op(const FixedArray2D<T1> &a1, const T2 &a2)
{
    IMATH_NAMESPACE::Vec2<size_t> len = a1.len();
    FixedArray2D<Ret> retval(len.x,len.y);
    for (size_t j=0; j<len.y; ++j) {
        for (size_t i=0;i<len.x;++i) {
            retval(i,j) = Op<T1,T2,Ret>::apply(a1(i,j),a2);
        }
    }
    return retval;
}

template <template <class,class,class> class Op, class T1, class T2, class Ret>
FixedArray2D<Ret> apply_array2d_scalar_binary_rop(const FixedArray2D<T1> &a1, const T2 &a2)
{
    IMATH_NAMESPACE::Vec2<size_t> len = a1.len();
    FixedArray2D<Ret> retval(len.x,len.y);
    for (size_t j=0; j<len.y; ++j) {
        for (size_t i=0;i<len.x;++i) {
            retval(i,j) = Op<T2,T1,Ret>::apply(a2,a1(i,j));
        }
    }
    return retval;
}

// in-place binary operation application
template <template <class,class> class Op, class T1, class T2>
FixedArray2D<T1> & apply_array2d_array2d_ibinary_op(FixedArray2D<T1> &a1, const FixedArray2D<T2> &a2)
{
    IMATH_NAMESPACE::Vec2<size_t> len = a1.match_dimension(a2);
    for (size_t j=0; j<len.y; ++j) {
        for (size_t i=0;i<len.x;++i) {
            Op<T1,T2>::apply(a1(i,j),a2(i,j));
        }
    }
    return a1;
}

// in-place binary operation application
template <template <class,class> class Op, class T1, class T2>
FixedArray2D<T1> & apply_array2d_scalar_ibinary_op(FixedArray2D<T1> &a1, const T2 &a2)
{
    IMATH_NAMESPACE::Vec2<size_t> len = a1.len();
    for (size_t j=0; j<len.y; ++j) {
        for (size_t i=0;i<len.x;++i) {
            Op<T1,T2>::apply(a1(i,j),a2);
        }
    }
    return a1;
}

    
// PyObject* PyNumber_Add(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> operator + (const FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_binary_op<op_add,T,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> operator + (const FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_binary_op<op_add,T,T,T>(a0,v1); }
template <class T> static FixedArray2D<T> operator + (const T &v1, const FixedArray2D<T> &a0)               { return a0+v1; }

// PyObject* PyNumber_Subtract(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> operator - (const FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_binary_op<op_sub,T,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> operator - (const FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_binary_op<op_sub,T,T,T>(a0,v1); }
template <class T> static FixedArray2D<T> operator - (const T &v1, const FixedArray2D<T> &a0)               { return apply_array2d_scalar_binary_op<op_rsub,T,T,T>(a0,v1); }

// PyObject* PyNumber_Multiply(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> operator * (const FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_binary_op<op_mul,T,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> operator * (const FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_binary_op<op_mul,T,T,T>(a0,v1); }
template <class T> static FixedArray2D<T> operator * (const T &v1, const FixedArray2D<T> &a0)               { return a0*v1; }

// PyObject* PyNumber_Divide(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> operator / (const FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_binary_op<op_div,T,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> operator / (const FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_binary_op<op_div,T,T,T>(a0,v1); }
// no reversed scalar/array2d divide - no meaning

// PyObject* PyNumber_FloorDivide(	PyObject *o1, PyObject *o2)
// PyObject* PyNumber_TrueDivide(	PyObject *o1, PyObject *o2)
// PyObject* PyNumber_Remainder(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> operator % (const FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_binary_op<op_mod,T,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> operator % (const FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_binary_op<op_mod,T,T,T>(a0,v1); }
// no reversed scalar%array2d remainder - no meaning

// PyObject* PyNumber_Divmod(	PyObject *o1, PyObject *o2)

// PyObject* PyNumber_Power(	PyObject *o1, PyObject *o2, PyObject *o3)
template <class T> static FixedArray2D<T> pow_array2d_array2d (const FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_binary_op<op_pow,T,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> pow_array2d_scalar (const FixedArray2D<T> &a0, const T &v1)                { return apply_array2d_scalar_binary_op<op_pow,T,T,T>(a0,v1); }
// no reversed scalar/array2d pow - no meaning

// PyObject* PyNumber_Negative(	PyObject *o)
template <class T> static FixedArray2D<T> operator - (const FixedArray2D<T> &a0) { return apply_array2d_unary_op<op_neg,T,T>(a0); }

// PyObject* PyNumber_Positive(	PyObject *o)

// PyObject* PyNumber_Absolute(	PyObject *o)
template <class T> static FixedArray2D<T> abs (const FixedArray2D<T> &a0)        { return apply_array2d_unary_op<op_abs,T,T>(a0); }

// PyObject* PyNumber_Invert(	PyObject *o)
template <class T> static FixedArray2D<T> operator ~ (const FixedArray2D<T> &a0) { return apply_array2d_unary_op<op_inverse,T,T>(a0); }

// PyObject* PyNumber_Lshift(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> operator << (const FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_binary_op<op_lshift,T,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> operator << (const FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_binary_op<op_lshift,T,T,T>(a0,v1); }
// no reversed

// PyObject* PyNumber_Rshift(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> operator >> (const FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_binary_op<op_rshift,T,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> operator >> (const FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_binary_op<op_rshift,T,T,T>(a0,v1); }
// no reversed

// PyObject* PyNumber_And(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> operator & (const FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_binary_op<op_bitand,T,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> operator & (const FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_binary_op<op_bitand,T,T,T>(a0,v1); }
template <class T> static FixedArray2D<T> operator & (const T &v1, const FixedArray2D<T> &a0)               { return a0&v1; }

// PyObject* PyNumber_Xor(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> operator ^ (const FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_binary_op<op_xor,T,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> operator ^ (const FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_binary_op<op_xor,T,T,T>(a0,v1); }
template <class T> static FixedArray2D<T> operator ^ (const T &v1, const FixedArray2D<T> &a0)               { return a0^v1; }

// PyObject* PyNumber_Or(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> operator | (const FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_binary_op<op_bitor,T,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> operator | (const FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_binary_op<op_bitor,T,T,T>(a0,v1); }
template <class T> static FixedArray2D<T> operator | (const T &v1, const FixedArray2D<T> &a0)               { return a0|v1; }


// PyObject* PyNumber_InPlaceAdd(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> & operator += (FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_ibinary_op<op_iadd,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> & operator += (FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_ibinary_op<op_iadd,T,T>(a0,v1); }

// PyObject* PyNumber_InPlaceSubtract(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> & operator -= (FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_ibinary_op<op_isub,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> & operator -= (FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_ibinary_op<op_isub,T,T>(a0,v1); }

// PyObject* PyNumber_InPlaceMultiply(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> & operator *= (FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_ibinary_op<op_imul,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> & operator *= (FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_ibinary_op<op_imul,T,T>(a0,v1); }

// PyObject* PyNumber_InPlaceDivide(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> & operator /= (FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_ibinary_op<op_idiv,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> & operator /= (FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_ibinary_op<op_idiv,T,T>(a0,v1); }

// PyObject* PyNumber_InPlaceFloorDivide(	PyObject *o1, PyObject *o2)
// not implemented

// PyObject* PyNumber_InPlaceTrueDivide(	PyObject *o1, PyObject *o2)
// not implemented

// PyObject* PyNumber_InPlaceRemainder(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> & operator %= (FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_ibinary_op<op_imod,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> & operator %= (FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_ibinary_op<op_imod,T,T>(a0,v1); }

// PyObject* PyNumber_InPlacePower(	PyObject *o1, PyObject *o2, PyObject *o3)
template <class T> static FixedArray2D<T> & ipow_array2d_array2d (FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_ibinary_op<op_ipow,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> & ipow_array2d_scalar (FixedArray2D<T> &a0, const T &v1)                { return apply_array2d_scalar_ibinary_op<op_ipow,T,T>(a0,v1); }

// PyObject* PyNumber_InPlaceLshift(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> & operator <<= (FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_ibinary_op<op_ilshift,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> & operator <<= (FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_ibinary_op<op_ilshift,T,T>(a0,v1); }

// PyObject* PyNumber_InPlaceRshift(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> & operator >>= (FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_ibinary_op<op_irshift,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> & operator >>= (FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_ibinary_op<op_irshift,T,T>(a0,v1); }

// PyObject* PyNumber_InPlaceAnd(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> & operator &= (FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_ibinary_op<op_ibitand,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> & operator &= (FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_ibinary_op<op_ibitand,T,T>(a0,v1); }

// PyObject* PyNumber_InPlaceXor(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> & operator ^= (FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_ibinary_op<op_ixor,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> & operator ^= (FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_ibinary_op<op_ixor,T,T>(a0,v1); }

// PyObject* PyNumber_InPlaceOr(	PyObject *o1, PyObject *o2)
template <class T> static FixedArray2D<T> & operator |= (FixedArray2D<T> &a0, const FixedArray2D<T> &a1) { return apply_array2d_array2d_ibinary_op<op_ibitor,T,T>(a0,a1); }
template <class T> static FixedArray2D<T> & operator |= (FixedArray2D<T> &a0, const T &v1)               { return apply_array2d_scalar_ibinary_op<op_ibitor,T,T>(a0,v1); }

template <class T>
static void add_arithmetic_math_functions(boost::python::class_<FixedArray2D<T> > &c) {
    using namespace boost::python;
    c
        .def("__add__",&apply_array2d_array2d_binary_op<op_add,T,T,T>)
        .def("__add__",&apply_array2d_scalar_binary_op<op_add,T,T,T>)
        .def("__radd__",&apply_array2d_scalar_binary_rop<op_add,T,T,T>)
        .def("__sub__",&apply_array2d_array2d_binary_op<op_sub,T,T,T>)
        .def("__sub__",&apply_array2d_scalar_binary_op<op_sub,T,T,T>)
        .def("__rsub__",&apply_array2d_scalar_binary_op<op_rsub,T,T,T>)
        .def("__mul__",&apply_array2d_array2d_binary_op<op_mul,T,T,T>)
        .def("__mul__",&apply_array2d_scalar_binary_op<op_mul,T,T,T>)
        .def("__rmul__",&apply_array2d_scalar_binary_rop<op_mul,T,T,T>)
        .def("__div__",&apply_array2d_array2d_binary_op<op_div,T,T,T>)
        .def("__div__",&apply_array2d_scalar_binary_op<op_div,T,T,T>)
        .def("__truediv__",&apply_array2d_array2d_binary_op<op_div,T,T,T>)
        .def("__truediv__",&apply_array2d_scalar_binary_op<op_div,T,T,T>)
        .def("__neg__",&apply_array2d_unary_op<op_neg,T,T>)
        .def("__iadd__",&apply_array2d_array2d_ibinary_op<op_iadd,T,T>,return_internal_reference<>())
        .def("__iadd__",&apply_array2d_scalar_ibinary_op<op_iadd,T,T>,return_internal_reference<>())
        .def("__isub__",&apply_array2d_array2d_ibinary_op<op_isub,T,T>,return_internal_reference<>())
        .def("__isub__",&apply_array2d_scalar_ibinary_op<op_isub,T,T>,return_internal_reference<>())
        .def("__imul__",&apply_array2d_array2d_ibinary_op<op_imul,T,T>,return_internal_reference<>())
        .def("__imul__",&apply_array2d_scalar_ibinary_op<op_imul,T,T>,return_internal_reference<>())
        .def("__idiv__",&apply_array2d_array2d_ibinary_op<op_idiv,T,T>,return_internal_reference<>())
        .def("__idiv__",&apply_array2d_scalar_ibinary_op<op_idiv,T,T>,return_internal_reference<>())
        .def("__itruediv__",&apply_array2d_array2d_ibinary_op<op_idiv,T,T>,return_internal_reference<>())
        .def("__itruediv__",&apply_array2d_scalar_ibinary_op<op_idiv,T,T>,return_internal_reference<>())
        ;
}


template <class T>
static void add_pow_math_functions(boost::python::class_<FixedArray2D<T> > &c) {
    using namespace boost::python;
    c
        .def("__pow__",&apply_array2d_array2d_binary_op<op_pow,T,T,T>)
        .def("__pow__",&apply_array2d_scalar_binary_op<op_pow,T,T,T>)
        .def("__rpow__",&apply_array2d_scalar_binary_rop<op_rpow,T,T,T>)
        .def("__ipow__",&apply_array2d_array2d_ibinary_op<op_ipow,T,T>,return_internal_reference<>())
        .def("__ipow__",&apply_array2d_scalar_ibinary_op<op_ipow,T,T>,return_internal_reference<>())
        ;
}

template <class T>
static void add_mod_math_functions(boost::python::class_<FixedArray2D<T> > &c) {
    using namespace boost::python;
    c
        .def("__mod__",&apply_array2d_array2d_binary_op<op_mod,T,T,T>)
        .def("__mod__",&apply_array2d_scalar_binary_op<op_mod,T,T,T>)
        .def("__imod__",&apply_array2d_array2d_ibinary_op<op_imod,T,T>,return_internal_reference<>())
        .def("__imod__",&apply_array2d_scalar_ibinary_op<op_imod,T,T>,return_internal_reference<>())
        ;
}

template <class T>
static void add_shift_math_functions(boost::python::class_<FixedArray2D<T> > &c) {
    using namespace boost::python;
    c
        .def("__lshift__",&apply_array2d_array2d_binary_op<op_lshift,T,T,T>)
        .def("__lshift__",&apply_array2d_scalar_binary_op<op_lshift,T,T,T>)
        .def("__ilshift__",&apply_array2d_array2d_ibinary_op<op_ilshift,T,T>,return_internal_reference<>())
        .def("__ilshift__",&apply_array2d_scalar_ibinary_op<op_ilshift,T,T>,return_internal_reference<>())
        .def("__rshift__",&apply_array2d_array2d_binary_op<op_rshift,T,T,T>)
        .def("__rshift__",&apply_array2d_scalar_binary_op<op_rshift,T,T,T>)
        .def("__irshift__",&apply_array2d_array2d_ibinary_op<op_irshift,T,T>,return_internal_reference<>())
        .def("__irshift__",&apply_array2d_scalar_ibinary_op<op_irshift,T,T>,return_internal_reference<>())
        ;
}

template <class T>
static void add_bitwise_math_functions(boost::python::class_<FixedArray2D<T> > &c) {
    using namespace boost::python;
    c
        .def("__and__",&apply_array2d_array2d_binary_op<op_bitand,T,T,T>)
        .def("__and__",&apply_array2d_scalar_binary_op<op_bitand,T,T,T>)
        .def("__iand__",&apply_array2d_array2d_ibinary_op<op_ibitand,T,T>,return_internal_reference<>())
        .def("__iand__",&apply_array2d_scalar_ibinary_op<op_ibitand,T,T>,return_internal_reference<>())
        .def("__or__",&apply_array2d_array2d_binary_op<op_bitor,T,T,T>)
        .def("__or__",&apply_array2d_scalar_binary_op<op_bitor,T,T,T>)
        .def("__ior__",&apply_array2d_array2d_ibinary_op<op_ibitor,T,T>,return_internal_reference<>())
        .def("__ior__",&apply_array2d_scalar_ibinary_op<op_ibitor,T,T>,return_internal_reference<>())
        .def("__xor__",&apply_array2d_array2d_binary_op<op_xor,T,T,T>)
        .def("__xor__",&apply_array2d_scalar_binary_op<op_xor,T,T,T>)
        .def("__ixor__",&apply_array2d_array2d_ibinary_op<op_ixor,T,T>,return_internal_reference<>())
        .def("__ixor__",&apply_array2d_scalar_ibinary_op<op_ixor,T,T>,return_internal_reference<>())
        ;
}

template <class T>
static void add_comparison_functions(boost::python::class_<FixedArray2D<T> > &c) {
    using namespace boost::python;
    c
        .def("__eq__",&apply_array2d_array2d_binary_op<op_eq,T,T,int>)
        .def("__eq__",&apply_array2d_scalar_binary_op<op_eq,T,T,int>)
        .def("__ne__",&apply_array2d_array2d_binary_op<op_ne,T,T,int>)
        .def("__ne__",&apply_array2d_scalar_binary_op<op_ne,T,T,int>)
        ;
}

template <class T>
static void add_ordered_comparison_functions(boost::python::class_<FixedArray2D<T> > &c) {
    using namespace boost::python;
    c
        .def("__lt__",&apply_array2d_array2d_binary_op<op_lt,T,T,int>)
        .def("__lt__",&apply_array2d_scalar_binary_op<op_lt,T,T,int>)
        .def("__gt__",&apply_array2d_array2d_binary_op<op_gt,T,T,int>)
        .def("__gt__",&apply_array2d_scalar_binary_op<op_gt,T,T,int>)
        .def("__le__",&apply_array2d_array2d_binary_op<op_le,T,T,int>)
        .def("__le__",&apply_array2d_scalar_binary_op<op_le,T,T,int>)
        .def("__ge__",&apply_array2d_array2d_binary_op<op_ge,T,T,int>)
        .def("__ge__",&apply_array2d_scalar_binary_op<op_ge,T,T,int>)
        ;
}

template <class S,class T>
static void add_explicit_construction_from_type(boost::python::class_<FixedArray2D<T> > &c) {
    using namespace boost::python;
    c.def(boost::python::init<FixedArray2D<S> >("copy contents of other array into this one"));
}

}

#endif
                                                                                   usr/include/Imath/PyImathFixedArrayTraits.h                                                         0000644 0000000 0000000 00000026513 14330770346 017452  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright Contributors to the OpenEXR Project.
//

// clang-format off

#ifndef _PYIMATH_FIXEDARRAY_TRAITS_H
#define _PYIMATH_FIXEDARRAY_TRAITS_H

#include <Python.h>
#include <ImathVec.h>
#include <half.h>
#include <string>


namespace PyImath {

//  See https://docs.python.org/2/library/struct.html
//
//  Section 7.3.2.2
//
static  char       PyFmtStr_int[2] = {'i', '\0'};
static  char     PyFmtStr_float[2] = {'f', '\0'};
static  char    PyFmtStr_double[2] = {'d', '\0'};
static  char      PyFmtStr_bool[2] = {'?', '\0'};
static  char      PyFmtStr_char[2] = {'b', '\0'};
static  char     PyFmtStr_short[2] = {'h', '\0'};
static  char      PyFmtStr_long[2] = {'l', '\0'};
static  char  PyFmtStr_longlong[2] = {'q', '\0'};
static  char     PyFmtStr_uchar[2] = {'B', '\0'};
static  char    PyFmtStr_ushort[2] = {'H', '\0'};
static  char      PyFmtStr_uint[2] = {'I', '\0'};
static  char     PyFmtStr_ulong[2] = {'L', '\0'};
static  char PyFmtStr_ulonglong[2] = {'Q', '\0'};
static  char      PyFmtStr_half[2] = {'e', '\0'};


template <typename T> constexpr  char* PyFormat();

template <> constexpr  char*                PyFormat<int>()  { return PyFmtStr_int;       } 
template <> constexpr  char*              PyFormat<float>()  { return PyFmtStr_float;     }
template <> constexpr  char*             PyFormat<double>()  { return PyFmtStr_double;    }
template <> constexpr  char*               PyFormat<bool>()  { return PyFmtStr_bool;      }
template <> constexpr  char*               PyFormat<char>()  { return PyFmtStr_char;      }
template <> constexpr  char*              PyFormat<short>()  { return PyFmtStr_short;     }
template <> constexpr  char*               PyFormat<long>()  { return PyFmtStr_long;      }
template <> constexpr  char*          PyFormat<long long>()  { return PyFmtStr_longlong;  }
template <> constexpr  char*      PyFormat<unsigned char>()  { return PyFmtStr_uchar;     }
template <> constexpr  char*     PyFormat<unsigned short>()  { return PyFmtStr_ushort;    }
template <> constexpr  char*       PyFormat<unsigned int>()  { return PyFmtStr_uint;      }
template <> constexpr  char*      PyFormat<unsigned long>()  { return PyFmtStr_ulong;     }
template <> constexpr  char* PyFormat<unsigned long long>()  { return PyFmtStr_ulonglong; }
template <> constexpr  char*               PyFormat<half>()  { return PyFmtStr_half;      }

template <> constexpr  char*   PyFormat<IMATH_NAMESPACE::Vec2<short> >()    { return PyFmtStr_short;  } 
template <> constexpr  char*   PyFormat<IMATH_NAMESPACE::Vec2<int> >()      { return PyFmtStr_int;    } 
template <> constexpr  char*   PyFormat<IMATH_NAMESPACE::Vec2<int64_t> >()  { return PyFmtStr_long;   } 
template <> constexpr  char*   PyFormat<IMATH_NAMESPACE::Vec2<float> >()    { return PyFmtStr_float;  } 
template <> constexpr  char*   PyFormat<IMATH_NAMESPACE::Vec2<double> >()   { return PyFmtStr_double; } 
template <> constexpr  char*   PyFormat<IMATH_NAMESPACE::Vec3<short> >()    { return PyFmtStr_short;  } 
template <> constexpr  char*   PyFormat<IMATH_NAMESPACE::Vec3<int> >()      { return PyFmtStr_int;    } 
template <> constexpr  char*   PyFormat<IMATH_NAMESPACE::Vec3<int64_t> >()  { return PyFmtStr_long;   } 
template <> constexpr  char*   PyFormat<IMATH_NAMESPACE::Vec3<float> >()    { return PyFmtStr_float;  } 
template <> constexpr  char*   PyFormat<IMATH_NAMESPACE::Vec3<double> >()   { return PyFmtStr_double; } 
template <> constexpr  char*   PyFormat<IMATH_NAMESPACE::Vec4<short> >()    { return PyFmtStr_short;  } 
template <> constexpr  char*   PyFormat<IMATH_NAMESPACE::Vec4<int> >()      { return PyFmtStr_int;    } 
template <> constexpr  char*   PyFormat<IMATH_NAMESPACE::Vec4<int64_t> >()  { return PyFmtStr_long;   } 
template <> constexpr  char*   PyFormat<IMATH_NAMESPACE::Vec4<float> >()    { return PyFmtStr_float;  } 
template <> constexpr  char*   PyFormat<IMATH_NAMESPACE::Vec4<double> >()   { return PyFmtStr_double; } 


template <typename T> struct FixedArrayWidth { static const Py_ssize_t value; };

template <> struct FixedArrayWidth<short>                            { static const Py_ssize_t value = 1; };
template <> struct FixedArrayWidth<int>                              { static const Py_ssize_t value = 1; };
template <> struct FixedArrayWidth<int64_t>                          { static const Py_ssize_t value = 1; };
template <> struct FixedArrayWidth<float>                            { static const Py_ssize_t value = 1; };
template <> struct FixedArrayWidth<double>                           { static const Py_ssize_t value = 1; };
template <> struct FixedArrayWidth<unsigned char>                    { static const Py_ssize_t value = 1; };
template <> struct FixedArrayWidth<IMATH_NAMESPACE::Vec2<short> >    { static const Py_ssize_t value = 2; };
template <> struct FixedArrayWidth<IMATH_NAMESPACE::Vec2<int> >      { static const Py_ssize_t value = 2; };
template <> struct FixedArrayWidth<IMATH_NAMESPACE::Vec2<int64_t> >  { static const Py_ssize_t value = 2; };
template <> struct FixedArrayWidth<IMATH_NAMESPACE::Vec2<float> >    { static const Py_ssize_t value = 2; };
template <> struct FixedArrayWidth<IMATH_NAMESPACE::Vec2<double> >   { static const Py_ssize_t value = 2; };
template <> struct FixedArrayWidth<IMATH_NAMESPACE::Vec3<short> >    { static const Py_ssize_t value = 3; };
template <> struct FixedArrayWidth<IMATH_NAMESPACE::Vec3<int> >      { static const Py_ssize_t value = 3; };
template <> struct FixedArrayWidth<IMATH_NAMESPACE::Vec3<int64_t> >  { static const Py_ssize_t value = 3; };
template <> struct FixedArrayWidth<IMATH_NAMESPACE::Vec3<float> >    { static const Py_ssize_t value = 3; };
template <> struct FixedArrayWidth<IMATH_NAMESPACE::Vec3<double> >   { static const Py_ssize_t value = 3; };
template <> struct FixedArrayWidth<IMATH_NAMESPACE::Vec4<short> >    { static const Py_ssize_t value = 4; };
template <> struct FixedArrayWidth<IMATH_NAMESPACE::Vec4<int> >      { static const Py_ssize_t value = 4; };
template <> struct FixedArrayWidth<IMATH_NAMESPACE::Vec4<int64_t> >  { static const Py_ssize_t value = 4; };
template <> struct FixedArrayWidth<IMATH_NAMESPACE::Vec4<float> >    { static const Py_ssize_t value = 4; };
template <> struct FixedArrayWidth<IMATH_NAMESPACE::Vec4<double> >   { static const Py_ssize_t value = 4; };


template <typename T> struct FixedArrayDimension { static const Py_ssize_t value; };

template <> struct FixedArrayDimension<short>                            { static const Py_ssize_t value = 1; };
template <> struct FixedArrayDimension<int>                              { static const Py_ssize_t value = 1; };
template <> struct FixedArrayDimension<int64_t>                          { static const Py_ssize_t value = 1; };
template <> struct FixedArrayDimension<float>                            { static const Py_ssize_t value = 1; };
template <> struct FixedArrayDimension<double>                           { static const Py_ssize_t value = 1; };
template <> struct FixedArrayDimension<unsigned char>                    { static const Py_ssize_t value = 1; };
template <> struct FixedArrayDimension<IMATH_NAMESPACE::Vec2<short> >    { static const Py_ssize_t value = 2; };
template <> struct FixedArrayDimension<IMATH_NAMESPACE::Vec2<int> >      { static const Py_ssize_t value = 2; };
template <> struct FixedArrayDimension<IMATH_NAMESPACE::Vec2<int64_t> >  { static const Py_ssize_t value = 2; };
template <> struct FixedArrayDimension<IMATH_NAMESPACE::Vec2<float> >    { static const Py_ssize_t value = 2; };
template <> struct FixedArrayDimension<IMATH_NAMESPACE::Vec2<double> >   { static const Py_ssize_t value = 2; };
template <> struct FixedArrayDimension<IMATH_NAMESPACE::Vec3<short> >    { static const Py_ssize_t value = 2; };
template <> struct FixedArrayDimension<IMATH_NAMESPACE::Vec3<int> >      { static const Py_ssize_t value = 2; };
template <> struct FixedArrayDimension<IMATH_NAMESPACE::Vec3<int64_t> >  { static const Py_ssize_t value = 2; };
template <> struct FixedArrayDimension<IMATH_NAMESPACE::Vec3<float> >    { static const Py_ssize_t value = 2; };
template <> struct FixedArrayDimension<IMATH_NAMESPACE::Vec3<double> >   { static const Py_ssize_t value = 2; };
template <> struct FixedArrayDimension<IMATH_NAMESPACE::Vec4<short> >    { static const Py_ssize_t value = 2; };
template <> struct FixedArrayDimension<IMATH_NAMESPACE::Vec4<int> >      { static const Py_ssize_t value = 2; };
template <> struct FixedArrayDimension<IMATH_NAMESPACE::Vec4<int64_t> >  { static const Py_ssize_t value = 2; };
template <> struct FixedArrayDimension<IMATH_NAMESPACE::Vec4<float> >    { static const Py_ssize_t value = 2; };
template <> struct FixedArrayDimension<IMATH_NAMESPACE::Vec4<double> >   { static const Py_ssize_t value = 2; };


template <typename T> struct FixedArrayAtomicSize { static const Py_ssize_t value; };

template <> struct FixedArrayAtomicSize<short>                            { static const Py_ssize_t value = sizeof(short); };
template <> struct FixedArrayAtomicSize<int>                              { static const Py_ssize_t value = sizeof(int); };
template <> struct FixedArrayAtomicSize<int64_t>                          { static const Py_ssize_t value = sizeof(int); };
template <> struct FixedArrayAtomicSize<float>                            { static const Py_ssize_t value = sizeof(float); };
template <> struct FixedArrayAtomicSize<double>                           { static const Py_ssize_t value = sizeof(double); };
template <> struct FixedArrayAtomicSize<unsigned char>                    { static const Py_ssize_t value = sizeof(unsigned char); };
template <> struct FixedArrayAtomicSize<IMATH_NAMESPACE::Vec2<short> >    { static const Py_ssize_t value = sizeof(short); };
template <> struct FixedArrayAtomicSize<IMATH_NAMESPACE::Vec2<int> >      { static const Py_ssize_t value = sizeof(int); };
template <> struct FixedArrayAtomicSize<IMATH_NAMESPACE::Vec2<int64_t> >  { static const Py_ssize_t value = sizeof(int64_t); };
template <> struct FixedArrayAtomicSize<IMATH_NAMESPACE::Vec2<float> >    { static const Py_ssize_t value = sizeof(float); };
template <> struct FixedArrayAtomicSize<IMATH_NAMESPACE::Vec2<double> >   { static const Py_ssize_t value = sizeof(double); };
template <> struct FixedArrayAtomicSize<IMATH_NAMESPACE::Vec3<short> >    { static const Py_ssize_t value = sizeof(short); };
template <> struct FixedArrayAtomicSize<IMATH_NAMESPACE::Vec3<int> >      { static const Py_ssize_t value = sizeof(int); };
template <> struct FixedArrayAtomicSize<IMATH_NAMESPACE::Vec3<int64_t> >  { static const Py_ssize_t value = sizeof(int64_t); };
template <> struct FixedArrayAtomicSize<IMATH_NAMESPACE::Vec3<float> >    { static const Py_ssize_t value = sizeof(float); };
template <> struct FixedArrayAtomicSize<IMATH_NAMESPACE::Vec3<double> >   { static const Py_ssize_t value = sizeof(double); };
template <> struct FixedArrayAtomicSize<IMATH_NAMESPACE::Vec4<short> >    { static const Py_ssize_t value = sizeof(short); };
template <> struct FixedArrayAtomicSize<IMATH_NAMESPACE::Vec4<int> >      { static const Py_ssize_t value = sizeof(int); };
template <> struct FixedArrayAtomicSize<IMATH_NAMESPACE::Vec4<int64_t> >  { static const Py_ssize_t value = sizeof(int64_t); };
template <> struct FixedArrayAtomicSize<IMATH_NAMESPACE::Vec4<float> >    { static const Py_ssize_t value = sizeof(float); };
template <> struct FixedArrayAtomicSize<IMATH_NAMESPACE::Vec4<double> >   { static const Py_ssize_t value = sizeof(double); };

} // namespace

#endif
                                                                                                                                                                                     usr/include/Imath/PyImathFixedMatrix.h                                                              0000644 0000000 0000000 00000060122 14330770346 016443  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright Contributors to the OpenEXR Project.
//

// clang-format off

#ifndef _PyImathFixedMatrix_h_
#define _PyImathFixedMatrix_h_

#include <boost/python.hpp>
#include <iostream>
#include "PyImathFixedArray.h"
#include "PyImathOperators.h"

namespace PyImath {

//
// Utility class for a runtime-specified fixed sized matrix type in python
//
template <class T>
class FixedMatrix
{
    T *     _ptr;
    int     _rows;
    int     _cols;
    int     _rowStride;
    int     _colStride;
    int *   _refcount; // refcount if allocated, null if externally allocated

  public:

    FixedMatrix(T *ptr, int rows, int cols, int rowStride = 1, int colStride = 1) 
        : _ptr(ptr), _rows(rows), _cols(cols),
          _rowStride(rowStride), _colStride(colStride), _refcount(0)
    {
        // nothing
    }

    FixedMatrix(int rows, int cols)
        : _ptr(new T[rows*cols]), _rows(rows), _cols(cols),
          _rowStride(1), _colStride(1), _refcount(new int(1))
    {
        // nothing
    }

    FixedMatrix(const FixedMatrix &other)
        : _ptr(other._ptr), _rows(other._rows), _cols(other._cols),
          _rowStride(other._rowStride), _colStride(other._colStride),
          _refcount(other._refcount)
    {
        if (_refcount) *_refcount += 1;
    }
        
    const FixedMatrix &
    operator = (const FixedMatrix &other)
    {
        if (&other == this) return *this;
        unref();
        _ptr = other._ptr;
        _rows = other._rows;
        _cols = other._cols;
        _rowStride = other._rowStride;
        _colStride = other._colStride;
        _refcount = other._refcount;

        if (_refcount) *_refcount += 1;
        return *this;
    }

    void
    unref()
    {
        if (_refcount) {
            *_refcount -= 1;
            if (*_refcount == 0) {
                delete [] _ptr;
                delete _refcount;
            }
        }
        _ptr = 0;
        _rows = 0;
        _cols = 0;
        _rowStride = 0;
        _colStride = 0;
        _refcount = 0;
    }

    ~FixedMatrix()
    {
        unref();
    }
    
    Py_ssize_t convert_index(int index) const
    {
        if (index < 0) index += _rows;
        if (index >= _rows || index < 0) {
            PyErr_SetString(PyExc_IndexError, "Index out of range");
            boost::python::throw_error_already_set();
        }
        return index;
    }

    void extract_slice_indices(PyObject *index, Py_ssize_t &start, Py_ssize_t &end, Py_ssize_t &step, Py_ssize_t &slicelength) const
    {
        slicelength = 0;
        if (PySlice_Check(index)) {
#if PY_MAJOR_VERSION > 2
            PyObject *slice = index;
#else
            PySliceObject *slice = reinterpret_cast<PySliceObject *>(index);
#endif
            if (PySlice_GetIndicesEx(slice,_rows,&start,&end,&step,&slicelength) == -1) {
		    boost::python::throw_error_already_set();
            }
        } else if (PyInt_Check(index)) {
            Py_ssize_t i = convert_index(PyInt_AS_LONG(index));
            start = i; end = i+1; step = 1; slicelength = 1;
        } else {
            PyErr_SetString(PyExc_TypeError, "Object is not a slice");
	    boost::python::throw_error_already_set();
        }
        //std::cout << "Slice indices are " << start << " " << end << " " << step << " " << slicelength << std::endl;
    }

    const FixedArray<T> * getitem(int index) const
    {
        return new FixedArray<T>(const_cast<T *>(&_ptr[convert_index(index)*_rowStride*_cols*_colStride]),_cols,_colStride);
    }

    FixedMatrix  getslice(PyObject *index) const
    {
        Py_ssize_t start, end, step, slicelength;
        extract_slice_indices(index,start,end,step,slicelength);
        FixedMatrix f(slicelength,_cols);
        for (int i=0; i<slicelength; ++i) {
            for (int j=0; j<_cols; ++j) {
                f.element(i,j) = element((start+i*step),j);
            }
        }
        return f;
    }

    void
    setitem_scalar(PyObject *index, const T &data)
    {
        Py_ssize_t start, end, step, slicelength;
        extract_slice_indices(index,start,end,step,slicelength);
        for (int i=0; i<slicelength; ++i) {
            for (int j = 0; j < _cols; ++j) {
                element(start+i*step,j) = data;
            }
        }
    }

    void
    setitem_vector(PyObject *index, const FixedArray<T> &data)
    {
        Py_ssize_t start, end, step, slicelength;
        extract_slice_indices(index,start,end,step,slicelength);
        if (data.len() != _cols) {
            PyErr_SetString(PyExc_IndexError, "Dimensions of source do not match destination");
	    boost::python::throw_error_already_set();
        }
        for (int i=0; i<slicelength; ++i) {
            for (int j = 0; j < _cols; ++j) {
                element(start+i*step,j) = data[j];
            }
        }
    }

    void
    setitem_matrix(PyObject *index, const FixedMatrix &data)
    {
        Py_ssize_t start, end, step, slicelength;
        extract_slice_indices(index,start,end,step,slicelength);
        
        // we have a valid range of indices
        if (data.rows() != slicelength || data.cols() != cols()) {
            PyErr_SetString(PyExc_IndexError, "Dimensions of source do not match destination");
	    boost::python::throw_error_already_set();
        }
        for (int i=0; i<slicelength; ++i) {
            for (int j=0; j<cols(); ++j) {
                element(start+i*step,j) = data.element(i,j);
            }
        }
    }

    int         rows() const { return _rows; }
    int         cols() const { return _cols; }
    int         rowStride() const { return _rowStride; }
    int         colStride() const { return _colStride; }

    T & element(int i, int j) { return _ptr[i*_rowStride*_cols*_colStride+j*_colStride]; }
    const T & element(int i, int j) const { return _ptr[i*_rowStride*_cols*_colStride+j*_colStride]; }

    FixedArray<T> operator [] (int i) { return FixedArray<T>(&_ptr[i*_rowStride*_cols*_colStride],_cols,_colStride); }
    const FixedArray<T> operator [] (int i) const { return FixedArray<T>(const_cast<T *>(&_ptr[i*_rowStride*_cols*_colStride]),_cols,_colStride); }

    static boost::python::class_<FixedMatrix<T> > register_(const char *name, const char *doc)
    {
        boost::python::class_<FixedMatrix<T> > c(name,doc, boost::python::init<int,int>("return an uninitialized array of the specified rows and cols"));
        c
            .def("__getitem__", &FixedMatrix<T>::getslice)
            .def("__getitem__", &FixedMatrix<T>::getitem, boost::python::return_internal_reference<>()) 
            .def("__setitem__", &FixedMatrix<T>::setitem_scalar)
            .def("__setitem__", &FixedMatrix<T>::setitem_vector)
            .def("__setitem__", &FixedMatrix<T>::setitem_matrix)
            .def("__len__",&FixedMatrix<T>::rows)
            .def("rows",&FixedMatrix<T>::rows)
            .def("columns",&FixedMatrix<T>::cols)
            ;
        return c;
    }

    template <class T2>
    int match_dimension(const FixedMatrix<T2> &a1) const
    {
        if (rows() != a1.rows() || cols() != a1.cols()) {
            PyErr_SetString(PyExc_IndexError, "Dimensions of source do not match destination");
	    boost::python::throw_error_already_set();
        }
        return rows();
    }
};

// unary operation application
template <template <class,class> class Op, class T1, class Ret>
FixedMatrix<Ret> apply_matrix_unary_op(const FixedMatrix<T1> &a1)
{
    int rows = a1.rows();
    int cols = a1.cols();
    FixedMatrix<Ret> retval(rows,cols);
    for (int i=0;i<rows;++i) for (int j=0; j<cols; ++j) {
        retval.element(i,j) = Op<T1,Ret>::apply(a1.element(i,j));
    }
    return retval;
}

// binary operation application
template <template <class,class,class> class Op, class T1, class T2, class Ret>
FixedMatrix<Ret> apply_matrix_matrix_binary_op(const FixedMatrix<T1> &a1, const FixedMatrix<T2> &a2)
{
    int rows = a1.match_dimension(a2);
    int cols = a1.cols();
    FixedMatrix<Ret> retval(rows,cols);
    for (int i=0;i<rows;++i) for (int j=0; j<cols; ++j) {
        retval.element(i,j) = Op<T1,T2,Ret>::apply(a1.element(i,j),a2.element(i,j));
    }
    return retval;
}

template <template <class,class,class> class Op, class T1, class T2, class Ret>
FixedMatrix<Ret> apply_matrix_scalar_binary_op(const FixedMatrix<T1> &a1, const T2 &a2)
{
    int rows = a1.rows();
    int cols = a1.cols();
    FixedMatrix<Ret> retval(rows,cols);
    for (int i=0;i<rows;++i) for (int j=0; j<cols; ++j) {
        retval.element(i,j) = Op<T1,T2,Ret>::apply(a1.element(i,j),a2);
    }
    return retval;
}

template <template <class,class,class> class Op, class T1, class T2, class Ret>
FixedMatrix<Ret> apply_matrix_scalar_binary_rop(const FixedMatrix<T1> &a1, const T2 &a2)
{
    int rows = a1.rows();
    int cols = a1.cols();
    FixedMatrix<Ret> retval(rows,cols);
    for (int i=0;i<rows;++i) for (int j=0; j<cols; ++j) {
        retval.element(i,j) = Op<T2,T1,Ret>::apply(a2,a1.element(i,j));
    }
    return retval;
}

// in-place binary operation application
template <template <class,class> class Op, class T1, class T2>
FixedMatrix<T1> & apply_matrix_matrix_ibinary_op(FixedMatrix<T1> &a1, const FixedMatrix<T2> &a2)
{
    int rows = a1.match_dimension(a2);
    int cols = a1.cols();
    for (int i=0;i<rows;++i) for (int j=0; j<cols; ++j) {
        Op<T1,T2>::apply(a1.element(i,j),a2.element(i,j));
    }
    return a1;
}

// in-place binary operation application
template <template <class,class> class Op, class T1, class T2>
FixedMatrix<T1> & apply_matrix_scalar_ibinary_op(FixedMatrix<T1> &a1, const T2 &a2)
{
    int rows = a1.rows();
    int cols = a1.cols();
    for (int i=0;i<rows;++i) for (int j=0; j<cols; ++j) {
        Op<T1,T2>::apply(a1.element(i,j),a2);
    }
    return a1;
}

// PyObject* PyNumber_Add(	PyObject *o1, PyObject *o2)
template <class T> static FixedMatrix<T> operator + (const FixedMatrix<T> &a0, const FixedMatrix<T> &a1) { return apply_matrix_matrix_binary_op<op_add,T,T,T>(a0,a1); }
template <class T> static FixedMatrix<T> operator + (const FixedMatrix<T> &a0, const T &v1)              { return apply_matrix_scalar_binary_op<op_add,T,T,T>(a0,v1); }
template <class T> static FixedMatrix<T> operator + (const T &v1, const FixedMatrix<T> &a0)              { return a0+v1; }

// PyObject* PyNumber_Subtract(	PyObject *o1, PyObject *o2)
template <class T> static FixedMatrix<T> operator - (const FixedMatrix<T> &a0, const FixedMatrix<T> &a1) { return apply_matrix_matrix_binary_op<op_sub,T,T,T>(a0,a1); }
template <class T> static FixedMatrix<T> operator - (const FixedMatrix<T> &a0, const T &v1)              { return apply_matrix_scalar_binary_op<op_sub,T,T,T>(a0,v1); }
template <class T> static FixedMatrix<T> operator - (const T &v1, const FixedMatrix<T> &a0)              { return apply_matrix_scalar_binary_op<op_rsub,T,T,T>(a0,v1); }

// PyObject* PyNumber_Multiply(	PyObject *o1, PyObject *o2)
template <class T> static FixedMatrix<T> operator * (const FixedMatrix<T> &a0, const FixedMatrix<T> &a1) { return apply_matrix_matrix_binary_op<op_mul,T,T,T>(a0,a1); }
template <class T> static FixedMatrix<T> operator * (const FixedMatrix<T> &a0, const T &v1)              { return apply_matrix_scalar_binary_op<op_mul,T,T,T>(a0,v1); }
template <class T> static FixedMatrix<T> operator * (const T &v1, const FixedMatrix<T> &a0)              { return a0*v1; }

// PyObject* PyNumber_Divide(	PyObject *o1, PyObject *o2)
template <class T> static FixedMatrix<T> operator / (const FixedMatrix<T> &a0, const FixedMatrix<T> &a1) { return apply_matrix_matrix_binary_op<op_div,T,T,T>(a0,a1); }
template <class T> static FixedMatrix<T> operator / (const FixedMatrix<T> &a0, const T &v1)              { return apply_matrix_scalar_binary_op<op_div,T,T,T>(a0,v1); }
// no reversed scalar/matrix divide - no meaning

// PyObject* PyNumber_FloorDivide(	PyObject *o1, PyObject *o2)
// PyObject* PyNumber_TrueDivide(	PyObject *o1, PyObject *o2)
// PyObject* PyNumber_Remainder(	PyObject *o1, PyObject *o2)
template <class T> static FixedMatrix<T> operator % (const FixedMatrix<T> &a0, const FixedMatrix<T> &a1) { return apply_matrix_matrix_binary_op<op_mod,T,T,T>(a0,a1); }
template <class T> static FixedMatrix<T> operator % (const FixedMatrix<T> &a0, const T &v1)              { return apply_matrix_scalar_binary_op<op_mod,T,T,T>(a0,v1); }
// no reversed scalar%matrix remainder - no meaning

// PyObject* PyNumber_Divmod(	PyObject *o1, PyObject *o2)

// PyObject* PyNumber_Power(	PyObject *o1, PyObject *o2, PyObject *o3)
template <class T> static FixedMatrix<T> pow_matrix_matrix (const FixedMatrix<T> &a0, const FixedMatrix<T> &a1) { return apply_matrix_matrix_binary_op<op_pow,T,T,T>(a0,a1); }
template <class T> static FixedMatrix<T> pow_matrix_scalar (const FixedMatrix<T> &a0, const T &v1)              { return apply_matrix_scalar_binary_op<op_pow,T,T,T>(a0,v1); }
// no reversed scalar/matrix pow - no meaning

// PyObject* PyNumber_Negative(	PyObject *o)
template <class T> static FixedMatrix<T> operator - (const FixedMatrix<T> &a0) { return apply_matrix_unary_op<op_neg,T,T>(a0); }

// PyObject* PyNumber_Positive(	PyObject *o)

// PyObject* PyNumber_Absolute(	PyObject *o)
template <class T> static FixedMatrix<T> abs (const FixedMatrix<T> &a0)        { return apply_matrix_unary_op<op_abs,T,T>(a0); }

// PyObject* PyNumber_Invert(	PyObject *o)
template <class T> static FixedMatrix<T> operator ~ (const FixedMatrix<T> &a0) { return apply_matrix_unary_op<op_inverse,T,T>(a0); }

// PyObject* PyNumber_Lshift(	PyObject *o1, PyObject *o2)
template <class T> static FixedMatrix<T> operator << (const FixedMatrix<T> &a0, const FixedMatrix<T> &a1) { return apply_matrix_matrix_binary_op<op_lshift,T,T,T>(a0,a1); }
template <class T> static FixedMatrix<T> operator << (const FixedMatrix<T> &a0, const T &v1)              { return apply_matrix_scalar_binary_op<op_lshift,T,T,T>(a0,v1); }
// no reversed

// PyObject* PyNumber_Rshift(	PyObject *o1, PyObject *o2)
template <class T> static FixedMatrix<T> operator >> (const FixedMatrix<T> &a0, const FixedMatrix<T> &a1) { return apply_matrix_matrix_binary_op<op_rshift,T,T,T>(a0,a1); }
template <class T> static FixedMatrix<T> operator >> (const FixedMatrix<T> &a0, const T &v1)              { return apply_matrix_scalar_binary_op<op_rshift,T,T,T>(a0,v1); }
// no reversed

// PyObject* PyNumber_And(	PyObject *o1, PyObject *o2)
template <class T> static FixedMatrix<T> operator & (const FixedMatrix<T> &a0, const FixedMatrix<T> &a1) { return apply_matrix_matrix_binary_op<op_bitand,T,T,T>(a0,a1); }
template <class T> static FixedMatrix<T> operator & (const FixedMatrix<T> &a0, const T &v1)              { return apply_matrix_scalar_binary_op<op_bitand,T,T,T>(a0,v1); }
template <class T> static FixedMatrix<T> operator & (const T &v1, const FixedMatrix<T> &a0)              { return a0&v1; }

// PyObject* PyNumber_Xor(	PyObject *o1, PyObject *o2)
template <class T> static FixedMatrix<T> operator ^ (const FixedMatrix<T> &a0, const FixedMatrix<T> &a1) { return apply_matrix_matrix_binary_op<op_xor,T,T,T>(a0,a1); }
template <class T> static FixedMatrix<T> operator ^ (const FixedMatrix<T> &a0, const T &v1)              { return apply_matrix_scalar_binary_op<op_xor,T,T,T>(a0,v1); }
template <class T> static FixedMatrix<T> operator ^ (const T &v1, const FixedMatrix<T> &a0)              { return a0^v1; }

// PyObject* PyNumber_Or(	PyObject *o1, PyObject *o2)
template <class T> static FixedMatrix<T> operator | (const FixedMatrix<T> &a0, const FixedMatrix<T> &a1) { return apply_matrix_matrix_binary_op<op_bitor,T,T,T>(a0,a1); }
template <class T> static FixedMatrix<T> operator | (const FixedMatrix<T> &a0, const T &v1)              { return apply_matrix_scalar_binary_op<op_bitor,T,T,T>(a0,v1); }
template <class T> static FixedMatrix<T> operator | (const T &v1, const FixedMatrix<T> &a0)              { return a0|v1; }


// PyObject* PyNumber_InPlaceAdd(	PyObject *o1, PyObject *o2)
template <class T> static FixedMatrix<T> & operator += (FixedMatrix<T> &a0, const FixedMatrix<T> &a1) { return apply_matrix_matrix_ibinary_op<op_iadd,T,T>(a0,a1); }
template <class T> static FixedMatrix<T> & operator += (FixedMatrix<T> &a0, const T &v1)              { return apply_matrix_scalar_ibinary_op<op_iadd,T,T>(a0,v1); }

// PyObject* PyNumber_InPlaceSubtract(	PyObject *o1, PyObject *o2)
template <class T> static FixedMatrix<T> & operator -= (FixedMatrix<T> &a0, const FixedMatrix<T> &a1) { return apply_matrix_matrix_ibinary_op<op_isub,T,T>(a0,a1); }
template <class T> static FixedMatrix<T> & operator -= (FixedMatrix<T> &a0, const T &v1)              { return apply_matrix_scalar_ibinary_op<op_isub,T,T>(a0,v1); }
