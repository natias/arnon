=item C<HAS_USTAT>
X<HAS_USTAT>

This symbol, if defined, indicates that the C<ustat> system call is
available to query file system statistics by C<dev_t>.

=back

=for hackers
Found in file config.h

=over 4

=item C<I_FCNTL>
X<I_FCNTL>

This manifest constant tells the C program to include F<fcntl.h>.

=over 3

 #ifdef I_FCNTL
     #include <fcntl.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<I_SYS_DIR>
X<I_SYS_DIR>

This symbol, if defined, indicates to the C program that it should
include F<sys/dir.h>.

=over 3

 #ifdef I_SYS_DIR
     #include <sys_dir.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<I_SYS_FILE>
X<I_SYS_FILE>

This symbol, if defined, indicates to the C program that it should
include F<sys/file.h> to get definition of C<R_OK> and friends.

=over 3

 #ifdef I_SYS_FILE
     #include <sys_file.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<I_SYS_NDIR>
X<I_SYS_NDIR>

This symbol, if defined, indicates to the C program that it should
include F<sys/ndir.h>.

=over 3

 #ifdef I_SYS_NDIR
     #include <sys_ndir.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<I_SYS_STATFS>
X<I_SYS_STATFS>

This symbol, if defined, indicates that F<sys/statfs.h> exists.

=over 3

 #ifdef I_SYS_STATFS
     #include <sys_statfs.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<LSEEKSIZE>
X<LSEEKSIZE>

This symbol holds the number of bytes used by the C<Off_t>.

=back

=for hackers
Found in file config.h

=over 4

=item C<RD_NODATA>
X<RD_NODATA>

This symbol holds the return code from C<read()> when no data is present
on the non-blocking file descriptor. Be careful! If C<EOF_NONBLOCK> is
not defined, then you can't distinguish between no data and C<EOF> by
issuing a C<read()>. You'll have to find another way to tell for sure!

=back

=for hackers
Found in file config.h

=over 4

=item C<READDIR64_R_PROTO>
X<READDIR64_R_PROTO>

This symbol encodes the prototype of C<readdir64_r>.
It is zero if C<d_readdir64_r> is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if C<d_readdir64_r>
is defined.

=back

=for hackers
Found in file config.h

=over 4

=item C<STDCHAR>
X<STDCHAR>

This symbol is defined to be the type of char used in F<stdio.h>.
It has the values "unsigned char" or "char".

=back

=for hackers
Found in file config.h

=over 4

=item C<STDIO_CNT_LVALUE>
X<STDIO_CNT_LVALUE>

This symbol is defined if the C<FILE_cnt> macro can be used as an
lvalue.

=back

=for hackers
Found in file config.h

=over 4

=item C<STDIO_PTR_LVAL_NOCHANGE_CNT>
X<STDIO_PTR_LVAL_NOCHANGE_CNT>

This symbol is defined if using the C<FILE_ptr> macro as an lvalue
to increase the pointer by n leaves C<File_cnt(fp)> unchanged.

=back

=for hackers
Found in file config.h

=over 4

=item C<STDIO_PTR_LVAL_SETS_CNT>
X<STDIO_PTR_LVAL_SETS_CNT>

This symbol is defined if using the C<FILE_ptr> macro as an lvalue
to increase the pointer by n has the side effect of decreasing the
value of C<File_cnt(fp)> by n.

=back

=for hackers
Found in file config.h

=over 4

=item C<STDIO_PTR_LVALUE>
X<STDIO_PTR_LVALUE>

This symbol is defined if the C<FILE_ptr> macro can be used as an
lvalue.

=back

=for hackers
Found in file config.h

=over 4

=item C<STDIO_STREAM_ARRAY>
X<STDIO_STREAM_ARRAY>

This symbol tells the name of the array holding the stdio streams.
Usual values include C<_iob>, C<__iob>, and C<__sF>.

=back

=for hackers
Found in file config.h

=over 4

=item C<ST_INO_SIGN>
X<ST_INO_SIGN>

This symbol holds the signedness of C<struct stat>'s C<st_ino>.
1 for unsigned, -1 for signed.

=back

=for hackers
Found in file config.h

=over 4

=item C<ST_INO_SIZE>
X<ST_INO_SIZE>

This variable contains the size of C<struct stat>'s C<st_ino> in bytes.

=back

=for hackers
Found in file config.h

=over 4

=item C<VAL_EAGAIN>
X<VAL_EAGAIN>

This symbol holds the errno error code set by C<read()> when no data was
present on the non-blocking file descriptor.

=back

=for hackers
Found in file config.h

=over 4

=item C<VAL_O_NONBLOCK>
X<VAL_O_NONBLOCK>

This symbol is to be used during C<open()> or C<fcntl(F_SETFL)> to turn on
non-blocking I/O for the file descriptor. Note that there is no way
back, i.e. you cannot turn it blocking again this way. If you wish to
alternatively switch between blocking and non-blocking, use the
C<ioctl(FIOSNBIO)> call instead, but that is not supported by all devices.

=back

=for hackers
Found in file config.h

=over 4

=item C<VOID_CLOSEDIR>
X<VOID_CLOSEDIR>

This symbol, if defined, indicates that the C<closedir()> routine
does not return a value.

=back

=for hackers
Found in file config.h

=head1 Floating point

Also L</List of capability HAS_foo symbols> lists capabilities
that arent in this section.  For example C<HAS_ASINH>, for the
hyperbolic sine function.


=over 4

=item C<CASTFLAGS>
X<CASTFLAGS>

This symbol contains flags that say what difficulties the compiler
has casting odd floating values to unsigned long:

 0 = ok
 1 = couldn't cast < 0
 2 = couldn't cast >= 0x80000000
 4 = couldn't cast in argument expression list

=back

=for hackers
Found in file config.h

=over 4

=item C<CASTNEGFLOAT>
X<CASTNEGFLOAT>

This symbol is defined if the C compiler can cast negative
numbers to unsigned longs, ints and shorts.

=back

=for hackers
Found in file config.h

=over 4

=item C<DOUBLE_HAS_INF>
X<DOUBLE_HAS_INF>

This symbol, if defined, indicates that the double has
the infinity.

=back

=for hackers
Found in file config.h

=over 4

=item C<DOUBLE_HAS_NAN>
X<DOUBLE_HAS_NAN>

This symbol, if defined, indicates that the double has
the not-a-number.

=back

=for hackers
Found in file config.h

=over 4

=item C<DOUBLE_HAS_NEGATIVE_ZERO>
X<DOUBLE_HAS_NEGATIVE_ZERO>

This symbol, if defined, indicates that the double has
the C<negative_zero>.

=back

=for hackers
Found in file config.h

=over 4

=item C<DOUBLE_HAS_SUBNORMALS>
X<DOUBLE_HAS_SUBNORMALS>

This symbol, if defined, indicates that the double has
the subnormals (denormals).

=back

=for hackers
Found in file config.h

=over 4

=item C<DOUBLEINFBYTES>
X<DOUBLEINFBYTES>

This symbol, if defined, is a comma-separated list of
hexadecimal bytes for the double precision infinity.

=back

=for hackers
Found in file config.h

=over 4

=item C<DOUBLEKIND>
X<DOUBLEKIND>

C<DOUBLEKIND> will be one of
C<DOUBLE_IS_IEEE_754_32_BIT_LITTLE_ENDIAN>
C<DOUBLE_IS_IEEE_754_32_BIT_BIG_ENDIAN>
C<DOUBLE_IS_IEEE_754_64_BIT_LITTLE_ENDIAN>
C<DOUBLE_IS_IEEE_754_64_BIT_BIG_ENDIAN>
C<DOUBLE_IS_IEEE_754_128_BIT_LITTLE_ENDIAN>
C<DOUBLE_IS_IEEE_754_128_BIT_BIG_ENDIAN>
C<DOUBLE_IS_IEEE_754_64_BIT_MIXED_ENDIAN_LE_BE>
C<DOUBLE_IS_IEEE_754_64_BIT_MIXED_ENDIAN_BE_LE>
C<DOUBLE_IS_VAX_F_FLOAT>
C<DOUBLE_IS_VAX_D_FLOAT>
C<DOUBLE_IS_VAX_G_FLOAT>
C<DOUBLE_IS_IBM_SINGLE_32_BIT>
C<DOUBLE_IS_IBM_DOUBLE_64_BIT>
C<DOUBLE_IS_CRAY_SINGLE_64_BIT>
C<DOUBLE_IS_UNKNOWN_FORMAT>

=back

=for hackers
Found in file config.h

=over 4

=item C<DOUBLEMANTBITS>
X<DOUBLEMANTBITS>

This symbol, if defined, tells how many mantissa bits
there are in double precision floating point format.
Note that this is usually C<DBL_MANT_DIG> minus one, since
with the standard C<IEEE> 754 formats C<DBL_MANT_DIG> includes
the implicit bit, which doesn't really exist.

=back

=for hackers
Found in file config.h

=over 4

=item C<DOUBLENANBYTES>
X<DOUBLENANBYTES>

This symbol, if defined, is a comma-separated list of
hexadecimal bytes (0xHH) for the double precision not-a-number.

=back

=for hackers
Found in file config.h

=over 4

=item C<DOUBLESIZE>
X<DOUBLESIZE>

This symbol contains the size of a double, so that the C preprocessor
can make decisions based on it.

=back

=for hackers
Found in file config.h

=over 4

=item C<DOUBLE_STYLE_CRAY>
X<DOUBLE_STYLE_CRAY>

This symbol, if defined, indicates that the double is
the 64-bit C<CRAY> mainframe format.

=back

=for hackers
Found in file config.h

=over 4

=item C<DOUBLE_STYLE_IBM>
X<DOUBLE_STYLE_IBM>

This symbol, if defined, indicates that the double is
the 64-bit C<IBM> mainframe format.

=back

=for hackers
Found in file config.h

=over 4

=item C<DOUBLE_STYLE_IEEE>
X<DOUBLE_STYLE_IEEE>

This symbol, if defined, indicates that the double is
the 64-bit C<IEEE> 754.

=back

=for hackers
Found in file config.h

=over 4

=item C<DOUBLE_STYLE_VAX>
X<DOUBLE_STYLE_VAX>

This symbol, if defined, indicates that the double is
the 64-bit C<VAX> format D or G.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_ATOLF>
X<HAS_ATOLF>

This symbol, if defined, indicates that the C<atolf> routine is
available to convert strings into long doubles.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_CLASS>
X<HAS_CLASS>

This symbol, if defined, indicates that the C<class> routine is
available to classify doubles.  Available for example in C<AIX>.
The returned values are defined in F<float.h> and are:

 FP_PLUS_NORM    Positive normalized, nonzero
 FP_MINUS_NORM   Negative normalized, nonzero
 FP_PLUS_DENORM  Positive denormalized, nonzero
 FP_MINUS_DENORM Negative denormalized, nonzero
 FP_PLUS_ZERO    +0.0
 FP_MINUS_ZERO   -0.0
 FP_PLUS_INF     +INF
 FP_MINUS_INF    -INF
 FP_NANS         Signaling Not a Number (NaNS)
 FP_NANQ         Quiet Not a Number (NaNQ)

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FINITE>
X<HAS_FINITE>

This symbol, if defined, indicates that the C<finite> routine is
available to check whether a double is C<finite> (non-infinity non-NaN).

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FINITEL>
X<HAS_FINITEL>

This symbol, if defined, indicates that the C<finitel> routine is
available to check whether a long double is finite
(non-infinity non-NaN).

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FPCLASS>
X<HAS_FPCLASS>

This symbol, if defined, indicates that the C<fpclass> routine is
available to classify doubles.  Available for example in Solaris/C<SVR4>.
The returned values are defined in F<ieeefp.h> and are:

 FP_SNAN         signaling NaN
 FP_QNAN         quiet NaN
 FP_NINF         negative infinity
 FP_PINF         positive infinity
 FP_NDENORM      negative denormalized non-zero
 FP_PDENORM      positive denormalized non-zero
 FP_NZERO        negative zero
 FP_PZERO        positive zero
 FP_NNORM        negative normalized non-zero
 FP_PNORM        positive normalized non-zero

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FP_CLASS>
X<HAS_FP_CLASS>

This symbol, if defined, indicates that the C<fp_class> routine is
available to classify doubles.  Available for example in Digital C<UNIX>.
The returned values are defined in F<math.h> and are:

 FP_SNAN           Signaling NaN (Not-a-Number)
 FP_QNAN           Quiet NaN (Not-a-Number)
 FP_POS_INF        +infinity
 FP_NEG_INF        -infinity
 FP_POS_NORM       Positive normalized
 FP_NEG_NORM       Negative normalized
 FP_POS_DENORM     Positive denormalized
 FP_NEG_DENORM     Negative denormalized
 FP_POS_ZERO       +0.0 (positive zero)
 FP_NEG_ZERO       -0.0 (negative zero)

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FPCLASSIFY>
X<HAS_FPCLASSIFY>

This symbol, if defined, indicates that the C<fpclassify> routine is
available to classify doubles.  Available for example in HP-UX.
The returned values are defined in F<math.h> and are

 FP_NORMAL     Normalized
 FP_ZERO       Zero
 FP_INFINITE   Infinity
 FP_SUBNORMAL  Denormalized
 FP_NAN        NaN



=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FP_CLASSIFY>
X<HAS_FP_CLASSIFY>

This symbol, if defined, indicates that the C<fp_classify> routine is
available to classify doubles. The values are defined in F<math.h>

 FP_NORMAL     Normalized
 FP_ZERO       Zero
 FP_INFINITE   Infinity
 FP_SUBNORMAL  Denormalized
 FP_NAN        NaN



=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FPCLASSL>
X<HAS_FPCLASSL>

This symbol, if defined, indicates that the C<fpclassl> routine is
available to classify long doubles.  Available for example in C<IRIX>.
The returned values are defined in F<ieeefp.h> and are:

 FP_SNAN         signaling NaN
 FP_QNAN         quiet NaN
 FP_NINF         negative infinity
 FP_PINF         positive infinity
 FP_NDENORM      negative denormalized non-zero
 FP_PDENORM      positive denormalized non-zero
 FP_NZERO        negative zero
 FP_PZERO        positive zero
 FP_NNORM        negative normalized non-zero
 FP_PNORM        positive normalized non-zero

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FP_CLASSL>
X<HAS_FP_CLASSL>

This symbol, if defined, indicates that the C<fp_classl> routine is
available to classify long doubles.  Available for example in
Digital C<UNIX>.  See for possible values C<HAS_FP_CLASS>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FPGETROUND>
X<HAS_FPGETROUND>

This symbol, if defined, indicates that the C<fpgetround> routine is
available to get the floating point rounding mode.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FREXPL>
X<HAS_FREXPL>

This symbol, if defined, indicates that the C<frexpl> routine is
available to break a long double floating-point number into
a normalized fraction and an integral power of 2.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_ILOGB>
X<HAS_ILOGB>

This symbol, if defined, indicates that the C<ilogb> routine is
available to get integer exponent of a floating-point value.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_ISFINITE>
X<HAS_ISFINITE>

This symbol, if defined, indicates that the C<isfinite> routine is
available to check whether a double is finite (non-infinity non-NaN).

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_ISFINITEL>
X<HAS_ISFINITEL>

This symbol, if defined, indicates that the C<isfinitel> routine is
available to check whether a long double is finite.
(non-infinity non-NaN).

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_ISINF>
X<HAS_ISINF>

This symbol, if defined, indicates that the C<isinf> routine is
available to check whether a double is an infinity.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_ISINFL>
X<HAS_ISINFL>

This symbol, if defined, indicates that the C<isinfl> routine is
available to check whether a long double is an infinity.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_ISNAN>
X<HAS_ISNAN>

This symbol, if defined, indicates that the C<isnan> routine is
available to check whether a double is a NaN.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_ISNANL>
X<HAS_ISNANL>

This symbol, if defined, indicates that the C<isnanl> routine is
available to check whether a long double is a NaN.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_ISNORMAL>
X<HAS_ISNORMAL>

This symbol, if defined, indicates that the C<isnormal> routine is
available to check whether a double is normal (non-zero normalized).

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_J0L>
X<HAS_J0L>

This symbol, if defined, indicates to the C program that the
C<j0l()> function is available for Bessel functions of the first
kind of the order zero, for long doubles.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_J0>
X<HAS_J0>

This symbol, if defined, indicates to the C program that the
C<j0()> function is available for Bessel functions of the first
kind of the order zero, for doubles.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LDBL_DIG>
X<HAS_LDBL_DIG>

This symbol, if defined, indicates that this system's F<float.h>
or F<limits.h> defines the symbol C<LDBL_DIG>, which is the number
of significant digits in a long double precision number. Unlike
for C<DBL_DIG>, there's no good guess for C<LDBL_DIG> if it is undefined.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LDEXPL>
X<HAS_LDEXPL>

This symbol, if defined, indicates that the C<ldexpl> routine is
available to shift a long double floating-point number
by an integral power of 2.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LLRINT>
X<HAS_LLRINT>

This symbol, if defined, indicates that the C<llrint> routine is
available to return the long long value closest to a double
(according to the current rounding mode).

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LLRINTL>
X<HAS_LLRINTL>

This symbol, if defined, indicates that the C<llrintl> routine is
available to return the long long value closest to a long double
(according to the current rounding mode).

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LLROUNDL>
X<HAS_LLROUNDL>

This symbol, if defined, indicates that the C<llroundl> routine is
available to return the nearest long long value away from zero of
the long double argument value.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LONG_DOUBLE>
X<HAS_LONG_DOUBLE>

This symbol will be defined if the C compiler supports long
doubles.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LRINT>
X<HAS_LRINT>

This symbol, if defined, indicates that the C<lrint> routine is
available to return the integral value closest to a double
(according to the current rounding mode).

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LRINTL>
X<HAS_LRINTL>

This symbol, if defined, indicates that the C<lrintl> routine is
available to return the integral value closest to a long double
(according to the current rounding mode).

=back

=for hackers
Found in file config.h

