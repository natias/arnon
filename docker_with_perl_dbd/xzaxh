	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10F1,
	0x10F7,
	0x10FB,
	0x10FD,
	0x1100,
	0x1200,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
	0x1390,
	0x1780,
	0x17A3,
	0x17A5,
	0x17A8,
	0x17A9,
	0x17B4,
	0x17B6,
	0x17CE,
	0x17D0,
	0x17D1,
	0x17D2,
	0x17D3,
	0x17D7,
	0x17D8,
	0x17DC,
	0x17DD,
	0x17E0,
	0x17EA,
	0x1C90,
	0x1CBB,
	0x1CBD,
	0x1CC0,
	0x1E00,
	0x1E9A,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F71,
	0x1F72,
	0x1F73,
	0x1F74,
	0x1F75,
	0x1F76,
	0x1F77,
	0x1F78,
	0x1F79,
	0x1F7A,
	0x1F7B,
	0x1F7C,
	0x1F7D,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBB,
	0x1FBC,
	0x1FBD,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC9,
	0x1FCA,
	0x1FCB,
	0x1FCC,
	0x1FCD,
	0x1FD0,
	0x1FD3,
	0x1FD6,
	0x1FDB,
	0x1FE0,
	0x1FE3,
	0x1FE4,
	0x1FEB,
	0x1FEC,
	0x1FED,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF9,
	0x1FFA,
	0x1FFB,
	0x1FFC,
	0x1FFD,
	0x200C,
	0x200E,
	0x2010,
	0x2011,
	0x2019,
	0x201A,
	0x2027,
	0x2028,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D80,
	0x2D97,
	0x2DA0,
	0x2DA7,
	0x2DA8,
	0x2DAF,
	0x2DB0,
	0x2DB7,
	0x2DB8,
	0x2DBF,
	0x2DC0,
	0x2DC7,
	0x2DC8,
	0x2DCF,
	0x2DD0,
	0x2DD7,
	0x2DD8,
	0x2DDF,
	0x3005,
	0x3008,
	0x3041,
	0x3097,
	0x3099,
	0x309B,
	0x309D,
	0x309F,
	0x30A0,
	0x30FF,
	0x3105,
	0x312E,
	0x312F,
	0x3130,
	0x31A0,
	0x31C0,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA000,
	0xA67F,
	0xA680,
	0xA717,
	0xA720,
	0xA788,
	0xA789,
	0xA78D,
	0xA78E,
	0xA792,
	0xA794,
	0xA7AA,
	0xA7AB,
	0xA7AE,
	0xA7AF,
	0xA7B8,
	0xA7BA,
	0xA7C0,
	0xA7CB,
	0xA7D0,
	0xA7D2,
	0xA7D3,
	0xA7D4,
	0xA7D5,
	0xA7DA,
	0xA9E7,
	0xA9FF,
	0xAA60,
	0xAA77,
	0xAA7A,
	0xAA80,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xAB66,
	0xAB68,
	0xAC00,
	0xD7A4,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0x11301,
	0x11302,
	0x11303,
	0x11304,
	0x1133B,
	0x1133D,
	0x16FF0,
	0x16FF2,
	0x1B11F,
	0x1B123,
	0x1B150,
	0x1B153,
	0x1B164,
	0x1B168,
	0x1DF00,
	0x1DF1F,
	0x1E7E0,
	0x1E7E7,
	0x1E7E8,
	0x1E7EC,
	0x1E7ED,
	0x1E7EF,
	0x1E7F0,
	0x1E7FF,
	0x20000,
	0x2A6E0,
	0x2A700,
	0x2B739,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x30000,
	0x3134B
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_IDENTIFIERTYPE__DEFAULTIGNORABLE_invlist[] = {  /* for ASCII/Latin1 */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAD,
	0xAE,
	0x34F,
	0x350,
	0x61C,
	0x61D,
	0x115F,
	0x1161,
	0x17B4,
	0x17B6,
	0x180B,
	0x1810,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x206A,
	0x3164,
	0x3165,
	0xFE00,
	0xFE10,
	0xFEFF,
	0xFF00,
	0xFFA0,
	0xFFA1,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_IDENTIFIERTYPE__DEFAULTIGNORABLE_invlist[] = {  /* for EBCDIC 1047 */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x34F,
	0x350,
	0x61C,
	0x61D,
	0x115F,
	0x1161,
	0x17B4,
	0x17B6,
	0x180B,
	0x1810,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x206A,
	0x3164,
	0x3165,
	0xFE00,
	0xFE10,
	0xFEFF,
	0xFF00,
	0xFFA0,
	0xFFA1,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_IDENTIFIERTYPE__DEFAULTIGNORABLE_invlist[] = {  /* for EBCDIC 037 */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x34F,
	0x350,
	0x61C,
	0x61D,
	0x115F,
	0x1161,
	0x17B4,
	0x17B6,
	0x180B,
	0x1810,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x206A,
	0x3164,
	0x3165,
	0xFE00,
	0xFE10,
	0xFEFF,
	0xFF00,
	0xFFA0,
	0xFFA1,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#  endif	/* EBCDIC 037 */

static const UV UNI_IDENTIFIERTYPE__EXCLUSION_invlist[] = {  /* for all charsets */
	443,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3E2,
	0x3F0,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x1680,
	0x169D,
	0x16A0,
	0x16EB,
	0x16EE,
	0x16F9,
	0x1700,
	0x1716,
	0x171F,
	0x1737,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1800,
	0x180B,
	0x1810,
	0x181A,
	0x1820,
	0x1879,
	0x1880,
	0x18AB,
	0x1A00,
	0x1A1C,
	0x1A1E,
	0x1A20,
	0x1CFA,
	0x1CFB,
	0x2C00,
	0x2C60,
	0x2C80,
	0x2CF4,
	0x2CF9,
	0x2D00,
	0xA840,
	0xA878,
	0xA930,
	0xA954,
	0xA95F,
	0xA960,
	0xA9CF,
	0xA9D0,
	0x10000,
	0x1000C,
	0x1000D,
	0x10027,
	0x10028,
	0x1003B,
	0x1003C,
	0x1003E,
	0x1003F,
	0x1004E,
	0x10050,
	0x1005E,
	0x10080,
	0x100FB,
	0x10100,
	0x10103,
	0x10107,
	0x10134,
	0x10137,
	0x10140,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10300,
	0x10324,
	0x1032D,
	0x1034B,
	0x10350,
	0x1037B,
	0x10380,
	0x1039E,
	0x1039F,
	0x103C4,
	0x103C8,
	0x103D6,
	0x10400,
	0x1049E,
	0x104A0,
	0x104AA,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x1057B,
	0x1057C,
	0x1058B,
	0x1058C,
	0x10593,
	0x10594,
	0x10596,
	0x10597,
	0x105A2,
	0x105A3,
	0x105B2,
	0x105B3,
	0x105BA,
	0x105BB,
	0x105BD,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10800,
	0x10806,
	0x10808,
	0x10809,
	0x1080A,
	0x10836,
	0x10837,
	0x10839,
	0x1083C,
	0x1083D,
	0x1083F,
	0x10856,
	0x10857,
	0x1089F,
	0x108A7,
	0x108B0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x1091C,
	0x1091F,
	0x1093A,
	0x1093F,
	0x10940,
	0x10980,
	0x109B8,
	0x109BC,
	0x109D0,
	0x109D2,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A36,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A49,
	0x10A50,
	0x10A59,
	0x10A60,
	0x10AA0,
	0x10AC0,
	0x10AE7,
	0x10AEB,
	0x10AF7,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B92,
	0x10B99,
	0x10B9D,
	0x10BA9,
	0x10BB0,
	0x10C00,
	0x10C49,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00,
	0x10E80,
	0x10EAA,
	0x10EAB,
	0x10EAE,
	0x10EB0,
	0x10EB2,
	0x10F00,
	0x10F28,
	0x10F30,
	0x10F5A,
	0x10F70,
	0x10F8A,
	0x10FB0,
	0x10FCC,
	0x10FE0,
	0x10FF7,
	0x11000,
	0x1104E,
	0x11052,
	0x11076,
	0x1107F,
	0x110C3,
	0x110CD,
	0x110CE,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11150,
	0x11177,
	0x11180,
	0x111E0,
	0x11200,
	0x11212,
	0x11213,
	0x1123F,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112AA,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11301,
	0x11302,
	0x11303,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133D,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11350,
	0x11351,
	0x11357,
	0x11358,
	0x1135D,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115DE,
	0x11600,
	0x11645,
	0x11650,
	0x1165A,
	0x11660,
	0x1166D,
	0x11680,
	0x116BA,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171B,
	0x1171D,
	0x1172C,
	0x11730,
	0x11747,
	0x11800,
	0x1183C,
	0x118A0,
	0x118F3,
	0x118FF,
	0x11907,
	0x11909,
	0x1190A,
	0x1190C,
	0x11914,
	0x11915,
	0x11917,
	0x11918,
	0x11936,
	0x11937,
	0x11939,
	0x1193B,
	0x11947,
	0x11950,
	0x1195A,
	0x119A0,
	0x119A8,
	0x119AA,
	0x119D8,
	0x119DA,
	0x119E5,
	0x11A00,
	0x11A48,
	0x11A50,
	0x11AA3,
	0x11AC0,
	0x11AF9,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C46,
	0x11C50,
	0x11C6D,
	0x11C70,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x11EE0,
	0x11EF9,
	0x12000,
	0x1239A,
	0x12400,
	0x1246F,
	0x12470,
	0x12475,
	0x12480,
	0x12544,
	0x12F90,
	0x12FF3,
	0x13000,
	0x1342F,
	0x13430,
	0x13439,
	0x14400,
	0x14647,
	0x16A40,
	0x16A5F,
	0x16A60,
	0x16A6A,
	0x16A6E,
	0x16ABF,
	0x16AC0,
	0x16ACA,
	0x16AD0,
	0x16AEE,
	0x16AF0,
	0x16AF6,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90,
	0x16E40,
	0x16E9B,
	0x16FE0,
	0x16FE2,
	0x16FE4,
	0x16FE5,
	0x17000,
	0x187F8,
	0x18800,
	0x18CD6,
	0x18D00,
	0x18D09,
	0x1B170,
	0x1B2FC,
	0x1BC00,
	0x1BC6B,
	0x1BC70,
	0x1BC7D,
	0x1BC80,
	0x1BC89,
	0x1BC90,
	0x1BC9A,
	0x1BC9C,
	0x1BCA0,
	0x1D800,
	0x1DA8C,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E290,
	0x1E2AF,
	0x1E800,
	0x1E8C5,
	0x1E8C7,
	0x1E8D7
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_IDENTIFIERTYPE__INCLUSION_invlist[] = {  /* for ASCII/Latin1 */
	31,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x27,
	0x28,
	0x2D,
	0x2F,
	0x3A,
	0x3B,
	0xB7,
	0xB8,
	0x375,
	0x376,
	0x58A,
	0x58B,
	0x5F3,
	0x5F5,
	0x6FD,
	0x6FF,
	0xF0B,
	0xF0C,
	0x200C,
	0x200E,
	0x2010,
	0x2011,
	0x2019,
	0x201A,
	0x2027,
	0x2028,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_IDENTIFIERTYPE__INCLUSION_invlist[] = {  /* for EBCDIC 1047 */
	33,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x60,
	0x61,
	0x7A,
	0x7B,
	0x7D,
	0x7E,
	0xB3,
	0xB4,
	0x375,
	0x376,
	0x58A,
	0x58B,
	0x5F3,
	0x5F5,
	0x6FD,
	0x6FF,
	0xF0B,
	0xF0C,
	0x200C,
	0x200E,
	0x2010,
	0x2011,
	0x2019,
	0x201A,
	0x2027,
	0x2028,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37
