=over 4

=item *

L<MakeMaker> has been updated to build manpages on cygwin.

=item *

Improved rebase behaviour

If a DLL is updated on cygwin the old imagebase address is reused.
This solves most rebase errors, especially when updating on core DLL's.
See L<http://www.tishler.net/jason/software/rebase/rebase-2.4.2.README> 
for more information.

=item *

Support for the standard cygwin dll prefix (needed for FFIs)

=item *

Updated build hints file

=back

=head3 FreeBSD 7

=over

=item * 

FreeBSD 7 no longer contains F</usr/bin/objformat>.  At build time,
Perl now skips the F<objformat> check for versions 7 and higher and
assumes ELF (5.12.1).

=back

=head3 HP-UX

=over 

=item *

Perl now allows B<-Duse64bitint> without promoting to C<use64bitall> on HP-UX
(5.12.1).

=back

=head3 IRIX

=over

=item *

Conversion of strings to floating-point numbers is now more accurate on
IRIX systems [perl #32380].

=back

=head3 Mac OS X

=over

=item *

Early versions of Mac OS X (Darwin) had buggy implementations of the
setregid(), setreuid(), setrgid(,) and setruid() functions, so Perl
would pretend they did not exist.

These functions are now recognised on Mac OS 10.5 (Leopard; Darwin 9) and
higher, as they have been fixed [perl #72990].

=back

=head3 MirBSD

=over

=item *

Previously if you built Perl with a shared F<libperl.so> on MirBSD (the
default config), it would work up to the installation; however, once
installed, it would be unable to find F<libperl>.  Path handling is now
treated as in the other BSD dialects.

=back

=head3 NetBSD

=over

=item *

The NetBSD hints file has been changed to make the system malloc the
default.

=back

=head3 OpenBSD

=over

=item *

OpenBSD E<gt> 3.7 has a new malloc implementation which is I<mmap>-based,
and as such can release memory back to the OS; however, Perl's use of
this malloc causes a substantial slowdown, so we now default to using
Perl's malloc instead [perl #75742].

=back

=head3 OpenVOS

=over

=item *

Perl now builds again with OpenVOS (formerly known as Stratus VOS)
[perl #78132] (5.12.3).

=back

=head3 Solaris

=over

=item *

DTrace is now supported on Solaris.  There used to be build failures, but
these have been fixed [perl #73630] (5.12.3).

=back

=head3 VMS

=over

=item *

Extension building on older (pre 7.3-2) VMS systems was broken because
configure.com hit the DCL symbol length limit of 1K.  We now work within
this limit when assembling the list of extensions in the core build (5.12.1).

=item *

We fixed configuring and building Perl with B<-Uuseperlio> (5.12.1).

=item *

C<PerlIOUnix_open> now honours the default permissions on VMS.

When C<perlio> became the default and C<unix> became the default bottom layer,
the most common path for creating files from Perl became C<PerlIOUnix_open>,
which has always explicitly used C<0666> as the permission mask.  This prevents
inheriting permissions from RMS defaults and ACLs, so to avoid that problem,
we now pass C<0777> to open().  In the VMS CRTL, C<0777> has a special
meaning over and above intersecting with the current umask; specifically, it
allows Unix syscalls to preserve native default permissions (5.12.3).

=item *

The shortening of symbols longer than 31 characters in the core C sources
and in extensions is now by default done by the C compiler rather than by
xsubpp (which could only do so for generated symbols in XS code).  You can
reenable xsubpp's symbol shortening by configuring with -Uuseshortenedsymbols,
but you'll have some work to do to get the core sources to compile.

=item *

Record-oriented files (record format variable or variable with fixed control)
opened for write by the C<perlio> layer will now be line-buffered to prevent the
introduction of spurious line breaks whenever the perlio buffer fills up.

=item *

F<git_version.h> is now installed on VMS.  This was an oversight in v5.12.0 which
caused some extensions to fail to build (5.12.2).

=item *

Several memory leaks in L<stat()|perlfunc/"stat FILEHANDLE"> have been fixed (5.12.2).

=item *

A memory leak in Perl_rename() due to a double allocation has been
fixed (5.12.2).

=item *

A memory leak in vms_fid_to_name() (used by realpath() and
realname()> has been fixed (5.12.2).

=back

=head3 Windows

See also L</"fork() emulation will not wait for signalled children"> and
L</"Perl source code is read in text mode on Windows">, above.

=over 4

=item *

Fixed build process for SDK2003SP1 compilers.

=item *

Compilation with Visual Studio 2010 is now supported.

=item *

When using old 32-bit compilers, the define C<_USE_32BIT_TIME_T> is now
set in C<$Config{ccflags}>.  This improves portability when compiling
XS extensions using new compilers, but for a Perl compiled with old 32-bit
compilers.

=item *

C<$Config{gccversion}> is now set correctly when Perl is built using the
mingw64 compiler from L<http://mingw64.org> [perl #73754].

=item *

When building Perl with the mingw64 x64 cross-compiler C<incpath>,
C<libpth>, C<ldflags>, C<lddlflags> and C<ldflags_nolargefiles> values
in F<Config.pm> and F<Config_heavy.pl> were not previously being set
correctly because, with that compiler, the include and lib directories
are not immediately below C<$(CCHOME)> (5.12.2).

=item *

The build process proceeds more smoothly with mingw and dmake when
F<C:\MSYS\bin> is in the PATH, due to a C<Cwd> fix.

=item *

Support for building with Visual C++ 2010 is now underway, but is not yet
complete.  See F<README.win32> or L<perlwin32> for more details.

=item *

The option to use an externally-supplied crypt(), or to build with no
crypt() at all, has been removed.  Perl supplies its own crypt()
implementation for Windows, and the political situation that required
this part of the distribution to sometimes be omitted is long gone.

=back

=head1 Internal Changes

=head2 New APIs

=head3 CLONE_PARAMS structure added to ease correct thread creation

Modules that create threads should now create C<CLONE_PARAMS> structures
by calling the new function Perl_clone_params_new(), and free them with
Perl_clone_params_del().  This will ensure compatibility with any future
changes to the internals of the C<CLONE_PARAMS> structure layout, and that
it is correctly allocated and initialised.

=head3 New parsing functions

Several functions have been added for parsing Perl statements and
expressions.  These functions are meant to be used by XS code invoked
during Perl parsing, in a recursive-descent manner, to allow modules to
augment the standard Perl syntax.

=over

=item *

L<parse_stmtseq()|perlapi/parse_stmtseq>
parses a sequence of statements, up to closing brace or EOF.

=item *

L<parse_fullstmt()|perlapi/parse_fullstmt>
parses a complete Perl statement, including optional label.

=item *

L<parse_barestmt()|perlapi/parse_barestmt>
parses a statement without a label.

=item *

L<parse_block()|perlapi/parse_block>
parses a code block.

=item *

L<parse_label()|perlapi/parse_label>
parses a statement label, separate from statements.

=item *

L<C<parse_fullexpr()>|perlapi/parse_fullexpr>,
L<C<parse_listexpr()>|perlapi/parse_listexpr>,
L<C<parse_termexpr()>|perlapi/parse_termexpr>, and
L<C<parse_arithexpr()>|perlapi/parse_arithexpr>
parse expressions at various precedence levels.

=back

=head3 Hints hash API

A new C API for introspecting the hinthash C<%^H> at runtime has been
added.  See C<cop_hints_2hv>, C<cop_hints_fetchpvn>, C<cop_hints_fetchpvs>,
C<cop_hints_fetchsv>, and C<hv_copy_hints_hv> in L<perlapi> for details.

A new, experimental API has been added for accessing the internal
structure that Perl uses for C<%^H>.  See the functions beginning with
C<cophh_> in L<perlapi>.

=head3 C interface to caller()

The C<caller_cx> function has been added as an XSUB-writer's equivalent of
caller().  See L<perlapi> for details.

=head3 Custom per-subroutine check hooks

XS code in an extension module can now annotate a subroutine (whether
implemented in XS or in Perl) so that nominated XS code will be called
at compile time (specifically as part of op checking) to change the op
tree of that subroutine.  The compile-time check function (supplied by
the extension module) can implement argument processing that can't be
expressed as a prototype, generate customised compile-time warnings,
perform constant folding for a pure function, inline a subroutine
consisting of sufficiently simple ops, replace the whole call with a
custom op, and so on.  This was previously all possible by hooking the
C<entersub> op checker, but the new mechanism makes it easy to tie the
hook to a specific subroutine.  See L<perlapi/cv_set_call_checker>.

To help in writing custom check hooks, several subtasks within standard
C<entersub> op checking have been separated out and exposed in the API.

=head3 Improved support for custom OPs

Custom ops can now be registered with the new C<custom_op_register> C
function and the C<XOP> structure.  This will make it easier to add new
properties of custom ops in the future.  Two new properties have been added
already, C<xop_class> and C<xop_peep>.

C<xop_class> is one of the OA_*OP constants.  It allows L<B> and other
introspection mechanisms to work with custom ops
that aren't BASEOPs.  C<xop_peep> is a pointer to
a function that will be called for ops of this
type from C<Perl_rpeep>.

See L<perlguts/Custom Operators> and L<perlapi/Custom Operators> for more
detail.

The old C<PL_custom_op_names>/C<PL_custom_op_descs> interface is still
supported but discouraged.

=head3 Scope hooks

It is now possible for XS code to hook into Perl's lexical scope
mechanism at compile time, using the new C<Perl_blockhook_register>
function.  See L<perlguts/"Compile-time scope hooks">.

=head3 The recursive part of the peephole optimizer is now hookable

In addition to C<PL_peepp>, for hooking into the toplevel peephole optimizer, a
C<PL_rpeepp> is now available to hook into the optimizer recursing into
side-chains of the optree.

=head3 New non-magical variants of existing functions

The following functions/macros have been added to the API.  The C<*_nomg>
macros are equivalent to their non-C<_nomg> variants, except that they ignore
get-magic.  Those ending in C<_flags> allow one to specify whether
get-magic is processed.

  sv_2bool_flags
  SvTRUE_nomg
  sv_2nv_flags
  SvNV_nomg
  sv_cmp_flags
  sv_cmp_locale_flags
  sv_eq_flags
  sv_collxfrm_flags

In some of these cases, the non-C<_flags> functions have
been replaced with wrappers around the new functions. 

=head3 pv/pvs/sv versions of existing functions

Many functions ending with pvn now have equivalent C<pv/pvs/sv> versions.

=head3 List op-building functions

List op-building functions have been added to the
API.  See L<op_append_elem|perlapi/op_append_elem>,
L<op_append_list|perlapi/op_append_list>, and
L<op_prepend_elem|perlapi/op_prepend_elem> in L<perlapi>.

=head3 C<LINKLIST>

The L<LINKLIST|perlapi/LINKLIST> macro, part of op building that
constructs the execution-order op chain, has been added to the API.

=head3 Localisation functions

The C<save_freeop>, C<save_op>, C<save_pushi32ptr> and C<save_pushptrptr>
functions have been added to the API.

=head3 Stash names

A stash can now have a list of effective names in addition to its usual
name.  The first effective name can be accessed via the C<HvENAME> macro,
which is now the recommended name to use in MRO linearisations (C<HvNAME>
being a fallback if there is no C<HvENAME>).

These names are added and deleted via C<hv_ename_add> and
C<hv_ename_delete>.  These two functions are I<not> part of the API.

=head3 New functions for finding and removing magic

The L<C<mg_findext()>|perlapi/mg_findext> and
L<C<sv_unmagicext()>|perlapi/sv_unmagicext>
functions have been added to the API.
They allow extension authors to find and remove magic attached to
scalars based on both the magic type and the magic virtual table, similar to how
sv_magicext() attaches magic of a certain type and with a given virtual table
to a scalar.  This eliminates the need for extensions to walk the list of
C<MAGIC> pointers of an C<SV> to find the magic that belongs to them.

=head3 C<find_rundefsv>

This function returns the SV representing C<$_>, whether it's lexical
or dynamic.

=head3 C<Perl_croak_no_modify>

Perl_croak_no_modify() is short-hand for
C<Perl_croak("%s", PL_no_modify)>.

=head3 C<PERL_STATIC_INLINE> define

The C<PERL_STATIC_INLINE> define has been added to provide the best-guess
incantation to use for static inline functions, if the C compiler supports
C99-style static inline.  If it doesn't, it'll give a plain C<static>.

C<HAS_STATIC_INLINE> can be used to check if the compiler actually supports
inline functions.

=head3 New C<pv_escape> option for hexadecimal escapes

A new option, C<PERL_PV_ESCAPE_NONASCII>, has been added to C<pv_escape> to
dump all characters above ASCII in hexadecimal.  Before, one could get all
characters as hexadecimal or the Latin1 non-ASCII as octal.

=head3 C<lex_start>

C<lex_start> has been added to the API, but is considered experimental.

=head3 op_scope() and op_lvalue()

The op_scope() and op_lvalue() functions have been added to the API,
but are considered experimental.

=head2 C API Changes

=head3 C<PERL_POLLUTE> has been removed

The option to define C<PERL_POLLUTE> to expose older 5.005 symbols for
backwards compatibility has been removed.  Its use was always discouraged,
and MakeMaker contains a more specific escape hatch:

    perl Makefile.PL POLLUTE=1

This can be used for modules that have not been upgraded to 5.6 naming
conventions (and really should be completely obsolete by now).

=head3 Check API compatibility when loading XS modules

When Perl's API changes in incompatible ways (which usually happens between
major releases), XS modules compiled for previous versions of Perl will no
longer work.  They need to be recompiled against the new Perl.

The C<XS_APIVERSION_BOOTCHECK> macro has been added to ensure that modules
are recompiled and to prevent users from accidentally loading modules
compiled for old perls into newer perls.  That macro, which is called when
loading every newly compiled extension, compares the API version of the
running perl with the version a module has been compiled for and raises an
exception if they don't match.

=head3 Perl_fetch_cop_label

The first argument of the C API function C<Perl_fetch_cop_label> has changed
from C<struct refcounted_he *> to C<COP *>, to insulate the user from
implementation details.

This API function was marked as "may change", and likely isn't in use outside
the core.  (Neither an unpacked CPAN nor Google's codesearch finds any other
references to it.)

=head3 GvCV() and GvGP() are no longer lvalues

The new GvCV_set() and GvGP_set() macros are now provided to replace
assignment to those two macros.

This allows a future commit to eliminate some backref magic between GV
and CVs, which will require complete control over assignment to the
C<gp_cv> slot.

=head3 CvGV() is no longer an lvalue

Under some circumstances, the CvGV() field of a CV is now
reference-counted.  To ensure consistent behaviour, direct assignment to
it, for example C<CvGV(cv) = gv> is now a compile-time error.  A new macro,
C<CvGV_set(cv,gv)> has been introduced to run this operation
safely.  Note that modification of this field is not part of the public
API, regardless of this new macro (and despite its being listed in this section).

=head3 CvSTASH() is no longer an lvalue

The CvSTASH() macro can now only be used as an rvalue.  CvSTASH_set()
has been added to replace assignment to CvSTASH().  This is to ensure
that backreferences are handled properly.  These macros are not part of the
API.

=head3 Calling conventions for C<newFOROP> and C<newWHILEOP>

The way the parser handles labels has been cleaned up and refactored.  As a
result, the newFOROP() constructor function no longer takes a parameter
stating what label is to go in the state op.

The newWHILEOP() and newFOROP() functions no longer accept a line
number as a parameter.

=head3 Flags passed to C<uvuni_to_utf8_flags> and C<utf8n_to_uvuni>

Some of the flags parameters to uvuni_to_utf8_flags() and
utf8n_to_uvuni() have changed.  This is a result of Perl's now allowing
internal storage and manipulation of code points that are problematic
in some situations.  Hence, the default actions for these functions has
been complemented to allow these code points.  The new flags are
documented in L<perlapi>.  Code that requires the problematic code
points to be rejected needs to change to use the new flags.  Some flag
names are retained for backward source compatibility, though they do
nothing, as they are now the default.  However the flags
C<UNICODE_ALLOW_FDD0>, C<UNICODE_ALLOW_FFFF>, C<UNICODE_ILLEGAL>, and
C<UNICODE_IS_ILLEGAL> have been removed, as they stem from a
fundamentally broken model of how the Unicode non-character code points
should be handled, which is now described in
L<perlunicode/Non-character code points>.  See also the Unicode section
under L</Selected Bug Fixes>.

=head2 Deprecated C APIs

=over

=item C<Perl_ptr_table_clear>

C<Perl_ptr_table_clear> is no longer part of Perl's public API.  Calling it
now generates a deprecation warning, and it will be removed in a future
release.

=item C<sv_compile_2op>

The sv_compile_2op() API function is now deprecated.  Searches suggest
that nothing on CPAN is using it, so this should have zero impact.

It attempted to provide an API to compile code down to an optree, but failed
to bind correctly to lexicals in the enclosing scope.  It's not possible to
fix this problem within the constraints of its parameters and return value.

=item C<find_rundefsvoffset>

The C<find_rundefsvoffset> function has been deprecated.  It appeared that
its design was insufficient for reliably getting the lexical C<$_> at
run-time.

Use the new C<find_rundefsv> function or the C<UNDERBAR> macro
instead.  They directly return the right SV
representing C<$_>, whether it's
lexical or dynamic.

=item C<CALL_FPTR> and C<CPERLscope>

Those are left from an old implementation of C<MULTIPLICITY> using C++ objects,
which was removed in Perl 5.8.  Nowadays these macros do exactly nothing, so
they shouldn't be used anymore.

For compatibility, they are still defined for external C<XS> code.  Only
extensions defining C<PERL_CORE> must be updated now.

=back

=head2 Other Internal Changes

=head3 Stack unwinding

The protocol for unwinding the C stack at the last stage of a C<die>
has changed how it identifies the target stack frame.  This now uses
a separate variable C<PL_restartjmpenv>, where previously it relied on
the C<blk_eval.cur_top_env> pointer in the C<eval> context frame that
has nominally just been discarded.  This change means that code running
during various stages of Perl-level unwinding no longer needs to take
care to avoid destroying the ghost frame.

=head3 Scope stack entries

The format of entries on the scope stack has been changed, resulting in a
reduction of memory usage of about 10%.  In particular, the memory used by
the scope stack to record each active lexical variable has been halved.

=head3 Memory allocation for pointer tables

Memory allocation for pointer tables has been changed.  Previously
C<Perl_ptr_table_store> allocated memory from the same arena system as
C<SV> bodies and C<HE>s, with freed memory remaining bound to those arenas
until interpreter exit.  Now it allocates memory from arenas private to the
specific pointer table, and that memory is returned to the system when
C<Perl_ptr_table_free> is called.  Additionally, allocation and release are
both less CPU intensive.

=head3 C<UNDERBAR>

The C<UNDERBAR> macro now calls C<find_rundefsv>.  C<dUNDERBAR> is now a
noop but should still be used to ensure past and future compatibility.

=head3 String comparison routines renamed

The C<ibcmp_*> functions have been renamed and are now called C<foldEQ>,
C<foldEQ_locale>, and C<foldEQ_utf8>.  The old names are still available as
macros.

=head3 C<chop> and C<chomp> implementations merged

The opcode bodies for C<chop> and C<chomp> and for C<schop> and C<schomp>
have been merged.  The implementation functions Perl_do_chop() and
Perl_do_chomp(), never part of the public API, have been merged and
moved to a static function in F<pp.c>.  This shrinks the Perl binary
slightly, and should not affect any code outside the core (unless it is
relying on the order of side-effects when C<chomp> is passed a I<list> of
values).

=head1 Selected Bug Fixes

=head2 I/O

=over 4

=item *

Perl no longer produces this warning:

    $ perl -we 'open(my $f, ">", \my $x); binmode($f, "scalar")'
    Use of uninitialized value in binmode at -e line 1.

=item *

Opening a glob reference via C<< open($fh, ">", \*glob) >> no longer
causes the glob to be corrupted when the filehandle is printed to.  This would
cause Perl to crash whenever the glob's contents were accessed
[perl #77492].

=item *

PerlIO no longer crashes when called recursively, such as from a signal
handler.  Now it just leaks memory [perl #75556].

=item *

Most I/O functions were not warning for unopened handles unless the
"closed" and "unopened" warnings categories were both enabled.  Now only
C<use warnings 'unopened'> is necessary to trigger these warnings, as
had always been the intention.

=item *

There have been several fixes to PerlIO layers:

When C<binmode(FH, ":crlf")> pushes the C<:crlf> layer on top of the stack,
it no longer enables crlf layers lower in the stack so as to avoid
unexpected results [perl #38456].

Opening a file in C<:raw> mode now does what it advertises to do (first
open the file, then C<binmode> it), instead of simply leaving off the top
layer [perl #80764].

The three layers C<:pop>, C<:utf8>, and C<:bytes> didn't allow stacking when
opening a file.  For example
this:

    open(FH, ">:pop:perlio", "some.file") or die $!;

would throw an "Invalid argument" error.  This has been fixed in this
release [perl #82484].

=back

=head2 Regular Expression Bug Fixes

=over

=item *

The regular expression engine no longer loops when matching
C<"\N{LATIN SMALL LIGATURE FF}" =~ /f+/i> and similar expressions
[perl #72998] (5.12.1).

=item *

The trie runtime code should no longer allocate massive amounts of memory,
fixing #74484.

=item *

Syntax errors in C<< (?{...}) >> blocks no longer cause panic messages
[perl #2353].

=item *

A pattern like C<(?:(o){2})?> no longer causes a "panic" error
[perl #39233].

=item *

A fatal error in regular expressions containing C<(.*?)> when processing
UTF-8 data has been fixed [perl #75680] (5.12.2).

=item *

An erroneous regular expression engine optimisation that caused regex verbs like
C<*COMMIT> sometimes to be ignored has been removed.

=item *

The regular expression bracketed character class C<[\8\9]> was effectively the
same as C<[89\000]>, incorrectly matching a NULL character.  It also gave
incorrect warnings that the C<8> and C<9> were ignored.  Now C<[\8\9]> is the
same as C<[89]> and gives legitimate warnings that C<\8> and C<\9> are
unrecognized escape sequences, passed-through.

=item *

A regular expression match in the right-hand side of a global substitution
(C<s///g>) that is in the same scope will no longer cause match variables
to have the wrong values on subsequent iterations.  This can happen when an
array or hash subscript is interpolated in the right-hand side, as in
C<s|(.)|@a{ print($1), /./ }|g> [perl #19078].

=item *

Several cases in which characters in the Latin-1 non-ASCII range (0x80 to
0xFF) used not to match themselves, or used to match both a character class
and its complement, have been fixed.  For instance, U+00E2 could match both
C<\w> and C<\W> [perl #78464] [perl #18281] [perl #60156].

=item *

Matching a Unicode character against an alternation containing characters
that happened to match continuation bytes in the former's UTF8
representation (like C<qq{\x{30ab}} =~ /\xab|\xa9/>) would cause erroneous
warnings [perl #70998].

=item *

The trie optimisation was not taking empty groups into account, preventing
"foo" from matching C</\A(?:(?:)foo|bar|zot)\z/> [perl #78356].

=item *

A pattern containing a C<+> inside a lookahead would sometimes cause an
incorrect match failure in a global match (for example, C</(?=(\S+))/g>)
[perl #68564].

=item *

A regular expression optimisation would sometimes cause a match with a
C<{n,m}> quantifier to fail when it should have matched [perl #79152].

=item *

Case-insensitive matching in regular expressions compiled under
C<use locale> now works much more sanely when the pattern or target
string is internally encoded in UTF8.  Previously, under these
conditions the localeness was completely lost.  Now, code points
above 255 are treated as Unicode, but code points between 0 and 255
are treated using the current locale rules, regardless of whether
the pattern or the string is encoded in UTF8.  The few case-insensitive
matches that cross the 255/256 boundary are not allowed.  For
example, 0xFF does not caselessly match the character at 0x178,
LATIN CAPITAL LETTER Y WITH DIAERESIS, because 0xFF may not be LATIN
SMALL LETTER Y in the current locale, and Perl has no way of knowing
if that character even exists in the locale, much less what code
point it is.

=item *

The C<(?|...)> regular expression construct no longer crashes if the final
branch has more sets of capturing parentheses than any other branch.  This
was fixed in Perl 5.10.1 for the case of a single branch, but that fix did
not take multiple branches into account [perl #84746].

=item *

A bug has been fixed in the implementation of C<{...}> quantifiers in
regular expressions that prevented the code block in
C</((\w+)(?{ print $2 })){2}/> from seeing the C<$2> sometimes
[perl #84294].

=back

=head2 Syntax/Parsing Bugs

=over

=item *

C<when (scalar) {...}> no longer crashes, but produces a syntax error
[perl #74114] (5.12.1).

=item *

A label right before a string eval (C<foo: eval $string>) no longer causes
the label to be associated also with the first statement inside the eval
[perl #74290] (5.12.1).

=item *

The C<no 5.13.2> form of C<no> no longer tries to turn on features or
pragmata (like L<strict>) [perl #70075] (5.12.2).

=item *

C<BEGIN {require 5.12.0}> now behaves as documented, rather than behaving
identically to C<use 5.12.0>.  Previously, C<require> in a C<BEGIN> block
was erroneously executing the C<use feature ':5.12.0'> and
C<use strict> behaviour, which only C<use> was documented to
provide [perl #69050].

=item *

A regression introduced in Perl 5.12.0, making
C<< my $x = 3; $x = length(undef) >> result in C<$x> set to C<3> has been
fixed.  C<$x> will now be C<undef> [perl #85508] (5.12.2).

=item *

When strict "refs" mode is off, C<%{...}> in rvalue context returns
C<undef> if its argument is undefined.  An optimisation introduced in Perl
5.12.0 to make C<keys %{...}> faster when used as a boolean did not take
this into account, causing C<keys %{+undef}> (and C<keys %$foo> when
C<$foo> is undefined) to be an error, which it should be so in strict
mode only [perl #81750].

=item *

Constant-folding used to cause

  $text =~ ( 1 ? /phoo/ : /bear/)

to turn into

  $text =~ /phoo/

at compile time.  Now it correctly matches against C<$_> [perl #20444].

=item *

Parsing Perl code (either with string C<eval> or by loading modules) from
within a C<UNITCHECK> block no longer causes the interpreter to crash
[perl #70614].

=item *

String C<eval>s no longer fail after 2 billion scopes have been
compiled [perl #83364].

=item *

The parser no longer hangs when encountering certain Unicode characters,
such as U+387 [perl #74022].

=item *

Defining a constant with the same name as one of Perl's special blocks
(like C<INIT>) stopped working in 5.12.0, but has now been fixed
[perl #78634].

=item *

A reference to a literal value used as a hash key (C<$hash{\"foo"}>) used
to be stringified, even if the hash was tied [perl #79178].

=item *

A closure containing an C<if> statement followed by a constant or variable
is no longer treated as a constant [perl #63540].

=item *

C<state> can now be used with attributes.  It
used to mean the same thing as
C<my> if any attributes were present [perl #68658].

=item *

Expressions like C<< @$a > 3 >> no longer cause C<$a> to be mentioned in
the "Use of uninitialized value in numeric gt" warning when C<$a> is
undefined (since it is not part of the C<< > >> expression, but the operand
of the C<@>) [perl #72090].

=item *

Accessing an element of a package array with a hard-coded number (as
opposed to an arbitrary expression) would crash if the array did not exist.
Usually the array would be autovivified during compilation, but typeglob
manipulation could remove it, as in these two cases which used to crash:

  *d = *a;  print $d[0];
  undef *d; print $d[0];

=item *

The B<-C> command-line option, when used on the shebang line, can now be
followed by other options [perl #72434].

=item *

The C<B> module was returning C<B::OP>s instead of C<B::LOGOP>s for
C<entertry> [perl #80622].  This was due to a bug in the Perl core,
not in C<B> itself.

=back

=head2 Stashes, Globs and Method Lookup

Perl 5.10.0 introduced a new internal mechanism for caching MROs (method
resolution orders, or lists of parent classes; aka "isa" caches) to make
method lookup faster (so C<@ISA> arrays would not have to be searched
repeatedly).  Unfortunately, this brought with it quite a few bugs.  Almost
all of these have been fixed now, along with a few MRO-related bugs that
existed before 5.10.0:

=over

=item *

The following used to have erratic effects on method resolution, because
the "isa" caches were not reset or otherwise ended up listing the wrong
classes.  These have been fixed.

=over

=item Aliasing packages by assigning to globs [perl #77358]

=item Deleting packages by deleting their containing stash elements

=item Undefining the glob containing a package (C<undef *Foo::>)

=item Undefining an ISA glob (C<undef *Foo::ISA>)

=item Deleting an ISA stash element (C<delete $Foo::{ISA}>)

=item Sharing @ISA arrays between classes (via C<*Foo::ISA = \@Bar::ISA> or
C<*Foo::ISA = *Bar::ISA>) [perl #77238]

=back

C<undef *Foo::ISA> would even stop a new C<@Foo::ISA> array from updating
caches.

=item *

Typeglob assignments would crash if the glob's stash no longer existed, so
long as the glob assigned to were named C<ISA> or the glob on either side of
the assignment contained a subroutine.

=item *

C<PL_isarev>, which is accessible to Perl via C<mro::get_isarev> is now
updated properly when packages are deleted or removed from the C<@ISA> of
other classes.  This allows many packages to be created and deleted without
causing a memory leak [perl #75176].

=back

In addition, various other bugs related to typeglobs and stashes have been
fixed:

=over 

=item *

Some work has been done on the internal pointers that link between symbol
tables (stashes), typeglobs, and subroutines.  This has the effect that
various edge cases related to deleting stashes or stash entries (for example,
<%FOO:: = ()>), and complex typeglob or code-reference aliasing, will no
longer crash the interpreter.

=item *

Assigning a reference to a glob copy now assigns to a glob slot instead of
overwriting the glob with a scalar [perl #1804] [perl #77508].
