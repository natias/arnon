
    def resetstate(self):
        """Clear internal state that shouldn't persist across commands"""
        if self._progbar:
            self._progbar.resetstate()  # reset last-print time of progress bar
        self.httppasswordmgrdb = httppasswordmgrdbproxy()

    @contextlib.contextmanager
    def timeblockedsection(self, key):
        # this is open-coded below - search for timeblockedsection to find them
        starttime = util.timer()
        try:
            yield
        finally:
            self._blockedtimes[key + b'_blocked'] += (
                util.timer() - starttime
            ) * 1000

    @contextlib.contextmanager
    def uninterruptible(self):
        """Mark an operation as unsafe.

        Most operations on a repository are safe to interrupt, but a
        few are risky (for example repair.strip). This context manager
        lets you advise Mercurial that something risky is happening so
        that control-C etc can be blocked if desired.
        """
        enabled = self.configbool(b'experimental', b'nointerrupt')
        if enabled and self.configbool(
            b'experimental', b'nointerrupt-interactiveonly'
        ):
            enabled = self.interactive()
        if self._uninterruptible or not enabled:
            # if nointerrupt support is turned off, the process isn't
            # interactive, or we're already in an uninterruptible
            # block, do nothing.
            yield
            return

        def warn():
            self.warn(_(b"shutting down cleanly\n"))
            self.warn(
                _(b"press ^C again to terminate immediately (dangerous)\n")
            )
            return True

        with procutil.uninterruptible(warn):
            try:
                self._uninterruptible = True
                yield
            finally:
                self._uninterruptible = False

    def formatter(self, topic, opts):
        return formatter.formatter(self, self, topic, opts)

    def _trusted(self, fp, f):
        st = util.fstat(fp)
        if util.isowner(st):
            return True

        tusers, tgroups = self._trustusers, self._trustgroups
        if b'*' in tusers or b'*' in tgroups:
            return True

        user = util.username(st.st_uid)
        group = util.groupname(st.st_gid)
        if user in tusers or group in tgroups or user == util.username():
            return True

        if self._reportuntrusted:
            self.warn(
                _(
                    b'not trusting file %s from untrusted '
                    b'user %s, group %s\n'
                )
                % (f, user, group)
            )
        return False

    def read_resource_config(
        self, name, root=None, trust=False, sections=None, remap=None
    ):
        try:
            fp = resourceutil.open_resource(name[0], name[1])
        except IOError:
            if not sections:  # ignore unless we were looking for something
                return
            raise

        self._readconfig(
            b'resource:%s.%s' % name, fp, root, trust, sections, remap
        )

    def readconfig(
        self, filename, root=None, trust=False, sections=None, remap=None
    ):
        try:
            fp = open(filename, 'rb')
        except IOError:
            if not sections:  # ignore unless we were looking for something
                return
            raise

        self._readconfig(filename, fp, root, trust, sections, remap)

    def _readconfig(
        self, filename, fp, root=None, trust=False, sections=None, remap=None
    ):
        with fp:
            cfg = config.config()
            trusted = sections or trust or self._trusted(fp, filename)

            try:
                cfg.read(filename, fp, sections=sections, remap=remap)
            except error.ConfigError as inst:
                if trusted:
                    raise
                self.warn(
                    _(b'ignored %s: %s\n') % (inst.location, inst.message)
                )

        self._applyconfig(cfg, trusted, root)

    def applyconfig(self, configitems, source=b"", root=None):
        """Add configitems from a non-file source.  Unlike with ``setconfig()``,
        they can be overridden by subsequent config file reads.  The items are
        in the same format as ``configoverride()``, namely a dict of the
        following structures: {(section, name) : value}

        Typically this is used by extensions that inject themselves into the
        config file load procedure by monkeypatching ``localrepo.loadhgrc()``.
        """
        cfg = config.config()

        for (section, name), value in configitems.items():
            cfg.set(section, name, value, source)

        self._applyconfig(cfg, True, root)

    def _applyconfig(self, cfg, trusted, root):
        if self.plain():
            for k in (
                b'debug',
                b'fallbackencoding',
                b'quiet',
                b'slash',
                b'logtemplate',
                b'message-output',
                b'statuscopies',
                b'style',
                b'traceback',
                b'verbose',
            ):
                if k in cfg[b'ui']:
                    del cfg[b'ui'][k]
            for k, v in cfg.items(b'defaults'):
                del cfg[b'defaults'][k]
            for k, v in cfg.items(b'commands'):
                del cfg[b'commands'][k]
            for k, v in cfg.items(b'command-templates'):
                del cfg[b'command-templates'][k]
        # Don't remove aliases from the configuration if in the exceptionlist
        if self.plain(b'alias'):
            for k, v in cfg.items(b'alias'):
                del cfg[b'alias'][k]
        if self.plain(b'revsetalias'):
            for k, v in cfg.items(b'revsetalias'):
                del cfg[b'revsetalias'][k]
        if self.plain(b'templatealias'):
            for k, v in cfg.items(b'templatealias'):
                del cfg[b'templatealias'][k]

        if trusted:
            self._tcfg.update(cfg)
            self._tcfg.update(self._ocfg)
        self._ucfg.update(cfg)
        self._ucfg.update(self._ocfg)

        if root is None:
            root = os.path.expanduser(b'~')
        self.fixconfig(root=root)

    def fixconfig(self, root=None, section=None):
        if section in (None, b'paths'):
            # expand vars and ~
            # translate paths relative to root (or home) into absolute paths
            root = root or encoding.getcwd()
            for c in self._tcfg, self._ucfg, self._ocfg:
                for n, p in c.items(b'paths'):
                    old_p = p
                    s = self.configsource(b'paths', n) or b'none'
                    root_key = (n, p, s)
                    if root_key not in self._path_to_root:
                        self._path_to_root[root_key] = root
                    # Ignore sub-options.
                    if b':' in n:
                        continue
                    if not p:
                        continue
                    if b'%%' in p:
                        if s is None:
                            s = 'none'
                        self.warn(
                            _(b"(deprecated '%%' in path %s=%s from %s)\n")
                            % (n, p, s)
                        )
                        p = p.replace(b'%%', b'%')
                    if p != old_p:
                        c.alter(b"paths", n, p)

        if section in (None, b'ui'):
            # update ui options
            self._fmsgout, self._fmsgerr = _selectmsgdests(self)
            self.debugflag = self.configbool(b'ui', b'debug')
            self.verbose = self.debugflag or self.configbool(b'ui', b'verbose')
            self.quiet = not self.debugflag and self.configbool(b'ui', b'quiet')
            if self.verbose and self.quiet:
                self.quiet = self.verbose = False
            self._reportuntrusted = self.debugflag or self.configbool(
                b"ui", b"report_untrusted"
            )
            self.showtimestamp = self.configbool(b'ui', b'timestamp-output')
            self.tracebackflag = self.configbool(b'ui', b'traceback')
            self.logblockedtimes = self.configbool(b'ui', b'logblockedtimes')

        if section in (None, b'trusted'):
            # update trust information
            self._trustusers.update(self.configlist(b'trusted', b'users'))
            self._trustgroups.update(self.configlist(b'trusted', b'groups'))

        if section in (None, b'devel', b'ui') and self.debugflag:
            tracked = set()
            if self.configbool(b'devel', b'debug.extensions'):
                tracked.add(b'extension')
            if tracked:
                logger = loggingutil.fileobjectlogger(self._ferr, tracked)
                self.setlogger(b'debug', logger)

    def backupconfig(self, section, item):
        return (
            self._ocfg.backup(section, item),
            self._tcfg.backup(section, item),
            self._ucfg.backup(section, item),
        )

    def restoreconfig(self, data):
        self._ocfg.restore(data[0])
        self._tcfg.restore(data[1])
        self._ucfg.restore(data[2])

    def setconfig(self, section, name, value, source=b''):
        for cfg in (self._ocfg, self._tcfg, self._ucfg):
            cfg.set(section, name, value, source)
        self.fixconfig(section=section)
        self._maybetweakdefaults()

    def _data(self, untrusted):
        return untrusted and self._ucfg or self._tcfg

    def configsource(self, section, name, untrusted=False):
        return self._data(untrusted).source(section, name)

    def config(self, section, name, default=_unset, untrusted=False):
        """return the plain string version of a config"""
        value = self._config(
            section, name, default=default, untrusted=untrusted
        )
        if value is _unset:
            return None
        return value

    def _config(self, section, name, default=_unset, untrusted=False):
        value = itemdefault = default
        item = self._knownconfig.get(section, {}).get(name)
        alternates = [(section, name)]

        if item is not None:
            alternates.extend(item.alias)
            if callable(item.default):
                itemdefault = item.default()
            else:
                itemdefault = item.default
        else:
            msg = b"accessing unregistered config item: '%s.%s'"
            msg %= (section, name)
            self.develwarn(msg, 2, b'warn-config-unknown')

        if default is _unset:
            if item is None:
                value = default
            elif item.default is configitems.dynamicdefault:
                value = None
                msg = b"config item requires an explicit default value: '%s.%s'"
                msg %= (section, name)
                self.develwarn(msg, 2, b'warn-config-default')
            else:
                value = itemdefault
        elif (
            item is not None
            and item.default is not configitems.dynamicdefault
            and default != itemdefault
        ):
            msg = (
                b"specifying a mismatched default value for a registered "
                b"config item: '%s.%s' '%s'"
            )
            msg %= (section, name, pycompat.bytestr(default))
            self.develwarn(msg, 2, b'warn-config-default')

        candidates = []
        config = self._data(untrusted)
        for s, n in alternates:
            candidate = config.get(s, n, None)
            if candidate is not None:
                candidates.append((s, n, candidate))
        if candidates:

            def level(x):
                return config.level(x[0], x[1])

            value = max(candidates, key=level)[2]

        if self.debugflag and not untrusted and self._reportuntrusted:
            for s, n in alternates:
                uvalue = self._ucfg.get(s, n)
                if uvalue is not None and uvalue != value:
                    self.debug(
                        b"ignoring untrusted configuration option "
                        b"%s.%s = %s\n" % (s, n, uvalue)
                    )
        return value

    def config_default(self, section, name):
        """return the default value for a config option

        The default is returned "raw", for example if it is a callable, the
        callable was not called.
        """
        item = self._knownconfig.get(section, {}).get(name)

        if item is None:
            raise KeyError((section, name))
        return item.default

    def configsuboptions(self, section, name, default=_unset, untrusted=False):
        """Get a config option and all sub-options.

        Some config options have sub-options that are declared with the
        format "key:opt = value". This method is used to return the main
        option and all its declared sub-options.

        Returns a 2-tuple of ``(option, sub-options)``, where `sub-options``
        is a dict of defined sub-options where keys and values are strings.
        """
        main = self.config(section, name, default, untrusted=untrusted)
        data = self._data(untrusted)
        sub = {}
        prefix = b'%s:' % name
        for k, v in data.items(section):
            if k.startswith(prefix):
                sub[k[len(prefix) :]] = v

        if self.debugflag and not untrusted and self._reportuntrusted:
            for k, v in sub.items():
                uvalue = self._ucfg.get(section, b'%s:%s' % (name, k))
                if uvalue is not None and uvalue != v:
                    self.debug(
                        b'ignoring untrusted configuration option '
                        b'%s:%s.%s = %s\n' % (section, name, k, uvalue)
                    )

        return main, sub

    def configpath(self, section, name, default=_unset, untrusted=False):
        """get a path config item, expanded relative to repo root or config
        file"""
        v = self.config(section, name, default, untrusted)
        if v is None:
            return None
        if not os.path.isabs(v) or b"://" not in v:
            src = self.configsource(section, name, untrusted)
            if b':' in src:
                base = os.path.dirname(src.rsplit(b':')[0])
                v = os.path.join(base, os.path.expanduser(v))
        return v

    def configbool(self, section, name, default=_unset, untrusted=False):
        """parse a configuration element as a boolean

        >>> u = ui(); s = b'foo'
        >>> u.setconfig(s, b'true', b'yes')
        >>> u.configbool(s, b'true')
        True
        >>> u.setconfig(s, b'false', b'no')
        >>> u.configbool(s, b'false')
        False
        >>> u.configbool(s, b'unknown')
        False
        >>> u.configbool(s, b'unknown', True)
        True
        >>> u.setconfig(s, b'invalid', b'somevalue')
        >>> u.configbool(s, b'invalid')
        Traceback (most recent call last):
            ...
        ConfigError: foo.invalid is not a boolean ('somevalue')
        """

        v = self._config(section, name, default, untrusted=untrusted)
        if v is None:
            return v
        if v is _unset:
            if default is _unset:
                return False
            return default
        if isinstance(v, bool):
            return v
        b = stringutil.parsebool(v)
        if b is None:
            raise error.ConfigError(
                _(b"%s.%s is not a boolean ('%s')") % (section, name, v)
            )
        return b

    def configwith(
        self, convert, section, name, default=_unset, desc=None, untrusted=False
    ):
        """parse a configuration element with a conversion function

        >>> u = ui(); s = b'foo'
        >>> u.setconfig(s, b'float1', b'42')
        >>> u.configwith(float, s, b'float1')
        42.0
        >>> u.setconfig(s, b'float2', b'-4.25')
        >>> u.configwith(float, s, b'float2')
        -4.25
        >>> u.configwith(float, s, b'unknown', 7)
        7.0
        >>> u.setconfig(s, b'invalid', b'somevalue')
        >>> u.configwith(float, s, b'invalid')
        Traceback (most recent call last):
            ...
        ConfigError: foo.invalid is not a valid float ('somevalue')
        >>> u.configwith(float, s, b'invalid', desc=b'womble')
        Traceback (most recent call last):
            ...
        ConfigError: foo.invalid is not a valid womble ('somevalue')
        """

        v = self.config(section, name, default, untrusted)
        if v is None:
            return v  # do not attempt to convert None
        try:
            return convert(v)
        except (ValueError, error.ParseError):
            if desc is None:
                desc = pycompat.sysbytes(convert.__name__)
            raise error.ConfigError(
                _(b"%s.%s is not a valid %s ('%s')") % (section, name, desc, v)
            )

    def configint(self, section, name, default=_unset, untrusted=False):
        """parse a configuration element as an integer

        >>> u = ui(); s = b'foo'
        >>> u.setconfig(s, b'int1', b'42')
        >>> u.configint(s, b'int1')
        42
        >>> u.setconfig(s, b'int2', b'-42')
        >>> u.configint(s, b'int2')
        -42
        >>> u.configint(s, b'unknown', 7)
        7
        >>> u.setconfig(s, b'invalid', b'somevalue')
        >>> u.configint(s, b'invalid')
        Traceback (most recent call last):
            ...
        ConfigError: foo.invalid is not a valid integer ('somevalue')
        """

        return self.configwith(
            int, section, name, default, b'integer', untrusted
        )

    def configbytes(self, section, name, default=_unset, untrusted=False):
        """parse a configuration element as a quantity in bytes

        Units can be specified as b (bytes), k or kb (kilobytes), m or
        mb (megabytes), g or gb (gigabytes).

        >>> u = ui(); s = b'foo'
        >>> u.setconfig(s, b'val1', b'42')
        >>> u.configbytes(s, b'val1')
        42
        >>> u.setconfig(s, b'val2', b'42.5 kb')
        >>> u.configbytes(s, b'val2')
        43520
        >>> u.configbytes(s, b'unknown', b'7 MB')
        7340032
        >>> u.setconfig(s, b'invalid', b'somevalue')
        >>> u.configbytes(s, b'invalid')
        Traceback (most recent call last):
            ...
        ConfigError: foo.invalid is not a byte quantity ('somevalue')
        """

        value = self._config(section, name, default, untrusted)
        if value is _unset:
            if default is _unset:
                default = 0
            value = default
        if not isinstance(value, bytes):
            return value
        try:
            return util.sizetoint(value)
        except error.ParseError:
            raise error.ConfigError(
                _(b"%s.%s is not a byte quantity ('%s')")
                % (section, name, value)
            )

    def configlist(self, section, name, default=_unset, untrusted=False):
        """parse a configuration element as a list of comma/space separated
        strings

        >>> u = ui(); s = b'foo'
        >>> u.setconfig(s, b'list1', b'this,is "a small" ,test')
        >>> u.configlist(s, b'list1')
        ['this', 'is', 'a small', 'test']
        >>> u.setconfig(s, b'list2', b'this, is "a small" , test ')
        >>> u.configlist(s, b'list2')
        ['this', 'is', 'a small', 'test']
        """
        # default is not always a list
        v = self.configwith(
            stringutil.parselist, section, name, default, b'list', untrusted
        )
        if isinstance(v, bytes):
            return stringutil.parselist(v)
        elif v is None:
            return []
        return v

    def configdate(self, section, name, default=_unset, untrusted=False):
        """parse a configuration element as a tuple of ints

        >>> u = ui(); s = b'foo'
        >>> u.setconfig(s, b'date', b'0 0')
        >>> u.configdate(s, b'date')
        (0, 0)
        """
        if self.config(section, name, default, untrusted):
            return self.configwith(
                dateutil.parsedate, section, name, default, b'date', untrusted
            )
        if default is _unset:
            return None
        return default

    def configdefault(self, section, name):
        """returns the default value of the config item"""
        item = self._knownconfig.get(section, {}).get(name)
        itemdefault = None
        if item is not None:
            if callable(item.default):
                itemdefault = item.default()
            else:
                itemdefault = item.default
        return itemdefault

    def hasconfig(self, section, name, untrusted=False):
        return self._data(untrusted).hasitem(section, name)

    def has_section(self, section, untrusted=False):
        '''tell whether section exists in config.'''
        return section in self._data(untrusted)

    def configitems(self, section, untrusted=False, ignoresub=False):
        items = self._data(untrusted).items(section)
        if ignoresub:
            items = [i for i in items if b':' not in i[0]]
        if self.debugflag and not untrusted and self._reportuntrusted:
            for k, v in self._ucfg.items(section):
                if self._tcfg.get(section, k) != v:
                    self.debug(
                        b"ignoring untrusted configuration option "
                        b"%s.%s = %s\n" % (section, k, v)
                    )
        return items

    def walkconfig(self, untrusted=False, all_known=False):
        defined = self._walk_config(untrusted)
        if not all_known:
            for d in defined:
                yield d
            return
        known = self._walk_known()
        current_defined = next(defined, None)
        current_known = next(known, None)
        while current_defined is not None or current_known is not None:
            if current_defined is None:
                yield current_known
                current_known = next(known, None)
            elif current_known is None:
                yield current_defined
                current_defined = next(defined, None)
            elif current_known[0:2] == current_defined[0:2]:
                yield current_defined
                current_defined = next(defined, None)
                current_known = next(known, None)
            elif current_known[0:2] < current_defined[0:2]:
                yield current_known
                current_known = next(known, None)
            else:
                yield current_defined
                current_defined = next(defined, None)

    def _walk_known(self):
        for section, items in sorted(self._knownconfig.items()):
            for k, i in sorted(items.items()):
                # We don't have a way to display generic well, so skip them
                if i.generic:
                    continue
                if callable(i.default):
                    default = i.default()
                elif i.default is configitems.dynamicdefault:
                    default = b'<DYNAMIC>'
                else:
                    default = i.default
                yield section, i.name, default

    def _walk_config(self, untrusted):
        cfg = self._data(untrusted)
        for section in cfg.sections():
            for name, value in self.configitems(section, untrusted):
                yield section, name, value

    def plain(self, feature=None):
        """is plain mode active?

        Plain mode means that all configuration variables which affect
        the behavior and output of Mercurial should be
        ignored. Additionally, the output should be stable,
        reproducible and suitable for use in scripts or applications.

        The only way to trigger plain mode is by setting either the
        `HGPLAIN' or `HGPLAINEXCEPT' environment variables.

        The return value can either be
        - False if HGPLAIN is not set, or feature is in HGPLAINEXCEPT
        - False if feature is disabled by default and not included in HGPLAIN
        - True otherwise
        """
        if (
            b'HGPLAIN' not in encoding.environ
            and b'HGPLAINEXCEPT' not in encoding.environ
        ):
            return False
        exceptions = (
            encoding.environ.get(b'HGPLAINEXCEPT', b'').strip().split(b',')
        )
        # TODO: add support for HGPLAIN=+feature,-feature syntax
        if b'+strictflags' not in encoding.environ.get(b'HGPLAIN', b'').split(
            b','
        ):
            exceptions.append(b'strictflags')
        if feature and exceptions:
            return feature not in exceptions
        return True

    def username(self, acceptempty=False):
        """Return default username to be used in commits.

        Searched in this order: $HGUSER, [ui] section of hgrcs, $EMAIL
        and stop searching if one of these is set.
        If not found and acceptempty is True, returns None.
        If not found and ui.askusername is True, ask the user, else use
        ($LOGNAME or $USER or $LNAME or $USERNAME) + "@full.hostname".
        If no username could be found, raise an Abort error.
        """
        user = encoding.environ.get(b"HGUSER")
        if user is None:
            user = self.config(b"ui", b"username")
            if user is not None:
                user = os.path.expandvars(user)
        if user is None:
            user = encoding.environ.get(b"EMAIL")
        if user is None and acceptempty:
            return user
        if user is None and self.configbool(b"ui", b"askusername"):
            user = self.prompt(_(b"enter a commit username:"), default=None)
        if user is None and not self.interactive():
            try:
                user = b'%s@%s' % (
                    procutil.getuser(),
                    encoding.strtolocal(socket.getfqdn()),
                )
                self.warn(_(b"no username found, using '%s' instead\n") % user)
            except KeyError:
                pass
        if not user:
            raise error.Abort(
                _(b'no username supplied'),
                hint=_(b"use 'hg config --edit' " b'to set your username'),
            )
        if b"\n" in user:
            raise error.Abort(
                _(b"username %r contains a newline\n") % pycompat.bytestr(user)
            )
        return user

    def shortuser(self, user):
        """Return a short representation of a user name or email address."""
        if not self.verbose:
            user = stringutil.shortuser(user)
        return user

    def expandpath(self, loc, default=None):
        """Return repository location relative to cwd or from [paths]"""
        msg = b'ui.expandpath is deprecated, use `get_*` functions from urlutil'
        self.deprecwarn(msg, b'6.0')
        try:
            p = self.getpath(loc)
            if p:
                return p.rawloc
        except error.RepoError:
            pass

        if default:
            try:
                p = self.getpath(default)
                if p:
                    return p.rawloc
            except error.RepoError:
                pass

        return loc

    @util.propertycache
    def paths(self):
        return urlutil.paths(self)

    def getpath(self, *args, **kwargs):
        """see paths.getpath for details

        This method exist as `getpath` need a ui for potential warning message.
        """
        msg = b'ui.getpath is deprecated, use `get_*` functions from urlutil'
        self.deprecwarn(msg, b'6.0')
        return self.paths.getpath(self, *args, **kwargs)

    @property
    def fout(self):
        return self._fout

    @fout.setter
    def fout(self, f):
        self._fout = f
        self._fmsgout, self._fmsgerr = _selectmsgdests(self)

    @property
    def ferr(self):
        return self._ferr

    @ferr.setter
    def ferr(self, f):
        self._ferr = f
        self._fmsgout, self._fmsgerr = _selectmsgdests(self)

    @property
    def fin(self):
        return self._fin

    @fin.setter
    def fin(self, f):
        self._fin = f

    @property
    def fmsg(self):
        """Stream dedicated for status/error messages; may be None if
        fout/ferr are used"""
        return self._fmsg

    @fmsg.setter
    def fmsg(self, f):
        self._fmsg = f
        self._fmsgout, self._fmsgerr = _selectmsgdests(self)

    @contextlib.contextmanager
    def silent(self, error=False, subproc=False, labeled=False):
        self.pushbuffer(error=error, subproc=subproc, labeled=labeled)
        try:
            yield
        finally:
            self.popbuffer()

    def pushbuffer(self, error=False, subproc=False, labeled=False):
        """install a buffer to capture standard output of the ui object

        If error is True, the error output will be captured too.

        If subproc is True, output from subprocesses (typically hooks) will be
        captured too.

        If labeled is True, any labels associated with buffered
        output will be handled. By default, this has no effect
        on the output returned, but extensions and GUI tools may
        handle this argument and returned styled output. If output
        is being buffered so it can be captured and parsed or
        processed, labeled should not be set to True.
        """
        self._buffers.append([])
        self._bufferstates.append((error, subproc, labeled))
        self._bufferapplylabels = labeled

    def popbuffer(self):
        '''pop the last buffer and return the buffered output'''
        self._bufferstates.pop()
        if self._bufferstates:
            self._bufferapplylabels = self._bufferstates[-1][2]
        else:
            self._bufferapplylabels = None

        return b"".join(self._buffers.pop())

    def _isbuffered(self, dest):
        if dest is self._fout:
            return bool(self._buffers)
        if dest is self._ferr:
            return bool(self._bufferstates and self._bufferstates[-1][0])
        return False

    def canwritewithoutlabels(self):
        '''check if write skips the label'''
        if self._buffers and not self._bufferapplylabels:
            return True
        return self._colormode is None

    def canbatchlabeledwrites(self):
        '''check if write calls with labels are batchable'''
        # Windows color printing is special, see ``write``.
        return self._colormode != b'win32'

    def write(self, *args, **opts):
        """write args to output

        By default, this method simply writes to the buffer or stdout.
        Color mode can be set on the UI class to have the output decorated
        with color modifier before being written to stdout.

        The color used is controlled by an optional keyword argument, "label".
        This should be a string containing label names separated by space.
        Label names take the form of "topic.type". For example, ui.debug()
        issues a label of "ui.debug".

        Progress reports via stderr are normally cleared before writing as
        stdout and stderr go to the same terminal. This can be skipped with
        the optional keyword argument "keepprogressbar". The progress bar
        will continue to occupy a partial line on stderr in that case.
        This functionality is intended when Mercurial acts as data source
        in a pipe.

        When labeling output for a specific command, a label of
        "cmdname.type" is recommended. For example, status issues
        a label of "status.modified" for modified files.
        """
        dest = self._fout

        # inlined _write() for speed
        if self._buffers:
            label = opts.get('label', b'')
            if label and self._bufferapplylabels:
                self._buffers[-1].extend(self.label(a, label) for a in args)
            else:
                self._buffers[-1].extend(args)
            return

        # inlined _writenobuf() for speed
        if not opts.get('keepprogressbar', False):
            self._progclear()
        msg = b''.join(args)

        # opencode timeblockedsection because this is a critical path
        starttime = util.timer()
        try:
            if self._colormode == b'win32':
                # windows color printing is its own can of crab, defer to
                # the color module and that is it.
                color.win32print(self, dest.write, msg, **opts)
            else:
                if self._colormode is not None:
                    label = opts.get('label', b'')
                    msg = self.label(msg, label)
                dest.write(msg)
        except IOError as err:
            raise error.StdioError(err)
        finally:
            self._blockedtimes[b'stdio_blocked'] += (
                util.timer() - starttime
            ) * 1000

    def write_err(self, *args, **opts):
        self._write(self._ferr, *args, **opts)

    def _write(self, dest, *args, **opts):
        # update write() as well if you touch this code
        if self._isbuffered(dest):
            label = opts.get('label', b'')
            if label and self._bufferapplylabels:
                self._buffers[-1].extend(self.label(a, label) for a in args)
            else:
                self._buffers[-1].extend(args)
        else:
            self._writenobuf(dest, *args, **opts)

    def _writenobuf(self, dest, *args, **opts):
        # update write() as well if you touch this code
        if not opts.get('keepprogressbar', False):
            self._progclear()
        msg = b''.join(args)

        # opencode timeblockedsection because this is a critical path
        starttime = util.timer()
        try:
            if dest is self._ferr and not getattr(self._fout, 'closed', False):
                self._fout.flush()
            if getattr(dest, 'structured', False):
                # channel for machine-readable output with metadata, where
                # no extra colorization is necessary.
                dest.write(msg, **opts)
            elif self._colormode == b'win32':
                # windows color printing is its own can of crab, defer to
                # the color module and that is it.
                color.win32print(self, dest.write, msg, **opts)
            else:
                if self._colormode is not None:
                    label = opts.get('label', b'')
                    msg = self.label(msg, label)
                dest.write(msg)
            # stderr may be buffered under win32 when redirected to files,
            # including stdout.
            if dest is self._ferr and not getattr(dest, 'closed', False):
                dest.flush()
        except IOError as err:
            if dest is self._ferr and err.errno in (
                errno.EPIPE,
                errno.EIO,
                errno.EBADF,
            ):
                # no way to report the error, so ignore it
                return
            raise error.StdioError(err)
        finally:
            self._blockedtimes[b'stdio_blocked'] += (
                util.timer() - starttime
            ) * 1000

    def _writemsg(self, dest, *args, **opts):
        timestamp = self.showtimestamp and opts.get('type') in {
            b'debug',
            b'error',
            b'note',
            b'status',
            b'warning',
        }
        if timestamp:
            args = (
                b'[%s] '
                % pycompat.bytestr(datetime.datetime.now().isoformat()),
            ) + args
        _writemsgwith(self._write, dest, *args, **opts)
        if timestamp:
            dest.flush()

    def _writemsgnobuf(self, dest, *args, **opts):
        _writemsgwith(self._writenobuf, dest, *args, **opts)

    def flush(self):
        # opencode timeblockedsection because this is a critical path
        starttime = util.timer()
        try:
            try:
                self._fout.flush()
            except IOError as err:
                if err.errno not in (errno.EPIPE, errno.EIO, errno.EBADF):
                    raise error.StdioError(err)
            finally:
                try:
                    self._ferr.flush()
                except IOError as err:
                    if err.errno not in (errno.EPIPE, errno.EIO, errno.EBADF):
                        raise error.StdioError(err)
        finally:
            self._blockedtimes[b'stdio_blocked'] += (
                util.timer() - starttime
            ) * 1000

    def _isatty(self, fh):
        if self.configbool(b'ui', b'nontty'):
            return False
