    # returns: 0 automatic lowest or highest value, configured value otherwise

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_min_proto_version.html>

=item * CTX_remove_session

Removes the session $ses from the context $ctx.

    my $rv = Net::SSLeay::CTX_remove_session($ctx, $ses);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $ses - value corresponding to openssl's SSL_SESSION structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_add_session.html>

=item * CTX_sess_accept

    my $rv = Net::SSLeay::CTX_sess_accept($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: number of started SSL/TLS handshakes in server mode

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_number.html>

=item * CTX_sess_accept_good

    my $rv = Net::SSLeay::CTX_sess_accept_good($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: number of successfully established SSL/TLS sessions in server mode

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_number.html>

=item * CTX_sess_accept_renegotiate

    my $rv = Net::SSLeay::CTX_sess_accept_renegotiate($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: number of start renegotiations in server mode

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_number.html>

=item * CTX_sess_cache_full

    my $rv = Net::SSLeay::CTX_sess_cache_full($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: number of sessions that were removed because the maximum session cache size was exceeded

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_number.html>

=item * CTX_sess_cb_hits

    my $rv = Net::SSLeay::CTX_sess_cb_hits($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: number of successfully retrieved sessions from the external session cache in server mode

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_number.html>

=item * CTX_sess_connect

    my $rv = Net::SSLeay::CTX_sess_connect($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: number of started SSL/TLS handshakes in client mode

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_number.html>

=item * CTX_sess_connect_good

     my $rv = Net::SSLeay::CTX_sess_connect_good($ctx);
     # $ctx - value corresponding to openssl's SSL_CTX structure
     #
     # returns: number of successfully established SSL/TLS sessions in client mode

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_number.html>

=item * CTX_sess_connect_renegotiate

     my $rv = Net::SSLeay::CTX_sess_connect_renegotiate($ctx);
     # $ctx - value corresponding to openssl's SSL_CTX structure
     #
     # returns: number of start renegotiations in client mode

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_number.html>

=item * CTX_sess_get_cache_size

Returns the currently valid session cache size.

     my $rv = Net::SSLeay::CTX_sess_get_cache_size($ctx);
     # $ctx - value corresponding to openssl's SSL_CTX structure
     #
     # returns: current size

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_set_cache_size.html>

=item * CTX_sess_hits

     my $rv = Net::SSLeay::CTX_sess_hits($ctx);
     # $ctx - value corresponding to openssl's SSL_CTX structure
     #
     # returns: number of successfully reused sessions

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_number.html>

=item * CTX_sess_misses

     my $rv = Net::SSLeay::CTX_sess_misses($ctx);
     # $ctx - value corresponding to openssl's SSL_CTX structure
     #
     # returns: number of sessions proposed by clients that were not found in the internal session cache in server mode

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_number.html>

=item * CTX_sess_number

     my $rv = Net::SSLeay::CTX_sess_number($ctx);
     # $ctx - value corresponding to openssl's SSL_CTX structure
     #
     # returns: current number of sessions in the internal session cache

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_number.html>

=item * CTX_sess_set_cache_size

Sets the size of the internal session cache of context $ctx to $size.

     Net::SSLeay::CTX_sess_set_cache_size($ctx, $size);
     # $ctx - value corresponding to openssl's SSL_CTX structure
     # $size - cache size (0 = unlimited)
     #
     # returns: previously valid size

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_set_cache_size.html>

=item * CTX_sess_timeouts

Returns the number of sessions proposed by clients and either found in the internal or external session cache in
server mode, but that were invalid due to timeout. These sessions are not included in the SSL_CTX_sess_hits count.

    my $rv = Net::SSLeay::CTX_sess_timeouts($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: number of sessions

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_number.html>

=item * CTX_sess_set_new_cb

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before

Sets the callback function, which is automatically called whenever a new session was negotiated.

    Net::SSLeay::CTX_sess_set_new_cb($ctx, $func);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $func - perl reference to callback function
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_set_new_cb.html>

=item * CTX_sess_set_remove_cb

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before

Sets the callback function, which is automatically called whenever a session is removed by the SSL engine.

    Net::SSLeay::CTX_sess_set_remove_cb($ctx, $func);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $func - perl reference to callback function
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_set_remove_cb.html>

=item * CTX_sessions

Returns a pointer to the lhash databases containing the internal session cache for ctx.

    my $rv = Net::SSLeay::CTX_sessions($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: value corresponding to openssl's LHASH structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sessions.html>

=item * CTX_set1_param

B<COMPATIBILITY:> requires at least OpenSSL 1.0.0-beta3

Applies X509 verification parameters $vpm on $ctx

    my $rv = Net::SSLeay::CTX_set1_param($ctx, $vpm);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $vpm - value corresponding to openssl's X509_VERIFY_PARAM structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get0_param.html>

=item * CTX_set_cert_store

Sets/replaces the certificate verification storage of $ctx to/with $store.

    Net::SSLeay::CTX_set_cert_store($ctx, $store);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $store - value corresponding to openssl's X509_STORE structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_cert_store.html>

=item * CTX_set_cert_verify_callback

Sets the verification callback function for $ctx. SSL objects that are created from $ctx
inherit the setting valid at the time when C<Net::SSLeay::new($ctx)> is called.

    Net::SSLeay::CTX_set_cert_verify_callback($ctx, $func, $data);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $func - perl reference to callback function
    # $data - [optional] data that will be passed to callback function when invoked
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_cert_verify_callback.html>

=item * CTX_set_cipher_list

Sets the list of available ciphers for $ctx using the control string $str.
The list of ciphers is inherited by all ssl objects created from $ctx.

    my $rv = Net::SSLeay::CTX_set_cipher_list($s, $str);
    # $s - value corresponding to openssl's SSL_CTX structure
    # $str - (string) cipher list e.g. '3DES:+RSA'
    #
    # returns: 1 if any cipher could be selected and 0 on complete failure

The format of $str is described in L<https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html>

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_cipher_list.html>

=item * CTX_set_ciphersuites

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.1 or at least LibreSSL 3.4.0 and Net-SSLeay-1.94

Configure the available TLSv1.3 ciphersuites.

    my $rv = Net::SSLeay::CTX_set_ciphersuites($ctx, $str);
    # $ctx  - value corresponding to openssl's SSL_CTX structure
    # $str  - colon (":") separated list of TLSv1.3 ciphersuite names in order of preference
    #
    # returns: (integer) 1 if the requested ciphersuite list was configured, and 0 otherwise

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_ciphersuites.html>

=item * CTX_set_client_CA_list

Sets the list of CAs sent to the client when requesting a client certificate for $ctx.

    Net::SSLeay::CTX_set_client_CA_list($ctx, $list);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $list - value corresponding to openssl's X509_NAME_STACK structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_client_CA_list.html>

=item * CTX_set_default_passwd_cb

Sets the default password callback called when loading/storing a PEM certificate with encryption.

    Net::SSLeay::CTX_set_default_passwd_cb($ctx, $func);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $func - perl reference to callback function
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_default_passwd_cb.html>

=item * CTX_set_default_passwd_cb_userdata

Sets a pointer to userdata which will be provided to the password callback on invocation.

    Net::SSLeay::CTX_set_default_passwd_cb_userdata($ctx, $userdata);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $userdata - data that will be passed to callback function when invoked
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_default_passwd_cb.html>

=item * CTX_set_default_verify_paths

??? (more info needed)

    my $rv = Net::SSLeay::CTX_set_default_verify_paths($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: 1 on success, 0 on failure

=item * CTX_set_ex_data

Is used to store application data at $data for $idx into the $ctx object.

    my $rv = Net::SSLeay::CTX_set_ex_data($ssl, $idx, $data);
    # $ssl - value corresponding to openssl's SSL_CTX structure
    # $idx - (integer) ???
    # $data - (pointer) ???
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get_ex_new_index.html>

=item * CTX_set_purpose

    my $rv = Net::SSLeay::CTX_set_purpose($s, $purpose);
    # $s - value corresponding to openssl's SSL_CTX structure
    # $purpose - (integer) purpose identifier
    #
    # returns: 1 on success, 0 on failure

    # available purpose identifier
    # 1 - X509_PURPOSE_SSL_CLIENT
    # 2 - X509_PURPOSE_SSL_SERVER
    # 3 - X509_PURPOSE_NS_SSL_SERVER
    # 4 - X509_PURPOSE_SMIME_SIGN
    # 5 - X509_PURPOSE_SMIME_ENCRYPT
    # 6 - X509_PURPOSE_CRL_SIGN
    # 7 - X509_PURPOSE_ANY
    # 8 - X509_PURPOSE_OCSP_HELPER
    # 9 - X509_PURPOSE_TIMESTAMP_SIGN

    # or use corresponding constants
    $purpose = &Net::SSLeay::X509_PURPOSE_SSL_CLIENT;
    # ...
    $purpose = &Net::SSLeay::X509_PURPOSE_TIMESTAMP_SIGN;

=item * CTX_set_quiet_shutdown

Sets the 'quiet shutdown' flag for $ctx to be mode. SSL objects created from $ctx inherit the mode valid at the time C<Net::SSLeay::new($ctx)> is called.

    Net::SSLeay::CTX_set_quiet_shutdown($ctx, $mode);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $mode - 0 or 1
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_quiet_shutdown.html>

=item * CTX_set_read_ahead

    my $rv = Net::SSLeay::CTX_set_read_ahead($ctx, $val);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $val - read_ahead value to be set
    #
    # returns: the original read_ahead value

=item * CTX_set_session_id_context

Sets the context $sid_ctx of length $sid_ctx_len within which a session can be reused for the $ctx object.

    my $rv = Net::SSLeay::CTX_set_session_id_context($ctx, $sid_ctx, $sid_ctx_len);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $sid_ctx - data buffer
    # $sid_ctx_len - length of data in $sid_ctx
    #
    # returns: 1 on success, 0 on failure (the error is logged to the error stack)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_session_id_context.html>

=item * CTX_set_ssl_version

Sets a new default TLS/SSL method for SSL objects newly created from this $ctx.
SSL objects already created with C<Net::SSLeay::new($ctx)> are not
affected, except when C<Net::SSLeay:clear($ssl)> is being called.

    my $rv = Net::SSLeay::CTX_set_ssl_version($ctx, $meth);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $meth - value corresponding to openssl's SSL_METHOD structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_ssl_version.html>

=item * CTX_set_timeout

Sets the timeout for newly created sessions for $ctx to $t. The timeout value $t must be given in seconds.

    my $rv = Net::SSLeay::CTX_set_timeout($ctx, $t);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $t - timeout in seconds
    #
    # returns: previously set timeout value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_timeout.html>

=item * CTX_set_tmp_dh

Sets DH parameters to be used to be $dh. The key is inherited by all ssl objects created from $ctx.

    my $rv = Net::SSLeay::CTX_set_tmp_dh($ctx, $dh);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $dh - value corresponding to openssl's DH structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_tmp_dh_callback.html>

=item * CTX_set_tmp_dh_callback

Sets the callback function for $ctx to be used when a DH parameters are required to $tmp_dh_callback.

    Net::SSLeay::CTX_set_tmp_dh_callback($ctx, $tmp_dh_callback);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # tmp_dh_callback - (function pointer) ???
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_tmp_dh_callback.html>

=item * CTX_set_tmp_rsa

Sets the temporary/ephemeral RSA key to be used to be $rsa.

    my $rv = Net::SSLeay::CTX_set_tmp_rsa($ctx, $rsa);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $rsa - value corresponding to openssl's RSA structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/man1.0.2/man3/SSL_CTX_set_tmp_rsa_callback.html>

Not available with OpenSSL 1.1 and later.

=item * CTX_set_tmp_rsa_callback

Sets the callback function for ctx to be used when a temporary/ephemeral RSA key is required to $tmp_rsa_callback.

??? (does this function really work?)

    Net::SSLeay::CTX_set_tmp_rsa_callback($ctx, $tmp_rsa_callback);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $tmp_rsa_callback - (function pointer) ???
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/man1.0.2/man3/SSL_CTX_set_tmp_rsa_callback.html>

Not available with OpenSSL 1.1 and later.

=item * CTX_set_trust

    my $rv = Net::SSLeay::CTX_set_trust($s, $trust);
    # $s - value corresponding to openssl's SSL_CTX structure
    # $trust - (integer) trust identifier
    #
    # returns: the original value

    # available trust identifiers
    # 1 - X509_TRUST_COMPAT
    # 2 - X509_TRUST_SSL_CLIENT
    # 3 - X509_TRUST_SSL_SERVER
    # 4 - X509_TRUST_EMAIL
    # 5 - X509_TRUST_OBJECT_SIGN
    # 6 - X509_TRUST_OCSP_SIGN
    # 7 - X509_TRUST_OCSP_REQUEST
    # 8 - X509_TRUST_TSA

    # or use corresponding constants
    $trust = &Net::SSLeay::X509_TRUST_COMPAT;
    # ...
    $trust = &Net::SSLeay::X509_TRUST_TSA;

=item * CTX_set_verify_depth

Sets the maximum depth for the certificate chain verification that shall be allowed for ctx.

    Net::SSLeay::CTX_set_verify_depth($ctx, $depth);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $depth - max. depth
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_verify.html>

=item * CTX_use_PKCS12_file

Adds the certificate and private key from PKCS12 file $p12filename to $ctx.

    my $rv = Net::SSLeay::CTX_use_PKCS12_file($ctx, $p12filename, $password);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $p12filename - (string) filename
    # $password - (string) password to decrypt private key
    #
    # returns: 1 on success, 0 on failure

B<NOTE> Net::SSLeay 1.92_01 and earlier: With some combinations of
Windows, perl, compiler and compiler options, you may see a runtime
error "no OPENSSL_Applink", when calling
Net::SSLeay::CTX_use_PKCS12_file. See README.Win32 for more details.

=item * CTX_use_PrivateKey

Adds the private key $pkey to $ctx.

    my $rv = Net::SSLeay::CTX_use_PrivateKey($ctx, $pkey);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $pkey - value corresponding to openssl's EVP_PKEY structure
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * CTX_use_PrivateKey_file

Adds the first private key found in $file to $ctx.

    my $rv = Net::SSLeay::CTX_use_PrivateKey_file($ctx, $file, $type);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $file - (string) file name
    # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * CTX_use_RSAPrivateKey

Adds the RSA private key $rsa to $ctx.

    my $rv = Net::SSLeay::CTX_use_RSAPrivateKey($ctx, $rsa);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $rsa - value corresponding to openssl's RSA structure
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * CTX_use_RSAPrivateKey_file

Adds the first RSA private key found in $file to $ctx.

    my $rv = Net::SSLeay::CTX_use_RSAPrivateKey_file($ctx, $file, $type);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $file - (string) file name
    # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

=item * CTX_use_certificate

Loads the certificate $x into $ctx

    my $rv = Net::SSLeay::CTX_use_certificate($ctx, $x);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $x - value corresponding to openssl's X509 structure
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * CTX_use_certificate_chain_file

Loads a certificate chain from $file into $ctx. The certificates must be in PEM format and must be sorted
starting with the subject's certificate (actual client or server certificate), followed by intermediate
CA certificates if applicable, and ending at the highest level (root) CA.

    my $rv = Net::SSLeay::CTX_use_certificate_chain_file($ctx, $file);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $file - (string) file name
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * CTX_use_certificate_file

Loads the first certificate stored in $file into $ctx.

    my $rv = Net::SSLeay::CTX_use_certificate_file($ctx, $file, $type);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $file - (string) file name
    # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * CTX_get_security_level

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.0 or at least LibreSSL 3.6.0 and Net-SSLeay-1.94

Returns the security level associated with $ctx.

    my $level = Net::SSLeay::CTX_get_security_level($ctx);
    # $ctx   - value corresponding to openssl's SSL_CTX structure
    #
    # returns: (integer) current security level

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get_security_level.html>

=item * CTX_set_security_level

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.0 or at least LibreSSL 3.6.0 and Net-SSLeay-1.94

Sets the security level associated with $ctx to $level.

    Net::SSLeay::CTX_set_security_level($ctx, $level);
    # $ssl   - value corresponding to openssl's SSL_CTX structure
    # $level - new security level
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_security_level.html>

=item * CTX_set_num_tickets

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.1 or at least LibreSSL 3.5.0 and Net-SSLeay-1.94

Set number of TLSv1.3 session tickets that will be sent to a client.

    my $rv = Net::SSLeay::CTX_set_num_tickets($ctx, $number_of_tickets);
    # $ctx  - value corresponding to openssl's SSL_CTX structure
    # $number_of_tickets - number of tickets to send
    #
    # returns: 1 on success, 0 on failure

Set to zero if you do not no want to support a session resumption.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_num_tickets.html>

=item * CTX_get_num_tickets

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.1 or at least LibreSSL 3.5.0 and Net-SSLeay-1.94

Get number of TLSv1.3 session tickets that will be sent to a client.

    my $number_of_tickets = Net::SSLeay::CTX_get_num_tickets($ctx);
    # $ctx  - value corresponding to openssl's SSL_CTX structure
    #
    # returns: (integer) number of tickets to send

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get_num_tickets.html>

=item * CTX_set_keylog_callback

B<COMPATIBILITY:> not available in Net-SSLeay-1.90 and before; requires at least OpenSSL 1.1.1pre1 or at least LibreSSL 3.5.0 and Net-SSLeay-1.94

Set the TLS key logging callback.

    Net::SSLeay::CTX_set_keylog_callback($ctx, $cb);
    # $ctx  - value corresponding to openssl's SSL_CTX structure
    # $cb - reference to a perl callback function
    #
    # returns: no return value

The callback function will be called like this:

    keylog_cb_func($ssl, $line);
    # $ssl - value corresponding to OpenSSL's SSL object associated with the connection
    # $line - a string containing the key material in the format used by NSS for its SSLKEYLOGFILE debugging output

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_keylog_callback.html>

=item * CTX_get_keylog_callback

B<COMPATIBILITY:> not available in Net-SSLeay-1.90 and before; requires at least OpenSSL 1.1.1pre1 or at least LibreSSL 3.5.0 and Net-SSLeay-1.94

Retrieve the previously set TLS key logging callback.

    my $cb = Net::SSLeay::CTX_get_keylog_callback($ctx);
    # $ctx  - value corresponding to openssl's SSL_CTX structure
    #
    # returns: a reference to a perl callback function or undef if no callback is set

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get_keylog_callback.html>

=item * CTX_set_client_hello_cb

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before; requires at least OpenSSL 1.1.1pre1, not in LibreSSL

Set a callback function called during the early stages of ClientHello processing on the server.
When callback is undef, the existing callback is disabled.

    Net::SSLeay::CTX_set_client_hello_cb($ctx, $f, [$arg]);
    # $ctx  - value corresponding to openssl's SSL_CTX structure
    # $f - sub { my ($ssl, $arg) = @_; ...; return ($ret, $al); }
    # $arg - optional data passed to the callback function when invoked
    #
    # returns: no return value

The callback function will be called like this:

    client_hello_cb_func($ssl, $arg);
    # $ssl - value corresponding to OpenSSL's SSL object associated with the connection
    # $arg - data to callback
    #
    # An alert code must be returned with SSL_CLIENT_HELLO_FAILURE.
    # Return value examples:
    # ok: return Net::SSLeay::CLIENT_HELLO_SUCCESS();
    # suspend: return Net::SSLeay::CLIENT_HELLO_RETRY();
    # error: return (Net::SSLeay::CLIENT_HELLO_FAILURE(), Net::SSLeay::AD_NO_APPLICATION_PROTOCOL());

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_client_hello_cb.html>

=back

=head3 Low level API: SSL_* related functions

B<NOTE:> Please note that the function described in this chapter have "SSL_" part stripped from their original openssl names.

=over

=item * new

Creates a new SSL structure which is needed to hold the data for a TLS/SSL connection.
The new structure inherits the settings of the underlying context $ctx: connection
method (SSLv2/v3/TLSv1), options, verification settings, timeout settings.

    my $rv = Net::SSLeay::new($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: value corresponding to openssl's SSL structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_new.html>

=item * accept

Waits for a TLS/SSL client to initiate the TLS/SSL handshake. The communication
channel must already have been set and assigned to the ssl by setting an underlying BIO.

    my $rv = Net::SSLeay::accept($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: 1 = success, 0 = handshake not successful, <0 = fatal error during handshake

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_accept.html>

=item * add_client_CA

Adds the CA name extracted from cacert to the list of CAs sent to the client
when requesting a client certificate for the chosen ssl, overriding the setting
valid for ssl's SSL_CTX object.

    my $rv = Net::SSLeay::add_client_CA($ssl, $x);
    # $ssl - value corresponding to openssl's SSL structure
    # $x - value corresponding to openssl's X509 structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_client_CA_list.html>

=item * callback_ctrl

??? (more info needed)

    my $rv = Net::SSLeay::callback_ctrl($ssl, $cmd, $fp);
    # $ssl - value corresponding to openssl's SSL structure
    # $cmd - (integer) command id
    # $fp - (function pointer) ???
    #
    # returns: ???

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_ctrl.html>

=item * check_private_key

Checks the consistency of a private key with the corresponding certificate loaded into $ssl

    my $rv = Net::SSLeay::check_private_key($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * clear

Reset SSL object to allow another connection.

    Net::SSLeay::clear($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_clear.html>

=item * connect

Initiate the TLS/SSL handshake with an TLS/SSL server.

    my $rv = Net::SSLeay::connect($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: 1 = success, 0 = handshake not successful, <0 = fatal error during handshake

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_connect.html>

=item * copy_session_id

Copies the session structure fro $from to $to (+ also the private key and certificate associated with $from).

    Net::SSLeay::copy_session_id($to, $from);
    # $to - value corresponding to openssl's SSL structure
    # $from - value corresponding to openssl's SSL structure
    #
    # returns: no return value

=item * ctrl

Internal handling function for SSL objects.

B<BEWARE:> openssl doc says: This function should never be called directly!

    my $rv = Net::SSLeay::ctrl($ssl, $cmd, $larg, $parg);
    # $ssl - value corresponding to openssl's SSL structure
    # $cmd - (integer) command id
    # $larg - (integer) long ???
    # $parg - (string/pointer) ???
    #
    # returns: (long) result of given command ???

For more details about valid $cmd values check L</CTX_ctrl>.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_ctrl.html>

=item * do_handshake

Will wait for a SSL/TLS handshake to take place. If the connection is in client
mode, the handshake will be started. The handshake routines may have to be
explicitly set in advance using either SSL_set_connect_state or SSL_set_accept_state(3).

    my $rv = Net::SSLeay::do_handshake($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: 1 = success, 0 = handshake not successful, <0 = fatal error during handshake

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_do_handshake.html>

=item * dup

Returns a duplicate of $ssl.

    my $rv = Net::SSLeay::dup($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: value corresponding to openssl's SSL structure (0 on failure)

=item * free

Free an allocated SSL structure.

    Net::SSLeay::free($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_free.html>

=item * get0_param

B<COMPATIBILITY:> not available in Net-SSLeay-1.82 and before; requires at least OpenSSL 1.0.2-beta1 or LibreSSL 2.7.0

Returns the current verification parameters.

    my $vpm = Net::SSLeay::get0_param($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: value corresponding to openssl's X509_VERIFY_PARAM structure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get0_param.html>

=item * get_SSL_CTX

Returns a pointer to the SSL_CTX object, from which $ssl was created with Net::SSLeay::new.

    my $rv = Net::SSLeay::get_SSL_CTX($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: value corresponding to openssl's SSL_CTX structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_SSL_CTX.html>

=item * set_SSL_CTX

B<COMPATIBILITY:> requires at least OpenSSL 0.9.8f

Sets the SSL_CTX the corresponds to an SSL session.

    my $the_ssl_ctx = Net::SSLeay::set_SSL_CTX($ssl, $ssl_ctx);
    # $ssl - value corresponding to openssl's SSL structure
    # $ssl_ctx - Change the ssl object to the given ssl_ctx
    #
    # returns - the ssl_ctx

=item * get_app_data

Can be used to get application defined value/data.

    my $rv = Net::SSLeay::get_app_data($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: string/buffer/pointer ???

=item * set_app_data

Can be used to set some application defined value/data.

    my $rv = Net::SSLeay::set_app_data($ssl, $arg);
    # $ssl - value corresponding to openssl's SSL structure
    # $arg - (string/buffer/pointer ???) data
    #
    # returns: ???

=item * get_certificate

Gets X509 certificate from an established SSL connection.

    my $rv = Net::SSLeay::get_certificate($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: value corresponding to openssl's X509 structure (0 on failure)

=item * get_cipher

Obtains the name of the currently used cipher.

    my $rv = Net::SSLeay::get_cipher($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: (string) cipher name e.g. 'DHE-RSA-AES256-SHA' or '', when no session has been established.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_current_cipher.html>

=item * get_cipher_bits

Obtain the number of secret/algorithm bits used.

    my $rv = Net::SSLeay::get_cipher_bits($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: number of secret bits used by current cipher

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_current_cipher.html>
and L<https://www.openssl.org/docs/manmaster/man3/SSL_CIPHER_get_name.html>

=item * get_ciphers

B<COMPATIBILITY:> not available in Net-SSLeay-1.88 and before

Returns a list of SSL_CIPHER structures available for $ssl sorted by preference

    my @ciphers = Net::SSLeay::get_ciphers($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: (list) SSL_CIPHER structures or nothing when $ssl is undefined or no ciphers are available

Example:

    my @ciphers = Net::SSLeay::get_ciphers($ssl);
    foreach my $c (@ciphers) {
        print Net::SSLeay::CIPHER_get_name($c) . "\n";
    }

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_ciphers.html>

=item * get_cipher_list

Returns the name (string) of the SSL_CIPHER listed for $ssl with priority $n.

    my $rv = Net::SSLeay::get_cipher_list($ssl, $n);
    # $ssl - value corresponding to openssl's SSL structure
    # $n - (integer) priority
    #
    # returns: (string) cipher name e.g. 'EDH-DSS-DES-CBC3-SHA' or undef in case of error

Call Net::SSLeay::get_cipher_list with priority starting from 0 to obtain
the sorted list of available ciphers, until undef is returned:

    my $priority = 0;
    while (my $c = Net::SSLeay::get_cipher_list($ssl, $priority)) {
        print "cipher[$priority] = $c\n";
        $priority++;
    }

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_cipher_list.html>

=item * get_client_CA_list

Returns the list of client CAs explicitly set for $ssl using C<Net::SSLeay::set_client_CA_list>
or $ssl's SSL_CTX object with C<Net::SSLeay::CTX_set_client_CA_list>, when in server mode.

In client mode, returns the list of client CAs sent from the server, if any.

    my $rv = Net::SSLeay::get_client_CA_list($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
