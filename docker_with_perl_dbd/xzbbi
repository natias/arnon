	0x1123E,
	0x112A9,
	0x112AA,
	0x1144B,
	0x11450,
	0x1145A,
	0x1145C,
	0x1145D,
	0x1145E,
	0x114C6,
	0x114C7,
	0x115C1,
	0x115D8,
	0x11641,
	0x11644,
	0x11660,
	0x1166D,
	0x116B9,
	0x116BA,
	0x1173C,
	0x1173F,
	0x1183B,
	0x1183C,
	0x11944,
	0x11947,
	0x119E2,
	0x119E3,
	0x11A3F,
	0x11A47,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11C41,
	0x11C46,
	0x11C70,
	0x11C72,
	0x11EF7,
	0x11EF9,
	0x11FFF,
	0x12000,
	0x12470,
	0x12475,
	0x12FF1,
	0x12FF3,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3C,
	0x16B44,
	0x16B45,
	0x16E97,
	0x16E9B,
	0x16FE2,
	0x16FE3,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8C,
	0x1E95E,
	0x1E960
};

#  endif	/* EBCDIC 037 */

static const UV UNI_PALM_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10860,
	0x10880
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_PATSYN_invlist[] = {  /* for ASCII/Latin1 */
	57,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0x7F,
	0xA1,
	0xA8,
	0xA9,
	0xAA,
	0xAB,
	0xAD,
	0xAE,
	0xAF,
	0xB0,
	0xB2,
	0xB6,
	0xB7,
	0xBB,
	0xBC,
	0xBF,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2010,
	0x2028,
	0x2030,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x205F,
	0x2190,
	0x2460,
	0x2500,
	0x2776,
	0x2794,
	0x2C00,
	0x2E00,
	0x2E80,
	0x3001,
	0x3004,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0xFD3E,
	0xFD40,
	0xFE45,
	0xFE47
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_PATSYN_invlist[] = {  /* for EBCDIC 1047 */
	61,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAD,
	0xAE,
	0xAF,
	0xB3,
	0xB4,
	0xB7,
	0xBD,
	0xBE,
	0xBF,
	0xC1,
	0xD0,
	0xD1,
	0xE0,
	0xE2,
	0x2010,
	0x2028,
	0x2030,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x205F,
	0x2190,
	0x2460,
	0x2500,
	0x2776,
	0x2794,
	0x2C00,
	0x2E00,
	0x2E80,
	0x3001,
	0x3004,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0xFD3E,
	0xFD40,
	0xFE45,
	0xFE47
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_PATSYN_invlist[] = {  /* for EBCDIC 037 */
	59,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4A,
	0x51,
	0x5A,
	0x62,
	0x6A,
	0x6D,
	0x6E,
	0x70,
	0x79,
	0x80,
	0x8A,
	0x8C,
	0x8F,
	0x91,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAA,
	0xAC,
	0xAF,
	0xB3,
	0xB4,
	0xB7,
	0xBA,
	0xBC,
	0xBF,
	0xC1,
	0xD0,
	0xD1,
	0xE0,
	0xE2,
	0x2010,
	0x2028,
	0x2030,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0x205F,
	0x2190,
	0x2460,
	0x2500,
	0x2776,
	0x2794,
	0x2C00,
	0x2E00,
	0x2E80,
	0x3001,
	0x3004,
	0x3008,
	0x3021,
	0x3030,
	0x3031,
	0xFD3E,
	0xFD40,
	0xFE45,
	0xFE47
};

#  endif	/* EBCDIC 037 */

static const UV UNI_PAUC_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11AC0,
	0x11AF9
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_PC_invlist[] = {  /* for ASCII/Latin1 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5F,
	0x60,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFF3F,
	0xFF40
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_PC_invlist[] = {  /* for EBCDIC 1047 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6D,
	0x6E,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFF3F,
	0xFF40
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_PC_invlist[] = {  /* for EBCDIC 037 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6D,
	0x6E,
	0x203F,
	0x2041,
	0x2054,
	0x2055,
	0xFE33,
	0xFE35,
	0xFE4D,
	0xFE50,
	0xFF3F,
	0xFF40
};

#  endif	/* EBCDIC 037 */

static const UV UNI_PCM_invlist[] = {  /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x600,
	0x606,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x890,
	0x892,
	0x8E2,
	0x8E3,
	0x110BD,
	0x110BE,
	0x110CD,
	0x110CE
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_PD_invlist[] = {  /* for ASCII/Latin1 */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D,
	0x2E,
	0x58A,
	0x58B,
	0x5BE,
	0x5BF,
	0x1400,
	0x1401,
	0x1806,
	0x1807,
	0x2010,
	0x2016,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x2E5D,
	0x2E5E,
	0x301C,
	0x301D,
	0x3030,
	0x3031,
	0x30A0,
	0x30A1,
	0xFE31,
	0xFE33,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E,
	0x10EAD,
	0x10EAE
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_PD_invlist[] = {  /* for EBCDIC 1047 */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0x58A,
	0x58B,
	0x5BE,
	0x5BF,
	0x1400,
	0x1401,
	0x1806,
	0x1807,
	0x2010,
	0x2016,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x2E5D,
	0x2E5E,
	0x301C,
	0x301D,
	0x3030,
	0x3031,
	0x30A0,
	0x30A1,
	0xFE31,
	0xFE33,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E,
	0x10EAD,
	0x10EAE
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_PD_invlist[] = {  /* for EBCDIC 037 */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0x58A,
	0x58B,
	0x5BE,
	0x5BF,
	0x1400,
	0x1401,
	0x1806,
	0x1807,
	0x2010,
	0x2016,
	0x2E17,
	0x2E18,
	0x2E1A,
	0x2E1B,
	0x2E3A,
	0x2E3C,
	0x2E40,
	0x2E41,
	0x2E5D,
	0x2E5E,
	0x301C,
	0x301D,
	0x3030,
	0x3031,
	0x30A0,
	0x30A1,
	0xFE31,
	0xFE33,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E,
	0x10EAD,
	0x10EAE
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_PE_invlist[] = {  /* for ASCII/Latin1 */
	153,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x29,
	0x2A,
	0x5D,
	0x5E,
	0x7D,
	0x7E,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0x169C,
	0x169D,
	0x2046,
	0x2047,
	0x207E,
	0x207F,
	0x208E,
	0x208F,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x232A,
	0x232B,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C6,
	0x27C7,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FD,
	0x29FE,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x2E56,
	0x2E57,
	0x2E58,
	0x2E59,
	0x2E5A,
	0x2E5B,
	0x2E5C,
	0x2E5D,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301E,
	0x3020,
	0xFD3E,
	0xFD3F,
	0xFE18,
	0xFE19,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE45,
	0xFE48,
	0xFE49,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFF09,
	0xFF0A,
	0xFF3D,
	0xFF3E,
	0xFF5D,
	0xFF5E,
	0xFF60,
	0xFF61,
	0xFF63,
	0xFF64
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_PE_invlist[] = {  /* for EBCDIC 1047 */
	153,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5D,
	0x5E,
	0xBD,
	0xBE,
	0xD0,
	0xD1,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0x169C,
	0x169D,
	0x2046,
	0x2047,
	0x207E,
	0x207F,
	0x208E,
	0x208F,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x232A,
	0x232B,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C6,
	0x27C7,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FD,
	0x29FE,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x2E56,
	0x2E57,
	0x2E58,
	0x2E59,
	0x2E5A,
	0x2E5B,
	0x2E5C,
	0x2E5D,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
	0x300E,
	0x300F,
	0x3010,
	0x3011,
	0x3012,
	0x3015,
	0x3016,
	0x3017,
	0x3018,
	0x3019,
	0x301A,
	0x301B,
	0x301C,
	0x301E,
	0x3020,
	0xFD3E,
	0xFD3F,
	0xFE18,
	0xFE19,
	0xFE36,
	0xFE37,
	0xFE38,
	0xFE39,
	0xFE3A,
	0xFE3B,
	0xFE3C,
	0xFE3D,
	0xFE3E,
	0xFE3F,
	0xFE40,
	0xFE41,
	0xFE42,
	0xFE43,
	0xFE44,
	0xFE45,
	0xFE48,
	0xFE49,
	0xFE5A,
	0xFE5B,
	0xFE5C,
	0xFE5D,
	0xFE5E,
	0xFE5F,
	0xFF09,
	0xFF0A,
	0xFF3D,
	0xFF3E,
	0xFF5D,
	0xFF5E,
	0xFF60,
	0xFF61,
	0xFF63,
	0xFF64
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_PE_invlist[] = {  /* for EBCDIC 037 */
	153,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5D,
	0x5E,
	0xBB,
	0xBC,
	0xD0,
	0xD1,
	0xF3B,
	0xF3C,
	0xF3D,
	0xF3E,
	0x169C,
	0x169D,
	0x2046,
	0x2047,
	0x207E,
	0x207F,
	0x208E,
	0x208F,
	0x2309,
	0x230A,
	0x230B,
	0x230C,
	0x232A,
	0x232B,
	0x2769,
	0x276A,
	0x276B,
	0x276C,
	0x276D,
	0x276E,
	0x276F,
	0x2770,
	0x2771,
	0x2772,
	0x2773,
	0x2774,
	0x2775,
	0x2776,
	0x27C6,
	0x27C7,
	0x27E7,
	0x27E8,
	0x27E9,
	0x27EA,
	0x27EB,
	0x27EC,
	0x27ED,
	0x27EE,
	0x27EF,
	0x27F0,
	0x2984,
	0x2985,
	0x2986,
	0x2987,
	0x2988,
	0x2989,
	0x298A,
	0x298B,
	0x298C,
	0x298D,
	0x298E,
	0x298F,
	0x2990,
	0x2991,
	0x2992,
	0x2993,
	0x2994,
	0x2995,
	0x2996,
	0x2997,
	0x2998,
	0x2999,
	0x29D9,
	0x29DA,
	0x29DB,
	0x29DC,
	0x29FD,
	0x29FE,
	0x2E23,
	0x2E24,
	0x2E25,
	0x2E26,
	0x2E27,
	0x2E28,
	0x2E29,
	0x2E2A,
	0x2E56,
	0x2E57,
	0x2E58,
	0x2E59,
	0x2E5A,
	0x2E5B,
	0x2E5C,
	0x2E5D,
	0x3009,
	0x300A,
	0x300B,
	0x300C,
	0x300D,
