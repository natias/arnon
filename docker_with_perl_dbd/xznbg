    # $ssl - value corresponding to openssl's SSL structure
    # $purpose - (integer) purpose identifier
    #
    # returns: 1 on success, 0 on failure

For more info about available $purpose identifiers see L</CTX_set_purpose>.

=item * set_quiet_shutdown

Sets the 'quiet shutdown' flag for $ssl to be $mode.

    Net::SSLeay::set_quiet_shutdown($ssl, $mode);
    # $ssl - value corresponding to openssl's SSL structure
    # $mode - 0 or 1
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_quiet_shutdown.html>

=item * set_session

Set a TLS/SSL session to be used during TLS/SSL connect.

    my $rv = Net::SSLeay::set_session($to, $ses);
    # $to - value corresponding to openssl's SSL structure
    # $ses - value corresponding to openssl's SSL_SESSION structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_set_session.html>

=item * set_session_id_context

Sets the context $sid_ctx of length $sid_ctx_len within which a session can be reused for the $ssl object.

    my $rv = Net::SSLeay::set_session_id_context($ssl, $sid_ctx, $sid_ctx_len);
    # $ssl - value corresponding to openssl's SSL structure
    # $sid_ctx - data buffer
    # $sid_ctx_len - length of data in $sid_ctx
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_session_id_context.html>

=item * set_session_secret_cb

Setup pre-shared secret session resumption function.

    Net::SSLeay::set_session_secret_cb($ssl, $func, $data);
    # $ssl - value corresponding to openssl's SSL structure
    # $func - perl reference to callback function
    # $data - [optional] data that will be passed to callback function when invoked
    #
    # returns: no return value

The callback function will be called like:

    callback_function($secret, $ciphers, $pref_cipher, $data);
    # $secret is the current master session key, usually all 0s at the beginning of a session
    # $ciphers is ref to an array of peer cipher names
    # $pref_cipher is a ref to an index into the list of cipher names of
    #  the preferred cipher. Set it if you want to specify a preferred cipher
    # $data is the data passed to set_session_secret_cb

The callback function should return 1 if it likes the suggested cipher (or has selected an alternative
by setting pref_cipher), else it should return 0 (in which case OpenSSL will select its own preferred cipher).

With OpenSSL 1.1 and later, callback_function can change the master key for the session by
altering $secret and returning 1.

=item * CTX_set_tlsext_ticket_getkey_cb

Setup encryption for TLS session tickets (stateless session reuse).

    Net::SSLeay::CTX_set_tlsext_ticket_getkey_cb($ctx, $func, $data);
    # $ctx  - value corresponding to openssl's SSL_CTX structure
    # $func - perl reference to callback function
    # $data - [optional] data that will be passed to callback function when invoked
    #
    # returns: no return value

The callback function will be called like:

    getkey($data,[$key_name]) -> ($key,$current_key_name)
    # $data is the data passed to set_session_secret_cb
    # $key_name is the name of the key OpenSSL has extracted from the session ticket
    # $key is the requested key for ticket encryption + HMAC
    # $current_key_name is the name for the currently valid key

OpenSSL will call the function without a key name if it generates a new ticket.
It then needs the callback to return the encryption+HMAC key and an identifier
(key name) for this key.

When OpenSSL gets a session ticket from the client it extracts the key name and
calls the callback with this name as argument. It then expects the callback to
return the encryption+HMAC key matching the requested key name and and also the
key name which should be used at the moment. If the requested key name and the
returned key name differ it means that this session ticket was created with an
expired key and need to be renewed. In this case OpenSSL will call the callback
again with no key name to create a new session ticket based on the old one.

The key must be at least 32 byte of random data which can be created with
RAND_bytes. Internally the first 16 byte are used as key in AES-128 encryption
while the next 16 byte are used for the SHA-256 HMAC.
The key name are binary data and must be exactly 16 byte long.

Example:

    Net::SSLeay::RAND_bytes(my $oldkey,32);
    Net::SSLeay::RAND_bytes(my $newkey,32);
    my $oldkey_name = pack("a16",'oldsecret');
    my $newkey_name = pack("a16",'newsecret');

    my @keys = (
        [ $newkey_name, $newkey ], # current active key
        [ $oldkey_name, $oldkey ], # already expired
    );

    Net::SSLeay::CTX_set_tlsext_ticket_getkey_cb($server2->_ctx, sub {
        my ($mykeys,$name) = @_;

        # return (current_key, current_key_name) if no name given
        return ($mykeys->[0][1],$mykeys->[0][0]) if ! $name;

        # return (matching_key, current_key_name) if we find a key matching
        # the given name
        for(my $i = 0; $i<@$mykeys; $i++) {
            next if $name ne $mykeys->[$i][0];
            return ($mykeys->[$i][1],$mykeys->[0][0]);
        }

        # no matching key found
        return;
    },\@keys);

This function is based on the OpenSSL function SSL_CTX_set_tlsext_ticket_key_cb
but provides a simpler to use interface. For more information see
L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_tlsext_ticket_key_cb.html>

=item * set_session_ticket_ext_cb

Setup callback for TLS session tickets (stateless session reuse).

    Net::SSLeay::set_session_ticket_ext_cb($ssl, $func, $data);
    # $ssl  - value corresponding to openssl's SSL structure
    # $func - perl reference to callback function
    # $data - [optional] data that will be passed to callback function when invoked
    #
    # returns: no return value

The callback function will be called like:

    getticket($ssl,$ticket,$data) -> $return_value
    # $ssl is a value corresponding to openssl's SSL structure
    # $ticket is a value of received TLS session ticket (can also be empty)
    # $data is the data passed to set_session_ticket_ext_cb
    # $return_value is either 0 (failure) or 1 (success)

This function is based on the OpenSSL function SSL_set_session_ticket_ext_cb.

=item * set_session_ticket_ext

Set TLS session ticket (stateless session reuse).

    Net::SSLeay::set_session_ticket_ext($ssl, $ticket);
    # $ssl    - value corresponding to openssl's SSL structure
    # $ticket - is a value of TLS session ticket which client will send (can also be empty string)
    #
    # returns: no return value

The callback function will be called like:

    getticket($ssl,$ticket,$data) -> $return_value
    # $ssl is a value corresponding to openssl's SSL structure
    # $ticket is a value of received TLS session ticket (can also be empty)
    # $data is the data passed to set_session_ticket_ext_cb
    # $return_value is either 0 (failure) or 1 (success)

This function is based on the OpenSSL function SSL_set_session_ticket_ext_cb.

=item * set_shutdown

Sets the shutdown state of $ssl to $mode.

    Net::SSLeay::set_shutdown($ssl, $mode);
    # $ssl - value corresponding to openssl's SSL structure
    # $mode - (integer) shutdown mode:
    #         0 - No shutdown
    #         1 - SSL_SENT_SHUTDOWN
    #         2 - SSL_RECEIVED_SHUTDOWN
    #         3 - SSL_RECEIVED_SHUTDOWN+SSL_SENT_SHUTDOWN
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_set_shutdown.html>

=item * set_ssl_method

Sets a new TLS/SSL method for a particular $ssl object.

    my $rv = Net::SSLeay::set_ssl_method($ssl, $method);
    # $ssl - value corresponding to openssl's SSL structure
    # $method - value corresponding to openssl's SSL_METHOD structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_ssl_version.html>

=item * set_tmp_dh

Sets DH parameters to be used to be $dh.

    my $rv = Net::SSLeay::set_tmp_dh($ssl, $dh);
    # $ssl - value corresponding to openssl's SSL structure
    # $dh - value corresponding to openssl's DH structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_tmp_dh_callback.html>

=item * set_tmp_dh_callback

Sets the callback function for $ssl to be used when a DH parameters are required to $dh_cb.

??? (does this function really work?)

    Net::SSLeay::set_tmp_dh_callback($ssl, $dh);
    # $ssl - value corresponding to openssl's SSL structure
    # $dh_cb - pointer to function ???
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_tmp_dh_callback.html>

=item * set_tmp_rsa

Sets the temporary/ephemeral RSA key to be used in $ssl to be $rsa.

    my $rv = Net::SSLeay::set_tmp_rsa($ssl, $rsa);
    # $ssl - value corresponding to openssl's SSL structure
    # $rsa - value corresponding to openssl's RSA structure
    #
    # returns: 1 on success, 0 on failure

Example:

    $rsakey = Net::SSLeay::RSA_generate_key();
    Net::SSLeay::set_tmp_rsa($ssl, $rsakey);
    Net::SSLeay::RSA_free($rsakey);

Check openssl doc L<https://www.openssl.org/docs/man1.0.2/man3/SSL_CTX_set_tmp_rsa_callback.html>

=item * set_tmp_rsa_callback

Sets the callback function for $ssl to be used when a temporary/ephemeral RSA key is required to $tmp_rsa_callback.

??? (does this function really work?)

    Net::SSLeay::set_tmp_rsa_callback($ssl, $tmp_rsa_callback);
    # $ssl - value corresponding to openssl's SSL structure
    # $tmp_rsa_callback - (function pointer) ???
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/man1.0.2/man3/SSL_CTX_set_tmp_rsa_callback.html>

=item * set_trust

    my $rv = Net::SSLeay::set_trust($ssl, $trust);
    # $ssl - value corresponding to openssl's SSL structure
    # $trust - (integer) trust identifier
    #
    # returns: the original value

For more details about $trust values see L</CTX_set_trust>.

=item * shutdown

Shuts down an active TLS/SSL connection. It sends the 'close notify' shutdown alert to the peer.

    my $rv = Net::SSLeay::shutdown($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: 1 - shutdown was successfully completed
    #          0 - shutdown is not yet finished,
    #         -1 - shutdown was not successful

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_shutdown.html>

=item * state_string

Returns a 6 letter string indicating the current state of the SSL object $ssl.

    my $rv = Net::SSLeay::state_string($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: 6-letter string

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_state_string.html>

=item * state_string_long

Returns a string indicating the current state of the SSL object $ssl.

    my $rv = Net::SSLeay::state_string_long($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: state strings

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_state_string.html>

=item * set_default_passwd_cb

B<COMPATIBILITY:> not available in Net-SSLeay-1.82 and before; requires at least OpenSSL 1.1.0f. Not needed with LibreSSL.

Sets the default password callback called when loading/storing a PEM certificate with encryption for $ssl.

    Net::SSLeay::set_default_passwd_cb($ssl, $func);
    # $ssl - value corresponding to openssl's SSL structure
    # $func - perl reference to callback function
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_default_passwd_cb.html>

=item * set_default_passwd_cb_userdata

B<COMPATIBILITY:> not available in Net-SSLeay-1.82 and before; requires at least OpenSSL 1.1.0f. Not needed with LibreSSL.

Sets a pointer to userdata which will be provided to the password callback of $ssl on invocation.

    Net::SSLeay::set_default_passwd_cb_userdata($ssl, $userdata);
    # $ssl - value corresponding to openssl's SSL structure
    # $userdata - data that will be passed to callback function when invoked
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_default_passwd_cb.html>

=item * use_PrivateKey

Adds $pkey as private key to $ssl.

    my $rv = Net::SSLeay::use_PrivateKey($ssl, $pkey);
    # $ssl - value corresponding to openssl's SSL structure
    # $pkey - value corresponding to openssl's EVP_PKEY structure
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * use_PrivateKey_ASN1

Adds the private key of type $pk stored in $data to $ssl.

    my $rv = Net::SSLeay::use_PrivateKey_ASN1($pk, $ssl, $d, $len);
    # $pk - (integer) key type, NID of corresponding algorithm
    # $ssl - value corresponding to openssl's SSL structure
    # $data - key data (binary)
    # $len - length of $data
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * use_PrivateKey_file

Adds the first private key found in $file to $ssl.

    my $rv = Net::SSLeay::use_PrivateKey_file($ssl, $file, $type);
    # $ssl - value corresponding to openssl's SSL structure
    # $file - (string) file name
    # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * use_RSAPrivateKey

Adds $rsa as RSA private key to $ssl.

    my $rv = Net::SSLeay::use_RSAPrivateKey($ssl, $rsa);
    # $ssl - value corresponding to openssl's SSL structure
    # $rsa - value corresponding to openssl's RSA structure
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * use_RSAPrivateKey_ASN1

Adds RSA private key stored in $data to $ssl.

    my $rv = Net::SSLeay::use_RSAPrivateKey_ASN1($ssl, $data, $len);
    # $ssl - value corresponding to openssl's SSL structure
    # $data - key data (binary)
    # $len - length of $data
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * use_RSAPrivateKey_file

Adds the first RSA private key found in $file to $ssl.

    my $rv = Net::SSLeay::use_RSAPrivateKey_file($ssl, $file, $type);
    # $ssl - value corresponding to openssl's SSL structure
    # $file - (string) file name
    # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * use_certificate

Loads the certificate $x into $ssl.

    my $rv = Net::SSLeay::use_certificate($ssl, $x);
    # $ssl - value corresponding to openssl's SSL structure
    # $x - value corresponding to openssl's X509 structure
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * use_certificate_ASN1

Loads the ASN1 encoded certificate from $data to $ssl.

    my $rv = Net::SSLeay::use_certificate_ASN1($ssl, $data, $len);
    # $ssl - value corresponding to openssl's SSL structure
    # $data - certificate data (binary)
    # $len - length of $data
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * use_certificate_chain_file

B<COMPATIBILITY>: not available in Net-SSLeay-1.82 and before; requires at least OpenSSL 1.1.0 or at least LibreSSL 3.6.0 and Net-SSLeay-1.94

Loads a certificate chain from $file into $ssl. The certificates must be in PEM format and must be sorted
starting with the subject's certificate (actual client or server certificate), followed by intermediate
CA certificates if applicable, and ending at the highest level (root) CA.

    my $rv = Net::SSLeay::use_certificate_chain_file($ssl, $file);
    # $ssl - value corresponding to openssl's SSL structure
    # $file - (string) file name
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * use_certificate_file

Loads the first certificate stored in $file into $ssl.

    my $rv = Net::SSLeay::use_certificate_file($ssl, $file, $type);
    # $ssl - value corresponding to openssl's SSL structure
    # $file - (string) file name
    # $type - (integer) type - use constants &Net::SSLeay::FILETYPE_PEM or &Net::SSLeay::FILETYPE_ASN1
    #
    # returns: 1 on success, otherwise check out the error stack to find out the reason

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_use_certificate.html>

=item * get_version

Returns SSL/TLS protocol name

    my $rv = Net::SSLeay::get_version($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: (string) protocol name, see OpenSSL manual for the full list
    #          TLSv1
    #          TLSv1.3

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_get_version.html>

=item * version

Returns SSL/TLS protocol version

    my $rv = Net::SSLeay::version($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: (integer) protocol version, see OpenSSL manual for the full list
    #          0x0301 - TLS1_VERSION  (TLSv1)
    #          0xFEFF - DTLS1_VERSION (DTLSv1)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_version.html>

=item * client_version

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.0, not in LibreSSL

Returns TLS protocol version used by the client when initiating the connection

    my $rv = Net::SSLeay::client_version($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: (integer) protocol version, see OpenSSL manual for the full list
    #          0x0301 - TLS1_VERSION  (TLSv1)
    #          0xFEFF - DTLS1_VERSION (DTLSv1)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_client_version.html>

=item * is_dtls

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.0 or at least LibreSSL 3.3.1 and Net-SSLeay-1.94

    my $rv = Net::SSLeay::is_dtls($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: (integer) zero or one
    #          0 - connection is not using DTLS
    #          1 - connection is using DTLS

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_is_dtls.html>

=item * want

Returns state information for the SSL object $ssl.

    my $rv = Net::SSLeay::want($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: state
    #          1 - SSL_NOTHING
    #          2 - SSL_WRITING
    #          3 - SSL_READING
    #          4 - SSL_X509_LOOKUP

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_want.html>

=item * write

Writes data from the buffer $data into the specified $ssl connection.

    my $rv = Net::SSLeay::write($ssl, $data);
    # $ssl - value corresponding to openssl's SSL structure
    # $data - data to be written
    #
    # returns: >0 - (success) number of bytes actually written to the TLS/SSL connection
    #           0 - write not successful, probably the underlying connection was closed
    #          <0 - error

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_write.html>

=item * write_ex

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.1, not in LibreSSL

Writes data from the buffer $data into the specified $ssl connection.

    my ($len, $rv) = Net::SSLeay::write_ex($ssl, $data);
    # $ssl - value corresponding to openssl's SSL structure
    # $data - data to be written
    #
    # returns a list: two-item list consisting of number of bytes written,
    #                 and return code from SSL_write_ex()

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_write_ex.html>

=item * write_partial

B<NOTE:> Does not exactly correspond to any low level API function

Writes a fragment of data in $data from the buffer $data into the specified
$ssl connection. This is a non-blocking function like L<Net::SSLeay::write()>.

    my $rv = Net::SSLeay::write_partial($ssl, $from, $count, $data);
    # $ssl - value corresponding to openssl's SSL structure
    # $from - (integer) offset from the beginning of $data
    # $count - (integer) length of data to be written
    # $data - data buffer
    #
    # returns: >0 - (success) number of bytes actually written to the TLS/SSL connection
    #           0 - write not successful, probably the underlying connection was closed
    #          <0 - error

=item * set_tlsext_host_name

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least OpenSSL 0.9.8f

Sets TLS servername extension on SSL object $ssl to value $name.

    my $rv = set_tlsext_host_name($ssl, $name);
    # $ssl - value corresponding to openssl's SSL structure
    # $name - (string) name to be set
    #
    # returns: 1 on success, 0 on failure

=item * client_hello_isv2

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before; requires at least OpenSSL 1.1.1pre1, not in LibreSSL

B<NOTE:> to be used only from a callback set with L<CTX_set_client_hello_cb>.

Indicate if the ClientHello was carried in a SSLv2 record and is in the SSLv2 format.

    my $rv = client_hello_isv2($s);
    # $s - value corresponding to openssl's SSL structure
    #
    # returns: 1 for SSLv2-format ClientHellos and 0 otherwise

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_client_hello_isv2.html>

=item * client_hello_get0_legacy_version

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before; requires at least OpenSSL 1.1.1pre1, not in LibreSSL

B<NOTE:> to be used only from a callback set with L<CTX_set_client_hello_cb>.

Returns legacy_version, also known as client_version, field from the ClientHello.

    my $rv = client_hello_get0_legacy_version($s);
    # $s - value corresponding to openssl's SSL structure
    #
    # returns: unsigned integer, for example 0x0303 (TLS v1.2) with TLS 1.3

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_client_hello_get0_legacy_version.html>

=item * client_hello_get0_random, client_hello_get0_session_id, client_hello_get0_ciphers and client_hello_get0_compression_methods

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before; requires at least OpenSSL 1.1.1pre1, not in LibreSSL

B<NOTE:> to be used only from a callback set with L<CTX_set_client_hello_cb>.

These functions return random, session_id, cipher_suites and compression_methods fields from the ClientHello, respectively.

    my $random = client_hello_get0_random($s);
    my $session_id = client_hello_get0_session_id($s);
    my $ciphers = client_hello_get0_ciphers($s);
    my $compression_methods = client_hello_get0_compression_methods($s);
    # $s - value corresponding to openssl's SSL structure
    #
    # returns: raw octet data where data length, zero or more, depends on the field definition

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_client_hello_get0_random.html>

=item * client_hello_get1_extensions_present and client_hello_get_extension_order

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before; requires at least OpenSSL 1.1.1pre1, not in LibreSSL

B<NOTE:> to be used only from a callback set with L<CTX_set_client_hello_cb>.

Returns a reference to an array holding the numerical value of the TLS extension types in the order they appear in the ClientHello. client_hello_get_extension_order is similar and requires at least OpenSSL 3.2.0, not in LibreSSL.

    my $ref = client_hello_get1_extensions_present($s);
    # $s - value corresponding to openssl's SSL structure
    #
    # returns: an array reference of zero or more extension types or undef on failure

Example from a TLS 1.3 ClientHello:

    sub client_hello_cb {
        my ($ssl, $arg) = @_;
        my $ref = client_hello_get1_extensions_present($ssl);
        print join(' ', @$ref), "\n" if $ref;
    }

Prints: C<11 10 35 22 23 13 43 45 51>

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_client_hello_get1_extensions_present.html>

=item * client_hello_get0_ext

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before; requires at least OpenSSL 1.1.1pre1, not in LibreSSL

B<NOTE:> to be used only from a callback set with L<CTX_set_client_hello_cb>.

Returns an extension by type number from the ClientHello.

    my $ref = client_hello_get1_extensions_present($s, $type);
    # $s - value corresponding to openssl's SSL structure
    # $type - (integer) extension type number
    #
    # returns: zero or more octets of extension contents including extension length, undef if the extension is not present

Example: Get the value of TLS extension C<supported_versions>. You can use constant C<TLSEXT_TYPE_supported_versions> or 43 directly.

    sub client_hello_cb {
        my ($ssl, $arg) = @_;
        my $ext_ver = Net::SSLeay::client_hello_get0_ext($ssl, Net::SSLeay::TLSEXT_TYPE_supported_versions());
        print unpack('H*', $ext_ver), "\n" if defined $ext_ver;
    }

Prints: C<080304030303020301> where the first octet 0x08 is the extension length and the following four 16bit values correspond to TLS versions 1.3, 1.2, 1.1 and 1.0.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_client_hello_get0_ext.html>

=back

=head3 Low level API: RAND_* related functions

Check openssl doc related to RAND stuff L<https://www.openssl.org/docs/manmaster/man3/rand.html>

=over

=item * RAND_add

Mixes the $num bytes at $buf into the PRNG state.

    Net::SSLeay::RAND_add($buf, $num, $entropy);
    # $buf - buffer with data to be mixed into the PRNG state
    # $num - number of bytes in $buf
    # $entropy - estimate of how much randomness is contained in $buf (in bytes)
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/RAND_add.html>

=item * RAND_seed

Equivalent to L</RAND_add> when $num == $entropy.

    Net::SSLeay::RAND_seed($buf);   # Perlishly figures out buf size
    # $buf - buffer with data to be mixed into the PRNG state
    # $num - number of bytes in $buf
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/RAND_add.html>

=item * RAND_status

Gives PRNG status (seeded enough or not).

    my $rv = Net::SSLeay::RAND_status();
    # returns: 1 if the PRNG has been seeded with enough data, 0 otherwise

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/RAND_add.html>

=item * RAND_bytes

Puts $num cryptographically strong pseudo-random bytes into $buf.

    my $rv = Net::SSLeay::RAND_bytes($buf, $num);
    # $buf - buffer where the random data will be stored
    # $num - the size (in bytes) of requested random data
    #
    # returns: 1 on success, -1 if not supported by the current RAND method, or 0 on other failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/RAND_bytes.html>

=item * RAND_priv_bytes

B<COMPATIBILITY:> not available in Net-SSLeay-1.85 and before; requires at least OpenSSL 1.1.1, not in LibreSSL

Puts $num cryptographically strong pseudo-random bytes into $buf.

    my $rv = Net::SSLeay::RAND_priv_bytes($buf, $num);
    # $buf - buffer where the random data will be stored
    # $num - the size (in bytes) of requested random data
    #
    # returns: 1 on success, -1 if not supported by the current RAND method, or 0 on other failure

RAND_priv_bytes has the same semantics as RAND_bytes, but see see the documentation for more information.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/RAND_priv_bytes.html>

=item * RAND_pseudo_bytes

Puts $num pseudo-random (not necessarily unpredictable) bytes into $buf.

    my $rv = Net::SSLeay::RAND_pseudo_bytes($buf, $num);
    # $buf - buffer where the random data will be stored
    # $num - the size (in bytes) of requested random data
    #
    # returns: 1 if the bytes generated are cryptographically strong, 0 otherwise

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/RAND_bytes.html>

=item * RAND_cleanup

Erase the PRNG state.

    Net::SSLeay::RAND_cleanup();
    # no args, no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/RAND_cleanup.html>

=item * RAND_egd_bytes

Queries the entropy gathering daemon EGD on socket $path for $bytes bytes.

    my $rv = Net::SSLeay::RAND_egd_bytes($path, $bytes);
    # $path - path to a socket of entropy gathering daemon EGD
    # $bytes - number of bytes we want from EGD
    #
    # returns: the number of bytes read from the daemon on success, and -1 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/RAND_egd.html>

=item * RAND_file_name

Generates a default path for the random seed file.

    my $file = Net::SSLeay::RAND_file_name($num);
    # $num - maximum size of returned file name
    #
    # returns: string with file name on success, '' (empty string) or undef on failure

LibreSSL and OpenSSL 1.1.0a and later return undef when, for example, $num is not large enough to hold the filename.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/RAND_load_file.html>

=item * RAND_load_file

B<COMPATIBILITY:> Is no longer functional on LibreSSL

Reads $max_bytes of bytes from $file_name and adds them to the PRNG.

    my $rv = Net::SSLeay::RAND_load_file($file_name, $max_bytes);
    # $file_name - the name of file
    # $max_bytes - bytes to read from $file_name; -1 => the complete file is read
    #
    # returns: the number of bytes read

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/RAND_load_file.html>

=item * RAND_write_file

Writes 1024 random bytes to $file_name which can be used to initialize the PRNG by calling L</RAND_load_file> in a later session.

    my $rv = Net::SSLeay::RAND_write_file($file_name);
    # $file_name - the name of file
    #
    # returns: the number of bytes written, and -1 if the bytes written were generated without appropriate seed

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/RAND_load_file.html>

=item * RAND_poll

Collects some entropy from operating system and adds it to the PRNG.

    my $rv = Net::SSLeay::RAND_poll();
    # returns: 1 on success, 0 on failure (unable to gather reasonable entropy)

=back

=head3 Low level API: OBJ_* related functions

=over

=item * OBJ_cmp

Compares ASN1_OBJECT $a to ASN1_OBJECT $b.

    my $rv = Net::SSLeay::OBJ_cmp($a, $b);
    # $a - value corresponding to openssl's ASN1_OBJECT structure
    # $b - value corresponding to openssl's ASN1_OBJECT structure
    #
    # returns: if the two are identical 0 is returned

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OBJ_nid2obj.html>

=item * OBJ_dup

Returns a copy/duplicate of $o.

    my $rv = Net::SSLeay::OBJ_dup($o);
    # $o - value corresponding to openssl's ASN1_OBJECT structure
    #
    # returns: value corresponding to openssl's ASN1_OBJECT structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OBJ_nid2obj.html>

=item * OBJ_nid2ln

Returns long name for given NID $n.

    my $rv = Net::SSLeay::OBJ_nid2ln($n);
    # $n - (integer) NID
    #
    # returns: (string) long name e.g. 'commonName'

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OBJ_nid2obj.html>

=item * OBJ_ln2nid

Returns NID corresponding to given long name $n.

    my $rv = Net::SSLeay::OBJ_ln2nid($s);
    # $s - (string) long name e.g. 'commonName'
    #
    # returns: (integer) NID

=item * OBJ_nid2sn

Returns short name for given NID $n.

    my $rv = Net::SSLeay::OBJ_nid2sn($n);
    # $n - (integer) NID
    #
    # returns: (string) short name e.g. 'CN'

Example:

    print Net::SSLeay::OBJ_nid2sn(&Net::SSLeay::NID_commonName);

=item * OBJ_sn2nid

Returns NID corresponding to given short name $s.

    my $rv = Net::SSLeay::OBJ_sn2nid($s);
    # $s - (string) short name e.g. 'CN'
    #
    # returns: (integer) NID

Example:

    print "NID_commonName constant=", &Net::SSLeay::NID_commonName;
    print "OBJ_sn2nid('CN')=", Net::SSLeay::OBJ_sn2nid('CN');

=item * OBJ_nid2obj

Returns ASN1_OBJECT for given NID $n.

    my $rv = Net::SSLeay::OBJ_nid2obj($n);
    # $n - (integer) NID
    #
    # returns: value corresponding to openssl's ASN1_OBJECT structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OBJ_nid2obj.html>

=item * OBJ_obj2nid

Returns NID corresponding to given ASN1_OBJECT $o.

    my $rv = Net::SSLeay::OBJ_obj2nid($o);
    # $o - value corresponding to openssl's ASN1_OBJECT structure
    #
    # returns: (integer) NID

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OBJ_nid2obj.html>

=item * OBJ_txt2obj

Converts the text string s into an ASN1_OBJECT structure. If $no_name is 0 then
long names (e.g. 'commonName') and short names (e.g. 'CN') will be interpreted
as well as numerical forms (e.g. '2.5.4.3'). If $no_name is 1 only the numerical
form is acceptable.

    my $rv = Net::SSLeay::OBJ_txt2obj($s, $no_name);
    # $s - text string to be converted
    # $no_name - (integer) 0 or 1
    #
    # returns: value corresponding to openssl's ASN1_OBJECT structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OBJ_nid2obj.html>

=item * OBJ_obj2txt

Converts the ASN1_OBJECT a into a textual representation.

    Net::SSLeay::OBJ_obj2txt($a, $no_name);
    # $a - value corresponding to openssl's ASN1_OBJECT structure
    # $no_name - (integer) 0 or 1
    #
    # returns: textual representation e.g. 'commonName' ($no_name=0), '2.5.4.3' ($no_name=1)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OBJ_nid2obj.html>

=item * OBJ_txt2nid

Returns NID corresponding to text string $s which can be a long name, a short name or the numerical representation of an object.

    my $rv = Net::SSLeay::OBJ_txt2nid($s);
    # $s - (string) e.g. 'commonName' or 'CN' or '2.5.4.3'
    #
    # returns: (integer) NID

Example:

    my $nid = Net::SSLeay::OBJ_txt2nid('2.5.4.3');
    Net::SSLeay::OBJ_nid2sn($n);

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OBJ_nid2obj.html>

=back

=head3 Low level API: ASN1_INTEGER_* related functions

=over

=item * ASN1_INTEGER_new

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Creates a new ASN1_INTEGER structure.

    my $rv = Net::SSLeay::ASN1_INTEGER_new();
    #
    # returns: value corresponding to openssl's ASN1_INTEGER structure (0 on failure)
