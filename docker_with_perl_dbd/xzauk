	0x10A59,
	0x1D200,
	0x1D246,
	0x1D6A4,
	0x1D6A6
};

static const UV UNI_AGE__5_invlist[] = {  /* for all charsets */
	71,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x242,
	0x250,
	0x37B,
	0x37E,
	0x4CF,
	0x4D0,
	0x4FA,
	0x500,
	0x510,
	0x514,
	0x5BA,
	0x5BB,
	0x7C0,
	0x7FB,
	0x97B,
	0x97D,
	0x97E,
	0x980,
	0xCE2,
	0xCE4,
	0xCF1,
	0xCF3,
	0x1B00,
	0x1B4C,
	0x1B50,
	0x1B7D,
	0x1DC4,
	0x1DCB,
	0x1DFE,
	0x1E00,
	0x20EC,
	0x20F0,
	0x214D,
	0x214F,
	0x2184,
	0x2185,
	0x23DC,
	0x23E8,
	0x26B2,
	0x26B3,
	0x27C7,
	0x27CB,
	0x2B14,
	0x2B1B,
	0x2B20,
	0x2B24,
	0x2C60,
	0x2C6D,
	0x2C74,
	0x2C78,
	0xA717,
	0xA71B,
	0xA720,
	0xA722,
	0xA840,
	0xA878,
	0x10900,
	0x1091A,
	0x1091F,
	0x10920,
	0x12000,
	0x1236F,
	0x12400,
	0x12463,
	0x12470,
	0x12474,
	0x1D360,
	0x1D372,
	0x1D7CA,
	0x1D7CC
};

static const UV UNI_AGE__5_DOT_1_invlist[] = {  /* for all charsets */
	179,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x370,
	0x374,
	0x376,
	0x378,
	0x3CF,
	0x3D0,
	0x487,
	0x488,
	0x514,
	0x524,
	0x606,
	0x60B,
	0x616,
	0x61B,
	0x63B,
	0x640,
	0x76E,
	0x780,
	0x971,
	0x973,
	0xA51,
	0xA52,
	0xA75,
	0xA76,
	0xB44,
	0xB45,
	0xB62,
	0xB64,
	0xBD0,
	0xBD1,
	0xC3D,
	0xC3E,
	0xC58,
	0xC5A,
	0xC62,
	0xC64,
	0xC78,
	0xC80,
	0xD3D,
	0xD3E,
	0xD44,
	0xD45,
	0xD62,
	0xD64,
	0xD70,
	0xD76,
	0xD79,
	0xD80,
	0xF6B,
	0xF6D,
	0xFCE,
	0xFCF,
	0xFD2,
	0xFD5,
	0x1022,
	0x1023,
	0x1028,
	0x1029,
	0x102B,
	0x102C,
	0x1033,
	0x1036,
	0x103A,
	0x1040,
	0x105A,
	0x109A,
	0x109E,
	0x10A0,
	0x18AA,
	0x18AB,
	0x1B80,
	0x1BAB,
	0x1BAE,
	0x1BBA,
	0x1C00,
	0x1C38,
	0x1C3B,
	0x1C4A,
	0x1C4D,
	0x1C80,
	0x1DCB,
	0x1DE7,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x2064,
	0x2065,
	0x20F0,
	0x20F1,
	0x214F,
	0x2150,
	0x2185,
	0x2189,
	0x269D,
	0x269E,
	0x26B3,
	0x26BD,
	0x26C0,
	0x26C4,
	0x27CC,
	0x27CD,
	0x27EC,
	0x27F0,
	0x2B1B,
	0x2B20,
	0x2B24,
	0x2B4D,
	0x2B50,
	0x2B55,
	0x2C6D,
	0x2C70,
	0x2C71,
	0x2C74,
	0x2C78,
	0x2C7E,
	0x2DE0,
	0x2E00,
	0x2E18,
	0x2E1C,
	0x2E1E,
	0x2E31,
	0x312D,
	0x312E,
	0x31D0,
	0x31E4,
	0x9FBC,
	0x9FC4,
	0xA500,
	0xA62C,
	0xA640,
	0xA660,
	0xA662,
	0xA674,
	0xA67C,
	0xA698,
	0xA71B,
	0xA720,
	0xA722,
	0xA78D,
	0xA7FB,
	0xA800,
	0xA880,
	0xA8C5,
	0xA8CE,
	0xA8DA,
	0xA900,
	0xA954,
	0xA95F,
	0xA960,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAA60,
	0xFE24,
	0xFE27,
	0x10190,
	0x1019C,
	0x101D0,
	0x101FE,
	0x10280,
	0x1029D,
	0x102A0,
	0x102D1,
	0x10920,
	0x1093A,
	0x1093F,
	0x10940,
	0x1D129,
	0x1D12A,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094
};

static const UV UNI_AGE__5_DOT_2_invlist[] = {  /* for all charsets */
	181,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x524,
	0x526,
	0x800,
	0x82E,
	0x830,
	0x83F,
	0x900,
	0x901,
	0x94E,
	0x94F,
	0x955,
	0x956,
	0x979,
	0x97B,
	0x9FB,
	0x9FC,
	0xFD5,
	0xFD9,
	0x109A,
	0x109E,
	0x115A,
	0x115F,
	0x11A3,
	0x11A8,
	0x11FA,
	0x1200,
	0x1400,
	0x1401,
	0x1677,
	0x1680,
	0x18B0,
	0x18F6,
	0x19AA,
	0x19AC,
	0x19DA,
	0x19DB,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1AA0,
	0x1AAE,
	0x1CD0,
	0x1CF3,
	0x1DFD,
	0x1DFE,
	0x20B6,
	0x20B9,
	0x2150,
	0x2153,
	0x2189,
	0x218A,
	0x23E8,
	0x23E9,
	0x269E,
	0x26A0,
	0x26BD,
	0x26C0,
	0x26C4,
	0x26CE,
	0x26CF,
	0x26E2,
	0x26E3,
	0x26E4,
	0x26E8,
	0x2700,
	0x2757,
	0x2758,
	0x2B55,
	0x2B5A,
	0x2C70,
	0x2C71,
	0x2C7E,
	0x2C80,
	0x2CEB,
	0x2CF2,
	0x2E31,
	0x2E32,
	0x3244,
	0x3250,
	0x9FC4,
	0x9FCC,
	0xA4D0,
	0xA500,
	0xA6A0,
	0xA6F8,
	0xA830,
	0xA83A,
	0xA8E0,
	0xA8FC,
	0xA960,
	0xA97D,
	0xA980,
	0xA9CE,
	0xA9CF,
	0xA9DA,
	0xA9DE,
	0xA9E0,
	0xAA60,
	0xAA7C,
	0xAA80,
	0xAAC3,
	0xAADB,
	0xAAE0,
	0xABC0,
	0xABEE,
	0xABF0,
	0xABFA,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFA6B,
	0xFA6E,
	0x10840,
	0x10856,
	0x10857,
	0x10860,
	0x1091A,
	0x1091C,
	0x10A60,
	0x10A80,
	0x10B00,
	0x10B36,
	0x10B39,
	0x10B56,
	0x10B58,
	0x10B73,
	0x10B78,
	0x10B80,
	0x10C00,
	0x10C49,
	0x10E60,
	0x10E7F,
	0x11080,
	0x110C2,
	0x13000,
	0x1342F,
	0x1F100,
	0x1F10B,
	0x1F110,
	0x1F12F,
	0x1F131,
	0x1F132,
	0x1F13D,
	0x1F13E,
	0x1F13F,
	0x1F140,
	0x1F142,
	0x1F143,
	0x1F146,
	0x1F147,
	0x1F14A,
	0x1F14F,
	0x1F157,
	0x1F158,
	0x1F15F,
	0x1F160,
	0x1F179,
	0x1F17A,
	0x1F17B,
	0x1F17D,
	0x1F17F,
	0x1F180,
	0x1F18A,
	0x1F18E,
	0x1F190,
	0x1F191,
	0x1F200,
	0x1F201,
	0x1F210,
	0x1F232,
	0x1F240,
	0x1F249,
	0x2A700,
	0x2B735
};

static const UV UNI_AGE__6_invlist[] = {  /* for all charsets */
	213,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x526,
	0x528,
	0x620,
	0x621,
	0x65F,
	0x660,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x93A,
	0x93C,
	0x94F,
	0x950,
	0x956,
	0x958,
	0x973,
	0x978,
	0xB72,
	0xB78,
	0xD29,
	0xD2A,
	0xD3A,
	0xD3B,
	0xD4E,
	0xD4F,
	0xF8C,
	0xF90,
	0xFD9,
	0xFDB,
	0x135D,
	0x135F,
	0x1BC0,
	0x1BF4,
	0x1BFC,
	0x1C00,
	0x1DFC,
	0x1DFD,
	0x2095,
	0x209D,
	0x20B9,
	0x20BA,
	0x23E9,
	0x23F4,
	0x26CE,
	0x26CF,
	0x26E2,
	0x26E3,
	0x26E4,
	0x26E8,
	0x2705,
	0x2706,
	0x270A,
	0x270C,
	0x2728,
	0x2729,
	0x274C,
	0x274D,
	0x274E,
	0x274F,
	0x2753,
	0x2756,
	0x275F,
	0x2761,
	0x2795,
	0x2798,
	0x27B0,
	0x27B1,
	0x27BF,
	0x27C0,
	0x27CE,
	0x27D0,
	0x2D70,
	0x2D71,
	0x2D7F,
	0x2D80,
	0x31B8,
	0x31BB,
	0xA660,
	0xA662,
	0xA78D,
	0xA78F,
	0xA790,
	0xA792,
	0xA7A0,
	0xA7AA,
	0xA7FA,
	0xA7FB,
	0xAB01,
	0xAB07,
	0xAB09,
	0xAB0F,
	0xAB11,
	0xAB17,
	0xAB20,
	0xAB27,
	0xAB28,
	0xAB2F,
	0xFBB2,
	0xFBC2,
	0x11000,
	0x1104E,
	0x11052,
	0x11070,
	0x16800,
	0x16A39,
	0x1B000,
	0x1B002,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0BF,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0E0,
	0x1F130,
	0x1F131,
	0x1F132,
	0x1F13D,
	0x1F13E,
	0x1F13F,
	0x1F140,
	0x1F142,
	0x1F143,
	0x1F146,
	0x1F147,
	0x1F14A,
	0x1F14F,
	0x1F157,
	0x1F158,
	0x1F15F,
	0x1F160,
	0x1F16A,
	0x1F170,
	0x1F179,
	0x1F17A,
	0x1F17B,
	0x1F17D,
	0x1F17F,
	0x1F180,
	0x1F18A,
	0x1F18E,
	0x1F190,
	0x1F191,
	0x1F19B,
	0x1F1E6,
	0x1F200,
	0x1F201,
	0x1F203,
	0x1F232,
	0x1F23B,
	0x1F250,
	0x1F252,
	0x1F300,
	0x1F321,
	0x1F330,
	0x1F336,
	0x1F337,
	0x1F37D,
	0x1F380,
	0x1F394,
	0x1F3A0,
	0x1F3C5,
	0x1F3C6,
	0x1F3CB,
	0x1F3E0,
	0x1F3F1,
	0x1F400,
	0x1F43F,
	0x1F440,
	0x1F441,
	0x1F442,
	0x1F4F8,
	0x1F4F9,
	0x1F4FD,
	0x1F500,
	0x1F53E,
	0x1F550,
	0x1F568,
	0x1F5FB,
	0x1F600,
	0x1F601,
	0x1F611,
	0x1F612,
	0x1F615,
	0x1F616,
	0x1F617,
	0x1F618,
	0x1F619,
	0x1F61A,
	0x1F61B,
	0x1F61C,
	0x1F61F,
	0x1F620,
	0x1F626,
	0x1F628,
	0x1F62C,
	0x1F62D,
	0x1F62E,
	0x1F630,
	0x1F634,
	0x1F635,
	0x1F641,
	0x1F645,
	0x1F650,
	0x1F680,
	0x1F6C6,
	0x1F700,
	0x1F774,
	0x2B740,
	0x2B81E
};

static const UV UNI_AGE__6_DOT_1_invlist[] = {  /* for all charsets */
	179,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x58F,
	0x590,
	0x604,
	0x605,
	0x8A0,
	0x8A1,
	0x8A2,
	0x8AD,
	0x8E4,
	0x8FF,
	0xAF0,
	0xAF1,
	0xEDE,
	0xEE0,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10FD,
	0x1100,
	0x1BAB,
	0x1BAE,
	0x1BBA,
	0x1BC0,
	0x1CC0,
	0x1CC8,
	0x1CF3,
	0x1CF7,
	0x27CB,
	0x27CC,
	0x27CD,
	0x27CE,
	0x2CF2,
	0x2CF4,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0x2D66,
	0x2D68,
	0x2E32,
	0x2E3C,
	0x9FCC,
	0x9FCD,
	0xA674,
	0xA67C,
	0xA69F,
	0xA6A0,
	0xA792,
	0xA794,
	0xA7AA,
	0xA7AB,
	0xA7F8,
	0xA7FA,
	0xAAE0,
	0xAAF7,
	0xFA2E,
	0xFA30,
	0x10980,
	0x109B8,
	0x109BE,
	0x109C0,
	0x110D0,
	0x110E9,
	0x110F0,
	0x110FA,
	0x11100,
	0x11135,
	0x11136,
	0x11144,
	0x11180,
	0x111C9,
	0x111D0,
	0x111DA,
	0x11680,
	0x116B8,
	0x116C0,
	0x116CA,
	0x16F00,
	0x16F45,
	0x16F50,
	0x16F7F,
	0x16F8F,
	0x16FA0,
	0x1EE00,
	0x1EE04,
	0x1EE05,
	0x1EE20,
	0x1EE21,
	0x1EE23,
	0x1EE24,
	0x1EE25,
	0x1EE27,
	0x1EE28,
	0x1EE29,
	0x1EE33,
	0x1EE34,
	0x1EE38,
	0x1EE39,
	0x1EE3A,
	0x1EE3B,
	0x1EE3C,
	0x1EE42,
	0x1EE43,
	0x1EE47,
	0x1EE48,
	0x1EE49,
	0x1EE4A,
	0x1EE4B,
	0x1EE4C,
	0x1EE4D,
	0x1EE50,
	0x1EE51,
	0x1EE53,
	0x1EE54,
	0x1EE55,
	0x1EE57,
	0x1EE58,
	0x1EE59,
	0x1EE5A,
	0x1EE5B,
	0x1EE5C,
	0x1EE5D,
	0x1EE5E,
	0x1EE5F,
	0x1EE60,
	0x1EE61,
	0x1EE63,
	0x1EE64,
	0x1EE65,
	0x1EE67,
	0x1EE6B,
	0x1EE6C,
	0x1EE73,
	0x1EE74,
	0x1EE78,
	0x1EE79,
	0x1EE7D,
	0x1EE7E,
	0x1EE7F,
	0x1EE80,
	0x1EE8A,
	0x1EE8B,
	0x1EE9C,
	0x1EEA1,
	0x1EEA4,
	0x1EEA5,
	0x1EEAA,
	0x1EEAB,
	0x1EEBC,
	0x1EEF0,
	0x1EEF2,
	0x1F16A,
	0x1F16C,
	0x1F540,
	0x1F544,
	0x1F600,
	0x1F601,
	0x1F611,
	0x1F612,
	0x1F615,
	0x1F616,
	0x1F617,
	0x1F618,
	0x1F619,
	0x1F61A,
	0x1F61B,
	0x1F61C,
	0x1F61F,
	0x1F620,
	0x1F626,
	0x1F628,
	0x1F62C,
	0x1F62D,
	0x1F62E,
	0x1F630,
	0x1F634,
	0x1F635
};

static const UV UNI_AGE__6_DOT_2_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20BA,
	0x20BB
};

static const UV UNI_AGE__6_DOT_3_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x61C,
	0x61D,
	0x2066,
	0x206A
};

static const UV UNI_AGE__7_invlist[] = {  /* for all charsets */
	283,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x37F,
	0x380,
	0x528,
	0x530,
	0x58D,
	0x58F,
	0x605,
	0x606,
	0x8A1,
	0x8A2,
	0x8AD,
	0x8B3,
	0x8FF,
	0x900,
	0x978,
	0x979,
	0x980,
	0x981,
	0xC00,
	0xC01,
	0xC34,
	0xC35,
	0xC81,
	0xC82,
	0xD01,
	0xD02,
	0xDE6,
	0xDF0,
	0x16F1,
	0x16F9,
	0x191D,
	0x191F,
	0x1AB0,
	0x1ABF,
	0x1CF8,
	0x1CFA,
	0x1DE7,
	0x1DF6,
	0x20BB,
	0x20BE,
	0x23F4,
	0x23FB,
	0x2700,
	0x2701,
	0x2B4D,
	0x2B50,
	0x2B5A,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B98,
	0x2BBA,
	0x2BBD,
	0x2BC9,
	0x2BCA,
	0x2BD2,
	0x2E3C,
	0x2E43,
	0xA698,
	0xA69E,
	0xA794,
	0xA7A0,
	0xA7AB,
	0xA7AE,
	0xA7B0,
	0xA7B2,
	0xA7F7,
	0xA7F8,
	0xA9E0,
	0xA9FF,
	0xAA7C,
	0xAA80,
	0xAB30,
	0xAB60,
	0xAB64,
	0xAB66,
	0xFE27,
	0xFE2E,
	0x1018B,
	0x1018D,
	0x101A0,
	0x101A1,
	0x102E0,
	0x102FC,
	0x1031F,
	0x10320,
	0x10350,
	0x1037B,
	0x10500,
	0x10528,
	0x10530,
	0x10564,
	0x1056F,
	0x10570,
	0x10600,
	0x10737,
	0x10740,
	0x10756,
	0x10760,
	0x10768,
	0x10860,
	0x1089F,
	0x108A7,
	0x108B0,
	0x10A80,
	0x10AA0,
	0x10AC0,
