                    my $type = $all[$index];
                    my $rest = $all[$index+1];
                    traverse($fh, $type, $rest, $language, $spacepreserve);
                    $index += 2;
                }
		print $fh "</$nodename>";
	    } else {
		print $fh "/>";
	    }
	}
    }
}

sub intltool_tree_comment
{
    my $expat = shift;
    my $data  = shift;
    my $clist = $expat->{Curlist};
    my $pos   = $#$clist;

    push @$clist, 1 => $data;
}

sub intltool_tree_cdatastart
{
    my $expat    = shift;
    my $clist = $expat->{Curlist};
    my $pos   = $#$clist;

    push @$clist, 0 => $expat->original_string();
}

sub intltool_tree_cdataend
{
    my $expat    = shift;
    my $clist = $expat->{Curlist};
    my $pos   = $#$clist;

    $clist->[$pos] .= $expat->original_string();
}

sub intltool_tree_char
{
    my $expat = shift;
    my $text  = shift;
    my $clist = $expat->{Curlist};
    my $pos   = $#$clist;

    # Use original_string so that we retain escaped entities
    # in CDATA sections.
    #
    if ($pos > 0 and $clist->[$pos - 1] eq '0') {
        $clist->[$pos] .= $expat->original_string();
    } else {
        push @$clist, 0 => $expat->original_string();
    }
}

sub intltool_tree_start
{
    my $expat    = shift;
    my $tag      = shift;
    my @origlist = ();

    # Use original_string so that we retain escaped entities
    # in attribute values.  We must convert the string to an
    # @origlist array to conform to the structure of the Tree
    # Style.
    #
    my @original_array = split /\x/, $expat->original_string();
    my $source         = $expat->original_string();

    # Remove leading tag.
    #
    $source =~ s|^\s*<\s*(\S+)||s;

    # Grab attribute key/value pairs and push onto @origlist array.
    #
    while ($source)
    {
       if ($source =~ /^\s*([\w:-]+)\s*[=]\s*["]/)
       {
           $source =~ s|^\s*([\w:-]+)\s*[=]\s*["]([^"]*)["]||s;
           push @origlist, $1;
           push @origlist, '"' . $2 . '"';
       }
       elsif ($source =~ /^\s*([\w:-]+)\s*[=]\s*[']/)
       {
           $source =~ s|^\s*([\w:-]+)\s*[=]\s*[']([^']*)[']||s;
           push @origlist, $1;
           push @origlist, "'" . $2 . "'";
       }
       else
       {
           last;
       }
    }

    my $ol = [ { @origlist } ];

    push @{ $expat->{Lists} }, $expat->{Curlist};
    push @{ $expat->{Curlist} }, $tag => $ol;
    $expat->{Curlist} = $ol;
}

sub readXml
{
    my $filename = shift || return;
    if(!-f $filename) {
        die "ERROR Cannot find filename: $filename\n";
    }

    my $ret = eval 'require XML::Parser';
    if(!$ret) {
        die "You must have XML::Parser installed to run $0\n\n";
    } 
    my $xp = new XML::Parser(Style => 'Tree');
    $xp->setHandlers(Char => \&intltool_tree_char);
    $xp->setHandlers(Start => \&intltool_tree_start);
    $xp->setHandlers(CdataStart => \&intltool_tree_cdatastart);
    $xp->setHandlers(CdataEnd => \&intltool_tree_cdataend);
    my $tree = $xp->parsefile($filename);

# <foo><head id="a">Hello <em>there</em></head><bar>Howdy<ref/></bar>do</foo>
# would be:
# [foo, [{}, head, [{id => "a"}, 0, "Hello ",  em, [{}, 0, "there"]], bar, [{},
# 0, "Howdy",  ref, [{}]], 0, "do" ] ]

    return $tree;
}

sub print_header
{
    my $infile = shift;
    my $fh = shift;
    my $source;

    if(!-f $infile) {
        die "ERROR Cannot find filename: $infile\n";
    }

    print $fh qq{<?xml version="1.0" encoding="UTF-8"?>\n};
    {
        local $/;
        open DOCINPUT, "<${FILE}" or die;
        $source = <DOCINPUT>;
        close DOCINPUT;
    }
    if ($source =~ /(<!DOCTYPE.*\[.*\]\s*>)/s)
    {
        print $fh "$1\n";
    }
    elsif ($source =~ /(<!DOCTYPE[^>]*>)/s)
    {
        print $fh "$1\n";
    }
}

sub parseTree
{
    my $fh        = shift;
    my $ref       = shift;
    my $language  = shift || "";

    my $name = shift @{ $ref };
    my $cont = shift @{ $ref };
    
    while (!$name || "$name" eq "1") {
        $name = shift @{ $ref };
        $cont = shift @{ $ref };
    }

    my $spacepreserve = 0;
    my $attrs = @{$cont}[0];
    $spacepreserve = 1 if ((exists $attrs->{"xml:space"}) && ($attrs->{"xml:space"} =~ /^["']?preserve["']?$/));

    traverse($fh, $name, $cont, $language, $spacepreserve);
}

sub xml_merge_output
{
    my $source;

    if ($MULTIPLE_OUTPUT) {
        for my $lang (sort keys %po_files_by_lang) {
	    if ( ! -e $lang ) {
	        mkdir $lang or die "Cannot create subdirectory $lang: $!\n";
            }
            open OUTPUT, ">$lang/$OUTFILE" or die "Cannot open $lang/$OUTFILE: $!\n";
            binmode (OUTPUT) if $^O eq 'MSWin32';
            my $tree = readXml($FILE);
            print_header($FILE, \*OUTPUT);
            parseTree(\*OUTPUT, $tree, $lang);
            close OUTPUT;
            print "CREATED $lang/$OUTFILE\n" unless $QUIET_ARG;
        }
    } 
    open OUTPUT, ">$OUTFILE" or die "Cannot open $OUTFILE: $!\n";
    binmode (OUTPUT) if $^O eq 'MSWin32';
    my $tree = readXml($FILE);
    print_header($FILE, \*OUTPUT);
    parseTree(\*OUTPUT, $tree);
    close OUTPUT;
    print "CREATED $OUTFILE\n" unless $QUIET_ARG;
}

sub keys_merge_translations
{
    open INPUT, "<${FILE}" or die;
    open OUTPUT, ">${OUTFILE}" or die;
    binmode (OUTPUT) if $^O eq 'MSWin32';

    while (<INPUT>) 
    {
        if (s/^(\s*)_(\w+=(.*))/$1$2/)  
        {
	    my $string = $3;

            print OUTPUT;

	    my $non_translated_line = $_;

            for my $lang (sort keys %po_files_by_lang) 
            {
		my $translation = $translations{$lang, $string};
                next if !$translation;

                $_ = $non_translated_line;
		s/(\w+)=.*/[$lang]$1=$translation/;
                print OUTPUT;
            }
	} 
        else 
        {
            print OUTPUT;
        }
    }

    close OUTPUT;
    close INPUT;
}

sub desktop_merge_translations
{
    open INPUT, "<${FILE}" or die;
    open OUTPUT, ">${OUTFILE}" or die;
    binmode (OUTPUT) if $^O eq 'MSWin32';

    while (<INPUT>) 
    {
        if (s/^(\s*)_(\w+=(.*))/$1$2/)  
        {
	    my $string = $3;

            print OUTPUT;

	    my $non_translated_line = $_;

            for my $lang (sort keys %po_files_by_lang) 
            {
                my $translation = $translations{$lang, $string};
                next if !$translation;

                $_ = $non_translated_line;
                s/(\w+)=.*/${1}[$lang]=$translation/;
                print OUTPUT;
            }
	} 
        else 
        {
            print OUTPUT;
        }
    }

    close OUTPUT;
    close INPUT;
}

sub schemas_merge_translations
{
    my $source;

    {
       local $/; # slurp mode
       open INPUT, "<$FILE" or die "can't open $FILE: $!";
       $source = <INPUT>;
       close INPUT;
    }

    open OUTPUT, ">$OUTFILE" or die;
    binmode (OUTPUT) if $^O eq 'MSWin32';

    # FIXME: support attribute translations

    # Empty nodes never need translation, so unmark all of them.
    # For example, <_foo/> is just replaced by <foo/>.
    $source =~ s|<\s*_($w+)\s*/>|<$1/>|g;

    while ($source =~ s/
                        (.*?)
                        (\s+)(<locale\ name="C">(\s*)
                            (<default>\s*(?:<!--[^>]*?-->\s*)?(.*?)\s*<\/default>)?(\s*)
                            (<short>\s*(?:<!--[^>]*?-->\s*)?(.*?)\s*<\/short>)?(\s*)
                            (<long>\s*(?:<!--[^>]*?-->\s*)?(.*?)\s*<\/long>)?(\s*)
                        <\/locale>)
                       //sx) 
    {
        print OUTPUT $1;

	my $locale_start_spaces = $2 ? $2 : '';
	my $default_spaces = $4 ? $4 : '';
	my $short_spaces = $7 ? $7 : '';
	my $long_spaces = $10 ? $10 : '';
	my $locale_end_spaces = $13 ? $13 : '';
	my $c_default_block = $3 ? $3 : '';
	my $default_string = $6 ? $6 : '';
	my $short_string = $9 ? $9 : '';
	my $long_string = $12 ? $12 : '';

	print OUTPUT "$locale_start_spaces$c_default_block";

        $default_string =~ s/\s+/ /g;
        $default_string = entity_decode($default_string);
	$short_string =~ s/\s+/ /g;
	$short_string = entity_decode($short_string);
	$long_string =~ s/\s+/ /g;
	$long_string = entity_decode($long_string);

	for my $lang (sort keys %po_files_by_lang) 
        {
	    my $default_translation = $translations{$lang, $default_string};
	    my $short_translation = $translations{$lang, $short_string};
	    my $long_translation  = $translations{$lang, $long_string};

	    next if (!$default_translation && !$short_translation && 
                     !$long_translation);

	    print OUTPUT "\n$locale_start_spaces<locale name=\"$lang\">";

        print OUTPUT "$default_spaces";    

        if ($default_translation)
        {
            $default_translation = entity_encode($default_translation);
            print OUTPUT "<default>$default_translation</default>";
        }

	    print OUTPUT "$short_spaces";

	    if ($short_translation)
	    {
			$short_translation = entity_encode($short_translation);
			print OUTPUT "<short>$short_translation</short>";
	    }

	    print OUTPUT "$long_spaces";

	    if ($long_translation)
	    {
			$long_translation = entity_encode($long_translation);
			print OUTPUT "<long>$long_translation</long>";
	    }	    

	    print OUTPUT "$locale_end_spaces</locale>";
        }
    }

    print OUTPUT $source;

    close OUTPUT;
}

sub rfc822deb_merge_translations
{
    my %encodings = ();
    for my $lang (keys %po_files_by_lang) {
        $encodings{$lang} = ($UTF8_ARG ? 'UTF-8' : get_po_encoding($po_files_by_lang{$lang}));
    }

    my $source;

    {
       local $/; # slurp mode
       open INPUT, "<$FILE" or die "can't open $FILE: $!";
       $source = <INPUT>;
       close INPUT;
    }

    open OUTPUT, ">${OUTFILE}" or die;
    binmode (OUTPUT) if $^O eq 'MSWin32';

    my $last = 0;
    while ($source =~ /\G(.*?)(^|\n)(_+)([^:\s]+)(:[ \t]*)(.*?)(?=\n[\S\n]|$)/sg)
    {
        $last = pos($source);
        my ($pre, $newline, $underscore, $tag, $space, $text) = ($1, $2, $3, $4, $5, $6);
        my $non_translated_line = $tag.$space;
        $underscore = length($underscore);
        #  Print untranslated fields
        my $untranslated_fields = $pre;
        $untranslated_fields =~ s/\n#.*//g;
        $untranslated_fields =~ s/^#.*(\n|$)//;
        print OUTPUT $untranslated_fields;
        #  Remove [] dummy strings
        my $stripped = $text;
        $stripped =~ s/\[\s[^\[\]]*\],/,/g
            if $underscore == 2;
        $stripped =~ s/\[\s[^\[\]]*\]$//;
        $non_translated_line .= $stripped;

        print OUTPUT $newline.$non_translated_line;
    
        if ($underscore) 
        {
            my @str_list = rfc822deb_split($underscore, $text);
            my $partial = 0;

            #  Process pseudo-comments
            my @tfields = ();
            if ($pre =~ m/^#flag:/m)
            {
                my @c = split (/\n#flag:/, $pre);
                #  The first field is null
                shift (@c);
                for (@c)
                {
                    if (s/^comment(!?):(\S+)(?=\n|$)//s)
                    {
                        # This command is ignored by intltool-merge
                    }
                    elsif (s/^translate(!?):(\S+)(?=\n|$)//s)
                    {
                        rfc822deb_parse_spec($2, $1, 1+$#str_list, 0, 1, \@tfields);
                    }
                    elsif (s/^partial(?=\n|$)//s)
                    {
                        $partial = 1;
                    }
                    else
                    {
                        die "Unknown directive: $_\n\nAborting!\n";
                    }
                }
            }
            #  By default, print all msgids
            rfc822deb_parse_spec('*', '', 1+$#str_list, 0, 1, \@tfields)
                if $#tfields == -1;

            for my $lang (sort keys %po_files_by_lang) 
            {
                my $is_translated = 1;
                my $str_translated = '';
                my $cnt = 0;
            
                for my $str (@str_list) 
                {
                    $cnt++;
                    my $translation;
                    if ($tfields[$cnt] && $str ne '')
                    {
                        $translation = $translations{$lang, $str};
                        if (!$translation) 
                        {
                            if ($partial)
                            {
                                $translation = $str;
                            }
                            else
                            {
                                $is_translated = 0;
                                last;
                            }
                        }
                    }
                    else
                    {
                        $translation = $str;
                    }

                    #  $translation may also contain [] dummy
                    #  strings, mostly to indicate an empty string
                    $translation =~ s/\[\s[^\[\]]*\]$//;

                    #  Escape commas
                    $translation =~ s/,/\\,/g
                        if $underscore == 2;
                    
                    if ($cnt == 1) 
                    {
                        print STDERR "WARNING: $lang: spurious newline removed\n"
                            if $translation =~ s/\n/ /g;
                        $str_translated .= $translation;
                    } 
                    else 
                    {
                        if ($underscore == 2)
                        {
                            $str_translated .= ', ' . $translation;
                        }
                        else
                        {
                            $translation =~ s/\n/\n /g;
                            $str_translated .= "\n ." unless $cnt == 2;
                            $str_translated .= "\n " . $translation unless $str eq '';
                        }
                    }
                }
                next unless $is_translated;

                $str_translated =~ s/\s+$//;
                $str_translated = ' '.$str_translated if length ($str_translated) && $str_translated !~ /^\n/s;

                $_ = $non_translated_line;
                s/^(\w+):\s*.*/$newline${1}-$lang.$encodings{$lang}:$str_translated/s;
                print OUTPUT;
            }
        }
    }
    my $tail = substr($source, $last);
    $tail .= "\n" unless $tail =~ m/\n$/s;
    $tail =~ s/^#.*\n//mg;

    print OUTPUT $tail;

    close OUTPUT;
    close INPUT;
}

sub rfc822deb_parse_spec {
    my $spec = shift;
    my $negate = shift;
    my $len = shift;
    my $notfound = shift;
    my $found = shift;
    my $ref = shift;
    $spec = ','.$spec.',';
    #  Replace '*' by all values
    my $all = '1-'.$len;
    $spec =~ s/\*/$all/g;
    #  Expand ranges
    $spec =~ s/(\d+)-(\d+)/join(",", ($1..$2))/eg;
    if ($#{$ref} == -1)
    {
        for my $cnt (1..$len)
        {
            $ref->[$cnt] = $notfound;
        }
    }
    for my $cnt (1..$len)
    {
        if ($spec =~ m/,$cnt,/ && !$negate) {
            $ref->[$cnt] .= $found;
        } elsif ($spec !~ m/,$cnt,/ && $negate) {
            $ref->[$cnt] .= $found;
        }
    }
}

sub rfc822deb_split 
{
    # Debian defines a special way to deal with rfc822-style files:
    # when a value contain newlines, it consists of
    #   1.  a short form (first line)
    #   2.  a long description, all lines begin with a space,
    #       and paragraphs are separated by a single dot on a line
    # This routine returns an array of all paragraphs, and reformat
    # them.
    # When first argument is 2, the string is a comma separated list of
    # values.
    my $type = shift;
    my $text = shift;
    $text =~ s/^[ \t]//mg;
    if ($type ne 1)
    {
        my @values = ();
        for my $value (split(/(?<!\\), */, $text, 0))
        {
            $value =~ s/\\,/,/g;
            push @values, $value;
        }
        return @values;
    }
    return ($text) if $text !~ /\n/;

    $text =~ s/([^\n]*)\n//;
    my @list = ($1);
    my $str = '';

    for my $line (split (/\n/, $text)) 
    {
        chomp $line;
        if ($line =~ /^\.\s*$/)
        {
            #  New paragraph
            $str =~ s/\s*$//;
            push(@list, $str);
            $str = '';
        } 
        elsif ($line =~ /^\s/) 
        {
            #  Line which must not be reformatted
            $str .= "\n" if length ($str) && $str !~ /\n$/;
            $line =~ s/\s+$//;
            $str .= $line."\n";
        } 
        else 
        {
            #  Continuation line, remove newline
            $str .= " " if length ($str) && $str !~ /\n$/;
            $str .= $line;
        }
    }

    $str =~ s/\s*$//;
    push(@list, $str) if length ($str);

    return @list;
}

sub quoted_translation
{
    my ($lang, $string) = @_;

    $string =~ s/\\\"/\"/g;

    my $translation = $translations{$lang, $string};
    $translation = $string if !$translation;

    $translation =~ s/\"/\\\"/g;
    return $translation
}

sub quoted_merge_translations
{
    if (!$MULTIPLE_OUTPUT) {
        print "Quoted only supports Multiple Output.\n";
        exit(1);
    }

    for my $lang (sort keys %po_files_by_lang) {
        if ( ! -e $lang ) {
            mkdir $lang or die "Cannot create subdirectory $lang: $!\n";
        }
        open INPUT, "<${FILE}" or die;
        open OUTPUT, ">$lang/$OUTFILE" or die "Cannot open $lang/$OUTFILE: $!\n";
        binmode (OUTPUT) if $^O eq 'MSWin32';
        while (<INPUT>) 
        {
            s/\"(([^\"]|\\\")*[^\\\"])\"/"\"" . &quoted_translation($lang, $1) . "\""/ge;
            print OUTPUT;
        }
        close OUTPUT;
        close INPUT;
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              usr/share/intltool-debian/intltool-update                                                           0000755 0000000 0000000 00000067611 14323231135 017325  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl -w
# -*- Mode: perl; indent-tabs-mode: nil; c-basic-offset: 4  -*-

#
#  The Intltool Message Updater
#
#  Copyright (C) 2000-2003 Free Software Foundation.
#
#  Intltool is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License 
#  version 2 published by the Free Software Foundation.
#
#  Intltool is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#  As a special exception to the GNU General Public License, if you
#  distribute this file as part of a program that contains a
#  configuration script generated by Autoconf, you may include it under
#  the same distribution terms that you use for the rest of that program.
#
#  Authors: Kenneth Christiansen <kenneth@gnu.org>
#           Maciej Stachowiak
#           Darin Adler <darin@bentspoon.com>

## Release information
my $PROGRAM = "intltool-update";
my $VERSION = "0.35.0";
my $PACKAGE = "intltool";

## Loaded modules
use strict;
use Getopt::Long;
use Cwd;
use File::Copy;
use File::Find;

## Scalars used by the option stuff
my $HELP_ARG 	   = 0;
my $VERSION_ARG    = 0;
my $DIST_ARG	   = 0;
my $POT_ARG	   = 0;
my $HEADERS_ARG    = 0;
my $MAINTAIN_ARG   = 0;
my $REPORT_ARG     = 0;
my $VERBOSE	   = 0;
my $GETTEXT_PACKAGE = "";
my $OUTPUT_FILE    = "";

my @languages;
my %varhash = ();
my %po_files_by_lang = ();

# Regular expressions to categorize file types.
# FIXME: Please check if the following is correct

my $xml_support =
"xml(?:\\.in)*|".	# http://www.w3.org/XML/ (Note: .in is not required)
"ui|".			# Bonobo specific - User Interface desc. files
"lang|".		# ?
"glade2?(?:\\.in)*|".	# Glade specific - User Interface desc. files (Note: .in is not required)
"scm(?:\\.in)*|".	# ? (Note: .in is not required)
"oaf(?:\\.in)+|".	# DEPRECATED: Replaces by Bonobo .server files 
"etspec|".		# ?
"server(?:\\.in)+|".	# Bonobo specific
"sheet(?:\\.in)+|".	# ?
"schemas(?:\\.in)+|".	# GConf specific
"pong(?:\\.in)+|".	# DEPRECATED: PONG is not used [by GNOME] any longer.
"kbd(?:\\.in)+";	# GOK specific. 

my $ini_support =
"icon(?:\\.in)+|".	# http://www.freedesktop.org/Standards/icon-theme-spec
"desktop(?:\\.in)+|".	# http://www.freedesktop.org/Standards/menu-spec
"caves(?:\\.in)+|".	# GNOME Games specific
"directory(?:\\.in)+|".	# http://www.freedesktop.org/Standards/menu-spec
"soundlist(?:\\.in)+|".	# GNOME specific
"keys(?:\\.in)+|".	# GNOME Mime database specific
"theme(?:\\.in)+|".	# http://www.freedesktop.org/Standards/icon-theme-spec
"service(?:\\.in)+";    # DBus specific

my $buildin_gettext_support = 
"c|y|cs|cc|cpp|c\\+\\+|h|hh|gob|py";

## Always flush buffer when printing
$| = 1;

## Sometimes the source tree will be rooted somewhere else.
my $SRCDIR = ".";
my $POTFILES_in;

$SRCDIR = $ENV{"srcdir"} if $ENV{"srcdir"};
$POTFILES_in = "<$SRCDIR/POTFILES.in";

my $devnull = ($^O eq 'MSWin32' ? 'NUL:' : '/dev/null');

## Handle options
GetOptions 
(
 "help" 	       => \$HELP_ARG,
 "version" 	       => \$VERSION_ARG,
 "dist|d"	       => \$DIST_ARG,
 "pot|p"	       => \$POT_ARG,
 "headers|s"	       => \$HEADERS_ARG,
 "maintain|m"	       => \$MAINTAIN_ARG,
 "report|r"	       => \$REPORT_ARG,
 "verbose|x"	       => \$VERBOSE,
 "gettext-package|g=s" => \$GETTEXT_PACKAGE,
 "output-file|o=s"     => \$OUTPUT_FILE,
 ) or &Console_WriteError_InvalidOption;

&Console_Write_IntltoolHelp if $HELP_ARG;
&Console_Write_IntltoolVersion if $VERSION_ARG;

my $arg_count = ($DIST_ARG > 0)
    + ($POT_ARG > 0)
    + ($HEADERS_ARG > 0)
    + ($MAINTAIN_ARG > 0)
    + ($REPORT_ARG > 0);

&Console_Write_IntltoolHelp if $arg_count > 1;

# --version and --help don't require a module name
my $MODULE = $GETTEXT_PACKAGE || &FindPackageName || "unknown";

if ($POT_ARG)
{
    &GenerateHeaders;
    &GeneratePOTemplate;
}
elsif ($HEADERS_ARG)
{
    &GenerateHeaders;
}
elsif ($MAINTAIN_ARG)
{
    &FindLeftoutFiles;
}
elsif ($REPORT_ARG)
{
    &GenerateHeaders;
    &GeneratePOTemplate;
    &Console_Write_CoverageReport;
}
elsif ((defined $ARGV[0]) && $ARGV[0] =~ /^[a-z]/)
{
    my $lang = $ARGV[0];

    ## Report error if the language file supplied
    ## to the command line is non-existent
    &Console_WriteError_NotExisting("$SRCDIR/$lang.po")
        if ! -s "$SRCDIR/$lang.po";

    if (!$DIST_ARG)
    {
	print "Working, please wait..." if $VERBOSE;
	&GenerateHeaders;
	&GeneratePOTemplate;
    }
    &POFile_Update ($lang, $OUTPUT_FILE);
    &Console_Write_TranslationStatus ($lang, $OUTPUT_FILE) if $VERBOSE;
} 
else 
{
    &Console_Write_IntltoolHelp;
}

exit;

#########

sub Console_Write_IntltoolVersion
{
    print <<_EOF_;
${PROGRAM} (${PACKAGE}) $VERSION
Written by Kenneth Christiansen, Maciej Stachowiak, and Darin Adler.

Copyright (C) 2000-2003 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
_EOF_
    exit;
}

sub Console_Write_IntltoolHelp
{
    print <<_EOF_;
Usage: ${PROGRAM} [OPTION]... LANGCODE
Updates PO template files and merge them with the translations.

Mode of operation (only one is allowed):
  -p, --pot                   generate the PO template only
  -s, --headers               generate the header files in POTFILES.in
  -m, --maintain              search for left out files from POTFILES.in
  -r, --report                display a status report for the module
  -d, --dist                  merge LANGCODE.po with existing PO template

Extra options:
  -g, --gettext-package=NAME  override PO template name, useful with --pot
  -o, --output-file=FILE      write merged translation to FILE
  -x, --verbose               display lots of feedback
      --help                  display this help and exit
      --version               output version information and exit

Examples of use:
${PROGRAM} --pot    just create a new PO template
${PROGRAM} xy       create new PO template and merge xy.po with it

Report bugs to http://bugzilla.gnome.org/ (product name "$PACKAGE")
or send email to <xml-i18n-tools\@gnome.org>.
_EOF_
    exit;
}

sub echo_n
{
    my $str = shift;
    my $ret = `echo "$str"`;

    $ret =~ s/\n$//; # do we need the "s" flag?

    return $ret;
}

sub POFile_DetermineType ($) 
{
   my $type = $_;
   my $gettext_type;

   my $xml_regex     = "(?:" . $xml_support . ")";
   my $ini_regex     = "(?:" . $ini_support . ")";
   my $buildin_regex = "(?:" . $buildin_gettext_support . ")";

   if ($type =~ /\[type: gettext\/([^\]].*)]/) 
   {
	$gettext_type=$1;
   }
   elsif ($type =~ /schemas(\.in)+$/) 
   {
	$gettext_type="schemas";
   }
   elsif ($type =~ /glade2?(\.in)*$/) 
   {
       $gettext_type="glade";
   }
   elsif ($type =~ /scm(\.in)*$/) 
   {
       $gettext_type="scheme";
   }
   elsif ($type =~ /keys(\.in)+$/) 
   {
       $gettext_type="keys";
   }

   # bucket types

   elsif ($type =~ /$xml_regex$/) 
   {
       $gettext_type="xml";
   }
   elsif ($type =~ /$ini_regex$/) 
   { 
       $gettext_type="ini";
   }
   elsif ($type =~ /$buildin_regex$/) 
   {
       $gettext_type="buildin";
   }
   else
   { 
       $gettext_type="unknown"; 
   }

   return "gettext\/$gettext_type";
}

sub TextFile_DetermineEncoding ($) 
{
    my $gettext_code="ASCII"; # All files are ASCII by default
    return $gettext_code;
}

sub isNotValidMissing
{
    my ($file) = @_;

    return if $file =~ /^\{arch\}\/.*$/;
    return if $file =~ /^$varhash{"PACKAGE"}-$varhash{"VERSION"}\/.*$/;
}

sub FindLeftoutFiles
{
    my (@buf_i18n_plain,
	@buf_i18n_xml,
	@buf_i18n_xml_unmarked,
	@buf_i18n_ini,
	@buf_potfiles,
	@buf_potfiles_ignore,
	@buf_allfiles,
	@buf_allfiles_sorted,
	@buf_potfiles_sorted
    );

    ## Search and find all translatable files
    find sub { 
	push @buf_i18n_plain,        "$File::Find::name" if /\.($buildin_gettext_support)$/;
	push @buf_i18n_xml,          "$File::Find::name" if /\.($xml_support)$/;
	push @buf_i18n_ini,          "$File::Find::name" if /\.($ini_support)$/;
	push @buf_i18n_xml_unmarked, "$File::Find::name" if /\.(schemas(\.in)+)$/;
	}, "..";


    open POTFILES, $POTFILES_in or die "$PROGRAM:  there's no POTFILES.in!\n";
    @buf_potfiles = grep !/^(#|\s*$)/, <POTFILES>;
    close POTFILES;

    foreach (@buf_potfiles) {
	s/^\[.*]\s*//;
    }

    print "Searching for missing translatable files...\n" if $VERBOSE;

    ## Check if we should ignore some found files, when
    ## comparing with POTFILES.in
    foreach my $ignore ("POTFILES.skip", "POTFILES.ignore")
    {
	(-s $ignore) or next;

	if ("$ignore" eq "POTFILES.ignore")
	{
	    print "The usage of POTFILES.ignore is deprecated. Please consider moving the\n".
		  "content of this file to POTFILES.skip.\n";
	}

	print "Found $ignore: Ignoring files...\n" if $VERBOSE;
	open FILE, "<$ignore" or die "ERROR: Failed to open $ignore!\n";
	    
	while (<FILE>)
	{
	    push @buf_potfiles_ignore, $_ unless /^(#|\s*$)/;
	}
