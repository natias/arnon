
=item seek

=item binmode

=item opened

=item autoflush

=item input_line_number

=item fileno

=item close

=item newStream([OPTS])

=back

=item Importing

:all

=item EXAMPLES

=over 4

=item Apache::GZip Revisited

=item Working with Net::FTP

=back

=item SUPPORT

=item SEE ALSO

=item AUTHOR

=item MODIFICATION HISTORY

=item COPYRIGHT AND LICENSE

=back

=head2 IO::Compress::Deflate - Write RFC 1950 files/buffers

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item Functional Interface

=over 4

=item deflate $input_filename_or_reference => $output_filename_or_reference
[, OPTS]

A filename, A filehandle, A scalar reference, An array reference, An Input
FileGlob string, A filename, A filehandle, A scalar reference, An Array
Reference, An Output FileGlob

=item Notes

=item Optional Parameters

C<< AutoClose => 0|1 >>, C<< BinModeIn => 0|1 >>, C<< Append => 0|1 >>, A
Buffer, A Filename, A Filehandle

=item Oneshot Examples

=back

=item OO Interface

=over 4

=item Constructor

A filename, A filehandle, A scalar reference

=item Constructor Options

C<< AutoClose => 0|1 >>, C<< Append => 0|1 >>, A Buffer, A Filename, A
Filehandle, C<< Merge => 0|1 >>, -Level, -Strategy, C<< Strict => 0|1 >>

=item Examples

=back

=item Methods

=over 4

=item print

=item printf

=item syswrite

=item write

=item flush

=item tell

=item eof

=item seek

=item binmode

=item opened

=item autoflush

=item input_line_number

=item fileno

=item close

=item newStream([OPTS])

=item deflateParams

=back

=item Importing

:all, :constants, :flush, :level, :strategy

=item EXAMPLES

=over 4

=item Apache::GZip Revisited

=item Working with Net::FTP

=back

=item SUPPORT

=item SEE ALSO

=item AUTHOR

=item MODIFICATION HISTORY

=item COPYRIGHT AND LICENSE

=back

=head2 IO::Compress::FAQ -- Frequently Asked Questions about IO::Compress

=over 4

=item DESCRIPTION

=item GENERAL

=over 4

=item Compatibility with Unix compress/uncompress.

=item Accessing .tar.Z files

=item How do I recompress using a different compression?

=back

=item ZIP

=over 4

=item What Compression Types do IO::Compress::Zip & IO::Uncompress::Unzip
support?

Store (method 0), Deflate (method 8), Bzip2 (method 12), Lzma (method 14)

=item Can I Read/Write Zip files larger the 4 Gig?

=item Can I write more that 64K entries is a Zip files?

=item Zip Resources

=back

=item GZIP

=over 4

=item Gzip Resources

=item Dealing with concatenated gzip files

=item Reading bgzip files with IO::Uncompress::Gunzip

=back

=item ZLIB

=over 4

=item Zlib Resources

=back

=item Bzip2

=over 4

=item Bzip2 Resources

=item Dealing with Concatenated bzip2 files

=item Interoperating with Pbzip2

=back

=item HTTP & NETWORK

=over 4

=item Apache::GZip Revisited

=item Compressed files and Net::FTP

=back

=item MISC

=over 4

=item Using C<InputLength> to uncompress data embedded in a larger
file/buffer.

=back

=item SUPPORT

=item SEE ALSO

=item AUTHOR

=item MODIFICATION HISTORY

=item COPYRIGHT AND LICENSE

=back

=head2 IO::Compress::Gzip - Write RFC 1952 files/buffers

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item Functional Interface

=over 4

=item gzip $input_filename_or_reference => $output_filename_or_reference [,
OPTS]

A filename, A filehandle, A scalar reference, An array reference, An Input
FileGlob string, A filename, A filehandle, A scalar reference, An Array
Reference, An Output FileGlob

=item Notes

=item Optional Parameters

C<< AutoClose => 0|1 >>, C<< BinModeIn => 0|1 >>, C<< Append => 0|1 >>, A
Buffer, A Filename, A Filehandle

=item Oneshot Examples

=back

=item OO Interface

=over 4

=item Constructor

A filename, A filehandle, A scalar reference

=item Constructor Options

C<< AutoClose => 0|1 >>, C<< Append => 0|1 >>, A Buffer, A Filename, A
Filehandle, C<< Merge => 0|1 >>, -Level, -Strategy, C<< Minimal => 0|1 >>,
C<< Comment => $comment >>, C<< Name => $string >>, C<< Time => $number >>,
C<< TextFlag => 0|1 >>, C<< HeaderCRC => 0|1 >>, C<< OS_Code => $value >>,
C<< ExtraField => $data >>, C<< ExtraFlags => $value >>, C<< Strict => 0|1
>>

=item Examples

=back

=item Methods

=over 4

=item print

=item printf

=item syswrite

=item write

=item flush

=item tell

=item eof

=item seek

=item binmode

=item opened

=item autoflush

=item input_line_number

=item fileno

=item close

=item newStream([OPTS])

=item deflateParams

=back

=item Importing

:all, :constants, :flush, :level, :strategy

=item EXAMPLES

=over 4

=item Apache::GZip Revisited

=item Working with Net::FTP

=back

=item SUPPORT

=item SEE ALSO

=item AUTHOR

=item MODIFICATION HISTORY

=item COPYRIGHT AND LICENSE

=back

=head2 IO::Compress::RawDeflate - Write RFC 1951 files/buffers

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item Functional Interface

=over 4

=item rawdeflate $input_filename_or_reference =>
$output_filename_or_reference [, OPTS]

A filename, A filehandle, A scalar reference, An array reference, An Input
FileGlob string, A filename, A filehandle, A scalar reference, An Array
Reference, An Output FileGlob

=item Notes

=item Optional Parameters

C<< AutoClose => 0|1 >>, C<< BinModeIn => 0|1 >>, C<< Append => 0|1 >>, A
Buffer, A Filename, A Filehandle

=item Oneshot Examples

=back

=item OO Interface

=over 4

=item Constructor

A filename, A filehandle, A scalar reference

=item Constructor Options

C<< AutoClose => 0|1 >>, C<< Append => 0|1 >>, A Buffer, A Filename, A
Filehandle, C<< Merge => 0|1 >>, -Level, -Strategy, C<< Strict => 0|1 >>

=item Examples

=back

=item Methods

=over 4

=item print

=item printf

=item syswrite

=item write

=item flush

=item tell

=item eof

=item seek

=item binmode

=item opened

=item autoflush

=item input_line_number

=item fileno

=item close

=item newStream([OPTS])

=item deflateParams

=back

=item Importing

:all, :constants, :flush, :level, :strategy

=item EXAMPLES

=over 4

=item Apache::GZip Revisited

=item Working with Net::FTP

=back

=item SUPPORT

=item SEE ALSO

=item AUTHOR

=item MODIFICATION HISTORY

=item COPYRIGHT AND LICENSE

=back

=head2 IO::Compress::Zip - Write zip files/buffers

=over 4

=item SYNOPSIS

=item DESCRIPTION

Store (0), Deflate (8), Bzip2 (12), Lzma (14), Zstandard (93), Xz (95)

=item Functional Interface

=over 4

=item zip $input_filename_or_reference => $output_filename_or_reference [,
OPTS]

A filename, A filehandle, A scalar reference, An array reference, An Input
FileGlob string, the full filename contained in
C<$input_filename_or_reference>, the file protection attributes, the
UID/GID for the file, the file timestamps, A filename, A filehandle, A
scalar reference, An Array Reference, An Output FileGlob

=item Notes

=item Optional Parameters

C<< AutoClose => 0|1 >>, C<< BinModeIn => 0|1 >>, C<< Append => 0|1 >>, A
Buffer, A Filename, A Filehandle

=item Oneshot Examples

=back

=item OO Interface

=over 4

=item Constructor

A filename, A filehandle, A scalar reference

=item Constructor Options

C<< AutoClose => 0|1 >>, C<< Append => 0|1 >>, A Buffer, A Filename, A
Filehandle, C<< Name => $string >>, If the C<$input> parameter is not a
filename, the I<archive member name> will be an empty string, C<<
CanonicalName => 0|1 >>, C<< FilterName => sub { ... }	>>, C<< Efs => 0|1
>>, C<< Minimal => 1|0 >>, C<< Stream => 0|1 >>, C<< Zip64 => 0|1 >>,
-Level, -Strategy, C<< BlockSize100K => number >>, C<< WorkFactor => number
>>, C<< Preset => number >>, C<< Extreme => 0|1 >>, C<< Time => $number >>,
C<< ExtAttr => $attr >>, C<< exTime => [$atime, $mtime, $ctime] >>, C<<
exUnix2 => [$uid, $gid] >>, C<< exUnixN => [$uid, $gid] >>, C<< Comment =>
$comment >>, C<< ZipComment => $comment >>, C<< Method => $method >>, C<<
TextFlag => 0|1 >>, C<< ExtraFieldLocal => $data >>, C<< ExtraFieldCentral
=> $data >>, C<< Strict => 0|1 >>

=item Examples

=back

=item Methods

=over 4

=item print

=item printf

=item syswrite

=item write

=item flush

=item tell

=item eof

=item seek

=item binmode

=item opened

=item autoflush

=item input_line_number

=item fileno

=item close

=item newStream([OPTS])

=item deflateParams

=back

=item Importing

:all, :constants, :flush, :level, :strategy, :zip_method

=item EXAMPLES

=over 4

=item Apache::GZip Revisited

=item Working with Net::FTP

=back

=item SUPPORT

=item SEE ALSO

=item AUTHOR

=item MODIFICATION HISTORY

=item COPYRIGHT AND LICENSE

=back

=head2 IO::Dir - supply object methods for directory handles

=over 4

=item SYNOPSIS

=item DESCRIPTION

new ( [ DIRNAME ] ), open ( DIRNAME ), read (), seek ( POS ), tell (),
rewind (), close (), tie %hash, 'IO::Dir', DIRNAME [, OPTIONS ]

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::File - supply object methods for filehandles

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new ( FILENAME [,MODE [,PERMS]] ), new_tmpfile

=item METHODS

open( FILENAME [,MODE [,PERMS]] ), open( FILENAME, IOLAYERS )

=item NOTE

=item SEE ALSO

=item HISTORY

=back

=head2 IO::Handle - supply object methods for I/O handles

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new (), new_from_fd ( FD, MODE )

=item METHODS

$io->fdopen ( FD, MODE ), $io->opened, $io->getline, $io->getlines,
$io->ungetc ( ORD ), $io->write ( BUF, LEN [, OFFSET ] ), $io->error,
$io->clearerr, $io->sync, $io->flush, $io->printflush ( ARGS ),
$io->blocking ( [ BOOL ] ), binmode( [LAYER] ), $io->untaint

=item NOTE

=item SEE ALSO

=item BUGS

=item HISTORY

=back

=head2 IO::Pipe - supply object methods for pipes

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new ( [READER, WRITER] )

=item METHODS

reader ([ARGS]), writer ([ARGS]), handles ()

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::Poll - Object interface to system poll call

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

mask ( IO [, EVENT_MASK ] ), poll ( [ TIMEOUT ] ), events ( IO ), remove (
IO ), handles( [ EVENT_MASK ] )

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::Seekable - supply seek based methods for I/O objects

=over 4

=item SYNOPSIS

=item DESCRIPTION

$io->getpos, $io->setpos, $io->seek ( POS, WHENCE ), WHENCE=0 (SEEK_SET),
WHENCE=1 (SEEK_CUR), WHENCE=2 (SEEK_END), $io->sysseek( POS, WHENCE ),
$io->tell

=item SEE ALSO

=item HISTORY

=back

=head2 IO::Select - OO interface to the C<select> system call

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new ( [ HANDLES ] )

=item METHODS

add ( HANDLES ), remove ( HANDLES ), exists ( HANDLE ), handles, can_read (
[ TIMEOUT ] ), can_write ( [ TIMEOUT ] ), has_exception ( [ TIMEOUT ] ),
count (), bits(), select ( READ, WRITE, EXCEPTION [, TIMEOUT ] )

=item EXAMPLE

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::Socket - Object interface to socket communications

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR ARGUMENTS

=over 4

=item Blocking

=item Domain

=item Listen

=item Timeout

=item Type

=back

=item CONSTRUCTORS

=over 4

=item new

=back

=item METHODS

=over 4

=item accept

=item atmark

=item autoflush

=item bind

=item connected

=item getsockopt

=item listen

=item peername

=item protocol

=item recv

=item send

=item setsockopt

=item shutdown

=item sockdomain

=item socket

=item socketpair

=item sockname

=item sockopt

=item socktype

=item timeout

=back

=item EXAMPLES

=item LIMITATIONS

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::Socket::INET - Object interface for AF_INET domain sockets

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item CONSTRUCTOR

new ( [ARGS] )

=over 4

=item METHODS

sockaddr (), sockport (), sockhost (), peeraddr (), peerport (), peerhost
()

=back

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT

=back

=head2 IO::Socket::IP, C<IO::Socket::IP> - Family-neutral IP socket
supporting both IPv4 and IPv6

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item REPLACING C<IO::Socket> DEFAULT BEHAVIOUR

=back

=over 4

=item CONSTRUCTORS

=back

=over 4

=item new

PeerHost => STRING, PeerService => STRING, PeerAddr => STRING, PeerPort =>
STRING, PeerAddrInfo => ARRAY, LocalHost => STRING, LocalService => STRING,
LocalAddr => STRING, LocalPort => STRING, LocalAddrInfo => ARRAY, Family =>
INT, Type => INT, Proto => STRING or INT, GetAddrInfoFlags => INT, Listen
=> INT, ReuseAddr => BOOL, ReusePort => BOOL, Broadcast => BOOL, Sockopts
=> ARRAY, V6Only => BOOL, MultiHomed, Blocking => BOOL, Timeout => NUM

=item new (one arg)

=back

=over 4

=item METHODS

=back

=over 4

=item sockhost_service

=back

=over 4

=item sockhost

=item sockport

=item sockhostname

=item sockservice

=back

=over 4

=item sockaddr

=back

=over 4

=item peerhost_service

=back

=over 4

=item peerhost

=item peerport

=item peerhostname

=item peerservice

=back

=over 4

=item peeraddr

=back

=over 4

=item as_inet

=back

=over 4

=item NON-BLOCKING

=back

=over 4

=item C<PeerHost> AND C<LocalHost> PARSING

=over 4

=item split_addr

=back

=back

=over 4

=item join_addr
