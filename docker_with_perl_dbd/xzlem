characters in the ASCII character set, analogous to C<m/[[:ascii:]]/>.
On non-ASCII platforms, it returns TRUE iff this
character corresponds to an ASCII character.  Variants C<isASCII_A()> and
C<isASCII_L1()> are identical to C<isASCII()>.
See the L<top of this section|/Character classification> for an explanation of
the variants.
Note, however, that some platforms do not have the C library routine
C<isascii()>.  In these cases, the variants whose names contain C<LC> are the
same as the corresponding ones without.

Also note, that because all ASCII characters are UTF-8 invariant (meaning they
have the exact same representation (always a single byte) whether encoded in
UTF-8 or not), C<isASCII> will give the correct results when called with any
byte in any string encoded or not in UTF-8.  And similarly C<isASCII_utf8> and
C<isASCII_utf8_safe> will work properly on any string encoded or not in UTF-8.

=over 3

 bool  isASCII             (UV ch)
 bool  isASCII_A           (UV ch)
 bool  isASCII_LC          (UV ch)
 bool  isASCII_LC_utf8_safe(U8 * s, U8 *end)
 bool  isASCII_LC_uvchr    (UV ch)
 bool  isASCII_L1          (UV ch)
 bool  isASCII_utf8        (U8 * s, U8 * end)
 bool  isASCII_utf8_safe   (U8 * s, U8 * end)
 bool  isASCII_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isBLANK>

=item C<isBLANK_A>

=item C<isBLANK_LC>

=item C<isBLANK_LC_utf8_safe>

=item C<isBLANK_LC_uvchr>

=item C<isBLANK_L1>

=item C<isBLANK_utf8>

=item C<isBLANK_utf8_safe>

=item C<isBLANK_uvchr>
X<isBLANK>X<isBLANK_A>X<isBLANK_LC>X<isBLANK_LC_utf8_safe>X<isBLANK_LC_uvchr>X<isBLANK_L1>X<isBLANK_utf8>X<isBLANK_utf8_safe>X<isBLANK_uvchr>

Returns a boolean indicating whether the specified character is a
character considered to be a blank, analogous to C<m/[[:blank:]]/>.
See the L<top of this section|/Character classification> for an explanation of
the variants.
Note,
however, that some platforms do not have the C library routine
C<isblank()>.  In these cases, the variants whose names contain C<LC> are
the same as the corresponding ones without.

=over 3

 bool  isBLANK             (UV ch)
 bool  isBLANK_A           (UV ch)
 bool  isBLANK_LC          (UV ch)
 bool  isBLANK_LC_utf8_safe(U8 * s, U8 *end)
 bool  isBLANK_LC_uvchr    (UV ch)
 bool  isBLANK_L1          (UV ch)
 bool  isBLANK_utf8        (U8 * s, U8 * end)
 bool  isBLANK_utf8_safe   (U8 * s, U8 * end)
 bool  isBLANK_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isCNTRL>

=item C<isCNTRL_A>

=item C<isCNTRL_LC>

=item C<isCNTRL_LC_utf8_safe>

=item C<isCNTRL_LC_uvchr>

=item C<isCNTRL_L1>

=item C<isCNTRL_utf8>

=item C<isCNTRL_utf8_safe>

=item C<isCNTRL_uvchr>
X<isCNTRL>X<isCNTRL_A>X<isCNTRL_LC>X<isCNTRL_LC_utf8_safe>X<isCNTRL_LC_uvchr>X<isCNTRL_L1>X<isCNTRL_utf8>X<isCNTRL_utf8_safe>X<isCNTRL_uvchr>

Returns a boolean indicating whether the specified character is a
control character, analogous to C<m/[[:cntrl:]]/>.
See the L<top of this section|/Character classification> for an explanation of
the variants.
On EBCDIC platforms, you almost always want to use the C<isCNTRL_L1> variant.

=over 3

 bool  isCNTRL             (UV ch)
 bool  isCNTRL_A           (UV ch)
 bool  isCNTRL_LC          (UV ch)
 bool  isCNTRL_LC_utf8_safe(U8 * s, U8 *end)
 bool  isCNTRL_LC_uvchr    (UV ch)
 bool  isCNTRL_L1          (UV ch)
 bool  isCNTRL_utf8        (U8 * s, U8 * end)
 bool  isCNTRL_utf8_safe   (U8 * s, U8 * end)
 bool  isCNTRL_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isDIGIT>

=item C<isDIGIT_A>

=item C<isDIGIT_LC>

=item C<isDIGIT_LC_utf8_safe>

=item C<isDIGIT_LC_uvchr>

=item C<isDIGIT_L1>

=item C<isDIGIT_utf8>

=item C<isDIGIT_utf8_safe>

=item C<isDIGIT_uvchr>
X<isDIGIT>X<isDIGIT_A>X<isDIGIT_LC>X<isDIGIT_LC_utf8_safe>X<isDIGIT_LC_uvchr>X<isDIGIT_L1>X<isDIGIT_utf8>X<isDIGIT_utf8_safe>X<isDIGIT_uvchr>

Returns a boolean indicating whether the specified character is a
digit, analogous to C<m/[[:digit:]]/>.
Variants C<isDIGIT_A> and C<isDIGIT_L1> are identical to C<isDIGIT>.
See the L<top of this section|/Character classification> for an explanation of
the variants.

=over 3

 bool  isDIGIT             (UV ch)
 bool  isDIGIT_A           (UV ch)
 bool  isDIGIT_LC          (UV ch)
 bool  isDIGIT_LC_utf8_safe(U8 * s, U8 *end)
 bool  isDIGIT_LC_uvchr    (UV ch)
 bool  isDIGIT_L1          (UV ch)
 bool  isDIGIT_utf8        (U8 * s, U8 * end)
 bool  isDIGIT_utf8_safe   (U8 * s, U8 * end)
 bool  isDIGIT_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isGRAPH>

=item C<isGRAPH_A>

=item C<isGRAPH_LC>

=item C<isGRAPH_LC_utf8_safe>

=item C<isGRAPH_LC_uvchr>

=item C<isGRAPH_L1>

=item C<isGRAPH_utf8>

=item C<isGRAPH_utf8_safe>

=item C<isGRAPH_uvchr>
X<isGRAPH>X<isGRAPH_A>X<isGRAPH_LC>X<isGRAPH_LC_utf8_safe>X<isGRAPH_LC_uvchr>X<isGRAPH_L1>X<isGRAPH_utf8>X<isGRAPH_utf8_safe>X<isGRAPH_uvchr>

Returns a boolean indicating whether the specified character is a
graphic character, analogous to C<m/[[:graph:]]/>.
See the L<top of this section|/Character classification> for an explanation of
the variants.

=over 3

 bool  isGRAPH             (UV ch)
 bool  isGRAPH_A           (UV ch)
 bool  isGRAPH_LC          (UV ch)
 bool  isGRAPH_LC_utf8_safe(U8 * s, U8 *end)
 bool  isGRAPH_LC_uvchr    (UV ch)
 bool  isGRAPH_L1          (UV ch)
 bool  isGRAPH_utf8        (U8 * s, U8 * end)
 bool  isGRAPH_utf8_safe   (U8 * s, U8 * end)
 bool  isGRAPH_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isIDCONT>

=item C<isIDCONT_A>

=item C<isIDCONT_LC>

=item C<isIDCONT_LC_utf8_safe>

=item C<isIDCONT_LC_uvchr>

=item C<isIDCONT_L1>

=item C<isIDCONT_utf8>

=item C<isIDCONT_utf8_safe>

=item C<isIDCONT_uvchr>
X<isIDCONT>X<isIDCONT_A>X<isIDCONT_LC>X<isIDCONT_LC_utf8_safe>X<isIDCONT_LC_uvchr>X<isIDCONT_L1>X<isIDCONT_utf8>X<isIDCONT_utf8_safe>X<isIDCONT_uvchr>

Returns a boolean indicating whether the specified character can be the
second or succeeding character of an identifier.  This is very close to, but
not quite the same as the official Unicode property C<XID_Continue>.  The
difference is that this returns true only if the input character also matches
L</isWORDCHAR>.  See the L<top of this section|/Character classification> for
an explanation of the variants.

=over 3

 bool  isIDCONT             (UV ch)
 bool  isIDCONT_A           (UV ch)
 bool  isIDCONT_LC          (UV ch)
 bool  isIDCONT_LC_utf8_safe(U8 * s, U8 *end)
 bool  isIDCONT_LC_uvchr    (UV ch)
 bool  isIDCONT_L1          (UV ch)
 bool  isIDCONT_utf8        (U8 * s, U8 * end)
 bool  isIDCONT_utf8_safe   (U8 * s, U8 * end)
 bool  isIDCONT_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isIDFIRST>

=item C<isIDFIRST_A>

=item C<isIDFIRST_LC>

=item C<isIDFIRST_LC_utf8_safe>

=item C<isIDFIRST_LC_uvchr>

=item C<isIDFIRST_L1>

=item C<isIDFIRST_utf8>

=item C<isIDFIRST_utf8_safe>

=item C<isIDFIRST_uvchr>
X<isIDFIRST>X<isIDFIRST_A>X<isIDFIRST_LC>X<isIDFIRST_LC_utf8_safe>X<isIDFIRST_LC_uvchr>X<isIDFIRST_L1>X<isIDFIRST_utf8>X<isIDFIRST_utf8_safe>X<isIDFIRST_uvchr>

Returns a boolean indicating whether the specified character can be the first
character of an identifier.  This is very close to, but not quite the same as
the official Unicode property C<XID_Start>.  The difference is that this
returns true only if the input character also matches L</isWORDCHAR>.
See the L<top of this section|/Character classification> for an explanation of
the variants.

=over 3

 bool  isIDFIRST             (UV ch)
 bool  isIDFIRST_A           (UV ch)
 bool  isIDFIRST_LC          (UV ch)
 bool  isIDFIRST_LC_utf8_safe(U8 * s, U8 *end)
 bool  isIDFIRST_LC_uvchr    (UV ch)
 bool  isIDFIRST_L1          (UV ch)
 bool  isIDFIRST_utf8        (U8 * s, U8 * end)
 bool  isIDFIRST_utf8_safe   (U8 * s, U8 * end)
 bool  isIDFIRST_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isLOWER>

=item C<isLOWER_A>

=item C<isLOWER_LC>

=item C<isLOWER_LC_utf8_safe>

=item C<isLOWER_LC_uvchr>

=item C<isLOWER_L1>

=item C<isLOWER_utf8>

=item C<isLOWER_utf8_safe>

=item C<isLOWER_uvchr>
X<isLOWER>X<isLOWER_A>X<isLOWER_LC>X<isLOWER_LC_utf8_safe>X<isLOWER_LC_uvchr>X<isLOWER_L1>X<isLOWER_utf8>X<isLOWER_utf8_safe>X<isLOWER_uvchr>

Returns a boolean indicating whether the specified character is a
lowercase character, analogous to C<m/[[:lower:]]/>.
See the L<top of this section|/Character classification> for an explanation of
the variants

=over 3

 bool  isLOWER             (UV ch)
 bool  isLOWER_A           (UV ch)
 bool  isLOWER_LC          (UV ch)
 bool  isLOWER_LC_utf8_safe(U8 * s, U8 *end)
 bool  isLOWER_LC_uvchr    (UV ch)
 bool  isLOWER_L1          (UV ch)
 bool  isLOWER_utf8        (U8 * s, U8 * end)
 bool  isLOWER_utf8_safe   (U8 * s, U8 * end)
 bool  isLOWER_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isOCTAL>

=item C<isOCTAL_A>

=item C<isOCTAL_L1>
X<isOCTAL>X<isOCTAL_A>X<isOCTAL_L1>

Returns a boolean indicating whether the specified character is an
octal digit, [0-7].
The only two variants are C<isOCTAL_A> and C<isOCTAL_L1>; each is identical to
C<isOCTAL>.

=over 3

 bool  isOCTAL(UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isPRINT>

=item C<isPRINT_A>

=item C<isPRINT_LC>

=item C<isPRINT_LC_utf8_safe>

=item C<isPRINT_LC_uvchr>

=item C<isPRINT_L1>

=item C<isPRINT_utf8>

=item C<isPRINT_utf8_safe>

=item C<isPRINT_uvchr>
X<isPRINT>X<isPRINT_A>X<isPRINT_LC>X<isPRINT_LC_utf8_safe>X<isPRINT_LC_uvchr>X<isPRINT_L1>X<isPRINT_utf8>X<isPRINT_utf8_safe>X<isPRINT_uvchr>

Returns a boolean indicating whether the specified character is a
printable character, analogous to C<m/[[:print:]]/>.
See the L<top of this section|/Character classification> for an explanation of
the variants.

=over 3

 bool  isPRINT             (UV ch)
 bool  isPRINT_A           (UV ch)
 bool  isPRINT_LC          (UV ch)
 bool  isPRINT_LC_utf8_safe(U8 * s, U8 *end)
 bool  isPRINT_LC_uvchr    (UV ch)
 bool  isPRINT_L1          (UV ch)
 bool  isPRINT_utf8        (U8 * s, U8 * end)
 bool  isPRINT_utf8_safe   (U8 * s, U8 * end)
 bool  isPRINT_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isPSXSPC>

=item C<isPSXSPC_A>

=item C<isPSXSPC_LC>

=item C<isPSXSPC_LC_utf8_safe>

=item C<isPSXSPC_LC_uvchr>

=item C<isPSXSPC_L1>

=item C<isPSXSPC_utf8>

=item C<isPSXSPC_utf8_safe>

=item C<isPSXSPC_uvchr>
X<isPSXSPC>X<isPSXSPC_A>X<isPSXSPC_LC>X<isPSXSPC_LC_utf8_safe>X<isPSXSPC_LC_uvchr>X<isPSXSPC_L1>X<isPSXSPC_utf8>X<isPSXSPC_utf8_safe>X<isPSXSPC_uvchr>

(short for Posix Space)
Starting in 5.18, this is identical in all its forms to the
corresponding C<isSPACE()> macros.
The locale forms of this macro are identical to their corresponding
C<isSPACE()> forms in all Perl releases.  In releases prior to 5.18, the
non-locale forms differ from their C<isSPACE()> forms only in that the
C<isSPACE()> forms don't match a Vertical Tab, and the C<isPSXSPC()> forms do.
Otherwise they are identical.  Thus this macro is analogous to what
C<m/[[:space:]]/> matches in a regular expression.
See the L<top of this section|/Character classification> for an explanation of
the variants.

=over 3

 bool  isPSXSPC             (UV ch)
 bool  isPSXSPC_A           (UV ch)
 bool  isPSXSPC_LC          (UV ch)
 bool  isPSXSPC_LC_utf8_safe(U8 * s, U8 *end)
 bool  isPSXSPC_LC_uvchr    (UV ch)
 bool  isPSXSPC_L1          (UV ch)
 bool  isPSXSPC_utf8        (U8 * s, U8 * end)
 bool  isPSXSPC_utf8_safe   (U8 * s, U8 * end)
 bool  isPSXSPC_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isPUNCT>

=item C<isPUNCT_A>

=item C<isPUNCT_LC>

=item C<isPUNCT_LC_utf8_safe>

=item C<isPUNCT_LC_uvchr>

=item C<isPUNCT_L1>

=item C<isPUNCT_utf8>

=item C<isPUNCT_utf8_safe>

=item C<isPUNCT_uvchr>
X<isPUNCT>X<isPUNCT_A>X<isPUNCT_LC>X<isPUNCT_LC_utf8_safe>X<isPUNCT_LC_uvchr>X<isPUNCT_L1>X<isPUNCT_utf8>X<isPUNCT_utf8_safe>X<isPUNCT_uvchr>

Returns a boolean indicating whether the specified character is a
punctuation character, analogous to C<m/[[:punct:]]/>.
Note that the definition of what is punctuation isn't as
straightforward as one might desire.  See L<perlrecharclass/POSIX Character
Classes> for details.
See the L<top of this section|/Character classification> for an explanation of
the variants.

=over 3

 bool  isPUNCT             (UV ch)
 bool  isPUNCT_A           (UV ch)
 bool  isPUNCT_LC          (UV ch)
 bool  isPUNCT_LC_utf8_safe(U8 * s, U8 *end)
 bool  isPUNCT_LC_uvchr    (UV ch)
 bool  isPUNCT_L1          (UV ch)
 bool  isPUNCT_utf8        (U8 * s, U8 * end)
 bool  isPUNCT_utf8_safe   (U8 * s, U8 * end)
 bool  isPUNCT_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isSPACE>

=item C<isSPACE_A>

=item C<isSPACE_LC>

=item C<isSPACE_LC_utf8_safe>

=item C<isSPACE_LC_uvchr>

=item C<isSPACE_L1>

=item C<isSPACE_utf8>

=item C<isSPACE_utf8_safe>

=item C<isSPACE_uvchr>
X<isSPACE>X<isSPACE_A>X<isSPACE_LC>X<isSPACE_LC_utf8_safe>X<isSPACE_LC_uvchr>X<isSPACE_L1>X<isSPACE_utf8>X<isSPACE_utf8_safe>X<isSPACE_uvchr>

Returns a boolean indicating whether the specified character is a
whitespace character.  This is analogous
to what C<m/\s/> matches in a regular expression.  Starting in Perl 5.18
this also matches what C<m/[[:space:]]/> does.  Prior to 5.18, only the
locale forms of this macro (the ones with C<LC> in their names) matched
precisely what C<m/[[:space:]]/> does.  In those releases, the only difference,
in the non-locale variants, was that C<isSPACE()> did not match a vertical tab.
(See L</isPSXSPC> for a macro that matches a vertical tab in all releases.)
See the L<top of this section|/Character classification> for an explanation of
the variants.

=over 3

 bool  isSPACE             (UV ch)
 bool  isSPACE_A           (UV ch)
 bool  isSPACE_LC          (UV ch)
 bool  isSPACE_LC_utf8_safe(U8 * s, U8 *end)
 bool  isSPACE_LC_uvchr    (UV ch)
 bool  isSPACE_L1          (UV ch)
 bool  isSPACE_utf8        (U8 * s, U8 * end)
 bool  isSPACE_utf8_safe   (U8 * s, U8 * end)
 bool  isSPACE_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isUPPER>

=item C<isUPPER_A>

=item C<isUPPER_LC>

=item C<isUPPER_LC_utf8_safe>

=item C<isUPPER_LC_uvchr>

=item C<isUPPER_L1>

=item C<isUPPER_utf8>

=item C<isUPPER_utf8_safe>

=item C<isUPPER_uvchr>
X<isUPPER>X<isUPPER_A>X<isUPPER_LC>X<isUPPER_LC_utf8_safe>X<isUPPER_LC_uvchr>X<isUPPER_L1>X<isUPPER_utf8>X<isUPPER_utf8_safe>X<isUPPER_uvchr>

Returns a boolean indicating whether the specified character is an
uppercase character, analogous to C<m/[[:upper:]]/>.
See the L<top of this section|/Character classification> for an explanation of
the variants.

=over 3

 bool  isUPPER             (UV ch)
 bool  isUPPER_A           (UV ch)
 bool  isUPPER_LC          (UV ch)
 bool  isUPPER_LC_utf8_safe(U8 * s, U8 *end)
 bool  isUPPER_LC_uvchr    (UV ch)
 bool  isUPPER_L1          (UV ch)
 bool  isUPPER_utf8        (U8 * s, U8 * end)
 bool  isUPPER_utf8_safe   (U8 * s, U8 * end)
 bool  isUPPER_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isWORDCHAR>

=item C<isWORDCHAR_A>

=item C<isWORDCHAR_LC>

=item C<isWORDCHAR_LC_utf8_safe>

=item C<isWORDCHAR_LC_uvchr>

=item C<isWORDCHAR_L1>

=item C<isWORDCHAR_utf8>

=item C<isWORDCHAR_utf8_safe>

=item C<isWORDCHAR_uvchr>
X<isWORDCHAR>X<isWORDCHAR_A>X<isWORDCHAR_LC>X<isWORDCHAR_LC_utf8_safe>X<isWORDCHAR_LC_uvchr>X<isWORDCHAR_L1>X<isWORDCHAR_utf8>X<isWORDCHAR_utf8_safe>X<isWORDCHAR_uvchr>

Returns a boolean indicating whether the specified character is a character
that is a word character, analogous to what C<m/\w/> and C<m/[[:word:]]/> match
in a regular expression.  A word character is an alphabetic character, a
decimal digit, a connecting punctuation character (such as an underscore), or
a "mark" character that attaches to one of those (like some sort of accent).

See the L<top of this section|/Character classification> for an explanation of
the variants.

C<isWORDCHAR_A>, C<isWORDCHAR_L1>, C<isWORDCHAR_uvchr>,
C<isWORDCHAR_LC>, C<isWORDCHAR_LC_uvchr>, C<isWORDCHAR_LC_utf8>, and
C<isWORDCHAR_LC_utf8_safe> are also as described there, but additionally
include the platform's native underscore.

=over 3

 bool  isWORDCHAR             (UV ch)
 bool  isWORDCHAR_A           (UV ch)
 bool  isWORDCHAR_LC          (UV ch)
 bool  isWORDCHAR_LC_utf8_safe(U8 * s, U8 *end)
 bool  isWORDCHAR_LC_uvchr    (UV ch)
 bool  isWORDCHAR_L1          (UV ch)
 bool  isWORDCHAR_utf8        (U8 * s, U8 * end)
 bool  isWORDCHAR_utf8_safe   (U8 * s, U8 * end)
 bool  isWORDCHAR_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<isXDIGIT>

=item C<isXDIGIT_A>

=item C<isXDIGIT_LC>

=item C<isXDIGIT_LC_utf8_safe>

=item C<isXDIGIT_LC_uvchr>

=item C<isXDIGIT_L1>

=item C<isXDIGIT_utf8>

=item C<isXDIGIT_utf8_safe>

=item C<isXDIGIT_uvchr>
X<isXDIGIT>X<isXDIGIT_A>X<isXDIGIT_LC>X<isXDIGIT_LC_utf8_safe>X<isXDIGIT_LC_uvchr>X<isXDIGIT_L1>X<isXDIGIT_utf8>X<isXDIGIT_utf8_safe>X<isXDIGIT_uvchr>

Returns a boolean indicating whether the specified character is a hexadecimal
digit.  In the ASCII range these are C<[0-9A-Fa-f]>.  Variants C<isXDIGIT_A()>
and C<isXDIGIT_L1()> are identical to C<isXDIGIT()>.
See the L<top of this section|/Character classification> for an explanation of
the variants.

=over 3

 bool  isXDIGIT             (UV ch)
 bool  isXDIGIT_A           (UV ch)
 bool  isXDIGIT_LC          (UV ch)
 bool  isXDIGIT_LC_utf8_safe(U8 * s, U8 *end)
 bool  isXDIGIT_LC_uvchr    (UV ch)
 bool  isXDIGIT_L1          (UV ch)
 bool  isXDIGIT_utf8        (U8 * s, U8 * end)
 bool  isXDIGIT_utf8_safe   (U8 * s, U8 * end)
 bool  isXDIGIT_uvchr       (UV ch)

=back

=back

=for hackers
Found in file handy.h

=head1 Compiler and Preprocessor information

=over 4

=item C<CPPLAST>
X<CPPLAST>

This symbol is intended to be used along with C<CPPRUN> in the same manner
symbol C<CPPMINUS> is used with C<CPPSTDIN>. It contains either "-" or "".

=back

=for hackers
Found in file config.h

=over 4

=item C<CPPMINUS>
X<CPPMINUS>

This symbol contains the second part of the string which will invoke
the C preprocessor on the standard input and produce to standard
output.  This symbol will have the value "-" if C<CPPSTDIN> needs a minus
to specify standard input, otherwise the value is "".

=back

=for hackers
Found in file config.h

=over 4

=item C<CPPRUN>
X<CPPRUN>

This symbol contains the string which will invoke a C preprocessor on
the standard input and produce to standard output. It needs to end
with C<CPPLAST>, after all other preprocessor flags have been specified.
The main difference with C<CPPSTDIN> is that this program will never be a
pointer to a shell wrapper, i.e. it will be empty if no preprocessor is
available directly to the user. Note that it may well be different from
the preprocessor used to compile the C program.

=back

=for hackers
Found in file config.h

=over 4

=item C<CPPSTDIN>
X<CPPSTDIN>

This symbol contains the first part of the string which will invoke
the C preprocessor on the standard input and produce to standard
output.  Typical value of "cc -E" or "F</lib/cpp>", but it can also
call a wrapper. See C<L</CPPRUN>>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HASATTRIBUTE_ALWAYS_INLINE>
X<HASATTRIBUTE_ALWAYS_INLINE>

Can we handle C<GCC> attribute for functions that should always be
inlined.

=back

=for hackers
Found in file config.h

=over 4

=item C<HASATTRIBUTE_DEPRECATED>
X<HASATTRIBUTE_DEPRECATED>

Can we handle C<GCC> attribute for marking deprecated C<APIs>

=back

=for hackers
Found in file config.h

=over 4

=item C<HASATTRIBUTE_FORMAT>
X<HASATTRIBUTE_FORMAT>

Can we handle C<GCC> attribute for checking printf-style formats

=back

=for hackers
Found in file config.h

=over 4

=item C<HASATTRIBUTE_NONNULL>
X<HASATTRIBUTE_NONNULL>

Can we handle C<GCC> attribute for nonnull function parms.

=back

=for hackers
Found in file config.h

=over 4

=item C<HASATTRIBUTE_NORETURN>
X<HASATTRIBUTE_NORETURN>

Can we handle C<GCC> attribute for functions that do not return

=back

=for hackers
Found in file config.h

=over 4

=item C<HASATTRIBUTE_PURE>
X<HASATTRIBUTE_PURE>

Can we handle C<GCC> attribute for pure functions

=back

=for hackers
Found in file config.h

=over 4

=item C<HASATTRIBUTE_UNUSED>
X<HASATTRIBUTE_UNUSED>

Can we handle C<GCC> attribute for unused variables and arguments

=back

=for hackers
Found in file config.h

=over 4

=item C<HASATTRIBUTE_VISIBILITY>
X<HASATTRIBUTE_VISIBILITY>

Can we handle C<GCC> attribute for functions that should have a
different visibility.

=back

=for hackers
Found in file config.h

=over 4

=item C<HASATTRIBUTE_WARN_UNUSED_RESULT>
X<HASATTRIBUTE_WARN_UNUSED_RESULT>

Can we handle C<GCC> attribute for warning on unused results

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_BUILTIN_ADD_OVERFLOW>
X<HAS_BUILTIN_ADD_OVERFLOW>

This symbol, if defined, indicates that the compiler supports
C<__builtin_add_overflow> for adding integers with overflow checks.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_BUILTIN_CHOOSE_EXPR>
X<HAS_BUILTIN_CHOOSE_EXPR>

Can we handle C<GCC> builtin for compile-time ternary-like expressions

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_BUILTIN_EXPECT>
X<HAS_BUILTIN_EXPECT>

Can we handle C<GCC> builtin for telling that certain values are more
likely

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_BUILTIN_MUL_OVERFLOW>
X<HAS_BUILTIN_MUL_OVERFLOW>

This symbol, if defined, indicates that the compiler supports
C<__builtin_mul_overflow> for multiplying integers with overflow checks.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_BUILTIN_SUB_OVERFLOW>
X<HAS_BUILTIN_SUB_OVERFLOW>

This symbol, if defined, indicates that the compiler supports
C<__builtin_sub_overflow> for subtracting integers with overflow checks.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_C99_VARIADIC_MACROS>
X<HAS_C99_VARIADIC_MACROS>

If defined, the compiler supports C99 variadic macros.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_STATIC_INLINE>
X<HAS_STATIC_INLINE>

This symbol, if defined, indicates that the C compiler supports
C99-style static inline.  That is, the function can't be called
from another translation unit.

=back

=for hackers
Found in file config.h

=over 4

=item C<MEM_ALIGNBYTES>
X<MEM_ALIGNBYTES>

This symbol contains the number of bytes required to align a
double, or a long double when applicable. Usual values are 2,
4 and 8. The default is eight, for safety.  For cross-compiling
or multiarch support, Configure will set a minimum of 8.

=back
