S_apply_attrs_my(pTHX_ HV *stash, OP *target, OP *attrs, OP **imopsp);
# define PERL_ARGS_ASSERT_APPLY_ATTRS_MY        \
        assert(stash); assert(target); assert(imopsp)

STATIC I32
S_assignment_type(pTHX_ const OP *o)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_ASSIGNMENT_TYPE

STATIC void
S_bad_type_gv(pTHX_ I32 n, GV *gv, const OP *kid, const char *t);
# define PERL_ARGS_ASSERT_BAD_TYPE_GV           \
        assert(gv); assert(kid); assert(t)

STATIC void
S_bad_type_pv(pTHX_ I32 n, const char *t, const OP *o, const OP *kid);
# define PERL_ARGS_ASSERT_BAD_TYPE_PV           \
        assert(t); assert(o); assert(kid)

STATIC void
S_clear_special_blocks(pTHX_ const char * const fullname, GV * const gv, CV * const cv);
# define PERL_ARGS_ASSERT_CLEAR_SPECIAL_BLOCKS  \
        assert(fullname); assert(gv); assert(cv)

STATIC void
S_cop_free(pTHX_ COP *cop);
# define PERL_ARGS_ASSERT_COP_FREE              \
        assert(cop)

STATIC OP *
S_dup_attrlist(pTHX_ OP *o);
# define PERL_ARGS_ASSERT_DUP_ATTRLIST          \
        assert(o)

STATIC void
S_find_and_forget_pmops(pTHX_ OP *o);
# define PERL_ARGS_ASSERT_FIND_AND_FORGET_PMOPS \
        assert(o)

STATIC OP *
S_fold_constants(pTHX_ OP * const o);
# define PERL_ARGS_ASSERT_FOLD_CONSTANTS        \
        assert(o)

STATIC OP *
S_force_list(pTHX_ OP *arg, bool nullit);
# define PERL_ARGS_ASSERT_FORCE_LIST

STATIC void
S_forget_pmop(pTHX_ PMOP * const o);
# define PERL_ARGS_ASSERT_FORGET_PMOP           \
        assert(o)

STATIC void
S_gen_constant_list(pTHX_ OP *o);
# define PERL_ARGS_ASSERT_GEN_CONSTANT_LIST

STATIC void
S_inplace_aassign(pTHX_ OP *o);
# define PERL_ARGS_ASSERT_INPLACE_AASSIGN       \
        assert(o)

STATIC bool
S_is_handle_constructor(const OP *o, I32 numargs)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_IS_HANDLE_CONSTRUCTOR \
        assert(o)

STATIC OP *
S_listkids(pTHX_ OP *o);
# define PERL_ARGS_ASSERT_LISTKIDS

STATIC bool
S_looks_like_bool(pTHX_ const OP *o);
# define PERL_ARGS_ASSERT_LOOKS_LIKE_BOOL       \
        assert(o)

STATIC OP *
S_modkids(pTHX_ OP *o, I32 type);
# define PERL_ARGS_ASSERT_MODKIDS

STATIC void
S_move_proto_attr(pTHX_ OP **proto, OP **attrs, const GV *name, bool curstash);
# define PERL_ARGS_ASSERT_MOVE_PROTO_ATTR       \
        assert(proto); assert(attrs); assert(name)

STATIC OP *
S_my_kid(pTHX_ OP *o, OP *attrs, OP **imopsp);
# define PERL_ARGS_ASSERT_MY_KID                \
        assert(imopsp)

STATIC OP *
S_newGIVWHENOP(pTHX_ OP *cond, OP *block, I32 enter_opcode, I32 leave_opcode, PADOFFSET entertarg);
# define PERL_ARGS_ASSERT_NEWGIVWHENOP          \
        assert(block)

STATIC OP *
S_new_logop(pTHX_ I32 type, I32 flags, OP **firstp, OP **otherp)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_NEW_LOGOP             \
        assert(firstp); assert(otherp)

STATIC OP *
S_no_fh_allowed(pTHX_ OP *o)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_NO_FH_ALLOWED         \
        assert(o)

STATIC OP *
S_pmtrans(pTHX_ OP *o, OP *expr, OP *repl);
# define PERL_ARGS_ASSERT_PMTRANS               \
        assert(o); assert(expr); assert(repl)

STATIC bool
S_process_special_blocks(pTHX_ I32 floor, const char * const fullname, GV * const gv, CV * const cv);
# define PERL_ARGS_ASSERT_PROCESS_SPECIAL_BLOCKS \
        assert(fullname); assert(gv); assert(cv)

STATIC OP *
S_ref_array_or_hash(pTHX_ OP *cond);
# define PERL_ARGS_ASSERT_REF_ARRAY_OR_HASH

STATIC OP *
S_refkids(pTHX_ OP *o, I32 type);
# define PERL_ARGS_ASSERT_REFKIDS

STATIC bool
S_scalar_mod_type(const OP *o, I32 type)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SCALAR_MOD_TYPE

STATIC OP *
S_scalarboolean(pTHX_ OP *o);
# define PERL_ARGS_ASSERT_SCALARBOOLEAN         \
        assert(o)

STATIC OP *
S_scalarkids(pTHX_ OP *o);
# define PERL_ARGS_ASSERT_SCALARKIDS

STATIC OP *
S_search_const(pTHX_ OP *o)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SEARCH_CONST          \
        assert(o)

STATIC void
S_simplify_sort(pTHX_ OP *o);
# define PERL_ARGS_ASSERT_SIMPLIFY_SORT         \
        assert(o)

STATIC OP *
S_too_few_arguments_pv(pTHX_ OP *o, const char *name, U32 flags)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_TOO_FEW_ARGUMENTS_PV  \
        assert(o); assert(name)

STATIC OP *
S_too_many_arguments_pv(pTHX_ OP *o, const char *name, U32 flags);
# define PERL_ARGS_ASSERT_TOO_MANY_ARGUMENTS_PV \
        assert(o); assert(name)

STATIC OP *
S_voidnonfinal(pTHX_ OP *o);
# define PERL_ARGS_ASSERT_VOIDNONFINAL

# if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE bool
S_is_standard_filehandle_name(const char *fhname);
#   define PERL_ARGS_ASSERT_IS_STANDARD_FILEHANDLE_NAME \
        assert(fhname)

PERL_STATIC_INLINE OP *
S_newMETHOP_internal(pTHX_ I32 type, I32 flags, OP *dynamic_meth, SV * const_meth);
#   define PERL_ARGS_ASSERT_NEWMETHOP_INTERNAL

PERL_STATIC_INLINE OP *
S_op_integerize(pTHX_ OP *o);
#   define PERL_ARGS_ASSERT_OP_INTEGERIZE       \
        assert(o)

PERL_STATIC_INLINE OP *
S_op_std_init(pTHX_ OP *o);
#   define PERL_ARGS_ASSERT_OP_STD_INIT         \
        assert(o)

# endif /* !defined(PERL_NO_INLINE_FUNCTIONS) */
#endif /* defined(PERL_IN_OP_C) */
#if defined(PERL_IN_OP_C) || defined(PERL_IN_PEEP_C)
PERL_CALLCONV void
Perl_check_hash_fields_and_hekify(pTHX_ UNOP *rop, SVOP *key_op, int real)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CHECK_HASH_FIELDS_AND_HEKIFY

PERL_CALLCONV void
Perl_no_bareword_allowed(pTHX_ OP *o)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_NO_BAREWORD_ALLOWED   \
        assert(o)

PERL_CALLCONV void
Perl_op_prune_chain_head(OP **op_p)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_OP_PRUNE_CHAIN_HEAD   \
        assert(op_p)

PERL_CALLCONV SV *
Perl_op_varname(pTHX_ const OP *o)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_OP_VARNAME            \
        assert(o)

PERL_CALLCONV void
Perl_warn_elem_scalar_context(pTHX_ const OP *o, SV *name, bool is_hash, bool is_slice)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_WARN_ELEM_SCALAR_CONTEXT \
        assert(o); assert(name)

#endif /* defined(PERL_IN_OP_C) || defined(PERL_IN_PEEP_C) */
#if defined(PERL_IN_OP_C) || defined(PERL_IN_REGCOMP_ANY)

#endif
#if defined(PERL_IN_OP_C) || defined(PERL_IN_SV_C)
PERL_CALLCONV void
Perl_report_redefined_cv(pTHX_ const SV *name, const CV *old_cv, SV * const *new_const_svp)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_REPORT_REDEFINED_CV   \
        assert(name); assert(old_cv)

PERL_CALLCONV SV *
Perl_varname(pTHX_ const GV * const gv, const char gvtype, PADOFFSET targ, const SV * const keyname, SSize_t aindex, int subscript_type)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_VARNAME

#endif /* defined(PERL_IN_OP_C) || defined(PERL_IN_SV_C) */
#if defined(PERL_IN_PAD_C)
STATIC PADOFFSET
S_pad_alloc_name(pTHX_ PADNAME *name, U32 flags, HV *typestash, HV *ourstash);
# define PERL_ARGS_ASSERT_PAD_ALLOC_NAME        \
        assert(name)

STATIC void
S_pad_check_dup(pTHX_ PADNAME *name, U32 flags, const HV *ourstash);
# define PERL_ARGS_ASSERT_PAD_CHECK_DUP         \
        assert(name)

STATIC PADOFFSET
S_pad_findlex(pTHX_ const char *namepv, STRLEN namelen, U32 flags, const CV *cv, U32 seq, int warn, SV **out_capture, PADNAME **out_name, int *out_flags);
# define PERL_ARGS_ASSERT_PAD_FINDLEX           \
        assert(namepv); assert(cv); assert(out_name); assert(out_flags)

STATIC void
S_pad_reset(pTHX);
# define PERL_ARGS_ASSERT_PAD_RESET

# if defined(DEBUGGING)
STATIC void
S_cv_dump(pTHX_ const CV *cv, const char *title);
#   define PERL_ARGS_ASSERT_CV_DUMP             \
        assert(cv); assert(title)

# endif
#endif /* defined(PERL_IN_PAD_C) */
#if defined(PERL_IN_PEEP_C)
STATIC void
S_finalize_op(pTHX_ OP *o);
# define PERL_ARGS_ASSERT_FINALIZE_OP           \
        assert(o)

STATIC void
S_optimize_op(pTHX_ OP *o);
# define PERL_ARGS_ASSERT_OPTIMIZE_OP           \
        assert(o)

STATIC OP *
S_traverse_op_tree(pTHX_ OP *top, OP *o);
# define PERL_ARGS_ASSERT_TRAVERSE_OP_TREE      \
        assert(top); assert(o)

#endif /* defined(PERL_IN_PEEP_C) */
#if defined(PERL_IN_PERL_C)
STATIC void
S_find_beginning(pTHX_ SV *linestr_sv, PerlIO *rsfp);
# define PERL_ARGS_ASSERT_FIND_BEGINNING        \
        assert(linestr_sv); assert(rsfp)

STATIC void
S_forbid_setid(pTHX_ const char flag, const bool suidscript);
# define PERL_ARGS_ASSERT_FORBID_SETID

STATIC void
S_incpush(pTHX_ const char * const dir, STRLEN len, U32 flags);
# define PERL_ARGS_ASSERT_INCPUSH               \
        assert(dir)

STATIC void
S_incpush_use_sep(pTHX_ const char *p, STRLEN len, U32 flags);
# define PERL_ARGS_ASSERT_INCPUSH_USE_SEP       \
        assert(p)

STATIC void
S_init_ids(pTHX);
# define PERL_ARGS_ASSERT_INIT_IDS

STATIC void
S_init_interp(pTHX);
# define PERL_ARGS_ASSERT_INIT_INTERP

STATIC void
S_init_main_stash(pTHX);
# define PERL_ARGS_ASSERT_INIT_MAIN_STASH

STATIC void
S_init_perllib(pTHX);
# define PERL_ARGS_ASSERT_INIT_PERLLIB

STATIC void
S_init_postdump_symbols(pTHX_ int argc, char **argv, char **env);
# define PERL_ARGS_ASSERT_INIT_POSTDUMP_SYMBOLS \
        assert(argv)

STATIC void
S_init_predump_symbols(pTHX);
# define PERL_ARGS_ASSERT_INIT_PREDUMP_SYMBOLS

STATIC SV *
S_mayberelocate(pTHX_ const char * const dir, STRLEN len, U32 flags);
# define PERL_ARGS_ASSERT_MAYBERELOCATE         \
        assert(dir)

PERL_STATIC_NO_RET void
S_minus_v(pTHX)
        __attribute__noreturn__;
# define PERL_ARGS_ASSERT_MINUS_V

PERL_STATIC_NO_RET void
S_my_exit_jump(pTHX)
        __attribute__noreturn__;
# define PERL_ARGS_ASSERT_MY_EXIT_JUMP

STATIC void
S_nuke_stacks(pTHX);
# define PERL_ARGS_ASSERT_NUKE_STACKS

STATIC PerlIO *
S_open_script(pTHX_ const char *scriptname, bool dosearch, bool *suidscript);
# define PERL_ARGS_ASSERT_OPEN_SCRIPT           \
        assert(scriptname); assert(suidscript)

STATIC void *
S_parse_body(pTHX_ char **env, XSINIT_t xsinit);
# define PERL_ARGS_ASSERT_PARSE_BODY

PERL_STATIC_NO_RET void
S_run_body(pTHX_ I32 oldscope)
        __attribute__noreturn__;
# define PERL_ARGS_ASSERT_RUN_BODY

PERL_STATIC_NO_RET void
S_usage(pTHX)
        __attribute__noreturn__;
# define PERL_ARGS_ASSERT_USAGE

# if !defined(PERL_IS_MINIPERL)
STATIC SV *
S_incpush_if_exists(pTHX_ AV * const av, SV *dir, SV * const stem);
#   define PERL_ARGS_ASSERT_INCPUSH_IF_EXISTS   \
        assert(av); assert(dir); assert(stem)

# endif
# if !defined(SETUID_SCRIPTS_ARE_SECURE_NOW)
STATIC void
S_validate_suid(pTHX_ PerlIO *rsfp);
#   define PERL_ARGS_ASSERT_VALIDATE_SUID       \
        assert(rsfp)

# endif
#endif /* defined(PERL_IN_PERL_C) */
#if defined(PERL_IN_PERL_C) || defined(PERL_IN_REGCOMP_ANY) || \
    defined(PERL_IN_UTF8_C)
PERL_CALLCONV bool
Perl__invlistEQ(pTHX_ SV * const a, SV * const b, const bool complement_b);
# define PERL_ARGS_ASSERT__INVLISTEQ            \
        assert(a); assert(b)

PERL_CALLCONV SV *
Perl__new_invlist_C_array(pTHX_ const UV * const list)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT__NEW_INVLIST_C_ARRAY  \
        assert(list)

#endif /* defined(PERL_IN_PERL_C) || defined(PERL_IN_REGCOMP_ANY) ||
          defined(PERL_IN_UTF8_C) */
#if defined(PERL_IN_PP_C)
STATIC size_t
S_do_chomp(pTHX_ SV *retval, SV *sv, bool chomping);
# define PERL_ARGS_ASSERT_DO_CHOMP              \
        assert(retval); assert(sv)

STATIC OP *
S_do_delete_local(pTHX);
# define PERL_ARGS_ASSERT_DO_DELETE_LOCAL

STATIC SV *
S_refto(pTHX_ SV *sv)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_REFTO                 \
        assert(sv)

#endif /* defined(PERL_IN_PP_C) */
#if defined(PERL_IN_PP_C) || defined(PERL_IN_PP_HOT_C)

PERL_CALLCONV GV *
Perl_softref2xv(pTHX_ SV * const sv, const char * const what, const svtype type)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SOFTREF2XV            \
        assert(sv); assert(what)

#endif
#if defined(PERL_IN_PP_C) || defined(PERL_IN_UTF8_C)
PERL_CALLCONV UV
Perl__to_upper_title_latin1(pTHX_ const U8 c, U8 *p, STRLEN *lenp, const char S_or_s)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT__TO_UPPER_TITLE_LATIN1 \
        assert(p); assert(lenp)

#endif
#if defined(PERL_IN_PP_CTL_C)
STATIC PerlIO *
S_check_type_and_open(pTHX_ SV *name)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_CHECK_TYPE_AND_OPEN   \
        assert(name)

STATIC void
S_destroy_matcher(pTHX_ PMOP *matcher);
# define PERL_ARGS_ASSERT_DESTROY_MATCHER       \
        assert(matcher)

STATIC OP *
S_do_smartmatch(pTHX_ HV *seen_this, HV *seen_other, const bool copied);
# define PERL_ARGS_ASSERT_DO_SMARTMATCH

STATIC OP *
S_docatch(pTHX_ Perl_ppaddr_t firstpp)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_DOCATCH

STATIC bool
S_doeval_compile(pTHX_ U8 gimme, CV *outside, U32 seq, HV *hh);
# define PERL_ARGS_ASSERT_DOEVAL_COMPILE

STATIC OP *
S_dofindlabel(pTHX_ OP *o, const char *label, STRLEN len, U32 flags, OP **opstack, OP **oplimit)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_DOFINDLABEL           \
        assert(o); assert(label); assert(opstack); assert(oplimit)

STATIC MAGIC *
S_doparseform(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_DOPARSEFORM           \
        assert(sv)

STATIC I32
S_dopoptoeval(pTHX_ I32 startingblock)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_DOPOPTOEVAL

STATIC I32
S_dopoptogivenfor(pTHX_ I32 startingblock)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_DOPOPTOGIVENFOR

STATIC I32
S_dopoptolabel(pTHX_ const char *label, STRLEN len, U32 flags)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_DOPOPTOLABEL          \
        assert(label)

STATIC I32
S_dopoptoloop(pTHX_ I32 startingblock)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_DOPOPTOLOOP

STATIC I32
S_dopoptosub_at(pTHX_ const PERL_CONTEXT *cxstk, I32 startingblock)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_DOPOPTOSUB_AT         \
        assert(cxstk)

STATIC I32
S_dopoptowhen(pTHX_ I32 startingblock)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_DOPOPTOWHEN

STATIC PMOP *
S_make_matcher(pTHX_ REGEXP *re)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_MAKE_MATCHER          \
        assert(re)

STATIC bool
S_matcher_matches_sv(pTHX_ PMOP *matcher, SV *sv)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_MATCHER_MATCHES_SV    \
        assert(matcher); assert(sv)

STATIC bool
S_num_overflow(NV value, I32 fldsize, I32 frcsize)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_NUM_OVERFLOW

STATIC I32
S_run_user_filter(pTHX_ int idx, SV *buf_sv, int maxlen)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_RUN_USER_FILTER       \
        assert(buf_sv)

STATIC void
S_rxres_free(pTHX_ void **rsp);
# define PERL_ARGS_ASSERT_RXRES_FREE            \
        assert(rsp)

STATIC void
S_rxres_restore(pTHX_ void **rsp, REGEXP *rx);
# define PERL_ARGS_ASSERT_RXRES_RESTORE         \
        assert(rsp); assert(rx)

STATIC void
S_save_lines(pTHX_ AV *array, SV *sv);
# define PERL_ARGS_ASSERT_SAVE_LINES            \
        assert(sv)

# if !defined(PERL_DISABLE_PMC)
STATIC PerlIO *
S_doopen_pm(pTHX_ SV *name)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_DOOPEN_PM           \
        assert(name)

# endif
# if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE bool
S_path_is_searchable(const char *name)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_PATH_IS_SEARCHABLE  \
        assert(name)

# endif
#endif /* defined(PERL_IN_PP_CTL_C) */
#if defined(PERL_IN_PP_CTL_C) || defined(PERL_IN_UTIL_C)
PERL_CALLCONV bool
Perl_invoke_exception_hook(pTHX_ SV *ex, bool warn)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_INVOKE_EXCEPTION_HOOK

#endif
#if defined(PERL_IN_PP_HOT_C)
STATIC void
S_do_oddball(pTHX_ SV **oddkey, SV **firstkey);
# define PERL_ARGS_ASSERT_DO_ODDBALL            \
        assert(oddkey); assert(firstkey)

# if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE HV *
S_opmethod_stash(pTHX_ SV *meth);
#   define PERL_ARGS_ASSERT_OPMETHOD_STASH      \
        assert(meth)

PERL_STATIC_FORCE_INLINE bool
S_should_we_output_Debug_r(pTHX_ regexp *prog)
        __attribute__warn_unused_result__
        __attribute__always_inline__;
#   define PERL_ARGS_ASSERT_SHOULD_WE_OUTPUT_DEBUG_R \
        assert(prog)

# endif /* !defined(PERL_NO_INLINE_FUNCTIONS) */
#endif /* defined(PERL_IN_PP_HOT_C) */
#if defined(PERL_IN_PP_PACK_C)
STATIC int
S_div128(pTHX_ SV *pnum, bool *done);
# define PERL_ARGS_ASSERT_DIV128                \
        assert(pnum); assert(done)

STATIC char
S_first_symbol(const char *pat, const char *patend);
# define PERL_ARGS_ASSERT_FIRST_SYMBOL          \
        assert(pat); assert(patend)

STATIC const char *
S_get_num(pTHX_ const char *patptr, SSize_t *lenptr)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_GET_NUM               \
        assert(patptr); assert(lenptr)

STATIC const char *
S_group_end(pTHX_ const char *patptr, const char *patend, char ender);
# define PERL_ARGS_ASSERT_GROUP_END             \
        assert(patptr); assert(patend)

STATIC SV *
S_is_an_int(pTHX_ const char *s, STRLEN l)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_IS_AN_INT             \
        assert(s)

STATIC SSize_t
S_measure_struct(pTHX_ struct tempsym *symptr);
# define PERL_ARGS_ASSERT_MEASURE_STRUCT        \
        assert(symptr)

STATIC SV *
S_mul128(pTHX_ SV *sv, U8 m);
# define PERL_ARGS_ASSERT_MUL128                \
        assert(sv)

STATIC char *
S_my_bytes_to_utf8(const U8 *start, STRLEN len, char *dest, const bool needs_swap)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_MY_BYTES_TO_UTF8      \
        assert(start); assert(dest)

STATIC bool
S_need_utf8(const char *pat, const char *patend);
# define PERL_ARGS_ASSERT_NEED_UTF8             \
        assert(pat); assert(patend)

STATIC bool
S_next_symbol(pTHX_ struct tempsym *symptr);
# define PERL_ARGS_ASSERT_NEXT_SYMBOL           \
        assert(symptr)

STATIC SV **
S_pack_rec(pTHX_ SV *cat, struct tempsym *symptr, SV **beglist, SV **endlist);
# define PERL_ARGS_ASSERT_PACK_REC              \
        assert(cat); assert(symptr); assert(beglist); assert(endlist)

STATIC char *
S_sv_exp_grow(pTHX_ SV *sv, STRLEN needed)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SV_EXP_GROW           \
        assert(sv)

STATIC SSize_t
S_unpack_rec(pTHX_ struct tempsym *symptr, const char *s, const char *strbeg, const char *strend, const char **new_s);
# define PERL_ARGS_ASSERT_UNPACK_REC            \
        assert(symptr); assert(s); assert(strbeg); assert(strend)

#endif /* defined(PERL_IN_PP_PACK_C) */
#if defined(PERL_IN_PP_SORT_C)
STATIC I32
S_sortcv(pTHX_ SV * const a, SV * const b);
# define PERL_ARGS_ASSERT_SORTCV                \
        assert(a); assert(b)

STATIC I32
S_sortcv_stacked(pTHX_ SV * const a, SV * const b);
# define PERL_ARGS_ASSERT_SORTCV_STACKED        \
        assert(a); assert(b)

STATIC I32
S_sortcv_xsub(pTHX_ SV * const a, SV * const b);
# define PERL_ARGS_ASSERT_SORTCV_XSUB           \
        assert(a); assert(b)

# if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE I32
S_amagic_cmp(pTHX_ SV * const str1, SV * const str2);
#   define PERL_ARGS_ASSERT_AMAGIC_CMP          \
        assert(str1); assert(str2)

PERL_STATIC_INLINE I32
S_amagic_cmp_desc(pTHX_ SV * const str1, SV * const str2);
#   define PERL_ARGS_ASSERT_AMAGIC_CMP_DESC     \
        assert(str1); assert(str2)

PERL_STATIC_INLINE I32
S_amagic_i_ncmp(pTHX_ SV * const a, SV * const b);
#   define PERL_ARGS_ASSERT_AMAGIC_I_NCMP       \
        assert(a); assert(b)

PERL_STATIC_INLINE I32
S_amagic_i_ncmp_desc(pTHX_ SV * const a, SV * const b);
#   define PERL_ARGS_ASSERT_AMAGIC_I_NCMP_DESC  \
        assert(a); assert(b)

PERL_STATIC_INLINE I32
S_amagic_ncmp(pTHX_ SV * const a, SV * const b);
#   define PERL_ARGS_ASSERT_AMAGIC_NCMP         \
        assert(a); assert(b)

PERL_STATIC_INLINE I32
S_amagic_ncmp_desc(pTHX_ SV * const a, SV * const b);
#   define PERL_ARGS_ASSERT_AMAGIC_NCMP_DESC    \
        assert(a); assert(b)

PERL_STATIC_INLINE I32
S_cmp_desc(pTHX_ SV * const str1, SV * const str2);
#   define PERL_ARGS_ASSERT_CMP_DESC            \
        assert(str1); assert(str2)

PERL_STATIC_FORCE_INLINE void
S_sortsv_flags_impl(pTHX_ SV **array, size_t num_elts, SVCOMPARE_t cmp, U32 flags)
        __attribute__always_inline__;
#   define PERL_ARGS_ASSERT_SORTSV_FLAGS_IMPL   \
        assert(cmp)

PERL_STATIC_INLINE I32
S_sv_i_ncmp(pTHX_ SV * const a, SV * const b);
#   define PERL_ARGS_ASSERT_SV_I_NCMP           \
        assert(a); assert(b)

PERL_STATIC_INLINE I32
S_sv_i_ncmp_desc(pTHX_ SV * const a, SV * const b);
#   define PERL_ARGS_ASSERT_SV_I_NCMP_DESC      \
        assert(a); assert(b)

PERL_STATIC_INLINE I32
S_sv_ncmp(pTHX_ SV * const a, SV * const b);
#   define PERL_ARGS_ASSERT_SV_NCMP             \
        assert(a); assert(b)

PERL_STATIC_INLINE I32
S_sv_ncmp_desc(pTHX_ SV * const a, SV * const b);
#   define PERL_ARGS_ASSERT_SV_NCMP_DESC        \
        assert(a); assert(b)

#   if defined(USE_LOCALE_COLLATE)
PERL_STATIC_INLINE I32
S_amagic_cmp_locale(pTHX_ SV * const str1, SV * const str2);
#     define PERL_ARGS_ASSERT_AMAGIC_CMP_LOCALE \
        assert(str1); assert(str2)

PERL_STATIC_INLINE I32
S_amagic_cmp_locale_desc(pTHX_ SV * const str1, SV * const str2);
#     define PERL_ARGS_ASSERT_AMAGIC_CMP_LOCALE_DESC \
        assert(str1); assert(str2)

PERL_STATIC_INLINE I32
S_cmp_locale_desc(pTHX_ SV * const str1, SV * const str2);
#     define PERL_ARGS_ASSERT_CMP_LOCALE_DESC   \
        assert(str1); assert(str2)

#   endif /* defined(USE_LOCALE_COLLATE) */
# endif /* !defined(PERL_NO_INLINE_FUNCTIONS) */
#endif /* defined(PERL_IN_PP_SORT_C) */
#if defined(PERL_IN_PP_SYS_C)
STATIC OP *
S_doform(pTHX_ CV *cv, GV *gv, OP *retop);
# define PERL_ARGS_ASSERT_DOFORM                \
        assert(cv); assert(gv)

STATIC SV *
S_space_join_names_mortal(pTHX_ char * const *array);
# define PERL_ARGS_ASSERT_SPACE_JOIN_NAMES_MORTAL

# if !defined(HAS_MKDIR) || !defined(HAS_RMDIR)
STATIC int
S_dooneliner(pTHX_ const char *cmd, const char *filename)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_DOONELINER          \
        assert(cmd); assert(filename)

# endif
#endif /* defined(PERL_IN_PP_SYS_C) */
#if defined(PERL_IN_REGCOMP_ANY)
PERL_CALLCONV void
Perl_add_above_Latin1_folds(pTHX_ RExC_state_t *pRExC_state, const U8 cp, SV **invlist)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_ADD_ABOVE_LATIN1_FOLDS \
        assert(pRExC_state); assert(invlist)

PERL_CALLCONV regnode *
Perl_construct_ahocorasick_from_trie(pTHX_ RExC_state_t *pRExC_state, regnode *source, U32 depth)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_CONSTRUCT_AHOCORASICK_FROM_TRIE \
        assert(pRExC_state); assert(source)

PERL_CALLCONV SV *
Perl_get_ANYOFHbbm_contents(pTHX_ const regnode *n)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_GET_ANYOFHBBM_CONTENTS \
        assert(n)

PERL_CALLCONV SV *
Perl_get_ANYOFM_contents(pTHX_ const regnode *n)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_GET_ANYOFM_CONTENTS   \
        assert(n)

PERL_CALLCONV U32
Perl_join_exact(pTHX_ RExC_state_t *pRExC_state, regnode *scan, UV *min_subtract, bool *unfolded_multi_char, U32 flags, regnode *val, U32 depth)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_JOIN_EXACT            \
        assert(pRExC_state); assert(scan); assert(min_subtract); assert(unfolded_multi_char)

PERL_CALLCONV I32
Perl_make_trie(pTHX_ RExC_state_t *pRExC_state, regnode *startbranch, regnode *first, regnode *last, regnode *tail, U32 word_count, U32 flags, U32 depth)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_MAKE_TRIE             \
        assert(pRExC_state); assert(startbranch); assert(first); assert(last); \
        assert(tail)

PERL_CALLCONV void
Perl_populate_anyof_bitmap_from_invlist(pTHX_ regnode *node, SV **invlist_ptr)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_POPULATE_ANYOF_BITMAP_FROM_INVLIST \
        assert(node); assert(invlist_ptr)

PERL_CALLCONV U32
Perl_reg_add_data(RExC_state_t * const pRExC_state, const char * const s, const U32 n)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_REG_ADD_DATA          \
        assert(pRExC_state); assert(s)

PERL_CALLCONV void
Perl_scan_commit(pTHX_ const RExC_state_t *pRExC_state, struct scan_data_t *data, SSize_t *minlenp, int is_inf)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_SCAN_COMMIT           \
        assert(pRExC_state); assert(data); assert(minlenp)

PERL_CALLCONV void
Perl_set_ANYOF_arg(pTHX_ RExC_state_t * const pRExC_state, regnode * const node, SV * const cp_list, SV * const runtime_defns, SV * const only_utf8_locale_list)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_SET_ANYOF_ARG         \
        assert(pRExC_state); assert(node)

PERL_CALLCONV void
Perl_ssc_init(pTHX_ const RExC_state_t *pRExC_state, regnode_ssc *ssc)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_SSC_INIT              \
        assert(pRExC_state); assert(ssc)

PERL_CALLCONV SSize_t
Perl_study_chunk(pTHX_ RExC_state_t *pRExC_state, regnode **scanp, SSize_t *minlenp, SSize_t *deltap, regnode *last, struct scan_data_t *data, I32 stopparen, U32 recursed_depth, regnode_ssc *and_withp, U32 flags, U32 depth, bool was_mutate_ok)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_STUDY_CHUNK           \
        assert(pRExC_state); assert(scanp); assert(minlenp); assert(deltap); \
        assert(last)

# if defined(PERL_IN_REGCOMP_TRIE_C) && defined(DEBUGGING)
STATIC void
S_dump_trie(pTHX_ const struct _reg_trie_data *trie, HV *widecharmap, AV *revcharmap, U32 depth);
#   define PERL_ARGS_ASSERT_DUMP_TRIE           \
        assert(trie); assert(revcharmap)

STATIC void
S_dump_trie_interim_list(pTHX_ const struct _reg_trie_data *trie, HV *widecharmap, AV *revcharmap, U32 next_alloc, U32 depth);
#   define PERL_ARGS_ASSERT_DUMP_TRIE_INTERIM_LIST \
        assert(trie); assert(revcharmap)

STATIC void
S_dump_trie_interim_table(pTHX_ const struct _reg_trie_data *trie, HV *widecharmap, AV *revcharmap, U32 next_alloc, U32 depth);
#   define PERL_ARGS_ASSERT_DUMP_TRIE_INTERIM_TABLE \
        assert(trie); assert(revcharmap)

# endif /* defined(PERL_IN_REGCOMP_TRIE_C) && defined(DEBUGGING) */
# if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE SV *
S_invlist_contents(pTHX_ SV * const invlist, const bool traditional_style)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_INVLIST_CONTENTS    \
        assert(invlist)

PERL_STATIC_INLINE UV
S_invlist_highest_range_start(SV * const invlist)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_INVLIST_HIGHEST_RANGE_START \
        assert(invlist)

PERL_STATIC_INLINE bool
S_invlist_is_iterating(const SV * const invlist)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_INVLIST_IS_ITERATING \
        assert(invlist)

PERL_STATIC_INLINE UV
S_invlist_lowest(SV * const invlist)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_INVLIST_LOWEST      \
        assert(invlist)

# endif /* !defined(PERL_NO_INLINE_FUNCTIONS) */
#endif /* defined(PERL_IN_REGCOMP_ANY) */
#if defined(PERL_IN_REGCOMP_ANY) || defined(PERL_IN_SV_C)
PERL_CALLCONV SV *
Perl_invlist_clone(pTHX_ SV * const invlist, SV *newlist);
# define PERL_ARGS_ASSERT_INVLIST_CLONE         \
        assert(invlist)

#endif
#if defined(PERL_IN_REGCOMP_C)
STATIC AV *
S_add_multi_match(pTHX_ AV *multi_char_matches, SV *multi_string, const STRLEN cp_count);
# define PERL_ARGS_ASSERT_ADD_MULTI_MATCH       \
        assert(multi_string)

STATIC void
S_change_engine_size(pTHX_ RExC_state_t *pRExC_state, const Ptrdiff_t size);
# define PERL_ARGS_ASSERT_CHANGE_ENGINE_SIZE    \
        assert(pRExC_state)

STATIC REGEXP *
S_compile_wildcard(pTHX_ const char *subpattern, const STRLEN len, const bool ignore_case)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_COMPILE_WILDCARD      \
        assert(subpattern)

STATIC U8
S_compute_EXACTish(RExC_state_t *pRExC_state);
# define PERL_ARGS_ASSERT_COMPUTE_EXACTISH      \
        assert(pRExC_state)

STATIC int
S_edit_distance(const UV *src, const UV *tgt, const STRLEN x, const STRLEN y, const SSize_t maxDistance)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_EDIT_DISTANCE         \
        assert(src); assert(tgt)

STATIC I32
S_execute_wildcard(pTHX_ REGEXP * const prog, char *stringarg, char *strend, char *strbeg, SSize_t minend, SV *screamer, U32 nosave);
# define PERL_ARGS_ASSERT_EXECUTE_WILDCARD      \
        assert(prog); assert(stringarg); assert(strend); assert(strbeg); \
        assert(screamer)

STATIC U32
S_get_quantifier_value(pTHX_ RExC_state_t *pRExC_state, const char *start, const char *end);
# define PERL_ARGS_ASSERT_GET_QUANTIFIER_VALUE  \
        assert(pRExC_state); assert(start); assert(end)

STATIC bool
S_grok_bslash_N(pTHX_ RExC_state_t *pRExC_state, regnode_offset *nodep, UV *code_point_p, int *cp_count, I32 *flagp, const bool strict, const U32 depth);
# define PERL_ARGS_ASSERT_GROK_BSLASH_N         \
        assert(pRExC_state); assert(flagp)

STATIC regnode_offset
S_handle_named_backref(pTHX_ RExC_state_t *pRExC_state, I32 *flagp, char *backref_parse_start, char ch);
# define PERL_ARGS_ASSERT_HANDLE_NAMED_BACKREF  \
        assert(pRExC_state); assert(flagp); assert(backref_parse_start)

STATIC bool
S_handle_names_wildcard(pTHX_ const char *wname, const STRLEN wname_len, SV **prop_definition, AV **strings);
# define PERL_ARGS_ASSERT_HANDLE_NAMES_WILDCARD \
        assert(wname); assert(prop_definition); assert(strings)

STATIC int
S_handle_possible_posix(pTHX_ RExC_state_t *pRExC_state, const char * const s, char **updated_parse_ptr, AV **posix_warnings, const bool check_only);
# define PERL_ARGS_ASSERT_HANDLE_POSSIBLE_POSIX \
        assert(pRExC_state); assert(s)

STATIC regnode_offset
S_handle_regex_sets(pTHX_ RExC_state_t *pRExC_state, SV **return_invlist, I32 *flagp, U32 depth);
# define PERL_ARGS_ASSERT_HANDLE_REGEX_SETS     \
        assert(pRExC_state); assert(flagp)

STATIC SV *
S_handle_user_defined_property(pTHX_ const char *name, const STRLEN name_len, const bool is_utf8, const bool to_fold, const bool runtime, const bool deferrable, SV *contents, bool *user_defined_ptr, SV *msg, const STRLEN level);
# define PERL_ARGS_ASSERT_HANDLE_USER_DEFINED_PROPERTY \
        assert(name); assert(contents); assert(user_defined_ptr); assert(msg)

STATIC bool
S_is_ssc_worth_it(const RExC_state_t *pRExC_state, const regnode_ssc *ssc);
# define PERL_ARGS_ASSERT_IS_SSC_WORTH_IT       \
        assert(pRExC_state); assert(ssc)

STATIC void
S_nextchar(pTHX_ RExC_state_t *pRExC_state);
# define PERL_ARGS_ASSERT_NEXTCHAR              \
        assert(pRExC_state)

STATIC U8
S_optimize_regclass(pTHX_ RExC_state_t *pRExC_state, SV *cp_list, SV *only_utf8_locale_list, SV *upper_latin1_only_utf8_matches, const U32 has_runtime_dependency, const U32 posixl, U8 *anyof_flags, bool *invert, regnode_offset *ret, I32 *flagp);
# define PERL_ARGS_ASSERT_OPTIMIZE_REGCLASS     \
        assert(pRExC_state); assert(anyof_flags); assert(invert); assert(ret); \
        assert(flagp)

STATIC void
S_output_posix_warnings(pTHX_ RExC_state_t *pRExC_state, AV *posix_warnings);
# define PERL_ARGS_ASSERT_OUTPUT_POSIX_WARNINGS \
        assert(pRExC_state); assert(posix_warnings)

STATIC void
S_parse_lparen_question_flags(pTHX_ RExC_state_t *pRExC_state);
# define PERL_ARGS_ASSERT_PARSE_LPAREN_QUESTION_FLAGS \
        assert(pRExC_state)

STATIC SV *
S_parse_uniprop_string(pTHX_ const char * const name, Size_t name_len, const bool is_utf8, const bool to_fold, const bool runtime, const bool deferrable, AV **strings, bool *user_defined_ptr, SV *msg, const STRLEN level);
# define PERL_ARGS_ASSERT_PARSE_UNIPROP_STRING  \
        assert(name); assert(user_defined_ptr); assert(msg)

PERL_STATIC_NO_RET void
S_re_croak(pTHX_ bool utf8, const char *pat, ...)
        __attribute__noreturn__
        __attribute__format__(__printf__,pTHX_2,pTHX_3);
# define PERL_ARGS_ASSERT_RE_CROAK              \
