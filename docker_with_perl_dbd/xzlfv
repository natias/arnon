extension to UTF-8 to express, which Perl does.  It is likely that programs
written in something other than Perl would not be able to read files that
contain these; nor would Perl understand files written by something that uses a
different extension.  For these reasons, there is a separate set of flags that
can warn and/or disallow these extremely high code points, even if other
above-Unicode ones are accepted.  They are the C<UTF8_WARN_PERL_EXTENDED> and
C<UTF8_DISALLOW_PERL_EXTENDED> flags.  For more information see
C<L</UTF8_GOT_PERL_EXTENDED>>.  Of course C<UTF8_DISALLOW_SUPER> will treat all
above-Unicode code points, including these, as malformations.
(Note that the Unicode standard considers anything above 0x10FFFF to be
illegal, but there are standards predating it that allow up to 0x7FFF_FFFF
(2**31 -1))

A somewhat misleadingly named synonym for C<UTF8_WARN_PERL_EXTENDED> is
retained for backward compatibility: C<UTF8_WARN_ABOVE_31_BIT>.  Similarly,
C<UTF8_DISALLOW_ABOVE_31_BIT> is usable instead of the more accurately named
C<UTF8_DISALLOW_PERL_EXTENDED>.  The names are misleading because these flags
can apply to code points that actually do fit in 31 bits.  This happens on
EBCDIC platforms, and sometimes when the L<overlong
malformation|/C<UTF8_GOT_LONG>> is also present.  The new names accurately
describe the situation in all cases.


All other code points corresponding to Unicode characters, including private
use and those yet to be assigned, are never considered malformed and never
warn.

=over 3

 UV  utf8n_to_uvchr(const U8 *s, STRLEN curlen, STRLEN *retlen,
                    const U32 flags)

=back

=back

=for hackers
Found in file utf8.c

=over 4

=item C<utf8n_to_uvchr_error>
X<utf8n_to_uvchr_error>

THIS FUNCTION SHOULD BE USED IN ONLY VERY SPECIALIZED CIRCUMSTANCES.
Most code should use L</utf8_to_uvchr_buf>() rather than call this
directly.

This function is for code that needs to know what the precise malformation(s)
are when an error is found.  If you also need to know the generated warning
messages, use L</utf8n_to_uvchr_msgs>() instead.

It is like C<L</utf8n_to_uvchr>> but it takes an extra parameter placed after
all the others, C<errors>.  If this parameter is 0, this function behaves
identically to C<L</utf8n_to_uvchr>>.  Otherwise, C<errors> should be a pointer
to a C<U32> variable, which this function sets to indicate any errors found.
Upon return, if C<*errors> is 0, there were no errors found.  Otherwise,
C<*errors> is the bit-wise C<OR> of the bits described in the list below.  Some
of these bits will be set if a malformation is found, even if the input
C<flags> parameter indicates that the given malformation is allowed; those
exceptions are noted:

=over 4

=item C<UTF8_GOT_PERL_EXTENDED>

The input sequence is not standard UTF-8, but a Perl extension.  This bit is
set only if the input C<flags> parameter contains either the
C<UTF8_DISALLOW_PERL_EXTENDED> or the C<UTF8_WARN_PERL_EXTENDED> flags.

Code points above 0x7FFF_FFFF (2**31 - 1) were never specified in any standard,
and so some extension must be used to express them.  Perl uses a natural
extension to UTF-8 to represent the ones up to 2**36-1, and invented a further
extension to represent even higher ones, so that any code point that fits in a
64-bit word can be represented.  Text using these extensions is not likely to
be portable to non-Perl code.  We lump both of these extensions together and
refer to them as Perl extended UTF-8.  There exist other extensions that people
have invented, incompatible with Perl's.

On EBCDIC platforms starting in Perl v5.24, the Perl extension for representing
extremely high code points kicks in at 0x3FFF_FFFF (2**30 -1), which is lower
than on ASCII.  Prior to that, code points 2**31 and higher were simply
unrepresentable, and a different, incompatible method was used to represent
code points between 2**30 and 2**31 - 1.

On both platforms, ASCII and EBCDIC, C<UTF8_GOT_PERL_EXTENDED> is set if
Perl extended UTF-8 is used.

In earlier Perls, this bit was named C<UTF8_GOT_ABOVE_31_BIT>, which you still
may use for backward compatibility.  That name is misleading, as this flag may
be set when the code point actually does fit in 31 bits.  This happens on
EBCDIC platforms, and sometimes when the L<overlong
malformation|/C<UTF8_GOT_LONG>> is also present.  The new name accurately
describes the situation in all cases.

=item C<UTF8_GOT_CONTINUATION>

The input sequence was malformed in that the first byte was a UTF-8
continuation byte.

=item C<UTF8_GOT_EMPTY>

The input C<curlen> parameter was 0.

=item C<UTF8_GOT_LONG>

The input sequence was malformed in that there is some other sequence that
evaluates to the same code point, but that sequence is shorter than this one.

Until Unicode 3.1, it was legal for programs to accept this malformation, but
it was discovered that this created security issues.

=item C<UTF8_GOT_NONCHAR>

The code point represented by the input UTF-8 sequence is for a Unicode
non-character code point.
This bit is set only if the input C<flags> parameter contains either the
C<UTF8_DISALLOW_NONCHAR> or the C<UTF8_WARN_NONCHAR> flags.

=item C<UTF8_GOT_NON_CONTINUATION>

The input sequence was malformed in that a non-continuation type byte was found
in a position where only a continuation type one should be.  See also
C<L</UTF8_GOT_SHORT>>.

=item C<UTF8_GOT_OVERFLOW>

The input sequence was malformed in that it is for a code point that is not
representable in the number of bits available in an IV on the current platform.

=item C<UTF8_GOT_SHORT>

The input sequence was malformed in that C<curlen> is smaller than required for
a complete sequence.  In other words, the input is for a partial character
sequence.


C<UTF8_GOT_SHORT> and C<UTF8_GOT_NON_CONTINUATION> both indicate a too short
sequence.  The difference is that C<UTF8_GOT_NON_CONTINUATION> indicates always
that there is an error, while C<UTF8_GOT_SHORT> means that an incomplete
sequence was looked at.   If no other flags are present, it means that the
sequence was valid as far as it went.  Depending on the application, this could
mean one of three things:

=over

=item *

The C<curlen> length parameter passed in was too small, and the function was
prevented from examining all the necessary bytes.

=item *

The buffer being looked at is based on reading data, and the data received so
far stopped in the middle of a character, so that the next read will
read the remainder of this character.  (It is up to the caller to deal with the
split bytes somehow.)

=item *

This is a real error, and the partial sequence is all we're going to get.

=back

=item C<UTF8_GOT_SUPER>

The input sequence was malformed in that it is for a non-Unicode code point;
that is, one above the legal Unicode maximum.
This bit is set only if the input C<flags> parameter contains either the
C<UTF8_DISALLOW_SUPER> or the C<UTF8_WARN_SUPER> flags.

=item C<UTF8_GOT_SURROGATE>

The input sequence was malformed in that it is for a -Unicode UTF-16 surrogate
code point.
This bit is set only if the input C<flags> parameter contains either the
C<UTF8_DISALLOW_SURROGATE> or the C<UTF8_WARN_SURROGATE> flags.

=back

To do your own error handling, call this function with the C<UTF8_CHECK_ONLY>
flag to suppress any warnings, and then examine the C<*errors> return.

=over 3

 UV  utf8n_to_uvchr_error(const U8 *s, STRLEN curlen,
                          STRLEN *retlen, const U32 flags,
                          U32 *errors)

=back

=back

=for hackers
Found in file utf8.c

=over 4

=item C<utf8n_to_uvchr_msgs>
X<utf8n_to_uvchr_msgs>

THIS FUNCTION SHOULD BE USED IN ONLY VERY SPECIALIZED CIRCUMSTANCES.
Most code should use L</utf8_to_uvchr_buf>() rather than call this
directly.

This function is for code that needs to know what the precise malformation(s)
are when an error is found, and wants the corresponding warning and/or error
messages to be returned to the caller rather than be displayed.  All messages
that would have been displayed if all lexical warnings are enabled will be
returned.

It is just like C<L</utf8n_to_uvchr_error>> but it takes an extra parameter
placed after all the others, C<msgs>.  If this parameter is 0, this function
behaves identically to C<L</utf8n_to_uvchr_error>>.  Otherwise, C<msgs> should
be a pointer to an C<AV *> variable, in which this function creates a new AV to
contain any appropriate messages.  The elements of the array are ordered so
that the first message that would have been displayed is in the 0th element,
and so on.  Each element is a hash with three key-value pairs, as follows:

=over 4

=item C<text>

The text of the message as a C<SVpv>.

=item C<warn_categories>

The warning category (or categories) packed into a C<SVuv>.

=item C<flag>

A single flag bit associated with this message, in a C<SVuv>.
The bit corresponds to some bit in the C<*errors> return value,
such as C<UTF8_GOT_LONG>.

=back

It's important to note that specifying this parameter as non-null will cause
any warnings this function would otherwise generate to be suppressed, and
instead be placed in C<*msgs>.  The caller can check the lexical warnings state
(or not) when choosing what to do with the returned messages.

If the flag C<UTF8_CHECK_ONLY> is passed, no warnings are generated, and hence
no AV is created.

The caller, of course, is responsible for freeing any returned AV.

=over 3

 UV  utf8n_to_uvchr_msgs(const U8 *s, STRLEN curlen,
                         STRLEN *retlen, const U32 flags,
                         U32 *errors, AV **msgs)

=back

=back

=for hackers
Found in file utf8.c

=over 4

=item C<UTF8_SAFE_SKIP>
X<UTF8_SAFE_SKIP>

returns 0 if S<C<s E<gt>= e>>; otherwise returns the number of bytes in the
UTF-8 encoded character whose first  byte is pointed to by C<s>.  But it never
returns beyond C<e>.  On DEBUGGING builds, it asserts that S<C<s E<lt>= e>>.

=over 3

 STRLEN  UTF8_SAFE_SKIP(char* s, char* e)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<UTF8SKIP>
X<UTF8SKIP>

returns the number of bytes a non-malformed UTF-8 encoded character whose first
(perhaps only) byte is pointed to by C<s>.

If there is a possibility of malformed input, use instead:

=over

=item C<L</UTF8_SAFE_SKIP>> if you know the maximum ending pointer in the
buffer pointed to by C<s>; or

=item C<L</UTF8_CHK_SKIP>> if you don't know it.

=back

It is better to restructure your code so the end pointer is passed down so that
you know what it actually is at the point of this call, but if that isn't
possible, C<L</UTF8_CHK_SKIP>> can minimize the chance of accessing beyond the end
of the input buffer.

=over 3

 STRLEN  UTF8SKIP(char* s)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<UTF8_SKIP>
X<UTF8_SKIP>

This is a synonym for C<L</UTF8SKIP>>

=over 3

 STRLEN  UTF8_SKIP(char* s)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<utf8_to_bytes>
X<utf8_to_bytes>

NOTE: C<utf8_to_bytes> is B<experimental> and may change or be
removed without notice.

Converts a string C<"s"> of length C<*lenp> from UTF-8 into native byte encoding.
Unlike L</bytes_to_utf8>, this over-writes the original string, and
updates C<*lenp> to contain the new length.
Returns zero on failure (leaving C<"s"> unchanged) setting C<*lenp> to -1.

Upon successful return, the number of variants in the string can be computed by
having saved the value of C<*lenp> before the call, and subtracting the
after-call value of C<*lenp> from it.

If you need a copy of the string, see L</bytes_from_utf8>.

=over 3

 U8 *  utf8_to_bytes(U8 *s, STRLEN *lenp)

=back

=back

=for hackers
Found in file utf8.c

=over 4

=item C<utf8_to_uvchr>
X<utf8_to_uvchr>

C<B<DEPRECATED!>>  It is planned to remove C<utf8_to_uvchr>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

Returns the native code point of the first character in the string C<s>
which is assumed to be in UTF-8 encoding; C<retlen> will be set to the
length, in bytes, of that character.

Some, but not all, UTF-8 malformations are detected, and in fact, some
malformed input could cause reading beyond the end of the input buffer, which
is why this function is deprecated.  Use L</utf8_to_uvchr_buf> instead.

If C<s> points to one of the detected malformations, and UTF8 warnings are
enabled, zero is returned and C<*retlen> is set (if C<retlen> isn't
C<NULL>) to -1.  If those warnings are off, the computed value if well-defined (or
the Unicode REPLACEMENT CHARACTER, if not) is silently returned, and C<*retlen>
is set (if C<retlen> isn't NULL) so that (S<C<s> + C<*retlen>>) is the
next possible position in C<s> that could begin a non-malformed character.
See L</utf8n_to_uvchr> for details on when the REPLACEMENT CHARACTER is returned.

=over 3

 UV  utf8_to_uvchr(const U8 *s, STRLEN *retlen)

=back

=back

=for hackers
Found in file mathoms.c

=over 4

=item C<utf8_to_uvchr_buf>
X<utf8_to_uvchr_buf>

Returns the native code point of the first character in the string C<s> which
is assumed to be in UTF-8 encoding; C<send> points to 1 beyond the end of C<s>.
C<*retlen> will be set to the length, in bytes, of that character.

If C<s> does not point to a well-formed UTF-8 character and UTF8 warnings are
enabled, zero is returned and C<*retlen> is set (if C<retlen> isn't
C<NULL>) to -1.  If those warnings are off, the computed value, if well-defined
(or the Unicode REPLACEMENT CHARACTER if not), is silently returned, and
C<*retlen> is set (if C<retlen> isn't C<NULL>) so that (S<C<s> + C<*retlen>>) is
the next possible position in C<s> that could begin a non-malformed character.
See L</utf8n_to_uvchr> for details on when the REPLACEMENT CHARACTER is
returned.

=over 3

 UV  utf8_to_uvchr_buf(const U8 *s, const U8 *send, STRLEN *retlen)

=back

=back

=for hackers
Found in file utf8.c

=over 4

=item C<UVCHR_IS_INVARIANT>
X<UVCHR_IS_INVARIANT>

Evaluates to 1 if the representation of code point C<cp> is the same whether or
not it is encoded in UTF-8; otherwise evaluates to 0.  UTF-8 invariant
characters can be copied as-is when converting to/from UTF-8, saving time.
C<cp> is Unicode if above 255; otherwise is platform-native.

=over 3

 bool  UVCHR_IS_INVARIANT(UV cp)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<UVCHR_SKIP>
X<UVCHR_SKIP>

returns the number of bytes required to represent the code point C<cp> when
encoded as UTF-8.  C<cp> is a native (ASCII or EBCDIC) code point if less than
255; a Unicode code point otherwise.

=over 3

 STRLEN  UVCHR_SKIP(UV cp)

=back

=back

=for hackers
Found in file utf8.h

=over 4

=item C<uvchr_to_utf8_flags>
X<uvchr_to_utf8_flags>

Adds the UTF-8 representation of the native code point C<uv> to the end
of the string C<d>; C<d> should have at least C<UVCHR_SKIP(uv)+1> (up to
C<UTF8_MAXBYTES+1>) free bytes available.  The return value is the pointer to
the byte after the end of the new character.  In other words,

    d = uvchr_to_utf8_flags(d, uv, flags);

or, in most cases,

    d = uvchr_to_utf8_flags(d, uv, 0);

This is the Unicode-aware way of saying

    *(d++) = uv;

If C<flags> is 0, this function accepts any code point from 0..C<IV_MAX> as
input.  C<IV_MAX> is typically 0x7FFF_FFFF in a 32-bit word.

Specifying C<flags> can further restrict what is allowed and not warned on, as
follows:

If C<uv> is a Unicode surrogate code point and C<UNICODE_WARN_SURROGATE> is set,
the function will raise a warning, provided UTF8 warnings are enabled.  If
instead C<UNICODE_DISALLOW_SURROGATE> is set, the function will fail and return
NULL.  If both flags are set, the function will both warn and return NULL.

Similarly, the C<UNICODE_WARN_NONCHAR> and C<UNICODE_DISALLOW_NONCHAR> flags
affect how the function handles a Unicode non-character.

And likewise, the C<UNICODE_WARN_SUPER> and C<UNICODE_DISALLOW_SUPER> flags
affect the handling of code points that are above the Unicode maximum of
0x10FFFF.  Languages other than Perl may not be able to accept files that
contain these.

The flag C<UNICODE_WARN_ILLEGAL_INTERCHANGE> selects all three of
the above WARN flags; and C<UNICODE_DISALLOW_ILLEGAL_INTERCHANGE> selects all
three DISALLOW flags.  C<UNICODE_DISALLOW_ILLEGAL_INTERCHANGE> restricts the
allowed inputs to the strict UTF-8 traditionally defined by Unicode.
Similarly, C<UNICODE_WARN_ILLEGAL_C9_INTERCHANGE> and
C<UNICODE_DISALLOW_ILLEGAL_C9_INTERCHANGE> are shortcuts to select the
above-Unicode and surrogate flags, but not the non-character ones, as
defined in
L<Unicode Corrigendum #9|https://www.unicode.org/versions/corrigendum9.html>.
See L<perlunicode/Noncharacter code points>.

Extremely high code points were never specified in any standard, and require an
extension to UTF-8 to express, which Perl does.  It is likely that programs
written in something other than Perl would not be able to read files that
contain these; nor would Perl understand files written by something that uses a
different extension.  For these reasons, there is a separate set of flags that
can warn and/or disallow these extremely high code points, even if other
above-Unicode ones are accepted.  They are the C<UNICODE_WARN_PERL_EXTENDED>
and C<UNICODE_DISALLOW_PERL_EXTENDED> flags.  For more information see
C<L</UTF8_GOT_PERL_EXTENDED>>.  Of course C<UNICODE_DISALLOW_SUPER> will
treat all above-Unicode code points, including these, as malformations.  (Note
that the Unicode standard considers anything above 0x10FFFF to be illegal, but
there are standards predating it that allow up to 0x7FFF_FFFF (2**31 -1))

A somewhat misleadingly named synonym for C<UNICODE_WARN_PERL_EXTENDED> is
retained for backward compatibility: C<UNICODE_WARN_ABOVE_31_BIT>.  Similarly,
C<UNICODE_DISALLOW_ABOVE_31_BIT> is usable instead of the more accurately named
C<UNICODE_DISALLOW_PERL_EXTENDED>.  The names are misleading because on EBCDIC
platforms,these flags can apply to code points that actually do fit in 31 bits.
The new names accurately describe the situation in all cases.

=over 3

 U8 *  uvchr_to_utf8_flags(U8 *d, UV uv, UV flags)

=back

=back

=for hackers
Found in file utf8.c

=over 4

=item C<uvchr_to_utf8_flags_msgs>
X<uvchr_to_utf8_flags_msgs>

THIS FUNCTION SHOULD BE USED IN ONLY VERY SPECIALIZED CIRCUMSTANCES.

Most code should use C<L</uvchr_to_utf8_flags>()> rather than call this directly.

This function is for code that wants any warning and/or error messages to be
returned to the caller rather than be displayed.  All messages that would have
been displayed if all lexical warnings are enabled will be returned.

It is just like C<L</uvchr_to_utf8_flags>> but it takes an extra parameter
placed after all the others, C<msgs>.  If this parameter is 0, this function
behaves identically to C<L</uvchr_to_utf8_flags>>.  Otherwise, C<msgs> should
be a pointer to an C<HV *> variable, in which this function creates a new HV to
contain any appropriate messages.  The hash has three key-value pairs, as
follows:

=over 4

=item C<text>

The text of the message as a C<SVpv>.

=item C<warn_categories>

The warning category (or categories) packed into a C<SVuv>.

=item C<flag>

A single flag bit associated with this message, in a C<SVuv>.
The bit corresponds to some bit in the C<*errors> return value,
such as C<UNICODE_GOT_SURROGATE>.

=back

It's important to note that specifying this parameter as non-null will cause
any warnings this function would otherwise generate to be suppressed, and
instead be placed in C<*msgs>.  The caller can check the lexical warnings state
(or not) when choosing what to do with the returned messages.

The caller, of course, is responsible for freeing any returned HV.

=over 3

 U8 *  uvchr_to_utf8_flags_msgs(U8 *d, UV uv, UV flags, HV **msgs)

=back

=back

=for hackers
Found in file utf8.c

=over 4

=item C<uvchr_to_utf8>
X<uvchr_to_utf8>

Adds the UTF-8 representation of the native code point C<uv> to the end
of the string C<d>; C<d> should have at least C<UVCHR_SKIP(uv)+1> (up to
C<UTF8_MAXBYTES+1>) free bytes available.  The return value is the pointer to
the byte after the end of the new character.  In other words,

    d = uvchr_to_utf8(d, uv);

is the recommended wide native character-aware way of saying

    *(d++) = uv;

This function accepts any code point from 0..C<IV_MAX> as input.
C<IV_MAX> is typically 0x7FFF_FFFF in a 32-bit word.

It is possible to forbid or warn on non-Unicode code points, or those that may
be problematic by using L</uvchr_to_utf8_flags>.

=over 3

 U8 *  uvchr_to_utf8(U8 *d, UV uv)

=back

=back

=for hackers
Found in file utf8.c

=head1 Utility Functions

=over 4

=item C<C_ARRAY_END>
X<C_ARRAY_END>

Returns a pointer to one element past the final element of the input C array.

=over 3

 void *  C_ARRAY_END(void *a)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<C_ARRAY_LENGTH>
X<C_ARRAY_LENGTH>

Returns the number of elements in the input C array (so you want your
zero-based indices to be less than but not equal to).

=over 3

 STRLEN  C_ARRAY_LENGTH(void *a)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<getcwd_sv>
X<getcwd_sv>

Fill C<sv> with current working directory

=over 3

 int  getcwd_sv(SV *sv)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<IN_PERL_COMPILETIME>
X<IN_PERL_COMPILETIME>

Returns 1 if this macro is being called during the compilation phase of the
program; otherwise 0;

=over 3

 bool  IN_PERL_COMPILETIME

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<IN_PERL_RUNTIME>
X<IN_PERL_RUNTIME>

Returns 1 if this macro is being called during the execution phase of the
program; otherwise 0;

=over 3

 bool  IN_PERL_RUNTIME

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<IS_SAFE_SYSCALL>
X<IS_SAFE_SYSCALL>

Same as L</is_safe_syscall>.

=over 3

 bool  IS_SAFE_SYSCALL(NN const char *pv, STRLEN len,
                       NN const char *what, NN const char *op_name)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<is_safe_syscall>
X<is_safe_syscall>

Test that the given C<pv> (with length C<len>) doesn't contain any internal
C<NUL> characters.
If it does, set C<errno> to C<ENOENT>, optionally warn using the C<syscalls>
category, and return FALSE.

Return TRUE if the name is safe.

C<what> and C<op_name> are used in any warning.

Used by the C<IS_SAFE_SYSCALL()> macro.

=over 3

 bool  is_safe_syscall(const char *pv, STRLEN len,
                       const char *what, const char *op_name)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<my_setenv>
X<my_setenv>

A wrapper for the C library L<setenv(3)>.  Don't use the latter, as the perl
version has desirable safeguards

=over 3

 void  my_setenv(const char *nam, const char *val)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<newPADxVOP>
X<newPADxVOP>

Constructs, checks and returns an op containing a pad offset.  C<type> is
the opcode, which should be one of C<OP_PADSV>, C<OP_PADAV>, C<OP_PADHV>
or C<OP_PADCV>.  The returned op will have the C<op_targ> field set by
the C<padix> argument.

This is convenient when constructing a large optree in nested function
calls, as it avoids needing to store the pad op directly to set the
C<op_targ> field as a side-effect. For example

    o = op_append_elem(OP_LINESEQ, o,
        newPADxVOP(OP_PADSV, 0, padix));

=over 3

 OP *  newPADxVOP(I32 type, I32 flags, PADOFFSET padix)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<phase_name>
X<phase_name>

Returns the given phase's name as a NUL-terminated string.

For example, to print a stack trace that includes the current
interpreter phase you might do:

    const char* phase_name = phase_name(PL_phase);
    mess("This is weird. (Perl phase: %s)", phase_name);

=over 3

 const char * const  phase_name(enum perl_phase)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<Poison>
X<Poison>

PoisonWith(0xEF) for catching access to freed memory.

=over 3

 void  Poison(void* dest, int nitems, type)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<PoisonFree>
X<PoisonFree>

PoisonWith(0xEF) for catching access to freed memory.

=over 3

 void  PoisonFree(void* dest, int nitems, type)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<PoisonNew>
X<PoisonNew>

PoisonWith(0xAB) for catching access to allocated but uninitialized memory.

=over 3

 void  PoisonNew(void* dest, int nitems, type)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<PoisonWith>
X<PoisonWith>

Fill up memory with a byte pattern (a byte repeated over and over
again) that hopefully catches attempts to access uninitialized memory.

=over 3

 void  PoisonWith(void* dest, int nitems, type, U8 byte)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<StructCopy>
X<StructCopy>

This is an architecture-independent macro that does a shallow copy of one
structure to another.

=over 3

 void  StructCopy(type *src, type *dest, type)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<sv_destroyable>
X<sv_destroyable>

Dummy routine which reports that object can be destroyed when there is no
sharing module present.  It ignores its single SV argument, and returns
'true'.  Exists to avoid test for a C<NULL> function pointer and because it
could potentially warn under some level of strict-ness.

=over 3

 bool  sv_destroyable(SV *sv)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<sv_nosharing>
X<sv_nosharing>

Dummy routine which "shares" an SV when there is no sharing module present.
Or "locks" it.  Or "unlocks" it.  In other
words, ignores its single SV argument.
Exists to avoid test for a C<NULL> function pointer and because it could
potentially warn under some level of strict-ness.

=over 3

 void  sv_nosharing(SV *sv)

=back

=back

=for hackers
Found in file util.c

=head1 Versioning

=over 4

=item C<new_version>
X<new_version>

Returns a new version object based on the passed in SV:

    SV *sv = new_version(SV *ver);

Does not alter the passed in ver SV.  See "upg_version" if you
want to upgrade the SV.
