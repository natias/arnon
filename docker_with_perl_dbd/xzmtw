PERL_CALLCONV SV **
Perl_av_store(pTHX_ AV *av, SSize_t key, SV *val);
#define PERL_ARGS_ASSERT_AV_STORE               \
        assert(av)

/* PERL_CALLCONV SSize_t
av_tindex(pTHX_ AV *av)
        __attribute__warn_unused_result__; */

/* PERL_CALLCONV SSize_t
av_top_index(pTHX_ AV *av)
        __attribute__warn_unused_result__; */

PERL_CALLCONV void
Perl_av_undef(pTHX_ AV *av);
#define PERL_ARGS_ASSERT_AV_UNDEF               \
        assert(av)

PERL_CALLCONV void
Perl_av_unshift(pTHX_ AV *av, SSize_t num);
#define PERL_ARGS_ASSERT_AV_UNSHIFT             \
        assert(av)

PERL_CALLCONV OP *
Perl_bind_match(pTHX_ I32 type, OP *left, OP *right)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_BIND_MATCH             \
        assert(left); assert(right)

PERL_CALLCONV OP *
Perl_block_end(pTHX_ I32 floor, OP *seq)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_BLOCK_END

PERL_CALLCONV U8
Perl_block_gimme(pTHX)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_BLOCK_GIMME

PERL_CALLCONV int
Perl_block_start(pTHX_ int full)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_BLOCK_START

PERL_CALLCONV void
Perl_blockhook_register(pTHX_ BHK *hk);
#define PERL_ARGS_ASSERT_BLOCKHOOK_REGISTER     \
        assert(hk)

PERL_CALLCONV void
Perl_boot_core_PerlIO(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_BOOT_CORE_PERLIO

PERL_CALLCONV void
Perl_boot_core_UNIVERSAL(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_BOOT_CORE_UNIVERSAL

PERL_CALLCONV void
Perl_boot_core_builtin(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_BOOT_CORE_BUILTIN

PERL_CALLCONV void
Perl_boot_core_mro(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_BOOT_CORE_MRO

PERL_CALLCONV OP *
Perl_build_infix_plugin(pTHX_ OP *lhs, OP *rhs, void *tokendata)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_BUILD_INFIX_PLUGIN     \
        assert(lhs); assert(rhs); assert(tokendata)

PERL_CALLCONV int
Perl_bytes_cmp_utf8(pTHX_ const U8 *b, STRLEN blen, const U8 *u, STRLEN ulen);
#define PERL_ARGS_ASSERT_BYTES_CMP_UTF8         \
        assert(b); assert(u)

PERL_CALLCONV U8 *
Perl_bytes_from_utf8(pTHX_ const U8 *s, STRLEN *lenp, bool *is_utf8p);
#define PERL_ARGS_ASSERT_BYTES_FROM_UTF8        \
        assert(s); assert(lenp); assert(is_utf8p)

PERL_CALLCONV U8 *
Perl_bytes_from_utf8_loc(const U8 *s, STRLEN *lenp, bool *is_utf8p, const U8 **first_unconverted);
#define PERL_ARGS_ASSERT_BYTES_FROM_UTF8_LOC    \
        assert(s); assert(lenp); assert(is_utf8p)

PERL_CALLCONV U8 *
Perl_bytes_to_utf8(pTHX_ const U8 *s, STRLEN *lenp);
#define PERL_ARGS_ASSERT_BYTES_TO_UTF8          \
        assert(s); assert(lenp)

PERL_CALLCONV SSize_t
Perl_call_argv(pTHX_ const char *sub_name, I32 flags, char **argv);
#define PERL_ARGS_ASSERT_CALL_ARGV              \
        assert(sub_name); assert(argv)

PERL_CALLCONV void
Perl_call_atexit(pTHX_ ATEXIT_t fn, void *ptr);
#define PERL_ARGS_ASSERT_CALL_ATEXIT

PERL_CALLCONV void
Perl_call_list(pTHX_ I32 oldscope, AV *paramList);
#define PERL_ARGS_ASSERT_CALL_LIST              \
        assert(paramList)

PERL_CALLCONV SSize_t
Perl_call_method(pTHX_ const char *methname, I32 flags);
#define PERL_ARGS_ASSERT_CALL_METHOD            \
        assert(methname)

PERL_CALLCONV SSize_t
Perl_call_pv(pTHX_ const char *sub_name, I32 flags);
#define PERL_ARGS_ASSERT_CALL_PV                \
        assert(sub_name)

PERL_CALLCONV SSize_t
Perl_call_sv(pTHX_ SV *sv, I32 flags);
#define PERL_ARGS_ASSERT_CALL_SV                \
        assert(sv)

PERL_CALLCONV const PERL_CONTEXT *
Perl_caller_cx(pTHX_ I32 level, const PERL_CONTEXT **dbcxp);
#define PERL_ARGS_ASSERT_CALLER_CX

PERL_CALLCONV Malloc_t
Perl_calloc(MEM_SIZE elements, MEM_SIZE size)
        __attribute__malloc__
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CALLOC

PERL_CALLCONV bool
Perl_cando(pTHX_ Mode_t mode, bool effective, const Stat_t *statbufp)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_CANDO                  \
        assert(statbufp)

PERL_CALLCONV I32
Perl_cast_i32(NV f)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CAST_I32

PERL_CALLCONV IV
Perl_cast_iv(NV f)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CAST_IV

PERL_CALLCONV U32
Perl_cast_ulong(NV f)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CAST_ULONG

PERL_CALLCONV UV
Perl_cast_uv(NV f)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CAST_UV

PERL_CALLCONV bool
Perl_check_utf8_print(pTHX_ const U8 *s, const STRLEN len)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_CHECK_UTF8_PRINT       \
        assert(s)

PERL_CALLCONV OP *
Perl_ck_entersub_args_core(pTHX_ OP *entersubop, GV *namegv, SV *protosv)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_CORE  \
        assert(entersubop); assert(namegv); assert(protosv)

PERL_CALLCONV OP *
Perl_ck_entersub_args_list(pTHX_ OP *entersubop);
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_LIST  \
        assert(entersubop)

PERL_CALLCONV OP *
Perl_ck_entersub_args_proto(pTHX_ OP *entersubop, GV *namegv, SV *protosv);
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_PROTO \
        assert(entersubop); assert(namegv); assert(protosv)

PERL_CALLCONV OP *
Perl_ck_entersub_args_proto_or_list(pTHX_ OP *entersubop, GV *namegv, SV *protosv);
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_PROTO_OR_LIST \
        assert(entersubop); assert(namegv); assert(protosv)

PERL_CALLCONV void
Perl_ck_warner(pTHX_ U32 err, const char *pat, ...)
        __attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_CK_WARNER              \
        assert(pat)

PERL_CALLCONV void
Perl_ck_warner_d(pTHX_ U32 err, const char *pat, ...)
        __attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_CK_WARNER_D            \
        assert(pat)

PERL_CALLCONV bool
Perl_ckwarn(pTHX_ U32 w)
        __attribute__warn_unused_result__
        __attribute__pure__;
#define PERL_ARGS_ASSERT_CKWARN

PERL_CALLCONV bool
Perl_ckwarn_d(pTHX_ U32 w)
        __attribute__warn_unused_result__
        __attribute__pure__;
#define PERL_ARGS_ASSERT_CKWARN_D

PERL_CALLCONV void
Perl_clear_defarray(pTHX_ AV *av, bool abandon);
#define PERL_ARGS_ASSERT_CLEAR_DEFARRAY         \
        assert(av)

PERL_CALLCONV const COP *
Perl_closest_cop(pTHX_ const COP *cop, const OP *o, const OP *curop, bool opnext)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_CLOSEST_COP            \
        assert(cop)

PERL_CALLCONV OP *
Perl_cmpchain_extend(pTHX_ I32 type, OP *ch, OP *right)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_CMPCHAIN_EXTEND        \
        assert(ch)

PERL_CALLCONV OP *
Perl_cmpchain_finish(pTHX_ OP *ch)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_CMPCHAIN_FINISH        \
        assert(ch)

PERL_CALLCONV OP *
Perl_cmpchain_start(pTHX_ I32 type, OP *left, OP *right)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_CMPCHAIN_START

PERL_CALLCONV const char *
Perl_cntrl_to_mnemonic(const U8 c)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CNTRL_TO_MNEMONIC

PERL_CALLCONV const char *
Perl_cop_fetch_label(pTHX_ COP * const cop, STRLEN *len, U32 *flags);
#define PERL_ARGS_ASSERT_COP_FETCH_LABEL        \
        assert(cop)

PERL_CALLCONV void
Perl_cop_store_label(pTHX_ COP * const cop, const char *label, STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_COP_STORE_LABEL        \
        assert(cop); assert(label)

PERL_CALLCONV SV *
Perl_core_prototype(pTHX_ SV *sv, const char *name, const int code, int * const opnum)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_CORE_PROTOTYPE         \
        assert(name)

PERL_CALLCONV OP *
Perl_coresub_op(pTHX_ SV * const coreargssv, const int code, const int opnum)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_CORESUB_OP             \
        assert(coreargssv)

PERL_CALLCONV void
Perl_create_eval_scope(pTHX_ OP *retop, SV **sp, U32 flags)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_CREATE_EVAL_SCOPE      \
        assert(sp)

PERL_CALLCONV_NO_RET void
Perl_croak(pTHX_ const char *pat, ...)
        __attribute__noreturn__
        __attribute__format__null_ok__(__printf__,pTHX_1,pTHX_2);
#define PERL_ARGS_ASSERT_CROAK

PERL_CALLCONV_NO_RET void
Perl_croak_caller(const char *pat, ...)
        __attribute__noreturn__
        __attribute__visibility__("hidden")
        __attribute__format__null_ok__(__printf__,1,2);
#define PERL_ARGS_ASSERT_CROAK_CALLER

PERL_STATIC_NO_RET void
Perl_croak_memory_wrap(void)
        __attribute__noreturn__;
#define PERL_ARGS_ASSERT_CROAK_MEMORY_WRAP

PERL_CALLCONV_NO_RET void
Perl_croak_no_mem(void)
        __attribute__noreturn__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_CROAK_NO_MEM

PERL_CALLCONV_NO_RET void
Perl_croak_no_mem_ext(const char *context, STRLEN len)
        __attribute__noreturn__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_CROAK_NO_MEM_EXT       \
        assert(context)

PERL_CALLCONV_NO_RET void
Perl_croak_no_modify(void)
        __attribute__noreturn__;
#define PERL_ARGS_ASSERT_CROAK_NO_MODIFY

PERL_CALLCONV_NO_RET void
Perl_croak_popstack(void)
        __attribute__noreturn__;
#define PERL_ARGS_ASSERT_CROAK_POPSTACK

PERL_CALLCONV_NO_RET void
Perl_croak_sv(pTHX_ SV *baseex)
        __attribute__noreturn__;
#define PERL_ARGS_ASSERT_CROAK_SV               \
        assert(baseex)

PERL_CALLCONV_NO_RET void
Perl_croak_xs_usage(const CV * const cv, const char * const params)
        __attribute__noreturn__;
#define PERL_ARGS_ASSERT_CROAK_XS_USAGE         \
        assert(cv); assert(params)

PERL_CALLCONV Signal_t
Perl_csighandler1(int sig);
#define PERL_ARGS_ASSERT_CSIGHANDLER1

PERL_CALLCONV Signal_t
Perl_csighandler3(int sig, Siginfo_t *info, void *uap);
#define PERL_ARGS_ASSERT_CSIGHANDLER3

PERL_CALLCONV regexp_engine const *
Perl_current_re_engine(pTHX);
#define PERL_ARGS_ASSERT_CURRENT_RE_ENGINE

PERL_CALLCONV XOPRETANY
Perl_custom_op_get_field(pTHX_ const OP *o, const xop_flags_enum field)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CUSTOM_OP_GET_FIELD    \
        assert(o)

PERL_CALLCONV void
Perl_custom_op_register(pTHX_ Perl_ppaddr_t ppaddr, const XOP *xop);
#define PERL_ARGS_ASSERT_CUSTOM_OP_REGISTER     \
        assert(ppaddr); assert(xop)

PERL_CALLCONV void
Perl_cv_ckproto_len_flags(pTHX_ const CV *cv, const GV *gv, const char *p, const STRLEN len, const U32 flags);
#define PERL_ARGS_ASSERT_CV_CKPROTO_LEN_FLAGS   \
        assert(cv)

PERL_CALLCONV CV *
Perl_cv_clone(pTHX_ CV *proto);
#define PERL_ARGS_ASSERT_CV_CLONE               \
        assert(proto)

PERL_CALLCONV CV *
Perl_cv_clone_into(pTHX_ CV *proto, CV *target)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_CV_CLONE_INTO          \
        assert(proto); assert(target)

PERL_CALLCONV SV *
Perl_cv_const_sv(const CV * const cv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CV_CONST_SV

PERL_CALLCONV SV *
Perl_cv_const_sv_or_av(const CV * const cv)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_CV_CONST_SV_OR_AV

PERL_CALLCONV void
Perl_cv_forget_slab(pTHX_ CV *cv)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_CV_FORGET_SLAB

PERL_CALLCONV void
Perl_cv_get_call_checker(pTHX_ CV *cv, Perl_call_checker *ckfun_p, SV **ckobj_p);
#define PERL_ARGS_ASSERT_CV_GET_CALL_CHECKER    \
        assert(cv); assert(ckfun_p); assert(ckobj_p)

PERL_CALLCONV void
Perl_cv_get_call_checker_flags(pTHX_ CV *cv, U32 gflags, Perl_call_checker *ckfun_p, SV **ckobj_p, U32 *ckflags_p);
#define PERL_ARGS_ASSERT_CV_GET_CALL_CHECKER_FLAGS \
        assert(cv); assert(ckfun_p); assert(ckobj_p); assert(ckflags_p)

PERL_CALLCONV SV *
Perl_cv_name(pTHX_ CV *cv, SV *sv, U32 flags);
#define PERL_ARGS_ASSERT_CV_NAME                \
        assert(cv)

PERL_CALLCONV void
Perl_cv_set_call_checker(pTHX_ CV *cv, Perl_call_checker ckfun, SV *ckobj);
#define PERL_ARGS_ASSERT_CV_SET_CALL_CHECKER    \
        assert(cv); assert(ckfun); assert(ckobj)

PERL_CALLCONV void
Perl_cv_set_call_checker_flags(pTHX_ CV *cv, Perl_call_checker ckfun, SV *ckobj, U32 ckflags);
#define PERL_ARGS_ASSERT_CV_SET_CALL_CHECKER_FLAGS \
        assert(cv); assert(ckfun); assert(ckobj)

PERL_CALLCONV void
Perl_cv_undef(pTHX_ CV *cv);
#define PERL_ARGS_ASSERT_CV_UNDEF               \
        assert(cv)

PERL_CALLCONV void
Perl_cv_undef_flags(pTHX_ CV *cv, U32 flags)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_CV_UNDEF_FLAGS         \
        assert(cv)

PERL_CALLCONV GV *
Perl_cvgv_from_hek(pTHX_ CV *cv);
#define PERL_ARGS_ASSERT_CVGV_FROM_HEK          \
        assert(cv)

PERL_CALLCONV void
Perl_cvgv_set(pTHX_ CV *cv, GV *gv);
#define PERL_ARGS_ASSERT_CVGV_SET               \
        assert(cv)

PERL_CALLCONV void
Perl_cvstash_set(pTHX_ CV *cv, HV *stash);
#define PERL_ARGS_ASSERT_CVSTASH_SET            \
        assert(cv)

PERL_CALLCONV void
Perl_cx_dump(pTHX_ PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_DUMP                \
        assert(cx)

PERL_CALLCONV I32
Perl_cxinc(pTHX)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_CXINC

PERL_CALLCONV void
Perl_deb(pTHX_ const char *pat, ...)
        __attribute__format__(__printf__,pTHX_1,pTHX_2);
#define PERL_ARGS_ASSERT_DEB                    \
        assert(pat)

PERL_CALLCONV void
Perl_deb_stack_all(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DEB_STACK_ALL

PERL_CALLCONV I32
Perl_debop(pTHX_ const OP *o);
#define PERL_ARGS_ASSERT_DEBOP                  \
        assert(o)

PERL_CALLCONV void
Perl_debprofdump(pTHX);
#define PERL_ARGS_ASSERT_DEBPROFDUMP

PERL_CALLCONV I32
Perl_debstack(pTHX);
#define PERL_ARGS_ASSERT_DEBSTACK

PERL_CALLCONV I32
Perl_debstackptrs(pTHX);
#define PERL_ARGS_ASSERT_DEBSTACKPTRS

PERL_CALLCONV void
Perl_debug_hash_seed(pTHX_ bool via_debug_h)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DEBUG_HASH_SEED

PERL_CALLCONV SV *
Perl_defelem_target(pTHX_ SV *sv, MAGIC *mg)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DEFELEM_TARGET         \
        assert(sv)

PERL_CALLCONV void
Perl_delete_eval_scope(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DELETE_EVAL_SCOPE

PERL_CALLCONV char *
Perl_delimcpy(char *to, const char *to_end, const char *from, const char *from_end, const int delim, I32 *retlen);
#define PERL_ARGS_ASSERT_DELIMCPY               \
        assert(to); assert(to_end); assert(from); assert(from_end); assert(retlen)

PERL_CALLCONV char *
Perl_delimcpy_no_escape(char *to, const char *to_end, const char *from, const char *from_end, const int delim, I32 *retlen);
#define PERL_ARGS_ASSERT_DELIMCPY_NO_ESCAPE     \
        assert(to); assert(to_end); assert(from); assert(from_end); assert(retlen)

PERL_CALLCONV void
Perl_despatch_signals(pTHX);
#define PERL_ARGS_ASSERT_DESPATCH_SIGNALS

PERL_CALLCONV_NO_RET OP *
Perl_die(pTHX_ const char *pat, ...)
        __attribute__noreturn__
        __attribute__format__null_ok__(__printf__,pTHX_1,pTHX_2);
#define PERL_ARGS_ASSERT_DIE

PERL_CALLCONV_NO_RET OP *
Perl_die_sv(pTHX_ SV *baseex)
        __attribute__noreturn__;
#define PERL_ARGS_ASSERT_DIE_SV                 \
        assert(baseex)

PERL_CALLCONV_NO_RET void
Perl_die_unwind(pTHX_ SV *msv)
        __attribute__noreturn__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DIE_UNWIND             \
        assert(msv)

PERL_CALLCONV bool
Perl_do_aexec5(pTHX_ SV *really, SV **mark, SV **sp, int fd, int do_report)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DO_AEXEC5              \
        assert(mark); assert(sp)

PERL_CALLCONV bool
Perl_do_close(pTHX_ GV *gv, bool is_explicit);
#define PERL_ARGS_ASSERT_DO_CLOSE

PERL_CALLCONV void
Perl_do_dump_pad(pTHX_ I32 level, PerlIO *file, PADLIST *padlist, int full)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DO_DUMP_PAD            \
        assert(file)

PERL_CALLCONV bool
Perl_do_eof(pTHX_ GV *gv)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DO_EOF                 \
        assert(gv)

PERL_CALLCONV void
Perl_do_gv_dump(pTHX_ I32 level, PerlIO *file, const char *name, GV *sv);
#define PERL_ARGS_ASSERT_DO_GV_DUMP             \
        assert(file); assert(name)

PERL_CALLCONV void
Perl_do_gvgv_dump(pTHX_ I32 level, PerlIO *file, const char *name, GV *sv);
#define PERL_ARGS_ASSERT_DO_GVGV_DUMP           \
        assert(file); assert(name)

PERL_CALLCONV void
Perl_do_hv_dump(pTHX_ I32 level, PerlIO *file, const char *name, HV *sv);
#define PERL_ARGS_ASSERT_DO_HV_DUMP             \
        assert(file); assert(name)

PERL_CALLCONV void
Perl_do_join(pTHX_ SV *sv, SV *delim, SV **mark, SV **sp);
#define PERL_ARGS_ASSERT_DO_JOIN                \
        assert(sv); assert(delim); assert(mark); assert(sp)

PERL_CALLCONV void
Perl_do_magic_dump(pTHX_ I32 level, PerlIO *file, const MAGIC *mg, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim);
#define PERL_ARGS_ASSERT_DO_MAGIC_DUMP          \
        assert(file)

PERL_CALLCONV I32
Perl_do_ncmp(pTHX_ SV * const left, SV * const right)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DO_NCMP                \
        assert(left); assert(right)

PERL_CALLCONV void
Perl_do_op_dump(pTHX_ I32 level, PerlIO *file, const OP *o);
#define PERL_ARGS_ASSERT_DO_OP_DUMP             \
        assert(file)

PERL_CALLCONV bool
Perl_do_open6(pTHX_ GV *gv, const char *oname, STRLEN len, PerlIO *supplied_fp, SV **svp, U32 num)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DO_OPEN6               \
        assert(gv); assert(oname)

PERL_CALLCONV bool
Perl_do_open_raw(pTHX_ GV *gv, const char *oname, STRLEN len, int rawmode, int rawperm, Stat_t *statbufp)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DO_OPEN_RAW            \
        assert(gv); assert(oname)

PERL_CALLCONV bool
Perl_do_openn(pTHX_ GV *gv, const char *oname, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV **svp, I32 num);
#define PERL_ARGS_ASSERT_DO_OPENN               \
        assert(gv); assert(oname)

PERL_CALLCONV void
Perl_do_pmop_dump(pTHX_ I32 level, PerlIO *file, const PMOP *pm);
#define PERL_ARGS_ASSERT_DO_PMOP_DUMP           \
        assert(file)

PERL_CALLCONV bool
Perl_do_print(pTHX_ SV *sv, PerlIO *fp)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DO_PRINT               \
        assert(fp)

PERL_CALLCONV OP *
Perl_do_readline(pTHX)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DO_READLINE

PERL_CALLCONV bool
Perl_do_seek(pTHX_ GV *gv, Off_t pos, int whence)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DO_SEEK

PERL_CALLCONV void
Perl_do_sprintf(pTHX_ SV *sv, SSize_t len, SV **sarg);
#define PERL_ARGS_ASSERT_DO_SPRINTF             \
        assert(sv); assert(sarg)

PERL_CALLCONV void
Perl_do_sv_dump(pTHX_ I32 level, PerlIO *file, SV *sv, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim);
#define PERL_ARGS_ASSERT_DO_SV_DUMP             \
        assert(file)

PERL_CALLCONV Off_t
Perl_do_sysseek(pTHX_ GV *gv, Off_t pos, int whence)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DO_SYSSEEK             \
        assert(gv)

PERL_CALLCONV Off_t
Perl_do_tell(pTHX_ GV *gv)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DO_TELL                \
        assert(gv)

PERL_CALLCONV Size_t
Perl_do_trans(pTHX_ SV *sv)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DO_TRANS               \
        assert(sv)

PERL_CALLCONV I16
Perl_do_uniprop_match(const char * const key, const U16 key_len)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DO_UNIPROP_MATCH       \
        assert(key)

PERL_CALLCONV UV
Perl_do_vecget(pTHX_ SV *sv, STRLEN offset, int size)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DO_VECGET              \
        assert(sv)

PERL_CALLCONV void
Perl_do_vecset(pTHX_ SV *sv)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DO_VECSET              \
        assert(sv)

PERL_CALLCONV void
Perl_do_vop(pTHX_ I32 optype, SV *sv, SV *left, SV *right)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DO_VOP                 \
        assert(sv); assert(left); assert(right)

PERL_CALLCONV OP *
Perl_dofile(pTHX_ OP *term, I32 force_builtin)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DOFILE                 \
        assert(term)

PERL_CALLCONV bool
Perl_doing_taint(int argc, char **argv, char **env)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DOING_TAINT

PERL_CALLCONV OP *
Perl_doref(pTHX_ OP *o, I32 type, bool set_op_ref);
#define PERL_ARGS_ASSERT_DOREF                  \
        assert(o)

PERL_CALLCONV void
Perl_dounwind(pTHX_ I32 cxix);
#define PERL_ARGS_ASSERT_DOUNWIND

PERL_CALLCONV U8
Perl_dowantarray(pTHX)
        __attribute__deprecated__
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_DOWANTARRAY

PERL_CALLCONV void
Perl_drand48_init_r(perl_drand48_t *random_state, U32 seed);
#define PERL_ARGS_ASSERT_DRAND48_INIT_R         \
        assert(random_state)

PERL_CALLCONV double
Perl_drand48_r(perl_drand48_t *random_state);
#define PERL_ARGS_ASSERT_DRAND48_R              \
        assert(random_state)

PERL_CALLCONV void
Perl_dump_all(pTHX);
#define PERL_ARGS_ASSERT_DUMP_ALL

PERL_CALLCONV void
Perl_dump_all_perl(pTHX_ bool justperl)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DUMP_ALL_PERL

PERL_CALLCONV void
Perl_dump_eval(pTHX);
#define PERL_ARGS_ASSERT_DUMP_EVAL

PERL_CALLCONV void
Perl_dump_form(pTHX_ const GV *gv);
#define PERL_ARGS_ASSERT_DUMP_FORM              \
        assert(gv)

PERL_CALLCONV void
Perl_dump_indent(pTHX_ I32 level, PerlIO *file, const char *pat, ...)
        __attribute__format__(__printf__,pTHX_3,pTHX_4);
#define PERL_ARGS_ASSERT_DUMP_INDENT            \
        assert(file); assert(pat)

PERL_CALLCONV void
Perl_dump_packsubs(pTHX_ const HV *stash);
#define PERL_ARGS_ASSERT_DUMP_PACKSUBS          \
        assert(stash)

PERL_CALLCONV void
Perl_dump_packsubs_perl(pTHX_ const HV *stash, bool justperl)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DUMP_PACKSUBS_PERL     \
        assert(stash)

PERL_CALLCONV void
Perl_dump_sub(pTHX_ const GV *gv);
#define PERL_ARGS_ASSERT_DUMP_SUB               \
        assert(gv)

PERL_CALLCONV void
Perl_dump_sub_perl(pTHX_ const GV *gv, bool justperl)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_DUMP_SUB_PERL          \
        assert(gv)

PERL_CALLCONV void
Perl_dump_vindent(pTHX_ I32 level, PerlIO *file, const char *pat, va_list *args);
#define PERL_ARGS_ASSERT_DUMP_VINDENT           \
        assert(file); assert(pat)

PERL_CALLCONV char  *
Perl_dup_warnings(pTHX_ char *warnings);
#define PERL_ARGS_ASSERT_DUP_WARNINGS

PERL_CALLCONV void
Perl_emulate_cop_io(pTHX_ const COP * const c, SV * const sv);
#define PERL_ARGS_ASSERT_EMULATE_COP_IO         \
        assert(c); assert(sv)

PERL_CALLCONV SV *
Perl_eval_pv(pTHX_ const char *p, I32 croak_on_error);
#define PERL_ARGS_ASSERT_EVAL_PV                \
        assert(p)

PERL_CALLCONV SSize_t
Perl_eval_sv(pTHX_ SV *sv, I32 flags);
#define PERL_ARGS_ASSERT_EVAL_SV                \
        assert(sv)

PERL_CALLCONV void
Perl_fatal_warner(pTHX_ U32 err, const char *pat, ...)
        __attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_FATAL_WARNER           \
        assert(pat)

PERL_CALLCONV void
Perl_fbm_compile(pTHX_ SV *sv, U32 flags);
#define PERL_ARGS_ASSERT_FBM_COMPILE            \
        assert(sv)

PERL_CALLCONV char *
Perl_fbm_instr(pTHX_ unsigned char *big, unsigned char *bigend, SV *littlestr, U32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_FBM_INSTR              \
        assert(big); assert(bigend); assert(littlestr)

PERL_CALLCONV SV *
Perl_filter_add(pTHX_ filter_t funcp, SV *datasv);
#define PERL_ARGS_ASSERT_FILTER_ADD

PERL_CALLCONV void
Perl_filter_del(pTHX_ filter_t funcp);
#define PERL_ARGS_ASSERT_FILTER_DEL             \
        assert(funcp)

PERL_CALLCONV I32
Perl_filter_read(pTHX_ int idx, SV *buf_sv, int maxlen)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_FILTER_READ            \
        assert(buf_sv)

PERL_CALLCONV CV *
Perl_find_lexical_cv(pTHX_ PADOFFSET off)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_FIND_LEXICAL_CV

PERL_CALLCONV CV *
Perl_find_runcv(pTHX_ U32 *db_seqp)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_FIND_RUNCV

PERL_CALLCONV CV *
Perl_find_runcv_where(pTHX_ U8 cond, IV arg, U32 *db_seqp)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_FIND_RUNCV_WHERE

PERL_CALLCONV SV *
Perl_find_rundefsv(pTHX);
#define PERL_ARGS_ASSERT_FIND_RUNDEFSV

PERL_CALLCONV char *
Perl_find_script(pTHX_ const char *scriptname, bool dosearch, const char * const * const search_ext, I32 flags)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_FIND_SCRIPT            \
        assert(scriptname)

/* PERL_CALLCONV I32
foldEQ_utf8(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2); */

PERL_CALLCONV I32
Perl_foldEQ_utf8_flags(pTHX_ const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2, U32 flags);
#define PERL_ARGS_ASSERT_FOLDEQ_UTF8_FLAGS      \
        assert(s1); assert(s2)

PERL_CALLCONV void
Perl_forbid_outofblock_ops(pTHX_ OP *o, const char *blockname);
#define PERL_ARGS_ASSERT_FORBID_OUTOFBLOCK_OPS  \
        assert(o); assert(blockname)

PERL_CALLCONV void
Perl_force_locale_unlock(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_FORCE_LOCALE_UNLOCK

PERL_CALLCONV char *
Perl_form(pTHX_ const char *pat, ...)
        __attribute__format__(__printf__,pTHX_1,pTHX_2);
#define PERL_ARGS_ASSERT_FORM                   \
        assert(pat)

PERL_CALLCONV void
Perl_free_tied_hv_pool(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_FREE_TIED_HV_POOL

PERL_CALLCONV void
Perl_free_tmps(pTHX);
#define PERL_ARGS_ASSERT_FREE_TMPS

PERL_CALLCONV SV *
Perl_get_and_check_backslash_N_name(pTHX_ const char *s, const char *e, const bool is_utf8, const char **error_msg)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GET_AND_CHECK_BACKSLASH_N_NAME \
        assert(s); assert(e); assert(error_msg)

PERL_CALLCONV AV *
Perl_get_av(pTHX_ const char *name, I32 flags);
#define PERL_ARGS_ASSERT_GET_AV                 \
        assert(name)

PERL_CALLCONV CV *
Perl_get_cv(pTHX_ const char *name, I32 flags);
#define PERL_ARGS_ASSERT_GET_CV                 \
        assert(name)

PERL_CALLCONV CV *
Perl_get_cvn_flags(pTHX_ const char *name, STRLEN len, I32 flags);
#define PERL_ARGS_ASSERT_GET_CVN_FLAGS          \
        assert(name)

PERL_CALLCONV void
Perl_get_db_sub(pTHX_ SV **svp, CV *cv);
#define PERL_ARGS_ASSERT_GET_DB_SUB             \
        assert(cv)

PERL_CALLCONV const char *
Perl_get_deprecated_property_msg(const Size_t warning_offset)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GET_DEPRECATED_PROPERTY_MSG

PERL_CALLCONV int
Perl_get_extended_os_errno(void)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_GET_EXTENDED_OS_ERRNO

PERL_CALLCONV void
Perl_get_hash_seed(pTHX_ unsigned char * const seed_buffer)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_GET_HASH_SEED          \
        assert(seed_buffer)

PERL_CALLCONV HV *
Perl_get_hv(pTHX_ const char *name, I32 flags);
#define PERL_ARGS_ASSERT_GET_HV                 \
        assert(name)

PERL_CALLCONV const char *
Perl_get_no_modify(pTHX)
        __attribute__deprecated__
        __attribute__warn_unused_result__
        __attribute__pure__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_GET_NO_MODIFY

PERL_CALLCONV char **
Perl_get_op_descs(pTHX)
        __attribute__deprecated__
        __attribute__warn_unused_result__
        __attribute__pure__;
#define PERL_ARGS_ASSERT_GET_OP_DESCS

PERL_CALLCONV char **
Perl_get_op_names(pTHX)
        __attribute__deprecated__
        __attribute__warn_unused_result__
        __attribute__pure__;
#define PERL_ARGS_ASSERT_GET_OP_NAMES

PERL_CALLCONV U32 *
Perl_get_opargs(pTHX)
        __attribute__deprecated__
        __attribute__warn_unused_result__
        __attribute__pure__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_GET_OPARGS

PERL_CALLCONV PPADDR_t *
Perl_get_ppaddr(pTHX)
        __attribute__deprecated__
        __attribute__warn_unused_result__
        __attribute__pure__;
#define PERL_ARGS_ASSERT_GET_PPADDR

PERL_CALLCONV SV *
Perl_get_prop_definition(pTHX_ const int table_index)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GET_PROP_DEFINITION

PERL_CALLCONV const char * const *
Perl_get_prop_values(const int table_index)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_GET_PROP_VALUES

PERL_CALLCONV REGEXP *
Perl_get_re_arg(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_GET_RE_ARG

PERL_CALLCONV SV *
Perl_get_sv(pTHX_ const char *name, I32 flags);
#define PERL_ARGS_ASSERT_GET_SV                 \
        assert(name)

PERL_CALLCONV int
Perl_getcwd_sv(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_GETCWD_SV              \
        assert(sv)

PERL_CALLCONV void
Perl_gp_free(pTHX_ GV *gv);
#define PERL_ARGS_ASSERT_GP_FREE

PERL_CALLCONV GP *
Perl_gp_ref(pTHX_ GP *gp);
#define PERL_ARGS_ASSERT_GP_REF

PERL_CALLCONV bool
Perl_grok_atoUV(const char *pv, UV *valptr, const char **endptr);
#define PERL_ARGS_ASSERT_GROK_ATOUV             \
        assert(pv); assert(valptr)

PERL_CALLCONV UV
Perl_grok_bin(pTHX_ const char *start, STRLEN *len_p, I32 *flags, NV *result);
#define PERL_ARGS_ASSERT_GROK_BIN               \
        assert(start); assert(len_p); assert(flags)

PERL_CALLCONV UV
Perl_grok_bin_oct_hex(pTHX_ const char *start, STRLEN *len_p, I32 *flags, NV *result, const unsigned shift, const U8 lookup_bit, const char prefix);
