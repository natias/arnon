static const UV UNI_INPC__TOPANDBOTTOMANDRIGHT_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1B3D,
	0x1B3E
};

static const UV UNI_INPC__TOPANDLEFT_invlist[] = {  /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB48,
	0xB49,
	0xDDA,
	0xDDB,
	0x17BE,
	0x17BF,
	0x1C29,
	0x1C2A,
	0x114BB,
	0x114BC,
	0x115B9,
	0x115BA
};

static const UV UNI_INPC__TOPANDLEFTANDRIGHT_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB4C,
	0xB4D,
	0xDDD,
	0xDDE,
	0x17BF,
	0x17C0,
	0x115BB,
	0x115BC
};

static const UV UNI_INPC__TOPANDRIGHT_invlist[] = {  /* for all charsets */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAC9,
	0xACA,
	0xB57,
	0xB58,
	0xCC0,
	0xCC1,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0x1925,
	0x1927,
	0x1B43,
	0x1B44,
	0x111BF,
	0x111C0,
	0x11232,
	0x11234
};

static const UV UNI_INPHAGSPA_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA840,
	0xA880
};

static const UV UNI_INPHOENICIAN_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10900,
	0x10920
};

static const UV UNI_INPSALTERPAHLAVI_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10B80,
	0x10BB0
};

static const UV UNI_INPUNCTUATION_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2000,
	0x2070
};

static const UV UNI_INREJANG_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA930,
	0xA960
};

static const UV UNI_INRUNIC_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16A0,
	0x1700
};

static const UV UNI_INSAMARITAN_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x800,
	0x840
};

static const UV UNI_INSAURASHTRA_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA880,
	0xA8E0
};

static const UV UNI_INSC__AVAGRAHA_invlist[] = {  /* for all charsets */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x93D,
	0x93E,
	0x9BD,
	0x9BE,
	0xABD,
	0xABE,
	0xB3D,
	0xB3E,
	0xC3D,
	0xC3E,
	0xCBD,
	0xCBE,
	0xD3D,
	0xD3E,
	0xF85,
	0xF86,
	0x17DC,
	0x17DD,
	0x1BBA,
	0x1BBB,
	0x111C1,
	0x111C2,
	0x1133D,
	0x1133E,
	0x11447,
	0x11448,
	0x114C4,
	0x114C5,
	0x119E1,
	0x119E2,
	0x11A9D,
	0x11A9E,
	0x11C40,
	0x11C41
};

static const UV UNI_INSC__BINDU_invlist[] = {  /* for all charsets */
	117,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x900,
	0x903,
	0x981,
	0x983,
	0x9FC,
	0x9FD,
	0xA01,
	0xA03,
	0xA70,
	0xA71,
	0xA81,
	0xA83,
	0xB01,
	0xB03,
	0xB82,
	0xB83,
	0xC00,
	0xC03,
	0xC04,
	0xC05,
	0xC80,
	0xC83,
	0xCF3,
	0xCF4,
	0xD00,
	0xD03,
	0xD04,
	0xD05,
	0xD81,
	0xD83,
	0xE4D,
	0xE4E,
	0xECD,
	0xECE,
	0xF7E,
	0xF7F,
	0xF82,
	0xF84,
	0x1036,
	0x1037,
	0x17C6,
	0x17C7,
	0x1932,
	0x1933,
	0x1A74,
	0x1A75,
	0x1B00,
	0x1B03,
	0x1B80,
	0x1B81,
	0x1C34,
	0x1C36,
	0xA80B,
	0xA80C,
	0xA873,
	0xA874,
	0xA880,
	0xA881,
	0xA8C5,
	0xA8C6,
	0xA8F2,
	0xA8F4,
	0xA980,
	0xA982,
	0x10A0E,
	0x10A0F,
	0x11000,
	0x11002,
	0x11080,
	0x11082,
	0x11100,
	0x11102,
	0x11180,
	0x11182,
	0x111CF,
	0x111D0,
	0x11234,
	0x11235,
	0x112DF,
	0x112E0,
	0x11300,
	0x11303,
	0x1135E,
	0x11360,
	0x11443,
	0x11445,
	0x1145F,
	0x11460,
	0x114BF,
	0x114C1,
	0x115BC,
	0x115BE,
	0x1163D,
	0x1163E,
	0x116AB,
	0x116AC,
	0x11837,
	0x11838,
	0x1193B,
	0x1193D,
	0x119DE,
	0x119DF,
	0x11A35,
	0x11A39,
	0x11A96,
	0x11A97,
	0x11C3C,
	0x11C3E,
	0x11CB5,
	0x11CB7,
	0x11D40,
	0x11D41,
	0x11D95,
	0x11D96,
	0x11F00,
	0x11F02
};

static const UV UNI_INSC__BRAHMIJOININGNUMBER_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11052,
	0x11066
};

static const UV UNI_INSC__CANTILLATIONMARK_invlist[] = {  /* for all charsets */
	27,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0xA51,
	0xA52,
	0xAFA,
	0xAFB,
	0xAFC,
	0xAFD,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE2,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x20F0,
	0x20F1,
	0xA8E0,
	0xA8F2,
	0x1123E,
	0x1123F,
	0x11366,
	0x1136D,
	0x11370,
	0x11375
};

static const UV UNI_INSC__CONSONANT_invlist[] = {  /* for all charsets */
	315,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x915,
	0x93A,
	0x958,
	0x960,
	0x978,
	0x980,
	0x995,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0x9F0,
	0x9F2,
	0xA15,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA95,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xAF9,
	0xAFA,
	0xB15,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB60,
	0xB71,
	0xB72,
	0xB95,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xC15,
	0xC29,
	0xC2A,
	0xC3A,
	0xC58,
	0xC5B,
	0xC95,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCDE,
	0xCDF,
	0xD15,
	0xD3B,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xE01,
	0xE2F,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE86,
	0xE8B,
	0xE8C,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEAF,
	0xEDC,
	0xEE0,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0x1000,
	0x1021,
	0x103F,
	0x1040,
	0x1050,
	0x1052,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1703,
	0x1712,
	0x171F,
	0x1720,
	0x1723,
	0x1732,
	0x1743,
	0x1752,
	0x1763,
	0x176D,
	0x176E,
	0x1771,
	0x1780,
	0x17A3,
	0x1901,
	0x191F,
	0x1950,
	0x1963,
	0x1980,
	0x19AC,
	0x1A00,
	0x1A17,
	0x1A20,
	0x1A4D,
	0x1A53,
	0x1A55,
	0x1B13,
	0x1B34,
	0x1B45,
	0x1B4D,
	0x1B8A,
	0x1BA1,
	0x1BAE,
	0x1BB0,
	0x1BBB,
	0x1BBE,
	0x1BC0,
	0x1BE4,
	0x1C00,
	0x1C24,
	0x1C4D,
	0x1C50,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA840,
	0xA85E,
	0xA862,
	0xA866,
	0xA869,
	0xA871,
	0xA872,
	0xA873,
	0xA892,
	0xA8B4,
	0xA90A,
	0xA922,
	0xA930,
	0xA947,
	0xA989,
	0xA98C,
	0xA98F,
	0xA9B3,
	0xA9E0,
	0xA9E5,
	0xA9E7,
	0xA9F0,
	0xA9FA,
	0xA9FF,
	0xAA06,
	0xAA29,
	0xAA60,
	0xAA70,
	0xAA71,
	0xAA74,
	0xAA7A,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAE2,
	0xAAEB,
	0xABC0,
	0xABCE,
	0xABD0,
	0xABD1,
	0xABD2,
	0xABDB,
	0x10A00,
	0x10A01,
	0x10A10,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A36,
	0x11013,
	0x11038,
	0x11075,
	0x11076,
	0x1108D,
	0x110B0,
	0x11107,
	0x11127,
	0x11144,
	0x11145,
	0x11147,
	0x11148,
	0x11155,
	0x11173,
	0x11191,
	0x111B3,
	0x11208,
	0x11212,
	0x11213,
	0x1122C,
	0x1123F,
	0x11240,
	0x11284,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112BA,
	0x112DF,
	0x11315,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1140E,
	0x11435,
	0x1148F,
	0x114B0,
	0x1158E,
	0x115AF,
	0x1160E,
	0x11630,
	0x1168A,
	0x116AB,
	0x116B8,
	0x116B9,
	0x11700,
	0x1171B,
	0x11740,
	0x11747,
	0x1180A,
	0x1182C,
	0x1190C,
	0x11914,
	0x11915,
	0x11917,
	0x11918,
	0x11930,
	0x119AE,
	0x119D1,
	0x11A0B,
	0x11A33,
	0x11A5C,
	0x11A84,
	0x11C0E,
	0x11C2F,
	0x11C72,
	0x11C90,
	0x11D0C,
	0x11D31,
	0x11D6C,
	0x11D8A,
	0x11EE0,
	0x11EF2,
	0x11F12,
	0x11F34
};

static const UV UNI_INSC__CONSONANTDEAD_invlist[] = {  /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9CE,
	0x9CF,
	0xC5D,
	0xC5E,
	0xCDD,
	0xCDE,
	0xD54,
	0xD57,
	0xD7A,
	0xD80,
	0x1CF2,
	0x1CF4
};

static const UV UNI_INSC__CONSONANTFINAL_invlist[] = {  /* for all charsets */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1930,
	0x1932,
	0x1933,
	0x193A,
	0x19C1,
	0x19C8,
	0x1A58,
	0x1A5A,
	0x1B03,
	0x1B04,
	0x1B81,
	0x1B82,
	0x1BBE,
	0x1BC0,
	0x1BF0,
	0x1BF2,
	0x1C2D,
	0x1C34,
	0xA94F,
	0xA953,
	0xA982,
	0xA983,
	0xAA40,
	0xAA4E,
	0xABDB,
	0xABE3,
	0x11A8A,
	0x11A96
};

static const UV UNI_INSC__CONSONANTHEADLETTER_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF88,
	0xF8D
};

static const UV UNI_INSC__CONSONANTINITIALPOSTFIXED_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1A5A,
	0x1A5B
};

static const UV UNI_INSC__CONSONANTKILLER_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE4C,
	0xE4D,
	0x17CD,
	0x17CE
};

static const UV UNI_INSC__CONSONANTMEDIAL_invlist[] = {  /* for all charsets */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA75,
	0xA76,
	0xEBC,
	0xEBE,
	0x103B,
	0x103F,
	0x105E,
	0x1061,
	0x1082,
	0x1083,
	0x1A55,
	0x1A57,
	0xA8B4,
	0xA8B5,
	0xA9BD,
	0xA9C0,
	0xAA33,
	0xAA37,
	0x1171D,
	0x11720,
	0x11940,
	0x11941,
	0x11942,
	0x11943,
	0x11A3B,
	0x11A3F,
	0x11D47,
	0x11D48
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_INSC__CONSONANTPLACEHOLDER_invlist[] = {  /* for ASCII/Latin1 */
	31,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D,
	0x2E,
	0xA0,
	0xA1,
	0xD7,
	0xD8,
	0x980,
	0x981,
	0xA72,
	0xA74,
	0x104B,
	0x104C,
	0x104E,
	0x104F,
	0x1900,
	0x1901,
	0x1CFA,
	0x1CFB,
	0x2010,
	0x2015,
	0x25CC,
	0x25CD,
	0xAA74,
	0xAA77,
	0x11A3F,
	0x11A40,
	0x11A45,
	0x11A46,
	0x11EF2,
	0x11EF3
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_INSC__CONSONANTPLACEHOLDER_invlist[] = {  /* for EBCDIC 1047 */
	31,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x60,
	0x61,
	0xBF,
	0xC0,
	0x980,
	0x981,
	0xA72,
	0xA74,
	0x104B,
	0x104C,
	0x104E,
	0x104F,
	0x1900,
	0x1901,
	0x1CFA,
	0x1CFB,
	0x2010,
	0x2015,
	0x25CC,
	0x25CD,
	0xAA74,
	0xAA77,
	0x11A3F,
	0x11A40,
	0x11A45,
	0x11A46,
	0x11EF2,
	0x11EF3
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_INSC__CONSONANTPLACEHOLDER_invlist[] = {  /* for EBCDIC 037 */
	31,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x42,
	0x60,
	0x61,
	0xBF,
	0xC0,
	0x980,
	0x981,
	0xA72,
	0xA74,
	0x104B,
	0x104C,
	0x104E,
	0x104F,
	0x1900,
	0x1901,
	0x1CFA,
	0x1CFB,
	0x2010,
	0x2015,
	0x25CC,
	0x25CD,
	0xAA74,
	0xAA77,
	0x11A3F,
	0x11A40,
	0x11A45,
	0x11A46,
	0x11EF2,
	0x11EF3
};

#  endif	/* EBCDIC 037 */

static const UV UNI_INSC__CONSONANTPRECEDINGREPHA_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD4E,
	0xD4F,
	0x11941,
	0x11942,
	0x11D46,
	0x11D47,
	0x11F02,
	0x11F03
};

static const UV UNI_INSC__CONSONANTPREFIXED_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x111C2,
	0x111C4,
	0x1193F,
	0x11940,
	0x11A3A,
	0x11A3B,
	0x11A84,
	0x11A8A
};

static const UV UNI_INSC__CONSONANTSUBJOINED_invlist[] = {  /* for all charsets */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0x1929,
	0x192C,
	0x1A57,
	0x1A58,
	0x1A5B,
	0x1A5F,
	0x1BA1,
	0x1BA4,
	0x1BAC,
	0x1BAE,
	0x1C24,
	0x1C26,
	0xA867,
	0xA869,
	0xA871,
	0xA872,
	0x11C92,
	0x11CA8,
