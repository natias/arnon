implement the C<encoding> pragma. As of Perl 5.26, rather than being
deprecated, assigning to this variable now has no effect except to issue
the warning.

=item *

L<Too few arguments for subroutine '%s'
|perldiag/Too few arguments for subroutine '%s'>

This warning now includes the name of the offending subroutine.

=item *

L<Too many arguments for subroutine '%s'
|perldiag/Too many arguments for subroutine '%s'>

This warning now includes the name of the offending subroutine.

=item *

L<Unescaped left brace in regex is deprecated here (and will be fatal in Perl 5.30), passed through in regex; marked by S<< E<lt>-- HERE >> in mE<sol>%sE<sol>
|perldiag/Unescaped left brace in regex is deprecated here (and will be fatal in Perl 5.30), passed through in regex; marked by S<< E<lt>-- HERE >> in mE<sol>%sE<sol>>

This existing warning has had the I<here (and will be fatal...)> text
added in this release.

=item *

L<Unknown charname '' is deprecated. Its use will be fatal in Perl 5.28
|perldiag/Unknown charname '' is deprecated. Its use will be fatal in Perl 5.28>

This existing warning has had the I<its use will be fatal> text added in
this release.

=item *

L<Use of bare E<lt>E<lt> to mean E<lt>E<lt>"" is deprecated. Its use will be fatal in Perl 5.28
|perldiag/Use of bare E<lt>E<lt> to mean E<lt>E<lt>"" is deprecated. Its use will be fatal in Perl 5.28>

This existing warning has had the I<its use will be fatal> text added in
this release.

=item *

L<Use of code point 0x%s is deprecated; the permissible max is 0x%s.  This will be fatal in Perl 5.28
|perldiag/Use of code point 0x%s is deprecated; the permissible max is 0x%s.  This will be fatal in Perl 5.28>

This existing warning has had the I<this will be fatal> text added in
this release.

=item *

L<Use of comma-less variable list is deprecated. Its use will be fatal in Perl 5.28
|perldiag/Use of comma-less variable list is deprecated. Its use will be fatal in Perl 5.28>

This existing warning has had the I<its use will be fatal> text added in
this release.

=item *

L<Use of inherited C<AUTOLOAD> for non-method %s() is deprecated. This will be fatal in Perl 5.28
|perldiag/Use of inherited C<AUTOLOAD> for non-method %s() is deprecated. This will be fatal in Perl 5.28>

This existing warning has had the I<this will be fatal> text added in
this release.

=item *

L<Use of strings with code points over 0xFF as arguments to %s operator is deprecated. This will be a fatal error in Perl 5.28
|perldiag/Use of strings with code points over 0xFF as arguments to %s operator is deprecated. This will be a fatal error in Perl 5.28>

This existing warning has had the I<this will be a fatal error> text added in
this release.

=back

=head1 Utility Changes

=head2 F<c2ph> and F<pstruct>

=over 4

=item *

These old utilities have long since superceded by L<h2xs>, and are
now gone from the distribution.

=back

=head2 F<Porting/pod_lib.pl>

=over 4

=item *

Removed spurious executable bit.

=item *

Account for the possibility of DOS file endings.

=back

=head2 F<Porting/sync-with-cpan>

=over 4

=item *

Many improvements.

=back

=head2 F<perf/benchmarks>

=over 4

=item *

Tidy file, rename some symbols.

=back

=head2 F<Porting/checkAUTHORS.pl>

=over 4

=item *

Replace obscure character range with C<\w>.

=back

=head2 F<t/porting/regen.t>

=over 4

=item *

Try to be more helpful when tests fail.

=back

=head2 F<utils/h2xs.PL>

=over 4

=item *

Avoid infinite loop for enums.

=back

=head2 L<perlbug>

=over 4

=item *

Long lines in the message body are now wrapped at 900 characters, to stay
well within the 1000-character limit imposed by SMTP mail transfer agents.
This is particularly likely to be important for the list of arguments to
F<Configure>, which can readily exceed the limit if, for example, it names
several non-default installation paths.  This change also adds the first unit
tests for perlbug.
L<[perl #128020]|https://rt.perl.org/Public/Bug/Display.html?id=128020>

=back

=head1 Configuration and Compilation

=over 4

=item *

C<-Ddefault_inc_excludes_dot> has added, and enabled by default.

=item *

The C<dtrace> build process has further changes
L<[GH #15718]|https://github.com/Perl/perl5/issues/15718>:

=over

=item *

If the C<-xnolibs> is available, use that so a F<dtrace> perl can be
built within a FreeBSD jail.

=item *

On systems that build a F<dtrace> object file (FreeBSD, Solaris, and
SystemTap's dtrace emulation), copy the input objects to a separate
directory and process them there, and use those objects in the link,
since C<dtrace -G> also modifies these objects.

=item *

Add F<libelf> to the build on FreeBSD 10.x, since F<dtrace> adds
references to F<libelf> symbols.

=item *

Generate a dummy F<dtrace_main.o> if C<dtrace -G> fails to build it.  A
default build on Solaris generates probes from the unused inline
functions, while they don't on FreeBSD, which causes C<dtrace -G> to
fail.

=back

=item *

You can now disable perl's use of the C<PERL_HASH_SEED> and
C<PERL_PERTURB_KEYS> environment variables by configuring perl with
C<-Accflags=NO_PERL_HASH_ENV>.

=item *

You can now disable perl's use of the C<PERL_HASH_SEED_DEBUG> environment
variable by configuring perl with
C<-Accflags=-DNO_PERL_HASH_SEED_DEBUG>.

=item *

F<Configure> now zeroes out the alignment bytes when calculating the bytes
for 80-bit C<NaN> and C<Inf> to make builds more reproducible.
L<[GH #15725]|https://github.com/Perl/perl5/issues/15725>

=item *

Since v5.18, for testing purposes we have included support for
building perl with a variety of non-standard, and non-recommended
hash functions.  Since we do not recommend the use of these functions,
we have removed them and their corresponding build options.  Specifically
this includes the following build options:

    PERL_HASH_FUNC_SDBM
    PERL_HASH_FUNC_DJB2
    PERL_HASH_FUNC_SUPERFAST
    PERL_HASH_FUNC_MURMUR3
    PERL_HASH_FUNC_ONE_AT_A_TIME
    PERL_HASH_FUNC_ONE_AT_A_TIME_OLD
    PERL_HASH_FUNC_MURMUR_HASH_64A
    PERL_HASH_FUNC_MURMUR_HASH_64B

=item *

Remove "Warning: perl appears in your path"

This install warning is more or less obsolete, since most platforms already
B<will> have a F</usr/bin/perl> or similar provided by the OS.

=item *

Reduce verbosity of C<make install.man>

Previously, two progress messages were emitted for each manpage: one by
installman itself, and one by the function in F<install_lib.pl> that it calls to
actually install the file.  Disabling the second of those in each case saves
over 750 lines of unhelpful output.

=item *

Cleanup for C<clang -Weverything> support.
L<[GH #15683]|https://github.com/Perl/perl5/issues/15683>

=item *

F<Configure>: signbit scan was assuming too much, stop assuming negative 0.

=item *

Various compiler warnings have been silenced.

=item *

Several smaller changes have been made to remove impediments to compiling
under C++11.

=item *

Builds using C<USE_PAD_RESET> now work again; this configuration had
bit-rotted.

=item *

A probe for C<gai_strerror> was added to F<Configure> that checks if
the C<gai_strerror()> routine is available and can be used to
translate error codes returned by C<getaddrinfo()> into human
readable strings.

=item *

F<Configure> now aborts if both C<-Duselongdouble> and C<-Dusequadmath> are
requested.
L<[GH #14944]|https://github.com/Perl/perl5/issues/14944>

=item *

Fixed a bug in which F<Configure> could append C<-quadmath> to the
archname even if it was already present.
L<[GH #15423]|https://github.com/Perl/perl5/issues/15423>

=item *

Clang builds with C<-DPERL_GLOBAL_STRUCT> or
C<-DPERL_GLOBAL_STRUCT_PRIVATE> have
been fixed (by disabling Thread Safety Analysis for these configurations).

=item *

F<make_ext.pl> no longer updates a module's F<pm_to_blib> file when no
files require updates.  This could cause dependencies, F<perlmain.c>
in particular, to be rebuilt unnecessarily.
L<[GH #15060]|https://github.com/Perl/perl5/issues/15060>

=item *

The output of C<perl -V> has been reformatted so that each configuration
and compile-time option is now listed one per line, to improve
readability.

=item *

F<Configure> now builds C<miniperl> and C<generate_uudmap> if you
invoke it with C<-Dusecrosscompiler> but not C<-Dtargethost=somehost>.
This means you can supply your target platform C<config.sh>, generate
the headers and proceed to build your cross-target perl.
L<[GH #15126]|https://github.com/Perl/perl5/issues/15126>

=item *

Perl built with C<-Accflags=-DPERL_TRACE_OPS> now only dumps the operator
counts when the environment variable C<PERL_TRACE_OPS> is set to a
non-zero integer.  This allows C<make test> to pass on such a build.

=item *

When building with GCC 6 and link-time optimization (the C<-flto> option to
C<gcc>), F<Configure> was treating all probed symbols as present on the
system, regardless of whether they actually exist.  This has been fixed.
L<[GH #15322]|https://github.com/Perl/perl5/issues/15322>

=item *

The F<t/test.pl> library is used for internal testing of Perl itself, and
also copied by several CPAN modules.  Some of those modules must work on
older versions of Perl, so F<t/test.pl> must in turn avoid newer Perl
features.  Compatibility with Perl 5.8 was inadvertently removed some time
ago; it has now been restored.
L<[GH #15302]|https://github.com/Perl/perl5/issues/15302>

=item *

The build process no longer emits an extra blank line before building each
"simple" extension (those with only F<*.pm> and F<*.pod> files).

=back

=head1 Testing

Tests were added and changed to reflect the other additions and changes
in this release.  Furthermore, these substantive changes were made:

=over 4

=item *

A new test script, F<comp/parser_run.t>, has been added that is like
F<comp/parser.t> but with F<test.pl> included so that C<runperl()> and the
like are available for use.

=item *

Tests for locales were erroneously using locales incompatible with Perl.

=item *

Some parts of the test suite that try to exhaustively test edge cases in the
regex implementation have been restricted to running for a maximum of five
minutes.  On slow systems they could otherwise take several hours, without
significantly improving our understanding of the correctness of the code
under test.

=item *

A new internal facility allows analysing the time taken by the individual
tests in Perl's own test suite; see F<Porting/harness-timer-report.pl>.

=item *

F<t/re/regexp_nonull.t> has been added to test that the regular expression
engine can handle scalars that do not have a null byte just past the end of
the string.

=item *

A new test script, F<t/op/decl-refs.t>, has been added to test the new feature
L</Declaring a reference to a variable>.

=item *

A new test script, F<t/re/keep_tabs.t> has been added to contain tests
where C<\t> characters should not be expanded into spaces.

=item *

A new test script, F<t/re/anyof.t>, has been added to test that the ANYOF nodes
generated by bracketed character classes are as expected.

=item *

There is now more extensive testing of the Unicode-related API macros
and functions.

=item *

Several of the longer running API test files have been split into
multiple test files so that they can be run in parallel.

=item *

F<t/harness> now tries really hard not to run tests which are located
outside of the Perl source tree.
L<[GH #14578]|https://github.com/Perl/perl5/issues/14578>

=item *

Prevent debugger tests (F<lib/perl5db.t>) from failing due to the contents
of C<$ENV{PERLDB_OPTS}>.
L<[GH #15782]|https://github.com/Perl/perl5/issues/15782>

=back

=head1 Platform Support

=head2 New Platforms

=over 4

=item NetBSD/VAX

Perl now compiles under NetBSD on VAX machines.  However, it's not
possible for that platform to implement floating-point infinities and
NaNs compatible with most modern systems, which implement the IEEE-754
floating point standard.  The hexadecimal floating point (C<0x...p[+-]n>
literals, C<printf %a>) is not implemented, either.
The C<make test> passes 98% of tests.

=over 4

=item *

Test fixes and minor updates.

=item *

Account for lack of C<inf>, C<nan>, and C<-0.0> support.

=back

=back

=head2 Platform-Specific Notes

=over 4

=item Darwin

=over 4

=item *

Don't treat C<-Dprefix=/usr> as special: instead require an extra option
C<-Ddarwin_distribution> to produce the same results.

=item *

OS X El Capitan doesn't implement the C<clock_gettime()> or
C<clock_getres()> APIs; emulate them as necessary.

=item *

Deprecated C<syscall(2)> on macOS 10.12.

=back

=item EBCDIC

Several tests have been updated to work (or be skipped) on EBCDIC platforms.

=item HP-UX

The L<Net::Ping> UDP test is now skipped on HP-UX.

=item Hurd

The hints for Hurd have been improved, enabling malloc wrap and reporting the
GNU libc used (previously it was an empty string when reported).

=item VAX

VAX floating point formats are now supported on NetBSD.

=item VMS

=over 4

=item *

The path separator for the C<PERL5LIB> and C<PERLLIB> environment entries is
now a colon (C<":">) when running under a Unix shell.  There is no change when
running under DCL (it's still C<"|">).

=item *

F<configure.com> now recognizes the VSI-branded C compiler and no longer
recognizes the "DEC"-branded C compiler (as there hasn't been such a thing for
15 or more years).

=back

=item Windows

=over 4

=item *

Support for compiling perl on Windows using Microsoft Visual Studio 2015
(containing Visual C++ 14.0) has been added.

This version of VC++ includes a completely rewritten C run-time library, some
of the changes in which mean that work done to resolve a socket
C<close()> bug in
perl #120091 and perl #118059 is not workable in its current state with this
version of VC++.  Therefore, we have effectively reverted that bug fix for
VS2015 onwards on the basis that being able to build with VS2015 onwards is
more important than keeping the bug fix.  We may revisit this in the future to
attempt to fix the bug again in a way that is compatible with VS2015.

These changes do not affect compilation with GCC or with Visual Studio versions
up to and including VS2013, I<i.e.>, the bug fix is retained (unchanged) for those
compilers.

Note that you may experience compatibility problems if you mix a perl built
with GCC or VS E<lt>= VS2013 with XS modules built with VS2015, or if you mix a
perl built with VS2015 with XS modules built with GCC or VS E<lt>= VS2013.
Some incompatibility may arise because of the bug fix that has been reverted
for VS2015 builds of perl, but there may well be incompatibility anyway because
of the rewritten CRT in VS2015 (I<e.g.>, see discussion at
L<http://stackoverflow.com/questions/30412951>).

=item *

It now automatically detects GCC versus Visual C and sets the VC version
number on Win32.

=back

=item Linux

Drop support for Linux F<a.out> executable format. Linux has used ELF for
over twenty years.

=item OpenBSD 6

OpenBSD 6 still does not support returning C<pid>, C<gid>, or C<uid> with
C<SA_SIGINFO>.  Make sure to account for it.

=item FreeBSD

F<t/uni/overload.t>: Skip hanging test on FreeBSD.

=item DragonFly BSD

DragonFly BSD now has support for C<setproctitle()>.
L<[GH #15703]|https://github.com/Perl/perl5/issues/15703>.

=back

=head1 Internal Changes

=over 4

=item *

A new API function L<C<sv_setpv_bufsize()>|perlapi/sv_setpv_bufsize>
allows simultaneously setting the
length and the allocated size of the buffer in an C<SV>, growing the
buffer if necessary.

=item *

A new API macro L<C<SvPVCLEAR()>|perlapi/SvPVCLEAR> sets its C<SV>
argument to an empty string,
like Perl-space C<$x = ''>, but with several optimisations.

=item *

Several new macros and functions for dealing with Unicode and
UTF-8-encoded strings have been added to the API, as well as some
changes in the
functionality of existing functions (see L<perlapi/Unicode Support> for
more details):

=over

=item *

New versions of the API macros like C<isALPHA_utf8> and C<toLOWER_utf8>
have been added, each with the suffix C<_safe>, like
L<C<isSPACE_utf8_safe>|perlapi/isSPACE>.  These take an extra
parameter, giving an upper
limit of how far into the string it is safe to read.  Using the old
versions could cause attempts to read beyond the end of the input buffer
if the UTF-8 is not well-formed, and their use now raises a deprecation
warning.  Details are at L<perlapi/Character classification>.

=item *

Macros like L<C<isALPHA_utf8>|perlapi/isALPHA> and
L<C<toLOWER_utf8>|perlapi/toLOWER_utf8> now die if they detect
that their input UTF-8 is malformed.  A deprecation warning had been
issued since Perl 5.18.

=item *

Several new macros for analysing the validity of utf8 sequences. These
are:

L<C<UTF8_GOT_ABOVE_31_BIT>|perlapi/UTF8_GOT_ABOVE_31_BIT>
L<C<UTF8_GOT_CONTINUATION>|perlapi/UTF8_GOT_CONTINUATION>
L<C<UTF8_GOT_EMPTY>|perlapi/UTF8_GOT_EMPTY>
L<C<UTF8_GOT_LONG>|perlapi/UTF8_GOT_LONG>
L<C<UTF8_GOT_NONCHAR>|perlapi/UTF8_GOT_NONCHAR>
L<C<UTF8_GOT_NON_CONTINUATION>|perlapi/UTF8_GOT_NON_CONTINUATION>
L<C<UTF8_GOT_OVERFLOW>|perlapi/UTF8_GOT_OVERFLOW>
L<C<UTF8_GOT_SHORT>|perlapi/UTF8_GOT_SHORT>
L<C<UTF8_GOT_SUPER>|perlapi/UTF8_GOT_SUPER>
L<C<UTF8_GOT_SURROGATE>|perlapi/UTF8_GOT_SURROGATE>
L<C<UTF8_IS_INVARIANT>|perlapi/UTF8_IS_INVARIANT>
L<C<UTF8_IS_NONCHAR>|perlapi/UTF8_IS_NONCHAR>
L<C<UTF8_IS_SUPER>|perlapi/UTF8_IS_SUPER>
L<C<UTF8_IS_SURROGATE>|perlapi/UTF8_IS_SURROGATE>
L<C<UVCHR_IS_INVARIANT>|perlapi/UVCHR_IS_INVARIANT>
L<C<isUTF8_CHAR_flags>|perlapi/isUTF8_CHAR_flags>
L<C<isSTRICT_UTF8_CHAR>|perlapi/isSTRICT_UTF8_CHAR>
L<C<isC9_STRICT_UTF8_CHAR>|perlapi/isC9_STRICT_UTF8_CHAR>

=item *

Functions that are all extensions of the C<is_utf8_string_I<*>()> functions,
that apply various restrictions to the UTF-8 recognized as valid:

L<C<is_strict_utf8_string>|perlapi/is_strict_utf8_string>,
L<C<is_strict_utf8_string_loc>|perlapi/is_strict_utf8_string_loc>,
L<C<is_strict_utf8_string_loclen>|perlapi/is_strict_utf8_string_loclen>,

L<C<is_c9strict_utf8_string>|perlapi/is_c9strict_utf8_string>,
L<C<is_c9strict_utf8_string_loc>|perlapi/is_c9strict_utf8_string_loc>,
L<C<is_c9strict_utf8_string_loclen>|perlapi/is_c9strict_utf8_string_loclen>,

L<C<is_utf8_string_flags>|perlapi/is_utf8_string_flags>,
L<C<is_utf8_string_loc_flags>|perlapi/is_utf8_string_loc_flags>,
L<C<is_utf8_string_loclen_flags>|perlapi/is_utf8_string_loclen_flags>,

L<C<is_utf8_fixed_width_buf_flags>|perlapi/is_utf8_fixed_width_buf_flags>,
L<C<is_utf8_fixed_width_buf_loc_flags>|perlapi/is_utf8_fixed_width_buf_loc_flags>,
L<C<is_utf8_fixed_width_buf_loclen_flags>|perlapi/is_utf8_fixed_width_buf_loclen_flags>.

L<C<is_utf8_invariant_string>|perlapi/is_utf8_invariant_string>.
L<C<is_utf8_valid_partial_char>|perlapi/is_utf8_valid_partial_char>.
L<C<is_utf8_valid_partial_char_flags>|perlapi/is_utf8_valid_partial_char_flags>.

=item *

The functions L<C<utf8n_to_uvchr>|perlapi/utf8n_to_uvchr> and its
derivatives have had several changes of behaviour.

Calling them, while passing a string length of 0 is now asserted against
in DEBUGGING builds, and otherwise, returns the Unicode REPLACEMENT
CHARACTER.   If you have nothing to decode, you shouldn't call the decode
function.

They now return the Unicode REPLACEMENT CHARACTER if called with UTF-8
that has the overlong malformation and that malformation is allowed by
the input parameters.  This malformation is where the UTF-8 looks valid
syntactically, but there is a shorter sequence that yields the same code
point.  This has been forbidden since Unicode version 3.1.

They now accept an input
flag to allow the overflow malformation.  This malformation is when the
UTF-8 may be syntactically valid, but the code point it represents is
not capable of being represented in the word length on the platform.
What "allowed" means, in this case, is that the function doesn't return an
error, and it advances the parse pointer to beyond the UTF-8 in
question, but it returns the Unicode REPLACEMENT CHARACTER as the value
of the code point (since the real value is not representable).

They no longer abandon searching for other malformations when the first
one is encountered.  A call to one of these functions thus can generate
multiple diagnostics, instead of just one.

=item *

L<C<valid_utf8_to_uvchr()>|perlapi/valid_utf8_to_uvchr> has been added
to the API (although it was
present in core earlier). Like C<utf8_to_uvchr_buf()>, but assumes that
the next character is well-formed.  Use with caution.

=item *

A new function, L<C<utf8n_to_uvchr_error>|perlapi/utf8n_to_uvchr_error>,
has been added for
use by modules that need to know the details of UTF-8 malformations
beyond pass/fail.  Previously, the only ways to know why a sequence was
ill-formed was to capture and parse the generated diagnostics or to do
your own analysis.

=item *

There is now a safer version of utf8_hop(), called
L<C<utf8_hop_safe()>|perlapi/utf8_hop_safe>.
Unlike utf8_hop(), utf8_hop_safe() won't navigate before the beginning or
after the end of the supplied buffer.

=item *

Two new functions, L<C<utf8_hop_forward()>|perlapi/utf8_hop_forward> and
L<C<utf8_hop_back()>|perlapi/utf8_hop_back> are
similar to C<utf8_hop_safe()> but are for when you know which direction
you wish to travel.

=item *

Two new macros which return useful utf8 byte sequences:

L<C<BOM_UTF8>|perlapi/BOM_UTF8>

L<C<REPLACEMENT_CHARACTER_UTF8>|perlapi/REPLACEMENT_CHARACTER_UTF8>

=back

=item *

Perl is now built with the C<PERL_OP_PARENT> compiler define enabled by
default.  To disable it, use the C<PERL_NO_OP_PARENT> compiler define.
This flag alters how the C<op_sibling> field is used in C<OP> structures,
and has been available optionally since perl 5.22.

See L<perl5220delta/"Internal Changes"> for more details of what this
build option does.

=item *

Three new ops, C<OP_ARGELEM>, C<OP_ARGDEFELEM>, and C<OP_ARGCHECK> have
been added.  These are intended principally to implement the individual
elements of a subroutine signature, plus any overall checking required.

=item *

The C<OP_PUSHRE> op has been eliminated and the C<OP_SPLIT> op has been
changed from class C<LISTOP> to C<PMOP>.

Formerly the first child of a split would be a C<pushre>, which would have the
C<split>'s regex attached to it. Now the regex is attached directly to the
C<split> op, and the C<pushre> has been eliminated.

=item *

The L<C<op_class()>|perlapi/op_class> API function has been added.  This
is like the existing
C<OP_CLASS()> macro, but can more accurately determine what struct an op
has been allocated as.  For example C<OP_CLASS()> might return
C<OA_BASEOP_OR_UNOP> indicating that ops of this type are usually
allocated as an C<OP> or C<UNOP>; while C<op_class()> will return
C<OPclass_BASEOP> or C<OPclass_UNOP> as appropriate.

=item *

All parts of the internals now agree that the C<sassign> op is a C<BINOP>;
previously it was listed as a C<BASEOP> in F<regen/opcodes>, which meant
that several parts of the internals had to be special-cased to accommodate
it.  This oddity's original motivation was to handle code like C<$x ||= 1>;
that is now handled in a simpler way.

=item *

The output format of the L<C<op_dump()>|perlapi/op_dump> function (as
used by C<perl -Dx>)
has changed: it now displays an "ASCII-art" tree structure, and shows more
low-level details about each op, such as its address and class.

=item *

The C<PADOFFSET> type has changed from being unsigned to signed, and
several pad-related variables such as C<PL_padix> have changed from being
of type C<I32> to type C<PADOFFSET>.

=item *

The C<DEBUGGING>-mode output for regex compilation and execution has been
enhanced.

=item *

Several obscure SV flags have been eliminated, sometimes along with the
macros which manipulate them: C<SVpbm_VALID>, C<SVpbm_TAIL>, C<SvTAIL_on>,
C<SvTAIL_off>, C<SVrepl_EVAL>, C<SvEVALED>.

=item *

An OP C<op_private> flag has been eliminated: C<OPpRUNTIME>. This used to
often get set on C<PMOP> ops, but had become meaningless over time.

=back

=head1 Selected Bug Fixes

=over 4

=item *

Perl no longer panics when switching into some locales on machines with
buggy C<strxfrm()> implementations in their F<libc>.
L<[GH #13768]|https://github.com/Perl/perl5/issues/13768>

=item *

C< $-{$name} > would leak an C<AV> on each access if the regular
expression had no named captures.  The same applies to access to any
hash tied with L<Tie::Hash::NamedCapture> and C<< all =E<gt> 1 >>.
L<[GH #15882]|https://github.com/Perl/perl5/issues/15882>

=item *

Attempting to use the deprecated variable C<$#> as the object in an
indirect object method call could cause a heap use after free or
buffer overflow.
L<[GH #15599]|https://github.com/Perl/perl5/issues/15599>

=item *

When checking for an indirect object method call, in some rare cases
the parser could reallocate the line buffer but then continue to use
pointers to the old buffer.
L<[GH #15585]|https://github.com/Perl/perl5/issues/15585>

=item *

Supplying a glob as the format argument to
L<C<formline>|perlfunc/formline> would
cause an assertion failure.
L<[GH #15862]|https://github.com/Perl/perl5/issues/15862>

=item *

Code like C< $value1 =~ qr/.../ ~~ $value2 > would have the match
converted into a C<qr//> operator, leaving extra elements on the stack to
confuse any surrounding expression.
L<[GH #15859]|https://github.com/Perl/perl5/issues/15859>

=item *

Since v5.24 in some obscure cases, a regex which included code blocks
from multiple sources (I<e.g.>, via embedded via C<qr//> objects) could end up
with the wrong current pad and crash or give weird results.
L<[GH #15657]|https://github.com/Perl/perl5/issues/15657>

=item *

Occasionally C<local()>s in a code block within a patterns weren't being
undone when the pattern matching backtracked over the code block.
L<[GH #15056]|https://github.com/Perl/perl5/issues/15056>

=item *

Using C<substr()> to modify a magic variable could access freed memory
in some cases.
L<[GH #15871]|https://github.com/Perl/perl5/issues/15871>

=item *

Under C<use utf8>, the entire source code is now checked for being UTF-8
well formed, not just quoted strings as before.
L<[GH #14973]|https://github.com/Perl/perl5/issues/14973>.

=item *

The range operator C<".."> on strings now handles its arguments correctly when in
the scope of the L<< C<unicode_strings>|feature/"The 'unicode_strings' feature" >>
feature.  The previous behaviour was sufficiently unexpected that we believe no
correct program could have made use of it.

=item *

The C<split> operator did not ensure enough space was allocated for
its return value in scalar context.  It could then write a single
pointer immediately beyond the end of the memory block allocated for
the stack.
L<[GH #15749]|https://github.com/Perl/perl5/issues/15749>

=item *

Using a large code point with the C<"W"> pack template character with
the current output position aligned at just the right point could
cause a write of a single zero byte immediately beyond the end of an
allocated buffer.
L<[GH #15572]|https://github.com/Perl/perl5/issues/15572>

=item *

Supplying a format's picture argument as part of the format argument list
where the picture specifies modifying the argument could cause an
access to the new freed compiled format.
L<[GH #15566]|https://github.com/Perl/perl5/issues/15566>

=item *

The L<sort()|perlfunc/sort> operator's built-in numeric comparison
function didn't handle large integers that weren't exactly
representable by a double.  This now uses the same code used to
implement the C<< E<lt>=E<gt> >> operator.
L<[GH #15768]|https://github.com/Perl/perl5/issues/15768>

=item *

Fix issues with C</(?{ ... E<lt>E<lt>EOF })/> that broke
L<Method::Signatures>.
L<[GH #15779]|https://github.com/Perl/perl5/issues/15779>

=item *

Fixed an assertion failure with C<chop> and C<chomp>, which
could be triggered by C<chop(@x =~ tr/1/1/)>.
L<[GH #15738]|https://github.com/Perl/perl5/issues/15738>.

=item *

Fixed a comment skipping error in patterns under C</x>; it could stop
skipping a byte early, which could be in the middle of a UTF-8
character.
L<[GH #15790]|https://github.com/Perl/perl5/issues/15790>.

=item *

F<perldb> now ignores F</dev/tty> on non-Unix systems.
L<[GH #12244]|https://github.com/Perl/perl5/issues/12244>;

=item *

Fix assertion failure for C<{}-E<gt>$x> when C<$x> isn't defined.
L<[GH #15791]|https://github.com/Perl/perl5/issues/15791>.

=item *

Fix an assertion error which could be triggered when a lookahead string
in patterns exceeded a minimum length.
L<[GH #15796]|https://github.com/Perl/perl5/issues/15796>.

=item *

Only warn once per literal number about a misplaced C<"_">.
L<[GH #9989]|https://github.com/Perl/perl5/issues/9989>.

=item *

The C<tr///> parse code could be looking at uninitialized data after a
perse error.
L<[GH #15624]|https://github.com/Perl/perl5/issues/15624>.

=item *

In a pattern match, a back-reference (C<\1>) to an unmatched capture could
read back beyond the start of the string being matched.
L<[GH #15634]|https://github.com/Perl/perl5/issues/15634>.

=item *

C<use re 'strict'> is supposed to warn if you use a range (such as
C</(?[ [ X-Y ] ])/>) whose start and end digit aren't from the same group
of 10.  It didn't do that for five groups of mathematical digits starting
at C<U+1D7E>.

=item *

A sub containing a "forward" declaration with the same name (I<e.g.>,
C<sub c { sub c; }>) could sometimes crash or loop infinitely.
L<[GH #15557]|https://github.com/Perl/perl5/issues/15557>

=item *

A crash in executing a regex with a non-anchored UTF-8 substring against a
target string that also used UTF-8 has been fixed.
L<[GH #15628]|https://github.com/Perl/perl5/issues/15628>

=item *

Previously, a shebang line like C<#!perl -i u> could be erroneously
interpreted as requesting the C<-u> option.  This has been fixed.
