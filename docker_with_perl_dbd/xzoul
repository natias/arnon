#  define SSL_F_SSL_SET_FD                                 0
#  define SSL_F_SSL_SET_PKEY                               0
#  define SSL_F_SSL_SET_RFD                                0
#  define SSL_F_SSL_SET_SESSION                            0
#  define SSL_F_SSL_SET_SESSION_ID_CONTEXT                 0
#  define SSL_F_SSL_SET_SESSION_TICKET_EXT                 0
#  define SSL_F_SSL_SET_TLSEXT_MAX_FRAGMENT_LENGTH         0
#  define SSL_F_SSL_SET_WFD                                0
#  define SSL_F_SSL_SHUTDOWN                               0
#  define SSL_F_SSL_SRP_CTX_INIT                           0
#  define SSL_F_SSL_START_ASYNC_JOB                        0
#  define SSL_F_SSL_UNDEFINED_FUNCTION                     0
#  define SSL_F_SSL_UNDEFINED_VOID_FUNCTION                0
#  define SSL_F_SSL_USE_CERTIFICATE                        0
#  define SSL_F_SSL_USE_CERTIFICATE_ASN1                   0
#  define SSL_F_SSL_USE_CERTIFICATE_FILE                   0
#  define SSL_F_SSL_USE_PRIVATEKEY                         0
#  define SSL_F_SSL_USE_PRIVATEKEY_ASN1                    0
#  define SSL_F_SSL_USE_PRIVATEKEY_FILE                    0
#  define SSL_F_SSL_USE_PSK_IDENTITY_HINT                  0
#  define SSL_F_SSL_USE_RSAPRIVATEKEY                      0
#  define SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1                 0
#  define SSL_F_SSL_USE_RSAPRIVATEKEY_FILE                 0
#  define SSL_F_SSL_VALIDATE_CT                            0
#  define SSL_F_SSL_VERIFY_CERT_CHAIN                      0
#  define SSL_F_SSL_VERIFY_CLIENT_POST_HANDSHAKE           0
#  define SSL_F_SSL_WRITE                                  0
#  define SSL_F_SSL_WRITE_EARLY_DATA                       0
#  define SSL_F_SSL_WRITE_EARLY_FINISH                     0
#  define SSL_F_SSL_WRITE_EX                               0
#  define SSL_F_SSL_WRITE_INTERNAL                         0
#  define SSL_F_STATE_MACHINE                              0
#  define SSL_F_TLS12_CHECK_PEER_SIGALG                    0
#  define SSL_F_TLS12_COPY_SIGALGS                         0
#  define SSL_F_TLS13_CHANGE_CIPHER_STATE                  0
#  define SSL_F_TLS13_ENC                                  0
#  define SSL_F_TLS13_FINAL_FINISH_MAC                     0
#  define SSL_F_TLS13_GENERATE_SECRET                      0
#  define SSL_F_TLS13_HKDF_EXPAND                          0
#  define SSL_F_TLS13_RESTORE_HANDSHAKE_DIGEST_FOR_PHA     0
#  define SSL_F_TLS13_SAVE_HANDSHAKE_DIGEST_FOR_PHA        0
#  define SSL_F_TLS13_SETUP_KEY_BLOCK                      0
#  define SSL_F_TLS1_CHANGE_CIPHER_STATE                   0
#  define SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS            0
#  define SSL_F_TLS1_ENC                                   0
#  define SSL_F_TLS1_EXPORT_KEYING_MATERIAL                0
#  define SSL_F_TLS1_GET_CURVELIST                         0
#  define SSL_F_TLS1_PRF                                   0
#  define SSL_F_TLS1_SAVE_U16                              0
#  define SSL_F_TLS1_SETUP_KEY_BLOCK                       0
#  define SSL_F_TLS1_SET_GROUPS                            0
#  define SSL_F_TLS1_SET_RAW_SIGALGS                       0
#  define SSL_F_TLS1_SET_SERVER_SIGALGS                    0
#  define SSL_F_TLS1_SET_SHARED_SIGALGS                    0
#  define SSL_F_TLS1_SET_SIGALGS                           0
#  define SSL_F_TLS_CHOOSE_SIGALG                          0
#  define SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK          0
#  define SSL_F_TLS_COLLECT_EXTENSIONS                     0
#  define SSL_F_TLS_CONSTRUCT_CERTIFICATE_AUTHORITIES      0
#  define SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST          0
#  define SSL_F_TLS_CONSTRUCT_CERT_STATUS                  0
#  define SSL_F_TLS_CONSTRUCT_CERT_STATUS_BODY             0
#  define SSL_F_TLS_CONSTRUCT_CERT_VERIFY                  0
#  define SSL_F_TLS_CONSTRUCT_CHANGE_CIPHER_SPEC           0
#  define SSL_F_TLS_CONSTRUCT_CKE_DHE                      0
#  define SSL_F_TLS_CONSTRUCT_CKE_ECDHE                    0
#  define SSL_F_TLS_CONSTRUCT_CKE_GOST                     0
#  define SSL_F_TLS_CONSTRUCT_CKE_PSK_PREAMBLE             0
#  define SSL_F_TLS_CONSTRUCT_CKE_RSA                      0
#  define SSL_F_TLS_CONSTRUCT_CKE_SRP                      0
#  define SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE           0
#  define SSL_F_TLS_CONSTRUCT_CLIENT_HELLO                 0
#  define SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE          0
#  define SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY                0
#  define SSL_F_TLS_CONSTRUCT_CTOS_ALPN                    0
#  define SSL_F_TLS_CONSTRUCT_CTOS_CERTIFICATE             0
#  define SSL_F_TLS_CONSTRUCT_CTOS_COOKIE                  0
#  define SSL_F_TLS_CONSTRUCT_CTOS_EARLY_DATA              0
#  define SSL_F_TLS_CONSTRUCT_CTOS_EC_PT_FORMATS           0
#  define SSL_F_TLS_CONSTRUCT_CTOS_EMS                     0
#  define SSL_F_TLS_CONSTRUCT_CTOS_ETM                     0
#  define SSL_F_TLS_CONSTRUCT_CTOS_HELLO                   0
#  define SSL_F_TLS_CONSTRUCT_CTOS_KEY_EXCHANGE            0
#  define SSL_F_TLS_CONSTRUCT_CTOS_KEY_SHARE               0
#  define SSL_F_TLS_CONSTRUCT_CTOS_MAXFRAGMENTLEN          0
#  define SSL_F_TLS_CONSTRUCT_CTOS_NPN                     0
#  define SSL_F_TLS_CONSTRUCT_CTOS_PADDING                 0
#  define SSL_F_TLS_CONSTRUCT_CTOS_POST_HANDSHAKE_AUTH     0
#  define SSL_F_TLS_CONSTRUCT_CTOS_PSK                     0
#  define SSL_F_TLS_CONSTRUCT_CTOS_PSK_KEX_MODES           0
#  define SSL_F_TLS_CONSTRUCT_CTOS_RENEGOTIATE             0
#  define SSL_F_TLS_CONSTRUCT_CTOS_SCT                     0
#  define SSL_F_TLS_CONSTRUCT_CTOS_SERVER_NAME             0
#  define SSL_F_TLS_CONSTRUCT_CTOS_SESSION_TICKET          0
#  define SSL_F_TLS_CONSTRUCT_CTOS_SIG_ALGS                0
#  define SSL_F_TLS_CONSTRUCT_CTOS_SRP                     0
#  define SSL_F_TLS_CONSTRUCT_CTOS_STATUS_REQUEST          0
#  define SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_GROUPS        0
#  define SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_VERSIONS      0
#  define SSL_F_TLS_CONSTRUCT_CTOS_USE_SRTP                0
#  define SSL_F_TLS_CONSTRUCT_CTOS_VERIFY                  0
#  define SSL_F_TLS_CONSTRUCT_ENCRYPTED_EXTENSIONS         0
#  define SSL_F_TLS_CONSTRUCT_END_OF_EARLY_DATA            0
#  define SSL_F_TLS_CONSTRUCT_EXTENSIONS                   0
#  define SSL_F_TLS_CONSTRUCT_FINISHED                     0
#  define SSL_F_TLS_CONSTRUCT_HELLO_REQUEST                0
#  define SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST          0
#  define SSL_F_TLS_CONSTRUCT_KEY_UPDATE                   0
#  define SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET           0
#  define SSL_F_TLS_CONSTRUCT_NEXT_PROTO                   0
#  define SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE           0
#  define SSL_F_TLS_CONSTRUCT_SERVER_HELLO                 0
#  define SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE          0
#  define SSL_F_TLS_CONSTRUCT_STOC_ALPN                    0
#  define SSL_F_TLS_CONSTRUCT_STOC_CERTIFICATE             0
#  define SSL_F_TLS_CONSTRUCT_STOC_COOKIE                  0
#  define SSL_F_TLS_CONSTRUCT_STOC_CRYPTOPRO_BUG           0
#  define SSL_F_TLS_CONSTRUCT_STOC_DONE                    0
#  define SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA              0
#  define SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA_INFO         0
#  define SSL_F_TLS_CONSTRUCT_STOC_EC_PT_FORMATS           0
#  define SSL_F_TLS_CONSTRUCT_STOC_EMS                     0
#  define SSL_F_TLS_CONSTRUCT_STOC_ETM                     0
#  define SSL_F_TLS_CONSTRUCT_STOC_HELLO                   0
#  define SSL_F_TLS_CONSTRUCT_STOC_KEY_EXCHANGE            0
#  define SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE               0
#  define SSL_F_TLS_CONSTRUCT_STOC_MAXFRAGMENTLEN          0
#  define SSL_F_TLS_CONSTRUCT_STOC_NEXT_PROTO_NEG          0
#  define SSL_F_TLS_CONSTRUCT_STOC_PSK                     0
#  define SSL_F_TLS_CONSTRUCT_STOC_RENEGOTIATE             0
#  define SSL_F_TLS_CONSTRUCT_STOC_SERVER_NAME             0
#  define SSL_F_TLS_CONSTRUCT_STOC_SESSION_TICKET          0
#  define SSL_F_TLS_CONSTRUCT_STOC_STATUS_REQUEST          0
#  define SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_GROUPS        0
#  define SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_VERSIONS      0
#  define SSL_F_TLS_CONSTRUCT_STOC_USE_SRTP                0
#  define SSL_F_TLS_EARLY_POST_PROCESS_CLIENT_HELLO        0
#  define SSL_F_TLS_FINISH_HANDSHAKE                       0
#  define SSL_F_TLS_GET_MESSAGE_BODY                       0
#  define SSL_F_TLS_GET_MESSAGE_HEADER                     0
#  define SSL_F_TLS_HANDLE_ALPN                            0
#  define SSL_F_TLS_HANDLE_STATUS_REQUEST                  0
#  define SSL_F_TLS_PARSE_CERTIFICATE_AUTHORITIES          0
#  define SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT               0
#  define SSL_F_TLS_PARSE_CTOS_ALPN                        0
#  define SSL_F_TLS_PARSE_CTOS_COOKIE                      0
#  define SSL_F_TLS_PARSE_CTOS_EARLY_DATA                  0
#  define SSL_F_TLS_PARSE_CTOS_EC_PT_FORMATS               0
#  define SSL_F_TLS_PARSE_CTOS_EMS                         0
#  define SSL_F_TLS_PARSE_CTOS_KEY_SHARE                   0
#  define SSL_F_TLS_PARSE_CTOS_MAXFRAGMENTLEN              0
#  define SSL_F_TLS_PARSE_CTOS_POST_HANDSHAKE_AUTH         0
#  define SSL_F_TLS_PARSE_CTOS_PSK                         0
#  define SSL_F_TLS_PARSE_CTOS_PSK_KEX_MODES               0
#  define SSL_F_TLS_PARSE_CTOS_RENEGOTIATE                 0
#  define SSL_F_TLS_PARSE_CTOS_SERVER_NAME                 0
#  define SSL_F_TLS_PARSE_CTOS_SESSION_TICKET              0
#  define SSL_F_TLS_PARSE_CTOS_SIG_ALGS                    0
#  define SSL_F_TLS_PARSE_CTOS_SIG_ALGS_CERT               0
#  define SSL_F_TLS_PARSE_CTOS_SRP                         0
#  define SSL_F_TLS_PARSE_CTOS_STATUS_REQUEST              0
#  define SSL_F_TLS_PARSE_CTOS_SUPPORTED_GROUPS            0
#  define SSL_F_TLS_PARSE_CTOS_USE_SRTP                    0
#  define SSL_F_TLS_PARSE_STOC_ALPN                        0
#  define SSL_F_TLS_PARSE_STOC_COOKIE                      0
#  define SSL_F_TLS_PARSE_STOC_EARLY_DATA                  0
#  define SSL_F_TLS_PARSE_STOC_EARLY_DATA_INFO             0
#  define SSL_F_TLS_PARSE_STOC_EC_PT_FORMATS               0
#  define SSL_F_TLS_PARSE_STOC_KEY_SHARE                   0
#  define SSL_F_TLS_PARSE_STOC_MAXFRAGMENTLEN              0
#  define SSL_F_TLS_PARSE_STOC_NPN                         0
#  define SSL_F_TLS_PARSE_STOC_PSK                         0
#  define SSL_F_TLS_PARSE_STOC_RENEGOTIATE                 0
#  define SSL_F_TLS_PARSE_STOC_SCT                         0
#  define SSL_F_TLS_PARSE_STOC_SERVER_NAME                 0
#  define SSL_F_TLS_PARSE_STOC_SESSION_TICKET              0
#  define SSL_F_TLS_PARSE_STOC_STATUS_REQUEST              0
#  define SSL_F_TLS_PARSE_STOC_SUPPORTED_VERSIONS          0
#  define SSL_F_TLS_PARSE_STOC_USE_SRTP                    0
#  define SSL_F_TLS_POST_PROCESS_CLIENT_HELLO              0
#  define SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE       0
#  define SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE             0
#  define SSL_F_TLS_PROCESS_AS_HELLO_RETRY_REQUEST         0
#  define SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST            0
#  define SSL_F_TLS_PROCESS_CERT_STATUS                    0
#  define SSL_F_TLS_PROCESS_CERT_STATUS_BODY               0
#  define SSL_F_TLS_PROCESS_CERT_VERIFY                    0
#  define SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC             0
#  define SSL_F_TLS_PROCESS_CKE_DHE                        0
#  define SSL_F_TLS_PROCESS_CKE_ECDHE                      0
#  define SSL_F_TLS_PROCESS_CKE_GOST                       0
#  define SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE               0
#  define SSL_F_TLS_PROCESS_CKE_RSA                        0
#  define SSL_F_TLS_PROCESS_CKE_SRP                        0
#  define SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE             0
#  define SSL_F_TLS_PROCESS_CLIENT_HELLO                   0
#  define SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE            0
#  define SSL_F_TLS_PROCESS_ENCRYPTED_EXTENSIONS           0
#  define SSL_F_TLS_PROCESS_END_OF_EARLY_DATA              0
#  define SSL_F_TLS_PROCESS_FINISHED                       0
#  define SSL_F_TLS_PROCESS_HELLO_REQ                      0
#  define SSL_F_TLS_PROCESS_HELLO_RETRY_REQUEST            0
#  define SSL_F_TLS_PROCESS_INITIAL_SERVER_FLIGHT          0
#  define SSL_F_TLS_PROCESS_KEY_EXCHANGE                   0
#  define SSL_F_TLS_PROCESS_KEY_UPDATE                     0
#  define SSL_F_TLS_PROCESS_NEW_SESSION_TICKET             0
#  define SSL_F_TLS_PROCESS_NEXT_PROTO                     0
#  define SSL_F_TLS_PROCESS_SERVER_CERTIFICATE             0
#  define SSL_F_TLS_PROCESS_SERVER_DONE                    0
#  define SSL_F_TLS_PROCESS_SERVER_HELLO                   0
#  define SSL_F_TLS_PROCESS_SKE_DHE                        0
#  define SSL_F_TLS_PROCESS_SKE_ECDHE                      0
#  define SSL_F_TLS_PROCESS_SKE_PSK_PREAMBLE               0
#  define SSL_F_TLS_PROCESS_SKE_SRP                        0
#  define SSL_F_TLS_PSK_DO_BINDER                          0
#  define SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT                0
#  define SSL_F_TLS_SETUP_HANDSHAKE                        0
#  define SSL_F_USE_CERTIFICATE_CHAIN_FILE                 0
#  define SSL_F_WPACKET_INTERN_INIT_LEN                    0
#  define SSL_F_WPACKET_START_SUB_PACKET_LEN__             0
#  define SSL_F_WRITE_STATE_MACHINE                        0
# endif

# ifdef  __cplusplus
}
# endif
#endif
                                                                                                                                   usr/include/openssl/stack.h                                                                         0000644 0000000 0000000 00000006324 14707445474 014466  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*
 * Copyright 1995-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#ifndef OPENSSL_STACK_H
# define OPENSSL_STACK_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_STACK_H
# endif

#ifdef  __cplusplus
extern "C" {
#endif

typedef struct stack_st OPENSSL_STACK; /* Use STACK_OF(...) instead */

typedef int (*OPENSSL_sk_compfunc)(const void *, const void *);
typedef void (*OPENSSL_sk_freefunc)(void *);
typedef void *(*OPENSSL_sk_copyfunc)(const void *);

int OPENSSL_sk_num(const OPENSSL_STACK *);
void *OPENSSL_sk_value(const OPENSSL_STACK *, int);

void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data);

OPENSSL_STACK *OPENSSL_sk_new(OPENSSL_sk_compfunc cmp);
OPENSSL_STACK *OPENSSL_sk_new_null(void);
OPENSSL_STACK *OPENSSL_sk_new_reserve(OPENSSL_sk_compfunc c, int n);
int OPENSSL_sk_reserve(OPENSSL_STACK *st, int n);
void OPENSSL_sk_free(OPENSSL_STACK *);
void OPENSSL_sk_pop_free(OPENSSL_STACK *st, void (*func) (void *));
OPENSSL_STACK *OPENSSL_sk_deep_copy(const OPENSSL_STACK *,
                                    OPENSSL_sk_copyfunc c,
                                    OPENSSL_sk_freefunc f);
int OPENSSL_sk_insert(OPENSSL_STACK *sk, const void *data, int where);
void *OPENSSL_sk_delete(OPENSSL_STACK *st, int loc);
void *OPENSSL_sk_delete_ptr(OPENSSL_STACK *st, const void *p);
int OPENSSL_sk_find(OPENSSL_STACK *st, const void *data);
int OPENSSL_sk_find_ex(OPENSSL_STACK *st, const void *data);
int OPENSSL_sk_find_all(OPENSSL_STACK *st, const void *data, int *pnum);
int OPENSSL_sk_push(OPENSSL_STACK *st, const void *data);
int OPENSSL_sk_unshift(OPENSSL_STACK *st, const void *data);
void *OPENSSL_sk_shift(OPENSSL_STACK *st);
void *OPENSSL_sk_pop(OPENSSL_STACK *st);
void OPENSSL_sk_zero(OPENSSL_STACK *st);
OPENSSL_sk_compfunc OPENSSL_sk_set_cmp_func(OPENSSL_STACK *sk,
                                            OPENSSL_sk_compfunc cmp);
OPENSSL_STACK *OPENSSL_sk_dup(const OPENSSL_STACK *st);
void OPENSSL_sk_sort(OPENSSL_STACK *st);
int OPENSSL_sk_is_sorted(const OPENSSL_STACK *st);

# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  define _STACK OPENSSL_STACK
#  define sk_num OPENSSL_sk_num
#  define sk_value OPENSSL_sk_value
#  define sk_set OPENSSL_sk_set
#  define sk_new OPENSSL_sk_new
#  define sk_new_null OPENSSL_sk_new_null
#  define sk_free OPENSSL_sk_free
#  define sk_pop_free OPENSSL_sk_pop_free
#  define sk_deep_copy OPENSSL_sk_deep_copy
#  define sk_insert OPENSSL_sk_insert
#  define sk_delete OPENSSL_sk_delete
#  define sk_delete_ptr OPENSSL_sk_delete_ptr
#  define sk_find OPENSSL_sk_find
#  define sk_find_ex OPENSSL_sk_find_ex
#  define sk_push OPENSSL_sk_push
#  define sk_unshift OPENSSL_sk_unshift
#  define sk_shift OPENSSL_sk_shift
#  define sk_pop OPENSSL_sk_pop
#  define sk_zero OPENSSL_sk_zero
#  define sk_set_cmp_func OPENSSL_sk_set_cmp_func
#  define sk_dup OPENSSL_sk_dup
#  define sk_sort OPENSSL_sk_sort
#  define sk_is_sorted OPENSSL_sk_is_sorted
# endif

#ifdef  __cplusplus
}
#endif

#endif
                                                                                                                                                                                                                                                                                                            usr/include/openssl/store.h                                                                         0000644 0000000 0000000 00000035512 14707445474 014516  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*
 * Copyright 2016-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#ifndef OPENSSL_STORE_H
# define OPENSSL_STORE_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_OSSL_STORE_H
# endif

# include <stdarg.h>
# include <openssl/types.h>
# include <openssl/pem.h>
# include <openssl/storeerr.h>

# ifdef  __cplusplus
extern "C" {
# endif

/*-
 *  The main OSSL_STORE functions.
 *  ------------------------------
 *
 *  These allow applications to open a channel to a resource with supported
 *  data (keys, certs, crls, ...), read the data a piece at a time and decide
 *  what to do with it, and finally close.
 */

typedef struct ossl_store_ctx_st OSSL_STORE_CTX;

/*
 * Typedef for the OSSL_STORE_INFO post processing callback.  This can be used
 * to massage the given OSSL_STORE_INFO, or to drop it entirely (by returning
 * NULL).
 */
typedef OSSL_STORE_INFO *(*OSSL_STORE_post_process_info_fn)(OSSL_STORE_INFO *,
                                                            void *);

/*
 * Open a channel given a URI.  The given UI method will be used any time the
 * loader needs extra input, for example when a password or pin is needed, and
 * will be passed the same user data every time it's needed in this context.
 *
 * Returns a context reference which represents the channel to communicate
 * through.
 */
OSSL_STORE_CTX *
OSSL_STORE_open(const char *uri, const UI_METHOD *ui_method, void *ui_data,
                OSSL_STORE_post_process_info_fn post_process,
                void *post_process_data);
OSSL_STORE_CTX *
OSSL_STORE_open_ex(const char *uri, OSSL_LIB_CTX *libctx, const char *propq,
                   const UI_METHOD *ui_method, void *ui_data,
                   const OSSL_PARAM params[],
                   OSSL_STORE_post_process_info_fn post_process,
                   void *post_process_data);

/*
 * Control / fine tune the OSSL_STORE channel.  |cmd| determines what is to be
 * done, and depends on the underlying loader (use OSSL_STORE_get0_scheme to
 * determine which loader is used), except for common commands (see below).
 * Each command takes different arguments.
 */
# ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int OSSL_STORE_ctrl(OSSL_STORE_CTX *ctx, int cmd,
                                          ... /* args */);
OSSL_DEPRECATEDIN_3_0 int OSSL_STORE_vctrl(OSSL_STORE_CTX *ctx, int cmd,
                                           va_list args);
# endif

# ifndef OPENSSL_NO_DEPRECATED_3_0

/*
 * Common ctrl commands that different loaders may choose to support.
 */
/* int on = 0 or 1; STORE_ctrl(ctx, STORE_C_USE_SECMEM, &on); */
# define OSSL_STORE_C_USE_SECMEM      1
/* Where custom commands start */
# define OSSL_STORE_C_CUSTOM_START    100

# endif

/*
 * Read one data item (a key, a cert, a CRL) that is supported by the OSSL_STORE
 * functionality, given a context.
 * Returns a OSSL_STORE_INFO pointer, from which OpenSSL typed data can be
 * extracted with OSSL_STORE_INFO_get0_PKEY(), OSSL_STORE_INFO_get0_CERT(), ...
 * NULL is returned on error, which may include that the data found at the URI
 * can't be figured out for certain or is ambiguous.
 */
OSSL_STORE_INFO *OSSL_STORE_load(OSSL_STORE_CTX *ctx);

/*
 * Check if end of data (end of file) is reached
 * Returns 1 on end, 0 otherwise.
 */
int OSSL_STORE_eof(OSSL_STORE_CTX *ctx);

/*
 * Check if an error occurred
 * Returns 1 if it did, 0 otherwise.
 */
int OSSL_STORE_error(OSSL_STORE_CTX *ctx);

/*
 * Close the channel
 * Returns 1 on success, 0 on error.
 */
int OSSL_STORE_close(OSSL_STORE_CTX *ctx);

/*
 * Attach to a BIO.  This works like OSSL_STORE_open() except it takes a
 * BIO instead of a uri, along with a scheme to use when reading.
 * The given UI method will be used any time the loader needs extra input,
 * for example when a password or pin is needed, and will be passed the
 * same user data every time it's needed in this context.
 *
 * Returns a context reference which represents the channel to communicate
 * through.
 *
 * Note that this function is considered unsafe, all depending on what the
 * BIO actually reads.
 */
OSSL_STORE_CTX *OSSL_STORE_attach(BIO *bio, const char *scheme,
                                  OSSL_LIB_CTX *libctx, const char *propq,
                                  const UI_METHOD *ui_method, void *ui_data,
                                  const OSSL_PARAM params[],
                                  OSSL_STORE_post_process_info_fn post_process,
                                  void *post_process_data);

/*-
 *  Extracting OpenSSL types from and creating new OSSL_STORE_INFOs
 *  ---------------------------------------------------------------
 */

/*
 * Types of data that can be ossl_stored in a OSSL_STORE_INFO.
 * OSSL_STORE_INFO_NAME is typically found when getting a listing of
 * available "files" / "tokens" / what have you.
 */
# define OSSL_STORE_INFO_NAME           1   /* char * */
# define OSSL_STORE_INFO_PARAMS         2   /* EVP_PKEY * */
# define OSSL_STORE_INFO_PUBKEY         3   /* EVP_PKEY * */
# define OSSL_STORE_INFO_PKEY           4   /* EVP_PKEY * */
# define OSSL_STORE_INFO_CERT           5   /* X509 * */
# define OSSL_STORE_INFO_CRL            6   /* X509_CRL * */

/*
 * Functions to generate OSSL_STORE_INFOs, one function for each type we
 * support having in them, as well as a generic constructor.
 *
 * In all cases, ownership of the object is transferred to the OSSL_STORE_INFO
 * and will therefore be freed when the OSSL_STORE_INFO is freed.
 */
OSSL_STORE_INFO *OSSL_STORE_INFO_new(int type, void *data);
OSSL_STORE_INFO *OSSL_STORE_INFO_new_NAME(char *name);
int OSSL_STORE_INFO_set0_NAME_description(OSSL_STORE_INFO *info, char *desc);
OSSL_STORE_INFO *OSSL_STORE_INFO_new_PARAMS(EVP_PKEY *params);
OSSL_STORE_INFO *OSSL_STORE_INFO_new_PUBKEY(EVP_PKEY *pubkey);
OSSL_STORE_INFO *OSSL_STORE_INFO_new_PKEY(EVP_PKEY *pkey);
OSSL_STORE_INFO *OSSL_STORE_INFO_new_CERT(X509 *x509);
OSSL_STORE_INFO *OSSL_STORE_INFO_new_CRL(X509_CRL *crl);

/*
 * Functions to try to extract data from a OSSL_STORE_INFO.
 */
int OSSL_STORE_INFO_get_type(const OSSL_STORE_INFO *info);
void *OSSL_STORE_INFO_get0_data(int type, const OSSL_STORE_INFO *info);
const char *OSSL_STORE_INFO_get0_NAME(const OSSL_STORE_INFO *info);
char *OSSL_STORE_INFO_get1_NAME(const OSSL_STORE_INFO *info);
const char *OSSL_STORE_INFO_get0_NAME_description(const OSSL_STORE_INFO *info);
char *OSSL_STORE_INFO_get1_NAME_description(const OSSL_STORE_INFO *info);
EVP_PKEY *OSSL_STORE_INFO_get0_PARAMS(const OSSL_STORE_INFO *info);
EVP_PKEY *OSSL_STORE_INFO_get1_PARAMS(const OSSL_STORE_INFO *info);
EVP_PKEY *OSSL_STORE_INFO_get0_PUBKEY(const OSSL_STORE_INFO *info);
EVP_PKEY *OSSL_STORE_INFO_get1_PUBKEY(const OSSL_STORE_INFO *info);
EVP_PKEY *OSSL_STORE_INFO_get0_PKEY(const OSSL_STORE_INFO *info);
EVP_PKEY *OSSL_STORE_INFO_get1_PKEY(const OSSL_STORE_INFO *info);
X509 *OSSL_STORE_INFO_get0_CERT(const OSSL_STORE_INFO *info);
X509 *OSSL_STORE_INFO_get1_CERT(const OSSL_STORE_INFO *info);
X509_CRL *OSSL_STORE_INFO_get0_CRL(const OSSL_STORE_INFO *info);
X509_CRL *OSSL_STORE_INFO_get1_CRL(const OSSL_STORE_INFO *info);

const char *OSSL_STORE_INFO_type_string(int type);

/*
 * Free the OSSL_STORE_INFO
 */
void OSSL_STORE_INFO_free(OSSL_STORE_INFO *info);


/*-
 *  Functions to construct a search URI from a base URI and search criteria
 *  -----------------------------------------------------------------------
 */

/* OSSL_STORE search types */
# define OSSL_STORE_SEARCH_BY_NAME              1 /* subject in certs, issuer in CRLs */
# define OSSL_STORE_SEARCH_BY_ISSUER_SERIAL     2
# define OSSL_STORE_SEARCH_BY_KEY_FINGERPRINT   3
# define OSSL_STORE_SEARCH_BY_ALIAS             4

/* To check what search types the scheme handler supports */
int OSSL_STORE_supports_search(OSSL_STORE_CTX *ctx, int search_type);

/* Search term constructors */
/*
 * The input is considered to be owned by the caller, and must therefore
 * remain present throughout the lifetime of the returned OSSL_STORE_SEARCH
 */
OSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_name(X509_NAME *name);
OSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_issuer_serial(X509_NAME *name,
                                                      const ASN1_INTEGER
                                                      *serial);
OSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_key_fingerprint(const EVP_MD *digest,
                                                        const unsigned char
                                                        *bytes, size_t len);
OSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_alias(const char *alias);

/* Search term destructor */
void OSSL_STORE_SEARCH_free(OSSL_STORE_SEARCH *search);

/* Search term accessors */
int OSSL_STORE_SEARCH_get_type(const OSSL_STORE_SEARCH *criterion);
X509_NAME *OSSL_STORE_SEARCH_get0_name(const OSSL_STORE_SEARCH *criterion);
const ASN1_INTEGER *OSSL_STORE_SEARCH_get0_serial(const OSSL_STORE_SEARCH
                                                  *criterion);
const unsigned char *OSSL_STORE_SEARCH_get0_bytes(const OSSL_STORE_SEARCH
                                                  *criterion, size_t *length);
const char *OSSL_STORE_SEARCH_get0_string(const OSSL_STORE_SEARCH *criterion);
const EVP_MD *OSSL_STORE_SEARCH_get0_digest(const OSSL_STORE_SEARCH *criterion);

/*
 * Add search criterion and expected return type (which can be unspecified)
 * to the loading channel.  This MUST happen before the first OSSL_STORE_load().
 */
int OSSL_STORE_expect(OSSL_STORE_CTX *ctx, int expected_type);
int OSSL_STORE_find(OSSL_STORE_CTX *ctx, const OSSL_STORE_SEARCH *search);


/*-
 *  Function to fetch a loader and extract data from it
 *  ---------------------------------------------------
 */

typedef struct ossl_store_loader_st OSSL_STORE_LOADER;

OSSL_STORE_LOADER *OSSL_STORE_LOADER_fetch(OSSL_LIB_CTX *libctx,
                                           const char *scheme,
                                           const char *properties);
int OSSL_STORE_LOADER_up_ref(OSSL_STORE_LOADER *loader);
void OSSL_STORE_LOADER_free(OSSL_STORE_LOADER *loader);
const OSSL_PROVIDER *OSSL_STORE_LOADER_get0_provider(const OSSL_STORE_LOADER *
                                                loader);
const char *OSSL_STORE_LOADER_get0_properties(const OSSL_STORE_LOADER *loader);
const char *OSSL_STORE_LOADER_get0_description(const OSSL_STORE_LOADER *loader);
int OSSL_STORE_LOADER_is_a(const OSSL_STORE_LOADER *loader,
                           const char *scheme);
void OSSL_STORE_LOADER_do_all_provided(OSSL_LIB_CTX *libctx,
                                       void (*fn)(OSSL_STORE_LOADER *loader,
                                                  void *arg),
                                       void *arg);
int OSSL_STORE_LOADER_names_do_all(const OSSL_STORE_LOADER *loader,
                                   void (*fn)(const char *name, void *data),
                                   void *data);

/*-
 *  Function to register a loader for the given URI scheme.
 *  -------------------------------------------------------
 *
 *  The loader receives all the main components of an URI except for the
 *  scheme.
 */

# ifndef OPENSSL_NO_DEPRECATED_3_0

/* struct ossl_store_loader_ctx_st is defined differently by each loader */
typedef struct ossl_store_loader_ctx_st OSSL_STORE_LOADER_CTX;
typedef OSSL_STORE_LOADER_CTX *(*OSSL_STORE_open_fn)
    (const OSSL_STORE_LOADER *loader, const char *uri,
     const UI_METHOD *ui_method, void *ui_data);
typedef OSSL_STORE_LOADER_CTX *(*OSSL_STORE_open_ex_fn)
    (const OSSL_STORE_LOADER *loader,
     const char *uri, OSSL_LIB_CTX *libctx, const char *propq,
     const UI_METHOD *ui_method, void *ui_data);

typedef OSSL_STORE_LOADER_CTX *(*OSSL_STORE_attach_fn)
    (const OSSL_STORE_LOADER *loader, BIO *bio,
     OSSL_LIB_CTX *libctx, const char *propq,
     const UI_METHOD *ui_method, void *ui_data);
typedef int (*OSSL_STORE_ctrl_fn)
    (OSSL_STORE_LOADER_CTX *ctx, int cmd, va_list args);
typedef int (*OSSL_STORE_expect_fn)
    (OSSL_STORE_LOADER_CTX *ctx, int expected);
typedef int (*OSSL_STORE_find_fn)
    (OSSL_STORE_LOADER_CTX *ctx, const OSSL_STORE_SEARCH *criteria);
typedef OSSL_STORE_INFO *(*OSSL_STORE_load_fn)
    (OSSL_STORE_LOADER_CTX *ctx, const UI_METHOD *ui_method, void *ui_data);
typedef int (*OSSL_STORE_eof_fn)(OSSL_STORE_LOADER_CTX *ctx);
typedef int (*OSSL_STORE_error_fn)(OSSL_STORE_LOADER_CTX *ctx);
typedef int (*OSSL_STORE_close_fn)(OSSL_STORE_LOADER_CTX *ctx);

# endif
# ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
OSSL_STORE_LOADER *OSSL_STORE_LOADER_new(ENGINE *e, const char *scheme);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_open(OSSL_STORE_LOADER *loader,
                               OSSL_STORE_open_fn open_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_open_ex(OSSL_STORE_LOADER *loader,
                                  OSSL_STORE_open_ex_fn open_ex_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_attach(OSSL_STORE_LOADER *loader,
                                 OSSL_STORE_attach_fn attach_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_ctrl(OSSL_STORE_LOADER *loader,
                               OSSL_STORE_ctrl_fn ctrl_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_expect(OSSL_STORE_LOADER *loader,
                                 OSSL_STORE_expect_fn expect_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_find(OSSL_STORE_LOADER *loader,
                               OSSL_STORE_find_fn find_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_load(OSSL_STORE_LOADER *loader,
                               OSSL_STORE_load_fn load_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_eof(OSSL_STORE_LOADER *loader,
                              OSSL_STORE_eof_fn eof_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_error(OSSL_STORE_LOADER *loader,
                                OSSL_STORE_error_fn error_function);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_LOADER_set_close(OSSL_STORE_LOADER *loader,
                                OSSL_STORE_close_fn close_function);
OSSL_DEPRECATEDIN_3_0
const ENGINE *OSSL_STORE_LOADER_get0_engine(const OSSL_STORE_LOADER *loader);
OSSL_DEPRECATEDIN_3_0
const char * OSSL_STORE_LOADER_get0_scheme(const OSSL_STORE_LOADER *loader);
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_register_loader(OSSL_STORE_LOADER *loader);
OSSL_DEPRECATEDIN_3_0
OSSL_STORE_LOADER *OSSL_STORE_unregister_loader(const char *scheme);
# endif

/*-
 *  Functions to list STORE loaders
 *  -------------------------------
 */
# ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
int OSSL_STORE_do_all_loaders(void (*do_function)(const OSSL_STORE_LOADER *loader,
                                                  void *do_arg),
                              void *do_arg);
# endif

# ifdef  __cplusplus
}
# endif
#endif
                                                                                                                                                                                      usr/include/openssl/storeerr.h                                                                      0000644 0000000 0000000 00000004054 14707445474 015224  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*
 * Generated by util/mkerr.pl DO NOT EDIT
 * Copyright 1995-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#ifndef OPENSSL_STOREERR_H
# define OPENSSL_STOREERR_H
# pragma once

# include <openssl/opensslconf.h>
# include <openssl/symhacks.h>
# include <openssl/cryptoerr_legacy.h>



/*
 * OSSL_STORE reason codes.
 */
# define OSSL_STORE_R_AMBIGUOUS_CONTENT_TYPE              107
# define OSSL_STORE_R_BAD_PASSWORD_READ                   115
# define OSSL_STORE_R_ERROR_VERIFYING_PKCS12_MAC          113
# define OSSL_STORE_R_FINGERPRINT_SIZE_DOES_NOT_MATCH_DIGEST 121
# define OSSL_STORE_R_INVALID_SCHEME                      106
# define OSSL_STORE_R_IS_NOT_A                            112
# define OSSL_STORE_R_LOADER_INCOMPLETE                   116
# define OSSL_STORE_R_LOADING_STARTED                     117
# define OSSL_STORE_R_NOT_A_CERTIFICATE                   100
# define OSSL_STORE_R_NOT_A_CRL                           101
# define OSSL_STORE_R_NOT_A_NAME                          103
# define OSSL_STORE_R_NOT_A_PRIVATE_KEY                   102
# define OSSL_STORE_R_NOT_A_PUBLIC_KEY                    122
# define OSSL_STORE_R_NOT_PARAMETERS                      104
# define OSSL_STORE_R_NO_LOADERS_FOUND                    123
# define OSSL_STORE_R_PASSPHRASE_CALLBACK_ERROR           114
# define OSSL_STORE_R_PATH_MUST_BE_ABSOLUTE               108
# define OSSL_STORE_R_SEARCH_ONLY_SUPPORTED_FOR_DIRECTORIES 119
# define OSSL_STORE_R_UI_PROCESS_INTERRUPTED_OR_CANCELLED 109
# define OSSL_STORE_R_UNREGISTERED_SCHEME                 105
# define OSSL_STORE_R_UNSUPPORTED_CONTENT_TYPE            110
# define OSSL_STORE_R_UNSUPPORTED_OPERATION               118
# define OSSL_STORE_R_UNSUPPORTED_SEARCH_TYPE             120
# define OSSL_STORE_R_URI_AUTHORITY_UNSUPPORTED           111

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    usr/include/openssl/symhacks.h                                                                      0000644 0000000 0000000 00000002412 14707445474 015175  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*
 * Copyright 1999-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#ifndef OPENSSL_SYMHACKS_H
# define OPENSSL_SYMHACKS_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_SYMHACKS_H
# endif

# include <openssl/e_os2.h>

/* Case insensitive linking causes problems.... */
# if defined(OPENSSL_SYS_VMS)
#  undef ERR_load_CRYPTO_strings
#  define ERR_load_CRYPTO_strings                 ERR_load_CRYPTOlib_strings
#  undef OCSP_crlID_new
#  define OCSP_crlID_new                          OCSP_crlID2_new

#  undef d2i_ECPARAMETERS
#  define d2i_ECPARAMETERS                        d2i_UC_ECPARAMETERS
#  undef i2d_ECPARAMETERS
#  define i2d_ECPARAMETERS                        i2d_UC_ECPARAMETERS
#  undef d2i_ECPKPARAMETERS
#  define d2i_ECPKPARAMETERS                      d2i_UC_ECPKPARAMETERS
#  undef i2d_ECPKPARAMETERS
#  define i2d_ECPKPARAMETERS                      i2d_UC_ECPKPARAMETERS

# endif

#endif                          /* ! defined HEADER_VMS_IDHACKS_H */
                                                                                                                                                                                                                                                      usr/include/openssl/tls1.h                                                                          0000644 0000000 0000000 00000214164 14707445474 014247  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*
 * Copyright 1995-2024 The OpenSSL Project Authors. All Rights Reserved.
 * Copyright (c) 2002, Oracle and/or its affiliates. All rights reserved
 * Copyright 2005 Nokia. All rights reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#ifndef OPENSSL_TLS1_H
# define OPENSSL_TLS1_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_TLS1_H
# endif

# include <openssl/buffer.h>
# include <openssl/x509.h>
# include <openssl/prov_ssl.h>

#ifdef  __cplusplus
extern "C" {
#endif

/* Default security level if not overridden at config time */
# ifndef OPENSSL_TLS_SECURITY_LEVEL
#  define OPENSSL_TLS_SECURITY_LEVEL 1
# endif

/* TLS*_VERSION constants are defined in prov_ssl.h */
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define TLS_MAX_VERSION                TLS1_3_VERSION
# endif

/* Special value for method supporting multiple versions */
# define TLS_ANY_VERSION                 0x10000

# define TLS1_VERSION_MAJOR              0x03
# define TLS1_VERSION_MINOR              0x01

# define TLS1_1_VERSION_MAJOR            0x03
# define TLS1_1_VERSION_MINOR            0x02

# define TLS1_2_VERSION_MAJOR            0x03
# define TLS1_2_VERSION_MINOR            0x03

# define TLS1_get_version(s) \
        ((SSL_version(s) >> 8) == TLS1_VERSION_MAJOR ? SSL_version(s) : 0)

# define TLS1_get_client_version(s) \
        ((SSL_client_version(s) >> 8) == TLS1_VERSION_MAJOR ? SSL_client_version(s) : 0)

# define TLS1_AD_DECRYPTION_FAILED       21
# define TLS1_AD_RECORD_OVERFLOW         22
# define TLS1_AD_UNKNOWN_CA              48/* fatal */
# define TLS1_AD_ACCESS_DENIED           49/* fatal */
# define TLS1_AD_DECODE_ERROR            50/* fatal */
# define TLS1_AD_DECRYPT_ERROR           51
# define TLS1_AD_EXPORT_RESTRICTION      60/* fatal */
# define TLS1_AD_PROTOCOL_VERSION        70/* fatal */
# define TLS1_AD_INSUFFICIENT_SECURITY   71/* fatal */
# define TLS1_AD_INTERNAL_ERROR          80/* fatal */
# define TLS1_AD_INAPPROPRIATE_FALLBACK  86/* fatal */
# define TLS1_AD_USER_CANCELLED          90
# define TLS1_AD_NO_RENEGOTIATION        100
/* TLSv1.3 alerts */
# define TLS13_AD_MISSING_EXTENSION      109 /* fatal */
# define TLS13_AD_CERTIFICATE_REQUIRED   116 /* fatal */
/* codes 110-114 are from RFC3546 */
# define TLS1_AD_UNSUPPORTED_EXTENSION   110
# define TLS1_AD_CERTIFICATE_UNOBTAINABLE 111
# define TLS1_AD_UNRECOGNIZED_NAME       112
# define TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE 113
# define TLS1_AD_BAD_CERTIFICATE_HASH_VALUE 114
# define TLS1_AD_UNKNOWN_PSK_IDENTITY    115/* fatal */
# define TLS1_AD_NO_APPLICATION_PROTOCOL 120 /* fatal */

/* ExtensionType values from RFC3546 / RFC4366 / RFC6066 */
# define TLSEXT_TYPE_server_name                 0
# define TLSEXT_TYPE_max_fragment_length         1
# define TLSEXT_TYPE_client_certificate_url      2
# define TLSEXT_TYPE_trusted_ca_keys             3
# define TLSEXT_TYPE_truncated_hmac              4
# define TLSEXT_TYPE_status_request              5
/* ExtensionType values from RFC4681 */
# define TLSEXT_TYPE_user_mapping                6
/* ExtensionType values from RFC5878 */
# define TLSEXT_TYPE_client_authz                7
# define TLSEXT_TYPE_server_authz                8
/* ExtensionType values from RFC6091 */
# define TLSEXT_TYPE_cert_type           9

/* ExtensionType values from RFC4492 */
/*
 * Prior to TLSv1.3 the supported_groups extension was known as
 * elliptic_curves
 */
# define TLSEXT_TYPE_supported_groups            10
# define TLSEXT_TYPE_elliptic_curves             TLSEXT_TYPE_supported_groups
# define TLSEXT_TYPE_ec_point_formats            11


/* ExtensionType value from RFC5054 */
# define TLSEXT_TYPE_srp                         12

/* ExtensionType values from RFC5246 */
# define TLSEXT_TYPE_signature_algorithms        13

/* ExtensionType value from RFC5764 */
# define TLSEXT_TYPE_use_srtp    14

/* ExtensionType value from RFC7301 */
# define TLSEXT_TYPE_application_layer_protocol_negotiation 16

/*
 * Extension type for Certificate Transparency
 * https://tools.ietf.org/html/rfc6962#section-3.3.1
 */
# define TLSEXT_TYPE_signed_certificate_timestamp    18

/*
 * ExtensionType value for TLS padding extension.
 * http://tools.ietf.org/html/draft-agl-tls-padding
 */
# define TLSEXT_TYPE_padding     21

/* ExtensionType value from RFC7366 */
# define TLSEXT_TYPE_encrypt_then_mac    22

/* ExtensionType value from RFC7627 */
# define TLSEXT_TYPE_extended_master_secret      23

/* ExtensionType value from RFC4507 */
# define TLSEXT_TYPE_session_ticket              35

/* As defined for TLS1.3 */
# define TLSEXT_TYPE_psk                         41
# define TLSEXT_TYPE_early_data                  42
# define TLSEXT_TYPE_supported_versions          43
# define TLSEXT_TYPE_cookie                      44
# define TLSEXT_TYPE_psk_kex_modes               45
# define TLSEXT_TYPE_certificate_authorities     47
# define TLSEXT_TYPE_post_handshake_auth         49
# define TLSEXT_TYPE_signature_algorithms_cert   50
# define TLSEXT_TYPE_key_share                   51

/* Temporary extension type */
# define TLSEXT_TYPE_renegotiate                 0xff01

# ifndef OPENSSL_NO_NEXTPROTONEG
/* This is not an IANA defined extension number */
#  define TLSEXT_TYPE_next_proto_neg              13172
# endif

/* NameType value from RFC3546 */
# define TLSEXT_NAMETYPE_host_name 0
/* status request value from RFC3546 */
# define TLSEXT_STATUSTYPE_ocsp 1

/* ECPointFormat values from RFC4492 */
# define TLSEXT_ECPOINTFORMAT_first                      0
# define TLSEXT_ECPOINTFORMAT_uncompressed               0
# define TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime  1
# define TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2  2
# define TLSEXT_ECPOINTFORMAT_last                       2

/* Signature and hash algorithms from RFC5246 */
# define TLSEXT_signature_anonymous                      0
# define TLSEXT_signature_rsa                            1
# define TLSEXT_signature_dsa                            2
# define TLSEXT_signature_ecdsa                          3
# define TLSEXT_signature_gostr34102001                  237
# define TLSEXT_signature_gostr34102012_256              238
# define TLSEXT_signature_gostr34102012_512              239

/* Total number of different signature algorithms */
# define TLSEXT_signature_num                            7

# define TLSEXT_hash_none                                0
# define TLSEXT_hash_md5                                 1
# define TLSEXT_hash_sha1                                2
# define TLSEXT_hash_sha224                              3
# define TLSEXT_hash_sha256                              4
# define TLSEXT_hash_sha384                              5
# define TLSEXT_hash_sha512                              6
# define TLSEXT_hash_gostr3411                           237
# define TLSEXT_hash_gostr34112012_256                   238
# define TLSEXT_hash_gostr34112012_512                   239

/* Total number of different digest algorithms */

# define TLSEXT_hash_num                                 10

/* Flag set for unrecognised algorithms */
# define TLSEXT_nid_unknown                              0x1000000

/* ECC curves */

# define TLSEXT_curve_P_256                              23
# define TLSEXT_curve_P_384                              24

/* OpenSSL value to disable maximum fragment length extension */
# define TLSEXT_max_fragment_length_DISABLED    0
/* Allowed values for max fragment length extension */
# define TLSEXT_max_fragment_length_512         1
# define TLSEXT_max_fragment_length_1024        2
# define TLSEXT_max_fragment_length_2048        3
# define TLSEXT_max_fragment_length_4096        4
/* OpenSSL value for unset maximum fragment length extension */
# define TLSEXT_max_fragment_length_UNSPECIFIED 255

int SSL_CTX_set_tlsext_max_fragment_length(SSL_CTX *ctx, uint8_t mode);
int SSL_set_tlsext_max_fragment_length(SSL *ssl, uint8_t mode);

# define TLSEXT_MAXLEN_host_name 255

__owur const char *SSL_get_servername(const SSL *s, const int type);
__owur int SSL_get_servername_type(const SSL *s);
/*
 * SSL_export_keying_material exports a value derived from the master secret,
 * as specified in RFC 5705. It writes |olen| bytes to |out| given a label and
 * optional context. (Since a zero length context is allowed, the |use_context|
