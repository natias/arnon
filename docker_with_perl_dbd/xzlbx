such as signal handlers being wiped when modules were loaded, etc.

This has been fixed (or the feature has been removed, depending on how you see
it).

=head3 local($_) strips all magic from $_

local() on scalar variables gives them a new value but keeps all
their magic intact.  This has proven problematic for the default
scalar variable $_, where L<perlsub> recommends that any subroutine
that assigns to $_ should first localize it.  This would throw an
exception if $_ is aliased to a read-only variable, and could in general have
various unintentional side-effects.

Therefore, as an exception to the general rule, local($_) will not
only assign a new value to $_, but also remove all existing magic from
it as well.

=head3 Parsing of package and variable names

Parsing the names of packages and package variables has changed: 
multiple adjacent pairs of colons, as in C<foo::::bar>, are now all 
treated as package separators.

Regardless of this change, the exact parsing of package separators has
never been guaranteed and is subject to change in future Perl versions.

=head2 Changes to Syntax or to Perl Operators

=head3 C<given> return values

C<given> blocks now return the last evaluated
expression, or an empty list if the block was exited by C<break>.  Thus you
can now write:

    my $type = do {
     given ($num) {
      break     when undef;
      "integer" when /^[+-]?[0-9]+$/;
      "float"   when /^[+-]?[0-9]+(?:\.[0-9]+)?$/;
      "unknown";
     }
    };

See L<perlsyn/Return value> for details.

=head3 Change in parsing of certain prototypes

Functions declared with the following prototypes now behave correctly as unary
functions:

  *
  \$ \% \@ \* \&
  \[...]
  ;$ ;*
  ;\$ ;\% etc.
  ;\[...]

Due to this bug fix [perl #75904], functions
using the C<(*)>, C<(;$)> and C<(;*)> prototypes
are parsed with higher precedence than before.  So
in the following example:

  sub foo(;$);
  foo $a < $b;

the second line is now parsed correctly as C<< foo($a) < $b >>, rather than
C<< foo($a < $b) >>.  This happens when one of these operators is used in
an unparenthesised argument:

  < > <= >= lt gt le ge
  == != <=> eq ne cmp ~~
  &
  | ^
  &&
  || //
  .. ...
  ?:
  = += -= *= etc.
  , =>

=head3 Smart-matching against array slices

Previously, the following code resulted in a successful match:

    my @a = qw(a y0 z);
    my @b = qw(a x0 z);
    @a[0 .. $#b] ~~ @b;

This odd behaviour has now been fixed [perl #77468].

=head3 Negation treats strings differently from before

The unary negation operator, C<->, now treats strings that look like numbers
as numbers [perl #57706].

=head3 Negative zero

Negative zero (-0.0), when converted to a string, now becomes "0" on all
platforms.  It used to become "-0" on some, but "0" on others.

If you still need to determine whether a zero is negative, use
C<sprintf("%g", $zero) =~ /^-/> or the L<Data::Float> module on CPAN.

=head3 C<:=> is now a syntax error

Previously C<my $pi := 4> was exactly equivalent to C<my $pi : = 4>,
with the C<:> being treated as the start of an attribute list, ending before
the C<=>.  The use of C<:=> to mean C<: => was deprecated in 5.12.0, and is
now a syntax error.  This allows future use of C<:=> as a new token.

Outside the core's tests for it, we find no Perl 5 code on CPAN
using this construction, so we believe that this change will have
little impact on real-world codebases.

If it is absolutely necessary to have empty attribute lists (for example,
because of a code generator), simply avoid the error by adding a space before
the C<=>.

=head3 Change in the parsing of identifiers

Characters outside the Unicode "XIDStart" set are no longer allowed at the
beginning of an identifier.  This means that certain accents and marks
that normally follow an alphabetic character may no longer be the first
character of an identifier.

=head2 Threads and Processes

=head3 Directory handles not copied to threads

On systems other than Windows that do not have
a C<fchdir> function, newly-created threads no
longer inherit directory handles from their parent threads.  Such programs
would usually have crashed anyway [perl #75154].

=head3 C<close> on shared pipes

To avoid deadlocks, the C<close> function no longer waits for the
child process to exit if the underlying file descriptor is still
in use by another thread.  It returns true in such cases.

=head3 fork() emulation will not wait for signalled children

On Windows parent processes would not terminate until all forked
children had terminated first.  However, C<kill("KILL", ...)> is
inherently unstable on pseudo-processes, and C<kill("TERM", ...)>
might not get delivered if the child is blocked in a system call.

To avoid the deadlock and still provide a safe mechanism to terminate
the hosting process, Perl now no longer waits for children that
have been sent a SIGTERM signal.  It is up to the parent process to
waitpid() for these children if child-cleanup processing must be
allowed to finish.  However, it is also then the responsibility of the
parent to avoid the deadlock by making sure the child process
can't be blocked on I/O.

See L<perlfork> for more information about the fork() emulation on
Windows.

=head2 Configuration

=head3 Naming fixes in Policy_sh.SH may invalidate Policy.sh

Several long-standing typos and naming confusions in F<Policy_sh.SH> have
been fixed, standardizing on the variable names used in F<config.sh>.

This will change the behaviour of F<Policy.sh> if you happen to have been
accidentally relying on its incorrect behaviour.

=head3 Perl source code is read in text mode on Windows

Perl scripts used to be read in binary mode on Windows for the benefit
of the L<ByteLoader> module (which is no longer part of core Perl).  This
had the side-effect of breaking various operations on the C<DATA> filehandle,
including seek()/tell(), and even simply reading from C<DATA> after filehandles
have been flushed by a call to system(), backticks, fork() etc.

The default build options for Windows have been changed to read Perl source
code on Windows in text mode now.  L<ByteLoader> will (hopefully) be updated on
CPAN to automatically handle this situation [perl #28106].

=head1 Deprecations

See also L</Deprecated C APIs>.

=head2 Omitting a space between a regular expression and subsequent word

Omitting the space between a regular expression operator or
its modifiers and the following word is deprecated.  For
example, C<< m/foo/sand $bar >> is for now still parsed
as C<< m/foo/s and $bar >>, but will now issue a warning.

=head2 C<\cI<X>>

The backslash-c construct was designed as a way of specifying
non-printable characters, but there were no restrictions (on ASCII
platforms) on what the character following the C<c> could be.  Now,
a deprecation warning is raised if that character isn't an ASCII character.
Also, a deprecation warning is raised for C<"\c{"> (which is the same
as simply saying C<";">).

=head2 C<"\b{"> and C<"\B{">

In regular expressions, a literal C<"{"> immediately following a C<"\b">
(not in a bracketed character class) or a C<"\B{"> is now deprecated
to allow for its future use by Perl itself.

=head2 Perl 4-era .pl libraries

Perl bundles a handful of library files that predate Perl 5.
This bundling is now deprecated for most of these files, which are now
available from CPAN.  The affected files now warn when run, if they were
installed as part of the core.

This is a mandatory warning, not obeying B<-X> or lexical warning bits.
The warning is modelled on that supplied by F<deprecate.pm> for
deprecated-in-core F<.pm> libraries.  It points to the specific CPAN
distribution that contains the F<.pl> libraries.  The CPAN versions, of
course, do not generate the warning.

=head2 List assignment to C<$[>

Assignment to C<$[> was deprecated and started to give warnings in
Perl version 5.12.0.  This version of Perl (5.14) now also emits a warning 
when assigning to C<$[> in list context.  This fixes an oversight in 5.12.0.

=head2 Use of qw(...) as parentheses

Historically the parser fooled itself into thinking that C<qw(...)> literals
were always enclosed in parentheses, and as a result you could sometimes omit
parentheses around them:

    for $x qw(a b c) { ... }

The parser no longer lies to itself in this way.  Wrap the list literal in
parentheses like this:

    for $x (qw(a b c)) { ... }

This is being deprecated because the parentheses in C<for $i (1,2,3) { ... }>
are not part of expression syntax.  They are part of the statement
syntax, with the C<for> statement wanting literal parentheses.
The synthetic parentheses that a C<qw> expression acquired were only
intended to be treated as part of expression syntax.

Note that this does not change the behaviour of cases like:

    use POSIX qw(setlocale localeconv);
    our @EXPORT = qw(foo bar baz);

where parentheses were never required around the expression.

=head2 C<\N{BELL}>

This is because Unicode is using that name for a different character.
See L</Unicode Version 6.0 is now supported (mostly)> for more
explanation.

=head2 C<?PATTERN?>

C<?PATTERN?> (without the initial C<m>) has been deprecated and now produces
a warning.  This is to allow future use of C<?> in new operators.
The match-once functionality is still available as C<m?PATTERN?>.

=head2 Tie functions on scalars holding typeglobs

Calling a tie function (C<tie>, C<tied>, C<untie>) with a scalar argument
acts on a filehandle if the scalar happens to hold a typeglob.

This is a long-standing bug that will be removed in Perl 5.16, as
there is currently no way to tie the scalar itself when it holds
a typeglob, and no way to untie a scalar that has had a typeglob
assigned to it.

Now there is a deprecation warning whenever a tie
function is used on a handle without an explicit C<*>.

=head2 User-defined case-mapping

This feature is being deprecated due to its many issues, as documented in
L<perlunicode/User-Defined Case Mappings (for serious hackers only)>.
This feature will be removed in Perl 5.16.  Instead use the CPAN module
L<Unicode::Casing>, which provides improved functionality.

=head2 Deprecated modules

The following module will be removed from the core distribution in a
future release, and should be installed from CPAN instead.  Distributions
on CPAN that require this should add it to their prerequisites.  The
core version of these module now issues a deprecation warning.

If you ship a packaged version of Perl, either alone or as part of a
larger system, then you should carefully consider the repercussions of
core module deprecations.  You may want to consider shipping your default
build of Perl with a package for the deprecated module that
installs into C<vendor> or C<site> Perl library directories.  This will
inhibit the deprecation warnings.

Alternatively, you may want to consider patching F<lib/deprecate.pm>
to provide deprecation warnings specific to your packaging system
or distribution of Perl, consistent with how your packaging system
or distribution manages a staged transition from a release where the
installation of a single package provides the given functionality, to
a later release where the system administrator needs to know to install
multiple packages to get that same functionality.

You can silence these deprecation warnings by installing the module
in question from CPAN.  To install the latest version of it by role
rather than by name, just install C<Task::Deprecations::5_14>.

=over

=item L<Devel::DProf>

We strongly recommend that you install and use L<Devel::NYTProf> instead
of L<Devel::DProf>, as L<Devel::NYTProf> offers significantly
improved profiling and reporting.

=back

=head1 Performance Enhancements

=head2 "Safe signals" optimisation

Signal dispatch has been moved from the runloop into control ops.
This should give a few percent speed increase, and eliminates nearly
all the speed penalty caused by the introduction of "safe signals"
in 5.8.0.  Signals should still be dispatched within the same
statement as they were previously.  If this does I<not> happen, or
if you find it possible to create uninterruptible loops, this is a
bug, and reports are encouraged of how to recreate such issues.

=head2 Optimisation of shift() and pop() calls without arguments

Two fewer OPs are used for shift() and pop() calls with no argument (with
implicit C<@_>).  This change makes shift() 5% faster than C<shift @_>
on non-threaded perls, and 25% faster on threaded ones.

=head2 Optimisation of regexp engine string comparison work

The C<foldEQ_utf8> API function for case-insensitive comparison of strings (which
is used heavily by the regexp engine) was substantially refactored and
optimised -- and its documentation much improved as a free bonus.

=head2 Regular expression compilation speed-up

Compiling regular expressions has been made faster when upgrading
the regex to utf8 is necessary but this isn't known when the compilation begins.

=head2 String appending is 100 times faster

When doing a lot of string appending, perls built to use the system's
C<malloc> could end up allocating a lot more memory than needed in a
inefficient way.

C<sv_grow>, the function used to allocate more memory if necessary
when appending to a string, has been taught to round up the memory
it requests to a certain geometric progression, making it much faster on
certain platforms and configurations.  On Win32, it's now about 100 times
faster.

=head2 Eliminate C<PL_*> accessor functions under ithreads

When C<MULTIPLICITY> was first developed, and interpreter state moved into
an interpreter struct, thread- and interpreter-local C<PL_*> variables
were defined as macros that called accessor functions (returning the
address of the value) outside the Perl core.  The intent was to allow
members within the interpreter struct to change size without breaking
binary compatibility, so that bug fixes could be merged to a maintenance
branch that necessitated such a size change.  This mechanism was redundant
and penalised well-behaved code.  It has been removed.

=head2 Freeing weak references

When there are many weak references to an object, freeing that object
can under some circumstances take O(I<N*N>) time to free, where
I<N> is the number of references.  The circumstances in which this can happen
have been reduced [perl #75254]

=head2 Lexical array and hash assignments

An earlier optimisation to speed up C<my @array = ...> and
C<my %hash = ...> assignments caused a bug and was disabled in Perl 5.12.0.

Now we have found another way to speed up these assignments [perl #82110].

=head2 C<@_> uses less memory

Previously, C<@_> was allocated for every subroutine at compile time with
enough space for four entries.  Now this allocation is done on demand when
the subroutine is called [perl #72416].

=head2 Size optimisations to SV and HV structures

C<xhv_fill> has been eliminated from C<struct xpvhv>, saving 1 IV per hash and
on some systems will cause C<struct xpvhv> to become cache-aligned.  To avoid
this memory saving causing a slowdown elsewhere, boolean use of C<HvFILL>
now calls C<HvTOTALKEYS> instead (which is equivalent), so while the fill
data when actually required are now calculated on demand, cases when
this needs to be done should be rare.

The order of structure elements in SV bodies has changed.  Effectively,
the NV slot has swapped location with STASH and MAGIC.  As all access to
SV members is via macros, this should be completely transparent.  This
change allows the space saving for PVHVs documented above, and may reduce
the memory allocation needed for PVIVs on some architectures.

C<XPV>, C<XPVIV>, and C<XPVNV> now allocate only the parts of the C<SV> body
they actually use, saving some space.

Scalars containing regular expressions now allocate only the part of the C<SV>
body they actually use, saving some space.

=head2 Memory consumption improvements to Exporter

The C<@EXPORT_FAIL> AV is no longer created unless needed, hence neither is
the typeglob backing it.  This saves about 200 bytes for every package that
uses Exporter but doesn't use this functionality.

=head2 Memory savings for weak references

For weak references, the common case of just a single weak reference
per referent has been optimised to reduce the storage required.  In this
case it saves the equivalent of one small Perl array per referent.

=head2 C<%+> and C<%-> use less memory

The bulk of the C<Tie::Hash::NamedCapture> module used to be in the Perl
core.  It has now been moved to an XS module to reduce overhead for
programs that do not use C<%+> or C<%->.

=head2 Multiple small improvements to threads

The internal structures of threading now make fewer API calls and fewer
allocations, resulting in noticeably smaller object code.  Additionally,
many thread context checks have been deferred so they're done only 
as needed (although this is only possible for non-debugging builds).

=head2 Adjacent pairs of nextstate opcodes are now optimized away

Previously, in code such as

    use constant DEBUG => 0;

    sub GAK {
        warn if DEBUG;
        print "stuff\n";
    }

the ops for C<warn if DEBUG> would be folded to a C<null> op (C<ex-const>), but
the C<nextstate> op would remain, resulting in a runtime op dispatch of
C<nextstate>, C<nextstate>, etc.

The execution of a sequence of C<nextstate> ops is indistinguishable from just
the last C<nextstate> op so the peephole optimizer now eliminates the first of
a pair of C<nextstate> ops except when the first carries a label, since labels
must not be eliminated by the optimizer, and label usage isn't conclusively known
at compile time.

=head1 Modules and Pragmata

=head2 New Modules and Pragmata

=over 4

=item *

L<CPAN::Meta::YAML> 0.003 has been added as a dual-life module.  It supports a
subset of YAML sufficient for reading and writing F<META.yml> and F<MYMETA.yml> files
included with CPAN distributions or generated by the module installation
toolchain.  It should not be used for any other general YAML parsing or
generation task.

=item *

L<CPAN::Meta> version 2.110440 has been added as a dual-life module.  It
provides a standard library to read, interpret and write CPAN distribution
metadata files (like F<META.json> and F<META.yml>) that describe a
distribution, its contents, and the requirements for building it and
installing it.  The latest CPAN distribution metadata specification is
included as L<CPAN::Meta::Spec> and notes on changes in the specification
over time are given in L<CPAN::Meta::History>.

=item *

L<HTTP::Tiny> 0.012 has been added as a dual-life module.  It is a very
small, simple HTTP/1.1 client designed for simple GET requests and file
mirroring.  It has been added so that F<CPAN.pm> and L<CPANPLUS> can
"bootstrap" HTTP access to CPAN using pure Perl without relying on external
binaries like L<curl(1)> or L<wget(1)>.

=item *

L<JSON::PP> 2.27105 has been added as a dual-life module to allow CPAN
clients to read F<META.json> files in CPAN distributions.

=item *

L<Module::Metadata> 1.000004 has been added as a dual-life module.  It gathers
package and POD information from Perl module files.  It is a standalone module
based on L<Module::Build::ModuleInfo> for use by other module installation
toolchain components.  L<Module::Build::ModuleInfo> has been deprecated in
favor of this module instead.

=item *

L<Perl::OSType> 1.002 has been added as a dual-life module.  It maps Perl
operating system names (like "dragonfly" or "MSWin32") to more generic types
with standardized names (like "Unix" or "Windows").  It has been refactored
out of L<Module::Build> and L<ExtUtils::CBuilder> and consolidates such mappings into
a single location for easier maintenance.

=item *

The following modules were added by the L<Unicode::Collate> 
upgrade.  See below for details.

L<Unicode::Collate::CJK::Big5>

L<Unicode::Collate::CJK::GB2312>

L<Unicode::Collate::CJK::JISX0208>

L<Unicode::Collate::CJK::Korean>

L<Unicode::Collate::CJK::Pinyin>

L<Unicode::Collate::CJK::Stroke>

=item *

L<Version::Requirements> version 0.101020 has been added as a dual-life
module.  It provides a standard library to model and manipulates module
prerequisites and version constraints defined in L<CPAN::Meta::Spec>.

=back

=head2 Updated Modules and Pragma

=over 4

=item *

L<attributes> has been upgraded from version 0.12 to 0.14.

=item *

L<Archive::Extract> has been upgraded from version 0.38 to 0.48.

Updates since 0.38 include: a safe print method that guards
L<Archive::Extract> from changes to C<$\>; a fix to the tests when run in core
Perl; support for TZ files; a modification for the lzma
logic to favour L<IO::Uncompress::Unlzma>; and a fix
for an issue with NetBSD-current and its new L<unzip(1)>
executable.

=item *

L<Archive::Tar> has been upgraded from version 1.54 to 1.76.

Important changes since 1.54 include the following:

=over

=item *

Compatibility with busybox implementations of L<tar(1)>.

=item *

A fix so that write() and create_archive()
close only filehandles they themselves opened.

=item *

A bug was fixed regarding the exit code of extract_archive.

=item *

The L<ptar(1)> utility has a new option to allow safe creation of
tarballs without world-writable files on Windows, allowing those
archives to be uploaded to CPAN.

=item *

A new L<ptargrep(1)> utility for using regular expressions against 
the contents of files in a tar archive.

=item *

L<pax> extended headers are now skipped.

=back

=item *

L<Attribute::Handlers> has been upgraded from version 0.87 to 0.89.

=item *

L<autodie> has been upgraded from version 2.06_01 to 2.1001.

=item *

L<AutoLoader> has been upgraded from version 5.70 to 5.71.

=item *

The L<B> module has been upgraded from version 1.23 to 1.29.

It no longer crashes when taking apart a C<y///> containing characters
outside the octet range or compiled in a C<use utf8> scope.

The size of the shared object has been reduced by about 40%, with no
reduction in functionality.

=item *

L<B::Concise> has been upgraded from version 0.78 to 0.83.

L<B::Concise> marks rv2sv(), rv2av(), and rv2hv() ops with the new
C<OPpDEREF> flag as "DREFed".

It no longer produces mangled output with the B<-tree> option
[perl #80632].

=item *

L<B::Debug> has been upgraded from version 1.12 to 1.16.

=item *

L<B::Deparse> has been upgraded from version 0.96 to 1.03.

The deparsing of a C<nextstate> op has changed when it has both a
change of package relative to the previous nextstate, or a change of
C<%^H> or other state and a label.  The label was previously emitted
first, but is now emitted last (5.12.1).

The C<no 5.13.2> or similar form is now correctly handled by L<B::Deparse>
(5.12.3).

L<B::Deparse> now properly handles the code that applies a conditional
pattern match against implicit C<$_> as it was fixed in [perl #20444].

Deparsing of C<our> followed by a variable with funny characters
(as permitted under the C<use utf8> pragma) has also been fixed [perl #33752].

=item *

L<B::Lint> has been upgraded from version 1.11_01 to 1.13.

=item *

L<base> has been upgraded from version 2.15 to 2.16.

=item *

L<Benchmark> has been upgraded from version 1.11 to 1.12.

=item *

L<bignum> has been upgraded from version 0.23 to 0.27.

=item *

L<Carp> has been upgraded from version 1.15 to 1.20.

L<Carp> now detects incomplete L<caller()|perlfunc/"caller EXPR">
overrides and avoids using bogus C<@DB::args>.  To provide backtraces,
Carp relies on particular behaviour of the caller() builtin.
L<Carp> now detects if other code has overridden this with an
incomplete implementation, and modifies its backtrace accordingly.
Previously incomplete overrides would cause incorrect values in
backtraces (best case), or obscure fatal errors (worst case).

This fixes certain cases of "Bizarre copy of ARRAY" caused by modules
overriding caller() incorrectly (5.12.2).

It now also avoids using regular expressions that cause Perl to
load its Unicode tables, so as to avoid the "BEGIN not safe after
errors" error that ensue if there has been a syntax error
[perl #82854].

=item *

L<CGI> has been upgraded from version 3.48 to 3.52.

This provides the following security fixes: the MIME boundary in 
multipart_init() is now random and the handling of 
newlines embedded in header values has been improved.

=item *

L<Compress::Raw::Bzip2> has been upgraded from version 2.024 to 2.033.

It has been updated to use L<bzip2(1)> 1.0.6.

=item *

L<Compress::Raw::Zlib> has been upgraded from version 2.024 to 2.033.

=item *

L<constant> has been upgraded from version 1.20 to 1.21.

Unicode constants work once more.  They have been broken since Perl 5.10.0
[CPAN RT #67525].

=item *

L<CPAN> has been upgraded from version 1.94_56 to 1.9600.

Major highlights:

=over 4

=item * much less configuration dialog hassle

=item * support for F<META/MYMETA.json>

=item * support for L<local::lib>

=item * support for L<HTTP::Tiny> to reduce the dependency on FTP sites 

=item * automatic mirror selection

=item * iron out all known bugs in configure_requires

=item * support for distributions compressed with L<bzip2(1)>

=item * allow F<Foo/Bar.pm> on the command line to mean C<Foo::Bar>

=back

=item *

L<CPANPLUS> has been upgraded from version 0.90 to 0.9103.

A change to F<cpanp-run-perl>
resolves L<RT #55964|http://rt.cpan.org/Public/Bug/Display.html?id=55964>
and L<RT #57106|http://rt.cpan.org/Public/Bug/Display.html?id=57106>, both
of which related to failures to install distributions that use
C<Module::Install::DSL> (5.12.2).

A dependency on L<Config> was not recognised as a
core module dependency.  This has been fixed.

L<CPANPLUS> now includes support for F<META.json> and F<MYMETA.json>.

=item *

L<CPANPLUS::Dist::Build> has been upgraded from version 0.46 to 0.54.

=item *

L<Data::Dumper> has been upgraded from version 2.125 to 2.130_02.

The indentation used to be off when C<$Data::Dumper::Terse> was set.  This
has been fixed [perl #73604].

This upgrade also fixes a crash when using custom sort functions that might
cause the stack to change [perl #74170].

L<Dumpxs> no longer crashes with globs returned by C<*$io_ref>
[perl #72332].

=item *

L<DB_File> has been upgraded from version 1.820 to 1.821.

=item *

L<DBM_Filter> has been upgraded from version 0.03 to 0.04.

=item *

L<Devel::DProf> has been upgraded from version 20080331.00 to 20110228.00.

Merely loading L<Devel::DProf> now no longer triggers profiling to start.
Both C<use Devel::DProf> and C<perl -d:DProf ...> behave as before and start
the profiler.

B<NOTE>: L<Devel::DProf> is deprecated and will be removed from a future
version of Perl.  We strongly recommend that you install and use
L<Devel::NYTProf> instead, as it offers significantly improved
profiling and reporting.

=item *

L<Devel::Peek> has been upgraded from version 1.04 to 1.07.

=item *

L<Devel::SelfStubber> has been upgraded from version 1.03 to 1.05.

=item *

L<diagnostics> has been upgraded from version 1.19 to 1.22.

It now renders pod links slightly better, and has been taught to find
descriptions for messages that share their descriptions with other
messages.

=item *

L<Digest::MD5> has been upgraded from version 2.39 to 2.51.

It is now safe to use this module in combination with threads.

=item *

L<Digest::SHA> has been upgraded from version 5.47 to 5.61.

C<shasum> now more closely mimics L<sha1sum(1)>/L<md5sum(1)>.

C<addfile> accepts all POSIX filenames.

New SHA-512/224 and SHA-512/256 transforms (ref. NIST Draft FIPS 180-4
[February 2011])

=item *

L<DirHandle> has been upgraded from version 1.03 to 1.04.

=item *

L<Dumpvalue> has been upgraded from version 1.13 to 1.16.

=item *

L<DynaLoader> has been upgraded from version 1.10 to 1.13.

It fixes a buffer overflow when passed a very long file name.

It no longer inherits from L<AutoLoader>; hence it no longer
produces weird error messages for unsuccessful method calls on classes that
inherit from L<DynaLoader> [perl #84358].

=item *

L<Encode> has been upgraded from version 2.39 to 2.42.

Now, all 66 Unicode non-characters are treated the same way U+FFFF has
always been treated: in cases when it was disallowed, all 66 are
disallowed, and in cases where it warned, all 66 warn.

=item *

L<Env> has been upgraded from version 1.01 to 1.02.

=item *

L<Errno> has been upgraded from version 1.11 to 1.13.

The implementation of L<Errno> has been refactored to use about 55% less memory.

On some platforms with unusual header files, like Win32 L<gcc(1)> using C<mingw64>
headers, some constants that weren't actually error numbers have been exposed
by L<Errno>.  This has been fixed [perl #77416].

=item *

L<Exporter> has been upgraded from version 5.64_01 to 5.64_03.

Exporter no longer overrides C<$SIG{__WARN__}> [perl #74472]

=item *

L<ExtUtils::CBuilder> has been upgraded from version 0.27 to 0.280203.

=item *

L<ExtUtils::Command> has been upgraded from version 1.16 to 1.17.

=item *

L<ExtUtils::Constant> has been upgraded from 0.22 to 0.23.

The L<AUTOLOAD> helper code generated by C<ExtUtils::Constant::ProxySubs>
can now croak() for missing constants, or generate a complete C<AUTOLOAD>
subroutine in XS, allowing simplification of many modules that use it
(L<Fcntl>, L<File::Glob>, L<GDBM_File>, L<I18N::Langinfo>, L<POSIX>,
L<Socket>).

L<ExtUtils::Constant::ProxySubs> can now optionally push the names of all
constants onto the package's C<@EXPORT_OK>.

=item *

L<ExtUtils::Install> has been upgraded from version 1.55 to 1.56.

=item *

L<ExtUtils::MakeMaker> has been upgraded from version 6.56 to 6.57_05.

=item *

L<ExtUtils::Manifest> has been upgraded from version 1.57 to 1.58.

=item *

L<ExtUtils::ParseXS> has been upgraded from version 2.21 to 2.2210.

=item *

L<Fcntl> has been upgraded from version 1.06 to 1.11.

=item *

L<File::Basename> has been upgraded from version 2.78 to 2.82.

=item *

L<File::CheckTree> has been upgraded from version 4.4 to 4.41.

=item *

L<File::Copy> has been upgraded from version 2.17 to 2.21.

=item *

L<File::DosGlob> has been upgraded from version 1.01 to 1.04.

It allows patterns containing literal parentheses: they no longer need to
be escaped.  On Windows, it no longer
adds an extra F<./> to file names
returned when the pattern is a relative glob with a drive specification,
like F<C:*.pl> [perl #71712].

=item *

L<File::Fetch> has been upgraded from version 0.24 to 0.32.

L<HTTP::Lite> is now supported for the "http" scheme.

The L<fetch(1)> utility is supported on FreeBSD, NetBSD, and
Dragonfly BSD for the C<http> and C<ftp> schemes.

=item *

L<File::Find> has been upgraded from version 1.15 to 1.19.

It improves handling of backslashes on Windows, so that paths like
F<C:\dir\/file> are no longer generated [perl #71710].

=item *

L<File::Glob> has been upgraded from version 1.07 to 1.12.

=item *

L<File::Spec> has been upgraded from version 3.31 to 3.33.

Several portability fixes were made in L<File::Spec::VMS>: a colon is now
recognized as a delimiter in native filespecs; caret-escaped delimiters are
recognized for better handling of extended filespecs; catpath() returns
an empty directory rather than the current directory if the input directory
name is empty; and abs2rel() properly handles Unix-style input (5.12.2).

=item *

L<File::stat> has been upgraded from 1.02 to 1.05.

The C<-x> and C<-X> file test operators now work correctly when run
by the superuser.

=item *

L<Filter::Simple> has been upgraded from version 0.84 to 0.86.

=item *

L<GDBM_File> has been upgraded from 1.10 to 1.14.

This fixes a memory leak when DBM filters are used.

=item *

L<Hash::Util> has been upgraded from 0.07 to 0.11.

L<Hash::Util> no longer emits spurious "uninitialized" warnings when
recursively locking hashes that have undefined values [perl #74280].

=item *

L<Hash::Util::FieldHash> has been upgraded from version 1.04 to 1.09.

=item *

L<I18N::Collate> has been upgraded from version 1.01 to 1.02.

=item *

L<I18N::Langinfo> has been upgraded from version 0.03 to 0.08.

langinfo() now defaults to using C<$_> if there is no argument given, just
as the documentation has always claimed.

=item *
