	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF2A,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0xA620,
	0xA62A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0xFF10,
	0xFF1A,
	0x104A0,
	0x104AA,
	0x10D30,
	0x10D3A,
	0x11066,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173A,
	0x118E0,
	0x118EA,
	0x11950,
	0x1195A,
	0x11C50,
	0x11C5A,
	0x11D50,
	0x11D5A,
	0x11DA0,
	0x11DAA,
	0x16A60,
	0x16A6A,
	0x16AC0,
	0x16ACA,
	0x16B50,
	0x16B5A,
	0x1D7CE,
	0x1D800,
	0x1E140,
	0x1E14A,
	0x1E2F0,
	0x1E2FA,
	0x1E950,
	0x1E95A,
	0x1FBF0,
	0x1FBFA
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_WB__NU_invlist[] = {  /* for EBCDIC 1047 */
	127,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA,
	0x660,
	0x66A,
	0x66B,
	0x66C,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF2A,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0xA620,
	0xA62A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0xFF10,
	0xFF1A,
	0x104A0,
	0x104AA,
	0x10D30,
	0x10D3A,
	0x11066,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173A,
	0x118E0,
	0x118EA,
	0x11950,
	0x1195A,
	0x11C50,
	0x11C5A,
	0x11D50,
	0x11D5A,
	0x11DA0,
	0x11DAA,
	0x16A60,
	0x16A6A,
	0x16AC0,
	0x16ACA,
	0x16B50,
	0x16B5A,
	0x1D7CE,
	0x1D800,
	0x1E140,
	0x1E14A,
	0x1E2F0,
	0x1E2FA,
	0x1E950,
	0x1E95A,
	0x1FBF0,
	0x1FBFA
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_WB__NU_invlist[] = {  /* for EBCDIC 037 */
	127,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA,
	0x660,
	0x66A,
	0x66B,
	0x66C,
	0x6F0,
	0x6FA,
	0x7C0,
	0x7CA,
	0x966,
	0x970,
	0x9E6,
	0x9F0,
	0xA66,
	0xA70,
	0xAE6,
	0xAF0,
	0xB66,
	0xB70,
	0xBE6,
	0xBF0,
	0xC66,
	0xC70,
	0xCE6,
	0xCF0,
	0xD66,
	0xD70,
	0xDE6,
	0xDF0,
	0xE50,
	0xE5A,
	0xED0,
	0xEDA,
	0xF20,
	0xF2A,
	0x1040,
	0x104A,
	0x1090,
	0x109A,
	0x17E0,
	0x17EA,
	0x1810,
	0x181A,
	0x1946,
	0x1950,
	0x19D0,
	0x19DA,
	0x1A80,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B50,
	0x1B5A,
	0x1BB0,
	0x1BBA,
	0x1C40,
	0x1C4A,
	0x1C50,
	0x1C5A,
	0xA620,
	0xA62A,
	0xA8D0,
	0xA8DA,
	0xA900,
	0xA90A,
	0xA9D0,
	0xA9DA,
	0xA9F0,
	0xA9FA,
	0xAA50,
	0xAA5A,
	0xABF0,
	0xABFA,
	0xFF10,
	0xFF1A,
	0x104A0,
	0x104AA,
	0x10D30,
	0x10D3A,
	0x11066,
	0x11070,
	0x110F0,
	0x110FA,
	0x11136,
	0x11140,
	0x111D0,
	0x111DA,
	0x112F0,
	0x112FA,
	0x11450,
	0x1145A,
	0x114D0,
	0x114DA,
	0x11650,
	0x1165A,
	0x116C0,
	0x116CA,
	0x11730,
	0x1173A,
	0x118E0,
	0x118EA,
	0x11950,
	0x1195A,
	0x11C50,
	0x11C5A,
	0x11D50,
	0x11D5A,
	0x11DA0,
	0x11DAA,
	0x16A60,
	0x16A6A,
	0x16AC0,
	0x16ACA,
	0x16B50,
	0x16B5A,
	0x1D7CE,
	0x1D800,
	0x1E140,
	0x1E14A,
	0x1E2F0,
	0x1E2FA,
	0x1E950,
	0x1E95A,
	0x1FBF0,
	0x1FBFA
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_WB__SQ_invlist[] = {  /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x27,
	0x28
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_WB__SQ_invlist[] = {  /* for EBCDIC 1047 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7D,
	0x7E
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_WB__SQ_invlist[] = {  /* for EBCDIC 037 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7D,
	0x7E
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_WB__WSEGSPACE_invlist[] = {  /* for ASCII/Latin1 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x21,
	0x1680,
	0x1681,
	0x2000,
	0x2007,
	0x2008,
	0x200B,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_WB__WSEGSPACE_invlist[] = {  /* for EBCDIC 1047 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0x41,
	0x1680,
	0x1681,
	0x2000,
	0x2007,
	0x2008,
	0x200B,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_WB__WSEGSPACE_invlist[] = {  /* for EBCDIC 037 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x40,
	0x41,
	0x1680,
	0x1681,
	0x2000,
	0x2007,
	0x2008,
	0x200B,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_WB__XX_invlist[] = {  /* for ASCII/Latin1 */
	1541,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA,
	0xE,
	0x20,
	0x21,
	0x22,
	0x23,
	0x27,
	0x28,
	0x2C,
	0x2D,
	0x2E,
	0x2F,
	0x30,
	0x3C,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0x85,
	0x86,
	0xAA,
	0xAB,
	0xAD,
	0xAE,
	0xB5,
	0xB6,
	0xB7,
	0xB8,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2D8,
	0x2DE,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x380,
	0x386,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55D,
	0x55E,
	0x58B,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5EF,
	0x5F5,
	0x600,
	0x606,
	0x60C,
	0x60E,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x66A,
	0x66B,
	0x66D,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7F8,
	0x7F9,
	0x7FA,
	0x7FB,
	0x7FD,
	0x7FE,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x870,
	0x888,
	0x889,
	0x88F,
	0x890,
	0x892,
	0x898,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0x9FE,
	0x9FF,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB55,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3C,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC5D,
	0xC5E,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDD,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD81,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEC8,
	0xECE,
	0xED0,
	0xEDA,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x103F,
	0x1040,
	0x104A,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x10D0,
	0x10FB,
	0x10FC,
	0x1249,
	0x124A,
	0x124E,
	0x1250,
	0x1257,
	0x1258,
	0x1259,
	0x125A,
	0x125E,
	0x1260,
	0x1289,
	0x128A,
	0x128E,
	0x1290,
	0x12B1,
	0x12B2,
	0x12B6,
	0x12B8,
	0x12BF,
	0x12C0,
	0x12C1,
	0x12C2,
	0x12C6,
	0x12C8,
	0x12D7,
	0x12D8,
	0x1311,
	0x1312,
	0x1316,
	0x1318,
	0x135B,
	0x135D,
	0x1360,
	0x1380,
