#   build_id links are generate for all binary packages. If this is a
#   main package (the __debug_package global isn't set) then the
#   build_id link is generated as /usr/lib/.build-id/xx/yyy. If this is
#   a -debuginfo package (the __debug_package global is set) then the
#   build_id link is generated as /usr/lib/debug/.build-id/xx/yyy.
#
# - compat
#   Same as for "separate" but if the __debug_package global is set then
#   the -debuginfo package will have a compatibility link for the main
#   ELF /usr/lib/debug/.build-id/xx/yyy -> /usr/lib/.build-id/xx/yyy
%_build_id_links compat

# Whether build-ids should be made unique between package version/releases
# when generating debuginfo packages. If set to 1 this will pass
# --build-id-seed "%{VERSION}-%{RELEASE}" to find-debuginfo.sh which will
# pass it onto debugedit --build-id-seed to be used to prime the build-id
# note hash.
%_unique_build_ids	1

# Do not recompute build-ids but keep whatever is in the ELF file already.
# Cannot be used together with _unique_build_ids (which forces recomputation).
# Defaults to undefined (unset).
#%_no_recompute_build_ids 1

# Whether .debug files should be made unique between package version,
# release and architecture. If set to 1 this will pass
# --unique-debug-suffix "-%{VERSION}-%{RELEASE}.%{_arch} find-debuginfo.sh
# to create debuginfo files which end in -<ver>-<rel>.<arch>.debug
# Requires _unique_build_ids.
%_unique_debug_names	1

# Whether the /usr/debug/src/<package> directories should be unique between
# package version, release and architecture. If set to 1 this will pass
# --unique-debug-src-base "%{name}-%{VERSION}-%{RELEASE}.%{_arch}" to
# find-debuginfo.sh to name the directory under /usr/debug/src as
# <name>-<ver>-<rel>.<arch>.
%_unique_debug_srcs	1

# Whether rpm should put debug source files into its own subpackage
#%_debugsource_packages	1

# Whether rpm should create extra debuginfo packages for each subpackage
#%_debuginfo_subpackages 1

#
# Use internal dependency generator rather than external helpers?
%_use_internal_dependency_generator	1

# Directories whose contents should be considered as documentation.
%__docdir_path %{_datadir}/doc:%{_datadir}/man:%{_datadir}/info:%{_datadir}/gtk-doc/html:%{_datadir}/gnome/help:%{?_docdir}:%{?_mandir}:%{?_infodir}:%{?_javadocdir}:/usr/doc:/usr/man:/usr/info:/usr/X11R6/man

#
# Path to scripts to autogenerate package dependencies,
#
# Note: Used iff _use_internal_dependency_generator is zero.
#%__find_provides	%{_rpmconfigdir}/rpmdeps --provides
#%__find_requires	%{_rpmconfigdir}/rpmdeps --requires
%__find_provides	%{_rpmconfigdir}/find-provides
%__find_requires	%{_rpmconfigdir}/find-requires
#%__find_conflicts	???
#%__find_obsoletes	???

# 
# Path to file attribute classifications for automatic dependency 
# extraction, used when _use_internal_dependency_generator
# is used (on by default). Files can have any number of attributes
# attached to them, and dependencies are separately extracted for
# each attribute.
# 
# To define a new file attribute called "myattr", add a file named
# "myattr" to this directory, defining the requires and/or provides
# finder script(s) + magic and/or path pattern regex(es).
# provides finder and 
# %__myattr_requires	path + args to requires finder script for <myattr>
# %__myattr_provides	path + args to provides finder script for <myattr>
# %__myattr_magic	libmagic classification match regex
# %__myattr_path	path based classification match regex
# %__myattr_flags	flags to control behavior (just "exeonly" for now)
# %__myattr_exclude_magic	exclude by magic regex
# %__myattr_exclude_path	exclude by path regex
#
%_fileattrsdir		%{_rpmconfigdir}/fileattrs

# This macro defines how much space (in bytes) in package should be
# reserved for gpg signatures during building of a package. If this space is
# big enough for gpg signatures to fit into it then signing of the packages is
# very quick because it is not necessary to rewrite the whole package to make
# some space for gpg signatures.
%__gpg_reserved_space 4096

#==============================================================================
# ---- Database configuration macros.
#
# Select backend database. The following values are supported:
# bdb_ro Berkeley DB (read-only)
# ndb new data base format
# sqlite Sqlite database
# dummy dummy backend (no actual functionality)
#
%_db_backend	      sqlite

#==============================================================================
# ---- GPG/PGP/PGP5 signature macros.
#	Macro(s) to hold the arguments passed to GPG/PGP for package
#	signing.  Expansion result is parsed by popt, so be sure to use
#	%{shescape} where needed.
#
%__gpg_sign_cmd			%{shescape:%{__gpg}} \
	gpg --no-verbose --no-armor --no-secmem-warning \
	%{?_gpg_digest_algo:--digest-algo=%{_gpg_digest_algo}} \
	%{?_gpg_sign_cmd_extra_args} \
	%{?_gpg_name:-u %{shescape:%{_gpg_name}}} \
	-sbo %{shescape:%{?__signature_filename}} \
	%{?__plaintext_filename:-- %{shescape:%{__plaintext_filename}}}

#==============================================================================
# ---- Transaction macros.
#	Macro(s) used to parameterize transactions.
#
#	The output binary package file name template used when building
#	binary packages.
#
# XXX	Note: escaped %% for use in headerSprintf()
%_build_name_fmt	%%{ARCH}/%%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm

#	Verify digest/signature flags for various rpm modes:
#	0x30300 (RPMVSF_MASK_NODIGESTS)    --nohdrchk      if set, don't check digest(s)
#	0xc0c00 (RPMVSF_MASK_NOSIGNATURES) --nosignature   if set, don't check signature(s)
#	0xf0000 (RPMVSF_MASK_NOPAYLOAD)    --nolegacy      if set, check header+payload (if possible)
#	0x00f00 (RPMVSF_MASK_NOHEADER)     --nohdrchk      if set, don't check rpmdb headers
#
#	For example, the value 0xf0c00 (=0xf0000+0xc0c00) disables legacy
#	digest/signature checking, disables signature checking, but attempts
#	digest checking, also when retrieving headers from the database.
#
#	You also can do:
#	 >>> hex(rpm.RPMVSF_MASK_NOSIGNATURES)
#	 '0xc0c00'
#	or:
#	 >>> hex(rpm.RPMVSF_MASK_NOSIGNATURES|rpm.RPMVSF_MASK_NOPAYLOAD)
#	 '0xf0c00'
#	at the python prompt for example, after "import rpm".
#
#	The checking overhead is ~11ms per header for digests/signatures;
#	each header from the database is checked only when first encountered
#	for each database open.
#
#	Note: the %_vsflags_erase applies to --upgrade/--freshen modes as
#	well as --erase.
#
%__vsflags		0xf0000
%_vsflags_build		%{__vsflags}
%_vsflags_erase		%{__vsflags}
%_vsflags_install	%{__vsflags}
%_vsflags_query		%{__vsflags}
%_vsflags_rebuilddb	0xc0c00
%_vsflags_verify	%{__vsflags}

# Enforced package verification level
# all		require valid digest(s) and signature(s)
# signature	require valid signature(s)
# digest	require valid digest(s)
# none		traditional rpm behavior, nothing required
%_pkgverify_level digest

# Disabler flags for package verification (similar to vsflags)
%_pkgverify_flags 0x0

# Minimize writes during transactions (at the cost of more reads) to
# conserve eg SSD disks (EXPERIMENTAL).
# 1			enable
# 0 			disable
# -1 (or undefined)	autodetect on platforms where supported, otherwise
# 			default to disabled
#%_minimize_writes      -1

# Flush file IO during transactions (at a severe cost in performance
# for rotational disks).
# 1			enable
# <= 0 (or undefined)	disable
#%_flush_io		0

# Set to 1 to have IMA signatures written also on %config files.
# Note that %config files may be changed and therefore end up with
# a wrong or missing signature.
#%_ima_sign_config_files	0

# Set to 1 to have fsverity signatures written for %config files.
#%_fsverity_sign_config_files	0

#
# Default output format string for rpm -qa
#
# XXX	Note: escaped %% for use in headerFormat()
%_query_all_fmt		%%{nvr}%%{archsuffix}

#
# Default for coloring output
# valid values are always never and auto
%_color_output	never

#
# Default path to the file used for transaction fcntl lock.
%_rpmlock_path	%{_dbpath}/.rpm.lock

#
# ISA dependency marker, none for noarch and name-bitness for others
%_isa			%{?__isa:(%{__isa})}%{!?__isa:%{nil}}

#
# Define per-arch and per-os defaults. Normally overridden by per-target macros.
%__arch_install_post	%{nil}
%__os_install_post	%{___build_post}

# Macro to fix broken permissions in sources
%_fixperms      %{__chmod} -Rf a+rX,u+w,g-w,o-w

#==============================================================================
# ---- Scriptlet template templates.
#	Global defaults used for building scriptlet templates.
#

%___build_shell		%{?_buildshell:%{_buildshell}}%{!?_buildshell:/bin/sh}
%___build_args		-e
%___build_cmd		%{?_sudo:%{_sudo} }%{?_remsh:%{_remsh} %{_remhost} }%{?_remsudo:%{_remsudo} }%{?_remchroot:%{_remchroot} %{_remroot} }%{___build_shell} %{___build_args}
%___build_pre	\
  RPM_SOURCE_DIR=\"%{u2p:%{_sourcedir}}\"\
  RPM_BUILD_DIR=\"%{u2p:%{_builddir}}\"\
  RPM_OPT_FLAGS=\"%{optflags}\"\
  RPM_ARCH=\"%{_arch}\"\
  RPM_OS=\"%{_os}\"\
  RPM_BUILD_NCPUS=\"%{_smp_build_ncpus}\"\
  export RPM_SOURCE_DIR RPM_BUILD_DIR RPM_OPT_FLAGS RPM_ARCH RPM_OS RPM_BUILD_NCPUS\
  RPM_DOC_DIR=\"%{_docdir}\"\
  export RPM_DOC_DIR\
  RPM_PACKAGE_NAME=\"%{NAME}\"\
  RPM_PACKAGE_VERSION=\"%{VERSION}\"\
  RPM_PACKAGE_RELEASE=\"%{RELEASE}\"\
  export RPM_PACKAGE_NAME RPM_PACKAGE_VERSION RPM_PACKAGE_RELEASE\
  LANG=C\
  export LANG\
  unset CDPATH DISPLAY ||:\
  %{?buildroot:RPM_BUILD_ROOT=\"%{u2p:%{buildroot}}\"\
  export RPM_BUILD_ROOT}\
  %{?_javaclasspath:CLASSPATH=\"%{_javaclasspath}\"\
  export CLASSPATH}\
  PKG_CONFIG_PATH=\"${PKG_CONFIG_PATH}:%{_libdir}/pkgconfig:%{_datadir}/pkgconfig\"\
  export PKG_CONFIG_PATH\
  \
  %[%{verbose}?"set -x":""]\
  umask 022\
  cd \"%{u2p:%{_builddir}}\"\


#%___build_body		%{nil}
%___build_post	\
  RPM_EC=$?\
  for pid in $(jobs -p); do kill -9 ${pid} || continue; done\
  exit ${RPM_EC}\
%{nil}

%___build_template	#!%{___build_shell}\
%{___build_pre}\
%{nil}

#%{___build_body}\
#%{___build_post}\
#%{nil}

#==============================================================================
# ---- Scriptlet templates.
#	Macro(s) that expand to a command and script that is executed.
#
%__spec_prep_shell	%{___build_shell}
%__spec_prep_args	%{___build_args}
%__spec_prep_cmd	%{___build_cmd}
%__spec_prep_pre	%{___build_pre}
%__spec_prep_body	%{___build_body}
%__spec_prep_post	%{___build_post}
%__spec_prep_template	#!%{__spec_prep_shell}\
%{__spec_prep_pre}\
%{nil}

#%{__spec_prep_body}\
#%{__spec_prep_post}\
#%{nil}

%__spec_buildrequires_shell	%{___build_shell}
%__spec_buildrequires_args	%{___build_args}
%__spec_buildrequires_cmd	%{___build_cmd}
%__spec_buildrequires_pre	%{___build_pre}
%__spec_buildrequires_body	%{___build_body}
%__spec_buildrequires_post	%{___build_post}
%__spec_buildrequires_template	#!%{__spec_buildrequires_shell}\
%{__spec_buildrequires_pre}\
%{nil}

#%{__spec_buildrequires_body}\
#%{__spec_buildrequires_post}\
#%{nil}

%__spec_conf_shell	%{___build_shell}
%__spec_conf_args	%{___build_args}
%__spec_conf_cmd	%{___build_cmd}
%__spec_conf_pre	%{___build_pre}
%__spec_conf_body	%{___build_body}
%__spec_conf_post	%{___build_post}
%__spec_conf_template	#!%{__spec_build_shell}\
%{__spec_conf_pre}\
%{nil}

%__spec_build_shell	%{___build_shell}
%__spec_build_args	%{___build_args}
%__spec_build_cmd	%{___build_cmd}
%__spec_build_pre	%{___build_pre}
%__spec_build_body	%{___build_body}
%__spec_build_post	%{___build_post}
%__spec_build_template	#!%{__spec_build_shell}\
%{__spec_build_pre}\
%{nil}

#%{__spec_build_body}\
#%{__spec_build_post}\
#%{nil}

%__spec_install_shell	%{___build_shell}
%__spec_install_args	%{___build_args}
%__spec_install_cmd	%{___build_cmd}
%__spec_install_pre	%{___build_pre}
%__spec_install_body	%{___build_body}
%__spec_install_post\
%{?__debug_package:%{__debug_install_post}}\
%{__arch_install_post}\
%{__os_install_post}\
%{nil}
%__spec_install_template	#!%{__spec_install_shell}\
%{__spec_install_pre}\
%{nil}

#%{__spec_install_body}\
#%{__spec_install_post}\
#%{nil}

%__spec_check_shell	%{___build_shell}
%__spec_check_args	%{___build_args}
%__spec_check_cmd	%{___build_cmd}
%__spec_check_pre	%{___build_pre}
%__spec_check_body	%{___build_body}
%__spec_check_post	%{___build_post}
%__spec_check_template	#!%{__spec_check_shell}\
%{__spec_check_pre}\
%{nil}

#%{__spec_check_body}\
#%{__spec_check_post}\
#%{nil}

#%__spec_autodep_shell	%{___build_shell}
#%__spec_autodep_args	%{___build_args}
#%__spec_autodep_cmd	%{___build_cmd}
#%__spec_autodep_pre	%{___build_pre}
#%__spec_autodep_body	%{___build_body}
#%__spec_autodep_post	%{___build_post}
#%__spec_autodep_template	#!%{__spec_autodep_shell}\
#%{__spec_autodep_pre}\
#%{nil}

#%{__spec_autodep_body}\
#%{__spec_autodep_post}\
#%{nil}

%__spec_clean_shell	%{___build_shell}
%__spec_clean_args	%{___build_args}
%__spec_clean_cmd	%{___build_cmd}
%__spec_clean_pre	%{___build_pre}
%__spec_clean_body	%{___build_body}
%__spec_clean_post	%{___build_post}
%__spec_clean_template	#!%{__spec_clean_shell}\
%{__spec_clean_pre}\
%{nil}

#%{__spec_clean_body}\
#%{__spec_clean_post}\
#%{nil}

%__spec_rmbuild_shell	%{___build_shell}
%__spec_rmbuild_args	%{___build_args}
%__spec_rmbuild_cmd	%{___build_cmd}
%__spec_rmbuild_pre	%{___build_pre}
%__spec_rmbuild_body	%{___build_body}
%__spec_rmbuild_post	%{___build_post}
%__spec_rmbuild_template	#!%{__spec_rmbuild_shell}\
%{__spec_rmbuild_pre}\
%{nil}

#%{__spec_rmbuild_body}\
#%{__spec_rmbuild_post}\
#%{nil}

# XXX We don't expand pre/post install scriptlets (yet).
#%__spec_pre_pre		%{nil}
#%__spec_pre_post		%{nil}
#%__spec_post_pre		%{nil}
#%__spec_post_post		%{nil}
#%__spec_preun_pre		%{nil}
#%__spec_preun_post		%{nil}
#%__spec_postun_pre		%{nil}
#%__spec_postun_post		%{nil}
#%__spec_triggerpostun_pre	%{nil}
#%__spec_triggerpostun_post	%{nil}
#%__spec_triggerun_pre		%{nil}
#%__spec_triggerun_post		%{nil}
#%__spec_triggerin_pre		%{nil}
#%__spec_triggerin_post		%{nil}

#==============================================================================
# ---- configure macros.
#	Macro(s) slavishly copied from autoconf's config.status.
#
%_prefix		/usr
%_exec_prefix		%{_prefix}
%_bindir		%{_exec_prefix}/bin
%_sbindir		%{_exec_prefix}/sbin
%_libexecdir		%{_exec_prefix}/libexec
%_datadir		%{_prefix}/share
%_sysconfdir		/etc
%_sharedstatedir	%{_prefix}/com
%_localstatedir		/var
%_lib			lib
%_libdir		%{_exec_prefix}/%{_lib}
%_includedir		%{_prefix}/include
%_infodir		%{_datadir}/info
%_mandir		%{_datadir}/man

#==============================================================================
# ---- config.guess platform macros.
#	Macro(s) similar to the tokens used by configure.
#
%_build			%{_host}
%_build_alias		%{_host_alias}
%_build_cpu		%{_host_cpu}
%_build_vendor		%{_host_vendor}
%_build_os		%{_host_os}
%_host			x86_64-pc-linux-gnu
%_host_alias		%{nil}
%_host_cpu		x86_64
%_host_vendor		pc
%_host_os		linux
%_target		%{_host}
%_target_alias		%{_host_alias}
%_target_cpu		%{_host_cpu}
%_target_vendor		%{_host_vendor}
%_target_os		%{_host_os}

#==============================================================================
# ---- compiler flags.

# C compiler flags.  This is traditionally called CFLAGS in makefiles.
# Historically also available as %%{optflags}, and %%build sets the
# environment variable RPM_OPT_FLAGS to this value.
%build_cflags %{optflags}

# C++ compiler flags.  This is traditionally called CXXFLAGS in makefiles.
%build_cxxflags %{optflags}

# Fortran compiler flags.  Makefiles use both FFLAGS and FCFLAGS as
# the corresponding variable names.
%build_fflags %{optflags} %{?_fmoddir:-I%{_fmoddir}}

# Link editor flags.  This is usually called LDFLAGS in makefiles.
#%build_ldflags -Wl,-z,relro

# Expands to shell code to seot the compiler/linker environment
# variables CFLAGS, CXXFLAGS, FFLAGS, FCFLAGS, LDFLAGS if they have
# not been set already.
%set_build_flags \
  CFLAGS="${CFLAGS:-%{?build_cflags}}" ; export CFLAGS ; \
  CXXFLAGS="${CXXFLAGS:-%{?build_cxxflags}}" ; export CXXFLAGS ; \
  FFLAGS="${FFLAGS:-%{?build_fflags}}" ; export FFLAGS ; \
  FCFLAGS="${FCFLAGS:-%{?build_fflags}}" ; export FCFLAGS ; \
  LDFLAGS="${LDFLAGS:-%{?build_ldflags}}" ; export LDFLAGS

#==============================================================================
# ---- specfile macros.
#	Macro(s) here can be used reliably for reproducible builds.
#	(Note: Above is the goal, below are the macros under development)
#
# The configure macro runs autoconf configure script with platform specific
# directory structure (--prefix, --libdir etc) and compiler flags
# such as CFLAGS.
#
%_configure ./configure
%configure \
  %{set_build_flags}; \
  %{_configure} --host=%{_host} --build=%{_build} \\\
	--program-prefix=%{?_program_prefix} \\\
	--disable-dependency-tracking \\\
	--prefix=%{_prefix} \\\
	--exec-prefix=%{_exec_prefix} \\\
	--bindir=%{_bindir} \\\
	--sbindir=%{_sbindir} \\\
	--sysconfdir=%{_sysconfdir} \\\
	--datadir=%{_datadir} \\\
	--includedir=%{_includedir} \\\
	--libdir=%{_libdir} \\\
	--libexecdir=%{_libexecdir} \\\
	--localstatedir=%{_localstatedir} \\\
	--sharedstatedir=%{_sharedstatedir} \\\
	--mandir=%{_mandir} \\\
	--infodir=%{_infodir}

#------------------------------------------------------------------------------
# Tested features of make
# Output synchronization for parallel make:
%_make_output_sync %(! %{__make} --version -O >/dev/null 2>&1 || echo -O)

#------------------------------------------------------------------------------
# Verbosity options passed to make
%_make_verbose V=1 VERBOSE=1

#------------------------------------------------------------------------------
# The "make" analogue, hiding the _smp_mflags magic from specs
%make_build %{__make} %{_make_output_sync} %{?_smp_mflags} %{_make_verbose}

#------------------------------------------------------------------------------
# The make install analogue of %configure for modern autotools:
%make_install %{__make} install DESTDIR=%{?buildroot} INSTALL="%{__install} -p"

#------------------------------------------------------------------------------
# Former make install analogue, kept for compatibility and for old/broken
#  packages that don't support DESTDIR properly.
%makeinstall \
  echo "warning: %%makeinstall is deprecated, try %%make_install instead" 1>&2\
  %{__make} \\\
	prefix=%{?buildroot:%{buildroot}}%{_prefix} \\\
	exec_prefix=%{?buildroot:%{buildroot}}%{_exec_prefix} \\\
	bindir=%{?buildroot:%{buildroot}}%{_bindir} \\\
	sbindir=%{?buildroot:%{buildroot}}%{_sbindir} \\\
	sysconfdir=%{?buildroot:%{buildroot}}%{_sysconfdir} \\\
	datadir=%{?buildroot:%{buildroot}}%{_datadir} \\\
	includedir=%{?buildroot:%{buildroot}}%{_includedir} \\\
	libdir=%{?buildroot:%{buildroot}}%{_libdir} \\\
	libexecdir=%{?buildroot:%{buildroot}}%{_libexecdir} \\\
	localstatedir=%{?buildroot:%{buildroot}}%{_localstatedir} \\\
	sharedstatedir=%{?buildroot:%{buildroot}}%{_sharedstatedir} \\\
	mandir=%{?buildroot:%{buildroot}}%{_mandir} \\\
	infodir=%{?buildroot:%{buildroot}}%{_infodir} \\\
  install

#------------------------------------------------------------------------------
%patches %{lua: for i, p in ipairs(patches) do \
  print(macros.shescape({p}).." ") end}
%sources %{lua: for i, s in ipairs(sources) do \
  print(macros.shescape({s}).." ") end}

#------------------------------------------------------------------------------
# arch macro for all Intel i?86 compatible processors
#  (Note: This macro (and it's analogues) will probably be obsoleted when
#   rpm can use regular expressions against target platforms in macro
#   conditionals.
#
%ix86   i386 i486 i586 i686 pentium3 pentium4 athlon geode

#------------------------------------------------------------------------------
# arch macro for all supported 32-bit ARM processors
%arm32	armv3l armv4b armv4l armv4tl armv5tl armv5tel armv5tejl armv6l armv6hl armv7l armv7hl armv7hnl armv8l armv8hl armv8hnl armv8hcnl

#------------------------------------------------------------------------------
# arch macro for all supported 32-bit ARM processors (legacy, use %%arm32 instead)
%arm	%{arm32}

#------------------------------------------------------------------------------
# arch macro for all supported 64-bit ARM processors
%arm64	aarch64

#------------------------------------------------------------------------------
# arch macro for 32-bit MIPS processors
%mips32	mips mipsel mipsr6 mipsr6el

#------------------------------------------------------------------------------
# arch macro for 64-bit MIPS processors
%mips64	mips64 mips64el mips64r6 mips64r6el

#------------------------------------------------------------------------------
# arch macro for big endian MIPS processors
%mipseb	mips mipsr6 mips64 mips64r6

#------------------------------------------------------------------------------
# arch macro for little endian MIPS processors
%mipsel	mipsel mipsr6el mips64el mips64r6el

#------------------------------------------------------------------------------
# arch macro for all supported MIPS processors
%mips	%{mips32} %{mips64}

#------------------------------------------------------------------------------
# arch macro for all supported Sparc processors
%sparc sparc sparcv8 sparcv9 sparcv9v sparc64 sparc64v

#------------------------------------------------------------------------------
# arch macro for all supported Alpha processors
%alpha	alpha alphaev56 alphaev6 alphaev67

#------------------------------------------------------------------------------
# arch macro for all supported PowerPC 64 processors
%power64	ppc64 ppc64p7 ppc64le

#------------------------------------------------------------------------------
# arch macro for all supported RISC-V processors
%riscv32	riscv32
%riscv64	riscv64
%riscv128	riscv128
%riscv		%{riscv32} %{riscv64} %{riscv128}


#------------------------------------------------------------------------------
# arch macro for 64-bit LOONGARCH processors
%loongarch64	loongarch64

#------------------------------------------------------------------------
# Use in %install to generate locale specific file lists. For example,
#
# %install
# ...
# %find_lang %{name}
# ...
# %files -f %{name}.lang
#
%find_lang	%{_rpmconfigdir}/find-lang.sh %{buildroot}

# Commands + opts to use for retrieving remote files
# Proxy opts can be set through --httpproxy/--httpport popt aliases,
# for any special local needs use %__urlhelper_localopts in system-wide
# or per-user macro configuration.
%__urlhelpercmd         /usr/bin/curl
%__urlhelperopts        --silent --show-error --fail --globoff --location -o
%__urlhelper_proxyopts   %{?_httpproxy:--proxy %{_httpproxy}%{?_httpport::%{_httpport}}}%{!?_httpproxy:%{nil}}
%_urlhelper             %{__urlhelpercmd} %{?__urlhelper_localopts} %{?__urlhelper_proxyopts} %{__urlhelperopts}

# Transaction plugin macros
%__plugindir		%{_libdir}/rpm-plugins
%__transaction_systemd_inhibit	%{__plugindir}/systemd_inhibit.so
%__transaction_selinux		%{__plugindir}/selinux.so
%__transaction_syslog		%{__plugindir}/syslog.so
%__transaction_ima		%{__plugindir}/ima.so
%__transaction_fapolicyd	%{__plugindir}/fapolicyd.so
%__transaction_fsverity		%{__plugindir}/fsverity.so
%__transaction_prioreset	%{__plugindir}/prioreset.so
%__transaction_audit		%{__plugindir}/audit.so
%__transaction_dbus_announce	%{__plugindir}/dbus_announce.so

#------------------------------------------------------------------------------
# Macros for further automated spec %setup and patch application

# default to plain patch
%__scm patch
# meh, figure something saner
%__scm_username rpm-build
%__scm_usermail <rpm-build>
%__scm_author %{__scm_username} %{__scm_usermail}

# Plain patch (-m is unused)
%__scm_setup_patch(q) %{nil}
%__scm_apply_patch(qp:m:)\
%{__patch} %{-p:-p%{-p*}} %{-q:-s} --fuzz=%{_default_patch_fuzz} %{_default_patch_flags}

# Plain patch with backups for gendiff
%__scm_setup_gendiff(q) %{nil}
%__scm_apply_gendiff(qp:m:)\
%{__patch} %{-p:-p%{-p*}} %{-q:-s} --fuzz=%{_default_patch_fuzz} %{_default_patch_flags} -b --suffix ".%{2}"

# Mercurial (aka hg)
%__scm_setup_hg(q)\
%{__hg} init %{-q} .\
%{__hg} add %{-q} .\
%{__hg} commit %{-q} --user "%{__scm_author}" -m "%{NAME}-%{VERSION} base"

%__scm_apply_hg(qp:m:)\
%{__hg} import - %{-p:-p%{-p*}} %{-q} -m %{-m*} --user "%{__scm_author}"

# Git
%__scm_setup_git(q)\
%{__git} init %{-q}\
%{__git} config user.name "%{__scm_username}"\
%{__git} config user.email "%{__scm_usermail}"\
%{__git} config gc.auto 0\
%{__git} add --force .\
%{__git} commit %{-q} --allow-empty -a\\\
	--author "%{__scm_author}" -m "%{NAME}-%{VERSION} base"\
%{__git} checkout --track -b rpm-build

%__scm_apply_git(qp:m:)\
%{__git} apply --index --reject %{-p:-p%{-p*}} -\
%{__git} commit %{-q} -m %{-m*} --author "%{__scm_author}"

# Git, using "git am" (-m is unused)
%__scm_setup_git_am(q)\
%{expand:%__scm_setup_git %{-q}}

%__scm_apply_git_am(qp:m:)\
%{__git} am --reject %{-q} %{-p:-p%{-p*}}

# Quilt
%__scm_setup_quilt(q) %{nil}
%__scm_apply_quilt(qp:m:)\
%{__quilt} import %{-p:-p%{-p*}} %{1} && %{__quilt} push %{-q}

# Bzr
%__scm_setup_bzr(q)\
%{__bzr} init %{-q}\
%{__bzr} whoami --branch "%{__scm_author}"\
%{__bzr} add .\
%{__bzr} commit %{-q} -m "%{NAME}-%{VERSION} base"

# bzr doesn't seem to have its own command to apply patches?
%__scm_apply_bzr(qp:m:)\
%{__patch} %{-p:-p%{-p*}} %{-q:-s}\
%{__bzr} commit %{-q} -m %{-m*}

# Single patch application
%__apply_patch(qp:m:)\
%{lua:\
local file = rpm.expand("%{1}")\
local num = rpm.expand("%{2}")\
if posix.access(file, "r") then\
    local options = rpm.expand("%{-q} %{-p:-p%{-p*}} %{-m:-m%{-m*}}")\
    local scm_apply = rpm.expand("%__scm_apply_%{__scm}")\
    print(rpm.expand("%{uncompress:"..file.."} | "..scm_apply.." "..options.."  "..file.." "..num.."\\n"))\
else\
    print("echo 'Cannot read "..file.."'; exit 1;".."\\n")\
end}

# Apply patches using %autosetup configured SCM.
# Typically used with no arguments to apply all patches in the order
# introduced in the spec, but alternatively can be used to apply indvidual
# patches in arbitrary order by passing them as arguments.
# -v		Verbose
# -p<N>		Prefix strip (ie patch -p argument)
# -m<min>       Apply patches with number >= min only (if no arguments)
# -M<max>       Apply patches with number <= max only (if no arguments)
%autopatch(vp:m:M:) %{lua:
if #arg == 0 then
    local lo = tonumber(rpm.expand("%{-m:%{-m*}}"))
    local hi = tonumber(rpm.expand("%{-M:%{-M*}}"))
    for i, n in ipairs(patch_nums) do
        if ((not lo or n >= lo) and (not hi or n <= hi)) then
            table.insert(arg, n)
        end
    end
end
local options = rpm.expand("%{!-v:-q} %{-p:-p%{-p*}} ")
local bynum = {}
for i, p in ipairs(patches) do
    bynum[patch_nums[i]] = p
end
for i, a in ipairs(arg) do
    local p = bynum[tonumber(a)]
    if p then
        print(rpm.expand("%__apply_patch -m %{basename:"..p.."}  "..options..p.." "..i.."\\n"))
    else
        macros.error({"no such patch "..a})
    end
end
}


# One macro to (optionally) do it all.
# -S<scm name>	Sets the used patch application style, eg '-S git' enables
#           	usage of git repository and per-patch commits.
# -N		Disable automatic patch application
# -p<num>	Use -p<num> for patch application	
%autosetup(a:b:cDn:TvNS:p:)\
%setup %{-a} %{-b} %{-c} %{-D} %{-n} %{-T} %{!-v:-q}\
%{-S:%global __scm %{-S*}}\
%{expand:%__scm_setup_%{__scm} %{!-v:-q}}\
%{!-N:%autopatch %{-v} %{-p:-p%{-p*}}}

# \endverbatim
#*/
                                                                                                                                                                                                                                                                                                                                                                                          usr/lib/rpm/macros.d/                                                                               0000755 0000000 0000000 00000000000 14554450620 013134  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/lib/rpm/mkinstalldirs                                                                           0000755 0000000 0000000 00000006722 14554450620 014243  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #! /bin/sh
# mkinstalldirs --- make directory hierarchy

scriptversion=2009-04-28.21; # UTC

# Original author: Noah Friedman <friedman@prep.ai.mit.edu>
# Created: 1993-05-16
# Public domain.
#
# This file is maintained in Automake, please report
# bugs to <bug-automake@gnu.org> or send patches to
# <automake-patches@gnu.org>.

nl='
'
IFS=" ""	$nl"
errstatus=0
dirmode=

usage="\
Usage: mkinstalldirs [-h] [--help] [--version] [-m MODE] DIR ...

Create each directory DIR (with mode MODE, if specified), including all
leading file name components.

Report bugs to <bug-automake@gnu.org>."

# process command line arguments
while test $# -gt 0 ; do
  case $1 in
    -h | --help | --h*)         # -h for help
      echo "$usage"
      exit $?
      ;;
    -m)                         # -m PERM arg
      shift
      test $# -eq 0 && { echo "$usage" 1>&2; exit 1; }
      dirmode=$1
      shift
      ;;
    --version)
      echo "$0 $scriptversion"
      exit $?
      ;;
    --)                         # stop option processing
      shift
      break
      ;;
    -*)                         # unknown option
      echo "$usage" 1>&2
      exit 1
      ;;
    *)                          # first non-opt arg
      break
      ;;
  esac
done

for file
do
  if test -d "$file"; then
    shift
  else
    break
  fi
done

case $# in
  0) exit 0 ;;
esac

# Solaris 8's mkdir -p isn't thread-safe.  If you mkdir -p a/b and
# mkdir -p a/c at the same time, both will detect that a is missing,
# one will create a, then the other will try to create a and die with
# a "File exists" error.  This is a problem when calling mkinstalldirs
# from a parallel make.  We use --version in the probe to restrict
# ourselves to GNU mkdir, which is thread-safe.
case $dirmode in
  '')
    if mkdir -p --version . >/dev/null 2>&1 && test ! -d ./--version; then
      echo "mkdir -p -- $*"
      exec mkdir -p -- "$@"
    else
      # On NextStep and OpenStep, the 'mkdir' command does not
      # recognize any option.  It will interpret all options as
      # directories to create, and then abort because '.' already
      # exists.
      test -d ./-p && rmdir ./-p
      test -d ./--version && rmdir ./--version
    fi
    ;;
  *)
    if mkdir -m "$dirmode" -p --version . >/dev/null 2>&1 &&
       test ! -d ./--version; then
      echo "mkdir -m $dirmode -p -- $*"
      exec mkdir -m "$dirmode" -p -- "$@"
    else
      # Clean up after NextStep and OpenStep mkdir.
      for d in ./-m ./-p ./--version "./$dirmode";
      do
        test -d $d && rmdir $d
      done
    fi
    ;;
esac

for file
do
  case $file in
    /*) pathcomp=/ ;;
    *)  pathcomp= ;;
  esac
  oIFS=$IFS
  IFS=/
  set fnord $file
  shift
  IFS=$oIFS

  for d
  do
    test "x$d" = x && continue

    pathcomp=$pathcomp$d
    case $pathcomp in
      -*) pathcomp=./$pathcomp ;;
    esac

    if test ! -d "$pathcomp"; then
      echo "mkdir $pathcomp"

      mkdir "$pathcomp" || lasterr=$?

      if test ! -d "$pathcomp"; then
	errstatus=$lasterr
      else
	if test ! -z "$dirmode"; then
	  echo "chmod $dirmode $pathcomp"
	  lasterr=
	  chmod "$dirmode" "$pathcomp" || lasterr=$?

	  if test ! -z "$lasterr"; then
	    errstatus=$lasterr
	  fi
	fi
      fi
    fi

    pathcomp=$pathcomp/
  done
done

exit $errstatus

# Local Variables:
# mode: shell-script
# sh-indentation: 2
# eval: (add-hook 'write-file-hooks 'time-stamp)
# time-stamp-start: "scriptversion="
# time-stamp-format: "%:y-%02m-%02d.%02H"
# time-stamp-time-zone: "UTC"
# time-stamp-end: "; # UTC"
# End:
                                              usr/lib/rpm/ocamldeps.sh                                                                            0000755 0000000 0000000 00000015463 14554450620 013745  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/bin/bash
# This is a helper for rpm which collects 'Provides' and 'Requires' information from OCaml files.
# It reads a list of filenames from STDIN.
# It expects as argument either '--provides|-P' or '--requires|-R'.
# Additional optional arguments are:
# -f "ocamlobjinfo command"
# -c # ignored, recognized just for compat reasons
# -i NAME # omit the Requires/Provides for this bytecode unit name
# -x NAME # omit the Requires/Provides for this native unit name
#
# OCaml object files contain either bytecode or native code.
# Each bytecode variant provides a certain interface, which is represented by a hash.
# Each native variant provides a certain interface and a certain implementation, which are represented by hashes.
# Each variant may also require a certain interface and/or implementation provided by other files.
# The details for each file can be inspected with 'ocamlobjinfo'.
#
# Each file contains at least one module.
# Information about each module follows after a line starting with "Name:" or "Unit name:":
#
# cma/cmi/cmo (bytecode):
#   Unit name: NAME
#   Interfaces imported:
#     HASH NAME
#     HASH NAME_FROM_OTHER_MODULE
#
# cmx/cmxa/cmxs (native):
#   Name: NAME
#   CRC of implementation: HASH
#   Interfaces imported:
#     HASH NAME
#     HASH NAME_FROM_OTHER_MODULE
#   Implementations imported:
#     HASH NAME_FROM_OTHER_MODULE
#
# cmxs files are recoqnized, but need to be ignored.
# They contain references of the interfaces and implementations
# compiled into them.
#
# The hash may contain just '-', in which case it is ignored.
#
# Output:
# ocaml(NAME) = HASH # for interfaces (bytecode and native)
# ocamlx(NAME) = HASH # for implementations (native)

set -e
#
OCAMLOBJINFO=ocamlobjinfo
rpm_prefix_interface='ocaml'
rpm_prefix_implementation='ocamlx'
#
parse() {
  local filename="$1"

  ${OCAMLOBJINFO} "${filename}" | awk '
  BEGIN {
    debug=0
    mode=ENVIRON["mode"]
    RPM_BUILD_ROOT=ENVIRON["RPM_BUILD_ROOT"]
    rpm_prefix_interface=ENVIRON["rpm_prefix_interface"]
