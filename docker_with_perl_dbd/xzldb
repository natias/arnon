L<[GH #15623]|https://github.com/Perl/perl5/issues/15623>

=item *

The regex engine was previously producing incorrect results in some rare
situations when backtracking past an alternation that matches only one
thing; this
showed up as capture buffers (C<$1>, C<$2>, I<etc.>) erroneously containing data
from regex execution paths that weren't actually executed for the final
match.
L<[GH #15666]|https://github.com/Perl/perl5/issues/15666>

=item *

Certain regexes making use of the experimental C<regex_sets> feature could
trigger an assertion failure.  This has been fixed.
L<[GH #15620]|https://github.com/Perl/perl5/issues/15620>

=item *

Invalid assignments to a reference constructor (I<e.g.>, C<\eval=time>) could
sometimes crash in addition to giving a syntax error.
L<[GH #14815]|https://github.com/Perl/perl5/issues/14815>

=item *

The parser could sometimes crash if a bareword came after C<evalbytes>.
L<[GH #15586]|https://github.com/Perl/perl5/issues/15586>

=item *

Autoloading via a method call would warn erroneously ("Use of inherited
AUTOLOAD for non-method") if there was a stub present in the package into
which the invocant had been blessed.  The warning is no longer emitted in
such circumstances.
L<[GH #9094]|https://github.com/Perl/perl5/issues/9094>

=item *

The use of C<splice> on arrays with non-existent elements could cause other
operators to crash.
L<[GH #15577]|https://github.com/Perl/perl5/issues/15577>

=item *

A possible buffer overrun when a pattern contains a fixed utf8 substring.
L<[GH #15534]|https://github.com/Perl/perl5/issues/15534>

=item *

Fixed two possible use-after-free bugs in perl's lexer.
L<[GH #15549]|https://github.com/Perl/perl5/issues/15549>

=item *

Fixed a crash with C<s///l> where it thought it was dealing with UTF-8
when it wasn't.
L<[GH #15543]|https://github.com/Perl/perl5/issues/15543>

=item *

Fixed a place where the regex parser was not setting the syntax error
correctly on a syntactically incorrect pattern.
L<[GH #15565]|https://github.com/Perl/perl5/issues/15565>

=item *

The C<&.> operator (and the C<"&"> operator, when it treats its arguments as
strings) were failing to append a trailing null byte if at least one string
was marked as utf8 internally.  Many code paths (system calls, regexp
compilation) still expect there to be a null byte in the string buffer
just past the end of the logical string.  An assertion failure was the
result.
L<[GH #15606]|https://github.com/Perl/perl5/issues/15606>

=item *

Avoid a heap-after-use error in the parser when creating an error messge
for a syntactically invalid heredoc.
L<[GH #15527]|https://github.com/Perl/perl5/issues/15527>

=item *

Fix a segfault when run with C<-DC> options on DEBUGGING builds.
L<[GH #15563]|https://github.com/Perl/perl5/issues/15563>

=item *

Fixed the parser error handling in subroutine attributes for an
'C<:attr(foo>' that does not have an ending 'C<")">'.

=item *

Fix the perl lexer to correctly handle a backslash as the last char in
quoted-string context. This actually fixed two bugs,
L<[GH #15546]|https://github.com/Perl/perl5/issues/15546> and
L<[GH #15582]|https://github.com/Perl/perl5/issues/15582>.

=item *

In the API function C<gv_fetchmethod_pvn_flags>, rework separator parsing
to prevent possible string overrun with an invalid C<len> argument.
L<[GH #15598]|https://github.com/Perl/perl5/issues/15598>

=item *

Problems with in-place array sorts: code like C<@a = sort { ... } @a>,
where the source and destination of the sort are the same plain array, are
optimised to do less copying around.  Two side-effects of this optimisation
were that the contents of C<@a> as seen by sort routines were
partially sorted; and under some circumstances accessing C<@a> during the
sort could crash the interpreter.  Both these issues have been fixed, and
Sort functions see the original value of C<@a>.
L<[GH #15387]|https://github.com/Perl/perl5/issues/15387>

=item *

Non-ASCII string delimiters are now reported correctly in error messages
for unterminated strings.
L<[GH #15469]|https://github.com/Perl/perl5/issues/15469>

=item *

C<pack("p", ...)> used to emit its warning ("Attempt to pack pointer to
temporary value") erroneously in some cases, but has been fixed.

=item *

C<@DB::args> is now exempt from "used once" warnings.  The warnings only
occurred under B<-w>, because F<warnings.pm> itself uses C<@DB::args>
multiple times.

=item *

The use of built-in arrays or hash slices in a double-quoted string no
longer issues a warning ("Possible unintended interpolation...") if the
variable has not been mentioned before.  This affected code like
C<qq|@DB::args|> and C<qq|@SIG{'CHLD', 'HUP'}|>.  (The special variables
C<@-> and C<@+> were already exempt from the warning.)

=item *

C<gethostent> and similar functions now perform a null check internally, to
avoid crashing with the torsocks library.  This was a regression from v5.22.
L<[GH #15478]|https://github.com/Perl/perl5/issues/15478>

=item *

C<defined *{'!'}>, C<defined *{'['}>, and C<defined *{'-'}> no longer leak
memory if the typeglob in question has never been accessed before.

=item *

Mentioning the same constant twice in a row (which is a syntax error) no
longer fails an assertion under debugging builds.  This was a regression
from v5.20.
L<[GH #15017]|https://github.com/Perl/perl5/issues/15017>

=item *

Many issues relating to C<printf "%a"> of hexadecimal floating point
were fixed.  In addition, the "subnormals" (formerly known as "denormals")
floating point numbers are now supported both with the plain IEEE 754
floating point numbers (64-bit or 128-bit) and the x86 80-bit
"extended precision".  Note that subnormal hexadecimal floating
point literals will give a warning about "exponent underflow".
L<[GH #15495]|https://github.com/Perl/perl5/issues/15495>
L<[GH #15503]|https://github.com/Perl/perl5/issues/15503>
L<[GH #15504]|https://github.com/Perl/perl5/issues/15504>
L<[GH #15505]|https://github.com/Perl/perl5/issues/15505>
L<[GH #15510]|https://github.com/Perl/perl5/issues/15510>
L<[GH #15512]|https://github.com/Perl/perl5/issues/15512>

=item *

A regression in v5.24 with C<tr/\N{U+...}/foo/> when the code point was between
128 and 255 has been fixed.
L<[GH #15475]|https://github.com/Perl/perl5/issues/15475>.

=item *

Use of a string delimiter whose code point is above 2**31 now works
correctly on platforms that allow this.  Previously, certain characters,
due to truncation, would be confused with other delimiter characters
with special meaning (such as C<"?"> in C<m?...?>), resulting
in inconsistent behaviour.  Note that this is non-portable,
and is based on Perl's extension to UTF-8, and is probably not
displayable nor enterable by any editor.
L<[GH #15477]|https://github.com/Perl/perl5/issues/15477>

=item *

C<@{x> followed by a newline where C<"x"> represents a control or non-ASCII
character no longer produces a garbled syntax error message or a crash.
L<[GH #15518]|https://github.com/Perl/perl5/issues/15518>

=item *

An assertion failure with C<%: = 0> has been fixed.
L<[GH #15358]|https://github.com/Perl/perl5/issues/15358>

=item *

In Perl 5.18, the parsing of C<"$foo::$bar"> was accidentally changed, such
that it would be treated as C<$foo."::".$bar>.  The previous behavior, which
was to parse it as C<$foo:: . $bar>, has been restored.
L<[GH #15408]|https://github.com/Perl/perl5/issues/15408>

=item *

Since Perl 5.20, line numbers have been off by one when perl is invoked with
the B<-x> switch.  This has been fixed.
L<[GH #15413]|https://github.com/Perl/perl5/issues/15413>

=item *

Vivifying a subroutine stub in a deleted stash (I<e.g.>,
C<delete $My::{"Foo::"}; \&My::Foo::foo>) no longer crashes.  It had begun
crashing in Perl 5.18.
L<[GH #15420]|https://github.com/Perl/perl5/issues/15420>

=item *

Some obscure cases of subroutines and file handles being freed at the same time
could result in crashes, but have been fixed.  The crash was introduced in Perl
5.22.
L<[GH #15435]|https://github.com/Perl/perl5/issues/15435>

=item *

Code that looks for a variable name associated with an uninitialized value
could cause an assertion failure in cases where magic is involved, such as
C<$ISA[0][0]>.  This has now been fixed.
L<[GH #15364]|https://github.com/Perl/perl5/issues/15364>

=item *

A crash caused by code generating the warning "Subroutine STASH::NAME
redefined" in cases such as C<sub P::f{} undef *P::; *P::f =sub{};> has been
fixed.  In these cases, where the STASH is missing, the warning will now appear
as "Subroutine NAME redefined".
L<[GH #15368]|https://github.com/Perl/perl5/issues/15368>

=item *

Fixed an assertion triggered by some code that handles deprecated behavior in
formats, I<e.g.>, in cases like this:

    format STDOUT =
    @
    0"$x"

L<[GH #15366]|https://github.com/Perl/perl5/issues/15366>

=item *

A possible divide by zero in string transformation code on Windows has been
avoided, fixing a crash when collating an empty string.
L<[GH #15439]|https://github.com/Perl/perl5/issues/15439>

=item *

Some regular expression parsing glitches could lead to assertion failures with
regular expressions such as C</(?E<lt>=/> and C</(?E<lt>!/>.  This has now been fixed.
L<[GH #15332]|https://github.com/Perl/perl5/issues/15332>

=item *

C< until ($x = 1) { ... } > and C< ... until $x = 1 > now properly
warn when syntax warnings are enabled.
L<[GH #15138]|https://github.com/Perl/perl5/issues/15138>

=item *

socket() now leaves the error code returned by the system in C<$!> on
failure.
L<[GH #15383]|https://github.com/Perl/perl5/issues/15383>

=item *

Assignment variants of any bitwise ops under the C<bitwise> feature would
crash if the left-hand side was an array or hash.
L<[GH #15346]|https://github.com/Perl/perl5/issues/15346>

=item *

C<require> followed by a single colon (as in C<foo() ? require : ...> is
now parsed correctly as C<require> with implicit C<$_>, rather than
C<require "">.
L<[GH #15380]|https://github.com/Perl/perl5/issues/15380>

=item *

Scalar C<keys %hash> can now be assigned to consistently in all scalar
lvalue contexts.  Previously it worked for some contexts but not others.

=item *

List assignment to C<vec> or C<substr> with an array or hash for its first
argument used to result in crashes or "Can't coerce" error messages at run
time, unlike scalar assignment, which would give an error at compile time.
List assignment now gives a compile-time error, too.
L<[GH #15370]|https://github.com/Perl/perl5/issues/15370>

=item *

Expressions containing an C<&&> or C<||> operator (or their synonyms C<and>
and C<or>) were being compiled incorrectly in some cases.  If the left-hand
side consisted of either a negated bareword constant or a negated C<do {}>
block containing a constant expression, and the right-hand side consisted of
a negated non-foldable expression, one of the negations was effectively
ignored.  The same was true of C<if> and C<unless> statement modifiers,
though with the left-hand and right-hand sides swapped.  This long-standing
bug has now been fixed.
L<[GH #15285]|https://github.com/Perl/perl5/issues/15285>

=item *

C<reset> with an argument no longer crashes when encountering stash entries
other than globs.
L<[GH #15314]|https://github.com/Perl/perl5/issues/15314>

=item *

Assignment of hashes to, and deletion of, typeglobs named C<*::::::> no
longer causes crashes.
L<[GH #15307]|https://github.com/Perl/perl5/issues/15307>

=item *

Perl wasn't correctly handling true/false values in the LHS of a list
assign; specifically the truth values returned by boolean operators.
This could trigger an assertion failure in something like the following:

    for ($x > $y) {
        ($_, ...) = (...); # here $_ is aliased to a truth value
    }

This was a regression from v5.24.
L<[GH #15690]|https://github.com/Perl/perl5/issues/15690>

=item *

Assertion failure with user-defined Unicode-like properties.
L<[GH #15696]|https://github.com/Perl/perl5/issues/15696>

=item *

Fix error message for unclosed C<\N{> in a regex.  An unclosed C<\N{>
could give the wrong error message:
C<"\N{NAME} must be resolved by the lexer">.

=item *

List assignment in list context where the LHS contained aggregates and
where there were not enough RHS elements, used to skip scalar lvalues.
Previously, C<(($a,$b,@c,$d) = (1))> in list context returned C<($a)>; now
it returns C<($a,$b,$d)>.  C<(($a,$b,$c) = (1))> is unchanged: it still
returns C<($a,$b,$c)>.  This can be seen in the following:

    sub inc { $_++ for @_ }
    inc(($a,$b,@c,$d) = (10))

Formerly, the values of C<($a,$b,$d)> would be left as C<(11,undef,undef)>;
now they are C<(11,1,1)>.

=item *

Code like this: C</(?{ s!!! })/> could trigger infinite recursion on the C
stack (not the normal perl stack) when the last successful pattern in
scope is itself.  We avoid the segfault by simply forbidding the use of
the empty pattern when it would resolve to the currently executing
pattern.
L<[GH #15669]|https://github.com/Perl/perl5/issues/15669>

=item *

Avoid reading beyond the end of the line buffer in perl's lexer when
there's a short UTF-8 character at the end.
L<[GH #15531]|https://github.com/Perl/perl5/issues/15531>

=item *

Alternations in regular expressions were sometimes failing to match
a utf8 string against a utf8 alternate.
L<[GH #15680]|https://github.com/Perl/perl5/issues/15680>

=item *

Make C<do "a\0b"> fail silently (and return C<undef> and set C<$!>)
instead of throwing an error.
L<[GH #15676]|https://github.com/Perl/perl5/issues/15676>

=item *

C<chdir> with no argument didn't ensure that there was stack space
available for returning its result.
L<[GH #15569]|https://github.com/Perl/perl5/issues/15569>

=item *

All error messages related to C<do> now refer to C<do>; some formerly
claimed to be from C<require> instead.

=item *

Executing C<undef $x> where C<$x> is tied or magical no longer incorrectly
blames the variable for an uninitialized-value warning encountered by the
tied/magical code.

=item *

Code like C<$x = $x . "a"> was incorrectly failing to yield a
L<use of uninitialized value|perldiag/"Use of uninitialized value%s">
warning when C<$x> was a lexical variable with an undefined value. That has
now been fixed.
L<[GH #15269]|https://github.com/Perl/perl5/issues/15269>

=item *

C<undef *_; shift> or C<undef *_; pop> inside a subroutine, with no
argument to C<shift> or C<pop>, began crashing in Perl 5.14, but has now
been fixed.

=item *

C<< "string$scalar-E<gt>$*" >> now correctly prefers concatenation
overloading to string overloading if C<< $scalar-E<gt>$* >> returns an
overloaded object, bringing it into consistency with C<$$scalar>.

=item *

C<< /@0{0*-E<gt>@*/*0 >> and similar contortions used to crash, but no longer
do, but merely produce a syntax error.
L<[GH #15333]|https://github.com/Perl/perl5/issues/15333>

=item *

C<do> or C<require> with an argument which is a reference or typeglob
which, when stringified,
contains a null character, started crashing in Perl 5.20, but has now been
fixed.
L<[GH #15337]|https://github.com/Perl/perl5/issues/15337>

=item *

Improve the error message for a missing C<tie()> package/method. This
brings the error messages in line with the ones used for normal method
calls.

=item *

Parsing bad POSIX charclasses no longer leaks memory.
L<[GH #15382]|https://github.com/Perl/perl5/issues/15382>

=back

=head1 Known Problems

=over 4

=item *

G++ 6 handles subnormal (denormal) floating point values differently
than gcc 6 or g++ 5 resulting in "flush-to-zero". The end result is
that if you specify very small values using the hexadecimal floating
point format, like C<0x1.fffffffffffffp-1022>, they become zeros.
L<[GH #15990]|https://github.com/Perl/perl5/issues/15990>

=back 

=head1 Errata From Previous Releases

=over 4

=item *

Fixed issues with recursive regexes.  The behavior was fixed in Perl 5.24.
L<[GH #14935]|https://github.com/Perl/perl5/issues/14935>

=back

=head1 Obituary

Jon Portnoy (AVENJ), a prolific Perl author and admired Gentoo community
member, has passed away on August 10, 2016.  He will be remembered and
missed by all those who he came in contact with, and enriched with his
intellect, wit, and spirit.

It is with great sadness that we also note Kip Hampton's passing.  Probably
best known as the author of the Perl & XML column on XML.com, he was a
core contributor to AxKit, an XML server platform that became an Apache
Foundation project.  He was a frequent speaker in the early days at
OSCON, and most recently at YAPC::NA in Madison.  He was frequently on
irc.perl.org as ubu, generally in the #axkit-dahut community, the
group responsible for YAPC::NA Asheville in 2011.

Kip and his constant contributions to the community will be greatly
missed.

=head1 Acknowledgements

Perl 5.26.0 represents approximately 13 months of development since Perl 5.24.0
and contains approximately 360,000 lines of changes across 2,600 files from 86
authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 230,000 lines of changes to 1,800 .pm, .t, .c and .h files.

Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers.  The following people are known to have contributed the
improvements that became Perl 5.26.0:

Aaron Crane, Abigail, Ævar Arnfjörð Bjarmason, Alex Vandiver, Andreas
König, Andreas Voegele, Andrew Fresh, Andy Lester, Aristotle Pagaltzis, Chad
Granum, Chase Whitener, Chris 'BinGOs' Williams, Chris Lamb, Christian Hansen,
Christian Millour, Colin Newell, Craig A. Berry, Dagfinn Ilmari Mannsåker, Dan
Collins, Daniel Dragan, Dave Cross, Dave Rolsky, David Golden, David H.
Gutteridge, David Mitchell, Dominic Hargreaves, Doug Bell, E. Choroba, Ed Avis,
Father Chrysostomos, François Perrad, Hauke D, H.Merijn Brand, Hugo van der
Sanden, Ivan Pozdeev, James E Keenan, James Raspass, Jarkko Hietaniemi, Jerry
D. Hedden, Jim Cromie, J. Nick Koston, John Lightsey, Karen Etheridge, Karl
Williamson, Leon Timmermans, Lukas Mai, Matthew Horsfall, Maxwell Carey, Misty
De Meo, Neil Bowers, Nicholas Clark, Nicolas R., Niko Tyni, Pali, Paul
Marquess, Peter Avalos, Petr Písař, Pino Toscano, Rafael Garcia-Suarez, Reini
Urban, Renee Baecker, Ricardo Signes, Richard Levitte, Rick Delaney, Salvador
Fandiño, Samuel Thibault, Sawyer X, Sébastien Aperghis-Tramoni, Sergey
Aleynikov, Shlomi Fish, Smylers, Stefan Seifert, Steffen Müller, Stevan
Little, Steve Hay, Steven Humphrey, Sullivan Beck, Theo Buehler, Thomas Sibley,
Todd Rinaldo, Tomasz Konojacki, Tony Cook, Unicode Consortium, Yaroslav Kuzmin,
Yves Orton, Zefram.

The list above is almost certainly incomplete as it is automatically generated
from version control history.  In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core.  We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database at
L<https://rt.perl.org/>.  There may also be information at
L<http://www.perl.org/>, the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to C<perlbug@perl.org> to be analysed by the Perl porting team.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
                                                                                                                                                                      usr/local/lib/perl5/5.40.0/pod/perl5261delta.pod                                                    0000644 0000000 0000000 00000017045 14714567415 017275  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =encoding utf8

=head1 NAME

perl5261delta - what is new for perl v5.26.1

=head1 DESCRIPTION

This document describes differences between the 5.26.0 release and the 5.26.1
release.

If you are upgrading from an earlier release such as 5.24.0, first read
L<perl5260delta>, which describes differences between 5.24.0 and 5.26.0.

=head1 Security

=head2 [CVE-2017-12837] Heap buffer overflow in regular expression compiler

Compiling certain regular expression patterns with the case-insensitive
modifier could cause a heap buffer overflow and crash perl.  This has now been
fixed.
L<[GH #16021]|https://github.com/Perl/perl5/issues/16021>

=head2 [CVE-2017-12883] Buffer over-read in regular expression parser

For certain types of syntax error in a regular expression pattern, the error
message could either contain the contents of a random, possibly large, chunk of
memory, or could crash perl.  This has now been fixed.
L<[GH #16025]|https://github.com/Perl/perl5/issues/16025>

=head2 [CVE-2017-12814] C<$ENV{$key}> stack buffer overflow on Windows

A possible stack buffer overflow in the C<%ENV> code on Windows has been fixed
by removing the buffer completely since it was superfluous anyway.
L<[GH #16051]|https://github.com/Perl/perl5/issues/16051>

=head1 Incompatible Changes

There are no changes intentionally incompatible with 5.26.0.  If any exist,
they are bugs, and we request that you submit a report.  See L</Reporting
Bugs> below.

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

=over 4

=item *

L<base> has been upgraded from version 2.25 to 2.26.

The effects of dotless C<@INC> on this module have been limited by the
introduction of a more refined and accurate solution for removing C<'.'> from
C<@INC> while reducing the false positives.

=item *

L<charnames> has been upgraded from version 1.44 to 1.45.

=item *

L<Module::CoreList> has been upgraded from version 5.20170530 to 5.20170922_26.

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item FreeBSD

=over 4

=item *

Building with B<g++> on FreeBSD-11.0 has been fixed.
L<[GH #15984]|https://github.com/Perl/perl5/issues/15984>

=back

=item Windows

=over 4

=item *

Support for compiling perl on Windows using Microsoft Visual Studio 2017
(containing Visual C++ 14.1) has been added.

=item *

Building XS modules with GCC 6 in a 64-bit build of Perl failed due to
incorrect mapping of C<strtoll> and C<strtoull>.  This has now been fixed.
L<[GH #16074]|https://github.com/Perl/perl5/issues/16074>
L<[cpan #121683]|https://rt.cpan.org/Public/Bug/Display.html?id=121683>
L<[cpan #122353]|https://rt.cpan.org/Public/Bug/Display.html?id=122353>

=back

=back

=head1 Selected Bug Fixes

=over 4

=item *

Several built-in functions previously had bugs that could cause them to write
to the internal stack without allocating room for the item being written.  In
rare situations, this could have led to a crash.  These bugs have now been
fixed, and if any similar bugs are introduced in future, they will be detected
automatically in debugging builds.
L<[GH #16076]|https://github.com/Perl/perl5/issues/16076>

=item *

Using a symbolic ref with postderef syntax as the key in a hash lookup was
yielding an assertion failure on debugging builds.
L<[GH #16029]|https://github.com/Perl/perl5/issues/16029>

=item *

List assignment (C<aassign>) could in some rare cases allocate an entry on the
mortal stack and leave the entry uninitialized.
L<[GH #16017]|https://github.com/Perl/perl5/issues/16017>

=item *

Attempting to apply an attribute to an C<our> variable where a function of that
name already exists could result in a NULL pointer being supplied where an SV
was expected, crashing perl.
L<[perl #131597]|https://rt.perl.org/Public/Bug/Display.html?id=131597>

=item *

The code that vivifies a typeglob out of a code ref made some false assumptions
that could lead to a crash in cases such as C<< $::{"A"} = sub {}; \&{"A"} >>.
This has now been fixed.
L<[GH #15937]|https://github.com/Perl/perl5/issues/15937>

=item *

C<my_atof2> no longer reads beyond the terminating NUL, which previously
occurred if the decimal point is immediately before the NUL.
L<[GH #16002]|https://github.com/Perl/perl5/issues/16002>

=item *

Occasional "Malformed UTF-8 character" crashes in C<s//> on utf8 strings have
been fixed.
L<[GH #16019]|https://github.com/Perl/perl5/issues/16019>

=item *

C<perldoc -f s> now finds C<s///>.
L<[GH #15989]|https://github.com/Perl/perl5/issues/15989>

=item *

Some erroneous warnings after utf8 conversion have been fixed.
L<[GH #15958]|https://github.com/Perl/perl5/issues/15958>

=item *

The C<jmpenv> frame to catch Perl exceptions is set up lazily, and this used to
be a bit too lazy.  The catcher is now set up earlier, preventing some possible
crashes.
L<[GH #11804]|https://github.com/Perl/perl5/issues/11804>

=item *

Spurious "Assuming NOT a POSIX class" warnings have been removed.
L<[GH #16001]|https://github.com/Perl/perl5/issues/16001>

=back

=head1 Acknowledgements

Perl 5.26.1 represents approximately 4 months of development since Perl 5.26.0
and contains approximately 8,900 lines of changes across 85 files from 23
authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 990 lines of changes to 38 .pm, .t, .c and .h files.

Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers.  The following people are known to have contributed
the improvements that became Perl 5.26.1:

Aaron Crane, Andy Dougherty, Aristotle Pagaltzis, Chris 'BinGOs' Williams,
Craig A. Berry, Dagfinn Ilmari Mannsåker, David Mitchell, E. Choroba, Eric
Herman, Father Chrysostomos, Jacques Germishuys, James E Keenan, John SJ
Anderson, Karl Williamson, Ken Brown, Lukas Mai, Matthew Horsfall, Ricardo
Signes, Sawyer X, Steve Hay, Tony Cook, Yves Orton, Zefram.

The list above is almost certainly incomplete as it is automatically generated
from version control history.  In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core.  We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION> for details of how to
report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5, you
can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           usr/local/lib/perl5/5.40.0/pod/perl5262delta.pod                                                    0000644 0000000 0000000 00000017026 14714567415 017275  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =encoding utf8

=head1 NAME

perl5262delta - what is new for perl v5.26.2

=head1 DESCRIPTION

This document describes differences between the 5.26.1 release and the 5.26.2
release.

If you are upgrading from an earlier release such as 5.26.0, first read
L<perl5261delta>, which describes differences between 5.26.0 and 5.26.1.

=head1 Security

=head2 [CVE-2018-6797] heap-buffer-overflow (WRITE of size 1) in S_regatom (regcomp.c)

A crafted regular expression could cause a heap buffer write overflow, with
control over the bytes written.
L<[GH #16185]|https://github.com/Perl/perl5/issues/16185>

=head2 [CVE-2018-6798] Heap-buffer-overflow in Perl__byte_dump_string (utf8.c)

Matching a crafted locale dependent regular expression could cause a heap
buffer read overflow and potentially information disclosure.
L<[GH #16143]|https://github.com/Perl/perl5/issues/16143>

=head2 [CVE-2018-6913] heap-buffer-overflow in S_pack_rec

C<pack()> could cause a heap buffer write overflow with a large item count.
L<[GH #16098]|https://github.com/Perl/perl5/issues/16098>

=head2 Assertion failure in Perl__core_swash_init (utf8.c)

Control characters in a supposed Unicode property name could cause perl to
crash.  This has been fixed.
L<[perl #132055]|https://rt.perl.org/Public/Bug/Display.html?id=132055>
L<[perl #132553]|https://rt.perl.org/Public/Bug/Display.html?id=132553>
L<[perl #132658]|https://rt.perl.org/Public/Bug/Display.html?id=132658>

=head1 Incompatible Changes

There are no changes intentionally incompatible with 5.26.1.  If any exist,
they are bugs, and we request that you submit a report.  See L</Reporting
Bugs> below.

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

=over 4

=item *

L<Module::CoreList> has been upgraded from version 5.20170922_26 to 5.20180414_26.

=item *

L<PerlIO::via> has been upgraded from version 0.16 to 0.17.

=item *

L<Term::ReadLine> has been upgraded from version 1.16 to 1.17.

=item *

L<Unicode::UCD> has been upgraded from version 0.68 to 0.69.

=back

=head1 Documentation

=head2 Changes to Existing Documentation

=head3 L<perluniprops>

=over 4

=item *

This has been updated to note that C<\p{Word}> now includes code points
matching the C<\p{Join_Control}> property.  The change to the property was made
in Perl 5.18, but not documented until now.  There are currently only two code
points that match this property: U+200C (ZERO WIDTH NON-JOINER) and U+200D
(ZERO WIDTH JOINER).

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item Windows

Visual C++ compiler version detection has been improved to work on non-English
language systems.
L<[GH #16235]|https://github.com/Perl/perl5/issues/16235>

We now set C<$Config{libpth}> correctly for 64-bit builds using Visual C++
versions earlier than 14.1.
L<[GH #16269]|https://github.com/Perl/perl5/issues/16269>

=back

=head1 Selected Bug Fixes

=over 4

=item *

The C<readpipe()> built-in function now checks at compile time that it has only
one parameter expression, and puts it in scalar context, thus ensuring that it
doesn't corrupt the stack at runtime.
L<[GH #2793]|https://github.com/Perl/perl5/issues/2793>

=item *

Fixed a use after free bug in C<pp_list> introduced in Perl 5.27.1.
L<[GH #16124]|https://github.com/Perl/perl5/issues/16124>

=item *

Parsing a C<sub> definition could cause a use after free if the C<sub> keyword
was followed by whitespace including newlines (and comments).
L<[GH #16097]|https://github.com/Perl/perl5/issues/16097>

=item *

The tokenizer now correctly adjusts a parse pointer when skipping whitespace in
an C< ${identifier} > construct.
L<[perl #131949]|https://rt.perl.org/Public/Bug/Display.html?id=131949>

=item *

Accesses to C<${^LAST_FH}> no longer assert after using any of a variety of I/O
operations on a non-glob.
L<[GH #15372]|https://github.com/Perl/perl5/issues/15372>

=item *

C<sort> now performs correct reference counting when aliasing C<$a> and C<$b>,
thus avoiding premature destruction and leakage of scalars if they are
re-aliased during execution of the sort comparator.
L<[GH #11422]|https://github.com/Perl/perl5/issues/11422>

=item *

Some convoluted kinds of regexp no longer cause an arithmetic overflow when
compiled.
L<[GH #16113]|https://github.com/Perl/perl5/issues/16113>

=item *

Fixed a duplicate symbol failure with B<-flto -mieee-fp> builds.  F<pp.c>
defined C<_LIB_VERSION> which B<-lieee> already defines.
L<[GH #16086]|https://github.com/Perl/perl5/issues/16086>

=item *

A NULL pointer dereference in the C<S_regmatch()> function has been fixed.
L<[perl #132017]|https://rt.perl.org/Public/Bug/Display.html?id=132017>

=item *

Failures while compiling code within other constructs, such as with string
interpolation and the right part of C<s///e> now cause compilation to abort
earlier.

Previously compilation could continue in order to report other errors, but the
