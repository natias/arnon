    b'format',
    b'use-dirstate-tracked-hint.automatic-upgrade-of-mismatching-repositories',
    default=False,
    experimental=True,
)
coreconfigitem(
    b'format',
    b'use-dirstate-tracked-hint.automatic-upgrade-of-mismatching-repositories:quiet',
    default=False,
    experimental=True,
)
coreconfigitem(
    b'format',
    b'dotencode',
    default=True,
)
coreconfigitem(
    b'format',
    b'generaldelta',
    default=False,
    experimental=True,
)
coreconfigitem(
    b'format',
    b'manifestcachesize',
    default=None,
    experimental=True,
)
coreconfigitem(
    b'format',
    b'maxchainlen',
    default=dynamicdefault,
    experimental=True,
)
coreconfigitem(
    b'format',
    b'obsstore-version',
    default=None,
)
coreconfigitem(
    b'format',
    b'sparse-revlog',
    default=True,
)
coreconfigitem(
    b'format',
    b'revlog-compression',
    default=lambda: [b'zstd', b'zlib'],
    alias=[(b'experimental', b'format.compression')],
)
# Experimental TODOs:
#
# * Same as for revlogv2 (but for the reduction of the number of files)
# * Actually computing the rank of changesets
# * Improvement to investigate
#   - storing .hgtags fnode
#   - storing branch related identifier

coreconfigitem(
    b'format',
    b'exp-use-changelog-v2',
    default=None,
    experimental=True,
)
coreconfigitem(
    b'format',
    b'usefncache',
    default=True,
)
coreconfigitem(
    b'format',
    b'usegeneraldelta',
    default=True,
)
coreconfigitem(
    b'format',
    b'usestore',
    default=True,
)


def _persistent_nodemap_default():
    """compute `use-persistent-nodemap` default value

    The feature is disabled unless a fast implementation is available.
    """
    from . import policy

    return policy.importrust('revlog') is not None


coreconfigitem(
    b'format',
    b'use-persistent-nodemap',
    default=_persistent_nodemap_default,
)
coreconfigitem(
    b'format',
    b'exp-use-copies-side-data-changeset',
    default=False,
    experimental=True,
)
coreconfigitem(
    b'format',
    b'use-share-safe',
    default=True,
)
coreconfigitem(
    b'format',
    b'use-share-safe.automatic-upgrade-of-mismatching-repositories',
    default=False,
    experimental=True,
)
coreconfigitem(
    b'format',
    b'use-share-safe.automatic-upgrade-of-mismatching-repositories:quiet',
    default=False,
    experimental=True,
)

# Moving this on by default means we are confident about the scaling of phases.
# This is not garanteed to be the case at the time this message is written.
coreconfigitem(
    b'format',
    b'use-internal-phase',
    default=False,
    experimental=True,
)
# The interaction between the archived phase and obsolescence markers needs to
# be sorted out before wider usage of this are to be considered.
#
# At the time this message is written, behavior when archiving obsolete
# changeset differ significantly from stripping. As part of stripping, we also
# remove the obsolescence marker associated to the stripped changesets,
# revealing the precedecessors changesets when applicable. When archiving, we
# don't touch the obsolescence markers, keeping everything hidden. This can
# result in quite confusing situation for people combining exchanging draft
# with the archived phases. As some markers needed by others may be skipped
# during exchange.
coreconfigitem(
    b'format',
    b'exp-archived-phase',
    default=False,
    experimental=True,
)
coreconfigitem(
    b'shelve',
    b'store',
    default=b'internal',
    experimental=True,
)
coreconfigitem(
    b'fsmonitor',
    b'warn_when_unused',
    default=True,
)
coreconfigitem(
    b'fsmonitor',
    b'warn_update_file_count',
    default=50000,
)
coreconfigitem(
    b'fsmonitor',
    b'warn_update_file_count_rust',
    default=400000,
)
coreconfigitem(
    b'help',
    br'hidden-command\..*',
    default=False,
    generic=True,
)
coreconfigitem(
    b'help',
    br'hidden-topic\..*',
    default=False,
    generic=True,
)
coreconfigitem(
    b'hooks',
    b'[^:]*',
    default=dynamicdefault,
    generic=True,
)
coreconfigitem(
    b'hooks',
    b'.*:run-with-plain',
    default=True,
    generic=True,
)
coreconfigitem(
    b'hgweb-paths',
    b'.*',
    default=list,
    generic=True,
)
coreconfigitem(
    b'hostfingerprints',
    b'.*',
    default=list,
    generic=True,
)
coreconfigitem(
    b'hostsecurity',
    b'ciphers',
    default=None,
)
coreconfigitem(
    b'hostsecurity',
    b'minimumprotocol',
    default=dynamicdefault,
)
coreconfigitem(
    b'hostsecurity',
    b'.*:minimumprotocol$',
    default=dynamicdefault,
    generic=True,
)
coreconfigitem(
    b'hostsecurity',
    b'.*:ciphers$',
    default=dynamicdefault,
    generic=True,
)
coreconfigitem(
    b'hostsecurity',
    b'.*:fingerprints$',
    default=list,
    generic=True,
)
coreconfigitem(
    b'hostsecurity',
    b'.*:verifycertsfile$',
    default=None,
    generic=True,
)

coreconfigitem(
    b'http_proxy',
    b'always',
    default=False,
)
coreconfigitem(
    b'http_proxy',
    b'host',
    default=None,
)
coreconfigitem(
    b'http_proxy',
    b'no',
    default=list,
)
coreconfigitem(
    b'http_proxy',
    b'passwd',
    default=None,
)
coreconfigitem(
    b'http_proxy',
    b'user',
    default=None,
)

coreconfigitem(
    b'http',
    b'timeout',
    default=None,
)

coreconfigitem(
    b'logtoprocess',
    b'commandexception',
    default=None,
)
coreconfigitem(
    b'logtoprocess',
    b'commandfinish',
    default=None,
)
coreconfigitem(
    b'logtoprocess',
    b'command',
    default=None,
)
coreconfigitem(
    b'logtoprocess',
    b'develwarn',
    default=None,
)
coreconfigitem(
    b'logtoprocess',
    b'uiblocked',
    default=None,
)
coreconfigitem(
    b'merge',
    b'checkunknown',
    default=b'abort',
)
coreconfigitem(
    b'merge',
    b'checkignored',
    default=b'abort',
)
coreconfigitem(
    b'experimental',
    b'merge.checkpathconflicts',
    default=False,
)
coreconfigitem(
    b'merge',
    b'followcopies',
    default=True,
)
coreconfigitem(
    b'merge',
    b'on-failure',
    default=b'continue',
)
coreconfigitem(
    b'merge',
    b'preferancestor',
    default=lambda: [b'*'],
    experimental=True,
)
coreconfigitem(
    b'merge',
    b'strict-capability-check',
    default=False,
)
coreconfigitem(
    b'merge',
    b'disable-partial-tools',
    default=False,
    experimental=True,
)
coreconfigitem(
    b'partial-merge-tools',
    b'.*',
    default=None,
    generic=True,
    experimental=True,
)
coreconfigitem(
    b'partial-merge-tools',
    br'.*\.patterns',
    default=dynamicdefault,
    generic=True,
    priority=-1,
    experimental=True,
)
coreconfigitem(
    b'partial-merge-tools',
    br'.*\.executable$',
    default=dynamicdefault,
    generic=True,
    priority=-1,
    experimental=True,
)
coreconfigitem(
    b'partial-merge-tools',
    br'.*\.order',
    default=0,
    generic=True,
    priority=-1,
    experimental=True,
)
coreconfigitem(
    b'partial-merge-tools',
    br'.*\.args',
    default=b"$local $base $other",
    generic=True,
    priority=-1,
    experimental=True,
)
coreconfigitem(
    b'partial-merge-tools',
    br'.*\.disable',
    default=False,
    generic=True,
    priority=-1,
    experimental=True,
)
coreconfigitem(
    b'merge-tools',
    b'.*',
    default=None,
    generic=True,
)
coreconfigitem(
    b'merge-tools',
    br'.*\.args$',
    default=b"$local $base $other",
    generic=True,
    priority=-1,
)
coreconfigitem(
    b'merge-tools',
    br'.*\.binary$',
    default=False,
    generic=True,
    priority=-1,
)
coreconfigitem(
    b'merge-tools',
    br'.*\.check$',
    default=list,
    generic=True,
    priority=-1,
)
coreconfigitem(
    b'merge-tools',
    br'.*\.checkchanged$',
    default=False,
    generic=True,
    priority=-1,
)
coreconfigitem(
    b'merge-tools',
    br'.*\.executable$',
    default=dynamicdefault,
    generic=True,
    priority=-1,
)
coreconfigitem(
    b'merge-tools',
    br'.*\.fixeol$',
    default=False,
    generic=True,
    priority=-1,
)
coreconfigitem(
    b'merge-tools',
    br'.*\.gui$',
    default=False,
    generic=True,
    priority=-1,
)
coreconfigitem(
    b'merge-tools',
    br'.*\.mergemarkers$',
    default=b'basic',
    generic=True,
    priority=-1,
)
coreconfigitem(
    b'merge-tools',
    br'.*\.mergemarkertemplate$',
    default=dynamicdefault,  # take from command-templates.mergemarker
    generic=True,
    priority=-1,
)
coreconfigitem(
    b'merge-tools',
    br'.*\.priority$',
    default=0,
    generic=True,
    priority=-1,
)
coreconfigitem(
    b'merge-tools',
    br'.*\.premerge$',
    default=dynamicdefault,
    generic=True,
    priority=-1,
)
coreconfigitem(
    b'merge-tools',
    br'.*\.symlink$',
    default=False,
    generic=True,
    priority=-1,
)
coreconfigitem(
    b'pager',
    b'attend-.*',
    default=dynamicdefault,
    generic=True,
)
coreconfigitem(
    b'pager',
    b'ignore',
    default=list,
)
coreconfigitem(
    b'pager',
    b'pager',
    default=dynamicdefault,
)
coreconfigitem(
    b'patch',
    b'eol',
    default=b'strict',
)
coreconfigitem(
    b'patch',
    b'fuzz',
    default=2,
)
coreconfigitem(
    b'paths',
    b'default',
    default=None,
)
coreconfigitem(
    b'paths',
    b'default-push',
    default=None,
)
coreconfigitem(
    b'paths',
    b'.*',
    default=None,
    generic=True,
)
coreconfigitem(
    b'paths',
    b'.*:bookmarks.mode',
    default='default',
    generic=True,
)
coreconfigitem(
    b'paths',
    b'.*:multi-urls',
    default=False,
    generic=True,
)
coreconfigitem(
    b'paths',
    b'.*:pushrev',
    default=None,
    generic=True,
)
coreconfigitem(
    b'paths',
    b'.*:pushurl',
    default=None,
    generic=True,
)
coreconfigitem(
    b'phases',
    b'checksubrepos',
    default=b'follow',
)
coreconfigitem(
    b'phases',
    b'new-commit',
    default=b'draft',
)
coreconfigitem(
    b'phases',
    b'publish',
    default=True,
)
coreconfigitem(
    b'profiling',
    b'enabled',
    default=False,
)
coreconfigitem(
    b'profiling',
    b'format',
    default=b'text',
)
coreconfigitem(
    b'profiling',
    b'freq',
    default=1000,
)
coreconfigitem(
    b'profiling',
    b'limit',
    default=30,
)
coreconfigitem(
    b'profiling',
    b'nested',
    default=0,
)
coreconfigitem(
    b'profiling',
    b'output',
    default=None,
)
coreconfigitem(
    b'profiling',
    b'showmax',
    default=0.999,
)
coreconfigitem(
    b'profiling',
    b'showmin',
    default=dynamicdefault,
)
coreconfigitem(
    b'profiling',
    b'showtime',
    default=True,
)
coreconfigitem(
    b'profiling',
    b'sort',
    default=b'inlinetime',
)
coreconfigitem(
    b'profiling',
    b'statformat',
    default=b'hotpath',
)
coreconfigitem(
    b'profiling',
    b'time-track',
    default=dynamicdefault,
)
coreconfigitem(
    b'profiling',
    b'type',
    default=b'stat',
)
coreconfigitem(
    b'progress',
    b'assume-tty',
    default=False,
)
coreconfigitem(
    b'progress',
    b'changedelay',
    default=1,
)
coreconfigitem(
    b'progress',
    b'clear-complete',
    default=True,
)
coreconfigitem(
    b'progress',
    b'debug',
    default=False,
)
coreconfigitem(
    b'progress',
    b'delay',
    default=3,
)
coreconfigitem(
    b'progress',
    b'disable',
    default=False,
)
coreconfigitem(
    b'progress',
    b'estimateinterval',
    default=60.0,
)
coreconfigitem(
    b'progress',
    b'format',
    default=lambda: [b'topic', b'bar', b'number', b'estimate'],
)
coreconfigitem(
    b'progress',
    b'refresh',
    default=0.1,
)
coreconfigitem(
    b'progress',
    b'width',
    default=dynamicdefault,
)
coreconfigitem(
    b'pull',
    b'confirm',
    default=False,
)
coreconfigitem(
    b'push',
    b'pushvars.server',
    default=False,
)
coreconfigitem(
    b'rewrite',
    b'backup-bundle',
    default=True,
    alias=[(b'ui', b'history-editing-backup')],
)
coreconfigitem(
    b'rewrite',
    b'update-timestamp',
    default=False,
)
coreconfigitem(
    b'rewrite',
    b'empty-successor',
    default=b'skip',
    experimental=True,
)
# experimental as long as format.use-dirstate-v2 is.
coreconfigitem(
    b'storage',
    b'dirstate-v2.slow-path',
    default=b"abort",
    experimental=True,
)
coreconfigitem(
    b'storage',
    b'new-repo-backend',
    default=b'revlogv1',
    experimental=True,
)
coreconfigitem(
    b'storage',
    b'revlog.optimize-delta-parent-choice',
    default=True,
    alias=[(b'format', b'aggressivemergedeltas')],
)
coreconfigitem(
    b'storage',
    b'revlog.issue6528.fix-incoming',
    default=True,
)
# experimental as long as rust is experimental (or a C version is implemented)
coreconfigitem(
    b'storage',
    b'revlog.persistent-nodemap.mmap',
    default=True,
)
# experimental as long as format.use-persistent-nodemap is.
coreconfigitem(
    b'storage',
    b'revlog.persistent-nodemap.slow-path',
    default=b"abort",
)

coreconfigitem(
    b'storage',
    b'revlog.reuse-external-delta',
    default=True,
)
coreconfigitem(
    b'storage',
    b'revlog.reuse-external-delta-parent',
    default=None,
)
coreconfigitem(
    b'storage',
    b'revlog.zlib.level',
    default=None,
)
coreconfigitem(
    b'storage',
    b'revlog.zstd.level',
    default=None,
)
coreconfigitem(
    b'server',
    b'bookmarks-pushkey-compat',
    default=True,
)
coreconfigitem(
    b'server',
    b'bundle1',
    default=True,
)
coreconfigitem(
    b'server',
    b'bundle1gd',
    default=None,
)
coreconfigitem(
    b'server',
    b'bundle1.pull',
    default=None,
)
coreconfigitem(
    b'server',
    b'bundle1gd.pull',
    default=None,
)
coreconfigitem(
    b'server',
    b'bundle1.push',
    default=None,
)
coreconfigitem(
    b'server',
    b'bundle1gd.push',
    default=None,
)
coreconfigitem(
    b'server',
    b'bundle2.stream',
    default=True,
    alias=[(b'experimental', b'bundle2.stream')],
)
coreconfigitem(
    b'server',
    b'compressionengines',
    default=list,
)
coreconfigitem(
    b'server',
    b'concurrent-push-mode',
    default=b'check-related',
)
coreconfigitem(
    b'server',
    b'disablefullbundle',
    default=False,
)
coreconfigitem(
    b'server',
    b'maxhttpheaderlen',
    default=1024,
)
coreconfigitem(
    b'server',
    b'pullbundle',
    default=False,
)
coreconfigitem(
    b'server',
    b'preferuncompressed',
    default=False,
)
coreconfigitem(
    b'server',
    b'streamunbundle',
    default=False,
)
coreconfigitem(
    b'server',
    b'uncompressed',
    default=True,
)
coreconfigitem(
    b'server',
    b'uncompressedallowsecret',
    default=False,
)
coreconfigitem(
    b'server',
    b'view',
    default=b'served',
)
coreconfigitem(
    b'server',
    b'validate',
    default=False,
)
coreconfigitem(
    b'server',
    b'zliblevel',
    default=-1,
)
coreconfigitem(
    b'server',
    b'zstdlevel',
    default=3,
)
coreconfigitem(
    b'share',
    b'pool',
    default=None,
)
coreconfigitem(
    b'share',
    b'poolnaming',
    default=b'identity',
)
coreconfigitem(
    b'share',
    b'safe-mismatch.source-not-safe',
    default=b'abort',
)
coreconfigitem(
    b'share',
    b'safe-mismatch.source-safe',
    default=b'abort',
)
coreconfigitem(
    b'share',
    b'safe-mismatch.source-not-safe.warn',
    default=True,
)
coreconfigitem(
    b'share',
    b'safe-mismatch.source-safe.warn',
    default=True,
)
coreconfigitem(
    b'share',
    b'safe-mismatch.source-not-safe:verbose-upgrade',
    default=True,
)
coreconfigitem(
    b'share',
    b'safe-mismatch.source-safe:verbose-upgrade',
    default=True,
)
coreconfigitem(
    b'shelve',
    b'maxbackups',
    default=10,
)
coreconfigitem(
    b'smtp',
    b'host',
    default=None,
)
coreconfigitem(
    b'smtp',
    b'local_hostname',
    default=None,
)
coreconfigitem(
    b'smtp',
    b'password',
    default=None,
)
coreconfigitem(
    b'smtp',
    b'port',
    default=dynamicdefault,
)
coreconfigitem(
    b'smtp',
    b'tls',
    default=b'none',
)
coreconfigitem(
    b'smtp',
    b'username',
    default=None,
)
coreconfigitem(
    b'sparse',
    b'missingwarning',
    default=True,
    experimental=True,
)
coreconfigitem(
    b'subrepos',
    b'allowed',
    default=dynamicdefault,  # to make backporting simpler
)
coreconfigitem(
    b'subrepos',
    b'hg:allowed',
    default=dynamicdefault,
)
coreconfigitem(
    b'subrepos',
    b'git:allowed',
    default=dynamicdefault,
)
coreconfigitem(
    b'subrepos',
    b'svn:allowed',
    default=dynamicdefault,
)
coreconfigitem(
    b'templates',
    b'.*',
    default=None,
    generic=True,
)
coreconfigitem(
    b'templateconfig',
    b'.*',
    default=dynamicdefault,
    generic=True,
)
coreconfigitem(
    b'trusted',
    b'groups',
    default=list,
)
coreconfigitem(
    b'trusted',
    b'users',
    default=list,
)
coreconfigitem(
    b'ui',
    b'_usedassubrepo',
    default=False,
)
coreconfigitem(
    b'ui',
    b'allowemptycommit',
    default=False,
)
coreconfigitem(
    b'ui',
    b'archivemeta',
    default=True,
)
coreconfigitem(
    b'ui',
    b'askusername',
