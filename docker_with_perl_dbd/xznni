namespace PyImath {

template <class T> boost::python::class_<IMATH_NAMESPACE::Vec3<T> > register_Vec3();
template <class T> boost::python::class_<FixedArray<IMATH_NAMESPACE::Vec3<T> > > register_Vec3Array();
typedef FixedArray<IMATH_NAMESPACE::Vec3<unsigned char> >  V3cArray;
typedef FixedArray<IMATH_NAMESPACE::V3s>   V3sArray;
typedef FixedArray<IMATH_NAMESPACE::V3i>   V3iArray;
typedef FixedArray<IMATH_NAMESPACE::V3i64> V3i64Array;
typedef FixedArray<IMATH_NAMESPACE::V3f>   V3fArray;
typedef FixedArray<IMATH_NAMESPACE::V3d>   V3dArray;

// TODO: template <class T> class Vec3Array : public FixedArray<IMATH_NAMESPACE::Vec3<T> >
}

// define vector*float array multiplication
template <class T>
static PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > operator * (const PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > &a0, T v1) {
    PY_IMATH_LEAVE_PYTHON;
    size_t len = a0.len(); PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > f(len); for (size_t i=0;i<len;++i) f[i]=a0[i]*v1; return f;
}
template <class T>
static PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > operator * (T v0, const PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > &a1) { return a1*v0; }
template <class T>
static PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > operator * (const PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > &a0, const PyImath::FixedArray<T> &a1) {
    PY_IMATH_LEAVE_PYTHON;
    size_t len = a0.match_dimension(a1); PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > f(len); for (size_t i=0;i<len;++i) f[i]=a0[i]*a1[i]; return f;
}
template <class T>
static PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > operator * (const PyImath::FixedArray<T> &a0, const PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > &a1) {
    return a1*a0;
}
template <class T>
static PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > operator * (const PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > &va, const IMATH_NAMESPACE::M44f &m) {
    PY_IMATH_LEAVE_PYTHON;
    size_t len = va.len(); PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > f(len); for (size_t i = 0; i < len; ++i) f[i] = va[i] * m; return f;
}

template <class T>
static PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > operator * (const PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > &va, const IMATH_NAMESPACE::M44d &m) {
    PY_IMATH_LEAVE_PYTHON;
    size_t len = va.len(); PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > f(len); for (size_t i = 0; i < len; ++i) f[i] = va[i] * m; return f;
}

// define vector/float array division
template <class T>
static PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > operator / (const PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > &a0, T v1) {
    PY_IMATH_LEAVE_PYTHON;
    size_t len = a0.len(); PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > f(len); for (size_t i=0;i<len;++i) f[i]=a0[i]/v1; return f;
}
template <class T>
static PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > operator / (const PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > &a0, const PyImath::FixedArray<T> &a1) {
    PY_IMATH_LEAVE_PYTHON;
    size_t len = a0.match_dimension(a1); PyImath::FixedArray<IMATH_NAMESPACE::Vec3<T> > f(len); for (size_t i=0;i<len;++i) f[i]=a0[i]/a1[i]; return f;
}

namespace PyImath {

template <class T> boost::python::class_<IMATH_NAMESPACE::Vec4<T> > register_Vec4();
template <class T> boost::python::class_<PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > > register_Vec4Array();
typedef FixedArray<IMATH_NAMESPACE::Vec4<unsigned char> >  V4cArray;
typedef FixedArray<IMATH_NAMESPACE::V4s>   V4sArray;
typedef FixedArray<IMATH_NAMESPACE::V4i>   V4iArray;
typedef FixedArray<IMATH_NAMESPACE::V4i64> V4i64Array;
typedef FixedArray<IMATH_NAMESPACE::V4f>   V4fArray;
typedef FixedArray<IMATH_NAMESPACE::V4d>   V4dArray;

// TODO: template <class T> class Vec3Array : public FixedArray<IMATH_NAMESPACE::Vec3<T> >
}

// define vector*float array multiplication
template <class T>
static PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > operator * (const PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > &a0, T v1) {
    PY_IMATH_LEAVE_PYTHON;
    size_t len = a0.len(); PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > f(len); for (size_t i=0;i<len;++i) f[i]=a0[i]*v1; return f;
}
template <class T>
static PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > operator * (T v0, const PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > &a1) { return a1*v0; }
template <class T>
static PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > operator * (const PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > &a0, const PyImath::FixedArray<T> &a1) {
    PY_IMATH_LEAVE_PYTHON;
    size_t len = a0.match_dimension(a1); PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > f(len); for (size_t i=0;i<len;++i) f[i]=a0[i]*a1[i]; return f;
}
template <class T>
static PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > operator * (const PyImath::FixedArray<T> &a0, const PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > &a1) {
    return a1*a0;
}
template <class T>
static PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > operator * (const PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > &va, const IMATH_NAMESPACE::M44f &m) {
    PY_IMATH_LEAVE_PYTHON;
    size_t len = va.len(); PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > f(len); for (size_t i = 0; i < len; ++i) f[i] = va[i] * m; return f;
}

template <class T>
static PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > operator * (const PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > &va, const IMATH_NAMESPACE::M44d &m) {
    PY_IMATH_LEAVE_PYTHON;
    size_t len = va.len(); PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > f(len); for (size_t i = 0; i < len; ++i) f[i] = va[i] * m; return f;
}

// define vector/float array division
template <class T>
static PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > operator / (const PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > &a0, T v1) {
    PY_IMATH_LEAVE_PYTHON;
    size_t len = a0.len(); PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > f(len); for (size_t i=0;i<len;++i) f[i]=a0[i]/v1; return f;
}
template <class T>
static PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > operator / (const PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > &a0, const PyImath::FixedArray<T> &a1) {
    PY_IMATH_LEAVE_PYTHON;
    size_t len = a0.match_dimension(a1); PyImath::FixedArray<IMATH_NAMESPACE::Vec4<T> > f(len); for (size_t i=0;i<len;++i) f[i]=a0[i]/a1[i]; return f;
}


//

namespace PyImath {

// Other code in the Zeno code base assumes the existance of a class with the
// same name as the Imath class, and with static functions wrap() and
// convert() to produce a PyImath object from an Imath object and vice-versa,
// respectively.  The class Boost generates from the Imath class does not
// have these properties, so we define a companion class here.
// The template argument, T, is the element type for the vector (e.g., int,
// float, double).

template <class T>
class V2 {
  public:
    static PyObject *	wrap (const IMATH_NAMESPACE::Vec2<T> &v);
    static int		convert (PyObject *p, IMATH_NAMESPACE::Vec2<T> *v);
};

template <class T>
class V3 {
  public:
    static PyObject *	wrap (const IMATH_NAMESPACE::Vec3<T> &v);
    static int		convert (PyObject *p, IMATH_NAMESPACE::Vec3<T> *v);
};

template <class T>
class V4 {
  public:
    static PyObject *	wrap (const IMATH_NAMESPACE::Vec4<T> &v);
    static int		convert (PyObject *p, IMATH_NAMESPACE::Vec4<T> *v);
};

template <class T>
PyObject *
V2<T>::wrap (const IMATH_NAMESPACE::Vec2<T> &v)
{
    typename boost::python::return_by_value::apply < IMATH_NAMESPACE::Vec2<T> >::type converter;
    PyObject *p = converter (v);
    return p;
}

template <class T>
PyObject *
V3<T>::wrap (const IMATH_NAMESPACE::Vec3<T> &v)
{
    typename boost::python::return_by_value::apply < IMATH_NAMESPACE::Vec3<T> >::type converter;
    PyObject *p = converter (v);
    return p;
}

template <class T>
PyObject *
V4<T>::wrap (const IMATH_NAMESPACE::Vec4<T> &v)
{
    typename boost::python::return_by_value::apply < IMATH_NAMESPACE::Vec4<T> >::type converter;
    PyObject *p = converter (v);
    return p;
}

template <class T>
int
V2<T>::convert (PyObject *p, IMATH_NAMESPACE::Vec2<T> *v)
{
    boost::python::extract <IMATH_NAMESPACE::V2i> extractorV2i (p);
    if (extractorV2i.check())
    {
        IMATH_NAMESPACE::V2i v2i = extractorV2i();
        v->setValue (T(v2i[0]), T(v2i[1]));
        return 1;
    }

    boost::python::extract <IMATH_NAMESPACE::V2i64> extractorV2i64 (p);
    if (extractorV2i64.check())
    {
        IMATH_NAMESPACE::V2i64 v2i64 = extractorV2i64();
        v->setValue (T(v2i64[0]), T(v2i64[1]));
        return 1;
    }

    boost::python::extract <IMATH_NAMESPACE::V2f> extractorV2f (p);
    if (extractorV2f.check())
    {
        IMATH_NAMESPACE::V2f v2f = extractorV2f();
        v->setValue (T(v2f[0]), T(v2f[1]));
        return 1;
    }

    boost::python::extract <IMATH_NAMESPACE::V2d> extractorV2d (p);
    if (extractorV2d.check())
    {
        IMATH_NAMESPACE::V2d v2d = extractorV2d();
        v->setValue (T(v2d[0]), T(v2d[1]));
        return 1;
    }

    boost::python::extract <boost::python::tuple> extractorTuple (p);
    if (extractorTuple.check())
    {
        boost::python::tuple t = extractorTuple();
        if (t.attr ("__len__") () == 2)
        {
            // Extracting the tuple elements as doubles and casting them to
            // Ts in setValue() works better than extracting them as Ts from
            // the start.  Extracting them as Ts can fail in certain
            // circumstances if T is int and the tuples elemnts are floats.
            // In particular, this kind of failure occurs in PyImathBox.h,
            // when Box2<int>::convert() is passed a tuple of two tuples of
            // floats. 

            double a = boost::python::extract <double> (t[0]);
            double b = boost::python::extract <double> (t[1]);
            v->setValue (T(a), T(b));
            return 1;
        }
    }

    boost::python::extract <boost::python::list> extractorList (p);
    if (extractorList.check())
    {
        boost::python::list l = extractorList();
        if (l.attr ("__len__") () == 2)
        {
            boost::python::extract <double> extractor0 (l[0]);
            boost::python::extract <double> extractor1 (l[1]);
            if (extractor0.check() && extractor1.check())
            {
                v->setValue (T(extractor0()), T(extractor1()));
                return 1;
            }
        }
    }

    return 0;
}

template <class T>
int
V3<T>::convert (PyObject *p, IMATH_NAMESPACE::Vec3<T> *v)
{
    boost::python::extract <IMATH_NAMESPACE::V3i> extractorV3i (p);
    if (extractorV3i.check())
    {
        IMATH_NAMESPACE::V3i v3i = extractorV3i();
        v->setValue (T(v3i[0]), T(v3i[1]), T(v3i[2]));
        return 1;
    }

    boost::python::extract <IMATH_NAMESPACE::V3i64> extractorV3i64 (p);
    if (extractorV3i64.check())
    {
        IMATH_NAMESPACE::V3i64 v3i64 = extractorV3i64();
        v->setValue (T(v3i64[0]), T(v3i64[1]), T(v3i64[2]));
        return 1;
    }

    boost::python::extract <IMATH_NAMESPACE::V3f> extractorV3f (p);
    if (extractorV3f.check())
    {
        IMATH_NAMESPACE::V3f v3f = extractorV3f();
        v->setValue (T(v3f[0]), T(v3f[1]), T(v3f[2]));
        return 1;
    }

    boost::python::extract <IMATH_NAMESPACE::V3d> extractorV3d (p);
    if (extractorV3d.check())
    {
        IMATH_NAMESPACE::V3d v3d = extractorV3d();
        v->setValue (T(v3d[0]), T(v3d[1]), T(v3d[2]));
        return 1;
    }

    boost::python::extract <boost::python::tuple> extractorTuple (p);
    if (extractorTuple.check())
    {
        boost::python::tuple t = extractorTuple();
        if (t.attr ("__len__") () == 3)
        {
            // See the comment in V2<T>::convert().

            double a = boost::python::extract <double> (t[0]);
            double b = boost::python::extract <double> (t[1]);
            double c = boost::python::extract <double> (t[2]);
            v->setValue (T(a), T(b), T(c));
            return 1;
        }
    }

    boost::python::extract <boost::python::list> extractorList (p);
    if (extractorList.check())
    {
        boost::python::list l = extractorList();
        if (l.attr ("__len__") () == 3)
        {
            boost::python::extract <double> extractor0 (l[0]);
            boost::python::extract <double> extractor1 (l[1]);
            boost::python::extract <double> extractor2 (l[2]);
            if (extractor0.check() && extractor1.check() &&
                extractor2.check())
            {
                v->setValue (T(extractor0()), T(extractor1()),
                             T(extractor2()));
                return 1;
            }
        }
    }

    return 0;
}

template <class T>
int
V4<T>::convert (PyObject *p, IMATH_NAMESPACE::Vec4<T> *v)
{
    boost::python::extract <IMATH_NAMESPACE::V4i> extractorV4i (p);
    if (extractorV4i.check())
    {
        IMATH_NAMESPACE::V4i v4i = extractorV4i();
        *v = IMATH_NAMESPACE::Vec4<T>(v4i);
        return 1;
    }

    boost::python::extract <IMATH_NAMESPACE::V4f> extractorV4f (p);
    if (extractorV4f.check())
    {
        IMATH_NAMESPACE::V4f v4f = extractorV4f();
        *v = IMATH_NAMESPACE::Vec4<T>(v4f);
        return 1;
    }

    boost::python::extract <IMATH_NAMESPACE::V4d> extractorV4d (p);
    if (extractorV4d.check())
    {
        IMATH_NAMESPACE::V4d v4d = extractorV4d();
        *v = IMATH_NAMESPACE::Vec4<T>(v4d);
        return 1;
    }

    boost::python::extract <boost::python::tuple> extractorTuple (p);
    if (extractorTuple.check())
    {
        boost::python::tuple t = extractorTuple();
        if (t.attr ("__len__") () == 4)
        {
            // See the comment in V2<T>::convert().

            double a = boost::python::extract <double> (t[0]);
            double b = boost::python::extract <double> (t[1]);
            double c = boost::python::extract <double> (t[2]);
            double d = boost::python::extract <double> (t[3]);
            *v = IMATH_NAMESPACE::Vec4<T>(T(a), T(b), T(c), T(d));
            return 1;
        }
    }

    boost::python::extract <boost::python::list> extractorList (p);
    if (extractorList.check())
    {
        boost::python::list l = extractorList();
        if (l.attr ("__len__") () == 4)
        {
            boost::python::extract <double> extractor0 (l[0]);
            boost::python::extract <double> extractor1 (l[1]);
            boost::python::extract <double> extractor2 (l[2]);
            boost::python::extract <double> extractor3 (l[3]);
            if (extractor0.check() && extractor1.check() &&
                extractor2.check() && extractor3.check())
            {
                *v = IMATH_NAMESPACE::Vec4<T>(T(extractor0()), T(extractor1()),
                             T(extractor2()), T(extractor3()));
                return 1;
            }
        }
    }

    return 0;
}


typedef V2<int>		V2i;
typedef V2<float>	V2f;
typedef V2<double>	V2d;
typedef V3<int>		V3i;
typedef V3<float>	V3f;
typedef V3<double>	V3d;
typedef V4<int>		V4i;
typedef V4<float>	V4f;
typedef V4<double>	V4d;

}

#endif
                                                                                                                                                                                                              usr/include/Imath/PyImathVec2Impl.h                                                                 0000644 0000000 0000000 00000100774 14330770346 015650  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright Contributors to the OpenEXR Project.
//

// clang-format off

#ifndef _PyImathVec2Impl_h_
#define _PyImathVec2Impl_h_

//
// This .C file was turned into a header file so that instantiations
// of the various V2* types can be spread across multiple files in
// order to work around MSVC limitations.
//

#include <Python.h>
#include <boost/python.hpp>
#include <boost/python/make_constructor.hpp>
#include <boost/format.hpp>
#include <boost/cast.hpp>
#include <ImathVec.h>
#include <ImathVecAlgo.h>
#include "PyImath.h"
#include "PyImathMathExc.h"
#include "PyImathBox.h"
#include "PyImathVec.h"
#include "PyImathDecorators.h"
#include "PyImathOperators.h"
#include "PyImathVecOperators.h"

namespace PyImath {
using namespace boost::python;
using namespace IMATH_NAMESPACE;

template <class T> struct Vec2Name { static const char *value; };

// create a new default constructor that initializes Vec2<T> to zero.
template <class T>
static Vec2<T> * Vec2_construct_default()
{
    return new Vec2<T>(T(0),T(0));
}

template <class T,class BoostPyType>
static Vec2<T> * Vec2_tuple_constructor(const BoostPyType &t)
{
    if(t.attr("__len__")() == 1)
        return new Vec2<T>(extract<T>(t[0]), extract<T>(t[0]));
    else if(t.attr("__len__")() == 2)
        return new Vec2<T>(extract<T>(t[0]), extract<T>(t[1]));
    else
      throw std::invalid_argument ("Vec2 constructor expects tuple of length 1 or 2");
}

template <class T>
static Vec2<T> * Vec2_object_constructor1(const object &obj)
{
    Vec2<T> w;
    extract<Vec2<int> >     e1(obj);
    extract<Vec2<float> >   e2(obj);
    extract<Vec2<double> >  e3(obj);
    extract<tuple>          e4(obj);
    extract<double>         e5(obj);
    extract<list>           e6(obj);
    
    if(e1.check()){ w = e1(); }
    else if(e2.check()) { w = e2(); }
    else if(e3.check()) { w = e3(); }
    else if(e4.check())
    {
        tuple t = e4();
        if(t.attr("__len__")() == 2)
        {
            w.x = extract<T>(t[0]);
            w.y = extract<T>(t[1]);
        }
        else
            throw std::invalid_argument ("tuple must have length of 2");
    }
    else if(e5.check()) { T a = e5(); w.setValue(a, a); }
    else if(e6.check())
    {
        list l = e6();
        if(l.attr("__len__")() == 2)
        {
            w.x = extract<T>(l[0]);
            w.y = extract<T>(l[1]);
        }
        else
            throw std::invalid_argument ("list must have length of 2");
    }
    else
        throw std::invalid_argument ("invalid parameters passed to Vec2 constructor");
    
    Vec2<T> *v = new Vec2<T>;
    *v = w;
    
    return v;

}

template <class T>
static Vec2<T> * Vec2_object_constructor2(const object &obj1, const object &obj2)
{
    extract<double> e1(obj1);
    extract<double> e2(obj2);
    
    Vec2<T> *v = new Vec2<T>;
    
    if(e1.check()) { v->x = boost::numeric_cast<T>(e1());}
    else { throw std::invalid_argument ("invalid parameters passed to Vec2 constructor"); }
    
    if(e2.check()) { v->y = boost::numeric_cast<T>(e2());}
    else { throw std::invalid_argument ("invalid parameters passed to Vec2 constructor"); }    
    
    return v;
}

// Implementations of str and repr are same here,
// but we'll specialize repr for float and double to make them exact.
template <class T>
static std::string Vec2_str(const Vec2<T> &v)
{
    std::stringstream stream;
    stream << Vec2Name<T>::value << "(" << v.x << ", " << v.y << ")";
    return stream.str();
}
template <class T>
static std::string Vec2_repr(const Vec2<T> &v)
{
    std::stringstream stream;
    stream << Vec2Name<T>::value << "(" << v.x << ", " << v.y << ")";
    return stream.str();
}

template <class T>
static T
Vec2_cross(const IMATH_NAMESPACE::Vec2<T> &v, const IMATH_NAMESPACE::Vec2<T> &other) 
{ 
    MATH_EXC_ON;
    return v.cross(other);
}

template <class T>
static FixedArray<T>
Vec2_cross_Vec2Array(const IMATH_NAMESPACE::Vec2<T> &va, const FixedArray<IMATH_NAMESPACE::Vec2<T> > &vb) 
{ 
    PY_IMATH_LEAVE_PYTHON;
    size_t len = vb.len(); 
    FixedArray<T> f(len); 
    for (size_t i = 0; i < len; ++i) 
        f[i] = va.cross(vb[i]); 
    return f; 
}

template <class T>
static T
Vec2_dot(const IMATH_NAMESPACE::Vec2<T> &v, const IMATH_NAMESPACE::Vec2<T> &other) 
{ 
    MATH_EXC_ON;
    return v.dot(other);
}

template <class T>
static FixedArray<T>
Vec2_dot_Vec2Array(const IMATH_NAMESPACE::Vec2<T> &va, const FixedArray<IMATH_NAMESPACE::Vec2<T> > &vb) 
{ 
    PY_IMATH_LEAVE_PYTHON;
    size_t len = vb.len(); 
    FixedArray<T> f(len); 
    for (size_t i = 0; i < len; ++i) 
        f[i] = va.dot(vb[i]); 
    return f; 
}

template <class T>
static T
Vec2_length(const IMATH_NAMESPACE::Vec2<T> &v) 
{ 
    MATH_EXC_ON;
    return v.length();
}

template <class T>
static T
Vec2_length2(const IMATH_NAMESPACE::Vec2<T> &v) 
{ 
    MATH_EXC_ON;
    return v.length2();
}

template <class T>
static const Vec2<T> &
Vec2_normalize(IMATH_NAMESPACE::Vec2<T> &v) 
{ 
    MATH_EXC_ON;
    return v.normalize();
}

template <class T>
static const Vec2<T> &
Vec2_normalizeExc(IMATH_NAMESPACE::Vec2<T> &v) 
{ 
    MATH_EXC_ON;
    return v.normalizeExc();
}

template <class T>
static const Vec2<T> &
Vec2_normalizeNonNull(IMATH_NAMESPACE::Vec2<T> &v) 
{ 
    MATH_EXC_ON;
    return v.normalizeNonNull();
}

template <class T>
static Vec2<T>
Vec2_normalized(const IMATH_NAMESPACE::Vec2<T> &v) 
{ 
    MATH_EXC_ON;
    return v.normalized();
}

template <class T>
static Vec2<T>
Vec2_normalizedExc(const IMATH_NAMESPACE::Vec2<T> &v) 
{ 
    MATH_EXC_ON;
    return v.normalizedExc();
}

template <class T>
static Vec2<T>
Vec2_normalizedNonNull(const IMATH_NAMESPACE::Vec2<T> &v) 
{ 
    MATH_EXC_ON;
    return v.normalizedNonNull();
}

template <class T>
static Vec2<T>
closestVertex(Vec2<T> &p, const Vec2<T> &v0, const Vec2<T> &v1, const Vec2<T> &v2)
{
    MATH_EXC_ON;
    return IMATH_NAMESPACE::closestVertex(v0, v1, v2, p);
}

template <class T>
static const Vec2<T> &
Vec2_negate(IMATH_NAMESPACE::Vec2<T> &v) 
{ 
    MATH_EXC_ON;
    return v.negate();
}

template <class T>
static Vec2<T>
orthogonal(const Vec2<T> &v, const Vec2<T> &v0)
{
    MATH_EXC_ON;
    return IMATH_NAMESPACE::orthogonal(v, v0);
}

template <class T>
static Vec2<T>
project(const Vec2<T> &v, const Vec2<T> &v0)
{
    MATH_EXC_ON;
    return IMATH_NAMESPACE::project(v0, v);
}

template <class T>
static Vec2<T>
reflect(const Vec2<T> &v, const Vec2<T> &v0)
{
    MATH_EXC_ON;
    return IMATH_NAMESPACE::reflect(v, v0);
}

template <class T>
static void
setValue(Vec2<T> &v, T a, T b)
{
    v.x = a;
    v.y = b;
}

template <class T>
static Vec2<T>
Vec2_add (const Vec2<T> &v, const Vec2<T> &w)
{
    MATH_EXC_ON;
    return v + w;
}

template <class T>
static Vec2<T>
Vec2_sub (const Vec2<T> &v, const Vec2<T> &w)
{
    MATH_EXC_ON;
    return v - w;
}

template <class T>
static Vec2<T>
Vec2_neg (const Vec2<T> &v)
{
    MATH_EXC_ON;
    return -v;
}

template <class T, class U>
static Vec2<T>
Vec2_mul (const Vec2<T> &v, const Vec2<U> &w)
{
    MATH_EXC_ON;
    Vec2<T> w2 (w);
    return v * w2;
}

template <class T>
static Vec2<T>
Vec2_mulT (const Vec2<T> &v, T t)
{
    MATH_EXC_ON;
    return v * t;
}

template <class T>
static FixedArray<IMATH_NAMESPACE::Vec2<T> >
Vec2_mulTArray (const Vec2<T> &v, const FixedArray<T> &t)
{
    PY_IMATH_LEAVE_PYTHON;
    size_t len = t.len();
    FixedArray<IMATH_NAMESPACE::Vec2<T> > retval(len);
    for (size_t i=0; i<len; ++i) retval[i] = v*t[i];
    return retval;
}

template <class T>
static FixedArray<IMATH_NAMESPACE::Vec2<T> >
Vec2_rmulTArray (const Vec2<T> &v, const FixedArray<T> &t)
{
    return Vec2_mulTArray(v,t);
}

template <class T,class S>
static Vec2<T>
Vec2_div (Vec2<T> &v, Vec2<S> &w)
{
    MATH_EXC_ON;
    return v / w;
}

template <class T>
static Vec2<T>
Vec2_rmulT (Vec2<T> &v, T t)
{
    MATH_EXC_ON;
    return t * v;
}

template <class T, class U>
static const Vec2<T> &
Vec2_imulV(Vec2<T> &v, const Vec2<U> &w)
{
    MATH_EXC_ON;
    return v *= w;
}

template <class T>
static const Vec2<T> &
Vec2_imulT(IMATH_NAMESPACE::Vec2<T> &v, T t) 
{ 
    MATH_EXC_ON;
    return v *= t;
}

template <class T, class U>
static Vec2<T>
Vec2_mulM22 (Vec2<T> &v, const Matrix22<U> &m)
{
    MATH_EXC_ON;
    return v * m;
}

template <class T, class U>
static Vec2<T>
Vec2_mulM33 (Vec2<T> &v, const Matrix33<U> &m)
{
    MATH_EXC_ON;
    return v * m;
}

template <class T>
static const Vec2<T> &
Vec2_idivObj(IMATH_NAMESPACE::Vec2<T> &v, const object &o) 
{ 
    MATH_EXC_ON;
    Vec2<T> v2;
    if (PyImath::V2<T>::convert (o.ptr(), &v2))
    {
        return v /= v2;
    }
    else
    {
        extract<double> e(o);
        if (e.check())
            return v /= e();
        else
            throw std::invalid_argument ("V2 division expects an argument"
                   "convertible to a V2");
    }
}

template <class T>
static Vec2<T>
Vec2_subT(const Vec2<T> &v, T a)
{
    MATH_EXC_ON;
    Vec2<T> w;
    w.setValue(v.x - a, v.y - a);
    return w;
}

template <class T,class BoostPyType>
static Vec2<T>
Vec2_subTuple(const Vec2<T> &v, const BoostPyType &t)
{
    MATH_EXC_ON;
    Vec2<T> w;
    
    if(t.attr("__len__")() == 2)
    {
        w.x = v.x - extract<T>(t[0]);
        w.y = v.y - extract<T>(t[1]);
    }
    else
        throw std::invalid_argument ("tuple must have length of 2");
    
    return w;
}

template <class T>
static Vec2<T>
Vec2_rsubT(const Vec2<T> &v, T a)
{
    MATH_EXC_ON;
    Vec2<T> w;
    w.setValue(a - v.x, a - v.y);
    return w;
}

template <class T,class BoostPyType>
static Vec2<T>
Vec2_rsubTuple(const Vec2<T> &v, const BoostPyType &t)
{
    MATH_EXC_ON;
    Vec2<T> w;
    
    if(t.attr("__len__")() == 2)
    {
        w.x = extract<T>(t[0]) - v.x;
        w.y = extract<T>(t[1]) - v.y;
    }
    else
        throw std::invalid_argument ("tuple must have length of 2");
    
    return w;
}

template <class T,class BoostPyType>
static Vec2<T>
Vec2_addTuple(const Vec2<T> &v, const BoostPyType &t)
{
    MATH_EXC_ON;
    Vec2<T> w;
    
    if(t.attr("__len__")() == 2)
    {
        w.x = v.x + extract<T>(t[0]);
        w.y = v.y + extract<T>(t[1]);
    }
    else
        throw std::invalid_argument ("tuple must have length of 2");
    
    return w;
}

template <class T>
static Vec2<T>
Vec2_addT(const Vec2<T> &v, T a)
{
    MATH_EXC_ON;
    Vec2<T> w;
    w.setValue(v.x + a, v.y + a);
    return w;
}

template <class T, class U>
static Vec2<T>
Vec2_addV(const Vec2<T> &v, const Vec2<U> &w)
{
    MATH_EXC_ON;
    return v + w;
}

template <class T, class U>
static const Vec2<T> &
Vec2_iaddV(Vec2<T> &v, const Vec2<U> &w)
{
    MATH_EXC_ON;
    return v += w;
}

template <class T, class U>
static Vec2<T>
Vec2_subV(const Vec2<T> &v, const Vec2<U> &w)
{
    MATH_EXC_ON;
    return v - w;
}

template <class T, class U>
static const Vec2<T> &
Vec2_isubV(Vec2<T> &v, const Vec2<U> &w)
{
    MATH_EXC_ON;
    return v -= w;
}

template <class T,class BoostPyType>
static Vec2<T>
Vec2_mulTuple(const Vec2<T> &v, BoostPyType t)
{
    MATH_EXC_ON;
    Vec2<T> w;
    
    if(t.attr("__len__")() == 1){
        w.x = v.x*extract<T>(t[0]);
        w.y = v.y*extract<T>(t[0]);
    }        
    else if(t.attr("__len__")() == 2){
        w.x = v.x*extract<T>(t[0]);
        w.y = v.y*extract<T>(t[1]);
    }
    else
        throw std::invalid_argument ("tuple must have length of 1 or 2");
    
    return w;
}

template <class T, class U>
static const Vec2<T> &
Vec2_imulM22 (Vec2<T> &v, const Matrix22<U> &m)
{
    MATH_EXC_ON;
    return v *= m;
}

template <class T, class U>
static const Vec2<T> &
Vec2_imulM33 (Vec2<T> &v, const Matrix33<U> &m)
{
    MATH_EXC_ON;
    return v *= m;
}

template <class T,class BoostPyType>
static Vec2<T>
Vec2_divTuple(const Vec2<T> &v, const BoostPyType &t)
{
    if(t.attr("__len__")() == 2)
    {
        T x = extract<T>(t[0]);
        T y = extract<T>(t[1]);
        if(x != T(0) && y != T(0))
            return Vec2<T>(v.x / x, v.y / y);
        else
          throw std::domain_error ("Division by zero");
    }
    else
        throw std::invalid_argument ("Vec2 expects tuple of length 2");
}

template <class T,class BoostPyType>
static Vec2<T>
Vec2_rdivTuple(const Vec2<T> &v, const BoostPyType &t)
{
    MATH_EXC_ON;
    Vec2<T> w;
    if(t.attr("__len__")() == 2)
    {
        T x = extract<T>(t[0]);
        T y = extract<T>(t[1]);
            
