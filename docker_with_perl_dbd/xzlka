
=item endpwent

(Win32)
Not implemented.

(Android)
Either not implemented or a no-op.

=item endgrent

(Android, S<RISC OS>, VMS, Win32)
Not implemented.

=item endhostent

(Android, Win32)
Not implemented.

=item endnetent

(Android, Win32, S<Plan 9>)
Not implemented.

=item endprotoent

(Android, Win32, S<Plan 9>)
Not implemented.

=item endservent

(S<Plan 9>, Win32)
Not implemented.

=item getsockopt

(S<Plan 9>)
Not implemented.

=item glob

This operator is implemented via the L<C<File::Glob>|File::Glob> extension
on most platforms.  See L<File::Glob> for portability information.

=item gmtime

In theory, C<gmtime> is reliable from -2**63 to 2**63-1.  However,
because work-arounds in the implementation use floating point numbers,
it will become inaccurate as the time gets larger.  This is a bug and
will be fixed in the future.

(VOS)
Time values are 32-bit quantities.

=item ioctl

(VMS)
Not implemented.

(Win32)
Available only for socket handles, and it does what the C<ioctlsocket()> call
in the Winsock API does.

(S<RISC OS>)
Available only for socket handles.

=item kill

(S<RISC OS>)
Not implemented, hence not useful for taint checking.

(Win32)
C<kill> doesn't send a signal to the identified process like it does on
Unix platforms.  Instead C<kill($sig, $pid)> terminates the process
identified by C<$pid>, and makes it exit immediately with exit status
C<$sig>.  As in Unix, if C<$sig> is 0 and the specified process exists, it
returns true without actually terminating it.

(Win32)
C<kill(-9, $pid)> will terminate the process specified by C<$pid> and
recursively all child processes owned by it.  This is different from
the Unix semantics, where the signal will be delivered to all
processes in the same process group as the process specified by
C<$pid>.

(VMS)
A pid of -1 indicating all processes on the system is not currently
supported.

=item link

(S<RISC OS>, VOS)
Not implemented.

(AmigaOS)
Link count not updated because hard links are not quite that hard
(They are sort of half-way between hard and soft links).

(Win32)
Hard links are implemented on Win32 under NTFS only. They are
natively supported on Windows 2000 and later.  On Windows NT they
are implemented using the Windows POSIX subsystem support and the
Perl process will need Administrator or Backup Operator privileges
to create hard links.

(VMS)
Available on 64 bit OpenVMS 8.2 and later.

=item localtime

C<localtime> has the same range as L</gmtime>, but because time zone
rules change, its accuracy for historical and future times may degrade
but usually by no more than an hour.

=item lstat

(S<RISC OS>)
Not implemented.

(Win32)
Treats directory junctions as symlinks.

=item msgctl

=item msgget

=item msgsnd

=item msgrcv

(Android, Win32, VMS, S<Plan 9>, S<RISC OS>, VOS)
Not implemented.

=item open

(S<RISC OS>)
Open modes C<|-> and C<-|> are unsupported.

(SunOS, Solaris, HP-UX)
Opening a process does not automatically flush output handles on some
platforms.

(Win32)
Both of modes C<|-> and C<-|> are supported, but the list form is
emulated since the Win32 API CreateProcess() accepts a simple string
rather than an array of arguments.  This may have security
implications for your code.

=item readlink

(VMS, S<RISC OS>)
Not implemented.

(Win32)
readlink() on a directory junction returns the object name, not a
simple path.

=item rename

(Win32)
Can't move directories between directories on different logical volumes.

=item rewinddir

(Win32)
Will not cause L<C<readdir>|perlfunc/readdir DIRHANDLE> to re-read the
directory stream.  The entries already read before the C<rewinddir> call
will just be returned again from a cache buffer.

=item select

(Win32, VMS)
Only implemented on sockets.

(S<RISC OS>)
Only reliable on sockets.

Note that the L<C<select FILEHANDLE>|perlfunc/select FILEHANDLE> form is
generally portable.

=item semctl

=item semget

=item semop

(Android, Win32, VMS, S<RISC OS>)
Not implemented.

=item setgrent

(Android, VMS, Win32, S<RISC OS>)
Not implemented.

=item setpgrp

(Win32, VMS, S<RISC OS>, VOS)
Not implemented.

=item setpriority

(Win32, VMS, S<RISC OS>, VOS)
Not implemented.

=item setpwent

(Android, Win32, S<RISC OS>)
Not implemented.

=item setsockopt

(S<Plan 9>)
Not implemented.

=item shmctl

=item shmget

=item shmread

=item shmwrite

(Android, Win32, VMS, S<RISC OS>)
Not implemented.

=item sleep

(Win32)
Emulated using synchronization functions such that it can be
interrupted by L<C<alarm>|perlfunc/alarm SECONDS>, and limited to a
maximum of 4294967 seconds, approximately 49 days.

=item socketpair

(S<RISC OS>)
Not implemented.

(VMS)
Available on 64 bit OpenVMS 8.2 and later.

=item stat

Platforms that do not have C<rdev>, C<blksize>, or C<blocks> will return
these as C<''>, so numeric comparison or manipulation of these fields may
cause 'not numeric' warnings.

(S<Mac OS X>)
C<ctime> not supported on UFS.

(Win32)
C<ctime> is creation time instead of inode change time.

(VMS)
C<dev> and C<ino> are not necessarily reliable.

(S<RISC OS>)
C<mtime>, C<atime> and C<ctime> all return the last modification time.
C<dev> and C<ino> are not necessarily reliable.

(OS/2)
C<dev>, C<rdev>, C<blksize>, and C<blocks> are not available.  C<ino> is not
meaningful and will differ between stat calls on the same file.

(Cygwin)
Some versions of cygwin when doing a C<stat("foo")> and not finding it
may then attempt to C<stat("foo.exe")>.

=item symlink

(S<RISC OS>)
Not implemented.

(Win32)
Requires either elevated permissions or developer mode and a
sufficiently recent version of Windows 10. You can check whether the current
process has the required privileges using the
L<Win32::IsSymlinkCreationAllowed()|Win32/Win32::IsSymlinkCreationAllowed()>
function.

Since Windows needs to know whether the target is a directory or not when
creating the link the target Perl will only create the link as a directory
link when the target exists and is a directory.

Windows does not recognize forward slashes as path separators in
symbolic links.  Hence on Windows, any C</> in the I<OLDFILE>
parameter to symlink() are converted to C<\>.  This is reflected in
the result returned by readlink(), the C<\> in the result are not
converted back to C</>.

(VMS)
Implemented on 64 bit VMS 8.3.  VMS requires the symbolic link to be in Unix
syntax if it is intended to resolve to a valid path.

=item syscall

(Win32, VMS, S<RISC OS>, VOS)
Not implemented.

=item sysopen

(S<Mac OS>, OS/390)
The traditional C<0>, C<1>, and C<2> MODEs are implemented with different
numeric values on some systems.  The flags exported by L<C<Fcntl>|Fcntl>
(C<O_RDONLY>, C<O_WRONLY>, C<O_RDWR>) should work everywhere though.

=item system

(Win32)
As an optimization, may not call the command shell specified in
C<$ENV{PERL5SHELL}>.  C<system(1, @args)> spawns an external
process and immediately returns its process designator, without
waiting for it to terminate.  Return value may be used subsequently
in L<C<wait>|perlfunc/wait> or L<C<waitpid>|perlfunc/waitpid PID,FLAGS>.
Failure to C<spawn()> a subprocess is indicated by setting
L<C<$?>|perlvar/$?> to C<<< 255 << 8 >>>.  L<C<$?>|perlvar/$?> is set in a
way compatible with Unix (i.e. the exit status of the subprocess is
obtained by C<<< $? >> 8 >>>, as described in the documentation).

Note that the list form of system() is emulated since the Win32 API
CreateProcess() accepts a simple string rather than an array of
command-line arguments.  This may have security implications for your
code.

(S<RISC OS>)
There is no shell to process metacharacters, and the native standard is
to pass a command line terminated by "\n" "\r" or "\0" to the spawned
program.  Redirection such as C<< > foo >> is performed (if at all) by
the run time library of the spawned program.  C<system LIST> will call
the Unix emulation library's L<C<exec>|perlfunc/exec LIST> emulation,
which attempts to provide emulation of the stdin, stdout, stderr in force
in the parent, provided the child program uses a compatible version of the
emulation library.  C<system SCALAR> will call the native command line
directly and no such emulation of a child Unix program will occur.
Mileage B<will> vary.

(Win32)
C<system LIST> without the use of indirect object syntax (C<system PROGRAM LIST>)
may fall back to trying the shell if the first C<spawn()> fails.

(SunOS, Solaris, HP-UX)
Does not automatically flush output handles on some platforms.

(VMS)
As with Win32, C<system(1, @args)> spawns an external process and
immediately returns its process designator without waiting for the
process to terminate.  In this case the return value may be used subsequently
in L<C<wait>|perlfunc/wait> or L<C<waitpid>|perlfunc/waitpid PID,FLAGS>.
Otherwise the return value is POSIX-like (shifted up by 8 bits), which only
allows room for a made-up value derived from the severity bits of the native
32-bit condition code (unless overridden by
L<C<use vmsish 'status'>|vmsish/C<vmsish status>>).  If the native
condition code is one that has a POSIX value encoded, the POSIX value will
be decoded to extract the expected exit value.  For more details see
L<perlvms/$?>.

=item telldir

(Android)
Not implemented.

=item times

(Win32)
"Cumulative" times will be bogus.  On anything other than Windows NT
or Windows 2000, "system" time will be bogus, and "user" time is
actually the time returned by the L<C<clock()>|clock(3)> function in the C
runtime library.

(S<RISC OS>)
Not useful.

=item truncate

(Older versions of VMS)
Not implemented.

(VOS)
Truncation to same-or-shorter lengths only.

(Win32)
If a FILEHANDLE is supplied, it must be writable and opened in append
mode (i.e., use C<<< open(my $fh, '>>', 'filename') >>>
or C<sysopen(my $fh, ..., O_APPEND|O_RDWR)>.  If a filename is supplied, it
should not be held open elsewhere.

=item umask

Returns C<undef> where unavailable.

(AmigaOS)
C<umask> works but the correct permissions are set only when the file
is finally closed.

=item utime

(VMS, S<RISC OS>)
Only the modification time is updated.

(Win32)
May not behave as expected.  Behavior depends on the C runtime
library's implementation of L<C<utime()>|utime(2)>, and the filesystem
being used.  The FAT filesystem typically does not support an "access
time" field, and it may limit timestamps to a granularity of two seconds.

=item wait

=item waitpid

(Win32)
Can only be applied to process handles returned for processes spawned
using C<system(1, ...)> or pseudo processes created with
L<C<fork>|perlfunc/fork>.

(S<RISC OS>)
Not useful.

=back


=head1 Supported Platforms

The following platforms are known to build Perl 5.12 (as of April 2010,
its release date) from the standard source code distribution available
at L<http://www.cpan.org/src>

=over

=item Linux (x86, ARM, IA64)

=item HP-UX

=item AIX

=item Win32

=over

=item Windows 2000

=item Windows XP

=item Windows Server 2003

=item Windows Vista

=item Windows Server 2008

=item Windows 7

=back

=item Cygwin

Some tests are known to fail:

=over

=item *

F<ext/XS-APItest/t/call_checker.t> - see
L<https://github.com/Perl/perl5/issues/10750>

=item *

F<dist/I18N-Collate/t/I18N-Collate.t>

=item *

F<ext/Win32CORE/t/win32core.t> - may fail on recent cygwin installs.

=back

=item Solaris (x86, SPARC)

=item OpenVMS

=over

=item Alpha (7.2 and later)

=item I64 (8.2 and later)

=back

=item NetBSD

=item FreeBSD

=item Debian GNU/kFreeBSD

=item Haiku

=item Irix (6.5. What else?)

=item OpenBSD

=item Dragonfly BSD

=item Midnight BSD

=item QNX Neutrino RTOS (6.5.0)

=item MirOS BSD

=item Stratus OpenVOS (17.0 or later)

Caveats:

=over

=item time_t issues that may or may not be fixed

=back

=item Stratus VOS / OpenVOS

=item AIX

=item Android

=item FreeMINT

Perl now builds with FreeMiNT/Atari. It fails a few tests, that needs
some investigation.

The FreeMiNT port uses GNU dld for loadable module capabilities. So
ensure you have that library installed when building perl.

=back

=head1 EOL Platforms

=head2 (Perl 5.37.1)

The following platforms were supported by a previous version of
Perl but have been officially removed from Perl's source code
as of 5.37.1:

=over

=item Ultrix

=back

=head2 (Perl 5.36)

The following platforms were supported by a previous version of
Perl but have been officially removed from Perl's source code
as of 5.36:

=over

=item NetWare

=item DOS/DJGPP

=item AT&T UWIN

=back

=head2 (Perl 5.20)

The following platforms were supported by a previous version of
Perl but have been officially removed from Perl's source code
as of 5.20:

=over

=item AT&T 3b1

=back

=head2 (Perl 5.14)

The following platforms were supported up to 5.10.  They may still
have worked in 5.12, but supporting code has been removed for 5.14:

=over

=item Windows 95

=item Windows 98

=item Windows ME

=item Windows NT4

=back

=head2 (Perl 5.12)

The following platforms were supported by a previous version of
Perl but have been officially removed from Perl's source code
as of 5.12:

=over

=item Atari MiNT

=item Apollo Domain/OS

=item Apple Mac OS 8/9

=item Tenon Machten

=back


=head1 Supported Platforms (Perl 5.8)

As of July 2002 (the Perl release 5.8.0), the following platforms were
able to build Perl from the standard source code distribution
available at L<http://www.cpan.org/src/>

        AIX
        BeOS
        BSD/OS          (BSDi)
        Cygwin
        DG/UX
        DOS DJGPP       1)
        DYNIX/ptx
        EPOC R5
        FreeBSD
        HI-UXMPP        (Hitachi) (5.8.0 worked but we didn't know it)
        HP-UX
        IRIX
        Linux
        Mac OS Classic
        Mac OS X        (Darwin)
        MPE/iX
        NetBSD
        NetWare
        NonStop-UX
        ReliantUNIX     (formerly SINIX)
        OpenBSD
        OpenVMS         (formerly VMS)
        Open UNIX       (Unixware) (since Perl 5.8.1/5.9.0)
        OS/2
        OS/400          (using the PASE) (since Perl 5.8.1/5.9.0)
        POSIX-BC        (formerly BS2000)
        QNX
        Solaris
        SunOS 4
        SUPER-UX        (NEC)
        Tru64 UNIX      (formerly DEC OSF/1, Digital UNIX)
        UNICOS
        UNICOS/mk
        UTS
        VOS / OpenVOS
        Win95/98/ME/2K/XP 2)
        WinCE
        z/OS            (formerly OS/390)
        VM/ESA

        1) in DOS mode either the DOS or OS/2 ports can be used
        2) compilers: Borland, MinGW (GCC), VC6

The following platforms worked with the previous releases (5.6 and
5.7), but we did not manage either to fix or to test these in time
for the 5.8.0 release.  There is a very good chance that many of these
will work fine with the 5.8.0.

        BSD/OS
        DomainOS
        Hurd
        LynxOS
        MachTen
        PowerMAX
        SCO SV
        SVR4
        Unixware
        Windows 3.1

Known to be broken for 5.8.0 (but 5.6.1 and 5.7.2 can be used):

	AmigaOS 3

The following platforms have been known to build Perl from source in
the past (5.005_03 and earlier), but we haven't been able to verify
their status for the current release, either because the
hardware/software platforms are rare or because we don't have an
active champion on these platforms--or both.  They used to work,
though, so go ahead and try compiling them, and let
L<https://github.com/Perl/perl5/issues> know
of any trouble.

        3b1
        A/UX
        ConvexOS
        CX/UX
        DC/OSx
        DDE SMES
        DOS EMX
        Dynix
        EP/IX
        ESIX
        FPS
        GENIX
        Greenhills
        ISC
        MachTen 68k
        MPC
        NEWS-OS
        NextSTEP
        OpenSTEP
        Opus
        Plan 9
        RISC/os
        SCO ODT/OSR
        Stellar
        SVR2
        TI1500
        TitanOS
        Unisys Dynix

The following platforms have their own source code distributions and
binaries available via L<http://www.cpan.org/ports/>

                                Perl release

        OS/400 (ILE)            5.005_02
        Tandem Guardian         5.004

The following platforms have only binaries available via
L<http://www.cpan.org/ports/index.html> :

                                Perl release

        Acorn RISCOS            5.005_02
        AOS                     5.002
        LynxOS                  5.004_02

Although we do suggest that you always build your own Perl from
the source code, both for maximal configurability and for security,
in case you are in a hurry you can check
L<http://www.cpan.org/ports/index.html> for binary distributions.

=head1 SEE ALSO

L<perlaix>, L<perlamiga>, L<perlbs2000>,
L<perlcygwin>,
L<perlebcdic>, L<perlfreebsd>, L<perlhurd>, L<perlhpux>, L<perlirix>,
L<perlmacosx>,
L<perlos2>, L<perlos390>, L<perlos400>,
L<perlplan9>, L<perlqnx>, L<perlsolaris>, L<perltru64>,
L<perlunicode>, L<perlvms>, L<perlvos>, L<perlwin32>, and L<Win32>.

=head1 AUTHORS / CONTRIBUTORS

Abigail <abigail@abigail.be>,
Charles Bailey <bailey@newman.upenn.edu>,
Graham Barr <gbarr@pobox.com>,
Tom Christiansen <tchrist@perl.com>,
Nicholas Clark <nick@ccl4.org>,
Thomas Dorner <Thomas.Dorner@start.de>,
Andy Dougherty <doughera@lafayette.edu>,
Dominic Dunlop <domo@computer.org>,
Neale Ferguson <neale@vma.tabnsw.com.au>,
David J. Fiander <davidf@mks.com>,
Paul Green <Paul.Green@stratus.com>,
M.J.T. Guy <mjtg@cam.ac.uk>,
Jarkko Hietaniemi <jhi@iki.fi>,
Luther Huffman <lutherh@stratcom.com>,
Nick Ing-Simmons <nick@ing-simmons.net>,
Andreas J. KE<ouml>nig <a.koenig@mind.de>,
Markus Laker <mlaker@contax.co.uk>,
Andrew M. Langmead <aml@world.std.com>,
Lukas Mai <l.mai@web.de>,
Larry Moore <ljmoore@freespace.net>,
Paul Moore <Paul.Moore@uk.origin-it.com>,
Chris Nandor <pudge@pobox.com>,
Matthias Neeracher <neeracher@mac.com>,
Philip Newton <pne@cpan.org>,
Gary Ng <71564.1743@CompuServe.COM>,
Tom Phoenix <rootbeer@teleport.com>,
AndrE<eacute> Pirard <A.Pirard@ulg.ac.be>,
Peter Prymmer <pvhp@forte.com>,
Hugo van der Sanden <hv@crypt0.demon.co.uk>,
Gurusamy Sarathy <gsar@activestate.com>,
Paul J. Schinder <schinder@pobox.com>,
Michael G Schwern <schwern@pobox.com>,
Dan Sugalski <dan@sidhe.org>,
Nathan Torkington <gnat@frii.com>,
John Malmberg <wb8tyw@qsl.net>
                                                                               usr/local/lib/perl5/5.40.0/pod/perlpragma.pod                                                       0000644 0000000 0000000 00000012022 14714567415 017123  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

perlpragma - how to write a user pragma

=head1 DESCRIPTION

A pragma is a module which influences some aspect of the compile time or run
time behaviour of Perl, such as C<strict> or C<warnings>. With Perl 5.10 you
are no longer limited to the built in pragmata; you can now create user
pragmata that modify the behaviour of user functions within a lexical scope.

=head1 A basic example

For example, say you need to create a class implementing overloaded
mathematical operators, and would like to provide your own pragma that
functions much like C<use integer;> You'd like this code

    use MyMaths;

    my $l = MyMaths->new(1.2);
    my $r = MyMaths->new(3.4);

    print "A: ", $l + $r, "\n";

    use myint;
    print "B: ", $l + $r, "\n";

    {
        no myint;
        print "C: ", $l + $r, "\n";
    }

    print "D: ", $l + $r, "\n";

    no myint;
    print "E: ", $l + $r, "\n";

to give the output

    A: 4.6
    B: 4
    C: 4.6
    D: 4
    E: 4.6

I<i.e.>, where C<use myint;> is in effect, addition operations are forced
to integer, whereas by default they are not, with the default behaviour being
restored via C<no myint;>

The minimal implementation of the package C<MyMaths> would be something like
this:

    package MyMaths;
    use v5.36;
    use myint();
    use overload '+' => sub {
        my ($l, $r) = @_;
	# Pass 1 to check up one call level from here
        if (myint::in_effect(1)) {
            int($$l) + int($$r);
        } else {
            $$l + $$r;
        }
    };

    sub new {
        my ($class, $value) = @_;
        bless \$value, $class;
    }

    1;

Note how we load the user pragma C<myint> with an empty list C<()> to
prevent its C<import> being called.

The interaction with the Perl compilation happens inside package C<myint>:

    package myint;

    use v5.36;

    sub import {
        $^H{"myint/in_effect"} = 1;
    }

    sub unimport {
        $^H{"myint/in_effect"} = 0;
    }

    sub in_effect {
        my $level = shift // 0;
        my $hinthash = (caller($level))[10];
        return $hinthash->{"myint/in_effect"};
    }

    1;

As pragmata are implemented as modules, like any other module, C<use myint;>
becomes

    BEGIN {
        require myint;
        myint->import();
    }

and C<no myint;> is

    BEGIN {
        require myint;
        myint->unimport();
    }

Hence the C<import> and C<unimport> routines are called at B<compile time>
for the user's code.

User pragmata store their state by writing to the magical hash C<%^H>,
hence these two routines manipulate it. The state information in C<%^H> is
stored in the optree, and can be retrieved read-only at runtime with C<caller()>,
at index 10 of the list of returned results. In the example pragma, retrieval
is encapsulated into the routine C<in_effect()>, which takes as parameter
the number of call frames to go up to find the value of the pragma in the
user's script. This uses C<caller()> to determine the value of
C<$^H{"myint/in_effect"}> when each line of the user's script was called, and
therefore provide the correct semantics in the subroutine implementing the
overloaded addition.

=head1 Key naming

There is only a single C<%^H>, but arbitrarily many modules that want
to use its scoping semantics.  To avoid stepping on each other's toes,
they need to be sure to use different keys in the hash.  It is therefore
conventional for a module to use only keys that begin with the module's
name (the name of its main package) and a "/" character.  After this
module-identifying prefix, the rest of the key is entirely up to the
module: it may include any characters whatsoever.  For example, a module
C<Foo::Bar> should use keys such as C<Foo::Bar/baz> and C<Foo::Bar/$%/_!>.
Modules following this convention all play nicely with each other.

The Perl core uses a handful of keys in C<%^H> which do not follow this
convention, because they predate it.  Keys that follow the convention
won't conflict with the core's historical keys.

=head1 Implementation details

The optree is shared between threads.  This means there is a possibility that
the optree will outlive the particular thread (and therefore the interpreter
instance) that created it, so true Perl scalars cannot be stored in the
optree.  Instead a compact form is used, which can only store values that are
integers (signed and unsigned), strings or C<undef> - references and
floating point values are stringified.  If you need to store multiple values
or complex structures, you should serialise them, for example with C<pack>.
The deletion of a hash key from C<%^H> is recorded, and as ever can be
distinguished from the existence of a key with value C<undef> with
C<exists>.

B<Don't> attempt to store references to data structures as integers which
are retrieved via C<caller> and converted back, as this will not be threadsafe.
Accesses would be to the structure without locking (which is not safe for
Perl's scalars), and either the structure has to leak, or it has to be
freed when its creating thread terminates, which may be before the optree
referencing it is deleted, if other threads outlive it.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              usr/local/lib/perl5/5.40.0/pod/perlqnx.pod                                                          0000644 0000000 0000000 00000015045 14714567415 016472  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # vim: syntax=pod

If you read this file _as_is_, just ignore the funny characters you see.
It is written in the POD format (see pod/perlpod.pod) which is specially
designed to be readable as is.

=head1 NAME

perlqnx - Perl version 5 on QNX

=head1 DESCRIPTION

As of perl5.7.2 all tests pass under:

  QNX 4.24G
  Watcom 10.6 with Beta/970211.wcc.update.tar.F
  socket3r.lib Nov21 1996.

As of perl5.8.1 there is at least one test still failing.

Some tests may complain under known circumstances.

See below and hints/qnx.sh for more information.

Under QNX 6.2.0 there are still a few tests which fail.
See below and hints/qnx.sh for more information.

=head2 Required Software for Compiling Perl on QNX4

As with many unix ports, this one depends on a few "standard"
unix utilities which are not necessarily standard for QNX4.

=over 4

=item /bin/sh

This is used heavily by Configure and then by
perl itself. QNX4's version is fine, but Configure
will choke on the 16-bit version, so if you are
running QNX 4.22, link /bin/sh to /bin32/ksh

=item ar

This is the standard unix library builder.
We use wlib. With Watcom 10.6, when wlib is
linked as "ar", it behaves like ar and all is
fine. Under 9.5, a cover is required. One is
included in ../qnx

=item nm

This is used (optionally) by configure to list
the contents of libraries. I will generate
a cover function on the fly in the UU directory.

