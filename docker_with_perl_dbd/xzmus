        .type = ANYOF,
        .arg_len = EXTRA_SIZE(tregnode_ANYOFD),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #20 op ANYOFL */
        .type = ANYOF,
        .arg_len = EXTRA_SIZE(tregnode_ANYOFL),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #21 op ANYOFPOSIXL */
        .type = ANYOF,
        .arg_len = EXTRA_SIZE(tregnode_ANYOFPOSIXL),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #22 op ANYOFH */
        .type = ANYOFH,
        .arg_len = EXTRA_SIZE(tregnode_ANYOFH),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #23 op ANYOFHb */
        .type = ANYOFH,
        .arg_len = EXTRA_SIZE(tregnode_ANYOFHb),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #24 op ANYOFHr */
        .type = ANYOFH,
        .arg_len = EXTRA_SIZE(tregnode_ANYOFHr),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #25 op ANYOFHs */
        .type = ANYOFH,
        .arg_len = EXTRA_SIZE(tregnode_ANYOFHs),
        .arg_len_varies = 1,
        .off_by_arg = 0
    },
    {
        /* #26 op ANYOFR */
        .type = ANYOFR,
        .arg_len = EXTRA_SIZE(tregnode_ANYOFR),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #27 op ANYOFRb */
        .type = ANYOFR,
        .arg_len = EXTRA_SIZE(tregnode_ANYOFRb),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #28 op ANYOFHbbm */
        .type = ANYOFHbbm,
        .arg_len = EXTRA_SIZE(tregnode_ANYOFHbbm),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #29 op ANYOFM */
        .type = ANYOFM,
        .arg_len = EXTRA_SIZE(tregnode_ANYOFM),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #30 op NANYOFM */
        .type = ANYOFM,
        .arg_len = EXTRA_SIZE(tregnode_NANYOFM),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #31 op POSIXD */
        .type = POSIXD,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #32 op POSIXL */
        .type = POSIXD,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #33 op POSIXU */
        .type = POSIXD,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #34 op POSIXA */
        .type = POSIXD,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #35 op NPOSIXD */
        .type = NPOSIXD,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #36 op NPOSIXL */
        .type = NPOSIXD,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #37 op NPOSIXU */
        .type = NPOSIXD,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #38 op NPOSIXA */
        .type = NPOSIXD,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #39 op CLUMP */
        .type = CLUMP,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #40 op BRANCH */
        .type = BRANCH,
        .arg_len = EXTRA_SIZE(tregnode_BRANCH),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #41 op EXACT */
        .type = EXACT,
        .arg_len = 0,
        .arg_len_varies = 1,
        .off_by_arg = 0
    },
    {
        /* #42 op LEXACT */
        .type = EXACT,
        .arg_len = EXTRA_SIZE(tregnode_LEXACT),
        .arg_len_varies = 1,
        .off_by_arg = 0
    },
    {
        /* #43 op EXACTL */
        .type = EXACT,
        .arg_len = 0,
        .arg_len_varies = 1,
        .off_by_arg = 0
    },
    {
        /* #44 op EXACTF */
        .type = EXACT,
        .arg_len = 0,
        .arg_len_varies = 1,
        .off_by_arg = 0
    },
    {
        /* #45 op EXACTFL */
        .type = EXACT,
        .arg_len = 0,
        .arg_len_varies = 1,
        .off_by_arg = 0
    },
    {
        /* #46 op EXACTFU */
        .type = EXACT,
        .arg_len = 0,
        .arg_len_varies = 1,
        .off_by_arg = 0
    },
    {
        /* #47 op EXACTFAA */
        .type = EXACT,
        .arg_len = 0,
        .arg_len_varies = 1,
        .off_by_arg = 0
    },
    {
        /* #48 op EXACTFAA_NO_TRIE */
        .type = EXACT,
        .arg_len = 0,
        .arg_len_varies = 1,
        .off_by_arg = 0
    },
    {
        /* #49 op EXACTFUP */
        .type = EXACT,
        .arg_len = 0,
        .arg_len_varies = 1,
        .off_by_arg = 0
    },
    {
        /* #50 op EXACTFLU8 */
        .type = EXACT,
        .arg_len = 0,
        .arg_len_varies = 1,
        .off_by_arg = 0
    },
    {
        /* #51 op EXACT_REQ8 */
        .type = EXACT,
        .arg_len = 0,
        .arg_len_varies = 1,
        .off_by_arg = 0
    },
    {
        /* #52 op LEXACT_REQ8 */
        .type = EXACT,
        .arg_len = EXTRA_SIZE(tregnode_LEXACT_REQ8),
        .arg_len_varies = 1,
        .off_by_arg = 0
    },
    {
        /* #53 op EXACTFU_REQ8 */
        .type = EXACT,
        .arg_len = 0,
        .arg_len_varies = 1,
        .off_by_arg = 0
    },
    {
        /* #54 op EXACTFU_S_EDGE */
        .type = EXACT,
        .arg_len = 0,
        .arg_len_varies = 1,
        .off_by_arg = 0
    },
    {
        /* #55 op LNBREAK */
        .type = LNBREAK,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #56 op TRIE */
        .type = TRIE,
        .arg_len = EXTRA_SIZE(tregnode_TRIE),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #57 op TRIEC */
        .type = TRIE,
        .arg_len = EXTRA_SIZE(tregnode_TRIEC),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #58 op AHOCORASICK */
        .type = TRIE,
        .arg_len = EXTRA_SIZE(tregnode_AHOCORASICK),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #59 op AHOCORASICKC */
        .type = TRIE,
        .arg_len = EXTRA_SIZE(tregnode_AHOCORASICKC),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #60 op NOTHING */
        .type = NOTHING,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #61 op TAIL */
        .type = NOTHING,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #62 op STAR */
        .type = STAR,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #63 op PLUS */
        .type = PLUS,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #64 op CURLY */
        .type = CURLY,
        .arg_len = EXTRA_SIZE(tregnode_CURLY),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #65 op CURLYN */
        .type = CURLY,
        .arg_len = EXTRA_SIZE(tregnode_CURLYN),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #66 op CURLYM */
        .type = CURLY,
        .arg_len = EXTRA_SIZE(tregnode_CURLYM),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #67 op CURLYX */
        .type = CURLY,
        .arg_len = EXTRA_SIZE(tregnode_CURLYX),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #68 op WHILEM */
        .type = WHILEM,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #69 op OPEN */
        .type = OPEN,
        .arg_len = EXTRA_SIZE(tregnode_OPEN),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #70 op CLOSE */
        .type = CLOSE,
        .arg_len = EXTRA_SIZE(tregnode_CLOSE),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #71 op SROPEN */
        .type = SROPEN,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #72 op SRCLOSE */
        .type = SRCLOSE,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #73 op REF */
        .type = REF,
        .arg_len = EXTRA_SIZE(tregnode_REF),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #74 op REFF */
        .type = REF,
        .arg_len = EXTRA_SIZE(tregnode_REFF),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #75 op REFFL */
        .type = REF,
        .arg_len = EXTRA_SIZE(tregnode_REFFL),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #76 op REFFU */
        .type = REF,
        .arg_len = EXTRA_SIZE(tregnode_REFFU),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #77 op REFFA */
        .type = REF,
        .arg_len = EXTRA_SIZE(tregnode_REFFA),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #78 op REFN */
        .type = REF,
        .arg_len = EXTRA_SIZE(tregnode_REFN),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #79 op REFFN */
        .type = REF,
        .arg_len = EXTRA_SIZE(tregnode_REFFN),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #80 op REFFLN */
        .type = REF,
        .arg_len = EXTRA_SIZE(tregnode_REFFLN),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #81 op REFFUN */
        .type = REF,
        .arg_len = EXTRA_SIZE(tregnode_REFFUN),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #82 op REFFAN */
        .type = REF,
        .arg_len = EXTRA_SIZE(tregnode_REFFAN),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #83 op LONGJMP */
        .type = LONGJMP,
        .arg_len = EXTRA_SIZE(tregnode_LONGJMP),
        .arg_len_varies = 0,
        .off_by_arg = 1
    },
    {
        /* #84 op BRANCHJ */
        .type = BRANCHJ,
        .arg_len = EXTRA_SIZE(tregnode_BRANCHJ),
        .arg_len_varies = 0,
        .off_by_arg = 1
    },
    {
        /* #85 op IFMATCH */
        .type = BRANCHJ,
        .arg_len = EXTRA_SIZE(tregnode_IFMATCH),
        .arg_len_varies = 0,
        .off_by_arg = 1
    },
    {
        /* #86 op UNLESSM */
        .type = BRANCHJ,
        .arg_len = EXTRA_SIZE(tregnode_UNLESSM),
        .arg_len_varies = 0,
        .off_by_arg = 1
    },
    {
        /* #87 op SUSPEND */
        .type = BRANCHJ,
        .arg_len = EXTRA_SIZE(tregnode_SUSPEND),
        .arg_len_varies = 0,
        .off_by_arg = 1
    },
    {
        /* #88 op IFTHEN */
        .type = BRANCHJ,
        .arg_len = EXTRA_SIZE(tregnode_IFTHEN),
        .arg_len_varies = 0,
        .off_by_arg = 1
    },
    {
        /* #89 op GROUPP */
        .type = GROUPP,
        .arg_len = EXTRA_SIZE(tregnode_GROUPP),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #90 op EVAL */
        .type = EVAL,
        .arg_len = EXTRA_SIZE(tregnode_EVAL),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #91 op MINMOD */
        .type = MINMOD,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #92 op LOGICAL */
        .type = LOGICAL,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #93 op RENUM */
        .type = BRANCHJ,
        .arg_len = EXTRA_SIZE(tregnode_RENUM),
        .arg_len_varies = 0,
        .off_by_arg = 1
    },
    {
        /* #94 op GOSUB */
        .type = GOSUB,
        .arg_len = EXTRA_SIZE(tregnode_GOSUB),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #95 op GROUPPN */
        .type = GROUPPN,
        .arg_len = EXTRA_SIZE(tregnode_GROUPPN),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #96 op INSUBP */
        .type = INSUBP,
        .arg_len = EXTRA_SIZE(tregnode_INSUBP),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #97 op DEFINEP */
        .type = DEFINEP,
        .arg_len = EXTRA_SIZE(tregnode_DEFINEP),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #98 op ENDLIKE */
        .type = ENDLIKE,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #99 op OPFAIL */
        .type = ENDLIKE,
        .arg_len = EXTRA_SIZE(tregnode_OPFAIL),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #100 op ACCEPT */
        .type = ENDLIKE,
        .arg_len = EXTRA_SIZE(tregnode_ACCEPT),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #101 op VERB */
        .type = VERB,
        .arg_len = EXTRA_SIZE(tregnode_VERB),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #102 op PRUNE */
        .type = VERB,
        .arg_len = EXTRA_SIZE(tregnode_PRUNE),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #103 op MARKPOINT */
        .type = VERB,
        .arg_len = EXTRA_SIZE(tregnode_MARKPOINT),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #104 op SKIP */
        .type = VERB,
        .arg_len = EXTRA_SIZE(tregnode_SKIP),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #105 op COMMIT */
        .type = VERB,
        .arg_len = EXTRA_SIZE(tregnode_COMMIT),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #106 op CUTGROUP */
        .type = VERB,
        .arg_len = EXTRA_SIZE(tregnode_CUTGROUP),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #107 op KEEPS */
        .type = KEEPS,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #108 op LOOKBEHIND_END */
        .type = END,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #109 op OPTIMIZED */
        .type = NOTHING,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #110 op PSEUDO */
        .type = PSEUDO,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #111 op REGEX_SET */
        .type = REGEX_SET,
        .arg_len = EXTRA_SIZE(tregnode_REGEX_SET),
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #112 state TRIE_next */
        .type = TRIE,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #113 state TRIE_next_fail */
        .type = TRIE,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #114 state EVAL_B */
        .type = EVAL,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #115 state EVAL_B_fail */
        .type = EVAL,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #116 state EVAL_postponed_AB */
        .type = EVAL,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #117 state EVAL_postponed_AB_fail */
        .type = EVAL,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #118 state CURLYX_end */
        .type = CURLYX,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #119 state CURLYX_end_fail */
        .type = CURLYX,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #120 state WHILEM_A_pre */
        .type = WHILEM,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #121 state WHILEM_A_pre_fail */
        .type = WHILEM,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #122 state WHILEM_A_min */
        .type = WHILEM,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #123 state WHILEM_A_min_fail */
        .type = WHILEM,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #124 state WHILEM_A_max */
        .type = WHILEM,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #125 state WHILEM_A_max_fail */
        .type = WHILEM,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #126 state WHILEM_B_min */
        .type = WHILEM,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #127 state WHILEM_B_min_fail */
        .type = WHILEM,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #128 state WHILEM_B_max */
        .type = WHILEM,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #129 state WHILEM_B_max_fail */
        .type = WHILEM,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #130 state BRANCH_next */
        .type = BRANCH,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #131 state BRANCH_next_fail */
        .type = BRANCH,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #132 state CURLYM_A */
        .type = CURLYM,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #133 state CURLYM_A_fail */
        .type = CURLYM,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #134 state CURLYM_B */
        .type = CURLYM,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #135 state CURLYM_B_fail */
        .type = CURLYM,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #136 state IFMATCH_A */
        .type = IFMATCH,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #137 state IFMATCH_A_fail */
        .type = IFMATCH,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #138 state CURLY_B_min */
        .type = CURLY,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #139 state CURLY_B_min_fail */
        .type = CURLY,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #140 state CURLY_B_max */
        .type = CURLY,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #141 state CURLY_B_max_fail */
        .type = CURLY,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #142 state COMMIT_next */
        .type = COMMIT,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #143 state COMMIT_next_fail */
        .type = COMMIT,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #144 state MARKPOINT_next */
        .type = MARKPOINT,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #145 state MARKPOINT_next_fail */
        .type = MARKPOINT,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #146 state SKIP_next */
        .type = SKIP,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #147 state SKIP_next_fail */
        .type = SKIP,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #148 state CUTGROUP_next */
        .type = CUTGROUP,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #149 state CUTGROUP_next_fail */
        .type = CUTGROUP,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #150 state KEEPS_next */
        .type = KEEPS,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #151 state KEEPS_next_fail */
        .type = KEEPS,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #152 state REF_next */
        .type = REF,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    },
    {
        /* #153 state REF_next_fail */
        .type = REF,
        .arg_len = 0,
        .arg_len_varies = 0,
        .off_by_arg = 0
    }
};
#endif /* DOINIT */

/* PL_reg_extflags_name[] - Opcode/state names in string form, for debugging */

#ifndef DOINIT
EXTCONST char * PL_reg_extflags_name[];
#else
EXTCONST char * const PL_reg_extflags_name[] = {
	/* Bits in extflags defined: 11111111111111110000111111111111 */
	"MULTILINE",        /* 0x00000001 */
	"SINGLELINE",       /* 0x00000002 */
	"FOLD",             /* 0x00000004 */
	"EXTENDED",         /* 0x00000008 */
	"EXTENDED_MORE",    /* 0x00000010 */
	"NOCAPTURE",        /* 0x00000020 */
	"KEEPCOPY",         /* 0x00000040 */
	"CHARSET0",         /* 0x00000080 : "CHARSET" - 0x00000380 */
	"CHARSET1",         /* 0x00000100 : "CHARSET" - 0x00000380 */
	"CHARSET2",         /* 0x00000200 : "CHARSET" - 0x00000380 */
	"STRICT",           /* 0x00000400 */
	"SPLIT",            /* 0x00000800 */
	"UNUSED_BIT_12",    /* 0x00001000 */
	"UNUSED_BIT_13",    /* 0x00002000 */
	"UNUSED_BIT_14",    /* 0x00004000 */
	"UNUSED_BIT_15",    /* 0x00008000 */
	"NO_INPLACE_SUBST", /* 0x00010000 */
	"EVAL_SEEN",        /* 0x00020000 */
	"UNBOUNDED_QUANTIFIER_SEEN",/* 0x00040000 */
	"CHECK_ALL",        /* 0x00080000 */
	"MATCH_UTF8",       /* 0x00100000 */
	"USE_INTUIT_NOML",  /* 0x00200000 */
	"USE_INTUIT_ML",    /* 0x00400000 */
	"INTUIT_TAIL",      /* 0x00800000 */
	"IS_ANCHORED",      /* 0x01000000 */
	"COPY_DONE",        /* 0x02000000 */
	"TAINTED_SEEN",     /* 0x04000000 */
	"TAINTED",          /* 0x08000000 */
	"START_ONLY",       /* 0x10000000 */
	"SKIPWHITE",        /* 0x20000000 */
	"WHITE",            /* 0x40000000 */
	"NULL",             /* 0x80000000 */
};
#endif /* DOINIT */

#ifdef DEBUGGING
#  define REG_EXTFLAGS_NAME_SIZE 32
#endif

/* PL_reg_intflags_name[] - Opcode/state names in string form, for debugging */

#ifndef DOINIT
EXTCONST char * PL_reg_intflags_name[];
#else
EXTCONST char * const PL_reg_intflags_name[] = {
	"SKIP",                       /* (1<< 0) - 0x00000001 - PREGf_SKIP */
	"IMPLICIT",                   /* (1<< 1) - 0x00000002 - PREGf_IMPLICIT -  Converted .* to ^.*  */
