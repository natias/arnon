=over 4

=item C<Perl_acos>

=item C<Perl_asin>

=item C<Perl_atan>

=item C<Perl_atan2>

=item C<Perl_ceil>

=item C<Perl_cos>

=item C<Perl_cosh>

=item C<Perl_exp>

=item C<Perl_floor>

=item C<Perl_fmod>

=item C<Perl_frexp>

=item C<Perl_isfinite>

=item C<Perl_isinf>

=item C<Perl_isnan>

=item C<Perl_ldexp>

=item C<Perl_log>

=item C<Perl_log10>

=item C<Perl_modf>

=item C<Perl_pow>

=item C<Perl_sin>

=item C<Perl_sinh>

=item C<Perl_sqrt>

=item C<Perl_tan>

=item C<Perl_tanh>
X<Perl_acos>X<Perl_asin>X<Perl_atan>X<Perl_atan2>X<Perl_ceil>X<Perl_cos>X<Perl_cosh>X<Perl_exp>X<Perl_floor>X<Perl_fmod>X<Perl_frexp>X<Perl_isfinite>X<Perl_isinf>X<Perl_isnan>X<Perl_ldexp>X<Perl_log>X<Perl_log10>X<Perl_modf>X<Perl_pow>X<Perl_sin>X<Perl_sinh>X<Perl_sqrt>X<Perl_tan>X<Perl_tanh>

These perform the corresponding mathematical operation on the operand(s), using
the libc function designed for the task that has just enough precision for an
NV on this platform.  If no such function with sufficient precision exists,
the highest precision one available is used.

=over 3

 NV  Perl_acos    (NV x)
 NV  Perl_asin    (NV x)
 NV  Perl_atan    (NV x)
 NV  Perl_atan2   (NV x, NV y)
 NV  Perl_ceil    (NV x)
 NV  Perl_cos     (NV x)
 NV  Perl_cosh    (NV x)
 NV  Perl_exp     (NV x)
 NV  Perl_floor   (NV x)
 NV  Perl_fmod    (NV x, NV y)
 NV  Perl_frexp   (NV x, int *exp)
 IV  Perl_isfinite(NV x)
 IV  Perl_isinf   (NV x)
 IV  Perl_isnan   (NV x)
 NV  Perl_ldexp   (NV x, int exp)
 NV  Perl_log     (NV x)
 NV  Perl_log10   (NV x)
 NV  Perl_modf    (NV x, NV *iptr)
 NV  Perl_pow     (NV x, NV y)
 NV  Perl_sin     (NV x)
 NV  Perl_sinh    (NV x)
 NV  Perl_sqrt    (NV x)
 NV  Perl_tan     (NV x)
 NV  Perl_tanh    (NV x)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<Perl_signbit>
X<Perl_signbit>

NOTE: C<Perl_signbit> is B<experimental> and may change or be
removed without notice.

Return a non-zero integer if the sign bit on an NV is set, and 0 if
it is not.

If F<Configure> detects this system has a C<signbit()> that will work with
our NVs, then we just use it via the C<#define> in F<perl.h>.  Otherwise,
fall back on this implementation.  The main use of this function
is catching C<-0.0>.

C<Configure> notes:  This function is called C<'Perl_signbit'> instead of a
plain C<'signbit'> because it is easy to imagine a system having a C<signbit()>
function or macro that doesn't happen to work with our particular choice
of NVs.  We shouldn't just re-C<#define> C<signbit> as C<Perl_signbit> and expect
the standard system headers to be happy.  Also, this is a no-context
function (no C<pTHX_>) because C<Perl_signbit()> is usually re-C<#defined> in
F<perl.h> as a simple macro call to the system's C<signbit()>.
Users should just always call C<Perl_signbit()>.

=over 3

 int  Perl_signbit(NV f)

=back

=back

=for hackers
Found in file numeric.c

=over 4

=item C<PL_hexdigit>
X<PL_hexdigit>

This array, indexed by an integer, converts that value into the character that
represents it.  For example, if the input is 8, the return will be a string
whose first character is '8'.  What is actually returned is a pointer into a
string.  All you are interested in is the first character of that string.  To
get uppercase letters (for the values 10..15), add 16 to the index.  Hence,
C<PL_hexdigit[11]> is C<'b'>, and C<PL_hexdigit[11+16]> is C<'B'>.  Adding 16
to an index whose representation is '0'..'9' yields the same as not adding 16.
Indices outside the range 0..31 result in (bad) undedefined behavior.

=back

=for hackers
Found in file perl.h

=over 4

=item C<READ_XDIGIT>
X<READ_XDIGIT>

Returns the value of an ASCII-range hex digit and advances the string pointer.
Behaviour is only well defined when isXDIGIT(*str) is true.

=over 3

 U8  READ_XDIGIT(char str*)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<scan_bin>
X<scan_bin>

For backwards compatibility.  Use C<grok_bin> instead.

=over 3

 NV  scan_bin(const char *start, STRLEN len, STRLEN *retlen)

=back

=back

=for hackers
Found in file numeric.c

=over 4

=item C<scan_hex>
X<scan_hex>

For backwards compatibility.  Use C<grok_hex> instead.

=over 3

 NV  scan_hex(const char *start, STRLEN len, STRLEN *retlen)

=back

=back

=for hackers
Found in file numeric.c

=over 4

=item C<scan_oct>
X<scan_oct>

For backwards compatibility.  Use C<grok_oct> instead.

=over 3

 NV  scan_oct(const char *start, STRLEN len, STRLEN *retlen)

=back

=back

=for hackers
Found in file numeric.c

=over 4

=item C<seedDrand01>
X<seedDrand01>

This symbol defines the macro to be used in seeding the
random number generator (see C<L</Drand01>>).

=over 3

 void  seedDrand01(Rand_seed_t x)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<Strtod>
X<Strtod>

This is a synonym for L</my_strtod>.

=over 3

 NV  Strtod(NN const char * const s, NULLOK char ** e)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<Strtol>
X<Strtol>

Platform and configuration independent C<strtol>.  This expands to the
appropriate C<strotol>-like function based on the platform and F<Configure>
options>.  For example it could expand to C<strtoll> or C<strtoq> instead of
C<strtol>.

=over 3

 NV  Strtol(NN const char * const s, NULLOK char ** e, int base)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<Strtoul>
X<Strtoul>

Platform and configuration independent C<strtoul>.  This expands to the
appropriate C<strotoul>-like function based on the platform and F<Configure>
options>.  For example it could expand to C<strtoull> or C<strtouq> instead of
C<strtoul>.

=over 3

 NV  Strtoul(NN const char * const s, NULLOK char ** e, int base)

=back

=back

=for hackers
Found in file perl.h

=head1 Optrees
X<CALL_CHECKER_REQUIRE_GV>X<OPf_KIDS>X<OPpEARLY_CV>X<OPpENTERSUB_AMPER>X<RV2CVOPCV_MARK_EARLY>X<RV2CVOPCV_RETURN_NAME_GV>

=over 4

=item C<alloccopstash>
X<alloccopstash>

NOTE: C<alloccopstash> is B<experimental> and may change or be
removed without notice.

Available only under threaded builds, this function allocates an entry in
C<PL_stashpad> for the stash passed to it.

=over 3

 PADOFFSET  alloccopstash(HV *hv)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<BINOP>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<block_end>
X<block_end>

Handles compile-time scope exit.  C<floor>
is the savestack index returned by
C<block_start>, and C<seq> is the body of the block.  Returns the block,
possibly modified.

=over 3

 OP *  block_end(I32 floor, OP *seq)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<block_start>
X<block_start>

Handles compile-time scope entry.
Arranges for hints to be restored on block
exit and also handles pad sequence numbers to make lexical variables scope
right.  Returns a savestack index for use with C<block_end>.

=over 3

 int  block_start(int full)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<ck_entersub_args_list>
X<ck_entersub_args_list>

Performs the default fixup of the arguments part of an C<entersub>
op tree.  This consists of applying list context to each of the
argument ops.  This is the standard treatment used on a call marked
with C<&>, or a method call, or a call through a subroutine reference,
or any other call where the callee can't be identified at compile time,
or a call where the callee has no prototype.

=over 3

 OP *  ck_entersub_args_list(OP *entersubop)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<ck_entersub_args_proto>
X<ck_entersub_args_proto>

Performs the fixup of the arguments part of an C<entersub> op tree
based on a subroutine prototype.  This makes various modifications to
the argument ops, from applying context up to inserting C<refgen> ops,
and checking the number and syntactic types of arguments, as directed by
the prototype.  This is the standard treatment used on a subroutine call,
not marked with C<&>, where the callee can be identified at compile time
and has a prototype.

C<protosv> supplies the subroutine prototype to be applied to the call.
It may be a normal defined scalar, of which the string value will be used.
Alternatively, for convenience, it may be a subroutine object (a C<CV*>
that has been cast to C<SV*>) which has a prototype.  The prototype
supplied, in whichever form, does not need to match the actual callee
referenced by the op tree.

If the argument ops disagree with the prototype, for example by having
an unacceptable number of arguments, a valid op tree is returned anyway.
The error is reflected in the parser state, normally resulting in a single
exception at the top level of parsing which covers all the compilation
errors that occurred.  In the error message, the callee is referred to
by the name defined by the C<namegv> parameter.

=over 3

 OP *  ck_entersub_args_proto(OP *entersubop, GV *namegv,
                              SV *protosv)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<ck_entersub_args_proto_or_list>
X<ck_entersub_args_proto_or_list>

Performs the fixup of the arguments part of an C<entersub> op tree either
based on a subroutine prototype or using default list-context processing.
This is the standard treatment used on a subroutine call, not marked
with C<&>, where the callee can be identified at compile time.

C<protosv> supplies the subroutine prototype to be applied to the call,
or indicates that there is no prototype.  It may be a normal scalar,
in which case if it is defined then the string value will be used
as a prototype, and if it is undefined then there is no prototype.
Alternatively, for convenience, it may be a subroutine object (a C<CV*>
that has been cast to C<SV*>), of which the prototype will be used if it
has one.  The prototype (or lack thereof) supplied, in whichever form,
does not need to match the actual callee referenced by the op tree.

If the argument ops disagree with the prototype, for example by having
an unacceptable number of arguments, a valid op tree is returned anyway.
The error is reflected in the parser state, normally resulting in a single
exception at the top level of parsing which covers all the compilation
errors that occurred.  In the error message, the callee is referred to
by the name defined by the C<namegv> parameter.

=over 3

 OP *  ck_entersub_args_proto_or_list(OP *entersubop, GV *namegv,
                                      SV *protosv)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<cv_const_sv>
X<cv_const_sv>

If C<cv> is a constant sub eligible for inlining, returns the constant
value returned by the sub.  Otherwise, returns C<NULL>.

Constant subs can be created with C<newCONSTSUB> or as described in
L<perlsub/"Constant Functions">.

=over 3

 SV *  cv_const_sv(const CV * const cv)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<cv_get_call_checker>
X<cv_get_call_checker>

The original form of L</cv_get_call_checker_flags>, which does not return
checker flags.  When using a checker function returned by this function,
it is only safe to call it with a genuine GV as its C<namegv> argument.

=over 3

 void  cv_get_call_checker(CV *cv, Perl_call_checker *ckfun_p,
                           SV **ckobj_p)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<cv_get_call_checker_flags>
X<cv_get_call_checker_flags>

Retrieves the function that will be used to fix up a call to C<cv>.
Specifically, the function is applied to an C<entersub> op tree for a
subroutine call, not marked with C<&>, where the callee can be identified
at compile time as C<cv>.

The C-level function pointer is returned in C<*ckfun_p>, an SV argument
for it is returned in C<*ckobj_p>, and control flags are returned in
C<*ckflags_p>.  The function is intended to be called in this manner:

 entersubop = (*ckfun_p)(aTHX_ entersubop, namegv, (*ckobj_p));

In this call, C<entersubop> is a pointer to the C<entersub> op,
which may be replaced by the check function, and C<namegv> supplies
the name that should be used by the check function to refer
to the callee of the C<entersub> op if it needs to emit any diagnostics.
It is permitted to apply the check function in non-standard situations,
such as to a call to a different subroutine or to a method call.

C<namegv> may not actually be a GV.  If the C<CALL_CHECKER_REQUIRE_GV>
bit is clear in C<*ckflags_p>, it is permitted to pass a CV or other SV
instead, anything that can be used as the first argument to L</cv_name>.
If the C<CALL_CHECKER_REQUIRE_GV> bit is set in C<*ckflags_p> then the
check function requires C<namegv> to be a genuine GV.

By default, the check function is
L<Perl_ck_entersub_args_proto_or_list|/ck_entersub_args_proto_or_list>,
the SV parameter is C<cv> itself, and the C<CALL_CHECKER_REQUIRE_GV>
flag is clear.  This implements standard prototype processing.  It can
be changed, for a particular subroutine, by L</cv_set_call_checker_flags>.

If the C<CALL_CHECKER_REQUIRE_GV> bit is set in C<gflags> then it
indicates that the caller only knows about the genuine GV version of
C<namegv>, and accordingly the corresponding bit will always be set in
C<*ckflags_p>, regardless of the check function's recorded requirements.
If the C<CALL_CHECKER_REQUIRE_GV> bit is clear in C<gflags> then it
indicates the caller knows about the possibility of passing something
other than a GV as C<namegv>, and accordingly the corresponding bit may
be either set or clear in C<*ckflags_p>, indicating the check function's
recorded requirements.

C<gflags> is a bitset passed into C<cv_get_call_checker_flags>, in which
only the C<CALL_CHECKER_REQUIRE_GV> bit currently has a defined meaning
(for which see above).  All other bits should be clear.

=over 3

 void  cv_get_call_checker_flags(CV *cv, U32 gflags,
                                 Perl_call_checker *ckfun_p,
                                 SV **ckobj_p, U32 *ckflags_p)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<cv_set_call_checker>
X<cv_set_call_checker>

The original form of L</cv_set_call_checker_flags>, which passes it the
C<CALL_CHECKER_REQUIRE_GV> flag for backward-compatibility.  The effect
of that flag setting is that the check function is guaranteed to get a
genuine GV as its C<namegv> argument.

=over 3

 void  cv_set_call_checker(CV *cv, Perl_call_checker ckfun,
                           SV *ckobj)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<cv_set_call_checker_flags>
X<cv_set_call_checker_flags>

Sets the function that will be used to fix up a call to C<cv>.
Specifically, the function is applied to an C<entersub> op tree for a
subroutine call, not marked with C<&>, where the callee can be identified
at compile time as C<cv>.

The C-level function pointer is supplied in C<ckfun>, an SV argument for
it is supplied in C<ckobj>, and control flags are supplied in C<ckflags>.
The function should be defined like this:

    STATIC OP * ckfun(pTHX_ OP *op, GV *namegv, SV *ckobj)

It is intended to be called in this manner:

    entersubop = ckfun(aTHX_ entersubop, namegv, ckobj);

In this call, C<entersubop> is a pointer to the C<entersub> op,
which may be replaced by the check function, and C<namegv> supplies
the name that should be used by the check function to refer
to the callee of the C<entersub> op if it needs to emit any diagnostics.
It is permitted to apply the check function in non-standard situations,
such as to a call to a different subroutine or to a method call.

C<namegv> may not actually be a GV.  For efficiency, perl may pass a
CV or other SV instead.  Whatever is passed can be used as the first
argument to L</cv_name>.  You can force perl to pass a GV by including
C<CALL_CHECKER_REQUIRE_GV> in the C<ckflags>.

C<ckflags> is a bitset, in which only the C<CALL_CHECKER_REQUIRE_GV>
bit currently has a defined meaning (for which see above).  All other
bits should be clear.

The current setting for a particular CV can be retrieved by
L</cv_get_call_checker_flags>.

=over 3

 void  cv_set_call_checker_flags(CV *cv, Perl_call_checker ckfun,
                                 SV *ckobj, U32 ckflags)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<finalize_optree>
X<finalize_optree>

This function finalizes the optree.  Should be called directly after
the complete optree is built.  It does some additional
checking which can't be done in the normal C<ck_>xxx functions and makes
the tree thread-safe.

=over 3

 void  finalize_optree(OP *o)

=back

=back

=for hackers
Found in file peep.c

=over 4

=item C<forbid_outofblock_ops>
X<forbid_outofblock_ops>

NOTE: C<forbid_outofblock_ops> is B<experimental> and may change or be
removed without notice.

Checks an optree that implements a block, to ensure there are no control-flow
ops that attempt to leave the block.  Any C<OP_RETURN> is forbidden, as is any
C<OP_GOTO>. Loops are analysed, so any LOOPEX op (C<OP_NEXT>, C<OP_LAST> or
C<OP_REDO>) that affects a loop that contains it within the block are
permitted, but those that do not are forbidden.

If any of these forbidden constructions are detected, an exception is thrown
by using the op name and the blockname argument to construct a suitable
message.

This function alone is not sufficient to ensure the optree does not perform
any of these forbidden activities during runtime, as it might call a different
function that performs a non-local LOOPEX, or a string-eval() that performs a
C<goto>, or various other things. It is intended purely as a compile-time
check for those that could be detected statically. Additional runtime checks
may be required depending on the circumstance it is used for.

Note currently that I<all> C<OP_GOTO> ops are forbidden, even in cases where
they might otherwise be safe to execute.  This may be permitted in a later
version.

=over 3

 void  forbid_outofblock_ops(OP *o, const char *blockname)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<LINKLIST>
X<LINKLIST>

Given the root of an optree, link the tree in execution order using the
C<op_next> pointers and return the first op executed.  If this has
already been done, it will not be redone, and C<< o->op_next >> will be
returned.  If C<< o->op_next >> is not already set, C<o> should be at
least an C<UNOP>.

=over 3

 OP*  LINKLIST(OP *o)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<LISTOP>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<LOGOP>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<LOOP>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<newANONATTRSUB>
X<newANONATTRSUB>

Construct a nameless (anonymous) Perl subroutine, also performing some
surrounding jobs.

This is the same as L<perlintern/C<newATTRSUB_x>> with its C<o_is_gv> parameter
set to FALSE, and its C<o> parameter to NULL.
For more details, see L<perlintern/C<newATTRSUB_x>>.

=over 3

 OP *  newANONATTRSUB(I32 floor, OP *proto, OP *attrs, OP *block)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newANONHASH>
X<newANONHASH>

Constructs, checks, and returns an anonymous hash op.

=over 3

 OP *  newANONHASH(OP *o)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newANONLIST>
X<newANONLIST>

Constructs, checks, and returns an anonymous list op.

=over 3

 OP *  newANONLIST(OP *o)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newANONSUB>
X<newANONSUB>

Construct a nameless (anonymous) Perl subroutine without attributes, also
performing some surrounding jobs.

This is the same as L<perlintern/C<newATTRSUB_x>> with its C<o_is_gv> parameter
set to FALSE, and its C<o> and C<attrs> parameters to NULL.
For more details, see L<perlintern/C<newATTRSUB_x>>.

=over 3

 OP *  newANONSUB(I32 floor, OP *proto, OP *block)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newARGDEFELEMOP>
X<newARGDEFELEMOP>

Constructs and returns a new C<OP_ARGDEFELEM> op which provides a defaulting
expression given by C<expr> for the signature parameter at the index given
by C<argindex>. The expression optree is consumed by this function and
becomes part of the returned optree.

=over 3

 OP *  newARGDEFELEMOP(I32 flags, OP *expr, I32 argindex)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newASSIGNOP>
X<newASSIGNOP>

Constructs, checks, and returns an assignment op.  C<left> and C<right>
supply the parameters of the assignment; they are consumed by this
function and become part of the constructed op tree.

If C<optype> is C<OP_ANDASSIGN>, C<OP_ORASSIGN>, or C<OP_DORASSIGN>, then
a suitable conditional optree is constructed.  If C<optype> is the opcode
of a binary operator, such as C<OP_BIT_OR>, then an op is constructed that
performs the binary operation and assigns the result to the left argument.
Either way, if C<optype> is non-zero then C<flags> has no effect.

If C<optype> is zero, then a plain scalar or list assignment is
constructed.  Which type of assignment it is is automatically determined.
C<flags> gives the eight bits of C<op_flags>, except that C<OPf_KIDS>
will be set automatically, and, shifted up eight bits, the eight bits
of C<op_private>, except that the bit with value 1 or 2 is automatically
set as required.

=over 3

 OP *  newASSIGNOP(I32 flags, OP *left, I32 optype, OP *right)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newATTRSUB>
X<newATTRSUB>

Construct a Perl subroutine, also performing some surrounding jobs,
returning a pointer to the constructed subroutine.

This is the same as L<perlintern/C<newATTRSUB_x>> with its C<o_is_gv> parameter
set to FALSE.  This means that if C<o> is null, the new sub will be anonymous;
otherwise the name will be derived from C<o> in the way described (as with all
other details) in L<perlintern/C<newATTRSUB_x>>.

=over 3

 CV *  newATTRSUB(I32 floor, OP *o, OP *proto, OP *attrs,
                  OP *block)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newAVREF>
X<newAVREF>

Constructs, checks, and returns an arrary reference op.

=over 3

 OP *  newAVREF(OP *o)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newBINOP>
X<newBINOP>

Constructs, checks, and returns an op of any binary type.  C<type>
is the opcode.  C<flags> gives the eight bits of C<op_flags>, except
that C<OPf_KIDS> will be set automatically, and, shifted up eight bits,
the eight bits of C<op_private>, except that the bit with value 1 or
2 is automatically set as required.  C<first> and C<last> supply up to
two ops to be the direct children of the binary op; they are consumed
by this function and become part of the constructed op tree.

=over 3

 OP *  newBINOP(I32 type, I32 flags, OP *first, OP *last)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newCONDOP>
X<newCONDOP>

Constructs, checks, and returns a conditional-expression (C<cond_expr>)
op.  C<flags> gives the eight bits of C<op_flags>, except that C<OPf_KIDS>
will be set automatically, and, shifted up eight bits, the eight bits of
C<op_private>, except that the bit with value 1 is automatically set.
C<first> supplies the expression selecting between the two branches,
and C<trueop> and C<falseop> supply the branches; they are consumed by
this function and become part of the constructed op tree.

=over 3

 OP *  newCONDOP(I32 flags, OP *first, OP *trueop, OP *falseop)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newCONSTSUB>

