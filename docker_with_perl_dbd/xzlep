=over 3

 const PERL_CONTEXT *  caller_cx(I32 level,
                                 const PERL_CONTEXT **dbcxp)

=back

=back

=for hackers
Found in file pp_ctl.c

=over 4

=item C<CvDEPTH>
X<CvDEPTH>

Returns the recursion level of the CV C<sv>.  Hence >= 2 indicates we are in a
recursive call.

=over 3

 I32 *  CvDEPTH(const CV * const sv)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<CvGV>
X<CvGV>

Returns the GV associated with the CV C<sv>, reifying it if necessary.

=over 3

 GV *  CvGV(CV *sv)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<CvSTASH>
X<CvSTASH>

Returns the stash of the CV.  A stash is the symbol table hash, containing
the package-scoped variables in the package where the subroutine was defined.
For more information, see L<perlguts>.

This also has a special use with XS AUTOLOAD subs.
See L<perlguts/Autoloading with XSUBs>.

=over 3

 HV*  CvSTASH(CV* cv)

=back

=back

=for hackers
Found in file cv.h

=over 4

=item C<find_runcv>
X<find_runcv>

Locate the CV corresponding to the currently executing sub or eval.
If C<db_seqp> is non_null, skip CVs that are in the DB package and populate
C<*db_seqp> with the cop sequence number at the point that the DB:: code was
entered.  (This allows debuggers to eval in the scope of the breakpoint
rather than in the scope of the debugger itself.)

=over 3

 CV *  find_runcv(U32 *db_seqp)

=back

=back

=for hackers
Found in file pp_ctl.c

=over 4

=item C<get_cv>

=item C<get_cvn_flags>

=item C<get_cvs>
X<get_cv>X<get_cvn_flags>X<get_cvs>

These return the CV of the specified Perl subroutine.  C<flags> are passed to
C<gv_fetchpvn_flags>.  If C<GV_ADD> is set and the Perl subroutine does not
exist then it will be declared (which has the same effect as saying
C<sub name;>).  If C<GV_ADD> is not set and the subroutine does not exist,
then NULL is returned.

The forms differ only in how the subroutine is specified..  With C<get_cvs>,
the name is a literal C string, enclosed in double quotes.  With C<get_cv>, the
name is given by the C<name> parameter, which must be a NUL-terminated C
string.  With C<get_cvn_flags>, the name is also given by the C<name>
parameter, but it is a Perl string (possibly containing embedded NUL bytes),
and its length in bytes is contained in the C<len> parameter.

NOTE: the C<perl_get_cv()> form is B<deprecated>.

NOTE: the C<perl_get_cvn_flags()> form is B<deprecated>.

NOTE: the C<perl_get_cvs()> form is B<deprecated>.

=over 3

 CV *  get_cv       (const char *name, I32 flags)
 CV *  get_cvn_flags(const char *name, STRLEN len, I32 flags)
 CV *  get_cvs      ("string", I32 flags)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<Nullcv>
X<Nullcv>

C<B<DEPRECATED!>>  It is planned to remove C<Nullcv>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

Null CV pointer.

(deprecated - use C<(CV *)NULL> instead)

=back

=for hackers
Found in file cv.h

=head1 Debugging

=over 4

=item C<av_dump>
X<av_dump>

Dumps the contents of an AV to the C<STDERR> filehandle,
Similar to using Devel::Peek on an arrayref but does not
expect an RV wrapper. Dumps contents to a depth of 3 levels
deep.

=over 3

 void  av_dump(AV *av)

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<deb>

=item C<deb_nocontext>
X<deb>X<deb_nocontext>

When perl is compiled with C<-DDEBUGGING>, this prints to STDERR the
information given by the arguments, prefaced by the name of the file containing
the script causing the call, and the line number within that file.

If the C<v> (verbose) debugging option is in effect, the process id is also
printed.

The two forms differ only in that C<deb_nocontext> does not take a thread
context (C<aTHX>) parameter, so is used in situations where the caller doesn't
already have the thread context.

NOTE: C<deb> must be explicitly called as
C<Perl_deb>
with an C<aTHX_> parameter.

=over 3

 void  Perl_deb     (pTHX_ const char *pat, ...)
 void  deb_nocontext(const char *pat, ...)

=back

=back

=for hackers
Found in file deb.c

=over 4

=item C<debstack>
X<debstack>

Dump the current stack

=over 3

 I32  debstack()

=back

=back

=for hackers
Found in file deb.c

=over 4

=item C<dump_all>
X<dump_all>

Dumps the entire optree of the current program starting at C<PL_main_root> to 
C<STDERR>.  Also dumps the optrees for all visible subroutines in
C<PL_defstash>.

=over 3

 void  dump_all()

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<dump_c_backtrace>
X<dump_c_backtrace>

Dumps the C backtrace to the given C<fp>.

Returns true if a backtrace could be retrieved, false if not.

=over 3

 bool  dump_c_backtrace(PerlIO *fp, int max_depth, int skip)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<dump_eval>

Described in L<perlguts>.

=over 3

 void  dump_eval()

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<dump_form>
X<dump_form>

Dumps the contents of the format contained in the GV C<gv> to C<STDERR>, or a
message that one doesn't exist.

=over 3

 void  dump_form(const GV *gv)

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<dump_packsubs>
X<dump_packsubs>

Dumps the optrees for all visible subroutines in C<stash>.

=over 3

 void  dump_packsubs(const HV *stash)

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<dump_sub>

Described in L<perlguts>.

=over 3

 void  dump_sub(const GV *gv)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<get_c_backtrace_dump>
X<get_c_backtrace_dump>

Returns a SV containing a dump of C<depth> frames of the call stack, skipping
the C<skip> innermost ones.  C<depth> of 20 is usually enough.

The appended output looks like:

 ...
 1   10e004812:0082   Perl_croak   util.c:1716    /usr/bin/perl
 2   10df8d6d2:1d72   perl_parse   perl.c:3975    /usr/bin/perl
 ...

The fields are tab-separated.  The first column is the depth (zero
being the innermost non-skipped frame).  In the hex:offset, the hex is
where the program counter was in C<S_parse_body>, and the :offset (might
be missing) tells how much inside the C<S_parse_body> the program counter was.

The C<util.c:1716> is the source code file and line number.

The F</usr/bin/perl> is obvious (hopefully).

Unknowns are C<"-">.  Unknowns can happen unfortunately quite easily:
if the platform doesn't support retrieving the information;
if the binary is missing the debug information;
if the optimizer has transformed the code by for example inlining.

=over 3

 SV *  get_c_backtrace_dump(int max_depth, int skip)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<gv_dump>
X<gv_dump>

Dump the name and, if they differ, the effective name of the GV C<gv> to
C<STDERR>.

=over 3

 void  gv_dump(GV *gv)

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<HAS_BACKTRACE>
X<HAS_BACKTRACE>

This symbol, if defined, indicates that the C<backtrace()> routine is
available to get a stack trace.  The F<execinfo.h> header must be
included to use this routine.

=back

=for hackers
Found in file config.h

=over 4

=item C<hv_dump>
X<hv_dump>

Dumps the contents of an HV to the C<STDERR> filehandle.
Similar to using Devel::Peek on an hashref but does not
expect an RV wrapper. Dumps contents to a depth of 3 levels
deep.

=over 3

 void  hv_dump(HV *hv)

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<magic_dump>
X<magic_dump>

Dumps the contents of the MAGIC C<mg> to C<STDERR>.

=over 3

 void  magic_dump(const MAGIC *mg)

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<op_class>
X<op_class>

Given an op, determine what type of struct it has been allocated as.
Returns one of the OPclass enums, such as OPclass_LISTOP.

=over 3

 OPclass  op_class(const OP *o)

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<op_dump>
X<op_dump>

Dumps the optree starting at OP C<o> to C<STDERR>.

=over 3

 void  op_dump(const OP *o)

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<PL_op>

Described in L<perlhacktips>.

=back

=for hackers
Found in file pod/perlhacktips.pod

=over 4

=item C<PL_runops>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PL_sv_serial>

Described in L<perlhacktips>.

=back

=for hackers
Found in file pod/perlhacktips.pod

=over 4

=item C<pmop_dump>
X<pmop_dump>

Dump an OP that is related to Pattern Matching, such as C<s/foo/bar/>; these require
special handling.

=over 3

 void  pmop_dump(PMOP *pm)

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<sv_dump>
X<sv_dump>

Dumps the contents of an SV to the C<STDERR> filehandle.

For an example of its output, see L<Devel::Peek>. If
the item is an SvROK it will dump items to a depth of 4,
otherwise it will dump only the top level item, which
means that it will not dump the contents of an AV * or
HV *. For that use C<av_dump()> or C<hv_dump()>.

=over 3

 void  sv_dump(SV *sv)

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<sv_dump_depth>
X<sv_dump_depth>

Dumps the contents of an SV to the C<STDERR> filehandle
to the depth requested. This function can be used on any
SV derived type (GV, HV, AV) with an appropriate cast.
This is a more flexible variant of sv_dump(). For example

    HV *hv = ...;
    sv_dump_depth((SV*)hv, 2);

would dump the hv, its keys and values, but would not recurse
into any RV values.

=over 3

 void  sv_dump_depth(SV *sv, I32 depth)

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<vdeb>
X<vdeb>

This is like C<L</deb>>, but C<args> are an encapsulated argument list.

=over 3

 void  vdeb(const char *pat, va_list *args)

=back

=back

=for hackers
Found in file deb.c

=head1 Display functions
X<PERL_PV_ESCAPE_ALL>X<PERL_PV_ESCAPE_FIRSTCHAR>X<PERL_PV_ESCAPE_NOBACKSLASH>X<PERL_PV_ESCAPE_NOCLEAR>X<PERL_PV_ESCAPE_NONASCII>X<PERL_PV_ESCAPE_NON_WC>X<PERL_PV_ESCAPE_QUOTE>X<PERL_PV_ESCAPE_RE>X<PERL_PV_ESCAPE_UNI>X<PERL_PV_ESCAPE_UNI_DETECT>X<PERL_PV_PRETTY_ELLIPSES>X<PERL_PV_PRETTY_LTGT>X<PERL_PV_PRETTY_QUOTE>

=over 4

=item C<form>

=item C<form_nocontext>
X<form>X<form_nocontext>

These take a sprintf-style format pattern and conventional
(non-SV) arguments and return the formatted string.

    (char *) Perl_form(aTHX_ const char* pat, ...)

They can be used any place a string (char *) is required:

    char * s = form_nocontext("%d.%d", major, minor);

They each return a temporary that will be freed "soon", automatically by the
system, at the same time that SVs operated on by C<L</sv_2mortal>> are freed.

Use the result immediately, or copy to a stable place for longer retention.
This is contrary to the incorrect previous documentation of these that claimed
that the return was a single per-thread buffer.  That was (and is) actually
true only when these are called during global destruction.

The two forms differ only in that C<form_nocontext> does not take a thread
context (C<aTHX>) parameter, so is used in situations where the caller doesn't
already have the thread context.

C<L</vform>> is the same except the arguments are an encapsulated argument list.

NOTE: C<form> must be explicitly called as
C<Perl_form>
with an C<aTHX_> parameter.

=over 3

 char *  Perl_form     (pTHX_ const char *pat, ...)
 char *  form_nocontext(const char *pat, ...)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<mess>

=item C<mess_nocontext>
X<mess>X<mess_nocontext>

These take a sprintf-style format pattern and argument list, which are used to
generate a string message.  If the message does not end with a newline, then it
will be extended with some indication of the current location in the code, as
described for C<L</mess_sv>>.

Normally, the resulting message is returned in a new mortal SV.
But during global destruction a single SV may be shared between uses of
this function.

The two forms differ only in that C<mess_nocontext> does not take a thread
context (C<aTHX>) parameter, so is used in situations where the caller doesn't
already have the thread context.

NOTE: C<mess> must be explicitly called as
C<Perl_mess>
with an C<aTHX_> parameter.

=over 3

 SV *  Perl_mess     (pTHX_ const char *pat, ...)
 SV *  mess_nocontext(const char *pat, ...)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<mess_sv>
X<mess_sv>

Expands a message, intended for the user, to include an indication of
the current location in the code, if the message does not already appear
to be complete.

C<basemsg> is the initial message or object.  If it is a reference, it
will be used as-is and will be the result of this function.  Otherwise it
is used as a string, and if it already ends with a newline, it is taken
to be complete, and the result of this function will be the same string.
If the message does not end with a newline, then a segment such as C<at
foo.pl line 37> will be appended, and possibly other clauses indicating
the current state of execution.  The resulting message will end with a
dot and a newline.

Normally, the resulting message is returned in a new mortal SV.
During global destruction a single SV may be shared between uses of this
function.  If C<consume> is true, then the function is permitted (but not
required) to modify and return C<basemsg> instead of allocating a new SV.

=over 3

 SV *  mess_sv(SV *basemsg, bool consume)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<pv_display>
X<pv_display>

Similar to

  pv_escape(dsv,pv,cur,pvlim,PERL_PV_ESCAPE_QUOTE);

except that an additional "\0" will be appended to the string when
len > cur and pv[cur] is "\0".

Note that the final string may be up to 7 chars longer than pvlim.

=over 3

 char *  pv_display(SV *dsv, const char *pv, STRLEN cur,
                    STRLEN len, STRLEN pvlim)

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<pv_escape>
X<pv_escape>

Escapes at most the first C<count> chars of C<pv> and puts the results into
C<dsv> such that the size of the escaped string will not exceed C<max> chars
and will not contain any incomplete escape sequences.  The number of bytes
escaped will be returned in the C<STRLEN *escaped> parameter if it is not null.
When the C<dsv> parameter is null no escaping actually occurs, but the number
of bytes that would be escaped were it not null will be calculated.

If flags contains C<PERL_PV_ESCAPE_QUOTE> then any double quotes in the string
will also be escaped.

Normally the SV will be cleared before the escaped string is prepared,
but when C<PERL_PV_ESCAPE_NOCLEAR> is set this will not occur.

If C<PERL_PV_ESCAPE_UNI> is set then the input string is treated as UTF-8.
If C<PERL_PV_ESCAPE_UNI_DETECT> is set then the input string is scanned
using C<is_utf8_string()> to determine if it is UTF-8.

If C<PERL_PV_ESCAPE_ALL> is set then all input chars will be output
using C<\x01F1> style escapes, otherwise if C<PERL_PV_ESCAPE_NONASCII>
is set, only non-ASCII chars will be escaped using this style;
otherwise, only chars above 255 will be so escaped; other non printable
chars will use octal or common escaped patterns like C<\n>. Otherwise,
if C<PERL_PV_ESCAPE_NOBACKSLASH> then all chars below 255 will be
treated as printable and will be output as literals. The
C<PERL_PV_ESCAPE_NON_WC> modifies the previous rules to cause word
chars, unicode or otherwise, to be output as literals, note this uses
the *unicode* rules for deciding on word characters.

If C<PERL_PV_ESCAPE_FIRSTCHAR> is set then only the first char of the
string will be escaped, regardless of max. If the output is to be in
hex, then it will be returned as a plain hex sequence. Thus the output
will either be a single char, an octal escape sequence, a special escape
like C<\n> or a hex value.

If C<PERL_PV_ESCAPE_RE> is set then the escape char used will be a
C<"%"> and not a C<"\\">. This is because regexes very often contain
backslashed sequences, whereas C<"%"> is not a particularly common
character in patterns.

Returns a pointer to the escaped text as held by C<dsv>.

=over 3

 char *  pv_escape(SV *dsv, char const * const str,
                   const STRLEN count, STRLEN max,
                   STRLEN * const escaped, U32 flags)

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<pv_pretty>
X<pv_pretty>

Converts a string into something presentable, handling escaping via
C<pv_escape()> and supporting quoting and ellipses.

If the C<PERL_PV_PRETTY_QUOTE> flag is set then the result will be
double quoted with any double quotes in the string escaped.  Otherwise
if the C<PERL_PV_PRETTY_LTGT> flag is set then the result be wrapped in
angle brackets. 

If the C<PERL_PV_PRETTY_ELLIPSES> flag is set and not all characters in
string were output then an ellipsis C<...> will be appended to the
string.  Note that this happens AFTER it has been quoted.

If C<start_color> is non-null then it will be inserted after the opening
quote (if there is one) but before the escaped text.  If C<end_color>
is non-null then it will be inserted after the escaped text but before
any quotes or ellipses.

Returns a pointer to the prettified text as held by C<dsv>.

=over 3

 char *  pv_pretty(SV *dsv, char const * const str,
                   const STRLEN count, const STRLEN max,
                   char const * const start_color,
                   char const * const end_color, const U32 flags)

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<vform>
X<vform>

Like C<L</form>> except the arguments are an encapsulated argument list.

=over 3

 char *  vform(const char *pat, va_list *args)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<vmess>
X<vmess>

C<pat> and C<args> are a sprintf-style format pattern and encapsulated
argument list, respectively.  These are used to generate a string message.  If
the
message does not end with a newline, then it will be extended with
some indication of the current location in the code, as described for
L</mess_sv>.

Normally, the resulting message is returned in a new mortal SV.
During global destruction a single SV may be shared between uses of
this function.

=over 3

 SV *  vmess(const char *pat, va_list *args)

=back

=back

=for hackers
Found in file util.c

=head1 Embedding, Threads, and Interpreter Cloning
X<CV_NAME_NOTQUAL>X<PADNAMEf_OUTER>X<PERL_EXIT_ABORT>X<PERL_EXIT_DESTRUCT_END>X<PERL_EXIT_EXPECTED>X<PERL_EXIT_WARN>X<PERL_LOADMOD_DENY>X<PERL_LOADMOD_IMPORT_OPS>X<PERL_LOADMOD_NOIMPORT>

=over 4

=item C<call_atexit>
X<call_atexit>

Add a function C<fn> to the list of functions to be called at global
destruction.  C<ptr> will be passed as an argument to C<fn>; it can point to a
C<struct> so that you can pass anything you want.

Note that under threads, C<fn> may run multiple times.  This is because the
list is executed each time the current or any descendent thread terminates.

=over 3

 void  call_atexit(ATEXIT_t fn, void *ptr)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<cv_clone>
X<cv_clone>

Clone a CV, making a lexical closure.  C<proto> supplies the prototype
of the function: its code, pad structure, and other attributes.
The prototype is combined with a capture of outer lexicals to which the
code refers, which are taken from the currently-executing instance of
the immediately surrounding code.

=over 3

 CV *  cv_clone(CV *proto)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<cv_name>
X<cv_name>

Returns an SV containing the name of the CV, mainly for use in error
reporting.  The CV may actually be a GV instead, in which case the returned
SV holds the GV's name.  Anything other than a GV or CV is treated as a
string already holding the sub name, but this could change in the future.

An SV may be passed as a second argument.  If so, the name will be assigned
to it and it will be returned.  Otherwise the returned SV will be a new
mortal.

If C<flags> has the C<CV_NAME_NOTQUAL> bit set, then the package name will not be
included.  If the first argument is neither a CV nor a GV, this flag is
ignored (subject to change).

=over 3

 SV *  cv_name(CV *cv, SV *sv, U32 flags)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<cv_undef>
X<cv_undef>

Clear out all the active components of a CV.  This can happen either
by an explicit C<undef &foo>, or by the reference count going to zero.
In the former case, we keep the C<CvOUTSIDE> pointer, so that any anonymous
children can still follow the full lexical scope chain.

=over 3

 void  cv_undef(CV *cv)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<find_rundefsv>
X<find_rundefsv>

Returns the global variable C<$_>.
