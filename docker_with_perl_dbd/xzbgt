
From F<d_closedir.U>:

This variable conditionally defines C<HAS_CLOSEDIR> if closedir() is
available.

=item C<d_cmsghdr_s>

From F<d_cmsghdr_s.U>:

This variable conditionally defines the C<HAS_STRUCT_CMSGHDR> symbol,
which indicates that the struct cmsghdr is supported.

=item C<d_copysign>

From F<d_copysign.U>:

This variable conditionally defines the C<HAS_COPYSIGN> symbol, which
indicates to the C program that the copysign() routine is available.

=item C<d_copysignl>

From F<d_copysignl.U>:

This variable conditionally defines the C<HAS_COPYSIGNL> symbol, which
indicates to the C program that the copysignl() routine is available.
If aintl is also present we can emulate modfl.

=item C<d_cplusplus>

From F<d_cplusplus.U>:

This variable conditionally defines the C<USE_CPLUSPLUS> symbol, which
indicates that a C++ compiler was used to compiled Perl and will be
used to compile extensions.

=item C<d_crypt>

From F<d_crypt.U>:

This variable conditionally defines the C<CRYPT> symbol, which
indicates to the C program that the crypt() routine is available
to encrypt passwords and the like.

=item C<d_crypt_r>

From F<d_crypt_r.U>:

This variable conditionally defines the C<HAS_CRYPT_R> symbol,
which indicates to the C program that the crypt_r()
routine is available.

=item C<d_csh>

From F<d_csh.U>:

This variable conditionally defines the C<CSH> symbol, which
indicates to the C program that the C-shell exists.

=item C<d_ctermid>

From F<d_ctermid.U>:

This variable conditionally defines C<CTERMID> if ctermid() is
available to generate filename for terminal.

=item C<d_ctermid_r>

From F<d_ctermid_r.U>:

This variable conditionally defines the C<HAS_CTERMID_R> symbol,
which indicates to the C program that the ctermid_r()
routine is available.

=item C<d_ctime64>

From F<d_timefuncs64.U>:

This variable conditionally defines the HAS_CTIME64 symbol, which
indicates to the C program that the ctime64 () routine is available.

=item C<d_ctime_r>

From F<d_ctime_r.U>:

This variable conditionally defines the C<HAS_CTIME_R> symbol,
which indicates to the C program that the ctime_r()
routine is available.

=item C<d_cuserid>

From F<d_cuserid.U>:

This variable conditionally defines the C<HAS_CUSERID> symbol, which
indicates to the C program that the cuserid() routine is available
to get character login names.

=item C<d_dbminitproto>

From F<d_dbminitproto.U>:

This variable conditionally defines the C<HAS_DBMINIT_PROTO> symbol,
which indicates to the C program that the system provides
a prototype for the dbminit() function.  Otherwise, it is
up to the program to supply one.

=item C<d_difftime>

From F<d_difftime.U>:

This variable conditionally defines the C<HAS_DIFFTIME> symbol, which
indicates to the C program that the difftime() routine is available.

=item C<d_difftime64>

From F<d_timefuncs64.U>:

This variable conditionally defines the HAS_DIFFTIME64 symbol, which
indicates to the C program that the difftime64 () routine is available.

=item C<d_dir_dd_fd>

From F<d_dir_dd_fd.U>:

This variable conditionally defines the C<HAS_DIR_DD_FD> symbol, which
indicates that the C<DIR> directory stream type contains a member
variable called dd_fd.

=item C<d_dirfd>

From F<d_dirfd.U>:

This variable conditionally defines the C<HAS_DIRFD> constant,
which indicates to the C program that dirfd() is available
to return the file descriptor of a directory stream.

=item C<d_dirnamlen>

From F<i_dirent.U>:

This variable conditionally defines C<DIRNAMLEN>, which indicates
to the C program that the length of directory entry names is
provided by a d_namelen field.

=item C<d_dladdr>

From F<d_dladdr.U>:

This variable conditionally defines the C<HAS_DLADDR> symbol, which
indicates to the C program that the dladdr() routine is available
to get a stack trace.

=item C<d_dlerror>

From F<d_dlerror.U>:

This variable conditionally defines the C<HAS_DLERROR> symbol, which
indicates to the C program that the dlerror() routine is available.

=item C<d_dlopen>

From F<d_dlopen.U>:

This variable conditionally defines the C<HAS_DLOPEN> symbol, which
indicates to the C program that the dlopen() routine is available.

=item C<d_dlsymun>

From F<d_dlsymun.U>:

This variable conditionally defines C<DLSYM_NEEDS_UNDERSCORE>, which
indicates that we need to prepend an underscore to the symbol
name before calling dlsym().

=item C<d_dosuid>

From F<d_dosuid.U>:

This variable conditionally defines the symbol C<DOSUID>, which
tells the C program that it should insert setuid emulation code
on hosts which have setuid #! scripts disabled.

=item C<d_double_has_inf>

From F<longdblfio.U>:

This variable conditionally defines the symbol C<DOUBLE_HAS_INF>
which indicates that the double type has an infinity.

=item C<d_double_has_nan>

From F<longdblfio.U>:

This variable conditionally defines the symbol C<DOUBLE_HAS_NAN>
which indicates that the double type has a not-a-number.

=item C<d_double_has_negative_zero>

From F<longdblfio.U>:

This variable conditionally defines the symbol C<DOUBLE_HAS_NEGATIVE_ZERO>
which indicates that the double type has a negative zero.

=item C<d_double_has_subnormals>

From F<longdblfio.U>:

This variable conditionally defines the symbol C<DOUBLE_HAS_SUBNORMALS>
which indicates that the double type has subnormals (denormals).

=item C<d_double_style_cray>

From F<longdblfio.U>:

This variable conditionally defines the symbol C<DOUBLE_STYLE_CRAY>
which indicates that the double is the 64-bit C<CRAY> mainframe format.

=item C<d_double_style_ibm>

From F<longdblfio.U>:

This variable conditionally defines the symbol C<DOUBLE_STYLE_IBM>,
which indicates that the double is the 64-bit C<IBM> mainframe format.

=item C<d_double_style_ieee>

From F<longdblfio.U>:

This variable conditionally defines the symbol C<DOUBLE_STYLE_IEEE>,
which indicates that the double is the 64-bit C<IEEE> 754.

=item C<d_double_style_vax>

From F<longdblfio.U>:

This variable conditionally defines the symbol C<DOUBLE_STYLE_VAX>,
which indicates that the double is the 64-bit C<VAX> format D or G.

=item C<d_drand48_r>

From F<d_drand48_r.U>:

This variable conditionally defines the HAS_DRAND48_R symbol,
which indicates to the C program that the drand48_r()
routine is available.

=item C<d_drand48proto>

From F<d_drand48proto.U>:

This variable conditionally defines the HAS_DRAND48_PROTO symbol,
which indicates to the C program that the system provides
a prototype for the drand48() function.  Otherwise, it is
up to the program to supply one.

=item C<d_dup2>

From F<d_dup2.U>:

This variable conditionally defines HAS_DUP2 if dup2() is
available to duplicate file descriptors.

=item C<d_dup3>

From F<d_dup3.U>:

This variable conditionally defines HAS_DUP3 if dup3() is
available to duplicate file descriptors.

=item C<d_duplocale>

From F<d_newlocale.U>:

This variable conditionally defines the C<HAS_DUPLOCALE> symbol, which
indicates to the C program that the duplocale() routine is available
to duplicate a locale object.

=item C<d_eaccess>

From F<d_eaccess.U>:

This variable conditionally defines the C<HAS_EACCESS> symbol, which
indicates to the C program that the eaccess() routine is available.

=item C<d_endgrent>

From F<d_endgrent.U>:

This variable conditionally defines the C<HAS_ENDGRENT> symbol, which
indicates to the C program that the endgrent() routine is available
for sequential access of the group database.

=item C<d_endgrent_r>

From F<d_endgrent_r.U>:

This variable conditionally defines the C<HAS_ENDGRENT_R> symbol,
which indicates to the C program that the endgrent_r()
routine is available.

=item C<d_endhent>

From F<d_endhent.U>:

This variable conditionally defines C<HAS_ENDHOSTENT> if endhostent() is
available to close whatever was being used for host queries.

=item C<d_endhostent_r>

From F<d_endhostent_r.U>:

This variable conditionally defines the C<HAS_ENDHOSTENT_R> symbol,
which indicates to the C program that the endhostent_r()
routine is available.

=item C<d_endnent>

From F<d_endnent.U>:

This variable conditionally defines C<HAS_ENDNETENT> if endnetent() is
available to close whatever was being used for network queries.

=item C<d_endnetent_r>

From F<d_endnetent_r.U>:

This variable conditionally defines the C<HAS_ENDNETENT_R> symbol,
which indicates to the C program that the endnetent_r()
routine is available.

=item C<d_endpent>

From F<d_endpent.U>:

This variable conditionally defines C<HAS_ENDPROTOENT> if endprotoent() is
available to close whatever was being used for protocol queries.

=item C<d_endprotoent_r>

From F<d_endprotoent_r.U>:

This variable conditionally defines the C<HAS_ENDPROTOENT_R> symbol,
which indicates to the C program that the endprotoent_r()
routine is available.

=item C<d_endpwent>

From F<d_endpwent.U>:

This variable conditionally defines the C<HAS_ENDPWENT> symbol, which
indicates to the C program that the endpwent() routine is available
for sequential access of the passwd database.

=item C<d_endpwent_r>

From F<d_endpwent_r.U>:

This variable conditionally defines the C<HAS_ENDPWENT_R> symbol,
which indicates to the C program that the endpwent_r()
routine is available.

=item C<d_endsent>

From F<d_endsent.U>:

This variable conditionally defines C<HAS_ENDSERVENT> if endservent() is
available to close whatever was being used for service queries.

=item C<d_endservent_r>

From F<d_endservent_r.U>:

This variable conditionally defines the C<HAS_ENDSERVENT_R> symbol,
which indicates to the C program that the endservent_r()
routine is available.

=item C<d_eofnblk>

From F<nblock_io.U>:

This variable conditionally defines C<EOF_NONBLOCK> if C<EOF> can be seen
when reading from a non-blocking I/O source.

=item C<d_erf>

From F<d_erf.U>:

This variable conditionally defines the C<HAS_ERF> symbol, which
indicates to the C program that the erf() routine is available.

=item C<d_erfc>

From F<d_erfc.U>:

This variable conditionally defines the C<HAS_ERFC> symbol, which
indicates to the C program that the erfc() routine is available.

=item C<d_eunice>

From F<Guess.U>:

This variable conditionally defines the symbols C<EUNICE> and C<VAX>, which
alerts the C program that it must deal with idiosyncrasies of C<VMS>.

=item C<d_exp2>

From F<d_exp2.U>:

This variable conditionally defines the HAS_EXP2 symbol, which
indicates to the C program that the exp2() routine is available.

=item C<d_expm1>

From F<d_expm1.U>:

This variable conditionally defines the HAS_EXPM1 symbol, which
indicates to the C program that the expm1() routine is available.

=item C<d_faststdio>

From F<d_faststdio.U>:

This variable conditionally defines the C<HAS_FAST_STDIO> symbol,
which indicates to the C program that the "fast stdio" is available
to manipulate the stdio buffers directly.

=item C<d_fchdir>

From F<d_fchdir.U>:

This variable conditionally defines the C<HAS_FCHDIR> symbol, which
indicates to the C program that the fchdir() routine is available.

=item C<d_fchmod>

From F<d_fchmod.U>:

This variable conditionally defines the C<HAS_FCHMOD> symbol, which
indicates to the C program that the fchmod() routine is available
to change mode of opened files.

=item C<d_fchmodat>

From F<d_fsat.U>:

This variable conditionally defines the C<HAS_FCHMODAT> symbol, which
indicates the C<POSIX> fchmodat() function is available.

=item C<d_fchown>

From F<d_fchown.U>:

This variable conditionally defines the C<HAS_FCHOWN> symbol, which
indicates to the C program that the fchown() routine is available
to change ownership of opened files.

=item C<d_fcntl>

From F<d_fcntl.U>:

This variable conditionally defines the C<HAS_FCNTL> symbol, and indicates
whether the fcntl() function exists

=item C<d_fcntl_can_lock>

From F<d_fcntl_can_lock.U>:

This variable conditionally defines the C<FCNTL_CAN_LOCK> symbol
and indicates whether file locking with fcntl() works.

=item C<d_fd_macros>

From F<d_fd_set.U>:

This variable contains the eventual value of the C<HAS_FD_MACROS> symbol,
which indicates if your C compiler knows about the macros which
manipulate an fd_set.

=item C<d_fd_set>

From F<d_fd_set.U>:

This variable contains the eventual value of the C<HAS_FD_SET> symbol,
which indicates if your C compiler knows about the fd_set typedef.

=item C<d_fdclose>

From F<d_fdclose.U>:

This variable conditionally defines the C<HAS_FDCLOSE> symbol, which
indicates to the C program that the fdclose() routine is available.

=item C<d_fdim>

From F<d_fdim.U>:

This variable conditionally defines the C<HAS_FDIM> symbol, which
indicates to the C program that the fdim() routine is available.

=item C<d_fds_bits>

From F<d_fd_set.U>:

This variable contains the eventual value of the C<HAS_FDS_BITS> symbol,
which indicates if your fd_set typedef contains the fds_bits member.
If you have an fd_set typedef, but the dweebs who installed it did
a half-fast job and neglected to provide the macros to manipulate
an fd_set, C<HAS_FDS_BITS> will let us know how to fix the gaffe.

=item C<d_fegetround>

From F<d_fegetround.U>:

This variable conditionally defines C<HAS_FEGETROUND> if fegetround() is
available to get the floating point rounding mode.

=item C<d_ffs>

From F<d_ffs.U>:

This variable conditionally defines the C<HAS_FFS> symbol, which
indicates to the C program that the ffs() routine is available
to find the first bit which is set in its integer argument.

=item C<d_ffsl>

From F<d_ffs.U>:

This variable conditionally defines the C<HAS_FFSL> symbol, which
indicates to the C program that the ffsl() routine is available
to find the first bit which is set in its long integer argument.

=item C<d_fgetpos>

From F<d_fgetpos.U>:

This variable conditionally defines C<HAS_FGETPOS> if fgetpos() is
available to get the file position indicator.

=item C<d_finite>

From F<d_finite.U>:

This variable conditionally defines the C<HAS_FINITE> symbol, which
indicates to the C program that the finite() routine is available.

=item C<d_finitel>

From F<d_finitel.U>:

This variable conditionally defines the C<HAS_FINITEL> symbol, which
indicates to the C program that the finitel() routine is available.

=item C<d_flexfnam>

From F<d_flexfnam.U>:

This variable conditionally defines the C<FLEXFILENAMES> symbol, which
indicates that the system supports filenames longer than 14 characters.

=item C<d_flock>

From F<d_flock.U>:

This variable conditionally defines C<HAS_FLOCK> if flock() is
available to do file locking.

=item C<d_flockproto>

From F<d_flockproto.U>:

This variable conditionally defines the C<HAS_FLOCK_PROTO> symbol,
which indicates to the C program that the system provides
a prototype for the flock() function.  Otherwise, it is
up to the program to supply one.

=item C<d_fma>

From F<d_fma.U>:

This variable conditionally defines the C<HAS_FMA> symbol, which
indicates to the C program that the fma() routine is available.

=item C<d_fmax>

From F<d_fmax.U>:

This variable conditionally defines the C<HAS_FMAX> symbol, which
indicates to the C program that the fmax() routine is available.

=item C<d_fmin>

From F<d_fmin.U>:

This variable conditionally defines the C<HAS_FMIN> symbol, which
indicates to the C program that the fmin() routine is available.

=item C<d_fork>

From F<d_fork.U>:

This variable conditionally defines the C<HAS_FORK> symbol, which
indicates to the C program that the fork() routine is available.

=item C<d_fp_class>

From F<d_fp_class.U>:

This variable conditionally defines the C<HAS_FP_CLASS> symbol, which
indicates to the C program that the fp_class() routine is available.

=item C<d_fp_classify>

From F<d_fpclassify.U>:

This variable conditionally defines the C<HAS_FP_CLASSIFY> symbol, which
indicates to the C program that the fp_classify() routine is available.

=item C<d_fp_classl>

From F<d_fp_classl.U>:

This variable conditionally defines the C<HAS_FP_CLASSL> symbol, which
indicates to the C program that the fp_classl() routine is available.

=item C<d_fpathconf>

From F<d_pathconf.U>:

This variable conditionally defines the C<HAS_FPATHCONF> symbol, which
indicates to the C program that the pathconf() routine is available
to determine file-system related limits and options associated
with a given open file descriptor.

=item C<d_fpclass>

From F<d_fpclass.U>:

This variable conditionally defines the C<HAS_FPCLASS> symbol, which
indicates to the C program that the fpclass() routine is available.

=item C<d_fpclassify>

From F<d_fpclassify.U>:

This variable conditionally defines the C<HAS_FPCLASSIFY> symbol, which
indicates to the C program that the fpclassify() routine is available.

=item C<d_fpclassl>

From F<d_fpclassl.U>:

This variable conditionally defines the C<HAS_FPCLASSL> symbol, which
indicates to the C program that the fpclassl() routine is available.

=item C<d_fpgetround>

From F<d_fpgetround.U>:

This variable conditionally defines C<HAS_FPGETROUND> if fpgetround()
is available to get the floating point rounding mode.

=item C<d_fpos64_t>

From F<d_fpos64_t.U>:

This symbol will be defined if the C compiler supports fpos64_t.

=item C<d_freelocale>

From F<d_newlocale.U>:

This variable conditionally defines the C<HAS_FREELOCALE> symbol, which
indicates to the C program that the freelocale() routine is available
to deallocates the resources associated with a locale object.

=item C<d_frexpl>

From F<d_frexpl.U>:

This variable conditionally defines the C<HAS_FREXPL> symbol, which
indicates to the C program that the frexpl() routine is available.

=item C<d_fs_data_s>

From F<d_fs_data_s.U>:

This variable conditionally defines the C<HAS_STRUCT_FS_DATA> symbol,
which indicates that the struct fs_data is supported.

=item C<d_fseeko>

From F<d_fseeko.U>:

This variable conditionally defines the C<HAS_FSEEKO> symbol, which
indicates to the C program that the fseeko() routine is available.

=item C<d_fsetpos>

From F<d_fsetpos.U>:

This variable conditionally defines C<HAS_FSETPOS> if fsetpos() is
available to set the file position indicator.

=item C<d_fstatfs>

From F<d_fstatfs.U>:

This variable conditionally defines the C<HAS_FSTATFS> symbol, which
indicates to the C program that the fstatfs() routine is available.

=item C<d_fstatvfs>

From F<d_statvfs.U>:

This variable conditionally defines the C<HAS_FSTATVFS> symbol, which
indicates to the C program that the fstatvfs() routine is available.

=item C<d_fsync>

From F<d_fsync.U>:

This variable conditionally defines the C<HAS_FSYNC> symbol, which
indicates to the C program that the fsync() routine is available.

=item C<d_ftello>

From F<d_ftello.U>:

This variable conditionally defines the C<HAS_FTELLO> symbol, which
indicates to the C program that the ftello() routine is available.

=item C<d_ftime>

From F<d_ftime.U>:

This variable conditionally defines the C<HAS_FTIME> symbol, which indicates
that the ftime() routine exists.  The ftime() routine is basically
a sub-second accuracy clock.

=item C<d_futimes>

From F<d_futimes.U>:

This variable conditionally defines the C<HAS_FUTIMES> symbol, which
indicates to the C program that the futimes() routine is available.

=item C<d_gai_strerror>

From F<d_gai_strerror.U>:

This variable conditionally defines the C<HAS_GAI_STRERROR> symbol
if the gai_strerror() routine is available and can be used to
translate error codes returned by getaddrinfo() into human
readable strings.

=item C<d_Gconvert>

From F<d_gconvert.U>:

This variable holds what Gconvert is defined as to convert
floating point numbers into strings.  By default, Configure
sets C<this> macro to use the first of gconvert, gcvt, or sprintf
that pass sprintf-%g-like behavior tests.  If perl is using
long doubles, the macro uses the first of the following
functions that pass Configure's tests: qgcvt, sprintf (if
Configure knows how to make sprintf format long doubles--see
sPRIgldbl), gconvert, gcvt, and sprintf (casting to double).
The gconvert_preference and gconvert_ld_preference variables
can be used to alter Configure's preferences, for doubles and
long doubles, respectively.  If present, they contain a
space-separated list of one or more of the above function
names in the order they should be tried.

d_Gconvert may be set to override Configure with a platform-
specific function.  If this function expects a double, a
different value may need to be set by the F<uselongdouble.cbu>
call-back unit so that long doubles can be formatted without
loss of precision.

=item C<d_gdbm_ndbm_h_uses_prototypes>

From F<i_ndbm.U>:

This variable conditionally defines the C<NDBM_H_USES_PROTOTYPES> symbol,
which indicates that the gdbm-F<ndbm.h> include file uses real C<ANSI> C
prototypes instead of K&R style function declarations. K&R style
declarations are unsupported in C++, so the include file requires
special handling when using a C++ compiler and this variable is
undefined. Consult the different d_*ndbm_h_uses_prototypes variables
to get the same information for alternative F<ndbm.h> include files.

=item C<d_gdbmndbm_h_uses_prototypes>

From F<i_ndbm.U>:

This variable conditionally defines the C<NDBM_H_USES_PROTOTYPES> symbol,
which indicates that the F<gdbm/ndbm.h> include file uses real C<ANSI> C
prototypes instead of K&R style function declarations. K&R style
declarations are unsupported in C++, so the include file requires
special handling when using a C++ compiler and this variable is
undefined. Consult the different d_*ndbm_h_uses_prototypes variables
to get the same information for alternative F<ndbm.h> include files.

=item C<d_getaddrinfo>

From F<d_getaddrinfo.U>:

This variable conditionally defines the C<HAS_GETADDRINFO> symbol,
which indicates to the C program that the getaddrinfo() function
is available.

=item C<d_getcwd>

From F<d_getcwd.U>:

This variable conditionally defines the C<HAS_GETCWD> symbol, which
indicates to the C program that the getcwd() routine is available
to get the current working directory.

=item C<d_getenv_preserves_other_thread>

From F<d_getenv_thread.U>:

This variable conditionally defines the C<GETENV_PRESERVES_OTHER_THREAD>
symbol, which indicates to the C program that the getenv() system call
does not zap the static buffer in a different thread.

=item C<d_getespwnam>

From F<d_getespwnam.U>:

This variable conditionally defines C<HAS_GETESPWNAM> if getespwnam() is
available to retrieve enhanced (shadow) password entries by name.

=item C<d_getfsstat>

From F<d_getfsstat.U>:

This variable conditionally defines the C<HAS_GETFSSTAT> symbol, which
indicates to the C program that the getfsstat() routine is available.

=item C<d_getgrent>

From F<d_getgrent.U>:

This variable conditionally defines the C<HAS_GETGRENT> symbol, which
indicates to the C program that the getgrent() routine is available
for sequential access of the group database.

=item C<d_getgrent_r>

From F<d_getgrent_r.U>:

This variable conditionally defines the C<HAS_GETGRENT_R> symbol,
which indicates to the C program that the getgrent_r()
routine is available.

=item C<d_getgrgid_r>

From F<d_getgrgid_r.U>:

This variable conditionally defines the C<HAS_GETGRGID_R> symbol,
which indicates to the C program that the getgrgid_r()
routine is available.

=item C<d_getgrnam_r>

From F<d_getgrnam_r.U>:

This variable conditionally defines the C<HAS_GETGRNAM_R> symbol,
which indicates to the C program that the getgrnam_r()
routine is available.

=item C<d_getgrps>

From F<d_getgrps.U>:

This variable conditionally defines the C<HAS_GETGROUPS> symbol, which
indicates to the C program that the getgroups() routine is available
to get the list of process groups.

=item C<d_gethbyaddr>

From F<d_gethbyad.U>:

This variable conditionally defines the C<HAS_GETHOSTBYADDR> symbol, which
indicates to the C program that the gethostbyaddr() routine is available
to look up hosts by their C<IP> addresses.

=item C<d_gethbyname>

From F<d_gethbynm.U>:

This variable conditionally defines the C<HAS_GETHOSTBYNAME> symbol, which
indicates to the C program that the gethostbyname() routine is available
to look up host names in some data base or other.

=item C<d_gethent>

From F<d_gethent.U>:

This variable conditionally defines C<HAS_GETHOSTENT> if gethostent() is
available to look up host names in some data base or another.

=item C<d_gethname>

From F<d_gethname.U>:

This variable conditionally defines the C<HAS_GETHOSTNAME> symbol, which
indicates to the C program that the gethostname() routine may be
used to derive the host name.

=item C<d_gethostbyaddr_r>

From F<d_gethostbyaddr_r.U>:

This variable conditionally defines the C<HAS_GETHOSTBYADDR_R> symbol,
which indicates to the C program that the gethostbyaddr_r()
routine is available.

=item C<d_gethostbyname_r>

From F<d_gethostbyname_r.U>:

This variable conditionally defines the C<HAS_GETHOSTBYNAME_R> symbol,
which indicates to the C program that the gethostbyname_r()
routine is available.

=item C<d_gethostent_r>

From F<d_gethostent_r.U>:

This variable conditionally defines the C<HAS_GETHOSTENT_R> symbol,
which indicates to the C program that the gethostent_r()
routine is available.

=item C<d_gethostprotos>

From F<d_gethostprotos.U>:

This variable conditionally defines the C<HAS_GETHOST_PROTOS> symbol,
which indicates to the C program that <netdb.h> supplies
prototypes for the various gethost*() functions.
See also F<netdbtype.U> for probing for various netdb types.

=item C<d_getitimer>

From F<d_getitimer.U>:

This variable conditionally defines the C<HAS_GETITIMER> symbol, which
indicates to the C program that the getitimer() routine is available.

=item C<d_getlogin>

From F<d_getlogin.U>:

This variable conditionally defines the C<HAS_GETLOGIN> symbol, which
indicates to the C program that the getlogin() routine is available
to get the login name.

=item C<d_getlogin_r>

From F<d_getlogin_r.U>:

This variable conditionally defines the C<HAS_GETLOGIN_R> symbol,
which indicates to the C program that the getlogin_r()
routine is available.

=item C<d_getmnt>

From F<d_getmnt.U>:

This variable conditionally defines the C<HAS_GETMNT> symbol, which
indicates to the C program that the getmnt() routine is available
to retrieve one or more mount info blocks by filename.

=item C<d_getmntent>

From F<d_getmntent.U>:

This variable conditionally defines the C<HAS_GETMNTENT> symbol, which
indicates to the C program that the getmntent() routine is available
to iterate through mounted files to get their mount info.

=item C<d_getnameinfo>

From F<d_getnameinfo.U>:

This variable conditionally defines the C<HAS_GETNAMEINFO> symbol,
which indicates to the C program that the getnameinfo() function
is available.

=item C<d_getnbyaddr>

From F<d_getnbyad.U>:

This variable conditionally defines the C<HAS_GETNETBYADDR> symbol, which
indicates to the C program that the getnetbyaddr() routine is available
to look up networks by their C<IP> addresses.
