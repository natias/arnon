
=item Math::Trig

A little bit of radial trigonometry (cylindrical and spherical),
radial coordinate conversions, and the great circle distance were added.

=item Pod::Parser, Pod::InputObjects

Pod::Parser is a base class for parsing and selecting sections of
pod documentation from an input stream.  This module takes care of
identifying pod paragraphs and commands in the input and hands off the
parsed paragraphs and commands to user-defined methods which are free
to interpret or translate them as they see fit.

Pod::InputObjects defines some input objects needed by Pod::Parser, and
for advanced users of Pod::Parser that need more about a command besides
its name and text.

As of release 5.6.0 of Perl, Pod::Parser is now the officially sanctioned
"base parser code" recommended for use by all pod2xxx translators.
Pod::Text (pod2text) and Pod::Man (pod2man) have already been converted
to use Pod::Parser and efforts to convert Pod::HTML (pod2html) are already
underway.  For any questions or comments about pod parsing and translating
issues and utilities, please use the pod-people@perl.org mailing list.

For further information, please see L<Pod::Parser> and L<Pod::InputObjects>.

=item Pod::Checker, podchecker

This utility checks pod files for correct syntax, according to
L<perlpod>.  Obvious errors are flagged as such, while warnings are
printed for mistakes that can be handled gracefully.  The checklist is
not complete yet.  See L<Pod::Checker>.

=item Pod::ParseUtils, Pod::Find

These modules provide a set of gizmos that are useful mainly for pod
translators.  L<Pod::Find|Pod::Find> traverses directory structures and
returns found pod files, along with their canonical names (like
C<File::Spec::Unix>).  L<Pod::ParseUtils|Pod::ParseUtils> contains
B<Pod::List> (useful for storing pod list information), B<Pod::Hyperlink>
(for parsing the contents of C<LE<lt>E<gt>> sequences) and B<Pod::Cache>
(for caching information about pod files, e.g., link nodes).

=item Pod::Select, podselect

Pod::Select is a subclass of Pod::Parser which provides a function
named "podselect()" to filter out user-specified sections of raw pod
documentation from an input stream. podselect is a script that provides
access to Pod::Select from other scripts to be used as a filter.
See L<Pod::Select>.

=item Pod::Usage, pod2usage

Pod::Usage provides the function "pod2usage()" to print usage messages for
a Perl script based on its embedded pod documentation.  The pod2usage()
function is generally useful to all script authors since it lets them
write and maintain a single source (the pods) for documentation, thus
removing the need to create and maintain redundant usage message text
consisting of information already in the pods.

There is also a pod2usage script which can be used from other kinds of
scripts to print usage messages from pods (even for non-Perl scripts
with pods embedded in comments).

For details and examples, please see L<Pod::Usage>.

=item Pod::Text and Pod::Man

Pod::Text has been rewritten to use Pod::Parser.  While pod2text() is
still available for backwards compatibility, the module now has a new
preferred interface.  See L<Pod::Text> for the details.  The new Pod::Text
module is easily subclassed for tweaks to the output, and two such
subclasses (Pod::Text::Termcap for man-page-style bold and underlining
using termcap information, and Pod::Text::Color for markup with ANSI color
sequences) are now standard.

pod2man has been turned into a module, Pod::Man, which also uses
Pod::Parser.  In the process, several outstanding bugs related to quotes
in section headers, quoting of code escapes, and nested lists have been
fixed.  pod2man is now a wrapper script around this module.

=item SDBM_File

An EXISTS method has been added to this module (and sdbm_exists() has
been added to the underlying sdbm library), so one can now call exists
on an SDBM_File tied hash and get the correct result, rather than a
runtime error.

A bug that may have caused data loss when more than one disk block
happens to be read from the database in a single FETCH() has been
fixed.

=item Sys::Syslog

Sys::Syslog now uses XSUBs to access facilities from syslog.h so it
no longer requires syslog.ph to exist. 

=item Sys::Hostname

Sys::Hostname now uses XSUBs to call the C library's gethostname() or
uname() if they exist.

=item Term::ANSIColor

Term::ANSIColor is a very simple module to provide easy and readable
access to the ANSI color and highlighting escape sequences, supported by
most ANSI terminal emulators.  It is now included standard.

=item Time::Local

The timelocal() and timegm() functions used to silently return bogus
results when the date fell outside the machine's integer range.  They
now consistently croak() if the date falls in an unsupported range.

=item Win32

The error return value in list context has been changed for all functions
that return a list of values.  Previously these functions returned a list
with a single element C<undef> if an error occurred.  Now these functions
return the empty list in these situations.  This applies to the following
functions:

    Win32::FsType
    Win32::GetOSVersion

The remaining functions are unchanged and continue to return C<undef> on
error even in list context.

The Win32::SetLastError(ERROR) function has been added as a complement
to the Win32::GetLastError() function.

The new Win32::GetFullPathName(FILENAME) returns the full absolute
pathname for FILENAME in scalar context.  In list context it returns
a two-element list containing the fully qualified directory name and
the filename.  See L<Win32>.

=item XSLoader

The XSLoader extension is a simpler alternative to DynaLoader.
See L<XSLoader>.

=item DBM Filters

A new feature called "DBM Filters" has been added to all the
DBM modules--DB_File, GDBM_File, NDBM_File, ODBM_File, and SDBM_File.
DBM Filters add four new methods to each DBM module:

    filter_store_key
    filter_store_value
    filter_fetch_key
    filter_fetch_value

These can be used to filter key-value pairs before the pairs are
written to the database or just after they are read from the database.
See L<perldbmfilter> for further information.

=back

=head2 Pragmata

C<use attrs> is now obsolete, and is only provided for
backward-compatibility.  It's been replaced by the C<sub : attributes>
syntax.  See L<perlsub/"Subroutine Attributes"> and L<attributes>.

Lexical warnings pragma, C<use warnings;>, to control optional warnings.
See L<perllexwarn>.

C<use filetest> to control the behaviour of filetests (C<-r> C<-w>
...).  Currently only one subpragma implemented, "use filetest
'access';", that uses access(2) or equivalent to check permissions
instead of using stat(2) as usual.  This matters in filesystems
where there are ACLs (access control lists): the stat(2) might lie,
but access(2) knows better.

The C<open> pragma can be used to specify default disciplines for
handle constructors (e.g. open()) and for qx//.  The two
pseudo-disciplines C<:raw> and C<:crlf> are currently supported on
DOS-derivative platforms (i.e. where binmode is not a no-op).
See also L</"binmode() can be used to set :crlf and :raw modes">.

=head1 Utility Changes

=head2 dprofpp

C<dprofpp> is used to display profile data generated using C<Devel::DProf>.
See L<dprofpp>.

=head2 find2perl

The C<find2perl> utility now uses the enhanced features of the File::Find
module.  The -depth and -follow options are supported.  Pod documentation
is also included in the script.

=head2 h2xs

The C<h2xs> tool can now work in conjunction with C<C::Scan> (available
from CPAN) to automatically parse real-life header files.  The C<-M>,
C<-a>, C<-k>, and C<-o> options are new.

=head2 perlcc

C<perlcc> now supports the C and Bytecode backends.  By default,
it generates output from the simple C backend rather than the
optimized C backend.

Support for non-Unix platforms has been improved.

=head2 perldoc

C<perldoc> has been reworked to avoid possible security holes.
It will not by default let itself be run as the superuser, but you
may still use the B<-U> switch to try to make it drop privileges
first.

=head2 The Perl Debugger

Many bug fixes and enhancements were added to F<perl5db.pl>, the
Perl debugger.  The help documentation was rearranged.  New commands
include C<< < ? >>, C<< > ? >>, and C<< { ? >> to list out current
actions, C<man I<docpage>> to run your doc viewer on some perl
docset, and support for quoted options.  The help information was
rearranged, and should be viewable once again if you're using B<less>
as your pager.  A serious security hole was plugged--you should
immediately remove all older versions of the Perl debugger as
installed in previous releases, all the way back to perl3, from
your system to avoid being bitten by this.

=head1 Improved Documentation

Many of the platform-specific README files are now part of the perl
installation.  See L<perl> for the complete list.

=over 4

=item perlapi.pod

The official list of public Perl API functions.

=item perlboot.pod

A tutorial for beginners on object-oriented Perl.

=item perlcompile.pod

An introduction to using the Perl Compiler suite.

=item perldbmfilter.pod

A howto document on using the DBM filter facility.

=item perldebug.pod

All material unrelated to running the Perl debugger, plus all
low-level guts-like details that risked crushing the casual user
of the debugger, have been relocated from the old manpage to the
next entry below.

=item perldebguts.pod

This new manpage contains excessively low-level material not related
to the Perl debugger, but slightly related to debugging Perl itself.
It also contains some arcane internal details of how the debugging
process works that may only be of interest to developers of Perl
debuggers.

=item perlfork.pod

Notes on the fork() emulation currently available for the Windows platform.

=item perlfilter.pod

An introduction to writing Perl source filters.

=item perlhack.pod

Some guidelines for hacking the Perl source code.

=item perlintern.pod

A list of internal functions in the Perl source code.
(List is currently empty.)

=item perllexwarn.pod

Introduction and reference information about lexically scoped
warning categories.

=item perlnumber.pod

Detailed information about numbers as they are represented in Perl.

=item perlopentut.pod

A tutorial on using open() effectively.

=item perlreftut.pod

A tutorial that introduces the essentials of references.

=item perltootc.pod

A tutorial on managing class data for object modules.

=item perltodo.pod

Discussion of the most often wanted features that may someday be
supported in Perl.

=item perlunicode.pod

An introduction to Unicode support features in Perl.

=back

=head1 Performance enhancements

=head2 Simple sort() using { $a <=> $b } and the like are optimized

Many common sort() operations using a simple inlined block are now
optimized for faster performance.

=head2 Optimized assignments to lexical variables

Certain operations in the RHS of assignment statements have been
optimized to directly set the lexical variable on the LHS,
eliminating redundant copying overheads.

=head2 Faster subroutine calls

Minor changes in how subroutine calls are handled internally
provide marginal improvements in performance.

=head2 delete(), each(), values() and hash iteration are faster

The hash values returned by delete(), each(), values() and hashes in a
list context are the actual values in the hash, instead of copies.
This results in significantly better performance, because it eliminates
needless copying in most situations.

=head1 Installation and Configuration Improvements

=head2 -Dusethreads means something different

The -Dusethreads flag now enables the experimental interpreter-based thread
support by default.  To get the flavor of experimental threads that was in
5.005 instead, you need to run Configure with "-Dusethreads -Duse5005threads".

As of v5.6.0, interpreter-threads support is still lacking a way to
create new threads from Perl (i.e., C<use Thread;> will not work with
interpreter threads).  C<use Thread;> continues to be available when you
specify the -Duse5005threads option to Configure, bugs and all.

    NOTE: Support for threads continues to be an experimental feature.
    Interfaces and implementation are subject to sudden and drastic changes.

=head2 New Configure flags

The following new flags may be enabled on the Configure command line
by running Configure with C<-Dflag>.

    usemultiplicity
    usethreads useithreads	(new interpreter threads: no Perl API yet)
    usethreads use5005threads	(threads as they were in 5.005)

    use64bitint			(equal to now deprecated 'use64bits')
    use64bitall

    uselongdouble
    usemorebits
    uselargefiles
    usesocks			(only SOCKS v5 supported)

=head2 Threadedness and 64-bitness now more daring

The Configure options enabling the use of threads and the use of
64-bitness are now more daring in the sense that they no more have an
explicit list of operating systems of known threads/64-bit
capabilities.  In other words: if your operating system has the
necessary APIs and datatypes, you should be able just to go ahead and
use them, for threads by Configure -Dusethreads, and for 64 bits
either explicitly by Configure -Duse64bitint or implicitly if your
system has 64-bit wide datatypes.  See also L</"64-bit support">.

=head2 Long Doubles

Some platforms have "long doubles", floating point numbers of even
larger range than ordinary "doubles".  To enable using long doubles for
Perl's scalars, use -Duselongdouble.

=head2 -Dusemorebits

You can enable both -Duse64bitint and -Duselongdouble with -Dusemorebits.
See also L</"64-bit support">.

=head2 -Duselargefiles

Some platforms support system APIs that are capable of handling large files
(typically, files larger than two gigabytes).  Perl will try to use these
APIs if you ask for -Duselargefiles.

See L</"Large file support"> for more information. 

=head2 installusrbinperl

You can use "Configure -Uinstallusrbinperl" which causes installperl
to skip installing perl also as /usr/bin/perl.  This is useful if you
prefer not to modify /usr/bin for some reason or another but harmful
because many scripts assume to find Perl in /usr/bin/perl.

=head2 SOCKS support

You can use "Configure -Dusesocks" which causes Perl to probe
for the SOCKS proxy protocol library (v5, not v4).  For more information
on SOCKS, see:

    http://www.socks.nec.com/

=head2 C<-A> flag

You can "post-edit" the Configure variables using the Configure C<-A>
switch.  The editing happens immediately after the platform specific
hints files have been processed but before the actual configuration
process starts.  Run C<Configure -h> to find out the full C<-A> syntax.

=head2 Enhanced Installation Directories

The installation structure has been enriched to improve the support
for maintaining multiple versions of perl, to provide locations for
vendor-supplied modules, scripts, and manpages, and to ease maintenance
of locally-added modules, scripts, and manpages.  See the section on
Installation Directories in the INSTALL file for complete details.
For most users building and installing from source, the defaults should
be fine.

If you previously used C<Configure -Dsitelib> or C<-Dsitearch> to set
special values for library directories, you might wish to consider using
the new C<-Dsiteprefix> setting instead.  Also, if you wish to re-use a
config.sh file from an earlier version of perl, you should be sure to
check that Configure makes sensible choices for the new directories.
See INSTALL for complete details.

=head2 gcc automatically tried if 'cc' does not seem to be working

In many platforms the vendor-supplied 'cc' is too stripped-down to
build Perl (basically, the 'cc' doesn't do ANSI C).  If this seems
to be the case and the 'cc' does not seem to be the GNU C compiler
'gcc', an automatic attempt is made to find and use 'gcc' instead.

=head1 Platform specific changes

=head2 Supported platforms

=over 4

=item *

The Mach CThreads (NEXTSTEP, OPENSTEP) are now supported by the Thread
extension.

=item *

GNU/Hurd is now supported.

=item *

Rhapsody/Darwin is now supported.

=item *

EPOC is now supported (on Psion 5).

=item *

The cygwin port (formerly cygwin32) has been greatly improved.

=back

=head2 DOS

=over 4

=item *

Perl now works with djgpp 2.02 (and 2.03 alpha).

=item *

Environment variable names are not converted to uppercase any more.

=item *

Incorrect exit codes from backticks have been fixed.

=item *

This port continues to use its own builtin globbing (not File::Glob).

=back

=head2 OS390 (OpenEdition MVS)

Support for this EBCDIC platform has not been renewed in this release.
There are difficulties in reconciling Perl's standardization on UTF-8
as its internal representation for characters with the EBCDIC character
set, because the two are incompatible.

It is unclear whether future versions will renew support for this
platform, but the possibility exists.

=head2 VMS

Numerous revisions and extensions to configuration, build, testing, and
installation process to accommodate core changes and VMS-specific options.

Expand %ENV-handling code to allow runtime mapping to logical names,
CLI symbols, and CRTL environ array.

Extension of subprocess invocation code to accept filespecs as command
"verbs".

Add to Perl command line processing the ability to use default file types and
to recognize Unix-style C<2E<gt>&1>.

Expansion of File::Spec::VMS routines, and integration into ExtUtils::MM_VMS.

Extension of ExtUtils::MM_VMS to handle complex extensions more flexibly.

Barewords at start of Unix-syntax paths may be treated as text rather than
only as logical names.

Optional secure translation of several logical names used internally by Perl.

Miscellaneous bugfixing and porting of new core code to VMS.

Thanks are gladly extended to the many people who have contributed VMS
patches, testing, and ideas.

=head2 Win32

Perl can now emulate fork() internally, using multiple interpreters running
in different concurrent threads.  This support must be enabled at build
time.  See L<perlfork> for detailed information.

When given a pathname that consists only of a drivename, such as C<A:>,
opendir() and stat() now use the current working directory for the drive
rather than the drive root.

The builtin XSUB functions in the Win32:: namespace are documented.  See
L<Win32>.

$^X now contains the full path name of the running executable.

A Win32::GetLongPathName() function is provided to complement
Win32::GetFullPathName() and Win32::GetShortPathName().  See L<Win32>.

POSIX::uname() is supported.

system(1,...) now returns true process IDs rather than process
handles.  kill() accepts any real process id, rather than strictly
return values from system(1,...).

For better compatibility with Unix, C<kill(0, $pid)> can now be used to
test whether a process exists.

The C<Shell> module is supported.

Better support for building Perl under command.com in Windows 95
has been added.

Scripts are read in binary mode by default to allow ByteLoader (and
the filter mechanism in general) to work properly.  For compatibility,
the DATA filehandle will be set to text mode if a carriage return is
detected at the end of the line containing the __END__ or __DATA__
token; if not, the DATA filehandle will be left open in binary mode.
Earlier versions always opened the DATA filehandle in text mode.

The glob() operator is implemented via the C<File::Glob> extension,
which supports glob syntax of the C shell.  This increases the flexibility
of the glob() operator, but there may be compatibility issues for
programs that relied on the older globbing syntax.  If you want to
preserve compatibility with the older syntax, you might want to run
perl with C<-MFile::DosGlob>.  For details and compatibility information,
see L<File::Glob>.

=head1 Significant bug fixes

=head2 <HANDLE> on empty files

With C<$/> set to C<undef>, "slurping" an empty file returns a string of
zero length (instead of C<undef>, as it used to) the first time the
HANDLE is read after C<$/> is set to C<undef>.  Further reads yield
C<undef>.

This means that the following will append "foo" to an empty file (it used
to do nothing):

    perl -0777 -pi -e 's/^/foo/' empty_file

The behaviour of:

    perl -pi -e 's/^/foo/' empty_file

is unchanged (it continues to leave the file empty).

=head2 C<eval '...'> improvements

Line numbers (as reflected by caller() and most diagnostics) within
C<eval '...'> were often incorrect where here documents were involved.
This has been corrected.

Lexical lookups for variables appearing in C<eval '...'> within
functions that were themselves called within an C<eval '...'> were
searching the wrong place for lexicals.  The lexical search now
correctly ends at the subroutine's block boundary.

The use of C<return> within C<eval {...}> caused $@ not to be reset
correctly when no exception occurred within the eval.  This has
been fixed.

Parsing of here documents used to be flawed when they appeared as
the replacement expression in C<eval 's/.../.../e'>.  This has
been fixed.

=head2 All compilation errors are true errors

Some "errors" encountered at compile time were by necessity 
generated as warnings followed by eventual termination of the
program.  This enabled more such errors to be reported in a
single run, rather than causing a hard stop at the first error
that was encountered.

The mechanism for reporting such errors has been reimplemented
to queue compile-time errors and report them at the end of the
compilation as true errors rather than as warnings.  This fixes
cases where error messages leaked through in the form of warnings
when code was compiled at run time using C<eval STRING>, and
also allows such errors to be reliably trapped using C<eval "...">.

=head2 Implicitly closed filehandles are safer

Sometimes implicitly closed filehandles (as when they are localized,
and Perl automatically closes them on exiting the scope) could
inadvertently set $? or $!.  This has been corrected.


=head2 Behavior of list slices is more consistent

When taking a slice of a literal list (as opposed to a slice of
an array or hash), Perl used to return an empty list if the
result happened to be composed of all undef values.

The new behavior is to produce an empty list if (and only if)
the original list was empty.  Consider the following example:

    @a = (1,undef,undef,2)[2,1,2];

The old behavior would have resulted in @a having no elements.
The new behavior ensures it has three undefined elements.

Note in particular that the behavior of slices of the following
cases remains unchanged:

    @a = ()[1,2];
    @a = (getpwent)[7,0];
    @a = (anything_returning_empty_list())[2,1,2];
    @a = @b[2,1,2];
    @a = @c{'a','b','c'};

See L<perldata>.

=head2 C<(\$)> prototype and C<$foo{a}>

A scalar reference prototype now correctly allows a hash or
array element in that slot.

=head2 C<goto &sub> and AUTOLOAD

The C<goto &sub> construct works correctly when C<&sub> happens
to be autoloaded.

=head2 C<-bareword> allowed under C<use integer>

The autoquoting of barewords preceded by C<-> did not work
in prior versions when the C<integer> pragma was enabled.
This has been fixed.

=head2 Failures in DESTROY()

When code in a destructor threw an exception, it went unnoticed
in earlier versions of Perl, unless someone happened to be
looking in $@ just after the point the destructor happened to
run.  Such failures are now visible as warnings when warnings are
enabled.

=head2 Locale bugs fixed

printf() and sprintf() previously reset the numeric locale
back to the default "C" locale.  This has been fixed.

Numbers formatted according to the local numeric locale
(such as using a decimal comma instead of a decimal dot) caused
"isn't numeric" warnings, even while the operations accessing
those numbers produced correct results.  These warnings have been
discontinued.

=head2 Memory leaks

The C<eval 'return sub {...}'> construct could sometimes leak
memory.  This has been fixed.

Operations that aren't filehandle constructors used to leak memory
when used on invalid filehandles.  This has been fixed.

Constructs that modified C<@_> could fail to deallocate values
in C<@_> and thus leak memory.  This has been corrected.

=head2 Spurious subroutine stubs after failed subroutine calls

Perl could sometimes create empty subroutine stubs when a
subroutine was not found in the package.  Such cases stopped
later method lookups from progressing into base packages.
This has been corrected.

=head2 Taint failures under C<-U>

When running in unsafe mode, taint violations could sometimes
cause silent failures.  This has been fixed.

=head2 END blocks and the C<-c> switch

Prior versions used to run BEGIN B<and> END blocks when Perl was
run in compile-only mode.  Since this is typically not the expected
behavior, END blocks are not executed anymore when the C<-c> switch
is used, or if compilation fails.

See L</"Support for CHECK blocks"> for how to run things when the compile 
phase ends.

=head2 Potential to leak DATA filehandles

Using the C<__DATA__> token creates an implicit filehandle to
the file that contains the token.  It is the program's
responsibility to close it when it is done reading from it.

This caveat is now better explained in the documentation.
See L<perldata>.

=head1 New or Changed Diagnostics

=over 4

=item "%s" variable %s masks earlier declaration in same %s

(W misc) A "my" or "our" variable has been redeclared in the current scope or statement,
effectively eliminating all access to the previous instance.  This is almost
always a typographical error.  Note that the earlier variable will still exist
until the end of the scope or until all closure referents to it are
destroyed.

=item "my sub" not yet implemented

(F) Lexically scoped subroutines are not yet implemented.  Don't try that
yet.

=item "our" variable %s redeclared

(W misc) You seem to have already declared the same global once before in the
current lexical scope.

=item '!' allowed only after types %s

(F) The '!' is allowed in pack() and unpack() only after certain types.
See L<perlfunc/pack>.

=item / cannot take a count

(F) You had an unpack template indicating a counted-length string,
but you have also specified an explicit size for the string.
See L<perlfunc/pack>.

=item / must be followed by a, A or Z

(F) You had an unpack template indicating a counted-length string,
which must be followed by one of the letters a, A or Z
to indicate what sort of string is to be unpacked.
See L<perlfunc/pack>.

=item / must be followed by a*, A* or Z*

(F) You had a pack template indicating a counted-length string,
Currently the only things that can have their length counted are a*, A* or Z*.
See L<perlfunc/pack>.

=item / must follow a numeric type

(F) You had an unpack template that contained a '#',
but this did not follow some numeric unpack specification.
See L<perlfunc/pack>.

=item /%s/: Unrecognized escape \\%c passed through

(W regexp) You used a backslash-character combination which is not recognized
by Perl.  This combination appears in an interpolated variable or a
C<'>-delimited regular expression.  The character was understood literally.

=item /%s/: Unrecognized escape \\%c in character class passed through

(W regexp) You used a backslash-character combination which is not recognized
by Perl inside character classes.  The character was understood literally.

=item /%s/ should probably be written as "%s"

(W syntax) You have used a pattern where Perl expected to find a string,
as in the first argument to C<join>.  Perl will treat the true
or false result of matching the pattern against $_ as the string,
which is probably not what you had in mind.

=item %s() called too early to check prototype

(W prototype) You've called a function that has a prototype before the parser saw a
definition or declaration for it, and Perl could not check that the call
conforms to the prototype.  You need to either add an early prototype
declaration for the subroutine in question, or move the subroutine
definition ahead of the call to get proper prototype checking.  Alternatively,
if you are certain that you're calling the function correctly, you may put
an ampersand before the name to avoid the warning.  See L<perlsub>.

=item %s argument is not a HASH or ARRAY element

(F) The argument to exists() must be a hash or array element, such as:

    $foo{$bar}
    $ref->{"susie"}[12]

=item %s argument is not a HASH or ARRAY element or slice

(F) The argument to delete() must be either a hash or array element, such as:

    $foo{$bar}
    $ref->{"susie"}[12]

or a hash or array slice, such as:

    @foo[$bar, $baz, $xyzzy]
    @{$ref->[12]}{"susie", "queue"}

=item %s argument is not a subroutine name

(F) The argument to exists() for C<exists &sub> must be a subroutine
name, and not a subroutine call.  C<exists &sub()> will generate this error.

=item %s package attribute may clash with future reserved word: %s

(W reserved) A lowercase attribute name was used that had a package-specific handler.
That name might have a meaning to Perl itself some day, even though it
doesn't yet.  Perhaps you should use a mixed-case attribute name, instead.
See L<attributes>.

=item (in cleanup) %s

(W misc) This prefix usually indicates that a DESTROY() method raised
the indicated exception.  Since destructors are usually called by
the system at arbitrary points during execution, and often a vast
number of times, the warning is issued only once for any number
of failures that would otherwise result in the same message being
repeated.

Failure of user callbacks dispatched using the C<G_KEEPERR> flag
could also result in this warning.  See L<perlcall/G_KEEPERR>.

=item <> should be quotes

(F) You wrote C<< require <file> >> when you should have written
C<require 'file'>.

=item Attempt to join self

(F) You tried to join a thread from within itself, which is an
impossible task.  You may be joining the wrong thread, or you may
need to move the join() to some other thread.

=item Bad evalled substitution pattern

(F) You've used the /e switch to evaluate the replacement for a
substitution, but perl found a syntax error in the code to evaluate,
most likely an unexpected right brace '}'.

=item Bad realloc() ignored

(S) An internal routine called realloc() on something that had never been
malloc()ed in the first place. Mandatory, but can be disabled by
setting environment variable C<PERL_BADFREE> to 1.

=item Bareword found in conditional

(W bareword) The compiler found a bareword where it expected a conditional,
which often indicates that an || or && was parsed as part of the
last argument of the previous construct, for example:

    open FOO || die;

It may also indicate a misspelled constant that has been interpreted
as a bareword:

    use constant TYPO => 1;
    if (TYOP) { print "foo" }

The C<strict> pragma is useful in avoiding such errors.

=item Binary number > 0b11111111111111111111111111111111 non-portable

(W portable) The binary number you specified is larger than 2**32-1
(4294967295) and therefore non-portable between systems.  See
L<perlport> for more on portability concerns.

=item Bit vector size > 32 non-portable

(W portable) Using bit vector sizes larger than 32 is non-portable.

=item Buffer overflow in prime_env_iter: %s

(W internal) A warning peculiar to VMS.  While Perl was preparing to iterate over
%ENV, it encountered a logical name or symbol definition which was too long,
so it was truncated to the string shown.

=item Can't check filesystem of script "%s"

(P) For some reason you can't check the filesystem of the script for nosuid.

=item Can't declare class for non-scalar %s in "%s"

(S) Currently, only scalar variables can declared with a specific class
qualifier in a "my" or "our" declaration.  The semantics may be extended
for other types of variables in future.

=item Can't declare %s in "%s"

(F) Only scalar, array, and hash variables may be declared as "my" or
"our" variables.  They must have ordinary identifiers as names.

=item Can't ignore signal CHLD, forcing to default

(W signal) Perl has detected that it is being run with the SIGCHLD signal
(sometimes known as SIGCLD) disabled.  Since disabling this signal
will interfere with proper determination of exit status of child
processes, Perl has reset the signal to its default value.
This situation typically indicates that the parent program under
which Perl may be running (e.g., cron) is being very careless.

=item Can't modify non-lvalue subroutine call

(F) Subroutines meant to be used in lvalue context should be declared as
such, see L<perlsub/"Lvalue subroutines">.

=item Can't read CRTL environ

(S) A warning peculiar to VMS.  Perl tried to read an element of %ENV
from the CRTL's internal environment array and discovered the array was
missing.  You need to figure out where your CRTL misplaced its environ
or define F<PERL_ENV_TABLES> (see L<perlvms>) so that environ is not searched.

=item Can't remove %s: %s, skipping file 

(S) You requested an inplace edit without creating a backup file.  Perl
was unable to remove the original file to replace it with the modified
file.  The file was left unmodified.

=item Can't return %s from lvalue subroutine

(F) Perl detected an attempt to return illegal lvalues (such
as temporary or readonly values) from a subroutine used as an lvalue.
This is not allowed.

=item Can't weaken a nonreference

(F) You attempted to weaken something that was not a reference.  Only
references can be weakened.

=item Character class [:%s:] unknown

(F) The class in the character class [: :] syntax is unknown.
See L<perlre>.

=item Character class syntax [%s] belongs inside character classes

(W unsafe) The character class constructs [: :], [= =], and [. .]  go
I<inside> character classes, the [] are part of the construct,
for example: /[012[:alpha:]345]/.  Note that [= =] and [. .]
are not currently implemented; they are simply placeholders for
future extensions.

=item Constant is not %s reference

(F) A constant value (perhaps declared using the C<use constant> pragma)
is being dereferenced, but it amounts to the wrong type of reference.  The
message indicates the type of reference that was expected. This usually
indicates a syntax error in dereferencing the constant value.
See L<perlsub/"Constant Functions"> and L<constant>.

