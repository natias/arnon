    'latinextd' => 685,
    'latinexte' => 686,
    'latinextf' => 687,
    'latinextg' => 688,
    'latn' => 689,
    'lb=ai' => 690,
    'lb=al' => 691,
    'lb=b2' => 692,
    'lb=ba' => 693,
    'lb=bb' => 694,
    'lb=bk' => 695,
    'lb=cb' => 696,
    'lb=cj' => 697,
    'lb=cl' => 698,
    'lb=cm' => 699,
    'lb=cp' => 700,
    'lb=cr' => 701,
    'lb=ex' => 702,
    'lb=gl' => 703,
    'lb=h2' => 704,
    'lb=h3' => 705,
    'lb=hl' => 706,
    'lb=hy' => 707,
    'lb=id' => 708,
    'lb=in' => 709,
    'lb=is' => 710,
    'lb=lf' => 711,
    'lb=nl' => 712,
    'lb=ns' => 713,
    'lb=nu' => 714,
    'lb=op' => 715,
    'lb=po' => 716,
    'lb=pr' => 717,
    'lb=qu' => 718,
    'lb=sa' => 719,
    'lb=sg_perl_aux' => 720,
    'lb=sp' => 721,
    'lb=sy' => 722,
    'lb=wj' => 723,
    'lb=xx' => 724,
    'lb=zw' => 725,
    'lb=zwj' => 726,
    'lc' => 97,
    'lepc' => 727,
    'letterlikesymbols' => 728,
    'limb' => 729,
    'lina' => 730,
    'linb' => 731,
    'linearbideograms' => 732,
    'linearbsyllabary' => 733,
    'lisu' => 734,
    'lisusup' => 735,
    'll' => 739,
    'lm' => 736,
    'lo' => 737,
    'loe' => 738,
    'lower' => 1190,
    'lowercase' => 1190,
    'lowercaseletter' => 739,
    'lowsurrogates' => 740,
    'lt' => 1143,
    'lu' => 1152,
    'lyci' => 741,
    'lydi' => 742,
    'm' => 743,
    'mahj' => 744,
    'mahjong' => 745,
    'maka' => 746,
    'mand' => 747,
    'mani' => 748,
    'marc' => 749,
    'math' => 750,
    'mathalphanum' => 751,
    'mathoperators' => 752,
    'mayannumerals' => 753,
    'mc' => 754,
    'me' => 755,
    'medf' => 756,
    'meeteimayekext' => 757,
    'mend' => 758,
    'merc' => 759,
    'mero' => 760,
    'miao' => 761,
    'miscarrows' => 762,
    'miscmathsymbolsa' => 763,
    'miscmathsymbolsb' => 764,
    'miscpictographs' => 765,
    'miscsymbols' => 766,
    'misctechnical' => 767,
    'mlym' => 768,
    'mn' => 769,
    'modi' => 770,
    'modifierletters' => 771,
    'modifiertoneletters' => 772,
    'mong' => 773,
    'mongoliansup' => 774,
    'mro' => 775,
    'mtei' => 776,
    'mult' => 777,
    'music' => 778,
    'myanmarexta' => 779,
    'myanmarextb' => 780,
    'mymr' => 781,
    'n' => 782,
    'nand' => 783,
    'narb' => 784,
    'nb' => 785,
    'nbat' => 786,
    'nd' => 1188,
    'newa' => 787,
    'nfcqc=m' => 788,
    'nfcqc=y' => 789,
    'nfdqc=y' => 790,
    'nfkcqc=n' => 791,
    'nfkcqc=y' => 792,
    'nfkdqc=n' => 793,
    'nko' => 794,
    'nl' => 795,
    'no' => 796,
    'nshu' => 797,
    'nt=di' => 798,
    'nt=nu' => 799,
    'numberforms' => 800,
    'nv=0' => 801,
    'nv=1' => 802,
    'nv=1/10' => 827,
    'nv=1/12' => 828,
    'nv=1/16' => 829,
    'nv=1/160' => 830,
    'nv=1/2' => 831,
    'nv=1/20' => 832,
    'nv=1/3' => 833,
    'nv=1/32' => 834,
    'nv=1/320' => 835,
    'nv=1/4' => 836,
    'nv=1/40' => 837,
    'nv=1/5' => 838,
    'nv=1/6' => 839,
    'nv=1/64' => 840,
    'nv=1/7' => 841,
    'nv=1/8' => 842,
    'nv=1/80' => 843,
    'nv=1/9' => 844,
    'nv=10' => 803,
    'nv=100' => 804,
    'nv=1000' => 805,
    'nv=10000' => 806,
    'nv=100000' => 807,
    'nv=1000000' => 808,
    'nv=10000000' => 809,
    'nv=100000000' => 810,
    'nv=10000000000' => 811,
    'nv=1000000000000' => 812,
    'nv=11' => 813,
    'nv=11/12' => 814,
    'nv=11/2' => 815,
    'nv=12' => 816,
    'nv=13' => 817,
    'nv=13/2' => 818,
    'nv=14' => 819,
    'nv=15' => 820,
    'nv=15/2' => 821,
    'nv=16' => 822,
    'nv=17' => 823,
    'nv=17/2' => 824,
    'nv=18' => 825,
    'nv=19' => 826,
    'nv=2' => 845,
    'nv=2/3' => 862,
    'nv=2/5' => 863,
    'nv=20' => 846,
    'nv=200' => 847,
    'nv=2000' => 848,
    'nv=20000' => 849,
    'nv=200000' => 850,
    'nv=20000000' => 851,
    'nv=21' => 852,
    'nv=216000' => 853,
    'nv=22' => 854,
    'nv=23' => 855,
    'nv=24' => 856,
    'nv=25' => 857,
    'nv=26' => 858,
    'nv=27' => 859,
    'nv=28' => 860,
    'nv=29' => 861,
    'nv=3' => 864,
    'nv=3/16' => 879,
    'nv=3/2' => 880,
    'nv=3/20' => 881,
    'nv=3/4' => 882,
    'nv=3/5' => 883,
    'nv=3/64' => 884,
    'nv=3/8' => 885,
    'nv=3/80' => 886,
    'nv=30' => 865,
    'nv=300' => 866,
    'nv=3000' => 867,
    'nv=30000' => 868,
    'nv=300000' => 869,
    'nv=31' => 870,
    'nv=32' => 871,
    'nv=33' => 872,
    'nv=34' => 873,
    'nv=35' => 874,
    'nv=36' => 875,
    'nv=37' => 876,
    'nv=38' => 877,
    'nv=39' => 878,
    'nv=4' => 887,
    'nv=4/5' => 903,
    'nv=40' => 888,
    'nv=400' => 889,
    'nv=4000' => 890,
    'nv=40000' => 891,
    'nv=400000' => 892,
    'nv=41' => 893,
    'nv=42' => 894,
    'nv=43' => 895,
    'nv=432000' => 896,
    'nv=44' => 897,
    'nv=45' => 898,
    'nv=46' => 899,
    'nv=47' => 900,
    'nv=48' => 901,
    'nv=49' => 902,
    'nv=5' => 904,
    'nv=5/12' => 910,
    'nv=5/2' => 911,
    'nv=5/6' => 912,
    'nv=5/8' => 913,
    'nv=50' => 905,
    'nv=500' => 906,
    'nv=5000' => 907,
    'nv=50000' => 908,
    'nv=500000' => 909,
    'nv=6' => 914,
    'nv=60' => 915,
    'nv=600' => 916,
    'nv=6000' => 917,
    'nv=60000' => 918,
    'nv=600000' => 919,
    'nv=7' => 920,
    'nv=7/12' => 926,
    'nv=7/2' => 927,
    'nv=7/8' => 928,
    'nv=70' => 921,
    'nv=700' => 922,
    'nv=7000' => 923,
    'nv=70000' => 924,
    'nv=700000' => 925,
    'nv=8' => 929,
    'nv=80' => 930,
    'nv=800' => 931,
    'nv=8000' => 932,
    'nv=80000' => 933,
    'nv=800000' => 934,
    'nv=9' => 935,
    'nv=9/2' => 941,
    'nv=90' => 936,
    'nv=900' => 937,
    'nv=9000' => 938,
    'nv=90000' => 939,
    'nv=900000' => 940,
    'nv=_minus_1/2' => 943,
    'nv=nan' => 942,
    'ocr' => 944,
    'ogam' => 945,
    'olck' => 946,
    'orkh' => 947,
    'ornamentaldingbats' => 948,
    'orya' => 949,
    'osge' => 950,
    'osma' => 951,
    'ottomansiyaqnumbers' => 952,
    'ougr' => 953,
    'p' => 954,
    'palm' => 955,
    'patsyn' => 956,
    'pauc' => 957,
    'pc' => 958,
    'pcm' => 959,
    'pd' => 960,
    'pe' => 961,
    'perlspace' => 983,
    'perlword' => 985,
    'perm' => 962,
    'pf' => 963,
    'phag' => 964,
    'phaistos' => 965,
    'phli' => 966,
    'phlp' => 967,
    'phnx' => 968,
    'phoneticext' => 969,
    'phoneticextsup' => 970,
    'pi' => 971,
    'playingcards' => 972,
    'po' => 973,
    'posixalnum' => 974,
    'posixalpha' => 975,
    'posixblank' => 976,
    'posixcntrl' => 977,
    'posixdigit' => 978,
    'posixgraph' => 979,
    'posixlower' => 980,
    'posixprint' => 981,
    'posixpunct' => 982,
    'posixspace' => 983,
    'posixupper' => 984,
    'posixword' => 985,
    'posixxdigit' => 986,
    'print' => 1191,
    'prti' => 987,
    'ps' => 988,
    'pua' => 989,
    'qaai' => 990,
    'qmark' => 991,
    'radical' => 992,
    'ri' => 993,
    'rjng' => 994,
    'rohg' => 995,
    'rumi' => 996,
    'runr' => 997,
    's' => 998,
    'samr' => 999,
    'sarb' => 1000,
    'saur' => 1001,
    'sb=at' => 1002,
    'sb=cl' => 1003,
    'sb=ex' => 1004,
    'sb=fo' => 1005,
    'sb=le' => 1006,
    'sb=lo' => 1007,
    'sb=nu' => 1008,
    'sb=sc' => 1009,
    'sb=se' => 1010,
    'sb=sp' => 1011,
    'sb=st' => 1012,
    'sb=up' => 1013,
    'sb=xx' => 1014,
    'sc' => 1015,
    'sc=adlm' => 1016,
    'sc=arab' => 1017,
    'sc=beng' => 1018,
    'sc=bopo' => 1019,
    'sc=bugi' => 1020,
    'sc=buhd' => 1021,
    'sc=cakm' => 1022,
    'sc=copt' => 1023,
    'sc=cpmn' => 1024,
    'sc=cprt' => 1025,
    'sc=cyrl' => 1026,
    'sc=deva' => 1027,
    'sc=dogr' => 1028,
    'sc=dupl' => 1029,
    'sc=geor' => 1030,
    'sc=glag' => 1031,
    'sc=gong' => 1032,
    'sc=gonm' => 1033,
    'sc=gran' => 1034,
    'sc=grek' => 1035,
    'sc=gujr' => 1036,
    'sc=guru' => 1037,
    'sc=han' => 1038,
    'sc=hang' => 1039,
    'sc=hano' => 1040,
    'sc=hira' => 1041,
    'sc=java' => 1042,
    'sc=kali' => 1043,
    'sc=kana' => 1044,
    'sc=khoj' => 1045,
    'sc=knda' => 1046,
    'sc=kthi' => 1047,
    'sc=latn' => 1048,
    'sc=limb' => 1049,
    'sc=lina' => 1050,
    'sc=linb' => 1051,
    'sc=mahj' => 1052,
    'sc=mand' => 1053,
    'sc=mani' => 1054,
    'sc=mlym' => 1055,
    'sc=modi' => 1056,
    'sc=mong' => 1057,
    'sc=mult' => 1058,
    'sc=mymr' => 1059,
    'sc=nand' => 1060,
    'sc=nko' => 1061,
    'sc=orya' => 1062,
    'sc=ougr' => 1063,
    'sc=perm' => 1064,
    'sc=phag' => 1065,
    'sc=phlp' => 1066,
    'sc=qaai' => 1067,
    'sc=rohg' => 1068,
    'sc=shrd' => 1069,
    'sc=sind' => 1070,
    'sc=sinh' => 1071,
    'sc=sogd' => 1072,
    'sc=sylo' => 1073,
    'sc=syrc' => 1074,
    'sc=tagb' => 1075,
    'sc=takr' => 1076,
    'sc=tale' => 1077,
    'sc=taml' => 1078,
    'sc=telu' => 1079,
    'sc=tglg' => 1080,
    'sc=thaa' => 1081,
    'sc=tirh' => 1082,
    'sc=yezi' => 1083,
    'sc=yi' => 1084,
    'sc=zyyy' => 1085,
    'sd' => 1086,
    'sgnw' => 1087,
    'shaw' => 1088,
    'shorthandformatcontrols' => 1089,
    'shrd' => 1090,
    'sidd' => 1091,
    'sind' => 1092,
    'sinh' => 1093,
    'sinhalaarchaicnumbers' => 1094,
    'sk' => 1095,
    'sm' => 1096,
    'smallforms' => 1097,
    'smallkanaext' => 1098,
    'so' => 1099,
    'sogd' => 1100,
    'sogo' => 1101,
    'sora' => 1102,
    'soyo' => 1103,
    'space' => 1193,
    'spaceperl' => 1193,
    'specials' => 1104,
    'sterm' => 1105,
    'sund' => 1106,
    'sundanesesup' => 1107,
    'suparrowsa' => 1108,
    'suparrowsb' => 1109,
    'suparrowsc' => 1110,
    'superandsub' => 1111,
    'supmathoperators' => 1112,
    'suppuaa' => 1113,
    'suppuab' => 1114,
    'suppunctuation' => 1115,
    'supsymbolsandpictographs' => 1116,
    'suttonsignwriting' => 1117,
    'sylo' => 1118,
    'symbolsandpictographsexta' => 1119,
    'symbolsforlegacycomputing' => 1120,
    'syrc' => 1121,
    'syriacsup' => 1122,
    'tagb' => 1123,
    'tags' => 1124,
    'taixuanjing' => 1125,
    'takr' => 1126,
    'tale' => 1127,
    'talu' => 1128,
    'tamilsup' => 1129,
    'taml' => 1130,
    'tang' => 1131,
    'tangutcomponents' => 1132,
    'tangutsup' => 1133,
    'tavt' => 1134,
    'telu' => 1135,
    'term' => 1136,
    'tfng' => 1137,
    'tglg' => 1138,
    'thaa' => 1139,
    'thai' => 1140,
    'tibt' => 1141,
    'tirh' => 1142,
    'title' => 1143,
    'titlecase' => 1143,
    'titlecaseletter' => 1143,
    'tnsa' => 1144,
    'toto' => 1145,
    'transportandmap' => 1146,
    'ucas' => 1147,
    'ucasext' => 1148,
    'ucasexta' => 1149,
    'ugar' => 1150,
    'uideo' => 1151,
    'upper' => 1194,
    'uppercase' => 1194,
    'uppercaseletter' => 1152,
    'vai' => 1153,
    'vedicext' => 1154,
    'verticalforms' => 1155,
    'vertspace' => 1156,
    'vith' => 1157,
    'vo=r' => 1158,
    'vo=tr' => 1159,
    'vo=tu' => 1160,
    'vo=u' => 1161,
    'vs' => 1162,
    'vssup' => 1163,
    'wara' => 1164,
    'wb=dq' => 1165,
    'wb=eb' => 1166,
    'wb=ex' => 1167,
    'wb=extend' => 1168,
    'wb=fo' => 1169,
    'wb=ka' => 1170,
    'wb=le' => 1171,
    'wb=mb' => 1172,
    'wb=ml' => 1173,
    'wb=mn' => 1174,
    'wb=nl' => 1175,
    'wb=nu' => 1176,
    'wb=sq' => 1177,
    'wb=wsegspace' => 1178,
    'wb=xx' => 1179,
    'wcho' => 1180,
    'whitespace' => 1193,
    'word' => 1195,
    'wspace' => 1193,
    'xdigit' => 1196,
    'xidc' => 1181,
    'xids' => 1182,
    'xpeo' => 1183,
    'xperlspace' => 1193,
    'xposixalnum' => 1184,
    'xposixalpha' => 1185,
    'xposixblank' => 1186,
    'xposixcntrl' => 1187,
    'xposixdigit' => 1188,
    'xposixgraph' => 1189,
    'xposixlower' => 1190,
    'xposixprint' => 1191,
    'xposixpunct' => 1192,
    'xposixspace' => 1193,
    'xposixupper' => 1194,
    'xposixword' => 1195,
    'xposixxdigit' => 1196,
    'xsux' => 1197,
    'yezi' => 1198,
    'yi' => 1199,
    'yijing' => 1200,
    'yiradicals' => 1201,
    'yisyllables' => 1202,
    'z' => 1203,
    'zanb' => 1204,
    'zl' => 1205,
    'znamennymusic' => 1206,
    'zp' => 1207,
    'zs' => 1208,
    'zyyy' => 1209,
    'zzzz' => 1210,
);

1;

# Generated from:
# 688d673ec947f7ccf898b4eae9848139d4d33676b688dee54f449f8bf9d3bbd2 lib/Unicode/UCD.pm
# c7698811e9adb6cc98fb996a7de4be2b6532f2ac67e76055cc8afdbf6ee18af3 lib/unicore/ArabicShaping.txt
# 24a74555f918bbe99f5b3f1b83cf36fc0e205bb8a600a6a3aa539c710a3dcf27 lib/unicore/BidiBrackets.txt
# 7a5c74cedc1616a9af0a9d22e108ae592d86fe93649c144ae6ba49f193a44122 lib/unicore/BidiMirroring.txt
# 598870dddef7b34b5a972916528c456aff2765b79cd4f9647fb58ceb767e7f17 lib/unicore/Blocks.txt
# a566cd48687b2cd897e02501118b2413c14ae86d318f9abbbba97feb84189f0f lib/unicore/CaseFolding.txt
# 3360762fc3295cea54ab251c31df621d05ba4b94d46c60eaac29aa16d70ad1e0 lib/unicore/CompositionExclusions.txt
# 7e058dec02147098bc9c28d86209f0f251bba0538f3b5a705ad02ea3bb709fe0 lib/unicore/DAge.txt
# e3eddd7d469cd1b0feed7528defad1a1cc7c6a9ceb0ae4446a6d10921ed2e7bc lib/unicore/DCoreProperties.txt
# b2c444c20730b097787fdf50bd7d6dd3fc5256ab8084f5b35b11c8776eca674c lib/unicore/DNormalizationProps.txt
# f901ac011aa32a09224d6555da71e2532c59c1d3381322829de0e3b880507250 lib/unicore/EastAsianWidth.txt
# 5995522f01633073911dad1edb74d13aa832f42862c0392a79627b85d52f2391 lib/unicore/EquivalentUnifiedIdeograph.txt
# cd1c9367cba438afa965fcb5edc6ed3ec6e685fd5dd21c0cc20c026f04beb0e5 lib/unicore/HangulSyllableType.txt
# 3f3f368fccdb37f350ecedc20b37fa71ab31c04e847884c77780d34283539f73 lib/unicore/IdStatus.txt
# 45a150c23961b58d7784704af6c4daccd6517d97b6489e53d13bbdbf9e4f065f lib/unicore/IdType.txt
# d8704c8725568813a947ff2ef38bcf1f05e2a6fbea6876ba384890f187a8bf61 lib/unicore/IndicPositionalCategory.txt
# c7b969b653dc278fb66ab4136223d320e30ad19367eb791ae60dcc6d92071b16 lib/unicore/IndicSyllabicCategory.txt
# 39ff89e0a329e1ccce6d54fad8cf82e90926901928c0ca9b9a2ad5681f330dd9 lib/unicore/Jamo.txt
# 9e06e9f35c6959fb91dcc7993f90d58523c3079bc62c6b25f828b4cdebc5d70c lib/unicore/LineBreak.txt
# 14b3b677d33f95c51423dce6eef4a6a28b4b160451ecedee4b91edb6745cf4a3 lib/unicore/NameAliases.txt
# db5745688affcdc0c3927a1ee0667018a96a7b24513f866d5235e98fef6c2436 lib/unicore/NamedSequences.txt
# 6bddfdb850417a5bee6deff19290fd1b138589909afb50f5a049f343bf2c6722 lib/unicore/PropList.txt
# eb755757e20b72b330b2948df3cf2ff7adb0e31bb060140dc09dafb132ace2cd lib/unicore/PropValueAliases.txt
# 859d7225f2d2a460b3ccb1d61a7945f8cc219acdf5aa53b66b7a1e4bf6ebfc87 lib/unicore/PropertyAliases.txt
# d37eedf63ff9c48bac863d5f76862373d6cf5269fd21253d499e2430d638c01d lib/unicore/ScriptExtensions.txt
# 52db475c4ec445e73b0b16915448c357614946ad7062843c563e00d7535c6510 lib/unicore/Scripts.txt
# c667b45908fd269af25fd55d2fc5bbc157fb1b77675936e25c513ce32e080334 lib/unicore/SpecialCasing.txt
# 36018e68657fdcb3485f636630ffe8c8532e01c977703d2803f5b89d6c5feafb lib/unicore/UnicodeData.txt
# 869ff43dd012f924d03c89fc268c88f0e7eea72f0228b91ca30455afdb84f8fd lib/unicore/VerticalOrientation.txt
# ddc7d4d1f3838573b94fc5d83ff7217e63c47b22ae1cd40c5fe1a54efc15589b lib/unicore/auxiliary/GCBTest.txt
# 97e79f1f8d9cd76d120f2420381a01abc00a7c78a2aa583fa3f9627264a99742 lib/unicore/auxiliary/GraphemeBreakProperty.txt
# 488dbb6a7e1d0070d4aa7c175352c818ff6425172850d1b40c6177726658cb05 lib/unicore/auxiliary/LBTest.txt
# 7e42dd749dbb94aa44b13faf9df6319d9a16ce2ea09a3a094fcfbb5962168040 lib/unicore/auxiliary/SBTest.txt
# 7092ca4117cec891c25c7724132efc519e1dece01ae9fd6068035a9db04d526e lib/unicore/auxiliary/SentenceBreakProperty.txt
# 8094b544ec1580c7e41ac0187805cc1aeb330a90301ec7505563e1a59318284e lib/unicore/auxiliary/WBTest.txt
# 7716752aad296d4ab23ff4ed0a2746fc5328750ff84e9e7d6f3828ee9eaef742 lib/unicore/auxiliary/WordBreakProperty.txt
# b597836124298b8f7fa076273802840cfc3271a25f5c397a082e120954b82c3c lib/unicore/emoji/emoji.txt
# e5fe51acc74e3e83b4fb4c7b25f3c34491d6eb8095c9955d0712dafbca7b3c2b lib/unicore/extracted/DBidiClass.txt
# cd0a14176d93bf440b77a582a0d678190fc0688b15442d4cfb250bf2e27956af lib/unicore/extracted/DBinaryProperties.txt
# 12b0c3af9b600b49488d66545a3e7844ea980809627201bf9afeebe1c9f16f4e lib/unicore/extracted/DCombiningClass.txt
# f76064b298cfbd715ba542e7894f7a507d32da2f011070d1d01df95cad9817d6 lib/unicore/extracted/DDecompositionType.txt
# f9bef074cc916db57fece99d54a4505f8e7c7b17481619e3f0005211f7717d4b lib/unicore/extracted/DEastAsianWidth.txt
# cde679c8461976ed40d7edf61ae98cbb947540831f06f5bc7da7decbf91a1420 lib/unicore/extracted/DGeneralCategory.txt
# 9bb891831328713603a486a4a03df7f7987c3e1e8144a6d1ac71fd061ef3f732 lib/unicore/extracted/DJoinGroup.txt
# e97c65bbea0a69d2fae6ec4182b09e519e13232e20bd804b3004edc0f36bb0d4 lib/unicore/extracted/DJoinType.txt
# 43f6df50e4878f501b417e366b0ee097ae5ccb2d4ce942026bed3d62d78e7887 lib/unicore/extracted/DLineBreak.txt
# a04502ebb36a45d83cbe48a7d8132ea8143edb7b3d34d0aa6afe4a9685049741 lib/unicore/extracted/DNumType.txt
# 11075771b112e8e7ccf6ffa637c4c91eadc3ef3db0517b24e605df8fd3624239 lib/unicore/extracted/DNumValues.txt
# 1e514199c3fa46f5df6148d272db7bddbfd5e89c9710e39773ef9d734f344a2f lib/unicore/mktables
# c72bbdeda99714db1c8024d3311da4aef3c0db3b9b9f11455a7cfe10d5e9aba3 lib/unicore/version
# 0a6b5ab33bb1026531f816efe81aea1a8ffcd34a27cbea37dd6a70a63d73c844 regen/charset_translations.pl
# 5f8520d3a17ade6317fc0c423f5091470924b1ef425bca0c41ce8e4a9f8460fe regen/mk_PL_charclass.pl
# 1c73795f9150bd556573e7ae982789377289e22b6a7f3db0a05c36852e8d749f regen/mk_invlists.pl
# ex: set ro:
                                                                                                                                                                                                                                                                                                                                          usr/share/perl/5.36.0/unicore/version                                                               0000644 0000000 0000000 00000000007 14530460112 015717  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        14.0.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/share/perl/5.36.0/utf8.pm                                                                       0000644 0000000 0000000 00000025004 14530460112 014073  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package utf8;

use strict;
use warnings;

our $hint_bits = 0x00800000;

our $VERSION = '1.24';
our $AUTOLOAD;

sub import {
    $^H |= $hint_bits;
}

sub unimport {
    $^H &= ~$hint_bits;
}

sub AUTOLOAD {
    goto &$AUTOLOAD if defined &$AUTOLOAD;
    require Carp;
    Carp::croak("Undefined subroutine $AUTOLOAD called");
}

1;
__END__

=head1 NAME

utf8 - Perl pragma to enable/disable UTF-8 (or UTF-EBCDIC) in source code

=head1 SYNOPSIS

 use utf8;
 no utf8;

 # Convert the internal representation of a Perl scalar to/from UTF-8.

 $num_octets = utf8::upgrade($string);
 $success    = utf8::downgrade($string[, $fail_ok]);

 # Change each character of a Perl scalar to/from a series of
 # characters that represent the UTF-8 bytes of each original character.

 utf8::encode($string);  # "\x{100}"  becomes "\xc4\x80"
 utf8::decode($string);  # "\xc4\x80" becomes "\x{100}"

 # Convert a code point from the platform native character set to
 # Unicode, and vice-versa.
 $unicode = utf8::native_to_unicode(ord('A')); # returns 65 on both
                                               # ASCII and EBCDIC
                                               # platforms
 $native = utf8::unicode_to_native(65);        # returns 65 on ASCII
                                               # platforms; 193 on
                                               # EBCDIC

 $flag = utf8::is_utf8($string); # since Perl 5.8.1
 $flag = utf8::valid($string);

=head1 DESCRIPTION

The C<use utf8> pragma tells the Perl parser to allow UTF-8 in the
program text in the current lexical scope.  The C<no utf8> pragma tells Perl
to switch back to treating the source text as literal bytes in the current
lexical scope.  (On EBCDIC platforms, technically it is allowing UTF-EBCDIC,
and not UTF-8, but this distinction is academic, so in this document the term
UTF-8 is used to mean both).

B<Do not use this pragma for anything else than telling Perl that your
script is written in UTF-8.> The utility functions described below are
directly usable without C<use utf8;>.

Because it is not possible to reliably tell UTF-8 from native 8 bit
encodings, you need either a Byte Order Mark at the beginning of your
source code, or C<use utf8;>, to instruct perl.

When UTF-8 becomes the standard source format, this pragma will
effectively become a no-op.

See also the effects of the C<-C> switch and its cousin, the
C<PERL_UNICODE> environment variable, in L<perlrun>.

Enabling the C<utf8> pragma has the following effect:

=over 4

=item *

Bytes in the source text that are not in the ASCII character set will be
treated as being part of a literal UTF-8 sequence.  This includes most
literals such as identifier names, string constants, and constant
regular expression patterns.

=back

Note that if you have non-ASCII, non-UTF-8 bytes in your script (for example
embedded Latin-1 in your string literals), C<use utf8> will be unhappy.  If
you want to have such bytes under C<use utf8>, you can disable this pragma
until the end the block (or file, if at top level) by C<no utf8;>.

=head2 Utility functions

The following functions are defined in the C<utf8::> package by the
Perl core.  You do not need to say C<use utf8> to use these and in fact
you should not say that unless you really want to have UTF-8 source code.

=over 4

=item * C<$num_octets = utf8::upgrade($string)>

(Since Perl v5.8.0)
Converts in-place the internal representation of the string from an octet
sequence in the native encoding (Latin-1 or EBCDIC) to UTF-8. The
logical character sequence itself is unchanged.  If I<$string> is already
upgraded, then this is a no-op. Returns the
number of octets necessary to represent the string as UTF-8.

If your code needs to be compatible with versions of perl without
C<use feature 'unicode_strings';>, you can force Unicode semantics on
a given string:

  # force unicode semantics for $string without the
  # "unicode_strings" feature
  utf8::upgrade($string);

For example:

  # without explicit or implicit use feature 'unicode_strings'
  my $x = "\xDF";    # LATIN SMALL LETTER SHARP S
  $x =~ /ss/i;       # won't match
  my $y = uc($x);    # won't convert
  utf8::upgrade($x);
  $x =~ /ss/i;       # matches
  my $z = uc($x);    # converts to "SS"

B<Note that this function does not handle arbitrary encodings>;
use L<Encode> instead.

=item * C<$success = utf8::downgrade($string[, $fail_ok])>

(Since Perl v5.8.0)
Converts in-place the internal representation of the string from UTF-8 to the
equivalent octet sequence in the native encoding (Latin-1 or EBCDIC). The
logical character sequence itself is unchanged. If I<$string> is already
stored as native 8 bit, then this is a no-op.  Can be used to make sure that
the UTF-8 flag is off, e.g. when you want to make sure that the substr() or
length() function works with the usually faster byte algorithm.

Fails if the original UTF-8 sequence cannot be represented in the
native 8 bit encoding. On failure dies or, if the value of I<$fail_ok> is
true, returns false. 

Returns true on success.

If your code expects an octet sequence this can be used to validate
that you've received one:

  # throw an exception if not representable as octets
  utf8::downgrade($string)

  # or do your own error handling
  utf8::downgrade($string, 1) or die "string must be octets";

B<Note that this function does not handle arbitrary encodings>;
use L<Encode> instead.

=item * C<utf8::encode($string)>

(Since Perl v5.8.0)
Converts in-place the character sequence to the corresponding octet
sequence in Perl's extended UTF-8. That is, every (possibly wide) character
gets replaced with a sequence of one or more characters that represent the
individual UTF-8 bytes of the character.  The UTF8 flag is turned off.
Returns nothing.

 my $x = "\x{100}"; # $x contains one character, with ord 0x100
 utf8::encode($x);  # $x contains two characters, with ords (on
                    # ASCII platforms) 0xc4 and 0x80.  On EBCDIC
                    # 1047, this would instead be 0x8C and 0x41.

Similar to:

  use Encode;
  $x = Encode::encode("utf8", $x);

B<Note that this function does not handle arbitrary encodings>;
use L<Encode> instead.

=item * C<$success = utf8::decode($string)>

(Since Perl v5.8.0)
Attempts to convert in-place the octet sequence encoded in Perl's extended
UTF-8 to the corresponding character sequence. That is, it replaces each
sequence of characters in the string whose ords represent a valid (extended)
UTF-8 byte sequence, with the corresponding single character.  The UTF-8 flag
is turned on only if the source string contains multiple-byte UTF-8
characters.  If I<$string> is invalid as extended UTF-8, returns false;
otherwise returns true.

 my $x = "\xc4\x80"; # $x contains two characters, with ords
                     # 0xc4 and 0x80
 utf8::decode($x);   # On ASCII platforms, $x contains one char,
                     # with ord 0x100.   Since these bytes aren't
                     # legal UTF-EBCDIC, on EBCDIC platforms, $x is
                     # unchanged and the function returns FALSE.
 my $y = "\xc3\x83\xc2\xab"; This has been encoded twice; this
                     # example is only for ASCII platforms
 utf8::decode($y);   # Converts $y to \xc3\xab, returns TRUE;
 utf8::decode($y);   # Further converts to \xeb, returns TRUE;
 utf8::decode($y);   # Returns FALSE, leaves $y unchanged

B<Note that this function does not handle arbitrary encodings>;
use L<Encode> instead.

=item * C<$unicode = utf8::native_to_unicode($code_point)>

(Since Perl v5.8.0)
This takes an unsigned integer (which represents the ordinal number of a
character (or a code point) on the platform the program is being run on) and
returns its Unicode equivalent value.  Since ASCII platforms natively use the
Unicode code points, this function returns its input on them.  On EBCDIC
platforms it converts from EBCDIC to Unicode.

A meaningless value will currently be returned if the input is not an unsigned
integer.

Since Perl v5.22.0, calls to this function are optimized out on ASCII
platforms, so there is no performance hit in using it there.

=item * C<$native = utf8::unicode_to_native($code_point)>

(Since Perl v5.8.0)
This is the inverse of C<utf8::native_to_unicode()>, converting the other
direction.  Again, on ASCII platforms, this returns its input, but on EBCDIC
platforms it will find the native platform code point, given any Unicode one.

A meaningless value will currently be returned if the input is not an unsigned
integer.

Since Perl v5.22.0, calls to this function are optimized out on ASCII
platforms, so there is no performance hit in using it there.

=item * C<$flag = utf8::is_utf8($string)>

(Since Perl 5.8.1)  Test whether I<$string> is marked internally as encoded in
UTF-8.  Functionally the same as C<Encode::is_utf8($string)>.

Typically only necessary for debugging and testing, if you need to
dump the internals of an SV, L<Devel::Peek's|Devel::Peek> Dump()
provides more detail in a compact form.

If you still think you need this outside of debugging, testing or
dealing with filenames, you should probably read L<perlunitut> and
L<perlunifaq/What is "the UTF8 flag"?>.

Don't use this flag as a marker to distinguish character and binary
data: that should be decided for each variable when you write your
code.

To force unicode semantics in code portable to perl 5.8 and 5.10, call
C<utf8::upgrade($string)> unconditionally.

=item * C<$flag = utf8::valid($string)>

[INTERNAL] Test whether I<$string> is in a consistent state regarding
UTF-8.  Will return true if it is well-formed Perl extended UTF-8 and has the
UTF-8 flag
on B<or> if I<$string> is held as bytes (both these states are 'consistent').
The main reason for this routine is to allow Perl's test suite to check
that operations have left strings in a consistent state.

=back

C<utf8::encode> is like C<utf8::upgrade>, but the UTF8 flag is
cleared.  See L<perlunicode>, and the C API
functions C<L<sv_utf8_upgrade|perlapi/sv_utf8_upgrade>>,
C<L<perlapi/sv_utf8_downgrade>>, C<L<perlapi/sv_utf8_encode>>,
and C<L<perlapi/sv_utf8_decode>>, which are wrapped by the Perl functions
C<utf8::upgrade>, C<utf8::downgrade>, C<utf8::encode> and
C<utf8::decode>.  Also, the functions C<utf8::is_utf8>, C<utf8::valid>,
C<utf8::encode>, C<utf8::decode>, C<utf8::upgrade>, and C<utf8::downgrade> are
actually internal, and thus always available, without a C<require utf8>
statement.

=head1 BUGS

Some filesystems may not support UTF-8 file names, or they may be supported
incompatibly with Perl.  Therefore UTF-8 names that are visible to the
filesystem, such as module names may not work.

=head1 SEE ALSO

L<perlunitut>, L<perluniintro>, L<perlrun>, L<bytes>, L<perlunicode>

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            usr/share/perl/5.36.0/vars.pm                                                                       0000644 0000000 0000000 00000004632 14530460112 014164  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package vars;

use 5.006;

our $VERSION = '1.05';

use warnings::register;
use strict qw(vars subs);

sub import {
    my $callpack = caller;
    my (undef, @imports) = @_;
    my ($sym, $ch);
    foreach (@imports) {
        if (($ch, $sym) = /^([\$\@\%\*\&])(.+)/) {
	    if ($sym =~ /\W/) {
		# time for a more-detailed check-up
		if ($sym =~ /^\w+[[{].*[]}]$/) {
		    require Carp;
		    Carp::croak("Can't declare individual elements of hash or array");
		} elsif (warnings::enabled() and length($sym) == 1 and $sym !~ tr/a-zA-Z//) {
		    warnings::warn("No need to declare built-in vars");
		} elsif  (($^H & strict::bits('vars'))) {
		    require Carp;
		    Carp::croak("'$_' is not a valid variable name under strict vars");
		}
	    }
	    $sym = "${callpack}::$sym" unless $sym =~ /::/;
	    *$sym =
		(  $ch eq "\$" ? \$$sym
		 : $ch eq "\@" ? \@$sym
		 : $ch eq "\%" ? \%$sym
		 : $ch eq "\*" ? \*$sym
		 : $ch eq "\&" ? \&$sym 
		 : do {
		     require Carp;
		     Carp::croak("'$_' is not a valid variable name");
		 });
	} else {
	    require Carp;
	    Carp::croak("'$_' is not a valid variable name");
	}
    }
};

1;
__END__

=head1 NAME

vars - Perl pragma to predeclare global variable names

=head1 SYNOPSIS

    use vars qw($frob @mung %seen);

=head1 DESCRIPTION

NOTE: For use with variables in the current package for a single scope, the
functionality provided by this pragma has been superseded by C<our>
declarations, available in Perl v5.6.0 or later, and use of this pragma is
discouraged.  See L<perlfunc/our>.

This pragma will predeclare all the variables whose names are
in the list, allowing you to use them under C<use strict>, and
disabling any typo warnings for them.

Unlike pragmas that affect the C<$^H> hints variable, the C<use vars> and
C<use subs> declarations are not lexically scoped to the block they appear
in: they affect
the entire package in which they appear.  It is not possible to rescind these
declarations with C<no vars> or C<no subs>.

Packages such as the B<AutoLoader> and B<SelfLoader> that delay
loading of subroutines within packages can create problems with
package lexicals defined using C<my()>. While the B<vars> pragma
cannot duplicate the effect of package lexicals (total transparency
outside of the package), it can act as an acceptable substitute by
pre-declaring global symbols, ensuring their availability to the
later-loaded routines.

See L<perlmodlib/Pragmatic Modules>.

=cut
                                                                                                      usr/share/perl/5.36.0/version/                                                                      0000755 0000000 0000000 00000000000 14714551115 014343  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.36.0/version/Internals.pod                                                         0000644 0000000 0000000 00000060702 14530460112 017003  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

version::Internals - Perl extension for Version Objects

=head1 DESCRIPTION

Overloaded version objects for all modern versions of Perl.  This documents
the internal data representation and underlying code for version.pm.  See
F<version.pod> for daily usage.  This document is only useful for users
interested in the gory details.

=head1 WHAT IS A VERSION?

For the purposes of this module, a version "number" is a sequence of
