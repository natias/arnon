getprotobynumber() routine is available to look up protocols
by their number.

=item C<d_getpent>

From F<d_getpent.U>:

This variable conditionally defines C<HAS_GETPROTOENT> if getprotoent() is
available to look up protocols in some data base or another.

=item C<d_getpgid>

From F<d_getpgid.U>:

This variable conditionally defines the C<HAS_GETPGID> symbol, which
indicates to the C program that the getpgid(pid) function
is available to get the process group id.

=item C<d_getpgrp>

From F<d_getpgrp.U>:

This variable conditionally defines C<HAS_GETPGRP> if getpgrp() is
available to get the current process group.

=item C<d_getpgrp2>

From F<d_getpgrp2.U>:

This variable conditionally defines the HAS_GETPGRP2 symbol, which
indicates to the C program that the getpgrp2() (as in F<DG/C<UX>>) routine
is available to get the current process group.

=item C<d_getppid>

From F<d_getppid.U>:

This variable conditionally defines the C<HAS_GETPPID> symbol, which
indicates to the C program that the getppid() routine is available
to get the parent process C<ID>.

=item C<d_getprior>

From F<d_getprior.U>:

This variable conditionally defines C<HAS_GETPRIORITY> if getpriority()
is available to get a process's priority.

=item C<d_getprotobyname_r>

From F<d_getprotobyname_r.U>:

This variable conditionally defines the C<HAS_GETPROTOBYNAME_R> symbol,
which indicates to the C program that the getprotobyname_r()
routine is available.

=item C<d_getprotobynumber_r>

From F<d_getprotobynumber_r.U>:

This variable conditionally defines the C<HAS_GETPROTOBYNUMBER_R> symbol,
which indicates to the C program that the getprotobynumber_r()
routine is available.

=item C<d_getprotoent_r>

From F<d_getprotoent_r.U>:

This variable conditionally defines the C<HAS_GETPROTOENT_R> symbol,
which indicates to the C program that the getprotoent_r()
routine is available.

=item C<d_getprotoprotos>

From F<d_getprotoprotos.U>:

This variable conditionally defines the C<HAS_GETPROTO_PROTOS> symbol,
which indicates to the C program that <netdb.h> supplies
prototypes for the various getproto*() functions.
See also F<netdbtype.U> for probing for various netdb types.

=item C<d_getprpwnam>

From F<d_getprpwnam.U>:

This variable conditionally defines C<HAS_GETPRPWNAM> if getprpwnam() is
available to retrieve protected (shadow) password entries by name.

=item C<d_getpwent>

From F<d_getpwent.U>:

This variable conditionally defines the C<HAS_GETPWENT> symbol, which
indicates to the C program that the getpwent() routine is available
for sequential access of the passwd database.

=item C<d_getpwent_r>

From F<d_getpwent_r.U>:

This variable conditionally defines the C<HAS_GETPWENT_R> symbol,
which indicates to the C program that the getpwent_r()
routine is available.

=item C<d_getpwnam_r>

From F<d_getpwnam_r.U>:

This variable conditionally defines the C<HAS_GETPWNAM_R> symbol,
which indicates to the C program that the getpwnam_r()
routine is available.

=item C<d_getpwuid_r>

From F<d_getpwuid_r.U>:

This variable conditionally defines the C<HAS_GETPWUID_R> symbol,
which indicates to the C program that the getpwuid_r()
routine is available.

=item C<d_getsbyname>

From F<d_getsrvby.U>:

This variable conditionally defines the C<HAS_GETSERVBYNAME>
symbol, which indicates to the C program that the
getservbyname() routine is available to look up services
by their name.

=item C<d_getsbyport>

From F<d_getsrvby.U>:

This variable conditionally defines the C<HAS_GETSERVBYPORT>
symbol, which indicates to the C program that the
getservbyport() routine is available to look up services
by their port.

=item C<d_getsent>

From F<d_getsent.U>:

This variable conditionally defines C<HAS_GETSERVENT> if getservent() is
available to look up network services in some data base or another.

=item C<d_getservbyname_r>

From F<d_getservbyname_r.U>:

This variable conditionally defines the C<HAS_GETSERVBYNAME_R> symbol,
which indicates to the C program that the getservbyname_r()
routine is available.

=item C<d_getservbyport_r>

From F<d_getservbyport_r.U>:

This variable conditionally defines the C<HAS_GETSERVBYPORT_R> symbol,
which indicates to the C program that the getservbyport_r()
routine is available.

=item C<d_getservent_r>

From F<d_getservent_r.U>:

This variable conditionally defines the C<HAS_GETSERVENT_R> symbol,
which indicates to the C program that the getservent_r()
routine is available.

=item C<d_getservprotos>

From F<d_getservprotos.U>:

This variable conditionally defines the C<HAS_GETSERV_PROTOS> symbol,
which indicates to the C program that <netdb.h> supplies
prototypes for the various getserv*() functions.
See also F<netdbtype.U> for probing for various netdb types.

=item C<d_getspnam>

From F<d_getspnam.U>:

This variable conditionally defines C<HAS_GETSPNAM> if getspnam() is
available to retrieve SysV shadow password entries by name.

=item C<d_getspnam_r>

From F<d_getspnam_r.U>:

This variable conditionally defines the C<HAS_GETSPNAM_R> symbol,
which indicates to the C program that the getspnam_r()
routine is available.

=item C<d_gettimeod>

From F<d_ftime.U>:

This variable conditionally defines the C<HAS_GETTIMEOFDAY> symbol, which
indicates that the gettimeofday() system call exists (to obtain a
sub-second accuracy clock). You should probably include <sys/resource.h>.

=item C<d_gmtime64>

From F<d_timefuncs64.U>:

This variable conditionally defines the HAS_GMTIME64 symbol, which
indicates to the C program that the gmtime64 () routine is available.

=item C<d_gmtime_r>

From F<d_gmtime_r.U>:

This variable conditionally defines the C<HAS_GMTIME_R> symbol,
which indicates to the C program that the gmtime_r()
routine is available.

=item C<d_gnulibc>

From F<d_gnulibc.U>:

Defined if we're dealing with the C<GNU> C Library.

=item C<d_grpasswd>

From F<i_grp.U>:

This variable conditionally defines C<GRPASSWD>, which indicates
that struct group in <grp.h> contains gr_passwd.

=item C<d_has_C_UTF8>

From F<d_setlocale.U>:

This variable is set to either C<true> or C<false> depending on
whether the compilation system supports the F<C.UTF>-8 locale.

=item C<d_hasmntopt>

From F<d_hasmntopt.U>:

This variable conditionally defines the C<HAS_HASMNTOPT> symbol, which
indicates to the C program that the hasmntopt() routine is available
to query the mount options of file systems.

=item C<d_htonl>

From F<d_htonl.U>:

This variable conditionally defines C<HAS_HTONL> if htonl() and its
friends are available to do network order byte swapping.

=item C<d_hypot>

From F<d_hypot.U>:

This variable conditionally defines C<HAS_HYPOT> if hypot is available
for numerically stable hypotenuse function.

=item C<d_ilogb>

From F<d_ilogb.U>:

This variable conditionally defines the C<HAS_ILOGB> symbol, which
indicates to the C program that the ilogb() routine is available
for extracting the exponent of double x as a signed integer.

=item C<d_ilogbl>

From F<d_ilogbl.U>:

This variable conditionally defines the C<HAS_ILOGBL> symbol, which
indicates to the C program that the ilogbl() routine is available
for extracting the exponent of long double x as a signed integer.
If scalbnl is also present we can emulate frexpl.

=item C<d_inc_version_list>

From F<inc_version_list.U>:

This variable conditionally defines C<PERL_INC_VERSION_LIST>.
It is set to undef when C<PERL_INC_VERSION_LIST> is empty.

=item C<d_inetaton>

From F<d_inetaton.U>:

This variable conditionally defines the C<HAS_INET_ATON> symbol, which
indicates to the C program that the inet_aton() function is available
to parse C<IP> address C<dotted-quad> strings.

=item C<d_inetntop>

From F<d_inetntop.U>:

This variable conditionally defines the C<HAS_INETNTOP> symbol,
which indicates to the C program that the inet_ntop() function
is available.

=item C<d_inetpton>

From F<d_inetpton.U>:

This variable conditionally defines the C<HAS_INETPTON> symbol,
which indicates to the C program that the inet_pton() function
is available.

=item C<d_int64_t>

From F<d_int64_t.U>:

This symbol will be defined if the C compiler supports int64_t.

=item C<d_ip_mreq>

From F<d_socket.U>:

This variable conditionally defines the C<HAS_IP_MREQ> symbol, which
indicates the availability of a struct ip_mreq.

=item C<d_ip_mreq_source>

From F<d_socket.U>:

This variable conditionally defines the C<HAS_IP_MREQ_SOURCE> symbol,
which indicates the availability of a struct ip_mreq_source.

=item C<d_ipv6_mreq>

From F<d_socket.U>:

This variable conditionally defines the HAS_IPV6_MREQ symbol, which
indicates the availability of a struct ipv6_mreq.

=item C<d_ipv6_mreq_source>

From F<d_socket.U>:

This variable conditionally defines the HAS_IPV6_MREQ_SOURCE symbol,
which indicates the availability of a struct ipv6_mreq_source.

=item C<d_isascii>

From F<d_isascii.U>:

This variable conditionally defines the C<HAS_ISASCII> constant,
which indicates to the C program that isascii() is available.

=item C<d_isblank>

From F<d_isblank.U>:

This variable conditionally defines the C<HAS_ISBLANK> constant,
which indicates to the C program that isblank() is available.

=item C<d_isfinite>

From F<d_isfinite.U>:

This variable conditionally defines the C<HAS_ISFINITE> symbol, which
indicates to the C program that the isfinite() routine is available.

=item C<d_isfinitel>

From F<d_isfinitel.U>:

This variable conditionally defines the C<HAS_ISFINITEL> symbol, which
indicates to the C program that the isfinitel() routine is available.

=item C<d_isinf>

From F<d_isinf.U>:

This variable conditionally defines the C<HAS_ISINF> symbol, which
indicates to the C program that the isinf() routine is available.

=item C<d_isinfl>

From F<d_isinfl.U>:

This variable conditionally defines the C<HAS_ISINFL> symbol, which
indicates to the C program that the isinfl() routine is available.

=item C<d_isless>

From F<d_isless.U>:

This variable conditionally defines the C<HAS_ISLESS> symbol, which
indicates to the C program that the isless() routine is available.

=item C<d_isnan>

From F<d_isnan.U>:

This variable conditionally defines the C<HAS_ISNAN> symbol, which
indicates to the C program that the isnan() routine is available.

=item C<d_isnanl>

From F<d_isnanl.U>:

This variable conditionally defines the C<HAS_ISNANL> symbol, which
indicates to the C program that the isnanl() routine is available.

=item C<d_isnormal>

From F<d_isnormal.U>:

This variable conditionally defines the C<HAS_ISNORMAL> symbol, which
indicates to the C program that the isnormal() routine is available.

=item C<d_j0>

From F<d_j0.U>:

This variable conditionally defines the HAS_J0 symbol, which
indicates to the C program that the j0() routine is available.

=item C<d_j0l>

From F<d_j0.U>:

This variable conditionally defines the HAS_J0L symbol, which
indicates to the C program that the j0l() routine is available.

=item C<d_killpg>

From F<d_killpg.U>:

This variable conditionally defines the C<HAS_KILLPG> symbol, which
indicates to the C program that the killpg() routine is available
to kill process groups.

=item C<d_lc_monetary_2008>

From F<d_lc_monetary_2008.U>:

This variable conditionally defines HAS_LC_MONETARY_2008 if libc
has the international currency locale rules from C<POSIX>
1003.1-2008.

=item C<d_lchown>

From F<d_lchown.U>:

This variable conditionally defines the C<HAS_LCHOWN> symbol, which
indicates to the C program that the lchown() routine is available
to operate on a symbolic link (instead of following the link).

=item C<d_ldbl_dig>

From F<d_ldbl_dig.U>:

This variable conditionally defines d_ldbl_dig if this system's
header files provide C<LDBL_DIG>, which is the number of significant
digits in a long double precision number.

=item C<d_ldexpl>

From F<d_longdbl.U>:

This variable conditionally defines the C<HAS_LDEXPL> symbol, which
indicates to the C program that the ldexpl() routine is available.

=item C<d_lgamma>

From F<d_lgamma.U>:

This variable conditionally defines the C<HAS_LGAMMA> symbol, which
indicates to the C program that the lgamma() routine is available
for the log gamma function.  See also d_tgamma and d_lgamma_r.

=item C<d_lgamma_r>

From F<d_lgamma_r.U>:

This variable conditionally defines the C<HAS_LGAMMA_R> symbol, which
indicates to the C program that the lgamma_r() routine is available
for the log gamma function, without using the global signgam variable.

=item C<d_libm_lib_version>

From F<d_libm_lib_version.U>:

This variable conditionally defines the C<LIBM_LIB_VERSION> symbol,
which indicates to the C program that F<math.h> defines C<_LIB_VERSION>
being available in libm

=item C<d_libname_unique>

From F<so.U>:

This variable is defined if the target system insists on unique
basenames for shared library files. This is currently true on Android,
false everywhere else we know of.
Defaults to C<undef>.

=item C<d_link>

From F<d_link.U>:

This variable conditionally defines C<HAS_LINK> if link() is
available to create hard links.

=item C<d_linkat>

From F<d_fsat.U>:

This variable conditionally defines the C<HAS_LINKAT> symbol, which
indicates the C<POSIX> linkat() function is available.

=item C<d_llrint>

From F<d_llrint.U>:

This variable conditionally defines the C<HAS_LLRINT> symbol, which
indicates to the C program that the llrint() routine is available
to return the long long value closest to a double (according
to the current rounding mode).

=item C<d_llrintl>

From F<d_llrintl.U>:

This variable conditionally defines the C<HAS_LLRINTL> symbol, which
indicates to the C program that the llrintl() routine is available
to return the long long value closest to a long double (according
to the current rounding mode).

=item C<d_llround>

From F<d_llround.U>:

This variable conditionally defines the C<HAS_LLROUND> symbol, which
indicates to the C program that the llround() routine is available
to return the long long value nearest to x.

=item C<d_llroundl>

From F<d_llroundl.U>:

This variable conditionally defines the C<HAS_LLROUNDL> symbol, which
indicates to the C program that the llroundl() routine is available
to return the long long value nearest to x away from zero.

=item C<d_localeconv_l>

From F<d_localeconv_l.U>:

This variable conditionally defines the C<HAS_LOCALECONV_L> symbol, which
indicates to the C program that the localeconv_l() routine is available.

=item C<d_localtime64>

From F<d_timefuncs64.U>:

This variable conditionally defines the HAS_LOCALTIME64 symbol, which
indicates to the C program that the localtime64 () routine is available.

=item C<d_localtime_r>

From F<d_localtime_r.U>:

This variable conditionally defines the C<HAS_LOCALTIME_R> symbol,
which indicates to the C program that the localtime_r()
routine is available.

=item C<d_localtime_r_needs_tzset>

From F<d_localtime_r.U>:

This variable conditionally defines the C<LOCALTIME_R_NEEDS_TZSET>
symbol, which makes us call tzset before localtime_r()

=item C<d_locconv>

From F<d_locconv.U>:

This variable conditionally defines C<HAS_LOCALECONV> if localeconv() is
available for numeric and monetary formatting conventions.

=item C<d_lockf>

From F<d_lockf.U>:

This variable conditionally defines C<HAS_LOCKF> if lockf() is
available to do file locking.

=item C<d_log1p>

From F<d_log1p.U>:

This variable conditionally defines the HAS_LOG1P symbol, which
indicates to the C program that the logp1() routine is available
to compute log(1 + x) for values of x close to zero.

=item C<d_log2>

From F<d_log2.U>:

This variable conditionally defines the HAS_LOG2 symbol, which
indicates to the C program that the log2() routine is available
to compute log base two.

=item C<d_logb>

From F<d_logb.U>:

This variable conditionally defines the C<HAS_LOGB> symbol, which
indicates to the C program that the logb() routine is available
to extract the exponent of x.

=item C<d_long_double_style_ieee>

From F<d_longdbl.U>:

This variable conditionally defines C<LONG_DOUBLE_STYLE_IEEE>
if the long double is any of the C<IEEE> 754 style long doubles:
C<LONG_DOUBLE_STYLE_IEEE_STD>, C<LONG_DOUBLE_STYLE_IEEE_EXTENDED>,
C<LONG_DOUBLE_STYLE_IEEE_DOUBLEDOUBLE>.

=item C<d_long_double_style_ieee_doubledouble>

From F<d_longdbl.U>:

This variable conditionally defines C<LONG_DOUBLE_STYLE_IEEE_DOUBLEDOUBLE>
if the long double is the 128-bit C<IEEE> 754 double-double.

=item C<d_long_double_style_ieee_extended>

From F<d_longdbl.U>:

This variable conditionally defines C<LONG_DOUBLE_STYLE_IEEE_EXTENDED>
if the long double is the 80-bit C<IEEE> 754 extended precision.
Note that despite the C<extended> this is less than the C<std>,
since this is an extension of the double precision.

=item C<d_long_double_style_ieee_std>

From F<d_longdbl.U>:

This variable conditionally defines C<LONG_DOUBLE_STYLE_IEEE_STD>
if the long double is the 128-bit C<IEEE> 754.

=item C<d_long_double_style_vax>

From F<d_longdbl.U>:

This variable conditionally defines C<LONG_DOUBLE_STYLE_VAX>
if the long double is the 128-bit C<VAX> format H.

=item C<d_longdbl>

From F<d_longdbl.U>:

This variable conditionally defines C<HAS_LONG_DOUBLE> if
the long double type is supported.

=item C<d_longlong>

From F<d_longlong.U>:

This variable conditionally defines C<HAS_LONG_LONG> if
the long long type is supported.

=item C<d_lrint>

From F<d_lrint.U>:

This variable conditionally defines the C<HAS_LRINT> symbol, which
indicates to the C program that the lrint() routine is available
to return the integral value closest to a double (according
to the current rounding mode).

=item C<d_lrintl>

From F<d_lrintl.U>:

This variable conditionally defines the C<HAS_LRINTL> symbol, which
indicates to the C program that the lrintl() routine is available
to return the integral value closest to a long double (according
to the current rounding mode).

=item C<d_lround>

From F<d_lround.U>:

This variable conditionally defines the C<HAS_LROUND> symbol, which
indicates to the C program that the lround() routine is available
to return the integral value nearest to x.

=item C<d_lroundl>

From F<d_lroundl.U>:

This variable conditionally defines the C<HAS_LROUNDL> symbol, which
indicates to the C program that the lroundl() routine is available
to return the integral value nearest to x away from zero.

=item C<d_lseekproto>

From F<d_lseekproto.U>:

This variable conditionally defines the C<HAS_LSEEK_PROTO> symbol,
which indicates to the C program that the system provides
a prototype for the lseek() function.  Otherwise, it is
up to the program to supply one.

=item C<d_lstat>

From F<d_lstat.U>:

This variable conditionally defines C<HAS_LSTAT> if lstat() is
available to do file stats on symbolic links.

=item C<d_madvise>

From F<d_madvise.U>:

This variable conditionally defines C<HAS_MADVISE> if madvise() is
available to map a file into memory.

=item C<d_malloc_good_size>

From F<d_malloc_size.U>:

This symbol, if defined, indicates that the malloc_good_size
routine is available for use.

=item C<d_malloc_size>

From F<d_malloc_size.U>:

This symbol, if defined, indicates that the malloc_size
routine is available for use.

=item C<d_malloc_usable_size>

From F<d_malloc_size.U>:

This symbol, if defined, indicates that the malloc_usable_size
routine is available for use.

=item C<d_mblen>

From F<d_mblen.U>:

This variable conditionally defines the C<HAS_MBLEN> symbol, which
indicates to the C program that the mblen() routine is available
to find the number of bytes in a multibyte character.

=item C<d_mbrlen>

From F<d_mbrlen.U>:

This variable conditionally defines the C<HAS_MBRLEN> symbol if the
mbrlen() routine is available to be used to get the length of
multi-byte character strings.

=item C<d_mbrtowc>

From F<d_mbrtowc.U>:

This variable conditionally defines the C<HAS_MBRTOWC> symbol if the
mbrtowc() routine is available to be used to convert a multi-byte
character into a wide character.

=item C<d_mbstowcs>

From F<d_mbstowcs.U>:

This variable conditionally defines the C<HAS_MBSTOWCS> symbol, which
indicates to the C program that the mbstowcs() routine is available
to convert a multibyte string into a wide character string.

=item C<d_mbtowc>

From F<d_mbtowc.U>:

This variable conditionally defines the C<HAS_MBTOWC> symbol, which
indicates to the C program that the mbtowc() routine is available
to convert multibyte to a wide character.

=item C<d_memmem>

From F<d_memmem.U>:

This variable conditionally defines the C<HAS_MEMMEM> symbol, which
indicates to the C program that the memmem() routine is available
to return a pointer to the start of the first occurrence of a
substring in a memory area (or C<NULL> if not found).

=item C<d_memrchr>

From F<d_memrchr.U>:

This variable conditionally defines the C<HAS_MEMRCHR> symbol, which
indicates to the C program that the memrchr() routine is available
to return a pointer to the last occurrence of a byte in a memory
area (or C<NULL> if not found).

=item C<d_mkdir>

From F<d_mkdir.U>:

This variable conditionally defines the C<HAS_MKDIR> symbol, which
indicates to the C program that the mkdir() routine is available
to create F<directories.>.

=item C<d_mkdtemp>

From F<d_mkdtemp.U>:

This variable conditionally defines the C<HAS_MKDTEMP> symbol, which
indicates to the C program that the mkdtemp() routine is available
to exclusively create a uniquely named temporary directory.

=item C<d_mkfifo>

From F<d_mkfifo.U>:

This variable conditionally defines the C<HAS_MKFIFO> symbol, which
indicates to the C program that the mkfifo() routine is available.

=item C<d_mkostemp>

From F<d_mkostemp.U>:

This variable conditionally defines C<HAS_MKOSTEMP> if mkostemp() is
available to exclusively create and open a uniquely named (with a
suffix) temporary file.

=item C<d_mkstemp>

From F<d_mkstemp.U>:

This variable conditionally defines the C<HAS_MKSTEMP> symbol, which
indicates to the C program that the mkstemp() routine is available
to exclusively create and open a uniquely named temporary file.

=item C<d_mkstemps>

From F<d_mkstemps.U>:

This variable conditionally defines the C<HAS_MKSTEMPS> symbol, which
indicates to the C program that the mkstemps() routine is available
to exclusively create and open a uniquely named (with a suffix)
temporary file.

=item C<d_mktime>

From F<d_mktime.U>:

This variable conditionally defines the C<HAS_MKTIME> symbol, which
indicates to the C program that the mktime() routine is available.

=item C<d_mktime64>

From F<d_timefuncs64.U>:

This variable conditionally defines the HAS_MKTIME64 symbol, which
indicates to the C program that the mktime64 () routine is available.

=item C<d_mmap>

From F<d_mmap.U>:

This variable conditionally defines C<HAS_MMAP> if mmap() is
available to map a file into memory.

=item C<d_modfl>

From F<d_modfl.U>:

This variable conditionally defines the C<HAS_MODFL> symbol, which
indicates to the C program that the modfl() routine is available.

=item C<d_modflproto>

From F<d_modfl.U>:

This symbol, if defined, indicates that the system provides
a prototype for the modfl() function.  Otherwise, it is up
to the program to supply one.  C99 says it should be
long double modfl(long double, long double *);

=item C<d_mprotect>

From F<d_mprotect.U>:

This variable conditionally defines C<HAS_MPROTECT> if mprotect() is
available to modify the access protection of a memory mapped file.

=item C<d_msg>

From F<d_msg.U>:

This variable conditionally defines the C<HAS_MSG> symbol, which
indicates that the entire msg*(2) library is present.

=item C<d_msg_ctrunc>

From F<d_socket.U>:

This variable conditionally defines the C<HAS_MSG_CTRUNC> symbol,
which indicates that the C<MSG_CTRUNC> is available.  #ifdef is
not enough because it may be an enum, glibc has been known to do this.

=item C<d_msg_dontroute>

From F<d_socket.U>:

This variable conditionally defines the C<HAS_MSG_DONTROUTE> symbol,
which indicates that the C<MSG_DONTROUTE> is available.  #ifdef is
not enough because it may be an enum, glibc has been known to do this.

=item C<d_msg_oob>

From F<d_socket.U>:

This variable conditionally defines the C<HAS_MSG_OOB> symbol,
which indicates that the C<MSG_OOB> is available.  #ifdef is
not enough because it may be an enum, glibc has been known to do this.

=item C<d_msg_peek>

From F<d_socket.U>:

This variable conditionally defines the C<HAS_MSG_PEEK> symbol,
which indicates that the C<MSG_PEEK> is available.  #ifdef is
not enough because it may be an enum, glibc has been known to do this.

=item C<d_msg_proxy>

From F<d_socket.U>:

This variable conditionally defines the C<HAS_MSG_PROXY> symbol,
which indicates that the C<MSG_PROXY> is available.  #ifdef is
not enough because it may be an enum, glibc has been known to do this.

=item C<d_msgctl>

From F<d_msgctl.U>:

This variable conditionally defines the C<HAS_MSGCTL> symbol, which
indicates to the C program that the msgctl() routine is available.

=item C<d_msgget>

From F<d_msgget.U>:

This variable conditionally defines the C<HAS_MSGGET> symbol, which
indicates to the C program that the msgget() routine is available.

=item C<d_msghdr_s>

From F<d_msghdr_s.U>:

This variable conditionally defines the C<HAS_STRUCT_MSGHDR> symbol,
which indicates that the struct msghdr is supported.

=item C<d_msgrcv>

From F<d_msgrcv.U>:

This variable conditionally defines the C<HAS_MSGRCV> symbol, which
indicates to the C program that the msgrcv() routine is available.

=item C<d_msgsnd>

From F<d_msgsnd.U>:

This variable conditionally defines the C<HAS_MSGSND> symbol, which
indicates to the C program that the msgsnd() routine is available.

=item C<d_msync>

From F<d_msync.U>:

This variable conditionally defines C<HAS_MSYNC> if msync() is
available to synchronize a mapped file.

=item C<d_munmap>

From F<d_munmap.U>:

This variable conditionally defines C<HAS_MUNMAP> if munmap() is
available to unmap a region mapped by mmap().

=item C<d_mymalloc>

From F<mallocsrc.U>:

This variable conditionally defines C<MYMALLOC> in case other parts
of the source want to take special action if C<MYMALLOC> is used.
This may include different sorts of profiling or error detection.

=item C<d_nan>

From F<d_nan.U>:

