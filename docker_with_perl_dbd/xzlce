
=back

=head1 Utility Changes

=head3 L<h2ph>

=over 4

=item *

L<h2ph> used to generate code of the form

  unless(defined(&FOO)) {
    sub FOO () {42;}
  }

But the subroutine is a compile-time declaration, and is hence unaffected
by the condition.  It has now been corrected to emit a string C<eval>
around the subroutine [perl #99368].

=back

=head3 L<splain>

=over 4

=item *

F<splain> no longer emits backtraces with the first line number repeated.

This:

    Uncaught exception from user code:
            Cannot fwiddle the fwuddle at -e line 1.
     at -e line 1
            main::baz() called at -e line 1
            main::bar() called at -e line 1
            main::foo() called at -e line 1

has become this:

    Uncaught exception from user code:
            Cannot fwiddle the fwuddle at -e line 1.
            main::baz() called at -e line 1
            main::bar() called at -e line 1
            main::foo() called at -e line 1

=item *

Some error messages consist of multiple lines that are listed as separate
entries in L<perldiag>.  splain has been taught to find the separate
entries in these cases, instead of simply failing to find the message.

=back

=head3 L<zipdetails>

=over 4

=item *

This is a new utility, included as part of an
L<IO::Compress::Base> upgrade.

L<zipdetails> displays information about the internal record structure
of the zip file.  It is not concerned with displaying any details of
the compressed data stored in the zip file.

=back

=head1 Configuration and Compilation

=over 4

=item *

F<regexp.h> has been modified for compatibility with GCC's B<-Werror>
option, as used by some projects that include perl's header files (5.14.1).

=item *

C<USE_LOCALE{,_COLLATE,_CTYPE,_NUMERIC}> have been added the output of perl -V
as they have affect the behavior of the interpreter binary (albeit
in only a small area).

=item *

The code and tests for L<IPC::Open2> have been moved from F<ext/IPC-Open2>
into F<ext/IPC-Open3>, as C<IPC::Open2::open2()> is implemented as a thin
wrapper around C<IPC::Open3::_open3()>, and hence is very tightly coupled to
it.

=item *

The magic types and magic vtables are now generated from data in a new script
F<regen/mg_vtable.pl>, instead of being maintained by hand.  As different
EBCDIC variants can't agree on the code point for '~', the character to code
point conversion is done at build time by F<generate_uudmap> to a new generated
header F<mg_data.h>.  C<PL_vtbl_bm> and C<PL_vtbl_fm> are now defined by the
pre-processor as C<PL_vtbl_regexp>, instead of being distinct C variables.
C<PL_vtbl_sig> has been removed.

=item *

Building with C<-DPERL_GLOBAL_STRUCT> works again.  This configuration is not
generally used.

=item *

Perl configured with I<MAD> now correctly frees C<MADPROP> structures when
OPs are freed.  C<MADPROP>s are now allocated with C<PerlMemShared_malloc()>

=item *

F<makedef.pl> has been refactored.  This should have no noticeable affect on
any of the platforms that use it as part of their build (AIX, VMS, Win32).

=item *

C<useperlio> can no longer be disabled.

=item *

The file F<global.sym> is no longer needed, and has been removed.  It
contained a list of all exported functions, one of the files generated by
F<regen/embed.pl> from data in F<embed.fnc> and F<regen/opcodes>.  The code
has been refactored so that the only user of F<global.sym>, F<makedef.pl>,
now reads F<embed.fnc> and F<regen/opcodes> directly, removing the need to
store the list of exported functions in an intermediate file.

As F<global.sym> was never installed, this change should not be visible
outside the build process.

=item *

F<pod/buildtoc>, used by the build process to build L<perltoc>, has been
refactored and simplified.  It now contains only code to build L<perltoc>;
the code to regenerate Makefiles has been moved to F<Porting/pod_rules.pl>.
It's a bug if this change has any material effect on the build process.

=item *

F<pod/roffitall> is now built by F<pod/buildtoc>, instead of being
shipped with the distribution.  Its list of manpages is now generated
(and therefore current).  See also RT #103202 for an unresolved related
issue.

=item *

The man page for C<XS::Typemap> is no longer installed.  C<XS::Typemap>
is a test module which is not installed, hence installing its
documentation makes no sense.

=item *

The -Dusesitecustomize and -Duserelocatableinc options now work
together properly.

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=head3 Cygwin

=over 4

=item *

Since version 1.7, Cygwin supports native UTF-8 paths.  If Perl is built
under that environment, directory and filenames will be UTF-8 encoded.

=item *

Cygwin does not initialize all original Win32 environment variables.  See
F<README.cygwin> for a discussion of the newly-added
C<Cygwin::sync_winenv()> function [perl #110190] and for
further links.

=back

=head3 HP-UX

=over 4

=item *

HP-UX PA-RISC/64 now supports gcc-4.x

A fix to correct the socketsize now makes the test suite pass on HP-UX
PA-RISC for 64bitall builds. (5.14.2)

=back

=head3 VMS

=over 4

=item *

Remove unnecessary includes, fix miscellaneous compiler warnings and
close some unclosed comments on F<vms/vms.c>.

=item *

Remove sockadapt layer from the VMS build.

=item *

Explicit support for VMS versions before v7.0 and DEC C versions
before v6.0 has been removed.

=item *

Since Perl 5.10.1, the home-grown C<stat> wrapper has been unable to
distinguish between a directory name containing an underscore and an
otherwise-identical filename containing a dot in the same position
(e.g., t/test_pl as a directory and t/test.pl as a file).  This problem
has been corrected.

=item *

The build on VMS now permits names of the resulting symbols in C code for
Perl longer than 31 characters.  Symbols like
C<Perl__it_was_the_best_of_times_it_was_the_worst_of_times> can now be
created freely without causing the VMS linker to seize up.

=back

=head3 GNU/Hurd

=over 4

=item *

Numerous build and test failures on GNU/Hurd have been resolved with hints
for building DBM modules, detection of the library search path, and enabling
of large file support.

=back

=head3 OpenVOS

=over 4

=item *

Perl is now built with dynamic linking on OpenVOS, the minimum supported
version of which is now Release 17.1.0.

=back

=head3 SunOS

The CC workshop C++ compiler is now detected and used on systems that ship
without cc.

=head1 Internal Changes

=over 4

=item *

The compiled representation of formats is now stored via the C<mg_ptr> of
their C<PERL_MAGIC_fm>.  Previously it was stored in the string buffer,
beyond C<SvLEN()>, the regular end of the string.  C<SvCOMPILED()> and
C<SvCOMPILED_{on,off}()> now exist solely for compatibility for XS code.
The first is always 0, the other two now no-ops. (5.14.1)

=item *

Some global variables have been marked C<const>, members in the interpreter
structure have been re-ordered, and the opcodes have been re-ordered.  The
op C<OP_AELEMFAST> has been split into C<OP_AELEMFAST> and C<OP_AELEMFAST_LEX>.

=item *

When empting a hash of its elements (e.g., via undef(%h), or %h=()), HvARRAY
field is no longer temporarily zeroed.  Any destructors called on the freed
elements see the remaining elements.  Thus, %h=() becomes more like
C<delete $h{$_} for keys %h>.

=item *

Boyer-Moore compiled scalars are now PVMGs, and the Boyer-Moore tables are now
stored via the mg_ptr of their C<PERL_MAGIC_bm>.
Previously they were PVGVs, with the tables stored in
the string buffer, beyond C<SvLEN()>.  This eliminates
the last place where the core stores data beyond C<SvLEN()>.

=item *

Simplified logic in C<Perl_sv_magic()> introduces a small change of
behavior for error cases involving unknown magic types.  Previously, if
C<Perl_sv_magic()> was passed a magic type unknown to it, it would

=over

=item 1.

Croak "Modification of a read-only value attempted" if read only

=item 2.

Return without error if the SV happened to already have this magic

=item 3.

otherwise croak "Don't know how to handle magic of type \\%o"

=back

Now it will always croak "Don't know how to handle magic of type \\%o", even
on read-only values, or SVs which already have the unknown magic type.

=item *

The experimental C<fetch_cop_label> function has been renamed to
C<cop_fetch_label>.

=item *

The C<cop_store_label> function has been added to the API, but is
experimental.

=item *

F<embedvar.h> has been simplified, and one level of macro indirection for
PL_* variables has been removed for the default (non-multiplicity)
configuration.  PERLVAR*() macros now directly expand their arguments to
tokens such as C<PL_defgv>, instead of expanding to C<PL_Idefgv>, with
F<embedvar.h> defining a macro to map C<PL_Idefgv> to C<PL_defgv>.  XS code
which has unwarranted chumminess with the implementation may need updating.

=item *

An API has been added to explicitly choose whether to export XSUB
symbols.  More detail can be found in the comments for commit e64345f8.

=item *

The C<is_gv_magical_sv> function has been eliminated and merged with
C<gv_fetchpvn_flags>.  It used to be called to determine whether a GV
should be autovivified in rvalue context.  Now it has been replaced with a
new C<GV_ADDMG> flag (not part of the API).

=item *

The returned code point from the function C<utf8n_to_uvuni()>
when the input is malformed UTF-8, malformations are allowed, and
C<utf8> warnings are off is now the Unicode REPLACEMENT CHARACTER
whenever the malformation is such that no well-defined code point can be
computed.  Previously the returned value was essentially garbage.  The
only malformations that have well-defined values are a zero-length
string (0 is the return), and overlong UTF-8 sequences.

=item *

Padlists are now marked C<AvREAL>; i.e., reference-counted.  They have
always been reference-counted, but were not marked real, because F<pad.c>
did its own clean-up, instead of using the usual clean-up code in F<sv.c>.
That caused problems in thread cloning, so now the C<AvREAL> flag is on,
but is turned off in F<pad.c> right before the padlist is freed (after
F<pad.c> has done its custom freeing of the pads).

=item *

All C files that make up the Perl core have been converted to UTF-8.

=item *

These new functions have been added as part of the work on Unicode symbols:

    HvNAMELEN
    HvNAMEUTF8
    HvENAMELEN
    HvENAMEUTF8
    gv_init_pv
    gv_init_pvn
    gv_init_pvsv
    gv_fetchmeth_pv
    gv_fetchmeth_pvn
    gv_fetchmeth_sv
    gv_fetchmeth_pv_autoload
    gv_fetchmeth_pvn_autoload
    gv_fetchmeth_sv_autoload
    gv_fetchmethod_pv_flags
    gv_fetchmethod_pvn_flags
    gv_fetchmethod_sv_flags
    gv_autoload_pv
    gv_autoload_pvn
    gv_autoload_sv
    newGVgen_flags
    sv_derived_from_pv
    sv_derived_from_pvn
    sv_derived_from_sv
    sv_does_pv
    sv_does_pvn
    sv_does_sv
    whichsig_pv
    whichsig_pvn
    whichsig_sv
    newCONSTSUB_flags

The gv_fetchmethod_*_flags functions, like gv_fetchmethod_flags, are
experimental and may change in a future release.

=item *

The following functions were added.  These are I<not> part of the API:

    GvNAMEUTF8
    GvENAMELEN
    GvENAME_HEK
    CopSTASH_flags
    CopSTASH_flags_set
    PmopSTASH_flags
    PmopSTASH_flags_set
    sv_sethek
    HEKfARG

There is also a C<HEKf> macro corresponding to C<SVf>, for
interpolating HEKs in formatted strings.

=item *

C<sv_catpvn_flags> takes a couple of new internal-only flags,
C<SV_CATBYTES> and C<SV_CATUTF8>, which tell it whether the char array to
be concatenated is UTF8.  This allows for more efficient concatenation than
creating temporary SVs to pass to C<sv_catsv>.

=item *

For XS AUTOLOAD subs, $AUTOLOAD is set once more, as it was in 5.6.0.  This
is in addition to setting C<SvPVX(cv)>, for compatibility with 5.8 to 5.14.
See L<perlguts/Autoloading with XSUBs>.

=item *

Perl now checks whether the array (the linearized isa) returned by a MRO
plugin begins with the name of the class itself, for which the array was
created, instead of assuming that it does.  This prevents the first element
from being skipped during method lookup.  It also means that
C<mro::get_linear_isa> may return an array with one more element than the
MRO plugin provided [perl #94306].

=item *

C<PL_curstash> is now reference-counted.

=item *

There are now feature bundle hints in C<PL_hints> (C<$^H>) that version
declarations use, to avoid having to load F<feature.pm>.  One setting of
the hint bits indicates a "custom" feature bundle, which means that the
entries in C<%^H> still apply.  F<feature.pm> uses that.

The C<HINT_FEATURE_MASK> macro is defined in F<perl.h> along with other
hints.  Other macros for setting and testing features and bundles are in
the new F<feature.h>.  C<FEATURE_IS_ENABLED> (which has moved to
F<feature.h>) is no longer used throughout the codebase, but more specific
macros, e.g., C<FEATURE_SAY_IS_ENABLED>, that are defined in F<feature.h>.

=item *

F<lib/feature.pm> is now a generated file, created by the new
F<regen/feature.pl> script, which also generates F<feature.h>.

=item *

Tied arrays are now always C<AvREAL>.  If C<@_> or C<DB::args> is tied, it
is reified first, to make sure this is always the case.

=item *

Two new functions C<utf8_to_uvchr_buf()> and C<utf8_to_uvuni_buf()> have
been added.  These are the same as C<utf8_to_uvchr> and
C<utf8_to_uvuni> (which are now deprecated), but take an extra parameter
that is used to guard against reading beyond the end of the input
string.
See L<perlapi/utf8_to_uvchr_buf> and L<perlapi/utf8_to_uvuni_buf>.

=item *

The regular expression engine now does TRIE case insensitive matches
under Unicode. This may change the output of C<< use re 'debug'; >>,
and will speed up various things.

=item *

There is a new C<wrap_op_checker()> function, which provides a thread-safe
alternative to writing to C<PL_check> directly.

=back

=head1 Selected Bug Fixes

=head2 Array and hash

=over

=item *

A bug has been fixed that would cause a "Use of freed value in iteration"
error if the next two hash elements that would be iterated over are
deleted [perl #85026]. (5.14.1)

=item *

Deleting the current hash iterator (the hash element that would be returned
by the next call to C<each>) in void context used not to free it
[perl #85026].

=item *

Deletion of methods via C<delete $Class::{method}> syntax used to update
method caches if called in void context, but not scalar or list context.

=item *

When hash elements are deleted in void context, the internal hash entry is
now freed before the value is freed, to prevent destructors called by that
latter freeing from seeing the hash in an inconsistent state.  It was
possible to cause double-frees if the destructor freed the hash itself
[perl #100340].

=item *

A C<keys> optimization in Perl 5.12.0 to make it faster on empty hashes
caused C<each> not to reset the iterator if called after the last element
was deleted.

=item *

Freeing deeply nested hashes no longer crashes [perl #44225].

=item *

It is possible from XS code to create hashes with elements that have no
values.  The hash element and slice operators used to crash
when handling these in lvalue context.  They now
produce a "Modification of non-creatable hash value attempted" error
message.

=item *

If list assignment to a hash or array triggered destructors that freed the
hash or array itself, a crash would ensue.  This is no longer the case
[perl #107440].

=item *

It used to be possible to free the typeglob of a localized array or hash
(e.g., C<local @{"x"}; delete $::{x}>), resulting in a crash on scope exit.

=item *

Some core bugs affecting L<Hash::Util> have been fixed: locking a hash
element that is a glob copy no longer causes the next assignment to it to
corrupt the glob (5.14.2), and unlocking a hash element that holds a
copy-on-write scalar no longer causes modifications to that scalar to
modify other scalars that were sharing the same string buffer.

=back

=head2 C API fixes

=over

=item *

The C<newHVhv> XS function now works on tied hashes, instead of crashing or
returning an empty hash.

=item *

The C<SvIsCOW> C macro now returns false for read-only copies of typeglobs,
such as those created by:

  $hash{elem} = *foo;
  Hash::Util::lock_value %hash, 'elem';

It used to return true.

=item *

The C<SvPVutf8> C function no longer tries to modify its argument,
resulting in errors [perl #108994].

=item *

C<SvPVutf8> now works properly with magical variables.

=item *

C<SvPVbyte> now works properly non-PVs.

=item *

When presented with malformed UTF-8 input, the XS-callable functions
C<is_utf8_string()>, C<is_utf8_string_loc()>, and
C<is_utf8_string_loclen()> could read beyond the end of the input
string by up to 12 bytes.  This no longer happens.  [perl #32080].
However, currently, C<is_utf8_char()> still has this defect, see
L</is_utf8_char()> above.

=item *

The C-level C<pregcomp> function could become confused about whether the
pattern was in UTF8 if the pattern was an overloaded, tied, or otherwise
magical scalar [perl #101940].

=back

=head2 Compile-time hints

=over

=item *

Tying C<%^H> no longer causes perl to crash or ignore the contents of
C<%^H> when entering a compilation scope [perl #106282].

=item *

C<eval $string> and C<require> used not to
localize C<%^H> during compilation if it
was empty at the time the C<eval> call itself was compiled.  This could
lead to scary side effects, like C<use re "/m"> enabling other flags that
the surrounding code was trying to enable for its caller [perl #68750].

=item *

C<eval $string> and C<require> no longer localize hints (C<$^H> and C<%^H>)
at run time, but only during compilation of the $string or required file.
This makes C<BEGIN { $^H{foo}=7 }> equivalent to
C<BEGIN { eval '$^H{foo}=7' }> [perl #70151].

=item *

Creating a BEGIN block from XS code (via C<newXS> or C<newATTRSUB>) would,
on completion, make the hints of the current compiling code the current
hints.  This could cause warnings to occur in a non-warning scope.

=back

=head2 Copy-on-write scalars

Copy-on-write or shared hash key scalars
were introduced in 5.8.0, but most Perl code
did not encounter them (they were used mostly internally).  Perl
5.10.0 extended them, such that assigning C<__PACKAGE__> or a
hash key to a scalar would make it copy-on-write.  Several parts
of Perl were not updated to account for them, but have now been fixed.

=over

=item *

C<utf8::decode> had a nasty bug that would modify copy-on-write scalars'
string buffers in place (i.e., skipping the copy).  This could result in
hashes having two elements with the same key [perl #91834]. (5.14.2)

=item *

Lvalue subroutines were not allowing COW scalars to be returned.  This was
fixed for lvalue scalar context in Perl 5.12.3 and 5.14.0, but list context
was not fixed until this release.

=item *

Elements of restricted hashes (see the L<fields> pragma) containing
copy-on-write values couldn't be deleted, nor could such hashes be cleared
(C<%hash = ()>). (5.14.2)

=item *

Localizing a tied variable used to make it read-only if it contained a
copy-on-write string. (5.14.2)

=item *

Assigning a copy-on-write string to a stash
element no longer causes a double free.  Regardless of this change, the
results of such assignments are still undefined.

=item *

Assigning a copy-on-write string to a tied variable no longer stops that
variable from being tied if it happens to be a PVMG or PVLV internally.

=item *

Doing a substitution on a tied variable returning a copy-on-write
scalar used to cause an assertion failure or an "Attempt to free
nonexistent shared string" warning.

=item *

This one is a regression from 5.12: In 5.14.0, the bitwise assignment
operators C<|=>, C<^=> and C<&=> started leaving the left-hand side
undefined if it happened to be a copy-on-write string [perl #108480].

=item *

L<Storable>, L<Devel::Peek> and L<PerlIO::scalar> had similar problems.
See L</Updated Modules and Pragmata>, above.

=back

=head2 The debugger

=over

=item *

F<dumpvar.pl>, and therefore the C<x> command in the debugger, have been
fixed to handle objects blessed into classes whose names contain "=".  The
contents of such objects used not to be dumped [perl #101814].

=item *

The "R" command for restarting a debugger session has been fixed to work on
Windows, or any other system lacking a C<POSIX::_SC_OPEN_MAX> constant
[perl #87740].

=item *

The C<#line 42 foo> directive used not to update the arrays of lines used
by the debugger if it occurred in a string eval.  This was partially fixed
in 5.14, but it worked only for a single C<#line 42 foo> in each eval.  Now
it works for multiple.

=item *

When subroutine calls are intercepted by the debugger, the name of the
subroutine or a reference to it is stored in C<$DB::sub>, for the debugger
to access.  Sometimes (such as C<$foo = *bar; undef *bar; &$foo>)
C<$DB::sub> would be set to a name that could not be used to find the
subroutine, and so the debugger's attempt to call it would fail.  Now the
check to see whether a reference is needed is more robust, so those
problems should not happen anymore [rt.cpan.org #69862].

=item *

Every subroutine has a filename associated with it that the debugger uses.
The one associated with constant subroutines used to be misallocated when
cloned under threads.  Consequently, debugging threaded applications could
result in memory corruption [perl #96126].

=back

=head2 Dereferencing operators

=over

=item *

C<defined(${"..."})>, C<defined(*{"..."})>, etc., used to
return true for most, but not all built-in variables, if
they had not been used yet.  This bug affected C<${^GLOBAL_PHASE}> and
C<${^UTF8CACHE}>, among others.  It also used to return false if the
package name was given as well (C<${"::!"}>) [perl #97978, #97492].

=item *

Perl 5.10.0 introduced a similar bug: C<defined(*{"foo"})> where "foo"
represents the name of a built-in global variable used to return false if
the variable had never been used before, but only on the I<first> call.
This, too, has been fixed.

=item *

Since 5.6.0, C<*{ ... }> has been inconsistent in how it treats undefined
values.  It would die in strict mode or lvalue context for most undefined
values, but would be treated as the empty string (with a warning) for the
specific scalar return by C<undef()> (C<&PL_sv_undef> internally).  This
has been corrected.  C<undef()> is now treated like other undefined
scalars, as in Perl 5.005.

=back

=head2 Filehandle, last-accessed

Perl has an internal variable that stores the last filehandle to be
accessed.  It is used by C<$.> and by C<tell> and C<eof> without
arguments.

=over

=item *

It used to be possible to set this internal variable to a glob copy and
then modify that glob copy to be something other than a glob, and still
have the last-accessed filehandle associated with the variable after
assigning a glob to it again:

    my $foo = *STDOUT;  # $foo is a glob copy
    <$foo>;             # $foo is now the last-accessed handle
    $foo = 3;           # no longer a glob
    $foo = *STDERR;     # still the last-accessed handle

Now the C<$foo = 3> assignment unsets that internal variable, so there
is no last-accessed filehandle, just as if C<< <$foo> >> had never
happened.

This also prevents some unrelated handle from becoming the last-accessed
handle if $foo falls out of scope and the same internal SV gets used for
another handle [perl #97988].

=item *

A regression in 5.14 caused these statements not to set that internal
variable:

    my $fh = *STDOUT;
    tell $fh;
    eof  $fh;
    seek $fh, 0,0;
    tell     *$fh;
    eof      *$fh;
    seek     *$fh, 0,0;
    readline *$fh;

This is now fixed, but C<tell *{ *$fh }> still has the problem, and it
is not clear how to fix it [perl #106536].

=back

=head2 Filetests and C<stat>

The term "filetests" refers to the operators that consist of a hyphen
followed by a single letter: C<-r>, C<-x>, C<-M>, etc.  The term "stacked"
when applied to filetests means followed by another filetest operator
sharing the same operand, as in C<-r -x -w $fooo>.

=over

=item *

C<stat> produces more consistent warnings.  It no longer warns for "_"
[perl #71002] and no longer skips the warning at times for other unopened
handles.  It no longer warns about an unopened handle when the operating
system's C<fstat> function fails.

=item *

C<stat> would sometimes return negative numbers for large inode numbers,
because it was using the wrong internal C type. [perl #84590]

=item *

C<lstat> is documented to fall back to C<stat> (with a warning) when given
a filehandle.  When passed an IO reference, it was actually doing the
equivalent of S<C<stat _>> and ignoring the handle.

=item *

C<-T _> with no preceding C<stat> used to produce a
confusing "uninitialized" warning, even though there
is no visible uninitialized value to speak of.

=item *

C<-T>, C<-B>, C<-l> and C<-t> now work
when stacked with other filetest operators
[perl #77388].

=item *

In 5.14.0, filetest ops (C<-r>, C<-x>, etc.) started calling FETCH on a
tied argument belonging to the previous argument to a list operator, if
called with a bareword argument or no argument at all.  This has been
fixed, so C<push @foo, $tied, -r> no longer calls FETCH on C<$tied>.

=item *

In Perl 5.6, C<-l> followed by anything other than a bareword would treat
its argument as a file name.  That was changed in 5.8 for glob references
(C<\*foo>), but not for globs themselves (C<*foo>).  C<-l> started
returning C<undef> for glob references without setting the last
stat buffer that the "_" handle uses, but only if warnings
were turned on.  With warnings off, it was the same as 5.6.
In other words, it was simply buggy and inconsistent.  Now the 5.6
behavior has been restored.

=item *

C<-l> followed by a bareword no longer "eats" the previous argument to
the list operator in whose argument list it resides.  Hence,
C<print "bar", -l foo> now actually prints "bar", because C<-l>
on longer eats it.

=item *

Perl keeps several internal variables to keep track of the last stat
buffer, from which file(handle) it originated, what type it was, and
whether the last stat succeeded.

There were various cases where these could get out of synch, resulting in
inconsistent or erratic behavior in edge cases (every mention of C<-T>
applies to C<-B> as well):

=over

=item *

C<-T I<HANDLE>>, even though it does a C<stat>, was not resetting the last
stat type, so an C<lstat _> following it would merrily return the wrong
results.  Also, it was not setting the success status.

=item *

Freeing the handle last used by C<stat> or a filetest could result in
S<C<-T _>> using an unrelated handle.

=item *

C<stat> with an IO reference would not reset the stat type or record the
filehandle for S<C<-T _>> to use.

=item *

Fatal warnings could cause the stat buffer not to be reset
for a filetest operator on an unopened filehandle or C<-l> on any handle.
Fatal warnings also stopped C<-T> from setting C<$!>.

=item *

When the last stat was on an unreadable file, C<-T _> is supposed to
return C<undef>, leaving the last stat buffer unchanged.  But it was
setting the stat type, causing C<lstat _> to stop working.

=item *

C<-T I<FILENAME>> was not resetting the internal stat buffers for
unreadable files.

=back

These have all been fixed.

=back

=head2 Formats

=over

=item *

Several edge cases have been fixed with formats and C<formline>;
in particular, where the format itself is potentially variable (such as
with ties and overloading), and where the format and data differ in their
encoding.  In both these cases, it used to possible for the output to be
corrupted [perl #91032].

=item *

C<formline> no longer converts its argument into a string in-place.  So
passing a reference to C<formline> no longer destroys the reference
[perl #79532].

=item *

Assignment to C<$^A> (the format output accumulator) now recalculates
the number of lines output.

=back

=head2 C<given> and C<when>

=over

=item *

C<given> was not scoping its implicit $_ properly, resulting in memory
leaks or "Variable is not available" warnings [perl #94682].

=item *

C<given> was not calling set-magic on the implicit lexical C<$_> that it
uses.  This meant, for example, that C<pos> would be remembered from one
execution of the same C<given> block to the next, even if the input were a
different variable [perl #84526].

=item *

C<when> blocks are now capable of returning variables declared inside the
enclosing C<given> block [perl #93548].

=back

=head2 The C<glob> operator

=over

=item *

