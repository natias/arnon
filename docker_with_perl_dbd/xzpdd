# define SYS_set_robust_list __NR_set_robust_list
#endif

#ifdef __NR_set_thread_area
# define SYS_set_thread_area __NR_set_thread_area
#endif

#ifdef __NR_set_tid_address
# define SYS_set_tid_address __NR_set_tid_address
#endif

#ifdef __NR_set_tls
# define SYS_set_tls __NR_set_tls
#endif

#ifdef __NR_setdomainname
# define SYS_setdomainname __NR_setdomainname
#endif

#ifdef __NR_setfsgid
# define SYS_setfsgid __NR_setfsgid
#endif

#ifdef __NR_setfsgid32
# define SYS_setfsgid32 __NR_setfsgid32
#endif

#ifdef __NR_setfsuid
# define SYS_setfsuid __NR_setfsuid
#endif

#ifdef __NR_setfsuid32
# define SYS_setfsuid32 __NR_setfsuid32
#endif

#ifdef __NR_setgid
# define SYS_setgid __NR_setgid
#endif

#ifdef __NR_setgid32
# define SYS_setgid32 __NR_setgid32
#endif

#ifdef __NR_setgroups
# define SYS_setgroups __NR_setgroups
#endif

#ifdef __NR_setgroups32
# define SYS_setgroups32 __NR_setgroups32
#endif

#ifdef __NR_sethae
# define SYS_sethae __NR_sethae
#endif

#ifdef __NR_sethostname
# define SYS_sethostname __NR_sethostname
#endif

#ifdef __NR_setitimer
# define SYS_setitimer __NR_setitimer
#endif

#ifdef __NR_setns
# define SYS_setns __NR_setns
#endif

#ifdef __NR_setpgid
# define SYS_setpgid __NR_setpgid
#endif

#ifdef __NR_setpgrp
# define SYS_setpgrp __NR_setpgrp
#endif

#ifdef __NR_setpriority
# define SYS_setpriority __NR_setpriority
#endif

#ifdef __NR_setregid
# define SYS_setregid __NR_setregid
#endif

#ifdef __NR_setregid32
# define SYS_setregid32 __NR_setregid32
#endif

#ifdef __NR_setresgid
# define SYS_setresgid __NR_setresgid
#endif

#ifdef __NR_setresgid32
# define SYS_setresgid32 __NR_setresgid32
#endif

#ifdef __NR_setresuid
# define SYS_setresuid __NR_setresuid
#endif

#ifdef __NR_setresuid32
# define SYS_setresuid32 __NR_setresuid32
#endif

#ifdef __NR_setreuid
# define SYS_setreuid __NR_setreuid
#endif

#ifdef __NR_setreuid32
# define SYS_setreuid32 __NR_setreuid32
#endif

#ifdef __NR_setrlimit
# define SYS_setrlimit __NR_setrlimit
#endif

#ifdef __NR_setsid
# define SYS_setsid __NR_setsid
#endif

#ifdef __NR_setsockopt
# define SYS_setsockopt __NR_setsockopt
#endif

#ifdef __NR_settimeofday
# define SYS_settimeofday __NR_settimeofday
#endif

#ifdef __NR_setuid
# define SYS_setuid __NR_setuid
#endif

#ifdef __NR_setuid32
# define SYS_setuid32 __NR_setuid32
#endif

#ifdef __NR_setxattr
# define SYS_setxattr __NR_setxattr
#endif

#ifdef __NR_sgetmask
# define SYS_sgetmask __NR_sgetmask
#endif

#ifdef __NR_shmat
# define SYS_shmat __NR_shmat
#endif

#ifdef __NR_shmctl
# define SYS_shmctl __NR_shmctl
#endif

#ifdef __NR_shmdt
# define SYS_shmdt __NR_shmdt
#endif

#ifdef __NR_shmget
# define SYS_shmget __NR_shmget
#endif

#ifdef __NR_shutdown
# define SYS_shutdown __NR_shutdown
#endif

#ifdef __NR_sigaction
# define SYS_sigaction __NR_sigaction
#endif

#ifdef __NR_sigaltstack
# define SYS_sigaltstack __NR_sigaltstack
#endif

#ifdef __NR_signal
# define SYS_signal __NR_signal
#endif

#ifdef __NR_signalfd
# define SYS_signalfd __NR_signalfd
#endif

#ifdef __NR_signalfd4
# define SYS_signalfd4 __NR_signalfd4
#endif

#ifdef __NR_sigpending
# define SYS_sigpending __NR_sigpending
#endif

#ifdef __NR_sigprocmask
# define SYS_sigprocmask __NR_sigprocmask
#endif

#ifdef __NR_sigreturn
# define SYS_sigreturn __NR_sigreturn
#endif

#ifdef __NR_sigsuspend
# define SYS_sigsuspend __NR_sigsuspend
#endif

#ifdef __NR_socket
# define SYS_socket __NR_socket
#endif

#ifdef __NR_socketcall
# define SYS_socketcall __NR_socketcall
#endif

#ifdef __NR_socketpair
# define SYS_socketpair __NR_socketpair
#endif

#ifdef __NR_splice
# define SYS_splice __NR_splice
#endif

#ifdef __NR_spu_create
# define SYS_spu_create __NR_spu_create
#endif

#ifdef __NR_spu_run
# define SYS_spu_run __NR_spu_run
#endif

#ifdef __NR_ssetmask
# define SYS_ssetmask __NR_ssetmask
#endif

#ifdef __NR_stat
# define SYS_stat __NR_stat
#endif

#ifdef __NR_stat64
# define SYS_stat64 __NR_stat64
#endif

#ifdef __NR_statfs
# define SYS_statfs __NR_statfs
#endif

#ifdef __NR_statfs64
# define SYS_statfs64 __NR_statfs64
#endif

#ifdef __NR_statx
# define SYS_statx __NR_statx
#endif

#ifdef __NR_stime
# define SYS_stime __NR_stime
#endif

#ifdef __NR_stty
# define SYS_stty __NR_stty
#endif

#ifdef __NR_subpage_prot
# define SYS_subpage_prot __NR_subpage_prot
#endif

#ifdef __NR_swapcontext
# define SYS_swapcontext __NR_swapcontext
#endif

#ifdef __NR_swapoff
# define SYS_swapoff __NR_swapoff
#endif

#ifdef __NR_swapon
# define SYS_swapon __NR_swapon
#endif

#ifdef __NR_switch_endian
# define SYS_switch_endian __NR_switch_endian
#endif

#ifdef __NR_symlink
# define SYS_symlink __NR_symlink
#endif

#ifdef __NR_symlinkat
# define SYS_symlinkat __NR_symlinkat
#endif

#ifdef __NR_sync
# define SYS_sync __NR_sync
#endif

#ifdef __NR_sync_file_range
# define SYS_sync_file_range __NR_sync_file_range
#endif

#ifdef __NR_sync_file_range2
# define SYS_sync_file_range2 __NR_sync_file_range2
#endif

#ifdef __NR_syncfs
# define SYS_syncfs __NR_syncfs
#endif

#ifdef __NR_sys_debug_setcontext
# define SYS_sys_debug_setcontext __NR_sys_debug_setcontext
#endif

#ifdef __NR_sys_epoll_create
# define SYS_sys_epoll_create __NR_sys_epoll_create
#endif

#ifdef __NR_sys_epoll_ctl
# define SYS_sys_epoll_ctl __NR_sys_epoll_ctl
#endif

#ifdef __NR_sys_epoll_wait
# define SYS_sys_epoll_wait __NR_sys_epoll_wait
#endif

#ifdef __NR_syscall
# define SYS_syscall __NR_syscall
#endif

#ifdef __NR_sysfs
# define SYS_sysfs __NR_sysfs
#endif

#ifdef __NR_sysinfo
# define SYS_sysinfo __NR_sysinfo
#endif

#ifdef __NR_syslog
# define SYS_syslog __NR_syslog
#endif

#ifdef __NR_sysmips
# define SYS_sysmips __NR_sysmips
#endif

#ifdef __NR_tee
# define SYS_tee __NR_tee
#endif

#ifdef __NR_tgkill
# define SYS_tgkill __NR_tgkill
#endif

#ifdef __NR_time
# define SYS_time __NR_time
#endif

#ifdef __NR_timer_create
# define SYS_timer_create __NR_timer_create
#endif

#ifdef __NR_timer_delete
# define SYS_timer_delete __NR_timer_delete
#endif

#ifdef __NR_timer_getoverrun
# define SYS_timer_getoverrun __NR_timer_getoverrun
#endif

#ifdef __NR_timer_gettime
# define SYS_timer_gettime __NR_timer_gettime
#endif

#ifdef __NR_timer_gettime64
# define SYS_timer_gettime64 __NR_timer_gettime64
#endif

#ifdef __NR_timer_settime
# define SYS_timer_settime __NR_timer_settime
#endif

#ifdef __NR_timer_settime64
# define SYS_timer_settime64 __NR_timer_settime64
#endif

#ifdef __NR_timerfd
# define SYS_timerfd __NR_timerfd
#endif

#ifdef __NR_timerfd_create
# define SYS_timerfd_create __NR_timerfd_create
#endif

#ifdef __NR_timerfd_gettime
# define SYS_timerfd_gettime __NR_timerfd_gettime
#endif

#ifdef __NR_timerfd_gettime64
# define SYS_timerfd_gettime64 __NR_timerfd_gettime64
#endif

#ifdef __NR_timerfd_settime
# define SYS_timerfd_settime __NR_timerfd_settime
#endif

#ifdef __NR_timerfd_settime64
# define SYS_timerfd_settime64 __NR_timerfd_settime64
#endif

#ifdef __NR_times
# define SYS_times __NR_times
#endif

#ifdef __NR_tkill
# define SYS_tkill __NR_tkill
#endif

#ifdef __NR_truncate
# define SYS_truncate __NR_truncate
#endif

#ifdef __NR_truncate64
# define SYS_truncate64 __NR_truncate64
#endif

#ifdef __NR_tuxcall
# define SYS_tuxcall __NR_tuxcall
#endif

#ifdef __NR_udftrap
# define SYS_udftrap __NR_udftrap
#endif

#ifdef __NR_ugetrlimit
# define SYS_ugetrlimit __NR_ugetrlimit
#endif

#ifdef __NR_ulimit
# define SYS_ulimit __NR_ulimit
#endif

#ifdef __NR_umask
# define SYS_umask __NR_umask
#endif

#ifdef __NR_umount
# define SYS_umount __NR_umount
#endif

#ifdef __NR_umount2
# define SYS_umount2 __NR_umount2
#endif

#ifdef __NR_uname
# define SYS_uname __NR_uname
#endif

#ifdef __NR_unlink
# define SYS_unlink __NR_unlink
#endif

#ifdef __NR_unlinkat
# define SYS_unlinkat __NR_unlinkat
#endif

#ifdef __NR_unshare
# define SYS_unshare __NR_unshare
#endif

#ifdef __NR_uselib
# define SYS_uselib __NR_uselib
#endif

#ifdef __NR_userfaultfd
# define SYS_userfaultfd __NR_userfaultfd
#endif

#ifdef __NR_usr26
# define SYS_usr26 __NR_usr26
#endif

#ifdef __NR_usr32
# define SYS_usr32 __NR_usr32
#endif

#ifdef __NR_ustat
# define SYS_ustat __NR_ustat
#endif

#ifdef __NR_utime
# define SYS_utime __NR_utime
#endif

#ifdef __NR_utimensat
# define SYS_utimensat __NR_utimensat
#endif

#ifdef __NR_utimensat_time64
# define SYS_utimensat_time64 __NR_utimensat_time64
#endif

#ifdef __NR_utimes
# define SYS_utimes __NR_utimes
#endif

#ifdef __NR_utrap_install
# define SYS_utrap_install __NR_utrap_install
#endif

#ifdef __NR_vfork
# define SYS_vfork __NR_vfork
#endif

#ifdef __NR_vhangup
# define SYS_vhangup __NR_vhangup
#endif

#ifdef __NR_vm86
# define SYS_vm86 __NR_vm86
#endif

#ifdef __NR_vm86old
# define SYS_vm86old __NR_vm86old
#endif

#ifdef __NR_vmsplice
# define SYS_vmsplice __NR_vmsplice
#endif

#ifdef __NR_vserver
# define SYS_vserver __NR_vserver
#endif

#ifdef __NR_wait4
# define SYS_wait4 __NR_wait4
#endif

#ifdef __NR_waitid
# define SYS_waitid __NR_waitid
#endif

#ifdef __NR_waitpid
# define SYS_waitpid __NR_waitpid
#endif

#ifdef __NR_write
# define SYS_write __NR_write
#endif

#ifdef __NR_writev
# define SYS_writev __NR_writev
#endif

                                                                                                                                                                                                                                                                                                                                                                                                                                 usr/include/x86_64-linux-gnu/bits/syslog-ldbl.h                                                     0000644 0000000 0000000 00000002264 14711146254 017740  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* -mlong-double-64 compatibility mode for syslog functions.
   Copyright (C) 2006-2022 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <https://www.gnu.org/licenses/>.  */

#ifndef _SYS_SYSLOG_H
# error "Never include <bits/syslog-ldbl.h> directly; use <sys/syslog.h> instead."
#endif

__LDBL_REDIR_DECL (syslog)

#ifdef __USE_MISC
__LDBL_REDIR_DECL (vsyslog)
#endif

#if __USE_FORTIFY_LEVEL > 0 && defined __fortify_function
__LDBL_REDIR2_DECL (syslog_chk)

# ifdef __USE_MISC
__LDBL_REDIR2_DECL (vsyslog_chk)
# endif
#endif
                                                                                                                                                                                                                                                                                                                                            usr/include/x86_64-linux-gnu/bits/syslog-path.h                                                     0000644 0000000 0000000 00000002045 14711146254 017754  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* <bits/syslog-path.h> -- _PATH_LOG definition
   Copyright (C) 2006-2022 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <https://www.gnu.org/licenses/>.  */

#ifndef _SYS_SYSLOG_H
# error "Never include this file directly.  Use <sys/syslog.h> instead"
#endif

#ifndef _BITS_SYSLOG_PATH_H
#define _BITS_SYSLOG_PATH_H 1

#define	_PATH_LOG	"/dev/log"

#endif /* bits/syslog-path.h */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           usr/include/x86_64-linux-gnu/bits/syslog.h                                                          0000644 0000000 0000000 00000003661 14711146254 017027  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* Checking macros for syslog functions.
   Copyright (C) 2005-2022 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <https://www.gnu.org/licenses/>.  */

#ifndef _SYS_SYSLOG_H
# error "Never include <bits/syslog.h> directly; use <sys/syslog.h> instead."
#endif


extern void __syslog_chk (int __pri, int __flag, const char *__fmt, ...)
     __attribute__ ((__format__ (__printf__, 3, 4)));

#ifdef __USE_MISC
extern void __vsyslog_chk (int __pri, int __flag, const char *__fmt,
			   __gnuc_va_list __ap)
     __attribute__ ((__format__ (__printf__, 3, 0)));
#endif

#include <bits/floatn.h>
#if defined __LDBL_COMPAT || __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI == 1
# include <bits/syslog-ldbl.h>
#endif

/* The following functions must be used only after applying all asm
   redirections, e.g. long double asm redirections.  */

#ifdef __va_arg_pack
__fortify_function void
syslog (int __pri, const char *__fmt, ...)
{
  __syslog_chk (__pri, __USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
}
#elif !defined __cplusplus
# define syslog(pri, ...) \
  __syslog_chk (pri, __USE_FORTIFY_LEVEL - 1, __VA_ARGS__)
#endif


#ifdef __USE_MISC
__fortify_function void
vsyslog (int __pri, const char *__fmt, __gnuc_va_list __ap)
{
  __vsyslog_chk (__pri,  __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
}
#endif
                                                                               usr/include/x86_64-linux-gnu/bits/sysmacros.h                                                       0000644 0000000 0000000 00000005611 14711146254 017527  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* Definitions of macros to access `dev_t' values.
   Copyright (C) 1996-2022 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <https://www.gnu.org/licenses/>.  */

#ifndef _BITS_SYSMACROS_H
#define _BITS_SYSMACROS_H 1

#ifndef _SYS_SYSMACROS_H
# error "Never include <bits/sysmacros.h> directly; use <sys/sysmacros.h> instead."
#endif

/* dev_t in glibc is a 64-bit quantity, with 32-bit major and minor numbers.
   Our default encoding is MMMM Mmmm mmmM MMmm, where M is a hex digit of
   the major number and m is a hex digit of the minor number.  This is
   downward compatible with legacy systems where dev_t is 16 bits wide,
   encoded as MMmm.  It is also downward compatible with the Linux kernel,
   which (as of 2016) uses 32-bit dev_t, encoded as mmmM MMmm.

   Systems that use an incompatible encoding for dev_t should override this
   file in the appropriate sysdeps subdirectory.  */

#define __SYSMACROS_DECLARE_MAJOR(DECL_TEMPL)			\
  DECL_TEMPL(unsigned int, major, (__dev_t __dev))

#define __SYSMACROS_DEFINE_MAJOR(DECL_TEMPL)			\
  __SYSMACROS_DECLARE_MAJOR (DECL_TEMPL)			\
  {								\
    unsigned int __major;					\
    __major  = ((__dev & (__dev_t) 0x00000000000fff00u) >>  8); \
    __major |= ((__dev & (__dev_t) 0xfffff00000000000u) >> 32); \
    return __major;						\
  }

#define __SYSMACROS_DECLARE_MINOR(DECL_TEMPL)			\
  DECL_TEMPL(unsigned int, minor, (__dev_t __dev))

#define __SYSMACROS_DEFINE_MINOR(DECL_TEMPL)			\
  __SYSMACROS_DECLARE_MINOR (DECL_TEMPL)			\
  {								\
    unsigned int __minor;					\
    __minor  = ((__dev & (__dev_t) 0x00000000000000ffu) >>  0); \
    __minor |= ((__dev & (__dev_t) 0x00000ffffff00000u) >> 12); \
    return __minor;						\
  }

#define __SYSMACROS_DECLARE_MAKEDEV(DECL_TEMPL)			\
  DECL_TEMPL(__dev_t, makedev, (unsigned int __major, unsigned int __minor))

#define __SYSMACROS_DEFINE_MAKEDEV(DECL_TEMPL)			\
  __SYSMACROS_DECLARE_MAKEDEV (DECL_TEMPL)			\
  {								\
    __dev_t __dev;						\
    __dev  = (((__dev_t) (__major & 0x00000fffu)) <<  8);	\
    __dev |= (((__dev_t) (__major & 0xfffff000u)) << 32);	\
    __dev |= (((__dev_t) (__minor & 0x000000ffu)) <<  0);	\
    __dev |= (((__dev_t) (__minor & 0xffffff00u)) << 12);	\
    return __dev;						\
  }

#endif /* bits/sysmacros.h */
                                                                                                                       usr/include/x86_64-linux-gnu/bits/termios-baud.h                                                    0000644 0000000 0000000 00000003440 14711146254 020075  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* termios baud rate selection definitions.  Linux/generic version.
   Copyright (C) 2019-2022 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library.  If not, see
   <https://www.gnu.org/licenses/>.  */

#ifndef _TERMIOS_H
# error "Never include <bits/termios-baud.h> directly; use <termios.h> instead."
#endif

#ifdef __USE_MISC
# define CBAUD	 000000010017 /* Baud speed mask (not in POSIX).  */
# define CBAUDEX 000000010000 /* Extra baud speed mask, included in CBAUD.
				 (not in POSIX).  */
# define CIBAUD	 002003600000 /* Input baud rate (not used).  */
# define CMSPAR  010000000000 /* Mark or space (stick) parity.  */
# define CRTSCTS 020000000000 /* Flow control.  */
#endif

/* Extra output baud rates (not in POSIX).  */
#define  B57600    0010001
#define  B115200   0010002
#define  B230400   0010003
#define  B460800   0010004
#define  B500000   0010005
#define  B576000   0010006
#define  B921600   0010007
#define  B1000000  0010010
#define  B1152000  0010011
#define  B1500000  0010012
#define  B2000000  0010013
#define  B2500000  0010014
#define  B3000000  0010015
#define  B3500000  0010016
#define  B4000000  0010017
#define __MAX_BAUD B4000000
                                                                                                                                                                                                                                usr/include/x86_64-linux-gnu/bits/termios-c_cc.h                                                    0000644 0000000 0000000 00000002377 14711146254 020061  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* termios c_cc symbolic constant definitions.  Linux/generic version.
   Copyright (C) 2019-2022 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library.  If not, see
   <https://www.gnu.org/licenses/>.  */

#ifndef _TERMIOS_H
# error "Never include <bits/termios_c_cc.h> directly; use <termios.h> instead."
#endif

/* c_cc characters */
#define VINTR 0
#define VQUIT 1
#define VERASE 2
#define VKILL 3
#define VEOF 4
#define VTIME 5
#define VMIN 6
#define VSWTC 7
#define VSTART 8
#define VSTOP 9
#define VSUSP 10
#define VEOL 11
#define VREPRINT 12
#define VDISCARD 13
#define VWERASE 14
#define VLNEXT 15
#define VEOL2 16
                                                                                                                                                                                                                                                                 usr/include/x86_64-linux-gnu/bits/termios-c_cflag.h                                                 0000644 0000000 0000000 00000002316 14711146254 020541  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* termios control mode definitions.  Linux/generic version.
   Copyright (C) 2019-2022 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library.  If not, see
   <https://www.gnu.org/licenses/>.  */

#ifndef _TERMIOS_H
# error "Never include <bits/termios-c_cflag.h> directly; use <termios.h> instead."
#endif

/* c_cflag bits.  */
#define CSIZE	0000060
#define   CS5	0000000
#define   CS6	0000020
#define   CS7	0000040
#define   CS8	0000060
#define CSTOPB	0000100
#define CREAD	0000200
#define PARENB	0000400
#define PARODD	0001000
#define HUPCL	0002000
#define CLOCAL	0004000
                                                                                                                                                                                                                                                                                                                  usr/include/x86_64-linux-gnu/bits/termios-c_iflag.h                                                 0000644 0000000 0000000 00000003620 14711146254 020546  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* termios input mode definitions.  Linux/generic version.
   Copyright (C) 2019-2022 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library.  If not, see
   <https://www.gnu.org/licenses/>.  */

#ifndef _TERMIOS_H
# error "Never include <bits/termios-ciflags.h> directly; use <termios.h> instead."
#endif

/* c_iflag bits */
#define IGNBRK	0000001  /* Ignore break condition.  */
#define BRKINT	0000002  /* Signal interrupt on break.  */
#define IGNPAR	0000004  /* Ignore characters with parity errors.  */
#define PARMRK	0000010  /* Mark parity and framing errors.  */
#define INPCK	0000020  /* Enable input parity check.  */
#define ISTRIP	0000040  /* Strip 8th bit off characters.  */
#define INLCR	0000100  /* Map NL to CR on input.  */
#define IGNCR	0000200  /* Ignore CR.  */
#define ICRNL	0000400  /* Map CR to NL on input.  */
#define IUCLC	0001000  /* Map uppercase characters to lowercase on input
			    (not in POSIX).  */
#define IXON	0002000  /* Enable start/stop output control.  */
#define IXANY	0004000  /* Enable any character to restart output.  */
#define IXOFF	0010000  /* Enable start/stop input control.  */
#define IMAXBEL	0020000  /* Ring bell when input queue is full
			    (not in POSIX).  */
#define IUTF8	0040000  /* Input is UTF8 (not in POSIX).  */
                                                                                                                usr/include/x86_64-linux-gnu/bits/termios-c_lflag.h                                                 0000644 0000000 0000000 00000005042 14711146254 020551  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* termios local mode definitions.  Linux/generic version.
   Copyright (C) 2019-2022 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library.  If not, see
   <https://www.gnu.org/licenses/>.  */

#ifndef _TERMIOS_H
# error "Never include <bits/termios-c_lflag.h> directly; use <termios.h> instead."
#endif

/* c_lflag bits */
#define ISIG	0000001   /* Enable signals.  */
#define ICANON	0000002   /* Canonical input (erase and kill processing).  */
#if defined __USE_MISC || (defined __USE_XOPEN && !defined __USE_XOPEN2K)
# define XCASE	0000004
#endif
#define ECHO	0000010   /* Enable echo.  */
#define ECHOE	0000020   /* Echo erase character as error-correcting
			     backspace.  */
#define ECHOK	0000040   /* Echo KILL.  */
#define ECHONL	0000100   /* Echo NL.  */
#define NOFLSH	0000200   /* Disable flush after interrupt or quit.  */
#define TOSTOP	0000400   /* Send SIGTTOU for background output.  */
#ifdef __USE_MISC
# define ECHOCTL 0001000  /* If ECHO is also set, terminal special characters
			     other than TAB, NL, START, and STOP are echoed as
			     ^X, where X is the character with ASCII code 0x40
			     greater than the special character
			     (not in POSIX).  */
# define ECHOPRT 0002000  /* If ICANON and ECHO are also set, characters are
			     printed as they are being erased
			     (not in POSIX).  */
# define ECHOKE	 0004000  /* If ICANON is also set, KILL is echoed by erasing
			     each character on the line, as specified by ECHOE
			     and ECHOPRT (not in POSIX).  */
# define FLUSHO	 0010000  /* Output is being flushed.  This flag is toggled by
			     typing the DISCARD character (not in POSIX).  */
# define PENDIN	 0040000  /* All characters in the input queue are reprinted
			     when the next character is read
			     (not in POSIX).  */
#endif
#define IEXTEN	0100000   /* Enable implementation-defined input
			     processing.  */
#ifdef __USE_MISC
# define EXTPROC 0200000
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              usr/include/x86_64-linux-gnu/bits/termios-c_oflag.h                                                 0000644 0000000 0000000 00000005406 14711146254 020560  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* termios output mode definitions.  Linux/generic version.
   Copyright (C) 2019-2022 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library.  If not, see
   <https://www.gnu.org/licenses/>.  */

#ifndef _TERMIOS_H
# error "Never include <bits/termios-c_oflag.h> directly; use <termios.h> instead."
#endif

/* c_oflag bits */
#define OPOST	0000001  /* Post-process output.  */
#define OLCUC	0000002  /* Map lowercase characters to uppercase on output.
			    (not in POSIX).  */
#define ONLCR	0000004  /* Map NL to CR-NL on output.  */
#define OCRNL	0000010  /* Map CR to NL on output.  */
#define ONOCR	0000020  /* No CR output at column 0.  */
#define ONLRET	0000040  /* NL performs CR function.  */
#define OFILL	0000100  /* Use fill characters for delay.  */
#define OFDEL	0000200  /* Fill is DEL.  */
#if defined __USE_MISC || defined __USE_XOPEN
# define NLDLY	0000400  /* Select newline delays:  */
# define   NL0	0000000  /* Newline type 0.  */
# define   NL1	0000400  /* Newline type 1.  */
# define CRDLY	0003000  /* Select carriage-return delays:  */
# define   CR0	0000000  /* Carriage-return delay type 0.  */
# define   CR1	0001000  /* Carriage-return delay type 1.  */
# define   CR2	0002000  /* Carriage-return delay type 2.  */
# define   CR3	0003000  /* Carriage-return delay type 3.  */
