#   define warner(a,...)                        Perl_warner(aTHX_ a,__VA_ARGS__)
# endif /* !defined(MULTIPLICITY) || defined(PERL_CORE) ||
            defined(PERL_WANT_VARARGS) */
# if defined(MYMALLOC)
#   define dump_mstats(a)                       Perl_dump_mstats(aTHX_ a)
#   define get_mstats(a,b,c)                    Perl_get_mstats(aTHX_ a,b,c)
#   if defined(PERL_CORE)
#     define malloc_good_size                   Perl_malloc_good_size
#     define malloced_size                      Perl_malloced_size
#   endif
# endif
# if !defined(NO_MATHOMS)
#   define sv_nolocking(a)                      Perl_sv_nolocking(aTHX_ a)
#   define sv_nounlocking(a)                    Perl_sv_nounlocking(aTHX_ a)
#   define utf8_to_uvchr(a,b)                   Perl_utf8_to_uvchr(aTHX_ a,b)
#   define utf8_to_uvuni(a,b)                   Perl_utf8_to_uvuni(aTHX_ a,b)
#   define utf8n_to_uvuni(a,b,c,d)              Perl_utf8n_to_uvuni(aTHX_ a,b,c,d)
#   define uvuni_to_utf8(a,b)                   Perl_uvuni_to_utf8(aTHX_ a,b)
# endif
# if defined(PERL_CORE)
#   define PerlLIO_dup2_cloexec(a,b)            Perl_PerlLIO_dup2_cloexec(aTHX_ a,b)
#   define PerlLIO_dup_cloexec(a)               Perl_PerlLIO_dup_cloexec(aTHX_ a)
#   define PerlLIO_open3_cloexec(a,b,c)         Perl_PerlLIO_open3_cloexec(aTHX_ a,b,c)
#   define PerlLIO_open_cloexec(a,b)            Perl_PerlLIO_open_cloexec(aTHX_ a,b)
#   define Slab_Alloc(a)                        Perl_Slab_Alloc(aTHX_ a)
#   define Slab_Free(a)                         Perl_Slab_Free(aTHX_ a)
#   define abort_execution(a,b)                 Perl_abort_execution(aTHX_ a,b)
#   define alloc_LOGOP(a,b,c)                   Perl_alloc_LOGOP(aTHX_ a,b,c)
#   define allocmy(a,b,c)                       Perl_allocmy(aTHX_ a,b,c)
#   define amagic_applies(a,b,c)                Perl_amagic_applies(aTHX_ a,b,c)
#   define amagic_is_enabled(a)                 Perl_amagic_is_enabled(aTHX_ a)
#   define apply(a,b,c)                         Perl_apply(aTHX_ a,b,c)
#   define av_extend_guts(a,b,c,d,e)            Perl_av_extend_guts(aTHX_ a,b,c,d,e)
#   define av_nonelem(a,b)                      Perl_av_nonelem(aTHX_ a,b)
#   define av_remove_offset(a)                  Perl_av_remove_offset(aTHX_ a)
#   define bind_match(a,b,c)                    Perl_bind_match(aTHX_ a,b,c)
#   define boot_core_PerlIO()                   Perl_boot_core_PerlIO(aTHX)
#   define boot_core_UNIVERSAL()                Perl_boot_core_UNIVERSAL(aTHX)
#   define boot_core_builtin()                  Perl_boot_core_builtin(aTHX)
#   define boot_core_mro()                      Perl_boot_core_mro(aTHX)
#   define build_infix_plugin(a,b,c)            Perl_build_infix_plugin(aTHX_ a,b,c)
#   define cando(a,b,c)                         Perl_cando(aTHX_ a,b,c)
#   define check_utf8_print(a,b)                Perl_check_utf8_print(aTHX_ a,b)
#   define closest_cop(a,b,c,d)                 Perl_closest_cop(aTHX_ a,b,c,d)
#   define cmpchain_extend(a,b,c)               Perl_cmpchain_extend(aTHX_ a,b,c)
#   define cmpchain_finish(a)                   Perl_cmpchain_finish(aTHX_ a)
#   define cmpchain_start(a,b,c)                Perl_cmpchain_start(aTHX_ a,b,c)
#   define core_prototype(a,b,c,d)              Perl_core_prototype(aTHX_ a,b,c,d)
#   define coresub_op(a,b,c)                    Perl_coresub_op(aTHX_ a,b,c)
#   define create_eval_scope(a,b,c)             Perl_create_eval_scope(aTHX_ a,b,c)
#   define croak_caller                         Perl_croak_caller
#   define croak_no_mem                         Perl_croak_no_mem
#   define croak_no_mem_ext                     Perl_croak_no_mem_ext
#   define croak_popstack                       Perl_croak_popstack
#   define custom_op_get_field(a,b)             Perl_custom_op_get_field(aTHX_ a,b)
#   define cv_clone_into(a,b)                   Perl_cv_clone_into(aTHX_ a,b)
#   define cv_const_sv_or_av                    Perl_cv_const_sv_or_av
#   define cv_forget_slab(a)                    Perl_cv_forget_slab(aTHX_ a)
#   define cv_undef_flags(a,b)                  Perl_cv_undef_flags(aTHX_ a,b)
#   define cvgv_set(a,b)                        Perl_cvgv_set(aTHX_ a,b)
#   define cvstash_set(a,b)                     Perl_cvstash_set(aTHX_ a,b)
#   define deb_stack_all()                      Perl_deb_stack_all(aTHX)
#   define debug_hash_seed(a)                   Perl_debug_hash_seed(aTHX_ a)
#   define defelem_target(a,b)                  Perl_defelem_target(aTHX_ a,b)
#   define delete_eval_scope()                  Perl_delete_eval_scope(aTHX)
#   define die_unwind(a)                        Perl_die_unwind(aTHX_ a)
#   define do_aexec5(a,b,c,d,e)                 Perl_do_aexec5(aTHX_ a,b,c,d,e)
#   define do_dump_pad(a,b,c,d)                 Perl_do_dump_pad(aTHX_ a,b,c,d)
#   define do_eof(a)                            Perl_do_eof(aTHX_ a)
#   define do_ncmp(a,b)                         Perl_do_ncmp(aTHX_ a,b)
#   define do_open6(a,b,c,d,e,f)                Perl_do_open6(aTHX_ a,b,c,d,e,f)
#   define do_open_raw(a,b,c,d,e,f)             Perl_do_open_raw(aTHX_ a,b,c,d,e,f)
#   define do_print(a,b)                        Perl_do_print(aTHX_ a,b)
#   define do_readline()                        Perl_do_readline(aTHX)
#   define do_seek(a,b,c)                       Perl_do_seek(aTHX_ a,b,c)
#   define do_sysseek(a,b,c)                    Perl_do_sysseek(aTHX_ a,b,c)
#   define do_tell(a)                           Perl_do_tell(aTHX_ a)
#   define do_trans(a)                          Perl_do_trans(aTHX_ a)
#   define do_vecget(a,b,c)                     Perl_do_vecget(aTHX_ a,b,c)
#   define do_vecset(a)                         Perl_do_vecset(aTHX_ a)
#   define do_vop(a,b,c,d)                      Perl_do_vop(aTHX_ a,b,c,d)
#   define dofile(a,b)                          Perl_dofile(aTHX_ a,b)
#   define dump_all_perl(a)                     Perl_dump_all_perl(aTHX_ a)
#   define dump_packsubs_perl(a,b)              Perl_dump_packsubs_perl(aTHX_ a,b)
#   define dump_sub_perl(a,b)                   Perl_dump_sub_perl(aTHX_ a,b)
#   define find_lexical_cv(a)                   Perl_find_lexical_cv(aTHX_ a)
#   define find_runcv_where(a,b,c)              Perl_find_runcv_where(aTHX_ a,b,c)
#   define find_script(a,b,c,d)                 Perl_find_script(aTHX_ a,b,c,d)
#   define force_locale_unlock()                Perl_force_locale_unlock(aTHX)
#   define free_tied_hv_pool()                  Perl_free_tied_hv_pool(aTHX)
#   define get_hash_seed(a)                     Perl_get_hash_seed(aTHX_ a)
#   define get_no_modify()                      Perl_get_no_modify(aTHX)
#   define get_opargs()                         Perl_get_opargs(aTHX)
#   define gv_override(a,b)                     Perl_gv_override(aTHX_ a,b)
#   define gv_setref(a,b)                       Perl_gv_setref(aTHX_ a,b)
#   define gv_try_downgrade(a)                  Perl_gv_try_downgrade(aTHX_ a)
#   define hv_ename_add(a,b,c,d)                Perl_hv_ename_add(aTHX_ a,b,c,d)
#   define hv_ename_delete(a,b,c,d)             Perl_hv_ename_delete(aTHX_ a,b,c,d)
#   define hv_pushkv(a,b)                       Perl_hv_pushkv(aTHX_ a,b)
#   define init_argv_symbols(a,b)               Perl_init_argv_symbols(aTHX_ a,b)
#   define init_constants()                     Perl_init_constants(aTHX)
#   define init_debugger()                      Perl_init_debugger(aTHX)
#   define init_named_cv(a,b)                   Perl_init_named_cv(aTHX_ a,b)
#   define init_uniprops()                      Perl_init_uniprops(aTHX)
#   define invert(a)                            Perl_invert(aTHX_ a)
#   define invmap_dump(a,b)                     Perl_invmap_dump(aTHX_ a,b)
#   define io_close(a,b,c,d)                    Perl_io_close(aTHX_ a,b,c,d)
#   define isinfnansv(a)                        Perl_isinfnansv(aTHX_ a)
#   define jmaybe(a)                            Perl_jmaybe(aTHX_ a)
#   define keyword(a,b,c)                       Perl_keyword(aTHX_ a,b,c)
#   define list(a)                              Perl_list(aTHX_ a)
#   define localize(a,b)                        Perl_localize(aTHX_ a,b)
#   define magic_clear_all_env(a,b)             Perl_magic_clear_all_env(aTHX_ a,b)
#   define magic_cleararylen_p(a,b)             Perl_magic_cleararylen_p(aTHX_ a,b)
#   define magic_clearenv(a,b)                  Perl_magic_clearenv(aTHX_ a,b)
#   define magic_clearhint(a,b)                 Perl_magic_clearhint(aTHX_ a,b)
#   define magic_clearhints(a,b)                Perl_magic_clearhints(aTHX_ a,b)
#   define magic_clearhook(a,b)                 Perl_magic_clearhook(aTHX_ a,b)
#   define magic_clearhookall(a,b)              Perl_magic_clearhookall(aTHX_ a,b)
#   define magic_clearisa(a,b)                  Perl_magic_clearisa(aTHX_ a,b)
#   define magic_clearpack(a,b)                 Perl_magic_clearpack(aTHX_ a,b)
#   define magic_clearsig(a,b)                  Perl_magic_clearsig(aTHX_ a,b)
#   define magic_copycallchecker(a,b,c,d,e)     Perl_magic_copycallchecker(aTHX_ a,b,c,d,e)
#   define magic_existspack(a,b)                Perl_magic_existspack(aTHX_ a,b)
#   define magic_freearylen_p(a,b)              Perl_magic_freearylen_p(aTHX_ a,b)
#   define magic_freedestruct(a,b)              Perl_magic_freedestruct(aTHX_ a,b)
#   define magic_freemglob(a,b)                 Perl_magic_freemglob(aTHX_ a,b)
#   define magic_freeovrld(a,b)                 Perl_magic_freeovrld(aTHX_ a,b)
#   define magic_freeutf8(a,b)                  Perl_magic_freeutf8(aTHX_ a,b)
#   define magic_get(a,b)                       Perl_magic_get(aTHX_ a,b)
#   define magic_getarylen(a,b)                 Perl_magic_getarylen(aTHX_ a,b)
#   define magic_getdebugvar(a,b)               Perl_magic_getdebugvar(aTHX_ a,b)
#   define magic_getdefelem(a,b)                Perl_magic_getdefelem(aTHX_ a,b)
#   define magic_getnkeys(a,b)                  Perl_magic_getnkeys(aTHX_ a,b)
#   define magic_getpack(a,b)                   Perl_magic_getpack(aTHX_ a,b)
#   define magic_getpos(a,b)                    Perl_magic_getpos(aTHX_ a,b)
#   define magic_getsig(a,b)                    Perl_magic_getsig(aTHX_ a,b)
#   define magic_getsubstr(a,b)                 Perl_magic_getsubstr(aTHX_ a,b)
#   define magic_gettaint(a,b)                  Perl_magic_gettaint(aTHX_ a,b)
#   define magic_getuvar(a,b)                   Perl_magic_getuvar(aTHX_ a,b)
#   define magic_getvec(a,b)                    Perl_magic_getvec(aTHX_ a,b)
#   define magic_killbackrefs(a,b)              Perl_magic_killbackrefs(aTHX_ a,b)
#   define magic_nextpack(a,b,c)                Perl_magic_nextpack(aTHX_ a,b,c)
#   define magic_regdata_cnt(a,b)               Perl_magic_regdata_cnt(aTHX_ a,b)
#   define magic_regdatum_get(a,b)              Perl_magic_regdatum_get(aTHX_ a,b)
#   define magic_scalarpack(a,b)                Perl_magic_scalarpack(aTHX_ a,b)
#   define magic_set(a,b)                       Perl_magic_set(aTHX_ a,b)
#   define magic_set_all_env(a,b)               Perl_magic_set_all_env(aTHX_ a,b)
#   define magic_setarylen(a,b)                 Perl_magic_setarylen(aTHX_ a,b)
#   define magic_setdbline(a,b)                 Perl_magic_setdbline(aTHX_ a,b)
#   define magic_setdebugvar(a,b)               Perl_magic_setdebugvar(aTHX_ a,b)
#   define magic_setdefelem(a,b)                Perl_magic_setdefelem(aTHX_ a,b)
#   define magic_setenv(a,b)                    Perl_magic_setenv(aTHX_ a,b)
#   define magic_sethint(a,b)                   Perl_magic_sethint(aTHX_ a,b)
#   define magic_sethook(a,b)                   Perl_magic_sethook(aTHX_ a,b)
#   define magic_sethookall(a,b)                Perl_magic_sethookall(aTHX_ a,b)
#   define magic_setisa(a,b)                    Perl_magic_setisa(aTHX_ a,b)
#   define magic_setlvref(a,b)                  Perl_magic_setlvref(aTHX_ a,b)
#   define magic_setmglob(a,b)                  Perl_magic_setmglob(aTHX_ a,b)
#   define magic_setnkeys(a,b)                  Perl_magic_setnkeys(aTHX_ a,b)
#   define magic_setnonelem(a,b)                Perl_magic_setnonelem(aTHX_ a,b)
#   define magic_setpack(a,b)                   Perl_magic_setpack(aTHX_ a,b)
#   define magic_setpos(a,b)                    Perl_magic_setpos(aTHX_ a,b)
#   define magic_setregexp(a,b)                 Perl_magic_setregexp(aTHX_ a,b)
#   define magic_setsig(a,b)                    Perl_magic_setsig(aTHX_ a,b)
#   define magic_setsigall(a,b)                 Perl_magic_setsigall(aTHX_ a,b)
#   define magic_setsubstr(a,b)                 Perl_magic_setsubstr(aTHX_ a,b)
#   define magic_settaint(a,b)                  Perl_magic_settaint(aTHX_ a,b)
#   define magic_setutf8(a,b)                   Perl_magic_setutf8(aTHX_ a,b)
#   define magic_setuvar(a,b)                   Perl_magic_setuvar(aTHX_ a,b)
#   define magic_setvec(a,b)                    Perl_magic_setvec(aTHX_ a,b)
#   define magic_sizepack(a,b)                  Perl_magic_sizepack(aTHX_ a,b)
#   define magic_wipepack(a,b)                  Perl_magic_wipepack(aTHX_ a,b)
#   define mg_localize(a,b,c)                   Perl_mg_localize(aTHX_ a,b,c)
#   define mode_from_discipline(a,b)            Perl_mode_from_discipline(aTHX_ a,b)
#   define mro_isa_changed_in(a)                Perl_mro_isa_changed_in(aTHX_ a)
#   define mro_package_moved(a,b,c,d)           Perl_mro_package_moved(aTHX_ a,b,c,d)
#   define my_attrs(a,b)                        Perl_my_attrs(aTHX_ a,b)
#   define my_clearenv()                        Perl_my_clearenv(aTHX)
#   define my_lstat_flags(a)                    Perl_my_lstat_flags(aTHX_ a)
#   define my_stat_flags(a)                     Perl_my_stat_flags(aTHX_ a)
#   define my_strerror(a,b)                     Perl_my_strerror(aTHX_ a,b)
#   define my_unexec()                          Perl_my_unexec(aTHX)
#   define newATTRSUB_x(a,b,c,d,e,f)            Perl_newATTRSUB_x(aTHX_ a,b,c,d,e,f)
#   define newSTUB(a,b)                         Perl_newSTUB(aTHX_ a,b)
#   define newSVavdefelem(a,b,c)                Perl_newSVavdefelem(aTHX_ a,b,c)
#   define newXS_deffile(a,b)                   Perl_newXS_deffile(aTHX_ a,b)
#   define newXS_len_flags(a,b,c,d,e,f,g)       Perl_newXS_len_flags(aTHX_ a,b,c,d,e,f,g)
#   define nextargv(a,b)                        Perl_nextargv(aTHX_ a,b)
#   define no_bareword_filehandle(a)            Perl_no_bareword_filehandle(aTHX_ a)
#   define noperl_die                           Perl_noperl_die
#   define notify_parser_that_changed_to_utf8() Perl_notify_parser_that_changed_to_utf8(aTHX)
#   define oopsAV(a)                            Perl_oopsAV(aTHX_ a)
#   define oopsHV(a)                            Perl_oopsHV(aTHX_ a)
#   define op_unscope(a)                        Perl_op_unscope(aTHX_ a)
#   define package(a)                           Perl_package(aTHX_ a)
#   define package_version(a)                   Perl_package_version(aTHX_ a)
#   define pad_add_weakref(a)                   Perl_pad_add_weakref(aTHX_ a)
#   define pad_block_start(a)                   Perl_pad_block_start(aTHX_ a)
#   define pad_fixup_inner_anons(a,b,c)         Perl_pad_fixup_inner_anons(aTHX_ a,b,c)
#   define pad_free(a)                          Perl_pad_free(aTHX_ a)
#   define pad_leavemy()                        Perl_pad_leavemy(aTHX)
#   define pad_push(a,b)                        Perl_pad_push(aTHX_ a,b)
#   define pad_swipe(a,b)                       Perl_pad_swipe(aTHX_ a,b)
#   define padlist_store(a,b,c)                 Perl_padlist_store(aTHX_ a,b,c)
#   define parse_unicode_opts(a)                Perl_parse_unicode_opts(aTHX_ a)
#   define parser_free(a)                       Perl_parser_free(aTHX_ a)
#   define peep(a)                              Perl_peep(aTHX_ a)
#   define pmruntime(a,b,c,d,e)                 Perl_pmruntime(aTHX_ a,b,c,d,e)
#   define re_op_compile(a,b,c,d,e,f,g,h)       Perl_re_op_compile(aTHX_ a,b,c,d,e,f,g,h)
#   define refcounted_he_chain_2hv(a,b)         Perl_refcounted_he_chain_2hv(aTHX_ a,b)
#   define refcounted_he_fetch_pv(a,b,c,d)      Perl_refcounted_he_fetch_pv(aTHX_ a,b,c,d)
#   define refcounted_he_fetch_pvn(a,b,c,d,e)   Perl_refcounted_he_fetch_pvn(aTHX_ a,b,c,d,e)
#   define refcounted_he_fetch_sv(a,b,c,d)      Perl_refcounted_he_fetch_sv(aTHX_ a,b,c,d)
#   define refcounted_he_free(a)                Perl_refcounted_he_free(aTHX_ a)
#   define refcounted_he_inc(a)                 Perl_refcounted_he_inc(aTHX_ a)
#   define refcounted_he_new_pv(a,b,c,d,e)      Perl_refcounted_he_new_pv(aTHX_ a,b,c,d,e)
#   define refcounted_he_new_pvn(a,b,c,d,e,f)   Perl_refcounted_he_new_pvn(aTHX_ a,b,c,d,e,f)
#   define refcounted_he_new_sv(a,b,c,d,e)      Perl_refcounted_he_new_sv(aTHX_ a,b,c,d,e)
#   define report_evil_fh(a)                    Perl_report_evil_fh(aTHX_ a)
#   define report_wrongway_fh(a,b)              Perl_report_wrongway_fh(aTHX_ a,b)
#   define rpeep(a)                             Perl_rpeep(aTHX_ a)
#   define rsignal_restore(a,b)                 Perl_rsignal_restore(aTHX_ a,b)
#   define rsignal_save(a,b,c)                  Perl_rsignal_save(aTHX_ a,b,c)
#   define rxres_save(a,b)                      Perl_rxres_save(aTHX_ a,b)
#   define save_strlen(a)                       Perl_save_strlen(aTHX_ a)
#   define sawparens(a)                         Perl_sawparens(aTHX_ a)
#   define scalar(a)                            Perl_scalar(aTHX_ a)
#   define scalarvoid(a)                        Perl_scalarvoid(aTHX_ a)
#   define set_caret_X()                        Perl_set_caret_X(aTHX)
#   define set_numeric_standard(a,b)            Perl_set_numeric_standard(aTHX_ a,b)
#   define set_numeric_underlying(a,b)          Perl_set_numeric_underlying(aTHX_ a,b)
#   define setfd_cloexec                        Perl_setfd_cloexec
#   define setfd_cloexec_for_nonsysfd(a)        Perl_setfd_cloexec_for_nonsysfd(aTHX_ a)
#   define setfd_cloexec_or_inhexec_by_sysfdness(a) Perl_setfd_cloexec_or_inhexec_by_sysfdness(aTHX_ a)
#   define setfd_inhexec                        Perl_setfd_inhexec
#   define setfd_inhexec_for_sysfd(a)           Perl_setfd_inhexec_for_sysfd(aTHX_ a)
#   define sighandler1                          Perl_sighandler1
#   define sighandler3                          Perl_sighandler3
#   define sub_crush_depth(a)                   Perl_sub_crush_depth(aTHX_ a)
#   define sv_2num(a)                           Perl_sv_2num(aTHX_ a)
#   define sv_clean_all()                       Perl_sv_clean_all(aTHX)
#   define sv_clean_objs()                      Perl_sv_clean_objs(aTHX)
#   define sv_del_backref(a,b)                  Perl_sv_del_backref(aTHX_ a,b)
#   define sv_free_arenas()                     Perl_sv_free_arenas(aTHX)
#   define sv_pvbyten_force_wrapper(a,b,c)      Perl_sv_pvbyten_force_wrapper(aTHX_ a,b,c)
#   define sv_pvutf8n_force_wrapper(a,b,c)      Perl_sv_pvutf8n_force_wrapper(aTHX_ a,b,c)
#   define sv_resetpvn(a,b,c)                   Perl_sv_resetpvn(aTHX_ a,b,c)
#   define sv_sethek(a,b)                       Perl_sv_sethek(aTHX_ a,b)
#   define tmps_grow_p(a)                       Perl_tmps_grow_p(aTHX_ a)
#   define utilize(a,b,c,d,e)                   Perl_utilize(aTHX_ a,b,c,d,e)
#   define vivify_ref(a,b)                      Perl_vivify_ref(aTHX_ a,b)
#   define wait4pid(a,b,c)                      Perl_wait4pid(aTHX_ a,b,c)
#   define watch(a)                             Perl_watch(aTHX_ a)
#   define write_to_stderr(a)                   Perl_write_to_stderr(aTHX_ a)
#   define xs_boot_epilog(a)                    Perl_xs_boot_epilog(aTHX_ a)
#   define yyerror(a)                           Perl_yyerror(aTHX_ a)
#   define yyerror_pv(a,b)                      Perl_yyerror_pv(aTHX_ a,b)
#   define yyerror_pvn(a,b,c)                   Perl_yyerror_pvn(aTHX_ a,b,c)
#   define yyparse(a)                           Perl_yyparse(aTHX_ a)
#   define yyquit()                             Perl_yyquit(aTHX)
#   define yyunlex()                            Perl_yyunlex(aTHX)
#   define opslab_force_free(a)                 Perl_opslab_force_free(aTHX_ a)
#   define opslab_free(a)                       Perl_opslab_free(aTHX_ a)
#   define opslab_free_nopad(a)                 Perl_opslab_free_nopad(aTHX_ a)
#   define parser_free_nexttoke_ops(a,b)        Perl_parser_free_nexttoke_ops(aTHX_ a,b)
#   define should_warn_nl                       S_should_warn_nl
#   if defined(DEBUGGING)
#     define get_debug_opts(a,b)                Perl_get_debug_opts(aTHX_ a,b)
#     define set_padlist                        Perl_set_padlist
#   endif
#   if defined(DEBUG_LEAKING_SCALARS_FORK_DUMP)
#     define dump_sv_child(a)                   Perl_dump_sv_child(aTHX_ a)
#   endif
#   if !defined(HAS_GETENV_LEN)
#     define getenv_len(a,b)                    Perl_getenv_len(aTHX_ a,b)
#   endif
#   if defined(HAS_MSG) || defined(HAS_SEM) || defined(HAS_SHM)
#     define do_ipcctl(a,b,c)                   Perl_do_ipcctl(aTHX_ a,b,c)
#     define do_ipcget(a,b,c)                   Perl_do_ipcget(aTHX_ a,b,c)
#     define do_msgrcv(a,b)                     Perl_do_msgrcv(aTHX_ a,b)
#     define do_msgsnd(a,b)                     Perl_do_msgsnd(aTHX_ a,b)
#     define do_semop(a,b)                      Perl_do_semop(aTHX_ a,b)
#     define do_shmio(a,b,c)                    Perl_do_shmio(aTHX_ a,b,c)
#   endif
#   if defined(HAS_PIPE)
#     define PerlProc_pipe_cloexec(a)           Perl_PerlProc_pipe_cloexec(aTHX_ a)
#   endif
#   if !defined(HAS_RENAME)
#     define same_dirent(a,b)                   Perl_same_dirent(aTHX_ a,b)
#   endif
#   if defined(HAS_SOCKET)
#     define PerlSock_accept_cloexec(a,b,c)     Perl_PerlSock_accept_cloexec(aTHX_ a,b,c)
#     define PerlSock_socket_cloexec(a,b,c)     Perl_PerlSock_socket_cloexec(aTHX_ a,b,c)
#   endif
#   if   defined(HAS_SOCKETPAIR) ||                                     \
       ( defined(AF_INET) && defined(HAS_SOCKET) && defined(PF_INET) && \
         defined(SOCK_DGRAM) )
#     define PerlSock_socketpair_cloexec(a,b,c,d) Perl_PerlSock_socketpair_cloexec(aTHX_ a,b,c,d)
#   endif
#   if defined(_MSC_VER)
#     define magic_regdatum_set(a,b)            Perl_magic_regdatum_set(aTHX_ a,b)
#   else
#     define magic_regdatum_set(a,b)            Perl_magic_regdatum_set(aTHX_ a,b)
#   endif
#   if !defined(MULTIPLICITY) || defined(PERL_CORE) || \
        defined(PERL_WANT_VARARGS)
#     define tied_method(a,b,c,d,e,...)         Perl_tied_method(aTHX_ a,b,c,d,e,__VA_ARGS__)
#     if defined(PERL_IN_REGCOMP_C)
#       define re_croak(a,...)                  S_re_croak(aTHX_ a,__VA_ARGS__)
#     endif
#   endif
#   if defined(PERL_DEBUG_READONLY_COW)
#     define sv_buf_to_ro(a)                    Perl_sv_buf_to_ro(aTHX_ a)
#   endif
#   if defined(PERL_DEBUG_READONLY_OPS)
#     define Slab_to_ro(a)                      Perl_Slab_to_ro(aTHX_ a)
#     define Slab_to_rw(a)                      Perl_Slab_to_rw(aTHX_ a)
#   endif
#   if !defined(PERL_DEFAULT_DO_EXEC3_IMPLEMENTATION)
#     define do_exec(a)                         Perl_do_exec(aTHX_ a)
#   endif
#   if defined(PERL_IN_AV_C)
#     define get_aux_mg(a)                      S_get_aux_mg(aTHX_ a)
#   endif
#   if defined(PERL_IN_BUILTIN_C) || defined(PERL_IN_OP_C)
#     define finish_export_lexical()            Perl_finish_export_lexical(aTHX)
#     define import_builtin_bundle(a)           Perl_import_builtin_bundle(aTHX_ a)
#     define prepare_export_lexical()           Perl_prepare_export_lexical(aTHX)
#   endif
#   if defined(PERL_IN_CLASS_C) || defined(PERL_IN_GLOBALS_C) || \
       defined(PERL_IN_OP_C)    || defined(PERL_IN_PEEP_C)
#     define ck_anoncode(a)                     Perl_ck_anoncode(aTHX_ a)
#     define ck_backtick(a)                     Perl_ck_backtick(aTHX_ a)
#     define ck_bitop(a)                        Perl_ck_bitop(aTHX_ a)
#     define ck_classname(a)                    Perl_ck_classname(aTHX_ a)
#     define ck_cmp(a)                          Perl_ck_cmp(aTHX_ a)
#     define ck_concat(a)                       Perl_ck_concat(aTHX_ a)
#     define ck_defined(a)                      Perl_ck_defined(aTHX_ a)
#     define ck_delete(a)                       Perl_ck_delete(aTHX_ a)
#     define ck_each(a)                         Perl_ck_each(aTHX_ a)
#     define ck_eof(a)                          Perl_ck_eof(aTHX_ a)
#     define ck_eval(a)                         Perl_ck_eval(aTHX_ a)
#     define ck_exec(a)                         Perl_ck_exec(aTHX_ a)
#     define ck_exists(a)                       Perl_ck_exists(aTHX_ a)
#     define ck_ftst(a)                         Perl_ck_ftst(aTHX_ a)
#     define ck_fun(a)                          Perl_ck_fun(aTHX_ a)
#     define ck_glob(a)                         Perl_ck_glob(aTHX_ a)
#     define ck_grep(a)                         Perl_ck_grep(aTHX_ a)
#     define ck_helemexistsor(a)                Perl_ck_helemexistsor(aTHX_ a)
#     define ck_index(a)                        Perl_ck_index(aTHX_ a)
#     define ck_isa(a)                          Perl_ck_isa(aTHX_ a)
#     define ck_join(a)                         Perl_ck_join(aTHX_ a)
#     define ck_length(a)                       Perl_ck_length(aTHX_ a)
#     define ck_lfun(a)                         Perl_ck_lfun(aTHX_ a)
#     define ck_listiob(a)                      Perl_ck_listiob(aTHX_ a)
#     define ck_match(a)                        Perl_ck_match(aTHX_ a)
#     define ck_method(a)                       Perl_ck_method(aTHX_ a)
#     define ck_null(a)                         Perl_ck_null(aTHX_ a)
#     define ck_open(a)                         Perl_ck_open(aTHX_ a)
#     define ck_prototype(a)                    Perl_ck_prototype(aTHX_ a)
#     define ck_readline(a)                     Perl_ck_readline(aTHX_ a)
#     define ck_refassign(a)                    Perl_ck_refassign(aTHX_ a)
#     define ck_repeat(a)                       Perl_ck_repeat(aTHX_ a)
#     define ck_require(a)                      Perl_ck_require(aTHX_ a)
#     define ck_return(a)                       Perl_ck_return(aTHX_ a)
#     define ck_rfun(a)                         Perl_ck_rfun(aTHX_ a)
#     define ck_rvconst(a)                      Perl_ck_rvconst(aTHX_ a)
#     define ck_sassign(a)                      Perl_ck_sassign(aTHX_ a)
#     define ck_select(a)                       Perl_ck_select(aTHX_ a)
#     define ck_shift(a)                        Perl_ck_shift(aTHX_ a)
#     define ck_smartmatch(a)                   Perl_ck_smartmatch(aTHX_ a)
#     define ck_sort(a)                         Perl_ck_sort(aTHX_ a)
#     define ck_spair(a)                        Perl_ck_spair(aTHX_ a)
#     define ck_split(a)                        Perl_ck_split(aTHX_ a)
#     define ck_stringify(a)                    Perl_ck_stringify(aTHX_ a)
#     define ck_subr(a)                         Perl_ck_subr(aTHX_ a)
#     define ck_substr(a)                       Perl_ck_substr(aTHX_ a)
#     define ck_svconst(a)                      Perl_ck_svconst(aTHX_ a)
#     define ck_tell(a)                         Perl_ck_tell(aTHX_ a)
#     define ck_trunc(a)                        Perl_ck_trunc(aTHX_ a)
#     define ck_trycatch(a)                     Perl_ck_trycatch(aTHX_ a)
#   endif /* defined(PERL_IN_CLASS_C) || defined(PERL_IN_GLOBALS_C) ||
             defined(PERL_IN_OP_C)    || defined(PERL_IN_PEEP_C) */
#   if defined(PERL_IN_DEB_C)
#     define deb_stack_n(a,b,c,d,e,f)           S_deb_stack_n(aTHX_ a,b,c,d,e,f)
#   endif
#   if defined(PERL_IN_DOIO_C)
#     define argvout_final(a,b,c)               S_argvout_final(aTHX_ a,b,c)
#     define exec_failed(a,b,c)                 S_exec_failed(aTHX_ a,b,c)
#     define is_fork_open                       S_is_fork_open
#     define openn_cleanup(a,b,c,d,e,f,g,h,i,j,k,l,m) S_openn_cleanup(aTHX_ a,b,c,d,e,f,g,h,i,j,k,l,m)
#     define openn_setup(a,b,c,d,e,f)           S_openn_setup(aTHX_ a,b,c,d,e,f)
#     if !defined(DOSISH)
#       define ingroup(a,b)                     S_ingroup(aTHX_ a,b)
#     endif
#   endif
#   if defined(PERL_IN_DOOP_C)
#     define do_trans_complex(a,b)              S_do_trans_complex(aTHX_ a,b)
#     define do_trans_count(a,b)                S_do_trans_count(aTHX_ a,b)
#     define do_trans_count_invmap(a,b)         S_do_trans_count_invmap(aTHX_ a,b)
#     define do_trans_invmap(a,b)               S_do_trans_invmap(aTHX_ a,b)
#     define do_trans_simple(a,b)               S_do_trans_simple(aTHX_ a,b)
#   endif
#   if defined(PERL_IN_DUMP_C)
#     define deb_curcv(a)                       S_deb_curcv(aTHX_ a)
#     define debprof(a)                         S_debprof(aTHX_ a)
#     define pm_description(a)                  S_pm_description(aTHX_ a)
#     define sequence_num(a)                    S_sequence_num(aTHX_ a)
#   endif
#   if defined(PERL_IN_GV_C)
#     define find_default_stash(a,b,c,d,e,f)    S_find_default_stash(aTHX_ a,b,c,d,e,f)
#     define gv_fetchmeth_internal(a,b,c,d,e,f) S_gv_fetchmeth_internal(aTHX_ a,b,c,d,e,f)
#     define gv_init_svtype(a,b)                S_gv_init_svtype(aTHX_ a,b)
#     define gv_is_in_main(a,b,c)               S_gv_is_in_main(aTHX_ a,b,c)
#     define gv_magicalize(a,b,c,d,e)           S_gv_magicalize(aTHX_ a,b,c,d,e)
#     define gv_magicalize_isa(a)               S_gv_magicalize_isa(aTHX_ a)
#     define gv_stashpvn_internal(a,b,c)        S_gv_stashpvn_internal(aTHX_ a,b,c)
#     define maybe_multimagic_gv(a,b,c)         S_maybe_multimagic_gv(aTHX_ a,b,c)
#     define parse_gv_stash_name(a,b,c,d,e,f,g,h) S_parse_gv_stash_name(aTHX_ a,b,c,d,e,f,g,h)
#     define require_tie_mod(a,b,c,d,e)         S_require_tie_mod(aTHX_ a,b,c,d,e)
#   endif /* defined(PERL_IN_GV_C) */
#   if defined(PERL_IN_HV_C)
#     define clear_placeholders(a,b)            S_clear_placeholders(aTHX_ a,b)
#     define hsplit(a,b,c)                      S_hsplit(aTHX_ a,b,c)
#     define hv_auxinit(a)                      S_hv_auxinit(aTHX_ a)
#     define hv_delete_common(a,b,c,d,e,f,g)    S_hv_delete_common(aTHX_ a,b,c,d,e,f,g)
#     define hv_free_ent_ret(a)                 S_hv_free_ent_ret(aTHX_ a)
#     define hv_free_entries(a)                 S_hv_free_entries(aTHX_ a)
#     define hv_magic_check                     S_hv_magic_check
#     define hv_notallowed(a,b,c,d)             S_hv_notallowed(aTHX_ a,b,c,d)
#     define refcounted_he_value(a)             S_refcounted_he_value(aTHX_ a)
#     define save_hek_flags                     S_save_hek_flags
#     define share_hek_flags(a,b,c,d)           S_share_hek_flags(aTHX_ a,b,c,d)
#     define unshare_hek_or_pvn(a,b,c,d)        S_unshare_hek_or_pvn(aTHX_ a,b,c,d)
#     if !defined(PURIFY)
#       define new_he()                         S_new_he(aTHX)
#     endif
#   endif /* defined(PERL_IN_HV_C) */
#   if defined(PERL_IN_LOCALE_C)
#     define get_locale_string_utf8ness_i(a,b,c,d) S_get_locale_string_utf8ness_i(aTHX_ a,b,c,d)
#     define ints_to_tm(a,b,c,d,e,f,g,h,i,j,k)  S_ints_to_tm(aTHX_ a,b,c,d,e,f,g,h,i,j,k)
#     define is_locale_utf8(a)                  S_is_locale_utf8(aTHX_ a)
#     define my_localeconv(a)                   S_my_localeconv(aTHX_ a)
#     define populate_hash_from_C_localeconv(a,b,c,d,e) S_populate_hash_from_C_localeconv(aTHX_ a,b,c,d,e)
#     define strftime8(a,b,c,d,e,f,g)           S_strftime8(aTHX_ a,b,c,d,e,f,g)
#     define strftime_tm(a,b,c,d)               S_strftime_tm(aTHX_ a,b,c,d)
#     define sv_strftime_common(a,b,c)          S_sv_strftime_common(aTHX_ a,b,c)
#     if defined(HAS_MISSING_LANGINFO_ITEM_) || !defined(HAS_NL_LANGINFO)
#       define emulate_langinfo(a,b,c,d)        S_emulate_langinfo(aTHX_ a,b,c,d)
#     endif
#     if defined(USE_LOCALE)
#       define calculate_LC_ALL_string(a,b,c,d) S_calculate_LC_ALL_string(aTHX_ a,b,c,d)
#       define external_call_langinfo(a,b,c)    S_external_call_langinfo(aTHX_ a,b,c)
#       define get_category_index_helper(a,b,c) S_get_category_index_helper(aTHX_ a,b,c)
#       define mortalized_pv_copy(a)            S_mortalized_pv_copy(aTHX_ a)
#       define native_querylocale_i(a)          S_native_querylocale_i(aTHX_ a)
#       define new_LC_ALL(a,b)                  S_new_LC_ALL(aTHX_ a,b)
#       define output_check_environment_warning(a,b,c) S_output_check_environment_warning(aTHX_ a,b,c)
#       define parse_LC_ALL_string(a,b,c,d,e,f) S_parse_LC_ALL_string(aTHX_ a,b,c,d,e,f)
#       define save_to_buffer(a,b,c)            S_save_to_buffer(aTHX_ a,b,c)
#       define set_save_buffer_min_size(a,b,c)  S_set_save_buffer_min_size(aTHX_ a,b,c)
#       define setlocale_failure_panic_via_i(a,b,c,d,e,f,g) S_setlocale_failure_panic_via_i(aTHX_ a,b,c,d,e,f,g)
#       if defined(DEBUGGING)
#         define my_setlocale_debug_string_i(a,b,c,d) S_my_setlocale_debug_string_i(aTHX_ a,b,c,d)
#       endif
#       if   defined(HAS_LOCALECONV) && \
           ( defined(USE_LOCALE_MONETARY) || defined(USE_LOCALE_NUMERIC) )
#         define populate_hash_from_localeconv(a,b,c,d,e) S_populate_hash_from_localeconv(aTHX_ a,b,c,d,e)
#       endif
#       if defined(HAS_NL_LANGINFO)
#         define langinfo_sv_i(a,b,c,d,e)       S_langinfo_sv_i(aTHX_ a,b,c,d,e)
#       endif
#       if defined(LC_ALL)
#         define give_perl_locale_control(a,b)  S_give_perl_locale_control(aTHX_ a,b)
#       else
#         define give_perl_locale_control(a,b)  S_give_perl_locale_control(aTHX_ a,b)
#       endif
#       if defined(USE_LOCALE_COLLATE)
#         define new_collate(a,b)               S_new_collate(aTHX_ a,b)
#         if defined(DEBUGGING)
#           define print_collxfrm_input_and_return(a,b,c,d,e) S_print_collxfrm_input_and_return(aTHX_ a,b,c,d,e)
#         endif
#       endif
#       if defined(USE_LOCALE_CTYPE)
#         define is_codeset_name_UTF8           S_is_codeset_name_UTF8
#         define new_ctype(a,b)                 S_new_ctype(aTHX_ a,b)
#       endif
#       if defined(USE_LOCALE_NUMERIC)
#         define new_numeric(a,b)               S_new_numeric(aTHX_ a,b)
#       endif
#       if defined(USE_PERL_SWITCH_LOCALE_CONTEXT) || defined(DEBUGGING)
#         define get_LC_ALL_display()           S_get_LC_ALL_display(aTHX)
#       endif
#       if defined(USE_POSIX_2008_LOCALE)
#         define bool_setlocale_2008_i(a,b,c)   S_bool_setlocale_2008_i(aTHX_ a,b,c)
#         define querylocale_2008_i(a,b)        S_querylocale_2008_i(aTHX_ a,b)
#         define use_curlocale_scratch()        S_use_curlocale_scratch(aTHX)
#         if !defined(USE_QUERYLOCALE)
#           define update_PL_curlocales_i(a,b,c) S_update_PL_curlocales_i(aTHX_ a,b,c)
#         endif
#       elif  defined(USE_LOCALE_THREADS) &&     \
             !defined(USE_THREAD_SAFE_LOCALE) && \
             !defined(USE_THREAD_SAFE_LOCALE_EMULATION)
#         define less_dicey_bool_setlocale_r(a,b) S_less_dicey_bool_setlocale_r(aTHX_ a,b)
#         define less_dicey_setlocale_r(a,b)    S_less_dicey_setlocale_r(aTHX_ a,b)
#       endif
#       if defined(WIN32) || defined(WIN32_USE_FAKE_OLD_MINGW_LOCALES)
#         define Win_byte_string_to_wstring     S_Win_byte_string_to_wstring
#         define Win_wstring_to_byte_string     S_Win_wstring_to_byte_string
#         define win32_setlocale(a,b)           S_win32_setlocale(aTHX_ a,b)
#         define wrap_wsetlocale(a,b)           S_wrap_wsetlocale(aTHX_ a,b)
#       endif
#       if   defined(WIN32) || defined(WIN32_USE_FAKE_OLD_MINGW_LOCALES) || \
           ( defined(USE_POSIX_2008_LOCALE) && !defined(USE_QUERYLOCALE) )
#         define find_locale_from_environment(a) S_find_locale_from_environment(aTHX_ a)
#       endif
#     endif /* defined(USE_LOCALE) */
#     if defined(USE_LOCALE) || defined(DEBUGGING)
#       define get_displayable_string(a,b,c)    S_get_displayable_string(aTHX_ a,b,c)
#     endif
#   endif /* defined(PERL_IN_LOCALE_C) */
#   if defined(PERL_IN_MALLOC_C)
#     define adjust_size_and_find_bucket        S_adjust_size_and_find_bucket
#   endif
#   if defined(PERL_IN_MG_C)
#     define fixup_errno_string(a)              S_fixup_errno_string(aTHX_ a)
#     define magic_methcall1(a,b,c,d,e,f)       S_magic_methcall1(aTHX_ a,b,c,d,e,f)
#     define magic_methpack(a,b,c)              S_magic_methpack(aTHX_ a,b,c)
#     define restore_magic(a)                   S_restore_magic(aTHX_ a)
#     define save_magic_flags(a,b,c)            S_save_magic_flags(aTHX_ a,b,c)
#     define unwind_handler_stack(a)            S_unwind_handler_stack(aTHX_ a)
#   endif
#   if defined(PERL_IN_MG_C) || defined(PERL_IN_PP_C)
#     define translate_substr_offsets           Perl_translate_substr_offsets
#   endif
#   if defined(PERL_IN_MRO_C)
#     define mro_clean_isarev(a,b,c,d,e,f)      S_mro_clean_isarev(aTHX_ a,b,c,d,e,f)
#     define mro_gather_and_rename(a,b,c,d,e)   S_mro_gather_and_rename(aTHX_ a,b,c,d,e)
#     define mro_get_linear_isa_dfs(a,b)        S_mro_get_linear_isa_dfs(aTHX_ a,b)
#   endif
#   if defined(PERL_IN_NUMERIC_C)
#     define output_non_portable(a)             S_output_non_portable(aTHX_ a)
#   endif
#   if defined(PERL_IN_OP_C)
#     define apply_attrs(a,b,c)                 S_apply_attrs(aTHX_ a,b,c)
#     define apply_attrs_my(a,b,c,d)            S_apply_attrs_my(aTHX_ a,b,c,d)
#     define assignment_type(a)                 S_assignment_type(aTHX_ a)
#     define bad_type_gv(a,b,c,d)               S_bad_type_gv(aTHX_ a,b,c,d)
#     define bad_type_pv(a,b,c,d)               S_bad_type_pv(aTHX_ a,b,c,d)
#     define clear_special_blocks(a,b,c)        S_clear_special_blocks(aTHX_ a,b,c)
#     define cop_free(a)                        S_cop_free(aTHX_ a)
#     define dup_attrlist(a)                    S_dup_attrlist(aTHX_ a)
#     define find_and_forget_pmops(a)           S_find_and_forget_pmops(aTHX_ a)
#     define fold_constants(a)                  S_fold_constants(aTHX_ a)
#     define force_list(a,b)                    S_force_list(aTHX_ a,b)
#     define forget_pmop(a)                     S_forget_pmop(aTHX_ a)
#     define gen_constant_list(a)               S_gen_constant_list(aTHX_ a)
#     define inplace_aassign(a)                 S_inplace_aassign(aTHX_ a)
#     define is_handle_constructor              S_is_handle_constructor
#     define is_standard_filehandle_name        S_is_standard_filehandle_name
#     define listkids(a)                        S_listkids(aTHX_ a)
#     define looks_like_bool(a)                 S_looks_like_bool(aTHX_ a)
#     define modkids(a,b)                       S_modkids(aTHX_ a,b)
#     define move_proto_attr(a,b,c,d)           S_move_proto_attr(aTHX_ a,b,c,d)
#     define my_kid(a,b,c)                      S_my_kid(aTHX_ a,b,c)
#     define newGIVWHENOP(a,b,c,d,e)            S_newGIVWHENOP(aTHX_ a,b,c,d,e)
#     define newMETHOP_internal(a,b,c,d)        S_newMETHOP_internal(aTHX_ a,b,c,d)
#     define new_logop(a,b,c,d)                 S_new_logop(aTHX_ a,b,c,d)
#     define no_fh_allowed(a)                   S_no_fh_allowed(aTHX_ a)
#     define op_integerize(a)                   S_op_integerize(aTHX_ a)
#     define op_std_init(a)                     S_op_std_init(aTHX_ a)
#     define pmtrans(a,b,c)                     S_pmtrans(aTHX_ a,b,c)
#     define process_special_blocks(a,b,c,d)    S_process_special_blocks(aTHX_ a,b,c,d)
#     define ref_array_or_hash(a)               S_ref_array_or_hash(aTHX_ a)
#     define refkids(a,b)                       S_refkids(aTHX_ a,b)
#     define scalar_mod_type                    S_scalar_mod_type
#     define scalarboolean(a)                   S_scalarboolean(aTHX_ a)
#     define scalarkids(a)                      S_scalarkids(aTHX_ a)
#     define search_const(a)                    S_search_const(aTHX_ a)
#     define simplify_sort(a)                   S_simplify_sort(aTHX_ a)
#     define too_few_arguments_pv(a,b,c)        S_too_few_arguments_pv(aTHX_ a,b,c)
#     define too_many_arguments_pv(a,b,c)       S_too_many_arguments_pv(aTHX_ a,b,c)
#     define voidnonfinal(a)                    S_voidnonfinal(aTHX_ a)
#   endif /* defined(PERL_IN_OP_C) */
#   if defined(PERL_IN_OP_C) || defined(PERL_IN_PAD_C)
#     define PadnameIN_SCOPE                    S_PadnameIN_SCOPE
#   endif
#   if defined(PERL_IN_OP_C) || defined(PERL_IN_PEEP_C)
#     define check_hash_fields_and_hekify(a,b,c) Perl_check_hash_fields_and_hekify(aTHX_ a,b,c)
#     define no_bareword_allowed(a)             Perl_no_bareword_allowed(aTHX_ a)
#     define op_prune_chain_head                Perl_op_prune_chain_head
#     define op_varname(a)                      Perl_op_varname(aTHX_ a)
#     define warn_elem_scalar_context(a,b,c,d)  Perl_warn_elem_scalar_context(aTHX_ a,b,c,d)
#   endif
#   if defined(PERL_IN_OP_C) || defined(PERL_IN_SV_C)
#     define report_redefined_cv(a,b,c)         Perl_report_redefined_cv(aTHX_ a,b,c)
#     define varname(a,b,c,d,e,f)               Perl_varname(aTHX_ a,b,c,d,e,f)
#   endif
#   if defined(PERL_IN_PAD_C)
#     define pad_alloc_name(a,b,c,d)            S_pad_alloc_name(aTHX_ a,b,c,d)
#     define pad_check_dup(a,b,c)               S_pad_check_dup(aTHX_ a,b,c)
#     define pad_findlex(a,b,c,d,e,f,g,h,i)     S_pad_findlex(aTHX_ a,b,c,d,e,f,g,h,i)
#     define pad_reset()                        S_pad_reset(aTHX)
#     if defined(DEBUGGING)
#       define cv_dump(a,b)                     S_cv_dump(aTHX_ a,b)
#     endif
#   endif
#   if defined(PERL_IN_PEEP_C)
#     define finalize_op(a)                     S_finalize_op(aTHX_ a)
#     define optimize_op(a)                     S_optimize_op(aTHX_ a)
#     define traverse_op_tree(a,b)              S_traverse_op_tree(aTHX_ a,b)
#   endif
#   if defined(PERL_IN_PERL_C)
#     define find_beginning(a,b)                S_find_beginning(aTHX_ a,b)
#     define forbid_setid(a,b)                  S_forbid_setid(aTHX_ a,b)
#     define incpush(a,b,c)                     S_incpush(aTHX_ a,b,c)
#     define incpush_use_sep(a,b,c)             S_incpush_use_sep(aTHX_ a,b,c)
#     define init_ids()                         S_init_ids(aTHX)
#     define init_interp()                      S_init_interp(aTHX)
#     define init_main_stash()                  S_init_main_stash(aTHX)
#     define init_perllib()                     S_init_perllib(aTHX)
#     define init_postdump_symbols(a,b,c)       S_init_postdump_symbols(aTHX_ a,b,c)
#     define init_predump_symbols()             S_init_predump_symbols(aTHX)
#     define mayberelocate(a,b,c)               S_mayberelocate(aTHX_ a,b,c)
#     define minus_v()                          S_minus_v(aTHX)
#     define my_exit_jump()                     S_my_exit_jump(aTHX)
#     define nuke_stacks()                      S_nuke_stacks(aTHX)
#     define open_script(a,b,c)                 S_open_script(aTHX_ a,b,c)
#     define parse_body(a,b)                    S_parse_body(aTHX_ a,b)
#     define run_body(a)                        S_run_body(aTHX_ a)
#     define usage()                            S_usage(aTHX)
#     if !defined(PERL_IS_MINIPERL)
#       define incpush_if_exists(a,b,c)         S_incpush_if_exists(aTHX_ a,b,c)
#     endif
#   endif /* defined(PERL_IN_PERL_C) */
#   if defined(PERL_IN_PP_C)
#     define do_chomp(a,b,c)                    S_do_chomp(aTHX_ a,b,c)
#     define do_delete_local()                  S_do_delete_local(aTHX)
#     define refto(a)                           S_refto(aTHX_ a)
#   endif
#   if defined(PERL_IN_PP_C) || defined(PERL_IN_PP_HOT_C)
#     define lossless_NV_to_IV                  S_lossless_NV_to_IV
#   endif
#   if defined(PERL_IN_PP_C) || defined(PERL_IN_UTF8_C)
#     define _to_upper_title_latin1(a,b,c,d)    Perl__to_upper_title_latin1(aTHX_ a,b,c,d)
#   endif
#   if defined(PERL_IN_PP_CTL_C)
#     define check_type_and_open(a)             S_check_type_and_open(aTHX_ a)
#     define destroy_matcher(a)                 S_destroy_matcher(aTHX_ a)
#     define do_smartmatch(a,b,c)               S_do_smartmatch(aTHX_ a,b,c)
#     define docatch(a)                         S_docatch(aTHX_ a)
#     define doeval_compile(a,b,c,d)            S_doeval_compile(aTHX_ a,b,c,d)
#     define dofindlabel(a,b,c,d,e,f)           S_dofindlabel(aTHX_ a,b,c,d,e,f)
#     define doparseform(a)                     S_doparseform(aTHX_ a)
#     define dopoptoeval(a)                     S_dopoptoeval(aTHX_ a)
#     define dopoptogivenfor(a)                 S_dopoptogivenfor(aTHX_ a)
#     define dopoptolabel(a,b,c)                S_dopoptolabel(aTHX_ a,b,c)
#     define dopoptoloop(a)                     S_dopoptoloop(aTHX_ a)
#     define dopoptosub_at(a,b)                 S_dopoptosub_at(aTHX_ a,b)
#     define dopoptowhen(a)                     S_dopoptowhen(aTHX_ a)
#     define make_matcher(a)                    S_make_matcher(aTHX_ a)
#     define matcher_matches_sv(a,b)            S_matcher_matches_sv(aTHX_ a,b)
#     define num_overflow                       S_num_overflow
#     define path_is_searchable                 S_path_is_searchable
#     define run_user_filter(a,b,c)             S_run_user_filter(aTHX_ a,b,c)
#     define rxres_free(a)                      S_rxres_free(aTHX_ a)
#     define rxres_restore(a,b)                 S_rxres_restore(aTHX_ a,b)
#     define save_lines(a,b)                    S_save_lines(aTHX_ a,b)
#     if !defined(PERL_DISABLE_PMC)
#       define doopen_pm(a)                     S_doopen_pm(aTHX_ a)
#     endif
#   endif /* defined(PERL_IN_PP_CTL_C) */
#   if defined(PERL_IN_PP_CTL_C) || defined(PERL_IN_UTIL_C)
#     define invoke_exception_hook(a,b)         Perl_invoke_exception_hook(aTHX_ a,b)
#   endif
#   if defined(PERL_IN_PP_HOT_C)
#     define do_oddball(a,b)                    S_do_oddball(aTHX_ a,b)
#     define opmethod_stash(a)                  S_opmethod_stash(aTHX_ a)
#     define should_we_output_Debug_r(a)        S_should_we_output_Debug_r(aTHX_ a)
#   endif
#   if defined(PERL_IN_PP_PACK_C)
#     define div128(a,b)                        S_div128(aTHX_ a,b)
#     define first_symbol                       S_first_symbol
#     define get_num(a,b)                       S_get_num(aTHX_ a,b)
#     define group_end(a,b,c)                   S_group_end(aTHX_ a,b,c)
#     define is_an_int(a,b)                     S_is_an_int(aTHX_ a,b)
#     define measure_struct(a)                  S_measure_struct(aTHX_ a)
#     define mul128(a,b)                        S_mul128(aTHX_ a,b)
#     define my_bytes_to_utf8                   S_my_bytes_to_utf8
#     define need_utf8                          S_need_utf8
#     define next_symbol(a)                     S_next_symbol(aTHX_ a)
#     define pack_rec(a,b,c,d)                  S_pack_rec(aTHX_ a,b,c,d)
#     define sv_exp_grow(a,b)                   S_sv_exp_grow(aTHX_ a,b)
#     define unpack_rec(a,b,c,d,e)              S_unpack_rec(aTHX_ a,b,c,d,e)
#   endif /* defined(PERL_IN_PP_PACK_C) */
#   if defined(PERL_IN_PP_SORT_C)
#     define amagic_cmp(a,b)                    S_amagic_cmp(aTHX_ a,b)
#     define amagic_cmp_desc(a,b)               S_amagic_cmp_desc(aTHX_ a,b)
#     define amagic_i_ncmp(a,b)                 S_amagic_i_ncmp(aTHX_ a,b)
#     define amagic_i_ncmp_desc(a,b)            S_amagic_i_ncmp_desc(aTHX_ a,b)
#     define amagic_ncmp(a,b)                   S_amagic_ncmp(aTHX_ a,b)
#     define amagic_ncmp_desc(a,b)              S_amagic_ncmp_desc(aTHX_ a,b)
#     define cmp_desc(a,b)                      S_cmp_desc(aTHX_ a,b)
#     define sortcv(a,b)                        S_sortcv(aTHX_ a,b)
#     define sortcv_stacked(a,b)                S_sortcv_stacked(aTHX_ a,b)
#     define sortcv_xsub(a,b)                   S_sortcv_xsub(aTHX_ a,b)
#     define sortsv_flags_impl(a,b,c,d)         S_sortsv_flags_impl(aTHX_ a,b,c,d)
#     define sv_i_ncmp(a,b)                     S_sv_i_ncmp(aTHX_ a,b)
#     define sv_i_ncmp_desc(a,b)                S_sv_i_ncmp_desc(aTHX_ a,b)
#     define sv_ncmp(a,b)                       S_sv_ncmp(aTHX_ a,b)
#     define sv_ncmp_desc(a,b)                  S_sv_ncmp_desc(aTHX_ a,b)
#     if defined(USE_LOCALE_COLLATE)
#       define amagic_cmp_locale(a,b)           S_amagic_cmp_locale(aTHX_ a,b)
#       define amagic_cmp_locale_desc(a,b)      S_amagic_cmp_locale_desc(aTHX_ a,b)
#       define cmp_locale_desc(a,b)             S_cmp_locale_desc(aTHX_ a,b)
#     endif
#   endif /* defined(PERL_IN_PP_SORT_C) */
#   if defined(PERL_IN_PP_SYS_C)
#     define doform(a,b,c)                      S_doform(aTHX_ a,b,c)
#     define space_join_names_mortal(a)         S_space_join_names_mortal(aTHX_ a)
#     if !defined(HAS_MKDIR) || !defined(HAS_RMDIR)
#       define dooneliner(a,b)                  S_dooneliner(aTHX_ a,b)
#     endif
#   endif
#   if defined(PERL_IN_REGCOMP_INVLIST_C) && !defined(PERL_EXT_RE_BUILD)
#     define initialize_invlist_guts(a,b)       S_initialize_invlist_guts(aTHX_ a,b)
#   endif
#   if defined(PERL_IN_SCOPE_C)
#     define save_pushptri32ptr(a,b,c,d)        S_save_pushptri32ptr(aTHX_ a,b,c,d)
#     define save_scalar_at(a,b)                S_save_scalar_at(aTHX_ a,b)
#   endif
#   if defined(PERL_IN_TOKE_C)
#     define ao(a)                              S_ao(aTHX_ a)
#     define check_uni()                        S_check_uni(aTHX)
#     define checkcomma(a,b,c)                  S_checkcomma(aTHX_ a,b,c)
#     define filter_gets(a,b)                   S_filter_gets(aTHX_ a,b)
#     define find_in_my_stash(a,b)              S_find_in_my_stash(aTHX_ a,b)
#     define force_ident(a,b)                   S_force_ident(aTHX_ a,b)
#     define force_ident_maybe_lex(a)           S_force_ident_maybe_lex(aTHX_ a)
#     define force_next(a)                      S_force_next(aTHX_ a)
#     define force_strict_version(a)            S_force_strict_version(aTHX_ a)
#     define force_version(a,b)                 S_force_version(aTHX_ a,b)
#     define force_word(a,b,c,d)                S_force_word(aTHX_ a,b,c,d)
#     define get_and_check_backslash_N_name_wrapper(a,b) S_get_and_check_backslash_N_name_wrapper(aTHX_ a,b)
#     define incline(a,b)                       S_incline(aTHX_ a,b)
#     define intuit_method(a,b,c)               S_intuit_method(aTHX_ a,b,c)
#     define intuit_more(a,b)                   S_intuit_more(aTHX_ a,b)
#     define lop(a,b,c)                         S_lop(aTHX_ a,b,c)
#     define missingterm(a,b)                   S_missingterm(aTHX_ a,b)
#     define no_op(a,b)                         S_no_op(aTHX_ a,b)
#     define parse_ident(a,b,c,d,e,f,g)         S_parse_ident(aTHX_ a,b,c,d,e,f,g)
#     define pending_ident()                    S_pending_ident(aTHX)
#     define scan_const(a)                      S_scan_const(aTHX_ a)
#     define scan_formline(a)                   S_scan_formline(aTHX_ a)
#     define scan_heredoc(a)                    S_scan_heredoc(aTHX_ a)
#     define scan_ident(a,b,c,d)                S_scan_ident(aTHX_ a,b,c,d)
#     define scan_inputsymbol(a)                S_scan_inputsymbol(aTHX_ a)
#     define scan_pat(a,b)                      S_scan_pat(aTHX_ a,b)
#     define scan_subst(a)                      S_scan_subst(aTHX_ a)
#     define scan_trans(a)                      S_scan_trans(aTHX_ a)
#     define sublex_done()                      S_sublex_done(aTHX)
#     define sublex_push()                      S_sublex_push(aTHX)
#     define sublex_start()                     S_sublex_start(aTHX)
#     define swallow_bom(a)                     S_swallow_bom(aTHX_ a)
#     define tokenize_use(a,b)                  S_tokenize_use(aTHX_ a,b)
#     define tokeq(a)                           S_tokeq(aTHX_ a)
#     define update_debugger_info(a,b,c)        S_update_debugger_info(aTHX_ a,b,c)
#     define yywarn(a,b)                        S_yywarn(aTHX_ a,b)
#     if defined(DEBUGGING)
#       define printbuf(a,b)                    S_printbuf(aTHX_ a,b)
#       define tokereport(a,b)                  S_tokereport(aTHX_ a,b)
#     endif
#     if defined(PERL_CR_FILTER)
#       define cr_textfilter(a,b,c)             S_cr_textfilter(aTHX_ a,b,c)
#       define strip_return(a)                  S_strip_return(aTHX_ a)
#     endif
#     if !defined(PERL_NO_UTF16_FILTER)
#       define add_utf16_textfilter(a,b)        S_add_utf16_textfilter(aTHX_ a,b)
#       define utf16_textfilter(a,b,c)          S_utf16_textfilter(aTHX_ a,b,c)
#     endif
#   endif /* defined(PERL_IN_TOKE_C) */
#   if defined(PERL_IN_UNIVERSAL_C)
#     define isa_lookup(a,b,c,d,e)              S_isa_lookup(aTHX_ a,b,c,d,e)
#     define sv_derived_from_svpvn(a,b,c,d,e)   S_sv_derived_from_svpvn(aTHX_ a,b,c,d,e)
#   endif
#   if defined(PERL_IN_UTF8_C)
#     define _to_utf8_case(a,b,c,d,e,f,g,h,i)   S__to_utf8_case(aTHX_ a,b,c,d,e,f,g,h,i)
#     define check_locale_boundary_crossing(a,b,c,d) S_check_locale_boundary_crossing(aTHX_ a,b,c,d)
#     define does_utf8_overflow                 S_does_utf8_overflow
#     define isFF_overlong                      S_isFF_overlong
#     define is_utf8_common(a,b,c)              S_is_utf8_common(aTHX_ a,b,c)
#     define is_utf8_overlong                   S_is_utf8_overlong
#     define new_msg_hv(a,b,c)                  S_new_msg_hv(aTHX_ a,b,c)
#     define to_case_cp_list(a,b,c,d,e,f,g,h)   S_to_case_cp_list(aTHX_ a,b,c,d,e,f,g,h)
#     define to_lower_latin1                    S_to_lower_latin1
#     define turkic_fc(a,b,c,d)                 S_turkic_fc(aTHX_ a,b,c,d)
#     define turkic_lc(a,b,c,d)                 S_turkic_lc(aTHX_ a,b,c,d)
#     define turkic_uc(a,b,c,d)                 S_turkic_uc(aTHX_ a,b,c,d)
#     define unexpected_non_continuation_text(a,b,c,d) S_unexpected_non_continuation_text(aTHX_ a,b,c,d)
#     if 0
#       define warn_on_first_deprecated_use(a,b,c,d,e,f) S_warn_on_first_deprecated_use(aTHX_ a,b,c,d,e,f)
#     endif
#   endif /* defined(PERL_IN_UTF8_C) */
#   if defined(PERL_IN_UTIL_C)
#     define ckwarn_common(a)                   S_ckwarn_common(aTHX_ a)
#     define mess_alloc()                       S_mess_alloc(aTHX)
#     define ptr_hash                           S_ptr_hash
#     define with_queued_errors(a)              S_with_queued_errors(aTHX_ a)
#     if defined(PERL_MEM_LOG) && !defined(PERL_MEM_LOG_NOIMPL)
#       define mem_log_common                   S_mem_log_common
#     endif
#     if defined(PERL_USES_PL_PIDSTATUS)
#       define pidgone(a,b)                     S_pidgone(aTHX_ a,b)
#     endif
#   endif /* defined(PERL_IN_UTIL_C) */
#   if defined(PERL_USE_3ARG_SIGHANDLER)
#     define sighandler                         Perl_sighandler
#   else
#     define sighandler                         Perl_sighandler
#   endif
#   if defined(USE_C_BACKTRACE)
#     define get_c_backtrace(a,b)               Perl_get_c_backtrace(aTHX_ a,b)
#   endif
#   if defined(USE_ITHREADS)
#     define mro_meta_dup(a,b)                  Perl_mro_meta_dup(aTHX_ a,b)
#     define padlist_dup(a,b)                   Perl_padlist_dup(aTHX_ a,b)
#     define padname_dup(a,b)                   Perl_padname_dup(aTHX_ a,b)
#     define padnamelist_dup(a,b)               Perl_padnamelist_dup(aTHX_ a,b)
#     if !defined(PERL_IMPLICIT_SYS)
#       define PerlEnv_putenv(a)                S_PerlEnv_putenv(aTHX_ a)
#     endif
#     if defined(PERL_IN_OP_C) || defined(PERL_IN_PEEP_C)
#       define op_relocate_sv(a,b)              Perl_op_relocate_sv(aTHX_ a,b)
#     endif
#   endif /* defined(USE_ITHREADS) */
#   if defined(USE_LOCALE_COLLATE)
#     define magic_freecollxfrm(a,b)            Perl_magic_freecollxfrm(aTHX_ a,b)
#     define magic_setcollxfrm(a,b)             Perl_magic_setcollxfrm(aTHX_ a,b)
#   endif
#   if defined(USE_PERLIO)
#     define PerlIO_restore_errno(a)            Perl_PerlIO_restore_errno(aTHX_ a)
#     define PerlIO_save_errno(a)               Perl_PerlIO_save_errno(aTHX_ a)
#   endif
#   if defined(USE_QUADMATH)
#     define quadmath_format_needed             Perl_quadmath_format_needed
#     define quadmath_format_valid              Perl_quadmath_format_valid
#   endif
#   if defined(WIN32)
#     define get_win32_message_utf8ness(a)      Perl_get_win32_message_utf8ness(aTHX_ a)
#   else
#     define do_exec3(a,b,c)                    Perl_do_exec3(aTHX_ a,b,c)
#   endif
# endif /* defined(PERL_CORE) */
# if defined(PERL_CORE) || defined(PERL_EXT)
#   define _byte_dump_string(a,b,c)             Perl__byte_dump_string(aTHX_ a,b,c)
#   define _inverse_folds(a,b,c)                Perl__inverse_folds(aTHX_ a,b,c)
#   define append_utf8_from_native_byte         Perl_append_utf8_from_native_byte
#   define av_reify(a)                          Perl_av_reify(aTHX_ a)
#   define cntrl_to_mnemonic                    Perl_cntrl_to_mnemonic
#   define current_re_engine()                  Perl_current_re_engine(aTHX)
#   define cv_ckproto_len_flags(a,b,c,d,e)      Perl_cv_ckproto_len_flags(aTHX_ a,b,c,d,e)
#   define delimcpy_no_escape                   Perl_delimcpy_no_escape
#   define do_uniprop_match                     Perl_do_uniprop_match
#   define get_and_check_backslash_N_name(a,b,c,d) Perl_get_and_check_backslash_N_name(aTHX_ a,b,c,d)
#   define get_deprecated_property_msg          Perl_get_deprecated_property_msg
#   define get_prop_definition(a)               Perl_get_prop_definition(aTHX_ a)
#   define get_prop_values                      Perl_get_prop_values
#   define load_charnames(a,b,c,d)              Perl_load_charnames(aTHX_ a,b,c,d)
#   define mbtowc_(a,b,c)                       Perl_mbtowc_(aTHX_ a,b,c)
#   define mg_find_mglob(a)                     Perl_mg_find_mglob(aTHX_ a)
#   define multiconcat_stringify(a)             Perl_multiconcat_stringify(aTHX_ a)
#   define multideref_stringify(a,b)            Perl_multideref_stringify(aTHX_ a,b)
#   define op_clear(a)                          Perl_op_clear(aTHX_ a)
#   define qerror(a)                            Perl_qerror(aTHX_ a)
#   define reg_named_buff(a,b,c,d)              Perl_reg_named_buff(aTHX_ a,b,c,d)
#   define reg_named_buff_iter(a,b,c)           Perl_reg_named_buff_iter(aTHX_ a,b,c)
#   define reg_numbered_buff_fetch(a,b,c)       Perl_reg_numbered_buff_fetch(aTHX_ a,b,c)
#   define reg_numbered_buff_fetch_flags(a,b,c,d) Perl_reg_numbered_buff_fetch_flags(aTHX_ a,b,c,d)
#   define reg_numbered_buff_length(a,b,c)      Perl_reg_numbered_buff_length(aTHX_ a,b,c)
#   define reg_numbered_buff_store(a,b,c)       Perl_reg_numbered_buff_store(aTHX_ a,b,c)
#   define reg_qr_package(a)                    Perl_reg_qr_package(aTHX_ a)
#   define reg_temp_copy(a,b)                   Perl_reg_temp_copy(aTHX_ a,b)
#   define report_uninit(a)                     Perl_report_uninit(aTHX_ a)
#   define scan_str(a,b,c,d,e)                  Perl_scan_str(aTHX_ a,b,c,d,e)
#   define scan_word(a,b,c,d,e)                 Perl_scan_word(aTHX_ a,b,c,d,e)
#   define scan_word6(a,b,c,d,e,f)              Perl_scan_word6(aTHX_ a,b,c,d,e,f)
#   define skipspace_flags(a,b)                 Perl_skipspace_flags(aTHX_ a,b)
#   define sv_magicext_mglob(a)                 Perl_sv_magicext_mglob(aTHX_ a)
#   define sv_only_taint_gmagic                 Perl_sv_only_taint_gmagic
#   define sv_strftime_ints(a,b,c,d,e,f,g,h,i,j) Perl_sv_strftime_ints(aTHX_ a,b,c,d,e,f,g,h,i,j)
#   define utf16_to_utf8_base(a,b,c,d,e,f)      Perl_utf16_to_utf8_base(aTHX_ a,b,c,d,e,f)
#   define utf8_to_utf16_base(a,b,c,d,e,f)      Perl_utf8_to_utf16_base(aTHX_ a,b,c,d,e,f)
#   define validate_proto(a,b,c,d)              Perl_validate_proto(aTHX_ a,b,c,d)
#   define vivify_defelem(a)                    Perl_vivify_defelem(aTHX_ a)
#   define yylex()                              Perl_yylex(aTHX)
#   define isSCRIPT_RUN(a,b,c)                  Perl_isSCRIPT_RUN(aTHX_ a,b,c)
#   define is_utf8_non_invariant_string         Perl_is_utf8_non_invariant_string
#   define sv_or_pv_pos_u2b(a,b,c,d)            S_sv_or_pv_pos_u2b(aTHX_ a,b,c,d)
#   define variant_under_utf8_count             S_variant_under_utf8_count
#   if !defined(HAS_MEMRCHR)
#     define my_memrchr                         S_my_memrchr
#   endif
#   if defined(PERL_ANY_COW)
#     define sv_setsv_cow(a,b)                  Perl_sv_setsv_cow(aTHX_ a,b)
#   endif
#   if defined(PERL_IN_DOOP_C)    || defined(PERL_IN_OP_C)        || \
       defined(PERL_IN_PP_C)      || defined(PERL_IN_REGCOMP_ANY) || \
       defined(PERL_IN_REGEXEC_C) || defined(PERL_IN_TOKE_C)      || \
       defined(PERL_IN_UTF8_C)
#     define _invlist_contains_cp               S__invlist_contains_cp
#     define _invlist_len                       S__invlist_len
#     define _invlist_search                    Perl__invlist_search
#     define get_invlist_offset_addr            S_get_invlist_offset_addr
#     define invlist_array                      S_invlist_array
#     define is_invlist                         S_is_invlist
#   endif
#   if defined(PERL_IN_DOOP_C) || defined(PERL_IN_OP_C) || \
       defined(PERL_IN_REGCOMP_ANY)
#     define add_cp_to_invlist(a,b)             S_add_cp_to_invlist(aTHX_ a,b)
#     define invlist_extend(a,b)                S_invlist_extend(aTHX_ a,b)
#     define invlist_highest                    S_invlist_highest
#     define invlist_set_len(a,b,c)             S_invlist_set_len(aTHX_ a,b,c)
#   endif
#   if defined(PERL_IN_DOOP_C)      || defined(PERL_IN_OP_C) || \
       defined(PERL_IN_REGCOMP_ANY) || defined(PERL_IN_UTF8_C)
#     define _add_range_to_invlist(a,b,c)       Perl__add_range_to_invlist(aTHX_ a,b,c)
#     define _invlist_intersection_maybe_complement_2nd(a,b,c,d) Perl__invlist_intersection_maybe_complement_2nd(aTHX_ a,b,c,d)
#     define _invlist_invert(a)                 Perl__invlist_invert(aTHX_ a)
#     define _invlist_union_maybe_complement_2nd(a,b,c,d) Perl__invlist_union_maybe_complement_2nd(aTHX_ a,b,c,d)
#     define _new_invlist(a)                    Perl__new_invlist(aTHX_ a)
#     define _setup_canned_invlist(a,b,c)       Perl__setup_canned_invlist(aTHX_ a,b,c)
#   endif
#   if defined(PERL_IN_DQUOTE_C) || defined(PERL_IN_REGCOMP_C) || \
       defined(PERL_IN_TOKE_C)
#     define form_alien_digit_msg(a,b,c,d,e,f)  Perl_form_alien_digit_msg(aTHX_ a,b,c,d,e,f)
#     define grok_bslash_c(a,b,c,d)             Perl_grok_bslash_c(aTHX_ a,b,c,d)
#     define grok_bslash_o(a,b,c,d,e,f,g,h)     Perl_grok_bslash_o(aTHX_ a,b,c,d,e,f,g,h)
#     define grok_bslash_x(a,b,c,d,e,f,g,h)     Perl_grok_bslash_x(aTHX_ a,b,c,d,e,f,g,h)
#   endif
#   if defined(PERL_IN_DQUOTE_C) || defined(PERL_IN_REGCOMP_C) || \
       defined(PERL_IN_TOKE_C)   || defined(PERL_IN_UTF8_C)
#     define form_cp_too_large_msg(a,b,c,d)     Perl_form_cp_too_large_msg(aTHX_ a,b,c,d)
#   endif
#   if defined(PERL_IN_DUMP_C) || defined(PERL_IN_OP_C) || \
       defined(PERL_IN_REGCOMP_ANY)
#     define _invlist_dump(a,b,c,d)             Perl__invlist_dump(aTHX_ a,b,c,d)
#   endif
#   if defined(PERL_IN_GV_C) || defined(PERL_IN_UNIVERSAL_C)
#     define gv_stashsvpvn_cached(a,b,c,d)      Perl_gv_stashsvpvn_cached(aTHX_ a,b,c,d)
#   endif
#   if defined(PERL_IN_OP_C) || defined(PERL_IN_REGCOMP_ANY)
#     define get_invlist_iter_addr              S_get_invlist_iter_addr
#     define invlist_iterfinish                 S_invlist_iterfinish
#     define invlist_iterinit                   S_invlist_iterinit
#     define invlist_iternext                   S_invlist_iternext
#   endif
#   if defined(PERL_IN_PERL_C) || defined(PERL_IN_REGCOMP_ANY) || \
       defined(PERL_IN_UTF8_C)
#     define _invlistEQ(a,b,c)                  Perl__invlistEQ(aTHX_ a,b,c)
#     define _new_invlist_C_array(a)            Perl__new_invlist_C_array(aTHX_ a)
#   endif
#   if defined(PERL_IN_PP_C)   || defined(PERL_IN_REGCOMP_ANY) || \
       defined(PERL_IN_TOKE_C) || defined(PERL_IN_UNIVERSAL_C)
#     define get_regex_charset_name             S_get_regex_charset_name
#   endif
#   if defined(PERL_IN_REGCOMP_ANY)
#     define add_above_Latin1_folds(a,b,c)      Perl_add_above_Latin1_folds(aTHX_ a,b,c)
#     define construct_ahocorasick_from_trie(a,b,c) Perl_construct_ahocorasick_from_trie(aTHX_ a,b,c)
#     define get_ANYOFHbbm_contents(a)          Perl_get_ANYOFHbbm_contents(aTHX_ a)
#     define get_ANYOFM_contents(a)             Perl_get_ANYOFM_contents(aTHX_ a)
#     define invlist_contents(a,b)              S_invlist_contents(aTHX_ a,b)
#     define invlist_highest_range_start        S_invlist_highest_range_start
#     define invlist_is_iterating               S_invlist_is_iterating
#     define invlist_lowest                     S_invlist_lowest
#     define join_exact(a,b,c,d,e,f,g)          Perl_join_exact(aTHX_ a,b,c,d,e,f,g)
#     define make_trie(a,b,c,d,e,f,g,h)         Perl_make_trie(aTHX_ a,b,c,d,e,f,g,h)
#     define populate_anyof_bitmap_from_invlist(a,b) Perl_populate_anyof_bitmap_from_invlist(aTHX_ a,b)
#     define reg_add_data                       Perl_reg_add_data
#     define scan_commit(a,b,c,d)               Perl_scan_commit(aTHX_ a,b,c,d)
#     define set_ANYOF_arg(a,b,c,d,e)           Perl_set_ANYOF_arg(aTHX_ a,b,c,d,e)
#     define ssc_init(a,b)                      Perl_ssc_init(aTHX_ a,b)
#     define study_chunk(a,b,c,d,e,f,g,h,i,j,k,l) Perl_study_chunk(aTHX_ a,b,c,d,e,f,g,h,i,j,k,l)
#     if defined(PERL_IN_REGCOMP_TRIE_C) && defined(DEBUGGING)
#       define dump_trie(a,b,c,d)               S_dump_trie(aTHX_ a,b,c,d)
#       define dump_trie_interim_list(a,b,c,d,e) S_dump_trie_interim_list(aTHX_ a,b,c,d,e)
#       define dump_trie_interim_table(a,b,c,d,e) S_dump_trie_interim_table(aTHX_ a,b,c,d,e)
#     endif
#   endif /* defined(PERL_IN_REGCOMP_ANY) */
#   if defined(PERL_IN_REGCOMP_ANY) || defined(PERL_IN_SV_C)
#     define invlist_clone(a,b)                 Perl_invlist_clone(aTHX_ a,b)
#   endif
#   if defined(PERL_IN_REGCOMP_C)
#     define add_multi_match(a,b,c)             S_add_multi_match(aTHX_ a,b,c)
#     define change_engine_size(a,b)            S_change_engine_size(aTHX_ a,b)
#     define compile_wildcard(a,b,c)            S_compile_wildcard(aTHX_ a,b,c)
#     define compute_EXACTish                   S_compute_EXACTish
#     define edit_distance                      S_edit_distance
#     define execute_wildcard(a,b,c,d,e,f,g)    S_execute_wildcard(aTHX_ a,b,c,d,e,f,g)
#     define find_first_differing_byte_pos      S_find_first_differing_byte_pos
