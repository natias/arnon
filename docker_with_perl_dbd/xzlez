tree is returned anyway.  The error is reflected in the parser state,
normally resulting in a single exception at the top level of parsing
which covers all the compilation errors that occurred.  Some compilation
errors, however, will throw an exception immediately.

=over 3

 OP *  parse_arithexpr(U32 flags)

=back

=back

=for hackers
Found in file toke.c

=over 4

=item C<parse_barestmt>
X<parse_barestmt>

NOTE: C<parse_barestmt> is B<experimental> and may change or be
removed without notice.

Parse a single unadorned Perl statement.  This may be a normal imperative
statement or a declaration that has compile-time effect.  It does not
include any label or other affixture.  It is up to the caller to ensure
that the dynamic parser state (L</PL_parser> et al) is correctly set to
reflect the source of the code to be parsed and the lexical context for
the statement.

The op tree representing the statement is returned.  This may be a
null pointer if the statement is null, for example if it was actually
a subroutine definition (which has compile-time side effects).  If not
null, it will be ops directly implementing the statement, suitable to
pass to L</newSTATEOP>.  It will not normally include a C<nextstate> or
equivalent op (except for those embedded in a scope contained entirely
within the statement).

If an error occurs in parsing or compilation, in most cases a valid op
tree (most likely null) is returned anyway.  The error is reflected in
the parser state, normally resulting in a single exception at the top
level of parsing which covers all the compilation errors that occurred.
Some compilation errors, however, will throw an exception immediately.

The C<flags> parameter is reserved for future use, and must always
be zero.

=over 3

 OP *  parse_barestmt(U32 flags)

=back

=back

=for hackers
Found in file toke.c

=over 4

=item C<parse_block>
X<parse_block>

NOTE: C<parse_block> is B<experimental> and may change or be
removed without notice.

Parse a single complete Perl code block.  This consists of an opening
brace, a sequence of statements, and a closing brace.  The block
constitutes a lexical scope, so C<my> variables and various compile-time
effects can be contained within it.  It is up to the caller to ensure
that the dynamic parser state (L</PL_parser> et al) is correctly set to
reflect the source of the code to be parsed and the lexical context for
the statement.

The op tree representing the code block is returned.  This is always a
real op, never a null pointer.  It will normally be a C<lineseq> list,
including C<nextstate> or equivalent ops.  No ops to construct any kind
of runtime scope are included by virtue of it being a block.

If an error occurs in parsing or compilation, in most cases a valid op
tree (most likely null) is returned anyway.  The error is reflected in
the parser state, normally resulting in a single exception at the top
level of parsing which covers all the compilation errors that occurred.
Some compilation errors, however, will throw an exception immediately.

The C<flags> parameter is reserved for future use, and must always
be zero.

=over 3

 OP *  parse_block(U32 flags)

=back

=back

=for hackers
Found in file toke.c

=over 4

=item C<parse_fullexpr>
X<parse_fullexpr>

NOTE: C<parse_fullexpr> is B<experimental> and may change or be
removed without notice.

Parse a single complete Perl expression.  This allows the full
expression grammar, including the lowest-precedence operators such
as C<or>.  The expression must be followed (and thus terminated) by a
token that an expression would normally be terminated by: end-of-file,
closing bracketing punctuation, semicolon, or one of the keywords that
signals a postfix expression-statement modifier.  If C<flags> has the
C<PARSE_OPTIONAL> bit set, then the expression is optional, otherwise it is
mandatory.  It is up to the caller to ensure that the dynamic parser
state (L</PL_parser> et al) is correctly set to reflect the source of
the code to be parsed and the lexical context for the expression.

The op tree representing the expression is returned.  If an optional
expression is absent, a null pointer is returned, otherwise the pointer
will be non-null.

If an error occurs in parsing or compilation, in most cases a valid op
tree is returned anyway.  The error is reflected in the parser state,
normally resulting in a single exception at the top level of parsing
which covers all the compilation errors that occurred.  Some compilation
errors, however, will throw an exception immediately.

=over 3

 OP *  parse_fullexpr(U32 flags)

=back

=back

=for hackers
Found in file toke.c

=over 4

=item C<parse_fullstmt>
X<parse_fullstmt>

NOTE: C<parse_fullstmt> is B<experimental> and may change or be
removed without notice.

Parse a single complete Perl statement.  This may be a normal imperative
statement or a declaration that has compile-time effect, and may include
optional labels.  It is up to the caller to ensure that the dynamic
parser state (L</PL_parser> et al) is correctly set to reflect the source
of the code to be parsed and the lexical context for the statement.

The op tree representing the statement is returned.  This may be a
null pointer if the statement is null, for example if it was actually
a subroutine definition (which has compile-time side effects).  If not
null, it will be the result of a L</newSTATEOP> call, normally including
a C<nextstate> or equivalent op.

If an error occurs in parsing or compilation, in most cases a valid op
tree (most likely null) is returned anyway.  The error is reflected in
the parser state, normally resulting in a single exception at the top
level of parsing which covers all the compilation errors that occurred.
Some compilation errors, however, will throw an exception immediately.

The C<flags> parameter is reserved for future use, and must always
be zero.

=over 3

 OP *  parse_fullstmt(U32 flags)

=back

=back

=for hackers
Found in file toke.c

=over 4

=item C<parse_label>
X<parse_label>

NOTE: C<parse_label> is B<experimental> and may change or be
removed without notice.

Parse a single label, possibly optional, of the type that may prefix a
Perl statement.  It is up to the caller to ensure that the dynamic parser
state (L</PL_parser> et al) is correctly set to reflect the source of
the code to be parsed.  If C<flags> has the C<PARSE_OPTIONAL> bit set, then the
label is optional, otherwise it is mandatory.

The name of the label is returned in the form of a fresh scalar.  If an
optional label is absent, a null pointer is returned.

If an error occurs in parsing, which can only occur if the label is
mandatory, a valid label is returned anyway.  The error is reflected in
the parser state, normally resulting in a single exception at the top
level of parsing which covers all the compilation errors that occurred.

=over 3

 SV *  parse_label(U32 flags)

=back

=back

=for hackers
Found in file toke.c

=over 4

=item C<parse_listexpr>
X<parse_listexpr>

NOTE: C<parse_listexpr> is B<experimental> and may change or be
removed without notice.

Parse a Perl list expression.  This may contain operators of precedence
down to the comma operator.  The expression must be followed (and thus
terminated) either by a low-precedence logic operator such as C<or> or by
something that would normally terminate an expression such as semicolon.
If C<flags> has the C<PARSE_OPTIONAL> bit set, then the expression is optional,
otherwise it is mandatory.  It is up to the caller to ensure that the
dynamic parser state (L</PL_parser> et al) is correctly set to reflect
the source of the code to be parsed and the lexical context for the
expression.

The op tree representing the expression is returned.  If an optional
expression is absent, a null pointer is returned, otherwise the pointer
will be non-null.

If an error occurs in parsing or compilation, in most cases a valid op
tree is returned anyway.  The error is reflected in the parser state,
normally resulting in a single exception at the top level of parsing
which covers all the compilation errors that occurred.  Some compilation
errors, however, will throw an exception immediately.

=over 3

 OP *  parse_listexpr(U32 flags)

=back

=back

=for hackers
Found in file toke.c

=over 4

=item C<parse_stmtseq>
X<parse_stmtseq>

NOTE: C<parse_stmtseq> is B<experimental> and may change or be
removed without notice.

Parse a sequence of zero or more Perl statements.  These may be normal
imperative statements, including optional labels, or declarations
that have compile-time effect, or any mixture thereof.  The statement
sequence ends when a closing brace or end-of-file is encountered in a
place where a new statement could have validly started.  It is up to
the caller to ensure that the dynamic parser state (L</PL_parser> et al)
is correctly set to reflect the source of the code to be parsed and the
lexical context for the statements.

The op tree representing the statement sequence is returned.  This may
be a null pointer if the statements were all null, for example if there
were no statements or if there were only subroutine definitions (which
have compile-time side effects).  If not null, it will be a C<lineseq>
list, normally including C<nextstate> or equivalent ops.

If an error occurs in parsing or compilation, in most cases a valid op
tree is returned anyway.  The error is reflected in the parser state,
normally resulting in a single exception at the top level of parsing
which covers all the compilation errors that occurred.  Some compilation
errors, however, will throw an exception immediately.

The C<flags> parameter is reserved for future use, and must always
be zero.

=over 3

 OP *  parse_stmtseq(U32 flags)

=back

=back

=for hackers
Found in file toke.c

=over 4

=item C<parse_subsignature>
X<parse_subsignature>

NOTE: C<parse_subsignature> is B<experimental> and may change or be
removed without notice.

Parse a subroutine signature declaration. This is the contents of the
parentheses following a named or anonymous subroutine declaration when the
C<signatures> feature is enabled. Note that this function neither expects
nor consumes the opening and closing parentheses around the signature; it
is the caller's job to handle these.

This function must only be called during parsing of a subroutine; after
L</start_subparse> has been called. It might allocate lexical variables on
the pad for the current subroutine.

The op tree to unpack the arguments from the stack at runtime is returned.
This op tree should appear at the beginning of the compiled function. The
caller may wish to use L</op_append_list> to build their function body
after it, or splice it together with the body before calling L</newATTRSUB>.

The C<flags> parameter is reserved for future use, and must always
be zero.

=over 3

 OP *  parse_subsignature(U32 flags)

=back

=back

=for hackers
Found in file toke.c

=over 4

=item C<parse_termexpr>
X<parse_termexpr>

NOTE: C<parse_termexpr> is B<experimental> and may change or be
removed without notice.

Parse a Perl term expression.  This may contain operators of precedence
down to the assignment operators.  The expression must be followed (and thus
terminated) either by a comma or lower-precedence operator or by
something that would normally terminate an expression such as semicolon.
If C<flags> has the C<PARSE_OPTIONAL> bit set, then the expression is optional,
otherwise it is mandatory.  It is up to the caller to ensure that the
dynamic parser state (L</PL_parser> et al) is correctly set to reflect
the source of the code to be parsed and the lexical context for the
expression.

The op tree representing the expression is returned.  If an optional
expression is absent, a null pointer is returned, otherwise the pointer
will be non-null.

If an error occurs in parsing or compilation, in most cases a valid op
tree is returned anyway.  The error is reflected in the parser state,
normally resulting in a single exception at the top level of parsing
which covers all the compilation errors that occurred.  Some compilation
errors, however, will throw an exception immediately.

=over 3

 OP *  parse_termexpr(U32 flags)

=back

=back

=for hackers
Found in file toke.c

=over 4

=item C<PL_parser>
X<PL_parser>

Pointer to a structure encapsulating the state of the parsing operation
currently in progress.  The pointer can be locally changed to perform
a nested parse without interfering with the state of an outer parse.
Individual members of C<PL_parser> have their own documentation.

=back

=for hackers
Found in file toke.c

=over 4

=item C<PL_parser-E<gt>bufend>
X<PL_parser-E<gt>bufend>

NOTE: C<PL_parser-E<gt>bufend> is B<experimental> and may change or be
removed without notice.

Direct pointer to the end of the chunk of text currently being lexed, the
end of the lexer buffer.  This is equal to C<SvPVX(PL_parser-E<gt>linestr)
+ SvCUR(PL_parser-E<gt>linestr)>.  A C<NUL> character (zero octet) is
always located at the end of the buffer, and does not count as part of
the buffer's contents.

=back

=for hackers
Found in file toke.c

=over 4

=item C<PL_parser-E<gt>bufptr>
X<PL_parser-E<gt>bufptr>

NOTE: C<PL_parser-E<gt>bufptr> is B<experimental> and may change or be
removed without notice.

Points to the current position of lexing inside the lexer buffer.
Characters around this point may be freely examined, within
the range delimited by C<SvPVX(L</PL_parser-E<gt>linestr>)> and
L</PL_parser-E<gt>bufend>.  The octets of the buffer may be intended to be
interpreted as either UTF-8 or Latin-1, as indicated by L</lex_bufutf8>.

Lexing code (whether in the Perl core or not) moves this pointer past
the characters that it consumes.  It is also expected to perform some
bookkeeping whenever a newline character is consumed.  This movement
can be more conveniently performed by the function L</lex_read_to>,
which handles newlines appropriately.

Interpretation of the buffer's octets can be abstracted out by
using the slightly higher-level functions L</lex_peek_unichar> and
L</lex_read_unichar>.

=back

=for hackers
Found in file toke.c

=over 4

=item C<PL_parser-E<gt>linestart>
X<PL_parser-E<gt>linestart>

NOTE: C<PL_parser-E<gt>linestart> is B<experimental> and may change or be
removed without notice.

Points to the start of the current line inside the lexer buffer.
This is useful for indicating at which column an error occurred, and
not much else.  This must be updated by any lexing code that consumes
a newline; the function L</lex_read_to> handles this detail.

=back

=for hackers
Found in file toke.c

=over 4

=item C<PL_parser-E<gt>linestr>
X<PL_parser-E<gt>linestr>

NOTE: C<PL_parser-E<gt>linestr> is B<experimental> and may change or be
removed without notice.

Buffer scalar containing the chunk currently under consideration of the
text currently being lexed.  This is always a plain string scalar (for
which C<SvPOK> is true).  It is not intended to be used as a scalar by
normal scalar means; instead refer to the buffer directly by the pointer
variables described below.

The lexer maintains various C<char*> pointers to things in the
C<PL_parser-E<gt>linestr> buffer.  If C<PL_parser-E<gt>linestr> is ever
reallocated, all of these pointers must be updated.  Don't attempt to
do this manually, but rather use L</lex_grow_linestr> if you need to
reallocate the buffer.

The content of the text chunk in the buffer is commonly exactly one
complete line of input, up to and including a newline terminator,
but there are situations where it is otherwise.  The octets of the
buffer may be intended to be interpreted as either UTF-8 or Latin-1.
The function L</lex_bufutf8> tells you which.  Do not use the C<SvUTF8>
flag on this scalar, which may disagree with it.

For direct examination of the buffer, the variable
L</PL_parser-E<gt>bufend> points to the end of the buffer.  The current
lexing position is pointed to by L</PL_parser-E<gt>bufptr>.  Direct use
of these pointers is usually preferable to examination of the scalar
through normal scalar means.

=back

=for hackers
Found in file toke.c

=over 4

=item C<suspend_compcv>
X<suspend_compcv>

Implements part of the concept of a "suspended compilation CV", which can be
used to pause the parser and compiler during parsing a CV in order to come
back to it later on.

This function saves the current state of the subroutine under compilation
(C<PL_compcv>) into the supplied buffer.  This should be used initially to
create the state in the buffer, as the final thing before a C<LEAVE> within a
block.

    ENTER;
    start_subparse(0);
    ...

    suspend_compcv(&buffer);
    LEAVE;

Once suspended, the C<resume_compcv_final> or C<resume_compcv_and_save>
function can later be used to continue the parsing from the point this stopped.

=over 3

 void  suspend_compcv(struct suspended_compcv *buffer)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<wrap_infix_plugin>
X<wrap_infix_plugin>

NOTE: C<wrap_infix_plugin> is B<experimental> and may change or be
removed without notice.

B<NOTE:> This API exists entirely for the purpose of making the CPAN module
C<XS::Parse::Infix> work. It is not expected that additional modules will make
use of it; rather, that they should use C<XS::Parse::Infix> to provide parsing
of new infix operators.

Puts a C function into the chain of infix plugins.  This is the preferred
way to manipulate the L</PL_infix_plugin> variable.  C<new_plugin> is a
pointer to the C function that is to be added to the infix plugin chain, and
C<old_plugin_p> points to a storage location where a pointer to the next
function in the chain will be stored.  The value of C<new_plugin> is written
into the L</PL_infix_plugin> variable, while the value previously stored there
is written to C<*old_plugin_p>.

Direct access to L</PL_infix_plugin> should be avoided.

=over 3

 void  wrap_infix_plugin(Perl_infix_plugin_t new_plugin,
                         Perl_infix_plugin_t *old_plugin_p)

=back

=back

=for hackers
Found in file toke.c

=over 4

=item C<wrap_keyword_plugin>
X<wrap_keyword_plugin>

NOTE: C<wrap_keyword_plugin> is B<experimental> and may change or be
removed without notice.

Puts a C function into the chain of keyword plugins.  This is the
preferred way to manipulate the L</PL_keyword_plugin> variable.
C<new_plugin> is a pointer to the C function that is to be added to the
keyword plugin chain, and C<old_plugin_p> points to the storage location
where a pointer to the next function in the chain will be stored.  The
value of C<new_plugin> is written into the L</PL_keyword_plugin> variable,
while the value previously stored there is written to C<*old_plugin_p>.

L</PL_keyword_plugin> is global to an entire process, and a module wishing
to hook keyword parsing may find itself invoked more than once per
process, typically in different threads.  To handle that situation, this
function is idempotent.  The location C<*old_plugin_p> must initially
(once per process) contain a null pointer.  A C variable of static
duration (declared at file scope, typically also marked C<static> to give
it internal linkage) will be implicitly initialised appropriately, if it
does not have an explicit initialiser.  This function will only actually
modify the plugin chain if it finds C<*old_plugin_p> to be null.  This
function is also thread safe on the small scale.  It uses appropriate
locking to avoid race conditions in accessing L</PL_keyword_plugin>.

When this function is called, the function referenced by C<new_plugin>
must be ready to be called, except for C<*old_plugin_p> being unfilled.
In a threading situation, C<new_plugin> may be called immediately, even
before this function has returned.  C<*old_plugin_p> will always be
appropriately set before C<new_plugin> is called.  If C<new_plugin>
decides not to do anything special with the identifier that it is given
(which is the usual case for most calls to a keyword plugin), it must
chain the plugin function referenced by C<*old_plugin_p>.

Taken all together, XS code to install a keyword plugin should typically
look something like this:

    static Perl_keyword_plugin_t next_keyword_plugin;
    static OP *my_keyword_plugin(pTHX_
        char *keyword_ptr, STRLEN keyword_len, OP **op_ptr)
    {
        if (memEQs(keyword_ptr, keyword_len,
                   "my_new_keyword")) {
            ...
        } else {
            return next_keyword_plugin(aTHX_
                keyword_ptr, keyword_len, op_ptr);
        }
    }
    BOOT:
        wrap_keyword_plugin(my_keyword_plugin,
                            &next_keyword_plugin);

Direct access to L</PL_keyword_plugin> should be avoided.

=over 3

 void  wrap_keyword_plugin(Perl_keyword_plugin_t new_plugin,
                           Perl_keyword_plugin_t *old_plugin_p)

=back

=back

=for hackers
Found in file toke.c

=head1 Locales

=over 4

=item C<DECLARATION_FOR_LC_NUMERIC_MANIPULATION>
X<DECLARATION_FOR_LC_NUMERIC_MANIPULATION>

This macro should be used as a statement.  It declares a private variable
(whose name begins with an underscore) that is needed by the other macros in
this section.  Failing to include this correctly should lead to a syntax error.
For compatibility with C89 C compilers it should be placed in a block before
any executable statements.

=over 3

 void  DECLARATION_FOR_LC_NUMERIC_MANIPULATION

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<foldEQ_locale>
X<foldEQ_locale>

Returns true if the leading C<len> bytes of the strings C<s1> and C<s2> are the
same case-insensitively in the current locale; false otherwise.

=over 3

 I32  foldEQ_locale(const char *a, const char *b, I32 len)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<HAS_DUPLOCALE>
X<HAS_DUPLOCALE>

This symbol, if defined, indicates that the C<duplocale> routine is
available to duplicate a locale object.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FREELOCALE>
X<HAS_FREELOCALE>

This symbol, if defined, indicates that the C<freelocale> routine is
available to deallocates the resources associated with a locale object.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LC_MONETARY_2008>
X<HAS_LC_MONETARY_2008>

This symbol, if defined, indicates that the localeconv routine is
available and has the additional members added in C<POSIX> 1003.1-2008.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LOCALECONV>
X<HAS_LOCALECONV>

This symbol, if defined, indicates that the C<localeconv> routine is
available for numeric and monetary formatting conventions.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LOCALECONV_L>
X<HAS_LOCALECONV_L>

This symbol, if defined, indicates that the C<localeconv_l> routine is
available to query certain information about a locale.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_NEWLOCALE>
X<HAS_NEWLOCALE>

This symbol, if defined, indicates that the C<newlocale> routine is
available to return a new locale object or modify an existing
locale object.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_NL_LANGINFO>
X<HAS_NL_LANGINFO>

This symbol, if defined, indicates that the C<nl_langinfo> routine is
available to return locale data.  You will also need F<langinfo.h>
and therefore C<I_LANGINFO>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_NL_LANGINFO_L>
X<HAS_NL_LANGINFO_L>

This symbol, if defined, indicates that the C<nl_langinfo_l> routine is
available to return locale data.  You will also need F<langinfo.h>
and therefore C<I_LANGINFO>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_QUERYLOCALE>
X<HAS_QUERYLOCALE>

This symbol, if defined, indicates that the C<querylocale> routine is
available to return the name of the locale for a category mask.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SETLOCALE>
X<HAS_SETLOCALE>

This symbol, if defined, indicates that the C<setlocale> routine is
available to handle locale-specific ctype implementations.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SETLOCALE_R>
X<HAS_SETLOCALE_R>

This symbol, if defined, indicates that the C<setlocale_r> routine
is available to setlocale re-entrantly.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_USELOCALE>
X<HAS_USELOCALE>

This symbol, if defined, indicates that the C<uselocale> routine is
available to set the current locale for the calling thread.

=back

=for hackers
Found in file config.h

=over 4

=item C<I_LANGINFO>
X<I_LANGINFO>

This symbol, if defined, indicates that F<langinfo.h> exists and
should be included.

=over 3

 #ifdef I_LANGINFO
     #include <langinfo.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<I_LOCALE>
X<I_LOCALE>

This symbol, if defined, indicates to the C program that it should
include F<locale.h>.

=over 3

 #ifdef I_LOCALE
     #include <locale.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<IN_LOCALE>
X<IN_LOCALE>

Evaluates to TRUE if the plain locale pragma without a parameter (S<C<use
locale>>) is in effect.

=over 3

 bool  IN_LOCALE

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<IN_LOCALE_COMPILETIME>
X<IN_LOCALE_COMPILETIME>

Evaluates to TRUE if, when compiling a perl program (including an C<eval>) if
the plain locale pragma without a parameter (S<C<use locale>>) is in effect.

=over 3

 bool  IN_LOCALE_COMPILETIME

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<IN_LOCALE_RUNTIME>
X<IN_LOCALE_RUNTIME>

Evaluates to TRUE if, when executing a perl program (including an C<eval>) if
the plain locale pragma without a parameter (S<C<use locale>>) is in effect.

=over 3

 bool  IN_LOCALE_RUNTIME

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<I_XLOCALE>
X<I_XLOCALE>

This symbol, if defined, indicates to the C program that the
header F<xlocale.h> is available.  See also C<L</NEED_XLOCALE_H>>

=over 3

 #ifdef I_XLOCALE
     #include <xlocale.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<NEED_XLOCALE_H>
X<NEED_XLOCALE_H>

This symbol, if defined, indicates that the C program should
include F<xlocale.h> to get C<newlocale()> and its friends.

=back

=for hackers
Found in file config.h

=over 4

=item C<Perl_langinfo>

=item C<Perl_langinfo8>
X<Perl_langinfo>X<Perl_langinfo8>

C<Perl_langinfo> is an (almost) drop-in replacement for the system
C<L<nl_langinfo(3)>>, taking the same C<item> parameter values, and returning
the same information.  But it is more thread-safe than regular
C<nl_langinfo()>, and hides the quirks of Perl's locale handling from your
code, and can be used on systems that lack a native C<nl_langinfo>.

However, you should instead use either the improved version of this,
L</Perl_langinfo8>, or even better, L</sv_langinfo>.  The latter returns an SV,
handling all the possible non-standard returns of C<nl_langinfo()>, including
the UTF8ness of any returned string.

C<Perl_langinfo8> is identical to C<Perl_langinfo> except for an additional
parameter, a pointer to a variable declared as L</C<utf8ness_t>>, into which it
returns to you how you should treat the returned string with regards to it
being encoded in UTF-8 or not.

These two functions share private per-thread memory that will be changed the
next time either one of them is called with any input, but not before.

Concerning the differences between these and plain C<nl_langinfo()>:

=over

=item a.

