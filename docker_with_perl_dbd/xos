``revlog-compression``
    Compression algorithm used by revlog. Supported values are `zlib` and
    `zstd`. The `zlib` engine is the historical default of Mercurial. `zstd` is
    a newer format that is usually a net win over `zlib`, operating faster at
    better compression rates. Use `zstd` to reduce CPU usage. Multiple values
    can be specified, the first available one will be used.

    On some systems, the Mercurial installation may lack `zstd` support.

    Default is `zstd` if available, `zlib` otherwise.

``bookmarks-in-store``
    Store bookmarks in .hg/store/. This means that bookmarks are shared when
    using `hg share` regardless of the `-B` option.

    Repositories with this on-disk format require Mercurial version 5.1.

    Disabled by default.


``graph``
---------

Web graph view configuration. This section let you change graph
elements display properties by branches, for instance to make the
``default`` branch stand out.

Each line has the following format::

    <branch>.<argument> = <value>

where ``<branch>`` is the name of the branch being
customized. Example::

    [graph]
    # 2px width
    default.width = 2
    # red color
    default.color = FF0000

Supported arguments:

``width``
    Set branch edges width in pixels.

``color``
    Set branch edges color in hexadecimal RGB notation.

``hooks``
---------

Commands or Python functions that get automatically executed by
various actions such as starting or finishing a commit. Multiple
hooks can be run for the same action by appending a suffix to the
action. Overriding a site-wide hook can be done by changing its
value or setting it to an empty string.  Hooks can be prioritized
by adding a prefix of ``priority.`` to the hook name on a new line
and setting the priority. The default priority is 0.

Example ``.hg/hgrc``::

  [hooks]
  # update working directory after adding changesets
  changegroup.update = hg update
  # do not use the site-wide hook
  incoming =
  incoming.email = /my/email/hook
  incoming.autobuild = /my/build/hook
  # force autobuild hook to run before other incoming hooks
  priority.incoming.autobuild = 1
  ###  control HGPLAIN setting when running autobuild hook
  # HGPLAIN always set (default from Mercurial 5.7)
  incoming.autobuild:run-with-plain = yes
  # HGPLAIN never set
  incoming.autobuild:run-with-plain = no
  # HGPLAIN inherited from environment (default before Mercurial 5.7)
  incoming.autobuild:run-with-plain = auto

Most hooks are run with environment variables set that give useful
additional information. For each hook below, the environment variables
it is passed are listed with names in the form ``$HG_foo``. The
``$HG_HOOKTYPE`` and ``$HG_HOOKNAME`` variables are set for all hooks.
They contain the type of hook which triggered the run and the full name
of the hook in the config, respectively. In the example above, this will
be ``$HG_HOOKTYPE=incoming`` and ``$HG_HOOKNAME=incoming.email``.

.. container:: windows

  Some basic Unix syntax can be enabled for portability, including ``$VAR``
  and ``${VAR}`` style variables.  A ``~`` followed by ``\`` or ``/`` will
  be expanded to ``%USERPROFILE%`` to simulate a subset of tilde expansion
  on Unix.  To use a literal ``$`` or ``~``, it must be escaped with a back
  slash or inside of a strong quote.  Strong quotes will be replaced by
  double quotes after processing.

  This feature is enabled by adding a prefix of ``tonative.`` to the hook
  name on a new line, and setting it to ``True``.  For example::

    [hooks]
    incoming.autobuild = /my/build/hook
    # enable translation to cmd.exe syntax for autobuild hook
    tonative.incoming.autobuild = True

``changegroup``
  Run after a changegroup has been added via push, pull or unbundle.  The ID of
  the first new changeset is in ``$HG_NODE`` and last is in ``$HG_NODE_LAST``.
  The URL from which changes came is in ``$HG_URL``.

``commit``
  Run after a changeset has been created in the local repository. The ID
  of the newly created changeset is in ``$HG_NODE``. Parent changeset
  IDs are in ``$HG_PARENT1`` and ``$HG_PARENT2``.

``incoming``
  Run after a changeset has been pulled, pushed, or unbundled into
  the local repository. The ID of the newly arrived changeset is in
  ``$HG_NODE``. The URL that was source of the changes is in ``$HG_URL``.

``outgoing``
  Run after sending changes from the local repository to another. The ID of
  first changeset sent is in ``$HG_NODE``. The source of operation is in
  ``$HG_SOURCE``. Also see :hg:`help config.hooks.preoutgoing`.

``post-<command>``
  Run after successful invocations of the associated command. The
  contents of the command line are passed as ``$HG_ARGS`` and the result
  code in ``$HG_RESULT``. Parsed command line arguments are passed as
  ``$HG_PATS`` and ``$HG_OPTS``. These contain string representations of
  the python data internally passed to <command>. ``$HG_OPTS`` is a
  dictionary of options (with unspecified options set to their defaults).
  ``$HG_PATS`` is a list of arguments. Hook failure is ignored.

``fail-<command>``
  Run after a failed invocation of an associated command. The contents
  of the command line are passed as ``$HG_ARGS``. Parsed command line
  arguments are passed as ``$HG_PATS`` and ``$HG_OPTS``. These contain
  string representations of the python data internally passed to
  <command>. ``$HG_OPTS`` is a dictionary of options (with unspecified
  options set to their defaults). ``$HG_PATS`` is a list of arguments.
  Hook failure is ignored.

``pre-<command>``
  Run before executing the associated command. The contents of the
  command line are passed as ``$HG_ARGS``. Parsed command line arguments
  are passed as ``$HG_PATS`` and ``$HG_OPTS``. These contain string
  representations of the data internally passed to <command>. ``$HG_OPTS``
  is a dictionary of options (with unspecified options set to their
  defaults). ``$HG_PATS`` is a list of arguments. If the hook returns
  failure, the command doesn't execute and Mercurial returns the failure
  code.

``prechangegroup``
  Run before a changegroup is added via push, pull or unbundle. Exit
  status 0 allows the changegroup to proceed. A non-zero status will
  cause the push, pull or unbundle to fail. The URL from which changes
  will come is in ``$HG_URL``.

``precommit``
  Run before starting a local commit. Exit status 0 allows the
  commit to proceed. A non-zero status will cause the commit to fail.
  Parent changeset IDs are in ``$HG_PARENT1`` and ``$HG_PARENT2``.

``prelistkeys``
  Run before listing pushkeys (like bookmarks) in the
  repository. A non-zero status will cause failure. The key namespace is
  in ``$HG_NAMESPACE``.

``preoutgoing``
  Run before collecting changes to send from the local repository to
  another. A non-zero status will cause failure. This lets you prevent
  pull over HTTP or SSH. It can also prevent propagating commits (via
  local pull, push (outbound) or bundle commands), but not completely,
  since you can just copy files instead. The source of operation is in
  ``$HG_SOURCE``. If "serve", the operation is happening on behalf of a remote
  SSH or HTTP repository. If "push", "pull" or "bundle", the operation
  is happening on behalf of a repository on same system.

``prepushkey``
  Run before a pushkey (like a bookmark) is added to the
  repository. A non-zero status will cause the key to be rejected. The
  key namespace is in ``$HG_NAMESPACE``, the key is in ``$HG_KEY``,
  the old value (if any) is in ``$HG_OLD``, and the new value is in
  ``$HG_NEW``.

``pretag``
  Run before creating a tag. Exit status 0 allows the tag to be
  created. A non-zero status will cause the tag to fail. The ID of the
  changeset to tag is in ``$HG_NODE``. The name of tag is in ``$HG_TAG``. The
  tag is local if ``$HG_LOCAL=1``, or in the repository if ``$HG_LOCAL=0``.

``pretxnopen``
  Run before any new repository transaction is open. The reason for the
  transaction will be in ``$HG_TXNNAME``, and a unique identifier for the
  transaction will be in ``$HG_TXNID``. A non-zero status will prevent the
  transaction from being opened.

``pretxnclose``
  Run right before the transaction is actually finalized. Any repository change
  will be visible to the hook program. This lets you validate the transaction
  content or change it. Exit status 0 allows the commit to proceed. A non-zero
  status will cause the transaction to be rolled back. The reason for the
  transaction opening will be in ``$HG_TXNNAME``, and a unique identifier for
  the transaction will be in ``$HG_TXNID``. The rest of the available data will
  vary according the transaction type.  Changes unbundled to the repository will
  add ``$HG_URL`` and ``$HG_SOURCE``.  New changesets will add ``$HG_NODE`` (the
  ID of the first added changeset), ``$HG_NODE_LAST`` (the ID of the last added
  changeset).  Bookmark and phase changes will set ``$HG_BOOKMARK_MOVED`` and
  ``$HG_PHASES_MOVED`` to ``1`` respectively.  The number of new obsmarkers, if
  any, will be in ``$HG_NEW_OBSMARKERS``, etc.

``pretxnclose-bookmark``
  Run right before a bookmark change is actually finalized. Any repository
  change will be visible to the hook program. This lets you validate the
  transaction content or change it. Exit status 0 allows the commit to
  proceed. A non-zero status will cause the transaction to be rolled back.
  The name of the bookmark will be available in ``$HG_BOOKMARK``, the new
  bookmark location will be available in ``$HG_NODE`` while the previous
  location will be available in ``$HG_OLDNODE``. In case of a bookmark
  creation ``$HG_OLDNODE`` will be empty. In case of deletion ``$HG_NODE``
  will be empty.
  In addition, the reason for the transaction opening will be in
  ``$HG_TXNNAME``, and a unique identifier for the transaction will be in
  ``$HG_TXNID``.

``pretxnclose-phase``
  Run right before a phase change is actually finalized. Any repository change
  will be visible to the hook program. This lets you validate the transaction
  content or change it. Exit status 0 allows the commit to proceed.  A non-zero
  status will cause the transaction to be rolled back. The hook is called
  multiple times, once for each revision affected by a phase change.
  The affected node is available in ``$HG_NODE``, the phase in ``$HG_PHASE``
  while the previous ``$HG_OLDPHASE``. In case of new node, ``$HG_OLDPHASE``
  will be empty.  In addition, the reason for the transaction opening will be in
  ``$HG_TXNNAME``, and a unique identifier for the transaction will be in
  ``$HG_TXNID``. The hook is also run for newly added revisions. In this case
  the ``$HG_OLDPHASE`` entry will be empty.

``txnclose``
  Run after any repository transaction has been committed. At this
  point, the transaction can no longer be rolled back. The hook will run
  after the lock is released. See :hg:`help config.hooks.pretxnclose` for
  details about available variables.

``txnclose-bookmark``
  Run after any bookmark change has been committed. At this point, the
  transaction can no longer be rolled back. The hook will run after the lock
  is released. See :hg:`help config.hooks.pretxnclose-bookmark` for details
  about available variables.

``txnclose-phase``
  Run after any phase change has been committed. At this point, the
  transaction can no longer be rolled back. The hook will run after the lock
  is released. See :hg:`help config.hooks.pretxnclose-phase` for details about
  available variables.

``txnabort``
  Run when a transaction is aborted. See :hg:`help config.hooks.pretxnclose`
  for details about available variables.

``pretxnchangegroup``
  Run after a changegroup has been added via push, pull or unbundle, but before
  the transaction has been committed. The changegroup is visible to the hook
  program. This allows validation of incoming changes before accepting them.
  The ID of the first new changeset is in ``$HG_NODE`` and last is in
  ``$HG_NODE_LAST``. Exit status 0 allows the transaction to commit. A non-zero
  status will cause the transaction to be rolled back, and the push, pull or
  unbundle will fail. The URL that was the source of changes is in ``$HG_URL``.

``pretxncommit``
  Run after a changeset has been created, but before the transaction is
  committed. The changeset is visible to the hook program. This allows
  validation of the commit message and changes. Exit status 0 allows the
  commit to proceed. A non-zero status will cause the transaction to
  be rolled back. The ID of the new changeset is in ``$HG_NODE``. The parent
  changeset IDs are in ``$HG_PARENT1`` and ``$HG_PARENT2``.

``preupdate``
  Run before updating the working directory. Exit status 0 allows
  the update to proceed. A non-zero status will prevent the update.
  The changeset ID of first new parent is in ``$HG_PARENT1``. If updating to a
  merge, the ID of second new parent is in ``$HG_PARENT2``.

``listkeys``
  Run after listing pushkeys (like bookmarks) in the repository. The
  key namespace is in ``$HG_NAMESPACE``. ``$HG_VALUES`` is a
  dictionary containing the keys and values.

``pushkey``
  Run after a pushkey (like a bookmark) is added to the
  repository. The key namespace is in ``$HG_NAMESPACE``, the key is in
  ``$HG_KEY``, the old value (if any) is in ``$HG_OLD``, and the new
  value is in ``$HG_NEW``.

``tag``
  Run after a tag is created. The ID of the tagged changeset is in ``$HG_NODE``.
  The name of tag is in ``$HG_TAG``. The tag is local if ``$HG_LOCAL=1``, or in
  the repository if ``$HG_LOCAL=0``.

``update``
  Run after updating the working directory. The changeset ID of first
  new parent is in ``$HG_PARENT1``. If updating to a merge, the ID of second new
  parent is in ``$HG_PARENT2``. If the update succeeded, ``$HG_ERROR=0``. If the
  update failed (e.g. because conflicts were not resolved), ``$HG_ERROR=1``.

.. note::

   It is generally better to use standard hooks rather than the
   generic pre- and post- command hooks, as they are guaranteed to be
   called in the appropriate contexts for influencing transactions.
   Also, hooks like "commit" will be called in all contexts that
   generate a commit (e.g. tag) and not just the commit command.

.. note::

   Environment variables with empty values may not be passed to
   hooks on platforms such as Windows. As an example, ``$HG_PARENT2``
   will have an empty value under Unix-like platforms for non-merge
   changesets, while it will not be available at all under Windows.

The syntax for Python hooks is as follows::

  hookname = python:modulename.submodule.callable
  hookname = python:/path/to/python/module.py:callable

Python hooks are run within the Mercurial process. Each hook is
called with at least three keyword arguments: a ui object (keyword
``ui``), a repository object (keyword ``repo``), and a ``hooktype``
keyword that tells what kind of hook is used. Arguments listed as
environment variables above are passed as keyword arguments, with no
``HG_`` prefix, and names in lower case.

If a Python hook returns a "true" value or raises an exception, this
is treated as a failure.


``hostfingerprints``
--------------------

(Deprecated. Use ``[hostsecurity]``'s ``fingerprints`` options instead.)

Fingerprints of the certificates of known HTTPS servers.

A HTTPS connection to a server with a fingerprint configured here will
only succeed if the servers certificate matches the fingerprint.
This is very similar to how ssh known hosts works.

The fingerprint is the SHA-1 hash value of the DER encoded certificate.
Multiple values can be specified (separated by spaces or commas). This can
be used to define both old and new fingerprints while a host transitions
to a new certificate.

The CA chain and web.cacerts is not used for servers with a fingerprint.

For example::

    [hostfingerprints]
    hg.intevation.de = fc:e2:8d:d9:51:cd:cb:c1:4d:18:6b:b7:44:8d:49:72:57:e6:cd:33
    hg.intevation.org = fc:e2:8d:d9:51:cd:cb:c1:4d:18:6b:b7:44:8d:49:72:57:e6:cd:33

``hostsecurity``
----------------

Used to specify global and per-host security settings for connecting to
other machines.

The following options control default behavior for all hosts.

``ciphers``
    Defines the cryptographic ciphers to use for connections.

    Value must be a valid OpenSSL Cipher List Format as documented at
    https://www.openssl.org/docs/manmaster/apps/ciphers.html#CIPHER-LIST-FORMAT.

    This setting is for advanced users only. Setting to incorrect values
    can significantly lower connection security or decrease performance.
    You have been warned.

    This option requires Python 2.7.

``minimumprotocol``
    Defines the minimum channel encryption protocol to use.

    By default, the highest version of TLS supported by both client and server
    is used.

    Allowed values are: ``tls1.0``, ``tls1.1``, ``tls1.2``.

    When running on an old Python version, only ``tls1.0`` is allowed since
    old versions of Python only support up to TLS 1.0.

    When running a Python that supports modern TLS versions, the default is
    ``tls1.1``. ``tls1.0`` can still be used to allow TLS 1.0. However, this
    weakens security and should only be used as a feature of last resort if
    a server does not support TLS 1.1+.

Options in the ``[hostsecurity]`` section can have the form
``hostname``:``setting``. This allows multiple settings to be defined on a
per-host basis.

The following per-host settings can be defined.

``ciphers``
    This behaves like ``ciphers`` as described above except it only applies
    to the host on which it is defined.

``fingerprints``
    A list of hashes of the DER encoded peer/remote certificate. Values have
    the form ``algorithm``:``fingerprint``. e.g.
    ``sha256:c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2``.
    In addition, colons (``:``) can appear in the fingerprint part.

    The following algorithms/prefixes are supported: ``sha1``, ``sha256``,
    ``sha512``.

    Use of ``sha256`` or ``sha512`` is preferred.

    If a fingerprint is specified, the CA chain is not validated for this
    host and Mercurial will require the remote certificate to match one
    of the fingerprints specified. This means if the server updates its
    certificate, Mercurial will abort until a new fingerprint is defined.
    This can provide stronger security than traditional CA-based validation
    at the expense of convenience.

    This option takes precedence over ``verifycertsfile``.

``minimumprotocol``
    This behaves like ``minimumprotocol`` as described above except it
    only applies to the host on which it is defined.

``verifycertsfile``
    Path to file a containing a list of PEM encoded certificates used to
    verify the server certificate. Environment variables and ``~user``
    constructs are expanded in the filename.

    The server certificate or the certificate's certificate authority (CA)
    must match a certificate from this file or certificate verification
    will fail and connections to the server will be refused.

    If defined, only certificates provided by this file will be used:
    ``web.cacerts`` and any system/default certificates will not be
    used.

    This option has no effect if the per-host ``fingerprints`` option
    is set.

    The format of the file is as follows::

        -----BEGIN CERTIFICATE-----
        ... (certificate in base64 PEM encoding) ...
        -----END CERTIFICATE-----
        -----BEGIN CERTIFICATE-----
        ... (certificate in base64 PEM encoding) ...
        -----END CERTIFICATE-----

For example::

    [hostsecurity]
    hg.example.com:fingerprints = sha256:c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2
    hg2.example.com:fingerprints = sha1:914f1aff87249c09b6859b88b1906d30756491ca, sha1:fc:e2:8d:d9:51:cd:cb:c1:4d:18:6b:b7:44:8d:49:72:57:e6:cd:33
    hg3.example.com:fingerprints = sha256:9a:b0:dc:e2:75:ad:8a:b7:84:58:e5:1f:07:32:f1:87:e6:bd:24:22:af:b7:ce:8e:9c:b4:10:cf:b9:f4:0e:d2
    foo.example.com:verifycertsfile = /etc/ssl/trusted-ca-certs.pem

To change the default minimum protocol version to TLS 1.2 but to allow TLS 1.1
when connecting to ``hg.example.com``::

    [hostsecurity]
    minimumprotocol = tls1.2
    hg.example.com:minimumprotocol = tls1.1

``http_proxy``
--------------

Used to access web-based Mercurial repositories through a HTTP
proxy.

``host``
    Host name and (optional) port of the proxy server, for example
    "myproxy:8000".

``no``
    Optional. Comma-separated list of host names that should bypass
    the proxy.

``passwd``
    Optional. Password to authenticate with at the proxy server.

``user``
    Optional. User name to authenticate with at the proxy server.

``always``
    Optional. Always use the proxy, even for localhost and any entries
    in ``http_proxy.no``. (default: False)

``http``
----------

Used to configure access to Mercurial repositories via HTTP.

``timeout``
    If set, blocking operations will timeout after that many seconds.
    (default: None)

``merge``
---------

This section specifies behavior during merges and updates.

``checkignored``
   Controls behavior when an ignored file on disk has the same name as a tracked
   file in the changeset being merged or updated to, and has different
   contents. Options are ``abort``, ``warn`` and ``ignore``. With ``abort``,
   abort on such files. With ``warn``, warn on such files and back them up as
   ``.orig``. With ``ignore``, don't print a warning and back them up as
   ``.orig``. (default: ``abort``)

``checkunknown``
   Controls behavior when an unknown file that isn't ignored has the same name
   as a tracked file in the changeset being merged or updated to, and has
   different contents. Similar to ``merge.checkignored``, except for files that
   are not ignored. (default: ``abort``)

``on-failure``
   When set to ``continue`` (the default), the merge process attempts to
   merge all unresolved files using the merge chosen tool, regardless of
   whether previous file merge attempts during the process succeeded or not.
   Setting this to ``prompt`` will prompt after any merge failure continue
   or halt the merge process. Setting this to ``halt`` will automatically
   halt the merge process on any merge tool failure. The merge process
   can be restarted by using the ``resolve`` command. When a merge is
   halted, the repository is left in a normal ``unresolved`` merge state.
   (default: ``continue``)

``strict-capability-check``
   Whether capabilities of internal merge tools are checked strictly
   or not, while examining rules to decide merge tool to be used.
   (default: False)

``merge-patterns``
------------------

This section specifies merge tools to associate with particular file
patterns. Tools matched here will take precedence over the default
merge tool. Patterns are globs by default, rooted at the repository
root.

Example::

  [merge-patterns]
  **.c = kdiff3
  **.jpg = myimgmerge

``merge-tools``
---------------

This section configures external merge tools to use for file-level
merges. This section has likely been preconfigured at install time.
Use :hg:`config merge-tools` to check the existing configuration.
Also see :hg:`help merge-tools` for more details.

Example ``~/.hgrc``::

  [merge-tools]
  # Override stock tool location
  kdiff3.executable = ~/bin/kdiff3
  # Specify command line
  kdiff3.args = $base $local $other -o $output
  # Give higher priority
  kdiff3.priority = 1

  # Changing the priority of preconfigured tool
  meld.priority = 0

  # Disable a preconfigured tool
  vimdiff.disabled = yes

  # Define new tool
  myHtmlTool.args = -m $local $other $base $output
  myHtmlTool.regkey = Software\FooSoftware\HtmlMerge
  myHtmlTool.priority = 1

Supported arguments:

``priority``
  The priority in which to evaluate this tool.
  (default: 0)

``executable``
  Either just the name of the executable or its pathname.

  .. container:: windows

    On Windows, the path can use environment variables with ${ProgramFiles}
    syntax.

  (default: the tool name)

``args``
  The arguments to pass to the tool executable. You can refer to the
  files being merged as well as the output file through these
  variables: ``$base``, ``$local``, ``$other``, ``$output``.

  The meaning of ``$local`` and ``$other`` can vary depending on which action is
  being performed. During an update or merge, ``$local`` represents the original
  state of the file, while ``$other`` represents the commit you are updating to or
  the commit you are merging with. During a rebase, ``$local`` represents the
  destination of the rebase, and ``$other`` represents the commit being rebased.

  Some operations define custom labels to assist with identifying the revisions,
  accessible via ``$labellocal``, ``$labelother``, and ``$labelbase``. If custom
  labels are not available, these will be ``local``, ``other``, and ``base``,
  respectively.
  (default: ``$local $base $other``)

``premerge``
  Attempt to run internal non-interactive 3-way merge tool before
  launching external tool.  Options are ``true``, ``false``, ``keep``,
  ``keep-merge3``, or ``keep-mergediff`` (experimental). The ``keep`` option
  will leave markers in the file if the premerge fails. The ``keep-merge3``
  will do the same but include information about the base of the merge in the
  marker (see internal :merge3 in :hg:`help merge-tools`). The
  ``keep-mergediff`` option is similar but uses a different marker style
  (see internal :merge3 in :hg:`help merge-tools`). (default: True)

``binary``
  This tool can merge binary files. (default: False, unless tool
  was selected by file pattern match)

``symlink``
  This tool can merge symlinks. (default: False)

``check``
  A list of merge success-checking options:

  ``changed``
    Ask whether merge was successful when the merged file shows no changes.
  ``conflicts``
    Check whether there are conflicts even though the tool reported success.
  ``prompt``
    Always prompt for merge success, regardless of success reported by tool.

``fixeol``
  Attempt to fix up EOL changes caused by the merge tool.
  (default: False)

``gui``
  This tool requires a graphical interface to run. (default: False)

``mergemarkers``
  Controls whether the labels passed via ``$labellocal``, ``$labelother``, and
  ``$labelbase`` are ``detailed`` (respecting ``mergemarkertemplate``) or
  ``basic``. If ``premerge`` is ``keep`` or ``keep-merge3``, the conflict
  markers generated during premerge will be ``detailed`` if either this option or
  the corresponding option in the ``[ui]`` section is ``detailed``.
  (default: ``basic``)

``mergemarkertemplate``
  This setting can be used to override ``mergemarker`` from the
  ``[command-templates]`` section on a per-tool basis; this applies to the
  ``$label``-prefixed variables and to the conflict markers that are generated
  if ``premerge`` is ``keep` or ``keep-merge3``. See the corresponding variable
  in ``[ui]`` for more information.

.. container:: windows

  ``regkey``
    Windows registry key which describes install location of this
    tool. Mercurial will search for this key first under
    ``HKEY_CURRENT_USER`` and then under ``HKEY_LOCAL_MACHINE``.
    (default: None)

  ``regkeyalt``
    An alternate Windows registry key to try if the first key is not
    found.  The alternate key uses the same ``regname`` and ``regappend``
    semantics of the primary key.  The most common use for this key
    is to search for 32bit applications on 64bit operating systems.
    (default: None)

  ``regname``
    Name of value to read from specified registry key.
    (default: the unnamed (default) value)

  ``regappend``
    String to append to the value read from the registry, typically
    the executable name of the tool.
    (default: None)

``pager``
---------

Setting used to control when to paginate and with what external tool. See
:hg:`help pager` for details.

``pager``
    Define the external tool used as pager.

    If no pager is set, Mercurial uses the environment variable $PAGER.
    If neither pager.pager, nor $PAGER is set, a default pager will be
    used, typically `less` on Unix and `more` on Windows. Example::

      [pager]
      pager = less -FRX

``ignore``
    List of commands to disable the pager for. Example::

      [pager]
      ignore = version, help, update

``patch``
---------

Settings used when applying patches, for instance through the 'import'
command or with Mercurial Queues extension.

``eol``
    When set to 'strict' patch content and patched files end of lines
    are preserved. When set to ``lf`` or ``crlf``, both files end of
    lines are ignored when patching and the result line endings are
    normalized to either LF (Unix) or CRLF (Windows). When set to
    ``auto``, end of lines are again ignored while patching but line
    endings in patched files are normalized to their original setting
    on a per-file basis. If target file does not exist or has no end
    of line, patch line endings are preserved.
    (default: strict)

``fuzz``
    The number of lines of 'fuzz' to allow when applying patches. This
    controls how much context the patcher is allowed to ignore when
    trying to apply a patch.
    (default: 2)

``paths``
---------

Assigns symbolic names and behavior to repositories.

Options are symbolic names defining the URL or directory that is the
location of the repository. Example::

    [paths]
    my_server = https://example.com/my_repo
    local_path = /home/me/repo

These symbolic names can be used from the command line. To pull
from ``my_server``: :hg:`pull my_server`. To push to ``local_path``:
:hg:`push local_path`. You can check :hg:`help urls` for details about
valid URLs.

Options containing colons (``:``) denote sub-options that can influence
behavior for that specific path. Example::

    [paths]
    my_server = https://example.com/my_path
    my_server:pushurl = ssh://example.com/my_path

Paths using the `path://otherpath` scheme will inherit the sub-options value from
the path they point to.

The following sub-options can be defined:

``multi-urls``
   A boolean option. When enabled the value of the `[paths]` entry will be
   parsed as a list and the alias will resolve to multiple destination. If some
   of the list entry use the `path://` syntax, the suboption will be inherited
   individually.

``pushurl``
   The URL to use for push operations. If not defined, the location
   defined by the path's main entry is used.

``pushrev``
   A revset defining which revisions to push by default.

   When :hg:`push` is executed without a ``-r`` argument, the revset
   defined by this sub-option is evaluated to determine what to push.

   For example, a value of ``.`` will push the working directory's
   revision by default.

   Revsets specifying bookmarks will not result in the bookmark being
   pushed.

``bookmarks.mode``
  How bookmark will be dealt during the exchange. It support the following value

  - ``default``: the default behavior, local and remote bookmarks are "merged"
    on push/pull.

  - ``mirror``: when pulling, replace local bookmarks by remote bookmarks. This
    is useful to replicate a repository, or as an optimization.

  - ``ignore``: ignore bookmarks during exchange.
    (This currently only affect pulling)

The following special named paths exist:

``default``
   The URL or directory to use when no source or remote is specified.

   :hg:`clone` will automatically define this path to the location the
   repository was cloned from.

``default-push``
   (deprecated) The URL or directory for the default :hg:`push` location.
   ``default:pushurl`` should be used instead.

``phases``
----------

Specifies default handling of phases. See :hg:`help phases` for more
information about working with phases.

``publish``
    Controls draft phase behavior when working as a server. When true,
    pushed changesets are set to public in both client and server and
    pulled or cloned changesets are set to public in the client.
    (default: True)

``new-commit``
    Phase of newly-created commits.
    (default: draft)

``checksubrepos``
    Check the phase of the current revision of each subrepository. Allowed
    values are "ignore", "follow" and "abort". For settings other than
    "ignore", the phase of the current revision of each subrepository is
    checked before committing the parent repository. If any of those phases is
    greater than the phase of the parent repository (e.g. if a subrepo is in a
    "secret" phase while the parent repo is in "draft" phase), the commit is
    either aborted (if checksubrepos is set to "abort") or the higher phase is
    used for the parent repository commit (if set to "follow").
    (default: follow)


``profiling``
-------------

Specifies profiling type, format, and file output. Two profilers are
supported: an instrumenting profiler (named ``ls``), and a sampling
profiler (named ``stat``).

In this section description, 'profiling data' stands for the raw data
collected during profiling, while 'profiling report' stands for a
statistical text report generated from the profiling data.

``enabled``
    Enable the profiler.
    (default: false)

    This is equivalent to passing ``--profile`` on the command line.

``type``
    The type of profiler to use.
    (default: stat)

    ``ls``
      Use Python's built-in instrumenting profiler. This profiler
      works on all platforms, but each line number it reports is the
      first line of a function. This restriction makes it difficult to
      identify the expensive parts of a non-trivial function.
    ``stat``
      Use a statistical profiler, statprof. This profiler is most
      useful for profiling commands that run for longer than about 0.1
      seconds.

``format``
    Profiling format.  Specific to the ``ls`` instrumenting profiler.
    (default: text)

    ``text``
      Generate a profiling report. When saving to a file, it should be
      noted that only the report is saved, and the profiling data is
      not kept.
    ``kcachegrind``
      Format profiling data for kcachegrind use: when saving to a
      file, the generated file can directly be loaded into
      kcachegrind.

``statformat``
    Profiling format for the ``stat`` profiler.
    (default: hotpath)

    ``hotpath``
      Show a tree-based display containing the hot path of execution (where
      most time was spent).
    ``bymethod``
      Show a table of methods ordered by how frequently they are active.
    ``byline``
      Show a table of lines in files ordered by how frequently they are active.
    ``json``
      Render profiling data as JSON.

``freq``
    Sampling frequency.  Specific to the ``stat`` sampling profiler.
    (default: 1000)

``output``
    File path where profiling data or report should be saved. If the
    file exists, it is replaced. (default: None, data is printed on
    stderr)

``sort``
    Sort field.  Specific to the ``ls`` instrumenting profiler.
    One of ``callcount``, ``reccallcount``, ``totaltime`` and
    ``inlinetime``.
    (default: inlinetime)

``time-track``
    Control if the stat profiler track ``cpu`` or ``real`` time.
    (default: ``cpu`` on Windows, otherwise ``real``)

``limit``
    Number of lines to show. Specific to the ``ls`` instrumenting profiler.
    (default: 30)

``nested``
    Show at most this number of lines of drill-down info after each main entry.
    This can help explain the difference between Total and Inline.
    Specific to the ``ls`` instrumenting profiler.
    (default: 0)

``showmin``
    Minimum fraction of samples an entry must have for it to be displayed.
    Can be specified as a float between ``0.0`` and ``1.0`` or can have a
    ``%`` afterwards to allow values up to ``100``. e.g. ``5%``.

    Only used by the ``stat`` profiler.

    For the ``hotpath`` format, default is ``0.05``.
    For the ``chrome`` format, default is ``0.005``.

    The option is unused on other formats.

``showmax``
    Maximum fraction of samples an entry can have before it is ignored in
    display. Values format is the same as ``showmin``.

    Only used by the ``stat`` profiler.

    For the ``chrome`` format, default is ``0.999``.

    The option is unused on other formats.

``showtime``
    Show time taken as absolute durations, in addition to percentages.
    Only used by the ``hotpath`` format.
    (default: true)

``progress``
------------

Mercurial commands can draw progress bars that are as informative as
possible. Some progress bars only offer indeterminate information, while others
have a definite end point.

``debug``
    Whether to print debug info when updating the progress bar. (default: False)

``delay``
    Number of seconds (float) before showing the progress bar. (default: 3)

``changedelay``
    Minimum delay before showing a new topic. When set to less than 3 * refresh,
    that value will be used instead. (default: 1)

``estimateinterval``
    Maximum sampling interval in seconds for speed and estimated time
    calculation. (default: 60)

``refresh``
    Time in seconds between refreshes of the progress bar. (default: 0.1)

``format``
    Format of the progress bar.

    Valid entries for the format field are ``topic``, ``bar``, ``number``,
    ``unit``, ``estimate``, ``speed``, and ``item``. ``item`` defaults to the
    last 20 characters of the item, but this can be changed by adding either
    ``-<num>`` which would take the last num characters, or ``+<num>`` for the
    first num characters.

    (default: topic bar number estimate)

``width``
    If set, the maximum width of the progress information (that is, min(width,
    term width) will be used).

``clear-complete``
    Clear the progress bar after it's done. (default: True)

``disable``
    If true, don't show a progress bar.

``assume-tty``
    If true, ALWAYS show a progress bar, unless disable is given.

``rebase``
----------

``evolution.allowdivergence``
