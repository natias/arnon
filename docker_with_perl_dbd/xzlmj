
=item Instance Methods

=back

=head2 TAP::Parser::Result::Test - Test result token.

=over 4

=item VERSION

=back

=over 4

=item DESCRIPTION

=item OVERRIDDEN METHODS

=over 4

=item Instance Methods

=back

=back

=head2 TAP::Parser::Result::Unknown - Unknown result token.

=over 4

=item VERSION

=back

=over 4

=item DESCRIPTION

=item OVERRIDDEN METHODS

C<as_string>, C<raw>

=back

=head2 TAP::Parser::Result::Version - TAP syntax version token.

=over 4

=item VERSION

=back

=over 4

=item DESCRIPTION

=item OVERRIDDEN METHODS

C<as_string>, C<raw>

=back

=over 4

=item Instance Methods

=back

=head2 TAP::Parser::Result::YAML - YAML result token.

=over 4

=item VERSION

=back

=over 4

=item DESCRIPTION

=item OVERRIDDEN METHODS

C<as_string>, C<raw>

=back

=over 4

=item Instance Methods

=back

=head2 TAP::Parser::ResultFactory - Factory for creating TAP::Parser output
objects

=over 4

=item SYNOPSIS

=item VERSION

=back

=over 4

=item DESCRIPTION

=item METHODS

=item Class Methods

=back

=over 4

=item SUBCLASSING

=over 4

=item Example

=back

=item SEE ALSO

=back

=head2 TAP::Parser::Scheduler - Schedule tests during parallel testing

=over 4

=item VERSION

=back

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item Class Methods

=item Rules data structure

By default, all tests are eligible to be run in parallel. Specifying any of
your own rules removes this one, "First match wins". The first rule that
matches a test will be the one that applies, Any test which does not match
a rule will be run in sequence at the end of the run, The existence of a
rule does not imply selecting a test. You must still specify the tests to
run, Specifying a rule to allow tests to run in parallel does not make the
run in parallel. You still need specify the number of parallel C<jobs> in
your Harness object

=back

=back

=over 4

=item Instance Methods

=back

=head2 TAP::Parser::Scheduler::Job - A single testing job.

=over 4

=item VERSION

=back

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item Class Methods

=back

=back

=over 4

=item Instance Methods

=back

=over 4

=item Attributes

=back

=head2 TAP::Parser::Scheduler::Spinner - A no-op job.

=over 4

=item VERSION

=back

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item Class Methods

=back

=back

=over 4

=item Instance Methods

=back

=over 4

=item SEE ALSO

=back

=head2 TAP::Parser::Source - a TAP source & meta data about it

=over 4

=item VERSION

=back

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item Class Methods

=back

=back

=over 4

=item Instance Methods

=back

=over 4

=item AUTHORS

=item SEE ALSO

=back

=head2 TAP::Parser::SourceHandler - Base class for different TAP source
handlers

=over 4

=item VERSION

=back

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item Class Methods

=back

=back

=over 4

=item SUBCLASSING

=over 4

=item Example

=back

=item AUTHORS

=item SEE ALSO

=back

=head2 TAP::Parser::SourceHandler::Executable - Stream output from an
executable TAP source

=over 4

=item VERSION

=back

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item Class Methods

=back

=back

=over 4

=item SUBCLASSING

=over 4

=item Example

=back

=item SEE ALSO

=back

=head2 TAP::Parser::SourceHandler::File - Stream TAP from a text file.

=over 4

=item VERSION

=back

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item Class Methods

=back

=back

=over 4

=item CONFIGURATION

=item SUBCLASSING

=item SEE ALSO

=back

=head2 TAP::Parser::SourceHandler::Handle - Stream TAP from an IO::Handle
or a GLOB.

=over 4

=item VERSION

=back

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item Class Methods

=back

=back

=over 4

=item SUBCLASSING

=item SEE ALSO

=back

=head2 TAP::Parser::SourceHandler::Perl - Stream TAP from a Perl executable

=over 4

=item VERSION

=back

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item Class Methods

=back

=back

=over 4

=item SUBCLASSING

=over 4

=item Example

=back

=item SEE ALSO

=back

=head2 TAP::Parser::SourceHandler::RawTAP - Stream output from raw TAP in a
scalar/array ref.

=over 4

=item VERSION

=back

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item Class Methods

=back

=back

=over 4

=item SUBCLASSING

=item SEE ALSO

=back

=head2 TAP::Parser::YAMLish::Reader - Read YAMLish data from iterator

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item Class Methods

=item Instance Methods

=back

=item AUTHOR

=item SEE ALSO

=item COPYRIGHT

=back

=head2 TAP::Parser::YAMLish::Writer - Write YAMLish data

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

=item METHODS

=over 4

=item Class Methods

=item Instance Methods

a reference to a scalar to append YAML to, the handle of an open file, a
reference to an array into which YAML will be pushed, a code reference

=back

=item AUTHOR

=item SEE ALSO

=item COPYRIGHT

=back

=head2 Term::ANSIColor - Color screen output using ANSI escape sequences

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Supported Colors

=item Function Interface

color(ATTR[, ATTR ...]), colored(STRING, ATTR[, ATTR ...]),
colored(ATTR-REF, STRING[, STRING...]), uncolor(ESCAPE),
colorstrip(STRING[, STRING ...]), colorvalid(ATTR[, ATTR ...]),
coloralias(ALIAS[, ATTR ...])

=item Constant Interface

=item The Color Stack

=item Supporting CLICOLOR

=back

=item DIAGNOSTICS

Bad color mapping %s, Bad escape sequence %s, Bareword "%s" not allowed
while "strict subs" in use, Cannot alias standard color %s, Cannot alias
standard color %s in %s, Invalid alias name %s, Invalid alias name %s in
%s, Invalid attribute name %s, Invalid attribute name %s in %s, Name "%s"
used only once: possible typo, No comma allowed after filehandle, No name
for escape sequence %s

=item ENVIRONMENT

ANSI_COLORS_ALIASES, ANSI_COLORS_DISABLED, NO_COLOR

=item COMPATIBILITY

=item RESTRICTIONS

=item NOTES

=item AUTHORS

=item COPYRIGHT AND LICENSE

=item SEE ALSO

=back

=head2 Term::Cap - Perl termcap interface

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item METHODS

=back

=back

B<Tgetent>, OSPEED, TERM

B<Tpad>, B<$string>, B<$cnt>, B<$FH>

B<Tputs>, B<$cap>, B<$cnt>, B<$FH>

B<Tgoto>, B<$cap>, B<$col>, B<$row>, B<$FH>

B<Trequire>

=over 4

=item EXAMPLES

=item COPYRIGHT AND LICENSE

=item AUTHOR

=item SEE ALSO

=back

=head2 Term::Complete - Perl word completion module

=over 4

=item SYNOPSIS

=item DESCRIPTION

E<lt>tabE<gt>, ^D, ^U, E<lt>delE<gt>, E<lt>bsE<gt>

=item DIAGNOSTICS

=item BUGS

=item AUTHOR

=back

=head2 Term::ReadLine - Perl interface to various C<readline> packages.
If no real package is found, substitutes stubs instead of basic functions.

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item Minimal set of supported functions

C<ReadLine>, C<new>, C<readline>, C<addhistory>, C<IN>, C<OUT>, C<MinLine>,
C<findConsole>, Attribs, C<Features>

=item Additional supported functions

C<tkRunning>, C<event_loop>, C<ornaments>, C<newTTY>

=item EXPORTS

=item ENVIRONMENT

=back

=head2 Term::Table - Format a header and rows into a table

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item INTERFACE

=over 4

=item OPTIONS

header => [ ... ], rows => [ [...], [...], ... ], collapse => $bool,
max_width => $num, pad => $num, allow_overflow => $bool, sanitize => $bool,
mark_tail => $bool, show_header => $bool, auto_columns => $bool,
no_collapse => [ $col_num_a, $col_num_b, ... ], no_collapse => [
$col_name_a, $col_name_b, ... ], no_collapse => { $col_num_a => 1,
$col_num_b => 1, ... }, no_collapse => { $col_name_a => 1, $col_name_b =>
1, ... }

=back

=item NOTE ON UNICODE/WIDE CHARACTERS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Term::Table::Cell - Representation of a cell in a table.

=over 4

=item DESCRIPTION

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Term::Table::CellStack - Combine several cells into one (vertical)

=over 4

=item DESCRIPTION

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Term::Table::HashBase - Build hash based classes.

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item THIS IS A BUNDLED COPY OF HASHBASE

=item METHODS

=over 4

=item PROVIDED BY HASH BASE

$it = $class->new(%PAIRS), $it = $class->new(\%PAIRS), $it =
$class->new(\@ORDERED_VALUES)

=item HOOKS

$self->init()

=back

=item ACCESSORS

=over 4

=item READ/WRITE

foo(), set_foo(), FOO()

=item READ ONLY

set_foo()

=item DEPRECATED SETTER

set_foo()

=item NO SETTER

=item NO READER

=item CONSTANT ONLY

=back

=item SUBCLASSING

=item GETTING A LIST OF ATTRIBUTES FOR A CLASS

@list = Term::Table::HashBase::attr_list($class), @list =
$class->Term::Table::HashBase::attr_list()

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Term::Table::LineBreak - Break up lines for use in tables.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Term::Table::Util - Utilities for Term::Table.

=over 4

=item DESCRIPTION

=item EXPORTS

=over 4

=item CONSTANTS

$bool = USE_GCS, $bool = USE_TERM_READKEY

=item UTILITIES

$width = term_size(), $width = uni_length($string)

=back

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test - provides a simple framework for writing test scripts

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item QUICK START GUIDE

=over 4

=item Functions

C<plan(...)>, C<tests =E<gt> I<number>>, C<todo =E<gt> [I<1,5,14>]>,
C<onfail =E<gt> sub { ... }>, C<onfail =E<gt> \&some_sub>

=back

=back

B<_to_value>

C<ok(...)>

C<skip(I<skip_if_true>, I<args...>)>

=over 4

=item TEST TYPES

NORMAL TESTS, SKIPPED TESTS, TODO TESTS

=item ONFAIL

=item BUGS and CAVEATS

=item ENVIRONMENT

=item NOTE

=item SEE ALSO

=item AUTHOR

=back

=head2 Test2 - Framework for writing test tools that all work together.

=over 4

=item DESCRIPTION

=over 4

=item WHAT IS NEW?

Easier to test new testing tools, Better diagnostics capabilities, Event
driven, More complete API, Support for output other than TAP, Subtest
implementation is more sane, Support for threading/forking

=back

=item GETTING STARTED

=back

=head2 Test2, This describes the namespace layout for the Test2 ecosystem.
Not all the
namespaces listed here are part of the Test2 distribution, some are
implemented
in L<Test2::Suite>.

=over 4

=item Test2::Tools::

=item Test2::Plugin::

=item Test2::Bundle::

=item Test2::Require::

=item Test2::Formatter::

=item Test2::Event::

=item Test2::Hub::

=item Test2::IPC::

=item Test2::Util::

=item Test2::API::

=item Test2::

=back

=over 4

=item SEE ALSO

=item CONTACTING US
