	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E08F,
	0x1E090,
	0x1E130,
	0x1E137,
	0x1E2AE,
	0x1E2AF,
	0x1E2EC,
	0x1E2F0,
	0x1E4EC,
	0x1E4F0,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

static const UV UNI_GUJR_invlist[] = {  /* for all charsets */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xA830,
	0xA83A
};

static const UV UNI_GURU_invlist[] = {  /* for all charsets */
	39,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA77,
	0xA830,
	0xA83A
};

static const UV UNI_HALFANDFULLFORMS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFF00,
	0xFFF0
};

static const UV UNI_HALFMARKS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFE20,
	0xFE30
};

static const UV UNI_HAN_invlist[] = {  /* for all charsets */
	77,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x3001,
	0x3004,
	0x3005,
	0x3012,
	0x3013,
	0x3020,
	0x3021,
	0x302E,
	0x3030,
	0x3031,
	0x3037,
	0x3040,
	0x30FB,
	0x30FC,
	0x3190,
	0x31A0,
	0x31C0,
	0x31E4,
	0x3220,
	0x3248,
	0x3280,
	0x32B1,
	0x32C0,
	0x32CC,
	0x32FF,
	0x3300,
	0x3358,
	0x3371,
	0x337B,
	0x3380,
	0x33E0,
	0x33FF,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA000,
	0xA700,
	0xA708,
	0xF900,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFE45,
	0xFE47,
	0xFF61,
	0xFF66,
	0x16FE2,
	0x16FE4,
	0x16FF0,
	0x16FF2,
	0x1D360,
	0x1D372,
	0x1F250,
	0x1F252,
	0x20000,
	0x2A6E0,
	0x2A700,
	0x2B73A,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x2F800,
	0x2FA1E,
	0x30000,
	0x3134B,
	0x31350,
	0x323B0
};

static const UV UNI_HANG_invlist[] = {  /* for all charsets */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1100,
	0x1200,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3013,
	0x3020,
	0x302E,
	0x3031,
	0x3037,
	0x3038,
	0x30FB,
	0x30FC,
	0x3131,
	0x318F,
	0x3200,
	0x321F,
	0x3260,
	0x327F,
	0xA960,
	0xA97D,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC,
	0xFE45,
	0xFE47,
	0xFF61,
	0xFF66,
	0xFFA0,
	0xFFBF,
	0xFFC2,
	0xFFC8,
	0xFFCA,
	0xFFD0,
	0xFFD2,
	0xFFD8,
	0xFFDA,
	0xFFDD
};

static const UV UNI_HANO_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1720,
	0x1737
};

static const UV UNI_HATR_invlist[] = {  /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x108E0,
	0x108F3,
	0x108F4,
	0x108F6,
	0x108FB,
	0x10900
};

static const UV UNI_HEBR_invlist[] = {  /* for all charsets */
	19,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5EF,
	0x5F5,
	0xFB1D,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB50
};

static const UV UNI_HIGHPUSURROGATES_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xDB80,
	0xDC00
};

static const UV UNI_HIGHSURROGATES_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD800,
	0xDB80
};

static const UV UNI_HIRA_invlist[] = {  /* for all charsets */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3013,
	0x3020,
	0x3030,
	0x3036,
	0x3037,
	0x3038,
	0x303C,
	0x303E,
	0x3041,
	0x3097,
	0x3099,
	0x30A1,
	0x30FB,
	0x30FD,
	0xFE45,
	0xFE47,
	0xFF61,
	0xFF66,
	0xFF70,
	0xFF71,
	0xFF9E,
	0xFFA0,
	0x1B001,
	0x1B120,
	0x1B132,
	0x1B133,
	0x1B150,
	0x1B153,
	0x1F200,
	0x1F201
};

static const UV UNI_HLUW_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x14400,
	0x14647
};

static const UV UNI_HMNG_invlist[] = {  /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16B00,
	0x16B46,
	0x16B50,
	0x16B5A,
	0x16B5B,
	0x16B62,
	0x16B63,
	0x16B78,
	0x16B7D,
	0x16B90
};

static const UV UNI_HMNP_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1E100,
	0x1E12D,
	0x1E130,
	0x1E13E,
	0x1E140,
	0x1E14A,
	0x1E14E,
	0x1E150
};

static const UV UNI_HST__NA_invlist[] = {  /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1100,
	0x1200,
	0xA960,
	0xA97D,
	0xAC00,
	0xD7A4,
	0xD7B0,
	0xD7C7,
	0xD7CB,
	0xD7FC
};

static const UV UNI_HUNG_invlist[] = {  /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10C80,
	0x10CB3,
	0x10CC0,
	0x10CF3,
	0x10CFA,
	0x10D00
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_HYPHEN_invlist[] = {  /* for ASCII/Latin1 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2D,
	0x2E,
	0xAD,
	0xAE,
	0x58A,
	0x58B,
	0x1806,
	0x1807,
	0x2010,
	0x2012,
	0x2E17,
	0x2E18,
	0x30FB,
	0x30FC,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E,
	0xFF65,
	0xFF66
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_HYPHEN_invlist[] = {  /* for EBCDIC 1047 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0xCA,
	0xCB,
	0x58A,
	0x58B,
	0x1806,
	0x1807,
	0x2010,
	0x2012,
	0x2E17,
	0x2E18,
	0x30FB,
	0x30FC,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E,
	0xFF65,
	0xFF66
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_HYPHEN_invlist[] = {  /* for EBCDIC 037 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60,
	0x61,
	0xCA,
	0xCB,
	0x58A,
	0x58B,
	0x1806,
	0x1807,
	0x2010,
	0x2012,
	0x2E17,
	0x2E18,
	0x30FB,
	0x30FC,
	0xFE63,
	0xFE64,
	0xFF0D,
	0xFF0E,
	0xFF65,
	0xFF66
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_IDC_invlist[] = {  /* for ASCII/Latin1 */
	1537,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x5F,
	0x60,
	0x61,
	0x7B,
	0xAA,
	0xAB,
	0xB5,
	0xB6,
	0xB7,
	0xB8,
	0xBA,
	0xBB,
	0xC0,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x378,
	0x37A,
	0x37E,
	0x37F,
	0x380,
	0x386,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x488,
	0x48A,
	0x530,
	0x531,
	0x557,
	0x559,
	0x55A,
	0x560,
	0x589,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5EF,
	0x5F3,
	0x610,
	0x61B,
	0x620,
	0x66A,
	0x66E,
	0x6D4,
	0x6D5,
	0x6DD,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x700,
	0x710,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7F6,
	0x7FA,
	0x7FB,
	0x7FD,
	0x7FE,
	0x800,
	0x82E,
	0x840,
	0x85C,
	0x860,
	0x86B,
	0x870,
	0x888,
	0x889,
	0x88F,
	0x898,
	0x8E2,
	0x8E3,
	0x964,
	0x966,
	0x970,
	0x971,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9F2,
	0x9FC,
	0x9FD,
	0x9FE,
	0x9FF,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA76,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF0,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB55,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB70,
	0xB71,
	0xB72,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3C,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC5D,
	0xC5E,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDD,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF4,
	0xD00,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD81,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE3B,
	0xE40,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE86,
	0xE8B,
	0xE8C,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECF,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF00,
	0xF01,
	0xF18,
	0xF1A,
	0xF20,
	0xF2A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF85,
	0xF86,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x1050,
	0x109E,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
