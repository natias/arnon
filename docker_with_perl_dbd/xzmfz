	0x1E66,
	0x1E67,
	0x1E68,
	0x1E69,
	0x1E6A,
	0x1E6B,
	0x1E6C,
	0x1E6D,
	0x1E6E,
	0x1E6F,
	0x1E70,
	0x1E71,
	0x1E72,
	0x1E73,
	0x1E74,
	0x1E75,
	0x1E76,
	0x1E77,
	0x1E78,
	0x1E79,
	0x1E7A,
	0x1E7B,
	0x1E7C,
	0x1E7D,
	0x1E7E,
	0x1E7F,
	0x1E80,
	0x1E81,
	0x1E82,
	0x1E83,
	0x1E84,
	0x1E85,
	0x1E86,
	0x1E87,
	0x1E88,
	0x1E89,
	0x1E8A,
	0x1E8B,
	0x1E8C,
	0x1E8D,
	0x1E8E,
	0x1E8F,
	0x1E90,
	0x1E91,
	0x1E92,
	0x1E93,
	0x1E94,
	0x1E95,
	0x1E9E,
	0x1E9F,
	0x1EA0,
	0x1EA1,
	0x1EA2,
	0x1EA3,
	0x1EA4,
	0x1EA5,
	0x1EA6,
	0x1EA7,
	0x1EA8,
	0x1EA9,
	0x1EAA,
	0x1EAB,
	0x1EAC,
	0x1EAD,
	0x1EAE,
	0x1EAF,
	0x1EB0,
	0x1EB1,
	0x1EB2,
	0x1EB3,
	0x1EB4,
	0x1EB5,
	0x1EB6,
	0x1EB7,
	0x1EB8,
	0x1EB9,
	0x1EBA,
	0x1EBB,
	0x1EBC,
	0x1EBD,
	0x1EBE,
	0x1EBF,
	0x1EC0,
	0x1EC1,
	0x1EC2,
	0x1EC3,
	0x1EC4,
	0x1EC5,
	0x1EC6,
	0x1EC7,
	0x1EC8,
	0x1EC9,
	0x1ECA,
	0x1ECB,
	0x1ECC,
	0x1ECD,
	0x1ECE,
	0x1ECF,
	0x1ED0,
	0x1ED1,
	0x1ED2,
	0x1ED3,
	0x1ED4,
	0x1ED5,
	0x1ED6,
	0x1ED7,
	0x1ED8,
	0x1ED9,
	0x1EDA,
	0x1EDB,
	0x1EDC,
	0x1EDD,
	0x1EDE,
	0x1EDF,
	0x1EE0,
	0x1EE1,
	0x1EE2,
	0x1EE3,
	0x1EE4,
	0x1EE5,
	0x1EE6,
	0x1EE7,
	0x1EE8,
	0x1EE9,
	0x1EEA,
	0x1EEB,
	0x1EEC,
	0x1EED,
	0x1EEE,
	0x1EEF,
	0x1EF0,
	0x1EF1,
	0x1EF2,
	0x1EF3,
	0x1EF4,
	0x1EF5,
	0x1EF6,
	0x1EF7,
	0x1EF8,
	0x1EF9,
	0x1EFA,
	0x1EFB,
	0x1EFC,
	0x1EFD,
	0x1EFE,
	0x1EFF,
	0x1F08,
	0x1F10,
	0x1F16,
	0x1F20,
	0x1F28,
	0x1F30,
	0x1F38,
	0x1F40,
	0x1F46,
	0x1F50,
	0x1F58,
	0x1F60,
	0x1F68,
	0x1F70,
	0x1F7E,
	0x1F80,
	0x1F88,
	0x1F90,
	0x1F98,
	0x1FA0,
	0x1FA8,
	0x1FB0,
	0x1FB5,
	0x1FB6,
	0x1FB8,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FC5,
	0x1FC6,
	0x1FC8,
	0x1FD0,
	0x1FD4,
	0x1FD6,
	0x1FD8,
	0x1FE0,
	0x1FE8,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FF8,
	0x210A,
	0x210B,
	0x210E,
	0x2110,
	0x2113,
	0x2114,
	0x212F,
	0x2130,
	0x2134,
	0x2135,
	0x2139,
	0x213A,
	0x213C,
	0x213E,
	0x2146,
	0x214A,
	0x214E,
	0x214F,
	0x2184,
	0x2185,
	0x2C30,
	0x2C60,
	0x2C61,
	0x2C62,
	0x2C65,
	0x2C67,
	0x2C68,
	0x2C69,
	0x2C6A,
	0x2C6B,
	0x2C6C,
	0x2C6D,
	0x2C71,
	0x2C72,
	0x2C73,
	0x2C75,
	0x2C76,
	0x2C7C,
	0x2C81,
	0x2C82,
	0x2C83,
	0x2C84,
	0x2C85,
	0x2C86,
	0x2C87,
	0x2C88,
	0x2C89,
	0x2C8A,
	0x2C8B,
	0x2C8C,
	0x2C8D,
	0x2C8E,
	0x2C8F,
	0x2C90,
	0x2C91,
	0x2C92,
	0x2C93,
	0x2C94,
	0x2C95,
	0x2C96,
	0x2C97,
	0x2C98,
	0x2C99,
	0x2C9A,
	0x2C9B,
	0x2C9C,
	0x2C9D,
	0x2C9E,
	0x2C9F,
	0x2CA0,
	0x2CA1,
	0x2CA2,
	0x2CA3,
	0x2CA4,
	0x2CA5,
	0x2CA6,
	0x2CA7,
	0x2CA8,
	0x2CA9,
	0x2CAA,
	0x2CAB,
	0x2CAC,
	0x2CAD,
	0x2CAE,
	0x2CAF,
	0x2CB0,
	0x2CB1,
	0x2CB2,
	0x2CB3,
	0x2CB4,
	0x2CB5,
	0x2CB6,
	0x2CB7,
	0x2CB8,
	0x2CB9,
	0x2CBA,
	0x2CBB,
	0x2CBC,
	0x2CBD,
	0x2CBE,
	0x2CBF,
	0x2CC0,
	0x2CC1,
	0x2CC2,
	0x2CC3,
	0x2CC4,
	0x2CC5,
	0x2CC6,
	0x2CC7,
	0x2CC8,
	0x2CC9,
	0x2CCA,
	0x2CCB,
	0x2CCC,
	0x2CCD,
	0x2CCE,
	0x2CCF,
	0x2CD0,
	0x2CD1,
	0x2CD2,
	0x2CD3,
	0x2CD4,
	0x2CD5,
	0x2CD6,
	0x2CD7,
	0x2CD8,
	0x2CD9,
	0x2CDA,
	0x2CDB,
	0x2CDC,
	0x2CDD,
	0x2CDE,
	0x2CDF,
	0x2CE0,
	0x2CE1,
	0x2CE2,
	0x2CE3,
	0x2CE5,
	0x2CEC,
	0x2CED,
	0x2CEE,
	0x2CEF,
	0x2CF3,
	0x2CF4,
	0x2D00,
	0x2D26,
	0x2D27,
	0x2D28,
	0x2D2D,
	0x2D2E,
	0xA641,
	0xA642,
	0xA643,
	0xA644,
	0xA645,
	0xA646,
	0xA647,
	0xA648,
	0xA649,
	0xA64A,
	0xA64B,
	0xA64C,
	0xA64D,
	0xA64E,
	0xA64F,
	0xA650,
	0xA651,
	0xA652,
	0xA653,
	0xA654,
	0xA655,
	0xA656,
	0xA657,
	0xA658,
	0xA659,
	0xA65A,
	0xA65B,
	0xA65C,
	0xA65D,
	0xA65E,
	0xA65F,
	0xA660,
	0xA661,
	0xA662,
	0xA663,
	0xA664,
	0xA665,
	0xA666,
	0xA667,
	0xA668,
	0xA669,
	0xA66A,
	0xA66B,
	0xA66C,
	0xA66D,
	0xA66E,
	0xA681,
	0xA682,
	0xA683,
	0xA684,
	0xA685,
	0xA686,
	0xA687,
	0xA688,
	0xA689,
	0xA68A,
	0xA68B,
	0xA68C,
	0xA68D,
	0xA68E,
	0xA68F,
	0xA690,
	0xA691,
	0xA692,
	0xA693,
	0xA694,
	0xA695,
	0xA696,
	0xA697,
	0xA698,
	0xA699,
	0xA69A,
	0xA69B,
	0xA69C,
	0xA723,
	0xA724,
	0xA725,
	0xA726,
	0xA727,
	0xA728,
	0xA729,
	0xA72A,
	0xA72B,
	0xA72C,
	0xA72D,
	0xA72E,
	0xA72F,
	0xA732,
	0xA733,
	0xA734,
	0xA735,
	0xA736,
	0xA737,
	0xA738,
	0xA739,
	0xA73A,
	0xA73B,
	0xA73C,
	0xA73D,
	0xA73E,
	0xA73F,
	0xA740,
	0xA741,
	0xA742,
	0xA743,
	0xA744,
	0xA745,
	0xA746,
	0xA747,
	0xA748,
	0xA749,
	0xA74A,
	0xA74B,
	0xA74C,
	0xA74D,
	0xA74E,
	0xA74F,
	0xA750,
	0xA751,
	0xA752,
	0xA753,
	0xA754,
	0xA755,
	0xA756,
	0xA757,
	0xA758,
	0xA759,
	0xA75A,
	0xA75B,
	0xA75C,
	0xA75D,
	0xA75E,
	0xA75F,
	0xA760,
	0xA761,
	0xA762,
	0xA763,
	0xA764,
	0xA765,
	0xA766,
	0xA767,
	0xA768,
	0xA769,
	0xA76A,
	0xA76B,
	0xA76C,
	0xA76D,
	0xA76E,
	0xA76F,
	0xA770,
	0xA771,
	0xA779,
	0xA77A,
	0xA77B,
	0xA77C,
	0xA77D,
	0xA77F,
	0xA780,
	0xA781,
	0xA782,
	0xA783,
	0xA784,
	0xA785,
	0xA786,
	0xA787,
	0xA788,
	0xA78C,
	0xA78D,
	0xA78E,
	0xA78F,
	0xA791,
	0xA792,
	0xA793,
	0xA796,
	0xA797,
	0xA798,
	0xA799,
	0xA79A,
	0xA79B,
	0xA79C,
	0xA79D,
	0xA79E,
	0xA79F,
	0xA7A0,
	0xA7A1,
	0xA7A2,
	0xA7A3,
	0xA7A4,
	0xA7A5,
	0xA7A6,
	0xA7A7,
	0xA7A8,
	0xA7A9,
	0xA7AA,
	0xA7AF,
	0xA7B0,
	0xA7B5,
	0xA7B6,
	0xA7B7,
	0xA7B8,
	0xA7B9,
	0xA7BA,
	0xA7BB,
	0xA7BC,
	0xA7BD,
	0xA7BE,
	0xA7BF,
	0xA7C0,
	0xA7C1,
	0xA7C2,
	0xA7C3,
	0xA7C4,
	0xA7C8,
	0xA7C9,
	0xA7CA,
	0xA7CB,
	0xA7D1,
	0xA7D2,
	0xA7D3,
	0xA7D4,
	0xA7D5,
	0xA7D6,
	0xA7D7,
	0xA7D8,
	0xA7D9,
	0xA7DA,
	0xA7F6,
	0xA7F7,
	0xA7FA,
	0xA7FB,
	0xAB30,
	0xAB5B,
	0xAB60,
	0xAB69,
	0xAB70,
	0xABC0,
	0xFB00,
	0xFB07,
	0xFB13,
	0xFB18,
	0xFF41,
	0xFF5B,
	0x10428,
	0x10450,
	0x104D8,
	0x104FC,
	0x10597,
	0x105A2,
	0x105A3,
	0x105B2,
	0x105B3,
	0x105BA,
	0x105BB,
	0x105BD,
	0x10CC0,
	0x10CF3,
	0x118C0,
	0x118E0,
	0x16E60,
	0x16E80,
	0x1D41A,
	0x1D434,
	0x1D44E,
	0x1D455,
	0x1D456,
	0x1D468,
	0x1D482,
	0x1D49C,
	0x1D4B6,
	0x1D4BA,
	0x1D4BB,
	0x1D4BC,
	0x1D4BD,
	0x1D4C4,
	0x1D4C5,
	0x1D4D0,
	0x1D4EA,
	0x1D504,
	0x1D51E,
	0x1D538,
	0x1D552,
	0x1D56C,
	0x1D586,
	0x1D5A0,
	0x1D5BA,
	0x1D5D4,
	0x1D5EE,
	0x1D608,
	0x1D622,
	0x1D63C,
	0x1D656,
	0x1D670,
	0x1D68A,
	0x1D6A6,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6E2,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D71C,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D756,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D790,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D7CA,
	0x1D7CB,
	0x1D7CC,
	0x1DF00,
	0x1DF0A,
	0x1DF0B,
	0x1DF1F,
	0x1DF25,
	0x1DF2B,
	0x1E922,
	0x1E944
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_POSIXALNUM_invlist[] = {  /* for ASCII/Latin1 */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A,
	0x41,
	0x5B,
	0x61,
	0x7B
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_POSIXALNUM_invlist[] = {  /* for EBCDIC 1047 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA2,
	0xAA,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xF0,
	0xFA
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_POSIXALNUM_invlist[] = {  /* for EBCDIC 037 */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA2,
	0xAA,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA,
	0xF0,
	0xFA
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_POSIXALPHA_invlist[] = {  /* for ASCII/Latin1 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0x61,
	0x7B
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_POSIXALPHA_invlist[] = {  /* for EBCDIC 1047 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA2,
	0xAA,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_POSIXALPHA_invlist[] = {  /* for EBCDIC 037 */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA2,
	0xAA,
	0xC1,
	0xCA,
	0xD1,
	0xDA,
	0xE2,
	0xEA
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_POSIXBLANK_invlist[] = {  /* for ASCII/Latin1 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xA,
	0x20,
	0x21
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_POSIXBLANK_invlist[] = {  /* for EBCDIC 1047 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0x40,
	0x41
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_POSIXBLANK_invlist[] = {  /* for EBCDIC 037 */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0x40,
	0x41
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_POSIXCNTRL_invlist[] = {  /* for ASCII/Latin1 */
	4,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x20,
	0x7F,
	0x80
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_POSIXCNTRL_invlist[] = {  /* for EBCDIC 1047 */
	26,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x15,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x26,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x40
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_POSIXCNTRL_invlist[] = {  /* for EBCDIC 037 */
	26,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x16,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x25,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x40
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_POSIXDIGIT_invlist[] = {  /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x30,
	0x3A
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_POSIXDIGIT_invlist[] = {  /* for EBCDIC 1047 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0,
	0xFA
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_POSIXDIGIT_invlist[] = {  /* for EBCDIC 037 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
