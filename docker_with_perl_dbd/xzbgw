From F<d_setsent.U>:

This variable conditionally defines C<HAS_SETSERVENT> if setservent() is
available.

=item C<d_setservent_r>

From F<d_setservent_r.U>:

This variable conditionally defines the C<HAS_SETSERVENT_R> symbol,
which indicates to the C program that the setservent_r()
routine is available.

=item C<d_setsid>

From F<d_setsid.U>:

This variable conditionally defines C<HAS_SETSID> if setsid() is
available to set the process group C<ID>.

=item C<d_setvbuf>

From F<d_setvbuf.U>:

This variable conditionally defines the C<HAS_SETVBUF> symbol, which
indicates to the C program that the setvbuf() routine is available
to change buffering on an open stdio stream.

=item C<d_shm>

From F<d_shm.U>:

This variable conditionally defines the C<HAS_SHM> symbol, which
indicates that the entire shm*(2) library is present.

=item C<d_shmat>

From F<d_shmat.U>:

This variable conditionally defines the C<HAS_SHMAT> symbol, which
indicates to the C program that the shmat() routine is available.

=item C<d_shmatprototype>

From F<d_shmat.U>:

This variable conditionally defines the C<HAS_SHMAT_PROTOTYPE>
symbol, which indicates that F<sys/shm.h> has a prototype for
shmat.

=item C<d_shmctl>

From F<d_shmctl.U>:

This variable conditionally defines the C<HAS_SHMCTL> symbol, which
indicates to the C program that the shmctl() routine is available.

=item C<d_shmdt>

From F<d_shmdt.U>:

This variable conditionally defines the C<HAS_SHMDT> symbol, which
indicates to the C program that the shmdt() routine is available.

=item C<d_shmget>

From F<d_shmget.U>:

This variable conditionally defines the C<HAS_SHMGET> symbol, which
indicates to the C program that the shmget() routine is available.

=item C<d_sigaction>

From F<d_sigaction.U>:

This variable conditionally defines the C<HAS_SIGACTION> symbol, which
indicates that the Vr4 sigaction() routine is available.

=item C<d_siginfo_si_addr>

From F<d_siginfo_si.U>:

This variable conditionally defines the C<HAS_SIGINFO_SI_ADDR> symbol,
which indicates that the siginfo_t struct has the si_addr member.

=item C<d_siginfo_si_band>

From F<d_siginfo_si.U>:

This variable conditionally defines the C<HAS_SIGINFO_SI_BAND> symbol,
which indicates that the siginfo_t struct has the si_band member.

=item C<d_siginfo_si_errno>

From F<d_siginfo_si.U>:

This variable conditionally defines the C<HAS_SIGINFO_SI_ERRNO> symbol,
which indicates that the siginfo_t struct has the si_errno member.

=item C<d_siginfo_si_fd>

From F<d_siginfo_si.U>:

This variable conditionally defines the C<HAS_SIGINFO_SI_FD> symbol,
which indicates that the siginfo_t struct has the si_fd member.

=item C<d_siginfo_si_pid>

From F<d_siginfo_si.U>:

This variable conditionally defines the C<HAS_SIGINFO_SI_PID> symbol,
which indicates that the siginfo_t struct has the si_pid member.

=item C<d_siginfo_si_status>

From F<d_siginfo_si.U>:

This variable conditionally defines the C<HAS_SIGINFO_SI_STATUS> symbol,
which indicates that the siginfo_t struct has the si_status member.

=item C<d_siginfo_si_uid>

From F<d_siginfo_si.U>:

This variable conditionally defines the C<HAS_SIGINFO_SI_UID> symbol,
which indicates that the siginfo_t struct has the si_uid member.

=item C<d_siginfo_si_value>

From F<d_siginfo_si.U>:

This variable conditionally defines the C<HAS_SIGINFO_SI_VALUE> symbol,
which indicates that the siginfo_t struct has the si_value member.

=item C<d_signbit>

From F<d_signbit.U>:

This variable conditionally defines the C<HAS_SIGNBIT> symbol, which
indicates to the C program that the signbit() routine is available
and safe to use with perl's intern C<NV> type.

=item C<d_sigprocmask>

From F<d_sigprocmask.U>:

This variable conditionally defines C<HAS_SIGPROCMASK>
if sigprocmask() is available to examine or change the signal mask
of the calling process.

=item C<d_sigsetjmp>

From F<d_sigsetjmp.U>:

This variable conditionally defines the C<HAS_SIGSETJMP> symbol,
which indicates that the sigsetjmp() routine is available to
call setjmp() and optionally save the process's signal mask.

=item C<d_sin6_scope_id>

From F<d_socket.U>:

This variable conditionally defines the HAS_SIN6_SCOPE_ID symbol, which
indicates that a struct sockaddr_in6 structure has the sin6_scope_id
member.

=item C<d_sitearch>

From F<sitearch.U>:

This variable conditionally defines C<SITEARCH> to hold the pathname
of architecture-dependent library files for $package.  If
$sitearch is the same as $archlib, then this is set to undef.

=item C<d_snprintf>

From F<d_snprintf.U>:

This variable conditionally defines the C<HAS_SNPRINTF> symbol, which
indicates to the C program that the snprintf () library function
is available.

=item C<d_sockaddr_in6>

From F<d_socket.U>:

This variable conditionally defines the HAS_SOCKADDR_IN6 symbol, which
indicates the availability of a struct sockaddr_in6.

=item C<d_sockaddr_sa_len>

From F<d_socket.U>:

This variable conditionally defines the C<HAS_SOCKADDR_SA_LEN> symbol,
which indicates that a struct sockaddr structure has the sa_len
member.

=item C<d_sockaddr_storage>

From F<d_socket.U>:

This variable conditionally defines the C<HAS_SOCKADDR_STORAGE> symbol,
which indicates the availability of a struct sockaddr_storage.

=item C<d_sockatmark>

From F<d_sockatmark.U>:

This variable conditionally defines the C<HAS_SOCKATMARK> symbol, which
indicates to the C program that the sockatmark() routine is available.

=item C<d_sockatmarkproto>

From F<d_sockatmarkproto.U>:

This variable conditionally defines the C<HAS_SOCKATMARK_PROTO> symbol,
which indicates to the C program that the system provides
a prototype for the sockatmark() function.  Otherwise, it is
up to the program to supply one.

=item C<d_socket>

From F<d_socket.U>:

This variable conditionally defines C<HAS_SOCKET>, which indicates
that the C<BSD> socket interface is supported.

=item C<d_socklen_t>

From F<d_socklen_t.U>:

This symbol will be defined if the C compiler supports socklen_t.

=item C<d_sockpair>

From F<d_socket.U>:

This variable conditionally defines the C<HAS_SOCKETPAIR> symbol, which
indicates that the C<BSD> socketpair() is supported.

=item C<d_socks5_init>

From F<d_socks5_init.U>:

This variable conditionally defines the HAS_SOCKS5_INIT symbol, which
indicates to the C program that the socks5_init() routine is available.

=item C<d_sqrtl>

From F<d_sqrtl.U>:

This variable conditionally defines the C<HAS_SQRTL> symbol, which
indicates to the C program that the sqrtl() routine is available.

=item C<d_srand48_r>

From F<d_srand48_r.U>:

This variable conditionally defines the HAS_SRAND48_R symbol,
which indicates to the C program that the srand48_r()
routine is available.

=item C<d_srandom_r>

From F<d_srandom_r.U>:

This variable conditionally defines the C<HAS_SRANDOM_R> symbol,
which indicates to the C program that the srandom_r()
routine is available.

=item C<d_sresgproto>

From F<d_sresgproto.U>:

This variable conditionally defines the C<HAS_SETRESGID_PROTO> symbol,
which indicates to the C program that the system provides
a prototype for the setresgid() function.  Otherwise, it is
up to the program to supply one.

=item C<d_sresuproto>

From F<d_sresuproto.U>:

This variable conditionally defines the C<HAS_SETRESUID_PROTO> symbol,
which indicates to the C program that the system provides
a prototype for the setresuid() function.  Otherwise, it is
up to the program to supply one.

=item C<d_stat>

From F<d_stat.U>:

This variable conditionally defines C<HAS_STAT> if stat() is
available to get file status.

=item C<d_statblks>

From F<d_statblks.U>:

This variable conditionally defines C<USE_STAT_BLOCKS>
if this system has a stat structure declaring
st_blksize and st_blocks.

=item C<d_statfs_f_flags>

From F<d_statfs_f_flags.U>:

This variable conditionally defines the C<HAS_STRUCT_STATFS_F_FLAGS>
symbol, which indicates to struct statfs from has f_flags member.
This kind of struct statfs is coming from F<sys/mount.h> (C<BSD>),
not from F<sys/statfs.h> (C<SYSV>).

=item C<d_statfs_s>

From F<d_statfs_s.U>:

This variable conditionally defines the C<HAS_STRUCT_STATFS> symbol,
which indicates that the struct statfs is supported.

=item C<d_static_inline>

From F<d_static_inline.U>:

This variable conditionally defines the C<HAS_STATIC_INLINE> symbol,
which indicates that the C compiler supports C99-style static
inline.  That is, the function can't be called from another
translation unit.

=item C<d_statvfs>

From F<d_statvfs.U>:

This variable conditionally defines the C<HAS_STATVFS> symbol, which
indicates to the C program that the statvfs() routine is available.

=item C<d_stdio_cnt_lval>

From F<d_stdstdio.U>:

This variable conditionally defines C<STDIO_CNT_LVALUE> if the
C<FILE_cnt> macro can be used as an lvalue.

=item C<d_stdio_ptr_lval>

From F<d_stdstdio.U>:

This variable conditionally defines C<STDIO_PTR_LVALUE> if the
C<FILE_ptr> macro can be used as an lvalue.

=item C<d_stdio_ptr_lval_nochange_cnt>

From F<d_stdstdio.U>:

This symbol is defined if using the C<FILE_ptr> macro as an lvalue
to increase the pointer by n leaves File_cnt(fp) unchanged.

=item C<d_stdio_ptr_lval_sets_cnt>

From F<d_stdstdio.U>:

This symbol is defined if using the C<FILE_ptr> macro as an lvalue
to increase the pointer by n has the side effect of decreasing the
value of File_cnt(fp) by n.

=item C<d_stdio_stream_array>

From F<stdio_streams.U>:

This variable tells whether there is an array holding
the stdio streams.

=item C<d_stdiobase>

From F<d_stdstdio.U>:

This variable conditionally defines C<USE_STDIO_BASE> if this system
has a C<FILE> structure declaring a usable _base field (or equivalent)
in F<stdio.h>.

=item C<d_stdstdio>

From F<d_stdstdio.U>:

This variable conditionally defines C<USE_STDIO_PTR> if this system
has a C<FILE> structure declaring usable _ptr and _cnt fields (or
equivalent) in F<stdio.h>.

=item C<d_strcoll>

From F<d_strcoll.U>:

This variable conditionally defines C<HAS_STRCOLL> if strcoll() is
available to compare strings using collating information.

=item C<d_strerror_l>

From F<d_strerror_l.U>:

This variable conditionally defines the C<HAS_STRERROR_L> symbol, which
indicates to the C program that the strerror_l() routine is available
to return the error message for a given errno value in a particular
locale (identified by a locale_t object).

=item C<d_strerror_r>

From F<d_strerror_r.U>:

This variable conditionally defines the C<HAS_STRERROR_R> symbol,
which indicates to the C program that the strerror_r()
routine is available.

=item C<d_strftime>

From F<d_strftime.U>:

This variable conditionally defines the C<HAS_STRFTIME> symbol, which
indicates to the C program that the strftime() routine is available.

=item C<d_strlcat>

From F<d_strlcat.U>:

This variable conditionally defines the C<HAS_STRLCAT> symbol, which
indicates to the C program that the strlcat () routine is available.

=item C<d_strlcpy>

From F<d_strlcpy.U>:

This variable conditionally defines the C<HAS_STRLCPY> symbol, which
indicates to the C program that the strlcpy () routine is available.

=item C<d_strnlen>

From F<d_strnlen.U>:

This variable conditionally defines the C<HAS_STRNLEN> symbol, which
indicates to the C program that the strnlen () routine is available.

=item C<d_strtod>

From F<d_strtod.U>:

This variable conditionally defines the C<HAS_STRTOD> symbol, which
indicates to the C program that the strtod() routine is available
to provide better numeric string conversion than atof().

=item C<d_strtod_l>

From F<d_strtod_l.U>:

This variable conditionally defines the C<HAS_STRTOD_L> symbol, which
indicates to the C program that the strtod_l() routine is available.

=item C<d_strtol>

From F<d_strtol.U>:

This variable conditionally defines the C<HAS_STRTOL> symbol, which
indicates to the C program that the strtol() routine is available
to provide better numeric string conversion than atoi() and friends.

=item C<d_strtold>

From F<d_strtold.U>:

This variable conditionally defines the C<HAS_STRTOLD> symbol, which
indicates to the C program that the strtold() routine is available.

=item C<d_strtold_l>

From F<d_strtold_l.U>:

This variable conditionally defines the C<HAS_STRTOLD_L> symbol, which
indicates to the C program that the strtold_l() routine is available.

=item C<d_strtoll>

From F<d_strtoll.U>:

This variable conditionally defines the C<HAS_STRTOLL> symbol, which
indicates to the C program that the strtoll() routine is available.

=item C<d_strtoq>

From F<d_strtoq.U>:

This variable conditionally defines the C<HAS_STRTOQ> symbol, which
indicates to the C program that the strtoq() routine is available.

=item C<d_strtoul>

From F<d_strtoul.U>:

This variable conditionally defines the C<HAS_STRTOUL> symbol, which
indicates to the C program that the strtoul() routine is available
to provide conversion of strings to unsigned long.

=item C<d_strtoull>

From F<d_strtoull.U>:

This variable conditionally defines the C<HAS_STRTOULL> symbol, which
indicates to the C program that the strtoull() routine is available.

=item C<d_strtouq>

From F<d_strtouq.U>:

This variable conditionally defines the C<HAS_STRTOUQ> symbol, which
indicates to the C program that the strtouq() routine is available.

=item C<d_strxfrm>

From F<d_strxfrm.U>:

This variable conditionally defines C<HAS_STRXFRM> if strxfrm() is
available to transform strings.

=item C<d_strxfrm_l>

From F<d_strxfrm_l.U>:

This variable conditionally defines C<HAS_STRXFRM_L> if strxfrm_l() is
available to transform strings.

=item C<d_suidsafe>

From F<d_dosuid.U>:

This variable conditionally defines C<SETUID_SCRIPTS_ARE_SECURE_NOW>
if setuid scripts can be secure.  This test looks in F</dev/fd/>.

=item C<d_symlink>

From F<d_symlink.U>:

This variable conditionally defines the C<HAS_SYMLINK> symbol, which
indicates to the C program that the symlink() routine is available
to create symbolic links.

=item C<d_syscall>

From F<d_syscall.U>:

This variable conditionally defines C<HAS_SYSCALL> if syscall() is
available call arbitrary system calls.

=item C<d_syscallproto>

From F<d_syscallproto.U>:

This variable conditionally defines the C<HAS_SYSCALL_PROTO> symbol,
which indicates to the C program that the system provides
a prototype for the syscall() function.  Otherwise, it is
up to the program to supply one.

=item C<d_sysconf>

From F<d_sysconf.U>:

This variable conditionally defines the C<HAS_SYSCONF> symbol, which
indicates to the C program that the sysconf() routine is available
to determine system related limits and options.

=item C<d_sysernlst>

From F<d_strerror.U>:

This variable conditionally defines C<HAS_SYS_ERRNOLIST> if sys_errnolist[]
is available to translate error numbers to the symbolic name.

=item C<d_syserrlst>

From F<d_strerror.U>:

This variable conditionally defines C<HAS_SYS_ERRLIST> if sys_errlist[] is
available to translate error numbers to strings.

=item C<d_system>

From F<d_system.U>:

This variable conditionally defines C<HAS_SYSTEM> if system() is
available to issue a shell command.

=item C<d_tcgetpgrp>

From F<d_tcgtpgrp.U>:

This variable conditionally defines the C<HAS_TCGETPGRP> symbol, which
indicates to the C program that the tcgetpgrp() routine is available.
to get foreground process group C<ID>.

=item C<d_tcsetpgrp>

From F<d_tcstpgrp.U>:

This variable conditionally defines the C<HAS_TCSETPGRP> symbol, which
indicates to the C program that the tcsetpgrp() routine is available
to set foreground process group C<ID>.

=item C<d_telldir>

From F<d_readdir.U>:

This variable conditionally defines C<HAS_TELLDIR> if telldir() is
available.

=item C<d_telldirproto>

From F<d_telldirproto.U>:

This variable conditionally defines the C<HAS_TELLDIR_PROTO> symbol,
which indicates to the C program that the system provides
a prototype for the telldir() function.  Otherwise, it is
up to the program to supply one.

=item C<d_tgamma>

From F<d_tgamma.U>:

This variable conditionally defines the C<HAS_TGAMMA> symbol, which
indicates to the C program that the tgamma() routine is available
for the gamma function.  See also d_lgamma.

=item C<d_thread_local>

From F<d_thread_local.U>:

This variable conditionally defines the C<PERL_THREAD_LOCAL> symbol. In
turn that gives a linkage specification for thread-local storage.

=item C<d_thread_safe_nl_langinfo_l>

From F<d_nl_langinfo_l.U>:

This variable contains the eventual value of the
C<HAS_THREAD_SAFE_NL_LANGINFO_L> symbol, which indicates if the
nl_langinfo_l() function exists and is thread-safe.

=item C<d_time>

From F<d_time.U>:

This variable conditionally defines the C<HAS_TIME> symbol, which indicates
that the time() routine exists.  The time() routine is normally
provided on C<UNIX> systems.

=item C<d_timegm>

From F<d_timegm.U>:

This variable conditionally defines the C<HAS_TIMEGM> symbol, which
indicates to the C program that the timegm () routine is available.

=item C<d_times>

From F<d_times.U>:

This variable conditionally defines the C<HAS_TIMES> symbol, which indicates
that the times() routine exists.  The times() routine is normally
provided on C<UNIX> systems. You may have to include <sys/times.h>.

=item C<d_tm_tm_gmtoff>

From F<i_time.U>:

This variable conditionally defines C<HAS_TM_TM_GMTOFF>, which indicates
to the C program that the struct tm has the tm_gmtoff field.

=item C<d_tm_tm_zone>

From F<i_time.U>:

This variable conditionally defines C<HAS_TM_TM_ZONE>, which indicates
to the C program that the struct tm has the tm_zone field.

=item C<d_tmpnam_r>

From F<d_tmpnam_r.U>:

This variable conditionally defines the C<HAS_TMPNAM_R> symbol,
which indicates to the C program that the tmpnam_r()
routine is available.

=item C<d_towlower>

From F<d_towlower.U>:

This variable conditionally defines the C<HAS_TOWLOWER> symbol, which
indicates to the C program that the towlower() routine is available.

=item C<d_towupper>

From F<d_towupper.U>:

This variable conditionally defines the C<HAS_TOWUPPER> symbol, which
indicates to the C program that the towupper() routine is available.

=item C<d_trunc>

From F<d_trunc.U>:

This variable conditionally defines the C<HAS_TRUNC> symbol, which
indicates to the C program that the trunc() routine is available
to round doubles towards zero.

=item C<d_truncate>

From F<d_truncate.U>:

This variable conditionally defines C<HAS_TRUNCATE> if truncate() is
available to truncate files.

=item C<d_truncl>

From F<d_truncl.U>:

This variable conditionally defines the C<HAS_TRUNCL> symbol, which
indicates to the C program that the truncl() routine is available
to round long doubles towards zero. If copysignl is also present,
we can emulate modfl.

=item C<d_ttyname_r>

From F<d_ttyname_r.U>:

This variable conditionally defines the C<HAS_TTYNAME_R> symbol,
which indicates to the C program that the ttyname_r()
routine is available.

=item C<d_tzname>

From F<d_tzname.U>:

This variable conditionally defines C<HAS_TZNAME> if tzname[] is
available to access timezone names.

=item C<d_u32align>

From F<d_u32align.U>:

This variable tells whether you must access character data
through U32-aligned pointers.

=item C<d_ualarm>

From F<d_ualarm.U>:

This variable conditionally defines the C<HAS_UALARM> symbol, which
indicates to the C program that the ualarm() routine is available.

=item C<d_umask>

From F<d_umask.U>:

This variable conditionally defines the C<HAS_UMASK> symbol, which
indicates to the C program that the umask() routine is available.
to set and get the value of the file creation mask.

=item C<d_uname>

From F<d_gethname.U>:

This variable conditionally defines the C<HAS_UNAME> symbol, which
indicates to the C program that the uname() routine may be
used to derive the host name.

=item C<d_union_semun>

From F<d_union_semun.U>:

This variable conditionally defines C<HAS_UNION_SEMUN> if the
union semun is defined by including <sys/sem.h>.

=item C<d_unlinkat>

From F<d_fsat.U>:

This variable conditionally defines the C<HAS_UNLINKAT> symbol, which
indicates the C<POSIX> unlinkat() function isavailable.

=item C<d_unordered>

From F<d_unordered.U>:

This variable conditionally defines the C<HAS_UNORDERED> symbol, which
indicates to the C program that the unordered() routine is available.

=item C<d_unsetenv>

From F<d_unsetenv.U>:

This variable conditionally defines the C<HAS_UNSETENV> symbol, which
indicates to the C program that the unsetenv () routine is available.

=item C<d_uselocale>

From F<d_newlocale.U>:

This variable conditionally defines the C<HAS_USELOCALE> symbol, which
indicates to the C program that the uselocale() routine is available
to set the current locale for the calling thread.

=item C<d_usleep>

From F<d_usleep.U>:

This variable conditionally defines C<HAS_USLEEP> if usleep() is
available to do high granularity sleeps.

=item C<d_usleepproto>

From F<d_usleepproto.U>:

This variable conditionally defines the C<HAS_USLEEP_PROTO> symbol,
which indicates to the C program that the system provides
a prototype for the usleep() function.  Otherwise, it is
up to the program to supply one.

=item C<d_ustat>

From F<d_ustat.U>:

This variable conditionally defines C<HAS_USTAT> if ustat() is
available to query file system statistics by dev_t.

=item C<d_vendorarch>

From F<vendorarch.U>:

This variable conditionally defined C<PERL_VENDORARCH>.

=item C<d_vendorbin>

From F<vendorbin.U>:

This variable conditionally defines C<PERL_VENDORBIN>.

=item C<d_vendorlib>

From F<vendorlib.U>:

This variable conditionally defines C<PERL_VENDORLIB>.

=item C<d_vendorscript>

From F<vendorscript.U>:

This variable conditionally defines C<PERL_VENDORSCRIPT>.

=item C<d_vfork>

From F<d_vfork.U>:

This variable conditionally defines the C<HAS_VFORK> symbol, which
indicates the vfork() routine is available.

=item C<d_void_closedir>

From F<d_closedir.U>:

This variable conditionally defines C<VOID_CLOSEDIR> if closedir()
does not return a value.

=item C<d_voidsig>

From F<d_voidsig.U>:

This variable conditionally defines C<VOIDSIG> if this system
declares "void (*signal(...))()" in F<signal.h>.  The old way was to
declare it as "int (*signal(...))()".

=item C<d_voidtty>

From F<i_sysioctl.U>:

This variable conditionally defines C<USE_IOCNOTTY> to indicate that the
ioctl() call with C<TIOCNOTTY> should be used to void tty association.
Otherwise (on C<USG> probably), it is enough to close the standard file
descriptors and do a setpgrp().

=item C<d_vsnprintf>

From F<d_snprintf.U>:

This variable conditionally defines the C<HAS_VSNPRINTF> symbol, which
indicates to the C program that the vsnprintf () library function
is available.

=item C<d_wait4>

From F<d_wait4.U>:

This variable conditionally defines the HAS_WAIT4 symbol, which
indicates the wait4() routine is available.

=item C<d_waitpid>

From F<d_waitpid.U>:

This variable conditionally defines C<HAS_WAITPID> if waitpid() is
available to wait for child process.

=item C<d_wcrtomb>

From F<d_wcrtomb.U>:

This variable conditionally defines the C<HAS_WCRTOMB> symbol if the
wcrtomb() routine is available to be used to convert a wide character
into a multi-byte character.

=item C<d_wcscmp>

From F<d_wcscmp.U>:

This variable conditionally defines the C<HAS_WCSCMP> symbol if the
wcscmp() routine is available and can be used to compare wide
character strings.

=item C<d_wcstombs>

From F<d_wcstombs.U>:

This variable conditionally defines the C<HAS_WCSTOMBS> symbol, which
indicates to the C program that the wcstombs() routine is available
to convert wide character strings to multibyte strings.

=item C<d_wcsxfrm>

From F<d_wcsxfrm.U>:

This variable conditionally defines the C<HAS_WCSXFRM> symbol if the
wcsxfrm() routine is available and can be used to compare wide
character strings.

=item C<d_wctomb>

From F<d_wctomb.U>:

This variable conditionally defines the C<HAS_WCTOMB> symbol, which
indicates to the C program that the wctomb() routine is available
to convert a wide character to a multibyte.

=item C<d_writev>

From F<d_writev.U>:

This variable conditionally defines the C<HAS_WRITEV> symbol, which
indicates to the C program that the writev() routine is available.

=item C<d_xenix>

From F<Guess.U>:

This variable conditionally defines the symbol C<XENIX>, which alerts
the C program that it runs under Xenix.

=item C<date>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the date program.  After Configure runs,
the value is reset to a plain C<date> and is not useful.

=item C<db_hashtype>

From F<i_db.U>:

This variable contains the type of the hash structure element
in the <db.h> header file.  In older versions of C<DB>, it was
int, while in newer ones it is u_int32_t.

=item C<db_prefixtype>

From F<i_db.U>:

This variable contains the type of the prefix structure element
in the <db.h> header file.  In older versions of C<DB>, it was
int, while in newer ones it is size_t.

=item C<db_version_major>

From F<i_db.U>:

This variable contains the major version number of
Berkeley C<DB> found in the <db.h> header file.

=item C<db_version_minor>

From F<i_db.U>:

This variable contains the minor version number of
Berkeley C<DB> found in the <db.h> header file.
For C<DB> version 1 this is always 0.

=item C<db_version_patch>

