=for hackers
Found in file pp.h

=over 4

=item C<SPAGAIN>
X<SPAGAIN>

Refetch the stack pointer.  Used after a callback.  See L<perlcall>.

=over 3

   SPAGAIN;

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<SSNEW>

=item C<SSNEWa>

=item C<SSNEWat>

=item C<SSNEWt>
X<SSNEW>X<SSNEWa>X<SSNEWat>X<SSNEWt>

These each temporarily allocate data on the savestack, returning an SSize_t
index into the savestack, because a pointer would get broken if the savestack
is moved on reallocation.  Use L</C<SSPTR>> to convert the returned index into
a pointer.

The forms differ in that plain C<SSNEW> allocates C<size> bytes;
C<SSNEWt> and C<SSNEWat> allocate C<size> objects, each of which is type
C<type>;
and <SSNEWa> and C<SSNEWat> make sure to align the new data to an C<align>
boundary.  The most useful value for the alignment is likely to be
L</C<MEM_ALIGNBYTES>>.  The alignment will be preserved through savestack
reallocation B<only> if realloc returns data aligned to a size divisible by
"align"!

=over 3

 SSize_t  SSNEW  (Size_t size)
 SSize_t  SSNEWa (Size_t size, Size_t align)
 SSize_t  SSNEWat(Size_t size, type, Size_t align)
 SSize_t  SSNEWt (Size_t size, type)

=back

=back

=for hackers
Found in file scope.h

=over 4

=item C<SSPTR>

=item C<SSPTRt>
X<SSPTR>X<SSPTRt>

These convert the C<index> returned by L/<C<SSNEW>> and kin into actual pointers.

The difference is that C<SSPTR> casts the result to C<type>, and C<SSPTRt>
casts it to a pointer of that C<type>.

=over 3

 type    SSPTR (SSize_t index, type)
 type *  SSPTRt(SSize_t index, type)

=back

=back

=for hackers
Found in file scope.h

=over 4

=item C<TARG>
X<TARG>

C<TARG> is short for "target".  It is an entry in the pad that an OPs
C<op_targ> refers to.  It is scratchpad space, often used as a return
value for the OP, but some use it for other purposes.

=over 3

   TARG;

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<TOPs>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<XPUSHi>
X<XPUSHi>

Push an integer onto the stack, extending the stack if necessary.  Handles
'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be called to
declare it.  Do not call multiple C<TARG>-oriented macros to return lists
from XSUB's - see C<L</mXPUSHi>> instead.  See also C<L</PUSHi>> and
C<L</mPUSHi>>.

=over 3

 void  XPUSHi(IV iv)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<XPUSHmortal>
X<XPUSHmortal>

Push a new mortal SV onto the stack, extending the stack if necessary.
Does not use C<TARG>.  See also C<L</XPUSHs>>, C<L</PUSHmortal>> and
C<L</PUSHs>>.

=over 3

 void  XPUSHmortal

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<XPUSHn>
X<XPUSHn>

Push a double onto the stack, extending the stack if necessary.  Handles
'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be called to
declare it.  Do not call multiple C<TARG>-oriented macros to return lists
from XSUB's - see C<L</mXPUSHn>> instead.  See also C<L</PUSHn>> and
C<L</mPUSHn>>.

=over 3

 void  XPUSHn(NV nv)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<XPUSHp>
X<XPUSHp>

Push a string onto the stack, extending the stack if necessary.  The C<len>
indicates the length of the string.  Handles 'set' magic.  Uses C<TARG>, so
C<dTARGET> or C<dXSTARG> should be called to declare it.  Do not call
multiple C<TARG>-oriented macros to return lists from XSUB's - see
C<L</mXPUSHp>> instead.  See also C<L</PUSHp>> and C<L</mPUSHp>>.

=over 3

 void  XPUSHp(char* str, STRLEN len)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<XPUSHpvs>
X<XPUSHpvs>

A variation on C<XPUSHp> that takes a literal string and calculates its size
directly.

=over 3

 void  XPUSHpvs("literal string")

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<XPUSHs>
X<XPUSHs>

Push an SV onto the stack, extending the stack if necessary.  Does not
handle 'set' magic.  Does not use C<TARG>.  See also C<L</XPUSHmortal>>,
C<PUSHs> and C<PUSHmortal>.

=over 3

 void  XPUSHs(SV* sv)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<XPUSHu>
X<XPUSHu>

Push an unsigned integer onto the stack, extending the stack if necessary.
Handles 'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be
called to declare it.  Do not call multiple C<TARG>-oriented macros to
return lists from XSUB's - see C<L</mXPUSHu>> instead.  See also C<L</PUSHu>> and
C<L</mPUSHu>>.

=over 3

 void  XPUSHu(UV uv)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<XS_APIVERSION_BOOTCHECK>
X<XS_APIVERSION_BOOTCHECK>

Macro to verify that the perl api version an XS module has been compiled against
matches the api version of the perl interpreter it's being loaded into.

=over 3

   XS_APIVERSION_BOOTCHECK;

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XSRETURN>
X<XSRETURN>

Return from XSUB, indicating number of items on the stack.  This is usually
handled by C<xsubpp>.

=over 3

 void  XSRETURN(int nitems)

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XSRETURN_EMPTY>
X<XSRETURN_EMPTY>

Return an empty list from an XSUB immediately.

=over 3

   XSRETURN_EMPTY;

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XSRETURN_IV>
X<XSRETURN_IV>

Return an integer from an XSUB immediately.  Uses C<XST_mIV>.

=over 3

 void  XSRETURN_IV(IV iv)

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XSRETURN_NO>
X<XSRETURN_NO>

Return C<&PL_sv_no> from an XSUB immediately.  Uses C<XST_mNO>.

=over 3

   XSRETURN_NO;

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XSRETURN_NV>
X<XSRETURN_NV>

Return a double from an XSUB immediately.  Uses C<XST_mNV>.

=over 3

 void  XSRETURN_NV(NV nv)

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XSRETURN_PV>
X<XSRETURN_PV>

Return a copy of a string from an XSUB immediately.  Uses C<XST_mPV>.

=over 3

 void  XSRETURN_PV(char* str)

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XSRETURN_UNDEF>
X<XSRETURN_UNDEF>

Return C<&PL_sv_undef> from an XSUB immediately.  Uses C<XST_mUNDEF>.

=over 3

   XSRETURN_UNDEF;

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XSRETURN_UV>
X<XSRETURN_UV>

Return an integer from an XSUB immediately.  Uses C<XST_mUV>.

=over 3

 void  XSRETURN_UV(IV uv)

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XSRETURN_YES>
X<XSRETURN_YES>

Return C<&PL_sv_yes> from an XSUB immediately.  Uses C<XST_mYES>.

=over 3

   XSRETURN_YES;

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XST_mIV>
X<XST_mIV>

Place an integer into the specified position C<pos> on the stack.  The
value is stored in a new mortal SV.

=over 3

 void  XST_mIV(int pos, IV iv)

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XST_mNO>
X<XST_mNO>

Place C<&PL_sv_no> into the specified position C<pos> on the
stack.

=over 3

 void  XST_mNO(int pos)

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XST_mNV>
X<XST_mNV>

Place a double into the specified position C<pos> on the stack.  The value
is stored in a new mortal SV.

=over 3

 void  XST_mNV(int pos, NV nv)

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XST_mPV>
X<XST_mPV>

Place a copy of a string into the specified position C<pos> on the stack.
The value is stored in a new mortal SV.

=over 3

 void  XST_mPV(int pos, char* str)

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XST_mUNDEF>
X<XST_mUNDEF>

Place C<&PL_sv_undef> into the specified position C<pos> on the
stack.

=over 3

 void  XST_mUNDEF(int pos)

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XST_mUV>
X<XST_mUV>

Place an unsigned integer into the specified position C<pos> on the stack.  The
value is stored in a new mortal SV.

=over 3

 void  XST_mUV(int pos, UV uv)

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XST_mYES>
X<XST_mYES>

Place C<&PL_sv_yes> into the specified position C<pos> on the
stack.

=over 3

 void  XST_mYES(int pos)

=back

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XS_VERSION>
X<XS_VERSION>

The version identifier for an XS module.  This is usually
handled automatically by C<ExtUtils::MakeMaker>.  See
C<L</XS_VERSION_BOOTCHECK>>.

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<XS_VERSION_BOOTCHECK>
X<XS_VERSION_BOOTCHECK>

Macro to verify that a PM module's C<$VERSION> variable matches the XS
module's C<XS_VERSION> variable.  This is usually handled automatically by
C<xsubpp>.  See L<perlxs/"The VERSIONCHECK: Keyword">.

=over 3

   XS_VERSION_BOOTCHECK;

=back

=back

=for hackers
Found in file XSUB.h

=head1 String Handling

See also C<L</Unicode Support>>.


=over 4

=item C<CAT2>
X<CAT2>

This macro concatenates 2 tokens together.

=over 3

 token  CAT2(token x, token y)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<Copy>

=item C<CopyD>
X<Copy>X<CopyD>

The XSUB-writer's interface to the C C<memcpy> function.  The C<src> is the
source, C<dest> is the destination, C<nitems> is the number of items, and
C<type> is the type.  May fail on overlapping copies.  See also C<L</Move>>.

C<CopyD> is like C<Copy> but returns C<dest>.  Useful
for encouraging compilers to tail-call
optimise.

=over 3

 void    Copy (void* src, void* dest, int nitems, type)
 void *  CopyD(void* src, void* dest, int nitems, type)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<delimcpy>
X<delimcpy>

Copy a source buffer to a destination buffer, stopping at (but not including)
the first occurrence in the source of an unescaped (defined below) delimiter
byte, C<delim>.  The source is the bytes between S<C<from> and C<from_end> -
1>.  Similarly, the dest is C<to> up to C<to_end>.

The number of bytes copied is written to C<*retlen>.

Returns the position of the first uncopied C<delim> in the C<from> buffer, but
if there is no such occurrence before C<from_end>, then C<from_end> is returned,
and the entire buffer S<C<from> .. C<from_end> - 1> is copied.

If there is room in the destination available after the copy, an extra
terminating safety C<NUL> byte is appended (not included in the returned
length).

The error case is if the destination buffer is not large enough to accommodate
everything that should be copied.  In this situation, a value larger than
S<C<to_end> - C<to>> is written to C<*retlen>, and as much of the source as
fits will be written to the destination.  Not having room for the safety C<NUL>
is not considered an error.

In the following examples, let C<x> be the delimiter, and C<0> represent a C<NUL>
byte (B<NOT> the digit C<0>).  Then we would have

  Source     Destination
 abcxdef        abc0

provided the destination buffer is at least 4 bytes long.

An escaped delimiter is one which is immediately preceded by a single
backslash.  Escaped delimiters are copied, and the copy continues past the
delimiter; the backslash is not copied:

  Source       Destination
 abc\xdef       abcxdef0

(provided the destination buffer is at least 8 bytes long).

It's actually somewhat more complicated than that. A sequence of any odd number
of backslashes escapes the following delimiter, and the copy continues with
exactly one of the backslashes stripped.

     Source         Destination
     abc\xdef          abcxdef0
   abc\\\xdef        abc\\xdef0
 abc\\\\\xdef      abc\\\\xdef0

(as always, if the destination is large enough)

An even number of preceding backslashes does not escape the delimiter, so that
the copy stops just before it, and includes all the backslashes (no stripping;
zero is considered even):

      Source         Destination
      abcxdef          abc0
    abc\\xdef          abc\\0
  abc\\\\xdef          abc\\\\0

=over 3

 char *  delimcpy(char *to, const char *to_end, const char *from,
                  const char *from_end, const int delim,
                  I32 *retlen)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<do_join>
X<do_join>

This performs a Perl L<C<join>|perlfunc/join>, placing the joined output
into C<sv>.

The elements to join are in SVs, stored in a C array of pointers to SVs, from
C<**mark> to S<C<**sp - 1>>.  Hence C<*mark> is a reference to the first SV.
Each SV will be coerced into a PV if not one already.

C<delim> contains the string (or coerced into a string) that is to separate
each of the joined elements.

If any component is in UTF-8, the result will be as well, and all non-UTF-8
components will be converted to UTF-8 as necessary.

Magic and tainting are handled.

=over 3

 void  do_join(SV *sv, SV *delim, SV **mark, SV **sp)

=back

=back

=for hackers
Found in file doop.c

=over 4

=item C<do_sprintf>
X<do_sprintf>

This performs a Perl L<C<sprintf>|perlfunc/sprintf> placing the string output
into C<sv>.

The elements to format are in SVs, stored in a C array of pointers to SVs of
length C<len>> and beginning at C<**sarg>.  The element referenced by C<*sarg>
is the format.

Magic and tainting are handled.

=over 3

 void  do_sprintf(SV *sv, SSize_t len, SV **sarg)

=back

=back

=for hackers
Found in file doop.c

=over 4

=item C<fbm_compile>
X<fbm_compile>

Analyzes the string in order to make fast searches on it using C<fbm_instr()>
-- the Boyer-Moore algorithm.

=over 3

 void  fbm_compile(SV *sv, U32 flags)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<fbm_instr>
X<fbm_instr>

Returns the location of the SV in the string delimited by C<big> and
C<bigend> (C<bigend>) is the char following the last char).
It returns C<NULL> if the string can't be found.  The C<sv>
does not have to be C<fbm_compiled>, but the search will not be as fast
then.

=over 3

 char *  fbm_instr(unsigned char *big, unsigned char *bigend,
                   SV *littlestr, U32 flags)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<foldEQ>
X<foldEQ>

Returns true if the leading C<len> bytes of the strings C<s1> and C<s2> are the
same
case-insensitively; false otherwise.  Uppercase and lowercase ASCII range bytes
match themselves and their opposite case counterparts.  Non-cased and non-ASCII
range bytes match only themselves.

=over 3

 I32  foldEQ(const char *a, const char *b, I32 len)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<ibcmp>
X<ibcmp>

This is a synonym for S<C<(! foldEQ())>>

=over 3

 I32  ibcmp(const char *a, const char *b, I32 len)

=back

=back

=for hackers
Found in file util.h

=over 4

=item C<ibcmp_locale>
X<ibcmp_locale>

This is a synonym for S<C<(! foldEQ_locale())>>

=over 3

 I32  ibcmp_locale(const char *a, const char *b, I32 len)

=back

=back

=for hackers
Found in file util.h

=over 4

=item C<ibcmp_utf8>
X<ibcmp_utf8>

This is a synonym for S<C<(! foldEQ_utf8())>>

=over 3

 I32  ibcmp_utf8(const char *s1, char **pe1, UV l1, bool u1,
                 const char *s2, char **pe2, UV l2, bool u2)

=back

=back

=for hackers
Found in file util.h

=over 4

=item C<instr>
X<instr>

Same as L<strstr(3)>, which finds and returns a pointer to the first occurrence
of the NUL-terminated substring C<little> in the NUL-terminated string C<big>,
returning NULL if not found.  The terminating NUL bytes are not compared.

=over 3

 char *  instr(const char *big, const char *little)

=back

=back

=for hackers
Found in file util.h

=over 4

=item C<memCHRs>
X<memCHRs>

Returns the position of the first occurrence of the byte C<c> in the literal
string C<"list">, or NULL if C<c> doesn't appear in C<"list">.  All bytes are
treated as unsigned char.  Thus this macro can be used to determine if C<c> is
in a set of particular characters.  Unlike L<strchr(3)>, it works even if C<c>
is C<NUL> (and the set doesn't include C<NUL>).

=over 3

 bool  memCHRs("list", char c)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<memEQ>
X<memEQ>

Test two buffers (which may contain embedded C<NUL> characters, to see if they
are equal.  The C<len> parameter indicates the number of bytes to compare.
Returns true or false.  It is undefined behavior if either of the buffers
doesn't contain at least C<len> bytes.

=over 3

 bool  memEQ(char* s1, char* s2, STRLEN len)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<memEQs>
X<memEQs>

Like L</memEQ>, but the second string is a literal enclosed in double quotes,
C<l1> gives the number of bytes in C<s1>.
Returns true or false.

=over 3

 bool  memEQs(char* s1, STRLEN l1, "s2")

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<memNE>
X<memNE>

