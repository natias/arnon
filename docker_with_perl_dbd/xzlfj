
=over 4

=item C<apply_builtin_cv_attributes>
X<apply_builtin_cv_attributes>

Given an OP_LIST containing attribute definitions, filter it for known builtin
attributes to apply to the cv, returning a possibly-smaller list containing
just the remaining ones.

=over 3

 OP *  apply_builtin_cv_attributes(CV *cv, OP *attrlist)

=back

=back

=for hackers
Found in file toke.c

=over 4

=item C<filter_add>

Described in L<perlfilter>.

=over 3

 SV *  filter_add(filter_t funcp, SV *datasv)

=back

=back

=for hackers
Found in file pod/perlfilter.pod

=over 4

=item C<filter_del>
X<filter_del>

Delete most recently added instance of the filter function argument

=over 3

 void  filter_del(filter_t funcp)

=back

=back

=for hackers
Found in file toke.c

=over 4

=item C<filter_read>

Described in L<perlfilter>.

=over 3

 I32  filter_read(int idx, SV *buf_sv, int maxlen)

=back

=back

=for hackers
Found in file pod/perlfilter.pod

=over 4

=item C<scan_vstring>
X<scan_vstring>

Returns a pointer to the next character after the parsed
vstring, as well as updating the passed in sv.

Function must be called like

        sv = sv_2mortal(newSV(5));
        s = scan_vstring(s,e,sv);

where s and e are the start and end of the string.
The sv should already be large enough to store the vstring
passed in, for performance reasons.

This function may croak if fatal warnings are enabled in the
calling scope, hence the sv_2mortal in the example (to prevent
a leak).  Make sure to do SvREFCNT_inc afterwards if you use
sv_2mortal.

=over 3

 char *  scan_vstring(const char *s, const char * const e, SV *sv)

=back

=back

=for hackers
Found in file toke.c

=over 4

=item C<start_subparse>
X<start_subparse>

Set things up for parsing a subroutine.

If C<is_format> is non-zero, the input is to be considered a format sub
(a specialised sub used to implement perl's C<format> feature); else a
normal C<sub>.

C<flags> are added to the flags for C<PL_compcv>.  C<flags> may include the
C<CVf_IsMETHOD> bit, which causes the new subroutine to be a method.

This returns the value of C<PL_savestack_ix> that was in effect upon entry to
the function;

=over 3

 I32  start_subparse(I32 is_format, U32 flags)

=back

=back

=for hackers
Found in file toke.c

=head1 Stack Manipulation Macros

=over 4

=item C<dMARK>
X<dMARK>

Declare a stack marker variable, C<mark>, for the XSUB.  See C<L</MARK>> and
C<L</dORIGMARK>>.

=over 3

   dMARK;

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<dORIGMARK>
X<dORIGMARK>

Saves the original stack mark for the XSUB.  See C<L</ORIGMARK>>.

=over 3

   dORIGMARK;

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<dSP>
X<dSP>

Declares a local copy of perl's stack pointer for the XSUB, available via
the C<SP> macro.  See C<L</SP>>.

=over 3

   dSP;

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<dTARGET>
X<dTARGET>

Declare that this function uses C<TARG>, and initializes it

=over 3

   dTARGET;

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<EXTEND>
X<EXTEND>

Used to extend the argument stack for an XSUB's return values.  Once
used, guarantees that there is room for at least C<nitems> to be pushed
onto the stack.

=over 3

 void  EXTEND(SP, SSize_t nitems)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<MARK>
X<MARK>

Stack marker variable for the XSUB.  See C<L</dMARK>>.

=back

=for hackers
Found in file pp.h

=over 4

=item C<mPUSHi>
X<mPUSHi>

Push an integer onto the stack.  The stack must have room for this element.
Does not use C<TARG>.  See also C<L</PUSHi>>, C<L</mXPUSHi>> and C<L</XPUSHi>>.

=over 3

 void  mPUSHi(IV iv)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<mPUSHn>
X<mPUSHn>

Push a double onto the stack.  The stack must have room for this element.
Does not use C<TARG>.  See also C<L</PUSHn>>, C<L</mXPUSHn>> and C<L</XPUSHn>>.

=over 3

 void  mPUSHn(NV nv)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<mPUSHp>
X<mPUSHp>

Push a string onto the stack.  The stack must have room for this element.
The C<len> indicates the length of the string.  Does not use C<TARG>.
See also C<L</PUSHp>>, C<L</mXPUSHp>> and C<L</XPUSHp>>.

=over 3

 void  mPUSHp(char* str, STRLEN len)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<mPUSHpvs>
X<mPUSHpvs>

A variation on C<mPUSHp> that takes a literal string and calculates its size
directly.

=over 3

 void  mPUSHpvs("literal string")

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<mPUSHs>
X<mPUSHs>

Push an SV onto the stack and mortalizes the SV.  The stack must have room
for this element.  Does not use C<TARG>.  See also C<L</PUSHs>> and
C<L</mXPUSHs>>.

=over 3

 void  mPUSHs(SV* sv)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<mPUSHu>
X<mPUSHu>

Push an unsigned integer onto the stack.  The stack must have room for this
element.  Does not use C<TARG>.  See also C<L</PUSHu>>, C<L</mXPUSHu>> and
C<L</XPUSHu>>.

=over 3

 void  mPUSHu(UV uv)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<mXPUSHi>
X<mXPUSHi>

Push an integer onto the stack, extending the stack if necessary.
Does not use C<TARG>.  See also C<L</XPUSHi>>, C<L</mPUSHi>> and C<L</PUSHi>>.

=over 3

 void  mXPUSHi(IV iv)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<mXPUSHn>
X<mXPUSHn>

Push a double onto the stack, extending the stack if necessary.
Does not use C<TARG>.  See also C<L</XPUSHn>>, C<L</mPUSHn>> and C<L</PUSHn>>.

=over 3

 void  mXPUSHn(NV nv)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<mXPUSHp>
X<mXPUSHp>

Push a string onto the stack, extending the stack if necessary.  The C<len>
indicates the length of the string.  Does not use C<TARG>.  See also
C<L</XPUSHp>>, C<mPUSHp> and C<PUSHp>.

=over 3

 void  mXPUSHp(char* str, STRLEN len)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<mXPUSHpvs>
X<mXPUSHpvs>

A variation on C<mXPUSHp> that takes a literal string and calculates its size
directly.

=over 3

 void  mXPUSHpvs("literal string")

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<mXPUSHs>
X<mXPUSHs>

Push an SV onto the stack, extending the stack if necessary and mortalizes
the SV.  Does not use C<TARG>.  See also C<L</XPUSHs>> and C<L</mPUSHs>>.

=over 3

 void  mXPUSHs(SV* sv)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<mXPUSHu>
X<mXPUSHu>

Push an unsigned integer onto the stack, extending the stack if necessary.
Does not use C<TARG>.  See also C<L</XPUSHu>>, C<L</mPUSHu>> and C<L</PUSHu>>.

=over 3

 void  mXPUSHu(UV uv)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<newXSproto>
X<newXSproto>

Used by C<xsubpp> to hook up XSUBs as Perl subs.  Adds Perl prototypes to
the subs.

=back

=for hackers
Found in file XSUB.h

=over 4

=item C<ORIGMARK>
X<ORIGMARK>

The original stack mark for the XSUB.  See C<L</dORIGMARK>>.

=back

=for hackers
Found in file pp.h

=over 4

=item C<PL_markstack>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PL_markstack_ptr>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PL_savestack>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PL_savestack_ix>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PL_scopestack>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PL_scopestack_ix>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PL_scopestack_name>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PL_stack_base>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PL_stack_sp>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PL_tmps_floor>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PL_tmps_ix>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PL_tmps_stack>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<POPi>
X<POPi>

Pops an integer off the stack.

=over 3

 IV  POPi

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<POPl>
X<POPl>

Pops a long off the stack.

=over 3

 long  POPl

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<POPn>
X<POPn>

Pops a double off the stack.

=over 3

 NV  POPn

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<POPp>
X<POPp>

Pops a string off the stack.

=over 3

 char*  POPp

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<POPpbytex>
X<POPpbytex>

Pops a string off the stack which must consist of bytes i.e. characters < 256.

=over 3

 char*  POPpbytex

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<POPpx>
X<POPpx>

Pops a string off the stack.  Identical to POPp.  There are two names for
historical reasons.

=over 3

 char*  POPpx

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<POPs>
X<POPs>

Pops an SV off the stack.

=over 3

 SV*  POPs

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<POPu>
X<POPu>

Pops an unsigned integer off the stack.

=over 3

 UV  POPu

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<POPul>
X<POPul>

Pops an unsigned long off the stack.

=over 3

 long  POPul

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<PUSHi>
X<PUSHi>

Push an integer onto the stack.  The stack must have room for this element.
Handles 'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be
called to declare it.  Do not call multiple C<TARG>-oriented macros to 
return lists from XSUB's - see C<L</mPUSHi>> instead.  See also C<L</XPUSHi>>
and C<L</mXPUSHi>>.

=over 3

 void  PUSHi(IV iv)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<PUSHMARK>
X<PUSHMARK>

Opening bracket for arguments on a callback.  See C<L</PUTBACK>> and
L<perlcall>.

=over 3

 void  PUSHMARK(SP)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<PUSHmortal>
X<PUSHmortal>

Push a new mortal SV onto the stack.  The stack must have room for this
element.  Does not use C<TARG>.  See also C<L</PUSHs>>, C<L</XPUSHmortal>> and
C<L</XPUSHs>>.

=over 3

 void  PUSHmortal

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<PUSHn>
X<PUSHn>

Push a double onto the stack.  The stack must have room for this element.
Handles 'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be
called to declare it.  Do not call multiple C<TARG>-oriented macros to
return lists from XSUB's - see C<L</mPUSHn>> instead.  See also C<L</XPUSHn>>
and C<L</mXPUSHn>>.

=over 3

 void  PUSHn(NV nv)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<PUSHp>
X<PUSHp>

Push a string onto the stack.  The stack must have room for this element.
The C<len> indicates the length of the string.  Handles 'set' magic.  Uses
C<TARG>, so C<dTARGET> or C<dXSTARG> should be called to declare it.  Do not
call multiple C<TARG>-oriented macros to return lists from XSUB's - see
C<L</mPUSHp>> instead.  See also C<L</XPUSHp>> and C<L</mXPUSHp>>.

=over 3

 void  PUSHp(char* str, STRLEN len)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<PUSHpvs>
X<PUSHpvs>

A variation on C<PUSHp> that takes a literal string and calculates its size
directly.

=over 3

 void  PUSHpvs("literal string")

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<PUSHs>
X<PUSHs>

Push an SV onto the stack.  The stack must have room for this element.
Does not handle 'set' magic.  Does not use C<TARG>.  See also
C<L</PUSHmortal>>, C<L</XPUSHs>>, and C<L</XPUSHmortal>>.

=over 3

 void  PUSHs(SV* sv)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<PUSHu>
X<PUSHu>

Push an unsigned integer onto the stack.  The stack must have room for this
element.  Handles 'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG>
should be called to declare it.  Do not call multiple C<TARG>-oriented
macros to return lists from XSUB's - see C<L</mPUSHu>> instead.  See also
C<L</XPUSHu>> and C<L</mXPUSHu>>.

=over 3

 void  PUSHu(UV uv)

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<PUTBACK>
X<PUTBACK>

Closing bracket for XSUB arguments.  This is usually handled by C<xsubpp>.
See C<L</PUSHMARK>> and L<perlcall> for other uses.

=over 3

   PUTBACK;

=back

=back

=for hackers
Found in file pp.h

=over 4

=item C<SAVEt_INT>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SP>
X<SP>

Stack pointer.  This is usually handled by C<xsubpp>.  See C<L</dSP>> and
C<SPAGAIN>.

=back

