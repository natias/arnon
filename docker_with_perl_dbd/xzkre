    return $downgrade -> new($x -> bdstr(), @r)
      if defined($downgrade) && ($x->is_int() || $x->is_inf() || $x->is_nan());
    return $x;
}

sub bmodpow {
    # takes a very large number to a very large exponent in a given very
    # large modulus, quickly, thanks to binary exponentiation. Supports
    # negative exponents.
    my ($class, $num, $exp, $mod, @r)
      = ref($_[0]) && ref($_[0]) eq ref($_[1]) && ref($_[1]) eq ref($_[2])
      ? (ref($_[0]), @_)
      : objectify(3, @_);

    return $num if $num->modify('bmodpow');

    return $num -> bnan(@r)
      if $mod->is_nan() || $exp->is_nan() || $mod->is_nan();

    # check modulus for valid values
    return $num->bnan(@r) if $mod->{sign} ne '+' || $mod->is_zero();

    # check exponent for valid values
    if ($exp->{sign} =~ /\w/) {
        # i.e., if it's NaN, +inf, or -inf...
        return $num->bnan(@r);
    }

    $num = $num->bmodinv($mod, @r) if $exp->{sign} eq '-';

    # check num for valid values (also NaN if there was no inverse but $exp < 0)
    return $num->bnan(@r) if $num->{sign} !~ /^[+-]$/;

    # $mod is positive, sign on $exp is ignored, result also positive

    # XXX TODO: speed it up when all three numbers are integers
    $num = $num->bpow($exp)->bmod($mod);

    return $downgrade -> new($num -> bdstr(), @r) if defined($downgrade)
      && ($num->is_int() || $num->is_inf() || $num->is_nan());
    return $num -> round(@r);
}

sub bpow {
    # (BFLOAT or num_str, BFLOAT or num_str) return BFLOAT
    # compute power of two numbers, second arg is used as integer
    # modifies first argument

    # set up parameters
    my ($class, $x, $y, $a, $p, $r) = (ref($_[0]), @_);
    # objectify is costly, so avoid it
    if ((!ref($_[0])) || (ref($_[0]) ne ref($_[1]))) {
        ($class, $x, $y, $a, $p, $r) = objectify(2, @_);
    }

    return $x if $x -> modify('bpow');

    # $x and/or $y is a NaN
    return $x -> bnan() if $x -> is_nan() || $y -> is_nan();

    # $x and/or $y is a +/-Inf
    if ($x -> is_inf("-")) {
        return $x -> bzero()   if $y -> is_negative();
        return $x -> bnan()    if $y -> is_zero();
        return $x            if $y -> is_odd();
        return $x -> bneg();
    } elsif ($x -> is_inf("+")) {
        return $x -> bzero()   if $y -> is_negative();
        return $x -> bnan()    if $y -> is_zero();
        return $x;
    } elsif ($y -> is_inf("-")) {
        return $x -> bnan()    if $x -> is_one("-");
        return $x -> binf("+") if $x > -1 && $x < 1;
        return $x -> bone()    if $x -> is_one("+");
        return $x -> bzero();
    } elsif ($y -> is_inf("+")) {
        return $x -> bnan()    if $x -> is_one("-");
        return $x -> bzero()   if $x > -1 && $x < 1;
        return $x -> bone()    if $x -> is_one("+");
        return $x -> binf("+");
    }

    if ($x -> is_zero()) {
        return $x -> bone() if $y -> is_zero();
        return $x -> binf() if $y -> is_negative();
        return $x;
    }

    # We don't support complex numbers, so upgrade or return NaN.

    if ($x -> is_negative() && !$y -> is_int()) {
        return $upgrade -> bpow($x, $y, $a, $p, $r) if defined $upgrade;
        return $x -> bnan();
    }

    if ($x -> is_one("+") || $y -> is_one()) {
        return $x;
    }

    if ($x -> is_one("-")) {
        return $x if $y -> is_odd();
        return $x -> bneg();
    }

    return $x -> _pow($y, $a, $p, $r) if !$y -> is_int();

    my $y1 = $y -> as_int()->{value}; # make MBI part

    my $new_sign = '+';
    $new_sign = $LIB -> _is_odd($y1) ? '-' : '+' if $x->{sign} ne '+';

    # calculate $x->{_m} ** $y and $x->{_e} * $y separately (faster)
    $x->{_m} = $LIB -> _pow($x->{_m}, $y1);
    $x->{_e} = $LIB -> _mul($x->{_e}, $y1);

    $x->{sign} = $new_sign;
    $x = $x -> bnorm();

    # x ** (-y) = 1 / (x ** y)

    if ($y->{sign} eq '-') {
        # modify $x in place!
        my $z = $x -> copy();
        $x = $x -> bone();
        # round in one go (might ignore y's A!)
        return scalar $x -> bdiv($z, $a, $p, $r);
    }

    $x = $x -> round($a, $p, $r, $y);

    return $downgrade -> new($x)
      if defined($downgrade) && ($x->is_int() || $x->is_inf() || $x->is_nan());
    return $x;
}

sub binv {
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    return $x if $x->modify('binv');

    my $inv = $class -> bdiv($class -> bone(), $x, @r);

    return $downgrade -> new($inv, @r) if defined($downgrade)
      && ($inv -> is_int() || $inv -> is_inf() || $inv -> is_nan());

    for my $key (qw/ sign _m _es _e /) {
        $x -> {$key} = $inv -> {$key};
    }

    $x;
}

sub blog {
    # Return the logarithm of the operand. If a second operand is defined, that
    # value is used as the base, otherwise the base is assumed to be Euler's
    # constant.

    my ($class, $x, $base, @r);

    # Only objectify the base if it is defined, since an undefined base, as in
    # $x->blog() or $x->blog(undef) signals that the base is Euler's number =
    # 2.718281828...

    if (!ref($_[0]) && $_[0] =~ /^[A-Za-z]|::/) {
        # E.g., Math::BigFloat->blog(256, 2)
        ($class, $x, $base, @r) =
          defined $_[2] ? objectify(2, @_) : objectify(1, @_);
    } else {
        # E.g., $x->blog(2) or the deprecated Math::BigFloat::blog(256, 2)
        ($class, $x, $base, @r) =
          defined $_[1] ? objectify(2, @_) : objectify(1, @_);
    }

    return $x if $x->modify('blog');

    # Handle all exception cases and all trivial cases. I have used Wolfram
    # Alpha (http://www.wolframalpha.com) as the reference for these cases.

    return $x -> bnan(@r) if $x -> is_nan();

    if (defined $base) {
        $base = $class -> new($base)
          unless defined(blessed($base)) && $base -> isa(__PACKAGE__);
        if ($base -> is_nan() || $base -> is_one()) {
            return $x -> bnan(@r);
        } elsif ($base -> is_inf() || $base -> is_zero()) {
            return $x -> bnan(@r) if $x -> is_inf() || $x -> is_zero();
            return $x -> bzero(@r);
        } elsif ($base -> is_negative()) {              # -inf < base < 0
            return $x -> bzero(@r) if $x -> is_one();   #     x = 1
            return $x -> bone('+', @r)  if $x == $base; #     x = base
            # we can't handle these cases, so upgrade, if we can
            return $upgrade -> blog($x, $base, @r) if defined $upgrade;
            return $x -> bnan(@r);
        }
        return $x -> bone(@r) if $x == $base;       # 0 < base && 0 < x < inf
    }

    if ($x -> is_inf()) {                       # x = +/-inf
        my $sign = defined($base) && $base < 1 ? '-' : '+';
        return $x -> binf($sign, @r);
    } elsif ($x -> is_neg()) {                  # -inf < x < 0
        return $upgrade -> blog($x, $base, @r) if defined $upgrade;
        return $x -> bnan(@r);
    } elsif ($x -> is_one()) {                  # x = 1
        return $x -> bzero(@r);
    } elsif ($x -> is_zero()) {                 # x = 0
        my $sign = defined($base) && $base < 1 ? '+' : '-';
        return $x -> binf($sign, @r);
    }

    # we need to limit the accuracy to protect against overflow
    my $fallback = 0;
    my ($scale, @params);
    ($x, @params) = $x->_find_round_parameters(@r);

    # no rounding at all, so must use fallback
    if (scalar @params == 0) {
        # simulate old behaviour
        $params[0] = $class->div_scale(); # and round to it as accuracy
        $params[1] = undef;               # P = undef
        $scale = $params[0]+4;            # at least four more for proper round
        $params[2] = $r[2];               # round mode by caller or undef
        $fallback = 1;                    # to clear a/p afterwards
    } else {
        # the 4 below is empirical, and there might be cases where it is not
        # enough...
        $scale = abs($params[0] || $params[1]) + 4; # take whatever is defined
    }

    # When user set globals, they would interfere with our calculation, so
    # disable them and later re-enable them.

    my $ab = $class -> accuracy();
    my $pb = $class -> precision();
    $class -> accuracy(undef);
    $class -> precision(undef);

    # Disabling upgrading and downgrading is no longer necessary to avoid an
    # infinite recursion, but it avoids unnecessary upgrading and downgrading in
    # the intermediate computations.

    my $upg = $class -> upgrade();
    my $dng = $class -> downgrade();
    $class -> upgrade(undef);
    $class -> downgrade(undef);

    # We also need to disable any set A or P on $x (_find_round_parameters took
    # them already into account), since these would interfere, too.

    $x->{accuracy} = undef;
    $x->{precision} = undef;

    my $done = 0;

    # If both $x and $base are integers, try to calculate an integer result
    # first. This is very fast, and if the exact result was found, we are done.

    if (defined($base) && $base -> is_int() && $x -> is_int()) {
        my $x_lib = $LIB -> _new($x -> bdstr());
        my $b_lib = $LIB -> _new($base -> bdstr());
        ($x_lib, my $exact) = $LIB -> _log_int($x_lib, $b_lib);
        if ($exact) {
            $x->{_m} = $x_lib;
            $x->{_e} = $LIB -> _zero();
            $x = $x -> bnorm();
            $done = 1;
        }
    }

    # If the integer result was not accurate, compute the natural logarithm
    # log($x) (using reduction by 10 and possibly also by 2), and if a
    # different base was requested, convert the result with log($x)/log($base).

    unless ($done) {
        $x = $x -> _log_10($scale);
        if (defined $base) {
            # log_b(x) = ln(x) / ln(b), so compute ln(b)
            my $base_log_e = $base -> copy() -> _log_10($scale);
            $x = $x -> bdiv($base_log_e, $scale);
        }
    }

    # shortcut to not run through _find_round_parameters again

    if (defined $params[0]) {
        $x = $x -> bround($params[0], $params[2]); # then round accordingly
    } else {
        $x = $x -> bfround($params[1], $params[2]); # then round accordingly
    }
    if ($fallback) {
        # clear a/p after round, since user did not request it
        $x->{accuracy} = undef;
        $x->{precision} = undef;
    }

    # Restore globals. We need to do it like this, because setting one
    # undefines the other.

    if (defined $ab) {
        $class -> accuracy($ab);
    } else {
        $class -> precision($pb);
    }

    $class -> upgrade($upg);
    $class -> downgrade($dng);

    return $downgrade -> new($x -> bdstr(), @r)
      if defined($downgrade) && $x -> is_int();
    return $x;
}

sub bexp {
    # Calculate e ** X (Euler's number to the power of X)
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    return $x if $x -> modify('bexp');

    return $x -> bnan(@r)  if $x -> is_nan();
    return $x -> binf(@r)  if $x->{sign} eq '+inf';
    return $x -> bzero(@r) if $x->{sign} eq '-inf';

    # Get the rounding parameters, if any.

    my $fallback = 0;
    my ($scale, @params);
    ($x, @params) = $x -> _find_round_parameters(@r);

    # Error in _find_round_parameters?

    return $x -> bnan(@r) if $x->{sign} eq 'NaN';

    return $x -> bone(@r) if $x -> is_zero();

    # If no rounding parameters are give, use fallback.

    if (!@params) {
        $params[0] = $class -> div_scale();     # fallback accuracy
        $params[1] = undef;                     # no precision
        $params[2] = $r[2];                     # rounding mode
        $scale = $params[0];
        $fallback = 1;                          # to clear a/p afterwards
    } else {
        if (defined($params[0])) {
            $scale = $params[0];
        } else {
            # We perform the computations below using accuracy only, not
            # precision, so when precision is given, we need to "convert" this
            # to accuracy. To do that, we need to know, at least approximately,
            # how many digits there will be in the final result.
            #
            #   log10(exp($x)) = log(exp($x)) / log(10) = $x / log(10)

            #$scale = 1 + int(log($ms) / log(10) + $es) - $params[1];
            my $ndig = $x -> numify() / log(10);
            $scale = 1 + int($ndig) - $params[1];
        }
    }

    # Add extra digits to reduce the consequence of round-off errors in the
    # intermediate computations.

    $scale += 4;

    if (!$x -> isa('Math::BigFloat')) {
        $x = Math::BigFloat -> new($x);
        $class = ref($x);
    }

    # When user set globals, they would interfere with our calculation, so
    # disable them and later re-enable them.

    my $ab = $class -> accuracy();
    my $pb = $class -> precision();
    $class -> accuracy(undef);
    $class -> precision(undef);

    # Disabling upgrading and downgrading is no longer necessary to avoid an
    # infinite recursion, but it avoids unnecessary upgrading and downgrading in
    # the intermediate computations.

    my $upg = $class -> upgrade();
    my $dng = $class -> downgrade();
    $class -> upgrade(undef);
    $class -> downgrade(undef);

    # We also need to disable any set A or P on $x (_find_round_parameters took
    # them already into account), since these would interfere, too.

    $x->{accuracy} = undef;
    $x->{precision} = undef;

    my $x_orig = $x -> copy();

    # We use the following Taylor series:

    #           x    x^2   x^3   x^4
    #  e = 1 + --- + --- + --- + --- ...
    #           1!    2!    3!    4!

    # The difference for each term is X and N, which would result in:
    # 2 copy, 2 mul, 2 add, 1 inc, 1 div operations per term

    # But it is faster to compute exp(1) and then raising it to the
    # given power, esp. if $x is really big and an integer because:

    #  * The numerator is always 1, making the computation faster
    #  * the series converges faster in the case of x == 1
    #  * We can also easily check when we have reached our limit: when the
    #    term to be added is smaller than "1E$scale", we can stop - f.i.
    #    scale == 5, and we have 1/40320, then we stop since 1/40320 < 1E-5.
    #  * we can compute the *exact* result by simulating bigrat math:

    #  1   1    gcd(3, 4) = 1    1*24 + 1*6    5
    #  - + -                  = ---------- =  --
    #  6   24                      6*24       24

    # We do not compute the gcd() here, but simple do:
    #  1   1    1*24 + 1*6   30
    #  - + -  = --------- =  --
    #  6   24       6*24     144

    # In general:
    #  a   c    a*d + c*b         and note that c is always 1 and d = (b*f)
    #  - + -  = ---------
    #  b   d       b*d

    # This leads to:         which can be reduced by b to:
    #  a   1     a*b*f + b    a*f + 1
    #  - + -   = --------- =  -------
    #  b   b*f     b*b*f        b*f

    # The first terms in the series are:

    # 1     1    1    1    1    1     1     1     13700
    # -- + -- + -- + -- + -- + --- + --- + ---- = -----
    # 1     1    2    6   24   120   720   5040   5040

    # Note that we cannot simply reduce 13700/5040 to 685/252, but must keep
    # the numerator and the denominator!

    if ($scale <= 75) {
        # set $x directly from a cached string form
        $x->{_m} = $LIB->_new("2718281828459045235360287471352662497757" .
                              "2470936999595749669676277240766303535476");
        $x->{sign} = '+';
        $x->{_es} = '-';
        $x->{_e} = $LIB->_new(79);
    } else {
        # compute A and B so that e = A / B.

        # After some terms we end up with this, so we use it as a starting
        # point:
        my $A = $LIB->_new("9093339520860578540197197" .
                           "0164779391644753259799242");
        my $F = $LIB->_new(42);
        my $step = 42;

        # Compute number of steps needed to get $A and $B sufficiently large.

        my $steps = _len_to_steps($scale - 4);
        #    print STDERR "# Doing $steps steps for ", $scale-4, " digits\n";

        while ($step++ <= $steps) {
            # calculate $a * $f + 1
            $A = $LIB -> _mul($A, $F);
            $A = $LIB -> _inc($A);
            # increment f
            $F = $LIB -> _inc($F);
        }

        # Compute $B as factorial of $steps (this is faster than doing it
        # manually)
        my $B = $LIB->_fac($LIB->_new($steps));

        #  print "A ", $LIB->_str($A), "\nB ", $LIB->_str($B), "\n";

        # compute A/B with $scale digits in the result (truncate, not round)
        $A = $LIB->_lsft($A, $LIB->_new($scale), 10);
        $A = $LIB->_div($A, $B);

        $x->{_m} = $A;
        $x->{sign} = '+';
        $x->{_es} = '-';
        $x->{_e} = $LIB->_new($scale);
    }

    # Now $x contains now an estimate of e, with some additional digits.

    if ($x_orig -> is_one()) {

        # else just round the already computed result

        $x->{accuracy} = undef;
        $x->{precision} = undef;

        # shortcut to not run through _find_round_parameters again

        if (defined $params[0]) {
            $x = $x -> bround($params[0], $params[2]); # then round accordingly
        } else {
            $x = $x -> bfround($params[1], $params[2]); # then round accordingly
        }

    } else {

        # Use the fact exp(x) = exp(x/n)**n. In our case, n = 2**i for some
        # integer i. We use this to compute exp(y) where y = x / (2**i) and
        # 1 <= |y| < 2.
        #
        # The code below is similar to the code found in to_ieee754().

        # We need to find the base 2 exponent. First make an estimate of the
        # base 2 exponent, before adjusting it below. We could skip this
        # estimation and go straight to the while-loops below, but the loops
        # are slow, especially when the final exponent is far from zero and
        # even more so if the number of digits is large. This initial
        # estimation speeds up the computation dramatically.
        #
        #   log2($m * 10**$e) = log10($m + 10**$e) * log(10)/log(2)
        #                     = (log10($m) + $e) * log(10)/log(2)
        #                     = (log($m)/log(10) + $e) * log(10)/log(2)

        my ($m, $e) = $x_orig -> nparts();
        my $ms = $m -> numify();
        my $es = $e -> numify();

        # We start off by initializing the exponent to zero and the mantissa to
        # the input value. Then we increase the mantissa and decrease the
        # exponent, or vice versa, until the mantissa is in the desired range
        # or we hit one of the limits for the exponent.

        my $mant = $x_orig -> copy() -> babs();
        my $expo;

        my $one  = $class -> bone();
        my $two  = $class -> new("2");
        my $half = $class -> new("0.5");

        my $expo_est = (log(abs($ms))/log(10) + $es) * log(10)/log(2);
        $expo_est = int($expo_est);

        # Don't multiply by a number raised to a negative exponent. This will
        # cause a division, whose result is truncated to some fixed number of
        # digits. Instead, multiply by the inverse number raised to a positive
        # exponent.

        $expo = $class -> new($expo_est);
        if ($expo_est > 0) {
            $mant = $mant -> bmul($half -> copy() -> bpow($expo));
        } elsif ($expo_est < 0) {
            my $expo_abs = $expo -> copy() -> bneg();
            $mant = $mant -> bmul($two -> copy() -> bpow($expo_abs));
        }

        # Final adjustment of the estimate above.

        while ($mant -> bcmp($two) >= 0) {      # $mant <= $two
            $mant = $mant -> bmul($half);
            $expo = $expo -> binc();
        }

        while ($mant -> bcmp($one) < 0) {       # $mant > $one
            $mant = $mant -> bmul($two);
            $expo = $expo -> bdec();
        }

        # Because of the upscaling, we need some additional digits.

        my $rescale = int($scale + abs($expo) * log(2) / log(10) + 1);
        $rescale = 4 if $rescale < 4;

        $x = $x -> bpow($mant, $rescale);
        my $pow2 = $two -> bpow($expo, $rescale);
        $pow2 -> bneg() if $x_orig -> is_negative();

        # The bpow() below fails with the GMP and GMPz libraries if abs($pow2)
        # >= 2**30 = 1073741824. With the Pari library, it fails already when
        # abs($pow) >= 2**13 = 8192. With the Calc library, it is rediculously
        # slow when abs($pow2) is large. Fixme?

        croak "cannot compute bexp(); input value is too large"
          if $pow2 -> copy() -> babs() -> bcmp("1073741824") >= 0;

        $x = $x -> bpow($pow2, $rescale);

        # Rounding parameters given as arguments currently don't override
        # instance variables, so accuracy (which is set in the computations
        # above) must be undefined before rounding. Fixme.

        $x->{accuracy} = undef;
        $x -> round(@params);
    }

    if ($fallback) {
        # clear a/p after round, since user did not request it
        $x->{accuracy} = undef;
        $x->{precision} = undef;
    }

    # Restore globals. We need to do it like this, because setting one
    # undefines the other.

    if (defined $ab) {
        $class -> accuracy($ab);
    } else {
        $class -> precision($pb);
    }

    $class -> upgrade($upg);
    $class -> downgrade($dng);

    # If downgrading, remember to preserve the relevant instance parameters.
    # There should be a more elegant way to do this. Fixme.

    if ($downgrade && $x -> is_int()) {
        @r = ($x->{accuracy}, $x->{_r});
        my $tmp = $downgrade -> new($x, @r);
        %$x = %$tmp;
        return bless $x, $downgrade;
    }

    $x;
}

sub bilog2 {
    croak "Method ", (caller(0))[3], "() not implemented yet";
}

sub bilog10 {
    croak "Method ", (caller(0))[3], "() not implemented yet";
}

sub bclog2 {
    croak "Method ", (caller(0))[3], "() not implemented yet";
}

sub bclog10 {
    croak "Method ", (caller(0))[3], "() not implemented yet";
}

sub bnok {
    # Calculate n over k (binomial coefficient or "choose" function) as integer.
    # set up parameters
    my ($class, $x, $y, @r) = ref($_[0]) && ref($_[0]) eq ref($_[1])
                            ? (ref($_[0]), @_)
                            : objectify(2, @_);

    carp "Rounding is not supported for ", (caller(0))[3], "()" if @r;

    return $x if $x->modify('bnok');

    return $x->bnan() if $x->is_nan() || $y->is_nan();
    return $x->bnan() if (($x->is_finite() && !$x->is_int()) ||
                          ($y->is_finite() && !$y->is_int()));

    my $xint = Math::BigInt -> new($x -> bsstr());
    my $yint = Math::BigInt -> new($y -> bsstr());
    $xint = $xint -> bnok($yint);

    return $xint if defined $downgrade;

    my $xflt = Math::BigFloat -> new($xint);

    $x->{_m}   = $xflt->{_m};
    $x->{_e}   = $xflt->{_e};
    $x->{_es}  = $xflt->{_es};
    $x->{sign} = $xflt->{sign};

    return $x;
}

sub bsin {
    # Calculate a sinus of x.
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    # First we apply range reduction to x. This is because if x is large, the
    # Taylor series converges slowly and requires higher accuracy in the
    # intermediate computation. The Taylor series is:
    #
    #                 x^3   x^5   x^7   x^9
    #    sin(x) = x - --- + --- - --- + --- ...
    #                  3!    5!    7!    9!

    return $x if $x -> modify('bsin');

    return $x -> bzero(@r) if $x -> is_zero();
    return $x -> bnan(@r)  if $x -> is_nan() || $x -> is_inf();

    # Get the rounding parameters, if any.

    my $fallback = 0;
    my ($scale, @params);
    ($x, @params) = $x -> _find_round_parameters(@r);

    # Error in _find_round_parameters?

    return $x -> bnan(@r) if $x -> is_nan();

    # If no rounding parameters are given, use fallback.

    if (!@params) {
        $params[0] = $class -> div_scale();     # fallback accuracy
        $params[1] = undef;                     # no precision
        $params[2] = $r[2];                     # rounding mode
        $scale = $params[0];
        $fallback = 1;                          # to clear a/p afterwards
    } else {
        if (defined($params[0])) {
            $scale = $params[0];
        } else {
            # We perform the computations below using accuracy only, not
            # precision, so when precision is given, we need to "convert" this
            # to accuracy.
            $scale = 1 - $params[1];
        }
    }

    # Add more digits to the scale if the magnitude of $x is large.

    my ($m, $e) = $x -> nparts();
    $scale += $e if $x >= 10;
    $scale = 4 if $scale < 4;

    # When user set globals, they would interfere with our calculation, so
    # disable them and later re-enable them

    my $ab = $class -> accuracy();
    my $pb = $class -> precision();
    $class -> accuracy(undef);
    $class -> precision(undef);

    # Disabling upgrading and downgrading is no longer necessary to avoid an
    # infinite recursion, but it avoids unnecessary upgrading and downgrading in
    # the intermediate computations.

    my $upg = $class -> upgrade();
    my $dng = $class -> downgrade();
    $class -> upgrade(undef);
    $class -> downgrade(undef);

    # We also need to disable any set A or P on $x (_find_round_parameters took
    # them already into account), since these would interfere, too.

    $x->{accuracy} = undef;
    $x->{precision} = undef;

    my $sin_prev;       # the previous approximation of sin(x)
    my $sin;            # the current approximation of sin(x)

    while (1) {

        # Compute constants to the current scale.

        my $pi     = $class -> bpi($scale);         # 𝜋
        my $twopi  = $pi -> copy() -> bmul("2");    # 2𝜋
        my $halfpi = $pi -> copy() -> bmul("0.5");  # 𝜋/2

        # Use the fact that sin(-x) = -sin(x) to reduce the range to the
        # interval to [0,∞).

        my $xsgn = $x < 0 ? -1 : 1;
        my $x = $x -> copy() -> babs();

        # Use the fact that sin(2𝜋x) = sin(x) to reduce the range to the
        # interval to [0, 2𝜋).

        $x = $x -> bmod($twopi, $scale);

        # Use the fact that sin(x+𝜋) = -sin(x) to reduce the range to the
        # interval to [0,𝜋).

        if ($x -> bcmp($pi) > 0) {
            $xsgn = -$xsgn;
            $x = $x -> bsub($pi);
        }

        # Use the fact that sin(𝜋-x) = sin(x) to reduce the range to the
        # interval [0,𝜋/2).

        if ($x -> bcmp($halfpi) > 0) {
            $x = $x -> bsub($pi) -> bneg();     # 𝜋 - x
        }

        my $tol = $class -> new("1E-". ($scale-1));

        my $xsq  = $x -> copy() -> bmul($x, $scale) -> bneg();
        my $term = $x -> copy();
        my $fac  = $class -> bone();
        my $n    = $class -> bone();

        $sin = $x -> copy();    # initialize sin(x) to the first term

        while (1) {
            $n -> binc();
            $fac = $n -> copy();
            $n -> binc();
            $fac -> bmul($n);

            $term -> bmul($xsq, $scale) -> bdiv($fac, $scale);

            $sin -> badd($term, $scale);
            last if $term -> copy() -> babs() -> bcmp($tol) < 0;
        }

        $sin -> bneg() if $xsgn < 0;

        # Rounding parameters given as arguments currently don't override
        # instance variables, so accuracy (which is set in the computations
        # above) must be undefined before rounding. Fixme.

        $sin->{accuracy} = undef;
        $sin -> round(@params);

        # Compare the current approximation of sin(x) with the previous one,
        # and if they are identical, we're done.

        if (defined $sin_prev) {
            last if $sin -> bcmp($sin_prev) == 0;
        }

        # If the current approximation of sin(x) is different from the previous
        # approximation, double the scale (accuracy) and retry.

        $sin_prev = $sin;
        $scale *= 2;
    }

    # Assign the result to the invocand.

    %$x = %$sin;

    if ($fallback) {
        # clear a/p after round, since user did not request it
        $x->{accuracy} = undef;
        $x->{precision} = undef;
    }

    # Restore globals. We need to do it like this, because setting one
    # undefines the other.

    if (defined $ab) {
        $class -> accuracy($ab);
    } else {
        $class -> precision($pb);
    }

    $class -> upgrade($upg);
    $class -> downgrade($dng);

    # If downgrading, remember to preserve the relevant instance parameters.
    # There should be a more elegant way to do this. Fixme.

    if ($downgrade && $x -> is_int()) {
        @r = ($x->{accuracy}, $x->{_r});
        my $tmp = $downgrade -> new($x, @r);
        %$x = %$tmp;
        return bless $x, $downgrade;
    }

    $x;
}

sub bcos {
    # Calculate a cosinus of x.
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    # Taylor:      x^2   x^4   x^6   x^8
    #    cos = 1 - --- + --- - --- + --- ...
    #               2!    4!    6!    8!

    # we need to limit the accuracy to protect against overflow
    my $fallback = 0;
    my ($scale, @params);
    ($x, @params) = $x->_find_round_parameters(@r);

    #         constant object       or error in _find_round_parameters?
    return $x if $x->modify('bcos') || $x->is_nan();
    return $x->bnan()   if $x->is_inf();
    return $x->bone(@r) if $x->is_zero();

    # no rounding at all, so must use fallback
    if (scalar @params == 0) {
        # simulate old behaviour
        $params[0] = $class->div_scale(); # and round to it as accuracy
        $params[1] = undef;               # disable P
        $scale = $params[0]+4;            # at least four more for proper round
        $params[2] = $r[2];               # round mode by caller or undef
        $fallback = 1;                    # to clear a/p afterwards
    } else {
        # the 4 below is empirical, and there might be cases where it is not
        # enough...
        $scale = abs($params[0] || $params[1]) + 4; # take whatever is defined
    }

    # When user set globals, they would interfere with our calculation, so
    # disable them and later re-enable them.

    my $ab = $class -> accuracy();
    my $pb = $class -> precision();
    $class -> accuracy(undef);
    $class -> precision(undef);

    # Disabling upgrading and downgrading is no longer necessary to avoid an
    # infinite recursion, but it avoids unnecessary upgrading and downgrading in
    # the intermediate computations.

    my $upg = $class -> upgrade();
    my $dng = $class -> downgrade();
    $class -> upgrade(undef);
    $class -> downgrade(undef);

    # We also need to disable any set A or P on $x (_find_round_parameters took
    # them already into account), since these would interfere, too.

    $x->{accuracy} = undef;
    $x->{precision} = undef;

    my $over = $x * $x;         # X ^ 2
    my $x2 = $over->copy();     # X ^ 2; difference between terms
    my $sign = 1;               # start with -=
    my $below = $class->new(2);
    my $factorial = $class->new(3);
    $x = $x->bone();
    $x->{accuracy} = undef;
    $x->{precision} = undef;

    my $limit = $class->new("1E-". ($scale-1));
    #my $steps = 0;
    while (3 < 5) {
        # we calculate the next term, and add it to the last
        # when the next term is below our limit, it won't affect the outcome
        # anymore, so we stop:
        my $next = $over->copy()->bdiv($below, $scale);
        last if $next->bacmp($limit) <= 0;

        if ($sign == 0) {
            $x = $x->badd($next);
        } else {
            $x = $x->bsub($next);
        }
        $sign = 1-$sign;        # alternate
        # calculate things for the next term
        $over = $over->bmul($x2);                       # $x*$x
        $below = $below->bmul($factorial);              # n*(n+1)
        $factorial = $factorial -> binc();
        $below = $below->bmul($factorial);              # n*(n+1)
        $factorial = $factorial -> binc();
    }

    # shortcut to not run through _find_round_parameters again
    if (defined $params[0]) {
        $x = $x->bround($params[0], $params[2]); # then round accordingly
    } else {
        $x = $x->bfround($params[1], $params[2]); # then round accordingly
    }
    if ($fallback) {
        # clear a/p after round, since user did not request it
        $x->{accuracy} = undef;
        $x->{precision} = undef;
    }

    # Restore globals. We need to do it like this, because setting one
    # undefines the other.

    if (defined $ab) {
        $class -> accuracy($ab);
    } else {
        $class -> precision($pb);
    }

    $class -> upgrade($upg);
    $class -> downgrade($dng);

    return $downgrade -> new($x -> bdstr(), @r)
      if defined($downgrade) && $x -> is_int();
    $x;
}

sub batan {
    # Calculate a arcus tangens of x.
    my ($class, $x, @r) = ref($_[0]) ? (ref($_[0]), @_) : objectify(1, @_);

    # taylor:       x^3   x^5   x^7   x^9
    #    atan = x - --- + --- - --- + --- ...
    #                3     5     7     9

    return $x if $x->modify('batan');

    return $x -> bnan(@r) if $x->is_nan();

    # We need to limit the accuracy to protect against overflow.

    my $fallback = 0;
    my ($scale, @params);
    ($x, @params) = $x->_find_round_parameters(@r);

    # Error in _find_round_parameters?

