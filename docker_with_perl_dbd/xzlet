=over 4

=item C<HAS_LROUNDL>
X<HAS_LROUNDL>

This symbol, if defined, indicates that the C<lroundl> routine is
available to return the nearest integral value away from zero of
the long double argument value.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_MODFL>
X<HAS_MODFL>

This symbol, if defined, indicates that the C<modfl> routine is
available to split a long double x into a fractional part f and
an integer part i such that |f| < 1.0 and (f + i) = x.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_NAN>
X<HAS_NAN>

This symbol, if defined, indicates that the C<nan> routine is
available to generate NaN.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_NEXTTOWARD>
X<HAS_NEXTTOWARD>

This symbol, if defined, indicates that the C<nexttoward> routine is
available to return the next machine representable long double from
x in direction y.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_REMAINDER>
X<HAS_REMAINDER>

This symbol, if defined, indicates that the C<remainder> routine is
available to return the floating-point C<remainder>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SCALBN>
X<HAS_SCALBN>

This symbol, if defined, indicates that the C<scalbn> routine is
available to multiply floating-point number by integral power
of radix.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SIGNBIT>
X<HAS_SIGNBIT>

This symbol, if defined, indicates that the C<signbit> routine is
available to check if the given number has the sign bit set.
This should include correct testing of -0.0.  This will only be set
if the C<signbit()> routine is safe to use with the NV type used internally
in perl.  Users should call C<Perl_signbit()>, which will be #defined to
the system's C<signbit()> function or macro if this symbol is defined.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SQRTL>
X<HAS_SQRTL>

This symbol, if defined, indicates that the C<sqrtl> routine is
available to do long double square roots.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_STRTOD_L>
X<HAS_STRTOD_L>

This symbol, if defined, indicates that the C<strtod_l> routine is
available to convert strings to long doubles.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_STRTOLD>
X<HAS_STRTOLD>

This symbol, if defined, indicates that the C<strtold> routine is
available to convert strings to long doubles.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_STRTOLD_L>
X<HAS_STRTOLD_L>

This symbol, if defined, indicates that the C<strtold_l> routine is
available to convert strings to long doubles.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_TRUNC>
X<HAS_TRUNC>

This symbol, if defined, indicates that the C<trunc> routine is
available to round doubles towards zero.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_UNORDERED>
X<HAS_UNORDERED>

This symbol, if defined, indicates that the C<unordered> routine is
available to check whether two doubles are C<unordered>
(effectively: whether either of them is NaN)

=back

=for hackers
Found in file config.h

=over 4

=item C<I_FENV>
X<I_FENV>

This symbol, if defined, indicates to the C program that it should
include F<fenv.h> to get the floating point environment definitions.

=over 3

 #ifdef I_FENV
     #include <fenv.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<I_QUADMATH>
X<I_QUADMATH>

This symbol, if defined, indicates that F<quadmath.h> exists and
should be included.

=over 3

 #ifdef I_QUADMATH
     #include <quadmath.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<LONGDBLINFBYTES>
X<LONGDBLINFBYTES>

This symbol, if defined, is a comma-separated list of
hexadecimal bytes for the long double precision infinity.

=back

=for hackers
Found in file config.h

=over 4

=item C<LONGDBLMANTBITS>
X<LONGDBLMANTBITS>

This symbol, if defined, tells how many mantissa bits
there are in long double precision floating point format.
Note that this can be C<LDBL_MANT_DIG> minus one,
since C<LDBL_MANT_DIG> can include the C<IEEE> 754 implicit bit.
The common x86-style 80-bit long double does not have
an implicit bit.

=back

=for hackers
Found in file config.h

=over 4

=item C<LONGDBLNANBYTES>
X<LONGDBLNANBYTES>

This symbol, if defined, is a comma-separated list of
hexadecimal bytes (0xHH) for the long double precision not-a-number.

=back

=for hackers
Found in file config.h

=over 4

=item C<LONG_DOUBLEKIND>
X<LONG_DOUBLEKIND>

C<LONG_DOUBLEKIND> will be one of
C<LONG_DOUBLE_IS_DOUBLE>
C<LONG_DOUBLE_IS_IEEE_754_128_BIT_LITTLE_ENDIAN>
C<LONG_DOUBLE_IS_IEEE_754_128_BIT_BIG_ENDIAN>
C<LONG_DOUBLE_IS_X86_80_BIT_LITTLE_ENDIAN>
C<LONG_DOUBLE_IS_X86_80_BIT_BIG_ENDIAN>
C<LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LE_LE>
C<LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BE_BE>
C<LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LE_BE>
C<LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BE_LE>
C<LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LITTLE_ENDIAN>
C<LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BIG_ENDIAN>
C<LONG_DOUBLE_IS_VAX_H_FLOAT>
C<LONG_DOUBLE_IS_UNKNOWN_FORMAT>
It is only defined if the system supports long doubles.

=back

=for hackers
Found in file config.h

=over 4

=item C<LONG_DOUBLESIZE>
X<LONG_DOUBLESIZE>

This symbol contains the size of a long double, so that the
C preprocessor can make decisions based on it.  It is only
defined if the system supports long doubles.  Note that this
is C<sizeof(long double)>, which may include unused bytes.

=back

=for hackers
Found in file config.h

=over 4

=item C<LONG_DOUBLE_STYLE_IEEE>
X<LONG_DOUBLE_STYLE_IEEE>

This symbol, if defined, indicates that the long double
is any of the C<IEEE> 754 style long doubles:
C<LONG_DOUBLE_STYLE_IEEE_STD>, C<LONG_DOUBLE_STYLE_IEEE_EXTENDED>,
C<LONG_DOUBLE_STYLE_IEEE_DOUBLEDOUBLE>.

=back

=for hackers
Found in file config.h

=over 4

=item C<LONG_DOUBLE_STYLE_IEEE_DOUBLEDOUBLE>
X<LONG_DOUBLE_STYLE_IEEE_DOUBLEDOUBLE>

This symbol, if defined, indicates that the long double is
the 128-bit double-double.

=back

=for hackers
Found in file config.h

=over 4

=item C<LONG_DOUBLE_STYLE_IEEE_EXTENDED>
X<LONG_DOUBLE_STYLE_IEEE_EXTENDED>

This symbol, if defined, indicates that the long double is
the 80-bit C<IEEE> 754. Note that despite the 'extended' this
is less than the 'std', since this is an extension of
the double precision.

=back

=for hackers
Found in file config.h

=over 4

=item C<LONG_DOUBLE_STYLE_IEEE_STD>
X<LONG_DOUBLE_STYLE_IEEE_STD>

This symbol, if defined, indicates that the long double is
the 128-bit C<IEEE> 754.

=back

=for hackers
Found in file config.h

=over 4

=item C<LONG_DOUBLE_STYLE_VAX>
X<LONG_DOUBLE_STYLE_VAX>

This symbol, if defined, indicates that the long double is
the 128-bit C<VAX> format H.

=back

=for hackers
Found in file config.h

=over 4

=item C<NV>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<NVMANTBITS>
X<NVMANTBITS>

This symbol, if defined, tells how many mantissa bits
(not including implicit bit) there are in a Perl NV.
This depends on which floating point type was chosen.

=back

=for hackers
Found in file config.h

=over 4

=item C<NV_OVERFLOWS_INTEGERS_AT>
X<NV_OVERFLOWS_INTEGERS_AT>

This symbol gives the largest integer value that NVs can hold. This
value + 1.0 cannot be stored accurately. It is expressed as constant
floating point expression to reduce the chance of decimal/binary
conversion issues. If it can not be determined, the value 0 is given.

=back

=for hackers
Found in file config.h

=over 4

=item C<NV_PRESERVES_UV>
X<NV_PRESERVES_UV>

This symbol, if defined, indicates that a variable of type C<NVTYPE>
can preserve all the bits of a variable of type C<UVTYPE>.

=back

=for hackers
Found in file config.h

=over 4

=item C<NV_PRESERVES_UV_BITS>
X<NV_PRESERVES_UV_BITS>

This symbol contains the number of bits a variable of type C<NVTYPE>
can preserve of a variable of type C<UVTYPE>.

=back

=for hackers
Found in file config.h

=over 4

=item C<NVSIZE>
X<NVSIZE>

This symbol contains the C<sizeof(NV)>.
Note that some floating point formats have unused bytes.
The most notable example is the x86* 80-bit extended precision
which comes in byte sizes of 12 and 16 (for 32 and 64 bit
platforms, respectively), but which only uses 10 bytes.
Perl compiled with C<-Duselongdouble> on x86* is like this.

=back

=for hackers
Found in file config.h

=over 4

=item C<NVTYPE>
X<NVTYPE>

This symbol defines the C type used for Perl's NV.

=back

=for hackers
Found in file config.h

=over 4

=item C<NV_ZERO_IS_ALLBITS_ZERO>
X<NV_ZERO_IS_ALLBITS_ZERO>

This symbol, if defined, indicates that a variable of type C<NVTYPE>
stores 0.0 in memory as all bits zero.

=back

=for hackers
Found in file config.h

=head1 General Configuration
X<PERL_GCC_BRACE_GROUPS_FORBIDDEN>

This section contains configuration information not otherwise
found in the more specialized sections of this document.  At the
end is a list of C<#defines> whose name should be enough to tell
you what they do, and a list of #defines which tell you if you
need to C<#include> files to get the corresponding functionality.


=over 4

=item C<ASCIIish>
X<ASCIIish>

A preprocessor symbol that is defined iff the system is an ASCII platform; this
symbol would not be defined on C<L</EBCDIC>> platforms.

=over 3

 #ifdef  ASCIIish

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<BYTEORDER>
X<BYTEORDER>

This symbol holds the hexadecimal constant defined in byteorder,
in a UV, i.e. 0x1234 or 0x4321 or 0x12345678, etc...
If the compiler supports cross-compiling or multiple-architecture
binaries, use compiler-defined macros to
determine the byte order.

=back

=for hackers
Found in file config.h

=over 4

=item C<CHARBITS>
X<CHARBITS>

This symbol contains the size of a char, so that the C preprocessor
can make decisions based on it.

=back

=for hackers
Found in file config.h

=over 4

=item C<DB_VERSION_MAJOR_CFG>
X<DB_VERSION_MAJOR_CFG>

This symbol, if defined, defines the major version number of
Berkeley DB found in the F<db.h> header when Perl was configured.

=back

=for hackers
Found in file config.h

=over 4

=item C<DB_VERSION_MINOR_CFG>
X<DB_VERSION_MINOR_CFG>

This symbol, if defined, defines the minor version number of
Berkeley DB found in the F<db.h> header when Perl was configured.
For DB version 1 this is always 0.

=back

=for hackers
Found in file config.h

=over 4

=item C<DB_VERSION_PATCH_CFG>
X<DB_VERSION_PATCH_CFG>

This symbol, if defined, defines the patch version number of
Berkeley DB found in the F<db.h> header when Perl was configured.
For DB version 1 this is always 0.

=back

=for hackers
Found in file config.h

=over 4

=item C<DEFAULT_INC_EXCLUDES_DOT>
X<DEFAULT_INC_EXCLUDES_DOT>

This symbol, if defined, removes the legacy default behavior of
including '.' at the end of @C<INC>.

=back

=for hackers
Found in file config.h

=over 4

=item C<DLSYM_NEEDS_UNDERSCORE>
X<DLSYM_NEEDS_UNDERSCORE>

This symbol, if defined, indicates that we need to prepend an
underscore to the symbol name before calling C<dlsym()>.  This only
makes sense if you *have* dlsym, which we will presume is the
case if you're using F<dl_dlopen.xs>.

=back

=for hackers
Found in file config.h

=over 4

=item C<EBCDIC>
X<EBCDIC>

This symbol, if defined, indicates that this system uses
C<EBCDIC> encoding.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_CSH>
X<HAS_CSH>

This symbol, if defined, indicates that the C-shell exists.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_GETHOSTNAME>
X<HAS_GETHOSTNAME>

This symbol, if defined, indicates that the C program may use the
C<gethostname()> routine to derive the host name.  See also C<L</HAS_UNAME>>
and C<L</PHOSTNAME>>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_GNULIBC>
X<HAS_GNULIBC>

This symbol, if defined, indicates to the C program that
the C<GNU> C library is being used.  A better check is to use
the C<__GLIBC__> and C<__GLIBC_MINOR__> symbols supplied with glibc.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LGAMMA>
X<HAS_LGAMMA>

This symbol, if defined, indicates that the C<lgamma> routine is
available to do the log gamma function.  See also C<L</HAS_TGAMMA>> and
C<L</HAS_LGAMMA_R>>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LGAMMA_R>
X<HAS_LGAMMA_R>

This symbol, if defined, indicates that the C<lgamma_r> routine is
available to do the log gamma function without using the global
signgam variable.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_NON_INT_BITFIELDS>
X<HAS_NON_INT_BITFIELDS>

This symbol, if defined, indicates that the C compiler accepts, without
error or warning, C<struct bitfields> that are declared with sizes other
than plain 'int'; for example 'unsigned char' is accepted.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_PRCTL_SET_NAME>
X<HAS_PRCTL_SET_NAME>

This symbol, if defined, indicates that the prctl routine is
available to set process title and supports C<PR_SET_NAME>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_PROCSELFEXE>
X<HAS_PROCSELFEXE>

This symbol is defined if C<PROCSELFEXE_PATH> is a symlink
to the absolute pathname of the executing program.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_PSEUDOFORK>
X<HAS_PSEUDOFORK>

This symbol, if defined, indicates that an emulation of the
fork routine is available.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_REGCOMP>
X<HAS_REGCOMP>

This symbol, if defined, indicates that the C<regcomp()> routine is
available to do some regular pattern matching (usually on C<POSIX>.2
conforming systems).

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SETPGID>
X<HAS_SETPGID>

This symbol, if defined, indicates that the C<setpgid(pid, gpid)>
routine is available to set process group ID.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SIGSETJMP>
X<HAS_SIGSETJMP>

This variable indicates to the C program that the C<sigsetjmp()>
routine is available to save the calling process's registers
and stack environment for later use by C<siglongjmp()>, and
to optionally save the process's signal mask.  See
C<L</Sigjmp_buf>>, C<L</Sigsetjmp>>, and C<L</Siglongjmp>>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_STRUCT_CMSGHDR>
X<HAS_STRUCT_CMSGHDR>

This symbol, if defined, indicates that the C<struct cmsghdr>
is supported.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_STRUCT_MSGHDR>
X<HAS_STRUCT_MSGHDR>

This symbol, if defined, indicates that the C<struct msghdr>
is supported.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_TGAMMA>
X<HAS_TGAMMA>

This symbol, if defined, indicates that the C<tgamma> routine is
available to do the gamma function. See also C<L</HAS_LGAMMA>>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_UNAME>
X<HAS_UNAME>

This symbol, if defined, indicates that the C program may use the
C<uname()> routine to derive the host name.  See also C<L</HAS_GETHOSTNAME>>
and C<L</PHOSTNAME>>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_UNION_SEMUN>
X<HAS_UNION_SEMUN>

This symbol, if defined, indicates that the C<union semun> is
defined by including F<sys/sem.h>.  If not, the user code
probably needs to define it as:

 union semun {
 int val;
 struct semid_ds *buf;
 unsigned short *array;
 }

=back

=for hackers
Found in file config.h

=over 4

=item C<I_DIRENT>
X<I_DIRENT>

This symbol, if defined, indicates to the C program that it should
include F<dirent.h>. Using this symbol also triggers the definition
of the C<Direntry_t> define which ends up being 'C<struct dirent>' or
'C<struct direct>' depending on the availability of F<dirent.h>.

=over 3

 #ifdef I_DIRENT
     #include <dirent.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<I_POLL>
X<I_POLL>

This symbol, if defined, indicates that F<poll.h> exists and
should be included. (see also C<L</HAS_POLL>>)

=over 3

 #ifdef I_POLL
     #include <poll.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<I_SYS_RESOURCE>
X<I_SYS_RESOURCE>

This symbol, if defined, indicates to the C program that it should
include F<sys/resource.h>.

=over 3

 #ifdef I_SYS_RESOURCE
     #include <sys_resource.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<LIBM_LIB_VERSION>
X<LIBM_LIB_VERSION>

This symbol, if defined, indicates that libm exports C<_LIB_VERSION>
and that F<math.h> defines the enum to manipulate it.

=back

=for hackers
Found in file config.h

=over 4

=item C<NEED_VA_COPY>

This symbol, if defined, indicates that the system stores
the variable argument list datatype, C<va_list>, in a format
that cannot be copied by simple assignment, so that some
other means must be used when copying is required.
As such systems vary in their provision (or non-provision)
of copying mechanisms, F<handy.h> defines a platform-
independent macro, C<Perl_va_copy(src, dst)>, to do the job.

=back

=for hackers
Found in file pod/perlhacktips.pod

=over 4

=item C<OSNAME>
X<OSNAME>

This symbol contains the name of the operating system, as determined
by Configure.  You shouldn't rely on it too much; the specific
feature tests from Configure are generally more reliable.

=back

=for hackers
Found in file config.h

=over 4

=item C<OSVERS>
X<OSVERS>

This symbol contains the version of the operating system, as determined
by Configure.  You shouldn't rely on it too much; the specific
feature tests from Configure are generally more reliable.

=back

=for hackers
Found in file config.h

=over 4

=item C<PERL_USE_GCC_BRACE_GROUPS>
X<PERL_USE_GCC_BRACE_GROUPS>

This C pre-processor value, if defined, indicates that it is permissible to use
the GCC brace groups extension.  However, use of this extension is DISCOURAGED.
Use a C<static inline> function instead.

The extension, of the form

 ({ statement ... })

turns the block consisting of I<statement ...> into an expression with a
