″	2'	2033	8243	DOUBLE PRIME
‴	3'	2034	8244	TRIPLE PRIME
‵	1"	2035	8245	REVERSED PRIME
‶	2"	2036	8246	REVERSED DOUBLE PRIME
‷	3"	2037	8247	REVERSED TRIPLE PRIME
‸	Ca	2038	8248	CARET
‹	<1	2039	8249	SINGLE LEFT-POINTING ANGLE QUOTATION MARK
›	>1	203A	8250	SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
※	:X	203B	8251	REFERENCE MARK
‾	'-	203E	8254	OVERLINE
⁄	/f	2044	8260	FRACTION SLASH
⁰	0S	2070	8304	SUPERSCRIPT ZERO
⁴	4S	2074	8308	SUPERSCRIPT FOUR
⁵	5S	2075	8309	SUPERSCRIPT FIVE
⁶	6S	2076	8310	SUPERSCRIPT SIX
⁷	7S	2077	8311	SUPERSCRIPT SEVEN
⁸	8S	2078	8312	SUPERSCRIPT EIGHT
⁹	9S	2079	8313	SUPERSCRIPT NINE
⁺	+S	207A	8314	SUPERSCRIPT PLUS SIGN
⁻	-S	207B	8315	SUPERSCRIPT MINUS
⁼	=S	207C	8316	SUPERSCRIPT EQUALS SIGN
⁽	(S	207D	8317	SUPERSCRIPT LEFT PARENTHESIS
⁾	)S	207E	8318	SUPERSCRIPT RIGHT PARENTHESIS
ⁿ	nS	207F	8319	SUPERSCRIPT LATIN SMALL LETTER N `
₀	0s	2080	8320	SUBSCRIPT ZERO
₁	1s	2081	8321	SUBSCRIPT ONE
₂	2s	2082	8322	SUBSCRIPT TWO
₃	3s	2083	8323	SUBSCRIPT THREE
₄	4s	2084	8324	SUBSCRIPT FOUR
₅	5s	2085	8325	SUBSCRIPT FIVE
₆	6s	2086	8326	SUBSCRIPT SIX
₇	7s	2087	8327	SUBSCRIPT SEVEN
₈	8s	2088	8328	SUBSCRIPT EIGHT
₉	9s	2089	8329	SUBSCRIPT NINE
₊	+s	208A	8330	SUBSCRIPT PLUS SIGN
₋	-s	208B	8331	SUBSCRIPT MINUS
₌	=s	208C	8332	SUBSCRIPT EQUALS SIGN
₍	(s	208D	8333	SUBSCRIPT LEFT PARENTHESIS
₎	)s	208E	8334	SUBSCRIPT RIGHT PARENTHESIS
₤	Li	20A4	8356	LIRA SIGN
₧	Pt	20A7	8359	PESETA SIGN
₩	W=	20A9	8361	WON SIGN
€	Eu	20AC	8364	EURO SIGN
₽	=R	20BD	8381	ROUBLE SIGN
₽	=P	20BD	8381	ROUBLE SIGN
℃	oC	2103	8451	DEGREE CELSIUS
℅	co	2105	8453	CARE OF
℉	oF	2109	8457	DEGREE FAHRENHEIT
№	N0	2116	8470	NUMERO SIGN
℗	PO	2117	8471	SOUND RECORDING COPYRIGHT
℞	Rx	211E	8478	PRESCRIPTION TAKE
℠	SM	2120	8480	SERVICE MARK
™	TM	2122	8482	TRADE MARK SIGN
Ω	Om	2126	8486	OHM SIGN
Å	AO	212B	8491	ANGSTROM SIGN
⅓	13	2153	8531	VULGAR FRACTION ONE THIRD
⅔	23	2154	8532	VULGAR FRACTION TWO THIRDS
⅕	15	2155	8533	VULGAR FRACTION ONE FIFTH
⅖	25	2156	8534	VULGAR FRACTION TWO FIFTHS
⅗	35	2157	8535	VULGAR FRACTION THREE FIFTHS
⅘	45	2158	8536	VULGAR FRACTION FOUR FIFTHS
⅙	16	2159	8537	VULGAR FRACTION ONE SIXTH
⅚	56	215A	8538	VULGAR FRACTION FIVE SIXTHS
⅛	18	215B	8539	VULGAR FRACTION ONE EIGHTH
⅜	38	215C	8540	VULGAR FRACTION THREE EIGHTHS
⅝	58	215D	8541	VULGAR FRACTION FIVE EIGHTHS
⅞	78	215E	8542	VULGAR FRACTION SEVEN EIGHTHS
Ⅰ	1R	2160	8544	ROMAN NUMERAL ONE
Ⅱ	2R	2161	8545	ROMAN NUMERAL TWO
Ⅲ	3R	2162	8546	ROMAN NUMERAL THREE
Ⅳ	4R	2163	8547	ROMAN NUMERAL FOUR
Ⅴ	5R	2164	8548	ROMAN NUMERAL FIVE
Ⅵ	6R	2165	8549	ROMAN NUMERAL SIX
Ⅶ	7R	2166	8550	ROMAN NUMERAL SEVEN
Ⅷ	8R	2167	8551	ROMAN NUMERAL EIGHT
Ⅸ	9R	2168	8552	ROMAN NUMERAL NINE
Ⅹ	aR	2169	8553	ROMAN NUMERAL TEN
Ⅺ	bR	216A	8554	ROMAN NUMERAL ELEVEN
Ⅻ	cR	216B	8555	ROMAN NUMERAL TWELVE
ⅰ	1r	2170	8560	SMALL ROMAN NUMERAL ONE
ⅱ	2r	2171	8561	SMALL ROMAN NUMERAL TWO
ⅲ	3r	2172	8562	SMALL ROMAN NUMERAL THREE
ⅳ	4r	2173	8563	SMALL ROMAN NUMERAL FOUR
ⅴ	5r	2174	8564	SMALL ROMAN NUMERAL FIVE
ⅵ	6r	2175	8565	SMALL ROMAN NUMERAL SIX
ⅶ	7r	2176	8566	SMALL ROMAN NUMERAL SEVEN
ⅷ	8r	2177	8567	SMALL ROMAN NUMERAL EIGHT
ⅸ	9r	2178	8568	SMALL ROMAN NUMERAL NINE
ⅹ	ar	2179	8569	SMALL ROMAN NUMERAL TEN
ⅺ	br	217A	8570	SMALL ROMAN NUMERAL ELEVEN
ⅻ	cr	217B	8571	SMALL ROMAN NUMERAL TWELVE
←	<-	2190	8592	LEFTWARDS ARROW
↑	-!	2191	8593	UPWARDS ARROW
→	->	2192	8594	RIGHTWARDS ARROW
↓	-v	2193	8595	DOWNWARDS ARROW
↔	<>	2194	8596	LEFT RIGHT ARROW
↕	UD	2195	8597	UP DOWN ARROW
⇐	<=	21D0	8656	LEFTWARDS DOUBLE ARROW
⇒	=>	21D2	8658	RIGHTWARDS DOUBLE ARROW
⇔	==	21D4	8660	LEFT RIGHT DOUBLE ARROW
∀	FA	2200	8704	FOR ALL
∂	dP	2202	8706	PARTIAL DIFFERENTIAL
∃	TE	2203	8707	THERE EXISTS
∅	/0	2205	8709	EMPTY SET
∆	DE	2206	8710	INCREMENT
∇	NB	2207	8711	NABLA
∈	(-	2208	8712	ELEMENT OF
∋	-)	220B	8715	CONTAINS AS MEMBER
∏	*P	220F	8719	N-ARY PRODUCT `
∑	+Z	2211	8721	N-ARY SUMMATION `
−	-2	2212	8722	MINUS SIGN
∓	-+	2213	8723	MINUS-OR-PLUS SIGN
∗	*-	2217	8727	ASTERISK OPERATOR
∘	Ob	2218	8728	RING OPERATOR
∙	Sb	2219	8729	BULLET OPERATOR
√	RT	221A	8730	SQUARE ROOT
∝	0(	221D	8733	PROPORTIONAL TO
∞	00	221E	8734	INFINITY
∟	-L	221F	8735	RIGHT ANGLE
∠	-V	2220	8736	ANGLE
∥	PP	2225	8741	PARALLEL TO
∧	AN	2227	8743	LOGICAL AND
∨	OR	2228	8744	LOGICAL OR
∩	(U	2229	8745	INTERSECTION
∪	)U	222A	8746	UNION
∫	In	222B	8747	INTEGRAL
∬	DI	222C	8748	DOUBLE INTEGRAL
∮	Io	222E	8750	CONTOUR INTEGRAL
∴	.:	2234	8756	THEREFORE
∵	:.	2235	8757	BECAUSE
∶	:R	2236	8758	RATIO
∷	::	2237	8759	PROPORTION
∼	?1	223C	8764	TILDE OPERATOR
∾	CG	223E	8766	INVERTED LAZY S
≃	?-	2243	8771	ASYMPTOTICALLY EQUAL TO
≅	?=	2245	8773	APPROXIMATELY EQUAL TO
≈	?2	2248	8776	ALMOST EQUAL TO
≌	=?	224C	8780	ALL EQUAL TO
≓	HI	2253	8787	IMAGE OF OR APPROXIMATELY EQUAL TO
≠	!=	2260	8800	NOT EQUAL TO
≡	=3	2261	8801	IDENTICAL TO
≤	=<	2264	8804	LESS-THAN OR EQUAL TO
≥	>=	2265	8805	GREATER-THAN OR EQUAL TO
≪	<*	226A	8810	MUCH LESS-THAN
≫	*>	226B	8811	MUCH GREATER-THAN
≮	!<	226E	8814	NOT LESS-THAN
≯	!>	226F	8815	NOT GREATER-THAN
⊂	(C	2282	8834	SUBSET OF
⊃	)C	2283	8835	SUPERSET OF
⊆	(_	2286	8838	SUBSET OF OR EQUAL TO
⊇	)_	2287	8839	SUPERSET OF OR EQUAL TO
⊙	0.	2299	8857	CIRCLED DOT OPERATOR
⊚	02	229A	8858	CIRCLED RING OPERATOR
⊥	-T	22A5	8869	UP TACK
⋅	.P	22C5	8901	DOT OPERATOR
⋮	:3	22EE	8942	VERTICAL ELLIPSIS
⋯	.3	22EF	8943	MIDLINE HORIZONTAL ELLIPSIS
⌂	Eh	2302	8962	HOUSE
⌈	<7	2308	8968	LEFT CEILING
⌉	>7	2309	8969	RIGHT CEILING
⌊	7<	230A	8970	LEFT FLOOR
⌋	7>	230B	8971	RIGHT FLOOR
⌐	NI	2310	8976	REVERSED NOT SIGN
⌒	(A	2312	8978	ARC
⌕	TR	2315	8981	TELEPHONE RECORDER
⌠	Iu	2320	8992	TOP HALF INTEGRAL
⌡	Il	2321	8993	BOTTOM HALF INTEGRAL
〈	</	2329	9001	LEFT-POINTING ANGLE BRACKET
〉	/>	232A	9002	RIGHT-POINTING ANGLE BRACKET
␣	Vs	2423	9251	OPEN BOX
⑀	1h	2440	9280	OCR HOOK
⑁	3h	2441	9281	OCR CHAIR
⑂	2h	2442	9282	OCR FORK
⑃	4h	2443	9283	OCR INVERTED FORK
⑆	1j	2446	9286	OCR BRANCH BANK IDENTIFICATION
⑇	2j	2447	9287	OCR AMOUNT OF CHECK
⑈	3j	2448	9288	OCR DASH
⑉	4j	2449	9289	OCR CUSTOMER ACCOUNT NUMBER
⒈	1.	2488	9352	DIGIT ONE FULL STOP
⒉	2.	2489	9353	DIGIT TWO FULL STOP
⒊	3.	248A	9354	DIGIT THREE FULL STOP
⒋	4.	248B	9355	DIGIT FOUR FULL STOP
⒌	5.	248C	9356	DIGIT FIVE FULL STOP
⒍	6.	248D	9357	DIGIT SIX FULL STOP
⒎	7.	248E	9358	DIGIT SEVEN FULL STOP
⒏	8.	248F	9359	DIGIT EIGHT FULL STOP
⒐	9.	2490	9360	DIGIT NINE FULL STOP
─	hh	2500	9472	BOX DRAWINGS LIGHT HORIZONTAL
━	HH	2501	9473	BOX DRAWINGS HEAVY HORIZONTAL
│	vv	2502	9474	BOX DRAWINGS LIGHT VERTICAL
┃	VV	2503	9475	BOX DRAWINGS HEAVY VERTICAL
┄	3-	2504	9476	BOX DRAWINGS LIGHT TRIPLE DASH HORIZONTAL
┅	3_	2505	9477	BOX DRAWINGS HEAVY TRIPLE DASH HORIZONTAL
┆	3!	2506	9478	BOX DRAWINGS LIGHT TRIPLE DASH VERTICAL
┇	3/	2507	9479	BOX DRAWINGS HEAVY TRIPLE DASH VERTICAL
┈	4-	2508	9480	BOX DRAWINGS LIGHT QUADRUPLE DASH HORIZONTAL
┉	4_	2509	9481	BOX DRAWINGS HEAVY QUADRUPLE DASH HORIZONTAL
┊	4!	250A	9482	BOX DRAWINGS LIGHT QUADRUPLE DASH VERTICAL
┋	4/	250B	9483	BOX DRAWINGS HEAVY QUADRUPLE DASH VERTICAL
┌	dr	250C	9484	BOX DRAWINGS LIGHT DOWN AND RIGHT
┍	dR	250D	9485	BOX DRAWINGS DOWN LIGHT AND RIGHT HEAVY
┎	Dr	250E	9486	BOX DRAWINGS DOWN HEAVY AND RIGHT LIGHT
┏	DR	250F	9487	BOX DRAWINGS HEAVY DOWN AND RIGHT
┐	dl	2510	9488	BOX DRAWINGS LIGHT DOWN AND LEFT
┑	dL	2511	9489	BOX DRAWINGS DOWN LIGHT AND LEFT HEAVY
┒	Dl	2512	9490	BOX DRAWINGS DOWN HEAVY AND LEFT LIGHT
┓	LD	2513	9491	BOX DRAWINGS HEAVY DOWN AND LEFT
└	ur	2514	9492	BOX DRAWINGS LIGHT UP AND RIGHT
┕	uR	2515	9493	BOX DRAWINGS UP LIGHT AND RIGHT HEAVY
┖	Ur	2516	9494	BOX DRAWINGS UP HEAVY AND RIGHT LIGHT
┗	UR	2517	9495	BOX DRAWINGS HEAVY UP AND RIGHT
┘	ul	2518	9496	BOX DRAWINGS LIGHT UP AND LEFT
┙	uL	2519	9497	BOX DRAWINGS UP LIGHT AND LEFT HEAVY
┚	Ul	251A	9498	BOX DRAWINGS UP HEAVY AND LEFT LIGHT
┛	UL	251B	9499	BOX DRAWINGS HEAVY UP AND LEFT
├	vr	251C	9500	BOX DRAWINGS LIGHT VERTICAL AND RIGHT
┝	vR	251D	9501	BOX DRAWINGS VERTICAL LIGHT AND RIGHT HEAVY
┠	Vr	2520	9504	BOX DRAWINGS VERTICAL HEAVY AND RIGHT LIGHT
┣	VR	2523	9507	BOX DRAWINGS HEAVY VERTICAL AND RIGHT
┤	vl	2524	9508	BOX DRAWINGS LIGHT VERTICAL AND LEFT
┥	vL	2525	9509	BOX DRAWINGS VERTICAL LIGHT AND LEFT HEAVY
┨	Vl	2528	9512	BOX DRAWINGS VERTICAL HEAVY AND LEFT LIGHT
┫	VL	252B	9515	BOX DRAWINGS HEAVY VERTICAL AND LEFT
┬	dh	252C	9516	BOX DRAWINGS LIGHT DOWN AND HORIZONTAL
┯	dH	252F	9519	BOX DRAWINGS DOWN LIGHT AND HORIZONTAL HEAVY
┰	Dh	2530	9520	BOX DRAWINGS DOWN HEAVY AND HORIZONTAL LIGHT
┳	DH	2533	9523	BOX DRAWINGS HEAVY DOWN AND HORIZONTAL
┴	uh	2534	9524	BOX DRAWINGS LIGHT UP AND HORIZONTAL
┷	uH	2537	9527	BOX DRAWINGS UP LIGHT AND HORIZONTAL HEAVY
┸	Uh	2538	9528	BOX DRAWINGS UP HEAVY AND HORIZONTAL LIGHT
┻	UH	253B	9531	BOX DRAWINGS HEAVY UP AND HORIZONTAL
┼	vh	253C	9532	BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL
┿	vH	253F	9535	BOX DRAWINGS VERTICAL LIGHT AND HORIZONTAL HEAVY
╂	Vh	2542	9538	BOX DRAWINGS VERTICAL HEAVY AND HORIZONTAL LIGHT
╋	VH	254B	9547	BOX DRAWINGS HEAVY VERTICAL AND HORIZONTAL
╱	FD	2571	9585	BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT
╲	BD	2572	9586	BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT
▀	TB	2580	9600	UPPER HALF BLOCK
▄	LB	2584	9604	LOWER HALF BLOCK
█	FB	2588	9608	FULL BLOCK
▌	lB	258C	9612	LEFT HALF BLOCK
▐	RB	2590	9616	RIGHT HALF BLOCK
░	.S	2591	9617	LIGHT SHADE
▒	:S	2592	9618	MEDIUM SHADE
▓	?S	2593	9619	DARK SHADE
■	fS	25A0	9632	BLACK SQUARE
□	OS	25A1	9633	WHITE SQUARE
▢	RO	25A2	9634	WHITE SQUARE WITH ROUNDED CORNERS
▣	Rr	25A3	9635	WHITE SQUARE CONTAINING BLACK SMALL SQUARE
▤	RF	25A4	9636	SQUARE WITH HORIZONTAL FILL
▥	RY	25A5	9637	SQUARE WITH VERTICAL FILL
▦	RH	25A6	9638	SQUARE WITH ORTHOGONAL CROSSHATCH FILL
▧	RZ	25A7	9639	SQUARE WITH UPPER LEFT TO LOWER RIGHT FILL
▨	RK	25A8	9640	SQUARE WITH UPPER RIGHT TO LOWER LEFT FILL
▩	RX	25A9	9641	SQUARE WITH DIAGONAL CROSSHATCH FILL
▪	sB	25AA	9642	BLACK SMALL SQUARE
▬	SR	25AC	9644	BLACK RECTANGLE
▭	Or	25AD	9645	WHITE RECTANGLE
▲	UT	25B2	9650	BLACK UP-POINTING TRIANGLE
△	uT	25B3	9651	WHITE UP-POINTING TRIANGLE
▶	PR	25B6	9654	BLACK RIGHT-POINTING TRIANGLE
▷	Tr	25B7	9655	WHITE RIGHT-POINTING TRIANGLE
▼	Dt	25BC	9660	BLACK DOWN-POINTING TRIANGLE
▽	dT	25BD	9661	WHITE DOWN-POINTING TRIANGLE
◀	PL	25C0	9664	BLACK LEFT-POINTING TRIANGLE
◁	Tl	25C1	9665	WHITE LEFT-POINTING TRIANGLE
◆	Db	25C6	9670	BLACK DIAMOND
◇	Dw	25C7	9671	WHITE DIAMOND
◊	LZ	25CA	9674	LOZENGE
○	0m	25CB	9675	WHITE CIRCLE
◎	0o	25CE	9678	BULLSEYE
●	0M	25CF	9679	BLACK CIRCLE
◐	0L	25D0	9680	CIRCLE WITH LEFT HALF BLACK
◑	0R	25D1	9681	CIRCLE WITH RIGHT HALF BLACK
◘	Sn	25D8	9688	INVERSE BULLET
◙	Ic	25D9	9689	INVERSE WHITE CIRCLE
◢	Fd	25E2	9698	BLACK LOWER RIGHT TRIANGLE
◣	Bd	25E3	9699	BLACK LOWER LEFT TRIANGLE
★	*2	2605	9733	BLACK STAR
☆	*1	2606	9734	WHITE STAR
☜	<H	261C	9756	WHITE LEFT POINTING INDEX
☞	>H	261E	9758	WHITE RIGHT POINTING INDEX
☺	0u	263A	9786	WHITE SMILING FACE
☻	0U	263B	9787	BLACK SMILING FACE
☼	SU	263C	9788	WHITE SUN WITH RAYS
♀	Fm	2640	9792	FEMALE SIGN
♂	Ml	2642	9794	MALE SIGN
♠	cS	2660	9824	BLACK SPADE SUIT
♡	cH	2661	9825	WHITE HEART SUIT
♢	cD	2662	9826	WHITE DIAMOND SUIT
♣	cC	2663	9827	BLACK CLUB SUIT
♩	Md	2669	9833	QUARTER NOTE `
♪	M8	266A	9834	EIGHTH NOTE `
♫	M2	266B	9835	BEAMED EIGHTH NOTES
♭	Mb	266D	9837	MUSIC FLAT SIGN
♮	Mx	266E	9838	MUSIC NATURAL SIGN
♯	MX	266F	9839	MUSIC SHARP SIGN
✓	OK	2713	10003	CHECK MARK
✗	XX	2717	10007	BALLOT X
✠	-X	2720	10016	MALTESE CROSS
　	IS	3000	12288	IDEOGRAPHIC SPACE
、	,_	3001	12289	IDEOGRAPHIC COMMA
。	._	3002	12290	IDEOGRAPHIC FULL STOP
〃	+"	3003	12291	DITTO MARK
〄	+_	3004	12292	JAPANESE INDUSTRIAL STANDARD SYMBOL
々	*_	3005	12293	IDEOGRAPHIC ITERATION MARK
〆	;_	3006	12294	IDEOGRAPHIC CLOSING MARK
〇	0_	3007	12295	IDEOGRAPHIC NUMBER ZERO
《	<+	300A	12298	LEFT DOUBLE ANGLE BRACKET
》	>+	300B	12299	RIGHT DOUBLE ANGLE BRACKET
「	<'	300C	12300	LEFT CORNER BRACKET
」	>'	300D	12301	RIGHT CORNER BRACKET
『	<"	300E	12302	LEFT WHITE CORNER BRACKET
』	>"	300F	12303	RIGHT WHITE CORNER BRACKET
【	("	3010	12304	LEFT BLACK LENTICULAR BRACKET
】	)"	3011	12305	RIGHT BLACK LENTICULAR BRACKET
〒	=T	3012	12306	POSTAL MARK
〓	=_	3013	12307	GETA MARK
〔	('	3014	12308	LEFT TORTOISE SHELL BRACKET
〕	)'	3015	12309	RIGHT TORTOISE SHELL BRACKET
〖	(I	3016	12310	LEFT WHITE LENTICULAR BRACKET
〗	)I	3017	12311	RIGHT WHITE LENTICULAR BRACKET
〜	-?	301C	12316	WAVE DASH
ぁ	A5	3041	12353	HIRAGANA LETTER SMALL A
あ	a5	3042	12354	HIRAGANA LETTER A
ぃ	I5	3043	12355	HIRAGANA LETTER SMALL I
い	i5	3044	12356	HIRAGANA LETTER I
ぅ	U5	3045	12357	HIRAGANA LETTER SMALL U
う	u5	3046	12358	HIRAGANA LETTER U
ぇ	E5	3047	12359	HIRAGANA LETTER SMALL E
え	e5	3048	12360	HIRAGANA LETTER E
ぉ	O5	3049	12361	HIRAGANA LETTER SMALL O
お	o5	304A	12362	HIRAGANA LETTER O
か	ka	304B	12363	HIRAGANA LETTER KA
が	ga	304C	12364	HIRAGANA LETTER GA
き	ki	304D	12365	HIRAGANA LETTER KI
ぎ	gi	304E	12366	HIRAGANA LETTER GI
く	ku	304F	12367	HIRAGANA LETTER KU
ぐ	gu	3050	12368	HIRAGANA LETTER GU
け	ke	3051	12369	HIRAGANA LETTER KE
げ	ge	3052	12370	HIRAGANA LETTER GE
こ	ko	3053	12371	HIRAGANA LETTER KO
ご	go	3054	12372	HIRAGANA LETTER GO
さ	sa	3055	12373	HIRAGANA LETTER SA
ざ	za	3056	12374	HIRAGANA LETTER ZA
し	si	3057	12375	HIRAGANA LETTER SI
じ	zi	3058	12376	HIRAGANA LETTER ZI
す	su	3059	12377	HIRAGANA LETTER SU
ず	zu	305A	12378	HIRAGANA LETTER ZU
せ	se	305B	12379	HIRAGANA LETTER SE
ぜ	ze	305C	12380	HIRAGANA LETTER ZE
そ	so	305D	12381	HIRAGANA LETTER SO
ぞ	zo	305E	12382	HIRAGANA LETTER ZO
た	ta	305F	12383	HIRAGANA LETTER TA
だ	da	3060	12384	HIRAGANA LETTER DA
ち	ti	3061	12385	HIRAGANA LETTER TI
ぢ	di	3062	12386	HIRAGANA LETTER DI
っ	tU	3063	12387	HIRAGANA LETTER SMALL TU
つ	tu	3064	12388	HIRAGANA LETTER TU
づ	du	3065	12389	HIRAGANA LETTER DU
て	te	3066	12390	HIRAGANA LETTER TE
で	de	3067	12391	HIRAGANA LETTER DE
と	to	3068	12392	HIRAGANA LETTER TO
ど	do	3069	12393	HIRAGANA LETTER DO
な	na	306A	12394	HIRAGANA LETTER NA
に	ni	306B	12395	HIRAGANA LETTER NI
ぬ	nu	306C	12396	HIRAGANA LETTER NU
ね	ne	306D	12397	HIRAGANA LETTER NE
の	no	306E	12398	HIRAGANA LETTER NO
は	ha	306F	12399	HIRAGANA LETTER HA
ば	ba	3070	12400	HIRAGANA LETTER BA
ぱ	pa	3071	12401	HIRAGANA LETTER PA
ひ	hi	3072	12402	HIRAGANA LETTER HI
び	bi	3073	12403	HIRAGANA LETTER BI
ぴ	pi	3074	12404	HIRAGANA LETTER PI
ふ	hu	3075	12405	HIRAGANA LETTER HU
ぶ	bu	3076	12406	HIRAGANA LETTER BU
ぷ	pu	3077	12407	HIRAGANA LETTER PU
へ	he	3078	12408	HIRAGANA LETTER HE
べ	be	3079	12409	HIRAGANA LETTER BE
ぺ	pe	307A	12410	HIRAGANA LETTER PE
ほ	ho	307B	12411	HIRAGANA LETTER HO
ぼ	bo	307C	12412	HIRAGANA LETTER BO
ぽ	po	307D	12413	HIRAGANA LETTER PO
ま	ma	307E	12414	HIRAGANA LETTER MA
み	mi	307F	12415	HIRAGANA LETTER MI
む	mu	3080	12416	HIRAGANA LETTER MU
め	me	3081	12417	HIRAGANA LETTER ME
も	mo	3082	12418	HIRAGANA LETTER MO
ゃ	yA	3083	12419	HIRAGANA LETTER SMALL YA
や	ya	3084	12420	HIRAGANA LETTER YA
ゅ	yU	3085	12421	HIRAGANA LETTER SMALL YU
ゆ	yu	3086	12422	HIRAGANA LETTER YU
ょ	yO	3087	12423	HIRAGANA LETTER SMALL YO
よ	yo	3088	12424	HIRAGANA LETTER YO
ら	ra	3089	12425	HIRAGANA LETTER RA
り	ri	308A	12426	HIRAGANA LETTER RI
る	ru	308B	12427	HIRAGANA LETTER RU
れ	re	308C	12428	HIRAGANA LETTER RE
ろ	ro	308D	12429	HIRAGANA LETTER RO
ゎ	wA	308E	12430	HIRAGANA LETTER SMALL WA
わ	wa	308F	12431	HIRAGANA LETTER WA
ゐ	wi	3090	12432	HIRAGANA LETTER WI
ゑ	we	3091	12433	HIRAGANA LETTER WE
を	wo	3092	12434	HIRAGANA LETTER WO
ん	n5	3093	12435	HIRAGANA LETTER N `
ゔ	vu	3094	12436	HIRAGANA LETTER VU
゛	"5	309B	12443	KATAKANA-HIRAGANA VOICED SOUND MARK
゜	05	309C	12444	KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
ゝ	*5	309D	12445	HIRAGANA ITERATION MARK
ゞ	+5	309E	12446	HIRAGANA VOICED ITERATION MARK
ァ	a6	30A1	12449	KATAKANA LETTER SMALL A
ア	A6	30A2	12450	KATAKANA LETTER A
ィ	i6	30A3	12451	KATAKANA LETTER SMALL I
イ	I6	30A4	12452	KATAKANA LETTER I
ゥ	u6	30A5	12453	KATAKANA LETTER SMALL U
ウ	U6	30A6	12454	KATAKANA LETTER U
ェ	e6	30A7	12455	KATAKANA LETTER SMALL E
エ	E6	30A8	12456	KATAKANA LETTER E
ォ	o6	30A9	12457	KATAKANA LETTER SMALL O
オ	O6	30AA	12458	KATAKANA LETTER O
カ	Ka	30AB	12459	KATAKANA LETTER KA
ガ	Ga	30AC	12460	KATAKANA LETTER GA
キ	Ki	30AD	12461	KATAKANA LETTER KI
ギ	Gi	30AE	12462	KATAKANA LETTER GI
ク	Ku	30AF	12463	KATAKANA LETTER KU
グ	Gu	30B0	12464	KATAKANA LETTER GU
ケ	Ke	30B1	12465	KATAKANA LETTER KE
ゲ	Ge	30B2	12466	KATAKANA LETTER GE
コ	Ko	30B3	12467	KATAKANA LETTER KO
ゴ	Go	30B4	12468	KATAKANA LETTER GO
サ	Sa	30B5	12469	KATAKANA LETTER SA
ザ	Za	30B6	12470	KATAKANA LETTER ZA
シ	Si	30B7	12471	KATAKANA LETTER SI
ジ	Zi	30B8	12472	KATAKANA LETTER ZI
ス	Su	30B9	12473	KATAKANA LETTER SU
ズ	Zu	30BA	12474	KATAKANA LETTER ZU
セ	Se	30BB	12475	KATAKANA LETTER SE
ゼ	Ze	30BC	12476	KATAKANA LETTER ZE
ソ	So	30BD	12477	KATAKANA LETTER SO
ゾ	Zo	30BE	12478	KATAKANA LETTER ZO
タ	Ta	30BF	12479	KATAKANA LETTER TA
ダ	Da	30C0	12480	KATAKANA LETTER DA
チ	Ti	30C1	12481	KATAKANA LETTER TI
ヂ	Di	30C2	12482	KATAKANA LETTER DI
ッ	TU	30C3	12483	KATAKANA LETTER SMALL TU
ツ	Tu	30C4	12484	KATAKANA LETTER TU
ヅ	Du	30C5	12485	KATAKANA LETTER DU
テ	Te	30C6	12486	KATAKANA LETTER TE
デ	De	30C7	12487	KATAKANA LETTER DE
ト	To	30C8	12488	KATAKANA LETTER TO
ド	Do	30C9	12489	KATAKANA LETTER DO
ナ	Na	30CA	12490	KATAKANA LETTER NA
ニ	Ni	30CB	12491	KATAKANA LETTER NI
ヌ	Nu	30CC	12492	KATAKANA LETTER NU
ネ	Ne	30CD	12493	KATAKANA LETTER NE
ノ	No	30CE	12494	KATAKANA LETTER NO
ハ	Ha	30CF	12495	KATAKANA LETTER HA
バ	Ba	30D0	12496	KATAKANA LETTER BA
パ	Pa	30D1	12497	KATAKANA LETTER PA
ヒ	Hi	30D2	12498	KATAKANA LETTER HI
ビ	Bi	30D3	12499	KATAKANA LETTER BI
ピ	Pi	30D4	12500	KATAKANA LETTER PI
フ	Hu	30D5	12501	KATAKANA LETTER HU
ブ	Bu	30D6	12502	KATAKANA LETTER BU
プ	Pu	30D7	12503	KATAKANA LETTER PU
ヘ	He	30D8	12504	KATAKANA LETTER HE
ベ	Be	30D9	12505	KATAKANA LETTER BE
ペ	Pe	30DA	12506	KATAKANA LETTER PE
ホ	Ho	30DB	12507	KATAKANA LETTER HO
ボ	Bo	30DC	12508	KATAKANA LETTER BO
ポ	Po	30DD	12509	KATAKANA LETTER PO
マ	Ma	30DE	12510	KATAKANA LETTER MA
ミ	Mi	30DF	12511	KATAKANA LETTER MI
ム	Mu	30E0	12512	KATAKANA LETTER MU
メ	Me	30E1	12513	KATAKANA LETTER ME
モ	Mo	30E2	12514	KATAKANA LETTER MO
ャ	YA	30E3	12515	KATAKANA LETTER SMALL YA
ヤ	Ya	30E4	12516	KATAKANA LETTER YA
ュ	YU	30E5	12517	KATAKANA LETTER SMALL YU
ユ	Yu	30E6	12518	KATAKANA LETTER YU
ョ	YO	30E7	12519	KATAKANA LETTER SMALL YO
ヨ	Yo	30E8	12520	KATAKANA LETTER YO
ラ	Ra	30E9	12521	KATAKANA LETTER RA
リ	Ri	30EA	12522	KATAKANA LETTER RI
ル	Ru	30EB	12523	KATAKANA LETTER RU
レ	Re	30EC	12524	KATAKANA LETTER RE
ロ	Ro	30ED	12525	KATAKANA LETTER RO
ヮ	WA	30EE	12526	KATAKANA LETTER SMALL WA
ワ	Wa	30EF	12527	KATAKANA LETTER WA
ヰ	Wi	30F0	12528	KATAKANA LETTER WI
ヱ	We	30F1	12529	KATAKANA LETTER WE
ヲ	Wo	30F2	12530	KATAKANA LETTER WO
ン	N6	30F3	12531	KATAKANA LETTER N `
ヴ	Vu	30F4	12532	KATAKANA LETTER VU
ヵ	KA	30F5	12533	KATAKANA LETTER SMALL KA
ヶ	KE	30F6	12534	KATAKANA LETTER SMALL KE
ヷ	Va	30F7	12535	KATAKANA LETTER VA
ヸ	Vi	30F8	12536	KATAKANA LETTER VI
ヹ	Ve	30F9	12537	KATAKANA LETTER VE
ヺ	Vo	30FA	12538	KATAKANA LETTER VO
・	.6	30FB	12539	KATAKANA MIDDLE DOT
ー	-6	30FC	12540	KATAKANA-HIRAGANA PROLONGED SOUND MARK
ヽ	*6	30FD	12541	KATAKANA ITERATION MARK
ヾ	+6	30FE	12542	KATAKANA VOICED ITERATION MARK
ㄅ	b4	3105	12549	BOPOMOFO LETTER B
ㄆ	p4	3106	12550	BOPOMOFO LETTER P
ㄇ	m4	3107	12551	BOPOMOFO LETTER M
ㄈ	f4	3108	12552	BOPOMOFO LETTER F
ㄉ	d4	3109	12553	BOPOMOFO LETTER D
ㄊ	t4	310A	12554	BOPOMOFO LETTER T
ㄋ	n4	310B	12555	BOPOMOFO LETTER N `
ㄌ	l4	310C	12556	BOPOMOFO LETTER L
ㄍ	g4	310D	12557	BOPOMOFO LETTER G
ㄎ	k4	310E	12558	BOPOMOFO LETTER K
ㄏ	h4	310F	12559	BOPOMOFO LETTER H
ㄐ	j4	3110	12560	BOPOMOFO LETTER J
ㄑ	q4	3111	12561	BOPOMOFO LETTER Q
ㄒ	x4	3112	12562	BOPOMOFO LETTER X
ㄓ	zh	3113	12563	BOPOMOFO LETTER ZH
ㄔ	ch	3114	12564	BOPOMOFO LETTER CH
ㄕ	sh	3115	12565	BOPOMOFO LETTER SH
ㄖ	r4	3116	12566	BOPOMOFO LETTER R
ㄗ	z4	3117	12567	BOPOMOFO LETTER Z
ㄘ	c4	3118	12568	BOPOMOFO LETTER C
ㄙ	s4	3119	12569	BOPOMOFO LETTER S
ㄚ	a4	311A	12570	BOPOMOFO LETTER A
ㄛ	o4	311B	12571	BOPOMOFO LETTER O
ㄜ	e4	311C	12572	BOPOMOFO LETTER E
ㄞ	ai	311E	12574	BOPOMOFO LETTER AI
ㄟ	ei	311F	12575	BOPOMOFO LETTER EI
ㄠ	au	3120	12576	BOPOMOFO LETTER AU
ㄡ	ou	3121	12577	BOPOMOFO LETTER OU
ㄢ	an	3122	12578	BOPOMOFO LETTER AN
ㄣ	en	3123	12579	BOPOMOFO LETTER EN
ㄤ	aN	3124	12580	BOPOMOFO LETTER ANG
ㄥ	eN	3125	12581	BOPOMOFO LETTER ENG
ㄦ	er	3126	12582	BOPOMOFO LETTER ER
ㄧ	i4	3127	12583	BOPOMOFO LETTER I
ㄨ	u4	3128	12584	BOPOMOFO LETTER U
ㄩ	iu	3129	12585	BOPOMOFO LETTER IU
ㄪ	v4	312A	12586	BOPOMOFO LETTER V
ㄫ	nG	312B	12587	BOPOMOFO LETTER NG
ㄬ	gn	312C	12588	BOPOMOFO LETTER GN
㈠	1c	3220	12832	PARENTHESIZED IDEOGRAPH ONE
㈡	2c	3221	12833	PARENTHESIZED IDEOGRAPH TWO
㈢	3c	3222	12834	PARENTHESIZED IDEOGRAPH THREE
㈣	4c	3223	12835	PARENTHESIZED IDEOGRAPH FOUR
㈤	5c	3224	12836	PARENTHESIZED IDEOGRAPH FIVE
㈥	6c	3225	12837	PARENTHESIZED IDEOGRAPH SIX
㈦	7c	3226	12838	PARENTHESIZED IDEOGRAPH SEVEN
㈧	8c	3227	12839	PARENTHESIZED IDEOGRAPH EIGHT
㈨	9c	3228	12840	PARENTHESIZED IDEOGRAPH NINE
ﬀ	ff	FB00	64256	LATIN SMALL LIGATURE FF
ﬁ	fi	FB01	64257	LATIN SMALL LIGATURE FI
ﬂ	fl	FB02	64258	LATIN SMALL LIGATURE FL
ﬅ	ft	FB05	64261	LATIN SMALL LIGATURE LONG S T
ﬆ	st	FB06	64262	LATIN SMALL LIGATURE ST

 vim:tw=78:ts=8:noet:ft=help:norl:
                                                                                                                                                                                                                                                                                                                                                                  usr/share/vim/vim90/doc/editing.txt                                                                 0000644 0000000 0000000 00000226105 14424703754 015667  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        *editing.txt*   For Vim version 9.0.  Last change: 2022 Nov 02


		  VIM REFERENCE MANUAL    by Bram Moolenaar


Editing files						*edit-files*

1.  Introduction		|edit-intro|
2.  Editing a file		|edit-a-file|
3.  The argument list		|argument-list|
4.  Writing			|writing|
5.  Writing and quitting	|write-quit|
6.  Dialogs			|edit-dialogs|
7.  The current directory	|current-directory|
8.  Editing binary files	|edit-binary|
9.  Encryption			|encryption|
10. Timestamps			|timestamps|
11. File Searching		|file-searching|

==============================================================================
1. Introduction						*edit-intro*

Editing a file with Vim means:

1. reading the file into a buffer
2. changing the buffer with editor commands
3. writing the buffer into a file

							*current-file*
As long as you don't write the buffer, the original file remains unchanged.
If you start editing a file (read a file into the buffer), the file name is
remembered as the "current file name".  This is also known as the name of the
current buffer.  It can be used with "%" on the command line |:_%|.

							*alternate-file*
If there already was a current file name, then that one becomes the alternate
file name.  It can be used with "#" on the command line |:_#| and you can use
the |CTRL-^| command to toggle between the current and the alternate file.
However, the alternate file name is not changed when |:keepalt| is used.
An alternate file name is remembered for each window.

							*:keepalt* *:keepa*
:keepalt {cmd}		Execute {cmd} while keeping the current alternate file
			name.  Note that commands invoked indirectly (e.g.,
			with a function) may still set the alternate file
			name.

All file names are remembered in the buffer list.  When you enter a file name,
for editing (e.g., with ":e filename") or writing (e.g., with ":w filename"),
the file name is added to the list.  You can use the buffer list to remember
which files you edited and to quickly switch from one file to another (e.g.,
to copy text) with the |CTRL-^| command.  First type the number of the file
and then hit CTRL-^.


CTRL-G		or				*CTRL-G* *:f* *:fi* *:file*
:f[ile]			Prints the current file name (as typed, unless ":cd"
			was used), the cursor position (unless the 'ruler'
			option is set), and the file status (readonly,
			modified, read errors, new file).  See the 'shortmess'
			option about how to make this message shorter.

:f[ile]!		like |:file|, but don't truncate the name even when
			'shortmess' indicates this.

{count}CTRL-G		Like CTRL-G, but prints the current file name with
			full path.  If the count is higher than 1 the current
			buffer number is also given.

					*g_CTRL-G* *word-count* *byte-count*
g CTRL-G		Prints the current position of the cursor in five
			ways: Column, Line, Word, Character and Byte.  If the
			number of Characters and Bytes is the same then the
			Character position is omitted.

			If there are characters in the line that take more
			than one position on the screen (<Tab> or special
			character), or characters using more than one byte per
			column (characters above 0x7F when 'encoding' is
			utf-8), both the byte column and the screen column are
			shown, separated by a dash.

			Also see the 'ruler' option and the |wordcount()|
			function.

							*v_g_CTRL-G*
{Visual}g CTRL-G	Similar to "g CTRL-G", but Word, Character, Line, and
			Byte counts for the visually selected region are
			displayed.
			In Blockwise mode, Column count is also shown.  (For
			{Visual} see |Visual-mode|.)

							*:file_f*
:f[ile][!] {name}	Sets the current file name to {name}.  The optional !
			avoids truncating the message, as with |:file|.
			If the buffer did have a name, that name becomes the
			|alternate-file| name.  An unlisted buffer is created
			to hold the old name.
							*:0file*
:0f[ile][!]		Remove the name of the current buffer.  The optional !
			avoids truncating the message, as with |:file|.

:buffers
:files
:ls			List all the currently known file names.  See
			|windows.txt| |:files| |:buffers| |:ls|.

Vim will remember the full path name of a file name that you enter.  In most
cases when the file name is displayed only the name you typed is shown, but
the full path name is being used if you used the ":cd" command |:cd|.

							*home-replace*
If the environment variable $HOME is set, and the file name starts with that
string, it is often displayed with HOME replaced with "~".  This was done to
keep file names short.  When reading or writing files the full name is still
used, the "~" is only used when displaying file names.  When replacing the
file name would result in just "~", "~/" is used instead (to avoid confusion
between options set to $HOME with 'backupext' set to "~").

When writing the buffer, the default is to use the current file name.  Thus
when you give the "ZZ" or ":wq" command, the original file will be
overwritten.  If you do not want this, the buffer can be written into another
file by giving a file name argument to the ":write" command.  For example: >

	vim testfile
	[change the buffer with editor commands]
	:w newfile
	:q

This will create a file "newfile", that is a modified copy of "testfile".
The file "testfile" will remain unchanged.  Anyway, if the 'backup' option is
set, Vim renames or copies the original file before it will be overwritten.
You can use this file if you discover that you need the original file.  See
also the 'patchmode' option.  The name of the backup file is normally the same
as the original file with 'backupext' appended.  The default "~" is a bit
strange to avoid accidentally overwriting existing files.  If you prefer ".bak"
change the 'backupext' option.  Extra dots are replaced with '_' on MS-Windows
machines, when Vim has detected that an MS-DOS-like filesystem is being used
(e.g., messydos or crossdos) or when the 'shortname' option is on.  The
backup file can be placed in another directory by setting 'backupdir'.

							*auto-shortname*
Technical: On the Amiga you can use 30 characters for a file name.  But on an
	   MS-DOS-compatible filesystem only 8 plus 3 characters are
	   available.  Vim tries to detect the type of filesystem when it is
	   creating the .swp file.  If an MS-DOS-like filesystem is suspected,
	   a flag is set that has the same effect as setting the 'shortname'
	   option.  This flag will be reset as soon as you start editing a
	   new file.  The flag will be used when making the file name for the
	   ".swp" and ".~" files for the current file.  But when you are
	   editing a file in a normal filesystem and write to an MS-DOS-like
	   filesystem the flag will not have been set.  In that case the
	   creation of the ".~" file may fail and you will get an error
	   message.  Use the 'shortname' option in this case.

When you started editing without giving a file name, "No File" is displayed in
messages.  If the ":write" command is used with a file name argument, the file
name for the current file is set to that file name.  This only happens when
the 'F' flag is included in 'cpoptions' (by default it is included) |cpo-F|.
This is useful when entering text in an empty buffer and then writing it to a
file.  If 'cpoptions' contains the 'f' flag (by default it is NOT included)
|cpo-f| the file name is set for the ":read file" command.  This is useful
when starting Vim without an argument and then doing ":read file" to start
editing a file.
When the file name was set and 'filetype' is empty the filetype detection
autocommands will be triggered.
							*not-edited*
Because the file name was set without really starting to edit that file, you
are protected from overwriting that file.  This is done by setting the
"notedited" flag.  You can see if this flag is set with the CTRL-G or ":file"
command.  It will include "[Not edited]" when the "notedited" flag is set.
When writing the buffer to the current file name (with ":w!"), the "notedited"
flag is reset.

							*abandon*
Vim remembers whether you have changed the buffer.  You are protected from
losing the changes you made.  If you try to quit without writing, or want to
start editing another file, Vim will refuse this.  In order to overrule this
protection, add a '!' to the command.  The changes will then be lost.  For
example: ":q" will not work if the buffer was changed, but ":q!" will.  To see
whether the buffer was changed use the "CTRL-G" command.  The message includes
the string "[Modified]" if the buffer has been changed, or "+" if the 'm' flag
is in 'shortmess'.

If you want to automatically save the changes without asking, switch on the
'autowriteall' option.  'autowrite' is the associated Vi-compatible option
that does not work for all commands.

If you want to keep the changed buffer without saving it, switch on the
'hidden' option.  See |hidden-buffer|.  Some commands work like this even when
'hidden' is not set, check the help for the command.

==============================================================================
2. Editing a file					*edit-a-file*

							*:e* *:edit* *reload*
:e[dit] [++opt] [+cmd]	Edit the current file.  This is useful to re-edit the
			current file, when it has been changed outside of Vim.
			This fails when changes have been made to the current
			buffer and 'autowriteall' isn't set or the file can't
			be written.
			Also see |++opt| and |+cmd|.

							*:edit!* *discard*
:e[dit]! [++opt] [+cmd]
			Edit the current file always.  Discard any changes to
			the current buffer.  This is useful if you want to
			start all over again.
			Also see |++opt| and |+cmd|.

							*:edit_f*
:e[dit] [++opt] [+cmd] {file}
			Edit {file}.
			This fails when changes have been made to the current
			buffer, unless 'hidden' is set or 'autowriteall' is
			set and the file can be written.
			Also see |++opt| and |+cmd|.

							*:edit!_f*
:e[dit]! [++opt] [+cmd] {file}
			Edit {file} always.  Discard any changes to the
			current buffer.
			Also see |++opt| and |+cmd|.
							*:edit_#* *:e#*
:e[dit] [++opt] [+cmd] #[count]
			Edit the [count]th buffer (as shown by |:files|).
			This command does the same as [count] CTRL-^.  But ":e
			#" doesn't work if the alternate buffer doesn't have a
			file name, while CTRL-^ still works then.
			Also see |++opt| and |+cmd|.

							*:ene* *:enew*
:ene[w]			Edit a new, unnamed buffer.  This fails when changes
			have been made to the current buffer, unless 'hidden'
			is set or 'autowriteall' is set and the file can be
			written.
			If 'fileformats' is not empty, the first format given
			will be used for the new buffer.  If 'fileformats' is
			empty, the 'fileformat' of the current buffer is used.

							*:ene!* *:enew!*
:ene[w]!		Edit a new, unnamed buffer.  Discard any changes to
			the current buffer.
			Set 'fileformat' like |:enew|.

							*:fin* *:find*
:fin[d][!] [++opt] [+cmd] {file}
			Find {file} in 'path' and then |:edit| it.

:{count}fin[d][!] [++opt] [+cmd] {file}
			Just like ":find", but use the {count} match in
			'path'.  Thus ":2find file" will find the second
			"file" found in 'path'.  When there are fewer matches
			for the file in 'path' than asked for, you get an
			error message.

							*:ex*
:ex [++opt] [+cmd] [file]
			Same as |:edit|.

							*:vi* *:visual*
:vi[sual][!] [++opt] [+cmd] [file]
			When used in Ex mode: Leave |Ex-mode|, go back to
			Normal mode.  Otherwise same as |:edit|.

							*:vie* *:view*
:vie[w][!] [++opt] [+cmd] file
			When used in Ex mode: Leave |Ex-mode|, go back to
			Normal mode.  Otherwise same as |:edit|, but set
			'readonly' option for this buffer.

							*CTRL-^* *CTRL-6*
CTRL-^			Edit the alternate file.  Mostly the alternate file is
			the previously edited file.  This is a quick way to
			toggle between two files.  It is equivalent to ":e #",
			except that it also works when there is no file name.

			If the 'autowrite' or 'autowriteall' option is on and
			the buffer was changed, write it.
			Mostly the ^ character is positioned on the 6 key,
			pressing CTRL and 6 then gets you what we call CTRL-^.
			But on some non-US keyboards CTRL-^ is produced in
			another way.

{count}CTRL-^		Edit [count]th file in the buffer list (equivalent to
			":e #[count]").  This is a quick way to switch between
			files.
			See |CTRL-^| above for further details.

[count]]f						*]f* *[f*
[count][f		Same as "gf".  Deprecated.

							*gf* *E446* *E447*
[count]gf		Edit the file whose name is under or after the cursor.
			Mnemonic: "goto file".
			Uses the 'isfname' option to find out which characters
			are supposed to be in a file name.  Trailing
			punctuation characters ".,:;!" are ignored. Escaped
			spaces "\ " are reduced to a single space.
			Uses the 'path' option as a list of directory names to
			look for the file.  See the 'path' option for details
			about relative directories and wildcards.
			Uses the 'suffixesadd' option to check for file names
			with a suffix added.
			If the file can't be found, 'includeexpr' is used to
			modify the name and another attempt is done.
			If a [count] is given, the count'th file that is found
			in the 'path' is edited.
			This command fails if Vim refuses to |abandon| the
			current file.
			If you want to edit the file in a new window use
			|CTRL-W_CTRL-F|.
			If you do want to edit a new file, use: >
				:e <cfile>
<			To make gf always work like that: >
				:map gf :e <cfile><CR>
<			If the name is a hypertext link, that looks like
			"type://machine/path", you need the |netrw| plugin.
			For Unix the '~' character is expanded, like in
			"~user/file".  Environment variables are expanded too
			|expand-env|.

							*v_gf*
{Visual}[count]gf	Same as "gf", but the highlighted text is used as the
			name of the file to edit.  'isfname' is ignored.
			Leading blanks are skipped, otherwise all blanks and
			special characters are included in the file name.
			(For {Visual} see |Visual-mode|.)

							*gF*
[count]gF		Same as "gf", except if a number follows the file
			name, then the cursor is positioned on that line in
			the file.
			The file name and the number must be separated by a
			non-filename (see 'isfname') and non-numeric
			character. " line " is also recognized, like it is
			used in the output of `:verbose command UserCmd`
			White space between the filename, the separator and
			the number are ignored.
			Examples:
				eval.c:10 ~
				eval.c @ 20 ~
				eval.c (30) ~
				eval.c 40 ~

							*v_gF*
{Visual}[count]gF	Same as "v_gf".

These commands are used to start editing a single file.  This means that the
file is read into the buffer and the current file name is set.  The file that
is opened depends on the current directory, see |:cd|.

See |read-messages| for an explanation of the message that is given after the
file has been read.

You can use the ":e!" command if you messed up the buffer and want to start
all over again.  The ":e" command is only useful if you have changed the
current file name.

							*:filename* *{file}*
Besides the things mentioned here, more special items for where a filename is
expected are mentioned at |cmdline-special|.

Note for systems other than Unix: When using a command that accepts a single
file name (like ":edit file") spaces in the file name are allowed, but
trailing spaces are ignored.  This is useful on systems that regularly embed
spaces in file names (like MS-Windows and the Amiga).  Example: The command
":e   Long File Name " will edit the file "Long File Name".  When using a
command that accepts more than one file name (like ":next file1 file2")
embedded spaces must be escaped with a backslash.

						*wildcard* *wildcards*
Wildcards in {file} are expanded, but as with file completion, 'wildignore'
and 'suffixes' apply.  Which wildcards are supported depends on the system.
These are the common ones:
	?	matches one character
	*	matches anything, including nothing
	**	matches anything, including nothing, recurses into directories
	[abc]	match 'a', 'b' or 'c'

To avoid the special meaning of the wildcards prepend a backslash.  However,
on MS-Windows the backslash is a path separator and "path\[abc]" is still seen
as a wildcard when "[" is in the 'isfname' option.  A simple way to avoid this
is to use "path\[[]abc]", this matches the file "path\[abc]".

					*starstar-wildcard*
Expanding "**" is possible on Unix, Win32, macOS and a few other systems.
This allows searching a directory tree.  This goes up to 100 directories deep.
Note there are some commands where this works slightly differently, see
|file-searching|.
Example: >
	:n **/*.txt
Finds files:
	aaa.txt ~
	subdir/bbb.txt ~
	a/b/c/d/ccc.txt ~
When non-wildcard characters are used right before or after "**" these are
only matched in the top directory.  They are not used for directories further
down in the tree. For example: >
	:n /usr/inc**/types.h
Finds files:
	/usr/include/types.h ~
	/usr/include/sys/types.h ~
	/usr/inc/old/types.h ~
Note that the path with "/sys" is included because it does not need to match
"/inc".  Thus it's like matching "/usr/inc*/*/*...", not
"/usr/inc*/inc*/inc*".

					*backtick-expansion* *`-expansion*
On Unix and a few other systems you can also use backticks for the file name
argument, for example: >
	:next `find . -name ver\\*.c -print`
	:view `ls -t *.patch  \| head -n1`
Vim will run the command in backticks using the 'shell' and use the standard
output as argument for the given Vim command (error messages from the shell
command will be discarded).
To see what shell command Vim is running, set the 'verbose' option to 4. When
the shell command returns a non-zero exit code, an error message will be
displayed and the Vim command will be aborted. To avoid this make the shell
always return zero like so: >
       :next `find . -name ver\\*.c -print \|\| true`

The backslashes before the star are required to prevent the shell from
expanding "ver*.c" prior to execution of the find program.  The backslash
before the shell pipe symbol "|" prevents Vim from parsing it as command
termination.
This also works for most other systems, with the restriction that the
backticks must be around the whole item.  It is not possible to have text
directly before the first or just after the last backtick.

						*`=* *E1083*
You can have the backticks expanded as a Vim expression, instead of as an
external command, by putting an equal sign right after the first backtick,
e.g.: >
	:e `=tempname()`
The expression can contain just about anything, thus this can also be used to
avoid the special meaning of '"', '|', '%' and '#'.  However, 'wildignore'
does apply like to other wildcards.

