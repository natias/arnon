variables outside the loop.

=head3 Grammatical note on local()
X<local, context>

A C<local> is simply a modifier on an lvalue expression.  When you assign to
a C<local>ized variable, the C<local> doesn't change whether its list is
viewed as a scalar or an array.  So

    local($foo) = <STDIN>;
    local @FOO = <STDIN>;

both supply a list context to the right-hand side, while

    local $foo = <STDIN>;

supplies a scalar context.

=head3 Localization of special variables
X<local, special variable>

If you localize a special variable, you'll be giving a new value to it,
but its magic won't go away.  That means that all side-effects related
to this magic still work with the localized value.

This feature allows code like this to work :

    # Read the whole contents of FILE in $slurp
    { local $/ = undef; $slurp = <FILE>; }

Note, however, that this restricts localization of some values ; for
example, the following statement dies, as of Perl 5.10.0, with an error
I<Modification of a read-only value attempted>, because the $1 variable is
magical and read-only :

    local $1 = 2;

One exception is the default scalar variable: starting with Perl 5.14
C<local($_)> will always strip all magic from $_, to make it possible
to safely reuse $_ in a subroutine.

B<WARNING>: Localization of tied arrays and hashes does not currently
work as described.
This will be fixed in a future release of Perl; in the meantime, avoid
code that relies on any particular behavior of localising tied arrays
or hashes (localising individual elements is still okay).
See L<perl58delta/"Localising Tied Arrays and Hashes Is Broken"> for more
details.
X<local, tie>

=head3 Localization of globs
X<local, glob> X<glob>

The construct

    local *name;

creates a whole new symbol table entry for the glob C<name> in the
current package.  That means that all variables in its glob slot ($name,
@name, %name, &name, and the C<name> filehandle) are dynamically reset.

This implies, among other things, that any magic eventually carried by
those variables is locally lost.  In other words, saying C<local */>
will not have any effect on the internal value of the input record
separator.

=head3 Localization of elements of composite types
X<local, composite type element> X<local, array element>
X<local, hash element>

It's also worth taking a moment to explain what happens when you
C<local>ize a member of a composite type (i.e. an array or hash element).
In this case, the element is C<local>ized I<by name>.  This means that
when the scope of the C<local()> ends, the saved value will be
restored to the hash element whose key was named in the C<local()>, or
the array element whose index was named in the C<local()>.  If that
element was deleted while the C<local()> was in effect (e.g. by a
C<delete()> from a hash or a C<shift()> of an array), it will spring
back into existence, possibly extending an array and filling in the
skipped elements with C<undef>.  For instance, if you say

    %hash = ( 'This' => 'is', 'a' => 'test' );
    @ary  = ( 0..5 );
    {
        local($ary[5]) = 6;
        local($hash{'a'}) = 'drill';
        while (my $e = pop(@ary)) {
            print "$e . . .\n";
            last unless $e > 3;
        }
        if (@ary) {
            $hash{'only a'} = 'test';
            delete $hash{'a'};
        }
    }
    print join(' ', map { "$_ $hash{$_}" } sort keys %hash),".\n";
    print "The array has ",scalar(@ary)," elements: ",
        join(', ', map { defined $_ ? $_ : 'undef' } @ary),"\n";

Perl will print

    6 . . .
    4 . . .
    3 . . .
    This is a test only a test.
    The array has 6 elements: 0, 1, 2, undef, undef, 5

The behavior of local() on non-existent members of composite
types is subject to change in future. The behavior of local()
on array elements specified using negative indexes is particularly
surprising, and is very likely to change.

=head3 Localized deletion of elements of composite types
X<delete> X<local, composite type element> X<local, array element>
X<local, hash element>

You can use the C<delete local $array[$idx]> and C<delete local $hash{key}>
constructs to delete a composite type entry for the current block and restore
it when it ends.  They return the array/hash value before the localization,
which means that they are respectively equivalent to

    do {
        my $val = $array[$idx];
        local  $array[$idx];
        delete $array[$idx];
        $val
    }

and

    do {
        my $val = $hash{key};
        local  $hash{key};
        delete $hash{key};
        $val
    }

except that for those the C<local> is
scoped to the C<do> block.  Slices are
also accepted.

    my %hash = (
        a => [ 7, 8, 9 ],
        b => 1,
    )

    {
        my $x = delete local $hash{a};
        # $x is [ 7, 8, 9 ]
        # %hash is (b => 1)

        {
            my @nums = delete local @$x[0, 2]
            # @nums is (7, 9)
            # $x is [ undef, 8 ]

            $x[0] = 999; # will be erased when the scope ends
        }
        # $x is back to [ 7, 8, 9 ]

    }
    # %hash is back to its original state

This construct is supported since Perl v5.12.

=head2 Lvalue subroutines
X<lvalue> X<subroutine, lvalue>

It is possible to return a modifiable value from a subroutine.
To do this, you have to declare the subroutine to return an lvalue.

    my $val;
    sub canmod : lvalue {
        $val;  # or:  return $val;
    }
    sub nomod {
        $val;
    }

    canmod() = 5;   # assigns to $val
    nomod()  = 5;   # ERROR

The scalar/list context for the subroutine and for the right-hand
side of assignment is determined as if the subroutine call is replaced
by a scalar.  For example, consider:

    data(2,3) = get_data(3,4);

Both subroutines here are called in a scalar context, while in:

    (data(2,3)) = get_data(3,4);

and in:

    (data(2),data(3)) = get_data(3,4);

all the subroutines are called in a list context.

Lvalue subroutines are convenient, but you have to keep in mind that,
when used with objects, they may violate encapsulation.  A normal
mutator can check the supplied argument before setting the attribute
it is protecting, an lvalue subroutine cannot.  If you require any
special processing when storing and retrieving the values, consider
using the CPAN module Sentinel or something similar.

=head2 Lexical Subroutines
X<my sub> X<state sub> X<our sub> X<subroutine, lexical>

Beginning with Perl 5.18, you can declare a private subroutine with C<my>
or C<state>.  As with state variables, the C<state> keyword is only
available under C<use feature 'state'> or C<use v5.10> or higher.

Prior to Perl 5.26, lexical subroutines were deemed experimental and were
available only under the C<use feature 'lexical_subs'> pragma.  They also
produced a warning unless the "experimental::lexical_subs" warnings
category was disabled.

These subroutines are only visible within the block in which they are
declared, and only after that declaration:

    # Include these two lines if your code is intended to run under Perl
    # versions earlier than 5.26.
    no warnings "experimental::lexical_subs";
    use feature 'lexical_subs';

    foo();              # calls the package/global subroutine
    state sub foo {
        foo();          # also calls the package subroutine
    }
    foo();              # calls "state" sub
    my $ref = \&foo;    # take a reference to "state" sub

    my sub bar { ... }
    bar();              # calls "my" sub

You can't (directly) write a recursive lexical subroutine:

    # WRONG
    my sub baz {
        baz();
    }

This example fails because C<baz()> refers to the package/global subroutine
C<baz>, not the lexical subroutine currently being defined.

The solution is to use L<C<__SUB__>|perlfunc/__SUB__>:

    my sub baz {
        __SUB__->();    # calls itself
    }

It is possible to predeclare a lexical subroutine.  The C<sub foo {...}>
subroutine definition syntax respects any previous C<my sub;> or C<state sub;>
declaration.  Using this to define recursive subroutines is a bad idea,
however:

    my sub baz;         # predeclaration
    sub baz {           # define the "my" sub
        baz();          # WRONG: calls itself, but leaks memory
    }

Just like C<< my $f; $f = sub { $f->() } >>, this example leaks memory.  The
name C<baz> is a reference to the subroutine, and the subroutine uses the name
C<baz>; they keep each other alive (see L<perlref/Circular References>).

=head3 C<state sub> vs C<my sub>

What is the difference between "state" subs and "my" subs?  Each time that
execution enters a block when "my" subs are declared, a new copy of each
sub is created.  "State" subroutines persist from one execution of the
containing block to the next.

So, in general, "state" subroutines are faster.  But "my" subs are
necessary if you want to create closures:

    sub whatever {
        my $x = shift;
        my sub inner {
            ... do something with $x ...
        }
        inner();
    }

In this example, a new C<$x> is created when C<whatever> is called, and
also a new C<inner>, which can see the new C<$x>.  A "state" sub will only
see the C<$x> from the first call to C<whatever>.

=head3 C<our> subroutines

Like C<our $variable>, C<our sub> creates a lexical alias to the package
subroutine of the same name.

The two main uses for this are to switch back to using the package sub
inside an inner scope:

    sub foo { ... }

    sub bar {
        my sub foo { ... }
        {
            # need to use the outer foo here
            our sub foo;
            foo();
        }
    }

and to make a subroutine visible to other packages in the same scope:

    package MySneakyModule;

    our sub do_something { ... }

    sub do_something_with_caller {
        package DB;
        () = caller 1;          # sets @DB::args
        do_something(@args);    # uses MySneakyModule::do_something
    }

=head2 Passing Symbol Table Entries (typeglobs)
X<typeglob> X<*>

B<WARNING>: The mechanism described in this section was originally
the only way to simulate pass-by-reference in older versions of
Perl.  While it still works fine in modern versions, the new reference
mechanism is generally easier to work with.  See below.

Sometimes you don't want to pass the value of an array to a subroutine
but rather the name of it, so that the subroutine can modify the global
copy of it rather than working with a local copy.  In Perl you can
refer to all objects of a particular name by prefixing the name
with a star: C<*foo>.  This is often known as a "typeglob", because the
star on the front can be thought of as a wildcard match for all the
funny prefix characters on variables and subroutines and such.

When evaluated, the typeglob produces a scalar value that represents
all the objects of that name, including any filehandle, format, or
subroutine.  When assigned to, it causes the name mentioned to refer to
whatever C<*> value was assigned to it.  Example:

    sub doubleary {
        local(*someary) = @_;
        foreach $elem (@someary) {
            $elem *= 2;
        }
    }
    doubleary(*foo);
    doubleary(*bar);

Scalars are already passed by reference, so you can modify
scalar arguments without using this mechanism by referring explicitly
to C<$_[0]> etc.  You can modify all the elements of an array by passing
all the elements as scalars, but you have to use the C<*> mechanism (or
the equivalent reference mechanism) to C<push>, C<pop>, or change the size of
an array.  It will certainly be faster to pass the typeglob (or reference).

Even if you don't want to modify an array, this mechanism is useful for
passing multiple arrays in a single LIST, because normally the LIST
mechanism will merge all the array values so that you can't extract out
the individual arrays.  For more on typeglobs, see
L<perldata/"Typeglobs and Filehandles">.

=head2 When to Still Use local()
X<local> X<variable, local>

Despite the existence of C<my>, there are still three places where the
C<local> operator still shines.  In fact, in these three places, you
I<must> use C<local> instead of C<my>.

=over 4

=item 1.

You need to give a global variable a temporary value, especially $_.

The global variables, like C<@ARGV> or the punctuation variables, must be
C<local>ized with C<local()>.  This block reads in F</etc/motd>, and splits
it up into chunks separated by lines of equal signs, which are placed
in C<@Fields>.

    {
        local @ARGV = ("/etc/motd");
        local $/ = undef;
        local $_ = <>;
        @Fields = split /^\s*=+\s*$/;
    }

It particular, it's important to C<local>ize $_ in any routine that assigns
to it.  Look out for implicit assignments in C<while> conditionals.

=item 2.

You need to create a local file or directory handle or a local function.

A function that needs a filehandle of its own must use
C<local()> on a complete typeglob.   This can be used to create new symbol
table entries:

    sub ioqueue {
        local  (*READER, *WRITER);    # not my!
        pipe    (READER,  WRITER)     or die "pipe: $!";
        return (*READER, *WRITER);
    }
    ($head, $tail) = ioqueue();

See the Symbol module for a way to create anonymous symbol table
entries.

Because assignment of a reference to a typeglob creates an alias, this
can be used to create what is effectively a local function, or at least,
a local alias.

    {
        local *grow = \&shrink; # only until this block exits
        grow();                # really calls shrink()
        move();                # if move() grow()s, it shrink()s too
    }
    grow();                    # get the real grow() again

See L<perlref/"Function Templates"> for more about manipulating
functions by name in this way.

=item 3.

You want to temporarily change just one element of an array or hash.

You can C<local>ize just one element of an aggregate.  Usually this
is done on dynamics:

    {
        local $SIG{INT} = 'IGNORE';
        funct();                            # uninterruptible
    }
    # interruptibility automatically restored here

But it also works on lexically declared aggregates.

=back

=head2 Pass by Reference
X<pass by reference> X<pass-by-reference> X<reference>

If you want to pass more than one array or hash into a function--or
return them from it--and have them maintain their integrity, then
you're going to have to use an explicit pass-by-reference.  Before you
do that, you need to understand references as detailed in L<perlref>.
This section may not make much sense to you otherwise.

Here are a few simple examples.  First, let's pass in several arrays
to a function and have it C<pop> all of then, returning a new list
of all their former last elements:

    @tailings = popmany ( \@w, \@x, \@y, \@z );

    sub popmany {
        my $aref;
        my @retlist;
        foreach $aref ( @_ ) {
            push @retlist, pop @$aref;
        }
        return @retlist;
    }

Here's how you might write a function that returns a
list of keys occurring in all the hashes passed to it:

    @common = inter( \%foo, \%bar, \%joe );
    sub inter {
        my ($k, $href, %seen); # locals
        foreach $href (@_) {
            while ( $k = each %$href ) {
                $seen{$k}++;
            }
        }
        return grep { $seen{$_} == @_ } keys %seen;
    }

So far, we're using just the normal list return mechanism.
What happens if you want to pass or return a hash?  Well,
if you're using only one of them, or you don't mind them
concatenating, then the normal calling convention is ok, although
a little expensive.

Where people get into trouble is here:

    (@w, @x) = func(@y, @z);
or
    (%w, %x) = func(%y, %z);

That syntax simply won't work.  It sets just C<@w> or C<%w> and
clears the C<@x> or C<%x>.  Plus the function didn't get passed
into two separate arrays or hashes: it got one long list in C<@_>,
as always.

If you can arrange for everyone to deal with this through references, it's
cleaner code, although not so nice to look at.  Here's a function that
takes two array references as arguments, returning the two array elements
in order of how many elements they have in them:

    ($wref, $xref) = func(\@y, \@z);
    print "@$wref has more than @$xref\n";
    sub func {
        my ($yref, $zref) = @_;
        if (@$yref > @$zref) {
            return ($yref, $zref);
        } else {
            return ($zref, $yref);
        }
    }

It turns out that you can actually do this also:

    (*w, *x) = func(\@y, \@z);
    print "@w has more than @x\n";
    sub func {
        local (*y, *z) = @_;
        if (@y > @z) {
            return (\@y, \@z);
        } else {
            return (\@z, \@y);
        }
    }

Here we're using the typeglobs to do symbol table aliasing.  It's
a tad subtle, though, and also won't work if you're using C<my>
variables, because only globals (even in disguise as C<local>s)
are in the symbol table.

If you're passing around filehandles, you could usually just use the bare
typeglob, like C<*STDOUT>, but typeglobs references work, too.
For example:

    splutter(\*STDOUT);
    sub splutter {
        my $fh = shift;
        print $fh "her um well a hmmm\n";
    }

    $rec = get_rec(\*STDIN);
    sub get_rec {
        my $fh = shift;
        return scalar <$fh>;
    }

If you're planning on generating new filehandles, you could do this.
Notice to pass back just the bare *FH, not its reference.

    sub openit {
        my $path = shift;
        local *FH;
        return open (FH, $path) ? *FH : undef;
    }

=head2 Prototypes
X<prototype> X<subroutine, prototype>

Perl supports a very limited kind of compile-time argument checking
using function prototyping.  This can be declared in either the PROTO
section or with a L<prototype attribute|attributes/Built-in Attributes>.
If you declare either of

    sub mypush (\@@)
    sub mypush :prototype(\@@)

then C<mypush()> takes arguments exactly like C<push()> does.

If subroutine signatures are enabled (see L</Signatures>), then
the shorter PROTO syntax is unavailable, because it would clash with
signatures.  In that case, a prototype can only be declared in the form
of an attribute.

The
function declaration must be visible at compile time.  The prototype
affects only interpretation of regular calls to the function,
where regular is defined as not using the C<&> sigil.  In
other words, if you call it like a built-in function, then it behaves
like a built-in function.  If you call it like an old-fashioned (perl4)
subroutine, then it behaves like an old-fashioned subroutine.  It
naturally falls out from this rule that prototypes have no influence
on subroutine references like C<\&foo> or on indirect subroutine
calls like C<&{$subref}()> or C<< $subref->() >>.

Method calls are not influenced by prototypes either, because the
function to be called is indeterminate at compile time, since
the exact code called depends on inheritance.

Because the intent of this feature is primarily to let you define
subroutines that work like built-in functions, here are prototypes
for some other functions that parse almost exactly like the
corresponding built-in.

    Declared as             Called as

    sub mylink ($$)         mylink $old, $new
    sub myvec ($$$)         myvec $var, $offset, 1
    sub myindex ($$;$)      myindex getstring(), "substr"
    sub mysyswrite ($$$;$)  mysyswrite $buf, 0, length($buf) - $off, $off
    sub myreverse (@)       myreverse $x, $y, $z
    sub myjoin ($@)         myjoin ":", $x, $y, $z
    sub mypop (\@)          mypop @array
    sub mysplice (\@$$@)    mysplice @array, 0, 2, @pushme
    sub mykeys (\[%@])      mykeys $hashref->%*
    sub myopen (*;$)        myopen HANDLE, $name
    sub mypipe (**)         mypipe READHANDLE, WRITEHANDLE
    sub mygrep (&@)         mygrep { /foo/ } $x, $y, $z
    sub myrand (;$)         myrand 42
    sub mytime ()           mytime

Any backslashed prototype character represents an actual argument
that must start with that character (optionally preceded by C<my>,
C<our> or C<local>), with the exception of C<$>, which will
accept any scalar lvalue expression, such as C<$foo = 7> or
C<< my_function()->[0] >>.  The value passed as part of C<@_> will be a
reference to the actual argument given in the subroutine call,
obtained by applying C<\> to that argument.

You can use the C<\[]> backslash group notation to specify more than one
allowed argument type.  For example:

    sub myref (\[$@%&*])

will allow calling myref() as

    myref $var
    myref @array
    myref %hash
    myref &sub
    myref *glob

and the first argument of myref() will be a reference to
a scalar, an array, a hash, a subroutine, or a glob.

Unbackslashed prototype characters have special meanings.  Any
unbackslashed C<@> or C<%> eats all remaining arguments, and forces
list context.  An argument represented by C<$> forces scalar context.  An
C<&> requires an anonymous subroutine, which, if passed as the first
argument, may look like a bare block:  It does not require the C<sub> keyword
or a subsequent comma.

A C<*> allows the subroutine to accept a bareword, constant, scalar expression,
typeglob, or a reference to a typeglob in that slot.  The value will be
available to the subroutine either as a simple scalar, or (in the latter
two cases) as a reference to the typeglob.  If you wish to always convert
such arguments to a typeglob reference, use Symbol::qualify_to_ref() as
follows:

    use Symbol 'qualify_to_ref';

    sub foo (*) {
        my $fh = qualify_to_ref(shift, caller);
        ...
    }

The C<+> prototype is a special alternative to C<$> that will act like
C<\[@%]> when given a literal array or hash variable, but will otherwise
force scalar context on the argument.  This is useful for functions which
should accept either a literal array or an array reference as the argument:

    sub mypush (+@) {
        my $aref = shift;
        die "Not an array or arrayref" unless ref $aref eq 'ARRAY';
        push @$aref, @_;
    }

When using the C<+> prototype, your function must check that the argument
is of an acceptable type.

A semicolon (C<;>) separates mandatory arguments from optional arguments.
It is redundant before C<@> or C<%>, which gobble up everything else.

As the last character of a prototype, or just before a semicolon, a C<@>
or a C<%>, you can use C<_> in place of C<$>: if this argument is not
provided, C<$_> will be used instead.

Note how the last three examples in the table above are treated
specially by the parser.  C<mygrep()> is parsed as a true list
operator, C<myrand()> is parsed as a true unary operator with unary
precedence the same as C<rand()>, and C<mytime()> is truly without
arguments, just like C<time()>.  That is, if you say

    mytime +2;

you'll get C<mytime() + 2>, not C<mytime(2)>, which is how it would be parsed
without a prototype.  If you want to force a unary function to have the
same precedence as a list operator, add C<;> to the end of the prototype:

    sub mygetprotobynumber($;);
    mygetprotobynumber $x > $y; # parsed as mygetprotobynumber($x > $y)

The interesting thing about C<&> is that you can generate new syntax with it,
provided it's in the initial position:
X<&>

    sub try (&@) {
        my($try,$catch) = @_;
        eval { &$try };
        if ($@) {
            local $_ = $@;
            &$catch;
        }
    }
    sub catch (&) { $_[0] }

    try {
        die "phooey";
    } catch {
        /phooey/ and print "unphooey\n";
    };

That prints C<"unphooey">.  (Yes, there are still unresolved
issues having to do with visibility of C<@_>.  I'm ignoring that
question for the moment.  (But note that if we make C<@_> lexically
scoped, those anonymous subroutines can act like closures... (Gee,
is this sounding a little Lispish?  (Never mind.))))

And here's a reimplementation of the Perl C<grep> operator:
X<grep>

    sub mygrep (&@) {
        my $code = shift;
        my @result;
        foreach $_ (@_) {
            push(@result, $_) if &$code;
        }
        @result;
    }

Some folks would prefer full alphanumeric prototypes.  Alphanumerics have
been intentionally left out of prototypes for the express purpose of
someday in the future adding named, formal parameters.  The current
mechanism's main goal is to let module writers provide better diagnostics
for module users.  Larry feels the notation quite understandable to Perl
programmers, and that it will not intrude greatly upon the meat of the
module, nor make it harder to read.  The line noise is visually
encapsulated into a small pill that's easy to swallow.

If you try to use an alphanumeric sequence in a prototype you will
generate an optional warning - "Illegal character in prototype...".
Unfortunately earlier versions of Perl allowed the prototype to be
used as long as its prefix was a valid prototype.  The warning may be
upgraded to a fatal error in a future version of Perl once the
majority of offending code is fixed.

It's probably best to prototype new functions, not retrofit prototyping
into older ones.  That's because you must be especially careful about
silent impositions of differing list versus scalar contexts.  For example,
if you decide that a function should take just one parameter, like this:

    sub func ($) {
        my $n = shift;
        print "you gave me $n\n";
    }

and someone has been calling it with an array or expression
returning a list:

    func(@foo);
    func( $text =~ /\w+/g );

Then you've just supplied an automatic C<scalar> in front of their
argument, which can be more than a bit surprising.  The old C<@foo>
which used to hold one thing doesn't get passed in.  Instead,
C<func()> now gets passed in a C<1>; that is, the number of elements
in C<@foo>.  And the C<m//g> gets called in scalar context so instead of a
list of words it returns a boolean result and advances C<pos($text)>.  Ouch!

If a sub has both a PROTO and a BLOCK, the prototype is not applied
until after the BLOCK is completely defined.  This means that a recursive
function with a prototype has to be predeclared for the prototype to take
effect, like so:

    sub foo($$);
    sub foo($$) {
        foo 1, 2;
    }

This is all very powerful, of course, and should be used only in moderation
to make the world a better place.

=head2 Constant Functions
X<constant>

Functions with a prototype of C<()> are potential candidates for
inlining.  If the result after optimization and constant folding
is either a constant or a lexically-scoped scalar which has no other
references, then it will be used in place of function calls made
without C<&>.  Calls made using C<&> are never inlined.  (See
L<constant> for an easy way to declare most constants.)

The following functions would all be inlined:

    sub pi ()           { 3.14159 }             # Not exact, but close.
    sub PI ()           { 4 * atan2 1, 1 }      # As good as it gets,
                                                # and it's inlined, too!
    sub ST_DEV ()       { 0 }
    sub ST_INO ()       { 1 }

    sub FLAG_FOO ()     { 1 << 8 }
    sub FLAG_BAR ()     { 1 << 9 }
    sub FLAG_MASK ()    { FLAG_FOO | FLAG_BAR }

    sub OPT_BAZ ()      { not (0x1B58 & FLAG_MASK) }

    sub N () { int(OPT_BAZ) / 3 }

    sub FOO_SET () { 1 if FLAG_MASK & FLAG_FOO }
    sub FOO_SET2 () { if (FLAG_MASK & FLAG_FOO) { 1 } }

(Be aware that the last example was not always inlined in Perl 5.20 and
earlier, which did not behave consistently with subroutines containing
inner scopes.)  You can countermand inlining by using an explicit
C<return>:

    sub baz_val () {
        if (OPT_BAZ) {
            return 23;
        }
        else {
            return 42;
        }
    }
    sub bonk_val () { return 12345 }

As alluded to earlier you can also declare inlined subs dynamically at
BEGIN time if their body consists of a lexically-scoped scalar which
has no other references.  Only the first example here will be inlined:

    BEGIN {
        my $var = 1;
        no strict 'refs';
        *INLINED = sub () { $var };
    }

    BEGIN {
        my $var = 1;
        my $ref = \$var;
        no strict 'refs';
        *NOT_INLINED = sub () { $var };
    }

A not so obvious caveat with this (see [RT #79908]) is what happens if the
variable is potentially modifiable. For example:

    BEGIN {
        my $x = 10;
        *FOO = sub () { $x };
        $x++;
    }
    print FOO(); # printed 10 prior to 5.32.0

From Perl 5.22 onwards this gave a deprecation warning, and from Perl 5.32
onwards it became a run-time error. Previously the variable was
immediately inlined, and stopped behaving like a normal lexical variable;
so it printed C<10>, not C<11>.

If you still want such a subroutine to be inlined (with no warning), make
sure the variable is not used in a context where it could be modified
aside from where it is declared.

    # Fine, no warning
    BEGIN {
        my $x = 54321;
        *INLINED = sub () { $x };
    }
    # Error
    BEGIN {
        my $x;
        $x = 54321;
        *ALSO_INLINED = sub () { $x };
    }

Perl 5.22 also introduced the "const" attribute as an alternative.  It was
initially experimental, but made stable in Perl 5.40.  When applied to an
anonymous subroutine, it forces the sub to be called when the C<sub>
expression is evaluated.  The return value is captured and turned into a
constant subroutine:

    my $x = 54321;
    *INLINED = sub : const { $x };
    $x++;

The return value of C<INLINED> in this example will always be 54321,
regardless of later modifications to $x.  You can also put any arbitrary
code inside the sub, at it will be executed immediately and its return
value captured the same way.

If you really want a subroutine with a C<()> prototype that returns a
lexical variable you can easily force it to not be inlined by adding
an explicit C<return>:

    BEGIN {
        my $x = 10;
        *FOO = sub () { return $x };
        $x++;
    }
    print FOO(); # prints 11

The easiest way to tell if a subroutine was inlined is by using
L<B::Deparse>.  Consider this example of two subroutines returning
C<1>, one with a C<()> prototype causing it to be inlined, and one
without (with deparse output truncated for clarity):

    $ perl -MO=Deparse -e 'sub ONE { 1 } if (ONE) { print ONE if ONE }'
    sub ONE {
        1;
    }
    if (ONE ) {
        print ONE() if ONE ;
    }

    $ perl -MO=Deparse -e 'sub ONE () { 1 } if (ONE) { print ONE if ONE }'
    sub ONE () { 1 }
    do {
        print 1
    };

If you redefine a subroutine that was eligible for inlining, you'll
get a warning by default.  You can use this warning to tell whether or
not a particular subroutine is considered inlinable, since it's
different than the warning for overriding non-inlined subroutines:

    $ perl -e 'sub one () {1} sub one () {2}'
    Constant subroutine one redefined at -e line 1.
    $ perl -we 'sub one {1} sub one {2}'
    Subroutine one redefined at -e line 1.

The warning is considered severe enough not to be affected by the
B<-w> switch (or its absence) because previously compiled invocations
of the function will still be using the old value of the function.  If
you need to be able to redefine the subroutine, you need to ensure
that it isn't inlined, either by dropping the C<()> prototype (which
changes calling semantics, so beware) or by thwarting the inlining
mechanism in some other way, e.g. by adding an explicit C<return>, as
mentioned above:

    sub not_inlined () { return 23 }

=head2 Overriding Built-in Functions
X<built-in> X<override> X<CORE> X<CORE::GLOBAL>

Many built-in functions may be overridden, though this should be tried
only occasionally and for good reason.  Typically this might be
done by a package attempting to emulate missing built-in functionality
on a non-Unix system.

Overriding may be done only by importing the name from a module at
compile time--ordinary predeclaration isn't good enough.  However, the
C<use subs> pragma lets you, in effect, predeclare subs
via the import syntax, and these names may then override built-in ones:

    use subs 'chdir', 'chroot', 'chmod', 'chown';
    chdir $somewhere;
    sub chdir { ... }

To unambiguously refer to the built-in form, precede the
built-in name with the special package qualifier C<CORE::>.  For example,
saying C<CORE::open()> always refers to the built-in C<open()>, even
if the current package has imported some other subroutine called
C<&open()> from elsewhere.  Even though it looks like a regular
function call, it isn't: the C<CORE::> prefix in that case is part of Perl's
syntax, and works for any keyword, regardless of what is in the C<CORE>
package.  Taking a reference to it, that is, C<\&CORE::open>, only works
for some keywords.  See L<CORE>.

Library modules should not in general export built-in names like C<open>
or C<chdir> as part of their default C<@EXPORT> list, because these may
sneak into someone else's namespace and change the semantics unexpectedly.
Instead, if the module adds that name to C<@EXPORT_OK>, then it's
possible for a user to import the name explicitly, but not implicitly.
That is, they could say

    use Module 'open';

and it would import the C<open> override.  But if they said

    use Module;

they would get the default imports without overrides.

The foregoing mechanism for overriding built-in is restricted, quite
deliberately, to the package that requests the import.  There is a second
method that is sometimes applicable when you wish to override a built-in
everywhere, without regard to namespace boundaries.  This is achieved by
importing a sub into the special namespace C<CORE::GLOBAL::>.  Here is an
example that quite brazenly replaces the C<glob> operator with something
that understands regular expressions.

    package REGlob;
    require Exporter;
    @ISA = 'Exporter';
    @EXPORT_OK = 'glob';

    sub import {
        my $pkg = shift;
        return unless @_;
        my $sym = shift;
        my $where = ($sym =~ s/^GLOBAL_// ? 'CORE::GLOBAL' : caller(0));
        $pkg->export($where, $sym, @_);
    }

    sub glob {
