                or props not in ('', 'none', 'normal')
            ):
                changes.append(path)
        for path in changes:
            for ext in externals:
                if path == ext or path.startswith(ext + pycompat.ossep):
                    return True, True, bool(missing)
        return bool(changes), False, bool(missing)

    @annotatesubrepoerror
    def dirty(self, ignoreupdate=False, missing=False):
        if self._svnmissing():
            return self._state[1] != b''
        wcchanged = self._wcchanged()
        changed = wcchanged[0] or (missing and wcchanged[2])
        if not changed:
            if self._state[1] in self._wcrevs() or ignoreupdate:
                return False
        return True

    def basestate(self):
        lastrev, rev = self._wcrevs()
        if lastrev != rev:
            # Last committed rev is not the same than rev. We would
            # like to take lastrev but we do not know if the subrepo
            # URL exists at lastrev.  Test it and fallback to rev it
            # is not there.
            try:
                self._svncommand(
                    [b'list', b'%s@%s' % (self._state[0], lastrev)]
                )
                return lastrev
            except error.Abort:
                pass
        return rev

    @annotatesubrepoerror
    def commit(self, text, user, date):
        # user and date are out of our hands since svn is centralized
        changed, extchanged, missing = self._wcchanged()
        if not changed:
            return self.basestate()
        if extchanged:
            # Do not try to commit externals
            raise error.Abort(_(b'cannot commit svn externals'))
        if missing:
            # svn can commit with missing entries but aborting like hg
            # seems a better approach.
            raise error.Abort(_(b'cannot commit missing svn entries'))
        commitinfo, err = self._svncommand([b'commit', b'-m', text])
        self.ui.status(commitinfo)
        newrev = re.search(b'Committed revision ([0-9]+).', commitinfo)
        if not newrev:
            if not commitinfo.strip():
                # Sometimes, our definition of "changed" differs from
                # svn one. For instance, svn ignores missing files
                # when committing. If there are only missing files, no
                # commit is made, no output and no error code.
                raise error.Abort(_(b'failed to commit svn changes'))
            raise error.Abort(commitinfo.splitlines()[-1])
        newrev = newrev.groups()[0]
        self.ui.status(self._svncommand([b'update', b'-r', newrev])[0])
        return newrev

    @annotatesubrepoerror
    def remove(self):
        if self.dirty():
            self.ui.warn(
                _(b'not removing repo %s because it has changes.\n')
                % self._path
            )
            return
        self.ui.note(_(b'removing subrepo %s\n') % self._path)

        self.wvfs.rmtree(forcibly=True)
        try:
            pwvfs = self._ctx.repo().wvfs
            pwvfs.removedirs(pwvfs.dirname(self._path))
        except OSError:
            pass

    @annotatesubrepoerror
    def get(self, state, overwrite=False):
        if overwrite:
            self._svncommand([b'revert', b'--recursive'])
        args = [b'checkout']
        if self._svnversion >= (1, 5):
            args.append(b'--force')
        # The revision must be specified at the end of the URL to properly
        # update to a directory which has since been deleted and recreated.
        args.append(b'%s@%s' % (state[0], state[1]))

        # SEC: check that the ssh url is safe
        urlutil.checksafessh(state[0])

        status, err = self._svncommand(args, failok=True)
        _sanitize(self.ui, self.wvfs, b'.svn')
        if not re.search(b'Checked out revision [0-9]+.', status):
            if b'is already a working copy for a different URL' in err and (
                self._wcchanged()[:2] == (False, False)
            ):
                # obstructed but clean working copy, so just blow it away.
                self.remove()
                self.get(state, overwrite=False)
                return
            raise error.Abort((status or err).splitlines()[-1])
        self.ui.status(status)

    @annotatesubrepoerror
    def merge(self, state):
        old = self._state[1]
        new = state[1]
        wcrev = self._wcrev()
        if new != wcrev:
            dirty = old == wcrev or self._wcchanged()[0]
            if _updateprompt(self.ui, self, dirty, wcrev, new):
                self.get(state, False)

    def push(self, opts):
        # push is a no-op for SVN
        return True

    @annotatesubrepoerror
    def files(self):
        output = self._svncommand([b'list', b'--recursive', b'--xml'])[0]
        doc = xml.dom.minidom.parseString(output)  # pytype: disable=pyi-error
        paths = []
        for e in doc.getElementsByTagName('entry'):
            kind = pycompat.bytestr(e.getAttribute('kind'))
            if kind != b'file':
                continue
            name = ''.join(
                c.data
                for c in e.getElementsByTagName('name')[0].childNodes
                if c.nodeType == c.TEXT_NODE
            )
            paths.append(name.encode('utf8'))
        return paths

    def filedata(self, name, decode):
        return self._svncommand([b'cat'], name)[0]


class gitsubrepo(abstractsubrepo):
    def __init__(self, ctx, path, state, allowcreate):
        super(gitsubrepo, self).__init__(ctx, path)
        self._state = state
        self._abspath = ctx.repo().wjoin(path)
        self._subparent = ctx.repo()
        self._ensuregit()

    def _ensuregit(self):
        try:
            self._gitexecutable = b'git'
            out, err = self._gitnodir([b'--version'])
        except OSError as e:
            genericerror = _(b"error executing git for subrepo '%s': %s")
            notfoundhint = _(b"check git is installed and in your PATH")
            if e.errno != errno.ENOENT:
                raise error.Abort(
                    genericerror % (self._path, encoding.strtolocal(e.strerror))
                )
            elif pycompat.iswindows:
                try:
                    self._gitexecutable = b'git.cmd'
                    out, err = self._gitnodir([b'--version'])
                except OSError as e2:
                    if e2.errno == errno.ENOENT:
                        raise error.Abort(
                            _(
                                b"couldn't find 'git' or 'git.cmd'"
                                b" for subrepo '%s'"
                            )
                            % self._path,
                            hint=notfoundhint,
                        )
                    else:
                        raise error.Abort(
                            genericerror
                            % (self._path, encoding.strtolocal(e2.strerror))
                        )
            else:
                raise error.Abort(
                    _(b"couldn't find git for subrepo '%s'") % self._path,
                    hint=notfoundhint,
                )
        versionstatus = self._checkversion(out)
        if versionstatus == b'unknown':
            self.ui.warn(_(b'cannot retrieve git version\n'))
        elif versionstatus == b'abort':
            raise error.Abort(
                _(b'git subrepo requires at least 1.6.0 or later')
            )
        elif versionstatus == b'warning':
            self.ui.warn(_(b'git subrepo requires at least 1.6.0 or later\n'))

    @staticmethod
    def _gitversion(out):
        m = re.search(br'^git version (\d+)\.(\d+)\.(\d+)', out)
        if m:
            return (int(m.group(1)), int(m.group(2)), int(m.group(3)))

        m = re.search(br'^git version (\d+)\.(\d+)', out)
        if m:
            return (int(m.group(1)), int(m.group(2)), 0)

        return -1

    @staticmethod
    def _checkversion(out):
        """ensure git version is new enough

        >>> _checkversion = gitsubrepo._checkversion
        >>> _checkversion(b'git version 1.6.0')
        'ok'
        >>> _checkversion(b'git version 1.8.5')
        'ok'
        >>> _checkversion(b'git version 1.4.0')
        'abort'
        >>> _checkversion(b'git version 1.5.0')
        'warning'
        >>> _checkversion(b'git version 1.9-rc0')
        'ok'
        >>> _checkversion(b'git version 1.9.0.265.g81cdec2')
        'ok'
        >>> _checkversion(b'git version 1.9.0.GIT')
        'ok'
        >>> _checkversion(b'git version 12345')
        'unknown'
        >>> _checkversion(b'no')
        'unknown'
        """
        version = gitsubrepo._gitversion(out)
        # git 1.4.0 can't work at all, but 1.5.X can in at least some cases,
        # despite the docstring comment.  For now, error on 1.4.0, warn on
        # 1.5.0 but attempt to continue.
        if version == -1:
            return b'unknown'
        if version < (1, 5, 0):
            return b'abort'
        elif version < (1, 6, 0):
            return b'warning'
        return b'ok'

    def _gitcommand(self, commands, env=None, stream=False):
        return self._gitdir(commands, env=env, stream=stream)[0]

    def _gitdir(self, commands, env=None, stream=False):
        return self._gitnodir(
            commands, env=env, stream=stream, cwd=self._abspath
        )

    def _gitnodir(self, commands, env=None, stream=False, cwd=None):
        """Calls the git command

        The methods tries to call the git command. versions prior to 1.6.0
        are not supported and very probably fail.
        """
        self.ui.debug(b'%s: git %s\n' % (self._relpath, b' '.join(commands)))
        if env is None:
            env = encoding.environ.copy()
        # disable localization for Git output (issue5176)
        env[b'LC_ALL'] = b'C'
        # fix for Git CVE-2015-7545
        if b'GIT_ALLOW_PROTOCOL' not in env:
            env[b'GIT_ALLOW_PROTOCOL'] = b'file:git:http:https:ssh'
        # unless ui.quiet is set, print git's stderr,
        # which is mostly progress and useful info
        errpipe = None
        if self.ui.quiet:
            errpipe = pycompat.open(os.devnull, b'w')
        if self.ui._colormode and len(commands) and commands[0] == b"diff":
            # insert the argument in the front,
            # the end of git diff arguments is used for paths
            commands.insert(1, b'--color')
        extrakw = {}
        if util.safehasattr(subprocess, 'CREATE_NO_WINDOW'):
            # On Windows, prevent command prompts windows from popping up when
            # running in pythonw.
            extrakw['creationflags'] = getattr(subprocess, 'CREATE_NO_WINDOW')
        p = subprocess.Popen(
            pycompat.rapply(
                procutil.tonativestr, [self._gitexecutable] + commands
            ),
            bufsize=-1,
            cwd=pycompat.rapply(procutil.tonativestr, cwd),
            env=procutil.tonativeenv(env),
            close_fds=procutil.closefds,
            stdout=subprocess.PIPE,
            stderr=errpipe,
            **extrakw
        )
        if stream:
            return p.stdout, None

        retdata = p.stdout.read().strip()
        # wait for the child to exit to avoid race condition.
        p.wait()

        if p.returncode != 0 and p.returncode != 1:
            # there are certain error codes that are ok
            command = commands[0]
            if command in (b'cat-file', b'symbolic-ref'):
                return retdata, p.returncode
            # for all others, abort
            raise error.Abort(
                _(b'git %s error %d in %s')
                % (command, p.returncode, self._relpath)
            )

        return retdata, p.returncode

    def _gitmissing(self):
        return not self.wvfs.exists(b'.git')

    def _gitstate(self):
        return self._gitcommand([b'rev-parse', b'HEAD'])

    def _gitcurrentbranch(self):
        current, err = self._gitdir([b'symbolic-ref', b'HEAD', b'--quiet'])
        if err:
            current = None
        return current

    def _gitremote(self, remote):
        out = self._gitcommand([b'remote', b'show', b'-n', remote])
        line = out.split(b'\n')[1]
        i = line.index(b'URL: ') + len(b'URL: ')
        return line[i:]

    def _githavelocally(self, revision):
        out, code = self._gitdir([b'cat-file', b'-e', revision])
        return code == 0

    def _gitisancestor(self, r1, r2):
        base = self._gitcommand([b'merge-base', r1, r2])
        return base == r1

    def _gitisbare(self):
        return self._gitcommand([b'config', b'--bool', b'core.bare']) == b'true'

    def _gitupdatestat(self):
        """This must be run before git diff-index.
        diff-index only looks at changes to file stat;
        this command looks at file contents and updates the stat."""
        self._gitcommand([b'update-index', b'-q', b'--refresh'])

    def _gitbranchmap(self):
        """returns 2 things:
        a map from git branch to revision
        a map from revision to branches"""
        branch2rev = {}
        rev2branch = {}

        out = self._gitcommand(
            [b'for-each-ref', b'--format', b'%(objectname) %(refname)']
        )
        for line in out.split(b'\n'):
            revision, ref = line.split(b' ')
            if not ref.startswith(b'refs/heads/') and not ref.startswith(
                b'refs/remotes/'
            ):
                continue
            if ref.startswith(b'refs/remotes/') and ref.endswith(b'/HEAD'):
                continue  # ignore remote/HEAD redirects
            branch2rev[ref] = revision
            rev2branch.setdefault(revision, []).append(ref)
        return branch2rev, rev2branch

    def _gittracking(self, branches):
        """return map of remote branch to local tracking branch"""
        # assumes no more than one local tracking branch for each remote
        tracking = {}
        for b in branches:
            if b.startswith(b'refs/remotes/'):
                continue
            bname = b.split(b'/', 2)[2]
            remote = self._gitcommand([b'config', b'branch.%s.remote' % bname])
            if remote:
                ref = self._gitcommand([b'config', b'branch.%s.merge' % bname])
                tracking[
                    b'refs/remotes/%s/%s' % (remote, ref.split(b'/', 2)[2])
                ] = b
        return tracking

    def _abssource(self, source):
        if b'://' not in source:
            # recognize the scp syntax as an absolute source
            colon = source.find(b':')
            if colon != -1 and b'/' not in source[:colon]:
                return source
        self._subsource = source
        return _abssource(self)

    def _fetch(self, source, revision):
        if self._gitmissing():
            # SEC: check for safe ssh url
            urlutil.checksafessh(source)

            source = self._abssource(source)
            self.ui.status(
                _(b'cloning subrepo %s from %s\n') % (self._relpath, source)
            )
            self._gitnodir([b'clone', source, self._abspath])
        if self._githavelocally(revision):
            return
        self.ui.status(
            _(b'pulling subrepo %s from %s\n')
            % (self._relpath, self._gitremote(b'origin'))
        )
        # try only origin: the originally cloned repo
        self._gitcommand([b'fetch'])
        if not self._githavelocally(revision):
            raise error.Abort(
                _(b'revision %s does not exist in subrepository "%s"\n')
                % (revision, self._relpath)
            )

    @annotatesubrepoerror
    def dirty(self, ignoreupdate=False, missing=False):
        if self._gitmissing():
            return self._state[1] != b''
        if self._gitisbare():
            return True
        if not ignoreupdate and self._state[1] != self._gitstate():
            # different version checked out
            return True
        # check for staged changes or modified files; ignore untracked files
        self._gitupdatestat()
        out, code = self._gitdir([b'diff-index', b'--quiet', b'HEAD'])
        return code == 1

    def basestate(self):
        return self._gitstate()

    @annotatesubrepoerror
    def get(self, state, overwrite=False):
        source, revision, kind = state
        if not revision:
            self.remove()
            return
        self._fetch(source, revision)
        # if the repo was set to be bare, unbare it
        if self._gitisbare():
            self._gitcommand([b'config', b'core.bare', b'false'])
            if self._gitstate() == revision:
                self._gitcommand([b'reset', b'--hard', b'HEAD'])
                return
        elif self._gitstate() == revision:
            if overwrite:
                # first reset the index to unmark new files for commit, because
                # reset --hard will otherwise throw away files added for commit,
                # not just unmark them.
                self._gitcommand([b'reset', b'HEAD'])
                self._gitcommand([b'reset', b'--hard', b'HEAD'])
            return
        branch2rev, rev2branch = self._gitbranchmap()

        def checkout(args):
            cmd = [b'checkout']
            if overwrite:
                # first reset the index to unmark new files for commit, because
                # the -f option will otherwise throw away files added for
                # commit, not just unmark them.
                self._gitcommand([b'reset', b'HEAD'])
                cmd.append(b'-f')
            self._gitcommand(cmd + args)
            _sanitize(self.ui, self.wvfs, b'.git')

        def rawcheckout():
            # no branch to checkout, check it out with no branch
            self.ui.warn(
                _(b'checking out detached HEAD in subrepository "%s"\n')
                % self._relpath
            )
            self.ui.warn(
                _(b'check out a git branch if you intend to make changes\n')
            )
            checkout([b'-q', revision])

        if revision not in rev2branch:
            rawcheckout()
            return
        branches = rev2branch[revision]
        firstlocalbranch = None
        for b in branches:
            if b == b'refs/heads/master':
                # master trumps all other branches
                checkout([b'refs/heads/master'])
                return
            if not firstlocalbranch and not b.startswith(b'refs/remotes/'):
                firstlocalbranch = b
        if firstlocalbranch:
            checkout([firstlocalbranch])
            return

        tracking = self._gittracking(branch2rev.keys())
        # choose a remote branch already tracked if possible
        remote = branches[0]
        if remote not in tracking:
            for b in branches:
                if b in tracking:
                    remote = b
                    break

        if remote not in tracking:
            # create a new local tracking branch
            local = remote.split(b'/', 3)[3]
            checkout([b'-b', local, remote])
        elif self._gitisancestor(branch2rev[tracking[remote]], remote):
            # When updating to a tracked remote branch,
            # if the local tracking branch is downstream of it,
            # a normal `git pull` would have performed a "fast-forward merge"
            # which is equivalent to updating the local branch to the remote.
            # Since we are only looking at branching at update, we need to
            # detect this situation and perform this action lazily.
            if tracking[remote] != self._gitcurrentbranch():
                checkout([tracking[remote]])
            self._gitcommand([b'merge', b'--ff', remote])
            _sanitize(self.ui, self.wvfs, b'.git')
        else:
            # a real merge would be required, just checkout the revision
            rawcheckout()

    @annotatesubrepoerror
    def commit(self, text, user, date):
        if self._gitmissing():
            raise error.Abort(_(b"subrepo %s is missing") % self._relpath)
        cmd = [b'commit', b'-a', b'-m', text]
        env = encoding.environ.copy()
        if user:
            cmd += [b'--author', user]
        if date:
            # git's date parser silently ignores when seconds < 1e9
            # convert to ISO8601
            env[b'GIT_AUTHOR_DATE'] = dateutil.datestr(
                date, b'%Y-%m-%dT%H:%M:%S %1%2'
            )
        self._gitcommand(cmd, env=env)
        # make sure commit works otherwise HEAD might not exist under certain
        # circumstances
        return self._gitstate()

    @annotatesubrepoerror
    def merge(self, state):
        source, revision, kind = state
        self._fetch(source, revision)
        base = self._gitcommand([b'merge-base', revision, self._state[1]])
        self._gitupdatestat()
        out, code = self._gitdir([b'diff-index', b'--quiet', b'HEAD'])

        def mergefunc():
            if base == revision:
                self.get(state)  # fast forward merge
            elif base != self._state[1]:
                self._gitcommand([b'merge', b'--no-commit', revision])
            _sanitize(self.ui, self.wvfs, b'.git')

        if self.dirty():
            if self._gitstate() != revision:
                dirty = self._gitstate() == self._state[1] or code != 0
                if _updateprompt(
                    self.ui, self, dirty, self._state[1][:7], revision[:7]
                ):
                    mergefunc()
        else:
            mergefunc()

    @annotatesubrepoerror
    def push(self, opts):
        force = opts.get(b'force')

        if not self._state[1]:
            return True
        if self._gitmissing():
            raise error.Abort(_(b"subrepo %s is missing") % self._relpath)
        # if a branch in origin contains the revision, nothing to do
        branch2rev, rev2branch = self._gitbranchmap()
        if self._state[1] in rev2branch:
            for b in rev2branch[self._state[1]]:
                if b.startswith(b'refs/remotes/origin/'):
                    return True
        for b, revision in branch2rev.items():
            if b.startswith(b'refs/remotes/origin/'):
                if self._gitisancestor(self._state[1], revision):
                    return True
        # otherwise, try to push the currently checked out branch
        cmd = [b'push']
        if force:
            cmd.append(b'--force')

        current = self._gitcurrentbranch()
        if current:
            # determine if the current branch is even useful
            if not self._gitisancestor(self._state[1], current):
                self.ui.warn(
                    _(
                        b'unrelated git branch checked out '
                        b'in subrepository "%s"\n'
                    )
                    % self._relpath
                )
                return False
            self.ui.status(
                _(b'pushing branch %s of subrepository "%s"\n')
                % (current.split(b'/', 2)[2], self._relpath)
            )
            ret = self._gitdir(cmd + [b'origin', current])
            return ret[1] == 0
        else:
            self.ui.warn(
                _(
                    b'no branch checked out in subrepository "%s"\n'
                    b'cannot push revision %s\n'
                )
                % (self._relpath, self._state[1])
            )
            return False

    @annotatesubrepoerror
    def add(self, ui, match, prefix, uipathfn, explicitonly, **opts):
        if self._gitmissing():
            return []

        s = self.status(None, unknown=True, clean=True)

        tracked = set()
        # dirstates 'amn' warn, 'r' is added again
        for l in (s.modified, s.added, s.deleted, s.clean):
            tracked.update(l)

        # Unknown files not of interest will be rejected by the matcher
        files = s.unknown
        files.extend(match.files())

        rejected = []

        files = [f for f in sorted(set(files)) if match(f)]
        for f in files:
            exact = match.exact(f)
            command = [b"add"]
            if exact:
                command.append(b"-f")  # should be added, even if ignored
            if ui.verbose or not exact:
                ui.status(_(b'adding %s\n') % uipathfn(f))

            if f in tracked:  # hg prints 'adding' even if already tracked
                if exact:
                    rejected.append(f)
                continue
            if not opts.get('dry_run'):
                self._gitcommand(command + [f])

        for f in rejected:
            ui.warn(_(b"%s already tracked!\n") % uipathfn(f))

        return rejected

    @annotatesubrepoerror
    def remove(self):
        if self._gitmissing():
            return
        if self.dirty():
            self.ui.warn(
                _(b'not removing repo %s because it has changes.\n')
                % self._relpath
            )
            return
        # we can't fully delete the repository as it may contain
        # local-only history
        self.ui.note(_(b'removing subrepo %s\n') % self._relpath)
        self._gitcommand([b'config', b'core.bare', b'true'])
        for f, kind in self.wvfs.readdir():
            if f == b'.git':
                continue
            if kind == stat.S_IFDIR:
                self.wvfs.rmtree(f)
            else:
                self.wvfs.unlink(f)

    def archive(self, archiver, prefix, match=None, decode=True):
        total = 0
        source, revision = self._state
        if not revision:
            return total
        self._fetch(source, revision)

        # Parse git's native archive command.
        # This should be much faster than manually traversing the trees
        # and objects with many subprocess calls.
        tarstream = self._gitcommand([b'archive', revision], stream=True)
        tar = tarfile.open(fileobj=tarstream, mode='r|')
        relpath = subrelpath(self)
        progress = self.ui.makeprogress(
            _(b'archiving (%s)') % relpath, unit=_(b'files')
        )
        progress.update(0)
        for info in tar:
            if info.isdir():
                continue
            bname = pycompat.fsencode(info.name)
            if match and not match(bname):
                continue
            if info.issym():
                data = info.linkname
            else:
                f = tar.extractfile(info)
                if f:
                    data = f.read()
                else:
                    self.ui.warn(_(b'skipping "%s" (unknown type)') % bname)
                    continue
            archiver.addfile(prefix + bname, info.mode, info.issym(), data)
            total += 1
            progress.increment()
        progress.complete()
        return total

    @annotatesubrepoerror
    def cat(self, match, fm, fntemplate, prefix, **opts):
        rev = self._state[1]
        if match.anypats():
            return 1  # No support for include/exclude yet

        if not match.files():
            return 1

        # TODO: add support for non-plain formatter (see cmdutil.cat())
        for f in match.files():
            output = self._gitcommand([b"show", b"%s:%s" % (rev, f)])
            fp = cmdutil.makefileobj(
                self._ctx, fntemplate, pathname=self.wvfs.reljoin(prefix, f)
            )
            fp.write(output)
            fp.close()
        return 0

    @annotatesubrepoerror
    def status(self, rev2, **opts):
        rev1 = self._state[1]
        if self._gitmissing() or not rev1:
            # if the repo is missing, return no results
            return scmutil.status([], [], [], [], [], [], [])
        modified, added, removed = [], [], []
        self._gitupdatestat()
        if rev2:
            command = [b'diff-tree', b'--no-renames', b'-r', rev1, rev2]
        else:
            command = [b'diff-index', b'--no-renames', rev1]
        out = self._gitcommand(command)
        for line in out.split(b'\n'):
            tab = line.find(b'\t')
            if tab == -1:
                continue
            status, f = line[tab - 1 : tab], line[tab + 1 :]
            if status == b'M':
                modified.append(f)
            elif status == b'A':
                added.append(f)
            elif status == b'D':
                removed.append(f)

        deleted, unknown, ignored, clean = [], [], [], []

        command = [b'status', b'--porcelain', b'-z']
        if opts.get('unknown'):
            command += [b'--untracked-files=all']
        if opts.get('ignored'):
            command += [b'--ignored']
        out = self._gitcommand(command)

        changedfiles = set()
        changedfiles.update(modified)
        changedfiles.update(added)
        changedfiles.update(removed)
        for line in out.split(b'\0'):
            if not line:
                continue
            st = line[0:2]
            # moves and copies show 2 files on one line
            if line.find(b'\0') >= 0:
                filename1, filename2 = line[3:].split(b'\0')
            else:
                filename1 = line[3:]
                filename2 = None

            changedfiles.add(filename1)
            if filename2:
                changedfiles.add(filename2)

            if st == b'??':
                unknown.append(filename1)
            elif st == b'!!':
                ignored.append(filename1)

        if opts.get('clean'):
            out = self._gitcommand([b'ls-files'])
            for f in out.split(b'\n'):
                if not f in changedfiles:
                    clean.append(f)

        return scmutil.status(
            modified, added, removed, deleted, unknown, ignored, clean
        )

    @annotatesubrepoerror
    def diff(self, ui, diffopts, node2, match, prefix, **opts):
        node1 = self._state[1]
        cmd = [b'diff', b'--no-renames']
        if opts['stat']:
            cmd.append(b'--stat')
        else:
            # for Git, this also implies '-p'
            cmd.append(b'-U%d' % diffopts.context)

        if diffopts.noprefix:
            cmd.extend(
                [b'--src-prefix=%s/' % prefix, b'--dst-prefix=%s/' % prefix]
            )
        else:
            cmd.extend(
                [b'--src-prefix=a/%s/' % prefix, b'--dst-prefix=b/%s/' % prefix]
            )

        if diffopts.ignorews:
            cmd.append(b'--ignore-all-space')
        if diffopts.ignorewsamount:
            cmd.append(b'--ignore-space-change')
        if (
            self._gitversion(self._gitcommand([b'--version'])) >= (1, 8, 4)
            and diffopts.ignoreblanklines
        ):
            cmd.append(b'--ignore-blank-lines')

        cmd.append(node1)
        if node2:
            cmd.append(node2)

        output = b""
        if match.always():
            output += self._gitcommand(cmd) + b'\n'
        else:
            st = self.status(node2)
            files = [
                f
                for sublist in (st.modified, st.added, st.removed)
                for f in sublist
            ]
            for f in files:
                if match(f):
                    output += self._gitcommand(cmd + [b'--', f]) + b'\n'

        if output.strip():
            ui.write(output)

    @annotatesubrepoerror
    def revert(self, substate, *pats, **opts):
        self.ui.status(_(b'reverting subrepo %s\n') % substate[0])
        if not opts.get('no_backup'):
            status = self.status(None)
            names = status.modified
            for name in names:
                # backuppath() expects a path relative to the parent repo (the
                # repo that ui.origbackuppath is relative to)
                parentname = os.path.join(self._path, name)
                bakname = scmutil.backuppath(
                    self.ui, self._subparent, parentname
                )
                self.ui.note(
                    _(b'saving current version of %s as %s\n')
                    % (name, os.path.relpath(bakname))
                )
                util.rename(self.wvfs.join(name), bakname)

        if not opts.get('dry_run'):
            self.get(substate, overwrite=True)
        return []

    def shortid(self, revid):
        return revid[:7]


types = {
    b'hg': hgsubrepo,
    b'svn': svnsubrepo,
    b'git': gitsubrepo,
}
                                            usr/lib/python3/dist-packages/mercurial/subrepoutil.py                                              0000644 0000000 0000000 00000042401 14355257011 021664  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # subrepoutil.py - sub-repository operations and substate handling
#
# Copyright 2009-2010 Olivia Mackall <olivia@selenic.com>
#
# This software may be used and distributed according to the terms of the
# GNU General Public License version 2 or any later version.


import os
import posixpath
import re

from .i18n import _
from .pycompat import getattr
from . import (
    config,
    error,
    filemerge,
    pathutil,
    phases,
    pycompat,
    util,
)
from .utils import (
    stringutil,
    urlutil,
)

nullstate = (b'', b'', b'empty')

if pycompat.TYPE_CHECKING:
    from typing import (
        Any,
        Dict,
        List,
        Optional,
        Set,
        Tuple,
    )
    from . import (
        context,
        localrepo,
        match as matchmod,
        scmutil,
        subrepo,
        ui as uimod,
    )

    Substate = Dict[bytes, Tuple[bytes, bytes, bytes]]


def state(ctx, ui):
    # type: (context.changectx, uimod.ui) -> Substate
    """return a state dict, mapping subrepo paths configured in .hgsub
    to tuple: (source from .hgsub, revision from .hgsubstate, kind
    (key in types dict))
    """
    p = config.config()
    repo = ctx.repo()

    def read(f, sections=None, remap=None):
        if f in ctx:
            try:
                data = ctx[f].data()
            except FileNotFoundError:
                # handle missing subrepo spec files as removed
                ui.warn(
                    _(b"warning: subrepo spec file \'%s\' not found\n")
                    % repo.pathto(f)
                )
                return
            p.parse(f, data, sections, remap, read)
        else:
            raise error.Abort(
                _(b"subrepo spec file \'%s\' not found") % repo.pathto(f)
            )

    if b'.hgsub' in ctx:
        read(b'.hgsub')

    for path, src in ui.configitems(b'subpaths'):
        p.set(b'subpaths', path, src, ui.configsource(b'subpaths', path))

    rev = {}
    if b'.hgsubstate' in ctx:
        try:
            for i, l in enumerate(ctx[b'.hgsubstate'].data().splitlines()):
                l = l.lstrip()
                if not l:
                    continue
                try:
                    revision, path = l.split(b" ", 1)
                except ValueError:
                    raise error.Abort(
                        _(
                            b"invalid subrepository revision "
                            b"specifier in \'%s\' line %d"
                        )
                        % (repo.pathto(b'.hgsubstate'), (i + 1))
                    )
                rev[path] = revision
        except FileNotFoundError:
            pass

    def remap(src):
        # type: (bytes) -> bytes
        for pattern, repl in p.items(b'subpaths'):
            # Turn r'C:\foo\bar' into r'C:\\foo\\bar' since re.sub
            # does a string decode.
            repl = stringutil.escapestr(repl)
            # However, we still want to allow back references to go
            # through unharmed, so we turn r'\\1' into r'\1'. Again,
            # extra escapes are needed because re.sub string decodes.
