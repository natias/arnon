lockfiles, open mode, end of line, flushing output, non-blocking input

=item How do I decode encrypted password files?

=item How do I start a process in the background?

STDIN, STDOUT, and STDERR are shared, Signals, Zombies

=item How do I trap control characters/signals?

=item How do I modify the shadow password file on a Unix system?

=item How do I set the time and date?

=item How can I sleep() or alarm() for under a second?
X<Time::HiRes> X<BSD::Itimer> X<sleep> X<select>

=item How can I measure time under a second?
X<Time::HiRes> X<BSD::Itimer> X<sleep> X<select>

=item How can I do an atexit() or setjmp()/longjmp()? (Exception handling)

=item Why doesn't my sockets program work under System V (Solaris)? What
does the error message "Protocol not supported" mean?

=item How can I call my system's unique C functions from Perl?

=item Where do I get the include files to do ioctl() or syscall()?

=item Why do setuid perl scripts complain about kernel problems?

=item How can I open a pipe both to and from a command?

=item Why can't I get the output of a command with system()?

=item How can I capture STDERR from an external command?

=item Why doesn't open() return an error when a pipe open fails?

=item What's wrong with using backticks in a void context?

=item How can I call backticks without shell processing?

=item Why can't my script read from STDIN after I gave it EOF (^D on Unix,
^Z on MS-DOS)?

=item How can I convert my shell script to perl?

=item Can I use perl to run a telnet or ftp session?

=item How can I write expect in Perl?

=item Is there a way to hide perl's command line from programs such as
"ps"?

=item I {changed directory, modified my environment} in a perl script. How
come the change disappeared when I exited the script? How do I get my
changes to be visible?

Unix

=item How do I close a process's filehandle without waiting for it to
complete?

=item How do I fork a daemon process?

=item How do I find out if I'm running interactively or not?

=item How do I timeout a slow event?

=item How do I set CPU limits?
X<BSD::Resource> X<limit> X<CPU>

=item How do I avoid zombies on a Unix system?

=item How do I use an SQL database?

=item How do I make a system() exit on control-C?

=item How do I open a file without blocking?

=item How do I tell the difference between errors from the shell and perl?

=item How do I install a module from CPAN?

=item What's the difference between require and use?

=item How do I keep my own module/library directory?

=item How do I add the directory my program lives in to the module/library
search path?

=item How do I add a directory to my include path (@INC) at runtime?

the C<PERLLIB> environment variable, the C<PERL5LIB> environment variable,
the C<perl -Idir> command line flag, the C<lib> pragma:, the L<local::lib>
module:

=item Where are modules installed?

=item What is socket.ph and where do I get it?

=back

=item AUTHOR AND COPYRIGHT

=back

=head2 perlfaq9 - Web, Email and Networking

=over 4

=item VERSION

=item DESCRIPTION

=over 4

=item Should I use a web framework?

=item Which web framework should I use?
X<framework> X<CGI.pm> X<CGI> X<Catalyst> X<Dancer>

L<Catalyst>, L<Dancer2>, L<Mojolicious>, L<Web::Simple>

=item What is Plack and PSGI?

=item How do I remove HTML from a string?

=item How do I extract URLs?

=item How do I fetch an HTML file?

=item How do I automate an HTML form submission?

=item How do I decode or create those %-encodings on the web?
X<URI> X<URI::Escape> X<RFC 2396>

=item How do I redirect to another page?

=item How do I put a password on my web pages?

=item How do I make sure users can't enter values into a form that causes
my CGI script to do bad things?

=item How do I parse a mail header?

=item How do I check a valid mail address?

=item How do I decode a MIME/BASE64 string?

=item How do I find the user's mail address?

=item How do I send email?

L<Email::Sender::Transport::Sendmail>, L<Email::Sender::Transport::SMTP>

=item How do I use MIME to make an attachment to a mail message?

=item How do I read email?

=item How do I find out my hostname, domainname, or IP address?
X<hostname, domainname, IP address, host, domain, hostfqdn, inet_ntoa,
gethostbyname, Socket, Net::Domain, Sys::Hostname>

=item How do I fetch/put an (S)FTP file?

=item How can I do RPC in Perl?

=back

=item AUTHOR AND COPYRIGHT

=back

=head2 perlsyn - Perl syntax: declarations, statements, comments

=over 4

=item DESCRIPTION

=over 4

=item Declarations
X<declaration> X<undef> X<undefined> X<uninitialized>

=item Comments
X<comment> X<#>

=item Simple Statements
X<statement> X<semicolon> X<expression> X<;>

=item Statement Modifiers
X<statement modifier> X<modifier> X<if> X<unless> X<while>
X<until> X<when> X<foreach> X<for>

=item Compound Statements
X<statement, compound> X<block> X<bracket, curly> X<curly bracket> X<brace>
X<{> X<}> X<if> X<unless> X<given> X<while> X<until> X<foreach> X<for>
X<continue>

=item Loop Control
X<loop control> X<loop, control> X<next> X<last> X<redo> X<continue>

=item For Loops
X<for> X<foreach>

=item Foreach Loops
X<for> X<foreach>

=item Try Catch Exception Handling
X<try> X<catch> X<finally>

=item Basic BLOCKs
X<block>

=item defer blocks
X<defer>

=item Switch Statements

=item Goto
X<goto>

=item The Ellipsis Statement
X<...>
X<... statement>
X<ellipsis operator>
X<elliptical statement>
X<unimplemented statement>
X<unimplemented operator>
X<yada-yada>
X<yada-yada operator>
X<... operator>
X<whatever operator>
X<triple-dot operator>

=item PODs: Embedded Documentation
X<POD> X<documentation>

=item Plain Old Comments (Not!)
X<comment> X<line> X<#> X<preprocessor> X<eval>

=item Experimental Details on given and when

Z<>1, Z<>2, Z<>3, Z<>4, Z<>5, Z<>6, Z<>7, Z<>8, Z<>9, Z<>10

=back

=back

=head2 perldata - Perl data types

=over 4

=item DESCRIPTION

=over 4

=item Variable names
X<variable, name> X<variable name> X<data type> X<type>

=item Identifier parsing
X<identifiers>

=item Context
X<context> X<scalar context> X<list context>

=item Scalar values
X<scalar> X<number> X<string> X<reference>

=item Scalar value constructors
X<scalar, literal> X<scalar, constant>

=item List value constructors
X<list>

=item Subscripts

=item Multi-dimensional array emulation

=item Slices
X<slice> X<array, slice> X<hash, slice>

=item Typeglobs and Filehandles
X<typeglob> X<filehandle> X<*>

=back

=item SEE ALSO

=back

=head2 perlop - Perl expressions: operators, precedence, string literals

=over 4

=item DESCRIPTION

=over 4

=item Operator Precedence and Associativity
X<operator, precedence> X<precedence> X<associativity>

=item Terms and List Operators (Leftward)
X<list operator> X<operator, list> X<term>

=item The Arrow Operator
X<arrow> X<dereference> X<< -> >>

=item Auto-increment and Auto-decrement
X<increment> X<auto-increment> X<++> X<decrement> X<auto-decrement> X<-->

=item Exponentiation
X<**> X<exponentiation> X<power>

=item Symbolic Unary Operators
X<unary operator> X<operator, unary>

=item Binding Operators
X<binding> X<operator, binding> X<=~> X<!~>

=item Multiplicative Operators
X<operator, multiplicative>

=item Additive Operators
X<operator, additive>

=item Shift Operators
X<shift operator> X<operator, shift> X<<< << >>>
X<<< >> >>> X<right shift> X<left shift> X<bitwise shift>
X<shl> X<shr> X<shift, right> X<shift, left>

=item Named Unary Operators
X<operator, named unary>

=item Relational Operators
X<relational operator> X<operator, relational>

=item Equality Operators
X<equality> X<equal> X<equals> X<operator, equality>

=item Class Instance Operator
X<isa operator>

=item Smartmatch Operator

1. Empty hashes or arrays match, 2. That is, each element smartmatches the
element of the same index in the other array.[3], 3. If a circular
reference is found, fall back to referential equality, 4. Either an actual
number, or a string that looks like one

=item Bitwise And
X<operator, bitwise, and> X<bitwise and> X<&>

=item Bitwise Or and Exclusive Or
X<operator, bitwise, or> X<bitwise or> X<|> X<operator, bitwise, xor>
X<bitwise xor> X<^>

=item C-style Logical And
X<&&> X<logical and> X<operator, logical, and>

=item C-style Logical Or
X<||> X<operator, logical, or>

=item C-style Logical Xor
X<^^> X<operator, logical, xor>

=item Logical Defined-Or
X<//> X<operator, logical, defined-or>

=item Range Operators
X<operator, range> X<range> X<..> X<...>

=item Conditional Operator
X<operator, conditional> X<operator, ternary> X<ternary> X<?:>

=item Assignment Operators
X<assignment> X<operator, assignment> X<=> X<**=> X<+=> X<*=> X<&=>
X<<< <<= >>> X<&&=> X<-=> X</=> X<|=> X<<< >>= >>> X<||=> X<//=> X<.=>
X<%=> X<^=> X<x=> X<&.=> X<|.=> X<^.=>

=item Comma Operator
X<comma> X<operator, comma> X<,>

=item List Operators (Rightward)
X<operator, list, rightward> X<list operator>

=item Logical Not
X<operator, logical, not> X<not>

=item Logical And
X<operator, logical, and> X<and>

=item Logical or and Exclusive Or
X<operator, logical, or> X<operator, logical, xor>
X<operator, logical, exclusive or>
X<or> X<xor>

=item C Operators Missing From Perl
X<operator, missing from perl> X<&> X<*>
X<typecasting> X<(TYPE)>

unary &, unary *, (TYPE)

=item Quote and Quote-like Operators
X<operator, quote> X<operator, quote-like> X<q> X<qq> X<qx> X<qw> X<m>
X<qr> X<s> X<tr> X<'> X<''> X<"> X<""> X<//> X<`> X<``> X<<< << >>>
X<escape sequence> X<escape>

[1], [2], [3], [4], [5], [6], [7], [8]

=item Regexp Quote-Like Operators
X<operator, regexp>

C<qr/I<STRING>/msixpodualn> X<qr> X</i> X</m> X</o> X</s> X</x> X</p>,
C<m/I<PATTERN>/msixpodualngc> X<m> X<operator, match> X<regexp, options>
X<regexp> X<regex, options> X<regex> X</m> X</s> X</i> X</x> X</p> X</o>
X</g> X</c>, C</I<PATTERN>/msixpodualngc>, The empty pattern C<//>,
Matching in list context, C<\G I<assertion>>, C<m?I<PATTERN>?msixpodualngc>
X<?> X<operator, match-once>,
C<s/I<PATTERN>/I<REPLACEMENT>/msixpodualngcer> X<s> X<substitute>
X<substitution> X<replace> X<regexp, replace> X<regexp, substitute> X</m>
X</s> X</i> X</x> X</p> X</o> X</g> X</c> X</e> X</r>

=item Quote-Like Operators
X<operator, quote-like>

C<q/I<STRING>/> X<q> X<quote, single> X<'> X<''>, C<'I<STRING>'>,
C<qq/I<STRING>/> X<qq> X<quote, double> X<"> X<"">, C<"I<STRING>">,
C<qx/I<STRING>/> X<qx> X<`> X<``> X<backtick>, C<`I<STRING>`>,
C<qw/I<STRING>/> X<qw> X<quote, list> X<quote, words>,
C<tr/I<SEARCHLIST>/I<REPLACEMENTLIST>/cdsr> X<tr> X<y> X<transliterate>
X</c> X</d> X</s>, C<y/I<SEARCHLIST>/I<REPLACEMENTLIST>/cdsr>, C<< <<I<EOF>
>> X<here-doc> X<heredoc> X<here-document> X<<< << >>>, Double Quotes,
Single Quotes, Backticks, Indented Here-docs

=item Gory details of parsing quoted constructs
X<quote, gory details>

Finding the end, Interpolation X<interpolation>, C<<<'EOF'>,  C<m''>, the
pattern of C<s'''>, C<''>, C<q//>, C<tr'''>, C<y'''>, the replacement of
C<s'''>, C<tr///>, C<y///>, C<"">, C<``>, C<qq//>, C<qx//>, C<< <file*glob>
>>, C<<<"EOF">, The replacement of C<s///>, C<RE> in C<m?RE?>, C</RE/>,
C<m/RE/>, C<s/RE/foo/>,, Parsing regular expressions X<regexp, parse>,
Optimization of regular expressions X<regexp, optimization>

=item I/O Operators
X<operator, i/o> X<operator, io> X<io> X<while> X<filehandle>
X<< <> >> X<< <<>> >> X<@ARGV>

=item Constant Folding
X<constant folding> X<folding>

=item No-ops
X<no-op> X<nop>

=item Bitwise String Operators
X<operator, bitwise, string> X<&.> X<|.> X<^.> X<~.>

=item Integer Arithmetic
X<integer>

=item Floating-point Arithmetic

=item Bigger Numbers
X<number, arbitrary precision>

=back

=item APPENDIX

=over 4

=item List of Extra Paired Delimiters

=back

=back

=head2 perlsub - Perl subroutines (user-defined functions)

=over 4

=item SYNOPSIS

=item DESCRIPTION

documented later in this document, documented in L<perlmod>, documented in
L<perlobj>, documented in L<perltie>, documented in L<PerlIO::via>,
documented in L<perlfunc>, documented in L<UNIVERSAL>, documented in
L<perldebguts>, undocumented, used internally by the L<overload> feature

=over 4

=item Signatures

=item Private Variables via my()
X<my> X<variable, lexical> X<lexical> X<lexical variable> X<scope, lexical>
X<lexical scope> X<attributes, my>

=item Persistent Private Variables
X<state> X<state variable> X<static> X<variable, persistent>
X<variable, static> X<closure>

=item Temporary Values via local()
X<local> X<scope, dynamic> X<dynamic scope> X<variable, local>
X<variable, temporary>

=item Lvalue subroutines
X<lvalue> X<subroutine, lvalue>

=item Lexical Subroutines
X<my sub> X<state sub> X<our sub> X<subroutine, lexical>

=item Passing Symbol Table Entries (typeglobs)
X<typeglob> X<*>

=item When to Still Use local()
X<local> X<variable, local>

=item Pass by Reference
X<pass by reference> X<pass-by-reference> X<reference>

=item Prototypes
X<prototype> X<subroutine, prototype>

=item Constant Functions
X<constant>

=item Overriding Built-in Functions
X<built-in> X<override> X<CORE> X<CORE::GLOBAL>

=item Autoloading
X<autoloading> X<AUTOLOAD>

=item Subroutine Attributes
X<attribute> X<subroutine, attribute> X<attrs>

=back

=item SEE ALSO

=back

=head2 perlfunc - Perl builtin functions

=over 4

=item DESCRIPTION

=over 4

=item Perl Functions by Category
X<function>

Functions for SCALARs or strings X<scalar> X<string> X<character>, Regular
expressions and pattern matching X<regular expression> X<regex> X<regexp>,
Numeric functions X<numeric> X<number> X<trigonometric> X<trigonometry>,
Functions for real @ARRAYs X<array>, Functions for list data X<list>,
Functions for real %HASHes X<hash>, Input and output functions X<I/O>
X<input> X<output> X<dbm>, Functions for fixed-length data or records,
Functions for filehandles, files, or directories X<file> X<filehandle>
X<directory> X<pipe> X<link> X<symlink>, Keywords related to the control
flow of your Perl program X<control flow>, Keywords related to scoping,
Miscellaneous functions, Functions for processes and process groups
X<process> X<pid> X<process id>, Keywords related to Perl modules
X<module>, Keywords related to classes and object-orientation X<object>
X<class> X<package>, Low-level socket functions X<socket> X<sock>, System V
interprocess communication functions X<IPC> X<System V> X<semaphore>
X<shared memory> X<memory> X<message>, Fetching user and group info X<user>
X<group> X<password> X<uid> X<gid>  X<passwd> X</etc/passwd>, Fetching
network info X<network> X<protocol> X<host> X<hostname> X<IP> X<address>
X<service>, Time-related functions X<time> X<date>, Non-function keywords

=item Portability
X<portability> X<Unix> X<portable>

=item Alphabetical Listing of Perl Functions

-I<X> FILEHANDLE
X<-r>X<-w>X<-x>X<-o>X<-R>X<-W>X<-X>X<-O>X<-e>X<-z>X<-s>X<-f>X<-d>X<-l>X<-p>
X<-S>X<-b>X<-c>X<-t>X<-u>X<-g>X<-k>X<-T>X<-B>X<-M>X<-A>X<-C>, -I<X> EXPR,
-I<X> DIRHANDLE, -I<X>, abs VALUE X<abs> X<absolute>, abs, accept
NEWSOCKET,GENERICSOCKET X<accept>, alarm SECONDS X<alarm> X<SIGALRM>
X<timer>, alarm, atan2 Y,X X<atan2> X<arctangent> X<tan> X<tangent>, bind
SOCKET,NAME X<bind>, binmode FILEHANDLE, LAYER X<binmode> X<binary> X<text>
X<DOS> X<Windows>, binmode FILEHANDLE, bless REF,CLASSNAME X<bless>, bless
REF, Bless the referred-to item into a specific package (recommended
form):, Bless the referred-to item into package C<main>:, Bless the
referred-to item into the current package (not inheritable):, break, caller
EXPR X<caller> X<call stack> X<stack> X<stack trace>, caller, chdir EXPR
X<chdir> X<cd> X<directory, change>, chdir FILEHANDLE, chdir DIRHANDLE,
chdir, chmod LIST X<chmod> X<permission> X<mode>, chomp VARIABLE X<chomp>
X<INPUT_RECORD_SEPARATOR> X<$/> X<newline> X<eol>, chomp( LIST ), chomp,
chop VARIABLE X<chop>, chop( LIST ), chop, chown LIST X<chown> X<owner>
X<user> X<group>, chr NUMBER X<chr> X<character> X<ASCII> X<Unicode>, chr,
chroot FILENAME X<chroot> X<root>, chroot, class NAMESPACE, class NAMESPACE
VERSION, class NAMESPACE BLOCK, class NAMESPACE VERSION BLOCK, close
FILEHANDLE X<close>, close, closedir DIRHANDLE X<closedir>, connect
SOCKET,NAME X<connect>, continue BLOCK X<continue>, continue, cos EXPR
X<cos> X<cosine> X<acos> X<arccosine>, cos, crypt PLAINTEXT,SALT X<crypt>
X<digest> X<hash> X<salt> X<plaintext> X<password> X<decrypt>
X<cryptography> X<passwd> X<encrypt>, dbmclose HASH X<dbmclose>, dbmopen
HASH,DBNAME,MASK X<dbmopen> X<dbm> X<ndbm> X<sdbm> X<gdbm>, defined EXPR
X<defined> X<undef> X<undefined>, defined, delete EXPR X<delete>, die LIST
X<die> X<throw> X<exception> X<raise> X<$@> X<abort>, do BLOCK X<do>
X<block>, do EXPR X<do>, dump LABEL X<dump> X<core> X<undump>, dump EXPR,
dump, each HASH X<each> X<hash, iterator>, each ARRAY X<array, iterator>,
eof FILEHANDLE X<eof> X<end of file> X<end-of-file>, eof (), eof, eval EXPR
X<eval> X<try> X<catch> X<evaluate> X<parse> X<execute> X<error, handling>
X<exception, handling>, eval BLOCK, eval, String eval, Under the
L<C<"unicode_eval"> feature|feature/The 'unicode_eval' and 'evalbytes'
features>, Outside the C<"unicode_eval"> feature, If upgraded, C<$v> will
be C<"\xc4\x80"> (i.e., the C<use utf8> has no effect.), If non-upgraded,
C<$v> will be C<"\x{100}">, Block eval, evalbytes EXPR X<evalbytes>,
evalbytes, exec LIST X<exec> X<execute>, exec PROGRAM LIST, exists EXPR
X<exists> X<autovivification>, exit EXPR X<exit> X<terminate> X<abort>,
exit, exp EXPR X<exp> X<exponential> X<antilog> X<antilogarithm> X<e>, exp,
fc EXPR X<fc> X<foldcase> X<casefold> X<fold-case> X<case-fold>, fc, fcntl
FILEHANDLE,FUNCTION,SCALAR X<fcntl>, __FILE__ X<__FILE__>, field VARNAME
X<field>, fileno FILEHANDLE X<fileno>, fileno DIRHANDLE, flock
FILEHANDLE,OPERATION X<flock> X<lock> X<locking>, fork X<fork> X<child>
X<parent>, format X<format>, formline PICTURE,LIST X<formline>, getc
FILEHANDLE X<getc> X<getchar> X<character> X<file, read>, getc, getlogin
X<getlogin> X<login>, getpeername SOCKET X<getpeername> X<peer>, getpgrp
PID X<getpgrp> X<group>, getppid X<getppid> X<parent> X<pid>, getpriority
WHICH,WHO X<getpriority> X<priority> X<nice>, getpwnam NAME X<getpwnam>
X<getgrnam> X<gethostbyname> X<getnetbyname> X<getprotobyname> X<getpwuid>
X<getgrgid> X<getservbyname> X<gethostbyaddr> X<getnetbyaddr>
X<getprotobynumber> X<getservbyport> X<getpwent> X<getgrent> X<gethostent>
X<getnetent> X<getprotoent> X<getservent> X<setpwent> X<setgrent>
X<sethostent> X<setnetent> X<setprotoent> X<setservent> X<endpwent>
X<endgrent> X<endhostent> X<endnetent> X<endprotoent> X<endservent>,
getgrnam NAME, gethostbyname NAME, getnetbyname NAME, getprotobyname NAME,
getpwuid UID, getgrgid GID, getservbyname NAME,PROTO, gethostbyaddr
ADDR,ADDRTYPE, getnetbyaddr ADDR,ADDRTYPE, getprotobynumber NUMBER,
getservbyport PORT,PROTO, getpwent, getgrent, gethostent, getnetent,
getprotoent, getservent, setpwent, setgrent, sethostent STAYOPEN, setnetent
STAYOPEN, setprotoent STAYOPEN, setservent STAYOPEN, endpwent, endgrent,
endhostent, endnetent, endprotoent, endservent, getsockname SOCKET
X<getsockname>, getsockopt SOCKET,LEVEL,OPTNAME X<getsockopt>, glob EXPR
X<glob> X<wildcard> X<filename, expansion> X<expand>, glob, gmtime EXPR
X<gmtime> X<UTC> X<Greenwich>, gmtime, goto LABEL X<goto> X<jump> X<jmp>,
goto EXPR, goto &NAME, grep BLOCK LIST X<grep>, grep EXPR,LIST, hex EXPR
X<hex> X<hexadecimal>, hex, import LIST X<import>, index
STR,SUBSTR,POSITION X<index> X<indexOf> X<InStr>, index STR,SUBSTR, int
EXPR X<int> X<integer> X<truncate> X<trunc> X<floor>, int, ioctl
FILEHANDLE,FUNCTION,SCALAR X<ioctl>, join EXPR,LIST X<join>, keys HASH
X<keys> X<key>, keys ARRAY, kill SIGNAL, LIST, kill SIGNAL X<kill>
X<signal>, last LABEL X<last> X<break>, last EXPR, last, lc EXPR X<lc>
X<lowercase>, lc, If C<use bytes> is in effect:, Otherwise, if C<use
locale> for C<LC_CTYPE> is in effect:, Otherwise, If EXPR has the UTF8 flag
set:, Otherwise, if C<use feature 'unicode_strings'> or C<use locale
':not_characters'> is in effect:, Otherwise:, lcfirst EXPR X<lcfirst>
X<lowercase>, lcfirst, length EXPR X<length> X<size>, length, __LINE__
X<__LINE__>, link OLDFILE,NEWFILE X<link>, listen SOCKET,QUEUESIZE
X<listen>, local EXPR X<local>, localtime EXPR X<localtime> X<ctime>,
localtime, lock THING X<lock>, log EXPR X<log> X<logarithm> X<e> X<ln>
X<base>, log, lstat FILEHANDLE X<lstat>, lstat EXPR, lstat DIRHANDLE,
lstat, m//, map BLOCK LIST X<map>, map EXPR,LIST, method NAME BLOCK
X<method>, method NAME : ATTRS BLOCK, mkdir FILENAME,MODE X<mkdir> X<md>
X<directory, create>, mkdir FILENAME, mkdir, msgctl ID,CMD,ARG X<msgctl>,
msgget KEY,FLAGS X<msgget>, msgrcv ID,VAR,SIZE,TYPE,FLAGS X<msgrcv>, msgsnd
ID,MSG,FLAGS X<msgsnd>, my VARLIST X<my>, my TYPE VARLIST, my VARLIST :
ATTRS, my TYPE VARLIST : ATTRS, next LABEL X<next> X<continue>, next EXPR,
next, no MODULE VERSION LIST X<no declarations> X<unimporting>, no MODULE
VERSION, no MODULE LIST, no MODULE, no VERSION, oct EXPR X<oct> X<octal>
X<hex> X<hexadecimal> X<binary> X<bin>, oct, open FILEHANDLE,MODE,EXPR
X<open> X<pipe> X<file, open> X<fopen>, open FILEHANDLE,MODE,EXPR,LIST,
open FILEHANDLE,MODE,REFERENCE, open FILEHANDLE,EXPR, open FILEHANDLE,
Working with files, Simple examples, About filehandles, About modes,
Checking the return value, Specifying I/O layers in MODE, Using C<undef>
for temporary files, Opening a filehandle into an in-memory scalar, Opening
a filehandle into a command, Duping filehandles, Legacy usage, Specifying
mode and filename as a single argument, Assigning a filehandle to a
bareword, Calling C<open> with one argument via global variables, Other
considerations, Automatic filehandle closure, Automatic pipe flushing,
Direct versus by-reference assignment of filehandles, Whitespace and
special characters in the filename argument, Invoking C-style C<open>,
Portability issues, opendir DIRHANDLE,EXPR X<opendir>, ord EXPR X<ord>
X<encoding>, ord, our VARLIST X<our> X<global>, our TYPE VARLIST, our
VARLIST : ATTRS, our TYPE VARLIST : ATTRS, pack TEMPLATE,LIST X<pack>,
package NAMESPACE, package NAMESPACE VERSION X<package> X<module>
X<namespace> X<version>, package NAMESPACE BLOCK, package NAMESPACE VERSION
BLOCK X<package> X<module> X<namespace> X<version>, __PACKAGE__
X<__PACKAGE__>, __CLASS__ X<__CLASS__>, pipe READHANDLE,WRITEHANDLE
X<pipe>, pop ARRAY X<pop> X<stack>, pop, pos SCALAR X<pos> X<match,
position>, pos, print FILEHANDLE LIST X<print>, print FILEHANDLE, print
LIST, print, printf FILEHANDLE FORMAT, LIST X<printf>, printf FILEHANDLE,
printf FORMAT, LIST, printf, prototype FUNCTION X<prototype>, prototype,
push ARRAY,LIST X<push> X<stack>, q/STRING/, qq/STRING/, qw/STRING/,
qx/STRING/, qr/STRING/, quotemeta EXPR X<quotemeta> X<metacharacter>,
quotemeta, rand EXPR X<rand> X<random>, rand, read
FILEHANDLE,SCALAR,LENGTH,OFFSET X<read> X<file, read>, read
FILEHANDLE,SCALAR,LENGTH, readdir DIRHANDLE X<readdir>, readline EXPR,
readline X<readline> X<gets> X<fgets>, readlink EXPR X<readlink>, readlink,
readpipe EXPR, readpipe X<readpipe>, recv SOCKET,SCALAR,LENGTH,FLAGS
X<recv>, redo LABEL X<redo>, redo EXPR, redo, ref EXPR X<ref> X<reference>,
ref, rename OLDNAME,NEWNAME X<rename> X<move> X<mv> X<ren>, require VERSION
X<require>, require EXPR, require, reset EXPR X<reset>, reset, return EXPR
X<return>, return, reverse LIST X<reverse> X<rev> X<invert>, rewinddir
DIRHANDLE X<rewinddir>, rindex STR,SUBSTR,POSITION X<rindex>, rindex
STR,SUBSTR, rmdir FILENAME X<rmdir> X<rd> X<directory, remove>, rmdir,
s///, say FILEHANDLE LIST X<say>, say FILEHANDLE, say LIST, say, scalar
EXPR X<scalar> X<context>, seek FILEHANDLE,POSITION,WHENCE X<seek> X<fseek>
X<filehandle, position>, seekdir DIRHANDLE,POS X<seekdir>, select
FILEHANDLE X<select> X<filehandle, default>, select, select
RBITS,WBITS,EBITS,TIMEOUT X<select>, semctl ID,SEMNUM,CMD,ARG X<semctl>,
semget KEY,NSEMS,FLAGS X<semget>, semop KEY,OPSTRING X<semop>, send
SOCKET,MSG,FLAGS,TO X<send>, send SOCKET,MSG,FLAGS, setpgrp PID,PGRP
X<setpgrp> X<group>, setpriority WHICH,WHO,PRIORITY X<setpriority>
X<priority> X<nice> X<renice>, setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL
X<setsockopt>, shift ARRAY X<shift>, shift, shmctl ID,CMD,ARG X<shmctl>,
shmget KEY,SIZE,FLAGS X<shmget>, shmread ID,VAR,POS,SIZE X<shmread>
X<shmwrite>, shmwrite ID,STRING,POS,SIZE, shutdown SOCKET,HOW X<shutdown>,
sin EXPR X<sin> X<sine> X<asin> X<arcsine>, sin, sleep EXPR X<sleep>
X<pause>, sleep, socket SOCKET,DOMAIN,TYPE,PROTOCOL X<socket>, socketpair
SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL X<socketpair>, sort SUBNAME LIST
X<sort>, sort BLOCK LIST, sort LIST, splice ARRAY,OFFSET,LENGTH,LIST
X<splice>, splice ARRAY,OFFSET,LENGTH, splice ARRAY,OFFSET, splice ARRAY,
split /PATTERN/,EXPR,LIMIT X<split>, split /PATTERN/,EXPR, split /PATTERN/,
split, sprintf FORMAT, LIST X<sprintf>, format parameter index, flags,
vector flag, (minimum) width, precision, or maximum width X<precision>,
size, order of arguments, sqrt EXPR X<sqrt> X<root> X<square root>, sqrt,
srand EXPR X<srand> X<seed> X<randseed>, srand, stat FILEHANDLE X<stat>
X<file, status> X<ctime>, stat EXPR, stat DIRHANDLE, stat, state VARLIST
X<state>, state TYPE VARLIST, state VARLIST : ATTRS, state TYPE VARLIST :
ATTRS, study SCALAR X<study>, study, sub NAME BLOCK X<sub>, sub NAME
(PROTO) BLOCK, sub NAME : ATTRS BLOCK, sub NAME (PROTO) : ATTRS BLOCK,
__SUB__ X<__SUB__>, substr EXPR,OFFSET,LENGTH,REPLACEMENT X<substr>
X<substring> X<mid> X<left> X<right>, substr EXPR,OFFSET,LENGTH, substr
EXPR,OFFSET, symlink OLDFILE,NEWFILE X<symlink> X<link> X<symbolic link>
X<link, symbolic>, syscall NUMBER, LIST X<syscall> X<system call>, sysopen
FILEHANDLE,FILENAME,MODE X<sysopen>, sysopen
FILEHANDLE,FILENAME,MODE,PERMS, sysread FILEHANDLE,SCALAR,LENGTH,OFFSET
X<sysread>, sysread FILEHANDLE,SCALAR,LENGTH, sysseek
FILEHANDLE,POSITION,WHENCE X<sysseek> X<lseek>, system LIST X<system>
X<shell>, system PROGRAM LIST, syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET
X<syswrite>, syswrite FILEHANDLE,SCALAR,LENGTH, syswrite FILEHANDLE,SCALAR,
tell FILEHANDLE X<tell>, tell, telldir DIRHANDLE X<telldir>, tie
VARIABLE,CLASSNAME,LIST X<tie>, tied VARIABLE X<tied>, time X<time>
X<epoch>, times X<times>, tr///, truncate FILEHANDLE,LENGTH X<truncate>,
truncate EXPR,LENGTH, uc EXPR X<uc> X<uppercase> X<toupper>, uc, ucfirst
EXPR X<ucfirst> X<uppercase>, ucfirst, umask EXPR X<umask>, umask, undef
EXPR X<undef> X<undefine>, undef, unlink LIST X<unlink> X<delete> X<remove>
X<rm> X<del>, unlink, unpack TEMPLATE,EXPR X<unpack>, unpack TEMPLATE,
unshift ARRAY,LIST X<unshift>, untie VARIABLE X<untie>, use Module VERSION
LIST X<use> X<module> X<import>, use Module VERSION, use Module LIST, use
Module, use VERSION, utime LIST X<utime>, values HASH X<values>, values
ARRAY, vec EXPR,OFFSET,BITS X<vec> X<bit> X<bit vector>, wait X<wait>,
waitpid PID,FLAGS X<waitpid>, wantarray X<wantarray> X<context>, warn LIST
X<warn> X<warning> X<STDERR>, write FILEHANDLE X<write>, write EXPR, write,
y///

=item Non-function Keywords by Cross-reference

__DATA__, __END__, BEGIN, CHECK, END, INIT, UNITCHECK, DESTROY, and, cmp,
eq, ge, gt, isa, le, lt, ne, not, or, x, xor, AUTOLOAD, else, elsif, for,
foreach, if, unless, until, while, elseif, default, given, when, try,
catch, finally, defer, ADJUST

=back

=back

=head2 perlopentut - simple recipes for opening files and pipes in Perl

=over 4

=item DESCRIPTION

I<OK>, I<HANDLE>, I<MODE>, I<PATHNAME>

=item Opening Text Files

=over 4

=item Opening Text Files for Reading

=item Opening Text Files for Writing

=back

=item Opening Binary Files

=item Opening Pipes

=over 4

=item Opening a pipe for reading

=item Opening a pipe for writing

=item Expressing the command as a list

=back

=item SEE ALSO

=item AUTHOR and COPYRIGHT

=back

=head2 perlpacktut - tutorial on C<pack> and C<unpack>

=over 4

=item DESCRIPTION

=item The Basic Principle

=item Packing Text

=item Packing Numbers

=over 4

=item Integers

=item Unpacking a Stack Frame

=item How to Eat an Egg on a Net

=item Byte-order modifiers

=item Floating point Numbers

=back

=item Exotic Templates

=over 4

=item Bit Strings

=item Uuencoding

=item Doing Sums

=item  Unicode

=item Another Portable Binary Encoding

=back

=item Template Grouping

=item Lengths and Widths

=over 4

=item String Lengths

=item Dynamic Templates

=item Counting Repetitions

=item Intel HEX

=back

=item Packing and Unpacking C Structures

=over 4

=item The Alignment Pit

=item Dealing with Endian-ness

=item Alignment, Take 2

=item Alignment, Take 3

=item Pointers for How to Use Them

=back

=item Pack Recipes

=item Funnies Section

=item Authors

=back

=head2 perlpod - the Plain Old Documentation format

=over 4

=item DESCRIPTION

=over 4

=item Ordinary Paragraph
X<POD, ordinary paragraph>

=item Verbatim Paragraph
X<POD, verbatim paragraph> X<verbatim>

=item Command Paragraph
X<POD, command>

C<=head1 I<Heading Text>> X<=head1> X<=head2> X<=head3> X<=head4> X<=head5>
X<=head6> X<head1> X<head2> X<head3> X<head4> X<head5> X<head6>, C<=head2
I<Heading Text>>, C<=head3 I<Heading Text>>, C<=head4 I<Heading Text>>,
C<=head5 I<Heading Text>>, C<=head6 I<Heading Text>>, C<=over
I<indentlevel>> X<=over> X<=item> X<=back> X<over> X<item> X<back>, C<=item
I<stuff...>>, C<=back>, C<=cut> X<=cut> X<cut>, C<=pod> X<=pod> X<pod>,
C<=begin I<formatname>> X<=begin> X<=end> X<=for> X<begin> X<end> X<for>,
C<=end I<formatname>>, C<=for I<formatname> I<text...>>, C<=encoding
I<encodingname>> X<=encoding> X<encoding>

=item Formatting Codes
X<POD, formatting code> X<formatting code>
X<POD, interior sequence> X<interior sequence>

C<IE<lt>textE<gt>> -- italic text X<I> X<< IZ<><> >> X<POD, formatting
code, italic> X<italic>, C<BE<lt>textE<gt>> -- bold text X<B> X<< BZ<><> >>
X<POD, formatting code, bold> X<bold>, C<CE<lt>codeE<gt>> -- code text X<C>
X<< CZ<><> >> X<POD, formatting code, code> X<code>, C<LE<lt>nameE<gt>> --
a hyperlink X<L> X<< LZ<><> >> X<POD, formatting code, hyperlink>
X<hyperlink>, C<EE<lt>escapeE<gt>> -- a character escape X<E> X<< EZ<><> >>
X<POD, formatting code, escape> X<escape>, C<FE<lt>filenameE<gt>> -- used
for filenames X<F> X<< FZ<><> >> X<POD, formatting code, filename>
X<filename>, C<SE<lt>textE<gt>> -- text contains non-breaking spaces X<S>
X<< SZ<><> >> X<POD, formatting code, non-breaking space>  X<non-breaking
space>, C<XE<lt>topic nameE<gt>> -- an index entry X<X> X<< XZ<><> >>
X<POD, formatting code, index entry> X<index entry>, C<ZE<lt>E<gt>> -- a
null (zero-effect) formatting code X<Z> X<< ZZ<><> >> X<POD, formatting
code, null> X<null>

=item The Intent
X<POD, intent of>

=item Embedding Pods in Perl Modules
X<POD, embedding>

=item Hints for Writing Pod

X<podchecker> X<POD, validating>

=back

=item SEE ALSO

=item AUTHOR

=back

=head2 perlpodspec - Plain Old Documentation: format specification and
notes

=over 4

=item DESCRIPTION

=item Pod Definitions

=item Pod Commands

"=head1", "=head2", "=head3", "=head4", "=head5", "=head6", "=pod", "=cut",
"=over", "=item", "=back", "=begin formatname", "=begin formatname
parameter", "=end formatname", "=for formatname text...", "=encoding
encodingname"

=item Pod Formatting Codes

C<IE<lt>textE<gt>> -- italic text, C<BE<lt>textE<gt>> -- bold text,
C<CE<lt>codeE<gt>> -- code text, C<FE<lt>filenameE<gt>> -- style for
filenames, C<XE<lt>topic nameE<gt>> -- an index entry, C<ZE<lt>E<gt>> -- a
null (zero-effect) formatting code, C<LE<lt>nameE<gt>> -- a hyperlink,
C<EE<lt>escapeE<gt>> -- a character escape, C<SE<lt>textE<gt>> -- text
contains non-breaking spaces

=item Notes on Implementing Pod Processors

=item About LE<lt>...E<gt> Codes

First:, Second:, Third:, Fourth:, Fifth:, Sixth:

=item About =over...=back Regions

=item About Data Paragraphs and "=begin/=end" Regions

=item SEE ALSO

=item AUTHOR

=back

=head2 perldocstyle - A style guide for writing Perl's documentation

=over 4

=item DESCRIPTION

=over 4

=item Purpose of this guide
