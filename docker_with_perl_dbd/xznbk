    # $cipher - value corresponding to openssl's SSL_CIPHER structure
    # $alg_bits - [optional] empty scalar for storing additional return value
    #
    # returns: (integer) number of secret bits, 0 on error
    #          (integer) in $alg_bits for bits processed by the chosen algorithm

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CIPHER_get_bits.html>

Example:

    # bits and alg_bits are not equal for e.g., TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,
    # RFC 8422 name TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
    my $alg_bits;
    my $bits = Net::SSLeay::CIPHER_get_bits($cipher, $alg_bits);
    # my $bits = Net::SSLeay::CIPHER_get_bits($cipher);
    print "bits: $bits, alg_bits: $alg_bits\n";

=item * CIPHER_get_version

B<COMPATIBILITY:> not available in Net-SSLeay-1.88 and before

Returns version of SSL/TLS protocol that first defined the cipher

    my $rv = Net::SSLeay::CIPHER_get_version($cipher);
    # $cipher - value corresponding to openssl's SSL_CIPHER structure
    #
    # returns: (string) cipher name e.g. 'TLSv1/SSLv3' with some libraries, 'TLSv1.0' or 'TLSv1.3', '(NONE)' if $cipher is undefined.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CIPHER_get_version.html>

=item * CIPHER_get_handshake_digest

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before; requires at least OpenSSL 1.1.1-pre1, not in LibreSSL

Returns version of SSL/TLS protocol that first defined the cipher

    my $rv = Net::SSLeay::CIPHER_get_handshake_digest($cipher);
    # $cipher - value corresponding to openssl's SSL_CIPHER structure
    #
    # returns: A value corresponding to OpenSSL's EVP_MD structure for the digest used during the SSL/TLS handshake when using $cipher.

Check openssl doc L<https://www.openssl.org/docs/ssl/SSL_CIPHER_get_handshake_digest.html>

=item * CIPHER_find

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before; requires at least OpenSSL 1.0.2 or LibreSSL 3.4.0

Returns a SSL_CIPHER structure from the current SSL using a two octet cipher ID.

    my $cipher = Net::SSLeay::CIPHER_find($ssl, $id);
    # $ssl - value corresponding to OpenSSL SSL structure
    # $id - two octet cipher ID.
    #
    # returns: A value corresponding to OpenSSL SSL_CIPHER structure or undef if cipher is not found or an error occurs.

Example that prints 'OpenSSL name is: TLS_AES_128_GCM_SHA256' with
TLSv1.3 when the ciphersuite is enabled:

    # TLS Cipher Suite 0x13, 0x01 is TLS_AES_128_GCM_SHA256
    my $id = pack('n', 0x1301);
    my $cipher =  Net::SSLeay::CIPHER_find($ssl, $id);
    printf("OpenSSL name is: " . Net::SSLeay::CIPHER_get_name($cipher));

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CIPHER_find.html>

=back

=head3 Low level API: BN_* related functions

=over

=item * BN_dup

Creates and returns a new BIGNUM from an existing BIGNUM.

    my $bn = Net::SSLeay::BN_dup($from);
    # $from - value corresponding to BIGNUM structure
    #
    # returns: a new BIGNUM containing the value $from

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BN_dup.html>

=item * BN_clear

Clears BIGNUM data when it is no longer needed.

    Net::SSLeay::BN_clear($bn);
    # $bn - value corresponding to BIGNUM structure
    #
    # returns: nothing. $bn is set to 0.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BN_clear.html>

=item * BN_clear_free

Clears and frees a previously allocated BIGNUM.

    Net::SSLeay::BN_clear_free($bn);
    # $bn - value corresponding to BIGNUM structure
    #
    # returns: nothing. $bn is no longer usable.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BN_clear_free.html>

=item * BN_free

Frees previously a allocated BIGNUM.

    Net::SSLeay::BN_free($bn);
    # $bn - value corresponding to BIGNUM structure
    #
    # returns: nothing. $bn is no longer usable.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BN_free.html>

=back

=head3 Low level API: RSA_* related functions

=over

=item * RSA_generate_key

Generates a key pair and returns it in a newly allocated RSA structure.
The pseudo-random number generator must be seeded prior to calling RSA_generate_key.

    my $rv = Net::SSLeay::RSA_generate_key($bits, $e, $perl_cb, $perl_cb_arg);
    # $bits - (integer) modulus size in bits e.g. 512, 1024, 2048
    # $e - (integer) public exponent, an odd number, typically 3, 17 or 65537
    # $perl_cb - [optional] reference to perl callback function
    # $perl_cb_arg - [optional] data that will be passed to callback function when invoked
    #
    # returns: value corresponding to openssl's RSA structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/RSA_generate_key.html>

=item * RSA_free

Frees the RSA structure and its components. The key is erased before the memory is returned to the system.

    Net::SSLeay::RSA_free($r);
    # $r - value corresponding to openssl's RSA structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/RSA_new.html>

=item * RSA_get_key_parameters

B<COMPATIBILITY>: not available when OpenSSL is 1.1.0 or later and Net-SSLeay is 1.92 or earlier

Returns a list of pointers to BIGNUMs representing the parameters of
the key in this order: C<(n, e, d, p, q, dmp1, dmq1, iqmp)>

B<Caution>: returned list consists of direct pointers to BIGNUMs. These must
not be freed by the caller. These pointers can be used to duplicate a
BIGNUM, which would need to be blessed as Crypt::OpenSSL::Bignum for further
use. See L<Crypt::OpenSSL::Bignum> and OpenSSL manual for more about
C<bless_pointer> to why C<BN_dup()> is used.

    my (@params) = RSA_get_key_parameters($r);

    my $dup = Net::SSLeay::BN_dup($params[1]);
    my $e = Crypt::OpenSSL::Bignum->bless_pointer($dup);
    print "exponent: ", $e->to_decimal(), "\n";

This function has no equivalent in OpenSSL or LibreSSL but combines
functions C<RSA_get0_key>, C<RSA_get0_factors> and C<RSA_get0_crt_params> for
an easier interface.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/RSA_get0_key.html>

=back

=head3 Low level API: BIO_* related functions

=over

=item * BIO_eof

Returns 1 if the BIO has read EOF, the precise meaning of 'EOF' varies according to the BIO type.

    my $rv = Net::SSLeay::BIO_eof($s);
    # $s - value corresponding to openssl's BIO structure
    #
    # returns: 1 if EOF has been reached 0 otherwise

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BIO_ctrl.html>

=item * BIO_f_ssl

Returns the SSL BIO method. This is a filter BIO which is a wrapper
round the OpenSSL SSL routines adding a BIO 'flavour' to SSL I/O.

    my $rv = Net::SSLeay::BIO_f_ssl();
    #
    # returns: value corresponding to openssl's BIO_METHOD structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BIO_f_ssl.html>

=item * BIO_free

Frees up a single BIO.

    my $rv = Net::SSLeay::BIO_free($bio);
    # $bio; - value corresponding to openssl's BIO structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BIO_new.html>

=item * BIO_new

Returns a new BIO using method $type

    my $rv = Net::SSLeay::BIO_new($type);
    # $type - value corresponding to openssl's BIO_METHOD structure
    #
    # returns: value corresponding to openssl's BIO structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BIO_new.html>

=item * BIO_new_buffer_ssl_connect

Creates a new BIO chain consisting of a buffering BIO, an SSL BIO (using ctx) and a connect BIO.

    my $rv = Net::SSLeay::BIO_new_buffer_ssl_connect($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: value corresponding to openssl's BIO structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BIO_f_ssl.html>

=item * BIO_new_file

Creates a new file BIO with mode $mode the meaning of mode is the same
as the stdio function fopen(). The BIO_CLOSE flag is set on the returned BIO.

    my $rv = Net::SSLeay::BIO_new_file($filename, $mode);
    # $filename - (string) filename
    # $mode - (string) opening mode (as mode by stdio function fopen)
    #
    # returns: value corresponding to openssl's BIO structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BIO_s_file.html>

=item * BIO_new_ssl

Allocates an SSL BIO using SSL_CTX ctx and using client mode if client is non zero.

    my $rv = Net::SSLeay::BIO_new_ssl($ctx, $client);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $client - (integer) 0 or 1 - indicates ssl client mode
    #
    # returns: value corresponding to openssl's BIO structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BIO_f_ssl.html>

=item * BIO_new_ssl_connect

Creates a new BIO chain consisting of an SSL BIO (using ctx) followed by a connect BIO.

    my $rv = Net::SSLeay::BIO_new_ssl_connect($ctx);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    #
    # returns: value corresponding to openssl's BIO structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BIO_f_ssl.html>

=item * BIO_pending

Return the number of pending characters in the BIOs read buffers.

    my $rv = Net::SSLeay::BIO_pending($s);
    # $s - value corresponding to openssl's BIO structure
    #
    # returns: the amount of pending data

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BIO_ctrl.html>

=item * BIO_wpending

Return the number of pending characters in the BIOs write buffers.

    my $rv = Net::SSLeay::BIO_wpending($s);
    # $s - value corresponding to openssl's BIO structure
    #
    # returns: the amount of pending data

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BIO_ctrl.html>

=item * BIO_read

Read the underlying descriptor.

    Net::SSLeay::BIO_read($s, $max);
    # $s - value corresponding to openssl's BIO structure
    # $max - [optional] max. bytes to read (if not specified, the value 32768 is used)
    #
    # returns: data

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BIO_read.html>

=item * BIO_write

Attempts to write data from $buffer to BIO $b.

    my $rv = Net::SSLeay::BIO_write($b, $buffer);
    # $b - value corresponding to openssl's BIO structure
    # $buffer - data
    #
    # returns: amount of data successfully written
    #          or that no data was successfully read or written if the result is 0 or -1
    #          or -2 when the operation is not implemented in the specific BIO type

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BIO_read.html>

=item * BIO_s_mem

Return the memory BIO method function.

    my $rv = Net::SSLeay::BIO_s_mem();
    #
    # returns: value corresponding to openssl's BIO_METHOD structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BIO_s_mem.html>

=item * BIO_ssl_copy_session_id

Copies an SSL session id between BIO chains from and to. It does this by locating
the SSL BIOs in each chain and calling SSL_copy_session_id() on the internal SSL pointer.

    my $rv = Net::SSLeay::BIO_ssl_copy_session_id($to, $from);
    # $to - value corresponding to openssl's BIO structure
    # $from - value corresponding to openssl's BIO structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BIO_f_ssl.html>

=item * BIO_ssl_shutdown

Closes down an SSL connection on BIO chain bio. It does this by locating the
SSL BIO in the chain and calling SSL_shutdown() on its internal SSL pointer.

    Net::SSLeay::BIO_ssl_shutdown($ssl_bio);
    # $ssl_bio - value corresponding to openssl's BIO structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/BIO_f_ssl.html>

=back

=head3 Low level API: Server side Server Name Indication (SNI) support

=over

=item * set_tlsext_host_name

TBA

=item * get_servername

TBA

=item * get_servername_type

TBA

=item * CTX_set_tlsext_servername_callback

B<COMPATIBILITY:> requires at least OpenSSL 0.9.8f

This function is used in a server to support Server side Server Name Indication (SNI).

    Net::SSLeay::CTX_set_tlsext_servername_callback($ctx, $code);
    # $ctx - SSL context
    # $code - reference to a subroutine that will be called when a new connection is being initiated
    #
    # returns: no return value

On the client side:
use set_tlsext_host_name($ssl, $servername) before initiating the SSL connection.

On the server side:
Set up an additional SSL_CTX() for each different certificate.

Add a servername callback to each SSL_CTX() using CTX_set_tlsext_servername_callback().

The callback function is required to retrieve the client-supplied servername
with get_servername(ssl). Figure out the right
SSL_CTX to go with that host name, then switch the SSL object to that SSL_CTX
with set_SSL_CTX().

Example:

    # set callback
    Net::SSLeay::CTX_set_tlsext_servername_callback($ctx,
        sub {
            my $ssl = shift;
            my $h = Net::SSLeay::get_servername($ssl);
            Net::SSLeay::set_SSL_CTX($ssl, $hostnames{$h}->{ctx}) if exists $hostnames{$h};
        } );

More complete example:

    # ... initialize Net::SSLeay

    my %hostnames = (
        'sni1' => { cert=>'sni1.pem', key=>'sni1.key' },
        'sni2' => { cert=>'sni2.pem', key=>'sni2.key' },
    );

    # create a new context for each certificate/key pair
    for my $name (keys %hostnames) {
        $hostnames{$name}->{ctx} = Net::SSLeay::CTX_new or die;
        Net::SSLeay::CTX_set_cipher_list($hostnames{$name}->{ctx}, 'ALL');
        Net::SSLeay::set_cert_and_key($hostnames{$name}->{ctx},
        $hostnames{$name}->{cert}, $hostnames{$name}->{key}) or die;
    }

    # create default context
    my $ctx = Net::SSLeay::CTX_new or die;
    Net::SSLeay::CTX_set_cipher_list($ctx, 'ALL');
    Net::SSLeay::set_cert_and_key($ctx, 'cert.pem','key.pem') or die;

    # set callback
    Net::SSLeay::CTX_set_tlsext_servername_callback($ctx, sub {
        my $ssl = shift;
        my $h = Net::SSLeay::get_servername($ssl);
        Net::SSLeay::set_SSL_CTX($ssl, $hostnames{$h}->{ctx}) if exists $hostnames{$h};
    } );

    # ... later

    $s = Net::SSLeay::new($ctx);
    Net::SSLeay::set_fd($s, fileno($accepted_socket));
    Net::SSLeay::accept($s);

=back

=head3 Low level API: NPN (next protocol negotiation) related functions

NPN is being replaced with ALPN, a more recent TLS extension for application
protocol negotiation that's in process of being adopted by IETF. Please look
below for APLN API description.

Simple approach for using NPN support looks like this:

    ### client side
    use Net::SSLeay;
    use IO::Socket::INET;

    Net::SSLeay::initialize();
    my $sock = IO::Socket::INET->new(PeerAddr=>'encrypted.google.com:443') or die;
    my $ctx = Net::SSLeay::CTX_tlsv1_new() or die;
    Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL);
    Net::SSLeay::CTX_set_next_proto_select_cb($ctx, ['http1.1','spdy/2']);
    my $ssl = Net::SSLeay::new($ctx) or die;
    Net::SSLeay::set_fd($ssl, fileno($sock)) or die;
    Net::SSLeay::connect($ssl);

    warn "client:negotiated=",Net::SSLeay::P_next_proto_negotiated($ssl), "\n";
    warn "client:last_status=", Net::SSLeay::P_next_proto_last_status($ssl), "\n";

    ### server side
    use Net::SSLeay;
    use IO::Socket::INET;

    Net::SSLeay::initialize();
    my $ctx = Net::SSLeay::CTX_tlsv1_new() or die;
    Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL);
    Net::SSLeay::set_cert_and_key($ctx, "cert.pem", "key.pem");
    Net::SSLeay::CTX_set_next_protos_advertised_cb($ctx, ['spdy/2','http1.1']);
    my $sock = IO::Socket::INET->new(LocalAddr=>'localhost', LocalPort=>5443, Proto=>'tcp', Listen=>20) or die;

    while (1) {
        my $ssl = Net::SSLeay::new($ctx);
        warn("server:waiting for incoming connection...\n");
        my $fd = $sock->accept();
        Net::SSLeay::set_fd($ssl, $fd->fileno);
        Net::SSLeay::accept($ssl);
        warn "server:negotiated=",Net::SSLeay::P_next_proto_negotiated($ssl),"\n";
        my $got = Net::SSLeay::read($ssl);
        Net::SSLeay::ssl_write_all($ssl, "length=".length($got));
        Net::SSLeay::free($ssl);
        $fd->close();
    }
    # check with: openssl s_client -connect localhost:5443 -nextprotoneg http/1.1,spdy/2

Please note that the selection (negotiation) is performed by client side, the server side simply advertise the list of supported protocols.

Advanced approach allows you to implement your own negotiation algorithm.

    # see below documentation for:
    Net::SSLeay::CTX_set_next_proto_select_cb($ctx, $perl_callback_function, $callback_data);
    Net::SSLeay::CTX_set_next_protos_advertised_cb($ctx, $perl_callback_function, $callback_data);

Detection of NPN support (works even in older Net::SSLeay versions):

    use Net::SSLeay;

    if (exists &Net::SSLeay::P_next_proto_negotiated) {
        # do NPN stuff
    }

=over

=item * CTX_set_next_proto_select_cb

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least OpenSSL 1.0.1

B<NOTE:> You need CTX_set_next_proto_select_cb on B<client side> of SSL connection.

Simple usage - in this case a "common" negotiation algorithm (as implemented by openssl's function SSL_select_next_proto) is used.

    $rv = Net::SSLeay::CTX_set_next_proto_select_cb($ctx, $arrayref);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $arrayref - list of accepted protocols - e.g. ['http1.0', 'http1.1']
    #
    # returns: 0 on success, 1 on failure

Advanced usage (you probably do not need this):

    $rv = Net::SSLeay::CTX_set_next_proto_select_cb($ctx, $perl_callback_function, $callback_data);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $perl_callback_function - reference to perl function
    # $callback_data - [optional] data to passed to callback function when invoked
    #
    # returns: 0 on success, 1 on failure

    # where callback function looks like
    sub npn_advertised_cb_invoke {
        my ($ssl, $arrayref_proto_list_advertised_by_server, $callback_data) = @_;
        my $status;
        # ...
        $status = 1;   # status can be:
                      # 0 - OPENSSL_NPN_UNSUPPORTED
                      # 1 - OPENSSL_NPN_NEGOTIATED
                      # 2 - OPENSSL_NPN_NO_OVERLAP
        return $status, ['http1.1','spdy/2']; # the callback has to return 2 values
    }

To undefine/clear this callback use:

    Net::SSLeay::CTX_set_next_proto_select_cb($ctx, undef);

=item * CTX_set_next_protos_advertised_cb

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least OpenSSL 1.0.1

B<NOTE:> You need CTX_set_next_proto_select_cb on B<server side> of SSL connection.

Simple usage:

    $rv = Net::SSLeay::CTX_set_next_protos_advertised_cb($ctx, $arrayref);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $arrayref - list of advertised protocols - e.g. ['http1.0', 'http1.1']
    #
    # returns: 0 on success, 1 on failure

Advanced usage (you probably do not need this):

    $rv = Net::SSLeay::CTX_set_next_protos_advertised_cb($ctx, $perl_callback_function, $callback_data);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $perl_callback_function - reference to perl function
    # $callback_data - [optional] data to passed to callback function when invoked
    #
    # returns: 0 on success, 1 on failure

    # where callback function looks like
    sub npn_advertised_cb_invoke {
        my ($ssl, $callback_data) = @_;
        # ...
        return ['http1.1','spdy/2']; # the callback has to return arrayref
    }

To undefine/clear this callback use:

    Net::SSLeay::CTX_set_next_protos_advertised_cb($ctx, undef);

=item * P_next_proto_negotiated

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least OpenSSL 1.0.1

Returns the name of negotiated protocol for given SSL connection $ssl.

    $rv = Net::SSLeay::P_next_proto_negotiated($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: (string) negotiated protocol name (or undef if no negotiation was done or failed with fatal error)

=item * P_next_proto_last_status

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least OpenSSL 1.0.1

Returns the result of the last negotiation for given SSL connection $ssl.

    $rv = Net::SSLeay::P_next_proto_last_status($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: (integer) negotiation status
    #          0 - OPENSSL_NPN_UNSUPPORTED
    #          1 - OPENSSL_NPN_NEGOTIATED
    #          2 - OPENSSL_NPN_NO_OVERLAP

=back

=head3 Low level API: ALPN (application layer protocol negotiation) related functions

Application protocol can be negotiated via two different mechanisms employing
two different TLS extensions: NPN (obsolete) and ALPN (recommended).

The API is rather similar, with slight differences reflecting protocol
specifics. In particular, with ALPN the protocol negotiation takes place on
server, while with NPN the client implements the protocol negotiation logic.

With ALPN, the most basic implementation looks like this:

    ### client side
    use Net::SSLeay;
    use IO::Socket::INET;

    Net::SSLeay::initialize();
    my $sock = IO::Socket::INET->new(PeerAddr=>'encrypted.google.com:443') or die;
    my $ctx = Net::SSLeay::CTX_tlsv1_new() or die;
    Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL);
    Net::SSLeay::CTX_set_alpn_protos($ctx, ['http/1.1', 'http/2.0', 'spdy/3']);
    my $ssl = Net::SSLeay::new($ctx) or die;
    Net::SSLeay::set_fd($ssl, fileno($sock)) or die;
    Net::SSLeay::connect($ssl);

    warn "client:selected=",Net::SSLeay::P_alpn_selected($ssl), "\n";

    ### server side
    use Net::SSLeay;
    use IO::Socket::INET;

    Net::SSLeay::initialize();
    my $ctx = Net::SSLeay::CTX_tlsv1_new() or die;
    Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL);
    Net::SSLeay::set_cert_and_key($ctx, "cert.pem", "key.pem");
    Net::SSLeay::CTX_set_alpn_select_cb($ctx, ['http/1.1', 'http/2.0', 'spdy/3']);
    my $sock = IO::Socket::INET->new(LocalAddr=>'localhost', LocalPort=>5443, Proto=>'tcp', Listen=>20) or die;

    while (1) {
        my $ssl = Net::SSLeay::new($ctx);
        warn("server:waiting for incoming connection...\n");
        my $fd = $sock->accept();
        Net::SSLeay::set_fd($ssl, $fd->fileno);
        Net::SSLeay::accept($ssl);
        warn "server:selected=",Net::SSLeay::P_alpn_selected($ssl),"\n";
        my $got = Net::SSLeay::read($ssl);
        Net::SSLeay::ssl_write_all($ssl, "length=".length($got));
        Net::SSLeay::free($ssl);
        $fd->close();
    }
    # check with: openssl s_client -connect localhost:5443 -alpn spdy/3,http/1.1

Advanced approach allows you to implement your own negotiation algorithm.

    # see below documentation for:
    Net::SSLeay::CTX_set_alpn_select_cb($ctx, $perl_callback_function, $callback_data);

Detection of ALPN support (works even in older Net::SSLeay versions):

    use Net::SSLeay;

    if (exists &Net::SSLeay::P_alpn_selected) {
        # do ALPN stuff
    }

=over

=item * CTX_set_alpn_select_cb

B<COMPATIBILITY:> not available in Net-SSLeay-1.55 and before; requires at least OpenSSL 1.0.2

B<NOTE:> You need CTX_set_alpn_select_cb on B<server side> of TLS connection.

Simple usage - in this case a "common" negotiation algorithm (as implemented by openssl's function SSL_select_next_proto) is used.

    $rv = Net::SSLeay::CTX_set_alpn_select_cb($ctx, $arrayref);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $arrayref - list of accepted protocols - e.g. ['http/2.0', 'http/1.1', 'spdy/3']
    #
    # returns: 0 on success, 1 on failure

Advanced usage (you probably do not need this):

    $rv = Net::SSLeay::CTX_set_alpn_select_cb($ctx, $perl_callback_function, $callback_data);
    # $ctx - value corresponding to openssl's SSL_CTX structure
    # $perl_callback_function - reference to perl function
    # $callback_data - [optional] data to passed to callback function when invoked
    #
    # returns: 0 on success, 1 on failure

    # where callback function looks like
    sub alpn_select_cb_invoke {
        my ($ssl, $arrayref_proto_list_advertised_by_client, $callback_data) = @_;
        # ...
        if ($negotiated) {
            return 'http/2.0';
        } else {
            return undef;
        }
    }

To undefine/clear this callback use:

    Net::SSLeay::CTX_set_alpn_select_cb($ctx, undef);

=item * set_alpn_protos

B<COMPATIBILITY:> not available in Net-SSLeay-1.55 and before; requires at least OpenSSL 1.0.2

B<NOTE:> You need set_alpn_protos on B<client side> of TLS connection.

This adds list of supported application layer protocols to ClientHello message sent by a client.
It advertises the enumeration of supported protocols:

    Net::SSLeay::set_alpn_protos($ssl, ['http/1.1', 'http/2.0', 'spdy/3']);
    # returns 0 on success

=item * CTX_set_alpn_protos

B<COMPATIBILITY:> not available in Net-SSLeay-1.55 and before; requires at least OpenSSL 1.0.2

B<NOTE:> You need CTX_set_alpn_protos on B<client side> of TLS connection.

This adds list of supported application layer protocols to ClientHello message sent by a client.
It advertises the enumeration of supported protocols:

    Net::SSLeay::CTX_set_alpn_protos($ctx, ['http/1.1', 'http/2.0', 'spdy/3']);
    # returns 0 on success

=item * P_alpn_selected

B<COMPATIBILITY:> not available in Net-SSLeay-1.55 and before; requires at least OpenSSL 1.0.2

Returns the name of negotiated protocol for given TLS connection $ssl.

    $rv = Net::SSLeay::P_alpn_selected($ssl);
    # $ssl - value corresponding to openssl's SSL structure
    #
    # returns: (string) negotiated protocol name (or undef if no negotiation was done or failed with fatal error)

=back

=head3 Low level API: DANE Support

OpenSSL version 1.0.2 adds preliminary support RFC6698 Domain Authentication of
Named Entities (DANE) Transport Layer Association within OpenSSL

=over

=item * SSL_get_tlsa_record_byname

B<COMPATIBILITY:> DELETED from net-ssleay, since it is not supported by OpenSSL

In order to facilitate DANE there is additional interface,
SSL_get_tlsa_record_byname, accepting hostname, port and socket type
that returns packed TLSA record. In order to make it even easier there
is additional SSL_ctrl function that calls SSL_get_tlsa_record_byname
for you. Latter is recommended for programmers that wish to maintain
broader binary compatibility, e.g. make application work with both 1.0.2
and prior version (in which case call to SSL_ctrl with new code
returning error would have to be ignored when running with prior version).

    Net::SSLeay::get_tlsa_record_byname($name, $port, $type);

=back

=head3 Low level API: Other functions

=over

=item * COMP_add_compression_method

Adds the compression method cm with the identifier id to the list of available compression methods.
This list is globally maintained for all SSL operations within this application.
It cannot be set for specific SSL_CTX or SSL objects.

    my $rv = Net::SSLeay::COMP_add_compression_method($id, $cm);
    # $id - (integer) compression method id
    #       0 to 63:    methods defined by the IETF
    #       64 to 192:  external party methods assigned by IANA
    #       193 to 255: reserved for private use
    #
    # $cm - value corresponding to openssl's COMP_METHOD structure
    #
    # returns: 0 on success, 1 on failure (check the error queue to find out the reason)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_COMP_add_compression_method.html>

=item * DH_free

Frees the DH structure and its components. The values are erased before the memory is returned to the system.

    Net::SSLeay::DH_free($dh);
    # $dh - value corresponding to openssl's DH structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/DH_new.html>

=item * FIPS_mode_set

Enable or disable FIPS mode in a FIPS capable OpenSSL.

    Net::SSLeay::FIPS_mode_set($enable);
    # $enable - (integer) 1 to enable, 0 to disable

=back

=head3 Low level API: EC related functions

=over

=item * CTX_set_tmp_ecdh

TBA

=item * EC_KEY_free

TBA

=item * EC_KEY_new_by_curve_name

TBA

=item * EC_KEY_generate_key

Generates a EC key and returns it in a newly allocated EC_KEY structure.
The EC key then can be used to create a PKEY which can be used in calls
like X509_set_pubkey.

    my $key = Net::SSLeay::EVP_PKEY_new();
    my $ec  = Net::SSLeay::EC_KEY_generate_key($curve);
    Net::SSLeay::EVP_PKEY_assign_EC_KEY($key,$ec);

    # $curve - curve name like 'secp521r1' or the matching Id (integer) of the curve
    #
    # returns: value corresponding to openssl's EC_KEY structure (0 on failure)

This function has no equivalent in OpenSSL but combines multiple OpenSSL
functions for an easier interface.

=item * CTX_set_ecdh_auto, set_ecdh_auto

These functions enable or disable the automatic curve selection on the server
side by calling SSL_CTX_set_ecdh_auto or SSL_set_ecdh_auto respectively.
If enabled the highest preference curve is automatically used for ECDH temporary
keys used during key exchange.
This function is no longer available for OpenSSL 1.1.0 or higher.

    Net::SSLeay::CTX_set_ecdh_auto($ctx,1);
    Net::SSLeay::set_ecdh_auto($ssl,1);

=item * CTX_set1_curves_list, set1_curves_list

These functions set the supported curves (in order of preference) by calling
SSL_CTX_set1_curves_list or SSL_set1_curves_list respectively.
For a TLS client these curves are offered to the server in the supported curves
extension while on the server side these are used to determine the shared
curve.
These functions are only available since OpenSSL 1.1.0.

    Net::SSLeay::CTX_set1_curves_list($ctx,"P-521:P-384:P-256");
    Net::SSLeay::set1_curves_list($ssl,"P-521:P-384:P-256");

=item * CTX_set1_groups_list, set1_groups_list

These functions set the supported groups (in order of preference) by calling
SSL_CTX_set1_groups_list or SSL_set1_groups_list respectively.
This is practically the same as CTX_set1_curves_list and set1_curves_list except
that all DH groups can be given as supported by TLS 1.3.
These functions are only available since OpenSSL 1.1.1.

    Net::SSLeay::CTX_set1_groups_list($ctx,"P-521:P-384:P-256");
    Net::SSLeay::set1_groups_list($ssl,"P-521:P-384:P-256");

=back

=head3 Low level API: OSSL_LIB_CTX and OSSL_PROVIDER related functions

=over

=item * OSSL_LIB_CTX_get0_global_default

Returns a concrete (non NULL) reference to the global default library context.

    my $libctx = Net::SSLeay::OSSL_LIB_CTX_get0_global_default();
    # returns: a value corresponding to OSSL_LIB_CTX structure or false on failure

Typically it's simpler to use undef with functions that take an
OSSL_LIB_CTX argument when global default library context is needed.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OSSL_LIB_CTX_get0_global_default.html>

=item * OSSL_PROVIDER_load

Loads and initializes a provider

    my $provider = Net::SSLeay::OSSL_PROVIDER_load($libctx, $name);
    # $libctx - value corresponding to OSSL_LIB_CTX structure or undef
    # $name - (string) provider name, e.g., 'legacy'
    #
    # returns: a value corresponding to OSSL_PROVIDER or false on failure

Using undef loads the provider within the global default library context.

    my $provider = Net::SSLeay::OSSL_PROVIDER_load(undef, 'legacy');

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OSSL_PROVIDER_load.html>

=item * OSSL_PROVIDER_try_load

Loads and initializes a provider similar to OSSL_PROVIDER_load with additional fallback control.

    my $provider = Net::SSLeay::OSSL_PROVIDER_try_load($libctx, $name, $retain_fallbacks);
    # $libctx - value corresponding to OSSL_LIB_CTX structure or undef
    # $name - (string) provider name, e.g., 'legacy'
    # $retain_fallbacks - (integer) 0 or 1
    #
    # returns: a value corresponding to OSSL_PROVIDER or false on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OSSL_PROVIDER_try_load.html>

=item * OSSL_PROVIDER_unload

Unloads the given provider.

    my $rv = Net::SSLeay::OSSL_PROVIDER_unload($provider);
    # $provider - a value corresponding to OSSL_PROVIDER
    #
    # returns: (integer) 1 on success, 0 on error

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OSSL_PROVIDER_unload.html>

=item * OSSL_PROVIDER_available

Checks if a named provider is available for use.

    my $rv = Net::SSLeay::OSSL_PROVIDER_available($libctx, $name);
    # $libctx - value corresponding to OSSL_LIB_CTX structure or undef
    # $name - (string) provider name, e.g., 'legacy'
    #
    # returns: (integer) 1 if the named provider is available, otherwise 0.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OSSL_PROVIDER_available.html>

=item * OSSL_PROVIDER_do_all

Iterates over all loaded providers. A callback is called for each provider.

    my $rv = Net::SSLeay::OSSL_PROVIDER_do_all($libctx, $cb, $cbdata);
    # $libctx - value corresponding to OSSL_LIB_CTX structure or undef
    # $cb - reference to a perl callback function
    # $cbdata - data that will be passed to callback function
    #
    # returns: (integer) 1 if all callbacks returned 1, 0 the first time a callback returns 0.

Example:

    sub do_all_cb {
        my ($provider, $cbdata) = @_;

        my $name = Net::SSLeay::OSSL_PROVIDER_get0_name($provider);
        print "Callback for provider: '$name', cbdata: '$cbdata'\n";
        return 1;
    }
    my $data_for_cb = 'Hello';

    # Triggers default provider automatic loading.
    Net::SSLeay::OSSL_PROVIDER_available(undef, 'default') || die 'default provider not available';
    Net::SSLeay::OSSL_PROVIDER_load(undef, 'legacy') || die 'load legacy';
    Net::SSLeay::OSSL_PROVIDER_load(undef, 'null')   || die 'load null';
    Net::SSLeay::OSSL_PROVIDER_do_all(undef, \&do_all_cb, $data_for_cb) || die 'a callback failed';

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OSSL_PROVIDER_do_all.html>

=item * OSSL_PROVIDER_get0_name

Returns the name of the given provider.

    my $name = Net::SSLeay::OSSL_PROVIDER_get0_name($provider);
    # $provider - a value corresponding to OSSL_PROVIDER
    #
    # returns: (string) provider name, e.g., 'legacy'

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OSSL_PROVIDER_get0_name.html>

=item * OSSL_PROVIDER_self_test

Runs the provider's self tests.

    my $rv = Net::SSLeay::OSSL_PROVIDER_self_test($provider);
    # $libctx - value corresponding to OSSL_LIB_CTX structure or undef
