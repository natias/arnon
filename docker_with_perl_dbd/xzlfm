
=over 4

=item C<BOOL_INTERNALS_sv_isbool_false>
X<BOOL_INTERNALS_sv_isbool_false>

Checks if a C<SvBoolFlagsOK()> sv is a false bool. B<Note> that it is
the caller's responsibility to ensure that the sv is C<SvBoolFlagsOK()>
before calling this. This is only useful in specialized logic like
serialization code where performance is critical and the flags have
already been checked to be correct. This is B<NOT> what you should use
to check if an SV is "false", for that you should be using
C<!SvTRUE(sv)> instead.

=over 3

 bool  BOOL_INTERNALS_sv_isbool_false(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<BOOL_INTERNALS_sv_isbool_true>
X<BOOL_INTERNALS_sv_isbool_true>

Checks if a C<SvBoolFlagsOK()> sv is a true bool. B<Note> that it is
the caller's responsibility to ensure that the sv is C<SvBoolFlagsOK()>
before calling this. This is only useful in specialized logic like
serialization code where performance is critical and the flags have
already been checked to be correct. This is B<NOT> what you should use
to check if an SV is "true", for that you should be using
C<SvTRUE(sv)> instead.

=over 3

 bool  BOOL_INTERNALS_sv_isbool_true(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<boolSV>
X<boolSV>

Returns a true SV if C<b> is a true value, or a false SV if C<b> is 0.

See also C<L</PL_sv_yes>> and C<L</PL_sv_no>>.

=over 3

 SV *  boolSV(bool b)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<croak_xs_usage>
X<croak_xs_usage>

A specialised variant of C<croak()> for emitting the usage message for xsubs

    croak_xs_usage(cv, "eee_yow");

works out the package name and subroutine name from C<cv>, and then calls
C<croak()>.  Hence if C<cv> is C<&ouch::awk>, it would call C<croak> as:

 diag_listed_as: SKIPME
 Perl_croak(aTHX_ "Usage: %" SVf "::%" SVf "(%s)", "ouch" "awk",
                                                     "eee_yow");

=over 3

 void  croak_xs_usage(const CV * const cv,
                      const char * const params)

=back

=back

=for hackers
Found in file universal.c

=over 4

=item C<DEFSV>
X<DEFSV>

Returns the SV associated with C<$_>

=over 3

 SV *  DEFSV

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<DEFSV_set>
X<DEFSV_set>

Associate C<sv> with C<$_>

=over 3

 void  DEFSV_set(SV * sv)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<get_sv>
X<get_sv>

Returns the SV of the specified Perl scalar.  C<flags> are passed to
L</C<gv_fetchpv>>.  If C<GV_ADD> is set and the
Perl variable does not exist then it will be created.  If C<flags> is zero
and the variable does not exist then NULL is returned.

NOTE: the C<perl_get_sv()> form is B<deprecated>.

=over 3

 SV *  get_sv(const char *name, I32 flags)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<isGV_with_GP>
X<isGV_with_GP>

Returns a boolean as to whether or not C<sv> is a GV with a pointer to a GP
(glob pointer).

=over 3

 bool  isGV_with_GP(SV * sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<looks_like_number>
X<looks_like_number>

Test if the content of an SV looks like a number (or is a number).
C<Inf> and C<Infinity> are treated as numbers (so will not issue a
non-numeric warning), even if your C<atof()> doesn't grok them.  Get-magic is
ignored.

=over 3

 I32  looks_like_number(SV * const sv)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<MUTABLE_AV>

=item C<MUTABLE_CV>

=item C<MUTABLE_GV>

=item C<MUTABLE_HV>

=item C<MUTABLE_IO>

=item C<MUTABLE_PTR>

=item C<MUTABLE_SV>
X<MUTABLE_AV>X<MUTABLE_CV>X<MUTABLE_GV>X<MUTABLE_HV>X<MUTABLE_IO>X<MUTABLE_PTR>X<MUTABLE_SV>

The C<MUTABLE_I<*>>() macros cast pointers to the types shown, in such a way
(compiler permitting) that casting away const-ness will give a warning;
e.g.:

 const SV *sv = ...;
 AV *av1 = (AV*)sv;        <== BAD:  the const has been silently
                                     cast away
 AV *av2 = MUTABLE_AV(sv); <== GOOD: it may warn

C<MUTABLE_PTR> is the base macro used to derive new casts.  The other
already-built-in ones return pointers to what their names indicate.

=over 3

 AV *    MUTABLE_AV (AV * p)
 CV *    MUTABLE_CV (CV * p)
 GV *    MUTABLE_GV (GV * p)
 HV *    MUTABLE_HV (HV * p)
 IO *    MUTABLE_IO (IO * p)
 void *  MUTABLE_PTR(void * p)
 SV *    MUTABLE_SV (SV * p)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<newRV>

=item C<newRV_inc>
X<newRV>X<newRV_inc>

These are identical.  They create an RV wrapper for an SV.  The reference count
for the original SV is incremented.

=over 3

 SV *  newRV(SV * const sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<newRV_noinc>
X<newRV_noinc>

Creates an RV wrapper for an SV.  The reference count for the original
SV is B<not> incremented.

=over 3

 SV *  newRV_noinc(SV * const tmpRef)

=back

=back

=for hackers
Found in file sv_inline.h

=over 4

=item C<newSV>
X<newSV>

Creates a new SV.  A non-zero C<len> parameter indicates the number of
bytes of preallocated string space the SV should have.  An extra byte for a
trailing C<NUL> is also reserved.  (C<SvPOK> is not set for the SV even if string
space is allocated.)  The reference count for the new SV is set to 1.

In 5.9.3, C<newSV()> replaces the older C<NEWSV()> API, and drops the first
parameter, I<x>, a debug aid which allowed callers to identify themselves.
This aid has been superseded by a new build option, C<PERL_MEM_LOG> (see
L<perlhacktips/PERL_MEM_LOG>).  The older API is still there for use in XS
modules supporting older perls.

=over 3

 SV *  newSV(const STRLEN len)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSVbool>
X<newSVbool>

Creates a new SV boolean.

=over 3

 SV *  newSVbool(const bool bool_val)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSV_false>
X<newSV_false>

Creates a new SV that is a boolean false.

=over 3

 SV *  newSV_false()

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSVhek>
X<newSVhek>

Creates a new SV from the hash key structure.  It will generate scalars that
point to the shared string table where possible.  Returns a new (undefined)
SV if C<hek> is NULL.

=over 3

 SV *  newSVhek(const HEK * const hek)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSVhek_mortal>
X<newSVhek_mortal>

Creates a new mortal SV from the hash key structure.  It will generate
scalars that point to the shared string table where possible.  Returns
a new (undefined) SV if C<hek> is NULL.

This is more efficient than using sv_2mortal(newSVhek( ... ))

=over 3

 SV *  newSVhek_mortal(const HEK * const hek)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSViv>
X<newSViv>

Creates a new SV and copies an integer into it.  The reference count for the
SV is set to 1.

=over 3

 SV *  newSViv(const IV i)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSVnv>
X<newSVnv>

Creates a new SV and copies a floating point value into it.
The reference count for the SV is set to 1.

=over 3

 SV *  newSVnv(const NV n)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSVpadname>
X<newSVpadname>

NOTE: C<newSVpadname> is B<experimental> and may change or be
removed without notice.

Creates a new SV containing the pad name.

=over 3

 SV*  newSVpadname(PADNAME *pn)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<newSVpv>
X<newSVpv>

Creates a new SV and copies a string (which may contain C<NUL> (C<\0>)
characters) into it.  The reference count for the
SV is set to 1.  If C<len> is zero, Perl will compute the length using
C<strlen()>, (which means if you use this option, that C<s> can't have embedded
C<NUL> characters and has to have a terminating C<NUL> byte).

This function can cause reliability issues if you are likely to pass in
empty strings that are not null terminated, because it will run
strlen on the string and potentially run past valid memory.

Using L</newSVpvn> is a safer alternative for non C<NUL> terminated strings.
For string literals use L</newSVpvs> instead.  This function will work fine for
C<NUL> terminated strings, but if you want to avoid the if statement on whether
to call C<strlen> use C<newSVpvn> instead (calling C<strlen> yourself).

=over 3

 SV *  newSVpv(const char * const s, const STRLEN len)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSVpvf>
X<newSVpvf>

Creates a new SV and initializes it with the string formatted like
C<sv_catpvf>.

NOTE: C<newSVpvf> must be explicitly called as
C<Perl_newSVpvf>
with an C<aTHX_> parameter.

=over 3

 SV *  Perl_newSVpvf(pTHX_ const char * const pat, ...)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSVpvf_nocontext>
X<newSVpvf_nocontext>

Like C<L</newSVpvf>> but does not take a thread context (C<aTHX>) parameter,
so is used in situations where the caller doesn't already have the thread
context.

=over 3

 SV *  newSVpvf_nocontext(const char * const pat, ...)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSVpvn>
X<newSVpvn>

Creates a new SV and copies a string into it, which may contain C<NUL> characters
(C<\0>) and other binary data.  The reference count for the SV is set to 1.
Note that if C<len> is zero, Perl will create a zero length (Perl) string.  You
are responsible for ensuring that the source buffer is at least
C<len> bytes long.  If the C<buffer> argument is NULL the new SV will be
undefined.

=over 3

 SV *  newSVpvn(const char * const buffer, const STRLEN len)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSVpvn_flags>
X<newSVpvn_flags>

Creates a new SV and copies a string (which may contain C<NUL> (C<\0>)
characters) into it.  The reference count for the
SV is set to 1.  Note that if C<len> is zero, Perl will create a zero length
string.  You are responsible for ensuring that the source string is at least
C<len> bytes long.  If the C<s> argument is NULL the new SV will be undefined.
Currently the only flag bits accepted are C<SVf_UTF8> and C<SVs_TEMP>.
If C<SVs_TEMP> is set, then C<sv_2mortal()> is called on the result before
returning.  If C<SVf_UTF8> is set, C<s>
is considered to be in UTF-8 and the
C<SVf_UTF8> flag will be set on the new SV.
C<newSVpvn_utf8()> is a convenience wrapper for this function, defined as

    #define newSVpvn_utf8(s, len, u)			\
        newSVpvn_flags((s), (len), (u) ? SVf_UTF8 : 0)

=over 3

 SV *  newSVpvn_flags(const char * const s, const STRLEN len,
                      const U32 flags)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSVpvn_share>
X<newSVpvn_share>

Creates a new SV with its C<SvPVX_const> pointing to a shared string in the string
table.  If the string does not already exist in the table, it is
created first.  Turns on the C<SvIsCOW> flag (or C<READONLY>
and C<FAKE> in 5.16 and earlier).  If the C<hash> parameter
is non-zero, that value is used; otherwise the hash is computed.
The string's hash can later be retrieved from the SV
with the C<L</SvSHARED_HASH>> macro.  The idea here is
that as the string table is used for shared hash keys these strings will have
C<SvPVX_const == HeKEY> and hash lookup will avoid string compare.

=over 3

 SV *  newSVpvn_share(const char *s, I32 len, U32 hash)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSVpvn_utf8>
X<newSVpvn_utf8>

Creates a new SV and copies a string (which may contain C<NUL> (C<\0>)
characters) into it.  If C<utf8> is true, calls
C<SvUTF8_on> on the new SV.  Implemented as a wrapper around C<newSVpvn_flags>.

=over 3

 SV*  newSVpvn_utf8(const char* s, STRLEN len, U32 utf8)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<newSVpvs>
X<newSVpvs>

Like C<newSVpvn>, but takes a literal string instead of a
string/length pair.

=over 3

 SV*  newSVpvs("literal string")

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<newSVpvs_flags>
X<newSVpvs_flags>

Like C<newSVpvn_flags>, but takes a literal string instead of
a string/length pair.

=over 3

 SV*  newSVpvs_flags("literal string", U32 flags)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<newSVpv_share>
X<newSVpv_share>

Like C<newSVpvn_share>, but takes a C<NUL>-terminated string instead of a
string/length pair.

=over 3

 SV *  newSVpv_share(const char *s, U32 hash)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSVpvs_share>
X<newSVpvs_share>

Like C<newSVpvn_share>, but takes a literal string instead of
a string/length pair and omits the hash parameter.

=over 3

 SV*  newSVpvs_share("literal string")

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<newSVrv>
X<newSVrv>

Creates a new SV for the existing RV, C<rv>, to point to.  If C<rv> is not an
RV then it will be upgraded to one.  If C<classname> is non-null then the new
SV will be blessed in the specified package.  The new SV is returned and its
reference count is 1.  The reference count 1 is owned by C<rv>. See also
newRV_inc() and newRV_noinc() for creating a new RV properly.

=over 3

 SV *  newSVrv(SV * const rv, const char * const classname)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSVsv>

=item C<newSVsv_flags>

=item C<newSVsv_nomg>
X<newSVsv>X<newSVsv_flags>X<newSVsv_nomg>

These create a new SV which is an exact duplicate of the original SV
(using C<sv_setsv>.)

They differ only in that C<newSVsv> performs 'get' magic; C<newSVsv_nomg> skips
any magic; and C<newSVsv_flags> allows you to explicitly set a C<flags>
parameter.

=over 3

 SV *  newSVsv      (SV * const old)
 SV *  newSVsv_flags(SV * const old, I32 flags)
 SV *  newSVsv_nomg (SV * const old)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSV_true>
X<newSV_true>

Creates a new SV that is a boolean true.

=over 3

 SV *  newSV_true()

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<newSV_type>
X<newSV_type>

Creates a new SV, of the type specified.  The reference count for the new SV
is set to 1.

=over 3

 SV *  newSV_type(const svtype type)

=back

=back

=for hackers
Found in file sv_inline.h

=over 4

=item C<newSV_type_mortal>
X<newSV_type_mortal>

Creates a new mortal SV, of the type specified.  The reference count for the
new SV is set to 1.

This is equivalent to
    SV* sv = sv_2mortal(newSV_type(<some type>))
and
    SV* sv = sv_newmortal();
    sv_upgrade(sv, <some_type>)
but should be more efficient than both of them. (Unless sv_2mortal is inlined
at some point in the future.)

=over 3

 SV *  newSV_type_mortal(const svtype type)

=back

=back

=for hackers
Found in file sv_inline.h

=over 4

=item C<newSVuv>
X<newSVuv>

Creates a new SV and copies an unsigned integer into it.
The reference count for the SV is set to 1.

=over 3

 SV *  newSVuv(const UV u)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<Nullsv>
X<Nullsv>

Null SV pointer.  (No longer available when C<PERL_CORE> is defined.)

=back

=for hackers
Found in file handy.h

=over 4

=item C<PL_sv_no>
X<PL_sv_no>

This is the C<false> SV.  It is readonly.  See C<L</PL_sv_yes>>.  Always refer
to this as C<&PL_sv_no>.

=over 3

 SV  PL_sv_no

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<PL_sv_undef>
X<PL_sv_undef>

This is the C<undef> SV.  It is readonly.  Always refer to this as
C<&PL_sv_undef>.

=over 3

 SV  PL_sv_undef

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<PL_sv_yes>
X<PL_sv_yes>

This is the C<true> SV.  It is readonly.  See C<L</PL_sv_no>>.  Always refer to
this as C<&PL_sv_yes>.

=over 3

 SV  PL_sv_yes

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<PL_sv_zero>
X<PL_sv_zero>

This readonly SV has a zero numeric value and a C<"0"> string value. It's
similar to C<L</PL_sv_no>> except for its string value. Can be used as a
cheap alternative to C<mXPUSHi(0)> for example.  Always refer to this as
C<&PL_sv_zero>. Introduced in 5.28.

=over 3

 SV  PL_sv_zero

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<SAVE_DEFSV>
X<SAVE_DEFSV>

Localize C<$_>.  See L<perlguts/Localizing changes>.

=over 3

 void  SAVE_DEFSV

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<sortsv>
X<sortsv>

In-place sort an array of SV pointers with the given comparison routine.

Currently this always uses mergesort.  See C<L</sortsv_flags>> for a more
flexible routine.

=over 3

 void  sortsv(SV **array, size_t num_elts, SVCOMPARE_t cmp)

=back

=back

=for hackers
Found in file pp_sort.c

=over 4

=item C<sortsv_flags>
X<sortsv_flags>

In-place sort an array of SV pointers with the given comparison routine,
with various SORTf_* flag options.

=over 3

 void  sortsv_flags(SV **array, size_t num_elts, SVCOMPARE_t cmp,
                    U32 flags)

=back

=back

=for hackers
Found in file pp_sort.c

=over 4

=item C<SV>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SvAMAGIC>
X<SvAMAGIC>

Returns a boolean as to whether C<sv> has overloading (active magic) enabled or
not.

=over 3
