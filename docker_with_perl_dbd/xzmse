 * call optimization.
 *
 * Each section names the header file that the functions "belong" to.
 */

/* ------------------------------- av.h ------------------------------- */

/*
=for apidoc_section $AV
=for apidoc av_count
Returns the number of elements in the array C<av>.  This is the true length of
the array, including any undefined elements.  It is always the same as
S<C<av_top_index(av) + 1>>.

=cut
*/
PERL_STATIC_INLINE Size_t
Perl_av_count(pTHX_ AV *av)
{
    PERL_ARGS_ASSERT_AV_COUNT;
    assert(SvTYPE(av) == SVt_PVAV);

    return AvFILL(av) + 1;
}

/* ------------------------------- av.c ------------------------------- */

/*
=for apidoc av_store_simple

This is a cut-down version of av_store that assumes that the array is
very straightforward - no magic, not readonly, and AvREAL - and that
C<key> is not negative. This function MUST NOT be used in situations
where any of those assumptions may not hold.

Stores an SV in an array.  The array index is specified as C<key>. It
can be dereferenced to get the C<SV*> that was stored there (= C<val>)).

Note that the caller is responsible for suitably incrementing the reference
count of C<val> before the call.

Approximate Perl equivalent: C<splice(@myarray, $key, 1, $val)>.

=cut
*/

PERL_STATIC_INLINE SV**
Perl_av_store_simple(pTHX_ AV *av, SSize_t key, SV *val)
{
    SV** ary;

    PERL_ARGS_ASSERT_AV_STORE_SIMPLE;
    assert(SvTYPE(av) == SVt_PVAV);
    assert(!SvMAGICAL(av));
    assert(!SvREADONLY(av));
    assert(AvREAL(av));
    assert(key > -1);

    ary = AvARRAY(av);

    if (AvFILLp(av) < key) {
        if (key > AvMAX(av)) {
            av_extend(av,key);
            ary = AvARRAY(av);
        }
        AvFILLp(av) = key;
    } else
        SvREFCNT_dec(ary[key]);

    ary[key] = val;
    return &ary[key];
}

/*
=for apidoc av_fetch_simple

This is a cut-down version of av_fetch that assumes that the array is
very straightforward - no magic, not readonly, and AvREAL - and that
C<key> is not negative. This function MUST NOT be used in situations
where any of those assumptions may not hold.

Returns the SV at the specified index in the array.  The C<key> is the
index.  If lval is true, you are guaranteed to get a real SV back (in case
it wasn't real before), which you can then modify.  Check that the return
value is non-null before dereferencing it to a C<SV*>.

The rough perl equivalent is C<$myarray[$key]>.

=cut
*/

PERL_STATIC_INLINE SV**
Perl_av_fetch_simple(pTHX_ AV *av, SSize_t key, I32 lval)
{
    PERL_ARGS_ASSERT_AV_FETCH_SIMPLE;
    assert(SvTYPE(av) == SVt_PVAV);
    assert(!SvMAGICAL(av));
    assert(!SvREADONLY(av));
    assert(AvREAL(av));
    assert(key > -1);

    if ( (key > AvFILLp(av)) || !AvARRAY(av)[key]) {
        return lval ? av_store_simple(av,key,newSV_type(SVt_NULL)) : NULL;
    } else {
        return &AvARRAY(av)[key];
    }
}

/*
=for apidoc av_push_simple

This is a cut-down version of av_push that assumes that the array is very
straightforward - no magic, not readonly, and AvREAL - and that C<key> is
not less than -1. This function MUST NOT be used in situations where any
of those assumptions may not hold.

Pushes an SV (transferring control of one reference count) onto the end of the
array.  The array will grow automatically to accommodate the addition.

Perl equivalent: C<push @myarray, $val;>.

=cut
*/

PERL_STATIC_INLINE void
Perl_av_push_simple(pTHX_ AV *av, SV *val)
{
    PERL_ARGS_ASSERT_AV_PUSH_SIMPLE;
    assert(SvTYPE(av) == SVt_PVAV);
    assert(!SvMAGICAL(av));
    assert(!SvREADONLY(av));
    assert(AvREAL(av));
    assert(AvFILLp(av) > -2);

    (void)av_store_simple(av,AvFILLp(av)+1,val);
}

/*
=for apidoc av_new_alloc

This implements L<perlapi/C<newAV_alloc_x>>
and L<perlapi/C<newAV_alloc_xz>>, which are the public API for this
functionality.

Creates a new AV and allocates its SV* array.

This is similar to, but more efficient than doing:

    AV *av = newAV();
    av_extend(av, key);

The size parameter is used to pre-allocate a SV* array large enough to
hold at least elements C<0..(size-1)>.  C<size> must be at least 1.

The C<zeroflag> parameter controls whether or not the array is NULL
initialized.

=cut
*/

PERL_STATIC_INLINE AV *
Perl_av_new_alloc(pTHX_ SSize_t size, bool zeroflag)
{
    AV * const av = newAV();
    SV** ary;
    PERL_ARGS_ASSERT_AV_NEW_ALLOC;
    assert(size > 0);

    Newx(ary, size, SV*); /* Newx performs the memwrap check */
    AvALLOC(av) = ary;
    AvARRAY(av) = ary;
    AvMAX(av) = size - 1;

    if (zeroflag)
        Zero(ary, size, SV*);

    return av;
}


/* remove (AvARRAY(av) - AvALLOC(av)) offset from empty array */

PERL_STATIC_INLINE void
Perl_av_remove_offset(pTHX_ AV *av)
{
    PERL_ARGS_ASSERT_AV_REMOVE_OFFSET;
    assert(AvFILLp(av) == -1);
    SSize_t i = AvARRAY(av) - AvALLOC(av);
    if (i) {
        AvARRAY(av) = AvALLOC(av);
        AvMAX(av)   += i;
#ifdef PERL_RC_STACK
        Zero(AvALLOC(av), i, SV*);
#endif
    }
}


/* ------------------------------- cv.h ------------------------------- */

/*
=for apidoc_section $CV
=for apidoc CvGV
Returns the GV associated with the CV C<sv>, reifying it if necessary.

=cut
*/
PERL_STATIC_INLINE GV *
Perl_CvGV(pTHX_ CV *sv)
{
    PERL_ARGS_ASSERT_CVGV;

    return CvNAMED(sv)
        ? Perl_cvgv_from_hek(aTHX_ sv)
        : ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_gv_u.xcv_gv;
}

/*
=for apidoc CvDEPTH
Returns the recursion level of the CV C<sv>.  Hence >= 2 indicates we are in a
recursive call.

=cut
*/
PERL_STATIC_INLINE I32 *
Perl_CvDEPTH(const CV * const sv)
{
    PERL_ARGS_ASSERT_CVDEPTH;
    assert(SvTYPE(sv) == SVt_PVCV || SvTYPE(sv) == SVt_PVFM);

    return &((XPVCV*)SvANY(sv))->xcv_depth;
}

/*
 CvPROTO returns the prototype as stored, which is not necessarily what
 the interpreter should be using. Specifically, the interpreter assumes
 that spaces have been stripped, which has been the case if the prototype
 was added by toke.c, but is generally not the case if it was added elsewhere.
 Since we can't enforce the spacelessness at assignment time, this routine
 provides a temporary copy at parse time with spaces removed.
 I<orig> is the start of the original buffer, I<len> is the length of the
 prototype and will be updated when this returns.
 */

#ifdef PERL_CORE
PERL_STATIC_INLINE char *
S_strip_spaces(pTHX_ const char * orig, STRLEN * const len)
{
    SV * tmpsv;
    char * tmps;
    tmpsv = newSVpvn_flags(orig, *len, SVs_TEMP);
    tmps = SvPVX(tmpsv);
    while ((*len)--) {
        if (!isSPACE(*orig))
            *tmps++ = *orig;
        orig++;
    }
    *tmps = '\0';
    *len = tmps - SvPVX(tmpsv);
                return SvPVX(tmpsv);
}
#endif

/* ------------------------------- iperlsys.h ------------------------------- */
#if ! defined(PERL_IMPLICIT_SYS) && defined(USE_ITHREADS)

/* Otherwise this function is implemented as macros in iperlsys.h */

PERL_STATIC_INLINE bool
S_PerlEnv_putenv(pTHX_ char * str)
{
    PERL_ARGS_ASSERT_PERLENV_PUTENV;

    ENV_LOCK;
    bool retval = putenv(str);
    ENV_UNLOCK;

    return retval;
}

#endif

/* ------------------------------- mg.h ------------------------------- */

#if defined(PERL_CORE) || defined(PERL_EXT)
/* assumes get-magic and stringification have already occurred */
PERL_STATIC_INLINE STRLEN
S_MgBYTEPOS(pTHX_ MAGIC *mg, SV *sv, const char *s, STRLEN len)
{
    assert(mg->mg_type == PERL_MAGIC_regex_global);
    assert(mg->mg_len != -1);
    if (mg->mg_flags & MGf_BYTES || !DO_UTF8(sv))
        return (STRLEN)mg->mg_len;
    else {
        const STRLEN pos = (STRLEN)mg->mg_len;
        /* Without this check, we may read past the end of the buffer: */
        if (pos > sv_or_pv_len_utf8(sv, s, len)) return len+1;
        return sv_or_pv_pos_u2b(sv, s, pos, NULL);
    }
}
#endif

/* ------------------------------- pad.h ------------------------------ */

#if defined(PERL_IN_PAD_C) || defined(PERL_IN_OP_C)
PERL_STATIC_INLINE bool
S_PadnameIN_SCOPE(const PADNAME * const pn, const U32 seq)
{
    PERL_ARGS_ASSERT_PADNAMEIN_SCOPE;

    /* is seq within the range _LOW to _HIGH ?
     * This is complicated by the fact that PL_cop_seqmax
     * may have wrapped around at some point */
    if (COP_SEQ_RANGE_LOW(pn) == PERL_PADSEQ_INTRO)
        return FALSE; /* not yet introduced */

    if (COP_SEQ_RANGE_HIGH(pn) == PERL_PADSEQ_INTRO) {
    /* in compiling scope */
        if (
            (seq >  COP_SEQ_RANGE_LOW(pn))
            ? (seq - COP_SEQ_RANGE_LOW(pn) < (U32_MAX >> 1))
            : (COP_SEQ_RANGE_LOW(pn) - seq > (U32_MAX >> 1))
        )
            return TRUE;
    }
    else if (
        (COP_SEQ_RANGE_LOW(pn) > COP_SEQ_RANGE_HIGH(pn))
        ?
            (  seq >  COP_SEQ_RANGE_LOW(pn)
            || seq <= COP_SEQ_RANGE_HIGH(pn))

        :    (  seq >  COP_SEQ_RANGE_LOW(pn)
             && seq <= COP_SEQ_RANGE_HIGH(pn))
    )
        return TRUE;
    return FALSE;
}
#endif

/* ------------------------------- pp.h ------------------------------- */

PERL_STATIC_INLINE Stack_off_t
Perl_TOPMARK(pTHX)
{
    DEBUG_s(DEBUG_v(PerlIO_printf(Perl_debug_log,
                                 "MARK top  %p %" IVdf "\n",
                                  PL_markstack_ptr,
                                  (IV)*PL_markstack_ptr)));
    return *PL_markstack_ptr;
}

PERL_STATIC_INLINE Stack_off_t
Perl_POPMARK(pTHX)
{
    DEBUG_s(DEBUG_v(PerlIO_printf(Perl_debug_log,
                                 "MARK pop  %p %" IVdf "\n",
                                  (PL_markstack_ptr-1),
                                  (IV)*(PL_markstack_ptr-1))));
    assert((PL_markstack_ptr > PL_markstack) || !"MARK underflow");
    return *PL_markstack_ptr--;
}

/*
=for apidoc_section $rpp

=for apidoc rpp_extend
Ensures that there is space on the stack to push C<n> items, extending it
if necessary.

=cut
*/

PERL_STATIC_INLINE void
Perl_rpp_extend(pTHX_ SSize_t n)
{
    PERL_ARGS_ASSERT_RPP_EXTEND;

    EXTEND_HWM_SET(PL_stack_sp, n);
#ifndef STRESS_REALLOC
    if (UNLIKELY(_EXTEND_NEEDS_GROW(PL_stack_sp, n)))
#endif
    {
        (void)stack_grow(PL_stack_sp, PL_stack_sp, n);
    }
}


/*
=for apidoc rpp_popfree_to

Pop and free all items on the argument stack above C<sp>. On return,
C<PL_stack_sp> will be equal to C<sp>.

=cut
*/

PERL_STATIC_INLINE void
Perl_rpp_popfree_to(pTHX_ SV **sp)
{
    PERL_ARGS_ASSERT_RPP_POPFREE_TO;

    assert(sp <= PL_stack_sp);
#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
    while (PL_stack_sp > sp) {
        SV *sv = *PL_stack_sp--;
        SvREFCNT_dec(sv);
    }
#else
    PL_stack_sp = sp;
#endif
}


/*
=for apidoc rpp_popfree_to_NN

A variant of rpp_popfree_to() which assumes that all the pointers being
popped off the stack are non-NULL.

=cut
*/

PERL_STATIC_INLINE void
Perl_rpp_popfree_to_NN(pTHX_ SV **sp)
{
    PERL_ARGS_ASSERT_RPP_POPFREE_TO_NN;

    assert(sp <= PL_stack_sp);
#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
    while (PL_stack_sp > sp) {
        SV *sv = *PL_stack_sp--;
        assert(sv);
        SvREFCNT_dec_NN(sv);
    }
#else
    PL_stack_sp = sp;
#endif
}


/*
=for apidoc rpp_popfree_1

Pop and free the top item on the argument stack and update C<PL_stack_sp>.

=cut
*/

PERL_STATIC_INLINE void
Perl_rpp_popfree_1(pTHX)
{
    PERL_ARGS_ASSERT_RPP_POPFREE_1;

#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
    SV *sv = *PL_stack_sp--;
    SvREFCNT_dec(sv);
#else
    PL_stack_sp--;
#endif
}


/*
=for apidoc rpp_popfree_1_NN

A variant of rpp_popfree_1() which assumes that the pointer being popped
off the stack is non-NULL.

=cut
*/

PERL_STATIC_INLINE void
Perl_rpp_popfree_1_NN(pTHX)
{
    PERL_ARGS_ASSERT_RPP_POPFREE_1_NN;

    assert(*PL_stack_sp);
#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
    SV *sv = *PL_stack_sp--;
    SvREFCNT_dec_NN(sv);
#else
    PL_stack_sp--;
#endif
}


/*
=for apidoc rpp_popfree_2

Pop and free the top two items on the argument stack and update
C<PL_stack_sp>.

=cut
*/


PERL_STATIC_INLINE void
Perl_rpp_popfree_2(pTHX)
{
    PERL_ARGS_ASSERT_RPP_POPFREE_2;

#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
    for (int i = 0; i < 2; i++) {
        SV *sv = *PL_stack_sp--;
        SvREFCNT_dec(sv);
    }
#else
    PL_stack_sp -= 2;
#endif
}


/*
=for apidoc rpp_popfree_2_NN

A variant of rpp_popfree_2() which assumes that the two pointers being
popped off the stack are non-NULL.

=cut
*/


PERL_STATIC_INLINE void
Perl_rpp_popfree_2_NN(pTHX)
{
    PERL_ARGS_ASSERT_RPP_POPFREE_2_NN;
#ifdef PERL_RC_STACK
    SV *sv2 = *PL_stack_sp--;
    assert(sv2);
    SV *sv1 = *PL_stack_sp;
    assert(sv1);

    assert(rpp_stack_is_rc());
    U32 rc1 = SvREFCNT(sv1);
    U32 rc2 = SvREFCNT(sv2);
    /* This expression is intended to be true if either of rc1 or rc2 has
     * the value 0 or 1, but using only a single branch test, rather
     * than the two branches that a compiler would plant for a boolean
     * expression. We are working on the assumption that, most of the
     * time, neither of the args to a binary function will need to be
     * freed - they're likely to lex vars, or PADTMPs or whatever.
     * So give the CPU a single branch that is rarely taken. */
    if (UNLIKELY( !(rc1>>1) + !(rc2>>1) ))
        /* at least one of the old SVs needs freeing. Do it the long way */
        Perl_rpp_free_2_(aTHX_ sv1, sv2, rc1, rc2);
    else {
        SvREFCNT(sv1) = rc1 - 1;
        SvREFCNT(sv2) = rc2 - 1;
    }
    PL_stack_sp--;
#else
    PL_stack_sp -= 2;
#endif
}


/*
=for apidoc rpp_pop_1_norc

Pop and return the top item off the argument stack and update
C<PL_stack_sp>. It's similar to rpp_popfree_1(), except that it actually
returns a value, and it I<doesn't> decrement the SV's reference count.
On non-C<PERL_RC_STACK> builds it actually increments the SV's reference
count.

This is useful in cases where the popped value is immediately embedded
somewhere e.g. via av_store(), allowing you skip decrementing and then
immediately incrementing the reference count again (and risk prematurely
freeing the SV if it had a RC of 1). On non-RC builds, the reference count
bookkeeping still works too, which is why it should be used rather than
a simple C<*PL_stack_sp-->.

=cut
*/

PERL_STATIC_INLINE SV*
Perl_rpp_pop_1_norc(pTHX)
{
    PERL_ARGS_ASSERT_RPP_POP_1_NORC

    SV *sv = *PL_stack_sp--;

#ifndef PERL_RC_STACK
    SvREFCNT_inc(sv);
#else
    assert(rpp_stack_is_rc());
#endif
    return sv;
}



/*
=for apidoc      rpp_push_1
=for apidoc_item rpp_push_IMM
=for apidoc_item rpp_push_2
=for apidoc_item rpp_xpush_1
=for apidoc_item rpp_xpush_IMM
=for apidoc_item rpp_xpush_2

Push one or two SVs onto the stack, incrementing their reference counts
and updating C<PL_stack_sp>. With the C<x> variants, it extends the stack
first. The C<IMM> variants assume that the single argument is an immortal
such as <&PL_sv_undef> and, for efficiency, will skip incrementing its
reference count.

=cut
*/

PERL_STATIC_INLINE void
Perl_rpp_push_1(pTHX_ SV *sv)
{
    PERL_ARGS_ASSERT_RPP_PUSH_1;

    *++PL_stack_sp = sv;
#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
    SvREFCNT_inc_simple_void_NN(sv);
#endif
}

PERL_STATIC_INLINE void
Perl_rpp_push_IMM(pTHX_ SV *sv)
{
    PERL_ARGS_ASSERT_RPP_PUSH_IMM;

    assert(SvIMMORTAL(sv));
    *++PL_stack_sp = sv;
#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
#endif
}

PERL_STATIC_INLINE void
Perl_rpp_push_2(pTHX_ SV *sv1, SV *sv2)
{
    PERL_ARGS_ASSERT_RPP_PUSH_2;

    *++PL_stack_sp = sv1;
    *++PL_stack_sp = sv2;
#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
    SvREFCNT_inc_simple_void_NN(sv1);
    SvREFCNT_inc_simple_void_NN(sv2);
#endif
}

PERL_STATIC_INLINE void
Perl_rpp_xpush_1(pTHX_ SV *sv)
{
    PERL_ARGS_ASSERT_RPP_XPUSH_1;

    rpp_extend(1);
    rpp_push_1(sv);
}

PERL_STATIC_INLINE void
Perl_rpp_xpush_IMM(pTHX_ SV *sv)
{
    PERL_ARGS_ASSERT_RPP_XPUSH_IMM;

    rpp_extend(1);
    rpp_push_IMM(sv);
}

PERL_STATIC_INLINE void
Perl_rpp_xpush_2(pTHX_ SV *sv1, SV *sv2)
{
    PERL_ARGS_ASSERT_RPP_XPUSH_2;

    rpp_extend(2);
    rpp_push_2(sv1, sv2);
}


/*
=for apidoc rpp_push_1_norc

Push C<sv> onto the stack without incrementing its reference count, and
update C<PL_stack_sp>. On non-PERL_RC_STACK builds, mortalise too.

This is most useful where an SV has just been created and already has a
reference count of 1, but has not yet been anchored anywhere.

=cut
*/

PERL_STATIC_INLINE void
Perl_rpp_push_1_norc(pTHX_ SV *sv)
{
    PERL_ARGS_ASSERT_RPP_PUSH_1;

    *++PL_stack_sp = sv;
#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
#else
    sv_2mortal(sv);
#endif
}


/*
=for apidoc      rpp_replace_1_1
=for apidoc_item rpp_replace_1_1_NN
=for apidoc_item rpp_replace_1_IMM_NN

Replace the current top stack item with C<sv>, while suitably adjusting
reference counts. Equivalent to rpp_popfree_1(); rpp_push_1(sv), but
is more efficient and handles both SVs being the same.

The C<_NN> variant assumes that the pointer on the stack to the SV being
freed is non-NULL.

The C<IMM_NN> variant is like the C<_NN> variant, but in addition, assumes
that the single argument is an immortal such as <&PL_sv_undef> and, for
efficiency, will skip incrementing its reference count.

=cut
*/

PERL_STATIC_INLINE void
Perl_rpp_replace_1_1(pTHX_ SV *sv)
{
    PERL_ARGS_ASSERT_RPP_REPLACE_1_1;

    assert(sv);
#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
    SV *oldsv = *PL_stack_sp;
    *PL_stack_sp = sv;
    SvREFCNT_inc_simple_void_NN(sv);
    SvREFCNT_dec(oldsv);
#else
    *PL_stack_sp = sv;
#endif
}


PERL_STATIC_INLINE void
Perl_rpp_replace_1_1_NN(pTHX_ SV *sv)
{
    PERL_ARGS_ASSERT_RPP_REPLACE_1_1_NN;

    assert(sv);
    assert(*PL_stack_sp);
#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
    SV *oldsv = *PL_stack_sp;
    *PL_stack_sp = sv;
    SvREFCNT_inc_simple_void_NN(sv);
    SvREFCNT_dec_NN(oldsv);
#else
    *PL_stack_sp = sv;
#endif
}


PERL_STATIC_INLINE void
Perl_rpp_replace_1_IMM_NN(pTHX_ SV *sv)
{
    PERL_ARGS_ASSERT_RPP_REPLACE_1_IMM_NN;

    assert(sv);
    assert(SvIMMORTAL(sv));
    assert(*PL_stack_sp);
#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
    SV *oldsv = *PL_stack_sp;
    *PL_stack_sp = sv;
    SvREFCNT_dec_NN(oldsv);
#else
    *PL_stack_sp = sv;
#endif
}


/*
=for apidoc      rpp_replace_2_1
=for apidoc_item rpp_replace_2_1_NN
=for apidoc_item rpp_replace_2_IMM_NN

Replace the current top to stacks item with C<sv>, while suitably
adjusting reference counts. Equivalent to rpp_popfree_2(); rpp_push_1(sv),
but is more efficient and handles SVs being the same.

The C<_NN> variant assumes that the pointers on the stack to the SVs being
freed are non-NULL.

The C<IMM_NN> variant is like the C<_NN> variant, but in addition, assumes
that the single argument is an immortal such as <&PL_sv_undef> and, for
efficiency, will skip incrementing its reference count.
=cut
*/

PERL_STATIC_INLINE void
Perl_rpp_replace_2_1(pTHX_ SV *sv)
{
    PERL_ARGS_ASSERT_RPP_REPLACE_2_1;

#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
    /* replace PL_stack_sp[-1] first; leave PL_stack_sp[0] in place while
     * we free [-1], so if an exception occurs, [0] will still be freed.
     */
    SV *oldsv = PL_stack_sp[-1];
    PL_stack_sp[-1] = sv;
    SvREFCNT_inc_simple_void_NN(sv);
    SvREFCNT_dec(oldsv);
    oldsv = *PL_stack_sp--;
    SvREFCNT_dec(oldsv);
#else
    *--PL_stack_sp = sv;
#endif
}


/* Private helper function for _NN and _IMM_NN variants.
 * Assumes sv has already had its ref count incremented,
 * ready for being put on the stack.
 * Intended to be small and fast, since it's inlined into many hot parts of
 * code.
 */

PERL_STATIC_INLINE void
Perl_rpp_replace_2_1_COMMON(pTHX_ SV *sv)
{

    assert(sv);
#ifdef PERL_RC_STACK
    SV *sv2 = *PL_stack_sp--;
    assert(sv2);
    SV *sv1 = *PL_stack_sp;
    assert(sv1);

    *PL_stack_sp = sv;
    assert(rpp_stack_is_rc());
    U32 rc1 = SvREFCNT(sv1);
    U32 rc2 = SvREFCNT(sv2);
    /* This expression is intended to be true if either of rc1 or rc2 has
     * the value 0 or 1, but using only a single branch test, rather
     * than the two branches that a compiler would plant for a boolean
     * expression. We are working on the assumption that, most of the
     * time, neither of the args to a binary function will need to be
     * freed - they're likely to lex vars, or PADTMPs or whatever.
     * So give the CPU a single branch that is rarely taken. */
    if (UNLIKELY( !(rc1>>1) + !(rc2>>1) ))
        /* at least one of the old SVs needs freeing. Do it the long way */
        Perl_rpp_free_2_(aTHX_ sv1, sv2, rc1, rc2);
    else {
        SvREFCNT(sv1) = rc1 - 1;
        SvREFCNT(sv2) = rc2 - 1;
    }
#else
    *--PL_stack_sp = sv;
#endif
}


PERL_STATIC_INLINE void
Perl_rpp_replace_2_1_NN(pTHX_ SV *sv)
{
    PERL_ARGS_ASSERT_RPP_REPLACE_2_1_NN;

    assert(sv);
#ifdef PERL_RC_STACK
    SvREFCNT_inc_simple_void_NN(sv);
#endif
    rpp_replace_2_1_COMMON(sv);
}


PERL_STATIC_INLINE void
Perl_rpp_replace_2_IMM_NN(pTHX_ SV *sv)
{
    PERL_ARGS_ASSERT_RPP_REPLACE_2_IMM_NN;

    assert(sv);
    assert(SvIMMORTAL(sv));
    rpp_replace_2_1_COMMON(sv);
}


/*
=for apidoc rpp_replace_at

Replace the SV at address sp within the stack with C<sv>, while suitably
adjusting reference counts. Equivalent to C<*sp = sv>, except with proper
reference count handling.

=cut
*/

PERL_STATIC_INLINE void
Perl_rpp_replace_at(pTHX_ SV **sp, SV *sv)
{
    PERL_ARGS_ASSERT_RPP_REPLACE_AT;

#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
    SV *oldsv = *sp;
    *sp = sv;
    SvREFCNT_inc_simple_void_NN(sv);
    SvREFCNT_dec(oldsv);
#else
    *sp = sv;
#endif
}


/*
=for apidoc rpp_replace_at_NN

A variant of rpp_replace_at() which assumes that the SV pointer on the
stack is non-NULL.

=cut
*/

PERL_STATIC_INLINE void
Perl_rpp_replace_at_NN(pTHX_ SV **sp, SV *sv)
{
    PERL_ARGS_ASSERT_RPP_REPLACE_AT_NN;

    assert(sv);
    assert(*sp);
#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
    SV *oldsv = *sp;
    *sp = sv;
    SvREFCNT_inc_simple_void_NN(sv);
    SvREFCNT_dec_NN(oldsv);
#else
    *sp = sv;
#endif
}


/*
=for apidoc rpp_replace_at_norc

Replace the SV at address sp within the stack with C<sv>, while suitably
adjusting the reference count of the old SV. Equivalent to C<*sp = sv>,
except with proper reference count handling.

C<sv>'s reference count doesn't get incremented. On non-C<PERL_RC_STACK>
builds, it gets mortalised too.

This is most useful where an SV has just been created and already has a
reference count of 1, but has not yet been anchored anywhere.

=cut
*/

PERL_STATIC_INLINE void
Perl_rpp_replace_at_norc(pTHX_ SV **sp, SV *sv)
{
    PERL_ARGS_ASSERT_RPP_REPLACE_AT_NORC;

#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
    SV *oldsv = *sp;
    *sp = sv;
    SvREFCNT_dec(oldsv);
#else
    *sp = sv;
    sv_2mortal(sv);
#endif
}


/*
=for apidoc rpp_replace_at_norc_NN

A variant of rpp_replace_at_norc() which assumes that the SV pointer on the
stack is non-NULL.

=cut
*/

PERL_STATIC_INLINE void
Perl_rpp_replace_at_norc_NN(pTHX_ SV **sp, SV *sv)
{
    PERL_ARGS_ASSERT_RPP_REPLACE_AT_NORC_NN;

    assert(*sp);
#ifdef PERL_RC_STACK
    assert(rpp_stack_is_rc());
    SV *oldsv = *sp;
    *sp = sv;
    SvREFCNT_dec_NN(oldsv);
#else
    *sp = sv;
    sv_2mortal(sv);
#endif
}
