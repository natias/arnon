=item overload::StrVal(arg)

Gives the string value of C<arg> as in the
absence of stringify overloading.  If you
are using this to get the address of a reference (useful for checking if two
references point to the same thing) then you may be better off using
C<builtin::refaddr()> or C<Scalar::Util::refaddr()>, which are faster.

=item overload::Overloaded(arg)

Returns true if C<arg> is subject to overloading of some operations.

=item overload::Method(obj,op)

Returns C<undef> or a reference to the method that implements C<op>.

Such a method always takes three arguments, which will be enforced if
it is an XS method.

=back

=head2 Overloading Constants

For some applications, the Perl parser mangles constants too much.
It is possible to hook into this process via C<overload::constant()>
and C<overload::remove_constant()> functions.

These functions take a hash as an argument.  The recognized keys of this hash
are:

=over 8

=item integer

to overload integer constants,

=item float

to overload floating point constants,

=item binary

to overload octal and hexadecimal constants,

=item q

to overload C<q>-quoted strings, constant pieces of C<qq>- and C<qx>-quoted
strings and here-documents,

=item qr

to overload constant pieces of regular expressions.

=back

The corresponding values are references to functions which take three arguments:
the first one is the I<initial> string form of the constant, the second one
is how Perl interprets this constant, the third one is how the constant is used.
Note that the initial string form does not
contain string delimiters, and has backslashes in backslash-delimiter
combinations stripped (thus the value of delimiter is not relevant for
processing of this string).  The return value of this function is how this
constant is going to be interpreted by Perl.  The third argument is undefined
unless for overloaded C<q>- and C<qr>- constants, it is C<q> in single-quote
context (comes from strings, regular expressions, and single-quote HERE
documents), it is C<tr> for arguments of C<tr>/C<y> operators,
it is C<s> for right-hand side of C<s>-operator, and it is C<qq> otherwise.

Since an expression C<"ab$cd,,"> is just a shortcut for C<'ab' . $cd . ',,'>,
it is expected that overloaded constant strings are equipped with reasonable
overloaded catenation operator, otherwise absurd results will result.
Similarly, negative numbers are considered as negations of positive constants.

Note that it is probably meaningless to call the functions overload::constant()
and overload::remove_constant() from anywhere but import() and unimport() methods.
From these methods they may be called as

    sub import {
        shift;
        return unless @_;
        die "unknown import: @_" unless @_ == 1 and $_[0] eq ':constant';
        overload::constant integer => sub {Math::BigInt->new(shift)};
    }

=head1 IMPLEMENTATION

What follows is subject to change RSN.

The table of methods for all operations is cached in magic for the
symbol table hash for the package.  The cache is invalidated during
processing of C<use overload>, C<no overload>, new function
definitions, and changes in @ISA.

(Every SVish thing has a magic queue, and magic is an entry in that
queue.  This is how a single variable may participate in multiple
forms of magic simultaneously.  For instance, environment variables
regularly have two forms at once: their %ENV magic and their taint
magic.  However, the magic which implements overloading is applied to
the stashes, which are rarely used directly, thus should not slow down
Perl.)

If a package uses overload, it carries a special flag.  This flag is also
set when new functions are defined or @ISA is modified.  There will be a
slight speed penalty on the very first operation thereafter that supports
overloading, while the overload tables are updated.  If there is no
overloading present, the flag is turned off.  Thus the only speed penalty
thereafter is the checking of this flag.

It is expected that arguments to methods that are not explicitly supposed
to be changed are constant (but this is not enforced).

=head1 COOKBOOK

Please add examples to what follows!

=head2 Two-face Scalars

Put this in F<two_face.pm> in your Perl library directory:

    package two_face;             # Scalars with separate string and
                                  # numeric values.
    sub new { my $p = shift; bless [@_], $p }
    use overload '""' => \&str, '0+' => \&num, fallback => 1;
    sub num {shift->[1]}
    sub str {shift->[0]}

Use it as follows:

    require two_face;
    my $seven = two_face->new("vii", 7);
    printf "seven=$seven, seven=%d, eight=%d\n", $seven, $seven+1;
    print "seven contains 'i'\n" if $seven =~ /i/;

(The second line creates a scalar which has both a string value, and a
numeric value.)  This prints:

    seven=vii, seven=7, eight=8
    seven contains 'i'

=head2 Two-face References

Suppose you want to create an object which is accessible as both an
array reference and a hash reference.

    package two_refs;
    use overload '%{}' => \&gethash, '@{}' => sub { $ {shift()} };
    sub new {
        my $p = shift;
        bless \ [@_], $p;
    }
    sub gethash {
        my %h;
        my $self = shift;
        tie %h, ref $self, $self;
        \%h;
    }

    sub TIEHASH { my $p = shift; bless \ shift, $p }
    my %fields;
    my $i = 0;
    $fields{$_} = $i++ foreach qw{zero one two three};
    sub STORE {
        my $self = ${shift()};
        my $key = $fields{shift()};
        defined $key or die "Out of band access";
        $$self->[$key] = shift;
    }
    sub FETCH {
        my $self = ${shift()};
        my $key = $fields{shift()};
        defined $key or die "Out of band access";
        $$self->[$key];
    }

Now one can access an object using both the array and hash syntax:

    my $bar = two_refs->new(3,4,5,6);
    $bar->[2] = 11;
    $bar->{two} == 11 or die 'bad hash fetch';

Note several important features of this example.  First of all, the
I<actual> type of $bar is a scalar reference, and we do not overload
the scalar dereference.  Thus we can get the I<actual> non-overloaded
contents of $bar by just using C<$$bar> (what we do in functions which
overload dereference).  Similarly, the object returned by the
TIEHASH() method is a scalar reference.

Second, we create a new tied hash each time the hash syntax is used.
This allows us not to worry about a possibility of a reference loop,
which would lead to a memory leak.

Both these problems can be cured.  Say, if we want to overload hash
dereference on a reference to an object which is I<implemented> as a
hash itself, the only problem one has to circumvent is how to access
this I<actual> hash (as opposed to the I<virtual> hash exhibited by the
overloaded dereference operator).  Here is one possible fetching routine:

    sub access_hash {
        my ($self, $key) = (shift, shift);
        my $class = ref $self;
        bless $self, 'overload::dummy'; # Disable overloading of %{}
        my $out = $self->{$key};
        bless $self, $class;            # Restore overloading
        $out;
    }

To remove creation of the tied hash on each access, one may an extra
level of indirection which allows a non-circular structure of references:

    package two_refs1;
    use overload
        '%{}' => sub { ${shift()}->[1] },
        '@{}' => sub { ${shift()}->[0] };

    sub new {
        my $p = shift;
        my $a = [@_];
        my %h;
        tie %h, $p, $a;
        bless \ [$a, \%h], $p;
    }
    sub gethash {
        my %h;
        my $self = shift;
        tie %h, ref $self, $self;
        \%h;
    }

    sub TIEHASH { my $p = shift; bless \ shift, $p }
    my %fields;
    my $i = 0;
    $fields{$_} = $i++ foreach qw{zero one two three};
    sub STORE {
        my $a = ${shift()};
        my $key = $fields{shift()};
        defined $key or die "Out of band access";
        $a->[$key] = shift;
    }
    sub FETCH {
        my $a = ${shift()};
        my $key = $fields{shift()};
        defined $key or die "Out of band access";
        $a->[$key];
    }

Now if $baz is overloaded like this, then C<$baz> is a reference to a
reference to the intermediate array, which keeps a reference to an
actual array, and the access hash.  The tie()ing object for the access
hash is a reference to a reference to the actual array, so

=over

=item *

There are no loops of references.

=item *

Both "objects" which are blessed into the class C<two_refs1> are
references to a reference to an array, thus references to a I<scalar>.
Thus the accessor expression C<$$foo-E<gt>[$ind]> involves no
overloaded operations.

=back

=head2 Symbolic Calculator

Put this in F<symbolic.pm> in your Perl library directory:

    package symbolic;           # Primitive symbolic calculator
    use overload nomethod => \&wrap;

    sub new { shift; bless ['n', @_] }
    sub wrap {
        my ($obj, $other, $inv, $meth) = @_;
        ($obj, $other) = ($other, $obj) if $inv;
        bless [$meth, $obj, $other];
    }

This module is very unusual as overloaded modules go: it does not
provide any usual overloaded operators, instead it provides an
implementation for C<L</nomethod>>.  In this example the C<nomethod>
subroutine returns an object which encapsulates operations done over
the objects: C<< symbolic->new(3) >> contains C<['n', 3]>, C<< 2 +
symbolic->new(3) >> contains C<['+', 2, ['n', 3]]>.

Here is an example of the script which "calculates" the side of
circumscribed octagon using the above package:

    require symbolic;
    my $iter = 1;                   # 2**($iter+2) = 8
    my $side = symbolic->new(1);
    my $cnt = $iter;

    while ($cnt--) {
        $side = (sqrt(1 + $side**2) - 1)/$side;
    }
    print "OK\n";

The value of $side is

    ['/', ['-', ['sqrt', ['+', 1, ['**', ['n', 1], 2]],
                        undef], 1], ['n', 1]]

Note that while we obtained this value using a nice little script,
there is no simple way to I<use> this value.  In fact this value may
be inspected in debugger (see L<perldebug>), but only if
C<bareStringify> B<O>ption is set, and not via C<p> command.

If one attempts to print this value, then the overloaded operator
C<""> will be called, which will call C<nomethod> operator.  The
result of this operator will be stringified again, but this result is
again of type C<symbolic>, which will lead to an infinite loop.

Add a pretty-printer method to the module F<symbolic.pm>:

    sub pretty {
        my ($meth, $a, $b) = @{+shift};
        $a = 'u' unless defined $a;
        $b = 'u' unless defined $b;
        $a = $a->pretty if ref $a;
        $b = $b->pretty if ref $b;
        "[$meth $a $b]";
    }

Now one can finish the script by

    print "side = ", $side->pretty, "\n";

The method C<pretty> is doing object-to-string conversion, so it
is natural to overload the operator C<""> using this method.  However,
inside such a method it is not necessary to pretty-print the
I<components> $a and $b of an object.  In the above subroutine
C<"[$meth $a $b]"> is a catenation of some strings and components $a
and $b.  If these components use overloading, the catenation operator
will look for an overloaded operator C<.>; if not present, it will
look for an overloaded operator C<"">.  Thus it is enough to use

    use overload nomethod => \&wrap, '""' => \&str;
    sub str {
        my ($meth, $a, $b) = @{+shift};
        $a = 'u' unless defined $a;
        $b = 'u' unless defined $b;
        "[$meth $a $b]";
    }

Now one can change the last line of the script to

    print "side = $side\n";

which outputs

    side = [/ [- [sqrt [+ 1 [** [n 1 u] 2]] u] 1] [n 1 u]]

and one can inspect the value in debugger using all the possible
methods.

Something is still amiss: consider the loop variable $cnt of the
script.  It was a number, not an object.  We cannot make this value of
type C<symbolic>, since then the loop will not terminate.

Indeed, to terminate the cycle, the $cnt should become false.
However, the operator C<bool> for checking falsity is overloaded (this
time via overloaded C<"">), and returns a long string, thus any object
of type C<symbolic> is true.  To overcome this, we need a way to
compare an object to 0.  In fact, it is easier to write a numeric
conversion routine.

Here is the text of F<symbolic.pm> with such a routine added (and
slightly modified str()):

    package symbolic;           # Primitive symbolic calculator
    use overload
        nomethod => \&wrap, '""' => \&str, '0+' => \&num;

    sub new { shift; bless ['n', @_] }
    sub wrap {
        my ($obj, $other, $inv, $meth) = @_;
        ($obj, $other) = ($other, $obj) if $inv;
        bless [$meth, $obj, $other];
    }
    sub str {
        my ($meth, $a, $b) = @{+shift};
        $a = 'u' unless defined $a;
        if (defined $b) {
            "[$meth $a $b]";
        } else {
            "[$meth $a]";
        }
    }
    my %subr = (
        n => sub {$_[0]},
        sqrt => sub {sqrt $_[0]},
        '-' => sub {shift() - shift()},
        '+' => sub {shift() + shift()},
        '/' => sub {shift() / shift()},
        '*' => sub {shift() * shift()},
        '**' => sub {shift() ** shift()},
    );
    sub num {
        my ($meth, $a, $b) = @{+shift};
        my $subr = $subr{$meth}
        or die "Do not know how to ($meth) in symbolic";
        $a = $a->num if ref $a eq __PACKAGE__;
        $b = $b->num if ref $b eq __PACKAGE__;
        $subr->($a,$b);
    }

All the work of numeric conversion is done in %subr and num().  Of
course, %subr is not complete, it contains only operators used in the
example below.  Here is the extra-credit question: why do we need an
explicit recursion in num()?  (Answer is at the end of this section.)

Use this module like this:

    require symbolic;
    my $iter = symbolic->new(2);        # 16-gon
    my $side = symbolic->new(1);
    my $cnt = $iter;

    while ($cnt) {
        $cnt = $cnt - 1;                # Mutator '--' not implemented
        $side = (sqrt(1 + $side**2) - 1)/$side;
    }
    printf "%s=%f\n", $side, $side;
    printf "pi=%f\n", $side*(2**($iter+2));

It prints (without so many line breaks)

    [/ [- [sqrt [+ 1 [** [/ [- [sqrt [+ 1 [** [n 1] 2]]] 1]
                            [n 1]] 2]]] 1]
    [/ [- [sqrt [+ 1 [** [n 1] 2]]] 1] [n 1]]]=0.198912
    pi=3.182598

The above module is very primitive.  It does not implement
mutator methods (C<++>, C<-=> and so on), does not do deep copying
(not required without mutators!), and implements only those arithmetic
operations which are used in the example.

To implement most arithmetic operations is easy; one should just use
the tables of operations, and change the code which fills %subr to

    my %subr = ( 'n' => sub {$_[0]} );
    foreach my $op (split " ", $overload::ops{with_assign}) {
        $subr{$op} = $subr{"$op="} = eval "sub {shift() $op shift()}";
    }
    my @bins = qw(binary 3way_comparison num_comparison str_comparison);
    foreach my $op (split " ", "@overload::ops{ @bins }") {
        $subr{$op} = eval "sub {shift() $op shift()}";
    }
    foreach my $op (split " ", "@overload::ops{qw(unary func)}") {
        print "defining '$op'\n";
        $subr{$op} = eval "sub {$op shift()}";
    }

Since subroutines implementing assignment operators are not required
to modify their operands (see L</Overloadable Operations> above),
we do not need anything special to make C<+=> and friends work,
besides adding these operators to %subr and defining a copy
constructor (needed since Perl has no way to know that the
implementation of C<'+='> does not mutate the argument -
see L</Copy Constructor>).

To implement a copy constructor, add C<< '=' => \&cpy >> to C<use overload>
line, and code (this code assumes that mutators change things one level
deep only, so recursive copying is not needed):

    sub cpy {
        my $self = shift;
        bless [@$self], ref $self;
    }

To make C<++> and C<--> work, we need to implement actual mutators,
either directly, or in C<nomethod>.  We continue to do things inside
C<nomethod>, thus add

    if ($meth eq '++' or $meth eq '--') {
        @$obj = ($meth, (bless [@$obj]), 1); # Avoid circular reference
        return $obj;
    }

after the first line of wrap().  This is not a most effective
implementation, one may consider

    sub inc { $_[0] = bless ['++', shift, 1]; }

instead.

As a final remark, note that one can fill %subr by

    my %subr = ( 'n' => sub {$_[0]} );
    foreach my $op (split " ", $overload::ops{with_assign}) {
        $subr{$op} = $subr{"$op="} = eval "sub {shift() $op shift()}";
    }
    my @bins = qw(binary 3way_comparison num_comparison str_comparison);
    foreach my $op (split " ", "@overload::ops{ @bins }") {
        $subr{$op} = eval "sub {shift() $op shift()}";
    }
    foreach my $op (split " ", "@overload::ops{qw(unary func)}") {
        $subr{$op} = eval "sub {$op shift()}";
    }
    $subr{'++'} = $subr{'+'};
    $subr{'--'} = $subr{'-'};

This finishes implementation of a primitive symbolic calculator in
50 lines of Perl code.  Since the numeric values of subexpressions
are not cached, the calculator is very slow.

Here is the answer for the exercise: In the case of str(), we need no
explicit recursion since the overloaded C<.>-operator will fall back
to an existing overloaded operator C<"">.  Overloaded arithmetic
operators I<do not> fall back to numeric conversion if C<fallback> is
not explicitly requested.  Thus without an explicit recursion num()
would convert C<['+', $a, $b]> to C<$a + $b>, which would just rebuild
the argument of num().

If you wonder why defaults for conversion are different for str() and
num(), note how easy it was to write the symbolic calculator.  This
simplicity is due to an appropriate choice of defaults.  One extra
note: due to the explicit recursion num() is more fragile than sym():
we need to explicitly check for the type of $a and $b.  If components
$a and $b happen to be of some related type, this may lead to problems.

=head2 I<Really> Symbolic Calculator

One may wonder why we call the above calculator symbolic.  The reason
is that the actual calculation of the value of expression is postponed
until the value is I<used>.

To see it in action, add a method

    sub STORE {
        my $obj = shift;
        $#$obj = 1;
        @$obj->[0,1] = ('=', shift);
    }

to the package C<symbolic>.  After this change one can do

    my $a = symbolic->new(3);
    my $b = symbolic->new(4);
    my $c = sqrt($a**2 + $b**2);

and the numeric value of $c becomes 5.  However, after calling

    $a->STORE(12);  $b->STORE(5);

the numeric value of $c becomes 13.  There is no doubt now that the module
symbolic provides a I<symbolic> calculator indeed.

To hide the rough edges under the hood, provide a tie()d interface to the
package C<symbolic>.  Add methods

    sub TIESCALAR { my $pack = shift; $pack->new(@_) }
    sub FETCH { shift }
    sub nop {  }                # Around a bug

(the bug, fixed in Perl 5.14, is described in L<"BUGS">).  One can use this
new interface as

    tie $a, 'symbolic', 3;
    tie $b, 'symbolic', 4;
    $a->nop;  $b->nop;          # Around a bug

    my $c = sqrt($a**2 + $b**2);

Now numeric value of $c is 5.  After C<$a = 12; $b = 5> the numeric value
of $c becomes 13.  To insulate the user of the module add a method

    sub vars { my $p = shift; tie($_, $p), $_->nop foreach @_; }

Now

    my ($a, $b);
    symbolic->vars($a, $b);
    my $c = sqrt($a**2 + $b**2);

    $a = 3; $b = 4;
    printf "c5  %s=%f\n", $c, $c;

    $a = 12; $b = 5;
    printf "c13  %s=%f\n", $c, $c;

shows that the numeric value of $c follows changes to the values of $a
and $b.

=head1 AUTHOR

Ilya Zakharevich E<lt>F<ilya@math.mps.ohio-state.edu>E<gt>.

=head1 SEE ALSO

The C<overloading> pragma can be used to enable or disable overloaded
operations within a lexical scope - see L<overloading>.

=head1 DIAGNOSTICS

When Perl is run with the B<-Do> switch or its equivalent, overloading
induces diagnostic messages.

Using the C<m> command of Perl debugger (see L<perldebug>) one can
deduce which operations are overloaded (and which ancestor triggers
this overloading).  Say, if C<eq> is overloaded, then the method C<(eq>
is shown by debugger.  The method C<()> corresponds to the C<fallback>
key (in fact a presence of this method shows that this package has
overloading enabled, and it is what is used by the C<Overloaded>
function of module C<overload>).

The module might issue the following warnings:

=over 4

=item Odd number of arguments for overload::constant

(W) The call to overload::constant contained an odd number of arguments.
The arguments should come in pairs.

=item '%s' is not an overloadable type

(W) You tried to overload a constant type the overload package is unaware of.

=item '%s' is not a code reference

(W) The second (fourth, sixth, ...) argument of overload::constant needs
to be a code reference.  Either an anonymous subroutine, or a reference
to a subroutine.

=item overload arg '%s' is invalid

(W) C<use overload> was passed an argument it did not
recognize.  Did you mistype an operator?

=back

=head1 BUGS AND PITFALLS

=over

=item *

A pitfall when fallback is TRUE and Perl resorts to a built-in
implementation of an operator is that some operators have more
than one semantic, for example C<|>:

    use overload '0+' => sub { $_[0]->{n}; },
        fallback => 1;
    my $x = bless { n => 4 }, "main";
    my $y = bless { n => 8 }, "main";
    print $x | $y, "\n";

You might expect this to output "12".
In fact, it prints "<": the ASCII result of treating "|"
as a bitwise string operator - that is, the result of treating
the operands as the strings "4" and "8" rather than numbers.
The fact that numify (C<0+>) is implemented but stringify
(C<"">) isn't makes no difference since the latter is simply
autogenerated from the former.

The only way to change this is to provide your own subroutine
for C<'|'>.

=item *

Magic autogeneration increases the potential for inadvertently
creating self-referential structures.
Currently Perl will not free self-referential
structures until cycles are explicitly broken.
For example,

    use overload '+' => 'add';
    sub add { bless [ \$_[0], \$_[1] ] };

is asking for trouble, since

    $obj += $y;

will effectively become

    $obj = add($obj, $y, undef);

with the same result as

    $obj = [\$obj, \$foo];

Even if no I<explicit> assignment-variants of operators are present in
the script, they may be generated by the optimizer.
For example,

    "obj = $obj\n"

may be optimized to

    my $tmp = 'obj = ' . $obj;  $tmp .= "\n";

=item *

The symbol table is filled with names looking like line-noise.

=item *

This bug was fixed in Perl 5.18, but may still trip you up if you are using
older versions:

For the purpose of inheritance every overloaded package behaves as if
C<fallback> is present (possibly undefined).  This may create
interesting effects if some package is not overloaded, but inherits
from two overloaded packages.

=item *

Before Perl 5.14, the relation between overloading and tie()ing was broken.
Overloading was triggered or not based on the I<previous> class of the
tie()d variable.

This happened because the presence of overloading was checked
too early, before any tie()d access was attempted.  If the
class of the value FETCH()ed from the tied variable does not
change, a simple workaround for code that is to run on older Perl
versions is to access the value (via C<() = $foo> or some such)
immediately after tie()ing, so that after this call the I<previous> class
coincides with the current one.

=item *

Barewords are not covered by overloaded string constants.

=item *

The range operator C<..> cannot be overloaded.

=back

=cut

# ex: set ts=8 sts=4 sw=4 et:
                                                             usr/local/lib/perl5/5.40.0/overloading.pm                                                           0000444 0000000 0000000 00000003420 14714567415 016352  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package overloading;
use warnings;

our $VERSION = '0.02';

my $HINT_NO_AMAGIC = 0x01000000; # see perl.h

require 5.010001;

sub _ops_to_nums {
    require overload::numbers;

    map { exists $overload::numbers::names{"($_"}
	? $overload::numbers::names{"($_"}
	: do { require Carp; Carp::croak("'$_' is not a valid overload") }
    } @_;
}

sub import {
    my ( $class, @ops ) = @_;

    if ( @ops ) {
	if ( $^H{overloading} ) {
	    vec($^H{overloading} , $_, 1) = 0 for _ops_to_nums(@ops);
	}

	if ( $^H{overloading} !~ /[^\0]/ ) {
	    delete $^H{overloading};
	    $^H &= ~$HINT_NO_AMAGIC;
	}
    } else {
	delete $^H{overloading};
	$^H &= ~$HINT_NO_AMAGIC;
    }
}

sub unimport {
    my ( $class, @ops ) = @_;

    if ( exists $^H{overloading} or not $^H & $HINT_NO_AMAGIC ) {
	if ( @ops ) {
	    vec($^H{overloading} ||= '', $_, 1) = 1 for _ops_to_nums(@ops);
	} else {
	    delete $^H{overloading};
	}
    }

    $^H |= $HINT_NO_AMAGIC;
}

1;
__END__

=head1 NAME

overloading - perl pragma to lexically control overloading

=head1 SYNOPSIS

    {
	no overloading;
	my $str = "$object"; # doesn't call stringification overload
    }

    # it's lexical, so this stringifies:
    warn "$object";

    # it can be enabled per op
    no overloading qw("");
    warn "$object";

    # and also reenabled
    use overloading;

=head1 DESCRIPTION

This pragma allows you to lexically disable or enable overloading.

=over 6

=item C<no overloading>

Disables overloading entirely in the current lexical scope.

=item C<no overloading @ops>

Disables only specific overloads in the current lexical scope.

=item C<use overloading>

Reenables overloading in the current lexical scope.

=item C<use overloading @ops>

Reenables overloading only for specific ops in the current lexical scope.

=back

=cut
                                                                                                                                                                                                                                                usr/local/lib/perl5/5.40.0/parent.pm                                                                0000444 0000000 0000000 00000005216 14714567415 015337  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package parent;
use strict;

our $VERSION = '0.241';

sub import {
    my $class = shift;

    my $inheritor = caller(0);

    if ( @_ and $_[0] eq '-norequire' ) {
        shift @_;
    } else {
        for ( my @filename = @_ ) {
            s{::|'}{/}g;
            require "$_.pm"; # dies if the file is not found
        }
    }

    {
        no strict 'refs';
        push @{"$inheritor\::ISA"}, @_; # dies if a loop is detected
    };
};

1;

__END__

=encoding utf8

=head1 NAME

parent - Establish an ISA relationship with base classes at compile time

=head1 SYNOPSIS

    package Baz;
    use parent qw(Foo Bar);

=head1 DESCRIPTION

Allows you to both load one or more modules, while setting up inheritance from
those modules at the same time.  Mostly similar in effect to

    package Baz;
    BEGIN {
        require Foo;
        require Bar;
        push @ISA, qw(Foo Bar);
    }

By default, every base class needs to live in a file of its own.
If you want to have a subclass and its parent class in the same file, you
can tell C<parent> not to load any modules by using the C<-norequire> switch:

  package Foo;
  sub exclaim { "I CAN HAS PERL" }

  package DoesNotLoadFooBar;
  use parent -norequire, 'Foo', 'Bar';
  # will not go looking for Foo.pm or Bar.pm

This is equivalent to the following code:

  package Foo;
  sub exclaim { "I CAN HAS PERL" }

  package DoesNotLoadFooBar;
  push @DoesNotLoadFooBar::ISA, 'Foo', 'Bar';

This is also helpful for the case where a package lives within
a differently named file:

  package MyHash;
  use Tie::Hash;
  use parent -norequire, 'Tie::StdHash';

This is equivalent to the following code:

  package MyHash;
  require Tie::Hash;
  push @ISA, 'Tie::StdHash';

If you want to load a subclass from a file that C<require> would
not consider an eligible filename (that is, it does not end in
either C<.pm> or C<.pmc>), use the following code:

  package MySecondPlugin;
  require './plugins/custom.plugin'; # contains Plugin::Custom
  use parent -norequire, 'Plugin::Custom';

=head1 HISTORY

This module was forked from L<base> to remove the cruft
that had accumulated in it.

=head1 CAVEATS

=head1 SEE ALSO

=over 4

=item L<base>

=item L<parent::versioned>

A fork of L<parent> that provides version checking in parent class modules.

=back

=head1 AUTHORS AND CONTRIBUTORS

Rafaël Garcia-Suarez, Bart Lateur, Max Maischein, Anno Siegel, Michael Schwern

=head1 MAINTAINER

Max Maischein C< corion@cpan.org >

Copyright (c) 2007-2017 Max Maischein C<< <corion@cpan.org> >>
Based on the idea of C<base.pm>, which was introduced with Perl 5.004_04.

=head1 LICENSE

This module is released under the same terms as Perl itself.

=cut
                                                                                                                                                                                                                                                                                                                                                                                  usr/local/lib/perl5/5.40.0/perl5db.pl                                                               0000444 0000000 0000000 00001154307 14714567415 015411  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        
=head1 NAME

perl5db.pl - the perl debugger

=head1 SYNOPSIS

    perl -d  your_Perl_script

=head1 DESCRIPTION

C<perl5db.pl> is the perl debugger. It is loaded automatically by Perl when
you invoke a script with S<C<perl -d>>. This documentation tries to outline the
structure and services provided by C<perl5db.pl>, and to describe how you
can use them.

See L<perldebug> for an overview of how to use the debugger.

=head1 GENERAL NOTES

The debugger can look pretty forbidding to many Perl programmers. There are
a number of reasons for this, many stemming out of the debugger's history.

When the debugger was first written, Perl didn't have a lot of its nicer
features - no references, no lexical variables, no closures, no object-oriented
programming. So a lot of the things one would normally have done using such
features was done using global variables, globs and the C<local()> operator
in creative ways.

Some of these have survived into the current debugger; a few of the more
interesting and still-useful idioms are noted in this section, along with notes
on the comments themselves.

=head2 Why not use more lexicals?

Experienced Perl programmers will note that the debugger code tends to use
mostly package globals rather than lexically-scoped variables. This is done
to allow a significant amount of control of the debugger from outside the
debugger itself.
