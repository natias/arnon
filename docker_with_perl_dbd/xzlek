
=item C<newAV> form

=for comment
'form' above and below is because otherwise have two =items with the same name,
can't link to them.

This does nothing beyond creating the whole-array data structure.
The Perl equivalent is approximately S<C<my @array;>>

This is useful when the minimum size of the array could be zero (perhaps there
are likely code paths that will entirely skip using it).

If the array does get used, the pointers data structure will need to be
allocated at that time.  This will end up being done by L</av_extend>>,
either explicitly:

    av_extend(av, len);

or implicitly when the first element is stored:

    (void)av_store(av, 0, sv);

Unused array elements are typically initialized by C<av_extend>.

=item C<newAV_mortal> form

This also creates the whole-array data structure, but also mortalises it.
(That is to say, a reference to the AV is added to the C<temps> stack.)

=item C<newAV_alloc_x> form

This effectively does a C<newAV> followed by also allocating (uninitialized)
space for the pointers array.  This is used when you know ahead of time the
likely minimum size of the array.  It is more efficient to do this than doing a
plain C<newAV> followed by an C<av_extend>.

Of course the array can be extended later should it become necessary.

C<size> must be at least 1.

=item C<newAV_alloc_xz> form

This is C<newAV_alloc_x>, but initializes each pointer in it to NULL.  This
gives added safety to guard against them being read before being set.

C<size> must be at least 1.

=back

The following examples all result in an array that can fit four elements
(indexes 0 .. 3):

    AV *av = newAV();
    av_extend(av, 3);

    AV *av = newAV_alloc_x(4);

    AV *av = newAV_alloc_xz(4);

In contrast, the following examples allocate an array that is only guaranteed
to fit one element without extending:

    AV *av = newAV_alloc_x(1);
    AV *av = newAV_alloc_xz(1);

=over 3

 AV *  newAV         ()
 AV *  newAV_mortal  ()
 AV *  newAV_alloc_x (SSize_t size)
 AV *  newAV_alloc_xz(SSize_t size)

=back

=back

=for hackers
Found in file av.h

=over 4

=item C<newAVav>
X<newAVav>

Creates a new AV and populates it with values copied from an existing AV.  The
new AV will have a reference count of 1, and will contain newly created SVs
copied from the original SV.  The original source will remain unchanged.

Perl equivalent: C<my @new_array = @existing_array;>

=over 3

 AV *  newAVav(AV *oav)

=back

=back

=for hackers
Found in file av.c

=over 4

=item C<newAVhv>
X<newAVhv>

Creates a new AV and populates it with keys and values copied from an existing
HV.  The new AV will have a reference count of 1, and will contain newly
created SVs copied from the original HV.  The original source will remain
unchanged.

Perl equivalent: C<my @new_array = %existing_hash;>

=over 3

 AV *  newAVhv(HV *ohv)

=back

=back

=for hackers
Found in file av.c

=over 4

=item C<Nullav>
X<Nullav>

C<B<DEPRECATED!>>  It is planned to remove C<Nullav>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

Null AV pointer.

(deprecated - use C<(AV *)NULL> instead)

=back

=for hackers
Found in file av.h

=head1 Callback Functions
X<G_METHOD>X<G_METHOD_NAMED>X<G_RETHROW>X<G_USEHINTS>X<SAVEf_KEEPOLDELEM>X<SAVEf_SETMAGIC>

=over 4

=item C<call_argv>
X<call_argv>

Performs a callback to the specified named and package-scoped Perl subroutine
with C<argv> (a C<NULL>-terminated array of strings) as arguments.  See
L<perlcall>.

Approximate Perl equivalent: C<&{"$sub_name"}(@$argv)>.

NOTE: the C<perl_call_argv()> form is B<deprecated>.

=over 3

 SSize_t  call_argv(const char *sub_name, I32 flags, char **argv)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<call_method>
X<call_method>

Performs a callback to the specified Perl method.  The blessed object must
be on the stack.  See L<perlcall>.

NOTE: the C<perl_call_method()> form is B<deprecated>.

=over 3

 SSize_t  call_method(const char *methname, I32 flags)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<call_pv>
X<call_pv>

Performs a callback to the specified Perl sub.  See L<perlcall>.

NOTE: the C<perl_call_pv()> form is B<deprecated>.

=over 3

 SSize_t  call_pv(const char *sub_name, I32 flags)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<call_sv>
X<call_sv>

Performs a callback to the Perl sub specified by the SV.

If neither the C<G_METHOD> nor C<G_METHOD_NAMED> flag is supplied, the
SV may be any of a CV, a GV, a reference to a CV, a reference to a GV
or C<SvPV(sv)> will be used as the name of the sub to call.

If the C<G_METHOD> flag is supplied, the SV may be a reference to a CV or
C<SvPV(sv)> will be used as the name of the method to call.

If the C<G_METHOD_NAMED> flag is supplied, C<SvPV(sv)> will be used as
the name of the method to call.

Some other values are treated specially for internal use and should
not be depended on.

See L<perlcall>.

NOTE: the C<perl_call_sv()> form is B<deprecated>.

=over 3

 SSize_t  call_sv(SV *sv, I32 flags)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<DESTRUCTORFUNC_NOCONTEXT_t>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<DESTRUCTORFUNC_t>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<ENTER>
X<ENTER>

Opening bracket on a callback.  See C<L</LEAVE>> and L<perlcall>.

=over 3

   ENTER;

=back

=back

=for hackers
Found in file scope.h

=over 4

=item C<ENTER_with_name>
X<ENTER_with_name>

Same as C<L</ENTER>>, but when debugging is enabled it also associates the
given literal string with the new scope.

=over 3

   ENTER_with_name("name");

=back

=back

=for hackers
Found in file scope.h

=over 4

=item C<eval_pv>
X<eval_pv>

Tells Perl to C<eval> the given string in scalar context and return an SV* result.

NOTE: the C<perl_eval_pv()> form is B<deprecated>.

=over 3

 SV *  eval_pv(const char *p, I32 croak_on_error)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<eval_sv>
X<eval_sv>

Tells Perl to C<eval> the string in the SV.  It supports the same flags
as C<call_sv>, with the obvious exception of C<G_EVAL>.  See L<perlcall>.

The C<G_RETHROW> flag can be used if you only need eval_sv() to
execute code specified by a string, but not catch any errors.

By default the code is compiled and executed with the default hints,
such as strict and features.  Set C<G_USEHINTS> in flags to use the
current hints from C<PL_curcop>.

NOTE: the C<perl_eval_sv()> form is B<deprecated>.

=over 3

 SSize_t  eval_sv(SV *sv, I32 flags)

=back

=back

=for hackers
Found in file perl.c

=over 4

=item C<FREETMPS>
X<FREETMPS>

Closing bracket for temporaries on a callback.  See C<L</SAVETMPS>> and
L<perlcall>.

=over 3

   FREETMPS;

=back

=back

=for hackers
Found in file scope.h

=over 4

=item C<G_DISCARD>

Described in L<perlcall>.

=back

=for hackers
Found in file pod/perlcall.pod

=over 4

=item C<G_EVAL>

Described in L<perlcall>.

=back

=for hackers
Found in file pod/perlcall.pod

=over 4

=item C<GIMME>
X<GIMME>

C<B<DEPRECATED!>>  It is planned to remove C<GIMME>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

A backward-compatible version of C<GIMME_V> which can only return
C<G_SCALAR> or C<G_LIST>; in a void context, it returns C<G_SCALAR>.
Deprecated.  Use C<GIMME_V> instead.

=over 3

 U32  GIMME

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<GIMME_V>
X<GIMME_V>

The XSUB-writer's equivalent to Perl's C<wantarray>.  Returns C<G_VOID>,
C<G_SCALAR> or C<G_LIST> for void, scalar or list context,
respectively.  See L<perlcall> for a usage example.

=over 3

 U32  GIMME_V

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<G_KEEPERR>

Described in L<perlcall>.

=back

=for hackers
Found in file pod/perlcall.pod

=over 4

=item C<G_LIST>

Described in L<perlcall>.

=back

=for hackers
Found in file pod/perlcall.pod

=over 4

=item C<G_NOARGS>

Described in L<perlcall>.

=back

=for hackers
Found in file pod/perlcall.pod

=over 4

=item C<G_SCALAR>

Described in L<perlcall>.

=back

=for hackers
Found in file pod/perlcall.pod

=over 4

=item C<G_VOID>

Described in L<perlcall>.

=back

=for hackers
Found in file pod/perlcall.pod

=over 4

=item C<is_lvalue_sub>
X<is_lvalue_sub>

Returns non-zero if the sub calling this function is being called in an lvalue
context.  Returns 0 otherwise.

=over 3

 I32  is_lvalue_sub()

=back

=back

=for hackers
Found in file pp_ctl.c

=over 4

=item C<LEAVE>
X<LEAVE>

Closing bracket on a callback.  See C<L</ENTER>> and L<perlcall>.

=over 3

   LEAVE;

=back

=back

=for hackers
Found in file scope.h

=over 4

=item C<LEAVE_with_name>
X<LEAVE_with_name>

Same as C<L</LEAVE>>, but when debugging is enabled it first checks that the
scope has the given name. C<name> must be a literal string.

=over 3

   LEAVE_with_name("name");

=back

=back

=for hackers
Found in file scope.h

=over 4

=item C<MORTALDESTRUCTOR_SV>

Described in L<perlguts>.

=over 3

   MORTALDESTRUCTOR_SV(SV *coderef, SV *args)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<mortal_destructor_sv>
X<mortal_destructor_sv>

This function arranges for either a Perl code reference, or a C function
reference to be called at the B<end of the current statement>.

The C<coderef> argument determines the type of function that will be
called. If it is C<SvROK()> it is assumed to be a reference to a CV and
will arrange for the coderef to be called. If it is not SvROK() then it
is assumed to be a C<SvIV()> which is C<SvIOK()> whose value is a pointer
to a C function of type C<DESTRUCTORFUNC_t> created using C<PTR2INT()>.
Either way the C<args> parameter will be provided to the callback as a
parameter, although the rules for doing so differ between the Perl and
C mode. Normally this function is only used directly for the Perl case
and the wrapper C<mortal_destructor_x()> is used for the C function case.

When operating in Perl callback mode the C<args> parameter may be NULL
in which case the code reference is called with no arguments, otherwise
if it is an AV (SvTYPE(args) == SVt_PVAV) then the contents of the AV
will be used as the arguments to the code reference, and if it is any
other type then the C<args> SV will be provided as a single argument to
the code reference.

When operating in a C callback mode the C<args> parameter will be passed
directly to the C function as a C<void *> pointer. No additional
processing of the argument will be peformed, and it is the callers
responsibility to free the C<args> parameter if necessary.

Be aware that there is a signficant difference in timing between the
I<end of the current statement> and the I<end of the current pseudo
block>. If you are looking for a mechanism to trigger a function at the
end of the B<current pseudo block> you should look at
L<perlapi/C<SAVEDESTRUCTOR_X>> instead of this function.

=over 3

 void  mortal_destructor_sv(SV *coderef, SV *args)

=back

=back

=for hackers
Found in file scope.c

=over 4

=item C<MORTALSVFUNC_X>

Described in L<perlguts>.

=over 3

   MORTALSVFUNC_X(SVFUNC_t f, SV *sv)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PL_errgv>

Described in L<perlcall>.

=back

=for hackers
Found in file pod/perlcall.pod

=over 4

=item C<save_aelem>

=item C<save_aelem_flags>
X<save_aelem>X<save_aelem_flags>

These each arrange for the value of the array element C<av[idx]> to be restored
at the end of the enclosing I<pseudo-block>.

In C<save_aelem>, the SV at C**sptr> will be replaced by a new C<undef>
scalar.  That scalar will inherit any magic from the original C<**sptr>,
and any 'set' magic will be processed.

In C<save_aelem_flags>, C<SAVEf_KEEPOLDELEM> being set in C<flags> causes
the function to forgo all that:  the scalar at C<**sptr> is untouched.
If C<SAVEf_KEEPOLDELEM> is not set, the SV at C**sptr> will be replaced by a
new C<undef> scalar.  That scalar will inherit any magic from the original
C<**sptr>.  Any 'set' magic will be processed if and only if C<SAVEf_SETMAGIC>
is set in in C<flags>.

=over 3

 void  save_aelem      (AV *av, SSize_t idx, SV **sptr)
 void  save_aelem_flags(AV *av, SSize_t idx, SV **sptr,
                        const U32 flags)

=back

=back

=for hackers
Found in file scope.c

=over 4

=item C<save_aptr>

Described in L<perlguts>.

=over 3

 void  save_aptr(AV **aptr)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<save_ary>

Described in L<perlguts>.

=over 3

 AV *  save_ary(GV *gv)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVEBOOL>

Described in L<perlguts>.

=over 3

   SAVEBOOL(bool i)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVEDELETE>

Described in L<perlguts>.

=over 3

   SAVEDELETE(HV * hv, char * key, I32 length)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVEDESTRUCTOR>

Described in L<perlguts>.

=over 3

   SAVEDESTRUCTOR(DESTRUCTORFUNC_NOCONTEXT_t f, void *p)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVEDESTRUCTOR_X>

Described in L<perlguts>.

=over 3

   SAVEDESTRUCTOR_X(DESTRUCTORFUNC_t f, void *p)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVEFREEOP>

Described in L<perlguts>.

=over 3

   SAVEFREEOP(OP *op)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVEFREEPV>

Described in L<perlguts>.

=over 3

   SAVEFREEPV(char *pv)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVEFREERCPV>

Described in L<perlguts>.

=over 3

   SAVEFREERCPV(char *pv)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVEFREESV>

Described in L<perlguts>.

=over 3

   SAVEFREESV(SV* sv)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVEGENERICSV>

Described in L<perlguts>.

=over 3

   SAVEGENERICSV(char **psv)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<save_hash>

Described in L<perlguts>.

=over 3

 HV *  save_hash(GV *gv)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<save_helem>

=item C<save_helem_flags>
X<save_helem>X<save_helem_flags>

These each arrange for the value of the hash element (in Perlish terms)
C<$hv{key}]> to be restored at the end of the enclosing I<pseudo-block>.

In C<save_helem>, the SV at C**sptr> will be replaced by a new C<undef>
scalar.  That scalar will inherit any magic from the original C<**sptr>,
and any 'set' magic will be processed.

In C<save_helem_flags>, C<SAVEf_KEEPOLDELEM> being set in C<flags> causes
the function to forgo all that:  the scalar at C<**sptr> is untouched.
If C<SAVEf_KEEPOLDELEM> is not set, the SV at C**sptr> will be replaced by a
new C<undef> scalar.  That scalar will inherit any magic from the original
C<**sptr>.  Any 'set' magic will be processed if and only if C<SAVEf_SETMAGIC>
is set in in C<flags>.

=over 3

 void  save_helem      (HV *hv, SV *key, SV **sptr)
 void  save_helem_flags(HV *hv, SV *key, SV **sptr,
                        const U32 flags)

=back

=back

=for hackers
Found in file scope.c

=over 4

=item C<save_hptr>

Described in L<perlguts>.

=over 3

 void  save_hptr(HV **hptr)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVEINT>

Described in L<perlguts>.

=over 3

   SAVEINT(int i)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<save_item>

Described in L<perlguts>.

=over 3

 void  save_item(SV *item)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVEIV>

Described in L<perlguts>.

=over 3

   SAVEIV(IV i)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SAVEI8>

Described in L<perlguts>.

=over 3

   SAVEI8(I8 i)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

