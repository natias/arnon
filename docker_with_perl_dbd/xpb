by N CBOR bytestring values, where N is the number of elements in
``fieldsfollowing``. Each bytestring value corresponds to a field denoted
by ``fieldsfollowing``.

Following the optional bytestring field values is the next revision descriptor
map, or end of stream.

Each revision descriptor map has the following bytestring keys:

Each map has the following bytestring keys:

node
   (bytestring) The node of the file revision whose data is represented.

deltabasenode
   (bytestring) Node of the file revision the following delta is against.

   Only present if the ``revision`` field is requested and delta data
   follows this map.

fieldsfollowing
   (array of 2-array) Denotes extra bytestring fields that following this map.
   See the documentation for ``changesetdata`` for semantics.

   The following named fields may be present:

   ``delta``
      The delta data to use to construct the fulltext revision.

      Only present if the ``revision`` field is requested and a delta is
      being emitted. The ``deltabasenode`` top-level key will also be
      present if this field is being emitted.

   ``revision``
      The fulltext revision data for this manifest. Only present if the
      ``revision`` field is requested and a fulltext revision is being emitted.

parents
   (array of bytestring) The nodes of the parents of this file revision.

   Only present if the ``parents`` field is requested.

When ``revision`` data is requested, the server chooses to emit either fulltext
revision data or a delta. What the server decides can be inferred by looking
for the presence of the ``delta`` or ``revision`` keys in the
``fieldsfollowing`` array.

filesdata
---------

Obtain various data related to multiple tracked files for specific changesets.

This command is similar to ``filedata`` with the main difference being that
individual requests operate on multiple file paths. This allows clients to
request data for multiple paths by issuing a single command.

The command accepts the following arguments:

fields
   (set of bytestring) Which data associated with a file to fetch.
   The following values are recognized:

   linknode
      The changeset node introducing this revision.

   parents
      Parent nodes for the revision.

   revision
      The raw revision data for a file.

haveparents
   (bool) Whether the client has the parent revisions of all requested
   nodes.

pathfilter
   (map) Defines a filter that determines what file paths are relevant.

   See the *Path Filters* section for more.

   If the argument is omitted, it is assumed that all paths are relevant.

revisions
   (array of maps) Specifies revisions whose data is being requested. Each value
   in the array is a map describing revisions. See the *Revisions Specifiers*
   section below for the format of this map.

   Data will be sent for the union of all revisions resolved by all revision
   specifiers.

   Only revision specifiers operating on changeset revisions are allowed.

The response bytestream starts with a CBOR map describing the data that
follows. This map has the following bytestring keys:

totalpaths
   (unsigned integer) Total number of paths whose data is being transferred.

totalitems
   (unsigned integer) Total number of file revisions whose data is being
   transferred.

Following the map header are 0 or more sequences of CBOR values. Each sequence
represents data for a specific tracked path. Each sequence begins with a CBOR
map describing the file data that follows. Following that map is N CBOR values
describing file revision data. The format of this data is identical to that
returned by the ``filedata`` command.

Each sequence's map header has the following bytestring keys:

path
   (bytestring) The tracked file path whose data follows.

totalitems
   (unsigned integer) Total number of file revisions whose data is being
   transferred.

The ``haveparents`` argument has significant implications on the data
transferred.

When ``haveparents`` is true, the command MAY only emit data for file
revisions introduced by the set of changeset revisions whose data is being
requested. In other words, the command may assume that all file revisions
for all relevant paths for ancestors of the requested changeset revisions
are present on the receiver.

When ``haveparents`` is false, the command MUST assume that the receiver
has no file revisions data. This means that all referenced file revisions
in the queried set of changeset revisions will be sent.

TODO we want a more complicated mechanism for the client to specify which
ancestor revisions are known. This is needed so intelligent deltas can be
emitted and so updated linknodes can be sent if the client needs to adjust
its linknodes for existing file nodes to older changeset revisions.
TODO we may want to make linknodes an array so multiple changesets can be
marked as introducing a file revision, since this can occur with e.g. hidden
changesets.

heads
-----

Obtain DAG heads in the repository.

The command accepts the following arguments:

publiconly (optional)
   (boolean) If set, operate on the DAG for public phase changesets only.
   Non-public (i.e. draft) phase DAG heads will not be returned.

The response is a CBOR array of bytestrings defining changeset nodes
of DAG heads. The array can be empty if the repository is empty or no
changesets satisfied the request.

TODO consider exposing phase of heads in response

known
-----

Determine whether a series of changeset nodes is known to the server.

The command accepts the following arguments:

nodes
   (array of bytestrings) List of changeset nodes whose presence to
   query.

The response is a bytestring where each byte contains a 0 or 1 for the
corresponding requested node at the same index.

TODO use a bit array for even more compact response

listkeys
--------

List values in a specified ``pushkey`` namespace.

The command receives the following arguments:

namespace
   (bytestring) Pushkey namespace to query.

The response is a map with bytestring keys and values.

TODO consider using binary to represent nodes in certain pushkey namespaces.

lookup
------

Try to resolve a value to a changeset revision.

Unlike ``known`` which operates on changeset nodes, lookup operates on
node fragments and other names that a user may use.

The command receives the following arguments:

key
   (bytestring) Value to try to resolve.

On success, returns a bytestring containing the resolved node.

manifestdata
------------

Obtain various data related to manifests (which are lists of files in
a revision).

The command accepts the following arguments:

fields
   (set of bytestring) Which data associated with manifests to fetch.
   The following values are recognized:

   parents
      Parent nodes for the manifest.

   revision
      The raw revision data for the manifest.

haveparents
   (bool) Whether the client has the parent revisions of all requested
   nodes. If set, the server may emit revision data as deltas against
   any parent revision. If not set, the server MUST only emit deltas for
   revisions previously emitted by this command.

   False is assumed in the absence of any value.

nodes
   (array of bytestring) Manifest nodes whose data to retrieve.

tree
   (bytestring) Path to manifest to retrieve. The empty bytestring represents
   the root manifest. All other values represent directories/trees within
   the repository.

TODO allow specifying revisions via alternate means (such as from changeset
revisions or ranges)
TODO consider recursive expansion of manifests (with path filtering for
narrow use cases)

The response bytestream starts with a CBOR map describing the data that
follows. It has the following bytestring keys:

totalitems
   (unsigned integer) Total number of manifest revisions whose data is
   being returned.

Following the map header is a series of 0 or more CBOR values. If values
are present, the first value will always be a map describing a single manifest
revision.

If the ``fieldsfollowing`` key is present, the map will immediately be followed
by N CBOR bytestring values, where N is the number of elements in
``fieldsfollowing``. Each bytestring value corresponds to a field denoted
by ``fieldsfollowing``.

Following the optional bytestring field values is the next revision descriptor
map, or end of stream.

Each revision descriptor map has the following bytestring keys:

node
   (bytestring) The node of the manifest revision whose data is represented.

deltabasenode
   (bytestring) The node that the delta representation of this revision is
   computed against. Only present if the ``revision`` field is requested and
   a delta is being emitted.

fieldsfollowing
   (array of 2-array) Denotes extra bytestring fields that following this map.
   See the documentation for ``changesetdata`` for semantics.

   The following named fields may be present:

   ``delta``
      The delta data to use to construct the fulltext revision.

      Only present if the ``revision`` field is requested and a delta is
      being emitted. The ``deltabasenode`` top-level key will also be
      present if this field is being emitted.

   ``revision``
      The fulltext revision data for this manifest. Only present if the
      ``revision`` field is requested and a fulltext revision is being emitted.

parents
   (array of bytestring) The nodes of the parents of this manifest revision.
   Only present if the ``parents`` field is requested.

When ``revision`` data is requested, the server chooses to emit either fulltext
revision data or a delta. What the server decides can be inferred by looking
for the presence of ``delta`` or ``revision`` in the ``fieldsfollowing`` array.

Servers MAY advertise the following extra fields in the capabilities
descriptor for this command:

recommendedbatchsize
   (unsigned integer) Number of revisions the server recommends as a batch
   query size. If defined, clients needing to issue multiple ``manifestdata``
   commands to obtain needed data SHOULD construct their commands to have
   this many revisions per request.

pushkey
-------

Set a value using the ``pushkey`` protocol.

The command receives the following arguments:

namespace
   (bytestring) Pushkey namespace to operate on.
key
   (bytestring) The pushkey key to set.
old
   (bytestring) Old value for this key.
new
   (bytestring) New value for this key.

TODO consider using binary to represent nodes is certain pushkey namespaces.
TODO better define response type and meaning.

rawstorefiledata
----------------

Allows retrieving raw files used to store repository data.

The command accepts the following arguments:

files
   (array of bytestring) Describes the files that should be retrieved.

   The meaning of values in this array is dependent on the storage backend used
   by the server.

The response bytestream starts with a CBOR map describing the data that follows.
This map has the following bytestring keys:

filecount
   (unsigned integer) Total number of files whose data is being transferred.

totalsize
   (unsigned integer) Total size in bytes of files data that will be
   transferred. This is file on-disk size and not wire size.

Following the map header are N file segments. Each file segment consists of a
CBOR map followed by an indefinite length bytestring. Each map has the following
bytestring keys:

location
   (bytestring) Denotes the location in the repository where the file should be
   written. Values map to vfs instances to use for the writing.

path
   (bytestring) Path of file being transferred. Path is the raw store
   path and can be any sequence of bytes that can be tracked in a Mercurial
   manifest.

size
   (unsigned integer) Size of file data. This will be the final written
   file size. The total size of the data that follows the CBOR map
   will be greater due to encoding overhead of CBOR.

TODO this command is woefully incomplete. If we are to move forward with a
stream clone analog, it needs a lot more metadata around how to describe what
files are available to retrieve, other semantics.

Revision Specifiers
===================

A *revision specifier* is a map that evaluates to a set of revisions.

A *revision specifier* has a ``type`` key that defines the revision
selection type to perform. Other keys in the map are used in a
type-specific manner.

The following types are defined:

changesetexplicit
   An explicit set of enumerated changeset revisions.

   The ``nodes`` key MUST contain an array of full binary nodes, expressed
   as bytestrings.

changesetexplicitdepth
   Like ``changesetexplicit``, but contains a ``depth`` key defining the
   unsigned integer number of ancestor revisions to also resolve. For each
   value in ``nodes``, DAG ancestors will be walked until up to N total
   revisions from that ancestry walk are present in the final resolved set.

changesetdagrange
   Defines revisions via a DAG range of changesets on the changelog.

   The ``roots`` key MUST contain an array of full, binary node values
   representing the *root* revisions.

   The ``heads`` key MUST contain an array of full, binary nodes values
   representing the *head* revisions.

   The DAG range between ``roots`` and ``heads`` will be resolved and all
   revisions between will be used. Nodes in ``roots`` are not part of the
   resolved set. Nodes in ``heads`` are. The ``roots`` array may be empty.
   The ``heads`` array MUST be defined.

Path Filters
============

Various commands accept a *path filter* argument that defines the set of file
paths relevant to the request.

A *path filter* is defined as a map with the bytestring keys ``include`` and
``exclude``. Each is an array of bytestring values. Each value defines a pattern
rule (see :hg:`help patterns`) that is used to match file paths.

A path matches the path filter if it is matched by a rule in the ``include``
set but doesn't match a rule in the ``exclude`` set. In other words, a path
matcher takes the union of all ``include`` patterns and then substracts the
union of all ``exclude`` patterns.

Patterns MUST be prefixed with their pattern type. Only the following pattern
types are allowed: ``path:``, ``rootfilesin:``.

If the ``include`` key is omitted, it is assumed that all paths are
relevant. The patterns from ``exclude`` will still be used, if defined.

An example value is ``path:tests/foo``, which would match a file named
``tests/foo`` or a directory ``tests/foo`` and all files under it.
                                                                                                                                                                                                                                                                                                                                                                         usr/lib/python3/dist-packages/mercurial/helptext/merge-tools.txt                                    0000644 0000000 0000000 00000010641 14355257011 023571  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        To merge files Mercurial uses merge tools.

A merge tool combines two different versions of a file into a merged
file. Merge tools are given the two files and the greatest common
ancestor of the two file versions, so they can determine the changes
made on both branches.

Merge tools are used both for :hg:`resolve`, :hg:`merge`, :hg:`update`,
:hg:`backout` and in several extensions.

Usually, the merge tool tries to automatically reconcile the files by
combining all non-overlapping changes that occurred separately in
the two different evolutions of the same initial base file. Furthermore, some
interactive merge programs make it easier to manually resolve
conflicting merges, either in a graphical way, or by inserting some
conflict markers. Mercurial does not include any interactive merge
programs but relies on external tools for that.

Available merge tools
=====================

External merge tools and their properties are configured in the
merge-tools configuration section - see hgrc(5) - but they can often just
be named by their executable.

A merge tool is generally usable if its executable can be found on the
system and if it can handle the merge. The executable is found if it
is an absolute or relative executable path or the name of an
application in the executable search path. The tool is assumed to be
able to handle the merge if it can handle symlinks if the file is a
symlink, if it can handle binary files if the file is binary, and if a
GUI is available if the tool requires a GUI.

There are some internal merge tools which can be used. The internal
merge tools are:

.. internaltoolsmarker

Internal tools are always available and do not require a GUI but will
by default not handle symlinks or binary files. See next section for
detail about "actual capabilities" described above.

Choosing a merge tool
=====================

Mercurial uses these rules when deciding which merge tool to use:

1. If a tool has been specified with the --tool option to merge or resolve, it
   is used.  If it is the name of a tool in the merge-tools configuration, its
   configuration is used. Otherwise the specified tool must be executable by
   the shell.

2. If the ``HGMERGE`` environment variable is present, its value is used and
   must be executable by the shell.

3. If the filename of the file to be merged matches any of the patterns in the
   merge-patterns configuration section, the first usable merge tool
   corresponding to a matching pattern is used.

4. If ui.merge is set it will be considered next. If the value is not the name
   of a configured tool, the specified value is used and must be executable by
   the shell. Otherwise the named tool is used if it is usable.

5. If any usable merge tools are present in the merge-tools configuration
   section, the one with the highest priority is used.

6. If a program named ``hgmerge`` can be found on the system, it is used - but
   it will by default not be used for symlinks and binary files.

7. If the file to be merged is not binary and is not a symlink, then
   internal ``:merge`` is used.

8. Otherwise, ``:prompt`` is used.

For historical reason, Mercurial treats merge tools as below while
examining rules above.

==== =============== ====== =======
step specified via   binary symlink
==== =============== ====== =======
1.   --tool          o/o    o/o
2.   HGMERGE         o/o    o/o
3.   merge-patterns  o/o(*) x/?(*)
4.   ui.merge        x/?(*) x/?(*)
==== =============== ====== =======

Each capability column indicates Mercurial behavior for
internal/external merge tools at examining each rule.

- "o": "assume that a tool has capability"
- "x": "assume that a tool does not have capability"
- "?": "check actual capability of a tool"

If ``merge.strict-capability-check`` configuration is true, Mercurial
checks capabilities of merge tools strictly in (*) cases above (= each
capability column becomes "?/?"). It is false by default for backward
compatibility.

.. note::

   After selecting a merge program, Mercurial will by default attempt
   to merge the files using a simple merge algorithm first. Only if it doesn't
   succeed because of conflicting changes will Mercurial actually execute the
   merge program. Whether to use the simple merge algorithm first can be
   controlled by the premerge setting of the merge tool. Premerge is enabled by
   default unless the file is binary or a symlink.

See the merge-tools and ui sections of hgrc(5) for details on the
configuration of merge tools.
                                                                                               usr/lib/python3/dist-packages/mercurial/helptext/pager.txt                                          0000644 0000000 0000000 00000002673 14355257011 022440  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        Some Mercurial commands can produce a lot of output, and Mercurial will
attempt to use a pager to make those commands more pleasant.

To set the pager that should be used, set the application variable::

  [pager]
  pager = less -FRX

If no pager is set in the user or repository configuration, Mercurial uses the
environment variable $PAGER. If $PAGER is not set, pager.pager from the default
or system configuration is used. If none of these are set, a default pager will
be used, typically `less` on Unix and `more` on Windows.

.. container:: windows

  On Windows, `more` is not color aware, so using it effectively disables color.
  MSYS and Cygwin shells provide `less` as a pager, which can be configured to
  support ANSI color codes.  See :hg:`help config.color.pagermode` to configure
  the color mode when invoking a pager.

You can disable the pager for certain commands by adding them to the
pager.ignore list::

  [pager]
  ignore = version, help, update

To ignore global commands like :hg:`version` or :hg:`help`, you have
to specify them in your user configuration file.

To control whether the pager is used at all for an individual command,
you can use --pager=<value>:

  - use as needed: `auto`.
  - require the pager: `yes` or `on`.
  - suppress the pager: `no` or `off` (any unrecognized value
    will also work).

To globally turn off all attempts to use a pager, set::

  [ui]
  paginate = never

which will prevent the pager from running.
                                                                     usr/lib/python3/dist-packages/mercurial/helptext/patterns.txt                                       0000644 0000000 0000000 00000007347 14355257011 023205  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        Mercurial accepts several notations for identifying one or more files
at a time.

By default, Mercurial treats filenames verbatim without pattern
matching, relative to the current working directory. Note that your
system shell might perform pattern matching of its own before passing
filenames into Mercurial.

Alternate pattern notations must be specified explicitly.

.. note::

  Patterns specified in ``.hgignore`` are not rooted.
  Please see :hg:`help hgignore` for details.

To use a plain path name without any pattern matching, start it with
``path:``. These path names must completely match starting at the
current repository root, and when the path points to a directory, it is matched
recursively. To match all files in a directory non-recursively (not including
any files in subdirectories), ``rootfilesin:`` can be used, specifying an
absolute path (relative to the repository root).

To use an extended glob, start a name with ``glob:``. Globs are rooted
at the current directory; a glob such as ``*.c`` will only match files
in the current directory ending with ``.c``. ``rootglob:`` can be used
instead of ``glob:`` for a glob that is rooted at the root of the
repository.

The supported glob syntax extensions are ``**`` to match any string
across path separators and ``{a,b}`` to mean "a or b".

To use a Perl/Python regular expression, start a name with ``re:``.
Regexp pattern matching is anchored at the root of the repository.

To read name patterns from a file, use ``listfile:`` or ``listfile0:``.
The latter expects null delimited patterns while the former expects line
feeds. Each string read from the file is itself treated as a file
pattern.

To read a set of patterns from a file, use ``include:`` or ``subinclude:``.
``include:`` will use all the patterns from the given file and treat them as if
they had been passed in manually.  ``subinclude:`` will only apply the patterns
against files that are under the subinclude file's directory. See :hg:`help
hgignore` for details on the format of these files.

All patterns, except for ``glob:`` specified in command line (not for
``-I`` or ``-X`` options), can match also against directories: files
under matched directories are treated as matched.
For ``-I`` and ``-X`` options, ``glob:`` will match directories recursively.

Plain examples::

  path:foo/bar        a name bar in a directory named foo in the root
                      of the repository
  path:path:name      a file or directory named "path:name"
  rootfilesin:foo/bar the files in a directory called foo/bar, but not any files
                      in its subdirectories and not a file bar in directory foo

Glob examples::

  glob:*.c       any name ending in ".c" in the current directory
  *.c            any name ending in ".c" in the current directory
  **.c           any name ending in ".c" in any subdirectory of the
                 current directory including itself.
  foo/*          any file in directory foo
  foo/**         any file in directory foo plus all its subdirectories,
                 recursively
  foo/*.c        any name ending in ".c" in the directory foo
  foo/**.c       any name ending in ".c" in any subdirectory of foo
                 including itself.
  rootglob:*.c   any name ending in ".c" in the root of the repository

Regexp examples::

  re:.*\.c$      any name ending in ".c", anywhere in the repository

File examples::

  listfile:list.txt  read list from list.txt with one file pattern per line
  listfile0:list.txt read list from list.txt with null byte delimiters

See also :hg:`help filesets`.

Include examples::

  include:path/to/mypatternfile    reads patterns to be applied to all paths
  subinclude:path/to/subignorefile reads patterns specifically for paths in the
                                   subdirectory
                                                                                                                                                                                                                                                                                         usr/lib/python3/dist-packages/mercurial/helptext/phases.txt                                         0000644 0000000 0000000 00000005744 14355257011 022627  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        What are phases?
================

Phases are a system for tracking which changesets have been or should
be shared. This helps prevent common mistakes when modifying history
(for instance, with the mq or rebase extensions).

Each changeset in a repository is in one of the following phases:

 - public : changeset is visible on a public server
 - draft : changeset is not yet published
 - secret : changeset should not be pushed, pulled, or cloned

These phases are ordered (public < draft < secret) and no changeset
can be in a lower phase than its ancestors. For instance, if a
changeset is public, all its ancestors are also public. Lastly,
changeset phases should only be changed towards the public phase.

How are phases managed?
=======================

For the most part, phases should work transparently. By default, a
changeset is created in the draft phase and is moved into the public
phase when it is pushed to another repository.

Once changesets become public, extensions like mq and rebase will
refuse to operate on them to prevent creating duplicate changesets.
Phases can also be manually manipulated with the :hg:`phase` command
if needed. See :hg:`help -v phase` for examples.

To make your commits secret by default, put this in your
configuration file::

  [phases]
  new-commit = secret

Phases and servers
==================

Normally, all servers are ``publishing`` by default. This means::

 - all draft changesets that are pulled or cloned appear in phase
 public on the client

 - all draft changesets that are pushed appear as public on both
 client and server

 - secret changesets are neither pushed, pulled, or cloned

.. note::

  Pulling a draft changeset from a publishing server does not mark it
  as public on the server side due to the read-only nature of pull.

Sometimes it may be desirable to push and pull changesets in the draft
phase to share unfinished work. This can be done by setting a
repository to disable publishing in its configuration file::

  [phases]
  publish = False

See :hg:`help config` for more information on configuration files.

.. note::

  Servers running older versions of Mercurial are treated as
  publishing.

.. note::

   Changesets in secret phase are not exchanged with the server. This
   applies to their content: file names, file contents, and changeset
   metadata. For technical reasons, the identifier (e.g. d825e4025e39)
   of the secret changeset may be communicated to the server.


Examples
========

 - list changesets in draft or secret phase::

     hg log -r "not public()"

 - change all secret changesets to draft::

     hg phase --draft "secret()"

 - forcibly move the current changeset and descendants from public to draft::

     hg phase --force --draft .

 - show a list of changeset revisions and each corresponding phase::

     hg log --template "{rev} {phase}\n"

 - resynchronize draft changesets relative to a remote repository::

     hg phase -fd "outgoing(URL)"

See :hg:`help phase` for more information on manually manipulating phases.
                            usr/lib/python3/dist-packages/mercurial/helptext/revisions.txt                                      0000644 0000000 0000000 00000015504 14355257011 023360  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        Mercurial supports several ways to specify revisions.

Specifying single revisions
===========================

A plain integer is treated as a revision number. Negative integers are
treated as sequential offsets from the tip, with -1 denoting the tip,
-2 denoting the revision prior to the tip, and so forth.

A 40-digit hexadecimal string is treated as a unique revision identifier.
A hexadecimal string less than 40 characters long is treated as a
unique revision identifier and is referred to as a short-form
identifier. A short-form identifier is only valid if it is the prefix
of exactly one full-length identifier.

Any other string is treated as a bookmark, tag, or branch name. A
bookmark is a movable pointer to a revision. A tag is a permanent name
associated with a revision. A branch name denotes the tipmost open branch head
of that branch - or if they are all closed, the tipmost closed head of the
branch. Bookmark, tag, and branch names must not contain the ":" character.

The reserved name "tip" always identifies the most recent revision.

The reserved name "null" indicates the null revision. This is the
revision of an empty repository, and the parent of revision 0.

The reserved name "." indicates the working directory parent. If no
working directory is checked out, it is equivalent to null. If an
uncommitted merge is in progress, "." is the revision of the first
parent.

Finally, commands that expect a single revision (like ``hg update``) also
accept revsets (see below for details). When given a revset, they use the
last revision of the revset. A few commands accept two single revisions
(like ``hg diff``). When given a revset, they use the first and the last
revisions of the revset.

Specifying multiple revisions
=============================

Mercurial supports a functional language for selecting a set of
revisions. Expressions in this language are called revsets.

The language supports a number of predicates which are joined by infix
operators. Parenthesis can be used for grouping.

Identifiers such as branch names may need quoting with single or
double quotes if they contain characters like ``-`` or if they match
one of the predefined predicates.

Special characters can be used in quoted identifiers by escaping them,
e.g., ``\n`` is interpreted as a newline. To prevent them from being
interpreted, strings can be prefixed with ``r``, e.g. ``r'...'``.

Operators
=========

There is a single prefix operator:

``not x``
  Changesets not in x. Short form is ``! x``.

These are the supported infix operators:

``x::y``
  A DAG range, meaning all changesets that are descendants of x and
  ancestors of y, including x and y themselves. If the first endpoint
  is left out, this is equivalent to ``ancestors(y)``, if the second
  is left out it is equivalent to ``descendants(x)``.

  An alternative syntax is ``x..y``.

``x:y``
  All changesets with revision numbers between x and y, both
  inclusive. Either endpoint can be left out, they default to 0 and
  tip.

``x and y``
  The intersection of changesets in x and y. Short form is ``x & y``.

``x or y``
  The union of changesets in x and y. There are two alternative short
  forms: ``x | y`` and ``x + y``.

``x - y``
  Changesets in x but not in y.

``x % y``
  Changesets that are ancestors of x but not ancestors of y (i.e. ::x - ::y).
  This is shorthand notation for ``only(x, y)`` (see below). The second
  argument is optional and, if left out, is equivalent to ``only(x)``.

``x^n``
  The nth parent of x, n == 0, 1, or 2.
  For n == 0, x; for n == 1, the first parent of each changeset in x;
  for n == 2, the second parent of changeset in x.

``x~n``
  The nth first ancestor of x; ``x~0`` is x; ``x~3`` is ``x^^^``.
  For n < 0, the nth unambiguous descendent of x.

``x ## y``
  Concatenate strings and identifiers into one string.

  All other prefix, infix and postfix operators have lower priority than
  ``##``. For example, ``a1 ## a2~2`` is equivalent to ``(a1 ## a2)~2``.

  For example::

    [revsetalias]
    issue(a1) = grep(r'\bissue[ :]?' ## a1 ## r'\b|\bbug\(' ## a1 ## r'\)')

  ``issue(1234)`` is equivalent to
  ``grep(r'\bissue[ :]?1234\b|\bbug\(1234\)')``
  in this case. This matches against all of "issue 1234", "issue:1234",
  "issue1234" and "bug(1234)".

There is a single postfix operator:

``x^``
  Equivalent to ``x^1``, the first parent of each changeset in x.

Patterns
========

Where noted, predicates that perform string matching can accept a pattern
string. The pattern may be either a literal, or a regular expression. If the
pattern starts with ``re:``, the remainder of the pattern is treated as a
regular expression. Otherwise, it is treated as a literal. To match a pattern
that actually starts with ``re:``, use the prefix ``literal:``.

Matching is case-sensitive, unless otherwise noted.  To perform a case-
insensitive match on a case-sensitive predicate, use a regular expression,
prefixed with ``(?i)``.

For example, ``tag(r're:(?i)release')`` matches "release" or "RELEASE"
or "Release", etc.

Predicates
==========

The following predicates are supported:

.. predicatesmarker

Aliases
=======

New predicates (known as "aliases") can be defined, using any combination of
existing predicates or other aliases. An alias definition looks like::

  <alias> = <definition>

in the ``revsetalias`` section of a Mercurial configuration file. Arguments
of the form `a1`, `a2`, etc. are substituted from the alias into the
definition.

For example,

::

  [revsetalias]
  h = heads()
  d(s) = sort(s, date)
  rs(s, k) = reverse(sort(s, k))

defines three aliases, ``h``, ``d``, and ``rs``. ``rs(0:tip, author)`` is
exactly equivalent to ``reverse(sort(0:tip, author))``.

Equivalents
===========

Command line equivalents for :hg:`log`::

  -f    ->  ::.
  -d x  ->  date(x)
  -k x  ->  keyword(x)
  -m    ->  merge()
  -u x  ->  user(x)
  -b x  ->  branch(x)
  -P x  ->  !::x
  -l x  ->  limit(expr, x)

Examples
========

Some sample queries:

- Changesets on the default branch::

    hg log -r "branch(default)"

- Changesets on the default branch since tag 1.5 (excluding merges)::

    hg log -r "branch(default) and 1.5:: and not merge()"

- Open branch heads::

    hg log -r "head() and not closed()"

- Changesets between tags 1.3 and 1.5 mentioning "bug" that affect
  ``hgext/*``::

    hg log -r "1.3::1.5 and keyword(bug) and file('hgext/*')"

- Changesets committed in May 2008, sorted by user::

    hg log -r "sort(date('May 2008'), user)"

- Changesets mentioning "bug" or "issue" that are not in a tagged
  release::

    hg log -r "(keyword(bug) or keyword(issue)) and not ancestors(tag())"

- Update to the commit that bookmark @ is pointing to, without activating the
  bookmark (this works because the last revision of the revset is used)::

    hg update :@

- Show diff between tags 1.3 and 1.5 (this works because the first and the
  last revisions of the revset are used)::

    hg diff -r 1.3::1.5
                                                                                                                                                                                            usr/lib/python3/dist-packages/mercurial/helptext/rust.txt                                           0000644 0000000 0000000 00000006151 14355257011 022332  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        Mercurial can be augmented with Rust extensions for speeding up certain
operations.

Compatibility
=============

Though the Rust extensions are only tested by the project under Linux, users of
MacOS, FreeBSD and other UNIX-likes have been using the Rust extensions. Your
mileage may vary, but by all means do give us feedback or signal your interest
for better support.

