Problem:    Clang gives an out of bounds warning.
Solution:   adjust conditional expression (John Marriott)
Files:      src/ui.c

Patch 8.2.5076
Problem:    Unnecessary code.
Solution:   Remove code and replace with function call. (closes #10552)
Files:      src/drawline.c, src/getchar.c

Patch 8.2.5077
Problem:    Various warnings from clang on MS-Windows.
Solution:   Avoid the warnings. (Yegappan Lakshmanan, closes #10553)
Files:      src/dosinst.c, src/dosinst.h, src/filepath.c, src/gui_w32.c,
            src/misc1.c, src/os_win32.c

Patch 8.2.5078
Problem:    Substitute test has a one second delay.
Solution:   Use ":silent!".  Add another test case. (closes #10558)
Files:      src/testdir/test_substitute.vim

Patch 8.2.5079
Problem:    DirChanged autocommand may use freed memory. (Shane-XB Qian)
Solution:   Free the memory later. (closes #10555)
Files:      src/ex_docmd.c, src/testdir/test_autocmd.vim

Patch 8.2.5080
Problem:    When indenting gets out of hand it is hard to stop.
Solution:   When line gets too long set got_int.
Files:      src/indent.c

Patch 8.2.5081
Problem:    Autocmd test fails on MS-Windows.
Solution:   Set shellslash to get forward slashes.
Files:      src/testdir/test_autocmd.vim

Patch 8.2.5082 (after 8.2.5080)
Problem:    Retab test fails.
Solution:   Disable the test for now.
Files:      src/testdir/test_retab.vim

Patch 8.2.5083
Problem:    Autocmd test still fails on MS-Windows.
Solution:   Change backward to forward slashes.
Files:      src/testdir/test_autocmd.vim

Patch 8.2.5084
Problem:    When the GUI shows a dialog tests get stuck.
Solution:   Add the --gui-dialog-file argument.
Files:      runtime/doc/starting.txt, src/Make_mvc.mak, src/gui.c, src/main.c,
            src/message.c, src/os_mswin.c, src/proto/gui.pro,
            src/proto/main.pro, src/structs.h, src/testdir/Make_dos.mak,
            src/testdir/Make_ming.mak, src/testdir/Makefile,
            src/testdir/runtest.vim, src/testdir/shared.vim

Patch 8.2.5085
Problem:    Gcc gives warning for signed/unsigned difference.
Solution:   Use a different pointer type. (John Marriott)
Files:      src/os_mswin.c

Patch 8.2.5086
Problem:    CI runs on Windows 2019.
Solution:   Switch to Windows 2022. (closes #10566)
Files:      .github/workflows/ci.yml

Patch 8.2.5087
Problem:    Cannot build with clang on MS-Windows.
Solution:   Add support for building with clang. (Yegappan Lakshmanan,
            closes #10557)
Files:      src/GvimExt/Make_ming.mak, src/INSTALLpc.txt,
            src/Make_cyg_ming.mak

Patch 8.2.5088
Problem:    Value of cmod_verbose is a bit complicated to use.
Solution:   Use zero for not set, value + 1 when set. (closes #10564)
Files:      src/ex_docmd.c, src/ex_getln.c, src/globals.h, src/structs.h

Patch 8.2.5089
Problem:    Some functions return a different value on failure.
Solution:   Initialize the return value earlier. (Yegappan Lakshmanan,
            closes #10568)
Files:      src/autocmd.c, src/dict.c, src/evalfunc.c, src/list.c

Patch 8.2.5090
Problem:    MS-Windows: vim.def is no longer used.
Solution:   Delete vim.def. (Ken Takata, closes #10569)
Files:      Filelist, Makefile, src/vim.def

Patch 8.2.5091
Problem:    Terminal test fails with some shell commands.
Solution:   Disable setting the window title. (closes #10530)
Files:      src/testdir/test_terminal.vim

Patch 8.2.5092
Problem:    Using "'<,'>" in Ex mode may compare unrelated pointers.
Solution:   Set eap->cmd to "+" only later.
Files:      src/ex_docmd.c

Patch 8.2.5093
Problem:    Error message for unknown command may mention the command twice.
            (Malcolm Rowe)
Solution:   Add the did_append_cmd flag. (closes #10570)
Files:      src/ex_docmd.c

Patch 8.2.5094
Problem:    MS-Windows GUI: empty command may cause a dialog.
Solution:   Delete the dialog file.  Improve the message.
Files:      src/testdir/runtest.vim, src/testdir/test_ex_mode.vim

Patch 8.2.5095
Problem:    Terminal test still fails with some shell commands.
Solution:   Disable setting the window title in the Vim instance running in a
            terminal window. (closes #10530)
Files:      src/testdir/test_terminal.vim

Patch 8.2.5096 (after 8.2.5095)
Problem:    Terminal test still fails with some shell commands.
Solution:   Add missing "call".  (closes #10530)
Files:      src/testdir/test_terminal.vim

Patch 8.2.5097
Problem:    Using uninitialized memory when using 'listchars'.
Solution:   Use the length returned by mb_char2bytes(). (closes #10576)
Files:      src/message.c

Patch 8.2.5098
Problem:    Spelldump test sometimes hangs.
Solution:   Catch the problem of the spell file not being found to avoid
            hanging in the download dialog.
Files:      src/testdir/test_spell.vim

Patch 8.2.5099
Problem:    Some terminal tests are not retried.
Solution:   Mark terminal tests as flaky.
Files:      src/testdir/test_terminal.vim

Patch 8.2.5100
Problem:    Memory usage tests are not retried.
Solution:   Mark memory usage tests as flaky.
Files:      src/testdir/test_memory_usage.vim

Patch 8.2.5101
Problem:    MS-Windows with MinGW: $CC may be "cc" instead of "gcc".
Solution:   Set $CC if it is not matching "clang". (Yegappan Lakshmanan,
            closes #10578)
Files:      src/INSTALLpc.txt, src/Make_cyg_ming.mak

Patch 8.2.5102
Problem:    Interrupt not caught in test.
Solution:   Consider an exception thrown in the current try/catch when got_int
            is set.  Also catch early exit when not using try/catch.
Files:      src/indent.c, src/testing.c, src/testdir/test_retab.vim,
            src/testdir/runtest.vim

Patch 8.2.5103
Problem:    Build fails with small features.
Solution:   Add #ifdef.  Skip test on MS-Windows.
Files:      src/indent.c, src/testdir/test_retab.vim

Patch 8.2.5104 (after 8.2.5103)
Problem:    Test hangs on MS-Windows.
Solution:   Skip another test on MS-Windows.
Files:      src/testdir/test_retab.vim

Patch 8.2.5105 (after 8.2.5104)
Problem:    Test still hangs on MS-Windows.
Solution:   Skip "nocatch" test the right way.
Files:      src/testdir/test_retab.vim

Patch 8.2.5106
Problem:    Default cmdwin mappings are re-mappable.
Solution:   Make the default mappings not re-mappable. (closes #10580)  Use
            symbols for the first do_map() argument.
Files:      src/vim.h, src/ex_getln.c, src/map.c, src/proto/map.pro,
            src/digraph.c, src/netbeans.c

Patch 8.2.5107
Problem:    Some callers of rettv_list_alloc() check for not OK. (Christ van
            Willegen)
Solution:   Use "==" instead of "!=" when checking the return value.
Files:      src/evalbuffer.c, src/channel.c, src/cmdexpand.c, src/evalfunc.c,
            src/evalwindow.c, src/insexpand.c, src/job.c, src/list.c,
            src/map.c, src/menu.c, src/mouse.c, src/move.c, src/sign.c,
            src/textprop.c, src/term.c, src/time.c

Patch 8.2.5108
Problem:    Retab test disabled because it hangs on MS-Windows.
Solution:   Also set got_int at the other place an overlong text is detected.
Files:      src/indent.c, src/testdir/test_retab.vim

Patch 8.2.5109
Problem:    Mode not updated after CTRL-O CTRL-C in Insert mode.
Solution:   Set redraw_mode and use it. (closes #10581)
Files:      src/main.c, src/normal.c, src/testdir/test_normal.vim,
            src/testdir/dumps/Test_mode_updated_1.dump

Patch 8.2.5110
Problem:    Icon filetype not recognized from the first line.
Solution:   Add a check for the first line. (Doug Kearns)
Files:      runtime/autoload/dist/script.vim, src/testdir/test_filetype.vim

Patch 8.2.5111
Problem:    No test for --gui-dialog-file.
Solution:   Add a test.
Files:      src/testdir/test_gui.vim

Patch 8.2.5112 (after 8.2.5111)
Problem:    Gui test hangs on MS-Windows.
Solution:   Use "!start" to start Vim.
Files:      src/testdir/test_gui.vim

Patch 8.2.5113
Problem:    Timer becomes invalid after fork/exec, :gui gives errors. (Gabriel
            Dupras)
Solution:   Delete the timer befor forking. (closes #10584)
Files:      src/os_unix.c, src/proto/os_unix.pro, src/gui.c

Patch 8.2.5114
Problem:    Time limit on searchpair() does not work properly.
Solution:   Set the time limit once instead of for each regexp. (closes #10562)
Files:      src/search.c, src/evalfunc.c, src/testdir/test_search.vim

Patch 8.2.5115
Problem:    Search timeout is overrun with some patterns.
Solution:   Check for timeout in more places.  Make the flag volatile and
            atomic.  Use assert_inrange() to see what happened.
Files:      src/regexp_nfa.c, src/regexp_bt.c, src/regexp.c, src/os_unix.c,
            src/proto/os_unix.pro, src/testdir/test_search.vim

Patch 8.2.5116
Problem:    "limit" option of matchfuzzy() not always respected.
Solution:   Remove "else". (Kazuyuki Miyagi, closes #10586)
Files:      runtime/doc/builtin.txt, src/search.c,
            src/testdir/test_matchfuzzy.vim

Patch 8.2.5117
Problem:    Crash when calling a Lua callback from a :def function. (Bohdan
            Makohin)
Solution:   Handle FC_CFUNC in call_user_func_check(). (closes #10587)
Files:      src/userfunc.c, src/testdir/test_lua.vim

Patch 8.2.5118
Problem:    MS-Windows: sending a message to another Vim may hang if that Vim
            is halted.
Solution:   Add a timeout to serverSendToVim(). (Ken Takata, closes #10585)
Files:      runtime/pack/dist/opt/editexisting/plugin/editexisting.vim,
            src/os_mswin.c

Patch 8.2.5119
Problem:    CI uses cache v2.
Solution:   Use cache v3. (closes #10588)
Files:      .github/workflows/ci.yml

Patch 8.2.5120
Problem:    Searching for quotes may go over the end of the line.
Solution:   Check for running into the NUL.
Files:      src/textobject.c

Patch 8.2.5121
Problem:    Interrupt test sometimes fails.
Solution:   Use a different file name.
Files:      src/testdir/test_interrupt.vim

Patch 8.2.5122
Problem:    Lisp indenting my run over the end of the line.
Solution:   Check for NUL earlier.
Files:      src/indent.c, src/testdir/test_indent.vim

Patch 8.2.5123
Problem:    Using invalid index when looking for spell suggestions.
Solution:   Do not decrement the index when it is zero.
Files:      src/spellsuggest.c, src/testdir/test_spell.vim

Patch 8.2.5124
Problem:    When syntax timeout test fails it does not show the time.
Solution:   Use assert_inrange().
Files:      src/testdir/test_syntax.vim

Patch 8.2.5125
Problem:    MS-Windows: warnings from MinGW compiler.
Solution:   Use "volatile". (Yasuhiro Matsumoto, closes #10589)  Initialize
            variable.
Files:      src/os_win32.c, src/proto/os_win32.pro, src/map.c

Patch 8.2.5126
Problem:    Substitute may overrun destination buffer.
Solution:   Disallow switching buffers in a substitute expression.
Files:      src/ex_docmd.c, src/testdir/test_substitute.vim

Patch 8.2.5127
Problem:    Using assert_true() does not show value on failure.
Solution:   Use assert_inrange(). (closes #10593)
Files:      src/testdir/test_channel.vim, src/testdir/test_hlsearch.vim

Patch 8.2.5128
Problem:    Syntax highlighting disabled when using synID() in searchpair()
            skip expression and it times out. (Jaehwang Jung)
Solution:   Add the redrawtime_limit_set flag. (closes #10562)
Files:      src/globals.h, src/drawscreen.c, src/syntax.c

Patch 8.2.5129
Problem:    Timeout handling is not optimal.
Solution:   Avoid setting timeout_flag twice.  Adjust the pointer when
            stopping the regexp timeout.  Adjust variable name.
Files:      src/os_unix.c, src/os_win32.c, src/regexp.c

Patch 8.2.5130
Problem:    Edit test for mode message fails when using valgrind.
Solution:   Use WaitForAssert().  Run beep test later.
Files:      src/testdir/test_edit.vim

Patch 8.2.5131
Problem:    Timeout implementation is not optimal.
Solution:   Further improvements for timeouts.  Add a test for searchpair()
            timeout. (partly by Paul Ollis)
Files:      src/configure.ac, src/auto/configure,
            src/testdir/test_hlsearch.vim, src/testdir/test_search.vim

Patch 8.2.5132
Problem:    :mkview test doesn't test much.
Solution:   Save the view with the folds closed. (James McCoy, closes #10596)
Files:      src/testdir/test_mksession.vim

Patch 8.2.5133
Problem:    MacOS: build fails.
Solution:   Remove "#if 0" from timer_delete().
Files:      src/os_macosx.m

Patch 8.2.5134
Problem:    Function has confusing name.
Solution:   Rename tgetent_error() to invoke_tgetent().
Files:      src/term.c

Patch 8.2.5135
Problem:    Running configure gives warnings for main() return type.
Solution:   Specify "int" return type.  Avoid a few more warnings.
Files:      src/configure.ac, src/auto/configure

Patch 8.2.5136
Problem:    Debugger test fails when run with valgrind.
Solution:   Wait longer when using valgrind.
Files:      src/testdir/shared.vim, src/testdir/test_debugger.vim,
            src/testdir/test_search.vim

Patch 8.2.5137
Problem:    Cannot build without the +channel feature. (Dominique Pellé)
Solution:   Add #ifdef around ch_log() calls. (closes #10598)
Files:      src/os_unix.c, src/regexp_nfa.c, src/regexp_bt.c

Patch 8.2.5138
Problem:    Various small issues.
Solution:   Various small improvements.
Files:      src/filepath.c, src/job.c, src/mark.c, src/move.c,
            src/popupwin.c, src/testdir/test_filetype.vim

Patch 8.2.5139
Problem:    TIME_WITH_SYS_TIME is no longer supported by autoconf.
Solution:   Always include time.h.
Files:      src/os_unix.h

Patch 8.2.5140
Problem:    Seachpair timeout test is flaky.
Solution:   Mark the test as flaky so it is retried.
Files:      src/testdir/test_search.vim

Patch 8.2.5141
Problem:    Using "volatile int" in a signal handler might be wrong.
Solution:   Use "volatile sig_atomic_t".
Files:      src/os_unix.c, src/proto/os_unix.pro, src/os_win32.c,
            src/proto/os_win32.pro, src/regexp.c,

Patch 8.2.5142
Problem:    Startup test fails if there is a status bar at the top of the
            screen. (Ernie Rael)
Solution:   Use a larger vertical offset in the test.
Files:      src/testdir/test_startup.vim

Patch 8.2.5143
Problem:    Some tests fail when using valgrind. Spurious leak reports.
Solution:   Use WaitForAssert().  Avoid failing fork/exec.  Skip tests where a
            job is killed when running valgrind.
Files:      src/testdir/test_iminsert.vim, src/testdir/test_popup.vim,
            src/testdir/test_cscope.vim, src/testdir/test_channel.vim

Patch 8.2.5144
Problem:    With 'lazyredraw' set completion menu may be displayed wrong.
Solution:   When the popup menu is visible do not insert a screen line.
            (closes #10601)
Files:      src/screen.c

Patch 8.2.5145
Problem:    Exit test causes spurious valgrind reports.
Solution:   Skip test.  Add CheckNotValgrind.
Files:      src/testdir/test_exit.vim, src/testdir/check.vim,
            src/testdir/test_channel.vim

Patch 8.2.5146
Problem:    Memory leak when substitute expression nests.
Solution:   Use an array of expression results.
Files:      src/alloc.c, src/regexp.c, src/proto/regexp.pro,
            src/errors.h, src/ex_cmds.c, src/testdir/test_substitute.vim

Patch 8.2.5147
Problem:    Flaky test always fails on retry.
Solution:   Delete the created function.
Files:      src/testdir/test_search.vim

Patch 8.2.5148
Problem:    Invalid memory access when using an expression on the command line.
Solution:   Make sure the position does not go negative.
Files:      src/ex_getln.c, src/testdir/test_cmdline.vim

Patch 8.2.5149 (after 8.2.5148)
Problem:    Cannot build without the +eval feature. (Tony Mechelynck)
Solution:   Add #ifdefs.
Files:      src/ex_getln.c

Patch 8.2.5150
Problem:    Read past the end of the first line with ":0;'{".
Solution:   When on line zero check the column is valid for line one.
Files:      src/ex_docmd.c, src/testdir/test_cmdline.vim

Patch 8.2.5151
Problem:    Reading beyond the end of the line with lisp indenting.
Solution:   Avoid going over the NUL at the end of the line.
Files:      src/indent.c, src/testdir/test_lispwords.vim

Patch 8.2.5152
Problem:    search() gets stuck with "c" and skip evaluates to true.
Solution:   Reset the SEARCH_START option. (closes #10608)
Files:      src/evalfunc.c, src/testdir/test_syntax.vim

Patch 8.2.5153
Problem:    "make uninstall" does not remove colors/lists.
Solution:   Add a line to the Makefile. (closes #10609)
Files:      src/Makefile

Patch 8.2.5154
Problem:    Still mentioning version8, some cosmetic issues.
Solution:   Prefer mentioning version9, cosmetic improvements.
Files:      src/version.c, src/if_tcl.c, src/regexp.c,
            src/testdir/test_gui.vim, src/os_unix.c, Filelist, src/Makefile

Patch 8.2.5155
Problem:    In diff mode windows may get out of sync. (Gary Johnson)
Solution:   Avoid that the other window scrolls for 'cursorbind'.
Files:      src/move.c, src/testdir/test_diffmode.vim,
            src/testdir/dumps/Test_diff_scroll_1.dump,
            src/testdir/dumps/Test_diff_scroll_2.dump

Patch 8.2.5156
Problem:    Search timeout test often fails with FreeBSD.
Solution:   Double the maximum time.
Files:      src/testdir/test_search.vim

Patch 8.2.5157
Problem:    MS-Windows GUI: CTRL-key combinations do not always work.
Solution:   Handle special key combinations better. (closes #10613,
            closes #10602, closes #10579)
Files:      src/gui_w32.c

Patch 8.2.5158
Problem:    TSTP and INT signal tests are not run with valgrind.
Solution:   Sleep a bit longer. (closes #10614)
Files:      src/testdir/test_signals.vim

Patch 8.2.5159 (after 8.2.5157)
Problem:    Fix for CTRL-key combinations causes more problems than it solves.
Solution:   Roll back the change.
Files:      src/gui_w32.c

Patch 8.2.5160
Problem:    Accessing invalid memory after changing terminal size.
Solution:   Adjust cmdline_row and msg_row to the value of Rows.
Files:      src/term.c

Patch 8.2.5161
Problem:    Might still access invalid memory.
Solution:   Add extra check for negative value.
Files:      src/message.c

Patch 8.2.5162
Problem:    Reading before the start of the line with BS in Replace mode.
Solution:   Check the cursor column is more than zero.
Files:      src/edit.c

Patch 8.2.5163
Problem:    Crash when deleting buffers in diff mode.
Solution:   Recompute diffs later.  Skip window without a valid buffer.
Files:      src/diff.c, src/testdir/test_diffmode.vim

Patch 8.2.5164
Problem:    Invalid memory access after diff buffer manipulations.
Solution:   Use zero offset when change removes all lines in a diff block.
Files:      src/diff.c, src/testdir/test_diffmode.vim

Patch 8.2.5165
Problem:    Import test fails because 'diffexpr' isn't reset.
Solution:   Reset 'diffexpr'.
Files:      src/testdir/test_vim9_import.vim

Patch 8.2.5166
Problem:    Test for DiffUpdated fails.
Solution:   Also accept a count of two.
Files:      src/testdir/test_diffmode.vim

Patch 8.2.5167
Problem:    get(Fn, 'name') on funcref returns special byte code.
Solution:   Use the printable name.
Files:      src/evalfunc.c, src/testdir/test_getvar.vim

Patch 8.2.5168
Problem:    Cannot build with Python 3.11.
Solution:   Adjust define for _PyObject_TypeCheck. (Zdenek Dohnal,
            closes #10627)
Files:      src/if_python3.c

Patch 8.2.5169
Problem:    Nested :source may use NULL pointer.
Solution:   Do not use the NULL pointer.
Files:      src/eval.c, src/testdir/test_vimscript.vim

Patch 8.2.5170
Problem:    Tiny issues.
Solution:   Tiny improvements.
Files:      src/misc1.c, src/screen.c, src/vim.h

Patch 8.2.5171
Problem:    Dependencies and proto files are outdated.
Solution:   Update dependencies and proto files.  Avoid errors.
Files:      src/Makefile, src/gui_w32.c, src/os_mswin.c, src/proto/buffer.pro,
            src/proto/cmdexpand.pro, src/proto/getchar.pro,
            src/proto/help.pro, src/proto/mbyte.pro, src/proto/option.pro,
            src/proto/screen.pro, src/proto/syntax.pro,
            src/proto/textformat.pro, src/proto/textobject.pro,
            src/proto/time.pro, src/proto/gui_x11.pro, src/proto/if_tcl.pro,
            src/proto/os_mswin.pro

Patch 8.2.5172
Problem:    "make menu" still uses legacy script.
Solution:   make menu generation script use Vim9 script, fix errors.
Files:      runtime/makemenu.vim


 vim:tw=78:ts=8:noet:ft=help:norl:
                                                                                                                                                                                                                                                                                                                                                                                                                                             usr/share/vim/vim90/doc/vi_diff.txt                                                                 0000644 0000000 0000000 00000160074 14424703754 015654  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        *vi_diff.txt*   For Vim version 9.0.  Last change: 2022 Apr 03


		  VIM REFERENCE MANUAL    by Bram Moolenaar


Differences between Vim and Vi				*vi-differences*

This file lists the differences between Vim and Vi/Ex and gives an overview of
what is in Vim that is not in Vi.

Vim is mostly POSIX 1003.2-1 compliant.  The only command known to be missing
is ":open".  There are probably a lot of small differences (either because Vim
is missing something or because Posix is beside the mark).

1. Simulated command			|simulated-command|
2. Missing options			|missing-options|
3. Limits				|limits|
4. The most interesting additions	|vim-additions|
5. Other vim features			|other-features|
6. Supported Vi features		|vi-features|
7. Command-line arguments		|cmdline-arguments|
8. POSIX compliance			|posix-compliance|

==============================================================================
1. Simulated command					*simulated-command*

This command is in Vi, but Vim only simulates it:

							*:o* *:op* *:open*
:[range]o[pen]			Works like |:visual|: end Ex mode.
				{Vi: start editing in open mode}

:[range]o[pen] /pattern/	As above, additionally move the cursor to the
				column where "pattern" matches in the cursor
				line.

Vim does not support open mode, since it's not really useful.  For those
situations where ":open" would start open mode Vim will leave Ex mode, which
allows executing the same commands, but updates the whole screen instead of
only one line.

==============================================================================
2. Missing options					*missing-options*

These options are in the Unix Vi, but not in Vim.  If you try to set one of
them you won't get an error message, but the value is not used and cannot be
printed.

autoprint (ap)		boolean	(default on)		*'autoprint'* *'ap'*
beautify (bf)		boolean	(default off)		*'beautify'* *'bf'*
flash (fl)		boolean	(default ??)		*'flash'* *'fl'*
graphic (gr)		boolean	(default off)		*'graphic'* *'gr'*
hardtabs (ht)		number	(default 8)		*'hardtabs'* *'ht'*
	number of spaces that a <Tab> moves on the display
mesg			boolean	(default on)		*'mesg'*
novice			boolean	(default off)		*'novice'*
open			boolean	(default on)		*'open'*
optimize (op)		boolean	(default off)		*'optimize'* *'op'*
redraw			boolean	(default off)		*'redraw'*
slowopen (slow)		boolean	(default off)		*'slowopen'* *'slow'*
sourceany		boolean	(default off)		*'sourceany'*
w300			number	(default 23)		*'w300'*
w1200			number	(default 23)		*'w1200'*
w9600			number	(default 23)		*'w9600'*

Vi did not allow for changing the termcap entries, you would have to exit Vi,
edit the termcap entry and try again.  Vim has the |terminal-options|.

==============================================================================
3. Limits						*limits*

Vim has only a few limits for the files that can be edited {Vi: can not handle
<Nul> characters and characters above 128, has limited line length, many other
limits}.

Maximum line length	   2147483647 characters.  Longer lines are split.
Maximum number of lines	   2147483647 lines.
Maximum file size	   2147483647 bytes (2 Gbyte) when a long integer is
			   32 bits.  Much more for 64 bit longs.  Also limited
			   by available disk space for the |swap-file|.
							*E75*
Length of a file path	   Unix and Win32: 1024 characters, otherwise 256
			   characters (or as much as the system supports).
Length of an expanded string option
			   Unix and Win32: 1024 characters, otherwise 256
			   characters
Maximum display width	   Unix and Win32: 1024 characters, otherwise 255
			   characters
Maximum lhs of a mapping   50 characters.
Number of different highlighting types: over 30000
Range of a Number variable:  -2147483648 to 2147483647 (might be more on 64
			   bit systems)
Maximum length of a line in a tags file: 512 bytes.

Information for undo and text in registers is kept in memory, thus when making
(big) changes the amount of (virtual) memory available limits the number of
undo levels and the text that can be kept in registers.  Other things are also
kept in memory:  Command-line history, error messages for Quickfix mode, etc.

Memory usage limits
-------------------

The option 'maxmem' ('mm') is used to set the maximum memory used for one
buffer (in kilobytes).  'maxmemtot' is used to set the maximum memory used for
all buffers (in kilobytes).  The defaults depend on the system used.  For the
Amiga, 'maxmemtot' is set depending on the amount of memory available.
These are not hard limits, but tell Vim when to move text into a swap file.
If you don't like Vim to swap to a file, set 'maxmem' and 'maxmemtot' to a
very large value.  The swap file will then only be used for recovery.  If you
don't want a swap file at all, set 'updatecount' to 0, or use the "-n"
argument when starting Vim.

==============================================================================
4. The most interesting additions			*vim-additions*

Vi compatibility.					|'compatible'|
	Although Vim is 99% Vi compatible, some things in Vi can be
	considered to be a bug, or at least need improvement.  But still, Vim
	starts in a mode which behaves like the "real" Vi as much as possible.
	To make Vim behave a little bit better, try resetting the 'compatible'
	option:
		:set nocompatible
	Or start Vim with the "-N" argument:
		vim -N
	Vim starts with 'nocompatible' automatically if you have a .vimrc
	file.  See |startup|.
	The 'cpoptions' option can be used to set Vi compatibility on/off for
	a number of specific items.

Support for different systems.
	Vim can be used on:
	- All Unix systems (it works on all systems it was tested on, although
	  the GUI and Perl interface may not work everywhere).
	- Amiga (500, 1000, 1200, 2000, 3000, 4000, ...).
	- MS-Windows
	- VMS
	- Macintosh
	- IBM OS/390
	Note that on some systems features need to be disabled to reduce
	resource usage.  For some outdated systems you need to use an older
	Vim version.

Multi level persistent undo.					|undo|
	'u' goes backward in time, 'CTRL-R' goes forward again.  Set option
	'undolevels' to the number of changes to be remembered (default 1000).
	Set 'undolevels' to 0 for a Vi-compatible one level undo.  Set it to
	-1 for no undo at all.
	When all changes in a buffer have been undone, the buffer is not
	considered changed anymore.  You can exit it with :q, without <!>.
	When undoing a few changes and then making a new change Vim will
	create a branch in the undo tree.  This means you can go back to any
	state of the text, there is no risk of a change causing text to be
	lost forever. |undo-tree|
	The undo information is stored in a file when the 'undofile' option is
	set.  This means you can exit Vim, start Vim on a previously edited
	file and undo changes that were made before exiting Vim.

Graphical User Interface (GUI).				|gui|
	Included support for GUI: menu's, mouse, scrollbars, etc.  You can
	define your own menus.  Better support for CTRL/SHIFT/ALT keys in
	combination with special keys and mouse.  Supported for various
	platforms, such as X11 with Motif, GTK, Win32 (Windows XP and later),
	Amiga and Macintosh.

Multiple windows and buffers.				|windows.txt|
	Vim can split the screen into several windows, each editing a
	different buffer or the same buffer at a different location.  Buffers
	can still be loaded (and changed) but not displayed in a window.  This
	is called a hidden buffer.  Many commands and options have been added
	for this facility.
	Vim can also use multiple tab pages, each with one or more windows.  A
	line with tab labels can be used to quickly switch between these pages.
	|tab-page|

Terminal window.					|:terminal|
	Vim can create a window in which a terminal emulator runs.  This can
	be used to execute an arbitrary command, a shell or a debugger.

Syntax highlighting.					|:syntax|
	Vim can highlight keywords, patterns and other things.  This is
	defined by a number of |:syntax| commands, and can be made to
	highlight most languages and file types.  A number of files are
	included for highlighting the most common languages, like C, C++,
	Java, Pascal, Makefiles, shell scripts, etc.  The colors used for
	highlighting can be defined for ordinary terminals, color terminals
	and the GUI with the |:highlight| command.  A convenient way to do
	this is using a |:colorscheme| command.
	The highlighted text can be exported as HTML. |convert-to-HTML|
	Other items that can be highlighted are matches with the search string
	|'hlsearch'|, matching parens |matchparen| and the cursor line and
	column |'cursorline'| |'cursorcolumn'|.

Text properties						|textprop.txt|
	Vim supports highlighting text by a plugin.  Property types can be
	specified with |prop_type_add()| and properties can be placed with
	|prop_add()|.

Spell checking.						|spell|
	When the 'spell' option is set Vim will highlight spelling mistakes.
	About 50 languages are currently supported, selected with the
	'spelllang' option.  In source code only comments and strings are
	checked for spelling.

Folding.						|folding|
	A range of lines can be shown as one "folded" line.  This allows
	overviewing a file and moving blocks of text around quickly.
	Folds can be created manually, from the syntax of the file, by indent,
	etc.

Diff mode.						|diff|
	Vim can show two versions of a file with the differences highlighted.
	Parts of the text that are equal are folded away.  Commands can be
	used to move text from one version to the other.

Plugins.						|add-plugin|
	The functionality can be extended by dropping a plugin file in the
	right directory.  That's an easy way to start using Vim scripts
	written by others.  Plugins can be for all kind of files, or
	specifically for a filetype.
	Packages make this even easier. |packages|

Asynchronous communication and timers.			|channel| |job| |timer|
	Vim can exchange messages with other processes in the background.
	This makes it possible to have servers do work and send back the
	results to Vim. |channel|
	Vim can start a job, communicate with it and stop it. |job|
	Timers can fire once or repeatedly and invoke a function to do any
	work. |timer|

Repeat a series of commands.				|q|
	"q{c}" starts recording typed characters into named register {c}.
	A subsequent "q" stops recording.  The register can then be executed
	with the "@{c}" command.  This is very useful to repeat a complex
	action.

Flexible insert mode.					|ins-special-special|
	The arrow keys can be used in insert mode to move around in the file.
	This breaks the insert in two parts as far as undo and redo is
	concerned.

	CTRL-O can be used to execute a single Normal mode command.  This is
	almost the same as hitting <Esc>, typing the command and doing |a|.

Visual mode.						|Visual-mode|
	Visual mode can be used to first highlight a piece of text and then
	give a command to do something with it.  This is an (easy to use)
	alternative to first giving the operator and then moving to the end of
	the text to be operated upon.
	|v| and |V| are used to start Visual mode.  |v| works on characters
	and |V| on lines.  Move the cursor to extend the Visual area.  It is
	shown highlighted on the screen.  By typing "o" the other end of the
	Visual area can be moved.  The Visual area can be affected by an
	operator:
		d	delete
		c	change
		y	yank
		> or <	insert or delete indent
		!	filter through external program
		=	filter through indent
		:	start |:| command for the Visual lines.
		gq	format text to 'textwidth' columns
		J	join lines
		~	swap case
		u	make lowercase
		U	make uppercase
	{Vi has no Visual mode, the name "visual" is used for Normal mode, to
	distinguish it from Ex mode}

Block operators.					|visual-block|
	With Visual mode a rectangular block of text can be selected.  Start
	Visual mode with CTRL-V.  The block can be deleted ("d"), yanked ("y")
	or its case can be changed ("~", "u" and "U").  A deleted or yanked
	block can be put into the text with the "p" and "P" commands.

Help system.						|:help|
	Help is displayed in a window.  The usual commands can be used to
	move around, search for a string, etc.  Tags can be used to jump
	around in the help files, just like hypertext links.  The |:help|
	command takes an argument to quickly jump to the info on a subject.
	<F1> is the quick access to the help system.  The name of the help
	index file can be set with the 'helpfile' option.

Command-line editing and history.			|cmdline-editing|
	You can insert or delete at any place in the command-line using the
	cursor keys.  The right/left cursor keys can be used to move
	forward/backward one character.  The shifted right/left cursor keys
	can be used to move forward/backward one word.  CTRL-B/CTRL-E can be
	used to go to the begin/end of the command-line.
	{Vi: can only alter the last character in the line}
	{Vi: when hitting <Esc> the command-line is executed.  This is
	unexpected for most people; therefore it was changed in Vim.  But when
	the <Esc> is part of a mapping, the command-line is executed.  If you
	want the Vi behaviour also when typing <Esc>, use ":cmap ^V<Esc>
	^V^M"}
							|cmdline-history|
	The command-lines are remembered.  The up/down cursor keys can be used
	to recall previous command-lines.  The 'history' option can be set to
	the number of lines that will be remembered.  There is a separate
	history for commands and for search patterns.

Command-line completion.				|cmdline-completion|
	While entering a command-line (on the bottom line of the screen)
	<Tab> can be typed to complete
	   what		example		~
	- command	:e<Tab>
	- tag		:ta scr<Tab>
	- option	:set sc<Tab>
	- option value  :set hf=<Tab>
	- file name	:e ve<Tab>
	- etc.

	If there are multiple matches, CTRL-N (next) and CTRL-P (previous)
	will walk through the matches.  <Tab> works like CTRL-N, but wraps
	around to the first match.

	The 'wildchar' option can be set to the character for command-line
	completion, <Tab> is the default.  CTRL-D can be typed after an
	(incomplete) wildcard; all matches will be listed.  CTRL-A will insert
	all matches.  CTRL-L will insert the longest common part of the
	matches.

Insert-mode completion.					|ins-completion|
	In Insert mode the CTRL-N and CTRL-P keys can be used to complete a
	word that appears elsewhere.	|i_CTRL-N|
	With CTRL-X another mode is entered, through which completion can be
	done for:
	|i_CTRL-X_CTRL-F|	file names
	|i_CTRL-X_CTRL-K|	words from 'dictionary' files
	|i_CTRL-X_CTRL-T|	words from 'thesaurus' files
	|i_CTRL-X_CTRL-I|	words from included files
	|i_CTRL-X_CTRL-L|	whole lines
	|i_CTRL-X_CTRL-]|	words from the tags file
	|i_CTRL-X_CTRL-D|	definitions or macros
	|i_CTRL-X_CTRL-O|	Omni completion: clever completion
				specifically for a file type
	etc.

Long line support.					|'wrap'| |'linebreak'|
	If the 'wrap' option is off, long lines will not wrap and only part
	of them will be shown.  When the cursor is moved to a part that is not
	shown, the screen will scroll horizontally.  The minimum number of
	columns to scroll can be set with the 'sidescroll' option.  The |zh|
	and |zl| commands can be used to scroll sideways.
	Alternatively, long lines are broken in between words when the
	'linebreak' option is set.  This allows editing a single-line
	paragraph conveniently (e.g. when the text is later read into a DTP
	program).  Move the cursor up/down with the |gk| and |gj| commands.

Text formatting.					|formatting|
	The 'textwidth' option can be used to automatically limit the line
	length.  This supplements the 'wrapmargin' option of Vi, which was not
	very useful.  The |gq| operator can be used to format a piece of text
	(for example, |gqap| formats the current paragraph).  Commands for
	text alignment: |:center|, |:left| and |:right|.

Extended search patterns.				|pattern|
	There are many extra items to match various text items.  Examples:
	A "\n" can be used in a search pattern to match a line break.
	"x\{2,4}" matches "x" 2 to 4 times.
	"\s" matches a white space character.

Directory, remote and archive browsing.			|netrw|
	Vim can browse the file system.  Simply edit a directory.  Move around
	in the list with the usual commands and press <Enter> to go to the
	directory or file under the cursor.
	This also works for remote files over ftp, http, ssh, etc.
	Zip and tar archives can also be browsed. |tar| |zip|

Edit-compile-edit speedup.				|quickfix|
	The |:make| command can be used to run the compilation and jump to the
	first error.  A file with compiler error messages is interpreted.  Vim
	jumps to the first error.

	Each line in the error file is scanned for the name of a file, line
	number and error message.  The 'errorformat' option can be set to a
	list of scanf-like strings to handle output from many compilers.

	The |:cn| command can be used to jump to the next error.
	|:cl| lists all the error messages.  Other commands are available.
	The 'makeef' option has the name of the file with error messages.
	The 'makeprg' option contains the name of the program to be executed
	with the |:make| command.
	The 'shellpipe' option contains the string to be used to put the
	output of the compiler into the errorfile.

Finding matches in files.				|:vimgrep|
	Vim can search for a pattern in multiple files.  This uses the
	advanced Vim regexp pattern, works on all systems and also works to
	search in compressed files.

Improved indenting for programs.			|'cindent'|
	When the 'cindent' option is on the indent of each line is
	automatically adjusted.  C syntax is mostly recognized.  The indent
	for various styles can be set with 'cinoptions'.  The keys to trigger
	indenting can be set with 'cinkeys'.

	Comments can be automatically formatted.  The 'comments' option can be
	set to the characters that start and end a comment.  This works best
	for C code, but also works for e-mail (">" at start of the line) and
	other types of text.  The |=| operator can be used to re-indent
	lines.

	For many other languages an indent plugin is present to support
	automatic indenting. |30.3|

Searching for words in included files.			|include-search|
	The |[i| command can be used to search for a match of the word under
	the cursor in the current and included files.  The 'include' option
	can be set to a pattern that describes a command to include a file
	(the default is for C programs).
	The |[I| command lists all matches, the |[_CTRL-I| command jumps to
	a match.
	The |[d|, |[D| and |[_CTRL-D| commands do the same, but only for
	lines where the pattern given with the 'define' option matches.

Automatic commands.					|autocommand|
	Commands can be automatically executed when reading a file, writing a
	file, jumping to another buffer, etc., depending on the file name.
	This is useful to set options and mappings for C programs,
	documentation, plain text, e-mail, etc.  This also makes it possible
	to edit compressed files.

Scripts and Expressions.				|expression|
	Commands have been added to form up a powerful script language.
	|:if|		Conditional execution, which can be used for example
			to set options depending on the value of $TERM.
	|:while|	Repeat a number of commands.
	|:for|		Loop over a list.
	|:echo|		Print the result of an expression.
	|:let|		Assign a value to an internal variable, option, etc.
			Variable types are Number, String, List and Dictionary.
	|:execute|	Execute a command formed by an expression.
	|:try|		Catch exceptions.
	etc., etc.  See |eval|.
	Debugging and profiling are supported. |debug-scripts| |profile|
	If this is not enough, an interface is provided to |Python|, |Ruby|,
	|Tcl|, |Lua|, |Perl| and |MzScheme|.

Viminfo.						|viminfo-file|
	The command-line history, marks and registers can be stored in a file
	that is read on startup.  This can be used to repeat a search command
	or command-line command after exiting and restarting Vim.  It is also
	possible to jump right back to where the last edit stopped with |'0|.
	The 'viminfo' option can be set to select which items to store in the
	.viminfo file.  This is off by default.

Printing.						|printing|
	The |:hardcopy| command sends text to the printer.  This can include
	syntax highlighting.

Mouse support.						|mouse-using|
	The mouse is supported in the GUI version, in an xterm for Unix, for
	BSDs with sysmouse, for Linux with gpm, and Win32.  It can be used to
	position the cursor, select the visual area, paste a register, etc.

