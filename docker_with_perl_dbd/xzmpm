	0xA78B,
	0xA828,
	0xA82C,
	0xA836,
	0xA83A,
	0xAA77,
	0xAA7A,
	0xAB5B,
	0xAB5C,
	0xAB6A,
	0xAB6C,
	0xFB29,
	0xFB2A,
	0xFBB2,
	0xFBC3,
	0xFD40,
	0xFD50,
	0xFDCF,
	0xFDD0,
	0xFDFC,
	0xFE00,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE67,
	0xFE69,
	0xFE6A,
	0xFF04,
	0xFF05,
	0xFF0B,
	0xFF0C,
	0xFF1C,
	0xFF1F,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10137,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x1018F,
	0x10190,
	0x1019D,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10877,
	0x10879,
	0x10AC8,
	0x10AC9,
	0x1173F,
	0x11740,
	0x11FD5,
	0x11FF2,
	0x16B3C,
	0x16B40,
	0x16B45,
	0x16B46,
	0x1BC9C,
	0x1BC9D,
	0x1CF50,
	0x1CFC4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1EB,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1E14F,
	0x1E150,
	0x1E2FF,
	0x1E300,
	0x1ECAC,
	0x1ECAD,
	0x1ECB0,
	0x1ECB1,
	0x1ED2E,
	0x1ED2F,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F10D,
	0x1F1AE,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D8,
	0x1F6DC,
	0x1F6ED,
	0x1F6F0,
	0x1F6FD,
	0x1F700,
	0x1F777,
	0x1F77B,
	0x1F7DA,
	0x1F7E0,
	0x1F7EC,
	0x1F7F0,
	0x1F7F1,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F8B0,
	0x1F8B2,
	0x1F900,
	0x1FA54,
	0x1FA60,
	0x1FA6E,
	0x1FA70,
	0x1FA7D,
	0x1FA80,
	0x1FA89,
	0x1FA90,
	0x1FABE,
	0x1FABF,
	0x1FAC6,
	0x1FACE,
	0x1FADC,
	0x1FAE0,
	0x1FAE9,
	0x1FAF0,
	0x1FAF9,
	0x1FB00,
	0x1FB93,
	0x1FB94,
	0x1FBCB
};

#  endif	/* EBCDIC 037 */

static const UV UNI_SAMR_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x800,
	0x82E,
	0x830,
	0x83F
};

static const UV UNI_SARB_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10A60,
	0x10A80
};

static const UV UNI_SAUR_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_SB__AT_invlist[] = {  /* for ASCII/Latin1 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2E,
	0x2F,
	0x2024,
	0x2025,
	0xFE52,
	0xFE53,
	0xFF0E,
	0xFF0F
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_SB__AT_invlist[] = {  /* for EBCDIC 1047 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x2024,
	0x2025,
	0xFE52,
	0xFE53,
	0xFF0E,
	0xFF0F
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_SB__AT_invlist[] = {  /* for EBCDIC 037 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x2024,
	0x2025,
	0xFE52,
	0xFE53,
	0xFF0E,
	0xFF0F
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_SB__CL_invlist[] = {  /* for ASCII/Latin1 */
	91,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x22,
	0x23,
	0x27,
	0x2A,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x7B,
	0x7C,
	0x7D,
	0x7E,
	0xAB,
	0xAC,
	0xBB,
	0xBC,
	0xF3A,
	0xF3E,
	0x169B,
	0x169D,
	0x2018,
	0x2020,
	0x2039,
	0x203B,
	0x2045,
	0x2047,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E42,
	0x2E43,
	0x2E55,
	0x2E5D,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0xFD3E,
	0xFD40,
	0xFE17,
	0xFE19,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE59,
	0xFE5F,
	0xFF08,
	0xFF0A,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0x1F676,
	0x1F679
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_SB__CL_invlist[] = {  /* for EBCDIC 1047 */
	93,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4D,
	0x4E,
	0x5D,
	0x5E,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0xAD,
	0xAE,
	0xBD,
	0xBE,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xF3A,
	0xF3E,
	0x169B,
	0x169D,
	0x2018,
	0x2020,
	0x2039,
	0x203B,
	0x2045,
	0x2047,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E42,
	0x2E43,
	0x2E55,
	0x2E5D,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0xFD3E,
	0xFD40,
	0xFE17,
	0xFE19,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE59,
	0xFE5F,
	0xFF08,
	0xFF0A,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0x1F676,
	0x1F679
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_SB__CL_invlist[] = {  /* for EBCDIC 037 */
	91,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4D,
	0x4E,
	0x5D,
	0x5E,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0xBA,
	0xBC,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xF3A,
	0xF3E,
	0x169B,
	0x169D,
	0x2018,
	0x2020,
	0x2039,
	0x203B,
	0x2045,
	0x2047,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E42,
	0x2E43,
	0x2E55,
	0x2E5D,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0xFD3E,
	0xFD40,
	0xFE17,
	0xFE19,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE59,
	0xFE5F,
	0xFF08,
	0xFF0A,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0x1F676,
	0x1F679
};

#  endif	/* EBCDIC 037 */

static const UV UNI_SB__EX_invlist[] = {  /* for all charsets */
	627,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x7FD,
	0x7FE,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x898,
	0x8A0,
	0x8CA,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0x9FE,
	0x9FF,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB55,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC05,
	0xC3C,
	0xC3D,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xCF3,
	0xCF4,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD81,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEC8,
	0xECF,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x103F,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x135D,
	0x1360,
	0x1712,
	0x1716,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ACF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DC0,
	0x1E00,
	0x200C,
	0x200E,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA82C,
	0xA82D,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA8FF,
	0xA900,
	0xA926,
	0xA92E,
	0xA947,
	0xA954,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
