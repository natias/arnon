=item AUTHOR

=item COPYRIGHT AND LICENSE

=back

=head2 diagnostics, splain - produce verbose warning diagnostics

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item The C<diagnostics> Pragma

=item The I<splain> Program

=back

=item EXAMPLES

=item INTERNALS

=item BUGS

=item AUTHOR

=back

=head2 encoding - allows you to write your script in non-ASCII and
non-UTF-8

=over 4

=item WARNING

=item SYNOPSIS

=item DESCRIPTION

C<use encoding ['I<ENCNAME>'] ;>, C<use encoding I<ENCNAME>,
Filter=E<gt>1;>, C<no encoding;>

=item OPTIONS

=over 4

=item Setting C<STDIN> and/or C<STDOUT> individually

=item The C<:locale> sub-pragma

=back

=item CAVEATS

=over 4

=item SIDE EFFECTS

=item DO NOT MIX MULTIPLE ENCODINGS

=item Prior to Perl v5.22

=item Prior to Encode version 1.87

=item Prior to Perl v5.8.1

"NON-EUC" doublebyte encodings, C<tr///>, Legend of characters above

=back

=item EXAMPLE - Greekperl

=item BUGS

Thread safety, Can't be used by more than one module in a single program,
Other modules using C<STDIN> and C<STDOUT> get the encoded stream, literals
in regex that are longer than 127 bytes, EBCDIC, C<format>, See also
L<encoding/CAVEATS>

=item HISTORY

=item SEE ALSO

=back

=head2 encoding::warnings - Warn on implicit encoding conversions

=over 4

=item VERSION

=item NOTICE

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Overview of the problem

=item Detecting the problem

=item Solving the problem

Upgrade both sides to unicode-strings, Downgrade both sides to
byte-strings, Specify the encoding for implicit byte-string upgrading,
PerlIO layers for B<STDIN> and B<STDOUT>, Literal conversions, Implicit
upgrading for byte-strings

=back

=item CAVEATS

=back

=over 4

=item SEE ALSO

=item AUTHORS

=item COPYRIGHT

=back

=head2 experimental - Experimental features made easy

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

C<args_array_with_signatures> - allow C<@_> to be used in signatured subs,
C<array_base> - allow the use of C<$[> to change the starting index of
C<@array>, C<autoderef> - allow push, each, keys, and other built-ins on
references, C<bitwise> - allow the new stringwise bit operators, C<builtin>
- allow the use of the functions in the builtin:: namespace, C<const_attr>
- allow the :const attribute on subs, C<declared_refs> - enables aliasing
via assignment to references, C<defer> - enables the use of defer blocks,
C<extra_paired_delimiters> - enables the use of more paired string
delimiters than the traditional four, S<C<< <  > >>>, S<C<( )>>, S<C<{ }>>,
and S<C<[ ]>>, C<for_list> - allows iterating over multiple values at a
time with C<for>, C<isa> - allow the use of the C<isa> infix operator,
C<lexical_topic> - allow the use of lexical C<$_> via C<my $_>,
C<lexical_subs> - allow the use of lexical subroutines, C<postderef> -
allow the use of postfix dereferencing expressions, C<postderef_qq> - allow
the use of postfix dereferencing expressions inside interpolating strings,
C<re_strict> - enables strict mode in regular expressions, C<refaliasing> -
allow aliasing via C<\$x = \$y>, C<regex_sets> - allow extended bracketed
character classes in regexps, C<signatures> - allow subroutine signatures
(for named arguments), C<smartmatch> - allow the use of C<~~>, C<switch> -
allow the use of C<~~>, given, and when, C<try> - allow the use of C<try>
and C<catch>, C<win32_perlio> - allows the use of the :win32 IO layer

=over 4

=item Ordering matters

=item Disclaimer

=back

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT AND LICENSE

=back

=head2 feature - Perl pragma to enable new features

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Lexical effect

=item C<no feature>

=back

=item AVAILABLE FEATURES

=over 4

=item The 'say' feature

=item The 'state' feature

=item The 'switch' feature

=item The 'unicode_strings' feature

=item The 'unicode_eval' and 'evalbytes' features

=item The 'current_sub' feature

=item The 'array_base' feature

=item The 'fc' feature

=item The 'lexical_subs' feature

=item The 'postderef' and 'postderef_qq' features

=item The 'signatures' feature

=item The 'refaliasing' feature

=item The 'bitwise' feature

=item The 'declared_refs' feature

=item The 'isa' feature

=item The 'indirect' feature

=item The 'multidimensional' feature

=item The 'bareword_filehandles' feature

=item The 'try' feature

=item The 'defer' feature

=item The 'extra_paired_delimiters' feature

=item The 'module_true' feature

=item The 'class' feature

=back

=item FEATURE BUNDLES

=item IMPLICIT LOADING

=item CHECKING FEATURES

feature_enabled($feature), feature_enabled($feature, $depth),
features_enabled(), features_enabled($depth), feature_bundle(),
feature_bundle($depth)

=back

=head2 fields - compile-time class fields

=over 4

=item SYNOPSIS

=item DESCRIPTION

new, phash

=item SEE ALSO

=back

=head2 filetest - Perl pragma to control the filetest permission operators

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Consider this carefully

=item The "access" sub-pragma

=item Limitation with regard to C<_>

=back

=back

=head2 if - C<use> a Perl module if a condition holds

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item C<use if>

=item C<no if>

=back

=item BUGS

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT AND LICENCE

=back

=head2 integer - Perl pragma to use integer arithmetic instead of floating
point

=over 4

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 less - perl pragma to request less of something

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item FOR MODULE AUTHORS

=over 4

=item C<< BOOLEAN = less->of( FEATURE ) >>

=item C<< FEATURES = less->of() >>

=back

=item CAVEATS

This probably does nothing, This works only on 5.10+

=back

=head2 lib - manipulate @INC at compile time

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Adding directories to @INC

=item Deleting directories from @INC

=item Restoring original @INC

=back

=item CAVEATS

=item NOTES

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT AND LICENSE

=back

=head2 locale - Perl pragma to use or avoid POSIX locales for built-in
operations

=over 4

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 mro - Method Resolution Order

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item OVERVIEW

=item The C3 MRO

=over 4

=item What is C3?

=item How does C3 work

=back

=item Functions

=over 4

=item mro::get_linear_isa($classname[, $type])

=item mro::set_mro ($classname, $type)

=item mro::get_mro($classname)

=item mro::get_isarev($classname)

=item mro::is_universal($classname)

=item mro::invalidate_all_method_caches()

=item mro::method_changed_in($classname)

=item mro::get_pkg_gen($classname)

=item next::method

=item next::can

=item maybe::next::method

=back

=item SEE ALSO

=over 4

=item The original Dylan paper

L<http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.19.3910&rep=rep1
&type=pdf>

=item Python 2.3 MRO

L<https://www.python.org/download/releases/2.3/mro/>

=item Class::C3

L<Class::C3>

=back

=item AUTHOR

=back

=head2 ok - Alternative to Test::More::use_ok

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item CC0 1.0 Universal

=back

=head2 open - perl pragma to set default PerlIO layers for input and output

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item IMPLEMENTATION DETAILS

=item SEE ALSO

=back

=head2 ops - Perl pragma to restrict unsafe operations when compiling

=over 4

=item SYNOPSIS	

=item DESCRIPTION

=item SEE ALSO

=back

=head2 overload - Package for overloading Perl operations

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Fundamentals

=item Overloadable Operations

C<not>, C<neg>, C<++>, C<-->, I<Assignments>, I<Non-mutators with a mutator
variant>, C<int>, I<String, numeric, boolean, and regexp conversions>,
I<Iteration>, I<File tests>, I<Matching>, I<Dereferencing>, I<Special>

=item Magic Autogeneration

=item Special Keys for C<use overload>

defined, but FALSE, C<undef>, TRUE

=item How Perl Chooses an Operator Implementation

=item Losing Overloading

=item Inheritance and Overloading

Method names in the C<use overload> directive, Overloading of an operation
is inherited by derived classes

=item Run-time Overloading

=item Public Functions

overload::StrVal(arg), overload::Overloaded(arg), overload::Method(obj,op)

=item Overloading Constants

integer, float, binary, q, qr

=back

=item IMPLEMENTATION

=item COOKBOOK

=over 4

=item Two-face Scalars

=item Two-face References

=item Symbolic Calculator

=item I<Really> Symbolic Calculator

=back

=item AUTHOR

=item SEE ALSO

=item DIAGNOSTICS

Odd number of arguments for overload::constant, '%s' is not an overloadable
type, '%s' is not a code reference, overload arg '%s' is invalid

=item BUGS AND PITFALLS

=back

=head2 overloading - perl pragma to lexically control overloading

=over 4

=item SYNOPSIS

=item DESCRIPTION

C<no overloading>, C<no overloading @ops>, C<use overloading>, C<use
overloading @ops>

=back

=head2 parent - Establish an ISA relationship with base classes at compile
time

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item HISTORY

=item CAVEATS

=item SEE ALSO

L<base>, L<parent::versioned>

=item AUTHORS AND CONTRIBUTORS

=item MAINTAINER

=item LICENSE

=back

=head2 re - Perl pragma to alter regular expression behaviour

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item 'taint' mode

=item 'eval' mode

=item 'strict' mode

=item '/flags' mode

=item 'debug' mode

=item 'Debug' mode

Compile related options, COMPILE, PARSE, OPTIMISE, TRIEC, DUMP, FLAGS,
TEST, Execute related options, EXECUTE, MATCH, TRIEE, INTUIT, Extra
debugging options, EXTRA, BUFFERS, TRIEM, STATE, STACK, GPOS, OPTIMISEM,
DUMP_PRE_OPTIMIZE, WILDCARD, Other useful flags, ALL, All, MORE, More

=item Exportable Functions

is_regexp($ref), regexp_pattern($ref), regname($name,$all), regnames($all),
regnames_count(), regmust($ref), optimization($ref), minlen, minlenret,
gofs, noscan, isall, anchor SBOL, anchor MBOL, anchor GPOS, skip, implicit,
anchored/floating, anchored utf8/floating utf8, anchored min
offset/floating min offset, anchored max offset/floating max offset,
anchored end shift/floating end shift, checking, stclass

=back

=item SEE ALSO

=back

=head2 sigtrap - Perl pragma to enable simple signal handling

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item OPTIONS

=over 4

=item SIGNAL HANDLERS

B<stack-trace>, B<die>, B<handler> I<your-handler>

=item SIGNAL LISTS

B<normal-signals>, B<error-signals>, B<old-interface-signals>

=item OTHER

B<untrapped>, B<any>, I<signal>, I<number>

=back

=item EXAMPLES

=back

=head2 sort - perl pragma to control sort() behaviour

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item CAVEATS

=back

=head2 stable - Experimental features made easy, once we know they're
stable

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

C<bitwise> - stable as of perl 5.22, available via stable 0.031, C<isa> -
stable as of perl 5.32, available via stable 0.031, C<lexical_subs> -
stable as of perl 5.22, available via stable 0.031, C<postderef> - stable
as of perl 5.20, available via stable 0.031, C<const_attr> - stable as of
perl 5.22, available via stable 0.032, C<for_list> - stable as of perl
5.36, available via stable 0.032

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT AND LICENSE

=back

=head2 strict - Perl pragma to restrict unsafe constructs

=over 4

=item SYNOPSIS

=item DESCRIPTION

C<strict refs>, C<strict vars>, C<strict subs>

=item HISTORY

=back

=head2 subs - Perl pragma to predeclare subroutine names

=over 4

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 threads - Perl interpreter-based threads

=over 4

=item VERSION

=item WARNING

=item SYNOPSIS

=item DESCRIPTION

$thr = threads->create(FUNCTION, ARGS), $thr->join(), $thr->detach(),
threads->detach(), threads->self(), $thr->tid(), threads->tid(), "$thr",
threads->object($tid), threads->yield(), threads->list(),
threads->list(threads::all), threads->list(threads::running),
threads->list(threads::joinable), $thr1->equal($thr2), async BLOCK;,
$thr->error(), $thr->_handle(), threads->_handle()

=item EXITING A THREAD

threads->exit(), threads->exit(status), die(), exit(status), use threads
'exit' => 'threads_only', threads->create({'exit' => 'thread_only'}, ...),
$thr->set_thread_exit_only(boolean), threads->set_thread_exit_only(boolean)

=item THREAD STATE

$thr->is_running(), $thr->is_joinable(), $thr->is_detached(),
threads->is_detached()

=item THREAD CONTEXT

=over 4

=item Explicit context

=item Implicit context

=item $thr->wantarray()

=item threads->wantarray()

=back

=item THREAD STACK SIZE

threads->get_stack_size();, $size = $thr->get_stack_size();, $old_size =
threads->set_stack_size($new_size);, use threads ('stack_size' => VALUE);,
$ENV{'PERL5_ITHREADS_STACK_SIZE'}, threads->create({'stack_size' => VALUE},
FUNCTION, ARGS), $thr2 = $thr1->create(FUNCTION, ARGS)

=item THREAD SIGNALLING

$thr->kill('SIG...');

=item WARNINGS

Perl exited with active threads:, Thread creation failed: pthread_create
returned #, Thread # terminated abnormally: .., Using minimum thread stack
size of #, Thread creation failed: pthread_attr_setstacksize(I<SIZE>)
returned 22

=item ERRORS

This Perl not built to support threads, Cannot change stack size of an
existing thread, Cannot signal threads without safe signals, Unrecognized
signal name: ..

=item BUGS AND LIMITATIONS

Thread-safe modules, Using non-thread-safe modules, Memory consumption,
Current working directory, Locales, Environment variables, Catching
signals, Parent-child threads, Unsafe signals, Perl has been built with
C<PERL_OLD_SIGNALS> (see S<C<perl -V>>), The environment variable
C<PERL_SIGNALS> is set to C<unsafe> (see L<perlrun/"PERL_SIGNALS">), The
module L<Perl::Unsafe::Signals> is used, Identity of objects returned from
threads, Returning blessed objects from threads, END blocks in threads,
Open directory handles, Detached threads and global destruction, Perl Bugs
and the CPAN Version of L<threads>

=item REQUIREMENTS

=item SEE ALSO

=item AUTHOR

=item LICENSE

=item ACKNOWLEDGEMENTS

=back

=head2 threads::shared - Perl extension for sharing data structures between
threads

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

=item EXPORT

=item FUNCTIONS

share VARIABLE, shared_clone REF, is_shared VARIABLE, lock VARIABLE,
cond_wait VARIABLE, cond_wait CONDVAR, LOCKVAR, cond_timedwait VARIABLE,
ABS_TIMEOUT, cond_timedwait CONDVAR, ABS_TIMEOUT, LOCKVAR, cond_signal
VARIABLE, cond_broadcast VARIABLE

=item OBJECTS

=item NOTES

=item WARNINGS

cond_broadcast() called on unlocked variable, cond_signal() called on
unlocked variable

=item BUGS AND LIMITATIONS

=item SEE ALSO

=item AUTHOR

=item LICENSE

=back

=head2 utf8 - Perl pragma to enable/disable UTF-8 (or UTF-EBCDIC) in source
code

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Utility functions

C<$num_octets = utf8::upgrade($string)>, C<$success =
utf8::downgrade($string[, $fail_ok])>, C<utf8::encode($string)>, C<$success
= utf8::decode($string)>, C<$unicode =
utf8::native_to_unicode($code_point)>, C<$native =
utf8::unicode_to_native($code_point)>, C<$flag = utf8::is_utf8($string)>,
C<$flag = utf8::valid($string)>

=back

=item BUGS

=item SEE ALSO

=back

=head2 vars - Perl pragma to predeclare global variable names

=over 4

=item SYNOPSIS

=item DESCRIPTION

=back

=head2 version - Perl extension for Version Objects

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item TYPES OF VERSION OBJECTS

Decimal Versions, Dotted Decimal Versions

=item DECLARING VERSIONS

=over 4

=item How to convert a module from decimal to dotted-decimal

=item How to C<declare()> a dotted-decimal version

=back

=item PARSING AND COMPARING VERSIONS

=over 4

=item How to C<parse()> a version

=item How to check for a legal version string

C<is_lax()>, C<is_strict()>

=item How to compare version objects

=back

=item OBJECT METHODS

=over 4

=item is_alpha()

=item is_qv()

=item normal()

=item numify()

=item stringify()

=back

=item EXPORTED FUNCTIONS

=over 4

=item qv()

=item is_lax()

=item is_strict()

=back

=item AUTHOR

=item SEE ALSO

=back

=head2 version::Internals - Perl extension for Version Objects

=over 4

=item DESCRIPTION

=item WHAT IS A VERSION?

Decimal versions, Dotted-Decimal versions

=over 4

