=item Decimal Versions

=item Dotted-Decimal Versions

=item Alpha Versions

=item Regular Expressions for Version Parsing

C<$version::LAX>, C<$version::STRICT>, v1.234.5

=back

=item IMPLEMENTATION DETAILS

=over 4

=item Equivalence between Decimal and Dotted-Decimal Versions

=item Quoting Rules

=item What about v-strings?

=item Version Object Internals

original, qv, alpha, version

=item Replacement UNIVERSAL::VERSION

=back

=item USAGE DETAILS

=over 4

=item Using modules that use version.pm

Decimal versions always work, Dotted-Decimal version work sometimes

=item Object Methods

new(), qv(), Normal Form, Numification, Stringification, Comparison
operators, Logical Operators

=back

=item AUTHOR

=item SEE ALSO

=back

=head2 vmsish - Perl pragma to control VMS-specific language features

=over 4

=item SYNOPSIS

=item DESCRIPTION

C<vmsish status>, C<vmsish exit>, C<vmsish time>, C<vmsish hushed>

=back

=head2 warnings - Perl pragma to control optional warnings

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Default Warnings and Optional Warnings

=item "Negative warnings"

=item What's wrong with B<-w> and C<$^W>

=item Controlling Warnings from the Command Line

B<-w> X<-w>, B<-W> X<-W>, B<-X> X<-X>

=item Backward Compatibility

=item Category Hierarchy
X<warning, categories>

=item Fatal Warnings
X<warning, fatal>

=item Reporting Warnings from a Module
X<warning, reporting> X<warning, registering>

=back

=item FUNCTIONS

use warnings::register, warnings::enabled(), warnings::enabled($category),
warnings::enabled($object), warnings::enabled_at_level($category, $level),
warnings::fatal_enabled(), warnings::fatal_enabled($category),
warnings::fatal_enabled($object),
warnings::fatal_enabled_at_level($category, $level),
warnings::warn($message), warnings::warn($category, $message),
warnings::warn($object, $message), warnings::warn_at_level($category,
$level, $message), warnings::warnif($message), warnings::warnif($category,
$message), warnings::warnif($object, $message),
warnings::warnif_at_level($category, $level, $message),
warnings::register_categories(@names)

=back

=head2 warnings::register - warnings import function

=over 4

=item SYNOPSIS

=item DESCRIPTION

=back

=head1 MODULE DOCUMENTATION

=head2 AnyDBM_File - provide framework for multiple DBMs

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item DBM Comparisons

[0], [1], [2], [3]

=back

=item SEE ALSO

=back

=head2 App::Cpan - easily interact with CPAN from the command line

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Options

-a, -A module [ module ... ], -c module, -C module [ module ... ], -D
module [ module ... ], -f, -F, -g module [ module ... ], -G module [ module
... ], -h, -i module [ module ... ], -I, -j Config.pm, -J, -l, -L author [
author ... ], -m, -M mirror1,mirror2,.., -n, -O, -p, -P, -r, -s, -t module
[ module ... ], -T, -u, -v, -V, -w, -x module [ module ... ], -I<X>

=item Examples

=item Environment variables

NONINTERACTIVE_TESTING, PERL_MM_USE_DEFAULT, CPAN_OPTS,
CPANSCRIPT_LOGLEVEL, GIT_COMMAND

=item Methods

=back

=back

run( ARGS )

=over 4

=item EXIT VALUES

=item TO DO

=item BUGS

=item SEE ALSO

=item SOURCE AVAILABILITY

=item CREDITS

=item AUTHOR

=item COPYRIGHT

=back

=head2 App::Prove - Implements the C<prove> command.

=over 4

=item VERSION

=back

=over 4

=item DESCRIPTION

=item SYNOPSIS

=back

=over 4

=item METHODS

=over 4

=item Class Methods

=back

=back

=over 4

=item Attributes

C<archive>, C<argv>, C<backwards>, C<blib>, C<color>, C<directives>,
C<dry>, C<exec>, C<extensions>, C<failures>, C<comments>, C<formatter>,
C<harness>, C<ignore_exit>, C<includes>, C<jobs>, C<lib>, C<merge>,
C<modules>, C<parse>, C<plugins>, C<quiet>, C<really_quiet>, C<recurse>,
C<rules>, C<show_count>, C<show_help>, C<show_man>, C<show_version>,
C<shuffle>, C<state>, C<state_class>, C<taint_fail>, C<taint_warn>,
C<test_args>, C<timer>, C<verbose>, C<warnings_fail>, C<warnings_warn>,
C<tapversion>, C<trap>

=back

=over 4

=item PLUGINS

=over 4

=item Sample Plugin

=back

=item SEE ALSO

=back

=head2 App::Prove::State - State storage for the C<prove> command.

=over 4

=item VERSION

=back

=over 4

=item DESCRIPTION

=item SYNOPSIS

=back

=over 4

=item METHODS

=over 4

=item Class Methods

C<store>, C<extensions> (optional), C<result_class> (optional)

=back

=back

=over 4

=item C<result_class>

=back

=over 4

=item C<extensions>

=back

=over 4

=item C<results>

=back

=over 4

=item C<commit>

=back

=over 4

=item Instance Methods

C<last>, C<failed>, C<passed>, C<all>, C<hot>, C<todo>, C<slow>, C<fast>,
C<new>, C<old>, C<save>

=back

=head2 App::Prove::State::Result - Individual test suite results.

=over 4

=item VERSION

=back

=over 4

=item DESCRIPTION

=item SYNOPSIS

=back

=over 4

=item METHODS

=over 4

=item Class Methods

=back

=back

=over 4

=item C<state_version>

=back

=over 4

=item C<test_class>

=back

=head2 App::Prove::State::Result::Test - Individual test results.

=over 4

=item VERSION

=back

=over 4

=item DESCRIPTION

=item SYNOPSIS

=back

=over 4

=item METHODS

=over 4

=item Class Methods

=back

=back

=over 4

=item Instance Methods

=back

=head2 Archive::Tar - module for manipulations of tar archives

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item Object Methods

=over 4

=item Archive::Tar->new( [$file, $compressed] )

=back

=back

=over 4

=item $tar->read ( $filename|$handle, [$compressed, {opt => 'val'}] )

limit, filter, md5, extract

=back

=over 4

=item $tar->contains_file( $filename )

=back

=over 4

=item $tar->extract( [@filenames] )

=back

=over 4

=item $tar->extract_file( $file, [$extract_path] )

=back

=over 4

=item $tar->list_files( [\@properties] )

=back

=over 4

=item $tar->get_files( [@filenames] )

=back

=over 4

=item $tar->get_content( $file )

=back

=over 4

=item $tar->replace_content( $file, $content )

=back

=over 4

=item $tar->rename( $file, $new_name )

=back

=over 4

=item $tar->chmod( $file, $mode )

=back

=over 4

=item $tar->chown( $file, $uname [, $gname] )

=back

=over 4

=item $tar->remove (@filenamelist)

=back

=over 4

=item $tar->clear

=back

=over 4

=item $tar->write ( [$file, $compressed, $prefix] )

=back

=over 4

=item $tar->add_files( @filenamelist )

=back

=over 4

=item $tar->add_data ( $filename, $data, [$opthashref] )

FILE, HARDLINK, SYMLINK, CHARDEV, BLOCKDEV, DIR, FIFO, SOCKET

=back

=over 4

=item $tar->error( [$BOOL] )

=back

=over 4

=item $tar->setcwd( $cwd );

=back

=over 4

=item Class Methods

=over 4

=item Archive::Tar->create_archive($file, $compressed, @filelist)

=back

=back

=over 4

=item Archive::Tar->iter( $filename, [ $compressed, {opt => $val} ] )

=back

=over 4

=item Archive::Tar->list_archive($file, $compressed, [\@properties])

=back

=over 4

=item Archive::Tar->extract_archive($file, $compressed)

=back

=over 4

=item $bool = Archive::Tar->has_io_string

=back

=over 4

=item $bool = Archive::Tar->has_perlio

=back

=over 4

=item $bool = Archive::Tar->has_zlib_support

=back

=over 4

=item $bool = Archive::Tar->has_bzip2_support

=back

=over 4

=item $bool = Archive::Tar->has_xz_support

=back

=over 4

=item Archive::Tar->can_handle_compressed_files

=back

=over 4

=item GLOBAL VARIABLES

=over 4

=item $Archive::Tar::FOLLOW_SYMLINK

=item $Archive::Tar::CHOWN

=item $Archive::Tar::CHMOD

=item $Archive::Tar::SAME_PERMISSIONS

=item $Archive::Tar::DO_NOT_USE_PREFIX

=item $Archive::Tar::DEBUG

=item $Archive::Tar::WARN

=item $Archive::Tar::error

=item $Archive::Tar::INSECURE_EXTRACT_MODE

=item $Archive::Tar::HAS_PERLIO

=item $Archive::Tar::HAS_IO_STRING

=item $Archive::Tar::ZERO_PAD_NUMBERS

=item Tuning the way RESOLVE_SYMLINK will works

none, speed (default), memory

=item $Archive::Tar::EXTRACT_BLOCK_SIZE

=back

=back

=over 4

=item FAQ

What's the minimum perl version required to run Archive::Tar?, Isn't
Archive::Tar slow?, Isn't Archive::Tar heavier on memory than /bin/tar?,
Can you lazy-load data instead?, How much memory will an X kb tar file
need?, What do you do with unsupported filetypes in an archive?, I'm using
WinZip, or some other non-POSIX client, and files are not being extracted
properly!, How do I extract only files that have property X from an
archive?, How do I access .tar.Z files?, How do I handle Unicode strings?

=item CAVEATS

=item TODO

Check if passed in handles are open for read/write, Allow archives to be
passed in as string, Facilitate processing an opened filehandle of a
compressed archive

=item SEE ALSO

The GNU tar specification, The PAX format specification

=item AUTHOR

=item ACKNOWLEDGEMENTS

=item COPYRIGHT

=back

=head2 Archive::Tar::File - a subclass for in-memory extracted file from
Archive::Tar

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Accessors

name, mode, uid, gid, size, mtime, chksum, type, linkname, magic, version,
uname, gname, devmajor, devminor, prefix, raw

=back

=item Methods

=over 4

=item Archive::Tar::File->new( file => $path )

=item Archive::Tar::File->new( data => $path, $data, $opt )

=item Archive::Tar::File->new( chunk => $chunk )

=back

=back

=over 4

=item $bool = $file->extract( [ $alternative_name ] )

=back

=over 4

=item $path = $file->full_path

=back

=over 4

=item $bool = $file->validate

=back

=over 4

=item $bool = $file->has_content

=back

=over 4

=item $content = $file->get_content

=back

=over 4

=item $cref = $file->get_content_by_ref

=back

=over 4

=item $bool = $file->replace_content( $content )

=back

=over 4

=item $bool = $file->rename( $new_name )

=back

=over 4

=item $bool = $file->chmod( $mode )

=back

=over 4

=item $bool = $file->chown( $user [, $group])

=back

=over 4

=item Convenience methods

$file->is_file, $file->is_dir, $file->is_hardlink, $file->is_symlink,
$file->is_chardev, $file->is_blockdev, $file->is_fifo, $file->is_socket,
$file->is_longlink, $file->is_label, $file->is_unknown

=back

=head2 Attribute::Handlers - Simpler definition of attribute handlers

=over 4

=item VERSION

=item SYNOPSIS

=item DESCRIPTION

[0], [1], [2], [3], [4], [5], [6], [7]

=over 4

=item Typed lexicals

=item Type-specific attribute handlers

=item Non-interpretive attribute handlers

=item Phase-specific attribute handlers

=item Attributes as C<tie> interfaces

=back

=item EXAMPLES

=item UTILITY FUNCTIONS

findsym

=item DIAGNOSTICS

C<Bad attribute type: ATTR(%s)>, C<Attribute handler %s doesn't handle %s
attributes>, C<Declaration of %s attribute in package %s may clash with
future reserved word>, C<Can't have two ATTR specifiers on one subroutine>,
C<Can't autotie a %s>, C<Internal error: %s symbol went missing>, C<Won't
be able to apply END handler>

=item AUTHOR

=item BUGS

=item COPYRIGHT AND LICENSE

=back

=head2 AutoLoader - load subroutines only on demand

=over 4

=item SYNOPSIS

=item DESCRIPTION

=over 4

=item Subroutine Stubs

=item Using B<AutoLoader>'s AUTOLOAD Subroutine

=item Overriding B<AutoLoader>'s AUTOLOAD Subroutine

=item Package Lexicals

=item Not Using AutoLoader

=item B<AutoLoader> vs. B<SelfLoader>

=item Forcing AutoLoader to Load a Function

=back

=item CAVEATS

=item SEE ALSO

=item AUTHOR

=item COPYRIGHT AND LICENSE

=back

=head2 AutoSplit - split a package for autoloading

=over 4

=item SYNOPSIS

=item DESCRIPTION

$keep, $check, $modtime

=over 4

=item Multiple packages

=back

=item DIAGNOSTICS

=item AUTHOR

=item COPYRIGHT AND LICENSE

=back

=head2 B - The Perl Compiler Backend

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item OVERVIEW

=item Utility Functions

=over 4

=item Functions Returning C<B::SV>, C<B::AV>, C<B::HV>, and C<B::CV>
objects

sv_undef, sv_yes, sv_no, svref_2object(SVREF), amagic_generation, init_av,
check_av, unitcheck_av, begin_av, end_av, comppadlist, regex_padav, main_cv

=item Functions for Examining the Symbol Table

walksymtable(SYMREF, METHOD, RECURSE, PREFIX)

=item Functions Returning C<B::OP> objects or for walking op trees

main_root, main_start, walkoptree(OP, METHOD), walkoptree_debug(DEBUG)

=item Miscellaneous Utility Functions

ppname(OPNUM), hash(STR), cast_I32(I), minus_c, cstring(STR),
perlstring(STR), safename(STR), class(OBJ), threadsv_names

=item Exported utility variables

@optype, @specialsv_name

=back

=item OVERVIEW OF CLASSES

=over 4

=item SV-RELATED CLASSES

=item B::SV Methods

REFCNT, FLAGS, IsBOOL, object_2svref, TRUE, TRUE_nomg

=item B::IV Methods

IV, IVX, UVX, int_value, needs64bits, packiv

=item B::NV Methods

NV, NVX, COP_SEQ_RANGE_LOW, COP_SEQ_RANGE_HIGH

=item B::RV Methods

RV

=item B::PV Methods

PV, RV, PVX, CUR, LEN

=item B::PVMG Methods

MAGIC, SvSTASH

=item B::MAGIC Methods

MOREMAGIC, precomp, PRIVATE, TYPE, FLAGS, OBJ, PTR, REGEX

=item B::INVLIST Methods

prev_index, is_offset, array_len, get_invlist_array

=item B::PVLV Methods

TARGOFF, TARGLEN, TYPE, TARG

=item B::BM Methods

USEFUL, PREVIOUS, RARE, TABLE

=item B::REGEXP Methods

REGEX, precomp, qr_anoncv, compflags

=item B::GV Methods

is_empty, NAME, SAFENAME, STASH, SV, IO, FORM, AV, HV, EGV, CV, CVGEN,
LINE, FILE, FILEGV, GvREFCNT, FLAGS, GPFLAGS

=item B::IO Methods

LINES, PAGE, PAGE_LEN, LINES_LEFT, TOP_NAME, TOP_GV, FMT_NAME, FMT_GV,
BOTTOM_NAME, BOTTOM_GV, SUBPROCESS, IoTYPE, IoFLAGS, IsSTD

=item B::AV Methods

FILL, MAX, ARRAY, ARRAYelt

=item B::CV Methods

STASH, START, ROOT, GV, FILE, DEPTH, PADLIST, OUTSIDE, OUTSIDE_SEQ, XSUB,
XSUBANY, CvFLAGS, const_sv, NAME_HEK

=item B::HV Methods

FILL, MAX, KEYS, RITER, NAME, ARRAY

=item OP-RELATED CLASSES

=item B::OP Methods

next, sibling, parent, name, ppaddr, desc, targ, type, opt, flags, private,
spare

=item B::UNOP Method

first

=item B::UNOP_AUX Methods (since 5.22)

aux_list(cv), string(cv)

=item B::BINOP Method

last

