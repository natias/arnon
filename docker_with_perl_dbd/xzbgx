From F<i_db.U>:

This variable contains the patch version number of
Berkeley C<DB> found in the <db.h> header file.
For C<DB> version 1 this is always 0.

=item C<default_inc_excludes_dot>

From F<defaultincdot.U>:

When defined, remove the legacy F<.> from @C<INC>

=item C<direntrytype>

From F<i_dirent.U>:

This symbol is set to C<struct direct> or C<struct dirent> depending on
whether dirent is available or not. You should use this pseudo type to
portably declare your directory entries.

=item C<dlext>

From F<dlext.U>:

This variable contains the extension that is to be used for the
dynamically loaded modules that perl generates.

=item C<dlsrc>

From F<dlsrc.U>:

This variable contains the name of the dynamic loading file that
will be used with the package.

=item C<doubleinfbytes>

From F<infnan.U>:

This variable contains comma-separated list of hexadecimal bytes
for the double precision infinity.

=item C<doublekind>

From F<longdblfio.U>:

This variable, if defined, encodes the type of a double:
1 = C<IEEE> 754 32-bit little endian,
2 = C<IEEE> 754 32-bit big endian,
3 = C<IEEE> 754 64-bit little endian,
4 = C<IEEE> 754 64-bit big endian,
5 = C<IEEE> 754 128-bit little endian,
6 = C<IEEE> 754 128-bit big endian,
7 = C<IEEE> 754 64-bit mixed endian le-be,
8 = C<IEEE> 754 64-bit mixed endian be-le,
9 = C<VAX> 32bit little endian F float format
10 = C<VAX> 64bit little endian D float format
11 = C<VAX> 64bit little endian G float format
12 = C<IBM> 32bit format
13 = C<IBM> 64bit format
14 = Cray 64bit format
-1 = unknown format.

=item C<doublemantbits>

From F<mantbits.U>:

This symbol, if defined, tells how many mantissa bits
there are in double precision floating point format.
Note that this is usually C<DBL_MANT_DIG> minus one, since
with the standard C<IEEE> 754 formats C<DBL_MANT_DIG> includes
the implicit bit which doesn't really exist.

=item C<doublenanbytes>

From F<infnan.U>:

This variable contains comma-separated list of hexadecimal bytes
for the double precision not-a-number.

=item C<doublesize>

From F<doublesize.U>:

This variable contains the value of the C<DOUBLESIZE> symbol, which
indicates to the C program how many bytes there are in a double.

=item C<drand01>

From F<randfunc.U>:

Indicates the macro to be used to generate normalized
random numbers.  Uses randfunc, often divided by
(double) (((unsigned long) 1 << randbits)) in order to
normalize the result.
In C programs, the macro C<Drand01> is mapped to drand01.

=item C<drand48_r_proto>

From F<d_drand48_r.U>:

This variable encodes the prototype of drand48_r.
It is zero if d_drand48_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_drand48_r
is defined.

=item C<dtrace>

From F<usedtrace.U>:

This variable holds the location of the dtrace executable.

=item C<dtraceobject>

From F<dtraceobject.U>:

Whether we need to build an object file with the dtrace tool.

=item C<dtracexnolibs>

From F<dtraceobject.U>:

Whether dtrace accepts -xnolibs.  If available we call dtrace -h
and dtrace -G with -xnolibs to allow dtrace to run in a jail on
FreeBSD.

=item C<dynamic_ext>

From F<Extensions.U>:

This variable holds a list of C<XS> extension files we want to
link dynamically into the package.  It is used by Makefile.

=back

=head2 e

=over 4

=item C<eagain>

From F<nblock_io.U>:

This variable bears the symbolic errno code set by read() when no
data is present on the file and non-blocking I/O was enabled (otherwise,
read() blocks naturally).

=item C<ebcdic>

From F<ebcdic.U>:

This variable conditionally defines C<EBCDIC> if this
system uses C<EBCDIC> encoding.

=item C<echo>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the echo program.  After Configure runs,
the value is reset to a plain C<echo> and is not useful.

=item C<egrep>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the egrep program.  After Configure runs,
the value is reset to a plain C<egrep> and is not useful.

=item C<emacs>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<endgrent_r_proto>

From F<d_endgrent_r.U>:

This variable encodes the prototype of endgrent_r.
It is zero if d_endgrent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_endgrent_r
is defined.

=item C<endhostent_r_proto>

From F<d_endhostent_r.U>:

This variable encodes the prototype of endhostent_r.
It is zero if d_endhostent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_endhostent_r
is defined.

=item C<endnetent_r_proto>

From F<d_endnetent_r.U>:

This variable encodes the prototype of endnetent_r.
It is zero if d_endnetent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_endnetent_r
is defined.

=item C<endprotoent_r_proto>

From F<d_endprotoent_r.U>:

This variable encodes the prototype of endprotoent_r.
It is zero if d_endprotoent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_endprotoent_r
is defined.

=item C<endpwent_r_proto>

From F<d_endpwent_r.U>:

This variable encodes the prototype of endpwent_r.
It is zero if d_endpwent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_endpwent_r
is defined.

=item C<endservent_r_proto>

From F<d_endservent_r.U>:

This variable encodes the prototype of endservent_r.
It is zero if d_endservent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_endservent_r
is defined.

=item C<eunicefix>

From F<Init.U>:

When running under Eunice this variable contains a command which will
convert a shell script to the proper form of text file for it to be
executable by the shell.  On other systems it is a no-op.

=item C<exe_ext>

From F<Unix.U>:

This is an old synonym for _exe.

=item C<expr>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the expr program.  After Configure runs,
the value is reset to a plain C<expr> and is not useful.

=item C<extensions>

From F<Extensions.U>:

This variable holds a list of all extension files (both C<XS> and
non-xs) installed with the package.  It is propagated to F<Config.pm>
and is typically used to test whether a particular extension
is available.

=item C<extern_C>

From F<Csym.U>:

C<ANSI> C requires C<extern> where C++ requires 'extern C<C>'. This
variable can be used in Configure to do the right thing.

=item C<extras>

From F<Extras.U>:

This variable holds a list of extra modules to install.

=back

=head2 f

=over 4

=item C<fflushall>

From F<fflushall.U>:

This symbol, if defined, tells that to flush
all pending stdio output one must loop through all
the stdio file handles stored in an array and fflush them.
Note that if fflushNULL is defined, fflushall will not
even be probed for and will be left undefined.

=item C<fflushNULL>

From F<fflushall.U>:

This symbol, if defined, tells that fflush(C<NULL>) correctly
flushes all pending stdio output without side effects. In
particular, on some platforms calling fflush(C<NULL>) *still*
corrupts C<STDIN> if it is a pipe.

=item C<find>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<firstmakefile>

From F<Unix.U>:

This variable defines the first file searched by make.  On unix,
it is makefile (then Makefile).  On case-insensitive systems,
it might be something else.  This is only used to deal with
convoluted make depend tricks.

=item C<flex>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<fpossize>

From F<fpossize.U>:

This variable contains the size of a fpostype in bytes.

=item C<fpostype>

From F<fpostype.U>:

This variable defines Fpos_t to be something like fpos_t, long,
uint, or whatever type is used to declare file positions in libc.

=item C<freetype>

From F<mallocsrc.U>:

This variable contains the return type of free().  It is usually
void, but occasionally int.

=item C<from>

From F<Cross.U>:

This variable contains the command used by Configure
to copy files from the target host.  Useful and available
only during Perl build.
The string C<:> if not cross-compiling.

=item C<full_ar>

From F<Loc_ar.U>:

This variable contains the full pathname to C<ar>, whether or
not the user has specified C<portability>.  This is only used
in the F<Makefile.SH>.

=item C<full_csh>

From F<d_csh.U>:

This variable contains the full pathname to C<csh>, whether or
not the user has specified C<portability>.  This is only used
in the compiled C program, and we assume that all systems which
can share this executable will have the same full pathname to
F<csh.>

=item C<full_sed>

From F<Loc_sed.U>:

This variable contains the full pathname to C<sed>, whether or
not the user has specified C<portability>.  This is only used
in the compiled C program, and we assume that all systems which
can share this executable will have the same full pathname to
F<sed.>

=back

=head2 g

=over 4

=item C<gccansipedantic>

From F<gccvers.U>:

If C<GNU> cc (gcc) is used, this variable will enable (if set) the
-ansi and -pedantic ccflags for building core files (through
cflags script). (See F<Porting/pumpkin.pod> for full description).

=item C<gccosandvers>

From F<gccvers.U>:

If C<GNU> cc (gcc) is used, this variable holds the operating system
and version used to compile gcc.  It is set to '' if not gcc,
or if nothing useful can be parsed as the os version.

=item C<gccversion>

From F<gccvers.U>:

If C<GNU> cc (gcc) is used, this variable holds C<1> or C<2> to
indicate whether the compiler is version 1 or 2.  This is used in
setting some of the default cflags.  It is set to '' if not gcc.

=item C<getgrent_r_proto>

From F<d_getgrent_r.U>:

This variable encodes the prototype of getgrent_r.
It is zero if d_getgrent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getgrent_r
is defined.

=item C<getgrgid_r_proto>

From F<d_getgrgid_r.U>:

This variable encodes the prototype of getgrgid_r.
It is zero if d_getgrgid_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getgrgid_r
is defined.

=item C<getgrnam_r_proto>

From F<d_getgrnam_r.U>:

This variable encodes the prototype of getgrnam_r.
It is zero if d_getgrnam_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getgrnam_r
is defined.

=item C<gethostbyaddr_r_proto>

From F<d_gethostbyaddr_r.U>:

This variable encodes the prototype of gethostbyaddr_r.
It is zero if d_gethostbyaddr_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_gethostbyaddr_r
is defined.

=item C<gethostbyname_r_proto>

From F<d_gethostbyname_r.U>:

This variable encodes the prototype of gethostbyname_r.
It is zero if d_gethostbyname_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_gethostbyname_r
is defined.

=item C<gethostent_r_proto>

From F<d_gethostent_r.U>:

This variable encodes the prototype of gethostent_r.
It is zero if d_gethostent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_gethostent_r
is defined.

=item C<getlogin_r_proto>

From F<d_getlogin_r.U>:

This variable encodes the prototype of getlogin_r.
It is zero if d_getlogin_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getlogin_r
is defined.

=item C<getnetbyaddr_r_proto>

From F<d_getnetbyaddr_r.U>:

This variable encodes the prototype of getnetbyaddr_r.
It is zero if d_getnetbyaddr_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getnetbyaddr_r
is defined.

=item C<getnetbyname_r_proto>

From F<d_getnetbyname_r.U>:

This variable encodes the prototype of getnetbyname_r.
It is zero if d_getnetbyname_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getnetbyname_r
is defined.

=item C<getnetent_r_proto>

From F<d_getnetent_r.U>:

This variable encodes the prototype of getnetent_r.
It is zero if d_getnetent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getnetent_r
is defined.

=item C<getprotobyname_r_proto>

From F<d_getprotobyname_r.U>:

This variable encodes the prototype of getprotobyname_r.
It is zero if d_getprotobyname_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getprotobyname_r
is defined.

=item C<getprotobynumber_r_proto>

From F<d_getprotobynumber_r.U>:

This variable encodes the prototype of getprotobynumber_r.
It is zero if d_getprotobynumber_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getprotobynumber_r
is defined.

=item C<getprotoent_r_proto>

From F<d_getprotoent_r.U>:

This variable encodes the prototype of getprotoent_r.
It is zero if d_getprotoent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getprotoent_r
is defined.

=item C<getpwent_r_proto>

From F<d_getpwent_r.U>:

This variable encodes the prototype of getpwent_r.
It is zero if d_getpwent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getpwent_r
is defined.

=item C<getpwnam_r_proto>

From F<d_getpwnam_r.U>:

This variable encodes the prototype of getpwnam_r.
It is zero if d_getpwnam_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getpwnam_r
is defined.

=item C<getpwuid_r_proto>

From F<d_getpwuid_r.U>:

This variable encodes the prototype of getpwuid_r.
It is zero if d_getpwuid_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getpwuid_r
is defined.

=item C<getservbyname_r_proto>

From F<d_getservbyname_r.U>:

This variable encodes the prototype of getservbyname_r.
It is zero if d_getservbyname_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getservbyname_r
is defined.

=item C<getservbyport_r_proto>

From F<d_getservbyport_r.U>:

This variable encodes the prototype of getservbyport_r.
It is zero if d_getservbyport_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getservbyport_r
is defined.

=item C<getservent_r_proto>

From F<d_getservent_r.U>:

This variable encodes the prototype of getservent_r.
It is zero if d_getservent_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getservent_r
is defined.

=item C<getspnam_r_proto>

From F<d_getspnam_r.U>:

This variable encodes the prototype of getspnam_r.
It is zero if d_getspnam_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_getspnam_r
is defined.

=item C<gidformat>

From F<gidf.U>:

This variable contains the format string used for printing a Gid_t.

=item C<gidsign>

From F<gidsign.U>:

This variable contains the signedness of a gidtype.
1 for unsigned, -1 for signed.

=item C<gidsize>

From F<gidsize.U>:

This variable contains the size of a gidtype in bytes.

=item C<gidtype>

From F<gidtype.U>:

This variable defines Gid_t to be something like gid_t, int,
ushort, or whatever type is used to declare the return type
of getgid().  Typically, it is the type of group ids in the kernel.

=item C<glibpth>

From F<libpth.U>:

This variable holds the general path (space-separated) used to
find libraries.  It may contain directories that do not exist on
this platform, libpth is the cleaned-up version.

=item C<gmake>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the gmake program.  After Configure runs,
the value is reset to a plain C<gmake> and is not useful.

=item C<gmtime_r_proto>

From F<d_gmtime_r.U>:

This variable encodes the prototype of gmtime_r.
It is zero if d_gmtime_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_gmtime_r
is defined.

=item C<gnulibc_version>

From F<d_gnulibc.U>:

This variable contains the version number of the C<GNU> C library.
It is usually something like F<2.2.5>.  It is a plain '' if this
is not the C<GNU> C library, or if the version is unknown.

=item C<grep>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the grep program.  After Configure runs,
the value is reset to a plain C<grep> and is not useful.

=item C<groupcat>

From F<nis.U>:

This variable contains a command that produces the text of the
F</etc/group> file.  This is normally "cat F</etc/group>", but can be
"ypcat group" when C<NIS> is used.
On some systems, such as os390, there may be no equivalent
command, in which case this variable is unset.

=item C<groupstype>

From F<groupstype.U>:

This variable defines Groups_t to be something like gid_t, int,
ushort, or whatever type is used for the second argument to
getgroups() and setgroups().  Usually, this is the same as
gidtype (gid_t), but sometimes it isn't.

=item C<gzip>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the gzip program.  After Configure runs,
the value is reset to a plain C<gzip> and is not useful.

=back

=head2 h

=over 4

=item C<h_fcntl>

From F<h_fcntl.U>:

This is variable gets set in various places to tell i_fcntl that
<fcntl.h> should be included.

=item C<h_sysfile>

From F<h_sysfile.U>:

This is variable gets set in various places to tell i_sys_file that
<sys/file.h> should be included.

=item C<hint>

From F<Oldconfig.U>:

Gives the type of hints used for previous answers. May be one of
C<default>, C<recommended> or C<previous>.

=item C<hostcat>

From F<nis.U>:

This variable contains a command that produces the text of the
F</etc/hosts> file.  This is normally "cat F</etc/hosts>", but can be
"ypcat hosts" when C<NIS> is used.
On some systems, such as os390, there may be no equivalent
command, in which case this variable is unset.

=item C<hostgenerate>

From F<Cross.U>:

This variable contains the path to a generate_uudmap binary that
can be run on the host C<OS> when cross-compiling.  Useful and
available only during Perl build.
Empty string '' if not cross-compiling.

=item C<hostosname>

From F<Cross.U>:

This variable contains the original value of C<$^O> for hostperl
when cross-compiling.  This is useful to pick the proper tools
when running build code in the host.
Empty string '' if not cross-compiling.

=item C<hostperl>

From F<Cross.U>:

This variable contains the path to a miniperl binary that can be
run on the host C<OS> when cross-compiling.  Useful and available only
during Perl build.
Empty string '' if not cross-compiling.

=item C<html1dir>

From F<html1dir.U>:

This variable contains the name of the directory in which html
source pages are to be put.  This directory is for pages
that describe whole programs, not libraries or modules.  It
is intended to correspond roughly to section 1 of the Unix
manuals.

=item C<html1direxp>

From F<html1dir.U>:

This variable is the same as the html1dir variable, but is filename
expanded at configuration time, for convenient use in makefiles.

=item C<html3dir>

From F<html3dir.U>:

This variable contains the name of the directory in which html
source pages are to be put.  This directory is for pages
that describe libraries or modules.  It is intended to
correspond roughly to section 3 of the Unix manuals.

=item C<html3direxp>

From F<html3dir.U>:

This variable is the same as the html3dir variable, but is filename
expanded at configuration time, for convenient use in makefiles.

=back

=head2 i

=over 4

=item C<i16size>

From F<perlxv.U>:

This variable is the size of an I16 in bytes.

=item C<i16type>

From F<perlxv.U>:

This variable contains the C type used for Perl's I16.

=item C<i32size>

From F<perlxv.U>:

This variable is the size of an I32 in bytes.

=item C<i32type>

From F<perlxv.U>:

This variable contains the C type used for Perl's I32.

=item C<i64size>

From F<perlxv.U>:

This variable is the size of an I64 in bytes.

=item C<i64type>

From F<perlxv.U>:

This variable contains the C type used for Perl's I64.

=item C<i8size>

From F<perlxv.U>:

This variable is the size of an I8 in bytes.

=item C<i8type>

From F<perlxv.U>:

This variable contains the C type used for Perl's I8.

=item C<i_arpainet>

From F<i_arpainet.U>:

This variable conditionally defines the C<I_ARPA_INET> symbol,
and indicates whether a C program should include <arpa/inet.h>.

=item C<i_bfd>

From F<i_bfd.U>:

This variable conditionally defines the C<I_BFD> symbol, and
indicates whether a C program can include <bfd.h>.

=item C<i_bsdioctl>

From F<i_sysioctl.U>:

This variable conditionally defines the C<I_SYS_BSDIOCTL> symbol, which
indicates to the C program that <sys/bsdioctl.h> exists and should
be included.

=item C<i_crypt>

From F<i_crypt.U>:

This variable conditionally defines the C<I_CRYPT> symbol, and indicates
whether a C program should include <crypt.h>.

=item C<i_db>

From F<i_db.U>:

This variable conditionally defines the C<I_DB> symbol, and indicates
whether a C program may include Berkeley's C<DB> include file <db.h>.

=item C<i_dbm>

From F<i_dbm.U>:

This variable conditionally defines the C<I_DBM> symbol, which
indicates to the C program that <dbm.h> exists and should
be included.

=item C<i_dirent>

From F<i_dirent.U>:

This variable conditionally defines C<I_DIRENT>, which indicates
to the C program that it should include <dirent.h>.

=item C<i_dlfcn>

From F<i_dlfcn.U>:

This variable conditionally defines the C<I_DLFCN> symbol, which
indicates to the C program that <dlfcn.h> exists and should
be included.

=item C<i_execinfo>

From F<i_execinfo.U>:

This variable conditionally defines the C<I_EXECINFO> symbol, and indicates
whether a C program may include <execinfo.h>, for backtrace() support.

=item C<i_fcntl>

From F<i_fcntl.U>:

This variable controls the value of C<I_FCNTL> (which tells
the C program to include <fcntl.h>).

=item C<i_fenv>

From F<i_fenv.U>:

This variable conditionally defines the C<I_FENV> symbol, which
indicates to the C program that <fenv.h> exists and should
be included.

=item C<i_fp>

From F<i_fp.U>:

This variable conditionally defines the C<I_FP> symbol, and indicates
whether a C program should include <fp.h>.

=item C<i_fp_class>

From F<i_fp_class.U>:

This variable conditionally defines the C<I_FP_CLASS> symbol, and indicates
whether a C program should include <fp_class.h>.

=item C<i_gdbm>

From F<i_gdbm.U>:

This variable conditionally defines the C<I_GDBM> symbol, which
indicates to the C program that <gdbm.h> exists and should
be included.

=item C<i_gdbm_ndbm>

From F<i_ndbm.U>:

This variable conditionally defines the C<I_GDBM_NDBM> symbol, which
indicates to the C program that <gdbm-F<ndbm.h>> exists and should
be included.  This is the location of the F<ndbm.h> compatibility file
in Debian 4.0.

=item C<i_gdbmndbm>

From F<i_ndbm.U>:

This variable conditionally defines the C<I_GDBMNDBM> symbol, which
indicates to the C program that <gdbm/ndbm.h> exists and should
be included.  This was the location of the F<ndbm.h> compatibility file
in RedHat 7.1.

=item C<i_grp>

From F<i_grp.U>:

This variable conditionally defines the C<I_GRP> symbol, and indicates
whether a C program should include <grp.h>.

=item C<i_ieeefp>

From F<i_ieeefp.U>:

This variable conditionally defines the C<I_IEEEFP> symbol, and indicates
whether a C program should include <ieeefp.h>.

=item C<i_inttypes>

From F<i_inttypes.U>:

This variable conditionally defines the C<I_INTTYPES> symbol,
and indicates whether a C program should include <inttypes.h>.

=item C<i_langinfo>

From F<i_langinfo.U>:

This variable conditionally defines the C<I_LANGINFO> symbol,
and indicates whether a C program should include <langinfo.h>.

=item C<i_libutil>

From F<i_libutil.U>:

This variable conditionally defines the C<I_LIBUTIL> symbol, and indicates
whether a C program should include <libutil.h>.

=item C<i_locale>

From F<i_locale.U>:

This variable conditionally defines the C<I_LOCALE> symbol,
and indicates whether a C program should include <locale.h>.

=item C<i_machcthr>

