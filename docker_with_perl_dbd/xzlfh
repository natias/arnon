=back

=for hackers
Found in file inline.h

=over 4

=item C<rpp_replace_at_NN>
X<rpp_replace_at_NN>

NOTE: C<rpp_replace_at_NN> is B<experimental> and may change or be
removed without notice.

A variant of rpp_replace_at() which assumes that the SV pointer on the
stack is non-NULL.

=over 3

 void  rpp_replace_at_NN(SV **sp, SV *sv)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<rpp_replace_at_norc>
X<rpp_replace_at_norc>

NOTE: C<rpp_replace_at_norc> is B<experimental> and may change or be
removed without notice.

Replace the SV at address sp within the stack with C<sv>, while suitably
adjusting the reference count of the old SV. Equivalent to C<*sp = sv>,
except with proper reference count handling.

C<sv>'s reference count doesn't get incremented. On non-C<PERL_RC_STACK>
builds, it gets mortalised too.

This is most useful where an SV has just been created and already has a
reference count of 1, but has not yet been anchored anywhere.

=over 3

 void  rpp_replace_at_norc(SV **sp, SV *sv)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<rpp_replace_at_norc_NN>
X<rpp_replace_at_norc_NN>

NOTE: C<rpp_replace_at_norc_NN> is B<experimental> and may change or be
removed without notice.

A variant of rpp_replace_at_norc() which assumes that the SV pointer on the
stack is non-NULL.

=over 3

 void  rpp_replace_at_norc_NN(SV **sp, SV *sv)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<rpp_replace_1_1>

=item C<rpp_replace_1_1_NN>

=item C<rpp_replace_1_IMM_NN>
X<rpp_replace_1_1>X<rpp_replace_1_1_NN>X<rpp_replace_1_IMM_NN>

NOTE: all these forms are B<experimental> and may change or be
removed without notice.

Replace the current top stack item with C<sv>, while suitably adjusting
reference counts. Equivalent to rpp_popfree_1(); rpp_push_1(sv), but
is more efficient and handles both SVs being the same.

The C<_NN> variant assumes that the pointer on the stack to the SV being
freed is non-NULL.

The C<IMM_NN> variant is like the C<_NN> variant, but in addition, assumes
that the single argument is an immortal such as <&PL_sv_undef> and, for
efficiency, will skip incrementing its reference count.

=over 3

 void  rpp_replace_1_1(SV *sv)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<rpp_replace_2_1>

=item C<rpp_replace_2_1_NN>

=item C<rpp_replace_2_IMM_NN>
X<rpp_replace_2_1>X<rpp_replace_2_1_NN>X<rpp_replace_2_IMM_NN>

NOTE: all these forms are B<experimental> and may change or be
removed without notice.

Replace the current top to stacks item with C<sv>, while suitably
adjusting reference counts. Equivalent to rpp_popfree_2(); rpp_push_1(sv),
but is more efficient and handles SVs being the same.

The C<_NN> variant assumes that the pointers on the stack to the SVs being
freed are non-NULL.

The C<IMM_NN> variant is like the C<_NN> variant, but in addition, assumes
that the single argument is an immortal such as <&PL_sv_undef> and, for
efficiency, will skip incrementing its reference count.

=over 3

 void  rpp_replace_2_1(SV *sv)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<rpp_stack_is_rc>
X<rpp_stack_is_rc>

NOTE: C<rpp_stack_is_rc> is B<experimental> and may change or be
removed without notice.

Returns a boolean value indicating whether the stack is currently
reference-counted. Note that if the stack is split (bottom half RC, top
half non-RC), this function returns false, even if the top half currently
contains zero items.

=over 3

 bool  rpp_stack_is_rc()

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<rpp_try_AMAGIC_1>

=item C<rpp_try_AMAGIC_2>
X<rpp_try_AMAGIC_1>X<rpp_try_AMAGIC_2>

NOTE: both forms are B<experimental> and may change or be
removed without notice.

Check whether either of the one or two SVs at the top of the stack is
magical or a ref, and in either case handle it specially: invoke get
magic, call an overload method, or replace a ref with a temporary numeric
value, as appropriate. If this function returns true, it indicates that
the correct return value is already on the stack. Intended to be used at
the beginning of the PP function for unary or binary ops.

=over 3

 bool  rpp_try_AMAGIC_1(int method, int flags)

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<XSPP_wrapped>
X<XSPP_wrapped>

NOTE: C<XSPP_wrapped> is B<experimental> and may change or be
removed without notice.

Declare and wrap a non-reference-counted PP-style function.
On traditional perl builds where the stack isn't reference-counted, this
just produces a function declaration like

  OP * xsppw_name(pTHX)

Conversely, in ref-counted builds it creates xsppw_name() as a small
wrapper function which calls the real function via a wrapper which
processes the args and return values to ensure that reference counts are
properly handled for code which uses old-style dSP, PUSHs(), POPs() etc,
which don't adjust the reference counts of the items they manipulate.

xsppw_nargs indicates how many arguments the function consumes off the
stack. It can be a constant value or an expression, such as

    ((PL_op->op_flags & OPf_STACKED) ? 2 : 1)

Alternatively if xsppw_nlists is 1, it indicates that the PP function
consumes a list (or - rarely - if 2, consumes two lists, like
pp_aassign()), as indicated by the top markstack position.

This is intended as a temporary fix when converting XS code to run under
PERL_RC_STACK builds. In the longer term, the PP function should be
rewritten to replace PUSHs() etc with rpp_push_1() etc.

=over 3

   XSPP_wrapped(xsppw_name, I32 xsppw_nargs, I32 xsppw_nlists)

=back

=back

=for hackers
Found in file pp.h

=head1 REGEXP Functions
X<RX_OFFS_END>X<RX_OFFS_START>X<RX_OFFS_VALID>X<RXp_OFFS_END>X<RXp_OFFS_START>X<RXp_OFFS_VALID>

=over 4

=item C<pregcomp>

Described in L<perlreguts>.

=over 3

 REGEXP *  pregcomp(SV * const pattern, const U32 flags)

=back

=back

=for hackers
Found in file pod/perlreguts.pod

=over 4

=item C<pregexec>

Described in L<perlreguts>.

=over 3

 I32  pregexec(REGEXP * const prog, char *stringarg, char *strend,
               char *strbeg, SSize_t minend, SV *screamer,
               U32 nosave)

=back

=back

=for hackers
Found in file pod/perlreguts.pod

=over 4

=item C<re_compile>
X<re_compile>

Compile the regular expression pattern C<pattern>, returning a pointer to the
compiled object for later matching with the internal regex engine.

This function is typically used by a custom regexp engine C<.comp()> function
to hand off to the core regexp engine those patterns it doesn't want to handle
itself (typically passing through the same flags it was called with).  In
almost all other cases, a regexp should be compiled by calling L</C<pregcomp>>
to compile using the currently active regexp engine.

If C<pattern> is already a C<REGEXP>, this function does nothing but return a
pointer to the input.  Otherwise the PV is extracted and treated like a string
representing a pattern.  See L<perlre>.

The possible flags for C<rx_flags> are documented in L<perlreapi>.  Their names
all begin with C<RXf_>.

=over 3

 REGEXP *  re_compile(SV * const pattern, U32 orig_rx_flags)

=back

=back

=for hackers
Found in file regcomp.c

=over 4

=item C<re_dup_guts>
X<re_dup_guts>

Duplicate a regexp.

This routine is expected to clone a given regexp structure. It is only
compiled under USE_ITHREADS.

After all of the core data stored in struct regexp is duplicated
the C<regexp_engine.dupe> method is used to copy any private data
stored in the *pprivate pointer. This allows extensions to handle
any duplication they need to do.

=over 3

 void  re_dup_guts(const REGEXP *sstr, REGEXP *dstr,
                   CLONE_PARAMS *param)

=back

=back

=for hackers
Found in file regcomp.c

=over 4

=item C<REGEX_LOCALE_CHARSET>

Described in L<perlreapi>.

=back

=for hackers
Found in file pod/perlreapi.pod

=over 4

=item C<REGEXP>

Described in L<perlreapi>.

=back

=for hackers
Found in file pod/perlreapi.pod

=over 4

=item C<regexp_engine>
X<regexp_engine>

When a regexp is compiled, its C<engine> field is then set to point at
the appropriate structure, so that when it needs to be used Perl can find
the right routines to do so.

In order to install a new regexp handler, C<$^H{regcomp}> is set
to an integer which (when casted appropriately) resolves to one of these
structures.  When compiling, the C<comp> method is executed, and the
resulting C<regexp> structure's engine field is expected to point back at
the same structure.

The pTHX_ symbol in the definition is a macro used by Perl under threading
to provide an extra argument to the routine holding a pointer back to
the interpreter that is executing the regexp. So under threading all
routines get an extra argument.

=back

=for hackers
Found in file pod/perlreapi.pod

=over 4

=item C<regexp_paren_pair>

Described in L<perlreapi>.

=back

=for hackers
Found in file pod/perlreapi.pod

=over 4

=item C<regmatch_info>
X<regmatch_info>

Some basic information about the current match that is created by
Perl_regexec_flags and then passed to regtry(), regmatch() etc.
It is allocated as a local var on the stack, so nothing should be
stored in it that needs preserving or clearing up on croak().
For that, see the aux_info and aux_info_eval members of the
regmatch_state union.

=back

=for hackers
Found in file regexp.h

=over 4

=item C<REXEC_COPY_SKIP_POST>

=item C<REXEC_COPY_SKIP_PRE>

=item C<REXEC_COPY_STR>

Described in L<perlreapi>.

=back

=for hackers
Found in file pod/perlreapi.pod

=over 4

=item C<RXapif_ALL>

=item C<RXapif_CLEAR>

=item C<RXapif_DELETE>

=item C<RXapif_EXISTS>

=item C<RXapif_FETCH>

=item C<RXapif_FIRSTKEY>

=item C<RXapif_NEXTKEY>

=item C<RXapif_ONE>

=item C<RXapif_REGNAME>

=item C<RXapif_REGNAMES>

=item C<RXapif_REGNAMES_COUNT>

=item C<RXapif_SCALAR>

=item C<RXapif_STORE>

Described in L<perlreapi>.

=back

=for hackers
Found in file pod/perlreapi.pod

=over 4

=item C<RX_BUFF_IDX_CARET_FULLMATCH>

=item C<RX_BUFF_IDX_CARET_POSTMATCH>

=item C<RX_BUFF_IDX_CARET_PREMATCH>

=item C<RX_BUFF_IDX_FULLMATCH>

=item C<RX_BUFF_IDX_POSTMATCH>

=item C<RX_BUFF_IDX_PREMATCH>

Described in L<perlreapi>.

=back

=for hackers
Found in file pod/perlreapi.pod

=over 4

=item C<RXf_NO_INPLACE_SUBST>

=item C<RXf_NULL>

=item C<RXf_SKIPWHITE>

=item C<RXf_SPLIT>

=item C<RXf_START_ONLY>

=item C<RXf_WHITE>

Described in L<perlreapi>.

=back

=for hackers
Found in file pod/perlreapi.pod

=over 4

=item C<RXf_PMf_EXTENDED>

=item C<RXf_PMf_FOLD>

=item C<RXf_PMf_KEEPCOPY>

=item C<RXf_PMf_MULTILINE>

=item C<RXf_PMf_SINGLELINE>

Described in L<perlreapi>.

=back

=for hackers
Found in file pod/perlreapi.pod

=over 4

=item C<RX_MATCH_COPIED>

Described in L<perlreapi>.

=over 3

   RX_MATCH_COPIED(const REGEXP * rx_sv)

=back

=back

=for hackers
Found in file pod/perlreapi.pod

=over 4

=item C<struct regexp>

Described in L<perlreapi>.

=back

=for hackers
Found in file pod/perlreapi.pod

=over 4

=item C<SvRX>
X<SvRX>

Convenience macro to get the REGEXP from a SV.  This is approximately
equivalent to the following snippet:

    if (SvMAGICAL(sv))
        mg_get(sv);
    if (SvROK(sv))
        sv = MUTABLE_SV(SvRV(sv));
    if (SvTYPE(sv) == SVt_REGEXP)
        return (REGEXP*) sv;

C<NULL> will be returned if a REGEXP* is not found.

=over 3

 REGEXP *  SvRX(SV *sv)

=back

=back

=for hackers
Found in file regexp.h

=over 4

=item C<SvRXOK>
X<SvRXOK>

Returns a boolean indicating whether the SV (or the one it references)
is a REGEXP.

If you want to do something with the REGEXP* later use SvRX instead
and check for NULL.

=over 3

 bool  SvRXOK(SV* sv)

=back

=back

=for hackers
Found in file regexp.h

=over 4

=item C<SV_SAVED_COPY>

Described in L<perlreapi>.

=back

=for hackers
Found in file pod/perlreapi.pod

=head1 Reports and Formats

These are used in the simple report generation feature of Perl.
See L<perlform>.


=over 4

=item C<IoBOTTOM_GV>

Described in L<perlguts>.

=over 3

 GV *  IoBOTTOM_GV(IO *io)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<IoBOTTOM_NAME>

Described in L<perlguts>.

=over 3

 char *  IoBOTTOM_NAME(IO *io)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<IoFMT_GV>

Described in L<perlguts>.

=over 3

 GV *  IoFMT_GV(IO *io)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<IoFMT_NAME>

Described in L<perlguts>.

=over 3

 char *  IoFMT_NAME(IO *io)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<IoLINES>

Described in L<perlguts>.

=over 3

 IV  IoLINES(IO *io)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<IoLINES_LEFT>

Described in L<perlguts>.

=over 3

 IV  IoLINES_LEFT(IO *io)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<IoPAGE>

Described in L<perlguts>.

=over 3

 IV  IoPAGE(IO *io)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<IoPAGE_LEN>

Described in L<perlguts>.

=over 3

 IV  IoPAGE_LEN(IO *io)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<IoTOP_GV>

Described in L<perlguts>.

=over 3

 GV *  IoTOP_GV(IO *io)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<IoTOP_NAME>

Described in L<perlguts>.

=over 3

 char *  IoTOP_NAME(IO *io)

=back

=back

=for hackers
Found in file pod/perlguts.pod

=head1 Signals

=over 4

=item C<HAS_SIGINFO_SI_ADDR>
X<HAS_SIGINFO_SI_ADDR>

This symbol, if defined, indicates that C<siginfo_t> has the
C<si_addr> member

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SIGINFO_SI_BAND>
X<HAS_SIGINFO_SI_BAND>

This symbol, if defined, indicates that C<siginfo_t> has the
C<si_band> member

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SIGINFO_SI_ERRNO>
X<HAS_SIGINFO_SI_ERRNO>

This symbol, if defined, indicates that C<siginfo_t> has the
C<si_errno> member

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SIGINFO_SI_PID>
X<HAS_SIGINFO_SI_PID>

This symbol, if defined, indicates that C<siginfo_t> has the
C<si_pid> member

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SIGINFO_SI_STATUS>
X<HAS_SIGINFO_SI_STATUS>

This symbol, if defined, indicates that C<siginfo_t> has the
C<si_status> member

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SIGINFO_SI_UID>
X<HAS_SIGINFO_SI_UID>

This symbol, if defined, indicates that C<siginfo_t> has the
C<si_uid> member

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SIGINFO_SI_VALUE>
X<HAS_SIGINFO_SI_VALUE>

This symbol, if defined, indicates that C<siginfo_t> has the
C<si_value> member

=back

=for hackers
Found in file config.h

=over 4

=item C<PERL_SIGNALS_UNSAFE_FLAG>
X<PERL_SIGNALS_UNSAFE_FLAG>

If this bit in C<PL_signals> is set, the system is uing the pre-Perl 5.8
unsafe signals.  See L<perlrun/PERL_SIGNALS> and L<perlipc/Deferred Signals
(Safe Signals)>.

=over 3

 U32  PERL_SIGNALS_UNSAFE_FLAG

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<rsignal>
X<rsignal>

A wrapper for the C library functions L<sigaction(2)> or L<signal(2)>.
Use this instead of those libc functions, as the Perl version gives the
safest available implementation, and knows things that interact with the
rest of the perl interpreter.

=over 3

 Sighandler_t  rsignal(int i, Sighandler_t t)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<rsignal_state>
X<rsignal_state>

Returns a the current signal handler for signal C<signo>.
See L</C<rsignal>>.

=over 3

 Sighandler_t  rsignal_state(int i)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<Sigjmp_buf>
X<Sigjmp_buf>

This is the buffer type to be used with Sigsetjmp and Siglongjmp.

=back

=for hackers
Found in file config.h

=over 4

=item C<Siglongjmp>
X<Siglongjmp>

This macro is used in the same way as C<siglongjmp()>, but will invoke
traditional C<longjmp()> if siglongjmp isn't available.
See C<L</HAS_SIGSETJMP>>.

=over 3

 void  Siglongjmp(jmp_buf env, int val)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<SIG_NAME>
X<SIG_NAME>

This symbol contains a list of signal names in order of
signal number. This is intended
to be used as a static array initialization, like this:

 char *sig_name[] = { SIG_NAME };

The signals in the list are separated with commas, and each signal
is surrounded by double quotes. There is no leading C<SIG> in the signal
name, i.e. C<SIGQUIT> is known as "C<QUIT>".
Gaps in the signal numbers (up to C<NSIG>) are filled in with C<NUMnn>,
etc., where nn is the actual signal number (e.g. C<NUM37>).
The signal number for C<sig_name[i]> is stored in C<sig_num[i]>.
The last element is 0 to terminate the list with a C<NULL>.  This
corresponds to the 0 at the end of the C<sig_name_init> list.
Note that this variable is initialized from the C<sig_name_init>,
not from C<sig_name> (which is unused).

=back

