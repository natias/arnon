=head3 C<qr/\b{wb}/>

C<wb> stands for Word Boundary.  It is a Unicode property
that finds the boundary between words.  This is similar to the plain
C<\b> (without braces) but is more suitable for natural language
processing.  It knows, for example, that apostrophes can occur in the
middle of words.  See L<perlrebackslash/\b{}, \b, \B{}, \B> for details.

=head3 C<qr/\b{sb}/>

C<sb> stands for Sentence Boundary.  It is a Unicode property
to aid in parsing natural language sentences.
See L<perlrebackslash/\b{}, \b, \B{}, \B> for details.

=head2 Non-Capturing Regular Expression Flag

Regular expressions now support a C</n> flag that disables capturing
and filling in C<$1>, C<$2>, etc inside of groups:

  "hello" =~ /(hi|hello)/n; # $1 is not set

This is equivalent to putting C<?:> at the beginning of every capturing group.

See L<perlre/"n"> for more information.

=head2 C<use re 'strict'>

This applies stricter syntax rules to regular expression patterns
compiled within its scope. This will hopefully alert you to typos and
other unintentional behavior that backwards-compatibility issues prevent
us from reporting in normal regular expression compilations.  Because the
behavior of this is subject to change in future Perl releases as we gain
experience, using this pragma will raise a warning of category
C<experimental::re_strict>.
See L<'strict' in re|re/'strict' mode>.

=head2 Unicode 7.0 (with correction) is now supported

For details on what is in this release, see
L<http://www.unicode.org/versions/Unicode7.0.0/>.
The version of Unicode 7.0 that comes with Perl includes
a correction dealing with glyph shaping in Arabic
(see L<http://www.unicode.org/errata/#current_errata>).


=head2 S<C<use locale>> can restrict which locale categories are affected

It is now possible to pass a parameter to S<C<use locale>> to specify
a subset of locale categories to be locale-aware, with the remaining
ones unaffected.  See L<perllocale/The "use locale" pragma> for details.

=head2 Perl now supports POSIX 2008 locale currency additions

On platforms that are able to handle POSIX.1-2008, the
hash returned by
L<C<POSIX::localeconv()>|perllocale/The localeconv function>
includes the international currency fields added by that version of the
POSIX standard.  These are
C<int_n_cs_precedes>,
C<int_n_sep_by_space>,
C<int_n_sign_posn>,
C<int_p_cs_precedes>,
C<int_p_sep_by_space>,
and
C<int_p_sign_posn>.

=head2 Better heuristics on older platforms for determining locale UTF-8ness

On platforms that implement neither the C99 standard nor the POSIX 2001
standard, determining if the current locale is UTF-8 or not depends on
heuristics.  These are improved in this release.

=head2 Aliasing via reference

Variables and subroutines can now be aliased by assigning to a reference:

    \$c = \$d;
    \&x = \&y;

Aliasing can also be accomplished
by using a backslash before a C<foreach> iterator variable; this is
perhaps the most useful idiom this feature provides:

    foreach \%hash (@array_of_hash_refs) { ... }

This feature is experimental and must be enabled via S<C<use feature
'refaliasing'>>.  It will warn unless the C<experimental::refaliasing>
warnings category is disabled.

See L<perlref/Assigning to References>

=head2 C<prototype> with no arguments

C<prototype()> with no arguments now infers C<$_>.
L<[GH #14376]|https://github.com/Perl/perl5/issues/14376>.

=head2 New C<:const> subroutine attribute

The C<const> attribute can be applied to an anonymous subroutine.  It
causes the new sub to be executed immediately whenever one is created
(I<i.e.> when the C<sub> expression is evaluated).  Its value is captured
and used to create a new constant subroutine that is returned.  This
feature is experimental.  See L<perlsub/Constant Functions>.

=head2 C<fileno> now works on directory handles

When the relevant support is available in the operating system, the
C<fileno> builtin now works on directory handles, yielding the
underlying file descriptor in the same way as for filehandles. On
operating systems without such support, C<fileno> on a directory handle
continues to return the undefined value, as before, but also sets C<$!> to
indicate that the operation is not supported.

Currently, this uses either a C<dd_fd> member in the OS C<DIR>
structure, or a C<dirfd(3)> function as specified by POSIX.1-2008.

=head2 List form of pipe open implemented for Win32

The list form of pipe:

  open my $fh, "-|", "program", @arguments;

is now implemented on Win32.  It has the same limitations as C<system
LIST> on Win32, since the Win32 API doesn't accept program arguments
as a list.

=head2 Assignment to list repetition

C<(...) x ...> can now be used within a list that is assigned to, as long
as the left-hand side is a valid lvalue.  This allows S<C<(undef,undef,$foo)
= that_function()>> to be written as S<C<((undef)x2, $foo) = that_function()>>.

=head2 Infinity and NaN (not-a-number) handling improved

Floating point values are able to hold the special values infinity, negative
infinity, and NaN (not-a-number).  Now we more robustly recognize and
propagate the value in computations, and on output normalize them to the strings
C<Inf>, C<-Inf>, and C<NaN>.

See also the L<POSIX> enhancements.

=head2 Floating point parsing has been improved

Parsing and printing of floating point values has been improved.

As a completely new feature, hexadecimal floating point literals
(like C<0x1.23p-4>)  are now supported, and they can be output with
S<C<printf "%a">>. See L<perldata/Scalar value constructors> for more
details.

=head2 Packing infinity or not-a-number into a character is now fatal

Before, when trying to pack infinity or not-a-number into a
(signed) character, Perl would warn, and assumed you tried to
pack C<< 0xFF >>; if you gave it as an argument to C<< chr >>,
C<< U+FFFD >> was returned.

But now, all such actions (C<< pack >>, C<< chr >>, and C<< print '%c' >>)
result in a fatal error.

=head2 Experimental C Backtrace API

Perl now supports (via a C level API) retrieving
the C level backtrace (similar to what symbolic debuggers like gdb do).

The backtrace returns the stack trace of the C call frames,
with the symbol names (function names), the object names (like "perl"),
and if it can, also the source code locations (file:line).

The supported platforms are Linux and OS X (some *BSD might work at
least partly, but they have not yet been tested).

The feature needs to be enabled with C<Configure -Dusecbacktrace>.

See L<perlhacktips/"C backtrace"> for more information.

=head1 Security

=head2 Perl is now compiled with C<-fstack-protector-strong> if available

Perl has been compiled with the anti-stack-smashing option
C<-fstack-protector> since 5.10.1.  Now Perl uses the newer variant
called C<-fstack-protector-strong>, if available.

=head2 The L<Safe> module could allow outside packages to be replaced

Critical bugfix: outside packages could be replaced.  L<Safe> has
been patched to 2.38 to address this.

=head2 Perl is now always compiled with C<-D_FORTIFY_SOURCE=2> if available

The 'code hardening' option called C<_FORTIFY_SOURCE>, available in
gcc 4.*, is now always used for compiling Perl, if available.

Note that this isn't necessarily a huge step since in many platforms
the step had already been taken several years ago: many Linux
distributions (like Fedora) have been using this option for Perl,
and OS X has enforced the same for many years.

=head1 Incompatible Changes

=head2 Subroutine signatures moved before attributes

The experimental sub signatures feature, as introduced in 5.20, parsed
signatures after attributes. In this release, following feedback from users
of the experimental feature, the positioning has been moved such that
signatures occur after the subroutine name (if any) and before the attribute
list (if any).

=head2 C<&> and C<\&> prototypes accepts only subs

The C<&> prototype character now accepts only anonymous subs (C<sub
{...}>), things beginning with C<\&>, or an explicit C<undef>.  Formerly
it erroneously also allowed references to arrays, hashes, and lists.
L<[GH #2776]|https://github.com/Perl/perl5/issues/2776>.
L<[GH #14186]|https://github.com/Perl/perl5/issues/14186>.
L<[GH #14353]|https://github.com/Perl/perl5/issues/14353>.

In addition, the C<\&> prototype was allowing subroutine calls, whereas
now it only allows subroutines: C<&foo> is still permitted as an argument,
while C<&foo()> and C<foo()> no longer are.
L<[GH #10633]|https://github.com/Perl/perl5/issues/10633>.

=head2 C<use encoding> is now lexical

The L<encoding> pragma's effect is now limited to lexical scope.  This
pragma is deprecated, but in the meantime, it could adversely affect
unrelated modules that are included in the same program; this change
fixes that.

=head2 List slices returning empty lists

List slices now return an empty list only if the original list was empty
(or if there are no indices).  Formerly, a list slice would return an empty
list if all indices fell outside the original list; now it returns a list
of C<undef> values in that case.
L<[GH #12335]|https://github.com/Perl/perl5/issues/12335>.

=head2 C<\N{}> with a sequence of multiple spaces is now a fatal error

E.g. S<C<\N{TOOE<nbsp>E<nbsp>MANY SPACES}>> or S<C<\N{TRAILING SPACE }>>.
This has been deprecated since v5.18.

=head2 S<C<use UNIVERSAL '...'>> is now a fatal error

Importing functions from C<UNIVERSAL> has been deprecated since v5.12, and
is now a fatal error.  S<C<use UNIVERSAL>> without any arguments is still
allowed.

=head2 In double-quotish C<\cI<X>>, I<X> must now be a printable ASCII character

In prior releases, failure to do this raised a deprecation warning.

=head2 Splitting the tokens C<(?> and C<(*> in regular expressions is now a fatal compilation error

These had been deprecated since v5.18.

=head2 C<qr/foo/x> now ignores all Unicode pattern white space

The C</x> regular expression modifier allows the pattern to contain
white space and comments (both of which are ignored) for improved
readability.  Until now, not all the white space characters that Unicode
designates for this purpose were handled.  The additional ones now
recognized are:

    U+0085 NEXT LINE
    U+200E LEFT-TO-RIGHT MARK
    U+200F RIGHT-TO-LEFT MARK
    U+2028 LINE SEPARATOR
    U+2029 PARAGRAPH SEPARATOR

The use of these characters with C</x> outside bracketed character
classes and when not preceded by a backslash has raised a deprecation
warning since v5.18.  Now they will be ignored.

=head2 Comment lines within S<C<(?[ ])>> are now ended only by a C<\n>

S<C<(?[ ])>>  is an experimental feature, introduced in v5.18.  It operates
as if C</x> is always enabled.  But there was a difference: comment
lines (following a C<#> character) were terminated by anything matching
C<\R> which includes all vertical whitespace, such as form feeds.  For
consistency, this is now changed to match what terminates comment lines
outside S<C<(?[ ])>>, namely a C<\n> (even if escaped), which is the
same as what terminates a heredoc string and formats.

=head2 C<(?[...])> operators now follow standard Perl precedence

This experimental feature allows set operations in regular expression patterns.
Prior to this, the intersection operator had the same precedence as the other
binary operators.  Now it has higher precedence.  This could lead to different
outcomes than existing code expects (though the documentation has always noted
that this change might happen, recommending fully parenthesizing the
expressions).  See L<perlrecharclass/Extended Bracketed Character Classes>.

=head2 Omitting C<%> and C<@> on hash and array names is no longer permitted

Really old Perl let you omit the C<@> on array names and the C<%> on hash
names in some spots.  This has issued a deprecation warning since Perl
5.000, and is no longer permitted.

=head2 C<"$!"> text is now in English outside the scope of C<use locale>

Previously, the text, unlike almost everything else, always came out
based on the current underlying locale of the program.  (Also affected
on some systems is C<"$^E">.)  For programs that are unprepared to
handle locale differences, this can cause garbage text to be displayed.
It's better to display text that is translatable via some tool than
garbage text which is much harder to figure out.

=head2 C<"$!"> text will be returned in UTF-8 when appropriate

The stringification of C<$!> and C<$^E> will have the UTF-8 flag set
when the text is actually non-ASCII UTF-8.  This will enable programs
that are set up to be locale-aware to properly output messages in the
user's native language.  Code that needs to continue the 5.20 and
earlier behavior can do the stringification within the scopes of both
S<C<use bytes>> and S<C<use locale ":messages">>.  Within these two
scopes, no other Perl operations will
be affected by locale; only C<$!> and C<$^E> stringification.  The
C<bytes> pragma causes the UTF-8 flag to not be set, just as in previous
Perl releases.  This resolves
L<[GH #12035]|https://github.com/Perl/perl5/issues/12035>.

=head2 Support for C<?PATTERN?> without explicit operator has been removed

The C<m?PATTERN?> construct, which allows matching a regex only once,
previously had an alternative form that was written directly with a question
mark delimiter, omitting the explicit C<m> operator.  This usage has produced
a deprecation warning since 5.14.0.  It is now a syntax error, so that the
question mark can be available for use in new operators.

=head2 C<defined(@array)> and C<defined(%hash)> are now fatal errors

These have been deprecated since v5.6.1 and have raised deprecation
warnings since v5.16.

=head2 Using a hash or an array as a reference are now fatal errors

For example, C<< %foo->{"bar"} >> now causes a fatal compilation
error.  These have been deprecated since before v5.8, and have raised
deprecation warnings since then.

=head2 Changes to the C<*> prototype

The C<*> character in a subroutine's prototype used to allow barewords to take
precedence over most, but not all, subroutine names.  It was never
consistent and exhibited buggy behavior.

Now it has been changed, so subroutines always take precedence over barewords,
which brings it into conformity with similarly prototyped built-in functions:

    sub splat(*) { ... }
    sub foo { ... }
    splat(foo); # now always splat(foo())
    splat(bar); # still splat('bar') as before
    close(foo); # close(foo())
    close(bar); # close('bar')

=head1 Deprecations

=head2 Setting C<${^ENCODING}> to anything but C<undef>

This variable allows Perl scripts to be written in an encoding other than
ASCII or UTF-8.  However, it affects all modules globally, leading
to wrong answers and segmentation faults.  New scripts should be written
in UTF-8; old scripts should be converted to UTF-8, which is easily done
with the L<piconv> utility.

=head2 Use of non-graphic characters in single-character variable names

The syntax for single-character variable names is more lenient than
for longer variable names, allowing the one-character name to be a
punctuation character or even invisible (a non-graphic).  Perl v5.20
deprecated the ASCII-range controls as such a name.  Now, all
non-graphic characters that formerly were allowed are deprecated.
The practical effect of this occurs only when not under C<S<use
utf8>>, and affects just the C1 controls (code points 0x80 through
0xFF), NO-BREAK SPACE, and SOFT HYPHEN.

=head2 Inlining of C<sub () { $var }> with observable side-effects

In many cases Perl makes S<C<sub () { $var }>> into an inlinable constant
subroutine, capturing the value of C<$var> at the time the C<sub> expression
is evaluated.  This can break the closure behavior in those cases where
C<$var> is subsequently modified, since the subroutine won't return the
changed value. (Note that this all only applies to anonymous subroutines
with an empty prototype (S<C<sub ()>>).)

This usage is now deprecated in those cases where the variable could be
modified elsewhere.  Perl detects those cases and emits a deprecation
warning.  Such code will likely change in the future and stop producing a
constant.

If your variable is only modified in the place where it is declared, then
Perl will continue to make the sub inlinable with no warnings.

    sub make_constant {
        my $var = shift;
        return sub () { $var }; # fine
    }

    sub make_constant_deprecated {
        my $var;
        $var = shift;
        return sub () { $var }; # deprecated
    }

    sub make_constant_deprecated2 {
        my $var = shift;
        log_that_value($var); # could modify $var
        return sub () { $var }; # deprecated
    }

In the second example above, detecting that C<$var> is assigned to only once
is too hard to detect.  That it happens in a spot other than the C<my>
declaration is enough for Perl to find it suspicious.

This deprecation warning happens only for a simple variable for the body of
the sub.  (A C<BEGIN> block or C<use> statement inside the sub is ignored,
because it does not become part of the sub's body.)  For more complex
cases, such as S<C<sub () { do_something() if 0; $var }>> the behavior has
changed such that inlining does not happen if the variable is modifiable
elsewhere.  Such cases should be rare.

=head2 Use of multiple C</x> regexp modifiers

It is now deprecated to say something like any of the following:

    qr/foo/xx;
    /(?xax:foo)/;
    use re qw(/amxx);

That is, now C<x> should only occur once in any string of contiguous
regular expression pattern modifiers.  We do not believe there are any
occurrences of this in all of CPAN.  This is in preparation for a future
Perl release having C</xx> permit white-space for readability in
bracketed character classes (those enclosed in square brackets:
C<[...]>).

=head2 Using a NO-BREAK space in a character alias for C<\N{...}> is now deprecated

This non-graphic character is essentially indistinguishable from a
regular space, and so should not be allowed.  See
L<charnames/CUSTOM ALIASES>.

=head2 A literal C<"{"> should now be escaped in a pattern

If you want a literal left curly bracket (also called a left brace) in a
regular expression pattern, you should now escape it by either
preceding it with a backslash (C<"\{">) or enclosing it within square
brackets C<"[{]">, or by using C<\Q>; otherwise a deprecation warning
will be raised.  This was first announced as forthcoming in the v5.16
release; it will allow future extensions to the language to happen.

=head2 Making all warnings fatal is discouraged

The documentation for L<fatal warnings|warnings/Fatal Warnings> notes that
C<< use warnings FATAL => 'all' >> is discouraged, and provides stronger
language about the risks of fatal warnings in general.

=head1 Performance Enhancements

=over 4

=item *

If a method or class name is known at compile time, a hash is precomputed
to speed up run-time method lookup.  Also, compound method names like
C<SUPER::new> are parsed at compile time, to save having to parse them at
run time.

=item *

Array and hash lookups (especially nested ones) that use only constants
or simple variables as keys, are now considerably faster. See
L</Internal Changes> for more details.

=item *

C<(...)x1>, C<("constant")x0> and C<($scalar)x0> are now optimised in list
context.  If the right-hand argument is a constant 1, the repetition
operator disappears.  If the right-hand argument is a constant 0, the whole
expression is optimised to the empty list, so long as the left-hand
argument is a simple scalar or constant.  (That is, C<(foo())x0> is not
subject to this optimisation.)

=item *

C<substr> assignment is now optimised into 4-argument C<substr> at the end
of a subroutine (or as the argument to C<return>).  Previously, this
optimisation only happened in void context.

=item *

In C<"\L...">, C<"\Q...">, etc., the extra "stringify" op is now optimised
away, making these just as fast as C<lcfirst>, C<quotemeta>, etc.

=item *

Assignment to an empty list is now sometimes faster.  In particular, it
never calls C<FETCH> on tied arguments on the right-hand side, whereas it
used to sometimes.

=item *

There is a performance improvement of up to 20% when C<length> is applied to
a non-magical, non-tied string, and either C<use bytes> is in scope or the
string doesn't use UTF-8 internally.

=item *

On most perl builds with 64-bit integers, memory usage for non-magical,
non-tied scalars containing only a floating point value has been reduced
by between 8 and 32 bytes, depending on OS.

=item *

In C<@array = split>, the assignment can be optimized away, so that C<split>
writes directly to the array.  This optimisation was happening only for
package arrays other than C<@_>, and only sometimes.  Now this
optimisation happens almost all the time.

=item *

C<join> is now subject to constant folding.  So for example
S<C<join "-", "a", "b">> is converted at compile-time to C<"a-b">.
Moreover, C<join> with a scalar or constant for the separator and a
single-item list to join is simplified to a stringification, and the
separator doesn't even get evaluated.

=item *

C<qq(@array)> is implemented using two ops: a stringify op and a join op.
If the C<qq> contains nothing but a single array, the stringification is
optimized away.

=item *

S<C<our $var>> and S<C<our($s,@a,%h)>> in void context are no longer evaluated at
run time.  Even a whole sequence of S<C<our $foo;>> statements will simply be
skipped over.  The same applies to C<state> variables.

=item *

Many internal functions have been refactored to improve performance and reduce
their memory footprints.
L<[GH #13659]|https://github.com/Perl/perl5/issues/13659>
L<[GH #13856]|https://github.com/Perl/perl5/issues/13856>
L<[GH #13874]|https://github.com/Perl/perl5/issues/13874>

=item *

C<-T> and C<-B> filetests will return sooner when an empty file is detected.
L<[GH #13686]|https://github.com/Perl/perl5/issues/13686>

=item *

Hash lookups where the key is a constant are faster.

=item *

Subroutines with an empty prototype and a body containing just C<undef> are now
eligible for inlining.
L<[GH #14077]|https://github.com/Perl/perl5/issues/14077>

=item *

Subroutines in packages no longer need to be stored in typeglobs:
declaring a subroutine will now put a simple sub reference directly in the
stash if possible, saving memory.  The typeglob still notionally exists,
so accessing it will cause the stash entry to be upgraded to a typeglob
(I<i.e.> this is just an internal implementation detail).
This optimization does not currently apply to XSUBs or exported
subroutines, and method calls will undo it, since they cache things in
typeglobs.
L<[GH #13392]|https://github.com/Perl/perl5/issues/13392>

=item *

The functions C<utf8::native_to_unicode()> and C<utf8::unicode_to_native()>
(see L<utf8>) are now optimized out on ASCII platforms.  There is now not even
a minimal performance hit in writing code portable between ASCII and EBCDIC
platforms.

=item *

Win32 Perl uses 8 KB less of per-process memory than before for every perl
process, because some data is now memory mapped from disk and shared
between processes from the same perl binary.

=back

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

Many of the libraries distributed with perl have been upgraded since v5.20.0.
For a complete list of changes, run:

  corelist --diff 5.20.0 5.22.0

You can substitute your favorite version in place of 5.20.0, too.

Some notable changes include:

=over 4

=item *

L<Archive::Tar> has been upgraded to version 2.04.

Tests can now be run in parallel.

=item *

L<attributes> has been upgraded to version 0.27.

The usage of C<memEQs> in the XS has been corrected.
L<[GH #14072]|https://github.com/Perl/perl5/issues/14072>

Avoid reading beyond the end of a buffer. [perl #122629]

=item *

L<B> has been upgraded to version 1.58.

It provides a new C<B::safename> function, based on the existing
C<< B::GV->SAFENAME >>, that converts C<\cOPEN> to C<^OPEN>.

Nulled COPs are now of class C<B::COP>, rather than C<B::OP>.

C<B::REGEXP> objects now provide a C<qr_anoncv> method for accessing the
implicit CV associated with C<qr//> things containing code blocks, and a
C<compflags> method that returns the pertinent flags originating from the
C<qr//blahblah> op.

C<B::PMOP> now provides a C<pmregexp> method returning a C<B::REGEXP> object.
Two new classes, C<B::PADNAME> and C<B::PADNAMELIST>, have been introduced.

A bug where, after an ithread creation or pseudofork, special/immortal SVs in
the child ithread/pseudoprocess did not have the correct class of
C<B::SPECIAL>, has been fixed.
The C<id> and C<outid> PADLIST methods have been added.

=item *

L<B::Concise> has been upgraded to version 0.996.

Null ops that are part of the execution chain are now given sequence
numbers.

Private flags for nulled ops are now dumped with mnemonics as they would be
for the non-nulled counterparts.

=item *

L<B::Deparse> has been upgraded to version 1.35.

It now deparses C<+sub : attr { ... }> correctly at the start of a
statement.  Without the initial C<+>, C<sub> would be a statement label.

C<BEGIN> blocks are now emitted in the right place most of the time, but
the change unfortunately introduced a regression, in that C<BEGIN> blocks
occurring just before the end of the enclosing block may appear below it
instead.

C<B::Deparse> no longer puts erroneous C<local> here and there, such as for
C<LIST = tr/a//d>.  [perl #119815]

Adjacent C<use> statements are no longer accidentally nested if one
contains a C<do> block.  [perl #115066]

Parenthesised arrays in lists passed to C<\> are now correctly deparsed
with parentheses (I<e.g.>, C<\(@a, (@b), @c)> now retains the parentheses
around @b), thus preserving the flattening behavior of referenced
parenthesised arrays.  Formerly, it only worked for one array: C<\(@a)>.

C<local our> is now deparsed correctly, with the C<our> included.

C<for($foo; !$bar; $baz) {...}> was deparsed without the C<!> (or C<not>).
This has been fixed.

Core keywords that conflict with lexical subroutines are now deparsed with
the C<CORE::> prefix.

C<foreach state $x (...) {...}> now deparses correctly with C<state> and
not C<my>.

C<our @array = split(...)> now deparses correctly with C<our> in those
cases where the assignment is optimized away.

It now deparses C<our(I<LIST>)> and typed lexical (C<my Dog $spot>) correctly.

Deparse C<$#_> as that instead of as C<$#{_}>.
L<[GH #14545]|https://github.com/Perl/perl5/issues/14545>

BEGIN blocks at the end of the enclosing scope are now deparsed in the
right place.  [perl #77452]

BEGIN blocks were sometimes deparsed as __ANON__, but are now always called
BEGIN.

Lexical subroutines are now fully deparsed.  [perl #116553]

C<Anything =~ y///r> with C</r> no longer omits the left-hand operand.

The op trees that make up regexp code blocks are now deparsed for real.
Formerly, the original string that made up the regular expression was used.
That caused problems with C<qr/(?{E<lt>E<lt>heredoc})/> and multiline code blocks,
which were deparsed incorrectly.  [perl #123217] [perl #115256]

C<$;> at the end of a statement no longer loses its semicolon.
[perl #123357]

Some cases of subroutine declarations stored in the stash in shorthand form
were being omitted.

Non-ASCII characters are now consistently escaped in strings, instead of
some of the time.  (There are still outstanding problems with regular
expressions and identifiers that have not been fixed.)

When prototype sub calls are deparsed with C<&> (I<e.g.>, under the B<-P>
option), C<scalar> is now added where appropriate, to force the scalar
context implied by the prototype.

C<require(foo())>, C<do(foo())>, C<goto(foo())> and similar constructs with
loop controls are now deparsed correctly.  The outer parentheses are not
optional.

Whitespace is no longer escaped in regular expressions, because it was
getting erroneously escaped within C<(?x:...)> sections.

C<sub foo { foo() }> is now deparsed with those mandatory parentheses.

C</@array/> is now deparsed as a regular expression, and not just
C<@array>.

C</@{-}/>, C</@{+}/> and C<$#{1}> are now deparsed with the braces, which
are mandatory in these cases.

In deparsing feature bundles, C<B::Deparse> was emitting C<no feature;> first
instead of C<no feature ':all';>.  This has been fixed.

C<chdir FH> is now deparsed without quotation marks.

C<\my @a> is now deparsed without parentheses.  (Parenthese would flatten
the array.)

C<system> and C<exec> followed by a block are now deparsed correctly.
Formerly there was an erroneous C<do> before the block.

C<< use constant QR =E<gt> qr/.../flags >> followed by C<"" =~ QR> is no longer
without the flags.

Deparsing C<BEGIN { undef &foo }> with the B<-w> switch enabled started to
emit 'uninitialized' warnings in Perl 5.14.  This has been fixed.

Deparsing calls to subs with a C<(;+)> prototype resulted in an infinite
loop.  The C<(;$>) C<(_)> and C<(;_)> prototypes were given the wrong
precedence, causing C<foo($aE<lt>$b)> to be deparsed without the parentheses.

Deparse now provides a defined state sub in inner subs.

=item *

L<B::Op_private> has been added.

L<B::Op_private> provides detailed information about the flags used in the
C<op_private> field of perl opcodes.

=item *

L<bigint>, L<bignum>, L<bigrat> have been upgraded to version 0.39.

Document in CAVEATS that using strings as numbers won't always invoke
the big number overloading, and how to invoke it.  [rt.perl.org #123064]

=item *

L<Carp> has been upgraded to version 1.36.

C<Carp::Heavy> now ignores version mismatches with Carp if Carp is newer
than 1.12, since C<Carp::Heavy>'s guts were merged into Carp at that
point.
L<[GH #13708]|https://github.com/Perl/perl5/issues/13708>

Carp now handles non-ASCII platforms better.

Off-by-one error fix for Perl E<lt> 5.14.

=item *

L<constant> has been upgraded to version 1.33.

It now accepts fully-qualified constant names, allowing constants to be defined
in packages other than the caller.

=item *

L<CPAN> has been upgraded to version 2.11.

Add support for C<Cwd::getdcwd()> and introduce workaround for a misbehavior
seen on Strawberry Perl 5.20.1.

Fix C<chdir()> after building dependencies bug.

Introduce experimental support for plugins/hooks.

Integrate the C<App::Cpan> sources.

Do not check recursion on optional dependencies.

Sanity check F<META.yml> to contain a hash.
L<[cpan #95271]|https://rt.cpan.org/Ticket/Display.html?id=95271>

=item *

L<CPAN::Meta::Requirements> has been upgraded to version 2.132.

Works around limitations in C<version::vpp> detecting v-string magic and adds
support for forthcoming L<ExtUtils::MakeMaker> bootstrap F<version.pm> for
Perls older than 5.10.0.

=item *

L<Data::Dumper> has been upgraded to version 2.158.

Fixes CVE-2014-4330 by adding a configuration variable/option to limit
recursion when dumping deep data structures.

Changes to resolve Coverity issues.
XS dumps incorrectly stored the name of code references stored in a
GLOB.
L<[GH #13911]|https://github.com/Perl/perl5/issues/13911>

=item *

L<DynaLoader> has been upgraded to version 1.32.

Remove C<dl_nonlazy> global if unused in Dynaloader. [perl #122926]

=item *

L<Encode> has been upgraded to version 2.72.

C<piconv> now has better error handling when the encoding name is nonexistent,
and a build breakage when upgrading L<Encode> in perl-5.8.2 and earlier has
been fixed.

Building in C++ mode on Windows now works.

=item *

L<Errno> has been upgraded to version 1.23.

Add C<-P> to the preprocessor command-line on GCC 5.  GCC added extra
line directives, breaking parsing of error code definitions.  [rt.perl.org
#123784]

=item *

L<experimental> has been upgraded to version 0.013.

Hardcodes features for Perls older than 5.15.7.

=item *

L<ExtUtils::CBuilder> has been upgraded to version 0.280221.

Fixes a regression on Android.
L<[GH #14064]|https://github.com/Perl/perl5/issues/14064>

=item *

L<ExtUtils::Manifest> has been upgraded to version 1.70.

Fixes a bug with C<maniread()>'s handling of quoted filenames and improves
C<manifind()> to follow symlinks.
L<[GH #14003]|https://github.com/Perl/perl5/issues/14003>

=item *

L<ExtUtils::ParseXS> has been upgraded to version 3.28.

Only declare C<file> unused if we actually define it.
Improve generated C<RETVAL> code generation to avoid repeated
references to C<ST(0)>.  [perl #123278]
Broaden and document the C</OBJ$/> to C</REF$/> typemap optimization
for the C<DESTROY> method.  [perl #123418]

=item *

L<Fcntl> has been upgraded to version 1.13.

Add support for the Linux pipe buffer size C<fcntl()> commands.

=item *

L<File::Find> has been upgraded to version 1.29.

C<find()> and C<finddepth()> will now warn if passed inappropriate or
misspelled options.

=item *

L<File::Glob> has been upgraded to version 1.24.

Avoid C<SvIV()> expanding to call C<get_sv()> three times in a few
places. [perl #123606]

=item *

L<HTTP::Tiny> has been upgraded to version 0.054.

C<keep_alive> is now fork-safe and thread-safe.

=item *

L<IO> has been upgraded to version 1.35.

The XS implementation has been fixed for the sake of older Perls.

=item *

L<IO::Socket> has been upgraded to version 1.38.

Document the limitations of the C<connected()> method.  [perl #123096]

=item *

L<IO::Socket::IP> has been upgraded to version 0.37.

A better fix for subclassing C<connect()>.
L<[cpan #95983]|https://rt.cpan.org/Ticket/Display.html?id=95983>
L<[cpan #97050]|https://rt.cpan.org/Ticket/Display.html?id=97050>

Implements Timeout for C<connect()>.
L<[cpan #92075]|https://rt.cpan.org/Ticket/Display.html?id=92075>

=item *

The libnet collection of modules has been upgraded to version 3.05.

Support for IPv6 and SSL to C<Net::FTP>, C<Net::NNTP>, C<Net::POP3> and C<Net::SMTP>.
Improvements in C<Net::SMTP> authentication.

=item *

L<Locale::Codes> has been upgraded to version 3.34.

Fixed a bug in the scripts used to extract data from spreadsheets that
prevented the SHP currency code from being found.
L<[cpan #94229]|https://rt.cpan.org/Ticket/Display.html?id=94229>

New codes have been added.

=item *

L<Math::BigInt> has been upgraded to version 1.9997.

Synchronize POD changes from the CPAN release.
C<< Math::BigFloat->blog(x) >> would sometimes return C<blog(2*x)> when
the accuracy was greater than 70 digits.
The result of C<< Math::BigFloat->bdiv() >> in list context now
satisfies C<< x = quotient * divisor + remainder >>.

Correct handling of subclasses.
L<[cpan #96254]|https://rt.cpan.org/Ticket/Display.html?id=96254>
L<[cpan #96329]|https://rt.cpan.org/Ticket/Display.html?id=96329>

=item *

L<Module::Metadata> has been upgraded to version 1.000026.

Support installations on older perls with an L<ExtUtils::MakeMaker> earlier
than 6.63_03

=item *

L<overload> has been upgraded to version 1.26.

A redundant C<ref $sub> check has been removed.

=item *

The PathTools module collection has been upgraded to version 3.56.

A warning from the B<gcc> compiler is now avoided when building the XS.

Don't turn leading C<//> into C</> on Cygwin. [perl #122635]

=item *

L<perl5db.pl> has been upgraded to version 1.49.

The debugger would cause an assertion failure.
L<[GH #14605]|https://github.com/Perl/perl5/issues/14605>

C<fork()> in the debugger under C<tmux> will now create a new window for
the forked process. L<[GH #13602]|https://github.com/Perl/perl5/issues/13602>
