	0xD0,
	0xD1,
	0xF3A,
	0xF3E,
	0x169B,
	0x169D,
	0x2018,
	0x2020,
	0x2039,
	0x203B,
	0x2045,
	0x2047,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E42,
	0x2E43,
	0x2E55,
	0x2E5D,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0xFD3E,
	0xFD40,
	0xFE17,
	0xFE19,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE59,
	0xFE5F,
	0xFF08,
	0xFF0A,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0x1F676,
	0x1F679
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_SB__CL_invlist[] = {  /* for EBCDIC 037 */
	91,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4D,
	0x4E,
	0x5D,
	0x5E,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0xBA,
	0xBC,
	0xC0,
	0xC1,
	0xD0,
	0xD1,
	0xF3A,
	0xF3E,
	0x169B,
	0x169D,
	0x2018,
	0x2020,
	0x2039,
	0x203B,
	0x2045,
	0x2047,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E42,
	0x2E43,
	0x2E55,
	0x2E5D,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0xFD3E,
	0xFD40,
	0xFE17,
	0xFE19,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE59,
	0xFE5F,
	0xFF08,
	0xFF0A,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0x1F676,
	0x1F679
};

#  endif	/* EBCDIC 037 */

static const UV UNI_SB__EX_invlist[] = {  /* for all charsets */
	605,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x7FD,
	0x7FE,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x898,
	0x8A0,
	0x8CA,
	0x8E2,
	0x8E3,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0x9FE,
	0x9FF,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB55,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC05,
	0xC3C,
	0xC3D,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4E,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD81,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEC8,
	0xECE,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x103F,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x135D,
	0x1360,
	0x1712,
	0x1716,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ACF,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAE,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF7,
	0x1CFA,
	0x1DC0,
	0x1E00,
	0x200C,
	0x200E,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x3030,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA823,
	0xA828,
	0xA82C,
	0xA82D,
	0xA880,
	0xA882,
	0xA8B4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA8FF,
	0xA900,
	0xA926,
	0xA92E,
	0xA947,
	0xA954,
	0xA980,
	0xA984,
	0xA9B3,
	0xA9C1,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4E,
	0xAA7B,
	0xAA7E,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEB,
	0xAAF0,
	0xAAF5,
	0xAAF7,
	0xABE3,
	0xABEB,
	0xABEC,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFF9E,
	0xFFA0,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x10D24,
	0x10D28,
	0x10EAB,
	0x10EAD,
	0x10F46,
	0x10F51,
	0x10F82,
	0x10F86,
	0x11000,
	0x11003,
	0x11038,
	0x11047,
	0x11070,
	0x11071,
	0x11073,
	0x11075,
	0x1107F,
	0x11083,
	0x110B0,
	0x110BB,
	0x110C2,
	0x110C3,
	0x11100,
	0x11103,
	0x11127,
	0x11135,
	0x11145,
	0x11147,
	0x11173,
	0x11174,
	0x11180,
	0x11183,
	0x111B3,
	0x111C1,
	0x111C9,
	0x111CD,
	0x111CE,
	0x111D0,
	0x1122C,
	0x11238,
	0x1123E,
	0x1123F,
	0x112DF,
	0x112EB,
	0x11300,
	0x11304,
	0x1133B,
	0x1133D,
	0x1133E,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x11362,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11435,
	0x11447,
	0x1145E,
	0x1145F,
	0x114B0,
	0x114C4,
	0x115AF,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11630,
	0x11641,
	0x116AB,
	0x116B8,
	0x1171D,
	0x1172C,
	0x1182C,
	0x1183B,
	0x11930,
	0x11936,
	0x11937,
	0x11939,
	0x1193B,
	0x1193F,
	0x11940,
	0x11941,
	0x11942,
	0x11944,
	0x119D1,
	0x119D8,
	0x119DA,
	0x119E1,
	0x119E4,
	0x119E5,
	0x11A01,
	0x11A0B,
	0x11A33,
	0x11A3A,
	0x11A3B,
	0x11A3F,
	0x11A47,
	0x11A48,
	0x11A51,
	0x11A5C,
	0x11A8A,
	0x11A9A,
	0x11C2F,
	0x11C37,
	0x11C38,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D31,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D46,
	0x11D47,
	0x11D48,
	0x11D8A,
	0x11D8F,
	0x11D90,
	0x11D92,
	0x11D93,
	0x11D98,
	0x11EF3,
	0x11EF7,
	0x16AF0,
	0x16AF5,
	0x16B30,
	0x16B37,
	0x16F4F,
	0x16F50,
	0x16F51,
	0x16F88,
	0x16F8F,
	0x16F93,
	0x16FE4,
	0x16FE5,
	0x16FF0,
	0x16FF2,
	0x1BC9D,
	0x1BC9F,
	0x1CF00,
	0x1CF2E,
	0x1CF30,
	0x1CF47,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D173,
	0x1D17B,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D242,
	0x1D245,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA9B,
	0x1DAA0,
	0x1DAA1,
	0x1DAB0,
	0x1E000,
	0x1E007,
	0x1E008,
	0x1E019,
	0x1E01B,
	0x1E022,
	0x1E023,
	0x1E025,
	0x1E026,
	0x1E02B,
	0x1E130,
	0x1E137,
	0x1E2AE,
	0x1E2AF,
	0x1E2EC,
	0x1E2F0,
	0x1E8D0,
	0x1E8D7,
	0x1E944,
	0x1E94B,
	0xE0020,
	0xE0080,
	0xE0100,
	0xE01F0
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_SB__FO_invlist[] = {  /* for ASCII/Latin1 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAD,
	0xAE,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x890,
	0x892,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x110CD,
	0x110CE,
	0x13430,
	0x13439,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_SB__FO_invlist[] = {  /* for EBCDIC 1047 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x890,
	0x892,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x110CD,
	0x110CE,
	0x13430,
	0x13439,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_SB__FO_invlist[] = {  /* for EBCDIC 037 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x890,
	0x892,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x110CD,
	0x110CE,
	0x13430,
	0x13439,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002
};

#  endif	/* EBCDIC 037 */

static const UV UNI_SB__LE_invlist[] = {  /* for all charsets */
	1073,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1BB,
	0x1BC,
	0x1C0,
	0x1C4,
	0x294,
	0x295,
	0x2B9,
	0x2C0,
	0x2C6,
	0x2D2,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x374,
	0x375,
	0x559,
	0x55A,
	0x5D0,
	0x5EB,
	0x5EF,
	0x5F4,
	0x620,
	0x64B,
	0x66E,
	0x670,
	0x671,
	0x6D4,
	0x6D5,
