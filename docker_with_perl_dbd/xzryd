                "    GAsyncResult        *res,\n"
                "    GError             **error);\n" % (self.ns_lower)
            )
            if self.symbol_decorator is not None:
                self.outfile.write("%s\n" % self.symbol_decorator)
            self.outfile.write(
                "GDBusObjectManager *%sobject_manager_client_new_for_bus_sync (\n"
                "    GBusType                bus_type,\n"
                "    GDBusObjectManagerClientFlags  flags,\n"
                "    const gchar            *name,\n"
                "    const gchar            *object_path,\n"
                "    GCancellable           *cancellable,\n"
                "    GError                **error);\n" % (self.ns_lower)
            )
            self.outfile.write("\n")

    # ----------------------------------------------------------------------------------------------------

    def generate_header_postamble(self):
        self.outfile.write("\n")
        self.outfile.write("G_END_DECLS\n")

        if not self.use_pragma:
            self.outfile.write("\n")
            self.outfile.write("#endif /* __{!s}__ */\n".format(self.header_guard))

    # ----------------------------------------------------------------------------------------------------

    def generate(self):
        self.generate_header_preamble()
        self.declare_types()
        self.generate_header_postamble()


# ----------------------------------------------------------------------------------------------------


class InterfaceInfoHeaderCodeGenerator:
    def __init__(
        self,
        ifaces,
        namespace,
        header_name,
        input_files_basenames,
        use_pragma,
        glib_min_required,
        symbol_decorator,
        symbol_decorator_header,
        outfile,
    ):
        self.ifaces = ifaces
        self.namespace, self.ns_upper, self.ns_lower = generate_namespace(namespace)
        self.header_guard = generate_header_guard(header_name)
        self.input_files_basenames = input_files_basenames
        self.use_pragma = use_pragma
        self.glib_min_required = glib_min_required
        self.symbol_decorator = symbol_decorator
        if self.symbol_decorator is None:
            self.symbol_decorator = ""
        self.symbol_decorator_header = symbol_decorator_header
        self.outfile = outfile

    # ----------------------------------------------------------------------------------------------------

    def generate_header_preamble(self):
        basenames = ", ".join(self.input_files_basenames)
        self.outfile.write(LICENSE_STR.format(config.VERSION, basenames))
        self.outfile.write("\n")

        if self.use_pragma:
            self.outfile.write("#pragma once\n")
        else:
            self.outfile.write("#ifndef __{!s}__\n".format(self.header_guard))
            self.outfile.write("#define __{!s}__\n".format(self.header_guard))

        if self.symbol_decorator_header is not None:
            self.outfile.write("\n")
            self.outfile.write('#include "%s"\n' % self.symbol_decorator_header)

        self.outfile.write("\n")
        self.outfile.write("#include <gio/gio.h>\n")
        self.outfile.write("\n")
        self.outfile.write("G_BEGIN_DECLS\n")
        self.outfile.write("\n")

    # ----------------------------------------------------------------------------------------------------

    def declare_infos(self):
        for i in self.ifaces:
            self.outfile.write(
                "extern %s const GDBusInterfaceInfo %s_interface;\n"
                % (self.symbol_decorator, i.name_lower)
            )

    # ----------------------------------------------------------------------------------------------------

    def generate_header_postamble(self):
        self.outfile.write("\n")
        self.outfile.write("G_END_DECLS\n")

        if not self.use_pragma:
            self.outfile.write("\n")
            self.outfile.write("#endif /* __{!s}__ */\n".format(self.header_guard))

    # ----------------------------------------------------------------------------------------------------

    def generate(self):
        self.generate_header_preamble()
        self.declare_infos()
        self.generate_header_postamble()


# ----------------------------------------------------------------------------------------------------


class InterfaceInfoBodyCodeGenerator:
    def __init__(
        self,
        ifaces,
        namespace,
        header_name,
        input_files_basenames,
        glib_min_required,
        symbol_decoration_define,
        outfile,
    ):
        self.ifaces = ifaces
        self.namespace, self.ns_upper, self.ns_lower = generate_namespace(namespace)
        self.header_name = header_name
        self.input_files_basenames = input_files_basenames
        self.glib_min_required = glib_min_required
        self.symbol_decoration_define = symbol_decoration_define
        self.outfile = outfile

    # ----------------------------------------------------------------------------------------------------

    def generate_body_preamble(self):
        basenames = ", ".join(self.input_files_basenames)
        self.outfile.write(LICENSE_STR.format(config.VERSION, basenames))

        if self.symbol_decoration_define is not None:
            self.outfile.write("\n")
            self.outfile.write("#define %s\n" % self.symbol_decoration_define)

        self.outfile.write("\n")
        self.outfile.write(
            "#ifdef HAVE_CONFIG_H\n"
            '#  include "config.h"\n'
            "#endif\n"
            "\n"
            '#include "%s"\n'
            "\n"
            "#include <string.h>\n" % (self.header_name)
        )
        self.outfile.write("\n")

    # ----------------------------------------------------------------------------------------------------

    def generate_array(self, array_name_lower, element_type, elements):
        self.outfile.write(
            "const %s * const %s[] =\n" % (element_type, array_name_lower)
        )
        self.outfile.write("{\n")
        for (_, name) in elements:
            self.outfile.write("  &%s,\n" % name)
        self.outfile.write("  NULL,\n")
        self.outfile.write("};\n")
        self.outfile.write("\n")

    def define_annotations(self, array_name_lower, annotations):
        if len(annotations) == 0:
            return

        annotation_pointers = []

        for a in annotations:
            # Skip internal annotations.
            if a.key.startswith("org.gtk.GDBus"):
                continue

            self.define_annotations(
                "%s__%s_annotations" % (array_name_lower, a.key_lower), a.annotations
            )

            self.outfile.write(
                "const GDBusAnnotationInfo %s__%s_annotation =\n"
                % (array_name_lower, a.key_lower)
            )
            self.outfile.write("{\n")
            self.outfile.write("  -1,  /* ref count */\n")
            self.outfile.write('  (gchar *) "%s",\n' % a.key)
            self.outfile.write('  (gchar *) "%s",\n' % a.value)
            if len(a.annotations) > 0:
                self.outfile.write(
                    "  (GDBusAnnotationInfo **) %s__%s_annotations,\n"
                    % (array_name_lower, a.key_lower)
                )
            else:
                self.outfile.write("  NULL,  /* no annotations */\n")
            self.outfile.write("};\n")
            self.outfile.write("\n")

            key = (a.since, "%s__%s_annotation" % (array_name_lower, a.key_lower))
            annotation_pointers.append(key)

        self.generate_array(
            array_name_lower, "GDBusAnnotationInfo", annotation_pointers
        )

    def define_args(self, array_name_lower, args):
        if len(args) == 0:
            return

        arg_pointers = []

        for a in args:
            self.define_annotations(
                "%s__%s_arg_annotations" % (array_name_lower, a.name), a.annotations
            )

            self.outfile.write(
                "const GDBusArgInfo %s__%s_arg =\n" % (array_name_lower, a.name)
            )
            self.outfile.write("{\n")
            self.outfile.write("  -1,  /* ref count */\n")
            self.outfile.write('  (gchar *) "%s",\n' % a.name)
            self.outfile.write('  (gchar *) "%s",\n' % a.signature)
            if len(a.annotations) > 0:
                self.outfile.write(
                    "  (GDBusAnnotationInfo **) %s__%s_arg_annotations,\n"
                    % (array_name_lower, a.name)
                )
            else:
                self.outfile.write("  NULL,  /* no annotations */\n")
            self.outfile.write("};\n")
            self.outfile.write("\n")

            key = (a.since, "%s__%s_arg" % (array_name_lower, a.name))
            arg_pointers.append(key)

        self.generate_array(array_name_lower, "GDBusArgInfo", arg_pointers)

    def define_infos(self):
        for i in self.ifaces:
            self.outfile.write(
                "/* ------------------------------------------------------------------------ */\n"
            )
            self.outfile.write("/* Definitions for %s */\n" % i.name)
            self.outfile.write("\n")

            # GDBusMethodInfos.
            if len(i.methods) > 0:
                method_pointers = []

                for m in i.methods:
                    self.define_args(
                        "%s_interface__%s_method_in_args"
                        % (i.name_lower, m.name_lower),
                        m.in_args,
                    )
                    self.define_args(
                        "%s_interface__%s_method_out_args"
                        % (i.name_lower, m.name_lower),
                        m.out_args,
                    )
                    self.define_annotations(
                        "%s_interface__%s_method_annotations"
                        % (i.name_lower, m.name_lower),
                        m.annotations,
                    )

                    self.outfile.write(
                        "const GDBusMethodInfo %s_interface__%s_method =\n"
                        % (i.name_lower, m.name_lower)
                    )
                    self.outfile.write("{\n")
                    self.outfile.write("  -1,  /* ref count */\n")
                    self.outfile.write('  (gchar *) "%s",\n' % m.name)
                    if len(m.in_args) > 0:
                        self.outfile.write(
                            "  (GDBusArgInfo **) %s_interface__%s_method_in_args,\n"
                            % (i.name_lower, m.name_lower)
                        )
                    else:
                        self.outfile.write("  NULL,  /* no in args */\n")
                    if len(m.out_args) > 0:
                        self.outfile.write(
                            "  (GDBusArgInfo **) %s_interface__%s_method_out_args,\n"
                            % (i.name_lower, m.name_lower)
                        )
                    else:
                        self.outfile.write("  NULL,  /* no out args */\n")
                    if len(m.annotations) > 0:
                        self.outfile.write(
                            "  (GDBusAnnotationInfo **) %s_interface__%s_method_annotations,\n"
                            % (i.name_lower, m.name_lower)
                        )
                    else:
                        self.outfile.write("  NULL,  /* no annotations */\n")
                    self.outfile.write("};\n")
                    self.outfile.write("\n")

                    key = (
                        m.since,
                        "%s_interface__%s_method" % (i.name_lower, m.name_lower),
                    )
                    method_pointers.append(key)

                self.generate_array(
                    "%s_interface_methods" % i.name_lower,
                    "GDBusMethodInfo",
                    method_pointers,
                )

            # GDBusSignalInfos.
            if len(i.signals) > 0:
                signal_pointers = []

                for s in i.signals:
                    self.define_args(
                        "%s_interface__%s_signal_args" % (i.name_lower, s.name_lower),
                        s.args,
                    )
                    self.define_annotations(
                        "%s_interface__%s_signal_annotations"
                        % (i.name_lower, s.name_lower),
                        s.annotations,
                    )

                    self.outfile.write(
                        "const GDBusSignalInfo %s_interface__%s_signal =\n"
                        % (i.name_lower, s.name_lower)
                    )
                    self.outfile.write("{\n")
                    self.outfile.write("  -1,  /* ref count */\n")
                    self.outfile.write('  (gchar *) "%s",\n' % s.name)
                    if len(s.args) > 0:
                        self.outfile.write(
                            "  (GDBusArgInfo **) %s_interface__%s_signal_args,\n"
                            % (i.name_lower, s.name_lower)
                        )
                    else:
                        self.outfile.write("  NULL,  /* no args */\n")
                    if len(s.annotations) > 0:
                        self.outfile.write(
                            "  (GDBusAnnotationInfo **) %s_interface__%s_signal_annotations,\n"
                            % (i.name_lower, s.name_lower)
                        )
                    else:
                        self.outfile.write("  NULL,  /* no annotations */\n")
                    self.outfile.write("};\n")
                    self.outfile.write("\n")

                    key = (
                        s.since,
                        "%s_interface__%s_signal" % (i.name_lower, s.name_lower),
                    )
                    signal_pointers.append(key)

                self.generate_array(
                    "%s_interface_signals" % i.name_lower,
                    "GDBusSignalInfo",
                    signal_pointers,
                )

            # GDBusPropertyInfos.
            if len(i.properties) > 0:
                property_pointers = []

                for p in i.properties:
                    if p.readable and p.writable:
                        flags = "G_DBUS_PROPERTY_INFO_FLAGS_READABLE | G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE"
                    elif p.readable:
                        flags = "G_DBUS_PROPERTY_INFO_FLAGS_READABLE"
                    elif p.writable:
                        flags = "G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE"
                    else:
                        flags = "G_DBUS_PROPERTY_INFO_FLAGS_NONE"

                    self.define_annotations(
                        "%s_interface__%s_property_annotations"
                        % (i.name_lower, p.name_lower),
                        p.annotations,
                    )

                    self.outfile.write(
                        "const GDBusPropertyInfo %s_interface__%s_property =\n"
                        % (i.name_lower, p.name_lower)
                    )
                    self.outfile.write("{\n")
                    self.outfile.write("  -1,  /* ref count */\n")
                    self.outfile.write('  (gchar *) "%s",\n' % p.name)
                    self.outfile.write('  (gchar *) "%s",\n' % p.signature)
                    self.outfile.write("  %s,\n" % flags)
                    if len(p.annotations) > 0:
                        self.outfile.write(
                            "  (GDBusAnnotationInfo **) %s_interface__%s_property_annotations,\n"
                            % (i.name_lower, p.name_lower)
                        )
                    else:
                        self.outfile.write("  NULL,  /* no annotations */\n")
                    self.outfile.write("};\n")
                    self.outfile.write("\n")

                    key = (
                        p.since,
                        "%s_interface__%s_property" % (i.name_lower, p.name_lower),
                    )
                    property_pointers.append(key)

                self.generate_array(
                    "%s_interface_properties" % i.name_lower,
                    "GDBusPropertyInfo",
                    property_pointers,
                )

            # Finally the GDBusInterfaceInfo.
            self.define_annotations(
                "%s_interface_annotations" % i.name_lower, i.annotations
            )

            self.outfile.write(
                "const GDBusInterfaceInfo %s_interface =\n" % i.name_lower
            )
            self.outfile.write("{\n")
            self.outfile.write("  -1,  /* ref count */\n")
            self.outfile.write('  (gchar *) "%s",\n' % i.name)
            if len(i.methods) > 0:
                self.outfile.write(
                    "  (GDBusMethodInfo **) %s_interface_methods,\n" % i.name_lower
                )
            else:
                self.outfile.write("  NULL,  /* no methods */\n")
            if len(i.signals) > 0:
                self.outfile.write(
                    "  (GDBusSignalInfo **) %s_interface_signals,\n" % i.name_lower
                )
            else:
                self.outfile.write("  NULL,  /* no signals */\n")
            if len(i.properties) > 0:
                self.outfile.write(
                    "  (GDBusPropertyInfo **) %s_interface_properties,\n" % i.name_lower
                )
            else:
                self.outfile.write("NULL,  /* no properties */\n")
            if len(i.annotations) > 0:
                self.outfile.write(
                    "  (GDBusAnnotationInfo **) %s_interface_annotations,\n"
                    % i.name_lower
                )
            else:
                self.outfile.write("  NULL,  /* no annotations */\n")
            self.outfile.write("};\n")
            self.outfile.write("\n")

    # ----------------------------------------------------------------------------------------------------

    def generate(self):
        self.generate_body_preamble()
        self.define_infos()


# ----------------------------------------------------------------------------------------------------


class CodeGenerator:
    def __init__(
        self,
        ifaces,
        namespace,
        generate_objmanager,
        header_name,
        input_files_basenames,
        docbook_gen,
        glib_min_required,
        symbol_decoration_define,
        outfile,
    ):
        self.ifaces = ifaces
        self.namespace, self.ns_upper, self.ns_lower = generate_namespace(namespace)
        self.generate_objmanager = generate_objmanager
        self.header_name = header_name
        self.input_files_basenames = input_files_basenames
        self.docbook_gen = docbook_gen
        self.glib_min_required = glib_min_required
        self.symbol_decoration_define = symbol_decoration_define
        self.outfile = outfile

    # ----------------------------------------------------------------------------------------------------

    def generate_body_preamble(self):
        basenames = ", ".join(self.input_files_basenames)
        self.outfile.write(LICENSE_STR.format(config.VERSION, basenames))
        if self.symbol_decoration_define is not None:
            self.outfile.write("\n")
            self.outfile.write("#define %s\n" % self.symbol_decoration_define)
        self.outfile.write("\n")
        self.outfile.write(
            "#ifdef HAVE_CONFIG_H\n"
            '#  include "config.h"\n'
            "#endif\n"
            "\n"
            '#include "%s"\n'
            "\n"
            "#include <string.h>\n" % (self.header_name)
        )

        self.outfile.write(
            "#ifdef G_OS_UNIX\n" "#  include <gio/gunixfdlist.h>\n" "#endif\n" "\n"
        )

        self.outfile.write(
            "typedef struct\n"
            "{\n"
            "  GDBusArgInfo parent_struct;\n"
            "  gboolean use_gvariant;\n"
            "} _ExtendedGDBusArgInfo;\n"
            "\n"
        )

        self.outfile.write(
            "typedef struct\n"
            "{\n"
            "  GDBusMethodInfo parent_struct;\n"
            "  const gchar *signal_name;\n"
            "  gboolean pass_fdlist;\n"
            "} _ExtendedGDBusMethodInfo;\n"
            "\n"
        )

        self.outfile.write(
            "typedef struct\n"
            "{\n"
            "  GDBusSignalInfo parent_struct;\n"
            "  const gchar *signal_name;\n"
            "} _ExtendedGDBusSignalInfo;\n"
            "\n"
        )

        self.outfile.write(
            "typedef struct\n"
            "{\n"
            "  GDBusPropertyInfo parent_struct;\n"
            "  const gchar *hyphen_name;\n"
            "  guint use_gvariant : 1;\n"
            "  guint emits_changed_signal : 1;\n"
            "} _ExtendedGDBusPropertyInfo;\n"
            "\n"
        )

        self.outfile.write(
            "typedef struct\n"
            "{\n"
            "  GDBusInterfaceInfo parent_struct;\n"
            "  const gchar *hyphen_name;\n"
            "} _ExtendedGDBusInterfaceInfo;\n"
            "\n"
        )

        self.outfile.write(
            "typedef struct\n"
            "{\n"
            "  const _ExtendedGDBusPropertyInfo *info;\n"
            "  guint prop_id;\n"
            "  GValue orig_value; /* the value before the change */\n"
            "} ChangedProperty;\n"
            "\n"
            "static void\n"
            "_changed_property_free (ChangedProperty *data)\n"
            "{\n"
            "  g_value_unset (&data->orig_value);\n"
            "  g_free (data);\n"
            "}\n"
            "\n"
        )

        self.outfile.write(
            "static gboolean\n"
            "_g_strv_equal0 (gchar **a, gchar **b)\n"
            "{\n"
            "  gboolean ret = FALSE;\n"
            "  guint n;\n"
            "  if (a == NULL && b == NULL)\n"
            "    {\n"
            "      ret = TRUE;\n"
            "      goto out;\n"
            "    }\n"
            "  if (a == NULL || b == NULL)\n"
            "    goto out;\n"
            "  if (g_strv_length (a) != g_strv_length (b))\n"
            "    goto out;\n"
            "  for (n = 0; a[n] != NULL; n++)\n"
            "    if (g_strcmp0 (a[n], b[n]) != 0)\n"
            "      goto out;\n"
            "  ret = TRUE;\n"
            "out:\n"
            "  return ret;\n"
            "}\n"
            "\n"
        )

        self.outfile.write(
            "static gboolean\n"
            "_g_variant_equal0 (GVariant *a, GVariant *b)\n"
            "{\n"
            "  gboolean ret = FALSE;\n"
            "  if (a == NULL && b == NULL)\n"
            "    {\n"
            "      ret = TRUE;\n"
            "      goto out;\n"
            "    }\n"
            "  if (a == NULL || b == NULL)\n"
            "    goto out;\n"
            "  ret = g_variant_equal (a, b);\n"
            "out:\n"
            "  return ret;\n"
            "}\n"
            "\n"
        )

        # simplified - only supports the types we use
        self.outfile.write(
            "G_GNUC_UNUSED static gboolean\n"
            "_g_value_equal (const GValue *a, const GValue *b)\n"
            "{\n"
            "  gboolean ret = FALSE;\n"
            "  g_assert (G_VALUE_TYPE (a) == G_VALUE_TYPE (b));\n"
            "  switch (G_VALUE_TYPE (a))\n"
            "    {\n"
            "      case G_TYPE_BOOLEAN:\n"
            "        ret = (g_value_get_boolean (a) == g_value_get_boolean (b));\n"
            "        break;\n"
            "      case G_TYPE_UCHAR:\n"
            "        ret = (g_value_get_uchar (a) == g_value_get_uchar (b));\n"
            "        break;\n"
            "      case G_TYPE_INT:\n"
            "        ret = (g_value_get_int (a) == g_value_get_int (b));\n"
            "        break;\n"
            "      case G_TYPE_UINT:\n"
            "        ret = (g_value_get_uint (a) == g_value_get_uint (b));\n"
            "        break;\n"
            "      case G_TYPE_INT64:\n"
            "        ret = (g_value_get_int64 (a) == g_value_get_int64 (b));\n"
            "        break;\n"
            "      case G_TYPE_UINT64:\n"
            "        ret = (g_value_get_uint64 (a) == g_value_get_uint64 (b));\n"
            "        break;\n"
            "      case G_TYPE_DOUBLE:\n"
            "        {\n"
            "          /* Avoid -Wfloat-equal warnings by doing a direct bit compare */\n"
            "          gdouble da = g_value_get_double (a);\n"
            "          gdouble db = g_value_get_double (b);\n"
            "          ret = memcmp (&da, &db, sizeof (gdouble)) == 0;\n"
            "        }\n"
            "        break;\n"
            "      case G_TYPE_STRING:\n"
            "        ret = (g_strcmp0 (g_value_get_string (a), g_value_get_string (b)) == 0);\n"
            "        break;\n"
            "      case G_TYPE_VARIANT:\n"
            "        ret = _g_variant_equal0 (g_value_get_variant (a), g_value_get_variant (b));\n"
            "        break;\n"
            "      default:\n"
            "        if (G_VALUE_TYPE (a) == G_TYPE_STRV)\n"
            "          ret = _g_strv_equal0 (g_value_get_boxed (a), g_value_get_boxed (b));\n"
            "        else\n"
            '          g_critical ("_g_value_equal() does not handle type %s", g_type_name (G_VALUE_TYPE (a)));\n'
            "        break;\n"
            "    }\n"
            "  return ret;\n"
            "}\n"
            "\n"
        )

    def generate_annotations(self, prefix, annotations):
        if annotations is None:
            return

        n = 0
        for a in annotations:
            # self.generate_annotations('%s_%d'%(prefix, n), a.get_annotations())

            # skip internal annotations
            if a.key.startswith("org.gtk.GDBus"):
                continue

            self.outfile.write(
                "static const GDBusAnnotationInfo %s_%d =\n"
                "{\n"
                "  -1,\n"
                '  (gchar *) "%s",\n'
                '  (gchar *) "%s",\n' % (prefix, n, a.key, a.value)
            )
            if len(a.annotations) == 0:
                self.outfile.write("  NULL\n")
            else:
                self.outfile.write(
                    "  (GDBusAnnotationInfo **) &%s_%d_pointers\n" % (prefix, n)
                )
            self.outfile.write("};\n" "\n")
            n += 1

        if n > 0:
            self.outfile.write(
                "static const GDBusAnnotationInfo * const %s_pointers[] =\n"
                "{\n" % (prefix)
            )
            m = 0
            for a in annotations:
                if a.key.startswith("org.gtk.GDBus"):
                    continue
                self.outfile.write("  &%s_%d,\n" % (prefix, m))
                m += 1
            self.outfile.write("  NULL\n" "};\n" "\n")
        return n

    def generate_args(self, prefix, args):
        for a in args:
            num_anno = self.generate_annotations(
                "%s_arg_%s_annotation_info" % (prefix, a.name), a.annotations
            )

            self.outfile.write(
                "static const _ExtendedGDBusArgInfo %s_%s =\n"
                "{\n"
                "  {\n"
                "    -1,\n"
                '    (gchar *) "%s",\n'
                '    (gchar *) "%s",\n' % (prefix, a.name, a.name, a.signature)
            )
            if num_anno == 0:
                self.outfile.write("    NULL\n")
            else:
                self.outfile.write(
                    "    (GDBusAnnotationInfo **) &%s_arg_%s_annotation_info_pointers\n"
                    % (prefix, a.name)
                )
            self.outfile.write("  },\n")
            if not utils.lookup_annotation(
                a.annotations, "org.gtk.GDBus.C.ForceGVariant"
            ):
                self.outfile.write("  FALSE\n")
            else:
                self.outfile.write("  TRUE\n")
            self.outfile.write("};\n" "\n")

        if len(args) > 0:
            self.outfile.write(
                "static const GDBusArgInfo * const %s_pointers[] =\n" "{\n" % (prefix)
            )
            for a in args:
                self.outfile.write("  &%s_%s.parent_struct,\n" % (prefix, a.name))
            self.outfile.write("  NULL\n" "};\n" "\n")

    def generate_introspection_for_interface(self, i):
        self.outfile.write(
            "/* ---- Introspection data for %s ---- */\n" "\n" % (i.name)
        )

        if len(i.methods) > 0:
            for m in i.methods:
                self.generate_args(
                    "_%s_method_info_%s_IN_ARG" % (i.name_lower, m.name_lower),
                    m.in_args,
                )
                self.generate_args(
                    "_%s_method_info_%s_OUT_ARG" % (i.name_lower, m.name_lower),
                    m.out_args,
                )

                num_anno = self.generate_annotations(
                    "_%s_method_%s_annotation_info" % (i.name_lower, m.name_lower),
                    m.annotations,
                )

                self.outfile.write(
                    "static const _ExtendedGDBusMethodInfo _%s_method_info_%s =\n"
                    "{\n"
                    "  {\n"
                    "    -1,\n"
                    '    (gchar *) "%s",\n' % (i.name_lower, m.name_lower, m.name)
                )
                if len(m.in_args) == 0:
                    self.outfile.write("    NULL,\n")
                else:
                    self.outfile.write(
                        "    (GDBusArgInfo **) &_%s_method_info_%s_IN_ARG_pointers,\n"
                        % (i.name_lower, m.name_lower)
                    )
                if len(m.out_args) == 0:
                    self.outfile.write("    NULL,\n")
                else:
                    self.outfile.write(
                        "    (GDBusArgInfo **) &_%s_method_info_%s_OUT_ARG_pointers,\n"
                        % (i.name_lower, m.name_lower)
                    )
                if num_anno == 0:
                    self.outfile.write("    NULL\n")
                else:
                    self.outfile.write(
                        "    (GDBusAnnotationInfo **) &_%s_method_%s_annotation_info_pointers\n"
                        % (i.name_lower, m.name_lower)
                    )
                self.outfile.write(
                    "  },\n"
                    '  "handle-%s",\n'
                    "  %s\n" % (m.name_hyphen, "TRUE" if m.unix_fd else "FALSE")
                )
                self.outfile.write("};\n" "\n")

            self.outfile.write(
                "static const GDBusMethodInfo * const _%s_method_info_pointers[] =\n"
                "{\n" % (i.name_lower)
            )
            for m in i.methods:
                self.outfile.write(
                    "  &_%s_method_info_%s.parent_struct,\n"
                    % (i.name_lower, m.name_lower)
                )
            self.outfile.write("  NULL\n" "};\n" "\n")

        # ---

        if len(i.signals) > 0:
            for s in i.signals:
                self.generate_args(
                    "_%s_signal_info_%s_ARG" % (i.name_lower, s.name_lower), s.args
                )

                num_anno = self.generate_annotations(
                    "_%s_signal_%s_annotation_info" % (i.name_lower, s.name_lower),
                    s.annotations,
                )
                self.outfile.write(
                    "static const _ExtendedGDBusSignalInfo _%s_signal_info_%s =\n"
                    "{\n"
                    "  {\n"
                    "    -1,\n"
                    '    (gchar *) "%s",\n' % (i.name_lower, s.name_lower, s.name)
                )
                if len(s.args) == 0:
                    self.outfile.write("    NULL,\n")
                else:
                    self.outfile.write(
                        "    (GDBusArgInfo **) &_%s_signal_info_%s_ARG_pointers,\n"
                        % (i.name_lower, s.name_lower)
                    )
                if num_anno == 0:
                    self.outfile.write("    NULL\n")
                else:
                    self.outfile.write(
                        "    (GDBusAnnotationInfo **) &_%s_signal_%s_annotation_info_pointers\n"
                        % (i.name_lower, s.name_lower)
                    )
                self.outfile.write("  },\n" '  "%s"\n' % (s.name_hyphen))
                self.outfile.write("};\n" "\n")

            self.outfile.write(
                "static const GDBusSignalInfo * const _%s_signal_info_pointers[] =\n"
                "{\n" % (i.name_lower)
            )
            for s in i.signals:
                self.outfile.write(
                    "  &_%s_signal_info_%s.parent_struct,\n"
                    % (i.name_lower, s.name_lower)
                )
            self.outfile.write("  NULL\n" "};\n" "\n")

        # ---

        if len(i.properties) > 0:
            for p in i.properties:
                if p.readable and p.writable:
                    access = "G_DBUS_PROPERTY_INFO_FLAGS_READABLE | G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE"
                elif p.readable:
                    access = "G_DBUS_PROPERTY_INFO_FLAGS_READABLE"
                elif p.writable:
                    access = "G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE"
                else:
                    access = "G_DBUS_PROPERTY_INFO_FLAGS_NONE"
                num_anno = self.generate_annotations(
                    "_%s_property_%s_annotation_info" % (i.name_lower, p.name_lower),
                    p.annotations,
                )
                self.outfile.write(
                    "static const _ExtendedGDBusPropertyInfo _%s_property_info_%s =\n"
                    "{\n"
                    "  {\n"
                    "    -1,\n"
                    '    (gchar *) "%s",\n'
                    '    (gchar *) "%s",\n'
                    "    %s,\n"
                    % (i.name_lower, p.name_lower, p.name, p.arg.signature, access)
                )
                if num_anno == 0:
                    self.outfile.write("    NULL\n")
                else:
                    self.outfile.write(
                        "    (GDBusAnnotationInfo **) &_%s_property_%s_annotation_info_pointers\n"
                        % (i.name_lower, p.name_lower)
                    )
                self.outfile.write("  },\n" '  "%s",\n' % (p.name_hyphen))
                if not utils.lookup_annotation(
                    p.annotations, "org.gtk.GDBus.C.ForceGVariant"
                ):
                    self.outfile.write("  FALSE,\n")
                else:
                    self.outfile.write("  TRUE,\n")
                if p.emits_changed_signal:
                    self.outfile.write("  TRUE\n")
                else:
                    self.outfile.write("  FALSE\n")
                self.outfile.write("};\n" "\n")

            self.outfile.write(
                "static const GDBusPropertyInfo * const _%s_property_info_pointers[] =\n"
                "{\n" % (i.name_lower)
            )
            for p in i.properties:
                self.outfile.write(
                    "  &_%s_property_info_%s.parent_struct,\n"
                    % (i.name_lower, p.name_lower)
                )
            self.outfile.write("  NULL\n" "};\n" "\n")

        num_anno = self.generate_annotations(
            "_%s_annotation_info" % (i.name_lower), i.annotations
        )
        self.outfile.write(
            "static const _ExtendedGDBusInterfaceInfo _%s_interface_info =\n"
            "{\n"
            "  {\n"
            "    -1,\n"
            '    (gchar *) "%s",\n' % (i.name_lower, i.name)
        )
        if len(i.methods) == 0:
            self.outfile.write("    NULL,\n")
        else:
            self.outfile.write(
                "    (GDBusMethodInfo **) &_%s_method_info_pointers,\n" % (i.name_lower)
            )
        if len(i.signals) == 0:
            self.outfile.write("    NULL,\n")
        else:
            self.outfile.write(
                "    (GDBusSignalInfo **) &_%s_signal_info_pointers,\n" % (i.name_lower)
            )
        if len(i.properties) == 0:
            self.outfile.write("    NULL,\n")
        else:
            self.outfile.write(
                "    (GDBusPropertyInfo **) &_%s_property_info_pointers,\n"
                % (i.name_lower)
            )
        if num_anno == 0:
            self.outfile.write("    NULL\n")
        else:
            self.outfile.write(
                "    (GDBusAnnotationInfo **) &_%s_annotation_info_pointers\n"
                % (i.name_lower)
            )
        self.outfile.write("  },\n" '  "%s",\n' "};\n" "\n" % (i.name_hyphen))
        self.outfile.write("\n")
        self.outfile.write(
            self.docbook_gen.expand(
                "/**\n"
                " * %s_interface_info:\n"
                " *\n"
                " * Gets a machine-readable description of the #%s D-Bus interface.\n"
                " *\n"
                " * Returns: (transfer none): A #GDBusInterfaceInfo. Do not free.\n"
                % (i.name_lower, i.name),
                False,
            )
        )
        self.write_gtkdoc_deprecated_and_since_and_close(i, self.outfile, 0)
        self.outfile.write(
            "GDBusInterfaceInfo *\n"
            "%s_interface_info (void)\n"
            "{\n"
            "  return (GDBusInterfaceInfo *) &_%s_interface_info.parent_struct;\n"
            "}\n"
            "\n" % (i.name_lower, i.name_lower)
        )

        self.outfile.write(
            self.docbook_gen.expand(
                "/**\n"
                " * %s_override_properties:\n"
                " * @klass: The class structure for a #GObject derived class.\n"
                " * @property_id_begin: The property id to assign to the first overridden property.\n"
                " *\n"
                " * Overrides all #GObject properties in the #%s interface for a concrete class.\n"
                " * The properties are overridden in the order they are defined.\n"
                " *\n"
                " * Returns: The last property id.\n" % (i.name_lower, i.camel_name),
                False,
            )
        )
        self.write_gtkdoc_deprecated_and_since_and_close(i, self.outfile, 0)
        self.outfile.write(
