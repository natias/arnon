=back

=back

=for hackers
Found in file mg.c

=over 4

=item C<magic_sethint>
X<magic_sethint>

Triggered by a store to C<%^H>, records the key/value pair to
C<PL_compiling.cop_hints_hash>.  It is assumed that hints aren't storing
anything that would need a deep copy.  Maybe we should warn if we find a
reference.

=over 3

 int  magic_sethint(SV *sv, MAGIC *mg)

=back

=back

=for hackers
Found in file mg.c

=over 4

=item C<mg_dup>
X<mg_dup>

Duplicate a chain of magic, returning a pointer to the cloned object.

=over 3

 MAGIC *  mg_dup(MAGIC *mg, CLONE_PARAMS * const param)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<mg_localize>
X<mg_localize>

Copy some of the magic from an existing SV to new localized version of that
SV.  Container magic (I<e.g.>, C<%ENV>, C<$1>, C<tie>)
gets copied, value magic doesn't (I<e.g.>,
C<taint>, C<pos>).

If C<setmagic> is false then no set magic will be called on the new (empty) SV.
This typically means that assignment will soon follow (e.g. S<C<'local $x = $y'>>),
and that will handle the magic.

=over 3

 void  mg_localize(SV *sv, SV *nsv, bool setmagic)

=back

=back

=for hackers
Found in file mg.c

=head1 Memory Management

=over 4

=item C<calloc>
X<calloc>

Implements L<perlapi/C<Newxz>> which you should use instead.

NOTE: C<calloc> must be explicitly called as
C<Perl_calloc>
.

=over 3

 Malloc_t  Perl_calloc(MEM_SIZE elements, MEM_SIZE size)

=back

=back

=for hackers
Found in file malloc.c

=over 4

=item C<malloc>
X<malloc>

Implements L<perlapi/C<Newx>> which you should use instead.

NOTE: C<malloc> must be explicitly called as
C<Perl_malloc>
.

=over 3

 Malloc_t  Perl_malloc(MEM_SIZE nbytes)

=back

=back

=for hackers
Found in file malloc.c

=over 4

=item C<mfree>
X<mfree>

Implements L<perlapi/C<Safefree>> which you should use instead.

NOTE: C<mfree> must be explicitly called as
C<Perl_mfree>
.

=over 3

 Free_t  Perl_mfree(Malloc_t where)

=back

=back

=for hackers
Found in file malloc.c

=over 4

=item C<realloc>
X<realloc>

Implements L<perlapi/C<Renew>> which you should use instead.

NOTE: C<realloc> must be explicitly called as
C<Perl_realloc>
.

=over 3

 Malloc_t  Perl_realloc(Malloc_t where, MEM_SIZE nbytes)

=back

=back

=for hackers
Found in file malloc.c

=head1 MRO

=over 4

=item C<mro_get_linear_isa_dfs>
X<mro_get_linear_isa_dfs>

Returns the Depth-First Search linearization of C<@ISA>
the given stash.  The return value is a read-only AV*
whose elements are string SVs giving class names.
C<level> should be 0 (it is used internally in this
function's recursion).

You are responsible for C<SvREFCNT_inc()> on the
return value if you plan to store it anywhere
semi-permanently (otherwise it might be deleted
out from under you the next time the cache is
invalidated).

=over 3

 AV *  mro_get_linear_isa_dfs(HV *stash, U32 level)

=back

=back

=for hackers
Found in file mro_core.c

=over 4

=item C<mro_isa_changed_in>
X<mro_isa_changed_in>

Takes the necessary steps (cache invalidations, mostly)
when the C<@ISA> of the given package has changed.  Invoked
by the C<setisa> magic, should not need to invoke directly.

=over 3

 void  mro_isa_changed_in(HV *stash)

=back

=back

=for hackers
Found in file mro_core.c

=over 4

=item C<mro_package_moved>
X<mro_package_moved>

Call this function to signal to a stash that it has been assigned to
another spot in the stash hierarchy.  C<stash> is the stash that has been
assigned.  C<oldstash> is the stash it replaces, if any.  C<gv> is the glob
that is actually being assigned to.

This can also be called with a null first argument to
indicate that C<oldstash> has been deleted.

This function invalidates isa caches on the old stash, on all subpackages
nested inside it, and on the subclasses of all those, including
non-existent packages that have corresponding entries in C<stash>.

It also sets the effective names (C<HvENAME>) on all the stashes as
appropriate.

If the C<gv> is present and is not in the symbol table, then this function
simply returns.  This checked will be skipped if C<flags & 1>.

=over 3

 void  mro_package_moved(HV * const stash, HV * const oldstash,
                         const GV * const gv, U32 flags)

=back

=back

=for hackers
Found in file mro_core.c

=head1 Multicall Functions

There are currently no internal API items in Multicall Functions

=head1 Numeric Functions

=over 4

=item C<isinfnansv>
X<isinfnansv>

Checks whether the argument would be either an infinity or C<NaN> when used
as a number, but is careful not to trigger non-numeric or uninitialized
warnings.  it assumes the caller has done C<SvGETMAGIC(sv)> already.

Note that this always accepts trailing garbage (similar to C<grok_number_flags>
with C<PERL_SCAN_TRAILING>), so C<"inferior"> and C<"NAND gates"> will
return true.

=over 3

 bool  isinfnansv(SV *sv)

=back

=back

=for hackers
Found in file numeric.c

=head1 Optrees

=over 4

=item C<newATTRSUB_x>
X<newATTRSUB_x>

Construct a Perl subroutine, also performing some surrounding jobs.

This function is expected to be called in a Perl compilation context,
and some aspects of the subroutine are taken from global variables
associated with compilation.  In particular, C<PL_compcv> represents
the subroutine that is currently being compiled.  It must be non-null
when this function is called, and some aspects of the subroutine being
constructed are taken from it.  The constructed subroutine may actually
be a reuse of the C<PL_compcv> object, but will not necessarily be so.

If C<block> is null then the subroutine will have no body, and for the
time being it will be an error to call it.  This represents a forward
subroutine declaration such as S<C<sub foo ($$);>>.  If C<block> is
non-null then it provides the Perl code of the subroutine body, which
will be executed when the subroutine is called.  This body includes
any argument unwrapping code resulting from a subroutine signature or
similar.  The pad use of the code must correspond to the pad attached
to C<PL_compcv>.  The code is not expected to include a C<leavesub> or
C<leavesublv> op; this function will add such an op.  C<block> is consumed
by this function and will become part of the constructed subroutine.

C<proto> specifies the subroutine's prototype, unless one is supplied
as an attribute (see below).  If C<proto> is null, then the subroutine
will not have a prototype.  If C<proto> is non-null, it must point to a
C<const> op whose value is a string, and the subroutine will have that
string as its prototype.  If a prototype is supplied as an attribute, the
attribute takes precedence over C<proto>, but in that case C<proto> should
preferably be null.  In any case, C<proto> is consumed by this function.

C<attrs> supplies attributes to be applied the subroutine.  A handful of
attributes take effect by built-in means, being applied to C<PL_compcv>
immediately when seen.  Other attributes are collected up and attached
to the subroutine by this route.  C<attrs> may be null to supply no
attributes, or point to a C<const> op for a single attribute, or point
to a C<list> op whose children apart from the C<pushmark> are C<const>
ops for one or more attributes.  Each C<const> op must be a string,
giving the attribute name optionally followed by parenthesised arguments,
in the manner in which attributes appear in Perl source.  The attributes
will be applied to the sub by this function.  C<attrs> is consumed by
this function.

If C<o_is_gv> is false and C<o> is null, then the subroutine will
be anonymous.  If C<o_is_gv> is false and C<o> is non-null, then C<o>
must point to a C<const> OP, which will be consumed by this function,
and its string value supplies a name for the subroutine.  The name may
be qualified or unqualified, and if it is unqualified then a default
stash will be selected in some manner.  If C<o_is_gv> is true, then C<o>
doesn't point to an C<OP> at all, but is instead a cast pointer to a C<GV>
by which the subroutine will be named.

If there is already a subroutine of the specified name, then the new
sub will either replace the existing one in the glob or be merged with
the existing one.  A warning may be generated about redefinition.

If the subroutine has one of a few special names, such as C<BEGIN> or
C<END>, then it will be claimed by the appropriate queue for automatic
running of phase-related subroutines.  In this case the relevant glob will
be left not containing any subroutine, even if it did contain one before.
In the case of C<BEGIN>, the subroutine will be executed and the reference
to it disposed of before this function returns.

The function returns a pointer to the constructed subroutine.  If the sub
is anonymous then ownership of one counted reference to the subroutine
is transferred to the caller.  If the sub is named then the caller does
not get ownership of a reference.  In most such cases, where the sub
has a non-phase name, the sub will be alive at the point it is returned
by virtue of being contained in the glob that names it.  A phase-named
subroutine will usually be alive by virtue of the reference owned by the
phase's automatic run queue.  But a C<BEGIN> subroutine, having already
been executed, will quite likely have been destroyed already by the
time this function returns, making it erroneous for the caller to make
any use of the returned pointer.  It is the caller's responsibility to
ensure that it knows which of these situations applies.

=over 3

 CV *  newATTRSUB_x(I32 floor, OP *o, OP *proto, OP *attrs,
                    OP *block, bool o_is_gv)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newMYSUB>
X<newMYSUB>

Construct a Perl lexical subroutine, also performing some surrounding jobs, and
returning a pointer to the constructed subroutine.

Similar in action to L<perlintern/C<newATTRSUB_x>>.

=over 3

 CV *  newMYSUB(I32 floor, OP *o, OP *proto, OP *attrs, OP *block)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newXS_len_flags>
X<newXS_len_flags>

Construct an XS subroutine, also performing some surrounding jobs.

The subroutine will have the entry point C<subaddr>.  It will have
the prototype specified by the nul-terminated string C<proto>, or
no prototype if C<proto> is null.  The prototype string is copied;
the caller can mutate the supplied string afterwards.  If C<filename>
is non-null, it must be a nul-terminated filename, and the subroutine
will have its C<CvFILE> set accordingly.  By default C<CvFILE> is set to
point directly to the supplied string, which must be static.  If C<flags>
has the C<XS_DYNAMIC_FILENAME> bit set, then a copy of the string will
be taken instead.

Other aspects of the subroutine will be left in their default state.
If anything else needs to be done to the subroutine for it to function
correctly, it is the caller's responsibility to do that after this
function has constructed it.  However, beware of the subroutine
potentially being destroyed before this function returns, as described
below.

If C<name> is null then the subroutine will be anonymous, with its
C<CvGV> referring to an C<__ANON__> glob.  If C<name> is non-null then the
subroutine will be named accordingly, referenced by the appropriate glob.
C<name> is a string of length C<len> bytes giving a sigilless symbol name,
in UTF-8 if C<flags> has the C<SVf_UTF8> bit set and in Latin-1 otherwise.
The name may be either qualified or unqualified, with the stash defaulting
in the same manner as for C<gv_fetchpvn_flags>.  C<flags> may contain
flag bits understood by C<gv_fetchpvn_flags> with the same meaning as
they have there, such as C<GV_ADDWARN>.  The symbol is always added to
the stash if necessary, with C<GV_ADDMULTI> semantics.

If there is already a subroutine of the specified name, then the new sub
will replace the existing one in the glob.  A warning may be generated
about the redefinition.  If the old subroutine was C<CvCONST> then the
decision about whether to warn is influenced by an expectation about
whether the new subroutine will become a constant of similar value.
That expectation is determined by C<const_svp>.  (Note that the call to
this function doesn't make the new subroutine C<CvCONST> in any case;
that is left to the caller.)  If C<const_svp> is null then it indicates
that the new subroutine will not become a constant.  If C<const_svp>
is non-null then it indicates that the new subroutine will become a
constant, and it points to an C<SV*> that provides the constant value
that the subroutine will have.

If the subroutine has one of a few special names, such as C<BEGIN> or
C<END>, then it will be claimed by the appropriate queue for automatic
running of phase-related subroutines.  In this case the relevant glob will
be left not containing any subroutine, even if it did contain one before.
In the case of C<BEGIN>, the subroutine will be executed and the reference
to it disposed of before this function returns, and also before its
prototype is set.  If a C<BEGIN> subroutine would not be sufficiently
constructed by this function to be ready for execution then the caller
must prevent this happening by giving the subroutine a different name.

The function returns a pointer to the constructed subroutine.  If the sub
is anonymous then ownership of one counted reference to the subroutine
is transferred to the caller.  If the sub is named then the caller does
not get ownership of a reference.  In most such cases, where the sub
has a non-phase name, the sub will be alive at the point it is returned
by virtue of being contained in the glob that names it.  A phase-named
subroutine will usually be alive by virtue of the reference owned by the
phase's automatic run queue.  But a C<BEGIN> subroutine, having already
been executed, will quite likely have been destroyed already by the
time this function returns, making it erroneous for the caller to make
any use of the returned pointer.  It is the caller's responsibility to
ensure that it knows which of these situations applies.

=over 3

 CV *  newXS_len_flags(const char *name, STRLEN len,
                       XSUBADDR_t subaddr,
                       const char * const filename,
                       const char * const proto, SV ** const_svp,
                       U32 flags)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<op_refcnt_lock>
X<op_refcnt_lock>

Implements the C<OP_REFCNT_LOCK> macro which you should use instead.

=over 3

 void  op_refcnt_lock()

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<op_refcnt_unlock>
X<op_refcnt_unlock>

Implements the C<OP_REFCNT_UNLOCK> macro which you should use instead.

=over 3

 void  op_refcnt_unlock()

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<traverse_op_tree>
X<traverse_op_tree>

Return the next op in a depth-first traversal of the op tree,
returning NULL when the traversal is complete.

The initial call must supply the root of the tree as both top and o.

For now it's static, but it may be exposed to the API in the future.

=over 3

 OP *  traverse_op_tree(OP *top, OP *o)

=back

=back

=for hackers
Found in file peep.c

=head1 Pack and Unpack

There are currently no internal API items in Pack and Unpack

=head1 Pad Data Structures

=over 4

=item C<CX_CURPAD_SAVE>
X<CX_CURPAD_SAVE>

Save the current pad in the given context block structure.

=over 3

 void  CX_CURPAD_SAVE(struct context)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<CX_CURPAD_SV>
X<CX_CURPAD_SV>

Access the SV at offset C<po> in the saved current pad in the given
context block structure (can be used as an lvalue).

=over 3

 SV *  CX_CURPAD_SV(struct context, PADOFFSET po)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PAD_BASE_SV>
X<PAD_BASE_SV>

Get the value from slot C<po> in the base (DEPTH=1) pad of a padlist

=over 3

 SV *  PAD_BASE_SV(PADLIST padlist, PADOFFSET po)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PAD_CLONE_VARS>
X<PAD_CLONE_VARS>

Clone the state variables associated with running and compiling pads.

=over 3

 void  PAD_CLONE_VARS(PerlInterpreter *proto_perl,
                      CLONE_PARAMS* param)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PAD_COMPNAME_FLAGS>
X<PAD_COMPNAME_FLAGS>

Return the flags for the current compiling pad name
at offset C<po>.  Assumes a valid slot entry.

=over 3

 U32  PAD_COMPNAME_FLAGS(PADOFFSET po)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PAD_COMPNAME_GEN>
X<PAD_COMPNAME_GEN>

The generation number of the name at offset C<po> in the current
compiling pad (lvalue).

=over 3

 STRLEN  PAD_COMPNAME_GEN(PADOFFSET po)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PAD_COMPNAME_GEN_set>
X<PAD_COMPNAME_GEN_set>

Sets the generation number of the name at offset C<po> in the current
ling pad (lvalue) to C<gen>.

=over 3

 STRLEN  PAD_COMPNAME_GEN_set(PADOFFSET po, int gen)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PAD_COMPNAME_OURSTASH>
X<PAD_COMPNAME_OURSTASH>

Return the stash associated with an C<our> variable.
Assumes the slot entry is a valid C<our> lexical.

=over 3

 HV *  PAD_COMPNAME_OURSTASH(PADOFFSET po)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PAD_COMPNAME_PV>
X<PAD_COMPNAME_PV>

Return the name of the current compiling pad name
at offset C<po>.  Assumes a valid slot entry.

=over 3

 char *  PAD_COMPNAME_PV(PADOFFSET po)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PAD_COMPNAME_TYPE>
X<PAD_COMPNAME_TYPE>

Return the type (stash) of the current compiling pad name at offset
C<po>.  Must be a valid name.  Returns null if not typed.

=over 3

 HV *  PAD_COMPNAME_TYPE(PADOFFSET po)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PadnameIsFIELD>
X<PadnameIsFIELD>

Whether this is a "field" variable.  PADNAMEs where this is true will
have additional information available via C<PadnameFIELDINFO>.

=over 3

 bool  PadnameIsFIELD(PADNAME * pn)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PadnameIsOUR>
X<PadnameIsOUR>

Whether this is an "our" variable.

=over 3

 bool  PadnameIsOUR(PADNAME * pn)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PadnameIsSTATE>
X<PadnameIsSTATE>

Whether this is a "state" variable.

=over 3

 bool  PadnameIsSTATE(PADNAME * pn)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PadnameOURSTASH>
X<PadnameOURSTASH>

The stash in which this "our" variable was declared.

=over 3

 HV *  PadnameOURSTASH(PADNAME * pn)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PadnameOUTER>
X<PadnameOUTER>

Whether this entry belongs to an outer pad.  Entries for which this is true
are often referred to as 'fake'.

=over 3

 bool  PadnameOUTER(PADNAME * pn)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PadnameTYPE>
X<PadnameTYPE>

The stash associated with a typed lexical.  This returns the C<%Foo::> hash
for C<my Foo $bar>.

=over 3

 HV *  PadnameTYPE(PADNAME * pn)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PAD_RESTORE_LOCAL>
X<PAD_RESTORE_LOCAL>

Restore the old pad saved into the local variable C<opad> by C<PAD_SAVE_LOCAL()>

=over 3

 void  PAD_RESTORE_LOCAL(PAD *opad)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PAD_SAVE_LOCAL>
X<PAD_SAVE_LOCAL>

Save the current pad to the local variable C<opad>, then make the
current pad equal to C<npad>

=over 3

 void  PAD_SAVE_LOCAL(PAD *opad, PAD *npad)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PAD_SAVE_SETNULLPAD>
X<PAD_SAVE_SETNULLPAD>

Save the current pad then set it to null.

=over 3

 void  PAD_SAVE_SETNULLPAD()

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PAD_SET_CUR>
X<PAD_SET_CUR>

Set the current pad to be pad C<n> in the padlist, saving
the previous current pad.  NB currently this macro expands to a string too
long for some compilers, so it's best to replace it with

    SAVECOMPPAD();
    PAD_SET_CUR_NOSAVE(padlist,n);

=over 3

 void  PAD_SET_CUR(PADLIST padlist, I32 n)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PAD_SET_CUR_NOSAVE>
X<PAD_SET_CUR_NOSAVE>

like PAD_SET_CUR, but without the save

=over 3

 void  PAD_SET_CUR_NOSAVE(PADLIST padlist, I32 n)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PAD_SETSV>
X<PAD_SETSV>

Set the slot at offset C<po> in the current pad to C<sv>

=over 3

 SV *  PAD_SETSV(PADOFFSET po, SV* sv)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PAD_SV>
X<PAD_SV>

Get the value at offset C<po> in the current pad

=over 3

 SV *  PAD_SV(PADOFFSET po)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PAD_SVl>
X<PAD_SVl>

Lightweight and lvalue version of C<PAD_SV>.
Get or set the value at offset C<po> in the current pad.
Unlike C<PAD_SV>, does not print diagnostics with -DX.
For internal use only.

=over 3

 SV *  PAD_SVl(PADOFFSET po)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<SAVECLEARSV>
X<SAVECLEARSV>

Clear the pointed to pad value on scope exit.  (i.e. the runtime action of
C<my>)
