
=item instance

Short for “an instance of a class”, X<instances (term)>meaning an B<object>
of that B<class>.

=item instance data

SeeX<instance data> B<instance variable>.

=item instance method

A B<method> of X<instance methods>X<methods, instance>an B<object>, as
opposed to a B<class method>.

A B<method> whose B<invocant> is an B<object>, not a B<package> name. Every
object of a class shares all the methods of that class, so an instance
method applies to all instances of the class, rather than applying to a
particular instance. Also see B<class method>.

=item instance variable

An B<attribute> of an B<object>; X<instance variables, defined>X<variables,
instance>data stored with the particular object rather than with the class
as a whole.

=item integer

A number X<integers (term)>with no fractional (decimal) part. A counting
number, like 1, 2, 3, and so on, but including 0 and the negatives.

=item interface

The services X<interfaces (term)>a piece of code promises to provide
forever, in contrast to its B<implementation>, which it should feel free to
change whenever it likes.

=item interpolation

The insertion of X<interpolation, defined>a scalar or list value somewhere
in the middle of another value, such that it appears to have been there all
along. In Perl, variable interpolation happens in double-quoted strings and
patterns, and list interpolation occurs when constructing the list of
values to pass to a list operator or other such construct that takes a
I<C<LIST>>.

=item interpreter

Strictly speaking, X<interpreters, defined>a program that reads a second
program and does what the second program says directly without turning the
program into a different form first, which is what B<compilers> do. Perl is
not an interpreter by this definition, because it contains a kind of
compiler that takes a program and turns it into a more executable form
(B<syntax trees>) within the I<perl> process itself, which the Perl
B<runtime> system then interprets.

=item invocant

The agent on X<invocants, defined>whose behalf a B<method> is invoked. In a
B<class> method, the invocant is a package name. In an B<instance> method,
the invocant is an object reference.

=item invocation

The act of X<invocation, method>calling up a deity, daemon, program,
method, subroutine, or function to get it to do what you think it’s
supposed to do.  We usually “call” subroutines but “invoke” methods, since
it sounds cooler.

=item I/O

Input from, or X<I/O (Input/Output), defined>X<Input/Output (I/O),
defined>output to, a B<file> or B<device>.

=item IO

An internal I/O object. Can also mean B<indirect object>.

=item I/O layer

One of the X<I/O layer>filters between the data and what you get as input
or what you end up with as output.

=item IPA

India Pale Ale. Also the X<International Phonetic Alphabet (IPA)>X<IPA
(International Phonetic Alphabet)>International Phonetic Alphabet, the
standard alphabet used for phonetic notation worldwide. Draws heavily on
Unicode, including many combining characters.

=item IP

Internet ProtocolX<Internet Protocol (IP)>X<IP (Internet Protocol)>, or
X<IP (Intellectual Property)>X<Intellectual Property (IP)>Intellectual
Property.

=item IPC

Interprocess X<Interprocess Communication>X<IPC (Interprocess
Communication), about>X<communication>Communication.

=item is-a

A rX<is–a relationship>elationship between two B<objects> in which one
object is considered to be a more specific version of the other, generic
object: “A camel is a mammal.” Since the generic object really only exists
in a Platonic sense, we usually add a little abstraction to the notion of
objects and think of the relationship as being between a generic B<base
class> and a specific B<derived class>. Oddly enough, Platonic classes
don’t always have Platonic relationships—see B<inheritance>.

=item iteration

Doing X<iteration>something repeatedly.

=item iterator

A special X<iterators>programming gizmo that keeps track of where you are
in something that you’re trying to iterate over. The C<foreach> loop in
Perl contains an iterator; so does a hash, allowing you to C<each> through
it.

=item IV

The integer X<IV (Integer Value)>X<Integer Value (IV)>four, not to be
confused with six, Tom’s favorite editor. IV also means an internal Integer
Value of the type a B<scalar> can hold, not to be confused with an B<NV>.

=back

=head2 J

=over 4

=item JAPH

“Just Another Perl Hacker”, a X<JAPH acronym>clever but cryptic bit of Perl
code that, when executed, evaluates to that string. Often used to
illustrate a particular Perl feature, and something of an ongoing
Obfuscated Perl Contest seen in USENET signatures.

=back

=head2 K

=over 4

=item key

The X<keys, defined>string index to a B<hash>, used to look up the B<value>
associated with that key.

=item keyword

See B<reserved words>.

=back

=head2 L

=over 4

=item label

A X<labels, defined>name you give to a B<statement> so that you can talk
about that statement elsewhere in the program.

=item laziness

The X<laziness quality>quality that makes you go to great effort to reduce
overall energy expenditure. It makes you write labor-saving programs that
other people will find useful, and then document what you wrote so you
don’t have to answer so many questions about it. Hence, the first great
virtue of a programmer. Also hence, this book. See also B<impatience> and
B<hubris>.

=item leftmost longest

The X<leftmost longest preference>X<regular expressions, leftmost longest
preference>preference of the B<regular expression> engine to match the
leftmost occurrence of a B<pattern>, then given a position at which a match
will occur, the preference for the longest match (presuming the use of a
B<greedy> quantifier). See Camel chapter 5, “Pattern Matching” for I<much>
more on this subject.

=item left shift

A B<bit shift> that X<left shift (E<lt>E<lt>) bit operator>X<bit–shift
operators, left shift>X<E<lt>E<lt> (left shift) bit operator>multiplies the
number by some power of 2.

=item lexeme

Fancy X<lexeme (token)>term for a B<token>.

=item lexer

Fancy X<lexer (tokener)>term for a B<tokener>.

=item lexical analysis

Fancy X<lexical analysis>term for B<tokenizing>.

=item lexical scoping

Looking X<lexical scopes, defined>X<scopes>at your I<Oxford English
Dictionary> through a microscope. (Also known as B<static scoping>, because
dictionaries don’t change very fast.) Similarly, looking at variables
stored in a private dictionary (namespace) for each scope, which are
visible only from their point of declaration down to the end of theX<static
scopes>X<scopes, static> lexical scope in which they are declared. —Syn.
B<static scoping>. —Ant. B<dynamic scoping>.

=item lexical variable

A B<variable> X<lexical variables, about>X<variables, lexical>subject to
B<lexical scoping>, declared by C<my>. Often just called a “lexical”. (The
C<our> declaration declares a lexically scoped name for a global variable,
which is not itself a lexical variable.)

=item library

Generally, a X<libraries, defined>collection of procedures. In ancient
days, referred to a collection of subroutines in a I<.pl> file. In modern
times, refers more often to the entire collection of Perl B<modules> on
your system.

=item LIFO

Last In, First OutX<Last In, First Out (LIFO)>X<LIFO (Last In, First
Out)>X<stacks, defined>. See also B<FIFO>. A LIFO is usually called a
B<stack>.

=item line

In Unix, a X<line (term)>sequence of zero or more nonnewline characters
terminated with a B<newline> character. On non-Unix machines, this is
emulated by the C library even if the underlying B<operating system> has
different ideas.

=item linebreak

A B<grapheme> X<linebreaks>consisting of either a carriage return followed
by a line feed or any character with the Unicode Vertical Space B<character
property>.

=item line buffering

Used by X<line buffering>X<buffering, line>a B<standard I/O> output stream that
flushes its B<buffer> after every B<newline>. Many standard I/O libraries
automatically set up line buffering on output that is going to the terminal.

=item line number

The number X<line number>of lines read previous to this one, plus 1. Perl
keeps a separate line number for each source or input file it opens. The
current source file’s line number is represented by C<__LINE__>. The
current input line number (for the file that was most recently read via
C<E<lt>FHE<gt>>) is represented by the C<$.> (C<$INPUT_LINE_NUMBER>)
variable. Many error messages report both values, if available.

=item link

Used as a X<links, defined>noun, a name in a B<directory> that represents a
B<file>. A given file can have multiple links to it. It’s like having the
same phone number listed in the phone directory under different names. As a
verb, to resolve a partially B<compiled> file’s unresolved symbols into a
(nearly) executable image. Linking can generally be static or dynamic,
which has nothing to do with static or dynamic scoping.

=item LIST

A syntactic X<LIST construct>X<constructs, LIST>construct representing a
comma- separated list of expressions, evaluated to produce a B<list value>.
Each B<expression> in a I<C<LIST>> is evaluated in B<list context> and
interpolated into the list value.

=item list

An ordered X<lists, defined>set of scalar values.

=item list context

The situation X<list context>X<context, list>in which an B<expression> is
expected by its surroundings (the code calling it) to return a list of
values rather than a single value. Functions that want a I<C<LIST>> of
arguments tell those arguments that they should produce a list value. See
also B<context>.

=item list operator

An B<operator> that X<list operators, about>does something with a list of
values, such as C<join> or C<grep>. Usually used for named built-in
operators (such as C<print>, C<unlink>, and C<system>) that do not require
parentheses around their B<argument> list.

=item list value

An unnamed X<list values, about>X<values, list>list of temporary scalar
values that may be passed around within a program from any list-generating
function to any function or construct that provides a B<list context>.

=item literal

A token X<literals, defined>in a programming language, such as a number or
B<string>, that gives you an actual B<value> instead of merely representing
possible values as a B<variable> does.

=item little-endian

From Swift: X<little–endian, defined>X<endianness, little–endian>someone
who eats eggs little end first. Also used of computers that store the least
significant B<byte> of a word at a lower byte address than the most
significant byte. Often considered superior to big-endian machines. See
also B<big-endian>.

=item local

Not meaning X<local operator, about>the same thing everywhere. A global
variable in Perl can be localized inside a B<dynamic scope> via the
C<local> operator.

=item logical operator

Symbols X<logical operators, about>representing the concepts “and”, “or”,
“xor”, and “not”.

=item lookahead

An B<assertion> that X<lookahead assertions>X<assertions (in regexes),
lookahead>peeks at the string to the right of the current match location.

=item lookbehind

An B<assertion> X<lookbehind assertions>X<assertions (in regexes),
lookbehind>that peeks at the string to the left of the current match
location.

=item loop

A construct X<loop constructs and statements, about>X<constructs, loop>that
performs something repeatedly, like a roller coaster.

=item loop control statement

Any statement X<statements, loop control>within the body of a loop that can
make a loop prematurely stop looping or skip an B<iteration>. Generally,
you shouldn’t try this on roller coasters.

=item loop label

A kind X<loop labels>X<labels, loop>of key or name attached to a loop (or
roller coaster) so that loop control statements can talk about which loop
they want to control.

=item lowercase

In Unicode, X<lowercase characters>X<characters, lowercase>not just
characters with the General Category of Lowercase Letter, but any character
with the Lowercase property, including Modifier Letters, Letter Numbers,
some Other Symbols, and one Combining Mark.

=item lvaluable

Able to X<lvaluable function>X<functions, lvaluable>serve as an B<lvalue>.

=item lvalue

Term used by X<lvalue (term)>X<values, lvalue>language lawyers for a
storage location you can assign a new B<value> to, such as a B<variable> or
an element of an B<array>. The “l” is short for “left”, as in the left side
of an assignment, a typical place for lvalues. An B<lvaluable> function or
expression is one to which a value may be assigned, as in C<pos($x) = 10>.

=item lvalue modifier

An X<lvalue modifier>X<modifiers, lvalue>adjectival pseudofunction that
warps the meaning of an B<lvalue> in some declarative fashion. Currently
there are three lvalue modifiers: C<my>, C<our>, and C<local>.

=back

=head2 M

=over 4

=item magic

Technically X<magic (term)>speaking, any extra semantics attached to a
variable such as C<$!>, C<$0>, C<%ENV>, or C<%SIG>, or to any tied
variable.  Magical things happen when you diddle those variables.

=item magical increment

An B<increment> X<magical increment operator>operator that knows how to
bump up ASCII alphabetics as well as numbers.

=item magical variables

Special variables X<magical variables>X<variables, magical>that have side
effects when you access them or assign to them. For example, in Perl,
changing elements of the C<%ENV> array also changes the corresponding
environment variables that subprocesses will use. Reading the C<$!>
variable gives you the current system error number or message.

=item Makefile

A file that X<Makefile>controls the compilation of a program. Perl programs
don’t usually need a B<Makefile> because the Perl compiler has plenty of
self-control.

=item man

The Unix X<man program (Unix)>program that displays online documentation
(manual pages) for you.

=item manpage

A “page” from the X<manpages, defined>manuals, typically accessed via the
I<man>(1) command. A manpage contains a SYNOPSIS, a DESCRIPTION, a list of
BUGS, and so on, and is typically longer than a page. There are manpages
documenting B<commands>, B<syscalls>, B<library> B<functions>, B<devices>,
B<protocols>, B<files>, and such. In this book, we call any piece of
standard Perl documentation (like L<perlop> or L<perldelta>) a manpage, no
matter what format it’s installed in on your system.

=item matching

SeeX<matching> B<pattern matching>.

=item member data

SeeX<member data> B<instance variable>.

=item memory

This X<memory, defined>always means your main memory, not your disk.
Clouding the issue is the fact that your machine may implement
B<virtual> memory; that is, it will pretend that it has more memory than
it really does, and it’ll use disk space to hold inactive bits. This can
make it seem like you have a little more memory than you really do, but
it’s not a substitute for real memory. The best thing that can be said
about virtual memory is that it lets your performance degrade gradually
rather than suddenly when you run out of real memory. But your program
can die when you run out of virtual memory, too—if you haven’t thrashed
your disk to death first.

=item metacharacter

A B<character> that X<metacharacters, about>X<characters, regex
metacharacters>is I<not> supposed to be treated normally. Which characters
are to be treated specially as metacharacters varies greatly from context to
context. Your B<shell> will have certain metacharacters, double-quoted Perl
B<strings> have other metacharacters,X<regular expressions, metacharacters and>
and B<regular expression> patterns have all the double-quote metacharacters plus
some extra ones of their own.

=item metasymbol

Something we’d call X<metasymbols, about>X<escape sequences>a
B<metacharacter> except that it’s a sequence of more than one character.
Generally, the first character in the sequence must be a true metacharacter
to get the other characters in the metasymbol to misbehave along with it.

=item method

A kind of X<methods, defined>action that an B<object> can take if you tell
it to. See Camel chapter 12, “Objects”.

=item method resolution order

The path X<method resolution order (mro)>X<mro (method resolution
order)>Perl takes through C<@INC>. By default, this is a double depth first
search, once looking for defined methods and once for C<AUTOLOAD>. However,
Perl lets you configure this with C<mro>.

=item minicpan

A CPAN X<minicpan, defined>X<CPAN (Comprehensive Perl Archive Network),
minicpan and>mirror that includes just the latest versions for each
distribution, probably created with C<CPAN::Mini>X<CPAN::Mini module>. See
Camel chapter 19, “CPAN”.

=item minimalism

The belief X<minimalism>that “small is beautiful”. Paradoxically, if you
say something in a small language, it turns out big, and if you say it in a
big language, it turns out small. Go figure.

=item mode

In the X<mode>context of the I<stat>(2) syscall, refers to the field
holding the B<permission bits> and the type of the B<file>.

=item modifier

SeeX<modifiers, defined> B<statement modifier>, B<regular expression>, and
B<lvalue>, not necessarily in that order.

=item module

A B<file> that X<modules, defined>defines a B<package> of (almost) the same
name, which can either B<export> symbols or function as an B<object> class.
(A module’s main I<.pm> file may also load in other files in support of the
module.) See the C<use> built-in.

=item modulus

An integer X<modulus (%) operator>X<% (modulus) operator>divisor when
you’re interested in the remainder instead of the quotient.

=item mojibake

When you X<mojibake>speak one language and the computer thinks you’re
speaking another. You’ll see odd translations when you send UTF‑8, for
instance, but the computer thinks you sent Latin-1, showing all sorts of
weird characters instead. The term is written 「文字化け」in Japanese and
means “character rot”, an apt description. Pronounced [C<modʑibake>] in
standard B<IPA> phonetics, or approximately “moh-jee-bah-keh”.

=item monger

Short for X<mongers, Perl>X<Perl mongers>one member of B<Perl mongers>, a
purveyor of Perl.

=item mortal

A temporary X<mortal value>X<values, mortal>value scheduled to die when the
current statement finishes.

=item mro

See B<method resolution order>.

=item multidimensional array

An array X<multidimensional arrays>X<arrays, multidimensional>with multiple
subscripts for finding a single element. Perl implements these using
B<references>—see Camel chapter 9, “Data Structures”.

=item multiple inheritance

The features X<multiple inheritance>X<inheritance, multiple>you got from
your mother and father, mixed together unpredictably. (See also
B<inheritance> and B<single inheritance>.) In computer languages (including
Perl), it is the notion that a given class may have multiple direct
ancestors or B<base classes>.

=back

=head2 N

=over 4

=item named pipe

A B<pipe> X<named pipes>X<pipes, names>with a name embedded in the
B<filesystem> so that it can be accessed by two unrelated B<processes>.

=item namespace

A domain of X<namespaces, about>names. You needn’t worry about whether the
names in one such domain have been used in another. See B<package>.

=item NaN

Not a number. X<NaN (not a number)>X<not a number (NaN)>The value Perl uses
for certain invalid or inexpressible floating-point operations.

=item network address

The most X<network address>important attribute of a socket, like your
telephone’s telephone number. Typically an IP address. See also B<port>.

=item newline

A single X<newline character>X<characters, newline>character that
represents the end of a line, with the ASCII value of 012 octal under Unix
(but 015 on a Mac), and represented by C<\n> in Perl strings. For Windows
machines writing text files, and for certain physical devices like
terminals, the single newline gets automatically translated by your C
library into a line feed and a carriage return, but normally, no
translation is done.

=item NFS

Network File System, X<NFS (Network File System)>X<Network File System
(NFS)>which allows you to mount a remote filesystem as if it were local.

=item normalization

Converting a X<normalization>text string into an alternate but equivalent
B<canonical> (or compatible) representation that can then be compared for
equivalence. Unicode recognizes four different normalization forms: NFD,
NFC, NFKD, and NFKC.

=item null character

A character X<null character>X<characters, null>with the numeric value of
zero. It’s used by C to terminate strings, but Perl allows strings to
contain a null.

=item null list

A B<list value> with X<null lists>X<lists, null>zero elements, represented
in Perl by C<()>.

=item null string

A B<string> X<null strings>X<strings, null>containing no characters, not to
be confused with a string containing a B<null character>, which has a
positive length and is B<true>.

=item numeric context

The situation X<numeric context>X<context, numeric>in which an expression
is expected by its surroundings (the code calling it) to return a number.
See also B<context> and B<string context>.

=item numification

(Sometimes spelled I<nummification> and I<nummify>.) X<numification>Perl lingo
for implicit conversion into a number; the related verb is I<numify>.
I<Numification> is intended to rhyme with I<mummification>, and I<numify> with
I<mummify>. It is unrelated to English I<numen>, I<numina>, I<numinous>. We
originally forgot the extra I<m> a long time ago, and some people got used to
our funny spelling, and so just as with C<HTTP_REFERER>’s own missing letter,
our weird spelling has stuck around.

=item NV

Short for Nevada, X<Numeric Value (NV)>X<NV (Numeric Value)>no part of
which will ever be confused with civilization. NV also means an internal
floating- point Numeric Value of the type a B<scalar> can hold, not to be
confused with an B<IV>.

=item nybble

Half a B<byte>, X<nybble>equivalent to one B<hexadecimal> digit, and worth
four B<bits>.

=back

=head2 O

=over 4

=item object

An B<instance> X<objects, defined>of a B<class>. Something that “knows”
what user-defined type (class) it is, and what it can do because of what
class it is. Your program can request an object to do things, but the
object gets to decide whether it wants to do them or not. Some objects are
more accommodating than others.

=item octal

A number X<octals>in base 8. Only the digits 0 through 7 are allowed. Octal
constants in Perl start with 0, as in 013. See also the C<oct> function.

=item offset

How many X<offsets in strings>X<strings, offsets in>things you have to skip
over when moving from the beginning of a string or array to a specific
position within it. Thus, the minimum offset is zero, not one, because you
don’t skip anything to get to the first item.

=item one-liner

An entire X<one–liner programs>computer program crammed into one line of
text.

=item open source software

Programs X<open source software>for which the source code is freely
available and freely redistributable, with no commercial strings attached.
For a more detailed definition, see L<http://www.opensource.org/osd.html>.

=item operand

An B<expression> X<operands (term)>that yields a B<value> that an
B<operator> operates on. See also B<precedence>.

=item operating system

A special X<operating systems, defined>program that runs on the bare
machine and hides the gory details of managing B<processes> and B<devices>.
Usually used in a looser sense to indicate a particular culture of
programming. The loose sense can be used at varying levels of specificity.
At one extreme, you might say that all versions of Unix and Unix-lookalikes
are the same operating system (upsetting many people, especially lawyers
and other advocates). At the other extreme, you could say this particular
version of this particular vendor’s operating system is different from any
other version of this or any other vendor’s operating system. Perl is much
more portable across operating systems than many other languages. See also
B<architecture> and B<platform>.

=item operator

A gizmo X<operators, about>that transforms some number of input values to
some number of output values, often built into a language with a special
syntax or symbol. A given operator may have specific expectations about
what B<types> of data you give as its arguments (B<operands>) and what type
of data you want back from it.

=item operator overloading

A kind X<operator overloading, about>X<overloading, operator>of
B<overloading> that you can do on built-in B<operators> to make them work
on B<objects> as if the objects were ordinary scalar values, but with the
actual semantics supplied by the object class. This is set up with the
overload B<pragma>—see Camel chapter 13, “Overloading”.

=item options

See X<options>either B<switches> or B<regular expression modifiers>.

=item ordinal

An X<ordinals (term)>abstract character’s integer value. Same thing as
B<codepoint>.

=item overloading

Giving X<overloading, defined>additional meanings to a symbol or construct.
Actually, all languages do overloading to one extent or another, since
people are good at figuring out things from B<context>.

=item overriding

Hiding or X<overriding, defined>invalidating some other definition of the
same name. (Not to be confused with B<overloading>, which adds definitions
that must be disambiguated some other way.) To confuse the issue further,
we use the word with two overloaded definitions: to describe how you can
define your own B<subroutine> to hide a built-in B<function> of the same
name (see the section “Overriding Built-in Functions” in Camel chapter 11,
“Modules”), and to describe how you can define a replacement B<method> in a
B<derived class> to hide a B<base class>’s method of the same name (see
Camel chapter 12, “Objects”).

=item owner

The one X<ownership, file>X<files, ownership of>user (apart from the
superuser) who has absolute control over a B<file>. A file may also have a
B<group> of users who may exercise joint ownership if the real owner
permits it. See B<permission bits>.

=back

=head2 P

=over 4

=item package

A B<namespace> for X<packages, defined>global B<variables>, B<subroutines>,
and the like, such that they can be kept separate from like-named
B<symbols> in other namespaces. In a sense, only the package is global,
since the symbols in the package’s symbol table are only accessible from
code B<compiled> outside the package by naming the package. But in another
sense, all package symbols are also globals—they’re just well-organized
globals.

=item pad

Short X<pads (scratchpads)>for B<scratchpad>.

=item parameter

SeeX<parameters> B<argument>.

=item parent class

SeeX<parent classes>X<classes, parent> B<base class>.

=item parse tree

SeeX<parse tree> B<syntax tree>.

=item parsing

The X<parsing, about>subtle but sometimes brutal art of attempting to turn
your possibly malformed program into a valid B<syntax tree>.

=item patch

To X<patches>fix by applying one, as it were. In the realm of hackerdom, a
listing of the differences between two versions of a program as might be
applied by the B<patch>(1) program when you want to fix a bug or upgrade
your old version.

=item PATH

The X<PATH environment variable>X<variables, environment>list of
B<directories> the system searches to find a program you want to
B<execute>.  The list is stored as one of your B<environment variables>,
accessible in Perl as C<$ENV{PATH}>.

=item pathname

A X<pathname>fully qualified filename such as I</usr/bin/perl>. Sometimes
confused with C<PATH>.

=item pattern

A X<patterns, defined>template used in B<pattern matching>.

=item pattern matching

Taking a X<pattern matching, about>pattern, usually a B<regular
expression>, and trying the pattern various ways on a string to see whether
there’s any way to make it fit. Often used to pick interesting tidbits out
of a file.

=item PAUSE

The X<Perl Authors Upload SErver (PAUSE)>X<PAUSE (Perl Authors Upload
SErver)>Perl Authors Upload SErver (L<http://pause.perl.org>), the gateway
for B<modules> on their way to B<CPAN>.

=item Perl mongers

A X<Perl mongers>X<mongers, Perl>Perl user group, taking the form of its
name from the New York Perl mongers, the first Perl user group. Find one
near you at L<http://www.pm.org>.

=item permission bits

Bits X<permission bits>X<bits, permission>that the B<owner> of a file sets
or unsets to allow or disallow access to other people. These flag bits are
part of the B<mode> word returned by the C<stat> built-in when you ask
about a file. On Unix systems, you can check the I<ls>(1) manpage for more
information.

=item Pern

What you get X<Pern (term)>when you do C<Perl++> twice. Doing it only once
will curl your hair. You have to increment it eight times to shampoo your
hair. Lather, rinse, iterate.

=item pipe

A X<pipes, defined>direct B<connection> that carries the output of one
B<process> to the input of another without an intermediate temporary file.
Once the pipe is set up, the two processes in question can read and write
as if they were talking to a normal file, with some caveats.

=item pipeline

A X<pipeline>series of B<processes> all in a row, linked by B<pipes>, where
each passes its output stream to the next.

=item platform

The X<platforms, defined>entire hardware and software context in which a
program runs. A program written in a platform-dependent language might
break if you change any of the following: machine, operating system,
libraries, compiler, or system configuration. The I<perl> interpreter has
to be B<compiled> differently for each platform because it is implemented
in C, but programs written in the Perl language are largely platform
independent.

=item pod

The X<pod (plain old documentation), about>X<plain old documentation>markup
used to embed documentation into your Perl code. Pod stands for “Plain old
documentation”. See Camel chapter 23, “Plain Old Documentation”.

=item pod command

A X<pod commands>X<commands, pod>sequence, such as C<=head1>, that denotes
the start of a B<pod> section.

=item pointer

A B<variable> X<pointers>in a language like C that contains the exact
memory location of some other item. Perl handles pointers internally so you
don’t have to worry about them. Instead, you just use symbolic pointers in
the form of B<keys> and B<variable> names, or B<hard references>, which
aren’t pointers (but act like pointers and do in fact contain pointers).

=item polymorphism

The notion X<polymorphism>that you can tell an B<object> to do something
generic, and the object will interpret the command in different ways
depending on its type. [E<lt> Greek πολυ- + μορϕή, many forms.]

=item port

The X<ports (term)>part of the address of a TCP or UDP socket that directs
packets to the correct process after finding the right machine, something
like the phone extension you give when you reach the company operator. Also
the result of converting code to run on a different platform than
originally intended, or the verb denoting this conversion.

=item portable

Once X<portability, about>upon a time, C code compilable under both BSD and
SysV. In general, code that can be easily converted to run on another
B<platform>, where “easily” can be defined however you like, and usually
is.  Anything may be considered portable if you try hard enough, such as a
mobile home or London Bridge.

=item porter

Someone X<porters>who “carries” software from one B<platform> to another.
Porting programs written in platform-dependent languages such as C can be
difficult work, but porting programs like Perl is very much worth the
agony.

=item possessive

Said of X<possessive (term)>quantifiers and groups in patterns that refuse
to give up anything once they’ve gotten their mitts on it. Catchier and
easier to say than the even more formal I<nonbacktrackable>.

=item POSIX

The X<Portable Operating System Interface (POSIX), about>X<POSIX (Portable
Operating System Interface), about>Portable Operating System Interface
specification.

=item postfix

An B<operator> X<postfix operator>that follows its B<operand>, as in
C<$x++>.

=item pp

An X<pp (push–pop) code>X<push–pop (pp) code>internal shorthand for a
“push- pop” code; that is, C code implementing Perl’s stack machine.

=item pragma

A X<pragmas, about>X<modules>standard module whose practical hints and
suggestions are received (and possibly ignored) at compile time. Pragmas
are named in all lowercase.

=item precedence

The X<precedence rules, about>X<operators, precedence rules>rules of
conduct that, in the absence of other guidance, determine what should
happen first.  For example, in the absence of parentheses, you always do
multiplication before addition.

=item prefix

An B<operator> X<prefix operators>that precedes its B<operand>, as in
C<++$x>.

=item preprocessing

What X<preprocessing>some helper B<process> did to transform the incoming
data into a form more suitable for the current process. Often done with an
incoming B<pipe>. See also B<C preprocessor>.

=item primary maintainer

The X<primary maintainer>author that PAUSE allows to assign B<co-maintainer>
permissions to a B<namespace>. A primary maintainer can give up this
distinction by assigning it to another PAUSE author. See Camel chapter 19,
“CPAN”.

=item procedure

AX<procedures, defined> B<subroutine>.

=item process

An X<processes, defined>instance of a running program. Under multitasking
systems like Unix, two or more separate processes could be running the same
program independently at the same time—in fact, the C<fork> function is
designed to bring about this happy state of affairs. Under other operating
systems, processes are sometimes called “threads”, “tasks”, or “jobs”,
often with slight nuances in meaning.

=item program

See B<script>.

=item program generator

A system X<program generators>that algorithmically writes code for you in a
high-level language. See also B<code generator>.

=item progressive matching

B<Pattern matching> X<progressive matching>X<pattern matching, progressive
matching> matching>that picks up where it left off before.

=item property

See X<property>either B<instance variable> or B<character property>.

=item protocol

In X<protocols (term)>networking, an agreed-upon way of sending messages
back and forth so that neither correspondent will get too confused.

=item prototype
