=item SYNOPSIS

=item import options

=over 4

=item encoding_only

=back

=item NOTES

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Require - Base class and documentation for skip-unless type
test
packages.

=over 4

=item DESCRIPTION

=item HOW DO I WRITE A 'REQUIRE' MODULE?

=over 4

=item AS A SUBCLASS

=item STAND-ALONE

=back

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Require::AuthorTesting - Only run a test when the
AUTHOR_TESTING
environment variable is set.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Require::AutomatedTesting - Only run a test when the
AUTOMATED_TESTING
environment variable is set.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Require::EnvVar - Only run a test when a specific environment
variable
is set.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Require::ExtendedTesting - Only run a test when the
EXTENDED_TESTING
environment variable is set.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Require::Fork - Skip a test file unless the system supports
forking

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPLANATION

=item SEE ALSO

L<Test2::Require::CanReallyfork>, L<Test2::Require::CanThread>

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Require::Module - Skip tests if certain packages are not
installed, or
insufficient versions.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Require::NonInteractiveTesting - Only run a test when the
NONINTERACTIVE_TESTING
environment variable is set.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Require::Perl - Skip the test unless the necessary version of
Perl is
installed.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Require::RealFork - Skip a test file unless the system
supports true
forking

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item SEE ALSO

L<Test2::Require::Canfork>, L<Test2::Require::CanThread>

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Require::ReleaseTesting - Only run a test when the
RELEASE_TESTING
environment variable is set.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Require::Threads - Skip a test file unless the system
supports threading

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPLANATION

=item SEE ALSO

L<Test2::Require::CanFork>, L<Test2>

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Suite - Distribution with a rich set of tools built upon the
Test2
framework.

=over 4

=item DESCRIPTION

=over 4

=item WHAT ARE TOOLS, PLUGINS, AND BUNDLES?

TOOLS, PLUGINS, BUNDLES

=back

=item INCLUDED BUNDLES

Test2::V#, Extended, More, Simple

=item INCLUDED TOOLS

Basic, Compare, ClassicCompare, Class, Defer, Encoding, Exports, Mock, Ref,
Spec, Subtest, Target

=item INCLUDED PLUGINS

BailOnFail, DieOnFail, ExitSummary, SRand, UTF8

=item INCLUDED REQUIREMENT CHECKERS

AuthorTesting, EnvVar, Fork, RealFork, Module, Perl, Threads

=item SEE ALSO

=item CONTACTING US

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Todo - TODO extension for Test2.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item CONSTRUCTION OPTIONS

reason (required), hub (optional)

=item INSTANCE METHODS

$todo->end

=item CLASS METHODS

$count = Test2::Todo->hub_in_todo($hub)

=item OTHER NOTES

=over 4

=item How it works

=item $todo->end is called at destruction

=item Can I use multiple instances?

=back

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools - Documentation for Tools.

=over 4

=item DESCRIPTION

=item FAQ

Why is it called Test2::Tools, and not Test2::Tool?, Should my tools
subclass Test2::Tools?

=item HOW DO I WRITE A 'TOOLS' MODULE?

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::AsyncSubtest - Tools for writing async subtests.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

$ast = async_subtest $name, $ast = async_subtest $name => sub { ... }, $ast
= async_subtest $name => \%hub_params, sub { ... }, $ast = fork_subtest
$name => sub { ... }, $ast = fork_subtest $name => \%hub_params, sub { ...
}, $ast = thread_subtest $name => sub { ... }, $ast = thread_subtest $name
=> \%hub_params, sub { ... }

=item NOTES

Async Subtests are always buffered, Do not use done_testing() yourself

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Basic - Test2 implementation of the basic testing
tools.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

=over 4

=item PLANNING

plan($num), plan('tests' => $num), plan('skip_all' => $reason),
skip_all($reason), done_testing, bail_out($reason)

=item ASSERTIONS

ok($bool), ok($bool, $name), ok($bool, $name, @diag), pass(), pass($name),
fail(), fail($name), fail($name, @diag)

=item DIAGNOSTICS

diag(@messages), note(@messages)

=item META

$todo = todo($reason), todo $reason => sub { ... }, skip($why), skip($why,
$count)

=back

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Class - Test2 implementation of the tools for testing
classes.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

can_ok($thing, @methods), can_ok($thing, \@methods, $test_name),
isa_ok($thing, @classes), isa_ok($thing, \@classes, $test_name),
DOES_ok($thing, @roles), DOES_ok($thing, \@roles, $test_name)

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::ClassicCompare - Classic (Test::More style) comparison
tools.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

$bool = is($got, $expect), $bool = is($got, $expect, $name), $bool =
is($got, $expect, $name, @diag), $bool = isnt($got, $dont_expect), $bool =
isnt($got, $dont_expect, $name), $bool = isnt($got, $dont_expect, $name,
@diag), $bool = like($got, $pattern), $bool = like($got, $pattern, $name),
$bool = like($got, $pattern, $name, @diag), $bool = unlike($got, $pattern),
$bool = unlike($got, $pattern, $name), $bool = unlike($got, $pattern,
$name, @diag), $bool = is_deeply($got, $expect), $bool = is_deeply($got,
$expect, $name), $bool = is_deeply($got, $expect, $name, @diag),
cmp_ok($got, $op, $expect), cmp_ok($got, $op, $expect, $name), cmp_ok($got,
$op, $expect, $name, @diag), !=  (num), >=  (num), <=  (num), >   (num), < 
 (num), <=> (num), eq  (str), ne  (str), gt  (str), lt	(str), ge  (str),
le  (str), cmp (str), !~  (str), &&, ||, xor, or, and, //, &, |, ~~

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Compare - Tools for comparing deep data structures.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=over 4

=item ADVANCED

=back

=item COMPARISON TOOLS

$bool = is($got, $expect), $bool = is($got, $expect, $name), $bool =
is($got, $expect, $name, @diag), $bool = isnt($got, $expect), $bool =
isnt($got, $expect, $name), $bool = isnt($got, $expect, $name, @diag),
$bool = like($got, $expect), $bool = like($got, $expect, $name), $bool =
like($got, $expect, $name, @diag), $bool = unlike($got, $expect), $bool =
unlike($got, $expect, $name), $bool = unlike($got, $expect, $name, @diag)

=over 4

=item QUICK CHECKS

$check = T(), $check = F(), $check = D(), $check = U(), $check = DF(),
$check = E(), $check = DNE(), $check = FDNE(), $check = L()

=item VALUE SPECIFICATIONS

$check = string "...", $check = !string "...", $check = number ...;, $check
= !number ...;, $check = number_lt ...;, $check = number_le ...;, $check =
number_ge ...;, $check = number_gt ...;, $check = float ...;, $check =
!float ...;, $check = within($num, $tolerance);, $check = !within($num,
$tolerance);, $check = rounded($num, $precision);, $check = !rounded($num,
$precision);, $check = bool ...;, $check = !bool ...;, $check = check_isa
...;, $check = !check_isa ...;, $check = match qr/.../, $check = !mismatch
qr/.../, $check = !match qr/.../, $check = mismatch qr/.../, $check =
validator(sub{ ... }), $check = validator($NAME => sub{ ... }), $check =
validator($OP, $NAME, sub{ ... }), $check = exact_ref($ref)

=item SET BUILDERS

my $check = check_set($check1, $check2, ...), my $check = in_set($check1,
$check2, ...), not_in_set($check1, $check2, ...), check $thing

=item HASH BUILDER

$check = hash { ... }, field $NAME => $VAL, field $NAME => $CHECK,
all_keys($CHECK1, $CHECK2, ...), all_vals($CHECK1, $CHECK2, ...),
all_values($CHECK1, $CHECK2, ...), end(), etc(), DNE()

=item ARRAY BUILDER

$check = array { ... }, item $VAL, item $CHECK, item $IDX, $VAL, item $IDX,
$CHECK, filter_items { my @remaining = @_; ...; return @filtered },
all_items($CHECK1, $CHECK2, ...), end(), etc(), DNE()

=item BAG BUILDER

$check = bag { ... }, item $VAL, item $CHECK, all_items($CHECK1, $CHECK2,
...), end(), etc()

=item ORDERED SUBSET BUILDER

$check = subset { ... }, item $VAL, item $CHECK

=item META BUILDER

meta { ... }, meta_check { ... }, prop $NAME => $VAL, prop $NAME => $CHECK,
'blessed', 'reftype', 'isa', 'this', 'size'

=item OBJECT BUILDER

$check = object { ... }, call $METHOD_NAME => $RESULT, call $METHOD_NAME =>
$CHECK, call [$METHOD_NAME, @METHOD_ARGS] => $RESULT, call [$METHOD_NAME,
@METHOD_ARGS] => $CHECK, call sub { ... }, $RESULT, call sub { ... },
$CHECK, call_list $METHOD_NAME => $RESULT, call_list $METHOD_NAME =>
$CHECK, call_list [$METHOD_NAME, @METHOD_ARGS] => $RESULT, call_list
[$METHOD_NAME, @METHOD_ARGS] => $CHECK, call_list sub { ... }, $RESULT,
call_list sub { ... }, $CHECK, call_hash $METHOD_NAME => $RESULT, call_hash
$METHOD_NAME => $CHECK, call_hash [$METHOD_NAME, @METHOD_ARGS] => $RESULT,
call_hash [$METHOD_NAME, @METHOD_ARGS] => $CHECK, call_hash sub { ... },
$RESULT, call_hash sub { ... }, $CHECK, field $NAME => $VAL, item $VAL,
item $IDX, $VAL, prop $NAME => $VAL, prop $NAME => $CHECK, 'blessed',
'reftype', 'isa', 'this', 'size', DNE(), end(), etc()

=item EVENT BUILDERS

$check = event $TYPE;, $check = event $TYPE => sub { ... };, $check = event
$TYPE => { ... };, 'file', 'line', 'package', 'subname', 'skip', 'todo',
'trace', 'tid', 'pid', @checks = fail_events $TYPE;, @checks = fail_events
$TYPE => sub { ... };, @checks = fail_events $TYPE => { ... };

=back

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Defer - Write tests that get executed at a later time

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

def function => @args;, do_def()

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Encoding - Tools for managing the encoding of L<Test2>
based
tests.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

set_encoding($encoding)

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Event - Tools for generating test events.

=over 4

=item DESCRIPTION

=item EXPORTS

$e = gen_event($TYPE), $e = gen_event($TYPE, %FIELDS), $e = gen_event
'Ok';, $e = gen_event Ok => ( ... ), $e = gen_event '+Test2::Event::Ok' =>
( ... )

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Exception - Test2 based tools for checking exceptions

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

$e = dies { ... }, $bool = lives { ... }, $bool = try_ok { ... }, $bool =
try_ok { ... } "Test Description"

=item DIFFERENCES FROM TEST::FATAL

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Exports - Tools for validating exporters.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

imported_ok(@SYMBOLS), not_imported_ok(@SYMBOLS)

=item CAVEATS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::GenTemp - Tool for generating a populated temp
directory.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

gen_temp(file => 'content', subdir => [ sub_dir_file => 'content', ...],
...), gen_temp(-tempdir => \@TEMPDIR_ARGS, file => 'content', subdir => [
sub_dir_file => 'content', ...], ...)

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Grab - Temporarily intercept all events without adding
a scope
level.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

$grab = grab()

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Mock - Class/Instance mocking for Test2.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

=over 4

=item DEFAULT

mock, @mocks = mocked($object), @mocks = mocked($class), $mock = mock
$class => ( ... );, $mock = mock $instance => ( ... ), $mock = mock
'class', $class => ( ... ), $obj = mock(), $obj = mock { ... }, $obj = mock
'obj', ...;, mock $mock => sub { ... }, mock $method => ( ... )

=item BY REQUEST

$obj = mock_obj( ... ), $obj = mock_obj { ... } => ( ... ), $obj = mock_obj
sub { ... }, $obj = mock_obj { ... } => sub { ... }, $mock = mock_class
$class => ( ... ), $mock = mock_class $instance => ( ... ), $mock =
mock_class ... => sub { ... }, mock_build $mock => sub { ... }, $mock =
mock_building(), mock_do $method => $args, $sub = mock_accessor $field,
$sub = mock_getter $field, $sub = mock_setter $field, %pairs =
mock_accessors(qw/name1 name2 name3/), %pairs = mock_getters(qw/name1 name2
name3/), %pairs = mock_setters(qw/name1 name2 name3/)

=back

=item MOCK CONTROL OBJECTS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Ref - Tools for validating references.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

ref_ok($thing), ref_ok($thing, $type), ref_ok($thing, $type, $name),
ref_is($ref1, $ref2, $name), ref_is_not($ref1, $ref2, $name)

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Tools::Refcount, C<Test2::Tools::Refcount> - assert reference
counts on objects

=over 4

=item SYNOPSIS

=item DESCRIPTION
