	0x1DFE,
	0x1DFF,
	0x1E00,
	0x20E8,
	0x20E9,
	0x20EC,
	0x20F0,
	0xA92B,
	0xA92E,
	0xAAB4,
	0xAAB5,
	0xFE27,
	0xFE2E,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10A0D,
	0x10A0E,
	0x10A3A,
	0x10A3B,
	0x10AE6,
	0x10AE7,
	0x10EFD,
	0x10F00,
	0x10F46,
	0x10F48,
	0x10F4B,
	0x10F4C,
	0x10F4D,
	0x10F51,
	0x10F83,
	0x10F84,
	0x10F85,
	0x10F86,
	0x1D17B,
	0x1D183,
	0x1D18A,
	0x1D18C,
	0x1E4EE,
	0x1E4EF,
	0x1E8D0,
	0x1E8D7
};

static const UV UNI_CCC__BL_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1DFA,
	0x1DFB,
	0x302A,
	0x302B
};

static const UV UNI_CCC__BR_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x59A,
	0x59B,
	0x5AD,
	0x5AE,
	0x1939,
	0x193A,
	0x302D,
	0x302E
};

static const UV UNI_CCC__DA_invlist[] = {  /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x35D,
	0x35F,
	0x360,
	0x362,
	0x1DCD,
	0x1DCE
};

static const UV UNI_CCC__DB_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x35C,
	0x35D,
	0x35F,
	0x360,
	0x362,
	0x363,
	0x1DFC,
	0x1DFD
};

static const UV UNI_CCC__IS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x345,
	0x346
};

static const UV UNI_CCC__L_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x302E,
	0x3030
};

static const UV UNI_CCC__R_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D16D,
	0x1D16E
};

static const UV UNI_CE_invlist[] = {  /* for all charsets */
	67,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x958,
	0x960,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB5C,
	0xB5E,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF76,
	0xF77,
	0xF78,
	0xF79,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x2ADC,
	0x2ADD,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB20,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB4F,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_CF_invlist[] = {  /* for ASCII/Latin1 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAD,
	0xAE,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x890,
	0x892,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200B,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x110CD,
	0x110CE,
	0x13430,
	0x13440,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_CF_invlist[] = {  /* for EBCDIC 1047 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x890,
	0x892,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200B,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x110CD,
	0x110CE,
	0x13430,
	0x13440,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_CF_invlist[] = {  /* for EBCDIC 037 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xCA,
	0xCB,
	0x600,
	0x606,
	0x61C,
	0x61D,
	0x6DD,
	0x6DE,
	0x70F,
	0x710,
	0x890,
	0x892,
	0x8E2,
	0x8E3,
	0x180E,
	0x180F,
	0x200B,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x110BD,
	0x110BE,
	0x110CD,
	0x110CE,
	0x13430,
	0x13440,
	0x1BCA0,
	0x1BCA4,
	0x1D173,
	0x1D17B,
	0xE0001,
	0xE0002,
	0xE0020,
	0xE0080
};

#  endif	/* EBCDIC 037 */

static const UV UNI_CHAM_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA5C,
	0xAA60
};

static const UV UNI_CHER_invlist[] = {  /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x13A0,
	0x13F6,
	0x13F8,
	0x13FE,
	0xAB70,
	0xABC0
};

static const UV UNI_CHEROKEESUP_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAB70,
	0xABC0
};

static const UV UNI_CHESSSYMBOLS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1FA00,
	0x1FA70
};

static const UV UNI_CHRS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10FB0,
	0x10FCC
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_CI_invlist[] = {  /* for ASCII/Latin1 */
	875,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x27,
	0x28,
	0x2E,
	0x2F,
	0x3A,
	0x3B,
	0x5E,
	0x5F,
	0x60,
	0x61,
	0xA8,
	0xA9,
	0xAD,
	0xAE,
	0xAF,
	0xB0,
	0xB4,
	0xB5,
	0xB7,
	0xB9,
	0x2B0,
	0x370,
	0x374,
	0x376,
	0x37A,
	0x37B,
	0x384,
	0x386,
	0x387,
	0x388,
	0x483,
	0x48A,
	0x559,
	0x55A,
	0x55F,
	0x560,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x5F4,
	0x5F5,
	0x600,
	0x606,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x640,
	0x641,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F6,
	0x7FA,
	0x7FB,
	0x7FD,
	0x7FE,
	0x816,
	0x82E,
	0x859,
	0x85C,
	0x888,
	0x889,
	0x890,
	0x892,
	0x898,
	0x8A0,
	0x8C9,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x971,
	0x972,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0x9FE,
	0x9FF,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3F,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB55,
	0xB57,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xC00,
	0xC01,
	0xC04,
	0xC05,
	0xC3C,
	0xC3D,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC6,
	0xCC7,
	0xCCC,
	0xCCE,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD62,
	0xD64,
	0xD81,
	0xD82,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE46,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEC6,
	0xEC7,
	0xEC8,
	0xECF,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x10FC,
	0x10FD,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1734,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DD,
	0x17DE,
	0x180B,
	0x1810,
	0x1843,
	0x1844,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AA7,
	0x1AA8,
	0x1AB0,
	0x1ACF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1C78,
	0x1C7E,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1D2C,
	0x1D6B,
	0x1D78,
	0x1D79,
	0x1D9B,
	0x1E00,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x200B,
	0x2010,
	0x2018,
	0x201A,
	0x2024,
	0x2025,
	0x2027,
	0x2028,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x2066,
	0x2070,
	0x2071,
	0x2072,
	0x207F,
	0x2080,
	0x2090,
	0x209D,
	0x20D0,
	0x20F1,
	0x2C7C,
	0x2C7E,
	0x2CEF,
	0x2CF2,
	0x2D6F,
	0x2D70,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x3005,
	0x3006,
	0x302A,
	0x302E,
	0x3031,
	0x3036,
	0x303B,
	0x303C,
	0x3099,
	0x309F,
	0x30FC,
	0x30FF,
	0xA015,
	0xA016,
	0xA4F8,
	0xA4FE,
	0xA60C,
	0xA60D,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA680,
	0xA69C,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA700,
	0xA722,
	0xA770,
	0xA771,
	0xA788,
	0xA78B,
	0xA7F2,
	0xA7F5,
	0xA7F8,
	0xA7FA,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA82C,
	0xA82D,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA8FF,
	0xA900,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BE,
	0xA9CF,
	0xA9D0,
	0xA9E5,
	0xA9E7,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA70,
	0xAA71,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAADD,
	0xAADE,
	0xAAEC,
	0xAAEE,
	0xAAF3,
	0xAAF5,
	0xAAF6,
	0xAAF7,
	0xAB5B,
	0xAB60,
	0xAB69,
	0xAB6C,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFBB2,
	0xFBC3,
	0xFE00,
	0xFE10,
	0xFE13,
	0xFE14,
	0xFE20,
	0xFE30,
	0xFE52,
	0xFE53,
	0xFE55,
	0xFE56,
	0xFEFF,
