accommodate each element in the right-hand list.

    use warnings;
    my (@xyz, $x, $y, $z);

    @xyz = (1, 2, 3);
    print "@xyz\n";                             # 1 2 3

    @xyz = ('al', 'be', 'ga', 'de');
    print "@xyz\n";                             # al be ga de

    @xyz = (101, 102);
    print "@xyz\n";                             # 101 102

When, however, you assign a list of scalars to another list of scalars, the
results differ according to whether the left-hand list -- the list being
assigned to -- has the same, more or fewer elements than the right-hand list.

    ($x, $y, $z) = (1, 2, 3);
    print "$x $y $z\n";                         # 1 2 3

    ($x, $y, $z) = ('al', 'be', 'ga', 'de');
    print "$x $y $z\n";                         # al be ga

    ($x, $y, $z) = (101, 102);
    print "$x $y $z\n";                         # 101 102
    # Use of uninitialized value $z in concatenation (.)
    # or string at [program] line [line number].

If the number of scalars in the left-hand list is less than that in the
right-hand list, the "extra" scalars in the right-hand list will simply not be
assigned.

If the number of scalars in the left-hand list is greater than that in the
left-hand list, the "missing" scalars will become undefined.

    ($x, $y, $z) = (101, 102);
    for my $el ($x, $y, $z) {
        (defined $el) ? print "$el " : print "<undef>";
    }
    print "\n";
                                                # 101 102 <undef>

List assignment in scalar context returns the number of elements
produced by the expression on the right side of the assignment:

    $x = (($foo,$bar) = (3,2,1));       # set $x to 3, not 2
    $x = (($foo,$bar) = f());           # set $x to f()'s return count

This is handy when you want to do a list assignment in a Boolean
context, because most list functions return a null list when finished,
which when assigned produces a 0, which is interpreted as FALSE.

It's also the source of a useful idiom for executing a function or
performing an operation in list context and then counting the number of
return values, by assigning to an empty list and then using that
assignment in scalar context.  For example, this code:

    $count = () = $string =~ /\d+/g;

will place into $count the number of digit groups found in $string.
This happens because the pattern match is in list context (since it
is being assigned to the empty list), and will therefore return a list
of all matching parts of the string.  The list assignment in scalar
context will translate that into the number of elements (here, the
number of times the pattern matched) and assign that to $count.  Note
that simply using

    $count = $string =~ /\d+/g;

would not have worked, since a pattern match in scalar context will
only return true or false, rather than a count of matches.

The final element of a list assignment may be an array or a hash:

    ($x, $y, @rest) = split;
    my($x, $y, %rest) = @_;

You can actually put an array or hash anywhere in the list, but the first one
in the list will soak up all the values, and anything after it will become
undefined.  This may be useful in a my() or local().

A hash can be initialized using a literal list holding pairs of
items to be interpreted as a key and a value:

    # same as map assignment above
    %map = ('red',0x00f,'blue',0x0f0,'green',0xf00);

While literal lists and named arrays are often interchangeable, that's
not the case for hashes.  Just because you can subscript a list value like
a normal array does not mean that you can subscript a list value as a
hash.  Likewise, hashes included as parts of other lists (including
parameters lists and return lists from functions) always flatten out into
key/value pairs.  That's why it's good to use references sometimes.

It is often more readable to use the C<< => >> operator between key/value
pairs.  The C<< => >> operator is mostly just a more visually distinctive
synonym for a comma, but it also arranges for its left-hand operand to be
interpreted as a string if it's a bareword that would be a legal simple
identifier.  C<< => >> doesn't quote compound identifiers, that contain
double colons.  This makes it nice for initializing hashes:

    %map = (
                 red   => 0x00f,
                 blue  => 0x0f0,
                 green => 0xf00,
   );

or for initializing hash references to be used as records:

    $rec = {
                witch => 'Mable the Merciless',
                cat   => 'Fluffy the Ferocious',
                date  => '10/31/1776',
    };

or for using call-by-named-parameter to complicated functions:

   $field = $query->radio_group(
               name      => 'group_name',
               values    => ['eenie','meenie','minie'],
               default   => 'meenie',
               linebreak => 'true',
               labels    => \%labels
   );

Note that just because a hash is initialized in that order doesn't
mean that it comes out in that order.  See L<perlfunc/sort> for examples
of how to arrange for an output ordering.

If a key appears more than once in the initializer list of a hash, the last
occurrence wins:

    %circle = (
                  center => [5, 10],
                  center => [27, 9],
                  radius => 100,
                  color => [0xDF, 0xFF, 0x00],
                  radius => 54,
    );

    # same as
    %circle = (
                  center => [27, 9],
                  color => [0xDF, 0xFF, 0x00],
                  radius => 54,
    );

This can be used to provide overridable configuration defaults:

    # values in %args take priority over %config_defaults
    %config = (%config_defaults, %args);

=head2 Subscripts

An array can be accessed one scalar at a
time by specifying a dollar sign (C<$>), then the
name of the array (without the leading C<@>), then the subscript inside
square brackets.  For example:

    @myarray = (5, 50, 500, 5000);
    print "The Third Element is", $myarray[2], "\n";

The array indices start with 0.  A negative subscript retrieves its 
value from the end.  In our example, C<$myarray[-1]> would have been 
5000, and C<$myarray[-2]> would have been 500.

Hash subscripts are similar, only instead of square brackets curly brackets
are used.  For example:

    %scientists = 
    (
        "Newton" => "Isaac",
        "Einstein" => "Albert",
        "Darwin" => "Charles",
        "Feynman" => "Richard",
    );

    print "Darwin's First Name is ", $scientists{"Darwin"}, "\n";

You can also subscript a list to get a single element from it:

    $dir = (getpwnam("daemon"))[7];

=head2 Multi-dimensional array emulation

Multidimensional arrays may be emulated by subscripting a hash with a
list.  The elements of the list are joined with the subscript separator
(see L<perlvar/$;>).

    $foo{$x,$y,$z}

is equivalent to

    $foo{join($;, $x, $y, $z)}

The default subscript separator is "\034", the same as SUBSEP in B<awk>.

=head2 Slices
X<slice> X<array, slice> X<hash, slice>

A slice accesses several elements of a list, an array, or a hash
simultaneously using a list of subscripts.  It's more convenient
than writing out the individual elements as a list of separate
scalar values.

    ($him, $her)   = @folks[0,-1];              # array slice
    @them          = @folks[0 .. 3];            # array slice
    ($who, $home)  = @ENV{"USER", "HOME"};      # hash slice
    ($uid, $dir)   = (getpwnam("daemon"))[2,7]; # list slice

Since you can assign to a list of variables, you can also assign to
an array or hash slice.

    @days[3..5]    = qw/Wed Thu Fri/;
    @colors{'red','blue','green'} 
                   = (0xff0000, 0x0000ff, 0x00ff00);
    @folks[0, -1]  = @folks[-1, 0];

The previous assignments are exactly equivalent to

    ($days[3], $days[4], $days[5]) = qw/Wed Thu Fri/;
    ($colors{'red'}, $colors{'blue'}, $colors{'green'})
                   = (0xff0000, 0x0000ff, 0x00ff00);
    ($folks[0], $folks[-1]) = ($folks[-1], $folks[0]);

Since changing a slice changes the original array or hash that it's
slicing, a C<foreach> construct will alter some--or even all--of the
values of the array or hash.

    foreach (@array[ 4 .. 10 ]) { s/peter/paul/ } 

    foreach (@hash{qw[key1 key2]}) {
        s/^\s+//;                       # trim leading whitespace
        s/\s+$//;                       # trim trailing whitespace
        s/\b(\w)(\w*)\b/\u$1\L$2/g;     # "titlecase" words
    }

As a special exception, when you slice a list (but not an array or a hash),
if the list evaluates to empty, then taking a slice of that empty list will
always yield the empty list in turn.  Thus:

    @a = ()[0,1];          # @a has no elements
    @b = (@a)[0,1];        # @b has no elements
    @c = (sub{}->())[0,1]; # @c has no elements
    @d = ('a','b')[0,1];   # @d has two elements
    @e = (@d)[0,1,8,9];    # @e has four elements
    @f = (@d)[8,9];        # @f has two elements

This makes it easy to write loops that terminate when a null list
is returned:

    while ( ($home, $user) = (getpwent)[7,0] ) {
        printf "%-8s %s\n", $user, $home;
    }

As noted earlier in this document, the scalar sense of list assignment
is the number of elements on the right-hand side of the assignment.
The null list contains no elements, so when the password file is
exhausted, the result is 0, not 2.

Slices in scalar context return the last item of the slice.

    @a = qw/first second third/;
    %h = (first => 'A', second => 'B');
    $t = @a[0, 1];                  # $t is now 'second'
    $u = @h{'first', 'second'};     # $u is now 'B'

If you're confused about why you use an '@' there on a hash slice
instead of a '%', think of it like this.  The type of bracket (square
or curly) governs whether it's an array or a hash being looked at.
On the other hand, the leading symbol ('$' or '@') on the array or
hash indicates whether you are getting back a singular value (a
scalar) or a plural one (a list).

=head3 Key/Value Hash Slices

Starting in Perl 5.20, a hash slice operation
with the % symbol is a variant of slice operation
returning a list of key/value pairs rather than just values:

    %h = (blonk => 2, foo => 3, squink => 5, bar => 8);
    %subset = %h{'foo', 'bar'}; # key/value hash slice
    # %subset is now (foo => 3, bar => 8)
    %removed = delete %h{'foo', 'bar'};
    # %removed is now (foo => 3, bar => 8)
    # %h is now (blonk => 2, squink => 5)

However, the result of such a slice cannot be localized or assigned to.
These are otherwise very much consistent with hash slices
using the @ symbol.

=head3 Index/Value Array Slices

Similar to key/value hash slices (and also introduced
in Perl 5.20), the % array slice syntax returns a list
of index/value pairs:

    @a = "a".."z";
    @list = %a[3,4,6];
    # @list is now (3, "d", 4, "e", 6, "g")
    @removed = delete %a[3,4,6]
    # @removed is now (3, "d", 4, "e", 6, "g")
    # @list[3,4,6] are now undef

Note that calling L<C<delete>|perlfunc/delete EXPR> on array values is
strongly discouraged.

=head2 Typeglobs and Filehandles
X<typeglob> X<filehandle> X<*>

Perl uses an internal type called a I<typeglob> to hold an entire
symbol table entry.  The type prefix of a typeglob is a C<*>, because
it represents all types.  This used to be the preferred way to
pass arrays and hashes by reference into a function, but now that
we have real references, this is seldom needed.  

The main use of typeglobs in modern Perl is create symbol table aliases.
This assignment:

    *this = *that;

makes $this an alias for $that, @this an alias for @that, %this an alias
for %that, &this an alias for &that, etc.  Much safer is to use a reference.
This:

    local *Here::blue = \$There::green;

temporarily makes $Here::blue an alias for $There::green, but doesn't
make @Here::blue an alias for @There::green, or %Here::blue an alias for
%There::green, etc.  See L<perlmod/"Symbol Tables"> for more examples
of this.  Strange though this may seem, this is the basis for the whole
module import/export system.

Another use for typeglobs is to pass filehandles into a function or
to create new filehandles.  If you need to use a typeglob to save away
a filehandle, do it this way:

    $fh = *STDOUT;

or perhaps as a real reference, like this:

    $fh = \*STDOUT;

See L<perlsub> for examples of using these as indirect filehandles
in functions.

Typeglobs are also a way to create a local filehandle using the local()
operator.  These last until their block is exited, but may be passed back.
For example:

    sub newopen {
        my $path = shift;
        local  *FH;  # not my!
        open   (FH, $path)          or  return undef;
        return *FH;
    }
    $fh = newopen('/etc/passwd');

Now that we have the C<*foo{THING}> notation, typeglobs aren't used as much
for filehandle manipulations, although they're still needed to pass brand
new file and directory handles into or out of functions.  That's because
C<*HANDLE{IO}> only works if HANDLE has already been used as a handle.
In other words, C<*FH> must be used to create new symbol table entries;
C<*foo{THING}> cannot.  When in doubt, use C<*FH>.

All functions that are capable of creating filehandles (open(),
opendir(), pipe(), socketpair(), sysopen(), socket(), and accept())
automatically create an anonymous filehandle if the handle passed to
them is an uninitialized scalar variable.  This allows the constructs
such as C<open(my $fh, ...)> and C<open(local $fh,...)> to be used to
create filehandles that will conveniently be closed automatically when
the scope ends, provided there are no other references to them.  This
largely eliminates the need for typeglobs when opening filehandles
that must be passed around, as in the following example:

    sub myopen {
        open my $fh, "@_"
             or die "Can't open '@_': $!";
        return $fh;
    }

    {
        my $f = myopen("</etc/motd");
        print <$f>;
        # $f implicitly closed here
    }

Note that if an initialized scalar variable is used instead the
result is different: C<my $fh='zzz'; open($fh, ...)> is equivalent
to C<open( *{'zzz'}, ...)>.
C<use strict 'refs'> forbids such practice.

Another way to create anonymous filehandles is with the Symbol
module or with the IO::Handle module and its ilk.  These modules
have the advantage of not hiding different types of the same name
during the local().  See the bottom of L<perlfunc/open> for an
example.

=head1 SEE ALSO

See L<perlvar> for a description of Perl's built-in variables and
a discussion of legal variable names.  See L<perlref>, L<perlsub>,
and L<perlmod/"Symbol Tables"> for more discussion on typeglobs and
the C<*foo{THING}> syntax.
                                                                                              usr/local/lib/perl5/5.40.0/pod/perldbmfilter.pod                                                    0000644 0000000 0000000 00000011515 14714567415 017632  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

perldbmfilter - Perl DBM Filters

=head1 SYNOPSIS

    $db = tie %hash, 'DBM', ...

    $old_filter = $db->filter_store_key  ( sub { ... } );
    $old_filter = $db->filter_store_value( sub { ... } );
    $old_filter = $db->filter_fetch_key  ( sub { ... } );
    $old_filter = $db->filter_fetch_value( sub { ... } );

=head1 DESCRIPTION

The four C<filter_*> methods shown above are available in all the DBM
modules that ship with Perl, namely DB_File, GDBM_File, NDBM_File,
ODBM_File and SDBM_File.

Each of the methods works identically, and is used to install (or
uninstall) a single DBM Filter. The only difference between them is the
place that the filter is installed.

To summarise:

=over 5

=item B<filter_store_key>

If a filter has been installed with this method, it will be invoked
every time you write a key to a DBM database.

=item B<filter_store_value>

If a filter has been installed with this method, it will be invoked
every time you write a value to a DBM database.

=item B<filter_fetch_key>

If a filter has been installed with this method, it will be invoked
every time you read a key from a DBM database.

=item B<filter_fetch_value>

If a filter has been installed with this method, it will be invoked
every time you read a value from a DBM database.

=back

You can use any combination of the methods from none to all four.

All filter methods return the existing filter, if present, or C<undef>
if not.

To delete a filter pass C<undef> to it.

=head2 The Filter

When each filter is called by Perl, a local copy of C<$_> will contain
the key or value to be filtered. Filtering is achieved by modifying
the contents of C<$_>. The return code from the filter is ignored.

=head2 An Example: the NULL termination problem

DBM Filters are useful for a class of problems where you I<always>
want to make the same transformation to all keys, all values or both.

For example, consider the following scenario. You have a DBM database
that you need to share with a third-party C application. The C application
assumes that I<all> keys and values are NULL terminated. Unfortunately
when Perl writes to DBM databases it doesn't use NULL termination, so
your Perl application will have to manage NULL termination itself. When
you write to the database you will have to use something like this:

    $hash{"$key\0"} = "$value\0";

Similarly the NULL needs to be taken into account when you are considering
the length of existing keys/values.

It would be much better if you could ignore the NULL terminations issue
in the main application code and have a mechanism that automatically
added the terminating NULL to all keys and values whenever you write to
the database and have them removed when you read from the database. As I'm
sure you have already guessed, this is a problem that DBM Filters can
fix very easily.

    use v5.36;
    use SDBM_File;
    use Fcntl;

    my %hash;
    my $filename = "filt";
    unlink $filename;

    my $db = tie(%hash, 'SDBM_File', $filename, O_RDWR|O_CREAT, 0640)
      or die "Cannot open $filename: $!\n";

    # Install DBM Filters
    $db->filter_fetch_key  ( sub { s/\0$//    } );
    $db->filter_store_key  ( sub { $_ .= "\0" } );
    $db->filter_fetch_value( 
        sub { no warnings 'uninitialized'; s/\0$// } );
    $db->filter_store_value( sub { $_ .= "\0" } );

    $hash{"abc"} = "def";
    my $x = $hash{"ABC"};
    # ...
    undef $db;
    untie %hash;

The code above uses SDBM_File, but it will work with any of the DBM
modules.

Hopefully the contents of each of the filters should be
self-explanatory. Both "fetch" filters remove the terminating NULL,
and both "store" filters add a terminating NULL.


=head2 Another Example: Key is a C int

Here is another real-life example. By default, whenever Perl writes to
a DBM database it always writes the key and value as strings. So when
you use this:

    $hash{12345} = "something";

the key 12345 will get stored in the DBM database as the 5 byte string
"12345". If you actually want the key to be stored in the DBM database
as a C int, you will have to use C<pack> when writing, and C<unpack>
when reading.

Here is a DBM Filter that does it:

    use v5.36;
    use DB_File;
    my %hash;
    my $filename = "filt";
    unlink $filename;


    my $db = tie %hash, 'DB_File', $filename, O_CREAT|O_RDWR, 0666,
        $DB_HASH or die "Cannot open $filename: $!\n";

    $db->filter_fetch_key  ( sub { $_ = unpack("i", $_) } );
    $db->filter_store_key  ( sub { $_ = pack ("i", $_) } );
    $hash{123} = "def";
    # ...
    undef $db;
    untie %hash;

The code above uses DB_File, but again it will work with any of the
DBM modules.

This time only two filters have been used; we only need to manipulate
the contents of the key, so it wasn't necessary to install any value
filters.

=head1 SEE ALSO

L<DB_File>, L<GDBM_File>, L<NDBM_File>, L<ODBM_File> and L<SDBM_File>.

=head1 AUTHOR

Paul Marquess

                                                                                                                                                                                   usr/local/lib/perl5/5.40.0/pod/perldebguts.pod                                                      0000644 0000000 0000000 00000124134 14714567415 017321  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

perldebguts - Guts of Perl debugging 

=head1 DESCRIPTION

This is not L<perldebug>, which tells you how to use
the debugger.  This manpage describes low-level details concerning
the debugger's internals, which range from difficult to impossible
to understand for anyone who isn't incredibly intimate with Perl's guts.
Caveat lector.

=head1 Debugger Internals

Perl has special debugging hooks at compile-time and run-time used
to create debugging environments.  These hooks are not to be confused
with the I<perl -Dxxx> command described in L<perlrun|perlrun/-Dletters>,
which is usable only if a special Perl is built per the instructions in
the F<INSTALL> file in the Perl source tree.

For example, whenever you call Perl's built-in C<caller> function
from the package C<DB>, the arguments that the corresponding stack
frame was called with are copied to the C<@DB::args> array.  These
mechanisms are enabled by calling Perl with the B<-d> switch.
Specifically, the following additional features are enabled
(cf. L<perlvar/$^P>):

=over 4

=item *

Perl inserts the contents of C<$ENV{PERL5DB}> (or C<BEGIN {require
'perl5db.pl'}> if not present) before the first line of your program.

=item *

Each array C<@{"_<$filename"}> holds the lines of $filename for a
file compiled by Perl.  The same is also true for C<eval>ed strings
that contain subroutines, or which are currently being executed.
The $filename for C<eval>ed strings looks like C<(eval 34)>.

Values in this array are magical in numeric context: they compare
equal to zero only if the line is not breakable.

=item *

Each hash C<%{"_<$filename"}> contains breakpoints and actions keyed
by line number.  Individual entries (as opposed to the whole hash)
are settable.  Perl only cares about Boolean true here, although
the values used by F<perl5db.pl> have the form
C<"$break_condition\0$action">.  

The same holds for evaluated strings that contain subroutines, or
which are currently being executed.  The $filename for C<eval>ed strings
looks like C<(eval 34)>.

=item *

Each scalar C<${"_<$filename"}> contains C<$filename>.  This is
also the case for evaluated strings that contain subroutines, or
which are currently being executed.  The C<$filename> for C<eval>ed
strings looks like C<(eval 34)>.

=item *

After each C<require>d file is compiled, but before it is executed,
C<DB::postponed(*{"_<$filename"})> is called if the subroutine
C<DB::postponed> exists.  Here, the $filename is the expanded name of
the C<require>d file, as found in the values of %INC.

=item *

After each subroutine C<subname> is compiled, the existence of
C<$DB::postponed{subname}> is checked.  If this key exists,
C<DB::postponed(subname)> is called if the C<DB::postponed> subroutine
also exists.

=item *

A hash C<%DB::sub> is maintained, whose keys are subroutine names
and whose values have the form C<filename:startline-endline>.
C<filename> has the form C<(eval 34)> for subroutines defined inside
C<eval>s.

=item *

When the execution of your program reaches a point that can hold a
breakpoint, the C<DB::DB()> subroutine is called if any of the variables
C<$DB::trace>, C<$DB::single>, or C<$DB::signal> is true.  These variables
are not C<local>izable.  This feature is disabled when executing
inside C<DB::DB()>, including functions called from it 
unless C<< $^D & (1<<30) >> is true.

=item *

When execution of the program reaches a subroutine call, a call to
C<&DB::sub>(I<args>) is made instead, with C<$DB::sub> set to identify
the called subroutine.  (This doesn't happen if the calling subroutine
was compiled in the C<DB> package.)  C<$DB::sub> normally holds the name
of the called subroutine, if it has a name by which it can be looked up.
Failing that, C<$DB::sub> will hold a reference to the called subroutine.
Either way, the C<&DB::sub> subroutine can use C<$DB::sub> as a reference
by which to call the called subroutine, which it will normally want to do.

X<&DB::lsub>If the call is to an lvalue subroutine, and C<&DB::lsub>
is defined C<&DB::lsub>(I<args>) is called instead, otherwise falling
back to C<&DB::sub>(I<args>).

=item *

When execution of the program uses C<goto> to enter a non-XS subroutine
and the 0x80 bit is set in C<$^P>, a call to C<&DB::goto> is made, with
C<$DB::sub> set to identify the subroutine being entered.  The call to
C<&DB::goto> does not replace the C<goto>; the requested subroutine will
still be entered once C<&DB::goto> has returned.  C<$DB::sub> normally
holds the name of the subroutine being entered, if it has one.  Failing
that, C<$DB::sub> will hold a reference to the subroutine being entered.
Unlike when C<&DB::sub> is called, it is not guaranteed that C<$DB::sub>
can be used as a reference to operate on the subroutine being entered.

=back

Note that if C<&DB::sub> needs external data for it to work, no
subroutine call is possible without it. As an example, the standard
debugger's C<&DB::sub> depends on the C<$DB::deep> variable
(it defines how many levels of recursion deep into the debugger you can go
before a mandatory break).  If C<$DB::deep> is not defined, subroutine
calls are not possible, even though C<&DB::sub> exists.

=head2 Writing Your Own Debugger

=head3 Environment Variables

The C<PERL5DB> environment variable can be used to define a debugger.
For example, the minimal "working" debugger (it actually doesn't do anything)
consists of one line:

  sub DB::DB {}

It can easily be defined like this:

  $ PERL5DB="sub DB::DB {}" perl -d your-script

Another brief debugger, slightly more useful, can be created
with only the line:

  sub DB::DB {print ++$i; scalar <STDIN>}

This debugger prints a number which increments for each statement
encountered and waits for you to hit a newline before continuing
to the next statement.

The following debugger is actually useful:

  {
    package DB;
    sub DB  {}
    sub sub {print ++$i, " $sub\n"; &$sub}
  }

It prints the sequence number of each subroutine call and the name of the
called subroutine.  Note that C<&DB::sub> is being compiled into the
package C<DB> through the use of the C<package> directive.

When it starts, the debugger reads your rc file (F<./.perldb> or
F<~/.perldb> under Unix), which can set important options.
(A subroutine (C<&afterinit>) can be defined here as well; it is executed
after the debugger completes its own initialization.)

After the rc file is read, the debugger reads the PERLDB_OPTS
environment variable and uses it to set debugger options. The
contents of this variable are treated as if they were the argument
of an C<o ...> debugger command (q.v. in L<perldebug/"Configurable Options">).

=head3 Debugger Internal Variables

In addition to the file and subroutine-related variables mentioned above,
the debugger also maintains various magical internal variables.

=over 4

=item *

C<@DB::dbline> is an alias for C<@{"::_<current_file"}>, which
holds the lines of the currently-selected file (compiled by Perl), either
explicitly chosen with the debugger's C<f> command, or implicitly by flow
of execution.

Values in this array are magical in numeric context: they compare
equal to zero only if the line is not breakable.

=item *

C<%DB::dbline> is an alias for C<%{"::_<current_file"}>, which
contains breakpoints and actions keyed by line number in
the currently-selected file, either explicitly chosen with the
debugger's C<f> command, or implicitly by flow of execution.

As previously noted, individual entries (as opposed to the whole hash)
are settable.  Perl only cares about Boolean true here, although
the values used by F<perl5db.pl> have the form
C<"$break_condition\0$action">.

=back

=head3 Debugger Customization Functions

Some functions are provided to simplify customization.

=over 4

=item *

See L<perldebug/"Configurable Options"> for a description of options parsed by
C<DB::parse_options(string)>.

=item *

C<DB::dump_trace(skip[,count])> skips the specified number of frames
and returns a list containing information about the calling frames (all
of them, if C<count> is missing).  Each entry is reference to a hash
with keys C<context> (either C<.>, C<$>, or C<@>), C<sub> (subroutine
name, or info about C<eval>), C<args> (C<undef> or a reference to
an array), C<file>, and C<line>.

=item *

C<DB::print_trace(FH, skip[, count[, short]])> prints
formatted info about caller frames.  The last two functions may be
convenient as arguments to C<< < >>, C<< << >> commands.

=back

Note that any variables and functions that are not documented in
this manpages (or in L<perldebug>) are considered for internal   
use only, and as such are subject to change without notice.

=head1 Frame Listing Output Examples

The C<frame> option can be used to control the output of frame 
information.  For example, contrast this expression trace:

 $ perl -de 42
 Stack dump during die enabled outside of evals.

 Loading DB routines from perl5db.pl patch level 0.94
 Emacs support available.

 Enter h or 'h h' for help.

 main::(-e:1):   0
   DB<1> sub foo { 14 }

   DB<2> sub bar { 3 }

   DB<3> t print foo() * bar()
 main::((eval 172):3):   print foo() + bar();
 main::foo((eval 168):2):
 main::bar((eval 170):2):
 42

with this one, once the C<o>ption C<frame=2> has been set:

   DB<4> o f=2
                frame = '2'
   DB<5> t print foo() * bar()
 3:      foo() * bar()
 entering main::foo
  2:     sub foo { 14 };
 exited main::foo
 entering main::bar
  2:     sub bar { 3 };
 exited main::bar
 42

By way of demonstration, we present below a laborious listing
resulting from setting your C<PERLDB_OPTS> environment variable to
the value C<f=n N>, and running I<perl -d -V> from the command line.
Examples using various values of C<n> are shown to give you a feel
for the difference between settings.  Long though it may be, this
is not a complete listing, but only excerpts.

=over 4

=item 1

 entering main::BEGIN
  entering Config::BEGIN
   Package lib/Exporter.pm.
   Package lib/Carp.pm.
  Package lib/Config.pm.
  entering Config::TIEHASH
  entering Exporter::import
   entering Exporter::export
 entering Config::myconfig
  entering Config::FETCH
  entering Config::FETCH
  entering Config::FETCH
  entering Config::FETCH

=item 2

 entering main::BEGIN
  entering Config::BEGIN
   Package lib/Exporter.pm.
   Package lib/Carp.pm.
  exited Config::BEGIN
  Package lib/Config.pm.
  entering Config::TIEHASH
  exited Config::TIEHASH
  entering Exporter::import
   entering Exporter::export
   exited Exporter::export
  exited Exporter::import
 exited main::BEGIN
 entering Config::myconfig
  entering Config::FETCH
  exited Config::FETCH
  entering Config::FETCH
  exited Config::FETCH
  entering Config::FETCH

=item 3

 in  $=main::BEGIN() from /dev/null:0
  in  $=Config::BEGIN() from lib/Config.pm:2
   Package lib/Exporter.pm.
   Package lib/Carp.pm.
  Package lib/Config.pm.
  in  $=Config::TIEHASH('Config') from lib/Config.pm:644
  in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from li
 in  @=Config::myconfig() from /dev/null:0
  in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'PERL_SUBVERSION') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'osname') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'osvers') from lib/Config.pm:574

=item 4

 in  $=main::BEGIN() from /dev/null:0
  in  $=Config::BEGIN() from lib/Config.pm:2
   Package lib/Exporter.pm.
   Package lib/Carp.pm.
  out $=Config::BEGIN() from lib/Config.pm:0
  Package lib/Config.pm.
  in  $=Config::TIEHASH('Config') from lib/Config.pm:644
  out $=Config::TIEHASH('Config') from lib/Config.pm:644
  in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
   out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
  out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
 out $=main::BEGIN() from /dev/null:0
 in  @=Config::myconfig() from /dev/null:0
  in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
  out $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
  out $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
  out $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'PERL_SUBVERSION') from lib/Config.pm:574

=item 5

 in  $=main::BEGIN() from /dev/null:0
  in  $=Config::BEGIN() from lib/Config.pm:2
   Package lib/Exporter.pm.
   Package lib/Carp.pm.
  out $=Config::BEGIN() from lib/Config.pm:0
  Package lib/Config.pm.
  in  $=Config::TIEHASH('Config') from lib/Config.pm:644
  out $=Config::TIEHASH('Config') from lib/Config.pm:644
  in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
   out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
  out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
 out $=main::BEGIN() from /dev/null:0
 in  @=Config::myconfig() from /dev/null:0
  in  $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
  out $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
  in  $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574
  out $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574

=item 6

 in  $=CODE(0x15eca4)() from /dev/null:0
  in  $=CODE(0x182528)() from lib/Config.pm:2
   Package lib/Exporter.pm.
  out $=CODE(0x182528)() from lib/Config.pm:0
  scalar context return from CODE(0x182528): undef
  Package lib/Config.pm.
  in  $=Config::TIEHASH('Config') from lib/Config.pm:628
  out $=Config::TIEHASH('Config') from lib/Config.pm:628
  scalar context return from Config::TIEHASH:   empty hash
  in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
   out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
   scalar context return from Exporter::export: ''
  out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
  scalar context return from Exporter::import: ''

=back

In all cases shown above, the line indentation shows the call tree.
If bit 2 of C<frame> is set, a line is printed on exit from a
subroutine as well.  If bit 4 is set, the arguments are printed
along with the caller info.  If bit 8 is set, the arguments are
printed even if they are tied or references.  If bit 16 is set, the
return value is printed, too.

When a package is compiled, a line like this

    Package lib/Carp.pm.

is printed with proper indentation.

=head1 Debugging Regular Expressions

There are two ways to enable debugging output for regular expressions.

If your perl is compiled with C<-DDEBUGGING>, you may use the
B<-Dr> flag on the command line, and C<-Drv> for more verbose
information.

Otherwise, one can C<use re 'debug'>, which has effects at both
compile time and run time.  Since Perl 5.9.5, this pragma is lexically
scoped.

