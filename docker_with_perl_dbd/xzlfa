C<Perl_langinfo8> has an extra parameter, described above.  Besides this, the
other reason they aren't quite a drop-in replacement is actually an advantage.
The C<const>ness of the return allows the compiler to catch attempts to write
into the returned buffer, which is illegal and could cause run-time crashes.

=item b.

They deliver the correct results for the C<RADIXCHAR> and C<THOUSEP> items,
without you having to write extra code.  The reason for the extra code would be
because these are from the C<LC_NUMERIC> locale category, which is normally
kept set by Perl so that the radix is a dot, and the separator is the empty
string, no matter what the underlying locale is supposed to be, and so to get
the expected results, you have to temporarily toggle into the underlying
locale, and later toggle back.  (You could use plain C<nl_langinfo> and
C<L</STORE_LC_NUMERIC_FORCE_TO_UNDERLYING>> for this but then you wouldn't get
the other advantages of C<Perl_langinfo()>; not keeping C<LC_NUMERIC> in the C
(or equivalent) locale would break a lot of CPAN, which is expecting the radix
(decimal point) character to be a dot.)

=item c.

The system function they replace can have its static return buffer trashed,
not only by a subsequent call to that function, but by a C<freelocale>,
C<setlocale>, or other locale change.  The returned buffer of these functions
is not changed until the next call to one or the other, so the buffer is never
in a trashed state.

=item d.

The return buffer is per-thread, so it also is never overwritten by a call to
these functions from another thread;  unlike the function it replaces.

=item e.

But most importantly, they work on systems that don't have C<nl_langinfo>, such
as Windows, hence making your code more portable.  Of the fifty-some possible
items specified by the POSIX 2008 standard,
L<https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/langinfo.h.html>,
only one is completely unimplemented, though on non-Windows platforms, another
significant one is not fully implemented).  They use various techniques to
recover the other items, including calling C<L<localeconv(3)>>, and
C<L<strftime(3)>>, both of which are specified in C89, so should be always be
available.  Later C<strftime()> versions have additional capabilities.
If an item is not available on your system, this returns either the value
associated with the C locale, or simply C<"">, whichever is more appropriate.

It is important to note that, when called with an item that is recovered by
using C<localeconv>, the buffer from any previous explicit call to
C<L<localeconv(3)>> will be overwritten.  But you shouldn't be using
C<localeconv> anyway because it is is very much not thread-safe, and suffers
from the same problems outlined in item 'b.' above for the fields it returns
that are controlled by the LC_NUMERIC locale category.  Instead, avoid all of
those problems by calling L</Perl_localeconv>, which is thread-safe; or by
using the methods given in L<perlcall>  to call
L<C<POSIX::localeconv()>|POSIX/localeconv>, which is also thread-safe.

=back

The details for those items which may deviate from what this emulation returns
and what a native C<nl_langinfo()> would return are specified in
L<I18N::Langinfo>.

=over 3

 const char *  Perl_langinfo (const nl_item item)
 const char *  Perl_langinfo8(const nl_item item,
                              utf8ness_t *utf8ness)

=back

=back

=for hackers
Found in file locale.c

=over 4

=item C<PERL_LC_ALL_CATEGORY_POSITIONS_INIT>
X<PERL_LC_ALL_CATEGORY_POSITIONS_INIT>

This symbol, when defined, gives the C initializer for an array whose
element [0] is the first category in the string returned by
C<setlocale(LC_ALL, NULL)> when not all categories are the same, on
systems that use a positional notation.  After element [0] is
C<LC_ALL_SEPARATOR>, then the category given by element [1] and so on.

=back

=for hackers
Found in file config.h

=over 4

=item C<PERL_LC_ALL_SEPARATOR>
X<PERL_LC_ALL_SEPARATOR>

This symbol, if defined, gives the string returned by
C<setlocale(LC_ALL, NULL)> to separate categories that are in different
locales on systems that use a positional notation as opposed to
'name=value' pairs.  An example on some platforms could be the '/' in
"C/C<de_DE>/C/C<en_UK>/C/C"

=back

=for hackers
Found in file config.h

=over 4

=item C<PERL_LC_ALL_USES_NAME_VALUE_PAIRS>
X<PERL_LC_ALL_USES_NAME_VALUE_PAIRS>

This symbol, if defined, indicates to the C program that the string
returned by C<setlocale(LC_ALL, NULL)> uses 'name=value;' pairs to
indicate what each category's locale is when they aren't all set to the
same locale.  For example, "C<LC_NUMERIC>=C;C<LC_CTYPE>=C<de_DE>;..."
When not defined, the system uses positional notation.

=back

=for hackers
Found in file config.h

=over 4

=item C<Perl_localeconv>
X<Perl_localeconv>

This is a thread-safe version of the libc L<localeconv(3)>.  It is the same as
L<POSIX::localeconv|POSIX/localeconv> (returning a hash of the C<localeconv()>
fields), but directly callable from XS code.  The hash is mortalized, so must
be dealt with immediately.

=over 3

 HV *  Perl_localeconv(pTHX)

=back

=back

=for hackers
Found in file locale.c

=over 4

=item C<Perl_setlocale>
X<Perl_setlocale>

This is an (almost) drop-in replacement for the system L<C<setlocale(3)>>,
taking the same parameters, and returning the same information, except that it
returns the correct underlying C<LC_NUMERIC> locale.  Regular C<setlocale> will
instead return C<C> if the underlying locale has a non-dot decimal point
character, or a non-empty thousands separator for displaying floating point
numbers.  This is because perl keeps that locale category such that it has a
dot and empty separator, changing the locale briefly during the operations
where the underlying one is required. C<Perl_setlocale> knows about this, and
compensates; regular C<setlocale> doesn't.

Another reason it isn't completely a drop-in replacement is that it is
declared to return S<C<const char *>>, whereas the system setlocale omits the
C<const> (presumably because its API was specified long ago, and can't be
updated; it is illegal to change the information C<setlocale> returns; doing
so leads to segfaults.)

Finally, C<Perl_setlocale> works under all circumstances, whereas plain
C<setlocale> can be completely ineffective on some platforms under some
configurations.

Changing the locale is not a good idea when more than one thread is running,
except on systems where the predefined variable C<${^SAFE_LOCALES}> is
non-zero.  This is because on such systems the locale is global to the whole
process and not local to just the thread calling the function.  So changing it
in one thread instantaneously changes it in all.  On some such systems, the
system C<setlocale()> is ineffective, returning the wrong information, and
failing to actually change the locale.  z/OS refuses to try to change the
locale once a second thread is created.  C<Perl_setlocale>, should give you
accurate results of what actually happened on these problematic platforms,
returning NULL if the system forbade the locale change.

The return points to a per-thread static buffer, which is overwritten the next
time C<Perl_setlocale> is called from the same thread.

=over 3

 const char *  Perl_setlocale(const int category,
                              const char *locale)

=back

=back

=for hackers
Found in file locale.c

=over 4

=item C<RESTORE_LC_NUMERIC>
X<RESTORE_LC_NUMERIC>

This is used in conjunction with one of the macros
L</STORE_LC_NUMERIC_SET_TO_NEEDED>
and L</STORE_LC_NUMERIC_FORCE_TO_UNDERLYING> to properly restore the
C<LC_NUMERIC> state.

A call to L</DECLARATION_FOR_LC_NUMERIC_MANIPULATION> must have been made to
declare at compile time a private variable used by this macro and the two
C<STORE> ones.  This macro should be called as a single statement, not an
expression, but with an empty argument list, like this:

 {
    DECLARATION_FOR_LC_NUMERIC_MANIPULATION;
     ...
    RESTORE_LC_NUMERIC();
     ...
 }

=over 3

 void  RESTORE_LC_NUMERIC()

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<SETLOCALE_ACCEPTS_ANY_LOCALE_NAME>
X<SETLOCALE_ACCEPTS_ANY_LOCALE_NAME>

This symbol, if defined, indicates that the setlocale routine is
available and it accepts any input locale name as valid.

=back

=for hackers
Found in file config.h

=over 4

=item C<STORE_LC_NUMERIC_FORCE_TO_UNDERLYING>
X<STORE_LC_NUMERIC_FORCE_TO_UNDERLYING>

This is used by XS code that is C<LC_NUMERIC> locale-aware to force the
locale for category C<LC_NUMERIC> to be what perl thinks is the current
underlying locale.  (The perl interpreter could be wrong about what the
underlying locale actually is if some C or XS code has called the C library
function L<setlocale(3)> behind its back; calling L</sync_locale> before calling
this macro will update perl's records.)

A call to L</DECLARATION_FOR_LC_NUMERIC_MANIPULATION> must have been made to
declare at compile time a private variable used by this macro.  This macro
should be called as a single statement, not an expression, but with an empty
argument list, like this:

 {
    DECLARATION_FOR_LC_NUMERIC_MANIPULATION;
     ...
    STORE_LC_NUMERIC_FORCE_TO_UNDERLYING();
     ...
    RESTORE_LC_NUMERIC();
     ...
 }

The private variable is used to save the current locale state, so
that the requisite matching call to L</RESTORE_LC_NUMERIC> can restore it.

On threaded perls not operating with thread-safe functionality, this macro uses
a mutex to force a critical section.  Therefore the matching RESTORE should be
close by, and guaranteed to be called.

=over 3

 void  STORE_LC_NUMERIC_FORCE_TO_UNDERLYING()

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<STORE_LC_NUMERIC_SET_TO_NEEDED>
X<STORE_LC_NUMERIC_SET_TO_NEEDED>

This is used to help wrap XS or C code that is C<LC_NUMERIC> locale-aware.
This locale category is generally kept set to a locale where the decimal radix
character is a dot, and the separator between groups of digits is empty.  This
is because most XS code that reads floating point numbers is expecting them to
have this syntax.

This macro makes sure the current C<LC_NUMERIC> state is set properly, to be
aware of locale if the call to the XS or C code from the Perl program is
from within the scope of a S<C<use locale>>; or to ignore locale if the call is
instead from outside such scope.

This macro is the start of wrapping the C or XS code; the wrap ending is done
by calling the L</RESTORE_LC_NUMERIC> macro after the operation.  Otherwise
the state can be changed that will adversely affect other XS code.

A call to L</DECLARATION_FOR_LC_NUMERIC_MANIPULATION> must have been made to
declare at compile time a private variable used by this macro.  This macro
should be called as a single statement, not an expression, but with an empty
argument list, like this:

 {
    DECLARATION_FOR_LC_NUMERIC_MANIPULATION;
     ...
    STORE_LC_NUMERIC_SET_TO_NEEDED();
     ...
    RESTORE_LC_NUMERIC();
     ...
 }

On threaded perls not operating with thread-safe functionality, this macro uses
a mutex to force a critical section.  Therefore the matching RESTORE should be
close by, and guaranteed to be called; see L</WITH_LC_NUMERIC_SET_TO_NEEDED>
for a more contained way to ensure that.

=over 3

 void  STORE_LC_NUMERIC_SET_TO_NEEDED()

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<STORE_LC_NUMERIC_SET_TO_NEEDED_IN>
X<STORE_LC_NUMERIC_SET_TO_NEEDED_IN>

Same as L</STORE_LC_NUMERIC_SET_TO_NEEDED> with in_lc_numeric provided
as the precalculated value of C<IN_LC(LC_NUMERIC)>. It is the caller's
responsibility to ensure that the status of C<PL_compiling> and C<PL_hints>
cannot have changed since the precalculation.

=over 3

 void  STORE_LC_NUMERIC_SET_TO_NEEDED_IN(bool in_lc_numeric)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<sv_langinfo>
X<sv_langinfo>

This is the preferred interface for accessing the data that L<nl_langinfo(3)>
provides (or Perl's emulation of it on platforms lacking it), returning an SV.
Unlike, the earlier-defined interfaces to this (L</Perl_langinfo> and
L</Perl_langinfo8>), which return strings, the UTF8ness of the result is
automatically handled for you.  And like them, it is thread-safe and
automatically handles getting the proper values for the C<RADIXCHAR> and
C<THOUSEP> items (that calling the plain libc C<nl_langinfo()> could give the
wrong results for).  Like them, this also doesn't play well with the libc
C<localeconv()>; use L<C<POSIX::localeconv()>|POSIX/localeconv> instead.

There are a few deviations from what a native C<nl_langinfo()> would return and
what this returns on platforms that don't implement that function.  These are
detailed in L<I18N::Langinfo>.

=over 3

 SV *  sv_langinfo(const nl_item item)

=back

=back

=for hackers
Found in file locale.c

=over 4

=item C<switch_to_global_locale>
X<switch_to_global_locale>

This function copies the locale state of the calling thread into the program's
global locale, and converts the thread to use that global locale.

It is intended so that Perl can safely be used with C libraries that access the
global locale and which can't be converted to not access it.  Effectively, this
means libraries that call C<L<setlocale(3)>> on non-Windows systems.  (For
portability, it is a good idea to use it on Windows as well.)

A downside of using it is that it disables the services that Perl provides to
hide locale gotchas from your code.  The service you most likely will miss
regards the radix character (decimal point) in floating point numbers.  Code
executed after this function is called can no longer just assume that this
character is correct for the current circumstances.

To return to Perl control, and restart the gotcha prevention services, call
C<L</sync_locale>>.  Behavior is undefined for any pure Perl code that executes
while the switch is in effect.

The global locale and the per-thread locales are independent.  As long as just
one thread converts to the global locale, everything works smoothly.  But if
more than one does, they can easily interfere with each other, and races are
likely.  On Windows systems prior to Visual Studio 15 (at which point Microsoft
fixed a bug), races can occur (even if only one thread has been converted to
the global locale), but only if you use the following operations:

=over

=item L<POSIX::localeconv|POSIX/localeconv>

=item L<I18N::Langinfo>, items C<CRNCYSTR> and C<THOUSEP>

=item L<perlapi/sv_langinfo>, items C<CRNCYSTR> and C<THOUSEP>

=back

The first item is not fixable (except by upgrading to a later Visual Studio
release), but it would be possible to work around the latter two items by
having Perl change its algorithm for calculating these to use Windows API
functions (likely C<GetNumberFormat> and C<GetCurrencyFormat>); patches
welcome.

XS code should never call plain C<setlocale>, but should instead be converted
to either call L<C<Perl_setlocale>|perlapi/Perl_setlocale> (which is a drop-in
for the system C<setlocale>) or use the methods given in L<perlcall> to call
L<C<POSIX::setlocale>|POSIX/setlocale>.  Either one will transparently properly
handle all cases of single- vs multi-thread, POSIX 2008-supported or not.

=over 3

 void  switch_to_global_locale()

=back

=back

=for hackers
Found in file locale.c

=over 4

=item C<sync_locale>
X<sync_locale>

This function copies the state of the program global locale into the calling
thread, and converts that thread to using per-thread locales, if it wasn't
already, and the platform supports them.  The LC_NUMERIC locale is toggled into
the standard state (using the C locale's conventions), if not within the
lexical scope of S<C<use locale>>.

Perl will now consider itself to have control of the locale.

Since unthreaded perls have only a global locale, this function is a no-op
without threads.

This function is intended for use with C libraries that do locale manipulation.
It allows Perl to accommodate the use of them.  Call this function before
transferring back to Perl space so that it knows what state the C code has left
things in.

XS code should not manipulate the locale on its own.  Instead,
L<C<Perl_setlocale>|perlapi/Perl_setlocale> can be used at any time to query or
change the locale (though changing the locale is antisocial and dangerous on
multi-threaded systems that don't have multi-thread safe locale operations.
(See L<perllocale/Multi-threaded operation>).

Using the libc L<C<setlocale(3)>> function should be avoided.  Nevertheless,
certain non-Perl libraries called from XS, do call it, and their behavior may
not be able to be changed.  This function, along with
C<L</switch_to_global_locale>>, can be used to get seamless behavior in these
circumstances, as long as only one thread is involved.

If the library has an option to turn off its locale manipulation, doing that is
preferable to using this mechanism.  C<Gtk> is such a library.

The return value is a boolean: TRUE if the global locale at the time of call
was in effect for the caller; and FALSE if a per-thread locale was in effect.

=over 3

 bool  sync_locale()

=back

=back

=for hackers
Found in file locale.c

=over 4

=item C<WITH_LC_NUMERIC_SET_TO_NEEDED>
X<WITH_LC_NUMERIC_SET_TO_NEEDED>

This macro invokes the supplied statement or block within the context
of a L</STORE_LC_NUMERIC_SET_TO_NEEDED> .. L</RESTORE_LC_NUMERIC> pair
if required, so eg:

  WITH_LC_NUMERIC_SET_TO_NEEDED(
    SNPRINTF_G(fv, ebuf, sizeof(ebuf), precis)
  );

is equivalent to:

  {
#ifdef USE_LOCALE_NUMERIC
    DECLARATION_FOR_LC_NUMERIC_MANIPULATION;
    STORE_LC_NUMERIC_SET_TO_NEEDED();
#endif
    SNPRINTF_G(fv, ebuf, sizeof(ebuf), precis);
#ifdef USE_LOCALE_NUMERIC
    RESTORE_LC_NUMERIC();
#endif
  }

=over 3

 void  WITH_LC_NUMERIC_SET_TO_NEEDED(block)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<WITH_LC_NUMERIC_SET_TO_NEEDED_IN>
X<WITH_LC_NUMERIC_SET_TO_NEEDED_IN>

Same as L</WITH_LC_NUMERIC_SET_TO_NEEDED> with in_lc_numeric provided
as the precalculated value of C<IN_LC(LC_NUMERIC)>. It is the caller's
responsibility to ensure that the status of C<PL_compiling> and C<PL_hints>
cannot have changed since the precalculation.

=over 3

 void  WITH_LC_NUMERIC_SET_TO_NEEDED_IN(bool in_lc_numeric, block)

=back

=back

=for hackers
Found in file perl.h

=head1 Magic
X<MAGIC>


"Magic" is special data attached to SV structures in order to give them
"magical" properties.  When any Perl code tries to read from, or assign to,
an SV marked as magical, it calls the 'get' or 'set' function associated
with that SV's magic.  A get is called prior to reading an SV, in order to
give it a chance to update its internal value (get on $. writes the line
number of the last read filehandle into the SV's IV slot), while
set is called after an SV has been written to, in order to allow it to make
use of its changed value (set on $/ copies the SV's new value to the
PL_rs global variable).

Magic is implemented as a linked list of MAGIC structures attached to the
SV.  Each MAGIC struct holds the type of the magic, a pointer to an array
of functions that implement the get(), set(), length() etc functions,
plus space for some flags and pointers.  For example, a tied variable has
a MAGIC structure that contains a pointer to the object associated with the
tie.


=over 4

=item C<mg_clear>
X<mg_clear>

Clear something magical that the SV represents.  See C<L</sv_magic>>.

=over 3

 int  mg_clear(SV *sv)

=back

=back

=for hackers
Found in file mg.c

=over 4

=item C<mg_copy>
X<mg_copy>

Copies the magic from one SV to another.  See C<L</sv_magic>>.

=over 3

 int  mg_copy(SV *sv, SV *nsv, const char *key, I32 klen)

=back

=back

=for hackers
Found in file mg.c

=over 4

=item C<MGf_COPY>

=item C<MGf_DUP>

=item C<MGf_LOCAL>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<mg_find>
X<mg_find>

Finds the magic pointer for C<type> matching the SV.  See C<L</sv_magic>>.

=over 3

 MAGIC *  mg_find(const SV *sv, int type)

=back

=back

=for hackers
Found in file mg.c

=over 4

=item C<mg_findext>
X<mg_findext>

Finds the magic pointer of C<type> with the given C<vtbl> for the C<SV>.  See
C<L</sv_magicext>>.

=over 3

 MAGIC *  mg_findext(const SV *sv, int type, const MGVTBL *vtbl)

=back

=back

=for hackers
Found in file mg.c

=over 4

=item C<mg_free>
X<mg_free>

Free any magic storage used by the SV.  See C<L</sv_magic>>.

=over 3

 int  mg_free(SV *sv)

=back

=back

=for hackers
Found in file mg.c

=over 4

=item C<mg_freeext>
X<mg_freeext>

Remove any magic of type C<how> using virtual table C<vtbl> from the
SV C<sv>.  See L</sv_magic>.

C<mg_freeext(sv, how, NULL)> is equivalent to C<mg_free_type(sv, how)>.

=over 3

 void  mg_freeext(SV *sv, int how, const MGVTBL *vtbl)

=back

=back

=for hackers
Found in file mg.c

=over 4

=item C<mg_free_type>
X<mg_free_type>

Remove any magic of type C<how> from the SV C<sv>.  See L</sv_magic>.

=over 3

 void  mg_free_type(SV *sv, int how)

=back

=back

=for hackers
Found in file mg.c

=over 4

=item C<mg_get>
X<mg_get>

Do magic before a value is retrieved from the SV.  The type of SV must
be >= C<SVt_PVMG>.  See C<L</sv_magic>>.

=over 3

 int  mg_get(SV *sv)

=back

=back

=for hackers
Found in file mg.c

=over 4

=item C<mg_magical>
X<mg_magical>

Turns on the magical status of an SV.  See C<L</sv_magic>>.

=over 3

 void  mg_magical(SV *sv)

=back

=back

=for hackers
Found in file mg.c

=over 4

=item C<mg_set>
X<mg_set>

Do magic after a value is assigned to the SV.  See C<L</sv_magic>>.

=over 3

 int  mg_set(SV *sv)

=back

=back

=for hackers
Found in file mg.c

=over 4

=item C<MGVTBL>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PERL_MAGIC_arylen>

=item C<PERL_MAGIC_arylen_p>

=item C<PERL_MAGIC_backref>

=item C<PERL_MAGIC_bm>

=item C<PERL_MAGIC_checkcall>

=item C<PERL_MAGIC_collxfrm>

=item C<PERL_MAGIC_dbfile>

=item C<PERL_MAGIC_dbline>

=item C<PERL_MAGIC_debugvar>

=item C<PERL_MAGIC_defelem>

=item C<PERL_MAGIC_destruct>

=item C<PERL_MAGIC_env>

=item C<PERL_MAGIC_envelem>

=item C<PERL_MAGIC_ext>

=item C<PERL_MAGIC_extvalue>

=item C<PERL_MAGIC_fm>

=item C<PERL_MAGIC_hints>

=item C<PERL_MAGIC_hintselem>

=item C<PERL_MAGIC_hook>

=item C<PERL_MAGIC_hookelem>

=item C<PERL_MAGIC_isa>

=item C<PERL_MAGIC_isaelem>

=item C<PERL_MAGIC_lvref>

=item C<PERL_MAGIC_nkeys>

=item C<PERL_MAGIC_nonelem>

=item C<PERL_MAGIC_overload_table>

=item C<PERL_MAGIC_pos>

=item C<PERL_MAGIC_qr>

=item C<PERL_MAGIC_regdata>

=item C<PERL_MAGIC_regdatum>

=item C<PERL_MAGIC_regex_global>

=item C<PERL_MAGIC_rhash>

=item C<PERL_MAGIC_shared>

=item C<PERL_MAGIC_shared_scalar>

=item C<PERL_MAGIC_sig>

=item C<PERL_MAGIC_sigelem>

=item C<PERL_MAGIC_substr>

=item C<PERL_MAGIC_sv>

=item C<PERL_MAGIC_symtab>

=item C<PERL_MAGIC_taint>

=item C<PERL_MAGIC_tied>

=item C<PERL_MAGIC_tiedelem>

=item C<PERL_MAGIC_tiedscalar>

=item C<PERL_MAGIC_utf8>

=item C<PERL_MAGIC_uvar>

=item C<PERL_MAGIC_uvar_elem>

=item C<PERL_MAGIC_vec>

=item C<PERL_MAGIC_vstring>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SvTIED_obj>

Described in L<perlinterp>.

=over 3

   SvTIED_obj(SV *sv, MAGIC *mg)

=back

=back

=for hackers
Found in file pod/perlinterp.pod

=head1 Memory Management

=over 4

=item C<dump_mstats>
X<dump_mstats>

When enabled by compiling with C<-DDEBUGGING_MSTATS>, print out statistics
about malloc as two lines of numbers, one showing the length of the free list
for each size category, the second showing the number of S<mallocs - frees> for
each size category.

C<s>, if not NULL, is used as a phrase to include in the output, such as
S<"after compilation">.

=over 3

 void  dump_mstats(const char *s)

=back

=back

=for hackers
Found in file malloc.c

=over 4

=item C<HASATTRIBUTE_MALLOC>
X<HASATTRIBUTE_MALLOC>

Can we handle C<GCC> attribute for malloc-style functions.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_MALLOC_GOOD_SIZE>
X<HAS_MALLOC_GOOD_SIZE>

This symbol, if defined, indicates that the C<malloc_good_size>
routine is available for use.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_MALLOC_SIZE>
X<HAS_MALLOC_SIZE>

This symbol, if defined, indicates that the C<malloc_size>
routine is available for use.

=back

=for hackers
Found in file config.h

=over 4

=item C<I_MALLOCMALLOC>
X<I_MALLOCMALLOC>

This symbol, if defined, indicates to the C program that it should
include F<malloc/malloc.h>.

=over 3

 #ifdef I_MALLOCMALLOC
     #include <mallocmalloc.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

