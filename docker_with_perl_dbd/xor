which Mercurial is running. Options in these files apply to all
Mercurial commands executed by any user in any directory. Registry
keys contain PATH-like strings, every part of which must reference
a ``Mercurial.ini`` file or be a directory where ``*.rc`` files will
be read.  Mercurial checks each of these locations in the specified
order until one or more configuration files are detected.

Per-system configuration files are for the system on which Mercurial
is running. Options in these files apply to all Mercurial commands
executed by any user in any directory. Options in these files
override per-installation options.

Mercurial comes with some default configuration. The default configuration
files are installed with Mercurial and will be overwritten on upgrades. Default
configuration files should never be edited by users or administrators but can
be overridden in other configuration files. So far the directory only contains
merge tool configuration but packagers can also put other default configuration
there.

On versions 5.7 and later, if share-safe functionality is enabled,
shares will read config file of share source too.
`<share-source/.hg/hgrc>` is read before reading `<repo/.hg/hgrc>`.

For configs which should not be shared, `<repo/.hg/hgrc-not-shared>`
should be used.

Syntax
======

A configuration file consists of sections, led by a ``[section]`` header
and followed by ``name = value`` entries (sometimes called
``configuration keys``)::

    [spam]
    eggs=ham
    green=
       eggs

Each line contains one entry. If the lines that follow are indented,
they are treated as continuations of that entry. Leading whitespace is
removed from values. Empty lines are skipped. Lines beginning with
``#`` or ``;`` are ignored and may be used to provide comments.

Configuration keys can be set multiple times, in which case Mercurial
will use the value that was configured last. As an example::

    [spam]
    eggs=large
    ham=serrano
    eggs=small

This would set the configuration key named ``eggs`` to ``small``.

It is also possible to define a section multiple times. A section can
be redefined on the same and/or on different configuration files. For
example::

    [foo]
    eggs=large
    ham=serrano
    eggs=small

    [bar]
    eggs=ham
    green=
       eggs

    [foo]
    ham=prosciutto
    eggs=medium
    bread=toasted

This would set the ``eggs``, ``ham``, and ``bread`` configuration keys
of the ``foo`` section to ``medium``, ``prosciutto``, and ``toasted``,
respectively. As you can see there only thing that matters is the last
value that was set for each of the configuration keys.

If a configuration key is set multiple times in different
configuration files the final value will depend on the order in which
the different configuration files are read, with settings from earlier
paths overriding later ones as described on the ``Files`` section
above.

A line of the form ``%include file`` will include ``file`` into the
current configuration file. The inclusion is recursive, which means
that included files can include other files. Filenames are relative to
the configuration file in which the ``%include`` directive is found.
Environment variables and ``~user`` constructs are expanded in
``file``. This lets you do something like::

  %include ~/.hgrc.d/$HOST.rc

to include a different configuration file on each computer you use.

A line with ``%unset name`` will remove ``name`` from the current
section, if it has been set previously.

The values are either free-form text strings, lists of text strings,
or Boolean values. Boolean values can be set to true using any of "1",
"yes", "true", or "on" and to false using "0", "no", "false", or "off"
(all case insensitive).

List values are separated by whitespace or comma, except when values are
placed in double quotation marks::

  allow_read = "John Doe, PhD", brian, betty

Quotation marks can be escaped by prefixing them with a backslash. Only
quotation marks at the beginning of a word is counted as a quotation
(e.g., ``foo"bar baz`` is the list of ``foo"bar`` and ``baz``).

Sections
========

This section describes the different sections that may appear in a
Mercurial configuration file, the purpose of each section, its possible
keys, and their possible values.

``alias``
---------

Defines command aliases.

Aliases allow you to define your own commands in terms of other
commands (or aliases), optionally including arguments. Positional
arguments in the form of ``$1``, ``$2``, etc. in the alias definition
are expanded by Mercurial before execution. Positional arguments not
already used by ``$N`` in the definition are put at the end of the
command to be executed.

Alias definitions consist of lines of the form::

    <alias> = <command> [<argument>]...

For example, this definition::

    latest = log --limit 5

creates a new command ``latest`` that shows only the five most recent
changesets. You can define subsequent aliases using earlier ones::

    stable5 = latest -b stable

.. note::

   It is possible to create aliases with the same names as
   existing commands, which will then override the original
   definitions. This is almost always a bad idea!

An alias can start with an exclamation point (``!``) to make it a
shell alias. A shell alias is executed with the shell and will let you
run arbitrary commands. As an example, ::

   echo = !echo $@

will let you do ``hg echo foo`` to have ``foo`` printed in your
terminal. A better example might be::

   purge = !$HG status --no-status --unknown -0 re: | xargs -0 rm -f

which will make ``hg purge`` delete all unknown files in the
repository in the same manner as the purge extension.

Positional arguments like ``$1``, ``$2``, etc. in the alias definition
expand to the command arguments. Unmatched arguments are
removed. ``$0`` expands to the alias name and ``$@`` expands to all
arguments separated by a space. ``"$@"`` (with quotes) expands to all
arguments quoted individually and separated by a space. These expansions
happen before the command is passed to the shell.

Shell aliases are executed in an environment where ``$HG`` expands to
the path of the Mercurial that was used to execute the alias. This is
useful when you want to call further Mercurial commands in a shell
alias, as was done above for the purge alias. In addition,
``$HG_ARGS`` expands to the arguments given to Mercurial. In the ``hg
echo foo`` call above, ``$HG_ARGS`` would expand to ``echo foo``.

.. note::

   Some global configuration options such as ``-R`` are
   processed before shell aliases and will thus not be passed to
   aliases.


``annotate``
------------

Settings used when displaying file annotations. All values are
Booleans and default to False. See :hg:`help config.diff` for
related options for the diff command.

``ignorews``
    Ignore white space when comparing lines.

``ignorewseol``
    Ignore white space at the end of a line when comparing lines.

``ignorewsamount``
    Ignore changes in the amount of white space.

``ignoreblanklines``
    Ignore changes whose lines are all blank.


``auth``
--------

Authentication credentials and other authentication-like configuration
for HTTP connections. This section allows you to store usernames and
passwords for use when logging *into* HTTP servers. See
:hg:`help config.web` if you want to configure *who* can login to
your HTTP server.

The following options apply to all hosts.

``cookiefile``
    Path to a file containing HTTP cookie lines. Cookies matching a
    host will be sent automatically.

    The file format uses the Mozilla cookies.txt format, which defines cookies
    on their own lines. Each line contains 7 fields delimited by the tab
    character (domain, is_domain_cookie, path, is_secure, expires, name,
    value). For more info, do an Internet search for "Netscape cookies.txt
    format."

    Note: the cookies parser does not handle port numbers on domains. You
    will need to remove ports from the domain for the cookie to be recognized.
    This could result in a cookie being disclosed to an unwanted server.

    The cookies file is read-only.

Other options in this section are grouped by name and have the following
format::

    <name>.<argument> = <value>

where ``<name>`` is used to group arguments into authentication
entries. Example::

    foo.prefix = hg.intevation.de/mercurial
    foo.username = foo
    foo.password = bar
    foo.schemes = http https

    bar.prefix = secure.example.org
    bar.key = path/to/file.key
    bar.cert = path/to/file.cert
    bar.schemes = https

Supported arguments:

``prefix``
    Either ``*`` or a URI prefix with or without the scheme part.
    The authentication entry with the longest matching prefix is used
    (where ``*`` matches everything and counts as a match of length
    1). If the prefix doesn't include a scheme, the match is performed
    against the URI with its scheme stripped as well, and the schemes
    argument, q.v., is then subsequently consulted.

``username``
    Optional. Username to authenticate with. If not given, and the
    remote site requires basic or digest authentication, the user will
    be prompted for it. Environment variables are expanded in the
    username letting you do ``foo.username = $USER``. If the URI
    includes a username, only ``[auth]`` entries with a matching
    username or without a username will be considered.

``password``
    Optional. Password to authenticate with. If not given, and the
    remote site requires basic or digest authentication, the user
    will be prompted for it.

``key``
    Optional. PEM encoded client certificate key file. Environment
    variables are expanded in the filename.

``cert``
    Optional. PEM encoded client certificate chain file. Environment
    variables are expanded in the filename.

``schemes``
    Optional. Space separated list of URI schemes to use this
    authentication entry with. Only used if the prefix doesn't include
    a scheme. Supported schemes are http and https. They will match
    static-http and static-https respectively, as well.
    (default: https)

If no suitable authentication entry is found, the user is prompted
for credentials as usual if required by the remote.

``cmdserver``
-------------

Controls command server settings. (ADVANCED)

``message-encodings``
    List of encodings for the ``m`` (message) channel. The first encoding
    supported by the server will be selected and advertised in the hello
    message. This is useful only when ``ui.message-output`` is set to
    ``channel``. Supported encodings are ``cbor``.

``shutdown-on-interrupt``
    If set to false, the server's main loop will continue running after
    SIGINT received. ``runcommand`` requests can still be interrupted by
    SIGINT. Close the write end of the pipe to shut down the server
    process gracefully.
    (default: True)

``color``
---------

Configure the Mercurial color mode. For details about how to define your custom
effect and style see :hg:`help color`.

``mode``
    String: control the method used to output color. One of ``auto``, ``ansi``,
    ``win32``, ``terminfo`` or ``debug``. In auto mode, Mercurial will
    use ANSI mode by default (or win32 mode prior to Windows 10) if it detects a
    terminal. Any invalid value will disable color.

``pagermode``
    String: optional override of ``color.mode`` used with pager.

    On some systems, terminfo mode may cause problems when using
    color with ``less -R`` as a pager program. less with the -R option
    will only display ECMA-48 color codes, and terminfo mode may sometimes
    emit codes that less doesn't understand. You can work around this by
    either using ansi mode (or auto mode), or by using less -r (which will
    pass through all terminal control codes, not just color control
    codes).

    On some systems (such as MSYS in Windows), the terminal may support
    a different color mode than the pager program.

``commands``
------------

``commit.post-status``
    Show status of files in the working directory after successful commit.
    (default: False)

``merge.require-rev``
    Require that the revision to merge the current commit with be specified on
    the command line. If this is enabled and a revision is not specified, the
    command aborts.
    (default: False)

``push.require-revs``
    Require revisions to push be specified using one or more mechanisms such as
    specifying them positionally on the command line, using ``-r``, ``-b``,
    and/or ``-B`` on the command line, or using ``paths.<path>:pushrev`` in the
    configuration. If this is enabled and revisions are not specified, the
    command aborts.
    (default: False)

``resolve.confirm``
    Confirm before performing action if no filename is passed.
    (default: False)

``resolve.explicit-re-merge``
    Require uses of ``hg resolve`` to specify which action it should perform,
    instead of re-merging files by default.
    (default: False)

``resolve.mark-check``
    Determines what level of checking :hg:`resolve --mark` will perform before
    marking files as resolved. Valid values are ``none`, ``warn``, and
    ``abort``. ``warn`` will output a warning listing the file(s) that still
    have conflict markers in them, but will still mark everything resolved.
    ``abort`` will output the same warning but will not mark things as resolved.
    If --all is passed and this is set to ``abort``, only a warning will be
    shown (an error will not be raised).
    (default: ``none``)

``status.relative``
    Make paths in :hg:`status` output relative to the current directory.
    (default: False)

``status.terse``
    Default value for the --terse flag, which condenses status output.
    (default: empty)

``update.check``
    Determines what level of checking :hg:`update` will perform before moving
    to a destination revision. Valid values are ``abort``, ``none``,
    ``linear``, and ``noconflict``.

    - ``abort`` always fails if the working directory has uncommitted changes.

    - ``none`` performs no checking, and may result in a merge with uncommitted changes.

    - ``linear`` allows any update as long as it follows a straight line in the
      revision history, and may trigger a merge with uncommitted changes.

    - ``noconflict`` will allow any update which would not trigger a merge with
      uncommitted changes, if any are present.

    (default: ``linear``)

``update.requiredest``
    Require that the user pass a destination when running :hg:`update`.
    For example, :hg:`update .::` will be allowed, but a plain :hg:`update`
    will be disallowed.
    (default: False)

``committemplate``
------------------

``changeset``
    String: configuration in this section is used as the template to
    customize the text shown in the editor when committing.

In addition to pre-defined template keywords, commit log specific one
below can be used for customization:

``extramsg``
    String: Extra message (typically 'Leave message empty to abort
    commit.'). This may be changed by some commands or extensions.

For example, the template configuration below shows as same text as
one shown by default::

    [committemplate]
    changeset = {desc}\n\n
        HG: Enter commit message.  Lines beginning with 'HG:' are removed.
        HG: {extramsg}
        HG: --
        HG: user: {author}\n{ifeq(p2rev, "-1", "",
       "HG: branch merge\n")
       }HG: branch '{branch}'\n{if(activebookmark,
       "HG: bookmark '{activebookmark}'\n")   }{subrepos %
       "HG: subrepo {subrepo}\n"              }{file_adds %
       "HG: added {file}\n"                   }{file_mods %
       "HG: changed {file}\n"                 }{file_dels %
       "HG: removed {file}\n"                 }{if(files, "",
       "HG: no files changed\n")}

``diff()``
    String: show the diff (see :hg:`help templates` for detail)

Sometimes it is helpful to show the diff of the changeset in the editor without
having to prefix 'HG: ' to each line so that highlighting works correctly. For
this, Mercurial provides a special string which will ignore everything below
it::

     HG: ------------------------ >8 ------------------------

For example, the template configuration below will show the diff below the
extra message::

    [committemplate]
    changeset = {desc}\n\n
        HG: Enter commit message.  Lines beginning with 'HG:' are removed.
        HG: {extramsg}
        HG: ------------------------ >8 ------------------------
        HG: Do not touch the line above.
        HG: Everything below will be removed.
        {diff()}

.. note::

   For some problematic encodings (see :hg:`help win32mbcs` for
   detail), this customization should be configured carefully, to
   avoid showing broken characters.

   For example, if a multibyte character ending with backslash (0x5c) is
   followed by the ASCII character 'n' in the customized template,
   the sequence of backslash and 'n' is treated as line-feed unexpectedly
   (and the multibyte character is broken, too).

Customized template is used for commands below (``--edit`` may be
required):

- :hg:`backout`
- :hg:`commit`
- :hg:`fetch` (for merge commit only)
- :hg:`graft`
- :hg:`histedit`
- :hg:`import`
- :hg:`qfold`, :hg:`qnew` and :hg:`qrefresh`
- :hg:`rebase`
- :hg:`shelve`
- :hg:`sign`
- :hg:`tag`
- :hg:`transplant`

Configuring items below instead of ``changeset`` allows showing
customized message only for specific actions, or showing different
messages for each action.

- ``changeset.backout`` for :hg:`backout`
- ``changeset.commit.amend.merge`` for :hg:`commit --amend` on merges
- ``changeset.commit.amend.normal`` for :hg:`commit --amend` on other
- ``changeset.commit.normal.merge`` for :hg:`commit` on merges
- ``changeset.commit.normal.normal`` for :hg:`commit` on other
- ``changeset.fetch`` for :hg:`fetch` (impling merge commit)
- ``changeset.gpg.sign`` for :hg:`sign`
- ``changeset.graft`` for :hg:`graft`
- ``changeset.histedit.edit`` for ``edit`` of :hg:`histedit`
- ``changeset.histedit.fold`` for ``fold`` of :hg:`histedit`
- ``changeset.histedit.mess`` for ``mess`` of :hg:`histedit`
- ``changeset.histedit.pick`` for ``pick`` of :hg:`histedit`
- ``changeset.import.bypass`` for :hg:`import --bypass`
- ``changeset.import.normal.merge`` for :hg:`import` on merges
- ``changeset.import.normal.normal`` for :hg:`import` on other
- ``changeset.mq.qnew`` for :hg:`qnew`
- ``changeset.mq.qfold`` for :hg:`qfold`
- ``changeset.mq.qrefresh`` for :hg:`qrefresh`
- ``changeset.rebase.collapse`` for :hg:`rebase --collapse`
- ``changeset.rebase.merge`` for :hg:`rebase` on merges
- ``changeset.rebase.normal`` for :hg:`rebase` on other
- ``changeset.shelve.shelve`` for :hg:`shelve`
- ``changeset.tag.add`` for :hg:`tag` without ``--remove``
- ``changeset.tag.remove`` for :hg:`tag --remove`
- ``changeset.transplant.merge`` for :hg:`transplant` on merges
- ``changeset.transplant.normal`` for :hg:`transplant` on other

These dot-separated lists of names are treated as hierarchical ones.
For example, ``changeset.tag.remove`` customizes the commit message
only for :hg:`tag --remove`, but ``changeset.tag`` customizes the
commit message for :hg:`tag` regardless of ``--remove`` option.

When the external editor is invoked for a commit, the corresponding
dot-separated list of names without the ``changeset.`` prefix
(e.g. ``commit.normal.normal``) is in the ``HGEDITFORM`` environment
variable.

In this section, items other than ``changeset`` can be referred from
others. For example, the configuration to list committed files up
below can be referred as ``{listupfiles}``::

    [committemplate]
    listupfiles = {file_adds %
       "HG: added {file}\n"     }{file_mods %
       "HG: changed {file}\n"   }{file_dels %
       "HG: removed {file}\n"   }{if(files, "",
       "HG: no files changed\n")}

``decode/encode``
-----------------

Filters for transforming files on checkout/checkin. This would
typically be used for newline processing or other
localization/canonicalization of files.

Filters consist of a filter pattern followed by a filter command.
Filter patterns are globs by default, rooted at the repository root.
For example, to match any file ending in ``.txt`` in the root
directory only, use the pattern ``*.txt``. To match any file ending
in ``.c`` anywhere in the repository, use the pattern ``**.c``.
For each file only the first matching filter applies.

The filter command can start with a specifier, either ``pipe:`` or
``tempfile:``. If no specifier is given, ``pipe:`` is used by default.

A ``pipe:`` command must accept data on stdin and return the transformed
data on stdout.

Pipe example::

  [encode]
  # uncompress gzip files on checkin to improve delta compression
  # note: not necessarily a good idea, just an example
  *.gz = pipe: gunzip

  [decode]
  # recompress gzip files when writing them to the working dir (we
  # can safely omit "pipe:", because it's the default)
  *.gz = gzip

A ``tempfile:`` command is a template. The string ``INFILE`` is replaced
with the name of a temporary file that contains the data to be
filtered by the command. The string ``OUTFILE`` is replaced with the name
of an empty temporary file, where the filtered data must be written by
the command.

.. container:: windows

   .. note::

     The tempfile mechanism is recommended for Windows systems,
     where the standard shell I/O redirection operators often have
     strange effects and may corrupt the contents of your files.

This filter mechanism is used internally by the ``eol`` extension to
translate line ending characters between Windows (CRLF) and Unix (LF)
format. We suggest you use the ``eol`` extension for convenience.


``defaults``
------------

(defaults are deprecated. Don't use them. Use aliases instead.)

Use the ``[defaults]`` section to define command defaults, i.e. the
default options/arguments to pass to the specified commands.

The following example makes :hg:`log` run in verbose mode, and
:hg:`status` show only the modified files, by default::

  [defaults]
  log = -v
  status = -m

The actual commands, instead of their aliases, must be used when
defining command defaults. The command defaults will also be applied
to the aliases of the commands defined.


``diff``
--------

Settings used when displaying diffs. Everything except for ``unified``
is a Boolean and defaults to False. See :hg:`help config.annotate`
for related options for the annotate command.

``git``
    Use git extended diff format.

``nobinary``
    Omit git binary patches.

``nodates``
    Don't include dates in diff headers.

``noprefix``
    Omit 'a/' and 'b/' prefixes from filenames. Ignored in plain mode.

``showfunc``
    Show which function each change is in.

``ignorews``
    Ignore white space when comparing lines.

``ignorewsamount``
    Ignore changes in the amount of white space.

``ignoreblanklines``
    Ignore changes whose lines are all blank.

``unified``
    Number of lines of context to show.

``word-diff``
    Highlight changed words.

``email``
---------

Settings for extensions that send email messages.

``from``
    Optional. Email address to use in "From" header and SMTP envelope
    of outgoing messages.

``to``
    Optional. Comma-separated list of recipients' email addresses.

``cc``
    Optional. Comma-separated list of carbon copy recipients'
    email addresses.

``bcc``
    Optional. Comma-separated list of blind carbon copy recipients'
    email addresses.

``method``
    Optional. Method to use to send email messages. If value is ``smtp``
    (default), use SMTP (see the ``[smtp]`` section for configuration).
    Otherwise, use as name of program to run that acts like sendmail
    (takes ``-f`` option for sender, list of recipients on command line,
    message on stdin). Normally, setting this to ``sendmail`` or
    ``/usr/sbin/sendmail`` is enough to use sendmail to send messages.

``charsets``
    Optional. Comma-separated list of character sets considered
    convenient for recipients. Addresses, headers, and parts not
    containing patches of outgoing messages will be encoded in the
    first character set to which conversion from local encoding
    (``$HGENCODING``, ``ui.fallbackencoding``) succeeds. If correct
    conversion fails, the text in question is sent as is.
    (default: '')

    Order of outgoing email character sets:

    1. ``us-ascii``: always first, regardless of settings
    2. ``email.charsets``: in order given by user
    3. ``ui.fallbackencoding``: if not in email.charsets
    4. ``$HGENCODING``: if not in email.charsets
    5. ``utf-8``: always last, regardless of settings

Email example::

  [email]
  from = Joseph User <joe.user@example.com>
  method = /usr/sbin/sendmail
  # charsets for western Europeans
  # us-ascii, utf-8 omitted, as they are tried first and last
  charsets = iso-8859-1, iso-8859-15, windows-1252


``extensions``
--------------

Mercurial has an extension mechanism for adding new features. To
enable an extension, create an entry for it in this section.

If you know that the extension is already in Python's search path,
you can give the name of the module, followed by ``=``, with nothing
after the ``=``.

Otherwise, give a name that you choose, followed by ``=``, followed by
the path to the ``.py`` file (including the file name extension) that
defines the extension.

To explicitly disable an extension that is enabled in an hgrc of
broader scope, prepend its path with ``!``, as in ``foo = !/ext/path``
or ``foo = !`` when path is not supplied.

Example for ``~/.hgrc``::

  [extensions]
  # (the churn extension will get loaded from Mercurial's path)
  churn =
  # (this extension will get loaded from the file specified)
  myfeature = ~/.hgext/myfeature.py

If an extension fails to load, a warning will be issued, and Mercurial will
proceed. To enforce that an extension must be loaded, one can set the `required`
suboption in the config::

  [extensions]
  myfeature = ~/.hgext/myfeature.py
  myfeature:required = yes

To debug extension loading issue, one can add `--traceback` to their mercurial
invocation.

A default setting can we set using the special `*` extension key::

  [extensions]
  *:required = yes
  myfeature = ~/.hgext/myfeature.py
  rebase=


``format``
----------

Configuration that controls the repository format. Newer format options are more
powerful, but incompatible with some older versions of Mercurial. Format options
are considered at repository initialization only. You need to make a new clone
for config changes to be taken into account.

For more details about repository format and version compatibility, see
https://www.mercurial-scm.org/wiki/MissingRequirement

``usegeneraldelta``
    Enable or disable the "generaldelta" repository format which improves
    repository compression by allowing "revlog" to store deltas against
    arbitrary revisions instead of the previously stored one. This provides
    significant improvement for repositories with branches.

    Repositories with this on-disk format require Mercurial version 1.9.

    Enabled by default.

``dotencode``
    Enable or disable the "dotencode" repository format which enhances
    the "fncache" repository format (which has to be enabled to use
    dotencode) to avoid issues with filenames starting with "._" on
    Mac OS X and spaces on Windows.

    Repositories with this on-disk format require Mercurial version 1.7.

    Enabled by default.

``usefncache``
    Enable or disable the "fncache" repository format which enhances
    the "store" repository format (which has to be enabled to use
    fncache) to allow longer filenames and avoids using Windows
    reserved names, e.g. "nul".

    Repositories with this on-disk format require Mercurial version 1.1.

    Enabled by default.

``use-dirstate-v2``
    Enable or disable the experimental "dirstate-v2" feature. The dirstate
    functionality is shared by all commands interacting with the working copy.
    The new version is more robust, faster and stores more information.

    The performance-improving version of this feature is currently only
    implemented in Rust (see :hg:`help rust`), so people not using a version of
    Mercurial compiled with the Rust parts might actually suffer some slowdown.
    For this reason, such versions will by default refuse to access repositories
    with "dirstate-v2" enabled.

    This behavior can be adjusted via configuration: check
    :hg:`help config.storage.dirstate-v2.slow-path` for details.

    Repositories with this on-disk format require Mercurial 6.0 or above.

    By default this format variant is disabled if the fast implementation is not
    available, and enabled by default if the fast implementation is available.

    To accomodate installations of Mercurial without the fast implementation,
    you can downgrade your repository. To do so run the following command:

    $ hg debugupgraderepo \
          --run \
          --config format.use-dirstate-v2=False \
          --config storage.dirstate-v2.slow-path=allow

    For a more comprehensive guide, see :hg:`help internals.dirstate-v2`.

``use-dirstate-v2.automatic-upgrade-of-mismatching-repositories``
   When enabled, an automatic upgrade will be triggered when a repository format
   does not match its `use-dirstate-v2` config.

   This is an advanced behavior that most users will not need. We recommend you
   don't use this unless you are a seasoned administrator of a Mercurial install
   base.

   Automatic upgrade means that any process accessing the repository will
   upgrade the repository format to use `dirstate-v2`. This only triggers if a
   change is needed. This also applies to operations that would have been
   read-only (like hg status).

   If the repository cannot be locked, the automatic-upgrade operation will be
   skipped. The next operation will attempt it again.

   This configuration will apply for moves in any direction, either adding the
   `dirstate-v2` format if `format.use-dirstate-v2=yes` or removing the
   `dirstate-v2` requirement if `format.use-dirstate-v2=no`. So we recommend
   setting both this value and `format.use-dirstate-v2` at the same time.

``use-dirstate-v2.automatic-upgrade-of-mismatching-repositories:quiet``
    Hide message when performing such automatic upgrade.

``use-dirstate-tracked-hint``
    Enable or disable the writing of "tracked key" file alongside the dirstate.
    (default to disabled)

    That "tracked-hint" can help external automations to detect changes to the
    set of tracked files. (i.e the result of `hg files` or `hg status -macd`)

    The tracked-hint is written in a new `.hg/dirstate-tracked-hint`. That file
    contains two lines:
    - the first line is the file version (currently: 1),
    - the second line contains the "tracked-hint".
    That file is written right after the dirstate is written.

    The tracked-hint changes whenever the set of file tracked in the dirstate
    changes. The general idea is:
    - if the hint is identical, the set of tracked file SHOULD be identical,
    - if the hint is different, the set of tracked file MIGHT be different.

    The "hint is identical" case uses `SHOULD` as the dirstate and the hint file
    are two distinct files and therefore that cannot be read or written to in an
    atomic way. If the key is identical, nothing garantees that the dirstate is
    not updated right after the hint file. This is considered a negligible
    limitation for the intended usecase. It is actually possible to prevent this
    race by taking the repository lock during read operations.

    They are two "ways" to use this feature:

    1) monitoring changes to the `.hg/dirstate-tracked-hint`, if the file
    changes, the tracked set might have changed.

    2) storing the value and comparing it to a later value.


``use-dirstate-tracked-hint.automatic-upgrade-of-mismatching-repositories``
   When enabled, an automatic upgrade will be triggered when a repository format
   does not match its `use-dirstate-tracked-hint` config.

   This is an advanced behavior that most users will not need. We recommend you
   don't use this unless you are a seasoned administrator of a Mercurial install
   base.

   Automatic upgrade means that any process accessing the repository will
   upgrade the repository format to use `dirstate-tracked-hint`. This only
   triggers if a change is needed. This also applies to operations that would
   have been read-only (like hg status).

   If the repository cannot be locked, the automatic-upgrade operation will be
   skipped. The next operation will attempt it again.

   This configuration will apply for moves in any direction, either adding the
   `dirstate-tracked-hint` format if `format.use-dirstate-tracked-hint=yes` or
   removing the `dirstate-tracked-hint` requirement if
   `format.use-dirstate-tracked-hint=no`. So we recommend setting both this
   value and `format.use-dirstate-tracked-hint` at the same time.


``use-dirstate-tracked-hint.automatic-upgrade-of-mismatching-repositories:quiet``
    Hide message when performing such automatic upgrade.


``use-persistent-nodemap``
    Enable or disable the "persistent-nodemap" feature which improves
    performance if the Rust extensions are available.

    The "persistent-nodemap" persist the "node -> rev" on disk removing the
    need to dynamically build that mapping for each Mercurial invocation. This
    significantly reduces the startup cost of various local and server-side
    operation for larger repositories.

    The performance-improving version of this feature is currently only
    implemented in Rust (see :hg:`help rust`), so people not using a version of
    Mercurial compiled with the Rust parts might actually suffer some slowdown.
    For this reason, such versions will by default refuse to access repositories
    with "persistent-nodemap".

    This behavior can be adjusted via configuration: check
    :hg:`help config.storage.revlog.persistent-nodemap.slow-path` for details.

    Repositories with this on-disk format require Mercurial 5.4 or above.

    By default this format variant is disabled if the fast implementation is not
    available, and enabled by default if the fast implementation is available.

    To accomodate installations of Mercurial without the fast implementation,
    you can downgrade your repository. To do so run the following command:

    $ hg debugupgraderepo \
          --run \
          --config format.use-persistent-nodemap=False \
          --config storage.revlog.persistent-nodemap.slow-path=allow

``use-share-safe``
    Enforce "safe" behaviors for all "shares" that access this repository.

    With this feature, "shares" using this repository as a source will:

    * read the source repository's configuration (`<source>/.hg/hgrc`).
    * read and use the source repository's "requirements"
      (except the working copy specific one).

    Without this feature, "shares" using this repository as a source will:

    * keep tracking the repository "requirements" in the share only, ignoring
      the source "requirements", possibly diverging from them.
    * ignore source repository config. This can create problems, like silently
      ignoring important hooks.

    Beware that existing shares will not be upgraded/downgraded, and by
    default, Mercurial will refuse to interact with them until the mismatch
    is resolved. See :hg:`help config.share.safe-mismatch.source-safe` and
    :hg:`help config.share.safe-mismatch.source-not-safe` for details.

    Introduced in Mercurial 5.7.

    Enabled by default in Mercurial 6.1.

``use-share-safe.automatic-upgrade-of-mismatching-repositories``
   When enabled, an automatic upgrade will be triggered when a repository format
   does not match its `use-share-safe` config.

   This is an advanced behavior that most users will not need. We recommend you
   don't use this unless you are a seasoned administrator of a Mercurial install
   base.

   Automatic upgrade means that any process accessing the repository will
   upgrade the repository format to use `share-safe`. This only triggers if a
   change is needed. This also applies to operation that would have been
   read-only (like hg status).

   If the repository cannot be locked, the automatic-upgrade operation will be
   skipped. The next operation will attempt it again.

   This configuration will apply for moves in any direction, either adding the
   `share-safe` format if `format.use-share-safe=yes` or removing the
   `share-safe` requirement if `format.use-share-safe=no`. So we recommend
   setting both this value and `format.use-share-safe` at the same time.

``use-share-safe.automatic-upgrade-of-mismatching-repositories:quiet``
    Hide message when performing such automatic upgrade.

``usestore``
    Enable or disable the "store" repository format which improves
    compatibility with systems that fold case or otherwise mangle
    filenames. Disabling this option will allow you to store longer filenames
    in some situations at the expense of compatibility.

    Repositories with this on-disk format require Mercurial version 0.9.4.

    Enabled by default.

``sparse-revlog``
    Enable or disable the ``sparse-revlog`` delta strategy. This format improves
    delta re-use inside revlog. For very branchy repositories, it results in a
    smaller store. For repositories with many revisions, it also helps
    performance (by using shortened delta chains.)

    Repositories with this on-disk format require Mercurial version 4.7

    Enabled by default.

