=back

=back

=head3 L<perlfunc>

=over 4

=item *

The documentation of C<hex> has been revised to clarify valid inputs.

=item *

Better explain meaning of negative PIDs in C<waitpid>.
L<[GH #15108]|https://github.com/Perl/perl5/issues/15108>

=item *

General cleanup: there's more consistency now (in POD usage, grammar, code
examples), better practices in code examples (use of C<my>, removal of bareword
filehandles, dropped usage of C<&> when calling subroutines, ...), etc.

=back

=head3 L<perlguts>

=over 4

=item *

A new section has been added, L<perlguts/"Dynamic Scope and the Context
Stack">, which explains how the perl context stack works.

=back

=head3 L<perllocale>

=over 4

=item *

A stronger caution about using locales in threaded applications is
given.  Locales are not thread-safe, and you can get wrong results or
even segfaults if you use them there.

=back

=head3 L<perlmodlib>

=over 4

=item *

We now recommend contacting the module-authors list or PAUSE in seeking
guidance on the naming of modules.

=back

=head3 L<perlop>

=over 4

=item *

The documentation of C<qx//> now describes how C<$?> is affected.

=back

=head3 L<perlpolicy>

=over 4

=item *

This note has been added to perlpolicy:

 While civility is required, kindness is encouraged; if you have any
 doubt about whether you are being civil, simply ask yourself, "Am I
 being kind?" and aspire to that.

=back

=head3 L<perlreftut>

=over 4

=item *

Fix some examples to be L<strict> clean.

=back

=head3 L<perlrebackslash>

=over 4

=item *

Clarify that in languages like Japanese and Thai, dictionary lookup
is required to determine word boundaries.

=back

=head3 L<perlsub>

=over 4

=item *

Updated to note that anonymous subroutines can have signatures.

=back

=head3 L<perlsyn>

=over 4

=item *

Fixed a broken example where C<=> was used instead of
C<==> in conditional in do/while example.

=back

=head3 L<perltie>

=over 4

=item *

The usage of C<FIRSTKEY> and C<NEXTKEY> has been clarified.

=back

=head3 L<perlunicode>

=over 4

=item *

Discourage use of 'In' as a prefix signifying the Unicode Block property.

=back

=head3 L<perlvar>

=over 4

=item *

The documentation of C<$@> was reworded to clarify that it is not just for
syntax errors in C<eval>.
L<[GH #14572]|https://github.com/Perl/perl5/issues/14572>

=item *

The specific true value of C<$!{E...}> is now documented, noting that it is
subject to change and not guaranteed.

=item *

Use of C<$OLD_PERL_VERSION> is now discouraged.

=back

=head3 L<perlxs>

=over 4

=item *

The documentation of C<PROTOTYPES> has been corrected; they are I<disabled>
by default, not I<enabled>.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

L<%s must not be a named sequence in transliteration operator|perldiag/"%s must not be a named sequence in transliteration operator">

=item *

L<Can't find Unicode property definition "%s" in regex;|perldiag/"Can't find Unicode property definition "%s" in regex; marked by <-- HERE in m/%s/">

=item *

L<Can't redeclare "%s" in "%s"|perldiag/"Can't redeclare "%s" in "%s"">

=item *

L<Character following \p must be '{' or a single-character Unicode property name in regex;|perldiag/"Character following \%c must be '{' or a single-character Unicode property name in regex; marked by <-- HERE in m/%s/">

=item *

L<Empty \%c in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>
|perldiag/"Empty \%c in regex; marked by <-- HERE in mE<sol>%sE<sol>">

=item *

L<Illegal user-defined property name|perldiag/"Illegal user-defined property name">

=item *

L<Invalid number '%s' for -C option.|perldiag/"Invalid number '%s' for -C option.">

=item *

L<<< Sequence (?... not terminated in regex; marked by S<<-- HERE> in mE<sol>%sE<sol>|perldiag/"Sequence (?... not terminated in regex; marked by <-- HERE in mE<sol>%sE<sol>" >>>

=item *

L<<< Sequence (?PE<lt>... not terminated in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>
|perldiag/"Sequence (?PE<lt>... not terminated in regex; marked by <-- HERE in mE<sol>%sE<sol>" >>>

=item *

L<Sequence (?PE<gt>... not terminated in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>
|perldiag/"Sequence (?PE<gt>... not terminated in regex; marked by <-- HERE in mE<sol>%sE<sol>">

=back

=head3 New Warnings

=over 4

=item *

L<Assuming NOT a POSIX class since %s in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>|
perldiag/Assuming NOT a POSIX class since %s in regex; marked by <-- HERE in mE<sol>%sE<sol>>

=item *

L<%s() is deprecated on :utf8 handles|perldiag/"%s() is deprecated on :utf8 handles">

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

Accessing the C<IO> part of a glob as C<FILEHANDLE> instead of C<IO> is no
longer deprecated.  It is discouraged to encourage uniformity (so that, for
example, one can grep more easily) but it will not be removed.
L<[GH #15105]|https://github.com/Perl/perl5/issues/15105>

=item *

The diagnostic C<< Hexadecimal float: internal error >> has been changed to
C<< Hexadecimal float: internal error (%s) >> to include more information.

=item *

L<Can't modify non-lvalue subroutine call of &%s|perldiag/"Can't modify non-lvalue subroutine call of &%s">

This error now reports the name of the non-lvalue subroutine you attempted to
use as an lvalue.

=item *

When running out of memory during an attempt the increase the stack
size, previously, perl would die using the cryptic message
C<< panic: av_extend_guts() negative count (-9223372036854775681) >>.
This has been fixed to show the prettier message:
L<< Out of memory during stack extend|perldiag/"Out of memory during %s extend" >>

=back

=head1 Configuration and Compilation

=over 4

=item *

C<Configure> now acts as if the C<-O> option is always passed, allowing command
line options to override saved configuration.  This should eliminate confusion
when command line options are ignored for no obvious reason.  C<-O> is now
permitted, but ignored.

=item *

Bison 3.0 is now supported.

=item *

F<Configure> no longer probes for F<libnm> by default.  Originally
this was the "New Math" library, but the name has been re-used by the
GNOME NetworkManager.
L<[GH #15115]|https://github.com/Perl/perl5/issues/15115>

=item *

Added F<Configure> probes for C<newlocale>, C<freelocale>, and C<uselocale>.

=item *

C<< PPPort.so/PPPort.dll >> no longer get installed, as they are
not used by C<< PPPort.pm >>, only by its test files.

=item *

It is now possible to specify which compilation date to show on
C<< perl -V >> output, by setting the macro C<< PERL_BUILD_DATE >>.

=item *

Using the C<NO_HASH_SEED> define in combination with the default hash algorithm
C<PERL_HASH_FUNC_ONE_AT_A_TIME_HARD> resulted in a fatal error while compiling
the interpreter, since Perl 5.17.10.  This has been fixed.

=item *

F<Configure> should handle spaces in paths a little better.

=item *

No longer generate EBCDIC POSIX-BC tables.  We don't believe anyone is
using Perl and POSIX-BC at this time, and by not generating these tables
it saves time during development, and makes the resulting tar ball smaller.

=item *

The GNU Make makefile for Win32 now supports parallel builds.  [perl #126632]

=item *

You can now build perl with MSVC++ on Win32 using GNU Make.  [perl #126632]

=item *

The Win32 miniperl now has a real C<getcwd> which increases build performance
resulting in C<getcwd()> being 605x faster in Win32 miniperl.

=item *

Configure now takes C<-Dusequadmath> into account when calculating the
C<alignbytes> configuration variable.  Previously the mis-calculated
C<alignbytes> could cause alignment errors on debugging builds. [perl
#127894]

=back

=head1 Testing

=over 4

=item *

A new test (F<t/op/aassign.t>) has been added to test the list assignment operator
C<OP_AASSIGN>.

=item *

Parallel building has been added to the dmake C<makefile.mk> makefile. All
Win32 compilers are supported.

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item AmigaOS

=over 4

=item *

The AmigaOS port has been reintegrated into the main tree, based off of
Perl 5.22.1.

=back

=item Cygwin

=over 4

=item *

Tests are more robust against unusual cygdrive prefixes.
L<[GH #15076]|https://github.com/Perl/perl5/issues/15076>

=back

=item EBCDIC

=over 4

=item UTF-EBCDIC extended

UTF-EBCDIC is like UTF-8, but for EBCDIC platforms.  It now has been
extended so that it can represent code points up to 2 ** 64 - 1 on
platforms with 64-bit words.  This brings it into parity with UTF-8.
This enhancement requires an incompatible change to the representation
of code points in the range 2 ** 30 to 2 ** 31 -1 (the latter was the
previous maximum representable code point).  This means that a file that
contains one of these code points, written out with previous versions of
perl cannot be read in, without conversion, by a perl containing this
change.  We do not believe any such files are in existence, but if you
do have one, submit a ticket at L<perlbug@perl.org|mailto:perlbug@perl.org>,
and we will write a conversion script for you.

=item EBCDIC C<cmp()> and C<sort()> fixed for UTF-EBCDIC strings

Comparing two strings that were both encoded in UTF-8 (or more
precisely, UTF-EBCDIC) did not work properly until now.  Since C<sort()>
uses C<cmp()>, this fixes that as well.

=item EBCDIC C<tr///> and C<y///> fixed for C<\N{}>, and C<S<use utf8>> ranges

Perl v5.22 introduced the concept of portable ranges to regular
expression patterns.  A portable range matches the same set of
characters no matter what platform is being run on.  This concept is now
extended to C<tr///>.  See
C<L<trE<sol>E<sol>E<sol>|perlop/trE<sol>SEARCHLISTE<sol>REPLACEMENTLISTE<sol>cdsr>>.

There were also some problems with these operations under S<C<use
utf8>>, which are now fixed

=back

=item FreeBSD

=over 4

=item *

Use the C<fdclose()> function from FreeBSD if it is available.
L<[GH #15082]|https://github.com/Perl/perl5/issues/15082>

=back

=item IRIX

=over 4

=item *

Under some circumstances IRIX stdio C<fgetc()> and C<fread()> set the errno to
C<ENOENT>, which made no sense according to either IRIX or POSIX docs.  Errno
is now cleared in such cases.
L<[GH #14557]|https://github.com/Perl/perl5/issues/14557>

=item *

Problems when multiplying long doubles by infinity have been fixed.
L<[GH #14993]|https://github.com/Perl/perl5/issues/14993>

=back

=item MacOS X

=over 4

=item *

Until now OS X builds of perl have specified a link target of 10.3 (Panther,
2003) but have not specified a compiler target.  From now on, builds of perl on
OS X 10.6 or later (Snow Leopard, 2008) by default capture the current OS X
version and specify that as the explicit build target in both compiler and
linker flags, thus preserving binary compatibility for extensions built later
regardless of changes in OS X, SDK, or compiler and linker versions.  To
override the default value used in the build and preserved in the flags,
specify C<export MACOSX_DEPLOYMENT_TARGET=10.N> before configuring and building
perl, where 10.N is the version of OS X you wish to target.  In OS X 10.5 or
earlier there is no change to the behavior present when those systems were
current; the link target is still OS X 10.3 and there is no explicit compiler
target.

=item *

Builds with both -DDEBUGGING and threading enabled would fail with a
"panic: free from wrong pool" error when built or tested from Terminal
on OS X.  This was caused by perl's internal management of the
environment conflicting with an atfork handler using the libc
C<setenv()> function to update the environment.

Perl now uses C<setenv()>/C<unsetenv()> to update the environment on OS X.
L<[GH #14955]|https://github.com/Perl/perl5/issues/14955>

=back

=item Solaris

=over 4

=item *

All Solaris variants now build a shared libperl

Solaris and variants like OpenIndiana now always build with the shared
Perl library (Configure -Duseshrplib).  This was required for the
OpenIndiana builds, but this has also been the setting for Oracle/Sun
Perl builds for several years.

=back

=item Tru64

=over 4

=item *

Workaround where Tru64 balks when prototypes are listed as
C<< PERL_STATIC_INLINE >>, but where the test is build with
C<< -DPERL_NO_INLINE_FUNCTIONS >>.

=back

=item VMS

=over 4

=item *

On VMS, the math function prototypes in C<math.h> are now visible under C++.
Now building the POSIX extension with C++ will no longer crash.

=item *

VMS has had C<setenv>/C<unsetenv> since v7.0 (released in 1996),
C<Perl_vmssetenv> now always uses C<setenv>/C<unsetenv>.

=item *

Perl now implements its own C<killpg> by scanning for processes in the
specified process group, which may not mean exactly the same thing as a Unix
process group, but allows us to send a signal to a parent (or master) process
and all of its sub-processes.  At the perl level, this means we can now send a
negative pid like so:

    kill SIGKILL, -$pid;

to signal all processes in the same group as C<$pid>.

=item *

For those C<%ENV> elements based on the CRTL environ array, we've always
preserved case when setting them but did look-ups only after upcasing the
key first, which made lower- or mixed-case entries go missing. This problem
has been corrected by making C<%ENV> elements derived from the environ array
case-sensitive on look-up as well as case-preserving on store.

=item *

Environment look-ups for C<PERL5LIB> and C<PERLLIB> previously only
considered logical names, but now consider all sources of C<%ENV> as
determined by C<PERL_ENV_TABLES> and as documented in L<perlvms/%ENV>.

=item *

The minimum supported version of VMS is now v7.3-2, released in 2003.  As a
side effect of this change, VAX is no longer supported as the terminal
release of OpenVMS VAX was v7.3 in 2001.

=back

=item Win32

=over 4

=item *

A new build option C<USE_NO_REGISTRY> has been added to the makefiles.  This
option is off by default, meaning the default is to do Windows registry
lookups.  This option stops Perl from looking inside the registry for anything.
For what values are looked up in the registry see L<perlwin32>.  Internally, in
C, the name of this option is C<WIN32_NO_REGISTRY>.

=item *

The behavior of Perl using C<HKEY_CURRENT_USER\Software\Perl> and
C<HKEY_LOCAL_MACHINE\Software\Perl> to lookup certain values, including C<%ENV>
vars starting with C<PERL> has changed.  Previously, the 2 keys were checked
for entries at all times through the perl process's life time even if
they did not
exist.  For performance reasons, now, if the root key (i.e.
C<HKEY_CURRENT_USER\Software\Perl> or C<HKEY_LOCAL_MACHINE\Software\Perl>) does
not exist at process start time, it will not be checked again for C<%ENV>
override entries for the remainder of the perl process's life.  This more
closely matches Unix behavior in that the environment is copied or inherited
on startup and changing the variable in the parent process or another process
or editing F<.bashrc> will not change the environmental variable in other
existing, running, processes.

=item *

One glob fetch was removed for each C<-X> or C<stat> call whether done from
Perl code or internally from Perl's C code.  The glob being looked up was
C<${^WIN32_SLOPPY_STAT}> which is a special variable.  This makes C<-X> and
C<stat> slightly faster.

=item *

During miniperl's process startup, during the build process, 4 to 8 IO calls
related to the process starting F<.pl> and the F<buildcustomize.pl> file were
removed from the code opening and executing the first 1 or 2 F<.pl> files.

=item *

Builds using Microsoft Visual C++ 2003 and earlier no longer produce
an "INTERNAL COMPILER ERROR" message.  [perl #126045]

=item *

Visual C++ 2013 builds will now execute on XP and higher. Previously they would
only execute on Vista and higher.

=item *

You can now build perl with GNU Make and GCC.  [perl #123440]

=item *

C<truncate($filename, $size)> now works for files over 4GB in size.
[perl #125347]

=item *

Parallel building has been added to the dmake C<makefile.mk> makefile. All
Win32 compilers are supported.

=item *

Building a 64-bit perl with a 64-bit GCC but a 32-bit gmake would
result in an invalid C<$Config{archname}> for the resulting perl.
[perl #127584]

=item *

Errors set by Winsock functions are now put directly into C<$^E>, and the
relevant C<WSAE*> error codes are now exported from the L<Errno> and L<POSIX>
modules for testing this against.

The previous behavior of putting the errors (converted to POSIX-style C<E*>
error codes since Perl 5.20.0) into C<$!> was buggy due to the non-equivalence
of like-named Winsock and POSIX error constants, a relationship between which
has unfortunately been established in one way or another since Perl 5.8.0.

The new behavior provides a much more robust solution for checking Winsock
errors in portable software without accidentally matching POSIX tests that were
intended for other OSes and may have different meanings for Winsock.

The old behavior is currently retained, warts and all, for backwards
compatibility, but users are encouraged to change any code that tests C<$!>
against C<E*> constants for Winsock errors to instead test C<$^E> against
C<WSAE*> constants.  After a suitable deprecation period, the old behavior may
be removed, leaving C<$!> unchanged after Winsock function calls, to avoid any
possible confusion over which error variable to check.

=back

=item ppc64el

=over 4

=item floating point

The floating point format of ppc64el (Debian naming for little-endian
PowerPC) is now detected correctly.

=back

=back

=head1 Internal Changes

=over 4

=item *

The implementation of perl's context stack system, and its internal API,
have been heavily reworked. Note that no significant changes have been
made to any external APIs, but XS code which relies on such internal
details may need to be fixed. The main changes are:

=over 4

=item *

The C<PUSHBLOCK()>, C<POPSUB()> etc. macros have been replaced with static
inline functions such as C<cx_pushblock()>, C<cx_popsub()> etc. These use
function args rather than implicitly relying on local vars such as
C<gimme> and C<newsp> being available. Also their functionality has
changed: in particular, C<cx_popblock()> no longer decrements
C<cxstack_ix>. The ordering of the steps in the C<pp_leave*> functions
involving C<cx_popblock()>, C<cx_popsub()> etc. has changed. See the new
documentation, L<perlguts/"Dynamic Scope and the Context Stack">, for
details on how to use them.

=item *

Various macros, which now consistently have a CX_ prefix, have been added:

  CX_CUR(), CX_LEAVE_SCOPE(), CX_POP()

or renamed:

  CX_POP_SAVEARRAY(), CX_DEBUG(), CX_PUSHSUBST(), CX_POPSUBST()

=item *

C<cx_pushblock()> now saves C<PL_savestack_ix> and C<PL_tmps_floor>, so
C<pp_enter*> and C<pp_leave*> no longer do

  ENTER; SAVETMPS; ....; LEAVE

=item *

C<cx_popblock()> now also restores C<PL_curpm>.

=item *

In C<dounwind()> for every context type, the current savestack frame is
now processed before each context is popped; formerly this was only done
for sub-like context frames. This action has been removed from
C<cx_popsub()> and placed into its own macro, C<CX_LEAVE_SCOPE(cx)>, which
must be called before C<cx_popsub()> etc.

C<dounwind()> now also does a C<cx_popblock()> on the last popped frame
(formerly it only did the C<cx_popsub()> etc. actions on each frame).

=item *

The temps stack is now freed on scope exit; previously, temps created
during the last statement of a block wouldn't be freed until the next
C<nextstate> following the block (apart from an existing hack that did
this for recursive subs in scalar context); and in something like
C<f(g())>, the temps created by the last statement in C<g()> would
formerly not be freed until the statement following the return from
C<f()>.

=item *

Most values that were saved on the savestack on scope entry are now
saved in suitable new fields in the context struct, and saved and
restored directly by C<cx_pushfoo()> and C<cx_popfoo()>, which is much
faster.

=item *

Various context struct fields have been added, removed or modified.

=item *

The handling of C<@_> in C<cx_pushsub()> and C<cx_popsub()> has been
considerably tidied up, including removing the C<argarray> field from the
context struct, and extracting out some common (but rarely used) code into
a separate function, C<clear_defarray()>. Also, useful subsets of
C<cx_popsub()> which had been unrolled in places like C<pp_goto> have been
gathered into the new functions C<cx_popsub_args()> and
C<cx_popsub_common()>.

=item *

C<pp_leavesub> and C<pp_leavesublv> now use the same function as the rest
of the C<pp_leave*>'s to process return args.

=item *

C<CXp_FOR_PAD> and C<CXp_FOR_GV> flags have been added, and
C<CXt_LOOP_FOR> has been split into C<CXt_LOOP_LIST>, C<CXt_LOOP_ARY>.

=item *

Some variables formerly declared by C<dMULTICALL> (but not documented) have
been removed.

=back

=item *

The obscure C<PL_timesbuf> variable, effectively a vestige of Perl 1, has
been removed. It was documented as deprecated in Perl 5.20, with a statement
that it would be removed early in the 5.21.x series; that has now finally
happened.
L<[GH #13632]|https://github.com/Perl/perl5/issues/13632>

=item *

An unwarranted assertion in C<Perl_newATTRSUB_x()> has been removed.  If
a stub subroutine
definition with a prototype has been seen, then any subsequent stub (or
definition) of the same subroutine with an attribute was causing an assertion
failure because of a null pointer.
L<[GH #15081]|https://github.com/Perl/perl5/issues/15081>

=item *

C<::> has been replaced by C<__> in C<ExtUtils::ParseXS>, like it's done for
parameters/return values. This is more consistent, and simplifies writing XS
code wrapping C++ classes into a nested Perl namespace (it requires only
a typedef for C<Foo__Bar> rather than two, one for C<Foo_Bar> and the other
for C<Foo::Bar>).

=item *

The C<to_utf8_case()> function is now deprecated.  Instead use
C<toUPPER_utf8>, C<toTITLE_utf8>, C<toLOWER_utf8>, and C<toFOLD_utf8>.
(See L<http://nntp.perl.org/group/perl.perl5.porters/233287>.)

=item *

Perl core code and the threads extension have been annotated so that,
if Perl is configured to use threads, then during compile-time clang (3.6
or later) will warn about suspicious uses of mutexes.
See L<http://clang.llvm.org/docs/ThreadSafetyAnalysis.html> for more
information.

=item *

The C<signbit()> emulation has been enhanced.  This will help older
and/or more exotic platforms or configurations.


=item *

Most EBCDIC-specific code in the core has been unified with non-EBCDIC
code, to avoid repetition and make maintenance easier.

=item *

MSWin32 code for C<$^X> has been moved out of the F<win32> directory to
F<caretx.c>, where other operating systems set that variable.

=item *

C<< sv_ref() >> is now part of the API.

=item *

L<perlapi/sv_backoff> had its return type changed from C<int> to C<void>.  It
previously has always returned C<0> since Perl 5.000 stable but that was
undocumented.  Although C<sv_backoff> is marked as public API, XS code is not
expected to be impacted since the proper API call would be through public API
C<sv_setsv(sv, &PL_sv_undef)>, or quasi-public C<SvOOK_off>, or non-public
C<SvOK_off> calls, and the return value of C<sv_backoff> was previously a
meaningless constant that can be rewritten as C<(sv_backoff(sv),0)>.

=item *

The C<EXTEND> and C<MEXTEND> macros have been improved to avoid various issues
with integer truncation and wrapping.  In particular, some casts formerly used
within the macros have been removed.  This means for example that passing an
unsigned C<nitems> argument is likely to raise a compiler warning now
(it's always been documented to require a signed value; formerly int,
lately SSize_t).

=item *

C<PL_sawalias> and C<GPf_ALIASED_SV> have been removed.

=item *

C<GvASSIGN_GENERATION> and C<GvASSIGN_GENERATION_set> have been removed.

=back

=head1 Selected Bug Fixes

=over 4

=item *

It now works properly to specify a user-defined property, such as

 qr/\p{mypkg1::IsMyProperty}/i

with C</i> caseless matching, an explicit package name, and
I<IsMyProperty> not defined at the time of the pattern compilation.

=item *

Perl's C<memcpy()>, C<memmove()>, C<memset()> and C<memcmp()> fallbacks are now
more compatible with the originals.  [perl #127619]

=item *

Fixed the issue where a C<< s///r >>) with B<< -DPERL_NO_COW >> attempts
to modify the source SV, resulting in the program dying. [perl #127635]

=item *

Fixed an EBCDIC-platform-only case where a pattern could fail to match. This
occurred when matching characters from the set of C1 controls when the
target matched string was in UTF-8.

=item *

Narrow the filename check in F<strict.pm> and F<warnings.pm>. Previously,
it assumed that if the filename (without the F<.pmc?> extension) differed
from the package name, if was a misspelled use statement (i.e. C<use Strict>
instead of C<use strict>). We now check whether there's really a
miscapitalization happening, and not some other issue.

=item *

Turn an assertion into a more user friendly failure when parsing
regexes. [perl #127599]

=item *

Correctly raise an error when trying to compile patterns with
unterminated character classes while there are trailing backslashes.
[perl #126141].

=item *

Line numbers larger than 2**31-1 but less than 2**32 are no longer
returned by C<caller()> as negative numbers.  [perl #126991]

=item *

C<< unless ( I<assignment> ) >> now properly warns when syntax
warnings are enabled.  [perl #127122]

=item *

Setting an C<ISA> glob to an array reference now properly adds
C<isaelem> magic to any existing elements.  Previously modifying such
an element would not update the ISA cache, so method calls would call
the wrong function.  Perl would also crash if the C<ISA> glob was
destroyed, since new code added in 5.23.7 would try to release the
C<isaelem> magic from the elements.  [perl #127351]

=item *

If a here-doc was found while parsing another operator, the parser had
already read end of file, and the here-doc was not terminated, perl
could produce an assertion or a segmentation fault.  This now reliably
complains about the unterminated here-doc.  [perl #125540]

=item *

C<untie()> would sometimes return the last value returned by the C<UNTIE()>
handler as well as its normal value, messing up the stack.  [perl
#126621]

=item *

Fixed an operator precedence problem when C< castflags & 2> is true.
[perl #127474]

=item *

Caching of DESTROY methods could result in a non-pointer or a
non-STASH stored in the C<SvSTASH()> slot of a stash, breaking the B
C<STASH()> method.  The DESTROY method is now cached in the MRO metadata
for the stash.  [perl #126410]

=item *

The AUTOLOAD method is now called when searching for a DESTROY method,
and correctly sets C<$AUTOLOAD> too.  [perl #124387]  [perl #127494]

=item *

Avoid parsing beyond the end of the buffer when processing a C<#line>
directive with no filename.  [perl #127334]

=item *

Perl now raises a warning when a regular expression pattern looks like
it was supposed to contain a POSIX class, like C<qr/[[:alpha:]]/>, but
there was some slight defect in its specification which causes it to
instead be treated as a regular bracketed character class.  An example
would be missing the second colon in the above like this:
C<qr/[[:alpha]]/>.  This compiles to match a sequence of two characters.
The second is C<"]">, and the first is any of: C<"[">, C<":">, C<"a">,
C<"h">, C<"l">, or C<"p">.   This is unlikely to be the intended
meaning, and now a warning is raised.  No warning is raised unless the
specification is very close to one of the 14 legal POSIX classes.  (See
L<perlrecharclass/POSIX Character Classes>.)
[perl #8904]

=item *

Certain regex patterns involving a complemented POSIX class in an
inverted bracketed character class, and matching something else
optionally would improperly fail to match.  An example of one that could
fail is C<qr/_?[^\Wbar]\x{100}/>.  This has been fixed.
[perl #127537]

=item *
