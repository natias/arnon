    b'command-templates',
    b'pre-merge-tool-output',
    default=None,
    alias=[(b'ui', b'pre-merge-tool-output-template')],
)
coreconfigitem(
    b'command-templates',
    b'oneline-summary',
    default=None,
)
coreconfigitem(
    b'command-templates',
    b'oneline-summary.*',
    default=dynamicdefault,
    generic=True,
)
_registerdiffopts(section=b'commands', configprefix=b'commit.interactive.')
coreconfigitem(
    b'commands',
    b'commit.post-status',
    default=False,
)
coreconfigitem(
    b'commands',
    b'grep.all-files',
    default=False,
    experimental=True,
)
coreconfigitem(
    b'commands',
    b'merge.require-rev',
    default=False,
)
coreconfigitem(
    b'commands',
    b'push.require-revs',
    default=False,
)
coreconfigitem(
    b'commands',
    b'resolve.confirm',
    default=False,
)
coreconfigitem(
    b'commands',
    b'resolve.explicit-re-merge',
    default=False,
)
coreconfigitem(
    b'commands',
    b'resolve.mark-check',
    default=b'none',
)
_registerdiffopts(section=b'commands', configprefix=b'revert.interactive.')
coreconfigitem(
    b'commands',
    b'show.aliasprefix',
    default=list,
)
coreconfigitem(
    b'commands',
    b'status.relative',
    default=False,
)
coreconfigitem(
    b'commands',
    b'status.skipstates',
    default=[],
    experimental=True,
)
coreconfigitem(
    b'commands',
    b'status.terse',
    default=b'',
)
coreconfigitem(
    b'commands',
    b'status.verbose',
    default=False,
)
coreconfigitem(
    b'commands',
    b'update.check',
    default=None,
)
coreconfigitem(
    b'commands',
    b'update.requiredest',
    default=False,
)
coreconfigitem(
    b'committemplate',
    b'.*',
    default=None,
    generic=True,
)
coreconfigitem(
    b'convert',
    b'bzr.saverev',
    default=True,
)
coreconfigitem(
    b'convert',
    b'cvsps.cache',
    default=True,
)
coreconfigitem(
    b'convert',
    b'cvsps.fuzz',
    default=60,
)
coreconfigitem(
    b'convert',
    b'cvsps.logencoding',
    default=None,
)
coreconfigitem(
    b'convert',
    b'cvsps.mergefrom',
    default=None,
)
coreconfigitem(
    b'convert',
    b'cvsps.mergeto',
    default=None,
)
coreconfigitem(
    b'convert',
    b'git.committeractions',
    default=lambda: [b'messagedifferent'],
)
coreconfigitem(
    b'convert',
    b'git.extrakeys',
    default=list,
)
coreconfigitem(
    b'convert',
    b'git.findcopiesharder',
    default=False,
)
coreconfigitem(
    b'convert',
    b'git.remoteprefix',
    default=b'remote',
)
coreconfigitem(
    b'convert',
    b'git.renamelimit',
    default=400,
)
coreconfigitem(
    b'convert',
    b'git.saverev',
    default=True,
)
coreconfigitem(
    b'convert',
    b'git.similarity',
    default=50,
)
coreconfigitem(
    b'convert',
    b'git.skipsubmodules',
    default=False,
)
coreconfigitem(
    b'convert',
    b'hg.clonebranches',
    default=False,
)
coreconfigitem(
    b'convert',
    b'hg.ignoreerrors',
    default=False,
)
coreconfigitem(
    b'convert',
    b'hg.preserve-hash',
    default=False,
)
coreconfigitem(
    b'convert',
    b'hg.revs',
    default=None,
)
coreconfigitem(
    b'convert',
    b'hg.saverev',
    default=False,
)
coreconfigitem(
    b'convert',
    b'hg.sourcename',
    default=None,
)
coreconfigitem(
    b'convert',
    b'hg.startrev',
    default=None,
)
coreconfigitem(
    b'convert',
    b'hg.tagsbranch',
    default=b'default',
)
coreconfigitem(
    b'convert',
    b'hg.usebranchnames',
    default=True,
)
coreconfigitem(
    b'convert',
    b'ignoreancestorcheck',
    default=False,
    experimental=True,
)
coreconfigitem(
    b'convert',
    b'localtimezone',
    default=False,
)
coreconfigitem(
    b'convert',
    b'p4.encoding',
    default=dynamicdefault,
)
coreconfigitem(
    b'convert',
    b'p4.startrev',
    default=0,
)
coreconfigitem(
    b'convert',
    b'skiptags',
    default=False,
)
coreconfigitem(
    b'convert',
    b'svn.debugsvnlog',
    default=True,
)
coreconfigitem(
    b'convert',
    b'svn.trunk',
    default=None,
)
coreconfigitem(
    b'convert',
    b'svn.tags',
    default=None,
)
coreconfigitem(
    b'convert',
    b'svn.branches',
    default=None,
)
coreconfigitem(
    b'convert',
    b'svn.startrev',
    default=0,
)
coreconfigitem(
    b'convert',
    b'svn.dangerous-set-commit-dates',
    default=False,
)
coreconfigitem(
    b'debug',
    b'dirstate.delaywrite',
    default=0,
)
coreconfigitem(
    b'debug',
    b'revlog.verifyposition.changelog',
    default=b'',
)
coreconfigitem(
    b'debug',
    b'revlog.debug-delta',
    default=False,
)
coreconfigitem(
    b'defaults',
    b'.*',
    default=None,
    generic=True,
)
coreconfigitem(
    b'devel',
    b'all-warnings',
    default=False,
)
coreconfigitem(
    b'devel',
    b'bundle2.debug',
    default=False,
)
coreconfigitem(
    b'devel',
    b'bundle.delta',
    default=b'',
)
coreconfigitem(
    b'devel',
    b'cache-vfs',
    default=None,
)
coreconfigitem(
    b'devel',
    b'check-locks',
    default=False,
)
coreconfigitem(
    b'devel',
    b'check-relroot',
    default=False,
)
# Track copy information for all file, not just "added" one (very slow)
coreconfigitem(
    b'devel',
    b'copy-tracing.trace-all-files',
    default=False,
)
coreconfigitem(
    b'devel',
    b'default-date',
    default=None,
)
coreconfigitem(
    b'devel',
    b'deprec-warn',
    default=False,
)
coreconfigitem(
    b'devel',
    b'disableloaddefaultcerts',
    default=False,
)
coreconfigitem(
    b'devel',
    b'warn-empty-changegroup',
    default=False,
)
coreconfigitem(
    b'devel',
    b'legacy.exchange',
    default=list,
)
# When True, revlogs use a special reference version of the nodemap, that is not
# performant but is "known" to behave properly.
coreconfigitem(
    b'devel',
    b'persistent-nodemap',
    default=False,
)
coreconfigitem(
    b'devel',
    b'servercafile',
    default=b'',
)
coreconfigitem(
    b'devel',
    b'serverexactprotocol',
    default=b'',
)
coreconfigitem(
    b'devel',
    b'serverrequirecert',
    default=False,
)
coreconfigitem(
    b'devel',
    b'strip-obsmarkers',
    default=True,
)
coreconfigitem(
    b'devel',
    b'warn-config',
    default=None,
)
coreconfigitem(
    b'devel',
    b'warn-config-default',
    default=None,
)
coreconfigitem(
    b'devel',
    b'user.obsmarker',
    default=None,
)
coreconfigitem(
    b'devel',
    b'warn-config-unknown',
    default=None,
)
coreconfigitem(
    b'devel',
    b'debug.copies',
    default=False,
)
coreconfigitem(
    b'devel',
    b'copy-tracing.multi-thread',
    default=True,
)
coreconfigitem(
    b'devel',
    b'debug.extensions',
    default=False,
)
coreconfigitem(
    b'devel',
    b'debug.repo-filters',
    default=False,
)
coreconfigitem(
    b'devel',
    b'debug.peer-request',
    default=False,
)
# If discovery.exchange-heads is False, the discovery will not start with
# remote head fetching and local head querying.
coreconfigitem(
    b'devel',
    b'discovery.exchange-heads',
    default=True,
)
# If discovery.grow-sample is False, the sample size used in set discovery will
# not be increased through the process
coreconfigitem(
    b'devel',
    b'discovery.grow-sample',
    default=True,
)
# When discovery.grow-sample.dynamic is True, the default, the sample size is
# adapted to the shape of the undecided set (it is set to the max of:
# <target-size>, len(roots(undecided)), len(heads(undecided)
coreconfigitem(
    b'devel',
    b'discovery.grow-sample.dynamic',
    default=True,
)
# discovery.grow-sample.rate control the rate at which the sample grow
coreconfigitem(
    b'devel',
    b'discovery.grow-sample.rate',
    default=1.05,
)
# If discovery.randomize is False, random sampling during discovery are
# deterministic. It is meant for integration tests.
coreconfigitem(
    b'devel',
    b'discovery.randomize',
    default=True,
)
# Control the initial size of the discovery sample
coreconfigitem(
    b'devel',
    b'discovery.sample-size',
    default=200,
)
# Control the initial size of the discovery for initial change
coreconfigitem(
    b'devel',
    b'discovery.sample-size.initial',
    default=100,
)
_registerdiffopts(section=b'diff')
coreconfigitem(
    b'diff',
    b'merge',
    default=False,
    experimental=True,
)
coreconfigitem(
    b'email',
    b'bcc',
    default=None,
)
coreconfigitem(
    b'email',
    b'cc',
    default=None,
)
coreconfigitem(
    b'email',
    b'charsets',
    default=list,
)
coreconfigitem(
    b'email',
    b'from',
    default=None,
)
coreconfigitem(
    b'email',
    b'method',
    default=b'smtp',
)
coreconfigitem(
    b'email',
    b'reply-to',
    default=None,
)
coreconfigitem(
    b'email',
    b'to',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'archivemetatemplate',
    default=dynamicdefault,
)
coreconfigitem(
    b'experimental',
    b'auto-publish',
    default=b'publish',
)
coreconfigitem(
    b'experimental',
    b'bundle-phases',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'bundle2-advertise',
    default=True,
)
coreconfigitem(
    b'experimental',
    b'bundle2-output-capture',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'bundle2.pushback',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'bundle2lazylocking',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'bundlecomplevel',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'bundlecomplevel.bzip2',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'bundlecomplevel.gzip',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'bundlecomplevel.none',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'bundlecomplevel.zstd',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'bundlecompthreads',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'bundlecompthreads.bzip2',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'bundlecompthreads.gzip',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'bundlecompthreads.none',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'bundlecompthreads.zstd',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'changegroup3',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'changegroup4',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'cleanup-as-archived',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'clientcompressionengines',
    default=list,
)
coreconfigitem(
    b'experimental',
    b'copytrace',
    default=b'on',
)
coreconfigitem(
    b'experimental',
    b'copytrace.movecandidateslimit',
    default=100,
)
coreconfigitem(
    b'experimental',
    b'copytrace.sourcecommitlimit',
    default=100,
)
coreconfigitem(
    b'experimental',
    b'copies.read-from',
    default=b"filelog-only",
)
coreconfigitem(
    b'experimental',
    b'copies.write-to',
    default=b'filelog-only',
)
coreconfigitem(
    b'experimental',
    b'crecordtest',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'directaccess',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'directaccess.revnums',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'editortmpinhg',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'evolution',
    default=list,
)
coreconfigitem(
    b'experimental',
    b'evolution.allowdivergence',
    default=False,
    alias=[(b'experimental', b'allowdivergence')],
)
coreconfigitem(
    b'experimental',
    b'evolution.allowunstable',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'evolution.createmarkers',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'evolution.effect-flags',
    default=True,
    alias=[(b'experimental', b'effect-flags')],
)
coreconfigitem(
    b'experimental',
    b'evolution.exchange',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'evolution.bundle-obsmarker',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'evolution.bundle-obsmarker:mandatory',
    default=True,
)
coreconfigitem(
    b'experimental',
    b'log.topo',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'evolution.report-instabilities',
    default=True,
)
coreconfigitem(
    b'experimental',
    b'evolution.track-operation',
    default=True,
)
# repo-level config to exclude a revset visibility
#
# The target use case is to use `share` to expose different subset of the same
# repository, especially server side. See also `server.view`.
coreconfigitem(
    b'experimental',
    b'extra-filter-revs',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'maxdeltachainspan',
    default=-1,
)
# tracks files which were undeleted (merge might delete them but we explicitly
# kept/undeleted them) and creates new filenodes for them
coreconfigitem(
    b'experimental',
    b'merge-track-salvaged',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'mmapindexthreshold',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'narrow',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'nonnormalparanoidcheck',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'exportableenviron',
    default=list,
)
coreconfigitem(
    b'experimental',
    b'extendedheader.index',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'extendedheader.similarity',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'graphshorten',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'graphstyle.parent',
    default=dynamicdefault,
)
coreconfigitem(
    b'experimental',
    b'graphstyle.missing',
    default=dynamicdefault,
)
coreconfigitem(
    b'experimental',
    b'graphstyle.grandparent',
    default=dynamicdefault,
)
coreconfigitem(
    b'experimental',
    b'hook-track-tags',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'httppostargs',
    default=False,
)
coreconfigitem(b'experimental', b'nointerrupt', default=False)
coreconfigitem(b'experimental', b'nointerrupt-interactiveonly', default=True)

coreconfigitem(
    b'experimental',
    b'obsmarkers-exchange-debug',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'remotenames',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'removeemptydirs',
    default=True,
)
coreconfigitem(
    b'experimental',
    b'revert.interactive.select-to-keep',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'revisions.prefixhexnode',
    default=False,
)
# "out of experimental" todo list.
#
# * include management of a persistent nodemap in the main docket
# * enforce a "no-truncate" policy for mmap safety
#      - for censoring operation
#      - for stripping operation
#      - for rollback operation
# * proper streaming (race free) of the docket file
# * track garbage data to evemtually allow rewriting -existing- sidedata.
# * Exchange-wise, we will also need to do something more efficient than
#   keeping references to the affected revlogs, especially memory-wise when
#   rewriting sidedata.
# * introduce a proper solution to reduce the number of filelog related files.
# * use caching for reading sidedata (similar to what we do for data).
# * no longer set offset=0 if sidedata_size=0 (simplify cutoff computation).
# * Improvement to consider
#   - avoid compression header in chunk using the default compression?
#   - forbid "inline" compression mode entirely?
#   - split the data offset and flag field (the 2 bytes save are mostly trouble)
#   - keep track of uncompressed -chunk- size (to preallocate memory better)
#   - keep track of chain base or size (probably not that useful anymore)
coreconfigitem(
    b'experimental',
    b'revlogv2',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'revisions.disambiguatewithin',
    default=None,
)
coreconfigitem(
    b'experimental',
    b'rust.index',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'server.filesdata.recommended-batch-size',
    default=50000,
)
coreconfigitem(
    b'experimental',
    b'server.manifestdata.recommended-batch-size',
    default=100000,
)
coreconfigitem(
    b'experimental',
    b'server.stream-narrow-clones',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'single-head-per-branch',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'single-head-per-branch:account-closed-heads',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'single-head-per-branch:public-changes-only',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'sparse-read',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'sparse-read.density-threshold',
    default=0.50,
)
coreconfigitem(
    b'experimental',
    b'sparse-read.min-gap-size',
    default=b'65K',
)
coreconfigitem(
    b'experimental',
    b'treemanifest',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'update.atomic-file',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'web.full-garbage-collection-rate',
    default=1,  # still forcing a full collection on each request
)
coreconfigitem(
    b'experimental',
    b'worker.wdir-get-thread-safe',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'worker.repository-upgrade',
    default=False,
)
coreconfigitem(
    b'experimental',
    b'xdiff',
    default=False,
)
coreconfigitem(
    b'extensions',
    b'[^:]*',
    default=None,
    generic=True,
)
coreconfigitem(
    b'extensions',
    b'[^:]*:required',
    default=False,
    generic=True,
)
coreconfigitem(
    b'extdata',
    b'.*',
    default=None,
    generic=True,
)
coreconfigitem(
    b'format',
    b'bookmarks-in-store',
    default=False,
)
coreconfigitem(
    b'format',
    b'chunkcachesize',
    default=None,
    experimental=True,
)
coreconfigitem(
    # Enable this dirstate format *when creating a new repository*.
    # Which format to use for existing repos is controlled by .hg/requires
    b'format',
    b'use-dirstate-v2',
    default=False,
    experimental=True,
    alias=[(b'format', b'exp-rc-dirstate-v2')],
)
coreconfigitem(
    b'format',
    b'use-dirstate-v2.automatic-upgrade-of-mismatching-repositories',
    default=False,
    experimental=True,
)
coreconfigitem(
    b'format',
    b'use-dirstate-v2.automatic-upgrade-of-mismatching-repositories:quiet',
    default=False,
    experimental=True,
)
coreconfigitem(
    b'format',
    b'use-dirstate-tracked-hint',
    default=False,
    experimental=True,
)
coreconfigitem(
    b'format',
    b'use-dirstate-tracked-hint.version',
    default=1,
    experimental=True,
)
coreconfigitem(
