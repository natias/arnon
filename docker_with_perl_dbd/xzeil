       , to_char( NULL )    FK_TABLE_CAT
       , fk.OWNER           FK_TABLE_SCHEM
       , fk.TABLE_NAME      FK_TABLE_NAME
       , fc.COLUMN_NAME     FK_COLUMN_NAME
       , uc.POSITION        ORDINAL_POSITION
       , 3                  UPDATE_RULE
       , decode( fk.DELETE_RULE, 'CASCADE', 0, 'RESTRICT', 1, 'SET NULL', 2, 'NO ACTION', 3, 'SET DEFAULT', 4 )
                            DELETE_RULE
       , fk.CONSTRAINT_NAME FK_NAME
       , uk.CONSTRAINT_NAME UK_NAME
       , to_char( NULL )    DEFERABILITY
       , decode( uk.CONSTRAINT_TYPE, 'P', 'PRIMARY', 'U', 'UNIQUE')
                            UNIQUE_OR_PRIMARY
    FROM ALL_CONSTRAINTS    uk
       , ALL_CONS_COLUMNS   uc
       , ALL_CONSTRAINTS    fk
       , ALL_CONS_COLUMNS   fc
   WHERE uk.OWNER            = uc.OWNER
     AND uk.CONSTRAINT_NAME  = uc.CONSTRAINT_NAME
     AND fk.OWNER            = fc.OWNER
     AND fk.CONSTRAINT_NAME  = fc.CONSTRAINT_NAME
     AND uk.CONSTRAINT_TYPE IN ('P','U')
     AND fk.CONSTRAINT_TYPE  = 'R'
     AND uk.CONSTRAINT_NAME  = fk.R_CONSTRAINT_NAME
     AND uk.OWNER            = fk.R_OWNER
     AND uc.POSITION         = fc.POSITION
     AND fk.STATUS           = 'ENABLED'
)
 WHERE 1              = 1
SQL
        my @BindVals = ();
        while ( my ( $k, $v ) = each %$attr ) {
            if ( $v ) {
               $SQL .= "   AND $k = ?\n";
               push @BindVals, $v;
            }
        }
        $SQL .= " ORDER BY UK_TABLE_SCHEM, UK_TABLE_NAME, FK_TABLE_SCHEM, FK_TABLE_NAME, ORDINAL_POSITION\n";
        my $sth = $dbh->prepare( $SQL ) or return undef;
        $sth->execute( @BindVals ) or return undef;
        $sth;
    }


    sub column_info {
        my $dbh  = shift;
        my $attr = ( ref $_[0] eq 'HASH') ? $_[0] : {
            'TABLE_SCHEM' => $_[1],'TABLE_NAME' => $_[2],'COLUMN_NAME' => $_[3] };
        my $ora_server_version = ora_server_version($dbh);
        my($typecase,$typecaseend, $choose) = ('','','/*+ CHOOSE */');
        if ($ora_server_version->[0] >= 8) {
            $typecase = <<'SQL';
CASE WHEN tc.DATA_TYPE LIKE 'TIMESTAMP% WITH% TIME ZONE' THEN 95
     WHEN tc.DATA_TYPE LIKE 'TIMESTAMP%'                 THEN 93
     WHEN tc.DATA_TYPE LIKE 'INTERVAL DAY% TO SECOND%'   THEN 110
     WHEN tc.DATA_TYPE LIKE 'INTERVAL YEAR% TO MONTH'    THEN 107
ELSE
SQL
            $typecaseend = 'END';
        } elsif ($ora_server_version->[0] >= 11) {
            # rt91217 CHOOSE hint deprecated
            $choose = '';
        }
        my $char_length = $ora_server_version->[0] < 9 ? 'DATA_LENGTH':'CHAR_LENGTH';
        my $SQL = <<"SQL";
SELECT *
  FROM
(
  SELECT $choose
         to_char( NULL )     TABLE_CAT
       , tc.OWNER            TABLE_SCHEM
       , tc.TABLE_NAME       TABLE_NAME
       , tc.COLUMN_NAME      COLUMN_NAME
       , $typecase decode( tc.DATA_TYPE
         , 'MLSLABEL' , -9106
         , 'ROWID'    , -9104
         , 'UROWID'   , -9104
         , 'BFILE'    ,    -4 -- 31?
         , 'LONG RAW' ,    -4
         , 'RAW'      ,    -3
         , 'LONG'     ,    -1
         , 'UNDEFINED',     0
         , 'CHAR'     ,     1
         , 'NCHAR'    ,     1
         , 'NUMBER'   ,     decode( tc.DATA_SCALE, NULL, 8, 3 )
         , 'FLOAT'    ,     8
         , 'VARCHAR2' ,    12
         , 'NVARCHAR2',    12
         , 'BLOB'     ,    30
         , 'CLOB'     ,    40
         , 'NCLOB'    ,    40
         , 'DATE'     ,    93
         , NULL
         ) $typecaseend      DATA_TYPE          -- ...
       , tc.DATA_TYPE        TYPE_NAME          -- std.?
       , decode( tc.DATA_TYPE
         , 'LONG RAW' , 2147483647
         , 'LONG'     , 2147483647
         , 'CLOB'     , 2147483647
         , 'NCLOB'    , 2147483647
         , 'BLOB'     , 2147483647
         , 'BFILE'    , 2147483647
         , 'NUMBER'   , decode( tc.DATA_SCALE
                        , NULL, 126
                        , nvl( tc.DATA_PRECISION, 38 )
                        )
         , 'FLOAT'    , tc.DATA_PRECISION
         , 'DATE'     , 19
         , 'VARCHAR2' , tc.$char_length
         , 'CHAR'     , tc.$char_length
         , 'NVARCHAR2', tc.$char_length
         , 'NCHAR'    , tc.$char_length
         , tc.DATA_LENGTH
         )                   COLUMN_SIZE
       , decode( tc.DATA_TYPE
         , 'LONG RAW' , 2147483647
         , 'LONG'     , 2147483647
         , 'CLOB'     , 2147483647
         , 'NCLOB'    , 2147483647
         , 'BLOB'     , 2147483647
         , 'BFILE'    , 2147483647
         , 'NUMBER'   , nvl( tc.DATA_PRECISION, 38 ) + 2
         , 'FLOAT'    ,  8 -- ?
         , 'DATE'     , 16
         , tc.DATA_LENGTH
         )                   BUFFER_LENGTH
       , decode( tc.DATA_TYPE
         , 'DATE'     ,  0
         , tc.DATA_SCALE
         )                   DECIMAL_DIGITS     -- ...
       , decode( tc.DATA_TYPE
         , 'FLOAT'    ,  2
         , 'NUMBER'   ,  decode( tc.DATA_SCALE, NULL, 2, 10 )
         , NULL
         )                   NUM_PREC_RADIX
       , decode( tc.NULLABLE
         , 'Y'        ,  1
         , 'N'        ,  0
         , NULL
         )                   NULLABLE
       , cc.COMMENTS         REMARKS
       , tc.DATA_DEFAULT     COLUMN_DEF         -- Column is LONG!
       , decode( tc.DATA_TYPE
         , 'MLSLABEL' , -9106
         , 'ROWID'    , -9104
         , 'UROWID'   , -9104
         , 'BFILE'    ,    -4 -- 31?
         , 'LONG RAW' ,    -4
         , 'RAW'      ,    -3
         , 'LONG'     ,    -1
         , 'UNDEFINED',     0
         , 'CHAR'     ,     1
         , 'NCHAR'    ,     1
         , 'NUMBER'   ,     decode( tc.DATA_SCALE, NULL, 8, 3 )
         , 'FLOAT'    ,     8
         , 'VARCHAR2' ,    12
         , 'NVARCHAR2',    12
         , 'BLOB'     ,    30
         , 'CLOB'     ,    40
         , 'NCLOB'    ,    40
         , 'DATE'     ,     9 -- not 93!
         , NULL
         )                   SQL_DATA_TYPE      -- ...
       , decode( tc.DATA_TYPE
         , 'DATE'     ,     3
         , NULL
         )                   SQL_DATETIME_SUB   -- ...
       , to_number( NULL )   CHAR_OCTET_LENGTH  -- TODO
       , tc.COLUMN_ID        ORDINAL_POSITION
       , decode( tc.NULLABLE
         , 'Y'        , 'YES'
         , 'N'        , 'NO'
         , NULL
         )                   IS_NULLABLE
    FROM ALL_TAB_COLUMNS  tc
       , ALL_COL_COMMENTS cc
   WHERE tc.OWNER         = cc.OWNER
     AND tc.TABLE_NAME    = cc.TABLE_NAME
     AND tc.COLUMN_NAME   = cc.COLUMN_NAME
)
 WHERE 1              = 1
SQL
        my @BindVals = ();
        while ( my ( $k, $v ) = each %$attr ) {
            if ( $v ) {
                $SQL .= "   AND $k LIKE ? ESCAPE '\\'\n";
                push @BindVals, $v;
            }
        }
        $SQL .= " ORDER BY TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION\n";


        # Since DATA_DEFAULT is a LONG, DEFAULT values longer than 80 chars will
        # throw an ORA-24345 by default; so we check if LongReadLen is set at
        # the default value, and if so, set it to something less likely to fail
        # in common usage.
        #
        # We do not set LongTruncOk however as that would make COLUMN_DEF
        # incorrect, in those (extreme!) cases it would be better if the user
        # sets LongReadLen herself.

        my $long_read_len = $dbh->FETCH('LongReadLen');

        my ($sth, $exc);

        {
            local $@;
            eval {
                $dbh->STORE(LongReadLen => 1024*1024) if $long_read_len == 80;
                $sth = $dbh->prepare( $SQL );
            };
            $exc = $@;
        }
        if ($exc) {
            $dbh->STORE(LongReadLen => 80) if $long_read_len == 80;
            die $exc;
        }

        $dbh->STORE(LongReadLen => 80) if $long_read_len == 80;

        return undef if not $sth;

        $sth->execute( @BindVals ) or return undef;
        $sth;
    }

    sub statistics_info {
        my($dbh, $catalog, $schema, $table, $unique_only, $quick) = @_;
        if (ref $catalog eq 'HASH') {
            ($schema, $table) = @$catalog{'TABLE_SCHEM','TABLE_NAME'};
            $catalog = undef;
        }
        my $choose = '/*+ CHOOSE */';
        my $ora_server_version = ora_server_version($dbh);
        if ($ora_server_version->[0] >= 11) {
            # rt91217 CHOOSE hint deprecated
            $choose = '';
        }
        my $SQL = <<"SQL";
SELECT *
  FROM
(
  SELECT $choose
         NULL              TABLE_CAT
       , t.OWNER           TABLE_SCHEM
       , t.TABLE_NAME      TABLE_NAME
       , to_number( NULL ) NON_UNIQUE
       , NULL              INDEX_QUALIFIER
       , NULL              INDEX_NAME
       ,'table'            TYPE
       , to_number( NULL ) ORDINAL_POSITION
       , NULL              COLUMN_NAME
       , NULL              ASC_OR_DESC
       , t.NUM_ROWS        CARDINALITY
       , t.BLOCKS          PAGES
       , NULL              FILTER_CONDITION
    FROM ALL_TABLES        t
   UNION
  SELECT NULL              TABLE_CAT
       , t.OWNER           TABLE_SCHEM
       , t.TABLE_NAME      TABLE_NAME
       , decode( t.UNIQUENESS,'UNIQUE', 0, 1 ) NON_UNIQUE
       , c.INDEX_OWNER     INDEX_QUALIFIER
       , c.INDEX_NAME      INDEX_NAME
       , decode( t.INDEX_TYPE,'NORMAL','btree','CLUSTER','clustered','other') TYPE
       , c.COLUMN_POSITION ORDINAL_POSITION
       , c.COLUMN_NAME     COLUMN_NAME
       , decode( c.DESCEND,'ASC','A','DESC','D') ASC_OR_DESC
       , t.DISTINCT_KEYS   CARDINALITY
       , t.LEAF_BLOCKS     PAGES
       , NULL              FILTER_CONDITION
    FROM ALL_INDEXES       t
       , ALL_IND_COLUMNS   c
   WHERE t.OWNER           = c.INDEX_OWNER
     AND t.INDEX_NAME      = c.INDEX_NAME
     AND t.TABLE_OWNER     = c.TABLE_OWNER
     AND t.TABLE_NAME      = c.TABLE_NAME
     AND t.UNIQUENESS   LIKE :3
)
 WHERE TABLE_SCHEM = :1
   AND TABLE_NAME  = :2
 ORDER BY NON_UNIQUE, TYPE, INDEX_QUALIFIER, INDEX_NAME, ORDINAL_POSITION
SQL
        my $sth = $dbh->prepare($SQL) or return undef;
        $sth->execute($schema, $table, $unique_only ?'UNIQUE':'%') or return undef;
        $sth;
    }

    sub type_info_all {
        my ($dbh) = @_;
        my $version = ( ora_server_version($dbh)->[0] < DBD::Oracle::ORA_OCI() )
                    ?   ora_server_version($dbh)->[0] : DBD::Oracle::ORA_OCI();
        my $vc2len = ( $version < 8 ) ? '2000' : '4000';

        my $type_info_all = [
            {
               TYPE_NAME          =>  0,
               DATA_TYPE          =>  1,
               COLUMN_SIZE        =>  2,
               LITERAL_PREFIX     =>  3,
               LITERAL_SUFFIX     =>  4,
               CREATE_PARAMS      =>  5,
               NULLABLE           =>  6,
               CASE_SENSITIVE     =>  7,
               SEARCHABLE         =>  8,
               UNSIGNED_ATTRIBUTE =>  9,
               FIXED_PREC_SCALE   => 10,
               AUTO_UNIQUE_VALUE  => 11,
               LOCAL_TYPE_NAME    => 12,
               MINIMUM_SCALE      => 13,
               MAXIMUM_SCALE      => 14,
               SQL_DATA_TYPE      => 15,
               SQL_DATETIME_SUB   => 16,
               NUM_PREC_RADIX     => 17,
               INTERVAL_PRECISION => 18,
            },
            [ 'LONG RAW',        SQL_LONGVARBINARY, 2147483647,"'",  "'",
               undef,            1,0,0,undef,0,undef,
               'LONG RAW',        undef,undef,SQL_LONGVARBINARY,undef,undef,undef, ],
            [ 'RAW',             SQL_VARBINARY,     2000,      "'",  "'",
               'max length',     1,0,3,undef,0,undef,
               'RAW',             undef,undef,SQL_VARBINARY,    undef,undef,undef, ],
            [ 'LONG',            SQL_LONGVARCHAR,   2147483647,"'",  "'",
               undef,            1,1,0,undef,0,undef,
               'LONG',            undef,undef,SQL_LONGVARCHAR,  undef,undef,undef, ],
            [ 'CHAR',            SQL_CHAR,          2000,      "'",  "'",
               'max length',     1,1,3,undef,0,0,
               'CHAR',            undef,undef,SQL_CHAR,         undef,undef,undef, ],
            [ 'DECIMAL',         SQL_DECIMAL,       38,        undef,undef,
               'precision,scale',1,0,3,0,    0,0,
               'DECIMAL',         0,    38,   SQL_DECIMAL,      undef,10,   undef, ],
            [ "DOUBLE PRECISION",SQL_DOUBLE,        15,        undef,undef,
               undef, 1,0,3,0,    0,0,
               "DOUBLE PRECISION",undef,undef,SQL_DOUBLE,       undef,10,   undef, ],
            [ "DATE",            SQL_TYPE_TIMESTAMP,19,        "'",  "'",
               undef,            1,0,3,undef,0,0,
               "DATE",            0,    0,    SQL_DATE,         3,    undef,undef, ],
            [ "VARCHAR2",        SQL_VARCHAR,       $vc2len,   "'",  "'",
               "max length",     1,1,3,undef,0,0,
               "VARCHAR2",        undef,undef,SQL_VARCHAR,      undef,undef,undef, ],
            [ "BLOB",            SQL_BLOB, 2147483647,"'",  "'",
                undef,            1,1,0,undef,0,undef,
               "BLOB",            undef,undef,SQL_LONGVARBINARY,undef,undef,undef, ],
            [ "BFILE",           -9114, 2147483647,"'",  "'",
               undef,            1,1,0,undef,0,undef,
               "BFILE",           undef,undef,SQL_LONGVARBINARY,undef,undef,undef, ],
            [ "CLOB",            SQL_CLOB,   2147483647,"'",  "'",
               undef,            1,1,0,undef,0,undef,
               "CLOB",            undef,undef,SQL_LONGVARCHAR,  undef,undef,undef, ],
               ["TIMESTAMP WITH TIME ZONE",       # type name
                      SQL_TYPE_TIMESTAMP_WITH_TIMEZONE,       # data type
                      40,              # column size
                      "TIMESTAMP'",       # literal prefix
                      "'",              # literal suffix
                      "precision",       # create params
                      1,              # nullable
                      0,              # case sensitive
                      3,              # searchable
                      undef,              # unsigned attribute
                      0,              # fixed prec scale
                      0,              # auto unique value
                      undef,              # local type name
                      0,              # minimum scale
                      6,              # maximum scale
                      SQL_TIMESTAMP,       # sql data type
                      5,              # sql datetime sub
                      undef,              # num prec radix
                      undef,              # interval precision
               ],
               [ "INTERVAL DAY TO SECOND",       # type name
                      SQL_INTERVAL_DAY_TO_SECOND,       # data type
                      22,                            # column size       '+00 11:12:10.222222200'
                      "INTERVAL'",       # literal prefix
                      "'",              # literal suffix
                      "precision",       # create params
                      1,              # nullable
                      0,              # case sensitive
                      3,              # searchable
                      undef,              # unsigned attribute
                      0,              # fixed prec scale
                      0,              # auto unique value
                      undef,              # local type name
                      0,              # minimum scale
                      9,              # maximum scale
                      SQL_INTERVAL,       # sql data type
                      10,              # sql datetime sub
                      undef,              # num prec radix
                      undef,              # interval precision
               ],
               [ "INTERVAL YEAR TO MONTH",       # type name
                      SQL_INTERVAL_YEAR_TO_MONTH,       # data type
                      13,              # column size        '+012345678-01'
                      "INTERVAL'",       # literal prefix
                      "'",              # literal suffix
                      "precision",       # create params
                      1,              # nullable
                      0,              # case sensitive
                      3,              # searchable
                      undef,              # unsigned attribute
                      0,              # fixed prec scale
                      0,              # auto unique value
                      undef,              # local type name
                      0,              # minimum scale
                      9,              # maximum scale
                      SQL_INTERVAL,       # sql data type
                      7,              # sql datetime sub
                      undef,              # num prec radix
                      undef,              # interval precision
               ]
          ];

        return $type_info_all;
    }

    sub plsql_errstr {
        # original version thanks to Bob Menteer
        my $sth = shift->prepare_cached(q{
            SELECT name, type, line, position, text
            FROM user_errors ORDER BY name, type, sequence
        }) or return undef;
        $sth->execute or return undef;
        my ( @msg, $oname, $otype, $name, $type, $line, $pos, $text );
        $oname = $otype = 0;
        while ( ( $name, $type, $line, $pos, $text ) = $sth->fetchrow_array ) {
            if ( $oname ne $name || $otype ne $type ) {
               push @msg, "Errors for $type $name:";
               $oname = $name;
               $otype = $type;
            }
            push @msg, "$line.$pos: $text";
        }
        return join( "\n", @msg );
    }

    #
    # note, dbms_output must be enabled prior to usage
    #
    sub dbms_output_enable {
        my ($dbh, $buffersize) = @_;
        $buffersize ||= 20000;       # use oracle 7.x default
        $dbh->do("begin dbms_output.enable(:1); end;", undef, $buffersize);
    }

    sub dbms_output_get {
        my $dbh = shift;
        my $sth = $dbh->prepare_cached("begin dbms_output.get_line(:l, :s); end;")
               or return;
        my ($line, $status, @lines);
        my $version = join ".", @{ ora_server_version($dbh) }[0..1];
        my $len =  32767;
        if ($version < 10.2){
            $len = 400;
        }
        # line can be greater that 255 (e.g. 7 byte date is expanded on output)
        $sth->bind_param_inout(':l', \$line, $len, { ora_type => 1 });
        $sth->bind_param_inout(':s', \$status, 20, { ora_type => 1 });
        if (!wantarray) {
            $sth->execute or return undef;
            return $line if $status eq '0';
            return undef;
        }
        push @lines, $line while($sth->execute && $status eq '0');
        return @lines;
    }

    sub dbms_output_put {
        my $dbh = shift;
        my $sth = $dbh->prepare_cached("begin dbms_output.put_line(:1); end;")
               or return;
        my $line;
        foreach $line (@_) {
            $sth->execute($line) or return;
        }
        return 1;
    }


    sub dbms_msgpipe_get {
        my $dbh = shift;
        my $sth = $dbh->prepare_cached(q{
            begin dbms_msgpipe.get_request(:returnpipe, :proc, :param); end;
        }) or return;
        my $msg = ['','',''];
        $sth->bind_param_inout(":returnpipe", \$msg->[0],   30);
        $sth->bind_param_inout(":proc",       \$msg->[1],   30);
        $sth->bind_param_inout(":param",      \$msg->[2], 4000);
        $sth->execute or return undef;
        return $msg;
    }

    sub dbms_msgpipe_ack {
        my $dbh = shift;
        my $msg = shift;
        my $sth = $dbh->prepare_cached(q{
            begin dbms_msgpipe.acknowledge(:returnpipe, :errormsg, :param); end;}) or return;
        $sth->bind_param_inout(':returnpipe', \$msg->[0],   30);
        $sth->bind_param_inout(':proc',       \$msg->[1],   30);
        $sth->bind_param_inout(':param',      \$msg->[2], 4000);
        $sth->execute or return undef;
        return 1;
    }

    sub ora_server_version {
        my $dbh = shift;
        return $dbh->{ora_server_version} if defined $dbh->{ora_server_version};
        my $banner = $dbh->selectrow_array(<<'SQL', undef, 'Oracle%', 'Personal Oracle%');
SELECT banner
  FROM v$version
  WHERE banner LIKE ? OR banner LIKE ?
SQL
        if (defined $banner) {
            my @version = $banner =~ /(?:^|\s)(\d+)\.(\d+)\.(\d+)\.(\d+)\.(\d+)(?:\s|$)/;
            $dbh->{ora_server_version} = \@version if @version;
        }

        # TODO looks like a bug that we don't return
        # $dbh->{ora_server_version} here
    }

    sub ora_nls_parameters {
        my $dbh = shift;
        my $refresh = shift;

        if ($refresh || !$dbh->{ora_nls_parameters}) {
            my $nls_parameters = $dbh->selectall_arrayref(q{
               SELECT parameter, value FROM v$nls_parameters
            }) or return;
            $dbh->{ora_nls_parameters} = { map { $_->[0] => $_->[1] } @$nls_parameters };
        }

        # return copy of params to protect against accidental editing
        my %nls = %{$dbh->{ora_nls_parameters}};
        return \%nls;
    }

    sub ora_can_unicode {
        my $dbh = shift;
        my $refresh = shift;
        # 0 = No Unicode support.
        # 1 = National character set is Unicode-based.
        # 2 = Database character set is Unicode-based.
        # 3 = Both character sets are Unicode-based.

        return $dbh->{ora_can_unicode}
            if defined $dbh->{ora_can_unicode} && !$refresh;

        my $nls = $dbh->ora_nls_parameters($refresh);

        $dbh->{ora_can_unicode}  = 0;
        $dbh->{ora_can_unicode} += 1 if $nls->{NLS_NCHAR_CHARACTERSET} =~ m/UTF/;
        $dbh->{ora_can_unicode} += 2 if $nls->{NLS_CHARACTERSET}       =~ m/UTF/;

        return $dbh->{ora_can_unicode};
    }

}   # end of package DBD::Oracle::db


{   package                     # hide from PAUSE
    DBD::Oracle::st;            # ====== STATEMENT ======


   sub bind_param_inout_array {
        my $sth = shift;
        my ($p_id, $value_array,$maxlen, $attr) = @_;
        return $sth->set_err($DBI::stderr, "Value for parameter $p_id must be an arrayref, not a ".ref($value_array))
           if defined $value_array and ref $value_array and ref $value_array ne 'ARRAY';

        return $sth->set_err($DBI::stderr, "Can't use named placeholder '$p_id' for non-driver supported bind_param_inout_array")
           unless DBI::looks_like_number($p_id); # because we rely on execute(@ary) here

        return $sth->set_err($DBI::stderr, "Placeholder '$p_id' is out of range")
           if $p_id <= 0; # can't easily/reliably test for too big

        # get/create arrayref to hold params
        my $hash_of_arrays = $sth->{ParamArrays} ||= { };

        $$hash_of_arrays{$p_id} = $value_array;
        return ora_bind_param_inout_array($sth, $p_id, $value_array,$maxlen, $attr);
        1;

    }


    sub execute_for_fetch {
       my ($sth, $fetch_tuple_sub, $tuple_status) = @_;
       my $row_count = 0;
       my $err_total = 0;
       my $tuple_count="0E0";
       my $tuple_batch_status;
       my $dbh = $sth->{Database};
       my $batch_size =($dbh->{'ora_array_chunk_size'}||= 1000);
       if(defined($tuple_status)) {
           @$tuple_status = ();
           $tuple_batch_status = [ ];
       }

       my $finished;
       while (1) {
           my @tuple_batch;
           for (my $i = 0; $i < $batch_size; $i++) {
               $finished = $fetch_tuple_sub->();
               push @tuple_batch, [@{$finished || last}];

           }
           last unless @tuple_batch;

           my $err_count = 0;
           my $res = ora_execute_array($sth,
                                           \@tuple_batch,
                                           scalar(@tuple_batch),
                                           $tuple_batch_status,
                                           $err_count );

           if (defined($res)) { #no error
                $row_count += $res;
           }
           else {
                $row_count = undef;
           }

           $err_total += $err_count;

           $tuple_count+=@tuple_batch;
           push @$tuple_status, @$tuple_batch_status
                if defined($tuple_status);

           last if !$finished;

       }
       #error check here
       return $sth->set_err($DBI::stderr, "executing $tuple_count generated $err_total errors")
                  if $err_total;

       return wantarray
                ? ($tuple_count, defined $row_count ? $row_count : undef)
                : $tuple_count;

    }

    sub private_attribute_info {
        return { map { $_ => undef } qw/
            ora_lengths
            ora_types
            ora_rowid
            ora_est_row_width
            ora_type
            ora_fail_over
        / };
   }
}

1;

__END__

=pod

=encoding UTF-8

=head1 NAME

DBD::Oracle - Oracle database driver for the DBI module

=head1 VERSION

version 1.90

=head1 SYNOPSIS

  use DBI;

  $dbh = DBI->connect("dbi:Oracle:$dbname", $user, $passwd);

  $dbh = DBI->connect("dbi:Oracle:host=$host;sid=$sid", $user, $passwd);

  # See the DBI module documentation for full details

  # for some advanced uses you may need Oracle type values:
  use DBD::Oracle qw(:ora_types);

=head1 DESCRIPTION

DBD::Oracle is a Perl module which works with the DBI module to provide
access to Oracle databases.

This documentation describes driver specific behaviour and restrictions. It is
not supposed to be used as the only reference for the user. In any case
consult the L<DBI> documentation first!

=head1 NAME

DBD::Oracle - Perl module for accessing Oracle

=head1 CONSTANTS

=over 4

=item :ora_session_modes

ORA_SYSDBA ORA_SYSOPER ORA_SYSASM ORA_SYSBACKUP ORA_SYSDG ORA_SYSKM

=item :ora_types

  ORA_VARCHAR2 ORA_STRING ORA_NUMBER ORA_LONG ORA_ROWID ORA_DATE ORA_RAW
  ORA_LONGRAW ORA_CHAR ORA_CHARZ ORA_MLSLABEL ORA_XMLTYPE ORA_CLOB ORA_BLOB
  ORA_RSET ORA_VARCHAR2_TABLE ORA_NUMBER_TABLE SQLT_INT SQLT_FLT ORA_OCI
  SQLT_CHR SQLT_BIN

=item SQLCS_IMPLICIT

=item SQLCS_NCHAR

SQLCS_IMPLICIT and SQLCS_NCHAR are I<character set form> values.
See notes about Unicode elsewhere in this document.

=item SQLT_INT

=item SQLT_FLT

These types are used only internally, and may be specified as internal
bind type for ORA_NUMBER_TABLE. See notes about ORA_NUMBER_TABLE elsewhere
in this document

=item ORA_OCI

Oracle doesn't provide a formal API for determining the exact version
number of the OCI client library used, so DBD::Oracle has to go digging
(and sometimes has to more or less guess).  The ORA_OCI constant
holds the result of that process.

In string context ORA_OCI returns the full "A.B.C.D" version string.

In numeric context ORA_OCI returns the major.minor version number
(8.1, 9.2, 10.0 etc).  But note that version numbers are not actually
floating point and so if Oracle ever makes a release that has a two
digit minor version, such as C<9.10> it will have a lower numeric
value than the preceding C<9.9> release. So use with care.

The contents and format of ORA_OCI are subject to change (it may,
for example, become a I<version object> in later releases).
I recommend that you avoid checking for exact values.

=item :ora_fetch_orient

  OCI_FETCH_CURRENT OCI_FETCH_NEXT OCI_FETCH_FIRST OCI_FETCH_LAST
  OCI_FETCH_PRIOR OCI_FETCH_ABSOLUTE OCI_FETCH_RELATIVE

These constants are used to set the orientation of a fetch on a scrollable cursor.

=item :ora_exe_modes

  OCI_STMT_SCROLLABLE_READONLY

=item :ora_fail_over

  OCI_FO_END OCI_FO_ABORT OCI_FO_REAUTH OCI_FO_BEGIN OCI_FO_ERROR
  OCI_FO_NONE OCI_FO_SESSION OCI_FO_SELECT OCI_FO_TXNAL OCI_FO_RETRY

=back

=head1 DBI CLASS METHODS

=head2 B<connect>

This method creates a database handle by connecting to a database, and is the DBI equivalent of the "new" method.
To open a connection to an Oracle database you need to specify a database connection string (URL), username and password.

The connection string is always of the form: "dbi:Oracle:<db identifier>"
There are several ways to identify a database:

=over

=item 1

If the database is local, specifying the SID or service name will be enough.

=item 2

If the database is defined in a TNSNAMES.ORA file, you can use the service name given in the file

=item 3

To connect without TNSNAMES.ORA file, you can use an EZCONNECT url, of the form:
//host[:port][/service_name]

=back

If port name is not specified, 1521 is the default. If service name is not specified, the hostname will be used as a service name.

The following examples show several ways a connection can be created:

  $dbh = DBI->connect('dbi:Oracle:DB','username','password');

  $dbh = DBI->connect('dbi:Oracle:DB','username/password','');

  $dbh = DBI->connect('dbi:Oracle:','username@DB','password');

  $dbh = DBI->connect('dbi:Oracle:host=foobar;sid=DB;port=1521', 'scott/tiger', '');

  $dbh = DBI->connect("dbi:Oracle://myhost:1522/ORCL",'username', 'password');

=head3 OS authentication

To connect to a local database with a user which has been set up to
authenticate via the OS ("ALTER USER username IDENTIFIED EXTERNALLY"):

  $dbh = DBI->connect('dbi:Oracle:','/','');

Note the lack of a connection name (use the ORACLE_SID environment
variable). If an explicit SID is used you will probably get an ORA-01004 error.

That only works for local databases. (Authentication to remote Oracle
databases using your Unix login name without a password is possible
but it is not secure and not recommended so not documented here.

=head3 Oracle Environment Variables

To use DBD::ORACLE to connect to an Oracle database, ORACLE_HOME environment variable should be set correctly.
In general, the value used should match the version of Oracle that was used to build DBD::Oracle.  If using dynamic linking then ORACLE_HOME should match the version of Oracle that will be used to load in the Oracle client libraries (via LD_LIBRARY_PATH, ldconfig, or similar on Unix).

Oracle can use two environment variables to specify default connections: ORACLE_SID and TWO_TASK.

To use them, specify either a local SID or service name, or a service name that is specified in the TNSNAMES.ORA file.

Note that if you have *both* local and remote databases, and you have ORACLE_SID *and* TWO_TASK set, and you don't specify a fully
qualified connect string on the command line, TWO_TASK takes precedence over ORACLE_SID (i.e. you get connected to remote system).

It is highly recommended not to rely on environment variables and to always explicitly specify the SID in the connection string. This can prevent serious mistakes such as dropping a schema in the wrong database, and generally makes debugging and troubleshooting easier.

Also remember that depending on the operating system you are using the differing "ORACLE" environment variables may be case sensitive, so if you are not connecting as you should double check the case of both the variable and its value.

=head3 Timezones

If the query is run through SQL*Net (mostly queries that are executed on remote servers), Oracle will return the time zone based on the setting of the UNIX environment variable "TZ" for the user who started the listener.

If the query is run locally, Oracle will return the time zone based on the "TZ" environment variable setting of the user running
the query.

With local queries, you can change the time zone for a particular user by simply changing the setting of "TZ". To check the current setting,
issue the UNIX "date" command.

=head3 Oracle DRCP

DBD::Oracle supports DRCP (Database Resident Connection Pool) so
if you have an 11.2 database and DRCP is enabled you can direct
all of your connections to it by adding ':POOLED' to the SID or
setting a connection attribute of ora_drcp, or set the SERVER=POOLED
when using a TNSENTRY style connection or even by setting an
environment variable ORA_DRCP.  All of which are demonstrated below;

  $dbh = DBI->connect('dbi:Oracle:DB:POOLED','username','password')

  $dbh = DBI->connect('dbi:Oracle:','username@DB:POOLED','password')

  $dbh = DBI->connect('dbi:Oracle:DB','username','password',{ora_drcp=>1})

  $dbh = DBI->connect('dbi:Oracle:DB','username','password',{ora_drcp=>1,
                                                             ora_drcp_class=>'my_app',
                                                             ora_drcp_min  =>10})

  $dbh = DBI->connect('dbi:Oracle:host=foobar;sid=ORCL;port=1521;SERVER=POOLED', 'scott/tiger', '')

  $dbh = DBI->connect('dbi:Oracle:', q{scott/tiger@(DESCRIPTION=
  (ADDRESS=(PROTOCOL=TCP)(HOST= foobar)(PORT=1521))
  (CONNECT_DATA=(SID=ORCL)(SERVER=POOLED)))}, "")

  if the ORA_DRCP environment variable is set then just this

  $dbh = DBI->connect('dbi:Oracle:DB','username','password')

You can find a white paper on setting up DRCP and its advantages at L<http://www.oracle.com/technetwork/articles/oracledrcp11g-1-133381.pdf>.

Please note that DRCP support in DBD::Oracle is relatively new so the
mechanics or its implementation are subject to change.

=head3 TAF (Transparent Application Failover)

Transparent Application Failover (TAF) is the feature in OCI that
allows for clients to automatically reconnect to an instance in the
event of a failure of the instance. The reconnect happens
automatically from within the OCI (Oracle Call Interface) library.
DBD::Oracle now supports a callback function that will fire when a TAF
event takes place. You may use the callback to inform the
user a failover is taking place or to setup the session again
once the failover has succeeded.

You will have to set up TAF on your instance before you can use this
callback.  You can test your instance to see if you can use TAF
callback with

  $dbh->ora_can_taf();

If you try to set up a callback without it being enabled DBD::Oracle
will croak.

NOTE: Currently, you must enable TAF during DBI's connect. However
once enabled you can change the TAF settings.

It is outside the scope of this document to go through all of the
possible TAF situations you might want to set up but here is a simple
example:

The TNS entry for the instance has had the following added to the
CONNECT_DATA section

   (FAILOVER_MODE=
               (TYPE=select)
               (METHOD=basic)
               (RETRIES=10)
               (DELAY=10))

You will also have to create your own perl function that will be
called from the client.  You can name it anything you want and it will
always be passed two parameters, the failover event value and the
failover type.  You can also set a sleep value in case of failover
error and the OCI client will sleep for the specified seconds before it
attempts another event.

  use DBD::Oracle(qw(:ora_fail_over));
  #import the ora fail over constants

  #set up TAF on the connection
  # NOTE since DBD::Oracle uses call_pv you may need to pass a full
  # name space as the function e.g., 'main::handle_taf'
  # NOTE from 1.49_00 ora_taf_function can accept a code ref as well
  #      as a sub name as it now uses call_sv
  my $dbh = DBI->connect('dbi:Oracle:XE', 'hr', 'hr',
                         {ora_taf_function => 'main::handle_taf'});

  #create the perl TAF event function

  sub handle_taf {
    # NOTE from 1.49_00 the $dbh handle was passed to your callback
    my ($fo_event,$fo_type, $dbh) = @_;
    if ($fo_event == OCI_FO_BEGIN){

      print " Instance Unavailable Please stand by!! \n";
      printf(" Your TAF type is %s \n",
                       (($fo_type==OCI_FO_NONE) ? "NONE"
                       :($fo_type==OCI_FO_SESSION) ? "SESSION"
                       :($fo_type==OCI_FO_SELECT) ? "SELECT"
                       : "UNKNOWN!"));
    }
    elsif ($fo_event == OCI_FO_ABORT){
       print " Failover aborted. Failover will not take place.\n";
    }
    elsif ($fo_event == OCI_FO_END){
       printf(" Failover ended ...Resuming your %s\n",(($fo_type==OCI_FO_NONE) ? "NONE"
                                                      :($fo_type==OCI_FO_SESSION) ? "SESSION"
                                                      :($fo_type==OCI_FO_SELECT) ? "SELECT"
                                                      : "UNKNOWN!"));
    }
    elsif ($fo_event == OCI_FO_REAUTH){
       print " Failed over user. Resuming services\n";
    }
    elsif ($fo_event == OCI_FO_ERROR){
       print " Failover error ...\n";
       sleep 5;                 # sleep before having another go
       return OCI_FO_RETRY;
    }
    else {
       printf(" Bad Failover Event: %d.\n",  $fo_event);

    }
    return 0;
  }

The TAF types are as follows

  OCI_FO_SESSION indicates the user has requested only session failover.
  OCI_FO_SELECT indicates the user has requested select failover.
  OCI_FO_NONE indicates the user has not requested a failover type.
  OCI_FO_TXNAL indicates the user has requested a transaction failover.

The TAF events are as follows

  OCI_FO_BEGIN indicates that failover has detected a lost connection and failover is starting.
  OCI_FO_END   indicates successful completion of failover.
  OCI_FO_ABORT indicates that failover was unsuccessful, and there is no option of retrying.
  OCI_FO_ERROR also indicates that failover was unsuccessful, but it gives the application the opportunity to handle the error and retry failover.
  OCI_FO_REAUTH indicates that you have multiple authentication handles and failover has occurred after the original authentication. It indicates that a user handle has been re-authenticated. To find out which, the application checks the OCI_ATTR_SESSION attribute of the service context handle (which is the first parameter).

=head3 Connect Attributes

=head4 ora_ncs_buff_mtpl

You can customize the size of the buffer when selecting LOBs with
the built-in AUTO Lob.  The default value is 4 which is probably
excessive for most situations but is needed for backward
compatibility.  If you not converting between a NCS on the DB and the
Client then you might want to set this to 1 to reduce memory usage.

This value can also be specified with the C<ORA_DBD_NCS_BUFFER>
environment variable in which case it sets the value at the connect
stage.

=head4 ora_drcp

For Oracle 11.2 or greater.
