    ui,
    repo,
    source=None,
    rev=None,
    num=None,
    id=None,
    branch=None,
    tags=None,
    bookmarks=None,
    **opts
):
    """identify the working directory or specified revision

    Print a summary identifying the repository state at REV using one or
    two parent hash identifiers, followed by a "+" if the working
    directory has uncommitted changes, the branch name (if not default),
    a list of tags, and a list of bookmarks.

    When REV is not given, print a summary of the current state of the
    repository including the working directory. Specify -r. to get information
    of the working directory parent without scanning uncommitted changes.

    Specifying a path to a repository root or Mercurial bundle will
    cause lookup to operate on that repository/bundle.

    .. container:: verbose

      Template:

      The following keywords are supported in addition to the common template
      keywords and functions. See also :hg:`help templates`.

      :dirty:   String. Character ``+`` denoting if the working directory has
                uncommitted changes.
      :id:      String. One or two nodes, optionally followed by ``+``.
      :parents: List of strings. Parent nodes of the changeset.

      Examples:

      - generate a build identifier for the working directory::

          hg id --id > build-id.dat

      - find the revision corresponding to a tag::

          hg id -n -r 1.3

      - check the most recent revision of a remote repository::

          hg id -r tip https://www.mercurial-scm.org/repo/hg/

    See :hg:`log` for generating more information about specific revisions,
    including full hash identifiers.

    Returns 0 if successful.
    """

    opts = pycompat.byteskwargs(opts)
    if not repo and not source:
        raise error.InputError(
            _(b"there is no Mercurial repository here (.hg not found)")
        )

    default = not (num or id or branch or tags or bookmarks)
    output = []
    revs = []

    peer = None
    try:
        if source:
            source, branches = urlutil.get_unique_pull_path(
                b'identify', repo, ui, source
            )
            # only pass ui when no repo
            peer = hg.peer(repo or ui, opts, source)
            repo = peer.local()
            revs, checkout = hg.addbranchrevs(repo, peer, branches, None)

        fm = ui.formatter(b'identify', opts)
        fm.startitem()

        if not repo:
            if num or branch or tags:
                raise error.InputError(
                    _(b"can't query remote revision number, branch, or tags")
                )
            if not rev and revs:
                rev = revs[0]
            if not rev:
                rev = b"tip"

            remoterev = peer.lookup(rev)
            hexrev = fm.hexfunc(remoterev)
            if default or id:
                output = [hexrev]
            fm.data(id=hexrev)

            @util.cachefunc
            def getbms():
                bms = []

                if b'bookmarks' in peer.listkeys(b'namespaces'):
                    hexremoterev = hex(remoterev)
                    bms = [
                        bm
                        for bm, bmr in peer.listkeys(b'bookmarks').items()
                        if bmr == hexremoterev
                    ]

                return sorted(bms)

            if fm.isplain():
                if bookmarks:
                    output.extend(getbms())
                elif default and not ui.quiet:
                    # multiple bookmarks for a single parent separated by '/'
                    bm = b'/'.join(getbms())
                    if bm:
                        output.append(bm)
            else:
                fm.data(node=hex(remoterev))
                if bookmarks or b'bookmarks' in fm.datahint():
                    fm.data(bookmarks=fm.formatlist(getbms(), name=b'bookmark'))
        else:
            if rev:
                repo = scmutil.unhidehashlikerevs(repo, [rev], b'nowarn')
            ctx = logcmdutil.revsingle(repo, rev, None)

            if ctx.rev() is None:
                ctx = repo[None]
                parents = ctx.parents()
                taglist = []
                for p in parents:
                    taglist.extend(p.tags())

                dirty = b""
                if ctx.dirty(missing=True, merge=False, branch=False):
                    dirty = b'+'
                fm.data(dirty=dirty)

                hexoutput = [fm.hexfunc(p.node()) for p in parents]
                if default or id:
                    output = [b"%s%s" % (b'+'.join(hexoutput), dirty)]
                fm.data(id=b"%s%s" % (b'+'.join(hexoutput), dirty))

                if num:
                    numoutput = [b"%d" % p.rev() for p in parents]
                    output.append(b"%s%s" % (b'+'.join(numoutput), dirty))

                fm.data(
                    parents=fm.formatlist(
                        [fm.hexfunc(p.node()) for p in parents], name=b'node'
                    )
                )
            else:
                hexoutput = fm.hexfunc(ctx.node())
                if default or id:
                    output = [hexoutput]
                fm.data(id=hexoutput)

                if num:
                    output.append(pycompat.bytestr(ctx.rev()))
                taglist = ctx.tags()

            if default and not ui.quiet:
                b = ctx.branch()
                if b != b'default':
                    output.append(b"(%s)" % b)

                # multiple tags for a single parent separated by '/'
                t = b'/'.join(taglist)
                if t:
                    output.append(t)

                # multiple bookmarks for a single parent separated by '/'
                bm = b'/'.join(ctx.bookmarks())
                if bm:
                    output.append(bm)
            else:
                if branch:
                    output.append(ctx.branch())

                if tags:
                    output.extend(taglist)

                if bookmarks:
                    output.extend(ctx.bookmarks())

            fm.data(node=ctx.hex())
            fm.data(branch=ctx.branch())
            fm.data(tags=fm.formatlist(taglist, name=b'tag', sep=b':'))
            fm.data(bookmarks=fm.formatlist(ctx.bookmarks(), name=b'bookmark'))
            fm.context(ctx=ctx)

        fm.plain(b"%s\n" % b' '.join(output))
        fm.end()
    finally:
        if peer:
            peer.close()


@command(
    b'import|patch',
    [
        (
            b'p',
            b'strip',
            1,
            _(
                b'directory strip option for patch. This has the same '
                b'meaning as the corresponding patch option'
            ),
            _(b'NUM'),
        ),
        (b'b', b'base', b'', _(b'base path (DEPRECATED)'), _(b'PATH')),
        (b'', b'secret', None, _(b'use the secret phase for committing')),
        (b'e', b'edit', False, _(b'invoke editor on commit messages')),
        (
            b'f',
            b'force',
            None,
            _(b'skip check for outstanding uncommitted changes (DEPRECATED)'),
        ),
        (
            b'',
            b'no-commit',
            None,
            _(b"don't commit, just update the working directory"),
        ),
        (
            b'',
            b'bypass',
            None,
            _(b"apply patch without touching the working directory"),
        ),
        (b'', b'partial', None, _(b'commit even if some hunks fail')),
        (b'', b'exact', None, _(b'abort if patch would apply lossily')),
        (b'', b'prefix', b'', _(b'apply patch to subdirectory'), _(b'DIR')),
        (
            b'',
            b'import-branch',
            None,
            _(b'use any branch information in patch (implied by --exact)'),
        ),
    ]
    + commitopts
    + commitopts2
    + similarityopts,
    _(b'[OPTION]... PATCH...'),
    helpcategory=command.CATEGORY_IMPORT_EXPORT,
)
def import_(ui, repo, patch1=None, *patches, **opts):
    """import an ordered set of patches

    Import a list of patches and commit them individually (unless
    --no-commit is specified).

    To read a patch from standard input (stdin), use "-" as the patch
    name. If a URL is specified, the patch will be downloaded from
    there.

    Import first applies changes to the working directory (unless
    --bypass is specified), import will abort if there are outstanding
    changes.

    Use --bypass to apply and commit patches directly to the
    repository, without affecting the working directory. Without
    --exact, patches will be applied on top of the working directory
    parent revision.

    You can import a patch straight from a mail message. Even patches
    as attachments work (to use the body part, it must have type
    text/plain or text/x-patch). From and Subject headers of email
    message are used as default committer and commit message. All
    text/plain body parts before first diff are added to the commit
    message.

    If the imported patch was generated by :hg:`export`, user and
    description from patch override values from message headers and
    body. Values given on command line with -m/--message and -u/--user
    override these.

    If --exact is specified, import will set the working directory to
    the parent of each patch before applying it, and will abort if the
    resulting changeset has a different ID than the one recorded in
    the patch. This will guard against various ways that portable
    patch formats and mail systems might fail to transfer Mercurial
    data or metadata. See :hg:`bundle` for lossless transmission.

    Use --partial to ensure a changeset will be created from the patch
    even if some hunks fail to apply. Hunks that fail to apply will be
    written to a <target-file>.rej file. Conflicts can then be resolved
    by hand before :hg:`commit --amend` is run to update the created
    changeset. This flag exists to let people import patches that
    partially apply without losing the associated metadata (author,
    date, description, ...).

    .. note::

       When no hunks apply cleanly, :hg:`import --partial` will create
       an empty changeset, importing only the patch metadata.

    With -s/--similarity, hg will attempt to discover renames and
    copies in the patch in the same way as :hg:`addremove`.

    It is possible to use external patch programs to perform the patch
    by setting the ``ui.patch`` configuration option. For the default
    internal tool, the fuzz can also be configured via ``patch.fuzz``.
    See :hg:`help config` for more information about configuration
    files and how to use these options.

    See :hg:`help dates` for a list of formats valid for -d/--date.

    .. container:: verbose

      Examples:

      - import a traditional patch from a website and detect renames::

          hg import -s 80 http://example.com/bugfix.patch

      - import a changeset from an hgweb server::

          hg import https://www.mercurial-scm.org/repo/hg/rev/5ca8c111e9aa

      - import all the patches in an Unix-style mbox::

          hg import incoming-patches.mbox

      - import patches from stdin::

          hg import -

      - attempt to exactly restore an exported changeset (not always
        possible)::

          hg import --exact proposed-fix.patch

      - use an external tool to apply a patch which is too fuzzy for
        the default internal tool.

          hg import --config ui.patch="patch --merge" fuzzy.patch

      - change the default fuzzing from 2 to a less strict 7

          hg import --config ui.fuzz=7 fuzz.patch

    Returns 0 on success, 1 on partial success (see --partial).
    """

    cmdutil.check_incompatible_arguments(
        opts, 'no_commit', ['bypass', 'secret']
    )
    cmdutil.check_incompatible_arguments(opts, 'exact', ['edit', 'prefix'])
    opts = pycompat.byteskwargs(opts)
    if not patch1:
        raise error.InputError(_(b'need at least one patch to import'))

    patches = (patch1,) + patches

    date = opts.get(b'date')
    if date:
        opts[b'date'] = dateutil.parsedate(date)

    exact = opts.get(b'exact')
    update = not opts.get(b'bypass')
    try:
        sim = float(opts.get(b'similarity') or 0)
    except ValueError:
        raise error.InputError(_(b'similarity must be a number'))
    if sim < 0 or sim > 100:
        raise error.InputError(_(b'similarity must be between 0 and 100'))
    if sim and not update:
        raise error.InputError(_(b'cannot use --similarity with --bypass'))

    base = opts[b"base"]
    msgs = []
    ret = 0

    with repo.wlock():
        if update:
            cmdutil.checkunfinished(repo)
            if exact or not opts.get(b'force'):
                cmdutil.bailifchanged(repo)

        if not opts.get(b'no_commit'):
            lock = repo.lock
            tr = lambda: repo.transaction(b'import')
            dsguard = util.nullcontextmanager
        else:
            lock = util.nullcontextmanager
            tr = util.nullcontextmanager
            dsguard = lambda: dirstateguard.dirstateguard(repo, b'import')
        with lock(), tr(), dsguard():
            parents = repo[None].parents()
            for patchurl in patches:
                if patchurl == b'-':
                    ui.status(_(b'applying patch from stdin\n'))
                    patchfile = ui.fin
                    patchurl = b'stdin'  # for error message
                else:
                    patchurl = os.path.join(base, patchurl)
                    ui.status(_(b'applying %s\n') % patchurl)
                    patchfile = hg.openpath(ui, patchurl, sendaccept=False)

                haspatch = False
                for hunk in patch.split(patchfile):
                    with patch.extract(ui, hunk) as patchdata:
                        msg, node, rej = cmdutil.tryimportone(
                            ui, repo, patchdata, parents, opts, msgs, hg.clean
                        )
                    if msg:
                        haspatch = True
                        ui.note(msg + b'\n')
                    if update or exact:
                        parents = repo[None].parents()
                    else:
                        parents = [repo[node]]
                    if rej:
                        ui.write_err(_(b"patch applied partially\n"))
                        ui.write_err(
                            _(
                                b"(fix the .rej files and run "
                                b"`hg commit --amend`)\n"
                            )
                        )
                        ret = 1
                        break

                if not haspatch:
                    raise error.InputError(_(b'%s: no diffs found') % patchurl)

            if msgs:
                repo.savecommitmessage(b'\n* * *\n'.join(msgs))
        return ret


@command(
    b'incoming|in',
    [
        (
            b'f',
            b'force',
            None,
            _(b'run even if remote repository is unrelated'),
        ),
        (b'n', b'newest-first', None, _(b'show newest record first')),
        (b'', b'bundle', b'', _(b'file to store the bundles into'), _(b'FILE')),
        (
            b'r',
            b'rev',
            [],
            _(b'a remote changeset intended to be added'),
            _(b'REV'),
        ),
        (b'B', b'bookmarks', False, _(b"compare bookmarks")),
        (
            b'b',
            b'branch',
            [],
            _(b'a specific branch you would like to pull'),
            _(b'BRANCH'),
        ),
    ]
    + logopts
    + remoteopts
    + subrepoopts,
    _(b'[-p] [-n] [-M] [-f] [-r REV]... [--bundle FILENAME] [SOURCE]'),
    helpcategory=command.CATEGORY_REMOTE_REPO_MANAGEMENT,
)
def incoming(ui, repo, source=b"default", **opts):
    """show new changesets found in source

    Show new changesets found in the specified path/URL or the default
    pull location. These are the changesets that would have been pulled
    by :hg:`pull` at the time you issued this command.

    See pull for valid source format details.

    .. container:: verbose

      With -B/--bookmarks, the result of bookmark comparison between
      local and remote repositories is displayed. With -v/--verbose,
      status is also displayed for each bookmark like below::

        BM1               01234567890a added
        BM2               1234567890ab advanced
        BM3               234567890abc diverged
        BM4               34567890abcd changed

      The action taken locally when pulling depends on the
      status of each bookmark:

      :``added``: pull will create it
      :``advanced``: pull will update it
      :``diverged``: pull will create a divergent bookmark
      :``changed``: result depends on remote changesets

      From the point of view of pulling behavior, bookmark
      existing only in the remote repository are treated as ``added``,
      even if it is in fact locally deleted.

    .. container:: verbose

      For remote repository, using --bundle avoids downloading the
      changesets twice if the incoming is followed by a pull.

      Examples:

      - show incoming changes with patches and full description::

          hg incoming -vp

      - show incoming changes excluding merges, store a bundle::

          hg in -vpM --bundle incoming.hg
          hg pull incoming.hg

      - briefly list changes inside a bundle::

          hg in changes.hg -T "{desc|firstline}\\n"

    Returns 0 if there are incoming changes, 1 otherwise.
    """
    opts = pycompat.byteskwargs(opts)
    if opts.get(b'graph'):
        logcmdutil.checkunsupportedgraphflags([], opts)

        def display(other, chlist, displayer):
            revdag = logcmdutil.graphrevs(other, chlist, opts)
            logcmdutil.displaygraph(
                ui, repo, revdag, displayer, graphmod.asciiedges
            )

        hg._incoming(display, lambda: 1, ui, repo, source, opts, buffered=True)
        return 0

    cmdutil.check_incompatible_arguments(opts, b'subrepos', [b'bundle'])

    if opts.get(b'bookmarks'):
        srcs = urlutil.get_pull_paths(repo, ui, [source])
        for path in srcs:
            source, branches = urlutil.parseurl(
                path.rawloc, opts.get(b'branch')
            )
            other = hg.peer(repo, opts, source)
            try:
                if b'bookmarks' not in other.listkeys(b'namespaces'):
                    ui.warn(_(b"remote doesn't support bookmarks\n"))
                    return 0
                ui.pager(b'incoming')
                ui.status(
                    _(b'comparing with %s\n') % urlutil.hidepassword(source)
                )
                return bookmarks.incoming(
                    ui, repo, other, mode=path.bookmarks_mode
                )
            finally:
                other.close()

    return hg.incoming(ui, repo, source, opts)


@command(
    b'init',
    remoteopts,
    _(b'[-e CMD] [--remotecmd CMD] [DEST]'),
    helpcategory=command.CATEGORY_REPO_CREATION,
    helpbasic=True,
    norepo=True,
)
def init(ui, dest=b".", **opts):
    """create a new repository in the given directory

    Initialize a new repository in the given directory. If the given
    directory does not exist, it will be created.

    If no directory is given, the current directory is used.

    It is possible to specify an ``ssh://`` URL as the destination.
    See :hg:`help urls` for more information.

    Returns 0 on success.
    """
    opts = pycompat.byteskwargs(opts)
    path = urlutil.get_clone_path(ui, dest)[1]
    peer = hg.peer(ui, opts, path, create=True)
    peer.close()


@command(
    b'locate',
    [
        (
            b'r',
            b'rev',
            b'',
            _(b'search the repository as it is in REV'),
            _(b'REV'),
        ),
        (
            b'0',
            b'print0',
            None,
            _(b'end filenames with NUL, for use with xargs'),
        ),
        (
            b'f',
            b'fullpath',
            None,
            _(b'print complete paths from the filesystem root'),
        ),
    ]
    + walkopts,
    _(b'[OPTION]... [PATTERN]...'),
    helpcategory=command.CATEGORY_WORKING_DIRECTORY,
)
def locate(ui, repo, *pats, **opts):
    """locate files matching specific patterns (DEPRECATED)

    Print files under Mercurial control in the working directory whose
    names match the given patterns.

    By default, this command searches all directories in the working
    directory. To search just the current directory and its
    subdirectories, use "--include .".

    If no patterns are given to match, this command prints the names
    of all files under Mercurial control in the working directory.

    If you want to feed the output of this command into the "xargs"
    command, use the -0 option to both this command and "xargs". This
    will avoid the problem of "xargs" treating single filenames that
    contain whitespace as multiple filenames.

    See :hg:`help files` for a more versatile command.

    Returns 0 if a match is found, 1 otherwise.
    """
    opts = pycompat.byteskwargs(opts)
    if opts.get(b'print0'):
        end = b'\0'
    else:
        end = b'\n'
    ctx = logcmdutil.revsingle(repo, opts.get(b'rev'), None)

    ret = 1
    m = scmutil.match(
        ctx, pats, opts, default=b'relglob', badfn=lambda x, y: False
    )

    ui.pager(b'locate')
    if ctx.rev() is None:
        # When run on the working copy, "locate" includes removed files, so
        # we get the list of files from the dirstate.
        filesgen = sorted(repo.dirstate.matches(m))
    else:
        filesgen = ctx.matches(m)
    uipathfn = scmutil.getuipathfn(repo, legacyrelativevalue=bool(pats))
    for abs in filesgen:
        if opts.get(b'fullpath'):
            ui.write(repo.wjoin(abs), end)
        else:
            ui.write(uipathfn(abs), end)
        ret = 0

    return ret


@command(
    b'log|history',
    [
        (
            b'f',
            b'follow',
            None,
            _(
                b'follow changeset history, or file history across copies and renames'
            ),
        ),
        (
            b'',
            b'follow-first',
            None,
            _(b'only follow the first parent of merge changesets (DEPRECATED)'),
        ),
        (
            b'd',
            b'date',
            b'',
            _(b'show revisions matching date spec'),
            _(b'DATE'),
        ),
        (b'C', b'copies', None, _(b'show copied files')),
        (
            b'k',
            b'keyword',
            [],
            _(b'do case-insensitive search for a given text'),
            _(b'TEXT'),
        ),
        (
            b'r',
            b'rev',
            [],
            _(b'revisions to select or follow from'),
            _(b'REV'),
        ),
        (
            b'L',
            b'line-range',
            [],
            _(b'follow line range of specified file (EXPERIMENTAL)'),
            _(b'FILE,RANGE'),
        ),
        (
            b'',
            b'removed',
            None,
            _(b'include revisions where files were removed'),
        ),
        (
            b'm',
            b'only-merges',
            None,
            _(b'show only merges (DEPRECATED) (use -r "merge()" instead)'),
        ),
        (b'u', b'user', [], _(b'revisions committed by user'), _(b'USER')),
        (
            b'',
            b'only-branch',
            [],
            _(
                b'show only changesets within the given named branch (DEPRECATED)'
            ),
            _(b'BRANCH'),
        ),
        (
            b'b',
            b'branch',
            [],
            _(b'show changesets within the given named branch'),
            _(b'BRANCH'),
        ),
        (
            b'B',
            b'bookmark',
            [],
            _(b"show changesets within the given bookmark"),
            _(b'BOOKMARK'),
        ),
        (
            b'P',
            b'prune',
            [],
            _(b'do not display revision or any of its ancestors'),
            _(b'REV'),
        ),
    ]
    + logopts
    + walkopts,
    _(b'[OPTION]... [FILE]'),
    helpcategory=command.CATEGORY_CHANGE_NAVIGATION,
    helpbasic=True,
    inferrepo=True,
    intents={INTENT_READONLY},
)
def log(ui, repo, *pats, **opts):
    """show revision history of entire repository or files

    Print the revision history of the specified files or the entire
    project.

    If no revision range is specified, the default is ``tip:0`` unless
    --follow is set.

    File history is shown without following rename or copy history of
    files. Use -f/--follow with a filename to follow history across
    renames and copies. --follow without a filename will only show
    ancestors of the starting revisions. The starting revisions can be
    specified by -r/--rev, which default to the working directory parent.

    By default this command prints revision number and changeset id,
    tags, non-trivial parents, user, date and time, and a summary for
    each commit. When the -v/--verbose switch is used, the list of
    changed files and full commit message are shown.

    With --graph the revisions are shown as an ASCII art DAG with the most
    recent changeset at the top.
    'o' is a changeset, '@' is a working directory parent, '%' is a changeset
    involved in an unresolved merge conflict, '_' closes a branch,
    'x' is obsolete, '*' is unstable, and '+' represents a fork where the
    changeset from the lines below is a parent of the 'o' merge on the same
    line.
    Paths in the DAG are represented with '|', '/' and so forth. ':' in place
    of a '|' indicates one or more revisions in a path are omitted.

    .. container:: verbose

       Use -L/--line-range FILE,M:N options to follow the history of lines
       from M to N in FILE. With -p/--patch only diff hunks affecting
       specified line range will be shown. This option requires --follow;
       it can be specified multiple times. Currently, this option is not
       compatible with --graph. This option is experimental.

    .. note::

       :hg:`log --patch` may generate unexpected diff output for merge
       changesets, as it will only compare the merge changeset against
       its first parent. Also, only files different from BOTH parents
       will appear in files:.

    .. note::

       For performance reasons, :hg:`log FILE` may omit duplicate changes
       made on branches and will not show removals or mode changes. To
       see all such changes, use the --removed switch.

    .. container:: verbose

       .. note::

          The history resulting from -L/--line-range options depends on diff
          options; for instance if white-spaces are ignored, respective changes
          with only white-spaces in specified line range will not be listed.

    .. container:: verbose

      Some examples:

      - changesets with full descriptions and file lists::

          hg log -v

      - changesets ancestral to the working directory::

          hg log -f

      - last 10 commits on the current branch::

          hg log -l 10 -b .

      - changesets showing all modifications of a file, including removals::

          hg log --removed file.c

      - all changesets that touch a directory, with diffs, excluding merges::

          hg log -Mp lib/

      - all revision numbers that match a keyword::

          hg log -k bug --template "{rev}\\n"

      - the full hash identifier of the working directory parent::

          hg log -r . --template "{node}\\n"

      - list available log templates::

          hg log -T list

      - check if a given changeset is included in a tagged release::

          hg log -r "a21ccf and ancestor(1.9)"

      - find all changesets by some user in a date range::

          hg log -k alice -d "may 2008 to jul 2008"

      - summary of all changesets after the last tag::

          hg log -r "last(tagged())::" --template "{desc|firstline}\\n"

      - changesets touching lines 13 to 23 for file.c::

          hg log -L file.c,13:23

      - changesets touching lines 13 to 23 for file.c and lines 2 to 6 of
        main.c with patch::

          hg log -L file.c,13:23 -L main.c,2:6 -p

    See :hg:`help dates` for a list of formats valid for -d/--date.

    See :hg:`help revisions` for more about specifying and ordering
    revisions.

    See :hg:`help templates` for more about pre-packaged styles and
    specifying custom templates. The default template used by the log
    command can be customized via the ``command-templates.log`` configuration
    setting.

    Returns 0 on success.

    """
    opts = pycompat.byteskwargs(opts)
    linerange = opts.get(b'line_range')

    if linerange and not opts.get(b'follow'):
        raise error.InputError(_(b'--line-range requires --follow'))

    if linerange and pats:
        # TODO: take pats as patterns with no line-range filter
        raise error.InputError(
            _(b'FILE arguments are not compatible with --line-range option')
        )

    repo = scmutil.unhidehashlikerevs(repo, opts.get(b'rev'), b'nowarn')
    walk_opts = logcmdutil.parseopts(ui, pats, opts)
    revs, differ = logcmdutil.getrevs(repo, walk_opts)
    if linerange:
        # TODO: should follow file history from logcmdutil._initialrevs(),
        # then filter the result by logcmdutil._makerevset() and --limit
        revs, differ = logcmdutil.getlinerangerevs(repo, revs, opts)

    getcopies = None
    if opts.get(b'copies'):
        endrev = None
        if revs:
            endrev = revs.max() + 1
        getcopies = scmutil.getcopiesfn(repo, endrev=endrev)

    ui.pager(b'log')
    displayer = logcmdutil.changesetdisplayer(
        ui, repo, opts, differ, buffered=True
    )
    if opts.get(b'graph'):
        displayfn = logcmdutil.displaygraphrevs
    else:
        displayfn = logcmdutil.displayrevs
    displayfn(ui, repo, revs, displayer, getcopies)


@command(
    b'manifest',
    [
        (b'r', b'rev', b'', _(b'revision to display'), _(b'REV')),
        (b'', b'all', False, _(b"list files from all revisions")),
    ]
    + formatteropts,
    _(b'[-r REV]'),
    helpcategory=command.CATEGORY_MAINTENANCE,
    intents={INTENT_READONLY},
)
def manifest(ui, repo, node=None, rev=None, **opts):
    """output the current or given revision of the project manifest

    Print a list of version controlled files for the given revision.
    If no revision is given, the first parent of the working directory
    is used, or the null revision if no revision is checked out.

    With -v, print file permissions, symlink and executable bits.
    With --debug, print file revision hashes.

    If option --all is specified, the list of all files from all revisions
    is printed. This includes deleted and renamed files.

    Returns 0 on success.
    """
    opts = pycompat.byteskwargs(opts)
    fm = ui.formatter(b'manifest', opts)

    if opts.get(b'all'):
        if rev or node:
            raise error.InputError(_(b"can't specify a revision with --all"))

        res = set()
        for rev in repo:
            ctx = repo[rev]
            res |= set(ctx.files())

        ui.pager(b'manifest')
        for f in sorted(res):
            fm.startitem()
            fm.write(b"path", b'%s\n', f)
        fm.end()
        return

    if rev and node:
        raise error.InputError(_(b"please specify just one revision"))

    if not node:
        node = rev

    char = {b'l': b'@', b'x': b'*', b'': b'', b't': b'd'}
    mode = {b'l': b'644', b'x': b'755', b'': b'644', b't': b'755'}
    if node:
        repo = scmutil.unhidehashlikerevs(repo, [node], b'nowarn')
    ctx = logcmdutil.revsingle(repo, node)
    mf = ctx.manifest()
    ui.pager(b'manifest')
    for f in ctx:
        fm.startitem()
        fm.context(ctx=ctx)
        fl = ctx[f].flags()
        fm.condwrite(ui.debugflag, b'hash', b'%s ', hex(mf[f]))
        fm.condwrite(ui.verbose, b'mode type', b'%s %1s ', mode[fl], char[fl])
        fm.write(b'path', b'%s\n', f)
    fm.end()
