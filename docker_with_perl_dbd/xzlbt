
Upgraded from version 3.07_01 to 3.08.

=item C<Module::Build>

Upgraded from version 0.2808_01 to 0.3603.

=item C<Module::CoreList>

Upgraded from version 2.12 to 2.29.

=item C<Module::Load>

Upgraded from version 0.12 to 0.16.

=item C<Module::Load::Conditional>

Upgraded from version 0.22 to 0.34.

=item C<Module::Loaded>

Upgraded from version 0.01 to 0.06.

=item C<Module::Pluggable>

Upgraded from version 3.6 to 3.9.

=item C<Net::Ping>

Upgraded from version 2.33 to 2.36.

=item C<NEXT>

Upgraded from version 0.60_01 to 0.64.

=item C<Object::Accessor>

Upgraded from version 0.32 to 0.36.

=item C<Package::Constants>

Upgraded from version 0.01 to 0.02.

=item C<PerlIO>

Upgraded from version 1.04 to 1.06.

=item C<Pod::Parser>

Upgraded from version 1.35 to 1.37.

=item C<Pod::Perldoc>

Upgraded from version 3.14_02 to 3.15_02.

=item C<Pod::Plainer>

Upgraded from version 0.01 to 1.02.

NOTE: C<Pod::Plainer> is deprecated and may be removed from a future
version of Perl.

=item C<Pod::Simple>

Upgraded from version 3.05 to 3.13.

=item C<Safe>

Upgraded from version 2.12 to 2.22.

=item C<SelfLoader>

Upgraded from version 1.11 to 1.17.

=item C<Storable>

Upgraded from version 2.18 to 2.22.

=item C<Switch>

Upgraded from version 2.13 to 2.16.

NOTE: C<Switch> is deprecated and may be removed from a future version
of Perl.

=item C<Sys::Syslog>

Upgraded from version 0.22 to 0.27.

=item C<Term::ANSIColor>

Upgraded from version 1.12 to 2.02.

=item C<Term::UI>

Upgraded from version 0.18 to 0.20.

=item C<Test>

Upgraded from version 1.25 to 1.25_02.

=item C<Test::Harness>

Upgraded from version 2.64 to 3.17.

=item C<Test::Simple>

Upgraded from version 0.72 to 0.94.

=item C<Text::Balanced>

Upgraded from version 2.0.0 to 2.02.

=item C<Text::ParseWords>

Upgraded from version 3.26 to 3.27.

=item C<Text::Soundex>

Upgraded from version 3.03 to 3.03_01.

=item C<Thread::Queue>

Upgraded from version 2.00 to 2.11.

=item C<Thread::Semaphore>

Upgraded from version 2.01 to 2.09.

=item C<Tie::RefHash>

Upgraded from version 1.37 to 1.38.

=item C<Time::HiRes>

Upgraded from version 1.9711 to 1.9719.

=item C<Time::Local>

Upgraded from version 1.18 to 1.1901_01.

=item C<Time::Piece>

Upgraded from version 1.12 to 1.15.

=item C<Unicode::Collate>

Upgraded from version 0.52 to 0.52_01.

=item C<Unicode::Normalize>

Upgraded from version 1.02 to 1.03.

=item C<Win32>

Upgraded from version 0.34 to 0.39.

=item C<Win32API::File>

Upgraded from version 0.1001_01 to 0.1101.

=item C<XSLoader>

Upgraded from version 0.08 to 0.10.

=back

=head2 Removed Modules and Pragmata

=over 4

=item C<attrs>

Removed from the Perl core.  Prior version was 1.02.

=item C<CPAN::API::HOWTO>

Removed from the Perl core.  Prior version was 'undef'.

=item C<CPAN::DeferedCode>

Removed from the Perl core.  Prior version was 5.50.

=item C<CPANPLUS::inc>

Removed from the Perl core.  Prior version was 'undef'.

=item C<DCLsym>

Removed from the Perl core.  Prior version was 1.03.

=item C<ExtUtils::MakeMaker::bytes>

Removed from the Perl core.  Prior version was 6.42.

=item C<ExtUtils::MakeMaker::vmsish>

Removed from the Perl core.  Prior version was 6.42.

=item C<Stdio>

Removed from the Perl core.  Prior version was 2.3.

=item C<Test::Harness::Assert>

Removed from the Perl core.  Prior version was 0.02.

=item C<Test::Harness::Iterator>

Removed from the Perl core.  Prior version was 0.02.

=item C<Test::Harness::Point>

Removed from the Perl core.  Prior version was 0.01.

=item C<Test::Harness::Results>

Removed from the Perl core.  Prior version was 0.01.

=item C<Test::Harness::Straps>

Removed from the Perl core.  Prior version was 0.26_01.

=item C<Test::Harness::Util>

Removed from the Perl core.  Prior version was 0.01.

=item C<XSSymSet>

Removed from the Perl core.  Prior version was 1.1.

=back

=head2 Deprecated Modules and Pragmata

See L</Deprecated Modules> above.


=head1 Documentation

=head2 New Documentation

=over 4

=item *

L<perlhaiku> contains instructions on how to build perl for the Haiku
platform.

=item *

L<perlmroapi> describes the new interface for pluggable Method Resolution
Orders.

=item *

L<perlperf>, by Richard Foley, provides an introduction to the use of
performance and optimization techniques which can be used with particular
reference to perl programs.

=item *

L<perlrepository> describes how to access the perl source using the I<git>
version control system.

=item *

L<perlpolicy> extends the "Social contract about contributed modules" into
the beginnings of a document on Perl porting policies.

=back

=head2 Changes to Existing Documentation


=over

=item *

The various large F<Changes*> files (which listed every change made
to perl over the last 18 years) have been removed, and replaced by a
small file, also called F<Changes>, which just explains how that same
information may be extracted from the git version control system.

=item *

F<Porting/patching.pod> has been deleted, as it mainly described
interacting with the old Perforce-based repository, which is now obsolete.
Information still relevant has been moved to L<perlrepository>.

=item *

The syntax C<unless (EXPR) BLOCK else BLOCK> is now documented as valid,
as is the syntax C<unless (EXPR) BLOCK elsif (EXPR) BLOCK ... else
BLOCK>, although actually using the latter may not be the best idea for
the readability of your source code.

=item *

Documented -X overloading.

=item *

Documented that C<when()> treats specially most of the filetest operators

=item *

Documented C<when> as a syntax modifier.

=item *

Eliminated "Old Perl threads tutorial", which described 5005 threads.

F<pod/perlthrtut.pod> is the same material reworked for ithreads.

=item *

Correct previous documentation: v-strings are not deprecated

With version objects, we need them to use MODULE VERSION syntax. This
patch removes the deprecation notice.

=item *

Security contact information is now part of L<perlsec>.

=item *

A significant fraction of the core documentation has been updated to
clarify the behavior of Perl's Unicode handling.

Much of the remaining core documentation has been reviewed and edited
for clarity, consistent use of language, and to fix the spelling of Tom
Christiansen's name.

=item *

The Pod specification (L<perlpodspec>) has been updated to bring the
specification in line with modern usage already supported by most Pod
systems. A parameter string may now follow the format name in a
"begin/end" region. Links to URIs with a text description are now
allowed. The usage of C<LE<lt>"section"E<gt>> has been marked as
deprecated.

=item *

L<if.pm|if> has been documented in L<perlfunc/use> as a means to get
conditional loading of modules despite the implicit BEGIN block around
C<use>.

=item *

The documentation for C<$1> in perlvar.pod has been clarified.

=item *

C<\N{U+I<code point>}> is now documented.

=back

=head1 Selected Performance Enhancements

=over 4

=item *

A new internal cache means that C<isa()> will often be faster.

=item *

The implementation of C<C3> Method Resolution Order has been
optimised - linearisation for classes with single inheritance is 40%
faster. Performance for multiple inheritance is unchanged.

=item *

Under C<use locale>, the locale-relevant information is now cached on
read-only values, such as the list returned by C<keys %hash>. This makes
operations such as C<sort keys %hash> in the scope of C<use locale>
much faster.

=item *

Empty C<DESTROY> methods are no longer called.

=item *

C<Perl_sv_utf8_upgrade()> is now faster.

=item *

C<keys> on empty hash is now faster.

=item *

C<if (%foo)> has been optimized to be faster than C<if (keys %foo)>.

=item *

The string repetition operator (C<$str x $num>) is now several times
faster when C<$str> has length one or C<$num> is large.

=item *

Reversing an array to itself (as in C<@a = reverse @a>) in void context
now happens in-place and is several orders of magnitude faster than
it used to be. It will also preserve non-existent elements whenever
possible, i.e. for non magical arrays or tied arrays with C<EXISTS>
and C<DELETE> methods.

=back

=head1 Installation and Configuration Improvements

=over 4

=item *

L<perlapi>, L<perlintern>, L<perlmodlib> and L<perltoc> are now all
generated at build time, rather than being shipped as part of the release.

=item *

If C<vendorlib> and C<vendorarch> are the same, then they are only added
to C<@INC> once.

=item *

C<$Config{usedevel}> and the C-level C<PERL_USE_DEVEL> are now defined if
perl is built with  C<-Dusedevel>.

=item *

F<Configure> will enable use of C<-fstack-protector>, to provide protection
against stack-smashing attacks, if the compiler supports it.

=item *

F<Configure> will now determine the correct prototypes for re-entrant
functions and for C<gconvert> if you are using a C++ compiler rather
than a C compiler.

=item *

On Unix, if you build from a tree containing a git repository, the
configuration process will note the commit hash you have checked out, for
display in the output of C<perl -v> and C<perl -V>. Unpushed local commits
are automatically added to the list of local patches displayed by
C<perl -V>.

=item *

Perl now supports SystemTap's C<dtrace> compatibility layer and an
issue with linking C<miniperl> has been fixed in the process.

=item *

perldoc now uses C<less -R> instead of C<less> for improved behaviour
in the face of C<groff>'s new usage of ANSI escape codes.

=item *


C<perl -V> now reports use of the compile-time options C<USE_PERL_ATOF> and
C<USE_ATTRIBUTES_FOR_PERLIO>.

=item *

As part of the flattening of F<ext>, all extensions on all platforms are
built by F<make_ext.pl>. This replaces the Unix-specific
F<ext/util/make_ext>, VMS-specific F<make_ext.com> and Win32-specific
F<win32/buildext.pl>.

=back

=head1 Internal Changes

Each release of Perl sees numerous internal changes which shouldn't
affect day to day usage but may still be notable for developers working
with Perl's source code.

=over

=item *

The J.R.R. Tolkien quotes at the head of C source file have been checked
and proper citations added, thanks to a patch from Tom Christiansen.

=item *

The internal structure of the dual-life modules traditionally found in
the F<lib/> and F<ext/> directories in the perl source has changed
significantly. Where possible, dual-lifed modules have been extracted
from F<lib/> and F<ext/>.

Dual-lifed modules maintained by Perl's developers as part of the Perl
core now live in F<dist/>.  Dual-lifed modules maintained primarily on
CPAN now live in F<cpan/>.  When reporting a bug in a module located
under F<cpan/>, please send your bug report directly to the module's
bug tracker or author, rather than Perl's bug tracker.

=item *

C<\N{...}> now compiles better, always forces UTF-8 internal representation

Perl's developers have fixed several problems with the recognition of
C<\N{...}> constructs.  As part of this, perl will store any scalar
or regex containing C<\N{I<name>}> or C<\N{U+I<code point>}> in its
definition in UTF-8 format. (This was true previously for all occurrences
of C<\N{I<name>}> that did not use a custom translator, but now it's
always true.)

=item *

Perl_magic_setmglob now knows about globs, fixing RT #71254.

=item *

C<SVt_RV> no longer exists. RVs are now stored in IVs.

=item *

C<Perl_vcroak()> now accepts a null first argument. In addition, a full
audit was made of the "not NULL" compiler annotations, and those for
several other internal functions were corrected.

=item *

New macros C<dSAVEDERRNO>, C<dSAVE_ERRNO>, C<SAVE_ERRNO>, C<RESTORE_ERRNO>
have been added to formalise the temporary saving of the C<errno>
variable.

=item *

The function C<Perl_sv_insert_flags> has been added to augment
C<Perl_sv_insert>.

=item *

The function C<Perl_newSV_type(type)> has been added, equivalent to
C<Perl_newSV()> followed by C<Perl_sv_upgrade(type)>.

=item *

The function C<Perl_newSVpvn_flags()> has been added, equivalent to
C<Perl_newSVpvn()> and then performing the action relevant to the flag.

Two flag bits are currently supported.

=over 4

=item *

C<SVf_UTF8> will call C<SvUTF8_on()> for you. (Note that this does
not convert a sequence of ISO 8859-1 characters to UTF-8). A wrapper,
C<newSVpvn_utf8()> is available for this.

=item *

C<SVs_TEMP> now calls C<Perl_sv_2mortal()> on the new SV.

=back

There is also a wrapper that takes constant strings, C<newSVpvs_flags()>.

=item *

The function C<Perl_croak_xs_usage> has been added as a wrapper to
C<Perl_croak>.

=item *

Perl now exports the functions C<PerlIO_find_layer> and C<PerlIO_list_alloc>.

=item *

C<PL_na> has been exterminated from the core code, replaced by local
STRLEN temporaries, or C<*_nolen()> calls. Either approach is faster than
C<PL_na>, which is a pointer dereference into the interpreter structure
under ithreads, and a global variable otherwise.

=item *

C<Perl_mg_free()> used to leave freed memory accessible via C<SvMAGIC()>
on the scalar. It now updates the linked list to remove each piece of
magic as it is freed.

=item *

Under ithreads, the regex in C<PL_reg_curpm> is now reference
counted. This eliminates a lot of hackish workarounds to cope with it
not being reference counted.

=item *

C<Perl_mg_magical()> would sometimes incorrectly turn on C<SvRMAGICAL()>.
This has been fixed.

=item *

The I<public> IV and NV flags are now not set if the string value has
trailing "garbage". This behaviour is consistent with not setting the
public IV or NV flags if the value is out of range for the type.

=item *

Uses of C<Nullav>, C<Nullcv>, C<Nullhv>, C<Nullop>, C<Nullsv> etc have
been replaced by C<NULL> in the core code, and non-dual-life modules,
as C<NULL> is clearer to those unfamiliar with the core code.

=item *

A macro C<MUTABLE_PTR(p)> has been added, which on (non-pedantic) gcc will
not cast away C<const>, returning a C<void *>. Macros C<MUTABLE_SV(av)>,
C<MUTABLE_SV(cv)> etc build on this, casting to C<AV *> etc without
casting away C<const>. This allows proper compile-time auditing of
C<const> correctness in the core, and helped picked up some errors
(now fixed).

=item *

Macros C<mPUSHs()> and C<mXPUSHs()> have been added, for pushing SVs on the
stack and mortalizing them.

=item *

Use of the private structure C<mro_meta> has changed slightly. Nothing
outside the core should be accessing this directly anyway.

=item *

A new tool, F<Porting/expand-macro.pl> has been added, that allows you
to view how a C preprocessor macro would be expanded when compiled.
This is handy when trying to decode the macro hell that is the perl
guts.

=back

=head1 Testing

=head2 Testing improvements

=over 4

=item Parallel tests

The core distribution can now run its regression tests in parallel on
Unix-like platforms. Instead of running C<make test>, set C<TEST_JOBS> in
your environment to the number of tests to run in parallel, and run
C<make test_harness>. On a Bourne-like shell, this can be done as

    TEST_JOBS=3 make test_harness  # Run 3 tests in parallel

An environment variable is used, rather than parallel make itself, because
L<TAP::Harness> needs to be able to schedule individual non-conflicting test
scripts itself, and there is no standard interface to C<make> utilities to
interact with their job schedulers.

Note that currently some test scripts may fail when run in parallel (most
notably C<ext/IO/t/io_dir.t>). If necessary run just the failing scripts
again sequentially and see if the failures go away.

=item Test harness flexibility

It's now possible to override C<PERL5OPT> and friends in F<t/TEST>

=item Test watchdog

Several tests that have the potential to hang forever if they fail now
incorporate a "watchdog" functionality that will kill them after a timeout,
which helps ensure that C<make test> and C<make test_harness> run to
completion automatically.


=back

=head2 New Tests

Perl's developers have added a number of new tests to the core.
In addition to the items listed below, many modules updated from CPAN
incorporate new tests.

=over 4

=item *

Significant cleanups to core tests to ensure that language and
interpreter features are not used before they're tested.

=item *

C<make test_porting> now runs a number of important pre-commit checks
which might be of use to anyone working on the Perl core.

=item *

F<t/porting/podcheck.t> automatically checks the well-formedness of
POD found in all .pl, .pm and .pod files in the F<MANIFEST>, other than in
dual-lifed modules which are primarily maintained outside the Perl core.

=item *

F<t/porting/manifest.t> now tests that all files listed in MANIFEST
are present.

=item *

F<t/op/while_readdir.t> tests that a bare readdir in while loop sets $_.

=item *

F<t/comp/retainedlines.t> checks that the debugger can retain source
lines from C<eval>.

=item *

F<t/io/perlio_fail.t> checks that bad layers fail.

=item *

F<t/io/perlio_leaks.t> checks that PerlIO layers are not leaking.

=item *

F<t/io/perlio_open.t> checks that certain special forms of open work.

=item *

F<t/io/perlio.t> includes general PerlIO tests.

=item *

F<t/io/pvbm.t> checks that there is no unexpected interaction between
the internal types C<PVBM> and C<PVGV>.

=item *

F<t/mro/package_aliases.t> checks that mro works properly in the presence
of aliased packages.

=item *

F<t/op/dbm.t> tests C<dbmopen> and C<dbmclose>.

=item *

F<t/op/index_thr.t> tests the interaction of C<index> and threads.

=item *

F<t/op/pat_thr.t> tests the interaction of esoteric patterns and threads.

=item *

F<t/op/qr_gc.t> tests that C<qr> doesn't leak.

=item *

F<t/op/reg_email_thr.t> tests the interaction of regex recursion and threads.

=item *

F<t/op/regexp_qr_embed_thr.t> tests the interaction of patterns with
embedded C<qr//> and threads.

=item *

F<t/op/regexp_unicode_prop.t> tests Unicode properties in regular
expressions.

=item *

F<t/op/regexp_unicode_prop_thr.t> tests the interaction of Unicode
properties and threads.

=item *

F<t/op/reg_nc_tie.t> tests the tied methods of C<Tie::Hash::NamedCapture>.

=item *

F<t/op/reg_posixcc.t> checks that POSIX character classes behave
consistently.

=item *

F<t/op/re.t> checks that exportable C<re> functions in F<universal.c> work.

=item *

F<t/op/setpgrpstack.t> checks that C<setpgrp> works.

=item *

F<t/op/substr_thr.t> tests the interaction of C<substr> and threads.

=item *

F<t/op/upgrade.t> checks that upgrading and assigning scalars works.

=item *

F<t/uni/lex_utf8.t> checks that Unicode in the lexer works.

=item *

F<t/uni/tie.t> checks that Unicode and C<tie> work.

=item *

F<t/comp/final_line_num.t> tests whether line numbers are correct at EOF

=item *

F<t/comp/form_scope.t> tests format scoping.

=item *

F<t/comp/line_debug.t> tests whether C<< @{"_<$file"} >> works.

=item *

F<t/op/filetest_t.t> tests if -t file test works.

=item *

F<t/op/qr.t> tests C<qr>.

=item *

F<t/op/utf8cache.t> tests malfunctions of the utf8 cache.

=item *

F<t/re/uniprops.t> test unicodes C<\p{}> regex constructs.

=item *

F<t/op/filehandle.t> tests some suitably portable filetest operators
to check that they work as expected, particularly in the light of some
internal changes made in how filehandles are blessed.

=item *

F<t/op/time_loop.t> tests that unix times greater than C<2**63>, which
can now be handed to C<gmtime> and C<localtime>, do not cause an internal
overflow or an excessively long loop.

=back


=head1 New or Changed Diagnostics

=head2 New Diagnostics

=over

=item *

SV allocation tracing has been added to the diagnostics enabled by C<-Dm>.
The tracing can alternatively output via the C<PERL_MEM_LOG> mechanism, if
that was enabled when the F<perl> binary was compiled.

=item *

Smartmatch resolution tracing has been added as a new diagnostic. Use
C<-DM> to enable it.

=item *

A new debugging flag C<-DB> now dumps subroutine definitions, leaving
C<-Dx> for its original purpose of dumping syntax trees.

=item *

Perl 5.12 provides a number of new diagnostic messages to help you write
better code.  See L<perldiag> for details of these new messages.

=over 4

=item *

C<Bad plugin affecting keyword '%s'>

=item *

C<gmtime(%.0f) too large>

=item *

C<Lexing code attempted to stuff non-Latin-1 character into Latin-1 input>

=item *

C<Lexing code internal error (%s)>

=item *

C<localtime(%.0f) too large>

=item *

C<Overloaded dereference did not return a reference>

=item *

C<Overloaded qr did not return a REGEXP>

=item *

C<Perl_pmflag() is deprecated, and will be removed from the XS API>

=item *

C<lvalue attribute ignored after the subroutine has been defined>

This new warning is issued when one attempts to mark a subroutine as
lvalue after it has been defined.

=item *

Perl now warns you if C<++> or C<--> are unable to change the value
because it's beyond the limit of representation.

This uses a new warnings category: "imprecision".

=item *

C<lc>, C<uc>, C<lcfirst>, and C<ucfirst> warn when passed undef.

=item *

C<Show constant in "Useless use of a constant in void context">

=item *

C<Prototype after '%s'>

=item *

C<panic: sv_chop %s>

This new fatal error occurs when the C routine C<Perl_sv_chop()> was
passed a position that is not within the scalar's string buffer. This
could be caused by buggy XS code, and at this point recovery is not
possible.

=item *

The fatal error C<Malformed UTF-8 returned by \N> is now produced if the
C<charnames> handler returns malformed UTF-8.

=item *

If an unresolved named character or sequence was encountered when
compiling a regex pattern then the fatal error C<\N{NAME} must be resolved
by the lexer> is now produced. This can happen, for example, when using a
single-quotish context like C<$re = '\N{SPACE}'; /$re/;>. See L<perldiag>
for more examples of how the lexer can get bypassed.

=item *

C<Invalid hexadecimal number in \N{U+...}> is a new fatal error
triggered when the character constant represented by C<...> is not a
valid hexadecimal number.

=item *

The new meaning of C<\N> as C<[^\n]> is not valid in a bracketed character
class, just like C<.> in a character class loses its special meaning,
and will cause the fatal error C<\N in a character class must be a named
character: \N{...}>.

=item *

The rules on what is legal for the C<...> in C<\N{...}> have been
tightened up so that unless the C<...> begins with an alphabetic
character and continues with a combination of alphanumerics, dashes,
spaces, parentheses or colons then the warning C<Deprecated character(s)
in \N{...} starting at '%s'> is now issued.

=item *

The warning C<Using just the first characters returned by \N{}> will
be issued if the C<charnames> handler returns a sequence of characters
which exceeds the limit of the number of characters that can be used. The
message will indicate which characters were used and which were discarded.

=back

=back

=head2 Changed Diagnostics

A number of existing diagnostic messages have been improved or corrected:

=over

=item *

