
=item $$
X<$$> X<$PID> X<$PROCESS_ID>

The process number of the Perl running this script.  Though you I<can> set
this variable, doing so is generally discouraged, although it can be
invaluable for some testing purposes.  It will be reset automatically
across C<fork()> calls.

Note for Linux and Debian GNU/kFreeBSD users: Before Perl v5.16.0 perl
would emulate POSIX semantics on Linux systems using LinuxThreads, a
partial implementation of POSIX Threads that has since been superseded
by the Native POSIX Thread Library (NPTL).

LinuxThreads is now obsolete on Linux, and caching C<getpid()>
like this made embedding perl unnecessarily complex (since you'd have
to manually update the value of $$), so now C<$$> and C<getppid()>
will always return the same values as the underlying C library.

Debian GNU/kFreeBSD systems also used LinuxThreads up until and
including the 6.0 release, but after that moved to FreeBSD thread
semantics, which are POSIX-like.

To see if your system is affected by this discrepancy check if
C<getconf GNU_LIBPTHREAD_VERSION | grep -q NPTL> returns a false
value.  NTPL threads preserve the POSIX semantics.

Mnemonic: same as shells.

=item $PROGRAM_NAME

=item $0
X<$0> X<$PROGRAM_NAME>

Contains the name of the program being executed.

On some (but not all) operating systems assigning to C<$0> modifies
the argument area that the C<ps> program sees.  On some platforms you
may have to use special C<ps> options or a different C<ps> to see the
changes.  Modifying the C<$0> is more useful as a way of indicating the
current program state than it is for hiding the program you're
running.

Note that there are platform-specific limitations on the maximum
length of C<$0>.  In the most extreme case it may be limited to the
space occupied by the original C<$0>.

In some platforms there may be arbitrary amount of padding, for
example space characters, after the modified name as shown by C<ps>.
In some platforms this padding may extend all the way to the original
length of the argument area, no matter what you do (this is the case
for example with Linux 2.2).

Note for BSD users: setting C<$0> does not completely remove "perl"
from the ps(1) output.  For example, setting C<$0> to C<"foobar"> may
result in C<"perl: foobar (perl)"> (whether both the C<"perl: "> prefix
and the " (perl)" suffix are shown depends on your exact BSD variant
and version).  This is an operating system feature, Perl cannot help it.

In multithreaded scripts Perl coordinates the threads so that any
thread may modify its copy of the C<$0> and the change becomes visible
to ps(1) (assuming the operating system plays along).  Note that
the view of C<$0> the other threads have will not change since they
have their own copies of it.

If the program has been given to perl via the switches C<-e> or C<-E>,
C<$0> will contain the string C<"-e">.

On Linux as of perl v5.14.0 the legacy process name will be set with
C<prctl(2)>, in addition to altering the POSIX name via C<argv[0]> as
perl has done since version 4.000.  Now system utilities that read the
legacy process name such as ps, top and killall will recognize the
name you set when assigning to C<$0>.  The string you supply will be
cut off at 16 bytes, this is a limitation imposed by Linux.

Wide characters are invalid in C<$0> values. For historical reasons,
though, Perl accepts them and encodes them to UTF-8. When this
happens a wide-character warning is triggered.

Mnemonic: same as B<sh> and B<ksh>.

=item $REAL_GROUP_ID

=item $GID

=item $(
X<$(> X<$GID> X<$REAL_GROUP_ID>

The real gid of this process.  If you are on a machine that supports
membership in multiple groups simultaneously, gives a space separated
list of groups you are in.  The first number is the one returned by
C<getgid()>, and the subsequent ones by C<getgroups()>, one of which may be
the same as the first number.

However, a value assigned to C<$(> must be a single number used to
set the real gid.  So the value given by C<$(> should I<not> be assigned
back to C<$(> without being forced numeric, such as by adding zero.  Note
that this is different to the effective gid (C<$)>) which does take a
list.

You can change both the real gid and the effective gid at the same
time by using C<POSIX::setgid()>.  Changes
to C<$(> require a check to C<$!>
to detect any possible errors after an attempted change.

Mnemonic: parentheses are used to I<group> things.  The real gid is the
group you I<left>, if you're running setgid.

=item $EFFECTIVE_GROUP_ID

=item $EGID

=item $)
X<$)> X<$EGID> X<$EFFECTIVE_GROUP_ID>

The effective gid of this process.  If you are on a machine that
supports membership in multiple groups simultaneously, gives a space
separated list of groups you are in.  The first number is the one
returned by C<getegid()>, and the subsequent ones by C<getgroups()>,
one of which may be the same as the first number.

Similarly, a value assigned to C<$)> must also be a space-separated
list of numbers.  The first number sets the effective gid, and
the rest (if any) are passed to C<setgroups()>.  To get the effect of an
empty list for C<setgroups()>, just repeat the new effective gid; that is,
to force an effective gid of 5 and an effectively empty C<setgroups()>
list, say C< $) = "5 5" >.

You can change both the effective gid and the real gid at the same
time by using C<POSIX::setgid()> (use only a single numeric argument).
Changes to C<$)> require a check to C<$!> to detect any possible errors
after an attempted change.

C<< $< >>, C<< $> >>, C<$(> and C<$)> can be set only on
machines that support the corresponding I<set[re][ug]id()> routine.  C<$(>
and C<$)> can be swapped only on machines supporting C<setregid()>.

Mnemonic: parentheses are used to I<group> things.  The effective gid
is the group that's I<right> for you, if you're running setgid.

=item $REAL_USER_ID

=item $UID

=item $<
X<< $< >> X<$UID> X<$REAL_USER_ID>

The real uid of this process.  You can change both the real uid and the
effective uid at the same time by using C<POSIX::setuid()>.  Since
changes to C<< $< >> require a system call, check C<$!> after a change
attempt to detect any possible errors.

Mnemonic: it's the uid you came I<from>, if you're running setuid.

=item $EFFECTIVE_USER_ID

=item $EUID

=item $>
X<< $> >> X<$EUID> X<$EFFECTIVE_USER_ID>

The effective uid of this process.  For example:

    $< = $>;            # set real to effective uid
    ($<,$>) = ($>,$<);  # swap real and effective uids

You can change both the effective uid and the real uid at the same
time by using C<POSIX::setuid()>.  Changes to C<< $> >> require a check
to C<$!> to detect any possible errors after an attempted change.

C<< $< >> and C<< $> >> can be swapped only on machines
supporting C<setreuid()>.

Mnemonic: it's the uid you went I<to>, if you're running setuid.

=item $SUBSCRIPT_SEPARATOR

=item $SUBSEP

=item $;
X<$;> X<$SUBSEP> X<SUBSCRIPT_SEPARATOR>

The subscript separator for multidimensional array emulation.  If you
refer to a hash element as

    $foo{$x,$y,$z}

it really means

    $foo{join($;, $x, $y, $z)}

But don't put

    @foo{$x,$y,$z}     # a slice--note the @

which means

    ($foo{$x},$foo{$y},$foo{$z})

Default is "\034", the same as SUBSEP in B<awk>.  If your keys contain
binary data there might not be any safe value for C<$;>.

Consider using "real" multidimensional arrays as described
in L<perllol>.

Mnemonic: comma (the syntactic subscript separator) is a semi-semicolon.

=item $a

=item $b
X<$a> X<$b>

Special package variables when using C<sort()>, see L<perlfunc/sort>.
Because of this specialness C<$a> and C<$b> don't need to be declared
(using C<use vars>, or C<our()>) even when using the C<strict 'vars'>
pragma.  Don't lexicalize them with C<my $a> or C<my $b> if you want to
be able to use them in the C<sort()> comparison block or function.

=item %ENV
X<%ENV>

The hash C<%ENV> contains your current environment.  Setting a
value in C<ENV> changes the environment for any child processes
you subsequently C<fork()> off.

As of v5.18.0, both keys and values stored in C<%ENV> are stringified.

    my $foo = 1;
    $ENV{'bar'} = \$foo;
    if( ref $ENV{'bar'} ) {
        say "Pre 5.18.0 Behaviour";
    } else {
        say "Post 5.18.0 Behaviour";
    }

Previously, only child processes received stringified values:

    my $foo = 1;
    $ENV{'bar'} = \$foo;

    # Always printed 'non ref'
    system($^X, '-e',
           q/print ( ref $ENV{'bar'}  ? 'ref' : 'non ref' ) /);

This happens because you can't really share arbitrary data structures with
foreign processes.

=item $OLD_PERL_VERSION

=item $]
X<$]> X<$OLD_PERL_VERSION>

The revision, version, and subversion of the Perl interpreter, represented
as a decimal of the form 5.XXXYYY, where XXX is the version / 1e3 and YYY
is the subversion / 1e6.  For example, Perl v5.10.1 would be "5.010001".

This variable can be used to determine whether the Perl interpreter
executing a script is in the right range of versions:

    warn "No PerlIO!\n" if "$]" < 5.008;

When comparing C<$]>, numeric comparison operators should be used, but the
variable should be stringified first to avoid issues where its original
numeric value is inaccurate.

See also the documentation of L<C<use VERSION>|perlfunc/use VERSION> and
C<require VERSION> for a convenient way to fail if the running Perl
interpreter is too old.

See L</$^V> for a representation of the Perl version as a L<version>
object, which allows more flexible string comparisons.

The main advantage of C<$]> over C<$^V> is that it works the same on any
version of Perl.  The disadvantages are that it can't easily be compared
to versions in other formats (e.g. literal v-strings, "v1.2.3" or
version objects) and numeric comparisons are subject to the binary
floating point representation; it's good for numeric literal version
checks and bad for comparing to a variable that hasn't been
sanity-checked.

The C<$OLD_PERL_VERSION> form was added in Perl v5.20.0 for historical
reasons but its use is discouraged. (If your reason to use C<$]> is to
run code on old perls then referring to it as C<$OLD_PERL_VERSION> would
be self-defeating.)

Mnemonic: Is this version of perl in the right bracket?

=item $SYSTEM_FD_MAX

=item $^F
X<$^F> X<$SYSTEM_FD_MAX>

The maximum system file descriptor, ordinarily 2.  System file
descriptors are passed to C<exec()>ed processes, while higher file
descriptors are not.  Also, during an
C<open()>, system file descriptors are
preserved even if the C<open()> fails (ordinary file descriptors are
closed before the C<open()> is attempted).  The close-on-exec
status of a file descriptor will be decided according to the value of
C<$^F> when the corresponding file, pipe, or socket was opened, not the
time of the C<exec()>.

=item @F
X<@F>

The array C<@F> contains the fields of each line read in when autosplit
mode is turned on.  See L<perlrun|perlrun/-a> for the B<-a> switch.  This
array is package-specific, and must be declared or given a full package
name if not in package main when running under C<strict 'vars'>.

=item @INC
X<@INC>

The array C<@INC> contains the list of places that the C<do EXPR>,
C<require>, or C<use> constructs look for their library files.  It
initially consists of the arguments to any B<-I> command-line
switches, followed by the default Perl library, probably
F</usr/local/lib/perl>.
Prior to Perl 5.26, C<.> -which represents the current directory, was included
in C<@INC>; it has been removed. This change in behavior is documented
in L<C<PERL_USE_UNSAFE_INC>|perlrun/PERL_USE_UNSAFE_INC> and it is
not recommended that C<.> be re-added to C<@INC>.
If you need to modify C<@INC> at runtime, you should use the C<use lib> pragma
to get the machine-dependent library properly loaded as well:

    use lib '/mypath/libdir/';
    use SomeMod;

You can also insert hooks into the file inclusion system by putting Perl
code directly into C<@INC>.  Those hooks may be subroutine references,
array references or blessed objects.  See L<perlfunc/require> for details.

=item %INC
X<%INC>

The hash C<%INC> contains entries for each filename included via the
C<do>, C<require>, or C<use> operators.  The key is the filename
you specified (with module names converted to pathnames), and the
value is the location of the file found.  The C<require>
operator uses this hash to determine whether a particular file has
already been included.

If the file was loaded via a hook (e.g. a subroutine reference, see
L<perlfunc/require> for a description of these hooks), this hook is
by default inserted into C<%INC> in place of a filename.  Note, however,
that the hook may have set the C<%INC> entry by itself to provide some more
specific info.

=item $INC
X<$INC>

As of 5.37.7 when an C<@INC> hook is executed the index of the C<@INC>
array that holds the hook will be localized into the C<$INC> variable.
When the hook returns the integer successor of its value will be used to
determine the next index in C<@INC> that will be checked, thus if it is
set to -1 (or C<undef>) the traversal over the C<@INC> array will be
restarted from its beginning.

Normally traversal through the C<@INC> array is from beginning to end
(C<0 .. $#INC>), and if the C<@INC> array is modified by the hook the
iterator may be left in a state where newly added entries are skipped.
Changing this value allows an C<@INC> hook to rewrite the C<@INC> array
and tell Perl where to continue afterwards. See L<perlfunc/require> for
details on C<@INC> hooks.

=item $INPLACE_EDIT

=item $^I
X<$^I> X<$INPLACE_EDIT>

The current value of the inplace-edit extension.  Use C<undef> to disable
inplace editing.

Mnemonic: value of B<-i> switch.

=item @ISA
X<@ISA>

Each package contains a special array called C<@ISA> which contains a list
of that class's parent classes, if any. This array is simply a list of
scalars, each of which is a string that corresponds to a package name. The
array is examined when Perl does method resolution, which is covered in
L<perlobj>.

To load packages while adding them to C<@ISA>, see the L<parent> pragma. The
discouraged L<base> pragma does this as well, but should not be used except
when compatibility with the discouraged L<fields> pragma is required.

=item $^M
X<$^M>

By default, running out of memory is an untrappable, fatal error.
However, if suitably built, Perl can use the contents of C<$^M>
as an emergency memory pool after C<die()>ing.  Suppose that your Perl
were compiled with C<-DPERL_EMERGENCY_SBRK> and used Perl's malloc.
Then

    $^M = 'a' x (1 << 16);

would allocate a 64K buffer for use in an emergency.  See the
L<INSTALL> file in the Perl distribution for information on how to
add custom C compilation flags when compiling perl.  To discourage casual
use of this advanced feature, there is no L<English|English> long name for
this variable.

This variable was added in Perl 5.004.

=item ${^MAX_NESTED_EVAL_BEGIN_BLOCKS}

This variable determines the maximum number C<eval EXPR>/C<BEGIN> or
C<require>/C<BEGIN> block nesting that is allowed. This means it also
controls the maximum nesting of C<use> statements as well.

The default of 1000 should be sufficiently large for normal working
purposes, and if you must raise it then you should be conservative
with your choice or you may encounter segfaults from exhaustion of
the C stack. It seems unlikely that real code has a use depth above
1000, but we have left this configurable just in case.

When set to C<0> then C<BEGIN> blocks inside of C<eval EXPR> or
C<require EXPR> are forbidden entirely and will trigger an exception
which will terminate the compilation and in the case of C<require>
will throw an exception, or in the case of C<eval> return the error in
C<$@> as usual.

Consider the code

 perl -le'sub f { eval "BEGIN { f() }"; } f()'

each invocation of C<f()> will consume considerable C stack, and this
variable is used to cause code like this to die instead of exhausting
the C stack and triggering a segfault. Needless to say code like this is
unusual, it is unlikely you will actually need to raise the setting.
However it may be useful to set it to 0 for a limited time period to
prevent BEGIN{} blocks from being executed during an C<eval EXPR>.

Note that setting this to 1 would NOT affect code like this:

    BEGIN { $n += 1; BEGIN { $n += 2; BEGIN { $n += 4 } } }

The reason is that BEGIN blocks are executed immediately after they are
completed, thus the innermost will execute before the ones which contain
it have even finished compiling, and the depth will not go above 1. In
fact the above code is equivalent to

    BEGIN { $n+=4 }
    BEGIN { $n+=2 }
    BEGIN { $n+=1 }

which makes it obvious why a ${^MAX_EVAL_BEGIN_DEPTH} of 1 would not
block this code.

Only C<BEGIN>'s executed inside of an C<eval> or C<require> (possibly via
C<use>) are affected.

=item $OSNAME

=item $^O
X<$^O> X<$OSNAME>

The name of the operating system under which this copy of Perl was
built, as determined during the configuration process.  For examples
see L<perlport/PLATFORMS>.

The value is identical to C<$Config{'osname'}>.  See also L<Config>
and the B<-V> command-line switch documented in L<perlrun|perlrun/-V>.

In Windows platforms, C<$^O> is not very helpful: since it is always
C<MSWin32>, it doesn't tell the difference between
95/98/ME/NT/2000/XP/CE/.NET.  Use C<Win32::GetOSName()> or
Win32::GetOSVersion() (see L<Win32> and L<perlport>) to distinguish
between the variants.

This variable was added in Perl 5.003.

=item %SIG
X<%SIG>

The hash C<%SIG> contains signal handlers for signals.  For example:

    sub handler {   # 1st argument is signal name
        my($sig) = @_;
        print "Caught a SIG$sig--shutting down\n";
        close(LOG);
        exit(0);
    }

    $SIG{'INT'}  = \&handler;
    $SIG{'QUIT'} = \&handler;
    ...
    $SIG{'INT'}  = 'DEFAULT';   # restore default action
    $SIG{'QUIT'} = 'IGNORE';    # ignore SIGQUIT

Using a value of C<'IGNORE'> usually has the effect of ignoring the
signal, except for the C<CHLD> signal.  See L<perlipc> for more about
this special case.  Using an empty string or C<undef> as the value has
the same effect as C<'DEFAULT'>.

Here are some other examples:

    $SIG{"PIPE"} = "Plumber";   # assumes main::Plumber (not
                                # recommended)
    $SIG{"PIPE"} = \&Plumber;   # just fine; assume current
                                # Plumber
    $SIG{"PIPE"} = *Plumber;    # somewhat esoteric
    $SIG{"PIPE"} = Plumber();   # oops, what did Plumber()
                                # return??

Be sure not to use a bareword as the name of a signal handler,
lest you inadvertently call it.

Using a string that doesn't correspond to any existing function or a
glob that doesn't contain a code slot is equivalent to C<'IGNORE'>,
but a warning is emitted when the handler is being called (the warning
is not emitted for the internal hooks described below).

If your system has the C<sigaction()> function then signal handlers
are installed using it.  This means you get reliable signal handling.

The default delivery policy of signals changed in Perl v5.8.0 from
immediate (also known as "unsafe") to deferred, also known as "safe
signals".  See L<perlipc> for more information.

Certain internal hooks can be also set using the C<%SIG> hash.  The
routine indicated by C<$SIG{__WARN__}> is called when a warning
message is about to be printed.  The warning message is passed as the
first argument.  The presence of a C<__WARN__> hook causes the
ordinary printing of warnings to C<STDERR> to be suppressed.  You can
use this to save warnings in a variable, or turn warnings into fatal
errors, like this:

    local $SIG{__WARN__} = sub { die $_[0] };
    eval $proggie;

As the C<'IGNORE'> hook is not supported by C<__WARN__>, its effect is
the same as using C<'DEFAULT'>.  You can disable warnings using the
empty subroutine:

    local $SIG{__WARN__} = sub {};

The routine indicated by C<$SIG{__DIE__}> is called when a fatal
exception is about to be thrown.  The error message is passed as the
first argument.  When a C<__DIE__> hook routine returns, the exception
processing continues as it would have in the absence of the hook,
unless the hook routine itself exits via a C<goto &sub>, a loop exit,
or a C<die()>.  The C<__DIE__> handler is explicitly disabled during
the call, so that you can die from a C<__DIE__> handler.  Similarly
for C<__WARN__>.

The C<$SIG{__DIE__}> hook is called even inside an C<eval()>. It was
never intended to happen this way, but an implementation glitch made
this possible. This used to be deprecated, as it allowed strange action
at a distance like rewriting a pending exception in C<$@>. Plans to
rectify this have been scrapped, as users found that rewriting a
pending exception is actually a useful feature, and not a bug.

The C<$SIG{__DIE__}> doesn't support C<'IGNORE'>; it has the same
effect as C<'DEFAULT'>.

C<__DIE__>/C<__WARN__> handlers are very special in one respect: they
may be called to report (probable) errors found by the parser.  In such
a case the parser may be in inconsistent state, so any attempt to
evaluate Perl code from such a handler will probably result in a
segfault.  This means that warnings or errors that result from parsing
Perl should be used with extreme caution, like this:

    require Carp if defined $^S;
    Carp::confess("Something wrong") if defined &Carp::confess;
    die "Something wrong, but could not load Carp to give "
      . "backtrace...\n\t"
      . "To see backtrace try starting Perl with -MCarp switch";

Here the first line will load C<Carp> I<unless> it is the parser who
called the handler.  The second line will print backtrace and die if
C<Carp> was available.  The third line will be executed only if C<Carp> was
not available.

Having to even think about the C<$^S> variable in your exception
handlers is simply wrong.  C<$SIG{__DIE__}> as currently implemented
invites grievous and difficult to track down errors.  Avoid it
and use an C<END{}> or CORE::GLOBAL::die override instead.

See L<perlfunc/die>, L<perlfunc/warn>, L<perlfunc/eval>, and
L<warnings> for additional information.

=item %{^HOOK}
X<%{^HOOK}>

This hash contains coderefs which are called when various perl keywords
which are hard or impossible to wrap are called. The keys of this hash
are named after the keyword that is being hooked, followed by two
underbars and then a phase term; either "before" or "after".

Perl will throw an error if you attempt modify a key which is not
documented to exist, or if you attempt to store anything other than a
code reference or undef in the hash.  If you wish to use an object to
implement a hook you can use currying to embed the object into an
anonymous code reference.

Currently there is only one keyword which can be hooked, C<require>, but
it is expected that in future releases there will be additional keywords
with hook support.

=over 4

=item require__before

The routine indicated by C<${^HOOK}{require__before}> is called by
C<require> B<before> it checks C<%INC>, looks up C<@INC>, calls INC
hooks, or compiles any code.  It is called with a single argument, the
filename for the item being required (package names are converted to
paths).  It may alter this filename to change what file is loaded.  If
the hook dies during execution then it will block the require from executing.

In order to make it easy to perform an action with shared state both
before and after the require keyword was executed the C<require__before>
hook may return a "post-action" coderef which will in turn be executed when
the C<require> completes.  This coderef will be executed regardless as to
whether the require completed succesfully or threw an exception.  It will
be called with the filename that was required.  You can check %INC to
determine if the require was successful.  Any other return from the
C<require__before> hook will be silently ignored.

C<require__before> hooks are called in FIFO order, and if the hook
returns a code reference those code references will be called in FILO
order.  In other words if A requires B requires C, then
C<require__before> will be called first for A, then B and then C, and
the post-action code reference will executed first for C, then B and
then finally A.

Well behaved code should ensure that when setting up a
C<require__before> hook that any prior installed hook will be called,
and that their return value, if a code reference, will be called as
well.  See L<perlfunc/require> for an example implementation.

=item require__after

The routine indicated by C<${^HOOK}{require__after}> is called by
C<require> B<after> the require completes.  It is called with a single
argument, the filename for the item being required (package names are
converted to paths).  It is executed when the C<require> completes,
either via exception or via completion of the require statement, and you
can check C<%INC> to determine if the require was successful.

The C<require__after> hook is called for each required file in FILO
order. In other words if A requires B requires C, then C<require__after>
will be called first for C, then B and then A.

=back

=item $BASETIME

=item $^T
X<$^T> X<$BASETIME>

The time at which the program began running, in seconds since the
epoch (beginning of 1970).  The values returned by the B<-M>, B<-A>,
and B<-C> filetests are based on this value.

=item $PERL_VERSION

=item $^V
X<$^V> X<$PERL_VERSION>

=for comment
These are documented in the generated file lib/Config.pod.  This looks
like as good a place as any to give notice that they are documented.

The revision, version, and subversion of the Perl interpreter,
represented as a L<version> object.

This variable first appeared in perl v5.6.0; earlier versions of perl
will see an undefined value.  Before perl v5.10.0 C<$^V> was represented
as a v-string rather than a L<version> object.

C<$^V> can be used to determine whether the Perl interpreter executing
a script is in the right range of versions.  For example:

    warn "Hashes not randomized!\n" if !$^V or $^V lt v5.8.1

While version objects overload stringification, to portably convert
C<$^V> into its string representation, use C<sprintf()>'s C<"%vd">
conversion, which works for both v-strings or version objects:

    printf "version is v%vd\n", $^V;  # Perl's version

See the documentation of C<use VERSION> and C<require VERSION>
for a convenient way to fail if the running Perl interpreter is too old.

See also C<L</$]>> for a decimal representation of the Perl version.

The main advantage of C<$^V> over C<$]> is that, for Perl v5.10.0 or
later, it overloads operators, allowing easy comparison against other
version representations (e.g. decimal, literal v-string, "v1.2.3", or
objects).  The disadvantage is that prior to v5.10.0, it was only a
literal v-string, which can't be easily printed or compared, whereas
the behavior of C<$]> is unchanged on all versions of Perl.

Mnemonic: use ^V for a version object.

=item $EXECUTABLE_NAME

=item $^X
X<$^X> X<$EXECUTABLE_NAME>

The name used to execute the current copy of Perl, from C's
C<argv[0]> or (where supported) F</proc/self/exe>.

Depending on the host operating system, the value of C<$^X> may be
a relative or absolute pathname of the perl program file, or may
be the string used to invoke perl but not the pathname of the
perl program file.  Also, most operating systems permit invoking
programs that are not in the PATH environment variable, so there
is no guarantee that the value of C<$^X> is in PATH.  For VMS, the
value may or may not include a version number.

You usually can use the value of C<$^X> to re-invoke an independent
copy of the same perl that is currently running, e.g.,

    @first_run = `$^X -le "print int rand 100 for 1..100"`;

But recall that not all operating systems support forking or
capturing of the output of commands, so this complex statement
may not be portable.

It is not safe to use the value of C<$^X> as a path name of a file,
as some operating systems that have a mandatory suffix on
executable files do not require use of the suffix when invoking
a command.  To convert the value of C<$^X> to a path name, use the
following statements:

    # Build up a set of file names (not command names).
    use Config;
    my $this_perl = $^X;
    if ($^O ne 'VMS') {
        $this_perl .= $Config{_exe}
        unless $this_perl =~ m/$Config{_exe}$/i;
    }

Because many operating systems permit anyone with read access to
the Perl program file to make a copy of it, patch the copy, and
then execute the copy, the security-conscious Perl programmer
should take care to invoke the installed copy of perl, not the
copy referenced by C<$^X>.  The following statements accomplish
this goal, and produce a pathname that can be invoked as a
command or referenced as a file.

    use Config;
    my $secure_perl_path = $Config{perlpath};
    if ($^O ne 'VMS') {
        $secure_perl_path .= $Config{_exe}
        unless $secure_perl_path =~ m/$Config{_exe}$/i;
    }

=back

=head2 Variables related to regular expressions

Most of the special variables related to regular expressions are side
effects. Perl sets these variables when it has completed a match
successfully, so you should check the match result before using them.
For instance:

    if( /P(A)TT(ER)N/ ) {
        print "I found $1 and $2\n";
    }

These variables are read-only and behave similarly to a dynamically
scoped variable, with only a few exceptions which are explicitly
documented as behaving otherwise.  See the following section for more
details.

=head3 Scoping Rules of Regex Variables
X<Scoping Rules of Regex Variables>

Regular expression variables allow the programmer to access the state of
the most recent I<successful> regex match in the current dynamic scope.

The variables themselves are global and unscoped, but the data they
access is scoped similarly to dynamically scoped variables, in that
every successful match behaves as though it localizes a global state
object to the current block or file scope.
(See L<perlsyn/"Compound Statements"> for more details on dynamic
scoping and the C<local> keyword.)

A I<successful match> includes any successful match performed by the
search and replace operator C<s///> as well as those performed by the
C<m//> operator.

Consider the following code:

    my @state;
    sub matchit {
        push @state, $1;            # pushes "baz"
        my $str = shift;
        $str =~ /(zat)/;            # matches "zat"
        push @state, $1;            # pushes "zat"
    }

    {
        $str = "foo bar baz blorp zat";
        $str =~ /(foo)/;            # matches "foo"
        push @state, $1;            # pushes "foo"
        {
            $str =~ /(pizza)/;      # does NOT match
            push @state, $1;        # pushes "foo"
            $str =~ /(bar)/;        # matches "bar"
            push @state, $1;        # pushes "bar"
            $str =~ /(baz)/;        # matches "baz"
            matchit($str);          # see above
            push @state, $1;        # pushes "baz"
        }
        $str =~ s/noodles/rice/;    # does NOT match
        push @state, $1;            # pushes "foo"
        $str =~ s/(blorp)/zwoop/;   # matches "blorp"
        push @state, $1;            # pushes "blorp"
    }
    # the following prints "foo, foo, bar, baz, zat, baz, foo, blorp"
    print join ",", @state;

Notice that each successful match in the exact same scope overrides the
match context of the previous successful match, but that unsuccessful
matches do not. Also note that in an inner nested scope the previous
state from an outer dynamic scope persists until it has been overriden
by another successful match, but that when the inner nested scope exits
whatever match context was in effect before the inner successful match
is restored when the scope concludes.

It is a known issue that C<goto LABEL> may interact poorly with the
dynamically scoped match context. This may not be fixable, and is
considered to be one of many good reasons to avoid C<goto LABEL>.

=head3 Performance issues

Traditionally in Perl, any use of any of the three variables  C<$`>, C<$&>
or C<$'> (or their C<use English> equivalents) anywhere in the code, caused
all subsequent successful pattern matches to make a copy of the matched
string, in case the code might subsequently access one of those variables.
This imposed a considerable performance penalty across the whole program,
so generally the use of these variables has been discouraged.

In Perl 5.6.0 the C<@-> and C<@+> dynamic arrays were introduced that
supply the indices of successful matches. So you could for example do
this:

    $str =~ /pattern/;

    print $`, $&, $'; # bad: performance hit

    print             # good: no performance hit
    substr($str, 0,     $-[0]),
    substr($str, $-[0], $+[0]-$-[0]),
    substr($str, $+[0]);

In Perl 5.10.0 the C</p> match operator flag and the C<${^PREMATCH}>,
C<${^MATCH}>, and C<${^POSTMATCH}> variables were introduced, that allowed
you to suffer the penalties only on patterns marked with C</p>.

In Perl 5.18.0 onwards, perl started noting the presence of each of the
three variables separately, and only copied that part of the string
required; so in

    $`; $&; "abcdefgh" =~ /d/

perl would only copy the "abcd" part of the string. That could make a big
difference in something like

    $str = 'x' x 1_000_000;
    $&; # whoops
    $str =~ /x/g # one char copied a million times, not a million chars

In Perl 5.20.0 a new copy-on-write system was enabled by default, which
finally fixes most of the performance issues with these three variables, and
makes them safe to use anywhere.

The C<Devel::NYTProf> and C<Devel::FindAmpersand> modules can help you
find uses of these problematic match variables in your code.

=over 8

=item $<I<digits>> ($1, $2, ...)
X<$1> X<$2> X<$3> X<$I<digits>>

Contains the subpattern from the corresponding set of capturing
parentheses from the last successful pattern match in the current
dynamic scope. (See L</Scoping Rules of Regex Variables>.)

Note there is a distinction between a capture buffer which matches
the empty string a capture buffer which is optional. Eg, C<(x?)> and
C<(x)?> The latter may be undef, the former not.

These variables are read-only.

Mnemonic: like \digits.

=item @{^CAPTURE}
X<@{^CAPTURE}> X<@^CAPTURE>

An array which exposes the contents of the capture buffers, if any, of
the last successful pattern match, not counting patterns matched
in nested blocks that have been exited already.

Note that the 0 index of C<@{^CAPTURE}> is equivalent to C<$1>, the 1 index
is equivalent to C<$2>, etc.

    if ("foal"=~/(.)(.)(.)(.)/) {
        print join "-", @{^CAPTURE};
    }

should output "f-o-a-l".

See also L<<< /$<I<digits>> ($1, $2, ...) >>>, L</%{^CAPTURE}> and
L</%{^CAPTURE_ALL}>.

Note that unlike most other regex magic variables there is no single
letter equivalent to C<@{^CAPTURE}>. Also be aware that when
interpolating subscripts of this array you B<must> use the demarcated
variable form, for instance

    print "${^CAPTURE[0]}"

see L<perldata/"Demarcated variable names using braces"> for more
information on this form and its uses.

This variable was added in 5.25.7

If you need access to this functionality in older Perls you can use this
function immediately after your regexp.

    sub get_captures {
        no strict 'refs';

        my $last_idx = scalar(@-) - 1;
        my @arr      = 1 .. $last_idx;
        my @ret      = map { $$_; } @arr;

        return @ret;
    }

=item $MATCH

=item $&
X<$&> X<$MATCH>

The string matched by the last successful pattern match.
(See L</Scoping Rules of Regex Variables>.)

See L</Performance issues> above for the serious performance implications
of using this variable (even once) in your code.

This variable is read-only, and its value is dynamically scoped.

Mnemonic: like C<&> in some editors.

=item ${^MATCH}
X<${^MATCH}>

It is only guaranteed to return a defined value when the pattern was
compiled or executed with the C</p> modifier.

This is similar to C<$&> (C<$MATCH>) except that to use it you must
use the C</p> modifier when executing the pattern, and it does not incur
the performance penalty associated with that variable.

See L</Performance issues> above.

This variable was added in Perl v5.10.0.

This variable is read-only, and its value is dynamically scoped.

=item $PREMATCH

=item $`
X<$`> X<$PREMATCH>

The string preceding whatever was matched by the last successful
pattern match. (See L</Scoping Rules of Regex Variables>).

See L</Performance issues> above for the serious performance implications
of using this variable (even once) in your code.

This variable is read-only, and its value is dynamically scoped.

Mnemonic: C<`> often precedes a quoted string.

=item ${^PREMATCH}
X<${^PREMATCH}>

It is only guaranteed to return a defined value when the pattern was
executed with the C</p> modifier.

This is similar to C<$`> ($PREMATCH) except that to use it you must
use the C</p> modifier when executing the pattern, and it does not incur
the performance penalty associated with that variable.

See L</Performance issues> above.


This variable was added in Perl v5.10.0.

