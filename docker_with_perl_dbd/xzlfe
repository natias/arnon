Return a short description of the provided OP.

=over 3

 const char *  OP_DESC(OP *o)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<op_force_list>
X<op_force_list>

Promotes o and any siblings to be an C<OP_LIST> if it is not already. If
a new C<OP_LIST> op was created, its first child will be C<OP_PUSHMARK>.
The returned node itself will be nulled, leaving only its children.

This is often what you want to do before putting the optree into list
context; as

    o = op_contextualize(op_force_list(o), G_LIST);

=over 3

 OP *  op_force_list(OP *o)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<op_free>
X<op_free>

Free an op and its children. Only use this when an op is no longer linked
to from any optree.

Remember that any op with C<OPf_KIDS> set is expected to have a valid
C<op_first> pointer.  If you are attempting to free an op but preserve its
child op, make sure to clear that flag before calling C<op_free()>.  For
example:

    OP *kid = o->op_first; o->op_first = NULL;
    o->op_flags &= ~OPf_KIDS;
    op_free(o);

=over 3

 void  op_free(OP *arg)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<OpHAS_SIBLING>
X<OpHAS_SIBLING>

Returns true if C<o> has a sibling

=over 3

 bool  OpHAS_SIBLING(OP *o)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<OpLASTSIB_set>
X<OpLASTSIB_set>

Marks C<o> as having no further siblings and marks
o as having the specified parent. See also C<L</OpMORESIB_set>> and
C<OpMAYBESIB_set>. For a higher-level interface, see
C<L</op_sibling_splice>>.

=over 3

 void  OpLASTSIB_set(OP *o, OP *parent)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<op_linklist>
X<op_linklist>

This function is the implementation of the L</LINKLIST> macro.  It should
not be called directly.

=over 3

 OP *  op_linklist(OP *o)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<op_lvalue>
X<op_lvalue>

NOTE: C<op_lvalue> is B<experimental> and may change or be
removed without notice.

Propagate lvalue ("modifiable") context to an op and its children.
C<type> represents the context type, roughly based on the type of op that
would do the modifying, although C<local()> is represented by C<OP_NULL>,
because it has no op type of its own (it is signalled by a flag on
the lvalue op).

This function detects things that can't be modified, such as C<$x+1>, and
generates errors for them.  For example, C<$x+1 = 2> would cause it to be
called with an op of type C<OP_ADD> and a C<type> argument of C<OP_SASSIGN>.

It also flags things that need to behave specially in an lvalue context,
such as C<$$x = 5> which might have to vivify a reference in C<$x>.

=over 3

 OP *  op_lvalue(OP *o, I32 type)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<OpMAYBESIB_set>
X<OpMAYBESIB_set>

Conditionally does C<OpMORESIB_set> or C<OpLASTSIB_set> depending on whether
C<sib> is non-null. For a higher-level interface, see C<L</op_sibling_splice>>.

=over 3

 void  OpMAYBESIB_set(OP *o, OP *sib, OP *parent)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<OpMORESIB_set>
X<OpMORESIB_set>

Sets the sibling of C<o> to the non-zero value C<sib>. See also C<L</OpLASTSIB_set>>
and C<L</OpMAYBESIB_set>>. For a higher-level interface, see
C<L</op_sibling_splice>>.

=over 3

 void  OpMORESIB_set(OP *o, OP *sib)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<OP_NAME>
X<OP_NAME>

Return the name of the provided OP.  For core ops this looks up the name
from the op_type; for custom ops from the op_ppaddr.

=over 3

 const char *  OP_NAME(OP *o)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<op_null>
X<op_null>

Neutralizes an op when it is no longer needed, but is still linked to from
other ops.

=over 3

 void  op_null(OP *o)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<op_parent>
X<op_parent>

Returns the parent OP of C<o>, if it has a parent. Returns C<NULL> otherwise.

=over 3

 OP *  op_parent(OP *o)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<op_prepend_elem>
X<op_prepend_elem>

Prepend an item to the list of ops contained directly within a list-type
op, returning the lengthened list.  C<first> is the op to prepend to the
list, and C<last> is the list-type op.  C<optype> specifies the intended
opcode for the list.  If C<last> is not already a list of the right type,
it will be upgraded into one.  If either C<first> or C<last> is null,
the other is returned unchanged.

=over 3

 OP *  op_prepend_elem(I32 optype, OP *first, OP *last)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<op_scope>
X<op_scope>

NOTE: C<op_scope> is B<experimental> and may change or be
removed without notice.

Wraps up an op tree with some additional ops so that at runtime a dynamic
scope will be created.  The original ops run in the new dynamic scope,
and then, provided that they exit normally, the scope will be unwound.
The additional ops used to create and unwind the dynamic scope will
normally be an C<enter>/C<leave> pair, but a C<scope> op may be used
instead if the ops are simple enough to not need the full dynamic scope
structure.

=over 3

 OP *  op_scope(OP *o)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<OpSIBLING>
X<OpSIBLING>

Returns the sibling of C<o>, or C<NULL> if there is no sibling

=over 3

 OP*  OpSIBLING(OP *o)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<op_sibling_splice>
X<op_sibling_splice>

A general function for editing the structure of an existing chain of
op_sibling nodes.  By analogy with the perl-level C<splice()> function, allows
you to delete zero or more sequential nodes, replacing them with zero or
more different nodes.  Performs the necessary op_first/op_last
housekeeping on the parent node and op_sibling manipulation on the
children.  The last deleted node will be marked as the last node by
updating the op_sibling/op_sibparent or op_moresib field as appropriate.

Note that op_next is not manipulated, and nodes are not freed; that is the
responsibility of the caller.  It also won't create a new list op for an
empty list etc; use higher-level functions like op_append_elem() for that.

C<parent> is the parent node of the sibling chain. It may passed as C<NULL> if
the splicing doesn't affect the first or last op in the chain.

C<start> is the node preceding the first node to be spliced.  Node(s)
following it will be deleted, and ops will be inserted after it.  If it is
C<NULL>, the first node onwards is deleted, and nodes are inserted at the
beginning.

C<del_count> is the number of nodes to delete.  If zero, no nodes are deleted.
If -1 or greater than or equal to the number of remaining kids, all
remaining kids are deleted.

C<insert> is the first of a chain of nodes to be inserted in place of the nodes.
If C<NULL>, no nodes are inserted.

The head of the chain of deleted ops is returned, or C<NULL> if no ops were
deleted.

For example:

    action                    before      after         returns
    ------                    -----       -----         -------

                              P           P
    splice(P, A, 2, X-Y-Z)    |           |             B-C
                              A-B-C-D     A-X-Y-Z-D

                              P           P
    splice(P, NULL, 1, X-Y)   |           |             A
                              A-B-C-D     X-Y-B-C-D

                              P           P
    splice(P, NULL, 3, NULL)  |           |             A-B-C
                              A-B-C-D     D

                              P           P
    splice(P, B, 0, X-Y)      |           |             NULL
                              A-B-C-D     A-B-X-Y-C-D


For lower-level direct manipulation of C<op_sibparent> and C<op_moresib>,
see C<L</OpMORESIB_set>>, C<L</OpLASTSIB_set>>, C<L</OpMAYBESIB_set>>.

=over 3

 OP *  op_sibling_splice(OP *parent, OP *start, int del_count,
                         OP *insert)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<optimize_optree>
X<optimize_optree>

This function applies some optimisations to the optree in top-down order.
It is called before the peephole optimizer, which processes ops in
execution order. Note that finalize_optree() also does a top-down scan,
but is called *after* the peephole optimizer.

=over 3

 void  optimize_optree(OP *o)

=back

=back

=for hackers
Found in file peep.c

=over 4

=item C<OP_TYPE_IS>
X<OP_TYPE_IS>

Returns true if the given OP is not a C<NULL> pointer
and if it is of the given type.

The negation of this macro, C<OP_TYPE_ISNT> is also available
as well as C<OP_TYPE_IS_NN> and C<OP_TYPE_ISNT_NN> which elide
the NULL pointer check.

=over 3

 bool  OP_TYPE_IS(OP *o, Optype type)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<OP_TYPE_IS_OR_WAS>
X<OP_TYPE_IS_OR_WAS>

Returns true if the given OP is not a NULL pointer and
if it is of the given type or used to be before being
replaced by an OP of type OP_NULL.

The negation of this macro, C<OP_TYPE_ISNT_AND_WASNT>
is also available as well as C<OP_TYPE_IS_OR_WAS_NN>
and C<OP_TYPE_ISNT_AND_WASNT_NN> which elide
the C<NULL> pointer check.

=over 3

 bool  OP_TYPE_IS_OR_WAS(OP *o, Optype type)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<op_wrap_finally>
X<op_wrap_finally>

NOTE: C<op_wrap_finally> is B<experimental> and may change or be
removed without notice.

Wraps the given C<block> optree fragment in its own scoped block, arranging
for the C<finally> optree fragment to be invoked when leaving that block for
any reason. Both optree fragments are consumed and the combined result is
returned.

=over 3

 OP *  op_wrap_finally(OP *block, OP *finally)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<peep_t>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<Perl_cpeep_t>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PL_opfreehook>
X<PL_opfreehook>

When non-C<NULL>, the function pointed by this variable will be called each time an OP is freed with the corresponding OP as the argument.
This allows extensions to free any extra attribute they have locally attached to an OP.
It is also assured to first fire for the parent OP and then for its kids.

When you replace this variable, it is considered a good practice to store the possibly previously installed hook and that you recall it inside your own.

On threaded perls, each thread has an independent copy of this variable;
each initialized at creation time with the current value of the creating
thread's copy.

=over 3

 Perl_ophook_t  PL_opfreehook

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<PL_peepp>
X<PL_peepp>

Pointer to the per-subroutine peephole optimiser.  This is a function
that gets called at the end of compilation of a Perl subroutine (or
equivalently independent piece of Perl code) to perform fixups of
some ops and to perform small-scale optimisations.  The function is
called once for each subroutine that is compiled, and is passed, as sole
parameter, a pointer to the op that is the entry point to the subroutine.
It modifies the op tree in place.

The peephole optimiser should never be completely replaced.  Rather,
add code to it by wrapping the existing optimiser.  The basic way to do
this can be seen in L<perlguts/Compile pass 3: peephole optimization>.
If the new code wishes to operate on ops throughout the subroutine's
structure, rather than just at the top level, it is likely to be more
convenient to wrap the L</PL_rpeepp> hook.

On threaded perls, each thread has an independent copy of this variable;
each initialized at creation time with the current value of the creating
thread's copy.

=over 3

 peep_t  PL_peepp

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<PL_rpeepp>
X<PL_rpeepp>

Pointer to the recursive peephole optimiser.  This is a function
that gets called at the end of compilation of a Perl subroutine (or
equivalently independent piece of Perl code) to perform fixups of some
ops and to perform small-scale optimisations.  The function is called
once for each chain of ops linked through their C<op_next> fields;
it is recursively called to handle each side chain.  It is passed, as
sole parameter, a pointer to the op that is at the head of the chain.
It modifies the op tree in place.

The peephole optimiser should never be completely replaced.  Rather,
add code to it by wrapping the existing optimiser.  The basic way to do
this can be seen in L<perlguts/Compile pass 3: peephole optimization>.
If the new code wishes to operate only on ops at a subroutine's top level,
rather than throughout the structure, it is likely to be more convenient
to wrap the L</PL_peepp> hook.

On threaded perls, each thread has an independent copy of this variable;
each initialized at creation time with the current value of the creating
thread's copy.

=over 3

 peep_t  PL_rpeepp

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<PMOP>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<rv2cv_op_cv>
X<rv2cv_op_cv>

Examines an op, which is expected to identify a subroutine at runtime,
and attempts to determine at compile time which subroutine it identifies.
This is normally used during Perl compilation to determine whether
a prototype can be applied to a function call.  C<cvop> is the op
being considered, normally an C<rv2cv> op.  A pointer to the identified
subroutine is returned, if it could be determined statically, and a null
pointer is returned if it was not possible to determine statically.

Currently, the subroutine can be identified statically if the RV that the
C<rv2cv> is to operate on is provided by a suitable C<gv> or C<const> op.
A C<gv> op is suitable if the GV's CV slot is populated.  A C<const> op is
suitable if the constant value must be an RV pointing to a CV.  Details of
this process may change in future versions of Perl.  If the C<rv2cv> op
has the C<OPpENTERSUB_AMPER> flag set then no attempt is made to identify
the subroutine statically: this flag is used to suppress compile-time
magic on a subroutine call, forcing it to use default runtime behaviour.

If C<flags> has the bit C<RV2CVOPCV_MARK_EARLY> set, then the handling
of a GV reference is modified.  If a GV was examined and its CV slot was
found to be empty, then the C<gv> op has the C<OPpEARLY_CV> flag set.
If the op is not optimised away, and the CV slot is later populated with
a subroutine having a prototype, that flag eventually triggers the warning
"called too early to check prototype".

If C<flags> has the bit C<RV2CVOPCV_RETURN_NAME_GV> set, then instead
of returning a pointer to the subroutine it returns a pointer to the
GV giving the most appropriate name for the subroutine in this context.
Normally this is just the C<CvGV> of the subroutine, but for an anonymous
(C<CvANON>) subroutine that is referenced through a GV it will be the
referencing GV.  The resulting C<GV*> is cast to C<CV*> to be returned.
A null pointer is returned as usual if there is no statically-determinable
subroutine.

=over 3

 CV *  rv2cv_op_cv(OP *cvop, U32 flags)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<UNOP>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<XOP>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=head1 Pack and Unpack

=over 4

=item C<packlist>
X<packlist>

The engine implementing C<pack()> Perl function.

=over 3

 void  packlist(SV *cat, const char *pat, const char *patend,
                SV **beglist, SV **endlist)

=back

=back

=for hackers
Found in file pp_pack.c

=over 4

=item C<unpackstring>
X<unpackstring>

The engine implementing the C<unpack()> Perl function.

Using the template C<pat..patend>, this function unpacks the string
C<s..strend> into a number of mortal SVs, which it pushes onto the perl
argument (C<@_>) stack (so you will need to issue a C<PUTBACK> before and
C<SPAGAIN> after the call to this function).  It returns the number of
pushed elements.

The C<strend> and C<patend> pointers should point to the byte following the
last character of each string.

Although this function returns its values on the perl argument stack, it
doesn't take any parameters from that stack (and thus in particular
there's no need to do a C<PUSHMARK> before calling it, unlike L</call_pv> for
example).

=over 3

 SSize_t  unpackstring(const char *pat, const char *patend,
                       const char *s, const char *strend,
                       U32 flags)

=back

=back

=for hackers
Found in file pp_pack.c

=head1 Pad Data Structures
X<SVs_PADSTALE>

=over 4

=item C<CvPADLIST>
X<CvPADLIST>

NOTE: C<CvPADLIST> is B<experimental> and may change or be
removed without notice.

CV's can have CvPADLIST(cv) set to point to a PADLIST.  This is the CV's
scratchpad, which stores lexical variables and opcode temporary and
per-thread values.

For these purposes "formats" are a kind-of CV; eval""s are too (except they're
not callable at will and are always thrown away after the eval"" is done
executing).  Require'd files are simply evals without any outer lexical
scope.

XSUBs do not have a C<CvPADLIST>.  C<dXSTARG> fetches values from C<PL_curpad>,
but that is really the callers pad (a slot of which is allocated by
every entersub). Do not get or set C<CvPADLIST> if a CV is an XSUB (as
determined by C<CvISXSUB()>), C<CvPADLIST> slot is reused for a different
internal purpose in XSUBs.

The PADLIST has a C array where pads are stored.

The 0th entry of the PADLIST is a PADNAMELIST
which represents the "names" or rather
the "static type information" for lexicals.  The individual elements of a
PADNAMELIST are PADNAMEs.  Future
refactorings might stop the PADNAMELIST from being stored in the PADLIST's
array, so don't rely on it.  See L</PadlistNAMES>.

The CvDEPTH'th entry of a PADLIST is a PAD (an AV) which is the stack frame
at that depth of recursion into the CV.  The 0th slot of a frame AV is an
AV which is C<@_>.  Other entries are storage for variables and op targets.

Iterating over the PADNAMELIST iterates over all possible pad
items.  Pad slots for targets (C<SVs_PADTMP>)
and GVs end up having &PL_padname_undef "names", while slots for constants 
have C<&PL_padname_const> "names" (see C<L</pad_alloc>>).  That
C<&PL_padname_undef>
and C<&PL_padname_const> are used is an implementation detail subject to
change.  To test for them, use C<!PadnamePV(name)> and
S<C<PadnamePV(name) && !PadnameLEN(name)>>, respectively.

Only C<my>/C<our> variable slots get valid names.
The rest are op targets/GVs/constants which are statically allocated
or resolved at compile time.  These don't have names by which they
can be looked up from Perl code at run time through eval"" the way
C<my>/C<our> variables can be.  Since they can't be looked up by "name"
but only by their index allocated at compile time (which is usually
in C<< PL_op->op_targ >>), wasting a name SV for them doesn't make sense.

The pad names in the PADNAMELIST have their PV holding the name of
the variable.  The C<COP_SEQ_RANGE_LOW> and C<_HIGH> fields form a range
(low+1..high inclusive) of cop_seq numbers for which the name is
valid.  During compilation, these fields may hold the special value
PERL_PADSEQ_INTRO to indicate various stages:

 COP_SEQ_RANGE_LOW        _HIGH
 -----------------        -----
 PERL_PADSEQ_INTRO            0   variable not yet introduced:
                                  { my ($x
 valid-seq#   PERL_PADSEQ_INTRO   variable in scope:
                                  { my ($x);
 valid-seq#          valid-seq#   compilation of scope complete:
                                  { my ($x); .... }

When a lexical var hasn't yet been introduced, it already exists from the
perspective of duplicate declarations, but not for variable lookups, e.g.

    my ($x, $x); # '"my" variable $x masks earlier declaration'
    my $x = $x;  # equal to my $x = $::x;

For typed lexicals C<PadnameTYPE> points at the type stash.  For C<our>
lexicals, C<PadnameOURSTASH> points at the stash of the associated global (so
that duplicate C<our> declarations in the same package can be detected).
C<PadnameGEN> is sometimes used to store the generation number during
compilation.

If C<PadnameOUTER> is set on the pad name, then that slot in the frame AV
is a REFCNT'ed reference to a lexical from "outside".  Such entries
are sometimes referred to as 'fake'.  In this case, the name does not
use 'low' and 'high' to store a cop_seq range, since it is in scope
throughout.  Instead 'high' stores some flags containing info about
the real lexical (is it declared in an anon, and is it capable of being
instantiated multiple times?), and for fake ANONs, 'low' contains the index
within the parent's pad where the lexical's value is stored, to make
cloning quicker.

If the 'name' is C<&> the corresponding entry in the PAD
is a CV representing a possible closure.

Note that formats are treated as anon subs, and are cloned each time
write is called (if necessary).

The flag C<SVs_PADSTALE> is cleared on lexicals each time the C<my()> is executed,
and set on scope exit.  This allows the
C<"Variable $x is not available"> warning
to be generated in evals, such as 

    { my $x = 1; sub f { eval '$x'} } f();

For state vars, C<SVs_PADSTALE> is overloaded to mean 'not yet initialised',
but this internal state is stored in a separate pad entry.

=over 3

 PADLIST *  CvPADLIST(CV *cv)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_add_name_pvs>
X<pad_add_name_pvs>

Exactly like L</pad_add_name_pvn>, but takes a literal string
instead of a string/length pair.

=over 3

 PADOFFSET  pad_add_name_pvs("name", U32 flags, HV *typestash,
                             HV *ourstash)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PadARRAY>
X<PadARRAY>

NOTE: C<PadARRAY> is B<experimental> and may change or be
removed without notice.

The C array of pad entries.

=over 3

 SV **  PadARRAY(PAD * pad)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<pad_findmy_pvs>
X<pad_findmy_pvs>

Exactly like L</pad_findmy_pvn>, but takes a literal string
instead of a string/length pair.

=over 3

 PADOFFSET  pad_findmy_pvs("name", U32 flags)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PadlistARRAY>
X<PadlistARRAY>

NOTE: C<PadlistARRAY> is B<experimental> and may change or be
removed without notice.

The C array of a padlist, containing the pads.  Only subscript it with
numbers >= 1, as the 0th entry is not guaranteed to remain usable.

=over 3

 PAD **  PadlistARRAY(PADLIST * padlist)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PadlistMAX>
X<PadlistMAX>

NOTE: C<PadlistMAX> is B<experimental> and may change or be
removed without notice.

The index of the last allocated space in the padlist.  Note that the last
pad may be in an earlier slot.  Any entries following it will be C<NULL> in
that case.

=over 3

 SSize_t  PadlistMAX(PADLIST * padlist)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PadlistNAMES>
X<PadlistNAMES>

NOTE: C<PadlistNAMES> is B<experimental> and may change or be
removed without notice.

The names associated with pad entries.

=over 3

 PADNAMELIST *  PadlistNAMES(PADLIST * padlist)

=back

=back

=for hackers
Found in file pad.h

=over 4

=item C<PadlistNAMESARRAY>
X<PadlistNAMESARRAY>

NOTE: C<PadlistNAMESARRAY> is B<experimental> and may change or be
removed without notice.

The C array of pad names.

=over 3

 PADNAME **  PadlistNAMESARRAY(PADLIST * padlist)

