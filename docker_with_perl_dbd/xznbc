check that the underlying library is LibreSSL and it's recent enough:

    if (Net::SSLeay::SSLeay() != 0x20000000 ||
            Net::SSLeay::LIBRESSL_VERSION_NUMBER() < 0x3040200f) {
        die "You need LibreSSL. Version 3.4.2 or higher";
    }

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OpenSSL_version_num.html>

See OpenSSL 1.1.1 and earlier documentation for the details of status
nibble and the format interpretation.

=item * SSLeay_version

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

Returns different strings depending on $type.

    my $ver_string = Net::SSLeay::SSLeay_version($type);
    # $type
    #   SSLEAY_VERSION  - e.g. 'OpenSSL 1.0.0d 8 Feb 2011'
    #   SSLEAY_CFLAGS   - e.g. 'compiler: gcc -D_WINDLL -DOPENSSL_USE_APPLINK .....'
    #   SSLEAY_BUILT_ON - e.g. 'built on: Fri May  6 00:00:46 GMT 2011'
    #   SSLEAY_PLATFORM - e.g. 'platform: mingw'
    #   SSLEAY_DIR      - e.g. 'OPENSSLDIR: "z:/...."'
    #
    # returns: string

    Net::SSLeay::SSLeay_version();
    # is equivalent to
    Net::SSLeay::SSLeay_version(SSLEAY_VERSION);

OpenSSL 1.1.0 changed SSLeay_version() to an alias of
OpenSSL_version(). To ensure correct functionality with LibreSSL, use
SSLEAY_* constants with SSLeay_version() and OPENSSL_* constants with
OpenSSL_version().

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OpenSSL_version.html>

OpenSSL website no longer has a manual page for SSLeay_version().

=item * OpenSSL_version

B<COMPATIBILITY:> requires at least Net-SSLeay-1.82 with OpenSSL
1.1.0, or Net-SSLeay-1.88 with LibreSSL 2.7.0.

Returns different strings depending on $t. Available $t constants
depend on the library version.

    my $ver_string = Net::SSLeay::OpenSSL_version($t);
    # $t
    #   OPENSSL_VERSION     - e.g. 'OpenSSL 1.1.0g  2 Nov 2017'
    #   OPENSSL_CFLAGS      - e.g. 'compiler: cc -DDSO_DLFCN -DHAVE_DLFCN_H .....'
    #   OPENSSL_BUILT_ON    - e.g. 'built on: reproducible build, date unspecified'
    #   OPENSSL_PLATFORM    - e.g. 'platform: darwin64-x86_64-cc'
    #   OPENSSL_DIR         - e.g. 'OPENSSLDIR: "/opt/openssl-1.1.0g"'
    #   OPENSSL_ENGINES_DIR - e.g. 'ENGINESDIR: "/opt/openssl-1.1.0g/lib/engines-1.1"'
    #
    # returns: string

    Net::SSLeay::OpenSSL_version();
    # is equivalent to
    Net::SSLeay::OpenSSL_version(OPENSSL_VERSION);

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OpenSSL_version.html>

=item * OPENSSL_info

B<COMPATIBILITY:> not available in Net-SSLeay-1.90 and before; requires at least OpenSSL 3.0.0-alpha1

Returns different strings depending on $t. Available $t constants
depend on the library version.

    my $info_string = Net::SSLeay::OPENSSL_info($t);
    # $t
    #   OPENSSL_INFO_CONFIG_DIR - e.g. '/opt/openssl-3.0.1'
    #   OPENSSL_INFO_...
    #
    # returns: string

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OPENSSL_info.html>

=item * OPENSSL_version_major, OPENSSL_version_minor and OPENSSL_version_patch

B<COMPATIBILITY:> not available in Net-SSLeay-1.90 and before; requires at least OpenSSL 3.0.0-alpha1, not in LibreSSL

Return constants OPENSSL_VERSION_MAJOR, OPENSSL_VERSION_MINOR and OPENSSL_VERSION_PATCH, respectively.

    my $major = Net::SSLeay::OPENSSL_version_major();
    my $minor = Net::SSLeay::OPENSSL_version_minor();
    my $patch = Net::SSLeay::OPENSSL_version_patch();
    #
    # return: integer

For example with OpenSSL 3.0.1, $major is 3, $minor is 0 and $patch is 1.

Note: the constants record Net::SSLeay compile time values whereas the
three functions return values from the library. Typically these are
the same, but they can be different if the library version is updated
but Net::SSLeay is not re-compiled. See the OpenSSL and LibreSSL
API/ABI compatibility statements for more information.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OPENSSL_version_major.html>

=item * OPENSSL_version_pre_release

B<COMPATIBILITY:> not available in Net-SSLeay-1.90 and before; requires at least OpenSSL 3.0.0-alpha1, not in LibreSSL

Return constant string defined by C macro OPENSSL_VERSION_PRE_RELEASE.

    my $pre_release = Net::SSLeay::OPENSSL_version_pre_release();
    #
    # returns: string (For example: "-alpha3" or "" for a release version)

When the macro is not defined, an empty string is returned instead.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OPENSSL_version_pre_release.html>

=item * OPENSSL_version_build_metadata

B<COMPATIBILITY:> not available in Net-SSLeay-1.90 and before; requires at least OpenSSL 3.0.0-alpha1, not in LibreSSL

Return constant string defined by C macro OPENSSL_VERSION_BUILD_METADATA.

    my $metadata = Net::SSLeay::OPENSSL_version_build_metadata();
    #
    # returns: string (For example: "+fips" or "")

When the macro is not defined, an empty string is returned instead.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OPENSSL_version_build_metadata.html>

=back

=head3 Low level API: Initialization related functions

=over

=item * library_init

Initialize SSL library by registering algorithms.

    my $rv = Net::SSLeay::library_init();

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_library_init.html>

While the original function from OpenSSL always returns 1, Net::SSLeay adds a
wrapper around it to make sure that the OpenSSL function is only called once.
Thus the function will return 1 if initialization was done and 0 if not, i.e. if
initialization was done already before.

=item * add_ssl_algorithms

The alias for L</library_init>

    Net::SSLeay::add_ssl_algorithms();

=item * OpenSSL_add_ssl_algorithms

The alias for L</library_init>

    Net::SSLeay::OpenSSL_add_ssl_algorithms();

=item * SSLeay_add_ssl_algorithms

The alias for L</library_init>

    Net::SSLeay::SSLeay_add_ssl_algorithms();

=item * load_error_strings

Registers the error strings for all libcrypto + libssl related functions.

    Net::SSLeay::load_error_strings();
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/ERR_load_crypto_strings.html>

=item * ERR_load_crypto_strings

Registers the error strings for all libcrypto functions. No need to call this function if you have already called L</load_error_strings>.

    Net::SSLeay::ERR_load_crypto_strings();
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/ERR_load_crypto_strings.html>

=item * ERR_load_RAND_strings

Registers the error strings for RAND related functions. No need to call this function if you have already called L</load_error_strings>.

    Net::SSLeay::ERR_load_RAND_strings();
    #
    # returns: no return value

=item * ERR_load_SSL_strings

Registers the error strings for SSL related functions. No need to call this function if you have already called L</load_error_strings>.

    Net::SSLeay::ERR_load_SSL_strings();
    #
    # returns: no return value

=item * OpenSSL_add_all_algorithms

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Add algorithms to internal table.

    Net::SSLeay::OpenSSL_add_all_algorithms();
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OpenSSL_add_all_algorithms.html>

=item * OPENSSL_add_all_algorithms_conf

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Similar to L</OpenSSL_add_all_algorithms> - will ALWAYS load the config file

    Net::SSLeay::OPENSSL_add_all_algorithms_conf();
    #
    # returns: no return value

=item * OPENSSL_add_all_algorithms_noconf

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Similar to L</OpenSSL_add_all_algorithms> - will NEVER load the config file

    Net::SSLeay::OPENSSL_add_all_algorithms_noconf();
    #
    # returns: no return value

=item * OPENSSL_cleanup

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before;
requires at least OpenSSL 1.1.0-pre3 or LibreSSL 3.6.0

Deinitialises OpenSSL libcrypto and libssl.

    Net::SSLeay::OPENSSL_cleanup();
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OPENSSL_cleanup>

=item * OPENSSL_init_crypto

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before;
requires at least OpenSSL 1.1.0-pre3 not enabled for
LibreSSL. LibreSSL does not define C<OPENSSL_INIT_SETTINGS>.

Initialises OpenSSL C<libcrypto> with non-default settings.

    my $rv = Net::SSLeay::OPENSSL_init_crypto($opts, $settings);
    # $opts - (uin64_t) flags to be set (bitmask)
    # $settings - value corresponding to OPENSSL_INIT_SETTINGS structure or undef (optional)
    #
    # returns: 1 on success or 0 on error

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OPENSSL_init_crypto>

=item * OPENSSL_init_ssl

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before;
requires at least OpenSSL 1.1.0-pre3 not enabled for
LibreSSL. LibreSSL does not define C<OPENSSL_INIT_SETTINGS>.

Initialises OpenSSL C<libssl> with non-default settings.

    my $rv = Net::SSLeay::OPENSSL_init_ssl($opts, $settings);
    # $opts - (uin64_t) flags to be set (bitmask)
    # $settings - value corresponding to OPENSSL_INIT_SETTINGS structure or undef (optional)
    #
    # returns: 1 on success or 0 on error

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OPENSSL_init_ssl>

=item * OPENSSL_INIT_new

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before;
requires at least OpenSSL 1.1.0-pre3, not in LibreSSL

Allocates an OpenSSL C<OPENSSL_INIT_SETTINGS> object.

    my $settings = Net::SSLeay::OPENSSL_init_new()
    #
    # returns: value corresponding to OPENSSL_INIT_SETTINGS structure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OPENSSL_INIT_new>

=item * OPENSSL_INIT_free

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before;
requires at least OpenSSL 1.1.0-pre3, not in LibreSSL

Releases an OpenSSL C<OPENSSL_INIT_SETTINGS> object allocated with
C<OPENSSL_INIT_new>.

    Net::SSLeay::OPENSSL_init_free($settings)
    # $settings - value corresponding to OPENSSL_INIT_SETTINGS structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OPENSSL_INIT_free>

=item * OPENSSL_INIT_set_config_filename

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before;
requires at least OpenSSL 1.1.0-pre3, not in LibreSSL

Specify a nondefault filename to load as OpenSSL configuration file.

    my $rv = Net::SSLeay::OPENSSL_INIT_set_config_filename($settings, $filename);
    # $settings - value corresponding to OPENSSL_INIT_SETTINGS structure
    # $filename - (string) filename
    #
    # returns: 1 on success or 0 on error

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OPENSSL_INIT_set_config_filename>

=item * OPENSSL_INIT_set_config_appname

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before;
requires at least OpenSSL 1.1.0-pre3, not in LibreSSL

Specify a nondefault application name.

    my $rv = Net::SSLeay::OPENSSL_INIT_set_config_appname($settings, $name);
    # $settings - value corresponding to OPENSSL_INIT_SETTINGS structure
    # $name - (string) application name
    #
    # returns: 1 on success or 0 on error

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OPENSSL_INIT_set_config_appname>

=item * OPENSSL_INIT_set_config_file_flags

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before;
requires at least OpenSSL 3.0.0-alpha1, not in LibreSSL

Specify nondefault flags for loading OpenSSL configuration file.

    my $rv = Net::SSLeay::OPENSSL_INIT_set_config_file_flags($settings, $flags);
    # $settings - value corresponding to OPENSSL_INIT_SETTINGS structure
    # $flags - (unsigned long) flags to be set (bitmask)
    #
    # returns: 1 on success or 0 on error

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OPENSSL_INIT_set_config_file_flags>

=back

=head3 Low level API: ERR_* and SSL_alert_* related functions

B<NOTE:> Please note that SSL_alert_* function have "SSL_" part stripped from their names.

=over

=item * ERR_clear_error

Clear the error queue.

    Net::SSLeay::ERR_clear_error();
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/ERR_clear_error.html>

=item * ERR_error_string

Generates a human-readable string representing the error code $error.

    my $rv = Net::SSLeay::ERR_error_string($error);
    # $error - (unsigned integer) error code
    #
    # returns: string

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/ERR_error_string.html>

=item * ERR_get_error

Returns the earliest error code from the thread's error queue and removes the entry.
This function can be called repeatedly until there are no more error codes to return.

    my $rv = Net::SSLeay::ERR_get_error();
    #
    # returns: (unsigned integer) error code

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/ERR_get_error.html>

=item * ERR_peek_error

Returns the earliest error code from the thread's error queue without modifying it.

    my $rv = Net::SSLeay::ERR_peek_error();
    #
    # returns: (unsigned integer) error code

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/ERR_get_error.html>

=item * ERR_put_error

Adds an error code to the thread's error queue. It signals that the error of $reason
code reason occurred in function $func of library $lib, in line number $line of $file.

    Net::SSLeay::ERR_put_error($lib, $func, $reason, $file, $line);
    # $lib - (integer) library id (check openssl/err.h for constants e.g. ERR_LIB_SSL)
    # $func - (integer) function id (check openssl/ssl.h for constants e.g. SSL_F_SSL23_READ)
    # $reason - (integer) reason id (check openssl/ssl.h for constants e.g. SSL_R_SSL_HANDSHAKE_FAILURE)
    # $file - (string) file name
    # $line - (integer) line number in $file
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/ERR_put_error.html>
and L<https://www.openssl.org/docs/manmaster/man3/err.html>

=item * alert_desc_string

Returns a two letter string as a short form describing the reason of the alert specified by value.

    my $rv = Net::SSLeay::alert_desc_string($value);
    # $value - (integer) alert id (check openssl/ssl.h for SSL3_AD_* and TLS1_AD_* constants)
    #
    # returns: description string (2 letters)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_alert_type_string.html>

=item * alert_desc_string_long

Returns a string describing the reason of the alert specified by value.

    my $rv = Net::SSLeay::alert_desc_string_long($value);
    # $value - (integer) alert id (check openssl/ssl.h for SSL3_AD_* and TLS1_AD_* constants)
    #
    # returns: description string

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_alert_type_string.html>

=item * alert_type_string

Returns a one letter string indicating the type of the alert specified by value.

    my $rv = Net::SSLeay::alert_type_string($value);
    # $value - (integer) alert id (check openssl/ssl.h for SSL3_AD_* and TLS1_AD_* constants)
    #
    # returns: string (1 letter)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_alert_type_string.html>

=item * alert_type_string_long

Returns a string indicating the type of the alert specified by value.

    my $rv = Net::SSLeay::alert_type_string_long($value);
    # $value - (integer) alert id (check openssl/ssl.h for SSL3_AD_* and TLS1_AD_* constants)
    #
    # returns: string

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_alert_type_string.html>

=back

=head3 Low level API: SSL_METHOD_* related functions

=over

=item * SSLv23_method, SSLv23_server_method and SSLv23_client_method

B<COMPATIBILITY:> not available in Net-SSLeay-1.82 and before.

Returns SSL_METHOD structure corresponding to general-purpose version-flexible TLS method, the return value can be later used as a param of L</CTX_new_with_method>.

B<NOTE:> Consider using TLS_method, TLS_server_method or TLS_client_method with new code.

    my $rv = Net::SSLeay::SSLv2_method();
    #
    # returns: value corresponding to openssl's SSL_METHOD structure (0 on failure)

=item * SSLv2_method

Returns SSL_METHOD structure corresponding to SSLv2 method, the return value can be later used as a param of L</CTX_new_with_method>. Only available where supported by the underlying openssl.

    my $rv = Net::SSLeay::SSLv2_method();
    #
    # returns: value corresponding to openssl's SSL_METHOD structure (0 on failure)

=item * SSLv3_method

Returns SSL_METHOD structure corresponding to SSLv3 method, the return value can be later used as a param of L</CTX_new_with_method>.

    my $rv = Net::SSLeay::SSLv3_method();
    #
    # returns: value corresponding to openssl's SSL_METHOD structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_new.html>

=item * TLSv1_method, TLSv1_server_method and TLSv1_client_method

B<COMPATIBILITY:> Requires OpenSSL or LibreSSL built with support for TLSv1. Server and client methods not available in Net-SSLeay-1.82 and before.

Returns SSL_METHOD structure corresponding to TLSv1 method, the return value can be later used as a param of L</CTX_new_with_method>.

    my $rv = Net::SSLeay::TLSv1_method();
    #
    # returns: value corresponding to openssl's SSL_METHOD structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_new.html>

=item * TLSv1_1_method, TLSv1_1_server_method and TLSv1_1_client_method

B<COMPATIBILITY:> Requires OpenSSL >= 1.0.1 or LibreSSL built with support for TLSv1.1. Server and client methods not available in Net-SSLeay-1.82 and before.

Returns SSL_METHOD structure corresponding to TLSv1_1 method, the return value can be later used as a param of L</CTX_new_with_method>.

    my $rv = Net::SSLeay::TLSv1_1_method();
    #
    # returns: value corresponding to openssl's SSL_METHOD structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_new.html>

=item * TLSv1_2_method, TLSv1_2_server_method and TLSv1_2_client_method

B<COMPATIBILITY:> Requires OpenSSL >= 1.0.1 or LibreSSL built with support for TLSv1.2. Server and client methods not available in Net-SSLeay-1.82 and before.

Returns SSL_METHOD structure corresponding to TLSv1_2 method, the return value can be later used as a param of L</CTX_new_with_method>.

    my $rv = Net::SSLeay::TLSv1_2_method();
    #
    # returns: value corresponding to openssl's SSL_METHOD structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_new.html>

=item * TLS_method, TLS_server_method and TLS_client_method

B<COMPATIBILITY:> Not available in Net-SSLeay-1.82 and before.

Returns SSL_METHOD structure corresponding to general-purpose version-flexible TLS method, the return value can be later used as a param of L</CTX_new_with_method>. Only available where supported by the underlying openssl.

    my $rv = Net::SSLeay::TLS_method();
    #
    # returns: value corresponding to openssl's SSL_METHOD structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CTX_new.html>

=back

=head3 Low level API: ENGINE_* related functions

=over

=item * ENGINE_load_builtin_engines

B<COMPATIBILITY:> Requires an OpenSSL build with dynamic engine loading support.

Load all bundled ENGINEs into memory and make them visible.

    Net::SSLeay::ENGINE_load_builtin_engines();
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/ENGINE_by_id.html>

=item * ENGINE_register_all_complete

B<COMPATIBILITY:> Requires an OpenSSL build with dynamic engine loading support.

Register all loaded ENGINEs for every algorithm they collectively implement.

    Net::SSLeay::ENGINE_register_all_complete();
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/ENGINE_by_id.html>

=item * ENGINE_set_default

B<COMPATIBILITY:> Requires an OpenSSL build with dynamic engine loading support.

Set default engine to $e + set its flags to $flags.

    my $rv = Net::SSLeay::ENGINE_set_default($e, $flags);
    # $e - value corresponding to openssl's ENGINE structure
    # $flags - (integer) engine flags
    #          flags value can be made by bitwise "OR"ing:
    #          0x0001 - ENGINE_METHOD_RSA
    #          0x0002 - ENGINE_METHOD_DSA
    #          0x0004 - ENGINE_METHOD_DH
    #          0x0008 - ENGINE_METHOD_RAND
    #          0x0010 - ENGINE_METHOD_ECDH
    #          0x0020 - ENGINE_METHOD_ECDSA
    #          0x0040 - ENGINE_METHOD_CIPHERS
    #          0x0080 - ENGINE_METHOD_DIGESTS
    #          0x0100 - ENGINE_METHOD_STORE
    #          0x0200 - ENGINE_METHOD_PKEY_METHS
    #          0x0400 - ENGINE_METHOD_PKEY_ASN1_METHS
    #          Obvious all-or-nothing cases:
    #          0xFFFF - ENGINE_METHOD_ALL
    #          0x0000 - ENGINE_METHOD_NONE
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/ENGINE_by_id.html>

=item * ENGINE_by_id

Get ENGINE by its identification $id.

B<COMPATIBILITY:> Requires an OpenSSL build with dynamic engine loading support.

    my $rv = Net::SSLeay::ENGINE_by_id($id);
    # $id - (string) engine identification e.g. "dynamic"
    #
    # returns: value corresponding to openssl's ENGINE structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/ENGINE_by_id.html>

=back

=head3 Low level API: EVP_PKEY_* related functions

=over

=item * EVP_PKEY_copy_parameters

Copies the parameters from key $from to key $to.

    my $rv = Net::SSLeay::EVP_PKEY_copy_parameters($to, $from);
    # $to - value corresponding to openssl's EVP_PKEY structure
    # $from - value corresponding to openssl's EVP_PKEY structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/EVP_PKEY_cmp.html>

=item * EVP_PKEY_new

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Creates a new EVP_PKEY structure.

    my $rv = Net::SSLeay::EVP_PKEY_new();
    #
    # returns: value corresponding to openssl's EVP_PKEY structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/EVP_PKEY_new.html>

=item * EVP_PKEY_free

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Free an allocated EVP_PKEY structure.

    Net::SSLeay::EVP_PKEY_free($pkey);
    # $pkey - value corresponding to openssl's EVP_PKEY structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/EVP_PKEY_new.html>

=item * EVP_PKEY_assign_RSA

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Set the key referenced by $pkey to $key

B<NOTE:> No reference counter will be increased, i.e. $key will be freed if
$pkey is freed.

    my $rv = Net::SSLeay::EVP_PKEY_assign_RSA($pkey, $key);
    # $pkey - value corresponding to openssl's EVP_PKEY structure
    # $key - value corresponding to openssl's RSA structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/EVP_PKEY_assign_RSA.html>

=item * EVP_PKEY_assign_EC_KEY

B<COMPATIBILITY:> not available in Net-SSLeay-1.74 and before

Set the key referenced by $pkey to $key

B<NOTE:> No reference counter will be increased, i.e. $key will be freed if
$pkey is freed.

    my $rv = Net::SSLeay::EVP_PKEY_assign_EC_KEY($pkey, $key);
    # $pkey - value corresponding to openssl's EVP_PKEY structure
    # $key - value corresponding to openssl's EC_KEY structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/EVP_PKEY_assign_EC_KEY.html>

=item * EVP_PKEY_bits

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns the size of the key $pkey in bits.

    my $rv = Net::SSLeay::EVP_PKEY_bits($pkey);
    # $pkey - value corresponding to openssl's EVP_PKEY structure
    #
    # returns: size in bits

=item * EVP_PKEY_security_bits

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before; requires at least OpenSSL 1.1.0 or at least LibreSSL 3.6.0 and Net-SSLeay-1.94

Returns the size of the key $pkey in bits.

    my $rv = Net::SSLeay::EVP_PKEY_security_bits($pkey);
    # $pkey - value corresponding to openssl's EVP_PKEY structure
    #
    # returns: number of bits

=item * EVP_PKEY_size

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns the maximum size of a signature in bytes. The actual signature may be smaller.

    my $rv = Net::SSLeay::EVP_PKEY_size($pkey);
    # $pkey - value corresponding to openssl's EVP_PKEY structure
    #
    # returns: the maximum size in bytes

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/EVP_PKEY_size.html>

=item * EVP_PKEY_id

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before; requires at least OpenSSL 1.0.0

Returns $pkey type (integer value of corresponding NID).

    my $rv = Net::SSLeay::EVP_PKEY_id($pkey);
    # $pkey - value corresponding to openssl's EVP_PKEY structure
    #
    # returns: (integer) key type

Example:

    my $pubkey = Net::SSLeay::X509_get_pubkey($x509);
    my $type = Net::SSLeay::EVP_PKEY_id($pubkey);
    print Net::SSLeay::OBJ_nid2sn($type);             # prints e.g. 'rsaEncryption'

=back

=head3 Low level API: PEM_* related functions

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/pem.html>

=over

=item * PEM_read_bio_X509

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Loads PEM formatted X509 certificate via given BIO structure.

    my $rv = Net::SSLeay::PEM_read_bio_X509($bio);
    # $bio - value corresponding to openssl's BIO structure
    #
    # returns: value corresponding to openssl's X509 structure (0 on failure)

Example:

    my $bio = Net::SSLeay::BIO_new_file($filename, 'r');
    my $x509 = Net::SSLeay::PEM_read_bio_X509($bio);
    Net::SSLeay::BIO_free($bio);

=item * PEM_read_bio_X509_REQ

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Loads PEM formatted X509_REQ object via given BIO structure.

    my $rv = Net::SSLeay::PEM_read_bio_X509_REQ($bio, $x=NULL, $cb=NULL, $u=NULL);
    # $bio - value corresponding to openssl's BIO structure
    #
    # returns: value corresponding to openssl's X509_REQ structure (0 on failure)

Example:

    my $bio = Net::SSLeay::BIO_new_file($filename, 'r');
    my $x509_req = Net::SSLeay::PEM_read_bio_X509_REQ($bio);
    Net::SSLeay::BIO_free($bio);

=item * PEM_read_bio_DHparams

Reads DH structure from BIO.

    my $rv = Net::SSLeay::PEM_read_bio_DHparams($bio);
    # $bio - value corresponding to openssl's BIO structure
    #
    # returns: value corresponding to openssl's DH structure (0 on failure)

=item * PEM_read_bio_X509_CRL

Reads X509_CRL structure from BIO.

    my $rv = Net::SSLeay::PEM_read_bio_X509_CRL($bio);
    # $bio - value corresponding to openssl's BIO structure
    #
    # returns: value corresponding to openssl's X509_CRL structure (0 on failure)

=item * PEM_read_bio_PrivateKey

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Loads PEM formatted private key via given BIO structure.

    my $rv = Net::SSLeay::PEM_read_bio_PrivateKey($bio, $cb, $data);
    # $bio - value corresponding to openssl's BIO structure
    # $cb - reference to perl callback function
    # $data - data that will be passed to callback function (see examples below)
    #
    # returns: value corresponding to openssl's EVP_PKEY structure (0 on failure)

Example:

    my $bio = Net::SSLeay::BIO_new_file($filename, 'r');
    my $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio); # ask for password if needed
    Net::SSLeay::BIO_free($bio);

To use password you have the following options:

    $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, \&callback_func); # use callback func for getting password
    $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, \&callback_func, $data); # use callback_func + pass $data to callback_func
    $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, undef, "secret"); # use password "secret"
    $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, undef, "");       # use empty password

Callback function signature:

    sub callback_func {
        my ($max_passwd_size, $rwflag, $data) = @_;
        # $max_passwd_size - maximum size of returned password (longer values will be discarded)
        # $rwflag - indicates whether we are loading (0) or storing (1) - for PEM_read_bio_PrivateKey always 0
        # $data - the data passed to PEM_read_bio_PrivateKey as 3rd parameter

        return "secret";
    }

=item * PEM_X509_INFO_read_bio

Reads a BIO containing a PEM formatted file into a STACK_OF(X509_INFO) structure.

    my $rv = Net::SSLeay::PEM_X509_INFO_read_bio($bio);
    # $bio - value corresponding to openssl's BIO structure
    #
    # returns: value corresponding to openssl's STACK_OF(X509_INFO) structure.

Example:

    my $bio = Net::SSLeay::BIO_new_file($filename, 'r');
    my $sk_x509_info = Net::SSLeay::PEM_X509_INFO_read_bio($bio);
    Net::SSLeay::BIO_free($bio);

=item * PEM_get_string_X509

B<NOTE:> Does not exactly correspond to any low level API function

Converts/exports X509 certificate to string (PEM format).

    Net::SSLeay::PEM_get_string_X509($x509);
    # $x509 - value corresponding to openssl's X509 structure
    #
    # returns: string with $x509 in PEM format

=item * PEM_get_string_PrivateKey

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before. Requires legacy provider with OpenSSL 3.0 and later if the default value of C<$enc_alg> (C<DES_CBC>) is used.

Converts public key $pk into PEM formatted string (optionally protected with password).

    my $rv = Net::SSLeay::PEM_get_string_PrivateKey($pk, $passwd, $enc_alg);
    # $pk - value corresponding to openssl's EVP_PKEY structure
    # $passwd - [optional] (string) password to use for key encryption
    # $enc_alg - [optional] algorithm to use for key encryption (default: DES_CBC) - value corresponding to openssl's EVP_CIPHER structure
    #
    # returns: PEM formatted string

Examples:

    $pem_privkey = Net::SSLeay::PEM_get_string_PrivateKey($pk);
    $pem_privkey = Net::SSLeay::PEM_get_string_PrivateKey($pk, "secret");
    $pem_privkey = Net::SSLeay::PEM_get_string_PrivateKey($pk, "secret", Net::SSLeay::EVP_get_cipherbyname("DES-EDE3-CBC"));

=item * PEM_get_string_X509_CRL

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Converts X509_CRL object $x509_crl into PEM formatted string.

    Net::SSLeay::PEM_get_string_X509_CRL($x509_crl);
    # $x509_crl - value corresponding to openssl's X509_CRL structure
    #
    # returns: no return value

=item * PEM_get_string_X509_REQ

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Converts X509_REQ object $x509_crl into PEM formatted string.

    Net::SSLeay::PEM_get_string_X509_REQ($x509_req);
    # $x509_req - value corresponding to openssl's X509_REQ structure
    #
    # returns: no return value

=back

=head3 Low level API: d2i_* (DER format) related functions

=over

=item * d2i_X509_bio

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Loads DER formatted X509 certificate via given BIO structure.

    my $rv = Net::SSLeay::d2i_X509_bio($bp);
    # $bp - value corresponding to openssl's BIO structure
    #
    # returns: value corresponding to openssl's X509 structure (0 on failure)

Example:

    my $bio = Net::SSLeay::BIO_new_file($filename, 'rb');
    my $x509 = Net::SSLeay::d2i_X509_bio($bio);
    Net::SSLeay::BIO_free($bio);

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/d2i_X509.html>

=item * d2i_X509_CRL_bio

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Loads DER formatted X509_CRL object via given BIO structure.

    my $rv = Net::SSLeay::d2i_X509_CRL_bio($bp);
    # $bp - value corresponding to openssl's BIO structure
    #
    # returns: value corresponding to openssl's X509_CRL structure (0 on failure)

Example:

    my $bio = Net::SSLeay::BIO_new_file($filename, 'rb');
    my $x509_crl = Net::SSLeay::d2i_X509_CRL_bio($bio);
    Net::SSLeay::BIO_free($bio);

=item * d2i_X509_REQ_bio

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Loads DER formatted X509_REQ object via given BIO structure.

    my $rv = Net::SSLeay::d2i_X509_REQ_bio($bp);
    # $bp - value corresponding to openssl's BIO structure
    #
    # returns: value corresponding to openssl's X509_REQ structure (0 on failure)

Example:

    my $bio = Net::SSLeay::BIO_new_file($filename, 'rb');
    my $x509_req = Net::SSLeay::d2i_X509_REQ_bio($bio);
    Net::SSLeay::BIO_free($bio);

=back

=head3 Low level API: PKCS12 related functions

=over

=item * P_PKCS12_load_file

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Loads X509 certificate + private key + certificates of CA chain (if present in PKCS12 file).

    my ($privkey, $cert, @cachain) = Net::SSLeay::P_PKCS12_load_file($filename, $load_chain, $password);
    # $filename - name of PKCS12 file
    # $load_chain - [optional] whether load (1) or not(0) CA chain (default: 0)
    # $password - [optional] password for private key
    #
    # returns: triplet ($privkey, $cert, @cachain)
    #          $privkey - value corresponding to openssl's EVP_PKEY structure
    #          $cert - value corresponding to openssl's X509 structure
    #          @cachain - array of values corresponding to openssl's X509 structure (empty if no CA chain in PKCS12)

B<IMPORTANT NOTE:> after you do the job you need to call X509_free() on $privkey + all members
of @cachain and EVP_PKEY_free() on $privkey.

Examples:
