
=for hackers
Found in file config.h

=over 4

=item C<PERL_STATIC_INLINE>
X<PERL_STATIC_INLINE>

This symbol gives the best-guess incantation to use for static
inline functions.  If C<HAS_STATIC_INLINE> is defined, this will
give C99-style inline.  If C<HAS_STATIC_INLINE> is not defined,
this will give a plain 'static'.  It will always be defined
to something that gives static linkage.
Possibilities include

 static inline       (c99)
 static __inline__   (gcc -ansi)
 static __inline     (MSVC)
 static _inline      (older MSVC)
 static              (c89 compilers)

=back

=for hackers
Found in file config.h

=over 4

=item C<PERL_THREAD_LOCAL>
X<PERL_THREAD_LOCAL>

This symbol, if defined, gives a linkage specification for thread-local
storage. For example, for a C11 compiler this will be C<_Thread_local>.
Beware, some compilers are sensitive to the C language standard they are
told to parse. For example, suncc defaults to C11, so our probe will
report that C<_Thread_local> can be used. However, if the -std=c99 is later
added to the compiler flags, then C<_Thread_local> will become a syntax
error. Hence it is important for these flags to be consistent between
probing and use.

=back

=for hackers
Found in file config.h

=over 4

=item C<U32_ALIGNMENT_REQUIRED>
X<U32_ALIGNMENT_REQUIRED>

This symbol, if defined, indicates that you must access
character data through U32-aligned pointers.

=back

=for hackers
Found in file config.h

=head1 Compiler directives

=over 4

=item C<__ASSERT_>
X<__ASSERT_>

This is a helper macro to avoid preprocessor issues, replaced by nothing
unless under DEBUGGING, where it expands to an assert of its argument,
followed by a comma (hence the comma operator).  If we just used a straight
assert(), we would get a comma with nothing before it when not DEBUGGING.

=over 3

   __ASSERT_(bool expr)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<ASSUME>
X<ASSUME>

C<ASSUME> is like C<assert()>, but it has a benefit in a release build. It is a
hint to a compiler about a statement of fact in a function call free
expression, which allows the compiler to generate better machine code.  In a
debug build, C<ASSUME(x)> is a synonym for C<assert(x)>. C<ASSUME(0)> means the
control path is unreachable. In a for loop, C<ASSUME> can be used to hint that
a loop will run at least X times. C<ASSUME> is based off MSVC's C<__assume>
intrinsic function, see its documents for more details.

=over 3

   ASSUME(bool expr)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<dNOOP>
X<dNOOP>

Declare nothing; typically used as a placeholder to replace something that used
to declare something.  Works on compilers that require declarations before any
code.

=over 3

   dNOOP;

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<END_EXTERN_C>
X<END_EXTERN_C>

When not compiling using C++, expands to nothing.
Otherwise ends a section of code already begun by a C<L</START_EXTERN_C>>.

=over 3

   END_EXTERN_C

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<EXTERN_C>
X<EXTERN_C>

When not compiling using C++, expands to nothing.
Otherwise is used in a declaration of a function to indicate the function
should have external C linkage.  This is required for things to work for just
about all functions with external linkage compiled into perl.
Often, you can use C<L</START_EXTERN_C>> ... C<L</END_EXTERN_C>> blocks
surrounding all your code that you need to have this linkage.

Example usage:

 EXTERN_C int flock(int fd, int op);

=back

=for hackers
Found in file perl.h

=over 4

=item C<LIKELY>
X<LIKELY>

Returns the input unchanged, but at the same time it gives a branch prediction
hint to the compiler that this condition is likely to be true.

=over 3

   LIKELY(bool expr)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<NOOP>
X<NOOP>

Do nothing; typically used as a placeholder to replace something that used to
do something.

=over 3

   NOOP;

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<PERL_UNUSED_ARG>
X<PERL_UNUSED_ARG>

This is used to suppress compiler warnings that a parameter to a function is
not used.  This situation can arise, for example, when a parameter is needed
under some configuration conditions, but not others, so that C preprocessor
conditional compilation causes it be used just sometimes.

=over 3

   PERL_UNUSED_ARG(void x);

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<PERL_UNUSED_CONTEXT>
X<PERL_UNUSED_CONTEXT>

This is used to suppress compiler warnings that the thread context parameter to
a function is not used.  This situation can arise, for example, when a
C preprocessor conditional compilation causes it be used just some times.

=over 3

   PERL_UNUSED_CONTEXT;

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<PERL_UNUSED_DECL>
X<PERL_UNUSED_DECL>

Tells the compiler that the parameter in the function prototype just before it
is not necessarily expected to be used in the function.  Not that many
compilers understand this, so this should only be used in cases where
C<L</PERL_UNUSED_ARG>> can't conveniently be used.

Example usage:

=over

 Signal_t
 Perl_perly_sighandler(int sig, Siginfo_t *sip PERL_UNUSED_DECL,
                       void *uap PERL_UNUSED_DECL, bool safe)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<PERL_UNUSED_RESULT>
X<PERL_UNUSED_RESULT>

This macro indicates to discard the return value of the function call inside
it, I<e.g.>,

 PERL_UNUSED_RESULT(foo(a, b))

The main reason for this is that the combination of C<gcc -Wunused-result>
(part of C<-Wall>) and the C<__attribute__((warn_unused_result))> cannot
be silenced with casting to C<void>.  This causes trouble when the system
header files use the attribute.

Use C<PERL_UNUSED_RESULT> sparingly, though, since usually the warning
is there for a good reason: you might lose success/failure information,
or leak resources, or changes in resources.

But sometimes you just want to ignore the return value, I<e.g.>, on
codepaths soon ending up in abort, or in "best effort" attempts,
or in situations where there is no good way to handle failures.

Sometimes C<PERL_UNUSED_RESULT> might not be the most natural way:
another possibility is that you can capture the return value
and use C<L</PERL_UNUSED_VAR>> on that.

=over 3

   PERL_UNUSED_RESULT(void x)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<PERL_UNUSED_VAR>
X<PERL_UNUSED_VAR>

This is used to suppress compiler warnings that the variable I<x> is not used.
This situation can arise, for example, when a C preprocessor conditional
compilation causes it be used just some times.

=over 3

   PERL_UNUSED_VAR(void x);

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<START_EXTERN_C>
X<START_EXTERN_C>

When not compiling using C++, expands to nothing.
Otherwise begins a section of code in which every function will effectively
have C<L</EXTERN_C>> applied to it, that is to have external C linkage.  The
section is ended by a C<L</END_EXTERN_C>>.

=over 3

   START_EXTERN_C

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<STATIC>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<STMT_END>

=item C<STMT_START>
X<STMT_END>X<STMT_START>

These allow a series of statements in a macro to be used as a single statement,
as in

 if (x) STMT_START { ... } STMT_END else ...

Note that you can't return a value out of this construct and cannot use it as
an operand to the comma operator.  These limit its utility.

But, a value could be returned by constructing the API so that a pointer is
passed and the macro dereferences this to set the return.  If the value can be
any of various types, depending on context, you can handle that situation in
some situations by adding the type of the return as an extra accompanying
parameter:

 #define foo(param, type)  STMT_START {
                              type * param; *param = do_calc; ...
                           } STMT_END

This could be awkward, so consider instead using a C language C<static inline>
function.

If you do use this construct, it is easy to forget that it is a macro and not a
function, and hence fall into traps that might not show up until someone
someday writes code which contains names that clash with the ones you chose
here, or calls it with a parameter which is an expression with side effects,
the consequences of which you didn't think about.  See L<perlhacktips/Writing
safer macros> for how to avoid these.

=back

=for hackers
Found in file perl.h

=over 4

=item C<UNLIKELY>
X<UNLIKELY>

Returns the input unchanged, but at the same time it gives a branch prediction
hint to the compiler that this condition is likely to be false.

=over 3

   UNLIKELY(bool expr)

=back

=back

=for hackers
Found in file perl.h

=head1 Compile-time scope hooks

=over 4

=item C<BhkDISABLE>
X<BhkDISABLE>

NOTE: C<BhkDISABLE> is B<experimental> and may change or be
removed without notice.

Temporarily disable an entry in this BHK structure, by clearing the
appropriate flag.  C<which> is a preprocessor token indicating which
entry to disable.

=over 3

 void  BhkDISABLE(BHK *hk, token which)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<BhkENABLE>
X<BhkENABLE>

NOTE: C<BhkENABLE> is B<experimental> and may change or be
removed without notice.

Re-enable an entry in this BHK structure, by setting the appropriate
flag.  C<which> is a preprocessor token indicating which entry to enable.
This will assert (under -DDEBUGGING) if the entry doesn't contain a valid
pointer.

=over 3

 void  BhkENABLE(BHK *hk, token which)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<BhkENTRY_set>
X<BhkENTRY_set>

NOTE: C<BhkENTRY_set> is B<experimental> and may change or be
removed without notice.

Set an entry in the BHK structure, and set the flags to indicate it is
valid.  C<which> is a preprocessing token indicating which entry to set.
The type of C<ptr> depends on the entry.

=over 3

 void  BhkENTRY_set(BHK *hk, token which, void *ptr)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<blockhook_register>
X<blockhook_register>

NOTE: C<blockhook_register> is B<experimental> and may change or be
removed without notice.

Register a set of hooks to be called when the Perl lexical scope changes
at compile time.  See L<perlguts/"Compile-time scope hooks">.

NOTE: C<blockhook_register> must be explicitly called as
C<Perl_blockhook_register>
with an C<aTHX_> parameter.

=over 3

 void  Perl_blockhook_register(pTHX_ BHK *hk)

=back

=back

=for hackers
Found in file op.c

=head1 Concurrency

=over 4

=item C<aTHX>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<aTHX_>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<CPERLscope>
X<CPERLscope>

C<B<DEPRECATED!>>  It is planned to remove C<CPERLscope>
from a future release of Perl.  Do not use it for
new code; remove it from existing code.

Now a no-op.

=over 3

 void  CPERLscope(void x)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<dTHR>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<dTHX>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<dTHXa>
X<dTHXa>

On threaded perls, set C<pTHX> to C<a>; on unthreaded perls, do nothing

=back

=for hackers
Found in file perl.h

=over 4

=item C<dTHXoa>
X<dTHXoa>

Now a synonym for C<L</dTHXa>>.

=back

=for hackers
Found in file perl.h

=over 4

=item C<dVAR>
X<dVAR>

This is now a synonym for dNOOP: declare nothing

=back

=for hackers
Found in file perl.h

=over 4

=item C<GETENV_PRESERVES_OTHER_THREAD>
X<GETENV_PRESERVES_OTHER_THREAD>

This symbol, if defined, indicates that the getenv system call doesn't
zap the static buffer of C<getenv()> in a different thread.
The typical C<getenv()> implementation will return a pointer to the proper
position in **environ.  But some may instead copy them to a static
buffer in C<getenv()>.  If there is a per-thread instance of that buffer,
or the return points to **environ, then a many-reader/1-writer mutex
will work; otherwise an exclusive locking mutex is required to prevent
races.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_PTHREAD_ATFORK>
X<HAS_PTHREAD_ATFORK>

This symbol, if defined, indicates that the C<pthread_atfork> routine
is available to setup fork handlers.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_PTHREAD_ATTR_SETSCOPE>
X<HAS_PTHREAD_ATTR_SETSCOPE>

This symbol, if defined, indicates that the C<pthread_attr_setscope>
system call is available to set the contention scope attribute of
a thread attribute object.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_PTHREAD_YIELD>
X<HAS_PTHREAD_YIELD>

This symbol, if defined, indicates that the C<pthread_yield>
routine is available to yield the execution of the current
thread.  C<sched_yield> is preferable to C<pthread_yield>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SCHED_YIELD>
X<HAS_SCHED_YIELD>

This symbol, if defined, indicates that the C<sched_yield>
routine is available to yield the execution of the current
thread.  C<sched_yield> is preferable to C<pthread_yield>.

=back

=for hackers
Found in file config.h

=over 4

=item C<I_MACH_CTHREADS>
X<I_MACH_CTHREADS>

This symbol, if defined, indicates to the C program that it should
include F<mach/cthreads.h>.

=over 3

 #ifdef I_MACH_CTHREADS
     #include <mach_cthreads.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<I_PTHREAD>
X<I_PTHREAD>

This symbol, if defined, indicates to the C program that it should
include F<pthread.h>.

=over 3

 #ifdef I_PTHREAD
     #include <pthread.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<MULTIPLICITY>

This symbol, if defined, indicates that Perl should
be built to use multiplicity.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<OLD_PTHREAD_CREATE_JOINABLE>
X<OLD_PTHREAD_CREATE_JOINABLE>

This symbol, if defined, indicates how to create pthread
in joinable (aka undetached) state.  C<NOTE>: not defined
if F<pthread.h> already has defined C<PTHREAD_CREATE_JOINABLE>
(the new version of the constant).
If defined, known values are C<PTHREAD_CREATE_UNDETACHED>
and C<__UNDETACHED>.

=back

=for hackers
Found in file config.h

=over 4

=item C<OLD_PTHREADS_API>
X<OLD_PTHREADS_API>

This symbol, if defined, indicates that Perl should
be built to use the old draft C<POSIX> threads C<API>.

=back

=for hackers
Found in file config.h

=over 4

=item C<PERL_IMPLICIT_CONTEXT>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<PERL_NO_GET_CONTEXT>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<pTHX>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<pTHX_>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<SCHED_YIELD>
X<SCHED_YIELD>

This symbol defines the way to yield the execution of
the current thread.  Known ways are C<sched_yield>,
C<pthread_yield>, and C<pthread_yield> with C<NULL>.

=back

=for hackers
Found in file config.h

=head1 COPs and Hint Hashes
X<COPHH_KEY_UTF8>

=over 4

=item C<cop_fetch_label>
X<cop_fetch_label>

NOTE: C<cop_fetch_label> is B<experimental> and may change or be
removed without notice.

Returns the label attached to a cop, and stores its length in bytes into
C<*len>.
Upon return, C<*flags> will be set to either C<SVf_UTF8> or 0.

Alternatively, use the macro C<L</CopLABEL_len_flags>>;
or if you don't need to know if the label is UTF-8 or not, the macro
C<L</CopLABEL_len>>;
or if you additionally don't need to know the length, C<L</CopLABEL>>.

=over 3

 const char *  cop_fetch_label(COP * const cop, STRLEN *len,
                               U32 *flags)

=back

=back

=for hackers
Found in file hv.c

=over 4

=item C<CopFILE>
X<CopFILE>

Returns the name of the file associated with the C<COP> C<c>

=over 3

 const char *  CopFILE(const COP * c)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<CopFILEAV>
X<CopFILEAV>

Returns the AV associated with the C<COP> C<c>, creating it if necessary.

=over 3

 AV *  CopFILEAV(const COP * c)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<CopFILEAVn>
X<CopFILEAVn>

Returns the AV associated with the C<COP> C<c>, returning NULL if it
doesn't already exist.

=over 3

 AV *  CopFILEAVn(const COP * c)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<CopFILE_copy>
X<CopFILE_copy>

Efficiently copies the cop file name from one COP to another. Wraps
the required logic to do a refcounted copy under threads or not.

=over 3

 void  CopFILE_copy(COP * dst, COP * src)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<CopFILE_free>
X<CopFILE_free>

Frees the file data in a cop. Under the hood this is a refcounting
operation.

=over 3

 void  CopFILE_free(COP * c)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<CopFILEGV>
X<CopFILEGV>

Returns the GV associated with the C<COP> C<c>

=over 3

 GV *  CopFILEGV(const COP * c)

=back

=back

=for hackers
Found in file cop.h

=over 4

=item C<CopFILEGV_set>
X<CopFILEGV_set>

Available only on unthreaded perls.  Makes C<pv> the name of the file
associated with the C<COP> C<c>

=over 3

 void  CopFILEGV_set(COP *c, GV *gv)

=back

=back

=for hackers
Found in file cop.h
