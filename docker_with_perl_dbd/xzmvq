This variable conditionally defines C<HAS_NAN> if nan() is
available to generate NaN.

=item C<d_nanosleep>

From F<d_nanosleep.U>:

This variable conditionally defines C<HAS_NANOSLEEP>
if nanosleep() is available to sleep with 1E-9 sec accuracy.

=item C<d_ndbm>

From F<i_ndbm.U>:

This variable conditionally defines the C<HAS_NDBM> symbol, which
indicates that both the F<ndbm.h> include file and an appropriate ndbm
library exist.  Consult the different i_*ndbm variables
to find out the actual include location.  Sometimes, a system has the
header file but not the library.  This variable will only be set if
the system has both.

=item C<d_ndbm_h_uses_prototypes>

From F<i_ndbm.U>:

This variable conditionally defines the C<NDBM_H_USES_PROTOTYPES> symbol,
which indicates that the F<ndbm.h> include file uses real C<ANSI> C
prototypes instead of K&R style function declarations. K&R style
declarations are unsupported in C++, so the include file requires
special handling when using a C++ compiler and this variable is
undefined. Consult the different d_*ndbm_h_uses_prototypes variables
to get the same information for alternative F<ndbm.h> include files.

=item C<d_nearbyint>

From F<d_nearbyint.U>:

This variable conditionally defines C<HAS_NEARBYINT> if nearbyint()
is available to return the integral value closest to (according to
the current rounding mode) to x.

=item C<d_newlocale>

From F<d_newlocale.U>:

This variable conditionally defines the C<HAS_NEWLOCALE> symbol, which
indicates to the C program that the newlocale() routine is available
to return a new locale object or modify an existing locale object.

=item C<d_nextafter>

From F<d_nextafter.U>:

This variable conditionally defines C<HAS_NEXTAFTER> if nextafter()
is available to return the next machine representable double from
x in direction y.

=item C<d_nexttoward>

From F<d_nexttoward.U>:

This variable conditionally defines C<HAS_NEXTTOWARD> if nexttoward()
is available to return the next machine representable long double from
x in direction y.

=item C<d_nice>

From F<d_nice.U>:

This variable conditionally defines the C<HAS_NICE> symbol, which
indicates to the C program that the nice() routine is available.

=item C<d_nl_langinfo>

From F<d_nl_langinfo.U>:

This variable conditionally defines the C<HAS_NL_LANGINFO> symbol, which
indicates to the C program that the nl_langinfo() routine is available.

=item C<d_nl_langinfo_l>

From F<d_nl_langinfo.U>:

This variable conditionally defines the C<HAS_NL_LANGINFO_L> symbol, which
indicates to the C program that the nl_langinfo_l() routine is available.

=item C<d_non_int_bitfields>

From F<d_bitfield.U>:

This variable conditionally defines C<HAS_NON_INT_BITFIELDS>
which indicates that the C compiler accepts struct bitfields of sizes
that aren't C<int> or C<unsigned int>

=item C<d_nv_preserves_uv>

From F<perlxv.U>:

This variable indicates whether a variable of type nvtype
can preserve all the bits a variable of type uvtype.

=item C<d_nv_zero_is_allbits_zero>

From F<perlxv.U>:

This variable indicates whether a variable of type nvtype
stores 0.0 in memory as all bits zero.

=item C<d_off64_t>

From F<d_off64_t.U>:

This symbol will be defined if the C compiler supports off64_t.

=item C<d_old_pthread_create_joinable>

From F<d_pthrattrj.U>:

This variable conditionally defines pthread_create_joinable.
undef if F<pthread.h> defines C<PTHREAD_CREATE_JOINABLE>.

=item C<d_oldpthreads>

From F<usethreads.U>:

This variable conditionally defines the C<OLD_PTHREADS_API> symbol,
and indicates that Perl should be built to use the old
draft C<POSIX> threads C<API>.  This is only potentially meaningful if
usethreads is set.

=item C<d_oldsock>

From F<d_socket.U>:

This variable conditionally defines the C<OLDSOCKET> symbol, which
indicates that the C<BSD> socket interface is based on 4.1c and not 4.2.

=item C<d_open3>

From F<d_open3.U>:

This variable conditionally defines the HAS_OPEN3 manifest constant,
which indicates to the C program that the 3 argument version of
the open(2) function is available.

=item C<d_openat>

From F<d_fsat.U>:

This variable conditionally defines the C<HAS_OPENAT> symbol, which
indicates the C<POSIX> openat() function is available.

=item C<d_pathconf>

From F<d_pathconf.U>:

This variable conditionally defines the C<HAS_PATHCONF> symbol, which
indicates to the C program that the pathconf() routine is available
to determine file-system related limits and options associated
with a given filename.

=item C<d_pause>

From F<d_pause.U>:

This variable conditionally defines the C<HAS_PAUSE> symbol, which
indicates to the C program that the pause() routine is available
to suspend a process until a signal is received.

=item C<d_perl_lc_all_category_positions_init>

From F<disparate_lc_all.U>:

This symbol, if defined, indicates that $lc_all_category_positions_init
is valid

=item C<d_perl_lc_all_separator>

From F<disparate_lc_all.U>:

This symbol, if defined, indicates that $perl_lc_all_separator is valid

=item C<d_perl_lc_all_uses_name_value_pairs>

From F<disparate_lc_all.U>:

This symbol, if defined, indicates that the string returned by
setlocale(C<LC_ALL>, C<NULL>) uses C<name=value;> pairs to indicate what each
category's locale is when they aren't all set to the same locale.
When not defined, the platform uses positional notation.

=item C<d_perl_otherlibdirs>

From F<otherlibdirs.U>:

This variable conditionally defines C<PERL_OTHERLIBDIRS>, which
contains a colon-separated set of paths for the perl binary to
include in @C<INC>.  See also otherlibdirs.

=item C<d_phostname>

From F<d_gethname.U>:

This variable conditionally defines the C<HAS_PHOSTNAME> symbol, which
contains the shell command which, when fed to popen(), may be
used to derive the host name.

=item C<d_pipe>

From F<d_pipe.U>:

This variable conditionally defines the C<HAS_PIPE> symbol, which
indicates to the C program that the pipe() routine is available
to create an inter-process channel.

=item C<d_pipe2>

From F<d_pipe2.U>:

This variable conditionally defines the HAS_PIPE2 symbol, which
indicates to the C program that the pipe2() routine is available
to create an inter-process channel.

=item C<d_poll>

From F<d_poll.U>:

This variable conditionally defines the C<HAS_POLL> symbol, which
indicates to the C program that the poll() routine is available
to poll active file descriptors.

=item C<d_portable>

From F<d_portable.U>:

This variable conditionally defines the C<PORTABLE> symbol, which
indicates to the C program that it should not assume that it is
running on the machine it was compiled on.

=item C<d_prctl>

From F<d_prctl.U>:

This variable conditionally defines the C<HAS_PRCTL> symbol, which
indicates to the C program that the prctl() routine is available.
Note that there are at least two prctl variants: Linux and Irix.
While they are somewhat similar, they are incompatible.

=item C<d_prctl_set_name>

From F<d_prctl.U>:

This variable conditionally defines the C<HAS_PRCTL_SET_NAME> symbol,
which indicates to the C program that the prctl() routine supports
the C<PR_SET_NAME> option.

=item C<d_printf_format_null>

From F<d_attribut.U>:

This variable conditionally defines C<PRINTF_FORMAT_NULL_OK>, which
indicates the C compiler allows printf-like formats to be null.

=item C<d_procselfexe>

From F<d_procselfexe.U>:

Defined if $procselfexe is symlink to the absolute
pathname of the executing program.

=item C<d_pseudofork>

From F<d_vfork.U>:

This variable conditionally defines the C<HAS_PSEUDOFORK> symbol,
which indicates that an emulation of the fork routine is available.

=item C<d_pthread_atfork>

From F<d_pthread_atfork.U>:

This variable conditionally defines the C<HAS_PTHREAD_ATFORK> symbol,
which indicates to the C program that the pthread_atfork()
routine is available.

=item C<d_pthread_attr_setscope>

From F<d_pthread_attr_ss.U>:

This variable conditionally defines C<HAS_PTHREAD_ATTR_SETSCOPE> if
pthread_attr_setscope() is available to set the contention scope
attribute of a thread attribute object.

=item C<d_pthread_yield>

From F<d_pthread_y.U>:

This variable conditionally defines the C<HAS_PTHREAD_YIELD>
symbol if the pthread_yield routine is available to yield
the execution of the current thread.

=item C<d_ptrdiff_t>

From F<d_ptrdiff_t.U>:

This symbol will be defined if the C compiler supports ptrdiff_t.

=item C<d_pwage>

From F<i_pwd.U>:

This variable conditionally defines C<PWAGE>, which indicates
that struct passwd contains pw_age.

=item C<d_pwchange>

From F<i_pwd.U>:

This variable conditionally defines C<PWCHANGE>, which indicates
that struct passwd contains pw_change.

=item C<d_pwclass>

From F<i_pwd.U>:

This variable conditionally defines C<PWCLASS>, which indicates
that struct passwd contains pw_class.

=item C<d_pwcomment>

From F<i_pwd.U>:

This variable conditionally defines C<PWCOMMENT>, which indicates
that struct passwd contains pw_comment.

=item C<d_pwexpire>

From F<i_pwd.U>:

This variable conditionally defines C<PWEXPIRE>, which indicates
that struct passwd contains pw_expire.

=item C<d_pwgecos>

From F<i_pwd.U>:

This variable conditionally defines C<PWGECOS>, which indicates
that struct passwd contains pw_gecos.

=item C<d_pwpasswd>

From F<i_pwd.U>:

This variable conditionally defines C<PWPASSWD>, which indicates
that struct passwd contains pw_passwd.

=item C<d_pwquota>

From F<i_pwd.U>:

This variable conditionally defines C<PWQUOTA>, which indicates
that struct passwd contains pw_quota.

=item C<d_qgcvt>

From F<d_qgcvt.U>:

This variable conditionally defines the C<HAS_QGCVT> symbol, which
indicates to the C program that the qgcvt() routine is available.

=item C<d_quad>

From F<quadtype.U>:

This variable, if defined, tells that there's a 64-bit integer type,
quadtype.

=item C<d_querylocale>

From F<d_newlocale.U>:

This variable conditionally defines the C<HAS_QUERYLOCALE> symbol, which
indicates to the C program that the querylocale() routine is available
to return the name of the locale for a category mask.

=item C<d_random_r>

From F<d_random_r.U>:

This variable conditionally defines the C<HAS_RANDOM_R> symbol,
which indicates to the C program that the random_r()
routine is available.

=item C<d_re_comp>

From F<d_regcmp.U>:

This variable conditionally defines the C<HAS_RECOMP> symbol, which
indicates to the C program that the re_comp() routine is available
for regular pattern matching (usually on C<BSD>). If so, it is likely that
re_exec() exists.

=item C<d_readdir>

From F<d_readdir.U>:

This variable conditionally defines C<HAS_READDIR> if readdir() is
available to read directory entries.

=item C<d_readdir64_r>

From F<d_readdir64_r.U>:

This variable conditionally defines the HAS_READDIR64_R symbol,
which indicates to the C program that the readdir64_r()
routine is available.

=item C<d_readdir_r>

From F<d_readdir_r.U>:

This variable conditionally defines the C<HAS_READDIR_R> symbol,
which indicates to the C program that the readdir_r()
routine is available.

=item C<d_readlink>

From F<d_readlink.U>:

This variable conditionally defines the C<HAS_READLINK> symbol, which
indicates to the C program that the readlink() routine is available
to read the value of a symbolic link.

=item C<d_readv>

From F<d_readv.U>:

This variable conditionally defines the C<HAS_READV> symbol, which
indicates to the C program that the readv() routine is available.

=item C<d_recvmsg>

From F<d_recvmsg.U>:

This variable conditionally defines the C<HAS_RECVMSG> symbol, which
indicates to the C program that the recvmsg() routine is available.

=item C<d_regcmp>

From F<d_regcmp.U>:

This variable conditionally defines the C<HAS_REGCMP> symbol, which
indicates to the C program that the regcmp() routine is available
for regular pattern matching (usually on System V).

=item C<d_regcomp>

From F<d_regcmp.U>:

This variable conditionally defines the C<HAS_REGCOMP> symbol, which
indicates to the C program that the regcomp() routine is available
for regular pattern matching (usually on F<POSIX.2> conforming systems).

=item C<d_remainder>

From F<d_remainder.U>:

This variable conditionally defines the C<HAS_REMAINDER> symbol, which
indicates to the C program that the remainder() routine is available.

=item C<d_remquo>

From F<d_remquo.U>:

This variable conditionally defines the C<HAS_REMQUO> symbol, which
indicates to the C program that the remquo() routine is available.

=item C<d_rename>

From F<d_rename.U>:

This variable conditionally defines the C<HAS_RENAME> symbol, which
indicates to the C program that the rename() routine is available
to rename files.

=item C<d_renameat>

From F<d_fsat.U>:

This variable conditionally defines the C<HAS_RENAMEAT> symbol, which
indicates the C<POSIX> renameat() function is available.

=item C<d_rewinddir>

From F<d_readdir.U>:

This variable conditionally defines C<HAS_REWINDDIR> if rewinddir() is
available.

=item C<d_rint>

From F<d_rint.U>:

This variable conditionally defines the C<HAS_RINT> symbol, which
indicates to the C program that the rint() routine is available.

=item C<d_rmdir>

From F<d_rmdir.U>:

This variable conditionally defines C<HAS_RMDIR> if rmdir() is
available to remove directories.

=item C<d_round>

From F<d_round.U>:

This variable conditionally defines the C<HAS_ROUND> symbol, which
indicates to the C program that the round() routine is available.

=item C<d_sbrkproto>

From F<d_sbrkproto.U>:

This variable conditionally defines the C<HAS_SBRK_PROTO> symbol,
which indicates to the C program that the system provides
a prototype for the sbrk() function.  Otherwise, it is
up to the program to supply one.

=item C<d_scalbn>

From F<d_scalbn.U>:

This variable conditionally defines the C<HAS_SCALBN> symbol, which
indicates to the C program that the scalbn() routine is available.

=item C<d_scalbnl>

From F<d_scalbnl.U>:

This variable conditionally defines the C<HAS_SCALBNL> symbol, which
indicates to the C program that the scalbnl() routine is available.
If ilogbl is also present we can emulate frexpl.

=item C<d_sched_yield>

From F<d_pthread_y.U>:

This variable conditionally defines the C<HAS_SCHED_YIELD>
symbol if the sched_yield routine is available to yield
the execution of the current thread.

=item C<d_scm_rights>

From F<d_socket.U>:

This variable conditionally defines the C<HAS_SCM_RIGHTS> symbol,
which indicates that the C<SCM_RIGHTS> is available.  #ifdef is
not enough because it may be an enum, glibc has been known to do this.

=item C<d_seekdir>

From F<d_readdir.U>:

This variable conditionally defines C<HAS_SEEKDIR> if seekdir() is
available.

=item C<d_select>

From F<d_select.U>:

This variable conditionally defines C<HAS_SELECT> if select() is
available to select active file descriptors. A <sys/time.h>
inclusion may be necessary for the timeout field.

=item C<d_sem>

From F<d_sem.U>:

This variable conditionally defines the C<HAS_SEM> symbol, which
indicates that the entire sem*(2) library is present.

=item C<d_semctl>

From F<d_semctl.U>:

This variable conditionally defines the C<HAS_SEMCTL> symbol, which
indicates to the C program that the semctl() routine is available.

=item C<d_semctl_semid_ds>

From F<d_union_semun.U>:

This variable conditionally defines C<USE_SEMCTL_SEMID_DS>, which
indicates that struct semid_ds * is to be used for semctl C<IPC_STAT>.

=item C<d_semctl_semun>

From F<d_union_semun.U>:

This variable conditionally defines C<USE_SEMCTL_SEMUN>, which
indicates that union semun is to be used for semctl C<IPC_STAT>.

=item C<d_semget>

From F<d_semget.U>:

This variable conditionally defines the C<HAS_SEMGET> symbol, which
indicates to the C program that the semget() routine is available.

=item C<d_semop>

From F<d_semop.U>:

This variable conditionally defines the C<HAS_SEMOP> symbol, which
indicates to the C program that the semop() routine is available.

=item C<d_sendmsg>

From F<d_sendmsg.U>:

This variable conditionally defines the C<HAS_SENDMSG> symbol, which
indicates to the C program that the sendmsg() routine is available.

=item C<d_setegid>

From F<d_setegid.U>:

This variable conditionally defines the C<HAS_SETEGID> symbol, which
indicates to the C program that the setegid() routine is available
to change the effective gid of the current program.

=item C<d_setenv>

From F<d_setenv.U>:

This variable conditionally defines the C<HAS_SETENV> symbol, which
indicates to the C program that the setenv routine is available.

=item C<d_seteuid>

From F<d_seteuid.U>:

This variable conditionally defines the C<HAS_SETEUID> symbol, which
indicates to the C program that the seteuid() routine is available
to change the effective uid of the current program.

=item C<d_setgrent>

From F<d_setgrent.U>:

This variable conditionally defines the C<HAS_SETGRENT> symbol, which
indicates to the C program that the setgrent() routine is available
for initializing sequential access to the group database.

=item C<d_setgrent_r>

From F<d_setgrent_r.U>:

This variable conditionally defines the C<HAS_SETGRENT_R> symbol,
which indicates to the C program that the setgrent_r()
routine is available.

=item C<d_setgrps>

From F<d_setgrps.U>:

This variable conditionally defines the C<HAS_SETGROUPS> symbol, which
indicates to the C program that the setgroups() routine is available
to set the list of process groups.

=item C<d_sethent>

From F<d_sethent.U>:

This variable conditionally defines C<HAS_SETHOSTENT> if sethostent() is
available.

=item C<d_sethostent_r>

From F<d_sethostent_r.U>:

This variable conditionally defines the C<HAS_SETHOSTENT_R> symbol,
which indicates to the C program that the sethostent_r()
routine is available.

=item C<d_setitimer>

From F<d_setitimer.U>:

This variable conditionally defines the C<HAS_SETITIMER> symbol, which
indicates to the C program that the setitimer() routine is available.

=item C<d_setlinebuf>

From F<d_setlnbuf.U>:

This variable conditionally defines the C<HAS_SETLINEBUF> symbol, which
indicates to the C program that the setlinebuf() routine is available
to change stderr or stdout from block-buffered or unbuffered to a
line-buffered mode.

=item C<d_setlocale>

From F<d_setlocale.U>:

This variable conditionally defines C<HAS_SETLOCALE> if setlocale() is
available to handle locale-specific ctype implementations.

=item C<d_setlocale_accepts_any_locale_name>

From F<d_setlocale.U>:

This variable conditionally defines C<SETLOCALE_ACCEPTS_ANY_LOCALE_NAME>
if setlocale() accepts any locale name.

=item C<d_setlocale_r>

From F<d_setlocale_r.U>:

This variable conditionally defines the C<HAS_SETLOCALE_R> symbol,
which indicates to the C program that the setlocale_r()
routine is available.

=item C<d_setnent>

From F<d_setnent.U>:

This variable conditionally defines C<HAS_SETNETENT> if setnetent() is
available.

=item C<d_setnetent_r>

From F<d_setnetent_r.U>:

This variable conditionally defines the C<HAS_SETNETENT_R> symbol,
which indicates to the C program that the setnetent_r()
routine is available.

=item C<d_setpent>

From F<d_setpent.U>:

This variable conditionally defines C<HAS_SETPROTOENT> if setprotoent() is
available.

=item C<d_setpgid>

From F<d_setpgid.U>:

This variable conditionally defines the C<HAS_SETPGID> symbol if the
setpgid(pid, gpid) function is available to set process group C<ID>.

=item C<d_setpgrp>

From F<d_setpgrp.U>:

This variable conditionally defines C<HAS_SETPGRP> if setpgrp() is
available to set the current process group.

=item C<d_setpgrp2>

From F<d_setpgrp2.U>:

This variable conditionally defines the HAS_SETPGRP2 symbol, which
indicates to the C program that the setpgrp2() (as in F<DG/C<UX>>) routine
is available to set the current process group.

=item C<d_setprior>

From F<d_setprior.U>:

This variable conditionally defines C<HAS_SETPRIORITY> if setpriority()
is available to set a process's priority.

=item C<d_setproctitle>

From F<d_setproctitle.U>:

This variable conditionally defines the C<HAS_SETPROCTITLE> symbol,
which indicates to the C program that the setproctitle() routine
is available.

=item C<d_setprotoent_r>

From F<d_setprotoent_r.U>:

This variable conditionally defines the C<HAS_SETPROTOENT_R> symbol,
which indicates to the C program that the setprotoent_r()
routine is available.

=item C<d_setpwent>

From F<d_setpwent.U>:

This variable conditionally defines the C<HAS_SETPWENT> symbol, which
indicates to the C program that the setpwent() routine is available
for initializing sequential access to the passwd database.

=item C<d_setpwent_r>

From F<d_setpwent_r.U>:

This variable conditionally defines the C<HAS_SETPWENT_R> symbol,
which indicates to the C program that the setpwent_r()
routine is available.

=item C<d_setregid>

From F<d_setregid.U>:

This variable conditionally defines C<HAS_SETREGID> if setregid() is
available to change the real and effective gid of the current
process.

=item C<d_setresgid>

From F<d_setregid.U>:

This variable conditionally defines C<HAS_SETRESGID> if setresgid() is
available to change the real, effective and saved gid of the current
process.

=item C<d_setresuid>

From F<d_setreuid.U>:

This variable conditionally defines C<HAS_SETREUID> if setresuid() is
available to change the real, effective and saved uid of the current
process.

=item C<d_setreuid>

From F<d_setreuid.U>:

This variable conditionally defines C<HAS_SETREUID> if setreuid() is
available to change the real and effective uid of the current
process.

=item C<d_setrgid>

From F<d_setrgid.U>:

This variable conditionally defines the C<HAS_SETRGID> symbol, which
indicates to the C program that the setrgid() routine is available
to change the real gid of the current program.

=item C<d_setruid>

From F<d_setruid.U>:

This variable conditionally defines the C<HAS_SETRUID> symbol, which
indicates to the C program that the setruid() routine is available
to change the real uid of the current program.

=item C<d_setsent>

From F<d_setsent.U>:

This variable conditionally defines C<HAS_SETSERVENT> if setservent() is
available.

=item C<d_setservent_r>

From F<d_setservent_r.U>:

This variable conditionally defines the C<HAS_SETSERVENT_R> symbol,
which indicates to the C program that the setservent_r()
routine is available.

=item C<d_setsid>

From F<d_setsid.U>:

This variable conditionally defines C<HAS_SETSID> if setsid() is
available to set the process group C<ID>.

=item C<d_setvbuf>

From F<d_setvbuf.U>:

This variable conditionally defines the C<HAS_SETVBUF> symbol, which
indicates to the C program that the setvbuf() routine is available
to change buffering on an open stdio stream.

=item C<d_shm>

From F<d_shm.U>:

This variable conditionally defines the C<HAS_SHM> symbol, which
indicates that the entire shm*(2) library is present.

=item C<d_shmat>

From F<d_shmat.U>:

This variable conditionally defines the C<HAS_SHMAT> symbol, which
indicates to the C program that the shmat() routine is available.

=item C<d_shmatprototype>

From F<d_shmat.U>:

This variable conditionally defines the C<HAS_SHMAT_PROTOTYPE>
symbol, which indicates that F<sys/shm.h> has a prototype for
shmat.

=item C<d_shmctl>

From F<d_shmctl.U>:

This variable conditionally defines the C<HAS_SHMCTL> symbol, which
indicates to the C program that the shmctl() routine is available.

=item C<d_shmdt>

From F<d_shmdt.U>:

This variable conditionally defines the C<HAS_SHMDT> symbol, which
indicates to the C program that the shmdt() routine is available.

=item C<d_shmget>

From F<d_shmget.U>:

This variable conditionally defines the C<HAS_SHMGET> symbol, which
indicates to the C program that the shmget() routine is available.

=item C<d_sigaction>

From F<d_sigaction.U>:

This variable conditionally defines the C<HAS_SIGACTION> symbol, which
indicates that the Vr4 sigaction() routine is available.

=item C<d_siginfo_si_addr>

From F<d_siginfo_si.U>:

This variable conditionally defines the C<HAS_SIGINFO_SI_ADDR> symbol,
which indicates that the siginfo_t struct has the si_addr member.

=item C<d_siginfo_si_band>

From F<d_siginfo_si.U>:

This variable conditionally defines the C<HAS_SIGINFO_SI_BAND> symbol,
which indicates that the siginfo_t struct has the si_band member.

=item C<d_siginfo_si_errno>

From F<d_siginfo_si.U>:

This variable conditionally defines the C<HAS_SIGINFO_SI_ERRNO> symbol,
which indicates that the siginfo_t struct has the si_errno member.

=item C<d_siginfo_si_fd>

From F<d_siginfo_si.U>:

This variable conditionally defines the C<HAS_SIGINFO_SI_FD> symbol,
which indicates that the siginfo_t struct has the si_fd member.

=item C<d_siginfo_si_pid>

From F<d_siginfo_si.U>:

This variable conditionally defines the C<HAS_SIGINFO_SI_PID> symbol,
which indicates that the siginfo_t struct has the si_pid member.

=item C<d_siginfo_si_status>

From F<d_siginfo_si.U>:

This variable conditionally defines the C<HAS_SIGINFO_SI_STATUS> symbol,
which indicates that the siginfo_t struct has the si_status member.

=item C<d_siginfo_si_uid>

From F<d_siginfo_si.U>:

This variable conditionally defines the C<HAS_SIGINFO_SI_UID> symbol,
which indicates that the siginfo_t struct has the si_uid member.

=item C<d_siginfo_si_value>

From F<d_siginfo_si.U>:

This variable conditionally defines the C<HAS_SIGINFO_SI_VALUE> symbol,
which indicates that the siginfo_t struct has the si_value member.

=item C<d_signbit>

From F<d_signbit.U>:

This variable conditionally defines the C<HAS_SIGNBIT> symbol, which
indicates to the C program that the signbit() routine is available
and safe to use with perl's intern C<NV> type.

=item C<d_sigprocmask>
