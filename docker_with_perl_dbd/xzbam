	0x12550,
	0x12F90,
	0x13440,
	0x14400,
	0x14680,
	0x16800,
	0x16B90,
	0x16E40,
	0x16EA0,
	0x16F00,
	0x16FA0,
	0x16FE0,
	0x18D80,
	0x1AFF0,
	0x1B300,
	0x1BC00,
	0x1BCB0,
	0x1CF00,
	0x1CFD0,
	0x1D000,
	0x1D250,
	0x1D2E0,
	0x1D380,
	0x1D400,
	0x1DAB0,
	0x1DF00,
	0x1E030,
	0x1E100,
	0x1E150,
	0x1E290,
	0x1E300,
	0x1E7E0,
	0x1E8E0,
	0x1E900,
	0x1E960,
	0x1EC70,
	0x1ECC0,
	0x1ED00,
	0x1ED50,
	0x1EE00,
	0x1EF00,
	0x1F000,
	0x1FC00,
	0x20000,
	0x2A6E0,
	0x2A700,
	0x2EBF0,
	0x2F800,
	0x2FA20,
	0x30000,
	0x31350,
	0xE0000,
	0xE0080,
	0xE0100,
	0xE01F0,
	0xF0000,
	0x110000
};

static const UV UNI_NBAT_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10880,
	0x1089F,
	0x108A7,
	0x108B0
};

static const UV UNI_NEWA_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11400,
	0x1145C,
	0x1145D,
	0x11462
};

static const UV UNI_NFCQC__M_invlist[] = {  /* for all charsets */
	85,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x305,
	0x306,
	0x30D,
	0x30F,
	0x310,
	0x311,
	0x312,
	0x313,
	0x315,
	0x31B,
	0x31C,
	0x323,
	0x329,
	0x32D,
	0x32F,
	0x330,
	0x332,
	0x338,
	0x339,
	0x342,
	0x343,
	0x345,
	0x346,
	0x653,
	0x656,
	0x93C,
	0x93D,
	0x9BE,
	0x9BF,
	0x9D7,
	0x9D8,
	0xB3E,
	0xB3F,
	0xB56,
	0xB58,
	0xBBE,
	0xBBF,
	0xBD7,
	0xBD8,
	0xC56,
	0xC57,
	0xCC2,
	0xCC3,
	0xCD5,
	0xCD7,
	0xD3E,
	0xD3F,
	0xD57,
	0xD58,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD0,
	0xDDF,
	0xDE0,
	0x102E,
	0x102F,
	0x1161,
	0x1176,
	0x11A8,
	0x11C3,
	0x1B35,
	0x1B36,
	0x3099,
	0x309B,
	0x110BA,
	0x110BB,
	0x11127,
	0x11128,
	0x1133E,
	0x1133F,
	0x11357,
	0x11358,
	0x114B0,
	0x114B1,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x115AF,
	0x115B0,
	0x11930,
	0x11931
};

static const UV UNI_NFCQC__Y_invlist[] = {  /* for all charsets */
	225,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x300,
	0x305,
	0x306,
	0x30D,
	0x30F,
	0x310,
	0x311,
	0x312,
	0x313,
	0x315,
	0x31B,
	0x31C,
	0x323,
	0x329,
	0x32D,
	0x32F,
	0x330,
	0x332,
	0x338,
	0x339,
	0x340,
	0x346,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x653,
	0x656,
	0x93C,
	0x93D,
	0x958,
	0x960,
	0x9BE,
	0x9BF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB3E,
	0xB3F,
	0xB56,
	0xB58,
	0xB5C,
	0xB5E,
	0xBBE,
	0xBBF,
	0xBD7,
	0xBD8,
	0xC56,
	0xC57,
	0xCC2,
	0xCC3,
	0xCD5,
	0xCD7,
	0xD3E,
	0xD3F,
	0xD57,
	0xD58,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD0,
	0xDDF,
	0xDE0,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF77,
	0xF78,
	0xF79,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x102E,
	0x102F,
	0x1161,
	0x1176,
	0x11A8,
	0x11C3,
	0x1B35,
	0x1B36,
	0x1F71,
	0x1F72,
	0x1F73,
	0x1F74,
	0x1F75,
	0x1F76,
	0x1F77,
	0x1F78,
	0x1F79,
	0x1F7A,
	0x1F7B,
	0x1F7C,
	0x1F7D,
	0x1F7E,
	0x1FBB,
	0x1FBC,
	0x1FBE,
	0x1FBF,
	0x1FC9,
	0x1FCA,
	0x1FCB,
	0x1FCC,
	0x1FD3,
	0x1FD4,
	0x1FDB,
	0x1FDC,
	0x1FE3,
	0x1FE4,
	0x1FEB,
	0x1FEC,
	0x1FEE,
	0x1FF0,
	0x1FF9,
	0x1FFA,
	0x1FFB,
	0x1FFC,
	0x1FFD,
	0x1FFE,
	0x2000,
	0x2002,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x2329,
	0x232B,
	0x2ADC,
	0x2ADD,
	0x3099,
	0x309B,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB20,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB4F,
	0x110BA,
	0x110BB,
	0x11127,
	0x11128,
	0x1133E,
	0x1133F,
	0x11357,
	0x11358,
	0x114B0,
	0x114B1,
	0x114BA,
	0x114BB,
	0x114BD,
	0x114BE,
	0x115AF,
	0x115B0,
	0x11930,
	0x11931,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x2F800,
	0x2FA1E
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_NFDQC__Y_invlist[] = {  /* for ASCII/Latin1 */
	465,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xC0,
	0xC6,
	0xC7,
	0xD0,
	0xD1,
	0xD7,
	0xD9,
	0xDE,
	0xE0,
	0xE6,
	0xE7,
	0xF0,
	0xF1,
	0xF7,
	0xF9,
	0xFE,
	0xFF,
	0x110,
	0x112,
	0x126,
	0x128,
	0x131,
	0x134,
	0x138,
	0x139,
	0x13F,
	0x143,
	0x149,
	0x14C,
	0x152,
	0x154,
	0x166,
	0x168,
	0x17F,
	0x1A0,
	0x1A2,
	0x1AF,
	0x1B1,
	0x1CD,
	0x1DD,
	0x1DE,
	0x1E4,
	0x1E6,
	0x1F1,
	0x1F4,
	0x1F6,
	0x1F8,
	0x21C,
	0x21E,
	0x220,
	0x226,
	0x234,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x385,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x391,
	0x3AA,
	0x3B1,
	0x3CA,
	0x3CF,
	0x3D3,
	0x3D5,
	0x400,
	0x402,
	0x403,
	0x404,
	0x407,
	0x408,
	0x40C,
	0x40F,
	0x419,
	0x41A,
	0x439,
	0x43A,
	0x450,
	0x452,
	0x453,
	0x454,
	0x457,
	0x458,
	0x45C,
	0x45F,
	0x476,
	0x478,
	0x4C1,
	0x4C3,
	0x4D0,
	0x4D4,
	0x4D6,
	0x4D8,
	0x4DA,
	0x4E0,
	0x4E2,
	0x4E8,
	0x4EA,
	0x4F6,
	0x4F8,
	0x4FA,
	0x622,
	0x627,
	0x6C0,
	0x6C1,
	0x6C2,
	0x6C3,
	0x6D3,
	0x6D4,
	0x929,
	0x92A,
	0x931,
	0x932,
	0x934,
	0x935,
	0x958,
	0x960,
	0x9CB,
	0x9CD,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E0,
	0xA33,
	0xA34,
	0xA36,
	0xA37,
	0xA59,
	0xA5C,
	0xA5E,
	0xA5F,
	0xB48,
	0xB49,
	0xB4B,
	0xB4D,
	0xB5C,
	0xB5E,
	0xB94,
	0xB95,
	0xBCA,
	0xBCD,
	0xC48,
	0xC49,
	0xCC0,
	0xCC1,
	0xCC7,
	0xCC9,
	0xCCA,
	0xCCC,
	0xD4A,
	0xD4D,
	0xDDA,
	0xDDB,
	0xDDC,
	0xDDF,
	0xF43,
	0xF44,
	0xF4D,
	0xF4E,
	0xF52,
	0xF53,
	0xF57,
	0xF58,
	0xF5C,
	0xF5D,
	0xF69,
	0xF6A,
	0xF73,
	0xF74,
	0xF75,
	0xF77,
	0xF78,
	0xF79,
	0xF81,
	0xF82,
	0xF93,
	0xF94,
	0xF9D,
	0xF9E,
	0xFA2,
	0xFA3,
	0xFA7,
	0xFA8,
	0xFAC,
	0xFAD,
	0xFB9,
	0xFBA,
	0x1026,
	0x1027,
	0x1B06,
	0x1B07,
	0x1B08,
	0x1B09,
	0x1B0A,
	0x1B0B,
	0x1B0C,
	0x1B0D,
	0x1B0E,
	0x1B0F,
	0x1B12,
	0x1B13,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B3E,
	0x1B40,
	0x1B42,
	0x1B43,
	0x1B44,
	0x1E00,
	0x1E9A,
	0x1E9B,
	0x1E9C,
	0x1EA0,
	0x1EFA,
	0x1F00,
	0x1F16,
	0x1F18,
	0x1F1E,
	0x1F20,
	0x1F46,
	0x1F48,
	0x1F4E,
	0x1F50,
	0x1F58,
	0x1F59,
	0x1F5A,
	0x1F5B,
	0x1F5C,
	0x1F5D,
	0x1F5E,
	0x1F5F,
	0x1F7E,
	0x1F80,
	0x1FB5,
	0x1FB6,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC1,
	0x1FC5,
	0x1FC6,
	0x1FD4,
	0x1FD6,
	0x1FDC,
	0x1FDD,
	0x1FF0,
	0x1FF2,
	0x1FF5,
	0x1FF6,
	0x1FFE,
	0x2000,
	0x2002,
	0x2126,
	0x2127,
	0x212A,
	0x212C,
	0x219A,
	0x219C,
	0x21AE,
	0x21AF,
	0x21CD,
	0x21D0,
	0x2204,
	0x2205,
	0x2209,
	0x220A,
	0x220C,
	0x220D,
	0x2224,
	0x2225,
	0x2226,
	0x2227,
	0x2241,
	0x2242,
	0x2244,
	0x2245,
	0x2247,
	0x2248,
	0x2249,
	0x224A,
	0x2260,
	0x2261,
	0x2262,
	0x2263,
	0x226D,
	0x2272,
	0x2274,
	0x2276,
	0x2278,
	0x227A,
	0x2280,
	0x2282,
	0x2284,
	0x2286,
	0x2288,
	0x228A,
	0x22AC,
	0x22B0,
	0x22E0,
	0x22E4,
	0x22EA,
	0x22EE,
	0x2329,
	0x232B,
	0x2ADC,
	0x2ADD,
	0x304C,
	0x304D,
	0x304E,
	0x304F,
	0x3050,
	0x3051,
	0x3052,
	0x3053,
	0x3054,
	0x3055,
	0x3056,
	0x3057,
	0x3058,
	0x3059,
	0x305A,
	0x305B,
	0x305C,
	0x305D,
	0x305E,
	0x305F,
	0x3060,
	0x3061,
	0x3062,
	0x3063,
	0x3065,
	0x3066,
	0x3067,
	0x3068,
	0x3069,
	0x306A,
	0x3070,
	0x3072,
	0x3073,
	0x3075,
	0x3076,
	0x3078,
	0x3079,
	0x307B,
	0x307C,
	0x307E,
	0x3094,
	0x3095,
	0x309E,
	0x309F,
	0x30AC,
	0x30AD,
	0x30AE,
	0x30AF,
	0x30B0,
	0x30B1,
	0x30B2,
	0x30B3,
	0x30B4,
	0x30B5,
	0x30B6,
	0x30B7,
	0x30B8,
	0x30B9,
	0x30BA,
	0x30BB,
	0x30BC,
	0x30BD,
	0x30BE,
	0x30BF,
	0x30C0,
	0x30C1,
	0x30C2,
	0x30C3,
	0x30C5,
	0x30C6,
	0x30C7,
	0x30C8,
	0x30C9,
	0x30CA,
	0x30D0,
	0x30D2,
	0x30D3,
	0x30D5,
	0x30D6,
	0x30D8,
	0x30D9,
	0x30DB,
	0x30DC,
	0x30DE,
	0x30F4,
	0x30F5,
	0x30F7,
	0x30FB,
	0x30FE,
	0x30FF,
	0xAC00,
	0xD7A4,
	0xF900,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0xFA6E,
	0xFA70,
	0xFADA,
	0xFB1D,
	0xFB1E,
	0xFB1F,
	0xFB20,
	0xFB2A,
	0xFB37,
	0xFB38,
	0xFB3D,
	0xFB3E,
	0xFB3F,
	0xFB40,
	0xFB42,
	0xFB43,
	0xFB45,
	0xFB46,
	0xFB4F,
	0x1109A,
	0x1109B,
	0x1109C,
	0x1109D,
	0x110AB,
	0x110AC,
	0x1112E,
	0x11130,
	0x1134B,
	0x1134D,
	0x114BB,
	0x114BD,
	0x114BE,
	0x114BF,
	0x115BA,
	0x115BC,
	0x11938,
	0x11939,
	0x1D15E,
	0x1D165,
	0x1D1BB,
	0x1D1C1,
	0x2F800,
	0x2FA1E
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_NFDQC__Y_invlist[] = {  /* for EBCDIC 1047 */
	469,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x42,
	0x4A,
	0x51,
	0x59,
	0x62,
	0x6A,
	0x71,
	0x79,
	0x8D,
	0x8E,
	0xBA,
	0xBB,
	0xCB,
	0xD0,
	0xDB,
	0xE0,
	0xEB,
	0xF0,
	0xFB,
	0xFF,
	0x100,
	0x110,
	0x112,
	0x126,
	0x128,
	0x131,
	0x134,
	0x138,
	0x139,
	0x13F,
	0x143,
	0x149,
	0x14C,
	0x152,
	0x154,
	0x166,
	0x168,
	0x17F,
	0x1A0,
	0x1A2,
	0x1AF,
	0x1B1,
	0x1CD,
	0x1DD,
	0x1DE,
	0x1E4,
	0x1E6,
	0x1F1,
	0x1F4,
	0x1F6,
	0x1F8,
	0x21C,
	0x21E,
	0x220,
	0x226,
	0x234,
	0x340,
	0x342,
	0x343,
	0x345,
	0x374,
	0x375,
	0x37E,
	0x37F,
	0x385,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x391,
	0x3AA,
	0x3B1,
	0x3CA,
	0x3CF,
	0x3D3,
	0x3D5,
	0x400,
	0x402,
	0x403,
	0x404,
	0x407,
	0x408,
	0x40C,
	0x40F,
	0x419,
	0x41A,
	0x439,
	0x43A,
	0x450,
	0x452,
	0x453,
	0x454,
	0x457,
	0x458,
	0x45C,
	0x45F,
	0x476,
	0x478,
	0x4C1,
	0x4C3,
	0x4D0,
	0x4D4,
	0x4D6,
	0x4D8,
	0x4DA,
	0x4E0,
