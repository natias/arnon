eval("sub _SC_INT_MAX () { 44; }") unless defined(&_SC_INT_MAX);
eval("sub _SC_INT_MIN () { 45; }") unless defined(&_SC_INT_MIN);
eval("sub _SC_LONG_BIT () { 46; }") unless defined(&_SC_LONG_BIT);
eval("sub _SC_WORD_BIT () { 47; }") unless defined(&_SC_WORD_BIT);
eval("sub _SC_MB_LEN_MAX () { 48; }") unless defined(&_SC_MB_LEN_MAX);
eval("sub _SC_NZERO () { 49; }") unless defined(&_SC_NZERO);
eval("sub _SC_SSIZE_MAX () { 50; }") unless defined(&_SC_SSIZE_MAX);
eval("sub _SC_SCHAR_MAX () { 51; }") unless defined(&_SC_SCHAR_MAX);
eval("sub _SC_SCHAR_MIN () { 52; }") unless defined(&_SC_SCHAR_MIN);
eval("sub _SC_SHRT_MAX () { 53; }") unless defined(&_SC_SHRT_MAX);
eval("sub _SC_SHRT_MIN () { 54; }") unless defined(&_SC_SHRT_MIN);
eval("sub _SC_UCHAR_MAX () { 55; }") unless defined(&_SC_UCHAR_MAX);
eval("sub _SC_UINT_MAX () { 56; }") unless defined(&_SC_UINT_MAX);
eval("sub _SC_ULONG_MAX () { 57; }") unless defined(&_SC_ULONG_MAX);
eval("sub _SC_USHRT_MAX () { 58; }") unless defined(&_SC_USHRT_MAX);
eval("sub _SC_NL_ARGMAX () { 59; }") unless defined(&_SC_NL_ARGMAX);
eval("sub _SC_NL_LANGMAX () { 60; }") unless defined(&_SC_NL_LANGMAX);
eval("sub _SC_NL_MSGMAX () { 61; }") unless defined(&_SC_NL_MSGMAX);
eval("sub _SC_NL_NMAX () { 62; }") unless defined(&_SC_NL_NMAX);
eval("sub _SC_NL_SETMAX () { 63; }") unless defined(&_SC_NL_SETMAX);
eval("sub _SC_NL_TEXTMAX () { 64; }") unless defined(&_SC_NL_TEXTMAX);
eval("sub _SC_XBS5_ILP32_OFF32 () { 65; }") unless defined(&_SC_XBS5_ILP32_OFF32);
eval("sub _SC_XBS5_ILP32_OFFBIG () { 66; }") unless defined(&_SC_XBS5_ILP32_OFFBIG);
eval("sub _SC_XBS5_LP64_OFF64 () { 67; }") unless defined(&_SC_XBS5_LP64_OFF64);
eval("sub _SC_XBS5_LPBIG_OFFBIG () { 68; }") unless defined(&_SC_XBS5_LPBIG_OFFBIG);
eval("sub _SC_XOPEN_LEGACY () { 69; }") unless defined(&_SC_XOPEN_LEGACY);
eval("sub _SC_XOPEN_REALTIME () { 70; }") unless defined(&_SC_XOPEN_REALTIME);
eval("sub _SC_XOPEN_REALTIME_THREADS () { 71; }") unless defined(&_SC_XOPEN_REALTIME_THREADS);
eval("sub _SC_ADVISORY_INFO () { 72; }") unless defined(&_SC_ADVISORY_INFO);
eval("sub _SC_BARRIERS () { 73; }") unless defined(&_SC_BARRIERS);
eval("sub _SC_BASE () { 74; }") unless defined(&_SC_BASE);
eval("sub _SC_C_LANG_SUPPORT () { 75; }") unless defined(&_SC_C_LANG_SUPPORT);
eval("sub _SC_C_LANG_SUPPORT_R () { 76; }") unless defined(&_SC_C_LANG_SUPPORT_R);
eval("sub _SC_CLOCK_SELECTION () { 77; }") unless defined(&_SC_CLOCK_SELECTION);
eval("sub _SC_CPUTIME () { 78; }") unless defined(&_SC_CPUTIME);
eval("sub _SC_THREAD_CPUTIME () { 79; }") unless defined(&_SC_THREAD_CPUTIME);
eval("sub _SC_DEVICE_IO () { 80; }") unless defined(&_SC_DEVICE_IO);
eval("sub _SC_DEVICE_SPECIFIC () { 81; }") unless defined(&_SC_DEVICE_SPECIFIC);
eval("sub _SC_DEVICE_SPECIFIC_R () { 82; }") unless defined(&_SC_DEVICE_SPECIFIC_R);
eval("sub _SC_FD_MGMT () { 83; }") unless defined(&_SC_FD_MGMT);
eval("sub _SC_FIFO () { 84; }") unless defined(&_SC_FIFO);
eval("sub _SC_PIPE () { 85; }") unless defined(&_SC_PIPE);
eval("sub _SC_FILE_ATTRIBUTES () { 86; }") unless defined(&_SC_FILE_ATTRIBUTES);
eval("sub _SC_FILE_LOCKING () { 87; }") unless defined(&_SC_FILE_LOCKING);
eval("sub _SC_FILE_SYSTEM () { 88; }") unless defined(&_SC_FILE_SYSTEM);
eval("sub _SC_MONOTONIC_CLOCK () { 89; }") unless defined(&_SC_MONOTONIC_CLOCK);
eval("sub _SC_MULTI_PROCESS () { 90; }") unless defined(&_SC_MULTI_PROCESS);
eval("sub _SC_SINGLE_PROCESS () { 91; }") unless defined(&_SC_SINGLE_PROCESS);
eval("sub _SC_NETWORKING () { 92; }") unless defined(&_SC_NETWORKING);
eval("sub _SC_READER_WRITER_LOCKS () { 93; }") unless defined(&_SC_READER_WRITER_LOCKS);
eval("sub _SC_SPIN_LOCKS () { 94; }") unless defined(&_SC_SPIN_LOCKS);
eval("sub _SC_REGEXP () { 95; }") unless defined(&_SC_REGEXP);
eval("sub _SC_REGEX_VERSION () { 96; }") unless defined(&_SC_REGEX_VERSION);
eval("sub _SC_SHELL () { 97; }") unless defined(&_SC_SHELL);
eval("sub _SC_SIGNALS () { 98; }") unless defined(&_SC_SIGNALS);
eval("sub _SC_SPAWN () { 99; }") unless defined(&_SC_SPAWN);
eval("sub _SC_SPORADIC_SERVER () { 100; }") unless defined(&_SC_SPORADIC_SERVER);
eval("sub _SC_THREAD_SPORADIC_SERVER () { 101; }") unless defined(&_SC_THREAD_SPORADIC_SERVER);
eval("sub _SC_SYSTEM_DATABASE () { 102; }") unless defined(&_SC_SYSTEM_DATABASE);
eval("sub _SC_SYSTEM_DATABASE_R () { 103; }") unless defined(&_SC_SYSTEM_DATABASE_R);
eval("sub _SC_TIMEOUTS () { 104; }") unless defined(&_SC_TIMEOUTS);
eval("sub _SC_TYPED_MEMORY_OBJECTS () { 105; }") unless defined(&_SC_TYPED_MEMORY_OBJECTS);
eval("sub _SC_USER_GROUPS () { 106; }") unless defined(&_SC_USER_GROUPS);
eval("sub _SC_USER_GROUPS_R () { 107; }") unless defined(&_SC_USER_GROUPS_R);
eval("sub _SC_2_PBS () { 108; }") unless defined(&_SC_2_PBS);
eval("sub _SC_2_PBS_ACCOUNTING () { 109; }") unless defined(&_SC_2_PBS_ACCOUNTING);
eval("sub _SC_2_PBS_LOCATE () { 110; }") unless defined(&_SC_2_PBS_LOCATE);
eval("sub _SC_2_PBS_MESSAGE () { 111; }") unless defined(&_SC_2_PBS_MESSAGE);
eval("sub _SC_2_PBS_TRACK () { 112; }") unless defined(&_SC_2_PBS_TRACK);
eval("sub _SC_SYMLOOP_MAX () { 113; }") unless defined(&_SC_SYMLOOP_MAX);
eval("sub _SC_STREAMS () { 114; }") unless defined(&_SC_STREAMS);
eval("sub _SC_2_PBS_CHECKPOINT () { 115; }") unless defined(&_SC_2_PBS_CHECKPOINT);
eval("sub _SC_V6_ILP32_OFF32 () { 116; }") unless defined(&_SC_V6_ILP32_OFF32);
eval("sub _SC_V6_ILP32_OFFBIG () { 117; }") unless defined(&_SC_V6_ILP32_OFFBIG);
eval("sub _SC_V6_LP64_OFF64 () { 118; }") unless defined(&_SC_V6_LP64_OFF64);
eval("sub _SC_V6_LPBIG_OFFBIG () { 119; }") unless defined(&_SC_V6_LPBIG_OFFBIG);
eval("sub _SC_HOST_NAME_MAX () { 120; }") unless defined(&_SC_HOST_NAME_MAX);
eval("sub _SC_TRACE () { 121; }") unless defined(&_SC_TRACE);
eval("sub _SC_TRACE_EVENT_FILTER () { 122; }") unless defined(&_SC_TRACE_EVENT_FILTER);
eval("sub _SC_TRACE_INHERIT () { 123; }") unless defined(&_SC_TRACE_INHERIT);
eval("sub _SC_TRACE_LOG () { 124; }") unless defined(&_SC_TRACE_LOG);
eval("sub _SC_LEVEL1_ICACHE_SIZE () { 125; }") unless defined(&_SC_LEVEL1_ICACHE_SIZE);
eval("sub _SC_LEVEL1_ICACHE_ASSOC () { 126; }") unless defined(&_SC_LEVEL1_ICACHE_ASSOC);
eval("sub _SC_LEVEL1_ICACHE_LINESIZE () { 127; }") unless defined(&_SC_LEVEL1_ICACHE_LINESIZE);
eval("sub _SC_LEVEL1_DCACHE_SIZE () { 128; }") unless defined(&_SC_LEVEL1_DCACHE_SIZE);
eval("sub _SC_LEVEL1_DCACHE_ASSOC () { 129; }") unless defined(&_SC_LEVEL1_DCACHE_ASSOC);
eval("sub _SC_LEVEL1_DCACHE_LINESIZE () { 130; }") unless defined(&_SC_LEVEL1_DCACHE_LINESIZE);
eval("sub _SC_LEVEL2_CACHE_SIZE () { 131; }") unless defined(&_SC_LEVEL2_CACHE_SIZE);
eval("sub _SC_LEVEL2_CACHE_ASSOC () { 132; }") unless defined(&_SC_LEVEL2_CACHE_ASSOC);
eval("sub _SC_LEVEL2_CACHE_LINESIZE () { 133; }") unless defined(&_SC_LEVEL2_CACHE_LINESIZE);
eval("sub _SC_LEVEL3_CACHE_SIZE () { 134; }") unless defined(&_SC_LEVEL3_CACHE_SIZE);
eval("sub _SC_LEVEL3_CACHE_ASSOC () { 135; }") unless defined(&_SC_LEVEL3_CACHE_ASSOC);
eval("sub _SC_LEVEL3_CACHE_LINESIZE () { 136; }") unless defined(&_SC_LEVEL3_CACHE_LINESIZE);
eval("sub _SC_LEVEL4_CACHE_SIZE () { 137; }") unless defined(&_SC_LEVEL4_CACHE_SIZE);
eval("sub _SC_LEVEL4_CACHE_ASSOC () { 138; }") unless defined(&_SC_LEVEL4_CACHE_ASSOC);
eval("sub _SC_LEVEL4_CACHE_LINESIZE () { 139; }") unless defined(&_SC_LEVEL4_CACHE_LINESIZE);
eval("sub _SC_IPV6 () { _SC_LEVEL1_ICACHE_SIZE+50; }") unless defined(&_SC_IPV6);
eval("sub _SC_RAW_SOCKETS () { 1; }") unless defined(&_SC_RAW_SOCKETS);
eval("sub _SC_V7_ILP32_OFF32 () { 2; }") unless defined(&_SC_V7_ILP32_OFF32);
eval("sub _SC_V7_ILP32_OFFBIG () { 3; }") unless defined(&_SC_V7_ILP32_OFFBIG);
eval("sub _SC_V7_LP64_OFF64 () { 4; }") unless defined(&_SC_V7_LP64_OFF64);
eval("sub _SC_V7_LPBIG_OFFBIG () { 5; }") unless defined(&_SC_V7_LPBIG_OFFBIG);
eval("sub _SC_SS_REPL_MAX () { 6; }") unless defined(&_SC_SS_REPL_MAX);
eval("sub _SC_TRACE_EVENT_NAME_MAX () { 7; }") unless defined(&_SC_TRACE_EVENT_NAME_MAX);
eval("sub _SC_TRACE_NAME_MAX () { 8; }") unless defined(&_SC_TRACE_NAME_MAX);
eval("sub _SC_TRACE_SYS_MAX () { 9; }") unless defined(&_SC_TRACE_SYS_MAX);
eval("sub _SC_TRACE_USER_EVENT_MAX () { 10; }") unless defined(&_SC_TRACE_USER_EVENT_MAX);
eval("sub _SC_XOPEN_STREAMS () { 11; }") unless defined(&_SC_XOPEN_STREAMS);
eval("sub _SC_THREAD_ROBUST_PRIO_INHERIT () { 12; }") unless defined(&_SC_THREAD_ROBUST_PRIO_INHERIT);
eval("sub _SC_THREAD_ROBUST_PRIO_PROTECT () { 13; }") unless defined(&_SC_THREAD_ROBUST_PRIO_PROTECT);
eval("sub _SC_MINSIGSTKSZ () { 14; }") unless defined(&_SC_MINSIGSTKSZ);
eval("sub _SC_SIGSTKSZ () { 15; }") unless defined(&_SC_SIGSTKSZ);
eval("sub _CS_PATH () { 0; }") unless defined(&_CS_PATH);
eval("sub _CS_V6_WIDTH_RESTRICTED_ENVS () { 1; }") unless defined(&_CS_V6_WIDTH_RESTRICTED_ENVS);
eval("sub _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS () { _CS_V6_WIDTH_RESTRICTED_ENVS; }") unless defined(&_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS);
eval("sub _CS_GNU_LIBC_VERSION () { 1; }") unless defined(&_CS_GNU_LIBC_VERSION);
eval("sub _CS_GNU_LIBPTHREAD_VERSION () { 2; }") unless defined(&_CS_GNU_LIBPTHREAD_VERSION);
eval("sub _CS_V5_WIDTH_RESTRICTED_ENVS () { 3; }") unless defined(&_CS_V5_WIDTH_RESTRICTED_ENVS);
eval("sub _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS () { _CS_V5_WIDTH_RESTRICTED_ENVS; }") unless defined(&_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS);
eval("sub _CS_V7_WIDTH_RESTRICTED_ENVS () { 1; }") unless defined(&_CS_V7_WIDTH_RESTRICTED_ENVS);
eval("sub _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS () { _CS_V7_WIDTH_RESTRICTED_ENVS; }") unless defined(&_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS);
eval("sub _CS_LFS_CFLAGS () { 1000; }") unless defined(&_CS_LFS_CFLAGS);
eval("sub _CS_LFS_LDFLAGS () { 1001; }") unless defined(&_CS_LFS_LDFLAGS);
eval("sub _CS_LFS_LIBS () { 1002; }") unless defined(&_CS_LFS_LIBS);
eval("sub _CS_LFS_LINTFLAGS () { 1003; }") unless defined(&_CS_LFS_LINTFLAGS);
eval("sub _CS_LFS64_CFLAGS () { 1004; }") unless defined(&_CS_LFS64_CFLAGS);
eval("sub _CS_LFS64_LDFLAGS () { 1005; }") unless defined(&_CS_LFS64_LDFLAGS);
eval("sub _CS_LFS64_LIBS () { 1006; }") unless defined(&_CS_LFS64_LIBS);
eval("sub _CS_LFS64_LINTFLAGS () { 1007; }") unless defined(&_CS_LFS64_LINTFLAGS);
eval("sub _CS_XBS5_ILP32_OFF32_CFLAGS () { 1100; }") unless defined(&_CS_XBS5_ILP32_OFF32_CFLAGS);
eval("sub _CS_XBS5_ILP32_OFF32_LDFLAGS () { 1101; }") unless defined(&_CS_XBS5_ILP32_OFF32_LDFLAGS);
eval("sub _CS_XBS5_ILP32_OFF32_LIBS () { 1102; }") unless defined(&_CS_XBS5_ILP32_OFF32_LIBS);
eval("sub _CS_XBS5_ILP32_OFF32_LINTFLAGS () { 1103; }") unless defined(&_CS_XBS5_ILP32_OFF32_LINTFLAGS);
eval("sub _CS_XBS5_ILP32_OFFBIG_CFLAGS () { 1104; }") unless defined(&_CS_XBS5_ILP32_OFFBIG_CFLAGS);
eval("sub _CS_XBS5_ILP32_OFFBIG_LDFLAGS () { 1105; }") unless defined(&_CS_XBS5_ILP32_OFFBIG_LDFLAGS);
eval("sub _CS_XBS5_ILP32_OFFBIG_LIBS () { 1106; }") unless defined(&_CS_XBS5_ILP32_OFFBIG_LIBS);
eval("sub _CS_XBS5_ILP32_OFFBIG_LINTFLAGS () { 1107; }") unless defined(&_CS_XBS5_ILP32_OFFBIG_LINTFLAGS);
eval("sub _CS_XBS5_LP64_OFF64_CFLAGS () { 1108; }") unless defined(&_CS_XBS5_LP64_OFF64_CFLAGS);
eval("sub _CS_XBS5_LP64_OFF64_LDFLAGS () { 1109; }") unless defined(&_CS_XBS5_LP64_OFF64_LDFLAGS);
eval("sub _CS_XBS5_LP64_OFF64_LIBS () { 1110; }") unless defined(&_CS_XBS5_LP64_OFF64_LIBS);
eval("sub _CS_XBS5_LP64_OFF64_LINTFLAGS () { 1111; }") unless defined(&_CS_XBS5_LP64_OFF64_LINTFLAGS);
eval("sub _CS_XBS5_LPBIG_OFFBIG_CFLAGS () { 1112; }") unless defined(&_CS_XBS5_LPBIG_OFFBIG_CFLAGS);
eval("sub _CS_XBS5_LPBIG_OFFBIG_LDFLAGS () { 1113; }") unless defined(&_CS_XBS5_LPBIG_OFFBIG_LDFLAGS);
eval("sub _CS_XBS5_LPBIG_OFFBIG_LIBS () { 1114; }") unless defined(&_CS_XBS5_LPBIG_OFFBIG_LIBS);
eval("sub _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS () { 1115; }") unless defined(&_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS);
eval("sub _CS_POSIX_V6_ILP32_OFF32_CFLAGS () { 1116; }") unless defined(&_CS_POSIX_V6_ILP32_OFF32_CFLAGS);
eval("sub _CS_POSIX_V6_ILP32_OFF32_LDFLAGS () { 1117; }") unless defined(&_CS_POSIX_V6_ILP32_OFF32_LDFLAGS);
eval("sub _CS_POSIX_V6_ILP32_OFF32_LIBS () { 1118; }") unless defined(&_CS_POSIX_V6_ILP32_OFF32_LIBS);
eval("sub _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS () { 1119; }") unless defined(&_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS);
eval("sub _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS () { 1120; }") unless defined(&_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS);
eval("sub _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS () { 1121; }") unless defined(&_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS);
eval("sub _CS_POSIX_V6_ILP32_OFFBIG_LIBS () { 1122; }") unless defined(&_CS_POSIX_V6_ILP32_OFFBIG_LIBS);
eval("sub _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS () { 1123; }") unless defined(&_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS);
eval("sub _CS_POSIX_V6_LP64_OFF64_CFLAGS () { 1124; }") unless defined(&_CS_POSIX_V6_LP64_OFF64_CFLAGS);
eval("sub _CS_POSIX_V6_LP64_OFF64_LDFLAGS () { 1125; }") unless defined(&_CS_POSIX_V6_LP64_OFF64_LDFLAGS);
eval("sub _CS_POSIX_V6_LP64_OFF64_LIBS () { 1126; }") unless defined(&_CS_POSIX_V6_LP64_OFF64_LIBS);
eval("sub _CS_POSIX_V6_LP64_OFF64_LINTFLAGS () { 1127; }") unless defined(&_CS_POSIX_V6_LP64_OFF64_LINTFLAGS);
eval("sub _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS () { 1128; }") unless defined(&_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS);
eval("sub _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS () { 1129; }") unless defined(&_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS);
eval("sub _CS_POSIX_V6_LPBIG_OFFBIG_LIBS () { 1130; }") unless defined(&_CS_POSIX_V6_LPBIG_OFFBIG_LIBS);
eval("sub _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS () { 1131; }") unless defined(&_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS);
eval("sub _CS_POSIX_V7_ILP32_OFF32_CFLAGS () { 1132; }") unless defined(&_CS_POSIX_V7_ILP32_OFF32_CFLAGS);
eval("sub _CS_POSIX_V7_ILP32_OFF32_LDFLAGS () { 1133; }") unless defined(&_CS_POSIX_V7_ILP32_OFF32_LDFLAGS);
eval("sub _CS_POSIX_V7_ILP32_OFF32_LIBS () { 1134; }") unless defined(&_CS_POSIX_V7_ILP32_OFF32_LIBS);
eval("sub _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS () { 1135; }") unless defined(&_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS);
eval("sub _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS () { 1136; }") unless defined(&_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS);
eval("sub _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS () { 1137; }") unless defined(&_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS);
eval("sub _CS_POSIX_V7_ILP32_OFFBIG_LIBS () { 1138; }") unless defined(&_CS_POSIX_V7_ILP32_OFFBIG_LIBS);
eval("sub _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS () { 1139; }") unless defined(&_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS);
eval("sub _CS_POSIX_V7_LP64_OFF64_CFLAGS () { 1140; }") unless defined(&_CS_POSIX_V7_LP64_OFF64_CFLAGS);
eval("sub _CS_POSIX_V7_LP64_OFF64_LDFLAGS () { 1141; }") unless defined(&_CS_POSIX_V7_LP64_OFF64_LDFLAGS);
eval("sub _CS_POSIX_V7_LP64_OFF64_LIBS () { 1142; }") unless defined(&_CS_POSIX_V7_LP64_OFF64_LIBS);
eval("sub _CS_POSIX_V7_LP64_OFF64_LINTFLAGS () { 1143; }") unless defined(&_CS_POSIX_V7_LP64_OFF64_LINTFLAGS);
eval("sub _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS () { 1144; }") unless defined(&_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS);
eval("sub _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS () { 1145; }") unless defined(&_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS);
eval("sub _CS_POSIX_V7_LPBIG_OFFBIG_LIBS () { 1146; }") unless defined(&_CS_POSIX_V7_LPBIG_OFFBIG_LIBS);
eval("sub _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS () { 1147; }") unless defined(&_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS);
eval("sub _CS_V6_ENV () { 1148; }") unless defined(&_CS_V6_ENV);
eval("sub _CS_V7_ENV () { 1149; }") unless defined(&_CS_V7_ENV);
1;
                                                      usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/endian.ph                                                 0000644 0000000 0000000 00000002014 14530460112 017721  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_BITS_ENDIAN_H)) {
    eval 'sub _BITS_ENDIAN_H () {1;}' unless defined(&_BITS_ENDIAN_H);
    eval 'sub __LITTLE_ENDIAN () {1234;}' unless defined(&__LITTLE_ENDIAN);
    eval 'sub __BIG_ENDIAN () {4321;}' unless defined(&__BIG_ENDIAN);
    eval 'sub __PDP_ENDIAN () {3412;}' unless defined(&__PDP_ENDIAN);
    require 'bits/endianness.ph';
    unless(defined(&__FLOAT_WORD_ORDER)) {
	eval 'sub __FLOAT_WORD_ORDER () { &__BYTE_ORDER;}' unless defined(&__FLOAT_WORD_ORDER);
    }
    if((defined(&__BYTE_ORDER) ? &__BYTE_ORDER : undef) == (defined(&__LITTLE_ENDIAN) ? &__LITTLE_ENDIAN : undef)) {
	eval 'sub __LONG_LONG_PAIR {
	    my($HI, $LO) = @_;
    	    eval q($LO, $HI);
	}' unless defined(&__LONG_LONG_PAIR);
    }
 elsif((defined(&__BYTE_ORDER) ? &__BYTE_ORDER : undef) == (defined(&__BIG_ENDIAN) ? &__BIG_ENDIAN : undef)) {
	eval 'sub __LONG_LONG_PAIR {
	    my($HI, $LO) = @_;
    	    eval q($HI, $LO);
	}' unless defined(&__LONG_LONG_PAIR);
    }
}
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/endianness.ph                                             0000644 0000000 0000000 00000000601 14530460112 020612  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_BITS_ENDIANNESS_H)) {
    eval 'sub _BITS_ENDIANNESS_H () {1;}' unless defined(&_BITS_ENDIANNESS_H);
    unless(defined(&_BITS_ENDIAN_H)) {
	die("Never use <bits/endianness.h> directly; include <endian.h> instead.");
    }
    eval 'sub __BYTE_ORDER () { &__LITTLE_ENDIAN;}' unless defined(&__BYTE_ORDER);
}
1;
                                                                                                                               usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/environments.ph                                           0000644 0000000 0000000 00000004060 14530460112 021215  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_UNISTD_H)) {
    die("Never include this file directly.  Use <unistd.h> instead");
}
require 'bits/wordsize.ph';
if((defined(&__WORDSIZE) ? &__WORDSIZE : undef) == 64) {
    eval 'sub _POSIX_V7_LPBIG_OFFBIG () {-1;}' unless defined(&_POSIX_V7_LPBIG_OFFBIG);
    eval 'sub _POSIX_V6_LPBIG_OFFBIG () {-1;}' unless defined(&_POSIX_V6_LPBIG_OFFBIG);
    eval 'sub _XBS5_LPBIG_OFFBIG () {-1;}' unless defined(&_XBS5_LPBIG_OFFBIG);
    eval 'sub _POSIX_V7_LP64_OFF64 () {1;}' unless defined(&_POSIX_V7_LP64_OFF64);
    eval 'sub _POSIX_V6_LP64_OFF64 () {1;}' unless defined(&_POSIX_V6_LP64_OFF64);
    eval 'sub _XBS5_LP64_OFF64 () {1;}' unless defined(&_XBS5_LP64_OFF64);
} else {
    eval 'sub _POSIX_V7_ILP32_OFFBIG () {1;}' unless defined(&_POSIX_V7_ILP32_OFFBIG);
    eval 'sub _POSIX_V6_ILP32_OFFBIG () {1;}' unless defined(&_POSIX_V6_ILP32_OFFBIG);
    eval 'sub _XBS5_ILP32_OFFBIG () {1;}' unless defined(&_XBS5_ILP32_OFFBIG);
    unless(defined(&__x86_64__)) {
	eval 'sub _POSIX_V7_ILP32_OFF32 () {1;}' unless defined(&_POSIX_V7_ILP32_OFF32);
	eval 'sub _POSIX_V6_ILP32_OFF32 () {1;}' unless defined(&_POSIX_V6_ILP32_OFF32);
	eval 'sub _XBS5_ILP32_OFF32 () {1;}' unless defined(&_XBS5_ILP32_OFF32);
    }
}
eval 'sub __ILP32_OFF32_CFLAGS () {"-m32";}' unless defined(&__ILP32_OFF32_CFLAGS);
eval 'sub __ILP32_OFF32_LDFLAGS () {"-m32";}' unless defined(&__ILP32_OFF32_LDFLAGS);
if(defined (&__x86_64__)  && defined (&__ILP32__)) {
    eval 'sub __ILP32_OFFBIG_CFLAGS () {"-mx32";}' unless defined(&__ILP32_OFFBIG_CFLAGS);
    eval 'sub __ILP32_OFFBIG_LDFLAGS () {"-mx32";}' unless defined(&__ILP32_OFFBIG_LDFLAGS);
} else {
    eval 'sub __ILP32_OFFBIG_CFLAGS () {"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64";}' unless defined(&__ILP32_OFFBIG_CFLAGS);
    eval 'sub __ILP32_OFFBIG_LDFLAGS () {"-m32";}' unless defined(&__ILP32_OFFBIG_LDFLAGS);
}
eval 'sub __LP64_OFF64_CFLAGS () {"-m64";}' unless defined(&__LP64_OFF64_CFLAGS);
eval 'sub __LP64_OFF64_LDFLAGS () {"-m64";}' unless defined(&__LP64_OFF64_LDFLAGS);
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/floatn-common.ph                                          0000644 0000000 0000000 00000030503 14530460112 021240  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_BITS_FLOATN_COMMON_H)) {
    eval 'sub _BITS_FLOATN_COMMON_H () {1;}' unless defined(&_BITS_FLOATN_COMMON_H);
    require 'features.ph';
    require 'bits/long-double.ph';
    eval 'sub __HAVE_FLOAT16 () {0;}' unless defined(&__HAVE_FLOAT16);
    eval 'sub __HAVE_FLOAT32 () {1;}' unless defined(&__HAVE_FLOAT32);
    eval 'sub __HAVE_FLOAT64 () {1;}' unless defined(&__HAVE_FLOAT64);
    eval 'sub __HAVE_FLOAT32X () {1;}' unless defined(&__HAVE_FLOAT32X);
    eval 'sub __HAVE_FLOAT128X () {0;}' unless defined(&__HAVE_FLOAT128X);
    eval 'sub __HAVE_DISTINCT_FLOAT16 () { &__HAVE_FLOAT16;}' unless defined(&__HAVE_DISTINCT_FLOAT16);
    eval 'sub __HAVE_DISTINCT_FLOAT32 () {0;}' unless defined(&__HAVE_DISTINCT_FLOAT32);
    eval 'sub __HAVE_DISTINCT_FLOAT64 () {0;}' unless defined(&__HAVE_DISTINCT_FLOAT64);
    eval 'sub __HAVE_DISTINCT_FLOAT32X () {0;}' unless defined(&__HAVE_DISTINCT_FLOAT32X);
    eval 'sub __HAVE_DISTINCT_FLOAT64X () {0;}' unless defined(&__HAVE_DISTINCT_FLOAT64X);
    eval 'sub __HAVE_DISTINCT_FLOAT128X () { &__HAVE_FLOAT128X;}' unless defined(&__HAVE_DISTINCT_FLOAT128X);
    eval 'sub __HAVE_FLOAT128_UNLIKE_LDBL () {( &__HAVE_DISTINCT_FLOAT128  &&  &__LDBL_MANT_DIG__ != 113);}' unless defined(&__HAVE_FLOAT128_UNLIKE_LDBL);
    if( &__GNUC_PREREQ (7, 0)  && !defined (&__cplusplus)) {
	eval 'sub __HAVE_FLOATN_NOT_TYPEDEF () {1;}' unless defined(&__HAVE_FLOATN_NOT_TYPEDEF);
    } else {
	eval 'sub __HAVE_FLOATN_NOT_TYPEDEF () {0;}' unless defined(&__HAVE_FLOATN_NOT_TYPEDEF);
    }
    unless(defined(&__ASSEMBLER__)) {
	if((defined(&__HAVE_FLOAT16) ? &__HAVE_FLOAT16 : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		eval 'sub __f16 {
		    my($x) = @_;
    		    eval q((( &_Float16) $x &f));
		}' unless defined(&__f16);
	    } else {
		eval 'sub __f16 {
		    my($x) = @_;
    		    eval q($x &f16);
		}' unless defined(&__f16);
	    }
	}
	if((defined(&__HAVE_FLOAT32) ? &__HAVE_FLOAT32 : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		eval 'sub __f32 {
		    my($x) = @_;
    		    eval q($x &f);
		}' unless defined(&__f32);
	    } else {
		eval 'sub __f32 {
		    my($x) = @_;
    		    eval q($x &f32);
		}' unless defined(&__f32);
	    }
	}
	if((defined(&__HAVE_FLOAT64) ? &__HAVE_FLOAT64 : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		if(defined(&__NO_LONG_DOUBLE_MATH)) {
		    eval 'sub __f64 {
		        my($x) = @_;
    			eval q($x &l);
		    }' unless defined(&__f64);
		} else {
		    eval 'sub __f64 {
		        my($x) = @_;
    			eval q($x);
		    }' unless defined(&__f64);
		}
	    } else {
		eval 'sub __f64 {
		    my($x) = @_;
    		    eval q($x &f64);
		}' unless defined(&__f64);
	    }
	}
	if((defined(&__HAVE_FLOAT32X) ? &__HAVE_FLOAT32X : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		eval 'sub __f32x {
		    my($x) = @_;
    		    eval q($x);
		}' unless defined(&__f32x);
	    } else {
		eval 'sub __f32x {
		    my($x) = @_;
    		    eval q($x &f32x);
		}' unless defined(&__f32x);
	    }
	}
	if((defined(&__HAVE_FLOAT64X) ? &__HAVE_FLOAT64X : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		if((defined(&__HAVE_FLOAT64X_LONG_DOUBLE) ? &__HAVE_FLOAT64X_LONG_DOUBLE : undef)) {
		    eval 'sub __f64x {
		        my($x) = @_;
    			eval q($x &l);
		    }' unless defined(&__f64x);
		} else {
		    eval 'sub __f64x {
		        my($x) = @_;
    			eval q( &__f128 ($x));
		    }' unless defined(&__f64x);
		}
	    } else {
		eval 'sub __f64x {
		    my($x) = @_;
    		    eval q($x &f64x);
		}' unless defined(&__f64x);
	    }
	}
	if((defined(&__HAVE_FLOAT128X) ? &__HAVE_FLOAT128X : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		die("_Float128X supported but no constant suffix");
	    } else {
		eval 'sub __f128x {
		    my($x) = @_;
    		    eval q($x &f128x);
		}' unless defined(&__f128x);
	    }
	}
	if((defined(&__HAVE_FLOAT16) ? &__HAVE_FLOAT16 : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		eval 'sub __CFLOAT16 () { &__cfloat16;}' unless defined(&__CFLOAT16);
	    } else {
		eval 'sub __CFLOAT16 () { &_Complex  &_Float16;}' unless defined(&__CFLOAT16);
	    }
	}
	if((defined(&__HAVE_FLOAT32) ? &__HAVE_FLOAT32 : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		eval 'sub __CFLOAT32 () { &_Complex \'float\';}' unless defined(&__CFLOAT32);
	    } else {
		eval 'sub __CFLOAT32 () { &_Complex  &_Float32;}' unless defined(&__CFLOAT32);
	    }
	}
	if((defined(&__HAVE_FLOAT64) ? &__HAVE_FLOAT64 : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		if(defined(&__NO_LONG_DOUBLE_MATH)) {
		    eval 'sub __CFLOAT64 () { &_Complex \'long double\';}' unless defined(&__CFLOAT64);
		} else {
		    eval 'sub __CFLOAT64 () { &_Complex \'double\';}' unless defined(&__CFLOAT64);
		}
	    } else {
		eval 'sub __CFLOAT64 () { &_Complex  &_Float64;}' unless defined(&__CFLOAT64);
	    }
	}
	if((defined(&__HAVE_FLOAT32X) ? &__HAVE_FLOAT32X : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		eval 'sub __CFLOAT32X () { &_Complex \'double\';}' unless defined(&__CFLOAT32X);
	    } else {
		eval 'sub __CFLOAT32X () { &_Complex  &_Float32x;}' unless defined(&__CFLOAT32X);
	    }
	}
	if((defined(&__HAVE_FLOAT64X) ? &__HAVE_FLOAT64X : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		if((defined(&__HAVE_FLOAT64X_LONG_DOUBLE) ? &__HAVE_FLOAT64X_LONG_DOUBLE : undef)) {
		    eval 'sub __CFLOAT64X () { &_Complex \'long double\';}' unless defined(&__CFLOAT64X);
		} else {
		    eval 'sub __CFLOAT64X () { &__CFLOAT128;}' unless defined(&__CFLOAT64X);
		}
	    } else {
		eval 'sub __CFLOAT64X () { &_Complex  &_Float64x;}' unless defined(&__CFLOAT64X);
	    }
	}
	if((defined(&__HAVE_FLOAT128X) ? &__HAVE_FLOAT128X : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		die("_Float128X supported but no complex type");
	    } else {
		eval 'sub __CFLOAT128X () { &_Complex  &_Float128x;}' unless defined(&__CFLOAT128X);
	    }
	}
	if((defined(&__HAVE_FLOAT16) ? &__HAVE_FLOAT16 : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
	    }
	    if(! &__GNUC_PREREQ (7, 0)) {
		eval 'sub __builtin_huge_valf16 () {
		    eval q((( &_Float16)  &__builtin_huge_val ()));
		}' unless defined(&__builtin_huge_valf16);
		eval 'sub __builtin_inff16 () {
		    eval q((( &_Float16)  &__builtin_inf ()));
		}' unless defined(&__builtin_inff16);
		eval 'sub __builtin_nanf16 {
		    my($x) = @_;
    		    eval q((( &_Float16)  &__builtin_nan ($x)));
		}' unless defined(&__builtin_nanf16);
		eval 'sub __builtin_nansf16 {
		    my($x) = @_;
    		    eval q((( &_Float16)  &__builtin_nans ($x)));
		}' unless defined(&__builtin_nansf16);
	    }
	}
	if((defined(&__HAVE_FLOAT32) ? &__HAVE_FLOAT32 : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
	    }
	    if(! &__GNUC_PREREQ (7, 0)) {
		eval 'sub __builtin_huge_valf32 () {
		    eval q(( &__builtin_huge_valf ()));
		}' unless defined(&__builtin_huge_valf32);
		eval 'sub __builtin_inff32 () {
		    eval q(( &__builtin_inff ()));
		}' unless defined(&__builtin_inff32);
		eval 'sub __builtin_nanf32 {
		    my($x) = @_;
    		    eval q(( &__builtin_nanf ($x)));
		}' unless defined(&__builtin_nanf32);
		eval 'sub __builtin_nansf32 {
		    my($x) = @_;
    		    eval q(( &__builtin_nansf ($x)));
		}' unless defined(&__builtin_nansf32);
	    }
	}
	if((defined(&__HAVE_FLOAT64) ? &__HAVE_FLOAT64 : undef)) {
	    if(defined(&__NO_LONG_DOUBLE_MATH)) {
		if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		}
		if(! &__GNUC_PREREQ (7, 0)) {
		    eval 'sub __builtin_huge_valf64 () {
		        eval q(( &__builtin_huge_vall ()));
		    }' unless defined(&__builtin_huge_valf64);
		    eval 'sub __builtin_inff64 () {
		        eval q(( &__builtin_infl ()));
		    }' unless defined(&__builtin_inff64);
		    eval 'sub __builtin_nanf64 {
		        my($x) = @_;
    			eval q(( &__builtin_nanl ($x)));
		    }' unless defined(&__builtin_nanf64);
		    eval 'sub __builtin_nansf64 {
		        my($x) = @_;
    			eval q(( &__builtin_nansl ($x)));
		    }' unless defined(&__builtin_nansf64);
		}
	    } else {
		if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		}
		if(! &__GNUC_PREREQ (7, 0)) {
		    eval 'sub __builtin_huge_valf64 () {
		        eval q(( &__builtin_huge_val ()));
		    }' unless defined(&__builtin_huge_valf64);
		    eval 'sub __builtin_inff64 () {
		        eval q(( &__builtin_inf ()));
		    }' unless defined(&__builtin_inff64);
		    eval 'sub __builtin_nanf64 {
		        my($x) = @_;
    			eval q(( &__builtin_nan ($x)));
		    }' unless defined(&__builtin_nanf64);
		    eval 'sub __builtin_nansf64 {
		        my($x) = @_;
    			eval q(( &__builtin_nans ($x)));
		    }' unless defined(&__builtin_nansf64);
		}
	    }
	}
	if((defined(&__HAVE_FLOAT32X) ? &__HAVE_FLOAT32X : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
	    }
	    if(! &__GNUC_PREREQ (7, 0)) {
		eval 'sub __builtin_huge_valf32x () {
		    eval q(( &__builtin_huge_val ()));
		}' unless defined(&__builtin_huge_valf32x);
		eval 'sub __builtin_inff32x () {
		    eval q(( &__builtin_inf ()));
		}' unless defined(&__builtin_inff32x);
		eval 'sub __builtin_nanf32x {
		    my($x) = @_;
    		    eval q(( &__builtin_nan ($x)));
		}' unless defined(&__builtin_nanf32x);
		eval 'sub __builtin_nansf32x {
		    my($x) = @_;
    		    eval q(( &__builtin_nans ($x)));
		}' unless defined(&__builtin_nansf32x);
	    }
	}
	if((defined(&__HAVE_FLOAT64X) ? &__HAVE_FLOAT64X : undef)) {
	    if((defined(&__HAVE_FLOAT64X_LONG_DOUBLE) ? &__HAVE_FLOAT64X_LONG_DOUBLE : undef)) {
		if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		}
		if(! &__GNUC_PREREQ (7, 0)) {
		    eval 'sub __builtin_huge_valf64x () {
		        eval q(( &__builtin_huge_vall ()));
		    }' unless defined(&__builtin_huge_valf64x);
		    eval 'sub __builtin_inff64x () {
		        eval q(( &__builtin_infl ()));
		    }' unless defined(&__builtin_inff64x);
		    eval 'sub __builtin_nanf64x {
		        my($x) = @_;
    			eval q(( &__builtin_nanl ($x)));
		    }' unless defined(&__builtin_nanf64x);
		    eval 'sub __builtin_nansf64x {
		        my($x) = @_;
    			eval q(( &__builtin_nansl ($x)));
		    }' unless defined(&__builtin_nansf64x);
		}
	    } else {
		if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		}
		if(! &__GNUC_PREREQ (7, 0)) {
		    eval 'sub __builtin_huge_valf64x () {
		        eval q(( &__builtin_huge_valf128 ()));
		    }' unless defined(&__builtin_huge_valf64x);
		    eval 'sub __builtin_inff64x () {
		        eval q(( &__builtin_inff128 ()));
		    }' unless defined(&__builtin_inff64x);
		    eval 'sub __builtin_nanf64x {
		        my($x) = @_;
    			eval q(( &__builtin_nanf128 ($x)));
		    }' unless defined(&__builtin_nanf64x);
		    eval 'sub __builtin_nansf64x {
		        my($x) = @_;
    			eval q(( &__builtin_nansf128 ($x)));
		    }' unless defined(&__builtin_nansf64x);
		}
	    }
	}
	if((defined(&__HAVE_FLOAT128X) ? &__HAVE_FLOAT128X : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		die("_Float128x supported but no type");
	    }
	    if(! &__GNUC_PREREQ (7, 0)) {
		eval 'sub __builtin_huge_valf128x () {
		    eval q((( &_Float128x)  &__builtin_huge_val ()));
		}' unless defined(&__builtin_huge_valf128x);
		eval 'sub __builtin_inff128x () {
		    eval q((( &_Float128x)  &__builtin_inf ()));
		}' unless defined(&__builtin_inff128x);
		eval 'sub __builtin_nanf128x {
		    my($x) = @_;
    		    eval q((( &_Float128x)  &__builtin_nan ($x)));
		}' unless defined(&__builtin_nanf128x);
		eval 'sub __builtin_nansf128x {
		    my($x) = @_;
    		    eval q((( &_Float128x)  &__builtin_nans ($x)));
		}' unless defined(&__builtin_nansf128x);
	    }
	}
    }
}
1;
                                                                                                                                                                                             usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/floatn.ph                                                 0000644 0000000 0000000 00000005527 14530460112 017762  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_BITS_FLOATN_H)) {
    eval 'sub _BITS_FLOATN_H () {1;}' unless defined(&_BITS_FLOATN_H);
    require 'features.ph';
    if((defined (&__x86_64__) ?  &__GNUC_PREREQ (4, 3) : (defined (&__GNU__) ?  &__GNUC_PREREQ (4, 5) :  &__GNUC_PREREQ (4, 4)))  && !defined(&__CUDACC__)  && !defined(&__ICC)) {
	eval 'sub __HAVE_FLOAT128 () {1;}' unless defined(&__HAVE_FLOAT128);
    } else {
	eval 'sub __HAVE_FLOAT128 () {0;}' unless defined(&__HAVE_FLOAT128);
    }
    if((defined(&__HAVE_FLOAT128) ? &__HAVE_FLOAT128 : undef)) {
	eval 'sub __HAVE_DISTINCT_FLOAT128 () {1;}' unless defined(&__HAVE_DISTINCT_FLOAT128);
    } else {
	eval 'sub __HAVE_DISTINCT_FLOAT128 () {0;}' unless defined(&__HAVE_DISTINCT_FLOAT128);
    }
    eval 'sub __HAVE_FLOAT64X () {1;}' unless defined(&__HAVE_FLOAT64X);
    eval 'sub __HAVE_FLOAT64X_LONG_DOUBLE () {1;}' unless defined(&__HAVE_FLOAT64X_LONG_DOUBLE);
    unless(defined(&__ASSEMBLER__)) {
	if((defined(&__HAVE_FLOAT128) ? &__HAVE_FLOAT128 : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		eval 'sub __f128 {
		    my($x) = @_;
    		    eval q($x &q);
		}' unless defined(&__f128);
	    } else {
		eval 'sub __f128 {
		    my($x) = @_;
    		    eval q($x &f128);
		}' unless defined(&__f128);
	    }
	}
	if((defined(&__HAVE_FLOAT128) ? &__HAVE_FLOAT128 : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
		eval 'sub __CFLOAT128 () { &__cfloat128;}' unless defined(&__CFLOAT128);
	    } else {
		eval 'sub __CFLOAT128 () { &_Complex  &_Float128;}' unless defined(&__CFLOAT128);
	    }
	}
	if((defined(&__HAVE_FLOAT128) ? &__HAVE_FLOAT128 : undef)) {
	    if(! &__GNUC_PREREQ (7, 0) || (defined (&__cplusplus)  && ! &__GNUC_PREREQ (13, 0))) {
	    }
	    if(! &__GNUC_PREREQ (7, 0)) {
		eval 'sub __builtin_huge_valf128 () {
		    eval q((( &_Float128)  &__builtin_huge_val ()));
		}' unless defined(&__builtin_huge_valf128);
	    }
	    if(! &__GNUC_PREREQ (7, 0)) {
		eval 'sub __builtin_copysignf128 () { &__builtin_copysignq;}' unless defined(&__builtin_copysignf128);
		eval 'sub __builtin_fabsf128 () { &__builtin_fabsq;}' unless defined(&__builtin_fabsf128);
		eval 'sub __builtin_inff128 () {
		    eval q((( &_Float128)  &__builtin_inf ()));
		}' unless defined(&__builtin_inff128);
		eval 'sub __builtin_nanf128 {
		    my($x) = @_;
    		    eval q((( &_Float128)  &__builtin_nan ($x)));
		}' unless defined(&__builtin_nanf128);
		eval 'sub __builtin_nansf128 {
		    my($x) = @_;
    		    eval q((( &_Float128)  &__builtin_nans ($x)));
		}' unless defined(&__builtin_nansf128);
	    }
	    if(! &__GNUC_PREREQ (6, 0)) {
		eval 'sub __builtin_signbitf128 () { &__signbitf128;}' unless defined(&__builtin_signbitf128);
	    }
	}
    }
    require 'bits/floatn-common.ph';
}
1;
                                                                                                                                                                         usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/getopt_core.ph                                            0000644 0000000 0000000 00000000250 14530460112 020775  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_GETOPT_CORE_H)) {
    eval 'sub _GETOPT_CORE_H () {1;}' unless defined(&_GETOPT_CORE_H);
}
1;
                                                                                                                                                                                                                                                                                                                                                        usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/getopt_posix.ph                                           0000644 0000000 0000000 00000001106 14530460112 021210  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_GETOPT_POSIX_H)) {
    eval 'sub _GETOPT_POSIX_H () {1;}' unless defined(&_GETOPT_POSIX_H);
    if(!defined (&_UNISTD_H)  && !defined (&_STDIO_H)) {
	die("Never include getopt_posix.h directly; use unistd.h instead.");
    }
    require 'bits/getopt_core.ph';
    if(defined (&__USE_POSIX2)  && !defined (&__USE_POSIX_IMPLICITLY)  && !defined (&__USE_GNU)  && !defined (&_GETOPT_H)) {
	if(defined(&__REDIRECT)) {
	} else {
	    eval 'sub getopt () { &__posix_getopt;}' unless defined(&getopt);
	}
    }
}
1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                          usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/ioctl-types.ph                                            0000644 0000000 0000000 00000003344 14530460112 020746  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_SYS_IOCTL_H)) {
    die("Never use <bits/ioctl-types.h> directly; include <sys/ioctl.h> instead.");
}
require 'asm/ioctls.ph';
eval 'sub NCC () {8;}' unless defined(&NCC);
eval 'sub TIOCM_LE () {0x1;}' unless defined(&TIOCM_LE);
eval 'sub TIOCM_DTR () {0x2;}' unless defined(&TIOCM_DTR);
eval 'sub TIOCM_RTS () {0x4;}' unless defined(&TIOCM_RTS);
eval 'sub TIOCM_ST () {0x8;}' unless defined(&TIOCM_ST);
eval 'sub TIOCM_SR () {0x10;}' unless defined(&TIOCM_SR);
eval 'sub TIOCM_CTS () {0x20;}' unless defined(&TIOCM_CTS);
eval 'sub TIOCM_CAR () {0x40;}' unless defined(&TIOCM_CAR);
eval 'sub TIOCM_RNG () {0x80;}' unless defined(&TIOCM_RNG);
eval 'sub TIOCM_DSR () {0x100;}' unless defined(&TIOCM_DSR);
eval 'sub TIOCM_CD () { &TIOCM_CAR;}' unless defined(&TIOCM_CD);
eval 'sub TIOCM_RI () { &TIOCM_RNG;}' unless defined(&TIOCM_RI);
eval 'sub N_TTY () {0;}' unless defined(&N_TTY);
eval 'sub N_SLIP () {1;}' unless defined(&N_SLIP);
eval 'sub N_MOUSE () {2;}' unless defined(&N_MOUSE);
eval 'sub N_PPP () {3;}' unless defined(&N_PPP);
eval 'sub N_STRIP () {4;}' unless defined(&N_STRIP);
eval 'sub N_AX25 () {5;}' unless defined(&N_AX25);
eval 'sub N_X25 () {6;}' unless defined(&N_X25);
eval 'sub N_6PACK () {7;}' unless defined(&N_6PACK);
eval 'sub N_MASC () {8;}' unless defined(&N_MASC);
eval 'sub N_R3964 () {9;}' unless defined(&N_R3964);
eval 'sub N_PROFIBUS_FDL () {10;}' unless defined(&N_PROFIBUS_FDL);
eval 'sub N_IRDA () {11;}' unless defined(&N_IRDA);
eval 'sub N_SMSBLOCK () {12;}' unless defined(&N_SMSBLOCK);
eval 'sub N_HDLC () {13;}' unless defined(&N_HDLC);
eval 'sub N_SYNC_PPP () {14;}' unless defined(&N_SYNC_PPP);
eval 'sub N_HCI () {15;}' unless defined(&N_HCI);
1;
                                                                                                                                                                                                                                                                                            usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/ioctls.ph                                                 0000644 0000000 0000000 00000007363 14530460112 017774  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_SYS_IOCTL_H)) {
    die("Never use <bits/ioctls.h> directly; include <sys/ioctl.h> instead.");
}
require 'asm/ioctls.ph';
eval 'sub SIOCADDRT () {0x890b;}' unless defined(&SIOCADDRT);
eval 'sub SIOCDELRT () {0x890c;}' unless defined(&SIOCDELRT);
eval 'sub SIOCRTMSG () {0x890d;}' unless defined(&SIOCRTMSG);
eval 'sub SIOCGIFNAME () {0x8910;}' unless defined(&SIOCGIFNAME);
eval 'sub SIOCSIFLINK () {0x8911;}' unless defined(&SIOCSIFLINK);
eval 'sub SIOCGIFCONF () {0x8912;}' unless defined(&SIOCGIFCONF);
eval 'sub SIOCGIFFLAGS () {0x8913;}' unless defined(&SIOCGIFFLAGS);
eval 'sub SIOCSIFFLAGS () {0x8914;}' unless defined(&SIOCSIFFLAGS);
eval 'sub SIOCGIFADDR () {0x8915;}' unless defined(&SIOCGIFADDR);
eval 'sub SIOCSIFADDR () {0x8916;}' unless defined(&SIOCSIFADDR);
eval 'sub SIOCGIFDSTADDR () {0x8917;}' unless defined(&SIOCGIFDSTADDR);
eval 'sub SIOCSIFDSTADDR () {0x8918;}' unless defined(&SIOCSIFDSTADDR);
eval 'sub SIOCGIFBRDADDR () {0x8919;}' unless defined(&SIOCGIFBRDADDR);
eval 'sub SIOCSIFBRDADDR () {0x891a;}' unless defined(&SIOCSIFBRDADDR);
eval 'sub SIOCGIFNETMASK () {0x891b;}' unless defined(&SIOCGIFNETMASK);
eval 'sub SIOCSIFNETMASK () {0x891c;}' unless defined(&SIOCSIFNETMASK);
eval 'sub SIOCGIFMETRIC () {0x891d;}' unless defined(&SIOCGIFMETRIC);
eval 'sub SIOCSIFMETRIC () {0x891e;}' unless defined(&SIOCSIFMETRIC);
eval 'sub SIOCGIFMEM () {0x891f;}' unless defined(&SIOCGIFMEM);
eval 'sub SIOCSIFMEM () {0x8920;}' unless defined(&SIOCSIFMEM);
eval 'sub SIOCGIFMTU () {0x8921;}' unless defined(&SIOCGIFMTU);
eval 'sub SIOCSIFMTU () {0x8922;}' unless defined(&SIOCSIFMTU);
eval 'sub SIOCSIFNAME () {0x8923;}' unless defined(&SIOCSIFNAME);
eval 'sub SIOCSIFHWADDR () {0x8924;}' unless defined(&SIOCSIFHWADDR);
eval 'sub SIOCGIFENCAP () {0x8925;}' unless defined(&SIOCGIFENCAP);
eval 'sub SIOCSIFENCAP () {0x8926;}' unless defined(&SIOCSIFENCAP);
eval 'sub SIOCGIFHWADDR () {0x8927;}' unless defined(&SIOCGIFHWADDR);
eval 'sub SIOCGIFSLAVE () {0x8929;}' unless defined(&SIOCGIFSLAVE);
eval 'sub SIOCSIFSLAVE () {0x8930;}' unless defined(&SIOCSIFSLAVE);
eval 'sub SIOCADDMULTI () {0x8931;}' unless defined(&SIOCADDMULTI);
eval 'sub SIOCDELMULTI () {0x8932;}' unless defined(&SIOCDELMULTI);
eval 'sub SIOCGIFINDEX () {0x8933;}' unless defined(&SIOCGIFINDEX);
eval 'sub SIOGIFINDEX () { &SIOCGIFINDEX;}' unless defined(&SIOGIFINDEX);
eval 'sub SIOCSIFPFLAGS () {0x8934;}' unless defined(&SIOCSIFPFLAGS);
eval 'sub SIOCGIFPFLAGS () {0x8935;}' unless defined(&SIOCGIFPFLAGS);
eval 'sub SIOCDIFADDR () {0x8936;}' unless defined(&SIOCDIFADDR);
eval 'sub SIOCSIFHWBROADCAST () {0x8937;}' unless defined(&SIOCSIFHWBROADCAST);
eval 'sub SIOCGIFCOUNT () {0x8938;}' unless defined(&SIOCGIFCOUNT);
eval 'sub SIOCGIFBR () {0x8940;}' unless defined(&SIOCGIFBR);
eval 'sub SIOCSIFBR () {0x8941;}' unless defined(&SIOCSIFBR);
eval 'sub SIOCGIFTXQLEN () {0x8942;}' unless defined(&SIOCGIFTXQLEN);
eval 'sub SIOCSIFTXQLEN () {0x8943;}' unless defined(&SIOCSIFTXQLEN);
eval 'sub SIOCDARP () {0x8953;}' unless defined(&SIOCDARP);
eval 'sub SIOCGARP () {0x8954;}' unless defined(&SIOCGARP);
eval 'sub SIOCSARP () {0x8955;}' unless defined(&SIOCSARP);
eval 'sub SIOCDRARP () {0x8960;}' unless defined(&SIOCDRARP);
eval 'sub SIOCGRARP () {0x8961;}' unless defined(&SIOCGRARP);
eval 'sub SIOCSRARP () {0x8962;}' unless defined(&SIOCSRARP);
eval 'sub SIOCGIFMAP () {0x8970;}' unless defined(&SIOCGIFMAP);
eval 'sub SIOCSIFMAP () {0x8971;}' unless defined(&SIOCSIFMAP);
eval 'sub SIOCADDDLCI () {0x8980;}' unless defined(&SIOCADDDLCI);
eval 'sub SIOCDELDLCI () {0x8981;}' unless defined(&SIOCDELDLCI);
eval 'sub SIOCDEVPRIVATE () {0x89f0;}' unless defined(&SIOCDEVPRIVATE);
eval 'sub SIOCPROTOPRIVATE () {0x89e0;}' unless defined(&SIOCPROTOPRIVATE);
1;
                                                                                                                                                                                                                                                                             usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/linux/                                                    0000755 0000000 0000000 00000000000 14530460112 017274  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/long-double.ph                                            0000644 0000000 0000000 00000000251 14530460112 020673  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);

eval 'sub __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI () {0;}' unless defined(&__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI);
1;
                                                                                                                                                                                                                                                                                                                                                       usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/posix_opt.ph                                              0000644 0000000 0000000 00000012537 14530460112 020522  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_BITS_POSIX_OPT_H)) {
    eval 'sub _BITS_POSIX_OPT_H () {1;}' unless defined(&_BITS_POSIX_OPT_H);
    eval 'sub _POSIX_JOB_CONTROL () {1;}' unless defined(&_POSIX_JOB_CONTROL);
    eval 'sub _POSIX_SAVED_IDS () {1;}' unless defined(&_POSIX_SAVED_IDS);
    eval 'sub _POSIX_PRIORITY_SCHEDULING () {200809;}' unless defined(&_POSIX_PRIORITY_SCHEDULING);
    eval 'sub _POSIX_SYNCHRONIZED_IO () {200809;}' unless defined(&_POSIX_SYNCHRONIZED_IO);
    eval 'sub _POSIX_FSYNC () {200809;}' unless defined(&_POSIX_FSYNC);
    eval 'sub _POSIX_MAPPED_FILES () {200809;}' unless defined(&_POSIX_MAPPED_FILES);
    eval 'sub _POSIX_MEMLOCK () {200809;}' unless defined(&_POSIX_MEMLOCK);
    eval 'sub _POSIX_MEMLOCK_RANGE () {200809;}' unless defined(&_POSIX_MEMLOCK_RANGE);
    eval 'sub _POSIX_MEMORY_PROTECTION () {200809;}' unless defined(&_POSIX_MEMORY_PROTECTION);
    eval 'sub _POSIX_CHOWN_RESTRICTED () {0;}' unless defined(&_POSIX_CHOWN_RESTRICTED);
    eval 'sub _POSIX_VDISABLE () {ord(\'\\0\');}' unless defined(&_POSIX_VDISABLE);
    eval 'sub _POSIX_NO_TRUNC () {1;}' unless defined(&_POSIX_NO_TRUNC);
    eval 'sub _XOPEN_REALTIME () {1;}' unless defined(&_XOPEN_REALTIME);
    eval 'sub _XOPEN_REALTIME_THREADS () {1;}' unless defined(&_XOPEN_REALTIME_THREADS);
    eval 'sub _XOPEN_SHM () {1;}' unless defined(&_XOPEN_SHM);
    eval 'sub _POSIX_THREADS () {200809;}' unless defined(&_POSIX_THREADS);
    eval 'sub _POSIX_REENTRANT_FUNCTIONS () {1;}' unless defined(&_POSIX_REENTRANT_FUNCTIONS);
    eval 'sub _POSIX_THREAD_SAFE_FUNCTIONS () {200809;}' unless defined(&_POSIX_THREAD_SAFE_FUNCTIONS);
    eval 'sub _POSIX_THREAD_PRIORITY_SCHEDULING () {200809;}' unless defined(&_POSIX_THREAD_PRIORITY_SCHEDULING);
    eval 'sub _POSIX_THREAD_ATTR_STACKSIZE () {200809;}' unless defined(&_POSIX_THREAD_ATTR_STACKSIZE);
    eval 'sub _POSIX_THREAD_ATTR_STACKADDR () {200809;}' unless defined(&_POSIX_THREAD_ATTR_STACKADDR);
    eval 'sub _POSIX_THREAD_PRIO_INHERIT () {200809;}' unless defined(&_POSIX_THREAD_PRIO_INHERIT);
    eval 'sub _POSIX_THREAD_PRIO_PROTECT () {200809;}' unless defined(&_POSIX_THREAD_PRIO_PROTECT);
    if(defined(&__USE_XOPEN2K8)) {
	eval 'sub _POSIX_THREAD_ROBUST_PRIO_INHERIT () {200809;}' unless defined(&_POSIX_THREAD_ROBUST_PRIO_INHERIT);
	eval 'sub _POSIX_THREAD_ROBUST_PRIO_PROTECT () {-1;}' unless defined(&_POSIX_THREAD_ROBUST_PRIO_PROTECT);
    }
    eval 'sub _POSIX_SEMAPHORES () {200809;}' unless defined(&_POSIX_SEMAPHORES);
    eval 'sub _POSIX_REALTIME_SIGNALS () {200809;}' unless defined(&_POSIX_REALTIME_SIGNALS);
    eval 'sub _POSIX_ASYNCHRONOUS_IO () {200809;}' unless defined(&_POSIX_ASYNCHRONOUS_IO);
    eval 'sub _POSIX_ASYNC_IO () {1;}' unless defined(&_POSIX_ASYNC_IO);
    eval 'sub _LFS_ASYNCHRONOUS_IO () {1;}' unless defined(&_LFS_ASYNCHRONOUS_IO);
    eval 'sub _POSIX_PRIORITIZED_IO () {200809;}' unless defined(&_POSIX_PRIORITIZED_IO);
    eval 'sub _LFS64_ASYNCHRONOUS_IO () {1;}' unless defined(&_LFS64_ASYNCHRONOUS_IO);
    eval 'sub _LFS_LARGEFILE () {1;}' unless defined(&_LFS_LARGEFILE);
    eval 'sub _LFS64_LARGEFILE () {1;}' unless defined(&_LFS64_LARGEFILE);
    eval 'sub _LFS64_STDIO () {1;}' unless defined(&_LFS64_STDIO);
    eval 'sub _POSIX_SHARED_MEMORY_OBJECTS () {200809;}' unless defined(&_POSIX_SHARED_MEMORY_OBJECTS);
    eval 'sub _POSIX_CPUTIME () {0;}' unless defined(&_POSIX_CPUTIME);
    eval 'sub _POSIX_THREAD_CPUTIME () {0;}' unless defined(&_POSIX_THREAD_CPUTIME);
    eval 'sub _POSIX_REGEXP () {1;}' unless defined(&_POSIX_REGEXP);
    eval 'sub _POSIX_READER_WRITER_LOCKS () {200809;}' unless defined(&_POSIX_READER_WRITER_LOCKS);
    eval 'sub _POSIX_SHELL () {1;}' unless defined(&_POSIX_SHELL);
    eval 'sub _POSIX_TIMEOUTS () {200809;}' unless defined(&_POSIX_TIMEOUTS);
    eval 'sub _POSIX_SPIN_LOCKS () {200809;}' unless defined(&_POSIX_SPIN_LOCKS);
    eval 'sub _POSIX_SPAWN () {200809;}' unless defined(&_POSIX_SPAWN);
    eval 'sub _POSIX_TIMERS () {200809;}' unless defined(&_POSIX_TIMERS);
    eval 'sub _POSIX_BARRIERS () {200809;}' unless defined(&_POSIX_BARRIERS);
    eval 'sub _POSIX_MESSAGE_PASSING () {200809;}' unless defined(&_POSIX_MESSAGE_PASSING);
    eval 'sub _POSIX_THREAD_PROCESS_SHARED () {200809;}' unless defined(&_POSIX_THREAD_PROCESS_SHARED);
    eval 'sub _POSIX_MONOTONIC_CLOCK () {0;}' unless defined(&_POSIX_MONOTONIC_CLOCK);
    eval 'sub _POSIX_CLOCK_SELECTION () {200809;}' unless defined(&_POSIX_CLOCK_SELECTION);
    eval 'sub _POSIX_ADVISORY_INFO () {200809;}' unless defined(&_POSIX_ADVISORY_INFO);
    eval 'sub _POSIX_IPV6 () {200809;}' unless defined(&_POSIX_IPV6);
    eval 'sub _POSIX_RAW_SOCKETS () {200809;}' unless defined(&_POSIX_RAW_SOCKETS);
    eval 'sub _POSIX2_CHAR_TERM () {200809;}' unless defined(&_POSIX2_CHAR_TERM);
    eval 'sub _POSIX_SPORADIC_SERVER () {-1;}' unless defined(&_POSIX_SPORADIC_SERVER);
    eval 'sub _POSIX_THREAD_SPORADIC_SERVER () {-1;}' unless defined(&_POSIX_THREAD_SPORADIC_SERVER);
    eval 'sub _POSIX_TRACE () {-1;}' unless defined(&_POSIX_TRACE);
    eval 'sub _POSIX_TRACE_EVENT_FILTER () {-1;}' unless defined(&_POSIX_TRACE_EVENT_FILTER);
    eval 'sub _POSIX_TRACE_INHERIT () {-1;}' unless defined(&_POSIX_TRACE_INHERIT);
    eval 'sub _POSIX_TRACE_LOG () {-1;}' unless defined(&_POSIX_TRACE_LOG);
    eval 'sub _POSIX_TYPED_MEMORY_OBJECTS () {-1;}' unless defined(&_POSIX_TYPED_MEMORY_OBJECTS);
}
1;
                                                                                                                                                                 usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/pthreadtypes-arch.ph                                      0000644 0000000 0000000 00000004335 14530460112 022122  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_BITS_PTHREADTYPES_ARCH_H)) {
    eval 'sub _BITS_PTHREADTYPES_ARCH_H () {1;}' unless defined(&_BITS_PTHREADTYPES_ARCH_H);
    require 'bits/wordsize.ph';
    if(defined(&__x86_64__)) {
	if((defined(&__WORDSIZE) ? &__WORDSIZE : undef) == 64) {
	    eval 'sub __SIZEOF_PTHREAD_MUTEX_T () {40;}' unless defined(&__SIZEOF_PTHREAD_MUTEX_T);
	    eval 'sub __SIZEOF_PTHREAD_ATTR_T () {56;}' unless defined(&__SIZEOF_PTHREAD_ATTR_T);
	    eval 'sub __SIZEOF_PTHREAD_RWLOCK_T () {56;}' unless defined(&__SIZEOF_PTHREAD_RWLOCK_T);
	    eval 'sub __SIZEOF_PTHREAD_BARRIER_T () {32;}' unless defined(&__SIZEOF_PTHREAD_BARRIER_T);
	} else {
	    eval 'sub __SIZEOF_PTHREAD_MUTEX_T () {32;}' unless defined(&__SIZEOF_PTHREAD_MUTEX_T);
	    eval 'sub __SIZEOF_PTHREAD_ATTR_T () {32;}' unless defined(&__SIZEOF_PTHREAD_ATTR_T);
	    eval 'sub __SIZEOF_PTHREAD_RWLOCK_T () {44;}' unless defined(&__SIZEOF_PTHREAD_RWLOCK_T);
	    eval 'sub __SIZEOF_PTHREAD_BARRIER_T () {20;}' unless defined(&__SIZEOF_PTHREAD_BARRIER_T);
	}
    } else {
	eval 'sub __SIZEOF_PTHREAD_MUTEX_T () {24;}' unless defined(&__SIZEOF_PTHREAD_MUTEX_T);
	eval 'sub __SIZEOF_PTHREAD_ATTR_T () {36;}' unless defined(&__SIZEOF_PTHREAD_ATTR_T);
	eval 'sub __SIZEOF_PTHREAD_RWLOCK_T () {32;}' unless defined(&__SIZEOF_PTHREAD_RWLOCK_T);
	eval 'sub __SIZEOF_PTHREAD_BARRIER_T () {20;}' unless defined(&__SIZEOF_PTHREAD_BARRIER_T);
    }
    eval 'sub __SIZEOF_PTHREAD_MUTEXATTR_T () {4;}' unless defined(&__SIZEOF_PTHREAD_MUTEXATTR_T);
    eval 'sub __SIZEOF_PTHREAD_COND_T () {48;}' unless defined(&__SIZEOF_PTHREAD_COND_T);
    eval 'sub __SIZEOF_PTHREAD_CONDATTR_T () {4;}' unless defined(&__SIZEOF_PTHREAD_CONDATTR_T);
    eval 'sub __SIZEOF_PTHREAD_RWLOCKATTR_T () {8;}' unless defined(&__SIZEOF_PTHREAD_RWLOCKATTR_T);
    eval 'sub __SIZEOF_PTHREAD_BARRIERATTR_T () {4;}' unless defined(&__SIZEOF_PTHREAD_BARRIERATTR_T);
    eval 'sub __LOCK_ALIGNMENT () {1;}' unless defined(&__LOCK_ALIGNMENT);
    eval 'sub __ONCE_ALIGNMENT () {1;}' unless defined(&__ONCE_ALIGNMENT);
    unless(defined(&__x86_64__)) {
	eval 'sub __cleanup_fct_attribute () { &__attribute__ (( &__regparm__ (1)));}' unless defined(&__cleanup_fct_attribute);
    }
}
1;
                                                                                                                                                                                                                                                                                                   usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/pthreadtypes.ph                                           0000644 0000000 0000000 00000000754 14530460112 021210  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_BITS_PTHREADTYPES_COMMON_H)) {
    eval 'sub _BITS_PTHREADTYPES_COMMON_H () {1;}' unless defined(&_BITS_PTHREADTYPES_COMMON_H);
    require 'bits/thread-shared-types.ph';
    unless(defined(&__have_pthread_attr_t)) {
	eval 'sub __have_pthread_attr_t () {1;}' unless defined(&__have_pthread_attr_t);
    }
    if(defined (&__USE_UNIX98) || defined (&__USE_XOPEN2K)) {
    }
    if(defined(&__USE_XOPEN2K)) {
    }
}
1;
                    usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/select.ph                                                 0000644 0000000 0000000 00000001571 14530460112 017751  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_SYS_SELECT_H)) {
    die("Never use <bits/select.h> directly; include <sys/select.h> instead.");
}
unless(defined(&__FD_ZERO)) {
    sub __FD_ZERO {
	my($s) = @_;
	eval q( &do { 'unsigned int __i';  &fd_set * &__arr = ($s);  &for ( &__i = 0;  &__i < $sizeof{ &fd_set} / $sizeof{ &__fd_mask}; ++ &__i)  &__FDS_BITS ( &__arr)[ &__i] = 0; }  &while (0));
    }
}
unless(defined(&__FD_SET)) {
    sub __FD_SET {
	my($d, $s) = @_;
	eval q((( &void) ( &__FDS_BITS ($s)[ &__FD_ELT($d)] |=  &__FD_MASK($d))));
    }
}
unless(defined(&__FD_CLR)) {
    sub __FD_CLR {
	my($d, $s) = @_;
	eval q((( &void) ( &__FDS_BITS ($s)[ &__FD_ELT($d)] &= ~ &__FD_MASK($d))));
    }
}
unless(defined(&__FD_ISSET)) {
    sub __FD_ISSET {
	my($d, $s) = @_;
	eval q((( &__FDS_BITS ($s)[ &__FD_ELT ($d)] &  &__FD_MASK ($d)) != 0));
    }
}
1;
                                                                                                                                       usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/select2.ph                                                0000644 0000000 0000000 00000000752 14530460112 020033  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_SYS_SELECT_H)) {
    die("Never include <bits/select2.h> directly; use <sys/select.h> instead.");
}
undef(&__FD_ELT) if defined(&__FD_ELT);
unless(defined(&__FD_ELT)) {
    sub __FD_ELT {
	my($d) = @_;
	eval q( &__extension__ ({ 'long int __d' = ($d); ( &__builtin_constant_p ( &__d) ? (0<=  &__d  &&  &__d <  &__FD_SETSIZE ? ( &__d /  &__NFDBITS) :  &__fdelt_warn ( &__d)) :  &__fdelt_chk ( &__d)); }));
    }
}
1;
                      usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/sigaction.ph                                              0000644 0000000 0000000 00000003270 14530460112 020450  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_BITS_SIGACTION_H)) {
    eval 'sub _BITS_SIGACTION_H () {1;}' unless defined(&_BITS_SIGACTION_H);
    unless(defined(&_SIGNAL_H)) {
	die("Never include <bits/sigaction.h> directly; use <signal.h> instead.");
    }
    if(defined (&__USE_POSIX199309) || defined (&__USE_XOPEN_EXTENDED)) {
	eval 'sub sa_handler () { ($__sigaction_handler->{sa_handler});}' unless defined(&sa_handler);
	eval 'sub sa_sigaction () { ($__sigaction_handler->{sa_sigaction});}' unless defined(&sa_sigaction);
    } else {
    }
    eval 'sub SA_NOCLDSTOP () {1;}' unless defined(&SA_NOCLDSTOP);
    eval 'sub SA_NOCLDWAIT () {2;}' unless defined(&SA_NOCLDWAIT);
    eval 'sub SA_SIGINFO () {4;}' unless defined(&SA_SIGINFO);
    if(defined (&__USE_XOPEN_EXTENDED) || defined (&__USE_MISC)) {
	eval 'sub SA_ONSTACK () {0x8000000;}' unless defined(&SA_ONSTACK);
    }
    if(defined (&__USE_XOPEN_EXTENDED) || defined (&__USE_XOPEN2K8)) {
	eval 'sub SA_RESTART () {0x10000000;}' unless defined(&SA_RESTART);
	eval 'sub SA_NODEFER () {0x40000000;}' unless defined(&SA_NODEFER);
	eval 'sub SA_RESETHAND () {0x80000000;}' unless defined(&SA_RESETHAND);
    }
    if(defined(&__USE_MISC)) {
	eval 'sub SA_INTERRUPT () {0x20000000;}' unless defined(&SA_INTERRUPT);
	eval 'sub SA_NOMASK () { &SA_NODEFER;}' unless defined(&SA_NOMASK);
	eval 'sub SA_ONESHOT () { &SA_RESETHAND;}' unless defined(&SA_ONESHOT);
	eval 'sub SA_STACK () { &SA_ONSTACK;}' unless defined(&SA_STACK);
    }
    eval 'sub SIG_BLOCK () {0;}' unless defined(&SIG_BLOCK);
    eval 'sub SIG_UNBLOCK () {1;}' unless defined(&SIG_UNBLOCK);
    eval 'sub SIG_SETMASK () {2;}' unless defined(&SIG_SETMASK);
}
1;
                                                                                                                                                                                                                                                                                                                                        usr/lib/x86_64-linux-gnu/perl/5.36.0/bits/sigcontext.ph                                             0000644 0000000 0000000 00000001571 14530460112 020661  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require '_h2ph_pre.ph';

no warnings qw(redefine misc);
