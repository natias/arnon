It must be called before each call to X509_verify_cert().

    my $rv = Net::SSLeay::X509_STORE_CTX_init($x509_store_ctx, $x509_store, $x509, $chain);
    # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure (required)
    # $x509_store - value corresponding to openssl's X509_STORE structure (optional)
    # $x509 - value corresponding to openssl's X509 structure (optional)
    # $chain - value corresponding to openssl's STACK_OF(X509) structure (optional)
    #
    # returns: 1 on success, 0 on failure
    #
    # Note: returns nothing with Net::SSLeay 1.90 and earlier.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_STORE_CTX_init.html>

=item * X509_STORE_CTX_free

Frees an X509_STORE_CTX structure.

    Net::SSLeay::X509_STORE_CTX_free($x509_store_ctx);
    # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure

=item * X509_verify_cert

The X509_verify_cert() function attempts to discover and validate a
certificate chain based on parameters in ctx. A complete description
of the process is contained in the verify(1) manual page.

If this function returns 0, use X509_STORE_CTX_get_error to get additional error
information.

    my $rv = Net::SSLeay::X509_verify_cert($x509_store_ctx);
    # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
    #
    # returns: 1 if a complete chain can be built and validated, otherwise 0

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_verify_cert.html>

=item * X509_STORE_CTX_get_current_cert

Returns the certificate in ctx which caused the error or 0 if no certificate is relevant.

    my $rv = Net::SSLeay::X509_STORE_CTX_get_current_cert($x509_store_ctx);
    # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
    #
    # returns: value corresponding to openssl's X509 structure (0 on failure)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_STORE_CTX_get_error.html>

=item * X509_STORE_CTX_get0_cert

B<COMPATIBILITY>: not available in Net-SSLeay-1.88 and before; requires at least OpenSSL 1.1.0pre6 or LibreSSL 2.7.0

Returns an internal pointer to the certificate being verified by the ctx.

    my $x509 = Net::SSLeay::X509_STORE_CTX_get0_cert($x509_store_ctx);
    # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
    #
    # returns: value corresponding to openssl's X509 structure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_STORE_CTX_get0_cert.html>

=item * X509_STORE_CTX_get1_chain

Returns a returns a complete validate chain if a previous call to X509_verify_cert() is successful.

    my $rv = Net::SSLeay::X509_STORE_CTX_get1_chain($x509_store_ctx);
    # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
    #
    # returns: value corresponding to openssl's STACK_OF(X509) structure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_STORE_CTX_get1_chain.html>

=item * X509_STORE_CTX_get_error

Returns the error code of $ctx.

    my $rv = Net::SSLeay::X509_STORE_CTX_get_error($x509_store_ctx);
    # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
    #
    # returns: (integer) error code

For more info about error code values check function L</get_verify_result>.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_STORE_CTX_get_error.html>

=item * X509_STORE_CTX_get_error_depth

Returns the depth of the error. This is a non-negative integer representing
where in the certificate chain the error occurred. If it is zero it occurred
in the end entity certificate, one if it is the certificate which signed
the end entity certificate and so on.

    my $rv = Net::SSLeay::X509_STORE_CTX_get_error_depth($x509_store_ctx);
    # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
    #
    # returns: (integer) depth

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_STORE_CTX_get_error.html>

=item * X509_STORE_CTX_get_ex_data

Is used to retrieve the information for $idx from $x509_store_ctx.

    my $rv = Net::SSLeay::X509_STORE_CTX_get_ex_data($x509_store_ctx, $idx);
    # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
    # $idx - (integer) index for application specific data
    #
    # returns: pointer to ???

=item * X509_STORE_CTX_set_ex_data

Is used to store application data at arg for idx into $x509_store_ctx.

    my $rv = Net::SSLeay::X509_STORE_CTX_set_ex_data($x509_store_ctx, $idx, $data);
    # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
    # $idx - (integer) ???
    # $data - (pointer) ???
    #
    # returns: 1 on success, 0 on failure

=item * X509_STORE_CTX_set_cert

Sets the certificate to be verified in $x509_store_ctx to $x.

    Net::SSLeay::X509_STORE_CTX_set_cert($x509_store_ctx, $x);
    # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
    # $x - value corresponding to openssl's X509 structure
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_STORE_CTX_new.html>

=item * X509_STORE_new

Returns a newly initialized X509_STORE structure.

    my $rv = Net::SSLeay::X509_STORE_new();
    #
    # returns: value corresponding to openssl's X509_STORE structure (0 on failure)

=item * X509_STORE_free

Frees an X509_STORE structure

    Net::SSLeay::X509_STORE_free($x509_store);
    # $x509_store - value corresponding to openssl's X509_STORE structure

=item * X509_STORE_add_lookup

Adds a lookup to an X509_STORE for a given lookup method.

    my $method = &Net::SSLeay::X509_LOOKUP_hash_dir;
    my $rv = Net::SSLeay::X509_STORE_add_lookup($x509_store, $method);
    # $method - value corresponding to openssl's X509_LOOKUP_METHOD structure
    # $x509_store - value corresponding to openssl's X509_STORE structure
    #
    # returns: value corresponding to openssl's X509_LOOKUP structure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_STORE_add_lookup.html>

=item * X509_STORE_CTX_set_error

Sets the error code of $ctx to $s. For example it might be used in a verification callback to set an error based on additional checks.

    Net::SSLeay::X509_STORE_CTX_set_error($x509_store_ctx, $s);
    # $x509_store_ctx - value corresponding to openssl's X509_STORE_CTX structure
    # $s - (integer) error id
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_STORE_CTX_get_error.html>

=item * X509_STORE_add_cert

Adds X509 certificate $x into the X509_STORE $store.

    my $rv = Net::SSLeay::X509_STORE_add_cert($store, $x);
    # $store - value corresponding to openssl's X509_STORE structure
    # $x - value corresponding to openssl's X509 structure
    #
    # returns: 1 on success, 0 on failure

=item * X509_STORE_add_crl

Adds X509 CRL $x into the X509_STORE $store.

    my $rv = Net::SSLeay::X509_STORE_add_crl($store, $x);
    # $store - value corresponding to openssl's X509_STORE structure
    # $x - value corresponding to openssl's X509_CRL structure
    #
    # returns: 1 on success, 0 on failure

=item * X509_STORE_set1_param

??? (more info needed)

    my $rv = Net::SSLeay::X509_STORE_set1_param($store, $pm);
    # $store - value corresponding to openssl's X509_STORE structure
    # $pm - value corresponding to openssl's X509_VERIFY_PARAM structure
    #
    # returns: 1 on success, 0 on failure

=item * X509_LOOKUP_hash_dir

Returns an X509_LOOKUP structure that instructs an X509_STORE to
load files from a directory containing certificates with filenames
in the format I<hash.N> or crls with filenames in the format I<hash.>B<r>I<N>

    my $rv = Net::SSLeay::X509_LOOKUP_hash_dir();
    #
    # returns: value corresponding to openssl's X509_LOOKUP_METHOD structure, with the hashed directory method

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_load_crl_file.html>

=item * X509_LOOKUP_add_dir

Add a directory to an X509_LOOKUP structure, usually obtained from
X509_STORE_add_lookup.

    my $method = &Net::SSLeay::X509_LOOKUP_hash_dir;
    my $lookup = Net::SSLeay::X509_STORE_add_lookup($x509_store, $method);
    my $type = &Net::SSLeay::X509_FILETYPE_PEM;
    Net::SSLeay::X509_LOOKUP_add_dir($lookup, $dir, $type);
    # $lookup - value corresponding to openssl's X509_LOOKUP structure
    # $dir - string path to a directory
    # $type - constant corresponding to the type of file in the directory - can be X509_FILETYPE_PEM, X509_FILETYPE_DEFAULT, or X509_FILETYPE_ASN1

=item * X509_STORE_set_flags

    Net::SSLeay::X509_STORE_set_flags($ctx, $flags);
    # $ctx - value corresponding to openssl's X509_STORE structure
    # $flags - (unsigned long) flags to be set (bitmask)
    #
    # returns: no return value

    # to create $flags value use corresponding constants like
    $flags = Net::SSLeay::X509_V_FLAG_CRL_CHECK();

For more details about $flags bitmask see L</X509_VERIFY_PARAM_set_flags>.

=item * X509_STORE_set_purpose

    Net::SSLeay::X509_STORE_set_purpose($ctx, $purpose);
    # $ctx - value corresponding to openssl's X509_STORE structure
    # $purpose - (integer) purpose identifier
    #
    # returns: no return value

For more details about $purpose identifier check L</CTX_set_purpose>.

=item * X509_STORE_set_trust

    Net::SSLeay::X509_STORE_set_trust($ctx, $trust);
    # $ctx - value corresponding to openssl's X509_STORE structure
    # $trust - (integer) trust identifier
    #
    # returns: no return value

For more details about $trust identifier check L</CTX_set_trust>.

=back

=head3 Low Level API: X509_INFO related functions

=over

=item * sk_X509_INFO_num

Returns the number of values in a STACK_OF(X509_INFO) structure.

    my $rv = Net::SSLeay::sk_X509_INFO_num($sk_x509_info);
    # $sk_x509_info - value corresponding to openssl's STACK_OF(X509_INFO) structure
    #
    # returns: number of values in $sk_X509_info

=item * sk_X509_INFO_value

Returns the value of a STACK_OF(X509_INFO) structure at a given index.

    my $rv = Net::SSLeay::sk_X509_INFO_value($sk_x509_info, $index);
    # $sk_x509_info - value corresponding to openssl's STACK_OF(X509_INFO) structure
    # $index - index into the stack
    #
    # returns: value corresponding to openssl's X509_INFO structure at the given index

=item * P_X509_INFO_get_x509

Returns the X509 structure stored in an X509_INFO structure.

    my $rv = Net::SSLeay::P_X509_INFO_get_x509($x509_info);
    # $x509_info - value corresponding to openssl's X509_INFO structure
    #
    # returns: value corresponding to openssl's X509 structure

=back

=head3 Low level API: X509_VERIFY_PARAM_* related functions

=over

=item * X509_VERIFY_PARAM_add0_policy

Enables policy checking (it is disabled by default) and adds $policy to the acceptable policy set.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_add0_policy($param, $policy);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $policy - value corresponding to openssl's ASN1_OBJECT structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_add0_table

??? (more info needed)

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_add0_table($param);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    #
    # returns: 1 on success, 0 on failure

=item * X509_VERIFY_PARAM_add1_host

B<COMPATIBILITY:> not available in Net-SSLeay-1.82 and before; requires at least OpenSSL 1.0.2-beta2 or LibreSSL 2.7.0

Adds an additional reference identifier that can match the peer's certificate.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_add1_host($param, $name);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $name - (string) name to be set
    #
    # returns: 1 on success, 0 on failure

See also OpenSSL docs, L</X509_VERIFY_PARAM_set1_host> and
L</X509_VERIFY_PARAM_set_hostflags> for more information, including
wildcard matching.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_clear_flags

Clears the flags $flags in param.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_clear_flags($param, $flags);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $flags - (unsigned long) flags to be set (bitmask)
    #
    # returns: 1 on success, 0 on failure

For more details about $flags bitmask see L</X509_VERIFY_PARAM_set_flags>.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_free

Frees up the X509_VERIFY_PARAM structure.

    Net::SSLeay::X509_VERIFY_PARAM_free($param);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    #
    # returns: no return value

=item * X509_VERIFY_PARAM_get0_peername

B<COMPATIBILITY:> not available in Net-SSLeay-1.82 and before; requires at least OpenSSL 1.0.2-beta2 or LibreSSL 2.7.0

Returns the DNS hostname or subject CommonName from the peer certificate that matched one of the reference identifiers.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_get0_peername($param);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    #
    # returns: (string) name e.g. '*.example.com' or undef

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_get_depth

Returns the current verification depth.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_get_depth($param);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    #
    # returns: (integer) depth

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_get_flags

Returns the current verification flags.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_get_flags($param);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    #
    # returns: (unsigned long) flags to be set (bitmask)

For more details about returned flags bitmask see L</X509_VERIFY_PARAM_set_flags>.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_set_flags

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_set_flags($param, $flags);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $flags - (unsigned long) flags to be set (bitmask)
    #
    # returns: 1 on success, 0 on failure

    # to create $flags value use corresponding constants like
    $flags = Net::SSLeay::X509_V_FLAG_CRL_CHECK();

For more details about $flags bitmask, see the OpenSSL docs below.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_inherit

??? (more info needed)

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_inherit($to, $from);
    # $to - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $from - value corresponding to openssl's X509_VERIFY_PARAM structure
    #
    # returns: 1 on success, 0 on failure

=item * X509_VERIFY_PARAM_lookup

Finds X509_VERIFY_PARAM by name.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_lookup($name);
    # $name - (string) name we want to find
    #
    # returns: value corresponding to openssl's X509_VERIFY_PARAM structure (0 on failure)

=item * X509_VERIFY_PARAM_new

Creates a new X509_VERIFY_PARAM structure.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_new();
    #
    # returns: value corresponding to openssl's X509_VERIFY_PARAM structure (0 on failure)

=item * X509_VERIFY_PARAM_set1

Sets the name of X509_VERIFY_PARAM structure $to to the same value
as the name of X509_VERIFY_PARAM structure $from.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_set1($to, $from);
    # $to - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $from - value corresponding to openssl's X509_VERIFY_PARAM structure
    #
    # returns: 1 on success, 0 on failure

=item * X509_VERIFY_PARAM_set1_email

B<COMPATIBILITY:> not available in Net-SSLeay-1.82 and before; requires at least OpenSSL 1.0.2-beta1 or LibreSSL 2.7.0

Sets the expected RFC822 email address to email.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_set1_email($param, $email);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $email - (string) email to be set
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_set1_host

B<COMPATIBILITY:> not available in Net-SSLeay-1.82 and before; requires at least OpenSSL 1.0.2-beta1 or LibreSSL 2.7.0

Sets the expected DNS hostname to name clearing any previously specified host name or names.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_set1_host($param, $name);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $name - (string) name to be set
    #
    # returns: 1 on success, 0 on failure

See also OpenSSL docs, L</X509_VERIFY_PARAM_add1_host> and
L</X509_VERIFY_PARAM_set_hostflags> for more information, including
wildcard matching.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_set1_ip

B<COMPATIBILITY:> not available in Net-SSLeay-1.82 and before; requires at least OpenSSL 1.0.2-beta1 or LibreSSL 2.7.0

Sets the expected IP address to ip.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_set1_ip($param, $ip);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $ip - (binary) 4 octet IPv4 or 16 octet IPv6 address
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_set1_ip_asc

B<COMPATIBILITY:> not available in Net-SSLeay-1.82 and before; requires at least OpenSSL 1.0.2-beta1 or LibreSSL 2.7.0

Sets the expected IP address to ipasc.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_set1_asc($param, $ipasc);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $ip - (string) IPv4 or IPv6 address
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_set1_name

Sets the name of X509_VERIFY_PARAM structure $param to $name.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_set1_name($param, $name);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $name - (string) name to be set
    #
    # returns: 1 on success, 0 on failure

=item * X509_VERIFY_PARAM_set1_policies

Enables policy checking (it is disabled by default) and sets the acceptable policy set to policies.
Any existing policy set is cleared. The policies parameter can be 0 to clear an existing policy set.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_set1_policies($param, $policies);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $policies - value corresponding to openssl's STACK_OF(ASN1_OBJECT) structure
    #
    # returns: 1 on success, 0 on failure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_set_depth

Sets the maximum verification depth to depth. That is the maximum number of untrusted CA certificates that can appear in a chain.

    Net::SSLeay::X509_VERIFY_PARAM_set_depth($param, $depth);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $depth - (integer) depth to be set
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_set_hostflags

B<COMPATIBILITY:> not available in Net-SSLeay-1.82 and before; requires at least OpenSSL 1.0.2-beta2 or LibreSSL 2.7.0

    Net::SSLeay::X509_VERIFY_PARAM_set_hostflags($param, $flags);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $flags - (unsigned int) flags to be set (bitmask)
    #
    # returns: no return value

See also OpenSSL docs,  L</X509_VERIFY_PARAM_add1_host> and L</X509_VERIFY_PARAM_set1_host> for more information.
The flags for controlling wildcard checks and other features are defined in OpenSSL docs.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_set_purpose

Sets the verification purpose in $param to $purpose. This determines the acceptable purpose
of the certificate chain, for example SSL client or SSL server.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_set_purpose($param, $purpose);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $purpose - (integer) purpose identifier
    #
    # returns: 1 on success, 0 on failure

For more details about $purpose identifier check L</CTX_set_purpose>.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_set_time

Sets the verification time in $param to $t. Normally the current time is used.

    Net::SSLeay::X509_VERIFY_PARAM_set_time($param, $t);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $t - (time_t) time in seconds since 1.1.1970
    #
    # returns: no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_set_trust

Sets the trust setting in $param to $trust.

    my $rv = Net::SSLeay::X509_VERIFY_PARAM_set_trust($param, $trust);
    # $param - value corresponding to openssl's X509_VERIFY_PARAM structure
    # $trust - (integer) trust identifier
    #
    # returns: 1 on success, 0 on failure

For more details about $trust identifier check L</CTX_set_trust>.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/X509_VERIFY_PARAM_set_flags.html>

=item * X509_VERIFY_PARAM_table_cleanup

??? (more info needed)

    Net::SSLeay::X509_VERIFY_PARAM_table_cleanup();
    #
    # returns: no return value

=back

=head3 Low level API: Cipher (EVP_CIPHER_*) related functions

=over

=item * EVP_get_cipherbyname

B<COMPATIBILITY:> not available in Net-SSLeay-1.45 and before

Returns an EVP_CIPHER structure when passed a cipher name.

    my $rv = Net::SSLeay::EVP_get_cipherbyname($name);
    # $name - (string) cipher name e.g. 'aes-128-cbc', 'camellia-256-ecb', 'des-ede', ...
    #
    # returns: value corresponding to openssl's EVP_CIPHER structure

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/EVP_EncryptInit.html>

=back

=head3 Low level API: Digest (EVP_MD_*) related functions

=over

=item * OpenSSL_add_all_digests

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

    Net::SSLeay::OpenSSL_add_all_digests();
    # no args, no return value

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/OpenSSL_add_all_algorithms.html>

=item * P_EVP_MD_list_all

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least OpenSSL 1.0.0

B<NOTE:> Does not exactly correspond to any low level API function

    my $rv = Net::SSLeay::P_EVP_MD_list_all();
    #
    # returns: arrayref - list of available digest names

The returned digest names correspond to values expected by L</EVP_get_digestbyname>.

Note that some of the digests are available by default and some only after calling L</OpenSSL_add_all_digests>.

=item * EVP_get_digestbyname

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

    my $rv = Net::SSLeay::EVP_get_digestbyname($name);
    # $name - string with digest name
    #
    # returns: value corresponding to openssl's EVP_MD structure

    # The $name param can be:
    # md2
    # md4
    # md5
    # mdc2
    # ripemd160
    # sha
    # sha1
    # sha224
    # sha256
    # sha512
    # whirlpool

Or better check the supported digests by calling L</P_EVP_MD_list_all>.

=item * EVP_MD_type

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

    my $rv = Net::SSLeay::EVP_MD_type($md);
    # $md - value corresponding to openssl's EVP_MD structure
    #
    # returns: the NID (integer) of the OBJECT IDENTIFIER representing the given message digest

C<EVP_MD_type> is a non-deprecated alias macro of C<EVP_MD_get_type> since OpenSSL 3.0.0.

=item * EVP_MD_size

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

    my $rv = Net::SSLeay::EVP_MD_size($md);
    # $md - value corresponding to openssl's EVP_MD structure
    #
    # returns: the size of the message digest in bytes (e.g. 20 for SHA1)

=item * EVP_MD_get0_description

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before; requires at least OpenSSL 3.0.0-beta1, not in LibreSSL

Return description of a message digest.

    my $rv = Net::SSLeay::EVP_MD_get0_description($md);
    # $md - value corresponding to openssl's EVP_MD structure
    #
    # returns: String, a freeform and digest implementation dependent description of the digest for display and human consumption. (e.g. sha256)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/EVP_MD_get0_description.html>

=item * EVP_MD_get0_name

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before; requires at least OpenSSL 3.0.0-beta1, not in LibreSSL

Return one name of a message digest.

    my $rv = Net::SSLeay::EVP_MD_get0_description($md);
    # $md - value corresponding to openssl's EVP_MD structure
    #
    # returns: String, the name of the given message digest. For fetched message digests with multiple names, only one of them is returned; it's recommended to use EVP_MD_names_do_all() instead. (e.g. SHA2-256 or SHA256 for the same digest)

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/EVP_MD_get0_name.html>

=item * EVP_MD_get_type

B<COMPATIBILITY:> not available in Net-SSLeay-1.92 and before; requires at least OpenSSL 3.0.0-beta1, not in LibreSSL

Return NID value of a message digest.

    my $rv = Net::SSLeay::EVP_MD_get_type($md);
    # $md - value corresponding to openssl's EVP_MD structure
    #
    # returns: Integer, the NID of the OBJECT IDENTIFIER representing the given message digest when passed an EVP_MD structure.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/EVP_MD_get_type.html>

=item * EVP_MD_CTX_md

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

    Net::SSLeay::EVP_MD_CTX_md($ctx);
    # $ctx - value corresponding to openssl's EVP_MD_CTX structure
    #
    # returns: value corresponding to openssl's EVP_MD structure

=item * EVP_MD_CTX_create

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

Allocates, initializes and returns a digest context.

    my $rv = Net::SSLeay::EVP_MD_CTX_create();
    #
    # returns: value corresponding to openssl's EVP_MD_CTX structure

The complete idea behind EVP_MD_CTX looks like this example:

    Net::SSLeay::OpenSSL_add_all_digests();

    my $md = Net::SSLeay::EVP_get_digestbyname("sha1");
    my $ctx = Net::SSLeay::EVP_MD_CTX_create();
    Net::SSLeay::EVP_DigestInit($ctx, $md);

    while(my $chunk = get_piece_of_data()) {
        Net::SSLeay::EVP_DigestUpdate($ctx,$chunk);
    }

    my $result = Net::SSLeay::EVP_DigestFinal($ctx);
    Net::SSLeay::EVP_MD_CTX_destroy($ctx);

    print "digest=", unpack('H*', $result), "\n"; # print hex value

=item * EVP_DigestInit_ex

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

Sets up digest context $ctx to use a digest $type from ENGINE $impl, $ctx must be
initialized before calling this function, type will typically be supplied by a function
such as L</EVP_get_digestbyname>. If $impl is 0 then the default implementation of digest $type is used.

    my $rv = Net::SSLeay::EVP_DigestInit_ex($ctx, $type, $impl);
    # $ctx  - value corresponding to openssl's EVP_MD_CTX structure
    # $type - value corresponding to openssl's EVP_MD structure
    # $impl - value corresponding to openssl's ENGINE structure
    #
    # returns: 1 for success and 0 for failure

=item * EVP_DigestInit

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

Behaves in the same way as L</EVP_DigestInit_ex> except the passed context $ctx does not have
to be initialized, and it always uses the default digest implementation.

    my $rv = Net::SSLeay::EVP_DigestInit($ctx, $type);
    # $ctx - value corresponding to openssl's EVP_MD_CTX structure
    # $type - value corresponding to openssl's EVP_MD structure
    #
    # returns: 1 for success and 0 for failure

=item * EVP_MD_CTX_destroy

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

Cleans up digest context $ctx and frees up the space allocated to it, it should be
called only on a context created using L</EVP_MD_CTX_create>.

    Net::SSLeay::EVP_MD_CTX_destroy($ctx);
    # $ctx - value corresponding to openssl's EVP_MD_CTX structure
    #
    # returns: no return value

=item * EVP_DigestUpdate

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

    my $rv = Net::SSLeay::EVP_DigestUpdate($ctx, $data);
    # $ctx  - value corresponding to openssl's EVP_MD_CTX structure
    # $data - data to be hashed
    #
    # returns: 1 for success and 0 for failure

=item * EVP_DigestFinal_ex

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

Retrieves the digest value from $ctx. After calling L</EVP_DigestFinal_ex> no
additional calls to L</EVP_DigestUpdate> can be made, but
L</EVP_DigestInit_ex> can be called to initialize a new digest operation.

    my $digest_value = Net::SSLeay::EVP_DigestFinal_ex($ctx);
    # $ctx - value corresponding to openssl's EVP_MD_CTX structure
    #
    # returns: hash value (binary)

    # to get printable (hex) value of digest use:
    print unpack('H*', $digest_value);

=item * EVP_DigestFinal

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

Similar to L</EVP_DigestFinal_ex> except the digest context ctx is automatically cleaned up.

    my $rv = Net::SSLeay::EVP_DigestFinal($ctx);
    # $ctx - value corresponding to openssl's EVP_MD_CTX structure
    #
    # returns: hash value (binary)

    # to get printable (hex) value of digest use:
    print unpack('H*', $digest_value);

=item * MD2

B<COMPATIBILITY:> not supported by default in OpenSSL 1.0.0

Computes MD2 from given $data (all data needs to be loaded into memory)

    my $digest = Net::SSLeay::MD2($data);
    print "digest(hexadecimal)=", unpack('H*', $digest);

=item * MD4

Computes MD4 from given $data (all data needs to be loaded into memory)

    my $digest = Net::SSLeay::MD4($data);
    print "digest(hexadecimal)=", unpack('H*', $digest);

=item * MD5

Computes MD5 from given $data (all data needs to be loaded into memory)

    my $digest = Net::SSLeay::MD5($data);
    print "digest(hexadecimal)=", unpack('H*', $digest);

=item * RIPEMD160

Computes RIPEMD160 from given $data (all data needs to be loaded into memory)

    my $digest = Net::SSLeay::RIPEMD160($data);
    print "digest(hexadecimal)=", unpack('H*', $digest);

=item * SHA1

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

Computes SHA1 from given $data (all data needs to be loaded into memory)

    my $digest = Net::SSLeay::SHA1($data);
    print "digest(hexadecimal)=", unpack('H*', $digest);

=item * SHA256

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least OpenSSL 0.9.8

Computes SHA256 from given $data (all data needs to be loaded into memory)

    my $digest = Net::SSLeay::SHA256($data);
    print "digest(hexadecimal)=", unpack('H*', $digest);

=item * SHA512

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least OpenSSL 0.9.8

Computes SHA512 from given $data (all data needs to be loaded into memory)

    my $digest = Net::SSLeay::SHA512($data);
    print "digest(hexadecimal)=", unpack('H*', $digest);

=item * EVP_Digest

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

Computes "any" digest from given $data (all data needs to be loaded into memory)

    my $md = Net::SSLeay::EVP_get_digestbyname("sha1"); # or any other algorithm
    my $digest = Net::SSLeay::EVP_Digest($data, $md);
    print "digest(hexadecimal)=", unpack('H*', $digest);

=item * EVP_sha1

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

    my $md = Net::SSLeay::EVP_sha1();
    #
    # returns: value corresponding to openssl's EVP_MD structure

=item * EVP_sha256

B<COMPATIBILITY:> requires at least OpenSSL 0.9.8

    my $md = Net::SSLeay::EVP_sha256();
    #
    # returns: value corresponding to openssl's EVP_MD structure

=item * EVP_sha512

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before; requires at least OpenSSL 0.9.8

    my $md = Net::SSLeay::EVP_sha512();
    #
    # returns: value corresponding to openssl's EVP_MD structure

=item * EVP_add_digest

    my $rv = Net::SSLeay::EVP_add_digest($digest);
    # $digest - value corresponding to openssl's EVP_MD structure
    #
    # returns: 1 on success, 0 otherwise

=back

=head3 Low level API: CIPHER_* related functions

=over

=item * CIPHER_get_name

B<COMPATIBILITY:> not available in Net-SSLeay-1.42 and before

Returns name of the cipher used.

    my $rv = Net::SSLeay::CIPHER_get_name($cipher);
    # $cipher - value corresponding to openssl's SSL_CIPHER structure
    #
    # returns: (string) cipher name e.g. 'DHE-RSA-AES256-SHA', '(NONE)' if $cipher is undefined.

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CIPHER_get_name.html>

Example:

    my $ssl_cipher = Net::SSLeay::get_current_cipher($ssl);
    my $cipher_name = Net::SSLeay::CIPHER_get_name($ssl_cipher);

=item * CIPHER_description

B<COMPATIBILITY:> doesn't work correctly in Net-SSLeay-1.88 and before

Returns a textual description of the cipher used.

    my $rv = Net::SSLeay::CIPHER_description($cipher);
    # $cipher - value corresponding to openssl's SSL_CIPHER structure
    #
    # returns: (string) cipher description e.g. 'DHE-RSA-AES256-SHA SSLv3 Kx=DH Au=RSA Enc=AES(256) Mac=SHA1'

Check openssl doc L<https://www.openssl.org/docs/manmaster/man3/SSL_CIPHER_description.html>

=item * CIPHER_get_bits

B<COMPATIBILITY:> $alg_bits doesn't work correctly in Net-SSLeay-1.88 and before

Returns the number of secret bits used for cipher.

    my $rv = Net::SSLeay::CIPHER_get_bits($cipher, $alg_bits);
