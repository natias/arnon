        if lastmechanism == b'signal':
            rpt = signal.setitimer(signal.ITIMER_PROF, 0.0, 0.0)
            signal.signal(signal.SIGPROF, signal.SIG_IGN)
            state.remaining_prof_time = rpt[0]
        elif lastmechanism == b'thread':
            stopthread.set()
            state.thread.join()

        state.accumulate_time(clock())
        state.last_start_time = None
        statprofpath = encoding.environ.get(b'STATPROF_DEST')
        if statprofpath:
            save_data(statprofpath)

    return state


def save_data(path):
    with open(path, b'w+') as file:
        file.write(b"%f %f\n" % state.accumulated_time)
        for sample in state.samples:
            time = sample.time
            stack = sample.stack
            sites = [
                b'\1'.join([s.path, b'%d' % s.lineno, s.function])
                for s in stack
            ]
            file.write(b"%d\0%s\n" % (time, b'\0'.join(sites)))


def load_data(path):
    lines = open(path, b'rb').read().splitlines()

    state.accumulated_time = [float(value) for value in lines[0].split()]
    state.samples = []
    for line in lines[1:]:
        parts = line.split(b'\0')
        time = float(parts[0])
        rawsites = parts[1:]
        sites = []
        for rawsite in rawsites:
            siteparts = rawsite.split(b'\1')
            sites.append(
                CodeSite.get(siteparts[0], int(siteparts[1]), siteparts[2])
            )

        state.samples.append(Sample(sites, time))


def reset(frequency=None):
    """Clear out the state of the profiler.  Do not call while the
    profiler is running.

    The optional frequency argument specifies the number of samples to
    collect per second."""
    assert state.profile_level == 0, b"Can't reset() while statprof is running"
    CodeSite.cache.clear()
    state.reset(frequency)


@contextmanager
def profile():
    start()
    try:
        yield
    finally:
        stop()
        display()


###########################################################################
## Reporting API


class SiteStats:
    def __init__(self, site):
        self.site = site
        self.selfcount = 0
        self.totalcount = 0

    def addself(self):
        self.selfcount += 1

    def addtotal(self):
        self.totalcount += 1

    def selfpercent(self):
        return self.selfcount / len(state.samples) * 100

    def totalpercent(self):
        return self.totalcount / len(state.samples) * 100

    def selfseconds(self):
        return self.selfcount * state.seconds_per_sample()

    def totalseconds(self):
        return self.totalcount * state.seconds_per_sample()

    @classmethod
    def buildstats(cls, samples):
        stats = {}

        for sample in samples:
            for i, site in enumerate(sample.stack):
                sitestat = stats.get(site)
                if not sitestat:
                    sitestat = SiteStats(site)
                    stats[site] = sitestat

                sitestat.addtotal()

                if i == 0:
                    sitestat.addself()

        return [s for s in stats.values()]


class DisplayFormats:
    ByLine = 0
    ByMethod = 1
    AboutMethod = 2
    Hotpath = 3
    FlameGraph = 4
    Json = 5
    Chrome = 6


def display(fp=None, format=3, data=None, **kwargs):
    '''Print statistics, either to stdout or the given file object.'''
    if data is None:
        data = state

    if fp is None:
        from .utils import procutil

        fp = procutil.stdout
    if len(data.samples) == 0:
        fp.write(b'No samples recorded.\n')
        return

    if format == DisplayFormats.ByLine:
        display_by_line(data, fp)
    elif format == DisplayFormats.ByMethod:
        display_by_method(data, fp)
    elif format == DisplayFormats.AboutMethod:
        display_about_method(data, fp, **kwargs)
    elif format == DisplayFormats.Hotpath:
        display_hotpath(data, fp, **kwargs)
    elif format == DisplayFormats.FlameGraph:
        write_to_flame(data, fp, **kwargs)
    elif format == DisplayFormats.Json:
        write_to_json(data, fp)
    elif format == DisplayFormats.Chrome:
        write_to_chrome(data, fp, **kwargs)
    else:
        raise Exception("Invalid display format")

    if format not in (DisplayFormats.Json, DisplayFormats.Chrome):
        fp.write(b'---\n')
        fp.write(b'Sample count: %d\n' % len(data.samples))
        fp.write(b'Total time: %f seconds (%f wall)\n' % data.accumulated_time)


def display_by_line(data, fp):
    """Print the profiler data with each sample line represented
    as one row in a table.  Sorted by self-time per line."""
    stats = SiteStats.buildstats(data.samples)
    stats.sort(reverse=True, key=lambda x: x.selfseconds())

    fp.write(
        b'%5.5s %10.10s   %7.7s  %-8.8s\n'
        % (b'%  ', b'cumulative', b'self', b'')
    )
    fp.write(
        b'%5.5s  %9.9s  %8.8s  %-8.8s\n'
        % (b"time", b"seconds", b"seconds", b"name")
    )

    for stat in stats:
        site = stat.site
        sitelabel = b'%s:%d:%s' % (site.filename(), site.lineno, site.function)
        fp.write(
            b'%6.2f %9.2f %9.2f  %s\n'
            % (
                stat.selfpercent(),
                stat.totalseconds(),
                stat.selfseconds(),
                sitelabel,
            )
        )


def display_by_method(data, fp):
    """Print the profiler data with each sample function represented
    as one row in a table.  Important lines within that function are
    output as nested rows.  Sorted by self-time per line."""
    fp.write(
        b'%5.5s %10.10s   %7.7s  %-8.8s\n'
        % (b'%  ', b'cumulative', b'self', b'')
    )
    fp.write(
        b'%5.5s  %9.9s  %8.8s  %-8.8s\n'
        % (b"time", b"seconds", b"seconds", b"name")
    )

    stats = SiteStats.buildstats(data.samples)

    grouped = defaultdict(list)
    for stat in stats:
        grouped[stat.site.filename() + b":" + stat.site.function].append(stat)

    # compute sums for each function
    functiondata = []
    for fname, sitestats in grouped.items():
        total_cum_sec = 0
        total_self_sec = 0
        total_percent = 0
        for stat in sitestats:
            total_cum_sec += stat.totalseconds()
            total_self_sec += stat.selfseconds()
            total_percent += stat.selfpercent()

        functiondata.append(
            (fname, total_cum_sec, total_self_sec, total_percent, sitestats)
        )

    # sort by total self sec
    functiondata.sort(reverse=True, key=lambda x: x[2])

    for function in functiondata:
        if function[3] < 0.05:
            continue
        fp.write(
            b'%6.2f %9.2f %9.2f  %s\n'
            % (
                function[3],  # total percent
                function[1],  # total cum sec
                function[2],  # total self sec
                function[0],
            )
        )  # file:function

        function[4].sort(reverse=True, key=lambda i: i.selfseconds())
        for stat in function[4]:
            # only show line numbers for significant locations (>1% time spent)
            if stat.selfpercent() > 1:
                source = stat.site.getsource(25)
                if not isinstance(source, bytes):
                    source = pycompat.bytestr(source)

                stattuple = (
                    stat.selfpercent(),
                    stat.selfseconds(),
                    stat.site.lineno,
                    source,
                )

                fp.write(b'%33.0f%% %6.2f   line %d: %s\n' % stattuple)


def display_about_method(data, fp, function=None, **kwargs):
    if function is None:
        raise Exception("Invalid function")

    filename = None
    if b':' in function:
        filename, function = function.split(b':')

    relevant_samples = 0
    parents = {}
    children = {}

    for sample in data.samples:
        for i, site in enumerate(sample.stack):
            if site.function == function and (
                not filename or site.filename() == filename
            ):
                relevant_samples += 1
                if i != len(sample.stack) - 1:
                    parent = sample.stack[i + 1]
                    if parent in parents:
                        parents[parent] = parents[parent] + 1
                    else:
                        parents[parent] = 1

                if site in children:
                    children[site] = children[site] + 1
                else:
                    children[site] = 1

    parents = [(parent, count) for parent, count in parents.items()]
    parents.sort(reverse=True, key=lambda x: x[1])
    for parent, count in parents:
        fp.write(
            b'%6.2f%%   %s:%s   line %s: %s\n'
            % (
                count / relevant_samples * 100,
                pycompat.fsencode(parent.filename()),
                pycompat.sysbytes(parent.function),
                parent.lineno,
                pycompat.sysbytes(parent.getsource(50)),
            )
        )

    stats = SiteStats.buildstats(data.samples)
    stats = [
        s
        for s in stats
        if s.site.function == function
        and (not filename or s.site.filename() == filename)
    ]

    total_cum_sec = 0
    total_self_sec = 0
    total_self_percent = 0
    total_cum_percent = 0
    for stat in stats:
        total_cum_sec += stat.totalseconds()
        total_self_sec += stat.selfseconds()
        total_self_percent += stat.selfpercent()
        total_cum_percent += stat.totalpercent()

    fp.write(
        b'\n    %s:%s    Total: %0.2fs (%0.2f%%)    Self: %0.2fs (%0.2f%%)\n\n'
        % (
            pycompat.sysbytes(filename or b'___'),
            pycompat.sysbytes(function),
            total_cum_sec,
            total_cum_percent,
            total_self_sec,
            total_self_percent,
        )
    )

    children = [(child, count) for child, count in children.items()]
    children.sort(reverse=True, key=lambda x: x[1])
    for child, count in children:
        fp.write(
            b'        %6.2f%%   line %s: %s\n'
            % (
                count / relevant_samples * 100,
                child.lineno,
                pycompat.sysbytes(child.getsource(50)),
            )
        )


def display_hotpath(data, fp, limit=0.05, **kwargs):
    class HotNode:
        def __init__(self, site):
            self.site = site
            self.count = 0
            self.children = {}

        def add(self, stack, time):
            self.count += time
            site = stack[0]
            child = self.children.get(site)
            if not child:
                child = HotNode(site)
                self.children[site] = child

            if len(stack) > 1:
                i = 1
                # Skip boiler plate parts of the stack
                while i < len(stack) and stack[i].skipname() in skips:
                    i += 1
                if i < len(stack):
                    child.add(stack[i:], time)
            else:
                # Normally this is done by the .add() calls
                child.count += time

    root = HotNode(None)
    lasttime = data.samples[0].time
    for sample in data.samples:
        root.add(sample.stack[::-1], sample.time - lasttime)
        lasttime = sample.time
    showtime = kwargs.get('showtime', True)

    def _write(node, depth, multiple_siblings):
        site = node.site
        visiblechildren = [
            c for c in node.children.values() if c.count >= (limit * root.count)
        ]
        if site:
            indent = depth * 2 - 1
            filename = (site.filename() + b':').ljust(15)
            function = site.function

            # lots of string formatting
            listpattern = (
                b''.ljust(indent)
                + (b'\\' if multiple_siblings else b'|')
                + b' %4.1f%%'
                + (b' %5.2fs' % node.count if showtime else b'')
                + b'  %s %s'
            )
            liststring = listpattern % (
                node.count / root.count * 100,
                filename,
                function,
            )
            # 4 to account for the word 'line'
            spacing_len = max(4, 55 - len(liststring))
            prefix = b''
            if spacing_len == 4:
                prefix = b', '

            codepattern = b'%s%s %d: %s%s'
            codestring = codepattern % (
                prefix,
                b'line'.rjust(spacing_len),
                site.lineno if site.lineno is not None else -1,
                b''.ljust(max(0, 4 - len(str(site.lineno)))),
                site.getsource(30),
            )

            finalstring = liststring + codestring
            childrensamples = sum([c.count for c in node.children.values()])
            # Make frames that performed more than 10% of the operation red
            if node.count - childrensamples > (0.1 * root.count):
                finalstring = b'\033[91m' + finalstring + b'\033[0m'
            # Make frames that didn't actually perform work dark grey
            elif node.count - childrensamples == 0:
                finalstring = b'\033[90m' + finalstring + b'\033[0m'
            fp.write(finalstring + b'\n')

        newdepth = depth
        if len(visiblechildren) > 1 or multiple_siblings:
            newdepth += 1

        visiblechildren.sort(reverse=True, key=lambda x: x.count)
        for child in visiblechildren:
            _write(child, newdepth, len(visiblechildren) > 1)

    if root.count > 0:
        _write(root, 0, False)


def write_to_flame(data, fp, scriptpath=None, outputfile=None, **kwargs):
    if scriptpath is None:
        scriptpath = encoding.environ[b'HOME'] + b'/flamegraph.pl'
    if not os.path.exists(scriptpath):
        fp.write(b'error: missing %s\n' % scriptpath)
        fp.write(b'get it here: https://github.com/brendangregg/FlameGraph\n')
        return

    lines = {}
    for sample in data.samples:
        sites = [s.function for s in sample.stack]
        sites.reverse()
        line = b';'.join(sites)
        if line in lines:
            lines[line] = lines[line] + 1
        else:
            lines[line] = 1

    fd, path = pycompat.mkstemp()

    with open(path, b"w+") as file:
        for line, count in lines.items():
            file.write(b"%s %d\n" % (line, count))

    if outputfile is None:
        outputfile = b'~/flamegraph.svg'

    os.system(b"perl ~/flamegraph.pl %s > %s" % (path, outputfile))
    fp.write(b'Written to %s\n' % outputfile)


_pathcache = {}


def simplifypath(path):
    """Attempt to make the path to a Python module easier to read by
    removing whatever part of the Python search path it was found
    on."""

    if path in _pathcache:
        return _pathcache[path]
    hgpath = encoding.__file__.rsplit(os.sep, 2)[0]
    for p in [hgpath] + sys.path:
        prefix = p + os.sep
        if path.startswith(prefix):
            path = path[len(prefix) :]
            break
    _pathcache[path] = path
    return path


def write_to_json(data, fp):
    samples = []

    for sample in data.samples:
        stack = []

        for frame in sample.stack:
            stack.append(
                (
                    pycompat.sysstr(frame.path),
                    frame.lineno,
                    pycompat.sysstr(frame.function),
                )
            )

        samples.append((sample.time, stack))

    data = json.dumps(samples)
    if not isinstance(data, bytes):
        data = data.encode('utf-8')

    fp.write(data)


def write_to_chrome(data, fp, minthreshold=0.005, maxthreshold=0.999):
    samples = []
    laststack = collections.deque()
    lastseen = collections.deque()

    # The Chrome tracing format allows us to use a compact stack
    # representation to save space. It's fiddly but worth it.
    # We maintain a bijection between stack and ID.
    stack2id = {}
    id2stack = []  # will eventually be rendered

    def stackid(stack):
        if not stack:
            return
        if stack in stack2id:
            return stack2id[stack]
        parent = stackid(stack[1:])
        myid = len(stack2id)
        stack2id[stack] = myid
        id2stack.append(dict(category=stack[0][0], name='%s %s' % stack[0]))
        if parent is not None:
            id2stack[-1].update(parent=parent)
        return myid

    # The sampling profiler can sample multiple times without
    # advancing the clock, potentially causing the Chrome trace viewer
    # to render single-pixel columns that we cannot zoom in on.  We
    # work around this by pretending that zero-duration samples are a
    # millisecond in length.

    clamp = 0.001

    # We provide knobs that by default attempt to filter out stack
    # frames that are too noisy:
    #
    # * A few take almost all execution time. These are usually boring
    #   setup functions, giving a stack that is deep but uninformative.
    #
    # * Numerous samples take almost no time, but introduce lots of
    #   noisy, oft-deep "spines" into a rendered profile.

    blacklist = set()
    totaltime = data.samples[-1].time - data.samples[0].time
    minthreshold = totaltime * minthreshold
    maxthreshold = max(totaltime * maxthreshold, clamp)

    def poplast():
        oldsid = stackid(tuple(laststack))
        oldcat, oldfunc = laststack.popleft()
        oldtime, oldidx = lastseen.popleft()
        duration = sample.time - oldtime
        if minthreshold <= duration <= maxthreshold:
            # ensure no zero-duration events
            sampletime = max(oldtime + clamp, sample.time)
            samples.append(
                dict(
                    ph='E',
                    name=oldfunc,
                    cat=oldcat,
                    sf=oldsid,
                    ts=sampletime * 1e6,
                    pid=0,
                )
            )
        else:
            blacklist.add(oldidx)

    # Much fiddling to synthesize correctly(ish) nested begin/end
    # events given only stack snapshots.

    for sample in data.samples:
        stack = tuple(
            (
                (
                    '%s:%d'
                    % (simplifypath(pycompat.sysstr(frame.path)), frame.lineno),
                    pycompat.sysstr(frame.function),
                )
                for frame in sample.stack
            )
        )
        qstack = collections.deque(stack)
        if laststack == qstack:
            continue
        while laststack and qstack and laststack[-1] == qstack[-1]:
            laststack.pop()
            qstack.pop()
        while laststack:
            poplast()
        for f in reversed(qstack):
            lastseen.appendleft((sample.time, len(samples)))
            laststack.appendleft(f)
            path, name = f
            sid = stackid(tuple(laststack))
            samples.append(
                dict(
                    ph='B',
                    name=name,
                    cat=path,
                    ts=sample.time * 1e6,
                    sf=sid,
                    pid=0,
                )
            )
        laststack = collections.deque(stack)
    while laststack:
        poplast()
    events = [
        sample for idx, sample in enumerate(samples) if idx not in blacklist
    ]
    frames = collections.OrderedDict(
        (str(k), v) for (k, v) in enumerate(id2stack)
    )
    data = json.dumps(dict(traceEvents=events, stackFrames=frames), indent=1)
    if not isinstance(data, bytes):
        data = data.encode('utf-8')
    fp.write(data)
    fp.write(b'\n')


def printusage():
    print(
        r"""
The statprof command line allows you to inspect the last profile's results in
the following forms:

usage:
    hotpath [-l --limit percent]
        Shows a graph of calls with the percent of time each takes.
        Red calls take over 10%% of the total time themselves.
    lines
        Shows the actual sampled lines.
    functions
        Shows the samples grouped by function.
    function [filename:]functionname
        Shows the callers and callees of a particular function.
    flame [-s --script-path] [-o --output-file path]
        Writes out a flamegraph to output-file (defaults to ~/flamegraph.svg)
        Requires that ~/flamegraph.pl exist.
        (Specify alternate script path with --script-path.)"""
    )


def main(argv=None):
    if argv is None:
        argv = sys.argv

    if len(argv) == 1:
        printusage()
        return 0

    displayargs = {}

    optstart = 2
    displayargs[b'function'] = None
    if argv[1] == 'hotpath':
        displayargs[b'format'] = DisplayFormats.Hotpath
    elif argv[1] == 'lines':
        displayargs[b'format'] = DisplayFormats.ByLine
    elif argv[1] == 'functions':
        displayargs[b'format'] = DisplayFormats.ByMethod
    elif argv[1] == 'function':
        displayargs[b'format'] = DisplayFormats.AboutMethod
        displayargs[b'function'] = argv[2]
        optstart = 3
    elif argv[1] == 'flame':
        displayargs[b'format'] = DisplayFormats.FlameGraph
    else:
        printusage()
        return 0

    # process options
    try:
        opts, args = pycompat.getoptb(
            sys.argv[optstart:],
            b"hl:f:o:p:",
            [b"help", b"limit=", b"file=", b"output-file=", b"script-path="],
        )
    except getopt.error as msg:
        print(msg)
        printusage()
        return 2

    displayargs[b'limit'] = 0.05
    path = None
    for o, value in opts:
        if o in ("-l", "--limit"):
            displayargs[b'limit'] = float(value)
        elif o in ("-f", "--file"):
            path = value
        elif o in ("-o", "--output-file"):
            displayargs[b'outputfile'] = value
        elif o in ("-p", "--script-path"):
            displayargs[b'scriptpath'] = value
        elif o in ("-h", "help"):
            printusage()
            return 0
        else:
            assert False, "unhandled option %s" % o

    if not path:
        print('must specify --file to load')
        return 1

    load_data(path=path)

    display(**pycompat.strkwargs(displayargs))

    return 0


if __name__ == "__main__":
    sys.exit(main())
                                                                                           usr/lib/python3/dist-packages/mercurial/store.py                                                    0000644 0000000 0000000 00000061762 14355257011 020456  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # store.py - repository store handling for Mercurial
#
# Copyright 2008 Olivia Mackall <olivia@selenic.com>
#
# This software may be used and distributed according to the terms of the
# GNU General Public License version 2 or any later version.


import functools
import os
import re
import stat

from .i18n import _
from .pycompat import getattr
from .node import hex
from . import (
    changelog,
    error,
    manifest,
    policy,
    pycompat,
    util,
    vfs as vfsmod,
)
from .utils import hashutil

parsers = policy.importmod('parsers')
# how much bytes should be read from fncache in one read
# It is done to prevent loading large fncache files into memory
fncache_chunksize = 10 ** 6


def _matchtrackedpath(path, matcher):
    """parses a fncache entry and returns whether the entry is tracking a path
    matched by matcher or not.

    If matcher is None, returns True"""

    if matcher is None:
        return True
    path = decodedir(path)
    if path.startswith(b'data/'):
        return matcher(path[len(b'data/') : -len(b'.i')])
    elif path.startswith(b'meta/'):
        return matcher.visitdir(path[len(b'meta/') : -len(b'/00manifest.i')])

    raise error.ProgrammingError(b"cannot decode path %s" % path)


# This avoids a collision between a file named foo and a dir named
# foo.i or foo.d
def _encodedir(path):
    """
    >>> _encodedir(b'data/foo.i')
    'data/foo.i'
    >>> _encodedir(b'data/foo.i/bla.i')
    'data/foo.i.hg/bla.i'
    >>> _encodedir(b'data/foo.i.hg/bla.i')
    'data/foo.i.hg.hg/bla.i'
    >>> _encodedir(b'data/foo.i\\ndata/foo.i/bla.i\\ndata/foo.i.hg/bla.i\\n')
    'data/foo.i\\ndata/foo.i.hg/bla.i\\ndata/foo.i.hg.hg/bla.i\\n'
    """
    return (
        path.replace(b".hg/", b".hg.hg/")
        .replace(b".i/", b".i.hg/")
        .replace(b".d/", b".d.hg/")
    )


encodedir = getattr(parsers, 'encodedir', _encodedir)


def decodedir(path):
    """
    >>> decodedir(b'data/foo.i')
    'data/foo.i'
    >>> decodedir(b'data/foo.i.hg/bla.i')
    'data/foo.i/bla.i'
    >>> decodedir(b'data/foo.i.hg.hg/bla.i')
    'data/foo.i.hg/bla.i'
    """
    if b".hg/" not in path:
        return path
    return (
        path.replace(b".d.hg/", b".d/")
        .replace(b".i.hg/", b".i/")
        .replace(b".hg.hg/", b".hg/")
    )


def _reserved():
    """characters that are problematic for filesystems

    * ascii escapes (0..31)
    * ascii hi (126..255)
    * windows specials

    these characters will be escaped by encodefunctions
    """
    winreserved = [ord(x) for x in u'\\:*?"<>|']
    for x in range(32):
        yield x
    for x in range(126, 256):
        yield x
    for x in winreserved:
        yield x


def _buildencodefun():
    """
    >>> enc, dec = _buildencodefun()

    >>> enc(b'nothing/special.txt')
    'nothing/special.txt'
    >>> dec(b'nothing/special.txt')
    'nothing/special.txt'

    >>> enc(b'HELLO')
    '_h_e_l_l_o'
    >>> dec(b'_h_e_l_l_o')
    'HELLO'

    >>> enc(b'hello:world?')
    'hello~3aworld~3f'
    >>> dec(b'hello~3aworld~3f')
    'hello:world?'

    >>> enc(b'the\\x07quick\\xADshot')
    'the~07quick~adshot'
    >>> dec(b'the~07quick~adshot')
    'the\\x07quick\\xadshot'
    """
    e = b'_'
    xchr = pycompat.bytechr
    asciistr = list(map(xchr, range(127)))
    capitals = list(range(ord(b"A"), ord(b"Z") + 1))

    cmap = {x: x for x in asciistr}
    for x in _reserved():
        cmap[xchr(x)] = b"~%02x" % x
    for x in capitals + [ord(e)]:
        cmap[xchr(x)] = e + xchr(x).lower()

    dmap = {}
    for k, v in cmap.items():
        dmap[v] = k

    def decode(s):
        i = 0
        while i < len(s):
            for l in range(1, 4):
                try:
                    yield dmap[s[i : i + l]]
                    i += l
                    break
                except KeyError:
                    pass
            else:
                raise KeyError

    return (
        lambda s: b''.join([cmap[s[c : c + 1]] for c in range(len(s))]),
        lambda s: b''.join(list(decode(s))),
    )


_encodefname, _decodefname = _buildencodefun()


def encodefilename(s):
    """
    >>> encodefilename(b'foo.i/bar.d/bla.hg/hi:world?/HELLO')
    'foo.i.hg/bar.d.hg/bla.hg.hg/hi~3aworld~3f/_h_e_l_l_o'
    """
    return _encodefname(encodedir(s))


def decodefilename(s):
    """
    >>> decodefilename(b'foo.i.hg/bar.d.hg/bla.hg.hg/hi~3aworld~3f/_h_e_l_l_o')
    'foo.i/bar.d/bla.hg/hi:world?/HELLO'
    """
    return decodedir(_decodefname(s))


def _buildlowerencodefun():
    """
    >>> f = _buildlowerencodefun()
    >>> f(b'nothing/special.txt')
    'nothing/special.txt'
    >>> f(b'HELLO')
    'hello'
    >>> f(b'hello:world?')
    'hello~3aworld~3f'
    >>> f(b'the\\x07quick\\xADshot')
    'the~07quick~adshot'
    """
    xchr = pycompat.bytechr
    cmap = {xchr(x): xchr(x) for x in range(127)}
    for x in _reserved():
        cmap[xchr(x)] = b"~%02x" % x
    for x in range(ord(b"A"), ord(b"Z") + 1):
        cmap[xchr(x)] = xchr(x).lower()

    def lowerencode(s):
        return b"".join([cmap[c] for c in pycompat.iterbytestr(s)])

    return lowerencode


lowerencode = getattr(parsers, 'lowerencode', None) or _buildlowerencodefun()

# Windows reserved names: con, prn, aux, nul, com1..com9, lpt1..lpt9
_winres3 = (b'aux', b'con', b'prn', b'nul')  # length 3
_winres4 = (b'com', b'lpt')  # length 4 (with trailing 1..9)


def _auxencode(path, dotencode):
    """
    Encodes filenames containing names reserved by Windows or which end in
    period or space. Does not touch other single reserved characters c.
    Specifically, c in '\\:*?"<>|' or ord(c) <= 31 are *not* encoded here.
    Additionally encodes space or period at the beginning, if dotencode is
    True. Parameter path is assumed to be all lowercase.
    A segment only needs encoding if a reserved name appears as a
    basename (e.g. "aux", "aux.foo"). A directory or file named "foo.aux"
    doesn't need encoding.

    >>> s = b'.foo/aux.txt/txt.aux/con/prn/nul/foo.'
    >>> _auxencode(s.split(b'/'), True)
    ['~2efoo', 'au~78.txt', 'txt.aux', 'co~6e', 'pr~6e', 'nu~6c', 'foo~2e']
    >>> s = b'.com1com2/lpt9.lpt4.lpt1/conprn/com0/lpt0/foo.'
    >>> _auxencode(s.split(b'/'), False)
    ['.com1com2', 'lp~749.lpt4.lpt1', 'conprn', 'com0', 'lpt0', 'foo~2e']
    >>> _auxencode([b'foo. '], True)
    ['foo.~20']
    >>> _auxencode([b' .foo'], True)
    ['~20.foo']
    """
    for i, n in enumerate(path):
        if not n:
            continue
        if dotencode and n[0] in b'. ':
            n = b"~%02x" % ord(n[0:1]) + n[1:]
            path[i] = n
        else:
            l = n.find(b'.')
            if l == -1:
                l = len(n)
            if (l == 3 and n[:3] in _winres3) or (
                l == 4
                and n[3:4] <= b'9'
                and n[3:4] >= b'1'
                and n[:3] in _winres4
            ):
                # encode third letter ('aux' -> 'au~78')
                ec = b"~%02x" % ord(n[2:3])
                n = n[0:2] + ec + n[3:]
                path[i] = n
        if n[-1] in b'. ':
            # encode last period or space ('foo...' -> 'foo..~2e')
            path[i] = n[:-1] + b"~%02x" % ord(n[-1:])
    return path


_maxstorepathlen = 120
_dirprefixlen = 8
_maxshortdirslen = 8 * (_dirprefixlen + 1) - 4


def _hashencode(path, dotencode):
