
Not implemented.  C<offsetof()> is C-specific, you probably want to see L<perlfunc/pack> instead.

=item C<open>

Open a file for reading for writing.  This returns file descriptors, not
Perl filehandles.  Use C<POSIX::close> to close the file.

Open a file read-only with mode 0666.

	$fd = POSIX::open( "foo" );

Open a file for read and write.

	$fd = POSIX::open( "foo", &POSIX::O_RDWR );

Open a file for write, with truncation.

	$fd = POSIX::open(
		"foo", &POSIX::O_WRONLY | &POSIX::O_TRUNC
	);

Create a new file with mode 0640.  Set up the file for writing.

	$fd = POSIX::open(
		"foo", &POSIX::O_CREAT | &POSIX::O_WRONLY, 0640
	);

Returns C<undef> on failure.

See also L<perlfunc/sysopen>.

=item C<opendir>

Open a directory for reading.

	$dir = POSIX::opendir( "/var" );
	@files = POSIX::readdir( $dir );
	POSIX::closedir( $dir );

Returns C<undef> on failure.

=item C<pathconf>

Retrieves the value of a configurable limit on a file or directory.

The following will determine the maximum length of the longest allowable
pathname on the filesystem which holds C</var>.

	$path_max = POSIX::pathconf( "/var",
				      &POSIX::_PC_PATH_MAX );

Returns C<undef> on failure.

=item C<pause>

This is similar to the C function C<pause()>, which suspends
the execution of the current process until a signal is received.

Returns C<undef> on failure.

=item C<perror>

This is identical to the C function C<perror()>, which outputs to the
standard error stream the specified message followed by C<": "> and the
current error string.  Use the C<warn()> function and the C<$!>
variable instead, see L<perlfunc/warn> and L<perlvar/$ERRNO>.

=item C<pipe>

Create an interprocess channel.  This returns file descriptors like those
returned by C<POSIX::open>.

	my ($read, $write) = POSIX::pipe();
	POSIX::write( $write, "hello", 5 );
	POSIX::read( $read, $buf, 5 );

See also L<perlfunc/pipe>.

=item C<pow>

Computes C<$x> raised to the power C<$exponent>.

	$ret = POSIX::pow( $x, $exponent );

You can also use the C<**> operator, see L<perlop>.

=item C<printf>

Formats and prints the specified arguments to C<STDOUT>.
See also L<perlfunc/printf>.

=item C<putc>

Not implemented.  C<putc()> is C-specific, see L<perlfunc/print> instead.

=item C<putchar>

Not implemented.  C<putchar()> is C-specific, see L<perlfunc/print> instead.

=item C<puts>

Not implemented.  C<puts()> is C-specific, see L<perlfunc/print> instead.

=item C<qsort>

Not implemented.  C<qsort()> is C-specific, see L<perlfunc/sort> instead.

=item C<raise>

Sends the specified signal to the current process.
See also L<perlfunc/kill> and the C<$$> in L<perlvar/$PID>.

=item C<rand>

Not implemented.  C<rand()> is non-portable, see L<perlfunc/rand> instead.

=item C<read>

Read from a file.  This uses file descriptors such as those obtained by
calling C<POSIX::open>.  If the buffer C<$buf> is not large enough for the
read then Perl will extend it to make room for the request.

	$fd = POSIX::open( "foo", &POSIX::O_RDONLY );
	$bytes = POSIX::read( $fd, $buf, 3 );

Returns C<undef> on failure.

See also L<perlfunc/sysread>.

=item C<readdir>

This is identical to Perl's builtin C<readdir()> function
for reading directory entries, see L<perlfunc/readdir>.

=item C<realloc>

Not implemented.  C<realloc()> is C-specific.  Perl does memory management transparently.

=item C<remainder>

Given C<x> and C<y>, returns the value S<C<x - n*y>>, where C<n> is the integer
closest to C<x>/C<y> [C99].  Added in Perl v5.22.

 my $remainder = POSIX::remainder($x, $y)

See also L</remquo>.

=item C<remove>

Deletes a name from the filesystem.  Calls L<perlfunc/unlink> for
files and L<perlfunc/rmdir> for directories.

=item C<remquo>

Like L</remainder> but also returns the low-order bits of the quotient (n)
[C99].  Added in Perl v5.22.

(This is quite esoteric interface, mainly used to implement numerical
algorithms.)

=item C<rename>

This is identical to Perl's builtin C<rename()> function
for renaming files, see L<perlfunc/rename>.

=item C<rewind>

Seeks to the beginning of the file.

=item C<rewinddir>

This is identical to Perl's builtin C<rewinddir()> function for
rewinding directory entry streams, see L<perlfunc/rewinddir>.

=item C<rint>

Identical to L</lrint>.

=item C<rmdir>

This is identical to Perl's builtin C<rmdir()> function
for removing (empty) directories, see L<perlfunc/rmdir>.

=item C<round>

Returns the integer (but still as floating point) nearest to the
argument [C99].  Added in Perl v5.22.

See also L</ceil>, L</floor>, L</lround>, L</modf>, and L</trunc>.

=item C<scalbn>

Returns S<C<x * 2**y>> [C99].  Added in Perl v5.22.

See also L</frexp> and L</ldexp>.

=item C<scanf>

Not implemented.  C<scanf()> is C-specific, use E<lt>E<gt> and regular expressions instead,
see L<perlre>.

=item C<setgid>

Sets the real group identifier and the effective group identifier for
this process.  Similar to assigning a value to the Perl's builtin
C<$)> variable, see L<perlvar/$EGID>, except that the latter
will change only the real user identifier, and that the setgid()
uses only a single numeric argument, as opposed to a space-separated
list of numbers.

=item C<setjmp>

Not implemented.  C<setjmp()> is C-specific: use C<eval {}> instead,
see L<perlfunc/eval>.

=item C<setlocale>

WARNING!  Prior to Perl 5.28 or on a system that does not support
thread-safe locale operations, do NOT use this function in a
L<thread|threads>.  The locale will change in all other threads at the
same time, and should your thread get paused by the operating system,
and another started, that thread will not have the locale it is
expecting.  On some platforms, there can be a race leading to segfaults
if two threads call this function nearly simultaneously.  This warning
does not apply on unthreaded builds, or on perls where
C<${^SAFE_LOCALES}> exists and is non-zero; namely Perl 5.28 and later
compiled to be locale-thread-safe.

This function
modifies and queries the program's underlying locale.  Users of this
function should read L<perllocale>, whch provides a comprehensive
discussion of Perl locale handling, knowledge of which is necessary to
properly use this function.  It contains
L<a section devoted to this function|perllocale/The setlocale function>.
The discussion here is merely a summary reference for C<setlocale()>.
Note that Perl itself is almost entirely unaffected by the locale
except within the scope of S<C<"use locale">>.  (Exceptions are listed
in L<perllocale/Not within the scope of "use locale">, and
locale-dependent functions within the POSIX module ARE always affected
by the current locale.)

The following examples assume

	use POSIX qw(setlocale LC_ALL LC_CTYPE);

has been issued.

The following will set the traditional UNIX system locale behavior
(the second argument C<"C">).

	$loc = setlocale( LC_ALL, "C" );

The following will query the current C<LC_CTYPE> category.  (No second
argument means 'query'.)

	$loc = setlocale( LC_CTYPE );

The following will set the C<LC_CTYPE> behaviour according to the locale
environment variables (the second argument C<"">).
Please see your system's C<setlocale(3)> documentation for the locale
environment variables' meaning or consult L<perllocale>.

	$loc = setlocale( LC_CTYPE, "" );

The following will set the C<LC_COLLATE> behaviour to Argentinian
Spanish. B<NOTE>: The naming and availability of locales depends on
your operating system. Please consult L<perllocale> for how to find
out which locales are available in your system.

	$loc = setlocale( LC_COLLATE, "es_AR.ISO8859-1" );

=item C<setpayload>

	use POSIX ':nan_payload';
	setpayload($var, $payload);

Sets the C<NaN> payload of var.  Added in Perl v5.24.

NOTE: the NaN payload APIs are based on the latest (as of June 2015)
proposed ISO C interfaces, but they are not yet a standard.  Things
may change.

See L</nan> for more discussion about C<NaN>.

See also L</setpayloadsig>, L</isnan>, L</getpayload>, and L</issignaling>.

=item C<setpayloadsig>

	use POSIX ':nan_payload';
	setpayloadsig($var, $payload);

Like L</setpayload> but also makes the NaN I<signaling>.  Added in Perl
v5.24.

Depending on the platform the NaN may or may not behave differently.

Note the API instability warning in L</setpayload>.

Note that because how the floating point formats work out, on the most
common platforms signaling payload of zero is best avoided,
since it might end up being identical to C<+Inf>.

See also L</nan>, L</isnan>, L</getpayload>, and L</issignaling>.

=item C<setpgid>

This is similar to the C function C<setpgid()> for
setting the process group identifier of the current process.

Returns C<undef> on failure.

=item C<setsid>

This is identical to the C function C<setsid()> for
setting the session identifier of the current process.

=item C<setuid>

Sets the real user identifier and the effective user identifier for
this process.  Similar to assigning a value to the Perl's builtin
C<$E<lt>> variable, see L<perlvar/$UID>, except that the latter
will change only the real user identifier.

=item C<sigaction>

Detailed signal management.  This uses C<POSIX::SigAction> objects for
the C<action> and C<oldaction> arguments (the oldaction can also be
just a hash reference).  Consult your system's C<sigaction> manpage
for details, see also L</POSIX::SigRt>.

Synopsis:

	sigaction(signal, action, oldaction = 0)

Returns C<undef> on failure.  The C<signal> must be a number (like
C<SIGHUP>), not a string (like C<"SIGHUP">), though Perl does try hard
to understand you.

If you use the C<SA_SIGINFO> flag, the signal handler will in addition to
the first argument, the signal name, also receive a second argument, a
hash reference, inside which are the following keys with the following
semantics, as defined by POSIX/SUSv3:

    signo       the signal number
    errno       the error number
    code        if this is zero or less, the signal was sent by
                a user process and the uid and pid make sense,
                otherwise the signal was sent by the kernel

The constants for specific C<code> values can be imported individually
or using the C<:signal_h_si_code> tag, since Perl v5.24.

The following are also defined by POSIX/SUSv3, but unfortunately
not very widely implemented:

    pid         the process id generating the signal
    uid         the uid of the process id generating the signal
    status      exit value or signal for SIGCHLD
    band        band event for SIGPOLL
    addr        address of faulting instruction or memory
                reference for SIGILL, SIGFPE, SIGSEGV or SIGBUS

A third argument is also passed to the handler, which contains a copy
of the raw binary contents of the C<siginfo> structure: if a system has
some non-POSIX fields, this third argument is where to C<unpack()> them
from.

Note that not all C<siginfo> values make sense simultaneously (some are
valid only for certain signals, for example), and not all values make
sense from Perl perspective, you should to consult your system's
C<sigaction> and possibly also C<siginfo> documentation.

=item C<siglongjmp>

Not implemented.  C<siglongjmp()> is C-specific: use L<perlfunc/die> instead.

=item C<signbit>

Returns zero for positive arguments, non-zero for negative arguments [C99].
Added in Perl v5.22.

=item C<sigpending>

Examine signals that are blocked and pending.  This uses C<POSIX::SigSet>
objects for the C<sigset> argument.  Consult your system's C<sigpending>
manpage for details.

Synopsis:

	sigpending(sigset)

Returns C<undef> on failure.

=item C<sigprocmask>

Change and/or examine calling process's signal mask.  This uses
C<POSIX::SigSet> objects for the C<sigset> and C<oldsigset> arguments.
Consult your system's C<sigprocmask> manpage for details.

Synopsis:

	sigprocmask(how, sigset, oldsigset = 0)

Returns C<undef> on failure.

Note that you can't reliably block or unblock a signal from its own signal
handler if you're using safe signals. Other signals can be blocked or unblocked
reliably.

=item C<sigsetjmp>

Not implemented.  C<sigsetjmp()> is C-specific: use C<eval {}> instead,
see L<perlfunc/eval>.

=item C<sigsuspend>

Install a signal mask and suspend process until signal arrives.  This uses
C<POSIX::SigSet> objects for the C<signal_mask> argument.  Consult your
system's C<sigsuspend> manpage for details.

Synopsis:

	sigsuspend(signal_mask)

Returns C<undef> on failure.

=item C<sin>

This is identical to Perl's builtin C<sin()> function
for returning the sine of the numerical argument,
see L<perlfunc/sin>.  See also L<Math::Trig>.

=item C<sinh>

This is identical to the C function C<sinh()>
for returning the hyperbolic sine of the numerical argument.
See also L<Math::Trig>.

=item C<sleep>

This is functionally identical to Perl's builtin C<sleep()> function
for suspending the execution of the current for process for certain
number of seconds, see L<perlfunc/sleep>.  There is one significant
difference, however: C<POSIX::sleep()> returns the number of
B<unslept> seconds, while the C<CORE::sleep()> returns the
number of slept seconds.

=item C<sprintf>

This is similar to Perl's builtin C<sprintf()> function
for returning a string that has the arguments formatted as requested,
see L<perlfunc/sprintf>.

=item C<sqrt>

This is identical to Perl's builtin C<sqrt()> function.
for returning the square root of the numerical argument,
see L<perlfunc/sqrt>.

=item C<srand>

Give a seed the pseudorandom number generator, see L<perlfunc/srand>.

=item C<sscanf>

Not implemented.  C<sscanf()> is C-specific, use regular expressions instead,
see L<perlre>.

=item C<stat>

This is identical to Perl's builtin C<stat()> function
for returning information about files and directories.

=item C<strcat>

Not implemented.  C<strcat()> is C-specific, use C<.=> instead, see L<perlop>.

=item C<strchr>

Not implemented.  C<strchr()> is C-specific, see L<perlfunc/index> instead.

=item C<strcmp>

Not implemented.  C<strcmp()> is C-specific, use C<eq> or C<cmp> instead, see L<perlop>.

=item C<strcoll>

This is identical to the C function C<strcoll()>
for collating (comparing) strings transformed using
the C<strxfrm()> function.  Not really needed since
Perl can do this transparently, see L<perllocale>.

Beware that in a UTF-8 locale, anything you pass to this function must
be in UTF-8; and when not in a UTF-8 locale, anything passed must not be
UTF-8 encoded.

Note also that it doesn't make sense for a string to be encoded in one
locale (say, ISO-8859-6, Arabic) and to collate it based on another
(like ISO-8859-7, Greek).  The results will be essentially meaningless.

=item C<strcpy>

Not implemented.  C<strcpy()> is C-specific, use C<=> instead, see L<perlop>.

=item C<strcspn>

Not implemented.  C<strcspn()> is C-specific, use regular expressions instead,
see L<perlre>.

=item C<strerror>

Returns the error string for the specified errno.
Identical to the string form of C<$!>, see L<perlvar/$ERRNO>.

=item C<strftime>

Convert date and time information to string.  Returns the string.

Synopsis:

	strftime(fmt, sec, min, hour, mday, mon, year,
		 wday = -1, yday = -1, isdst = -1)

The month (C<mon>), weekday (C<wday>), and yearday (C<yday>) begin at zero,
I<i.e.>, January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1.  The
year (C<year>) is given in years since 1900, I<i.e.>, the year 1995 is 95; the
year 2001 is 101.  Consult your system's C<strftime()> manpage for details
about these and the other arguments.

If you want your code to be portable, your format (C<fmt>) argument
should use only the conversion specifiers defined by the ANSI C
standard (C89, to play safe).  These are C<aAbBcdHIjmMpSUwWxXyYZ%>.
But even then, the B<results> of some of the conversion specifiers are
non-portable.  For example, the specifiers C<aAbBcpZ> change according
to the locale settings of the user, and both how to set locales (the
locale names) and what output to expect are non-standard.
The specifier C<c> changes according to the timezone settings of the
user and the timezone computation rules of the operating system.
The C<Z> specifier is notoriously unportable since the names of
timezones are non-standard. Sticking to the numeric specifiers is the
safest route.

The given arguments are made consistent as though by calling
C<mktime()> before calling your system's C<strftime()> function,
except that the C<isdst> value is not affected.

The string for Tuesday, December 12, 1995.

	$str = POSIX::strftime( "%A, %B %d, %Y",
				 0, 0, 0, 12, 11, 95, 2 );
	print "$str\n";

=item C<strlen>

Not implemented.  C<strlen()> is C-specific, use C<length()> instead, see L<perlfunc/length>.

=item C<strncat>

Not implemented.  C<strncat()> is C-specific, use C<.=> instead, see L<perlop>.

=item C<strncmp>

Not implemented.  C<strncmp()> is C-specific, use C<eq> instead, see L<perlop>.

=item C<strncpy>

Not implemented.  C<strncpy()> is C-specific, use C<=> instead, see L<perlop>.

=item C<strpbrk>

Not implemented.  C<strpbrk()> is C-specific, use regular expressions instead,
see L<perlre>.

=item C<strrchr>

Not implemented.  C<strrchr()> is C-specific, see L<perlfunc/rindex> instead.

=item C<strspn>

Not implemented.  C<strspn()> is C-specific, use regular expressions instead,
see L<perlre>.

=item C<strstr>

This is identical to Perl's builtin C<index()> function,
see L<perlfunc/index>.

=item C<strtod>

String to double translation. Returns the parsed number and the number
of characters in the unparsed portion of the string.  Truly
POSIX-compliant systems set C<$!> (C<$ERRNO>) to indicate a translation
error, so clear C<$!> before calling C<strtod>.  However, non-POSIX systems
may not check for overflow, and therefore will never set C<$!>.

C<strtod> respects any POSIX C<setlocale()> C<LC_NUMERIC> settings,
regardless of whether or not it is called from Perl code that is within
the scope of S<C<use locale>>.  Prior to Perl 5.28, or when operating in
a non thread-safe environment, it should not be used in a threaded
application unless it's certain that the underlying locale is C
or POSIX.  This is because it otherwise changes the locale, which
globally affects all threads simultaneously.

To parse a string C<$str> as a floating point number use

    $! = 0;
    ($num, $n_unparsed) = POSIX::strtod($str);

The second returned item and C<$!> can be used to check for valid input:

    if (($str eq '') || ($n_unparsed != 0) || $!) {
        die "Non-numeric input $str" . ($! ? ": $!\n" : "\n");
    }

When called in a scalar context C<strtod> returns the parsed number.

=item C<strtok>

Not implemented.  C<strtok()> is C-specific, use regular expressions instead, see
L<perlre>, or L<perlfunc/split>.

=item C<strtol>

String to (long) integer translation.  Returns the parsed number and
the number of characters in the unparsed portion of the string.  Truly
POSIX-compliant systems set C<$!> (C<$ERRNO>) to indicate a translation
error, so clear C<$!> before calling C<strtol>.  However, non-POSIX systems
may not check for overflow, and therefore will never set C<$!>.

C<strtol> should respect any POSIX I<setlocale()> settings.

To parse a string C<$str> as a number in some base C<$base> use

    $! = 0;
    ($num, $n_unparsed) = POSIX::strtol($str, $base);

The base should be zero or between 2 and 36, inclusive.  When the base
is zero or omitted C<strtol> will use the string itself to determine the
base: a leading "0x" or "0X" means hexadecimal; a leading "0" means
octal; any other leading characters mean decimal.  Thus, "1234" is
parsed as a decimal number, "01234" as an octal number, and "0x1234"
as a hexadecimal number.

The second returned item and C<$!> can be used to check for valid input:

    if (($str eq '') || ($n_unparsed != 0) || !$!) {
        die "Non-numeric input $str" . $! ? ": $!\n" : "\n";
    }

When called in a scalar context C<strtol> returns the parsed number.

=item C<strtold>

Like L</strtod> but for long doubles.  Defined only if the
system supports long doubles.

=item C<strtoul>

String to unsigned (long) integer translation.  C<strtoul()> is identical
to C<strtol()> except that C<strtoul()> only parses unsigned integers.  See
L</strtol> for details.

Note: Some vendors supply C<strtod()> and C<strtol()> but not C<strtoul()>.
Other vendors that do supply C<strtoul()> parse "-1" as a valid value.

=item C<strxfrm>

String transformation.  Returns the transformed string.

	$dst = POSIX::strxfrm( $src );

Used with C<eq> or C<cmp> as an alternative to C<L</strcoll>>.

Not really needed since Perl can do this transparently, see
L<perllocale>.

Beware that in a UTF-8 locale, anything you pass to this function must
be in UTF-8; and when not in a UTF-8 locale, anything passed must not be
UTF-8 encoded.

=item C<sysconf>

Retrieves values of system configurable variables.

The following will get the machine's clock speed.

	$clock_ticks = POSIX::sysconf( &POSIX::_SC_CLK_TCK );

Returns C<undef> on failure.

=item C<system>

This is identical to Perl's builtin C<system()> function, see
L<perlfunc/system>.

=item C<tan>

This is identical to the C function C<tan()>, returning the
tangent of the numerical argument.  See also L<Math::Trig>.

=item C<tanh>

This is identical to the C function C<tanh()>, returning the
hyperbolic tangent of the numerical argument.   See also L<Math::Trig>.

=item C<tcdrain>

This is similar to the C function C<tcdrain()> for draining
the output queue of its argument stream.

Returns C<undef> on failure.

=item C<tcflow>

This is similar to the C function C<tcflow()> for controlling
the flow of its argument stream.

Returns C<undef> on failure.

=item C<tcflush>

This is similar to the C function C<tcflush()> for flushing
the I/O buffers of its argument stream.

Returns C<undef> on failure.

=item C<tcgetpgrp>

This is identical to the C function C<tcgetpgrp()> for returning the
process group identifier of the foreground process group of the controlling
terminal.

=item C<tcsendbreak>

This is similar to the C function C<tcsendbreak()> for sending
a break on its argument stream.

Returns C<undef> on failure.

=item C<tcsetpgrp>

This is similar to the C function C<tcsetpgrp()> for setting the
process group identifier of the foreground process group of the controlling
terminal.

Returns C<undef> on failure.

=item C<tgamma>

The Gamma function [C99].  Added in Perl v5.22.

See also L</lgamma>.

=item C<time>

This is identical to Perl's builtin C<time()> function
for returning the number of seconds since the epoch
(whatever it is for the system), see L<perlfunc/time>.

=item C<times>

The C<times()> function returns elapsed realtime since some point in the past
(such as system startup), user and system times for this process, and user
and system times used by child processes.  All times are returned in clock
ticks.

    ($realtime, $user, $system, $cuser, $csystem)
	= POSIX::times();

Note: Perl's builtin C<times()> function returns four values, measured in
seconds.

=item C<tmpfile>

Not implemented.  Use method C<IO::File::new_tmpfile()> instead, or see L<File::Temp>.

=item C<tmpnam>

For security reasons, which are probably detailed in your system's
documentation for the C library C<tmpnam()> function, this interface
is no longer available since Perl v5.26; instead use L<File::Temp>.

=item C<tolower>

This function has been removed as of Perl v5.26.
This is identical to the C function, except that it can apply to a single
character or to a whole string, and currently operates as if the locale
always is "C".  Consider using the C<lc()> function, see L<perlfunc/lc>,
see L<perlfunc/lc>, or the equivalent C<\L> operator inside doublequotish
strings.

=item C<toupper>

This function has been removed as of Perl v5.26.
This is similar to the C function, except that it can apply to a single
character or to a whole string, and currently operates as if the locale
always is "C".  Consider using the C<uc()> function, see L<perlfunc/uc>,
or the equivalent C<\U> operator inside doublequotish strings.

=item C<trunc>

Returns the integer toward zero from the argument [C99].  Added in Perl
v5.22.

See also L</ceil>, L</floor>, and L</round>.

=item C<ttyname>

This is identical to the C function C<ttyname()> for returning the
name of the current terminal.

=item C<tzname>

Retrieves the time conversion information from the C<tzname> variable.

	POSIX::tzset();
	($std, $dst) = POSIX::tzname();

=item C<tzset>

This is identical to the C function C<tzset()> for setting
the current timezone based on the environment variable C<TZ>,
to be used by C<ctime()>, C<localtime()>, C<mktime()>, and C<strftime()>
functions.

=item C<umask>

This is identical to Perl's builtin C<umask()> function
for setting (and querying) the file creation permission mask,
see L<perlfunc/umask>.

=item C<uname>

Get name of current operating system.

	($sysname, $nodename, $release, $version, $machine)
		= POSIX::uname();

Note that the actual meanings of the various fields are not
that well standardized, do not expect any great portability.
The C<$sysname> might be the name of the operating system,
the C<$nodename> might be the name of the host, the C<$release>
might be the (major) release number of the operating system,
the C<$version> might be the (minor) release number of the
operating system, and the C<$machine> might be a hardware identifier.
Maybe.

=item C<ungetc>

Not implemented.  Use method C<IO::Handle::ungetc()> instead.

=item C<unlink>

This is identical to Perl's builtin C<unlink()> function
for removing files, see L<perlfunc/unlink>.

=item C<utime>

This is identical to Perl's builtin C<utime()> function
for changing the time stamps of files and directories,
see L<perlfunc/utime>.

=item C<vfprintf>

Not implemented.  C<vfprintf()> is C-specific, see L<perlfunc/printf> instead.

=item C<vprintf>

Not implemented.  C<vprintf()> is C-specific, see L<perlfunc/printf> instead.

=item C<vsprintf>

Not implemented.  C<vsprintf()> is C-specific, see L<perlfunc/sprintf> instead.

=item C<wait>

This is identical to Perl's builtin C<wait()> function,
see L<perlfunc/wait>.

=item C<waitpid>

Wait for a child process to change state.  This is identical to Perl's
builtin C<waitpid()> function, see L<perlfunc/waitpid>.

	$pid = POSIX::waitpid( -1, POSIX::WNOHANG );
	print "status = ", ($? / 256), "\n";

See L</mblen>.

=item C<wctomb>

This is the same as the C function C<wctomb()> on unthreaded perls.  On
threaded perls, it transparently (almost) substitutes the more
thread-safe L<C<wcrtomb>(3)>, if available, instead of C<wctomb>.

Core Perl does not have any support for wide and multibyte locales,
except Unicode UTF-8 locales.  This function, in conjunction with
L</mblen> and L</mbtowc> may be used to roll your own decoding/encoding
of other types of multi-byte locales.

Use C<undef> as the first parameter to this function to get the effect
of passing NULL as the first parameter to C<wctomb>.  This resets any
shift state to its initial value.  The return value is undefined if
C<wcrtomb> was substituted, so you should never rely on it.

When the first parameter is a scalar, the code point contained in the
scalar second parameter is converted into a multi-byte string and stored
into the first parameter scalar.  This is based on the locale that
currently underlies the program, regardless of whether or not the
function is called from Perl code that is within the scope of S<C<use
locale>>.  The return value is the number of bytes stored; or negative
if the code point isn't representable in the current locale.  Perl makes
no attempt at hiding from your code any differences in the C<errno>
setting between C<wctomb> and C<wcrtomb>.  It does set C<errno> to 0
before calling them.

=item C<write>

Write to a file.  This uses file descriptors such as those obtained by
calling C<POSIX::open>.

	$fd = POSIX::open( "foo", &POSIX::O_WRONLY );
	$buf = "hello";
	$bytes = POSIX::write( $fd, $buf, 5 );

Returns C<undef> on failure.

See also L<perlfunc/syswrite>.

=back

=head1 CLASSES

=head2 C<POSIX::SigAction>

=over 8

=item C<new>

Creates a new C<POSIX::SigAction> object which corresponds to the C
C<struct sigaction>.  This object will be destroyed automatically when
it is no longer needed.  The first parameter is the handler, a sub
reference.  The second parameter is a C<POSIX::SigSet> object, it
defaults to the empty set.  The third parameter contains the
C<sa_flags>, it defaults to 0.

	$sigset = POSIX::SigSet->new(SIGINT, SIGQUIT);
	$sigaction = POSIX::SigAction->new(
			\&handler, $sigset, &POSIX::SA_NOCLDSTOP
		     );

This C<POSIX::SigAction> object is intended for use with the C<POSIX::sigaction()>
function.

=back

=over 8

=item C<handler>

=item C<mask>

=item C<flags>

accessor functions to get/set the values of a SigAction object.

	$sigset = $sigaction->mask;
	$sigaction->flags(&POSIX::SA_RESTART);

=item C<safe>

accessor function for the "safe signals" flag of a SigAction object; see
L<perlipc> for general information on safe (a.k.a. "deferred") signals.  If
you wish to handle a signal safely, use this accessor to set the "safe" flag
in the C<POSIX::SigAction> object:

	$sigaction->safe(1);

You may also examine the "safe" flag on the output action object which is
filled in when given as the third parameter to C<POSIX::sigaction()>:

	sigaction(SIGINT, $new_action, $old_action);
	if ($old_action->safe) {
	    # previous SIGINT handler used safe signals
	}

=back

=head2 C<POSIX::SigRt>

=over 8

=item C<%SIGRT>

A hash of the POSIX realtime signal handlers.  It is an extension of
the standard C<%SIG>, the C<$POSIX::SIGRT{SIGRTMIN}> is roughly equivalent
to C<$SIG{SIGRTMIN}>, but the right POSIX moves (see below) are made with
the C<POSIX::SigSet> and C<POSIX::sigaction> instead of accessing the C<%SIG>.

