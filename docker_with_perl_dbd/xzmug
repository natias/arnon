S_invlist_iterinit(SV *invlist);
#   define PERL_ARGS_ASSERT_INVLIST_ITERINIT    \
        assert(invlist)

PERL_STATIC_INLINE bool
S_invlist_iternext(SV *invlist, UV *start, UV *end)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_INVLIST_ITERNEXT    \
        assert(invlist); assert(start); assert(end)

# endif /* defined(PERL_IN_OP_C) || defined(PERL_IN_REGCOMP_ANY) */
# if defined(PERL_IN_PP_C) || defined(PERL_IN_PP_HOT_C)
PERL_STATIC_INLINE bool
S_lossless_NV_to_IV(const NV nv, IV *ivp)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_LOSSLESS_NV_TO_IV   \
        assert(ivp)

# endif
# if defined(PERL_IN_PP_C)   || defined(PERL_IN_REGCOMP_ANY) || \
     defined(PERL_IN_TOKE_C) || defined(PERL_IN_UNIVERSAL_C)
PERL_STATIC_INLINE const char *
S_get_regex_charset_name(const U32 flags, STRLEN * const lenp);
#   define PERL_ARGS_ASSERT_GET_REGEX_CHARSET_NAME \
        assert(lenp)

# endif
# if defined(U64TYPE)
PERL_STATIC_INLINE unsigned
Perl_lsbit_pos64(U64 word)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_LSBIT_POS64

PERL_STATIC_INLINE unsigned
Perl_msbit_pos64(U64 word)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_MSBIT_POS64

PERL_STATIC_INLINE unsigned
Perl_single_1bit_pos64(U64 word)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_SINGLE_1BIT_POS64

# endif /* defined(U64TYPE) */
# if defined(USE_ITHREADS)
PERL_STATIC_INLINE AV *
Perl_cop_file_avn(pTHX_ const COP *cop);
#   define PERL_ARGS_ASSERT_COP_FILE_AVN        \
        assert(cop)

#   if !defined(PERL_IMPLICIT_SYS)
PERL_STATIC_INLINE bool
S_PerlEnv_putenv(pTHX_ char *str);
#     define PERL_ARGS_ASSERT_PERLENV_PUTENV    \
        assert(str)

#   endif
# endif /* defined(USE_ITHREADS) */
# if !defined(WIN32)
PERL_STATIC_INLINE void *
Perl_get_context(void)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_GET_CONTEXT

# endif
#endif /* !defined(PERL_NO_INLINE_FUNCTIONS) */
#if defined(PERL_RC_STACK)
PERL_CALLCONV OP *
Perl_pp_wrap(pTHX_ Perl_ppaddr_t real_pp_fn, I32 nargs, int nlists);
# define PERL_ARGS_ASSERT_PP_WRAP               \
        assert(real_pp_fn)

PERL_CALLCONV int
Perl_runops_wrap(pTHX);
# define PERL_ARGS_ASSERT_RUNOPS_WRAP

PERL_CALLCONV void
Perl_xs_wrap(pTHX_ XSUBADDR_t xsub, CV *cv);
# define PERL_ARGS_ASSERT_XS_WRAP               \
        assert(xsub); assert(cv)

#endif /* defined(PERL_RC_STACK) */
#if defined(PERL_USE_3ARG_SIGHANDLER)
PERL_CALLCONV Signal_t
Perl_csighandler(int sig, Siginfo_t *info, void *uap);
# define PERL_ARGS_ASSERT_CSIGHANDLER

PERL_CALLCONV Signal_t
Perl_sighandler(int sig, Siginfo_t *info, void *uap)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_SIGHANDLER

#else /* if !defined(PERL_USE_3ARG_SIGHANDLER) */
PERL_CALLCONV Signal_t
Perl_csighandler(int sig);
# define PERL_ARGS_ASSERT_CSIGHANDLER

PERL_CALLCONV Signal_t
Perl_sighandler(int sig)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_SIGHANDLER

#endif /* !defined(PERL_USE_3ARG_SIGHANDLER) */
#if defined(U64TYPE)

#endif
#if defined(UNLINK_ALL_VERSIONS)
PERL_CALLCONV I32
Perl_unlnk(pTHX_ const char *f);
# define PERL_ARGS_ASSERT_UNLNK                 \
        assert(f)

#endif
#if defined(USE_C_BACKTRACE)
PERL_CALLCONV bool
Perl_dump_c_backtrace(pTHX_ PerlIO *fp, int max_depth, int skip);
# define PERL_ARGS_ASSERT_DUMP_C_BACKTRACE      \
        assert(fp)

/* PERL_CALLCONV void
free_c_backtrace(pTHX_ Perl_c_backtrace *bt); */

PERL_CALLCONV Perl_c_backtrace *
Perl_get_c_backtrace(pTHX_ int max_depth, int skip)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_GET_C_BACKTRACE

PERL_CALLCONV SV *
Perl_get_c_backtrace_dump(pTHX_ int max_depth, int skip);
# define PERL_ARGS_ASSERT_GET_C_BACKTRACE_DUMP

#endif /* defined(USE_C_BACKTRACE) */
#if defined(USE_DTRACE)
PERL_CALLCONV void
Perl_dtrace_probe_call(pTHX_ CV *cv, bool is_call);
# define PERL_ARGS_ASSERT_DTRACE_PROBE_CALL     \
        assert(cv)

PERL_CALLCONV void
Perl_dtrace_probe_load(pTHX_ const char *name, bool is_loading);
# define PERL_ARGS_ASSERT_DTRACE_PROBE_LOAD     \
        assert(name)

PERL_CALLCONV void
Perl_dtrace_probe_op(pTHX_ const OP *op);
# define PERL_ARGS_ASSERT_DTRACE_PROBE_OP       \
        assert(op)

PERL_CALLCONV void
Perl_dtrace_probe_phase(pTHX_ enum perl_phase phase);
# define PERL_ARGS_ASSERT_DTRACE_PROBE_PHASE

#endif /* defined(USE_DTRACE) */
#if defined(USE_ITHREADS)
PERL_CALLCONV PADOFFSET
Perl_alloccopstash(pTHX_ HV *hv);
# define PERL_ARGS_ASSERT_ALLOCCOPSTASH         \
        assert(hv)

PERL_CALLCONV void *
Perl_any_dup(pTHX_ void *v, const PerlInterpreter *proto_perl)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_ANY_DUP               \
        assert(proto_perl)

PERL_CALLCONV void
Perl_clone_params_del(CLONE_PARAMS *param);
# define PERL_ARGS_ASSERT_CLONE_PARAMS_DEL      \
        assert(param)

PERL_CALLCONV CLONE_PARAMS *
Perl_clone_params_new(PerlInterpreter * const from, PerlInterpreter * const to)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_CLONE_PARAMS_NEW      \
        assert(from); assert(to)

PERL_CALLCONV PERL_CONTEXT *
Perl_cx_dup(pTHX_ PERL_CONTEXT *cx, I32 ix, I32 max, CLONE_PARAMS *param)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_CX_DUP                \
        assert(param)

PERL_CALLCONV DIR *
Perl_dirp_dup(pTHX_ DIR * const dp, CLONE_PARAMS * const param)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_DIRP_DUP              \
        assert(param)

PERL_CALLCONV PerlIO *
Perl_fp_dup(pTHX_ PerlIO * const fp, const char type, CLONE_PARAMS * const param);
# define PERL_ARGS_ASSERT_FP_DUP                \
        assert(param)

PERL_CALLCONV GP *
Perl_gp_dup(pTHX_ GP * const gp, CLONE_PARAMS * const param)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_GP_DUP                \
        assert(param)

PERL_CALLCONV HE *
Perl_he_dup(pTHX_ const HE *e, bool shared, CLONE_PARAMS *param)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_HE_DUP                \
        assert(param)

PERL_CALLCONV HEK *
Perl_hek_dup(pTHX_ HEK *e, CLONE_PARAMS *param)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_HEK_DUP               \
        assert(param)

PERL_CALLCONV MAGIC *
Perl_mg_dup(pTHX_ MAGIC *mg, CLONE_PARAMS * const param)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_MG_DUP                \
        assert(param)

PERL_CALLCONV struct mro_meta *
Perl_mro_meta_dup(pTHX_ struct mro_meta *smeta, CLONE_PARAMS *param)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_MRO_META_DUP          \
        assert(smeta); assert(param)

PERL_CALLCONV OP *
Perl_newPADOP(pTHX_ I32 type, I32 flags, SV *sv)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_NEWPADOP              \
        assert(sv)

PERL_CALLCONV PADLIST *
Perl_padlist_dup(pTHX_ PADLIST *srcpad, CLONE_PARAMS *param)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_PADLIST_DUP           \
        assert(srcpad); assert(param)

PERL_CALLCONV PADNAME *
Perl_padname_dup(pTHX_ PADNAME *src, CLONE_PARAMS *param)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_PADNAME_DUP           \
        assert(src); assert(param)

PERL_CALLCONV PADNAMELIST *
Perl_padnamelist_dup(pTHX_ PADNAMELIST *srcpad, CLONE_PARAMS *param)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_PADNAMELIST_DUP       \
        assert(srcpad); assert(param)

PERL_CALLCONV yy_parser *
Perl_parser_dup(pTHX_ const yy_parser * const proto, CLONE_PARAMS * const param);
# define PERL_ARGS_ASSERT_PARSER_DUP            \
        assert(param)

PERL_CALLCONV PerlInterpreter *
perl_clone(PerlInterpreter *proto_perl, UV flags);
# define PERL_ARGS_ASSERT_PERL_CLONE            \
        assert(proto_perl)

PERL_CALLCONV void
Perl_re_dup_guts(pTHX_ const REGEXP *sstr, REGEXP *dstr, CLONE_PARAMS *param);
# define PERL_ARGS_ASSERT_RE_DUP_GUTS           \
        assert(sstr); assert(dstr); assert(param)

PERL_CALLCONV void *
Perl_regdupe_internal(pTHX_ REGEXP * const r, CLONE_PARAMS *param);
# define PERL_ARGS_ASSERT_REGDUPE_INTERNAL      \
        assert(r); assert(param)

PERL_CALLCONV void
Perl_rvpv_dup(pTHX_ SV * const dsv, const SV * const ssv, CLONE_PARAMS * const param);
# define PERL_ARGS_ASSERT_RVPV_DUP              \
        assert(dsv); assert(ssv); assert(param)

PERL_CALLCONV PERL_SI *
Perl_si_dup(pTHX_ PERL_SI *si, CLONE_PARAMS *param)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SI_DUP                \
        assert(param)

PERL_CALLCONV ANY *
Perl_ss_dup(pTHX_ PerlInterpreter *proto_perl, CLONE_PARAMS *param)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SS_DUP                \
        assert(proto_perl); assert(param)

PERL_CALLCONV SV *
Perl_sv_dup(pTHX_ const SV * const ssv, CLONE_PARAMS * const param)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SV_DUP                \
        assert(param)

PERL_CALLCONV SV *
Perl_sv_dup_inc(pTHX_ const SV * const ssv, CLONE_PARAMS * const param)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SV_DUP_INC            \
        assert(param)

# if defined(PERL_IN_OP_C) || defined(PERL_IN_PEEP_C)
PERL_CALLCONV void
Perl_op_relocate_sv(pTHX_ SV **svp, PADOFFSET *targp)
        __attribute__visibility__("hidden");
#   define PERL_ARGS_ASSERT_OP_RELOCATE_SV      \
        assert(svp); assert(targp)

# endif
#else /* if !defined(USE_ITHREADS) */
/* PERL_CALLCONV void
CopFILEGV_set(pTHX_ COP *c, GV *gv); */

#endif
#if defined(USE_LOCALE_COLLATE)
PERL_CALLCONV int
Perl_magic_freecollxfrm(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_MAGIC_FREECOLLXFRM    \
        assert(sv); assert(mg)

PERL_CALLCONV int
Perl_magic_setcollxfrm(pTHX_ SV *sv, MAGIC *mg)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_MAGIC_SETCOLLXFRM     \
        assert(sv); assert(mg)

PERL_CALLCONV SV *
Perl_strxfrm(pTHX_ SV *src);
# define PERL_ARGS_ASSERT_STRXFRM               \
        assert(src)

PERL_CALLCONV char *
Perl_sv_collxfrm_flags(pTHX_ SV * const sv, STRLEN * const nxp, I32 const flags);
# define PERL_ARGS_ASSERT_SV_COLLXFRM_FLAGS     \
        assert(sv); assert(nxp)

# if defined(PERL_IN_LOCALE_C) || defined(PERL_IN_MATHOMS_C) || \
     defined(PERL_IN_SV_C)
PERL_CALLCONV char *
Perl_mem_collxfrm_(pTHX_ const char *input_string, STRLEN len, STRLEN *xlen, bool utf8)
        __attribute__visibility__("hidden");
#   define PERL_ARGS_ASSERT_MEM_COLLXFRM_       \
        assert(input_string); assert(xlen)

# endif
#endif /* defined(USE_LOCALE_COLLATE) */
#if defined(USE_LOCALE_CTYPE)
PERL_CALLCONV void
Perl_warn_problematic_locale(void);
# define PERL_ARGS_ASSERT_WARN_PROBLEMATIC_LOCALE

#endif
#if defined(USE_PERLIO)
PERL_CALLCONV void
Perl_PerlIO_clearerr(pTHX_ PerlIO *f);
# define PERL_ARGS_ASSERT_PERLIO_CLEARERR

PERL_CALLCONV int
Perl_PerlIO_close(pTHX_ PerlIO *f);
# define PERL_ARGS_ASSERT_PERLIO_CLOSE

PERL_CALLCONV int
Perl_PerlIO_eof(pTHX_ PerlIO *f);
# define PERL_ARGS_ASSERT_PERLIO_EOF

PERL_CALLCONV int
Perl_PerlIO_error(pTHX_ PerlIO *f);
# define PERL_ARGS_ASSERT_PERLIO_ERROR

PERL_CALLCONV int
Perl_PerlIO_fileno(pTHX_ PerlIO *f);
# define PERL_ARGS_ASSERT_PERLIO_FILENO

PERL_CALLCONV int
Perl_PerlIO_fill(pTHX_ PerlIO *f);
# define PERL_ARGS_ASSERT_PERLIO_FILL

PERL_CALLCONV int
Perl_PerlIO_flush(pTHX_ PerlIO *f);
# define PERL_ARGS_ASSERT_PERLIO_FLUSH

PERL_CALLCONV STDCHAR *
Perl_PerlIO_get_base(pTHX_ PerlIO *f);
# define PERL_ARGS_ASSERT_PERLIO_GET_BASE

PERL_CALLCONV SSize_t
Perl_PerlIO_get_bufsiz(pTHX_ PerlIO *f)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_PERLIO_GET_BUFSIZ

PERL_CALLCONV SSize_t
Perl_PerlIO_get_cnt(pTHX_ PerlIO *f)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_PERLIO_GET_CNT

PERL_CALLCONV STDCHAR *
Perl_PerlIO_get_ptr(pTHX_ PerlIO *f);
# define PERL_ARGS_ASSERT_PERLIO_GET_PTR

PERL_CALLCONV SSize_t
Perl_PerlIO_read(pTHX_ PerlIO *f, void *vbuf, Size_t count);
# define PERL_ARGS_ASSERT_PERLIO_READ           \
        assert(vbuf)

PERL_CALLCONV void
Perl_PerlIO_restore_errno(pTHX_ PerlIO *f);
# define PERL_ARGS_ASSERT_PERLIO_RESTORE_ERRNO

PERL_CALLCONV void
Perl_PerlIO_save_errno(pTHX_ PerlIO *f);
# define PERL_ARGS_ASSERT_PERLIO_SAVE_ERRNO

PERL_CALLCONV int
Perl_PerlIO_seek(pTHX_ PerlIO *f, Off_t offset, int whence);
# define PERL_ARGS_ASSERT_PERLIO_SEEK

PERL_CALLCONV void
Perl_PerlIO_set_cnt(pTHX_ PerlIO *f, SSize_t cnt);
# define PERL_ARGS_ASSERT_PERLIO_SET_CNT

PERL_CALLCONV void
Perl_PerlIO_set_ptrcnt(pTHX_ PerlIO *f, STDCHAR *ptr, SSize_t cnt);
# define PERL_ARGS_ASSERT_PERLIO_SET_PTRCNT

PERL_CALLCONV void
Perl_PerlIO_setlinebuf(pTHX_ PerlIO *f);
# define PERL_ARGS_ASSERT_PERLIO_SETLINEBUF

PERL_CALLCONV PerlIO *
Perl_PerlIO_stderr(pTHX)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_PERLIO_STDERR

PERL_CALLCONV PerlIO *
Perl_PerlIO_stdin(pTHX)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_PERLIO_STDIN

PERL_CALLCONV PerlIO *
Perl_PerlIO_stdout(pTHX)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_PERLIO_STDOUT

PERL_CALLCONV Off_t
Perl_PerlIO_tell(pTHX_ PerlIO *f);
# define PERL_ARGS_ASSERT_PERLIO_TELL

PERL_CALLCONV SSize_t
Perl_PerlIO_unread(pTHX_ PerlIO *f, const void *vbuf, Size_t count);
# define PERL_ARGS_ASSERT_PERLIO_UNREAD         \
        assert(vbuf)

PERL_CALLCONV SSize_t
Perl_PerlIO_write(pTHX_ PerlIO *f, const void *vbuf, Size_t count);
# define PERL_ARGS_ASSERT_PERLIO_WRITE          \
        assert(vbuf)

#endif /* defined(USE_PERLIO) */
#if defined(USE_PERL_SWITCH_LOCALE_CONTEXT)
PERL_CALLCONV void
Perl_switch_locale_context(pTHX);
# define PERL_ARGS_ASSERT_SWITCH_LOCALE_CONTEXT

#endif
#if defined(USE_QUADMATH)
PERL_CALLCONV bool
Perl_quadmath_format_needed(const char *format)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_QUADMATH_FORMAT_NEEDED \
        assert(format)

PERL_CALLCONV bool
Perl_quadmath_format_valid(const char *format)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_QUADMATH_FORMAT_VALID \
        assert(format)

#endif /* defined(USE_QUADMATH) */
#if defined(USE_THREADS)
PERL_CALLCONV void
Perl_thread_locale_init(pTHX);
# define PERL_ARGS_ASSERT_THREAD_LOCALE_INIT

PERL_CALLCONV void
Perl_thread_locale_term(pTHX);
# define PERL_ARGS_ASSERT_THREAD_LOCALE_TERM

#endif
#if defined(VMS) || defined(WIN32)
PERL_CALLCONV int
Perl_do_aspawn(pTHX_ SV *really, SV **mark, SV **sp);
# define PERL_ARGS_ASSERT_DO_ASPAWN             \
        assert(mark); assert(sp)

PERL_CALLCONV int
Perl_do_spawn(pTHX_ char *cmd);
# define PERL_ARGS_ASSERT_DO_SPAWN              \
        assert(cmd)

PERL_CALLCONV int
Perl_do_spawn_nowait(pTHX_ char *cmd);
# define PERL_ARGS_ASSERT_DO_SPAWN_NOWAIT       \
        assert(cmd)

#endif /* defined(VMS) || defined(WIN32) */
#if defined(WIN32)
PERL_CALLCONV void *
Perl_get_context(void)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_GET_CONTEXT

PERL_CALLCONV bool
Perl_get_win32_message_utf8ness(pTHX_ const char *string)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_GET_WIN32_MESSAGE_UTF8NESS

PERL_CALLCONV_NO_RET void
win32_croak_not_implemented(const char *fname)
        __attribute__noreturn__;
# define PERL_ARGS_ASSERT_WIN32_CROAK_NOT_IMPLEMENTED \
        assert(fname)

#else /* if !defined(WIN32) */
PERL_CALLCONV bool
Perl_do_exec3(pTHX_ const char *incmd, int fd, int do_report)
        __attribute__visibility__("hidden");
# define PERL_ARGS_ASSERT_DO_EXEC3              \
        assert(incmd)

#endif

#ifdef PERL_CORE
#  include "pp_proto.h"
#endif
END_EXTERN_C

/* ex: set ro ft=c: */
                                                               usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/CORE/reentr.h                                           0000444 0000000 0000000 00000252536 14714567415 020603  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* -*- mode: C; buffer-read-only: t -*-
 *
 *    reentr.h
 *
 *    Copyright (C) 2002, 2003, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
 *    2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,
 *    2024 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is built by regen/reentr.pl from data in regen/reentr.pl.
 * Any changes made here will be lost!
 */

#ifndef PERL_REENTR_H_
#define PERL_REENTR_H_

/* If compiling for a threaded perl, we will macro-wrap the system/library
 * interfaces (e.g. getpwent()) which have threaded versions
 * (e.g. getpwent_r()), which will handle things correctly for
 * the Perl interpreter.  This is done automatically for the perl core and
 * extensions, but not generally for XS modules unless they
 *    #define PERL_REENTRANT
 * See L<perlxs/Thread-aware system interfaces>.
 *
 * For a function 'foo', use the compile-time directive
 *    #ifdef PERL_REENTR_USING_FOO_R
 * to test if the function actually did get replaced by the reentrant version.
 * (If it isn't getting replaced, it might mean it uses a different prototype
 * on the given platform than any we are expecting.  To fix that, add the
 * prototype to the __DATA__ section of regen/reentr.pl.)
 */

#ifndef PERL_REENTR_API
#  if defined(PERL_CORE) || defined(PERL_EXT) || defined(PERL_REENTRANT)
#    define PERL_REENTR_API 1
#  else
#    define PERL_REENTR_API 0
#  endif
#endif

#ifdef USE_REENTRANT_API

/* For thread-safe builds, alternative methods are used to make calls to this
 * safe. */
#ifdef USE_THREAD_SAFE_LOCALE
#   undef HAS_SETLOCALE_R
#endif
 
/* Deprecations: some platforms have the said reentrant interfaces
 * but they are declared obsolete and are not to be used.  Often this
 * means that the platform has threadsafed the interfaces (hopefully).
 * All this is OS version dependent, so we are of course fooling ourselves.
 * If you know of more deprecations on some platforms, please add your own
 * (by editing reentr.pl, mind!) */

#  ifdef __hpux
#    undef HAS_CRYPT_R
#    undef HAS_ENDGRENT_R
#    undef HAS_ENDPWENT_R
#    undef HAS_GETGRENT_R
#    undef HAS_GETPWENT_R
#    undef HAS_SETLOCALE_R
#    undef HAS_STRERROR_R
#    define NETDB_R_OBSOLETE
#  endif

#  if defined(__osf__) && defined(__alpha) /* Tru64 aka Digital UNIX */
#    undef HAS_CRYPT_R
#    undef HAS_STRERROR_R
#    define NETDB_R_OBSOLETE
#  endif

#  if defined(__GLIBC__) && (__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 24))
#    undef HAS_READDIR_R
#    undef HAS_READDIR64_R
#  endif

/*
 * As of OpenBSD 3.7, reentrant functions are now working, they just are
 * incompatible with everyone else.  To make OpenBSD happy, we have to
 * memzero out certain structures before calling the functions.
 */
#  if defined(__OpenBSD__)
#    define REENTR_MEMZERO(a,b) memzero(a,b)
#  else
#    define REENTR_MEMZERO(a,b) 0
#  endif

#  ifdef NETDB_R_OBSOLETE
#    undef HAS_ENDHOSTENT_R
#    undef HAS_ENDNETENT_R
#    undef HAS_ENDPROTOENT_R
#    undef HAS_ENDSERVENT_R
#    undef HAS_GETHOSTBYADDR_R
#    undef HAS_GETHOSTBYNAME_R
#    undef HAS_GETHOSTENT_R
#    undef HAS_GETNETBYADDR_R
#    undef HAS_GETNETBYNAME_R
#    undef HAS_GETNETENT_R
#    undef HAS_GETPROTOBYNAME_R
#    undef HAS_GETPROTOBYNUMBER_R
#    undef HAS_GETPROTOENT_R
#    undef HAS_GETSERVBYNAME_R
#    undef HAS_GETSERVBYPORT_R
#    undef HAS_GETSERVENT_R
#    undef HAS_SETHOSTENT_R
#    undef HAS_SETNETENT_R
#    undef HAS_SETPROTOENT_R
#    undef HAS_SETSERVENT_R
#  endif

#  ifdef I_PWD
#    include <pwd.h>
#  endif
#  ifdef I_GRP
#    include <grp.h>
#  endif
#  ifdef I_NETDB
#    include <netdb.h>
#  endif
#  ifdef I_CRYPT
#    ifdef I_CRYPT
#      include <crypt.h>
#    endif
#  endif
#  ifdef HAS_GETSPNAM_R
#    ifdef I_SHADOW
#      include <shadow.h>
#    endif
#  endif

#  define REENTRANT_PROTO_B_B	1
#  define REENTRANT_PROTO_B_BI	2
#  define REENTRANT_PROTO_B_BW	3
#  define REENTRANT_PROTO_B_CCD	4
#  define REENTRANT_PROTO_B_CCS	5
#  define REENTRANT_PROTO_B_IBI	6
#  define REENTRANT_PROTO_B_IBW	7
#  define REENTRANT_PROTO_B_SB	8
#  define REENTRANT_PROTO_B_SBI	9
#  define REENTRANT_PROTO_I_BI	10
#  define REENTRANT_PROTO_I_BW	11
#  define REENTRANT_PROTO_I_CCSBWR	12
#  define REENTRANT_PROTO_I_CCSD	13
#  define REENTRANT_PROTO_I_CII	14
#  define REENTRANT_PROTO_I_CIISD	15
#  define REENTRANT_PROTO_I_CSBI	16
#  define REENTRANT_PROTO_I_CSBIR	17
#  define REENTRANT_PROTO_I_CSBWR	18
#  define REENTRANT_PROTO_I_CSBWRE	19
#  define REENTRANT_PROTO_I_CSD	20
#  define REENTRANT_PROTO_I_CWISBWRE	21
#  define REENTRANT_PROTO_I_CWISD	22
#  define REENTRANT_PROTO_I_D	23
#  define REENTRANT_PROTO_I_H	24
#  define REENTRANT_PROTO_I_IBI	25
#  define REENTRANT_PROTO_I_IBW	26
#  define REENTRANT_PROTO_I_ICBI	27
#  define REENTRANT_PROTO_I_ICSBWR	28
#  define REENTRANT_PROTO_I_ICSD	29
#  define REENTRANT_PROTO_I_ID	30
#  define REENTRANT_PROTO_I_IISD	31
#  define REENTRANT_PROTO_I_ISBWR	32
#  define REENTRANT_PROTO_I_ISD	33
#  define REENTRANT_PROTO_I_LISBI	34
#  define REENTRANT_PROTO_I_LISD	35
#  define REENTRANT_PROTO_I_SB	36
#  define REENTRANT_PROTO_I_SBI	37
#  define REENTRANT_PROTO_I_SBIE	38
#  define REENTRANT_PROTO_I_SBIH	39
#  define REENTRANT_PROTO_I_SBIR	40
#  define REENTRANT_PROTO_I_SBWR	41
#  define REENTRANT_PROTO_I_SBWRE	42
#  define REENTRANT_PROTO_I_SD	43
#  define REENTRANT_PROTO_I_TISD	44
#  define REENTRANT_PROTO_I_TS	45
#  define REENTRANT_PROTO_I_TSBI	46
#  define REENTRANT_PROTO_I_TSBIR	47
#  define REENTRANT_PROTO_I_TSBWR	48
#  define REENTRANT_PROTO_I_TSR	49
#  define REENTRANT_PROTO_I_TsISBWRE	50
#  define REENTRANT_PROTO_I_UISBWRE	51
#  define REENTRANT_PROTO_I_uISBWRE	52
#  define REENTRANT_PROTO_S_CBI	53
#  define REENTRANT_PROTO_S_CCSBI	54
#  define REENTRANT_PROTO_S_CIISBIE	55
#  define REENTRANT_PROTO_S_CSBI	56
#  define REENTRANT_PROTO_S_CSBIE	57
#  define REENTRANT_PROTO_S_CWISBIE	58
#  define REENTRANT_PROTO_S_CWISBWIE	59
#  define REENTRANT_PROTO_S_ICSBI	60
#  define REENTRANT_PROTO_S_ISBI	61
#  define REENTRANT_PROTO_S_LISBI	62
#  define REENTRANT_PROTO_S_SBI	63
#  define REENTRANT_PROTO_S_SBIE	64
#  define REENTRANT_PROTO_S_SBW	65
#  define REENTRANT_PROTO_S_TISBI	66
#  define REENTRANT_PROTO_S_TS	67
#  define REENTRANT_PROTO_S_TSBI	68
#  define REENTRANT_PROTO_S_TSBIE	69
#  define REENTRANT_PROTO_S_TWISBIE	70
#  define REENTRANT_PROTO_V_D	71
#  define REENTRANT_PROTO_V_H	72
#  define REENTRANT_PROTO_V_ID	73

/* Defines for indicating which special features are supported. */

/* The getgrent getgrgid getgrnam using buffer? */

#  if defined(HAS_GETGRENT_R) && (GETGRENT_R_PROTO == REENTRANT_PROTO_I_SBWR || GETGRENT_R_PROTO == REENTRANT_PROTO_I_SBIR || GETGRENT_R_PROTO == REENTRANT_PROTO_S_SBW || GETGRENT_R_PROTO == REENTRANT_PROTO_S_SBI || GETGRENT_R_PROTO == REENTRANT_PROTO_I_SBI || GETGRENT_R_PROTO == REENTRANT_PROTO_I_SBIH)
#    define GETGRENT_R_HAS_BUFFER
#  else
#    undef  GETGRENT_R_HAS_BUFFER
#  endif
#  if defined(HAS_GETGRGID_R) && (GETGRGID_R_PROTO == REENTRANT_PROTO_I_TSBWR || GETGRGID_R_PROTO == REENTRANT_PROTO_I_TSBIR || GETGRGID_R_PROTO == REENTRANT_PROTO_I_TSBI || GETGRGID_R_PROTO == REENTRANT_PROTO_S_TSBI)
#    define GETGRGID_R_HAS_BUFFER
#  else
#    undef  GETGRGID_R_HAS_BUFFER
#  endif
#  if defined(HAS_GETGRNAM_R) && (GETGRNAM_R_PROTO == REENTRANT_PROTO_I_CSBWR || GETGRNAM_R_PROTO == REENTRANT_PROTO_I_CSBIR || GETGRNAM_R_PROTO == REENTRANT_PROTO_S_CBI || GETGRNAM_R_PROTO == REENTRANT_PROTO_I_CSBI || GETGRNAM_R_PROTO == REENTRANT_PROTO_S_CSBI)
#    define GETGRNAM_R_HAS_BUFFER
#  else
#    undef  GETGRNAM_R_HAS_BUFFER
#  endif

/* Any of the getgrent getgrgid getgrnam using buffer? */

#  if (defined(GETGRENT_R_HAS_BUFFER) || defined(GETGRGID_R_HAS_BUFFER) || defined(GETGRNAM_R_HAS_BUFFER))
#    define USE_GRENT_BUFFER
#  else
#    undef  USE_GRENT_BUFFER
#  endif

/* The getgrent getgrgid getgrnam using ptr? */

#  if defined(HAS_GETGRENT_R) && (GETGRENT_R_PROTO == REENTRANT_PROTO_I_SBWR || GETGRENT_R_PROTO == REENTRANT_PROTO_I_SBIR)
#    define GETGRENT_R_HAS_PTR
#  else
#    undef  GETGRENT_R_HAS_PTR
#  endif
#  if defined(HAS_GETGRGID_R) && (GETGRGID_R_PROTO == REENTRANT_PROTO_I_TSBWR || GETGRGID_R_PROTO == REENTRANT_PROTO_I_TSBIR)
#    define GETGRGID_R_HAS_PTR
#  else
#    undef  GETGRGID_R_HAS_PTR
#  endif
#  if defined(HAS_GETGRNAM_R) && (GETGRNAM_R_PROTO == REENTRANT_PROTO_I_CSBWR || GETGRNAM_R_PROTO == REENTRANT_PROTO_I_CSBIR)
#    define GETGRNAM_R_HAS_PTR
#  else
#    undef  GETGRNAM_R_HAS_PTR
#  endif

/* Any of the getgrent getgrgid getgrnam using ptr? */

#  if (defined(GETGRENT_R_HAS_PTR) || defined(GETGRGID_R_HAS_PTR) || defined(GETGRNAM_R_HAS_PTR))
#    define USE_GRENT_PTR
#  else
#    undef  USE_GRENT_PTR
#  endif

/* The getpwent getpwnam getpwuid using ptr? */

#  if defined(HAS_GETPWENT_R) && (GETPWENT_R_PROTO == REENTRANT_PROTO_I_SBWR || GETPWENT_R_PROTO == REENTRANT_PROTO_I_SBIR)
#    define GETPWENT_R_HAS_PTR
#  else
#    undef  GETPWENT_R_HAS_PTR
#  endif
#  if defined(HAS_GETPWNAM_R) && (GETPWNAM_R_PROTO == REENTRANT_PROTO_I_CSBWR || GETPWNAM_R_PROTO == REENTRANT_PROTO_I_CSBIR)
#    define GETPWNAM_R_HAS_PTR
#  else
#    undef  GETPWNAM_R_HAS_PTR
#  endif
#  if defined(HAS_GETPWUID_R) && (GETPWUID_R_PROTO == REENTRANT_PROTO_I_TSBWR || GETPWUID_R_PROTO == REENTRANT_PROTO_I_TSBIR)
#    define GETPWUID_R_HAS_PTR
#  else
#    undef  GETPWUID_R_HAS_PTR
#  endif

/* Any of the getpwent getpwnam getpwuid using ptr? */

#  if (defined(GETPWENT_R_HAS_PTR) || defined(GETPWNAM_R_HAS_PTR) || defined(GETPWUID_R_HAS_PTR))
#    define USE_PWENT_PTR
#  else
#    undef  USE_PWENT_PTR
#  endif

/* The getspent getspnam using ptr? */

#  if defined(HAS_GETSPNAM_R) && (GETSPNAM_R_PROTO == REENTRANT_PROTO_I_CSBWR)
#    define GETSPNAM_R_HAS_PTR
#  else
#    undef  GETSPNAM_R_HAS_PTR
#  endif

/* Any of the getspent getspnam using ptr? */

#  if (defined(GETSPENT_R_HAS_PTR) || defined(GETSPNAM_R_HAS_PTR))
#    define USE_SPENT_PTR
#  else
#    undef  USE_SPENT_PTR
#  endif

/* The getgrent getgrgid getgrnam setgrent endgrent using fptr? */

#  if defined(HAS_GETGRENT_R) && (GETGRENT_R_PROTO == REENTRANT_PROTO_I_SBIH)
#    define GETGRENT_R_HAS_FPTR
#  else
#    undef  GETGRENT_R_HAS_FPTR
#  endif
#  if defined(HAS_SETGRENT_R) && (SETGRENT_R_PROTO == REENTRANT_PROTO_I_H || SETGRENT_R_PROTO == REENTRANT_PROTO_V_H)
#    define SETGRENT_R_HAS_FPTR
#  else
#    undef  SETGRENT_R_HAS_FPTR
#  endif
#  if defined(HAS_ENDGRENT_R) && (ENDGRENT_R_PROTO == REENTRANT_PROTO_I_H || ENDGRENT_R_PROTO == REENTRANT_PROTO_V_H)
#    define ENDGRENT_R_HAS_FPTR
#  else
#    undef  ENDGRENT_R_HAS_FPTR
#  endif

/* Any of the getgrent getgrgid getgrnam setgrent endgrent using fptr? */

#  if (defined(GETGRENT_R_HAS_FPTR) || defined(GETGRGID_R_HAS_FPTR) || defined(GETGRNAM_R_HAS_FPTR) || defined(SETGRENT_R_HAS_FPTR) || defined(ENDGRENT_R_HAS_FPTR))
#    define USE_GRENT_FPTR
#  else
#    undef  USE_GRENT_FPTR
#  endif

/* The getpwent getpwnam getpwuid setpwent endpwent using fptr? */

#  if defined(HAS_GETPWENT_R) && (GETPWENT_R_PROTO == REENTRANT_PROTO_I_SBIH)
#    define GETPWENT_R_HAS_FPTR
#  else
#    undef  GETPWENT_R_HAS_FPTR
#  endif
#  if defined(HAS_SETPWENT_R) && (SETPWENT_R_PROTO == REENTRANT_PROTO_I_H || SETPWENT_R_PROTO == REENTRANT_PROTO_V_H)
#    define SETPWENT_R_HAS_FPTR
#  else
#    undef  SETPWENT_R_HAS_FPTR
#  endif
#  if defined(HAS_ENDPWENT_R) && (ENDPWENT_R_PROTO == REENTRANT_PROTO_I_H || ENDPWENT_R_PROTO == REENTRANT_PROTO_V_H)
#    define ENDPWENT_R_HAS_FPTR
#  else
#    undef  ENDPWENT_R_HAS_FPTR
#  endif

/* Any of the getpwent getpwnam getpwuid setpwent endpwent using fptr? */

#  if (defined(GETPWENT_R_HAS_FPTR) || defined(GETPWNAM_R_HAS_FPTR) || defined(GETPWUID_R_HAS_FPTR) || defined(SETPWENT_R_HAS_FPTR) || defined(ENDPWENT_R_HAS_FPTR))
#    define USE_PWENT_FPTR
#  else
#    undef  USE_PWENT_FPTR
#  endif

/* The getpwent getpwgid getpwnam using buffer? */

#  if defined(HAS_GETPWENT_R) && (GETPWENT_R_PROTO == REENTRANT_PROTO_I_SBWR || GETPWENT_R_PROTO == REENTRANT_PROTO_I_SBIR || GETPWENT_R_PROTO == REENTRANT_PROTO_S_SBW || GETPWENT_R_PROTO == REENTRANT_PROTO_S_SBI || GETPWENT_R_PROTO == REENTRANT_PROTO_I_SBI || GETPWENT_R_PROTO == REENTRANT_PROTO_I_SBIH)
#    define GETPWENT_R_HAS_BUFFER
#  else
#    undef  GETPWENT_R_HAS_BUFFER
#  endif
#  if defined(HAS_GETPWNAM_R) && (GETPWNAM_R_PROTO == REENTRANT_PROTO_I_CSBWR || GETPWNAM_R_PROTO == REENTRANT_PROTO_I_CSBIR || GETPWNAM_R_PROTO == REENTRANT_PROTO_S_CSBI || GETPWNAM_R_PROTO == REENTRANT_PROTO_I_CSBI)
#    define GETPWNAM_R_HAS_BUFFER
#  else
#    undef  GETPWNAM_R_HAS_BUFFER
#  endif

/* Any of the getpwent getpwgid getpwnam using buffer? */

#  if (defined(GETPWENT_R_HAS_BUFFER) || defined(GETPWGID_R_HAS_BUFFER) || defined(GETPWNAM_R_HAS_BUFFER))
#    define USE_PWENT_BUFFER
#  else
#    undef  USE_PWENT_BUFFER
#  endif

/* The getspent getspnam using buffer? */

#  if defined(HAS_GETSPNAM_R) && (GETSPNAM_R_PROTO == REENTRANT_PROTO_I_CSBWR || GETSPNAM_R_PROTO == REENTRANT_PROTO_S_CSBI)
#    define GETSPNAM_R_HAS_BUFFER
#  else
#    undef  GETSPNAM_R_HAS_BUFFER
#  endif

/* Any of the getspent getspnam using buffer? */

#  if (defined(GETSPENT_R_HAS_BUFFER) || defined(GETSPNAM_R_HAS_BUFFER))
#    define USE_SPENT_BUFFER
#  else
#    undef  USE_SPENT_BUFFER
#  endif

/* The gethostent gethostbyaddr gethostbyname using ptr? */

#  if defined(HAS_GETHOSTENT_R) && (GETHOSTENT_R_PROTO == REENTRANT_PROTO_I_SBWRE)
#    define GETHOSTENT_R_HAS_PTR
#  else
#    undef  GETHOSTENT_R_HAS_PTR
#  endif
#  if defined(HAS_GETHOSTBYADDR_R) && (GETHOSTBYADDR_R_PROTO == REENTRANT_PROTO_I_CWISBWRE || GETHOSTBYADDR_R_PROTO == REENTRANT_PROTO_I_TsISBWRE)
#    define GETHOSTBYADDR_R_HAS_PTR
#  else
#    undef  GETHOSTBYADDR_R_HAS_PTR
#  endif
#  if defined(HAS_GETHOSTBYNAME_R) && (GETHOSTBYNAME_R_PROTO == REENTRANT_PROTO_I_CSBWRE)
#    define GETHOSTBYNAME_R_HAS_PTR
#  else
#    undef  GETHOSTBYNAME_R_HAS_PTR
#  endif

/* Any of the gethostent gethostbyaddr gethostbyname using ptr? */

#  if (defined(GETHOSTENT_R_HAS_PTR) || defined(GETHOSTBYADDR_R_HAS_PTR) || defined(GETHOSTBYNAME_R_HAS_PTR))
#    define USE_HOSTENT_PTR
#  else
#    undef  USE_HOSTENT_PTR
#  endif

/* The getnetent getnetbyaddr getnetbyname using ptr? */

#  if defined(HAS_GETNETENT_R) && (GETNETENT_R_PROTO == REENTRANT_PROTO_I_SBWRE)
#    define GETNETENT_R_HAS_PTR
#  else
#    undef  GETNETENT_R_HAS_PTR
#  endif
#  if defined(HAS_GETNETBYADDR_R) && (GETNETBYADDR_R_PROTO == REENTRANT_PROTO_I_UISBWRE || GETNETBYADDR_R_PROTO == REENTRANT_PROTO_I_uISBWRE)
#    define GETNETBYADDR_R_HAS_PTR
#  else
#    undef  GETNETBYADDR_R_HAS_PTR
#  endif
#  if defined(HAS_GETNETBYNAME_R) && (GETNETBYNAME_R_PROTO == REENTRANT_PROTO_I_CSBWRE)
#    define GETNETBYNAME_R_HAS_PTR
#  else
#    undef  GETNETBYNAME_R_HAS_PTR
#  endif

/* Any of the getnetent getnetbyaddr getnetbyname using ptr? */

#  if (defined(GETNETENT_R_HAS_PTR) || defined(GETNETBYADDR_R_HAS_PTR) || defined(GETNETBYNAME_R_HAS_PTR))
#    define USE_NETENT_PTR
#  else
#    undef  USE_NETENT_PTR
#  endif

/* The getprotoent getprotobyname getprotobynumber using ptr? */

#  if defined(HAS_GETPROTOENT_R) && (GETPROTOENT_R_PROTO == REENTRANT_PROTO_I_SBWR)
#    define GETPROTOENT_R_HAS_PTR
#  else
#    undef  GETPROTOENT_R_HAS_PTR
#  endif
#  if defined(HAS_GETPROTOBYNAME_R) && (GETPROTOBYNAME_R_PROTO == REENTRANT_PROTO_I_CSBWR)
#    define GETPROTOBYNAME_R_HAS_PTR
#  else
#    undef  GETPROTOBYNAME_R_HAS_PTR
#  endif
#  if defined(HAS_GETPROTOBYNUMBER_R) && (GETPROTOBYNUMBER_R_PROTO == REENTRANT_PROTO_I_ISBWR)
#    define GETPROTOBYNUMBER_R_HAS_PTR
#  else
#    undef  GETPROTOBYNUMBER_R_HAS_PTR
#  endif

/* Any of the getprotoent getprotobyname getprotobynumber using ptr? */
