	0xE5C,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF3A,
	0xF3E,
	0xF85,
	0xF86,
	0xFD0,
	0xFD5,
	0xFD9,
	0xFDB,
	0x104A,
	0x1050,
	0x10FB,
	0x10FC,
	0x1360,
	0x1369,
	0x1400,
	0x1401,
	0x166E,
	0x166F,
	0x169B,
	0x169D,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17D8,
	0x17DB,
	0x1800,
	0x180B,
	0x1944,
	0x1946,
	0x1A1E,
	0x1A20,
	0x1AA0,
	0x1AA7,
	0x1AA8,
	0x1AAE,
	0x1B5A,
	0x1B61,
	0x1B7D,
	0x1B7F,
	0x1BFC,
	0x1C00,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x1CC0,
	0x1CC8,
	0x1CD3,
	0x1CD4,
	0x2010,
	0x2028,
	0x2030,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x205F,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2CF9,
	0x2CFD,
	0x2CFE,
	0x2D00,
	0x2D70,
	0x2D71,
	0x2E00,
	0x2E2F,
	0x2E30,
	0x2E50,
	0x2E52,
	0x2E5E,
	0x3001,
	0x3004,
	0x3008,
	0x3012,
	0x3014,
	0x3020,
	0x3030,
	0x3031,
	0x303D,
	0x303E,
	0x30A0,
	0x30A1,
	0x30FB,
	0x30FC,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA673,
	0xA674,
	0xA67E,
	0xA67F,
	0xA6F2,
	0xA6F8,
	0xA874,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA8F8,
	0xA8FB,
	0xA8FC,
	0xA8FD,
	0xA92E,
	0xA930,
	0xA95F,
	0xA960,
	0xA9C1,
	0xA9CE,
	0xA9DE,
	0xA9E0,
	0xAA5C,
	0xAA60,
	0xAADE,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFD3E,
	0xFD40,
	0xFE10,
	0xFE1A,
	0xFE30,
	0xFE53,
	0xFE54,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE68,
	0xFE69,
	0xFE6A,
	0xFE6C,
	0xFF01,
	0xFF04,
	0xFF05,
	0xFF0B,
	0xFF0C,
	0xFF10,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF21,
	0xFF3B,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF66,
	0x10100,
	0x10103,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x1056F,
	0x10570,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x1093F,
	0x10940,
	0x10A50,
	0x10A59,
	0x10A7F,
	0x10A80,
	0x10AF0,
	0x10AF7,
	0x10B39,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x10EAD,
	0x10EAE,
	0x10F55,
	0x10F5A,
	0x10F86,
	0x10F8A,
	0x11047,
	0x1104E,
	0x110BB,
	0x110BD,
	0x110BE,
	0x110C2,
	0x11140,
	0x11144,
	0x11174,
	0x11176,
	0x111C5,
	0x111C9,
	0x111CD,
	0x111CE,
	0x111DB,
	0x111DC,
	0x111DD,
	0x111E0,
	0x11238,
	0x1123E,
	0x112A9,
	0x112AA,
	0x1144B,
	0x11450,
	0x1145A,
	0x1145C,
	0x1145D,
	0x1145E,
	0x114C6,
	0x114C7,
	0x115C1,
	0x115D8,
	0x11641,
	0x11644,
	0x11660,
	0x1166D,
	0x116B9,
	0x116BA,
	0x1173C,
	0x1173F,
	0x1183B,
	0x1183C,
	0x11944,
	0x11947,
	0x119E2,
	0x119E3,
	0x11A3F,
	0x11A47,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11AA3,
	0x11B00,
	0x11B0A,
	0x11C41,
	0x11C46,
	0x11C70,
	0x11C72,
	0x11EF7,
	0x11EF9,
	0x11F43,
	0x11F50,
	0x11FFF,
	0x12000,
	0x12470,
	0x12475,
	0x12FF1,
	0x12FF3,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3C,
	0x16B44,
	0x16B45,
	0x16E97,
	0x16E9B,
	0x16FE2,
	0x16FE3,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8C,
	0x1E95E,
	0x1E960
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_XPOSIXSPACE_invlist[] = {  /* for ASCII/Latin1 */
	21,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9,
	0xE,
	0x20,
	0x21,
	0x85,
	0x86,
	0xA0,
	0xA1,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_XPOSIXSPACE_invlist[] = {  /* for EBCDIC 1047 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_XPOSIXSPACE_invlist[] = {  /* for EBCDIC 037 */
	23,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x5,
	0x6,
	0xB,
	0xE,
	0x15,
	0x16,
	0x25,
	0x26,
	0x40,
	0x42,
	0x1680,
	0x1681,
	0x2000,
	0x200B,
	0x2028,
	0x202A,
	0x202F,
	0x2030,
	0x205F,
	0x2060,
	0x3000,
	0x3001
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_XPOSIXUPPER_invlist[] = {  /* for ASCII/Latin1 */
	1303,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x41,
	0x5B,
	0xC0,
	0xD7,
	0xD8,
	0xDF,
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10A,
	0x10B,
	0x10C,
	0x10D,
	0x10E,
	0x10F,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11A,
	0x11B,
	0x11C,
	0x11D,
	0x11E,
	0x11F,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12A,
	0x12B,
	0x12C,
	0x12D,
	0x12E,
	0x12F,
	0x130,
	0x131,
	0x132,
	0x133,
	0x134,
	0x135,
	0x136,
	0x137,
	0x139,
	0x13A,
	0x13B,
	0x13C,
	0x13D,
	0x13E,
	0x13F,
	0x140,
	0x141,
	0x142,
	0x143,
	0x144,
	0x145,
	0x146,
	0x147,
	0x148,
	0x14A,
	0x14B,
	0x14C,
	0x14D,
	0x14E,
	0x14F,
	0x150,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x156,
	0x157,
	0x158,
	0x159,
	0x15A,
	0x15B,
	0x15C,
	0x15D,
	0x15E,
	0x15F,
	0x160,
	0x161,
	0x162,
	0x163,
	0x164,
	0x165,
	0x166,
	0x167,
	0x168,
	0x169,
	0x16A,
	0x16B,
	0x16C,
	0x16D,
	0x16E,
	0x16F,
	0x170,
	0x171,
	0x172,
	0x173,
	0x174,
	0x175,
	0x176,
	0x177,
	0x178,
	0x17A,
	0x17B,
	0x17C,
	0x17D,
	0x17E,
	0x181,
	0x183,
	0x184,
	0x185,
	0x186,
	0x188,
	0x189,
	0x18C,
	0x18E,
	0x192,
	0x193,
	0x195,
	0x196,
	0x199,
	0x19C,
	0x19E,
	0x19F,
	0x1A1,
	0x1A2,
	0x1A3,
	0x1A4,
	0x1A5,
	0x1A6,
	0x1A8,
	0x1A9,
	0x1AA,
	0x1AC,
	0x1AD,
	0x1AE,
	0x1B0,
	0x1B1,
	0x1B4,
	0x1B5,
	0x1B6,
	0x1B7,
	0x1B9,
	0x1BC,
	0x1BD,
	0x1C4,
	0x1C5,
	0x1C7,
	0x1C8,
	0x1CA,
	0x1CB,
	0x1CD,
	0x1CE,
	0x1CF,
	0x1D0,
	0x1D1,
	0x1D2,
	0x1D3,
	0x1D4,
	0x1D5,
	0x1D6,
	0x1D7,
	0x1D8,
	0x1D9,
	0x1DA,
	0x1DB,
	0x1DC,
	0x1DE,
	0x1DF,
	0x1E0,
	0x1E1,
	0x1E2,
	0x1E3,
	0x1E4,
	0x1E5,
	0x1E6,
	0x1E7,
	0x1E8,
	0x1E9,
	0x1EA,
	0x1EB,
	0x1EC,
	0x1ED,
	0x1EE,
	0x1EF,
	0x1F1,
	0x1F2,
	0x1F4,
	0x1F5,
	0x1F6,
	0x1F9,
	0x1FA,
	0x1FB,
	0x1FC,
	0x1FD,
	0x1FE,
	0x1FF,
	0x200,
	0x201,
	0x202,
	0x203,
	0x204,
	0x205,
	0x206,
	0x207,
	0x208,
	0x209,
	0x20A,
	0x20B,
	0x20C,
	0x20D,
	0x20E,
	0x20F,
	0x210,
	0x211,
	0x212,
	0x213,
	0x214,
	0x215,
	0x216,
	0x217,
	0x218,
	0x219,
	0x21A,
	0x21B,
	0x21C,
	0x21D,
	0x21E,
	0x21F,
	0x220,
	0x221,
	0x222,
	0x223,
	0x224,
	0x225,
	0x226,
	0x227,
	0x228,
	0x229,
	0x22A,
	0x22B,
	0x22C,
	0x22D,
	0x22E,
	0x22F,
	0x230,
	0x231,
	0x232,
	0x233,
	0x23A,
	0x23C,
	0x23D,
	0x23F,
	0x241,
	0x242,
	0x243,
	0x247,
	0x248,
	0x249,
	0x24A,
	0x24B,
	0x24C,
	0x24D,
	0x24E,
	0x24F,
	0x370,
	0x371,
	0x372,
	0x373,
	0x376,
	0x377,
	0x37F,
	0x380,
	0x386,
	0x387,
	0x388,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x390,
	0x391,
	0x3A2,
	0x3A3,
	0x3AC,
	0x3CF,
	0x3D0,
	0x3D2,
	0x3D5,
	0x3D8,
	0x3D9,
	0x3DA,
	0x3DB,
	0x3DC,
	0x3DD,
	0x3DE,
	0x3DF,
	0x3E0,
	0x3E1,
	0x3E2,
	0x3E3,
	0x3E4,
	0x3E5,
	0x3E6,
	0x3E7,
	0x3E8,
	0x3E9,
	0x3EA,
	0x3EB,
	0x3EC,
	0x3ED,
	0x3EE,
	0x3EF,
	0x3F4,
	0x3F5,
	0x3F7,
	0x3F8,
	0x3F9,
	0x3FB,
	0x3FD,
	0x430,
	0x460,
	0x461,
	0x462,
	0x463,
	0x464,
	0x465,
	0x466,
	0x467,
	0x468,
	0x469,
	0x46A,
	0x46B,
	0x46C,
	0x46D,
	0x46E,
	0x46F,
	0x470,
	0x471,
	0x472,
	0x473,
	0x474,
	0x475,
	0x476,
	0x477,
	0x478,
	0x479,
	0x47A,
	0x47B,
	0x47C,
	0x47D,
	0x47E,
	0x47F,
	0x480,
	0x481,
	0x48A,
	0x48B,
	0x48C,
	0x48D,
	0x48E,
	0x48F,
	0x490,
	0x491,
	0x492,
	0x493,
	0x494,
	0x495,
	0x496,
	0x497,
	0x498,
	0x499,
	0x49A,
	0x49B,
	0x49C,
	0x49D,
	0x49E,
	0x49F,
	0x4A0,
	0x4A1,
	0x4A2,
	0x4A3,
	0x4A4,
	0x4A5,
	0x4A6,
	0x4A7,
	0x4A8,
	0x4A9,
	0x4AA,
	0x4AB,
	0x4AC,
	0x4AD,
	0x4AE,
	0x4AF,
	0x4B0,
	0x4B1,
	0x4B2,
	0x4B3,
	0x4B4,
	0x4B5,
	0x4B6,
	0x4B7,
	0x4B8,
	0x4B9,
	0x4BA,
	0x4BB,
	0x4BC,
	0x4BD,
	0x4BE,
	0x4BF,
	0x4C0,
	0x4C2,
	0x4C3,
	0x4C4,
	0x4C5,
	0x4C6,
	0x4C7,
	0x4C8,
	0x4C9,
	0x4CA,
	0x4CB,
	0x4CC,
	0x4CD,
	0x4CE,
	0x4D0,
	0x4D1,
	0x4D2,
	0x4D3,
	0x4D4,
	0x4D5,
	0x4D6,
	0x4D7,
	0x4D8,
	0x4D9,
	0x4DA,
	0x4DB,
	0x4DC,
	0x4DD,
	0x4DE,
	0x4DF,
	0x4E0,
	0x4E1,
	0x4E2,
	0x4E3,
	0x4E4,
	0x4E5,
	0x4E6,
	0x4E7,
	0x4E8,
	0x4E9,
	0x4EA,
	0x4EB,
	0x4EC,
	0x4ED,
	0x4EE,
	0x4EF,
	0x4F0,
	0x4F1,
	0x4F2,
	0x4F3,
	0x4F4,
	0x4F5,
	0x4F6,
	0x4F7,
	0x4F8,
	0x4F9,
	0x4FA,
	0x4FB,
	0x4FC,
	0x4FD,
	0x4FE,
	0x4FF,
	0x500,
	0x501,
	0x502,
	0x503,
	0x504,
	0x505,
	0x506,
	0x507,
	0x508,
	0x509,
	0x50A,
	0x50B,
	0x50C,
	0x50D,
	0x50E,
	0x50F,
	0x510,
	0x511,
	0x512,
	0x513,
	0x514,
	0x515,
	0x516,
	0x517,
	0x518,
	0x519,
	0x51A,
	0x51B,
	0x51C,
	0x51D,
	0x51E,
	0x51F,
	0x520,
	0x521,
	0x522,
	0x523,
	0x524,
	0x525,
	0x526,
	0x527,
	0x528,
	0x529,
	0x52A,
	0x52B,
	0x52C,
	0x52D,
	0x52E,
	0x52F,
	0x531,
	0x557,
	0x10A0,
	0x10C6,
	0x10C7,
	0x10C8,
	0x10CD,
	0x10CE,
	0x13A0,
	0x13F6,
	0x1C90,
	0x1CBB,
	0x1CBD,
	0x1CC0,
	0x1E00,
	0x1E01,
	0x1E02,
	0x1E03,
	0x1E04,
	0x1E05,
	0x1E06,
	0x1E07,
	0x1E08,
	0x1E09,
	0x1E0A,
	0x1E0B,
	0x1E0C,
	0x1E0D,
	0x1E0E,
	0x1E0F,
	0x1E10,
	0x1E11,
	0x1E12,
	0x1E13,
	0x1E14,
	0x1E15,
	0x1E16,
	0x1E17,
	0x1E18,
	0x1E19,
	0x1E1A,
	0x1E1B,
	0x1E1C,
	0x1E1D,
	0x1E1E,
