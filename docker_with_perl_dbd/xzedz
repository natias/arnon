            /*  && !DBIc_is(imp_dbh, DBIcf_ReadOnly) -- is not read only */
                && (!PL_dirty || DBIc_DBISTATE(imp_dbh)->debug >= 3)
                ) {
                    warn("Issuing rollback() due to DESTROY without explicit disconnect() of %s handle %s",
                        SvPV_nolen(*hv_fetch((HV*)SvRV(dbh), "ImplementorClass", 16, 1)),
                        SvPV_nolen(*hv_fetch((HV*)SvRV(dbh), "Name", 4, 1))
                    );
                }
                dbd_db_rollback(dbh, imp_dbh);                  /* ROLLBACK! */
            }
            dbd_db_disconnect(dbh, imp_dbh);
            DBIc_ACTIVE_off(imp_dbh);   /* ensure it's off, regardless */
        }
        dbd_db_destroy(dbh, imp_dbh);
    }


#ifdef dbd_take_imp_data

void
take_imp_data(h)
    SV * h
    CODE:
    D_imp_xxh(h);
    /* dbd_take_imp_data() returns &sv_no (or other defined but false value)
     * to indicate "preparations complete, now call SUPER::take_imp_data" for me.
     * Anything else is returned to the caller via sv_2mortal(sv), typically that
     * would be &sv_undef for error or an SV holding the imp_data.
     */
    SV *sv = dbd_take_imp_data(h, imp_xxh, NULL);
    if (SvOK(sv) && !SvTRUE(sv)) {
        SV *tmp = dbixst_bounce_method("DBD::Oracle::db::SUPER::take_imp_data", items);
        SPAGAIN;
        ST(0) = tmp;
    } else {
        ST(0) = sv_2mortal(sv);
    }

#endif

#ifdef dbd_db_data_sources

void
data_sources(dbh, attr = Nullsv)
    SV *dbh
    SV *attr
    PPCODE:
    {
        D_imp_dbh(dbh);
        AV *av = dbd_db_data_sources(dbh, imp_dbh, attr);
        if (av) {
            int i;
            int n = AvFILL(av)+1;
            EXTEND(sp, n);
            for (i = 0; i < n; ++i) {
                PUSHs(AvARRAY(av)[i]);
            }
        }
    }

#endif

# -- end of DBD::Oracle::db

# ------------------------------------------------------------
# statement interface
# ------------------------------------------------------------
MODULE = DBD::Oracle    PACKAGE = DBD::Oracle::st


bool
_prepare(sth, statement, attribs=Nullsv)
    SV *        sth
    SV *        statement
    SV *        attribs
    CODE:
    {
    D_imp_sth(sth);
    DBD_ATTRIBS_CHECK("_prepare", sth, attribs);
#ifdef dbd_st_prepare_sv
    RETVAL = dbd_st_prepare_sv(sth, imp_sth, statement, attribs);
#else
    RETVAL = dbd_st_prepare(sth, imp_sth, SvPV_nolen(statement), attribs);
#endif
    }
    OUTPUT:
    RETVAL


#ifdef dbd_st_rows

void
rows(sth)
    SV *        sth
    CODE:
    D_imp_sth(sth);
    XST_mIV(0, dbd_st_rows(sth, imp_sth));

#endif /* dbd_st_rows */


#ifdef dbd_st_bind_col

bool
bind_col(sth, col, ref, attribs=Nullsv)
    SV *        sth
    SV *        col
    SV *        ref
    SV *        attribs
    CODE:
    {
    IV sql_type = 0;
    D_imp_sth(sth);
    if (SvGMAGICAL(ref))
        mg_get(ref);
    if (attribs) {
        if (SvNIOK(attribs)) {
            sql_type = SvIV(attribs);
            attribs = Nullsv;
        }
        else {
            SV **svp;
            DBD_ATTRIBS_CHECK("bind_col", sth, attribs);
            /* XXX we should perhaps complain if TYPE is not SvNIOK */
            DBD_ATTRIB_GET_IV(attribs, "TYPE",4, svp, sql_type);
        }
    }
    switch(dbd_st_bind_col(sth, imp_sth, col, ref, sql_type, attribs)) {
    case 2:     RETVAL = TRUE;              /* job done completely */
                break;
    case 1:     /* fallback to DBI default */
                RETVAL = DBIc_DBISTATE(imp_sth)->bind_col(sth, col, ref, attribs);
                break;
    default:    RETVAL = FALSE;             /* dbd_st_bind_col has called set_err */
                break;
    }
    }
    OUTPUT:
    RETVAL

#endif /* dbd_st_bind_col */

bool
bind_param(sth, param, value, attribs=Nullsv)
    SV *        sth
    SV *        param
    SV *        value
    SV *        attribs
    CODE:
    {
    IV sql_type = 0;
    D_imp_sth(sth);
    if (SvGMAGICAL(value))
        mg_get(value);
    if (attribs) {
        if (SvNIOK(attribs)) {
            sql_type = SvIV(attribs);
            attribs = Nullsv;
        }
        else {
            SV **svp;
            DBD_ATTRIBS_CHECK("bind_param", sth, attribs);
            /* XXX we should perhaps complain if TYPE is not SvNIOK */
            DBD_ATTRIB_GET_IV(attribs, "TYPE",4, svp, sql_type);
        }
    }
    RETVAL = dbd_bind_ph(sth, imp_sth, param, value, sql_type, attribs, FALSE, 0);
    }
    OUTPUT:
    RETVAL


bool
bind_param_inout(sth, param, value_ref, maxlen, attribs=Nullsv)
    SV *        sth
    SV *        param
    SV *        value_ref
    IV          maxlen
    SV *        attribs
    CODE:
    {
    IV sql_type = 0;
    D_imp_sth(sth);
    SV *value;
    if (!SvROK(value_ref) || SvTYPE(SvRV(value_ref)) > SVt_PVMG)
        croak("bind_param_inout needs a reference to a scalar value");
    value = SvRV(value_ref);
    if (SvREADONLY(value))
        croak("Modification of a read-only value attempted");
    if (SvGMAGICAL(value))
        mg_get(value);
    if (attribs) {
        if (SvNIOK(attribs)) {
            sql_type = SvIV(attribs);
            attribs = Nullsv;
        }
        else {
            SV **svp;
            DBD_ATTRIBS_CHECK("bind_param", sth, attribs);
            DBD_ATTRIB_GET_IV(attribs, "TYPE",4, svp, sql_type);
        }
    }
    RETVAL = dbd_bind_ph(sth, imp_sth, param, value, sql_type, attribs, TRUE, maxlen);
    }
    OUTPUT:
    RETVAL


void
execute(sth, ...)
    SV *        sth
    CODE:
    D_imp_sth(sth);
    IV retval;
    if (items > 1) {    /* need to bind params */
        if (!dbdxst_bind_params(sth, imp_sth, items, ax) ) {
            XSRETURN_UNDEF;
        }
    }
    /* XXX this code is duplicated in selectrow_arrayref above  */
    DBIc_ROW_COUNT(imp_sth) = 0;
    retval = dbd_st_execute(sth, imp_sth); /* might be dbd_st_execute_iv via macro */
    /* remember that dbd_st_execute must return <= -2 for error */
    if (retval == 0)            /* ok with no rows affected     */
        XST_mPV(0, "0E0");      /* (true but zero)              */
    else if (retval < -1)       /* -1 == unknown number of rows */
        XST_mUNDEF(0);          /* <= -2 means error            */
    else
        XST_mIV(0, retval);     /* typically 1, rowcount or -1  */


#ifdef dbd_st_execute_for_fetch

void
execute_for_fetch(sth, fetch_tuple_sub, tuple_status = Nullsv)
    SV *        sth
    SV *        fetch_tuple_sub
    SV *        tuple_status
    CODE:
    {
    D_imp_sth(sth);
    SV *ret = dbd_st_execute_for_fetch(sth, imp_sth, fetch_tuple_sub, tuple_status);
    ST(0) = ret;
    }

#endif


#ifdef dbd_st_last_insert_id

void
last_insert_id(sth, catalog=&PL_sv_undef, schema=&PL_sv_undef, table=&PL_sv_undef, field=&PL_sv_undef, attr=Nullsv)
    SV *        sth
    SV *        catalog
    SV *        schema
    SV *        table
    SV *        field
    SV *        attr
    CODE:
    {
    D_imp_sth(sth);
    SV *ret = dbd_st_last_insert_id(sth, imp_sth, catalog, schema, table, field, attr);
    ST(0) = ret;
    }

#endif


void
fetchrow_arrayref(sth)
    SV *        sth
    ALIAS:
        fetch = 1
    CODE:
    D_imp_sth(sth);
    AV *av;
    PERL_UNUSED_VAR(ix);
    av = dbd_st_fetch(sth, imp_sth);
    ST(0) = (av) ? sv_2mortal(newRV((SV *)av)) : &PL_sv_undef;


void
fetchrow_array(sth)
    SV *        sth
    ALIAS:
        fetchrow = 1
    PPCODE:
    D_imp_sth(sth);
    AV *av;
    av = dbd_st_fetch(sth, imp_sth);
    if (av) {
        int i;
        int num_fields = AvFILL(av)+1;
        EXTEND(sp, num_fields);
        for(i=0; i < num_fields; ++i) {
            PUSHs(AvARRAY(av)[i]);
        }
        PERL_UNUSED_VAR(ix);
    }


void
fetchall_arrayref(sth, slice=&PL_sv_undef, batch_row_count=&PL_sv_undef)
    SV *        sth
    SV *        slice
    SV *        batch_row_count
    CODE:
    if (SvOK(slice)) {  /* fallback to perl implementation */
        SV *tmp = dbixst_bounce_method("DBD::Oracle::st::SUPER::fetchall_arrayref", 3);
        SPAGAIN;
        ST(0) = tmp;
    }
    else {
        SV *tmp = dbdxst_fetchall_arrayref(sth, slice, batch_row_count);
        SPAGAIN;
        ST(0) = tmp;
    }


bool
finish(sth)
    SV *        sth
    CODE:
    D_imp_sth(sth);
    D_imp_dbh_from_sth;
    if (!DBIc_ACTIVE(imp_sth)) {
        /* No active statement to finish        */
        XSRETURN_YES;
    }
    if (!DBIc_ACTIVE(imp_dbh)) {
        /* Either an explicit disconnect() or global destruction        */
        /* has disconnected us from the database. Finish is meaningless */
        DBIc_ACTIVE_off(imp_sth);
        XSRETURN_YES;
    }
#ifdef dbd_st_finish3
    RETVAL = dbd_st_finish3(sth, imp_sth, 0);
#else
    RETVAL = dbd_st_finish(sth, imp_sth);
#endif
    OUTPUT:
    RETVAL


void
blob_read(sth, field, offset, len, destrv=Nullsv, destoffset=0)
    SV *        sth
    int field
    long        offset
    long        len
    SV *        destrv
    long        destoffset
    CODE:
    {
    D_imp_sth(sth);
    if (!destrv)
        destrv = sv_2mortal(newRV(sv_2mortal(newSV(0))));
    if (dbd_st_blob_read(sth, imp_sth, field, offset, len, destrv, destoffset))
         ST(0) = SvRV(destrv);
    else ST(0) = &PL_sv_undef;
    }


void
STORE(sth, keysv, valuesv)
    SV *        sth
    SV *        keysv
    SV *        valuesv
    CODE:
    D_imp_sth(sth);
    if (SvGMAGICAL(valuesv))
        mg_get(valuesv);
    ST(0) = &PL_sv_yes;
    if (!dbd_st_STORE_attrib(sth, imp_sth, keysv, valuesv))
        if (!DBIc_DBISTATE(imp_sth)->set_attr(sth, keysv, valuesv))
            ST(0) = &PL_sv_no;


# FETCH renamed and ALIAS'd to avoid case clash on VMS :-(
void
FETCH_attrib(sth, keysv)
    SV *        sth
    SV *        keysv
    ALIAS:
    FETCH = 1
    CODE:
    D_imp_sth(sth);
    SV *valuesv;
    PERL_UNUSED_VAR(ix);
    valuesv = dbd_st_FETCH_attrib(sth, imp_sth, keysv);
    if (!valuesv)
        valuesv = DBIc_DBISTATE(imp_sth)->get_attr(sth, keysv);
    ST(0) = valuesv;    /* dbd_st_FETCH_attrib did sv_2mortal   */


void
DESTROY(sth)
    SV *        sth
    PPCODE:
    /* keep in sync with default DESTROY in DBI.xs */
    D_imp_sth(sth);
    ST(0) = &PL_sv_yes;
    if (!DBIc_IMPSET(imp_sth)) {        /* was never fully set up       */
        STRLEN lna;
        if (DBIc_WARN(imp_sth) && !PL_dirty && DBIc_DBISTATE(imp_sth)->debug >= 2)
             PerlIO_printf(DBIc_LOGPIO(imp_sth),
                "         DESTROY for %s ignored - handle not initialised\n",
                    SvPV(sth,lna));
    }
    else {
        if (DBIc_IADESTROY(imp_sth)) {  /* wants ineffective destroy    */
            DBIc_ACTIVE_off(imp_sth);
            if (DBIc_DBISTATE(imp_sth)->debug)
                 PerlIO_printf(DBIc_LOGPIO(imp_sth), "         DESTROY %s skipped due to InactiveDestroy\n", SvPV_nolen(sth));
        }
        if (DBIc_ACTIVE(imp_sth)) {
            D_imp_dbh_from_sth;
            if (!PL_dirty && DBIc_ACTIVE(imp_dbh)) {
#ifdef dbd_st_finish3
                dbd_st_finish3(sth, imp_sth, 1);
#else
                dbd_st_finish(sth, imp_sth);
#endif
            }
            else {
                DBIc_ACTIVE_off(imp_sth);
            }
        }
        dbd_st_destroy(sth, imp_sth);
    }

# end of Oracle.xst
# vim:ts=8:sw=4:et
                                                                                                                                                                                                                    root/.cpan/build/DBD-Oracle-1.90-0/README                                                           0000644 0001750 0001750 00000025371 14616324562 015576  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        
DBD::Oracle  --  an Oracle interface for Perl 5.

   Copyright (c) 1994-2024  Tim Bunce, et. al.

   See the COPYRIGHT section in the Oracle.pm file for terms.
   See also the MAINTAINER section in the Oracle.pm

   PLEASE READ THE ENTIRE README FILE CAREFULLY !

   AND THEN READ ANY TROUBLESHOOTING POD FILES RELEVANT TO YOUR PLATFORM:

        DBD::Oracle::Troubleshooting - General Tips
        DBD::Oracle::Troubleshooting::Aix - AIX
        DBD::Oracle::Troubleshooting::Cygwin - MS Windows using GCC
        DBD::Oracle::Troubleshooting::Hpux - HP-UX
        DBD::Oracle::Troubleshooting::Linux - Linux
        DBD::Oracle::Troubleshooting::Macos - Mac OS
        DBD::Oracle::Troubleshooting::Sun - Sun
        DBD::Oracle::Troubleshooting::Vms - OpenVMS
        DBD::Oracle::Troubleshooting::Win32 - MS Windows (32bit)
        DBD::Oracle::Troubleshooting::Win64 - MS Windows (64bit)
        DBD::Oracle::Troubleshooting::* - see if there's a file for your platform

        DBD::Oracle::Troubleshooting::java.txt - Java/thread problem on Solaris

   You may find these useful

        README.help.txt - Help and hints on build problems

*** QUICK START GUIDE:

    The DBI requires one or more 'driver' modules to talk to databases.
    Fetch, build and install the DBI module as per its README file.
    You may then delete its source directory tree since it's no longer needed.
    Use the 'perldoc DBI' command to read the DBI documentation.

    Fetch this DBD::Oracle driver module and unpack it.
    Follow the guidelines in this README file carefully.


*** *BEFORE* BUILDING, TESTING AND INSTALLING DBD::Oracle:

    Build, test and install Perl 5 (at least 5.6.1)
    It is very important to TEST it and INSTALL it!

    Build, test and install the DBI module (at least DBI 1.623).
    It is very important to TEST it and INSTALL it!

    Remember to *read* the DBI README file and this one CAREFULLY!

    Install enough Oracle software to enable DBD::Oracle to build.

    For Oracle Instant Client: that means install the following packages:
        * The "Basic" package for the essential Oracle libraries.
        * The "SDK" package for the headers and makefile.
        * The "SQL*Plus" component is optional, but will help you check
          your configuration and DBD::Oracle determine your Oracle version.

    For full Oracle installs: that usually includes Pro*C and SQL*Net.
    (That's not very specific because it varies between Oracle releases.).
    As of release 1.22 support of Oracle clients before 9 was dropped.
    The main reason for this is that next few versions of DBD::Oracle will
    introduce a number of new features which will required a great deal of extra
    coding to make the OCI 8 work.

    As well it is getting harder to find an Oracle client 8 to test against as
    well Oracle no longer supports clients before 9.

    The ORACLE_HOME environment variable must point to the Oracle Home
    used to create DBD::Oracle. (Not essential under MS Windows).

*** MOST IMPORTANTLY:

    Make sure Oracle is working and you can use the Oracle sqlplus
    command to talk to the database from the machine you
    want to build DBD::Oracle on. This often involves setting
    environment variables like PATH, LD_LIBRARY_PATH, TWO_TASK etc.
    Consult Oracle documentation for more details.

    Only once you can connect to Oracle using sqlplus
    should you try building and testing DBD::Oracle.

*** BUILDING:

Execute:

    perl Makefile.PL            # use a perl that's in your PATH

Use the perl that is first on your PATH. Then execute:

    make

If you get an error like "make: not found" you need to find the
directory that has the make command installed in it (e.g. /usr/ccs/bin
on Solaris) and add that to your PATH environment variable.

Don't worry about most warnings when make runs, specifically ones like
"end-of-loop code not reached", "... due to prototype",
"cast increases required alignment of target type", etc.

If you have problems see the 'IF YOU HAVE PROBLEMS' section below.
If it builds without error you should then run 'make test'. For the
main tests to work they must be able to connect to an Oracle database.

The tests default to using a DSN of "dbi:Oracle:" which means you'll be
connected to the default database based on your TWO_TASK or ORACLE_SID
environment variables. This default can be altered either by defining the
ORACLE_DSN environment variable or the DBI_DSN environment variable.
See the oracle_test_dsn() sub in t/nchar_test_lib.pl

The supplied tests will connect to the database using the value of the
ORACLE_USERID environment variable to supply the username/password.
So you should set that to a valid user (e.g. 'scott/tiger') and ensure that
this user has sufficient privileges to create, insert into, select from and
drop a table,  is also able to create, call and drop a procedure  and is able
to select from systemtables like 'v$sessions'. Using 'system/manager' might
work but is not recommended! See also README.login.txt and TESTING.md.

Run tests with:

    make test

If the all the formal tests pass then, finally, run:

    make install


*** IF YOU HAVE PROBLEMS:

Make sure you are using a recent perl (5.6.1 or later) and make
sure it's on your PATH so you can say 'perl Makefile.PL' and not
'/path/to/perl Makefile.PL'.

If you get compiler errors refering to Perl's own header files
(.../CORE/*.h) then there is something wrong with your installation.
It is important to use a Perl that was built on the system you are using.
It's also important to use the same compiler that was used to build the
Perl you are using.

If you have build/link or core dump problems try:
        perl Makefile.PL -p
or
        perl Makefile.PL -nob
If it helps then please let me know (and please include a copy
of the log from the failed default build, the log from the build that
worked, plus the output of the "perl -V" command).

Do not hand edit the generated Makefile unless you are completely sure
you understand the implications! Always try to make changes via the
Makefile.PL command line and/or editing the Makefile.PL.
You should not need to make any changes. If you do please let us
know so that I can try to make it automatic in a later release.

If you just can't login or login takes a long time then read
README.login.txt

If you have linking problems (errors related to libraries or functions)
then you could try forcing a 'static' build using:

  make realclean
  perl Makefile.PL LINKTYPE=static
  make
  make perl       (you'll need to use and install _this_ new perl binary)
  make test
  make -f Makefile.aperl inst_perl MAP_TARGET=perl  (install new perl)
  make install                                      (install DBD::Oracle)

But that's not recommended these days.

>>> Also carefully read the README.help.txt file which is full of useful
>>> tips and workarounds for various problems of various systems.


*** HOW TO REPORT PROBLEMS

This software is supported via the dbi-users@perl.org mailing list.
(You don't need to subscribe to the list in order to post.)

Please do NOT post problems to comp.lang.perl.*, perl5-porters@perl.org,
http://www.cpanforum.com/dist/DBD-Oracle, or google groups etc.

If you're *sure* the problem is a bug then you can post a bug report
to https://github.com/perl5-dbi/DBD-Oracle/issues
Problem reports that don't include sufficient detail (including the
information listed below and how to reproduce the problem)
are unlikely to get resolved.

For more information and to keep informed about progress you can join the
mailing list. Send a message to dbi-users-help@perl.org for more information.

Please post details of any problems (or changes you needed to make) to
dbi-users@perl.org.


** IT IS IMPORTANT TO INCLUDE *ALL* THE FOLLOWING INFORMATION:

1. A complete log of all steps of the build, e.g.:

    (do a make realclean first)
    perl Makefile.PL
    make
    make test

    Make sure to include the 'stderr' output. The best way to do this is
    to use the "script" command (man script). If that's not available
    then "command > command.log 2>&1" (assuming you're not using csh).
    The "2>&1" is required (after the stdout redirect) to redirect stderr
    to the same place.

    If a test fails then also include the output of:

    perl -Mblib t/<name-of-failed-test>.t

2. Full details of which version of Oracle client and server you're using
   (if it wasn't automatically found and printed by "perl Makefile.PL")

3. The output of perl -V       (that's a capital V, not lowercase)

4. If you get errors like "undefined symbol", "symbol not found",
   "undefined reference", "Text relocation remains" or any similar
   error then include the output of "perl Makefile.PL -s XXX"
   where XXX is the name of one of the symbols.
   Please don't send the entire output of this command,
   just any obviously 'interesting' parts (if there are any).
   See also the LINKTYPE=static notes above.

5. If you get a core dump, rebuild DBD::Oracle with debugging
   enabled by executing: perl Makefile.PL -g  (note the -g option)
   then rerun the code to get a new core dump file, finally use a
   debugger (gdb, sdb, dbx, adb etc) to get a stack trace from it.
   NOTE: I may not be able to help you much without a stack trace!
   It is worth fetching and building the GNU GDB debugger (>=4.15) if
   you don't have a good debugger on your system. If desperate try:
     make perl; ./perl script; echo '$c' | adb ./perl core
   Also see the Devel::CoreStack module on CPAN.

6. If the stack trace mentions XS_DynaLoader_dl_load_file then rerun
   make test after setting the environment variable PERL_DL_DEBUG to 2.

7. If your installation succeeds, but your script does not behave
   as you expect, the problem may be on your end. Before
   sending to dbi-users, try writing a *small*, easy to use test case
   to reproduce your problem. Also, use the DBI->trace method to
   trace your database calls.

It is important to check that you are using the latest version before
posting. If you're not then you're *very* likely to be told "upgrade to
the latest". You would do yourself a favour by upgrading beforehand.

Try to help yourself first, then try to help others help you by following
these guidelines carefully.  And remember, please don't mail developers
directly - use the dbi-users mailing list.

Regards,
Tim.

================================================================================
Examples and other info:

README.help.txt     -- READ IT FIRST IF YOU HAVE ANY PROBLEMS
DBD::Oracle::Troubleshooting::* -- Various platform specific info

DBI 'home page': http://dbi.perl.org

DBI and DBD::Oracle are very portable. If Perl and Oracle run on a platform
then the chances are that DBD::Oracle will as well.

================================================================================

See the large README.help.txt file for lots of hints and advice
about building and runtime issues.

End.

                                                                                                                                                                                                                                                                       root/.cpan/build/DBD-Oracle-1.90-0/README.help.txt                                                  0000644 0001750 0001750 00000031761 14616324562 017343  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        ===============================================================================
Platform or Oracle Version specific notes, hints, tips etc:

Note that although some of these refer to specific systems and versions the
same or similar problems may exist on other systems or versions.

Most of this mess is due to Oracle's fondness for changing the
build/link process for OCI applications between versions.


-------------------------------------------------------------------------------
AIX 4 - core dump on login and similar problems

set
        cc='xlc_r'
in config.sh. Rebuild everything, and make sure xlc_r is used everywhere.
set environment
        ORACCENV='cc=xlc_r'; export ORACCENV
to enforce this in oraxlc

Thanks to Goran Thyni <goran@bildbasen.kiruna.se> for this information.

-------------------------------------------------------------------------------
AIX - core dump on disconnect (SIGILL signal)

Try setting BEQUEATH_DETACH=YES in SQLNET.ORA and restarting Oracle instance.
See 'Hang during "repetitive connect/open/close/disconnect" test' below.

-------------------------------------------------------------------------------
HP-UX: General

Read README.hpux.txt. Then read it again.

HP's bundled C compiler is dumb. Very dumb. You're almost bound to have
problems if you use it - you'll certainly need to do a 'static link'
(see elsewhere). It is recommended that you use HP's ANSI C compiler
(which costs) or fetch and build the free GNU GCC compiler (v2.7.2.2 or later).

Note that using shared libraries on HP-UX 10.10 (and others?) requires
patch 441647. With thanks to John Liptak <jliptak@coefmd3.uswc.uswest.com>.

-------------------------------------------------------------------------------
HP-UX: Terry Greenlaw <z50816@mip.lasc.lockheed.com>

I traced a problem with "ld: Invalid loader fixup needed" to the file
libocic.a. On HP-UX 9 it contains position-dependant code and cannot be
used to generate dynamic load libraries. The only shared library that
Oracle ships under HP-UX is liboracle.sl which replaces libxa.a,
libsql.a, libora.a, libcvg.a, and libnlsrtl.a. The OCI stuff still
appears to only link statically under HU-UX 9.x [10.x seems okay].

You'll need to build DBD::Oracle statically linked into the perl binary.
See the static linking notes below.

If you get an error like: Bad magic number for shared library: Oracle.a
You'll need to build DBD::Oracle statically linked into the perl binary.

HP-UX 10 and Oracle 7.2.x do work together when creating dynamic libraries.
The problem was older Oracle libraries were built without the +z flag to cc,
and were therefore position-dependent libraries that can't be linked
dynamically. Newer Oracle releases don't have this problem and it may be
possible to even use the newer Oracle libraries under HP-UX 9. Oracle 7.3
will ONLY work under HP-UX 10, however.

HP-UX 10 and Oracle 7.3.x seem to have problems. You'll probably need
to build DBD::Oracle statically linked (see below).  The problem seems
to be related to Oracle's own shared library code trying to do a
dynamic load (from lxfgno() in libnlsrtl3.a or libclntsh.sl).  If you
get core dumps on login try uncommenting the /* #define signed */ line
in dbdimp.h as a long-shot. Please let me know if this fixes it for you
(but I doubt it will).

-------------------------------------------------------------------------------
For platforms which require static linking.

You'll need to build DBD::Oracle statically linked and then link it
into a perl binary:

        perl Makefile.PL LINKTYPE=static
        make
        make perl                  (makes a perl binary in current directory)
        make test FULLPERL=./perl  (run tests using the new perl binary)
        make install

You will probably need to have already built and installed a static
version of the DBI in order that it be automatically included when
you do the 'make perl' above.

Remember that you must use this new perl binary to access Oracle.

-------------------------------------------------------------------------------
Error: Can't find loadable object for module DBD::Oracle in @INC ...

You probably built DBD::Oracle for static linking rather than dynamic
linking.  See 'For platforms which require static linking' above for
more info.  If your platform supports dynamic linking then try to work
out why DBD::Oracle got built for static linking.

-------------------------------------------------------------------------------
Error: Syntax warnings/errors relating to 'signed'

Remove the /* and */ surrounding the '/* #define signed */' line in dbdimp.h

-------------------------------------------------------------------------------
ORA-00900: invalid SQL statement "begin ... end"

You probably don't have PL/SQL Oracle properly/fully installed.

-------------------------------------------------------------------------------
Connection/Login slow. Takes a long time and may coredump

Oracle bug number: 227321 related to changing the environment before
connecting to oracle. Reported to be fixed in 7.1.6 (or by patch 353611).

To work around this bug, do not set any environment variables in your
oraperl script before you call ora_login, and when you do call
ora_login, the first argument must be the empty string.  This means
that you have to be sure that your environment variables ORACLE_SID
and ORACLE_HOME are set properly before you execute any oraperl
script.  It is probably also possible to pass the SID to ora_login as
part of the username (for example, ora_login("", "SCOTT/TIGER@PROD",
"")), although I have not tested this.
This workaround is based on information from Kevin Stock.

Also check $ORACLE_HOME/otrace/admin. If it contains big *.dat files
then you may have otrace enabled.  Try setting EPC_DISABLED=TRUE
in the environment of the database and listener before they're started.
Oracle 7.3.2.2.0 sets this to FALSE by default, which turns on tracing
of all SQL statements, and will cause very slow connects once that
trace file gets big. You can also add (ENVS='EPC_DISABLED=TRUE') to
the SID_DESC part of listener.ora entries. (With thanks to Johan
Verbrugghen jverbrug@be.oracle.com)

-------------------------------------------------------------------------------
Connection/Login takes a long time

Try connect('', 'user/passwd@tnsname', '').  See README.login.txt and
item above.

-------------------------------------------------------------------------------
Error: ORA-00604: error occurred at recursive SQL level  (DBD: login failed)

This can happen if TWO_TASK is defined but you connect using ORACLE_SID.

-------------------------------------------------------------------------------
Error: ld: Undefined symbols _environ _dlopen _dlclose ...
Environment:  SunOS 4.1.3, Oracle 7.1.6  Steve Livingston <mouche@hometown.com>

If you get link errors like: ld: Undefined symbols _environ _dlopen _dlclose ...
and the link command line includes '-L/usr/5lib -lc' then comment out the
'CLIBS= $(OTHERLIBS) -L/usr/5lib -lc' line in the Makefile.

-------------------------------------------------------------------------------
Error: fatal: relocation error: symbol not found: main
Environment:  Solaris, GCC

Do not use GNU as or GNU ld on Solaris. Delete or rename them, they are
just bad news.  In the words of John D Groenveld <groenvel@cse.psu.edu>:
Run, don't walk, to your console and 'mv /opt/gnu/bin/as /opt/gnu/bin/gas;
mv /opt/gnu/bin/ld /opt/gnu/bin/gld'. You can add -v to the gcc command
in the Makefile to see what GCC is using.

-------------------------------------------------------------------------------
Error: relocation error:symbol not found:setitimer
Environment:  SVR4, stephen.zander@mckesson.com

Error: can't load ./blib/arch/auto/DBD/Oracle/Oracle.so for module DBD::Oracle:
DynamicLinker:/usr/local/bin/perl:relocation error:symbol not found:setitimer
Fix: Try adding the '-lc' to $ORACLE_HOME/rdbms/lib/sysliblist (just
make sure it's not on a new line).

-------------------------------------------------------------------------------
Error: relocation error:symbol not found:mutex_init
Environment:  UnixWare 7.x, earle.nietzel@es.unisys.com

On the UnixWare 7.x platform the compiler flag -Kthread is commonly used
when compiling for mulithread however in this case you should use -lthread.
The compiler will complain that you should be using -Kthread and not
-lthread, you should ignore these messages. Besure to check this compiler
flag in $ORACLE_HOME/lib/sysliblist also.

-------------------------------------------------------------------------------
Error: Undefined symbols __cg92_used at link time.
Environment:  Solaris, GCC

Fix: If you're compiling Oracle applications with gcc on Solaris you need to
link with a file called $ORACLE_HOME/lib/__fstd.o. If you compile with the
SparcWorks compiler you need to add the command line option on -xcg92
to resolve these symbol problems cleanly.

Alligator Descartes <descarte@hermetica.com>

-------------------------------------------------------------------------------
Environment:  SunOS 4.1.3, Oracle 7.1.3  John Carlson <carlson@tis.llnl.gov>

Problem:  oraperl and DBD::Oracle fail to link.  Some messing around with
the library order makes the link succeed.  Now I get a "Bad free()" when
ora_logoff is called.

Solution:
In my case, this was caused by a faulty oracle install.  The install grabbed
the wrong version of mergelib (The X11R6 one) instead of the one in
$ORACLE_HOME/bin.  Try a more limited path and reinstall Oracle again.

-------------------------------------------------------------------------------
Environment: SGI IRIX

From Dennis Box <dbox@fndapl.fnal.gov>:

Details instructions are available from http://misdev.fnal.gov/~dbox/n32/
(To build IRIX n32 format using the Oracle n32 toolkit.)

From Mark Duffield <duffield@ariad.com>:  (possibly now out of date)

Oracle only supports "-32" and "-mips2" compilation flags, not "-n32".
Configure and build perl with -32 flag (see perl hints/irix_6.sh file
in the perl distribution).
Rebuild DBI (which will now use the -32 flag).
Rebuild DBD::Oracle (which will now use the -32 flag).

Since IRIX depends on the perl executable in /usr/sbin, you'll have to
keep it around along with the one you just built.  Some care will need
to be taken to make sure that you are getting the right perl, either
through explicitly running the perl you want, or with a file header in
your perl file.  The file header is probably the better solution of the two.

In summary, until Oracle provides support for either the "-n32" or the "-64"
compiler switches, you'll have to have a perl, DBI, and DBD-Oracle which are
compiled and linked "-32".  I understand that Oracle is working on a 64bit
versions of V7.3.3 for SGI (or MIPS ABI as they call it), but I don't have
any firm dates.

You may also need to use perl Makefile.PL -p.

-------------------------------------------------------------------------------
Environment:  64-bit platforms (DEC Alpha, OSF, SGI/IRIX64 v6.4)

Problem: 0 ORA-00000: normal, successful completion

Solution: Add '#define A_OSF' to Oracle.h above '#include <oratypes.h>' and
complain to Oracle about bugs in their header files on 64 bit systems.

-------------------------------------------------------------------------------
Link errors or test core dumps

Try each of these in turn (follow each with a make && make test):
        perl Makefile.PL -nob
        perl Makefile.PL -c
        perl Makefile.PL -l
        perl Makefile.PL -n LIBCLNTSH
let me know if any of these help.

===============================================================================
Hang during "repetitive connect/open/close/disconnect" test:

From: "Alexi S. Lookin" <aslookin@alfabank.ru>

In short,  this problem was solved after addition of parameter
BEQUEATH_DETACH=YES in SQLNET.ORA and restarting Oracle instance.

Browsed Net8 doc (A67440-01 Net8 Admin Guide for Oracle 8.1.5,
Feb.1999) and found some mention of inadequate bequeath behaviour when
disconnecting bequeath session, and some solution for this problem at
page 10-15 (may vary at any other release) :

"p.10-15
Child Process Termination

Since the client application spawns a server process internally through
the Bequeath protocol as a child process, the client application
becomes responsible for cleaning up the child process when it
completes. When the server process completes its connection
responsibilities, it becomes a defunct process. Signal handlers are
responsible for cleaning up these defunct processes. Alternatively, you
may configure your client SQLNET.ORA file to pass this process to the
UNIX init process by disabling signal handlers.

Use the Net8 Assistant to configure a client to disable the UNIX signal
handler. The SQLNET.ORA parameter set to disable is as follows:
    bequeath_detach=yes

This parameter causes all child processes to be passed over to the UNIX
init process (pid = 1). The init process automatically checks for
"defunct" child processes and terminates them.

Bequeath automatically chooses to use a signal handler in tracking
child process status changes. If your application does not use any
signal handling, then this default does not affect you."

===============================================================================

End.
