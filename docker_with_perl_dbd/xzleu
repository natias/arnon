value, unlike plain C language blocks.  This can present optimization
possibilities, B<BUT>, unless you know for sure that this will never be
compiled without this extension being available and not forbidden, you need to
specify an alternative.  Thus two code paths have to be maintained, which can
get out-of-sync.  All these issues are solved by using a C<static inline>
function instead.

Perl can be configured to not use this feature by passing the parameter
C<-Accflags=-DPERL_GCC_BRACE_GROUPS_FORBIDDEN> to F<Configure>.

=over 3

 #ifdef  PERL_USE_GCC_BRACE_GROUPS

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<PHOSTNAME>
X<PHOSTNAME>

This symbol, if defined, indicates the command to feed to the
C<popen()> routine to derive the host name.  See also C<L</HAS_GETHOSTNAME>>
and C<L</HAS_UNAME>>.  Note that the command uses a fully qualified path,
so that it is safe even if used by a process with super-user
privileges.

=back

=for hackers
Found in file config.h

=over 4

=item C<PROCSELFEXE_PATH>
X<PROCSELFEXE_PATH>

If C<HAS_PROCSELFEXE> is defined this symbol is the filename
of the symbolic link pointing to the absolute pathname of
the executing program.

=back

=for hackers
Found in file config.h

=over 4

=item C<PTRSIZE>
X<PTRSIZE>

This symbol contains the size of a pointer, so that the C preprocessor
can make decisions based on it.  It will be C<sizeof(void *)> if
the compiler supports (void *); otherwise it will be
C<sizeof(char *)>.

=back

=for hackers
Found in file config.h

=over 4

=item C<RANDBITS>
X<RANDBITS>

This symbol indicates how many bits are produced by the
function used to generate normalized random numbers.
Values include 15, 16, 31, and 48.

=back

=for hackers
Found in file config.h

=over 4

=item C<SELECT_MIN_BITS>
X<SELECT_MIN_BITS>

This symbol holds the minimum number of bits operated by select.
That is, if you do C<select(n, ...)>, how many bits at least will be
cleared in the masks if some activity is detected.  Usually this
is either n or 32*C<ceil(n/32)>, especially many little-endians do
the latter.  This is only useful if you have C<select()>, naturally.

=back

=for hackers
Found in file config.h

=over 4

=item C<SETUID_SCRIPTS_ARE_SECURE_NOW>
X<SETUID_SCRIPTS_ARE_SECURE_NOW>

This symbol, if defined, indicates that the bug that prevents
setuid scripts from being secure is not present in this kernel.

=back

=for hackers
Found in file config.h

=over 4

=item C<ST_DEV_SIGN>
X<ST_DEV_SIGN>

This symbol holds the signedness of C<struct stat>'s C<st_dev>.
1 for unsigned, -1 for signed.

=back

=for hackers
Found in file config.h

=over 4

=item C<ST_DEV_SIZE>
X<ST_DEV_SIZE>

This variable contains the size of C<struct stat>'s C<st_dev> in bytes.

=back

=for hackers
Found in file config.h


=head2 List of capability C<HAS_I<foo>> symbols

This is a list of those symbols that dont appear elsewhere in ths
document that indicate if the current platform has a certain
capability.  Their names all begin with C<HAS_>.  Only those
symbols whose capability is directly derived from the name are
listed here.  All others have their meaning expanded out elsewhere
in this document.  This (relatively) compact list is because we
think that the expansion would add little or no value and take up
a lot of space (because there are so many).  If you think certain
ones should be expanded, send email to
L<perl5-porters@perl.org|mailto:perl5-porters@perl.org>.

Each symbol here will be C<#define>d if and only if the platform
has the capability.  If you need more detail, see the
corresponding entry in F<config.h>.  For convenience, the list is
split so that the ones that indicate there is a reentrant version
of a capability are listed separately

C<HAS_ACCEPT4>,S< > C<HAS_ACCESS>,S< > C<HAS_ACCESSX>,S< > C<HAS_ACOSH>,S< > C<HAS_AINTL>,S< > C<HAS_ALARM>,S< > C<HAS_ASINH>,S< > C<HAS_ATANH>,S< > C<HAS_ATOLL>,S< > C<HAS_CBRT>,S< > C<HAS_CHOWN>,S< > C<HAS_CHROOT>,S< > C<HAS_CHSIZE>,S< > C<HAS_CLEARENV>,S< > C<HAS_COPYSIGN>,S< > C<HAS_COPYSIGNL>,S< > C<HAS_CRYPT>,S< > C<HAS_CTERMID>,S< > C<HAS_CUSERID>,S< > C<HAS_DIRFD>,S< > C<HAS_DLADDR>,S< > C<HAS_DLERROR>,S< > C<HAS_EACCESS>,S< > C<HAS_ENDHOSTENT>,S< > C<HAS_ENDNETENT>,S< > C<HAS_ENDPROTOENT>,S< > C<HAS_ENDSERVENT>,S< > C<HAS_ERF>,S< > C<HAS_ERFC>,S< > C<HAS_EXPM1>,S< > C<HAS_EXP2>,S< > C<HAS_FCHMOD>,S< > C<HAS_FCHMODAT>,S< > C<HAS_FCHOWN>,S< > C<HAS_FDIM>,S< > C<HAS_FD_SET>,S< > C<HAS_FEGETROUND>,S< > C<HAS_FFS>,S< > C<HAS_FFSL>,S< > C<HAS_FGETPOS>,S< > C<HAS_FLOCK>,S< > C<HAS_FMA>,S< > C<HAS_FMAX>,S< > C<HAS_FMIN>,S< > C<HAS_FORK>,S< > C<HAS_FSEEKO>,S< > C<HAS_FSETPOS>,S< > C<HAS_FSYNC>,S< > C<HAS_FTELLO>,S< > C<HAS__FWALK>,S< > C<HAS_GAI_STRERROR>,S< > C<HAS_GETADDRINFO>,S< > C<HAS_GETCWD>,S< > C<HAS_GETESPWNAM>,S< > C<HAS_GETGROUPS>,S< > C<HAS_GETHOSTBYADDR>,S< > C<HAS_GETHOSTBYNAME>,S< > C<HAS_GETHOSTENT>,S< > C<HAS_GETLOGIN>,S< > C<HAS_GETNAMEINFO>,S< > C<HAS_GETNETBYADDR>,S< > C<HAS_GETNETBYNAME>,S< > C<HAS_GETNETENT>,S< > C<HAS_GETPAGESIZE>,S< > C<HAS_GETPGID>,S< > C<HAS_GETPGRP>,S< > C<HAS_GETPGRP2>,S< > C<HAS_GETPPID>,S< > C<HAS_GETPRIORITY>,S< > C<HAS_GETPROTOBYNAME>,S< > C<HAS_GETPROTOBYNUMBER>,S< > C<HAS_GETPROTOENT>,S< > C<HAS_GETPRPWNAM>,S< > C<HAS_GETSERVBYNAME>,S< > C<HAS_GETSERVBYPORT>,S< > C<HAS_GETSERVENT>,S< > C<HAS_GETSPNAM>,S< > C<HAS_HTONL>,S< > C<HAS_HTONS>,S< > C<HAS_HYPOT>,S< > C<HAS_ILOGBL>,S< > C<HAS_INET_ATON>,S< > C<HAS_INETNTOP>,S< > C<HAS_INETPTON>,S< > C<HAS_IP_MREQ>,S< > C<HAS_IP_MREQ_SOURCE>,S< > C<HAS_IPV6_MREQ>,S< > C<HAS_IPV6_MREQ_SOURCE>,S< > C<HAS_ISASCII>,S< > C<HAS_ISBLANK>,S< > C<HAS_ISLESS>,S< > C<HAS_KILLPG>,S< > C<HAS_LCHOWN>,S< > C<HAS_LINK>,S< > C<HAS_LINKAT>,S< > C<HAS_LLROUND>,S< > C<HAS_LOCKF>,S< > C<HAS_LOGB>,S< > C<HAS_LOG1P>,S< > C<HAS_LOG2>,S< > C<HAS_LROUND>,S< > C<HAS_LSTAT>,S< > C<HAS_MADVISE>,S< > C<HAS_MBLEN>,S< > C<HAS_MBRLEN>,S< > C<HAS_MBRTOWC>,S< > C<HAS_MBSTOWCS>,S< > C<HAS_MBTOWC>,S< > C<HAS_MEMMEM>,S< > C<HAS_MEMRCHR>,S< > C<HAS_MKDTEMP>,S< > C<HAS_MKFIFO>,S< > C<HAS_MKOSTEMP>,S< > C<HAS_MKSTEMP>,S< > C<HAS_MKSTEMPS>,S< > C<HAS_MMAP>,S< > C<HAS_MPROTECT>,S< > C<HAS_MSG>,S< > C<HAS_MSYNC>,S< > C<HAS_MUNMAP>,S< > C<HAS_NEARBYINT>,S< > C<HAS_NEXTAFTER>,S< > C<HAS_NICE>,S< > C<HAS_NTOHL>,S< > C<HAS_NTOHS>,S< > C<HAS_PATHCONF>,S< > C<HAS_PAUSE>,S< > C<HAS_PHOSTNAME>,S< > C<HAS_PIPE>,S< > C<HAS_PIPE2>,S< > C<HAS_PRCTL>,S< > C<HAS_PTRDIFF_T>,S< > C<HAS_READLINK>,S< > C<HAS_READV>,S< > C<HAS_RECVMSG>,S< > C<HAS_REMQUO>,S< > C<HAS_RENAME>,S< > C<HAS_RENAMEAT>,S< > C<HAS_RINT>,S< > C<HAS_ROUND>,S< > C<HAS_SCALBNL>,S< > C<HAS_SEM>,S< > C<HAS_SENDMSG>,S< > C<HAS_SETEGID>,S< > C<HAS_SETENV>,S< > C<HAS_SETEUID>,S< > C<HAS_SETGROUPS>,S< > C<HAS_SETHOSTENT>,S< > C<HAS_SETLINEBUF>,S< > C<HAS_SETNETENT>,S< > C<HAS_SETPGRP>,S< > C<HAS_SETPGRP2>,S< > C<HAS_SETPRIORITY>,S< > C<HAS_SETPROCTITLE>,S< > C<HAS_SETPROTOENT>,S< > C<HAS_SETREGID>,S< > C<HAS_SETRESGID>,S< > C<HAS_SETRESUID>,S< > C<HAS_SETREUID>,S< > C<HAS_SETRGID>,S< > C<HAS_SETRUID>,S< > C<HAS_SETSERVENT>,S< > C<HAS_SETSID>,S< > C<HAS_SHM>,S< > C<HAS_SIGACTION>,S< > C<HAS_SIGPROCMASK>,S< > C<HAS_SIN6_SCOPE_ID>,S< > C<HAS_SNPRINTF>,S< > C<HAS_STAT>,S< > C<HAS_STRCOLL>,S< > C<HAS_STRERROR_L>,S< > C<HAS_STRLCAT>,S< > C<HAS_STRLCPY>,S< > C<HAS_STRNLEN>,S< > C<HAS_STRTOD>,S< > C<HAS_STRTOL>,S< > C<HAS_STRTOLL>,S< > C<HAS_STRTOQ>,S< > C<HAS_STRTOUL>,S< > C<HAS_STRTOULL>,S< > C<HAS_STRTOUQ>,S< > C<HAS_STRXFRM>,S< > C<HAS_STRXFRM_L>,S< > C<HAS_SYMLINK>,S< > C<HAS_SYSCALL>,S< > C<HAS_SYSCONF>,S< > C<HAS_SYS_ERRLIST>,S< > C<HAS_SYSTEM>,S< > C<HAS_TCGETPGRP>,S< > C<HAS_TCSETPGRP>,S< > C<HAS_TOWLOWER>,S< > C<HAS_TOWUPPER>,S< > C<HAS_TRUNCATE>,S< > C<HAS_TRUNCL>,S< > C<HAS_UALARM>,S< > C<HAS_UMASK>,S< > C<HAS_UNLINKAT>,S< > C<HAS_UNSETENV>,S< > C<HAS_VFORK>,S< > C<HAS_VSNPRINTF>,S< > C<HAS_WAITPID>,S< > C<HAS_WAIT4>,S< > C<HAS_WCRTOMB>,S< > C<HAS_WCSCMP>,S< > C<HAS_WCSTOMBS>,S< > C<HAS_WCSXFRM>,S< > C<HAS_WCTOMB>,S< > C<HAS_WRITEV>

And, the reentrant capabilities:

C<HAS_CRYPT_R>,S< > C<HAS_CTERMID_R>,S< > C<HAS_DRAND48_R>,S< > C<HAS_ENDHOSTENT_R>,S< > C<HAS_ENDNETENT_R>,S< > C<HAS_ENDPROTOENT_R>,S< > C<HAS_ENDSERVENT_R>,S< > C<HAS_GETGRGID_R>,S< > C<HAS_GETGRNAM_R>,S< > C<HAS_GETHOSTBYADDR_R>,S< > C<HAS_GETHOSTBYNAME_R>,S< > C<HAS_GETHOSTENT_R>,S< > C<HAS_GETLOGIN_R>,S< > C<HAS_GETNETBYADDR_R>,S< > C<HAS_GETNETBYNAME_R>,S< > C<HAS_GETNETENT_R>,S< > C<HAS_GETPROTOBYNAME_R>,S< > C<HAS_GETPROTOBYNUMBER_R>,S< > C<HAS_GETPROTOENT_R>,S< > C<HAS_GETPWNAM_R>,S< > C<HAS_GETPWUID_R>,S< > C<HAS_GETSERVBYNAME_R>,S< > C<HAS_GETSERVBYPORT_R>,S< > C<HAS_GETSERVENT_R>,S< > C<HAS_GETSPNAM_R>,S< > C<HAS_RANDOM_R>,S< > C<HAS_READDIR_R>,S< > C<HAS_SETHOSTENT_R>,S< > C<HAS_SETNETENT_R>,S< > C<HAS_SETPROTOENT_R>,S< > C<HAS_SETSERVENT_R>,S< > C<HAS_SRANDOM_R>,S< > C<HAS_SRAND48_R>,S< > C<HAS_STRERROR_R>,S< > C<HAS_TMPNAM_R>,S< > C<HAS_TTYNAME_R>

Example usage:

=over 4

 #ifdef HAS_STRNLEN
   use strnlen()
 #else
   use an alternative implementation
 #endif

=back

=head2 List of C<#include> needed symbols

This list contains symbols that indicate if certain C<#include>
files are present on the platform.  If your code accesses the
functionality that one of these is for, you will need to
C<#include> it if the symbol on this list is C<#define>d.  For
more detail, see the corresponding entry in F<config.h>.

C<I_ARPA_INET>,S< > C<I_BFD>,S< > C<I_CRYPT>,S< > C<I_DBM>,S< > C<I_DLFCN>,S< > C<I_EXECINFO>,S< > C<I_FP>,S< > C<I_FP_CLASS>,S< > C<I_GDBM>,S< > C<I_GDBMNDBM>,S< > C<I_GDBM_NDBM>,S< > C<I_GRP>,S< > C<I_IEEEFP>,S< > C<I_INTTYPES>,S< > C<I_LIBUTIL>,S< > C<I_MNTENT>,S< > C<I_NDBM>,S< > C<I_NETDB>,S< > C<I_NET_ERRNO>,S< > C<I_NETINET_IN>,S< > C<I_NETINET_TCP>,S< > C<I_PROT>,S< > C<I_PWD>,S< > C<I_RPCSVC_DBM>,S< > C<I_SGTTY>,S< > C<I_SHADOW>,S< > C<I_STDBOOL>,S< > C<I_STDINT>,S< > C<I_SUNMATH>,S< > C<I_SYS_ACCESS>,S< > C<I_SYS_IOCTL>,S< > C<I_SYSLOG>,S< > C<I_SYSMODE>,S< > C<I_SYS_MOUNT>,S< > C<I_SYS_PARAM>,S< > C<I_SYS_POLL>,S< > C<I_SYS_SECURITY>,S< > C<I_SYS_SELECT>,S< > C<I_SYS_STAT>,S< > C<I_SYS_STATVFS>,S< > C<I_SYS_SYSCALL>,S< > C<I_SYS_TIME>,S< > C<I_SYS_TIME_KERNEL>,S< > C<I_SYS_TIMES>,S< > C<I_SYS_TYPES>,S< > C<I_SYSUIO>,S< > C<I_SYS_UN>,S< > C<I_SYSUTSNAME>,S< > C<I_SYS_VFS>,S< > C<I_SYS_WAIT>,S< > C<I_TERMIO>,S< > C<I_TERMIOS>,S< > C<I_UNISTD>,S< > C<I_USTAT>,S< > C<I_VFORK>,S< > C<I_WCHAR>,S< > C<I_WCTYPE>

Example usage:

=over 4

 #ifdef I_WCHAR
   #include <wchar.h>
 #endif

=back


=head1 Global Variables


These variables are global to an entire process.  They are shared between
all interpreters and all threads in a process.  Any variables not documented
here may be changed or removed without notice, so don't use them!
If you feel you really do need to use an unlisted variable, first send email to
L<perl5-porters@perl.org|mailto:perl5-porters@perl.org>.  It may be that
someone there will point out a way to accomplish what you need without using an
internal variable.  But if not, you should get a go-ahead to document and then
use the variable.


=over 4

=item C<PL_check>
X<PL_check>

Array, indexed by opcode, of functions that will be called for the "check"
phase of optree building during compilation of Perl code.  For most (but
not all) types of op, once the op has been initially built and populated
with child ops it will be filtered through the check function referenced
by the appropriate element of this array.  The new op is passed in as the
sole argument to the check function, and the check function returns the
completed op.  The check function may (as the name suggests) check the op
for validity and signal errors.  It may also initialise or modify parts of
the ops, or perform more radical surgery such as adding or removing child
ops, or even throw the op away and return a different op in its place.

This array of function pointers is a convenient place to hook into the
compilation process.  An XS module can put its own custom check function
in place of any of the standard ones, to influence the compilation of a
particular type of op.  However, a custom check function must never fully
replace a standard check function (or even a custom check function from
another module).  A module modifying checking must instead B<wrap> the
preexisting check function.  A custom check function must be selective
about when to apply its custom behaviour.  In the usual case where
it decides not to do anything special with an op, it must chain the
preexisting op function.  Check functions are thus linked in a chain,
with the core's base checker at the end.

For thread safety, modules should not write directly to this array.
Instead, use the function L</wrap_op_checker>.

=back

=for hackers
Found in file perlvars.h

=over 4

=item C<PL_infix_plugin>
X<PL_infix_plugin>

NOTE: C<PL_infix_plugin> is B<experimental> and may change or be
removed without notice.

B<NOTE:> This API exists entirely for the purpose of making the CPAN module
C<XS::Parse::Infix> work. It is not expected that additional modules will make
use of it; rather, that they should use C<XS::Parse::Infix> to provide parsing
of new infix operators.

Function pointer, pointing at a function used to handle extended infix
operators. The function should be declared as

        int infix_plugin_function(pTHX_
                char *opname, STRLEN oplen,
                struct Perl_custom_infix **infix_ptr)

The function is called from the tokenizer whenever a possible infix operator
is seen. C<opname> points to the operator name in the parser's input buffer,
and C<oplen> gives the I<maximum> number of bytes of it that should be
consumed; it is not null-terminated. The function is expected to examine the
operator name and possibly other state such as L<%^H|perlvar/%^H>, to
determine whether it wants to handle the operator name.

As compared to the single stage of C<PL_keyword_plugin>, parsing of additional
infix operators occurs in three separate stages. This is because of the more
complex interactions it has with the parser, to ensure that operator
precedence rules work correctly. These stages are co-ordinated by the use of
an additional information structure.

If the function wants to handle the infix operator, it must set the variable
pointed to by C<infix_ptr> to the address of a structure that provides this
additional information about the subsequent parsing stages. If it does not,
it should make a call to the next function in the chain.

This structure has the following definition:

	struct Perl_custom_infix {
	    enum Perl_custom_infix_precedence prec;
	    void (*parse)(pTHX_ SV **opdata,
		struct Perl_custom_infix *);
	    OP *(*build_op)(pTHX_ SV **opdata, OP *lhs, OP *rhs,
		struct Perl_custom_infix *);
	};

The function must then return an integer giving the number of bytes consumed
by the name of this operator. In the case of an operator whose name is
composed of identifier characters, this must be equal to C<oplen>. In the case
of an operator named by non-identifier characters, this is permitted to be
shorter than C<oplen>, and any additional characters after it will not be
claimed by the infix operator but instead will be consumed by the tokenizer
and parser as normal.

If the optional C<parse> function is provided, it is called immediately by the
parser to let the operator's definition consume any additional syntax from the
source code. This should I<not> be used for normal operand parsing, but it may
be useful when implementing things like parametric operators or meta-operators
that consume more syntax themselves. This function may use the variable
pointed to by C<opdata> to provide an SV containing additional data to be
passed into the C<build_op> function later on.

The information structure gives the operator precedence level in the C<prec>
field. This is used to tell the parser how much of the surrounding syntax
before and after should be considered as operands to the operator.

The tokenizer and parser will then continue to operate as normal until enough
additional input has been parsed to form both the left- and right-hand side
operands to the operator, according to the precedence level. At this point the
C<build_op> function is called, being passed the left- and right-hand operands
as optree fragments. It is expected to combine them into the resulting optree
fragment, which it should return.

After the C<build_op> function has returned, if the variable pointed to by
C<opdata> was set to a non-C<NULL> value, it will then be destroyed by calling
C<SvREFCNT_dec()>.

For thread safety, modules should not set this variable directly.
Instead, use the function L</wrap_infix_plugin>.

However, that all said, the introductory note above still applies. This
variable is provided in core perl only for the benefit of the
C<XS::Parse::Infix> module. That module acts as a central registry for infix
operators, automatically handling things like deparse support and
discovery/reflection, and these abilities only work because it knows all the
registered operators. Other modules should not use this interpreter variable
directly to implement them because then those central features would no longer
work properly.

Furthermore, it is likely that this (experimental) API will be replaced in a
future Perl version by a more complete API that fully implements the central
registry and other semantics currently provided by C<XS::Parse::Infix>, once
the module has had sufficient experimental testing time. This current
mechanism exists only as an interim measure to get to that stage.

=back

=for hackers
Found in file perlvars.h

=over 4

=item C<PL_keyword_plugin>
X<PL_keyword_plugin>

NOTE: C<PL_keyword_plugin> is B<experimental> and may change or be
removed without notice.

Function pointer, pointing at a function used to handle extended keywords.
The function should be declared as

        int keyword_plugin_function(pTHX_
                char *keyword_ptr, STRLEN keyword_len,
                OP **op_ptr)

The function is called from the tokeniser, whenever a possible keyword
is seen.  C<keyword_ptr> points at the word in the parser's input
buffer, and C<keyword_len> gives its length; it is not null-terminated.
The function is expected to examine the word, and possibly other state
such as L<%^H|perlvar/%^H>, to decide whether it wants to handle it
as an extended keyword.  If it does not, the function should return
C<KEYWORD_PLUGIN_DECLINE>, and the normal parser process will continue.

If the function wants to handle the keyword, it first must
parse anything following the keyword that is part of the syntax
introduced by the keyword.  See L</Lexer interface> for details.

When a keyword is being handled, the plugin function must build
a tree of C<OP> structures, representing the code that was parsed.
The root of the tree must be stored in C<*op_ptr>.  The function then
returns a constant indicating the syntactic role of the construct that
it has parsed: C<KEYWORD_PLUGIN_STMT> if it is a complete statement, or
C<KEYWORD_PLUGIN_EXPR> if it is an expression.  Note that a statement
construct cannot be used inside an expression (except via C<do BLOCK>
and similar), and an expression is not a complete statement (it requires
at least a terminating semicolon).

When a keyword is handled, the plugin function may also have
(compile-time) side effects.  It may modify C<%^H>, define functions, and
so on.  Typically, if side effects are the main purpose of a handler,
it does not wish to generate any ops to be included in the normal
compilation.  In this case it is still required to supply an op tree,
but it suffices to generate a single null op.

That's how the C<*PL_keyword_plugin> function needs to behave overall.
Conventionally, however, one does not completely replace the existing
handler function.  Instead, take a copy of C<PL_keyword_plugin> before
assigning your own function pointer to it.  Your handler function should
look for keywords that it is interested in and handle those.  Where it
is not interested, it should call the saved plugin function, passing on
the arguments it received.  Thus C<PL_keyword_plugin> actually points
at a chain of handler functions, all of which have an opportunity to
handle keywords, and only the last function in the chain (built into
the Perl core) will normally return C<KEYWORD_PLUGIN_DECLINE>.

For thread safety, modules should not set this variable directly.
Instead, use the function L</wrap_keyword_plugin>.

=back

=for hackers
Found in file perlvars.h

=over 4

=item C<PL_phase>
X<PL_phase>

A value that indicates the current Perl interpreter's phase. Possible values
include C<PERL_PHASE_CONSTRUCT>, C<PERL_PHASE_START>, C<PERL_PHASE_CHECK>,
C<PERL_PHASE_INIT>, C<PERL_PHASE_RUN>, C<PERL_PHASE_END>, and
C<PERL_PHASE_DESTRUCT>.

For example, the following determines whether the interpreter is in
global destruction:

    if (PL_phase == PERL_PHASE_DESTRUCT) {
        // we are in global destruction
    }

C<PL_phase> was introduced in Perl 5.14; in prior perls you can use
C<PL_dirty> (boolean) to determine whether the interpreter is in global
destruction. (Use of C<PL_dirty> is discouraged since 5.14.)

=over 3

 enum perl_phase  PL_phase

=back

=back

=for hackers
Found in file perlvars.h

=head1 GV Handling and Stashes
X<GV>X<GV_ADD>X<GV_ADDMG>X<GV_ADDMULTI>X<GV_ADDWARN>X<GV_NOADD_NOINIT>X<GV_NOEXPAND>X<GV_NOINIT>X<GV_NOTQUAL>X<GV_NO_SVGMAGIC>X<GV_SUPER>X<SVf_UTF8>


A GV is a structure which corresponds to a Perl typeglob, ie *foo.
It is a structure that holds a pointer to a scalar, an array, a hash etc,
corresponding to $foo, @foo, %foo.

GVs are usually found as values in stashes (symbol table hashes) where
Perl stores its global variables.

A B<stash> is a hash that contains all variables that are defined
within a package.  See L<perlguts/Stashes and Globs>


=over 4

=item C<amagic_call>
X<amagic_call>

Perform the overloaded (active magic) operation given by C<method>.
C<method> is one of the values found in F<overload.h>.

C<flags> affects how the operation is performed, as follows:

=over

=item C<AMGf_noleft>

C<left> is not to be used in this operation.

=item C<AMGf_noright>

C<right> is not to be used in this operation.

=item C<AMGf_unary>

The operation is done only on just one operand.

=item C<AMGf_assign>

The operation changes one of the operands, e.g., $x += 1

=back

=over 3

 SV *  amagic_call(SV *left, SV *right, int method, int dir)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<amagic_deref_call>
X<amagic_deref_call>

Perform C<method> overloading dereferencing on C<ref>, returning the
dereferenced result.  C<method> must be one of the dereference operations given
in F<overload.h>.

If overloading is inactive on C<ref>, returns C<ref> itself.

=over 3

 SV *  amagic_deref_call(SV *ref, int method)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_add_by_type>
X<gv_add_by_type>

Make sure there is a slot of type C<type> in the GV C<gv>.

=over 3

 GV *  gv_add_by_type(GV *gv, svtype type)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<Gv_AMupdate>
X<Gv_AMupdate>

Recalculates overload magic in the package given by C<stash>.

Returns:

=over

=item 1 on success and there is some overload

=item 0 if there is no overload

=item -1 if some error occurred and it couldn't croak (because C<destructing>
is true).

=back

=over 3

 int  Gv_AMupdate(HV *stash, bool destructing)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_autoload_pv>

=item C<gv_autoload_pvn>

=item C<gv_autoload_sv>
X<gv_autoload_pv>X<gv_autoload_pvn>X<gv_autoload_sv>

These each search for an C<AUTOLOAD> method, returning NULL if not found, or
else returning a pointer to its GV, while setting the package
L<C<$AUTOLOAD>|perlobj/AUTOLOAD> variable to C<name> (fully qualified).  Also,
if found and the GV's CV is an XSUB, the CV's PV will be set to C<name>, and
its stash will be set to the stash of the GV.

Searching is done in L<C<MRO> order|perlmroapi>, as specified in
L</C<gv_fetchmeth>>, beginning with C<stash> if it isn't NULL.

The forms differ only in how C<name> is specified.

In C<gv_autoload_pv>, C<namepv> is a C language NUL-terminated string.

In C<gv_autoload_pvn>, C<name> points to the first byte of the name, and an
additional parameter, C<len>, specifies its length in bytes.  Hence, C<*name>
may contain embedded-NUL characters.

In C<gv_autoload_sv>, C<*namesv> is an SV, and the name is the PV extracted
from that using L</C<SvPV>>.  If the SV is marked as being in UTF-8, the
extracted PV will also be.

=over 3

 GV *  gv_autoload_pv (HV *stash, const char *namepv, U32 flags)
 GV *  gv_autoload_pvn(HV *stash, const char *name, STRLEN len,
                       U32 flags)
 GV *  gv_autoload_sv (HV *stash, SV *namesv, U32 flags)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_autoload4>
X<gv_autoload4>

Equivalent to C<L</gv_autoload_pvn>>.

=over 3

 GV *  gv_autoload4(HV *stash, const char *name, STRLEN len,
                    I32 method)

=back

=back

=for hackers
Found in file gv.h

=over 4

=item C<GvAV>
X<GvAV>

Return the AV from the GV.

=over 3

 AV*  GvAV(GV* gv)

=back

=back

=for hackers
Found in file gv.h

=over 4

=item C<gv_AVadd>

=item C<gv_HVadd>

=item C<gv_IOadd>

=item C<gv_SVadd>
X<gv_AVadd>X<gv_HVadd>X<gv_IOadd>X<gv_SVadd>

Make sure there is a slot of the given type (AV, HV, IO, SV) in the GV C<gv>.

=over 3

 GV *  gv_AVadd(GV *gv)

=back

=back

=for hackers
Found in file gv.h

=over 4

=item C<gv_const_sv>
X<gv_const_sv>

If C<gv> is a typeglob whose subroutine entry is a constant sub eligible for
inlining, or C<gv> is a placeholder reference that would be promoted to such
a typeglob, then returns the value returned by the sub.  Otherwise, returns
C<NULL>.

=over 3

 SV *  gv_const_sv(GV *gv)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<GvCV>
X<GvCV>

Return the CV from the GV.

=over 3

 CV*  GvCV(GV* gv)

=back

=back

=for hackers
Found in file gv.h

=over 4

=item C<gv_efullname3>

=item C<gv_efullname4>

=item C<gv_fullname3>

=item C<gv_fullname4>
X<gv_efullname3>X<gv_efullname4>X<gv_fullname3>X<gv_fullname4>

Place the full package name of C<gv> into C<sv>.  The C<gv_e*> forms return
instead the effective package name (see L</HvENAME>).

If C<prefix> is non-NULL, it is considered to be a C language NUL-terminated
string, and the stored name will be prefaced with it.

The other difference between the functions is that the C<*4> forms have an
extra parameter, C<keepmain>.  If C<true> an initial C<main::> in the name is
kept; if C<false> it is stripped.  With the C<*3> forms, it is always kept.

=over 3

 void  gv_efullname3(SV *sv, const GV *gv, const char *prefix)
 void  gv_efullname4(SV *sv, const GV *gv, const char *prefix,
                     bool keepmain)
 void  gv_fullname3 (SV *sv, const GV *gv, const char *prefix)
 void  gv_fullname4 (SV *sv, const GV *gv, const char *prefix,
                     bool keepmain)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_fetchfile>

=item C<gv_fetchfile_flags>
X<gv_fetchfile>X<gv_fetchfile_flags>

These return the debugger glob for the file (compiled by Perl) whose name is
given by the C<name> parameter.

There are currently exactly two differences between these functions.

The C<name> parameter to C<gv_fetchfile> is a C string, meaning it is
C<NUL>-terminated; whereas the C<name> parameter to C<gv_fetchfile_flags> is a
Perl string, whose length (in bytes) is passed in via the C<namelen> parameter
This means the name may contain embedded C<NUL> characters.
C<namelen> doesn't exist in plain C<gv_fetchfile>).

The other difference is that C<gv_fetchfile_flags> has an extra C<flags>
parameter, which is currently completely ignored, but allows for possible
future extensions.

=over 3

 GV *  gv_fetchfile      (const char *name)
 GV *  gv_fetchfile_flags(const char * const name,
                          const STRLEN len, const U32 flags)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_fetchmeth>

=item C<gv_fetchmeth_pv>

=item C<gv_fetchmeth_pvn>

=item C<gv_fetchmeth_sv>
X<gv_fetchmeth>X<gv_fetchmeth_pv>X<gv_fetchmeth_pvn>X<gv_fetchmeth_sv>

These each look for a glob with name C<name>, containing a defined subroutine,
returning the GV of that glob if found, or C<NULL> if not.

C<stash> is always searched (first), unless it is C<NULL>.

If C<stash> is NULL, or was searched but nothing was found in it, and the
C<GV_SUPER> bit is set in C<flags>, stashes accessible via C<@ISA> are searched
next.  Searching is conducted according to L<C<MRO> order|perlmroapi>.

Finally, if no matches were found so far, and the C<GV_NOUNIVERSAL> flag in
C<flags> is not set,  C<UNIVERSAL::> is searched.

The argument C<level> should be either 0 or -1.  If -1, the function will
return without any side effects or caching.  If 0, the function makes sure
there is a glob named C<name> in C<stash>, creating one if necessary.
The subroutine slot in the glob will be set to any subroutine found in the
C<stash> and C<SUPER::> search, hence caching any C<SUPER::> result.  Note that
subroutines found in C<UNIVERSAL::> are not cached.

The GV returned from these may be a method cache entry, which is not visible to
Perl code.  So when calling C<call_sv>, you should not use the GV directly;
instead, you should use the method's CV, which can be obtained from the GV with
the C<GvCV> macro.

The only other significant value for C<flags> is C<SVf_UTF8>, indicating that
C<name> is to be treated as being encoded in UTF-8.

Plain C<gv_fetchmeth> lacks a C<flags> parameter, hence always searches in
C<stash>, then C<UNIVERSAL::>, and C<name> is never UTF-8.  Otherwise it is
exactly like C<gv_fetchmeth_pvn>.

The other forms do have a C<flags> parameter, and differ only in how the glob
name is specified.

In C<gv_fetchmeth_pv>, C<name> is a C language NUL-terminated string.

In C<gv_fetchmeth_pvn>, C<name> points to the first byte of the name, and an
additional parameter, C<len>, specifies its length in bytes.  Hence, the name
may contain embedded-NUL characters.

In C<gv_fetchmeth_sv>, C<*name> is an SV, and the name is the PV extracted from
that, using L</C<SvPV>>.  If the SV is marked as being in UTF-8, the extracted
PV will also be.

=over 3

 GV *  gv_fetchmeth    (HV *stash, const char *name, STRLEN len,
                        I32 level)
 GV *  gv_fetchmeth_pv (HV *stash, const char *name, I32 level,
                        U32 flags)
 GV *  gv_fetchmeth_pvn(HV *stash, const char *name, STRLEN len,
                        I32 level, U32 flags)
 GV *  gv_fetchmeth_sv (HV *stash, SV *namesv, I32 level,
                        U32 flags)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_fetchmeth_autoload>
X<gv_fetchmeth_autoload>

This is the old form of L</gv_fetchmeth_pvn_autoload>, which has no flags
parameter.

=over 3

 GV *  gv_fetchmeth_autoload(HV *stash, const char *name,
                             STRLEN len, I32 level)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_fetchmethod>
X<gv_fetchmethod>

See L</gv_fetchmethod_autoload>.

=over 3

 GV *  gv_fetchmethod(HV *stash, const char *name)

=back

=back

=for hackers
Found in file mathoms.c

=over 4

=item C<gv_fetchmethod_autoload>
X<gv_fetchmethod_autoload>

Returns the glob which contains the subroutine to call to invoke the method
on the C<stash>.  In fact in the presence of autoloading this may be the
glob for "AUTOLOAD".  In this case the corresponding variable C<$AUTOLOAD> is
already setup.

The third parameter of C<gv_fetchmethod_autoload> determines whether
AUTOLOAD lookup is performed if the given method is not present: non-zero
means yes, look for AUTOLOAD; zero means no, don't look for AUTOLOAD.
Calling C<gv_fetchmethod> is equivalent to calling C<gv_fetchmethod_autoload>
with a non-zero C<autoload> parameter.

These functions grant C<"SUPER"> token
as a prefix of the method name.  Note
that if you want to keep the returned glob for a long time, you need to
check for it being "AUTOLOAD", since at the later time the call may load a
different subroutine due to C<$AUTOLOAD> changing its value.  Use the glob
created as a side effect to do this.

These functions have the same side-effects as C<gv_fetchmeth> with
C<level==0>.  The warning against passing the GV returned by
C<gv_fetchmeth> to C<call_sv> applies equally to these functions.

=over 3

 GV *  gv_fetchmethod_autoload(HV *stash, const char *name,
                               I32 autoload)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_fetchmeth_pv_autoload>
X<gv_fetchmeth_pv_autoload>

Exactly like L</gv_fetchmeth_pvn_autoload>, but takes a nul-terminated string
instead of a string/length pair.

=over 3

 GV *  gv_fetchmeth_pv_autoload(HV *stash, const char *name,
                                I32 level, U32 flags)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_fetchmeth_pvn_autoload>
X<gv_fetchmeth_pvn_autoload>

Same as C<gv_fetchmeth_pvn()>, but looks for autoloaded subroutines too.
Returns a glob for the subroutine.

For an autoloaded subroutine without a GV, will create a GV even
if C<level < 0>.  For an autoloaded subroutine without a stub, C<GvCV()>
of the result may be zero.

Currently, the only significant value for C<flags> is C<SVf_UTF8>.

=over 3

 GV *  gv_fetchmeth_pvn_autoload(HV *stash, const char *name,
                                 STRLEN len, I32 level, U32 flags)

=back

=back

=for hackers
Found in file gv.c

=over 4

=item C<gv_fetchmeth_sv_autoload>
X<gv_fetchmeth_sv_autoload>

Exactly like L</gv_fetchmeth_pvn_autoload>, but takes the name string in the form
of an SV instead of a string/length pair.

=over 3

 GV *  gv_fetchmeth_sv_autoload(HV *stash, SV *namesv, I32 level,
                                U32 flags)

=back

=back

=for hackers
Found in file gv.c

=over 4

