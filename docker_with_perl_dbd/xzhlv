
	:echo "he said \"hello\""

The <f-args> keyword contains the same information as the <args> keyword,
except in a format suitable for use as function call arguments.  For example:
>
	:command -nargs=* DoIt :call AFunction(<f-args>)
	:DoIt a b c

Executes the following command: >

	:call AFunction("a", "b", "c")


LINE RANGE

Some commands take a range as their argument.  To tell Vim that you are
defining such a command, you need to specify a -range option.  The values for
this option are as follows:

	-range		Range is allowed; default is the current line.
	-range=%	Range is allowed; default is the whole file.
	-range={count}	Range is allowed; the last number in it is used as a
			single number whose default is {count}.

When a range is specified, the keywords <line1> and <line2> get the values of
the first and last line in the range.  For example, the following command
defines the SaveIt command, which writes out the specified range to the file
"save_file": >

	:command -range=% SaveIt :<line1>,<line2>write! save_file


OTHER OPTIONS

Some of the other options and keywords are as follows:

	-count={number}		The command can take a count whose default is
				{number}.  The resulting count can be used
				through the <count> keyword.
	-bang			You can use a !.  If present, using <bang> will
				result in a !.
	-register		You can specify a register.  (The default is
				the unnamed register.)
				The register specification is available as
				<reg> (a.k.a. <register>).
	-complete={type}	Type of command-line completion used.  See
				|:command-completion| for the list of possible
				values.
	-bar			The command can be followed by | and another
				command, or " and a comment.
	-buffer			The command is only available for the current
				buffer.

Finally, you have the <lt> keyword.  It stands for the character <.  Use this
to escape the special meaning of the <> items mentioned.


REDEFINING AND DELETING

To redefine the same command use the ! argument: >

	:command -nargs=+ Say :echo "<args>"
	:command! -nargs=+ Say :echo <q-args>

To delete a user command use ":delcommand".  It takes a single argument, which
is the name of the command.  Example: >

	:delcommand SaveIt

To delete all the user commands: >

	:comclear

Careful, this can't be undone!

More details about all this in the reference manual: |user-commands|.

==============================================================================
*40.3*	Autocommands

An autocommand is a command that is executed automatically in response to some
event, such as a file being read or written or a buffer change.  Through the
use of autocommands you can train Vim to edit compressed files, for example.
That is used in the |gzip| plugin.
   Autocommands are very powerful.  Use them with care and they will help you
avoid typing many commands.  Use them carelessly and they will cause a lot of
trouble.

Suppose you want to replace a datestamp on the end of a file every time it is
written.  First you define a function: >

	:function DateInsert()
	:  $delete
	:  read !date
	:endfunction

You want this function to be called each time, just before a buffer is written
to a file.  This will make that happen: >

	:autocmd BufWritePre *  call DateInsert()

"BufWritePre" is the event for which this autocommand is triggered: Just
before (pre) writing a buffer to a file.  The "*" is a pattern to match with
the file name.  In this case it matches all files.
   With this command enabled, when you do a ":write", Vim checks for any
matching BufWritePre autocommands and executes them, and then it
performs the ":write".
   The general form of the :autocmd command is as follows: >

	:autocmd [group] {events} {file-pattern} [++nested] {command}

The [group] name is optional.  It is used in managing and calling the commands
(more on this later).  The {events} parameter is a list of events (comma
separated) that trigger the command.
   {file-pattern} is a filename, usually with wildcards.  For example, using
"*.txt" makes the autocommand be used for all files whose name end in ".txt".
The optional [++nested] flag allows for nesting of autocommands (see below),
and finally, {command} is the command to be executed.

When adding an autocommand the already existing ones remain.  To avoid adding
the autocommand several times you should use this form: >

	:augroup updateDate
	:  autocmd!
	:  autocmd BufWritePre *  call DateInsert()
	:augroup END

This will delete any previously defined autocommand with `:autocmd!` before
defining the new one.  Groups are explained later.


EVENTS

One of the most useful events is BufReadPost.  It is triggered after a new
file is being edited.  It is commonly used to set option values.  For example,
you know that "*.gsm" files are GNU assembly language.  To get the syntax file
right, define this autocommand: >

	:autocmd BufReadPost *.gsm  set filetype=asm

If Vim is able to detect the type of file, it will set the 'filetype' option
for you.  This triggers the Filetype event.  Use this to do something when a
certain type of file is edited.  For example, to load a list of abbreviations
for text files: >

	:autocmd Filetype text  source ~/.vim/abbrevs.vim

When starting to edit a new file, you could make Vim insert a skeleton: >

	:autocmd BufNewFile *.[ch]  0read ~/skeletons/skel.c

See |autocmd-events| for a complete list of events.


PATTERNS

The {file-pattern} argument can actually be a comma-separated list of file
patterns.  For example: "*.c,*.h" matches files ending in ".c" and ".h".
   The usual file wildcards can be used.  Here is a summary of the most often
used ones:

	*		Match any character any number of times
	?		Match any character once
	[abc]		Match the character a, b or c
	.		Matches a dot
	a{b,c}		Matches "ab" and "ac"

When the pattern includes a slash (/) Vim will compare directory names.
Without the slash only the last part of a file name is used.  For example,
"*.txt" matches "/home/biep/readme.txt".  The pattern "/home/biep/*" would
also match it.  But "home/foo/*.txt" wouldn't.
   When including a slash, Vim matches the pattern against both the full path
of the file ("/home/biep/readme.txt") and the relative path (e.g.,
"biep/readme.txt").

	Note:
	When working on a system that uses a backslash as file separator, such
	as MS-Windows, you still use forward slashes in autocommands.  This
	makes it easier to write the pattern, since a backslash has a special
	meaning.  It also makes the autocommands portable.


DELETING

To delete an autocommand, use the same command as what it was defined with,
but leave out the {command} at the end and use a !.  Example: >

	:autocmd! FileWritePre *

This will delete all autocommands for the "FileWritePre" event that use the
"*" pattern.


LISTING

To list all the currently defined autocommands, use this: >

	:autocmd

The list can be very long, especially when filetype detection is used.  To
list only part of the commands, specify the group, event and/or pattern.  For
example, to list all BufNewFile autocommands: >

	:autocmd BufNewFile

To list all autocommands for the pattern "*.c": >

	:autocmd * *.c

Using "*" for the event will list all the events.  To list all autocommands
for the cprograms group: >

	:autocmd cprograms


GROUPS

The {group} item, used when defining an autocommand, groups related autocommands
together.  This can be used to delete all the autocommands in a certain group,
for example.
   When defining several autocommands for a certain group, use the ":augroup"
command.  For example, let's define autocommands for C programs: >

	:augroup cprograms
	:  autocmd BufReadPost *.c,*.h :set sw=4 sts=4
	:  autocmd BufReadPost *.cpp   :set sw=3 sts=3
	:augroup END

This will do the same as: >

	:autocmd cprograms BufReadPost *.c,*.h :set sw=4 sts=4
	:autocmd cprograms BufReadPost *.cpp   :set sw=3 sts=3

To delete all autocommands in the "cprograms" group: >

	:autocmd! cprograms


NESTING

Generally, commands executed as the result of an autocommand event will not
trigger any new events.  If you read a file in response to a FileChangedShell
event, it will not trigger the autocommands that would set the syntax, for
example.  To make the events triggered, add the "nested" argument: >

	:autocmd FileChangedShell * ++nested  edit


EXECUTING AUTOCOMMANDS

It is possible to trigger an autocommand by pretending an event has occurred.
This is useful to have one autocommand trigger another one.  Example: >

	:autocmd BufReadPost *.new  execute "doautocmd BufReadPost " . expand("<afile>:r")

This defines an autocommand that is triggered when a new file has been edited.
The file name must end in ".new".  The ":execute" command uses expression
evaluation to form a new command and execute it.  When editing the file
"tryout.c.new" the executed command will be: >

	:doautocmd BufReadPost tryout.c

The expand() function takes the "<afile>" argument, which stands for the file
name the autocommand was executed for, and takes the root of the file name
with ":r".

":doautocmd" executes on the current buffer.  The ":doautoall" command works
like "doautocmd" except it executes on all the buffers.


USING NORMAL MODE COMMANDS

The commands executed by an autocommand are Command-line commands.  If you
want to use a Normal mode command, the ":normal" command can be used.
Example: >

	:autocmd BufReadPost *.log normal G

This will make the cursor jump to the last line of *.log files when you start
to edit it.
   Using the ":normal" command is a bit tricky.  First of all, make sure its
argument is a complete command, including all the arguments.  When you use "i"
to go to Insert mode, there must also be a <Esc> to leave Insert mode again.
If you use a "/" to start a search pattern, there must be a <CR> to execute
it.
   The ":normal" command uses all the text after it as commands.  Thus there
can be no | and another command following.  To work around this, put the
":normal" command inside an ":execute" command.  This also makes it possible
to pass unprintable characters in a convenient way.  Example: >

	:autocmd BufReadPost *.chg execute "normal ONew entry:\<Esc>" |
		\ 1read !date

This also shows the use of a backslash to break a long command into more
lines.  This can be used in Vim scripts (not at the command line).

When you want the autocommand do something complicated, which involves jumping
around in the file and then returning to the original position, you may want
to restore the view on the file.  See |restore-position| for an example.


IGNORING EVENTS

At times, you will not want to trigger an autocommand.  The 'eventignore'
option contains a list of events that will be totally ignored.  For example,
the following causes events for entering and leaving a window to be ignored: >

	:set eventignore=WinEnter,WinLeave

To ignore all events, use the following command: >

	:set eventignore=all

To set it back to the normal behavior, make 'eventignore' empty: >

	:set eventignore=

==============================================================================

Next chapter: |usr_41.txt|  Write a Vim script

Copyright: see |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              usr/share/vim/vim90/doc/usr_41.txt                                                                  0000644 0000000 0000000 00000176452 14424703754 015372  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        *usr_41.txt*	For Vim version 9.0.  Last change: 2023 Jan 17

		     VIM USER MANUAL - by Bram Moolenaar

			      Write a Vim script


The Vim script language is used for the startup vimrc file, syntax files, and
many other things.  This chapter explains the items that can be used in a Vim
script.  There are a lot of them, therefore this is a long chapter.

|41.1|	Introduction
|41.2|	Variables
|41.3|	Expressions
|41.4|	Conditionals
|41.5|	Executing an expression
|41.6|	Using functions
|41.7|	Defining a function
|41.8|	Lists and Dictionaries
|41.9|	White space
|41.10|	Line continuation
|41.11|	Comments
|41.12|	Fileformat

     Next chapter: |usr_42.txt|  Add new menus
 Previous chapter: |usr_40.txt|  Make new commands
Table of contents: |usr_toc.txt|

==============================================================================
*41.1*	Introduction				*vim-script-intro* *script*

Your first experience with Vim scripts is the vimrc file.  Vim reads it when
it starts up and executes the commands.  You can set options to the values you
prefer, define mappings, select plugins and much more.   You can use any colon
command in it (commands that start with a ":"; these are sometimes referred to
as Ex commands or command-line commands).

Syntax files are also Vim scripts.  As are files that set options for a
specific file type.  A complicated macro can be defined by a separate Vim
script file.  You can think of other uses yourself.

Vim script comes in two flavors: legacy and |Vim9|.  Since this help file is
for new users, we'll teach you the newer and more convenient |Vim9| syntax.
While legacy script is particularly for Vim, |Vim9| script looks more like
other languages, such as JavaScript and TypeScript.

To try out Vim script the best way is to edit a script file and source it.
Basically: >
	:edit test.vim
	[insert the script lines you want]
	:w
	:source %

Let's start with a simple example: >

	vim9script
	var i = 1
	while i < 5
	  echo "count is" i
	  i += 1
	endwhile
<
The output of the example code is:

	count is 1 ~
	count is 2 ~
	count is 3 ~
	count is 4 ~

In the first line the `vim9script` command makes clear this is a new, |Vim9|
script file.  That matters for how the rest of the file is used.  It is
recommended to put it in the very fist line, before any comments.
							*vim9-declarations*
The `var i = 1` command declares the "i" variable and initializes it.  The
generic form is: >

	var {name} = {expression}

In this case the variable name is "i" and the expression is a simple value,
the number one.

The `while` command starts a loop.  The generic form is: >

	while {condition}
	  {statements}
	endwhile

The statements until the matching `endwhile` are executed for as long as the
condition is true.  The condition used here is the expression "i < 5".  This
is true when the variable i is smaller than five.
	Note:
	If you happen to write a while loop that keeps on running, you can
	interrupt it by pressing CTRL-C (CTRL-Break on MS-Windows).

The `echo` command prints its arguments.  In this case the string "count is"
and the value of the variable i.  Since i is one, this will print:

	count is 1 ~

Then there is the `i += 1` command.  This does the same thing as "i = i + 1",
it adds one to the variable i and assigns the new value to the same variable.

The example was given to explain the commands, but would you really want to
make such a loop, it can be written much more compact: >

	for i in range(1, 4)
	  echo $"count is {i}"
	endfor

We won't explain how `for`, `range()`and `$"string"` work until later.  Follow
the links if you are impatient.


TRYING OUT EXAMPLES

You can easily try out most examples in these help files without saving the
commands to a file.  For example, to try out the "for" loop above do this:
1. position the cursor on the "for"
2. start Visual mode with "v"
3. move down to the "endfor"
4. press colon, then "so" and Enter

After pressing colon you will see ":'<,'>", which is the range of the Visually
selected text.

For some commands it matters they are executed as in |Vim9| script.  But typed
commands normally use legacy script syntax, such as the example below that
causes the E1004 error.  For that use this fourth step:
4. press colon, then "vim9 so" and Enter

"vim9" is short for `vim9cmd`, which is a command modifier to execute the
following command in |Vim9| syntax.

Note that this won't work for examples that require a script context.


FOUR KINDS OF NUMBERS

Numbers can be decimal, hexadecimal, octal and binary.

A hexadecimal number starts with "0x" or "0X".  For example "0x1f" is decimal
31 and "0x1234" is decimal 4660.

An octal number starts with "0o", "0O".  "0o17" is decimal 15.

A binary number starts with "0b" or "0B".  For example "0b101" is decimal 5.

A decimal number is just digits.  Careful: In legacy script don't put a zero
before a decimal number, it will be interpreted as an octal number!  That's
one reason to use |Vim9| script.

The `echo` command evaluates its argument and when it is a number always
prints the decimal form.  Example: >

	echo 0x7f 0o36
<	127 30 ~

A number is made negative with a minus sign.  This also works for hexadecimal,
octal and binary numbers: >

	echo -0x7f
<	-127 ~

A minus sign is also used for subtraction.  This can sometimes lead to
confusion.  If we put a minus sign before both numbers we get an error: >

	echo -0x7f -0o36
<	E1004: White space required before and after '-' at "-0o36" ~

Note: if you are not using a |Vim9| script to try out these commands but type
them directly, they will be executed as legacy script.  Then the echo command
sees the second minus sign as subtraction.  To get the error, prefix the
command with `vim9cmd`: >

	vim9cmd echo -0x7f -0o36
<	E1004: White space required before and after '-' at "-0o36" ~

White space in an expression is often required to make sure it is easy to read
and avoid errors.  Such as thinking that the "-0o36" above makes the number
negative, while it is actually seen as a subtraction.

To actually have the minus sign be used for negation, you can put the second
expression in parentheses: >

	echo -0x7f (-0o36)
<	-127 -30 ~

==============================================================================
*41.2*	Variables

A variable name consists of ASCII letters, digits and the underscore.  It
cannot start with a digit.  Valid variable names are:

	counter
	_aap3
	very_long_variable_name_with_underscores
	CamelCaseName
	LENGTH

Invalid names are "foo.bar" and "6var".

Some variables are global.  To see a list of currently defined global
variables type this command: >

	:let

You can use global variables everywhere.  However, it is too easy to use the
same name in two unrelated scripts.  Therefore variables declared in a script
are local to that script.  For example, if you have this in "script1.vim": >

	vim9script
	var counter = 5
	echo counter
<	5 ~

And you try to use the variable in "script2.vim": >

	vim9script
	echo counter
<	E121: Undefined variable: counter ~

Using a script-local variable means you can be sure that it is only changed in
that script and not elsewhere.

If you do want to share variables between scripts, use the "g:" prefix and
assign the value directly, do not use `var`.  And use a specific name to avoid
mistakes.  Thus in "script1.vim": >

	vim9script
	g:mash_counter = 5
	echo g:mash_counter
<	5 ~

And then in "script2.vim": >

	vim9script
	echo g:mash_counter
<	5 ~

Global variables can also be accessed on the command line, E.g. typing this: >
	echo g:mash_counter
That will not work for a script-local variable.

More about script-local variables here: |script-variable|.

There are more kinds of variables, see |internal-variables|.  The most often
used ones are:

	b:name		variable local to a buffer
	w:name		variable local to a window
	g:name		global variable (also in a function)
	v:name		variable predefined by Vim


DELETING VARIABLES

Variables take up memory and show up in the output of the `let` command.  To
delete a global variable use the `unlet` command.  Example: >

	unlet g:counter

This deletes the global variable "g:counter" to free up the memory it uses.
If you are not sure if the variable exists, and don't want an error message
when it doesn't, append !: >

	unlet! g:counter

You cannot `unlet` script-local variables in |Vim9| script, only in legacy
script.

When a script has been processed to the end, the local variables declared
there will not be deleted.  Functions defined in the script can use them.
Example:
>
	vim9script
	var counter = 0
	def g:GetCount(): number
	  counter += 1
	  return counter
	enddef

Every time you call the function it will return the next count: >
	:echo g:GetCount()
<	1 ~
>
	:echo g:GetCount()
<	2 ~

If you are worried a script-local variable is consuming too much memory, set
it to an empty or null value after you no longer need it.  Example: >
	var lines = readfile(...)
	...
	lines = []

Note: below we'll leave out the `vim9script` line from examples, so we can
concentrate on the relevant commands, but you'll still need to put it at the
top of your script file.


STRING VARIABLES AND CONSTANTS

So far only numbers were used for the variable value.  Strings can be used as
well.  Numbers and strings are the basic types of variables that Vim supports.
Example: >

	var name = "Peter"
	echo name
<	Peter ~

Every variable has a type.  Very often, as in this example, the type is
defined by assigning a value.  This is called type inference.  If you do not
want to give the variable a value yet, you need to specify the type: >

	var name: string
	var age: number
	if male
	   name = "Peter"
	   age = 42
	else
	   name = "Elisa"
	   age = 45
	endif

If you make a mistake and try to assign the wrong type of value you'll get an
error: >

	age = "Peter"
<	E1012: Type mismatch; expected number but got string ~

More about types in |41.8|.

To assign a string value to a variable, you can use a string constant.  There
are two types of these.  First the string in double quotes, as we used
already.  If you want to include a double quote inside the string, put a
backslash in front of it: >

	var name = "he is \"Peter\""
	echo name
<	he is "Peter" ~

To avoid the need for backslashes, you can use a string in single quotes: >

	var name = 'he is "Peter"'
	echo name
<	he is "Peter" ~

Inside a single-quote string all the characters are as they are.  Only the
single quote itself is special: you need to use two to get one.  A backslash
is taken literally, thus you can't use it to change the meaning of the
character after it: >

	var name = 'P\e''ter'''
	echo name
<	P\e'ter' ~

In double-quote strings it is possible to use special characters.  Here are a
few useful ones:

	\t		<Tab>
	\n		<NL>, line break
	\r		<CR>, <Enter>
	\e		<Esc>
	\b		<BS>, backspace
	\"		"
	\\		\, backslash
	\<Esc>		<Esc>
	\<C-W>		CTRL-W

The last two are just examples.  The  "\<name>" form can be used to include
the special key "name".

See |expr-quote| for the full list of special items in a string.

==============================================================================
*41.3*	Expressions

Vim has a fairly standard way to handle expressions.  You can read the
definition here: |expression-syntax|.  Here we will show the most common
items.

The numbers, strings and variables mentioned above are expressions by
themselves.  Thus everywhere an expression is expected, you can use a number,
string or variable.  Other basic items in an expression are:

	$NAME		environment variable
	&name		option value
	@r		register contents

Examples: >

	echo "The value of 'tabstop' is" &ts
	echo "Your home directory is" $HOME
	if @a == 'text'

The &name form can also be used to set an option value, do something and
restore the old value.  Example: >

	var save_ic = &ic
	set noic
	s/The Start/The Beginning/
	&ic = save_ic

This makes sure the "The Start" pattern is used with the 'ignorecase' option
off.  Still, it keeps the value that the user had set.  (Another way to do
this would be to add "\C" to the pattern, see |/\C|.)


MATHEMATICS

It becomes more interesting if we combine these basic items.  Let's start with
mathematics on numbers:

	a + b		add
	a - b		subtract
	a * b		multiply
	a / b		divide
	a % b		modulo

The usual precedence is used.  Example: >

	echo 10 + 5 * 2
<	20 ~

Grouping is done with parentheses.  No surprises here.  Example: >

	echo (10 + 5) * 2
<	30 ~


OTHERS

Strings can be concatenated with ".." (see |expr6|).  Example: >

	echo "Name: " .. name
	Name: Peter

When the "echo" command gets multiple arguments, it separates them with a
space.  In the example the argument is a single expression, thus no space is
inserted.

If you don't like the concatenation you can use the $"string" form, which
accepts an expression in curly braces: >
	echo $"Name: {name}"

See |interpolated-string| for more information.

Borrowed from the C language is the conditional expression: >

	a ? b : c

If "a" evaluates to true "b" is used, otherwise "c" is used.  Example: >

	var nr = 4
	echo nr > 5 ? "nr is big" : "nr is small"
<	nr is small ~

The three parts of the constructs are always evaluated first, thus you could
see it works as: >

	(a) ? (b) : (c)

There is also the falsy operator: >
	echo name ?? "No name given"
See |??|.

==============================================================================
*41.4*	Conditionals

The `if` commands executes the following statements, until the matching
`endif`, only when a condition is met.  The generic form is:

	if {condition}
	   {statements}
	endif

Only when the expression {condition} evaluates to true or one will the
{statements} be executed.  If they are not executed they must still be valid
commands.  If they contain garbage, Vim won't be able to find the matching
`endif`.

You can also use `else`.  The generic form for this is:

	if {condition}
	   {statements}
	else
	   {statements}
	endif

The second {statements} block is only executed if the first one isn't.

Finally, there is `elseif`

	if {condition}
	   {statements}
	elseif {condition}
	   {statements}
	endif

This works just like using `else` and then `if`, but without the need for an
extra `endif`.

A useful example for your vimrc file is checking the 'term' option and doing
something depending upon its value: >

	if &term == "xterm"
	  # Do stuff for xterm
	elseif &term == "vt100"
	  # Do stuff for a vt100 terminal
	else
	  # Do something for other terminals
	endif

This uses "#" to start a comment, more about that later.


LOGIC OPERATIONS

We already used some of them in the examples.  These are the most often used
ones:

	a == b		equal to
	a != b		not equal to
	a >  b		greater than
	a >= b		greater than or equal to
	a <  b		less than
	a <= b		less than or equal to

The result is true if the condition is met and false otherwise.  An example: >

	if v:version >= 800
	  echo "congratulations"
	else
	  echo "you are using an old version, upgrade!"
	endif

Here "v:version" is a variable defined by Vim, which has the value of the Vim
version.  800 is for version 8.0, version 8.1 has the value 801.  This is
useful to write a script that works with multiple versions of Vim.
See |v:version|.  You can also check for a specific feature with `has()` or a
specific patch, see |has-patch|.

The logic operators work both for numbers and strings.  When comparing two
strings, the mathematical difference is used.  This compares byte values,
which may not be right for some languages.

If you try to compare a string with a number you will get an error.

For strings there are two more useful items:

	str =~ pat		matches with
	str !~ pat		does not match with

The left item "str" is used as a string.  The right item "pat" is used as a
pattern, like what's used for searching.  Example: >

	if str =~ " "
	  echo "str contains a space"
	endif
	if str !~ '\.$'
	  echo "str does not end in a full stop"
	endif

Notice the use of a single-quote string for the pattern.  This is useful,
because patterns tend to contain many backslashes and backslashes need to be
doubled in a double-quote string.

The match is not anchored, if you want to match the whole string start with
"^" and end with "$".

The 'ignorecase' option is not used when comparing strings.  When you do want
to ignore case append "?".  Thus "==?" compares two strings to be equal while
ignoring case.  For the full table see |expr-==|.


MORE LOOPING

The `while` command was already mentioned.  Two more statements can be used in
between the `while` and the `endwhile`:

	continue		Jump back to the start of the while loop; the
				loop continues.
	break			Jump forward to the `endwhile`; the loop is
				discontinued.

Example: >

	var counter = 1
	while counter < 40
	  if skip_number(counter)
	    continue
	  endif
	  if last_number(counter)
	    break
	  endif
	  sleep 50m
	  ++counter
	endwhile

The `sleep` command makes Vim take a nap.  The "50m" specifies fifty
milliseconds.  Another example is `sleep 4`, which sleeps for four seconds.

`continue` and `break` can also be used in between `for` and `endfor`.
Even more looping can be done with the `for` command, see below in |41.8|.

==============================================================================
*41.5*	Executing an expression

So far the commands in the script were executed by Vim directly.  The
`execute` command allows executing the result of an expression.  This is a
very powerful way to build commands and execute them.

An example is to jump to a tag, which is contained in a variable: >

	execute "tag " .. tag_name

The ".." is used to concatenate the string "tag " with the value of variable
"tag_name".  Suppose "tag_name" has the value "get_cmd", then the command that
will be executed is: >

	tag get_cmd

The `execute` command can only execute Ex commands.  The `normal` command
executes Normal mode commands.  However, its argument is not an expression but
the literal command characters.  Example: >

	normal gg=G

This jumps to the first line with "gg" and formats all lines with the "="
operator and the "G" movement.

To make `normal` work with an expression, combine `execute` with it.
Example: >

	execute "normal " .. count .. "j"

This will move the cursor "count" lines down.

Make sure that the argument for `normal` is a complete command.  Otherwise
Vim will run into the end of the argument and silently abort the command.  For
example, if you start the delete operator, you must give the movement command
also.  This works: >

	normal d$

This does nothing: >

	normal d

If you start Insert mode and do not end it with Esc, it will end anyway.  This
works to insert "new text": >

	execute "normal inew text"

If you want to do something after inserting text you do need to end Insert
mode: >

	execute "normal inew text\<Esc>b"

This inserts "new text" and puts the cursor on the first letter of "text".
Notice the use of the special key "\<Esc>".  This avoids having to enter a
real <Esc> character in your script.  That is where `execute` with a
double-quote string comes in handy.

If you don't want to execute a string as a command but evaluate it to get the
result of the expression, you can use the eval() function: >

	var optname = "path"
	var optvalue = eval('&' .. optname)

A "&" character is prepended to "path", thus the argument to eval() is
"&path".  The result will then be the value of the 'path' option.

==============================================================================
*41.6*	Using functions

Vim defines many functions and provides a large amount of functionality that
way.  A few examples will be given in this section.  You can find the whole
