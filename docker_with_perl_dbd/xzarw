	0,
	UC_use_AUX_TABLE_58,
	0,
	0x2132,
	0,
	0x2160,
	0,
	0x2183,
	0,
	0x24B6,
	0,
	0x2C00,
	0,
	0x2C60,
	0,
	0x23A,
	0x23E,
	0,
	0x2C67,
	0,
	0x2C69,
	0,
	0x2C6B,
	0,
	0x2C72,
	0,
	0x2C75,
	0,
	0x2C80,
	0,
	0x2C82,
	0,
	0x2C84,
	0,
	0x2C86,
	0,
	0x2C88,
	0,
	0x2C8A,
	0,
	0x2C8C,
	0,
	0x2C8E,
	0,
	0x2C90,
	0,
	0x2C92,
	0,
	0x2C94,
	0,
	0x2C96,
	0,
	0x2C98,
	0,
	0x2C9A,
	0,
	0x2C9C,
	0,
	0x2C9E,
	0,
	0x2CA0,
	0,
	0x2CA2,
	0,
	0x2CA4,
	0,
	0x2CA6,
	0,
	0x2CA8,
	0,
	0x2CAA,
	0,
	0x2CAC,
	0,
	0x2CAE,
	0,
	0x2CB0,
	0,
	0x2CB2,
	0,
	0x2CB4,
	0,
	0x2CB6,
	0,
	0x2CB8,
	0,
	0x2CBA,
	0,
	0x2CBC,
	0,
	0x2CBE,
	0,
	0x2CC0,
	0,
	0x2CC2,
	0,
	0x2CC4,
	0,
	0x2CC6,
	0,
	0x2CC8,
	0,
	0x2CCA,
	0,
	0x2CCC,
	0,
	0x2CCE,
	0,
	0x2CD0,
	0,
	0x2CD2,
	0,
	0x2CD4,
	0,
	0x2CD6,
	0,
	0x2CD8,
	0,
	0x2CDA,
	0,
	0x2CDC,
	0,
	0x2CDE,
	0,
	0x2CE0,
	0,
	0x2CE2,
	0,
	0x2CEB,
	0,
	0x2CED,
	0,
	0x2CF2,
	0,
	0x10A0,
	0,
	0x10C7,
	0,
	0x10CD,
	0,
	0xA640,
	0,
	0xA642,
	0,
	0xA644,
	0,
	0xA646,
	0,
	0xA648,
	0,
	0xA64A,
	0,
	0xA64C,
	0,
	0xA64E,
	0,
	0xA650,
	0,
	0xA652,
	0,
	0xA654,
	0,
	0xA656,
	0,
	0xA658,
	0,
	0xA65A,
	0,
	0xA65C,
	0,
	0xA65E,
	0,
	0xA660,
	0,
	0xA662,
	0,
	0xA664,
	0,
	0xA666,
	0,
	0xA668,
	0,
	0xA66A,
	0,
	0xA66C,
	0,
	0xA680,
	0,
	0xA682,
	0,
	0xA684,
	0,
	0xA686,
	0,
	0xA688,
	0,
	0xA68A,
	0,
	0xA68C,
	0,
	0xA68E,
	0,
	0xA690,
	0,
	0xA692,
	0,
	0xA694,
	0,
	0xA696,
	0,
	0xA698,
	0,
	0xA69A,
	0,
	0xA722,
	0,
	0xA724,
	0,
	0xA726,
	0,
	0xA728,
	0,
	0xA72A,
	0,
	0xA72C,
	0,
	0xA72E,
	0,
	0xA732,
	0,
	0xA734,
	0,
	0xA736,
	0,
	0xA738,
	0,
	0xA73A,
	0,
	0xA73C,
	0,
	0xA73E,
	0,
	0xA740,
	0,
	0xA742,
	0,
	0xA744,
	0,
	0xA746,
	0,
	0xA748,
	0,
	0xA74A,
	0,
	0xA74C,
	0,
	0xA74E,
	0,
	0xA750,
	0,
	0xA752,
	0,
	0xA754,
	0,
	0xA756,
	0,
	0xA758,
	0,
	0xA75A,
	0,
	0xA75C,
	0,
	0xA75E,
	0,
	0xA760,
	0,
	0xA762,
	0,
	0xA764,
	0,
	0xA766,
	0,
	0xA768,
	0,
	0xA76A,
	0,
	0xA76C,
	0,
	0xA76E,
	0,
	0xA779,
	0,
	0xA77B,
	0,
	0xA77E,
	0,
	0xA780,
	0,
	0xA782,
	0,
	0xA784,
	0,
	0xA786,
	0,
	0xA78B,
	0,
	0xA790,
	0,
	0xA792,
	0xA7C4,
	0,
	0xA796,
	0,
	0xA798,
	0,
	0xA79A,
	0,
	0xA79C,
	0,
	0xA79E,
	0,
	0xA7A0,
	0,
	0xA7A2,
	0,
	0xA7A4,
	0,
	0xA7A6,
	0,
	0xA7A8,
	0,
	0xA7B4,
	0,
	0xA7B6,
	0,
	0xA7B8,
	0,
	0xA7BA,
	0,
	0xA7BC,
	0,
	0xA7BE,
	0,
	0xA7C0,
	0,
	0xA7C2,
	0,
	0xA7C7,
	0,
	0xA7C9,
	0,
	0xA7D0,
	0,
	0xA7D6,
	0,
	0xA7D8,
	0,
	0xA7F5,
	0,
	0xA7B3,
	0,
	0x13A0,
	0,
	UC_use_AUX_TABLE_62,
	UC_use_AUX_TABLE_63,
	UC_use_AUX_TABLE_64,
	UC_use_AUX_TABLE_65,
	UC_use_AUX_TABLE_66,
	UC_use_AUX_TABLE_67,
	0,
	UC_use_AUX_TABLE_68,
	UC_use_AUX_TABLE_69,
	UC_use_AUX_TABLE_70,
	UC_use_AUX_TABLE_71,
	UC_use_AUX_TABLE_72,
	0,
	0xFF21,
	0,
	0x10400,
	0,
	0x104B0,
	0,
	0x10570,
	0,
	0x1057C,
	0,
	0x1058C,
	0,
	0x10594,
	0,
	0x10C80,
	0,
	0x118A0,
	0,
	0x16E40,
	0,
	0x1E900,
	0
};

#  endif	/* EBCDIC 037 */

#endif	/* defined(PERL_IN_UTF8_C) */

#if (defined(PERL_IN_REGCOMP_C) && ! defined(PERL_IN_XSUB_RE))

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UpperLatin1_invlist[] = {  /* for ASCII/Latin1 */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x80,
	0x100
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UpperLatin1_invlist[] = {  /* for EBCDIC 1047 */
	55,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x15,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x26,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xAD,
	0xAE,
	0xBD,
	0xBE,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA,
	0x100
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UpperLatin1_invlist[] = {  /* for EBCDIC 037 */
	57,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x16,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x25,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xB0,
	0xB1,
	0xBA,
	0xBC,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA,
	0x100
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_ASCII_invlist[] = {  /* for ASCII/Latin1 */
	2,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x80
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_ASCII_invlist[] = {  /* for EBCDIC 1047 */
	54,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x15,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x26,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xAD,
	0xAE,
	0xBD,
	0xBE,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_ASCII_invlist[] = {  /* for EBCDIC 037 */
	56,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4,
	0x5,
	0x6,
	0x7,
	0x8,
	0xB,
	0x14,
	0x16,
	0x17,
	0x18,
	0x1A,
	0x1C,
	0x20,
	0x25,
	0x28,
	0x2D,
	0x30,
	0x32,
	0x33,
	0x37,
	0x38,
	0x3C,
	0x3E,
	0x3F,
	0x41,
	0x4B,
	0x51,
	0x5A,
	0x5F,
	0x60,
	0x62,
	0x6B,
	0x70,
	0x79,
	0x80,
	0x81,
	0x8A,
	0x91,
	0x9A,
	0xA1,
	0xAA,
	0xB0,
	0xB1,
	0xBA,
	0xBC,
	0xC0,
	0xCA,
	0xD0,
	0xDA,
	0xE0,
	0xE1,
	0xE2,
	0xEA,
	0xF0,
	0xFA
};

#  endif	/* EBCDIC 037 */

static const UV UNI_ASSIGNED_invlist[] = {  /* for all charsets */
	1396,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x378,
	0x37A,
	0x380,
	0x384,
	0x38B,
	0x38C,
	0x38D,
	0x38E,
	0x3A2,
	0x3A3,
	0x530,
	0x531,
	0x557,
	0x559,
	0x58B,
	0x58D,
	0x590,
	0x591,
	0x5C8,
	0x5D0,
	0x5EB,
	0x5EF,
	0x5F5,
	0x600,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x7B2,
	0x7C0,
	0x7FB,
	0x7FD,
	0x82E,
	0x830,
	0x83F,
	0x840,
	0x85C,
	0x85E,
	0x85F,
	0x860,
	0x86B,
	0x870,
	0x88F,
	0x890,
	0x892,
	0x898,
	0x984,
	0x985,
	0x98D,
	0x98F,
	0x991,
	0x993,
	0x9A9,
	0x9AA,
	0x9B1,
	0x9B2,
	0x9B3,
	0x9B6,
	0x9BA,
	0x9BC,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CF,
	0x9D7,
	0x9D8,
	0x9DC,
	0x9DE,
	0x9DF,
	0x9E4,
	0x9E6,
	0x9FF,
	0xA01,
	0xA04,
	0xA05,
	0xA0B,
	0xA0F,
	0xA11,
	0xA13,
	0xA29,
	0xA2A,
	0xA31,
	0xA32,
	0xA34,
	0xA35,
	0xA37,
	0xA38,
	0xA3A,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA59,
	0xA5D,
	0xA5E,
	0xA5F,
	0xA66,
	0xA77,
	0xA81,
	0xA84,
	0xA85,
	0xA8E,
	0xA8F,
	0xA92,
	0xA93,
	0xAA9,
	0xAAA,
	0xAB1,
	0xAB2,
	0xAB4,
	0xAB5,
	0xABA,
	0xABC,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAD0,
	0xAD1,
	0xAE0,
	0xAE4,
	0xAE6,
	0xAF2,
	0xAF9,
	0xB00,
	0xB01,
	0xB04,
	0xB05,
	0xB0D,
	0xB0F,
	0xB11,
	0xB13,
	0xB29,
	0xB2A,
	0xB31,
	0xB32,
	0xB34,
	0xB35,
	0xB3A,
	0xB3C,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB55,
	0xB58,
	0xB5C,
	0xB5E,
	0xB5F,
	0xB64,
	0xB66,
	0xB78,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0xC00,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3C,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC5D,
	0xC5E,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC77,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDD,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF3,
	0xD00,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD50,
	0xD54,
	0xD64,
	0xD66,
	0xD80,
	0xD81,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF5,
	0xE01,
	0xE3B,
