=for hackers
Found in file config.h

=over 4

=item C<SIG_NUM>
X<SIG_NUM>

This symbol contains a list of signal numbers, in the same order as the
C<SIG_NAME> list. It is suitable for static array initialization, as in:

 int sig_num[] = { SIG_NUM };

The signals in the list are separated with commas, and the indices
within that list and the C<SIG_NAME> list match, so it's easy to compute
the signal name from a number or vice versa at the price of a small
dynamic linear lookup.
Duplicates are allowed, but are moved to the end of the list.
The signal number corresponding to C<sig_name[i]> is C<sig_number[i]>.
if (i < C<NSIG>) then C<sig_number[i]> == i.
The last element is 0, corresponding to the 0 at the end of
the C<sig_name_init> list.
Note that this variable is initialized from the C<sig_num_init>,
not from C<sig_num> (which is unused).

=back

=for hackers
Found in file config.h

=over 4

=item C<Sigsetjmp>
X<Sigsetjmp>

This macro is used in the same way as C<sigsetjmp()>, but will invoke
traditional C<setjmp()> if sigsetjmp isn't available.
See C<L</HAS_SIGSETJMP>>.

=over 3

 int  Sigsetjmp(jmp_buf env, int savesigs)

=back

=back

=for hackers
Found in file handy.h

=over 4

=item C<SIG_SIZE>
X<SIG_SIZE>

This variable contains the number of elements of the C<SIG_NAME>
and C<SIG_NUM> arrays, excluding the final C<NULL> entry.

=back

=for hackers
Found in file config.h

=over 4

=item C<whichsig>

=item C<whichsig_pv>

=item C<whichsig_pvn>

=item C<whichsig_sv>
X<whichsig>X<whichsig_pv>X<whichsig_pvn>X<whichsig_sv>

These all convert a signal name into its corresponding signal number;
returning -1 if no corresponding number was found.

They differ only in the source of the signal name:

C<whichsig_pv> takes the name from the C<NUL>-terminated string starting at
C<sig>.

C<whichsig> is merely a different spelling, a synonym, of C<whichsig_pv>.

C<whichsig_pvn> takes the name from the string starting at C<sig>, with length
C<len> bytes.

C<whichsig_sv> takes the name from the PV stored in the SV C<sigsv>.

=over 3

 I32  whichsig    (const char *sig)
 I32  whichsig_pv (const char *sig)
 I32  whichsig_pvn(const char *sig, STRLEN len)
 I32  whichsig_sv (SV *sigsv)

=back

=back

=for hackers
Found in file mg.c

=head1 Site configuration

These variables give details as to where various libraries,
installation destinations, I<etc.>, go, as well as what various
installation options were selected


=over 4

=item C<ARCHLIB>
X<ARCHLIB>

This variable, if defined, holds the name of the directory in
which the user wants to put architecture-dependent public
library files for perl5.  It is most often a local directory
such as F</usr/local/lib>.  Programs using this variable must be
prepared to deal with filename expansion.  If C<ARCHLIB> is the
same as C<PRIVLIB>, it is not defined, since presumably the
program already searches C<PRIVLIB>.

=back

=for hackers
Found in file config.h

=over 4

=item C<ARCHLIB_EXP>
X<ARCHLIB_EXP>

This symbol contains the ~name expanded version of C<ARCHLIB>, to be used
in programs that are not prepared to deal with ~ expansion at run-time.

=back

=for hackers
Found in file config.h

=over 4

=item C<ARCHNAME>
X<ARCHNAME>

This symbol holds a string representing the architecture name.
It may be used to construct an architecture-dependant pathname
where library files may be held under a private library, for
instance.

=back

=for hackers
Found in file config.h

=over 4

=item C<BIN>
X<BIN>

This symbol holds the path of the bin directory where the package will
be installed. Program must be prepared to deal with ~name substitution.

=back

=for hackers
Found in file config.h

=over 4

=item C<BIN_EXP>
X<BIN_EXP>

This symbol is the filename expanded version of the C<BIN> symbol, for
programs that do not want to deal with that at run-time.

=back

=for hackers
Found in file config.h

=over 4

=item C<INSTALL_USR_BIN_PERL>
X<INSTALL_USR_BIN_PERL>

This symbol, if defined, indicates that Perl is to be installed
also as F</usr/bin/perl>.

=back

=for hackers
Found in file config.h

=over 4

=item C<MULTIARCH>
X<MULTIARCH>

This symbol, if defined, signifies that the build
process will produce some binary files that are going to be
used in a cross-platform environment.  This is the case for
example with the NeXT "fat" binaries that contain executables
for several C<CPUs>.

=back

=for hackers
Found in file config.h

=over 4

=item C<PERL_INC_VERSION_LIST>
X<PERL_INC_VERSION_LIST>

This variable specifies the list of subdirectories in over
which F<perl.c>:C<incpush()> and F<lib/lib.pm> will automatically
search when adding directories to @C<INC>, in a format suitable
for a C initialization string.  See the C<inc_version_list> entry
in Porting/Glossary for more details.

=back

=for hackers
Found in file config.h

=over 4

=item C<PERL_OTHERLIBDIRS>
X<PERL_OTHERLIBDIRS>

This variable contains a colon-separated set of paths for the perl
binary to search for additional library files or modules.
These directories will be tacked to the end of @C<INC>.
Perl will automatically search below each path for version-
and architecture-specific directories.  See C<L</PERL_INC_VERSION_LIST>>
for more details.

=back

=for hackers
Found in file config.h

=over 4

=item C<PERL_RELOCATABLE_INC>
X<PERL_RELOCATABLE_INC>

This symbol, if defined, indicates that we'd like to relocate entries
in @C<INC> at run time based on the location of the perl binary.

=back

=for hackers
Found in file config.h

=over 4

=item C<PERL_TARGETARCH>
X<PERL_TARGETARCH>

This symbol, if defined, indicates the target architecture
Perl has been cross-compiled to.  Undefined if not a cross-compile.

=back

=for hackers
Found in file config.h

=over 4

=item C<PERL_USE_DEVEL>
X<PERL_USE_DEVEL>

This symbol, if defined, indicates that Perl was configured with
C<-Dusedevel>, to enable development features.  This should not be
done for production builds.

=back

=for hackers
Found in file config.h

=over 4

=item C<PERL_VENDORARCH>
X<PERL_VENDORARCH>

If defined, this symbol contains the name of a private library.
The library is private in the sense that it needn't be in anyone's
execution path, but it should be accessible by the world.
It may have a ~ on the front.
The standard distribution will put nothing in this directory.
Vendors who distribute perl may wish to place their own
architecture-dependent modules and extensions in this directory with

 MakeMaker Makefile.PL INSTALLDIRS=vendor

or equivalent.  See C<L<INSTALL>> for details.

=back

=for hackers
Found in file config.h

=over 4

=item C<PERL_VENDORARCH_EXP>
X<PERL_VENDORARCH_EXP>

This symbol contains the ~name expanded version of C<PERL_VENDORARCH>, to be used
in programs that are not prepared to deal with ~ expansion at run-time.

=back

=for hackers
Found in file config.h

=over 4

=item C<PERL_VENDORLIB_EXP>
X<PERL_VENDORLIB_EXP>

This symbol contains the ~name expanded version of C<VENDORLIB>, to be used
in programs that are not prepared to deal with ~ expansion at run-time.

=back

=for hackers
Found in file config.h

=over 4

=item C<PERL_VENDORLIB_STEM>
X<PERL_VENDORLIB_STEM>

This define is C<PERL_VENDORLIB_EXP> with any trailing version-specific component
removed.  The elements in C<inc_version_list> (C<inc_version_list>.U (part of metaconfig)) can
be tacked onto this variable to generate a list of directories to search.

=back

=for hackers
Found in file config.h

=over 4

=item C<PRIVLIB>
X<PRIVLIB>

This symbol contains the name of the private library for this package.
The library is private in the sense that it needn't be in anyone's
execution path, but it should be accessible by the world.  The program
should be prepared to do ~ expansion.

=back

=for hackers
Found in file config.h

=over 4

=item C<PRIVLIB_EXP>
X<PRIVLIB_EXP>

This symbol contains the ~name expanded version of C<PRIVLIB>, to be used
in programs that are not prepared to deal with ~ expansion at run-time.

=back

=for hackers
Found in file config.h

=over 4

=item C<SITEARCH>
X<SITEARCH>

This symbol contains the name of the private library for this package.
The library is private in the sense that it needn't be in anyone's
execution path, but it should be accessible by the world.  The program
should be prepared to do ~ expansion.
The standard distribution will put nothing in this directory.
After perl has been installed, users may install their own local
architecture-dependent modules in this directory with

 MakeMaker Makefile.PL

or equivalent.  See C<L<INSTALL>> for details.

=back

=for hackers
Found in file config.h

=over 4

=item C<SITEARCH_EXP>
X<SITEARCH_EXP>

This symbol contains the ~name expanded version of C<SITEARCH>, to be used
in programs that are not prepared to deal with ~ expansion at run-time.

=back

=for hackers
Found in file config.h

=over 4

=item C<SITELIB>
X<SITELIB>

This symbol contains the name of the private library for this package.
The library is private in the sense that it needn't be in anyone's
execution path, but it should be accessible by the world.  The program
should be prepared to do ~ expansion.
The standard distribution will put nothing in this directory.
After perl has been installed, users may install their own local
architecture-independent modules in this directory with

 MakeMaker Makefile.PL

or equivalent.  See C<L<INSTALL>> for details.

=back

=for hackers
Found in file config.h

=over 4

=item C<SITELIB_EXP>
X<SITELIB_EXP>

This symbol contains the ~name expanded version of C<SITELIB>, to be used
in programs that are not prepared to deal with ~ expansion at run-time.

=back

=for hackers
Found in file config.h

=over 4

=item C<SITELIB_STEM>
X<SITELIB_STEM>

This define is C<SITELIB_EXP> with any trailing version-specific component
removed.  The elements in C<inc_version_list> (C<inc_version_list>.U (part of metaconfig)) can
be tacked onto this variable to generate a list of directories to search.

=back

=for hackers
Found in file config.h

=over 4

=item C<STARTPERL>
X<STARTPERL>

This variable contains the string to put in front of a perl
script to make sure (one hopes) that it runs with perl and not
some shell.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_64_BIT_ALL>
X<USE_64_BIT_ALL>

This symbol, if defined, indicates that 64-bit integers should
be used when available.  If not defined, the native integers
will be used (be they 32 or 64 bits).  The maximal possible
64-bitness is employed: LP64 or C<ILP64>, meaning that you will
be able to use more than 2 gigabytes of memory.  This mode is
even more binary incompatible than C<USE_64_BIT_INT>. You may not
be able to run the resulting executable in a 32-bit C<CPU> at all or
you may need at least to reboot your OS to 64-bit mode.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_64_BIT_INT>
X<USE_64_BIT_INT>

This symbol, if defined, indicates that 64-bit integers should
be used when available.  If not defined, the native integers
will be employed (be they 32 or 64 bits).  The minimal possible
64-bitness is used, just enough to get 64-bit integers into Perl.
This may mean using for example "long longs", while your memory
may still be limited to 2 gigabytes.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_BSD_GETPGRP>
X<USE_BSD_GETPGRP>

This symbol, if defined, indicates that getpgrp needs one
arguments whereas C<USG> one needs none.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_BSD_SETPGRP>
X<USE_BSD_SETPGRP>

This symbol, if defined, indicates that setpgrp needs two
arguments whereas C<USG> one needs none.  See also C<L</HAS_SETPGID>>
for a C<POSIX> interface.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_C_BACKTRACE>
X<USE_C_BACKTRACE>

This symbol, if defined, indicates that Perl should
be built with support for backtrace.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_CPLUSPLUS>
X<USE_CPLUSPLUS>

This symbol, if defined, indicates that a C++ compiler was
used to compiled Perl and will be used to compile extensions.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_CROSS_COMPILE>
X<USE_CROSS_COMPILE>

This symbol, if defined, indicates that Perl is being cross-compiled.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_DTRACE>
X<USE_DTRACE>

This symbol, if defined, indicates that Perl should
be built with support for DTrace.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_DYNAMIC_LOADING>
X<USE_DYNAMIC_LOADING>

This symbol, if defined, indicates that dynamic loading of
some sort is available.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_FAST_STDIO>
X<USE_FAST_STDIO>

This symbol, if defined, indicates that Perl should
be built to use 'fast stdio'.
Defaults to define in Perls 5.8 and earlier, to undef later.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_ITHREADS>
X<USE_ITHREADS>

This symbol, if defined, indicates that Perl should be built to
use the interpreter-based threading implementation.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_KERN_PROC_PATHNAME>
X<USE_KERN_PROC_PATHNAME>

This symbol, if defined, indicates that we can use sysctl with
C<KERN_PROC_PATHNAME> to get a full path for the executable, and hence
convert $^X to an absolute path.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_LARGE_FILES>
X<USE_LARGE_FILES>

This symbol, if defined, indicates that large file support
should be used when available.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_LONG_DOUBLE>
X<USE_LONG_DOUBLE>

This symbol, if defined, indicates that long doubles should
be used when available.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_MORE_BITS>
X<USE_MORE_BITS>

This symbol, if defined, indicates that 64-bit interfaces and
long doubles should be used when available.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_NSGETEXECUTABLEPATH>
X<USE_NSGETEXECUTABLEPATH>

This symbol, if defined, indicates that we can use C<_NSGetExecutablePath>
and realpath to get a full path for the executable, and hence convert
$^X to an absolute path.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_PERLIO>
X<USE_PERLIO>

This symbol, if defined, indicates that the PerlIO abstraction should
be used throughout.  If not defined, stdio should be
used in a fully backward compatible manner.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_QUADMATH>
X<USE_QUADMATH>

This symbol, if defined, indicates that the quadmath library should
be used when available.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_REENTRANT_API>
X<USE_REENTRANT_API>

This symbol, if defined, indicates that Perl should
try to use the various C<_r> versions of library functions.
This is extremely experimental.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_SEMCTL_SEMID_DS>
X<USE_SEMCTL_SEMID_DS>

This symbol, if defined, indicates that C<struct semid_ds> * is
used for semctl C<IPC_STAT>.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_SEMCTL_SEMUN>
X<USE_SEMCTL_SEMUN>

This symbol, if defined, indicates that C<union semun> is
used for semctl C<IPC_STAT>.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_SITECUSTOMIZE>
X<USE_SITECUSTOMIZE>

This symbol, if defined, indicates that sitecustomize should
be used.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_SOCKS>
X<USE_SOCKS>

This symbol, if defined, indicates that Perl should
be built to use socks.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_STAT_BLOCKS>
X<USE_STAT_BLOCKS>

This symbol is defined if this system has a stat structure declaring
C<st_blksize> and C<st_blocks>.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_STDIO_BASE>
X<USE_STDIO_BASE>

This symbol is defined if the C<_base> field (or similar) of the
stdio C<FILE> structure can be used to access the stdio buffer for
a file handle.  If this is defined, then the C<FILE_base(fp)> macro
will also be defined and should be used to access this field.
Also, the C<FILE_bufsiz(fp)> macro will be defined and should be used
to determine the number of bytes in the buffer.  C<USE_STDIO_BASE>
will never be defined unless C<USE_STDIO_PTR> is.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_STDIO_PTR>
X<USE_STDIO_PTR>

This symbol is defined if the C<_ptr> and C<_cnt> fields (or similar)
of the stdio C<FILE> structure can be used to access the stdio buffer
for a file handle.  If this is defined, then the C<FILE_ptr(fp)>
and C<FILE_cnt(fp)> macros will also be defined and should be used
to access these fields.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_STRICT_BY_DEFAULT>
X<USE_STRICT_BY_DEFAULT>

This symbol, if defined, enables additional defaults.
At this time it only enables implicit strict by default.

=back

=for hackers
Found in file config.h

=over 4

=item C<USE_THREADS>
X<USE_THREADS>

This symbol, if defined, indicates that Perl should
be built to use threads.  At present, it is a synonym for
and C<USE_ITHREADS>, but eventually the source ought to be
changed to use this to mean C<_any_> threading implementation.

=back

=for hackers
Found in file config.h

=head1 Sockets configuration values

=over 4

=item C<HAS_SOCKADDR_IN6>
X<HAS_SOCKADDR_IN6>

This symbol, if defined, indicates the availability of
C<struct sockaddr_in6>;

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SOCKADDR_SA_LEN>
X<HAS_SOCKADDR_SA_LEN>

This symbol, if defined, indicates that the C<struct sockaddr>
structure has a member called C<sa_len>, indicating the length of
the structure.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SOCKADDR_STORAGE>
X<HAS_SOCKADDR_STORAGE>

This symbol, if defined, indicates the availability of
C<struct sockaddr_storage>;

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SOCKATMARK>
X<HAS_SOCKATMARK>

This symbol, if defined, indicates that the C<sockatmark> routine is
available to test whether a socket is at the out-of-band mark.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SOCKET>
X<HAS_SOCKET>

This symbol, if defined, indicates that the C<BSD> C<socket> interface is
supported.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SOCKETPAIR>
X<HAS_SOCKETPAIR>

This symbol, if defined, indicates that the C<BSD> C<socketpair()> call is
supported.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SOCKS5_INIT>
X<HAS_SOCKS5_INIT>

This symbol, if defined, indicates that the C<socks5_init> routine is
available to initialize C<SOCKS> 5.

=back

=for hackers
Found in file config.h

=over 4

=item C<I_SOCKS>
X<I_SOCKS>

This symbol, if defined, indicates that F<socks.h> exists and
should be included.

=over 3

 #ifdef I_SOCKS
     #include <socks.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<I_SYS_SOCKIO>
X<I_SYS_SOCKIO>

This symbol, if defined, indicates the F<sys/sockio.h> should be included
to get socket ioctl options, like C<SIOCATMARK>.

=over 3

 #ifdef I_SYS_SOCKIO
     #include <sys_sockio.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=head1 Source Filters
