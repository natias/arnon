	0x88E,
	0x88F
};

static const UV UNI_JG__WAW_invlist[] = {  /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x624,
	0x625,
	0x648,
	0x649,
	0x676,
	0x678,
	0x6C4,
	0x6CC,
	0x6CF,
	0x6D0,
	0x778,
	0x77A,
	0x8AB,
	0x8AC
};

static const UV UNI_JG__YEH_invlist[] = {  /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x620,
	0x621,
	0x626,
	0x627,
	0x649,
	0x64B,
	0x678,
	0x679,
	0x6D0,
	0x6D2,
	0x777,
	0x778,
	0x8A8,
	0x8AA,
	0x8BA,
	0x8BB
};

static const UV UNI_JG__YEHBARREE_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6D2,
	0x6D4
};

static const UV UNI_JG__YEHWITHTAIL_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x6CD,
	0x6CE
};

static const UV UNI_JG__YUDH_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x71D,
	0x71E
};

static const UV UNI_JG__YUDHHE_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x71E,
	0x71F
};

static const UV UNI_JG__ZAIN_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x719,
	0x71A
};

static const UV UNI_JG__ZHAIN_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x74D,
	0x74E
};

static const UV UNI_JOINC_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x200C,
	0x200E
};

static const UV UNI_JT__C_invlist[] = {  /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x640,
	0x641,
	0x7FA,
	0x7FB,
	0x883,
	0x886,
	0x180A,
	0x180B,
	0x200D,
	0x200E
};

static const UV UNI_JT__D_invlist[] = {  /* for all charsets */
	151,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x620,
	0x621,
	0x626,
	0x627,
	0x628,
	0x629,
	0x62A,
	0x62F,
	0x633,
	0x640,
	0x641,
	0x648,
	0x649,
	0x64B,
	0x66E,
	0x670,
	0x678,
	0x688,
	0x69A,
	0x6C0,
	0x6C1,
	0x6C3,
	0x6CC,
	0x6CD,
	0x6CE,
	0x6CF,
	0x6D0,
	0x6D2,
	0x6FA,
	0x6FD,
	0x6FF,
	0x700,
	0x712,
	0x715,
	0x71A,
	0x71E,
	0x71F,
	0x728,
	0x729,
	0x72A,
	0x72B,
	0x72C,
	0x72D,
	0x72F,
	0x74E,
	0x759,
	0x75C,
	0x76B,
	0x76D,
	0x771,
	0x772,
	0x773,
	0x775,
	0x778,
	0x77A,
	0x780,
	0x7CA,
	0x7EB,
	0x841,
	0x846,
	0x848,
	0x849,
	0x84A,
	0x854,
	0x855,
	0x856,
	0x860,
	0x861,
	0x862,
	0x866,
	0x868,
	0x869,
	0x886,
	0x887,
	0x889,
	0x88E,
	0x8A0,
	0x8AA,
	0x8AF,
	0x8B1,
	0x8B3,
	0x8B9,
	0x8BA,
	0x8C9,
	0x1807,
	0x1808,
	0x1820,
	0x1879,
	0x1887,
	0x18A9,
	0x18AA,
	0x18AB,
	0xA840,
	0xA872,
	0x10AC0,
	0x10AC5,
	0x10AD3,
	0x10AD7,
	0x10AD8,
	0x10ADD,
	0x10ADE,
	0x10AE1,
	0x10AEB,
	0x10AEF,
	0x10B80,
	0x10B81,
	0x10B82,
	0x10B83,
	0x10B86,
	0x10B89,
	0x10B8A,
	0x10B8C,
	0x10B8D,
	0x10B8E,
	0x10B90,
	0x10B91,
	0x10BAD,
	0x10BAF,
	0x10D01,
	0x10D22,
	0x10D23,
	0x10D24,
	0x10F30,
	0x10F33,
	0x10F34,
	0x10F45,
	0x10F51,
	0x10F54,
	0x10F70,
	0x10F74,
	0x10F76,
	0x10F82,
	0x10FB0,
	0x10FB1,
	0x10FB2,
	0x10FB4,
	0x10FB8,
	0x10FB9,
	0x10FBB,
	0x10FBD,
	0x10FBE,
	0x10FC0,
	0x10FC1,
	0x10FC2,
	0x10FC4,
	0x10FC5,
	0x10FCA,
	0x10FCB,
	0x1E900,
	0x1E944
};

static const UV UNI_JT__L_invlist[] = {  /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA872,
	0xA873,
	0x10ACD,
	0x10ACE,
	0x10AD7,
	0x10AD8,
	0x10D00,
	0x10D01,
	0x10FCB,
	0x10FCC
};

static const UV UNI_JT__R_invlist[] = {  /* for all charsets */
	131,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x622,
	0x626,
	0x627,
	0x628,
	0x629,
	0x62A,
	0x62F,
	0x633,
	0x648,
	0x649,
	0x671,
	0x674,
	0x675,
	0x678,
	0x688,
	0x69A,
	0x6C0,
	0x6C1,
	0x6C3,
	0x6CC,
	0x6CD,
	0x6CE,
	0x6CF,
	0x6D0,
	0x6D2,
	0x6D4,
	0x6D5,
	0x6D6,
	0x6EE,
	0x6F0,
	0x710,
	0x711,
	0x715,
	0x71A,
	0x71E,
	0x71F,
	0x728,
	0x729,
	0x72A,
	0x72B,
	0x72C,
	0x72D,
	0x72F,
	0x730,
	0x74D,
	0x74E,
	0x759,
	0x75C,
	0x76B,
	0x76D,
	0x771,
	0x772,
	0x773,
	0x775,
	0x778,
	0x77A,
	0x840,
	0x841,
	0x846,
	0x848,
	0x849,
	0x84A,
	0x854,
	0x855,
	0x856,
	0x859,
	0x867,
	0x868,
	0x869,
	0x86B,
	0x870,
	0x883,
	0x88E,
	0x88F,
	0x8AA,
	0x8AD,
	0x8AE,
	0x8AF,
	0x8B1,
	0x8B3,
	0x8B9,
	0x8BA,
	0x10AC5,
	0x10AC6,
	0x10AC7,
	0x10AC8,
	0x10AC9,
	0x10ACB,
	0x10ACE,
	0x10AD3,
	0x10ADD,
	0x10ADE,
	0x10AE1,
	0x10AE2,
	0x10AE4,
	0x10AE5,
	0x10AEF,
	0x10AF0,
	0x10B81,
	0x10B82,
	0x10B83,
	0x10B86,
	0x10B89,
	0x10B8A,
	0x10B8C,
	0x10B8D,
	0x10B8E,
	0x10B90,
	0x10B91,
	0x10B92,
	0x10BA9,
	0x10BAD,
	0x10D22,
	0x10D23,
	0x10F33,
	0x10F34,
	0x10F54,
	0x10F55,
	0x10F74,
	0x10F76,
	0x10FB4,
	0x10FB7,
	0x10FB9,
	0x10FBB,
	0x10FBD,
	0x10FBE,
	0x10FC2,
	0x10FC4,
	0x10FC9,
	0x10FCA
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_JT__T_invlist[] = {  /* for ASCII/Latin1 */
	713,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAD,
	0xAE,
	0x300,
	0x370,
	0x483,
	0x48A,
	0x591,
	0x5BE,
	0x5BF,
	0x5C0,
	0x5C1,
	0x5C3,
	0x5C4,
	0x5C6,
	0x5C7,
	0x5C8,
	0x610,
	0x61B,
	0x61C,
	0x61D,
	0x64B,
	0x660,
	0x670,
	0x671,
	0x6D6,
	0x6DD,
	0x6DF,
	0x6E5,
	0x6E7,
	0x6E9,
	0x6EA,
	0x6EE,
	0x70F,
	0x710,
	0x711,
	0x712,
	0x730,
	0x74B,
	0x7A6,
	0x7B1,
	0x7EB,
	0x7F4,
	0x7FD,
	0x7FE,
	0x816,
	0x81A,
	0x81B,
	0x824,
	0x825,
	0x828,
	0x829,
	0x82E,
	0x859,
	0x85C,
	0x898,
	0x8A0,
	0x8CA,
	0x8E2,
	0x8E3,
	0x903,
	0x93A,
	0x93B,
	0x93C,
	0x93D,
	0x941,
	0x949,
	0x94D,
	0x94E,
	0x951,
	0x958,
	0x962,
	0x964,
	0x981,
	0x982,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0x9FE,
	0x9FF,
	0xA01,
	0xA03,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA83,
	0xABC,
	0xABD,
	0xAC1,
	0xAC6,
	0xAC7,
	0xAC9,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB02,
	0xB3C,
	0xB3D,
	0xB3F,
	0xB40,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB55,
	0xB57,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBC0,
	0xBC1,
	0xBCD,
	0xBCE,
	0xC00,
	0xC01,
	0xC04,
	0xC05,
	0xC3C,
	0xC3D,
	0xC3E,
	0xC41,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC82,
	0xCBC,
	0xCBD,
	0xCBF,
	0xCC0,
	0xCC6,
	0xCC7,
	0xCCC,
	0xCCE,
	0xCE2,
	0xCE4,
	0xD00,
	0xD02,
	0xD3B,
	0xD3D,
	0xD41,
	0xD45,
	0xD4D,
	0xD4E,
	0xD62,
	0xD64,
	0xD81,
	0xD82,
	0xDCA,
	0xDCB,
	0xDD2,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE31,
	0xE32,
	0xE34,
	0xE3B,
	0xE47,
	0xE4F,
	0xEB1,
	0xEB2,
	0xEB4,
	0xEBD,
	0xEC8,
	0xECF,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF71,
	0xF7F,
	0xF80,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102D,
	0x1031,
	0x1032,
	0x1038,
	0x1039,
	0x103B,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1071,
	0x1075,
	0x1082,
	0x1083,
	0x1085,
	0x1087,
	0x108D,
	0x108E,
	0x109D,
	0x109E,
	0x135D,
	0x1360,
	0x1712,
	0x1715,
	0x1732,
	0x1734,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B4,
	0x17B6,
	0x17B7,
	0x17BE,
	0x17C6,
	0x17C7,
	0x17C9,
	0x17D4,
	0x17DD,
	0x17DE,
	0x180B,
	0x180E,
	0x180F,
	0x1810,
	0x1885,
	0x1887,
	0x18A9,
	0x18AA,
	0x1920,
	0x1923,
	0x1927,
	0x1929,
	0x1932,
	0x1933,
	0x1939,
	0x193C,
	0x1A17,
	0x1A19,
	0x1A1B,
	0x1A1C,
	0x1A56,
	0x1A57,
	0x1A58,
	0x1A5F,
	0x1A60,
	0x1A61,
	0x1A62,
	0x1A63,
	0x1A65,
	0x1A6D,
	0x1A73,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1AB0,
	0x1ACF,
	0x1B00,
	0x1B04,
	0x1B34,
	0x1B35,
	0x1B36,
	0x1B3B,
	0x1B3C,
	0x1B3D,
	0x1B42,
	0x1B43,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B82,
	0x1BA2,
	0x1BA6,
	0x1BA8,
	0x1BAA,
	0x1BAB,
	0x1BAE,
	0x1BE6,
	0x1BE7,
	0x1BE8,
	0x1BEA,
	0x1BED,
	0x1BEE,
	0x1BEF,
	0x1BF2,
	0x1C2C,
	0x1C34,
	0x1C36,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE1,
	0x1CE2,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
	0x1CF8,
	0x1CFA,
	0x1DC0,
	0x1E00,
	0x200B,
	0x200C,
	0x200E,
	0x2010,
	0x202A,
	0x202F,
	0x2060,
	0x2065,
	0x206A,
	0x2070,
	0x20D0,
	0x20F1,
	0x2CEF,
	0x2CF2,
	0x2D7F,
	0x2D80,
	0x2DE0,
	0x2E00,
	0x302A,
	0x302E,
	0x3099,
	0x309B,
	0xA66F,
	0xA673,
	0xA674,
	0xA67E,
	0xA69E,
	0xA6A0,
	0xA6F0,
	0xA6F2,
	0xA802,
	0xA803,
	0xA806,
	0xA807,
	0xA80B,
	0xA80C,
	0xA825,
	0xA827,
	0xA82C,
	0xA82D,
	0xA8C4,
	0xA8C6,
	0xA8E0,
	0xA8F2,
	0xA8FF,
	0xA900,
	0xA926,
	0xA92E,
	0xA947,
	0xA952,
	0xA980,
	0xA983,
	0xA9B3,
	0xA9B4,
	0xA9B6,
	0xA9BA,
	0xA9BC,
	0xA9BE,
	0xA9E5,
	0xA9E6,
	0xAA29,
	0xAA2F,
	0xAA31,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAA43,
	0xAA44,
	0xAA4C,
	0xAA4D,
	0xAA7C,
	0xAA7D,
	0xAAB0,
	0xAAB1,
	0xAAB2,
	0xAAB5,
	0xAAB7,
	0xAAB9,
	0xAABE,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAEC,
	0xAAEE,
	0xAAF6,
	0xAAF7,
	0xABE5,
	0xABE6,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0xFB1E,
	0xFB1F,
	0xFE00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFEFF,
	0xFF00,
	0xFFF9,
	0xFFFC,
	0x101FD,
	0x101FE,
	0x102E0,
	0x102E1,
	0x10376,
	0x1037B,
	0x10A01,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A10,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A40,
	0x10AE5,
	0x10AE7,
	0x10D24,
	0x10D28,
	0x10EAB,
	0x10EAD,
	0x10EFD,
	0x10F00,
	0x10F46,
	0x10F51,
	0x10F82,
	0x10F86,
	0x11001,
	0x11002,
	0x11038,
	0x11047,
	0x11070,
	0x11071,
	0x11073,
	0x11075,
	0x1107F,
	0x11082,
	0x110B3,
	0x110B7,
	0x110B9,
	0x110BB,
	0x110C2,
	0x110C3,
	0x11100,
	0x11103,
	0x11127,
	0x1112C,
	0x1112D,
	0x11135,
	0x11173,
	0x11174,
	0x11180,
	0x11182,
	0x111B6,
	0x111BF,
	0x111C9,
	0x111CD,
	0x111CF,
	0x111D0,
	0x1122F,
	0x11232,
	0x11234,
	0x11235,
	0x11236,
	0x11238,
	0x1123E,
	0x1123F,
	0x11241,
	0x11242,
	0x112DF,
	0x112E0,
	0x112E3,
	0x112EB,
	0x11300,
	0x11302,
	0x1133B,
	0x1133D,
	0x11340,
	0x11341,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11438,
	0x11440,
	0x11442,
	0x11445,
	0x11446,
	0x11447,
	0x1145E,
	0x1145F,
	0x114B3,
	0x114B9,
	0x114BA,
	0x114BB,
	0x114BF,
	0x114C1,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
