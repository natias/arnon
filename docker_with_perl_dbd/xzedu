                if $line =~ m/\$Header:.*?\.mk.+(\d+\.\d+)/;
        }

        # We always store values into %MK before checking %edit
        # %edit can edit this in addition to $_ if needed.
        my $name;
        if (m/^\s*(\w+)\s*(\+?)=\s*/) {
            $name = $1;
            my $append = $2;
            my $value  = $';
            $value =~ s/^\@`/`/;
            if ($append) {
                my $expanded = expand_mkvars($value, 0, 1);
                print "Appending '$expanded' to $name\n" if $::opt_v;
                $value = $MK{$name} ? "$MK{$name} $expanded" : $expanded;
            }
            elsif ($MK{$name} && $MK{$name} ne $value) {
                print "$name macro redefined by Oracle\n from $MK{$name}\n   to $value\n"
                        if $::opt_d;
            }
            $MK{$name} = $value;
            $MK{$name} =~ s/^([^#]*)#.*/$1/; # remove comments

            if (exists $edit{$name}) {
                my $pre = $_;
                eval $edit{$name}; # execute code to edit $_
                print "Edit $name ($edit{$name}) failed: $@\n" if $@;
                if ($_ ne $pre and $::opt_v) {
                    $_ ? print "Edited $name definition\n from: $pre\n   to: $_\n"
                       : print "Deleted $name definition: $pre\n";
                }
            }
        }

        push(@MK, $_);
    }

    # --- now decide what to link with ---
    my $linkvia;

    if ($::opt_n) {
        $linkvia = "\$($::opt_n)" if $MK{$::opt_n};
        warn "Can't use '$::opt_n': not defined by .mk files\n"
                unless $linkvia;
    }

    # modern Oracle .mk files define OCISTATICLIBS and OCISHAREDLIBS
    if (!$linkvia && ($MK{OCISHAREDLIBS} || $MK{OCISTATICLIBS})) {
        $linkvia = '';
        if ($MK{OCISTATICLIBS} &&
                (  ($opts{LINKTYPE}||'') eq 'static'
                || "@ARGV" =~ m/\bLINKTYPE=static\b/
                || $::opt_c)
    ) {
            $linkvia .= '$(DEF_ON) '   if $MK{DEF_ON};
            $linkvia .= '$(SSCOREED) ' if $MK{SSCOREED};
            $linkvia .= '$(OCISTATICLIBS)';
        }
        else {
            $linkvia .= '$(SSDBED) '    if $MK{SSDBED};
            $linkvia .= '$(DEF_OPT) '   if $MK{DEF_OPT};
            if ($client_version_full =~ m/^8\.0\./ and $^O eq 'dec_osf' and $osvers >= 4.0) {
                $linkvia .= '$(SCOREPT) $(NAETAB) $(NAEDHS) $(LLIBRDBMS_CLT) $(LLIBMM) ';
                $linkvia .= '$(NETLIBS) $(CORELIBS) $(LLIBCOMMON) $(LLIBEPC) ';
                $need_ldlp_env = "LD_LIBRARY_PATH";
            }
            $linkvia .= '$(OCISHAREDLIBS)';
        }
    }

    $linkvia = '$(LIBCLNTSH)' if !$linkvia && $MK{LIBCLNTSH};

    # The oracle.mk file tends to define OCILDLIBS
    $linkvia = '$(OCILDLIBS)' if !$linkvia && $MK{OCILDLIBS};

    # Now we get into strange land of twisty turny macros
    if (!$linkvia && $MK{PROLDLIBS}) { # Oracle 7.3.x
        # XXX tweak for threaded perl? - use PROLLSsharedthread
        if ($MK{PROLDLIBS} =~ /thread/i && $MK{PROLLSshared}) {
            $linkvia = '$(PROLLSshared)';
        }
        else {
            $linkvia = '$(PROLDLIBS)';
        }
    }
    elsif (!$linkvia && int($mkver) == 1) {
        if ($MK{LLIBOCIC}) {
            $linkvia = '$(LLIBOCIC) $(TTLIBS)';
        } else {
            print "WARNING: Guessing what to link with.\n";
            $linkvia = '-locic $(TTLIBS)'; # XXX GUESS HACK
        }
    }
    elsif (!$linkvia && $MK{CCLIB}) { # Oracle XE
        $linkvia = '$(CCLIB)';
    }
    unless ($linkvia){
        die "ERROR parsing $file: Unable to determine what to link with.\n"
        ."Please send me copies of these files (one per mail message):\n@mkfiles\n";
    }
    $MK_TEXT = join("\n", @MK);
    return $linkvia;
}


sub read_inc_file {
    my $file = shift;
    my $fh;
    unless ($fh = new FileHandle "<$file") {
        # Workaround more oracle bungling (Oracle 7.3.2/Solaris x86)
        my $alt; ($alt = $file) =~ s/\.dk\.mk$/\.mk/;
        $fh = new FileHandle "<$alt";
        die "Unable to read $file: $!" unless $fh;
    }
    print "Reading $file\n";
    my @lines;
    push(@mkfiles, $file);
    while(<$fh>) {
        # soak up while looking for include directives
        push(@lines, $_), next
            unless /^\s*include\s+(.*?)\s*$/m;
        my $inc_file = $1;
        # deal with "include $(ORACLE_HOME)/..."
        # (can't use expand_mkvars() here)
        $inc_file =~ s/\$\((ORACLE_HOME|ORACLE_ROOT)\)/$ENV{$ORACLE_ENV}/og;
        push(@lines, read_inc_file($inc_file));
    }
    print "Read a total of ".@lines." lines from $file (including inclusions)\n" if $::opt_v;
    return @lines;
}


my %expand_shellescape;
sub expand_shellescape {
    my($orig, $level) = @_;
    my $cmd = $orig;
    my $debug = $::opt_d || $::opt_v;
    print "Evaluating `$orig`\n"
        if $debug && !$expand_shellescape{$orig};
    # ensure we have no $(...) vars left - strip out undefined ones:
    $cmd =~ s/\$[({](\w+)[})]/mkvar("$1", 1, 0, $level+1)/ge;
    print "  expanded `$cmd`\n" if $debug and $cmd ne $orig;
    my $result = `$cmd`;
    $result =~ s/\s+$/ /; # newlines etc to single space
    print "  returned '$result'\n"
        if $debug && !$expand_shellescape{$orig};
    $expand_shellescape{$orig} = $result;
    $result;
}

sub expand_mkvars {
    my ($string, $strip, $backtick, $level, $maxlevel) = @_;

    return if(!defined $string);

    $level ||= 1;
    local($_) = $string;
    print "$level Expanding $_\n" if $::opt_d;
    # handle whizzo AIX make feature used by Oracle
    s/\$[({] (\w+) \? ([^(]*?) : ([^(]*?) [})]/
        my ($vname, $vT, $vF) = ($1,$2,$3);
        $MK{$vname} = (mkvar($vname, 1, $backtick, $level+1)) ? $vT : $vF
    /xge; # can recurse
    s/\$[({] (\w+) [})]/
        mkvar("$1", $strip, $backtick, $level+1, $maxlevel)
    /xge; # can recurse
    s/`(.*?[^\\])`/expand_shellescape("$1", $level+1)/esg if $backtick; # can recurse
    s/\s*\\\n\s*/ /g; # merge continuations
    s/\s+/ /g; # shrink whitespace
    print "$level Expanded $string\n  to       $_\n\n" if $::opt_d and $_ ne $string;
    $_;
}


sub mkvar {
    my($var, $strip, $backtick, $level, $maxlevel) = @_;
    my  $default = $strip ? '' : "\$($var)";
    print "$level Variable: $var\n" if $::opt_d;
    return '$(LIBHOME)' if $var eq 'LIBHOME' && !$strip; # gets noisy
    return $ENV{$ORACLE_ENV} if $var eq 'ORACLE_HOME';
    my $val = $MK{$var};
    if (!defined $val and exists $ENV{$var}) {
        $val = $ENV{$var};
        print "Using value of $var from environment: $val\n"
                unless $var eq 'LD_LIBRARY_PATH';
    }
    return $default unless defined $val;
    if ($MK_expanding{$var}) {
        print "Definition of \$($var) includes \$($var).\n";
        return "\$($var)";
    }
    local($MK_expanding{$var}) = 1;
    return $val if $maxlevel && $level >= $maxlevel;
    return expand_mkvars($val, $strip, $backtick, $level+1, $maxlevel); # can recurse
}


sub read_file {
    my $file = shift;
    unless (open(ROL, "<$file")) {
        warn "WARNING: Unable to open $file: $!\n";
        return "";
    }
    my $text = join "", <ROL>;
    $text =~ s/\n+/ /g;
    close ROL;
    return $text;
}


sub find_bin{
    my $bin = shift;
    my $path_sep = $Config{path_sep};
    foreach (split(/\Q$path_sep/, $ENV{PATH})){
      return "$_/$bin" if -x "$_/$bin";
      {
        # let's try harder
        # see rt#84530 for why we don't go straight for it
        use filetest 'access';
        return "$_/$bin" if -x "$_/$bin";
      }
    }
    return undef;
}


sub find_headers {

    # compensate for case where final .0 isn't in the install directory name
    (my $client_version_trim = $client_version_full) =~ s/\.0$//;
    # for case where point is not in install directory name. OCI 21+
    (my $client_version_major = $client_version) =~ s/\..*$//;

    my @try = grep { -d $_ } ( # search the ORACLE_HOME we're using first
       # --- Traditional full-install locations
       "$OH/rdbms/public", # prefer public over others
       "$OH/rdbms",
       "$OH/plsql", # oratypes.h sometimes here (eg HPUX 11.23 Itanium Oracle 9.2.0),
       # --- Oracle SDK Instant Client locations
       "$OH/sdk/include",
       "$OH/include",
       # --- Oracle RPM Instant Client locations
       map { ( $_, $_."64"   ) }
       map { ( $_, "/usr$_" ) }
       map { "/include/oracle/$_/client" }
           $client_version,
           $client_version_trim,
           $client_version_full,
           $client_version_major,

       #"/include/oracle/$client_version_full/client",       # Instant Client for RedHat FC3
       #"/include/oracle/$client_version_trim/client",       # Instant Client for RedHat FC3
       #"/include/oracle/$client_version_major/client",      # Instant Client RPM (21+)
       #"/usr/include/oracle/$client_version/client64",      # Instant Client 11.1 and up
       #"/usr/include/oracle/$client_version/client",        # Instant Client 11.1 and up
       #"/usr/include/oracle/$client_version_full/client64", # Instant Client 64
       #"/usr/include/oracle/$client_version_full/client",   # Instant Client for RedHat FC4
       #"/usr/include/oracle/$client_version_trim/client64", # Instant Client 64
       #"/usr/include/oracle/$client_version_major/client64",# Instant Client RPM (21+)
       #"/usr/include/oracle/$client_version_trim/client",   # Instant Client for RedHat FC4
       #"/usr/include/oracle/$client_version_major/client",  # Instant Client RPM (21+)
    );

   # Add /usr/include/oracle based on the oracle home location if oracle home is under
   # /usr/lib/oracle ( Linux RPM install ).  The 11g instant client reports
   # client_version as 11.1.0.6 from sqlplus, but installs under 11.1.0.1.
   push @try, "/usr/include/oracle/$1" if ($OH =~ m|^/usr/lib/oracle/(.*)|);

   unshift @try, $::opt_h if $::opt_h;
   @try = grep { -d $_ } @try;

    my %h_file;
    if (@try) {
      find( sub {
         return unless /^o(ci.{3,4}|ratypes)\.h$/i;
         my $dir = $File::Find::dir;
         $h_file{$_} ||= $dir; # record first one found
         print "Found $dir/$_\n" if $::opt_d;
       }, @try);
    }

    my %h_dir = reverse %h_file; # distinct first found dirs
    my @h_dir = keys %h_dir;

    print "Found header files in @h_dir.\n" if @h_dir;

    if (!$h_file{'oratypes.h'} || !$h_file{'ocidfn.h'}) {
        print "\n\n*********************************************************\n";
        print "I can't find the header files I need in your Oracle installation.\n";
        print "You probably need to install some more Oracle components.\n";
        print "For Instant Client that means the SDK package.\n";
        print "I'll keep going, but the compile will probably fail.\n";
        print "See the appropriate troubleshooting guide for your OS for more information.$BELL\n";
        print "*********************************************************\n\n";
        sleep 5;
    }
    return @h_dir;
}


sub get_client_version {
    my ($force_version) = @_;

    my $client_version_full = '';

    my $sqlplus_exe = ($^O eq 'Win32' || $^O eq 'MSWin32' || $^O eq 'cygwin') ? "sqlplus.exe" : "sqlplus";

    # When building under Cygwin, ORACLE_HOME must be a native Windows
    # path so Oracle itself can use it, but it needs to be translated
    # to a Cygwin path so it can be joined into the PATH.
    # Otherwise, the colon in the drive specification (e.g. "c:") is
    # treated as a separator.
    my $OH_path = $OH;
    chomp($OH_path = `/usr/bin/cygpath -u $OH_path`) if $^O eq 'cygwin' && $OH;

    # if we have an ORACLE_HOME then prepend it to the PATH
    local $ENV{PATH} = join $Config{path_sep}, "$OH_path/bin", $OH_path, $ENV{PATH} if $OH;
    print "PATH=$ENV{PATH}\n" if $::opt_v;

    if (find_bin($sqlplus_exe)) {
        local $ENV{SQLPATH} = ""; # avoid $SQLPATH/login.sql causing sqlplus to hang
        # Try to use the _SQLPLUS_RELEASE predefined variable from sqlplus
        # Documented in the SQL*Plus reference guide:
        #  http://download-west.oracle.com/docs/cd/B12037_01/server.101/b12170/ch13.htm#i2675128
        # Output is in the following format:
        #   DEFINE _SQLPLUS_RELEASE = "902000400" (CHAR)       Representing 9.2.0.4.0
        #   DEFINE _SQLPLUS_RELEASE = "1001000200" (CHAR)      Representing 10.1.0.2.0
        open my $FH, '>', 'define.sql' or warn "Can't create define.sql: $!";
        print $FH "DEFINE _SQLPLUS_RELEASE\nQUIT\n";
        close $FH;
        my $sqlplus_release = `$sqlplus_exe -S /nolog \@define.sql 2>&1`;
        if ($sqlplus_release =~ m/(SP2-0750)|(SP2-0642)/) {
            my $x = $ENV{ORACLE_HOME};
            delete $ENV{ORACLE_HOME};
            $sqlplus_release = `$sqlplus_exe -S /nolog \@define.sql 2>&1`;
            $ENV{ORACLE_HOME} = $x;
        }
        unlink "define.sql";
        print $sqlplus_release; # the _SQLPLUS_RELEASE may not be on first line:
        if ($sqlplus_release =~ /DEFINE _SQLPLUS_RELEASE = "(\d?\d)(\d\d)(\d\d)(\d\d)(\d\d)"/) {
            $client_version_full = sprintf("%d.%d.%d.%d", $1, $2, $3, $4);
        }
        else {
            my $ldlib_note = ($Config{ldlibpthname})
                    ? "Specifically, your $Config{ldlibpthname} environment variable"
                : "Many systems need an environment variable (such as LD_LIBRARY_PATH, DYLD_LIBRARY_PATH)";
            warn qq{
            If sqlplus failed due to a linker/symbol/relocation/library error or similar problem
            then it's likely that you've not configured your environment correctly.
            $ldlib_note
            set to include the directory containing the Oracle libraries.
            \a\n};
            sleep 5;
        }
    }
    else {
        warn "Can't find sqlplus. Pity, it would have helped.\n";
    }

    if (!$client_version_full && $OH && open INST, "<$OH/install/unix.rgs") {
        local $/ = undef;
        <INST> =~ m/^(rdbms|sql\*plus)\s+([\d.]+)/m;
        $client_version_full = $2 if $2;
        close INST;
    }

    if (!$client_version_full && $OH && -x "$OH/orainst/inspdver" ) {
        open my $INST, "$OH/orainst/inspdver |"; # client only install does not have this
        my @inspdver = <$INST>;
        close $INST;
        foreach (@inspdver) {
            $client_version_full = $1 if m/^(\d+\.\d+\.\d+)\S*\s+.*RDBMS/;
            next unless $::opt_v
                or m/RDBMS/i   or m/PL.SQL/i
                or m/Precomp/i or m/Pro\*C/i;
            print $_;
        }
    }
    if (!$client_version_full) {
        print "I'm having trouble finding your Oracle version number... trying harder\n"
            unless $force_version;
        if ( $OH =~ m![^\d\.]((?:8|9|1\d)\.\d+\.\d+(\.\d+)?)! ) { #decode it from $OH if possible
            $client_version_full = $1;
        }
        elsif ( "$OH/" =~ m!\D(8|9|10)(\d)(\d?)\D!) { # scary but handy
            $client_version_full = join ".", $1, $2, ($3||'0');
        }
        elsif ( "$OH/" =~ m!/10g!) { # scary but handy
            $client_version_full = "10.0.0.0";
        }
   elsif ( "$OH/" =~ m!/usr/lib/oracle/(\d+\.\d)/!) { # Linux RPM
       $client_version_full = "$1.0.0";
   }
    }

    if ($force_version && $force_version ne $client_version_full) {
        print "Forcing Oracle version to be treated as $force_version\n";
        $client_version_full = $force_version;
    }

    if ($client_version_full && $client_version_full !~ m/^([789]|[12][0-9])\.[0-9]+/
    ) {
        print "Oracle version seems to be $client_version_full but that looks wrong so I'll ignore it.\n";
        $client_version_full = "";
    }

    if (!$client_version_full) {

      # set a supported client version as default
      $client_version_full = "9.2.0.4.0";

      print qq{
WARNING: Could not determine Oracle client version, defaulting to
version $client_version_full. Some features of DBD::Oracle may not work.
Oracle version-based logic in Makefile.PL may produce erroneous
results. You can use "perl Makefile.PL -V X.Y.Z" to specify your
client version.\n
};
      # pause for focus
      sleep 3;
    }

    # hack up a simple floating point form of the version: 8.1.6.2 => 8.1
    ($client_version = $client_version_full) =~ s/^(\d+\.\d+).*/$1/;

    print "Oracle Version $client_version_full ($client_version)\n";

    return $client_version unless wantarray;
    return ($client_version, $client_version_full);
}


sub symbol_search {
    $::opt_s ||= $::opt_S;
    print "Searching for symbol '$::opt_s' in $OH ...\n";
    my $dlext = $Config{dlext};
    system(qq{ cd $OH; for i in lib/*.[ao] lib/*.$dlext */lib/*.[ao];
        do echo "  searching oracle \$i ..."; PATH=/usr/ccs/bin:\$PATH nm \$i | grep $::opt_s; done
    });
    if ($::opt_S) {
        my @libpth = split ' ', $Config{libpth};
        print "Searching for symbol '$::opt_s' in @libpth ...\n";
        @libpth = map { ("$_/lib*.$dlext", "$_/lib*.a") } @libpth;
        system(qq{ cd $OH; for i in @libpth;
            do echo "  searching \$i ..."; PATH=/usr/ccs/bin:\$PATH nm \$i | grep $::opt_s; done
        });
    }
    print "Search done.\n";
    print "(Please only include the 'interesting' parts when mailing.)\n";
    exit;
}


# =====================================================================


{
    package MY; # SUPER needs package context, $self is not sufficient

    use strict;
    use Config;

    sub libscan {
       my($self, $path) = @_;
       return '' if $path =~ m/\.pl$/;
       $path;
    }


    sub post_initialize {
        my $self = shift;

        print "\nNote: \$ORACLE_HOME/lib must be added to your $need_ldlp_env environment variable\n",
              "before running \"make test\" and whenever DBD::Oracle is used.\n\n"
            if $need_ldlp_env && ($ENV{$need_ldlp_env}||'') !~ m:\Q$OH/lib\b:;

        eval { # This chunk is for Oracle::OCI
            require Data::Dumper;
            my $dmp = Data::Dumper->new([\%opts, $self], [qw(dbd_oracle_mm_opts dbd_oracle_mm_self)]);
            print main::MK_PM $dmp->Purity(1)->Terse(0)->Indent(1)->Useqq(1)->Dump;
        };
        if ($@) {
            warn "Can't dump config to mk.pm so you won't be able to build Oracle::OCI later if you wanted to: $@\n";
            print main::MK_PM qq{die "You need to reinstall DBD::Oracle after installing Data::Dumper\n"; };
        }
        close main::MK_PM or die "Error closing mk.pm: $!\n";

        foreach (qw(mk.pm Oracle.h dbdimp.h dbivport.h ocitrace.h)) {
            $self->{PM}->{$_} = '$(INST_ARCHAUTODIR)/'.$_;
        }

        # Add $linkwith to EXTRALIBS for those doing static linking
        $self->{EXTRALIBS} .= " -L\$(LIBHOME)";
        $self->{EXTRALIBS} .= " $linkwith" if $linkwith;

        '';
    }


    sub postamble {
        return main::dbd_postamble(@_);
    }


    sub const_loadlibs {
        my $self = shift;

        # ExtUtils::MM_Unix v1.50 (invoked by ExtUtils::MakeMaker)
        # requires that $self->{LD_RUN_PATH} be defined and not be
        # an empty string for Makefile to specify its use during the
        # build. This is required by both SUPER::const_loadlibs
        # and SUPER::dynamic_lib. hence it is best if we define
        # or modify $self->{LD_RUN_PATH} here *before* calling
        # SUPER::const_loadlibs.


        # edit LD_RUN_PATH ...
        my ($ldrp) = $self->{LD_RUN_PATH};
        # remove redundant /lib or /usr/lib as it can cause problems
        $ldrp =~ s!:(/usr)?/lib$!! if $ldrp;
    # if it's empty then set it manually
    #Lincoln: if pick the right library path
    my $libdir = main::ora_libdir();
    $ldrp ||= "$OH/$libdir:$OH/rdbms/$libdir";
        $self->{LD_RUN_PATH} = $ldrp;

        local($_) = $self->SUPER::const_loadlibs(@_);

        print "Ignoring LD_RUN_PATH='$ENV{LD_RUN_PATH}' in environment\n" if $ENV{LD_RUN_PATH};
        print "LD_RUN_PATH=$ldrp\n";
        return $_;
    }


    sub post_constants {
        my $self = shift;
        return '' unless $::opt_f;
        # Oracle Definitions, based on $(ORACLE_HOME)/proc/lib/proc.mk
        '
###################################################################
#
ORACLE_HOME = '.$OH.'

# The following text has been extracted from '.join("\n#\t", '', @mkfiles).'

'.$MK_TEXT.'

# End of extract from '."@mkfiles".'
#
###################################################################
';
    }


    sub const_cccmd {
        my ($self) = shift;
        print "Using DBD::Oracle $self->{VERSION}.\n";

        local($_) = $self->SUPER::const_cccmd(@_);
        # If perl Makefile.PL *-g* then switch on debugging
        if ($::opt_g) {
           if ($^O eq "MSWin32" and $Config::Config{cc} eq 'cl') {
              s/\s-/ -Zi -/;
              s/-O1//;
           } else {
            s/\s-O\d?\b//;      # delete optimise option
            s/\s-/ -g -/;       # add -g option
           }
        }
        # are we using the non-bundled hpux compiler?
        if ($^O eq "hpux" and $Config::Config{ccflags} =~ /-Aa\b/) {
            print "Changing -Aa to -Ae for HP-UX in ccmd.\n"
             if s/-Aa\b/-Ae/g;  # allow "long long" in oratypes.h
        }

        $_;
    }

    sub cflags {
        my ($self) = shift;
        local($_) = $self->SUPER::cflags(@_);
        # If perl Makefile.PL *-g* then switch on debugging
        if ($::opt_g) {
           if ($^O eq "MSWin32" and $Config::Config{cc} eq 'cl') {
              s/\s-/ -Zi -/;
              s/-O1//;

           } else {
              s/\s-O\d?\b//;    # delete optimise option
                s/\s-/ -g -/;     # add -g option
           }
        }
        # are we using the non-bundled hpux compiler?
        if ($^O eq "hpux" and $Config::Config{ccflags} =~ /-Aa\b/) {
            print "Changing -Aa to -Ae for HP-UX in cflags.\n"
             if s/-Aa\b/-Ae/g;  # allow "long long" in oratypes.h
        }
        $_;
    }

    sub dynamic_lib {
        my($self) = shift;

        unless ($^O eq 'VMS') {
                my $m = $self->SUPER::dynamic_lib(@_);
                if ($^O eq 'darwin') {
                        $m =  "NMEDIT = nmedit\n" . $m .
                              "\t\$(NMEDIT) -R ./hints/macos_bundle.syms \$(INST_DYNAMIC) || true\n";
                }
                elsif (($^O eq 'hpux') and ($osvers <11)) {
                         $m =~ s/LD_RUN_PATH=(\S+)\s+(\S+)/$2 -Wl,+b $1/;

                }
                return ($m);
        }

        # special code for VMS only
        my(%attribs) = @_;
        return '' unless $self->needs_linking(); #might be because of a subdir
        return '' unless $self->has_link_code();

        my $OtherText;
        my($otherldflags) = $attribs{OTHERLDFLAGS} || "";
        my($inst_dynamic_dep) = $attribs{INST_DYNAMIC_DEP} || "";
        my @m;
        push @m, "OTHERLDFLAGS = $otherldflags\n";
        push @m, "INST_DYNAMIC_DEP = $inst_dynamic_dep\n";
    if ($] < 5.00450) {
        push @m, '
$(INST_DYNAMIC) : $(INST_STATIC) $(PERL_INC)perlshr_attr.opt rtls.opt $(INST_ARCHAUTODIR).exists $(EXPORT_LIST) $(PERL_ARCHIVE) $(INST_DYNAMIC_DEP)
        $(NOECHO) $(MKPATH) $(INST_ARCHAUTODIR)
        $(NOECHO) If F$TrnLNm("PerlShr").eqs."" Then Define/NoLog/User PerlShr Sys$Share:PerlShr.',$Config::Config{'dlext'},'
        Lnproc $(MMS$TARGET)$(OTHERLDFLAGS) $(BASEEXT).opt/Option,rtls.opt/Option,$(PERL_INC)perlshr_attr.opt/Option i
';
  } else {
        push @m, '
$(INST_DYNAMIC) : $(INST_STATIC) $(PERL_INC)perlshr_attr.opt $(INST_ARCHAUTODIR).exists $(EXPORT_LIST) $(PERL_ARCHIVE) $(INST_DYNAMIC_DEP)
        $(NOECHO) $(MKPATH) $(INST_ARCHAUTODIR)
        $(NOECHO) If F$TrnLNm("PerlShr").eqs."" Then Define/NoLog/User PerlShr Sys$Share:PerlShr.',$Config::Config{'dlext'},'
        Lnproc $(MMS$TARGET)$(OTHERLDFLAGS) $(BASEEXT).opt/Option,$(PERL_INC)perlshr_attr.opt/Option i
';

  }
        push @m, $self->dir_target('$(INST_ARCHAUTODIR)');
        join('',@m);
    }

}


sub ldlibpth_info {
    my $verbose = shift;

    my ($ldlibpthname, $val);

    if ($^O eq "hpux") { # hpux is odd again: can use two env vars
        my @envs = grep { $ENV{$_} } qw( LD_LIBRARY_PATH SHLIB_PATH );
        $ldlibpthname = join "/", @envs;
        $val          = join $Config{path_sep}, @ENV{@envs}
    }
    else {
        $ldlibpthname = $Config{ldlibpthname} or return;
        $val          = $ENV{$ldlibpthname} || '';
    }

    print "Your $ldlibpthname env var is set to '$val'\n" if $verbose;

    return ( $ldlibpthname, $val, split /\Q$Config{path_sep}/, $val );
}


sub check_ldlibpthname {
    my $libdir = shift || join '/', $OH, ora_libdir();

    $libdir =~ s:[\\/]$::;  # cut final / or \

    my ($ldlibpthname, $val, @dirs) = ldlibpth_info(1);

    my $warn_name = $ldlibpthname;

    # It is also ok if we are using symbolic links
    return 1 if grep { s:[\\/]$::; $_ eq $libdir }
                map  { $_, Cwd::abs_path($_) } @dirs;

    # on solaris, it can be under LD_LIBRARY_PATH_(32|64)
    if ( $^O eq 'solaris' ) {
        my $ld_library_path_name = 'LD_LIBRARY_PATH_'
                                 . ( perl_is_64bit() ? '64' : '32' );

        $warn_name .= " or $ld_library_path_name";

        my @dirs = split quotemeta($Config{path_sep}),
                         $ENV{$ld_library_path_name};

        s#[\\/]$## for @dirs;  # cut potential final / or \

        return 1 if grep { $_ eq $libdir } @dirs;
    }

    warn "WARNING: Your $warn_name env var doesn't include '$libdir' but probably needs to.\n";
}


sub check_security {
    # check for the SUID/SGID bits on ORACLE_HOME/bin/oratclsh
    # if set, this allows a user to fork a root shell!
    # Get the octal portion of perms that indicates
    # SUID and SGID, and warn if either is set

    my @files = map { ($_,$_.'0') } qw(
        oratclsh lsnrctl oemevent onrsd osslogin tnslsnr
        tnsping trcasst trcroute cmctl cmadmin cmgw names namesctl otrccref
        otrcfmt otrcrep otrccol
    );

    my @bad;
    for my $file (map { "$ENV{ORACLE_HOME}/bin/$_" } @files) {
        my ($mode) = (stat($file))[2];
        next unless defined $mode;
        push @bad, $file if ($mode & 04000 and $mode & 00111)
                         or ($mode & 02000 and $mode & 00111);
    }
    return unless @bad;

    print "\n";
    warn "***  WARNING - YOUR ORACLE INSTALLATION HAS A SECURITY PROBLEM.$BELL\n";
    warn "     This is just a warning. It does not affect DBD::Oracle in any way.\n\n";
    sleep 6;
}

sub check_macos_symbol_table {
    # Check for symbol table problem in libclntsh.dylib.9.0 on MacOS X
    return unless $^O eq 'darwin';
    my $oracle_lib = "$OH/lib/libclntsh.dylib";

    return unless -f $oracle_lib;

    open my $nm_fh, '-|', "nm $oracle_lib"
        or die "couldn't run 'nm $oracle_lib': $!";

    while ( <$nm_fh> ) {
        return if /^\s+U _(dlsym|dlclose)/;
    }

    warn <<"END_WARNING";
WARNING: symbol table may need modification in Oracle library:
    $oracle_lib
If the build fails in the linking stage, manual modification is
required - see DBD::Oracle::Troubleshooting::Macos
END_WARNING

    return;
}

__END__

                                                                                                                                                                                                                                                      root/.cpan/build/DBD-Oracle-1.90-0/Oracle.bs                                                        0000644 0000000 0000000 00000000000 14723046572 016376  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        root/.cpan/build/DBD-Oracle-1.90-0/Oracle.c                                                         0000644 0000000 0000000 00000241364 14723046572 016240  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*
 * This file was generated automatically by ExtUtils::ParseXS version 3.51 from the
 * contents of Oracle.xs. Do not edit this file, edit Oracle.xs instead.
 *
 *    ANY CHANGES MADE HERE WILL BE LOST!
 *
 */

#line 1 "Oracle.xs"
#include "Oracle.h"

#define BIND_PARAM_INOUT_ALLOW_ARRAY

DBISTATE_DECLARE;

#line 17 "Oracle.c"
#ifndef PERL_UNUSED_VAR
#  define PERL_UNUSED_VAR(var) if (0) var = var
#endif

#ifndef dVAR
#  define dVAR		dNOOP
#endif


/* This stuff is not part of the API! You have been warned. */
#ifndef PERL_VERSION_DECIMAL
#  define PERL_VERSION_DECIMAL(r,v,s) (r*1000000 + v*1000 + s)
#endif
#ifndef PERL_DECIMAL_VERSION
#  define PERL_DECIMAL_VERSION \
	  PERL_VERSION_DECIMAL(PERL_REVISION,PERL_VERSION,PERL_SUBVERSION)
#endif
#ifndef PERL_VERSION_GE
#  define PERL_VERSION_GE(r,v,s) \
	  (PERL_DECIMAL_VERSION >= PERL_VERSION_DECIMAL(r,v,s))
#endif
#ifndef PERL_VERSION_LE
#  define PERL_VERSION_LE(r,v,s) \
	  (PERL_DECIMAL_VERSION <= PERL_VERSION_DECIMAL(r,v,s))
#endif

/* XS_INTERNAL is the explicit static-linkage variant of the default
 * XS macro.
 *
 * XS_EXTERNAL is the same as XS_INTERNAL except it does not include
 * "STATIC", ie. it exports XSUB symbols. You probably don't want that
 * for anything but the BOOT XSUB.
 *
 * See XSUB.h in core!
 */


/* TODO: This might be compatible further back than 5.10.0. */
#if PERL_VERSION_GE(5, 10, 0) && PERL_VERSION_LE(5, 15, 1)
#  undef XS_EXTERNAL
#  undef XS_INTERNAL
#  if defined(__CYGWIN__) && defined(USE_DYNAMIC_LOADING)
#    define XS_EXTERNAL(name) __declspec(dllexport) XSPROTO(name)
#    define XS_INTERNAL(name) STATIC XSPROTO(name)
#  endif
#  if defined(__SYMBIAN32__)
#    define XS_EXTERNAL(name) EXPORT_C XSPROTO(name)
#    define XS_INTERNAL(name) EXPORT_C STATIC XSPROTO(name)
#  endif
#  ifndef XS_EXTERNAL
#    if defined(HASATTRIBUTE_UNUSED) && !defined(__cplusplus)
#      define XS_EXTERNAL(name) void name(pTHX_ CV* cv __attribute__unused__)
#      define XS_INTERNAL(name) STATIC void name(pTHX_ CV* cv __attribute__unused__)
#    else
#      ifdef __cplusplus
#        define XS_EXTERNAL(name) extern "C" XSPROTO(name)
#        define XS_INTERNAL(name) static XSPROTO(name)
#      else
#        define XS_EXTERNAL(name) XSPROTO(name)
#        define XS_INTERNAL(name) STATIC XSPROTO(name)
#      endif
#    endif
#  endif
#endif

/* perl >= 5.10.0 && perl <= 5.15.1 */


/* The XS_EXTERNAL macro is used for functions that must not be static
 * like the boot XSUB of a module. If perl didn't have an XS_EXTERNAL
 * macro defined, the best we can do is assume XS is the same.
 * Dito for XS_INTERNAL.
 */
#ifndef XS_EXTERNAL
#  define XS_EXTERNAL(name) XS(name)
#endif
#ifndef XS_INTERNAL
#  define XS_INTERNAL(name) XS(name)
#endif

/* Now, finally, after all this mess, we want an ExtUtils::ParseXS
 * internal macro that we're free to redefine for varying linkage due
 * to the EXPORT_XSUB_SYMBOLS XS keyword. This is internal, use
 * XS_EXTERNAL(name) or XS_INTERNAL(name) in your code if you need to!
 */

#undef XS_EUPXS
#if defined(PERL_EUPXS_ALWAYS_EXPORT)
#  define XS_EUPXS(name) XS_EXTERNAL(name)
#else
   /* default to internal */
#  define XS_EUPXS(name) XS_INTERNAL(name)
#endif

#ifndef PERL_ARGS_ASSERT_CROAK_XS_USAGE
#define PERL_ARGS_ASSERT_CROAK_XS_USAGE assert(cv); assert(params)

/* prototype to pass -Wmissing-prototypes */
STATIC void
S_croak_xs_usage(const CV *const cv, const char *const params);

STATIC void
S_croak_xs_usage(const CV *const cv, const char *const params)
{
    const GV *const gv = CvGV(cv);

    PERL_ARGS_ASSERT_CROAK_XS_USAGE;

    if (gv) {
        const char *const gvname = GvNAME(gv);
        const HV *const stash = GvSTASH(gv);
        const char *const hvname = stash ? HvNAME(stash) : NULL;

        if (hvname)
	    Perl_croak_nocontext("Usage: %s::%s(%s)", hvname, gvname, params);
        else
	    Perl_croak_nocontext("Usage: %s(%s)", gvname, params);
    } else {
        /* Pants. I don't think that it should be possible to get here. */
	Perl_croak_nocontext("Usage: CODE(0x%" UVxf ")(%s)", PTR2UV(cv), params);
    }
}
#undef  PERL_ARGS_ASSERT_CROAK_XS_USAGE

#define croak_xs_usage        S_croak_xs_usage

#endif

/* NOTE: the prototype of newXSproto() is different in versions of perls,
 * so we define a portable version of newXSproto()
 */
#ifdef newXS_flags
#define newXSproto_portable(name, c_impl, file, proto) newXS_flags(name, c_impl, file, proto, 0)
#else
#define newXSproto_portable(name, c_impl, file, proto) (PL_Sv=(SV*)newXS(name, c_impl, file), sv_setpv(PL_Sv, proto), (CV*)PL_Sv)
#endif /* !defined(newXS_flags) */

#if PERL_VERSION_LE(5, 21, 5)
#  define newXS_deffile(a,b) Perl_newXS(aTHX_ a,b,file)
#else
#  define newXS_deffile(a,b) Perl_newXS_deffile(aTHX_ a,b)
#endif

#line 161 "Oracle.c"

XS_EUPXS(XS_DBD__Oracle_constant); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle_constant)
{
    dVAR; dXSARGS;
    dXSI32;
    if (items < 0 || items > 1)
       croak_xs_usage(cv,  "name=Nullch");
    {
	char *	name;
	I32	RETVAL;
	dXSTARG;

	if (items < 1)
	    name = Nullch;
	else {
	    name = (char *)SvPV_nolen(ST(0))
;
	}
#line 82 "Oracle.xs"
	if (!ix) {
	if (!name) name = GvNAME(CvGV(cv));
	croak("Unknown DBD::Oracle constant '%s'", name);
	}
	else RETVAL = ix;
#line 187 "Oracle.c"
	XSprePUSH;
	PUSHi((IV)RETVAL);
    }
    XSRETURN(1);
}


XS_EUPXS(XS_DBD__Oracle_ORA_OCI); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle_ORA_OCI)
{
    dVAR; dXSARGS;
    if (items != 0)
       croak_xs_usage(cv,  "");
    {
#line 94 "Oracle.xs"
	SV *sv = sv_newmortal();
	sv_setnv(sv, atof(ORA_OCI_VERSION));	/* 9.1! see docs */
	sv_setpv(sv, ORA_OCI_VERSION);		/* 9.10.11.12	*/
	SvNOK_on(sv); /* dualvar hack */
	ST(0) = sv;
#line 208 "Oracle.c"
    }
    XSRETURN(1);
}


XS_EUPXS(XS_DBD__Oracle_ora_env_var); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle_ora_env_var)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "name");
    {
	char *	name = (char *)SvPV_nolen(ST(0))
;
#line 104 "Oracle.xs"
	char buf[1024];
	char *p = ora_env_var(name, buf, sizeof(buf)-1);
	SV *sv = sv_newmortal();
	if (p)
		sv_setpv(sv, p);
	ST(0) = sv;
#line 230 "Oracle.c"
    }
    XSRETURN(1);
}

#if defined(__CYGWIN32__) || defined(__CYGWIN64__) || defined(__CYGWIN__)
#define XSubPPtmpAAAA 1


XS_EUPXS(XS_DBD__Oracle_ora_cygwin_set_env); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_DBD__Oracle_ora_cygwin_set_env)
{
    dVAR; dXSARGS;
    if (items != 2)
       croak_xs_usage(cv,  "name, value");
    {
