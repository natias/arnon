	0x780,
	0x7B2,
	0xFDF2,
	0xFDF3,
	0xFDFD,
	0xFDFE
};

static const UV UNI_THAI_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE01,
	0xE3B,
	0xE40,
	0xE5C
};

static const UV UNI_TIBT_invlist[] = {  /* for all charsets */
	15,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF00,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF98,
	0xF99,
	0xFBD,
	0xFBE,
	0xFCD,
	0xFCE,
	0xFD5,
	0xFD9,
	0xFDB
};

static const UV UNI_TIRH_invlist[] = {  /* for all charsets */
	13,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0x1CF2,
	0x1CF3,
	0xA830,
	0xA83A,
	0x11480,
	0x114C8,
	0x114D0,
	0x114DA
};

static const UV UNI_TNSA_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16A70,
	0x16ABF,
	0x16AC0,
	0x16ACA
};

static const UV UNI_TOTO_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1E290,
	0x1E2AF
};

static const UV UNI_TRANSPORTANDMAP_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F680,
	0x1F700
};

static const UV UNI_UCAS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1400,
	0x1680
};

static const UV UNI_UCASEXT_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x18B0,
	0x1900
};

static const UV UNI_UCASEXTA_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11AB0,
	0x11AC0
};

static const UV UNI_UGAR_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10380,
	0x1039E,
	0x1039F,
	0x103A0
};

static const UV UNI_UIDEO_invlist[] = {  /* for all charsets */
	33,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA000,
	0xFA0E,
	0xFA10,
	0xFA11,
	0xFA12,
	0xFA13,
	0xFA15,
	0xFA1F,
	0xFA20,
	0xFA21,
	0xFA22,
	0xFA23,
	0xFA25,
	0xFA27,
	0xFA2A,
	0x20000,
	0x2A6E0,
	0x2A700,
	0x2B73A,
	0x2B740,
	0x2B81E,
	0x2B820,
	0x2CEA2,
	0x2CEB0,
	0x2EBE1,
	0x30000,
	0x3134B,
	0x31350,
	0x323B0
};

static const UV UNI_VAI_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA500,
	0xA62C
};

static const UV UNI_VEDICEXT_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1CD0,
	0x1D00
};

static const UV UNI_VERTICALFORMS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xFE10,
	0xFE20
};

static const UV UNI_VITH_invlist[] = {  /* for all charsets */
	17,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10570,
	0x1057B,
	0x1057C,
	0x1058B,
	0x1058C,
	0x10593,
	0x10594,
	0x10596,
	0x10597,
	0x105A2,
	0x105A3,
	0x105B2,
	0x105B3,
	0x105BA,
	0x105BB,
	0x105BD
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_VO__R_invlist[] = {  /* for ASCII/Latin1 */
	179,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA7,
	0xA8,
	0xA9,
	0xAA,
	0xAE,
	0xAF,
	0xB1,
	0xB2,
	0xBC,
	0xBF,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2EA,
	0x2EC,
	0x1100,
	0x1200,
	0x1401,
	0x1680,
	0x18B0,
	0x1900,
	0x2016,
	0x2017,
	0x2020,
	0x2022,
	0x2030,
	0x2032,
	0x203B,
	0x203D,
	0x2042,
	0x2043,
	0x2047,
	0x204A,
	0x2051,
	0x2052,
	0x2065,
	0x2066,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x2100,
	0x2102,
	0x2103,
	0x210A,
	0x210F,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2140,
	0x2145,
	0x214B,
	0x214C,
	0x214E,
	0x214F,
	0x218A,
	0x218C,
	0x2190,
	0x221E,
	0x221F,
	0x2234,
	0x2236,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2324,
	0x232C,
	0x237D,
	0x239B,
	0x23BE,
	0x23CE,
	0x23CF,
	0x23D0,
	0x23D1,
	0x23DC,
	0x23E2,
	0x2423,
	0x2424,
	0x2500,
	0x25A0,
	0x261A,
	0x2620,
	0x2768,
	0x2776,
	0x2794,
	0x2B12,
	0x2B30,
	0x2B50,
	0x2B5A,
	0x2B97,
	0x2B98,
	0x2BB8,
	0x2BD2,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2E50,
	0x2E52,
	0x2E80,
	0xA4D0,
	0xA960,
	0xA980,
	0xAC00,
	0xD800,
	0xE000,
	0xFB00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE49,
	0xFE50,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE67,
	0xFE70,
	0xFF01,
	0xFF0D,
	0xFF0E,
	0xFF1C,
	0xFF1F,
	0xFF61,
	0xFFE0,
	0xFFE8,
	0xFFF0,
	0xFFF9,
	0xFFFC,
	0xFFFE,
	0x10980,
	0x109A0,
	0x11580,
	0x11600,
	0x11A00,
	0x11AC0,
	0x13000,
	0x13460,
	0x14400,
	0x14680,
	0x16FE0,
	0x18D80,
	0x1AFF0,
	0x1B300,
	0x1CF00,
	0x1CFD0,
	0x1D000,
	0x1D200,
	0x1D2E0,
	0x1D380,
	0x1D800,
	0x1DAB0,
	0x1F000,
	0x1F800,
	0x1F900,
	0x1FB00,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_VO__R_invlist[] = {  /* for EBCDIC 1047 */
	177,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8F,
	0x90,
	0xAF,
	0xB0,
	0xB4,
	0xB6,
	0xB7,
	0xBA,
	0xBF,
	0xC0,
	0xE1,
	0xE2,
	0x2EA,
	0x2EC,
	0x1100,
	0x1200,
	0x1401,
	0x1680,
	0x18B0,
	0x1900,
	0x2016,
	0x2017,
	0x2020,
	0x2022,
	0x2030,
	0x2032,
	0x203B,
	0x203D,
	0x2042,
	0x2043,
	0x2047,
	0x204A,
	0x2051,
	0x2052,
	0x2065,
	0x2066,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x2100,
	0x2102,
	0x2103,
	0x210A,
	0x210F,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2140,
	0x2145,
	0x214B,
	0x214C,
	0x214E,
	0x214F,
	0x218A,
	0x218C,
	0x2190,
	0x221E,
	0x221F,
	0x2234,
	0x2236,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2324,
	0x232C,
	0x237D,
	0x239B,
	0x23BE,
	0x23CE,
	0x23CF,
	0x23D0,
	0x23D1,
	0x23DC,
	0x23E2,
	0x2423,
	0x2424,
	0x2500,
	0x25A0,
	0x261A,
	0x2620,
	0x2768,
	0x2776,
	0x2794,
	0x2B12,
	0x2B30,
	0x2B50,
	0x2B5A,
	0x2B97,
	0x2B98,
	0x2BB8,
	0x2BD2,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2E50,
	0x2E52,
	0x2E80,
	0xA4D0,
	0xA960,
	0xA980,
	0xAC00,
	0xD800,
	0xE000,
	0xFB00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE49,
	0xFE50,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE67,
	0xFE70,
	0xFF01,
	0xFF0D,
	0xFF0E,
	0xFF1C,
	0xFF1F,
	0xFF61,
	0xFFE0,
	0xFFE8,
	0xFFF0,
	0xFFF9,
	0xFFFC,
	0xFFFE,
	0x10980,
	0x109A0,
	0x11580,
	0x11600,
	0x11A00,
	0x11AC0,
	0x13000,
	0x13460,
	0x14400,
	0x14680,
	0x16FE0,
	0x18D80,
	0x1AFF0,
	0x1B300,
	0x1CF00,
	0x1CFD0,
	0x1D000,
	0x1D200,
	0x1D2E0,
	0x1D380,
	0x1D800,
	0x1DAB0,
	0x1F000,
	0x1F800,
	0x1F900,
	0x1FB00,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_VO__R_invlist[] = {  /* for EBCDIC 037 */
	177,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x8F,
	0x90,
	0xAF,
	0xB0,
	0xB4,
	0xB6,
	0xB7,
	0xBA,
	0xBF,
	0xC0,
	0xE1,
	0xE2,
	0x2EA,
	0x2EC,
	0x1100,
	0x1200,
	0x1401,
	0x1680,
	0x18B0,
	0x1900,
	0x2016,
	0x2017,
	0x2020,
	0x2022,
	0x2030,
	0x2032,
	0x203B,
	0x203D,
	0x2042,
	0x2043,
	0x2047,
	0x204A,
	0x2051,
	0x2052,
	0x2065,
	0x2066,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x2100,
	0x2102,
	0x2103,
	0x210A,
	0x210F,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2140,
	0x2145,
	0x214B,
	0x214C,
	0x214E,
	0x214F,
	0x218A,
	0x218C,
	0x2190,
	0x221E,
	0x221F,
	0x2234,
	0x2236,
	0x2300,
	0x2308,
	0x230C,
	0x2320,
	0x2324,
	0x232C,
	0x237D,
	0x239B,
	0x23BE,
	0x23CE,
	0x23CF,
	0x23D0,
	0x23D1,
	0x23DC,
	0x23E2,
	0x2423,
	0x2424,
	0x2500,
	0x25A0,
	0x261A,
	0x2620,
	0x2768,
	0x2776,
	0x2794,
	0x2B12,
	0x2B30,
	0x2B50,
	0x2B5A,
	0x2B97,
	0x2B98,
	0x2BB8,
	0x2BD2,
	0x2BD3,
	0x2BEC,
	0x2BF0,
	0x2C00,
	0x2E50,
	0x2E52,
	0x2E80,
	0xA4D0,
	0xA960,
	0xA980,
	0xAC00,
	0xD800,
	0xE000,
	0xFB00,
	0xFE10,
	0xFE20,
	0xFE30,
	0xFE49,
	0xFE50,
	0xFE58,
	0xFE59,
	0xFE63,
	0xFE67,
	0xFE70,
	0xFF01,
	0xFF0D,
	0xFF0E,
	0xFF1C,
	0xFF1F,
	0xFF61,
	0xFFE0,
	0xFFE8,
	0xFFF0,
	0xFFF9,
	0xFFFC,
	0xFFFE,
	0x10980,
	0x109A0,
	0x11580,
	0x11600,
	0x11A00,
	0x11AC0,
	0x13000,
	0x13460,
	0x14400,
	0x14680,
	0x16FE0,
	0x18D80,
	0x1AFF0,
	0x1B300,
	0x1CF00,
	0x1CFD0,
	0x1D000,
	0x1D200,
	0x1D2E0,
	0x1D380,
	0x1D800,
	0x1DAB0,
	0x1F000,
	0x1F800,
	0x1F900,
	0x1FB00,
	0x20000,
	0x2FFFE,
	0x30000,
	0x3FFFE,
	0xF0000,
	0xFFFFE,
	0x100000,
	0x10FFFE
};

#  endif	/* EBCDIC 037 */

static const UV UNI_VO__TR_invlist[] = {  /* for all charsets */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2329,
	0x232B,
	0x3008,
	0x3012,
	0x3014,
	0x3020,
	0x3030,
	0x3031,
	0x30A0,
	0x30A1,
	0x30FC,
	0x30FD,
	0xFE59,
	0xFE5F,
	0xFF08,
	0xFF0A,
	0xFF1A,
	0xFF1C,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF5B,
	0xFF61,
	0xFFE3,
	0xFFE4
};

static const UV UNI_VO__TU_invlist[] = {  /* for all charsets */
	69,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x3001,
	0x3003,
	0x3041,
	0x3042,
	0x3043,
	0x3044,
	0x3045,
	0x3046,
	0x3047,
	0x3048,
	0x3049,
	0x304A,
	0x3063,
	0x3064,
	0x3083,
	0x3084,
	0x3085,
	0x3086,
	0x3087,
	0x3088,
	0x308E,
	0x308F,
	0x3095,
	0x3097,
	0x309B,
	0x309D,
	0x30A1,
	0x30A2,
	0x30A3,
	0x30A4,
	0x30A5,
	0x30A6,
	0x30A7,
	0x30A8,
	0x30A9,
	0x30AA,
	0x30C3,
	0x30C4,
	0x30E3,
	0x30E4,
	0x30E5,
	0x30E6,
	0x30E7,
	0x30E8,
	0x30EE,
	0x30EF,
	0x30F5,
	0x30F7,
	0x3127,
	0x3128,
	0x31F0,
	0x3200,
	0x32FF,
	0x3358,
	0x337B,
	0x3380,
	0xFE50,
	0xFE53,
	0xFF01,
	0xFF02,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1F,
	0xFF20,
	0x1F200,
	0x1F202
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_VO__U_invlist[] = {  /* for ASCII/Latin1 */
	257,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA7,
	0xA8,
	0xA9,
	0xAA,
	0xAE,
	0xAF,
	0xB1,
	0xB2,
	0xBC,
	0xBF,
	0xD7,
	0xD8,
	0xF7,
	0xF8,
	0x2EA,
	0x2EC,
	0x1100,
	0x1200,
	0x1401,
	0x1680,
	0x18B0,
	0x1900,
	0x2016,
	0x2017,
	0x2020,
	0x2022,
	0x2030,
	0x2032,
	0x203B,
	0x203D,
	0x2042,
	0x2043,
	0x2047,
	0x204A,
	0x2051,
	0x2052,
	0x2065,
	0x2066,
	0x20DD,
	0x20E1,
	0x20E2,
	0x20E5,
	0x2100,
	0x2102,
	0x2103,
	0x210A,
	0x210F,
	0x2110,
	0x2113,
	0x2115,
	0x2116,
	0x2118,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x2135,
	0x2140,
	0x2145,
	0x214B,
	0x214C,
	0x214E,
	0x214F,
	0x218A,
	0x218C,
	0x2190,
	0x221E,
	0x221F,
	0x2234,
	0x2236,
	0x2300,
	0x2308,
