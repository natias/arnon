	0x2794,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B97,
	0x2C00,
	0x2CE5,
	0x2CEB,
	0x2E50,
	0x2E52,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3004,
	0x3005,
	0x3012,
	0x3014,
	0x3020,
	0x3021,
	0x3036,
	0x3038,
	0x303E,
	0x3040,
	0x309B,
	0x309D,
	0x3190,
	0x3192,
	0x3196,
	0x31A0,
	0x31C0,
	0x31E4,
	0x3200,
	0x321F,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA700,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA828,
	0xA82C,
	0xA836,
	0xA83A,
	0xAA77,
	0xAA7A,
	0xAB5B,
	0xAB5C,
	0xAB6A,
	0xAB6C,
	0xFB29,
	0xFB2A,
	0xFBB2,
	0xFBC3,
	0xFD40,
	0xFD50,
	0xFDCF,
	0xFDD0,
	0xFDFC,
	0xFE00,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE67,
	0xFE69,
	0xFE6A,
	0xFF04,
	0xFF05,
	0xFF0B,
	0xFF0C,
	0xFF1C,
	0xFF1F,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10137,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x1018F,
	0x10190,
	0x1019D,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10877,
	0x10879,
	0x10AC8,
	0x10AC9,
	0x1173F,
	0x11740,
	0x11FD5,
	0x11FF2,
	0x16B3C,
	0x16B40,
	0x16B45,
	0x16B46,
	0x1BC9C,
	0x1BC9D,
	0x1CF50,
	0x1CFC4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1EB,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1E14F,
	0x1E150,
	0x1E2FF,
	0x1E300,
	0x1ECAC,
	0x1ECAD,
	0x1ECB0,
	0x1ECB1,
	0x1ED2E,
	0x1ED2F,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F10D,
	0x1F1AE,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D8,
	0x1F6DD,
	0x1F6ED,
	0x1F6F0,
	0x1F6FD,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D9,
	0x1F7E0,
	0x1F7EC,
	0x1F7F0,
	0x1F7F1,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F8B0,
	0x1F8B2,
	0x1F900,
	0x1FA54,
	0x1FA60,
	0x1FA6E,
	0x1FA70,
	0x1FA75,
	0x1FA78,
	0x1FA7D,
	0x1FA80,
	0x1FA87,
	0x1FA90,
	0x1FAAD,
	0x1FAB0,
	0x1FABB,
	0x1FAC0,
	0x1FAC6,
	0x1FAD0,
	0x1FADA,
	0x1FAE0,
	0x1FAE8,
	0x1FAF0,
	0x1FAF7,
	0x1FB00,
	0x1FB93,
	0x1FB94,
	0x1FBCB
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_S_invlist[] = {  /* for EBCDIC 037 */
	473,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4A,
	0x4B,
	0x4C,
	0x4D,
	0x4E,
	0x50,
	0x5B,
	0x5C,
	0x5F,
	0x60,
	0x6A,
	0x6B,
	0x6E,
	0x6F,
	0x79,
	0x7A,
	0x7E,
	0x7F,
	0x8F,
	0x91,
	0x9D,
	0x9E,
	0x9F,
	0xA0,
	0xA1,
	0xA2,
	0xAF,
	0xB3,
	0xB4,
	0xB5,
	0xBC,
	0xC0,
	0xE1,
	0xE2,
	0x2C2,
	0x2C6,
	0x2D2,
	0x2E0,
	0x2E5,
	0x2EC,
	0x2ED,
	0x2EE,
	0x2EF,
	0x300,
	0x375,
	0x376,
	0x384,
	0x386,
	0x3F6,
	0x3F7,
	0x482,
	0x483,
	0x58D,
	0x590,
	0x606,
	0x609,
	0x60B,
	0x60C,
	0x60E,
	0x610,
	0x6DE,
	0x6DF,
	0x6E9,
	0x6EA,
	0x6FD,
	0x6FF,
	0x7F6,
	0x7F7,
	0x7FE,
	0x800,
	0x888,
	0x889,
	0x9F2,
	0x9F4,
	0x9FA,
	0x9FC,
	0xAF1,
	0xAF2,
	0xB70,
	0xB71,
	0xBF3,
	0xBFB,
	0xC7F,
	0xC80,
	0xD4F,
	0xD50,
	0xD79,
	0xD7A,
	0xE3F,
	0xE40,
	0xF01,
	0xF04,
	0xF13,
	0xF14,
	0xF15,
	0xF18,
	0xF1A,
	0xF20,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xFBE,
	0xFC6,
	0xFC7,
	0xFCD,
	0xFCE,
	0xFD0,
	0xFD5,
	0xFD9,
	0x109E,
	0x10A0,
	0x1390,
	0x139A,
	0x166D,
	0x166E,
	0x17DB,
	0x17DC,
	0x1940,
	0x1941,
	0x19DE,
	0x1A00,
	0x1B61,
	0x1B6B,
	0x1B74,
	0x1B7D,
	0x1FBD,
	0x1FBE,
	0x1FBF,
	0x1FC2,
	0x1FCD,
	0x1FD0,
	0x1FDD,
	0x1FE0,
	0x1FED,
	0x1FF0,
	0x1FFD,
	0x1FFF,
	0x2044,
	0x2045,
	0x2052,
	0x2053,
	0x207A,
	0x207D,
	0x208A,
	0x208D,
	0x20A0,
	0x20C1,
	0x2100,
	0x2102,
	0x2103,
	0x2107,
	0x2108,
	0x210A,
	0x2114,
	0x2115,
	0x2116,
	0x2119,
	0x211E,
	0x2124,
	0x2125,
	0x2126,
	0x2127,
	0x2128,
	0x2129,
	0x212A,
	0x212E,
	0x212F,
	0x213A,
	0x213C,
	0x2140,
	0x2145,
	0x214A,
	0x214E,
	0x214F,
	0x2150,
	0x218A,
	0x218C,
	0x2190,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x2427,
	0x2440,
	0x244B,
	0x249C,
	0x24EA,
	0x2500,
	0x2768,
	0x2794,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2B74,
	0x2B76,
	0x2B96,
	0x2B97,
	0x2C00,
	0x2CE5,
	0x2CEB,
	0x2E50,
	0x2E52,
	0x2E80,
	0x2E9A,
	0x2E9B,
	0x2EF4,
	0x2F00,
	0x2FD6,
	0x2FF0,
	0x2FFC,
	0x3004,
	0x3005,
	0x3012,
	0x3014,
	0x3020,
	0x3021,
	0x3036,
	0x3038,
	0x303E,
	0x3040,
	0x309B,
	0x309D,
	0x3190,
	0x3192,
	0x3196,
	0x31A0,
	0x31C0,
	0x31E4,
	0x3200,
	0x321F,
	0x322A,
	0x3248,
	0x3250,
	0x3251,
	0x3260,
	0x3280,
	0x328A,
	0x32B1,
	0x32C0,
	0x3400,
	0x4DC0,
	0x4E00,
	0xA490,
	0xA4C7,
	0xA700,
	0xA717,
	0xA720,
	0xA722,
	0xA789,
	0xA78B,
	0xA828,
	0xA82C,
	0xA836,
	0xA83A,
	0xAA77,
	0xAA7A,
	0xAB5B,
	0xAB5C,
	0xAB6A,
	0xAB6C,
	0xFB29,
	0xFB2A,
	0xFBB2,
	0xFBC3,
	0xFD40,
	0xFD50,
	0xFDCF,
	0xFDD0,
	0xFDFC,
	0xFE00,
	0xFE62,
	0xFE63,
	0xFE64,
	0xFE67,
	0xFE69,
	0xFE6A,
	0xFF04,
	0xFF05,
	0xFF0B,
	0xFF0C,
	0xFF1C,
	0xFF1F,
	0xFF3E,
	0xFF3F,
	0xFF40,
	0xFF41,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFFE0,
	0xFFE7,
	0xFFE8,
	0xFFEF,
	0xFFFC,
	0xFFFE,
	0x10137,
	0x10140,
	0x10179,
	0x1018A,
	0x1018C,
	0x1018F,
	0x10190,
	0x1019D,
	0x101A0,
	0x101A1,
	0x101D0,
	0x101FD,
	0x10877,
	0x10879,
	0x10AC8,
	0x10AC9,
	0x1173F,
	0x11740,
	0x11FD5,
	0x11FF2,
	0x16B3C,
	0x16B40,
	0x16B45,
	0x16B46,
	0x1BC9C,
	0x1BC9D,
	0x1CF50,
	0x1CFC4,
	0x1D000,
	0x1D0F6,
	0x1D100,
	0x1D127,
	0x1D129,
	0x1D165,
	0x1D16A,
	0x1D16D,
	0x1D183,
	0x1D185,
	0x1D18C,
	0x1D1AA,
	0x1D1AE,
	0x1D1EB,
	0x1D200,
	0x1D242,
	0x1D245,
	0x1D246,
	0x1D300,
	0x1D357,
	0x1D6C1,
	0x1D6C2,
	0x1D6DB,
	0x1D6DC,
	0x1D6FB,
	0x1D6FC,
	0x1D715,
	0x1D716,
	0x1D735,
	0x1D736,
	0x1D74F,
	0x1D750,
	0x1D76F,
	0x1D770,
	0x1D789,
	0x1D78A,
	0x1D7A9,
	0x1D7AA,
	0x1D7C3,
	0x1D7C4,
	0x1D800,
	0x1DA00,
	0x1DA37,
	0x1DA3B,
	0x1DA6D,
	0x1DA75,
	0x1DA76,
	0x1DA84,
	0x1DA85,
	0x1DA87,
	0x1E14F,
	0x1E150,
	0x1E2FF,
	0x1E300,
	0x1ECAC,
	0x1ECAD,
	0x1ECB0,
	0x1ECB1,
	0x1ED2E,
	0x1ED2F,
	0x1EEF0,
	0x1EEF2,
	0x1F000,
	0x1F02C,
	0x1F030,
	0x1F094,
	0x1F0A0,
	0x1F0AF,
	0x1F0B1,
	0x1F0C0,
	0x1F0C1,
	0x1F0D0,
	0x1F0D1,
	0x1F0F6,
	0x1F10D,
	0x1F1AE,
	0x1F1E6,
	0x1F203,
	0x1F210,
	0x1F23C,
	0x1F240,
	0x1F249,
	0x1F250,
	0x1F252,
	0x1F260,
	0x1F266,
	0x1F300,
	0x1F6D8,
	0x1F6DD,
	0x1F6ED,
	0x1F6F0,
	0x1F6FD,
	0x1F700,
	0x1F774,
	0x1F780,
	0x1F7D9,
	0x1F7E0,
	0x1F7EC,
	0x1F7F0,
	0x1F7F1,
	0x1F800,
	0x1F80C,
	0x1F810,
	0x1F848,
	0x1F850,
	0x1F85A,
	0x1F860,
	0x1F888,
	0x1F890,
	0x1F8AE,
	0x1F8B0,
	0x1F8B2,
	0x1F900,
	0x1FA54,
	0x1FA60,
	0x1FA6E,
	0x1FA70,
	0x1FA75,
	0x1FA78,
	0x1FA7D,
	0x1FA80,
	0x1FA87,
	0x1FA90,
	0x1FAAD,
	0x1FAB0,
	0x1FABB,
	0x1FAC0,
	0x1FAC6,
	0x1FAD0,
	0x1FADA,
	0x1FAE0,
	0x1FAE8,
	0x1FAF0,
	0x1FAF7,
	0x1FB00,
	0x1FB93,
	0x1FB94,
	0x1FBCB
};

#  endif	/* EBCDIC 037 */

static const UV UNI_SAMR_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x800,
	0x82E,
	0x830,
	0x83F
};

static const UV UNI_SARB_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10A60,
	0x10A80
};

static const UV UNI_SAUR_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA880,
	0xA8C6,
	0xA8CE,
	0xA8DA
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_SB__AT_invlist[] = {  /* for ASCII/Latin1 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2E,
	0x2F,
	0x2024,
	0x2025,
	0xFE52,
	0xFE53,
	0xFF0E,
	0xFF0F
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_SB__AT_invlist[] = {  /* for EBCDIC 1047 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x2024,
	0x2025,
	0xFE52,
	0xFE53,
	0xFF0E,
	0xFF0F
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_SB__AT_invlist[] = {  /* for EBCDIC 037 */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x2024,
	0x2025,
	0xFE52,
	0xFE53,
	0xFF0E,
	0xFF0F
};

#  endif	/* EBCDIC 037 */

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_SB__CL_invlist[] = {  /* for ASCII/Latin1 */
	91,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x22,
	0x23,
	0x27,
	0x2A,
	0x5B,
	0x5C,
	0x5D,
	0x5E,
	0x7B,
	0x7C,
	0x7D,
	0x7E,
	0xAB,
	0xAC,
	0xBB,
	0xBC,
	0xF3A,
	0xF3E,
	0x169B,
	0x169D,
	0x2018,
	0x2020,
	0x2039,
	0x203B,
	0x2045,
	0x2047,
	0x207D,
	0x207F,
	0x208D,
	0x208F,
	0x2308,
	0x230C,
	0x2329,
	0x232B,
	0x275B,
	0x2761,
	0x2768,
	0x2776,
	0x27C5,
	0x27C7,
	0x27E6,
	0x27F0,
	0x2983,
	0x2999,
	0x29D8,
	0x29DC,
	0x29FC,
	0x29FE,
	0x2E00,
	0x2E0E,
	0x2E1C,
	0x2E1E,
	0x2E20,
	0x2E2A,
	0x2E42,
	0x2E43,
	0x2E55,
	0x2E5D,
	0x3008,
	0x3012,
	0x3014,
	0x301C,
	0x301D,
	0x3020,
	0xFD3E,
	0xFD40,
	0xFE17,
	0xFE19,
	0xFE35,
	0xFE45,
	0xFE47,
	0xFE49,
	0xFE59,
	0xFE5F,
	0xFF08,
	0xFF0A,
	0xFF3B,
	0xFF3C,
	0xFF3D,
	0xFF3E,
	0xFF5B,
	0xFF5C,
	0xFF5D,
	0xFF5E,
	0xFF5F,
	0xFF61,
	0xFF62,
	0xFF64,
	0x1F676,
	0x1F679
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_SB__CL_invlist[] = {  /* for EBCDIC 1047 */
	93,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4D,
	0x4E,
	0x5D,
	0x5E,
	0x7D,
	0x7E,
	0x7F,
	0x80,
	0x8A,
	0x8C,
	0xAD,
	0xAE,
	0xBD,
	0xBE,
	0xC0,
	0xC1,
