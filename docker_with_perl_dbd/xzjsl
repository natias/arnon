           2004-2022 Marc Haber <mh+debian-packages@zugschlus.de>
           2006-2007 Jörg Hoh <joerg@joerghoh.de>
           2011 Stephen Gran <sgran@debian.org>
           2016 Helge Kreutzmann <debian@helgefjell.de>
           2021 Jason Franklin <jason@oneway.dev>
           2022 Matt Barry <matt@hazelmollusk.org>
License: GPL-2+

Files: doc/deluser.8
Copyright: 1994 Ian A. Murdock <imurdock@debian.org>
           1995 Ted Hajek <tedhajek@boombox.micro.umn.edu>
           1997-1999 Guy Maor
           2000-2003 Roland Bauerschmidt <rb@debian.org>
           2004-2022 Marc Haber <mh+debian-packages@zugschlus.de>
           2006-2009 Jörg Hoh <joerg@joerghoh.de>
           2011 Justin B Rye <jbr@edlug.org.uk>
           2016 Helge Kreutzmann <debian@helgefjell.de>
           2021-2022 Jason Franklin <jason@oneway.dev>
License: GPL-2+

Files: doc/adduser.8
Copyright: 1994 Ian A. Murdock <imurdock@debian.org>
           1995 Ted Hajek <tedhajek@boombox.micro.umn.edu>
           1997-1999 Guy Maor
           2000-2003 Roland Bauerschmidt <rb@debian.org>
           2004-2022 Marc Haber <mh+debian-packages@zugschlus.de>
           2005-2009 Jörg Hoh <joerg@joerghoh.de>
           2006-2011 Stephen Gran <sgran@debian.org>
           2011 Justin B Rye <jbr@edlug.org.uk>
           2016 Afif Elghraoui <afif@debian.org>
           2016 Helge Kreutzmann <debian@helgefjell.de>
           2021-2022 Jason Franklin <jason@oneway.dev>
           2022 Matt Barry <matt@hazelmollusk.org>
           2022 Akbarkhon Variskhanov <akbarkhon.variskhanov@gmail.com>
License: GPL-2+

Files: doc/adduser.local.8
Copyright: 2022 Marc Haber <mh+debian-packages@zugschlus.de>
License: GPL-2+

Files: po/adduser.pot doc/po4a/po/adduser.pot
Copyright: 20032-2004 Roland Bauerschmidt <rb@debian.org>
           2011 Stephen Gran <sgran@debian.org>
           2016 Helge Kreutzmann <debian@helgefjell.de>
           2016 Afif Elghraoui <afif@debian.org>
           2005-2022 Marc Haber <mh+debian-packages@zugschlus.de>
           2021-2022 Jason Franklin <jason@oneway.dev>
           2022 Matt Barry <matt@hazelmollusk.org>
License: GPL-2+

Files: po/ca.po
Copyright: 2002, 2004, 2010 Software in the Public Interest, Inc. and others.
           2002, 2004, 2010 Jordi Mallach <jordi@debian.org>
License: GPL-2+

Files: po/cs.po
Copyright: Free Software Foundation, Inc.
           2004-2016 Miroslav Kure <kurem@debian.cz>
License: GPL-2+

Files: po/da.po
Copyright: 2016 adduser & nedenstående oversættere.
           2001-2004 Morten Brix Pedersen <morten@wtf.dk>
           2010, 2016 Joe Hansen <joedalton2@yahoo.dk>
License: GPL-2+

Files: po/de.po
Copyright: 2000, 2006 Free Software Foundation, Inc.
           2000 Roland Bauerschmidt <roland@copyleft.de>
           2006, 2010, 2017 Dr. Tobias Quathamer <toddy@debian.org>
	   2023 Dr. Helge Kreutzmann <debian@helgefjell.de>
License: GPL-2+

Files: po/es.po
Copyright: Nicolás Lichtmaier
           2008, 2010 Javier Fernández-Sanguino
License: GPL-2+

Files: po/eu.po
Copyright: 2004, 2006, 2008 Piarres Beobide Egaña <pi@beobide.net>
           2010, 2016 Iñaki Larrañaga Murgoitio <dooteo@euskalgnu.org>
License: GPL-2+

Files: po/fr.po
Copyright: 2004 Software in the Public Interest
           2009, 2010 Jean-Baka Domelevo Entfellner <domelevo@gmail.com>
License: GPL-2+

Files: po/hu.po
Copyright: 2006 Gál Ferenc <hunterz@freemail.hu>
           2006 Nepusz Tamás <ntamas@gmail.com>
           2007 Gabor Kelemen <kelemeng@gnome.hu>
License: GPL-2+

Files: po/it.po
Copyright: 2004-2016 Luca Monducci <luca.mo@tiscali.it>
           2004 Free Software Foundation, Inc.
License: GPL-2+

Files: po/ja.po
Copyright: 1999 Akira Yoshiyama <yosshy@debian.or.jp>
           1999-2010 Tomohiro KUBOTA <kubota@debian.org>
           2010-2016 Kenshi Muto <kmuto@debian.org>
License: GPL-2+

Files: po/ko.po
Copyright: 1999 Changwoo Ryu
           2001 Eungkyu Song <eungkyu@sparcs.org>
License: GPL-2+

Files: po/nb.po
Copyright: 2001 Free Software Foundation, Inc.
           2001 Morten Brix Pedersen <morten@wtf.dk>
           2003 Geir Helland, <debian@marked.no>
           2005-2006, 2010, 2016 Hans F. Nordhaug <hans@nordhaug.priv.no>
License: GPL-2+

Files: po/nl.po
Copyright: 2001 Free Software Foundation, Inc.
           2001 Guus Sliepen <guus@debian.org>
	   2016 Remco Rijnders <remco@webconquest.com>
	   2022 Frans Spiesschaert <Frans.Spiesschaert@yucom.be>
License: GPL-2+

Files: po/pl.po
Copyright: 2005, 2010 Robert Luberda <robert@debian.org>
           2016 Łukasz Dulny <BartekChom@poczta.onet.pl>
License: GPL-2+

Files: po/pt_BR.po
Copyright: 2000 Cesar Eduardo Barros <cesarb@web4u.com.br>
           2004 André Luís Lopes <andreop@debian.org>
           2010 Éverton Arruda <root@earruda.eti.br>
           2010-2016 Adriano Rafael Gomes <adrianorg@arg.eti.br>
License: GPL-2+

Files: po/pt.po
Copyright: 2007 the adduser's copyright holder
           2007 Ricardo Silva <ardoric@gmail.com>
           2010-2023 Américo Monteiro <a_monteiro@netcabo.pt>
License: GPL-2+

Files: po/ru.po
Copyright: 2000, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
           2000 Peter Novodvorsky <nidd@debian.org>
           2004, 2005, 2006, 2007, 2008 Yuri Kozlov <kozlov.y@gmail.com>
           2009, 2010, 2016 Yuri Kozlov <yuray@komyakino.ru>
           2019 Lev Lamberow <dogsleg@debian.org>
License: GPL-2+

Files: po/sk.po
Copyright: 2007, 2010, 2016 Ivan Masár <helix84@centrum.sk>
License: GPL-2+

Files: po/sv.po
Copyright: 2006-2010 Free Software Foundation, Inc.
           2006, 2009 Daniel Nylander <po@danielnylander.se>
           2010, 2016 Martin Bagge <brother@bsnet.se>
License: GPL-2+

Files: po/uk.po
Copyright: 2004, 2005, 2006 Eugeniy Meshcheryakov <eugen@univ.kiev.ua>
License: GPL-2+

Files: po/vi.po
Copyright: 2010 Free Software Foundation, Inc.
           2010 Clytie Siddall <clytie@riverland.net.au>
           2016 Trần Ngọc Quân <vnwildman@gmail.com>
License: GPL-2+

Files: po/zh_CN.po
Copyright: 2009 Free Software Foundation, Inc.
           2004 Hiei Xu <nicky@mail.edu.cn>
           2004 Carlos Z.F. Liu <carlos_liu@yahoo.com>
           2009 Aron Xu <happyaron.xu@gmail.com>
           2018 Boyuan Yang <073plan@gmail.com>
License: GPL-2+

Files: doc/po4a/po/da.po
Copyright: 2016 adduser & nedenstående oversættere.
           2004 Claus Hindsgaul <claus_h@image.dk>
           2012, 2016 Joe Hansen <joedalton2@yahoo.dk>
License: GPL-2+

Files: doc/po4a/po/de.po
Copyright: 2010 Martin Eberhard Schauer <Martin.E.Schauer@gmx.de>
           2016-2020 Holger Wansing <linux@wansing-online.de>
License: GPL-2+

Files: doc/po4a/po/es.po
Copyright: 2010, 2011 Software in the Public Interest
           2010, 2011 Omar Campagne Polaino <ocampagne@gmail.com>
           Rubén Porras Campo
License: GPL-2+

Files: doc/po4a/po/fr.po
Copyright: 2004 Software in the Public Interest
           2008 Nicolas François <nicolas.francois@centraliens.net>
           2010 David Prévot <david@tilapin.org>
           2016-2023 Jean-Paul Guillonneau <guillonneau.jeanpaul@free.fr>
License: GPL-2+

Files: doc/po4a/po/it.po
Copyright: 2006-2020 Luca Monducci <luca.mo@tiscali.it>
License: GPL-2+

Files: doc/po4a/po/pl.po
Copyright: 2005, 2010 Robert Luberda <robert@debian.org>
           2016 Łukasz Dulny <BartekChom@poczta.onet.pl>
License: GPL-2+

Files: doc/po4a/po/pt_BR.po
Copyright: 2005 Free Software Foundation, Inc.
           2005-2006 Felipe Augusto van de Wiel (faw) <felipe@cathedrallabs.org>
License: GPL-2+

Files: doc/po4a/po/pt.po
Copyright: 2010 Free Software Foundation, Inc.
           2010-2023 Américo Monteiro <a_monteiro@gmx.com>
License: GPL-2+

Files: doc/po4a/po/ru.po
Copyright: 2005, 2006, 2007, 2008 Free Software Foundation, Inc.
           2005, 2006, 2007, 2008 Yuri Kozlov <kozlov.y@gmail.com>
           2010, 2016 Yuri Kozlov <yuray@komyakino.ru>
License: GPL-2+

Files: doc/po4a/po/sv.po
Copyright: 2006, 2010 Free Software Foundation, Inc.
           2006 Daniel Nylander <po@danielnylander.se>
           2010 Martin Bagge <brother@bsnet.se>
License: GPL-2+

License: GPL-2+
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.
 .
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 .
 A copy of the GNU General Public License, version 2, can be found in
 /usr/share/common-licenses/GPL-2 or in the COPYING file included with the
 source.
                                                                                                                                                                                                                                                                                                                                                                                usr/share/doc/adduser/examples/                                                                     0000755 0000000 0000000 00000000000 14714244400 015171  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/doc/adduser/examples/INSTALL                                                              0000644 0000000 0000000 00000001117 14433702273 016227  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        Please read the README file for detailed information about what needs to
be done to install the ADDUSER Local System Additions program.  In brief:

# cp --pr=t ./adduser.local /usr/local/sbin
# chmod 755 /usr/local/sbin/adduser.local
# cp ./adduser.local.conf /etc
# editor /etc/adduser.local.conf         # The important step!
# mkdir /etc/skel.other
# cp --pr=t ./adduser.local.conf.examples/skel.other/index.html /etc/skel.other

IMPORTANT: Do NOT just perform the above steps without knowing what you
are doing!  In particular, the fourth step is very important for you to
do correctly.
                                                                                                                                                                                                                                                                                                                                                                                                                                                 usr/share/doc/adduser/examples/README                                                               0000644 0000000 0000000 00000013027 14433702273 016061  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        **************************************************************************
*                                                                        *
*                   ADDUSER Local System Additions v4.9                  *
*                 Copyright (C) 1999-2013, John Zaitseff                 *
*                                                                        *
**************************************************************************

Welcome to the ADDUSER Local System Additions program!  This program, once
installed as /usr/local/sbin/adduser.local,  works in conjunction with the
Debian adduser(8) command to extend the creation of your user accounts.

As a system administrator, you are often faced with a long list of "things
to  do" when  creating  a new  user  account.  For  example,  if you  have
configured  FTP and  Web  servers, you  would  probably have  to create  a
directory  within their  directories for  the  new user,  possibly copy  a
skeleton "index.html" file  into the proper location, add  the user to the
"ftp" and "www" groups and  so on.  All, naturally, without forgetting any
vital step!

The adduser.local  program automates much  of this for you.   By modifying
the program's  configuration file, /etc/adduser.local.conf,  to match your
local  requirements,  this  program   can  automatically  add  a  user  to
supplementary  groups,  create directories  and  symbolic  links and  copy
skeleton files to the newly-created directories.

Note that once you install this program (and edit the configuration file),
you will never  need to directly run adduser.local:  the Debian adduser(8)
command automatically calls adduser.local with the correct parameters.  If
you like,  however, you CAN  run adduser.local directly (try  the "--help"
parameter for  a brief  command-line summary), such  as for  user accounts
that have already been created.

The adduser.local program  is written in Perl (with  comments!), and comes
with a sample configuration file that is extensively documented.  In fact,
the sample adduser.local.conf file is  probably all you will need to read,
once you  have installed the program.   A number of sample  files are also
included in the "adduser.local.conf.examples" directory --- do what you like
with these.

To  illustrate the  program's simplicity,  the following  lines  have been
taken almost verbatim from the sample configuration file:

    service = web

    user[web]       = www
    addtogroup[web] = true
    homedir[web]    = ""
    subdir[web]     = "doc/users"
    althome[web]    = false
    mkdir[web]      = true
    chgrpdir[web]   = true
    mklink[web]     = true
    linkname[web]   = "public_html"
    skelfile[web]   = "index.html"
    chgrpskel[web]  = true

Assuming adduser(8)  was called for the  user "john", and  the system user
"www" belongs  to the group "www"  and has the  home directory "/home/www"
(in actual fact,  all these values are taken  from the password database),
the following actions are performed by this program:

  - the user "john" is added to the group "www",

  - the directory "/home/www/doc/users/john" is created, owned by the user
    "john" and with group owner "www",

  - the link "public_html" is created  in the user "john"'s home directory
    to point to this directory,

  - the  file "/etc/skel.other/index.html"  is copied  to  this directory,
    owned by the user "john" and with group owner "www".

For more details, just read through the sample configuration file.


INSTALLATION
============

Installation of  the adduser.local program  is quite easy.   Simply follow
these steps as root:

1. Copy the actual program to the correct location:

       # cp --pr=t ./adduser.local /usr/local/sbin
       # chmod 755 /usr/local/sbin/adduser.local

2. Copy the configuration file to the correct location:

       # cp ./adduser.local.conf /etc

3. Edit  the configuration file  with your  favourite editor.   You should
   modify  the  file as  appropriate  to  your  requirements.  The  sample
   configuration file is extensively self-documented.

       # editor /etc/adduser.local.conf

4. Create the  "other" skeleton  directory and populate  it with  your own
   files.  For example:

       # mkdir /etc/skel.other
       # cp --pr=t ./adduser.local.conf.examples/skel.other/index.html /etc/skel.other

5. You are finished.

The main reason you have to install this program manually is so that you
do not forget to do Step 3, the most important one!


LICENSE
=======

The  adduser.local program  is  distributed  under the  terms  of the  GNU
General Public  License.  The  copyright on this  program belongs  to John
Zaitseff.  The actual license appears in the file COPYING, or, on a Debian
GNU/Linux system, in the file /usr/share/common-license/GPL.

Even though  the GNU General Public  License does NOT require  you to send
your modifications back to the author,  it is considered "good form" to do
so,  as this  allows your  modifications  to be  incorporated into  future
versions of the program, allowing others to benefit from them.

All files in the "adduser.local.conf.examples"  directory are released into
the public domain and are NOT covered by the GNU General Public License.


FEEDBACK
========

Your comments, suggestions, corrections and enhancements are always warmly
welcomed!  Please send these to:

Postal:   John Zaitseff,
          Unit 6, 116 Woodburn Road,
          Berala, NSW, 2141,
          Australia.

E-mail:   J.Zaitseff@zap.org.au
Web:      http://www.zap.org.au/software/utils/adduser.local/
FTP:      ftp://ftp.zap.org.au/pub/utils/adduser.local/adduser.local.tar.gz
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/share/doc/adduser/examples/adduser.conf                                                         0000644 0000000 0000000 00000005740 14433702273 017502  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # /etc/adduser.conf: `adduser' configuration.
# See adduser(8) and adduser.conf(5) for full documentation.

# A commented out setting indicates that this is the default in the
# code. If you need to change those settings, remove the comment and
# make your intended change.

# The login shell to be used for all new users.
# Default: DSHELL=/bin/bash
#DSHELL=/bin/bash

# The directory in which new home directories should  be  created.
# Default: DHOME=/home
# DHOME=/home

# The directory from which skeletal user configuration files
# will be copied.
# Default: SKEL=/etc/skel
#SKEL=/etc/skel

# Specify inclusive ranges of UIDs and GIDs from which UIDs and GIDs
# for system users, system groups, non-system users and non-system groups
# can be dynamically allocated.
# Default: FIRST_SYSTEM_UID=100, LAST_SYSTEM_UID=999
#FIRST_SYSTEM_UID=100
#LAST_SYSTEM_UID=999

# Default: FIRST_SYSTEM_GID=100, LAST_SYSTEM_GID=999
#FIRST_SYSTEM_GID=100
#LAST_SYSTEM_GID=999

# Default: FIRST_UID=1000, LAST_UID=59999
#FIRST_UID=1000
#LAST_UID=59999

# Default: FIRST_GID=1000, LAST_GID=59999
#FIRST_GID=1000
#LAST_GID=59999

# Specify a file or a directory containing UID and GID pool.
#UID_POOL=/etc/adduser-pool.conf
#UID_POOL=/etc/adduser-pool.d/
#GID_POOL=/etc/adduser-pool.conf
#GID_POOL=/etc/adduser-pool.d/

# Specify whether each created non-system user will be
# given their own group to use.
# Default: USERGROUPS=yes
#USERGROUPS=yes

# Defines the groupname or GID of the group all newly-created
# non-system users are placed into.
# It is a configuration error to define both variables
# even if the values are consistent.
# Default: USERS_GID=undefined, USERS_GROUP=users
#USERS_GID=100
#USERS_GROUP=users

# The permissions mode for home directories of non-system users.
# Default: DIR_MODE=0700
#DIR_MODE=0700

# The permissions mode for home directories of system users.
# Default: SYS_DIR_MODE=0755
#SYS_DIR_MODE=0755

# If set to a nonempty value, new users will have quotas copied
# from that user with `edquota -p QUOTAUSER newuser'
# Default: QUOTAUSER=""
#QUOTAUSER=""

# Non-system user- and groupnames are checked against this regular
# expression.
# Default: NAME_REGEX="^[a-z][-a-z0-9_]*\$?$"
#NAME_REGEX="^[a-z][-a-z0-9_]*\$?$"

# System user- and groupnames are checked against this regular
# expression.
# Default: SYS_NAME_REGEX="^[a-z_][-a-z0-9_]*\$?$"
#SYS_NAME_REGEX="^[a-z_][-a-z0-9_]*\$?$"

# When populating the newly created home directory of a non-system user,
# files in SKEL matching this regex are not copied.
# Default: SKEL_IGNORE_REGEX="\.(dpkg|ucf)-(old|new|dist|save)$"
#SKEL_IGNORE_REGEX="\.(dpkg|ucf)-(old|new|dist|save)$"

# list of groups that new non-system users will be added to
# if ADD_EXTRA_GROUPS is non-zero or set on the command line.
# Default: EXTRA_GROUPS="users"
#EXTRA_GROUPS="users"

# Setting this to something other than 0 will cause adduser to add
# newly created non-system users to the list of groups defined by
# EXTRA_GROUPS.
# Default: ADD_EXTRA_GROUPS=0
#ADD_EXTRA_GROUPS=0

                                usr/share/doc/adduser/examples/adduser.local                                                        0000755 0000000 0000000 00000063502 14433702273 017652  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #!/usr/bin/perl -w

#########################################################################
#                                                                       #
#                  ADDUSER Local System Additions v4.9                  #
#                Copyright (C) 1999-2013, John Zaitseff                 #
#                                                                       #
#########################################################################

# Author:   John Zaitseff <J.Zaitseff@zap.org.au>
# Date:     21st June, 2013
# Version:  4.9

# This program, once installed as /usr/local/sbin/adduser.local, is auto-
# matically called by the adduser(8) system program on a Debian system.
# This script completes the creation of a user account in a system-
# dependent way.
#
# This script is automatically called by adduser with arguments "USERNAME
# UID GID HOMEDIR".  See adduser(8) for more details.  In addition, this
# script may be called manually; run "perldoc adduser.local" for more
# details.


# This program, including associated files, is free software.  You may
# distribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation; either
# Version 2 of the license, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA


#########################################################################
# Configuration parameters and default values

use strict;			# Enforce better programming habits

use locale;			# Allow locale-specific sorting, etc.
use utf8;			# This script may use the UTF-8 character set
use open ":locale";		# Use locale for standard input/output

use Getopt::Long;		# Parse command line options
use Pod::Usage;			# Display command line usage


(our $O = $0)      =~ s,^.*/,,;	# Script name (without path)
our $version       = "4.9";	# Script version

our $copyright     =		# Copyright information
"$O v$version: adduser(8) local system additions\n" .
"Copyright (C) 1999-2013, John Zaitseff.\n";

our @adduser       = ('/usr/sbin/adduser', '--quiet');	# adduser(8)
our @chown         = ('/bin/chown', '-h');		# chown(1)
our @install       = ('/usr/bin/install', '-p');	# install(1)

our $procmounts    = '/proc/mounts';		# List of current mounts

# These default values are extensively documented in adduser.local.conf.

our $d_conffile    = '/etc/adduser.local.conf';	# Configuration file location
our $d_skelother   = '/etc/skel.other';		# Location of skeleton files
our $d_dirmode     = '2755';			# Octal mode for directories
our $d_filemode    = '0644';			# Octal mode for files

our $d_user        = '';	# Default service user name
our $d_group       = '';	# Default service group name
our $d_addtogroup  = 'false';	# Default for addtogroup variable
our $d_homedir     = '';	# Default home directory
our $d_subdir      = '';	# Default subdirectory
our $d_althome     = 'false';	# Default for use alternate home directory
our $d_mounted     = 'false';	# Default for checking if mounted
our $d_mkdir       = 'false';	# Default for creating directory
our $d_chgrpdir    = 'false';	# Default for chgrpdir variable
our $d_mklink      = 'false';	# Default for creating symbolic link
our $d_linkname    = '';	# Default for symbolic link name
our $d_skelfile    = '';	# Default for skeleton file
our $d_chgrpskel   = 'false';	# Default for chgrpskel variable

# Strings appearing in the configuration file

our $s_skelother   = 'skelother';
our $s_dirmode     = 'dirmode';
our $s_filemode    = 'filemode';

our $s_service     = 'service';

our $s_user        = 'user';
our $s_group       = 'group';
our $s_addtogroup  = 'addtogroup';
our $s_homedir     = 'homedir';
our $s_subdir      = 'subdir';
our $s_althome     = 'althome';
our $s_mounted     = 'mounted';
our $s_mkdir       = 'mkdir';
our $s_chgrpdir    = 'chgrpdir';
our $s_mklink      = 'mklink';
our $s_linkname    = 'linkname';
our $s_skelfile    = 'skelfile';
our $s_chgrpskel   = 'chgrpskel';

our @s_false       = ('false', 'f', 'no',  'n', '0');
our @s_true        = ('true',  't', 'yes', 'y', '1');

# Strings internal to this program (as used by the %cv hash)

our $s_svcuid      = '.svcuid';      # Storage for UID of service's user name
our $s_svcgid      = '.svcgid';      # GID of service's user name or group name
our $s_actualdir   = '.actualdir';   # Actual dir: homedir + subdir + username
our $s_actuallink  = '.actuallink';  # Actual sym link: user homedir + linkname
our $s_actualsrcf  = '.actualsrcf';  # Actual source file: skelother + skelfile
our $s_actualdstf  = '.actualdstf';  # Actual dest file: actualdir + skelfile

our $s_addtogroupB = '.addtogroupB'; # Boolean versions of variables
our $s_althomeB    = '.althomeB';
our $s_mountedB    = '.mountedB';
our $s_mkdirB      = '.mkdirB';
our $s_chgrpdirB   = '.chgrpdirB';
our $s_mklinkB     = '.mklinkB';
our $s_chgrpskelB  = '.chgrpskelB';

# Function prototypes

sub chkbool($$$$);
sub lchown(@);
sub showusage();
sub showversion();
sub showcmdlerr(@);


#########################################################################
# Initialise global variables

our $conffile      = $d_conffile;	# Default configuration file
our $verbose       = 1;			# Be verbose by default
our $dryrun        = 0;			# NOT a dry run by default

our @services      = ();		# No services to install by default

# %cv is a hash for all configuration variables read in from the
# configuration file.  Global variables are represented by their strings,
# eg, $cv{"skelother"}.  Service-specific variables are represented by the
# service string value, a comma, then their string, eg, $cv{"www","user"}.
# The %cl hash plays a similar role, but contains the line number of the
# configuration.

our (%cv, %cl);

$cv{$s_skelother} = $d_skelother;  $cl{$s_skelother} = 0;
$cv{$s_dirmode}   = $d_dirmode;    $cl{$s_dirmode}   = 0;
$cv{$s_filemode}  = $d_filemode;   $cl{$s_filemode}  = 0;

# For safety's sake, initialise the PATH environment variable

$ENV{PATH} = '/usr/sbin:/usr/bin:/sbin:/bin';

# Declare some global variables

our $username;			# Username for which adduser.local was called
our $uid;			# User's UID
our $gid;			# User's GID
our $homedir;			# User's home directory


#########################################################################
# Process command-line arguments

our $opt_help;
our $opt_version;

Getopt::Long::Configure("bundling");

GetOptions('help|h|?'   => \$opt_help,
	   'version|V'  => \$opt_version,
	   'conf=s'     => \$conffile,
	   'dry-run|n!' => \$dryrun,
	   'verbose|v!' => \$verbose,
	   'quiet|q'    => sub { $verbose = 0; },
	  )
    or showcmdlerr();

showusage()   if $opt_help;
showversion() if $opt_version;


#########################################################################
# Process additional command-line parameters: USERNAME [UID GID HOMEDIR]

if ($#ARGV < 0) { showcmdlerr("$O: Missing USERNAME parameter"); }
if ($#ARGV > 3) { showcmdlerr("$O: Too many command-line parameters"); }

# Include some sanity checking.  These checks are not particularly
# rigorous, as root can do anything anyway...  It is meant to stop silly
# mistakes, not to stop thinking.  In any case, this script SHOULD only
# be called from adduser(8)...

die "$O: Only root can execute this program\n" if ($> != 0) and (! $dryrun);

if ($#ARGV == 0) {
    # Only a single parameter: USERNAME

    $username = $ARGV[0];

    (my $t_name, undef, $uid, $gid, undef, undef, undef, $homedir)
	= getpwnam($username);

    die "$O: No such user: $username\n" if ! defined($t_name);

} elsif ($#ARGV == 3) {
    # Four parameters: USERNAME UID GID HOMEDIR

    $username = $ARGV[0];
    $uid      = $ARGV[1];
    $gid      = $ARGV[2];
    $homedir  = $ARGV[3];

    $homedir =~ s,/$,,;			# Remove trailing '/' if present
    (my $t_name, undef, my $t_uid, my $t_gid) = getpwnam($username);

    die "$O: No such user: $username\n" if ! defined($t_name);
    die "$O: No such UID: $uid\n" if ! defined(getpwuid($uid));
    die "$O: No such GID: $gid\n" if ! defined(getgrgid($gid));
    die "$O: UID of user $username not the same as $uid\n" if $t_uid != $uid;
    die "$O: GID of user $username not the same as $gid\n" if $t_gid != $gid;
    die "$O: Directory does not exist: $homedir\n" if ! -d $homedir;

} else {
    showcmdlerr("$O: Missing UID, GID and/or HOMEDIR parameters");
}


#########################################################################
# Process the configuration file

if (! -r $conffile) {
    warn "$O: Cannot read configuration file $conffile:\n";
    warn "$O: $conffile: $!\n";

    exit(0);
}

print "Processing configuration file $conffile\n" if $verbose;

open(CONFFILE, $conffile) or die "$O: $conffile: $!\n";

while (<CONFFILE>) {
    my ($var, $svc, $val);

    chomp;

    # Skip comments and blank lines
    next if /^\s*#/ or /^\s*$/;

    # Try matching a global variable with or without quotes
    if ((($var, $val) = /^\s*(\w+)\s*=\s*(.*)$/) == 2) {

	# Remove trailing spaces and surrounding quotes
	# (Technically, doing it this way is slightly sloppy)
	$val =~ s/^(.*?)\s*$/$1/;
	$val =~ s/^\"(.*)\"$/$1/;
	$val =~ s/^\'(.*)\'$/$1/;

	# Process the global variable
	if ($var eq $s_service) {

	    # Special global configuration variable "service"
	    my $svc = $val;

	    if (grep($_ eq $svc, @services)) {
		warn "$O: Service \"$val\" redefined at $conffile:$.\n";
		next;
	    }

	    push @services, $val;

	    # Set up default values

	    $cv{$svc,$s_user}       = $d_user;
	    $cv{$svc,$s_group}      = $d_group;
	    $cv{$svc,$s_addtogroup} = $d_addtogroup;
	    $cv{$svc,$s_homedir}    = $d_homedir;
	    $cv{$svc,$s_subdir}     = $d_subdir;
	    $cv{$svc,$s_althome}    = $d_althome;
	    $cv{$svc,$s_mounted}    = $d_mounted;
	    $cv{$svc,$s_mkdir}      = $d_mkdir;
	    $cv{$svc,$s_chgrpdir}   = $d_chgrpdir;
	    $cv{$svc,$s_mklink}     = $d_mklink;
	    $cv{$svc,$s_linkname}   = $d_linkname;
	    $cv{$svc,$s_skelfile}   = $d_skelfile;
	    $cv{$svc,$s_chgrpskel}  = $d_chgrpskel;

	    $cl{$svc,$s_user}       = 0;
	    $cl{$svc,$s_group}      = 0;
	    $cl{$svc,$s_addtogroup} = 0;
	    $cl{$svc,$s_homedir}    = 0;
	    $cl{$svc,$s_subdir}     = 0;
	    $cl{$svc,$s_althome}    = 0;
	    $cl{$svc,$s_mounted}    = 0;
	    $cl{$svc,$s_mkdir}      = 0;
	    $cl{$svc,$s_chgrpdir}   = 0;
	    $cl{$svc,$s_mklink}     = 0;
	    $cl{$svc,$s_linkname}   = 0;
	    $cl{$svc,$s_skelfile}   = 0;
	    $cl{$svc,$s_chgrpskel}  = 0;
	}
	else {
	    # Ordinary global variable

	    if (! defined($cv{$var})) {
		warn "$O: Unknown global variable \"$var\" at $conffile:$.\n";
		next;
	    }

	    $cv{$var} = $val;
	    $cl{$var} = $.;
	}
    }

    # Try matching a service variable with or without quotes
    elsif ((($var, $svc, $val) = /^\s*(\w+)\s*\[\s*(\w+)\s*\]\s*=\s*(.*)$/) == 3) {

	# Remove trailing spaces and surrounding quotes
	$val =~ s/^(.*?)\s*$/$1/;
	$val =~ s/^\"(.*)\"$/$1/;
	$val =~ s/^\'(.*)\'$/$1/;

	if (! grep($_ eq $svc, @services)) {
	    warn "$O: Undefined service \"$svc\" at $conffile:$.\n";
	    next;
	}
	if (! defined($cv{$svc,$var})) {
	    warn "$O: Unknown service variable \"$var\" at $conffile:$.\n";
	    next;
	}

	$cv{$svc,$var} = $val;
	$cl{$svc,$var} = $.;
    }

    # Otherwise, it is an error in the configuration file
    else {
	warn "$O: Could not parse line at $conffile:$.\n";
	next;
    }
}

close(CONFFILE) or die "$O: $conffile: $!\n";


#########################################################################
# Global variables sanity checking
{
    my $t;

    # Check "skelother"

    if (! -d $cv{$s_skelother}) {
	warn "$O: Directory $cv{$s_skelother} does not exist\n";
    }

    # Check "dirmode"

    $t = $cv{$s_dirmode};
    if (($t !~ /^[01234567]{1,4}$/) or (oct($t) == 0)) {
	warn "$O: Illegal value \"$t\" at $conffile:$cl{$s_dirmode}\n";
	warn "$O: Global variable \"$s_dirmode\" set to $d_dirmode\n";
	$cv{$s_dirmode} = $d_dirmode;
    }

    # Check "filemode"

    $t = $cv{$s_filemode};
    if (($t !~ /^[01234567]{1,4}$/) or (oct($t) == 0)) {
	warn "$O: Illegal value \"$t\" at $conffile:$cl{$s_filemode}\n";
	warn "$O: Global variable \"$s_filemode\" set to $d_filemode\n";
	$cv{$s_filemode} = $d_filemode;
    }
}


#########################################################################
# Actually perform what is required, with appropriate error checking

foreach my $svc (@services) {
    my ($t_user, $t_group, $t_homedir);

    print "Processing service \"$svc\"\n" if $verbose;

    # Check validity of all boolean variables and convert them to true bools

    chkbool($svc, $s_addtogroup, $s_addtogroupB, $d_addtogroup);
    chkbool($svc, $s_althome,    $s_althomeB,    $d_althome);
    chkbool($svc, $s_mounted,    $s_mountedB,    $d_mounted);
    chkbool($svc, $s_mkdir,      $s_mkdirB,      $d_mkdir);
    chkbool($svc, $s_chgrpdir,   $s_chgrpdirB,   $d_chgrpdir);
    chkbool($svc, $s_mklink,     $s_mklinkB,     $d_mklink);
    chkbool($svc, $s_chgrpskel,  $s_chgrpskelB,  $d_chgrpskel);

    # Process the "user" configuration variable

    if ($cv{$svc,$s_user} ne '') {
	# Retrieve information about the specified service's user name

	(my $t_user, undef, $cv{$svc,$s_svcuid}, $cv{$svc,$s_svcgid},
	 undef, undef, undef, my $t_homedir) = getpwnam($cv{$svc,$s_user});

	if (! defined($t_user)) {
	    warn "$O: Illegal user name \"$cv{$svc,$s_user}\" at $conffile:$cl{$svc,$s_user}\n";
	} else {
	    $cv{$svc,$s_user} = $t_user;
	}

	# Only set home directory information if not specified by user
	if ($cv{$svc,$s_homedir} eq '') {
	    if ($cv{$svc,$s_althomeB}) {
		$cv{$svc,$s_homedir} = $homedir;      # From command line
	    } else {
		$cv{$svc,$s_homedir} = $t_homedir;    # From service's home
	    }
	}

	# If the group parameter is not specified, get the appropriate info
	# from the user information
	if ($cv{$svc,$s_svcgid} and ($cv{$svc,$s_group} eq '')) {
	    ($cv{$svc,$s_group}) = getgrgid($cv{$svc,$s_svcgid});
	}
    }

    # Process the "group" configuration variable

    if ($cv{$svc,$s_group} ne '') {
	# Retrieve info about the group.  Yes, it may have been done
	# above, but specifying "group" can be done without specifying
	# "user".  In addition, a different group can be specified from
	# that used by "user".

	($t_group, undef, $cv{$svc,$s_svcgid}) = getgrnam($cv{$svc,$s_group});

	if (! defined($t_group)) {
	    warn "$O: Illegal group name \"$cv{$svc,$s_group}\" at $conffile:$cl{$svc,$s_group}\n";

	    $cv{$svc,$s_addtogroup} = 'false';   $cv{$svc,$s_addtogroupB} = 0;
	    $cv{$svc,$s_chgrpdir}   = 'false';   $cv{$svc,$s_chgrpdirB}   = 0;
	    $cv{$svc,$s_chgrpskel}  = 'false';   $cv{$svc,$s_chgrpskelB}  = 0;
	}
	else {
	    $cv{$svc,$s_group} = $t_group;
	}
    }

    # Process the "addtogroup" configuration variable

    if ($cv{$svc,$s_addtogroupB} and ($cv{$svc,$s_group} ne '')) {

	my $t = $cv{$svc,$s_group};
	(my $t_group, undef, my $t_gid, my $t_members) = getgrnam $t;

	# Check if the user is already a member of that group

	if (($t_gid == $gid) or grep($_ eq $username, split(' ', $t_members))) {
	    print "    User \"$username\" already in group \"$t\"\n"
		if $verbose;
	} else {
	    print "    Adding user \"$username\" to group \"$t\"\n"
		if $verbose;
	    system(@adduser, $username, $t) if ! $dryrun;
	}
    }

    # Process the "mounted" configuration variable

    $cv{$svc,$s_homedir} =~ s,/$,,;		# Remove trailing / on homedir
    $cv{$svc,$s_subdir}  =~ s,^/,,;		# Remove leading / on subdir
    $cv{$svc,$s_subdir}  =~ s,/$,,;		# Remove trailing / on subdir

    if (($cv{$svc,$s_homedir} ne '') and $cv{$svc,$s_mountedB}) {
	# Need to check for "mounted" before checking for the existence of
	# of the service's home directory.

	if (! -r $procmounts) {
	    warn "$O: $procmounts: $!\n";
	} else {
	    my ($t_dev, $t_mntpoint, $t_type, $t_options);
	    my $ismounted = 0;
	    my $t_dir = $cv{$svc,$s_homedir} . '/';

	    # Open mounts table and process it

	    open(MOUNTS, $procmounts) or die "$O: $procmounts: $!\n";
	    while (<MOUNTS>) {
		chomp;
		($t_dev, $t_mntpoint, $t_type, $t_options) = split;
		if ($t_mntpoint !~ m,/$,) { $t_mntpoint .= '/'; }

		# Check if the service's home directory is mounted
		# Skip "/" as that is always mounted
		if (($t_mntpoint ne '/') and
