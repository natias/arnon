								*E679*
Do make sure this syncolor.vim script does not use a "syntax on", set the
'background' option or uses a "colorscheme" command, because it results in an
endless loop.

Note that when a color scheme is used, there might be some confusion whether
your defined colors are to be used or the colors from the scheme.  This
depends on the color scheme file.  See |:colorscheme|.

							*syntax_cmd*
The "syntax_cmd" variable is set to one of these values when the
syntax/syncolor.vim files are loaded:
   "on"		`:syntax on` command.  Highlight colors are overruled but
		links are kept
   "enable"	`:syntax enable` command.  Only define colors for groups that
		don't have highlighting yet.  Use `:highlight default` .
   "reset"	`:syntax reset` command or loading a color scheme.  Define all
		the colors.
   "skip"	Don't define colors.  Used to skip the default settings when a
		syncolor.vim file earlier in 'runtimepath' has already set
		them.

==============================================================================
17. Highlighting tags					*tag-highlight*

If you want to highlight all the tags in your file, you can use the following
mappings.

	<F11>	-- Generate tags.vim file, and highlight tags.
	<F12>	-- Just highlight tags based on existing tags.vim file.
>
  :map <F11>  :sp tags<CR>:%s/^\([^	:]*:\)\=\([^	]*\).*/syntax keyword Tag \2/<CR>:wq! tags.vim<CR>/^<CR><F12>
  :map <F12>  :so tags.vim<CR>

WARNING: The longer the tags file, the slower this will be, and the more
memory Vim will consume.

Only highlighting typedefs, unions and structs can be done too.  For this you
must use Universal Ctags (found at https://ctags.io) or Exuberant ctags (found
at http://ctags.sf.net).

Put these lines in your Makefile:

# Make a highlight file for types.  Requires Universal/Exuberant ctags and awk
types: types.vim
types.vim: *.[ch]
	ctags --c-kinds=gstu -o- *.[ch] |\
		awk 'BEGIN{printf("syntax keyword Type\t")}\
			{printf("%s ", $$1)}END{print ""}' > $@

And put these lines in your .vimrc: >

   " load the types.vim highlighting file, if it exists
   autocmd BufRead,BufNewFile *.[ch] let fname = expand('<afile>:p:h') .. '/types.vim'
   autocmd BufRead,BufNewFile *.[ch] if filereadable(fname)
   autocmd BufRead,BufNewFile *.[ch]   exe 'so ' .. fname
   autocmd BufRead,BufNewFile *.[ch] endif

==============================================================================
18. Window-local syntax				*:ownsyntax*

Normally all windows on a buffer share the same syntax settings. It is
possible, however, to set a particular window on a file to have its own
private syntax setting. A possible example would be to edit LaTeX source
with conventional highlighting in one window, while seeing the same source
highlighted differently (so as to hide control sequences and indicate bold,
italic etc regions) in another. The 'scrollbind' option is useful here.

To set the current window to have the syntax "foo", separately from all other
windows on the buffer: >
   :ownsyntax foo
<						*w:current_syntax*
This will set the "w:current_syntax" variable to "foo".  The value of
"b:current_syntax" does not change.  This is implemented by saving and
restoring "b:current_syntax", since the syntax files do set
"b:current_syntax".  The value set by the syntax file is assigned to
"w:current_syntax".
Note: This resets the 'spell', 'spellcapcheck' and 'spellfile' options.

Once a window has its own syntax, syntax commands executed from other windows
on the same buffer (including :syntax clear) have no effect. Conversely,
syntax commands executed from that window do not affect other windows on the
same buffer.

A window with its own syntax reverts to normal behavior when another buffer
is loaded into that window or the file is reloaded.
When splitting the window, the new window will use the original syntax.

==============================================================================
19. Color xterms				*xterm-color* *color-xterm*

Most color xterms have only eight colors.  If you don't get colors with the
default setup, it should work with these lines in your .vimrc: >
   :if &term =~ "xterm"
   :  if has("terminfo")
   :	set t_Co=8
   :	set t_Sf=<Esc>[3%p1%dm
   :	set t_Sb=<Esc>[4%p1%dm
   :  else
   :	set t_Co=8
   :	set t_Sf=<Esc>[3%dm
   :	set t_Sb=<Esc>[4%dm
   :  endif
   :endif
<	[<Esc> is a real escape, type CTRL-V <Esc>]

You might want to change the first "if" to match the name of your terminal,
e.g. "dtterm" instead of "xterm".

Note: Do these settings BEFORE doing ":syntax on".  Otherwise the colors may
be wrong.
							*xiterm* *rxvt*
The above settings have been mentioned to work for xiterm and rxvt too.
But for using 16 colors in an rxvt these should work with terminfo: >
	:set t_AB=<Esc>[%?%p1%{8}%<%t25;%p1%{40}%+%e5;%p1%{32}%+%;%dm
	:set t_AF=<Esc>[%?%p1%{8}%<%t22;%p1%{30}%+%e1;%p1%{22}%+%;%dm
<
							*colortest.vim*
To test your color setup, a file has been included in the Vim distribution.
To use it, execute this command: >
   :runtime syntax/colortest.vim

Some versions of xterm (and other terminals, like the Linux console) can
output lighter foreground colors, even though the number of colors is defined
at 8.  Therefore Vim sets the "cterm=bold" attribute for light foreground
colors, when 't_Co' is 8.

							*xfree-xterm*
To get 16 colors or more, get the newest xterm version (which should be
included with XFree86 3.3 and later).  You can also find the latest version
at: >
	http://invisible-island.net/xterm/xterm.html
Here is a good way to configure it.  This uses 88 colors and enables the
termcap-query feature, which allows Vim to ask the xterm how many colors it
supports. >
	./configure --disable-bold-color --enable-88-color --enable-tcap-query
If you only get 8 colors, check the xterm compilation settings.
(Also see |UTF8-xterm| for using this xterm with UTF-8 character encoding).

This xterm should work with these lines in your .vimrc (for 16 colors): >
   :if has("terminfo")
   :  set t_Co=16
   :  set t_AB=<Esc>[%?%p1%{8}%<%t%p1%{40}%+%e%p1%{92}%+%;%dm
   :  set t_AF=<Esc>[%?%p1%{8}%<%t%p1%{30}%+%e%p1%{82}%+%;%dm
   :else
   :  set t_Co=16
   :  set t_Sf=<Esc>[3%dm
   :  set t_Sb=<Esc>[4%dm
   :endif
<	[<Esc> is a real escape, type CTRL-V <Esc>]

Without |+terminfo|, Vim will recognize these settings, and automatically
translate cterm colors of 8 and above to "<Esc>[9%dm" and "<Esc>[10%dm".
Colors above 16 are also translated automatically.

For 256 colors this has been reported to work: >

   :set t_AB=<Esc>[48;5;%dm
   :set t_AF=<Esc>[38;5;%dm

Or just set the TERM environment variable to "xterm-color" or "xterm-16color"
and try if that works.

You probably want to use these X resources (in your ~/.Xdefaults file):
	XTerm*color0:			#000000
	XTerm*color1:			#c00000
	XTerm*color2:			#008000
	XTerm*color3:			#808000
	XTerm*color4:			#0000c0
	XTerm*color5:			#c000c0
	XTerm*color6:			#008080
	XTerm*color7:			#c0c0c0
	XTerm*color8:			#808080
	XTerm*color9:			#ff6060
	XTerm*color10:			#00ff00
	XTerm*color11:			#ffff00
	XTerm*color12:			#8080ff
	XTerm*color13:			#ff40ff
	XTerm*color14:			#00ffff
	XTerm*color15:			#ffffff
	Xterm*cursorColor:		Black

[Note: The cursorColor is required to work around a bug, which changes the
cursor color to the color of the last drawn text.  This has been fixed by a
newer version of xterm, but not everybody is using it yet.]

To get these right away, reload the .Xdefaults file to the X Option database
Manager (you only need to do this when you just changed the .Xdefaults file): >
  xrdb -merge ~/.Xdefaults
<
					*xterm-blink* *xterm-blinking-cursor*
To make the cursor blink in an xterm, see tools/blink.c.  Or use Thomas
Dickey's xterm above patchlevel 107 (see above for where to get it), with
these resources:
	XTerm*cursorBlink:	on
	XTerm*cursorOnTime:	400
	XTerm*cursorOffTime:	250
	XTerm*cursorColor:	White

							*hpterm-color*
These settings work (more or less) for an hpterm, which only supports 8
foreground colors: >
   :if has("terminfo")
   :  set t_Co=8
   :  set t_Sf=<Esc>[&v%p1%dS
   :  set t_Sb=<Esc>[&v7S
   :else
   :  set t_Co=8
   :  set t_Sf=<Esc>[&v%dS
   :  set t_Sb=<Esc>[&v7S
   :endif
<	[<Esc> is a real escape, type CTRL-V <Esc>]

						*Eterm* *enlightened-terminal*
These settings have been reported to work for the Enlightened terminal
emulator, or Eterm.  They might work for all xterm-like terminals that use the
bold attribute to get bright colors.  Add an ":if" like above when needed. >
       :set t_Co=16
       :set t_AF=^[[%?%p1%{8}%<%t3%p1%d%e%p1%{22}%+%d;1%;m
       :set t_AB=^[[%?%p1%{8}%<%t4%p1%d%e%p1%{32}%+%d;1%;m
<
						*TTpro-telnet*
These settings should work for TTpro telnet.  Tera Term Pro is a freeware /
open-source program for MS-Windows. >
	set t_Co=16
	set t_AB=^[[%?%p1%{8}%<%t%p1%{40}%+%e%p1%{32}%+5;%;%dm
	set t_AF=^[[%?%p1%{8}%<%t%p1%{30}%+%e%p1%{22}%+1;%;%dm
Also make sure TTpro's Setup / Window / Full Color is enabled, and make sure
that Setup / Font / Enable Bold is NOT enabled.
(info provided by John Love-Jensen <eljay@Adobe.COM>)


==============================================================================
20. When syntax is slow						*:syntime*

This is aimed at authors of a syntax file.

If your syntax causes redrawing to be slow, here are a few hints on making it
faster.  To see slowness switch on some features that usually interfere, such
as 'relativenumber' and |folding|.

Note: This is only available when compiled with the |+profile| feature.
You many need to build Vim with "huge" features.

To find out what patterns are consuming most time, get an overview with this
sequence: >
	:syntime on
	[ redraw the text at least once with CTRL-L ]
	:syntime report

This will display a list of syntax patterns that were used, sorted by the time
it took to match them against the text.

:syntime on		Start measuring syntax times.  This will add some
			overhead to compute the time spent on syntax pattern
			matching.

:syntime off		Stop measuring syntax times.

:syntime clear		Set all the counters to zero, restart measuring.

:syntime report		Show the syntax items used since ":syntime on" in the
			current window.  Use a wider display to see more of
			the output.

			The list is sorted by total time. The columns are:
			TOTAL		Total time in seconds spent on
					matching this pattern.
			COUNT		Number of times the pattern was used.
			MATCH		Number of times the pattern actually
					matched
			SLOWEST		The longest time for one try.
			AVERAGE		The average time for one try.
			NAME		Name of the syntax item.  Note that
					this is not unique.
			PATTERN		The pattern being used.

Pattern matching gets slow when it has to try many alternatives.  Try to
include as much literal text as possible to reduce the number of ways a
pattern does NOT match.

When using the "\@<=" and "\@<!" items, add a maximum size to avoid trying at
all positions in the current and previous line.  For example, if the item is
literal text specify the size of that text (in bytes):

"<\@<=span"	Matches "span" in "<span".  This tries matching with "<" in
		many places.
"<\@1<=span"	Matches the same, but only tries one byte before "span".


 vim:tw=78:sw=4:ts=8:noet:ft=help:norl:
                                                                                                                                                                      usr/share/vim/vim90/doc/tabpage.txt                                                                 0000644 0000000 0000000 00000041536 14424703754 015652  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        *tabpage.txt*   For Vim version 9.0.  Last change: 2022 Feb 02


		  VIM REFERENCE MANUAL    by Bram Moolenaar


Editing with windows in multiple tab pages.		*tab-page* *tabpage*

The commands which have been added to use multiple tab pages are explained
here.  Additionally, there are explanations for commands that work differently
when used in combination with more than one tab page.

1. Introduction			|tab-page-intro|
2. Commands			|tab-page-commands|
3. Other items			|tab-page-other|
4. Setting 'tabline'		|setting-tabline|
5. Setting 'guitablabel'	|setting-guitablabel|

{not able to use multiple tab pages when the |+windows| feature was disabled
at compile time}

==============================================================================
1. Introduction						*tab-page-intro*

A tab page holds one or more windows.  You can easily switch between tab
pages, so that you have several collections of windows to work on different
things.

Usually you will see a list of labels at the top of the Vim window, one for
each tab page.  With the mouse you can click on the label to jump to that tab
page.  There are other ways to move between tab pages, see below.

Most commands work only in the current tab page.  That includes the |CTRL-W|
commands, |:windo|, |:all| and |:ball| (when not using the |:tab| modifier).
The commands that are aware of other tab pages than the current one are
mentioned below.

Tabs are also a nice way to edit a buffer temporarily without changing the
current window layout.  Open a new tab page, do whatever you want to do and
close the tab page.

==============================================================================
2. Commands						*tab-page-commands*

OPENING A NEW TAB PAGE:

When starting Vim "vim -p filename ..." opens each file argument in a separate
tab page (up to 'tabpagemax').  See |-p|

A double click with the mouse in the non-GUI tab pages line opens a new, empty
tab page.  It is placed left of the position of the click.  The first click
may select another tab page first, causing an extra screen update.

This also works in a few GUI versions, esp. Win32 and Motif.  But only when
clicking right of the labels.

In the GUI tab pages line you can use the right mouse button to open menu.
|tabline-menu|.

For the related autocommands see |tabnew-autocmd|.

:[count]tabe[dit]				*:tabe* *:tabedit* *:tabnew*
:[count]tabnew
		Open a new tab page with an empty window, after the current
		tab page.  If [count] is given the new tab page appears after
		the tab page [count] otherwise the new tab page will appear
		after the current one. >
		    :tabnew	" opens tabpage after the current one
		    :.tabnew	" as above
		    :+tabnew	" opens tabpage after the next tab page
				" note: it is one further than :tabnew
		    :-tabnew	" opens tabpage before the current one
		    :0tabnew	" opens tabpage before the first one
		    :$tabnew	" opens tabpage after the last one

:[count]tabe[dit] [++opt] [+cmd] {file}
:[count]tabnew [++opt] [+cmd] {file}
		Open a new tab page and edit {file}, like with |:edit|.
		For [count] see |:tabnew| above.

:[count]tabf[ind] [++opt] [+cmd] {file}			*:tabf* *:tabfind*
		Open a new tab page and edit {file} in 'path', like with
		|:find|.  For [count] see |:tabnew| above.

:[count]tab {cmd}					*:tab*
		Execute {cmd} and when it opens a new window open a new tab
		page instead.  Doesn't work for |:diffsplit|, |:diffpatch|,
		|:execute| and |:normal|.
		If [count] is given the new tab page appears after the tab
		page [count] otherwise the new tab page will appear after the
		current one.
		Examples: >
		    :tab split	    " opens current buffer in new tab page
		    :tab help gt    " opens tab page with help for "gt"
		    :.tab help gt   " as above
		    :+tab help	    " opens tab page with help after the next
				    " tab page
		    :-tab help	    " opens tab page with help before the
				    " current one
		    :0tab help	    " opens tab page with help before the
				    " first one
		    :$tab help	    " opens tab page with help after the last
				    " one

CTRL-W gf	Open a new tab page and edit the file name under the cursor.
		See |CTRL-W_gf|.

CTRL-W gF	Open a new tab page and edit the file name under the cursor
		and jump to the line number following the file name.
		See |CTRL-W_gF|.

CLOSING A TAB PAGE:

Closing the last window of a tab page closes the tab page too, unless there is
only one tab page.

Using the mouse: If the tab page line is displayed you can click in the "X" at
the top right to close the current tab page.  A custom |'tabline'| may show
something else.

							*:tabc* *:tabclose*
:tabc[lose][!]	Close current tab page.
		This command fails when:
		- There is only one tab page on the screen.		*E784*
		- When 'hidden' is not set, [!] is not used, a buffer has
		  changes, and there is no other window on this buffer.
		Changes to the buffer are not written and won't get lost, so
		this is a "safe" command. >
		    :tabclose	    " close the current tab page

:{count}tabc[lose][!]
:tabc[lose][!] {count}
		Close tab page {count}.  Fails in the same way as `:tabclose`
		above. >
		    :-tabclose	    " close the previous tab page
		    :+tabclose	    " close the next tab page
		    :1tabclose	    " close the first tab page
		    :$tabclose	    " close the last tab page
		    :tabclose -2    " close the 2nd previous tab page
		    :tabclose +	    " close the next tab page
		    :tabclose 3	    " close the third tab page
		    :tabclose $	    " close the last tab page
		    :tabclose #     " close the last accessed tab page

When a tab is closed the next tab page will become the current one.

							*:tabo* *:tabonly*
:tabo[nly][!]	Close all other tab pages.
		When the 'hidden' option is set, all buffers in closed windows
		become hidden.
		When 'hidden' is not set, and the 'autowrite' option is set,
		modified buffers are written.  Otherwise, windows that have
		buffers that are modified are not removed, unless the [!] is
		given, then they become hidden.  But modified buffers are
		never abandoned, so changes cannot get lost. >
		    :tabonly	    " close all tab pages except the current
				    " one

:{count}tabo[nly][!]
:tabo[nly][!] {count}
		Close all tab pages except {count} one. >
		    :.tabonly	    " as above
		    :-tabonly	    " close all tab pages except the previous
				    " one
		    :+tabonly	    " close all tab pages except the next one
		    :1tabonly	    " close all tab pages except the first one
		    :$tabonly	    " close all tab pages except the last one
		    :tabonly -	    " close all tab pages except the previous
				    " one
		    :tabonly +2     " close all tab pages except the two next
				    " one
		    :tabonly 1	    " close all tab pages except the first one
		    :tabonly $	    " close all tab pages except the last one
		    :tabonly #	    " close all tab pages except the last
				    " accessed one


SWITCHING TO ANOTHER TAB PAGE:

Using the mouse: If the tab page line is displayed you can click in a tab page
label to switch to that tab page.  Click where there is no label to go to the
next tab page.  |'tabline'|

:tabn[ext]				*:tabn* *:tabnext* *gt*
<C-PageDown>				*CTRL-<PageDown>* *<C-PageDown>*
gt					*i_CTRL-<PageDown>* *i_<C-PageDown>*
		Go to the next tab page.  Wraps around from the last to the
		first one.

:{count}tabn[ext]
:tabn[ext] {count}
		Go to tab page {count}.  The first tab page has number one. >
		    :-tabnext	" go to the previous tab page
		    :+tabnext	" go to the next tab page
		    :+2tabnext	" go to the two next tab page
		    :1tabnext	" go to the first tab page
		    :$tabnext	" go to the last tab page
		    :tabnext $	" as above
		    :tabnext #  " go to the last accessed tab page
		    :tabnext -	" go to the previous tab page
		    :tabnext -1	" as above
		    :tabnext +	" go to the next tab page
		    :tabnext +1	" as above

{count}<C-PageDown>
{count}gt	Go to tab page {count}.  The first tab page has number one.


:tabp[revious]				*:tabp* *:tabprevious* *gT* *:tabN*
:tabN[ext]				*:tabNext* *CTRL-<PageUp>*
<C-PageUp>			 *<C-PageUp>* *i_CTRL-<PageUp>* *i_<C-PageUp>*
gT		Go to the previous tab page.  Wraps around from the first one
		to the last one.

:tabp[revious] {count}
:tabN[ext] {count}
{count}<C-PageUp>
{count}gT	Go {count} tab pages back.  Wraps around from the first one
		to the last one.  Note that the use of {count} is different
		from |:tabnext|, where it is used as the tab page number.

:tabr[ewind]			*:tabfir* *:tabfirst* *:tabr* *:tabrewind*
:tabfir[st]	Go to the first tab page.

							*:tabl* *:tablast*
:tabl[ast]	Go to the last tab page.

					*g<Tab>* *CTRL-W_g<Tab>* *<C-Tab>*
g<Tab>		Go to the last accessed tab page.

Other commands:
							*:tabs*
:tabs		List the tab pages and the windows they contain.
		Shows a ">" for the current window.
		Shows a "+" for modified buffers.
		For example:
			Tab page 1 ~
			  + tabpage.txt ~
			    ex_docmd.c ~
			Tab page 2 ~
			>   main.c ~


REORDERING TAB PAGES:

:tabm[ove] [N]						*:tabm* *:tabmove*
:[N]tabm[ove]
		Move the current tab page to after tab page N.  Use zero to
		make the current tab page the first one.  N is counted before
		the move, thus if the second tab is the current one,
		`:tabmove 1` and `:tabmove 2`  have no effect.
		Without N the tab page is made the last one. >
		    :.tabmove	" do nothing
		    :-tabmove	" move the tab page to the left
		    :+tabmove	" move the tab page to the right
		    :0tabmove	" move the tab page to the beginning of the tab
				" list
		    :tabmove 0	" as above
		    :tabmove	" move the tab page to the last
		    :$tabmove	" as above
		    :tabmove $	" as above
		    :tabmove #	" move the tab page after the last accessed
				" tab page

:tabm[ove] +[N]
:tabm[ove] -[N]
		Move the current tab page N places to the right (with +) or to
		the left (with -). >
		    :tabmove -	" move the tab page to the left
		    :tabmove -1	" as above
		    :tabmove +	" move the tab page to the right
		    :tabmove +1	" as above


Note that although it is possible to move a tab behind the N-th one by using
:Ntabmove. And move it by N places by using :+Ntabmove. For clarification what
+N means in this context see |[range]|.


LOOPING OVER TAB PAGES:

							*:tabd* *:tabdo*
:[range]tabd[o] {cmd}
		Execute {cmd} in each tab page or if [range] is given only in
		tab pages which tab page number is in the [range].  It works
		like doing this: >
			:tabfirst
			:{cmd}
			:tabnext
			:{cmd}
			etc.
<		This only operates in the current window of each tab page.
		When an error is detected on one tab page, further tab pages
		will not be visited.
		The last tab page (or where an error occurred) becomes the
		current tab page.
		{cmd} can contain '|' to concatenate several commands.
		{cmd} must not open or close tab pages or reorder them.
		Also see |:windo|, |:argdo|, |:bufdo|, |:cdo|, |:ldo|, |:cfdo|
		and |:lfdo|

==============================================================================
3. Other items						*tab-page-other*

							*tabline-menu*
The GUI tab pages line has a popup menu.  It is accessed with a right click.
The entries are:
	Close		Close the tab page under the mouse pointer.  The
			current one if there is no label under the mouse
			pointer.
	New Tab		Open a tab page, editing an empty buffer.  It appears
			to the left of the mouse pointer.
	Open Tab...	Like "New Tab" and additionally use a file selector to
			select a file to edit.

Diff mode works per tab page.  You can see the diffs between several files
within one tab page.  Other tab pages can show differences between other
files.

Variables local to a tab page start with "t:". |tabpage-variable|

Currently there is only one option local to a tab page: 'cmdheight'.

						*tabnew-autocmd*
The TabLeave and TabEnter autocommand events can be used to do something when
switching from one tab page to another.  The exact order depends on what you
are doing.  When creating a new tab page this works as if you create a new
window on the same buffer and then edit another buffer.  Thus ":tabnew"
triggers:
	WinLeave		leave current window
	TabLeave		leave current tab page
	WinEnter		enter window in new tab page
	TabEnter		enter new tab page
	BufLeave		leave current buffer
	BufEnter		enter new empty buffer

When switching to another tab page the order is:
	BufLeave
	WinLeave
	TabLeave
	TabEnter
	WinEnter
	BufEnter

==============================================================================
4. Setting 'tabline'					*setting-tabline*

The 'tabline' option specifies what the line with tab pages labels looks like.
It is only used when there is no GUI tab line.

You can use the 'showtabline' option to specify when you want the line with
tab page labels to appear: never, when there is more than one tab page or
always.

The highlighting of the tab pages line is set with the groups TabLine
TabLineSel and TabLineFill.  |hl-TabLine| |hl-TabLineSel| |hl-TabLineFill|

A "+" will be shown for a tab page that has a modified window.  The number of
windows in a tabpage is also shown.  Thus "3+" means three windows and one of
them has a modified buffer.

The 'tabline' option allows you to define your preferred way to tab pages
labels.  This isn't easy, thus an example will be given here.

For basics see the 'statusline' option.  The same items can be used in the
'tabline' option.  Additionally, the |tabpagebuflist()|, |tabpagenr()| and
|tabpagewinnr()| functions are useful.

Since the number of tab labels will vary, you need to use an expression for
the whole option.  Something like: >
	:set tabline=%!MyTabLine()

Then define the MyTabLine() function to list all the tab pages labels.  A
convenient method is to split it in two parts:  First go over all the tab
pages and define labels for them.  Then get the label for each tab page. >

	function MyTabLine()
	  let s = ''
	  for i in range(tabpagenr('$'))
	    " select the highlighting
	    if i + 1 == tabpagenr()
	      let s ..= '%#TabLineSel#'
	    else
	      let s ..= '%#TabLine#'
	    endif

	    " set the tab page number (for mouse clicks)
	    let s ..= '%' .. (i + 1) .. 'T'

	    " the label is made by MyTabLabel()
	    let s ..= ' %{MyTabLabel(' .. (i + 1) .. ')} '
	  endfor

	  " after the last tab fill with TabLineFill and reset tab page nr
	  let s ..= '%#TabLineFill#%T'

	  " right-align the label to close the current tab page
	  if tabpagenr('$') > 1
	    let s ..= '%=%#TabLine#%999Xclose'
	  endif

	  return s
	endfunction

Now the MyTabLabel() function is called for each tab page to get its label. >

	function MyTabLabel(n)
	  let buflist = tabpagebuflist(a:n)
	  let winnr = tabpagewinnr(a:n)
	  return bufname(buflist[winnr - 1])
	endfunction

This is just a simplistic example that results in a tab pages line that
resembles the default, but without adding a + for a modified buffer or
truncating the names.  You will want to reduce the width of labels in a
clever way when there is not enough room.  Check the 'columns' option for the
space available.

==============================================================================
5. Setting 'guitablabel'				*setting-guitablabel*

When the GUI tab pages line is displayed, 'guitablabel' can be used to
specify the label to display for each tab page.  Unlike 'tabline', which
specifies the whole tab pages line at once, 'guitablabel' is used for each
label separately.

'guitabtooltip' is very similar and is used for the tooltip of the same label.
This only appears when the mouse pointer hovers over the label, thus it
usually is longer.  Only supported on some systems though.

See the 'statusline' option for the format of the value.

The "%N" item can be used for the current tab page number.  The |v:lnum|
variable is also set to this number when the option is evaluated.
The items that use a file name refer to the current window of the tab page.

Note that syntax highlighting is not used for the option.  The %T and %X
items are also ignored.

A simple example that puts the tab page number and the buffer name in the
label: >
	:set guitablabel=%N\ %f

An example that resembles the default 'guitablabel': Show the number of
windows in the tab page and a '+' if there is a modified buffer: >

	function GuiTabLabel()
	  let label = ''
	  let bufnrlist = tabpagebuflist(v:lnum)

	  " Add '+' if one of the buffers in the tab page is modified
	  for bufnr in bufnrlist
	    if getbufvar(bufnr, "&modified")
	      let label = '+'
	      break
	    endif
	  endfor

	  " Append the number of windows in the tab page if more than one
	  let wincount = tabpagewinnr(v:lnum, '$')
	  if wincount > 1
	    let label ..= wincount
	  endif
	  if label != ''
	    let label ..= ' '
	  endif

	  " Append the buffer name
	  return label .. bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
	endfunction

	set guitablabel=%{GuiTabLabel()}

Note that the function must be defined before setting the option, otherwise
you get an error message for the function not being known.

If you want to fall back to the default label, return an empty string.

If you want to show something specific for a tab page, you might want to use a
tab page local variable. |t:var|


 vim:tw=78:ts=8:noet:ft=help:norl:
                                                                                                                                                                  usr/share/vim/vim90/doc/tags                                                                        0000644 0000000 0000000 00001353677 14424703754 014404  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        !	change.txt	/*!*
!!	change.txt	/*!!*
#	pattern.txt	/*#*
#{}	eval.txt	/*#{}*
$	motion.txt	/*$*
$HOME	options.txt	/*$HOME*
$HOME-use	version5.txt	/*$HOME-use*
$HOME-windows	options.txt	/*$HOME-windows*
$MYGVIMRC	gui.txt	/*$MYGVIMRC*
$MYVIMRC	starting.txt	/*$MYVIMRC*
$VIM	starting.txt	/*$VIM*
$VIM-use	version5.txt	/*$VIM-use*
$VIMRUNTIME	starting.txt	/*$VIMRUNTIME*
$VIM_POSIX	vi_diff.txt	/*$VIM_POSIX*
$quote	eval.txt	/*$quote*
%	motion.txt	/*%*
%:.	cmdline.txt	/*%:.*
%:8	cmdline.txt	/*%:8*
%:S	cmdline.txt	/*%:S*
%:e	cmdline.txt	/*%:e*
%:gs	cmdline.txt	/*%:gs*
%:h	cmdline.txt	/*%:h*
%:p	cmdline.txt	/*%:p*
%:r	cmdline.txt	/*%:r*
%:s	cmdline.txt	/*%:s*
%:t	cmdline.txt	/*%:t*
%:~	cmdline.txt	/*%:~*
&	change.txt	/*&*
'	motion.txt	/*'*
''	motion.txt	/*''*
'(	motion.txt	/*'(*
')	motion.txt	/*')*
'.	motion.txt	/*'.*
'0	motion.txt	/*'0*
'<	motion.txt	/*'<*
'>	motion.txt	/*'>*
'A	motion.txt	/*'A*
'[	motion.txt	/*'[*
']	motion.txt	/*']*
'^	motion.txt	/*'^*
'a	motion.txt	/*'a*
'acd'	options.txt	/*'acd'*
'ai'	options.txt	/*'ai'*
'akm'	options.txt	/*'akm'*
'al'	options.txt	/*'al'*
'aleph'	options.txt	/*'aleph'*
'allowrevins'	options.txt	/*'allowrevins'*
'altkeymap'	options.txt	/*'altkeymap'*
'ambiwidth'	options.txt	/*'ambiwidth'*
'ambw'	options.txt	/*'ambw'*
'anti'	options.txt	/*'anti'*
'antialias'	options.txt	/*'antialias'*
'ap'	vi_diff.txt	/*'ap'*
'ar'	options.txt	/*'ar'*
'arab'	options.txt	/*'arab'*
'arabic'	options.txt	/*'arabic'*
'arabicshape'	options.txt	/*'arabicshape'*
'ari'	options.txt	/*'ari'*
'arshape'	options.txt	/*'arshape'*
'as'	todo.txt	/*'as'*
'asd'	options.txt	/*'asd'*
'autochdir'	options.txt	/*'autochdir'*
'autoindent'	options.txt	/*'autoindent'*
'autoprint'	vi_diff.txt	/*'autoprint'*
'autoread'	options.txt	/*'autoread'*
'autosave'	todo.txt	/*'autosave'*
'autoshelldir'	options.txt	/*'autoshelldir'*
'autowrite'	options.txt	/*'autowrite'*
'autowriteall'	options.txt	/*'autowriteall'*
'aw'	options.txt	/*'aw'*
'awa'	options.txt	/*'awa'*
'b:context_ignore_makefile'	ft_context.txt	/*'b:context_ignore_makefile'*
'b:context_include'	ft_context.txt	/*'b:context_include'*
'b:mp_metafun'	ft_mp.txt	/*'b:mp_metafun'*
'background'	options.txt	/*'background'*
'backspace'	options.txt	/*'backspace'*
'backup'	options.txt	/*'backup'*
'backupcopy'	options.txt	/*'backupcopy'*
'backupdir'	options.txt	/*'backupdir'*
'backupext'	options.txt	/*'backupext'*
'backupskip'	options.txt	/*'backupskip'*
'balloondelay'	options.txt	/*'balloondelay'*
'ballooneval'	options.txt	/*'ballooneval'*
'balloonevalterm'	options.txt	/*'balloonevalterm'*
'balloonexpr'	options.txt	/*'balloonexpr'*
'bdir'	options.txt	/*'bdir'*
'bdlay'	options.txt	/*'bdlay'*
'beautify'	vi_diff.txt	/*'beautify'*
'belloff'	options.txt	/*'belloff'*
'beval'	options.txt	/*'beval'*
'bevalterm'	options.txt	/*'bevalterm'*
'bex'	options.txt	/*'bex'*
'bexpr'	options.txt	/*'bexpr'*
'bf'	vi_diff.txt	/*'bf'*
'bg'	options.txt	/*'bg'*
'bh'	options.txt	/*'bh'*
'bin'	options.txt	/*'bin'*
'binary'	options.txt	/*'binary'*
'biosk'	options.txt	/*'biosk'*
'bioskey'	options.txt	/*'bioskey'*
'bk'	options.txt	/*'bk'*
'bkc'	options.txt	/*'bkc'*
'bl'	options.txt	/*'bl'*
'bo'	options.txt	/*'bo'*
'bomb'	options.txt	/*'bomb'*
'breakat'	options.txt	/*'breakat'*
'breakindent'	options.txt	/*'breakindent'*
'breakindentopt'	options.txt	/*'breakindentopt'*
'bri'	options.txt	/*'bri'*
'briopt'	options.txt	/*'briopt'*
'brk'	options.txt	/*'brk'*
'browsedir'	options.txt	/*'browsedir'*
'bs'	options.txt	/*'bs'*
'bsdir'	options.txt	/*'bsdir'*
'bsk'	options.txt	/*'bsk'*
'bt'	options.txt	/*'bt'*
'bufhidden'	options.txt	/*'bufhidden'*
'buflisted'	options.txt	/*'buflisted'*
'buftype'	options.txt	/*'buftype'*
'casemap'	options.txt	/*'casemap'*
'cb'	options.txt	/*'cb'*
'cc'	options.txt	/*'cc'*
'ccv'	options.txt	/*'ccv'*
'cd'	options.txt	/*'cd'*
'cdh'	options.txt	/*'cdh'*
'cdhome'	options.txt	/*'cdhome'*
'cdpath'	options.txt	/*'cdpath'*
'cedit'	options.txt	/*'cedit'*
'cf'	options.txt	/*'cf'*
'cfu'	options.txt	/*'cfu'*
'ch'	options.txt	/*'ch'*
'character'	intro.txt	/*'character'*
'charconvert'	options.txt	/*'charconvert'*
'ci'	options.txt	/*'ci'*
'cin'	options.txt	/*'cin'*
'cindent'	options.txt	/*'cindent'*
'cink'	options.txt	/*'cink'*
'cinkeys'	options.txt	/*'cinkeys'*
'cino'	options.txt	/*'cino'*
'cinoptions'	options.txt	/*'cinoptions'*
'cinscopedecls'	options.txt	/*'cinscopedecls'*
'cinsd'	options.txt	/*'cinsd'*
'cinw'	options.txt	/*'cinw'*
'cinwords'	options.txt	/*'cinwords'*
'clipboard'	options.txt	/*'clipboard'*
'cm'	options.txt	/*'cm'*
'cmdheight'	options.txt	/*'cmdheight'*
'cmdwinheight'	options.txt	/*'cmdwinheight'*
'cmp'	options.txt	/*'cmp'*
'cms'	options.txt	/*'cms'*
'co'	options.txt	/*'co'*
'cocu'	options.txt	/*'cocu'*
'cole'	options.txt	/*'cole'*
'colorcolumn'	options.txt	/*'colorcolumn'*
'columns'	options.txt	/*'columns'*
'com'	options.txt	/*'com'*
'comments'	options.txt	/*'comments'*
'commentstring'	options.txt	/*'commentstring'*
'compatible'	options.txt	/*'compatible'*
'complete'	options.txt	/*'complete'*
'completefunc'	options.txt	/*'completefunc'*
'completeopt'	options.txt	/*'completeopt'*
'completepopup'	options.txt	/*'completepopup'*
'completeslash'	options.txt	/*'completeslash'*
'concealcursor'	options.txt	/*'concealcursor'*
'conceallevel'	options.txt	/*'conceallevel'*
'confirm'	options.txt	/*'confirm'*
'consk'	options.txt	/*'consk'*
'conskey'	options.txt	/*'conskey'*
'copyindent'	options.txt	/*'copyindent'*
'cot'	options.txt	/*'cot'*
'cp'	options.txt	/*'cp'*
'cpo'	options.txt	/*'cpo'*
'cpoptions'	options.txt	/*'cpoptions'*
'cpp'	options.txt	/*'cpp'*
'cpt'	options.txt	/*'cpt'*
'crb'	options.txt	/*'crb'*
'cryptmethod'	options.txt	/*'cryptmethod'*
'cscopepathcomp'	options.txt	/*'cscopepathcomp'*
'cscopeprg'	options.txt	/*'cscopeprg'*
'cscopequickfix'	options.txt	/*'cscopequickfix'*
'cscoperelative'	options.txt	/*'cscoperelative'*
'cscopetag'	options.txt	/*'cscopetag'*
'cscopetagorder'	options.txt	/*'cscopetagorder'*
'cscopeverbose'	options.txt	/*'cscopeverbose'*
'csl'	options.txt	/*'csl'*
'cspc'	options.txt	/*'cspc'*
'csprg'	options.txt	/*'csprg'*
'csqf'	options.txt	/*'csqf'*
'csre'	options.txt	/*'csre'*
'cst'	options.txt	/*'cst'*
'csto'	options.txt	/*'csto'*
'csverb'	options.txt	/*'csverb'*
'cuc'	options.txt	/*'cuc'*
'cul'	options.txt	/*'cul'*
'culopt'	options.txt	/*'culopt'*
'cursorbind'	options.txt	/*'cursorbind'*
'cursorcolumn'	options.txt	/*'cursorcolumn'*
'cursorline'	options.txt	/*'cursorline'*
'cursorlineopt'	options.txt	/*'cursorlineopt'*
'cwh'	options.txt	/*'cwh'*
'debug'	options.txt	/*'debug'*
'deco'	options.txt	/*'deco'*
'def'	options.txt	/*'def'*
'define'	options.txt	/*'define'*
'delcombine'	options.txt	/*'delcombine'*
'dex'	options.txt	/*'dex'*
'dg'	options.txt	/*'dg'*
'dict'	options.txt	/*'dict'*
'dictionary'	options.txt	/*'dictionary'*
'diff'	options.txt	/*'diff'*
'diffexpr'	options.txt	/*'diffexpr'*
'diffopt'	options.txt	/*'diffopt'*
'digraph'	options.txt	/*'digraph'*
'dip'	options.txt	/*'dip'*
'dir'	options.txt	/*'dir'*
'directory'	options.txt	/*'directory'*
'display'	options.txt	/*'display'*
'dy'	options.txt	/*'dy'*
'ea'	options.txt	/*'ea'*
'ead'	options.txt	/*'ead'*
'eadirection'	options.txt	/*'eadirection'*
'eb'	options.txt	/*'eb'*
'ed'	options.txt	/*'ed'*
'edcompatible'	options.txt	/*'edcompatible'*
'ef'	options.txt	/*'ef'*
