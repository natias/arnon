# define PERL_ARGS_ASSERT_SUBLEX_PUSH

STATIC I32
S_sublex_start(pTHX)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SUBLEX_START

STATIC char *
S_swallow_bom(pTHX_ U8 *s)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SWALLOW_BOM           \
        assert(s)

STATIC char *
S_tokenize_use(pTHX_ int is_use, char *s)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_TOKENIZE_USE          \
        assert(s)

STATIC SV *
S_tokeq(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_TOKEQ                 \
        assert(sv)

STATIC void
S_update_debugger_info(pTHX_ SV *orig_sv, const char * const buf, STRLEN len);
# define PERL_ARGS_ASSERT_UPDATE_DEBUGGER_INFO

STATIC int
S_yywarn(pTHX_ const char * const s, U32 flags);
# define PERL_ARGS_ASSERT_YYWARN                \
        assert(s)

# if defined(DEBUGGING)
STATIC void
S_printbuf(pTHX_ const char * const fmt, const char * const s)
        __attribute__format__(__printf__,pTHX_1,0);
#   define PERL_ARGS_ASSERT_PRINTBUF            \
        assert(fmt); assert(s)

STATIC int
S_tokereport(pTHX_ I32 rv, const YYSTYPE *lvalp);
#   define PERL_ARGS_ASSERT_TOKEREPORT          \
        assert(lvalp)

# endif /* defined(DEBUGGING) */
# if defined(PERL_CR_FILTER)
STATIC I32
S_cr_textfilter(pTHX_ int idx, SV *sv, int maxlen);
#   define PERL_ARGS_ASSERT_CR_TEXTFILTER

STATIC void
S_strip_return(pTHX_ SV *sv);
#   define PERL_ARGS_ASSERT_STRIP_RETURN        \
        assert(sv)

# endif /* defined(PERL_CR_FILTER) */
# if !defined(PERL_NO_UTF16_FILTER)
STATIC U8 *
S_add_utf16_textfilter(pTHX_ U8 * const s, bool reversed);
#   define PERL_ARGS_ASSERT_ADD_UTF16_TEXTFILTER \
        assert(s)

STATIC I32
S_utf16_textfilter(pTHX_ int idx, SV *sv, int maxlen);
#   define PERL_ARGS_ASSERT_UTF16_TEXTFILTER    \
        assert(sv)

# endif /* !defined(PERL_NO_UTF16_FILTER) */
#endif /* defined(PERL_IN_TOKE_C) */
#if defined(PERL_IN_UNIVERSAL_C)
STATIC bool
S_isa_lookup(pTHX_ HV *stash, SV *namesv, const char *name, STRLEN len, U32 flags);

STATIC bool
S_sv_derived_from_svpvn(pTHX_ SV *sv, SV *namesv, const char *name, const STRLEN len, U32 flags);

#endif
#if defined(PERL_IN_UTF8_C)
STATIC UV
S__to_utf8_case(pTHX_ const UV original, const U8 *p, U8 *ustrp, STRLEN *lenp, SV *invlist, const I32 * const invmap, const U32 * const * const aux_tables, const U8 * const aux_table_lengths, const char * const normal);
# define PERL_ARGS_ASSERT__TO_UTF8_CASE         \
        assert(ustrp); assert(lenp); assert(invlist); assert(invmap); assert(normal)

STATIC UV
S_check_locale_boundary_crossing(pTHX_ const U8 * const p, const UV result, U8 * const ustrp, STRLEN *lenp)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_CHECK_LOCALE_BOUNDARY_CROSSING \
        assert(p); assert(ustrp); assert(lenp)

STATIC HV *
S_new_msg_hv(pTHX_ const char * const message, U32 categories, U32 flag)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_NEW_MSG_HV            \
        assert(message)

STATIC UV
S_to_case_cp_list(pTHX_ const UV original, const U32 ** const remaining_list, Size_t *remaining_count, SV *invlist, const I32 * const invmap, const U32 * const * const aux_tables, const U8 * const aux_table_lengths, const char * const normal);
# define PERL_ARGS_ASSERT_TO_CASE_CP_LIST       \
        assert(invlist); assert(invmap); assert(normal)

STATIC U8
S_to_lower_latin1(const U8 c, U8 *p, STRLEN *lenp, const char dummy)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_TO_LOWER_LATIN1

STATIC UV
S_turkic_fc(pTHX_ const U8 * const p, const U8 * const e, U8 *ustrp, STRLEN *lenp);
# define PERL_ARGS_ASSERT_TURKIC_FC             \
        assert(p); assert(e); assert(ustrp); assert(lenp)

STATIC UV
S_turkic_lc(pTHX_ const U8 * const p0, const U8 * const e, U8 *ustrp, STRLEN *lenp);
# define PERL_ARGS_ASSERT_TURKIC_LC             \
        assert(p0); assert(e); assert(ustrp); assert(lenp)

STATIC UV
S_turkic_uc(pTHX_ const U8 * const p, const U8 * const e, U8 *ustrp, STRLEN *lenp);
# define PERL_ARGS_ASSERT_TURKIC_UC             \
        assert(p); assert(e); assert(ustrp); assert(lenp)

STATIC char *
S_unexpected_non_continuation_text(pTHX_ const U8 * const s, STRLEN print_len, const STRLEN non_cont_byte_pos, const STRLEN expect_len)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_UNEXPECTED_NON_CONTINUATION_TEXT \
        assert(s)

# if 0
STATIC void
S_warn_on_first_deprecated_use(pTHX_ U32 category, const char * const name, const char * const alternative, const bool use_locale, const char * const file, const unsigned line);
#   define PERL_ARGS_ASSERT_WARN_ON_FIRST_DEPRECATED_USE \
        assert(name); assert(alternative); assert(file)

# endif
# if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE int
S_does_utf8_overflow(const U8 * const s, const U8 *e, const bool consider_overlongs)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_DOES_UTF8_OVERFLOW  \
        assert(s); assert(e)

PERL_STATIC_INLINE int
S_isFF_overlong(const U8 * const s, const STRLEN len)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_ISFF_OVERLONG       \
        assert(s)

PERL_STATIC_INLINE bool
S_is_utf8_common(pTHX_ const U8 * const p, const U8 * const e, SV * const invlist)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_IS_UTF8_COMMON      \
        assert(p); assert(e)

PERL_STATIC_INLINE int
S_is_utf8_overlong(const U8 * const s, const STRLEN len)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_IS_UTF8_OVERLONG    \
        assert(s)

# endif /* !defined(PERL_NO_INLINE_FUNCTIONS) */
#endif /* defined(PERL_IN_UTF8_C) */
#if defined(PERL_IN_UTIL_C)
STATIC bool
S_ckwarn_common(pTHX_ U32 w);
# define PERL_ARGS_ASSERT_CKWARN_COMMON

STATIC SV *
S_mess_alloc(pTHX);
# define PERL_ARGS_ASSERT_MESS_ALLOC

STATIC SV *
S_with_queued_errors(pTHX_ SV *ex);
# define PERL_ARGS_ASSERT_WITH_QUEUED_ERRORS    \
        assert(ex)

STATIC void
S_xs_version_bootcheck(pTHX_ SSize_t items, SSize_t ax, const char *xs_p, STRLEN xs_len);
# define PERL_ARGS_ASSERT_XS_VERSION_BOOTCHECK  \
        assert(xs_p)

# if defined(PERL_MEM_LOG) && !defined(PERL_MEM_LOG_NOIMPL)
STATIC void
S_mem_log_common(enum mem_log_type mlt, const UV n, const UV typesize, const char *type_name, const SV *sv, Malloc_t oldalloc, Malloc_t newalloc, const char *filename, const int linenumber, const char *funcname);
#   define PERL_ARGS_ASSERT_MEM_LOG_COMMON      \
        assert(type_name); assert(filename); assert(funcname)

# endif
# if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE U32
S_ptr_hash(PTRV u);
#   define PERL_ARGS_ASSERT_PTR_HASH

# endif
# if defined(PERL_USES_PL_PIDSTATUS)
STATIC void
S_pidgone(pTHX_ Pid_t pid, int status);
#   define PERL_ARGS_ASSERT_PIDGONE

# endif
#endif /* defined(PERL_IN_UTIL_C) */
#if defined(PERL_MEM_LOG)
PERL_CALLCONV Malloc_t
Perl_mem_log_alloc(const UV nconst, UV typesize, const char *type_name, Malloc_t newalloc, const char *filename, const int linenumber, const char *funcname);
# define PERL_ARGS_ASSERT_MEM_LOG_ALLOC         \
        assert(type_name); assert(filename); assert(funcname)

PERL_CALLCONV void
Perl_mem_log_del_sv(const SV *sv, const char *filename, int linenumber, const char *funcname);
# define PERL_ARGS_ASSERT_MEM_LOG_DEL_SV        \
        assert(sv); assert(filename); assert(funcname)

PERL_CALLCONV Malloc_t
Perl_mem_log_free(Malloc_t oldalloc, const char *filename, const int linenumber, const char *funcname);
# define PERL_ARGS_ASSERT_MEM_LOG_FREE          \
        assert(filename); assert(funcname)

PERL_CALLCONV void
Perl_mem_log_new_sv(const SV *sv, const char *filename, int linenumber, const char *funcname);
# define PERL_ARGS_ASSERT_MEM_LOG_NEW_SV        \
        assert(sv); assert(filename); assert(funcname)

PERL_CALLCONV Malloc_t
Perl_mem_log_realloc(const UV n, const UV typesize, const char *type_name, Malloc_t oldalloc, Malloc_t newalloc, const char *filename, const int linenumber, const char *funcname);
# define PERL_ARGS_ASSERT_MEM_LOG_REALLOC       \
        assert(type_name); assert(filename); assert(funcname)

#endif /* defined(PERL_MEM_LOG) */
#if !defined(PERL_NO_INLINE_FUNCTIONS)
PERL_STATIC_INLINE I32 *
Perl_CvDEPTH(const CV * const sv);
# define PERL_ARGS_ASSERT_CVDEPTH               \
        assert(sv)

PERL_STATIC_INLINE GV *
Perl_CvGV(pTHX_ CV *sv);
# define PERL_ARGS_ASSERT_CVGV                  \
        assert(sv)

PERL_STATIC_INLINE Stack_off_t
Perl_POPMARK(pTHX);
# define PERL_ARGS_ASSERT_POPMARK

PERL_STATIC_INLINE struct regexp *
Perl_ReANY(const REGEXP * const re);
# define PERL_ARGS_ASSERT_REANY                 \
        assert(re)

PERL_STATIC_INLINE void
Perl_SvAMAGIC_off(SV *sv);
# define PERL_ARGS_ASSERT_SVAMAGIC_OFF          \
        assert(sv)

PERL_STATIC_INLINE void
Perl_SvAMAGIC_on(SV *sv);
# define PERL_ARGS_ASSERT_SVAMAGIC_ON           \
        assert(sv)

PERL_STATIC_INLINE void
Perl_SvGETMAGIC(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SVGETMAGIC            \
        assert(sv)

PERL_STATIC_INLINE IV
Perl_SvIV(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SVIV                  \
        assert(sv)

PERL_STATIC_INLINE IV
Perl_SvIV_nomg(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SVIV_NOMG             \
        assert(sv)

PERL_STATIC_INLINE NV
Perl_SvNV(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SVNV                  \
        assert(sv)

PERL_STATIC_INLINE NV
Perl_SvNV_nomg(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SVNV_NOMG             \
        assert(sv)

PERL_STATIC_FORCE_INLINE bool
Perl_SvPVXtrue(pTHX_ SV *sv)
        __attribute__always_inline__;
# define PERL_ARGS_ASSERT_SVPVXTRUE             \
        assert(sv)

PERL_STATIC_INLINE void
Perl_SvREFCNT_dec(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SVREFCNT_DEC

PERL_STATIC_INLINE void
Perl_SvREFCNT_dec_NN(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SVREFCNT_DEC_NN       \
        assert(sv)

PERL_STATIC_INLINE SV *
Perl_SvREFCNT_dec_ret_NULL(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SVREFCNT_DEC_RET_NULL

PERL_STATIC_INLINE SV *
Perl_SvREFCNT_inc(SV *sv);
# define PERL_ARGS_ASSERT_SVREFCNT_INC

PERL_STATIC_INLINE SV *
Perl_SvREFCNT_inc_NN(SV *sv);
# define PERL_ARGS_ASSERT_SVREFCNT_INC_NN       \
        assert(sv)

PERL_STATIC_INLINE void
Perl_SvREFCNT_inc_void(SV *sv);
# define PERL_ARGS_ASSERT_SVREFCNT_INC_VOID

PERL_STATIC_INLINE bool
Perl_SvTRUE(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SVTRUE

PERL_STATIC_INLINE bool
Perl_SvTRUE_NN(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SVTRUE_NN             \
        assert(sv)

PERL_STATIC_INLINE bool
Perl_SvTRUE_common(pTHX_ SV *sv, const bool sv_2bool_is_fallback);
# define PERL_ARGS_ASSERT_SVTRUE_COMMON         \
        assert(sv)

PERL_STATIC_INLINE bool
Perl_SvTRUE_nomg(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SVTRUE_NOMG

PERL_STATIC_INLINE UV
Perl_SvUV(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SVUV                  \
        assert(sv)

PERL_STATIC_INLINE UV
Perl_SvUV_nomg(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_SVUV_NOMG             \
        assert(sv)

PERL_STATIC_INLINE Stack_off_t
Perl_TOPMARK(pTHX);
# define PERL_ARGS_ASSERT_TOPMARK

PERL_STATIC_INLINE void
Perl_append_utf8_from_native_byte(const U8 byte, U8 **dest);
# define PERL_ARGS_ASSERT_APPEND_UTF8_FROM_NATIVE_BYTE \
        assert(dest)

PERL_STATIC_INLINE Size_t
Perl_av_count(pTHX_ AV *av)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_AV_COUNT              \
        assert(av)

PERL_STATIC_INLINE SV **
Perl_av_fetch_simple(pTHX_ AV *av, SSize_t key, I32 lval)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_AV_FETCH_SIMPLE       \
        assert(av)

PERL_STATIC_INLINE AV *
Perl_av_new_alloc(pTHX_ SSize_t size, bool zeroflag)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_AV_NEW_ALLOC

PERL_STATIC_INLINE void
Perl_av_push_simple(pTHX_ AV *av, SV *val);
# define PERL_ARGS_ASSERT_AV_PUSH_SIMPLE        \
        assert(av); assert(val)

PERL_STATIC_INLINE void
Perl_av_remove_offset(pTHX_ AV *av);
# define PERL_ARGS_ASSERT_AV_REMOVE_OFFSET      \
        assert(av)

PERL_STATIC_INLINE SV **
Perl_av_store_simple(pTHX_ AV *av, SSize_t key, SV *val);
# define PERL_ARGS_ASSERT_AV_STORE_SIMPLE       \
        assert(av)

PERL_STATIC_INLINE void
Perl_clear_defarray_simple(pTHX_ AV *av);
# define PERL_ARGS_ASSERT_CLEAR_DEFARRAY_SIMPLE \
        assert(av)

PERL_STATIC_INLINE I32
Perl_foldEQ(pTHX_ const char *a, const char *b, I32 len);
# define PERL_ARGS_ASSERT_FOLDEQ                \
        assert(a); assert(b)

PERL_STATIC_INLINE I32
Perl_foldEQ_latin1(pTHX_ const char *a, const char *b, I32 len);
# define PERL_ARGS_ASSERT_FOLDEQ_LATIN1         \
        assert(a); assert(b)

PERL_STATIC_INLINE I32
Perl_foldEQ_locale(pTHX_ const char *a, const char *b, I32 len);
# define PERL_ARGS_ASSERT_FOLDEQ_LOCALE         \
        assert(a); assert(b)

PERL_STATIC_INLINE MGVTBL *
Perl_get_vtbl(pTHX_ int vtbl_id)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_GET_VTBL

PERL_STATIC_INLINE Size_t
Perl_isC9_STRICT_UTF8_CHAR(const U8 * const s0, const U8 * const e)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_ISC9_STRICT_UTF8_CHAR \
        assert(s0); assert(e)

PERL_STATIC_INLINE Size_t
Perl_isSTRICT_UTF8_CHAR(const U8 * const s0, const U8 * const e)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_ISSTRICT_UTF8_CHAR    \
        assert(s0); assert(e)

PERL_STATIC_INLINE Size_t
Perl_isUTF8_CHAR(const U8 * const s0, const U8 * const e)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_ISUTF8_CHAR           \
        assert(s0); assert(e)

PERL_STATIC_INLINE Size_t
Perl_isUTF8_CHAR_flags(const U8 * const s0, const U8 * const e, const U32 flags)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_ISUTF8_CHAR_FLAGS     \
        assert(s0); assert(e)

PERL_STATIC_INLINE bool
Perl_is_c9strict_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el);
# define PERL_ARGS_ASSERT_IS_C9STRICT_UTF8_STRING_LOCLEN \
        assert(s)

PERL_STATIC_INLINE bool
Perl_is_safe_syscall(pTHX_ const char *pv, STRLEN len, const char *what, const char *op_name)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_IS_SAFE_SYSCALL       \
        assert(pv); assert(what); assert(op_name)

PERL_STATIC_INLINE bool
Perl_is_strict_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el);
# define PERL_ARGS_ASSERT_IS_STRICT_UTF8_STRING_LOCLEN \
        assert(s)

PERL_STATIC_INLINE bool
Perl_is_utf8_fixed_width_buf_loclen_flags(const U8 * const s, STRLEN len, const U8 **ep, STRLEN *el, const U32 flags);
# define PERL_ARGS_ASSERT_IS_UTF8_FIXED_WIDTH_BUF_LOCLEN_FLAGS \
        assert(s)

PERL_STATIC_INLINE bool
Perl_is_utf8_invariant_string_loc(const U8 * const s, STRLEN len, const U8 **ep)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_IS_UTF8_INVARIANT_STRING_LOC \
        assert(s)

PERL_STATIC_INLINE bool
Perl_is_utf8_string_flags(const U8 *s, STRLEN len, const U32 flags)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_IS_UTF8_STRING_FLAGS  \
        assert(s)

PERL_STATIC_INLINE bool
Perl_is_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el);
# define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOCLEN \
        assert(s)

PERL_STATIC_INLINE bool
Perl_is_utf8_string_loclen_flags(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el, const U32 flags);
# define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOCLEN_FLAGS \
        assert(s)

PERL_STATIC_INLINE bool
Perl_is_utf8_valid_partial_char_flags(const U8 * const s0, const U8 * const e, const U32 flags)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_IS_UTF8_VALID_PARTIAL_CHAR_FLAGS \
        assert(s0); assert(e)

PERL_STATIC_INLINE unsigned
Perl_lsbit_pos32(U32 word)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_LSBIT_POS32

PERL_STATIC_INLINE char *
Perl_mortal_getenv(const char *str)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_MORTAL_GETENV         \
        assert(str)

PERL_STATIC_INLINE unsigned
Perl_msbit_pos32(U32 word)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_MSBIT_POS32

PERL_STATIC_INLINE OP *
Perl_newPADxVOP(pTHX_ I32 type, I32 flags, PADOFFSET padix)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_NEWPADXVOP

PERL_STATIC_INLINE SV *
Perl_newRV_noinc(pTHX_ SV * const tmpRef)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_NEWRV_NOINC           \
        assert(tmpRef)

PERL_STATIC_INLINE SV *
Perl_newSV_type(pTHX_ const svtype type)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_NEWSV_TYPE

PERL_STATIC_FORCE_INLINE SV *
Perl_newSV_type_mortal(pTHX_ const svtype type)
        __attribute__warn_unused_result__
        __attribute__always_inline__;
# define PERL_ARGS_ASSERT_NEWSV_TYPE_MORTAL

PERL_STATIC_INLINE void
Perl_pop_stackinfo(pTHX);
# define PERL_ARGS_ASSERT_POP_STACKINFO

PERL_STATIC_INLINE void
Perl_push_stackinfo(pTHX_ I32 type, UV flags);
# define PERL_ARGS_ASSERT_PUSH_STACKINFO

PERL_STATIC_INLINE void
Perl_rpp_context(pTHX_ SV **mark, U8 gimme, SSize_t extra);
# define PERL_ARGS_ASSERT_RPP_CONTEXT           \
        assert(mark)

PERL_STATIC_INLINE void
Perl_rpp_extend(pTHX_ SSize_t n);
# define PERL_ARGS_ASSERT_RPP_EXTEND

PERL_STATIC_INLINE void
Perl_rpp_invoke_xs(pTHX_ CV *cv);
# define PERL_ARGS_ASSERT_RPP_INVOKE_XS         \
        assert(cv)

PERL_STATIC_INLINE bool
Perl_rpp_is_lone(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_RPP_IS_LONE           \
        assert(sv)

PERL_STATIC_INLINE SV *
Perl_rpp_pop_1_norc(pTHX);
# define PERL_ARGS_ASSERT_RPP_POP_1_NORC

PERL_STATIC_INLINE void
Perl_rpp_popfree_1(pTHX);
# define PERL_ARGS_ASSERT_RPP_POPFREE_1

PERL_STATIC_INLINE void
Perl_rpp_popfree_1_NN(pTHX);
# define PERL_ARGS_ASSERT_RPP_POPFREE_1_NN

PERL_STATIC_INLINE void
Perl_rpp_popfree_2(pTHX);
# define PERL_ARGS_ASSERT_RPP_POPFREE_2

PERL_STATIC_INLINE void
Perl_rpp_popfree_2_NN(pTHX);
# define PERL_ARGS_ASSERT_RPP_POPFREE_2_NN

PERL_STATIC_INLINE void
Perl_rpp_popfree_to(pTHX_ SV **sp);
# define PERL_ARGS_ASSERT_RPP_POPFREE_TO        \
        assert(sp)

PERL_STATIC_INLINE void
Perl_rpp_popfree_to_NN(pTHX_ SV **sp);
# define PERL_ARGS_ASSERT_RPP_POPFREE_TO_NN     \
        assert(sp)

PERL_STATIC_INLINE void
Perl_rpp_push_1(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_RPP_PUSH_1            \
        assert(sv)

PERL_STATIC_INLINE void
Perl_rpp_push_1_norc(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_RPP_PUSH_1_NORC       \
        assert(sv)

PERL_STATIC_INLINE void
Perl_rpp_push_2(pTHX_ SV *sv1, SV *sv2);
# define PERL_ARGS_ASSERT_RPP_PUSH_2            \
        assert(sv1); assert(sv2)

PERL_STATIC_INLINE void
Perl_rpp_push_IMM(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_RPP_PUSH_IMM          \
        assert(sv)

PERL_STATIC_INLINE void
Perl_rpp_replace_1_1(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_RPP_REPLACE_1_1       \
        assert(sv)

PERL_STATIC_INLINE void
Perl_rpp_replace_1_1_NN(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_RPP_REPLACE_1_1_NN    \
        assert(sv)

PERL_STATIC_INLINE void
Perl_rpp_replace_1_IMM_NN(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_RPP_REPLACE_1_IMM_NN  \
        assert(sv)

PERL_STATIC_INLINE void
Perl_rpp_replace_2_1(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_RPP_REPLACE_2_1       \
        assert(sv)

PERL_STATIC_INLINE void
Perl_rpp_replace_2_1_COMMON(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_RPP_REPLACE_2_1_COMMON \
        assert(sv)

PERL_STATIC_INLINE void
Perl_rpp_replace_2_1_NN(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_RPP_REPLACE_2_1_NN    \
        assert(sv)

PERL_STATIC_INLINE void
Perl_rpp_replace_2_IMM_NN(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_RPP_REPLACE_2_IMM_NN  \
        assert(sv)

PERL_STATIC_INLINE void
Perl_rpp_replace_at(pTHX_ SV **sp, SV *sv);
# define PERL_ARGS_ASSERT_RPP_REPLACE_AT        \
        assert(sp); assert(sv)

PERL_STATIC_INLINE void
Perl_rpp_replace_at_NN(pTHX_ SV **sp, SV *sv);
# define PERL_ARGS_ASSERT_RPP_REPLACE_AT_NN     \
        assert(sp); assert(sv)

PERL_STATIC_INLINE void
Perl_rpp_replace_at_norc(pTHX_ SV **sp, SV *sv);
# define PERL_ARGS_ASSERT_RPP_REPLACE_AT_NORC   \
        assert(sp); assert(sv)

PERL_STATIC_INLINE void
Perl_rpp_replace_at_norc_NN(pTHX_ SV **sp, SV *sv);
# define PERL_ARGS_ASSERT_RPP_REPLACE_AT_NORC_NN \
        assert(sp); assert(sv)

PERL_STATIC_INLINE bool
Perl_rpp_stack_is_rc(pTHX);
# define PERL_ARGS_ASSERT_RPP_STACK_IS_RC

PERL_STATIC_INLINE bool
Perl_rpp_try_AMAGIC_1(pTHX_ int method, int flags);
# define PERL_ARGS_ASSERT_RPP_TRY_AMAGIC_1

PERL_STATIC_INLINE bool
Perl_rpp_try_AMAGIC_2(pTHX_ int method, int flags);
# define PERL_ARGS_ASSERT_RPP_TRY_AMAGIC_2

PERL_STATIC_INLINE void
Perl_rpp_xpush_1(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_RPP_XPUSH_1           \
        assert(sv)

PERL_STATIC_INLINE void
Perl_rpp_xpush_2(pTHX_ SV *sv1, SV *sv2);
# define PERL_ARGS_ASSERT_RPP_XPUSH_2           \
        assert(sv1); assert(sv2)

PERL_STATIC_INLINE void
Perl_rpp_xpush_IMM(pTHX_ SV *sv);
# define PERL_ARGS_ASSERT_RPP_XPUSH_IMM         \
        assert(sv)

PERL_STATIC_INLINE char *
Perl_savepv(pTHX_ const char *pv)
        __attribute__malloc__
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SAVEPV

PERL_STATIC_INLINE char *
Perl_savepvn(pTHX_ const char *pv, Size_t len)
        __attribute__malloc__
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SAVEPVN

PERL_STATIC_INLINE char *
Perl_savesharedsvpv(pTHX_ SV *sv)
        __attribute__malloc__
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SAVESHAREDSVPV        \
        assert(sv)

PERL_STATIC_INLINE char *
Perl_savesvpv(pTHX_ SV *sv)
        __attribute__malloc__
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SAVESVPV              \
        assert(sv)

PERL_STATIC_INLINE unsigned
Perl_single_1bit_pos32(U32 word)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_SINGLE_1BIT_POS32

PERL_STATIC_INLINE bool
Perl_sv_only_taint_gmagic(SV *sv);
# define PERL_ARGS_ASSERT_SV_ONLY_TAINT_GMAGIC  \
        assert(sv)

PERL_STATIC_INLINE char *
Perl_sv_pvbyten_force_wrapper(pTHX_ SV * const sv, STRLEN * const lp, const U32 dummy);
# define PERL_ARGS_ASSERT_SV_PVBYTEN_FORCE_WRAPPER \
        assert(sv)

PERL_STATIC_INLINE char *
Perl_sv_pvutf8n_force_wrapper(pTHX_ SV * const sv, STRLEN * const lp, const U32 dummy);
# define PERL_ARGS_ASSERT_SV_PVUTF8N_FORCE_WRAPPER \
        assert(sv)

PERL_STATIC_INLINE char  *
Perl_sv_setpv_freshbuf(pTHX_ SV * const sv);
# define PERL_ARGS_ASSERT_SV_SETPV_FRESHBUF     \
        assert(sv)

PERL_STATIC_INLINE void
Perl_switch_argstack(pTHX_ AV *to);
# define PERL_ARGS_ASSERT_SWITCH_ARGSTACK       \
        assert(to)

PERL_STATIC_INLINE IV
Perl_utf8_distance(pTHX_ const U8 *a, const U8 *b)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_UTF8_DISTANCE         \
        assert(a); assert(b)

PERL_STATIC_INLINE U8 *
Perl_utf8_hop(const U8 *s, SSize_t off)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_UTF8_HOP              \
        assert(s)

PERL_STATIC_INLINE U8 *
Perl_utf8_hop_back(const U8 *s, SSize_t off, const U8 *start)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_UTF8_HOP_BACK         \
        assert(s); assert(start)

PERL_STATIC_INLINE U8 *
Perl_utf8_hop_forward(const U8 *s, SSize_t off, const U8 *end)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_UTF8_HOP_FORWARD      \
        assert(s); assert(end)

PERL_STATIC_INLINE U8 *
Perl_utf8_hop_safe(const U8 *s, SSize_t off, const U8 *start, const U8 *end)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_UTF8_HOP_SAFE         \
        assert(s); assert(start); assert(end)

PERL_STATIC_INLINE UV
Perl_utf8_to_uvchr_buf_helper(pTHX_ const U8 *s, const U8 *send, STRLEN *retlen);
# define PERL_ARGS_ASSERT_UTF8_TO_UVCHR_BUF_HELPER \
        assert(s); assert(send)

PERL_STATIC_INLINE UV
Perl_utf8n_to_uvchr_msgs(const U8 *s, STRLEN curlen, STRLEN *retlen, const U32 flags, U32 *errors, AV **msgs);
# define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR_MSGS   \
        assert(s)

PERL_STATIC_INLINE UV
Perl_valid_utf8_to_uvchr(const U8 *s, STRLEN *retlen)
        __attribute__warn_unused_result__;
# define PERL_ARGS_ASSERT_VALID_UTF8_TO_UVCHR   \
        assert(s)

PERL_STATIC_INLINE void
Perl_cx_popblock(pTHX_ PERL_CONTEXT *cx);
# define PERL_ARGS_ASSERT_CX_POPBLOCK           \
        assert(cx)

PERL_STATIC_INLINE void
Perl_cx_popeval(pTHX_ PERL_CONTEXT *cx);
# define PERL_ARGS_ASSERT_CX_POPEVAL            \
        assert(cx)

PERL_STATIC_INLINE void
Perl_cx_popformat(pTHX_ PERL_CONTEXT *cx);
# define PERL_ARGS_ASSERT_CX_POPFORMAT          \
        assert(cx)

PERL_STATIC_INLINE void
Perl_cx_popgiven(pTHX_ PERL_CONTEXT *cx);
# define PERL_ARGS_ASSERT_CX_POPGIVEN           \
        assert(cx)

PERL_STATIC_INLINE void
Perl_cx_poploop(pTHX_ PERL_CONTEXT *cx);
# define PERL_ARGS_ASSERT_CX_POPLOOP            \
        assert(cx)

PERL_STATIC_INLINE void
Perl_cx_popsub(pTHX_ PERL_CONTEXT *cx);
# define PERL_ARGS_ASSERT_CX_POPSUB             \
        assert(cx)

PERL_STATIC_INLINE void
Perl_cx_popsub_args(pTHX_ PERL_CONTEXT *cx);
# define PERL_ARGS_ASSERT_CX_POPSUB_ARGS        \
        assert(cx)

PERL_STATIC_INLINE void
Perl_cx_popsub_common(pTHX_ PERL_CONTEXT *cx);
# define PERL_ARGS_ASSERT_CX_POPSUB_COMMON      \
        assert(cx)

PERL_STATIC_INLINE void
Perl_cx_popwhen(pTHX_ PERL_CONTEXT *cx);
# define PERL_ARGS_ASSERT_CX_POPWHEN            \
        assert(cx)

PERL_STATIC_INLINE PERL_CONTEXT *
Perl_cx_pushblock(pTHX_ U8 type, U8 gimme, SV **sp, I32 saveix);
# define PERL_ARGS_ASSERT_CX_PUSHBLOCK          \
        assert(sp)

PERL_STATIC_INLINE void
Perl_cx_pusheval(pTHX_ PERL_CONTEXT *cx, OP *retop, SV *namesv);
# define PERL_ARGS_ASSERT_CX_PUSHEVAL           \
        assert(cx)

PERL_STATIC_INLINE void
Perl_cx_pushformat(pTHX_ PERL_CONTEXT *cx, CV *cv, OP *retop, GV *gv);
# define PERL_ARGS_ASSERT_CX_PUSHFORMAT         \
        assert(cx); assert(cv)

PERL_STATIC_INLINE void
Perl_cx_pushgiven(pTHX_ PERL_CONTEXT *cx, SV *orig_defsv);
# define PERL_ARGS_ASSERT_CX_PUSHGIVEN          \
        assert(cx)

PERL_STATIC_INLINE void
Perl_cx_pushloop_for(pTHX_ PERL_CONTEXT *cx, void *itervarp, SV *itersave);
# define PERL_ARGS_ASSERT_CX_PUSHLOOP_FOR       \
        assert(cx); assert(itervarp)

PERL_STATIC_INLINE void
Perl_cx_pushloop_plain(pTHX_ PERL_CONTEXT *cx);
# define PERL_ARGS_ASSERT_CX_PUSHLOOP_PLAIN     \
        assert(cx)

PERL_STATIC_INLINE void
Perl_cx_pushsub(pTHX_ PERL_CONTEXT *cx, CV *cv, OP *retop, bool hasargs);
# define PERL_ARGS_ASSERT_CX_PUSHSUB            \
        assert(cx); assert(cv)

PERL_STATIC_INLINE void
Perl_cx_pushtry(pTHX_ PERL_CONTEXT *cx, OP *retop);
# define PERL_ARGS_ASSERT_CX_PUSHTRY            \
        assert(cx)

PERL_STATIC_INLINE void
Perl_cx_pushwhen(pTHX_ PERL_CONTEXT *cx);
# define PERL_ARGS_ASSERT_CX_PUSHWHEN           \
        assert(cx)

PERL_STATIC_INLINE void
Perl_cx_topblock(pTHX_ PERL_CONTEXT *cx);
# define PERL_ARGS_ASSERT_CX_TOPBLOCK           \
        assert(cx)

PERL_STATIC_INLINE U8
Perl_gimme_V(pTHX);
# define PERL_ARGS_ASSERT_GIMME_V

# if !defined(HAS_STRLCAT)
PERL_STATIC_INLINE Size_t
Perl_my_strlcat(char *dst, const char *src, Size_t size);
#   define PERL_ARGS_ASSERT_MY_STRLCAT

# endif
# if !defined(HAS_STRNLEN)
PERL_STATIC_INLINE Size_t
Perl_my_strnlen(const char *str, Size_t maxlen);
#   define PERL_ARGS_ASSERT_MY_STRNLEN          \
        assert(str)

# endif
# if defined(PERL_CORE) || defined(PERL_EXT)
PERL_STATIC_INLINE bool
Perl_is_utf8_non_invariant_string(const U8 * const s, STRLEN len)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_IS_UTF8_NON_INVARIANT_STRING \
        assert(s)

PERL_STATIC_INLINE STRLEN
S_sv_or_pv_pos_u2b(pTHX_ SV *sv, const char *pv, STRLEN pos, STRLEN *lenp);
#   define PERL_ARGS_ASSERT_SV_OR_PV_POS_U2B    \
        assert(sv); assert(pv)

PERL_STATIC_INLINE Size_t
S_variant_under_utf8_count(const U8 * const s, const U8 * const e)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_VARIANT_UNDER_UTF8_COUNT \
        assert(s); assert(e)

#   if !defined(HAS_MEMRCHR)
PERL_STATIC_INLINE void *
S_my_memrchr(const char *s, const char c, const STRLEN len);
#     define PERL_ARGS_ASSERT_MY_MEMRCHR        \
        assert(s)

#   endif
# endif /* defined(PERL_CORE) || defined(PERL_EXT) */
# if defined(PERL_IN_DOOP_C)    || defined(PERL_IN_OP_C)        || \
     defined(PERL_IN_PP_C)      || defined(PERL_IN_REGCOMP_ANY) || \
     defined(PERL_IN_REGEXEC_C) || defined(PERL_IN_TOKE_C)      || \
     defined(PERL_IN_UTF8_C)
PERL_STATIC_INLINE bool
S__invlist_contains_cp(SV * const invlist, const UV cp)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT__INVLIST_CONTAINS_CP \
        assert(invlist)

PERL_STATIC_INLINE UV
S__invlist_len(SV * const invlist)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT__INVLIST_LEN        \
        assert(invlist)

PERL_STATIC_INLINE bool *
S_get_invlist_offset_addr(SV *invlist)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_GET_INVLIST_OFFSET_ADDR \
        assert(invlist)

PERL_STATIC_INLINE UV *
S_invlist_array(SV * const invlist)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_INVLIST_ARRAY       \
        assert(invlist)

PERL_STATIC_INLINE bool
S_is_invlist(const SV * const invlist)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_IS_INVLIST

# endif /* defined(PERL_IN_DOOP_C)    || defined(PERL_IN_OP_C)        ||
           defined(PERL_IN_PP_C)      || defined(PERL_IN_REGCOMP_ANY) ||
           defined(PERL_IN_REGEXEC_C) || defined(PERL_IN_TOKE_C)      ||
           defined(PERL_IN_UTF8_C) */
# if defined(PERL_IN_DOOP_C) || defined(PERL_IN_OP_C) || \
     defined(PERL_IN_REGCOMP_ANY)
PERL_STATIC_INLINE SV *
S_add_cp_to_invlist(pTHX_ SV *invlist, const UV cp)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_ADD_CP_TO_INVLIST

PERL_STATIC_INLINE void
S_invlist_extend(pTHX_ SV * const invlist, const UV len);
#   define PERL_ARGS_ASSERT_INVLIST_EXTEND      \
        assert(invlist)

PERL_STATIC_INLINE UV
S_invlist_highest(SV * const invlist)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_INVLIST_HIGHEST     \
        assert(invlist)

PERL_STATIC_INLINE void
S_invlist_set_len(pTHX_ SV * const invlist, const UV len, const bool offset);
#   define PERL_ARGS_ASSERT_INVLIST_SET_LEN     \
        assert(invlist)

# endif /* defined(PERL_IN_DOOP_C) || defined(PERL_IN_OP_C) ||
           defined(PERL_IN_REGCOMP_ANY) */
# if defined(PERL_IN_OP_C) || defined(PERL_IN_PAD_C)
PERL_STATIC_INLINE bool
S_PadnameIN_SCOPE(const PADNAME * const pn, const U32 seq);
#   define PERL_ARGS_ASSERT_PADNAMEIN_SCOPE     \
        assert(pn)

# endif
# if defined(PERL_IN_OP_C) || defined(PERL_IN_REGCOMP_ANY)
PERL_STATIC_INLINE STRLEN *
S_get_invlist_iter_addr(SV *invlist)
        __attribute__warn_unused_result__;
#   define PERL_ARGS_ASSERT_GET_INVLIST_ITER_ADDR \
        assert(invlist)

PERL_STATIC_INLINE void
S_invlist_iterfinish(SV *invlist);
#   define PERL_ARGS_ASSERT_INVLIST_ITERFINISH  \
        assert(invlist)

PERL_STATIC_INLINE void
