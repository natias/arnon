with an embedded Perl interpreter--see L<http://www.cpan.org/src/misc/> .

=head2 Where can I get perl-mode or cperl-mode for emacs?
X<emacs>

Since Emacs version 19 patchlevel 22 or so, there have been both a
perl-mode.el and support for the Perl debugger built in. These should
come with the standard Emacs 19 distribution.

Note that the perl-mode of emacs will have fits with C<"main'foo">
(single quote), and mess up the indentation and highlighting. You
are probably using C<"main::foo"> in new Perl code anyway, so this
shouldn't be an issue.

For CPerlMode, see L<http://www.emacswiki.org/cgi-bin/wiki/CPerlMode>

=head2 How can I use curses with Perl?

The Curses module from CPAN provides a dynamically loadable object
module interface to a curses library. A small demo can be found at the
directory L<http://www.cpan.org/authors/id/T/TO/TOMC/scripts/rep.gz> ;
this program repeats a command and updates the screen as needed, rendering
B<rep ps axu> similar to B<top>.

=head2 How can I write a GUI (X, Tk, Gtk, etc.) in Perl?
X<GUI> X<Tk> X<Wx> X<WxWidgets> X<Gtk> X<Gtk2> X<CamelBones> X<Qt>

(contributed by Ben Morrow)

There are a number of modules which let you write GUIs in Perl. Most
GUI toolkits have a perl interface: an incomplete list follows.

=over 4

=item Tk

This works under Unix and Windows, and the current version doesn't
look half as bad under Windows as it used to. Some of the gui elements
still don't 'feel' quite right, though. The interface is very natural
and 'perlish', making it easy to use in small scripts that just need a
simple gui. It hasn't been updated in a while.

=item Wx

This is a Perl binding for the cross-platform wxWidgets toolkit
( L<http://www.wxwidgets.org> ). It works under Unix, Win32 and Mac OS X,
using native widgets (Gtk under Unix). The interface follows the C++
interface closely, but the documentation is a little sparse for someone
who doesn't know the library, mostly just referring you to the C++
documentation.

=item Gtk and Gtk2

These are Perl bindings for the Gtk toolkit ( L<http://www.gtk.org> ). The
interface changed significantly between versions 1 and 2 so they have
separate Perl modules. It runs under Unix, Win32 and Mac OS X (currently
it requires an X server on Mac OS, but a 'native' port is underway), and
the widgets look the same on every platform: i.e., they don't match the
native widgets. As with Wx, the Perl bindings follow the C API closely,
and the documentation requires you to read the C documentation to
understand it.

=item Win32::GUI

This provides access to most of the Win32 GUI widgets from Perl.
Obviously, it only runs under Win32, and uses native widgets. The Perl
interface doesn't really follow the C interface: it's been made more
Perlish, and the documentation is pretty good. More advanced stuff may
require familiarity with the C Win32 APIs, or reference to MSDN.

=item CamelBones

CamelBones ( L<http://camelbones.sourceforge.net> ) is a Perl interface to
Mac OS X's Cocoa GUI toolkit, and as such can be used to produce native
GUIs on Mac OS X. It's not on CPAN, as it requires frameworks that
CPAN.pm doesn't know how to install, but installation is via the
standard OSX package installer. The Perl API is, again, very close to
the ObjC API it's wrapping, and the documentation just tells you how to
translate from one to the other.

=item Qt

There is a Perl interface to TrollTech's Qt toolkit, but it does not
appear to be maintained.

=item Athena

Sx is an interface to the Athena widget set which comes with X, but
again it appears not to be much used nowadays.

=back

=head2 How can I make my Perl program run faster?

The best way to do this is to come up with a better algorithm. This
can often make a dramatic difference. Jon Bentley's book
I<Programming Pearls> (that's not a misspelling!)  has some good tips
on optimization, too. Advice on benchmarking boils down to: benchmark
and profile to make sure you're optimizing the right part, look for
better algorithms instead of microtuning your code, and when all else
fails consider just buying faster hardware. You will probably want to
read the answer to the earlier question "How do I profile my Perl
programs?" if you haven't done so already.

A different approach is to autoload seldom-used Perl code. See the
AutoSplit and AutoLoader modules in the standard distribution for
that. Or you could locate the bottleneck and think about writing just
that part in C, the way we used to take bottlenecks in C code and
write them in assembler. Similar to rewriting in C, modules that have
critical sections can be written in C (for instance, the PDL module
from CPAN).

If you're currently linking your perl executable to a shared
I<libc.so>, you can often gain a 10-25% performance benefit by
rebuilding it to link with a static libc.a instead. This will make a
bigger perl executable, but your Perl programs (and programmers) may
thank you for it. See the F<INSTALL> file in the source distribution
for more information.

The undump program was an ancient attempt to speed up Perl program by
storing the already-compiled form to disk. This is no longer a viable
option, as it only worked on a few architectures, and wasn't a good
solution anyway.

=head2 How can I make my Perl program take less memory?

When it comes to time-space tradeoffs, Perl nearly always prefers to
throw memory at a problem. Scalars in Perl use more memory than
strings in C, arrays take more than that, and hashes use even more. While
there's still a lot to be done, recent releases have been addressing
these issues. For example, as of 5.004, duplicate hash keys are
shared amongst all hashes using them, so require no reallocation.

In some cases, using substr() or vec() to simulate arrays can be
highly beneficial. For example, an array of a thousand booleans will
take at least 20,000 bytes of space, but it can be turned into one
125-byte bit vector--a considerable memory savings. The standard
Tie::SubstrHash module can also help for certain types of data
structure. If you're working with specialist data structures
(matrices, for instance) modules that implement these in C may use
less memory than equivalent Perl modules.

Another thing to try is learning whether your Perl was compiled with
the system malloc or with Perl's builtin malloc. Whichever one it
is, try using the other one and see whether this makes a difference.
Information about malloc is in the F<INSTALL> file in the source
distribution. You can find out whether you are using perl's malloc by
typing C<perl -V:usemymalloc>.

Of course, the best way to save memory is to not do anything to waste
it in the first place. Good programming practices can go a long way
toward this:

=over 4

=item Don't slurp!

Don't read an entire file into memory if you can process it line
by line. Or more concretely, use a loop like this:

    #
    # Good Idea
    #
    while (my $line = <$file_handle>) {
       # ...
    }

instead of this:

    #
    # Bad Idea
    #
    my @data = <$file_handle>;
    foreach (@data) {
        # ...
    }

When the files you're processing are small, it doesn't much matter which
way you do it, but it makes a huge difference when they start getting
larger.

=item Use map and grep selectively

Remember that both map and grep expect a LIST argument, so doing this:

        @wanted = grep {/pattern/} <$file_handle>;

will cause the entire file to be slurped. For large files, it's better
to loop:

        while (<$file_handle>) {
                push(@wanted, $_) if /pattern/;
        }

=item Avoid unnecessary quotes and stringification

Don't quote large strings unless absolutely necessary:

        my $copy = "$large_string";

makes 2 copies of $large_string (one for $copy and another for the
quotes), whereas

        my $copy = $large_string;

only makes one copy.

Ditto for stringifying large arrays:

    {
    local $, = "\n";
    print @big_array;
    }

is much more memory-efficient than either

    print join "\n", @big_array;

or

    {
    local $" = "\n";
    print "@big_array";
    }


=item Pass by reference

Pass arrays and hashes by reference, not by value. For one thing, it's
the only way to pass multiple lists or hashes (or both) in a single
call/return. It also avoids creating a copy of all the contents. This
requires some judgement, however, because any changes will be propagated
back to the original data. If you really want to mangle (er, modify) a
copy, you'll have to sacrifice the memory needed to make one.

=item Tie large variables to disk

For "big" data stores (i.e. ones that exceed available memory) consider
using one of the DB modules to store it on disk instead of in RAM. This
will incur a penalty in access time, but that's probably better than
causing your hard disk to thrash due to massive swapping.

=back

=head2 Is it safe to return a reference to local or lexical data?

Yes. Perl's garbage collection system takes care of this so
everything works out right.

    sub makeone {
        my @a = ( 1 .. 10 );
        return \@a;
    }

    for ( 1 .. 10 ) {
        push @many, makeone();
    }

    print $many[4][5], "\n";

    print "@many\n";

=head2 How can I free an array or hash so my program shrinks?

(contributed by Michael Carman)

You usually can't. Memory allocated to lexicals (i.e. my() variables)
cannot be reclaimed or reused even if they go out of scope. It is
reserved in case the variables come back into scope. Memory allocated
to global variables can be reused (within your program) by using
undef() and/or delete().

On most operating systems, memory allocated to a program can never be
returned to the system. That's why long-running programs sometimes re-
exec themselves. Some operating systems (notably, systems that use
mmap(2) for allocating large chunks of memory) can reclaim memory that
is no longer used, but on such systems, perl must be configured and
compiled to use the OS's malloc, not perl's.

In general, memory allocation and de-allocation isn't something you can
or should be worrying about much in Perl.

See also "How can I make my Perl program take less memory?"

=head2 How can I make my CGI script more efficient?

Beyond the normal measures described to make general Perl programs
faster or smaller, a CGI program has additional issues. It may be run
several times per second. Given that each time it runs it will need
to be re-compiled and will often allocate a megabyte or more of system
memory, this can be a killer. Compiling into C B<isn't going to help
you> because the process start-up overhead is where the bottleneck is.

There are three popular ways to avoid this overhead. One solution
involves running the Apache HTTP server (available from
L<http://www.apache.org/> ) with either of the mod_perl or mod_fastcgi
plugin modules.

With mod_perl and the Apache::Registry module (distributed with
mod_perl), httpd will run with an embedded Perl interpreter which
pre-compiles your script and then executes it within the same address
space without forking. The Apache extension also gives Perl access to
the internal server API, so modules written in Perl can do just about
anything a module written in C can. For more on mod_perl, see
L<http://perl.apache.org/>

With the FCGI module (from CPAN) and the mod_fastcgi
module (available from L<http://www.fastcgi.com/> ) each of your Perl
programs becomes a permanent CGI daemon process.

Finally, L<Plack> is a Perl module and toolkit that contains PSGI middleware,
helpers and adapters to web servers, allowing you to easily deploy scripts which
can continue running, and provides flexibility with regards to which web server
you use. It can allow existing CGI scripts to enjoy this flexibility and
performance with minimal changes, or can be used along with modern Perl web
frameworks to make writing and deploying web services with Perl a breeze.

These solutions can have far-reaching effects on your system and on the way you
write your CGI programs, so investigate them with care.

See also
L<http://www.cpan.org/modules/by-category/15_World_Wide_Web_HTML_HTTP_CGI/> .

=head2 How can I hide the source for my Perl program?

Delete it. :-) Seriously, there are a number of (mostly
unsatisfactory) solutions with varying levels of "security".

First of all, however, you I<can't> take away read permission, because
the source code has to be readable in order to be compiled and
interpreted. (That doesn't mean that a CGI script's source is
readable by people on the web, though--only by people with access to
the filesystem.)  So you have to leave the permissions at the socially
friendly 0755 level.

Some people regard this as a security problem. If your program does
insecure things and relies on people not knowing how to exploit those
insecurities, it is not secure. It is often possible for someone to
determine the insecure things and exploit them without viewing the
source. Security through obscurity, the name for hiding your bugs
instead of fixing them, is little security indeed.

You can try using encryption via source filters (Starting from Perl
5.8 the Filter::Simple and Filter::Util::Call modules are included in
the standard distribution), but any decent programmer will be able to
decrypt it. You can try using the byte code compiler and interpreter
described later in L<perlfaq3>, but the curious might still be able to
de-compile it. You can try using the native-code compiler described
later, but crackers might be able to disassemble it. These pose
varying degrees of difficulty to people wanting to get at your code,
but none can definitively conceal it (true of every language, not just
Perl).

It is very easy to recover the source of Perl programs. You simply
feed the program to the perl interpreter and use the modules in
the B:: hierarchy. The B::Deparse module should be able to
defeat most attempts to hide source. Again, this is not
unique to Perl.

If you're concerned about people profiting from your code, then the
bottom line is that nothing but a restrictive license will give you
legal security. License your software and pepper it with threatening
statements like "This is unpublished proprietary software of XYZ Corp.
Your access to it does not give you permission to use it blah blah
blah."  We are not lawyers, of course, so you should see a lawyer if
you want to be sure your license's wording will stand up in court.

=head2 How can I compile my Perl program into byte code or C?

(contributed by brian d foy)

In general, you can't do this. There are some things that may work
for your situation though. People usually ask this question
because they want to distribute their works without giving away
the source code, and most solutions trade disk space for convenience.
You probably won't see much of a speed increase either, since most
solutions simply bundle a Perl interpreter in the final product
(but see L<How can I make my Perl program run faster?>).

The Perl Archive Toolkit is Perl's analog to Java's JAR. It's freely
available and on CPAN ( L<https://metacpan.org/pod/PAR> ).

There are also some commercial products that may work for you, although
you have to buy a license for them.

The Perl Dev Kit ( L<http://www.activestate.com/Products/Perl_Dev_Kit/> )
from ActiveState can "Turn your Perl programs into ready-to-run
executables for HP-UX, Linux, Solaris and Windows."

Perl2Exe ( L<http://www.indigostar.com/perl2exe.htm> ) is a command line
program for converting perl scripts to executable files. It targets both
Windows and Unix platforms.

=head2 How can I get C<#!perl> to work on [MS-DOS,NT,...]?

For OS/2 just use

    extproc perl -S -your_switches

as the first line in C<*.cmd> file (C<-S> due to a bug in cmd.exe's
"extproc" handling). For DOS one should first invent a corresponding
batch file and codify it in C<ALTERNATE_SHEBANG> (see the
F<dosish.h> file in the source distribution for more information).

The Win95/NT installation, when using the ActiveState port of Perl,
will modify the Registry to associate the C<.pl> extension with the
perl interpreter. If you install another port, perhaps even building
your own Win95/NT Perl from the standard sources by using a Windows port
of gcc (e.g., with cygwin or mingw32), then you'll have to modify
the Registry yourself. In addition to associating C<.pl> with the
interpreter, NT people can use: C<SET PATHEXT=%PATHEXT%;.PL> to let them
run the program C<install-linux.pl> merely by typing C<install-linux>.

Under "Classic" MacOS, a perl program will have the appropriate Creator and
Type, so that double-clicking them will invoke the MacPerl application.
Under Mac OS X, clickable apps can be made from any C<#!> script using Wil
Sanchez' DropScript utility: L<http://www.wsanchez.net/software/> .

I<IMPORTANT!>: Whatever you do, PLEASE don't get frustrated, and just
throw the perl interpreter into your cgi-bin directory, in order to
get your programs working for a web server. This is an EXTREMELY big
security risk. Take the time to figure out how to do it correctly.

=head2 Can I write useful Perl programs on the command line?

Yes. Read L<perlrun> for more information. Some examples follow.
(These assume standard Unix shell quoting rules.)

    # sum first and last fields
    perl -lane 'print $F[0] + $F[-1]' *

    # identify text files
    perl -le 'for(@ARGV) {print if -f && -T _}' *

    # remove (most) comments from C program
    perl -0777 -pe 's{/\*.*?\*/}{}gs' foo.c

    # make file a month younger than today, defeating reaper daemons
    perl -e '$X=24*60*60; utime(time(),time() + 30 * $X,@ARGV)' *

    # find first unused uid
    perl -le '$i++ while getpwuid($i); print $i'

    # display reasonable manpath
    echo $PATH | perl -nl -072 -e '
    s![^/+]*$!man!&&-d&&!$s{$_}++&&push@m,$_;END{print"@m"}'

OK, the last one was actually an Obfuscated Perl Contest entry. :-)

=head2 Why don't Perl one-liners work on my DOS/Mac/VMS system?

The problem is usually that the command interpreters on those systems
have rather different ideas about quoting than the Unix shells under
which the one-liners were created. On some systems, you may have to
change single-quotes to double ones, which you must I<NOT> do on Unix
or Plan9 systems. You might also have to change a single % to a %%.

For example:

    # Unix (including Mac OS X)
    perl -e 'print "Hello world\n"'

    # DOS, etc.
    perl -e "print \"Hello world\n\""

    # Mac Classic
    print "Hello world\n"
     (then Run "Myscript" or Shift-Command-R)

    # MPW
    perl -e 'print "Hello world\n"'

    # VMS
    perl -e "print ""Hello world\n"""

The problem is that none of these examples are reliable: they depend on the
command interpreter. Under Unix, the first two often work. Under DOS,
it's entirely possible that neither works. If 4DOS was the command shell,
you'd probably have better luck like this:

  perl -e "print <Ctrl-x>"Hello world\n<Ctrl-x>""

Under the Mac, it depends which environment you are using. The MacPerl
shell, or MPW, is much like Unix shells in its support for several
quoting variants, except that it makes free use of the Mac's non-ASCII
characters as control characters.

Using qq(), q(), and qx(), instead of "double quotes", 'single
quotes', and `backticks`, may make one-liners easier to write.

There is no general solution to all of this. It is a mess.

[Some of this answer was contributed by Kenneth Albanowski.]

=head2 Where can I learn about CGI or Web programming in Perl?

For modules, get the CGI or LWP modules from CPAN. For textbooks,
see the two especially dedicated to web stuff in the question on
books. For problems and questions related to the web, like "Why
do I get 500 Errors" or "Why doesn't it run from the browser right
when it runs fine on the command line", see the troubleshooting
guides and references in L<perlfaq9> or in the CGI MetaFAQ:

    L<http://www.perl.org/CGI_MetaFAQ.html>

Looking into L<https://plackperl.org> and modern Perl web frameworks is highly recommended,
though; web programming in Perl has evolved a long way from the old days of
simple CGI scripts.

=head2 Where can I learn about object-oriented Perl programming?

A good place to start is L<perlootut>, and you can use L<perlobj> for
reference.

A good book on OO on Perl is the "Object-Oriented Perl"
by Damian Conway from Manning Publications, or "Intermediate Perl"
by Randal Schwartz, brian d foy, and Tom Phoenix from O'Reilly Media.

=head2 Where can I learn about linking C with Perl?

If you want to call C from Perl, start with L<perlxstut>,
moving on to L<perlxs>, L<xsubpp>, and L<perlguts>. If you want to
call Perl from C, then read L<perlembed>, L<perlcall>, and
L<perlguts>. Don't forget that you can learn a lot from looking at
how the authors of existing extension modules wrote their code and
solved their problems.

You might not need all the power of XS. The Inline::C module lets
you put C code directly in your Perl source. It handles all the
magic to make it work. You still have to learn at least some of
the perl API but you won't have to deal with the complexity of the
XS support files.

=head2 I've read perlembed, perlguts, etc., but I can't embed perl in my C program; what am I doing wrong?

Download the ExtUtils::Embed kit from CPAN and run `make test'. If
the tests pass, read the pods again and again and again. If they
fail, submit a bug report to L<https://github.com/Perl/perl5/issues>
with the output of
C<make test TEST_VERBOSE=1> along with C<perl -V>.

=head2 When I tried to run my script, I got this message. What does it mean?

A complete list of Perl's error messages and warnings with explanatory
text can be found in L<perldiag>. You can also use the splain program
(distributed with Perl) to explain the error messages:

    perl program 2>diag.out
    splain [-v] [-p] diag.out

or change your program to explain the messages for you:

    use diagnostics;

or

    use diagnostics -verbose;

=head2 What's MakeMaker?

(contributed by brian d foy)

The L<ExtUtils::MakeMaker> module, better known simply as "MakeMaker",
turns a Perl script, typically called C<Makefile.PL>, into a Makefile.
The Unix tool C<make> uses this file to manage dependencies and actions
to process and install a Perl distribution.

=head1 AUTHOR AND COPYRIGHT

Copyright (c) 1997-2010 Tom Christiansen, Nathan Torkington, and
other authors as noted. All rights reserved.

This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.

Irrespective of its distribution, all code examples here are in the public
domain. You are permitted and encouraged to use this code and any
derivatives thereof in your own programs for fun or for profit as you
see fit. A simple comment in the code giving credit to the FAQ would
be courteous but is not required.
                                                                                                                                                                                                                                                                                               usr/local/lib/perl5/5.40.0/pod/perlfaq4.pod                                                         0000644 0000000 0000000 00000265715 14714567415 016532  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

perlfaq4 - Data Manipulation

=head1 VERSION

version 5.20240218

=head1 DESCRIPTION

This section of the FAQ answers questions related to manipulating
numbers, dates, strings, arrays, hashes, and miscellaneous data issues.

=head1 Data: Numbers

=head2 Why am I getting long decimals (eg, 19.9499999999999) instead of the numbers I should be getting (eg, 19.95)?

For the long explanation, see David Goldberg's "What Every Computer
Scientist Should Know About Floating-Point Arithmetic"
(L<http://web.cse.msu.edu/~cse320/Documents/FloatingPoint.pdf>).

Internally, your computer represents floating-point numbers in binary.
Digital (as in powers of two) computers cannot store all numbers
exactly. Some real numbers lose precision in the process. This is a
problem with how computers store numbers and affects all computer
languages, not just Perl.

L<perlnumber> shows the gory details of number representations and
conversions.

To limit the number of decimal places in your numbers, you can use the
C<printf> or C<sprintf> function. See
L<perlop/"Floating-point Arithmetic"> for more details.

    printf "%.2f", 10/3;

    my $number = sprintf "%.2f", 10/3;

=head2 Why is int() broken?

Your C<int()> is most probably working just fine. It's the numbers that
aren't quite what you think.

First, see the answer to "Why am I getting long decimals
(eg, 19.9499999999999) instead of the numbers I should be getting
(eg, 19.95)?".

For example, this

    print int(0.6/0.2-2), "\n";

will in most computers print 0, not 1, because even such simple
numbers as 0.6 and 0.2 cannot be presented exactly by floating-point
numbers. What you think in the above as 'three' is really more like
2.9999999999999995559.

=head2 Why isn't my octal data interpreted correctly?

(contributed by brian d foy)

You're probably trying to convert a string to a number, which Perl only
converts as a decimal number. When Perl converts a string to a number, it
ignores leading spaces and zeroes, then assumes the rest of the digits
are in base 10:

    my $string = '0644';

    print $string + 0;  # prints 644

    print $string + 44; # prints 688, certainly not octal!

This problem usually involves one of the Perl built-ins that has the
same name a Unix command that uses octal numbers as arguments on the
command line. In this example, C<chmod> on the command line knows that
its first argument is octal because that's what it does:

    %prompt> chmod 644 file

If you want to use the same literal digits (644) in Perl, you have to tell
Perl to treat them as octal numbers either by prefixing the digits with
a C<0> or using C<oct>:

    chmod(     0644, $filename );  # right, has leading zero
    chmod( oct(644), $filename );  # also correct

The problem comes in when you take your numbers from something that Perl
thinks is a string, such as a command line argument in C<@ARGV>:

    chmod( $ARGV[0],      $filename );  # wrong, even if "0644"

    chmod( oct($ARGV[0]), $filename );  # correct, treat string as octal

You can always check the value you're using by printing it in octal
notation to ensure it matches what you think it should be. Print it
in octal  and decimal format:

    printf "0%o %d", $number, $number;

=head2 Does Perl have a round() function? What about ceil() and floor()? Trig functions?

Remember that C<int()> merely truncates toward 0. For rounding to a
certain number of digits, C<sprintf()> or C<printf()> is usually the
easiest route.

    printf("%.3f", 3.1415926535);   # prints 3.142

The L<POSIX> module (part of the standard Perl distribution)
implements C<ceil()>, C<floor()>, and a number of other mathematical
and trigonometric functions.

    use POSIX;
    my $ceil   = ceil(3.5);   # 4
    my $floor  = floor(3.5);  # 3

In 5.000 to 5.003 perls, trigonometry was done in the L<Math::Complex>
module. With 5.004, the L<Math::Trig> module (part of the standard Perl
distribution) implements the trigonometric functions. Internally it
uses the L<Math::Complex> module and some functions can break out from
the real axis into the complex plane, for example the inverse sine of
2.

Rounding in financial applications can have serious implications, and
the rounding method used should be specified precisely. In these
cases, it probably pays not to trust whichever system of rounding is
being used by Perl, but instead to implement the rounding function you
need yourself.

To see why, notice how you'll still have an issue on half-way-point
alternation:

    for (my $i = -5; $i <= 5; $i += 0.5) { printf "%.0f ",$i }

    -5 -4 -4 -4 -3 -2 -2 -2 -1 -0 0 0 1 2 2 2 3 4 4 4 5

Don't blame Perl. It's the same as in C. IEEE says we have to do
this. Perl numbers whose absolute values are integers under 2**31 (on
32-bit machines) will work pretty much like mathematical integers.
Other numbers are not guaranteed.

=head2 How do I convert between numeric representations/bases/radixes?

As always with Perl there is more than one way to do it. Below are a
few examples of approaches to making common conversions between number
representations. This is intended to be representational rather than
exhaustive.

Some of the examples later in L<perlfaq4> use the L<Bit::Vector>
module from CPAN. The reason you might choose L<Bit::Vector> over the
perl built-in functions is that it works with numbers of ANY size,
that it is optimized for speed on some operations, and for at least
some programmers the notation might be familiar.

=over 4

=item How do I convert hexadecimal into decimal

Using perl's built in conversion of C<0x> notation:

    my $dec = 0xDEADBEEF;

Using the C<hex> function:

    my $dec = hex("DEADBEEF");

Using C<pack>:

    my $dec = unpack("N", pack("H8", substr("0" x 8 . "DEADBEEF", -8)));

Using the CPAN module C<Bit::Vector>:

    use Bit::Vector;
    my $vec = Bit::Vector->new_Hex(32, "DEADBEEF");
    my $dec = $vec->to_Dec();

=item How do I convert from decimal to hexadecimal

Using C<sprintf>:

    my $hex = sprintf("%X", 3735928559); # upper case A-F
    my $hex = sprintf("%x", 3735928559); # lower case a-f

Using C<unpack>:

    my $hex = unpack("H*", pack("N", 3735928559));

Using L<Bit::Vector>:

    use Bit::Vector;
    my $vec = Bit::Vector->new_Dec(32, -559038737);
    my $hex = $vec->to_Hex();

And L<Bit::Vector> supports odd bit counts:

    use Bit::Vector;
    my $vec = Bit::Vector->new_Dec(33, 3735928559);
    $vec->Resize(32); # suppress leading 0 if unwanted
    my $hex = $vec->to_Hex();

=item How do I convert from octal to decimal

Using Perl's built in conversion of numbers with leading zeros:

    my $dec = 033653337357; # note the leading 0!

Using the C<oct> function:

    my $dec = oct("33653337357");

Using L<Bit::Vector>:

    use Bit::Vector;
    my $vec = Bit::Vector->new(32);
    $vec->Chunk_List_Store(3, split(//, reverse "33653337357"));
    my $dec = $vec->to_Dec();

=item How do I convert from decimal to octal

Using C<sprintf>:

    my $oct = sprintf("%o", 3735928559);

Using L<Bit::Vector>:

    use Bit::Vector;
    my $vec = Bit::Vector->new_Dec(32, -559038737);
    my $oct = reverse join('', $vec->Chunk_List_Read(3));

=item How do I convert from binary to decimal

Perl 5.6 lets you write binary numbers directly with
the C<0b> notation:

    my $number = 0b10110110;

Using C<oct>:

    my $input = "10110110";
    my $decimal = oct( "0b$input" );

Using C<pack> and C<ord>:

    my $decimal = ord(pack('B8', '10110110'));

Using C<pack> and C<unpack> for larger strings:

    my $int = unpack("N", pack("B32",
    substr("0" x 32 . "11110101011011011111011101111", -32)));
    my $dec = sprintf("%d", $int);

    # substr() is used to left-pad a 32-character string with zeros.

Using L<Bit::Vector>:

    my $vec = Bit::Vector->new_Bin(32, "11011110101011011011111011101111");
    my $dec = $vec->to_Dec();

=item How do I convert from decimal to binary

Using C<sprintf> (perl 5.6+):

    my $bin = sprintf("%b", 3735928559);

Using C<unpack>:

    my $bin = unpack("B*", pack("N", 3735928559));

Using L<Bit::Vector>:

    use Bit::Vector;
    my $vec = Bit::Vector->new_Dec(32, -559038737);
    my $bin = $vec->to_Bin();

The remaining transformations (e.g. hex -> oct, bin -> hex, etc.)
are left as an exercise to the inclined reader.

=back

=head2 Why doesn't & work the way I want it to?

Perl's C<&> bitwise operator works on both numbers and strings,
sometimes producing surprising results when you expected a number
but received a string. You probably expected perl to automatically
convert the operands to numbers like the mathematical operators would.
Instead, perl treats string operands as bitvectors.

Consider the bitwise difference between the number 3 and the bitvector
represented by "3". A number has the bit pattern for its magnitude. The
number 3 is 0b11 (a 2 and a 1). The bitvector has the bit pattern that
is the ordinal value for each octet, and that value is unrelated to any
numeric value that the digit represents. The character "3" is the
bitvector 0b0011_0011.

These operations have different results even though you might think they
look like the same "number":

	 11  &  3;   # 0b0000_1011 & 0b0000_0011
	             #     -> 0b0000_0011   (number 3)
	"11" & "3";  # 0b0011_0001_0011_0001 & 0b0011_0011
	             #     -> 0b0011_0001   (ASCII char "1")

Note that if any operand has a numeric value, perl uses numeric
semantics (although you should not count on this):

	my($i, $j) = ( 11,   3 );   # $i & $j  # 11  &  3 -> 3
 	my($i, $j) = ("11",  3 );   # $i & $j  # 11  &  3 -> 3
 	my($i, $j) = ("11", "3");   # $i & $j  # "11"  &  "3" -> 1

Remember that a perl scalar can have both string and numeric values at
the same time. A value that starts as a string and has never encountered
a numeric operation has no numeric value yet. Perl does this to save
time and work so it doesn't have to decide a numeric value for a scalar
it might never use as a number. In that case, string semantics wins. But,
if there is a numeric value already, numeric semantics win. Force perl
to compute the numeric value by adding 0:

    my($i, $j) = ("11", "3"); $j += 0  # $i & $j  # "11"  &  3 -> 3

However, this is not a documented feature, or as L<perlop> says, it "is not
well defined". One way to fix ensure numeric semantics is to explicitly
convert both of values to numbers:

	(0+$i) & (0+$j)

To fix this annoyance, Perl v5.22 separated the string and number
behavior. The C<bitwise> feature introduced four new operators that
would work with only string semantics: C<&.>, C<|.>, C<^.>, and C<~.>.
The original operators, C<&>, C<|>, C<^>, and C<~>, would then apply
only numeric semantics.

Enable this feature explicitly with L<feature>:

	use feature qw(bitwise);

Or, as of v5.28, require the minimum version of perl with C<use>:

	use v5.28;  # bitwise feature for free

=head2 How do I multiply matrices?

Use the L<Math::Matrix> or L<Math::MatrixReal> modules (available from CPAN)
or the L<PDL> extension (also available from CPAN).

=head2 How do I perform an operation on a series of integers?

To call a function on each element in an array, and collect the
results, use:

    my @results = map { my_func($_) } @array;

For example:

    my @triple = map { 3 * $_ } @single;

To call a function on each element of an array, but ignore the
results:

    foreach my $iterator (@array) {
        some_func($iterator);
    }

To call a function on each integer in a (small) range, you B<can> use:

    my @results = map { some_func($_) } (5 .. 25);

but you should be aware that in this form, the C<..> operator
creates a list of all integers in the range, which can take a lot of
memory for large ranges. However, the problem does not occur when
using C<..> within a C<for> loop, because in that case the range
operator is optimized to I<iterate> over the range, without creating
the entire list. So

    my @results = ();
    for my $i (5 .. 500_005) {
        push(@results, some_func($i));
    }

or even

   push(@results, some_func($_)) for 5 .. 500_005;

will not create an intermediate list of 500,000 integers.

=head2 How can I output Roman numerals?

Get the L<http://www.cpan.org/modules/by-module/Roman> module.

=head2 Why aren't my random numbers random?

If you're using a version of Perl before 5.004, you must call C<srand>
once at the start of your program to seed the random number generator.

     BEGIN { srand() if $] < 5.004 }

5.004 and later automatically call C<srand> at the beginning. Don't
call C<srand> more than once--you make your numbers less random,
rather than more.

Computers are good at being predictable and bad at being random
(despite appearances caused by bugs in your programs :-). The
F<random> article in the "Far More Than You Ever Wanted To Know"
collection in L<http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz>, courtesy
of Tom Phoenix, talks more about this. John von Neumann said, "Anyone
who attempts to generate random numbers by deterministic means is, of
course, living in a state of sin."

Perl relies on the underlying system for the implementation of
C<rand> and C<srand>; on some systems, the generated numbers are
not random enough (especially on Windows : see
L<http://www.perlmonks.org/?node_id=803632>).
Several CPAN modules in the C<Math> namespace implement better
pseudorandom generators; see for example
L<Math::Random::MT> ("Mersenne Twister", fast), or
L<Math::TrulyRandom> (uses the imperfections in the system's
timer to generate random numbers, which is rather slow).
More algorithms for random numbers are described in
"Numerical Recipes in C" at L<http://www.nr.com/>

=head2 How do I get a random number between X and Y?

To get a random number between two values, you can use the C<rand()>
