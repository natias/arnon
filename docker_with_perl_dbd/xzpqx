
#define _mm512_maskz_cvtt_roundpd_epi64(U, A, B)    \
    ((__m512i)__builtin_ia32_cvttpd2qq512_mask ((A), (__v8di)_mm512_setzero_si512 (), (U), (B)))

#define _mm512_cvtt_roundpd_epu64(A, B)		    \
    ((__m512i)__builtin_ia32_cvttpd2uqq512_mask ((A), (__v8di)_mm512_setzero_si512 (), -1, (B)))

#define _mm512_mask_cvtt_roundpd_epu64(W, U, A, B)  \
    ((__m512i)__builtin_ia32_cvttpd2uqq512_mask ((A), (__v8di)(W), (U), (B)))

#define _mm512_maskz_cvtt_roundpd_epu64(U, A, B)    \
    ((__m512i)__builtin_ia32_cvttpd2uqq512_mask ((A), (__v8di)_mm512_setzero_si512 (), (U), (B)))

#define _mm512_cvtt_roundps_epi64(A, B)		    \
    ((__m512i)__builtin_ia32_cvttps2qq512_mask ((A), (__v8di)_mm512_setzero_si512 (), -1, (B)))

#define _mm512_mask_cvtt_roundps_epi64(W, U, A, B)  \
    ((__m512i)__builtin_ia32_cvttps2qq512_mask ((A), (__v8di)(W), (U), (B)))

#define _mm512_maskz_cvtt_roundps_epi64(U, A, B)    \
    ((__m512i)__builtin_ia32_cvttps2qq512_mask ((A), (__v8di)_mm512_setzero_si512 (), (U), (B)))

#define _mm512_cvtt_roundps_epu64(A, B)		    \
    ((__m512i)__builtin_ia32_cvttps2uqq512_mask ((A), (__v8di)_mm512_setzero_si512 (), -1, (B)))

#define _mm512_mask_cvtt_roundps_epu64(W, U, A, B)  \
    ((__m512i)__builtin_ia32_cvttps2uqq512_mask ((A), (__v8di)(W), (U), (B)))

#define _mm512_maskz_cvtt_roundps_epu64(U, A, B)    \
    ((__m512i)__builtin_ia32_cvttps2uqq512_mask ((A), (__v8di)_mm512_setzero_si512 (), (U), (B)))

#define _mm512_cvt_roundpd_epi64(A, B)		    \
    ((__m512i)__builtin_ia32_cvtpd2qq512_mask ((A), (__v8di)_mm512_setzero_si512 (), -1, (B)))

#define _mm512_mask_cvt_roundpd_epi64(W, U, A, B)   \
    ((__m512i)__builtin_ia32_cvtpd2qq512_mask ((A), (__v8di)(W), (U), (B)))

#define _mm512_maskz_cvt_roundpd_epi64(U, A, B)     \
    ((__m512i)__builtin_ia32_cvtpd2qq512_mask ((A), (__v8di)_mm512_setzero_si512 (), (U), (B)))

#define _mm512_cvt_roundpd_epu64(A, B)		    \
    ((__m512i)__builtin_ia32_cvtpd2uqq512_mask ((A), (__v8di)_mm512_setzero_si512 (), -1, (B)))

#define _mm512_mask_cvt_roundpd_epu64(W, U, A, B)   \
    ((__m512i)__builtin_ia32_cvtpd2uqq512_mask ((A), (__v8di)(W), (U), (B)))

#define _mm512_maskz_cvt_roundpd_epu64(U, A, B)     \
    ((__m512i)__builtin_ia32_cvtpd2uqq512_mask ((A), (__v8di)_mm512_setzero_si512 (), (U), (B)))

#define _mm512_cvt_roundps_epi64(A, B)		    \
    ((__m512i)__builtin_ia32_cvtps2qq512_mask ((A), (__v8di)_mm512_setzero_si512 (), -1, (B)))

#define _mm512_mask_cvt_roundps_epi64(W, U, A, B)   \
    ((__m512i)__builtin_ia32_cvtps2qq512_mask ((A), (__v8di)(W), (U), (B)))

#define _mm512_maskz_cvt_roundps_epi64(U, A, B)     \
    ((__m512i)__builtin_ia32_cvtps2qq512_mask ((A), (__v8di)_mm512_setzero_si512 (), (U), (B)))

#define _mm512_cvt_roundps_epu64(A, B)		    \
    ((__m512i)__builtin_ia32_cvtps2uqq512_mask ((A), (__v8di)_mm512_setzero_si512 (), -1, (B)))

#define _mm512_mask_cvt_roundps_epu64(W, U, A, B)   \
    ((__m512i)__builtin_ia32_cvtps2uqq512_mask ((A), (__v8di)(W), (U), (B)))

#define _mm512_maskz_cvt_roundps_epu64(U, A, B)     \
    ((__m512i)__builtin_ia32_cvtps2uqq512_mask ((A), (__v8di)_mm512_setzero_si512 (), (U), (B)))

#define _mm512_cvt_roundepi64_ps(A, B)		    \
    ((__m256)__builtin_ia32_cvtqq2ps512_mask ((__v8di)(A), (__v8sf)_mm256_setzero_ps (), -1, (B)))

#define _mm512_mask_cvt_roundepi64_ps(W, U, A, B)   \
    ((__m256)__builtin_ia32_cvtqq2ps512_mask ((__v8di)(A), (W), (U), (B)))

#define _mm512_maskz_cvt_roundepi64_ps(U, A, B)     \
    ((__m256)__builtin_ia32_cvtqq2ps512_mask ((__v8di)(A), (__v8sf)_mm256_setzero_ps (), (U), (B)))

#define _mm512_cvt_roundepu64_ps(A, B)		    \
    ((__m256)__builtin_ia32_cvtuqq2ps512_mask ((__v8di)(A), (__v8sf)_mm256_setzero_ps (), -1, (B)))

#define _mm512_mask_cvt_roundepu64_ps(W, U, A, B)   \
    ((__m256)__builtin_ia32_cvtuqq2ps512_mask ((__v8di)(A), (W), (U), (B)))

#define _mm512_maskz_cvt_roundepu64_ps(U, A, B)     \
    ((__m256)__builtin_ia32_cvtuqq2ps512_mask ((__v8di)(A), (__v8sf)_mm256_setzero_ps (), (U), (B)))

#define _mm512_cvt_roundepi64_pd(A, B)		    \
    ((__m512d)__builtin_ia32_cvtqq2pd512_mask ((__v8di)(A), (__v8df)_mm512_setzero_pd (), -1, (B)))

#define _mm512_mask_cvt_roundepi64_pd(W, U, A, B)   \
    ((__m512d)__builtin_ia32_cvtqq2pd512_mask ((__v8di)(A), (W), (U), (B)))

#define _mm512_maskz_cvt_roundepi64_pd(U, A, B)     \
    ((__m512d)__builtin_ia32_cvtqq2pd512_mask ((__v8di)(A), (__v8df)_mm512_setzero_pd (), (U), (B)))

#define _mm512_cvt_roundepu64_pd(A, B)		    \
    ((__m512d)__builtin_ia32_cvtuqq2pd512_mask ((__v8di)(A), (__v8df)_mm512_setzero_pd (), -1, (B)))

#define _mm512_mask_cvt_roundepu64_pd(W, U, A, B)   \
    ((__m512d)__builtin_ia32_cvtuqq2pd512_mask ((__v8di)(A), (W), (U), (B)))

#define _mm512_maskz_cvt_roundepu64_pd(U, A, B)     \
    ((__m512d)__builtin_ia32_cvtuqq2pd512_mask ((__v8di)(A), (__v8df)_mm512_setzero_pd (), (U), (B)))

#define _mm512_reduce_pd(A, B)						\
  ((__m512d) __builtin_ia32_reducepd512_mask ((__v8df)(__m512d)(A),	\
    (int)(B), (__v8df)_mm512_setzero_pd (), (__mmask8)-1))

#define _mm512_reduce_round_pd(A, B, R)					 \
  ((__m512d) __builtin_ia32_reducepd512_mask_round ((__v8df)(__m512d)(A),\
    (int)(B), (__v8df)_mm512_setzero_pd (), (__mmask8)-1, (R)))

#define _mm512_mask_reduce_pd(W, U, A, B)				\
  ((__m512d) __builtin_ia32_reducepd512_mask ((__v8df)(__m512d)(A),	\
    (int)(B), (__v8df)(__m512d)(W), (__mmask8)(U)))

#define _mm512_mask_reduce_round_pd(W, U, A, B, R)			 \
  ((__m512d) __builtin_ia32_reducepd512_mask_round ((__v8df)(__m512d)(A),\
    (int)(B), (__v8df)(__m512d)(W), (U), (R)))

#define _mm512_maskz_reduce_pd(U, A, B)					\
  ((__m512d) __builtin_ia32_reducepd512_mask ((__v8df)(__m512d)(A),	\
    (int)(B), (__v8df)_mm512_setzero_pd (), (__mmask8)(U)))

#define _mm512_maskz_reduce_round_pd(U, A, B, R)			 \
  ((__m512d) __builtin_ia32_reducepd512_mask_round ((__v8df)(__m512d)(A),\
    (int)(B), (__v8df)_mm512_setzero_pd (), (U), (R)))

#define _mm512_reduce_ps(A, B)						\
  ((__m512) __builtin_ia32_reduceps512_mask ((__v16sf)(__m512)(A),	\
    (int)(B), (__v16sf)_mm512_setzero_ps (), (__mmask16)-1))

#define _mm512_reduce_round_ps(A, B, R)					\
  ((__m512) __builtin_ia32_reduceps512_mask_round ((__v16sf)(__m512)(A),\
    (int)(B), (__v16sf)_mm512_setzero_ps (), (__mmask16)-1, (R)))

#define _mm512_mask_reduce_ps(W, U, A, B)				\
  ((__m512) __builtin_ia32_reduceps512_mask ((__v16sf)(__m512)(A),	\
    (int)(B), (__v16sf)(__m512)(W), (__mmask16)(U)))

#define _mm512_mask_reduce_round_ps(W, U, A, B, R)			\
  ((__m512) __builtin_ia32_reduceps512_mask_round ((__v16sf)(__m512)(A),\
    (int)(B), (__v16sf)(__m512)(W), (U), (R)))

#define _mm512_maskz_reduce_ps(U, A, B)					\
  ((__m512) __builtin_ia32_reduceps512_mask ((__v16sf)(__m512)(A),	\
    (int)(B), (__v16sf)_mm512_setzero_ps (), (__mmask16)(U)))

#define _mm512_maskz_reduce_round_ps(U, A, B, R)			\
  ((__m512) __builtin_ia32_reduceps512_mask_round ((__v16sf)(__m512)(A),\
    (int)(B), (__v16sf)_mm512_setzero_ps (), (__mmask16)(U), (R)))

#define _mm512_extractf32x8_ps(X, C)                                    \
  ((__m256) __builtin_ia32_extractf32x8_mask ((__v16sf)(__m512) (X),    \
    (int) (C), (__v8sf)(__m256) _mm256_setzero_ps (), (__mmask8)-1))

#define _mm512_mask_extractf32x8_ps(W, U, X, C)                         \
  ((__m256) __builtin_ia32_extractf32x8_mask ((__v16sf)(__m512) (X),    \
    (int) (C), (__v8sf)(__m256) (W), (__mmask8) (U)))

#define _mm512_maskz_extractf32x8_ps(U, X, C)                           \
  ((__m256) __builtin_ia32_extractf32x8_mask ((__v16sf)(__m512) (X),    \
    (int) (C), (__v8sf)(__m256) _mm256_setzero_ps (), (__mmask8) (U)))

#define _mm512_extractf64x2_pd(X, C)                                    \
  ((__m128d) __builtin_ia32_extractf64x2_512_mask ((__v8df)(__m512d) (X),\
    (int) (C), (__v2df)(__m128d) _mm_setzero_pd (), (__mmask8)-1))

#define _mm512_mask_extractf64x2_pd(W, U, X, C)                         \
  ((__m128d) __builtin_ia32_extractf64x2_512_mask ((__v8df)(__m512d) (X),\
    (int) (C), (__v2df)(__m128d) (W), (__mmask8) (U)))

#define _mm512_maskz_extractf64x2_pd(U, X, C)                           \
  ((__m128d) __builtin_ia32_extractf64x2_512_mask ((__v8df)(__m512d) (X),\
    (int) (C), (__v2df)(__m128d) _mm_setzero_pd (), (__mmask8) (U)))

#define _mm512_extracti32x8_epi32(X, C)                                 \
  ((__m256i) __builtin_ia32_extracti32x8_mask ((__v16si)(__m512i) (X),  \
    (int) (C), (__v8si)(__m256i) _mm256_setzero_si256 (), (__mmask8)-1))

#define _mm512_mask_extracti32x8_epi32(W, U, X, C)                      \
  ((__m256i) __builtin_ia32_extracti32x8_mask ((__v16si)(__m512i) (X),  \
    (int) (C), (__v8si)(__m256i) (W), (__mmask8) (U)))

#define _mm512_maskz_extracti32x8_epi32(U, X, C)                        \
  ((__m256i) __builtin_ia32_extracti32x8_mask ((__v16si)(__m512i) (X),  \
    (int) (C), (__v8si)(__m256i) _mm256_setzero_si256 (), (__mmask8) (U)))

#define _mm512_extracti64x2_epi64(X, C)                                 \
  ((__m128i) __builtin_ia32_extracti64x2_512_mask ((__v8di)(__m512i) (X),\
    (int) (C), (__v2di)(__m128i) _mm_setzero_si128 (), (__mmask8)-1))

#define _mm512_mask_extracti64x2_epi64(W, U, X, C)                      \
  ((__m128i) __builtin_ia32_extracti64x2_512_mask ((__v8di)(__m512i) (X),\
    (int) (C), (__v2di)(__m128i) (W), (__mmask8) (U)))

#define _mm512_maskz_extracti64x2_epi64(U, X, C)                        \
  ((__m128i) __builtin_ia32_extracti64x2_512_mask ((__v8di)(__m512i) (X),\
    (int) (C), (__v2di)(__m128i) _mm_setzero_si128 (), (__mmask8) (U)))

#define _mm512_range_pd(A, B, C)					\
  ((__m512d) __builtin_ia32_rangepd512_mask ((__v8df)(__m512d)(A),	\
    (__v8df)(__m512d)(B), (int)(C),					\
    (__v8df)_mm512_setzero_pd (), (__mmask8)-1, _MM_FROUND_CUR_DIRECTION))

#define _mm512_mask_range_pd(W, U, A, B, C)				\
  ((__m512d) __builtin_ia32_rangepd512_mask ((__v8df)(__m512d)(A),	\
    (__v8df)(__m512d)(B), (int)(C),					\
    (__v8df)(__m512d)(W), (__mmask8)(U), _MM_FROUND_CUR_DIRECTION))

#define _mm512_maskz_range_pd(U, A, B, C)				\
  ((__m512d) __builtin_ia32_rangepd512_mask ((__v8df)(__m512d)(A),	\
    (__v8df)(__m512d)(B), (int)(C),					\
    (__v8df)_mm512_setzero_pd (), (__mmask8)(U), _MM_FROUND_CUR_DIRECTION))

#define _mm512_range_ps(A, B, C)					\
  ((__m512) __builtin_ia32_rangeps512_mask ((__v16sf)(__m512)(A),	\
    (__v16sf)(__m512)(B), (int)(C),					\
    (__v16sf)_mm512_setzero_ps (), (__mmask16)-1, _MM_FROUND_CUR_DIRECTION))

#define _mm512_mask_range_ps(W, U, A, B, C)				\
  ((__m512) __builtin_ia32_rangeps512_mask ((__v16sf)(__m512)(A),	\
    (__v16sf)(__m512)(B), (int)(C),					\
    (__v16sf)(__m512)(W), (__mmask16)(U), _MM_FROUND_CUR_DIRECTION))

#define _mm512_maskz_range_ps(U, A, B, C)				\
  ((__m512) __builtin_ia32_rangeps512_mask ((__v16sf)(__m512)(A),	\
    (__v16sf)(__m512)(B), (int)(C),					\
    (__v16sf)_mm512_setzero_ps (), (__mmask16)(U), _MM_FROUND_CUR_DIRECTION))

#define _mm512_range_round_pd(A, B, C, R)					\
  ((__m512d) __builtin_ia32_rangepd512_mask ((__v8df)(__m512d)(A),	\
    (__v8df)(__m512d)(B), (int)(C),					\
    (__v8df)_mm512_setzero_pd (), (__mmask8)-1, (R)))

#define _mm512_mask_range_round_pd(W, U, A, B, C, R)				\
  ((__m512d) __builtin_ia32_rangepd512_mask ((__v8df)(__m512d)(A),	\
    (__v8df)(__m512d)(B), (int)(C),					\
    (__v8df)(__m512d)(W), (__mmask8)(U), (R)))

#define _mm512_maskz_range_round_pd(U, A, B, C, R)				\
  ((__m512d) __builtin_ia32_rangepd512_mask ((__v8df)(__m512d)(A),	\
    (__v8df)(__m512d)(B), (int)(C),					\
    (__v8df)_mm512_setzero_pd (), (__mmask8)(U), (R)))

#define _mm512_range_round_ps(A, B, C, R)					\
  ((__m512) __builtin_ia32_rangeps512_mask ((__v16sf)(__m512)(A),	\
    (__v16sf)(__m512)(B), (int)(C),					\
    (__v16sf)_mm512_setzero_ps (), (__mmask16)-1, (R)))

#define _mm512_mask_range_round_ps(W, U, A, B, C, R)				\
  ((__m512) __builtin_ia32_rangeps512_mask ((__v16sf)(__m512)(A),	\
    (__v16sf)(__m512)(B), (int)(C),					\
    (__v16sf)(__m512)(W), (__mmask16)(U), (R)))

#define _mm512_maskz_range_round_ps(U, A, B, C, R)				\
  ((__m512) __builtin_ia32_rangeps512_mask ((__v16sf)(__m512)(A),	\
    (__v16sf)(__m512)(B), (int)(C),					\
    (__v16sf)_mm512_setzero_ps (), (__mmask16)(U), (R)))

#define _mm512_insertf64x2(X, Y, C)                                     \
  ((__m512d) __builtin_ia32_insertf64x2_512_mask ((__v8df)(__m512d) (X),\
    (__v2df)(__m128d) (Y), (int) (C), (__v8df)(__m512d) (X),            \
    (__mmask8)-1))

#define _mm512_mask_insertf64x2(W, U, X, Y, C)                          \
  ((__m512d) __builtin_ia32_insertf64x2_512_mask ((__v8df)(__m512d) (X),\
    (__v2df)(__m128d) (Y), (int) (C), (__v8df)(__m512d) (W),            \
    (__mmask8) (U)))

#define _mm512_maskz_insertf64x2(U, X, Y, C)                            \
  ((__m512d) __builtin_ia32_insertf64x2_512_mask ((__v8df)(__m512d) (X),\
    (__v2df)(__m128d) (Y), (int) (C),                                   \
    (__v8df)(__m512d) _mm512_setzero_pd (), (__mmask8) (U)))

#define _mm512_inserti64x2(X, Y, C)                                     \
  ((__m512i) __builtin_ia32_inserti64x2_512_mask ((__v8di)(__m512i) (X),\
    (__v2di)(__m128i) (Y), (int) (C), (__v8di)(__m512i) (X), (__mmask8)-1))

#define _mm512_mask_inserti64x2(W, U, X, Y, C)                          \
  ((__m512i) __builtin_ia32_inserti64x2_512_mask ((__v8di)(__m512i) (X),\
    (__v2di)(__m128i) (Y), (int) (C), (__v8di)(__m512i) (W),            \
    (__mmask8) (U)))

#define _mm512_maskz_inserti64x2(U, X, Y, C)                            \
  ((__m512i) __builtin_ia32_inserti64x2_512_mask ((__v8di)(__m512i) (X),\
    (__v2di)(__m128i) (Y), (int) (C),                                   \
    (__v8di)(__m512i) _mm512_setzero_si512 (), (__mmask8) (U)))

#define _mm512_insertf32x8(X, Y, C)                                     \
  ((__m512) __builtin_ia32_insertf32x8_mask ((__v16sf)(__m512) (X),     \
    (__v8sf)(__m256) (Y), (int) (C),\
    (__v16sf)(__m512)_mm512_setzero_ps (),\
    (__mmask16)-1))

#define _mm512_mask_insertf32x8(W, U, X, Y, C)                          \
  ((__m512) __builtin_ia32_insertf32x8_mask ((__v16sf)(__m512) (X),     \
    (__v8sf)(__m256) (Y), (int) (C),\
    (__v16sf)(__m512)(W),\
    (__mmask16)(U)))

#define _mm512_maskz_insertf32x8(U, X, Y, C)                            \
  ((__m512) __builtin_ia32_insertf32x8_mask ((__v16sf)(__m512) (X),     \
    (__v8sf)(__m256) (Y), (int) (C),\
    (__v16sf)(__m512)_mm512_setzero_ps (),\
    (__mmask16)(U)))

#define _mm512_inserti32x8(X, Y, C)                                     \
  ((__m512i) __builtin_ia32_inserti32x8_mask ((__v16si)(__m512i) (X),   \
    (__v8si)(__m256i) (Y), (int) (C),\
    (__v16si)(__m512i)_mm512_setzero_si512 (),\
    (__mmask16)-1))

#define _mm512_mask_inserti32x8(W, U, X, Y, C)                          \
  ((__m512i) __builtin_ia32_inserti32x8_mask ((__v16si)(__m512i) (X),   \
    (__v8si)(__m256i) (Y), (int) (C),\
    (__v16si)(__m512i)(W),\
    (__mmask16)(U)))

#define _mm512_maskz_inserti32x8(U, X, Y, C)                            \
  ((__m512i) __builtin_ia32_inserti32x8_mask ((__v16si)(__m512i) (X),   \
    (__v8si)(__m256i) (Y), (int) (C),\
    (__v16si)(__m512i)_mm512_setzero_si512 (),\
    (__mmask16)(U)))

#define _mm_fpclass_ss_mask(X, C)					\
  ((__mmask8) __builtin_ia32_fpclassss_mask ((__v4sf) (__m128) (X),	\
					     (int) (C), (__mmask8) (-1))) \

#define _mm_fpclass_sd_mask(X, C)					\
  ((__mmask8) __builtin_ia32_fpclasssd_mask ((__v2df) (__m128d) (X),	\
					     (int) (C), (__mmask8) (-1))) \

#define _mm_mask_fpclass_ss_mask(X, C, U)				\
  ((__mmask8) __builtin_ia32_fpclassss_mask ((__v4sf) (__m128) (X),	\
					     (int) (C), (__mmask8) (U)))

#define _mm_mask_fpclass_sd_mask(X, C, U)				\
  ((__mmask8) __builtin_ia32_fpclasssd_mask ((__v2df) (__m128d) (X),	\
					     (int) (C), (__mmask8) (U)))

#define _mm512_mask_fpclass_pd_mask(u, X, C)                            \
  ((__mmask8) __builtin_ia32_fpclasspd512_mask ((__v8df) (__m512d) (X), \
						(int) (C), (__mmask8)(u)))

#define _mm512_mask_fpclass_ps_mask(u, x, c)				\
  ((__mmask16) __builtin_ia32_fpclassps512_mask ((__v16sf) (__m512) (x),\
						 (int) (c),(__mmask16)(u)))

#define _mm512_fpclass_pd_mask(X, C)                                    \
  ((__mmask8) __builtin_ia32_fpclasspd512_mask ((__v8df) (__m512d) (X), \
						(int) (C), (__mmask8)-1))

#define _mm512_fpclass_ps_mask(x, c)                                    \
  ((__mmask16) __builtin_ia32_fpclassps512_mask ((__v16sf) (__m512) (x),\
						 (int) (c),(__mmask16)-1))

#define _mm_reduce_sd(A, B, C)						\
  ((__m128d) __builtin_ia32_reducesd_mask ((__v2df)(__m128d)(A),	\
    (__v2df)(__m128d)(B), (int)(C), (__v2df) _mm_setzero_pd (),		\
    (__mmask8)-1))

#define _mm_mask_reduce_sd(W, U, A, B, C)				\
  ((__m128d) __builtin_ia32_reducesd_mask ((__v2df)(__m128d)(A),	\
    (__v2df)(__m128d)(B), (int)(C), (__v2df)(__m128d)(W), (__mmask8)(U)))

#define _mm_maskz_reduce_sd(U, A, B, C)					\
  ((__m128d) __builtin_ia32_reducesd_mask ((__v2df)(__m128d)(A),	\
    (__v2df)(__m128d)(B), (int)(C), (__v2df) _mm_setzero_pd (),		\
    (__mmask8)(U)))

#define _mm_reduce_round_sd(A, B, C, R)				       \
  ((__m128d) __builtin_ia32_reducesd_round ((__v2df)(__m128d)(A),      \
    (__v2df)(__m128d)(B), (int)(C), (__mmask8)(U), (int)(R)))

#define _mm_mask_reduce_round_sd(W, U, A, B, C, R)		       \
  ((__m128d) __builtin_ia32_reducesd_mask_round ((__v2df)(__m128d)(A), \
    (__v2df)(__m128d)(B), (int)(C), (__v2df)(__m128d)(W),	       \
    (__mmask8)(U), (int)(R)))

#define _mm_maskz_reduce_round_sd(U, A, B, C, R)		       \
  ((__m128d) __builtin_ia32_reducesd_mask_round ((__v2df)(__m128d)(A), \
    (__v2df)(__m128d)(B), (int)(C), (__v2df) _mm_setzero_pd (),	       \
    (__mmask8)(U), (int)(R)))

#define _mm_reduce_ss(A, B, C)						\
  ((__m128) __builtin_ia32_reducess_mask ((__v4sf)(__m128)(A),		\
    (__v4sf)(__m128)(B), (int)(C), (__v4sf) _mm_setzero_ps (),		\
    (__mmask8)-1))

#define _mm_mask_reduce_ss(W, U, A, B, C)				\
  ((__m128) __builtin_ia32_reducess_mask ((__v4sf)(__m128)(A),		\
    (__v4sf)(__m128)(B), (int)(C), (__v4sf)(__m128)(W), (__mmask8)(U)))

#define _mm_maskz_reduce_ss(U, A, B, C)					\
  ((__m128) __builtin_ia32_reducess_mask ((__v4sf)(__m128)(A),		\
    (__v4sf)(__m128)(B), (int)(C), (__v4sf) _mm_setzero_ps (),		\
    (__mmask8)(U)))

#define _mm_reduce_round_ss(A, B, C, R)				       \
  ((__m128) __builtin_ia32_reducess_round ((__v4sf)(__m128)(A),	       \
    (__v4sf)(__m128)(B), (int)(C), (__mmask8)(U), (int)(R)))

#define _mm_mask_reduce_round_ss(W, U, A, B, C, R)		       \
  ((__m128) __builtin_ia32_reducess_mask_round ((__v4sf)(__m128)(A),   \
    (__v4sf)(__m128)(B), (int)(C), (__v4sf)(__m128)(W),		       \
    (__mmask8)(U), (int)(R)))

#define _mm_maskz_reduce_round_ss(U, A, B, C, R)		       \
  ((__m128) __builtin_ia32_reducesd_mask_round ((__v4sf)(__m128)(A),   \
    (__v4sf)(__m128)(B), (int)(C), (__v4sf) _mm_setzero_ps (),	       \
    (__mmask8)(U), (int)(R)))


#endif

#ifdef __DISABLE_AVX512DQ__
#undef __DISABLE_AVX512DQ__
#pragma GCC pop_options
#endif /* __DISABLE_AVX512DQ__ */

#endif /* _AVX512DQINTRIN_H_INCLUDED */
                                                                                                                                                                                                                                                                                                                                                      usr/lib/gcc/x86_64-linux-gnu/12/include/avx512erintrin.h                                            0000644 0000000 0000000 00000042406 14356504412 021072  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* Copyright (C) 2013-2022 Free Software Foundation, Inc.

   This file is part of GCC.

   GCC is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   GCC is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   Under Section 7 of GPL version 3, you are granted additional
   permissions described in the GCC Runtime Library Exception, version
   3.1, as published by the Free Software Foundation.

   You should have received a copy of the GNU General Public License and
   a copy of the GCC Runtime Library Exception along with this program;
   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
   <http://www.gnu.org/licenses/>.  */

#ifndef _IMMINTRIN_H_INCLUDED
#error "Never use <avx512erintrin.h> directly; include <immintrin.h> instead."
#endif

#ifndef _AVX512ERINTRIN_H_INCLUDED
#define _AVX512ERINTRIN_H_INCLUDED

#ifndef __AVX512ER__
#pragma GCC push_options
#pragma GCC target("avx512er")
#define __DISABLE_AVX512ER__
#endif /* __AVX512ER__ */

/* Internal data types for implementing the intrinsics.  */
typedef double __v8df __attribute__ ((__vector_size__ (64)));
typedef float __v16sf __attribute__ ((__vector_size__ (64)));

/* The Intel API is flexible enough that we must allow aliasing with other
   vector types, and their scalar components.  */
typedef float __m512 __attribute__ ((__vector_size__ (64), __may_alias__));
typedef double __m512d __attribute__ ((__vector_size__ (64), __may_alias__));

typedef unsigned char  __mmask8;
typedef unsigned short __mmask16;

#ifdef __OPTIMIZE__
extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_exp2a23_round_pd (__m512d __A, int __R)
{
  __m512d __W;
  return (__m512d) __builtin_ia32_exp2pd_mask ((__v8df) __A,
					       (__v8df) __W,
					       (__mmask8) -1, __R);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_exp2a23_round_pd (__m512d __W, __mmask8 __U, __m512d __A, int __R)
{
  return (__m512d) __builtin_ia32_exp2pd_mask ((__v8df) __A,
					       (__v8df) __W,
					       (__mmask8) __U, __R);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_exp2a23_round_pd (__mmask8 __U, __m512d __A, int __R)
{
  return (__m512d) __builtin_ia32_exp2pd_mask ((__v8df) __A,
					       (__v8df) _mm512_setzero_pd (),
					       (__mmask8) __U, __R);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_exp2a23_round_ps (__m512 __A, int __R)
{
  __m512 __W;
  return (__m512) __builtin_ia32_exp2ps_mask ((__v16sf) __A,
					      (__v16sf) __W,
					      (__mmask16) -1, __R);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_exp2a23_round_ps (__m512 __W, __mmask16 __U, __m512 __A, int __R)
{
  return (__m512) __builtin_ia32_exp2ps_mask ((__v16sf) __A,
					      (__v16sf) __W,
					      (__mmask16) __U, __R);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_exp2a23_round_ps (__mmask16 __U, __m512 __A, int __R)
{
  return (__m512) __builtin_ia32_exp2ps_mask ((__v16sf) __A,
					      (__v16sf) _mm512_setzero_ps (),
					      (__mmask16) __U, __R);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_rcp28_round_pd (__m512d __A, int __R)
{
  __m512d __W;
  return (__m512d) __builtin_ia32_rcp28pd_mask ((__v8df) __A,
						(__v8df) __W,
						(__mmask8) -1, __R);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_rcp28_round_pd (__m512d __W, __mmask8 __U, __m512d __A, int __R)
{
  return (__m512d) __builtin_ia32_rcp28pd_mask ((__v8df) __A,
						(__v8df) __W,
						(__mmask8) __U, __R);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_rcp28_round_pd (__mmask8 __U, __m512d __A, int __R)
{
  return (__m512d) __builtin_ia32_rcp28pd_mask ((__v8df) __A,
						(__v8df) _mm512_setzero_pd (),
						(__mmask8) __U, __R);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_rcp28_round_ps (__m512 __A, int __R)
{
  __m512 __W;
  return (__m512) __builtin_ia32_rcp28ps_mask ((__v16sf) __A,
					       (__v16sf) __W,
					       (__mmask16) -1, __R);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_rcp28_round_ps (__m512 __W, __mmask16 __U, __m512 __A, int __R)
{
  return (__m512) __builtin_ia32_rcp28ps_mask ((__v16sf) __A,
					       (__v16sf) __W,
					       (__mmask16) __U, __R);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_rcp28_round_ps (__mmask16 __U, __m512 __A, int __R)
{
  return (__m512) __builtin_ia32_rcp28ps_mask ((__v16sf) __A,
					       (__v16sf) _mm512_setzero_ps (),
					       (__mmask16) __U, __R);
}

extern __inline __m128d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_rcp28_round_sd (__m128d __A, __m128d __B, int __R)
{
  return (__m128d) __builtin_ia32_rcp28sd_round ((__v2df) __B,
						 (__v2df) __A,
						 __R);
}

extern __inline __m128d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_mask_rcp28_round_sd (__m128d __W, __mmask8 __U, __m128d __A,
			 __m128d __B, int __R)
{
  return (__m128d) __builtin_ia32_rcp28sd_mask_round ((__v2df) __B,
						      (__v2df) __A,
						      (__v2df) __W,
						      __U,
						      __R);
}

extern __inline __m128d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_maskz_rcp28_round_sd (__mmask8 __U, __m128d __A, __m128d __B, int __R)
{
  return (__m128d) __builtin_ia32_rcp28sd_mask_round ((__v2df) __B,
						      (__v2df) __A,
						      (__v2df)
						      _mm_setzero_pd (),
						      __U,
						      __R);
}

extern __inline __m128
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_rcp28_round_ss (__m128 __A, __m128 __B, int __R)
{
  return (__m128) __builtin_ia32_rcp28ss_round ((__v4sf) __B,
						(__v4sf) __A,
						__R);
}

extern __inline __m128
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_mask_rcp28_round_ss (__m128 __W, __mmask8 __U, __m128 __A,
			 __m128 __B, int __R)
{
  return (__m128) __builtin_ia32_rcp28ss_mask_round ((__v4sf) __B,
						     (__v4sf) __A,
						     (__v4sf) __W,
						     __U,
						     __R);
}

extern __inline __m128
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_maskz_rcp28_round_ss (__mmask8 __U, __m128 __A, __m128 __B, int __R)
{
  return (__m128) __builtin_ia32_rcp28ss_mask_round ((__v4sf) __B,
						     (__v4sf) __A,
						     (__v4sf)
						     _mm_setzero_ps (),
						     __U,
						     __R);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_rsqrt28_round_pd (__m512d __A, int __R)
{
  __m512d __W;
  return (__m512d) __builtin_ia32_rsqrt28pd_mask ((__v8df) __A,
						  (__v8df) __W,
						  (__mmask8) -1, __R);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_rsqrt28_round_pd (__m512d __W, __mmask8 __U, __m512d __A, int __R)
{
  return (__m512d) __builtin_ia32_rsqrt28pd_mask ((__v8df) __A,
						  (__v8df) __W,
						  (__mmask8) __U, __R);
}

extern __inline __m512d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_rsqrt28_round_pd (__mmask8 __U, __m512d __A, int __R)
{
  return (__m512d) __builtin_ia32_rsqrt28pd_mask ((__v8df) __A,
						  (__v8df) _mm512_setzero_pd (),
						  (__mmask8) __U, __R);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_rsqrt28_round_ps (__m512 __A, int __R)
{
  __m512 __W;
  return (__m512) __builtin_ia32_rsqrt28ps_mask ((__v16sf) __A,
						 (__v16sf) __W,
						 (__mmask16) -1, __R);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_mask_rsqrt28_round_ps (__m512 __W, __mmask16 __U, __m512 __A, int __R)
{
  return (__m512) __builtin_ia32_rsqrt28ps_mask ((__v16sf) __A,
						 (__v16sf) __W,
						 (__mmask16) __U, __R);
}

extern __inline __m512
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm512_maskz_rsqrt28_round_ps (__mmask16 __U, __m512 __A, int __R)
{
  return (__m512) __builtin_ia32_rsqrt28ps_mask ((__v16sf) __A,
						 (__v16sf) _mm512_setzero_ps (),
						 (__mmask16) __U, __R);
}

extern __inline __m128d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_rsqrt28_round_sd (__m128d __A, __m128d __B, int __R)
{
  return (__m128d) __builtin_ia32_rsqrt28sd_round ((__v2df) __B,
						   (__v2df) __A,
						   __R);
}

extern __inline __m128d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_mask_rsqrt28_round_sd (__m128d __W, __mmask8 __U, __m128d __A,
			   __m128d __B, int __R)
{
  return (__m128d) __builtin_ia32_rsqrt28sd_mask_round ((__v2df) __B,
							(__v2df) __A,
							(__v2df) __W,
							__U,
							__R);
}

extern __inline __m128d
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_maskz_rsqrt28_round_sd (__mmask8 __U, __m128d __A, __m128d __B, int __R)
{
  return (__m128d) __builtin_ia32_rsqrt28sd_mask_round ((__v2df) __B,
							(__v2df) __A,
							(__v2df)
							_mm_setzero_pd (),
							__U,
							__R);
}

extern __inline __m128
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_rsqrt28_round_ss (__m128 __A, __m128 __B, int __R)
{
  return (__m128) __builtin_ia32_rsqrt28ss_round ((__v4sf) __B,
						  (__v4sf) __A,
						  __R);
}

extern __inline __m128
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_mask_rsqrt28_round_ss (__m128 __W, __mmask8 __U, __m128 __A,
			   __m128 __B, int __R)
{
  return (__m128) __builtin_ia32_rsqrt28ss_mask_round ((__v4sf) __B,
						       (__v4sf) __A,
						       (__v4sf) __W,
						       __U,
						       __R);
}

extern __inline __m128
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm_maskz_rsqrt28_round_ss (__mmask8 __U, __m128 __A, __m128 __B, int __R)
{
  return (__m128) __builtin_ia32_rsqrt28ss_mask_round ((__v4sf) __B,
						       (__v4sf) __A,
						       (__v4sf)
						       _mm_setzero_ps (),
						       __U,
						       __R);
}

#else
#define _mm512_exp2a23_round_pd(A, C)            \
    __builtin_ia32_exp2pd_mask(A, (__v8df)_mm512_setzero_pd(), -1, C)

#define _mm512_mask_exp2a23_round_pd(W, U, A, C) \
    __builtin_ia32_exp2pd_mask(A, W, U, C)

#define _mm512_maskz_exp2a23_round_pd(U, A, C)   \
    __builtin_ia32_exp2pd_mask(A, (__v8df)_mm512_setzero_pd(), U, C)

#define _mm512_exp2a23_round_ps(A, C)            \
    __builtin_ia32_exp2ps_mask(A, (__v16sf)_mm512_setzero_ps(), -1, C)

#define _mm512_mask_exp2a23_round_ps(W, U, A, C) \
    __builtin_ia32_exp2ps_mask(A, W, U, C)

#define _mm512_maskz_exp2a23_round_ps(U, A, C)   \
    __builtin_ia32_exp2ps_mask(A, (__v16sf)_mm512_setzero_ps(), U, C)

#define _mm512_rcp28_round_pd(A, C)            \
    __builtin_ia32_rcp28pd_mask(A, (__v8df)_mm512_setzero_pd(), -1, C)

#define _mm512_mask_rcp28_round_pd(W, U, A, C) \
    __builtin_ia32_rcp28pd_mask(A, W, U, C)

#define _mm512_maskz_rcp28_round_pd(U, A, C)   \
    __builtin_ia32_rcp28pd_mask(A, (__v8df)_mm512_setzero_pd(), U, C)

#define _mm512_rcp28_round_ps(A, C)            \
    __builtin_ia32_rcp28ps_mask(A, (__v16sf)_mm512_setzero_ps(), -1, C)

#define _mm512_mask_rcp28_round_ps(W, U, A, C) \
    __builtin_ia32_rcp28ps_mask(A, W, U, C)

#define _mm512_maskz_rcp28_round_ps(U, A, C)   \
    __builtin_ia32_rcp28ps_mask(A, (__v16sf)_mm512_setzero_ps(), U, C)

#define _mm512_rsqrt28_round_pd(A, C)            \
    __builtin_ia32_rsqrt28pd_mask(A, (__v8df)_mm512_setzero_pd(), -1, C)

#define _mm512_mask_rsqrt28_round_pd(W, U, A, C) \
    __builtin_ia32_rsqrt28pd_mask(A, W, U, C)

#define _mm512_maskz_rsqrt28_round_pd(U, A, C)   \
    __builtin_ia32_rsqrt28pd_mask(A, (__v8df)_mm512_setzero_pd(), U, C)

#define _mm512_rsqrt28_round_ps(A, C)            \
    __builtin_ia32_rsqrt28ps_mask(A, (__v16sf)_mm512_setzero_ps(), -1, C)

#define _mm512_mask_rsqrt28_round_ps(W, U, A, C) \
    __builtin_ia32_rsqrt28ps_mask(A, W, U, C)

#define _mm512_maskz_rsqrt28_round_ps(U, A, C)   \
    __builtin_ia32_rsqrt28ps_mask(A, (__v16sf)_mm512_setzero_ps(), U, C)

#define _mm_rcp28_round_sd(A, B, R)	\
    __builtin_ia32_rcp28sd_round(A, B, R)

#define _mm_mask_rcp28_round_sd(W, U, A, B, R)	\
    __builtin_ia32_rcp28sd_mask_round ((A), (B), (W), (U), (R))

#define _mm_maskz_rcp28_round_sd(U, A, B, R)	\
    __builtin_ia32_rcp28sd_mask_round ((A), (B), (__v2df) _mm_setzero_pd (), \
				       (U), (R))

#define _mm_rcp28_round_ss(A, B, R)	\
    __builtin_ia32_rcp28ss_round(A, B, R)

#define _mm_mask_rcp28_round_ss(W, U, A, B, R)	\
    __builtin_ia32_rcp28ss_mask_round ((A), (B), (W), (U), (R))

#define _mm_maskz_rcp28_round_ss(U, A, B, R)	\
    __builtin_ia32_rcp28ss_mask_round ((A), (B), (__v4sf) _mm_setzero_ps (), \
				       (U), (R))

#define _mm_rsqrt28_round_sd(A, B, R)	\
    __builtin_ia32_rsqrt28sd_round(A, B, R)

#define _mm_mask_rsqrt28_round_sd(W, U, A, B, R)	\
    __builtin_ia32_rsqrt28sd_mask_round ((A), (B), (W), (U), (R))

#define _mm_maskz_rsqrt28_round_sd(U, A, B, R)	\
    __builtin_ia32_rsqrt28sd_mask_round ((A), (B), (__v2df) _mm_setzero_pd (),\
					 (U), (R))

#define _mm_rsqrt28_round_ss(A, B, R)	\
    __builtin_ia32_rsqrt28ss_round(A, B, R)

#define _mm_mask_rsqrt28_round_ss(W, U, A, B, R)	\
    __builtin_ia32_rsqrt28ss_mask_round ((A), (B), (W), (U), (R))

#define _mm_maskz_rsqrt28_round_ss(U, A, B, R)	\
    __builtin_ia32_rsqrt28ss_mask_round ((A), (B), (__v4sf) _mm_setzero_ps (),\
					 (U), (R))

#endif

#define _mm_mask_rcp28_sd(W, U, A, B)\
    _mm_mask_rcp28_round_sd ((W), (U), (A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_maskz_rcp28_sd(U, A, B)\
    _mm_maskz_rcp28_round_sd ((U), (A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_mask_rcp28_ss(W, U, A, B)\
    _mm_mask_rcp28_round_ss ((W), (U), (A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_maskz_rcp28_ss(U, A, B)\
    _mm_maskz_rcp28_round_ss ((U), (A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_mask_rsqrt28_sd(W, U, A, B)\
    _mm_mask_rsqrt28_round_sd ((W), (U), (A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_maskz_rsqrt28_sd(U, A, B)\
    _mm_maskz_rsqrt28_round_sd ((U), (A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_mask_rsqrt28_ss(W, U, A, B)\
    _mm_mask_rsqrt28_round_ss ((W), (U), (A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm_maskz_rsqrt28_ss(U, A, B)\
    _mm_maskz_rsqrt28_round_ss ((U), (A), (B), _MM_FROUND_CUR_DIRECTION)

#define _mm512_exp2a23_pd(A)                    \
    _mm512_exp2a23_round_pd(A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_mask_exp2a23_pd(W, U, A)   \
    _mm512_mask_exp2a23_round_pd(W, U, A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_maskz_exp2a23_pd(U, A)     \
    _mm512_maskz_exp2a23_round_pd(U, A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_exp2a23_ps(A)                    \
    _mm512_exp2a23_round_ps(A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_mask_exp2a23_ps(W, U, A)   \
    _mm512_mask_exp2a23_round_ps(W, U, A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_maskz_exp2a23_ps(U, A)     \
    _mm512_maskz_exp2a23_round_ps(U, A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_rcp28_pd(A)                    \
    _mm512_rcp28_round_pd(A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_mask_rcp28_pd(W, U, A)   \
    _mm512_mask_rcp28_round_pd(W, U, A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_maskz_rcp28_pd(U, A)     \
    _mm512_maskz_rcp28_round_pd(U, A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_rcp28_ps(A)                    \
    _mm512_rcp28_round_ps(A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_mask_rcp28_ps(W, U, A)   \
    _mm512_mask_rcp28_round_ps(W, U, A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_maskz_rcp28_ps(U, A)     \
    _mm512_maskz_rcp28_round_ps(U, A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_rsqrt28_pd(A)                    \
    _mm512_rsqrt28_round_pd(A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_mask_rsqrt28_pd(W, U, A)   \
    _mm512_mask_rsqrt28_round_pd(W, U, A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_maskz_rsqrt28_pd(U, A)     \
    _mm512_maskz_rsqrt28_round_pd(U, A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_rsqrt28_ps(A)                    \
    _mm512_rsqrt28_round_ps(A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_mask_rsqrt28_ps(W, U, A)   \
    _mm512_mask_rsqrt28_round_ps(W, U, A, _MM_FROUND_CUR_DIRECTION)

#define _mm512_maskz_rsqrt28_ps(U, A)     \
    _mm512_maskz_rsqrt28_round_ps(U, A, _MM_FROUND_CUR_DIRECTION)

#define _mm_rcp28_sd(A, B)	\
    __builtin_ia32_rcp28sd_round(B, A, _MM_FROUND_CUR_DIRECTION)

#define _mm_rcp28_ss(A, B)	\
    __builtin_ia32_rcp28ss_round(B, A, _MM_FROUND_CUR_DIRECTION)

#define _mm_rsqrt28_sd(A, B)	\
    __builtin_ia32_rsqrt28sd_round(B, A, _MM_FROUND_CUR_DIRECTION)

#define _mm_rsqrt28_ss(A, B)	\
    __builtin_ia32_rsqrt28ss_round(B, A, _MM_FROUND_CUR_DIRECTION)

#ifdef __DISABLE_AVX512ER__
#undef __DISABLE_AVX512ER__
#pragma GCC pop_options
#endif /* __DISABLE_AVX512ER__ */

#endif /* _AVX512ERINTRIN_H_INCLUDED */
                                                                                                                                                                                                                                                          usr/lib/gcc/x86_64-linux-gnu/12/include/avx512fintrin.h                                             0000644 0000000 0000000 00002002546 14356504412 020714  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* Copyright (C) 2013-2022 Free Software Foundation, Inc.

   This file is part of GCC.

   GCC is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   GCC is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   Under Section 7 of GPL version 3, you are granted additional
   permissions described in the GCC Runtime Library Exception, version
   3.1, as published by the Free Software Foundation.

   You should have received a copy of the GNU General Public License and
   a copy of the GCC Runtime Library Exception along with this program;
   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
   <http://www.gnu.org/licenses/>.  */

#ifndef _IMMINTRIN_H_INCLUDED
#error "Never use <avx512fintrin.h> directly; include <immintrin.h> instead."
#endif

#ifndef _AVX512FINTRIN_H_INCLUDED
#define _AVX512FINTRIN_H_INCLUDED

#ifndef __AVX512F__
#pragma GCC push_options
#pragma GCC target("avx512f")
#define __DISABLE_AVX512F__
#endif /* __AVX512F__ */

/* Internal data types for implementing the intrinsics.  */
