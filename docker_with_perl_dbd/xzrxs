be handled.

This function can create a bilevel clipping mask (black and white) and use
it while painting the image.

In the future, when the X Window System gets an alpha channel extension,
it will be possible to do full alpha compositing onto arbitrary drawables.
For now both cases fall back to a bilevel clipping mask.</doc>
      <doc-deprecated xml:space="preserve">There is no user of GdkPixbufAlphaMode in GdkPixbuf,
  and the Xlib utility functions have been split out to their own
  library, gdk-pixbuf-xlib</doc-deprecated>
      <member name="bilevel"
              value="0"
              c:identifier="GDK_PIXBUF_ALPHA_BILEVEL"
              glib:nick="bilevel"
              glib:name="GDK_PIXBUF_ALPHA_BILEVEL">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-core.h"
             line="41">A bilevel clipping mask (black and white)
 will be created and used to draw the image.  Pixels below 0.5 opacity
 will be considered fully transparent, and all others will be
 considered fully opaque.</doc>
      </member>
      <member name="full"
              value="1"
              c:identifier="GDK_PIXBUF_ALPHA_FULL"
              glib:nick="full"
              glib:name="GDK_PIXBUF_ALPHA_FULL">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-core.h"
             line="45">For now falls back to #GDK_PIXBUF_ALPHA_BILEVEL.
 In the future it will do full alpha compositing.</doc>
      </member>
    </enumeration>
    <class name="PixbufAnimation"
           c:symbol-prefix="pixbuf_animation"
           c:type="GdkPixbufAnimation"
           parent="GObject.Object"
           glib:type-name="GdkPixbufAnimation"
           glib:get-type="gdk_pixbuf_animation_get_type"
           glib:type-struct="PixbufAnimationClass">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-animation.c"
           line="32">An opaque object representing an animation.

The GdkPixBuf library provides a simple mechanism to load and
represent animations. An animation is conceptually a series of
frames to be displayed over time.

The animation may not be represented as a series of frames
internally; for example, it may be stored as a sprite and
instructions for moving the sprite around a background.

To display an animation you don't need to understand its
representation, however; you just ask `GdkPixbuf` what should
be displayed at a given point in time.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                       line="163"/>
      <constructor name="new_from_file"
                   c:identifier="gdk_pixbuf_animation_new_from_file"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="147">Creates a new animation by loading it from a file.

The file format is detected automatically.

If the file's format does not support multi-frame images, then an animation
with a single frame will be created.

Possible errors are in the `GDK_PIXBUF_ERROR` and `G_FILE_ERROR` domains.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="63"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="162">A newly-created animation</doc>
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="149">Name of file to load, in the GLib file
  name encoding</doc>
            <type name="filename" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_resource"
                   c:identifier="gdk_pixbuf_animation_new_from_resource"
                   version="2.28"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="504">Creates a new pixbuf animation by loading an image from an resource.

The file format is detected automatically. If `NULL` is returned, then
@error will be set.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="78"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="514">A newly-created animation</doc>
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="resource_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="506">the path of the resource file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stream"
                   c:identifier="gdk_pixbuf_animation_new_from_stream"
                   version="2.28"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="346">Creates a new animation by loading it from an input stream.

The file format is detected automatically.

If `NULL` is returned, then @error will be set.

The @cancellable can be used to abort the operation from another thread.
If the operation was cancelled, the error `G_IO_ERROR_CANCELLED` will be
returned. Other possible errors are in the `GDK_PIXBUF_ERROR` and
`G_IO_ERROR` domains.

The stream is not closed.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="66"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="365">A newly-created animation</doc>
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="348">a `GInputStream` to load the pixbuf from</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="349">optional `GCancellable` object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stream_finish"
                   c:identifier="gdk_pixbuf_animation_new_from_stream_finish"
                   version="2.28"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="479">Finishes an asynchronous pixbuf animation creation operation started with
[func@GdkPixbuf.PixbufAnimation.new_from_stream_async].</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="75"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="487">the newly created animation</doc>
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="async_result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="481">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new_from_stream_async"
                c:identifier="gdk_pixbuf_animation_new_from_stream_async"
                version="2.28">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="443">Creates a new animation by asynchronously loading an image from an input stream.

For more details see gdk_pixbuf_new_from_stream(), which is the synchronous
version of this function.

When the operation is finished, `callback` will be called in the main thread.
You can then call gdk_pixbuf_animation_new_from_stream_finish() to get the
result of the operation.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="445">a #GInputStream from which to load the animation</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="446">optional #GCancellable object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="447">a `GAsyncReadyCallback` to call when the pixbuf is loaded</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="448">the data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_iter" invoker="get_iter">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="664">Get an iterator for displaying an animation.

The iterator provides the frames that should be displayed at a
given time.

@start_time would normally come from g_get_current_time(), and marks
the beginning of animation playback. After creating an iterator, you
should immediately display the pixbuf returned by
gdk_pixbuf_animation_iter_get_pixbuf(). Then, you should install
a timeout (with g_timeout_add()) or by some other mechanism ensure
that you'll update the image after
gdk_pixbuf_animation_iter_get_delay_time() milliseconds. Each time
the image is updated, you should reinstall the timeout with the new,
possibly-changed delay time.

As a shortcut, if @start_time is `NULL`, the result of
g_get_current_time() will be used automatically.

To update the image (i.e. possibly change the result of
gdk_pixbuf_animation_iter_get_pixbuf() to a new frame of the animation),
call gdk_pixbuf_animation_iter_advance().

If you're using #GdkPixbufLoader, in addition to updating the image
after the delay time, you should also update it whenever you
receive the area_updated signal and
gdk_pixbuf_animation_iter_on_currently_loading_frame() returns
`TRUE`. In this case, the frame currently being fed into the loader
has received new data, so needs to be refreshed. The delay time for
a frame may also be modified after an area_updated signal, for
example if the delay time for a frame is encoded in the data after
the frame itself. So your timeout should be reinstalled after any
area_updated signal.

A delay time of -1 is possible, indicating "infinite".</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="161"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="704">an iterator to move over the animation</doc>
          <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="666">a #GdkPixbufAnimation</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
          <parameter name="start_time"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="667">time when the animation starts playing</doc>
            <type name="GLib.TimeVal" c:type="const GTimeVal*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size">
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_static_image" invoker="get_static_image">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="593">Retrieves a static image for the animation.

If an animation is really just a plain image (has only one frame),
this function returns that image.

If the animation is an animation, this function returns a reasonable
image to use as a static unanimated image, which might be the first
frame, or something more sophisticated depending on the file format.

If an animation hasn't loaded any frames yet, this function will
return `NULL`.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="609">unanimated image representing the animation</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="595">a #GdkPixbufAnimation</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_static_image" invoker="is_static_image">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="572">Checks whether the animation is a static image.

If you load a file with gdk_pixbuf_animation_new_from_file() and it
turns out to be a plain, unanimated image, then this function will
return `TRUE`. Use gdk_pixbuf_animation_get_static_image() to retrieve
the image.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="583">`TRUE` if the "animation" was really just an image</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="574">a #GdkPixbufAnimation</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_height" c:identifier="gdk_pixbuf_animation_get_height">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="641">Queries the height of the bounding box of a pixbuf animation.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="647">Height of the bounding box of the animation.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="643">An animation.</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iter" c:identifier="gdk_pixbuf_animation_get_iter">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="664">Get an iterator for displaying an animation.

The iterator provides the frames that should be displayed at a
given time.

@start_time would normally come from g_get_current_time(), and marks
the beginning of animation playback. After creating an iterator, you
should immediately display the pixbuf returned by
gdk_pixbuf_animation_iter_get_pixbuf(). Then, you should install
a timeout (with g_timeout_add()) or by some other mechanism ensure
that you'll update the image after
gdk_pixbuf_animation_iter_get_delay_time() milliseconds. Each time
the image is updated, you should reinstall the timeout with the new,
possibly-changed delay time.

As a shortcut, if @start_time is `NULL`, the result of
g_get_current_time() will be used automatically.

To update the image (i.e. possibly change the result of
gdk_pixbuf_animation_iter_get_pixbuf() to a new frame of the animation),
call gdk_pixbuf_animation_iter_advance().

If you're using #GdkPixbufLoader, in addition to updating the image
after the delay time, you should also update it whenever you
receive the area_updated signal and
gdk_pixbuf_animation_iter_on_currently_loading_frame() returns
`TRUE`. In this case, the frame currently being fed into the loader
has received new data, so needs to be refreshed. The delay time for
a frame may also be modified after an area_updated signal, for
example if the delay time for a frame is encoded in the data after
the frame itself. So your timeout should be reinstalled after any
area_updated signal.

A delay time of -1 is possible, indicating "infinite".</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="100"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="704">an iterator to move over the animation</doc>
          <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="666">a #GdkPixbufAnimation</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
          <parameter name="start_time"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="667">time when the animation starts playing</doc>
            <type name="GLib.TimeVal" c:type="const GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_static_image"
              c:identifier="gdk_pixbuf_animation_get_static_image">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="593">Retrieves a static image for the animation.

If an animation is really just a plain image (has only one frame),
this function returns that image.

If the animation is an animation, this function returns a reasonable
image to use as a static unanimated image, which might be the first
frame, or something more sophisticated depending on the file format.

If an animation hasn't loaded any frames yet, this function will
return `NULL`.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="609">unanimated image representing the animation</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="595">a #GdkPixbufAnimation</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width" c:identifier="gdk_pixbuf_animation_get_width">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="619">Queries the width of the bounding box of a pixbuf animation.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="625">Width of the bounding box of the animation.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="621">An animation.</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_static_image"
              c:identifier="gdk_pixbuf_animation_is_static_image">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="572">Checks whether the animation is a static image.

If you load a file with gdk_pixbuf_animation_new_from_file() and it
turns out to be a plain, unanimated image, then this function will
return `TRUE`. Use gdk_pixbuf_animation_get_static_image() to retrieve
the image.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="583">`TRUE` if the "animation" was really just an image</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="574">a #GdkPixbufAnimation</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref"
              c:identifier="gdk_pixbuf_animation_ref"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.0">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="542">Adds a reference to an animation.</doc>
        <doc-deprecated xml:space="preserve">Use g_object_ref().</doc-deprecated>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="84"/>
        <return-value>
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="548">The same as the @animation argument.</doc>
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="544">An animation.</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="gdk_pixbuf_animation_unref"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.0">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="558">Removes a reference from an animation.</doc>
        <doc-deprecated xml:space="preserve">Use g_object_unref().</doc-deprecated>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="560">An animation.</doc>
            <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="PixbufAnimationClass"
            c:type="GdkPixbufAnimationClass"
            glib:is-gtype-struct-for="PixbufAnimation">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-animation.h"
           line="123">Modules supporting animations must derive a type from
#GdkPixbufAnimation, providing suitable implementations of the
virtual functions.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                       line="163"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.h"
             line="125">the parent class</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="is_static_image">
        <callback name="is_static_image">
          <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                           line="153"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="583">`TRUE` if the "animation" was really just an image</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="animation" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                   line="574">a #GdkPixbufAnimation</doc>
              <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_static_image">
        <callback name="get_static_image">
          <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                           line="155"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="609">unanimated image representing the animation</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </return-value>
          <parameters>
            <parameter name="animation" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                   line="595">a #GdkPixbufAnimation</doc>
              <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                           line="157"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="animation" transfer-ownership="none">
              <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_iter">
        <callback name="get_iter">
          <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                           line="161"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="704">an iterator to move over the animation</doc>
            <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
          </return-value>
          <parameters>
            <parameter name="animation" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                   line="666">a #GdkPixbufAnimation</doc>
              <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
            </parameter>
            <parameter name="start_time"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                   line="667">time when the animation starts playing</doc>
              <type name="GLib.TimeVal" c:type="const GTimeVal*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PixbufAnimationIter"
           c:symbol-prefix="pixbuf_animation_iter"
           c:type="GdkPixbufAnimationIter"
           parent="GObject.Object"
           glib:type-name="GdkPixbufAnimationIter"
           glib:get-type="gdk_pixbuf_animation_iter_get_type"
           glib:type-struct="PixbufAnimationIterClass">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-animation.c"
           line="50">An opaque object representing an iterator which points to a
certain position in an animation.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                       line="208"/>
      <virtual-method name="advance" invoker="advance">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="813">Possibly advances an animation to a new frame.

Chooses the frame based on the start time passed to
gdk_pixbuf_animation_get_iter().

@current_time would normally come from g_get_current_time(), and
must be greater than or equal to the time passed to
gdk_pixbuf_animation_get_iter(), and must increase or remain
unchanged each time gdk_pixbuf_animation_iter_get_pixbuf() is
called. That is, you can't go backward in time; animations only
play forward.

As a shortcut, pass `NULL` for the current time and g_get_current_time()
will be invoked on your behalf. So you only need to explicitly pass
@current_time if you're doing something odd like playing the animation
at double speed.

If this function returns `FALSE`, there's no need to update the animation
display, assuming the display had been rendered prior to advancing;
if `TRUE`, you need to call gdk_pixbuf_animation_iter_get_pixbuf()
and update the display with the new pixbuf.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="206"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="840">`TRUE` if the image may need updating</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="815">a #GdkPixbufAnimationIter</doc>
            <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
          </instance-parameter>
          <parameter name="current_time"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="816">current time</doc>
            <type name="GLib.TimeVal" c:type="const GTimeVal*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_delay_time" invoker="get_delay_time">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="735">Gets the number of milliseconds the current pixbuf should be displayed,
or -1 if the current pixbuf should be displayed forever.

The `g_timeout_add()` function conveniently takes a timeout in milliseconds,
so you can use a timeout to schedule the next update.

Note that some formats, like GIF, might clamp the timeout values in the
image file to avoid updates that are just too quick. The minimum timeout
for GIF images is currently 20 milliseconds.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="749">delay time in milliseconds (thousandths of a second)</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="737">an animation iterator</doc>
            <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_pixbuf" invoker="get_pixbuf">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="760">Gets the current pixbuf which should be displayed.

The pixbuf might not be the same size as the animation itself
(gdk_pixbuf_animation_get_width(), gdk_pixbuf_animation_get_height()).

This pixbuf should be displayed for gdk_pixbuf_animation_iter_get_delay_time()
milliseconds.

The caller of this function does not own a reference to the returned
pixbuf; the returned pixbuf will become invalid when the iterator
advances to the next frame, which may happen anytime you call
gdk_pixbuf_animation_iter_advance().

Copy the pixbuf to keep it (don't just add a reference), as it may get
recycled as you advance the iterator.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="202"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="780">the pixbuf to be displayed</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="762">an animation iterator</doc>
            <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="on_currently_loading_frame"
                      invoker="on_currently_loading_frame">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="791">Used to determine how to respond to the area_updated signal on
#GdkPixbufLoader when loading an animation.

The `::area_updated` signal is emitted for an area of the frame currently
streaming in to the loader. So if you're on the currently loading frame,
you will need to redraw the screen for the updated area.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="204"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="802">`TRUE` if the frame we're on is partially loaded, or the last frame</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="793">a #GdkPixbufAnimationIter</doc>
            <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="advance" c:identifier="gdk_pixbuf_animation_iter_advance">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="813">Possibly advances an animation to a new frame.

Chooses the frame based on the start time passed to
gdk_pixbuf_animation_get_iter().

@current_time would normally come from g_get_current_time(), and
must be greater than or equal to the time passed to
gdk_pixbuf_animation_get_iter(), and must increase or remain
unchanged each time gdk_pixbuf_animation_iter_get_pixbuf() is
called. That is, you can't go backward in time; animations only
play forward.

As a shortcut, pass `NULL` for the current time and g_get_current_time()
will be invoked on your behalf. So you only need to explicitly pass
@current_time if you're doing something odd like playing the animation
at double speed.

If this function returns `FALSE`, there's no need to update the animation
display, assuming the display had been rendered prior to advancing;
if `TRUE`, you need to call gdk_pixbuf_animation_iter_get_pixbuf()
and update the display with the new pixbuf.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="840">`TRUE` if the image may need updating</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="815">a #GdkPixbufAnimationIter</doc>
            <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
          </instance-parameter>
          <parameter name="current_time"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="816">current time</doc>
            <type name="GLib.TimeVal" c:type="const GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_delay_time"
              c:identifier="gdk_pixbuf_animation_iter_get_delay_time">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="735">Gets the number of milliseconds the current pixbuf should be displayed,
or -1 if the current pixbuf should be displayed forever.

The `g_timeout_add()` function conveniently takes a timeout in milliseconds,
so you can use a timeout to schedule the next update.

Note that some formats, like GIF, might clamp the timeout values in the
image file to avoid updates that are just too quick. The minimum timeout
for GIF images is currently 20 milliseconds.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="749">delay time in milliseconds (thousandths of a second)</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="737">an animation iterator</doc>
            <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixbuf"
              c:identifier="gdk_pixbuf_animation_iter_get_pixbuf">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="760">Gets the current pixbuf which should be displayed.

The pixbuf might not be the same size as the animation itself
(gdk_pixbuf_animation_get_width(), gdk_pixbuf_animation_get_height()).

This pixbuf should be displayed for gdk_pixbuf_animation_iter_get_delay_time()
milliseconds.

The caller of this function does not own a reference to the returned
pixbuf; the returned pixbuf will become invalid when the iterator
advances to the next frame, which may happen anytime you call
gdk_pixbuf_animation_iter_advance().

Copy the pixbuf to keep it (don't just add a reference), as it may get
recycled as you advance the iterator.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="780">the pixbuf to be displayed</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="762">an animation iterator</doc>
            <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="on_currently_loading_frame"
              c:identifier="gdk_pixbuf_animation_iter_on_currently_loading_frame">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.c"
             line="791">Used to determine how to respond to the area_updated signal on
#GdkPixbufLoader when loading an animation.

The `::area_updated` signal is emitted for an area of the frame currently
streaming in to the loader. So if you're on the currently loading frame,
you will need to redraw the screen for the updated area.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-animation.c"
               line="802">`TRUE` if the frame we're on is partially loaded, or the last frame</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="793">a #GdkPixbufAnimationIter</doc>
            <type name="PixbufAnimationIter" c:type="GdkPixbufAnimationIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
