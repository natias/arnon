=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<my_chsize>
X<my_chsize>

The C library L<chsize(3)> if available, or a Perl implementation of it.

=over 3

 I32  my_chsize(int fd, Off_t length)

=back

=back

=for hackers
Found in file doio.c

=over 4

=item C<my_dirfd>
X<my_dirfd>

The C library C<L<dirfd(3)>> if available, or a Perl implementation of it, or die
if not easily emulatable.

=over 3

 int  my_dirfd(DIR *dir)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<my_pclose>
X<my_pclose>

A wrapper for the C library L<pclose(3)>.  Don't use the latter, as the Perl
version knows things that interact with the rest of the perl interpreter.

=over 3

 I32  my_pclose(PerlIO *ptr)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<my_popen>
X<my_popen>

A wrapper for the C library L<popen(3)>.  Don't use the latter, as the Perl
version knows things that interact with the rest of the perl interpreter.

=over 3

 PerlIO *  my_popen(const char *cmd, const char *mode)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<newIO>
X<newIO>

Create a new IO, setting the reference count to 1.

=over 3

 IO *  newIO()

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<PERL_FLUSHALL_FOR_CHILD>
X<PERL_FLUSHALL_FOR_CHILD>

This defines a way to flush all output buffers.  This may be a
performance issue, so we allow people to disable it.  Also, if
we are using stdio, there are broken implementations of fflush(NULL)
out there, Solaris being the most prominent.

=over 3

 void  PERL_FLUSHALL_FOR_CHILD

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<PerlIO_apply_layers>

=item C<PerlIO_binmode>

=item C<PerlIO_canset_cnt>

=item C<PerlIO_clearerr>

=item C<PerlIO_close>

=item C<PerlIO_debug>

=item C<PerlIO_eof>

=item C<PerlIO_error>

=item C<PerlIO_exportFILE>

=item C<PerlIO_fast_gets>

=item C<PerlIO_fdopen>

=item C<PerlIO_fileno>

=item C<PerlIO_fill>

=item C<PerlIO_findFILE>

=item C<PerlIO_flush>

=item C<PerlIO_get_base>

=item C<PerlIO_get_bufsiz>

=item C<PerlIO_get_cnt>

=item C<PerlIO_get_ptr>

=item C<PerlIO_getc>

=item C<PerlIO_getpos>

=item C<PerlIO_has_base>

=item C<PerlIO_has_cntptr>

=item C<PerlIO_importFILE>

=item C<PerlIO_open>

=item C<PerlIO_printf>

=item C<PerlIO_putc>

=item C<PerlIO_puts>

=item C<PerlIO_read>

=item C<PerlIO_releaseFILE>

=item C<PerlIO_reopen>

=item C<PerlIO_rewind>

=item C<PerlIO_seek>

=item C<PerlIO_set_cnt>

=item C<PerlIO_set_ptrcnt>

=item C<PerlIO_setlinebuf>

=item C<PerlIO_setpos>

=item C<PerlIO_stderr>

=item C<PerlIO_stdin>

=item C<PerlIO_stdout>

=item C<PerlIO_stdoutf>

=item C<PerlIO_tell>

=item C<PerlIO_ungetc>

=item C<PerlIO_unread>

=item C<PerlIO_vprintf>

=item C<PerlIO_write>

Described in L<perlapio>.

=over 3

 int        PerlIO_apply_layers(PerlIO *f, const char *mode,
                                const char *layers)
 int        PerlIO_binmode     (PerlIO *f, int ptype, int imode,
                                const char *layers)
 int        PerlIO_canset_cnt  (PerlIO *f)
 void       PerlIO_clearerr    (PerlIO *f)
 int        PerlIO_close       (PerlIO *f)
 void       PerlIO_debug       (const char *fmt, ...)
 int        PerlIO_eof         (PerlIO *f)
 int        PerlIO_error       (PerlIO *f)
 FILE *     PerlIO_exportFILE  (PerlIO *f, const char *mode)
 int        PerlIO_fast_gets   (PerlIO *f)
 PerlIO *   PerlIO_fdopen      (int fd, const char *mode)
 int        PerlIO_fileno      (PerlIO *f)
 int        PerlIO_fill        (PerlIO *f)
 FILE *     PerlIO_findFILE    (PerlIO *f)
 int        PerlIO_flush       (PerlIO *f)
 STDCHAR *  PerlIO_get_base    (PerlIO *f)
 SSize_t    PerlIO_get_bufsiz  (PerlIO *f)
 SSize_t    PerlIO_get_cnt     (PerlIO *f)
 STDCHAR *  PerlIO_get_ptr     (PerlIO *f)
 int        PerlIO_getc        (PerlIO *d)
 int        PerlIO_getpos      (PerlIO *f, SV *save)
 int        PerlIO_has_base    (PerlIO *f)
 int        PerlIO_has_cntptr  (PerlIO *f)
 PerlIO *   PerlIO_importFILE  (FILE *stdio, const char *mode)
 PerlIO *   PerlIO_open        (const char *path, const char *mode)
 int        PerlIO_printf      (PerlIO *f, const char *fmt, ...)
 int        PerlIO_putc        (PerlIO *f, int ch)
 int        PerlIO_puts        (PerlIO *f, const char *string)
 SSize_t    PerlIO_read        (PerlIO *f, void *vbuf,
                                Size_t count)
 void       PerlIO_releaseFILE (PerlIO *f, FILE *stdio)
 PerlIO *   PerlIO_reopen      (const char *path, const char *mode,
                                PerlIO *old)
 void       PerlIO_rewind      (PerlIO *f)
 int        PerlIO_seek        (PerlIO *f, Off_t offset,
                                int whence)
 void       PerlIO_set_cnt     (PerlIO *f, SSize_t cnt)
 void       PerlIO_set_ptrcnt  (PerlIO *f, STDCHAR *ptr,
                                SSize_t cnt)
 void       PerlIO_setlinebuf  (PerlIO *f)
 int        PerlIO_setpos      (PerlIO *f, SV *saved)
 PerlIO *   PerlIO_stderr      (PerlIO *f, const char *mode,
                                const char *layers)
 PerlIO *   PerlIO_stdin       (PerlIO *f, const char *mode,
                                const char *layers)
 PerlIO *   PerlIO_stdout      (PerlIO *f, const char *mode,
                                const char *layers)
 int        PerlIO_stdoutf     (const char *fmt, ...)
 Off_t      PerlIO_tell        (PerlIO *f)
 int        PerlIO_ungetc      (PerlIO *f, int ch)
 SSize_t    PerlIO_unread      (PerlIO *f, const void *vbuf,
                                Size_t count)
 int        PerlIO_vprintf     (PerlIO *f, const char *fmt,
                                va_list args)
 SSize_t    PerlIO_write       (PerlIO *f, const void *vbuf,
                                Size_t count)

=back

=back

=for hackers
Found in file pod/perlapio.pod

=over 4

=item C<PERLIO_F_APPEND>

=item C<PERLIO_F_CANREAD>

=item C<PERLIO_F_CANWRITE>

=item C<PERLIO_F_CRLF>

=item C<PERLIO_F_EOF>

=item C<PERLIO_F_ERROR>

=item C<PERLIO_F_FASTGETS>

=item C<PERLIO_F_LINEBUF>

=item C<PERLIO_F_OPEN>

=item C<PERLIO_F_RDBUF>

=item C<PERLIO_F_TEMP>

=item C<PERLIO_F_TRUNCATE>

=item C<PERLIO_F_UNBUF>

=item C<PERLIO_F_UTF8>

=item C<PERLIO_F_WRBUF>

Described in L<perliol>.

=back

=for hackers
Found in file pod/perliol.pod

=over 4

=item C<PERLIO_FUNCS_CAST>
X<PERLIO_FUNCS_CAST>

Cast the pointer C<func> to be of type S<C<PerlIO_funcs *>>.

=back

=for hackers
Found in file perlio.h

=over 4

=item C<PERLIO_FUNCS_DECL>
X<PERLIO_FUNCS_DECL>

Declare C<ftab> to be a PerlIO function table, that is, of type
C<PerlIO_funcs>.

=over 3

   PERLIO_FUNCS_DECL(PerlIO * ftab)

=back

=back

=for hackers
Found in file perlio.h

=over 4

=item C<PERLIO_K_BUFFERED>

=item C<PERLIO_K_CANCRLF>

=item C<PERLIO_K_FASTGETS>

=item C<PERLIO_K_MULTIARG>

=item C<PERLIO_K_RAW>

Described in L<perliol>.

=back

=for hackers
Found in file pod/perliol.pod

=over 4

=item C<PERLIO_NOT_STDIO>

Described in L<perlapio>.

=back

=for hackers
Found in file pod/perlapio.pod

=over 4

=item C<PL_maxsysfd>

Described in L<perliol>.

=back

=for hackers
Found in file pod/perliol.pod

=over 4

=item C<repeatcpy>
X<repeatcpy>

Make C<count> copies of the C<len> bytes beginning at C<from>, placing them
into memory beginning at C<to>, which must be big enough to accommodate them
all.

=over 3

 void  repeatcpy(char *to, const char *from, SSize_t len, IV count)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<USE_STDIO>

Described in L<perlapio>.

=back

=for hackers
Found in file pod/perlapio.pod

=head1 Integer

=over 4

=item C<CASTI32>
X<CASTI32>

This symbol is defined if the C compiler can cast negative
or large floating point numbers to 32-bit ints.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_INT64_T>
X<HAS_INT64_T>

This symbol will defined if the C compiler supports C<int64_t>.
Usually the F<inttypes.h> needs to be included, but sometimes
F<sys/types.h> is enough.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LONG_LONG>
X<HAS_LONG_LONG>

This symbol will be defined if the C compiler supports long long.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_QUAD>
X<HAS_QUAD>

This symbol, if defined, tells that there's a 64-bit integer type,
C<Quad_t>, and its unsigned counterpart, C<Uquad_t>. C<QUADKIND> will be one
of C<QUAD_IS_INT>, C<QUAD_IS_LONG>, C<QUAD_IS_LONG_LONG>, C<QUAD_IS_INT64_T>,
or C<QUAD_IS___INT64>.

=back

=for hackers
Found in file config.h

=over 4

=item C<I32df>
X<I32df>

This symbol defines the format string used for printing a Perl I32
as a signed decimal integer.

=back

=for hackers
Found in file config.h

=over 4

=item C<INT16_C>

=item C<INT32_C>

=item C<INT64_C>
X<INT16_C>X<INT32_C>X<INT64_C>

Returns a token the C compiler recognizes for the constant C<number> of the
corresponding integer type on the machine.

If the machine does not have a 64-bit type, C<INT64_C> is undefined.
Use C<L</INTMAX_C>> to get the largest type available on the platform.

=over 3

 I16  INT16_C(number)
 I32  INT32_C(number)
 I64  INT64_C(number)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<INTMAX_C>
X<INTMAX_C>

Returns a token the C compiler recognizes for the constant C<number> of the
widest integer type on the machine.  For example, if the machine has C<long
long>s, C<INTMAX_C(-1)> would yield

 -1LL

See also, for example, C<L</INT32_C>>.

Use L</IV> to declare variables of the maximum usable size on this platform.

=over 3

   INTMAX_C(number)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<INTSIZE>
X<INTSIZE>

This symbol contains the value of C<sizeof(int)> so that the C
preprocessor can make decisions based on it.

=back

=for hackers
Found in file config.h

=over 4

=item C<I8SIZE>
X<I8SIZE>

This symbol contains the C<sizeof(I8)>.

=back

=for hackers
Found in file config.h

=over 4

=item C<I16SIZE>
X<I16SIZE>

This symbol contains the C<sizeof(I16)>.

=back

=for hackers
Found in file config.h

=over 4

=item C<I32SIZE>
X<I32SIZE>

This symbol contains the C<sizeof(I32)>.

=back

=for hackers
Found in file config.h

=over 4

=item C<I64SIZE>
X<I64SIZE>

This symbol contains the C<sizeof(I64)>.

=back

=for hackers
Found in file config.h

=over 4

=item C<I8TYPE>
X<I8TYPE>

This symbol defines the C type used for Perl's I8.

=back

=for hackers
Found in file config.h

=over 4

=item C<I16TYPE>
X<I16TYPE>

This symbol defines the C type used for Perl's I16.

=back

=for hackers
Found in file config.h

=over 4

=item C<I32TYPE>
X<I32TYPE>

This symbol defines the C type used for Perl's I32.

=back

=for hackers
Found in file config.h

=over 4

=item C<I64TYPE>
X<I64TYPE>

This symbol defines the C type used for Perl's I64.

=back

=for hackers
Found in file config.h

=over 4

=item C<IV>

=item C<I8>

=item C<I16>

=item C<I32>

=item C<I64>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<IV_MAX>
X<IV_MAX>

The largest signed integer that fits in an IV on this platform.

=over 3

 IV  IV_MAX

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<IV_MIN>
X<IV_MIN>

The negative signed integer furthest away from 0 that fits in an IV on this
platform.

=over 3

 IV  IV_MIN

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<IVSIZE>
X<IVSIZE>

This symbol contains the C<sizeof(IV)>.

=back

=for hackers
Found in file config.h

=over 4

=item C<IVTYPE>
X<IVTYPE>

This symbol defines the C type used for Perl's IV.

=back

=for hackers
Found in file config.h

=over 4

=item C<line_t>
X<line_t>

The typedef to use to declare variables that are to hold line numbers.

=back

=for hackers
Found in file handy.h

=over 4

=item C<LONGLONGSIZE>
X<LONGLONGSIZE>

This symbol contains the size of a long long, so that the
C preprocessor can make decisions based on it.  It is only
defined if the system supports long long.

=back

=for hackers
Found in file config.h

=over 4

=item C<LONGSIZE>
X<LONGSIZE>

This symbol contains the value of C<sizeof(long)> so that the C
preprocessor can make decisions based on it.

=back

=for hackers
Found in file config.h

=over 4

=item C<memzero>
X<memzero>

Set the C<l> bytes starting at C<*d> to all zeroes.

=over 3

 void  memzero(void * d, Size_t l)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<PERL_INT_FAST8_T>

=item C<PERL_INT_FAST16_T>

=item C<PERL_UINT_FAST8_T>

=item C<PERL_UINT_FAST16_T>
X<PERL_INT_FAST8_T>X<PERL_INT_FAST16_T>X<PERL_UINT_FAST8_T>X<PERL_UINT_FAST16_T>

These are equivalent to the correspondingly-named C99 typedefs on platforms
that have those; they evaluate to C<int> and C<unsigned int> on platforms that
don't, so that you can portably take advantage of this C99 feature.

=back

=for hackers
Found in file handy.h

=over 4

=item C<PERL_INT_MAX>

=item C<PERL_INT_MIN>

=item C<PERL_LONG_MAX>

=item C<PERL_LONG_MIN>

=item C<PERL_QUAD_MAX>

=item C<PERL_QUAD_MIN>

=item C<PERL_SHORT_MAX>

=item C<PERL_SHORT_MIN>

=item C<PERL_UCHAR_MAX>

=item C<PERL_UCHAR_MIN>

=item C<PERL_UINT_MAX>

=item C<PERL_UINT_MIN>

=item C<PERL_ULONG_MAX>

=item C<PERL_ULONG_MIN>

=item C<PERL_UQUAD_MAX>

=item C<PERL_UQUAD_MIN>

=item C<PERL_USHORT_MAX>

=item C<PERL_USHORT_MIN>
X<PERL_INT_MAX>X<PERL_INT_MIN>X<PERL_LONG_MAX>X<PERL_LONG_MIN>X<PERL_QUAD_MAX>X<PERL_QUAD_MIN>X<PERL_SHORT_MAX>X<PERL_SHORT_MIN>X<PERL_UCHAR_MAX>X<PERL_UCHAR_MIN>X<PERL_UINT_MAX>X<PERL_UINT_MIN>X<PERL_ULONG_MAX>X<PERL_ULONG_MIN>X<PERL_UQUAD_MAX>X<PERL_UQUAD_MIN>X<PERL_USHORT_MAX>X<PERL_USHORT_MIN>

These give the largest and smallest number representable in the current
platform in variables of the corresponding types.

For signed types, the smallest representable number is the most negative
number, the one furthest away from zero.

For C99 and later compilers, these correspond to things like C<INT_MAX>, which
are available to the C code.  But these constants, furnished by Perl,
allow code compiled on earlier compilers to portably have access to the same
constants.

=over 3

 int             PERL_INT_MAX
 int             PERL_INT_MIN
 long            PERL_LONG_MAX
 long            PERL_LONG_MIN
 IV              PERL_QUAD_MAX
 IV              PERL_QUAD_MIN
 short           PERL_SHORT_MAX
 short           PERL_SHORT_MIN
 U8              PERL_UCHAR_MAX
 U8              PERL_UCHAR_MIN
 unsigned int    PERL_UINT_MAX
 unsigned int    PERL_UINT_MIN
 unsigned long   PERL_ULONG_MAX
 unsigned long   PERL_ULONG_MIN
 UV              PERL_UQUAD_MAX
 UV              PERL_UQUAD_MIN
 unsigned short  PERL_USHORT_MAX
 unsigned short  PERL_USHORT_MIN

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<SHORTSIZE>
X<SHORTSIZE>

This symbol contains the value of C<sizeof(short)> so that the C
preprocessor can make decisions based on it.

=back

=for hackers
Found in file config.h

=over 4

=item C<UINT16_C>

=item C<UINT32_C>

=item C<UINT64_C>
X<UINT16_C>X<UINT32_C>X<UINT64_C>

Returns a token the C compiler recognizes for the constant C<number> of the
corresponding unsigned integer type on the machine.

If the machine does not have a 64-bit type, C<UINT64_C> is undefined.
Use C<L</UINTMAX_C>> to get the largest type available on the platform.

=over 3

 U16  UINT16_C(number)
 U32  UINT32_C(number)
 U64  UINT64_C(number)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<UINTMAX_C>
X<UINTMAX_C>

Returns a token the C compiler recognizes for the constant C<number> of the
widest unsigned integer type on the machine.  For example, if the machine has
C<long>s, C<UINTMAX_C(1)> would yield

 1UL

See also, for example, C<L</UINT32_C>>.

Use L</UV> to declare variables of the maximum usable size on this platform.

=over 3

   UINTMAX_C(number)

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<U32of>
X<U32of>

This symbol defines the format string used for printing a Perl U32
as an unsigned octal integer.

=back

=for hackers
Found in file config.h

=over 4

=item C<U8SIZE>
X<U8SIZE>

This symbol contains the C<sizeof(U8)>.

=back

=for hackers
Found in file config.h

=over 4

=item C<U16SIZE>
X<U16SIZE>

This symbol contains the C<sizeof(U16)>.

=back

=for hackers
Found in file config.h

=over 4

=item C<U32SIZE>
X<U32SIZE>
