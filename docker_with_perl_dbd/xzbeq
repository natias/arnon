    /* VALUES     */ (OPpARG1_MASK|OPpMAYBE_LVSUB),
    /* KEYS       */ (OPpARG1_MASK|OPpMAYBE_LVSUB),
    /* DELETE     */ (OPpARG1_MASK|OPpKVSLICE|OPpSLICE|OPpLVAL_INTRO),
    /* EXISTS     */ (OPpARG1_MASK|OPpEXISTS_SUB),
    /* RV2HV      */ (OPpRV2HV_ISKEYS|OPpHINT_STRICT_REFS|OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpMAYBE_TRUEBOOL|OPpTRUEBOOL|OPpOUR_INTRO|OPpLVAL_INTRO),
    /* HELEM      */ (OPpARG2_MASK|OPpMAYBE_LVSUB|OPpDEREF|OPpLVAL_DEFER|OPpLVAL_INTRO),
    /* HSLICE     */ (OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpLVAL_INTRO),
    /* KVHSLICE   */ (OPpMAYBE_LVSUB),
    /* MULTIDEREF */ (OPpARG1_MASK|OPpHINT_STRICT_REFS|OPpMAYBE_LVSUB|OPpMULTIDEREF_EXISTS|OPpMULTIDEREF_DELETE|OPpLVAL_DEFER|OPpLVAL_INTRO),
    /* UNPACK     */ (OPpARG4_MASK),
    /* PACK       */ (OPpARG4_MASK),
    /* SPLIT      */ (OPpSPLIT_IMPLIM|OPpSPLIT_LEX|OPpSPLIT_ASSIGN|OPpOUR_INTRO|OPpLVAL_INTRO),
    /* JOIN       */ (OPpARG4_MASK),
    /* LIST       */ (OPpLIST_GUESSED|OPpLVAL_INTRO),
    /* LSLICE     */ (OPpARG2_MASK),
    /* ANONLIST   */ (OPpARG4_MASK),
    /* ANONHASH   */ (OPpARG4_MASK),
    /* SPLICE     */ (OPpARG4_MASK),
    /* PUSH       */ (OPpARG4_MASK|OPpTARGET_MY),
    /* POP        */ (OPpARG1_MASK),
    /* SHIFT      */ (OPpARG1_MASK),
    /* UNSHIFT    */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SORT       */ (OPpSORT_NUMERIC|OPpSORT_INTEGER|OPpSORT_REVERSE|OPpSORT_INPLACE|OPpSORT_DESCEND),
    /* REVERSE    */ (OPpARG1_MASK|OPpREVERSE_INPLACE),
    /* GREPSTART  */ (OPpARG1_MASK),
    /* GREPWHILE  */ (OPpARG1_MASK|OPpTRUEBOOL),
    /* MAPSTART   */ (OPpARG1_MASK),
    /* MAPWHILE   */ (OPpARG1_MASK),
    /* RANGE      */ (OPpARG1_MASK),
    /* FLIP       */ (OPpARG1_MASK|OPpFLIP_LINENUM),
    /* FLOP       */ (OPpARG1_MASK|OPpFLIP_LINENUM),
    /* AND        */ (OPpARG1_MASK),
    /* OR         */ (OPpARG1_MASK),
    /* XOR        */ (OPpARG2_MASK),
    /* DOR        */ (OPpARG1_MASK),
    /* COND_EXPR  */ (OPpARG1_MASK|OPpLVAL_INTRO),
    /* ANDASSIGN  */ (OPpARG1_MASK),
    /* ORASSIGN   */ (OPpARG1_MASK),
    /* DORASSIGN  */ (OPpARG1_MASK),
    /* ENTERSUB   */ (OPpENTERSUB_INARGS|OPpHINT_STRICT_REFS|OPpENTERSUB_HASTARG|OPpENTERSUB_AMPER|OPpDEREF|OPpENTERSUB_DB|OPpLVAL_INTRO),
    /* LEAVESUB   */ (OPpARG1_MASK|OPpREFCOUNTED),
    /* LEAVESUBLV */ (OPpARG1_MASK|OPpREFCOUNTED),
    /* ARGCHECK   */ (OPpARG1_MASK),
    /* ARGELEM    */ (OPpARG1_MASK|OPpARGELEM_MASK),
    /* ARGDEFELEM */ (OPpARG1_MASK),
    /* CALLER     */ (OPpARG4_MASK|OPpOFFBYONE),
    /* WARN       */ (OPpARG4_MASK),
    /* DIE        */ (OPpARG4_MASK),
    /* RESET      */ (OPpARG4_MASK),
    /* LINESEQ    */ (0),
    /* NEXTSTATE  */ (OPpHUSH_VMSISH),
    /* DBSTATE    */ (OPpHUSH_VMSISH),
    /* UNSTACK    */ (0),
    /* ENTER      */ (0),
    /* LEAVE      */ (OPpREFCOUNTED|OPpLVALUE),
    /* SCOPE      */ (0),
    /* ENTERITER  */ (OPpITER_REVERSED|OPpITER_DEF|OPpOUR_INTRO|OPpLVAL_INTRO),
    /* ITER       */ (OPpITER_REVERSED),
    /* ENTERLOOP  */ (0),
    /* LEAVELOOP  */ (OPpARG2_MASK|OPpLVALUE),
    /* RETURN     */ (0),
    /* LAST       */ (OPpARG1_MASK|OPpPV_IS_UTF8),
    /* NEXT       */ (OPpARG1_MASK|OPpPV_IS_UTF8),
    /* REDO       */ (OPpARG1_MASK|OPpPV_IS_UTF8),
    /* DUMP       */ (OPpARG1_MASK|OPpPV_IS_UTF8),
    /* GOTO       */ (OPpARG1_MASK|OPpPV_IS_UTF8),
    /* EXIT       */ (OPpARG4_MASK),
    /* METHOD     */ (OPpARG1_MASK),
    /* METHOD_NAMED */ (OPpARG1_MASK),
    /* METHOD_SUPER */ (OPpARG1_MASK),
    /* METHOD_REDIR */ (OPpARG1_MASK),
    /* METHOD_REDIR_SUPER */ (OPpARG1_MASK),
    /* ENTERGIVEN */ (OPpARG1_MASK),
    /* LEAVEGIVEN */ (OPpARG1_MASK),
    /* ENTERWHEN  */ (OPpARG1_MASK),
    /* LEAVEWHEN  */ (OPpARG1_MASK),
    /* BREAK      */ (0),
    /* CONTINUE   */ (0),
    /* OPEN       */ (OPpARG4_MASK|OPpOPEN_IN_RAW|OPpOPEN_IN_CRLF|OPpOPEN_OUT_RAW|OPpOPEN_OUT_CRLF),
    /* CLOSE      */ (OPpARG4_MASK),
    /* PIPE_OP    */ (OPpARG4_MASK),
    /* FILENO     */ (OPpARG4_MASK),
    /* UMASK      */ (OPpARG4_MASK),
    /* BINMODE    */ (OPpARG4_MASK),
    /* TIE        */ (OPpARG4_MASK),
    /* UNTIE      */ (OPpARG1_MASK),
    /* TIED       */ (OPpARG1_MASK),
    /* DBMOPEN    */ (OPpARG4_MASK),
    /* DBMCLOSE   */ (OPpARG1_MASK),
    /* SSELECT    */ (OPpARG4_MASK),
    /* SELECT     */ (OPpARG4_MASK),
    /* GETC       */ (OPpARG4_MASK),
    /* READ       */ (OPpARG4_MASK),
    /* ENTERWRITE */ (OPpARG4_MASK),
    /* LEAVEWRITE */ (OPpARG1_MASK|OPpREFCOUNTED),
    /* PRTF       */ (0),
    /* PRINT      */ (0),
    /* SAY        */ (0),
    /* SYSOPEN    */ (OPpARG4_MASK),
    /* SYSSEEK    */ (OPpARG4_MASK),
    /* SYSREAD    */ (OPpARG4_MASK),
    /* SYSWRITE   */ (OPpARG4_MASK),
    /* EOF        */ (OPpARG4_MASK),
    /* TELL       */ (OPpARG4_MASK),
    /* SEEK       */ (OPpARG4_MASK),
    /* TRUNCATE   */ (OPpARG4_MASK),
    /* FCNTL      */ (OPpARG4_MASK),
    /* IOCTL      */ (OPpARG4_MASK),
    /* FLOCK      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SEND       */ (OPpARG4_MASK),
    /* RECV       */ (OPpARG4_MASK),
    /* SOCKET     */ (OPpARG4_MASK),
    /* SOCKPAIR   */ (OPpARG4_MASK),
    /* BIND       */ (OPpARG4_MASK),
    /* CONNECT    */ (OPpARG4_MASK),
    /* LISTEN     */ (OPpARG4_MASK),
    /* ACCEPT     */ (OPpARG4_MASK),
    /* SHUTDOWN   */ (OPpARG4_MASK),
    /* GSOCKOPT   */ (OPpARG4_MASK),
    /* SSOCKOPT   */ (OPpARG4_MASK),
    /* GETSOCKNAME */ (OPpARG1_MASK),
    /* GETPEERNAME */ (OPpARG1_MASK),
    /* LSTAT      */ (OPpARG1_MASK),
    /* STAT       */ (OPpARG1_MASK),
    /* FTRREAD    */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTRWRITE   */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTREXEC    */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTEREAD    */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTEWRITE   */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTEEXEC    */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTIS       */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTSIZE     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTMTIME    */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTATIME    */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTCTIME    */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTROWNED   */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTEOWNED   */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTZERO     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTSOCK     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTCHR      */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTBLK      */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTFILE     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTDIR      */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTPIPE     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTSUID     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTSGID     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTSVTX     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTLINK     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTTTY      */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTTEXT     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTBINARY   */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* CHDIR      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* CHOWN      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* CHROOT     */ (OPpARG1_MASK|OPpTARGET_MY),
    /* UNLINK     */ (OPpARG4_MASK|OPpTARGET_MY),
    /* CHMOD      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* UTIME      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* RENAME     */ (OPpARG4_MASK|OPpTARGET_MY),
    /* LINK       */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SYMLINK    */ (OPpARG4_MASK|OPpTARGET_MY),
    /* READLINK   */ (OPpARG1_MASK),
    /* MKDIR      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* RMDIR      */ (OPpARG1_MASK|OPpTARGET_MY),
    /* OPEN_DIR   */ (OPpARG4_MASK),
    /* READDIR    */ (OPpARG1_MASK),
    /* TELLDIR    */ (OPpARG1_MASK),
    /* SEEKDIR    */ (OPpARG4_MASK),
    /* REWINDDIR  */ (OPpARG1_MASK),
    /* CLOSEDIR   */ (OPpARG1_MASK),
    /* FORK       */ (0),
    /* WAIT       */ (OPpTARGET_MY),
    /* WAITPID    */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SYSTEM     */ (OPpARG4_MASK|OPpTARGET_MY),
    /* EXEC       */ (OPpARG4_MASK|OPpTARGET_MY),
    /* KILL       */ (OPpARG4_MASK|OPpTARGET_MY),
    /* GETPPID    */ (OPpTARGET_MY),
    /* GETPGRP    */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SETPGRP    */ (OPpARG4_MASK|OPpTARGET_MY),
    /* GETPRIORITY */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SETPRIORITY */ (OPpARG4_MASK|OPpTARGET_MY),
    /* TIME       */ (OPpTARGET_MY),
    /* TMS        */ (0),
    /* LOCALTIME  */ (OPpARG1_MASK),
    /* GMTIME     */ (OPpARG4_MASK),
    /* ALARM      */ (OPpARG1_MASK),
    /* SLEEP      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SHMGET     */ (OPpARG4_MASK),
    /* SHMCTL     */ (OPpARG4_MASK),
    /* SHMREAD    */ (OPpARG4_MASK),
    /* SHMWRITE   */ (OPpARG4_MASK),
    /* MSGGET     */ (OPpARG4_MASK),
    /* MSGCTL     */ (OPpARG4_MASK),
    /* MSGSND     */ (OPpARG4_MASK),
    /* MSGRCV     */ (OPpARG4_MASK),
    /* SEMOP      */ (OPpARG4_MASK),
    /* SEMGET     */ (OPpARG4_MASK),
    /* SEMCTL     */ (OPpARG4_MASK),
    /* REQUIRE    */ (OPpARG1_MASK),
    /* DOFILE     */ (OPpARG1_MASK),
    /* HINTSEVAL  */ (0),
    /* ENTEREVAL  */ (OPpARG1_MASK|OPpEVAL_HAS_HH|OPpEVAL_UNICODE|OPpEVAL_BYTES|OPpEVAL_COPHH|OPpEVAL_RE_REPARSING),
    /* LEAVEEVAL  */ (OPpARG1_MASK|OPpREFCOUNTED),
    /* ENTERTRY   */ (OPpARG1_MASK),
    /* LEAVETRY   */ (0),
    /* GHBYNAME   */ (OPpARG1_MASK),
    /* GHBYADDR   */ (OPpARG4_MASK),
    /* GHOSTENT   */ (0),
    /* GNBYNAME   */ (OPpARG1_MASK),
    /* GNBYADDR   */ (OPpARG4_MASK),
    /* GNETENT    */ (0),
    /* GPBYNAME   */ (OPpARG1_MASK),
    /* GPBYNUMBER */ (OPpARG4_MASK),
    /* GPROTOENT  */ (0),
    /* GSBYNAME   */ (OPpARG4_MASK),
    /* GSBYPORT   */ (OPpARG4_MASK),
    /* GSERVENT   */ (0),
    /* SHOSTENT   */ (OPpARG1_MASK),
    /* SNETENT    */ (OPpARG1_MASK),
    /* SPROTOENT  */ (OPpARG1_MASK),
    /* SSERVENT   */ (OPpARG1_MASK),
    /* EHOSTENT   */ (0),
    /* ENETENT    */ (0),
    /* EPROTOENT  */ (0),
    /* ESERVENT   */ (0),
    /* GPWNAM     */ (OPpARG1_MASK),
    /* GPWUID     */ (OPpARG1_MASK),
    /* GPWENT     */ (0),
    /* SPWENT     */ (0),
    /* EPWENT     */ (0),
    /* GGRNAM     */ (OPpARG1_MASK),
    /* GGRGID     */ (OPpARG1_MASK),
    /* GGRENT     */ (0),
    /* SGRENT     */ (0),
    /* EGRENT     */ (0),
    /* GETLOGIN   */ (0),
    /* SYSCALL    */ (OPpARG4_MASK),
    /* LOCK       */ (OPpARG1_MASK),
    /* ONCE       */ (OPpARG1_MASK),
    /* CUSTOM     */ (0xff),
    /* COREARGS   */ (OPpCOREARGS_DEREF1|OPpCOREARGS_DEREF2|OPpCOREARGS_SCALARMOD|OPpCOREARGS_PUSHMARK),
    /* AVHVSWITCH */ (OPpAVHVSWITCH_MASK|OPpMAYBE_LVSUB),
    /* RUNCV      */ (OPpOFFBYONE),
    /* FC         */ (OPpARG1_MASK),
    /* PADCV      */ (0),
    /* INTROCV    */ (0),
    /* CLONECV    */ (0),
    /* PADRANGE   */ (OPpPADRANGE_COUNTMASK|OPpLVAL_INTRO),
    /* REFASSIGN  */ (OPpARG2_MASK|OPpLVREF_ELEM|OPpLVREF_ITER|OPpLVREF_TYPE|OPpPAD_STATE|OPpLVAL_INTRO),
    /* LVREF      */ (OPpARG1_MASK|OPpLVREF_ELEM|OPpLVREF_ITER|OPpLVREF_TYPE|OPpPAD_STATE|OPpLVAL_INTRO),
    /* LVREFSLICE */ (OPpLVAL_INTRO),
    /* LVAVREF    */ (OPpARG1_MASK|OPpPAD_STATE|OPpLVAL_INTRO),
    /* ANONCONST  */ (OPpARG1_MASK),
    /* ISA        */ (OPpARG2_MASK),
    /* CMPCHAIN_AND */ (OPpARG1_MASK),
    /* CMPCHAIN_DUP */ (OPpARG1_MASK),
    /* ENTERTRYCATCH */ (OPpARG1_MASK),
    /* LEAVETRYCATCH */ (0),
    /* POPTRY     */ (0),
    /* CATCH      */ (OPpARG1_MASK),
    /* PUSHDEFER  */ (OPpARG1_MASK|OPpDEFER_FINALLY),
    /* IS_BOOL    */ (OPpARG1_MASK|OPpTARGET_MY),
    /* IS_WEAK    */ (OPpARG1_MASK|OPpTARGET_MY),
    /* WEAKEN     */ (OPpARG1_MASK),
    /* UNWEAKEN   */ (OPpARG1_MASK),
    /* BLESSED    */ (OPpARG1_MASK|OPpMAYBE_TRUEBOOL|OPpTRUEBOOL),
    /* REFADDR    */ (OPpARG1_MASK|OPpTARGET_MY),
    /* REFTYPE    */ (OPpARG1_MASK|OPpTARGET_MY),
    /* CEIL       */ (OPpARG1_MASK|OPpTARGET_MY),
    /* FLOOR      */ (OPpARG1_MASK|OPpTARGET_MY),

};

#endif /* !DOINIT */

END_EXTERN_C



/* ex: set ro: */
                             usr/lib/x86_64-linux-gnu/perl/5.36.0/CORE/opnames.h                                                 0000644 0000000 0000000 00000021774 14530460112 017552  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* -*- buffer-read-only: t -*-
 *
 *    opnames.h
 *
 *    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
 *    2008 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is built by regen/opcode.pl from its data.
 * Any changes made here will be lost!
 */

typedef enum opcode {
	OP_NULL		 = 0,
	OP_STUB		 = 1,
	OP_SCALAR	 = 2,
	OP_PUSHMARK	 = 3,
	OP_WANTARRAY	 = 4,
	OP_CONST	 = 5,
	OP_GVSV		 = 6,
	OP_GV		 = 7,
	OP_GELEM	 = 8,
	OP_PADSV	 = 9,
	OP_PADAV	 = 10,
	OP_PADHV	 = 11,
	OP_PADANY	 = 12,
	OP_RV2GV	 = 13,
	OP_RV2SV	 = 14,
	OP_AV2ARYLEN	 = 15,
	OP_RV2CV	 = 16,
	OP_ANONCODE	 = 17,
	OP_PROTOTYPE	 = 18,
	OP_REFGEN	 = 19,
	OP_SREFGEN	 = 20,
	OP_REF		 = 21,
	OP_BLESS	 = 22,
	OP_BACKTICK	 = 23,
	OP_GLOB		 = 24,
	OP_READLINE	 = 25,
	OP_RCATLINE	 = 26,
	OP_REGCMAYBE	 = 27,
	OP_REGCRESET	 = 28,
	OP_REGCOMP	 = 29,
	OP_MATCH	 = 30,
	OP_QR		 = 31,
	OP_SUBST	 = 32,
	OP_SUBSTCONT	 = 33,
	OP_TRANS	 = 34,
	OP_TRANSR	 = 35,
	OP_SASSIGN	 = 36,
	OP_AASSIGN	 = 37,
	OP_CHOP		 = 38,
	OP_SCHOP	 = 39,
	OP_CHOMP	 = 40,
	OP_SCHOMP	 = 41,
	OP_DEFINED	 = 42,
	OP_UNDEF	 = 43,
	OP_STUDY	 = 44,
	OP_POS		 = 45,
	OP_PREINC	 = 46,
	OP_I_PREINC	 = 47,
	OP_PREDEC	 = 48,
	OP_I_PREDEC	 = 49,
	OP_POSTINC	 = 50,
	OP_I_POSTINC	 = 51,
	OP_POSTDEC	 = 52,
	OP_I_POSTDEC	 = 53,
	OP_POW		 = 54,
	OP_MULTIPLY	 = 55,
	OP_I_MULTIPLY	 = 56,
	OP_DIVIDE	 = 57,
	OP_I_DIVIDE	 = 58,
	OP_MODULO	 = 59,
	OP_I_MODULO	 = 60,
	OP_REPEAT	 = 61,
	OP_ADD		 = 62,
	OP_I_ADD	 = 63,
	OP_SUBTRACT	 = 64,
	OP_I_SUBTRACT	 = 65,
	OP_CONCAT	 = 66,
	OP_MULTICONCAT	 = 67,
	OP_STRINGIFY	 = 68,
	OP_LEFT_SHIFT	 = 69,
	OP_RIGHT_SHIFT	 = 70,
	OP_LT		 = 71,
	OP_I_LT		 = 72,
	OP_GT		 = 73,
	OP_I_GT		 = 74,
	OP_LE		 = 75,
	OP_I_LE		 = 76,
	OP_GE		 = 77,
	OP_I_GE		 = 78,
	OP_EQ		 = 79,
	OP_I_EQ		 = 80,
	OP_NE		 = 81,
	OP_I_NE		 = 82,
	OP_NCMP		 = 83,
	OP_I_NCMP	 = 84,
	OP_SLT		 = 85,
	OP_SGT		 = 86,
	OP_SLE		 = 87,
	OP_SGE		 = 88,
	OP_SEQ		 = 89,
	OP_SNE		 = 90,
	OP_SCMP		 = 91,
	OP_BIT_AND	 = 92,
	OP_BIT_XOR	 = 93,
	OP_BIT_OR	 = 94,
	OP_NBIT_AND	 = 95,
	OP_NBIT_XOR	 = 96,
	OP_NBIT_OR	 = 97,
	OP_SBIT_AND	 = 98,
	OP_SBIT_XOR	 = 99,
	OP_SBIT_OR	 = 100,
	OP_NEGATE	 = 101,
	OP_I_NEGATE	 = 102,
	OP_NOT		 = 103,
	OP_COMPLEMENT	 = 104,
	OP_NCOMPLEMENT	 = 105,
	OP_SCOMPLEMENT	 = 106,
	OP_SMARTMATCH	 = 107,
	OP_ATAN2	 = 108,
	OP_SIN		 = 109,
	OP_COS		 = 110,
	OP_RAND		 = 111,
	OP_SRAND	 = 112,
	OP_EXP		 = 113,
	OP_LOG		 = 114,
	OP_SQRT		 = 115,
	OP_INT		 = 116,
	OP_HEX		 = 117,
	OP_OCT		 = 118,
	OP_ABS		 = 119,
	OP_LENGTH	 = 120,
	OP_SUBSTR	 = 121,
	OP_VEC		 = 122,
	OP_INDEX	 = 123,
	OP_RINDEX	 = 124,
	OP_SPRINTF	 = 125,
	OP_FORMLINE	 = 126,
	OP_ORD		 = 127,
	OP_CHR		 = 128,
	OP_CRYPT	 = 129,
	OP_UCFIRST	 = 130,
	OP_LCFIRST	 = 131,
	OP_UC		 = 132,
	OP_LC		 = 133,
	OP_QUOTEMETA	 = 134,
	OP_RV2AV	 = 135,
	OP_AELEMFAST	 = 136,
	OP_AELEMFAST_LEX = 137,
	OP_AELEM	 = 138,
	OP_ASLICE	 = 139,
	OP_KVASLICE	 = 140,
	OP_AEACH	 = 141,
	OP_AVALUES	 = 142,
	OP_AKEYS	 = 143,
	OP_EACH		 = 144,
	OP_VALUES	 = 145,
	OP_KEYS		 = 146,
	OP_DELETE	 = 147,
	OP_EXISTS	 = 148,
	OP_RV2HV	 = 149,
	OP_HELEM	 = 150,
	OP_HSLICE	 = 151,
	OP_KVHSLICE	 = 152,
	OP_MULTIDEREF	 = 153,
	OP_UNPACK	 = 154,
	OP_PACK		 = 155,
	OP_SPLIT	 = 156,
	OP_JOIN		 = 157,
	OP_LIST		 = 158,
	OP_LSLICE	 = 159,
	OP_ANONLIST	 = 160,
	OP_ANONHASH	 = 161,
	OP_SPLICE	 = 162,
	OP_PUSH		 = 163,
	OP_POP		 = 164,
	OP_SHIFT	 = 165,
	OP_UNSHIFT	 = 166,
	OP_SORT		 = 167,
	OP_REVERSE	 = 168,
	OP_GREPSTART	 = 169,
	OP_GREPWHILE	 = 170,
	OP_MAPSTART	 = 171,
	OP_MAPWHILE	 = 172,
	OP_RANGE	 = 173,
	OP_FLIP		 = 174,
	OP_FLOP		 = 175,
	OP_AND		 = 176,
	OP_OR		 = 177,
	OP_XOR		 = 178,
	OP_DOR		 = 179,
	OP_COND_EXPR	 = 180,
	OP_ANDASSIGN	 = 181,
	OP_ORASSIGN	 = 182,
	OP_DORASSIGN	 = 183,
	OP_ENTERSUB	 = 184,
	OP_LEAVESUB	 = 185,
	OP_LEAVESUBLV	 = 186,
	OP_ARGCHECK	 = 187,
	OP_ARGELEM	 = 188,
	OP_ARGDEFELEM	 = 189,
	OP_CALLER	 = 190,
	OP_WARN		 = 191,
	OP_DIE		 = 192,
	OP_RESET	 = 193,
	OP_LINESEQ	 = 194,
	OP_NEXTSTATE	 = 195,
	OP_DBSTATE	 = 196,
	OP_UNSTACK	 = 197,
	OP_ENTER	 = 198,
	OP_LEAVE	 = 199,
	OP_SCOPE	 = 200,
	OP_ENTERITER	 = 201,
	OP_ITER		 = 202,
	OP_ENTERLOOP	 = 203,
	OP_LEAVELOOP	 = 204,
	OP_RETURN	 = 205,
	OP_LAST		 = 206,
	OP_NEXT		 = 207,
	OP_REDO		 = 208,
	OP_DUMP		 = 209,
	OP_GOTO		 = 210,
	OP_EXIT		 = 211,
	OP_METHOD	 = 212,
	OP_METHOD_NAMED	 = 213,
	OP_METHOD_SUPER	 = 214,
	OP_METHOD_REDIR	 = 215,
	OP_METHOD_REDIR_SUPER = 216,
	OP_ENTERGIVEN	 = 217,
	OP_LEAVEGIVEN	 = 218,
	OP_ENTERWHEN	 = 219,
	OP_LEAVEWHEN	 = 220,
	OP_BREAK	 = 221,
	OP_CONTINUE	 = 222,
	OP_OPEN		 = 223,
	OP_CLOSE	 = 224,
	OP_PIPE_OP	 = 225,
	OP_FILENO	 = 226,
	OP_UMASK	 = 227,
	OP_BINMODE	 = 228,
	OP_TIE		 = 229,
	OP_UNTIE	 = 230,
	OP_TIED		 = 231,
	OP_DBMOPEN	 = 232,
	OP_DBMCLOSE	 = 233,
	OP_SSELECT	 = 234,
	OP_SELECT	 = 235,
	OP_GETC		 = 236,
	OP_READ		 = 237,
	OP_ENTERWRITE	 = 238,
	OP_LEAVEWRITE	 = 239,
	OP_PRTF		 = 240,
	OP_PRINT	 = 241,
	OP_SAY		 = 242,
	OP_SYSOPEN	 = 243,
	OP_SYSSEEK	 = 244,
	OP_SYSREAD	 = 245,
	OP_SYSWRITE	 = 246,
	OP_EOF		 = 247,
	OP_TELL		 = 248,
	OP_SEEK		 = 249,
	OP_TRUNCATE	 = 250,
	OP_FCNTL	 = 251,
	OP_IOCTL	 = 252,
	OP_FLOCK	 = 253,
	OP_SEND		 = 254,
	OP_RECV		 = 255,
	OP_SOCKET	 = 256,
	OP_SOCKPAIR	 = 257,
	OP_BIND		 = 258,
	OP_CONNECT	 = 259,
	OP_LISTEN	 = 260,
	OP_ACCEPT	 = 261,
	OP_SHUTDOWN	 = 262,
	OP_GSOCKOPT	 = 263,
	OP_SSOCKOPT	 = 264,
	OP_GETSOCKNAME	 = 265,
	OP_GETPEERNAME	 = 266,
	OP_LSTAT	 = 267,
	OP_STAT		 = 268,
	OP_FTRREAD	 = 269,
	OP_FTRWRITE	 = 270,
	OP_FTREXEC	 = 271,
	OP_FTEREAD	 = 272,
	OP_FTEWRITE	 = 273,
	OP_FTEEXEC	 = 274,
	OP_FTIS		 = 275,
	OP_FTSIZE	 = 276,
	OP_FTMTIME	 = 277,
	OP_FTATIME	 = 278,
	OP_FTCTIME	 = 279,
	OP_FTROWNED	 = 280,
	OP_FTEOWNED	 = 281,
	OP_FTZERO	 = 282,
	OP_FTSOCK	 = 283,
	OP_FTCHR	 = 284,
	OP_FTBLK	 = 285,
	OP_FTFILE	 = 286,
	OP_FTDIR	 = 287,
	OP_FTPIPE	 = 288,
	OP_FTSUID	 = 289,
	OP_FTSGID	 = 290,
	OP_FTSVTX	 = 291,
	OP_FTLINK	 = 292,
	OP_FTTTY	 = 293,
	OP_FTTEXT	 = 294,
	OP_FTBINARY	 = 295,
	OP_CHDIR	 = 296,
	OP_CHOWN	 = 297,
	OP_CHROOT	 = 298,
	OP_UNLINK	 = 299,
	OP_CHMOD	 = 300,
	OP_UTIME	 = 301,
	OP_RENAME	 = 302,
	OP_LINK		 = 303,
	OP_SYMLINK	 = 304,
	OP_READLINK	 = 305,
	OP_MKDIR	 = 306,
	OP_RMDIR	 = 307,
	OP_OPEN_DIR	 = 308,
	OP_READDIR	 = 309,
	OP_TELLDIR	 = 310,
	OP_SEEKDIR	 = 311,
	OP_REWINDDIR	 = 312,
	OP_CLOSEDIR	 = 313,
	OP_FORK		 = 314,
	OP_WAIT		 = 315,
	OP_WAITPID	 = 316,
	OP_SYSTEM	 = 317,
	OP_EXEC		 = 318,
	OP_KILL		 = 319,
	OP_GETPPID	 = 320,
	OP_GETPGRP	 = 321,
	OP_SETPGRP	 = 322,
	OP_GETPRIORITY	 = 323,
	OP_SETPRIORITY	 = 324,
	OP_TIME		 = 325,
	OP_TMS		 = 326,
	OP_LOCALTIME	 = 327,
	OP_GMTIME	 = 328,
	OP_ALARM	 = 329,
	OP_SLEEP	 = 330,
	OP_SHMGET	 = 331,
	OP_SHMCTL	 = 332,
	OP_SHMREAD	 = 333,
	OP_SHMWRITE	 = 334,
	OP_MSGGET	 = 335,
	OP_MSGCTL	 = 336,
	OP_MSGSND	 = 337,
	OP_MSGRCV	 = 338,
	OP_SEMOP	 = 339,
	OP_SEMGET	 = 340,
	OP_SEMCTL	 = 341,
	OP_REQUIRE	 = 342,
	OP_DOFILE	 = 343,
	OP_HINTSEVAL	 = 344,
	OP_ENTEREVAL	 = 345,
	OP_LEAVEEVAL	 = 346,
	OP_ENTERTRY	 = 347,
	OP_LEAVETRY	 = 348,
	OP_GHBYNAME	 = 349,
	OP_GHBYADDR	 = 350,
	OP_GHOSTENT	 = 351,
	OP_GNBYNAME	 = 352,
	OP_GNBYADDR	 = 353,
	OP_GNETENT	 = 354,
	OP_GPBYNAME	 = 355,
	OP_GPBYNUMBER	 = 356,
	OP_GPROTOENT	 = 357,
	OP_GSBYNAME	 = 358,
	OP_GSBYPORT	 = 359,
	OP_GSERVENT	 = 360,
	OP_SHOSTENT	 = 361,
	OP_SNETENT	 = 362,
	OP_SPROTOENT	 = 363,
	OP_SSERVENT	 = 364,
	OP_EHOSTENT	 = 365,
	OP_ENETENT	 = 366,
	OP_EPROTOENT	 = 367,
	OP_ESERVENT	 = 368,
	OP_GPWNAM	 = 369,
	OP_GPWUID	 = 370,
	OP_GPWENT	 = 371,
	OP_SPWENT	 = 372,
	OP_EPWENT	 = 373,
	OP_GGRNAM	 = 374,
	OP_GGRGID	 = 375,
	OP_GGRENT	 = 376,
	OP_SGRENT	 = 377,
	OP_EGRENT	 = 378,
	OP_GETLOGIN	 = 379,
	OP_SYSCALL	 = 380,
	OP_LOCK		 = 381,
	OP_ONCE		 = 382,
	OP_CUSTOM	 = 383,
	OP_COREARGS	 = 384,
	OP_AVHVSWITCH	 = 385,
	OP_RUNCV	 = 386,
	OP_FC		 = 387,
	OP_PADCV	 = 388,
	OP_INTROCV	 = 389,
	OP_CLONECV	 = 390,
	OP_PADRANGE	 = 391,
	OP_REFASSIGN	 = 392,
	OP_LVREF	 = 393,
	OP_LVREFSLICE	 = 394,
	OP_LVAVREF	 = 395,
	OP_ANONCONST	 = 396,
	OP_ISA		 = 397,
	OP_CMPCHAIN_AND	 = 398,
	OP_CMPCHAIN_DUP	 = 399,
	OP_ENTERTRYCATCH = 400,
	OP_LEAVETRYCATCH = 401,
	OP_POPTRY	 = 402,
	OP_CATCH	 = 403,
	OP_PUSHDEFER	 = 404,
	OP_IS_BOOL	 = 405,
	OP_IS_WEAK	 = 406,
	OP_WEAKEN	 = 407,
	OP_UNWEAKEN	 = 408,
	OP_BLESSED	 = 409,
	OP_REFADDR	 = 410,
	OP_REFTYPE	 = 411,
	OP_CEIL		 = 412,
	OP_FLOOR	 = 413,
	OP_max		
} opcode;

#define MAXO 414
#define OP_FREED MAXO

/* the OP_IS_* macros are optimized to a simple range check because
    all the member OPs are contiguous in regen/opcodes table.
    opcode.pl verifies the range contiguity, or generates an OR-equals
    expression */

#define OP_IS_SOCKET(op)	\
	((op) >= OP_SEND && (op) <= OP_GETPEERNAME)

#define OP_IS_FILETEST(op)	\
	((op) >= OP_FTRREAD && (op) <= OP_FTBINARY)

#define OP_IS_FILETEST_ACCESS(op)	\
	((op) >= OP_FTRREAD && (op) <= OP_FTEEXEC)

#define OP_IS_NUMCOMPARE(op)	\
	((op) >= OP_LT && (op) <= OP_I_NCMP)

#define OP_IS_DIRHOP(op)	\
	((op) >= OP_READDIR && (op) <= OP_CLOSEDIR)

#define OP_IS_INFIX_BIT(op)	\
	((op) >= OP_BIT_AND && (op) <= OP_SBIT_OR)

/* ex: set ro: */
    usr/lib/x86_64-linux-gnu/perl/5.36.0/CORE/overload.h                                                0000644 0000000 0000000 00000006314 14530460112 017714  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /* -*- buffer-read-only: t -*-
 *
 *    overload.h
 *
 *    Copyright (C) 1997, 1998, 2000, 2001, 2005, 2006, 2007, 2011
 *    by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is built by regen/overload.pl.
 * Any changes made here will be lost!
 */

enum {
    fallback_amg,	/* 0x00 fallback */
    to_sv_amg,		/* 0x01 ${}      */
    to_av_amg,		/* 0x02 @{}      */
    to_hv_amg,		/* 0x03 %{}      */
    to_gv_amg,		/* 0x04 *{}      */
    to_cv_amg,		/* 0x05 &{}      */
    inc_amg,		/* 0x06 ++       */
    dec_amg,		/* 0x07 --       */
    bool__amg,		/* 0x08 bool     */
    numer_amg,		/* 0x09 0+       */
    string_amg,		/* 0x0a ""       */
    not_amg,		/* 0x0b !        */
    copy_amg,		/* 0x0c =        */
    abs_amg,		/* 0x0d abs      */
    neg_amg,		/* 0x0e neg      */
    iter_amg,		/* 0x0f <>       */
    int_amg,		/* 0x10 int      */
    lt_amg,		/* 0x11 <        */
    le_amg,		/* 0x12 <=       */
    gt_amg,		/* 0x13 >        */
    ge_amg,		/* 0x14 >=       */
    eq_amg,		/* 0x15 ==       */
    ne_amg,		/* 0x16 !=       */
    slt_amg,		/* 0x17 lt       */
    sle_amg,		/* 0x18 le       */
    sgt_amg,		/* 0x19 gt       */
    sge_amg,		/* 0x1a ge       */
    seq_amg,		/* 0x1b eq       */
    sne_amg,		/* 0x1c ne       */
    nomethod_amg,	/* 0x1d nomethod */
    add_amg,		/* 0x1e +        */
    add_ass_amg,	/* 0x1f +=       */
    subtr_amg,		/* 0x20 -        */
    subtr_ass_amg,	/* 0x21 -=       */
    mult_amg,		/* 0x22 *        */
    mult_ass_amg,	/* 0x23 *=       */
    div_amg,		/* 0x24 /        */
    div_ass_amg,	/* 0x25 /=       */
    modulo_amg,		/* 0x26 %        */
    modulo_ass_amg,	/* 0x27 %=       */
    pow_amg,		/* 0x28 **       */
    pow_ass_amg,	/* 0x29 **=      */
    lshift_amg,		/* 0x2a <<       */
    lshift_ass_amg,	/* 0x2b <<=      */
    rshift_amg,		/* 0x2c >>       */
    rshift_ass_amg,	/* 0x2d >>=      */
    band_amg,		/* 0x2e &        */
    band_ass_amg,	/* 0x2f &=       */
    sband_amg,		/* 0x30 &.       */
    sband_ass_amg,	/* 0x31 &.=      */
    bor_amg,		/* 0x32 |        */
    bor_ass_amg,	/* 0x33 |=       */
    sbor_amg,		/* 0x34 |.       */
    sbor_ass_amg,	/* 0x35 |.=      */
    bxor_amg,		/* 0x36 ^        */
    bxor_ass_amg,	/* 0x37 ^=       */
    sbxor_amg,		/* 0x38 ^.       */
    sbxor_ass_amg,	/* 0x39 ^.=      */
    ncmp_amg,		/* 0x3a <=>      */
    scmp_amg,		/* 0x3b cmp      */
    compl_amg,		/* 0x3c ~        */
    scompl_amg,		/* 0x3d ~.       */
    atan2_amg,		/* 0x3e atan2    */
    cos_amg,		/* 0x3f cos      */
    sin_amg,		/* 0x40 sin      */
    exp_amg,		/* 0x41 exp      */
    log_amg,		/* 0x42 log      */
    sqrt_amg,		/* 0x43 sqrt     */
    repeat_amg,		/* 0x44 x        */
    repeat_ass_amg,	/* 0x45 x=       */
    concat_amg,		/* 0x46 .        */
    concat_ass_amg,	/* 0x47 .=       */
    smart_amg,		/* 0x48 ~~       */
    ftest_amg,		/* 0x49 -X       */
    regexp_amg,		/* 0x4a qr       */
    max_amg_code
    /* Do not leave a trailing comma here.  C9X allows it, C89 doesn't. */
};

#define NofAMmeth max_amg_code

/* ex: set ro: */
                                                                                                                                                                                                                                                                                                                    usr/lib/x86_64-linux-gnu/perl/5.36.0/CORE/pad.h                                                     0000644 0000000 0000000 00000042255 14530460112 016651  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*    pad.h
 *
 *    Copyright (C) 2002, 2003, 2005, 2006, 2007, 2008,
 *    2009, 2010, 2011 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * This file defines the types and macros associated with the API for
 * manipulating scratchpads, which are used by perl to store lexical
 * variables, op targets and constants.
 */

/* offsets within a pad */

typedef SSize_t PADOFFSET; /* signed so that -1 is a valid value */
#define NOT_IN_PAD ((PADOFFSET) -1)

/* B.xs expects the first members of these two structs to line up
   (xpadl_max with xpadnl_fill).
 */

struct padlist {
    SSize_t	xpadl_max;	/* max index for which array has space */
    union {
        PAD **	xpadlarr_alloc; /* Pointer to beginning of array of AVs.
                                   index 0 is a padnamelist *          */
        struct {
            PADNAMELIST * padnl;
            PAD * pad_1;        /* this slice of PAD * array always alloced */
            PAD * pad_2;        /* maybe unalloced */
        } * xpadlarr_dbg;       /* for use with a C debugger only */
    } xpadl_arr;
    U32		xpadl_id;	/* Semi-unique ID, shared between clones */
    U32		xpadl_outid;	/* ID of outer pad */
};

struct padnamelist {
    SSize_t	xpadnl_fill;	/* max index in use */
    PADNAME **	xpadnl_alloc;	/* pointer to beginning of array */
    SSize_t	xpadnl_max;	/* max index for which array has space */
    PADOFFSET	xpadnl_max_named; /* highest index with len > 0 */
    U32		xpadnl_refcnt;
};

/* PERL_PADNAME_MINIMAL uses less memory, but on some platforms
   PERL_PADNAME_ALIGNED may be faster, so platform-specific hints can
   define one or the other.  */
#if defined(PERL_PADNAME_MINIMAL) && defined (PERL_PADNAME_ALIGNED)
#  error PERL_PADNAME_MINIMAL and PERL_PADNAME_ALIGNED are exclusive
#endif

#if !defined(PERL_PADNAME_MINIMAL) && !defined(PERL_PADNAME_ALIGNED)
#  define PERL_PADNAME_MINIMAL
#endif

#define _PADNAME_BASE \
    char *	xpadn_pv;		\
    HV *	xpadn_ourstash;		\
    union {				\
        HV *	xpadn_typestash;	\
        CV *	xpadn_protocv;		\
    } xpadn_type_u;			\
    U32		xpadn_low;		\
    U32		xpadn_high;		\
    U32		xpadn_refcnt;		\
    int		xpadn_gen;		\
    U8		xpadn_len;		\
    U8		xpadn_flags

struct padname {
    _PADNAME_BASE;
};

struct padname_with_str {
#ifdef PERL_PADNAME_MINIMAL
    _PADNAME_BASE;
#else
    struct padname	xpadn_padname;
#endif
    char		xpadn_str[1];
};

#undef _PADNAME_BASE

#define PADNAME_FROM_PV(s) \
    ((PADNAME *)((s) - STRUCT_OFFSET(struct padname_with_str, xpadn_str)))


/* a value that PL_cop_seqmax is guaranteed never to be,
 * flagging that a lexical is being introduced, or has not yet left scope
 */
#define PERL_PADSEQ_INTRO  U32_MAX
#define COP_SEQMAX_INC \
        (PL_cop_seqmax++, \
         (void)(PL_cop_seqmax == PERL_PADSEQ_INTRO && PL_cop_seqmax++))


/* B.xs needs these for the benefit of B::Deparse */
/* Low range end is exclusive (valid from the cop seq after this one) */
/* High range end is inclusive (valid up to this cop seq) */

#define COP_SEQ_RANGE_LOW(pn)		(pn)->xpadn_low
#define COP_SEQ_RANGE_HIGH(pn)		(pn)->xpadn_high
#define PARENT_PAD_INDEX(pn)		(pn)->xpadn_low
#define PARENT_FAKELEX_FLAGS(pn)	(pn)->xpadn_high

/* Flags set in the SvIVX field of FAKE namesvs */

#define PAD_FAKELEX_ANON   1 /* the lex is declared in an ANON, or ... */
#define PAD_FAKELEX_MULTI  2 /* the lex can be instantiated multiple times */

/* flags for the pad_new() function */

#define padnew_CLONE	1	/* this pad is for a cloned CV */
#define padnew_SAVE	2	/* save old globals */
#define padnew_SAVESUB	4	/* also save extra stuff for start of sub */

/* values for the pad_tidy() function */

typedef enum {
        padtidy_SUB,		/* tidy up a pad for a sub, */
        padtidy_SUBCLONE,	/* a cloned sub, */
        padtidy_FORMAT		/* or a format */
} padtidy_type;

/* flags for pad_add_name_pvn. */

#define padadd_OUR		0x01	   /* our declaration. */
#define padadd_STATE		0x02	   /* state declaration. */
#define padadd_NO_DUP_CHECK	0x04	   /* skip warning on dups. */
#define padadd_STALEOK		0x08	   /* allow stale lexical in active
                                            * sub, but only one level up */

/* ASSERT_CURPAD_LEGAL and ASSERT_CURPAD_ACTIVE respectively determine
 * whether PL_comppad and PL_curpad are consistent and whether they have
 * active values */

#  define pad_peg(label)

#ifdef DEBUGGING
#  define ASSERT_CURPAD_LEGAL(label) \
    pad_peg(label); \
    if (PL_comppad ? (AvARRAY(PL_comppad) != PL_curpad) : (PL_curpad != 0))  \
        Perl_croak(aTHX_ "panic: illegal pad in %s: 0x%" UVxf "[0x%" UVxf "]",\
            label, PTR2UV(PL_comppad), PTR2UV(PL_curpad));


#  define ASSERT_CURPAD_ACTIVE(label) \
    pad_peg(label); \
    if (!PL_comppad || (AvARRAY(PL_comppad) != PL_curpad))		  \
        Perl_croak(aTHX_ "panic: invalid pad in %s: 0x%" UVxf "[0x%" UVxf "]",\
            label, PTR2UV(PL_comppad), PTR2UV(PL_curpad));
#else
#  define ASSERT_CURPAD_LEGAL(label)
#  define ASSERT_CURPAD_ACTIVE(label)
#endif



/* Note: the following three macros are actually defined in scope.h, but
 * they are documented here for completeness, since they directly or
 * indirectly affect pads.
