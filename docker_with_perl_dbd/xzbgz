
=item C<lns>

From F<lns.U>:

This variable holds the name of the command to make
symbolic links (if they are supported).  It can be used
in the Makefile. It is either C<ln -s> or C<ln>

=item C<localtime_r_proto>

From F<d_localtime_r.U>:

This variable encodes the prototype of localtime_r.
It is zero if d_localtime_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_localtime_r
is defined.

=item C<locincpth>

From F<ccflags.U>:

This variable contains a list of additional directories to be
searched by the compiler.  The appropriate C<-I> directives will
be added to ccflags.  This is intended to simplify setting
local directories from the Configure command line.
It's not much, but it parallels the loclibpth stuff in F<libpth.U>.

=item C<loclibpth>

From F<libpth.U>:

This variable holds the paths (space-separated) used to find local
libraries.  It is prepended to libpth, and is intended to be easily
set from the command line.

=item C<longdblinfbytes>

From F<infnan.U>:

This variable contains comma-separated list of hexadecimal bytes
for the long double precision infinity.

=item C<longdblkind>

From F<d_longdbl.U>:

This variable, if defined, encodes the type of a long double:
0 = double,
1 = C<IEEE> 754 128-bit little endian,
2 = C<IEEE> 754 128-bit big endian,
3 = x86 80-bit little endian,
4 = x86 80-bit big endian,
5 = double-double 128-bit little endian,
6 = double-double 128-bit big endian,
7 = 128-bit mixed-endian double-double (64-bit LEs in C<BE>),
8 = 128-bit mixed-endian double-double (64-bit BEs in C<LE>),
9 = 128-bit C<PDP>-style mixed-endian long doubles,
-1 = unknown format.

=item C<longdblmantbits>

From F<mantbits.U>:

This symbol, if defined, tells how many mantissa bits
there are in long double precision floating point format.
Note that this can be C<LDBL_MANT_DIG> minus one,
since C<LDBL_MANT_DIG> can include the C<IEEE> 754 implicit bit.
The common x86-style 80-bit long double does not have
an implicit bit.

=item C<longdblnanbytes>

From F<infnan.U>:

This variable contains comma-separated list of hexadecimal bytes
for the long double precision not-a-number.

=item C<longdblsize>

From F<d_longdbl.U>:

This variable contains the value of the C<LONG_DOUBLESIZE> symbol, which
indicates to the C program how many bytes there are in a long double,
if this system supports long doubles.  Note that this is
sizeof(long double), which may include unused bytes.

=item C<longlongsize>

From F<d_longlong.U>:

This variable contains the value of the C<LONGLONGSIZE> symbol, which
indicates to the C program how many bytes there are in a long long,
if this system supports long long.

=item C<longsize>

From F<intsize.U>:

This variable contains the value of the C<LONGSIZE> symbol, which
indicates to the C program how many bytes there are in a long.

=item C<lp>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<lpr>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<ls>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the ls program.  After Configure runs,
the value is reset to a plain C<ls> and is not useful.

=item C<lseeksize>

From F<lseektype.U>:

This variable defines lseektype to be something like off_t, long,
or whatever type is used to declare lseek offset's type in the
kernel (which also appears to be lseek's return type).

=item C<lseektype>

From F<lseektype.U>:

This variable defines lseektype to be something like off_t, long,
or whatever type is used to declare lseek offset's type in the
kernel (which also appears to be lseek's return type).

=back

=head2 m

=over 4

=item C<mail>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<mailx>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<make>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the make program.  After Configure runs,
the value is reset to a plain C<make> and is not useful.

=item C<make_set_make>

From F<make.U>:

Some versions of C<make> set the variable C<MAKE>.  Others do not.
This variable contains the string to be included in F<Makefile.SH>
so that C<MAKE> is set if needed, and not if not needed.
Possible values are:

make_set_make=C<#>		# If your make program handles this for you,

make_set_make=C<MAKE=$make>	# if it doesn't.

This uses a comment character so that we can distinguish a
C<set> value (from a previous F<config.sh> or Configure C<-D> option)
from an uncomputed value.

=item C<mallocobj>

From F<mallocsrc.U>:

This variable contains the name of the F<malloc.o> that this package
generates, if that F<malloc.o> is preferred over the system malloc.
Otherwise the value is null.  This variable is intended for generating
Makefiles.  See mallocsrc.

=item C<mallocsrc>

From F<mallocsrc.U>:

This variable contains the name of the F<malloc.c> that comes with
the package, if that F<malloc.c> is preferred over the system malloc.
Otherwise the value is null.  This variable is intended for generating
Makefiles.

=item C<malloctype>

From F<mallocsrc.U>:

This variable contains the kind of ptr returned by malloc and realloc.

=item C<man1dir>

From F<man1dir.U>:

This variable contains the name of the directory in which manual
source pages are to be put.  It is the responsibility of the
F<Makefile.SH> to get the value of this into the proper command.
You must be prepared to do the F<~name> expansion yourself.

=item C<man1direxp>

From F<man1dir.U>:

This variable is the same as the man1dir variable, but is filename
expanded at configuration time, for convenient use in makefiles.

=item C<man1ext>

From F<man1dir.U>:

This variable contains the extension that the manual page should
have: one of C<n>, C<l>, or C<1>.  The Makefile must supply the F<.>.
See man1dir.

=item C<man3dir>

From F<man3dir.U>:

This variable contains the name of the directory in which manual
source pages are to be put.  It is the responsibility of the
F<Makefile.SH> to get the value of this into the proper command.
You must be prepared to do the F<~name> expansion yourself.

=item C<man3direxp>

From F<man3dir.U>:

This variable is the same as the man3dir variable, but is filename
expanded at configuration time, for convenient use in makefiles.

=item C<man3ext>

From F<man3dir.U>:

This variable contains the extension that the manual page should
have: one of C<n>, C<l>, or C<3>.  The Makefile must supply the F<.>.
See man3dir.

=item C<mips_type>

From F<usrinc.U>:

This variable holds the environment type for the mips system.
Possible values are "BSD 4.3" and "System V".

=item C<mistrustnm>

From F<Csym.U>:

This variable can be used to establish a fallthrough for the cases
where nm fails to find a symbol.  If usenm is false or usenm is true
and mistrustnm is false, this variable has no effect.  If usenm is true
and mistrustnm is C<compile>, a test program will be compiled to try to
find any symbol that can't be located via nm lookup.  If mistrustnm is
C<run>, the test program will be run as well as being compiled.

=item C<mkdir>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the mkdir program.  After Configure runs,
the value is reset to a plain C<mkdir> and is not useful.

=item C<mmaptype>

From F<d_mmap.U>:

This symbol contains the type of pointer returned by mmap()
(and simultaneously the type of the first argument).
It can be C<void *> or C<caddr_t>.

=item C<modetype>

From F<modetype.U>:

This variable defines modetype to be something like mode_t,
int, unsigned short, or whatever type is used to declare file
modes for system calls.

=item C<more>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the more program.  After Configure runs,
the value is reset to a plain C<more> and is not useful.

=item C<multiarch>

From F<multiarch.U>:

This variable conditionally defines the C<MULTIARCH> symbol
which signifies the presence of multiplatform files.
This is normally set by hints files.

=item C<mv>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<myarchname>

From F<archname.U>:

This variable holds the architecture name computed by Configure in
a previous run. It is not intended to be perused by any user and
should never be set in a hint file.

=item C<mydomain>

From F<myhostname.U>:

This variable contains the eventual value of the C<MYDOMAIN> symbol,
which is the domain of the host the program is going to run on.
The domain must be appended to myhostname to form a complete host name.
The dot comes with mydomain, and need not be supplied by the program.

=item C<myhostname>

From F<myhostname.U>:

This variable contains the eventual value of the C<MYHOSTNAME> symbol,
which is the name of the host the program is going to run on.
The domain is not kept with hostname, but must be gotten from mydomain.
The dot comes with mydomain, and need not be supplied by the program.

=item C<myuname>

From F<Oldconfig.U>:

The output of C<uname -a> if available, otherwise the hostname.
The whole thing is then lower-cased and slashes and single quotes are
removed.

=back

=head2 n

=over 4

=item C<n>

From F<n.U>:

This variable contains the C<-n> flag if that is what causes the echo
command to suppress newline.  Otherwise it is null.  Correct usage is
$echo $n "prompt for a question: $c".

=item C<need_va_copy>

From F<need_va_copy.U>:

This symbol, if defined, indicates that the system stores
the variable argument list datatype, va_list, in a format
that cannot be copied by simple assignment, so that some
other means must be used when copying is required.
As such systems vary in their provision (or non-provision)
of copying mechanisms, F<handy.h> defines a platform-
C<independent> macro, Perl_va_copy(src, dst), to do the job.

=item C<netdb_hlen_type>

From F<netdbtype.U>:

This variable holds the type used for the 2nd argument to
gethostbyaddr().  Usually, this is int or size_t or unsigned.
This is only useful if you have gethostbyaddr(), naturally.

=item C<netdb_host_type>

From F<netdbtype.U>:

This variable holds the type used for the 1st argument to
gethostbyaddr().  Usually, this is char * or void *,  possibly
with or without a const prefix.
This is only useful if you have gethostbyaddr(), naturally.

=item C<netdb_name_type>

From F<netdbtype.U>:

This variable holds the type used for the argument to
gethostbyname().  Usually, this is char * or const char *.
This is only useful if you have gethostbyname(), naturally.

=item C<netdb_net_type>

From F<netdbtype.U>:

This variable holds the type used for the 1st argument to
getnetbyaddr().  Usually, this is int or long.
This is only useful if you have getnetbyaddr(), naturally.

=item C<nm>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the nm program.  After Configure runs,
the value is reset to a plain C<nm> and is not useful.

=item C<nm_opt>

From F<usenm.U>:

This variable holds the options that may be necessary for nm.

=item C<nm_so_opt>

From F<usenm.U>:

This variable holds the options that may be necessary for nm
to work on a shared library but that can not be used on an
archive library.  Currently, this is only used by Linux, where
nm --dynamic is *required* to get symbols from an C<ELF> library which
has been stripped, but nm --dynamic is *fatal* on an archive library.
Maybe Linux should just always set usenm=false.

=item C<nonxs_ext>

From F<Extensions.U>:

This variable holds a list of all non-xs extensions built and
installed by the package.  By default, all non-xs extensions
distributed will be built, with the exception of platform-specific
extensions (currently only one C<VMS> specific extension).

=item C<nroff>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the nroff program.  After Configure runs,
the value is reset to a plain C<nroff> and is not useful.

=item C<nv_overflows_integers_at>

From F<perlxv.U>:

This variable gives the largest integer value that NVs can hold
as a constant floating point expression.
If it could not be determined, it holds the value 0.

=item C<nv_preserves_uv_bits>

From F<perlxv.U>:

This variable indicates how many of bits type uvtype
a variable nvtype can preserve.

=item C<nveformat>

From F<perlxvf.U>:

This variable contains the format string used for printing
a Perl C<NV> using %e-ish floating point format.

=item C<nvEUformat>

From F<perlxvf.U>:

This variable contains the format string used for printing
a Perl C<NV> using %E-ish floating point format.

=item C<nvfformat>

From F<perlxvf.U>:

This variable contains the format string used for printing
a Perl C<NV> using %f-ish floating point format.

=item C<nvFUformat>

From F<perlxvf.U>:

This variable contains the format string used for printing
a Perl C<NV> using %F-ish floating point format.

=item C<nvgformat>

From F<perlxvf.U>:

This variable contains the format string used for printing
a Perl C<NV> using %g-ish floating point format.

=item C<nvGUformat>

From F<perlxvf.U>:

This variable contains the format string used for printing
a Perl C<NV> using %G-ish floating point format.

=item C<nvmantbits>

From F<mantbits.U>:

This variable tells how many bits the mantissa of a Perl C<NV> has,
not including the possible implicit bit.

=item C<nvsize>

From F<perlxv.U>:

This variable is the size of a Perl C<NV> in bytes.
Note that some floating point formats have unused bytes.

=item C<nvtype>

From F<perlxv.U>:

This variable contains the C type used for Perl's C<NV>.

=back

=head2 o

=over 4

=item C<o_nonblock>

From F<nblock_io.U>:

This variable bears the symbol value to be used during open() or fcntl()
to turn on non-blocking I/O for a file descriptor. If you wish to switch
between blocking and non-blocking, you may try ioctl(C<FIOSNBIO>) instead,
but that is only supported by some devices.

=item C<obj_ext>

From F<Unix.U>:

This is an old synonym for _o.

=item C<old_pthread_create_joinable>

From F<d_pthrattrj.U>:

This variable defines the constant to use for creating joinable
(aka undetached) pthreads.  Unused if F<pthread.h> defines
C<PTHREAD_CREATE_JOINABLE>.  If used, possible values are
C<PTHREAD_CREATE_UNDETACHED> and C<__UNDETACHED>.

=item C<optimize>

From F<ccflags.U>:

This variable contains any F<optimizer/debugger> flag that should be used.
It is up to the Makefile to use it.

=item C<orderlib>

From F<orderlib.U>:

This variable is C<true> if the components of libraries must be ordered
(with `lorder $* | tsort`) before placing them in an archive.  Set to
C<false> if ranlib or ar can generate random libraries.

=item C<osname>

From F<Oldconfig.U>:

This variable contains the operating system name (e.g. sunos,
solaris, hpux, etc.).  It can be useful later on for setting
defaults.  Any spaces are replaced with underscores.  It is set
to a null string if we can't figure it out.

=item C<osvers>

From F<Oldconfig.U>:

This variable contains the operating system version (e.g.
4.1.3, 5.2, etc.).  It is primarily used for helping select
an appropriate hints file, but might be useful elsewhere for
setting defaults.  It is set to '' if we can't figure it out.
We try to be flexible about how much of the version number
to keep, e.g. if 4.1.1, 4.1.2, and 4.1.3 are essentially the
same for this package, hints files might just be F<os_4.0> or
F<os_4.1>, etc., not keeping separate files for each little release.

=item C<otherlibdirs>

From F<otherlibdirs.U>:

This variable contains a colon-separated set of paths for the perl
binary to search for additional library files or modules.
These directories will be tacked to the end of @C<INC>.
Perl will automatically search below each path for version-
and architecture-specific directories.  See inc_version_list
for more details.
A value of C< > means C<none> and is used to preserve this value
for the next run through Configure.

=back

=head2 p

=over 4

=item C<package>

From F<package.U>:

This variable contains the name of the package being constructed.
It is primarily intended for the use of later Configure units.

=item C<pager>

From F<pager.U>:

This variable contains the name of the preferred pager on the system.
Usual values are (the full pathnames of) more, less, pg, or cat.

=item C<passcat>

From F<nis.U>:

This variable contains a command that produces the text of the
F</etc/passwd> file.  This is normally "cat F</etc/passwd>", but can be
"ypcat passwd" when C<NIS> is used.
On some systems, such as os390, there may be no equivalent
command, in which case this variable is unset.

=item C<patchlevel>

From F<patchlevel.U>:

The patchlevel level of this package.
The value of patchlevel comes from the F<patchlevel.h> file.
In a version number such as 5.6.1, this is the C<6>.
In F<patchlevel.h>, this is referred to as C<PERL_VERSION>.

=item C<path_sep>

From F<Unix.U>:

This is an old synonym for p_ in F<Head.U>, the character
used to separate elements in the command shell search C<PATH>.

=item C<perl>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the perl program.  After Configure runs,
the value is reset to a plain C<perl> and is not useful.

=item C<perl5>

From F<perl5.U>:

This variable contains the full path (if any) to a previously
installed F<perl5.005> or later suitable for running the script
to determine inc_version_list.

=back

=head2 P

=over 4

=item C<PERL_API_REVISION>

From F<patchlevel.h>:

This number describes the earliest compatible C<PERL_REVISION> of
Perl (C<compatibility> here being defined as sufficient F<binary/C<API>>
compatibility to run C<XS> code built with the older version).
Normally this does not change across maintenance releases.
Please read the comment in F<patchlevel.h>.

=item C<PERL_API_SUBVERSION>

From F<patchlevel.h>:

This number describes the earliest compatible C<PERL_SUBVERSION> of
Perl (C<compatibility> here being defined as sufficient F<binary/C<API>>
compatibility to run C<XS> code built with the older version).
Normally this does not change across maintenance releases.
Please read the comment in F<patchlevel.h>.

=item C<PERL_API_VERSION>

From F<patchlevel.h>:

This number describes the earliest compatible C<PERL_VERSION> of
Perl (C<compatibility> here being defined as sufficient F<binary/C<API>>
compatibility to run C<XS> code built with the older version).
Normally this does not change across maintenance releases.
Please read the comment in F<patchlevel.h>.

=item C<PERL_CONFIG_SH>

From F<Oldsyms.U>:

This is set to C<true> in F<config.sh> so that a shell script
sourcing F<config.sh> can tell if it has been sourced already.

=item C<PERL_PATCHLEVEL>

From F<Oldsyms.U>:

This symbol reflects the patchlevel, if available. Will usually
come from the F<.patch> file, which is available when the perl
source tree was fetched with rsync.

=item C<perl_patchlevel>

From F<patchlevel.U>:

This is the Perl patch level, a numeric change identifier,
as defined by whichever source code maintenance system
is used to maintain the patches; currently Perforce.
It does not correlate with the Perl version numbers or
the maintenance versus development dichotomy except
by also being increasing.

=item C<PERL_REVISION>

From F<Oldsyms.U>:

In a Perl version number such as 5.6.2, this is the 5.
This value is manually set in F<patchlevel.h>

=item C<perl_static_inline>

From F<d_static_inline.U>:

This variable defines the C<PERL_STATIC_INLINE> symbol to
the best-guess incantation to use for static inline functions.
Possibilities include
static inline       (c99)
static __inline__   (gcc -ansi)
static __inline     (C<MSVC>)
static _inline      (older C<MSVC>)
static              (c89 compilers)

=item C<PERL_SUBVERSION>

From F<Oldsyms.U>:

In a Perl version number such as 5.6.2, this is the 2.
Values greater than 50 represent potentially unstable
development subversions.
This value is manually set in F<patchlevel.h>

=item C<perl_thread_local>

From F<d_thread_local.U>:

This variable gives the value for the C<PERL_THREAD_LOCAL> symbol (when
defined), which gives a linkage specification for thread-local storage.

=item C<PERL_VERSION>

From F<Oldsyms.U>:

In a Perl version number such as 5.6.2, this is the 6.
This value is manually set in F<patchlevel.h>

=item C<perladmin>

From F<perladmin.U>:

Electronic mail address of the perl5 administrator.

=item C<perllibs>

From F<End.U>:

The list of libraries needed by Perl only (any libraries needed
by extensions only will by dropped, if using dynamic loading).

=item C<perlpath>

From F<perlpath.U>:

This variable contains the eventual value of the C<PERLPATH> symbol,
which contains the name of the perl interpreter to be used in
shell scripts and in the "eval C<exec>" idiom.  This variable is
not necessarily the pathname of the file containing the perl
interpreter; you must append the executable extension (_exe) if
it is not already present.  Note that Perl code that runs during
the Perl build process cannot reference this variable, as Perl
may not have been installed, or even if installed, may be a
different version of Perl.

=item C<pg>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the pg program.  After Configure runs,
the value is reset to a plain C<pg> and is not useful.

=item C<phostname>

From F<myhostname.U>:

This variable contains the eventual value of the C<PHOSTNAME> symbol,
which is a command that can be fed to popen() to get the host name.
The program should probably not presume that the domain is or isn't
there already.

=item C<pidtype>

From F<pidtype.U>:

This variable defines C<PIDTYPE> to be something like pid_t, int,
ushort, or whatever type is used to declare process ids in the kernel.

=item C<plibpth>

From F<libpth.U>:

Holds the private path used by Configure to find out the libraries.
Its value is prepend to libpth. This variable takes care of special
machines, like the mips.  Usually, it should be empty.

=item C<pmake>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<pr>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<prefix>

From F<prefix.U>:

This variable holds the name of the directory below which the
user will install the package.  Usually, this is F</usr/local>, and
executables go in F</usr/local/bin>, library stuff in F</usr/local/lib>,
man pages in F</usr/local/man>, etc.  It is only used to set defaults
for things in F<bin.U>, F<mansrc.U>, F<privlib.U>, or F<scriptdir.U>.

=item C<prefixexp>

From F<prefix.U>:

This variable holds the full absolute path of the directory below
which the user will install the package.  Derived from prefix.

=item C<privlib>

From F<privlib.U>:

This variable contains the eventual value of the C<PRIVLIB> symbol,
which is the name of the private library for this package.  It may
have a F<~> on the front. It is up to the makefile to eventually create
this directory while performing installation (with F<~> substitution).

=item C<privlibexp>

From F<privlib.U>:

This variable is the F<~name> expanded version of privlib, so that you
may use it directly in Makefiles or shell scripts.

=item C<procselfexe>

From F<d_procselfexe.U>:

If d_procselfexe is defined, $procselfexe is the filename
of the symbolic link pointing to the absolute pathname of
the executing program.

=item C<ptrsize>

From F<ptrsize.U>:

This variable contains the value of the C<PTRSIZE> symbol, which
indicates to the C program how many bytes there are in a pointer.

=back

=head2 q

=over 4

=item C<quadkind>

From F<quadtype.U>:

This variable, if defined, encodes the type of a quad:
1 = int, 2 = long, 3 = long long, 4 = int64_t.

=item C<quadtype>

From F<quadtype.U>:

This variable defines Quad_t to be something like long, int,
long long, int64_t, or whatever type is used for 64-bit integers.

=back

=head2 r

=over 4

=item C<randbits>

From F<randfunc.U>:

Indicates how many bits are produced by the function used to
generate normalized random numbers.

=item C<randfunc>

From F<randfunc.U>:

Indicates the name of the random number function to use.
Values include drand48, random, and rand. In C programs,
the C<Drand01> macro is defined to generate uniformly distributed
random numbers over the range [0., 1.[ (see drand01 and nrand).

=item C<random_r_proto>

From F<d_random_r.U>:

This variable encodes the prototype of random_r.
It is zero if d_random_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_random_r
is defined.

=item C<randseedtype>

From F<randfunc.U>:

Indicates the type of the argument of the seedfunc.

=item C<ranlib>

From F<orderlib.U>:

This variable is set to the pathname of the ranlib program, if it is
needed to generate random libraries.  Set to C<:> if ar can generate
random libraries or if random libraries are not supported

=item C<rd_nodata>

From F<nblock_io.U>:

This variable holds the return code from read() when no data is
present. It should be -1, but some systems return 0 when C<O_NDELAY> is
used, which is a shame because you cannot make the difference between
no data and an F<EOF.>. Sigh!

=item C<readdir64_r_proto>

From F<d_readdir64_r.U>:

This variable encodes the prototype of readdir64_r.
It is zero if d_readdir64_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_readdir64_r
is defined.

=item C<readdir_r_proto>

From F<d_readdir_r.U>:

This variable encodes the prototype of readdir_r.
It is zero if d_readdir_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_readdir_r
is defined.

=item C<revision>

From F<patchlevel.U>:

The value of revision comes from the F<patchlevel.h> file.
In a version number such as 5.6.1, this is the C<5>.
