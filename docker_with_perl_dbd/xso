                or
                # create with flags
                (not f1 and flag2)
                or
                # change flags
                (f1 and f2 and flag1 != flag2)
            ):
                losedatafn(f2 or f1)

        path1 = pathfn(f1 or f2)
        path2 = pathfn(f2 or f1)
        header = []
        if opts.git:
            header.append(
                b'diff --git %s%s %s%s' % (aprefix, path1, bprefix, path2)
            )
            if not f1:  # added
                header.append(b'new file mode %s' % _gitmode[flag2])
            elif not f2:  # removed
                header.append(b'deleted file mode %s' % _gitmode[flag1])
            else:  # modified/copied/renamed
                mode1, mode2 = _gitmode[flag1], _gitmode[flag2]
                if mode1 != mode2:
                    header.append(b'old mode %s' % mode1)
                    header.append(b'new mode %s' % mode2)
                if copyop is not None:
                    if opts.showsimilarity:
                        sim = similar.score(ctx1[path1], ctx2[path2]) * 100
                        header.append(b'similarity index %d%%' % sim)
                    header.append(b'%s from %s' % (copyop, path1))
                    header.append(b'%s to %s' % (copyop, path2))
        elif revs:
            header.append(diffline(path1, revs))

        #  fctx.is  | diffopts                | what to   | is fctx.data()
        #  binary() | text nobinary git index | output?   | outputted?
        # ------------------------------------|----------------------------
        #  yes      | no   no       no  *     | summary   | no
        #  yes      | no   no       yes *     | base85    | yes
        #  yes      | no   yes      no  *     | summary   | no
        #  yes      | no   yes      yes 0     | summary   | no
        #  yes      | no   yes      yes >0    | summary   | semi [1]
        #  yes      | yes  *        *   *     | text diff | yes
        #  no       | *    *        *   *     | text diff | yes
        # [1]: hash(fctx.data()) is outputted. so fctx.data() cannot be faked
        if binary and (
            not opts.git or (opts.git and opts.nobinary and not opts.index)
        ):
            # fast path: no binary content will be displayed, content1 and
            # content2 are only used for equivalent test. cmp() could have a
            # fast path.
            if fctx1 is not None:
                content1 = b'\0'
            if fctx2 is not None:
                if fctx1 is not None and not fctx1.cmp(fctx2):
                    content2 = b'\0'  # not different
                else:
                    content2 = b'\0\0'
        else:
            # normal path: load contents
            if fctx1 is not None:
                content1 = fctx1.data()
            if fctx2 is not None:
                content2 = fctx2.data()

        data1 = (ctx1, fctx1, path1, flag1, content1, date1)
        data2 = (ctx2, fctx2, path2, flag2, content2, date2)
        yield diffcontent(data1, data2, header, binary, opts)


def diffcontent(data1, data2, header, binary, opts):
    """diffs two versions of a file.

    data1 and data2 are tuples containg:

        * ctx: changeset for the file
        * fctx: file context for that file
        * path1: name of the file
        * flag: flags of the file
        * content: full content of the file (can be null in case of binary)
        * date: date of the changeset

    header: the patch header
    binary: whether the any of the version of file is binary or not
    opts:   user passed options

    It exists as a separate function so that extensions like extdiff can wrap
    it and use the file content directly.
    """

    ctx1, fctx1, path1, flag1, content1, date1 = data1
    ctx2, fctx2, path2, flag2, content2, date2 = data2
    index1 = _gitindex(content1) if path1 in ctx1 else sha1nodeconstants.nullhex
    index2 = _gitindex(content2) if path2 in ctx2 else sha1nodeconstants.nullhex
    if binary and opts.git and not opts.nobinary:
        text = mdiff.b85diff(content1, content2)
        if text:
            header.append(b'index %s..%s' % (index1, index2))
        hunks = ((None, [text]),)
    else:
        if opts.git and opts.index > 0:
            flag = flag1
            if flag is None:
                flag = flag2
            header.append(
                b'index %s..%s %s'
                % (
                    index1[0 : opts.index],
                    index2[0 : opts.index],
                    _gitmode[flag],
                )
            )

        uheaders, hunks = mdiff.unidiff(
            content1,
            date1,
            content2,
            date2,
            path1,
            path2,
            binary=binary,
            opts=opts,
        )
        header.extend(uheaders)
    return fctx1, fctx2, header, hunks


def diffstatsum(stats):
    maxfile, maxtotal, addtotal, removetotal, binary = 0, 0, 0, 0, False
    for f, a, r, b in stats:
        maxfile = max(maxfile, encoding.colwidth(f))
        maxtotal = max(maxtotal, a + r)
        addtotal += a
        removetotal += r
        binary = binary or b

    return maxfile, maxtotal, addtotal, removetotal, binary


def diffstatdata(lines):
    diffre = re.compile(br'^diff .*-r [a-z0-9]+\s(.*)$')

    results = []
    filename, adds, removes, isbinary = None, 0, 0, False

    def addresult():
        if filename:
            results.append((filename, adds, removes, isbinary))

    # inheader is used to track if a line is in the
    # header portion of the diff.  This helps properly account
    # for lines that start with '--' or '++'
    inheader = False

    for line in lines:
        if line.startswith(b'diff'):
            addresult()
            # starting a new file diff
            # set numbers to 0 and reset inheader
            inheader = True
            adds, removes, isbinary = 0, 0, False
            if line.startswith(b'diff --git a/'):
                filename = gitre.search(line).group(2)
            elif line.startswith(b'diff -r'):
                # format: "diff -r ... -r ... filename"
                filename = diffre.search(line).group(1)
        elif line.startswith(b'@@'):
            inheader = False
        elif line.startswith(b'+') and not inheader:
            adds += 1
        elif line.startswith(b'-') and not inheader:
            removes += 1
        elif line.startswith(b'GIT binary patch') or line.startswith(
            b'Binary file'
        ):
            isbinary = True
        elif line.startswith(b'rename from'):
            filename = line[12:]
        elif line.startswith(b'rename to'):
            filename += b' => %s' % line[10:]
    addresult()
    return results


def diffstat(lines, width=80):
    output = []
    stats = diffstatdata(lines)
    maxname, maxtotal, totaladds, totalremoves, hasbinary = diffstatsum(stats)

    countwidth = len(str(maxtotal))
    if hasbinary and countwidth < 3:
        countwidth = 3
    graphwidth = width - countwidth - maxname - 6
    if graphwidth < 10:
        graphwidth = 10

    def scale(i):
        if maxtotal <= graphwidth:
            return i
        # If diffstat runs out of room it doesn't print anything,
        # which isn't very useful, so always print at least one + or -
        # if there were at least some changes.
        return max(i * graphwidth // maxtotal, int(bool(i)))

    for filename, adds, removes, isbinary in stats:
        if isbinary:
            count = b'Bin'
        else:
            count = b'%d' % (adds + removes)
        pluses = b'+' * scale(adds)
        minuses = b'-' * scale(removes)
        output.append(
            b' %s%s |  %*s %s%s\n'
            % (
                filename,
                b' ' * (maxname - encoding.colwidth(filename)),
                countwidth,
                count,
                pluses,
                minuses,
            )
        )

    if stats:
        output.append(
            _(b' %d files changed, %d insertions(+), %d deletions(-)\n')
            % (len(stats), totaladds, totalremoves)
        )

    return b''.join(output)


def diffstatui(*args, **kw):
    """like diffstat(), but yields 2-tuples of (output, label) for
    ui.write()
    """

    for line in diffstat(*args, **kw).splitlines():
        if line and line[-1] in b'+-':
            name, graph = line.rsplit(b' ', 1)
            yield (name + b' ', b'')
            m = re.search(br'\++', graph)
            if m:
                yield (m.group(0), b'diffstat.inserted')
            m = re.search(br'-+', graph)
            if m:
                yield (m.group(0), b'diffstat.deleted')
        else:
            yield (line, b'')
        yield (b'\n', b'')
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          usr/lib/python3/dist-packages/mercurial/pathutil.py                                                 0000644 0000000 0000000 00000030230 14355257011 021136  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        import contextlib
import errno
import os
import posixpath
import stat

from .i18n import _
from . import (
    encoding,
    error,
    policy,
    pycompat,
    util,
)

if pycompat.TYPE_CHECKING:
    from typing import (
        Any,
        Callable,
        Iterator,
        Optional,
    )


rustdirs = policy.importrust('dirstate', 'Dirs')
parsers = policy.importmod('parsers')


def _lowerclean(s):
    # type: (bytes) -> bytes
    return encoding.hfsignoreclean(s.lower())


class pathauditor:
    """ensure that a filesystem path contains no banned components.
    the following properties of a path are checked:

    - ends with a directory separator
    - under top-level .hg
    - starts at the root of a windows drive
    - contains ".."

    More check are also done about the file system states:
    - traverses a symlink (e.g. a/symlink_here/b)
    - inside a nested repository (a callback can be used to approve
      some nested repositories, e.g., subrepositories)

    The file system checks are only done when 'realfs' is set to True (the
    default). They should be disable then we are auditing path for operation on
    stored history.

    If 'cached' is set to True, audited paths and sub-directories are cached.
    Be careful to not keep the cache of unmanaged directories for long because
    audited paths may be replaced with symlinks.
    """

    def __init__(self, root, callback=None, realfs=True, cached=False):
        self.audited = set()
        self.auditeddir = set()
        self.root = root
        self._realfs = realfs
        self._cached = cached
        self.callback = callback
        if os.path.lexists(root) and not util.fscasesensitive(root):
            self.normcase = util.normcase
        else:
            self.normcase = lambda x: x

    def __call__(self, path, mode=None):
        # type: (bytes, Optional[Any]) -> None
        """Check the relative path.
        path may contain a pattern (e.g. foodir/**.txt)"""

        path = util.localpath(path)
        normpath = self.normcase(path)
        if normpath in self.audited:
            return
        # AIX ignores "/" at end of path, others raise EISDIR.
        if util.endswithsep(path):
            raise error.InputError(
                _(b"path ends in directory separator: %s") % path
            )
        parts = util.splitpath(path)
        if (
            os.path.splitdrive(path)[0]
            or _lowerclean(parts[0]) in (b'.hg', b'.hg.', b'')
            or pycompat.ospardir in parts
        ):
            raise error.InputError(
                _(b"path contains illegal component: %s") % path
            )
        # Windows shortname aliases
        for p in parts:
            if b"~" in p:
                first, last = p.split(b"~", 1)
                if last.isdigit() and first.upper() in [b"HG", b"HG8B6C"]:
                    raise error.InputError(
                        _(b"path contains illegal component: %s") % path
                    )
        if b'.hg' in _lowerclean(path):
            lparts = [_lowerclean(p) for p in parts]
            for p in b'.hg', b'.hg.':
                if p in lparts[1:]:
                    pos = lparts.index(p)
                    base = os.path.join(*parts[:pos])
                    raise error.InputError(
                        _(b"path '%s' is inside nested repo %r")
                        % (path, pycompat.bytestr(base))
                    )

        normparts = util.splitpath(normpath)
        assert len(parts) == len(normparts)

        parts.pop()
        normparts.pop()
        # It's important that we check the path parts starting from the root.
        # We don't want to add "foo/bar/baz" to auditeddir before checking if
        # there's a "foo/.hg" directory. This also means we won't accidentally
        # traverse a symlink into some other filesystem (which is potentially
        # expensive to access).
        for i in range(len(parts)):
            prefix = pycompat.ossep.join(parts[: i + 1])
            normprefix = pycompat.ossep.join(normparts[: i + 1])
            if normprefix in self.auditeddir:
                continue
            if self._realfs:
                self._checkfs(prefix, path)
            if self._cached:
                self.auditeddir.add(normprefix)

        if self._cached:
            self.audited.add(normpath)

    def _checkfs(self, prefix, path):
        # type: (bytes, bytes) -> None
        """raise exception if a file system backed check fails"""
        curpath = os.path.join(self.root, prefix)
        try:
            st = os.lstat(curpath)
        except OSError as err:
            # EINVAL can be raised as invalid path syntax under win32.
            # They must be ignored for patterns can be checked too.
            if err.errno not in (errno.ENOENT, errno.ENOTDIR, errno.EINVAL):
                raise
        else:
            if stat.S_ISLNK(st.st_mode):
                msg = _(b'path %r traverses symbolic link %r') % (
                    pycompat.bytestr(path),
                    pycompat.bytestr(prefix),
                )
                raise error.Abort(msg)
            elif stat.S_ISDIR(st.st_mode) and os.path.isdir(
                os.path.join(curpath, b'.hg')
            ):
                if not self.callback or not self.callback(curpath):
                    msg = _(b"path '%s' is inside nested repo %r")
                    raise error.Abort(msg % (path, pycompat.bytestr(prefix)))

    def check(self, path):
        # type: (bytes) -> bool
        try:
            self(path)
            return True
        except (OSError, error.Abort):
            return False

    @contextlib.contextmanager
    def cached(self):
        if self._cached:
            yield
        else:
            try:
                self._cached = True
                yield
            finally:
                self.audited.clear()
                self.auditeddir.clear()
                self._cached = False


def canonpath(root, cwd, myname, auditor=None):
    # type: (bytes, bytes, bytes, Optional[pathauditor]) -> bytes
    """return the canonical path of myname, given cwd and root

    >>> def check(root, cwd, myname):
    ...     a = pathauditor(root, realfs=False)
    ...     try:
    ...         return canonpath(root, cwd, myname, a)
    ...     except error.Abort:
    ...         return 'aborted'
    >>> def unixonly(root, cwd, myname, expected='aborted'):
    ...     if pycompat.iswindows:
    ...         return expected
    ...     return check(root, cwd, myname)
    >>> def winonly(root, cwd, myname, expected='aborted'):
    ...     if not pycompat.iswindows:
    ...         return expected
    ...     return check(root, cwd, myname)
    >>> winonly(b'd:\\\\repo', b'c:\\\\dir', b'filename')
    'aborted'
    >>> winonly(b'c:\\\\repo', b'c:\\\\dir', b'filename')
    'aborted'
    >>> winonly(b'c:\\\\repo', b'c:\\\\', b'filename')
    'aborted'
    >>> winonly(b'c:\\\\repo', b'c:\\\\', b'repo\\\\filename',
    ...         b'filename')
    'filename'
    >>> winonly(b'c:\\\\repo', b'c:\\\\repo', b'filename', b'filename')
    'filename'
    >>> winonly(b'c:\\\\repo', b'c:\\\\repo\\\\subdir', b'filename',
    ...         b'subdir/filename')
    'subdir/filename'
    >>> unixonly(b'/repo', b'/dir', b'filename')
    'aborted'
    >>> unixonly(b'/repo', b'/', b'filename')
    'aborted'
    >>> unixonly(b'/repo', b'/', b'repo/filename', b'filename')
    'filename'
    >>> unixonly(b'/repo', b'/repo', b'filename', b'filename')
    'filename'
    >>> unixonly(b'/repo', b'/repo/subdir', b'filename', b'subdir/filename')
    'subdir/filename'
    """
    if util.endswithsep(root):
        rootsep = root
    else:
        rootsep = root + pycompat.ossep
    name = myname
    if not os.path.isabs(name):
        name = os.path.join(root, cwd, name)
    name = os.path.normpath(name)
    if auditor is None:
        auditor = pathauditor(root)
    if name != rootsep and name.startswith(rootsep):
        name = name[len(rootsep) :]
        auditor(name)
        return util.pconvert(name)
    elif name == root:
        return b''
    else:
        # Determine whether `name' is in the hierarchy at or beneath `root',
        # by iterating name=dirname(name) until that causes no change (can't
        # check name == '/', because that doesn't work on windows). The list
        # `rel' holds the reversed list of components making up the relative
        # file name we want.
        rel = []
        while True:
            try:
                s = util.samefile(name, root)
            except OSError:
                s = False
            if s:
                if not rel:
                    # name was actually the same as root (maybe a symlink)
                    return b''
                rel.reverse()
                name = os.path.join(*rel)
                auditor(name)
                return util.pconvert(name)
            dirname, basename = util.split(name)
            rel.append(basename)
            if dirname == name:
                break
            name = dirname

        # A common mistake is to use -R, but specify a file relative to the repo
        # instead of cwd.  Detect that case, and provide a hint to the user.
        hint = None
        try:
            if cwd != root:
                canonpath(root, root, myname, auditor)
                relpath = util.pathto(root, cwd, b'')
                if relpath.endswith(pycompat.ossep):
                    relpath = relpath[:-1]
                hint = _(b"consider using '--cwd %s'") % relpath
        except error.Abort:
            pass

        raise error.Abort(
            _(b"%s not under root '%s'") % (myname, root), hint=hint
        )


def normasprefix(path):
    # type: (bytes) -> bytes
    """normalize the specified path as path prefix

    Returned value can be used safely for "p.startswith(prefix)",
    "p[len(prefix):]", and so on.

    For efficiency, this expects "path" argument to be already
    normalized by "os.path.normpath", "os.path.realpath", and so on.

    See also issue3033 for detail about need of this function.

    >>> normasprefix(b'/foo/bar').replace(pycompat.ossep, b'/')
    '/foo/bar/'
    >>> normasprefix(b'/').replace(pycompat.ossep, b'/')
    '/'
    """
    d, p = os.path.splitdrive(path)
    if len(p) != len(pycompat.ossep):
        return path + pycompat.ossep
    else:
        return path


def finddirs(path):
    # type: (bytes) -> Iterator[bytes]
    pos = path.rfind(b'/')
    while pos != -1:
        yield path[:pos]
        pos = path.rfind(b'/', 0, pos)
    yield b''


class dirs:
    '''a multiset of directory names from a set of file paths'''

    def __init__(self, map, only_tracked=False):
        """
        a dict map indicates a dirstate while a list indicates a manifest
        """
        self._dirs = {}
        addpath = self.addpath
        if isinstance(map, dict) and only_tracked:
            for f, s in map.items():
                if s.state != b'r':
                    addpath(f)
        elif only_tracked:
            msg = b"`only_tracked` is only supported with a dict source"
            raise error.ProgrammingError(msg)
        else:
            for f in map:
                addpath(f)

    def addpath(self, path):
        # type: (bytes) -> None
        dirs = self._dirs
        for base in finddirs(path):
            if base.endswith(b'/'):
                raise ValueError(
                    "found invalid consecutive slashes in path: %r" % base
                )
            if base in dirs:
                dirs[base] += 1
                return
            dirs[base] = 1

    def delpath(self, path):
        # type: (bytes) -> None
        dirs = self._dirs
        for base in finddirs(path):
            if dirs[base] > 1:
                dirs[base] -= 1
                return
            del dirs[base]

    def __iter__(self):
        return iter(self._dirs)

    def __contains__(self, d):
        # type: (bytes) -> bool
        return d in self._dirs


if util.safehasattr(parsers, 'dirs'):
    dirs = parsers.dirs

if rustdirs is not None:
    dirs = rustdirs


# forward two methods from posixpath that do what we need, but we'd
# rather not let our internals know that we're thinking in posix terms
# - instead we'll let them be oblivious.
join = posixpath.join
dirname = posixpath.dirname  # type: Callable[[bytes], bytes]
                                                                                                                                                                                                                                                                                                                                                                        usr/lib/python3/dist-packages/mercurial/phases.py                                                   0000644 0000000 0000000 00000100770 14355257011 020576  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        """ Mercurial phases support code

    ---

    Copyright 2011 Pierre-Yves David <pierre-yves.david@ens-lyon.org>
                   Logilab SA        <contact@logilab.fr>
                   Augie Fackler     <durin42@gmail.com>

    This software may be used and distributed according to the terms
    of the GNU General Public License version 2 or any later version.

    ---

This module implements most phase logic in mercurial.


Basic Concept
=============

A 'changeset phase' is an indicator that tells us how a changeset is
manipulated and communicated. The details of each phase is described
below, here we describe the properties they have in common.

Like bookmarks, phases are not stored in history and thus are not
permanent and leave no audit trail.

First, no changeset can be in two phases at once. Phases are ordered,
so they can be considered from lowest to highest. The default, lowest
phase is 'public' - this is the normal phase of existing changesets. A
child changeset can not be in a lower phase than its parents.

These phases share a hierarchy of traits:

            immutable shared
    public:     X        X
    draft:               X
    secret:

Local commits are draft by default.

Phase Movement and Exchange
===========================

Phase data is exchanged by pushkey on pull and push. Some servers have
a publish option set, we call such a server a "publishing server".
Pushing a draft changeset to a publishing server changes the phase to
public.

A small list of fact/rules define the exchange of phase:

* old client never changes server states
* pull never changes server states
* publish and old server changesets are seen as public by client
* any secret changeset seen in another repository is lowered to at
  least draft

Here is the final table summing up the 49 possible use cases of phase
exchange:

                           server
                  old     publish      non-publish
                 N   X    N   D   P    N   D   P
    old client
    pull
     N           -   X/X  -   X/D X/P  -   X/D X/P
     X           -   X/X  -   X/D X/P  -   X/D X/P
    push
     X           X/X X/X  X/P X/P X/P  X/D X/D X/P
    new client
    pull
     N           -   P/X  -   P/D P/P  -   D/D P/P
     D           -   P/X  -   P/D P/P  -   D/D P/P
     P           -   P/X  -   P/D P/P  -   P/D P/P
    push
     D           P/X P/X  P/P P/P P/P  D/D D/D P/P
     P           P/X P/X  P/P P/P P/P  P/P P/P P/P

Legend:

    A/B = final state on client / state on server

    * N = new/not present,
    * P = public,
    * D = draft,
    * X = not tracked (i.e., the old client or server has no internal
          way of recording the phase.)

    passive = only pushes


    A cell here can be read like this:

    "When a new client pushes a draft changeset (D) to a publishing
    server where it's not present (N), it's marked public on both
    sides (P/P)."

Note: old client behave as a publishing server with draft only content
- other people see it as public
- content is pushed as draft

"""


import struct

from .i18n import _
from .node import (
    bin,
    hex,
    nullrev,
    short,
    wdirrev,
)
from .pycompat import (
    getattr,
    setattr,
)
from . import (
    error,
    pycompat,
    requirements,
    smartset,
    txnutil,
    util,
)

if pycompat.TYPE_CHECKING:
    from typing import (
        Any,
        Callable,
        Dict,
        Iterable,
        List,
        Optional,
        Set,
        Tuple,
    )
    from . import (
        localrepo,
        ui as uimod,
    )

    Phaseroots = Dict[int, Set[bytes]]
    Phasedefaults = List[
        Callable[[localrepo.localrepository, Phaseroots], Phaseroots]
    ]


_fphasesentry = struct.Struct(b'>i20s')

# record phase index
public, draft, secret = range(3)  # type: int
archived = 32  # non-continuous for compatibility
internal = 96  # non-continuous for compatibility
allphases = (public, draft, secret, archived, internal)
trackedphases = (draft, secret, archived, internal)
# record phase names
cmdphasenames = [b'public', b'draft', b'secret']  # known to `hg phase` command
phasenames = dict(enumerate(cmdphasenames))
phasenames[archived] = b'archived'
phasenames[internal] = b'internal'
# map phase name to phase number
phasenumber = {name: phase for phase, name in phasenames.items()}
# like phasenumber, but also include maps for the numeric and binary
# phase number to the phase number
phasenumber2 = phasenumber.copy()
phasenumber2.update({phase: phase for phase in phasenames})
phasenumber2.update({b'%i' % phase: phase for phase in phasenames})
# record phase property
mutablephases = (draft, secret, archived, internal)
remotehiddenphases = (secret, archived, internal)
localhiddenphases = (internal, archived)


def supportinternal(repo):
    # type: (localrepo.localrepository) -> bool
    """True if the internal phase can be used on a repository"""
    return requirements.INTERNAL_PHASE_REQUIREMENT in repo.requirements


def supportarchived(repo):
    # type: (localrepo.localrepository) -> bool
    """True if the archived phase can be used on a repository"""
    return requirements.ARCHIVED_PHASE_REQUIREMENT in repo.requirements


def _readroots(repo, phasedefaults=None):
    # type: (localrepo.localrepository, Optional[Phasedefaults]) -> Tuple[Phaseroots, bool]
    """Read phase roots from disk

    phasedefaults is a list of fn(repo, roots) callable, which are
    executed if the phase roots file does not exist. When phases are
    being initialized on an existing repository, this could be used to
    set selected changesets phase to something else than public.

    Return (roots, dirty) where dirty is true if roots differ from
    what is being stored.
    """
    repo = repo.unfiltered()
    dirty = False
    roots = {i: set() for i in allphases}
    try:
        f, pending = txnutil.trypending(repo.root, repo.svfs, b'phaseroots')
        try:
            for line in f:
                phase, nh = line.split()
                roots[int(phase)].add(bin(nh))
        finally:
            f.close()
    except FileNotFoundError:
        if phasedefaults:
            for f in phasedefaults:
                roots = f(repo, roots)
        dirty = True
    return roots, dirty


def binaryencode(phasemapping):
    # type: (Dict[int, List[bytes]]) -> bytes
    """encode a 'phase -> nodes' mapping into a binary stream

    The revision lists are encoded as (phase, root) pairs.
    """
    binarydata = []
    for phase, nodes in phasemapping.items():
        for head in nodes:
            binarydata.append(_fphasesentry.pack(phase, head))
    return b''.join(binarydata)


def binarydecode(stream):
    # type: (...) -> Dict[int, List[bytes]]
    """decode a binary stream into a 'phase -> nodes' mapping

    The (phase, root) pairs are turned back into a dictionary with
    the phase as index and the aggregated roots of that phase as value."""
    headsbyphase = {i: [] for i in allphases}
    entrysize = _fphasesentry.size
    while True:
        entry = stream.read(entrysize)
        if len(entry) < entrysize:
            if entry:
                raise error.Abort(_(b'bad phase-heads stream'))
            break
        phase, node = _fphasesentry.unpack(entry)
        headsbyphase[phase].append(node)
    return headsbyphase


def _sortedrange_insert(data, idx, rev, t):
    merge_before = False
    if idx:
        r1, t1 = data[idx - 1]
        merge_before = r1[-1] + 1 == rev and t1 == t
    merge_after = False
    if idx < len(data):
        r2, t2 = data[idx]
        merge_after = r2[0] == rev + 1 and t2 == t

    if merge_before and merge_after:
        data[idx - 1] = (range(r1[0], r2[-1] + 1), t)
        data.pop(idx)
    elif merge_before:
        data[idx - 1] = (range(r1[0], rev + 1), t)
    elif merge_after:
        data[idx] = (range(rev, r2[-1] + 1), t)
    else:
        data.insert(idx, (range(rev, rev + 1), t))


def _sortedrange_split(data, idx, rev, t):
    r1, t1 = data[idx]
    if t == t1:
        return
    t = (t1[0], t[1])
    if len(r1) == 1:
        data.pop(idx)
        _sortedrange_insert(data, idx, rev, t)
    elif r1[0] == rev:
        data[idx] = (range(rev + 1, r1[-1] + 1), t1)
        _sortedrange_insert(data, idx, rev, t)
    elif r1[-1] == rev:
        data[idx] = (range(r1[0], rev), t1)
        _sortedrange_insert(data, idx + 1, rev, t)
    else:
        data[idx : idx + 1] = [
            (range(r1[0], rev), t1),
            (range(rev, rev + 1), t),
            (range(rev + 1, r1[-1] + 1), t1),
        ]


def _trackphasechange(data, rev, old, new):
    """add a phase move to the <data> list of ranges

    If data is None, nothing happens.
    """
    if data is None:
        return

    # If data is empty, create a one-revision range and done
    if not data:
        data.insert(0, (range(rev, rev + 1), (old, new)))
        return

    low = 0
    high = len(data)
    t = (old, new)
    while low < high:
        mid = (low + high) // 2
        revs = data[mid][0]
        revs_low = revs[0]
        revs_high = revs[-1]

        if rev >= revs_low and rev <= revs_high:
            _sortedrange_split(data, mid, rev, t)
            return

        if revs_low == rev + 1:
            if mid and data[mid - 1][0][-1] == rev:
                _sortedrange_split(data, mid - 1, rev, t)
            else:
                _sortedrange_insert(data, mid, rev, t)
            return

        if revs_high == rev - 1:
            if mid + 1 < len(data) and data[mid + 1][0][0] == rev:
                _sortedrange_split(data, mid + 1, rev, t)
            else:
                _sortedrange_insert(data, mid + 1, rev, t)
            return

        if revs_low > rev:
            high = mid
        else:
            low = mid + 1

    if low == len(data):
        data.append((range(rev, rev + 1), t))
        return

    r1, t1 = data[low]
    if r1[0] > rev:
        data.insert(low, (range(rev, rev + 1), t))
    else:
        data.insert(low + 1, (range(rev, rev + 1), t))


class phasecache:
    def __init__(self, repo, phasedefaults, _load=True):
        # type: (localrepo.localrepository, Optional[Phasedefaults], bool) -> None
        if _load:
            # Cheap trick to allow shallow-copy without copy module
            self.phaseroots, self.dirty = _readroots(repo, phasedefaults)
            self._loadedrevslen = 0
            self._phasesets = None
            self.filterunknown(repo)
            self.opener = repo.svfs

    def hasnonpublicphases(self, repo):
        # type: (localrepo.localrepository) -> bool
        """detect if there are revisions with non-public phase"""
        repo = repo.unfiltered()
        cl = repo.changelog
        if len(cl) >= self._loadedrevslen:
            self.invalidate()
            self.loadphaserevs(repo)
        return any(
            revs for phase, revs in self.phaseroots.items() if phase != public
        )

    def nonpublicphaseroots(self, repo):
