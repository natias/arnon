        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="PixbufAnimationIterClass"
            c:type="GdkPixbufAnimationIterClass"
            glib:is-gtype-struct-for="PixbufAnimationIter">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-animation.h"
           line="168">Modules supporting animations must derive a type from
#GdkPixbufAnimationIter, providing suitable implementations of the
virtual functions.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                       line="208"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-animation.h"
             line="170">the parent class</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_delay_time">
        <callback name="get_delay_time">
          <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                           line="200"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="749">delay time in milliseconds (thousandths of a second)</doc>
            <type name="gint" c:type="int"/>
          </return-value>
          <parameters>
            <parameter name="iter" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                   line="737">an animation iterator</doc>
              <type name="PixbufAnimationIter"
                    c:type="GdkPixbufAnimationIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_pixbuf">
        <callback name="get_pixbuf">
          <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                           line="202"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="780">the pixbuf to be displayed</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </return-value>
          <parameters>
            <parameter name="iter" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                   line="762">an animation iterator</doc>
              <type name="PixbufAnimationIter"
                    c:type="GdkPixbufAnimationIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="on_currently_loading_frame">
        <callback name="on_currently_loading_frame">
          <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                           line="204"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="802">`TRUE` if the frame we're on is partially loaded, or the last frame</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="iter" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                   line="793">a #GdkPixbufAnimationIter</doc>
              <type name="PixbufAnimationIter"
                    c:type="GdkPixbufAnimationIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="advance">
        <callback name="advance">
          <source-position filename="gdk-pixbuf/gdk-pixbuf-animation.h"
                           line="206"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                 line="840">`TRUE` if the image may need updating</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="iter" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                   line="815">a #GdkPixbufAnimationIter</doc>
              <type name="PixbufAnimationIter"
                    c:type="GdkPixbufAnimationIter*"/>
            </parameter>
            <parameter name="current_time"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="gdk-pixbuf/gdk-pixbuf-animation.c"
                   line="816">current time</doc>
              <type name="GLib.TimeVal" c:type="const GTimeVal*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="PixbufDestroyNotify" c:type="GdkPixbufDestroyNotify">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-core.h"
           line="96">A function of this type is responsible for freeing the pixel array
of a pixbuf.

The gdk_pixbuf_new_from_data() function lets you pass in a pre-allocated
pixel array so that a pixbuf can be created from it; in this case you
will need to pass in a function of type `GdkPixbufDestroyNotify` so that
the pixel data can be freed when the pixbuf is finalized.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="110"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pixels" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-core.h"
               line="98">The pixel array of the pixbuf
  that is being finalized.</doc>
          <array zero-terminated="0" c:type="guchar*">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-core.h"
               line="100">User closure data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="PixbufError"
                 glib:type-name="GdkPixbufError"
                 glib:get-type="gdk_pixbuf_error_get_type"
                 c:type="GdkPixbufError"
                 glib:error-domain="gdk-pixbuf-error-quark">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-core.h"
           line="123">An error code in the `GDK_PIXBUF_ERROR` domain.

Many gdk-pixbuf operations can cause errors in this domain, or in
the `G_FILE_ERROR` domain.</doc>
      <member name="corrupt_image"
              value="0"
              c:identifier="GDK_PIXBUF_ERROR_CORRUPT_IMAGE"
              glib:nick="corrupt-image"
              glib:name="GDK_PIXBUF_ERROR_CORRUPT_IMAGE">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-core.h"
             line="125">An image file was broken somehow.</doc>
      </member>
      <member name="insufficient_memory"
              value="1"
              c:identifier="GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY"
              glib:nick="insufficient-memory"
              glib:name="GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-core.h"
             line="126">Not enough memory.</doc>
      </member>
      <member name="bad_option"
              value="2"
              c:identifier="GDK_PIXBUF_ERROR_BAD_OPTION"
              glib:nick="bad-option"
              glib:name="GDK_PIXBUF_ERROR_BAD_OPTION">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-core.h"
             line="127">A bad option was passed to a pixbuf save module.</doc>
      </member>
      <member name="unknown_type"
              value="3"
              c:identifier="GDK_PIXBUF_ERROR_UNKNOWN_TYPE"
              glib:nick="unknown-type"
              glib:name="GDK_PIXBUF_ERROR_UNKNOWN_TYPE">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-core.h"
             line="128">Unknown image type.</doc>
      </member>
      <member name="unsupported_operation"
              value="4"
              c:identifier="GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION"
              glib:nick="unsupported-operation"
              glib:name="GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-core.h"
             line="129">Don't know how to perform the
 given operation on the type of image at hand.</doc>
      </member>
      <member name="failed"
              value="5"
              c:identifier="GDK_PIXBUF_ERROR_FAILED"
              glib:nick="failed"
              glib:name="GDK_PIXBUF_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-core.h"
             line="131">Generic failure code, something went wrong.</doc>
      </member>
      <member name="incomplete_animation"
              value="6"
              c:identifier="GDK_PIXBUF_ERROR_INCOMPLETE_ANIMATION"
              glib:nick="incomplete-animation"
              glib:name="GDK_PIXBUF_ERROR_INCOMPLETE_ANIMATION">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-core.h"
             line="132">Only part of the animation was loaded.</doc>
      </member>
      <function name="quark" c:identifier="gdk_pixbuf_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <record name="PixbufFormat"
            c:type="GdkPixbufFormat"
            version="2.2"
            glib:type-name="GdkPixbufFormat"
            glib:get-type="gdk_pixbuf_format_get_type"
            c:symbol-prefix="pixbuf_format">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="443">A `GdkPixbufFormat` contains information about the image format accepted
by a module.

Only modules should access the fields directly, applications should
use the `gdk_pixbuf_format_*` family of functions.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="475"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="445">the name of the image format</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="signature" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="446">the signature of the module</doc>
        <type name="PixbufModulePattern" c:type="GdkPixbufModulePattern*"/>
      </field>
      <field name="domain" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="447">the message domain for the `description`</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="description" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="448">a description of the image format</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="mime_types" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="449">the MIME types for the image format</doc>
        <array c:type="gchar**">
          <type name="utf8" c:type="gchar*"/>
        </array>
      </field>
      <field name="extensions" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="450">typical filename extensions for the
  image format</doc>
        <array c:type="gchar**">
          <type name="utf8" c:type="gchar*"/>
        </array>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="452">a combination of `GdkPixbufFormatFlags`</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="disabled" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="453">a boolean determining whether the loader is disabled`</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="license" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="454">a string containing license information, typically set to
  shorthands like "GPL", "LGPL", etc.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <method name="copy" c:identifier="gdk_pixbuf_format_copy" version="2.22">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="3452">Creates a copy of `format`.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="3458">the newly allocated copy of a `GdkPixbufFormat`. Use
  gdk_pixbuf_format_free() to free the resources when done</doc>
          <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3454">a pixbuf format</doc>
            <type name="PixbufFormat" c:type="const GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gdk_pixbuf_format_free" version="2.22">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="3472">Frees the resources allocated when copying a `GdkPixbufFormat`
using gdk_pixbuf_format_copy()</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3474">a pixbuf format</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="gdk_pixbuf_format_get_description"
              version="2.2">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="3249">Returns a description of the format.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="3255">a description of the format.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3251">a `GdkPixbufFormat`</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extensions"
              c:identifier="gdk_pixbuf_format_get_extensions"
              version="2.2">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="3293">Returns the filename extensions typically used for files in the
given format.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="3300">an array of
  filename extensions</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3295">a `GdkPixbufFormat`</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_license"
              c:identifier="gdk_pixbuf_format_get_license"
              version="2.6">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="3397">Returns information about the license of the image loader for the format.

The returned string should be a shorthand for a well known license, e.g.
"LGPL", "GPL", "QPL", "GPL/QPL", or "other" to indicate some other license.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="3406">a string describing the license of the pixbuf format</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3399">a pixbuf format</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mime_types"
              c:identifier="gdk_pixbuf_format_get_mime_types"
              version="2.2">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="3275">Returns the mime types supported by the format.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="3281">an array of mime types</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3277">a `GdkPixbufFormat`</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="gdk_pixbuf_format_get_name"
              version="2.2">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="3231">Returns the name of the format.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="3237">the name of the format.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3233">a `GdkPixbufFormat`</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_disabled"
              c:identifier="gdk_pixbuf_format_is_disabled"
              version="2.6">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="3353">Returns whether this image format is disabled.

See gdk_pixbuf_format_set_disabled().</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="3361">whether this image format is disabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3355">a `GdkPixbufFormat`</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_save_option_supported"
              c:identifier="gdk_pixbuf_format_is_save_option_supported"
              version="2.36">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="3488">Returns `TRUE` if the save option specified by @option_key is supported when
saving a pixbuf using the module implementing @format.

See gdk_pixbuf_save() for more information about option keys.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="3498">`TRUE` if the specified option is supported</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3490">a pixbuf format</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
          <parameter name="option_key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3491">the name of an option</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_scalable"
              c:identifier="gdk_pixbuf_format_is_scalable"
              version="2.6">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="3331">Returns whether this image format is scalable.

If a file is in a scalable format, it is preferable to load it at
the desired size, rather than loading it at the default size and
scaling the resulting pixbuf to the desired size.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="3341">whether this image format is scalable.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3333">a `GdkPixbufFormat`</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_writable"
              c:identifier="gdk_pixbuf_format_is_writable"
              version="2.2">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="3313">Returns whether pixbufs can be saved in the given format.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="3319">whether pixbufs can be saved in the given format.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3315">a `GdkPixbufFormat`</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_disabled"
              c:identifier="gdk_pixbuf_format_set_disabled"
              version="2.6">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="3373">Disables or enables an image format.

If a format is disabled, GdkPixbuf won't use the image loader for
this format to load images.

Applications can use this to avoid using image loaders with an
inappropriate license, see gdk_pixbuf_format_get_license().</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3375">a `GdkPixbufFormat`</doc>
            <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
          </instance-parameter>
          <parameter name="disabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3376">`TRUE` to disable the format @format</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="PixbufFormatFlags"
              version="2.2"
              c:type="GdkPixbufFormatFlags">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-io.h"
           line="424">Flags which allow a module to specify further details about the supported
operations.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="441"/>
      <member name="writable"
              value="1"
              c:identifier="GDK_PIXBUF_FORMAT_WRITABLE">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="426">the module can write out images in the format.</doc>
      </member>
      <member name="scalable"
              value="2"
              c:identifier="GDK_PIXBUF_FORMAT_SCALABLE">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="427">the image format is scalable</doc>
      </member>
      <member name="threadsafe"
              value="4"
              c:identifier="GDK_PIXBUF_FORMAT_THREADSAFE">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.h"
             line="428">the module is threadsafe. gdk-pixbuf
    ignores modules that are not marked as threadsafe. (Since 2.28).</doc>
      </member>
    </bitfield>
    <class name="PixbufLoader"
           c:symbol-prefix="pixbuf_loader"
           c:type="GdkPixbufLoader"
           parent="GObject.Object"
           glib:type-name="GdkPixbufLoader"
           glib:get-type="gdk_pixbuf_loader_get_type"
           glib:type-struct="PixbufLoaderClass">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-loader.c"
           line="34">Incremental image loader.

`GdkPixbufLoader` provides a way for applications to drive the
process of loading an image, by letting them send the image data
directly to the loader instead of having the loader read the data
from a file. Applications can use this functionality instead of
`gdk_pixbuf_new_from_file()` or `gdk_pixbuf_animation_new_from_file()`
when they need to parse image data in small chunks. For example,
it should be used when reading an image from a (potentially) slow
network connection, or when loading an extremely large file.

To use `GdkPixbufLoader` to load an image, create a new instance,
and call [method@GdkPixbuf.PixbufLoader.write] to send the data
to it. When done, [method@GdkPixbuf.PixbufLoader.close] should be
called to end the stream and finalize everything.

The loader will emit three important signals throughout the process:

 - [signal@GdkPixbuf.PixbufLoader::size-prepared] will be emitted as
   soon as the image has enough information to determine the size of
   the image to be used. If you want to scale the image while loading
   it, you can call [method@GdkPixbuf.PixbufLoader.set_size] in
   response to this signal.
 - [signal@GdkPixbuf.PixbufLoader::area-prepared] will be emitted as
   soon as the pixbuf of the desired has been allocated. You can obtain
   the `GdkPixbuf` instance by calling [method@GdkPixbuf.PixbufLoader.get_pixbuf].
   If you want to use it, simply acquire a reference to it. You can
   also call `gdk_pixbuf_loader_get_pixbuf()` later to get the same
   pixbuf.
 - [signal@GdkPixbuf.PixbufLoader::area-updated] will be emitted every
   time a region is updated. This way you can update a partially
   completed image. Note that you do not know anything about the
   completeness of an image from the updated area. For example, in an
   interlaced image you will need to make several passes before the
   image is done loading.

## Loading an animation

Loading an animation is almost as easy as loading an image. Once the
first [signal@GdkPixbuf.PixbufLoader::area-prepared] signal has been
emitted, you can call [method@GdkPixbuf.PixbufLoader.get_animation] to
get the [class@GdkPixbuf.PixbufAnimation] instance, and then call
and [method@GdkPixbuf.PixbufAnimation.get_iter] to get a
[class@GdkPixbuf.PixbufAnimationIter] to retrieve the pixbuf for the
desired time stamp.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h" line="74"/>
      <constructor name="new" c:identifier="gdk_pixbuf_loader_new">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-loader.c"
             line="596">Creates a new pixbuf loader object.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-loader.c"
               line="601">A newly-created pixbuf loader.</doc>
          <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_mime_type"
                   c:identifier="gdk_pixbuf_loader_new_with_mime_type"
                   version="2.4"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-loader.c"
             line="654">Creates a new pixbuf loader object that always attempts to parse
image data as if it were an image of MIME type @mime_type, instead of
identifying the type automatically.

This function is useful if you want an error if the image isn't the
expected MIME type; for loading image formats that can't be reliably
identified by looking at the data; or if the user manually forces a
specific MIME type.

The list of supported mime types depends on what image loaders
are installed, but typically "image/png", "image/jpeg", "image/gif",
"image/tiff" and "image/x-xpixmap" are among the supported mime types.
To obtain the full list of supported mime types, call
gdk_pixbuf_format_get_mime_types() on each of the #GdkPixbufFormat
structs returned by gdk_pixbuf_get_formats().</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h" line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-loader.c"
               line="675">A newly-created pixbuf loader.</doc>
          <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
        </return-value>
        <parameters>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="656">the mime type to be loaded</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_type"
                   c:identifier="gdk_pixbuf_loader_new_with_type"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-loader.c"
             line="609">Creates a new pixbuf loader object that always attempts to parse
image data as if it were an image of type @image_type, instead of
identifying the type automatically.

This function is useful if you want an error if the image isn't the
expected type; for loading image formats that can't be reliably
identified by looking at the data; or if the user manually forces
a specific type.

The list of supported image formats depends on what image loaders
are installed, but typically "png", "jpeg", "gif", "tiff" and
"xpm" are among the supported formats. To obtain the full list of
supported image formats, call gdk_pixbuf_format_get_name() on each
of the #GdkPixbufFormat structs returned by gdk_pixbuf_get_formats().</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h" line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-loader.c"
               line="629">A newly-created pixbuf loader.</doc>
          <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
        </return-value>
        <parameters>
          <parameter name="image_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="611">name of the image format to be loaded with the image</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="area_prepared">
        <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="area_updated">
        <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="closed">
        <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="size_prepared">
        <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="close" c:identifier="gdk_pixbuf_loader_close" throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-loader.c"
             line="803">Informs a pixbuf loader that no further writes with
gdk_pixbuf_loader_write() will occur, so that it can free its
internal loading structures.

This function also tries to parse any data that hasn't yet been parsed;
if the remaining data is partial or corrupt, an error will be returned.

If `FALSE` is returned, `error` will be set to an error from the
`GDK_PIXBUF_ERROR` or `G_FILE_ERROR` domains.

If you're just cancelling a load rather than expecting it to be finished,
passing `NULL` for `error` to ignore it is reasonable.

Remember that this function does not release a reference on the loader, so
you will need to explicitly release any reference you hold.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-loader.c"
               line="824">`TRUE` if all image data written so far was successfully
  passed out via the update_area signal</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="805">A pixbuf loader.</doc>
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_animation"
              c:identifier="gdk_pixbuf_loader_get_animation">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-loader.c"
             line="775">Queries the #GdkPixbufAnimation that a pixbuf loader is currently creating.

In general it only makes sense to call this function after the
[signal@GdkPixbuf.PixbufLoader::area-prepared] signal has been emitted by
the loader.

If the loader doesn't have enough bytes yet, and hasn't emitted the `area-prepared`
signal, this function will return `NULL`.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h" line="102"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-loader.c"
               line="788">The animation that the loader is
  currently loading</doc>
          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="777">A pixbuf loader</doc>
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_format"
              c:identifier="gdk_pixbuf_loader_get_format"
              version="2.2">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-loader.c"
             line="891">Obtains the available information about the format of the
currently loading image file.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h" line="107"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-loader.c"
               line="898">A #GdkPixbufFormat</doc>
          <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="893">A pixbuf loader.</doc>
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixbuf" c:identifier="gdk_pixbuf_loader_get_pixbuf">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-loader.c"
             line="737">Queries the #GdkPixbuf that a pixbuf loader is currently creating.

In general it only makes sense to call this function after the
[signal@GdkPixbuf.PixbufLoader::area-prepared] signal has been
emitted by the loader; this means that enough data has been read
to know the size of the image that will be allocated.

If the loader has not received enough data via gdk_pixbuf_loader_write(),
then this function returns `NULL`.

The returned pixbuf will be the same in all future calls to the loader,
so if you want to keep using it, you should acquire a reference to it.

Additionally, if the loader is an animation, it will return the "static
image" of the animation (see gdk_pixbuf_animation_get_static_image()).</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h" line="100"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-loader.c"
               line="757">The pixbuf that the loader is
  creating</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="739">A pixbuf loader.</doc>
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="gdk_pixbuf_loader_set_size"
              version="2.2">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-loader.c"
             line="260">Causes the image to be scaled while it is loaded.

The desired image size can be determined relative to the original
size of the image by calling gdk_pixbuf_loader_set_size() from a
signal handler for the ::size-prepared signal.

Attempts to set the desired image size  are ignored after the
emission of the ::size-prepared signal.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="262">A pixbuf loader.</doc>
            <type name="PixbufLoader" c:type="GdkPixbufLoader*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="263">The desired width of the image being loaded.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-loader.c"
                 line="264">The desired height of the image being loaded.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="write" c:identifier="gdk_pixbuf_loader_write" throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-loader.c"
             line="506">Parses the next `count` bytes in the given image buffer.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-loader.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-loader.c"
               line="515">`TRUE` if the write was successful, or
  `FALSE` if the loader cannot parse the buffer</doc>
          <type name="gboolean" c:type="gboolean"/>
