PERL_CALLCONV PADOFFSET
Perl_pad_alloc(pTHX_ I32 optype, U32 tmptype);
#define PERL_ARGS_ASSERT_PAD_ALLOC

PERL_CALLCONV void
Perl_pad_block_start(pTHX_ int full)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_PAD_BLOCK_START

PERL_CALLCONV PADOFFSET
Perl_pad_findmy_pv(pTHX_ const char *name, U32 flags);
#define PERL_ARGS_ASSERT_PAD_FINDMY_PV          \
        assert(name)

PERL_CALLCONV PADOFFSET
Perl_pad_findmy_pvn(pTHX_ const char *namepv, STRLEN namelen, U32 flags);
#define PERL_ARGS_ASSERT_PAD_FINDMY_PVN         \
        assert(namepv)

PERL_CALLCONV PADOFFSET
Perl_pad_findmy_sv(pTHX_ SV *name, U32 flags);
#define PERL_ARGS_ASSERT_PAD_FINDMY_SV          \
        assert(name)

PERL_CALLCONV void
Perl_pad_fixup_inner_anons(pTHX_ PADLIST *padlist, CV *old_cv, CV *new_cv)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_PAD_FIXUP_INNER_ANONS  \
        assert(padlist); assert(old_cv); assert(new_cv)

PERL_CALLCONV void
Perl_pad_free(pTHX_ PADOFFSET po)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_PAD_FREE

PERL_CALLCONV OP *
Perl_pad_leavemy(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_PAD_LEAVEMY

PERL_CALLCONV PADLIST *
Perl_pad_new(pTHX_ int flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_PAD_NEW

PERL_CALLCONV void
Perl_pad_push(pTHX_ PADLIST *padlist, int depth);
#define PERL_ARGS_ASSERT_PAD_PUSH               \
        assert(padlist)

PERL_CALLCONV void
Perl_pad_swipe(pTHX_ PADOFFSET po, bool refadjust)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_PAD_SWIPE

PERL_CALLCONV void
Perl_pad_tidy(pTHX_ padtidy_type type);
#define PERL_ARGS_ASSERT_PAD_TIDY

PERL_CALLCONV PAD **
Perl_padlist_store(pTHX_ PADLIST *padlist, I32 key, PAD *val)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_PADLIST_STORE          \
        assert(padlist)

PERL_CALLCONV void
Perl_padname_free(pTHX_ PADNAME *pn);
#define PERL_ARGS_ASSERT_PADNAME_FREE           \
        assert(pn)

PERL_CALLCONV PADNAME *
Perl_padnamelist_fetch(PADNAMELIST *pnl, SSize_t key)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_PADNAMELIST_FETCH      \
        assert(pnl)

PERL_CALLCONV void
Perl_padnamelist_free(pTHX_ PADNAMELIST *pnl);
#define PERL_ARGS_ASSERT_PADNAMELIST_FREE       \
        assert(pnl)

PERL_CALLCONV PADNAME **
Perl_padnamelist_store(pTHX_ PADNAMELIST *pnl, SSize_t key, PADNAME *val);
#define PERL_ARGS_ASSERT_PADNAMELIST_STORE      \
        assert(pnl)

PERL_CALLCONV OP *
Perl_parse_arithexpr(pTHX_ U32 flags);
#define PERL_ARGS_ASSERT_PARSE_ARITHEXPR

PERL_CALLCONV OP *
Perl_parse_barestmt(pTHX_ U32 flags);
#define PERL_ARGS_ASSERT_PARSE_BARESTMT

PERL_CALLCONV OP *
Perl_parse_block(pTHX_ U32 flags);
#define PERL_ARGS_ASSERT_PARSE_BLOCK

PERL_CALLCONV OP *
Perl_parse_fullexpr(pTHX_ U32 flags);
#define PERL_ARGS_ASSERT_PARSE_FULLEXPR

PERL_CALLCONV OP *
Perl_parse_fullstmt(pTHX_ U32 flags);
#define PERL_ARGS_ASSERT_PARSE_FULLSTMT

PERL_CALLCONV SV *
Perl_parse_label(pTHX_ U32 flags);
#define PERL_ARGS_ASSERT_PARSE_LABEL

PERL_CALLCONV OP *
Perl_parse_listexpr(pTHX_ U32 flags);
#define PERL_ARGS_ASSERT_PARSE_LISTEXPR

PERL_CALLCONV OP *
Perl_parse_stmtseq(pTHX_ U32 flags);
#define PERL_ARGS_ASSERT_PARSE_STMTSEQ

PERL_CALLCONV OP *
Perl_parse_subsignature(pTHX_ U32 flags);
#define PERL_ARGS_ASSERT_PARSE_SUBSIGNATURE

PERL_CALLCONV OP *
Perl_parse_termexpr(pTHX_ U32 flags);
#define PERL_ARGS_ASSERT_PARSE_TERMEXPR

PERL_CALLCONV U32
Perl_parse_unicode_opts(pTHX_ const char **popt)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_PARSE_UNICODE_OPTS     \
        assert(popt)

PERL_CALLCONV void
Perl_parser_free(pTHX_ const yy_parser *parser)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_PARSER_FREE            \
        assert(parser)

PERL_CALLCONV void
Perl_peep(pTHX_ OP *o)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_PEEP

PERL_CALLCONV PerlInterpreter *
perl_alloc(void);
#define PERL_ARGS_ASSERT_PERL_ALLOC

PERL_CALLCONV void
perl_construct(PerlInterpreter *my_perl);
#define PERL_ARGS_ASSERT_PERL_CONSTRUCT         \
        assert(my_perl)

PERL_CALLCONV int
perl_destruct(PerlInterpreter *my_perl);
#define PERL_ARGS_ASSERT_PERL_DESTRUCT          \
        assert(my_perl)

PERL_CALLCONV void
perl_free(PerlInterpreter *my_perl);
#define PERL_ARGS_ASSERT_PERL_FREE              \
        assert(my_perl)

PERL_CALLCONV int
perl_parse(PerlInterpreter *my_perl, XSINIT_t xsinit, int argc, char **argv, char **env);
#define PERL_ARGS_ASSERT_PERL_PARSE             \
        assert(my_perl)

PERL_CALLCONV int
perl_run(PerlInterpreter *my_perl);
#define PERL_ARGS_ASSERT_PERL_RUN               \
        assert(my_perl)

PERL_CALLCONV Signal_t
Perl_perly_sighandler(int sig, Siginfo_t *info, void *uap, bool safe);
#define PERL_ARGS_ASSERT_PERLY_SIGHANDLER

/* PERL_CALLCONV const char * const
phase_name(pTHX_ enum perl_phase); */

PERL_CALLCONV void
Perl_pmop_dump(pTHX_ PMOP *pm);
#define PERL_ARGS_ASSERT_PMOP_DUMP

PERL_CALLCONV OP *
Perl_pmruntime(pTHX_ OP *o, OP *expr, OP *repl, UV flags, I32 floor)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_PMRUNTIME              \
        assert(o); assert(expr)

PERL_CALLCONV void
Perl_pop_scope(pTHX);
#define PERL_ARGS_ASSERT_POP_SCOPE

PERL_CALLCONV void
Perl_populate_isa(pTHX_ const char *name, STRLEN len, ...)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_POPULATE_ISA           \
        assert(name)

PERL_CALLCONV REGEXP *
Perl_pregcomp(pTHX_ SV * const pattern, const U32 flags);
#define PERL_ARGS_ASSERT_PREGCOMP               \
        assert(pattern)

PERL_CALLCONV I32
Perl_pregexec(pTHX_ REGEXP * const prog, char *stringarg, char *strend, char *strbeg, SSize_t minend, SV *screamer, U32 nosave);
#define PERL_ARGS_ASSERT_PREGEXEC               \
        assert(prog); assert(stringarg); assert(strend); assert(strbeg); \
        assert(screamer)

PERL_CALLCONV void
Perl_pregfree(pTHX_ REGEXP *r);
#define PERL_ARGS_ASSERT_PREGFREE

PERL_CALLCONV void
Perl_pregfree2(pTHX_ REGEXP *rx);
#define PERL_ARGS_ASSERT_PREGFREE2              \
        assert(rx)

PERL_CALLCONV const char *
Perl_prescan_version(pTHX_ const char *s, bool strict, const char **errstr, bool *sqv, int *ssaw_decimal, int *swidth, bool *salpha);
#define PERL_ARGS_ASSERT_PRESCAN_VERSION        \
        assert(s)

PERL_CALLCONV void *
Perl_ptr_table_fetch(pTHX_ PTR_TBL_t * const tbl, const void * const sv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_PTR_TABLE_FETCH        \
        assert(tbl)

PERL_CALLCONV void
Perl_ptr_table_free(pTHX_ PTR_TBL_t * const tbl);
#define PERL_ARGS_ASSERT_PTR_TABLE_FREE

PERL_CALLCONV PTR_TBL_t *
Perl_ptr_table_new(pTHX)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_PTR_TABLE_NEW

PERL_CALLCONV void
Perl_ptr_table_split(pTHX_ PTR_TBL_t * const tbl);
#define PERL_ARGS_ASSERT_PTR_TABLE_SPLIT        \
        assert(tbl)

PERL_CALLCONV void
Perl_ptr_table_store(pTHX_ PTR_TBL_t * const tbl, const void * const oldsv, void * const newsv);
#define PERL_ARGS_ASSERT_PTR_TABLE_STORE        \
        assert(tbl); assert(newsv)

PERL_CALLCONV void
Perl_push_scope(pTHX);
#define PERL_ARGS_ASSERT_PUSH_SCOPE

PERL_CALLCONV char *
Perl_pv_display(pTHX_ SV *dsv, const char *pv, STRLEN cur, STRLEN len, STRLEN pvlim);
#define PERL_ARGS_ASSERT_PV_DISPLAY             \
        assert(dsv); assert(pv)

PERL_CALLCONV char *
Perl_pv_escape(pTHX_ SV *dsv, char const * const str, const STRLEN count, STRLEN max, STRLEN * const escaped, U32 flags);
#define PERL_ARGS_ASSERT_PV_ESCAPE              \
        assert(str)

PERL_CALLCONV char *
Perl_pv_pretty(pTHX_ SV *dsv, char const * const str, const STRLEN count, const STRLEN max, char const * const start_color, char const * const end_color, const U32 flags);
#define PERL_ARGS_ASSERT_PV_PRETTY              \
        assert(dsv); assert(str)

PERL_CALLCONV char *
Perl_pv_uni_display(pTHX_ SV *dsv, const U8 *spv, STRLEN len, STRLEN pvlim, UV flags);
#define PERL_ARGS_ASSERT_PV_UNI_DISPLAY         \
        assert(dsv); assert(spv)

PERL_CALLCONV void
Perl_qerror(pTHX_ SV *err);
#define PERL_ARGS_ASSERT_QERROR

PERL_CALLCONV char *
Perl_rcpv_copy(pTHX_ char * const pv);
#define PERL_ARGS_ASSERT_RCPV_COPY

PERL_CALLCONV char *
Perl_rcpv_free(pTHX_ char * const pv);
#define PERL_ARGS_ASSERT_RCPV_FREE

PERL_CALLCONV char *
Perl_rcpv_new(pTHX_ const char * const pv, STRLEN len, U32 flags)
        __attribute__malloc__
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_RCPV_NEW

PERL_CALLCONV REGEXP *
Perl_re_compile(pTHX_ SV * const pattern, U32 orig_rx_flags);
#define PERL_ARGS_ASSERT_RE_COMPILE             \
        assert(pattern)

PERL_CALLCONV char *
Perl_re_intuit_start(pTHX_ REGEXP * const rx, SV *sv, const char * const strbeg, char *strpos, char *strend, const U32 flags, re_scream_pos_data *data);
#define PERL_ARGS_ASSERT_RE_INTUIT_START        \
        assert(rx); assert(strbeg); assert(strpos); assert(strend)

PERL_CALLCONV SV *
Perl_re_intuit_string(pTHX_ REGEXP  * const r);
#define PERL_ARGS_ASSERT_RE_INTUIT_STRING       \
        assert(r)

PERL_CALLCONV REGEXP *
Perl_re_op_compile(pTHX_ SV ** const patternp, int pat_count, OP *expr, const regexp_engine *eng, REGEXP *old_re, bool *is_bare_re, const U32 rx_flags, const U32 pm_flags);
#define PERL_ARGS_ASSERT_RE_OP_COMPILE          \
        assert(eng)

PERL_CALLCONV Malloc_t
Perl_realloc(Malloc_t where, MEM_SIZE nbytes)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_REALLOC

PERL_CALLCONV void
Perl_reentrant_free(pTHX);
#define PERL_ARGS_ASSERT_REENTRANT_FREE

PERL_CALLCONV void
Perl_reentrant_init(pTHX);
#define PERL_ARGS_ASSERT_REENTRANT_INIT

PERL_CALLCONV void *
Perl_reentrant_retry(const char *f, ...);
#define PERL_ARGS_ASSERT_REENTRANT_RETRY        \
        assert(f)

PERL_CALLCONV void
Perl_reentrant_size(pTHX);
#define PERL_ARGS_ASSERT_REENTRANT_SIZE

PERL_CALLCONV HV *
Perl_refcounted_he_chain_2hv(pTHX_ const struct refcounted_he *c, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_CHAIN_2HV

PERL_CALLCONV SV *
Perl_refcounted_he_fetch_pv(pTHX_ const struct refcounted_he *chain, const char *key, U32 hash, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FETCH_PV \
        assert(key)

PERL_CALLCONV SV *
Perl_refcounted_he_fetch_pvn(pTHX_ const struct refcounted_he *chain, const char *keypv, STRLEN keylen, U32 hash, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FETCH_PVN \
        assert(keypv)

PERL_CALLCONV SV *
Perl_refcounted_he_fetch_sv(pTHX_ const struct refcounted_he *chain, SV *key, U32 hash, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FETCH_SV \
        assert(key)

PERL_CALLCONV void
Perl_refcounted_he_free(pTHX_ struct refcounted_he *he);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FREE

PERL_CALLCONV struct refcounted_he *
Perl_refcounted_he_inc(pTHX_ struct refcounted_he *he);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_INC

PERL_CALLCONV struct refcounted_he *
Perl_refcounted_he_new_pv(pTHX_ struct refcounted_he *parent, const char *key, U32 hash, SV *value, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_PV   \
        assert(key)

PERL_CALLCONV struct refcounted_he *
Perl_refcounted_he_new_pvn(pTHX_ struct refcounted_he *parent, const char *keypv, STRLEN keylen, U32 hash, SV *value, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_PVN  \
        assert(keypv)

PERL_CALLCONV struct refcounted_he *
Perl_refcounted_he_new_sv(pTHX_ struct refcounted_he *parent, SV *key, U32 hash, SV *value, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_SV   \
        assert(key)

PERL_CALLCONV SV *
Perl_reg_named_buff(pTHX_ REGEXP * const rx, SV * const key, SV * const value, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF         \
        assert(rx)

PERL_CALLCONV SV *
Perl_reg_named_buff_all(pTHX_ REGEXP * const rx, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_ALL     \
        assert(rx)

PERL_CALLCONV bool
Perl_reg_named_buff_exists(pTHX_ REGEXP * const rx, SV * const key, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_EXISTS  \
        assert(rx); assert(key)

PERL_CALLCONV SV *
Perl_reg_named_buff_fetch(pTHX_ REGEXP * const rx, SV * const namesv, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_FETCH   \
        assert(rx); assert(namesv)

PERL_CALLCONV SV *
Perl_reg_named_buff_firstkey(pTHX_ REGEXP * const rx, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_FIRSTKEY \
        assert(rx)

PERL_CALLCONV SV *
Perl_reg_named_buff_iter(pTHX_ REGEXP * const rx, const SV * const lastkey, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_ITER    \
        assert(rx)

PERL_CALLCONV SV *
Perl_reg_named_buff_nextkey(pTHX_ REGEXP * const rx, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_NEXTKEY \
        assert(rx)

PERL_CALLCONV SV *
Perl_reg_named_buff_scalar(pTHX_ REGEXP * const rx, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_SCALAR  \
        assert(rx)

PERL_CALLCONV void
Perl_reg_numbered_buff_fetch(pTHX_ REGEXP * const re, const I32 paren, SV * const sv);
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_FETCH \
        assert(re)

PERL_CALLCONV void
Perl_reg_numbered_buff_fetch_flags(pTHX_ REGEXP * const re, const I32 paren, SV * const sv, U32 flags);
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_FETCH_FLAGS \
        assert(re)

PERL_CALLCONV I32
Perl_reg_numbered_buff_length(pTHX_ REGEXP * const rx, const SV * const sv, const I32 paren);
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_LENGTH \
        assert(rx); assert(sv)

PERL_CALLCONV void
Perl_reg_numbered_buff_store(pTHX_ REGEXP * const rx, const I32 paren, SV const * const value);
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_STORE \
        assert(rx)

PERL_CALLCONV SV *
Perl_reg_qr_package(pTHX_ REGEXP * const rx);
#define PERL_ARGS_ASSERT_REG_QR_PACKAGE         \
        assert(rx)

PERL_CALLCONV REGEXP *
Perl_reg_temp_copy(pTHX_ REGEXP *dsv, REGEXP *ssv);
#define PERL_ARGS_ASSERT_REG_TEMP_COPY          \
        assert(ssv)

PERL_CALLCONV void
Perl_regdump(pTHX_ const regexp *r);
#define PERL_ARGS_ASSERT_REGDUMP                \
        assert(r)

PERL_CALLCONV I32
Perl_regexec_flags(pTHX_ REGEXP * const rx, char *stringarg, char *strend, char *strbeg, SSize_t minend, SV *sv, void *data, U32 flags);
#define PERL_ARGS_ASSERT_REGEXEC_FLAGS          \
        assert(rx); assert(stringarg); assert(strend); assert(strbeg); assert(sv)

PERL_CALLCONV void
Perl_regfree_internal(pTHX_ REGEXP * const rx);
#define PERL_ARGS_ASSERT_REGFREE_INTERNAL       \
        assert(rx)

PERL_CALLCONV void
Perl_reginitcolors(pTHX);
#define PERL_ARGS_ASSERT_REGINITCOLORS

PERL_CALLCONV void
Perl_repeatcpy(char *to, const char *from, SSize_t len, IV count);
#define PERL_ARGS_ASSERT_REPEATCPY              \
        assert(to); assert(from)

PERL_CALLCONV void
Perl_report_evil_fh(pTHX_ const GV *gv)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_REPORT_EVIL_FH

PERL_CALLCONV void
Perl_report_uninit(pTHX_ const SV *uninit_sv);
#define PERL_ARGS_ASSERT_REPORT_UNINIT

PERL_CALLCONV void
Perl_report_wrongway_fh(pTHX_ const GV *gv, const char have)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_REPORT_WRONGWAY_FH

PERL_CALLCONV void
Perl_require_pv(pTHX_ const char *pv);
#define PERL_ARGS_ASSERT_REQUIRE_PV             \
        assert(pv)

PERL_CALLCONV void
Perl_resume_compcv(pTHX_ struct suspended_compcv *buffer, bool save);
#define PERL_ARGS_ASSERT_RESUME_COMPCV          \
        assert(buffer)

/* PERL_CALLCONV void
resume_compcv_and_save(pTHX_ struct suspended_compcv *buffer); */

/* PERL_CALLCONV void
resume_compcv_final(pTHX_ struct suspended_compcv *buffer); */

PERL_CALLCONV char *
Perl_rninstr(const char *big, const char *bigend, const char *little, const char *lend)
        __attribute__warn_unused_result__
        __attribute__pure__;
#define PERL_ARGS_ASSERT_RNINSTR                \
        assert(big); assert(bigend); assert(little); assert(lend)

PERL_CALLCONV void
Perl_rpeep(pTHX_ OP *o)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_RPEEP

PERL_CALLCONV void
Perl_rpp_free_2_(pTHX_ SV * const sv1, SV * const sv2, const U32 rc1, const U32 rc2);
#define PERL_ARGS_ASSERT_RPP_FREE_2_            \
        assert(sv1); assert(sv2)

PERL_CALLCONV void
Perl_rpp_obliterate_stack_to(pTHX_ I32 ix);
#define PERL_ARGS_ASSERT_RPP_OBLITERATE_STACK_TO

PERL_CALLCONV Sighandler_t
Perl_rsignal(pTHX_ int i, Sighandler_t t);
#define PERL_ARGS_ASSERT_RSIGNAL

PERL_CALLCONV int
Perl_rsignal_restore(pTHX_ int i, Sigsave_t *t)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_RSIGNAL_RESTORE

PERL_CALLCONV int
Perl_rsignal_save(pTHX_ int i, Sighandler_t t1, Sigsave_t *save)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_RSIGNAL_SAVE           \
        assert(save)

PERL_CALLCONV Sighandler_t
Perl_rsignal_state(pTHX_ int i);
#define PERL_ARGS_ASSERT_RSIGNAL_STATE

PERL_CALLCONV int
Perl_runops_debug(pTHX);
#define PERL_ARGS_ASSERT_RUNOPS_DEBUG

PERL_CALLCONV int
Perl_runops_standard(pTHX);
#define PERL_ARGS_ASSERT_RUNOPS_STANDARD

PERL_CALLCONV CV *
Perl_rv2cv_op_cv(pTHX_ OP *cvop, U32 flags);
#define PERL_ARGS_ASSERT_RV2CV_OP_CV            \
        assert(cvop)

PERL_CALLCONV void
Perl_rxres_save(pTHX_ void **rsp, REGEXP *rx)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_RXRES_SAVE             \
        assert(rsp); assert(rx)

PERL_CALLCONV Malloc_t
Perl_safesyscalloc(MEM_SIZE elements, MEM_SIZE size)
        __attribute__malloc__
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAFESYSCALLOC

PERL_CALLCONV Free_t
Perl_safesysfree(Malloc_t where);
#define PERL_ARGS_ASSERT_SAFESYSFREE

PERL_CALLCONV Malloc_t
Perl_safesysmalloc(MEM_SIZE nbytes)
        __attribute__malloc__
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAFESYSMALLOC

PERL_CALLCONV Malloc_t
Perl_safesysrealloc(Malloc_t where, MEM_SIZE nbytes)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAFESYSREALLOC

PERL_CALLCONV void
Perl_save_I16(pTHX_ I16 *intp);
#define PERL_ARGS_ASSERT_SAVE_I16               \
        assert(intp)

PERL_CALLCONV void
Perl_save_I32(pTHX_ I32 *intp);
#define PERL_ARGS_ASSERT_SAVE_I32               \
        assert(intp)

PERL_CALLCONV void
Perl_save_I8(pTHX_ I8 *bytep);
#define PERL_ARGS_ASSERT_SAVE_I8                \
        assert(bytep)

PERL_CALLCONV void
Perl_save_adelete(pTHX_ AV *av, SSize_t key);
#define PERL_ARGS_ASSERT_SAVE_ADELETE           \
        assert(av)

/* PERL_CALLCONV void
save_aelem(pTHX_ AV *av, SSize_t idx, SV **sptr); */

PERL_CALLCONV void
Perl_save_aelem_flags(pTHX_ AV *av, SSize_t idx, SV **sptr, const U32 flags);
#define PERL_ARGS_ASSERT_SAVE_AELEM_FLAGS       \
        assert(av); assert(sptr)

PERL_CALLCONV SSize_t
Perl_save_alloc(pTHX_ SSize_t size, I32 pad);
#define PERL_ARGS_ASSERT_SAVE_ALLOC

PERL_CALLCONV void
Perl_save_aptr(pTHX_ AV **aptr);
#define PERL_ARGS_ASSERT_SAVE_APTR              \
        assert(aptr)

PERL_CALLCONV AV *
Perl_save_ary(pTHX_ GV *gv);
#define PERL_ARGS_ASSERT_SAVE_ARY               \
        assert(gv)

PERL_CALLCONV void
Perl_save_bool(pTHX_ bool *boolp);
#define PERL_ARGS_ASSERT_SAVE_BOOL              \
        assert(boolp)

PERL_CALLCONV void
Perl_save_clearsv(pTHX_ SV **svp);
#define PERL_ARGS_ASSERT_SAVE_CLEARSV           \
        assert(svp)

PERL_CALLCONV void
Perl_save_delete(pTHX_ HV *hv, char *key, I32 klen);
#define PERL_ARGS_ASSERT_SAVE_DELETE            \
        assert(hv); assert(key)

PERL_CALLCONV void
Perl_save_destructor(pTHX_ DESTRUCTORFUNC_NOCONTEXT_t f, void *p);
#define PERL_ARGS_ASSERT_SAVE_DESTRUCTOR        \
        assert(p)

PERL_CALLCONV void
Perl_save_destructor_x(pTHX_ DESTRUCTORFUNC_t f, void *p);
#define PERL_ARGS_ASSERT_SAVE_DESTRUCTOR_X

PERL_CALLCONV void
Perl_save_freercpv(pTHX_ char *rcpv);
#define PERL_ARGS_ASSERT_SAVE_FREERCPV          \
        assert(rcpv)

PERL_CALLCONV void
Perl_save_generic_pvref(pTHX_ char **str);
#define PERL_ARGS_ASSERT_SAVE_GENERIC_PVREF     \
        assert(str)

PERL_CALLCONV void
Perl_save_generic_svref(pTHX_ SV **sptr);
#define PERL_ARGS_ASSERT_SAVE_GENERIC_SVREF     \
        assert(sptr)

PERL_CALLCONV void
Perl_save_gp(pTHX_ GV *gv, I32 empty);
#define PERL_ARGS_ASSERT_SAVE_GP                \
        assert(gv)

PERL_CALLCONV HV *
Perl_save_hash(pTHX_ GV *gv);
#define PERL_ARGS_ASSERT_SAVE_HASH              \
        assert(gv)

PERL_CALLCONV void
Perl_save_hdelete(pTHX_ HV *hv, SV *keysv);
#define PERL_ARGS_ASSERT_SAVE_HDELETE           \
        assert(hv); assert(keysv)

/* PERL_CALLCONV void
save_helem(pTHX_ HV *hv, SV *key, SV **sptr); */

PERL_CALLCONV void
Perl_save_helem_flags(pTHX_ HV *hv, SV *key, SV **sptr, const U32 flags);
#define PERL_ARGS_ASSERT_SAVE_HELEM_FLAGS       \
        assert(hv); assert(key); assert(sptr)

PERL_CALLCONV void
Perl_save_hints(pTHX);
#define PERL_ARGS_ASSERT_SAVE_HINTS

PERL_CALLCONV void
Perl_save_hptr(pTHX_ HV **hptr);
#define PERL_ARGS_ASSERT_SAVE_HPTR              \
        assert(hptr)

PERL_CALLCONV void
Perl_save_int(pTHX_ int *intp);
#define PERL_ARGS_ASSERT_SAVE_INT               \
        assert(intp)

PERL_CALLCONV void
Perl_save_item(pTHX_ SV *item);
#define PERL_ARGS_ASSERT_SAVE_ITEM              \
        assert(item)

PERL_CALLCONV void
Perl_save_iv(pTHX_ IV *ivp);
#define PERL_ARGS_ASSERT_SAVE_IV                \
        assert(ivp)

PERL_CALLCONV void
Perl_save_padsv_and_mortalize(pTHX_ PADOFFSET off);
#define PERL_ARGS_ASSERT_SAVE_PADSV_AND_MORTALIZE

PERL_CALLCONV void
Perl_save_pptr(pTHX_ char **pptr);
#define PERL_ARGS_ASSERT_SAVE_PPTR              \
        assert(pptr)

PERL_CALLCONV void
Perl_save_pushi32ptr(pTHX_ const I32 i, void * const ptr, const int type);
#define PERL_ARGS_ASSERT_SAVE_PUSHI32PTR

PERL_CALLCONV void
Perl_save_pushptr(pTHX_ void * const ptr, const int type);
#define PERL_ARGS_ASSERT_SAVE_PUSHPTR

PERL_CALLCONV void
Perl_save_pushptrptr(pTHX_ void * const ptr1, void * const ptr2, const int type);
#define PERL_ARGS_ASSERT_SAVE_PUSHPTRPTR

PERL_CALLCONV void
Perl_save_rcpv(pTHX_ char **prcpv);
#define PERL_ARGS_ASSERT_SAVE_RCPV              \
        assert(prcpv)

PERL_CALLCONV void
Perl_save_re_context(pTHX);
#define PERL_ARGS_ASSERT_SAVE_RE_CONTEXT

PERL_CALLCONV SV *
Perl_save_scalar(pTHX_ GV *gv);
#define PERL_ARGS_ASSERT_SAVE_SCALAR            \
        assert(gv)

PERL_CALLCONV void
Perl_save_set_svflags(pTHX_ SV *sv, U32 mask, U32 val);
#define PERL_ARGS_ASSERT_SAVE_SET_SVFLAGS       \
        assert(sv)

PERL_CALLCONV void
Perl_save_shared_pvref(pTHX_ char **str);
#define PERL_ARGS_ASSERT_SAVE_SHARED_PVREF      \
        assert(str)

PERL_CALLCONV void
Perl_save_sptr(pTHX_ SV **sptr);
#define PERL_ARGS_ASSERT_SAVE_SPTR              \
        assert(sptr)

PERL_CALLCONV void
Perl_save_strlen(pTHX_ STRLEN *ptr);
#define PERL_ARGS_ASSERT_SAVE_STRLEN            \
        assert(ptr)

PERL_CALLCONV SV *
Perl_save_svref(pTHX_ SV **sptr);
#define PERL_ARGS_ASSERT_SAVE_SVREF             \
        assert(sptr)

PERL_CALLCONV void
Perl_save_vptr(pTHX_ void *ptr);
#define PERL_ARGS_ASSERT_SAVE_VPTR              \
        assert(ptr)

PERL_CALLCONV char *
Perl_savesharedpv(pTHX_ const char *pv)
        __attribute__malloc__
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAVESHAREDPV

PERL_CALLCONV char *
Perl_savesharedpvn(pTHX_ const char * const pv, const STRLEN len)
        __attribute__malloc__
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAVESHAREDPVN

PERL_CALLCONV void
Perl_savestack_grow(pTHX);
#define PERL_ARGS_ASSERT_SAVESTACK_GROW

PERL_CALLCONV void
Perl_savestack_grow_cnt(pTHX_ I32 need);
#define PERL_ARGS_ASSERT_SAVESTACK_GROW_CNT

PERL_CALLCONV void
Perl_savetmps(pTHX);
#define PERL_ARGS_ASSERT_SAVETMPS

PERL_CALLCONV OP *
Perl_sawparens(pTHX_ OP *o)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_SAWPARENS

PERL_CALLCONV OP *
Perl_scalar(pTHX_ OP *o)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_SCALAR

PERL_CALLCONV OP *
Perl_scalarvoid(pTHX_ OP *o)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_SCALARVOID             \
        assert(o)

PERL_CALLCONV NV
Perl_scan_bin(pTHX_ const char *start, STRLEN len, STRLEN *retlen);
#define PERL_ARGS_ASSERT_SCAN_BIN               \
        assert(start); assert(retlen)

PERL_CALLCONV NV
Perl_scan_hex(pTHX_ const char *start, STRLEN len, STRLEN *retlen);
#define PERL_ARGS_ASSERT_SCAN_HEX               \
        assert(start); assert(retlen)

PERL_CALLCONV char *
Perl_scan_num(pTHX_ const char *s, YYSTYPE *lvalp);
#define PERL_ARGS_ASSERT_SCAN_NUM               \
        assert(s); assert(lvalp)

PERL_CALLCONV NV
Perl_scan_oct(pTHX_ const char *start, STRLEN len, STRLEN *retlen);
#define PERL_ARGS_ASSERT_SCAN_OCT               \
        assert(start); assert(retlen)

PERL_CALLCONV char *
Perl_scan_str(pTHX_ char *start, int keep_quoted, int keep_delims, int re_reparse, char **delimp)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SCAN_STR               \
        assert(start)

PERL_CALLCONV const char *
Perl_scan_version(pTHX_ const char *s, SV *rv, bool qv);
#define PERL_ARGS_ASSERT_SCAN_VERSION           \
        assert(s); assert(rv)

PERL_CALLCONV char *
Perl_scan_vstring(pTHX_ const char *s, const char * const e, SV *sv);
#define PERL_ARGS_ASSERT_SCAN_VSTRING           \
        assert(s); assert(e); assert(sv)

PERL_CALLCONV char *
Perl_scan_word(pTHX_ char *s, char *dest, STRLEN destlen, int allow_package, STRLEN *slp);
#define PERL_ARGS_ASSERT_SCAN_WORD              \
        assert(s); assert(dest); assert(slp)

PERL_CALLCONV char *
Perl_scan_word6(pTHX_ char *s, char *dest, STRLEN destlen, int allow_package, STRLEN *slp, bool warn_tick);
#define PERL_ARGS_ASSERT_SCAN_WORD6             \
        assert(s); assert(dest); assert(slp)

PERL_CALLCONV U32
Perl_seed(pTHX);
#define PERL_ARGS_ASSERT_SEED

PERL_CALLCONV void
Perl_set_caret_X(pTHX);
#define PERL_ARGS_ASSERT_SET_CARET_X

PERL_CALLCONV void
Perl_set_context(void *t);
#define PERL_ARGS_ASSERT_SET_CONTEXT            \
        assert(t)

PERL_CALLCONV void
Perl_set_numeric_standard(pTHX_ const char *file, const line_t caller_line);
#define PERL_ARGS_ASSERT_SET_NUMERIC_STANDARD   \
        assert(file)

PERL_CALLCONV void
Perl_set_numeric_underlying(pTHX_ const char *file, const line_t caller_line);
#define PERL_ARGS_ASSERT_SET_NUMERIC_UNDERLYING \
        assert(file)

PERL_CALLCONV void
Perl_setdefout(pTHX_ GV *gv);
#define PERL_ARGS_ASSERT_SETDEFOUT              \
        assert(gv)

PERL_CALLCONV void
Perl_setfd_cloexec(int fd)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_SETFD_CLOEXEC

PERL_CALLCONV void
Perl_setfd_cloexec_for_nonsysfd(pTHX_ int fd)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_SETFD_CLOEXEC_FOR_NONSYSFD

PERL_CALLCONV void
Perl_setfd_cloexec_or_inhexec_by_sysfdness(pTHX_ int fd)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_SETFD_CLOEXEC_OR_INHEXEC_BY_SYSFDNESS

PERL_CALLCONV void
Perl_setfd_inhexec(int fd)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_SETFD_INHEXEC

PERL_CALLCONV void
Perl_setfd_inhexec_for_sysfd(pTHX_ int fd)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_SETFD_INHEXEC_FOR_SYSFD

PERL_CALLCONV HEK *
Perl_share_hek(pTHX_ const char *str, SSize_t len, U32 hash);
#define PERL_ARGS_ASSERT_SHARE_HEK              \
        assert(str)

PERL_CALLCONV Signal_t
Perl_sighandler1(int sig)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_SIGHANDLER1

PERL_CALLCONV Signal_t
Perl_sighandler3(int sig, Siginfo_t *info, void *uap)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_SIGHANDLER3

PERL_CALLCONV char *
Perl_skipspace_flags(pTHX_ char *s, U32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SKIPSPACE_FLAGS        \
        assert(s)

PERL_CALLCONV void
Perl_sortsv(pTHX_ SV **array, size_t num_elts, SVCOMPARE_t cmp);
#define PERL_ARGS_ASSERT_SORTSV                 \
        assert(cmp)

PERL_CALLCONV void
Perl_sortsv_flags(pTHX_ SV **array, size_t num_elts, SVCOMPARE_t cmp, U32 flags);
#define PERL_ARGS_ASSERT_SORTSV_FLAGS           \
        assert(cmp)

PERL_CALLCONV SV **
Perl_stack_grow(pTHX_ SV **sp, SV **p, SSize_t n);
#define PERL_ARGS_ASSERT_STACK_GROW             \
        assert(sp); assert(p)

PERL_CALLCONV PerlIO *
Perl_start_glob(pTHX_ SV *tmpglob, IO *io)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_START_GLOB             \
        assert(tmpglob); assert(io)

PERL_CALLCONV I32
Perl_start_subparse(pTHX_ I32 is_format, U32 flags);
#define PERL_ARGS_ASSERT_START_SUBPARSE

PERL_CALLCONV NV
Perl_str_to_version(pTHX_ SV *sv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_STR_TO_VERSION         \
        assert(sv)

PERL_CALLCONV void
Perl_sub_crush_depth(pTHX_ CV *cv)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_SUB_CRUSH_DEPTH        \
        assert(cv)

PERL_CALLCONV void
Perl_suspend_compcv(pTHX_ struct suspended_compcv *buffer);
#define PERL_ARGS_ASSERT_SUSPEND_COMPCV         \
        assert(buffer)

PERL_CALLCONV bool
Perl_sv_2bool_flags(pTHX_ SV *sv, I32 flags);
#define PERL_ARGS_ASSERT_SV_2BOOL_FLAGS         \
        assert(sv)

PERL_CALLCONV CV *
Perl_sv_2cv(pTHX_ SV *sv, HV ** const st, GV ** const gvp, const I32 lref);
#define PERL_ARGS_ASSERT_SV_2CV                 \
        assert(st); assert(gvp)

PERL_CALLCONV IO *
Perl_sv_2io(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_2IO                 \
        assert(sv)

PERL_CALLCONV IV
Perl_sv_2iv_flags(pTHX_ SV * const sv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_2IV_FLAGS           \
        assert(sv)

PERL_CALLCONV SV *
Perl_sv_2mortal(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_2MORTAL

PERL_CALLCONV SV *
Perl_sv_2num(pTHX_ SV * const sv)
