
=back

=head2 Test2::Manual::Anatomy::IPC - Manual for the IPC system.

=over 4

=item DESCRIPTION

=item WHAT IS THE IPC SYSTEM

=item HOW DOES THE IPC SYSTEM EFFECT EVERYTHING?

=item WHAT DOES AN IPC DRIVER DO?

=item HOW DOES THE DEFAULT IPC DRIVER WORK?

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Anatomy::Utilities - Overview of utilities for Test2.

=over 4

=item DESCRIPTION

=item Test2::Util

=item Test2::Util::ExternalMeta

=item Test2::Util::Facets2Legacy

=item Test2::Util::HashBase

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Concurrency - Documentation for Concurrency support.

=over 4

=item FORKING

=over 4

=item Test2

=item Test::Builder

=item Test2::Suite

=item Test::SharedFork

=item Others

=back

=item THREADING

=over 4

=item Test2

=item Test::Builder

=item Test2::Suite

=back

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Contributing - How to contribute to the Test2
project.

=over 4

=item DESCRIPTION

=item WAYS TO HELP

=over 4

=item REPORT BUGS

Test2/Test-Builder/Test-More, Test2-Suite, Test2-Harness

=item SUBMIT PATCHES

=item ADD/UPDATE DOCUMENTATION

=item ANSWER QUESTIONS ON IRC/SLACK

=item WRITE NEW TOOLS USING TEST2

=item PORT OLD TOOLS TO TEST2

=back

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Testing - Hub for documentation about writing tests
with Test2.

=over 4

=item DESCRIPTION

=back

=head2 Test2::Manual::Testing, When writing tests there are a couple
namespaces to focus on:

Test2::Tools::*, Test2::Plugins::*, Test2::Bundle::*, Test2::Require::*

=over 4

=item LISTING DEPENDENCIES

=item TUTORIALS

=over 4

=item SIMPLE/INTRODUCTION TUTORIAL

=item MIGRATING FROM TEST::BUILDER and TEST::MORE

=item ADVANCED PLANNING

=item TODO TESTS

=item SUBTESTS

=item COMPARISONS

=item TESTING EXPORTERS

=item TESTING CLASSES

=item TRAPPING

=item DEFERRED TESTING

=item MANAGING ENCODINGS

=item AUTO-ABORT ON FAILURE

=item CONTROLLING RANDOM BEHAVIOR

=item WRITING YOUR OWN BUNDLE

=back

=item TOOLSET DOCUMENTATION

=item PLUGIN DOCUMENTATION

=item BUNDLE DOCUMENTATION

=item REQUIRE DOCUMENTATION

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Testing::Introduction - Introduction to testing with
Test2.

=over 4

=item DESCRIPTION

=item BOILERPLATE

=over 4

=item THE TEST FILE

use Test2::V0;, done_testing;

=item DIST CONFIG

=back

=item MAKING ASSERTIONS

=item RUNNING THE TEST

=over 4

=item RUN DIRECTLY

=item USING YATH

=item USING PROVE

=back

=item THE "PLAN"

done_testing(), plan($COUNT)

=item ADDITIONAL ASSERTION TOOLS

is($a, $b, $description), like($a, $b, $description)

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Testing::Migrating - How to migrate existing tests
from
Test::More to Test2.

=over 4

=item DESCRIPTION

=item LEGACY TEST

=item BOILERPLATE

Replace Test::More with Test2::V0, NOTE: srand, Stop using use_ok(), Stop
using require_ok(), Remove strict/warnings (optional), Change where the
plan is set

=item SIMPLE ASSERTIONS

=item TODO

todo $reason => sub { ... }, { my $TODO = todo $reason; ... }

=item DEEP COMPARISONS

=item COMPARING REFERENCES

=item TOOLS THAT ARE GONE

=item TOOLS THAT HAVE CHANGED

=item FINAL VERSION

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Testing::Planning - The many ways to set a plan.

=over 4

=item DESCRIPTION

=item TEST COUNT

=item DONE TESTING

=item SKIP ALL

=item CUSTOM PLAN EVENT

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Testing::Todo - Tutorial for marking tests as TODO.

=over 4

=item DESCRIPTION

=item THE TOOL

=over 4

=item TODO BLOCK

=item TODO VARIABLE

=back

=item MANUAL TODO EVENTS

=item HOW THE TODO TOOLS WORK UNDER THE HOOD

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Tooling - Manual page for tool authors.

=over 4

=item DESCRIPTION

=item TOOL TUTORIALS

=over 4

=item FIRST TOOL

=item MOVING FROM Test::Builder

=item NESTING TOOLS

=item TOOLS WITH SUBTESTS

=item TESTING YOUR TEST TOOLS

=back

=item PLUGIN TUTORIALS

=over 4

=item TAKING ACTION WHEN A NEW TOOL STARTS

=item TAKING ACTION AFTER A TOOL IS DONE

=item TAKING ACTION AT THE END OF TESTING

=item TAKING ACTION JUST BEFORE EXIT

=back

=item WRITING A SIMPLE JSONL FORMATTER

=item WHERE TO FIND HOOKS AND APIS

global API, In hubs

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Tooling::FirstTool - Write your first tool with
Test2.

=over 4

=item DESCRIPTION

=item COMPLETE CODE UP FRONT

=item LINE BY LINE

sub ok($;$@) {, my ($bool, $name, @diag) = @_;, my $ctx = context();,
return $ctx->pass_and_release($name) if $bool;, return
$ctx->fail_and_release($name, @diag);

=item CONTEXT OBJECT DOCUMENTATION

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Tooling::Formatter - How to write a custom formatter,
in our
case a JSONL formatter.

=over 4

=item DESCRIPTION

=item COMPLETE CODE UP FRONT

=item LINE BY LINE

use base qw/Test2::Formatter/;, sub new { bless {}, shift }, sub encoding
{};, sub write { ... }, my ($self, $e, $num, $f) = @_;, $self, $e, $num,
$f, $f ||= $e->facet_data;, print encode_json($f), "\n";

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Tooling::Nesting - Tutorial for using other tools
within your
own.

=over 4

=item DESCRIPTION

=item NAIVE WAY

=over 4

=item WHATS WRONG WITH IT?

=item HOW TO FIX IT

=back

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Tooling::Plugin::TestExit - How to safely add
pre-exit
behaviors.

=over 4

=item DESCRIPTION

=item COMPLETE CODE UP FRONT

=item LINE BY LINE

use Test2::API qw{test2_add_callback_exit};, test2_add_callback_exit(sub {
... });, my ($ctx, $orig_code, $new_exit_code_ref) = @_, return if
$orig_code == 42, $$new_exit_code_ref = 42

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Tooling::Plugin::TestingDone - Run code when the test
file is
finished, or when done_testing is called.

=over 4

=item DESCRIPTION

=item COMPLETE CODE UP FRONT

=item LINE BY LINE

use Test2::API qw{test2_add_callback_testing_done};,
test2_add_callback_testing_done(sub { ... });, ok(!$some_global,
'$some_global was not set'), print "The test file is done, or done_testing
was just called\n"

=item UNDER THE HOOD

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Tooling::Plugin::ToolCompletes - How to add behaviors
that occur
when a tool completes work.

=over 4

=item DESCRIPTION

=item COMPLETE CODE UP FRONT

=item LINE BY LINE

use Test2::API qw{test2_add_callback_context_release};,
test2_add_callback_context_release(sub { ... }), my $ctx_ref = shift, print
"Context was released\n"

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Tooling::Plugin::ToolStarts - How to add behaviors
that occur
when a tool starts work.

=over 4

=item DESCRIPTION

=item COMPLETE CODE UP FRONT

=item LINE BY LINE

use Test2::API qw{test2_add_callback_context_init
test2_add_callback_context_acquire};,
test2_add_callback_context_acquire(sub { ... }), my $params_ref = shift,
print "A tool has requested the context\n",
test2_add_callback_context_init(sub { ... }), my $ctx_ref = shift, print "A
new context was created\n"

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Tooling::Subtest - How to implement a tool that makes
use of
subtests.

=over 4

=item DESCRIPTION

=item WHICH TYPE OF SUBTEST DO I NEED?

=over 4

=item SUBTEST WITH USER SUPPLIED CODEREF

@args, \%params, buffered => $bool, inherit_trace => $bool, no_fork =>
$bool

=item SUBTEST WITH TOOL-SIDE CODEREF

=back

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Tooling::TestBuilder - This section maps
Test::Builder methods
to Test2 concepts.

=over 4

=item DESCRIPTION

=item CONTEXT

=item TEST BUILDER METHODS

$tb->BAIL_OUT($reason), $tb->diag($string), $tb->note($string),
$tb->done_testing, $tb->like, $tb->unlike, $tb->ok($bool, $name),
$tb->subtest, $tb->todo_start, $tb->todo_end, $tb->output,
$tb->failure_output, and $tb->todo_output

=item LEVEL

=item TODO

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Manual::Tooling::Testing - Tutorial on how to test your
testing tools.

=over 4

=item DESCRIPTION

=item THE HOLY GRAIL OF TESTING YOUR TOOLS

=item ADDITIONAL HELPERS

=over 4

=item Test2::Tools::Tester

=item Test2::Tools::HarnessTester

=item Test2::Tools::Compare

event $TYPE => .., fail_events $TYPE => ..

=back

=item SEE ALSO

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Mock - Module for managing mocked classes and instances.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item CONSTRUCTION

=item METHODS

$mock = Test2::Mock->new(class => $CLASS, ...), $mock->track($bool),
$hashref = $mock->sub_tracking, $arrayref = $mock->call_tracking,
$mock->clear_sub_tracking(), $mock->clear_sub_tracking(\@subnames),
$mock->clear_call_tracking(), $mock->add('symbol' => ..., 'symbol2' =>
...), $mock->override('symbol1' => ..., 'symbol2' => ...),
$mock->set('symbol1' => ..., 'symbol2' => ...), $mock->restore($SYMBOL),
$mock->reset($SYMBOL), $mock->orig($SYMBOL), $mock->current($SYMBOL),
$mock->reset_all, $mock->add_constructor($NAME => $TYPE),
$mock->override_constructor($NAME => $TYPE), $mock->before($NAME, sub { ...
}), $mock->after($NAME, sub { ... }), $mock->around($NAME, sub { ... }),
$mock->autoload, $mock->block_load, $pm_file = $mock->file, $bool =
$mock->purge_on_destroy($bool), $stash = $mock->stash, $class =
$mock->class, $p = $mock->parent, $c = $mock->child

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Plugin - Documentation for plugins

=over 4

=item DESCRIPTION

=item FAQ

Should I subclass Test2::Plugin?

=item HOW DO I WRITE A PLUGIN?

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Plugin::BailOnFail - Automatically bail out of testing on the
first test
failure.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Plugin::DieOnFail - Automatically die on the first test
failure.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Plugin::ExitSummary - Add extra diagnostics on failure at the
end of the
test.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Plugin::SRand - Control the random seed for more controlled
test
environments.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item NOTE ON LOAD ORDER

=item CAVEATS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Plugin::Times - Output timing data at the end of the test.

=over 4

=item CAVEAT

=item DESCRIPTION

=item SYNOPSIS

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Plugin::UTF8 - Test2 plugin to test with utf8.

=over 4

=item DESCRIPTION

