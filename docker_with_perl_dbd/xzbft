#define CURLYX_end_fail_t8             237     /*      0x0ed */
#define CURLYX_end_fail_tb_pb             472  /*      0x1d8 */
#define CURLYX_end_fail_tb_p8             473  /*      0x1d9 */
#define CURLYX_end_fail_t8_pb             474  /*      0x1da */
#define CURLYX_end_fail_t8_p8             475  /*      0x1db */

#define WHILEM_A_pre                119        /* 0x77 state for WHILEM */
#define WHILEM_A_pre_tb                238     /*      0x0ee */
#define WHILEM_A_pre_t8                239     /*      0x0ef */
#define WHILEM_A_pre_tb_pb                476  /*      0x1dc */
#define WHILEM_A_pre_tb_p8                477  /*      0x1dd */
#define WHILEM_A_pre_t8_pb                478  /*      0x1de */
#define WHILEM_A_pre_t8_p8                479  /*      0x1df */

#define WHILEM_A_pre_fail           120        /* 0x78 state for WHILEM */
#define WHILEM_A_pre_fail_tb           240     /*      0x0f0 */
#define WHILEM_A_pre_fail_t8           241     /*      0x0f1 */
#define WHILEM_A_pre_fail_tb_pb           480  /*      0x1e0 */
#define WHILEM_A_pre_fail_tb_p8           481  /*      0x1e1 */
#define WHILEM_A_pre_fail_t8_pb           482  /*      0x1e2 */
#define WHILEM_A_pre_fail_t8_p8           483  /*      0x1e3 */

#define WHILEM_A_min                121        /* 0x79 state for WHILEM */
#define WHILEM_A_min_tb                242     /*      0x0f2 */
#define WHILEM_A_min_t8                243     /*      0x0f3 */
#define WHILEM_A_min_tb_pb                484  /*      0x1e4 */
#define WHILEM_A_min_tb_p8                485  /*      0x1e5 */
#define WHILEM_A_min_t8_pb                486  /*      0x1e6 */
#define WHILEM_A_min_t8_p8                487  /*      0x1e7 */

#define WHILEM_A_min_fail           122        /* 0x7a state for WHILEM */
#define WHILEM_A_min_fail_tb           244     /*      0x0f4 */
#define WHILEM_A_min_fail_t8           245     /*      0x0f5 */
#define WHILEM_A_min_fail_tb_pb           488  /*      0x1e8 */
#define WHILEM_A_min_fail_tb_p8           489  /*      0x1e9 */
#define WHILEM_A_min_fail_t8_pb           490  /*      0x1ea */
#define WHILEM_A_min_fail_t8_p8           491  /*      0x1eb */

#define WHILEM_A_max                123        /* 0x7b state for WHILEM */
#define WHILEM_A_max_tb                246     /*      0x0f6 */
#define WHILEM_A_max_t8                247     /*      0x0f7 */
#define WHILEM_A_max_tb_pb                492  /*      0x1ec */
#define WHILEM_A_max_tb_p8                493  /*      0x1ed */
#define WHILEM_A_max_t8_pb                494  /*      0x1ee */
#define WHILEM_A_max_t8_p8                495  /*      0x1ef */

#define WHILEM_A_max_fail           124        /* 0x7c state for WHILEM */
#define WHILEM_A_max_fail_tb           248     /*      0x0f8 */
#define WHILEM_A_max_fail_t8           249     /*      0x0f9 */
#define WHILEM_A_max_fail_tb_pb           496  /*      0x1f0 */
#define WHILEM_A_max_fail_tb_p8           497  /*      0x1f1 */
#define WHILEM_A_max_fail_t8_pb           498  /*      0x1f2 */
#define WHILEM_A_max_fail_t8_p8           499  /*      0x1f3 */

#define WHILEM_B_min                125        /* 0x7d state for WHILEM */
#define WHILEM_B_min_tb                250     /*      0x0fa */
#define WHILEM_B_min_t8                251     /*      0x0fb */
#define WHILEM_B_min_tb_pb                500  /*      0x1f4 */
#define WHILEM_B_min_tb_p8                501  /*      0x1f5 */
#define WHILEM_B_min_t8_pb                502  /*      0x1f6 */
#define WHILEM_B_min_t8_p8                503  /*      0x1f7 */

#define WHILEM_B_min_fail           126        /* 0x7e state for WHILEM */
#define WHILEM_B_min_fail_tb           252     /*      0x0fc */
#define WHILEM_B_min_fail_t8           253     /*      0x0fd */
#define WHILEM_B_min_fail_tb_pb           504  /*      0x1f8 */
#define WHILEM_B_min_fail_tb_p8           505  /*      0x1f9 */
#define WHILEM_B_min_fail_t8_pb           506  /*      0x1fa */
#define WHILEM_B_min_fail_t8_p8           507  /*      0x1fb */

#define WHILEM_B_max                127        /* 0x7f state for WHILEM */
#define WHILEM_B_max_tb                254     /*      0x0fe */
#define WHILEM_B_max_t8                255     /*      0x0ff */
#define WHILEM_B_max_tb_pb                508  /*      0x1fc */
#define WHILEM_B_max_tb_p8                509  /*      0x1fd */
#define WHILEM_B_max_t8_pb                510  /*      0x1fe */
#define WHILEM_B_max_t8_p8                511  /*      0x1ff */

#define WHILEM_B_max_fail           128        /* 0x80 state for WHILEM */
#define WHILEM_B_max_fail_tb           256     /*      0x100 */
#define WHILEM_B_max_fail_t8           257     /*      0x101 */
#define WHILEM_B_max_fail_tb_pb           512  /*      0x200 */
#define WHILEM_B_max_fail_tb_p8           513  /*      0x201 */
#define WHILEM_B_max_fail_t8_pb           514  /*      0x202 */
#define WHILEM_B_max_fail_t8_p8           515  /*      0x203 */

#define BRANCH_next                 129        /* 0x81 state for BRANCH */
#define BRANCH_next_tb                 258     /*      0x102 */
#define BRANCH_next_t8                 259     /*      0x103 */
#define BRANCH_next_tb_pb                 516  /*      0x204 */
#define BRANCH_next_tb_p8                 517  /*      0x205 */
#define BRANCH_next_t8_pb                 518  /*      0x206 */
#define BRANCH_next_t8_p8                 519  /*      0x207 */

#define BRANCH_next_fail            130        /* 0x82 state for BRANCH */
#define BRANCH_next_fail_tb            260     /*      0x104 */
#define BRANCH_next_fail_t8            261     /*      0x105 */
#define BRANCH_next_fail_tb_pb            520  /*      0x208 */
#define BRANCH_next_fail_tb_p8            521  /*      0x209 */
#define BRANCH_next_fail_t8_pb            522  /*      0x20a */
#define BRANCH_next_fail_t8_p8            523  /*      0x20b */

#define CURLYM_A                    131        /* 0x83 state for CURLYM */
#define CURLYM_A_tb                    262     /*      0x106 */
#define CURLYM_A_t8                    263     /*      0x107 */
#define CURLYM_A_tb_pb                    524  /*      0x20c */
#define CURLYM_A_tb_p8                    525  /*      0x20d */
#define CURLYM_A_t8_pb                    526  /*      0x20e */
#define CURLYM_A_t8_p8                    527  /*      0x20f */

#define CURLYM_A_fail               132        /* 0x84 state for CURLYM */
#define CURLYM_A_fail_tb               264     /*      0x108 */
#define CURLYM_A_fail_t8               265     /*      0x109 */
#define CURLYM_A_fail_tb_pb               528  /*      0x210 */
#define CURLYM_A_fail_tb_p8               529  /*      0x211 */
#define CURLYM_A_fail_t8_pb               530  /*      0x212 */
#define CURLYM_A_fail_t8_p8               531  /*      0x213 */

#define CURLYM_B                    133        /* 0x85 state for CURLYM */
#define CURLYM_B_tb                    266     /*      0x10a */
#define CURLYM_B_t8                    267     /*      0x10b */
#define CURLYM_B_tb_pb                    532  /*      0x214 */
#define CURLYM_B_tb_p8                    533  /*      0x215 */
#define CURLYM_B_t8_pb                    534  /*      0x216 */
#define CURLYM_B_t8_p8                    535  /*      0x217 */

#define CURLYM_B_fail               134        /* 0x86 state for CURLYM */
#define CURLYM_B_fail_tb               268     /*      0x10c */
#define CURLYM_B_fail_t8               269     /*      0x10d */
#define CURLYM_B_fail_tb_pb               536  /*      0x218 */
#define CURLYM_B_fail_tb_p8               537  /*      0x219 */
#define CURLYM_B_fail_t8_pb               538  /*      0x21a */
#define CURLYM_B_fail_t8_p8               539  /*      0x21b */

#define IFMATCH_A                   135        /* 0x87 state for IFMATCH */
#define IFMATCH_A_tb                   270     /*      0x10e */
#define IFMATCH_A_t8                   271     /*      0x10f */
#define IFMATCH_A_tb_pb                   540  /*      0x21c */
#define IFMATCH_A_tb_p8                   541  /*      0x21d */
#define IFMATCH_A_t8_pb                   542  /*      0x21e */
#define IFMATCH_A_t8_p8                   543  /*      0x21f */

#define IFMATCH_A_fail              136        /* 0x88 state for IFMATCH */
#define IFMATCH_A_fail_tb              272     /*      0x110 */
#define IFMATCH_A_fail_t8              273     /*      0x111 */
#define IFMATCH_A_fail_tb_pb              544  /*      0x220 */
#define IFMATCH_A_fail_tb_p8              545  /*      0x221 */
#define IFMATCH_A_fail_t8_pb              546  /*      0x222 */
#define IFMATCH_A_fail_t8_p8              547  /*      0x223 */

#define CURLY_B_min                 137        /* 0x89 state for CURLY */
#define CURLY_B_min_tb                 274     /*      0x112 */
#define CURLY_B_min_t8                 275     /*      0x113 */
#define CURLY_B_min_tb_pb                 548  /*      0x224 */
#define CURLY_B_min_tb_p8                 549  /*      0x225 */
#define CURLY_B_min_t8_pb                 550  /*      0x226 */
#define CURLY_B_min_t8_p8                 551  /*      0x227 */

#define CURLY_B_min_fail            138        /* 0x8a state for CURLY */
#define CURLY_B_min_fail_tb            276     /*      0x114 */
#define CURLY_B_min_fail_t8            277     /*      0x115 */
#define CURLY_B_min_fail_tb_pb            552  /*      0x228 */
#define CURLY_B_min_fail_tb_p8            553  /*      0x229 */
#define CURLY_B_min_fail_t8_pb            554  /*      0x22a */
#define CURLY_B_min_fail_t8_p8            555  /*      0x22b */

#define CURLY_B_max                 139        /* 0x8b state for CURLY */
#define CURLY_B_max_tb                 278     /*      0x116 */
#define CURLY_B_max_t8                 279     /*      0x117 */
#define CURLY_B_max_tb_pb                 556  /*      0x22c */
#define CURLY_B_max_tb_p8                 557  /*      0x22d */
#define CURLY_B_max_t8_pb                 558  /*      0x22e */
#define CURLY_B_max_t8_p8                 559  /*      0x22f */

#define CURLY_B_max_fail            140        /* 0x8c state for CURLY */
#define CURLY_B_max_fail_tb            280     /*      0x118 */
#define CURLY_B_max_fail_t8            281     /*      0x119 */
#define CURLY_B_max_fail_tb_pb            560  /*      0x230 */
#define CURLY_B_max_fail_tb_p8            561  /*      0x231 */
#define CURLY_B_max_fail_t8_pb            562  /*      0x232 */
#define CURLY_B_max_fail_t8_p8            563  /*      0x233 */

#define COMMIT_next                 141        /* 0x8d state for COMMIT */
#define COMMIT_next_tb                 282     /*      0x11a */
#define COMMIT_next_t8                 283     /*      0x11b */
#define COMMIT_next_tb_pb                 564  /*      0x234 */
#define COMMIT_next_tb_p8                 565  /*      0x235 */
#define COMMIT_next_t8_pb                 566  /*      0x236 */
#define COMMIT_next_t8_p8                 567  /*      0x237 */

#define COMMIT_next_fail            142        /* 0x8e state for COMMIT */
#define COMMIT_next_fail_tb            284     /*      0x11c */
#define COMMIT_next_fail_t8            285     /*      0x11d */
#define COMMIT_next_fail_tb_pb            568  /*      0x238 */
#define COMMIT_next_fail_tb_p8            569  /*      0x239 */
#define COMMIT_next_fail_t8_pb            570  /*      0x23a */
#define COMMIT_next_fail_t8_p8            571  /*      0x23b */

#define MARKPOINT_next              143        /* 0x8f state for MARKPOINT */
#define MARKPOINT_next_tb              286     /*      0x11e */
#define MARKPOINT_next_t8              287     /*      0x11f */
#define MARKPOINT_next_tb_pb              572  /*      0x23c */
#define MARKPOINT_next_tb_p8              573  /*      0x23d */
#define MARKPOINT_next_t8_pb              574  /*      0x23e */
#define MARKPOINT_next_t8_p8              575  /*      0x23f */

#define MARKPOINT_next_fail         144        /* 0x90 state for MARKPOINT */
#define MARKPOINT_next_fail_tb         288     /*      0x120 */
#define MARKPOINT_next_fail_t8         289     /*      0x121 */
#define MARKPOINT_next_fail_tb_pb         576  /*      0x240 */
#define MARKPOINT_next_fail_tb_p8         577  /*      0x241 */
#define MARKPOINT_next_fail_t8_pb         578  /*      0x242 */
#define MARKPOINT_next_fail_t8_p8         579  /*      0x243 */

#define SKIP_next                   145        /* 0x91 state for SKIP */
#define SKIP_next_tb                   290     /*      0x122 */
#define SKIP_next_t8                   291     /*      0x123 */
#define SKIP_next_tb_pb                   580  /*      0x244 */
#define SKIP_next_tb_p8                   581  /*      0x245 */
#define SKIP_next_t8_pb                   582  /*      0x246 */
#define SKIP_next_t8_p8                   583  /*      0x247 */

#define SKIP_next_fail              146        /* 0x92 state for SKIP */
#define SKIP_next_fail_tb              292     /*      0x124 */
#define SKIP_next_fail_t8              293     /*      0x125 */
#define SKIP_next_fail_tb_pb              584  /*      0x248 */
#define SKIP_next_fail_tb_p8              585  /*      0x249 */
#define SKIP_next_fail_t8_pb              586  /*      0x24a */
#define SKIP_next_fail_t8_p8              587  /*      0x24b */

#define CUTGROUP_next               147        /* 0x93 state for CUTGROUP */
#define CUTGROUP_next_tb               294     /*      0x126 */
#define CUTGROUP_next_t8               295     /*      0x127 */
#define CUTGROUP_next_tb_pb               588  /*      0x24c */
#define CUTGROUP_next_tb_p8               589  /*      0x24d */
#define CUTGROUP_next_t8_pb               590  /*      0x24e */
#define CUTGROUP_next_t8_p8               591  /*      0x24f */

#define CUTGROUP_next_fail          148        /* 0x94 state for CUTGROUP */
#define CUTGROUP_next_fail_tb          296     /*      0x128 */
#define CUTGROUP_next_fail_t8          297     /*      0x129 */
#define CUTGROUP_next_fail_tb_pb          592  /*      0x250 */
#define CUTGROUP_next_fail_tb_p8          593  /*      0x251 */
#define CUTGROUP_next_fail_t8_pb          594  /*      0x252 */
#define CUTGROUP_next_fail_t8_p8          595  /*      0x253 */

#define KEEPS_next                  149        /* 0x95 state for KEEPS */
#define KEEPS_next_tb                  298     /*      0x12a */
#define KEEPS_next_t8                  299     /*      0x12b */
#define KEEPS_next_tb_pb                  596  /*      0x254 */
#define KEEPS_next_tb_p8                  597  /*      0x255 */
#define KEEPS_next_t8_pb                  598  /*      0x256 */
#define KEEPS_next_t8_p8                  599  /*      0x257 */

#define KEEPS_next_fail             150        /* 0x96 state for KEEPS */
#define KEEPS_next_fail_tb             300     /*      0x12c */
#define KEEPS_next_fail_t8             301     /*      0x12d */
#define KEEPS_next_fail_tb_pb             600  /*      0x258 */
#define KEEPS_next_fail_tb_p8             601  /*      0x259 */
#define KEEPS_next_fail_t8_pb             602  /*      0x25a */
#define KEEPS_next_fail_t8_p8             603  /*      0x25b */


/* PL_regkind[] What type of regop or state is this. */

#ifndef DOINIT
EXTCONST U8 PL_regkind[];
#else
EXTCONST U8 PL_regkind[] = {
	END,      	/* END                    */
	END,      	/* SUCCEED                */
	BOL,      	/* SBOL                   */
	BOL,      	/* MBOL                   */
	EOL,      	/* SEOL                   */
	EOL,      	/* MEOL                   */
	EOL,      	/* EOS                    */
	GPOS,     	/* GPOS                   */
	BOUND,    	/* BOUND                  */
	BOUND,    	/* BOUNDL                 */
	BOUND,    	/* BOUNDU                 */
	BOUND,    	/* BOUNDA                 */
	NBOUND,   	/* NBOUND                 */
	NBOUND,   	/* NBOUNDL                */
	NBOUND,   	/* NBOUNDU                */
	NBOUND,   	/* NBOUNDA                */
	REG_ANY,  	/* REG_ANY                */
	REG_ANY,  	/* SANY                   */
	ANYOF,    	/* ANYOF                  */
	ANYOF,    	/* ANYOFD                 */
	ANYOF,    	/* ANYOFL                 */
	ANYOF,    	/* ANYOFPOSIXL            */
	ANYOF,    	/* ANYOFH                 */
	ANYOF,    	/* ANYOFHb                */
	ANYOF,    	/* ANYOFHr                */
	ANYOF,    	/* ANYOFHs                */
	ANYOFR,   	/* ANYOFR                 */
	ANYOFR,   	/* ANYOFRb                */
	ANYOFM,   	/* ANYOFM                 */
	ANYOFM,   	/* NANYOFM                */
	POSIXD,   	/* POSIXD                 */
	POSIXD,   	/* POSIXL                 */
	POSIXD,   	/* POSIXU                 */
	POSIXD,   	/* POSIXA                 */
	NPOSIXD,  	/* NPOSIXD                */
	NPOSIXD,  	/* NPOSIXL                */
	NPOSIXD,  	/* NPOSIXU                */
	NPOSIXD,  	/* NPOSIXA                */
	CLUMP,    	/* CLUMP                  */
	BRANCH,   	/* BRANCH                 */
	EXACT,    	/* EXACT                  */
	EXACT,    	/* LEXACT                 */
	EXACT,    	/* EXACTL                 */
	EXACT,    	/* EXACTF                 */
	EXACT,    	/* EXACTFL                */
	EXACT,    	/* EXACTFU                */
	EXACT,    	/* EXACTFAA               */
	EXACT,    	/* EXACTFAA_NO_TRIE       */
	EXACT,    	/* EXACTFUP               */
	EXACT,    	/* EXACTFLU8              */
	EXACT,    	/* EXACT_REQ8             */
	EXACT,    	/* LEXACT_REQ8            */
	EXACT,    	/* EXACTFU_REQ8           */
	EXACT,    	/* EXACTFU_S_EDGE         */
	LNBREAK,  	/* LNBREAK                */
	TRIE,     	/* TRIE                   */
	TRIE,     	/* TRIEC                  */
	TRIE,     	/* AHOCORASICK            */
	TRIE,     	/* AHOCORASICKC           */
	NOTHING,  	/* NOTHING                */
	NOTHING,  	/* TAIL                   */
	STAR,     	/* STAR                   */
	PLUS,     	/* PLUS                   */
	CURLY,    	/* CURLY                  */
	CURLY,    	/* CURLYN                 */
	CURLY,    	/* CURLYM                 */
	CURLY,    	/* CURLYX                 */
	WHILEM,   	/* WHILEM                 */
	OPEN,     	/* OPEN                   */
	CLOSE,    	/* CLOSE                  */
	SROPEN,   	/* SROPEN                 */
	SRCLOSE,  	/* SRCLOSE                */
	REF,      	/* REF                    */
	REF,      	/* REFF                   */
	REF,      	/* REFFL                  */
	REF,      	/* REFFU                  */
	REF,      	/* REFFA                  */
	REF,      	/* REFN                   */
	REF,      	/* REFFN                  */
	REF,      	/* REFFLN                 */
	REF,      	/* REFFUN                 */
	REF,      	/* REFFAN                 */
	LONGJMP,  	/* LONGJMP                */
	BRANCHJ,  	/* BRANCHJ                */
	BRANCHJ,  	/* IFMATCH                */
	BRANCHJ,  	/* UNLESSM                */
	BRANCHJ,  	/* SUSPEND                */
	BRANCHJ,  	/* IFTHEN                 */
	GROUPP,   	/* GROUPP                 */
	EVAL,     	/* EVAL                   */
	MINMOD,   	/* MINMOD                 */
	LOGICAL,  	/* LOGICAL                */
	BRANCHJ,  	/* RENUM                  */
	GOSUB,    	/* GOSUB                  */
	GROUPPN,  	/* GROUPPN                */
	INSUBP,   	/* INSUBP                 */
	DEFINEP,  	/* DEFINEP                */
	ENDLIKE,  	/* ENDLIKE                */
	ENDLIKE,  	/* OPFAIL                 */
	ENDLIKE,  	/* ACCEPT                 */
	VERB,     	/* VERB                   */
	VERB,     	/* PRUNE                  */
	VERB,     	/* MARKPOINT              */
	VERB,     	/* SKIP                   */
	VERB,     	/* COMMIT                 */
	VERB,     	/* CUTGROUP               */
	KEEPS,    	/* KEEPS                  */
	END,      	/* LOOKBEHIND_END         */
	NOTHING,  	/* OPTIMIZED              */
	PSEUDO,   	/* PSEUDO                 */
	REGEX_SET,	/* REGEX_SET              */
	/* ------------ States ------------- */
	TRIE,     	/* TRIE_next              */
	TRIE,     	/* TRIE_next_fail         */
	EVAL,     	/* EVAL_B                 */
	EVAL,     	/* EVAL_B_fail            */
	EVAL,     	/* EVAL_postponed_AB      */
	EVAL,     	/* EVAL_postponed_AB_fail */
	CURLYX,   	/* CURLYX_end             */
	CURLYX,   	/* CURLYX_end_fail        */
	WHILEM,   	/* WHILEM_A_pre           */
	WHILEM,   	/* WHILEM_A_pre_fail      */
	WHILEM,   	/* WHILEM_A_min           */
	WHILEM,   	/* WHILEM_A_min_fail      */
	WHILEM,   	/* WHILEM_A_max           */
	WHILEM,   	/* WHILEM_A_max_fail      */
	WHILEM,   	/* WHILEM_B_min           */
	WHILEM,   	/* WHILEM_B_min_fail      */
	WHILEM,   	/* WHILEM_B_max           */
	WHILEM,   	/* WHILEM_B_max_fail      */
	BRANCH,   	/* BRANCH_next            */
	BRANCH,   	/* BRANCH_next_fail       */
	CURLYM,   	/* CURLYM_A               */
	CURLYM,   	/* CURLYM_A_fail          */
	CURLYM,   	/* CURLYM_B               */
	CURLYM,   	/* CURLYM_B_fail          */
	IFMATCH,  	/* IFMATCH_A              */
	IFMATCH,  	/* IFMATCH_A_fail         */
	CURLY,    	/* CURLY_B_min            */
	CURLY,    	/* CURLY_B_min_fail       */
	CURLY,    	/* CURLY_B_max            */
	CURLY,    	/* CURLY_B_max_fail       */
	COMMIT,   	/* COMMIT_next            */
	COMMIT,   	/* COMMIT_next_fail       */
	MARKPOINT,	/* MARKPOINT_next         */
	MARKPOINT,	/* MARKPOINT_next_fail    */
	SKIP,     	/* SKIP_next              */
	SKIP,     	/* SKIP_next_fail         */
	CUTGROUP, 	/* CUTGROUP_next          */
	CUTGROUP, 	/* CUTGROUP_next_fail     */
	KEEPS,    	/* KEEPS_next             */
	KEEPS,    	/* KEEPS_next_fail        */
};
#endif

#ifdef REG_COMP_C

/* regarglen[] - How large is the argument part of the node (in regnodes) */

static const U8 regarglen[] = {
	0,                                   	/* END          */
	0,                                   	/* SUCCEED      */
	0,                                   	/* SBOL         */
	0,                                   	/* MBOL         */
	0,                                   	/* SEOL         */
	0,                                   	/* MEOL         */
	0,                                   	/* EOS          */
	0,                                   	/* GPOS         */
	0,                                   	/* BOUND        */
	0,                                   	/* BOUNDL       */
	0,                                   	/* BOUNDU       */
	0,                                   	/* BOUNDA       */
	0,                                   	/* NBOUND       */
	0,                                   	/* NBOUNDL      */
	0,                                   	/* NBOUNDU      */
	0,                                   	/* NBOUNDA      */
	0,                                   	/* REG_ANY      */
	0,                                   	/* SANY         */
	EXTRA_SIZE(struct regnode_charclass),	/* ANYOF        */
	EXTRA_SIZE(struct regnode_charclass),	/* ANYOFD       */
	EXTRA_SIZE(struct regnode_charclass),	/* ANYOFL       */
	EXTRA_SIZE(struct regnode_charclass_posixl),	/* ANYOFPOSIXL  */
	EXTRA_SIZE(struct regnode_1),        	/* ANYOFH       */
	EXTRA_SIZE(struct regnode_1),        	/* ANYOFHb      */
	EXTRA_SIZE(struct regnode_1),        	/* ANYOFHr      */
	EXTRA_SIZE(struct regnode_1),        	/* ANYOFHs      */
	EXTRA_SIZE(struct regnode_1),        	/* ANYOFR       */
	EXTRA_SIZE(struct regnode_1),        	/* ANYOFRb      */
	EXTRA_SIZE(struct regnode_1),        	/* ANYOFM       */
	EXTRA_SIZE(struct regnode_1),        	/* NANYOFM      */
	0,                                   	/* POSIXD       */
	0,                                   	/* POSIXL       */
	0,                                   	/* POSIXU       */
	0,                                   	/* POSIXA       */
	0,                                   	/* NPOSIXD      */
	0,                                   	/* NPOSIXL      */
	0,                                   	/* NPOSIXU      */
	0,                                   	/* NPOSIXA      */
	0,                                   	/* CLUMP        */
	0,                                   	/* BRANCH       */
	0,                                   	/* EXACT        */
	EXTRA_SIZE(struct regnode_1),        	/* LEXACT       */
	0,                                   	/* EXACTL       */
	0,                                   	/* EXACTF       */
	0,                                   	/* EXACTFL      */
	0,                                   	/* EXACTFU      */
	0,                                   	/* EXACTFAA     */
	0,                                   	/* EXACTFAA_NO_TRIE */
	0,                                   	/* EXACTFUP     */
	0,                                   	/* EXACTFLU8    */
	0,                                   	/* EXACT_REQ8   */
	EXTRA_SIZE(struct regnode_1),        	/* LEXACT_REQ8  */
	0,                                   	/* EXACTFU_REQ8 */
	0,                                   	/* EXACTFU_S_EDGE */
	0,                                   	/* LNBREAK      */
	EXTRA_SIZE(struct regnode_1),        	/* TRIE         */
	EXTRA_SIZE(struct regnode_charclass),	/* TRIEC        */
	EXTRA_SIZE(struct regnode_1),        	/* AHOCORASICK  */
	EXTRA_SIZE(struct regnode_charclass),	/* AHOCORASICKC */
	0,                                   	/* NOTHING      */
	0,                                   	/* TAIL         */
	0,                                   	/* STAR         */
	0,                                   	/* PLUS         */
	EXTRA_SIZE(struct regnode_2),        	/* CURLY        */
	EXTRA_SIZE(struct regnode_2),        	/* CURLYN       */
	EXTRA_SIZE(struct regnode_2),        	/* CURLYM       */
	EXTRA_SIZE(struct regnode_2),        	/* CURLYX       */
	0,                                   	/* WHILEM       */
	EXTRA_SIZE(struct regnode_1),        	/* OPEN         */
	EXTRA_SIZE(struct regnode_1),        	/* CLOSE        */
	0,                                   	/* SROPEN       */
	0,                                   	/* SRCLOSE      */
	EXTRA_SIZE(struct regnode_1),        	/* REF          */
	EXTRA_SIZE(struct regnode_1),        	/* REFF         */
	EXTRA_SIZE(struct regnode_1),        	/* REFFL        */
	EXTRA_SIZE(struct regnode_1),        	/* REFFU        */
	EXTRA_SIZE(struct regnode_1),        	/* REFFA        */
	EXTRA_SIZE(struct regnode_1),        	/* REFN         */
	EXTRA_SIZE(struct regnode_1),        	/* REFFN        */
	EXTRA_SIZE(struct regnode_1),        	/* REFFLN       */
	EXTRA_SIZE(struct regnode_1),        	/* REFFUN       */
	EXTRA_SIZE(struct regnode_1),        	/* REFFAN       */
	EXTRA_SIZE(struct regnode_1),        	/* LONGJMP      */
	EXTRA_SIZE(struct regnode_1),        	/* BRANCHJ      */
	EXTRA_SIZE(struct regnode_1),        	/* IFMATCH      */
	EXTRA_SIZE(struct regnode_1),        	/* UNLESSM      */
	EXTRA_SIZE(struct regnode_1),        	/* SUSPEND      */
	EXTRA_SIZE(struct regnode_1),        	/* IFTHEN       */
	EXTRA_SIZE(struct regnode_1),        	/* GROUPP       */
	EXTRA_SIZE(struct regnode_2L),       	/* EVAL         */
	0,                                   	/* MINMOD       */
	0,                                   	/* LOGICAL      */
	EXTRA_SIZE(struct regnode_1),        	/* RENUM        */
	EXTRA_SIZE(struct regnode_2L),       	/* GOSUB        */
	EXTRA_SIZE(struct regnode_1),        	/* GROUPPN      */
	EXTRA_SIZE(struct regnode_1),        	/* INSUBP       */
	EXTRA_SIZE(struct regnode_1),        	/* DEFINEP      */
	0,                                   	/* ENDLIKE      */
	EXTRA_SIZE(struct regnode_1),        	/* OPFAIL       */
	EXTRA_SIZE(struct regnode_2L),       	/* ACCEPT       */
	EXTRA_SIZE(struct regnode_1),        	/* VERB         */
	EXTRA_SIZE(struct regnode_1),        	/* PRUNE        */
	EXTRA_SIZE(struct regnode_1),        	/* MARKPOINT    */
	EXTRA_SIZE(struct regnode_1),        	/* SKIP         */
	EXTRA_SIZE(struct regnode_1),        	/* COMMIT       */
	EXTRA_SIZE(struct regnode_1),        	/* CUTGROUP     */
	0,                                   	/* KEEPS        */
	0,                                   	/* LOOKBEHIND_END */
	0,                                   	/* OPTIMIZED    */
	0,                                   	/* PSEUDO       */
	EXTRA_SIZE(struct regnode_p),        	/* REGEX_SET    */
};

/* reg_off_by_arg[] - Which argument holds the offset to the next node */

static const char reg_off_by_arg[] = {
	0,	/* END          */
	0,	/* SUCCEED      */
	0,	/* SBOL         */
	0,	/* MBOL         */
	0,	/* SEOL         */
	0,	/* MEOL         */
	0,	/* EOS          */
	0,	/* GPOS         */
	0,	/* BOUND        */
	0,	/* BOUNDL       */
	0,	/* BOUNDU       */
	0,	/* BOUNDA       */
	0,	/* NBOUND       */
	0,	/* NBOUNDL      */
	0,	/* NBOUNDU      */
	0,	/* NBOUNDA      */
	0,	/* REG_ANY      */
	0,	/* SANY         */
	0,	/* ANYOF        */
	0,	/* ANYOFD       */
	0,	/* ANYOFL       */
	0,	/* ANYOFPOSIXL  */
	0,	/* ANYOFH       */
	0,	/* ANYOFHb      */
	0,	/* ANYOFHr      */
	0,	/* ANYOFHs      */
	0,	/* ANYOFR       */
	0,	/* ANYOFRb      */
	0,	/* ANYOFM       */
	0,	/* NANYOFM      */
	0,	/* POSIXD       */
	0,	/* POSIXL       */
	0,	/* POSIXU       */
	0,	/* POSIXA       */
	0,	/* NPOSIXD      */
	0,	/* NPOSIXL      */
	0,	/* NPOSIXU      */
	0,	/* NPOSIXA      */
	0,	/* CLUMP        */
	0,	/* BRANCH       */
	0,	/* EXACT        */
	0,	/* LEXACT       */
	0,	/* EXACTL       */
	0,	/* EXACTF       */
	0,	/* EXACTFL      */
	0,	/* EXACTFU      */
	0,	/* EXACTFAA     */
	0,	/* EXACTFAA_NO_TRIE */
	0,	/* EXACTFUP     */
	0,	/* EXACTFLU8    */
	0,	/* EXACT_REQ8   */
	0,	/* LEXACT_REQ8  */
	0,	/* EXACTFU_REQ8 */
	0,	/* EXACTFU_S_EDGE */
	0,	/* LNBREAK      */
	0,	/* TRIE         */
	0,	/* TRIEC        */
	0,	/* AHOCORASICK  */
	0,	/* AHOCORASICKC */
	0,	/* NOTHING      */
	0,	/* TAIL         */
	0,	/* STAR         */
	0,	/* PLUS         */
	0,	/* CURLY        */
	0,	/* CURLYN       */
	0,	/* CURLYM       */
	0,	/* CURLYX       */
	0,	/* WHILEM       */
	0,	/* OPEN         */
	0,	/* CLOSE        */
	0,	/* SROPEN       */
	0,	/* SRCLOSE      */
	0,	/* REF          */
	0,	/* REFF         */
	0,	/* REFFL        */
	0,	/* REFFU        */
	0,	/* REFFA        */
	0,	/* REFN         */
	0,	/* REFFN        */
	0,	/* REFFLN       */
	0,	/* REFFUN       */
	0,	/* REFFAN       */
	1,	/* LONGJMP      */
	1,	/* BRANCHJ      */
	1,	/* IFMATCH      */
	1,	/* UNLESSM      */
	1,	/* SUSPEND      */
	1,	/* IFTHEN       */
	0,	/* GROUPP       */
	0,	/* EVAL         */
	0,	/* MINMOD       */
	0,	/* LOGICAL      */
	1,	/* RENUM        */
	0,	/* GOSUB        */
	0,	/* GROUPPN      */
	0,	/* INSUBP       */
	0,	/* DEFINEP      */
	0,	/* ENDLIKE      */
	0,	/* OPFAIL       */
	0,	/* ACCEPT       */
	0,	/* VERB         */
	0,	/* PRUNE        */
	0,	/* MARKPOINT    */
	0,	/* SKIP         */
	0,	/* COMMIT       */
	0,	/* CUTGROUP     */
	0,	/* KEEPS        */
	0,	/* LOOKBEHIND_END */
	0,	/* OPTIMIZED    */
	0,	/* PSEUDO       */
	0,	/* REGEX_SET    */
};

#endif /* REG_COMP_C */


/* reg_name[] - Opcode/state names in string form, for debugging */

#ifndef DOINIT
EXTCONST char * PL_reg_name[];
#else
EXTCONST char * const PL_reg_name[] = {
	"END",                   	/* 0000 */
	"SUCCEED",               	/* 0x01 */
	"SBOL",                  	/* 0x02 */
	"MBOL",                  	/* 0x03 */
	"SEOL",                  	/* 0x04 */
	"MEOL",                  	/* 0x05 */
	"EOS",                   	/* 0x06 */
	"GPOS",                  	/* 0x07 */
	"BOUND",                 	/* 0x08 */
	"BOUNDL",                	/* 0x09 */
	"BOUNDU",                	/* 0x0a */
	"BOUNDA",                	/* 0x0b */
	"NBOUND",                	/* 0x0c */
	"NBOUNDL",               	/* 0x0d */
	"NBOUNDU",               	/* 0x0e */
	"NBOUNDA",               	/* 0x0f */
	"REG_ANY",               	/* 0x10 */
	"SANY",                  	/* 0x11 */
	"ANYOF",                 	/* 0x12 */
	"ANYOFD",                	/* 0x13 */
	"ANYOFL",                	/* 0x14 */
	"ANYOFPOSIXL",           	/* 0x15 */
	"ANYOFH",                	/* 0x16 */
	"ANYOFHb",               	/* 0x17 */
	"ANYOFHr",               	/* 0x18 */
	"ANYOFHs",               	/* 0x19 */
	"ANYOFR",                	/* 0x1a */
	"ANYOFRb",               	/* 0x1b */
	"ANYOFM",                	/* 0x1c */
	"NANYOFM",               	/* 0x1d */
	"POSIXD",                	/* 0x1e */
	"POSIXL",                	/* 0x1f */
	"POSIXU",                	/* 0x20 */
	"POSIXA",                	/* 0x21 */
	"NPOSIXD",               	/* 0x22 */
	"NPOSIXL",               	/* 0x23 */
	"NPOSIXU",               	/* 0x24 */
	"NPOSIXA",               	/* 0x25 */
	"CLUMP",                 	/* 0x26 */
	"BRANCH",                	/* 0x27 */
	"EXACT",                 	/* 0x28 */
	"LEXACT",                	/* 0x29 */
	"EXACTL",                	/* 0x2a */
	"EXACTF",                	/* 0x2b */
	"EXACTFL",               	/* 0x2c */
	"EXACTFU",               	/* 0x2d */
	"EXACTFAA",              	/* 0x2e */
	"EXACTFAA_NO_TRIE",      	/* 0x2f */
	"EXACTFUP",              	/* 0x30 */
	"EXACTFLU8",             	/* 0x31 */
	"EXACT_REQ8",            	/* 0x32 */
	"LEXACT_REQ8",           	/* 0x33 */
	"EXACTFU_REQ8",          	/* 0x34 */
	"EXACTFU_S_EDGE",        	/* 0x35 */
	"LNBREAK",               	/* 0x36 */
	"TRIE",                  	/* 0x37 */
	"TRIEC",                 	/* 0x38 */
	"AHOCORASICK",           	/* 0x39 */
	"AHOCORASICKC",          	/* 0x3a */
	"NOTHING",               	/* 0x3b */
	"TAIL",                  	/* 0x3c */
	"STAR",                  	/* 0x3d */
	"PLUS",                  	/* 0x3e */
	"CURLY",                 	/* 0x3f */
	"CURLYN",                	/* 0x40 */
	"CURLYM",                	/* 0x41 */
	"CURLYX",                	/* 0x42 */
	"WHILEM",                	/* 0x43 */
	"OPEN",                  	/* 0x44 */
	"CLOSE",                 	/* 0x45 */
	"SROPEN",                	/* 0x46 */
	"SRCLOSE",               	/* 0x47 */
	"REF",                   	/* 0x48 */
	"REFF",                  	/* 0x49 */
	"REFFL",                 	/* 0x4a */
	"REFFU",                 	/* 0x4b */
	"REFFA",                 	/* 0x4c */
	"REFN",                  	/* 0x4d */
	"REFFN",                 	/* 0x4e */
	"REFFLN",                	/* 0x4f */
	"REFFUN",                	/* 0x50 */
	"REFFAN",                	/* 0x51 */
	"LONGJMP",               	/* 0x52 */
	"BRANCHJ",               	/* 0x53 */
	"IFMATCH",               	/* 0x54 */
	"UNLESSM",               	/* 0x55 */
	"SUSPEND",               	/* 0x56 */
	"IFTHEN",                	/* 0x57 */
	"GROUPP",                	/* 0x58 */
	"EVAL",                  	/* 0x59 */
	"MINMOD",                	/* 0x5a */
	"LOGICAL",               	/* 0x5b */
	"RENUM",                 	/* 0x5c */
	"GOSUB",                 	/* 0x5d */
	"GROUPPN",               	/* 0x5e */
	"INSUBP",                	/* 0x5f */
	"DEFINEP",               	/* 0x60 */
	"ENDLIKE",               	/* 0x61 */
	"OPFAIL",                	/* 0x62 */
	"ACCEPT",                	/* 0x63 */
	"VERB",                  	/* 0x64 */
	"PRUNE",                 	/* 0x65 */
	"MARKPOINT",             	/* 0x66 */
	"SKIP",                  	/* 0x67 */
	"COMMIT",                	/* 0x68 */
	"CUTGROUP",              	/* 0x69 */
	"KEEPS",                 	/* 0x6a */
	"LOOKBEHIND_END",        	/* 0x6b */
	"OPTIMIZED",             	/* 0x6c */
	"PSEUDO",                	/* 0x6d */
	"REGEX_SET",             	/* 0x6e */
	/* ------------ States ------------- */
	"TRIE_next",             	/* REGNODE_MAX +0x01 */
	"TRIE_next_fail",        	/* REGNODE_MAX +0x02 */
	"EVAL_B",                	/* REGNODE_MAX +0x03 */
	"EVAL_B_fail",           	/* REGNODE_MAX +0x04 */
	"EVAL_postponed_AB",     	/* REGNODE_MAX +0x05 */
	"EVAL_postponed_AB_fail",	/* REGNODE_MAX +0x06 */
	"CURLYX_end",            	/* REGNODE_MAX +0x07 */
	"CURLYX_end_fail",       	/* REGNODE_MAX +0x08 */
	"WHILEM_A_pre",          	/* REGNODE_MAX +0x09 */
	"WHILEM_A_pre_fail",     	/* REGNODE_MAX +0x0a */
	"WHILEM_A_min",          	/* REGNODE_MAX +0x0b */
	"WHILEM_A_min_fail",     	/* REGNODE_MAX +0x0c */
	"WHILEM_A_max",          	/* REGNODE_MAX +0x0d */
	"WHILEM_A_max_fail",     	/* REGNODE_MAX +0x0e */
	"WHILEM_B_min",          	/* REGNODE_MAX +0x0f */
	"WHILEM_B_min_fail",     	/* REGNODE_MAX +0x10 */
	"WHILEM_B_max",          	/* REGNODE_MAX +0x11 */
	"WHILEM_B_max_fail",     	/* REGNODE_MAX +0x12 */
	"BRANCH_next",           	/* REGNODE_MAX +0x13 */
	"BRANCH_next_fail",      	/* REGNODE_MAX +0x14 */
	"CURLYM_A",              	/* REGNODE_MAX +0x15 */
	"CURLYM_A_fail",         	/* REGNODE_MAX +0x16 */
	"CURLYM_B",              	/* REGNODE_MAX +0x17 */
	"CURLYM_B_fail",         	/* REGNODE_MAX +0x18 */
	"IFMATCH_A",             	/* REGNODE_MAX +0x19 */
	"IFMATCH_A_fail",        	/* REGNODE_MAX +0x1a */
	"CURLY_B_min",           	/* REGNODE_MAX +0x1b */
	"CURLY_B_min_fail",      	/* REGNODE_MAX +0x1c */
	"CURLY_B_max",           	/* REGNODE_MAX +0x1d */
	"CURLY_B_max_fail",      	/* REGNODE_MAX +0x1e */
	"COMMIT_next",           	/* REGNODE_MAX +0x1f */
	"COMMIT_next_fail",      	/* REGNODE_MAX +0x20 */
	"MARKPOINT_next",        	/* REGNODE_MAX +0x21 */
	"MARKPOINT_next_fail",   	/* REGNODE_MAX +0x22 */
	"SKIP_next",             	/* REGNODE_MAX +0x23 */
	"SKIP_next_fail",        	/* REGNODE_MAX +0x24 */
	"CUTGROUP_next",         	/* REGNODE_MAX +0x25 */
	"CUTGROUP_next_fail",    	/* REGNODE_MAX +0x26 */
	"KEEPS_next",            	/* REGNODE_MAX +0x27 */
	"KEEPS_next_fail",       	/* REGNODE_MAX +0x28 */
};
#endif /* DOINIT */

/* PL_reg_extflags_name[] - Opcode/state names in string form, for debugging */

#ifndef DOINIT
EXTCONST char * PL_reg_extflags_name[];
#else
EXTCONST char * const PL_reg_extflags_name[] = {
	/* Bits in extflags defined: 11111111111111110000111111111111 */
	"MULTILINE",        /* 0x00000001 */
	"SINGLELINE",       /* 0x00000002 */
	"FOLD",             /* 0x00000004 */
	"EXTENDED",         /* 0x00000008 */
	"EXTENDED_MORE",    /* 0x00000010 */
	"NOCAPTURE",        /* 0x00000020 */
	"KEEPCOPY",         /* 0x00000040 */
	"CHARSET0",         /* 0x00000080 : "CHARSET" - 0x00000380 */
	"CHARSET1",         /* 0x00000100 : "CHARSET" - 0x00000380 */
	"CHARSET2",         /* 0x00000200 : "CHARSET" - 0x00000380 */
	"STRICT",           /* 0x00000400 */
	"SPLIT",            /* 0x00000800 */
	"UNUSED_BIT_12",    /* 0x00001000 */
	"UNUSED_BIT_13",    /* 0x00002000 */
	"UNUSED_BIT_14",    /* 0x00004000 */
	"UNUSED_BIT_15",    /* 0x00008000 */
	"NO_INPLACE_SUBST", /* 0x00010000 */
	"EVAL_SEEN",        /* 0x00020000 */
	"UNBOUNDED_QUANTIFIER_SEEN",/* 0x00040000 */
	"CHECK_ALL",        /* 0x00080000 */
	"MATCH_UTF8",       /* 0x00100000 */
	"USE_INTUIT_NOML",  /* 0x00200000 */
	"USE_INTUIT_ML",    /* 0x00400000 */
	"INTUIT_TAIL",      /* 0x00800000 */
	"IS_ANCHORED",      /* 0x01000000 */
	"COPY_DONE",        /* 0x02000000 */
	"TAINTED_SEEN",     /* 0x04000000 */
	"TAINTED",          /* 0x08000000 */
	"START_ONLY",       /* 0x10000000 */
	"SKIPWHITE",        /* 0x20000000 */
	"WHITE",            /* 0x40000000 */
	"NULL",             /* 0x80000000 */
};
#endif /* DOINIT */

#ifdef DEBUGGING
#  define REG_EXTFLAGS_NAME_SIZE 32
#endif

/* PL_reg_intflags_name[] - Opcode/state names in string form, for debugging */

#ifndef DOINIT
EXTCONST char * PL_reg_intflags_name[];
#else
EXTCONST char * const PL_reg_intflags_name[] = {
	"SKIP",                       /* 0x00000001 - PREGf_SKIP */
	"IMPLICIT",                   /* 0x00000002 - PREGf_IMPLICIT -  Converted .* to ^.*  */
	"NAUGHTY",                    /* 0x00000004 - PREGf_NAUGHTY -  how exponential is this pattern?  */
	"VERBARG_SEEN",               /* 0x00000008 - PREGf_VERBARG_SEEN */
	"CUTGROUP_SEEN",              /* 0x00000010 - PREGf_CUTGROUP_SEEN */
	"USE_RE_EVAL",                /* 0x00000020 - PREGf_USE_RE_EVAL -  compiled with "use re 'eval'"  */
	"NOSCAN",                     /* 0x00000040 - PREGf_NOSCAN */
	"GPOS_SEEN",                  /* 0x00000100 - PREGf_GPOS_SEEN */
	"GPOS_FLOAT",                 /* 0x00000200 - PREGf_GPOS_FLOAT */
	"ANCH_MBOL",                  /* 0x00000400 - PREGf_ANCH_MBOL */
	"ANCH_SBOL",                  /* 0x00000800 - PREGf_ANCH_SBOL */
	"ANCH_GPOS",                  /* 0x00001000 - PREGf_ANCH_GPOS */
	"RECURSE_SEEN",               /* 0x00002000 - PREGf_RECURSE_SEEN */
};
#endif /* DOINIT */

#ifdef DEBUGGING
#  define REG_INTFLAGS_NAME_SIZE 13
#endif

/* The following have no fixed length. U8 so we can do strchr() on it. */
#define REGNODE_VARIES(node) (PL_varies_bitmask[(node) >> 3] & (1 << ((node) & 7)))

#ifndef DOINIT
EXTCONST U8 PL_varies[] __attribute__deprecated__;
#else
EXTCONST U8 PL_varies[] __attribute__deprecated__ = {
    CLUMP, BRANCH, STAR, PLUS, CURLY, CURLYN, CURLYM, CURLYX, WHILEM, REF,
    REFF, REFFL, REFFU, REFFA, REFN, REFFN, REFFLN, REFFUN, REFFAN,
    BRANCHJ, SUSPEND, IFTHEN,
    0
};
#endif /* DOINIT */

#ifndef DOINIT
EXTCONST U8 PL_varies_bitmask[];
#else
EXTCONST U8 PL_varies_bitmask[] = {
    0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xE0, 0x0F, 0xFF, 0xCB, 0x00, 0x00, 0x00
};
#endif /* DOINIT */

/* The following always have a length of 1. U8 we can do strchr() on it. */
/* (Note that length 1 means "one character" under UTF8, not "one octet".) */
#define REGNODE_SIMPLE(node) (PL_simple_bitmask[(node) >> 3] & (1 << ((node) & 7)))

#ifndef DOINIT
EXTCONST U8 PL_simple[] __attribute__deprecated__;
#else
EXTCONST U8 PL_simple[] __attribute__deprecated__ = {
    REG_ANY, SANY, ANYOF, ANYOFD, ANYOFL, ANYOFPOSIXL, ANYOFH, ANYOFHb,
    ANYOFHr, ANYOFHs, ANYOFR, ANYOFRb, ANYOFM, NANYOFM, POSIXD, POSIXL,
    POSIXU, POSIXA, NPOSIXD, NPOSIXL, NPOSIXU, NPOSIXA, REGEX_SET,
    0
};
#endif /* DOINIT */

#ifndef DOINIT
EXTCONST U8 PL_simple_bitmask[];
#else
EXTCONST U8 PL_simple_bitmask[] = {
    0x00, 0x00, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40
};
#endif /* DOINIT */

/* Is 'op', known to be of type EXACT, folding? */
#define isEXACTFish(op) (__ASSERT_(PL_regkind[op] == EXACT) (PL_EXACTFish_bitmask & (1U << (op - EXACT))))

/* Do only UTF-8 target strings match 'op', known to be of type EXACT? */
#define isEXACT_REQ8(op) (__ASSERT_(PL_regkind[op] == EXACT) (PL_EXACT_REQ8_bitmask & (1U << (op - EXACT))))

#ifndef DOINIT
EXTCONST U32 PL_EXACTFish_bitmask;
EXTCONST U32 PL_EXACT_REQ8_bitmask;
#else
EXTCONST U32 PL_EXACTFish_bitmask = 0x33F8;
EXTCONST U32 PL_EXACT_REQ8_bitmask = 0x1E00;
#endif /* DOINIT */

#endif /* defined(PERL_CORE) || defined(PERL_EXT_RE_BUILD) */

/* ex: set ro: */
                                                                                                                                                                                                                                                                                                                                                                               usr/lib/x86_64-linux-gnu/perl/5.36.0/CORE/sbox32_hash.h                                             0000644 0000000 0000000 00000154635 14530460112 020236  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #ifndef DEBUG_SBOX32_HASH
#define DEBUG_SBOX32_HASH 0

#include "zaphod32_hash.h"

#if DEBUG_SBOX32_HASH == 1
#include <stdio.h>
#define SBOX32_WARN6(pat,v0,v1,v2,v3,v4,v5)    printf(pat, v0, v1, v2, v3, v4, v5)
#define SBOX32_WARN5(pat,v0,v1,v2,v3,v4)       printf(pat, v0, v1, v2, v3, v4)
#define SBOX32_WARN4(pat,v0,v1,v2,v3)          printf(pat, v0, v1, v2, v3)
#define SBOX32_WARN3(pat,v0,v1,v2)             printf(pat, v0, v1, v2)
#define SBOX32_WARN2(pat,v0,v1)                printf(pat, v0, v1)
#define NOTE3(pat,v0,v1,v2)             printf(pat, v0, v1, v2)
#elif DEBUG_SBOX32_HASH == 2
#define SBOX32_WARN6(pat,v0,v1,v2,v3,v4,v5)
#define SBOX32_WARN5(pat,v0,v1,v2,v3,v4)
#define SBOX32_WARN4(pat,v0,v1,v2,v3)
#define SBOX32_WARN3(pat,v0,v1,v2)
#define SBOX32_WARN2(pat,v0,v1)
#define NOTE3(pat,v0,v1,v2)             printf(pat, v0, v1, v2)
#else
#define SBOX32_WARN6(pat,v0,v1,v2,v3,v4,v5)
#define SBOX32_WARN5(pat,v0,v1,v2,v3,v4)
#define SBOX32_WARN4(pat,v0,v1,v2,v3)
#define SBOX32_WARN3(pat,v0,v1,v2)
#define NOTE3(pat,v0,v1,v2)
#define SBOX32_WARN2(pat,v0,v1)
#endif

#ifndef PERL_SEEN_HV_FUNC_H_
#if !defined(U32) 
#include <stdint.h>
#define U32 uint32_t
#endif

#if !defined(U8)
#define U8 unsigned char
#endif

#if !defined(U16)
#define U16 uint16_t
#endif

#ifndef STRLEN
