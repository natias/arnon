=item *

L<Exporter> has been upgraded from version 5.77 to 5.78.

=item *

L<ExtUtils::CBuilder> has been upgraded from version 0.280238 to 0.280240.

=item *

L<ExtUtils::Manifest> has been upgraded from version 1.73 to 1.75.

=item *

L<ExtUtils::Miniperl> has been upgraded from version 1.13 to 1.14.

=item *

L<Fcntl> has been upgraded from version 1.15 to 1.18.

The old module documentation stub has been greatly expanded and revised.

Adds support for the C<O_TMPFILE> flag on Linux.

=item *

L<feature> has been upgraded from version 1.82 to 1.89.

It now documents the C<:all> feature bundle, and suggests a reason why you may
not wish to use it.

=item *

L<fields> has been upgraded from version 2.24 to 2.25.

=item *

L<File::Compare> has been upgraded from version 1.1007 to 1.1008.

=item *

L<File::Find> has been upgraded from version 1.43 to 1.44.

=item *

L<File::Glob> has been upgraded from version 1.40 to 1.42.

=item *

L<File::Spec> has been upgraded from version 3.89 to 3.90.

=item *

L<File::stat> has been upgraded from version 1.13 to 1.14.

=item *

L<FindBin> has been upgraded from version 1.53 to 1.54.

=item *

L<Getopt::Long> has been upgraded from version 2.54 to 2.57.

=item *

L<Getopt::Std> has been upgraded from version 1.13 to 1.14.

Documentation and test improvements only; no change in functionality.

=item *

L<Hash::Util> has been upgraded from version 0.30 to 0.32.

=item *

L<Hash::Util::FieldHash> has been upgraded from version 1.26 to 1.27.

=item *

L<HTTP::Tiny> has been upgraded from version 0.086 to 0.088.

=item *

L<I18N::Langinfo> has been upgraded from version 0.22 to 0.24.

It now handles the additional locale categories that Linux defines
beyond those in the POSIX Standard.

This fixes what is returned for the C<ALT_DIGITS> item, which has never
before worked properly in Perl.

=item *

L<IO> has been upgraded from version 1.52 to 1.55.

Fixed C<IO::Handle/blocking> on Windows, which has been non-functional
since IO 1.32.  [L<GH #17455|https://github.com/Perl/perl5/issues/17455>]

=item *

IO-Compress has been upgraded from version 2.204 to 2.212.

=item *

L<IO::Socket::IP> has been upgraded from version 0.41_01 to 0.42.

=item *

L<IO::Zlib> has been upgraded from version 1.14 to 1.15.

=item *

L<locale> has been upgraded from version 1.10 to 1.12.

=item *

L<Math::BigInt> has been upgraded from version 1.999837 to 2.003002.

=item *

L<Math::BigInt::FastCalc> has been upgraded from version 0.5013 to 0.5018.

=item *

L<Module::CoreList> has been upgraded from version 5.20230520 to 5.20240609.

=item *

L<Module::Metadata> has been upgraded from version 1.000037 to 1.000038.

=item *

L<mro> has been upgraded from version 1.28 to 1.29.

=item *

L<NDBM_File> has been upgraded from version 1.16 to 1.17.

=item *

L<Opcode> has been upgraded from version 1.64 to 1.65.

=item *

L<perl5db.pl> has been upgraded from version 1.77 to 1.78.

Made parsing of the C<l> command arguments saner.
[L<GH #21350|https://github.com/Perl/perl5/issues/21350>]

=item *

L<perlfaq> has been upgraded from version 5.20210520 to 5.20240218.

=item *

L<PerlIO::encoding> has been upgraded from version 0.30 to 0.31.

=item *

L<PerlIO::scalar> has been upgraded from version 0.31 to 0.32.

=item *

L<PerlIO::via> has been upgraded from version 0.18 to 0.19.

=item *

L<Pod::Checker> has been upgraded from version 1.75 to 1.77.

=item *

L<Pod::Html> has been upgraded from version 1.34 to 1.35.

=item *

L<Pod::Simple> has been upgraded from version 3.43 to 3.45.

=item *

L<podlators> has been upgraded from version 5.01 to 5.01_02.

=item *

L<POSIX> has been upgraded from version 2.13 to 2.20.

The C<mktime> function now works correctly on 32-bit platforms even if the
platform's C<time_t> type is larger than 32 bits. [L<GH #21551|https://github.com/Perl/perl5/issues/21551>]

The C<T_SIGNO> and C<T_FD> typemap entries have been fixed so they work with
any variable name, rather than just the hardcoded C<sig> and C<fd>.

The mappings for C<Mode_t>, C<pid_t>, C<Uid_t>, C<Gid_t> and C<Time_t> have
been updated to be integer types; previously they were C<NV> floating-point.

Adjusted the signbit() on NaN test to handle the unusual bit pattern
returned for NaN by Oracle Developer Studio's compiler.  [L<GH #21533|https://github.com/Perl/perl5/issues/21533>]

=item *

L<re> has been upgraded from version 0.44 to 0.47.

=item *

L<Safe> has been upgraded from version 2.44 to 2.46.

=item *

L<SelfLoader> has been upgraded from version 1.26 to 1.27.

=item *

L<Socket> has been upgraded from version 2.036 to 2.038.

=item *

L<strict> has been upgraded from version 1.12 to 1.13.

=item *

L<Test::Harness> has been upgraded from version 3.44 to 3.48.

=item *

L<Test::Simple> has been upgraded from version 1.302194 to 1.302199.

=item *

L<Text::Tabs> has been upgraded from version 2021.0814 to 2024.001.

=item *

L<Text::Wrap> has been upgraded from version 2021.0814 to 2024.001.

=item *

L<threads> has been upgraded from version 2.36 to 2.40.

An internal error has been made slightly more verbose
(C<Out of memory in perl:threads:ithread_create>).

=item *

L<threads::shared> has been upgraded from version 1.68 to 1.69.

=item *

L<Tie::File> has been upgraded from version 1.07 to 1.09.

Old compatibility code for perl 5.005 that was no longer functional has been
removed.

=item *

L<Time::gmtime> has been upgraded from version 1.04 to 1.05.

=item *

L<Time::HiRes> has been upgraded from version 1.9775 to 1.9777.

=item *

L<Time::Local> has been upgraded from version 1.30 to 1.35.

=item *

L<Time::localtime> has been upgraded from version 1.03 to 1.04.

=item *

L<Time::tm> has been upgraded from version 1.00 to 1.01.

=item *

L<UNIVERSAL> has been upgraded from version 1.15 to 1.17.

=item *

L<User::grent> has been upgraded from version 1.04 to 1.05.

=item *

L<User::pwent> has been upgraded from version 1.02 to 1.03.

=item *

L<version> has been upgraded from version 0.9929 to 0.9930.

=item *

L<warnings> has been upgraded from version 1.65 to 1.69.

=item *

L<XS::APItest> has been upgraded from version 1.32 to 1.36.

=item *

L<XS::Typemap> has been upgraded from version 0.19 to 0.20.

=back

=head1 Documentation

=head2 Changes to Existing Documentation

We have attempted to update the documentation to reflect the changes
listed in this document.  If you find any we have missed, open an issue
at L<https://github.com/Perl/perl5/issues>.

Additionally, the following selected changes have been made:

=head3 L<perlapi>

=over 4

=item *

Corrected the documentation for L<C<Perl_form>|perlapi/form>,
C<form_nocontext>, and C<vform>, which claimed that any later call to one
of them will destroy the previous returns from any.  This hasn't been true
since 5.6.0, except it does remain true if these are called during global
destruction.  With that caveat, the return of each of these is a fresh
string in a temporary that will automatically be freed by a call to
L<perlapi/C<FREETMPS>> or at at places such as statement boundaries.

=item *

Several internal functions now have documentation - the various C<newSUB>
functions, C<newANONLIST()>, C<newANONHASH()>, C<newSVREF()> and similar.

=back

=head3 L<perlclass>

=over 4

=item *

Added a list of known bugs in the experimental C<class> feature.

=back

=head3 L<perlfunc>

=over 4

=item *

The documentation for L<C<local>|perlfunc/local EXPR>,
L<C<my>|perlfunc/my VARLIST>, L<C<our>|perlfunc/our VARLIST>, and
L<C<state>|perlfunc/state VARLIST>, has been updated to include examples
and descriptions of their effects within a statement.

=back

=head3 L<perlguts>

=over 4

=item *

A new section has been added which describes the experimental
reference-counted argument stack build option (C<PERL_RC_STACK>).

=back

=head3 L<perlclib>

=over 4

=item *

Extensive guidance has been added for interfacing with the standard C
library, including many more functions to avoid, and how to cope with
locales and threads.

=back

=head3 L<perlhacktips>

=over 4

=item *

Document we can't use compound literals or array designators due to C++
compatibility.  [L<GH #21073|https://github.com/Perl/perl5/issues/21073>]

=item *

Document new functions C<sv_mark_arenas()> and C<sv_sweep_arenas()>
(which only exist on C<DEBUGGING> builds)

=item *

Added brief documentation for some tools useful when developing perl
itself on Windows or Cygwin.

=back

=head3 L<perllol>

=over 4

=item *

Removed indirect object syntax in C<Dumpvalue> example

=back

=head3 L<perlre>

=over 4

=item *

Removed statement suggesting C</p> is a no-op.

=back

=head3 L<perlref>

=over 4

=item *

Documented ref assignment in list context (as part of the C<refaliasing> feature)

=back

=head3 L<perlop>

=over 4

=item *

The section on the empty pattern C<//> has been amended to mention that the current dynamic scope is
used to find the last successful match.

=back

=head3 L<perlport>

=over 4

=item *

The C<-S> file test has been meaningful on Win32 since 5.37.6

=item *

The C<-l> file test is now meaningful on Win32

=item *

Some strange behaviour with C<.> at the end of names under Windows has been documented

=back

=head3 L<perlvar>

=over 4

=item *

Added documentation for an alternative to C<${^CAPTURE}>

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

L<Cannot use __CLASS__ outside of a method or field initializer expression|perldiag/"Cannot use __CLASS__ outside of a method or field initializer expression">

(F) A C<__CLASS__> expression yields the class name of the object instance
executing the current method, and therefore it can only be placed inside an
actual method (or method-like expression, such as a field initializer
expression).

=item *

L<get_layers: unknown argument '%s'|perldiag/"get_layers: unknown argument '%s'">

(F) You called PerlIO::get_layers() with an unknown argument. Legal
arguments are provided in key/value pairs, with the keys being one
of C<input>, C<output> or C<detail>, followed by a boolean.

=item

L<UNIVERSAL does not export anything|perldiag/"UNIVERSAL does not export anything">

(F) You asked UNIVERSAL to export something, but UNIVERSAL is the
base class for all classes and contains no exportable symbols.

=item *

L<Builtin version bundle "%s" is not supported by Perl|perldiag/Builtin version bundle "%s" is not supported by Perl>

(F) You attempted to C<use builtin :ver> for a version number that is either
older than 5.39 (when the ability was added), or newer than the current perl
version.

=item *

L<Invalid version bundle "%s"|perldiag/Invalid version bundle "%s">

(F) A version number that is used to specify an import bundle during a
C<use builtin ...> statement must be formatted as C<:MAJOR.MINOR> with an
optional third component, which is ignored.  Each component must be a number
of 1 to 3 digits. No other characters are permitted.  The value that was
specified does not conform to these rules.

=item *

L<Missing comma after first argument to return|perldiag/"Missing comma after first argument to return">

(F) While certain operators allow you to specify a filehandle or an
"indirect object" before the argument list, C<return> isn't one of
them.

=item *

L<Out of memory during vec in lvalue context|perldiag/"Out of memory during vec in lvalue context">

(F) An attempt was made to extend a string beyond the largest possible memory
allocation by assigning to C<vec()> called with a large second argument.

(This case used to throw a generic C<Out of memory!> error.)

=item *

L<Cannot create an object of incomplete class "%s"|perldiag/"Cannot create an object of incomplete class "%s"">

(F) An attempt was made to create an object of a class where the start
of the class definition has been seen, but the class has not been
completed.

This can happen for a failed eval, or if you attempt to create an
object at compile time before the class is complete:

  eval "class Foo {"; Foo->new; # error
  class Bar { BEGIN { Bar->new } }; # error

Previously perl would assert or crash. [L<GH #22159|https://github.com/Perl/perl5/issues/22159>]

=back

=head3 New Warnings

=over 4

=item *

L<< Forked open '%s' not meaningful in <>|perldiag/"Forked open '%s' not meaningful in <>" >>

(S inplace) You had C<|-> or C<-|> in C<@ARGV> and tried to use C<< <>
>> to read from it.

Previously this would fork and produce a confusing error message. [L<GH #21176|https://github.com/Perl/perl5/issues/21176>]

=item *

L<Attempt to call undefined %s method with arguments ("%s"%s) via package "%s" (Perhaps you forgot to load the package?)|perldiag/Attempt to call undefined %s method with arguments ("%s"%s) via package "%s" (Perhaps you forgot to load the package?)>

(D deprecated::missing_import_called_with_args) You called the
C<import()> or C<unimport()> method of a class that has no import method
defined in its inheritance graph, and passed an argument to the method.
This is very often the sign of a misspelled package name in a use or
require statement that has silently succeeded due to a case insensitive
file system.

Another common reason this may happen is when mistakenly attempting to
import or unimport a symbol from a class definition or package which
does not use C<Exporter> or otherwise define its own C<import> or
C<unimport> method.

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

L<Name "%s::%s" used only once: possible typo|perldiag/"Name "%s::%s" used only once: possible typo">

This warning now honors being marked as fatal.  [L<GH #13814|https://github.com/Perl/perl5/issues/13814>]

=item *

L<Out of memory in perl:%s|perldiag/"Out of memory in perl:%s">

There used to be several places in the perl core that would print a generic
C<Out of memory!> message and abort when memory allocation failed, giving no
indication which program it was that ran out of memory.  These have been
modified to include the word C<perl> and the general area of the allocation
failure, e.g. C<Out of memory in perl:util:safesysrealloc>.  [L<GH #21672|https://github.com/Perl/perl5/issues/21672>]

=item *

L<Possible precedence issue with control flow operator (%s)|perldiag/"Possible precedence issue with control flow operator (%s)">

This warning now mentions the name of the control flow operator that triggered
the diagnostic (e.g. C<return>, C<exit>, C<die>, etc).

It also covers more cases: Previously, the warning was only triggered if a
low-precedence logical operator (like C<and>, C<or>, C<xor>) was involved.  Now
it is also shown for misleading code like this:

    exit $x ? 0 : 1;  # actually parses as: exit($x) ? 0 : 1;
    exit $x == 0;     # actually parses as: exit($x) == 0;

=item *

L<Use of uninitialized value%s|perldiag/"Use of uninitialized value%s">

This warning is now slightly more accurate in cases involving C<length>,
C<pop>, C<shift>, or C<splice>:

    my $x;
    length($x) == 0
    # Before:
    #  Use of uninitialized value $x in numeric eq (==) at ...
    # Now:
    #  Use of uninitialized value length($x) in numeric eq (==) at ...

That is, the warning no longer implies that C<$x> was used directly as an
operand of C<==>, which it wasn't.

Similarly:

    my @xs;
    shift @xs == 0
    # Before:
    #  Use of uninitialized value within @xs in numeric eq (==) at ...
    # Now:
    #  Use of uninitialized value shift(@xs) in numeric eq (==) at ...

This is more accurate because there never was an C<undef> within C<@xs> as the
warning implied. (The warning for C<pop> works analogously.)

Finally:

    my @xs = (1, 2, 3);
    splice(@xs, 0, 0) == 0
    # Before:
    #  Use of uninitialized value within @xs in numeric eq (==) at ...
    # Now:
    #  Use of uninitialized value in numeric eq (==) at ...

That is, in cases where C<splice> returns C<undef>, it no longer
unconditionally blames its first argument. This was misleading because
C<splice> can return C<undef> even if none of its arguments contain C<undef>.

[L<GH #21930|https://github.com/Perl/perl5/issues/21930>]

=item *

L<Old package separator "'" deprecated|perldiag/"Old package separator "'" deprecated">

Prevent this warning appearing spuriously when checking the heuristic for the
L<You need to quote "%s"|perldiag/"You need to quote "%s""> warning.

[L<GH #22145|https://github.com/Perl/perl5/issues/22145>]

=back

=head1 Configuration and Compilation

=over 4

=item *

C<microperl>, long broken and of unclear present purpose, has been removed
as promised in L<Perl 5.18|perl5180delta/Future Deprecations>.

=item *

Fix here-doc used for code to probe C<LC_ALL> syntax for disparate
locales introduced in 5.39.2.  [L<GH #21451|https://github.com/Perl/perl5/issues/21451>]

=item *

You can now separately enable high water mark checks for non-DEBUGGING
or disable them for DEBUGGING builds with C<-Accflags=-DPERL_USE_HWM>
or C<-Accflags=-DPERL_NO_HWM> respectively.  The default remains the
same.  [L<GH #16607|https://github.com/Perl/perl5/issues/16607>]

=back

=head1 Testing

Tests were added and changed to reflect the other additions and
changes in this release.  Furthermore, these significant changes were
made:

=over 4

=item *

Update F<nm> output parsing for Darwin in F<t/porting/libperl.t> to handle
changes in the output of nm on Darwin.
[L<GH #21117|https://github.com/Perl/perl5/issues/21117>]

=item *

F<t/op/magic.t> would fail when C<ps> was the BusyBox implementation,
since that doesn't support the C<-p> flag and otherwise ignores a
process id on the command-line.  This caused F<TEST> failures on
BusyBox systems such as Alpine Linux.  [L<GH #17542|https://github.com/Perl/perl5/issues/17542>]

=item *

F<porting/globvar.t> now uses the more portable C<nm -P ...> to fetch
the names defined in an object file.  The parsing of the names found
in the object is now separated from processing them to handle the
duplication between local and global definitions on AIX.  [L<GH #21637|https://github.com/Perl/perl5/issues/21637>]

=item *

A test was added to F<lib/locale_threads.t> that extensively stress
tests locale handling.  It turns out that the libc implementations on
various platforms have bugs in this regard, including Linux, Windows,
*BSD derivatives including Darwin, and others.  Experimental versions of
this test have been used in the past few years to find bugs in the Perl
implementation and in those platforms, as well as to develop workarounds
in the Perl implementation, where feasible, for the platform bugs.
Multiple bug report tickets have been filed against platforms, and some
have been fixed.  The test checks that platforms that purport to support
thread-safe locale handling actually do so (and that perl works properly
on those that do;  The read-only variable C<${^SAFE_LOCALES}> is set to
1 if perl thinks the platform can handle this, whatever the platform's
documentation says).

Also tested for is if the various locale categories can indeed be set
independently to disparate locales.  (An example of where you might want
to do this is if you are a Western Canadian living and working in
Holland.  You likely will want to have the C<LC_MONETARY> locale be
set to where you are living, but have the other parts of your locale
retain your native English values.  Later, as you get a bit more
comfortable with Dutch, and in order to communicate better with your
colleagues, you might want to change C<LC_TIME> and C<LC_NUMERIC> to
Dutch, while leaving C<LC_CTYPE> and C<LC_COLLATE> set to English
indefinitely.)

=item *

The test F<t/porting/libperl.t> will no longer run in maint releases.
This test is sensitive to changes in the output of F<nm> on various
platforms, and tarballs aren't updated as we update this test in
blead.  [L<GH #21677|https://github.com/Perl/perl5/issues/21677>]

=back

=head1 Platform Support

=head2 New Platforms

=over 4

=item Serenity OS

Out of the box support for Serenity OS was added.

=back

=head2 Platform-Specific Notes

=over 4

=item Windows

Eliminated several header build warnings under MSVC with C</W4> to reduce noise
for embedders.  [L<GH #21031|https://github.com/Perl/perl5/issues/21031>]

Work around a bug in most 32-bit Mingw builds, where the generated
code, including the code in the gcc support library, assumes 16-byte
stack alignment, which 32-bit Windows does not preserve. [L<GH #21313|https://github.com/Perl/perl5/issues/21313>]

Enable C<copysign>, C<signbit>, C<acosh>, C<asinh>, C<atanh>, C<exp2>,
C<tgamma> in the bundled configuration used for MSVC.  [L<GH #21610|https://github.com/Perl/perl5/issues/21610>]

The build process no longer supports Visual Studio 2013.  This was
failing to build at a very basic level and there have been no reports
of such failures.  [L<GH #21624|https://github.com/Perl/perl5/issues/21624>]

=item Linux

The hints file has been updated to handle the Intel oneAPI DPC++/C++ compiler.

=item MacOS/Darwin

Don't set C<MACOSX_DEPLOYMENT_TARGET> when building on OS X 10.5.  [L<GH
#21367|https://github.com/Perl/perl5/issues/21367>]

=item VMS

Fixed the configure "installation prefix" prompt to accept a string rather than
yes/no.

Fixed compilation by defining proper value for
C<perl_lc_all_category_positions_init>.

Increased buffer size when reading F<config_H.SH> to fix compilation under
clang.

=item Oracle Developer Studio (Solaris, Oracle Linux)

Due to an apparent code generation bug, the default optimization level
for the Oracle Developer Studio (formerly Sun Workshop) compiler is
now C<-xO1>. [L<GH #21535|https://github.com/Perl/perl5/issues/21535>]

=back

=head1 Internal Changes

=over 4

=item *

C<PERL_RC_STACK> build option added.

This new build option is highly experimental and is not enabled by
default. Perl can be built with it by using the F<Configure> option
C<-Accflags='-DPERL_RC_STACK'>.

It makes the argument stack bump the reference count of SVs pushed onto
it. It is mostly functional, but currently slow and incomplete.

It is intended in the long term that this build option will become
the default option, and then finally the only option; but this will be
many releases away.

In particular, there is currently no support within XS code for using
these new features. So under this build option, all XS functions are
called via a backwards-compatibility wrapper which slows down such calls.

In future releases, better support for XS code is intended to be added.
It is expected that straightforward XS code will eventually be able to
make use of a reference-counted stack without modification, with any heavy
lifting being handled by the XS compiler (C<xsubpp>) and the macros which
it outputs. But code which implements PP() functions will eventually have
to be modified to use a new PP API: rpp_foo() rather than PUSHs() etc. But
this new API is not yet stable, nor has it yet been back-ported via
C<Devel::PPPort>.

See L<perlguts|perlguts/"Reference-counted argument stack"> for more
details.

=item *

A new API function has been added that simplifies C (or XS) code that creates
C<LISTOP> optree fragments.  C<newLISTOPn()> is a variadic function that takes
a C<NULL>-terminated list of child op pointers, and constructs a new checked
C<LISTOP> to contain them all.  This is simpler than creating a new plain
C<OP_LIST>, adding each child individually, and finally calling
C<op_convert_list()> in most code fragments.

=item *

The C<eval_sv()> API now accepts the C<G_USEHINTS> flag, which uses
the hints such as strict and features from C<PL_curcop> instead of the
default, which is to use default hints, e.g. no C<use vX.XX;>, no
strict, default features.

Beware if you use this flag in XS code: your evaluated code will need
to support whatever strictness or features are in effect at the point
your XS function is called.

[L<GH #21415|https://github.com/Perl/perl5/issues/21415>]

=item *

C<PERL_VERSION_LE> has been fixed to properly check for "less than or equal"
rather than "less than".

=item *

C<dAX>, C<dITEMS> and hence C<dXSARGS> now declare C<AX> and C<items>
as C<Stack_off_t> rather than C<SSize_t>.  This reverts back to
compatibility with pre-64-bit stack support for default builds of perl
where C<Stack_off_t> is C<I32>.  [L<GH #21782|https://github.com/Perl/perl5/issues/21782>]

=item *

A new function is now available to C<XS> code, L<perlapi/sv_langinfo>.
This provides the same information as the existing
L<perlapi/Perl_langinfo8>, but returns an SV instead of a S<C<char *>>,
so that programmers don't have to concern themselves with the UTF-8ness
of the result.  This new function is now the preferred interface for
C<XS> code to the L<nl_langinfo(3)> C<libc> function.  From Perl space,
this information continues to be provided by the L<I18N::Langinfo>
module.

=item *

glibc has an undocumented equivalent function to querylocale(), which
our experience indicates is reliable. When this is function is used,
it removes the need for perl to keep its own records, hence is more
efficient and guaranteed to be accurate. Use of this function can be
disabled by defining the C<NO_NL_LOCALE_NAME> build option

=back

=head1 Selected Bug Fixes

=over 4

=item *

The delimiter C<SYRIAC COLON SKEWED LEFT/RIGHT> pair has been removed
from the ones recognized by the C<extra_paired_delimiters> feature.
(See L<perlop/Quote and Quote-like Operators>.)  This is because those
characters are normally written right-to-left, and this could be
visually confusing [L<GH #22228|https://github.com/Perl/perl5/issues/22228>].
The change was actually to forbid any right-to-left delimiters, but this
pair is the only current instance that meets this criterion.  By policy,
this change means that the C<extra_paired_delimiters> feature cannot be
considered to have been stable long enough for its experimental status to
be removed.

=item *

C<use 5.36;> or later didn't enable the post parse reporting of L<Name
"%s::%s" used only once: possible typo|perldiag/"Name "%s::%s" used
only once: possible typo"> warnings when enabling warnings.
[L<GH #21271|https://github.com/Perl/perl5/issues/21271>]

=item *

Fix a crash or assertion when cleaning up a closure that refers to an
outside C<our> sub.  [L<GH #21067|https://github.com/Perl/perl5/issues/21067>]

=item *

Fixed a number of issues where C<I32> was used as a string offset or
size rather than C<SSize_t> or C<STRLEN>/C<size_t> [L<GH #21012|https://github.com/Perl/perl5/issues/21012>]

=item *

C<~$str> when C<$str> was more than 2GB in size would do nothing or
produce an incomplete result.

=item *

String repeat, C<$str x $count>, didn't handle C<$str> over 2GB in
size, throwing an error.  Now such strings are repeated.

=item *

Complex substitution after the 2GB point in a string could access
incorrect or invalid offsets in the string.

=item *

sv_utf8_decode() would truncate the SVs pos() value.  This wasn't
visible via utf8::decode().

=item *

When compiling a constant folded hash key, the length was truncated
when creating the shared SV.  Since hash keys over 2GB are not
supported, throw a compilation error instead.

=item *

msgrcv() incorrectly called get magic on the buffer SV and failed to
call set magic on completion.
[L<GH #21012|https://github.com/Perl/perl5/issues/21012>]

=item *

msgrcv() used the size parameter to resize the buffer before
validating it. [L<GH #21012|https://github.com/Perl/perl5/issues/21012>]

=item *

Inheriting from a class that was hierarchically an ancestor of the new
class, eg. C< class A::B :isa(A) { ... } >, would not attempt to load
the parent class. [L<GH #21332|https://github.com/Perl/perl5/issues/21332>]

=item *

Declared references can now be used with C<state> variables.
[L<GH #21351|https://github.com/Perl/perl5/issues/21351>]

=item *

Trailing elements in an C<unshift>ed and resized array will now always be
initialized. [L<GH #21265|https://github.com/Perl/perl5/issues/21265>]
