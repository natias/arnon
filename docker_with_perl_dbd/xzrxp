                 line="1339">Name of file to load, in the GLib file
    name encoding</doc>
            <type name="filename" c:type="const char*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1341">The width the image should have or -1 to not constrain the width</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1342">The height the image should have or -1 to not constrain the height</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="preserve_aspect_ratio" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1343">`TRUE` to preserve the image's aspect ratio</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file_at_size"
                   c:identifier="gdk_pixbuf_new_from_file_at_size"
                   version="2.4"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="1210">Creates a new pixbuf by loading an image from a file.

The file format is detected automatically.

If `NULL` is returned, then @error will be set. Possible errors are:

 - the file could not be opened
 - there is no loader for the file's format
 - there is not enough memory to allocate the image buffer
 - the image buffer contains invalid data

The error domains are `GDK_PIXBUF_ERROR` and `G_FILE_ERROR`.

The image will be scaled to fit in the requested size, preserving
the image's aspect ratio. Note that the returned pixbuf may be smaller
than `width` x `height`, if the aspect ratio requires it. To load
and image at the requested size, regardless of aspect ratio, use
[ctor@GdkPixbuf.Pixbuf.new_from_file_at_scale].</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="255"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="1237">A newly-created pixbuf</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1212">Name of file to load, in the GLib file
    name encoding</doc>
            <type name="filename" c:type="const char*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1214">The width the image should have or -1 to not constrain the width</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1215">The height the image should have or -1 to not constrain the height</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_inline"
                   c:identifier="gdk_pixbuf_new_from_inline"
                   deprecated="1"
                   deprecated-version="2.32"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.c"
             line="951">Creates a `GdkPixbuf` from a flat representation that is suitable for
storing as inline data in a program.

This is useful if you want to ship a program with images, but don't want
to depend on any external files.

GdkPixbuf ships with a program called `gdk-pixbuf-csource`, which allows
for conversion of `GdkPixbuf`s into such a inline representation.

In almost all cases, you should pass the `--raw` option to
`gdk-pixbuf-csource`. A sample invocation would be:

```
gdk-pixbuf-csource --raw --name=myimage_inline myimage.png
```

For the typical case where the inline pixbuf is read-only static data,
you don't need to copy the pixel data unless you intend to write to
it, so you can pass `FALSE` for `copy_pixels`. If you pass `--rle` to
`gdk-pixbuf-csource`, a copy will be made even if `copy_pixels` is `FALSE`,
so using this option is generally a bad idea.

If you create a pixbuf from const inline data compiled into your
program, it's probably safe to ignore errors and disable length checks,
since things will always succeed:

```c
pixbuf = gdk_pixbuf_new_from_inline (-1, myimage_inline, FALSE, NULL);
```

For non-const inline data, you could get out of memory. For untrusted
inline data located at runtime, you could have corrupt inline data in
addition.</doc>
        <doc-deprecated xml:space="preserve">Use `GResource` instead.</doc-deprecated>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="298"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixdata.c"
               line="995">A newly-created pixbuf</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="data_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixdata.c"
                 line="953">Length in bytes of the `data` argument or -1 to
  disable length checks</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixdata.c"
                 line="955">Byte data containing a
  serialized `GdkPixdata` structure</doc>
            <array length="0" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="copy_pixels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixdata.c"
                 line="957">Whether to copy the pixel data, or use direct pointers
  `data` for the resulting pixbuf</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_resource"
                   c:identifier="gdk_pixbuf_new_from_resource"
                   version="2.26"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="1793">Creates a new pixbuf by loading an image from an resource.

The file format is detected automatically. If `NULL` is returned, then
@error will be set.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="266"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="1803">A newly-created pixbuf</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="resource_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1795">the path of the resource file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_resource_at_scale"
                   c:identifier="gdk_pixbuf_new_from_resource_at_scale"
                   version="2.26"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="1827">Creates a new pixbuf by loading an image from an resource.

The file format is detected automatically. If `NULL` is returned, then
@error will be set.

The image will be scaled to fit in the requested size, optionally
preserving the image's aspect ratio. When preserving the aspect ratio,
a @width of -1 will cause the image to be scaled to the exact given
height, and a @height of -1 will cause the image to be scaled to the
exact given width. When not preserving aspect ratio, a @width or
@height of -1 means to not scale the image at all in that dimension.

The stream is not closed.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="269"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="1849">A newly-created pixbuf</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="resource_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1829">the path of the resource file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1830">The width the image should have or -1 to not constrain the width</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1831">The height the image should have or -1 to not constrain the height</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="preserve_aspect_ratio" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1832">`TRUE` to preserve the image's aspect ratio</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stream"
                   c:identifier="gdk_pixbuf_new_from_stream"
                   version="2.14"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="1717">Creates a new pixbuf by loading an image from an input stream.

The file format is detected automatically.

If `NULL` is returned, then `error` will be set.

The `cancellable` can be used to abort the operation from another thread.
If the operation was cancelled, the error `G_IO_ERROR_CANCELLED` will be
returned. Other possible errors are in the `GDK_PIXBUF_ERROR` and
`G_IO_ERROR` domains.

The stream is not closed.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="409"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="1736">A newly-created pixbuf</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1719">a `GInputStream` to load the pixbuf from</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1720">optional `GCancellable` object, `NULL` to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stream_at_scale"
                   c:identifier="gdk_pixbuf_new_from_stream_at_scale"
                   version="2.14"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="1543">Creates a new pixbuf by loading an image from an input stream.

The file format is detected automatically. If `NULL` is returned, then
@error will be set. The @cancellable can be used to abort the operation
from another thread. If the operation was cancelled, the error
`G_IO_ERROR_CANCELLED` will be returned. Other possible errors are in
the `GDK_PIXBUF_ERROR` and `G_IO_ERROR` domains.

The image will be scaled to fit in the requested size, optionally
preserving the image's aspect ratio.

When preserving the aspect ratio, a `width` of -1 will cause the image to be
scaled to the exact given height, and a `height` of -1 will cause the image
to be scaled to the exact given width. If both `width` and `height` are
given, this function will behave as if the smaller of the two values
is passed as -1.

When not preserving aspect ratio, a `width` or `height` of -1 means to not
scale the image at all in that dimension.

The stream is not closed.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="424"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="1574">A newly-created pixbuf</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1545">a `GInputStream` to load the pixbuf from</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1546">The width the image should have or -1 to not constrain the width</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1547">The height the image should have or -1 to not constrain the height</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="preserve_aspect_ratio" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1548">`TRUE` to preserve the image's aspect ratio</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1549">optional `GCancellable` object, `NULL` to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stream_finish"
                   c:identifier="gdk_pixbuf_new_from_stream_finish"
                   version="2.24"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="1914">Finishes an asynchronous pixbuf creation operation started with
gdk_pixbuf_new_from_stream_async().</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="420"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="1922">the newly created pixbuf</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="async_result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1916">a `GAsyncResult`</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_xpm_data"
                   c:identifier="gdk_pixbuf_new_from_xpm_data">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="2148">Creates a new pixbuf by parsing XPM data in memory.

This data is commonly the result of including an XPM file into a
program's C source.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="294"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="2157">A newly-created pixbuf</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2150">Pointer to inline XPM data.</doc>
            <array c:type="const char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <function name="calculate_rowstride"
                c:identifier="gdk_pixbuf_calculate_rowstride"
                version="2.36.8">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf.c"
             line="557">Calculates the rowstride that an image created with those values would
have.

This function is useful for front-ends and backends that want to check
image values without needing to create a `GdkPixbuf`.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="210"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf.c"
               line="571">the rowstride for the given values, or -1 in case of error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="colorspace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf.c"
                 line="559">Color space for image</doc>
            <type name="Colorspace" c:type="GdkColorspace"/>
          </parameter>
          <parameter name="has_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf.c"
                 line="560">Whether the image should have transparency information</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="bits_per_sample" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf.c"
                 line="561">Number of bits per color sample</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf.c"
                 line="562">Width of image in pixels, must be &gt; 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf.c"
                 line="563">Height of image in pixels, must be &gt; 0</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_file_info"
                c:identifier="gdk_pixbuf_get_file_info"
                version="2.4">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="1964">Parses an image file far enough to determine its format and size.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="77"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="1972">A `GdkPixbufFormat` describing
  the image format of the file</doc>
          <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1966">The name of the file to identify.</doc>
            <type name="filename" c:type="const gchar*"/>
          </parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1967">Return location for the width of the image</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1968">Return location for the height of the image</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_file_info_async"
                c:identifier="gdk_pixbuf_get_file_info_async"
                version="2.32">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="2062">Asynchronously parses an image file far enough to determine its
format and size.

For more details see gdk_pixbuf_get_file_info(), which is the synchronous
version of this function.

When the operation is finished, @callback will be called in the
main thread. You can then call gdk_pixbuf_get_file_info_finish() to
get the result of the operation.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2064">The name of the file to identify</doc>
            <type name="filename" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2065">optional `GCancellable` object, `NULL` to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2066">a `GAsyncReadyCallback` to call when the file info is available</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2067">the data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_file_info_finish"
                c:identifier="gdk_pixbuf_get_file_info_finish"
                version="2.32"
                throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="2105">Finishes an asynchronous pixbuf parsing operation started with
gdk_pixbuf_get_file_info_async().</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="86"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="2115">A `GdkPixbufFormat` describing the
  image format of the file</doc>
          <type name="PixbufFormat" c:type="GdkPixbufFormat*"/>
        </return-value>
        <parameters>
          <parameter name="async_result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2107">a `GAsyncResult`</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2108">Return location for the width of the image, or `NULL`</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="2109">Return location for the height of the image, or `NULL`</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_formats"
                c:identifier="gdk_pixbuf_get_formats"
                version="2.2">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="3426">Obtains the available information about the image formats supported
by GdkPixbuf.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="52"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="3432">A list of
  support image formats.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="PixbufFormat"/>
          </type>
        </return-value>
      </function>
      <function name="init_modules"
                c:identifier="gdk_pixbuf_init_modules"
                version="2.40"
                throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="561">Initalizes the gdk-pixbuf loader modules referenced by the `loaders.cache`
file present inside that directory.

This is to be used by applications that want to ship certain loaders
in a different location from the system ones.

This is needed when the OS or runtime ships a minimal number of loaders
so as to reduce the potential attack surface of carefully crafted image
files, especially for uncommon file types. Applications that require
broader image file types coverage, such as image viewers, would be
expected to ship the gdk-pixbuf modules in a separate location, bundled
with the application in a separate directory from the OS or runtime-
provided modules.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-io.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="563">Path to directory where the `loaders.cache` is installed</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_from_stream_async"
                c:identifier="gdk_pixbuf_new_from_stream_async"
                version="2.24">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="1872">Creates a new pixbuf by asynchronously loading an image from an input stream.

For more details see gdk_pixbuf_new_from_stream(), which is the synchronous
version of this function.

When the operation is finished, @callback will be called in the main thread.
You can then call gdk_pixbuf_new_from_stream_finish() to get the result of
the operation.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="414"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1874">a `GInputStream` from which to load the pixbuf</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1875">optional `GCancellable` object, `NULL` to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1876">a `GAsyncReadyCallback` to call when the pixbuf is loaded</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1877">the data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_from_stream_at_scale_async"
                c:identifier="gdk_pixbuf_new_from_stream_at_scale_async"
                version="2.24">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="1655">Creates a new pixbuf by asynchronously loading an image from an input stream.

For more details see gdk_pixbuf_new_from_stream_at_scale(), which is the synchronous
version of this function.

When the operation is finished, @callback will be called in the main thread.
You can then call gdk_pixbuf_new_from_stream_finish() to get the result of the operation.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="432"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1657">a `GInputStream` from which to load the pixbuf</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1658">the width the image should have or -1 to not constrain the width</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1659">the height the image should have or -1 to not constrain the height</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="preserve_aspect_ratio" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1660">`TRUE` to preserve the image's aspect ratio</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1661">optional `GCancellable` object, `NULL` to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1662">a `GAsyncReadyCallback` to call when the pixbuf is loaded</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="1663">the data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="save_to_stream_finish"
                c:identifier="gdk_pixbuf_save_to_stream_finish"
                version="2.24"
                throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-io.c"
             line="3199">Finishes an asynchronous pixbuf save operation started with
gdk_pixbuf_save_to_stream_async().</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="458"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-io.c"
               line="3207">`TRUE` if the pixbuf was saved successfully, `FALSE` if an error was set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="async_result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-io.c"
                 line="3201">a `GAsyncResult`</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_alpha" c:identifier="gdk_pixbuf_add_alpha">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-util.c"
             line="29">Takes an existing pixbuf and adds an alpha channel to it.

If the existing pixbuf already had an alpha channel, the channel
values are copied from the original; otherwise, the alpha channel
is initialized to 255 (full opacity).

If `substitute_color` is `TRUE`, then the color specified by the
(`r`, `g`, `b`) arguments will be assigned zero opacity. That is,
if you pass `(255, 255, 255)` for the substitute color, all white
pixels will become fully transparent.

If `substitute_color` is `FALSE`, then the (`r`, `g`, `b`) arguments
will be ignored.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="482"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-util.c"
               line="51">A newly-created pixbuf</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-util.c"
                 line="31">A #GdkPixbuf.</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="substitute_color" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-util.c"
                 line="32">Whether to set a color to zero opacity.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="r" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-util.c"
                 line="33">Red value to substitute.</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="g" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-util.c"
                 line="34">Green value to substitute.</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-util.c"
                 line="35">Blue value to substitute.</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
        </parameters>
      </method>
      <method name="apply_embedded_orientation"
              c:identifier="gdk_pixbuf_apply_embedded_orientation"
              version="2.12">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-util.c"
             line="273">Takes an existing pixbuf and checks for the presence of an
associated "orientation" option.

The orientation option may be provided by the JPEG loader (which
reads the exif orientation tag) or the TIFF loader (which reads
the TIFF orientation tag, and compensates it for the partial
transforms performed by libtiff).

If an orientation option/tag is present, the appropriate transform
will be performed so that the pixbuf is oriented correctly.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="502"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-util.c"
               line="288">A newly-created pixbuf</doc>
          <type name="Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-util.c"
                 line="275">a pixbuf with an orientation option</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="composite" c:identifier="gdk_pixbuf_composite">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-scale.c"
             line="91">Creates a transformation of the source image @src by scaling by
@scale_x and @scale_y then translating by @offset_x and @offset_y.

This gives an image in the coordinates of the destination pixbuf.
The rectangle (@dest_x, @dest_y, @dest_width, @dest_height)
is then alpha blended onto the corresponding rectangle of the
original destination image.

When the destination rectangle contains parts not in the source
image, the data at the edges of the source image is replicated
to infinity.

![](composite.png)</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-transform.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="93">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="94">the #GdkPixbuf into which to render the results</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="dest_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="95">the left coordinate for region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="96">the top coordinate for region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="97">the width of the region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="98">the height of the region to render</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="offset_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="99">the offset in the X direction (currently rounded to an integer)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="offset_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="100">the offset in the Y direction (currently rounded to an integer)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="101">the scale factor in the X direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="scale_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="102">the scale factor in the Y direction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="interp_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="103">the interpolation type for the transformation.</doc>
            <type name="InterpType" c:type="GdkInterpType"/>
          </parameter>
          <parameter name="overall_alpha" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="104">overall alpha for source image (0..255)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="composite_color" c:identifier="gdk_pixbuf_composite_color">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-scale.c"
             line="158">Creates a transformation of the source image @src by scaling by
@scale_x and @scale_y then translating by @offset_x and @offset_y,
then alpha blends the rectangle (@dest_x ,@dest_y, @dest_width,
@dest_height) of the resulting image with a checkboard of the
colors @color1 and @color2 and renders it onto the destination
image.

If the source image has no alpha channel, and @overall_alpha is 255, a fast
path is used which omits the alpha blending and just performs the scaling.

See gdk_pixbuf_composite_color_simple() for a simpler variant of this
function suitable for many tasks.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-transform.h"
                         line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-scale.c"
                 line="160">a #GdkPixbuf</doc>
            <type name="Pixbuf" c:type="const GdkPixbuf*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
