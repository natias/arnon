=over 4

=item *

BSDI 4.*

Perl now works on post-4.0 BSD/OSes.

=item *

All BSDs

Setting C<$0> now works (as much as possible; see L<perlvar> for details).

=item *

Cygwin

Numerous updates; currently synchronised with Cygwin 1.3.10.

=item *

Previously DYNIX/ptx had problems in its Configure probe for non-blocking I/O.

=item *

EPOC

EPOC now better supported.  See README.epoc. [561]

=item *

FreeBSD 3.*

Perl now works on post-3.0 FreeBSDs.

=item *

HP-UX

README.hpux updated; C<Configure -Duse64bitall> now works;
now uses HP-UX malloc instead of Perl malloc.

=item *

IRIX

Numerous compilation flag and hint enhancements; accidental mixing
of 32-bit and 64-bit libraries (a doomed attempt) made much harder.

=item *

Linux

=over 8

=item *

Long doubles should now work (see INSTALL). [561]

=item *

Linux previously had problems related to sockaddrlen when using
accept(), recvfrom() (in Perl: recv()), getpeername(), and
getsockname().

=back

=item *

Mac OS Classic

Compilation of the standard Perl distribution in Mac OS Classic should
now work if you have the Metrowerks development environment and the
missing Mac-specific toolkit bits.  Contact the macperl mailing list
for details.

=item *

MPE/iX

MPE/iX update after Perl 5.6.0.  See README.mpeix. [561]

=item *

NetBSD/threads: try installing the GNU pth (should be in the
packages collection, or http://www.gnu.org/software/pth/),
and Configure with -Duseithreads.

=item *

NetBSD/sparc

Perl now works on NetBSD/sparc.

=item *

OS/2

Now works with usethreads (see INSTALL). [561]

=item *

Solaris

64-bitness using the Sun Workshop compiler now works.

=item *

Stratus VOS

The native build method requires at least VOS Release 14.5.0
and GNU C++/GNU Tools 2.0.1 or later.  The Perl pack function
now maps overflowed values to +infinity and underflowed values
to -infinity.

=item *

Tru64 (aka Digital UNIX, aka DEC OSF/1)

The operating system version letter now recorded in $Config{osvers}.
Allow compiling with gcc (previously explicitly forbidden).  Compiling
with gcc still not recommended because buggy code results, even with
gcc 2.95.2.

=item *

Unicos

Fixed various alignment problems that lead into core dumps either
during build or later; no longer dies on math errors at runtime;
now using full quad integers (64 bits), previously was using
only 46 bit integers for speed.

=item *

VMS

See L</"Socket Extension Dynamic in VMS"> and L</"IEEE-format Floating Point
Default on OpenVMS Alpha"> for important changes not otherwise listed here.

chdir() now works better despite a CRT bug; now works with MULTIPLICITY
(see INSTALL); now works with Perl's malloc.

The tainting of C<%ENV> elements via C<keys> or C<values> was previously
unimplemented.  It now works as documented.

The C<waitpid> emulation has been improved.  The worst bug (now fixed)
was that a pid of -1 would cause a wildcard search of all processes on
the system.

POSIX-style signals are now emulated much better on VMS versions prior
to 7.0.

The C<system> function and backticks operator have improved
functionality and better error handling. [561]

File access tests now use current process privileges rather than the
user's default privileges, which could sometimes result in a mismatch
between reported access and actual access.  This improvement is only
available on VMS v6.0 and later.

There is a new C<kill> implementation based on C<sys$sigprc> that allows
older VMS systems (pre-7.0) to use C<kill> to send signals rather than
simply force exit.  This implementation also allows later systems to
call C<kill> from within a signal handler.

Iterative logical name translations are now limited to 10 iterations in
imitation of SHOW LOGICAL and other OpenVMS facilities.

=item *

Windows

=over 8

=item *

Signal handling now works better than it used to.  It is now implemented
using a Windows message loop, and is therefore less prone to random
crashes.

=item *

fork() emulation is now more robust, but still continues to have a few
esoteric bugs and caveats.  See L<perlfork> for details. [561+]

=item *

A failed (pseudo)fork now returns undef and sets errno to EAGAIN. [561]

=item *

The following modules now work on Windows:

    ExtUtils::Embed         [561]
    IO::Pipe
    IO::Poll
    Net::Ping

=item *

IO::File::new_tmpfile() is no longer limited to 32767 invocations
per-process.

=item *

Better chdir() return value for a non-existent directory.

=item *

Compiling perl using the 64-bit Platform SDK tools is now supported.

=item *

The Win32::SetChildShowWindow() builtin can be used to control the
visibility of windows created by child processes.  See L<Win32> for
details.

=item *

Non-blocking waits for child processes (or pseudo-processes) are
supported via C<waitpid($pid, &POSIX::WNOHANG)>.

=item *

The behavior of system() with multiple arguments has been rationalized.
Each unquoted argument will be automatically quoted to protect whitespace,
and any existing whitespace in the arguments will be preserved.  This
improves the portability of system(@args) by avoiding the need for
Windows C<cmd> shell specific quoting in perl programs.

Note that this means that some scripts that may have relied on earlier
buggy behavior may no longer work correctly.  For example,
C<system("nmake /nologo", @args)> will now attempt to run the file
C<nmake /nologo> and will fail when such a file isn't found.
On the other hand, perl will now execute code such as
C<system("c:/Program Files/MyApp/foo.exe", @args)> correctly.

=item *

The perl header files no longer suppress common warnings from the
Microsoft Visual C++ compiler.  This means that additional warnings may
now show up when compiling XS code.

=item *

Borland C++ v5.5 is now a supported compiler that can build Perl.
However, the generated binaries continue to be incompatible with those
generated by the other supported compilers (GCC and Visual C++). [561]

=item *

Duping socket handles with open(F, ">&MYSOCK") now works under Windows 9x.
[561]

=item *

Current directory entries in %ENV are now correctly propagated to child
processes. [561]

=item *

New %ENV entries now propagate to subprocesses. [561]

=item *

Win32::GetCwd() correctly returns C:\ instead of C: when at the drive root.
Other bugs in chdir() and Cwd::cwd() have also been fixed. [561]

=item *

The makefiles now default to the features enabled in ActiveState ActivePerl
(a popular Win32 binary distribution). [561]

=item *

HTML files will now be installed in c:\perl\html instead of
c:\perl\lib\pod\html

=item *

REG_EXPAND_SZ keys are now allowed in registry settings used by perl. [561]

=item *

Can now send() from all threads, not just the first one. [561]

=item *

ExtUtils::MakeMaker now uses $ENV{LIB} to search for libraries. [561]

=item *

Less stack reserved per thread so that more threads can run
concurrently. (Still 16M per thread.) [561]

=item *

C<< File::Spec->tmpdir() >> now prefers C:/temp over /tmp
(works better when perl is running as service).

=item *

Better UNC path handling under ithreads. [561]

=item *

wait(), waitpid(), and backticks now return the correct exit status
under Windows 9x. [561]

=item *

A socket handle leak in accept() has been fixed. [561]

=back

=back

=head1 New or Changed Diagnostics

Please see L<perldiag> for more details.

=over 4

=item *

Ambiguous range in the transliteration operator (like a-z-9) now
gives a warning.

=item *

chdir("") and chdir(undef) now give a deprecation warning because they
cause a possible unintentional chdir to the home directory.
Say chdir() if you really mean that.

=item *

Two new debugging options have been added: if you have compiled your
Perl with debugging, you can use the -DT [561] and -DR options to trace
tokenising and to add reference counts to displaying variables,
respectively.

=item *

The lexical warnings category "deprecated" is no longer a sub-category
of the "syntax" category. It is now a top-level category in its own
right.

=item *

Unadorned dump() will now give a warning suggesting to
use explicit CORE::dump() if that's what really is meant.

=item *

The "Unrecognized escape" warning has been extended to include C<\8>,
C<\9>, and C<\_>.  There is no need to escape any of the C<\w> characters.

=item *

All regular expression compilation error messages are now hopefully
easier to understand both because the error message now comes before
the failed regex and because the point of failure is now clearly
marked by a C<E<lt>-- HERE> marker.

=item *

Various I/O (and socket) functions like binmode(), close(), and so
forth now more consistently warn if they are used illogically either
on a yet unopened or on an already closed filehandle (or socket).

=item *

Using lstat() on a filehandle now gives a warning.  (It's a non-sensical
thing to do.)

=item *

The C<-M> and C<-m> options now warn if you didn't supply the module name.

=item *

If you in C<use> specify a required minimum version, modules matching
the name and but not defining a $VERSION will cause a fatal failure.

=item *

Using negative offset for vec() in lvalue context is now a warnable offense.

=item *

Odd number of arguments to overload::constant now elicits a warning.

=item *

Odd number of elements in anonymous hash now elicits a warning.

=item *

The various "opened only for", "on closed", "never opened" warnings
drop the C<main::> prefix for filehandles in the C<main> package,
for example C<STDIN> instead of C<main::STDIN>.

=item *

Subroutine prototypes are now checked more carefully, you may
get warnings for example if you have used non-prototype characters.

=item *

If an attempt to use a (non-blessed) reference as an array index
is made, a warning is given.

=item *

C<push @a;> and C<unshift @a;> (with no values to push or unshift)
now give a warning.  This may be a problem for generated and eval'ed
code.

=item *

If you try to L<perlfunc/pack> a number less than 0 or larger than 255
using the C<"C"> format you will get an optional warning.  Similarly
for the C<"c"> format and a number less than -128 or more than 127.

=item *

pack C<P> format now demands an explicit size.

=item *

unpack C<w> now warns of unterminated compressed integers.

=item *

Warnings relating to the use of PerlIO have been added.

=item *

Certain regex modifiers such as C<(?o)> make sense only if applied to
the entire regex.  You will get an optional warning if you try to do
otherwise.

=item *

Variable length lookbehind has not yet been implemented, trying to
use it will tell that.

=item *

Using arrays or hashes as references (e.g. C<< %foo->{bar} >>
has been deprecated for a while.  Now you will get an optional warning.

=item *

Warnings relating to the use of the new restricted hashes feature
have been added.

=item *

Self-ties of arrays and hashes are not supported and fatal errors
will happen even at an attempt to do so.

=item *

Using C<sort> in scalar context now issues an optional warning.
This didn't do anything useful, as the sort was not performed.

=item *

Using the /g modifier in split() is meaningless and will cause a warning.

=item *

Using splice() past the end of an array now causes a warning.

=item *

Malformed Unicode encodings (UTF-8 and UTF-16) cause a lot of warnings,
as does trying to use UTF-16 surrogates (which are unimplemented).

=item *

Trying to use Unicode characters on an I/O stream without marking the
stream's encoding (using open() or binmode()) will cause "Wide character"
warnings.

=item *

Use of v-strings in use/require causes a (backward) portability warning.

=item *

Warnings relating to the use interpreter threads and their shared data
have been added.

=back

=head1 Changed Internals

=over 4

=item *

PerlIO is now the default.

=item *

perlapi.pod (a companion to perlguts) now attempts to document the
internal API.

=item *

You can now build a really minimal perl called microperl.
Building microperl does not require even running Configure;
C<make -f Makefile.micro> should be enough.  Beware: microperl makes
many assumptions, some of which may be too bold; the resulting
executable may crash or otherwise misbehave in wondrous ways.
For careful hackers only.

=item *

Added rsignal(), whichsig(), do_join(), op_clear, op_null,
ptr_table_clear(), ptr_table_free(), sv_setref_uv(), and several UTF-8
interfaces to the publicised API.  For the full list of the available
APIs see L<perlapi>.

=item *

Made possible to propagate customised exceptions via croak()ing.

=item *

Now xsubs can have attributes just like subs.  (Well, at least the
built-in attributes.)

=item *

dTHR and djSP have been obsoleted; the former removed (because it's
a no-op) and the latter replaced with dSP.

=item *

PERL_OBJECT has been completely removed.

=item *

The MAGIC constants (e.g. C<'P'>) have been macrofied
(e.g. C<PERL_MAGIC_TIED>) for better source code readability
and maintainability.

=item *

The regex compiler now maintains a structure that identifies nodes in
the compiled bytecode with the corresponding syntactic features of the
original regex expression.  The information is attached to the new
C<offsets> member of the C<struct regexp>. See L<perldebguts> for more
complete information.

=item *

The C code has been made much more C<gcc -Wall> clean.  Some warning
messages still remain in some platforms, so if you are compiling with
gcc you may see some warnings about dubious practices.  The warnings
are being worked on.

=item *

F<perly.c>, F<sv.c>, and F<sv.h> have now been extensively commented.

=item *

Documentation on how to use the Perl source repository has been added
to F<Porting/repository.pod>.

=item *

There are now several profiling make targets.

=back

=head1 Security Vulnerability Closed [561]

(This change was already made in 5.7.0 but bears repeating here.)
(5.7.0 came out before 5.6.1: the development branch 5.7 released
earlier than the maintenance branch 5.6)

A potential security vulnerability in the optional suidperl component
of Perl was identified in August 2000.  suidperl is neither built nor
installed by default.  As of November 2001 the only known vulnerable
platform is Linux, most likely all Linux distributions.  CERT and
various vendors and distributors have been alerted about the vulnerability.
See http://www.cpan.org/src/5.0/sperl-2000-08-05/sperl-2000-08-05.txt
for more information.

The problem was caused by Perl trying to report a suspected security
exploit attempt using an external program, /bin/mail.  On Linux
platforms the /bin/mail program had an undocumented feature which
when combined with suidperl gave access to a root shell, resulting in
a serious compromise instead of reporting the exploit attempt.  If you
don't have /bin/mail, or if you have 'safe setuid scripts', or if
suidperl is not installed, you are safe.

The exploit attempt reporting feature has been completely removed from
Perl 5.8.0 (and the maintenance release 5.6.1, and it was removed also
from all the Perl 5.7 releases), so that particular vulnerability
isn't there anymore.  However, further security vulnerabilities are,
unfortunately, always possible.  The suidperl functionality is most
probably going to be removed in Perl 5.10.  In any case, suidperl
should only be used by security experts who know exactly what they are
doing and why they are using suidperl instead of some other solution
such as sudo ( see http://www.courtesan.com/sudo/ ).

=head1 New Tests

Several new tests have been added, especially for the F<lib> and
F<ext> subsections.  There are now about 69 000 individual tests
(spread over about 700 test scripts), in the regression suite (5.6.1
has about 11 700 tests, in 258 test scripts)  The exact numbers depend
on the platform and Perl configuration used.  Many of the new tests
are of course introduced by the new modules, but still in general Perl
is now more thoroughly tested.

Because of the large number of tests, running the regression suite
will take considerably longer time than it used to: expect the suite
to take up to 4-5 times longer to run than in perl 5.6.  On a really
fast machine you can hope to finish the suite in about 6-8 minutes
(wallclock time).

The tests are now reported in a different order than in earlier Perls.
(This happens because the test scripts from under t/lib have been moved
to be closer to the library/extension they are testing.)

=head1 Known Problems

=head2 The Compiler Suite Is Still Very Experimental

The compiler suite is slowly getting better but it continues to be
highly experimental.  Use in production environments is discouraged.

=head2 Localising Tied Arrays and Hashes Is Broken

    local %tied_array;

doesn't work as one would expect: the old value is restored
incorrectly.  This will be changed in a future release, but we don't
know yet what the new semantics will exactly be.  In any case, the
change will break existing code that relies on the current
(ill-defined) semantics, so just avoid doing this in general.

=head2 Building Extensions Can Fail Because Of Largefiles

Some extensions like mod_perl are known to have issues with
`largefiles', a change brought by Perl 5.6.0 in which file offsets
default to 64 bits wide, where supported.  Modules may fail to compile
at all, or they may compile and work incorrectly.  Currently, there
is no good solution for the problem, but Configure now provides
appropriate non-largefile ccflags, ldflags, libswanted, and libs
in the %Config hash (e.g., $Config{ccflags_nolargefiles}) so the
extensions that are having problems can try configuring themselves
without the largefileness.  This is admittedly not a clean solution,
and the solution may not even work at all.  One potential failure is
whether one can (or, if one can, whether it's a good idea to) link
together at all binaries with different ideas about file offsets;
all this is platform-dependent.

=head2 Modifying $_ Inside for(..)

   for (1..5) { $_++ }

works without complaint.  It shouldn't.  (You should be able to
modify only lvalue elements inside the loops.)  You can see the
correct behaviour by replacing the 1..5 with 1, 2, 3, 4, 5.

=head2 mod_perl 1.26 Doesn't Build With Threaded Perl

Use mod_perl 1.27 or higher.

=head2 lib/ftmp-security tests warn 'system possibly insecure'

Don't panic.  Read the 'make test' section of INSTALL instead.

=head2 libwww-perl (LWP) fails base/date #51

Use libwww-perl 5.65 or later.

=head2 PDL failing some tests

Use PDL 2.3.4 or later.

=head2 Perl_get_sv

You may get errors like 'Undefined symbol "Perl_get_sv"' or "can't
resolve symbol 'Perl_get_sv'", or the symbol may be "Perl_sv_2pv".
This probably means that you are trying to use an older shared Perl
library (or extensions linked with such) with Perl 5.8.0 executable.
Perl used to have such a subroutine, but that is no more the case.
Check your shared library path, and any shared Perl libraries in those
directories.

Sometimes this problem may also indicate a partial Perl 5.8.0
installation, see L</"Mac OS X dyld undefined symbols"> for an
example and how to deal with it.

=head2 Self-tying Problems

Self-tying of arrays and hashes is broken in rather deep and
hard-to-fix ways.  As a stop-gap measure to avoid people from getting
frustrated at the mysterious results (core dumps, most often), it is
forbidden for now (you will get a fatal error even from an attempt).

A change to self-tying of globs has caused them to be recursively
referenced (see: L<perlobj/"Two-Phased Garbage Collection">).  You
will now need an explicit untie to destroy a self-tied glob.  This
behaviour may be fixed at a later date.

Self-tying of scalars and IO thingies works.

=head2 ext/threads/t/libc

If this test fails, it indicates that your libc (C library) is not
threadsafe.  This particular test stress tests the localtime() call to
find out whether it is threadsafe.  See L<perlthrtut> for more information.

=head2 Failure of Thread (5.005-style) tests

B<Note that support for 5.005-style threading is deprecated,
experimental and practically unsupported.  In 5.10, it is expected
to be removed.  You should migrate your code to ithreads.>

The following tests are known to fail due to fundamental problems in
the 5.005 threading implementation. These are not new failures--Perl
5.005_0x has the same bugs, but didn't have these tests.

 ../ext/B/t/xref.t                    255 65280    14   12  85.71%  3-14
 ../ext/List/Util/t/first.t           255 65280     7    4  57.14%  2 5-7
 ../lib/English.t                       2   512    54    2   3.70%  2-3
 ../lib/FileCache.t                                 5    1  20.00%  5
 ../lib/Filter/Simple/t/data.t                      6    3  50.00%  1-3
 ../lib/Filter/Simple/t/filter_only.                9    3  33.33%  1-2 5
 ../lib/Math/BigInt/t/bare_mbf.t                 1627    4   0.25%  8 11 1626-1627
 ../lib/Math/BigInt/t/bigfltpm.t                 1629    4   0.25%  10 13 1628-
                                                                    1629
 ../lib/Math/BigInt/t/sub_mbf.t                  1633    4   0.24%  8 11 1632-1633
 ../lib/Math/BigInt/t/with_sub.t                 1628    4   0.25%  9 12 1627-1628
 ../lib/Tie/File/t/31_autodefer.t     255 65280    65   32  49.23%  34-65
 ../lib/autouse.t                                  10    1  10.00%  4
 op/flip.t                                         15    1   6.67%  15

These failures are unlikely to get fixed as 5.005-style threads
are considered fundamentally broken.  (Basically what happens is that
competing threads can corrupt shared global state, one good example
being regular expression engine's state.)

=head2 Timing problems

The following tests may fail intermittently because of timing
problems, for example if the system is heavily loaded.

    t/op/alarm.t
    ext/Time/HiRes/HiRes.t
    lib/Benchmark.t
    lib/Memoize/t/expmod_t.t
    lib/Memoize/t/speed.t

In case of failure please try running them manually, for example

    ./perl -Ilib ext/Time/HiRes/HiRes.t

=head2 Tied/Magical Array/Hash Elements Do Not Autovivify

For normal arrays C<$foo = \$bar[1]> will assign C<undef> to
C<$bar[1]> (assuming that it didn't exist before), but for
tied/magical arrays and hashes such autovivification does not happen
because there is currently no way to catch the reference creation.
The same problem affects slicing over non-existent indices/keys of
a tied/magical array/hash.

=head2 Unicode in package/class and subroutine names does not work

One can have Unicode in identifier names, but not in package/class or
subroutine names.  While some limited functionality towards this does
exist as of Perl 5.8.0, that is more accidental than designed; use of
Unicode for the said purposes is unsupported.

One reason of this unfinishedness is its (currently) inherent
unportability: since both package names and subroutine names may
need to be mapped to file and directory names, the Unicode capability
of the filesystem becomes important-- and there unfortunately aren't
portable answers.

=head1 Platform Specific Problems

=head2 AIX

=over 4

=item *

If using the AIX native make command, instead of just "make" issue
"make all".  In some setups the former has been known to spuriously
also try to run "make install".  Alternatively, you may want to use
GNU make.

=item *

In AIX 4.2, Perl extensions that use C++ functions that use statics
may have problems in that the statics are not getting initialized.
In newer AIX releases, this has been solved by linking Perl with
the libC_r library, but unfortunately in AIX 4.2 the said library
has an obscure bug where the various functions related to time
(such as time() and gettimeofday()) return broken values, and
therefore in AIX 4.2 Perl is not linked against libC_r.

=item *

vac 5.0.0.0 May Produce Buggy Code For Perl

The AIX C compiler vac version 5.0.0.0 may produce buggy code,
resulting in a few random tests failing when run as part of "make
test", but when the failing tests are run by hand, they succeed.
We suggest upgrading to at least vac version 5.0.1.0, that has been
known to compile Perl correctly.  "lslpp -L|grep vac.C" will tell
you the vac version.  See README.aix.

=item *

If building threaded Perl, you may get compilation warning from pp_sys.c:

  "pp_sys.c", line 4651.39: 1506-280 (W) Function argument assignment between types "unsigned char*" and "const void*" is not allowed.

This is harmless; it is caused by the getnetbyaddr() and getnetbyaddr_r()
having slightly different types for their first argument.

=back

=head2 Alpha systems with old gccs fail several tests

If you see op/pack, op/pat, op/regexp, or ext/Storable tests failing
in a Linux/alpha or *BSD/Alpha, it's probably time to upgrade your gcc.
gccs prior to 2.95.3 are definitely not good enough, and gcc 3.1 may
be even better.  (RedHat Linux/alpha with gcc 3.1 reported no problems,
as did Linux 2.4.18 with gcc 2.95.4.)  (In Tru64, it is preferable to
use the bundled C compiler.)

=head2 AmigaOS

Perl 5.8.0 doesn't build in AmigaOS.  It broke at some point during
the ithreads work and we could not find Amiga experts to unbreak the
problems.  Perl 5.6.1 still works for AmigaOS (as does the 5.7.2
development release).

=head2 BeOS

The following tests fail on 5.8.0 Perl in BeOS Personal 5.03:

 t/op/lfs............................FAILED at test 17
 t/op/magic..........................FAILED at test 24
 ext/Fcntl/t/syslfs..................FAILED at test 17
 ext/File/Glob/t/basic...............FAILED at test 3
 ext/POSIX/t/sigaction...............FAILED at test 13
 ext/POSIX/t/waitpid.................FAILED at test 1

(B<Note:> more information was available in F<README.beos> until support for
BeOS was removed in Perl v5.18.0)

=head2 Cygwin "unable to remap"

For example when building the Tk extension for Cygwin,
you may get an error message saying "unable to remap".
This is known problem with Cygwin, and a workaround is
detailed in here: http://sources.redhat.com/ml/cygwin/2001-12/msg00894.html

=head2 Cygwin ndbm tests fail on FAT

One can build but not install (or test the build of) the NDBM_File
on FAT filesystems.  Installation (or build) on NTFS works fine.
If one attempts the test on a FAT install (or build) the following
failures are expected:

 ../ext/NDBM_File/ndbm.t       13  3328    71   59  83.10%  1-2 4 16-71
 ../ext/ODBM_File/odbm.t      255 65280    ??   ??       %  ??
 ../lib/AnyDBM_File.t           2   512    12    2  16.67%  1 4
 ../lib/Memoize/t/errors.t      0   139    11    5  45.45%  7-11
 ../lib/Memoize/t/tie_ndbm.t   13  3328     4    4 100.00%  1-4
 run/fresh_perl.t                          97    1   1.03%  91

NDBM_File fails and ODBM_File just coredumps.

If you intend to run only on FAT (or if using AnyDBM_File on FAT),
run Configure with the -Ui_ndbm and -Ui_dbm options to prevent
NDBM_File and ODBM_File being built.

=head2 DJGPP Failures

 t/op/stat............................FAILED at test 29
 lib/File/Find/t/find.................FAILED at test 1
 lib/File/Find/t/taint................FAILED at test 1
 lib/h2xs.............................FAILED at test 15
 lib/Pod/t/eol........................FAILED at test 1
 lib/Test/Harness/t/strap-analyze.....FAILED at test 8
 lib/Test/Harness/t/test-harness......FAILED at test 23
 lib/Test/Simple/t/exit...............FAILED at test 1

The above failures are known as of 5.8.0 with native builds with long
filenames, but there are a few more if running under dosemu because of
limitations (and maybe bugs) of dosemu:

 t/comp/cpp...........................FAILED at test 3
 t/op/inccode.........................(crash)

and a few lib/ExtUtils tests, and several hundred Encode/t/Aliases.t
failures that work fine with long filenames.  So you really might
prefer native builds and long filenames.

=head2 FreeBSD built with ithreads coredumps reading large directories

This is a known bug in FreeBSD 4.5's readdir_r(), it has been fixed in
FreeBSD 4.6 (see L<perlfreebsd> (README.freebsd)).

=head2 FreeBSD Failing locale Test 117 For ISO 8859-15 Locales

The ISO 8859-15 locales may fail the locale test 117 in FreeBSD.
This is caused by the characters \xFF (y with diaeresis) and \xBE
(Y with diaeresis) not behaving correctly when being matched
case-insensitively.  Apparently this problem has been fixed in
the latest FreeBSD releases.
( http://www.freebsd.org/cgi/query-pr.cgi?pr=34308 )

=head2 IRIX fails ext/List/Util/t/shuffle.t or Digest::MD5

IRIX with MIPSpro 7.3.1.2m or 7.3.1.3m compiler may fail the List::Util
test ext/List/Util/t/shuffle.t by dumping core.  This seems to be
a compiler error since if compiled with gcc no core dump ensues, and
no failures have been seen on the said test on any other platform.

Similarly, building the Digest::MD5 extension has been
known to fail with "*** Termination code 139 (bu21)".

The cure is to drop optimization level (Configure -Doptimize=-O2).

=head2 HP-UX lib/posix Subtest 9 Fails When LP64-Configured

If perl is configured with -Duse64bitall, the successful result of the
subtest 10 of lib/posix may arrive before the successful result of the
subtest 9, which confuses the test harness so much that it thinks the
subtest 9 failed.

=head2 Linux with glibc 2.2.5 fails t/op/int subtest #6 with -Duse64bitint

This is a known bug in the glibc 2.2.5 with long long integers.
( http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=65612 )

=head2 Linux With Sfio Fails op/misc Test 48

No known fix.

=head2 Mac OS X

Please remember to set your environment variable LC_ALL to "C"
(setenv LC_ALL C) before running "make test" to avoid a lot of
warnings about the broken locales of Mac OS X.

The following tests are known to fail in Mac OS X 10.1.5 because of
buggy (old) implementations of Berkeley DB included in Mac OS X:

 Failed Test                 Stat Wstat Total Fail  Failed  List of Failed
 -------------------------------------------------------------------------
 ../ext/DB_File/t/db-btree.t    0    11    ??   ??       %  ??
 ../ext/DB_File/t/db-recno.t              149    3   2.01%  61 63 65

If you are building on a UFS partition, you will also probably see
t/op/stat.t subtest #9 fail.  This is caused by Darwin's UFS not
supporting inode change time.

Also the ext/POSIX/t/posix.t subtest #10 fails but it is skipped for
now because the failure is Apple's fault, not Perl's (blocked signals
are lost).

If you Configure with ithreads, ext/threads/t/libc.t will fail. Again,
this is not Perl's fault-- the libc of Mac OS X is not threadsafe
(in this particular test, the localtime() call is found to be
threadunsafe.)

=head2 Mac OS X dyld undefined symbols

If after installing Perl 5.8.0 you are getting warnings about missing
symbols, for example

    dyld: perl Undefined symbols
    _perl_sv_2pv
    _perl_get_sv

you probably have an old pre-Perl-5.8.0 installation (or parts of one)
in /Library/Perl (the undefined symbols used to exist in pre-5.8.0 Perls).
It seems that for some reason "make install" doesn't always completely
overwrite the files in /Library/Perl.  You can move the old Perl
shared library out of the way like this:

