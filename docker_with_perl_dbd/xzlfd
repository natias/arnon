=item C<newCONSTSUB_flags>
X<newCONSTSUB>X<newCONSTSUB_flags>

Construct a constant subroutine, also performing some surrounding
jobs.  A scalar constant-valued subroutine is eligible for inlining
at compile-time, and in Perl code can be created by S<C<sub FOO () {
123 }>>.  Other kinds of constant subroutine have other treatment.

The subroutine will have an empty prototype and will ignore any arguments
when called.  Its constant behaviour is determined by C<sv>.  If C<sv>
is null, the subroutine will yield an empty list.  If C<sv> points to a
scalar, the subroutine will always yield that scalar.  If C<sv> points
to an array, the subroutine will always yield a list of the elements of
that array in list context, or the number of elements in the array in
scalar context.  This function takes ownership of one counted reference
to the scalar or array, and will arrange for the object to live as long
as the subroutine does.  If C<sv> points to a scalar then the inlining
assumes that the value of the scalar will never change, so the caller
must ensure that the scalar is not subsequently written to.  If C<sv>
points to an array then no such assumption is made, so it is ostensibly
safe to mutate the array or its elements, but whether this is really
supported has not been determined.

The subroutine will have C<CvFILE> set according to C<PL_curcop>.
Other aspects of the subroutine will be left in their default state.
The caller is free to mutate the subroutine beyond its initial state
after this function has returned.

If C<name> is null then the subroutine will be anonymous, with its
C<CvGV> referring to an C<__ANON__> glob.  If C<name> is non-null then the
subroutine will be named accordingly, referenced by the appropriate glob.


C<name> is a string, giving a sigilless symbol name.
For C</newCONSTSUB>, C<name> is NUL-terminated, interpreted as Latin-1.

For C</newCONSTSUB_flags>, C<name> has length C<len> bytes, hence may contain
embedded NULs.  It is interpreted as UTF-8 if C<flags> has the C<SVf_UTF8> bit
set, and Latin-1 otherwise.  C<flags> should not have bits set other than
C<SVf_UTF8>.

The name may be either qualified or unqualified.  If the
name is unqualified then it defaults to being in the stash specified by
C<stash> if that is non-null, or to C<PL_curstash> if C<stash> is null.
The symbol is always added to the stash if necessary, with C<GV_ADDMULTI>
semantics.

If there is already a subroutine of the specified name, then the new sub
will replace the existing one in the glob.  A warning may be generated
about the redefinition.

If the subroutine has one of a few special names, such as C<BEGIN> or
C<END>, then it will be claimed by the appropriate queue for automatic
running of phase-related subroutines.  In this case the relevant glob will
be left not containing any subroutine, even if it did contain one before.
Execution of the subroutine will likely be a no-op, unless C<sv> was
a tied array or the caller modified the subroutine in some interesting
way before it was executed.  In the case of C<BEGIN>, the treatment is
buggy: the sub will be executed when only half built, and may be deleted
prematurely, possibly causing a crash.

The function returns a pointer to the constructed subroutine.  If the sub
is anonymous then ownership of one counted reference to the subroutine
is transferred to the caller.  If the sub is named then the caller does
not get ownership of a reference.  In most such cases, where the sub
has a non-phase name, the sub will be alive at the point it is returned
by virtue of being contained in the glob that names it.  A phase-named
subroutine will usually be alive by virtue of the reference owned by
the phase's automatic run queue.  A C<BEGIN> subroutine may have been
destroyed already by the time this function returns, but currently bugs
occur in that case before the caller gets control.  It is the caller's
responsibility to ensure that it knows which of these situations applies.

=over 3

 CV *  newCONSTSUB      (HV *stash, const char *name, SV *sv)
 CV *  newCONSTSUB_flags(HV *stash, const char *name, STRLEN len,
                         U32 flags, SV *sv)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newCVREF>
X<newCVREF>

Constructs, checks, and returns a code reference op.

=over 3

 OP *  newCVREF(I32 flags, OP *o)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newDEFEROP>
X<newDEFEROP>

NOTE: C<newDEFEROP> is B<experimental> and may change or be
removed without notice.

Constructs and returns a deferred-block statement that implements the
C<defer> semantics.  The C<block> optree is consumed by this function and
becomes part of the returned optree.

The C<flags> argument carries additional flags to set on the returned op,
including the C<op_private> field.

=over 3

 OP *  newDEFEROP(I32 flags, OP *block)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newDEFSVOP>
X<newDEFSVOP>

Constructs and returns an op to access C<$_>.

=over 3

 OP *  newDEFSVOP()

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newFOROP>
X<newFOROP>

Constructs, checks, and returns an op tree expressing a C<foreach>
loop (iteration through a list of values).  This is a heavyweight loop,
with structure that allows exiting the loop by C<last> and suchlike.

C<sv> optionally supplies the variable(s) that will be aliased to each
item in turn; if null, it defaults to C<$_>.
C<expr> supplies the list of values to iterate over.  C<block> supplies
the main body of the loop, and C<cont> optionally supplies a C<continue>
block that operates as a second half of the body.  All of these optree
inputs are consumed by this function and become part of the constructed
op tree.

C<flags> gives the eight bits of C<op_flags> for the C<leaveloop>
op and, shifted up eight bits, the eight bits of C<op_private> for
the C<leaveloop> op, except that (in both cases) some bits will be set
automatically.

=over 3

 OP *  newFOROP(I32 flags, OP *sv, OP *expr, OP *block, OP *cont)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newGIVENOP>
X<newGIVENOP>

Constructs, checks, and returns an op tree expressing a C<given> block.
C<cond> supplies the expression to whose value C<$_> will be locally
aliased, and C<block> supplies the body of the C<given> construct; they
are consumed by this function and become part of the constructed op tree.
C<defsv_off> must be zero (it used to identity the pad slot of lexical $_).

=over 3

 OP *  newGIVENOP(OP *cond, OP *block, PADOFFSET defsv_off)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newGVOP>
X<newGVOP>

Constructs, checks, and returns an op of any type that involves an
embedded reference to a GV.  C<type> is the opcode.  C<flags> gives the
eight bits of C<op_flags>.  C<gv> identifies the GV that the op should
reference; calling this function does not transfer ownership of any
reference to it.

=over 3

 OP *  newGVOP(I32 type, I32 flags, GV *gv)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newGVREF>
X<newGVREF>

Constructs, checks, and returns a glob reference op.

=over 3

 OP *  newGVREF(I32 type, OP *o)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newHVREF>
X<newHVREF>

Constructs, checks, and returns a hash reference op.

=over 3

 OP *  newHVREF(OP *o)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newLISTOP>
X<newLISTOP>

Constructs, checks, and returns an op of any list type.  C<type> is
the opcode.  C<flags> gives the eight bits of C<op_flags>, except that
C<OPf_KIDS> will be set automatically if required.  C<first> and C<last>
supply up to two ops to be direct children of the list op; they are
consumed by this function and become part of the constructed op tree.

For most list operators, the check function expects all the kid ops to be
present already, so calling C<newLISTOP(OP_JOIN, ...)> (e.g.) is not
appropriate.  What you want to do in that case is create an op of type
C<OP_LIST>, append more children to it, and then call L</op_convert_list>.
See L</op_convert_list> for more information.

If a compiletime-known fixed list of child ops is required, the
L</newLISTOPn> function can be used as a convenient shortcut, avoiding the
need to create a temporary plain C<OP_LIST> in a new variable.

=over 3

 OP *  newLISTOP(I32 type, I32 flags, OP *first, OP *last)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newLISTOPn>
X<newLISTOPn>

Constructs, checks, and returns an op of any list type.  C<type> is
the opcode.  C<flags> gives the eight bits of C<op_flags>, except that
C<OPf_KIDS> will be set automatically if required.  The variable number of
arguments after C<flags> must all be OP pointers, terminated by a final
C<NULL> pointer.  These will all be consumed as direct children of the list
op and become part of the constructed op tree.

Do not forget to end the arguments list with a C<NULL> pointer.

This function is useful as a shortcut to performing the sequence of
C<newLISTOP()>, C<op_append_elem()> on each element and final
C<op_convert_list()> in the case where a compiletime-known fixed sequence of
child ops is required.  If a variable number of elements are required, or for
splicing in an entire sub-list of child ops, see instead L</newLISTOP> and
L</op_convert_list>.

=over 3

 OP *  newLISTOPn(I32 type, I32 flags, ...)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newLOGOP>
X<newLOGOP>

Constructs, checks, and returns a logical (flow control) op.  C<type>
is the opcode.  C<flags> gives the eight bits of C<op_flags>, except
that C<OPf_KIDS> will be set automatically, and, shifted up eight bits,
the eight bits of C<op_private>, except that the bit with value 1 is
automatically set.  C<first> supplies the expression controlling the
flow, and C<other> supplies the side (alternate) chain of ops; they are
consumed by this function and become part of the constructed op tree.

=over 3

 OP *  newLOGOP(I32 optype, I32 flags, OP *first, OP *other)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newLOOPEX>
X<newLOOPEX>

Constructs, checks, and returns a loop-exiting op (such as C<goto>
or C<last>).  C<type> is the opcode.  C<label> supplies the parameter
determining the target of the op; it is consumed by this function and
becomes part of the constructed op tree.

=over 3

 OP *  newLOOPEX(I32 type, OP *label)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newLOOPOP>
X<newLOOPOP>

Constructs, checks, and returns an op tree expressing a loop.  This is
only a loop in the control flow through the op tree; it does not have
the heavyweight loop structure that allows exiting the loop by C<last>
and suchlike.  C<flags> gives the eight bits of C<op_flags> for the
top-level op, except that some bits will be set automatically as required.
C<expr> supplies the expression controlling loop iteration, and C<block>
supplies the body of the loop; they are consumed by this function and
become part of the constructed op tree.  C<debuggable> is currently
unused and should always be 1.

=over 3

 OP *  newLOOPOP(I32 flags, I32 debuggable, OP *expr, OP *block)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newMETHOP>
X<newMETHOP>

Constructs, checks, and returns an op of method type with a method name
evaluated at runtime.  C<type> is the opcode.  C<flags> gives the eight
bits of C<op_flags>, except that C<OPf_KIDS> will be set automatically,
and, shifted up eight bits, the eight bits of C<op_private>, except that
the bit with value 1 is automatically set.  C<dynamic_meth> supplies an
op which evaluates method name; it is consumed by this function and
become part of the constructed op tree.
Supported optypes: C<OP_METHOD>.

=over 3

 OP *  newMETHOP(I32 type, I32 flags, OP *dynamic_meth)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newMETHOP_named>
X<newMETHOP_named>

Constructs, checks, and returns an op of method type with a constant
method name.  C<type> is the opcode.  C<flags> gives the eight bits of
C<op_flags>, and, shifted up eight bits, the eight bits of
C<op_private>.  C<const_meth> supplies a constant method name;
it must be a shared COW string.
Supported optypes: C<OP_METHOD_NAMED>.

=over 3

 OP *  newMETHOP_named(I32 type, I32 flags, SV * const_meth)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newNULLLIST>
X<newNULLLIST>

Constructs, checks, and returns a new C<stub> op, which represents an
empty list expression.

=over 3

 OP *  newNULLLIST()

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newOP>
X<newOP>

Constructs, checks, and returns an op of any base type (any type that
has no extra fields).  C<type> is the opcode.  C<flags> gives the
eight bits of C<op_flags>, and, shifted up eight bits, the eight bits
of C<op_private>.

=over 3

 OP *  newOP(I32 optype, I32 flags)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newPADOP>
X<newPADOP>

Constructs, checks, and returns an op of any type that involves a
reference to a pad element.  C<type> is the opcode.  C<flags> gives the
eight bits of C<op_flags>.  A pad slot is automatically allocated, and
is populated with C<sv>; this function takes ownership of one reference
to it.

This function only exists if Perl has been compiled to use ithreads.

=over 3

 OP *  newPADOP(I32 type, I32 flags, SV *sv)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newPMOP>
X<newPMOP>

Constructs, checks, and returns an op of any pattern matching type.
C<type> is the opcode.  C<flags> gives the eight bits of C<op_flags>
and, shifted up eight bits, the eight bits of C<op_private>.

=over 3

 OP *  newPMOP(I32 type, I32 flags)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newPVOP>
X<newPVOP>

Constructs, checks, and returns an op of any type that involves an
embedded C-level pointer (PV).  C<type> is the opcode.  C<flags> gives
the eight bits of C<op_flags>.  C<pv> supplies the C-level pointer.
Depending on the op type, the memory referenced by C<pv> may be freed
when the op is destroyed.  If the op is of a freeing type, C<pv> must
have been allocated using C<PerlMemShared_malloc>.

=over 3

 OP *  newPVOP(I32 type, I32 flags, char *pv)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newRANGE>
X<newRANGE>

Constructs and returns a C<range> op, with subordinate C<flip> and
C<flop> ops.  C<flags> gives the eight bits of C<op_flags> for the
C<flip> op and, shifted up eight bits, the eight bits of C<op_private>
for both the C<flip> and C<range> ops, except that the bit with value
1 is automatically set.  C<left> and C<right> supply the expressions
controlling the endpoints of the range; they are consumed by this function
and become part of the constructed op tree.

=over 3

 OP *  newRANGE(I32 flags, OP *left, OP *right)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newSLICEOP>
X<newSLICEOP>

Constructs, checks, and returns an C<lslice> (list slice) op.  C<flags>
gives the eight bits of C<op_flags>, except that C<OPf_KIDS> will
be set automatically, and, shifted up eight bits, the eight bits of
C<op_private>, except that the bit with value 1 or 2 is automatically
set as required.  C<listval> and C<subscript> supply the parameters of
the slice; they are consumed by this function and become part of the
constructed op tree.

=over 3

 OP *  newSLICEOP(I32 flags, OP *subscript, OP *listop)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newSTATEOP>
X<newSTATEOP>

Constructs a state op (COP).  The state op is normally a C<nextstate> op,
but will be a C<dbstate> op if debugging is enabled for currently-compiled
code.  The state op is populated from C<PL_curcop> (or C<PL_compiling>).
If C<label> is non-null, it supplies the name of a label to attach to
the state op; this function takes ownership of the memory pointed at by
C<label>, and will free it.  C<flags> gives the eight bits of C<op_flags>
for the state op.

If C<o> is null, the state op is returned.  Otherwise the state op is
combined with C<o> into a C<lineseq> list op, which is returned.  C<o>
is consumed by this function and becomes part of the returned op tree.

=over 3

 OP *  newSTATEOP(I32 flags, char *label, OP *o)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newSUB>
X<newSUB>

Construct a Perl subroutine without attributes, and also performing some
surrounding jobs, returning a pointer to the constructed subroutine.

This is the same as L<perlintern/C<newATTRSUB_x>> with its C<o_is_gv> parameter
set to FALSE, and its C<attrs> parameter to NULL.  This means that if C<o> is
null, the new sub will be anonymous; otherwise the name will be derived from
C<o> in the way described (as with all other details) in
L<perlintern/C<newATTRSUB_x>>.

=over 3

 CV *  newSUB(I32 floor, OP *o, OP *proto, OP *block)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newSVOP>
X<newSVOP>

Constructs, checks, and returns an op of any type that involves an
embedded SV.  C<type> is the opcode.  C<flags> gives the eight bits
of C<op_flags>.  C<sv> gives the SV to embed in the op; this function
takes ownership of one reference to it.

=over 3

 OP *  newSVOP(I32 type, I32 flags, SV *sv)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newSVREF>
X<newSVREF>

Constructs, checks, and returns a scalar reference op.

=over 3

 OP *  newSVREF(OP *o)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newTRYCATCHOP>
X<newTRYCATCHOP>

NOTE: C<newTRYCATCHOP> is B<experimental> and may change or be
removed without notice.

Constructs and returns a conditional execution statement that implements
the C<try>/C<catch> semantics.  First the op tree in C<tryblock> is executed,
inside a context that traps exceptions.  If an exception occurs then the
optree in C<catchblock> is executed, with the trapped exception set into the
lexical variable given by C<catchvar> (which must be an op of type
C<OP_PADSV>).  All the optrees are consumed by this function and become part
of the returned op tree.

The C<flags> argument is currently ignored.

=over 3

 OP *  newTRYCATCHOP(I32 flags, OP *tryblock, OP *catchvar,
                     OP *catchblock)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newUNOP>
X<newUNOP>

Constructs, checks, and returns an op of any unary type.  C<type> is
the opcode.  C<flags> gives the eight bits of C<op_flags>, except that
C<OPf_KIDS> will be set automatically if required, and, shifted up eight
bits, the eight bits of C<op_private>, except that the bit with value 1
is automatically set.  C<first> supplies an optional op to be the direct
child of the unary op; it is consumed by this function and become part
of the constructed op tree.

=over 3

 OP *  newUNOP(I32 type, I32 flags, OP *first)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newUNOP_AUX>
X<newUNOP_AUX>

Similar to C<newUNOP>, but creates an C<UNOP_AUX> struct instead, with C<op_aux>
initialised to C<aux>

=over 3

 OP *  newUNOP_AUX(I32 type, I32 flags, OP *first,
                   UNOP_AUX_item *aux)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newWHENOP>
X<newWHENOP>

Constructs, checks, and returns an op tree expressing a C<when> block.
C<cond> supplies the test expression, and C<block> supplies the block
that will be executed if the test evaluates to true; they are consumed
by this function and become part of the constructed op tree.  C<cond>
will be interpreted DWIMically, often as a comparison against C<$_>,
and may be null to generate a C<default> block.

=over 3

 OP *  newWHENOP(OP *cond, OP *block)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newWHILEOP>
X<newWHILEOP>

Constructs, checks, and returns an op tree expressing a C<while> loop.
This is a heavyweight loop, with structure that allows exiting the loop
by C<last> and suchlike.

C<loop> is an optional preconstructed C<enterloop> op to use in the
loop; if it is null then a suitable op will be constructed automatically.
C<expr> supplies the loop's controlling expression.  C<block> supplies the
main body of the loop, and C<cont> optionally supplies a C<continue> block
that operates as a second half of the body.  All of these optree inputs
are consumed by this function and become part of the constructed op tree.

C<flags> gives the eight bits of C<op_flags> for the C<leaveloop>
op and, shifted up eight bits, the eight bits of C<op_private> for
the C<leaveloop> op, except that (in both cases) some bits will be set
automatically.  C<debuggable> is currently unused and should always be 1.
C<has_my> can be supplied as true to force the
loop body to be enclosed in its own scope.

=over 3

 OP *  newWHILEOP(I32 flags, I32 debuggable, LOOP *loop, OP *expr,
                  OP *block, OP *cont, I32 has_my)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<newXS>
X<newXS>

Used by C<xsubpp> to hook up XSUBs as Perl subs.  C<filename> needs to be
static storage, as it is used directly as CvFILE(), without a copy being made.

=back

=for hackers
Found in file op.c

=over 4

=item C<OA_BASEOP>

=item C<OA_BINOP>

=item C<OA_COP>

=item C<OA_LISTOP>

=item C<OA_LOGOP>

=item C<OA_LOOP>

=item C<OA_PADOP>

=item C<OA_PMOP>

=item C<OA_PVOP_OR_SVOP>

=item C<OA_SVOP>

=item C<OA_UNOP>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<OP>

Described in L<perlguts>.

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<op_append_elem>
X<op_append_elem>

Append an item to the list of ops contained directly within a list-type
op, returning the lengthened list.  C<first> is the list-type op,
and C<last> is the op to append to the list.  C<optype> specifies the
intended opcode for the list.  If C<first> is not already a list of the
right type, it will be upgraded into one.  If either C<first> or C<last>
is null, the other is returned unchanged.

=over 3

 OP *  op_append_elem(I32 optype, OP *first, OP *last)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<op_append_list>
X<op_append_list>

Concatenate the lists of ops contained directly within two list-type ops,
returning the combined list.  C<first> and C<last> are the list-type ops
to concatenate.  C<optype> specifies the intended opcode for the list.
If either C<first> or C<last> is not already a list of the right type,
it will be upgraded into one.  If either C<first> or C<last> is null,
the other is returned unchanged.

=over 3

 OP *  op_append_list(I32 optype, OP *first, OP *last)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<OP_CLASS>
X<OP_CLASS>

Return the class of the provided OP: that is, which of the *OP
structures it uses.  For core ops this currently gets the information out
of C<PL_opargs>, which does not always accurately reflect the type used;
in v5.26 onwards, see also the function C<L</op_class>> which can do a better
job of determining the used type.

For custom ops the type is returned from the registration, and it is up
to the registree to ensure it is accurate.  The value returned will be
one of the C<OA_>* constants from F<op.h>.

=over 3

 U32  OP_CLASS(OP *o)

=back

=back

=for hackers
Found in file op.h

=over 4

=item C<op_contextualize>
X<op_contextualize>

Applies a syntactic context to an op tree representing an expression.
C<o> is the op tree, and C<context> must be C<G_SCALAR>, C<G_LIST>,
or C<G_VOID> to specify the context to apply.  The modified op tree
is returned.

=over 3

 OP *  op_contextualize(OP *o, I32 context)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<op_convert_list>
X<op_convert_list>

Converts C<o> into a list op if it is not one already, and then converts it
into the specified C<type>, calling its check function, allocating a target if
it needs one, and folding constants.

A list-type op is usually constructed one kid at a time via C<newLISTOP>,
C<op_prepend_elem> and C<op_append_elem>.  Then finally it is passed to
C<op_convert_list> to make it the right type.

=over 3

 OP *  op_convert_list(I32 optype, I32 flags, OP *o)

=back

=back

=for hackers
Found in file op.c

=over 4

=item C<OP_DESC>
X<OP_DESC>

