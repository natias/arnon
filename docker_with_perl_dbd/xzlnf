                           U+FA13..FA14, U+FA1F ...
   Upper                   Uppercase
   Uppercase               (Short: Upper).  [A-Z\xc0-\xd6\xd8-\xde],
                           U+0100, U+0102, U+0104, U+0106, U+0108 ...
   Uppercase_Mapping       (Short: uc)
   Variation_Selector      (Short: VS).  U+180B..180D, U+180F,
                           U+FE00..FE0F, U+E0100..E01EF
   Vertical_Orientation    (Short: vo)
   VertSpace               (Perl extension).  \v.  [\n\cK\f\r\x85],
                           U+2028..2029
   Vo                      Vertical_Orientation
   VS                      Variation_Selector
   WB                      Word_Break
   White_Space             (Short: WSpace).  [\t\n\cK\f\r\x20\x85
                           \xa0], U+1680, U+2000..200A, U+2028..2029,
                           U+202F, U+205F ...
   Word                    XPosixWord.  (Perl extension)
   Word_Break              (Short: WB)
   WSpace                  White_Space
   XDigit                  XPosixXDigit (=Hex_Digit).  (Perl
                           extension)
   XID_Continue            (Short: XIDC).  [0-9A-Z_a-z\xaa\xb5\xb7
                           \xba\xc0-\xd6\xd8-\xf6\xf8-\xff],
                           U+0100..02C1, U+02C6..02D1, U+02E0..02E4,
                           U+02EC, U+02EE ...
   XID_Start               (Short: XIDS).  [A-Za-z\xaa\xb5\xba\xc0-
                           \xd6\xd8-\xf6\xf8-\xff], U+0100..02C1,
                           U+02C6..02D1, U+02E0..02E4, U+02EC, U+02EE
                           ...
   XIDC                    XID_Continue
   XIDS                    XID_Start
   XPerlSpace              XPosixSpace.  (Perl extension)
   XPosixAlnum             (Short: Alnum).  (Perl extension).
                           Alphabetic and (decimal) Numeric.  [0-9A-
                           Za-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-
                           \xff], U+0100..02C1, U+02C6..02D1,
                           U+02E0..02E4, U+02EC, U+02EE ...
   XPosixAlpha             Alphabetic.  (Perl extension).  [A-Za-z
                           \xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\xff],
                           U+0100..02C1, U+02C6..02D1, U+02E0..02E4,
                           U+02EC, U+02EE ...
   XPosixBlank             (Short: Blank).  (Perl extension).  \h,
                           Horizontal white space.  [\t\x20\xa0],
                           U+1680, U+2000..200A, U+202F, U+205F,
                           U+3000
   XPosixCntrl             General_Category=Control  (Short: Cntrl).
                           (Perl extension).  Control characters.
                           [\x00-\x1f\x7f-\x9f]
   XPosixDigit             General_Category=Decimal_Number  (Short:
                           Digit).  (Perl extension).  [0-9] + all
                           other decimal digits.  [0-9],
                           U+0660..0669, U+06F0..06F9, U+07C0..07C9,
                           U+0966..096F, U+09E6..09EF ...
   XPosixGraph             (Short: Graph).  (Perl extension).
                           Characters that are graphical.  [!\"#\$
                           \%&\'\(\)*+,\-.\/0-9:;<=>?\@A-Z\[\\\]
                           \^_`a-z\{\|\}~\xa1-\xff], U+0100..0377,
                           U+037A..037F, U+0384..038A, U+038C,
                           U+038E..03A1 ...
   XPosixLower             Lowercase.  (Perl extension).  [a-z\xaa
                           \xb5\xba\xdf-\xf6\xf8-\xff], U+0101,
                           U+0103, U+0105, U+0107, U+0109 ...
   XPosixPrint             (Short: Print).  (Perl extension).
                           Characters that are graphical plus space
                           characters (but no controls).  [\x20-\x7e
                           \xa0-\xff], U+0100..0377, U+037A..037F,
                           U+0384..038A, U+038C, U+038E..03A1 ...
   XPosixPunct             (Perl extension).  \p{Punct} + ASCII-range
                           \p{Symbol}.  [!\"#\$\%&\'\(\)*+,\-.\/:;<=
                           >?\@\[\\\]\^_`\{\|\}~\xa1\xa7\xab\xb6-
                           \xb7\xbb\xbf], U+037E, U+0387,
                           U+055A..055F, U+0589..058A, U+05BE ...
   XPosixSpace             (Perl extension).  \s including beyond
                           ASCII and vertical tab.  [\t\n\cK\f\r\x20
                           \x85\xa0], U+1680, U+2000..200A,
                           U+2028..2029, U+202F, U+205F ...
   XPosixUpper             Uppercase.  (Perl extension).  [A-Z\xc0-
                           \xd6\xd8-\xde], U+0100, U+0102, U+0104,
                           U+0106, U+0108 ...
   XPosixWord              (Short: Word).  (Perl extension).  \w,
                           including beyond ASCII; = \p{Alnum} + \pM
                           + \p{Pc} + \p{Join_Control}.  [0-9A-Z_a-z
                           \xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\xff],
                           U+0100..02C1, U+02C6..02D1, U+02E0..02E4,
                           U+02EC, U+02EE ...
   XPosixXDigit            Hex_Digit  (Short: XDigit).  (Perl
                           extension).  [0-9A-Fa-f], U+FF10..FF19,
                           U+FF21..FF26, U+FF41..FF46


=head1 Properties accessible through other means

Certain properties are accessible also via core function calls.  These are:

 Lowercase_Mapping          lc() and lcfirst()
 Titlecase_Mapping          ucfirst()
 Uppercase_Mapping          uc()

Also, Case_Folding is accessible through the C</i> modifier in regular
expressions, the C<\F> transliteration escape, and the C<L<fc|perlfunc/fc>>
operator.

Besides being able to say C<\p{Name=...}>, the Name and Name_Aliases
properties are accessible through the C<\N{}> interpolation in double-quoted
strings and regular expressions; and functions C<charnames::viacode()>,
C<charnames::vianame()>, and C<charnames::string_vianame()> (which require a
C<use charnames ();> to be specified.

Finally, most properties related to decomposition are accessible via
L<Unicode::Normalize>.

=head1 Unicode character properties that are NOT accepted by Perl

Perl will generate an error for a few character properties in Unicode when
used in a regular expression.  The non-Unihan ones are listed below, with the
reasons they are not accepted, perhaps with work-arounds.  The short names for
the properties are listed enclosed in (parentheses).
As described after the list, an installation can change the defaults and choose
to accept any of these.  The list is machine generated based on the
choices made for the installation that generated this document.


=over 4



=item I<Expands_On_NFC> (XO_NFC)

=item I<Expands_On_NFD> (XO_NFD)

=item I<Expands_On_NFKC> (XO_NFKC)

=item I<Expands_On_NFKD> (XO_NFKD)

Deprecated by Unicode.  These are characters that expand to more than one character in the specified normalization form, but whether they actually take up more bytes or not depends on the encoding being used.  For example, a UTF-8 encoded character may expand to a different number of bytes than a UTF-32 encoded character.



=item I<Grapheme_Link> (Gr_Link)

Duplicates ccc=vr (Canonical_Combining_Class=Virama)



=item I<Jamo_Short_Name> (JSN)

=item I<Other_Alphabetic> (OAlpha)

=item I<Other_Default_Ignorable_Code_Point> (ODI)

=item I<Other_Grapheme_Extend> (OGr_Ext)

=item I<Other_ID_Continue> (OIDC)

=item I<Other_ID_Start> (OIDS)

=item I<Other_Lowercase> (OLower)

=item I<Other_Math> (OMath)

=item I<Other_Uppercase> (OUpper)

Used by Unicode internally for generating other properties and not intended to be used stand-alone



=item I<Script=Katakana_Or_Hiragana> (sc=Hrkt)

Obsolete.  All code points previously matched by this have been moved to "Script=Common".  Consider instead using "Script_Extensions=Katakana" or "Script_Extensions=Hiragana" (or both)



=item I<Script_Extensions=Katakana_Or_Hiragana> (scx=Hrkt)

All code points that would be matched by this are matched by either "Script_Extensions=Katakana" or "Script_Extensions=Hiragana"

=back


An installation can choose to allow any of these to be matched by downloading
the Unicode database from L<http://www.unicode.org/Public/> to
C<$Config{privlib}>/F<unicore/> in the Perl source tree, changing the
controlling lists contained in the program
C<$Config{privlib}>/F<unicore/mktables> and then re-compiling and installing.
(C<%Config> is available from the Config module).

Also, perl can be recompiled to operate on an earlier version of the Unicode
standard.  Further information is at
C<$Config{privlib}>/F<unicore/README.perl>.

=head1 Other information in the Unicode data base

The Unicode data base is delivered in two different formats.  The XML version
is valid for more modern Unicode releases.  The other version is a collection
of files.  The two are intended to give equivalent information.  Perl uses the
older form; this allows you to recompile Perl to use early Unicode releases.

The only non-character property that Perl currently supports is Named
Sequences, in which a sequence of code points
is given a name and generally treated as a single entity.  (Perl supports
these via the C<\N{...}> double-quotish construct,
L<charnames/charnames::string_vianame(name)>, and L<Unicode::UCD/namedseq()>.

Below is a list of the files in the Unicode data base that Perl doesn't
currently use, along with very brief descriptions of their purposes.
Some of the names of the files have been shortened from those that Unicode
uses, in order to allow them to be distinguishable from similarly named files
on file systems for which only the first 8 characters of a name are
significant.

=over 4




=item F<auxiliary/GraphemeBreakTest.html> 

=item F<auxiliary/LineBreakTest.html> 

=item F<auxiliary/SentenceBreakTest.html> 

=item F<auxiliary/WordBreakTest.html> 

Documentation of validation Tests



=item F<BidiCharacterTest.txt> 

=item F<BidiTest.txt> 

Validation Tests



=item F<CJKRadicals.txt> 

Maps the kRSUnicode property values to corresponding code points



=item F<confusables.txt> 

=item F<confusablesSummary.txt> 

=item F<intentional.txt> 

Currently unused by Perl



=item F<emoji/ReadMe.txt> 

=item F<ReadMe.txt> 

Documentation



=item F<EmojiSources.txt> 

Maps certain Unicode code points to their legacy Japanese cell-phone values



=item F<extracted/DName.txt> 

This file adds no new information not already present in other files



=item F<Index.txt> 

Alphabetical index of Unicode characters



=item F<NamedSqProv.txt> 

Named sequences proposed for inclusion in a later version of the Unicode Standard; if you need them now, you can append this file to F<NamedSequences.txt> and recompile perl



=item F<NamesList.html> 

Describes the format and contents of F<NamesList.txt>



=item F<NamesList.txt> 

Annotated list of characters



=item F<NormalizationCorrections.txt> 

Documentation of corrections already incorporated into the Unicode data base



=item F<NushuSources.txt> 

Specifies source material for Nushu characters



=item F<StandardizedVariants.html> 

Obsoleted as of Unicode 9.0, but previously provided a visual display of the standard variant sequences derived from F<StandardizedVariants.txt>.



=item F<StandardizedVariants.txt> 

Certain glyph variations for character display are standardized.  This lists the non-Unihan ones; the Unihan ones are also not used by Perl, and are in a separate Unicode data base L<http://www.unicode.org/ivd>



=item F<TangutSources.txt> 

Specifies source mappings for Tangut ideographs and components. This data file also includes informative radical-stroke values that are used internally by Unicode



=item F<USourceData.txt> 

Documentation of status and cross reference of proposals for encoding by Unicode of Unihan characters



=item F<USourceGlyphs.pdf> 

Pictures of the characters in F<USourceData.txt>


=back

=head1 SEE ALSO

L<http://www.unicode.org/reports/tr44/>

L<perlrecharclass>

L<perlunicode>

                                                                                                                                                                                                                                                                      usr/local/lib/perl5/5.40.0/pod/perlunitut.pod                                                       0000644 0000000 0000000 00000017420 14714567415 017213  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

perlunitut - Perl Unicode Tutorial

=head1 DESCRIPTION

The days of just flinging strings around are over. It's well established that
modern programs need to be capable of communicating funny accented letters, and
things like euro symbols. This means that programmers need new habits. It's
easy to program Unicode capable software, but it does require discipline to do
it right.

There's a lot to know about character sets, and text encodings. It's probably
best to spend a full day learning all this, but the basics can be learned in
minutes. 

These are not the very basics, though. It is assumed that you already
know the difference between bytes and characters, and realise (and accept!)
that there are many different character sets and encodings, and that your
program has to be explicit about them. Recommended reading is "The Absolute
Minimum Every Software Developer Absolutely, Positively Must Know About Unicode
and Character Sets (No Excuses!)" by Joel Spolsky, at
L<https://joelonsoftware.com/articles/Unicode.html>.

This tutorial speaks in rather absolute terms, and provides only a limited view
of the wealth of character string related features that Perl has to offer. For
most projects, this information will probably suffice.

=head2 Definitions

It's important to set a few things straight first. This is the most important
part of this tutorial. This view may conflict with other information that you
may have found on the web, but that's mostly because many sources are wrong.

You may have to re-read this entire section a few times...

=head3 Unicode

B<Unicode> is a character set with room for lots of characters. The ordinal
value of a character is called a B<code point>.   (But in practice, the
distinction between code point and character is blurred, so the terms often
are used interchangeably.)

There are many, many code points, but computers work with bytes, and a byte has
room for only 256 values.  Unicode has many more characters than that,
so you need a method to make these accessible.

Unicode is encoded using several competing encodings, of which UTF-8 is the
most used. In a Unicode encoding, multiple subsequent bytes can be used to
store a single code point, or simply: character.

=head3 UTF-8

B<UTF-8> is a Unicode encoding. Many people think that Unicode and UTF-8 are
the same thing, but they're not. There are more Unicode encodings, but much of
the world has standardized on UTF-8. 

UTF-8 treats the first 128 codepoints, 0..127, the same as ASCII. They take
only one byte per character. All other characters are encoded as two to
four bytes using a complex scheme. Fortunately, Perl handles this for
us, so we don't have to worry about this.

=head3 Text strings (character strings)

B<Text strings>, or B<character strings> are made of characters. Bytes are
irrelevant here, and so are encodings. Each character is just that: the
character.

On a text string, you would do things like:

    $text =~ s/foo/bar/;
    if ($string =~ /^\d+$/) { ... }
    $text = ucfirst $text;
    my $character_count = length $text;

The value of a character (C<ord>, C<chr>) is the corresponding Unicode code
point.

=head3 Binary strings (byte strings)

B<Binary strings>, or B<byte strings> are made of bytes. Here, you don't have
characters, just bytes. All communication with the outside world (anything
outside of your current Perl process) is done in binary.

On a binary string, you would do things like:

    my (@length_content) = unpack "(V/a)*", $binary;
    $binary =~ s/\x00\x0F/\xFF\xF0/;  # for the brave :)
    print {$fh} $binary;
    my $byte_count = length $binary;

=head3 Encoding

B<Encoding> (as a verb) is the conversion from I<text> to I<binary>. To encode,
you have to supply the target encoding, for example C<iso-8859-1> or C<UTF-8>.
Some encodings, like the C<iso-8859> ("latin") range, do not support the full
Unicode standard; characters that can't be represented are lost in the
conversion.

=head3 Decoding

B<Decoding> is the conversion from I<binary> to I<text>. To decode, you have to
know what encoding was used during the encoding phase. And most of all, it must
be something decodable. It doesn't make much sense to decode a PNG image into a
text string.

=head3 Internal format

Perl has an B<internal format>, an encoding that it uses to encode text strings
so it can store them in memory. All text strings are in this internal format.
In fact, text strings are never in any other format!

You shouldn't worry about what this format is, because conversion is
automatically done when you decode or encode.

=head2 Your new toolkit

Add to your standard heading the following line:

    use Encode qw(encode decode);

Or, if you're lazy, just:

    use Encode;

=head2 I/O flow (the actual 5 minute tutorial)

The typical input/output flow of a program is:

    1. Receive and decode
    2. Process
    3. Encode and output

If your input is binary, and is supposed to remain binary, you shouldn't decode
it to a text string, of course. But in all other cases, you should decode it.

Decoding can't happen reliably if you don't know how the data was encoded. If
you get to choose, it's a good idea to standardize on UTF-8.

    my $foo   = decode('UTF-8', get 'http://example.com/');
    my $bar   = decode('ISO-8859-1', readline STDIN);
    my $xyzzy = decode('Windows-1251', $cgi->param('foo'));

Processing happens as you knew before. The only difference is that you're now
using characters instead of bytes. That's very useful if you use things like
C<substr>, or C<length>.

It's important to realize that there are no bytes in a text string. Of course,
Perl has its internal encoding to store the string in memory, but ignore that.
If you have to do anything with the number of bytes, it's probably best to move
that part to step 3, just after you've encoded the string. Then you know
exactly how many bytes it will be in the destination string.

The syntax for encoding text strings to binary strings is as simple as decoding:

    $body = encode('UTF-8', $body);

If you needed to know the length of the string in bytes, now's the perfect time
for that. Because C<$body> is now a byte string, C<length> will report the
number of bytes, instead of the number of characters. The number of
characters is no longer known, because characters only exist in text strings.

    my $byte_count = length $body;

And if the protocol you're using supports a way of letting the recipient know
which character encoding you used, please help the receiving end by using that
feature! For example, E-mail and HTTP support MIME headers, so you can use the
C<Content-Type> header. They can also have C<Content-Length> to indicate the
number of I<bytes>, which is always a good idea to supply if the number is
known.

    "Content-Type: text/plain; charset=UTF-8",
    "Content-Length: $byte_count"

=head1 SUMMARY

Decode everything you receive, encode everything you send out. (If it's text
data.)

=head1 Q and A (or FAQ)

After reading this document, you ought to read L<perlunifaq> too, then
L<perluniintro>.

=head1 ACKNOWLEDGEMENTS

Thanks to Johan Vromans from Squirrel Consultancy. His UTF-8 rants during the
Amsterdam Perl Mongers meetings got me interested and determined to find out
how to use character encodings in Perl in ways that don't break easily.

Thanks to Gerard Goossen from TTY. His presentation "UTF-8 in the wild" (Dutch
Perl Workshop 2006) inspired me to publish my thoughts and write this tutorial.

Thanks to the people who asked about this kind of stuff in several Perl IRC
channels, and have constantly reminded me that a simpler explanation was
needed.

Thanks to the people who reviewed this document for me, before it went public.
They are: Benjamin Smith, Jan-Pieter Cornet, Johan Vromans, Lukas Mai, Nathan
Gray.

=head1 AUTHOR

Juerd Waalboer <#####@juerd.nl>

=head1 SEE ALSO

L<perlunifaq>, L<perlunicode>, L<perluniintro>, L<Encode>

                                                                                                                                                                                                                                                usr/local/lib/perl5/5.40.0/pod/perlutil.pod                                                         0000644 0000000 0000000 00000016350 14714567415 016641  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

perlutil - utilities packaged with the Perl distribution

=head1 DESCRIPTION

Along with the Perl interpreter itself, the Perl distribution installs a
range of utilities on your system. There are also several utilities
which are used by the Perl distribution itself as part of the install
process. This document exists to list all of these utilities, explain
what they are for and provide pointers to each module's documentation,
if appropriate.

=head1 LIST OF UTILITIES

=head2 Documentation

=over 3

=item L<perldoc>

The main interface to Perl's documentation is F<perldoc>, although
if you're reading this, it's more than likely that you've already found
it. F<perldoc> will extract and format the documentation from any file
in the current directory, any Perl module installed on the system, or
any of the standard documentation pages, such as this one. Use 
C<perldoc E<lt>nameE<gt>> to get information on any of the utilities
described in this document.

=item L<pod2man>

=item L<pod2text>

If it's run from a terminal, F<perldoc> will usually call F<pod2man> to
translate POD (Plain Old Documentation - see L<perlpod> for an
explanation) into a manpage, and then run F<man> to display it; if
F<man> isn't available, F<pod2text> will be used instead and the output
piped through your favourite pager.

=item L<pod2html>

As well as these two, there is another converter: F<pod2html> will
produce HTML pages from POD.

=item L<pod2usage>

If you just want to know how to use the utilities described here,
F<pod2usage> will just extract the "USAGE" section; some of
the utilities will automatically call F<pod2usage> on themselves when
you call them with C<-help>.

=item L<podchecker>

If you're writing your own documentation in POD, the F<podchecker>
utility will look for errors in your markup.

=item L<splain>

F<splain> is an interface to L<perldiag> - paste in your error message
to it, and it'll explain it for you.

=item F<roffitall>

The F<roffitall> utility is not installed on your system but lives in
the F<pod/> directory of your Perl source kit; it converts all the
documentation from the distribution to F<*roff> format, and produces a
typeset PostScript or text file of the whole lot.

=back

=head2 Converters

=over 3

=item L<pl2pm>

To help you convert legacy programs to more modern Perl, the
F<pl2pm> utility will help you convert old-style Perl 4 libraries
to new-style Perl5 modules.

=back

=head2 Administration

=over 3

=item L<libnetcfg>

To display and change the libnet configuration run the libnetcfg command.

=item L<perlivp>

The F<perlivp> program is set up at Perl source code build time to test
the Perl version it was built under.  It can be used after running C<make
install> (or your platform's equivalent procedure) to verify that perl
and its libraries have been installed correctly.

=back

=head2 Development

There are a set of utilities which help you in developing Perl programs, 
and in particular, extending Perl with C.

=over 3

=item L<perlbug>

F<perlbug> used to be the recommended way to report bugs in the perl
interpreter itself or any of the standard library modules back to the
developers; bug reports and patches should now be submitted to
L<https://github.com/Perl/perl5/issues>.

=item L<perlthanks|perlbug>

This program provides an easy way to send a thank-you message back to the
authors and maintainers of perl. It's just F<perlbug> installed under
another name.

=item L<h2ph>

Back before Perl had the XS system for connecting with C libraries,
programmers used to get library constants by reading through the C
header files. You may still see S<C<require 'syscall.ph'>> or similar
around - the F<.ph> file should be created by running F<h2ph> on the
corresponding F<.h> file. See the L<h2ph> documentation for more on how
to convert a whole bunch of header files at once.

=item L<h2xs>

F<h2xs> converts C header files into XS modules, and will try and write
as much glue between C libraries and Perl modules as it can. It's also
very useful for creating skeletons of pure Perl modules.

=item L<enc2xs>

F<enc2xs> builds a Perl extension for use by Encode from either
Unicode Character Mapping files (.ucm) or Tcl Encoding Files (.enc).
Besides being used internally during the build process of the Encode
module, you can use F<enc2xs> to add your own encoding to perl.
No knowledge of XS is necessary.

=item L<xsubpp>

F<xsubpp> is a compiler to convert Perl XS code into C code.
It is typically run by the makefiles created by L<ExtUtils::MakeMaker>.

F<xsubpp> will compile XS code into C code by embedding the constructs
necessary to let C functions manipulate Perl values and creates the glue
necessary to let Perl access those functions.

=item L<prove>

F<prove> is a command-line interface to the test-running functionality
of L<Test::Harness>.  It's an alternative to C<make test>.

=item L<corelist>

A command-line front-end to L<Module::CoreList>, to query what modules
were shipped with given versions of perl.

=back

=head2 General tools

A few general-purpose tools are shipped with perl, mostly because they
came along modules included in the perl distribution.

=over 3

=item L<encguess>

F<encguess> will attempt to guess the character encoding of files.

=item L<json_pp>

F<json_pp> is a pure Perl JSON converter and formatter.

=item L<piconv>

F<piconv> is a Perl version of L<iconv(1)>, a character encoding converter
widely available for various Unixen today.  This script was primarily a
technology demonstrator for Perl v5.8.0, but you can use piconv in the
place of iconv for virtually any case.

=item L<ptar>

F<ptar> is a tar-like program, written in pure Perl.

=item L<ptardiff>

F<ptardiff> is a small utility that produces a diff between an extracted
archive and an unextracted one. (Note that this utility requires the
L<Text::Diff> module to function properly; this module isn't distributed
with perl, but is available from the CPAN.)

=item L<ptargrep>

F<ptargrep> is a utility to apply pattern matching to the contents of files 
in a tar archive.

=item L<shasum>

This utility, that comes with the L<Digest::SHA> module, is used to print
or verify SHA checksums.

=item L<streamzip>

F<streamzip> compresses data streamed to STDIN into a streamed zip container.

=item L<zipdetails>

F<zipdetails> displays information about the internal record structure of the zip file.
It is not concerned with displaying any details of the compressed data stored in the zip file.

=back

=head2 Installation

These utilities help manage extra Perl modules that don't come with the perl
distribution.

=over 3

=item L<cpan>

F<cpan> is a command-line interface to CPAN.pm.  It allows you to install
modules or distributions from CPAN, or just get information about them, and
a lot more.  It is similar to the command line mode of the L<CPAN> module,

    perl -MCPAN -e shell

=item L<instmodsh>

A little interface to L<ExtUtils::Installed> to examine installed modules,
validate your packlists and even create a tarball from an installed module.

=back

=head1 SEE ALSO

L<perldoc>, L<pod2man>, L<pod2text>, L<pod2html>, L<pod2usage>,
L<podchecker>, L<splain>, L<pl2pm>,
L<perlbug>, L<h2ph>, L<h2xs>, L<enc2xs>,
L<xsubpp>, L<cpan>, L<encguess>, L<instmodsh>, L<json_pp>,
L<piconv>, L<prove>, L<corelist>, L<ptar>,
L<ptardiff>, L<shasum>, L<streamzip>, L<zipdetails>

=cut
                                                                                                                                                                                                                                                                                        usr/local/lib/perl5/5.40.0/pod/perlvar.pod                                                          0000644 0000000 0000000 00000266027 14714567415 016464  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

perlvar - Perl predefined variables

=head1 DESCRIPTION

=head2 The Syntax of Variable Names

Variable names in Perl can have several formats.  Usually, they
must begin with a letter or underscore, in which case they can be
arbitrarily long (up to an internal limit of 251 characters) and
may contain letters, digits, underscores, or the special sequence
C<::> or C<'>.  In this case, the part before the last C<::> or
C<'> is taken to be a I<package qualifier>; see L<perlmod>.
A Unicode letter that is not ASCII is not considered to be a letter
unless S<C<"use utf8">> is in effect, and somewhat more complicated
rules apply; see L<perldata/Identifier parsing> for details.

Perl variable names may also be a sequence of digits, a single
punctuation character, or the two-character sequence: C<^> (caret or
CIRCUMFLEX ACCENT) followed by any one of the characters C<[][A-Z^_?\]>.
These names are all reserved for
special uses by Perl; for example, the all-digits names are used
to hold data captured by backreferences after a regular expression
match.

Since Perl v5.6.0, Perl variable names may also be alphanumeric strings
preceded by a caret.  These must all be written using the demarcated
variable form using curly braces such as C<${^Foo}>;
the braces are B<not> optional.  C<${^Foo}> denotes the scalar variable
whose name is considered to be a control-C<F> followed by two C<o>'s.
(See L<perldata/"Demarcated variable names using braces"> for more
information on this form of spelling a variable name or specifying
access to an element of an array or a hash).
These variables are
reserved for future special uses by Perl, except for the ones that
begin with C<^_> (caret-underscore).  No
name that begins with C<^_> will acquire a special
meaning in any future version of Perl; such names may therefore be
used safely in programs.  C<$^_> itself, however, I<is> reserved.

Note that you also B<must> use the demarcated form to access subscripts
of variables of this type when interpolating, for instance to access the
first element of the C<@{^CAPTURE}> variable inside of a double quoted
string you would write C<"${^CAPTURE[0]}"> and NOT C<"${^CAPTURE}[0]">
which would mean to reference a scalar variable named C<${^CAPTURE}> and
not index 0 of the magic C<@{^CAPTURE}> array which is populated by the
regex engine.

Perl identifiers that begin with digits or
punctuation characters are exempt from the effects of the C<package>
declaration and are always forced to be in package C<main>; they are
also exempt from C<strict 'vars'> errors.  A few other names are also
exempt in these ways:

    ENV      STDIN
    INC      STDOUT
    ARGV     STDERR
    ARGVOUT
    SIG

In particular, the special C<${^_XYZ}> variables are always taken
to be in package C<main>, regardless of any C<package> declarations
presently in scope.

=head1 SPECIAL VARIABLES

The following names have special meaning to Perl.  Most punctuation
names have reasonable mnemonics, or analogs in the shells.
Nevertheless, if you wish to use long variable names, you need only say:

    use English;

at the top of your program.  This aliases all the short names to the long
names in the current package.  Some even have medium names, generally
borrowed from B<awk>.  For more info, please see L<English>.

Before you continue, note the sort order for variables.  In general, we
first list the variables in case-insensitive, almost-lexigraphical
order (ignoring the C<{> or C<^> preceding words, as in C<${^UNICODE}>
or C<$^T>), although C<$_> and C<@_> move up to the top of the pile.
For variables with the same identifier, we list it in order of scalar,
array, hash, and bareword.

=head2 General Variables

=over 8

=item $ARG

=item $_
X<$_> X<$ARG>

The default input and pattern-searching space.  The following pairs are
equivalent:

    while (<>) {...}    # equivalent only in while!
    while (defined($_ = <>)) {...}

    /^Subject:/
    $_ =~ /^Subject:/

    tr/a-z/A-Z/
    $_ =~ tr/a-z/A-Z/

    chomp
    chomp($_)

Here are the places where Perl will assume C<$_> even if you don't use it:

=over 3

=item *

The following functions use C<$_> as a default argument:

abs, alarm, chomp, chop, chr, chroot,
cos, defined, eval, evalbytes, exp, fc, glob, hex, int, lc,
lcfirst, length, log, lstat, mkdir, oct, ord, pos, print, printf,
quotemeta, readlink, readpipe, ref, require, reverse (in scalar context only),
rmdir, say, sin, split (for its second
argument), sqrt, stat, study, uc, ucfirst,
unlink, unpack.

=item *

All file tests (C<-f>, C<-d>) except for C<-t>, which defaults to STDIN.
See L<perlfunc/-X>

=item *

The pattern matching operations C<m//>, C<s///> and C<tr///> (aka C<y///>)
when used without an C<=~> operator.

=item *

The default iterator variable in a C<foreach> loop if no other
variable is supplied.

=item *

The implicit iterator variable in the C<grep()> and C<map()> functions.

=item *

The implicit variable of C<given()>.

=item *

The default place to put the next value or input record
when a C<< <FH> >>, C<readline>, C<readdir> or C<each>
operation's result is tested by itself as the sole criterion of a C<while>
test.  Outside a C<while> test, this will not happen.

=back

C<$_> is a global variable.

However, between perl v5.10.0 and v5.24.0, it could be used lexically by
writing C<my $_>.  Making C<$_> refer to the global C<$_> in the same scope
was then possible with C<our $_>.  This experimental feature was removed and is
now a fatal error, but you may encounter it in older code.

Mnemonic: underline is understood in certain operations.

=item @ARG

=item @_
X<@_> X<@ARG>

Within a subroutine the array C<@_> contains the parameters passed to
that subroutine.  Inside a subroutine, C<@_> is the default array for
the array operators C<pop> and C<shift>.

See L<perlsub>.

=item $LIST_SEPARATOR

=item $"
X<$"> X<$LIST_SEPARATOR>

When an array or an array slice is interpolated into a double-quoted
string or a similar context such as C</.../>, its elements are
separated by this value.  Default is a space.  For example, this:

    print "The array is: @array\n";

is equivalent to this:

    print "The array is: " . join($", @array) . "\n";

Mnemonic: works in double-quoted context.

=item $PROCESS_ID

=item $PID
