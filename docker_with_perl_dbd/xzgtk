
Many of the values embedded in trace output are formatted using the neat()
utility function. This means they may be quoted, sanitized, and possibly
truncated if longer than C<$DBI::neat_maxlen>. See L</neat> for more details.

=head2 Tracing Tips

You can add tracing to your own application code using the L</trace_msg> method.

It can sometimes be handy to compare trace files from two different runs of the
same script. However using a tool like C<diff> on the original log output
doesn't work well because the trace file is full of object addresses that may
differ on each run.

The DBI includes a handy utility called dbilogstrip that can be used to
'normalize' the log content. It can be used as a filter like this:

    DBI_TRACE=2 perl yourscript.pl ...args1... 2>&1 | dbilogstrip > dbitrace1.log
    DBI_TRACE=2 perl yourscript.pl ...args2... 2>&1 | dbilogstrip > dbitrace2.log
    diff -u dbitrace1.log dbitrace2.log

See L<dbilogstrip> for more information.

=head1 DBI ENVIRONMENT VARIABLES

The DBI module recognizes a number of environment variables, but most of
them should not be used most of the time.
It is better to be explicit about what you are doing to avoid the need
for environment variables, especially in a web serving system where web
servers are stingy about which environment variables are available.

=head2 DBI_DSN

The DBI_DSN environment variable is used by DBI->connect if you do not
specify a data source when you issue the connect.
It should have a format such as "dbi:Driver:databasename".

=head2 DBI_DRIVER

The DBI_DRIVER environment variable is used to fill in the database
driver name in DBI->connect if the data source string starts "dbi::"
(thereby omitting the driver).
If DBI_DSN omits the driver name, DBI_DRIVER can fill the gap.

=head2 DBI_AUTOPROXY

The DBI_AUTOPROXY environment variable takes a string value that starts
"dbi:Proxy:" and is typically followed by "hostname=...;port=...".
It is used to alter the behaviour of DBI->connect.
For full details, see DBI::Proxy documentation.

=head2 DBI_USER

The DBI_USER environment variable takes a string value that is used as
the user name if the DBI->connect call is given undef (as distinct from
an empty string) as the username argument.
Be wary of the security implications of using this.

=head2 DBI_PASS

The DBI_PASS environment variable takes a string value that is used as
the password if the DBI->connect call is given undef (as distinct from
an empty string) as the password argument.
Be extra wary of the security implications of using this.

=head2 DBI_DBNAME (obsolete)

The DBI_DBNAME environment variable takes a string value that is used only when the
obsolescent style of DBI->connect (with driver name as fourth parameter) is used, and
when no value is provided for the first (database name) argument.

=head2 DBI_TRACE

The DBI_TRACE environment variable specifies the global default
trace settings for the DBI at startup. Can also be used to direct
trace output to a file. When the DBI is loaded it does:

  DBI->trace(split /=/, $ENV{DBI_TRACE}, 2) if $ENV{DBI_TRACE};

So if C<DBI_TRACE> contains an "C<=>" character then what follows
it is used as the name of the file to append the trace to.

output appended to that file. If the name begins with a number
followed by an equal sign (C<=>), then the number and the equal sign are
stripped off from the name, and the number is used to set the trace
level. For example:

  DBI_TRACE=1=dbitrace.log perl your_test_script.pl

On Unix-like systems using a Bourne-like shell, you can do this easily
on the command line:

  DBI_TRACE=2 perl your_test_script.pl

See L</TRACING> for more information.

=head2 PERL_DBI_DEBUG (obsolete)

An old variable that should no longer be used; equivalent to DBI_TRACE.

=head2 DBI_PROFILE

The DBI_PROFILE environment variable can be used to enable profiling
of DBI method calls. See L<DBI::Profile> for more information.

=head2 DBI_PUREPERL

The DBI_PUREPERL environment variable can be used to enable the
use of DBI::PurePerl.  See L<DBI::PurePerl> for more information.

=head1 WARNING AND ERROR MESSAGES

=head2 Fatal Errors

=over 4

=item Can't call method "prepare" without a package or object reference

The C<$dbh> handle you're using to call C<prepare> is probably undefined because
the preceding C<connect> failed. You should always check the return status of
DBI methods, or use the L</RaiseError> attribute.

=item Can't call method "execute" without a package or object reference

The C<$sth> handle you're using to call C<execute> is probably undefined because
the preceding C<prepare> failed. You should always check the return status of
DBI methods, or use the L</RaiseError> attribute.

=item DBI/DBD internal version mismatch

The DBD driver module was built with a different version of DBI than
the one currently being used.  You should rebuild the DBD module under
the current version of DBI.

(Some rare platforms require "static linking". On those platforms, there
may be an old DBI or DBD driver version actually embedded in the Perl
executable being used.)

=item DBD driver has not implemented the AutoCommit attribute

The DBD driver implementation is incomplete. Consult the author.

=item Can't [sg]et %s->{%s}: unrecognised attribute

You attempted to set or get an unknown attribute of a handle.  Make
sure you have spelled the attribute name correctly; case is significant
(e.g., "Autocommit" is not the same as "AutoCommit").

=back

=head1 Pure-Perl DBI

A pure-perl emulation of the DBI is included in the distribution
for people using pure-perl drivers who, for whatever reason, can't
install the compiled DBI. See L<DBI::PurePerl>.

=head1 SEE ALSO

=head2 Driver and Database Documentation

Refer to the documentation for the DBD driver that you are using.

Refer to the SQL Language Reference Manual for the database engine that you are using.

=head2 ODBC and SQL/CLI Standards Reference Information

More detailed information about the semantics of certain DBI methods
that are based on ODBC and SQL/CLI standards is available on-line
via microsoft.com, for ODBC, and www.jtc1sc32.org for the SQL/CLI
standard:

 DBI method        ODBC function     SQL/CLI Working Draft
 ----------        -------------     ---------------------
 column_info       SQLColumns        Page 124
 foreign_key_info  SQLForeignKeys    Page 163
 get_info          SQLGetInfo        Page 214
 primary_key_info  SQLPrimaryKeys    Page 254
 table_info        SQLTables         Page 294
 type_info         SQLGetTypeInfo    Page 239
 statistics_info   SQLStatistics

To find documentation on the ODBC function you can use
the MSDN search facility at:

    http://msdn.microsoft.com/Search

and search for something like C<"SQLColumns returns">.

And for SQL/CLI standard information on SQLColumns you'd read page 124 of
the (very large) SQL/CLI Working Draft available from:

  http://jtc1sc32.org/doc/N0701-0750/32N0744T.pdf

=head2 Standards Reference Information

A hyperlinked, browsable version of the BNF syntax for SQL92 (plus
Oracle 7 SQL and PL/SQL) is available here:

  http://cui.unige.ch/db-research/Enseignement/analyseinfo/SQL92/BNFindex.html

You can find more information about SQL standards online by searching for the
appropriate standard names and numbers. For example, searching for
"ANSI/ISO/IEC International Standard (IS) Database Language SQL - Part 1:
SQL/Framework" you'll find a copy at:

  ftp://ftp.iks-jena.de/mitarb/lutz/standards/sql/ansi-iso-9075-1-1999.pdf

=head2 Books and Articles

Programming the Perl DBI, by Alligator Descartes and Tim Bunce.
L<http://books.perl.org/book/154>

Programming Perl 3rd Ed. by Larry Wall, Tom Christiansen & Jon Orwant.
L<http://books.perl.org/book/134>

Learning Perl by Randal Schwartz.
L<http://books.perl.org/book/101>

Details of many other books related to perl can be found at L<http://books.perl.org>

=head2 Perl Modules

Index of DBI related modules available from CPAN:

 L<https://metacpan.org/search?q=DBD%3A%3A>
 L<https://metacpan.org/search?q=DBIx%3A%3A>
 L<https://metacpan.org/search?q=DBI>

For a good comparison of RDBMS-OO mappers and some OO-RDBMS mappers
(including Class::DBI, Alzabo, and DBIx::RecordSet in the former
category and Tangram and SPOPS in the latter) see the Perl
Object-Oriented Persistence project pages at:

 http://poop.sourceforge.net

A similar page for Java toolkits can be found at:

 http://c2.com/cgi-bin/wiki?ObjectRelationalToolComparison

=head2 Mailing List

The I<dbi-users> mailing list is the primary means of communication among
users of the DBI and its related modules. For details send email to:

 L<dbi-users-help@perl.org>

There are typically between 700 and 900 messages per month.  You have
to subscribe in order to be able to post. However you can opt for a
'post-only' subscription.

Mailing list archives (of variable quality) are held at:

 http://groups.google.com/groups?group=perl.dbi.users
 http://www.xray.mpe.mpg.de/mailing-lists/dbi/
 http://www.mail-archive.com/dbi-users%40perl.org/

=head2 Assorted Related Links

The DBI "Home Page":

 http://dbi.perl.org/

Other DBI related links:

 http://www.perlmonks.org/?node=DBI%20recipes
 http://www.perlmonks.org/?node=Speeding%20up%20the%20DBI

Other database related links:

 http://www.connectionstrings.com/

Security, especially the "SQL Injection" attack:

 http://bobby-tables.com/
 http://online.securityfocus.com/infocus/1644


=head2 FAQ

See L<http://dbi.perl.org/support/>

=head1 AUTHORS

DBI by Tim Bunce (1994-2024), The DBI developer group (2024..)

This pod text by Tim Bunce, J. Douglas Dunlop, Jonathan Leffler and others.
Perl by Larry Wall and the C<perl5-porters>.

=head1 COPYRIGHT

The DBI module is Copyright (c) 1994-2024 Tim Bunce. Ireland.
The DBI developer group (2024-2024) All rights reserved.

You may distribute under the terms of either the GNU General Public
License or the Artistic License, as specified in the Perl 5.10.0 README file.

=head1 SUPPORT / WARRANTY

The DBI is free Open Source software. IT COMES WITHOUT WARRANTY OF ANY KIND.

=head2 Support

My consulting company, Data Plan Services, offers annual and
multi-annual support contracts for the DBI. These provide sustained
support for DBI development, and sustained value for you in return.
Contact me for details.

=head2 Sponsor Enhancements

If your company would benefit from a specific new DBI feature,
please consider sponsoring its development.  Work is performed
rapidly, and usually on a fixed-price payment-on-delivery basis.
Contact me for details.

Using such targeted financing allows you to contribute to DBI
development, and rapidly get something specific and valuable in return.

=head1 ACKNOWLEDGEMENTS

I would like to acknowledge the valuable contributions of the many
people I have worked with on the DBI project, especially in the early
years (1992-1994). In no particular order: Kevin Stock, Buzz Moschetti,
Kurt Andersen, Ted Lemon, William Hails, Garth Kennedy, Michael Peppler,
Neil S. Briscoe, Jeff Urlwin, David J. Hughes, Jeff Stander,
Forrest D Whitcher, Larry Wall, Jeff Fried, Roy Johnson, Paul Hudson,
Georg Rehfeld, Steve Sizemore, Ron Pool, Jon Meek, Tom Christiansen,
Steve Baumgarten, Randal Schwartz, and a whole lot more.

Then, of course, there are the poor souls who have struggled through
untold and undocumented obstacles to actually implement DBI drivers.
Among their ranks are Jochen Wiedmann, Alligator Descartes, Jonathan
Leffler, Jeff Urlwin, Michael Peppler, Henrik Tougaard, Edwin Pratomo,
Davide Migliavacca, Jan Pazdziora, Peter Haworth, Edmund Mergl, Steve
Williams, Thomas Lowery, and Phlip Plumlee. Without them, the DBI would
not be the practical reality it is today.  I'm also especially grateful
to Alligator Descartes for starting work on the first edition of the
"Programming the Perl DBI" book and letting me jump on board.

The DBI and DBD::Oracle were originally developed while I was Technical
Director (CTO) of the Paul Ingram Group in the UK.  So I'd especially like
to thank Paul for his generosity and vision in supporting this work for many years.

A couple of specific DBI features have been sponsored by enlightened companies:

The development of the swap_inner_handle() method was sponsored by BizRate.com (L<http://BizRate.com>)

The development of DBD::Gofer and related modules was sponsored by Shopzilla.com (L<https::connexity.com>).

=head1 CONTRIBUTING

As you can see above, many people have contributed to the DBI and
drivers in many ways over many years.

If you'd like to help then see L<http://dbi.perl.org/contributing>.

If you'd like the DBI to do something new or different then a good way
to make that happen is to do it yourself and send me a patch to the
source code that shows the changes. (But read "Speak before you patch"
below.)

=head2 Browsing the source code repository

Use https://github.com/perl5-dbi/dbi

=head2 How to create a patch using Git

The DBI source code is maintained using Git.  To access the source
you'll need to install a Git client. Then, to get the source code, do:

  git clone https://github.com/perl5-dbi/dbi.git DBI-git

The source code will now be available in the new subdirectory C<DBI-git>.

When you want to synchronize later, issue the command

  git pull --all

Make your changes, test them, test them again until everything passes.
If there are no tests for the new feature you added or a behaviour change,
the change should include a new test. Then commit the changes. Either use

  git gui

or

  git commit -a -m 'Message to my changes'

If you get any conflicts reported you'll need to fix them first.

Then generate the patch file to be mailed:

  git format-patch -1 --attach

which will create a file 0001-*.patch (where * relates to the commit message).
Read the patch file, as a sanity check, and then email it to dbi-dev@perl.org.

If you have a L<github|https://github.com> account, you can also fork the
repository, commit your changes to the forked repository and then do a
pull request.

=head2 How to create a patch without Git

Unpack a fresh copy of the distribution:

  wget http://cpan.metacpan.org/authors/id/T/TI/TIMB/DBI-1.627.tar.gz
  tar xfz DBI-1.627.tar.gz

Rename the newly created top level directory:

  mv DBI-1.627 DBI-1.627.your_foo

Edit the contents of DBI-1.627.your_foo/* till it does what you want.

Test your changes and then remove all temporary files:

  make test && make distclean

Go back to the directory you originally unpacked the distribution:

  cd ..

Unpack I<another> copy of the original distribution you started with:

  tar xfz DBI-1.627.tar.gz

Then create a patch file by performing a recursive C<diff> on the two
top level directories:

  diff -purd DBI-1.627 DBI-1.627.your_foo > DBI-1.627.your_foo.patch

=head2 Speak before you patch

For anything non-trivial or possibly controversial it's a good idea
to discuss (on dbi-dev@perl.org) the changes you propose before
actually spending time working on them. Otherwise you run the risk
of them being rejected because they don't fit into some larger plans
you may not be aware of.

You can also reach the developers on IRC (chat). If they are on-line,
the most likely place to talk to them is the #dbi channel on irc.perl.org

=head1 TRANSLATIONS

A German translation of this manual (possibly slightly out of date) is
available, thanks to O'Reilly, at:

  http://www.oreilly.de/catalog/perldbiger/

=head1 OTHER RELATED WORK AND PERL MODULES

=over 4

=item L<Apache::DBI>

To be used with the Apache daemon together with an embedded Perl
interpreter like C<mod_perl>. Establishes a database connection which
remains open for the lifetime of the HTTP daemon. This way the CGI
connect and disconnect for every database access becomes superfluous.

=item SQL Parser

See also the L<SQL::Statement> module, SQL parser and engine.

=back

=head1 TODO

=head2 Documentation

These entries are still to be written:

=over 2


=item DBIf_TRACE_CON

=item DBIf_TRACE_DBD

=item DBIf_TRACE_ENC

=item DBIf_TRACE_SQL

=item DBIf_TRACE_TXN

=item DBIpp_cm_XX

=item DBIpp_cm_br

=item DBIpp_cm_cs

=item DBIpp_cm_dd

=item DBIpp_cm_dw

=item DBIpp_cm_hs

=item DBIpp_ph_XX

=item DBIpp_ph_cn

=item DBIpp_ph_cs

=item DBIpp_ph_qm

=item DBIpp_ph_sp

=item DBIpp_st_XX

=item DBIpp_st_bs

=item DBIpp_st_qq

=item SQL_ALL_TYPES

=item SQL_ARRAY

=item SQL_ARRAY_LOCATOR

=item SQL_BIGINT

=item SQL_BINARY

=item SQL_BIT

=item SQL_BLOB

=item SQL_BLOB_LOCATOR

=item SQL_BOOLEAN

=item SQL_CHAR

=item SQL_CLOB

=item SQL_CLOB_LOCATOR

=item SQL_CURSOR_DYNAMIC

=item SQL_CURSOR_FORWARD_ONLY

=item SQL_CURSOR_KEYSET_DRIVEN

=item SQL_CURSOR_STATIC

=item SQL_CURSOR_TYPE_DEFAULT

=item SQL_DATE

=item SQL_DATETIME

=item SQL_DECIMAL

=item SQL_DOUBLE

=item SQL_FLOAT

=item SQL_GUID

=item SQL_INTEGER

=item SQL_INTERVAL

=item SQL_INTERVAL_DAY

=item SQL_INTERVAL_DAY_TO_HOUR

=item SQL_INTERVAL_DAY_TO_MINUTE

=item SQL_INTERVAL_DAY_TO_SECOND

=item SQL_INTERVAL_HOUR

=item SQL_INTERVAL_HOUR_TO_MINUTE

=item SQL_INTERVAL_HOUR_TO_SECOND

=item SQL_INTERVAL_MINUTE

=item SQL_INTERVAL_MINUTE_TO_SECOND

=item SQL_INTERVAL_MONTH

=item SQL_INTERVAL_SECOND

=item SQL_INTERVAL_YEAR

=item SQL_INTERVAL_YEAR_TO_MONTH

=item SQL_LONGVARBINARY

=item SQL_LONGVARCHAR

=item SQL_MULTISET

=item SQL_MULTISET_LOCATOR

=item SQL_NUMERIC

=item SQL_REAL

=item SQL_REF

=item SQL_ROW

=item SQL_SMALLINT

=item SQL_TIME

=item SQL_TIMESTAMP

=item SQL_TINYINT

=item SQL_TYPE_DATE

=item SQL_TYPE_TIME

=item SQL_TYPE_TIMESTAMP

=item SQL_TYPE_TIMESTAMP_WITH_TIMEZONE

=item SQL_TYPE_TIME_WITH_TIMEZONE

=item SQL_UDT

=item SQL_UDT_LOCATOR

=item SQL_UNKNOWN_TYPE

=item SQL_VARBINARY

=item SQL_VARCHAR

=item SQL_WCHAR

=item SQL_WLONGVARCHAR

=item SQL_WVARCHAR

=item connect_test_perf

=item constant

=item dbi_profile

=item dbi_profile_merge

=item dbi_profile_merge_nodes

=item dbi_time

=item disconnect_all

=item driver_prefix

=item dump_dbd_registry

=item dump_handle

=item init_rootclass

=item install_driver

=item installed_methods

=item setup_driver

=back

=cut

#  LocalWords:  DBI
                                                                                                                                                                                                                                                                           usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/Win32/                                        0000755 0000000 0000000 00000000000 14723046354 021252  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/Win32/DBIODBC.pm                              0000444 0000000 0000000 00000010702 14656646601 022642  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package			# hide this package from CPAN indexer
	Win32::ODBC;

use strict;
use warnings;

use DBI;

# once we've been loaded we don't want perl to load the real Win32::ODBC
$INC{'Win32/ODBC.pm'} = $INC{'Win32/DBIODBC.pm'} || 1;

#my $db = new Win32::ODBC("DSN=$self->{'DSN'};UID=$self->{'UID'};PWD=$self->{'PWD'};");

#EMU --- my $db = new Win32::ODBC("DSN=$DSN;UID=$login;PWD=$password;");
sub new
{
	shift;
	my $connect_line= shift;

# [R] self-hack to allow empty UID and PWD
	my $temp_connect_line;
	$connect_line=~/DSN=\w+/;
	$temp_connect_line="$&;";
	if ($connect_line=~/UID=\w?/)
		{$temp_connect_line.="$&;";}
	else	{$temp_connect_line.="UID=;";};
	if ($connect_line=~/PWD=\w?/)
		{$temp_connect_line.="$&;";}
	else	{$temp_connect_line.="PWD=;";};
	$connect_line=$temp_connect_line;
# -[R]-
	
	my $self= {};
		
	
	$_=$connect_line;
 	/^(DSN=)(.*)(;UID=)(.*)(;PWD=)(.*)(;)$/;

 	#---- DBI CONNECTION VARIABLES

 	$self->{ODBC_DSN}=$2;
 	$self->{ODBC_UID}=$4;
 	$self->{ODBC_PWD}=$6;
	
	
	#---- DBI CONNECTION VARIABLES	
	$self->{DBI_DBNAME}=$self->{ODBC_DSN};
	$self->{DBI_USER}=$self->{ODBC_UID};
	$self->{DBI_PASSWORD}=$self->{ODBC_PWD};
	$self->{DBI_DBD}='ODBC';
        	
	#---- DBI CONNECTION
	$self->{'DBI_DBH'}=DBI->connect($self->{'DBI_DBNAME'},
			$self->{'DBI_USER'},$self->{'DBI_PASSWORD'},$self->{'DBI_DBD'});

	warn "Error($DBI::err) : $DBI::errstr\n" if ! $self->{'DBI_DBH'}; 

        
	#---- RETURN 
	
	bless $self;
}


#EMU --- $db->Sql('SELECT * FROM DUAL');
sub Sql
{
 	my $self= shift;
 	my $SQL_statment=shift;

 #	print " SQL : $SQL_statment \n";
	
	$self->{'DBI_SQL_STATMENT'}=$SQL_statment;
	
	my $dbh=$self->{'DBI_DBH'};

 #	print " DBH : $dbh \n";
	
	my $sth=$dbh->prepare("$SQL_statment");
	
 #	print " STH : $sth \n";
	
	$self->{'DBI_STH'}=$sth;
	
	if ($sth)
	{
		$sth->execute();
	}
	
	#--- GET ERROR MESSAGES
	$self->{DBI_ERR}=$DBI::err;
	$self->{DBI_ERRSTR}=$DBI::errstr;

	if ($sth)
	{
		#--- GET COLUMNS NAMES
		$self->{'DBI_NAME'} = $sth->{NAME};
	}

# [R] provide compatibility with Win32::ODBC's way of identifying erroneous SQL statements
 	return ($self->{'DBI_ERR'})?1:undef;
# -[R]-
}
 

#EMU --- $db->FetchRow())
sub FetchRow
{ 
 	my $self= shift;
 	
 	my $sth=$self->{'DBI_STH'};
 	if ($sth)
	{
	 	my @row=$sth->fetchrow_array;
	 	$self->{'DBI_ROW'}=\@row;

	 	if (scalar(@row)>0)
	 	{
			#-- the row of result is not nul
			#-- return something nothing will be return else
			return 1;
	 	} 	
	}
	return undef;
} 

# [R] provide compatibility with Win32::ODBC's Data() method.
sub Data
{
	my $self=shift;
	my @array=@{$self->{'DBI_ROW'}};
	foreach my $element (@array)
	{
		# remove padding of spaces by DBI
		$element=~s/(\s*$)//;
	};
	return (wantarray())?@array:join('', @array);
};
# -[R]-
 
#EMU --- %record = $db->DataHash;
sub DataHash
{ 
 	my $self= shift;
 	 	
 	my $p_name=$self->{'DBI_NAME'};
 	my $p_row=$self->{'DBI_ROW'};

 	my @name=@$p_name;
 	my @row=@$p_row;

 	my %DataHash;
#print @name; print "\n"; print @row;
# [R] new code that seems to work consistent with Win32::ODBC
	while (@name)
	{
		my $name=shift(@name);
		my $value=shift(@row);

		# remove padding of spaces by DBI
		$name=~s/(\s*$)//;
		$value=~s/(\s*$)//;

		$DataHash{$name}=$value;
	};
# -[R]-

# [R] old code that didn't appear to work
#	foreach my $name (@name)
#	{
#		$name=~s/(^\s*)|(\s*$)//;
#		my @arr=@$name;
#		foreach (@arr)
#		{
#			print "lot $name  name  col $_   or ROW= 0 $row[0]  1 $row[1] 2 $row[2] \n ";
#			$DataHash{$name}=shift(@row);
#		}
#	}
# -[R]-

 	#--- Return Hash
 	return %DataHash; 	
} 


#EMU --- $db->Error()
sub Error
{ 
 	my $self= shift;
 	 	
 	if ($self->{'DBI_ERR'} ne '')
 	{
		#--- Return error message
		$self->{'DBI_ERRSTR'};
 	}

 	#-- else good no error message 	
 	
}

# [R] provide compatibility with Win32::ODBC's Close() method.
sub Close
{
	my $self=shift;

	my $dbh=$self->{'DBI_DBH'};
	$dbh->disconnect;
}
# -[R]-

1;

__END__

# [R] to -[R]- indicate sections edited by me, Roy Lee

=head1 NAME

Win32::DBIODBC - Win32::ODBC emulation layer for the DBI

=head1 SYNOPSIS

  use Win32::DBIODBC;     # instead of use Win32::ODBC

=head1 DESCRIPTION

This is a I<very> basic I<very> alpha quality Win32::ODBC emulation
for the DBI. To use it just replace

	use Win32::ODBC;

in your scripts with

	use Win32::DBIODBC;

or, while experimenting, you can pre-load this module without changing your
scripts by doing

	perl -MWin32::DBIODBC your_script_name

=head1 TO DO

Error handling is virtually non-existent.

=head1 AUTHOR

Tom Horen <tho@melexis.com>

=cut
                                                              usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/                                         0000755 0000000 0000000 00000000000 14723047501 021313  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBD/                                     0000755 0000000 0000000 00000000000 14723047501 021704  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBD/Oracle/                              0000755 0000000 0000000 00000000000 14723047501 023111  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBD/Oracle/.packlist                     0000644 0000000 0000000 00000003114 14723047501 024723  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/DBD/Oracle.pm
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/DBD/Oracle/GetInfo.pm
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/DBD/Oracle/Object.pm
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/DBD/Oracle/Troubleshooting.pod
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/DBD/Oracle/Troubleshooting/Aix.pod
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/DBD/Oracle/Troubleshooting/Cygwin.pod
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/DBD/Oracle/Troubleshooting/Hpux.pod
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/DBD/Oracle/Troubleshooting/Linux.pod
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/DBD/Oracle/Troubleshooting/Macos.pod
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/DBD/Oracle/Troubleshooting/Sun.pod
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/DBD/Oracle/Troubleshooting/Vms.pod
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/DBD/Oracle/Troubleshooting/Win32.pod
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/DBD/Oracle/Troubleshooting/Win64.pod
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBD/Oracle/Oracle.h
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBD/Oracle/Oracle.so
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBD/Oracle/dbdimp.h
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBD/Oracle/dbivport.h
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBD/Oracle/mk.pm
/usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBD/Oracle/ocitrace.h
                                                                                                                                                                                                                                                                                                                                                                                                                                                    usr/local/lib/perl5/site_perl/5.40.0/x86_64-linux-gnu/auto/DBD/Oracle/Oracle.h                      0000444 0000000 0000000 00000011256 14616324562 024500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /*
   Copyright (c) 1994-2006  Tim Bunce

   See the COPYRIGHT section in the Oracle.pm file for terms.

*/

/* ====== Include Oracle Header Files ====== */

#ifndef CAN_PROTOTYPE
#define signed	/* Oracle headers use signed */
#endif

/* The following define avoids a problem with Oracle >=7.3 where
 * ociapr.h has the line:
 *	sword  obindps(struct cda_def *cursor, ub1 opcode, text *sqlvar, ...
 * In some compilers that clashes with perls 'opcode' enum definition.
 */
#define opcode opcode_redefined

/* Hack to fix broken Oracle oratypes.h on OSF Alpha. Sigh.	*/
#if defined(__osf__) && defined(__alpha)
#ifndef A_OSF
#define A_OSF
#endif
#endif

/* egcs-1.1.2 does not have _int64 */
#if defined(__MINGW32__) || defined(__CYGWIN32__) || defined(__CYGWIN__)
#define _int64 long long
#endif


/* ori.h uses 'dirty' as an arg name in prototypes so we use this */
/* hack to prevent ori.h being read (since we don't need it)	  */
/*#define ORI_ORACLE*/
#include <oci.h>
#include <oratypes.h>
#include <ocidfn.h>
#include <orid.h>
#include <ori.h>

/* ------ end of Oracle include files ------ */


#define NEED_DBIXS_VERSION 93

#define PERL_NO_GET_CONTEXT  /*for Threaded Perl */

#include <DBIXS.h>		/* installed by the DBI module	*/

#include "dbdimp.h"

#include "dbivport.h"

#include <dbd_xsh.h>		/* installed by the DBI module	*/

/* These prototypes are for dbdimp.c funcs used in the XS file          */
/* These names are #defined to driver specific names in dbdimp.h        */

void	dbd_init _((dbistate_t *dbistate));
