      ? = not tracked
      I = ignored
        = origin of the previous file (with --copies)

    .. container:: verbose

      The -t/--terse option abbreviates the output by showing only the directory
      name if all the files in it share the same status. The option takes an
      argument indicating the statuses to abbreviate: 'm' for 'modified', 'a'
      for 'added', 'r' for 'removed', 'd' for 'deleted', 'u' for 'unknown', 'i'
      for 'ignored' and 'c' for clean.

      It abbreviates only those statuses which are passed. Note that clean and
      ignored files are not displayed with '--terse ic' unless the -c/--clean
      and -i/--ignored options are also used.

      The -v/--verbose option shows information when the repository is in an
      unfinished merge, shelve, rebase state etc. You can have this behavior
      turned on by default by enabling the ``commands.status.verbose`` option.

      You can skip displaying some of these states by setting
      ``commands.status.skipstates`` to one or more of: 'bisect', 'graft',
      'histedit', 'merge', 'rebase', or 'unshelve'.

      Template:

      The following keywords are supported in addition to the common template
      keywords and functions. See also :hg:`help templates`.

      :path:    String. Repository-absolute path of the file.
      :source:  String. Repository-absolute path of the file originated from.
                Available if ``--copies`` is specified.
      :status:  String. Character denoting file's status.

      Examples:

      - show changes in the working directory relative to a
        changeset::

          hg status --rev 9353

      - show changes in the working directory relative to the
        current directory (see :hg:`help patterns` for more information)::

          hg status re:

      - show all changes including copies in an existing changeset::

          hg status --copies --change 9353

      - get a NUL separated list of added files, suitable for xargs::

          hg status -an0

      - show more information about the repository status, abbreviating
        added, removed, modified, deleted, and untracked paths::

          hg status -v -t mardu

    Returns 0 on success.

    """

    cmdutil.check_at_most_one_arg(opts, 'rev', 'change')
    opts = pycompat.byteskwargs(opts)
    revs = opts.get(b'rev', [])
    change = opts.get(b'change', b'')
    terse = opts.get(b'terse', _NOTTERSE)
    if terse is _NOTTERSE:
        if revs:
            terse = b''
        else:
            terse = ui.config(b'commands', b'status.terse')

    if revs and terse:
        msg = _(b'cannot use --terse with --rev')
        raise error.InputError(msg)
    elif change:
        repo = scmutil.unhidehashlikerevs(repo, [change], b'nowarn')
        ctx2 = logcmdutil.revsingle(repo, change, None)
        ctx1 = ctx2.p1()
    else:
        repo = scmutil.unhidehashlikerevs(repo, revs, b'nowarn')
        ctx1, ctx2 = logcmdutil.revpair(repo, revs)

    forcerelativevalue = None
    if ui.hasconfig(b'commands', b'status.relative'):
        forcerelativevalue = ui.configbool(b'commands', b'status.relative')
    uipathfn = scmutil.getuipathfn(
        repo,
        legacyrelativevalue=bool(pats),
        forcerelativevalue=forcerelativevalue,
    )

    if opts.get(b'print0'):
        end = b'\0'
    else:
        end = b'\n'
    states = b'modified added removed deleted unknown ignored clean'.split()
    show = [k for k in states if opts.get(k)]
    if opts.get(b'all'):
        show += ui.quiet and (states[:4] + [b'clean']) or states

    if not show:
        if ui.quiet:
            show = states[:4]
        else:
            show = states[:5]

    m = scmutil.match(ctx2, pats, opts)
    if terse:
        # we need to compute clean and unknown to terse
        stat = repo.status(
            ctx1.node(),
            ctx2.node(),
            m,
            b'ignored' in show or b'i' in terse,
            clean=True,
            unknown=True,
            listsubrepos=opts.get(b'subrepos'),
        )

        stat = cmdutil.tersedir(stat, terse)
    else:
        stat = repo.status(
            ctx1.node(),
            ctx2.node(),
            m,
            b'ignored' in show,
            b'clean' in show,
            b'unknown' in show,
            opts.get(b'subrepos'),
        )

    changestates = zip(
        states,
        pycompat.iterbytestr(b'MAR!?IC'),
        [getattr(stat, s.decode('utf8')) for s in states],
    )

    copy = {}
    show_copies = ui.configbool(b'ui', b'statuscopies')
    if opts.get(b'copies') is not None:
        show_copies = opts.get(b'copies')
    show_copies = (show_copies or opts.get(b'all')) and not opts.get(
        b'no_status'
    )
    if show_copies:
        copy = copies.pathcopies(ctx1, ctx2, m)

    morestatus = None
    if (
        (ui.verbose or ui.configbool(b'commands', b'status.verbose'))
        and not ui.plain()
        and not opts.get(b'print0')
    ):
        morestatus = cmdutil.readmorestatus(repo)

    ui.pager(b'status')
    fm = ui.formatter(b'status', opts)
    fmt = b'%s' + end
    showchar = not opts.get(b'no_status')

    for state, char, files in changestates:
        if state in show:
            label = b'status.' + state
            for f in files:
                fm.startitem()
                fm.context(ctx=ctx2)
                fm.data(itemtype=b'file', path=f)
                fm.condwrite(showchar, b'status', b'%s ', char, label=label)
                fm.plain(fmt % uipathfn(f), label=label)
                if f in copy:
                    fm.data(source=copy[f])
                    fm.plain(
                        (b'  %s' + end) % uipathfn(copy[f]),
                        label=b'status.copied',
                    )
                if morestatus:
                    morestatus.formatfile(f, fm)

    if morestatus:
        morestatus.formatfooter(fm)
    fm.end()


@command(
    b'summary|sum',
    [(b'', b'remote', None, _(b'check for push and pull'))],
    b'[--remote]',
    helpcategory=command.CATEGORY_WORKING_DIRECTORY,
    helpbasic=True,
    intents={INTENT_READONLY},
)
def summary(ui, repo, **opts):
    """summarize working directory state

    This generates a brief summary of the working directory state,
    including parents, branch, commit status, phase and available updates.

    With the --remote option, this will check the default paths for
    incoming and outgoing changes. This can be time-consuming.

    Returns 0 on success.
    """

    opts = pycompat.byteskwargs(opts)
    ui.pager(b'summary')
    ctx = repo[None]
    parents = ctx.parents()
    pnode = parents[0].node()
    marks = []

    try:
        ms = mergestatemod.mergestate.read(repo)
    except error.UnsupportedMergeRecords as e:
        s = b' '.join(e.recordtypes)
        ui.warn(
            _(b'warning: merge state has unsupported record types: %s\n') % s
        )
        unresolved = []
    else:
        unresolved = list(ms.unresolved())

    for p in parents:
        # label with log.changeset (instead of log.parent) since this
        # shows a working directory parent *changeset*:
        # i18n: column positioning for "hg summary"
        ui.write(
            _(b'parent: %d:%s ') % (p.rev(), p),
            label=logcmdutil.changesetlabels(p),
        )
        ui.write(b' '.join(p.tags()), label=b'log.tag')
        if p.bookmarks():
            marks.extend(p.bookmarks())
        if p.rev() == -1:
            if not len(repo):
                ui.write(_(b' (empty repository)'))
            else:
                ui.write(_(b' (no revision checked out)'))
        if p.obsolete():
            ui.write(_(b' (obsolete)'))
        if p.isunstable():
            instabilities = (
                ui.label(instability, b'trouble.%s' % instability)
                for instability in p.instabilities()
            )
            ui.write(b' (' + b', '.join(instabilities) + b')')
        ui.write(b'\n')
        if p.description():
            ui.status(
                b' ' + p.description().splitlines()[0].strip() + b'\n',
                label=b'log.summary',
            )

    branch = ctx.branch()
    bheads = repo.branchheads(branch)
    # i18n: column positioning for "hg summary"
    m = _(b'branch: %s\n') % branch
    if branch != b'default':
        ui.write(m, label=b'log.branch')
    else:
        ui.status(m, label=b'log.branch')

    if marks:
        active = repo._activebookmark
        # i18n: column positioning for "hg summary"
        ui.write(_(b'bookmarks:'), label=b'log.bookmark')
        if active is not None:
            if active in marks:
                ui.write(b' *' + active, label=bookmarks.activebookmarklabel)
                marks.remove(active)
            else:
                ui.write(b' [%s]' % active, label=bookmarks.activebookmarklabel)
        for m in marks:
            ui.write(b' ' + m, label=b'log.bookmark')
        ui.write(b'\n', label=b'log.bookmark')

    status = repo.status(unknown=True)

    c = repo.dirstate.copies()
    copied, renamed = [], []
    for d, s in c.items():
        if s in status.removed:
            status.removed.remove(s)
            renamed.append(d)
        else:
            copied.append(d)
        if d in status.added:
            status.added.remove(d)

    subs = [s for s in ctx.substate if ctx.sub(s).dirty()]

    labels = [
        (ui.label(_(b'%d modified'), b'status.modified'), status.modified),
        (ui.label(_(b'%d added'), b'status.added'), status.added),
        (ui.label(_(b'%d removed'), b'status.removed'), status.removed),
        (ui.label(_(b'%d renamed'), b'status.copied'), renamed),
        (ui.label(_(b'%d copied'), b'status.copied'), copied),
        (ui.label(_(b'%d deleted'), b'status.deleted'), status.deleted),
        (ui.label(_(b'%d unknown'), b'status.unknown'), status.unknown),
        (ui.label(_(b'%d unresolved'), b'resolve.unresolved'), unresolved),
        (ui.label(_(b'%d subrepos'), b'status.modified'), subs),
    ]
    t = []
    for l, s in labels:
        if s:
            t.append(l % len(s))

    t = b', '.join(t)
    cleanworkdir = False

    if repo.vfs.exists(b'graftstate'):
        t += _(b' (graft in progress)')
    if repo.vfs.exists(b'updatestate'):
        t += _(b' (interrupted update)')
    elif len(parents) > 1:
        t += _(b' (merge)')
    elif branch != parents[0].branch():
        t += _(b' (new branch)')
    elif parents[0].closesbranch() and pnode in repo.branchheads(
        branch, closed=True
    ):
        t += _(b' (head closed)')
    elif not (
        status.modified
        or status.added
        or status.removed
        or renamed
        or copied
        or subs
    ):
        t += _(b' (clean)')
        cleanworkdir = True
    elif pnode not in bheads:
        t += _(b' (new branch head)')

    if parents:
        pendingphase = max(p.phase() for p in parents)
    else:
        pendingphase = phases.public

    if pendingphase > phases.newcommitphase(ui):
        t += b' (%s)' % phases.phasenames[pendingphase]

    if cleanworkdir:
        # i18n: column positioning for "hg summary"
        ui.status(_(b'commit: %s\n') % t.strip())
    else:
        # i18n: column positioning for "hg summary"
        ui.write(_(b'commit: %s\n') % t.strip())

    # all ancestors of branch heads - all ancestors of parent = new csets
    new = len(
        repo.changelog.findmissing([pctx.node() for pctx in parents], bheads)
    )

    if new == 0:
        # i18n: column positioning for "hg summary"
        ui.status(_(b'update: (current)\n'))
    elif pnode not in bheads:
        # i18n: column positioning for "hg summary"
        ui.write(_(b'update: %d new changesets (update)\n') % new)
    else:
        # i18n: column positioning for "hg summary"
        ui.write(
            _(b'update: %d new changesets, %d branch heads (merge)\n')
            % (new, len(bheads))
        )

    t = []
    draft = len(repo.revs(b'draft()'))
    if draft:
        t.append(_(b'%d draft') % draft)
    secret = len(repo.revs(b'secret()'))
    if secret:
        t.append(_(b'%d secret') % secret)

    if draft or secret:
        ui.status(_(b'phases: %s\n') % b', '.join(t))

    if obsolete.isenabled(repo, obsolete.createmarkersopt):
        for trouble in (b"orphan", b"contentdivergent", b"phasedivergent"):
            numtrouble = len(repo.revs(trouble + b"()"))
            # We write all the possibilities to ease translation
            troublemsg = {
                b"orphan": _(b"orphan: %d changesets"),
                b"contentdivergent": _(b"content-divergent: %d changesets"),
                b"phasedivergent": _(b"phase-divergent: %d changesets"),
            }
            if numtrouble > 0:
                ui.status(troublemsg[trouble] % numtrouble + b"\n")

    cmdutil.summaryhooks(ui, repo)

    if opts.get(b'remote'):
        needsincoming, needsoutgoing = True, True
    else:
        needsincoming, needsoutgoing = False, False
        for i, o in cmdutil.summaryremotehooks(ui, repo, opts, None):
            if i:
                needsincoming = True
            if o:
                needsoutgoing = True
        if not needsincoming and not needsoutgoing:
            return

    def getincoming():
        # XXX We should actually skip this if no default is specified, instead
        # of passing "default" which will resolve as "./default/" if no default
        # path is defined.
        source, branches = urlutil.get_unique_pull_path(
            b'summary', repo, ui, b'default'
        )
        sbranch = branches[0]
        try:
            other = hg.peer(repo, {}, source)
        except error.RepoError:
            if opts.get(b'remote'):
                raise
            return source, sbranch, None, None, None
        revs, checkout = hg.addbranchrevs(repo, other, branches, None)
        if revs:
            revs = [other.lookup(rev) for rev in revs]
        ui.debug(b'comparing with %s\n' % urlutil.hidepassword(source))
        with repo.ui.silent():
            commoninc = discovery.findcommonincoming(repo, other, heads=revs)
        return source, sbranch, other, commoninc, commoninc[1]

    if needsincoming:
        source, sbranch, sother, commoninc, incoming = getincoming()
    else:
        source = sbranch = sother = commoninc = incoming = None

    def getoutgoing():
        # XXX We should actually skip this if no default is specified, instead
        # of passing "default" which will resolve as "./default/" if no default
        # path is defined.
        d = None
        if b'default-push' in ui.paths:
            d = b'default-push'
        elif b'default' in ui.paths:
            d = b'default'
        if d is not None:
            path = urlutil.get_unique_push_path(b'summary', repo, ui, d)
            dest = path.pushloc or path.loc
            dbranch = path.branch
        else:
            dest = b'default'
            dbranch = None
        revs, checkout = hg.addbranchrevs(repo, repo, (dbranch, []), None)
        if source != dest:
            try:
                dother = hg.peer(repo, {}, dest)
            except error.RepoError:
                if opts.get(b'remote'):
                    raise
                return dest, dbranch, None, None
            ui.debug(b'comparing with %s\n' % urlutil.hidepassword(dest))
        elif sother is None:
            # there is no explicit destination peer, but source one is invalid
            return dest, dbranch, None, None
        else:
            dother = sother
        if source != dest or (sbranch is not None and sbranch != dbranch):
            common = None
        else:
            common = commoninc
        if revs:
            revs = [repo.lookup(rev) for rev in revs]
        with repo.ui.silent():
            outgoing = discovery.findcommonoutgoing(
                repo, dother, onlyheads=revs, commoninc=common
            )
        return dest, dbranch, dother, outgoing

    if needsoutgoing:
        dest, dbranch, dother, outgoing = getoutgoing()
    else:
        dest = dbranch = dother = outgoing = None

    if opts.get(b'remote'):
        # Help pytype.  --remote sets both `needsincoming` and `needsoutgoing`.
        # The former always sets `sother` (or raises an exception if it can't);
        # the latter always sets `outgoing`.
        assert sother is not None
        assert outgoing is not None

        t = []
        if incoming:
            t.append(_(b'1 or more incoming'))
        o = outgoing.missing
        if o:
            t.append(_(b'%d outgoing') % len(o))
        other = dother or sother
        if b'bookmarks' in other.listkeys(b'namespaces'):
            counts = bookmarks.summary(repo, other)
            if counts[0] > 0:
                t.append(_(b'%d incoming bookmarks') % counts[0])
            if counts[1] > 0:
                t.append(_(b'%d outgoing bookmarks') % counts[1])

        if t:
            # i18n: column positioning for "hg summary"
            ui.write(_(b'remote: %s\n') % (b', '.join(t)))
        else:
            # i18n: column positioning for "hg summary"
            ui.status(_(b'remote: (synced)\n'))

    cmdutil.summaryremotehooks(
        ui,
        repo,
        opts,
        (
            (source, sbranch, sother, commoninc),
            (dest, dbranch, dother, outgoing),
        ),
    )


@command(
    b'tag',
    [
        (b'f', b'force', None, _(b'force tag')),
        (b'l', b'local', None, _(b'make the tag local')),
        (b'r', b'rev', b'', _(b'revision to tag'), _(b'REV')),
        (b'', b'remove', None, _(b'remove a tag')),
        # -l/--local is already there, commitopts cannot be used
        (b'e', b'edit', None, _(b'invoke editor on commit messages')),
        (b'm', b'message', b'', _(b'use text as commit message'), _(b'TEXT')),
    ]
    + commitopts2,
    _(b'[-f] [-l] [-m TEXT] [-d DATE] [-u USER] [-r REV] NAME...'),
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
)
def tag(ui, repo, name1, *names, **opts):
    """add one or more tags for the current or given revision

    Name a particular revision using <name>.

    Tags are used to name particular revisions of the repository and are
    very useful to compare different revisions, to go back to significant
    earlier versions or to mark branch points as releases, etc. Changing
    an existing tag is normally disallowed; use -f/--force to override.

    If no revision is given, the parent of the working directory is
    used.

    To facilitate version control, distribution, and merging of tags,
    they are stored as a file named ".hgtags" which is managed similarly
    to other project files and can be hand-edited if necessary. This
    also means that tagging creates a new commit. The file
    ".hg/localtags" is used for local tags (not shared among
    repositories).

    Tag commits are usually made at the head of a branch. If the parent
    of the working directory is not a branch head, :hg:`tag` aborts; use
    -f/--force to force the tag commit to be based on a non-head
    changeset.

    See :hg:`help dates` for a list of formats valid for -d/--date.

    Since tag names have priority over branch names during revision
    lookup, using an existing branch name as a tag name is discouraged.

    Returns 0 on success.
    """
    cmdutil.check_incompatible_arguments(opts, 'remove', ['rev'])
    opts = pycompat.byteskwargs(opts)
    with repo.wlock(), repo.lock():
        rev_ = b"."
        names = [t.strip() for t in (name1,) + names]
        if len(names) != len(set(names)):
            raise error.InputError(_(b'tag names must be unique'))
        for n in names:
            scmutil.checknewlabel(repo, n, b'tag')
            if not n:
                raise error.InputError(
                    _(b'tag names cannot consist entirely of whitespace')
                )
        if opts.get(b'rev'):
            rev_ = opts[b'rev']
        message = opts.get(b'message')
        if opts.get(b'remove'):
            if opts.get(b'local'):
                expectedtype = b'local'
            else:
                expectedtype = b'global'

            for n in names:
                if repo.tagtype(n) == b'global':
                    alltags = tagsmod.findglobaltags(ui, repo)
                    if alltags[n][0] == repo.nullid:
                        raise error.InputError(
                            _(b"tag '%s' is already removed") % n
                        )
                if not repo.tagtype(n):
                    raise error.InputError(_(b"tag '%s' does not exist") % n)
                if repo.tagtype(n) != expectedtype:
                    if expectedtype == b'global':
                        raise error.InputError(
                            _(b"tag '%s' is not a global tag") % n
                        )
                    else:
                        raise error.InputError(
                            _(b"tag '%s' is not a local tag") % n
                        )
            rev_ = b'null'
            if not message:
                # we don't translate commit messages
                message = b'Removed tag %s' % b', '.join(names)
        elif not opts.get(b'force'):
            for n in names:
                if n in repo.tags():
                    raise error.InputError(
                        _(b"tag '%s' already exists (use -f to force)") % n
                    )
        if not opts.get(b'local'):
            p1, p2 = repo.dirstate.parents()
            if p2 != repo.nullid:
                raise error.StateError(_(b'uncommitted merge'))
            bheads = repo.branchheads()
            if not opts.get(b'force') and bheads and p1 not in bheads:
                raise error.InputError(
                    _(
                        b'working directory is not at a branch head '
                        b'(use -f to force)'
                    )
                )
        node = logcmdutil.revsingle(repo, rev_).node()

        if node is None:
            raise error.InputError(_(b"cannot tag working directory"))

        if not message:
            # we don't translate commit messages
            message = b'Added tag %s for changeset %s' % (
                b', '.join(names),
                short(node),
            )

        date = opts.get(b'date')
        if date:
            date = dateutil.parsedate(date)

        if opts.get(b'remove'):
            editform = b'tag.remove'
        else:
            editform = b'tag.add'
        editor = cmdutil.getcommiteditor(
            editform=editform, **pycompat.strkwargs(opts)
        )

        # don't allow tagging the null rev
        if (
            not opts.get(b'remove')
            and logcmdutil.revsingle(repo, rev_).rev() == nullrev
        ):
            raise error.InputError(_(b"cannot tag null revision"))

        tagsmod.tag(
            repo,
            names,
            node,
            message,
            opts.get(b'local'),
            opts.get(b'user'),
            date,
            editor=editor,
        )


@command(
    b'tags',
    formatteropts,
    b'',
    helpcategory=command.CATEGORY_CHANGE_ORGANIZATION,
    intents={INTENT_READONLY},
)
def tags(ui, repo, **opts):
    """list repository tags

    This lists both regular and local tags. When the -v/--verbose
    switch is used, a third column "local" is printed for local tags.
    When the -q/--quiet switch is used, only the tag name is printed.

    .. container:: verbose

      Template:

      The following keywords are supported in addition to the common template
      keywords and functions such as ``{tag}``. See also
      :hg:`help templates`.

      :type:    String. ``local`` for local tags.

    Returns 0 on success.
    """

    opts = pycompat.byteskwargs(opts)
    ui.pager(b'tags')
    fm = ui.formatter(b'tags', opts)
    hexfunc = fm.hexfunc

    for t, n in reversed(repo.tagslist()):
        hn = hexfunc(n)
        label = b'tags.normal'
        tagtype = repo.tagtype(t)
        if not tagtype or tagtype == b'global':
            tagtype = b''
        else:
            label = b'tags.' + tagtype

        fm.startitem()
        fm.context(repo=repo)
        fm.write(b'tag', b'%s', t, label=label)
        fmt = b" " * (30 - encoding.colwidth(t)) + b' %5d:%s'
        fm.condwrite(
            not ui.quiet,
            b'rev node',
            fmt,
            repo.changelog.rev(n),
            hn,
            label=label,
        )
        fm.condwrite(
            ui.verbose and tagtype, b'type', b' %s', tagtype, label=label
        )
        fm.plain(b'\n')
    fm.end()


@command(
    b'tip',
    [
        (b'p', b'patch', None, _(b'show patch')),
        (b'g', b'git', None, _(b'use git extended diff format')),
    ]
    + templateopts,
    _(b'[-p] [-g]'),
    helpcategory=command.CATEGORY_CHANGE_NAVIGATION,
)
def tip(ui, repo, **opts):
    """show the tip revision (DEPRECATED)

    The tip revision (usually just called the tip) is the changeset
    most recently added to the repository (and therefore the most
    recently changed head).

    If you have just made a commit, that commit will be the tip. If
    you have just pulled changes from another repository, the tip of
    that repository becomes the current tip. The "tip" tag is special
    and cannot be renamed or assigned to a different changeset.

    This command is deprecated, please use :hg:`heads` instead.

    Returns 0 on success.
    """
    opts = pycompat.byteskwargs(opts)
    displayer = logcmdutil.changesetdisplayer(ui, repo, opts)
    displayer.show(repo[b'tip'])
    displayer.close()


@command(
    b'unbundle',
    [
        (
            b'u',
            b'update',
            None,
            _(b'update to new branch head if changesets were unbundled'),
        )
    ],
    _(b'[-u] FILE...'),
    helpcategory=command.CATEGORY_IMPORT_EXPORT,
)
def unbundle(ui, repo, fname1, *fnames, **opts):
    """apply one or more bundle files

    Apply one or more bundle files generated by :hg:`bundle`.

    Returns 0 on success, 1 if an update has unresolved files.
    """
    fnames = (fname1,) + fnames

    with repo.lock():
        for fname in fnames:
            f = hg.openpath(ui, fname)
            gen = exchange.readbundle(ui, f, fname)
            if isinstance(gen, streamclone.streamcloneapplier):
                raise error.InputError(
                    _(
                        b'packed bundles cannot be applied with '
                        b'"hg unbundle"'
                    ),
                    hint=_(b'use "hg debugapplystreamclonebundle"'),
                )
            url = b'bundle:' + fname
            try:
                txnname = b'unbundle'
                if not isinstance(gen, bundle2.unbundle20):
                    txnname = b'unbundle\n%s' % urlutil.hidepassword(url)
                with repo.transaction(txnname) as tr:
                    op = bundle2.applybundle(
                        repo, gen, tr, source=b'unbundle', url=url
                    )
            except error.BundleUnknownFeatureError as exc:
                raise error.Abort(
                    _(b'%s: unknown bundle feature, %s') % (fname, exc),
                    hint=_(
                        b"see https://mercurial-scm.org/"
                        b"wiki/BundleFeature for more "
                        b"information"
                    ),
                )
            modheads = bundle2.combinechangegroupresults(op)

    if postincoming(ui, repo, modheads, opts.get('update'), None, None):
        return 1
    else:
        return 0


@command(
    b'unshelve',
    [
        (b'a', b'abort', None, _(b'abort an incomplete unshelve operation')),
        (
            b'c',
            b'continue',
            None,
            _(b'continue an incomplete unshelve operation'),
        ),
        (b'i', b'interactive', None, _(b'use interactive mode (EXPERIMENTAL)')),
        (b'k', b'keep', None, _(b'keep shelve after unshelving')),
        (
            b'n',
            b'name',
            b'',
            _(b'restore shelved change with given name'),
            _(b'NAME'),
        ),
        (b't', b'tool', b'', _(b'specify merge tool')),
        (
            b'',
            b'date',
            b'',
            _(b'set date for temporary commits (DEPRECATED)'),
            _(b'DATE'),
        ),
    ],
    _(b'hg unshelve [OPTION]... [[-n] SHELVED]'),
    helpcategory=command.CATEGORY_WORKING_DIRECTORY,
)
def unshelve(ui, repo, *shelved, **opts):
    """restore a shelved change to the working directory

    This command accepts an optional name of a shelved change to
    restore. If none is given, the most recent shelved change is used.

    If a shelved change is applied successfully, the bundle that
    contains the shelved changes is moved to a backup location
    (.hg/shelve-backup).

    Since you can restore a shelved change on top of an arbitrary
    commit, it is possible that unshelving will result in a conflict
    between your changes and the commits you are unshelving onto. If
    this occurs, you must resolve the conflict, then use
    ``--continue`` to complete the unshelve operation. (The bundle
    will not be moved until you successfully complete the unshelve.)

    (Alternatively, you can use ``--abort`` to abandon an unshelve
    that causes a conflict. This reverts the unshelved changes, and
    leaves the bundle in place.)

    If bare shelved change (without interactive, include and exclude
    option) was done on newly created branch it would restore branch
    information to the working directory.

    After a successful unshelve, the shelved changes are stored in a
    backup directory. Only the N most recent backups are kept. N
    defaults to 10 but can be overridden using the ``shelve.maxbackups``
    configuration option.

    .. container:: verbose

       Timestamp in seconds is used to decide order of backups. More
       than ``maxbackups`` backups are kept, if same timestamp
       prevents from deciding exact order of them, for safety.

       Selected changes can be unshelved with ``--interactive`` flag.
       The working directory is updated with the selected changes, and
       only the unselected changes remain shelved.
       Note: The whole shelve is applied to working directory first before
       running interactively. So, this will bring up all the conflicts between
       working directory and the shelve, irrespective of which changes will be
       unshelved.
    """
    with repo.wlock():
        return shelvemod.unshelvecmd(ui, repo, *shelved, **opts)


statemod.addunfinished(
    b'unshelve',
    fname=b'shelvedstate',
    continueflag=True,
    abortfunc=shelvemod.hgabortunshelve,
    continuefunc=shelvemod.hgcontinueunshelve,
    cmdmsg=_(b'unshelve already in progress'),
)


@command(
    b'update|up|checkout|co',
    [
        (b'C', b'clean', None, _(b'discard uncommitted changes (no backup)')),
        (b'c', b'check', None, _(b'require clean working directory')),
        (b'm', b'merge', None, _(b'merge uncommitted changes')),
        (b'd', b'date', b'', _(b'tipmost revision matching date'), _(b'DATE')),
        (b'r', b'rev', b'', _(b'revision'), _(b'REV')),
    ]
    + mergetoolopts,
    _(b'[-C|-c|-m] [-d DATE] [[-r] REV]'),
    helpcategory=command.CATEGORY_WORKING_DIRECTORY,
    helpbasic=True,
)
def update(ui, repo, node=None, **opts):
    """update working directory (or switch revisions)

    Update the repository's working directory to the specified
    changeset. If no changeset is specified, update to the tip of the
    current named branch and move the active bookmark (see :hg:`help
    bookmarks`).

    Update sets the working directory's parent revision to the specified
    changeset (see :hg:`help parents`).

    If the changeset is not a descendant or ancestor of the working
    directory's parent and there are uncommitted changes, the update is
    aborted. With the -c/--check option, the working directory is checked
    for uncommitted changes; if none are found, the working directory is
    updated to the specified changeset.

    .. container:: verbose

      The -C/--clean, -c/--check, and -m/--merge options control what
      happens if the working directory contains uncommitted changes.
      At most of one of them can be specified.

      1. If no option is specified, and if
         the requested changeset is an ancestor or descendant of
         the working directory's parent, the uncommitted changes
         are merged into the requested changeset and the merged
         result is left uncommitted. If the requested changeset is
         not an ancestor or descendant (that is, it is on another
         branch), the update is aborted and the uncommitted changes
         are preserved.

      2. With the -m/--merge option, the update is allowed even if the
         requested changeset is not an ancestor or descendant of
         the working directory's parent.

      3. With the -c/--check option, the update is aborted and the
         uncommitted changes are preserved.

      4. With the -C/--clean option, uncommitted changes are discarded and
         the working directory is updated to the requested changeset.

    To cancel an uncommitted merge (and lose your changes), use
    :hg:`merge --abort`.

    Use null as the changeset to remove the working directory (like
    :hg:`clone -U`).

    If you want to revert just one file to an older revision, use
    :hg:`revert [-r REV] NAME`.

    See :hg:`help dates` for a list of formats valid for -d/--date.

    Returns 0 on success, 1 if there are unresolved files.
    """
    cmdutil.check_at_most_one_arg(opts, 'clean', 'check', 'merge')
    rev = opts.get('rev')
    date = opts.get('date')
    clean = opts.get('clean')
    check = opts.get('check')
    merge = opts.get('merge')
    if rev and node:
        raise error.InputError(_(b"please specify just one revision"))

    if ui.configbool(b'commands', b'update.requiredest'):
        if not node and not rev and not date:
            raise error.InputError(
                _(b'you must specify a destination'),
                hint=_(b'for example: hg update ".::"'),
            )

    if rev is None or rev == b'':
        rev = node
