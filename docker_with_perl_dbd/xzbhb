This variable encodes the prototype of tmpnam_r.
It is zero if d_tmpnam_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_tmpnam_r
is defined.

=item C<to>

From F<Cross.U>:

This variable contains the command used by Configure
to copy to from the target host.  Useful and available
only during Perl build.
The string C<:> if not cross-compiling.

=item C<touch>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the touch program.  After Configure runs,
the value is reset to a plain C<touch> and is not useful.

=item C<tr>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the tr program.  After Configure runs,
the value is reset to a plain C<tr> and is not useful.

=item C<trnl>

From F<trnl.U>:

This variable contains the value to be passed to the tr(1)
command to transliterate a newline.  Typical values are
C<\012> and C<\n>.  This is needed for C<EBCDIC> systems where
newline is not necessarily C<\012>.

=item C<troff>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<ttyname_r_proto>

From F<d_ttyname_r.U>:

This variable encodes the prototype of ttyname_r.
It is zero if d_ttyname_r is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if d_ttyname_r
is defined.

=back

=head2 u

=over 4

=item C<u16size>

From F<perlxv.U>:

This variable is the size of an U16 in bytes.

=item C<u16type>

From F<perlxv.U>:

This variable contains the C type used for Perl's U16.

=item C<u32size>

From F<perlxv.U>:

This variable is the size of an U32 in bytes.

=item C<u32type>

From F<perlxv.U>:

This variable contains the C type used for Perl's U32.

=item C<u64size>

From F<perlxv.U>:

This variable is the size of an U64 in bytes.

=item C<u64type>

From F<perlxv.U>:

This variable contains the C type used for Perl's U64.

=item C<u8size>

From F<perlxv.U>:

This variable is the size of an U8 in bytes.

=item C<u8type>

From F<perlxv.U>:

This variable contains the C type used for Perl's U8.

=item C<uidformat>

From F<uidf.U>:

This variable contains the format string used for printing a Uid_t.

=item C<uidsign>

From F<uidsign.U>:

This variable contains the signedness of a uidtype.
1 for unsigned, -1 for signed.

=item C<uidsize>

From F<uidsize.U>:

This variable contains the size of a uidtype in bytes.

=item C<uidtype>

From F<uidtype.U>:

This variable defines Uid_t to be something like uid_t, int,
ushort, or whatever type is used to declare user ids in the kernel.

=item C<uname>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the uname program.  After Configure runs,
the value is reset to a plain C<uname> and is not useful.

=item C<uniq>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the uniq program.  After Configure runs,
the value is reset to a plain C<uniq> and is not useful.

=item C<uquadtype>

From F<quadtype.U>:

This variable defines Uquad_t to be something like unsigned long,
unsigned int, unsigned long long, uint64_t, or whatever type is
used for 64-bit integers.

=item C<use64bitall>

From F<use64bits.U>:

This variable conditionally defines the USE_64_BIT_ALL symbol,
and indicates that 64-bit integer types should be used
when available.  The maximal possible
64-bitness is employed: LP64 or ILP64, meaning that you will
be able to use more than 2 gigabytes of memory.  This mode is
even more binary incompatible than USE_64_BIT_INT. You may not
be able to run the resulting executable in a 32-bit C<CPU> at all or
you may need at least to reboot your C<OS> to 64-bit mode.

=item C<use64bitint>

From F<use64bits.U>:

This variable conditionally defines the USE_64_BIT_INT symbol,
and indicates that 64-bit integer types should be used
when available.  The minimal possible 64-bitness
is employed, just enough to get 64-bit integers into Perl.
This may mean using for example "long longs", while your memory
may still be limited to 2 gigabytes.

=item C<usecbacktrace>

From F<usebacktrace.U>:

This variable indicates whether we are compiling with backtrace
support.

=item C<usecrosscompile>

From F<Cross.U>:

This variable conditionally defines the C<USE_CROSS_COMPILE> symbol,
and indicates that Perl has been cross-compiled.

=item C<usedefaultstrict>

From F<usedefaultstrict.U>:

This setting provides a mechanism for perl developers to enable
strict by default. These defaults do not apply when perl is run
via -e or -E.

=item C<usedevel>

From F<Devel.U>:

This variable indicates that Perl was configured with development
features enabled.  This should not be done for production builds.

=item C<usedl>

From F<dlsrc.U>:

This variable indicates if the system supports dynamic
loading of some sort.  See also dlsrc and dlobj.

=item C<usedtrace>

From F<usedtrace.U>:

This variable indicates whether we are compiling with dtrace
support. See also dtrace.

=item C<usefaststdio>

From F<usefaststdio.U>:

This variable conditionally defines the C<USE_FAST_STDIO> symbol,
and indicates that Perl should be built to use C<fast stdio>.
Defaults to define in Perls 5.8 and earlier, to undef later.

=item C<useithreads>

From F<usethreads.U>:

This variable conditionally defines the C<USE_ITHREADS> symbol,
and indicates that Perl should be built to use the interpreter-based
threading implementation.

=item C<usekernprocpathname>

From F<usekernprocpathname.U>:

This variable, indicates that we can use sysctl with
C<KERN_PROC_PATHNAME> to get a full path for the executable, and hence
convert $^X to an absolute path.

=item C<uselanginfo>

From F<Extensions.U>:

This variable holds either C<true> or C<false> to indicate
whether the I18N::Langinfo extension should be used.  The sole
use for this currently is to allow an easy mechanism for users to skip
this extension from the Configure command line.

=item C<uselargefiles>

From F<uselfs.U>:

This variable conditionally defines the C<USE_LARGE_FILES> symbol,
and indicates that large file interfaces should be used when
available.

=item C<uselongdouble>

From F<uselongdbl.U>:

This variable conditionally defines the C<USE_LONG_DOUBLE> symbol,
and indicates that long doubles should be used when available.

=item C<usemallocwrap>

From F<mallocsrc.U>:

This variable contains y if we are wrapping malloc to prevent
integer overflow during size calculations.

=item C<usemorebits>

From F<usemorebits.U>:

This variable conditionally defines the C<USE_MORE_BITS> symbol,
and indicates that explicit 64-bit interfaces and long doubles
should be used when available.

=item C<usemultiplicity>

From F<usemultiplicity.U>:

This variable conditionally defines the C<MULTIPLICITY> symbol,
and indicates that Perl should be built to use multiplicity.

=item C<usemymalloc>

From F<mallocsrc.U>:

This variable contains y if the malloc that comes with this package
is desired over the system's version of malloc.  People often include
special versions of malloc for efficiency, but such versions are often
less portable.  See also mallocsrc and mallocobj.
If this is C<y>, then -lmalloc is removed from $libs.

=item C<usenm>

From F<usenm.U>:

This variable contains C<true> or C<false> depending whether the
nm extraction is wanted or not.

=item C<usensgetexecutablepath>

From F<usensgetexecutablepath.U>:

This symbol, if defined, indicates that we can use _NSGetExecutablePath
and realpath to get a full path for the executable, and hence convert
$^X to an absolute path.

=item C<useopcode>

From F<Extensions.U>:

This variable holds either C<true> or C<false> to indicate
whether the Opcode extension should be used.  The sole
use for this currently is to allow an easy mechanism
for users to skip the Opcode extension from the Configure
command line.

=item C<useperlio>

From F<useperlio.U>:

This variable conditionally defines the C<USE_PERLIO> symbol,
and indicates that the PerlIO abstraction should be
used throughout.

=item C<useposix>

From F<Extensions.U>:

This variable holds either C<true> or C<false> to indicate
whether the C<POSIX> extension should be used.  The sole
use for this currently is to allow an easy mechanism
for hints files to indicate that C<POSIX> will not compile
on a particular system.

=item C<usequadmath>

From F<usequadmath.U>:

This variable conditionally defines the C<USE_QUADMATH> symbol,
and indicates that the quadmath library __float128 long doubles
should be used when available.

=item C<usereentrant>

From F<usethreads.U>:

This variable conditionally defines the C<USE_REENTRANT_API> symbol,
which indicates that the thread code may try to use the various
_r versions of library functions.  This is only potentially
meaningful if usethreads is set and is very experimental, it is
not even prompted for.

=item C<userelocatableinc>

From F<bin.U>:

This variable is set to true to indicate that perl should relocate
@C<INC> entries at runtime based on the path to the perl binary.
Any @C<INC> paths starting F<.../> are relocated relative to the directory
containing the perl binary, and a logical cleanup of the path is then
made around the join point (removing F<dir/../> pairs)

=item C<useshrplib>

From F<libperl.U>:

This variable is set to C<true> if the user wishes
to build a shared libperl, and C<false> otherwise.

=item C<usesitecustomize>

From F<d_sitecustomize.U>:

This variable is set to true when the user requires a mechanism that
allows the sysadmin to add entries to @C<INC> at runtime.  This variable
being set, makes perl run F<$sitelib/sitecustomize.pl> at startup.

=item C<usesocks>

From F<usesocks.U>:

This variable conditionally defines the C<USE_SOCKS> symbol,
and indicates that Perl should be built to use C<SOCKS>.

=item C<usethreads>

From F<usethreads.U>:

This variable conditionally defines the C<USE_THREADS> symbol,
and indicates that Perl should be built to use threads.

=item C<usevendorprefix>

From F<vendorprefix.U>:

This variable tells whether the vendorprefix
and consequently other vendor* paths are in use.

=item C<useversionedarchname>

From F<archname.U>:

This variable indicates whether to include the $api_versionstring
as a component of the $archname.

=item C<usevfork>

From F<d_vfork.U>:

This variable is set to true when the user accepts to use vfork.
It is set to false when no vfork is available or when the user
explicitly requests not to use vfork.

=item C<usrinc>

From F<usrinc.U>:

This variable holds the path of the include files, which is
usually F</usr/include>. It is mainly used by other Configure units.

=item C<uuname>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<uvoformat>

From F<perlxvf.U>:

This variable contains the format string used for printing
a Perl C<UV> as an unsigned octal integer.

=item C<uvsize>

From F<perlxv.U>:

This variable is the size of a C<UV> in bytes.

=item C<uvtype>

From F<perlxv.U>:

This variable contains the C type used for Perl's C<UV>.

=item C<uvuformat>

From F<perlxvf.U>:

This variable contains the format string used for printing
a Perl C<UV> as an unsigned decimal integer.

=item C<uvxformat>

From F<perlxvf.U>:

This variable contains the format string used for printing
a Perl C<UV> as an unsigned hexadecimal integer in lowercase abcdef.

=item C<uvXUformat>

From F<perlxvf.U>:

This variable contains the format string used for printing
a Perl C<UV> as an unsigned hexadecimal integer in uppercase C<ABCDEF>.

=back

=head2 v

=over 4

=item C<vendorarch>

From F<vendorarch.U>:

This variable contains the value of the C<PERL_VENDORARCH> symbol.
It may have a F<~> on the front.
The standard distribution will put nothing in this directory.
Vendors who distribute perl may wish to place their own
architecture-dependent modules and extensions in this directory with
MakeMaker F<Makefile.PL> C<INSTALLDIRS>=vendor
or equivalent.  See C<INSTALL> for details.

=item C<vendorarchexp>

From F<vendorarch.U>:

This variable is the F<~name> expanded version of vendorarch, so that you
may use it directly in Makefiles or shell scripts.

=item C<vendorbin>

From F<vendorbin.U>:

This variable contains the eventual value of the C<VENDORBIN> symbol.
It may have a F<~> on the front.
The standard distribution will put nothing in this directory.
Vendors who distribute perl may wish to place additional
binaries in this directory with
MakeMaker F<Makefile.PL> C<INSTALLDIRS>=vendor
or equivalent.  See C<INSTALL> for details.

=item C<vendorbinexp>

From F<vendorbin.U>:

This variable is the F<~name> expanded version of vendorbin, so that you
may use it directly in Makefiles or shell scripts.

=item C<vendorhtml1dir>

From F<vendorhtml1dir.U>:

This variable contains the name of the directory for html
pages.  It may have a F<~> on the front.
The standard distribution will put nothing in this directory.
Vendors who distribute perl may wish to place their own
html pages in this directory with
MakeMaker F<Makefile.PL> C<INSTALLDIRS>=vendor
or equivalent.  See C<INSTALL> for details.

=item C<vendorhtml1direxp>

From F<vendorhtml1dir.U>:

This variable is the F<~name> expanded version of vendorhtml1dir, so that you
may use it directly in Makefiles or shell scripts.

=item C<vendorhtml3dir>

From F<vendorhtml3dir.U>:

This variable contains the name of the directory for html
library pages.  It may have a F<~> on the front.
The standard distribution will put nothing in this directory.
Vendors who distribute perl may wish to place their own
html pages for modules and extensions in this directory with
MakeMaker F<Makefile.PL> C<INSTALLDIRS>=vendor
or equivalent.  See C<INSTALL> for details.

=item C<vendorhtml3direxp>

From F<vendorhtml3dir.U>:

This variable is the F<~name> expanded version of vendorhtml3dir, so that you
may use it directly in Makefiles or shell scripts.

=item C<vendorlib>

From F<vendorlib.U>:

This variable contains the eventual value of the C<VENDORLIB> symbol,
which is the name of the private library for this package.
The standard distribution will put nothing in this directory.
Vendors who distribute perl may wish to place their own
modules in this directory with
MakeMaker F<Makefile.PL> C<INSTALLDIRS>=vendor
or equivalent.  See C<INSTALL> for details.

=item C<vendorlib_stem>

From F<vendorlib.U>:

This variable is $vendorlibexp with any trailing version-specific component
removed.  The elements in inc_version_list (F<inc_version_list.U>) can
be tacked onto this variable to generate a list of directories to search.

=item C<vendorlibexp>

From F<vendorlib.U>:

This variable is the F<~name> expanded version of vendorlib, so that you
may use it directly in Makefiles or shell scripts.

=item C<vendorman1dir>

From F<vendorman1dir.U>:

This variable contains the name of the directory for man1
pages.  It may have a F<~> on the front.
The standard distribution will put nothing in this directory.
Vendors who distribute perl may wish to place their own
man1 pages in this directory with
MakeMaker F<Makefile.PL> C<INSTALLDIRS>=vendor
or equivalent.  See C<INSTALL> for details.

=item C<vendorman1direxp>

From F<vendorman1dir.U>:

This variable is the F<~name> expanded version of vendorman1dir, so that you
may use it directly in Makefiles or shell scripts.

=item C<vendorman3dir>

From F<vendorman3dir.U>:

This variable contains the name of the directory for man3
pages.  It may have a F<~> on the front.
The standard distribution will put nothing in this directory.
Vendors who distribute perl may wish to place their own
man3 pages in this directory with
MakeMaker F<Makefile.PL> C<INSTALLDIRS>=vendor
or equivalent.  See C<INSTALL> for details.

=item C<vendorman3direxp>

From F<vendorman3dir.U>:

This variable is the F<~name> expanded version of vendorman3dir, so that you
may use it directly in Makefiles or shell scripts.

=item C<vendorprefix>

From F<vendorprefix.U>:

This variable holds the full absolute path of the directory below
which the vendor will install add-on packages.
See C<INSTALL> for usage and examples.

=item C<vendorprefixexp>

From F<vendorprefix.U>:

This variable holds the full absolute path of the directory below
which the vendor will install add-on packages.  Derived from vendorprefix.

=item C<vendorscript>

From F<vendorscript.U>:

This variable contains the eventual value of the C<VENDORSCRIPT> symbol.
It may have a F<~> on the front.
The standard distribution will put nothing in this directory.
Vendors who distribute perl may wish to place additional
executable scripts in this directory with
MakeMaker F<Makefile.PL> C<INSTALLDIRS>=vendor
or equivalent.  See C<INSTALL> for details.

=item C<vendorscriptexp>

From F<vendorscript.U>:

This variable is the F<~name> expanded version of vendorscript, so that you
may use it directly in Makefiles or shell scripts.

=item C<version>

From F<patchlevel.U>:

The full version number of this package, such as 5.6.1 (or 5_6_1).
This combines revision, patchlevel, and subversion to get the
full version number, including any possible subversions.
This is suitable for use as a directory name, and hence is
filesystem dependent.

=item C<version_patchlevel_string>

From F<patchlevel.U>:

This is a string combining version, subversion and
perl_patchlevel (if perl_patchlevel is non-zero).
It is typically something like
'version 7 subversion 1'  or
'version 7 subversion 1 patchlevel 11224'
It is computed here to avoid duplication of code in F<myconfig.SH>
and F<lib/Config.pm>.

=item C<versiononly>

From F<versiononly.U>:

If set, this symbol indicates that only the version-specific
components of a perl installation should be installed.
This may be useful for making a test installation of a new
version without disturbing the existing installation.
Setting versiononly is equivalent to setting installperl's -v option.
In particular, the non-versioned scripts and programs such as
a2p, c2ph, h2xs, pod2*, and perldoc are not installed
(see C<INSTALL> for a more complete list).  Nor are the man
pages installed.
Usually, this is undef.

=item C<vi>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=back

=head2 x

=over 4

=item C<xlibpth>

From F<libpth.U>:

This variable holds extra path (space-separated) used to find
libraries on this platform, for example C<CPU>-specific libraries
(on multi-C<CPU> platforms) may be listed here.

=item C<xlocale_needed>

From F<d_newlocale.U>:

This symbol, if defined, indicates that the C program should
include <xlocale.h> to get newlocale() and its friends.

=back

=head2 y

=over 4

=item C<yacc>

From F<yacc.U>:

This variable holds the name of the compiler compiler we
want to use in the Makefile. It can be yacc, byacc, or bison -y.

=item C<yaccflags>

From F<yacc.U>:

This variable contains any additional yacc flags desired by the
user.  It is up to the Makefile to use this.

=back

=head2 z

=over 4

=item C<zcat>

From F<Loc.U>:

This variable is defined but not used by Configure.
The value is the empty string and is not useful.

=item C<zip>

From F<Loc.U>:

This variable is used internally by Configure to determine the
full pathname (if any) of the zip program.  After Configure runs,
the value is reset to a plain C<zip> and is not useful.


=back

=head1 GIT DATA

Information on the git commit from which the current perl binary was compiled
can be found in the variable C<$Config::Git_Data>.  The variable is a
structured string that looks something like this:

  git_commit_id='ea0c2dbd5f5ac6845ecc7ec6696415bf8e27bd52'
  git_describe='GitLive-blead-1076-gea0c2db'
  git_branch='smartmatch'
  git_uncommitted_changes=''
  git_commit_id_title='Commit id:'
  git_commit_date='2009-05-09 17:47:31 +0200'

Its format is not guaranteed not to change over time.

=head1 NOTE

This module contains a good example of how to use tie to implement a
cache and an example of how to make a tied variable readonly to those
outside of it.

=cut

                                                                                                                                                                                                                                                                                                                                                             usr/lib/x86_64-linux-gnu/perl/5.36.0/Config_git.pl                                                  0000644 0000000 0000000 00000000631 14530460112 017601  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        ######################################################################
# WARNING: 'lib/Config_git.pl' is generated by make_patchnum.pl
#          DO NOT EDIT DIRECTLY - edit make_patchnum.pl instead
######################################################################
$Config::Git_Data=<<'ENDOFGIT';
git_commit_id=''
git_describe=''
git_branch=''
git_uncommitted_changes=''
git_commit_id_title=''

ENDOFGIT
                                                                                                       usr/lib/x86_64-linux-gnu/perl/5.36.0/Config_heavy.pl                                                0000644 0000000 0000000 00000154725 14530460112 020150  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # This file was created by configpm when Perl was built. Any changes
# made to this file will be lost the next time perl is built.

package Config;
use strict;
use warnings;
our %Config;

sub bincompat_options {
    return split ' ', (Internals::V())[0];
}

sub non_bincompat_options {
    return split ' ', (Internals::V())[1];
}

sub compile_date {
    return (Internals::V())[2]
}

sub local_patches {
    my (undef, undef, undef, @patches) = Internals::V();
    return @patches;
}

sub _V {
    die "Perl lib was built for 'linux' but is being run on '$^O'"
        unless "linux" eq $^O;

    my ($bincompat, $non_bincompat, $date, @patches) = Internals::V();

    my @opts = sort split ' ', "$bincompat $non_bincompat";

    print Config::myconfig();
    print "\nCharacteristics of this binary (from libperl): \n";

    print "  Compile-time options:\n";
    print "    $_\n" for @opts;

    if (@patches) {
        print "  Locally applied patches:\n";
        print "    $_\n" foreach @patches;
    }

    print "  Built under linux\n";

    print "  $date\n" if defined $date;

    my @env = map { "$_=\"$ENV{$_}\"" } sort grep {/^PERL/} keys %ENV;

    if (@env) {
        print "  \%ENV:\n";
        print "    $_\n" foreach @env;
    }
    print "  \@INC:\n";
    print "    $_\n" foreach @INC;
}

sub header_files {
    return qw(EXTERN.h INTERN.h XSUB.h av.h config.h cop.h cv.h
              dosish.h embed.h embedvar.h form.h gv.h handy.h hv.h hv_func.h
              intrpvar.h iperlsys.h keywords.h mg.h nostdio.h op.h opcode.h
              pad.h parser.h patchlevel.h perl.h perlio.h perliol.h perlsdio.h
              perlvars.h perly.h pp.h pp_proto.h proto.h regcomp.h regexp.h
              regnodes.h scope.h sv.h thread.h time64.h unixish.h utf8.h
              util.h);
}

##
## This file was produced by running the Configure script. It holds all the
## definitions figured out by Configure. Should you modify one of these values,
## do not forget to propagate your changes by running "Configure -der". You may
## instead choose to run each of the .SH files by yourself, or "Configure -S".
##
#
## Package name      : perl5
## Source directory  : /dummy/build/dir
## Configuration time: Sat Nov 25 20:59:54 UTC 2023
## Configured by     : Debian
## Target system     : linux localhost 4.19.0 #1 smp debian 4.19.0 x86_64 gnulinux 
#
#: Configure command line arguments.
#
#: Variables propagated from previous config.sh file.

our $summary = <<'!END!';
Summary of my $package (revision $revision $version_patchlevel_string) configuration:
  $git_commit_id_title $git_commit_id$git_ancestor_line
  Platform:
    osname=$osname
    osvers=$osvers
    archname=$archname
    uname='$myuname'
    config_args='$config_args'
    hint=$hint
    useposix=$useposix
    d_sigaction=$d_sigaction
    useithreads=$useithreads
    usemultiplicity=$usemultiplicity
    use64bitint=$use64bitint
    use64bitall=$use64bitall
    uselongdouble=$uselongdouble
    usemymalloc=$usemymalloc
    default_inc_excludes_dot=$default_inc_excludes_dot
  Compiler:
    cc='$cc'
    ccflags ='$ccflags'
    optimize='$optimize'
    cppflags='$cppflags'
    ccversion='$ccversion'
    gccversion='$gccversion'
    gccosandvers='$gccosandvers'
    intsize=$intsize
    longsize=$longsize
    ptrsize=$ptrsize
    doublesize=$doublesize
    byteorder=$byteorder
    doublekind=$doublekind
    d_longlong=$d_longlong
    longlongsize=$longlongsize
    d_longdbl=$d_longdbl
    longdblsize=$longdblsize
    longdblkind=$longdblkind
    ivtype='$ivtype'
    ivsize=$ivsize
    nvtype='$nvtype'
    nvsize=$nvsize
    Off_t='$lseektype'
    lseeksize=$lseeksize
    alignbytes=$alignbytes
    prototype=$prototype
  Linker and Libraries:
    ld='$ld'
    ldflags ='$ldflags'
    libpth=$libpth
    libs=$libs
    perllibs=$perllibs
    libc=$libc
    so=$so
    useshrplib=$useshrplib
    libperl=$libperl
    gnulibc_version='$gnulibc_version'
  Dynamic Linking:
    dlsrc=$dlsrc
    dlext=$dlext
    d_dlsymun=$d_dlsymun
    ccdlflags='$ccdlflags'
    cccdlflags='$cccdlflags'
    lddlflags='$lddlflags'

!END!
my $summary_expanded;

sub myconfig {
    return $summary_expanded if $summary_expanded;
    ($summary_expanded = $summary) =~ s{\$(\w+)}
		 { 
			my $c;
			if ($1 eq 'git_ancestor_line') {
				if ($Config::Config{git_ancestor}) {
					$c= "\n  Ancestor: $Config::Config{git_ancestor}";
				} else {
					$c= "";
				}
			} else {
                     		$c = $Config::Config{$1}; 
			}
			defined($c) ? $c : 'undef' 
		}ge;
    $summary_expanded;
}

local *_ = \my $a;
$_ = <<'!END!';
Author=''
CONFIG='true'
Date=''
Header=''
Id=''
Locker=''
Log=''
PATCHLEVEL='36'
PERL_API_REVISION='5'
PERL_API_SUBVERSION='0'
PERL_API_VERSION='36'
PERL_CONFIG_SH='true'
PERL_PATCHLEVEL=''
PERL_REVISION='5'
PERL_SUBVERSION='0'
PERL_VERSION='36'
RCSfile=''
Revision=''
SUBVERSION='0'
