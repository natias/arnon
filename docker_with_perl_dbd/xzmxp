    unlock_ref_keys($hash);
    return $hash;
}

sub   lock_hash_recurse (\%) {   lock_hashref_recurse(@_) }
sub unlock_hash_recurse (\%) { unlock_hashref_recurse(@_) }

=item B<hashref_locked>

=item B<hash_locked>

  hashref_locked(\%hash) and print "Hash is locked!\n";
  hash_locked(%hash) and print "Hash is locked!\n";

Returns true if the hash and its keys are locked.

=cut

sub hashref_locked {
    my $hash=shift;
    Internals::SvREADONLY(%$hash);
}

sub hash_locked(\%) { hashref_locked(@_) }

=item B<hashref_unlocked>

=item B<hash_unlocked>

  hashref_unlocked(\%hash) and print "Hash is unlocked!\n";
  hash_unlocked(%hash) and print "Hash is unlocked!\n";

Returns true if the hash and its keys are unlocked.

=cut

sub hashref_unlocked {
    my $hash=shift;
    !Internals::SvREADONLY(%$hash);
}

sub hash_unlocked(\%) { hashref_unlocked(@_) }

=for demerphqs_editor
sub legal_ref_keys{}
sub hidden_ref_keys{}
sub all_keys{}

=cut

sub legal_keys(\%) { legal_ref_keys(@_)  }
sub hidden_keys(\%){ hidden_ref_keys(@_) }

=item B<legal_keys>

  my @keys = legal_keys(%hash);

Returns the list of the keys that are legal in a restricted hash.
In the case of an unrestricted hash this is identical to calling
keys(%hash).

=item B<hidden_keys>

  my @keys = hidden_keys(%hash);

Returns the list of the keys that are legal in a restricted hash but
do not have a value associated to them. Thus if 'foo' is a
"hidden" key of the %hash it will return false for both C<defined>
and C<exists> tests.

In the case of an unrestricted hash this will return an empty list.

B<NOTE> this is an experimental feature that is heavily dependent
on the current implementation of restricted hashes. Should the
implementation change, this routine may become meaningless, in which
case it will return an empty list.

=item B<all_keys>

  all_keys(%hash,@keys,@hidden);

Populates the arrays @keys with the all the keys that would pass
an C<exists> tests, and populates @hidden with the remaining legal
keys that have not been utilized.

Returns a reference to the hash.

In the case of an unrestricted hash this will be equivalent to

  $ref = do {
      @keys = keys %hash;
      @hidden = ();
      \%hash
  };

B<NOTE> this is an experimental feature that is heavily dependent
on the current implementation of restricted hashes. Should the
implementation change this routine may become meaningless in which
case it will behave identically to how it would behave on an
unrestricted hash.

=item B<hash_seed>

    my $hash_seed = hash_seed();

hash_seed() returns the seed bytes used to randomise hash ordering.

B<Note that the hash seed is sensitive information>: by knowing it one
can craft a denial-of-service attack against Perl code, even remotely,
see L<perlsec/"Algorithmic Complexity Attacks"> for more information.
B<Do not disclose the hash seed> to people who don't need to know it.
See also L<perlrun/PERL_HASH_SEED_DEBUG>.

Prior to Perl 5.17.6 this function returned a UV, it now returns a string,
which may be of nearly any size as determined by the hash function your
Perl has been built with. Possible sizes may be but are not limited to
4 bytes (for most hash algorithms) and 16 bytes (for siphash).

=item B<hash_value>

    my $hash_value = hash_value($string);
    my $hash_value = hash_value($string, $seed);

C<hash_value($string)>
returns
the current perl's internal hash value for a given string.
C<hash_value($string, $seed)>
returns the hash value as if computed with a different seed.
If the custom seed is too short, the function errors out.
The minimum length of the seed is implementation-dependent.

Returns a 32-bit integer
representing the hash value of the string passed in.
The 1-parameter value is only reliable
for the lifetime of the process.
It may be different
depending on invocation, environment variables, perl version,
architectures, and build options.

B<Note that the hash value of a given string is sensitive information>:
by knowing it one can deduce the hash seed which in turn can allow one to
craft a denial-of-service attack against Perl code, even remotely,
see L<perlsec/"Algorithmic Complexity Attacks"> for more information.
B<Do not disclose the hash value of a string> to people who don't need to
know it. See also L<perlrun/PERL_HASH_SEED_DEBUG>.

=item B<bucket_info>

Return a set of basic information about a hash.

    my ($keys, $buckets, $used, @length_counts)= bucket_info($hash);

Fields are as follows:

    0: Number of keys in the hash
    1: Number of buckets in the hash
    2: Number of used buckets in the hash
    rest : list of counts, Kth element is the number of buckets
           with K keys in it.

See also bucket_stats() and bucket_array().

=item B<bucket_stats>

Returns a list of statistics about a hash.

 my ($keys, $buckets, $used, $quality, $utilization_ratio,
        $collision_pct, $mean, $stddev, @length_counts)
    = bucket_stats($hashref);

Fields are as follows:

    0: Number of keys in the hash
    1: Number of buckets in the hash
    2: Number of used buckets in the hash
    3: Hash Quality Score
    4: Percent of buckets used
    5: Percent of keys which are in collision
    6: Mean bucket length of occupied buckets
    7: Standard Deviation of bucket lengths of occupied buckets
    rest : list of counts, Kth element is the number of buckets
           with K keys in it.

See also bucket_info() and bucket_array().

Note that Hash Quality Score would be 1 for an ideal hash, numbers
close to and below 1 indicate good hashing, and number significantly
above indicate a poor score. In practice it should be around 0.95 to 1.05.
It is defined as:

 $score= sum( $count[$length] * ($length * ($length + 1) / 2) )
            /
            ( ( $keys / 2 * $buckets ) *
              ( $keys + ( 2 * $buckets ) - 1 ) )

The formula is from the Red Dragon book (reformulated to use the data available)
and is documented at L<http://www.strchr.com/hash_functions>

=item B<bucket_array>

    my $array= bucket_array(\%hash);

Returns a packed representation of the bucket array associated with a hash. Each element
of the array is either an integer K, in which case it represents K empty buckets, or
a reference to another array which contains the keys that are in that bucket.

B<Note that the information returned by bucket_array is sensitive information>:
by knowing it one can directly attack perl's hash function which in turn may allow
one to craft a denial-of-service attack against Perl code, even remotely,
see L<perlsec/"Algorithmic Complexity Attacks"> for more information.
B<Do not disclose the output of this function> to people who don't need to
know it. See also L<perlrun/PERL_HASH_SEED_DEBUG>. This function is provided strictly
for  debugging and diagnostics purposes only, it is hard to imagine a reason why it
would be used in production code.

=cut


sub bucket_stats {
    my ($hash) = @_;
    my ($keys, $buckets, $used, @length_counts) = bucket_info($hash);
    my $sum;
    my $score;
    for (1 .. $#length_counts) {
        $sum += ($length_counts[$_] * $_);
        $score += $length_counts[$_] * ( $_ * ($_ + 1 ) / 2 );
    }
    $score = $score /
             (( $keys / (2 * $buckets )) * ( $keys + ( 2 * $buckets ) - 1 ))
                 if $keys;
    my ($mean, $stddev)= (0, 0);
    if ($used) {
        $mean= $sum / $used;
        $sum= 0;
        $sum += ($length_counts[$_] * (($_-$mean)**2)) for 1 .. $#length_counts;

        $stddev= sqrt($sum/$used);
    }
    return $keys, $buckets, $used, $keys ? ($score, $used/$buckets, ($keys-$used)/$keys, $mean, $stddev, @length_counts) : ();
}

=item B<bucket_stats_formatted>

  print bucket_stats_formatted($hashref);

Return a formatted report of the information returned by bucket_stats().
An example report looks like this:

 Keys: 50 Buckets: 33/64 Quality-Score: 1.01 (Good)
 Utilized Buckets: 51.56% Optimal: 78.12% Keys In Collision: 34.00%
 Chain Length - mean: 1.52 stddev: 0.66
 Buckets 64          [0000000000000000000000000000000111111111111111111122222222222333]
 Len   0 Pct:  48.44 [###############################]
 Len   1 Pct:  29.69 [###################]
 Len   2 Pct:  17.19 [###########]
 Len   3 Pct:   4.69 [###]
 Keys    50          [11111111111111111111111111111111122222222222222333]
 Pos   1 Pct:  66.00 [#################################]
 Pos   2 Pct:  28.00 [##############]
 Pos   3 Pct:   6.00 [###]

The first set of stats gives some summary statistical information,
including the quality score translated into "Good", "Poor" and "Bad",
(score<=1.05, score<=1.2, score>1.2). See the documentation in
bucket_stats() for more details.

The two sets of barcharts give stats and a visual indication of performance
of the hash.

The first gives data on bucket chain lengths and provides insight on how
much work a fetch *miss* will take. In this case we have to inspect every item
in a bucket before we can be sure the item is not in the list. The performance
for an insert is equivalent to this case, as is a delete where the item
is not in the hash.

The second gives data on how many keys are at each depth in the chain, and
gives an idea of how much work a fetch *hit* will take. The performance for
an update or delete of an item in the hash is equivalent to this case.

Note that these statistics are summary only. Actual performance will depend
on real hit/miss ratios accessing the hash. If you are concerned by hit ratios
you are recommended to "oversize" your hash by using something like:

   keys(%hash)= keys(%hash) << $k;

With $k chosen carefully, and likely to be a small number like 1 or 2. In
theory the larger the bucket array the less chance of collision.

=cut


sub _bucket_stats_formatted_bars {
    my ($total, $ary, $start_idx, $title, $row_title)= @_;

    my $return = "";
    my $max_width= $total > 64 ? 64 : $total;
    my $bar_width= $max_width / $total;

    my $str= "";
    if ( @$ary < 10) {
        for my $idx ($start_idx .. $#$ary) {
            $str .= $idx x sprintf("%.0f", ($ary->[$idx] * $bar_width));
        }
    } else {
        $str= "-" x $max_width;
    }
    $return .= sprintf "%-7s         %6d [%s]\n",$title, $total, $str;

    foreach my $idx ($start_idx .. $#$ary) {
        $return .= sprintf "%-.3s %3d %6.2f%% %6d [%s]\n",
            $row_title,
            $idx,
            $ary->[$idx] / $total * 100,
            $ary->[$idx],
            "#" x sprintf("%.0f", ($ary->[$idx] * $bar_width)),
        ;
    }
    return $return;
}

sub bucket_stats_formatted {
    my ($hashref)= @_;
    my ($keys, $buckets, $used, $score, $utilization_ratio, $collision_pct,
        $mean, $stddev, @length_counts) = bucket_stats($hashref);

    my $return= sprintf   "Keys: %d Buckets: %d/%d Quality-Score: %.2f (%s)\n"
                        . "Utilized Buckets: %.2f%% Optimal: %.2f%% Keys In Collision: %.2f%%\n"
                        . "Chain Length - mean: %.2f stddev: %.2f\n",
                $keys, $used, $buckets, $score, $score <= 1.05 ? "Good" : $score < 1.2 ? "Poor" : "Bad",
                $utilization_ratio * 100,
                $keys/$buckets * 100,
                $collision_pct * 100,
                $mean, $stddev;

    my @key_depth;
    $key_depth[$_]= $length_counts[$_] + ( $key_depth[$_+1] || 0 )
        for reverse 1 .. $#length_counts;

    if ($keys) {
        $return .= _bucket_stats_formatted_bars($buckets, \@length_counts, 0, "Buckets", "Len");
        $return .= _bucket_stats_formatted_bars($keys, \@key_depth, 1, "Keys", "Pos");
    }
    return $return
}

=item B<hv_store>

  my $sv = 0;
  hv_store(%hash,$key,$sv) or die "Failed to alias!";
  $hash{$key} = 1;
  print $sv; # prints 1

Stores an alias to a variable in a hash instead of copying the value.

=item B<hash_traversal_mask>

As of Perl 5.18 every hash has its own hash traversal order, and this order
changes every time a new element is inserted into the hash. This functionality
is provided by maintaining an unsigned integer mask (U32) which is xor'ed
with the actual bucket id during a traversal of the hash buckets using keys(),
values() or each().

You can use this subroutine to get and set the traversal mask for a specific
hash. Setting the mask ensures that a given hash will produce the same key
order. B<Note> that this does B<not> guarantee that B<two> hashes will produce
the same key order for the same hash seed and traversal mask, items that
collide into one bucket may have different orders regardless of this setting.

=item B<bucket_ratio>

This function behaves the same way that scalar(%hash) behaved prior to
Perl 5.25. Specifically if the hash is tied, then it calls the SCALAR tied
hash method, if untied then if the hash is empty it return 0, otherwise it
returns a string containing the number of used buckets in the hash,
followed by a slash, followed by the total number of buckets in the hash.

    my %hash=("foo"=>1);
    print Hash::Util::bucket_ratio(%hash); # prints "1/8"

=item B<used_buckets>

This function returns the count of used buckets in the hash. It is expensive
to calculate and the value is NOT cached, so avoid use of this function
in production code.

=item B<num_buckets>

This function returns the total number of buckets the hash holds, or would
hold if the array were created. (When a hash is freshly created the array
may not be allocated even though this value will be non-zero.)

=back

=head2 Operating on references to hashes

Most subroutines documented in this module have equivalent versions
that operate on references to hashes instead of native hashes.
The following is a list of these subs. They are identical except
in name and in that instead of taking a %hash they take a $hashref,
and additionally are not prototyped.

=over 4

=item lock_ref_keys

=item unlock_ref_keys

=item lock_ref_keys_plus

=item lock_ref_value

=item unlock_ref_value

=item lock_hashref

=item unlock_hashref

=item lock_hashref_recurse

=item unlock_hashref_recurse

=item hash_ref_unlocked

=item legal_ref_keys

=item hidden_ref_keys

=back

=head1 CAVEATS

Note that the trapping of the restricted operations is not atomic:
for example

    eval { %hash = (illegal_key => 1) }

leaves the C<%hash> empty rather than with its original contents.

=head1 BUGS

The interface exposed by this module is very close to the current
implementation of restricted hashes. Over time it is expected that
this behavior will be extended and the interface abstracted further.

=head1 AUTHOR

Michael G Schwern <schwern@pobox.com> on top of code by Nick
Ing-Simmons and Jeffrey Friedl.

hv_store() is from Array::RefElem, Copyright 2000 Gisle Aas.

Additional code by Yves Orton.

Description of C<hash_value($string, $seed)>
by Christopher Yeleighton <ne01026@shark.2a.pl>

=head1 SEE ALSO

L<Scalar::Util>, L<List::Util> and L<perlsec/"Algorithmic Complexity Attacks">.

L<Hash::Util::FieldHash>.

=cut

1;
                                                                                                                            usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/I18N/                                                   0000755 0000000 0000000 00000000000 14714567415 017047  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/I18N/Langinfo.pm                                        0000444 0000000 0000000 00000034223 14714567415 021144  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package I18N::Langinfo;

use 5.006;
use strict;
use warnings;
use Carp;

use Exporter 'import';
require XSLoader;

our @EXPORT = qw(langinfo);

our @EXPORT_OK = qw(
                    ABDAY_1
                    ABDAY_2
                    ABDAY_3
                    ABDAY_4
                    ABDAY_5
                    ABDAY_6
                    ABDAY_7
                    ABMON_1
                    ABMON_2
                    ABMON_3
                    ABMON_4
                    ABMON_5
                    ABMON_6
                    ABMON_7
                    ABMON_8
                    ABMON_9
                    ABMON_10
                    ABMON_11
                    ABMON_12
                    ALT_DIGITS
                    AM_STR
                    CODESET
                    CRNCYSTR
                    DAY_1
                    DAY_2
                    DAY_3
                    DAY_4
                    DAY_5
                    DAY_6
                    DAY_7
                    D_FMT
                    D_T_FMT
                    ERA
                    ERA_D_FMT
                    ERA_D_T_FMT
                    ERA_T_FMT
                    MON_1
                    MON_2
                    MON_3
                    MON_4
                    MON_5
                    MON_6
                    MON_7
                    MON_8
                    MON_9
                    MON_10
                    MON_11
                    MON_12
                    NOEXPR
                    NOSTR
                    PM_STR
                    RADIXCHAR
                    THOUSEP
                    T_FMT
                    T_FMT_AMPM
                    YESEXPR
                    YESSTR
                    _NL_ADDRESS_POSTAL_FMT
                    _NL_ADDRESS_COUNTRY_NAME
                    _NL_ADDRESS_COUNTRY_POST
                    _NL_ADDRESS_COUNTRY_AB2
                    _NL_ADDRESS_COUNTRY_AB3
                    _NL_ADDRESS_COUNTRY_CAR
                    _NL_ADDRESS_COUNTRY_NUM
                    _NL_ADDRESS_COUNTRY_ISBN
                    _NL_ADDRESS_LANG_NAME
                    _NL_ADDRESS_LANG_AB
                    _NL_ADDRESS_LANG_TERM
                    _NL_ADDRESS_LANG_LIB
                    _NL_IDENTIFICATION_TITLE
                    _NL_IDENTIFICATION_SOURCE
                    _NL_IDENTIFICATION_ADDRESS
                    _NL_IDENTIFICATION_CONTACT
                    _NL_IDENTIFICATION_EMAIL
                    _NL_IDENTIFICATION_TEL
                    _NL_IDENTIFICATION_FAX
                    _NL_IDENTIFICATION_LANGUAGE
                    _NL_IDENTIFICATION_TERRITORY
                    _NL_IDENTIFICATION_AUDIENCE
                    _NL_IDENTIFICATION_APPLICATION
                    _NL_IDENTIFICATION_ABBREVIATION
                    _NL_IDENTIFICATION_REVISION
                    _NL_IDENTIFICATION_DATE
                    _NL_IDENTIFICATION_CATEGORY
                    _NL_MEASUREMENT_MEASUREMENT
                    _NL_NAME_NAME_FMT
                    _NL_NAME_NAME_GEN
                    _NL_NAME_NAME_MR
                    _NL_NAME_NAME_MRS
                    _NL_NAME_NAME_MISS
                    _NL_NAME_NAME_MS
                    _NL_PAPER_HEIGHT
                    _NL_PAPER_WIDTH
                    _NL_TELEPHONE_TEL_INT_FMT
                    _NL_TELEPHONE_TEL_DOM_FMT
                    _NL_TELEPHONE_INT_SELECT
                    _NL_TELEPHONE_INT_PREFIX
                   );

our $VERSION = '0.24';

XSLoader::load();

1;
__END__

=encoding utf8

=head1 NAME

I18N::Langinfo - query locale information

=head1 SYNOPSIS

  use I18N::Langinfo;

=head1 DESCRIPTION

The langinfo() function queries various locale information that can be
used to localize output and user interfaces.  It uses the current underlying
locale, regardless of whether or not it was called from within the scope of
S<C<use locale>>.  The langinfo() function requires
one numeric argument that identifies the locale constant to query:
if no argument is supplied, C<$_> is used.  The numeric constants
appropriate to be used as arguments are exportable from I18N::Langinfo.

The following example will import the langinfo() function itself and
three constants to be used as arguments to langinfo(): a constant for
the abbreviated first day of the week (the numbering starts from
Sunday = 1) and two more constants for the affirmative and negative
answers for a yes/no question in the current locale.

    use I18N::Langinfo qw(langinfo ABDAY_1 YESSTR NOSTR);

    my ($abday_1, $yesstr, $nostr) =
        map { langinfo($_) } (ABDAY_1, YESSTR, NOSTR);

    print "$abday_1? [$yesstr/$nostr] ";

In other words, in the "C" (or English) locale the above will probably
print something like:

    Sun? [yes/no]

but under a French locale

    dim? [oui/non]

The usually available constants are as follows.

=over 4

=item *

For abbreviated and full length days of the week and months of the year:

    ABDAY_1 ABDAY_2 ABDAY_3 ABDAY_4 ABDAY_5 ABDAY_6 ABDAY_7
    ABMON_1 ABMON_2 ABMON_3 ABMON_4 ABMON_5 ABMON_6
    ABMON_7 ABMON_8 ABMON_9 ABMON_10 ABMON_11 ABMON_12
    DAY_1 DAY_2 DAY_3 DAY_4 DAY_5 DAY_6 DAY_7
    MON_1 MON_2 MON_3 MON_4 MON_5 MON_6
    MON_7 MON_8 MON_9 MON_10 MON_11 MON_12

=item *

For the date-time, date, and time formats used by the strftime() function
(see L<POSIX>):

    D_T_FMT D_FMT T_FMT

=item *

For the locales for which it makes sense to have ante meridiem and post
meridiem time formats:

    AM_STR PM_STR T_FMT_AMPM

=item *

For the character code set being used (such as "ISO8859-1", "cp850",
"koi8-r", "sjis", "utf8", etc.):

    CODESET

=item *

For the symbol or string of characters that indicates a number is a monetary
value:

    CRNCYSTR

An example is the dollar sign C<$>.  Some locales not associated with
particular locations may have an empty currency string.  (The C locale is
one.)  Otherwise, the return of this is always prefixed by one of these three
characters:

=over

=item C<->

indicates that in this locale, the string precedes the numeric value, as in a
U.S. locale: C<$9.95>.

=item C<+>

indicates that in this locale, the string follows the numeric value, like
C<9.95USD>.

=item C<.>

indicates that in this locale, the string replaces the radix character, like
C<9$95>.

=back

=item *

For the radix character used between the integer and the fractional part of
decimal numbers, and the group separator string for large-ish floating point
numbers (yes, these are redundant with
L<POSIX::localeconv()|POSIX/localeconv>):

    RADIXCHAR THOUSEP

=item *

For any alternate digits used in this locale besides the standard C<0..9>:

    ALT_DIGITS

This returns a sequence of alternate numeric reprsesentations for the numbers
C<0> ... up to C<99>.  The representations are returned in a single string,
with a semi-colon C<;> used to separated the individual ones.

Most locales don't have alternate digits, so the string will be empty.

To access this data conveniently, you could do something like

 use I18N::Langinfo qw(langinfo ALT_DIGITS);
 my @alt_digits = split ';', langinfo(ALT_DIGITS);

The array C<@alt_digits> will contain 0 elements if the current locale doesn't
have alternate digits specified for it.  Otherwise, it will have as many
elements as the locale defines, with C<[0]> containing the alternate digit for
zero; C<[1]> for one; and so forth, up to potentially C<[99]> for the
alternate representation of ninety-nine.

Be aware that the alternate representation in some locales for the numbers
0..9 will have a leading alternate-zero, so would look like the equivalent of
00..09.

Running this program

 use I18N::Langinfo qw(langinfo ALT_DIGITS);
 my @alt_digits = split ';', langinfo(ALT_DIGITS);
 splice @alt_digits, 15;
 print join " ", @alt_digits, "\n";

on a Japanese locale yields

S<C<〇 一 二 三 四 五 六 七 八 九 十 十一 十二 十三 十四>>

on some platforms.

=item *

For the affirmative and negative responses and expressions:

    YESSTR YESEXPR NOSTR NOEXPR

=item *

For the eras based on typically some ruler, such as the Japanese Emperor
(naturally only defined in the appropriate locales):

    ERA ERA_D_FMT ERA_D_T_FMT ERA_T_FMT

=back

In addition, Linux boxes have extra items, as follows.  (When called from
other platform types, these return a stub value, of not much use.)

=over

=item C<_NL_ADDRESS_POSTAL_FMT>

=item C<_NL_ADDRESS_COUNTRY_NAME>

=item C<_NL_ADDRESS_COUNTRY_POST>

=item C<_NL_ADDRESS_COUNTRY_AB2>

=item C<_NL_ADDRESS_COUNTRY_AB3>

=item C<_NL_ADDRESS_COUNTRY_CAR>

=item C<_NL_ADDRESS_COUNTRY_NUM>

=item C<_NL_ADDRESS_COUNTRY_ISBN>

=item C<_NL_ADDRESS_LANG_NAME>

=item C<_NL_ADDRESS_LANG_AB>

=item C<_NL_ADDRESS_LANG_TERM>

=item C<_NL_ADDRESS_LANG_LIB>

On Linux boxes, these return information about the country for the current
locale.  Further information is found in F<langinfo.h>

=item C<_NL_IDENTIFICATION_TITLE>

=item C<_NL_IDENTIFICATION_SOURCE>

=item C<_NL_IDENTIFICATION_ADDRESS>

=item C<_NL_IDENTIFICATION_CONTACT>

=item C<_NL_IDENTIFICATION_EMAIL>

=item C<_NL_IDENTIFICATION_TEL>

=item C<_NL_IDENTIFICATION_FAX>

=item C<_NL_IDENTIFICATION_LANGUAGE>

=item C<_NL_IDENTIFICATION_TERRITORY>

=item C<_NL_IDENTIFICATION_AUDIENCE>

=item C<_NL_IDENTIFICATION_APPLICATION>

=item C<_NL_IDENTIFICATION_ABBREVIATION>

=item C<_NL_IDENTIFICATION_REVISION>

=item C<_NL_IDENTIFICATION_DATE>

=item C<_NL_IDENTIFICATION_CATEGORY>

On Linux boxes, these return meta information about the current locale,
such as how to get in touch with its maintainers.
Further information is found in F<langinfo.h>

=item C<_NL_MEASUREMENT_MEASUREMENT>

On Linux boxes, it returns 1 if the metric system of measurement prevails in
the locale; or 2 if US customary units prevail.

=item C<_NL_NAME_NAME_FMT>

=item C<_NL_NAME_NAME_GEN>

=item C<_NL_NAME_NAME_MR>

=item C<_NL_NAME_NAME_MRS>

=item C<_NL_NAME_NAME_MISS>

=item C<_NL_NAME_NAME_MS>

On Linux boxes, these return information about how names are formatted and
the personal salutations used in the current locale.  Further information
is found in L<locale(7)> and F<langinfo.h>

=item C<_NL_PAPER_HEIGHT>

=item C<_NL_PAPER_WIDTH>

On Linux boxes, these return the standard size of sheets of paper (in
millimeters) in the current locale.

=item C<_NL_TELEPHONE_TEL_INT_FMT>

=item C<_NL_TELEPHONE_TEL_DOM_FMT>

=item C<_NL_TELEPHONE_INT_SELECT>

=item C<_NL_TELEPHONE_INT_PREFIX>

On Linux boxes, these return information about how telephone numbers are
formatted (both domestically and international calling) in the current locale.
Further information is found in F<langinfo.h>

=back

=head2 For systems without C<nl_langinfo>

This module originally was just a wrapper for the libc C<nl_langinfo>
function, and did not work on systems lacking it, such as Windows.

Starting in Perl 5.28, this module works on all platforms.  When
C<nl_langinfo> is not available, it uses various methods to construct
what that function, if present, would return.  But there are potential
glitches.  These are the items that could be different:

=over

=item C<ERA>

Unimplemented, so returns C<"">.

=item C<CODESET>

This should work properly for Windows platforms.  On almost all other modern
platforms, it will reliably return "UTF-8" if that is the code set.
Otherwise, it depends on the locale's name.  If that is of the form
C<foo.bar>, it will assume C<bar> is the code set; and it also knows about the
two locales "C" and "POSIX".  If none of those apply it returns C<"">.

=item C<YESEXPR>

=item C<YESSTR>

=item C<NOEXPR>

=item C<NOSTR>

Only the values for English are returned.  C<YESSTR> and C<NOSTR> have been
removed from POSIX 2008, and are retained here for backwards compatibility.
Your platform's C<nl_langinfo> may not support them.

=item C<ALT_DIGITS>

On systems with a C<L<strftime(3)>> that recognizes the POSIX-defined C<%O>
format modifier (not Windows), perl tries hard to return these.  The result
likely will go as high as what C<nl_langinfo()> would return, but not
necessarily; and the numbers from C<0..9> will always be stripped of leading
zeros.

Without C<%O>, an empty string is always returned.

=item C<D_FMT>

Always evaluates to C<%x>, the locale's appropriate date representation.

=item C<T_FMT>

Always evaluates to C<%X>, the locale's appropriate time representation.

=item C<D_T_FMT>

Always evaluates to C<%c>, the locale's appropriate date and time
representation.

=item C<CRNCYSTR>

The return may be incorrect for those rare locales where the currency symbol
replaces the radix character.  If you have examples of it needing to work
differently, please file a report at L<https://github.com/Perl/perl5/issues>.

=item C<ERA_D_FMT>

=item C<ERA_T_FMT>

=item C<ERA_D_T_FMT>

=item C<T_FMT_AMPM>

These are derived by using C<strftime()>, and not all versions of that function
know about them.  C<""> is returned for these on such systems.

=item All C<_NL_I<foo>> items

These return the same values as they do on boxes that don't have the
appropriate underlying locale categories.

=back

See your L<nl_langinfo(3)> for more information about the available
constants.  (Often this means having to look directly at the
F<langinfo.h> C header file.)

=head2 EXPORT

By default only the C<langinfo()> function is exported.

=head1 BUGS

Before Perl 5.28, the returned values are unreliable for the C<RADIXCHAR> and
C<THOUSEP> locale constants.

Starting in 5.28, changing locales on threaded builds is supported on systems
that offer thread-safe locale functions.  These include POSIX 2008 systems and
Windows starting with Visual Studio 2005, and this module will work properly
in such situations.  However, on threaded builds on Windows prior to Visual
Studio 2015, retrieving the items C<CRNCYSTR> and C<THOUSEP> can result in a
race with a thread that has converted to use the global locale.  It is quite
uncommon for a thread to have done this.  It would be possible to construct a
workaround for this; patches welcome: see L<perlapi/switch_to_global_locale>.

=head1 SEE ALSO

L<perllocale>, L<POSIX/localeconv>, L<POSIX/setlocale>, L<nl_langinfo(3)>.

=head1 AUTHOR

Jarkko Hietaniemi, E<lt>jhi@hut.fiE<gt>.  Now maintained by Perl 5 porters.

=head1 COPYRIGHT AND LICENSE

Copyright 2001 by Jarkko Hietaniemi

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
                                                                                                                                                                                                                                                                                                                                                                             usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/IO/                                                     0000755 0000000 0000000 00000000000 14714567415 016677  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/local/lib/perl5/5.40.0/x86_64-linux-gnu/IO/Dir.pm                                               0000444 0000000 0000000 00000012351 14714567415 017753  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # IO::Dir.pm
#
# Copyright (c) 1997-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.

package IO::Dir;

use 5.008_001;

use strict;
use Carp;
use Symbol;
use Exporter;
