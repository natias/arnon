        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_SV_2NUM                \
        assert(sv)

PERL_CALLCONV NV
Perl_sv_2nv_flags(pTHX_ SV * const sv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_2NV_FLAGS           \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_2pv_flags(pTHX_ SV * const sv, STRLEN * const lp, const U32 flags);
#define PERL_ARGS_ASSERT_SV_2PV_FLAGS           \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_2pvbyte_flags(pTHX_ SV *sv, STRLEN * const lp, const U32 flags);
#define PERL_ARGS_ASSERT_SV_2PVBYTE_FLAGS       \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_2pvutf8_flags(pTHX_ SV *sv, STRLEN * const lp, const U32 flags);
#define PERL_ARGS_ASSERT_SV_2PVUTF8_FLAGS       \
        assert(sv)

PERL_CALLCONV UV
Perl_sv_2uv_flags(pTHX_ SV * const sv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_2UV_FLAGS           \
        assert(sv)

PERL_CALLCONV void
Perl_sv_backoff(SV * const sv);
#define PERL_ARGS_ASSERT_SV_BACKOFF             \
        assert(sv)

PERL_CALLCONV SV *
Perl_sv_bless(pTHX_ SV * const sv, HV * const stash);
#define PERL_ARGS_ASSERT_SV_BLESS               \
        assert(sv); assert(stash)

PERL_CALLCONV bool
Perl_sv_cat_decode(pTHX_ SV *dsv, SV *encoding, SV *ssv, int *offset, char *tstr, int tlen);
#define PERL_ARGS_ASSERT_SV_CAT_DECODE          \
        assert(dsv); assert(encoding); assert(ssv); assert(offset); assert(tstr)

PERL_CALLCONV void
Perl_sv_catpv(pTHX_ SV * const dsv, const char *sstr);
#define PERL_ARGS_ASSERT_SV_CATPV               \
        assert(dsv)

PERL_CALLCONV void
Perl_sv_catpv_flags(pTHX_ SV *dsv, const char *sstr, const I32 flags);
#define PERL_ARGS_ASSERT_SV_CATPV_FLAGS         \
        assert(dsv); assert(sstr)

PERL_CALLCONV void
Perl_sv_catpv_mg(pTHX_ SV * const dsv, const char * const sstr);
#define PERL_ARGS_ASSERT_SV_CATPV_MG            \
        assert(dsv)

PERL_CALLCONV void
Perl_sv_catpvf(pTHX_ SV * const sv, const char * const pat, ...)
        __attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_SV_CATPVF              \
        assert(sv); assert(pat)

PERL_CALLCONV void
Perl_sv_catpvf_mg(pTHX_ SV * const sv, const char * const pat, ...)
        __attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_SV_CATPVF_MG           \
        assert(sv); assert(pat)

PERL_CALLCONV void
Perl_sv_catpvn_flags(pTHX_ SV * const dsv, const char *sstr, const STRLEN len, const I32 flags);
#define PERL_ARGS_ASSERT_SV_CATPVN_FLAGS        \
        assert(dsv); assert(sstr)

PERL_CALLCONV void
Perl_sv_catsv_flags(pTHX_ SV * const dsv, SV * const sstr, const I32 flags);
#define PERL_ARGS_ASSERT_SV_CATSV_FLAGS         \
        assert(dsv)

PERL_CALLCONV void
Perl_sv_chop(pTHX_ SV * const sv, const char * const ptr);
#define PERL_ARGS_ASSERT_SV_CHOP                \
        assert(sv)

PERL_CALLCONV SSize_t
Perl_sv_clean_all(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_SV_CLEAN_ALL

PERL_CALLCONV void
Perl_sv_clean_objs(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_SV_CLEAN_OBJS

PERL_CALLCONV void
Perl_sv_clear(pTHX_ SV * const orig_sv);
#define PERL_ARGS_ASSERT_SV_CLEAR               \
        assert(orig_sv)

PERL_CALLCONV I32
Perl_sv_cmp(pTHX_ SV * const sv1, SV * const sv2);
#define PERL_ARGS_ASSERT_SV_CMP

PERL_CALLCONV I32
Perl_sv_cmp_flags(pTHX_ SV * const sv1, SV * const sv2, const U32 flags);
#define PERL_ARGS_ASSERT_SV_CMP_FLAGS

PERL_CALLCONV I32
Perl_sv_cmp_locale(pTHX_ SV * const sv1, SV * const sv2);
#define PERL_ARGS_ASSERT_SV_CMP_LOCALE

PERL_CALLCONV I32
Perl_sv_cmp_locale_flags(pTHX_ SV * const sv1, SV * const sv2, const U32 flags);
#define PERL_ARGS_ASSERT_SV_CMP_LOCALE_FLAGS

PERL_CALLCONV void
Perl_sv_copypv_flags(pTHX_ SV * const dsv, SV * const ssv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_COPYPV_FLAGS        \
        assert(dsv); assert(ssv)

/* PERL_CALLCONV void
sv_copypv_nomg(pTHX_ SV * const dsv, SV * const ssv); */

PERL_CALLCONV void
Perl_sv_dec(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_DEC

PERL_CALLCONV void
Perl_sv_dec_nomg(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_DEC_NOMG

PERL_CALLCONV void
Perl_sv_del_backref(pTHX_ SV * const tsv, SV * const sv);
#define PERL_ARGS_ASSERT_SV_DEL_BACKREF         \
        assert(tsv); assert(sv)

PERL_CALLCONV bool
Perl_sv_derived_from(pTHX_ SV *sv, const char * const name)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM        \
        assert(sv); assert(name)

PERL_CALLCONV bool
Perl_sv_derived_from_hv(pTHX_ SV *sv, HV *hv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_HV     \
        assert(sv); assert(hv)

PERL_CALLCONV bool
Perl_sv_derived_from_pv(pTHX_ SV *sv, const char * const name, U32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_PV     \
        assert(sv); assert(name)

PERL_CALLCONV bool
Perl_sv_derived_from_pvn(pTHX_ SV *sv, const char * const name, const STRLEN len, U32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_PVN    \
        assert(sv); assert(name)

PERL_CALLCONV bool
Perl_sv_derived_from_sv(pTHX_ SV *sv, SV *namesv, U32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_SV     \
        assert(sv); assert(namesv)

PERL_CALLCONV bool
Perl_sv_destroyable(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_DESTROYABLE

PERL_CALLCONV bool
Perl_sv_does(pTHX_ SV *sv, const char * const name)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DOES                \
        assert(sv); assert(name)

PERL_CALLCONV bool
Perl_sv_does_pv(pTHX_ SV *sv, const char * const name, U32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DOES_PV             \
        assert(sv); assert(name)

PERL_CALLCONV bool
Perl_sv_does_pvn(pTHX_ SV *sv, const char * const name, const STRLEN len, U32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DOES_PVN            \
        assert(sv); assert(name)

PERL_CALLCONV bool
Perl_sv_does_sv(pTHX_ SV *sv, SV *namesv, U32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DOES_SV             \
        assert(sv); assert(namesv)

PERL_CALLCONV void
Perl_sv_dump(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_DUMP

PERL_CALLCONV void
Perl_sv_dump_depth(pTHX_ SV *sv, I32 depth);
#define PERL_ARGS_ASSERT_SV_DUMP_DEPTH

PERL_CALLCONV I32
Perl_sv_eq_flags(pTHX_ SV *sv1, SV *sv2, const U32 flags);
#define PERL_ARGS_ASSERT_SV_EQ_FLAGS

PERL_CALLCONV void
Perl_sv_force_normal_flags(pTHX_ SV * const sv, const U32 flags);
#define PERL_ARGS_ASSERT_SV_FORCE_NORMAL_FLAGS  \
        assert(sv)

PERL_CALLCONV void
Perl_sv_free(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_FREE

PERL_CALLCONV void
Perl_sv_free2(pTHX_ SV * const sv, const U32 refcnt);
#define PERL_ARGS_ASSERT_SV_FREE2               \
        assert(sv)

PERL_CALLCONV void
Perl_sv_free_arenas(pTHX)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_SV_FREE_ARENAS

PERL_CALLCONV SV *
Perl_sv_get_backrefs(SV * const sv);
#define PERL_ARGS_ASSERT_SV_GET_BACKREFS        \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_gets(pTHX_ SV * const sv, PerlIO * const fp, I32 append);
#define PERL_ARGS_ASSERT_SV_GETS                \
        assert(sv); assert(fp)

PERL_CALLCONV char *
Perl_sv_grow(pTHX_ SV * const sv, STRLEN newlen);
#define PERL_ARGS_ASSERT_SV_GROW                \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_grow_fresh(pTHX_ SV * const sv, STRLEN newlen);
#define PERL_ARGS_ASSERT_SV_GROW_FRESH          \
        assert(sv)

PERL_CALLCONV void
Perl_sv_inc(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_INC

PERL_CALLCONV void
Perl_sv_inc_nomg(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_INC_NOMG

PERL_CALLCONV void
Perl_sv_insert_flags(pTHX_ SV * const bigstr, const STRLEN offset, const STRLEN len, const char *little, const STRLEN littlelen, const U32 flags);
#define PERL_ARGS_ASSERT_SV_INSERT_FLAGS        \
        assert(bigstr); assert(little)

PERL_CALLCONV int
Perl_sv_isa(pTHX_ SV *sv, const char * const name);
#define PERL_ARGS_ASSERT_SV_ISA                 \
        assert(name)

PERL_CALLCONV bool
Perl_sv_isa_sv(pTHX_ SV *sv, SV *namesv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_ISA_SV              \
        assert(sv); assert(namesv)

PERL_CALLCONV int
Perl_sv_isobject(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_ISOBJECT

PERL_CALLCONV SV *
Perl_sv_langinfo(pTHX_ const nl_item item);
#define PERL_ARGS_ASSERT_SV_LANGINFO

PERL_CALLCONV STRLEN
Perl_sv_len(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_LEN

PERL_CALLCONV STRLEN
Perl_sv_len_utf8(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_LEN_UTF8

PERL_CALLCONV STRLEN
Perl_sv_len_utf8_nomg(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_LEN_UTF8_NOMG       \
        assert(sv)

PERL_CALLCONV void
Perl_sv_magic(pTHX_ SV * const sv, SV * const obj, const int how, const char * const name, const I32 namlen);
#define PERL_ARGS_ASSERT_SV_MAGIC               \
        assert(sv)

PERL_CALLCONV MAGIC *
Perl_sv_magicext(pTHX_ SV * const sv, SV * const obj, const int how, const MGVTBL * const vtbl, const char * const name, const I32 namlen);
#define PERL_ARGS_ASSERT_SV_MAGICEXT            \
        assert(sv)

PERL_CALLCONV MAGIC *
Perl_sv_magicext_mglob(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_MAGICEXT_MGLOB      \
        assert(sv)

PERL_CALLCONV SV *
Perl_sv_mortalcopy_flags(pTHX_ SV * const oldsv, U32 flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_MORTALCOPY_FLAGS

PERL_CALLCONV SV *
Perl_sv_newmortal(pTHX)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_NEWMORTAL

PERL_CALLCONV SV *
Perl_sv_newref(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_NEWREF

PERL_CALLCONV void
Perl_sv_nosharing(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_NOSHARING

/* PERL_CALLCONV bool
sv_numeq(pTHX_ SV *sv1, SV *sv2); */

PERL_CALLCONV bool
Perl_sv_numeq_flags(pTHX_ SV *sv1, SV *sv2, const U32 flags);
#define PERL_ARGS_ASSERT_SV_NUMEQ_FLAGS

PERL_CALLCONV char *
Perl_sv_peek(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_PEEK

PERL_CALLCONV void
Perl_sv_pos_b2u(pTHX_ SV * const sv, I32 * const offsetp);
#define PERL_ARGS_ASSERT_SV_POS_B2U             \
        assert(offsetp)

PERL_CALLCONV STRLEN
Perl_sv_pos_b2u_flags(pTHX_ SV * const sv, STRLEN const offset, U32 flags);
#define PERL_ARGS_ASSERT_SV_POS_B2U_FLAGS       \
        assert(sv)

PERL_CALLCONV void
Perl_sv_pos_u2b(pTHX_ SV * const sv, I32 * const offsetp, I32 * const lenp);
#define PERL_ARGS_ASSERT_SV_POS_U2B             \
        assert(offsetp)

PERL_CALLCONV STRLEN
Perl_sv_pos_u2b_flags(pTHX_ SV * const sv, STRLEN uoffset, STRLEN * const lenp, U32 flags);
#define PERL_ARGS_ASSERT_SV_POS_U2B_FLAGS       \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_pvbyten_force(pTHX_ SV * const sv, STRLEN * const lp);
#define PERL_ARGS_ASSERT_SV_PVBYTEN_FORCE       \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_pvn_force_flags(pTHX_ SV * const sv, STRLEN * const lp, const U32 flags);
#define PERL_ARGS_ASSERT_SV_PVN_FORCE_FLAGS     \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_pvutf8n_force(pTHX_ SV * const sv, STRLEN * const lp);
#define PERL_ARGS_ASSERT_SV_PVUTF8N_FORCE       \
        assert(sv)

PERL_CALLCONV char *
Perl_sv_recode_to_utf8(pTHX_ SV *sv, SV *encoding);
#define PERL_ARGS_ASSERT_SV_RECODE_TO_UTF8      \
        assert(sv); assert(encoding)

PERL_CALLCONV SV *
Perl_sv_ref(pTHX_ SV *dst, const SV * const sv, const int ob);
#define PERL_ARGS_ASSERT_SV_REF                 \
        assert(sv)

PERL_CALLCONV const char *
Perl_sv_reftype(pTHX_ const SV * const sv, const int ob)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_REFTYPE             \
        assert(sv)

PERL_CALLCONV void
Perl_sv_replace(pTHX_ SV * const sv, SV * const nsv);
#define PERL_ARGS_ASSERT_SV_REPLACE             \
        assert(sv); assert(nsv)

PERL_CALLCONV void
Perl_sv_report_used(pTHX);
#define PERL_ARGS_ASSERT_SV_REPORT_USED

PERL_CALLCONV void
Perl_sv_reset(pTHX_ const char *s, HV * const stash);
#define PERL_ARGS_ASSERT_SV_RESET               \
        assert(s)

PERL_CALLCONV void
Perl_sv_resetpvn(pTHX_ const char *s, STRLEN len, HV * const stash)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_SV_RESETPVN

PERL_CALLCONV SV *
Perl_sv_rvunweaken(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_RVUNWEAKEN          \
        assert(sv)

PERL_CALLCONV SV *
Perl_sv_rvweaken(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_RVWEAKEN            \
        assert(sv)

PERL_CALLCONV void
Perl_sv_set_bool(pTHX_ SV *sv, const bool bool_val);
#define PERL_ARGS_ASSERT_SV_SET_BOOL            \
        assert(sv)

PERL_CALLCONV void
Perl_sv_set_false(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_SET_FALSE           \
        assert(sv)

PERL_CALLCONV void
Perl_sv_set_true(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_SET_TRUE            \
        assert(sv)

PERL_CALLCONV void
Perl_sv_set_undef(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_SET_UNDEF           \
        assert(sv)

PERL_CALLCONV void
Perl_sv_sethek(pTHX_ SV * const sv, const HEK * const hek);
#define PERL_ARGS_ASSERT_SV_SETHEK              \
        assert(sv)

PERL_CALLCONV void
Perl_sv_setiv(pTHX_ SV * const sv, const IV num);
#define PERL_ARGS_ASSERT_SV_SETIV               \
        assert(sv)

PERL_CALLCONV void
Perl_sv_setiv_mg(pTHX_ SV * const sv, const IV i);
#define PERL_ARGS_ASSERT_SV_SETIV_MG            \
        assert(sv)

PERL_CALLCONV void
Perl_sv_setnv(pTHX_ SV * const sv, const NV num);
#define PERL_ARGS_ASSERT_SV_SETNV               \
        assert(sv)

PERL_CALLCONV void
Perl_sv_setnv_mg(pTHX_ SV * const sv, const NV num);
#define PERL_ARGS_ASSERT_SV_SETNV_MG            \
        assert(sv)

PERL_CALLCONV void
Perl_sv_setpv(pTHX_ SV * const sv, const char * const ptr);
#define PERL_ARGS_ASSERT_SV_SETPV               \
        assert(sv)

PERL_CALLCONV char  *
Perl_sv_setpv_bufsize(pTHX_ SV * const sv, const STRLEN cur, const STRLEN len);
#define PERL_ARGS_ASSERT_SV_SETPV_BUFSIZE       \
        assert(sv)

PERL_CALLCONV void
Perl_sv_setpv_mg(pTHX_ SV * const sv, const char * const ptr);
#define PERL_ARGS_ASSERT_SV_SETPV_MG            \
        assert(sv)

PERL_CALLCONV void
Perl_sv_setpvf(pTHX_ SV * const sv, const char * const pat, ...)
        __attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_SV_SETPVF              \
        assert(sv); assert(pat)

PERL_CALLCONV void
Perl_sv_setpvf_mg(pTHX_ SV * const sv, const char * const pat, ...)
        __attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_SV_SETPVF_MG           \
        assert(sv); assert(pat)

PERL_CALLCONV void
Perl_sv_setpvn(pTHX_ SV * const sv, const char * const ptr, const STRLEN len);
#define PERL_ARGS_ASSERT_SV_SETPVN              \
        assert(sv)

PERL_CALLCONV void
Perl_sv_setpvn_fresh(pTHX_ SV * const sv, const char * const ptr, const STRLEN len);
#define PERL_ARGS_ASSERT_SV_SETPVN_FRESH        \
        assert(sv)

PERL_CALLCONV void
Perl_sv_setpvn_mg(pTHX_ SV * const sv, const char * const ptr, const STRLEN len);
#define PERL_ARGS_ASSERT_SV_SETPVN_MG           \
        assert(sv); assert(ptr)

PERL_CALLCONV SV *
Perl_sv_setref_iv(pTHX_ SV * const rv, const char * const classname, const IV iv);
#define PERL_ARGS_ASSERT_SV_SETREF_IV           \
        assert(rv)

PERL_CALLCONV SV *
Perl_sv_setref_nv(pTHX_ SV * const rv, const char * const classname, const NV nv);
#define PERL_ARGS_ASSERT_SV_SETREF_NV           \
        assert(rv)

PERL_CALLCONV SV *
Perl_sv_setref_pv(pTHX_ SV * const rv, const char * const classname, void * const pv);
#define PERL_ARGS_ASSERT_SV_SETREF_PV           \
        assert(rv)

PERL_CALLCONV SV *
Perl_sv_setref_pvn(pTHX_ SV * const rv, const char * const classname, const char * const pv, const STRLEN n);
#define PERL_ARGS_ASSERT_SV_SETREF_PVN          \
        assert(rv); assert(pv)

PERL_CALLCONV SV *
Perl_sv_setref_uv(pTHX_ SV * const rv, const char * const classname, const UV uv);
#define PERL_ARGS_ASSERT_SV_SETREF_UV           \
        assert(rv)

PERL_CALLCONV void
Perl_sv_setrv_inc(pTHX_ SV * const sv, SV * const ref);
#define PERL_ARGS_ASSERT_SV_SETRV_INC           \
        assert(sv); assert(ref)

PERL_CALLCONV void
Perl_sv_setrv_inc_mg(pTHX_ SV * const sv, SV * const ref);
#define PERL_ARGS_ASSERT_SV_SETRV_INC_MG        \
        assert(sv); assert(ref)

PERL_CALLCONV void
Perl_sv_setrv_noinc(pTHX_ SV * const sv, SV * const ref);
#define PERL_ARGS_ASSERT_SV_SETRV_NOINC         \
        assert(sv); assert(ref)

PERL_CALLCONV void
Perl_sv_setrv_noinc_mg(pTHX_ SV * const sv, SV * const ref);
#define PERL_ARGS_ASSERT_SV_SETRV_NOINC_MG      \
        assert(sv); assert(ref)

PERL_CALLCONV void
Perl_sv_setsv_flags(pTHX_ SV *dsv, SV *ssv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_SETSV_FLAGS         \
        assert(dsv)

PERL_CALLCONV void
Perl_sv_setsv_mg(pTHX_ SV * const dsv, SV * const ssv);
#define PERL_ARGS_ASSERT_SV_SETSV_MG            \
        assert(dsv)

PERL_CALLCONV void
Perl_sv_setuv(pTHX_ SV * const sv, const UV num);
#define PERL_ARGS_ASSERT_SV_SETUV               \
        assert(sv)

PERL_CALLCONV void
Perl_sv_setuv_mg(pTHX_ SV * const sv, const UV u);
#define PERL_ARGS_ASSERT_SV_SETUV_MG            \
        assert(sv)

/* PERL_CALLCONV bool
sv_streq(pTHX_ SV *sv1, SV *sv2); */

PERL_CALLCONV bool
Perl_sv_streq_flags(pTHX_ SV *sv1, SV *sv2, const U32 flags);
#define PERL_ARGS_ASSERT_SV_STREQ_FLAGS

PERL_CALLCONV SV *
Perl_sv_strftime_ints(pTHX_ SV *fmt, int sec, int min, int hour, int mday, int mon, int year, int wday, int yday, int isdst);
#define PERL_ARGS_ASSERT_SV_STRFTIME_INTS       \
        assert(fmt)

PERL_CALLCONV SV *
Perl_sv_strftime_tm(pTHX_ SV *fmt, const struct tm *mytm);
#define PERL_ARGS_ASSERT_SV_STRFTIME_TM         \
        assert(fmt); assert(mytm)

PERL_CALLCONV SV *
Perl_sv_string_from_errnum(pTHX_ int errnum, SV *tgtsv);
#define PERL_ARGS_ASSERT_SV_STRING_FROM_ERRNUM

PERL_CALLCONV bool
Perl_sv_tainted(pTHX_ SV * const sv)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_TAINTED             \
        assert(sv)

PERL_CALLCONV I32
Perl_sv_true(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_TRUE

PERL_CALLCONV char *
Perl_sv_uni_display(pTHX_ SV *dsv, SV *ssv, STRLEN pvlim, UV flags)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_UNI_DISPLAY         \
        assert(dsv); assert(ssv)

PERL_CALLCONV int
Perl_sv_unmagic(pTHX_ SV * const sv, const int type);
#define PERL_ARGS_ASSERT_SV_UNMAGIC             \
        assert(sv)

PERL_CALLCONV int
Perl_sv_unmagicext(pTHX_ SV * const sv, const int type, const MGVTBL *vtbl);
#define PERL_ARGS_ASSERT_SV_UNMAGICEXT          \
        assert(sv)

PERL_CALLCONV void
Perl_sv_unref_flags(pTHX_ SV * const ref, const U32 flags);
#define PERL_ARGS_ASSERT_SV_UNREF_FLAGS         \
        assert(ref)

PERL_CALLCONV void
Perl_sv_untaint(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_UNTAINT             \
        assert(sv)

PERL_CALLCONV void
Perl_sv_upgrade(pTHX_ SV * const sv, svtype new_type);
#define PERL_ARGS_ASSERT_SV_UPGRADE             \
        assert(sv)

PERL_CALLCONV void
Perl_sv_usepvn_flags(pTHX_ SV * const sv, char *ptr, const STRLEN len, const U32 flags);
#define PERL_ARGS_ASSERT_SV_USEPVN_FLAGS        \
        assert(sv)

PERL_CALLCONV bool
Perl_sv_utf8_decode(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_UTF8_DECODE         \
        assert(sv)

PERL_CALLCONV bool
Perl_sv_utf8_downgrade_flags(pTHX_ SV * const sv, const bool fail_ok, const U32 flags);
#define PERL_ARGS_ASSERT_SV_UTF8_DOWNGRADE_FLAGS \
        assert(sv)

/* PERL_CALLCONV bool
sv_utf8_downgrade_nomg(pTHX_ SV * const sv, const bool fail_ok); */

PERL_CALLCONV void
Perl_sv_utf8_encode(pTHX_ SV * const sv);
#define PERL_ARGS_ASSERT_SV_UTF8_ENCODE         \
        assert(sv)

/* PERL_CALLCONV STRLEN
sv_utf8_upgrade_flags(pTHX_ SV * const sv, const I32 flags); */

PERL_CALLCONV STRLEN
Perl_sv_utf8_upgrade_flags_grow(pTHX_ SV * const sv, const I32 flags, STRLEN extra);
#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE_FLAGS_GROW \
        assert(sv)

/* PERL_CALLCONV STRLEN
sv_utf8_upgrade_nomg(pTHX_ SV *sv); */

PERL_CALLCONV void
Perl_sv_vcatpvf(pTHX_ SV * const sv, const char * const pat, va_list * const args);
#define PERL_ARGS_ASSERT_SV_VCATPVF             \
        assert(sv); assert(pat)

PERL_CALLCONV void
Perl_sv_vcatpvf_mg(pTHX_ SV * const sv, const char * const pat, va_list * const args);
#define PERL_ARGS_ASSERT_SV_VCATPVF_MG          \
        assert(sv); assert(pat)

PERL_CALLCONV void
Perl_sv_vcatpvfn(pTHX_ SV * const sv, const char * const pat, const STRLEN patlen, va_list * const args, SV ** const svargs, const Size_t sv_count, bool * const maybe_tainted);
#define PERL_ARGS_ASSERT_SV_VCATPVFN            \
        assert(sv); assert(pat)

PERL_CALLCONV void
Perl_sv_vcatpvfn_flags(pTHX_ SV * const sv, const char * const pat, const STRLEN patlen, va_list * const args, SV ** const svargs, const Size_t sv_count, bool * const maybe_tainted, const U32 flags);
#define PERL_ARGS_ASSERT_SV_VCATPVFN_FLAGS      \
        assert(sv); assert(pat)

PERL_CALLCONV void
Perl_sv_vsetpvf(pTHX_ SV * const sv, const char * const pat, va_list * const args);
#define PERL_ARGS_ASSERT_SV_VSETPVF             \
        assert(sv); assert(pat)

PERL_CALLCONV void
Perl_sv_vsetpvf_mg(pTHX_ SV * const sv, const char * const pat, va_list * const args);
#define PERL_ARGS_ASSERT_SV_VSETPVF_MG          \
        assert(sv); assert(pat)

PERL_CALLCONV void
Perl_sv_vsetpvfn(pTHX_ SV * const sv, const char * const pat, const STRLEN patlen, va_list * const args, SV ** const svargs, const Size_t sv_count, bool * const maybe_tainted);
#define PERL_ARGS_ASSERT_SV_VSETPVFN            \
        assert(sv); assert(pat)

PERL_CALLCONV void
Perl_switch_to_global_locale(pTHX);
#define PERL_ARGS_ASSERT_SWITCH_TO_GLOBAL_LOCALE

PERL_CALLCONV bool
Perl_sync_locale(pTHX);
#define PERL_ARGS_ASSERT_SYNC_LOCALE

PERL_CALLCONV void
Perl_sys_init(int *argc, char ***argv);
#define PERL_ARGS_ASSERT_SYS_INIT               \
        assert(argc); assert(argv)

PERL_CALLCONV void
Perl_sys_init3(int *argc, char ***argv, char ***env);
#define PERL_ARGS_ASSERT_SYS_INIT3              \
        assert(argc); assert(argv); assert(env)

PERL_CALLCONV void
Perl_sys_term(void);
#define PERL_ARGS_ASSERT_SYS_TERM

PERL_CALLCONV void
Perl_taint_env(pTHX);
#define PERL_ARGS_ASSERT_TAINT_ENV

PERL_CALLCONV void
Perl_taint_proper(pTHX_ const char *f, const char * const s);
#define PERL_ARGS_ASSERT_TAINT_PROPER           \
        assert(s)

PERL_CALLCONV OP *
Perl_tied_method(pTHX_ SV *methname, SV **mark, SV * const sv, const MAGIC * const mg, const U32 flags, U32 argc, ...)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_TIED_METHOD            \
        assert(methname); assert(mark); assert(sv); assert(mg)

PERL_CALLCONV SSize_t
Perl_tmps_grow_p(pTHX_ SSize_t ix);
#define PERL_ARGS_ASSERT_TMPS_GROW_P

/* PERL_CALLCONV UV
to_uni_fold(pTHX_ UV c, U8 *p, STRLEN *lenp); */

PERL_CALLCONV UV
Perl_to_uni_lower(pTHX_ UV c, U8 *p, STRLEN *lenp);
#define PERL_ARGS_ASSERT_TO_UNI_LOWER           \
        assert(p); assert(lenp)

PERL_CALLCONV UV
Perl_to_uni_title(pTHX_ UV c, U8 *p, STRLEN *lenp);
#define PERL_ARGS_ASSERT_TO_UNI_TITLE           \
        assert(p); assert(lenp)

PERL_CALLCONV UV
Perl_to_uni_upper(pTHX_ UV c, U8 *p, STRLEN *lenp);
#define PERL_ARGS_ASSERT_TO_UNI_UPPER           \
        assert(p); assert(lenp)

PERL_CALLCONV bool
Perl_try_amagic_bin(pTHX_ int method, int flags);
#define PERL_ARGS_ASSERT_TRY_AMAGIC_BIN

PERL_CALLCONV bool
Perl_try_amagic_un(pTHX_ int method, int flags);
#define PERL_ARGS_ASSERT_TRY_AMAGIC_UN

PERL_CALLCONV SSize_t
Perl_unpackstring(pTHX_ const char *pat, const char *patend, const char *s, const char *strend, U32 flags);
#define PERL_ARGS_ASSERT_UNPACKSTRING           \
        assert(pat); assert(patend); assert(s); assert(strend)

PERL_CALLCONV void
Perl_unshare_hek(pTHX_ HEK *hek);
#define PERL_ARGS_ASSERT_UNSHARE_HEK

PERL_CALLCONV void
Perl_unsharepvn(pTHX_ const char *sv, I32 len, U32 hash);
#define PERL_ARGS_ASSERT_UNSHAREPVN

PERL_CALLCONV SV *
Perl_upg_version(pTHX_ SV *ver, bool qv);
#define PERL_ARGS_ASSERT_UPG_VERSION            \
        assert(ver)

PERL_CALLCONV U8 *
Perl_utf16_to_utf8(pTHX_ U8 *p, U8 *d, Size_t bytelen, Size_t *newlen);
#define PERL_ARGS_ASSERT_UTF16_TO_UTF8          \
        assert(p); assert(d); assert(newlen)

PERL_CALLCONV U8 *
Perl_utf16_to_utf8_base(pTHX_ U8 *p, U8 *d, Size_t bytelen, Size_t *newlen, const bool high, const bool low);
#define PERL_ARGS_ASSERT_UTF16_TO_UTF8_BASE     \
        assert(p); assert(d); assert(newlen)

PERL_CALLCONV U8 *
Perl_utf16_to_utf8_reversed(pTHX_ U8 *p, U8 *d, Size_t bytelen, Size_t *newlen);
#define PERL_ARGS_ASSERT_UTF16_TO_UTF8_REVERSED \
        assert(p); assert(d); assert(newlen)

PERL_CALLCONV STRLEN
Perl_utf8_length(pTHX_ const U8 *s0, const U8 *e)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_UTF8_LENGTH            \
        assert(s0); assert(e)

PERL_CALLCONV U8 *
Perl_utf8_to_bytes(pTHX_ U8 *s, STRLEN *lenp);
#define PERL_ARGS_ASSERT_UTF8_TO_BYTES          \
        assert(s); assert(lenp)

PERL_CALLCONV U8 *
Perl_utf8_to_utf16_base(pTHX_ U8 *s, U8 *d, Size_t bytelen, Size_t *newlen, const bool high, const bool low);
#define PERL_ARGS_ASSERT_UTF8_TO_UTF16_BASE     \
        assert(s); assert(d); assert(newlen)

PERL_CALLCONV UV
Perl_utf8_to_uvchr_buf(pTHX_ const U8 *s, const U8 *send, STRLEN *retlen);
#define PERL_ARGS_ASSERT_UTF8_TO_UVCHR_BUF      \
        assert(s); assert(send)

PERL_CALLCONV UV
Perl_utf8n_to_uvchr(const U8 *s, STRLEN curlen, STRLEN *retlen, const U32 flags);
#define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR         \
        assert(s)

PERL_CALLCONV UV
Perl_utf8n_to_uvchr_error(const U8 *s, STRLEN curlen, STRLEN *retlen, const U32 flags, U32 *errors);
#define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR_ERROR   \
        assert(s)

PERL_CALLCONV void
Perl_utilize(pTHX_ int aver, I32 floor, OP *version, OP *idop, OP *arg)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_UTILIZE                \
        assert(idop)

/* PERL_CALLCONV U8 *
uvchr_to_utf8(pTHX_ U8 *d, UV uv); */

/* PERL_CALLCONV U8 *
uvchr_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags); */

/* PERL_CALLCONV U8 *
uvchr_to_utf8_flags_msgs(pTHX_ U8 *d, UV uv, UV flags, HV **msgs); */

PERL_CALLCONV U8 *
Perl_uvoffuni_to_utf8_flags(pTHX_ U8 *d, UV uv, UV flags);
#define PERL_ARGS_ASSERT_UVOFFUNI_TO_UTF8_FLAGS \
        assert(d)

PERL_CALLCONV U8 *
Perl_uvoffuni_to_utf8_flags_msgs(pTHX_ U8 *d, UV input_uv, const UV flags, HV **msgs);
#define PERL_ARGS_ASSERT_UVOFFUNI_TO_UTF8_FLAGS_MSGS \
        assert(d)

PERL_CALLCONV bool
Perl_validate_proto(pTHX_ SV *name, SV *proto, bool warn, bool curstash);
#define PERL_ARGS_ASSERT_VALIDATE_PROTO         \
        assert(name)

PERL_CALLCONV int
Perl_vcmp(pTHX_ SV *lhv, SV *rhv);
#define PERL_ARGS_ASSERT_VCMP                   \
        assert(lhv); assert(rhv)

PERL_CALLCONV_NO_RET void
Perl_vcroak(pTHX_ const char *pat, va_list *args)
        __attribute__noreturn__;
#define PERL_ARGS_ASSERT_VCROAK

PERL_CALLCONV void
Perl_vdeb(pTHX_ const char *pat, va_list *args);
#define PERL_ARGS_ASSERT_VDEB                   \
        assert(pat)

PERL_CALLCONV void
Perl_vfatal_warner(pTHX_ U32 err, const char *pat, va_list *args);
#define PERL_ARGS_ASSERT_VFATAL_WARNER          \
        assert(pat)

PERL_CALLCONV char *
Perl_vform(pTHX_ const char *pat, va_list *args);
#define PERL_ARGS_ASSERT_VFORM                  \
        assert(pat)

PERL_CALLCONV void
Perl_vivify_defelem(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_VIVIFY_DEFELEM         \
        assert(sv)

PERL_CALLCONV SV *
Perl_vivify_ref(pTHX_ SV *sv, U32 to_what)
        __attribute__warn_unused_result__
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_VIVIFY_REF             \
        assert(sv)

PERL_CALLCONV void
Perl_vload_module(pTHX_ U32 flags, SV *name, SV *ver, va_list *args);
#define PERL_ARGS_ASSERT_VLOAD_MODULE           \
        assert(name)

PERL_CALLCONV SV *
Perl_vmess(pTHX_ const char *pat, va_list *args);
#define PERL_ARGS_ASSERT_VMESS                  \
        assert(pat)

PERL_CALLCONV SV *
Perl_vnewSVpvf(pTHX_ const char * const pat, va_list * const args)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_VNEWSVPVF              \
        assert(pat)

PERL_CALLCONV SV *
Perl_vnormal(pTHX_ SV *vs);
#define PERL_ARGS_ASSERT_VNORMAL                \
        assert(vs)

PERL_CALLCONV SV *
Perl_vnumify(pTHX_ SV *vs);
#define PERL_ARGS_ASSERT_VNUMIFY                \
        assert(vs)

PERL_CALLCONV SV *
Perl_vstringify(pTHX_ SV *vs);
#define PERL_ARGS_ASSERT_VSTRINGIFY             \
        assert(vs)

PERL_CALLCONV SV *
Perl_vverify(pTHX_ SV *vs);
#define PERL_ARGS_ASSERT_VVERIFY                \
        assert(vs)

PERL_CALLCONV void
Perl_vwarn(pTHX_ const char *pat, va_list *args);
#define PERL_ARGS_ASSERT_VWARN                  \
        assert(pat)

PERL_CALLCONV void
Perl_vwarner(pTHX_ U32 err, const char *pat, va_list *args);
#define PERL_ARGS_ASSERT_VWARNER                \
        assert(pat)

PERL_CALLCONV I32
Perl_wait4pid(pTHX_ Pid_t pid, int *statusp, int flags)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_WAIT4PID               \
        assert(statusp)

PERL_CALLCONV void
Perl_warn(pTHX_ const char *pat, ...)
        __attribute__format__(__printf__,pTHX_1,pTHX_2);
#define PERL_ARGS_ASSERT_WARN                   \
        assert(pat)

PERL_CALLCONV void
Perl_warn_sv(pTHX_ SV *baseex);
#define PERL_ARGS_ASSERT_WARN_SV                \
        assert(baseex)

PERL_CALLCONV void
Perl_warner(pTHX_ U32 err, const char *pat, ...)
        __attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_WARNER                 \
        assert(pat)

PERL_CALLCONV I32
Perl_was_lvalue_sub(pTHX)
        __attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_WAS_LVALUE_SUB

PERL_CALLCONV void
Perl_watch(pTHX_ char **addr)
        __attribute__visibility__("hidden");
#define PERL_ARGS_ASSERT_WATCH                  \
        assert(addr)

/* PERL_CALLCONV I32
whichsig(pTHX_ const char *sig); */

PERL_CALLCONV I32
Perl_whichsig_pv(pTHX_ const char *sig);
#define PERL_ARGS_ASSERT_WHICHSIG_PV            \
        assert(sig)

PERL_CALLCONV I32
Perl_whichsig_pvn(pTHX_ const char *sig, STRLEN len);
#define PERL_ARGS_ASSERT_WHICHSIG_PVN           \
        assert(sig)

PERL_CALLCONV I32
Perl_whichsig_sv(pTHX_ SV *sigsv);
#define PERL_ARGS_ASSERT_WHICHSIG_SV            \
        assert(sigsv)

PERL_CALLCONV void
Perl_wrap_infix_plugin(pTHX_ Perl_infix_plugin_t new_plugin, Perl_infix_plugin_t *old_plugin_p);
#define PERL_ARGS_ASSERT_WRAP_INFIX_PLUGIN      \
        assert(new_plugin); assert(old_plugin_p)

