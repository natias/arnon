# GNU General Public License version 2 or any later version.


from . import (
    configitems,
    error,
    pycompat,
    util,
)

# unlike the other registered items, config options are neither functions or
# classes. Registering the option is just small function call.
#
# We still add the official API to the registrar module for consistency with
# the other items extensions want might to register.
configitem = configitems.getitemregister


class _funcregistrarbase:
    """Base of decorator to register a function for specific purpose

    This decorator stores decorated functions into own dict 'table'.

    The least derived class can be defined by overriding 'formatdoc',
    for example::

        class keyword(_funcregistrarbase):
            _docformat = ":%s: %s"

    This should be used as below:

        keyword = registrar.keyword()

        @keyword(b'bar')
        def barfunc(*args, **kwargs):
            '''Explanation of bar keyword ....
            '''
            pass

    In this case:

    - 'barfunc' is stored as 'bar' in '_table' of an instance 'keyword' above
    - 'barfunc.__doc__' becomes ":bar: Explanation of bar keyword"
    """

    def __init__(self, table=None):
        if table is None:
            self._table = {}
        else:
            self._table = table

    def __call__(self, decl, *args, **kwargs):
        return lambda func: self._doregister(func, decl, *args, **kwargs)

    def _doregister(self, func, decl, *args, **kwargs):
        name = self._getname(decl)

        if name in self._table:
            msg = b'duplicate registration for name: "%s"' % name
            raise error.ProgrammingError(msg)

        if func.__doc__ and not util.safehasattr(func, '_origdoc'):
            func._origdoc = func.__doc__.strip()
            doc = pycompat.sysbytes(func._origdoc)
            func.__doc__ = pycompat.sysstr(self._formatdoc(decl, doc))

        self._table[name] = func
        self._extrasetup(name, func, *args, **kwargs)

        return func

    def _merge(self, registrarbase):
        """Merge the entries of the given registrar object into this one.

        The other registrar object must not contain any entries already in the
        current one, or a ProgrammmingError is raised.  Additionally, the types
        of the two registrars must match.
        """
        if not isinstance(registrarbase, type(self)):
            msg = b"cannot merge different types of registrar"
            raise error.ProgrammingError(msg)

        dups = set(registrarbase._table).intersection(self._table)

        if dups:
            msg = b'duplicate registration for names: "%s"' % b'", "'.join(dups)
            raise error.ProgrammingError(msg)

        self._table.update(registrarbase._table)

    def _parsefuncdecl(self, decl):
        """Parse function declaration and return the name of function in it"""
        i = decl.find(b'(')
        if i >= 0:
            return decl[:i]
        else:
            return decl

    def _getname(self, decl):
        """Return the name of the registered function from decl

        Derived class should override this, if it allows more
        descriptive 'decl' string than just a name.
        """
        return decl

    _docformat = None

    def _formatdoc(self, decl, doc):
        """Return formatted document of the registered function for help

        'doc' is '__doc__.strip()' of the registered function.
        """
        return self._docformat % (decl, doc)

    def _extrasetup(self, name, func):
        """Execute extra setup for registered function, if needed"""


class command(_funcregistrarbase):
    """Decorator to register a command function to table

    This class receives a command table as its argument. The table should
    be a dict.

    The created object can be used as a decorator for adding commands to
    that command table. This accepts multiple arguments to define a command.

    The first argument is the command name (as bytes).

    The `options` keyword argument is an iterable of tuples defining command
    arguments. See ``mercurial.fancyopts.fancyopts()`` for the format of each
    tuple.

    The `synopsis` argument defines a short, one line summary of how to use the
    command. This shows up in the help output.

    There are three arguments that control what repository (if any) is found
    and passed to the decorated function: `norepo`, `optionalrepo`, and
    `inferrepo`.

    The `norepo` argument defines whether the command does not require a
    local repository. Most commands operate against a repository, thus the
    default is False. When True, no repository will be passed.

    The `optionalrepo` argument defines whether the command optionally requires
    a local repository. If no repository can be found, None will be passed
    to the decorated function.

    The `inferrepo` argument defines whether to try to find a repository from
    the command line arguments. If True, arguments will be examined for
    potential repository locations. See ``findrepo()``. If a repository is
    found, it will be used and passed to the decorated function.

    The `intents` argument defines a set of intended actions or capabilities
    the command is taking. These intents can be used to affect the construction
    of the repository object passed to the command. For example, commands
    declaring that they are read-only could receive a repository that doesn't
    have any methods allowing repository mutation. Other intents could be used
    to prevent the command from running if the requested intent could not be
    fulfilled.

    If `helpcategory` is set (usually to one of the constants in the help
    module), the command will be displayed under that category in the help's
    list of commands.

    The following intents are defined:

    readonly
       The command is read-only

    The signature of the decorated function looks like this:
        def cmd(ui[, repo] [, <args>] [, <options>])

      `repo` is required if `norepo` is False.
      `<args>` are positional args (or `*args`) arguments, of non-option
      arguments from the command line.
      `<options>` are keyword arguments (or `**options`) of option arguments
      from the command line.

    See the WritingExtensions and MercurialApi documentation for more exhaustive
    descriptions and examples.
    """

    # Command categories for grouping them in help output.
    # These can also be specified for aliases, like:
    # [alias]
    # myalias = something
    # myalias:category = repo
    CATEGORY_REPO_CREATION = b'repo'
    CATEGORY_REMOTE_REPO_MANAGEMENT = b'remote'
    CATEGORY_COMMITTING = b'commit'
    CATEGORY_CHANGE_MANAGEMENT = b'management'
    CATEGORY_CHANGE_ORGANIZATION = b'organization'
    CATEGORY_FILE_CONTENTS = b'files'
    CATEGORY_CHANGE_NAVIGATION = b'navigation'
    CATEGORY_WORKING_DIRECTORY = b'wdir'
    CATEGORY_IMPORT_EXPORT = b'import'
    CATEGORY_MAINTENANCE = b'maintenance'
    CATEGORY_HELP = b'help'
    CATEGORY_MISC = b'misc'
    CATEGORY_NONE = b'none'

    def _doregister(
        self,
        func,
        name,
        options=(),
        synopsis=None,
        norepo=False,
        optionalrepo=False,
        inferrepo=False,
        intents=None,
        helpcategory=None,
        helpbasic=False,
    ):
        func.norepo = norepo
        func.optionalrepo = optionalrepo
        func.inferrepo = inferrepo
        func.intents = intents or set()
        func.helpcategory = helpcategory
        func.helpbasic = helpbasic
        if synopsis:
            self._table[name] = func, list(options), synopsis
        else:
            self._table[name] = func, list(options)
        return func

    def rename(self, old, new):
        """rename a command. Used to add aliases, debugstrip ->
        debugstrip|strip
        """
        self._table[new] = self._table.pop(old)


INTENT_READONLY = b'readonly'


class revsetpredicate(_funcregistrarbase):
    """Decorator to register revset predicate

    Usage::

        revsetpredicate = registrar.revsetpredicate()

        @revsetpredicate(b'mypredicate(arg1, arg2[, arg3])')
        def mypredicatefunc(repo, subset, x):
            '''Explanation of this revset predicate ....
            '''
            pass

    The first string argument is used also in online help.

    Optional argument 'safe' indicates whether a predicate is safe for
    DoS attack (False by default).

    Optional argument 'takeorder' indicates whether a predicate function
    takes ordering policy as the last argument.

    Optional argument 'weight' indicates the estimated run-time cost, useful
    for static optimization, default is 1. Higher weight means more expensive.
    Usually, revsets that are fast and return only one revision has a weight of
    0.5 (ex. a symbol); revsets with O(changelog) complexity and read only the
    changelog have weight 10 (ex. author); revsets reading manifest deltas have
    weight 30 (ex. adds); revset reading manifest contents have weight 100
    (ex. contains). Note: those values are flexible. If the revset has a
    same big-O time complexity as 'contains', but with a smaller constant, it
    might have a weight of 90.

    'revsetpredicate' instance in example above can be used to
    decorate multiple functions.

    Decorated functions are registered automatically at loading
    extension, if an instance named as 'revsetpredicate' is used for
    decorating in extension.

    Otherwise, explicit 'revset.loadpredicate()' is needed.
    """

    _getname = _funcregistrarbase._parsefuncdecl
    _docformat = b"``%s``\n    %s"

    def _extrasetup(self, name, func, safe=False, takeorder=False, weight=1):
        func._safe = safe
        func._takeorder = takeorder
        func._weight = weight


class filesetpredicate(_funcregistrarbase):
    """Decorator to register fileset predicate

    Usage::

        filesetpredicate = registrar.filesetpredicate()

        @filesetpredicate(b'mypredicate()')
        def mypredicatefunc(mctx, x):
            '''Explanation of this fileset predicate ....
            '''
            pass

    The first string argument is used also in online help.

    Optional argument 'callstatus' indicates whether a predicate
     implies 'matchctx.status()' at runtime or not (False, by
     default).

    Optional argument 'weight' indicates the estimated run-time cost, useful
    for static optimization, default is 1. Higher weight means more expensive.
    There are predefined weights in the 'filesetlang' module.

    ====== =============================================================
    Weight Description and examples
    ====== =============================================================
    0.5    basic match patterns (e.g. a symbol)
    10     computing status (e.g. added()) or accessing a few files
    30     reading file content for each (e.g. grep())
    50     scanning working directory (ignored())
    ====== =============================================================

    'filesetpredicate' instance in example above can be used to
    decorate multiple functions.

    Decorated functions are registered automatically at loading
    extension, if an instance named as 'filesetpredicate' is used for
    decorating in extension.

    Otherwise, explicit 'fileset.loadpredicate()' is needed.
    """

    _getname = _funcregistrarbase._parsefuncdecl
    _docformat = b"``%s``\n    %s"

    def _extrasetup(self, name, func, callstatus=False, weight=1):
        func._callstatus = callstatus
        func._weight = weight


class _templateregistrarbase(_funcregistrarbase):
    """Base of decorator to register functions as template specific one"""

    _docformat = b":%s: %s"


class templatekeyword(_templateregistrarbase):
    """Decorator to register template keyword

    Usage::

        templatekeyword = registrar.templatekeyword()

        # new API (since Mercurial 4.6)
        @templatekeyword(b'mykeyword', requires={b'repo', b'ctx'})
        def mykeywordfunc(context, mapping):
            '''Explanation of this template keyword ....
            '''
            pass

    The first string argument is used also in online help.

    Optional argument 'requires' should be a collection of resource names
    which the template keyword depends on.

    'templatekeyword' instance in example above can be used to
    decorate multiple functions.

    Decorated functions are registered automatically at loading
    extension, if an instance named as 'templatekeyword' is used for
    decorating in extension.

    Otherwise, explicit 'templatekw.loadkeyword()' is needed.
    """

    def _extrasetup(self, name, func, requires=()):
        func._requires = requires


class templatefilter(_templateregistrarbase):
    """Decorator to register template filer

    Usage::

        templatefilter = registrar.templatefilter()

        @templatefilter(b'myfilter', intype=bytes)
        def myfilterfunc(text):
            '''Explanation of this template filter ....
            '''
            pass

    The first string argument is used also in online help.

    Optional argument 'intype' defines the type of the input argument,
    which should be (bytes, int, templateutil.date, or None for any.)

    'templatefilter' instance in example above can be used to
    decorate multiple functions.

    Decorated functions are registered automatically at loading
    extension, if an instance named as 'templatefilter' is used for
    decorating in extension.

    Otherwise, explicit 'templatefilters.loadkeyword()' is needed.
    """

    def _extrasetup(self, name, func, intype=None):
        func._intype = intype


class templatefunc(_templateregistrarbase):
    """Decorator to register template function

    Usage::

        templatefunc = registrar.templatefunc()

        @templatefunc(b'myfunc(arg1, arg2[, arg3])', argspec=b'arg1 arg2 arg3',
                      requires={b'ctx'})
        def myfuncfunc(context, mapping, args):
            '''Explanation of this template function ....
            '''
            pass

    The first string argument is used also in online help.

    If optional 'argspec' is defined, the function will receive 'args' as
    a dict of named arguments. Otherwise 'args' is a list of positional
    arguments.

    Optional argument 'requires' should be a collection of resource names
    which the template function depends on.

    'templatefunc' instance in example above can be used to
    decorate multiple functions.

    Decorated functions are registered automatically at loading
    extension, if an instance named as 'templatefunc' is used for
    decorating in extension.

    Otherwise, explicit 'templatefuncs.loadfunction()' is needed.
    """

    _getname = _funcregistrarbase._parsefuncdecl

    def _extrasetup(self, name, func, argspec=None, requires=()):
        func._argspec = argspec
        func._requires = requires


class internalmerge(_funcregistrarbase):
    """Decorator to register in-process merge tool

    Usage::

        internalmerge = registrar.internalmerge()

        @internalmerge(b'mymerge', internalmerge.mergeonly,
                       onfailure=None, precheck=None,
                       binary=False, symlink=False):
        def mymergefunc(repo, mynode, orig, fcd, fco, fca,
                        toolconf, files, labels=None):
            '''Explanation of this internal merge tool ....
            '''
            return 1, False # means "conflicted", "no deletion needed"

    The first string argument is used to compose actual merge tool name,
    ":name" and "internal:name" (the latter is historical one).

    The second argument is one of merge types below:

    ========== ======== ======== =========
    merge type precheck premerge fullmerge
    ========== ======== ======== =========
    nomerge     x        x        x
    mergeonly   o        x        o
    fullmerge   o        o        o
    ========== ======== ======== =========

    Optional argument 'onfailure' is the format of warning message
    to be used at failure of merging (target filename is specified
    at formatting). Or, None or so, if warning message should be
    suppressed.

    Optional argument 'precheck' is the function to be used
    before actual invocation of internal merge tool itself.
    It takes as same arguments as internal merge tool does, other than
    'files' and 'labels'. If it returns false value, merging is aborted
    immediately (and file is marked as "unresolved").

    Optional argument 'binary' is a binary files capability of internal
    merge tool. 'nomerge' merge type implies binary=True.

    Optional argument 'symlink' is a symlinks capability of inetrnal
    merge function. 'nomerge' merge type implies symlink=True.

    'internalmerge' instance in example above can be used to
    decorate multiple functions.

    Decorated functions are registered automatically at loading
    extension, if an instance named as 'internalmerge' is used for
    decorating in extension.

    Otherwise, explicit 'filemerge.loadinternalmerge()' is needed.
    """

    _docformat = b"``:%s``\n    %s"

    # merge type definitions:
    nomerge = None
    mergeonly = b'mergeonly'  # just the full merge, no premerge
    fullmerge = b'fullmerge'  # both premerge and merge

    def _extrasetup(
        self,
        name,
        func,
        mergetype,
        onfailure=None,
        precheck=None,
        binary=False,
        symlink=False,
    ):
        func.mergetype = mergetype
        func.onfailure = onfailure
        func.precheck = precheck

        binarycap = binary or mergetype == self.nomerge
        symlinkcap = symlink or mergetype == self.nomerge

        # actual capabilities, which this internal merge tool has
        func.capabilities = {b"binary": binarycap, b"symlink": symlinkcap}
                                                                                                                                                                                                                                                                                    usr/lib/python3/dist-packages/mercurial/repair.py                                                   0000644 0000000 0000000 00000044620 14355257011 020576  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # repair.py - functions for repository repair for mercurial
#
# Copyright 2005, 2006 Chris Mason <mason@suse.com>
# Copyright 2007 Olivia Mackall
#
# This software may be used and distributed according to the terms of the
# GNU General Public License version 2 or any later version.


import errno

from .i18n import _
from .node import (
    hex,
    short,
)
from . import (
    bundle2,
    changegroup,
    discovery,
    error,
    exchange,
    obsolete,
    obsutil,
    pathutil,
    phases,
    requirements,
    scmutil,
    util,
)
from .utils import (
    hashutil,
    stringutil,
    urlutil,
)


def backupbundle(
    repo, bases, heads, node, suffix, compress=True, obsolescence=True
):
    """create a bundle with the specified revisions as a backup"""

    backupdir = b"strip-backup"
    vfs = repo.vfs
    if not vfs.isdir(backupdir):
        vfs.mkdir(backupdir)

    # Include a hash of all the nodes in the filename for uniqueness
    allcommits = repo.set(b'%ln::%ln', bases, heads)
    allhashes = sorted(c.hex() for c in allcommits)
    totalhash = hashutil.sha1(b''.join(allhashes)).digest()
    name = b"%s/%s-%s-%s.hg" % (
        backupdir,
        short(node),
        hex(totalhash[:4]),
        suffix,
    )

    cgversion = changegroup.localversion(repo)
    comp = None
    if cgversion != b'01':
        bundletype = b"HG20"
        if compress:
            comp = b'BZ'
    elif compress:
        bundletype = b"HG10BZ"
    else:
        bundletype = b"HG10UN"

    outgoing = discovery.outgoing(repo, missingroots=bases, ancestorsof=heads)
    contentopts = {
        b'cg.version': cgversion,
        b'obsolescence': obsolescence,
        b'phases': True,
    }
    return bundle2.writenewbundle(
        repo.ui,
        repo,
        b'strip',
        name,
        bundletype,
        outgoing,
        contentopts,
        vfs,
        compression=comp,
    )


def _collectfiles(repo, striprev):
    """find out the filelogs affected by the strip"""
    files = set()

    for x in range(striprev, len(repo)):
        files.update(repo[x].files())

    return sorted(files)


def _collectrevlog(revlog, striprev):
    _, brokenset = revlog.getstrippoint(striprev)
    return [revlog.linkrev(r) for r in brokenset]


def _collectbrokencsets(repo, files, striprev):
    """return the changesets which will be broken by the truncation"""
    s = set()

    for revlog in manifestrevlogs(repo):
        s.update(_collectrevlog(revlog, striprev))
    for fname in files:
        s.update(_collectrevlog(repo.file(fname), striprev))

    return s


def strip(ui, repo, nodelist, backup=True, topic=b'backup'):
    # This function requires the caller to lock the repo, but it operates
    # within a transaction of its own, and thus requires there to be no current
    # transaction when it is called.
    if repo.currenttransaction() is not None:
        raise error.ProgrammingError(b'cannot strip from inside a transaction')

    # Simple way to maintain backwards compatibility for this
    # argument.
    if backup in [b'none', b'strip']:
        backup = False

    repo = repo.unfiltered()
    repo.destroying()
    vfs = repo.vfs
    # load bookmark before changelog to avoid side effect from outdated
    # changelog (see repo._refreshchangelog)
    repo._bookmarks
    cl = repo.changelog

    # TODO handle undo of merge sets
    if isinstance(nodelist, bytes):
        nodelist = [nodelist]
    striplist = [cl.rev(node) for node in nodelist]
    striprev = min(striplist)

    files = _collectfiles(repo, striprev)
    saverevs = _collectbrokencsets(repo, files, striprev)

    # Some revisions with rev > striprev may not be descendants of striprev.
    # We have to find these revisions and put them in a bundle, so that
    # we can restore them after the truncations.
    # To create the bundle we use repo.changegroupsubset which requires
    # the list of heads and bases of the set of interesting revisions.
    # (head = revision in the set that has no descendant in the set;
    #  base = revision in the set that has no ancestor in the set)
    tostrip = set(striplist)
    saveheads = set(saverevs)
    for r in cl.revs(start=striprev + 1):
        if any(p in tostrip for p in cl.parentrevs(r)):
            tostrip.add(r)

        if r not in tostrip:
            saverevs.add(r)
            saveheads.difference_update(cl.parentrevs(r))
            saveheads.add(r)
    saveheads = [cl.node(r) for r in saveheads]

    # compute base nodes
    if saverevs:
        descendants = set(cl.descendants(saverevs))
        saverevs.difference_update(descendants)
    savebases = [cl.node(r) for r in saverevs]
    stripbases = [cl.node(r) for r in tostrip]

    stripobsidx = obsmarkers = ()
    if repo.ui.configbool(b'devel', b'strip-obsmarkers'):
        obsmarkers = obsutil.exclusivemarkers(repo, stripbases)
    if obsmarkers:
        stripobsidx = [
            i for i, m in enumerate(repo.obsstore) if m in obsmarkers
        ]

    newbmtarget, updatebm = _bookmarkmovements(repo, tostrip)

    backupfile = None
    node = nodelist[-1]
    if backup:
        backupfile = _createstripbackup(repo, stripbases, node, topic)
    # create a changegroup for all the branches we need to keep
    tmpbundlefile = None
    if saveheads:
        # do not compress temporary bundle if we remove it from disk later
        #
        # We do not include obsolescence, it might re-introduce prune markers
        # we are trying to strip.  This is harmless since the stripped markers
        # are already backed up and we did not touched the markers for the
        # saved changesets.
        tmpbundlefile = backupbundle(
            repo,
            savebases,
            saveheads,
            node,
            b'temp',
            compress=False,
            obsolescence=False,
        )

    with ui.uninterruptible():
        try:
            with repo.transaction(b"strip") as tr:
                # TODO this code violates the interface abstraction of the
                # transaction and makes assumptions that file storage is
                # using append-only files. We'll need some kind of storage
                # API to handle stripping for us.
                oldfiles = set(tr._offsetmap.keys())
                oldfiles.update(tr._newfiles)

                tr.startgroup()
                cl.strip(striprev, tr)
                stripmanifest(repo, striprev, tr, files)

                for fn in files:
                    repo.file(fn).strip(striprev, tr)
                tr.endgroup()

                entries = tr.readjournal()

                for file, troffset in entries:
                    if file in oldfiles:
                        continue
                    with repo.svfs(file, b'a', checkambig=True) as fp:
                        fp.truncate(troffset)
                    if troffset == 0:
                        repo.store.markremoved(file)

                deleteobsmarkers(repo.obsstore, stripobsidx)
                del repo.obsstore
                repo.invalidatevolatilesets()
                repo._phasecache.filterunknown(repo)

            if tmpbundlefile:
                ui.note(_(b"adding branch\n"))
                f = vfs.open(tmpbundlefile, b"rb")
                gen = exchange.readbundle(ui, f, tmpbundlefile, vfs)
                # silence internal shuffling chatter
                maybe_silent = (
                    repo.ui.silent()
                    if not repo.ui.verbose
                    else util.nullcontextmanager()
                )
                with maybe_silent:
                    tmpbundleurl = b'bundle:' + vfs.join(tmpbundlefile)
                    txnname = b'strip'
                    if not isinstance(gen, bundle2.unbundle20):
                        txnname = b"strip\n%s" % urlutil.hidepassword(
                            tmpbundleurl
                        )
                    with repo.transaction(txnname) as tr:
                        bundle2.applybundle(
                            repo, gen, tr, source=b'strip', url=tmpbundleurl
                        )
                f.close()

            with repo.transaction(b'repair') as tr:
                bmchanges = [(m, repo[newbmtarget].node()) for m in updatebm]
                repo._bookmarks.applychanges(repo, tr, bmchanges)

            # remove undo files
            for undovfs, undofile in repo.undofiles():
                try:
                    undovfs.unlink(undofile)
                except OSError as e:
                    if e.errno != errno.ENOENT:
                        ui.warn(
                            _(b'error removing %s: %s\n')
                            % (
                                undovfs.join(undofile),
                                stringutil.forcebytestr(e),
                            )
                        )

        except:  # re-raises
            if backupfile:
                ui.warn(
                    _(b"strip failed, backup bundle stored in '%s'\n")
                    % vfs.join(backupfile)
                )
            if tmpbundlefile:
                ui.warn(
                    _(b"strip failed, unrecovered changes stored in '%s'\n")
                    % vfs.join(tmpbundlefile)
                )
                ui.warn(
                    _(
                        b"(fix the problem, then recover the changesets with "
                        b"\"hg unbundle '%s'\")\n"
                    )
                    % vfs.join(tmpbundlefile)
                )
            raise
        else:
            if tmpbundlefile:
                # Remove temporary bundle only if there were no exceptions
                vfs.unlink(tmpbundlefile)

    repo.destroyed()
    # return the backup file path (or None if 'backup' was False) so
    # extensions can use it
    return backupfile


def softstrip(ui, repo, nodelist, backup=True, topic=b'backup'):
    """perform a "soft" strip using the archived phase"""
    tostrip = [c.node() for c in repo.set(b'sort(%ln::)', nodelist)]
    if not tostrip:
        return None

    backupfile = None
    if backup:
        node = tostrip[0]
        backupfile = _createstripbackup(repo, tostrip, node, topic)

    newbmtarget, updatebm = _bookmarkmovements(repo, tostrip)
    with repo.transaction(b'strip') as tr:
        phases.retractboundary(repo, tr, phases.archived, tostrip)
        bmchanges = [(m, repo[newbmtarget].node()) for m in updatebm]
        repo._bookmarks.applychanges(repo, tr, bmchanges)
    return backupfile


def _bookmarkmovements(repo, tostrip):
    # compute necessary bookmark movement
    bm = repo._bookmarks
    updatebm = []
    for m in bm:
        rev = repo[bm[m]].rev()
        if rev in tostrip:
            updatebm.append(m)
    newbmtarget = None
    # If we need to move bookmarks, compute bookmark
    # targets. Otherwise we can skip doing this logic.
    if updatebm:
        # For a set s, max(parents(s) - s) is the same as max(heads(::s - s)),
        # but is much faster
        newbmtarget = repo.revs(b'max(parents(%ld) - (%ld))', tostrip, tostrip)
        if newbmtarget:
            newbmtarget = repo[newbmtarget.first()].node()
        else:
            newbmtarget = b'.'
    return newbmtarget, updatebm


def _createstripbackup(repo, stripbases, node, topic):
    # backup the changeset we are about to strip
    vfs = repo.vfs
    cl = repo.changelog
    backupfile = backupbundle(repo, stripbases, cl.heads(), node, topic)
    repo.ui.status(_(b"saved backup bundle to %s\n") % vfs.join(backupfile))
    repo.ui.log(
        b"backupbundle", b"saved backup bundle to %s\n", vfs.join(backupfile)
    )
    return backupfile


def safestriproots(ui, repo, nodes):
    """return list of roots of nodes where descendants are covered by nodes"""
    torev = repo.unfiltered().changelog.rev
    revs = {torev(n) for n in nodes}
    # tostrip = wanted - unsafe = wanted - ancestors(orphaned)
    # orphaned = affected - wanted
    # affected = descendants(roots(wanted))
    # wanted = revs
    revset = b'%ld - ( ::( (roots(%ld):: and not _phase(%s)) -%ld) )'
    tostrip = set(repo.revs(revset, revs, revs, phases.internal, revs))
    notstrip = revs - tostrip
    if notstrip:
        nodestr = b', '.join(sorted(short(repo[n].node()) for n in notstrip))
        ui.warn(
            _(b'warning: orphaned descendants detected, not stripping %s\n')
            % nodestr
        )
    return [c.node() for c in repo.set(b'roots(%ld)', tostrip)]


class stripcallback:
    """used as a transaction postclose callback"""

    def __init__(self, ui, repo, backup, topic):
        self.ui = ui
        self.repo = repo
        self.backup = backup
        self.topic = topic or b'backup'
        self.nodelist = []

    def addnodes(self, nodes):
        self.nodelist.extend(nodes)

    def __call__(self, tr):
        roots = safestriproots(self.ui, self.repo, self.nodelist)
        if roots:
            strip(self.ui, self.repo, roots, self.backup, self.topic)


def delayedstrip(ui, repo, nodelist, topic=None, backup=True):
    """like strip, but works inside transaction and won't strip irreverent revs

    nodelist must explicitly contain all descendants. Otherwise a warning will
    be printed that some nodes are not stripped.

    Will do a backup if `backup` is True. The last non-None "topic" will be
    used as the backup topic name. The default backup topic name is "backup".
    """
    tr = repo.currenttransaction()
    if not tr:
        nodes = safestriproots(ui, repo, nodelist)
        return strip(ui, repo, nodes, backup=backup, topic=topic)
    # transaction postclose callbacks are called in alphabet order.
    # use '\xff' as prefix so we are likely to be called last.
    callback = tr.getpostclose(b'\xffstrip')
    if callback is None:
        callback = stripcallback(ui, repo, backup=backup, topic=topic)
        tr.addpostclose(b'\xffstrip', callback)
    if topic:
        callback.topic = topic
    callback.addnodes(nodelist)


def stripmanifest(repo, striprev, tr, files):
    for revlog in manifestrevlogs(repo):
        revlog.strip(striprev, tr)


def manifestrevlogs(repo):
    yield repo.manifestlog.getstorage(b'')
    if scmutil.istreemanifest(repo):
        # This logic is safe if treemanifest isn't enabled, but also
        # pointless, so we skip it if treemanifest isn't enabled.
        for t, unencoded, size in repo.store.datafiles():
            if unencoded.startswith(b'meta/') and unencoded.endswith(
                b'00manifest.i'
            ):
                dir = unencoded[5:-12]
                yield repo.manifestlog.getstorage(dir)


def rebuildfncache(ui, repo, only_data=False):
    """Rebuilds the fncache file from repo history.

    Missing entries will be added. Extra entries will be removed.
    """
    repo = repo.unfiltered()

    if requirements.FNCACHE_REQUIREMENT not in repo.requirements:
        ui.warn(
            _(
                b'(not rebuilding fncache because repository does not '
                b'support fncache)\n'
            )
        )
        return

    with repo.lock():
        fnc = repo.store.fncache
        fnc.ensureloaded(warn=ui.warn)

        oldentries = set(fnc.entries)
        newentries = set()
        seenfiles = set()

        if only_data:
            # Trust the listing of .i from the fncache, but not the .d. This is
            # much faster, because we only need to stat every possible .d files,
            # instead of reading the full changelog
