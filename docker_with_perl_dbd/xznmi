
    points[0][0] = points[1][0] = points[2][0] = points[3][0] = box.min[0];
    points[4][0] = points[5][0] = points[6][0] = points[7][0] = box.max[0];

    points[0][1] = points[1][1] = points[4][1] = points[5][1] = box.min[1];
    points[2][1] = points[3][1] = points[6][1] = points[7][1] = box.max[1];

    points[0][2] = points[2][2] = points[4][2] = points[6][2] = box.min[2];
    points[1][2] = points[3][2] = points[5][2] = points[7][2] = box.max[2];

    for (int i = 0; i < 8; i++)
        result.extendBy (points[i] * m);
}

///
/// Transform a 3D box by a matrix whose rightmost column `(0 0 0 1)`,
/// and compute a new box that tightly encloses the transformed
/// box. Return the transformed box.
///
/// As in the transform() function, use James Arvo's fast method if
/// possible.
///
/// A transformed empty or infinite box is still empty or infinite.
///

template <class S, class T>
IMATH_HOSTDEVICE Box<Vec3<S>>
affineTransform (const Box<Vec3<S>>& box, const Matrix44<T>& m) IMATH_NOEXCEPT
{
    if (box.isEmpty() || box.isInfinite())
        return box;

    Box<Vec3<S>> newBox;

    for (int i = 0; i < 3; i++)
    {
        newBox.min[i] = newBox.max[i] = (S) m[3][i];

        for (int j = 0; j < 3; j++)
        {
            S a, b;

            a = (S) m[j][i] * box.min[j];
            b = (S) m[j][i] * box.max[j];

            if (a < b)
            {
                newBox.min[i] += a;
                newBox.max[i] += b;
            }
            else
            {
                newBox.min[i] += b;
                newBox.max[i] += a;
            }
        }
    }

    return newBox;
}

///
/// Transform a 3D box by a matrix whose rightmost column is
/// `(0 0 0 1)`, and compute a new box that tightly encloses 
/// the transformed box. Return the transformed box in the `result`
/// argument.
///
/// As in the transform() function, use James Arvo's fast method if
/// possible.
///
/// A transformed empty or infinite box is still empty or infinite.
///

template <class S, class T>
IMATH_HOSTDEVICE void
affineTransform (const Box<Vec3<S>>& box, const Matrix44<T>& m, Box<Vec3<S>>& result) IMATH_NOEXCEPT
{
    if (box.isEmpty())
    {
        result.makeEmpty();
        return;
    }

    if (box.isInfinite())
    {
        result.makeInfinite();
        return;
    }

    for (int i = 0; i < 3; i++)
    {
        result.min[i] = result.max[i] = (S) m[3][i];

        for (int j = 0; j < 3; j++)
        {
            S a, b;

            a = (S) m[j][i] * box.min[j];
            b = (S) m[j][i] * box.max[j];

            if (a < b)
            {
                result.min[i] += a;
                result.max[i] += b;
            }
            else
            {
                result.min[i] += b;
                result.max[i] += a;
            }
        }
    }
}

///
/// Compute the points where a ray, `r`, enters and exits a 3D box, `b`:
///
/// Return true if the ray starts inside the box or if the ray starts
/// outside and intersects the box, or return false otherwise (that
/// is, if the ray does not intersect the box).
///
/// The entry and exit points are the points on two of the faces of
/// the box when the function returns true (the entry end exit points
/// may be on either side of the ray's origin), or undefined if the
/// the function returns false.
///

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 bool
findEntryAndExitPoints (const Line3<T>& r, const Box<Vec3<T>>& b, Vec3<T>& entry, Vec3<T>& exit) IMATH_NOEXCEPT
{
    if (b.isEmpty())
    {
        //
        // No ray intersects an empty box
        //

        return false;
    }

    //
    // The following description assumes that the ray's origin is outside
    // the box, but the code below works even if the origin is inside the
    // box:
    //
    // Between one and three "frontfacing" sides of the box are oriented
    // towards the ray's origin, and between one and three "backfacing"
    // sides are oriented away from the ray's origin.
    // We intersect the ray with the planes that contain the sides of the
    // box, and compare the distances between the ray's origin and the
    // ray-plane intersections.  The ray intersects the box if the most
    // distant frontfacing intersection is nearer than the nearest
    // backfacing intersection.  If the ray does intersect the box, then
    // the most distant frontfacing ray-plane intersection is the entry
    // point and the nearest backfacing ray-plane intersection is the
    // exit point.
    //

    const T TMAX = std::numeric_limits<T>::max();

    T tFrontMax = -TMAX;
    T tBackMin  = TMAX;

    //
    // Minimum and maximum X sides.
    //

    if (r.dir.x >= 0)
    {
        T d1 = b.max.x - r.pos.x;
        T d2 = b.min.x - r.pos.x;

        if (r.dir.x > 1 || (abs (d1) < TMAX * r.dir.x && abs (d2) < TMAX * r.dir.x))
        {
            T t1 = d1 / r.dir.x;
            T t2 = d2 / r.dir.x;

            if (tBackMin > t1)
            {
                tBackMin = t1;

                exit.x = b.max.x;
                exit.y = clamp (r.pos.y + t1 * r.dir.y, b.min.y, b.max.y);
                exit.z = clamp (r.pos.z + t1 * r.dir.z, b.min.z, b.max.z);
            }

            if (tFrontMax < t2)
            {
                tFrontMax = t2;

                entry.x = b.min.x;
                entry.y = clamp (r.pos.y + t2 * r.dir.y, b.min.y, b.max.y);
                entry.z = clamp (r.pos.z + t2 * r.dir.z, b.min.z, b.max.z);
            }
        }
        else if (r.pos.x < b.min.x || r.pos.x > b.max.x)
        {
            return false;
        }
    }
    else // r.dir.x < 0
    {
        T d1 = b.min.x - r.pos.x;
        T d2 = b.max.x - r.pos.x;

        if (r.dir.x < -1 || (abs (d1) < -TMAX * r.dir.x && abs (d2) < -TMAX * r.dir.x))
        {
            T t1 = d1 / r.dir.x;
            T t2 = d2 / r.dir.x;

            if (tBackMin > t1)
            {
                tBackMin = t1;

                exit.x = b.min.x;
                exit.y = clamp (r.pos.y + t1 * r.dir.y, b.min.y, b.max.y);
                exit.z = clamp (r.pos.z + t1 * r.dir.z, b.min.z, b.max.z);
            }

            if (tFrontMax < t2)
            {
                tFrontMax = t2;

                entry.x = b.max.x;
                entry.y = clamp (r.pos.y + t2 * r.dir.y, b.min.y, b.max.y);
                entry.z = clamp (r.pos.z + t2 * r.dir.z, b.min.z, b.max.z);
            }
        }
        else if (r.pos.x < b.min.x || r.pos.x > b.max.x)
        {
            return false;
        }
    }

    //
    // Minimum and maximum Y sides.
    //

    if (r.dir.y >= 0)
    {
        T d1 = b.max.y - r.pos.y;
        T d2 = b.min.y - r.pos.y;

        if (r.dir.y > 1 || (abs (d1) < TMAX * r.dir.y && abs (d2) < TMAX * r.dir.y))
        {
            T t1 = d1 / r.dir.y;
            T t2 = d2 / r.dir.y;

            if (tBackMin > t1)
            {
                tBackMin = t1;

                exit.x = clamp (r.pos.x + t1 * r.dir.x, b.min.x, b.max.x);
                exit.y = b.max.y;
                exit.z = clamp (r.pos.z + t1 * r.dir.z, b.min.z, b.max.z);
            }

            if (tFrontMax < t2)
            {
                tFrontMax = t2;

                entry.x = clamp (r.pos.x + t2 * r.dir.x, b.min.x, b.max.x);
                entry.y = b.min.y;
                entry.z = clamp (r.pos.z + t2 * r.dir.z, b.min.z, b.max.z);
            }
        }
        else if (r.pos.y < b.min.y || r.pos.y > b.max.y)
        {
            return false;
        }
    }
    else // r.dir.y < 0
    {
        T d1 = b.min.y - r.pos.y;
        T d2 = b.max.y - r.pos.y;

        if (r.dir.y < -1 || (abs (d1) < -TMAX * r.dir.y && abs (d2) < -TMAX * r.dir.y))
        {
            T t1 = d1 / r.dir.y;
            T t2 = d2 / r.dir.y;

            if (tBackMin > t1)
            {
                tBackMin = t1;

                exit.x = clamp (r.pos.x + t1 * r.dir.x, b.min.x, b.max.x);
                exit.y = b.min.y;
                exit.z = clamp (r.pos.z + t1 * r.dir.z, b.min.z, b.max.z);
            }

            if (tFrontMax < t2)
            {
                tFrontMax = t2;

                entry.x = clamp (r.pos.x + t2 * r.dir.x, b.min.x, b.max.x);
                entry.y = b.max.y;
                entry.z = clamp (r.pos.z + t2 * r.dir.z, b.min.z, b.max.z);
            }
        }
        else if (r.pos.y < b.min.y || r.pos.y > b.max.y)
        {
            return false;
        }
    }

    //
    // Minimum and maximum Z sides.
    //

    if (r.dir.z >= 0)
    {
        T d1 = b.max.z - r.pos.z;
        T d2 = b.min.z - r.pos.z;

        if (r.dir.z > 1 || (abs (d1) < TMAX * r.dir.z && abs (d2) < TMAX * r.dir.z))
        {
            T t1 = d1 / r.dir.z;
            T t2 = d2 / r.dir.z;

            if (tBackMin > t1)
            {
                tBackMin = t1;

                exit.x = clamp (r.pos.x + t1 * r.dir.x, b.min.x, b.max.x);
                exit.y = clamp (r.pos.y + t1 * r.dir.y, b.min.y, b.max.y);
                exit.z = b.max.z;
            }

            if (tFrontMax < t2)
            {
                tFrontMax = t2;

                entry.x = clamp (r.pos.x + t2 * r.dir.x, b.min.x, b.max.x);
                entry.y = clamp (r.pos.y + t2 * r.dir.y, b.min.y, b.max.y);
                entry.z = b.min.z;
            }
        }
        else if (r.pos.z < b.min.z || r.pos.z > b.max.z)
        {
            return false;
        }
    }
    else // r.dir.z < 0
    {
        T d1 = b.min.z - r.pos.z;
        T d2 = b.max.z - r.pos.z;

        if (r.dir.z < -1 || (abs (d1) < -TMAX * r.dir.z && abs (d2) < -TMAX * r.dir.z))
        {
            T t1 = d1 / r.dir.z;
            T t2 = d2 / r.dir.z;

            if (tBackMin > t1)
            {
                tBackMin = t1;

                exit.x = clamp (r.pos.x + t1 * r.dir.x, b.min.x, b.max.x);
                exit.y = clamp (r.pos.y + t1 * r.dir.y, b.min.y, b.max.y);
                exit.z = b.min.z;
            }

            if (tFrontMax < t2)
            {
                tFrontMax = t2;

                entry.x = clamp (r.pos.x + t2 * r.dir.x, b.min.x, b.max.x);
                entry.y = clamp (r.pos.y + t2 * r.dir.y, b.min.y, b.max.y);
                entry.z = b.max.z;
            }
        }
        else if (r.pos.z < b.min.z || r.pos.z > b.max.z)
        {
            return false;
        }
    }

    return tFrontMax <= tBackMin;
}

///
/// Intersect a ray, `r`, with a 3D box, `b, and compute the intersection
/// point, returned in `ip`.
///
/// The intersection point is
/// - the ray's origin if the ray starts inside the box
/// - a point on one of the faces of the box if the ray
///   starts outside the box
/// - undefined when intersect() returns false
///
/// @return
/// - true if the ray starts inside the box or if the
///   ray starts outside and intersects the box
/// - false if the ray starts outside the box and intersects it,
///   but the intersection is behind the ray's origin.
/// - false if the ray starts outside and does not intersect it
///

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 bool
intersects (const Box<Vec3<T>>& b, const Line3<T>& r, Vec3<T>& ip) IMATH_NOEXCEPT
{
    if (b.isEmpty())
    {
        //
        // No ray intersects an empty box
        //

        return false;
    }

    if (b.intersects (r.pos))
    {
        //
        // The ray starts inside the box
        //

        ip = r.pos;
        return true;
    }

    //
    // The ray starts outside the box.  Between one and three "frontfacing"
    // sides of the box are oriented towards the ray, and between one and
    // three "backfacing" sides are oriented away from the ray.
    // We intersect the ray with the planes that contain the sides of the
    // box, and compare the distances between ray's origin and the ray-plane
    // intersections.
    // The ray intersects the box if the most distant frontfacing intersection
    // is nearer than the nearest backfacing intersection.  If the ray does
    // intersect the box, then the most distant frontfacing ray-plane
    // intersection is the ray-box intersection.
    //

    const T TMAX = std::numeric_limits<T>::max();

    T tFrontMax = -1;
    T tBackMin  = TMAX;

    //
    // Minimum and maximum X sides.
    //

    if (r.dir.x > 0)
    {
        if (r.pos.x > b.max.x)
            return false;

        T d = b.max.x - r.pos.x;

        if (r.dir.x > 1 || d < TMAX * r.dir.x)
        {
            T t = d / r.dir.x;

            if (tBackMin > t)
                tBackMin = t;
        }

        if (r.pos.x <= b.min.x)
        {
            T d = b.min.x - r.pos.x;
            T t = (r.dir.x > 1 || d < TMAX * r.dir.x) ? d / r.dir.x : TMAX;

            if (tFrontMax < t)
            {
                tFrontMax = t;

                ip.x = b.min.x;
                ip.y = clamp (r.pos.y + t * r.dir.y, b.min.y, b.max.y);
                ip.z = clamp (r.pos.z + t * r.dir.z, b.min.z, b.max.z);
            }
        }
    }
    else if (r.dir.x < 0)
    {
        if (r.pos.x < b.min.x)
            return false;

        T d = b.min.x - r.pos.x;

        if (r.dir.x < -1 || d > TMAX * r.dir.x)
        {
            T t = d / r.dir.x;

            if (tBackMin > t)
                tBackMin = t;
        }

        if (r.pos.x >= b.max.x)
        {
            T d = b.max.x - r.pos.x;
            T t = (r.dir.x < -1 || d > TMAX * r.dir.x) ? d / r.dir.x : TMAX;

            if (tFrontMax < t)
            {
                tFrontMax = t;

                ip.x = b.max.x;
                ip.y = clamp (r.pos.y + t * r.dir.y, b.min.y, b.max.y);
                ip.z = clamp (r.pos.z + t * r.dir.z, b.min.z, b.max.z);
            }
        }
    }
    else // r.dir.x == 0
    {
        if (r.pos.x < b.min.x || r.pos.x > b.max.x)
            return false;
    }

    //
    // Minimum and maximum Y sides.
    //

    if (r.dir.y > 0)
    {
        if (r.pos.y > b.max.y)
            return false;

        T d = b.max.y - r.pos.y;

        if (r.dir.y > 1 || d < TMAX * r.dir.y)
        {
            T t = d / r.dir.y;

            if (tBackMin > t)
                tBackMin = t;
        }

        if (r.pos.y <= b.min.y)
        {
            T d = b.min.y - r.pos.y;
            T t = (r.dir.y > 1 || d < TMAX * r.dir.y) ? d / r.dir.y : TMAX;

            if (tFrontMax < t)
            {
                tFrontMax = t;

                ip.x = clamp (r.pos.x + t * r.dir.x, b.min.x, b.max.x);
                ip.y = b.min.y;
                ip.z = clamp (r.pos.z + t * r.dir.z, b.min.z, b.max.z);
            }
        }
    }
    else if (r.dir.y < 0)
    {
        if (r.pos.y < b.min.y)
            return false;

        T d = b.min.y - r.pos.y;

        if (r.dir.y < -1 || d > TMAX * r.dir.y)
        {
            T t = d / r.dir.y;

            if (tBackMin > t)
                tBackMin = t;
        }

        if (r.pos.y >= b.max.y)
        {
            T d = b.max.y - r.pos.y;
            T t = (r.dir.y < -1 || d > TMAX * r.dir.y) ? d / r.dir.y : TMAX;

            if (tFrontMax < t)
            {
                tFrontMax = t;

                ip.x = clamp (r.pos.x + t * r.dir.x, b.min.x, b.max.x);
                ip.y = b.max.y;
                ip.z = clamp (r.pos.z + t * r.dir.z, b.min.z, b.max.z);
            }
        }
    }
    else // r.dir.y == 0
    {
        if (r.pos.y < b.min.y || r.pos.y > b.max.y)
            return false;
    }

    //
    // Minimum and maximum Z sides.
    //

    if (r.dir.z > 0)
    {
        if (r.pos.z > b.max.z)
            return false;

        T d = b.max.z - r.pos.z;

        if (r.dir.z > 1 || d < TMAX * r.dir.z)
        {
            T t = d / r.dir.z;

            if (tBackMin > t)
                tBackMin = t;
        }

        if (r.pos.z <= b.min.z)
        {
            T d = b.min.z - r.pos.z;
            T t = (r.dir.z > 1 || d < TMAX * r.dir.z) ? d / r.dir.z : TMAX;

            if (tFrontMax < t)
            {
                tFrontMax = t;

                ip.x = clamp (r.pos.x + t * r.dir.x, b.min.x, b.max.x);
                ip.y = clamp (r.pos.y + t * r.dir.y, b.min.y, b.max.y);
                ip.z = b.min.z;
            }
        }
    }
    else if (r.dir.z < 0)
    {
        if (r.pos.z < b.min.z)
            return false;

        T d = b.min.z - r.pos.z;

        if (r.dir.z < -1 || d > TMAX * r.dir.z)
        {
            T t = d / r.dir.z;

            if (tBackMin > t)
                tBackMin = t;
        }

        if (r.pos.z >= b.max.z)
        {
            T d = b.max.z - r.pos.z;
            T t = (r.dir.z < -1 || d > TMAX * r.dir.z) ? d / r.dir.z : TMAX;

            if (tFrontMax < t)
            {
                tFrontMax = t;

                ip.x = clamp (r.pos.x + t * r.dir.x, b.min.x, b.max.x);
                ip.y = clamp (r.pos.y + t * r.dir.y, b.min.y, b.max.y);
                ip.z = b.max.z;
            }
        }
    }
    else // r.dir.z == 0
    {
        if (r.pos.z < b.min.z || r.pos.z > b.max.z)
            return false;
    }

    return tFrontMax <= tBackMin;
}

///
/// Return whether the the ray `ray` interects the 3D box `box`.
///

template <class T>
IMATH_HOSTDEVICE IMATH_CONSTEXPR14 bool
intersects (const Box<Vec3<T>>& box, const Line3<T>& ray) IMATH_NOEXCEPT
{
    Vec3<T> ignored;
    return intersects (box, ray, ignored);
}

IMATH_INTERNAL_NAMESPACE_HEADER_EXIT

#endif // INCLUDED_IMATHBOXALGO_H
                                             usr/include/Imath/ImathColor.h                                                                      0000644 0000000 0000000 00000044411 14330770346 014767  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        //
// SPDX-License-Identifier: BSD-3-Clause
// Copyright Contributors to the OpenEXR Project.
//

//
// 3-channel and 4-channel color representations
//

#ifndef INCLUDED_IMATHCOLOR_H
#define INCLUDED_IMATHCOLOR_H

#include "ImathExport.h"
#include "ImathNamespace.h"

#include "ImathVec.h"
#include "half.h"

IMATH_INTERNAL_NAMESPACE_HEADER_ENTER

///
/// 3-channel color class that inherits from Vec3.
///
/// This class does not impose interpretation on the channels, which
/// can represent either rgb or hsv color values.
///
/// Note: because Color3 inherits from Vec3, its member fields are
/// called `x`, `y`, and `z`.

template <class T> class IMATH_EXPORT_TEMPLATE_TYPE Color3 : public Vec3<T>
{
  public:

    /// @{
    /// @name Constructors and Assignemt

    /// No initialization by default
    IMATH_HOSTDEVICE Color3() IMATH_NOEXCEPT;                         

    /// Initialize to (a a a)
    IMATH_HOSTDEVICE constexpr explicit Color3 (T a) IMATH_NOEXCEPT;  

    /// Initialize to (a b c)
    IMATH_HOSTDEVICE constexpr Color3 (T a, T b, T c) IMATH_NOEXCEPT; 

    /// Construct from Color3
    IMATH_HOSTDEVICE constexpr Color3 (const Color3& c) IMATH_NOEXCEPT; 

    /// Construct from Vec3
    template <class S> IMATH_HOSTDEVICE constexpr Color3 (const Vec3<S>& v) IMATH_NOEXCEPT; 

    /// Destructor
    ~Color3() = default;

    /// Component-wise assignment
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Color3& operator= (const Color3& c) IMATH_NOEXCEPT; 

    /// @}
    
    /// @{
    /// @name Arithmetic
    
    /// Component-wise addition
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Color3& operator+= (const Color3& c) IMATH_NOEXCEPT; 

    /// Component-wise addition
    IMATH_HOSTDEVICE constexpr Color3 operator+ (const Color3& c) const IMATH_NOEXCEPT;  

    /// Component-wise subtraction
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Color3& operator-= (const Color3& c) IMATH_NOEXCEPT; 

    /// Component-wise subtraction
    IMATH_HOSTDEVICE constexpr Color3 operator- (const Color3& c) const IMATH_NOEXCEPT; 

    /// Component-wise multiplication by -1
    IMATH_HOSTDEVICE constexpr Color3 operator-() const IMATH_NOEXCEPT; 

    /// Component-wise multiplication by -1
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Color3& negate() IMATH_NOEXCEPT; 

    /// Component-wise multiplication
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Color3& operator*= (const Color3& c) IMATH_NOEXCEPT; 

    /// Component-wise multiplication
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Color3& operator*= (T a) IMATH_NOEXCEPT;  

    /// Component-wise multiplication
    IMATH_HOSTDEVICE constexpr Color3 operator* (const Color3& c) const IMATH_NOEXCEPT;  

    /// Component-wise multiplication
    IMATH_HOSTDEVICE constexpr Color3 operator* (T a) const IMATH_NOEXCEPT;  

    /// Component-wise division
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Color3& operator/= (const Color3& c) IMATH_NOEXCEPT; 

    /// Component-wise division
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Color3& operator/= (T a) IMATH_NOEXCEPT; 

    /// Component-wise division
    IMATH_HOSTDEVICE constexpr Color3 operator/ (const Color3& c) const IMATH_NOEXCEPT;  

    /// Component-wise division
    IMATH_HOSTDEVICE constexpr Color3 operator/ (T a) const IMATH_NOEXCEPT;  

    /// @}
};

///
/// A 4-channel color class: 3 channels plus alpha. 
///
/// For convenience, the fields are named `r`, `g`, and `b`, although
/// this class does not impose interpretation on the channels, which
/// can represent either rgb or hsv color values.
///

template <class T> class IMATH_EXPORT_TEMPLATE_TYPE Color4
{
  public:

    /// @{
    /// @name Direct access to elements

    T r, g, b, a;

    /// @}

    /// @{
    /// @name Constructors and Assignment

    /// No initialization by default
    IMATH_HOSTDEVICE Color4() IMATH_NOEXCEPT;                                      

    /// Initialize to `(a a a a)`
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 explicit Color4 (T a) IMATH_NOEXCEPT;       

    /// Initialize to `(a b c d)`
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 Color4 (T a, T b, T c, T d) IMATH_NOEXCEPT; 

    /// Construct from Color4
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 Color4 (const Color4& v) IMATH_NOEXCEPT; 

    /// Construct from Color4
    template <class S> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 Color4 (const Color4<S>& v) IMATH_NOEXCEPT; 

    /// Destructor
    ~Color4() = default;

    /// Assignment
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Color4& operator= (const Color4& v) IMATH_NOEXCEPT; 

    /// Component-wise value
    IMATH_HOSTDEVICE T& operator[] (int i) IMATH_NOEXCEPT; 

    /// Component-wise value
    IMATH_HOSTDEVICE const T& operator[] (int i) const IMATH_NOEXCEPT; 

    /// @}
    
    /// @{
    /// @name Arithmetic and Comparison
    
    /// Equality
    template <class S> IMATH_HOSTDEVICE constexpr bool operator== (const Color4<S>& v) const IMATH_NOEXCEPT; 

    /// Inequality
    template <class S> IMATH_HOSTDEVICE constexpr bool operator!= (const Color4<S>& v) const IMATH_NOEXCEPT; 

    /// Component-wise addition
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Color4& operator+= (const Color4& v) IMATH_NOEXCEPT; 

    /// Component-wise addition
    IMATH_HOSTDEVICE constexpr Color4 operator+ (const Color4& v) const IMATH_NOEXCEPT; 

    /// Component-wise subtraction
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Color4& operator-= (const Color4& v) IMATH_NOEXCEPT; 

    /// Component-wise subtraction
    IMATH_HOSTDEVICE constexpr Color4 operator- (const Color4& v) const IMATH_NOEXCEPT; 

    /// Component-wise multiplication by -1
    IMATH_HOSTDEVICE constexpr Color4 operator-() const IMATH_NOEXCEPT; 

    /// Component-wise multiplication by -1
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Color4& negate() IMATH_NOEXCEPT; 

    /// Component-wise multiplication
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Color4& operator*= (const Color4& v) IMATH_NOEXCEPT; 

    /// Component-wise multiplication
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Color4& operator*= (T a) IMATH_NOEXCEPT; 

    /// Component-wise multiplication
    IMATH_HOSTDEVICE constexpr Color4 operator* (const Color4& v) const IMATH_NOEXCEPT; 

    /// Component-wise multiplication
    IMATH_HOSTDEVICE constexpr Color4 operator* (T a) const IMATH_NOEXCEPT; 

    /// Component-wise division
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Color4& operator/= (const Color4& v) IMATH_NOEXCEPT; 

    /// Component-wise division
    IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Color4& operator/= (T a) IMATH_NOEXCEPT; 

    /// Component-wise division
    IMATH_HOSTDEVICE constexpr Color4 operator/ (const Color4& v) const IMATH_NOEXCEPT; 

    /// Component-wise division
    IMATH_HOSTDEVICE constexpr Color4 operator/ (T a) const IMATH_NOEXCEPT; 

    /// @}

    /// @{
    /// @name Numeric Limits
    
    /// Number of dimensions (channels), i.e. 4 for a Color4
    IMATH_HOSTDEVICE constexpr static unsigned int dimensions() IMATH_NOEXCEPT { return 4; }

    /// Largest possible negative value
    IMATH_HOSTDEVICE constexpr static T baseTypeLowest() IMATH_NOEXCEPT { return std::numeric_limits<T>::lowest(); }

    /// Largest possible positive value
    IMATH_HOSTDEVICE constexpr static T baseTypeMax() IMATH_NOEXCEPT { return std::numeric_limits<T>::max(); }

    /// Smallest possible positive value
    IMATH_HOSTDEVICE constexpr static T baseTypeSmallest() IMATH_NOEXCEPT { return std::numeric_limits<T>::min(); }

    /// Smallest possible e for which 1+e != 1
    IMATH_HOSTDEVICE constexpr static T baseTypeEpsilon() IMATH_NOEXCEPT { return std::numeric_limits<T>::epsilon(); }

    /// @}
    
    /// The base type: In templates that accept a parameter `V` (could
    /// be a Color4), you can refer to `T` as `V::BaseType`
    typedef T BaseType;

    /// @{
    /// @name Compatibilty with Sb

    /// Set the value
    template <class S> IMATH_HOSTDEVICE void setValue (S a, S b, S c, S d) IMATH_NOEXCEPT; 

    /// Set the value
    template <class S> IMATH_HOSTDEVICE void setValue (const Color4<S>& v) IMATH_NOEXCEPT; 

    /// Return the value
    template <class S> IMATH_HOSTDEVICE void getValue (S& a, S& b, S& c, S& d) const IMATH_NOEXCEPT; 

    /// Return the value
    template <class S> IMATH_HOSTDEVICE void getValue (Color4<S>& v) const IMATH_NOEXCEPT; 

    /// Return raw pointer to the value
    IMATH_HOSTDEVICE T* getValue() IMATH_NOEXCEPT; 

    /// Return raw pointer to the value
    IMATH_HOSTDEVICE const T* getValue() const IMATH_NOEXCEPT; 

    /// @}
};

/// Stream output, as "(r g b a)"
template <class T> std::ostream& operator<< (std::ostream& s, const Color4<T>& v);

/// Reverse multiplication: S * Color4
template <class S, class T>
IMATH_HOSTDEVICE constexpr Color4<T> operator* (S a, const Color4<T>& v) IMATH_NOEXCEPT;

/// 3 float channels
typedef Color3<float> Color3f;

/// 3 half channels
typedef Color3<half> Color3h;

/// 3 8-bit integer channels
typedef Color3<unsigned char> Color3c;

/// 3 half channels
typedef Color3<half> C3h;

/// 3 float channels
typedef Color3<float> C3f;

/// 3 8-bit integer channels
typedef Color3<unsigned char> C3c;

/// 4 float channels
typedef Color4<float> Color4f;

/// 4 half channels
typedef Color4<half> Color4h;

/// 4 8-bit integer channels
typedef Color4<unsigned char> Color4c;

/// 4 float channels
typedef Color4<float> C4f;

/// 4 half channels
typedef Color4<half> C4h;

/// 4 8-bit integer channels
typedef Color4<unsigned char> C4c;

/// Packed 32-bit integer
typedef unsigned int PackedColor;

//
// Implementation of Color3
//

template <class T> IMATH_HOSTDEVICE inline Color3<T>::Color3() IMATH_NOEXCEPT : Vec3<T>()
{
    // empty
}

template <class T> IMATH_HOSTDEVICE constexpr inline Color3<T>::Color3 (T a) IMATH_NOEXCEPT : Vec3<T> (a)
{
    // empty
}

template <class T> IMATH_HOSTDEVICE constexpr inline Color3<T>::Color3 (T a, T b, T c) IMATH_NOEXCEPT : Vec3<T> (a, b, c)
{
    // empty
}

template <class T> IMATH_HOSTDEVICE constexpr inline Color3<T>::Color3 (const Color3& c) IMATH_NOEXCEPT : Vec3<T> (c)
{
    // empty
}

template <class T>
template <class S>
IMATH_HOSTDEVICE constexpr inline Color3<T>::Color3 (const Vec3<S>& v) IMATH_NOEXCEPT : Vec3<T> (v)
{
    //empty
