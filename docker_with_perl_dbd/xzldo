
Documented L<C<save_helem>|perlapi/save_helem>

=item *

Documented L<C<save_helem_flags>|perlapi/save_helem_flags>

=back

=head3 L<perldeprecation>

=over 4

=item *

Added information about unscheduled deprecations and their categories.

=item *

Added category information for existing scheduled deprecations.

=item *

Added smartmatch and apostrophe as a package separator deprecation data.

=back

=head3 L<perlintern>

=over 4

=item *

Documented L<C<save_pushptr>|perlintern/save_pushptr>

=item *

Documented L<C<save_scalar_at>|perlintern/save_scalar_at>

=item *

Entries have been added to L<perlguts> for the new C<newAV_alloc_x>, C<newAV_alloc_xz> and
C<*_simple> functions.

=item *

References to the now-defunct PrePAN service have been removed from
L<perlcommunity> and L<perlmodstyle>.

=item *

A section on symbol naming has been added to L<perlhacktips>.

=item *

L<perlexperiment> has been edited to properly reference the warning categories
for the defer block modifier and extra paired delimiters for quote-like
operators.

=back

=head3 L<perlexperiment>

=over 4

=item *

Smartmatch has been moved from experimental status to deprecated status.
Unfortunately the experiment did not work out.

=back

=head3 L<perlfunc>

=over 4

=item *

Some wording improvements have been made for the C<ucfirst>, C<push>,
C<unshift> and C<bless> functions, as well as additional examples added.

=back

=head3 perlhacktips

=over 4

=item *

A new section, L<perlhacktips/Writing safer macros> has been added to discuss
pitfalls and solutions to using C macros in C and XS code.

=item *

A new section, L<perlhacktips/Choosing good symbol names>, has been added to
discuss unexpected gotchas with names.

=back

=head3 L<perlop>

=over 4

=item *

Document the behavior of matching the empty pattern better and specify
its relationship to the new C<${^LAST_SUCCESSFUL_PATTERN}> properly.

=back

=cut

=head3 L<perlvar>

=over 4

=item *

Added a section on "Scoping Rules of Regex Variables", and other wording
improvements made throughout.

=item *

Added information on the new C<%{^HOOK}> interface, and the new
C<require__before> and C<require__after> hooks which it exposes.

=item *

Correct information on the regex variables C<${^PREMATCH}>, C<${^MATCH}>
and C<${^POSTMATCH}>, all of which were incorrectly documented due to an
oversight. Specifically they only work properly after a regex operation
that used the /p modifier to enable them.

=item *

Added information on the new regex variable C<${^LAST_SUCCESSFUL_PATTERN}>,
which represents the pattern of the last successful regex match in scope.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

A new syntax error has been added for the error that a C<catch> block does
not have its required variable declaration. See
L<catch block requires a (VAR)|perldiag/"catch block requires a (VAR)">

=item *

L<Too many nested BEGIN blocks, maximum of %d allowed|perldiag/"Too many nested BEGIN blocks, maximum of %d allowed">

=item *

L<Execution of %s aborted due to compilation errors.|perldiag/"Execution of %s aborted due to compilation errors.">

=item *

L<Can't locate object method "INC", nor "INCDIR" nor string overload via
package "%s" %s in @INC|perldiag/"Can't locate object method "INC", nor
"INCDIR" nor string overload via package "%s" %s in @INC">

=item *

L<Attempt to bless into a class|perldiag/"Attempt to bless into a class">

(F) You are attempting to call C<bless> with a package name that is a
new-style C<class>.  This is not necessary, as instances created by the
constructor are already in the correct class.  Instances cannot be created
by other means, such as C<bless>.

=item *

L<Cannot assign :param(%s) to field %s because that name is already in use|perldiag/"Cannot assign :param(%s) to field %s because that name is already in use">

(F) An attempt was made to apply a parameter name to a field, when the name
is already being used by another field in the same class, or one of its
parent classes. This would cause a name clash so is not allowed.

=item *

L<Cannot create class %s as it already has a non-empty @ISA|perldiag/"Cannot create class %s as it already has a non-empty @ISA">

(F) An attempt was made to create a class out of a package that already has
an C<@ISA> array, and the array is not empty.  This is not permitted, as it
would lead to a class with inconsistent inheritance.

=item *

L<Cannot invoke a method of "%s" on an instance of "%s"|perldiag/"Cannot invoke a method of "%s" on
an instance of "%s"">

(F) You tried to directly call a C<method> subroutine of one class by passing
in a value that is an instance of a different class.  This is not permitted,
as the method would not have access to the correct instance fields.

=item *

L<Cannot invoke method on a non-instance|perldiag/"Cannot invoke method on a non-instance">

(F) You tried to directly call a C<method> subroutine of a class by passing
in a value that is not an instance of that class.  This is not permitted, as
the method would not then have access to its instance fields.

=item *

L<Cannot '%s' outside of a 'class'|perldiag/"Cannot '%s' outside of a 'class'">

(F) You attempted to use one of the keywords that only makes sense inside
a C<class> definition, at a location that is not inside such a class.

=item *

L<Cannot reopen existing class "%s"|perldiag/"Cannot reopen existing class "%s"">

(F) You tried to begin a C<class> definition for a class that already exists.
A class may only have one definition block.

=item *

L<Can't bless an object reference|perldiag/"Can't bless an object reference">

(F) You attempted to call C<bless> on a value that already refers to a real
object instance.

=item *

L<can't convert empty path|perldiag/"can't convert empty path">

(F) On Cygwin, you called a path conversion function with an empty path.
Only non-empty paths are legal.

=item *

L<Class already has a superclass, cannot add another|perldiag/"Class already has a superclass, cannot add another">

(F) You attempted to specify a second superclass for a C<class> by using
the C<:isa> attribute, when one is already specified.  Unlike classes
whose instances are created with C<bless>, classes created via the
C<class> keyword cannot have more than one superclass.

=item *

L<Class attribute %s requires a value|perldiag/"Class attribute %s requires a value">

(F) You specified an attribute for a class that would require a value to
be passed in parentheses, but did not provide one.  Remember that
whitespace is B<not> permitted between the attribute name and its value;
you must write this as

    class Example::Class :attr(VALUE) ...

=item *

L<Class :isa attribute requires a class but "%s" is not one|perldiag/"Class :isa attribute requires a class but "%s" is not one">

(F) When creating a subclass using the C<class> C<:isa> attribute, the
named superclass must also be a real class created using the C<class>
keyword.

=item *

L<Field already has a parameter name, cannot add another|perldiag/"Field already has a parameter name, cannot add another">

(F) A field may have at most one application of the C<:param> attribute to
assign a parameter name to it; once applied a second one is not allowed.

=item *

L<Field attribute %s requires a value|perldiag/"Field attribute %s requires a value">

(F) You specified an attribute for a field that would require a value to
be passed in parentheses, but did not provide one.  Remember that
whitespace is B<not> permitted between the attribute name and its value;
you must write this as

    field $var :attr(VALUE) ...

=item *

L<Field %s is not accessible outside a method|perldiag/"Field %s is not accessible outside a method">

(F) An attempt was made to access a field variable of a class from code
that does not appear inside the body of a C<method> subroutine.  This is not
permitted, as only methods will have access to the fields of an instance.

=item *

L<Field %s of "%s" is not accessible in a method of "%s"|perldiag/"Field %s of "%s" is not accessible in a method of "%s"">

(F) An attempt was made to access a field variable of a class, from a
method of another class nested inside the one that actually defined it.
This is not permitted, as only methods defined by a given class are
permitted to access fields of that class.

=item *

L<Only scalar fields can take a :param attribute|perldiag/"Only scalar fields can take a :param attribute">

(F) You tried to apply the C<:param> attribute to an array or hash field.
Currently this is not permitted.

=item *

L<Required parameter '%s' is missing for %s constructor|perldiag/"Required parameter '%s' is missing for %s constructor">

(F) You called the constructor for a class that has a required named
parameter, but did not pass that parameter at all.

=item *

L<Unexpected characters while parsing class :isa attribute: %s|perldiag/"Unexpected characters while parsing class :isa attribute: %s">

(F) You tried to specify something other than a single class name with an
optional trailing version number as the value for a C<class> C<:isa>
attribute.  This confused the parser.

=item *

L<Unrecognized class attribute %s|perldiag/"Unrecognized class attribute %s">

(F) You attempted to add a named attribute to a C<class> definition, but
perl does not recognise the name of the requested attribute.

=item *

L<Unrecognized field attribute %s|perldiag/"Unrecognized field attribute %s">

(F) You attempted to add a named attribute to a C<field> definition, but
perl does not recognise the name of the requested attribute.

=item *

L<${^HOOK}{%s} may only be a CODE reference or undef|perldiag/"${^HOOK}{%s} may only be a CODE reference or undef">

=item *

L<Attempt to set unknown hook '%s' in %{^HOOK}|perldiag/"Attempt to set unknown hook '%s' in %{^HOOK}">

=item *

L<Missing or undefined argument to %s via %{^HOOK}{require__before}|perldiag/"Missing or undefined argument to %s via %{^HOOK}{require__before}">

=item *

L<Too many capture groups (limit is %d) in regex mE<sol>%sE<sol>|perldiag/"Too many capture groups (limit is %d) in regex m/%s/">

=back

=head3 New Warnings

=over 4

=item *

L<Unknown locale category %d|perldiag/"Unknown locale category %d">

This is a shortened form of an already existing diagnostic, for use when
there is no new locale being switched to.  The previous diagnostic was
misleading in such circumstances.

=item *

L<Locale '%s' is unsupported, and may crash the interpreter.|perldiag/"Locale '%s' is unsupported, and may crash the interpreter.">

=item *

L<Treating %s::INIT block as BEGIN block as workaround|perldiag/"Treating %s::INIT block as BEGIN block as workaround">

=item *

L<Filehandle STD%s reopened as %s only for input|perldiag/"Filehandle STD%s reopened as %s only for input">

=item *

L<%s on BEGIN block ignored|perldiag/"%s on BEGIN block ignored">

=item *

L<ADJUST is experimental|perldiag/"ADJUST is experimental">

(S experimental::class) This warning is emitted if you use the C<ADJUST>
keyword of C<use feature 'class'>.  This keyword is currently
experimental and its behaviour may change in future releases of Perl.

=item *

L<class is experimental|perldiag/"class is experimental">

(S experimental::class) This warning is emitted if you use the C<class>
keyword of C<use feature 'class'>.  This keyword is currently
experimental and its behaviour may change in future releases of Perl.

=item *

L<Method %s redefined|perldiag/"Method %s redefined">

(W redefine) You redefined a method.  To suppress this warning, say

    {
       no warnings 'redefine';
       *name = method { ... };
    }

=item *

L<Odd number of elements in hash field initialization|perldiag/"Odd number of elements in hash field initialization">

(W misc) You specified an odd number of elements to initialise a hash
field of an object.  Hashes are initialised from a list of key/value
pairs so there must be a corresponding value to every key.  The final
missing value will be filled in with undef instead.

=item *

L<Old package separator "'" deprecated|perldiag/"Old package separator "'" deprecated">

(W deprecated, syntax) You used the old package separator "'" in a
variable, subroutine or package name.  Support for the old package
separator will be removed in Perl 5.40.

=item *

L<field is experimental|perldiag/"field is experimental">

(S experimental::class) This warning is emitted if you use the C<field>
keyword of C<use feature 'class'>.  This keyword is currently
experimental and its behaviour may change in future releases of Perl.

=item *

L<method is experimental|perldiag/"method is experimental">

(S experimental::class) This warning is emitted if you use the C<method>
keyword of C<use feature 'class'>.  This keyword is currently
experimental and its behaviour may change in future releases of Perl.

=item *

L<Can't call destructor for 0x%p in global destruction|perldiag/"Can't call destructor for 0x%p in global destruction">


=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

The compiler will now stop parsing on the first syntax error it
encounters. Historically the compiler would attempt to "skip past" the
error and continue parsing so that it could list multiple errors. For
things like undeclared variables under strict this makes sense. For
syntax errors however it has been found that continuing tends to result
in a storm of unrelated or bizarre errors that mostly just obscure the
true error. In extreme cases it can even lead to segfaults and other
incorrect behavior.

Therefore we have reformed the continuation logic so that the parse will
stop after the first seen syntax error. Semantic errors like undeclared
variables will not stop the parse, so you may still see multiple errors
when compiling code. However if there is a syntax error it will be the
last error message reported by perl and all of the errors that you see
will be something that actually needs to be fixed.

=item *

Error messages that output class or package names have been modified to
output double quoted strings with various characters escaped so as to
make the exact value clear to a reader. The exact rules on which
characters are escaped may change over time but currently are that
printable ASCII codepoints, with the exception of C<"> and C<\>, and
unicode word characters whose codepoint is over 255 are output raw, and
any other symbols are escaped much as Data::Dumper might escape them,
using C<\n> for newline and C<\"> for double quotes, etc. Codepoints in
the range 128-255 are always escaped as they can cause trouble on
unicode terminals when output raw.

In older versions of perl the one liner

    $ perl -le'"thing\n"->foo()'

would output the following error message exactly as shown here, with
text spread over multiple lines because the "\n" would be emitted as
a raw newline character:

    Can't locate object method "foo" via package "thing
    " (perhaps you forgot to load "thing
    "?) at -e line 1.

As of this release we would output this instead (as one line):

    Can't locate object method "foo" via package "thing\n"
      (perhaps you forgot to load "thing\n"?) at -e line 1.

Notice the newline in the package name has been quoted and escaped, and
thus the error message is a single line. The text is shown here wrapped
to two lines only for readability.

=item *

When package or class names in errors are very large the middle excess
portion will be elided from the message. As of this release error messages
will show only up to the first 128 characters and the last 128 characters
in a package or class name in error messages. For example

 $ perl -le'("Foo" x 1000)->new()'

will output the following as one line:

 Can't locate object method "new" via package "FooFooFooFooFooFooFoo
 FooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFoo
 FooFooFooFooFooFooFooFooFooFooFooFooFooFo"..."oFooFooFooFooFooFooFoo
 FooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFoo
 FooFooFooFooFooFooFooFooFooFooFooFooFoo" (perhaps you forgot to load
 "FooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFoo
 FooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFo"...
 "oFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFoo
 FooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFooFoo"?)
 at -e line 1.

Notice the C< "prefix"..."suffix" > form of the package name in this case.
In previous versions of perl the complete string would have been shown
making the error message over 6k long and there was no upper limit on the
length of the error message at all. If you accidentally used a 1MB string
as a class name then the error message would be over 2MB long. In this perl
the upper limit should be around 2k when eliding and escaping are taken into
account.

=item *

Removed C<< Complex regular subexpression recursion limit (%d) exceeded >>

The regular expresion engine has not used recursion in some time. This
warning no longer makes sense.

See [L<GH #19636|https://github.com/Perl/perl5/pull/19636>].

=item *

Various warnings that used to produce parenthesized hints underneath the
main warning message and after its "location data" were chanaged to put
the hint inline with the main message. For instance:

 Bareword found where operator expected at -e line 1, near "foo bar"
     (Do you need to predeclare foo?)

will now look like this but as one line:

 Bareword found where operator expected (Do you need to predeclare
 foo?) at -e line 1, near "foo bar"

as a result such warnings will no longer trigger C<$SIG{__WARN__}>
twice, and the hint will be visible when fatal warnings is in effect.

=item *

The error message that is produced when a C<require> or C<use> statement
fails has been changed. It used to contain the words C<@INC contains:>,
and it used to show the state of C<@INC> *after* the require had
completed and failed. The error message has been changed to say C<@INC
entries checked:> and to reflect the actual directories or hooks that
were executed during the require statement. For example:

    perl -e'push @INC, sub {@INC=()}; eval "require Frobnitz"
        or die $@'
    Can't locate Frobnitz.pm in @INC (you may need to install the
    Frobnitz module) (@INC contains:) at (eval 1) line 1.

Will change to (with some output elided for clarity):

    perl -e'push @INC, sub {@INC=()}; eval "require Frobnitz"
        or die $@'
    Can't locate Frobnitz.pm in @INC (you may need to install the
    Frobnitz module) (@INC entries checked:
    .../site_perl/5.38.0/x86_64-linux .../site_perl/5.38.0
    .../5.38.0/x86_64-linux .../5.38.0 CODE(0x562745e684b8))
    at (eval 1) line 1.

thus showing the actual directories checked. Code that checks for
C<@INC contains:> in error messages should be hardened against any future
wording changes between the C<@INC> and C<:>, for instance use
C<qr/\@INC[ \w]+:/> instead of using C<qr/\@INC contains:/> or
C<qr/\@INC entries checked:/> in tests as this will ensure both forward
and backward compatibility.

=item *

L<Old package separator used in string|perldiag/"Old package separator used in string">

This diagnostic is now also part of the C<deprecated> category.

=item *

L<given is deprecated|perldiag/"given is deprecated"> replaces C<given is experimental>.

=item *

L<when is deprecated|perldiag/"when is deprecated"> replaces C<when is experimental>.

=item *

L<Smartmatch is deprecated|perldiag/"Smartmatch is deprecated"> replaces C<Smartmatch is experimental>.

=back

=head1 Configuration and Compilation

=over 4

=item *

C<make -j6 minitest> could fail due to a build conflict in building
C<$(MINIPERL_EXE)> between the main make process and a child process.
[L<GH #19829|https://github.com/Perl/perl5/issues/19829>]

=item *

Properly populate osvers on Dragonfly BSD when the hostname isn't set.

=item *

Fix typos for C99 macro name C<PRIX64>.

=item *

Remove ancient and broken GCC for VMS support

=item *

Remove vestigial reference to C</VAXC> qualifier

=item *

Remove sharedperl option on VMS

=item *

VMS now has mkostemp

=item *

C<Configure> now properly handles quoted elements outputted by gcc.
[L<GH #20606|https://github.com/Perl/perl5/issues/20606>]

=item *

C<Configure> probed for the return type of malloc() and free() by
testing whether declarations for those functions produced a function
type mismatch with the implementation.  On Solaris, with a C++
compiler, this check always failed, since Solaris instead imports
malloc() and free() from C<std::> with C<using> for C++ builds.  Since
the return types of malloc() and free() are well defined by the C
standard, skip probing for them.  C<Configure> command-line arguments
and hints can still override these type in the unlikely case that is
needed.  [L<GH #20806|https://github.com/Perl/perl5/issues/20806>]

=back

=head1 Testing

Tests were added and changed to reflect the other additions and
changes in this release.  Furthermore, these significant changes were
made:

=over 4

=item *

Unicode normalization tests have been added.

=item *

t/test.pl: Add ability to cancel an watchdog timer

=back

=head1 Platform Support

=head2 Discontinued Platforms

=over 4

=item Ultrix

Support code for DEC Ultrix has been removed.  Ultrix was the native
Unix-like operating system for various Digital Equipment Corporation
machines.  Its final release was in 1995.

=back

=head2 Platform-Specific Notes

=over 4

=item DragonflyBSD

Skip tests to workaround an apparent bug in C<setproctitle()>.
[L<GH #19894|https://github.com/Perl/perl5/issues/19894>]

=item FreeBSD

FreeBSD no longer uses thread-safe locale operations, to avoid L<a bug in
FreeBSD|https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=265950>

Replace the first part of archname with C<uname -p>
[L<GH #19791|https://github.com/Perl/perl5/issues/19791>]

=item Solaris

Avoid some compiler and compilation issues on NetBSD/Solaris from regexec.c and regcomp.c.

=item Synology

Update Synology Readme for DSM 7.

=item Windows

Fix win32 memory alignment needed for gcc-12 from vmem.h.

utimes() on Win32 would print a message to stderr if it failed to
convert a supplied C<time_t> to a C<FILETIME>.
[L<GH #19668|https://github.com/Perl/perl5/issues/19668>]

In some cases, timestamps returned by L<stat()|perlfunc/stat> and
L<lstat()|perlfunc/lstat> failed to take daylight saving time into account.
[L<GH #20018|https://github.com/Perl/perl5/issues/20018>]
[L<GH #20061|https://github.com/Perl/perl5/issues/20061>]

stat() now works on C<AF_UNIX> socket files.
[L<GH #20204|https://github.com/Perl/perl5/issues/20204>]

readlink() now returns the C<PrintName> from a symbolic link reparse
point instead of the C<SubstituteName>, which should make it better
match the name the link was created with.
[L<GH #20271|https://github.com/Perl/perl5/pull/20271>]

lstat() on Windows now returns the length of the link target as the
size of the file, as it does on POSIX systems.
[L<GH #20476|https://github.com/Perl/perl5/issues/20476>]

symlink() on Windows now replaces any C</> in the target with C<\>,
since Windows does not recognise C</> in symbolic links.  The reverse
translation is B<not> done by readlink().
[L<GH #20506|https://github.com/Perl/perl5/issues/20506>]

symlink() where the target was an absolute path to a directory was
incorrectly created as a file symbolic link.
[L<GH #20533|https://github.com/Perl/perl5/issues/20533>]

C<POSIX::dup2> no longer creates broken sockets. [L<GH
#20920|https://github.com/Perl/perl5/issues/20920>]

Closing a busy pipe could cause Perl to hang. [L<GH
#19963|https://github.com/Perl/perl5/issues/19963>]

=back

=head1 Internal Changes

=over 4

=item *

Removed many deprecated C functions.

These have been deprecated for a long time. See
L<https://github.com/perl/perl5/commit/7008caa915ad99e650acf2aea40612b5e48b7ba2>
for a full list.

=item *

C<get_op_descs>, C<get_op_names>, C<get_opargs>, C<get_no_modify> and
C<get_ppaddr> have been marked deprecated.

=item *

C<hv_free_ent> has been marked as internal API.

=item *

C<save_pushptr>, C<save_pushptrptr>, and C<save_pushi32ptr> have been marked
as internal API.

=item *

New bool related functions and macros have been added to complement the new
bool type introduced in 5.36:

The functions are:

=over 4

=item L<C<newSVbool(const bool bool_val)>|perlapi/newSVbool>

=item L<C<newSV_true()>|perlapi/newSV_true>

=item L<C<newSV_false()>|perlapi/newSV_false>

=item L<C<sv_set_true(SV *sv)>|perlapi/sv_set_true>

=item L<C<sv_set_false(SV *sv)>|perlapi/sv_set_false>

=item L<C<sv_set_bool(SV *sv, const bool bool_val)>|perlapi/sv_set_bool>

=back

The macros are:

=over 4

=item L<C<SvIandPOK(sv)>|perlapi/SvIandPOK>

=item L<C<SvIandPOK_off(sv)>|perlapi/SvIandPOK_off>

=item L<C<SvIandPOK_on>|perlapi/SvIandPOK_on>

=back

=item *

Perl is no longer manipulating the C<environ> array directly. The variable
C<PL_use_safe_putenv> has been removed and C<PERL_USE_SAFE_PUTENV> is always
defined. This means XS modules can now call C<setenv> and C<putenv> without
causing segfaults. [L<perl #19399|https://github.com/Perl/perl5/issues/19399>]

=item *

Internal C API functions are now hidden with C<__attribute__((hidden))> on the
platforms that support it. This means they are no longer callable from XS
modules on those platforms.

It should be noted that those functions have always been hidden on Windows. This
change merely brings that to the other platforms.
[L<perl #19655|https://github.com/Perl/perl5/pull/19655>]

=item *

New formatting symbols were added for printing values declared as C<U32> or
C<I32>:

=over

=item I32df -- Like %d

=item U32of -- Like %o

=item U32uf -- Like %u

=item U32xf -- Like %x

=item U32Xf -- Like %X

=back

These are used in the same way already existing similar symbols, such as
C<IVdf>, are used.  See L<perlapi/I/O Formats>.

=item *

new 'HvHasAUX' macro

=item *

regexec.c: Add some branch predictions reorder conds

=item *

locale: Change macro name to be C conformant

=item *

Rename the C<PADNAMEt_*> constants to C<PADNAMEf_*>

=item *

Changes all the API macros that retrieve a PV into a call to an
inline function so as to evaluate the parameter just once.

=item *

regexec.c: multiple code refactor to make the code more readable

=item *

perl.h: Change macro name to be C conformant
(remove leading _ from NOT_IN_NUMERIC macros)

=item *

regcomp.h: add new C<BITMAP_BIT> macro in addition to the existing C<BITMAP_BYTE>
and C<BITMAP_TEST> ones.

=item *

Create new regnode type ANYOFH.
populate_ANYOF_from_invlist was renamed to populate_bitmap_from_invlist

=item *

regex: Refactor bitmap vs non-bitmap of qr/[]/

=item *

regcomp.c: add new functions to convert from an inversion list to a bitmap (and vice versa)
C<populate_bitmap_from_invlist> and C<populate_invlist_from_bitmap>.

=item *

Add C<newAVav()> to create an AV from an existing AV.
Add C<newAVhv()> to create an AV using keys and values from an existing HV.

=item *

Fix definition of C<Perl_atof>.

=item *

Fix undefined behavior with overflow related C<OPTIMIZE_INFTY> and delta
in F<regcomp.c>.

=item *

Fix regnode pointer alignment issue in F<regcomp.h>.

=item *

The C<CVf_METHOD> CV flag and associated C<CvMETHOD> macro has been renamed to
C<CVf_NOWARN_AMBIGUOUS> and C<CvNOWARN_AMBIGUOUS>. This closer reflects its
actual behaviour (it suppresses a warning that would otherwise be generated
about ambiguous names), in order to be less confusing with C<CvIsMETHOD>,
which indicates that a CV is a C<method> subroutine relating to the C<class>
feature.

=item *

The C<OPf_SPECIAL> flag is no longer set on the C<OP_ENTERSUB> op
constructed to call the C<VERSION>, C<import> and C<unimport> methods
as part of a C<use> statement and attribute application, nor when
assigning to an C<:lvalue> subroutine.

=item *

A new CV flag C<CVf_REFCOUNTED_ANYSV> has been added, which indicates that the
CV is an XSUB and stores an SV pointer in the C<CvXSUBANY.any_sv> union field.
Perl core operations such as cloning or destroying the CV will maintain the
reference count of the pointed-to SV, destroying it when required.

=item *

A new API function L<perlapi/C<Perl_localeconv>> is added.  This is the
same as L<C<POSIX::localeconv>|POSIX/localeconv> (returning a hash of
the C<localeconv()> fields), but directly callable from XS code.

=item *

A new API function, L<perlapi/C<Perl_langinfo8>> is added.  This is the
same as plain L<perlapi/C<Perl_langinfo>>, but with an extra parameter
that allows the caller to simply and reliably know if the returned
string is UTF-8.

=item *

We have introduced a limit on the number of nested C<eval EXPR>/C<BEGIN>
blocks and C<require>/C<BEGIN> (and thus C<use> statements as well) to
prevent C stack overflows. This variable can also be used to forbid
C<BEGIN> blocks from executing during C<eval EXPR> compilation. The
limit defaults to C<1000> but can be overridden by setting the
C<${^MAX_NESTED_EVAL_BEGIN_BLOCKS}> variable. The default itself can be
changed at compile time with

    -Accflags='-DPERL_MAX_NESTED_EVAL_BEGIN_BLOCKS_DEFAULT=12345'

Note that this value relates to the size of your C stack and if you
choose an inappropriately large value Perl may segfault, be conservative
about what you choose.

=item *

A new magic type C<PERL_MAGIC_extvalue> has been added. This is available for
use like C<PERL_MAGIC_ext>, but is a value magic: upon localization the new
value will not be magical.

=item *

The C<SSNEW()>, C<SSNEWt()>, C<SSNEWa()> and C<SSNEWat()> APIs now
return a C<SSize_t> value.  The C<SSPTR()> and C<SSPTRt()> macros now
expect a C<SSize_t> parameter, and enforce that on debugging builds.
[L<GH #20411|https://github.com/Perl/perl5/issues/20411>]
