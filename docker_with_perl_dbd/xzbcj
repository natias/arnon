	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144D,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11944,
	0x11945,
	0x11946,
	0x11947,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11C41,
	0x11C43,
	0x11EF7,
	0x11EF9,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B39,
	0x16B44,
	0x16B45,
	0x16E98,
	0x16E99,
	0x1BC9F,
	0x1BCA0,
	0x1DA88,
	0x1DA89
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_STERM_invlist[] = {  /* for EBCDIC 037 */
	159,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x5A,
	0x5B,
	0x6F,
	0x70,
	0x589,
	0x58A,
	0x61D,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x703,
	0x7F9,
	0x7FA,
	0x837,
	0x838,
	0x839,
	0x83A,
	0x83D,
	0x83F,
	0x964,
	0x966,
	0x104A,
	0x104C,
	0x1362,
	0x1363,
	0x1367,
	0x1369,
	0x166E,
	0x166F,
	0x1735,
	0x1737,
	0x1803,
	0x1804,
	0x1809,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5E,
	0x1B60,
	0x1B7D,
	0x1B7F,
	0x1C3B,
	0x1C3D,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x2E53,
	0x2E55,
	0x3002,
	0x3003,
	0xA4FF,
	0xA500,
	0xA60E,
	0xA610,
	0xA6F3,
	0xA6F4,
	0xA6F7,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C8,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE52,
	0xFE53,
	0xFE56,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF0E,
	0xFF0F,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0x10A56,
	0x10A58,
	0x10F55,
	0x10F5A,
	0x10F86,
	0x10F8A,
	0x11047,
	0x11049,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123A,
	0x1123B,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144D,
	0x115C2,
	0x115C4,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11944,
	0x11945,
	0x11946,
	0x11947,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11C41,
	0x11C43,
	0x11EF7,
	0x11EF9,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B39,
	0x16B44,
	0x16B45,
	0x16E98,
	0x16E99,
	0x1BC9F,
	0x1BCA0,
	0x1DA88,
	0x1DA89
};

#  endif	/* EBCDIC 037 */

static const UV UNI_SUND_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1B80,
	0x1BC0,
	0x1CC0,
	0x1CC8
};

static const UV UNI_SUNDANESESUP_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1CC0,
	0x1CD0
};

static const UV UNI_SUPARROWSA_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x27F0,
	0x2800
};

static const UV UNI_SUPARROWSB_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2900,
	0x2980
};

static const UV UNI_SUPARROWSC_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F800,
	0x1F900
};

static const UV UNI_SUPERANDSUB_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2070,
	0x20A0
};

static const UV UNI_SUPMATHOPERATORS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2A00,
	0x2B00
};

static const UV UNI_SUPPUAA_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xF0000,
	0x100000
};

static const UV UNI_SUPPUAB_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x100000,
	0x110000
};

static const UV UNI_SUPPUNCTUATION_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x2E00,
	0x2E80
};

static const UV UNI_SUPSYMBOLSANDPICTOGRAPHS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1F900,
	0x1FA00
};

static const UV UNI_SUTTONSIGNWRITING_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D800,
	0x1DAB0
};

static const UV UNI_SYLO_invlist[] = {  /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x964,
	0x966,
	0x9E6,
	0x9F0,
	0xA800,
	0xA82D
};

static const UV UNI_SYMBOLSANDPICTOGRAPHSEXTA_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1FA70,
	0x1FB00
};

static const UV UNI_SYMBOLSFORLEGACYCOMPUTING_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1FB00,
	0x1FC00
};

static const UV UNI_SYRC_invlist[] = {  /* for all charsets */
	25,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x60C,
	0x60D,
	0x61B,
	0x61D,
	0x61F,
	0x620,
	0x640,
	0x641,
	0x64B,
	0x656,
	0x670,
	0x671,
	0x700,
	0x70E,
	0x70F,
	0x74B,
	0x74D,
	0x750,
	0x860,
	0x86B,
	0x1DF8,
	0x1DF9,
	0x1DFA,
	0x1DFB
};

static const UV UNI_SYRIACSUP_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x860,
	0x870
};

static const UV UNI_TAGB_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1735,
	0x1737,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774
};

static const UV UNI_TAGS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE0000,
	0xE0080
};

static const UV UNI_TAIXUANJING_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1D300,
	0x1D360
};

static const UV UNI_TAKR_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x964,
	0x966,
	0xA830,
	0xA83A,
	0x11680,
	0x116BA,
	0x116C0,
	0x116CA
};

static const UV UNI_TALE_invlist[] = {  /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1040,
	0x104A,
	0x1950,
	0x196E,
	0x1970,
	0x1975
};

static const UV UNI_TALU_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x19DE,
	0x19E0
};

static const UV UNI_TAMILSUP_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11FC0,
	0x12000
};

static const UV UNI_TAML_invlist[] = {  /* for all charsets */
	51,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0xB82,
	0xB84,
	0xB85,
	0xB8B,
	0xB8E,
	0xB91,
	0xB92,
	0xB96,
	0xB99,
	0xB9B,
	0xB9C,
	0xB9D,
	0xB9E,
	0xBA0,
	0xBA3,
	0xBA5,
	0xBA8,
	0xBAB,
	0xBAE,
	0xBBA,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD0,
	0xBD1,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBFB,
	0x1CDA,
	0x1CDB,
	0xA8F3,
	0xA8F4,
	0x11301,
	0x11302,
	0x11303,
	0x11304,
	0x1133B,
	0x1133D,
	0x11FC0,
	0x11FF2,
	0x11FFF,
	0x12000
};

static const UV UNI_TANG_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16FE0,
	0x16FE1,
	0x17000,
	0x187F8,
	0x18800,
	0x18B00,
	0x18D00,
	0x18D09
};

static const UV UNI_TANGUTCOMPONENTS_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x18800,
	0x18B00
};

static const UV UNI_TANGUTSUP_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x18D00,
	0x18D80
};

static const UV UNI_TAVT_invlist[] = {  /* for all charsets */
	5,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xAA80,
	0xAAC3,
	0xAADB,
	0xAAE0
};

static const UV UNI_TELU_invlist[] = {  /* for all charsets */
	35,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x951,
	0x953,
	0x964,
	0x966,
	0xC00,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3C,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC5D,
	0xC5E,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC77,
	0xC80,
	0x1CDA,
	0x1CDB,
	0x1CF2,
	0x1CF3
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_TERM_invlist[] = {  /* for ASCII/Latin1 */
	215,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x21,
	0x22,
	0x2C,
	0x2D,
	0x2E,
	0x2F,
	0x3A,
	0x3C,
	0x3F,
	0x40,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x589,
	0x58A,
	0x5C3,
	0x5C4,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x70B,
	0x70C,
	0x70D,
	0x7F8,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0xE5A,
	0xE5C,
	0xF08,
	0xF09,
	0xF0D,
	0xF13,
	0x104A,
	0x104C,
	0x1361,
	0x1369,
	0x166E,
	0x166F,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17DA,
	0x17DB,
	0x1802,
	0x1806,
	0x1808,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5D,
	0x1B60,
	0x1B7D,
	0x1B7F,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x2E41,
	0x2E42,
	0x2E4C,
	0x2E4D,
	0x2E4E,
	0x2E50,
	0x2E53,
	0x2E55,
	0x3001,
	0x3003,
	0xA4FE,
	0xA500,
	0xA60D,
	0xA610,
	0xA6F3,
	0xA6F8,
	0xA876,
	0xA878,
	0xA8CE,
	0xA8D0,
	0xA92F,
	0xA930,
	0xA9C7,
	0xA9CA,
	0xAA5D,
	0xAA60,
	0xAADF,
	0xAAE0,
	0xAAF0,
	0xAAF2,
	0xABEB,
	0xABEC,
	0xFE50,
	0xFE53,
	0xFE54,
	0xFE58,
	0xFF01,
	0xFF02,
	0xFF0C,
	0xFF0D,
	0xFF0E,
	0xFF0F,
	0xFF1A,
	0xFF1C,
	0xFF1F,
	0xFF20,
	0xFF61,
	0xFF62,
	0xFF64,
	0xFF65,
	0x1039F,
	0x103A0,
	0x103D0,
	0x103D1,
	0x10857,
	0x10858,
	0x1091F,
	0x10920,
	0x10A56,
	0x10A58,
	0x10AF0,
	0x10AF6,
	0x10B3A,
	0x10B40,
	0x10B99,
	0x10B9D,
	0x10F55,
	0x10F5A,
	0x10F86,
	0x10F8A,
	0x11047,
	0x1104E,
	0x110BE,
	0x110C2,
	0x11141,
	0x11144,
	0x111C5,
	0x111C7,
	0x111CD,
	0x111CE,
	0x111DE,
	0x111E0,
	0x11238,
	0x1123D,
	0x112A9,
	0x112AA,
	0x1144B,
	0x1144E,
	0x1145A,
	0x1145C,
	0x115C2,
	0x115C6,
	0x115C9,
	0x115D8,
	0x11641,
	0x11643,
	0x1173C,
	0x1173F,
	0x11944,
	0x11945,
	0x11946,
	0x11947,
	0x11A42,
	0x11A44,
	0x11A9B,
	0x11A9D,
	0x11AA1,
	0x11AA3,
	0x11C41,
	0x11C44,
	0x11C71,
	0x11C72,
	0x11EF7,
	0x11EF9,
	0x12470,
	0x12475,
	0x16A6E,
	0x16A70,
	0x16AF5,
	0x16AF6,
	0x16B37,
	0x16B3A,
	0x16B44,
	0x16B45,
	0x16E97,
	0x16E99,
	0x1BC9F,
	0x1BCA0,
	0x1DA87,
	0x1DA8B
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_TERM_invlist[] = {  /* for EBCDIC 1047 */
	217,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x4B,
	0x4C,
	0x5A,
	0x5B,
	0x5E,
	0x5F,
	0x6B,
	0x6C,
	0x6F,
	0x70,
	0x7A,
	0x7B,
	0x37E,
	0x37F,
	0x387,
	0x388,
	0x589,
	0x58A,
	0x5C3,
	0x5C4,
	0x60C,
	0x60D,
	0x61B,
	0x61C,
	0x61D,
	0x620,
	0x6D4,
	0x6D5,
	0x700,
	0x70B,
	0x70C,
	0x70D,
	0x7F8,
	0x7FA,
	0x830,
	0x83F,
	0x85E,
	0x85F,
	0x964,
	0x966,
	0xE5A,
	0xE5C,
	0xF08,
	0xF09,
	0xF0D,
	0xF13,
	0x104A,
	0x104C,
	0x1361,
	0x1369,
	0x166E,
	0x166F,
	0x16EB,
	0x16EE,
	0x1735,
	0x1737,
	0x17D4,
	0x17D7,
	0x17DA,
	0x17DB,
	0x1802,
	0x1806,
	0x1808,
	0x180A,
	0x1944,
	0x1946,
	0x1AA8,
	0x1AAC,
	0x1B5A,
	0x1B5C,
	0x1B5D,
	0x1B60,
	0x1B7D,
	0x1B7F,
	0x1C3B,
	0x1C40,
	0x1C7E,
	0x1C80,
	0x203C,
	0x203E,
	0x2047,
	0x204A,
	0x2E2E,
	0x2E2F,
	0x2E3C,
	0x2E3D,
	0x2E41,
	0x2E42,
	0x2E4C,
	0x2E4D,
	0x2E4E,
	0x2E50,
	0x2E53,
	0x2E55,
	0x3001,
	0x3003,
	0xA4FE,
	0xA500,
	0xA60D,
