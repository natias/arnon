changed, to ensure that the current value of C<$x> is seen each time.
Use C</o> if you want to avoid this.

=back

The bottom line is that using C</o> is almost never a good idea.

=item The empty pattern C<//>

If the I<PATTERN> evaluates to the empty string, the last
I<successfully> matched regular expression in the current dynamic
scope is used instead (see also L<perlvar/Scoping Rules of Regex Variables>).
In this case, only the C<g> and C<c> flags on the empty pattern are
honored; the other flags are taken from the original pattern. If no
match has previously succeeded, this will (silently) act instead as a
genuine empty pattern (which will always match). Using a user supplied
string as a pattern has the risk that if the string is empty that it
triggers the "last successful match" behavior, which can be very
confusing. In such cases you are recommended to replace C<m/$pattern/>
with C<m/(?:$pattern)/> to avoid this behavior.

The last successful pattern may be accessed as a variable via
C<${^LAST_SUCCESSFUL_PATTERN}>. Matching against it, or the empty
pattern should have the same effect, with the exception that when there
is no last successful pattern the empty pattern will silently match,
whereas using the C<${^LAST_SUCCESSFUL_PATTERN}> variable will produce
undefined warnings (if warnings are enabled). You can check
C<defined(${^LAST_SUCCESSFUL_PATTERN})> to test if there is a "last
successful match" in the current scope.

Note that it's possible to confuse Perl into thinking C<//> (the empty
regex) is really C<//> (the defined-or operator).  Perl is usually pretty
good about this, but some pathological cases might trigger this, such as
C<$x///> (is that S<C<($x) / (//)>> or S<C<$x // />>?) and S<C<print $fh //>>
(S<C<print $fh(//>> or S<C<print($fh //>>?).  In all of these examples, Perl
will assume you meant defined-or.  If you meant the empty regex, just
use parentheses or spaces to disambiguate, or even prefix the empty
regex with an C<m> (so C<//> becomes C<m//>).

=item Matching in list context

If the C</g> option is not used, C<m//> in list context returns a
list consisting of the subexpressions matched by the parentheses in the
pattern, that is, (C<$1>, C<$2>, C<$3>...)  (Note that here C<$1> etc. are
also set).  When there are no parentheses in the pattern, the return
value is the list C<(1)> for success.
With or without parentheses, an empty list is returned upon failure.

Examples:

 open(TTY, "+</dev/tty")
    || die "can't access /dev/tty: $!";

 <TTY> =~ /^y/i && foo();	# do foo if desired

 if (/Version: *([0-9.]*)/) { $version = $1; }

 next if m#^/usr/spool/uucp#;

 # poor man's grep
 $arg = shift;
 while (<>) {
    print if /$arg/;
 }
 if (($F1, $F2, $Etc) = ($foo =~ /^(\S+)\s+(\S+)\s*(.*)/))

This last example splits C<$foo> into the first two words and the
remainder of the line, and assigns those three fields to C<$F1>, C<$F2>, and
C<$Etc>.  The conditional is true if any variables were assigned; that is,
if the pattern matched.

The C</g> modifier specifies global pattern matching--that is,
matching as many times as possible within the string.  How it behaves
depends on the context.  In list context, it returns a list of the
substrings matched by any capturing parentheses in the regular
expression.  If there are no parentheses, it returns a list of all
the matched strings, as if there were parentheses around the whole
pattern.

In scalar context, each execution of C<m//g> finds the next match,
returning true if it matches, and false if there is no further match.
The position after the last match can be read or set using the C<pos()>
function; see L<perlfunc/pos>.  A failed match normally resets the
search position to the beginning of the string, but you can avoid that
by adding the C</c> modifier (for example, C<m//gc>).  Modifying the target
string also resets the search position.

=item C<\G I<assertion>>

You can intermix C<m//g> matches with C<m/\G.../g>, where C<\G> is a
zero-width assertion that matches the exact position where the
previous C<m//g>, if any, left off.  Without the C</g> modifier, the
C<\G> assertion still anchors at C<pos()> as it was at the start of
the operation (see L<perlfunc/pos>), but the match is of course only
attempted once.  Using C<\G> without C</g> on a target string that has
not previously had a C</g> match applied to it is the same as using
the C<\A> assertion to match the beginning of the string.  Note also
that, currently, C<\G> is only properly supported when anchored at the
very beginning of the pattern.

Examples:

    # list context
    ($one,$five,$fifteen) = (`uptime` =~ /(\d+\.\d+)/g);

    # scalar context
    local $/ = "";
    while ($paragraph = <>) {
	while ($paragraph =~ /\p{Ll}['")]*[.!?]+['")]*\s/g) {
	    $sentences++;
	}
    }
    say $sentences;

Here's another way to check for sentences in a paragraph:

 my $sentence_rx = qr{
    (?: (?<= ^ ) | (?<= \s ) )  # after start-of-string or
                                # whitespace
    \p{Lu}                      # capital letter
    .*?                         # a bunch of anything
    (?<= \S )                   # that ends in non-
                                # whitespace
    (?<! \b [DMS]r  )           # but isn't a common abbr.
    (?<! \b Mrs )
    (?<! \b Sra )
    (?<! \b St  )
    [.?!]                       # followed by a sentence
                                # ender
    (?= $ | \s )                # in front of end-of-string
                                # or whitespace
 }sx;
 local $/ = "";
 while (my $paragraph = <>) {
    say "NEW PARAGRAPH";
    my $count = 0;
    while ($paragraph =~ /($sentence_rx)/g) {
        printf "\tgot sentence %d: <%s>\n", ++$count, $1;
    }
 }

Here's how to use C<m//gc> with C<\G>:

    $_ = "ppooqppqq";
    while ($i++ < 2) {
        print "1: '";
        print $1 while /(o)/gc; print "', pos=", pos, "\n";
        print "2: '";
        print $1 if /\G(q)/gc;  print "', pos=", pos, "\n";
        print "3: '";
        print $1 while /(p)/gc; print "', pos=", pos, "\n";
    }
    print "Final: '$1', pos=",pos,"\n" if /\G(.)/;

The last example should print:

    1: 'oo', pos=4
    2: 'q', pos=5
    3: 'pp', pos=7
    1: '', pos=7
    2: 'q', pos=8
    3: '', pos=8
    Final: 'q', pos=8

Notice that the final match matched C<q> instead of C<p>, which a match
without the C<\G> anchor would have done.  Also note that the final match
did not update C<pos>.  C<pos> is only updated on a C</g> match.  If the
final match did indeed match C<p>, it's a good bet that you're running an
ancient (pre-5.6.0) version of Perl.

A useful idiom for C<lex>-like scanners is C</\G.../gc>.  You can
combine several regexps like this to process a string part-by-part,
doing different actions depending on which regexp matched.  Each
regexp tries to match where the previous one leaves off.

 $_ = <<'EOL';
    $url = URI::URL->new( "http://example.com/" );
    die if $url eq "xXx";
 EOL

 LOOP: {
     print(" digits"),       redo LOOP if /\G\d+\b[,.;]?\s*/gc;
     print(" lowercase"),    redo LOOP
                                    if /\G\p{Ll}+\b[,.;]?\s*/gc;
     print(" UPPERCASE"),    redo LOOP
                                    if /\G\p{Lu}+\b[,.;]?\s*/gc;
     print(" Capitalized"),  redo LOOP
                              if /\G\p{Lu}\p{Ll}+\b[,.;]?\s*/gc;
     print(" MiXeD"),        redo LOOP if /\G\pL+\b[,.;]?\s*/gc;
     print(" alphanumeric"), redo LOOP
                            if /\G[\p{Alpha}\pN]+\b[,.;]?\s*/gc;
     print(" line-noise"),   redo LOOP if /\G\W+/gc;
     print ". That's all!\n";
 }

Here is the output (split into several lines):

 line-noise lowercase line-noise UPPERCASE line-noise UPPERCASE
 line-noise lowercase line-noise lowercase line-noise lowercase
 lowercase line-noise lowercase lowercase line-noise lowercase
 lowercase line-noise MiXeD line-noise. That's all!

=item C<m?I<PATTERN>?msixpodualngc>
X<?> X<operator, match-once>

This is just like the C<m/I<PATTERN>/> search, except that it matches
only once between calls to the C<reset()> operator.  This is a useful
optimization when you want to see only the first occurrence of
something in each file of a set of files, for instance.  Only C<m??>
patterns local to the current package are reset.

    while (<>) {
	if (m?^$?) {
			    # blank line between header and body
	}
    } continue {
	reset if eof;	    # clear m?? status for next file
    }

Another example switched the first "latin1" encoding it finds
to "utf8" in a pod file:

    s//utf8/ if m? ^ =encoding \h+ \K latin1 ?x;

The match-once behavior is controlled by the match delimiter being
C<?>; with any other delimiter this is the normal C<m//> operator.

In the past, the leading C<m> in C<m?I<PATTERN>?> was optional, but omitting it
would produce a deprecation warning.  As of v5.22.0, omitting it produces a
syntax error.  If you encounter this construct in older code, you can just add
C<m>.

=item C<s/I<PATTERN>/I<REPLACEMENT>/msixpodualngcer>
X<s> X<substitute> X<substitution> X<replace> X<regexp, replace>
X<regexp, substitute> X</m> X</s> X</i> X</x> X</p> X</o> X</g> X</c> X</e> X</r>

Searches a string for a pattern, and if found, replaces that pattern
with the replacement text and returns the number of substitutions
made.  Otherwise it returns false (a value that is both an empty string (C<"">)
and numeric zero (C<0>) as described in L</Relational Operators>).

If the C</r> (non-destructive) option is used then it runs the
substitution on a copy of the string and instead of returning the
number of substitutions, it returns the copy whether or not a
substitution occurred.  The original string is never changed when
C</r> is used.  The copy will always be a plain string, even if the
input is an object or a tied variable.

If no string is specified via the C<=~> or C<!~> operator, the C<$_>
variable is searched and modified.  Unless the C</r> option is used,
the string specified must be a scalar variable, an array element, a
hash element, or an assignment to one of those; that is, some sort of
scalar lvalue.

If the delimiter chosen is a single quote, no variable interpolation is
done on either the I<PATTERN> or the I<REPLACEMENT>.  Otherwise, if the
I<PATTERN> contains a C<$> that looks like a variable rather than an
end-of-string test, the variable will be interpolated into the pattern
at run-time.  If you want the pattern compiled only once the first time
the variable is interpolated, use the C</o> option.  If the pattern
evaluates to the empty string, the last successfully executed regular
expression is used instead.  See L<perlre> for further explanation on these.

Options are as with C<m//> with the addition of the following replacement
specific options:

    e	Evaluate the right side as an expression.
    ee  Evaluate the right side as a string then eval the
        result.
    r   Return substitution and leave the original string
        untouched.

Any non-whitespace delimiter may replace the slashes.  Add space after
the C<s> when using a character allowed in identifiers.  If single quotes
are used, no interpretation is done on the replacement string (the C</e>
modifier overrides this, however).  Note that Perl treats backticks
as normal delimiters; the replacement text is not evaluated as a command.
If the I<PATTERN> is delimited by bracketing quotes, the I<REPLACEMENT> has
its own pair of quotes, which may or may not be bracketing quotes, for example,
C<s(foo)(bar)> or C<< s<foo>/bar/ >>.  A C</e> will cause the
replacement portion to be treated as a full-fledged Perl expression
and evaluated right then and there.  It is, however, syntax checked at
compile-time.  A second C<e> modifier will cause the replacement portion
to be C<eval>ed before being run as a Perl expression.

Examples:

    s/\bgreen\b/mauve/g;	      # don't change wintergreen

    $path =~ s|/usr/bin|/usr/local/bin|;

    s/Login: $foo/Login: $bar/; # run-time pattern

    ($foo = $bar) =~ s/this/that/;	# copy first, then
                                        # change
    ($foo = "$bar") =~ s/this/that/;	# convert to string,
                                        # copy, then change
    $foo = $bar =~ s/this/that/r;	# Same as above using /r
    $foo = $bar =~ s/this/that/r
                =~ s/that/the other/r;	# Chained substitutes
                                        # using /r
    @foo = map { s/this/that/r } @bar	# /r is very useful in
                                        # maps

    $count = ($paragraph =~ s/Mister\b/Mr./g);  # get change-cnt

    $_ = 'abc123xyz';
    s/\d+/$&*2/e;		# yields 'abc246xyz'
    s/\d+/sprintf("%5d",$&)/e;	# yields 'abc  246xyz'
    s/\w/$& x 2/eg;		# yields 'aabbcc  224466xxyyzz'

    s/%(.)/$percent{$1}/g;	# change percent escapes; no /e
    s/%(.)/$percent{$1} || $&/ge;	# expr now, so /e
    s/^=(\w+)/pod($1)/ge;	# use function call

    $_ = 'abc123xyz';
    $x = s/abc/def/r;           # $x is 'def123xyz' and
                                # $_ remains 'abc123xyz'.

    # expand variables in $_, but dynamics only, using
    # symbolic dereferencing
    s/\$(\w+)/${$1}/g;

    # Add one to the value of any numbers in the string
    s/(\d+)/1 + $1/eg;

    # Titlecase words in the last 30 characters only (presuming
    # that the substring doesn't start in the middle of a word)
    substr($str, -30) =~ s/\b(\p{Alpha})(\p{Alpha}*)\b/\u$1\L$2/g;

    # This will expand any embedded scalar variable
    # (including lexicals) in $_ : First $1 is interpolated
    # to the variable name, and then evaluated
    s/(\$\w+)/$1/eeg;

    # Delete (most) C comments.
    $program =~ s {
	/\*	# Match the opening delimiter.
	.*?	# Match a minimal number of characters.
	\*/	# Match the closing delimiter.
    } []gsx;

    s/^\s*(.*?)\s*$/$1/;	# trim whitespace in $_,
                                # expensively

    for ($variable) {		# trim whitespace in $variable,
                                # cheap
	s/^\s+//;
	s/\s+$//;
    }

    s/([^ ]*) *([^ ]*)/$2 $1/;	# reverse 1st two fields

    $foo !~ s/A/a/g;    # Lowercase all A's in $foo; return
                        # 0 if any were found and changed;
                        # otherwise return 1

Note the use of C<$> instead of C<\> in the last example.  Unlike
B<sed>, we use the \<I<digit>> form only in the left hand side.
Anywhere else it's $<I<digit>>.

Occasionally, you can't use just a C</g> to get all the changes
to occur that you might want.  Here are two common cases:

    # put commas in the right places in an integer
    1 while s/(\d)(\d\d\d)(?!\d)/$1,$2/g;

    # expand tabs to 8-column spacing
    1 while s/\t+/' ' x (length($&)*8 - length($`)%8)/e;

X</c>While C<s///> accepts the C</c> flag, it has no effect beyond
producing a warning if warnings are enabled.

=back

=head2 Quote-Like Operators
X<operator, quote-like>

=over 4

=item C<q/I<STRING>/>
X<q> X<quote, single> X<'> X<''>

=item C<'I<STRING>'>

A single-quoted, literal string.  A backslash represents a backslash
unless followed by the delimiter or another backslash, in which case
the delimiter or backslash is interpolated.

    $foo = q!I said, "You said, 'She said it.'"!;
    $bar = q('This is it.');
    $baz = '\n';		# a two-character string

=item C<qq/I<STRING>/>
X<qq> X<quote, double> X<"> X<"">

=item C<"I<STRING>">

A double-quoted, interpolated string.

    $_ .= qq
     (*** The previous line contains the naughty word "$1".\n)
		if /\b(tcl|java|python)\b/i;      # :-)
    $baz = "\n";		# a one-character string

=item C<qx/I<STRING>/>
X<qx> X<`> X<``> X<backtick>

=item C<`I<STRING>`>

A string which is (possibly) interpolated and then executed as a
system command, via F</bin/sh> or its equivalent if required.  Shell
wildcards, pipes, and redirections will be honored.  Similarly to
C<system>, if the string contains no shell metacharacters then it will
executed directly.  The collected standard output of the command is
returned; standard error is unaffected.  In scalar context, it comes
back as a single (potentially multi-line) string, or C<undef> if the
shell (or command) could not be started.  In list context, returns a
list of lines (however you've defined lines with C<$/> or
C<$INPUT_RECORD_SEPARATOR>), or an empty list if the shell (or command)
could not be started.

    print qx/date/; # prints "Sun Jan 28 06:16:19 CST 2024"

Because backticks do not affect standard error, use shell file descriptor
syntax (assuming the shell supports this) if you care to address this.
To capture a command's STDERR and STDOUT together:

    $output = `cmd 2>&1`;

To capture a command's STDOUT but discard its STDERR:

    $output = `cmd 2>/dev/null`;

To capture a command's STDERR but discard its STDOUT (ordering is
important here):

    $output = `cmd 2>&1 1>/dev/null`;

To exchange a command's STDOUT and STDERR in order to capture the STDERR
but leave its STDOUT to come out the old STDERR:

    $output = `cmd 3>&1 1>&2 2>&3 3>&-`;

To read both a command's STDOUT and its STDERR separately, it's easiest
to redirect them separately to files, and then read from those files
when the program is done:

    system("program args 1>program.stdout 2>program.stderr");

The STDIN filehandle used by the command is inherited from Perl's STDIN.
For example:

    open(SPLAT, "stuff")   || die "can't open stuff: $!";
    open(STDIN, "<&SPLAT") || die "can't dupe SPLAT: $!";
    print STDOUT `sort`;

will print the sorted contents of the file named F<"stuff">.

Using single-quote as a delimiter protects the command from Perl's
double-quote interpolation, passing it on to the shell instead:

    $perl_info  = qx(ps $$);            # that's Perl's $$
    $shell_info = qx'ps $$';            # that's the new shell's $$

How that string gets evaluated is entirely subject to the command
interpreter on your system.  On most platforms, you will have to protect
shell metacharacters if you want them treated literally.  This is in
practice difficult to do, as it's unclear how to escape which characters.
See L<perlsec> for a clean and safe example of a manual C<fork()> and C<exec()>
to emulate backticks safely.

On some platforms (notably DOS-like ones), the shell may not be
capable of dealing with multiline commands, so putting newlines in
the string may not get you what you want.  You may be able to evaluate
multiple commands in a single line by separating them with the command
separator character, if your shell supports that (for example, C<;> on
many Unix shells and C<&> on the Windows NT C<cmd> shell).

Perl will attempt to flush all files opened for
output before starting the child process, but this may not be supported
on some platforms (see L<perlport>).  To be safe, you may need to set
C<$|> (C<$AUTOFLUSH> in C<L<English>>) or call the C<autoflush()> method of
C<L<IO::Handle>> on any open handles.

Beware that some command shells may place restrictions on the length
of the command line.  You must ensure your strings don't exceed this
limit after any necessary interpolations.  See the platform-specific
release notes for more details about your particular environment.

Using this operator can lead to programs that are difficult to port,
because the shell commands called vary between systems, and may in
fact not be present at all.  As one example, the C<type> command under
the POSIX shell is very different from the C<type> command under DOS.
That doesn't mean you should go out of your way to avoid backticks
when they're the right way to get something done.  Perl was made to be
a glue language, and one of the things it glues together is commands.
Just understand what you're getting yourself into.

Like C<system>, backticks put the child process exit code in C<$?>.
If you'd like to manually inspect failure, you can check all possible
failure modes by inspecting C<$?> like this:

    if ($? == -1) {
        print "failed to execute: $!\n";
    }
    elsif ($? & 127) {
        printf "child died with signal %d, %s coredump\n",
            ($? & 127),  ($? & 128) ? 'with' : 'without';
    }
    else {
        printf "child exited with value %d\n", $? >> 8;
    }

Use the L<open> pragma to control the I/O layers used when reading the
output of the command, for example:

  use open IN => ":encoding(UTF-8)";
  my $x = `cmd-producing-utf-8`;

C<qx//> can also be called like a function with L<perlfunc/readpipe>.

See L</"I/O Operators"> for more discussion.

=item C<qw/I<STRING>/>
X<qw> X<quote, list> X<quote, words>

Evaluates to a list of the words extracted out of I<STRING>, using embedded
whitespace as the word delimiters.  It can be understood as being roughly
equivalent to:

    split(" ", q/STRING/);

the differences being that it only splits on ASCII whitespace,
generates a real list at compile time, and
in scalar context it returns the last element in the list.  So
this expression:

    qw(foo bar baz)

is semantically equivalent to the list:

    "foo", "bar", "baz"

Some frequently seen examples:

    use POSIX qw( setlocale localeconv )
    @EXPORT = qw( foo bar baz );

A common mistake is to try to separate the words with commas or to
put comments into a multi-line C<qw>-string.  For this reason, the
S<C<use warnings>> pragma and the B<-w> switch (that is, the C<$^W> variable)
produces warnings if the I<STRING> contains the C<","> or the C<"#"> character.

=item C<tr/I<SEARCHLIST>/I<REPLACEMENTLIST>/cdsr>
X<tr> X<y> X<transliterate> X</c> X</d> X</s>

=item C<y/I<SEARCHLIST>/I<REPLACEMENTLIST>/cdsr>

Transliterates all occurrences of the characters found (or not found
if the C</c> modifier is specified) in the search list with the
positionally corresponding character in the replacement list, possibly
deleting some, depending on the modifiers specified.  It returns the
number of characters replaced or deleted.  If no string is specified via
the C<=~> or C<!~> operator, the C<$_> string is transliterated.

For B<sed> devotees, C<y> is provided as a synonym for C<tr>.

If the C</r> (non-destructive) option is present, a new copy of the string
is made and its characters transliterated, and this copy is returned no
matter whether it was modified or not: the original string is always
left unchanged.  The new copy is always a plain string, even if the input
string is an object or a tied variable.

Unless the C</r> option is used, the string specified with C<=~> must be a
scalar variable, an array element, a hash element, or an assignment to one
of those; in other words, an lvalue.

The characters delimitting I<SEARCHLIST> and I<REPLACEMENTLIST>
can be any printable character, not just forward slashes.  If they
are single quotes (C<tr'I<SEARCHLIST>'I<REPLACEMENTLIST>'>), the only
interpolation is removal of C<\> from pairs of C<\\>; so hyphens are
interpreted literally rather than specifying a character range.

Otherwise, a character range may be specified with a hyphen, so
C<tr/A-J/0-9/> does the same replacement as
C<tr/ACEGIBDFHJ/0246813579/>.

If the I<SEARCHLIST> is delimited by bracketing quotes, the
I<REPLACEMENTLIST> must have its own pair of quotes, which may or may
not be bracketing quotes; for example, C<tr(aeiouy)(yuoiea)> or
C<tr[+\-*/]"ABCD">.  This final example shows a way to visually clarify
what is going on for people who are more familiar with regular
expression patterns than with C<tr>, and who may think forward slash
delimiters imply that C<tr> is more like a regular expression pattern
than it actually is.  (Another option might be to use C<tr[...][...]>.)

C<tr> isn't fully like bracketed character classes, just
(significantly) more like them than it is to full patterns.  For
example, characters appearing more than once in either list behave
differently here than in patterns, and C<tr> lists do not allow
backslashed character classes such as C<\d> or C<\pL>, nor variable
interpolation, so C<"$"> and C<"@"> are always treated as literals.

The allowed elements are literals plus C<\'> (meaning a single quote).
If the delimiters aren't single quotes, also allowed are any of the
escape sequences accepted in double-quoted strings.  Escape sequence
details are in L<the table near the beginning of this section|/Quote and
Quote-like Operators>.

A hyphen at the beginning or end, or preceded by a backslash is also
always considered a literal.  Precede a delimiter character with a
backslash to allow it.

The C<tr> operator is not equivalent to the C<L<tr(1)>> utility.
C<tr[a-z][A-Z]> will uppercase the 26 letters "a" through "z", but for
case changing not confined to ASCII, use L<C<lc>|perlfunc/lc>,
L<C<uc>|perlfunc/uc>, L<C<lcfirst>|perlfunc/lcfirst>,
L<C<ucfirst>|perlfunc/ucfirst> (all documented in L<perlfunc>), or the
L<substitution operator
C<sE<sol>I<PATTERN>E<sol>I<REPLACEMENT>E<sol>>|/sE<sol>PATTERNE<sol>REPLACEMENTE<sol>msixpodualngcer>
(with C<\U>, C<\u>, C<\L>, and C<\l> string-interpolation escapes in the
I<REPLACEMENT> portion).

Most ranges are unportable between character sets, but certain ones
signal Perl to do special handling to make them portable.  There are two
classes of portable ranges.  The first are any subsets of the ranges
C<A-Z>, C<a-z>, and C<0-9>, when expressed as literal characters.

  tr/h-k/H-K/

capitalizes the letters C<"h">, C<"i">, C<"j">, and C<"k"> and nothing
else, no matter what the platform's character set is.  In contrast, all
of

  tr/\x68-\x6B/\x48-\x4B/
  tr/h-\x6B/H-\x4B/
  tr/\x68-k/\x48-K/

do the same capitalizations as the previous example when run on ASCII
platforms, but something completely different on EBCDIC ones.

The second class of portable ranges is invoked when one or both of the
range's end points are expressed as C<\N{...}>

 $string =~ tr/\N{U+20}-\N{U+7E}//d;

removes from C<$string> all the platform's characters which are
equivalent to any of Unicode U+0020, U+0021, ... U+007D, U+007E.  This
is a portable range, and has the same effect on every platform it is
run on.  In this example, these are the ASCII
printable characters.  So after this is run, C<$string> has only
controls and characters which have no ASCII equivalents.

But, even for portable ranges, it is not generally obvious what is
included without having to look things up in the manual.  A sound
principle is to use only ranges that both begin from, and end at, either
ASCII alphabetics of equal case (C<b-e>, C<B-E>), or digits (C<1-4>).
Anything else is unclear (and unportable unless C<\N{...}> is used).  If
in doubt, spell out the character sets in full.

Options:

    c	Complement the SEARCHLIST.
    d	Delete found but unreplaced characters.
    r	Return the modified string and leave the original string
	untouched.
    s	Squash duplicate replaced characters.

If the C</d> modifier is specified, any characters specified by
I<SEARCHLIST>  not found in I<REPLACEMENTLIST> are deleted.  (Note that
this is slightly more flexible than the behavior of some B<tr> programs,
which delete anything they find in the I<SEARCHLIST>, period.)

If the C</s> modifier is specified, sequences of characters, all in a
row, that were transliterated to the same character are squashed down to
a single instance of that character.

 my $x = "aaabbbca";
 $x =~ tr/ab/dd/s;     # $x now is "dcd"

If the C</d> modifier is used, the I<REPLACEMENTLIST> is always interpreted
exactly as specified.  Otherwise, if the I<REPLACEMENTLIST> is shorter
than the I<SEARCHLIST>, the final character, if any, is replicated until
it is long enough.  There won't be a final character if and only if the
I<REPLACEMENTLIST> is empty, in which case I<REPLACEMENTLIST> is
copied from I<SEARCHLIST>.    An empty I<REPLACEMENTLIST> is useful
for counting characters in a class, or for squashing character sequences
in a class.

    tr/abcd//            tr/abcd/abcd/
    tr/abcd/AB/          tr/abcd/ABBB/
    tr/abcd//d           s/[abcd]//g
    tr/abcd/AB/d         (tr/ab/AB/ + s/[cd]//g)  - but run together

If the C</c> modifier is specified, the characters to be transliterated
are the ones NOT in I<SEARCHLIST>, that is, it is complemented.  If
C</d> and/or C</s> are also specified, they apply to the complemented
I<SEARCHLIST>.  Recall, that if I<REPLACEMENTLIST> is empty (except
under C</d>) a copy of I<SEARCHLIST> is used instead.  That copy is made
after complementing under C</c>.  I<SEARCHLIST> is sorted by code point
order after complementing, and any I<REPLACEMENTLIST>  is applied to
that sorted result.  This means that under C</c>, the order of the
characters specified in I<SEARCHLIST> is irrelevant.  This can
lead to different results on EBCDIC systems if I<REPLACEMENTLIST>
contains more than one character, hence it is generally non-portable to
use C</c> with such a I<REPLACEMENTLIST>.

Another way of describing the operation is this:
If C</c> is specified, the I<SEARCHLIST> is sorted by code point order,
then complemented.  If I<REPLACEMENTLIST> is empty and C</d> is not
specified, I<REPLACEMENTLIST> is replaced by a copy of I<SEARCHLIST> (as
modified under C</c>), and these potentially modified lists are used as
the basis for what follows.  Any character in the target string that
isn't in I<SEARCHLIST> is passed through unchanged.  Every other
character in the target string is replaced by the character in
I<REPLACEMENTLIST> that positionally corresponds to its mate in
I<SEARCHLIST>, except that under C</s>, the 2nd and following characters
are squeezed out in a sequence of characters in a row that all translate
to the same character.  If I<SEARCHLIST> is longer than
I<REPLACEMENTLIST>, characters in the target string that match a
character in I<SEARCHLIST> that doesn't have a correspondence in
I<REPLACEMENTLIST> are either deleted from the target string if C</d> is
specified; or replaced by the final character in I<REPLACEMENTLIST> if
C</d> isn't specified.

Some examples:

 $ARGV[1] =~ tr/A-Z/a-z/;   # canonicalize to lower case ASCII

 $cnt = tr/*/*/;            # count the stars in $_
 $cnt = tr/*//;             # same thing

 $cnt = $sky =~ tr/*/*/;    # count the stars in $sky
 $cnt = $sky =~ tr/*//;     # same thing

 $cnt = $sky =~ tr/*//c;    # count all the non-stars in $sky
 $cnt = $sky =~ tr/*/*/c;   # same, but transliterate each non-star
                            # into a star, leaving the already-stars
                            # alone.  Afterwards, everything in $sky
                            # is a star.

 $cnt = tr/0-9//;           # count the ASCII digits in $_

 tr/a-zA-Z//s;              # bookkeeper -> bokeper
 tr/o/o/s;                  # bookkeeper -> bokkeeper
 tr/oe/oe/s;                # bookkeeper -> bokkeper
 tr/oe//s;                  # bookkeeper -> bokkeper
 tr/oe/o/s;                 # bookkeeper -> bokkopor

 ($HOST = $host) =~ tr/a-z/A-Z/;
  $HOST = $host  =~ tr/a-z/A-Z/r; # same thing

 $HOST = $host =~ tr/a-z/A-Z/r   # chained with s///r
               =~ s/:/ -p/r;

 tr/a-zA-Z/ /cs;                 # change non-alphas to single space

 @stripped = map tr/a-zA-Z/ /csr, @original;
                                 # /r with map

 tr [\200-\377]
    [\000-\177];                 # wickedly delete 8th bit

 $foo !~ tr/A/a/    # transliterate all the A's in $foo to 'a',
                    # return 0 if any were found and changed.
                    # Otherwise return 1

If multiple transliterations are given for a character, only the
first one is used:

 tr/AAA/XYZ/

will transliterate any A to X.

Because the transliteration table is built at compile time, neither
the I<SEARCHLIST> nor the I<REPLACEMENTLIST> are subjected to double quote
interpolation.  That means that if you want to use variables, you
must use an C<eval()>:

 eval "tr/$oldlist/$newlist/";
 die $@ if $@;

 eval "tr/$oldlist/$newlist/, 1" or die $@;

=item C<< <<I<EOF> >>
X<here-doc> X<heredoc> X<here-document> X<<< << >>>

A line-oriented form of quoting is based on the shell "here-document"
syntax.  Following a C<< << >> you specify a string to terminate
the quoted material, and all lines following the current line down to
the terminating string are the value of the item.

Prefixing the terminating string with a C<~> specifies that you
want to use L</Indented Here-docs> (see below).

The terminating string may be either an identifier (a word), or some
quoted text.  An unquoted identifier works like double quotes.
There may not be a space between the C<< << >> and the identifier,
unless the identifier is explicitly quoted.  The terminating string
must appear by itself (unquoted and with no surrounding whitespace)
on the terminating line.

If the terminating string is quoted, the type of quotes used determine
the treatment of the text.

=over 4

=item Double Quotes

Double quotes indicate that the text will be interpolated using exactly
the same rules as normal double quoted strings.

       print <<EOF;
    The price is $Price.
    EOF

       print << "EOF"; # same as above
    The price is $Price.
    EOF


=item Single Quotes

Single quotes indicate the text is to be treated literally with no
interpolation of its content.  This is similar to single quoted
strings except that backslashes have no special meaning, with C<\\>
being treated as two backslashes and not one as they would in every
other quoting construct.

Just as in the shell, a backslashed bareword following the C<<< << >>>
means the same thing as a single-quoted string does:

	$cost = <<'VISTA';  # hasta la ...
    That'll be $10 please, ma'am.
    VISTA

	$cost = <<\VISTA;   # Same thing!
    That'll be $10 please, ma'am.
    VISTA

This is the only form of quoting in perl where there is no need
to worry about escaping content, something that code generators
can and do make good use of.

=item Backticks

The content of the here doc is treated just as it would be if the
string were embedded in backticks.  Thus the content is interpolated
as though it were double quoted and then executed via the shell, with
the results of the execution returned.

       print << `EOC`; # execute command and get results
    echo hi there
    EOC

=back

=over 4

=item Indented Here-docs

The here-doc modifier C<~> allows you to indent your here-docs to make
the code more readable:

    if ($some_var) {
      print <<~EOF;
        This is a here-doc
        EOF
    }

This will print...

    This is a here-doc

...with no leading whitespace.

The line containing the delimiter that marks the end of the here-doc
determines the indentation template for the whole thing.  Compilation
croaks if any non-empty line inside the here-doc does not begin with the
precise indentation of the terminating line.  (An empty line consists of
the single character "\n".)  For example, suppose the terminating line
begins with a tab character followed by 4 space characters.  Every
non-empty line in the here-doc must begin with a tab followed by 4
spaces.  They are stripped from each line, and any leading white space
remaining on a line serves as the indentation for that line.  Currently,
only the TAB and SPACE characters are treated as whitespace for this
purpose.  Tabs and spaces may be mixed, but are matched exactly; tabs
remain tabs and are not expanded.

Additional beginning whitespace (beyond what preceded the
delimiter) will be preserved:

    print <<~EOF;
      This text is not indented
        This text is indented with two spaces
      		This text is indented with two tabs
      EOF

Finally, the modifier may be used with all of the forms
mentioned above:

    <<~\EOF;
    <<~'EOF'
    <<~"EOF"
    <<~`EOF`

And whitespace may be used between the C<~> and quoted delimiters:

    <<~ 'EOF'; # ... "EOF", `EOF`

=back

It is possible to stack multiple here-docs in a row:

       print <<"foo", <<"bar"; # you can stack them
    I said foo.
    foo
    I said bar.
    bar

       myfunc(<< "THIS", 23, <<'THAT');
    Here's a line
    or two.
    THIS
    and here's another.
    THAT

Just don't forget that you have to put a semicolon on the end
to finish the statement, as Perl doesn't know you're not going to
try to do this:

       print <<ABC
    179231
    ABC
       + 20;

If you want to remove the line terminator from your here-docs,
use C<chomp()>.

    chomp($string = <<'END');
    This is a string.
    END

If you want your here-docs to be indented with the rest of the code,
use the C<<< <<~FOO >>> construct described under L</Indented Here-docs>:

    $quote = <<~'FINIS';
       The Road goes ever on and on,
       down from the door where it began.
       FINIS

If you use a here-doc within a delimited construct, such as in C<s///eg>,
the quoted material must still come on the line following the
C<<< <<FOO >>> marker, which means it may be inside the delimited
construct:

    s/this/<<E . 'that'
    the other
    E
     . 'more '/eg;

It works this way as of Perl 5.18.  Historically, it was inconsistent, and
you would have to write

    s/this/<<E . 'that'
     . 'more '/eg;
    the other
    E

outside of string evals.

Additionally, quoting rules for the end-of-string identifier are
unrelated to Perl's quoting rules.  C<q()>, C<qq()>, and the like are not
supported in place of C<''> and C<"">, and the only interpolation is for
backslashing the quoting character:

    print << "abc\"def";
    testing...
    abc"def

Finally, quoted strings cannot span multiple lines.  The general rule is
that the identifier must be a string literal.  Stick with that, and you
should be safe.

=back

=head2 Gory details of parsing quoted constructs
X<quote, gory details>

When presented with something that might have several different
interpretations, Perl uses the B<DWIM> (that's "Do What I Mean")
principle to pick the most probable interpretation.  This strategy
is so successful that Perl programmers often do not suspect the
ambivalence of what they write.  But from time to time, Perl's
notions differ substantially from what the author honestly meant.

This section hopes to clarify how Perl handles quoted constructs.
Although the most common reason to learn this is to unravel labyrinthine
regular expressions, because the initial steps of parsing are the
