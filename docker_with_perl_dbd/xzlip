Found in file cv.h

=over 4

=item C<CvWEAKOUTSIDE>
X<CvWEAKOUTSIDE>

Each CV has a pointer, C<CvOUTSIDE()>, to its lexically enclosing
CV (if any).  Because pointers to anonymous sub prototypes are
stored in C<&> pad slots, it is a possible to get a circular reference,
with the parent pointing to the child and vice-versa.  To avoid the
ensuing memory leak, we do not increment the reference count of the CV
pointed to by C<CvOUTSIDE> in the I<one specific instance> that the parent
has a C<&> pad slot pointing back to us.  In this case, we set the
C<CvWEAKOUTSIDE> flag in the child.  This allows us to determine under what
circumstances we should decrement the refcount of the parent when freeing
the child.

There is a further complication with non-closure anonymous subs (i.e. those
that do not refer to any lexicals outside that sub).  In this case, the
anonymous prototype is shared rather than being cloned.  This has the
consequence that the parent may be freed while there are still active
children, I<e.g.>,

    BEGIN { $a = sub { eval '$x' } }

In this case, the BEGIN is freed immediately after execution since there
are no active references to it: the anon sub prototype has
C<CvWEAKOUTSIDE> set since it's not a closure, and $a points to the same
CV, so it doesn't contribute to BEGIN's refcount either.  When $a is
executed, the C<eval '$x'> causes the chain of C<CvOUTSIDE>s to be followed,
and the freed BEGIN is accessed.

To avoid this, whenever a CV and its associated pad is freed, any
C<&> entries in the pad are explicitly removed from the pad, and if the
refcount of the pointed-to anon sub is still positive, then that
child's C<CvOUTSIDE> is set to point to its grandparent.  This will only
occur in the single specific case of a non-closure anon prototype
having one or more active references (such as C<$a> above).

One other thing to consider is that a CV may be merely undefined
rather than freed, eg C<undef &foo>.  In this case, its refcount may
not have reached zero, but we still delete its pad and its C<CvROOT> etc.
Since various children may still have their C<CvOUTSIDE> pointing at this
undefined CV, we keep its own C<CvOUTSIDE> for the time being, so that
the chain of lexical scopes is unbroken.  For example, the following
should print 123:

    my $x = 123;
    sub tmp { sub { eval '$x' } }
    my $a = tmp();
    undef &tmp;
    print  $a->();

=over 3

 bool  CvWEAKOUTSIDE(CV *cv)

=back

=back

=for hackers
Found in file cv.h

=over 4

=item C<docatch>
X<docatch>

Interpose, for the current op and RUNOPS loop,

    - a new JMPENV stack catch frame, and
    - an inner RUNOPS loop to run all the remaining ops following the
      current PL_op.

Then handle any exceptions raised while in that loop.
For a caught eval at this level, re-enter the loop with the specified
restart op (i.e. the op following the OP_LEAVETRY etc); otherwise re-throw
the exception.

docatch() is intended to be used like this:

    PP(pp_entertry)
    {
        if (CATCH_GET)
            return docatch(Perl_pp_entertry);

        ... rest of function ...
        return PL_op->op_next;
    }

If a new catch frame isn't needed, the op behaves normally. Otherwise it
calls docatch(), which recursively calls pp_entertry(), this time with
CATCH_GET() false, so the rest of the body of the entertry is run. Then
docatch() calls CALLRUNOPS() which executes all the ops following the
entertry. When the loop finally finishes, control returns to docatch(),
which pops the JMPENV and returns to the parent pp_entertry(), which
itself immediately returns. Note that *all* subsequent ops are run within
the inner RUNOPS loop, not just the body of the eval. For example, in

    sub TIEARRAY { eval {1}; my $x }
    tie @a, "main";

at the point the 'my' is executed, the C stack will look something like:

    #10 main()
    #9  perl_run()              # JMPENV_PUSH level 1 here
    #8  S_run_body()
    #7  Perl_runops_standard()  # main RUNOPS loop
    #6  Perl_pp_tie()
    #5  Perl_call_sv()
    #4  Perl_runops_standard()  # unguarded RUNOPS loop: no new JMPENV
    #3  Perl_pp_entertry()
    #2  S_docatch()             # JMPENV_PUSH level 2 here
    #1  Perl_runops_standard()  # docatch()'s RUNOPs loop
    #0  Perl_pp_padsv()

Basically, any section of the perl core which starts a RUNOPS loop may
make a promise that it will catch any exceptions and restart the loop if
necessary. If it's not prepared to do that (like call_sv() isn't), then
it sets CATCH_GET() to true, so that any later eval-like code knows to
set up a new handler and loop (via docatch()).

See L<perlinterp/"Exception handing"> for further details.

=over 3

 OP *  docatch(Perl_ppaddr_t firstpp)

=back

=back

=for hackers
Found in file pp_ctl.c

=head1 Debugging

=over 4

=item C<comma_aDEPTH>
X<comma_aDEPTH>

Some functions when compiled under DEBUGGING take an extra final argument named
C<depth>, indicating the C stack depth.  This argument is omitted otherwise.
This macro expands to either S<C<, depth>> under DEBUGGING, or to nothing at
all when not under DEBUGGING, reducing the number of C<#ifdef>'s in the code.

The program is responsible for maintaining the correct value for C<depth>.

=over 3

   comma_aDEPTH

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<comma_pDEPTH>
X<comma_pDEPTH>

This is used in the prototype declarations for functions that take a L</C<comma_aDEPTH>>
final parameter, much like L<C<pTHX_>|perlguts/Background and MULTIPLICITY>
is used in functions that take a thread context initial parameter.

=back

=for hackers
Found in file perl.h

=over 4

=item C<debop>
X<debop>

Implements B<-Dt> perl command line option on OP C<o>.

=over 3

 I32  debop(const OP *o)

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<debprof>
X<debprof>

Called to indicate that C<o> was executed, for profiling purposes under the
C<-DP> command line option.

=over 3

 void  debprof(const OP *o)

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<debprofdump>
X<debprofdump>

Dumps the contents of the data collected by the C<-DP> perl command line
option.

=over 3

 void  debprofdump()

=back

=back

=for hackers
Found in file dump.c

=over 4

=item C<debug_aDEPTH>
X<debug_aDEPTH>

Same as L</C<comma_aDEPTH>> but with no leading argument. Intended for functions with
no normal arguments, and used by L</C<comma_aDEPTH>> itself.

=over 3

   debug_aDEPTH

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<debug_pDEPTH>
X<debug_pDEPTH>

Same as L</C<comma_pDEPTH>> but with no leading argument. Intended for functions with
no normal arguments, and used by L</C<comma_pDEPTH>> itself.

=over 3

   debug_pDEPTH

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<free_c_backtrace>
X<free_c_backtrace>

Deallocates a backtrace received from get_c_backtrace.

=over 3

 void  free_c_backtrace(Perl_c_backtrace *bt)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<get_c_backtrace>
X<get_c_backtrace>

Collects the backtrace (aka "stacktrace") into a single linear
malloced buffer, which the caller B<must> C<Perl_free_c_backtrace()>.

Scans the frames back by S<C<depth + skip>>, then drops the C<skip> innermost,
returning at most C<depth> frames.

=over 3

 Perl_c_backtrace *  get_c_backtrace(int max_depth, int skip)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<PL_DBsingle>
X<PL_DBsingle>

When Perl is run in debugging mode, with the B<-d> switch, this SV is a
boolean which indicates whether subs are being single-stepped.
Single-stepping is automatically turned on after every step.  This is the C
variable which corresponds to Perl's $DB::single variable.  See
C<L</PL_DBsub>>.

On threaded perls, each thread has an independent copy of this variable;
each initialized at creation time with the current value of the creating
thread's copy.

=over 3

 SV *  PL_DBsingle

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<PL_DBsub>
X<PL_DBsub>

When Perl is run in debugging mode, with the B<-d> switch, this GV contains
the SV which holds the name of the sub being debugged.  This is the C
variable which corresponds to Perl's $DB::sub variable.  See
C<L</PL_DBsingle>>.

On threaded perls, each thread has an independent copy of this variable;
each initialized at creation time with the current value of the creating
thread's copy.

=over 3

 GV *  PL_DBsub

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<PL_DBtrace>
X<PL_DBtrace>

Trace variable used when Perl is run in debugging mode, with the B<-d>
switch.  This is the C variable which corresponds to Perl's $DB::trace
variable.  See C<L</PL_DBsingle>>.

On threaded perls, each thread has an independent copy of this variable;
each initialized at creation time with the current value of the creating
thread's copy.

=over 3

 SV *  PL_DBtrace

=back

=back

=for hackers
Found in file intrpvar.h

=over 4

=item C<runops_debug>

Described in L<perlguts>.

=over 3

 int  runops_debug()

=back

=back

=for hackers
Found in file pod/perlguts.pod

=over 4

=item C<runops_standard>

Described in L<perlguts>.

=over 3

 int  runops_standard()

=back

=back

=for hackers
Found in file pod/perlguts.pod

=head1 Display functions
X<PERL_PV_PRETTY_DUMP>X<PERL_PV_PRETTY_NOCLEAR>X<PERL_PV_PRETTY_REGPROP>

=over 4

=item C<sv_peek>
X<sv_peek>

Implements C<SvPEEK>

=over 3

 char *  sv_peek(SV *sv)

=back

=back

=for hackers
Found in file dump.c

=head1 Embedding, Threads, and Interpreter Cloning

=over 4

=item C<cv_dump>
X<cv_dump>

dump the contents of a CV

=over 3

 void  cv_dump(const CV *cv, const char *title)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<cv_forget_slab>
X<cv_forget_slab>

When a CV has a reference count on its slab (C<CvSLABBED>), it is responsible
for making sure it is freed.  (Hence, no two CVs should ever have a
reference count on the same slab.)  The CV only needs to reference the slab
during compilation.  Once it is compiled and C<CvROOT> attached, it has
finished its job, so it can forget the slab.

=over 3

 void  cv_forget_slab(CV *cv)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<do_dump_pad>
X<do_dump_pad>

Dump the contents of a padlist

=over 3

 void  do_dump_pad(I32 level, PerlIO *file, PADLIST *padlist,
                   int full)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<get_context>
X<get_context>

Implements L<perlapi/C<PERL_GET_CONTEXT>>, which you should use instead.

=over 3

 void *  get_context()

=back

=back

=for hackers
Found in file inline.h

=over 4

=item C<pad_alloc_name>
X<pad_alloc_name>

Allocates a place in the currently-compiling
pad (via L<perlapi/pad_alloc>) and
then stores a name for that entry.  C<name> is adopted and
becomes the name entry; it must already contain the name
string.  C<typestash> and C<ourstash> and the C<padadd_STATE>
flag gets added to C<name>.
None of the other processing of L<perlapi/pad_add_name_pvn>
is done.  Returns the offset of the allocated pad slot.

=over 3

 PADOFFSET  pad_alloc_name(PADNAME *name, U32 flags, HV *typestash,
                           HV *ourstash)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_block_start>
X<pad_block_start>

Update the pad compilation state variables on entry to a new block.

=over 3

 void  pad_block_start(int full)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_check_dup>
X<pad_check_dup>

Check for duplicate declarations: report any of:

     * a 'my' in the current scope with the same name;
     * an 'our' (anywhere in the pad) with the same name and the
       same stash as 'ourstash'

C<is_our> indicates that the name to check is an C<"our"> declaration.

=over 3

 void  pad_check_dup(PADNAME *name, U32 flags, const HV *ourstash)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_findlex>
X<pad_findlex>

Find a named lexical anywhere in a chain of nested pads.  Add fake entries
in the inner pads if it's found in an outer one.

Returns the offset in the bottom pad of the lex or the fake lex.
C<cv> is the CV in which to start the search, and seq is the current C<cop_seq>
to match against.  If C<warn> is true, print appropriate warnings.  The C<out_>*
vars return values, and so are pointers to where the returned values
should be stored.  C<out_capture>, if non-null, requests that the innermost
instance of the lexical is captured; C<out_name> is set to the innermost
matched pad name or fake pad name; C<out_flags> returns the flags normally
associated with the C<PARENT_FAKELEX_FLAGS> field of a fake pad name.

Note that C<pad_findlex()> is recursive; it recurses up the chain of CVs,
then comes back down, adding fake entries
as it goes.  It has to be this way
because fake names in anon prototypes have to store in C<xpadn_low> the
index into the parent pad.

=over 3

 PADOFFSET  pad_findlex(const char *namepv, STRLEN namelen,
                        U32 flags, const CV *cv, U32 seq, int warn,
                        SV **out_capture, PADNAME **out_name,
                        int *out_flags)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_fixup_inner_anons>
X<pad_fixup_inner_anons>

For any anon CVs in the pad, change C<CvOUTSIDE> of that CV from
C<old_cv> to C<new_cv> if necessary.  Needed when a newly-compiled CV has to be
moved to a pre-existing CV struct.

=over 3

 void  pad_fixup_inner_anons(PADLIST *padlist, CV *old_cv,
                             CV *new_cv)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_free>
X<pad_free>

Free the SV at offset po in the current pad.

=over 3

 void  pad_free(PADOFFSET po)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_leavemy>
X<pad_leavemy>

Cleanup at end of scope during compilation: set the max seq number for
lexicals in this scope and warn of any lexicals that never got introduced.

=over 3

 OP *  pad_leavemy()

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<padlist_dup>
X<padlist_dup>

Duplicates a pad.

=over 3

 PADLIST *  padlist_dup(PADLIST *srcpad, CLONE_PARAMS *param)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<padname_dup>
X<padname_dup>

Duplicates a pad name.

=over 3

 PADNAME *  padname_dup(PADNAME *src, CLONE_PARAMS *param)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<padnamelist_dup>
X<padnamelist_dup>

Duplicates a pad name list.

=over 3

 PADNAMELIST *  padnamelist_dup(PADNAMELIST *srcpad,
                                CLONE_PARAMS *param)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_push>
X<pad_push>

Push a new pad frame onto the padlist, unless there's already a pad at
this depth, in which case don't bother creating a new one.  Then give
the new pad an C<@_> in slot zero.

=over 3

 void  pad_push(PADLIST *padlist, int depth)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_reset>
X<pad_reset>

Mark all the current temporaries for reuse

=over 3

 void  pad_reset()

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_setsv>
X<pad_setsv>

Set the value at offset C<po> in the current (compiling or executing) pad.
Use the macro C<PAD_SETSV()> rather than calling this function directly.

=over 3

 void  pad_setsv(PADOFFSET po, SV *sv)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_sv>
X<pad_sv>

Get the value at offset C<po> in the current (compiling or executing) pad.
Use macro C<PAD_SV> instead of calling this function directly.

=over 3

 SV *  pad_sv(PADOFFSET po)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<pad_swipe>
X<pad_swipe>

Abandon the tmp in the current pad at offset C<po> and replace with a
new one.

=over 3

 void  pad_swipe(PADOFFSET po, bool refadjust)

=back

=back

=for hackers
Found in file pad.c

=over 4

=item C<set_context>
X<set_context>

Implements L<perlapi/C<PERL_SET_CONTEXT>>, which you should use instead.

=over 3

 void  set_context(void *t)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<si_dup>
X<si_dup>

Duplicate a stack info structure, returning a pointer to the cloned object.

=over 3

 PERL_SI *  si_dup(PERL_SI *si, CLONE_PARAMS *param)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<ss_dup>
X<ss_dup>

Duplicate the save stack, returning a pointer to the cloned object.

=over 3

 ANY *  ss_dup(PerlInterpreter *proto_perl, CLONE_PARAMS *param)

=back

=back

=for hackers
Found in file sv.c

=head1 Errno

=over 4

=item C<dSAVEDERRNO>
X<dSAVEDERRNO>

Declare variables needed to save C<errno> and any operating system
specific error number.

=over 3

 void  dSAVEDERRNO

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<dSAVE_ERRNO>
X<dSAVE_ERRNO>

Declare variables needed to save C<errno> and any operating system
specific error number, and save them for optional later restoration
by C<RESTORE_ERRNO>.

=over 3

 void  dSAVE_ERRNO

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<RESTORE_ERRNO>
X<RESTORE_ERRNO>

Restore C<errno> and any operating system specific error number that
was saved by C<dSAVE_ERRNO> or C<RESTORE_ERRNO>.

=over 3

 void  RESTORE_ERRNO

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<SAVE_ERRNO>
X<SAVE_ERRNO>

Save C<errno> and any operating system specific error number for
optional later restoration by C<RESTORE_ERRNO>.  Requires
C<dSAVEDERRNO> or C<dSAVE_ERRNO> in scope.

=over 3

 void  SAVE_ERRNO

=back

=back

=for hackers
Found in file perl.h

=over 4

=item C<SETERRNO>
X<SETERRNO>

Set C<errno>, and on VMS set C<vaxc$errno>.

=over 3

 void  SETERRNO(int errcode, int vmserrcode)

=back

=back

=for hackers
Found in file perl.h

=head1 Exception Handling (simple) Macros

There are currently no internal API items in Exception Handling (simple) Macros

=head1 Filesystem configuration values

There are currently no internal API items in Filesystem configuration values

=head1 Floating point

There are currently no internal API items in Floating point

=head1 General Configuration

There are currently no internal API items in General Configuration

