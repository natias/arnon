A new warning category C<illegalproto> allows finer-grained control of
warnings around function prototypes.

The two warnings:

=over

=item C<Illegal character in prototype for %s : %s>

=item C<Prototype after '%c' for %s : %s>

=back

have been moved from the C<syntax> top-level warnings category into a new
first-level category, C<illegalproto>. These two warnings are currently
the only ones emitted during parsing of an invalid/illegal prototype,
so one can now use

  no warnings 'illegalproto';

to suppress only those, but not other syntax-related warnings. Warnings
where prototypes are changed, ignored, or not met are still in the
C<prototype> category as before.

=item *

C<Deep recursion on subroutine "%s">

It is now possible to change the depth threshold for this warning from the
default of 100, by recompiling the F<perl> binary, setting the C
pre-processor macro C<PERL_SUB_DEPTH_WARN> to the desired value.

=item *

C<Illegal character in prototype> warning is now more precise
when reporting illegal characters after _

=item *

mro merging error messages are now very similar to those produced by
L<Algorithm::C3>.

=item *

Amelioration of the error message "Unrecognized character %s in column %d"

Changes the error message to "Unrecognized character %s; marked by E<lt>--
HERE after %sE<lt>-- HERE near column %d". This should make it a little
simpler to spot and correct the suspicious character.

=item *

Perl now explicitly points to C<$.> when it causes an uninitialized
warning for ranges in scalar context.

=item *

C<split> now warns when called in void context.

=item *

C<printf>-style functions called with too few arguments will now issue the
warning C<"Missing argument in %s"> [perl #71000]

=item *

Perl now properly returns a syntax error instead of segfaulting
if C<each>, C<keys>, or C<values> is used without an argument.

=item *

C<tell()> now fails properly if called without an argument and when no
previous file was read.

C<tell()> now returns C<-1>, and sets errno to C<EBADF>, thus restoring
the 5.8.x behaviour.

=item *

C<overload> no longer implicitly unsets fallback on repeated 'use
overload' lines.

=item *

POSIX::strftime() can now handle Unicode characters in the format string.

=item *

The C<syntax> category was removed from 5 warnings that should only be in
C<deprecated>.

=item *

Three fatal C<pack>/C<unpack> error messages have been normalized to
C<panic: %s>

=item *

C<Unicode character is illegal> has been rephrased to be more accurate

It now reads C<Unicode non-character is illegal in interchange> and the
perldiag documentation has been expanded a bit.

=item *

Currently, all but the first of the several characters that the
C<charnames> handler may return are discarded when used in a regular
expression pattern bracketed character class. If this happens then the
warning C<Using just the first character returned by \N{} in character
class> will be issued.

=item *

The warning C<Missing right brace on \N{} or unescaped left brace after
\N.  Assuming the latter> will be issued if Perl encounters a C<\N{>
but doesn't find a matching C<}>. In this case Perl doesn't know if it
was mistakenly omitted, or if "match non-newline" followed by "match
a C<{>" was desired.  It assumes the latter because that is actually a
valid interpretation as written, unlike the other case.  If you meant
the former, you need to add the matching right brace.  If you did mean
the latter, you can silence this warning by writing instead C<\N\{>.

=item *

C<gmtime> and C<localtime> called with numbers smaller than they can
reliably handle will now issue the warnings C<gmtime(%.0f) too small>
and C<localtime(%.0f) too small>.

=back

The following diagnostic messages have been removed:

=over 4

=item *

C<Runaway format>

=item *

C<Can't locate package %s for the parents of %s>

In general this warning it only got produced in
conjunction with other warnings, and removing it allowed an ISA lookup
optimisation to be added.

=item *

C<v-string in use/require is non-portable>

=back

=head1 Utility Changes

=over 4

=item *

F<h2ph> now looks in C<include-fixed> too, which is a recent addition
to gcc's search path.

=item *

F<h2xs> no longer incorrectly treats enum values like macros.
It also now handles C++ style comments (C<//>) properly in enums.

=item *

F<perl5db.pl> now supports C<LVALUE> subroutines.  Additionally, the
debugger now correctly handles proxy constant subroutines, and
subroutine stubs.

=item *

F<perlbug> now uses C<%Module::CoreList::bug_tracker> to print out
upstream bug tracker URLs.  If a user identifies a particular module
as the topic of their bug report and we're able to divine the URL for
its upstream bug tracker, perlbug now provide a message to the user
explaining that the core copies the CPAN version directly, and provide
the URL for reporting the bug directly to the upstream author.

F<perlbug> no longer reports "Message sent" when it hasn't actually sent
the message

=item *

F<perlthanks> is a new utility for sending non-bug-reports to the
authors and maintainers of Perl. Getting nothing but bug reports can
become a bit demoralising. If Perl 5.12 works well for you, please try
out F<perlthanks>. It will make the developers smile.

=item *

Perl's developers have fixed bugs in F<a2p> having to do with the
C<match()> operator in list context.  Additionally, F<a2p> no longer
generates code that uses the C<$[> variable.

=back

=head1 Selected Bug Fixes

=over 4

=item *

U+0FFFF is now a legal character in regular expressions.

=item *

pp_qr now always returns a new regexp SV. Resolves RT #69852.

Instead of returning a(nother) reference to the (pre-compiled) regexp
in the optree, use reg_temp_copy() to create a copy of it, and return a
reference to that. This resolves issues about Regexp::DESTROY not being
called in a timely fashion (the original bug tracked by RT #69852), as
well as bugs related to blessing regexps, and of assigning to regexps,
as described in correspondence added to the ticket.

It transpires that we also need to undo the SvPVX() sharing when ithreads
cloning a Regexp SV, because mother_re is set to NULL, instead of a
cloned copy of the mother_re. This change might fix bugs with regexps
and threads in certain other situations, but as yet neither tests nor
bug reports have indicated any problems, so it might not actually be an
edge case that it's possible to reach.

=item *

Several compilation errors and segfaults when perl was built with C<-Dmad>
were fixed.

=item *

Fixes for lexer API changes in 5.11.2 which broke NYTProf's savesrc option.

=item *

C<-t> should only return TRUE for file handles connected to a TTY

The Microsoft C version of C<isatty()> returns TRUE for all character mode
devices, including the F</dev/null>-style "nul" device and printers like
"lpt1".

=item *

Fixed a regression caused by commit fafafbaf which caused a panic during
parameter passing [perl #70171]

=item *

On systems which in-place edits without backup files, -i'*' now works as
the documentation says it does [perl #70802]

=item *

Saving and restoring magic flags no longer loses readonly flag.

=item *

The malformed syntax C<grep EXPR LIST> (note the missing comma) no longer
causes abrupt and total failure.

=item *

Regular expressions compiled with C<qr{}> literals properly set C<$'> when
matching again.

=item *

Using named subroutines with C<sort> should no longer lead to bus errors
[perl #71076]

=item *

Numerous bugfixes catch small issues caused by the recently-added Lexer API.

=item *

Smart match against C<@_> sometimes gave false negatives. [perl #71078]

=item *

C<$@> may now be assigned a read-only value (without error or busting
the stack).

=item *

C<sort> called recursively from within an active comparison subroutine no
longer causes a bus error if run multiple times. [perl #71076]

=item *

Tie::Hash::NamedCapture::* will not abort if passed bad input (RT #71828)

=item *

@_ and $_ no longer leak under threads (RT #34342 and #41138, also
#70602, #70974)

=item *

C<-I> on shebang line now adds directories in front of @INC
as documented, and as does C<-I> when specified on the command-line.

=item *

C<kill> is now fatal when called on non-numeric process identifiers.
Previously, an C<undef> process identifier would be interpreted as a
request to kill process 0, which would terminate the current process
group on POSIX systems. Since process identifiers are always integers,
killing a non-numeric process is now fatal.

=item *

5.10.0 inadvertently disabled an optimisation, which caused a measurable
performance drop in list assignment, such as is often used to assign
function parameters from C<@_>. The optimisation has been re-instated, and
the performance regression fixed. (This fix is also present in 5.10.1)

=item *

Fixed memory leak on C<while (1) { map 1, 1 }> [RT #53038].

=item *

Some potential coredumps in PerlIO fixed [RT #57322,54828].

=item *

The debugger now works with lvalue subroutines.

=item *

The debugger's C<m> command was broken on modules that defined constants
[RT #61222].

=item *

C<crypt> and string complement could return tainted values for untainted
arguments [RT #59998].

=item *

The C<-i>I<.suffix> command-line switch now recreates the file using
restricted permissions, before changing its mode to match the original
file. This eliminates a potential race condition [RT #60904].

=item *

On some Unix systems, the value in C<$?> would not have the top bit set
(C<$? & 128>) even if the child core dumped.

=item *

Under some circumstances, C<$^R> could incorrectly become undefined
[RT #57042].

=item *

In the XS API, various hash functions, when passed a pre-computed hash where
the key is UTF-8, might result in an incorrect lookup.

=item *

XS code including F<XSUB.h> before F<perl.h> gave a compile-time error
[RT #57176].

=item *

C<< $object-E<gt>isa('Foo') >> would report false if the package C<Foo>
didn't exist, even if the object's C<@ISA> contained C<Foo>.

=item *

Various bugs in the new-to 5.10.0 mro code, triggered by manipulating
C<@ISA>, have been found and fixed.

=item *

Bitwise operations on references could crash the interpreter, e.g.
C<$x=\$y; $x |= "foo"> [RT #54956].

=item *

Patterns including alternation might be sensitive to the internal UTF-8
representation, e.g.

    my $byte = chr(192);
    my $utf8 = chr(192); utf8::upgrade($utf8);
    $utf8 =~ /$byte|X}/i;	# failed in 5.10.0

=item *

Within UTF8-encoded Perl source files (i.e. where C<use utf8> is in
effect), double-quoted literal strings could be corrupted where a C<\xNN>,
C<\0NNN> or C<\N{}> is followed by a literal character with ordinal value
greater than 255 [RT #59908].

=item *

C<B::Deparse> failed to correctly deparse various constructs:
C<readpipe STRING> [RT #62428], C<CORE::require(STRING)> [RT #62488],
C<sub foo(_)> [RT #62484].

=item *

Using C<setpgrp> with no arguments could corrupt the perl stack.

=item *

The block form of C<eval> is now specifically trappable by C<Safe> and
C<ops>. Previously it was erroneously treated like string C<eval>.

=item *

In 5.10.0, the two characters C<[~> were sometimes parsed as the smart
match operator (C<~~>) [RT #63854].

=item *

In 5.10.0, the C<*> quantifier in patterns was sometimes treated as
C<{0,32767}> [RT #60034, #60464]. For example, this match would fail:

    ("ab" x 32768) =~ /^(ab)*$/

=item *

C<shmget> was limited to a 32 bit segment size on a 64 bit OS [RT #63924].

=item *

Using C<next> or C<last> to exit a C<given> block no longer produces a
spurious warning like the following:

    Exiting given via last at foo.pl line 123

=item *

Assigning a format to a glob could corrupt the format; e.g.:

     *bar=*foo{FORMAT}; # foo format now bad

=item *

Attempting to coerce a typeglob to a string or number could cause an
assertion failure. The correct error message is now generated,
C<Can't coerce GLOB to I<$type>>.

=item *

Under C<use filetest 'access'>, C<-x> was using the wrong access
mode. This has been fixed [RT #49003].

=item *

C<length> on a tied scalar that returned a Unicode value would not be
correct the first time. This has been fixed.

=item *

Using an array C<tie> inside in array C<tie> could SEGV. This has been
fixed. [RT #51636]

=item *

A race condition inside C<PerlIOStdio_close()> has been identified and
fixed. This used to cause various threading issues, including SEGVs.

=item *

In C<unpack>, the use of C<()> groups in scalar context was internally
placing a list on the interpreter's stack, which manifested in various
ways, including SEGVs. This is now fixed [RT #50256].

=item *

Magic was called twice in C<substr>, C<\&$x>, C<tie $x, $m> and C<chop>.
These have all been fixed.

=item *

A 5.10.0 optimisation to clear the temporary stack within the implicit
loop of C<s///ge> has been reverted, as it turned out to be the cause of
obscure bugs in seemingly unrelated parts of the interpreter [commit
ef0d4e17921ee3de].

=item *

The line numbers for warnings inside C<elsif> are now correct.

=item *

The C<..> operator now works correctly with ranges whose ends are at or
close to the values of the smallest and largest integers.

=item *

C<binmode STDIN, ':raw'> could lead to segmentation faults on some platforms.
This has been fixed [RT #54828].

=item *

An off-by-one error meant that C<index $str, ...> was effectively being
executed as C<index "$str\0", ...>. This has been fixed [RT #53746].

=item *

Various leaks associated with named captures in regexes have been fixed
[RT #57024].

=item *

A weak reference to a hash would leak. This was affecting C<DBI>
[RT #56908].

=item *

Using (?|) in a regex could cause a segfault [RT #59734].

=item *

Use of a UTF-8 C<tr//> within a closure could cause a segfault [RT #61520].

=item *

Calling C<Perl_sv_chop()> or otherwise upgrading an SV could result in an
unaligned 64-bit access on the SPARC architecture [RT #60574].

=item *

In the 5.10.0 release, C<inc_version_list> would incorrectly list
C<5.10.*> after C<5.8.*>; this affected the C<@INC> search order
[RT #67628].

=item *

In 5.10.0, C<pack "a*", $tainted_value> returned a non-tainted value
[RT #52552].

=item *

In 5.10.0, C<printf> and C<sprintf> could produce the fatal error
C<panic: utf8_mg_pos_cache_update> when printing UTF-8 strings
[RT #62666].

=item *

In the 5.10.0 release, a dynamically created C<AUTOLOAD> method might be
missed (method cache issue) [RT #60220,60232].

=item *

In the 5.10.0 release, a combination of C<use feature> and C<//ee> could
cause a memory leak [RT #63110].

=item *

C<-C> on the shebang (C<#!>) line is once more permitted if it is also
specified on the command line. C<-C> on the shebang line used to be a
silent no-op I<if> it was not also on the command line, so perl 5.10.0
disallowed it, which broke some scripts. Now perl checks whether it is
also on the command line and only dies if it is not [RT #67880].

=item *

In 5.10.0, certain types of re-entrant regular expression could crash,
or cause the following assertion failure [RT #60508]:

    Assertion rx->sublen >= (s - rx->subbeg) + i failed

=item *

Perl now includes previously missing files from the Unicode Character
Database.

=item *

Perl now honors C<TMPDIR> when opening an anonymous temporary file.

=back


=head1 Platform Specific Changes

Perl is incredibly portable. In general, if a platform has a C compiler,
someone has ported Perl to it (or will soon).  We're happy to announce
that Perl 5.12 includes support for several new platforms.  At the same
time, it's time to bid farewell to some (very) old friends.

=head2 New Platforms

=over

=item Haiku

Perl's developers have merged patches from Haiku's maintainers. Perl
should now build on Haiku.

=item MirOS BSD

Perl should now build on MirOS BSD.

=back

=head2 Discontinued Platforms

=over

=item Domain/OS

=item MiNT

=item Tenon MachTen

=back

=head2 Updated Platforms

=over 4

=item AIX

=over 4

=item *

Removed F<libbsd> for AIX 5L and 6.1. Only C<flock()> was used from
F<libbsd>.

=item *

Removed F<libgdbm> for AIX 5L and 6.1 if F<libgdbm> < 1.8.3-5 is
installed.  The F<libgdbm> is delivered as an optional package with the
AIX Toolbox.  Unfortunately the versions below 1.8.3-5 are broken.

=item *

Hints changes mean that AIX 4.2 should work again.

=back

=item Cygwin

=over 4

=item *

Perl now supports IPv6 on Cygwin 1.7 and newer.

=item *

On Cygwin we now strip the last number from the DLL. This has been the
behaviour in the cygwin.com build for years. The hints files have been
updated.

=back

=item Darwin (Mac OS X)

=over 4

=item *

Skip testing the be_BY.CP1131 locale on Darwin 10 (Mac OS X 10.6),
as it's still buggy.

=item *

Correct infelicities in the regexp used to identify buggy locales
on Darwin 8 and 9 (Mac OS X 10.4 and 10.5, respectively).

=back

=item DragonFly BSD

=over 4

=item *

Fix thread library selection [perl #69686]

=back

=item FreeBSD

=over 4

=item *

The hints files now identify the correct threading libraries on FreeBSD 7
and later.

=back

=item Irix

=over 4

=item *

We now work around a bizarre preprocessor bug in the Irix 6.5 compiler:
C<cc -E -> unfortunately goes into K&R mode, but C<cc -E file.c> doesn't.

=back

=item NetBSD

=over 4

=item *

Hints now supports versions 5.*.

=back

=item OpenVMS

=over 4

=item *

C<-UDEBUGGING> is now the default on VMS.

Like it has been everywhere else for ages and ages. Also make command-line
selection of -UDEBUGGING and -DDEBUGGING work in configure.com; before
the only way to turn it off was by saying no in answer to the interactive
question.

=item *

The default pipe buffer size on VMS has been updated to 8192 on 64-bit
systems.

=item *

Reads from the in-memory temporary files of C<PerlIO::scalar> used to fail
if C<$/> was set to a numeric reference (to indicate record-style reads).
This is now fixed.

=item *

VMS now supports C<getgrgid>.

=item *

Many improvements and cleanups have been made to the VMS file name handling
and conversion code.

=item *

Enabling the C<PERL_VMS_POSIX_EXIT> logical name now encodes a POSIX exit
status in a VMS condition value for better interaction with GNV's bash
shell and other utilities that depend on POSIX exit values. See
L<perlvms/"$?"> for details.

=item *

C<File::Copy> now detects Unix compatibility mode on VMS.

=back

=item Stratus VOS

=over 4

=item *

Various changes from Stratus have been merged in.

=back

=item Symbian

=over 4

=item *

There is now support for Symbian S60 3.2 SDK and S60 5.0 SDK.

=back

=item Windows

=over 4

=item *

Perl 5.12 supports Windows 2000 and later. The supporting code for
legacy versions of Windows is still included, but will be removed
during the next development cycle.

=item *

Initial support for building Perl with MinGW-w64 is now available.

=item *

F<perl.exe> now includes a manifest resource to specify the C<trustInfo>
settings for Windows Vista and later. Without this setting Windows
would treat F<perl.exe> as a legacy application and apply various
heuristics like redirecting access to protected file system areas
(like the "Program Files" folder) to the users "VirtualStore"
instead of generating a proper "permission denied" error.

The manifest resource also requests the Microsoft Common-Controls
version 6.0 (themed controls introduced in Windows XP).  Check out the
Win32::VisualStyles module on CPAN to switch back to old style
unthemed controls for legacy applications.

=item *

The C<-t> filetest operator now only returns true if the filehandle
is connected to a console window.  In previous versions of Perl it
would return true for all character mode devices, including F<NUL>
and F<LPT1>.

=item *

The C<-p> filetest operator now works correctly, and the
Fcntl::S_IFIFO constant is defined when Perl is compiled with
Microsoft Visual C.  In previous Perl versions C<-p> always
returned a false value, and the Fcntl::S_IFIFO constant
was not defined.

This bug is specific to Microsoft Visual C and never affected
Perl binaries built with MinGW.

=item *

The socket error codes are now more widely supported:  The POSIX
module will define the symbolic names, like POSIX::EWOULDBLOCK,
and stringification of socket error codes in $! works as well
now;

  C:\>perl -MPOSIX -E "$!=POSIX::EWOULDBLOCK; say $!"
  A non-blocking socket operation could not be completed immediately.

=item *

flock() will now set sensible error codes in $!.  Previous Perl versions
copied the value of $^E into $!, which caused much confusion.

=item *

select() now supports all empty C<fd_set>s more correctly.

=item *

C<'.\foo'> and C<'..\foo'>  were treated differently than
C<'./foo'> and C<'../foo'> by C<do> and C<require> [RT #63492].

=item *

Improved message window handling means that C<alarm> and C<kill> messages
will no longer be dropped under race conditions.

=item *

Various bits of Perl's build infrastructure are no longer converted to
win32 line endings at release time. If this hurts you, please report the
problem with the L<perlbug> program included with perl.

=back

=back


=head1 Known Problems

This is a list of some significant unfixed bugs, which are regressions
from either 5.10.x or 5.8.x.

=over 4

=item *

Some CPANPLUS tests may fail if there is a functioning file
F<../../cpanp-run-perl> outside your build directory. The failure
shouldn't imply there's a problem with the actual functional
software. The bug is already fixed in [RT #74188] and is scheduled for
inclusion in perl-v5.12.1.

=item *

C<List::Util::first> misbehaves in the presence of a lexical C<$_>
(typically introduced by C<my $_> or implicitly by C<given>). The variable
which gets set for each iteration is the package variable C<$_>, not the
lexical C<$_> [RT #67694].

A similar issue may occur in other modules that provide functions which
take a block as their first argument, like

    foo { ... $_ ...} list

=item *

Some regexes may run much more slowly when run in a child thread compared
with the thread the pattern was compiled into [RT #55600].

=item *

Things like C<"\N{LATIN SMALL LIGATURE FF}" =~ /\N{LATIN SMALL LETTER F}+/>
will appear to hang as they get into a very long running loop [RT #72998].

=item *

Several porters have reported mysterious crashes when Perl's entire
test suite is run after a build on certain Windows 2000 systems. When
run by hand, the individual tests reportedly work fine.

=back

=head1 Errata

=over

=item *

This one is actually a change introduced in 5.10.0, but it was missed
from that release's perldelta, so it is mentioned here instead.

A bugfix related to the handling of the C</m> modifier and C<qr> resulted
in a change of behaviour between 5.8.x and 5.10.0:

    # matches in 5.8.x, doesn't match in 5.10.0
    $re = qr/^bar/; "foo\nbar" =~ /$re/m;

=back

=head1 Acknowledgements

Perl 5.12.0 represents approximately two years of development since
Perl 5.10.0 and contains over 750,000 lines of changes across over
3,000 files from over 200 authors and committers.

Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.12.0:

Aaron Crane, Abe Timmerman, Abhijit Menon-Sen, Abigail, Adam Russell,
Adriano Ferreira, Ævar Arnfjörð Bjarmason, Alan Grover, Alexandr
Ciornii, Alex Davies, Alex Vandiver, Andreas Koenig, Andrew Rodland,
andrew@sundale.net, Andy Armstrong, Andy Dougherty, Jose AUGUSTE-ETIENNE,
Benjamin Smith, Ben Morrow, bharanee rathna, Bo Borgerson, Bo Lindbergh,
Brad Gilbert, Bram, Brendan O'Dea, brian d foy, Charles Bailey,
Chip Salzenberg, Chris 'BinGOs' Williams, Christoph Lamprecht, Chris
Williams, chromatic, Claes Jakobsson, Craig A. Berry, Dan Dascalescu,
Daniel Frederick Crisman, Daniel M. Quinlan, Dan Jacobson, Dan Kogai,
Dave Mitchell, Dave Rolsky, David Cantrell, David Dick, David Golden,
David Mitchell, David M. Syzdek, David Nicol, David Wheeler, Dennis
Kaarsemaker, Dintelmann, Peter, Dominic Dunlop, Dr.Ruud, Duke Leto,
Enrico Sorcinelli, Eric Brine, Father Chrysostomos, Florian Ragwitz,
Frank Wiegand, Gabor Szabo, Gene Sullivan, Geoffrey T. Dairiki, George
Greer, Gerard Goossen, Gisle Aas, Goro Fuji, Graham Barr, Green, Paul,
Hans Dieter Pearcey, Harmen, H. Merijn Brand, Hugo van der Sanden,
Ian Goodacre, Igor Sutton, Ingo Weinhold, James Bence, James Mastros,
Jan Dubois, Jari Aalto, Jarkko Hietaniemi, Jay Hannah, Jerry Hedden,
Jesse Vincent, Jim Cromie, Jody Belka, John E. Malmberg, John Malmberg,
John Peacock, John Peacock via RT, John P. Linderman, John Wright,
Josh ben Jore, Jos I. Boumans, Karl Williamson, Kenichi Ishigaki, Ken
Williams, Kevin Brintnall, Kevin Ryde, Kurt Starsinic, Leon Brocard,
Lubomir Rintel, Luke Ross, Marcel Grünauer, Marcus Holland-Moritz, Mark
Jason Dominus, Marko Asplund, Martin Hasch, Mashrab Kuvatov, Matt Kraai,
Matt S Trout, Max Maischein, Michael Breen, Michael Cartmell, Michael
G Schwern, Michael Witten, Mike Giroux, Milosz Tanski, Moritz Lenz,
Nicholas Clark, Nick Cleaton, Niko Tyni, Offer Kaye, Osvaldo Villalon,
Paul Fenwick, Paul Gaborit, Paul Green, Paul Johnson, Paul Marquess,
Philip Hazel, Philippe Bruhat, Rafael Garcia-Suarez, Rainer Tammer,
Rajesh Mandalemula, Reini Urban, Renée Bäcker, Ricardo Signes,
Ricardo SIGNES, Richard Foley, Rich Rauenzahn, Rick Delaney, Risto
Kankkunen, Robert May, Roberto C. Sanchez, Robin Barker, SADAHIRO
Tomoyuki, Salvador Ortiz Garcia, Sam Vilain, Scott Lanning, Sébastien
Aperghis-Tramoni, Sérgio Durigan Júnior, Shlomi Fish, Simon 'corecode'
Schubert, Sisyphus, Slaven Rezic, Smylers, Steffen Müller, Steffen
Ullrich, Stepan Kasal, Steve Hay, Steven Schubiger, Steve Peters, Tels,
The Doctor, Tim Bunce, Tim Jenness, Todd Rinaldo, Tom Christiansen,
Tom Hukins, Tom Wyant, Tony Cook, Torsten Schoenfeld, Tye McQueen,
Vadim Konovalov, Vincent Pit, Hio YAMASHINA, Yasuhiro Matsumoto,
Yitzchak Scott-Thoennes, Yuval Kogman, Yves Orton, Zefram, Zsban Ambrus

This is woefully incomplete as it's automatically generated from version
control history.  In particular, it doesn't include the names of the
(very much appreciated) contributors who reported issues in previous
versions of Perl that helped make Perl 5.12.0 better. For a more complete
list of all of Perl's historical contributors, please see the C<AUTHORS>
file in the Perl 5.12.0 distribution.

Our "retired" pumpkings Nicholas Clark and Rafael Garcia-Suarez
deserve special thanks for their brilliant and substantive ongoing
contributions. Nicholas personally authored over 30% of the patches
since 5.10.0. Rafael comes in second in patch authorship with 11%,
but is first by a long shot in committing patches authored by others,
pushing 44% of the commits since 5.10.0 in this category, often after
providing considerable coaching to the patch authors. These statistics
in no way comprise all of their contributions, but express in shorthand
that we couldn't have done it without them.

Many of the changes included in this version originated in the CPAN
modules included in Perl's core. We're grateful to the entire CPAN
community for helping Perl to flourish.

