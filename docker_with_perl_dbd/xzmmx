};

static const UV UNI_INMEROITICCURSIVE_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x109A0,
	0x10A00
};

static const UV UNI_INMIAO_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16F00,
	0x16FA0
};

static const UV UNI_INMODI_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11600,
	0x11660
};

static const UV UNI_INMONGOLIAN_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1800,
	0x18B0
};

static const UV UNI_INMRO_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16A40,
	0x16A70
};

static const UV UNI_INMULTANI_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11280,
	0x112B0
};

static const UV UNI_INMYANMAR_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1000,
	0x10A0
};

static const UV UNI_INNABATAEAN_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10880,
	0x108B0
};

static const UV UNI_INNAGMUNDARI_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1E4D0,
	0x1E500
};

static const UV UNI_INNANDINAGARI_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x119A0,
	0x11A00
};

static const UV UNI_INNEWA_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11400,
	0x11480
};

static const UV UNI_INNEWTAILUE_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1980,
	0x19E0
};

static const UV UNI_INNKO_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x7C0,
	0x800
};

static const UV UNI_INNUSHU_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1B170,
	0x1B300
};

static const UV UNI_INNYIAKENGPUACHUEHMONG_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1E100,
	0x1E150
};

static const UV UNI_INOGHAM_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1680,
	0x16A0
};

static const UV UNI_INOLDHUNGARIAN_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10C80,
	0x10D00
};

static const UV UNI_INOLDITALIC_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10300,
	0x10330
};

static const UV UNI_INOLDPERMIC_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10350,
	0x10380
};

static const UV UNI_INOLDPERSIAN_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x103A0,
	0x103E0
};

static const UV UNI_INOLDSOGDIAN_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10F00,
	0x10F30
};

static const UV UNI_INOLDTURKIC_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10C00,
	0x10C50
};

static const UV UNI_INOLDUYGHUR_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10F70,
	0x10FB0
};

static const UV UNI_INORIYA_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB00,
	0xB80
};

static const UV UNI_INOSAGE_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x104B0,
	0x10500
};

static const UV UNI_INOSMANYA_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x10480,
	0x104B0
};

static const UV UNI_INPAHAWHHMONG_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x16B00,
	0x16B90
};

static const UV UNI_INPAUCINHAU_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x11AC0,
	0x11B00
};

static const UV UNI_INPC__BOTTOM_invlist[] = {  /* for all charsets */
	295,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x93C,
	0x93D,
	0x941,
	0x945,
	0x94D,
	0x94E,
	0x952,
	0x953,
	0x956,
	0x958,
	0x962,
	0x964,
	0x9BC,
	0x9BD,
	0x9C1,
	0x9C5,
	0x9CD,
	0x9CE,
	0x9E2,
	0x9E4,
	0xA3C,
	0xA3D,
	0xA41,
	0xA43,
	0xA4D,
	0xA4E,
	0xA51,
	0xA52,
	0xA75,
	0xA76,
	0xABC,
	0xABD,
	0xAC1,
	0xAC5,
	0xACD,
	0xACE,
	0xAE2,
	0xAE4,
	0xB3C,
	0xB3D,
	0xB41,
	0xB45,
	0xB4D,
	0xB4E,
	0xB62,
	0xB64,
	0xC3C,
	0xC3D,
	0xC56,
	0xC57,
	0xC62,
	0xC64,
	0xCBC,
	0xCBD,
	0xCE2,
	0xCE4,
	0xD43,
	0xD45,
	0xD62,
	0xD64,
	0xDD4,
	0xDD5,
	0xDD6,
	0xDD7,
	0xE38,
	0xE3B,
	0xEB8,
	0xEBB,
	0xEBC,
	0xEBD,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF71,
	0xF72,
	0xF74,
	0xF76,
	0xF84,
	0xF85,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102F,
	0x1031,
	0x1037,
	0x1038,
	0x103D,
	0x103F,
	0x1058,
	0x105A,
	0x105E,
	0x1061,
	0x1082,
	0x1083,
	0x108D,
	0x108E,
	0x1713,
	0x1715,
	0x1733,
	0x1734,
	0x1753,
	0x1754,
	0x1773,
	0x1774,
	0x17BB,
	0x17BE,
	0x1922,
	0x1923,
	0x1932,
	0x1933,
	0x1939,
	0x193A,
	0x193B,
	0x193C,
	0x1A18,
	0x1A19,
	0x1A56,
	0x1A57,
	0x1A5B,
	0x1A5F,
	0x1A69,
	0x1A6B,
	0x1A6C,
	0x1A6D,
	0x1A7F,
	0x1A80,
	0x1B38,
	0x1B3B,
	0x1B6C,
	0x1B6D,
	0x1BA2,
	0x1BA4,
	0x1BA5,
	0x1BA6,
	0x1BAC,
	0x1BAE,
	0x1C2C,
	0x1C2D,
	0x1C37,
	0x1C38,
	0x1CD5,
	0x1CDA,
	0x1CDC,
	0x1CE0,
	0x1CED,
	0x1CEE,
	0xA825,
	0xA826,
	0xA82C,
	0xA82D,
	0xA8C4,
	0xA8C5,
	0xA92B,
	0xA92E,
	0xA947,
	0xA94A,
	0xA94B,
	0xA94F,
	0xA9B8,
	0xA9BA,
	0xA9BD,
	0xA9BE,
	0xAA2D,
	0xAA2E,
	0xAA32,
	0xAA33,
	0xAA35,
	0xAA37,
	0xAAB4,
	0xAAB5,
	0xAAEC,
	0xAAED,
	0xABE8,
	0xABE9,
	0xABED,
	0xABEE,
	0x10A02,
	0x10A04,
	0x10A0C,
	0x10A0F,
	0x10A39,
	0x10A3B,
	0x1103C,
	0x11042,
	0x110B3,
	0x110B5,
	0x110B9,
	0x110BB,
	0x110C2,
	0x110C3,
	0x1112A,
	0x1112C,
	0x11131,
	0x11133,
	0x11173,
	0x11174,
	0x111B6,
	0x111BC,
	0x111C9,
	0x111CB,
	0x111CC,
	0x111CD,
	0x1122F,
	0x11230,
	0x11241,
	0x11242,
	0x112E3,
	0x112E5,
	0x112E9,
	0x112EB,
	0x1133B,
	0x1133D,
	0x11438,
	0x1143E,
	0x11442,
	0x11443,
	0x11446,
	0x11447,
	0x114B3,
	0x114B9,
	0x114C2,
	0x114C4,
	0x115B2,
	0x115B6,
	0x115BF,
	0x115C1,
	0x115DC,
	0x115DE,
	0x11633,
	0x11639,
	0x1163F,
	0x11640,
	0x116B0,
	0x116B2,
	0x116B7,
	0x116B8,
	0x1171D,
	0x1171E,
	0x11724,
	0x11726,
	0x11728,
	0x11729,
	0x1182F,
	0x11833,
	0x11839,
	0x1183B,
	0x11943,
	0x11944,
	0x119D4,
	0x119D8,
	0x119E0,
	0x119E1,
	0x11A02,
	0x11A04,
	0x11A0A,
	0x11A0B,
	0x11A33,
	0x11A35,
	0x11A3B,
	0x11A3F,
	0x11A52,
	0x11A54,
	0x11A59,
	0x11A5C,
	0x11A8A,
	0x11A96,
	0x11C32,
	0x11C37,
	0x11C3F,
	0x11C40,
	0x11C92,
	0x11CA8,
	0x11CAA,
	0x11CB1,
	0x11CB2,
	0x11CB3,
	0x11D36,
	0x11D37,
	0x11D42,
	0x11D43,
	0x11D44,
	0x11D45,
	0x11D47,
	0x11D48,
	0x11EF4,
	0x11EF5,
	0x11F38,
	0x11F3B
};

static const UV UNI_INPC__BOTTOMANDLEFT_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xA9BF,
	0xA9C0
};

static const UV UNI_INPC__BOTTOMANDRIGHT_invlist[] = {  /* for all charsets */
	9,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1B3B,
	0x1B3C,
	0xA9BE,
	0xA9BF,
	0xA9C0,
	0xA9C1,
	0x11942,
	0x11943
};

static const UV UNI_INPC__LEFT_invlist[] = {  /* for all charsets */
	97,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x93F,
	0x940,
	0x94E,
	0x94F,
	0x9BF,
	0x9C0,
	0x9C7,
	0x9C9,
	0xA3F,
	0xA40,
	0xABF,
	0xAC0,
	0xB47,
	0xB48,
	0xBC6,
	0xBC9,
	0xD46,
	0xD49,
	0xDD9,
	0xDDA,
	0xDDB,
	0xDDC,
	0xF3F,
	0xF40,
	0x1031,
	0x1032,
	0x1084,
	0x1085,
	0x17C1,
	0x17C4,
	0x1A19,
	0x1A1A,
	0x1A55,
	0x1A56,
	0x1A6E,
	0x1A73,
	0x1B3E,
	0x1B40,
	0x1BA6,
	0x1BA7,
	0x1C27,
	0x1C29,
	0x1C34,
	0x1C36,
	0xA9BA,
	0xA9BC,
	0xAA2F,
	0xAA31,
	0xAA34,
	0xAA35,
	0xAAEB,
	0xAAEC,
	0xAAEE,
	0xAAEF,
	0x110B1,
	0x110B2,
	0x1112C,
	0x1112D,
	0x111B4,
	0x111B5,
	0x111CE,
	0x111CF,
	0x112E1,
	0x112E2,
	0x11347,
	0x11349,
	0x11436,
	0x11437,
	0x114B1,
	0x114B2,
	0x114B9,
	0x114BA,
	0x115B0,
	0x115B1,
	0x115B8,
	0x115B9,
	0x116AE,
	0x116AF,
	0x11726,
	0x11727,
	0x1182D,
	0x1182E,
	0x11935,
	0x11936,
	0x11937,
	0x11938,
	0x119D2,
	0x119D3,
	0x119E4,
	0x119E5,
	0x11CB1,
	0x11CB2,
	0x11EF5,
	0x11EF6,
	0x11F3E,
	0x11F40
};

static const UV UNI_INPC__LEFTANDRIGHT_invlist[] = {  /* for all charsets */
	29,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x9CB,
	0x9CD,
	0xB4B,
	0xB4C,
	0xBCA,
	0xBCD,
	0xD4A,
	0xD4D,
	0xDDC,
	0xDDD,
	0xDDE,
	0xDDF,
	0x17C0,
	0x17C1,
	0x17C4,
	0x17C6,
	0x1B40,
	0x1B42,
	0x1134B,
	0x1134D,
	0x114BC,
	0x114BD,
	0x114BE,
	0x114BF,
	0x115BA,
	0x115BB,
	0x11938,
	0x11939
};

static const UV UNI_INPC__NA_invlist[] = {  /* for all charsets */
	441,	/* Number of elements */
	148565664, /* Version and data structure type */
	0,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x900,
	0x904,
	0x93A,
	0x93D,
	0x93E,
	0x950,
	0x951,
	0x953,
	0x955,
	0x958,
	0x962,
	0x964,
	0x981,
	0x984,
	0x9BC,
	0x9BD,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CE,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0x9FE,
	0x9FF,
	0xA01,
	0xA04,
	0xA3C,
	0xA3D,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4E,
	0xA51,
	0xA52,
	0xA70,
	0xA72,
	0xA75,
	0xA76,
	0xA81,
	0xA84,
	0xABC,
	0xABD,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACE,
	0xAE2,
	0xAE4,
	0xAFA,
	0xB00,
	0xB01,
	0xB04,
	0xB3C,
	0xB3D,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4E,
	0xB55,
	0xB58,
	0xB62,
	0xB64,
	0xB82,
	0xB83,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xC00,
	0xC05,
	0xC3C,
	0xC3D,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC62,
	0xC64,
	0xC81,
	0xC84,
	0xCBC,
	0xCBD,
	0xCBE,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCE2,
	0xCE4,
	0xCF3,
	0xCF4,
	0xD00,
	0xD04,
	0xD3B,
	0xD3D,
	0xD3E,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD57,
	0xD58,
	0xD62,
	0xD64,
	0xD81,
	0xD84,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDF2,
	0xDF4,
	0xE30,
	0xE3B,
	0xE40,
	0xE46,
	0xE47,
	0xE4F,
	0xEB0,
	0xEBD,
	0xEC0,
	0xEC5,
	0xEC8,
	0xECF,
	0xF18,
	0xF1A,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF3E,
	0xF40,
	0xF71,
	0xF85,
	0xF86,
	0xF88,
	0xF8D,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x102B,
	0x1039,
	0x103A,
	0x103F,
	0x1056,
	0x105A,
	0x105E,
	0x1061,
	0x1062,
	0x1065,
	0x1067,
	0x106E,
	0x1071,
	0x1075,
	0x1082,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109E,
	0x1712,
	0x1716,
	0x1732,
	0x1735,
	0x1752,
	0x1754,
	0x1772,
	0x1774,
	0x17B6,
	0x17D2,
	0x17D3,
	0x17D4,
	0x17DD,
	0x17DE,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x19B0,
	0x19C1,
	0x19C8,
	0x19CA,
	0x1A17,
	0x1A1C,
	0x1A55,
	0x1A5F,
	0x1A61,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1B00,
	0x1B05,
	0x1B34,
	0x1B45,
	0x1B6B,
	0x1B74,
	0x1B80,
	0x1B83,
	0x1BA1,
	0x1BAB,
	0x1BAC,
	0x1BAE,
	0x1BE6,
	0x1BF4,
	0x1C24,
	0x1C38,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE9,
	0x1CED,
	0x1CEE,
	0x1CF4,
	0x1CF5,
