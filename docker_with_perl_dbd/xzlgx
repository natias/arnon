XPG operability often implies the presence of an I<iconv> utility
available from the shell or from the C library.  Consult your system's
documentation for information on iconv.

On OS/390 or z/OS see the L<iconv(1)> manpage.  One way to invoke the C<iconv>
shell utility from within perl would be to:

    # OS/390 or z/OS example
    $ascii_data = `echo '$ebcdic_data'| iconv -f IBM-1047 -t ISO8859-1`

or the inverse map:

    # OS/390 or z/OS example
    $ebcdic_data = `echo '$ascii_data'| iconv -f ISO8859-1 -t IBM-1047`

For other Perl-based conversion options see the C<Convert::*> modules on CPAN.

=head2 C RTL

The OS/390 and z/OS C run-time libraries provide C<_atoe()> and C<_etoa()> functions.

=head1 OPERATOR DIFFERENCES

The C<..> range operator treats certain character ranges with
care on EBCDIC platforms.  For example the following array
will have twenty six elements on either an EBCDIC platform
or an ASCII platform:

    @alphabet = ('A'..'Z');   #  $#alphabet == 25

The bitwise operators such as & ^ | may return different results
when operating on string or character data in a Perl program running
on an EBCDIC platform than when run on an ASCII platform.  Here is
an example adapted from the one in L<perlop>:

    # EBCDIC-based examples
    print "j p \n" ^ " a h";                      # prints "JAPH\n"
    print "JA" | "  ph\n";                        # prints "japh\n"
    print "JAPH\nJunk" & "\277\277\277\277\277";  # prints "japh\n";
    print 'p N$' ^ " E<H\n";                      # prints "Perl\n";

An interesting property of the 32 C0 control characters
in the ASCII table is that they can "literally" be constructed
as control characters in Perl, e.g. C<(chr(0)> eq C<\c@>)>
C<(chr(1)> eq C<\cA>)>, and so on.  Perl on EBCDIC platforms has been
ported to take C<\c@> to C<chr(0)> and C<\cA> to C<chr(1)>, etc. as well, but the
characters that result depend on which code page you are
using.  The table below uses the standard acronyms for the controls.
The POSIX-BC and 1047 sets are
identical throughout this range and differ from the 0037 set at only
one spot (21 decimal).  Note that the line terminator character
may be generated by C<\cJ> on ASCII platforms but by C<\cU> on 1047 or POSIX-BC
platforms and cannot be generated as a C<"\c.letter."> control character on
0037 platforms.  Note also that C<\c\> cannot be the final element in a string
or regex, as it will absorb the terminator.   But C<\c\I<X>> is a C<FILE
SEPARATOR> concatenated with I<X> for all I<X>.
The outlier C<\c?> on ASCII, which yields a non-C0 control C<DEL>,
yields the outlier control C<APC> on EBCDIC, the one that isn't in the
block of contiguous controls.  Note that a subtlety of this is that
C<\c?> on ASCII platforms is an ASCII character, while it isn't
equivalent to any ASCII character in EBCDIC platforms.

 chr   ord   8859-1    0037    1047 && POSIX-BC
 -----------------------------------------------------------------------
 \c@     0   <NUL>     <NUL>        <NUL>
 \cA     1   <SOH>     <SOH>        <SOH>
 \cB     2   <STX>     <STX>        <STX>
 \cC     3   <ETX>     <ETX>        <ETX>
 \cD     4   <EOT>     <ST>         <ST>
 \cE     5   <ENQ>     <HT>         <HT>
 \cF     6   <ACK>     <SSA>        <SSA>
 \cG     7   <BEL>     <DEL>        <DEL>
 \cH     8   <BS>      <EPA>        <EPA>
 \cI     9   <HT>      <RI>         <RI>
 \cJ    10   <LF>      <SS2>        <SS2>
 \cK    11   <VT>      <VT>         <VT>
 \cL    12   <FF>      <FF>         <FF>
 \cM    13   <CR>      <CR>         <CR>
 \cN    14   <SO>      <SO>         <SO>
 \cO    15   <SI>      <SI>         <SI>
 \cP    16   <DLE>     <DLE>        <DLE>
 \cQ    17   <DC1>     <DC1>        <DC1>
 \cR    18   <DC2>     <DC2>        <DC2>
 \cS    19   <DC3>     <DC3>        <DC3>
 \cT    20   <DC4>     <OSC>        <OSC>
 \cU    21   <NAK>     <NEL>        <LF>              **
 \cV    22   <SYN>     <BS>         <BS>
 \cW    23   <ETB>     <ESA>        <ESA>
 \cX    24   <CAN>     <CAN>        <CAN>
 \cY    25   <EOM>     <EOM>        <EOM>
 \cZ    26   <SUB>     <PU2>        <PU2>
 \c[    27   <ESC>     <SS3>        <SS3>
 \c\X   28   <FS>X     <FS>X        <FS>X
 \c]    29   <GS>      <GS>         <GS>
 \c^    30   <RS>      <RS>         <RS>
 \c_    31   <US>      <US>         <US>
 \c?    *    <DEL>     <APC>        <APC>

C<*> Note: C<\c?> maps to ordinal 127 (C<DEL>) on ASCII platforms, but
since ordinal 127 is a not a control character on EBCDIC machines,
C<\c?> instead maps on them to C<APC>, which is 255 in 0037 and 1047,
and 95 in POSIX-BC.

=head1 FUNCTION DIFFERENCES

=over 8

=item C<chr()>

C<chr()> must be given an EBCDIC code number argument to yield a desired
character return value on an EBCDIC platform.  For example:

    $CAPITAL_LETTER_A = chr(193);

=item C<ord()>

C<ord()> will return EBCDIC code number values on an EBCDIC platform.
For example:

    $the_number_193 = ord("A");

=item C<pack()>


The C<"c"> and C<"C"> templates for C<pack()> are dependent upon character set
encoding.  Examples of usage on EBCDIC include:

    $foo = pack("CCCC",193,194,195,196);
    # $foo eq "ABCD"
    $foo = pack("C4",193,194,195,196);
    # same thing

    $foo = pack("ccxxcc",193,194,195,196);
    # $foo eq "AB\0\0CD"

The C<"U"> template has been ported to mean "Unicode" on all platforms so
that

    pack("U", 65) eq 'A'

is true on all platforms.  If you want native code points for the low
256, use the C<"W"> template.  This means that the equivalences

    pack("W", ord($character)) eq $character
    unpack("W", $character) == ord $character

will hold.

=item C<print()>

One must be careful with scalars and strings that are passed to
print that contain ASCII encodings.  One common place
for this to occur is in the output of the MIME type header for
CGI script writing.  For example, many Perl programming guides
recommend something similar to:

    print "Content-type:\ttext/html\015\012\015\012";
    # this may be wrong on EBCDIC

You can instead write

    print "Content-type:\ttext/html\r\n\r\n"; # OK for DGW et al

and have it work portably.

That is because the translation from EBCDIC to ASCII is done
by the web server in this case.  Consult your web server's documentation for
further details.

=item C<printf()>

The formats that can convert characters to numbers and vice versa
will be different from their ASCII counterparts when executed
on an EBCDIC platform.  Examples include:

    printf("%c%c%c",193,194,195);  # prints ABC

=item C<sort()>

EBCDIC sort results may differ from ASCII sort results especially for
mixed case strings.  This is discussed in more detail L<below|/SORTING>.

=item C<sprintf()>

See the discussion of C<L</printf()>> above.  An example of the use
of sprintf would be:

    $CAPITAL_LETTER_A = sprintf("%c",193);

=item C<unpack()>

See the discussion of C<L</pack()>> above.

=back

Note that it is possible to write portable code for these by specifying
things in Unicode numbers, and using a conversion function:

    printf("%c",utf8::unicode_to_native(65));  # prints A on all
                                               # platforms
    print utf8::native_to_unicode(ord("A"));   # Likewise, prints 65

See L<perluniintro/Unicode and EBCDIC> and L</CONVERSIONS>
for other options.

=head1 REGULAR EXPRESSION DIFFERENCES

You can write your regular expressions just like someone on an ASCII
platform would do.  But keep in mind that using octal or hex notation to
specify a particular code point will give you the character that the
EBCDIC code page natively maps to it.   (This is also true of all
double-quoted strings.)  If you want to write portably, just use the
C<\N{U+...}> notation everywhere where you would have used C<\x{...}>,
and don't use octal notation at all.

Starting in Perl v5.22, this applies to ranges in bracketed character
classes.  If you say, for example, C<qr/[\N{U+20}-\N{U+7F}]/>, it means
the characters C<\N{U+20}>, C<\N{U+21}>, ..., C<\N{U+7F}>.  This range
is all the printable characters that the ASCII character set contains.

Prior to v5.22, you couldn't specify any ranges portably, except
(starting in Perl v5.5.3) all subsets of the C<[A-Z]> and C<[a-z]>
ranges are specially coded to not pick up gap characters.  For example,
characters such as "E<ocirc>" (C<o WITH CIRCUMFLEX>) that lie between
"I" and "J" would not be matched by the regular expression range
C</[H-K]/>.  But if either of the range end points is explicitly numeric
(and neither is specified by C<\N{U+...}>), the gap characters are
matched:

    /[\x89-\x91]/

will match C<\x8e>, even though C<\x89> is "i" and C<\x91 > is "j",
and C<\x8e> is a gap character, from the alphabetic viewpoint.

Another construct to be wary of is the inappropriate use of hex (unless
you use C<\N{U+...}>) or
octal constants in regular expressions.  Consider the following
set of subs:

    sub is_c0 {
        my $char = substr(shift,0,1);
        $char =~ /[\000-\037]/;
    }

    sub is_print_ascii {
        my $char = substr(shift,0,1);
        $char =~ /[\040-\176]/;
    }

    sub is_delete {
        my $char = substr(shift,0,1);
        $char eq "\177";
    }

    sub is_c1 {
        my $char = substr(shift,0,1);
        $char =~ /[\200-\237]/;
    }

    sub is_latin_1 {    # But not ASCII; not C1
        my $char = substr(shift,0,1);
        $char =~ /[\240-\377]/;
    }

These are valid only on ASCII platforms.  Starting in Perl v5.22, simply
changing the octal constants to equivalent C<\N{U+...}> values makes
them portable:

    sub is_c0 {
        my $char = substr(shift,0,1);
        $char =~ /[\N{U+00}-\N{U+1F}]/;
    }

    sub is_print_ascii {
        my $char = substr(shift,0,1);
        $char =~ /[\N{U+20}-\N{U+7E}]/;
    }

    sub is_delete {
        my $char = substr(shift,0,1);
        $char eq "\N{U+7F}";
    }

    sub is_c1 {
        my $char = substr(shift,0,1);
        $char =~ /[\N{U+80}-\N{U+9F}]/;
    }

    sub is_latin_1 {    # But not ASCII; not C1
        my $char = substr(shift,0,1);
        $char =~ /[\N{U+A0}-\N{U+FF}]/;
    }

And here are some alternative portable ways to write them:

    sub Is_c0 {
        my $char = substr(shift,0,1);
        return $char =~ /[[:cntrl:]]/a && ! Is_delete($char);

        # Alternatively:
        # return $char =~ /[[:cntrl:]]/
        #        && $char =~ /[[:ascii:]]/
        #        && ! Is_delete($char);
    }

    sub Is_print_ascii {
        my $char = substr(shift,0,1);

        return $char =~ /[[:print:]]/a;

        # Alternatively:
        # return $char =~ /[[:print:]]/ && $char =~ /[[:ascii:]]/;

        # Or
        # return $char
        #      =~ /[ !"\#\$%&'()*+,\-.\/0-9:;<=>?\@A-Z[\\\]^_`a-z{|}~]/;
    }

    sub Is_delete {
        my $char = substr(shift,0,1);
        return utf8::native_to_unicode(ord $char) == 0x7F;
    }

    sub Is_c1 {
        use feature 'unicode_strings';
        my $char = substr(shift,0,1);
        return $char =~ /[[:cntrl:]]/ && $char !~ /[[:ascii:]]/;
    }

    sub Is_latin_1 {    # But not ASCII; not C1
        use feature 'unicode_strings';
        my $char = substr(shift,0,1);
        return ord($char) < 256
               && $char !~ /[[:ascii:]]/
               && $char !~ /[[:cntrl:]]/;
    }

Another way to write C<Is_latin_1()> would be
to use the characters in the range explicitly:

    sub Is_latin_1 {
        my $char = substr(shift,0,1);
        $char =~ /[ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏ]
                  [ÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ]/x;
    }

Although that form may run into trouble in network transit (due to the
presence of 8 bit characters) or on non ISO-Latin character sets.  But
it does allow C<Is_c1> to be rewritten so it works on Perls that don't
have C<'unicode_strings'> (earlier than v5.14):

    sub Is_latin_1 {    # But not ASCII; not C1
        my $char = substr(shift,0,1);
        return ord($char) < 256
               && $char !~ /[[:ascii:]]/
               && ! Is_latin1($char);
    }

=head1 SOCKETS

Most socket programming assumes ASCII character encodings in network
byte order.  Exceptions can include CGI script writing under a
host web server where the server may take care of translation for you.
Most host web servers convert EBCDIC data to ISO-8859-1 or Unicode on
output.

=head1 SORTING

One big difference between ASCII-based character sets and EBCDIC ones
are the relative positions of the characters when sorted in native
order.  Of most concern are the upper- and lowercase letters, the
digits, and the underscore (C<"_">).  On ASCII platforms the native sort
order has the digits come before the uppercase letters which come before
the underscore which comes before the lowercase letters.  On EBCDIC, the
underscore comes first, then the lowercase letters, then the uppercase
ones, and the digits last.  If sorted on an ASCII-based platform, the
two-letter abbreviation for a physician comes before the two letter
abbreviation for drive; that is:

 @sorted = sort(qw(Dr. dr.));  # @sorted holds ('Dr.','dr.') on ASCII,
                                  # but ('dr.','Dr.') on EBCDIC

The property of lowercase before uppercase letters in EBCDIC is
even carried to the Latin 1 EBCDIC pages such as 0037 and 1047.
An example would be that "E<Euml>" (C<E WITH DIAERESIS>, 203) comes
before "E<euml>" (C<e WITH DIAERESIS>, 235) on an ASCII platform, but
the latter (83) comes before the former (115) on an EBCDIC platform.
(Astute readers will note that the uppercase version of "E<szlig>"
C<SMALL LETTER SHARP S> is simply "SS" and that the upper case versions
of "E<yuml>" (small C<y WITH DIAERESIS>) and "E<micro>" (C<MICRO SIGN>)
are not in the 0..255 range but are in Unicode, in a Unicode enabled
Perl).

The sort order will cause differences between results obtained on
ASCII platforms versus EBCDIC platforms.  What follows are some suggestions
on how to deal with these differences.

=head2 Ignore ASCII vs. EBCDIC sort differences

This is the least computationally expensive strategy.  It may require
some user education.

=head2 Use a sort helper function

This is completely general, but the most computationally expensive
strategy.  Choose one or the other character set and transform to that
for every sort comparison.  Here's a complete example that transforms
to ASCII sort order:

 sub native_to_uni($) {
    my $string = shift;

    # Saves time on an ASCII platform
    return $string if ord 'A' ==  65;

    my $output = "";
    for my $i (0 .. length($string) - 1) {
        $output
           .= chr(utf8::native_to_unicode(ord(substr($string, $i, 1))));
    }

    # Preserve utf8ness of input onto the output, even if it didn't need
    # to be utf8
    utf8::upgrade($output) if utf8::is_utf8($string);

    return $output;
 }

 sub ascii_order {   # Sort helper
    return native_to_uni($a) cmp native_to_uni($b);
 }

 sort ascii_order @list;

=head2 MONO CASE then sort data (for non-digits, non-underscore)

If you don't care about where digits and underscore sort to, you can do
something like this

 sub case_insensitive_order {   # Sort helper
    return lc($a) cmp lc($b)
 }

 sort case_insensitive_order @list;

If performance is an issue, and you don't care if the output is in the
same case as the input, Use C<tr///> to transform to the case most
employed within the data.  If the data are primarily UPPERCASE
non-Latin1, then apply C<tr/[a-z]/[A-Z]/>, and then C<sort()>.  If the
data are primarily lowercase non Latin1 then apply C<tr/[A-Z]/[a-z]/>
before sorting.  If the data are primarily UPPERCASE and include Latin-1
characters then apply:

   tr/[a-z]/[A-Z]/;
   tr/[àáâãäåæçèéêëìíîïðñòóôõöøùúûüýþ]/[ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞ/;
   s/ß/SS/g;

then C<sort()>.  If you have a choice, it's better to lowercase things
to avoid the problems of the two Latin-1 characters whose uppercase is
outside Latin-1: "E<yuml>" (small C<y WITH DIAERESIS>) and "E<micro>"
(C<MICRO SIGN>).  If you do need to upppercase, you can; with a
Unicode-enabled Perl, do:

    tr/ÿ/\x{178}/;
    tr/µ/\x{39C}/;

=head2 Perform sorting on one type of platform only

This strategy can employ a network connection.  As such
it would be computationally expensive.

=head1 TRANSFORMATION FORMATS

There are a variety of ways of transforming data with an intra character set
mapping that serve a variety of purposes.  Sorting was discussed in the
previous section and a few of the other more popular mapping techniques are
discussed next.

=head2 URL decoding and encoding

Note that some URLs have hexadecimal ASCII code points in them in an
attempt to overcome character or protocol limitation issues.  For example
the tilde character is not on every keyboard hence a URL of the form:

    http://www.pvhp.com/~pvhp/

may also be expressed as either of:

    http://www.pvhp.com/%7Epvhp/

    http://www.pvhp.com/%7epvhp/

where 7E is the hexadecimal ASCII code point for "~".  Here is an example
of decoding such a URL in any EBCDIC code page:

    $url = 'http://www.pvhp.com/%7Epvhp/';
    $url =~ s/%([0-9a-fA-F]{2})/
              pack("c",utf8::unicode_to_native(hex($1)))/xge;

Conversely, here is a partial solution for the task of encoding such
a URL in any EBCDIC code page:

    $url = 'http://www.pvhp.com/~pvhp/';
    # The following regular expression does not address the
    # mappings for: ('.' => '%2E', '/' => '%2F', ':' => '%3A')
    $url =~ s/([\t "#%&\(\),;<=>\?\@\[\\\]^`{|}~])/
               sprintf("%%%02X",utf8::native_to_unicode(ord($1)))/xge;

where a more complete solution would split the URL into components
and apply a full s/// substitution only to the appropriate parts.

=head2 uu encoding and decoding

The C<u> template to C<pack()> or C<unpack()> will render EBCDIC data in
EBCDIC characters equivalent to their ASCII counterparts.  For example,
the following will print "Yes indeed\n" on either an ASCII or EBCDIC
computer:

    $all_byte_chrs = '';
    for (0..255) { $all_byte_chrs .= chr($_); }
    $uuencode_byte_chrs = pack('u', $all_byte_chrs);
    ($uu = <<'ENDOFHEREDOC') =~ s/^\s*//gm;
    M``$"`P0%!@<("0H+#`T.#Q`1$A,4%187&!D:&QP='A\@(2(C)"4F)R@I*BLL
    M+2XO,#$R,S0U-C<X.3H[/#T^/T!!0D-$149'2$E*2TQ-3D]045)35%565UA9
    M6EM<75Y?8&%B8V1E9F=H:6IK;&UN;W!Q<G-T=79W>'EZ>WQ]?G^`@8*#A(6&
    MAXB)BHN,C8Z/D)&2DY25EI>8F9J;G)V>GZ"AHJ.DI::GJ*FJJZRMKJ^PL;*S
    MM+6VM[BYNKN\O;Z_P,'"P\3%QL?(R<K+S,W.S]#1TM/4U=;7V-G:V]S=WM_@
    ?X>+CY.7FY^CIZNOL[>[O\/'R\_3U]O?X^?K[_/W^_P``
    ENDOFHEREDOC
    if ($uuencode_byte_chrs eq $uu) {
        print "Yes ";
    }
    $uudecode_byte_chrs = unpack('u', $uuencode_byte_chrs);
    if ($uudecode_byte_chrs eq $all_byte_chrs) {
        print "indeed\n";
    }

Here is a very spartan uudecoder that will work on EBCDIC:

    #!/usr/local/bin/perl
    $_ = <> until ($mode,$file) = /^begin\s*(\d*)\s*(\S*)/;
    open(OUT, "> $file") if $file ne "";
    while(<>) {
        last if /^end/;
        next if /[a-z]/;
        next unless int((((utf8::native_to_unicode(ord()) - 32 ) & 077)
                                                               + 2) / 3)
                    == int(length() / 4);
        print OUT unpack("u", $_);
    }
    close(OUT);
    chmod oct($mode), $file;


=head2 Quoted-Printable encoding and decoding

On ASCII-encoded platforms it is possible to strip characters outside of
the printable set using:

    # This QP encoder works on ASCII only
    $qp_string =~ s/([=\x00-\x1F\x80-\xFF])/
                    sprintf("=%02X",ord($1))/xge;

Starting in Perl v5.22, this is trivially changeable to work portably on
both ASCII and EBCDIC platforms.

    # This QP encoder works on both ASCII and EBCDIC
    $qp_string =~ s/([=\N{U+00}-\N{U+1F}\N{U+80}-\N{U+FF}])/
                    sprintf("=%02X",ord($1))/xge;

For earlier Perls, a QP encoder that works on both ASCII and EBCDIC
platforms would look somewhat like the following:

    $delete = utf8::unicode_to_native(ord("\x7F"));
    $qp_string =~
      s/([^[:print:]$delete])/
         sprintf("=%02X",utf8::native_to_unicode(ord($1)))/xage;

(although in production code the substitutions might be done
in the EBCDIC branch with the function call and separately in the
ASCII branch without the expense of the identity map; in Perl v5.22, the
identity map is optimized out so there is no expense, but the
alternative above is simpler and is also available in v5.22).

Such QP strings can be decoded with:

    # This QP decoder is limited to ASCII only
    $string =~ s/=([[:xdigit:][[:xdigit:])/chr hex $1/ge;
    $string =~ s/=[\n\r]+$//;

Whereas a QP decoder that works on both ASCII and EBCDIC platforms
would look somewhat like the following:

    $string =~ s/=([[:xdigit:][:xdigit:]])/
                                chr utf8::native_to_unicode(hex $1)/xge;
    $string =~ s/=[\n\r]+$//;

=head2 Caesarean ciphers

The practice of shifting an alphabet one or more characters for encipherment
dates back thousands of years and was explicitly detailed by Gaius Julius
Caesar in his B<Gallic Wars> text.  A single alphabet shift is sometimes
referred to as a rotation and the shift amount is given as a number $n after
the string 'rot' or "rot$n".  Rot0 and rot26 would designate identity maps
on the 26-letter English version of the Latin alphabet.  Rot13 has the
interesting property that alternate subsequent invocations are identity maps
(thus rot13 is its own non-trivial inverse in the group of 26 alphabet
rotations).  Hence the following is a rot13 encoder and decoder that will
work on ASCII and EBCDIC platforms:

    #!/usr/local/bin/perl

    while(<>){
        tr/n-za-mN-ZA-M/a-zA-Z/;
        print;
    }

In one-liner form:

    perl -ne 'tr/n-za-mN-ZA-M/a-zA-Z/;print'


=head1 Hashing order and checksums

Perl deliberately randomizes hash order for security purposes on both
ASCII and EBCDIC platforms.

EBCDIC checksums will differ for the same file translated into ASCII
and vice versa.

=head1 I18N AND L10N

Internationalization (I18N) and localization (L10N) are supported at least
in principle even on EBCDIC platforms.  The details are system-dependent
and discussed under the L</OS ISSUES> section below.

=head1 MULTI-OCTET CHARACTER SETS

Perl works with UTF-EBCDIC, a multi-byte encoding.  In Perls earlier
than v5.22, there may be various bugs in this regard.

Legacy multi byte EBCDIC code pages XXX.

=head1 OS ISSUES

There may be a few system-dependent issues
of concern to EBCDIC Perl programmers.

=head2 OS/400

=over 8

=item PASE

The PASE environment is a runtime environment for OS/400 that can run
executables built for PowerPC AIX in OS/400; see L<perlos400>.  PASE
is ASCII-based, not EBCDIC-based as the ILE.

=item IFS access

XXX.

=back

=head2 OS/390, z/OS

Perl runs under Unix Systems Services or USS.

=over 8

=item C<sigaction>

C<SA_SIGINFO> can have segmentation faults.

=item C<chcp>

B<chcp> is supported as a shell utility for displaying and changing
one's code page.  See also L<chcp(1)>.

=item dataset access

For sequential data set access try:

    my @ds_records = `cat //DSNAME`;

or:

    my @ds_records = `cat //'HLQ.DSNAME'`;

See also the OS390::Stdio module on CPAN.

=item C<iconv>

B<iconv> is supported as both a shell utility and a C RTL routine.
See also the L<iconv(1)> and L<iconv(3)> manual pages.

=item locales

Locales are supported.  There may be glitches when a locale is another
EBCDIC code page which has some of the
L<code-page variant characters|/The 13 variant characters> in other
positions.

There aren't currently any real UTF-8 locales, even though some locale
names contain the string "UTF-8".

See L<perllocale> for information on locales.  The L10N files
are in F</usr/nls/locale>.  C<$Config{d_setlocale}> is C<'define'> on
OS/390 or z/OS.

=back

=head2 POSIX-BC?

XXX.

=head1 BUGS

=over 4

=item *

Not all shells will allow multiple C<-e> string arguments to perl to
be concatenated together properly as recipes in this document
0, 2, 4, 5, and 6 might
seem to imply.

=item *

There are a significant number of test failures in the CPAN modules
shipped with Perl v5.22 and 5.24.  These are only in modules not primarily
maintained by Perl 5 porters.  Some of these are failures in the tests
only: they don't realize that it is proper to get different results on
EBCDIC platforms.  And some of the failures are real bugs.  If you
compile and do a C<make test> on Perl, all tests on the C</cpan>
directory are skipped.

L<Encode> partially works.

=item *

In earlier Perl versions, when byte and character data were
concatenated, the new string was sometimes created by
decoding the byte strings as I<ISO 8859-1 (Latin-1)>, even if the
old Unicode string used EBCDIC.

=back

=head1 SEE ALSO

L<perllocale>, L<perlfunc>, L<perlunicode>, L<utf8>.

=head1 REFERENCES

L<http://std.dkuug.dk/i18n/charmaps>

L<https://www.unicode.org/>

L<https://www.unicode.org/reports/tr16/>

L<https://www.sr-ix.com/Archive/CharCodeHist/index.html>
B<ASCII: American Standard Code for Information Infiltration> Tom Jennings,
September 1999.

B<The Unicode Standard, Version 3.0> The Unicode Consortium, Lisa Moore ed.,
ISBN 0-201-61633-5, Addison Wesley Developers Press, February 2000.

B<CDRA: IBM - Character Data Representation Architecture -
Reference and Registry>, IBM SC09-2190-00, December 1996.

"Demystifying Character Sets", Andrea Vine, Multilingual Computing
& Technology, B<#26 Vol. 10 Issue 4>, August/September 1999;
ISSN 1523-0309; Multilingual Computing Inc. Sandpoint ID, USA.

B<Codes, Ciphers, and Other Cryptic and Clandestine Communication>
Fred B. Wrixon, ISBN 1-57912-040-7, Black Dog & Leventhal Publishers,
1998.

L<http://www.bobbemer.com/P-BIT.HTM>
B<IBM - EBCDIC and the P-bit; The biggest Computer Goof Ever> Robert Bemer.

=head1 HISTORY

15 April 2001: added UTF-8 and UTF-EBCDIC to main table, pvhp.

=head1 AUTHOR

Peter Prymmer pvhp@best.com wrote this in 1999 and 2000
with CCSID 0819 and 0037 help from Chris Leach and
AndrE<eacute> Pirard A.Pirard@ulg.ac.be as well as POSIX-BC
help from Thomas Dorner Thomas.Dorner@start.de.
Thanks also to Vickie Cooper, Philip Newton, William Raffloer, and
Joe Smith.  Trademarks, registered trademarks, service marks and
registered service marks used in this document are the property of
their respective owners.

Now maintained by Perl5 Porters.
                                                                                                                                 usr/local/lib/perl5/5.40.0/pod/perlembed.pod                                                        0000644 0000000 0000000 00000111576 14714567415 016746  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

perlembed - how to embed perl in your C program

=head1 DESCRIPTION

=head2 PREAMBLE

Do you want to:

=over 5

=item B<Use C from Perl?>

Read L<perlxstut>, L<perlxs>, L<perlclib>, L<h2xs>, L<perlguts>, and L<perlapi>.

=item B<Use a Unix program from Perl?>

Read about back-quotes and about C<system> and C<exec> in L<perlfunc>.

=item B<Use Perl from Perl?>

Read about L<perlfunc/do> and L<perlfunc/eval> and L<perlfunc/require>
and L<perlfunc/use>.

=item B<Use C from C?>

Rethink your design.

=item B<Use Perl from C?>

Read on...

=back

=head2 ROADMAP

=over 5

=item *

Compiling your C program

=item *

Adding a Perl interpreter to your C program

=item *

Calling a Perl subroutine from your C program

=item *

Evaluating a Perl statement from your C program

=item *

Performing Perl pattern matches and substitutions from your C program

=item *

Fiddling with the Perl stack from your C program

=item *

Maintaining a persistent interpreter

=item *

Maintaining multiple interpreter instances

=item *

Using Perl modules, which themselves use C libraries, from your C program

=item *

Embedding Perl under Win32

=back

=head2 Compiling your C program

If you have trouble compiling the scripts in this documentation,
you're not alone.  The cardinal rule: COMPILE THE PROGRAMS IN EXACTLY
THE SAME WAY THAT YOUR PERL WAS COMPILED.  (Sorry for yelling.)

Also, every C program that uses Perl must link in the I<perl library>.
What's that, you ask?  Perl is itself written in C; the perl library
is the collection of compiled C programs that were used to create your
perl executable (I</usr/bin/perl> or equivalent).  (Corollary: you
can't use Perl from your C program unless Perl has been compiled on
your machine, or installed properly--that's why you shouldn't blithely
copy Perl executables from machine to machine without also copying the
I<lib> directory.)

When you use Perl from C, your C program will--usually--allocate,
"run", and deallocate a I<PerlInterpreter> object, which is defined by
the perl library.

=for apidoc Ayh||PerlInterpreter

If your copy of Perl is recent enough to contain this documentation
(version 5.002 or later), then the perl library (and I<EXTERN.h> and
I<perl.h>, which you'll also need) will reside in a directory
that looks like this:

    /usr/local/lib/perl5/your_architecture_here/CORE

or perhaps just

    /usr/local/lib/perl5/CORE

or maybe something like

    /usr/opt/perl5/CORE

Execute this statement for a hint about where to find CORE:

    perl -MConfig -e 'print $Config{archlib}'

Here's how you'd compile the example in the next section,
L</Adding a Perl interpreter to your C program>, on my Linux box:

    % gcc -O2 -Dbool=char -DHAS_BOOL -I/usr/local/include
    -I/usr/local/lib/perl5/i586-linux/5.003/CORE
    -L/usr/local/lib/perl5/i586-linux/5.003/CORE
    -o interp interp.c -lperl -lm

(That's all one line.)  On my DEC Alpha running old 5.003_05, the
incantation is a bit different:

    % cc -O2 -Olimit 2900 -I/usr/local/include
    -I/usr/local/lib/perl5/alpha-dec_osf/5.00305/CORE
    -L/usr/local/lib/perl5/alpha-dec_osf/5.00305/CORE -L/usr/local/lib
    -D__LANGUAGE_C__ -D_NO_PROTO -o interp interp.c -lperl -lm

How can you figure out what to add?  Assuming your Perl is post-5.001,
execute a C<perl -V> command and pay special attention to the "cc" and
"ccflags" information.

You'll have to choose the appropriate compiler (I<cc>, I<gcc>, et al.) for
your machine: C<perl -MConfig -e 'print $Config{cc}'> will tell you what
to use.

You'll also have to choose the appropriate library directory
(I</usr/local/lib/...>) for your machine.  If your compiler complains
that certain functions are undefined, or that it can't locate
I<-lperl>, then you need to change the path following the C<-L>.  If it
complains that it can't find I<EXTERN.h> and I<perl.h>, you need to
change the path following the C<-I>.

You may have to add extra libraries as well.  Which ones?
Perhaps those printed by

   perl -MConfig -e 'print $Config{libs}'

Provided your perl binary was properly configured and installed the
B<ExtUtils::Embed> module will determine all of this information for
you:

   % cc -o interp interp.c `perl -MExtUtils::Embed -e ccopts -e ldopts`

If the B<ExtUtils::Embed> module isn't part of your Perl distribution,
you can retrieve it from
L<https://metacpan.org/pod/ExtUtils::Embed>
(If this documentation came from your Perl distribution, then you're
running 5.004 or better and you already have it.)

The B<ExtUtils::Embed> kit on CPAN also contains all source code for
the examples in this document, tests, additional examples and other
information you may find useful.

=head2 Adding a Perl interpreter to your C program

In a sense, perl (the C program) is a good example of embedding Perl
(the language), so I'll demonstrate embedding with I<miniperlmain.c>,
included in the source distribution.  Here's a bastardized, non-portable
version of I<miniperlmain.c> containing the essentials of embedding:

 #include <EXTERN.h>               /* from the Perl distribution     */
 #include <perl.h>                 /* from the Perl distribution     */

 static PerlInterpreter *my_perl;  /***    The Perl interpreter    ***/

 int main(int argc, char **argv, char **env)
 {
	PERL_SYS_INIT3(&argc,&argv,&env);
        my_perl = perl_alloc();
        perl_construct(my_perl);
	PL_exit_flags |= PERL_EXIT_DESTRUCT_END;
        perl_parse(my_perl, NULL, argc, argv, (char **)NULL);
        perl_run(my_perl);
        perl_destruct(my_perl);
        perl_free(my_perl);
	PERL_SYS_TERM();
	exit(EXIT_SUCCESS);
 }

Notice that we don't use the C<env> pointer.  Normally handed to
C<perl_parse> as its final argument, C<env> here is replaced by
C<NULL>, which means that the current environment will be used.

