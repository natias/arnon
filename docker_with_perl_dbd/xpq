    names = interfaceutil.Attribute("""A ``namespaces`` instance.""")

    filecopiesmode = interfaceutil.Attribute(
        """The way files copies should be dealt with in this repo."""
    )

    def close():
        """Close the handle on this repository."""

    def peer():
        """Obtain an object conforming to the ``peer`` interface."""

    def unfiltered():
        """Obtain an unfiltered/raw view of this repo."""

    def filtered(name, visibilityexceptions=None):
        """Obtain a named view of this repository."""

    obsstore = interfaceutil.Attribute("""A store of obsolescence data.""")

    changelog = interfaceutil.Attribute("""A handle on the changelog revlog.""")

    manifestlog = interfaceutil.Attribute(
        """An instance conforming to the ``imanifestlog`` interface.

        Provides access to manifests for the repository.
        """
    )

    dirstate = interfaceutil.Attribute("""Working directory state.""")

    narrowpats = interfaceutil.Attribute(
        """Matcher patterns for this repository's narrowspec."""
    )

    def narrowmatch(match=None, includeexact=False):
        """Obtain a matcher for the narrowspec."""

    def setnarrowpats(newincludes, newexcludes):
        """Define the narrowspec for this repository."""

    def __getitem__(changeid):
        """Try to resolve a changectx."""

    def __contains__(changeid):
        """Whether a changeset exists."""

    def __nonzero__():
        """Always returns True."""
        return True

    __bool__ = __nonzero__

    def __len__():
        """Returns the number of changesets in the repo."""

    def __iter__():
        """Iterate over revisions in the changelog."""

    def revs(expr, *args):
        """Evaluate a revset.

        Emits revisions.
        """

    def set(expr, *args):
        """Evaluate a revset.

        Emits changectx instances.
        """

    def anyrevs(specs, user=False, localalias=None):
        """Find revisions matching one of the given revsets."""

    def url():
        """Returns a string representing the location of this repo."""

    def hook(name, throw=False, **args):
        """Call a hook."""

    def tags():
        """Return a mapping of tag to node."""

    def tagtype(tagname):
        """Return the type of a given tag."""

    def tagslist():
        """Return a list of tags ordered by revision."""

    def nodetags(node):
        """Return the tags associated with a node."""

    def nodebookmarks(node):
        """Return the list of bookmarks pointing to the specified node."""

    def branchmap():
        """Return a mapping of branch to heads in that branch."""

    def revbranchcache():
        pass

    def register_changeset(rev, changelogrevision):
        """Extension point for caches for new nodes.

        Multiple consumers are expected to need parts of the changelogrevision,
        so it is provided as optimization to avoid duplicate lookups. A simple
        cache would be fragile when other revisions are accessed, too."""
        pass

    def branchtip(branchtip, ignoremissing=False):
        """Return the tip node for a given branch."""

    def lookup(key):
        """Resolve the node for a revision."""

    def lookupbranch(key):
        """Look up the branch name of the given revision or branch name."""

    def known(nodes):
        """Determine whether a series of nodes is known.

        Returns a list of bools.
        """

    def local():
        """Whether the repository is local."""
        return True

    def publishing():
        """Whether the repository is a publishing repository."""

    def cancopy():
        pass

    def shared():
        """The type of shared repository or None."""

    def wjoin(f, *insidef):
        """Calls self.vfs.reljoin(self.root, f, *insidef)"""

    def setparents(p1, p2):
        """Set the parent nodes of the working directory."""

    def filectx(path, changeid=None, fileid=None):
        """Obtain a filectx for the given file revision."""

    def getcwd():
        """Obtain the current working directory from the dirstate."""

    def pathto(f, cwd=None):
        """Obtain the relative path to a file."""

    def adddatafilter(name, fltr):
        pass

    def wread(filename):
        """Read a file from wvfs, using data filters."""

    def wwrite(filename, data, flags, backgroundclose=False, **kwargs):
        """Write data to a file in the wvfs, using data filters."""

    def wwritedata(filename, data):
        """Resolve data for writing to the wvfs, using data filters."""

    def currenttransaction():
        """Obtain the current transaction instance or None."""

    def transaction(desc, report=None):
        """Open a new transaction to write to the repository."""

    def undofiles():
        """Returns a list of (vfs, path) for files to undo transactions."""

    def recover():
        """Roll back an interrupted transaction."""

    def rollback(dryrun=False, force=False):
        """Undo the last transaction.

        DANGEROUS.
        """

    def updatecaches(tr=None, full=False, caches=None):
        """Warm repo caches."""

    def invalidatecaches():
        """Invalidate cached data due to the repository mutating."""

    def invalidatevolatilesets():
        pass

    def invalidatedirstate():
        """Invalidate the dirstate."""

    def invalidate(clearfilecache=False):
        pass

    def invalidateall():
        pass

    def lock(wait=True):
        """Lock the repository store and return a lock instance."""

    def wlock(wait=True):
        """Lock the non-store parts of the repository."""

    def currentwlock():
        """Return the wlock if it's held or None."""

    def checkcommitpatterns(wctx, match, status, fail):
        pass

    def commit(
        text=b'',
        user=None,
        date=None,
        match=None,
        force=False,
        editor=False,
        extra=None,
    ):
        """Add a new revision to the repository."""

    def commitctx(ctx, error=False, origctx=None):
        """Commit a commitctx instance to the repository."""

    def destroying():
        """Inform the repository that nodes are about to be destroyed."""

    def destroyed():
        """Inform the repository that nodes have been destroyed."""

    def status(
        node1=b'.',
        node2=None,
        match=None,
        ignored=False,
        clean=False,
        unknown=False,
        listsubrepos=False,
    ):
        """Convenience method to call repo[x].status()."""

    def addpostdsstatus(ps):
        pass

    def postdsstatus():
        pass

    def clearpostdsstatus():
        pass

    def heads(start=None):
        """Obtain list of nodes that are DAG heads."""

    def branchheads(branch=None, start=None, closed=False):
        pass

    def branches(nodes):
        pass

    def between(pairs):
        pass

    def checkpush(pushop):
        pass

    prepushoutgoinghooks = interfaceutil.Attribute("""util.hooks instance.""")

    def pushkey(namespace, key, old, new):
        pass

    def listkeys(namespace):
        pass

    def debugwireargs(one, two, three=None, four=None, five=None):
        pass

    def savecommitmessage(text):
        pass

    def register_sidedata_computer(
        kind, category, keys, computer, flags, replace=False
    ):
        pass

    def register_wanted_sidedata(category):
        pass


class completelocalrepository(
    ilocalrepositorymain, ilocalrepositoryfilestorage
):
    """Complete interface for a local repository."""


class iwireprotocolcommandcacher(interfaceutil.Interface):
    """Represents a caching backend for wire protocol commands.

    Wire protocol version 2 supports transparent caching of many commands.
    To leverage this caching, servers can activate objects that cache
    command responses. Objects handle both cache writing and reading.
    This interface defines how that response caching mechanism works.

    Wire protocol version 2 commands emit a series of objects that are
    serialized and sent to the client. The caching layer exists between
    the invocation of the command function and the sending of its output
    objects to an output layer.

    Instances of this interface represent a binding to a cache that
    can serve a response (in place of calling a command function) and/or
    write responses to a cache for subsequent use.

    When a command request arrives, the following happens with regards
    to this interface:

    1. The server determines whether the command request is cacheable.
    2. If it is, an instance of this interface is spawned.
    3. The cacher is activated in a context manager (``__enter__`` is called).
    4. A cache *key* for that request is derived. This will call the
       instance's ``adjustcachekeystate()`` method so the derivation
       can be influenced.
    5. The cacher is informed of the derived cache key via a call to
       ``setcachekey()``.
    6. The cacher's ``lookup()`` method is called to test for presence of
       the derived key in the cache.
    7. If ``lookup()`` returns a hit, that cached result is used in place
       of invoking the command function. ``__exit__`` is called and the instance
       is discarded.
    8. The command function is invoked.
    9. ``onobject()`` is called for each object emitted by the command
       function.
    10. After the final object is seen, ``onfinished()`` is called.
    11. ``__exit__`` is called to signal the end of use of the instance.

    Cache *key* derivation can be influenced by the instance.

    Cache keys are initially derived by a deterministic representation of
    the command request. This includes the command name, arguments, protocol
    version, etc. This initial key derivation is performed by CBOR-encoding a
    data structure and feeding that output into a hasher.

    Instances of this interface can influence this initial key derivation
    via ``adjustcachekeystate()``.

    The instance is informed of the derived cache key via a call to
    ``setcachekey()``. The instance must store the key locally so it can
    be consulted on subsequent operations that may require it.

    When constructed, the instance has access to a callable that can be used
    for encoding response objects. This callable receives as its single
    argument an object emitted by a command function. It returns an iterable
    of bytes chunks representing the encoded object. Unless the cacher is
    caching native Python objects in memory or has a way of reconstructing
    the original Python objects, implementations typically call this function
    to produce bytes from the output objects and then store those bytes in
    the cache. When it comes time to re-emit those bytes, they are wrapped
    in a ``wireprototypes.encodedresponse`` instance to tell the output
    layer that they are pre-encoded.

    When receiving the objects emitted by the command function, instances
    can choose what to do with those objects. The simplest thing to do is
    re-emit the original objects. They will be forwarded to the output
    layer and will be processed as if the cacher did not exist.

    Implementations could also choose to not emit objects - instead locally
    buffering objects or their encoded representation. They could then emit
    a single "coalesced" object when ``onfinished()`` is called. In
    this way, the implementation would function as a filtering layer of
    sorts.

    When caching objects, typically the encoded form of the object will
    be stored. Keep in mind that if the original object is forwarded to
    the output layer, it will need to be encoded there as well. For large
    output, this redundant encoding could add overhead. Implementations
    could wrap the encoded object data in ``wireprototypes.encodedresponse``
    instances to avoid this overhead.
    """

    def __enter__():
        """Marks the instance as active.

        Should return self.
        """

    def __exit__(exctype, excvalue, exctb):
        """Called when cacher is no longer used.

        This can be used by implementations to perform cleanup actions (e.g.
        disconnecting network sockets, aborting a partially cached response.
        """

    def adjustcachekeystate(state):
        """Influences cache key derivation by adjusting state to derive key.

        A dict defining the state used to derive the cache key is passed.

        Implementations can modify this dict to record additional state that
        is wanted to influence key derivation.

        Implementations are *highly* encouraged to not modify or delete
        existing keys.
        """

    def setcachekey(key):
        """Record the derived cache key for this request.

        Instances may mutate the key for internal usage, as desired. e.g.
        instances may wish to prepend the repo name, introduce path
        components for filesystem or URL addressing, etc. Behavior is up to
        the cache.

        Returns a bool indicating if the request is cacheable by this
        instance.
        """

    def lookup():
        """Attempt to resolve an entry in the cache.

        The instance is instructed to look for the cache key that it was
        informed about via the call to ``setcachekey()``.

        If there's no cache hit or the cacher doesn't wish to use the cached
        entry, ``None`` should be returned.

        Else, a dict defining the cached result should be returned. The
        dict may have the following keys:

        objs
           An iterable of objects that should be sent to the client. That
           iterable of objects is expected to be what the command function
           would return if invoked or an equivalent representation thereof.
        """

    def onobject(obj):
        """Called when a new object is emitted from the command function.

        Receives as its argument the object that was emitted from the
        command function.

        This method returns an iterator of objects to forward to the output
        layer. The easiest implementation is a generator that just
        ``yield obj``.
        """

    def onfinished():
        """Called after all objects have been emitted from the command function.

        Implementations should return an iterator of objects to forward to
        the output layer.

        This method can be a generator.
        """
                                                                                                                                                                                                                                                                                                                                                    usr/lib/python3/dist-packages/mercurial/interfaces/util.py                                          0000644 0000000 0000000 00000001761 14355257011 022413  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # util.py - Utilities for declaring interfaces.
#
# Copyright 2018 Gregory Szorc <gregory.szorc@gmail.com>
#
# This software may be used and distributed according to the terms of the
# GNU General Public License version 2 or any later version.

# zope.interface imposes a run-time cost due to module import overhead and
# bookkeeping for declaring interfaces. So, we use stubs for various
# zope.interface primitives unless instructed otherwise.


from .. import encoding

if encoding.environ.get(b'HGREALINTERFACES'):
    from ..thirdparty.zope import interface as zi

    Attribute = zi.Attribute
    Interface = zi.Interface
    implementer = zi.implementer
else:

    class Attribute:
        def __init__(self, __name__, __doc__=b''):
            pass

    class Interface:
        def __init__(
            self, name, bases=(), attrs=None, __doc__=None, __module__=None
        ):
            pass

    def implementer(*ifaces):
        def wrapper(cls):
            return cls

        return wrapper
               usr/lib/python3/dist-packages/mercurial/keepalive.py                                                0000644 0000000 0000000 00000066361 14355257011 021267  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public
#   License as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public
#   License along with this library; if not, see
#   <http://www.gnu.org/licenses/>.

# This file is part of urlgrabber, a high-level cross-protocol url-grabber
# Copyright 2002-2004 Michael D. Stenner, Ryan Tomayko

# Modified by Benoit Boissinot:
#  - fix for digest auth (inspired from urllib2.py @ Python v2.4)
# Modified by Dirkjan Ochtman:
#  - import md5 function from a local util module
# Modified by Augie Fackler:
#  - add safesend method and use it to prevent broken pipe errors
#    on large POST requests

"""An HTTP handler for urllib2 that supports HTTP 1.1 and keepalive.

>>> import urllib2
>>> from keepalive import HTTPHandler
>>> keepalive_handler = HTTPHandler()
>>> opener = urlreq.buildopener(keepalive_handler)
>>> urlreq.installopener(opener)
>>>
>>> fo = urlreq.urlopen('http://www.python.org')

If a connection to a given host is requested, and all of the existing
connections are still in use, another connection will be opened.  If
the handler tries to use an existing connection but it fails in some
way, it will be closed and removed from the pool.

To remove the handler, simply re-run build_opener with no arguments, and
install that opener.

You can explicitly close connections by using the close_connection()
method of the returned file-like object (described below) or you can
use the handler methods:

  close_connection(host)
  close_all()
  open_connections()

NOTE: using the close_connection and close_all methods of the handler
should be done with care when using multiple threads.
  * there is nothing that prevents another thread from creating new
    connections immediately after connections are closed
  * no checks are done to prevent in-use connections from being closed

>>> keepalive_handler.close_all()

EXTRA ATTRIBUTES AND METHODS

  Upon a status of 200, the object returned has a few additional
  attributes and methods, which should not be used if you want to
  remain consistent with the normal urllib2-returned objects:

    close_connection()  -  close the connection to the host
    readlines()         -  you know, readlines()
    status              -  the return status (i.e. 404)
    reason              -  english translation of status (i.e. 'File not found')

  If you want the best of both worlds, use this inside an
  AttributeError-catching try:

  >>> try: status = fo.status
  >>> except AttributeError: status = None

  Unfortunately, these are ONLY there if status == 200, so it's not
  easy to distinguish between non-200 responses.  The reason is that
  urllib2 tries to do clever things with error codes 301, 302, 401,
  and 407, and it wraps the object upon return.
"""

# $Id: keepalive.py,v 1.14 2006/04/04 21:00:32 mstenner Exp $


import collections
import hashlib
import socket
import sys
import threading

from .i18n import _
from .pycompat import getattr
from .node import hex
from . import (
    pycompat,
    urllibcompat,
    util,
)
from .utils import procutil

httplib = util.httplib
urlerr = util.urlerr
urlreq = util.urlreq

DEBUG = None


class ConnectionManager:
    """
    The connection manager must be able to:
      * keep track of all existing
    """

    def __init__(self):
        self._lock = threading.Lock()
        self._hostmap = collections.defaultdict(list)  # host -> [connection]
        self._connmap = {}  # map connections to host
        self._readymap = {}  # map connection to ready state

    def add(self, host, connection, ready):
        self._lock.acquire()
        try:
            self._hostmap[host].append(connection)
            self._connmap[connection] = host
            self._readymap[connection] = ready
        finally:
            self._lock.release()

    def remove(self, connection):
        self._lock.acquire()
        try:
            try:
                host = self._connmap[connection]
            except KeyError:
                pass
            else:
                del self._connmap[connection]
                del self._readymap[connection]
                self._hostmap[host].remove(connection)
                if not self._hostmap[host]:
                    del self._hostmap[host]
        finally:
            self._lock.release()

    def set_ready(self, connection, ready):
        try:
            self._readymap[connection] = ready
        except KeyError:
            pass

    def get_ready_conn(self, host):
        conn = None
        self._lock.acquire()
        try:
            for c in self._hostmap[host]:
                if self._readymap[c]:
                    self._readymap[c] = False
                    conn = c
                    break
        finally:
            self._lock.release()
        return conn

    def get_all(self, host=None):
        if host:
            return list(self._hostmap[host])
        else:
            return dict(
                {h: list(conns) for (h, conns) in self._hostmap.items()}
            )


class KeepAliveHandler:
    def __init__(self, timeout=None):
        self._cm = ConnectionManager()
        self._timeout = timeout
        self.requestscount = 0
        self.sentbytescount = 0

    #### Connection Management
    def open_connections(self):
        """return a list of connected hosts and the number of connections
        to each.  [('foo.com:80', 2), ('bar.org', 1)]"""
        return [(host, len(li)) for (host, li) in self._cm.get_all().items()]

    def close_connection(self, host):
        """close connection(s) to <host>
        host is the host:port spec, as in 'www.cnn.com:8080' as passed in.
        no error occurs if there is no connection to that host."""
        for h in self._cm.get_all(host):
            self._cm.remove(h)
            h.close()

    def close_all(self):
        """close all open connections"""
        for host, conns in self._cm.get_all().items():
            for h in conns:
                self._cm.remove(h)
                h.close()

    def _request_closed(self, request, host, connection):
        """tells us that this request is now closed and that the
        connection is ready for another request"""
        self._cm.set_ready(connection, True)

    def _remove_connection(self, host, connection, close=0):
        if close:
            connection.close()
        self._cm.remove(connection)

    #### Transaction Execution
    def http_open(self, req):
        return self.do_open(HTTPConnection, req)

    def do_open(self, http_class, req):
        host = urllibcompat.gethost(req)
        if not host:
            raise urlerr.urlerror(b'no host given')

        try:
            h = self._cm.get_ready_conn(host)
            while h:
                r = self._reuse_connection(h, req, host)

                # if this response is non-None, then it worked and we're
                # done.  Break out, skipping the else block.
                if r:
                    break

                # connection is bad - possibly closed by server
                # discard it and ask for the next free connection
                h.close()
                self._cm.remove(h)
                h = self._cm.get_ready_conn(host)
            else:
                # no (working) free connections were found.  Create a new one.
                h = http_class(host, timeout=self._timeout)
                if DEBUG:
                    DEBUG.info(
                        b"creating new connection to %s (%d)", host, id(h)
                    )
                self._cm.add(host, h, False)
                self._start_transaction(h, req)
                r = h.getresponse()
        # The string form of BadStatusLine is the status line. Add some context
        # to make the error message slightly more useful.
        except httplib.BadStatusLine as err:
            raise urlerr.urlerror(
                _(b'bad HTTP status line: %s') % pycompat.sysbytes(err.line)
            )
        except (socket.error, httplib.HTTPException) as err:
            raise urlerr.urlerror(err)

        # If not a persistent connection, don't try to reuse it. Look
        # for this using getattr() since vcr doesn't define this
        # attribute, and in that case always close the connection.
        if getattr(r, 'will_close', True):
            self._cm.remove(h)

        if DEBUG:
            DEBUG.info(b"STATUS: %s, %s", r.status, r.reason)
        r._handler = self
        r._host = host
        r._url = req.get_full_url()
        r._connection = h
        r.code = r.status
        r.headers = r.msg
        r.msg = r.reason

        return r

    def _reuse_connection(self, h, req, host):
        """start the transaction with a re-used connection
        return a response object (r) upon success or None on failure.
        This DOES not close or remove bad connections in cases where
        it returns.  However, if an unexpected exception occurs, it
        will close and remove the connection before re-raising.
        """
        try:
            self._start_transaction(h, req)
            r = h.getresponse()
            # note: just because we got something back doesn't mean it
            # worked.  We'll check the version below, too.
        except (socket.error, httplib.HTTPException):
            r = None
        except:  # re-raises
            # adding this block just in case we've missed
            # something we will still raise the exception, but
            # lets try and close the connection and remove it
            # first.  We previously got into a nasty loop
            # where an exception was uncaught, and so the
            # connection stayed open.  On the next try, the
            # same exception was raised, etc.  The trade-off is
            # that it's now possible this call will raise
            # a DIFFERENT exception
            if DEBUG:
                DEBUG.error(
                    b"unexpected exception - closing connection to %s (%d)",
                    host,
                    id(h),
                )
            self._cm.remove(h)
            h.close()
            raise

        if r is None or r.version == 9:
            # httplib falls back to assuming HTTP 0.9 if it gets a
            # bad header back.  This is most likely to happen if
            # the socket has been closed by the server since we
            # last used the connection.
            if DEBUG:
                DEBUG.info(
                    b"failed to re-use connection to %s (%d)", host, id(h)
                )
            r = None
        else:
            if DEBUG:
                DEBUG.info(b"re-using connection to %s (%d)", host, id(h))

        return r

    def _start_transaction(self, h, req):
        oldbytescount = getattr(h, 'sentbytescount', 0)

        # What follows mostly reimplements HTTPConnection.request()
        # except it adds self.parent.addheaders in the mix and sends headers
        # in a deterministic order (to make testing easier).
        headers = util.sortdict(self.parent.addheaders)
        headers.update(sorted(req.headers.items()))
        headers.update(sorted(req.unredirected_hdrs.items()))
        headers = util.sortdict((n.lower(), v) for n, v in headers.items())
        skipheaders = {}
        for n in ('host', 'accept-encoding'):
            if n in headers:
                skipheaders['skip_' + n.replace('-', '_')] = 1
        try:
            if urllibcompat.hasdata(req):
                data = urllibcompat.getdata(req)
                h.putrequest(
                    req.get_method(),
                    urllibcompat.getselector(req),
                    **skipheaders
                )
                if 'content-type' not in headers:
                    h.putheader(
                        'Content-type', 'application/x-www-form-urlencoded'
                    )
                if 'content-length' not in headers:
                    h.putheader('Content-length', '%d' % len(data))
            else:
                h.putrequest(
                    req.get_method(),
                    urllibcompat.getselector(req),
                    **skipheaders
                )
        except socket.error as err:
            raise urlerr.urlerror(err)
        for k, v in headers.items():
            h.putheader(k, v)
        h.endheaders()
        if urllibcompat.hasdata(req):
            h.send(data)

        # This will fail to record events in case of I/O failure. That's OK.
        self.requestscount += 1
        self.sentbytescount += getattr(h, 'sentbytescount', 0) - oldbytescount

        try:
            self.parent.requestscount += 1
            self.parent.sentbytescount += (
                getattr(h, 'sentbytescount', 0) - oldbytescount
            )
        except AttributeError:
            pass


class HTTPHandler(KeepAliveHandler, urlreq.httphandler):
    pass


class HTTPResponse(httplib.HTTPResponse):
    # we need to subclass HTTPResponse in order to
    # 1) add readline(), readlines(), and readinto() methods
    # 2) add close_connection() methods
    # 3) add info() and geturl() methods

    # in order to add readline(), read must be modified to deal with a
    # buffer.  example: readline must read a buffer and then spit back
    # one line at a time.  The only real alternative is to read one
    # BYTE at a time (ick).  Once something has been read, it can't be
    # put back (ok, maybe it can, but that's even uglier than this),
    # so if you THEN do a normal read, you must first take stuff from
    # the buffer.

    # the read method wraps the original to accommodate buffering,
    # although read() never adds to the buffer.
    # Both readline and readlines have been stolen with almost no
    # modification from socket.py

    def __init__(self, sock, debuglevel=0, strict=0, method=None):
        httplib.HTTPResponse.__init__(
            self, sock, debuglevel=debuglevel, method=method
        )
        self.fileno = sock.fileno
        self.code = None
        self.receivedbytescount = 0
        self._rbuf = b''
        self._rbufsize = 8096
        self._handler = None  # inserted by the handler later
        self._host = None  # (same)
        self._url = None  # (same)
        self._connection = None  # (same)

    _raw_read = httplib.HTTPResponse.read
    _raw_readinto = getattr(httplib.HTTPResponse, 'readinto', None)

    # Python 2.7 has a single close() which closes the socket handle.
    # This method was effectively renamed to _close_conn() in Python 3. But
    # there is also a close(). _close_conn() is called by methods like
    # read().

    def close(self):
        if self.fp:
            self.fp.close()
            self.fp = None
            if self._handler:
                self._handler._request_closed(
                    self, self._host, self._connection
                )

    def _close_conn(self):
        self.close()

    def close_connection(self):
        self._handler._remove_connection(self._host, self._connection, close=1)
        self.close()

    def info(self):
        return self.headers

    def geturl(self):
        return self._url

    def read(self, amt=None):
        # the _rbuf test is only in this first if for speed.  It's not
        # logically necessary
        if self._rbuf and amt is not None:
            L = len(self._rbuf)
            if amt > L:
                amt -= L
            else:
                s = self._rbuf[:amt]
                self._rbuf = self._rbuf[amt:]
                return s
        # Careful! http.client.HTTPResponse.read() on Python 3 is
        # implemented using readinto(), which can duplicate self._rbuf
        # if it's not empty.
        s = self._rbuf
        self._rbuf = b''
        data = self._raw_read(amt)

        self.receivedbytescount += len(data)
        try:
            self._connection.receivedbytescount += len(data)
        except AttributeError:
            pass
        try:
            self._handler.parent.receivedbytescount += len(data)
        except AttributeError:
            pass

        s += data
        return s

    # stolen from Python SVN #68532 to fix issue1088
    def _read_chunked(self, amt):
        chunk_left = self.chunk_left
        parts = []

        while True:
            if chunk_left is None:
                line = self.fp.readline()
                i = line.find(b';')
                if i >= 0:
                    line = line[:i]  # strip chunk-extensions
                try:
                    chunk_left = int(line, 16)
                except ValueError:
                    # close the connection as protocol synchronization is
                    # probably lost
                    self.close()
                    raise httplib.IncompleteRead(b''.join(parts))
                if chunk_left == 0:
                    break
            if amt is None:
                parts.append(self._safe_read(chunk_left))
            elif amt < chunk_left:
                parts.append(self._safe_read(amt))
                self.chunk_left = chunk_left - amt
                return b''.join(parts)
            elif amt == chunk_left:
                parts.append(self._safe_read(amt))
                self._safe_read(2)  # toss the CRLF at the end of the chunk
                self.chunk_left = None
                return b''.join(parts)
            else:
                parts.append(self._safe_read(chunk_left))
                amt -= chunk_left

