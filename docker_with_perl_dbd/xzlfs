                   SV ** const svargs, const Size_t sv_count,
                   bool * const maybe_tainted)

=back

=back

=for hackers
Found in file sv.c

=over 4

=item C<SvVSTRING_mg>
X<SvVSTRING_mg>

Returns the vstring magic, or NULL if none

=over 3

 MAGIC*  SvVSTRING_mg(SV * sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<vnewSVpvf>
X<vnewSVpvf>

Like C<L</newSVpvf>> but the arguments are an encapsulated argument list.

=over 3

 SV *  vnewSVpvf(const char * const pat, va_list * const args)

=back

=back

=for hackers
Found in file sv.c

=head1 Tainting

=over 4

=item C<SvTAINT>
X<SvTAINT>

Taints an SV if tainting is enabled, and if some input to the current
expression is tainted--usually a variable, but possibly also implicit
inputs such as locale settings.  C<SvTAINT> propagates that taintedness to
the outputs of an expression in a pessimistic fashion; i.e., without paying
attention to precisely which outputs are influenced by which inputs.

=over 3

 void  SvTAINT(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvTAINTED>
X<SvTAINTED>

Checks to see if an SV is tainted.  Returns TRUE if it is, FALSE if
not.

=over 3

 bool  SvTAINTED(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvTAINTED_off>
X<SvTAINTED_off>

Untaints an SV.  Be I<very> careful with this routine, as it short-circuits
some of Perl's fundamental security features.  XS module authors should not
use this function unless they fully understand all the implications of
unconditionally untainting the value.  Untainting should be done in the
standard perl fashion, via a carefully crafted regexp, rather than directly
untainting variables.

=over 3

 void  SvTAINTED_off(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=over 4

=item C<SvTAINTED_on>
X<SvTAINTED_on>

Marks an SV as tainted if tainting is enabled.

=over 3

 void  SvTAINTED_on(SV* sv)

=back

=back

=for hackers
Found in file sv.h

=head1 Time

=over 4

=item C<ASCTIME_R_PROTO>
X<ASCTIME_R_PROTO>

This symbol encodes the prototype of C<asctime_r>.
It is zero if C<d_asctime_r> is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if C<d_asctime_r>
is defined.

=back

=for hackers
Found in file config.h

=over 4

=item C<CTIME_R_PROTO>
X<CTIME_R_PROTO>

This symbol encodes the prototype of C<ctime_r>.
It is zero if C<d_ctime_r> is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if C<d_ctime_r>
is defined.

=back

=for hackers
Found in file config.h

=over 4

=item C<GMTIME_MAX>
X<GMTIME_MAX>

This symbol contains the maximum value for the C<time_t> offset that
the system function gmtime () accepts, and defaults to 0

=back

=for hackers
Found in file config.h

=over 4

=item C<GMTIME_MIN>
X<GMTIME_MIN>

This symbol contains the minimum value for the C<time_t> offset that
the system function gmtime () accepts, and defaults to 0

=back

=for hackers
Found in file config.h

=over 4

=item C<GMTIME_R_PROTO>
X<GMTIME_R_PROTO>

This symbol encodes the prototype of C<gmtime_r>.
It is zero if C<d_gmtime_r> is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if C<d_gmtime_r>
is defined.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_ASCTIME_R>
X<HAS_ASCTIME_R>

This symbol, if defined, indicates that the C<asctime_r> routine
is available to asctime re-entrantly.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_ASCTIME64>
X<HAS_ASCTIME64>

This symbol, if defined, indicates that the C<asctime64> () routine is
available to do the 64bit variant of asctime ()

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_CTIME_R>
X<HAS_CTIME_R>

This symbol, if defined, indicates that the C<ctime_r> routine
is available to ctime re-entrantly.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_CTIME64>
X<HAS_CTIME64>

This symbol, if defined, indicates that the C<ctime64> () routine is
available to do the 64bit variant of ctime ()

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_DIFFTIME>
X<HAS_DIFFTIME>

This symbol, if defined, indicates that the C<difftime> routine is
available.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_DIFFTIME64>
X<HAS_DIFFTIME64>

This symbol, if defined, indicates that the C<difftime64> () routine is
available to do the 64bit variant of difftime ()

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_FUTIMES>
X<HAS_FUTIMES>

This symbol, if defined, indicates that the C<futimes> routine is
available to change file descriptor time stamps with C<struct timevals>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_GETITIMER>
X<HAS_GETITIMER>

This symbol, if defined, indicates that the C<getitimer> routine is
available to return interval timers.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_GETTIMEOFDAY>
X<HAS_GETTIMEOFDAY>

This symbol, if defined, indicates that the C<gettimeofday()> system
call is available for a sub-second accuracy clock. Usually, the file
F<sys/resource.h> needs to be included (see C<L</I_SYS_RESOURCE>>).
The type "Timeval" should be used to refer to "C<struct timeval>".

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_GMTIME_R>
X<HAS_GMTIME_R>

This symbol, if defined, indicates that the C<gmtime_r> routine
is available to gmtime re-entrantly.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_GMTIME64>
X<HAS_GMTIME64>

This symbol, if defined, indicates that the C<gmtime64> () routine is
available to do the 64bit variant of gmtime ()

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LOCALTIME_R>
X<HAS_LOCALTIME_R>

This symbol, if defined, indicates that the C<localtime_r> routine
is available to localtime re-entrantly.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_LOCALTIME64>
X<HAS_LOCALTIME64>

This symbol, if defined, indicates that the C<localtime64> () routine is
available to do the 64bit variant of localtime ()

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_MKTIME>
X<HAS_MKTIME>

This symbol, if defined, indicates that the C<mktime> routine is
available.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_MKTIME64>
X<HAS_MKTIME64>

This symbol, if defined, indicates that the C<mktime64> () routine is
available to do the 64bit variant of mktime ()

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_NANOSLEEP>
X<HAS_NANOSLEEP>

This symbol, if defined, indicates that the C<nanosleep>
system call is available to sleep with 1E-9 sec accuracy.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_SETITIMER>
X<HAS_SETITIMER>

This symbol, if defined, indicates that the C<setitimer> routine is
available to set interval timers.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_STRFTIME>
X<HAS_STRFTIME>

This symbol, if defined, indicates that the C<strftime> routine is
available to do time formatting.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_TIME>
X<HAS_TIME>

This symbol, if defined, indicates that the C<time()> routine exists.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_TIMEGM>
X<HAS_TIMEGM>

This symbol, if defined, indicates that the C<timegm> routine is
available to do the opposite of gmtime ()

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_TIMES>
X<HAS_TIMES>

This symbol, if defined, indicates that the C<times()> routine exists.
Note that this became obsolete on some systems (C<SUNOS>), which now
use C<getrusage()>. It may be necessary to include F<sys/times.h>.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_TM_TM_GMTOFF>
X<HAS_TM_TM_GMTOFF>

This symbol, if defined, indicates to the C program that
the C<struct tm> has a C<tm_gmtoff> field.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_TM_TM_ZONE>
X<HAS_TM_TM_ZONE>

This symbol, if defined, indicates to the C program that
the C<struct tm> has a C<tm_zone> field.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_TZNAME>
X<HAS_TZNAME>

This symbol, if defined, indicates that the C<tzname[]> array is
available to access timezone names.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_USLEEP>
X<HAS_USLEEP>

This symbol, if defined, indicates that the C<usleep> routine is
available to let the process sleep on a sub-second accuracy.

=back

=for hackers
Found in file config.h

=over 4

=item C<HAS_USLEEP_PROTO>
X<HAS_USLEEP_PROTO>

This symbol, if defined, indicates that the system provides
a prototype for the C<usleep()> function.  Otherwise, it is up
to the program to supply one.  A good guess is

 extern int usleep(useconds_t);

=back

=for hackers
Found in file config.h

=over 4

=item C<I_TIME>
X<I_TIME>

This symbol is always defined, and indicates to the C program that
it should include F<time.h>.

=over 3

 #ifdef I_TIME
     #include <time.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<I_UTIME>
X<I_UTIME>

This symbol, if defined, indicates to the C program that it should
include F<utime.h>.

=over 3

 #ifdef I_UTIME
     #include <utime.h>
 #endif


=back

=back

=for hackers
Found in file config.h

=over 4

=item C<LOCALTIME_MAX>
X<LOCALTIME_MAX>

This symbol contains the maximum value for the C<time_t> offset that
the system function localtime () accepts, and defaults to 0

=back

=for hackers
Found in file config.h

=over 4

=item C<LOCALTIME_MIN>
X<LOCALTIME_MIN>

This symbol contains the minimum value for the C<time_t> offset that
the system function localtime () accepts, and defaults to 0

=back

=for hackers
Found in file config.h

=over 4

=item C<LOCALTIME_R_NEEDS_TZSET>
X<LOCALTIME_R_NEEDS_TZSET>

Many libc's C<localtime_r> implementations do not call tzset,
making them differ from C<localtime()>, and making timezone
changes using $C<ENV>{TZ} without explicitly calling tzset
impossible. This symbol makes us call tzset before C<localtime_r>

=back

=for hackers
Found in file config.h

=over 4

=item C<LOCALTIME_R_PROTO>
X<LOCALTIME_R_PROTO>

This symbol encodes the prototype of C<localtime_r>.
It is zero if C<d_localtime_r> is undef, and one of the
C<REENTRANT_PROTO_T_ABC> macros of F<reentr.h> if C<d_localtime_r>
is defined.

=back

=for hackers
Found in file config.h

=over 4

=item C<L_R_TZSET>
X<L_R_TZSET>

If C<localtime_r()> needs tzset, it is defined in this define

=back

=for hackers
Found in file config.h

=over 4

=item C<mini_mktime>
X<mini_mktime>

normalise S<C<struct tm>> values without the localtime() semantics (and
overhead) of mktime().

=over 3

 void  mini_mktime(struct tm *ptm)

=back

=back

=for hackers
Found in file util.c

=over 4

=item C<sv_strftime_tm>

=item C<my_strftime>
X<sv_strftime_tm>X<my_strftime>

These implement the libc strftime().

On failure, they return NULL, and set C<errno> to C<EINVAL>.

C<sv_strftime_tm> is preferred, as it transparently handles the UTF-8ness of
the current locale, the input C<fmt>, and the returned result.  Only if the
current C<LC_TIME> locale is a UTF-8 one (and S<C<use bytes>> is not in effect)
will the result be marked as UTF-8.

C<sv_strftime_tm> takes a pointer to a filled-in S<C<struct tm>> parameter.  It
ignores the values of the C<wday> and C<yday> fields in it.  The other fields
give enough information to accurately calculate these values, and are used for
that purpose.

The caller assumes ownership of the returned SV with a reference count of 1.

C<my_strftime> is kept for backwards compatibility.  Knowing if its result
should be considered UTF-8 or not requires significant extra logic.

The return value is a pointer to the formatted result (which MUST be arranged
to be FREED BY THE CALLER).  This allows this function to increase the buffer
size as needed, so that the caller doesn't have to worry about that, unlike
libc C<strftime()>.

The C<wday>, C<yday>, and C<isdst> parameters are ignored by C<my_strftime>.
Daylight savings time is never considered to exist, and the values returned for
the other two fields (if C<fmt> even calls for them) are calculated from the
other parameters, without need for referencing these.

Note that both functions are always executed in the underlying
C<LC_TIME> locale of the program, giving results based on that locale.

=over 3

 SV *    sv_strftime_tm(SV *fmt, const struct tm *mytm)
 char *  my_strftime   (const char *fmt, int sec, int min,
                        int hour, int mday, int mon, int year,
                        int wday, int yday, int isdst)

=back

=back

=for hackers
Found in file locale.c

=head1 Typedef names

=over 4

=item C<DB_Hash_t>
X<DB_Hash_t>

This symbol contains the type of the prefix structure element
in the F<db.h> header file.  In older versions of DB, it was
int, while in newer ones it is C<size_t>.

=back

=for hackers
Found in file config.h

=over 4

=item C<DB_Prefix_t>
X<DB_Prefix_t>

This symbol contains the type of the prefix structure element
in the F<db.h> header file.  In older versions of DB, it was
int, while in newer ones it is C<u_int32_t>.

=back

=for hackers
Found in file config.h

=over 4

=item C<Direntry_t>
X<Direntry_t>

This symbol is set to 'C<struct direct>' or 'C<struct dirent>' depending on
whether dirent is available or not. You should use this pseudo type to
portably declare your directory entries.

=back

=for hackers
Found in file config.h

=over 4

=item C<Fpos_t>
X<Fpos_t>

This symbol holds the type used to declare file positions in libc.
It can be C<fpos_t>, long, uint, etc... It may be necessary to include
F<sys/types.h> to get any typedef'ed information.

=back

=for hackers
Found in file config.h

=over 4

=item C<Free_t>
X<Free_t>

This variable contains the return type of C<free()>.  It is usually
void, but occasionally int.

=back

=for hackers
Found in file config.h

=over 4

=item C<Gid_t>
X<Gid_t>

This symbol holds the return type of C<getgid()> and the type of
argument to C<setrgid()> and related functions.  Typically,
it is the type of group ids in the kernel. It can be int, ushort,
C<gid_t>, etc... It may be necessary to include F<sys/types.h> to get
any typedef'ed information.

=back

=for hackers
Found in file config.h

=over 4

=item C<Gid_t_f>
X<Gid_t_f>

This symbol defines the format string used for printing a C<Gid_t>.

=back

=for hackers
Found in file config.h

=over 4

=item C<Gid_t_sign>
X<Gid_t_sign>

This symbol holds the signedness of a C<Gid_t>.
1 for unsigned, -1 for signed.

=back

=for hackers
Found in file config.h

=over 4

=item C<Gid_t_size>
X<Gid_t_size>

This symbol holds the size of a C<Gid_t> in bytes.

=back

=for hackers
Found in file config.h

=over 4

=item C<Groups_t>
X<Groups_t>

This symbol holds the type used for the second argument to
C<getgroups()> and C<setgroups()>.  Usually, this is the same as
gidtype (C<gid_t>) , but sometimes it isn't.
It can be int, ushort, C<gid_t>, etc...
It may be necessary to include F<sys/types.h> to get any
typedef'ed information.  This is only required if you have
C<getgroups()> or C<setgroups()>..

=back

=for hackers
Found in file config.h

=over 4

=item C<Malloc_t>
X<Malloc_t>

This symbol is the type of pointer returned by malloc and realloc.

=back

=for hackers
Found in file config.h

=over 4

=item C<Mmap_t>
X<Mmap_t>

This symbol holds the return type of the C<mmap()> system call
(and simultaneously the type of the first argument).
Usually set to 'void *' or 'C<caddr_t>'.

=back

=for hackers
Found in file config.h

=over 4

=item C<Mode_t>
X<Mode_t>

This symbol holds the type used to declare file modes
for systems calls.  It is usually C<mode_t>, but may be
int or unsigned short.  It may be necessary to include F<sys/types.h>
to get any typedef'ed information.

=back

=for hackers
Found in file config.h

=over 4

=item C<Netdb_hlen_t>
X<Netdb_hlen_t>

This symbol holds the type used for the 2nd argument
to C<gethostbyaddr()>.

=back

=for hackers
Found in file config.h

=over 4

=item C<Netdb_host_t>
X<Netdb_host_t>

This symbol holds the type used for the 1st argument
to C<gethostbyaddr()>.

=back

=for hackers
Found in file config.h

=over 4

=item C<Netdb_name_t>
X<Netdb_name_t>

This symbol holds the type used for the argument to
C<gethostbyname()>.

=back

=for hackers
Found in file config.h

=over 4

=item C<Netdb_net_t>
X<Netdb_net_t>

This symbol holds the type used for the 1st argument to
C<getnetbyaddr()>.

=back

=for hackers
Found in file config.h

=over 4

=item C<Off_t>
X<Off_t>

This symbol holds the type used to declare offsets in the kernel.
It can be int, long, C<off_t>, etc... It may be necessary to include
F<sys/types.h> to get any typedef'ed information.

=back

=for hackers
Found in file config.h

=over 4

=item C<Off_t_size>
X<Off_t_size>

This symbol holds the number of bytes used by the C<Off_t>.

=back

=for hackers
Found in file config.h

=over 4

=item C<Pid_t>
X<Pid_t>

This symbol holds the type used to declare process ids in the kernel.
It can be int, uint, C<pid_t>, etc... It may be necessary to include
F<sys/types.h> to get any typedef'ed information.

