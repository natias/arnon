but are gradually being converted, usually by changing to use inline
functions instead.

Above we said "first make a copy".  In a macro, that is easier said
than done, because macros are normally expressions, and declarations
aren't allowed in expressions.  But the S<C<STMT_START> .. C<STMT_END>>
construct, described in L<perlapi|perlapi/STMT_START>, allows you to
have declarations in most contexts, as long as you don't need a return
value.  If you do need a value returned, you can make the interface
such that a pointer is passed to the construct, which then stores its
result there.  (Or you can use GCC brace groups.  But these require a
fallback if the code will ever get executed on a platform that lacks
this non-standard extension to C.  And that fallback would be another
code path, which can get out-of-sync with the brace group one, so doing
this isn't advisable.)  In situations where there's no other way, Perl
does furnish L<perlintern/C<PL_Sv>> and L<perlapi/C<PL_na>> to use
(with a slight performance penalty) for some such common cases.  But
beware that a call chain involving multiple macros using them will zap
the other's use.  These have been very difficult to debug.

For a concrete example of these pitfalls in action, see
L<https://perlmonks.org/?node_id=11144355>.

=head2 Portability problems

The following are common causes of compilation and/or execution
failures, not common to Perl as such.  The C FAQ is good bedtime
reading.  Please test your changes with as many C compilers and
platforms as possible; we will, anyway, and it's nice to save oneself
from public embarrassment.

Also study L<perlport> carefully to avoid any bad assumptions about the
operating system, filesystems, character set, and so forth.

Do not assume an operating system indicates a certain compiler.

=over 4

=item *

Casting pointers to integers or casting integers to pointers

    void castaway(U8* p)
    {
      IV i = p;

or

    void castaway(U8* p)
    {
      IV i = (IV)p;

Both are bad, and broken, and unportable.  Use the PTR2IV() macro that
does it right.  (Likewise, there are PTR2UV(), PTR2NV(), INT2PTR(), and
NUM2PTR().)

=item *

Casting between function pointers and data pointers

Technically speaking casting between function pointers and data
pointers is unportable and undefined, but practically speaking it seems
to work, but you should use the FPTR2DPTR() and DPTR2FPTR() macros.
Sometimes you can also play games with unions.

=item *

Assuming C<sizeof(int) == sizeof(long)>

There are platforms where longs are 64 bits, and platforms where ints
are 64 bits, and while we are out to shock you, even platforms where
shorts are 64 bits.  This is all legal according to the C standard. (In
other words, C<long long> is not a portable way to specify 64 bits, and
C<long long> is not even guaranteed to be any wider than C<long>.)

Instead, use the definitions C<IV>, C<UV>, C<IVSIZE>, C<I32SIZE>, and
so forth. Avoid things like C<I32> because they are B<not> guaranteed
to be I<exactly> 32 bits, they are I<at least> 32 bits, nor are they
guaranteed to be C<int> or C<long>.  If you explicitly need 64-bit
variables, use C<I64> and C<U64>.

=item *

Assuming one can dereference any type of pointer for any type of data

  char *p = ...;
  long pony = *(long *)p;    /* BAD */

Many platforms, quite rightly so, will give you a core dump instead of
a pony if the p happens not to be correctly aligned.

=item *

Lvalue casts

  (int)*p = ...;    /* BAD */

Simply not portable.  Get your lvalue to be of the right type, or maybe
use temporary variables, or dirty tricks with unions.

=item *

Assume B<anything> about structs (especially the ones you don't
control, like the ones coming from the system headers)

=over 8

=item *

That a certain field exists in a struct

=item *

That no other fields exist besides the ones you know of

=item *

That a field is of certain signedness, sizeof, or type

=item *

That the fields are in a certain order

=over 8

=item *

While C guarantees the ordering specified in the struct definition,
between different platforms the definitions might differ

=back

=item *

That the C<sizeof(struct)> or the alignments are the same everywhere

=over 8

=item *

There might be padding bytes between the fields to align the fields -
the bytes can be anything

=item *

Structs are required to be aligned to the maximum alignment required by
the fields - which for native types is usually equivalent to
C<sizeof(the_field)>.

=back

=back

=item *

Assuming the character set is ASCIIish

Perl can compile and run under EBCDIC platforms.  See L<perlebcdic>.
This is transparent for the most part, but because the character sets
differ, you shouldn't use numeric (decimal, octal, nor hex) constants
to refer to characters.  You can safely say C<'A'>, but not C<0x41>.
You can safely say C<'\n'>, but not C<\012>.  However, you can use
macros defined in F<utf8.h> to specify any code point portably.
C<LATIN1_TO_NATIVE(0xDF)> is going to be the code point that means
LATIN SMALL LETTER SHARP S on whatever platform you are running on (on
ASCII platforms it compiles without adding any extra code, so there is
zero performance hit on those).  The acceptable inputs to
C<LATIN1_TO_NATIVE> are from C<0x00> through C<0xFF>.  If your input
isn't guaranteed to be in that range, use C<UNICODE_TO_NATIVE> instead.
C<NATIVE_TO_LATIN1> and C<NATIVE_TO_UNICODE> translate the opposite
direction.

If you need the string representation of a character that doesn't have
a mnemonic name in C, you should add it to the list in
F<regen/unicode_constants.pl>, and have Perl create C<#define>'s for
you, based on the current platform.

Note that the C<isI<FOO>> and C<toI<FOO>> macros in F<handy.h> work
properly on native code points and strings.

Also, the range 'A' - 'Z' in ASCII is an unbroken sequence of 26 upper
case alphabetic characters.  That is not true in EBCDIC.  Nor for 'a'
to 'z'.  But '0' - '9' is an unbroken range in both systems.  Don't
assume anything about other ranges.  (Note that special handling of
ranges in regular expression patterns and transliterations makes it
appear to Perl code that the aforementioned ranges are all unbroken.)

Many of the comments in the existing code ignore the possibility of
EBCDIC, and may be wrong therefore, even if the code works.  This is
actually a tribute to the successful transparent insertion of being
able to handle EBCDIC without having to change pre-existing code.

UTF-8 and UTF-EBCDIC are two different encodings used to represent
Unicode code points as sequences of bytes.  Macros  with the same names
(but different definitions) in F<utf8.h> and F<utfebcdic.h> are used to
allow the calling code to think that there is only one such encoding.
This is almost always referred to as C<utf8>, but it means the EBCDIC
version as well.  Again, comments in the code may well be wrong even if
the code itself is right.  For example, the concept of UTF-8
C<invariant characters> differs between ASCII and EBCDIC.  On ASCII
platforms, only characters that do not have the high-order bit set
(i.e.  whose ordinals are strict ASCII, 0 - 127) are invariant, and the
documentation and comments in the code may assume that, often referring
to something like, say, C<hibit>.  The situation differs and is not so
simple on EBCDIC machines, but as long as the code itself uses the
C<NATIVE_IS_INVARIANT()> macro appropriately, it works, even if the
comments are wrong.

As noted in L<perlhack/TESTING>, when writing test scripts, the file
F<t/charset_tools.pl> contains some helpful functions for writing tests
valid on both ASCII and EBCDIC platforms.  Sometimes, though, a test
can't use a function and it's inconvenient to have different test
versions depending on the platform.  There are 20 code points that are
the same in all 4 character sets currently recognized by Perl (the 3
EBCDIC code pages plus ISO 8859-1 (ASCII/Latin1)).  These can be used
in such tests, though there is a small possibility that Perl will
become available in yet another character set, breaking your test.  All
but one of these code points are C0 control characters.  The most
significant controls that are the same are C<\0>, C<\r>, and C<\N{VT}>
(also specifiable as C<\cK>, C<\x0B>, C<\N{U+0B}>, or C<\013>).  The
single non-control is U+00B6 PILCROW SIGN.  The controls that are the
same have the same bit pattern in all 4 character sets, regardless of
the UTF8ness of the string containing them.  The bit pattern for U+B6
is the same in all 4 for non-UTF8 strings, but differs in each when its
containing string is UTF-8 encoded.  The only other code points that
have some sort of sameness across all 4 character sets are the pair
0xDC and 0xFC. Together these represent upper- and lowercase LATIN
LETTER U WITH DIAERESIS, but which is upper and which is lower may be
reversed: 0xDC is the capital in Latin1 and 0xFC is the small letter,
while 0xFC is the capital in EBCDIC and 0xDC is the small one.  This
factoid may be exploited in writing case insensitive tests that are the
same across all 4 character sets.

=item *

Assuming the character set is just ASCII

ASCII is a 7 bit encoding, but bytes have 8 bits in them.  The 128
extra characters have different meanings depending on the locale.
Absent a locale, currently these extra characters are generally
considered to be unassigned, and this has presented some problems. This
has being changed starting in 5.12 so that these characters can be
considered to be Latin-1 (ISO-8859-1).

=item *

Mixing #define and #ifdef

  #define BURGLE(x) ... \
  #ifdef BURGLE_OLD_STYLE        /* BAD */
  ... do it the old way ... \
  #else
  ... do it the new way ... \
  #endif

You cannot portably "stack" cpp directives.  For example in the above
you need two separate BURGLE() #defines, one for each #ifdef branch.

=item *

Adding non-comment stuff after #endif or #else

  #ifdef SNOSH
  ...
  #else !SNOSH    /* BAD */
  ...
  #endif SNOSH    /* BAD */

The #endif and #else cannot portably have anything non-comment after
them.  If you want to document what is going (which is a good idea
especially if the branches are long), use (C) comments:

  #ifdef SNOSH
  ...
  #else /* !SNOSH */
  ...
  #endif /* SNOSH */

The gcc option C<-Wendif-labels> warns about the bad variant (by
default on starting from Perl 5.9.4).

=item *

Having a comma after the last element of an enum list

  enum color {
    CERULEAN,
    CHARTREUSE,
    CINNABAR,     /* BAD */
  };

is not portable.  Leave out the last comma.

Also note that whether enums are implicitly morphable to ints varies
between compilers, you might need to (int).

=item *

Mixing signed char pointers with unsigned char pointers

  int foo(char *s) { ... }
  ...
  unsigned char *t = ...; /* Or U8* t = ... */
  foo(t);   /* BAD */

While this is legal practice, it is certainly dubious, and downright
fatal in at least one platform: for example VMS cc considers this a
fatal error.  One cause for people often making this mistake is that a
"naked char" and therefore dereferencing a "naked char pointer" have an
undefined signedness: it depends on the compiler and the flags of the
compiler and the underlying platform whether the result is signed or
unsigned.  For this very same reason using a 'char' as an array index
is bad.

=item *

Macros that have string constants and their arguments as substrings of
the string constants

  #define FOO(n) printf("number = %d\n", n)    /* BAD */
  FOO(10);

Pre-ANSI semantics for that was equivalent to

  printf("10umber = %d\10");

which is probably not what you were expecting.  Unfortunately at least
one reasonably common and modern C compiler does "real backward
compatibility" here, in AIX that is what still happens even though the
rest of the AIX compiler is very happily C89.

=item *

Using printf formats for non-basic C types

   IV i = ...;
   printf("i = %d\n", i);    /* BAD */

While this might by accident work in some platform (where IV happens to
be an C<int>), in general it cannot.  IV might be something larger.
Even worse the situation is with more specific types (defined by Perl's
configuration step in F<config.h>):

   Uid_t who = ...;
   printf("who = %d\n", who);    /* BAD */

The problem here is that Uid_t might be not only not C<int>-wide but it
might also be unsigned, in which case large uids would be printed as
negative values.

There is no simple solution to this because of printf()'s limited
intelligence, but for many types the right format is available as with
either 'f' or '_f' suffix, for example:

   IVdf /* IV in decimal */
   UVxf /* UV is hexadecimal */

   printf("i = %"IVdf"\n", i); /* The IVdf is a string constant. */

   Uid_t_f /* Uid_t in decimal */

   printf("who = %"Uid_t_f"\n", who);

Or you can try casting to a "wide enough" type:

   printf("i = %"IVdf"\n", (IV)something_very_small_and_signed);

See L<perlguts/Formatted Printing of Size_t and SSize_t> for how to
print those.

Also remember that the C<%p> format really does require a void pointer:

   U8* p = ...;
   printf("p = %p\n", (void*)p);

The gcc option C<-Wformat> scans for such problems.

=item *

Blindly passing va_list

Not all platforms support passing va_list to further varargs (stdarg)
functions.  The right thing to do is to copy the va_list using the
Perl_va_copy() if the NEED_VA_COPY is defined.

=for apidoc_section $genconfig
=for apidoc Amnh||NEED_VA_COPY

=item *

Using gcc statement expressions

   val = ({...;...;...});    /* BAD */

While a nice extension, it's not portable.  Historically, Perl used
them in macros if available to gain some extra speed (essentially as a
funky form of inlining), but we now support (or emulate) C99 C<static
inline> functions, so use them instead. Declare functions as
C<PERL_STATIC_INLINE> to transparently fall back to emulation where
needed.

=item *

Binding together several statements in a macro

Use the macros C<STMT_START> and C<STMT_END>.

   STMT_START {
      ...
   } STMT_END

But there can be subtle (but avoidable if you do it right) bugs
introduced with these; see L<perlapi/C<STMT_START>> for best practices
for their use.

=item *

Testing for operating systems or versions when you should be testing
for features

  #ifdef __FOONIX__    /* BAD */
  foo = quux();
  #endif

Unless you know with 100% certainty that quux() is only ever available
for the "Foonix" operating system B<and> that is available B<and>
correctly working for B<all> past, present, B<and> future versions of
"Foonix", the above is very wrong.  This is more correct (though still
not perfect, because the below is a compile-time check):

  #ifdef HAS_QUUX
  foo = quux();
  #endif

How does the HAS_QUUX become defined where it needs to be?  Well, if
Foonix happens to be Unixy enough to be able to run the Configure
script, and Configure has been taught about detecting and testing
quux(), the HAS_QUUX will be correctly defined.  In other platforms,
the corresponding configuration step will hopefully do the same.

In a pinch, if you cannot wait for Configure to be educated, or if you
have a good hunch of where quux() might be available, you can
temporarily try the following:

  #if (defined(__FOONIX__) || defined(__BARNIX__))
  # define HAS_QUUX
  #endif

  ...

  #ifdef HAS_QUUX
  foo = quux();
  #endif

But in any case, try to keep the features and operating systems
separate.

A good resource on the predefined macros for various operating systems,
compilers, and so forth is
L<https://sourceforge.net/p/predef/wiki/Home/>.

=item *

Assuming the contents of static memory pointed to by the return values
of Perl wrappers for C library functions doesn't change.  Many C
library functions return pointers to static storage that can be
overwritten by subsequent calls to the same or related functions.  Perl
has wrappers for some of these functions.  Originally many of those
wrappers returned those volatile pointers.  But over time almost all of
them have evolved to return stable copies.  To cope with the remaining
ones, do a L<perlapi/savepv> to make a copy, thus avoiding these
problems.  You will have to free the copy when you're done to avoid
memory leaks.  If you don't have control over when it gets freed,
you'll need to make the copy in a mortal scalar, like so

 SvPVX(sv_2mortal(newSVpv(volatile_string, 0)))

=back

=head2 Problematic System Interfaces

=over 4

=item *

Perl strings are NOT the same as C strings:  They may contain C<NUL>
characters, whereas a C string is terminated by the first C<NUL>. That
is why Perl API functions that deal with strings generally take a
pointer to the first byte and either a length or a pointer to the byte
just beyond the final one.

And this is the reason that many of the C library string handling
functions should not be used.  They don't cope with the full generality
of Perl strings.  It may be that your test cases don't have embedded
C<NUL>s, and so the tests pass, whereas there may well eventually arise
real-world cases where they fail.  A lesson here is to include C<NUL>s
in your tests.  Now it's fairly rare in most real world cases to get
C<NUL>s, so your code may seem to work, until one day a C<NUL> comes
along.

Here's an example.  It used to be a common paradigm, for decades, in
the perl core to use S<C<strchr("list", c)>> to see if the character
C<c> is any of the ones given in C<"list">, a double-quote-enclosed
string of the set of characters that we are seeing if C<c> is one of.
As long as C<c> isn't a C<NUL>, it works.  But when C<c> is a C<NUL>,
C<strchr> returns a pointer to the terminating C<NUL> in C<"list">.
This likely will result in a segfault or a security issue when the
caller uses that end pointer as the starting point to read from.

A solution to this and many similar issues is to use the C<mem>I<-foo>
C library functions instead.  In this case C<memchr> can be used to see
if C<c> is in C<"list"> and works even if C<c> is C<NUL>.  These
functions need an additional parameter to give the string length. In
the case of literal string parameters, perl has defined macros that
calculate the length for you.  See L<perlapi/String Handling>.

=item *

malloc(0), realloc(0), calloc(0, 0) are non-portable.  To be portable
allocate at least one byte.  (In general you should rarely need to work
at this low level, but instead use the various malloc wrappers.)

=item *

snprintf() - the return type is unportable.  Use my_snprintf() instead.

=back

=head2 Security problems

Last but not least, here are various tips for safer coding. See also
L<perlclib> for libc/stdio replacements one should use.

=over 4

=item *

Do not use gets()

Or we will publicly ridicule you.  Seriously.

=item *

Do not use tmpfile()

Use mkstemp() instead.

=item *

Do not use strcpy() or strcat() or strncpy() or strncat()

Use my_strlcpy() and my_strlcat() instead: they either use the native
implementation, or Perl's own implementation (borrowed from the public
domain implementation of INN).

=item *

Do not use sprintf() or vsprintf()

If you really want just plain byte strings, use my_snprintf() and
my_vsnprintf() instead, which will try to use snprintf() and
vsnprintf() if those safer APIs are available.  If you want something
fancier than a plain byte string, use L<C<Perl_form>()|perlapi/form> or
SVs and L<C<Perl_sv_catpvf()>|perlapi/sv_catpvf>.

Note that glibc C<printf()>, C<sprintf()>, etc. are buggy before glibc
version 2.17.  They won't allow a C<%.s> format with a precision to
create a string that isn't valid UTF-8 if the current underlying locale
of the program is UTF-8.  What happens is that the C<%s> and its
operand are simply skipped without any notice.
L<https://sourceware.org/bugzilla/show_bug.cgi?id=6530>.

=item *

Do not use atoi()

Use grok_atoUV() instead.  atoi() has ill-defined behavior on
overflows, and cannot be used for incremental parsing.  It is also
affected by locale, which is bad.

=item *

Do not use strtol() or strtoul()

Use grok_atoUV() instead.  strtol() or strtoul() (or their
IV/UV-friendly macro disguises, Strtol() and Strtoul(), or Atol() and
Atoul() are affected by locale, which is bad.

=for apidoc_section $numeric
=for apidoc AmhD||Atol|const char * nptr
=for apidoc AmhD||Atoul|const char * nptr

=back

=head1 DEBUGGING

You can compile a special debugging version of Perl, which allows you
to use the C<-D> option of Perl to tell more about what Perl is doing.
But sometimes there is no alternative than to dive in with a debugger,
either to see the stack trace of a core dump (very useful in a bug
report), or trying to figure out what went wrong before the core dump
happened, or how did we end up having wrong or unexpected results.

=head2 Poking at Perl

To really poke around with Perl, you'll probably want to build Perl for
debugging, like this:

    ./Configure -d -DDEBUGGING
    make

C<-DDEBUGGING> turns on the C compiler's C<-g> flag to have it produce
debugging information which will allow us to step through a running
program, and to see in which C function we are at (without the
debugging information we might see only the numerical addresses of the
functions, which is not very helpful). It will also turn on the
C<DEBUGGING> compilation symbol which enables all the internal
debugging code in Perl. There are a whole bunch of things you can debug
with this: L<perlrun|perlrun/-Dletters> lists them all, and the best
way to find out about them is to play about with them.  The most useful
options are probably

    l  Context (loop) stack processing
    s  Stack snapshots (with v, displays all stacks)
    t  Trace execution
    o  Method and overloading resolution
    c  String/numeric conversions

For example

    $ perl -Dst -e '$x + 1'
    ....
    (-e:1)	gvsv(main::x)
        =>  UNDEF
    (-e:1)	const(IV(1))
        =>  UNDEF  IV(1)
    (-e:1)	add
        =>  NV(1)


Some of the functionality of the debugging code can be achieved with a
non-debugging perl by using XS modules:

    -Dr => use re 'debug'
    -Dx => use O 'Debug'

=head2 Using a source-level debugger

If the debugging output of C<-D> doesn't help you, it's time to step
through perl's execution with a source-level debugger.

=over 3

=item *

We'll use C<gdb> for our examples here; the principles will apply to
any debugger (many vendors call their debugger C<dbx>), but check the
manual of the one you're using.

=back

To fire up the debugger, type

    gdb ./perl

Or if you have a core dump:

    gdb ./perl core

You'll want to do that in your Perl source tree so the debugger can
read the source code.  You should see the copyright message, followed
by the prompt.

    (gdb)

C<help> will get you into the documentation, but here are the most
useful commands:

=over 3

=item * run [args]

Run the program with the given arguments.

=item * break function_name

=item * break source.c:xxx

Tells the debugger that we'll want to pause execution when we reach
either the named function (but see L<perlguts/Internal Functions>!) or
the given line in the named source file.

=item * step

Steps through the program a line at a time.

=item * next

Steps through the program a line at a time, without descending into
functions.

=item * continue

Run until the next breakpoint.

=item * finish

Run until the end of the current function, then stop again.

=item * 'enter'

Just pressing Enter will do the most recent operation again - it's a
blessing when stepping through miles of source code.

=item * ptype

Prints the C definition of the argument given.

  (gdb) ptype PL_op
  type = struct op {
      OP *op_next;
      OP *op_sibparent;
      OP *(*op_ppaddr)(void);
      PADOFFSET op_targ;
      unsigned int op_type : 9;
      unsigned int op_opt : 1;
      unsigned int op_slabbed : 1;
      unsigned int op_savefree : 1;
      unsigned int op_static : 1;
      unsigned int op_folded : 1;
      unsigned int op_spare : 2;
      U8 op_flags;
      U8 op_private;
  } *

=item * print

Execute the given C code and print its results.  B<WARNING>: Perl makes
heavy use of macros, and F<gdb> does not necessarily support macros
(see later L</"gdb macro support">).  You'll have to substitute them
yourself, or to invoke cpp on the source code files (see L</"The .i
Targets">) So, for instance, you can't say

    print SvPV_nolen(sv)

but you have to say

    print Perl_sv_2pv_nolen(sv)

=back

You may find it helpful to have a "macro dictionary", which you can
produce by saying C<cpp -dM perl.c | sort>.  Even then, F<cpp> won't
recursively apply those macros for you.

=head2 gdb macro support

Recent versions of F<gdb> have fairly good macro support, but in order
to use it you'll need to compile perl with macro definitions included
in the debugging information.  Using F<gcc> version 3.1, this means
configuring with C<-Doptimize=-g3>.  Other compilers might use a
different switch (if they support debugging macros at all).

=head2 Dumping Perl Data Structures

One way to get around this macro hell is to use the dumping functions
in F<dump.c>; these work a little like an internal
L<Devel::Peek|Devel::Peek>, but they also cover OPs and other
structures that you can't get at from Perl.  Let's take an example.
We'll use the C<$x = $y + $z> we used before, but give it a bit of
context: C<$y = "6XXXX"; $z = 2.3;>.  Where's a good place to stop and
poke around?

What about C<pp_add>, the function we examined earlier to implement the
C<+> operator:

    (gdb) break Perl_pp_add
    Breakpoint 1 at 0x46249f: file pp_hot.c, line 309.

Notice we use C<Perl_pp_add> and not C<pp_add> - see
L<perlguts/Internal Functions>.  With the breakpoint in place, we can
run our program:

    (gdb) run -e '$y = "6XXXX"; $z = 2.3; $x = $y + $z'

Lots of junk will go past as gdb reads in the relevant source files and
libraries, and then:

    Breakpoint 1, Perl_pp_add () at pp_hot.c:309
    1396    dSP; dATARGET; bool useleft; SV *svl, *svr;
    (gdb) step
    311           dPOPTOPnnrl_ul;
    (gdb)

We looked at this bit of code before, and we said that
C<dPOPTOPnnrl_ul> arranges for two C<NV>s to be placed into C<left> and
C<right> - let's slightly expand it:

 #define dPOPTOPnnrl_ul  NV right = POPn; \
                         SV *leftsv = TOPs; \
                         NV left = USE_LEFT(leftsv) ? SvNV(leftsv) : 0.0

C<POPn> takes the SV from the top of the stack and obtains its NV
either directly (if C<SvNOK> is set) or by calling the C<sv_2nv>
function.  C<TOPs> takes the next SV from the top of the stack - yes,
C<POPn> uses C<TOPs> - but doesn't remove it.  We then use C<SvNV> to
get the NV from C<leftsv> in the same way as before - yes, C<POPn> uses
C<SvNV>.

Since we don't have an NV for C<$y>, we'll have to use C<sv_2nv> to
convert it.  If we step again, we'll find ourselves there:

    (gdb) step
    Perl_sv_2nv (sv=0xa0675d0) at sv.c:1669
    1669        if (!sv)
    (gdb)

We can now use C<Perl_sv_dump> to investigate the SV:

    (gdb) print Perl_sv_dump(sv)
    SV = PV(0xa057cc0) at 0xa0675d0
    REFCNT = 1
    FLAGS = (POK,pPOK)
    PV = 0xa06a510 "6XXXX"\0
    CUR = 5
    LEN = 6
    $1 = void

We know we're going to get C<6> from this, so let's finish the
subroutine:

    (gdb) finish
    Run till exit from #0  Perl_sv_2nv (sv=0xa0675d0) at sv.c:1671
    0x462669 in Perl_pp_add () at pp_hot.c:311
    311           dPOPTOPnnrl_ul;

We can also dump out this op: the current op is always stored in
C<PL_op>, and we can dump it with C<Perl_op_dump>.  This'll give us
similar output to CPAN module L<B::Debug>.

=for apidoc_section $debugging
=for apidoc Amnh||PL_op

    (gdb) print Perl_op_dump(PL_op)
    {
    13  TYPE = add  ===> 14
        TARG = 1
        FLAGS = (SCALAR,KIDS)
        {
            TYPE = null  ===> (12)
              (was rv2sv)
            FLAGS = (SCALAR,KIDS)
            {
    11          TYPE = gvsv  ===> 12
                FLAGS = (SCALAR)
                GV = main::b
            }
        }

# finish this later #

=head2 Using gdb to look at specific parts of a program

With the example above, you knew to look for C<Perl_pp_add>, but what
if there were multiple calls to it all over the place, or you didn't
know what the op was you were looking for?

One way to do this is to inject a rare call somewhere near what you're
looking for.  For example, you could add C<study> before your method:

    study;

And in gdb do:

    (gdb) break Perl_pp_study

And then step until you hit what you're looking for.  This works well
in a loop if you want to only break at certain iterations:

    for my $i (1..100) {
        study if $i == 50;
    }

=head2 Using gdb to look at what the parser/lexer are doing

If you want to see what perl is doing when parsing/lexing your code,
you can use C<BEGIN {}>:

    print "Before\n";
    BEGIN { study; }
    print "After\n";

And in gdb:

    (gdb) break Perl_pp_study

If you want to see what the parser/lexer is doing inside of C<if>
blocks and the like you need to be a little trickier:

    if ($x && $y && do { BEGIN { study } 1 } && $z) { ... }

=head1 SOURCE CODE STATIC ANALYSIS

Various tools exist for analysing C source code B<statically>, as
opposed to B<dynamically>, that is, without executing the code.  It is
possible to detect resource leaks, undefined behaviour, type
mismatches, portability problems, code paths that would cause illegal
memory accesses, and other similar problems by just parsing the C code
and looking at the resulting graph, what does it tell about the
execution and data flows.  As a matter of fact, this is exactly how C
compilers know to give warnings about dubious code.

=head2 lint

The good old C code quality inspector, C<lint>, is available in several
platforms, but please be aware that there are several different
implementations of it by different vendors, which means that the flags
are not identical across different platforms.

There is a C<lint> target in Makefile, but you may have to diddle with
the flags (see above).

=head2 Coverity

Coverity (L<https://www.coverity.com/>) is a product similar to lint and
as a testbed for their product they periodically check several open
source projects, and they give out accounts to open source developers
to the defect databases.

There is Coverity setup for the perl5 project:
L<https://scan.coverity.com/projects/perl5>

=head2 HP-UX cadvise (Code Advisor)

HP has a C/C++ static analyzer product for HP-UX caller Code Advisor.
(Link not given here because the URL is horribly long and seems
horribly unstable; use the search engine of your choice to find it.)
The use of the C<cadvise_cc> recipe with C<Configure ...
-Dcc=./cadvise_cc> (see cadvise "User Guide") is recommended; as is the
use of C<+wall>.

=head2 cpd (cut-and-paste detector)

The cpd tool detects cut-and-paste coding.  If one instance of the
cut-and-pasted code changes, all the other spots should probably be
changed, too.  Therefore such code should probably be turned into a
subroutine or a macro.

cpd (L<https://docs.pmd-code.org/latest/pmd_userdocs_cpd.html>) is part
of the pmd project (L<https://pmd.github.io/>).  pmd was originally
written for static analysis of Java code, but later the cpd part of it
was extended to parse also C and C++.

Download the pmd-bin-X.Y.zip () from the SourceForge site, extract the
pmd-X.Y.jar from it, and then run that on source code thusly:

  java -cp pmd-X.Y.jar net.sourceforge.pmd.cpd.CPD \
   --minimum-tokens 100 --files /some/where/src --language c > cpd.txt

You may run into memory limits, in which case you should use the -Xmx
option:

  java -Xmx512M ...

=head2 gcc warnings

Though much can be written about the inconsistency and coverage
problems of gcc warnings (like C<-Wall> not meaning "all the warnings",
or some common portability problems not being covered by C<-Wall>, or
C<-ansi> and C<-pedantic> both being a poorly defined collection of
warnings, and so forth), gcc is still a useful tool in keeping our
coding nose clean.

The C<-Wall> is by default on.

It would be nice for C<-pedantic>) to be on always, but unfortunately
it is not safe on all platforms - for example fatal conflicts with the
system headers (Solaris being a prime example).  If Configure
C<-Dgccansipedantic> is used, the C<cflags> frontend selects
C<-pedantic> for the platforms where it is known to be safe.

The following extra flags are added:

=over 4

=item *

C<-Wendif-labels>

=item *

C<-Wextra>

=item *

C<-Wc++-compat>

=item *

C<-Wwrite-strings>
