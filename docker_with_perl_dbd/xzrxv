          <type name="PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none">
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <enumeration name="PixbufRotation"
                 glib:type-name="GdkPixbufRotation"
                 glib:get-type="gdk_pixbuf_rotation_get_type"
                 c:type="GdkPixbufRotation">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-transform.h"
           line="80">The possible rotations which can be passed to gdk_pixbuf_rotate_simple().

To make them easier to use, their numerical values are the actual degrees.</doc>
      <member name="none"
              value="0"
              c:identifier="GDK_PIXBUF_ROTATE_NONE"
              glib:nick="none"
              glib:name="GDK_PIXBUF_ROTATE_NONE">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-transform.h"
             line="82">No rotation.</doc>
      </member>
      <member name="counterclockwise"
              value="90"
              c:identifier="GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE"
              glib:nick="counterclockwise"
              glib:name="GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-transform.h"
             line="83">Rotate by 90 degrees.</doc>
      </member>
      <member name="upsidedown"
              value="180"
              c:identifier="GDK_PIXBUF_ROTATE_UPSIDEDOWN"
              glib:nick="upsidedown"
              glib:name="GDK_PIXBUF_ROTATE_UPSIDEDOWN">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-transform.h"
             line="84">Rotate by 180 degrees.</doc>
      </member>
      <member name="clockwise"
              value="270"
              c:identifier="GDK_PIXBUF_ROTATE_CLOCKWISE"
              glib:nick="clockwise"
              glib:name="GDK_PIXBUF_ROTATE_CLOCKWISE">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-transform.h"
             line="85">Rotate by 270 degrees.</doc>
      </member>
    </enumeration>
    <callback name="PixbufSaveFunc" c:type="GdkPixbufSaveFunc" version="2.4">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-core.h"
           line="346">Save functions used by [method@GdkPixbuf.Pixbuf.save_to_callback].

This function is called once for each block of bytes that is "written"
by `gdk_pixbuf_save_to_callback()`.

If successful it should return `TRUE`; if an error occurs it should set
`error` and return `FALSE`, in which case `gdk_pixbuf_save_to_callback()`
will fail with the same error.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-core.h" line="367"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-core.h"
             line="362">`TRUE` if successful, `FALSE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-core.h"
               line="348">bytes to be written.</doc>
          <array length="1" zero-terminated="0" c:type="const gchar*">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-core.h"
               line="349">number of bytes in @buf.</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="error"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-core.h"
               line="350">A location to return an error.</doc>
          <type name="GLib.Error" c:type="GError**"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-core.h"
               line="351">user data passed to gdk_pixbuf_save_to_callback().</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="PixbufSimpleAnim"
           c:symbol-prefix="pixbuf_simple_anim"
           c:type="GdkPixbufSimpleAnim"
           parent="PixbufAnimation"
           glib:type-name="GdkPixbufSimpleAnim"
           glib:get-type="gdk_pixbuf_simple_anim_get_type"
           glib:type-struct="PixbufSimpleAnimClass">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixbuf-simple-anim.h"
           line="33">An opaque struct representing a simple animation.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                       line="39"/>
      <constructor name="new"
                   c:identifier="gdk_pixbuf_simple_anim_new"
                   version="2.8">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-simple-anim.c"
             line="413">Creates a new, empty animation.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                         line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-simple-anim.c"
               line="421">a newly allocated #GdkPixbufSimpleAnim</doc>
          <type name="PixbufSimpleAnim" c:type="GdkPixbufSimpleAnim*"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-simple-anim.c"
                 line="415">the width of the animation</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-simple-anim.c"
                 line="416">the height of the animation</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="rate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-simple-anim.c"
                 line="417">the speed of the animation, in frames per second</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_frame"
              c:identifier="gdk_pixbuf_simple_anim_add_frame"
              version="2.8">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-simple-anim.c"
             line="440">Adds a new frame to @animation. The @pixbuf must
have the dimensions specified when the animation
was constructed.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-simple-anim.c"
                 line="442">a #GdkPixbufSimpleAnim</doc>
            <type name="PixbufSimpleAnim" c:type="GdkPixbufSimpleAnim*"/>
          </instance-parameter>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-simple-anim.c"
                 line="443">the pixbuf to add</doc>
            <type name="Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_loop"
              c:identifier="gdk_pixbuf_simple_anim_get_loop"
              glib:get-property="loop"
              version="2.18">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-simple-anim.c"
             line="531">Gets whether @animation should loop indefinitely when it reaches the end.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixbuf-simple-anim.c"
               line="537">%TRUE if the animation loops forever, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-simple-anim.c"
                 line="533">a #GdkPixbufSimpleAnim</doc>
            <type name="PixbufSimpleAnim" c:type="GdkPixbufSimpleAnim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_loop"
              c:identifier="gdk_pixbuf_simple_anim_set_loop"
              glib:set-property="loop"
              version="2.18">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-simple-anim.c"
             line="510">Sets whether @animation should loop indefinitely when it reaches the end.</doc>
        <source-position filename="gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-simple-anim.c"
                 line="512">a #GdkPixbufSimpleAnim</doc>
            <type name="PixbufSimpleAnim" c:type="GdkPixbufSimpleAnim*"/>
          </instance-parameter>
          <parameter name="loop" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixbuf-simple-anim.c"
                 line="513">whether to loop the animation</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="loop"
                version="2.18"
                writable="1"
                transfer-ownership="none"
                setter="set_loop"
                getter="get_loop">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixbuf-simple-anim.c"
             line="152">Whether the animation should loop when it reaches the end.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="PixbufSimpleAnimClass"
            c:type="GdkPixbufSimpleAnimClass"
            disguised="1"
            glib:is-gtype-struct-for="PixbufSimpleAnim">
      <source-position filename="gdk-pixbuf/gdk-pixbuf-simple-anim.h"
                       line="39"/>
    </record>
    <class name="PixbufSimpleAnimIter"
           c:symbol-prefix="pixbuf_simple_anim_iter"
           parent="PixbufAnimationIter"
           glib:type-name="GdkPixbufSimpleAnimIter"
           glib:get-type="gdk_pixbuf_simple_anim_iter_get_type">
    </class>
    <function name="pixbuf_error_quark"
              c:identifier="gdk_pixbuf_error_quark"
              moved-to="PixbufError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
  </namespace>
</repository>
                                                                                                                                                                                                                                                                                                                              usr/share/gir-1.0/GdkPixdata-2.0.gir                                                                0000644 0000000 0000000 00000050671 14632657344 015303  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        <?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GdkPixbuf" version="2.0"/>
  <package name="gdk-pixbuf-2.0"/>
  <c:include name="gdk-pixbuf/gdk-pixdata.h"/>
  <namespace name="GdkPixdata"
             version="2.0"
             shared-library="libgdk_pixbuf-2.0.so.0"
             c:identifier-prefixes="Gdk"
             c:symbol-prefixes="gdk">
    <constant name="PIXBUF_MAGIC_NUMBER"
              value="1197763408"
              c:type="GDK_PIXBUF_MAGIC_NUMBER">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixdata.h"
           line="25">Magic number for #GdkPixdata structures.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixdata.h" line="30"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PIXDATA_HEADER_LENGTH"
              value="24"
              c:type="GDK_PIXDATA_HEADER_LENGTH"
              deprecated="1"
              deprecated-version="2.32">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixdata.h"
           line="83">The length of a #GdkPixdata structure without the @pixel_data pointer.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixdata.h" line="90"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="Pixdata"
            c:type="GdkPixdata"
            deprecated="1"
            deprecated-version="2.32">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixdata.c"
           line="25">A pixel buffer suitable for serialization and streaming.

Using `GdkPixdata`, images can be compiled into an application,
making it unnecessary to refer to external image files at runtime.

`GdkPixbuf` includes a utility named `gdk-pixbuf-csource`, which
can be used to convert image files into `GdkPixdata` structures suitable
for inclusion in C sources. To convert the `GdkPixdata` structures back
into a `GdkPixbuf`, use `gdk_pixbuf_from_pixdata()`.</doc>
      <doc-deprecated xml:space="preserve">`GdkPixdata` should not be used any more. `GResource`
  should be used to save the original compressed images inside the
  program's binary</doc-deprecated>
      <source-position filename="gdk-pixbuf/gdk-pixdata.h" line="81"/>
      <field name="magic" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.c"
             line="27">magic number. A valid `GdkPixdata` structure must have
  `GDK_PIXBUF_MAGIC_NUMBER` here</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="length" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.c"
             line="29">less than 1 to disable length checks, otherwise
  `GDK_PIXDATA_HEADER_LENGTH` plus the length of `pixel_data`</doc>
        <type name="gint32" c:type="gint32"/>
      </field>
      <field name="pixdata_type" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.c"
             line="31">information about colorspace, sample width and
  encoding, in a `GdkPixdataType`</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="rowstride" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.c"
             line="33">Distance in bytes between rows</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="width" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.c"
             line="34">Width of the image in pixels</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="height" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.c"
             line="35">Height of the image in pixels</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="pixel_data" writable="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.c"
             line="36">`width` x `height`
  pixels, encoded according to `pixdata_type` and `rowstride`</doc>
        <array zero-terminated="0" c:type="guint8*">
          <type name="guint8"/>
        </array>
      </field>
      <method name="deserialize"
              c:identifier="gdk_pixdata_deserialize"
              deprecated="1"
              deprecated-version="2.32"
              throws="1">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.c"
             line="199">Deserializes (reconstruct) a #GdkPixdata structure from a byte stream.

The byte stream consists of a straightforward writeout of the
`GdkPixdata` fields in network byte order, plus the `pixel_data`
bytes the structure points to.

The `pixdata` contents are reconstructed byte by byte and are checked
for validity.

This function may fail with `GDK_PIXBUF_ERROR_CORRUPT_IMAGE`
or `GDK_PIXBUF_ERROR_UNKNOWN_TYPE`.</doc>
        <doc-deprecated xml:space="preserve">Use `GResource` instead.</doc-deprecated>
        <source-position filename="gdk-pixbuf/gdk-pixdata.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixdata.c"
               line="219">Upon successful deserialization `TRUE` is returned,
`FALSE` otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixdata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixdata.c"
                 line="201">a #GdkPixdata structure to be filled in.</doc>
            <type name="Pixdata" c:type="GdkPixdata*"/>
          </instance-parameter>
          <parameter name="stream_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixdata.c"
                 line="202">length of the stream used for deserialization.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixdata.c"
                 line="203">stream of bytes containing a
  serialized #GdkPixdata structure.</doc>
            <array length="0" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="from_pixbuf"
              c:identifier="gdk_pixdata_from_pixbuf"
              introspectable="0"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.c"
             line="338">Converts a `GdkPixbuf` to a `GdkPixdata`.

If `use_rle` is `TRUE`, the pixel data is run-length encoded into
newly-allocated memory and a pointer to that memory is returned.</doc>
        <doc-deprecated xml:space="preserve">Use #GResource instead.</doc-deprecated>
        <source-position filename="gdk-pixbuf/gdk-pixdata.h" line="102"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixdata.c"
               line="349">If `use_rle` is
  `TRUE`, a pointer to the newly-allocated memory for the run-length
  encoded pixel data, otherwise `NULL`.</doc>
          <array zero-terminated="0" c:type="gpointer">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="pixdata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixdata.c"
                 line="340">a `GdkPixdata` to fill.</doc>
            <type name="Pixdata" c:type="GdkPixdata*"/>
          </instance-parameter>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixdata.c"
                 line="341">the data to fill `pixdata` with.</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="const GdkPixbuf*"/>
          </parameter>
          <parameter name="use_rle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixdata.c"
                 line="342">whether to use run-length encoding for the pixel data.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize"
              c:identifier="gdk_pixdata_serialize"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.c"
             line="110">Serializes a #GdkPixdata structure into a byte stream.
The byte stream consists of a straightforward writeout of the
#GdkPixdata fields in network byte order, plus the @pixel_data
bytes the structure points to.</doc>
        <doc-deprecated xml:space="preserve">Use #GResource instead.</doc-deprecated>
        <source-position filename="gdk-pixbuf/gdk-pixdata.h" line="94"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixdata.c"
               line="120">A
newly-allocated string containing the serialized #GdkPixdata
structure.</doc>
          <array length="0" zero-terminated="0" c:type="guint8*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="pixdata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixdata.c"
                 line="112">a valid #GdkPixdata structure to serialize.</doc>
            <type name="Pixdata" c:type="const GdkPixdata*"/>
          </instance-parameter>
          <parameter name="stream_length_p"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixdata.c"
                 line="113">location to store the resulting stream length in.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_csource"
              c:identifier="gdk_pixdata_to_csource"
              deprecated="1"
              deprecated-version="2.32">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.c"
             line="711">Generates C source code suitable for compiling images directly
into programs.

GdkPixbuf ships with a program called `gdk-pixbuf-csource`, which offers
a command line interface to this function.</doc>
        <doc-deprecated xml:space="preserve">Use #GResource instead.</doc-deprecated>
        <source-position filename="gdk-pixbuf/gdk-pixdata.h" line="156"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixdata.c"
               line="723">a newly-allocated string buffer containing
  the C source form of `pixdata`.</doc>
          <type name="GLib.String" c:type="GString*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pixdata" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixdata.c"
                 line="713">a `GdkPixdata` to convert to C source</doc>
            <type name="Pixdata" c:type="GdkPixdata*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixdata.c"
                 line="714">used for naming generated data structures or macros</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="dump_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk-pixbuf/gdk-pixdata.c"
                 line="715">the kind of C source to be generated</doc>
            <type name="PixdataDumpType" c:type="GdkPixdataDumpType"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="PixdataDumpType"
              deprecated="1"
              deprecated-version="2.32"
              c:type="GdkPixdataDumpType">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixdata.h"
           line="109">An enumeration which is used by gdk_pixdata_to_csource() to
determine the form of C source to be generated. The three values
@GDK_PIXDATA_DUMP_PIXDATA_STREAM, @GDK_PIXDATA_DUMP_PIXDATA_STRUCT
and @GDK_PIXDATA_DUMP_MACROS are mutually exclusive, as are
@GDK_PIXBUF_DUMP_GTYPES and @GDK_PIXBUF_DUMP_CTYPES. The remaining
elements are optional flags that can be freely added.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixdata.h" line="152"/>
      <member name="pixdata_stream"
              value="0"
              c:identifier="GDK_PIXDATA_DUMP_PIXDATA_STREAM">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.h"
             line="111">Generate pixbuf data stream (a single
   string containing a serialized #GdkPixdata structure in network byte
   order).</doc>
      </member>
      <member name="pixdata_struct"
              value="1"
              c:identifier="GDK_PIXDATA_DUMP_PIXDATA_STRUCT">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.h"
             line="114">Generate #GdkPixdata structure (needs
   the #GdkPixdata structure definition from gdk-pixdata.h).</doc>
      </member>
      <member name="macros" value="2" c:identifier="GDK_PIXDATA_DUMP_MACROS">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.h"
             line="116">Generate &lt;function&gt;*_ROWSTRIDE&lt;/function&gt;,
   &lt;function&gt;*_WIDTH&lt;/function&gt;, &lt;function&gt;*_HEIGHT&lt;/function&gt;,
   &lt;function&gt;*_BYTES_PER_PIXEL&lt;/function&gt; and
   &lt;function&gt;*_RLE_PIXEL_DATA&lt;/function&gt; or &lt;function&gt;*_PIXEL_DATA&lt;/function&gt;
   macro definitions for the image.</doc>
      </member>
      <member name="gtypes" value="0" c:identifier="GDK_PIXDATA_DUMP_GTYPES">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.h"
             line="121">Generate GLib data types instead of
   standard C data types.</doc>
      </member>
      <member name="ctypes" value="256" c:identifier="GDK_PIXDATA_DUMP_CTYPES">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.h"
             line="123">Generate standard C data types instead of
   GLib data types.</doc>
      </member>
      <member name="static" value="512" c:identifier="GDK_PIXDATA_DUMP_STATIC">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.h"
             line="125">Generate static symbols.</doc>
      </member>
      <member name="const" value="1024" c:identifier="GDK_PIXDATA_DUMP_CONST">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.h"
             line="126">Generate const symbols.</doc>
      </member>
      <member name="rle_decoder"
              value="65536"
              c:identifier="GDK_PIXDATA_DUMP_RLE_DECODER">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.h"
             line="127">Provide a &lt;function&gt;*_RUN_LENGTH_DECODE(image_buf, rle_data, size, bpp)&lt;/function&gt;
   macro definition  to  decode  run-length encoded image data.</doc>
      </member>
    </bitfield>
    <bitfield name="PixdataType"
              deprecated="1"
              deprecated-version="2.32"
              c:type="GdkPixdataType">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixdata.h"
           line="32">An enumeration containing three sets of flags for a #GdkPixdata struct:
one for the used colorspace, one for the width of the samples and one
for the encoding of the pixel data.</doc>
      <source-position filename="gdk-pixbuf/gdk-pixdata.h" line="67"/>
      <member name="color_type_rgb"
              value="1"
              c:identifier="GDK_PIXDATA_COLOR_TYPE_RGB">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.h"
             line="34">each pixel has red, green and blue samples.</doc>
      </member>
      <member name="color_type_rgba"
              value="2"
              c:identifier="GDK_PIXDATA_COLOR_TYPE_RGBA">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.h"
             line="35">each pixel has red, green and blue samples
   and an alpha value.</doc>
      </member>
      <member name="color_type_mask"
              value="255"
              c:identifier="GDK_PIXDATA_COLOR_TYPE_MASK">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.h"
             line="37">mask for the colortype flags of the enum.</doc>
      </member>
      <member name="sample_width_8"
              value="65536"
              c:identifier="GDK_PIXDATA_SAMPLE_WIDTH_8">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.h"
             line="38">each sample has 8 bits.</doc>
      </member>
      <member name="sample_width_mask"
              value="983040"
              c:identifier="GDK_PIXDATA_SAMPLE_WIDTH_MASK">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.h"
             line="39">mask for the sample width flags of the enum.</doc>
      </member>
      <member name="encoding_raw"
              value="16777216"
              c:identifier="GDK_PIXDATA_ENCODING_RAW">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.h"
             line="40">the pixel data is in raw form.</doc>
      </member>
      <member name="encoding_rle"
              value="33554432"
              c:identifier="GDK_PIXDATA_ENCODING_RLE">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.h"
             line="41">the pixel data is run-length encoded. Runs may
   be up to 127 bytes long; their length is stored in a single byte
   preceding the pixel data for the run. If a run is constant, its length
   byte has the high bit set and the pixel data consists of a single pixel
   which must be repeated.</doc>
      </member>
      <member name="encoding_mask"
              value="251658240"
              c:identifier="GDK_PIXDATA_ENCODING_MASK">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.h"
             line="46">mask for the encoding flags of the enum.</doc>
      </member>
    </bitfield>
    <function name="pixbuf_from_pixdata"
              c:identifier="gdk_pixbuf_from_pixdata"
              deprecated="1"
              deprecated-version="2.32"
              throws="1">
      <doc xml:space="preserve"
           filename="gdk-pixbuf/gdk-pixdata.c"
           line="438">Converts a `GdkPixdata` to a `GdkPixbuf`.

If `copy_pixels` is `TRUE` or if the pixel data is run-length-encoded,
the pixel data is copied into newly-allocated memory; otherwise it is
reused.</doc>
      <doc-deprecated xml:space="preserve">Use `GResource` instead.</doc-deprecated>
      <source-position filename="gdk-pixbuf/gdk-pixdata.h" line="106"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gdk-pixbuf/gdk-pixdata.c"
             line="451">a new pixbuf</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="pixdata" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixdata.c"
               line="440">a #GdkPixdata to convert into a `GdkPixbuf`.</doc>
          <type name="Pixdata" c:type="const GdkPixdata*"/>
        </parameter>
        <parameter name="copy_pixels" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk-pixbuf/gdk-pixdata.c"
               line="441">whether to copy raw pixel data; run-length encoded
  pixel data is always copied.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
                                                                       usr/share/gir-1.0/Rsvg-2.0.gir                                                                      0000644 0000000 0000000 00000375504 14461506031 014173  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        <?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="cairo" version="1.0"/>
  <package name="librsvg-2.0"/>
  <c:include name="librsvg/rsvg.h"/>
  <namespace name="Rsvg"
             version="2.0"
             shared-library="librsvg-2.so.2"
             c:identifier-prefixes="Rsvg"
             c:symbol-prefixes="rsvg,librsvg">
    <function-macro name="CHECK_VERSION"
                    c:identifier="LIBRSVG_CHECK_VERSION"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="rsvg-features.h"
           line="103">This C macro returns `TRUE` if the the version of librsvg being
compiled against is the same or newer than the specified version.

Note that this a compile-time check for C programs.  If you want a
run-time check for the version of librsvg being used, or if you are
using another programming language, see the variables
`rsvg_major_version`, `rsvg_minor_version`, `rsvg_micro_version`
instead.</doc>
      <source-position filename="rsvg-features.h" line="118"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="rsvg-features.h"
               line="105">component for the major version to check</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="rsvg-features.h"
               line="106">component for the minor version to check</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="rsvg-features.h"
               line="107">component for the micro version to check</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_FOR"
                    c:identifier="RSVG_DEPRECATED_FOR"
                    introspectable="0">
      <source-position filename="rsvg.h" line="47"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <record name="DimensionData"
            c:type="RsvgDimensionData"
            deprecated="1"
            deprecated-version="2.46.">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="388">Dimensions of an SVG image from [method@Rsvg.Handle.get_dimensions], or an
individual element from [method@Rsvg.Handle.get_dimensions_sub].  Please see
the deprecation documentation for those functions.</doc>
      <doc-deprecated xml:space="preserve">Use [method@Rsvg.Handle.get_intrinsic_size_in_pixels] or
[method@Rsvg.Handle.get_geometry_for_layer] instead.</doc-deprecated>
      <source-position filename="rsvg.h" line="407"/>
      <field name="width" writable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="390">SVG's width, in pixels</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="height" writable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="391">SVG's height, in pixels</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="em" writable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="392">SVG's original width, unmodified by `RsvgSizeFunc`</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="ex" writable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="393">SVG's original height, unmodified by `RsvgSizeFunc`</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <enumeration name="Error"
                 glib:type-name="RsvgError"
                 glib:get-type="rsvg_error_get_type"
                 c:type="RsvgError"
                 glib:error-domain="rsvg-error-quark">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="55">An enumeration representing possible errors</doc>
      <member name="failed"
              value="0"
              c:identifier="RSVG_ERROR_FAILED"
              glib:nick="failed"
              glib:name="RSVG_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="57">the request failed</doc>
      </member>
      <function name="quark" c:identifier="rsvg_error_quark">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="67">The error domain for RSVG</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="72">The error domain</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <function-macro name="HANDLE"
                    c:identifier="RSVG_HANDLE"
                    introspectable="0">
      <source-position filename="rsvg.h" line="352"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="HANDLE_CLASS"
                    c:identifier="RSVG_HANDLE_CLASS"
                    introspectable="0">
      <source-position filename="rsvg.h" line="353"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="HANDLE_GET_CLASS"
                    c:identifier="RSVG_HANDLE_GET_CLASS"
                    introspectable="0">
      <source-position filename="rsvg.h" line="356"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Handle"
           c:symbol-prefix="handle"
           c:type="RsvgHandle"
           parent="GObject.Object"
           glib:type-name="RsvgHandle"
           glib:get-type="rsvg_handle_get_type"
           glib:type-struct="HandleClass">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="81">[class@Rsvg.Handle] loads an SVG document into memory.

This is the main entry point into the librsvg library.  An [class@Rsvg.Handle] is an
object that represents SVG data in memory.  Your program creates an
[class@Rsvg.Handle] from an SVG file, or from a memory buffer that contains SVG data,
or in the most general form, from a `GInputStream` that will provide SVG data.

Librsvg can load SVG images and render them to Cairo surfaces,
using a mixture of SVG's [static mode] and [secure static mode].
Librsvg does not do animation nor scripting, and can load
references to external data only in some situations; see below.

Librsvg supports reading [SVG 1.1](https://www.w3.org/TR/SVG11/) data, and is gradually
adding support for features in [SVG 2](https://www.w3.org/TR/SVG2/).  Librsvg also
supports SVGZ files, which are just an SVG stream compressed with the GZIP algorithm.

[static mode]: https://www.w3.org/TR/SVG2/conform.html#static-mode
[secure static mode]: https://www.w3.org/TR/SVG2/conform.html#secure-static-mode

# The "base file" and resolving references to external files

When you load an SVG, librsvg needs to know the location of the "base file"
for it.  This is so that librsvg can determine the location of referenced
entities.  For example, say you have an SVG in `/foo/bar/foo.svg`
and that it has an image element like this:

```
&lt;image href="resources/foo.png" .../&gt;
```

In this case, librsvg needs to know the location of the toplevel
`/foo/bar/foo.svg` so that it can generate the appropriate
reference to `/foo/bar/resources/foo.png`.

## Security and locations of referenced files

When processing an SVG, librsvg will only load referenced files if they are
in the same directory as the base file, or in a subdirectory of it.  That is,
if the base file is `/foo/bar/baz.svg`, then librsvg will
only try to load referenced files (from SVG's
`&lt;image&gt;` element, for example, or from content
included through XML entities) if those files are in `/foo/bar/&lt;anything&gt;` or in `/foo/bar/&lt;anything&gt;\/.../&lt;anything&gt;`.
This is so that malicious SVG files cannot include files that are in a directory above.

The full set of rules for deciding which URLs may be loaded is as follows;
they are applied in order.  A referenced URL will not be loaded as soon as
one of these rules fails:

1. All `data:` URLs may be loaded.  These are sometimes used
   to include raster image data, encoded as base-64, directly in an SVG file.

2. URLs with queries ("?") or fragment identifiers ("#") are not allowed.

3. All URL schemes other than data: in references require a base URL.  For
   example, this means that if you load an SVG with
   [ctor@Rsvg.Handle.new_from_data] without calling [method@Rsvg.Handle.set_base_uri],
   then any referenced files will not be allowed (e.g. raster images to be
   loaded from other files will not work).

4. If referenced URLs are absolute, rather than relative, then they must
   have the same scheme as the base URL.  For example, if the base URL has a
   `file` scheme, then all URL references inside the SVG must
   also have the `file` scheme, or be relative references which
   will be resolved against the base URL.

5. If referenced URLs have a `resource` scheme, that is,
   if they are included into your binary program with GLib's resource
   mechanism, they are allowed to be loaded (provided that the base URL is
   also a `resource`, per the previous rule).

6. Otherwise, non-`file` schemes are not allowed.  For
   example, librsvg will not load `http` resources, to keep
   malicious SVG data from "phoning home".

7. A relative URL must resolve to the same directory as the base URL, or to
   one of its subdirectories.  Librsvg will canonicalize filenames, by
   removing ".." path components and resolving symbolic links, to decide whether
   files meet these conditions.

# Loading an SVG with GIO

This is the easiest and most resource-efficient way of loading SVG data into
an [class@Rsvg.Handle].

If you have a `GFile` that stands for an SVG file, you can simply call
[ctor@Rsvg.Handle.new_from_gfile_sync] to load an [class@Rsvg.Handle] from it.

Alternatively, if you have a `GInputStream`, you can use
[ctor@Rsvg.Handle.new_from_stream_sync].

Both of those methods allow specifying a `GCancellable`, so the loading
process can be cancelled from another thread.

## Loading an SVG from memory

If you already have SVG data in a byte buffer in memory, you can create a
memory input stream with [ctor@Gio.MemoryInputStream.new_from_data] and feed that
to [ctor@Rsvg.Handle.new_from_stream_sync].

Note that in this case, it is important that you specify the base_file for
the in-memory SVG data.  Librsvg uses the base_file to resolve links to
external content, like raster images.

# Loading an SVG without GIO

You can load an [class@Rsvg.Handle] from a simple filename or URI with
[ctor@Rsvg.Handle.new_from_file].  Note that this is a blocking operation; there
is no way to cancel it if loading a remote URI takes a long time.  Also, note that
