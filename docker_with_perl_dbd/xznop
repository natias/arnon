    XtDestructor 	/* destructor */
);

extern void XtConvert( /* obsolete */
    Widget 		/* widget */,
    _Xconst _XtString 	/* from_type */,
    XrmValue*		/* from */,
    _Xconst _XtString 	/* to_type */,
    XrmValue*		/* to_return */
);

extern void XtDirectConvert( /* obsolete */
    XtConverter 	/* converter */,
    XrmValuePtr 	/* args */,
    Cardinal 		/* num_args */,
    XrmValuePtr 	/* from */,
    XrmValue*		/* to_return */
);

/****************************************************************
 *
 * Translation Management
 *
 ****************************************************************/

extern XtTranslations XtParseTranslationTable(
    _Xconst _XtString	/* table */
);

extern XtAccelerators XtParseAcceleratorTable(
    _Xconst _XtString	/* source */
);

extern void XtOverrideTranslations(
    Widget 		/* widget */,
    XtTranslations 	/* translations */
);

extern void XtAugmentTranslations(
    Widget 		/* widget */,
    XtTranslations 	/* translations */
);

extern void XtInstallAccelerators(
    Widget 		/* destination */,
    Widget		/* source */
);

extern void XtInstallAllAccelerators(
    Widget 		/* destination */,
    Widget		/* source */
);

extern void XtUninstallTranslations(
    Widget 		/* widget */
);

extern void XtAppAddActions(
    XtAppContext 	/* app_context */,
    XtActionList 	/* actions */,
    Cardinal 		/* num_actions */
);

extern void XtAddActions( /* obsolete */
    XtActionList 	/* actions */,
    Cardinal 		/* num_actions */
);

extern XtActionHookId XtAppAddActionHook(
    XtAppContext 	/* app_context */,
    XtActionHookProc 	/* proc */,
    XtPointer 		/* client_data */
);

extern void XtRemoveActionHook(
    XtActionHookId 	/* id */
);

extern void XtGetActionList(
    WidgetClass		/* widget_class */,
    XtActionList*	/* actions_return */,
    Cardinal*		/* num_actions_return */
);

extern void XtCallActionProc(
    Widget		/* widget */,
    _Xconst _XtString	/* action */,
    XEvent*		/* event */,
    String*		/* params */,
    Cardinal		/* num_params */
);

extern void XtRegisterGrabAction(
    XtActionProc 	/* action_proc */,
    _XtBoolean 		/* owner_events */,
    unsigned int 	/* event_mask */,
    int			/* pointer_mode */,
    int	 		/* keyboard_mode */
);

extern void XtSetMultiClickTime(
    Display*		/* dpy */,
    int 		/* milliseconds */
);

extern int XtGetMultiClickTime(
    Display*		/* dpy */
);

extern KeySym XtGetActionKeysym(
    XEvent*		/* event */,
    Modifiers*		/* modifiers_return */
);

/***************************************************************
 *
 * Keycode and Keysym procedures for translation management
 *
 ****************************************************************/

extern void XtTranslateKeycode(
    Display*		/* dpy */,
    _XtKeyCode 		/* keycode */,
    Modifiers 		/* modifiers */,
    Modifiers*		/* modifiers_return */,
    KeySym*		/* keysym_return */
);

extern void XtTranslateKey(
    Display*		/* dpy */,
    _XtKeyCode		/* keycode */,
    Modifiers		/* modifiers */,
    Modifiers*		/* modifiers_return */,
    KeySym*		/* keysym_return */
);

extern void XtSetKeyTranslator(
    Display*		/* dpy */,
    XtKeyProc 		/* proc */
);

extern void XtRegisterCaseConverter(
    Display*		/* dpy */,
    XtCaseProc 		/* proc */,
    KeySym 		/* start */,
    KeySym 		/* stop */
);

extern void XtConvertCase(
    Display*		/* dpy */,
    KeySym 		/* keysym */,
    KeySym*		/* lower_return */,
    KeySym*		/* upper_return */
);

/****************************************************************
 *
 * Event Management
 *
 ****************************************************************/

/* XtAllEvents is valid only for XtRemoveEventHandler and
 * XtRemoveRawEventHandler; don't use it to select events!
 */
#define XtAllEvents ((EventMask) -1L)

extern void XtAddEventHandler(
    Widget 		/* widget */,
    EventMask 		/* event_mask */,
    _XtBoolean 		/* nonmaskable */,
    XtEventHandler 	/* proc */,
    XtPointer 		/* closure */
);

extern void XtRemoveEventHandler(
    Widget 		/* widget */,
    EventMask 		/* event_mask */,
    _XtBoolean 		/* nonmaskable */,
    XtEventHandler 	/* proc */,
    XtPointer 		/* closure */
);

extern void XtAddRawEventHandler(
    Widget 		/* widget */,
    EventMask 		/* event_mask */,
    _XtBoolean 		/* nonmaskable */,
    XtEventHandler 	/* proc */,
    XtPointer 		/* closure */
);

extern void XtRemoveRawEventHandler(
    Widget 		/* widget */,
    EventMask 		/* event_mask */,
    _XtBoolean 		/* nonmaskable */,
    XtEventHandler 	/* proc */,
    XtPointer 		/* closure */
);

extern void XtInsertEventHandler(
    Widget 		/* widget */,
    EventMask 		/* event_mask */,
    _XtBoolean 		/* nonmaskable */,
    XtEventHandler 	/* proc */,
    XtPointer 		/* closure */,
    XtListPosition 	/* position */
);

extern void XtInsertRawEventHandler(
    Widget 		/* widget */,
    EventMask 		/* event_mask */,
    _XtBoolean 		/* nonmaskable */,
    XtEventHandler 	/* proc */,
    XtPointer 		/* closure */,
    XtListPosition 	/* position */
);

extern XtEventDispatchProc XtSetEventDispatcher(
    Display*		/* dpy */,
    int			/* event_type */,
    XtEventDispatchProc	/* proc */
);

extern Boolean XtDispatchEventToWidget(
    Widget		/* widget */,
    XEvent*		/* event */
);

extern void XtInsertEventTypeHandler(
    Widget		/* widget */,
    int			/* type */,
    XtPointer		/* select_data */,
    XtEventHandler	/* proc */,
    XtPointer		/* closure */,
    XtListPosition	/* position */
);

extern void XtRemoveEventTypeHandler(
    Widget		/* widget */,
    int			/* type */,
    XtPointer		/* select_data */,
    XtEventHandler	/* proc */,
    XtPointer		/* closure */
);

extern EventMask XtBuildEventMask(
    Widget 		/* widget */
);

extern void XtRegisterExtensionSelector(
    Display*		/* dpy */,
    int			/* min_event_type */,
    int			/* max_event_type */,
    XtExtensionSelectProc /* proc */,
    XtPointer		/* client_data */
);

extern void XtAddGrab(
    Widget 		/* widget */,
    _XtBoolean 		/* exclusive */,
    _XtBoolean 		/* spring_loaded */
);

extern void XtRemoveGrab(
    Widget 		/* widget */
);

extern void XtProcessEvent( /* obsolete */
    XtInputMask 		/* mask */
);

extern void XtAppProcessEvent(
    XtAppContext 		/* app_context */,
    XtInputMask 		/* mask */
);

extern void XtMainLoop( /* obsolete */
    void
);

extern void XtAppMainLoop(
    XtAppContext 		/* app_context */
);

extern void XtAddExposureToRegion(
    XEvent*		/* event */,
    Region 		/* region */
);

extern void XtSetKeyboardFocus(
    Widget		/* subtree */,
    Widget 		/* descendent */
);

extern Widget XtGetKeyboardFocusWidget(
    Widget		/* widget */
);

extern XEvent* XtLastEventProcessed(
    Display*		/* dpy */
);

extern Time XtLastTimestampProcessed(
    Display*		/* dpy */
);

/****************************************************************
 *
 * Event Gathering Routines
 *
 ****************************************************************/

extern XtIntervalId XtAddTimeOut( /* obsolete */
    unsigned long 	/* interval */,
    XtTimerCallbackProc /* proc */,
    XtPointer 		/* closure */
);

extern XtIntervalId XtAppAddTimeOut(
    XtAppContext 	/* app_context */,
    unsigned long 	/* interval */,
    XtTimerCallbackProc /* proc */,
    XtPointer 		/* closure */
);

extern void XtRemoveTimeOut(
    XtIntervalId 	/* timer */
);

extern XtInputId XtAddInput( /* obsolete */
    int 		/* source */,
    XtPointer 		/* condition */,
    XtInputCallbackProc /* proc */,
    XtPointer 		/* closure */
);

extern XtInputId XtAppAddInput(
    XtAppContext       	/* app_context */,
    int 		/* source */,
    XtPointer 		/* condition */,
    XtInputCallbackProc /* proc */,
    XtPointer 		/* closure */
);

extern void XtRemoveInput(
    XtInputId 		/* id */
);

extern XtSignalId XtAddSignal(
    XtSignalCallbackProc /* proc */,
    XtPointer		/* closure */);

extern XtSignalId XtAppAddSignal(
    XtAppContext       	/* app_context */,
    XtSignalCallbackProc /* proc */,
    XtPointer 		/* closure */
);

extern void XtRemoveSignal(
    XtSignalId 		/* id */
);

extern void XtNoticeSignal(
    XtSignalId		/* id */
);

extern void XtNextEvent( /* obsolete */
    XEvent* 		/* event */
);

extern void XtAppNextEvent(
    XtAppContext 	/* app_context */,
    XEvent*		/* event_return */
);

#define XtIMXEvent		1
#define XtIMTimer		2
#define XtIMAlternateInput	4
#define XtIMSignal		8
#define XtIMAll (XtIMXEvent | XtIMTimer | XtIMAlternateInput | XtIMSignal)

extern Boolean XtPending( /* obsolete */
    void
);

extern XtInputMask XtAppPending(
    XtAppContext 	/* app_context */
);

extern XtBlockHookId XtAppAddBlockHook(
    XtAppContext 	/* app_context */,
    XtBlockHookProc 	/* proc */,
    XtPointer 		/* client_data */
);

extern void XtRemoveBlockHook(
    XtBlockHookId 	/* id */
);

/****************************************************************
 *
 * Random utility routines
 *
 ****************************************************************/

#define XtIsRectObj(object)	(_XtCheckSubclassFlag(object, (XtEnum)0x02))
#define XtIsWidget(object)	(_XtCheckSubclassFlag(object, (XtEnum)0x04))
#define XtIsComposite(widget)	(_XtCheckSubclassFlag(widget, (XtEnum)0x08))
#define XtIsConstraint(widget)	(_XtCheckSubclassFlag(widget, (XtEnum)0x10))
#define XtIsShell(widget)	(_XtCheckSubclassFlag(widget, (XtEnum)0x20))

#undef XtIsOverrideShell
extern Boolean XtIsOverrideShell(Widget /* object */);
#define XtIsOverrideShell(widget) \
    (_XtIsSubclassOf(widget, (WidgetClass)overrideShellWidgetClass, \
		     (WidgetClass)shellWidgetClass, (XtEnum)0x20))

#define XtIsWMShell(widget)	(_XtCheckSubclassFlag(widget, (XtEnum)0x40))

#undef XtIsVendorShell
extern Boolean XtIsVendorShell(Widget /* object */);
#define XtIsVendorShell(widget)	\
    (_XtIsSubclassOf(widget, (WidgetClass)vendorShellWidgetClass, \
		     (WidgetClass)wmShellWidgetClass, (XtEnum)0x40))

#undef XtIsTransientShell
extern Boolean XtIsTransientShell(Widget /* object */);
#define XtIsTransientShell(widget) \
    (_XtIsSubclassOf(widget, (WidgetClass)transientShellWidgetClass, \
		     (WidgetClass)wmShellWidgetClass, (XtEnum)0x40))
#define XtIsTopLevelShell(widget) (_XtCheckSubclassFlag(widget, (XtEnum)0x80))

#undef XtIsApplicationShell
extern Boolean XtIsApplicationShell(Widget /* object */);
#define XtIsApplicationShell(widget) \
    (_XtIsSubclassOf(widget, (WidgetClass)applicationShellWidgetClass, \
		     (WidgetClass)topLevelShellWidgetClass, (XtEnum)0x80))

#undef XtIsSessionShell
extern Boolean XtIsSessionShell(Widget /* object */);
#define XtIsSessionShell(widget) \
    (_XtIsSubclassOf(widget, (WidgetClass)sessionShellWidgetClass, \
		     (WidgetClass)topLevelShellWidgetClass, (XtEnum)0x80))

extern void XtRealizeWidget(
    Widget 		/* widget */
);

void XtUnrealizeWidget(
    Widget 		/* widget */
);

extern void XtDestroyWidget(
    Widget 		/* widget */
);

extern void XtSetSensitive(
    Widget 		/* widget */,
    _XtBoolean 		/* sensitive */
);

extern void XtSetMappedWhenManaged(
    Widget 		/* widget */,
    _XtBoolean 		/* mapped_when_managed */
);

extern Widget XtNameToWidget(
    Widget 		/* reference */,
    _Xconst _XtString	/* names */
);

extern Widget XtWindowToWidget(
    Display*		/* display */,
    Window 		/* window */
);

extern XtPointer XtGetClassExtension(
    WidgetClass		/* object_class */,
    Cardinal		/* byte_offset */,
    XrmQuark		/* type */,
    long		/* version */,
    Cardinal		/* record_size */
);

/***************************************************************
 *
 * Arg lists
 *
 ****************************************************************/


#define XtSetArg(arg, n, d) \
    ((void)( (arg).name = (n), (arg).value = (XtArgVal)(d) ))

extern ArgList XtMergeArgLists(
    ArgList 		/* args1 */,
    Cardinal 		/* num_args1 */,
    ArgList 		/* args2 */,
    Cardinal 		/* num_args2 */
);

/***************************************************************
 *
 * Vararg lists
 *
 ****************************************************************/

#define XtVaNestedList  "XtVaNestedList"
#define XtVaTypedArg    "XtVaTypedArg"

extern XtVarArgsList XtVaCreateArgsList(
    XtPointer		/*unused*/, ...
) _X_SENTINEL(0);

/*************************************************************
 *
 * Information routines
 *
 ************************************************************/

#ifndef _XtIntrinsicP_h

/* We're not included from the private file, so define these */

extern Display *XtDisplay(
    Widget 		/* widget */
);

extern Display *XtDisplayOfObject(
    Widget 		/* object */
);

extern Screen *XtScreen(
    Widget 		/* widget */
);

extern Screen *XtScreenOfObject(
    Widget 		/* object */
);

extern Window XtWindow(
    Widget 		/* widget */
);

extern Window XtWindowOfObject(
    Widget 		/* object */
);

extern String XtName(
    Widget 		/* object */
);

extern WidgetClass XtSuperclass(
    Widget 		/* object */
);

extern WidgetClass XtClass(
    Widget 		/* object */
);

extern Widget XtParent(
    Widget 		/* widget */
);

#endif /*_XtIntrinsicP_h*/

#undef XtMapWidget
extern void XtMapWidget(Widget /* w */);
#define XtMapWidget(widget)	XMapWindow(XtDisplay(widget), XtWindow(widget))

#undef XtUnmapWidget
extern void XtUnmapWidget(Widget /* w */);
#define XtUnmapWidget(widget)	\
		XUnmapWindow(XtDisplay(widget), XtWindow(widget))

extern void XtAddCallback(
    Widget 		/* widget */,
    _Xconst _XtString 	/* callback_name */,
    XtCallbackProc 	/* callback */,
    XtPointer 		/* closure */
);

extern void XtRemoveCallback(
    Widget 		/* widget */,
    _Xconst _XtString 	/* callback_name */,
    XtCallbackProc 	/* callback */,
    XtPointer 		/* closure */
);

extern void XtAddCallbacks(
    Widget 		/* widget */,
    _Xconst _XtString	/* callback_name */,
    XtCallbackList 	/* callbacks */
);

extern void XtRemoveCallbacks(
    Widget 		/* widget */,
    _Xconst _XtString 	/* callback_name */,
    XtCallbackList 	/* callbacks */
);

extern void XtRemoveAllCallbacks(
    Widget 		/* widget */,
    _Xconst _XtString 	/* callback_name */
);


extern void XtCallCallbacks(
    Widget 		/* widget */,
    _Xconst _XtString 	/* callback_name */,
    XtPointer 		/* call_data */
);

extern void XtCallCallbackList(
    Widget		/* widget */,
    XtCallbackList 	/* callbacks */,
    XtPointer 		/* call_data */
);

extern XtCallbackStatus XtHasCallbacks(
    Widget 		/* widget */,
    _Xconst _XtString 	/* callback_name */
);

/****************************************************************
 *
 * Geometry Management
 *
 ****************************************************************/


extern XtGeometryResult XtMakeGeometryRequest(
    Widget 		/* widget */,
    XtWidgetGeometry*	/* request */,
    XtWidgetGeometry*	/* reply_return */
);

extern XtGeometryResult XtQueryGeometry(
    Widget 		/* widget */,
    XtWidgetGeometry*	/* intended */,
    XtWidgetGeometry*	/* preferred_return */
);

extern Widget XtCreatePopupShell(
    _Xconst _XtString	/* name */,
    WidgetClass 	/* widgetClass */,
    Widget 		/* parent */,
    ArgList 		/* args */,
    Cardinal 		/* num_args */
);

extern Widget XtVaCreatePopupShell(
    _Xconst _XtString	/* name */,
    WidgetClass		/* widgetClass */,
    Widget		/* parent */,
    ...
) _X_SENTINEL(0);

extern void XtPopup(
    Widget 		/* popup_shell */,
    XtGrabKind 		/* grab_kind */
);

extern void XtPopupSpringLoaded(
    Widget 		/* popup_shell */
);

extern void XtCallbackNone(
    Widget 		/* widget */,
    XtPointer 		/* closure */,
    XtPointer 		/* call_data */
);

extern void XtCallbackNonexclusive(
    Widget 		/* widget */,
    XtPointer 		/* closure */,
    XtPointer 		/* call_data */
);

extern void XtCallbackExclusive(
    Widget 		/* widget */,
    XtPointer 		/* closure */,
    XtPointer 		/* call_data */
);

extern void XtPopdown(
    Widget 		/* popup_shell */
);

extern void XtCallbackPopdown(
    Widget 		/* widget */,
    XtPointer 		/* closure */,
    XtPointer 		/* call_data */
);

extern void XtMenuPopupAction(
    Widget 		/* widget */,
    XEvent*		/* event */,
    String*		/* params */,
    Cardinal*		/* num_params */
);

extern Widget XtCreateWidget(
    _Xconst _XtString 	/* name */,
    WidgetClass 	/* widget_class */,
    Widget 		/* parent */,
    ArgList 		/* args */,
    Cardinal 		/* num_args */
);

extern Widget XtCreateManagedWidget(
    _Xconst _XtString 	/* name */,
    WidgetClass 	/* widget_class */,
    Widget 		/* parent */,
    ArgList 		/* args */,
    Cardinal 		/* num_args */
);

extern Widget XtVaCreateWidget(
    _Xconst _XtString	/* name */,
    WidgetClass		/* widget */,
    Widget		/* parent */,
    ...
) _X_SENTINEL(0);

extern Widget XtVaCreateManagedWidget(
    _Xconst _XtString	/* name */,
    WidgetClass		/* widget_class */,
    Widget		/* parent */,
    ...
) _X_SENTINEL(0);

extern Widget XtCreateApplicationShell( /* obsolete */
    _Xconst _XtString 	/* name */,
    WidgetClass 	/* widget_class */,
    ArgList 		/* args */,
    Cardinal 		/* num_args */
);

extern Widget XtAppCreateShell(
    _Xconst _XtString	/* application_name */,
    _Xconst _XtString	/* application_class */,
    WidgetClass 	/* widget_class */,
    Display*		/* display */,
    ArgList 		/* args */,
    Cardinal 		/* num_args */
);

extern Widget XtVaAppCreateShell(
    _Xconst _XtString	/* application_name */,
    _Xconst _XtString	/* application_class */,
    WidgetClass		/* widget_class */,
    Display*		/* display */,
    ...
) _X_SENTINEL(0);

/****************************************************************
 *
 * Toolkit initialization
 *
 ****************************************************************/

extern void XtToolkitInitialize(
    void
);

extern XtLanguageProc XtSetLanguageProc(
    XtAppContext	/* app_context */,
    XtLanguageProc	/* proc */,
    XtPointer		/* client_data */
);

extern void XtDisplayInitialize(
    XtAppContext 	/* app_context */,
    Display*		/* dpy */,
    _Xconst _XtString	/* application_name */,
    _Xconst _XtString	/* application_class */,
    XrmOptionDescRec* 	/* options */,
    Cardinal 		/* num_options */,
    int*		/* argc */,
    _XtString*		/* argv */
);

extern Widget XtOpenApplication(
    XtAppContext*	/* app_context_return */,
    _Xconst _XtString	/* application_class */,
    XrmOptionDescList 	/* options */,
    Cardinal 		/* num_options */,
    int*		/* argc_in_out */,
    _XtString*		/* argv_in_out */,
    String*		/* fallback_resources */,
    WidgetClass		/* widget_class */,
    ArgList 		/* args */,
    Cardinal 		/* num_args */
);

extern Widget XtVaOpenApplication(
    XtAppContext*	/* app_context_return */,
    _Xconst _XtString	/* application_class */,
    XrmOptionDescList	/* options */,
    Cardinal		/* num_options */,
    int*		/* argc_in_out */,
    _XtString*		/* argv_in_out */,
    String*		/* fallback_resources */,
    WidgetClass		/* widget_class */,
    ...
) _X_SENTINEL(0);

extern Widget XtAppInitialize( /* obsolete */
    XtAppContext*	/* app_context_return */,
    _Xconst _XtString	/* application_class */,
    XrmOptionDescList 	/* options */,
    Cardinal 		/* num_options */,
    int*		/* argc_in_out */,
    _XtString*		/* argv_in_out */,
    String*		/* fallback_resources */,
    ArgList 		/* args */,
    Cardinal 		/* num_args */
);

extern Widget XtVaAppInitialize( /* obsolete */
    XtAppContext*	/* app_context_return */,
    _Xconst _XtString	/* application_class */,
    XrmOptionDescList	/* options */,
    Cardinal		/* num_options */,
    int*		/* argc_in_out */,
    _XtString*		/* argv_in_out */,
    String*		/* fallback_resources */,
    ...
) _X_SENTINEL(0);

extern Widget XtInitialize( /* obsolete */
    _Xconst _XtString 	/* shell_name */,
    _Xconst _XtString 	/* application_class */,
    XrmOptionDescRec* 	/* options */,
    Cardinal 		/* num_options */,
    int*		/* argc */,
    _XtString*		/* argv */
);

extern Display *XtOpenDisplay(
    XtAppContext 	/* app_context */,
    _Xconst _XtString	/* display_string */,
    _Xconst _XtString	/* application_name */,
    _Xconst _XtString	/* application_class */,
    XrmOptionDescRec*	/* options */,
    Cardinal 		/* num_options */,
    int*		/* argc */,
    _XtString*		/* argv */
);

extern XtAppContext XtCreateApplicationContext(
    void
);

extern void XtAppSetFallbackResources(
    XtAppContext 	/* app_context */,
    String*		/* specification_list */
);

extern void XtDestroyApplicationContext(
    XtAppContext 	/* app_context */
);

extern void XtInitializeWidgetClass(
    WidgetClass 	/* widget_class */
);

extern XtAppContext XtWidgetToApplicationContext(
    Widget 		/* widget */
);

extern XtAppContext XtDisplayToApplicationContext(
    Display*		/* dpy */
);

extern XrmDatabase XtDatabase(
    Display*		/* dpy */
);

extern XrmDatabase XtScreenDatabase(
    Screen*		/* screen */
);

extern void XtCloseDisplay(
    Display*		/* dpy */
);

extern void XtGetApplicationResources(
    Widget 		/* widget */,
    XtPointer 		/* base */,
    XtResourceList 	/* resources */,
    Cardinal 		/* num_resources */,
    ArgList 		/* args */,
    Cardinal 		/* num_args */
);

extern void XtVaGetApplicationResources(
    Widget		/* widget */,
    XtPointer		/* base */,
    XtResourceList	/* resources */,
    Cardinal		/* num_resources */,
    ...
) _X_SENTINEL(0);

extern void XtGetSubresources(
    Widget 		/* widget */,
    XtPointer 		/* base */,
    _Xconst _XtString 	/* name */,
    _Xconst _XtString 	/* class */,
    XtResourceList 	/* resources */,
    Cardinal 		/* num_resources */,
    ArgList 		/* args */,
    Cardinal 		/* num_args */
);

extern void XtVaGetSubresources(
    Widget		/* widget */,
    XtPointer		/* base */,
    _Xconst _XtString	/* name */,
    _Xconst _XtString	/* class */,
    XtResourceList	/* resources */,
    Cardinal		/* num_resources */,
    ...
) _X_SENTINEL(0);

extern void XtSetValues(
    Widget 		/* widget */,
    ArgList 		/* args */,
    Cardinal 		/* num_args */
);

extern void XtVaSetValues(
    Widget		/* widget */,
    ...
) _X_SENTINEL(0);

extern void XtGetValues(
    Widget 		/* widget */,
    ArgList 		/* args */,
    Cardinal 		/* num_args */
);

extern void XtVaGetValues(
    Widget		/* widget */,
    ...
) _X_SENTINEL(0);

extern void XtSetSubvalues(
    XtPointer 		/* base */,
    XtResourceList 	/* resources */,
    Cardinal 		/* num_resources */,
    ArgList 		/* args */,
    Cardinal 		/* num_args */
);

extern void XtVaSetSubvalues(
    XtPointer		/* base */,
    XtResourceList	/* resources */,
    Cardinal		/* num_resources */,
    ...
) _X_SENTINEL(0);

extern void XtGetSubvalues(
    XtPointer 		/* base */,
    XtResourceList 	/* resources */,
    Cardinal 		/* num_resources */,
    ArgList 		/* args */,
    Cardinal 		/* num_args */
);

extern void XtVaGetSubvalues(
    XtPointer		/* base */,
    XtResourceList	/* resources */,
    Cardinal		/* num_resources */,
    ...
) _X_SENTINEL(0);

extern void XtGetResourceList(
    WidgetClass 	/* widget_class */,
    XtResourceList*	/* resources_return */,
    Cardinal*		/* num_resources_return */
);

extern void XtGetConstraintResourceList(
    WidgetClass 	/* widget_class */,
    XtResourceList*	/* resources_return */,
    Cardinal*		/* num_resources_return */
);

#define XtUnspecifiedPixmap	((Pixmap)2)
#define XtUnspecifiedShellInt	(-1)
#define XtUnspecifiedWindow	((Window)2)
#define XtUnspecifiedWindowGroup ((Window)3)
#define XtCurrentDirectory	"XtCurrentDirectory"
#define XtDefaultForeground	"XtDefaultForeground"
#define XtDefaultBackground	"XtDefaultBackground"
#define XtDefaultFont		"XtDefaultFont"
#define XtDefaultFontSet	"XtDefaultFontSet"

#define XtOffset(p_type,field) \
