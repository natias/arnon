=over 4

=item Behavior of other Perl features in forked pseudo-processes

$$ or $PROCESS_ID, %ENV, chdir() and all other builtins that accept
filenames, wait() and waitpid(), kill(), exec(), exit(), Open handles to
files, directories and network sockets

=item Resource limits

=item Killing the parent process

=item Lifetime of the parent process and pseudo-processes

=back

=item CAVEATS AND LIMITATIONS

BEGIN blocks, Open filehandles, Open directory handles, Forking pipe open()
not yet implemented, Global state maintained by XSUBs, Interpreter embedded
in larger application, Thread-safety of extensions

=item PORTABILITY CAVEATS

=item BUGS

=item AUTHOR

=item SEE ALSO

=back

=head2 perlnumber - semantics of numbers and numeric operations in Perl

=over 4

=item SYNOPSIS

=item DESCRIPTION

=item Storing numbers

=item Numeric operators and numeric conversions

=item Flavors of Perl numeric operations

Arithmetic operators, ++, Arithmetic operators during C<use integer>, Other
mathematical operators, Bitwise operators, Bitwise operators during C<use
integer>, Operators which expect an integer, Operators which expect a
string

=item AUTHOR

=item SEE ALSO

=back

=head2 perlthrtut - Tutorial on threads in Perl

=over 4

=item DESCRIPTION

=item What Is A Thread Anyway?

=item Threaded Program Models

=over 4

=item Boss/Worker

=item Work Crew

=item Pipeline

=back

=item What kind of threads are Perl threads?

=item Thread-Safe Modules

=item Thread Basics

=over 4

=item Basic Thread Support

=item A Note about the Examples

=item Creating Threads

=item Waiting For A Thread To Exit

=item Ignoring A Thread

=item Process and Thread Termination

=back

=item Threads And Data

=over 4

=item Shared And Unshared Data

=item Thread Pitfalls: Races

=back

=item Synchronization and control

=over 4

=item Controlling access: lock()

=item A Thread Pitfall: Deadlocks

=item Queues: Passing Data Around

=item Semaphores: Synchronizing Data Access

=item Basic semaphores

=item Advanced Semaphores

=item Waiting for a Condition

=item Giving up control

=back

=item General Thread Utility Routines

=over 4

=item What Thread Am I In?

=item Thread IDs

=item Are These Threads The Same?

=item What Threads Are Running?

=back

=item A Complete Example

=item Different implementations of threads

=item Performance considerations

=item Process-scope Changes

=item Thread-Safety of System Libraries

=item Conclusion

=item SEE ALSO

=item Bibliography

=over 4

=item Introductory Texts

=item OS-Related References

=item Other References

=back

=item Acknowledgements

=item AUTHOR

=item Copyrights

=back

=head2 perlport - Writing portable Perl

=over 4

=item DESCRIPTION

Not all Perl programs have to be portable, Nearly all of Perl already I<is>
portable

=item ISSUES

=over 4

=item Newlines

=item Numbers endianness and Width

=item Files and Filesystems

=item System Interaction

=item Command names versus file pathnames

=item Networking

=item Interprocess Communication (IPC)

=item External Subroutines (XS)

=item Standard Modules

=item Time and Date

=item Character sets and character encoding

=item Internationalisation

=item System Resources

=item Security

=item Style

=back

=item CPAN Testers

=item PLATFORMS

=over 4

=item Unix

=item DOS and Derivatives

=item VMS

=item VOS

=item EBCDIC Platforms

=item Acorn RISC OS

=item Other perls

=back

=item FUNCTION IMPLEMENTATIONS

=over 4

=item Alphabetical Listing of Perl Functions

-I<X>, alarm, atan2, binmode, chdir, chmod, chown, chroot, crypt, dbmclose,
dbmopen, dump, exec, exit, fcntl, flock, fork, getlogin, getpgrp, getppid,
getpriority, getpwnam, getgrnam, getnetbyname, getpwuid, getgrgid,
getnetbyaddr, getprotobynumber, getpwent, getgrent, gethostbyname,
gethostent, getnetent, getprotoent, getservent, seekdir, sethostent,
setnetent, setprotoent, setservent, endpwent, endgrent, endhostent,
endnetent, endprotoent, endservent, getsockopt, glob, gmtime, ioctl, kill,
link, localtime, lstat, msgctl, msgget, msgsnd, msgrcv, open, readlink,
rename, rewinddir, select, semctl, semget, semop, setgrent, setpgrp,
setpriority, setpwent, setsockopt, shmctl, shmget, shmread, shmwrite,
sleep, socketpair, stat, symlink, syscall, sysopen, system, telldir, times,
truncate, umask, utime, wait, waitpid

=back

=item Supported Platforms

Linux (x86, ARM, IA64), HP-UX, AIX, Win32, Windows 2000, Windows XP,
Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, Cygwin,
Solaris (x86, SPARC), OpenVMS, Alpha (7.2 and later), I64 (8.2 and later),
NetBSD, FreeBSD, Debian GNU/kFreeBSD, Haiku, Irix (6.5. What else?),
OpenBSD, Dragonfly BSD, Midnight BSD, QNX Neutrino RTOS (6.5.0), MirOS BSD,
Stratus OpenVOS (17.0 or later), time_t issues that may or may not be
fixed, Stratus VOS / OpenVOS, AIX, Android, FreeMINT

=item EOL Platforms

=over 4

=item (Perl 5.37.1)

Ultrix

=item (Perl 5.36)

NetWare, DOS/DJGPP, AT&T UWIN

=item (Perl 5.20)

AT&T 3b1

=item (Perl 5.14)

Windows 95, Windows 98, Windows ME, Windows NT4

=item (Perl 5.12)

Atari MiNT, Apollo Domain/OS, Apple Mac OS 8/9, Tenon Machten

=back

=item Supported Platforms (Perl 5.8)

=item SEE ALSO

=item AUTHORS / CONTRIBUTORS

=back

=head2 perllocale - Perl locale handling (internationalization and
localization)

=over 4

=item DESCRIPTION

=item WHAT IS A LOCALE

Category C<LC_NUMERIC>: Numeric formatting, Category C<LC_MONETARY>:
Formatting of monetary amounts, Category C<LC_TIME>: Date/Time formatting,
Category C<LC_COLLATE>: Collation, Category C<LC_CTYPE>: Character Types,
Category C<LC_MESSAGES>: Error and other messages, Category C<LC_TIME>:
Date/Time formatting, Category C<LC_ALL>, Other categories

=item PREPARING TO USE LOCALES

=item USING LOCALES

=over 4

=item The C<"use locale"> pragma

B<Not within the scope of C<"use locale">>, B<Lingering effects of C<S<use
locale>>>, B<Under C<"use locale";>>

=item The setlocale function

=item Multi-threaded operation

=item Finding locales

=item LOCALE PROBLEMS

=item The localeconv function

=item I18N::Langinfo

=back

=item LOCALE CATEGORIES

=over 4

=item Category C<LC_COLLATE>: Collation: Text Comparisons and Sorting

=item Category C<LC_CTYPE>: Character Types

=item Category C<LC_NUMERIC>: Numeric Formatting

=item Category C<LC_MONETARY>: Formatting of monetary amounts

=item Category C<LC_TIME>: Respresentation of time

=item Category C<LC_MESSAGES>: System messages

=item Other categories

=back

=item SECURITY

=item ENVIRONMENT

PERL_SKIP_LOCALE_INIT, PERL_BADLANG, C<LC_ALL>, C<LANGUAGE>, C<LC_CTYPE>,
C<LC_COLLATE>, C<LC_MONETARY>, C<LC_NUMERIC>, C<LC_TIME>, C<LANG>

=over 4

=item Examples

=back

=item NOTES

=over 4

=item String C<eval> and C<LC_NUMERIC>

=item Backward compatibility

=item I18N:Collate obsolete

=item Sort speed and memory use impacts

=item Freely available locale definitions

=item I18n and l10n

=item An imperfect standard

=back

=item Unicode and UTF-8

=item BUGS

=over 4

=item Collation of strings containing embedded C<NUL> characters

=item C<LANGUAGE>

=item Embedded perls and multi-threaded

=item Broken systems

=back

=item SEE ALSO

=item HISTORY

=back

=head2 perluniintro - Perl Unicode introduction

=over 4

=item DESCRIPTION

=over 4

=item Unicode

=item Perl's Unicode Support

=item Perl's Unicode Model

=item Unicode and EBCDIC

=item Creating Unicode

=item Handling Unicode

=item Legacy Encodings

=item Unicode I/O

=item Displaying Unicode As Text

=item Special Cases

=item Advanced Topics

=item Miscellaneous

=item Questions With Answers

=item Hexadecimal Notation

=item Further Resources

=back

=item UNICODE IN OLDER PERLS

=item SEE ALSO

=item ACKNOWLEDGMENTS

=item AUTHOR, COPYRIGHT, AND LICENSE

=back

=head2 perlunicode - Unicode support in Perl

=over 4

=item DESCRIPTION

=over 4

=item Important Caveats

Safest if you C<use feature 'unicode_strings'>, Input and Output Layers,
You must convert your non-ASCII, non-UTF-8 Perl scripts to be UTF-8, C<use
utf8> still needed to enable L<UTF-8|perlunicode/Unicode Encodings> in
scripts, L<UTF-16|perlunicode/Unicode Encodings> scripts autodetected

=item Byte and Character Semantics

=item ASCII Rules versus Unicode Rules

When the string has been upgraded to UTF-8, There are additional methods
for regular expression patterns

=item Extended Grapheme Clusters (Logical characters)

=item Unicode Character Properties

B<C<\p{All}>>, B<C<\p{Alnum}>>, B<C<\p{Any}>>, B<C<\p{ASCII}>>,
B<C<\p{Assigned}>>, B<C<\p{Blank}>>, B<C<\p{Decomposition_Type:
Non_Canonical}>>    (Short: C<\p{Dt=NonCanon}>), B<C<\p{Graph}>>,
B<C<\p{HorizSpace}>>, B<C<\p{In=*}>>, B<C<\p{PerlSpace}>>,
B<C<\p{PerlWord}>>, B<C<\p{Posix...}>>, B<C<\p{Present_In: *}>>    (Short:
C<\p{In=*}>), B<C<\p{Print}>>, B<C<\p{SpacePerl}>>, B<C<\p{Title}>> and 
B<C<\p{Titlecase}>>, B<C<\p{Unicode}>>, B<C<\p{VertSpace}>>,
B<C<\p{Word}>>, B<C<\p{XPosix...}>>

=item Comparison of C<\N{...}> and C<\p{name=...}>

[1], [2], [3], [4], [5]

=item Wildcards in Property Values

=item User-Defined Character Properties

=item User-Defined Case Mappings (for serious hackers only)

=item Character Encodings for Input and Output

=item Unicode Regular Expression Support Level

[1] C<\N{U+...}> and C<\x{...}>, [2] C<\p{...}> C<\P{...}>.  This
requirement is for a minimal list of properties.  Perl supports these.	See
R2.7 for other properties, [3], [4], [5] C<\b> C<\B> meet most, but not
all, the details of this requirement, but C<\b{wb}> and C<\B{wb}> do, as
well as the stricter R2.3, [6], [7], [8] UTF-8/UTF-EBDDIC used in Perl
allows not only C<U+10000> to C<U+10FFFF> but also beyond C<U+10FFFF>, [9]
Unicode has rewritten this portion of UTS#18 to say that getting canonical
equivalence (see UAX#15 L<"Unicode Normalization
Forms"|https://www.unicode.org/reports/tr15>) is basically to be done at
the programmer level.  Use NFD to write both your regular expressions and
text to match them against (you can use L<Unicode::Normalize>), [10] Perl
has C<\X> and C<\b{gcb}>.  Unicode has retracted their "Grapheme Cluster
Mode", and recently added string properties, which Perl does not yet
support, [11] see L<UAX#29 "Unicode Text
Segmentation"|https://www.unicode.org/reports/tr29>,, [12] see
L<perlunicode/Wildcards in Property Values> above, [13] Perl supports all
the properties in the Unicode Character Database (UCD).  It does not yet
support the listed properties that come from other Unicode sources, [14]
The only optional property that Perl supports is Named Sequence.  None of
these properties are in the UCD

=item Unicode Encodings

=item Noncharacter code points

=item Beyond Unicode code points

=item Security Implications of Unicode

=item Unicode in Perl on EBCDIC

=item Locales

=item When Unicode Does Not Happen

=item The "Unicode Bug"

=item Forcing Unicode in Perl (Or Unforcing Unicode in Perl)

=item Using Unicode in XS

=item Hacking Perl to work on earlier Unicode versions (for very serious
hackers only)

=item Porting code from perl-5.6.X

=back

=item BUGS

=over 4

=item Interaction with Extensions

=item Speed

=back

=item SEE ALSO

=back

=head2 perlunicook - cookbookish examples of handling Unicode in Perl

=over 4

=item DESCRIPTION

=item EXAMPLES

=over 4

=item ℞ 0: Standard preamble

=item ℞ 1: Generic Unicode-savvy filter

=item ℞ 2: Fine-tuning Unicode warnings

=item ℞ 3: Declare source in utf8 for identifiers and literals

=item ℞ 4: Characters and their numbers

=item ℞ 5: Unicode literals by character number

=item ℞ 6: Get character name by number

=item ℞ 7: Get character number by name

=item ℞ 8: Unicode named characters

=item ℞ 9: Unicode named sequences

=item ℞ 10: Custom named characters

=item ℞ 11: Names of CJK codepoints

=item ℞ 12: Explicit encode/decode

=item ℞ 13: Decode program arguments as utf8

=item ℞ 14: Decode program arguments as locale encoding

=item ℞ 15: Declare STD{IN,OUT,ERR} to be utf8

=item ℞ 16: Declare STD{IN,OUT,ERR} to be in locale encoding

=item ℞ 17: Make file I/O default to utf8

=item ℞ 18: Make all I/O and args default to utf8

=item ℞ 19: Open file with specific encoding

=item ℞ 20: Unicode casing

=item ℞ 21: Unicode case-insensitive comparisons

=item ℞ 22: Match Unicode linebreak sequence in regex

=item ℞ 23: Get character category

=item ℞ 24: Disabling Unicode-awareness in builtin charclasses

=item ℞ 25: Match Unicode properties in regex with \p, \P

=item ℞ 26: Custom character properties

=item ℞ 27: Unicode normalization

=item ℞ 28: Convert non-ASCII Unicode numerics

=item ℞ 29: Match Unicode grapheme cluster in regex

=item ℞ 30: Extract by grapheme instead of by codepoint (regex)

=item ℞ 31: Extract by grapheme instead of by codepoint (substr)

=item ℞ 32: Reverse string by grapheme

=item ℞ 33: String length in graphemes

=item ℞ 34: Unicode column-width for printing

=item ℞ 35: Unicode collation

=item ℞ 36: Case- I<and> accent-insensitive Unicode sort

=item ℞ 37: Unicode locale collation

=item ℞ 38: Making C<cmp> work on text instead of codepoints

=item ℞ 39: Case- I<and> accent-insensitive comparisons

=item ℞ 40: Case- I<and> accent-insensitive locale comparisons

=item ℞ 41: Unicode linebreaking

=item ℞ 42: Unicode text in DBM hashes, the tedious way

=item ℞ 43: Unicode text in DBM hashes, the easy way

=item ℞ 44: PROGRAM: Demo of Unicode collation and printing

=back

=item SEE ALSO

§3.13 Default Case Algorithms, page 113; §4.2  Case, pages 120–122;
Case Mappings, page 166–172, especially Caseless Matching starting on
page 170, UAX #44: Unicode Character Database, UTS #18: Unicode Regular
Expressions, UAX #15: Unicode Normalization Forms, UTS #10: Unicode
Collation Algorithm, UAX #29: Unicode Text Segmentation, UAX #14: Unicode
Line Breaking Algorithm, UAX #11: East Asian Width

=item AUTHOR

=item COPYRIGHT AND LICENCE

=item REVISION HISTORY

=back

=head2 perlunifaq - Perl Unicode FAQ

=over 4

=item Q and A

=over 4

=item perlunitut isn't really a Unicode tutorial, is it?

=item What character encodings does Perl support?

=item Which version of perl should I use?

=item What about binary data, like images?

=item When should I decode or encode?

=item What if I don't decode?

=item What if I don't encode?

If the string's characters are all code point 255 or lower, Perl outputs
bytes that match those code points. This is what happens with encoded
strings. It can also, though, happen with unencoded strings that happen to
be all code point 255 or lower, Otherwise, Perl outputs the string encoded
as UTF-8. This only happens with strings you neglected to encode. Since
that should not happen, Perl also throws a "wide character" warning in this
case

=item Is there a way to automatically decode or encode?

=item What if I don't know which encoding was used?

=item Can I use Unicode in my Perl sources?

=item Data::Dumper doesn't restore the UTF8 flag; is it broken?

=item Why do regex character classes sometimes match only in the ASCII
range?

=item Why do some characters not uppercase or lowercase correctly?

=item How can I determine if a string is a text string or a binary string?

=item How do I convert from encoding FOO to encoding BAR?

=item What are C<decode_utf8> and C<encode_utf8>?

=item What is a "wide character"?

=back

=item INTERNALS

=over 4

=item What is "the UTF8 flag"?

=item What about the C<use bytes> pragma?

=item What about the C<use encoding> pragma?

=item What is the difference between C<:encoding> and C<:utf8>?

=item What's the difference between C<UTF-8> and C<utf8>?

=item I lost track; what encoding is the internal format really?

=back

=item AUTHOR

=item SEE ALSO

=back

=head2 perluniprops - Index of Unicode Version 15.0.0 character properties
in Perl

=over 4

=item DESCRIPTION

=item Properties accessible through C<\p{}> and C<\P{}>

Single form (C<\p{name}>) tighter rules:, white space adjacent to a
non-word character, underscores separating digits in numbers, Compound form
(C<\p{name=value}> or C<\p{name:value}>) tighter rules:, Stabilized,
Deprecated, Obsolete, Discouraged, Z<>B<*> is a wild-card, B<(\d+)> in the
info column gives the number of Unicode code points matched by this
property, B<D> means this is deprecated, B<O> means this is obsolete, B<S>
means this is stabilized, B<T> means tighter (stricter) name matching
applies, B<X> means use of this form is discouraged, and may not be stable

=over 4

=item Legal C<\p{}> and C<\P{}> constructs that match no characters

\p{Canonical_Combining_Class=Attached_Below_Left},
\p{Canonical_Combining_Class=CCC133}, \p{Grapheme_Cluster_Break=E_Base},
\p{Grapheme_Cluster_Break=E_Base_GAZ},
\p{Grapheme_Cluster_Break=E_Modifier},
\p{Grapheme_Cluster_Break=Glue_After_Zwj}, \p{Word_Break=E_Base},
\p{Word_Break=E_Base_GAZ}, \p{Word_Break=E_Modifier},
\p{Word_Break=Glue_After_Zwj}

=back

=item Properties accessible through Unicode::UCD

=item Properties accessible through other means

=item Unicode character properties that are NOT accepted by Perl

I<Expands_On_NFC> (XO_NFC), I<Expands_On_NFD> (XO_NFD), I<Expands_On_NFKC>
(XO_NFKC), I<Expands_On_NFKD> (XO_NFKD), I<Grapheme_Link> (Gr_Link),
I<Jamo_Short_Name> (JSN), I<Other_Alphabetic> (OAlpha),
I<Other_Default_Ignorable_Code_Point> (ODI), I<Other_Grapheme_Extend>
(OGr_Ext), I<Other_ID_Continue> (OIDC), I<Other_ID_Start> (OIDS),
I<Other_Lowercase> (OLower), I<Other_Math> (OMath), I<Other_Uppercase>
(OUpper), I<Script=Katakana_Or_Hiragana> (sc=Hrkt),
I<Script_Extensions=Katakana_Or_Hiragana> (scx=Hrkt)

=item Other information in the Unicode data base

F<auxiliary/GraphemeBreakTest.html>, F<auxiliary/LineBreakTest.html>,
F<auxiliary/SentenceBreakTest.html>, F<auxiliary/WordBreakTest.html>,
F<BidiCharacterTest.txt>, F<BidiTest.txt>, F<CJKRadicals.txt>,
F<confusables.txt>, F<confusablesSummary.txt>, F<intentional.txt>,
F<emoji/ReadMe.txt>, F<ReadMe.txt>, F<EmojiSources.txt>,
F<extracted/DName.txt>, F<Index.txt>, F<NamedSqProv.txt>,
F<NamesList.html>, F<NamesList.txt>, F<NormalizationCorrections.txt>,
F<NushuSources.txt>, F<StandardizedVariants.html>,
F<StandardizedVariants.txt>, F<TangutSources.txt>, F<USourceData.txt>,
F<USourceGlyphs.pdf>

=item SEE ALSO

=back

=head2 perlunitut - Perl Unicode Tutorial

=over 4

=item DESCRIPTION

=over 4

=item Definitions

=item Your new toolkit

=item I/O flow (the actual 5 minute tutorial)

=back

=item SUMMARY

=item Q and A (or FAQ)

=item ACKNOWLEDGEMENTS

=item AUTHOR

=item SEE ALSO

=back

=head2 perlebcdic - Considerations for running Perl on EBCDIC platforms

=over 4

=item DESCRIPTION

=item COMMON CHARACTER CODE SETS

=over 4

=item ASCII

=item ISO 8859

=item Latin 1 (ISO 8859-1)

=item EBCDIC

B<0037>, B<1047>, B<POSIX-BC>

=item Unicode code points versus EBCDIC code points

=item Unicode and UTF

=item Using Encode

=back

=item SINGLE OCTET TABLES

recipe 0, recipe 1, recipe 2, recipe 3, recipe 4, recipe 5, recipe 6

=over 4

=item Table in hex, sorted in 1047 order

=back

=item IDENTIFYING CHARACTER CODE SETS

=item CONVERSIONS

=over 4

=item C<utf8::unicode_to_native()> and C<utf8::native_to_unicode()>

=item tr///

=item iconv

=item C RTL

=back

=item OPERATOR DIFFERENCES

=item FUNCTION DIFFERENCES

C<chr()>, C<ord()>, C<pack()>, C<print()>, C<printf()>, C<sort()>,
C<sprintf()>, C<unpack()>

=item REGULAR EXPRESSION DIFFERENCES

=item SOCKETS

=item SORTING

=over 4

=item Ignore ASCII vs. EBCDIC sort differences

=item Use a sort helper function

=item MONO CASE then sort data (for non-digits, non-underscore)

=item Perform sorting on one type of platform only

=back

=item TRANSFORMATION FORMATS

=over 4

=item URL decoding and encoding

=item uu encoding and decoding

=item Quoted-Printable encoding and decoding

=item Caesarean ciphers

=back

=item Hashing order and checksums

=item I18N AND L10N

=item MULTI-OCTET CHARACTER SETS

=item OS ISSUES

=over 4

=item OS/400

PASE, IFS access

=item OS/390, z/OS

C<sigaction>, C<chcp>, dataset access, C<iconv>, locales

=item POSIX-BC?

=back

=item BUGS

=item SEE ALSO

=item REFERENCES

=item HISTORY

=item AUTHOR

