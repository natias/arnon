  static const AttrId seqAttrId[SEQ_ATTR_COUNT];
  static const ociAttrType seqAttrType[SEQ_ATTR_COUNT];
  static const AttrId colAttrId[COL_ATTR_COUNT];
  static const ociAttrType colAttrType[COL_ATTR_COUNT];
  static const AttrId argtargtresAttrId[ARG_TYPARG_TYPRES_ATTR_COUNT];
  static const ociAttrType argtargtresAttrType[
                   ARG_TYPARG_TYPRES_ATTR_COUNT];
  static const AttrId schemaAttrId[SCHEMA_ATTR_COUNT];
  static const ociAttrType schemaAttrType[SCHEMA_ATTR_COUNT];
  static const AttrId databaseAttrId[DATABASE_ATTR_COUNT];
  static const ociAttrType databaseAttrType[DATABASE_ATTR_COUNT];

  static const ColumnAttrId columnAttrId[COLUMN_ATTR_COUNT];
  Ptr<MetaDataImpl> metaDataImplPtr;
  const OCIParam* paramhp;
  const ConnectionImpl* sesn;
  const AttrId* attrIdArray;
  const ociAttrType* attrTypeArray;
  AttrCount attrCount;
  
  MetaData(const Connection *sessp, const OCCI_STD_NAMESPACE::string& objName,
  ParamType prmtyp ) ;
  MetaData(const Connection *sessp, const UString& objName,
  ParamType prmtyp ) ;
  MetaData(const Connection *sessp, 
  const RefAny& ref) ;
  MetaData(const Connection *sessp, MetaDataImpl *implPtr,
  OCIParam* parm) ;
  MetaData(const Connection *sessp, MetaDataImpl *implPtr,
  OCIParam *parm, ub1 parmTyp) ;
  ub1 getParamType(OCIParam* prm) const ;
  const AttrId* getAttrIdArrayAddr(ub1 prmTyp) const;
  const ociAttrType* getAttrTypeArrayAddr(ub1 prmTyp) const;
  AttrCount getAttrCount(ub1 prmTyp) const; 
  Type getType(ociAttrType typ) const;
  bool isListTypeAttribute(AttrId attrid,ub1 ptyp) const;
  boolean isInvalidAttrId(AttrId attrid,sb4* pos, 
            boolean* isTypeSpecificAttrPtr) const;
  boolean isInvalidColumnAttrId(ColumnAttrId colAttrId) const;
  ociAttrType getValidAttrType(sb4 index, boolean isTypeSpecificAttr)
  const;

  int getListType (const OCIParam *plist) const;
  unsigned int getLowerBound(int ltype) const;
  unsigned int getUpperBound(unsigned int ltype, 
    unsigned int paramnum) const;
  friend class ConnectionImpl;
  friend class ResultSetImpl;

};

//return codes for user callbacks
enum
{
  OCCI_SUCCESS = OCI_SUCCESS,
  FO_RETRY = OCI_FO_RETRY
};


class Connection
{
   public :

      // specifies the type of proxy to be created,
      // used for future enhancements
      enum ProxyType
      {PROXY_DEFAULT
      };

      enum FailOverType
      {
        FO_NONE = OCI_FO_NONE,
        FO_SESSION = OCI_FO_SESSION,
        FO_SELECT = OCI_FO_SELECT
      }; 

      enum FailOverEventType
      {
        FO_BEGIN = OCI_FO_BEGIN,
        FO_END = OCI_FO_END,
        FO_ABORT = OCI_FO_ABORT,
        FO_REAUTH = OCI_FO_REAUTH,
        FO_ERROR = OCI_FO_ERROR
      };

      enum Purity
      {
        DEFAULT = OCI_ATTR_PURITY_DEFAULT,
        NEW = OCI_ATTR_PURITY_NEW,
        SELF = OCI_ATTR_PURITY_SELF
      };

      virtual ~Connection() { }
      virtual Statement* createStatement(
        const OCCI_STD_NAMESPACE::string  &sql = "") 
         =0; 
      virtual void terminateStatement(Statement *statement) =0;
      virtual void commit()  =0; 
      virtual void rollback()  =0;
      virtual MetaData getMetaData(const OCCI_STD_NAMESPACE::string &object, 
        MetaData::ParamType prmtyp 
        = MetaData::PTYPE_UNK) const 
         =0; 
      virtual MetaData getMetaData(const RefAny &ref) const
         =0; 
      virtual OCCI_STD_NAMESPACE::string getClientCharSet() const 
         =0; 
      virtual OCCI_STD_NAMESPACE::string getClientNCHARCharSet() const 
         =0; 
      virtual void changePassword(const OCCI_STD_NAMESPACE::string &user,
        const OCCI_STD_NAMESPACE::string &oldPassword,
        const OCCI_STD_NAMESPACE::string &newPassword) 
         =0; 
      virtual void flushCache()  =0; 

      virtual OCIServer*  getOCIServer() const =0;
      virtual OCISvcCtx*  getOCIServiceContext() const =0;
      virtual OCISession* getOCISession() const =0;

      //new interfaces

      virtual Statement* createStatement(const UString &sql) = 0;
      virtual MetaData getMetaData(const UString &object, 
        MetaData::ParamType prmtyp 
        = MetaData::PTYPE_UNK) const 
         =0; 
      virtual UString getClientCharSetUString() const 
         =0; 
      virtual UString getClientNCHARCharSetUString() const 
         =0; 
      virtual void changePassword(const UString &user,
        const UString &oldPassword,
        const UString &newPassword) 
         =0; 
      virtual OCCI_STD_NAMESPACE::string getTag() const =0;
      virtual void setStmtCacheSize(unsigned int cacheSize) = 0;
      virtual unsigned int getStmtCacheSize() const =0;
      virtual Statement* createStatement(const OCCI_STD_NAMESPACE::string &sql,
                    const OCCI_STD_NAMESPACE::string &tag) = 0;
      virtual void terminateStatement(Statement* stmt, 
                    const OCCI_STD_NAMESPACE::string &tag) = 0;
      virtual bool isCached(const OCCI_STD_NAMESPACE::string &sql,
                    const OCCI_STD_NAMESPACE::string &tag = "") = 0;
      virtual void registerSubscriptions(
       const OCCI_STD_NAMESPACE::vector<aq::Subscription>& sub) =0;
      virtual void unregisterSubscription(const aq::Subscription& sub) =0;
      virtual void postToSubscriptions(
       const OCCI_STD_NAMESPACE::vector<aq::Subscription>& sub) =0;
      virtual Statement* createStatement(const UString &sql,
                    const UString &tag) = 0;
      virtual void terminateStatement(Statement* stmt, 
                    const UString &tag) = 0;
      virtual bool isCached(const UString &sql,
                    const UString &tag) = 0;
      virtual void setTAFNotify(
            int (*notifyFn)(Environment *env, Connection *conn, void *ctx,
                      FailOverType foType, FailOverEventType foEvent),
         void *ctx) = 0;
      virtual Bytes getLTXID() const = 0;
      virtual OCCI_STD_NAMESPACE::string getServerVersion() const =0;
      virtual UString getServerVersionUString() const =0;
      virtual void cancel() =0;
      virtual OCCI_STD_NAMESPACE::string getServerRelease2() const =0;
};

class StatelessConnectionPool
{
  public :

    enum PoolType
    {
      HETEROGENEOUS = OCI_DEFAULT,
      HOMOGENEOUS = OCI_SPC_HOMOGENEOUS,
      NO_RLB = OCI_SPC_NO_RLB,
      USES_EXT_AUTH = 16
    };

    enum BusyOption
    {
       WAIT = OCI_SPOOL_ATTRVAL_WAIT,
       NOWAIT = OCI_SPOOL_ATTRVAL_NOWAIT,
       FORCEGET = OCI_SPOOL_ATTRVAL_FORCEGET
    };

    enum DestroyMode
    {
       DEFAULT = OCI_DEFAULT,
       SPD_FORCE = OCI_SPD_FORCE
    };

    virtual ~StatelessConnectionPool() {}
    virtual unsigned int getBusyConnections() const =0;
    virtual unsigned int getOpenConnections() const =0;
    virtual unsigned int getMinConnections() const =0;
    virtual unsigned int getMaxConnections() const =0;
    virtual unsigned int getIncrConnections() const =0;
    virtual OCCI_STD_NAMESPACE::string getPoolName() const =0;
    virtual unsigned int getTimeOut() const =0;
    virtual void setBusyOption(BusyOption busyOption) =0;
    virtual BusyOption getBusyOption() const =0;
    virtual void setTimeOut(unsigned int connTimeOut =0) =0;
    virtual void setPoolSize(unsigned int maxConn =1,
      unsigned int minConn =0, unsigned int incrConn =1) =0;
    virtual Connection* getConnection( 
      const OCCI_STD_NAMESPACE::string &tag ="") =0;
    virtual Connection* getConnection(
      const OCCI_STD_NAMESPACE::string &userName,
      const OCCI_STD_NAMESPACE::string &password,
      const OCCI_STD_NAMESPACE::string &tag = "") =0;
    virtual Connection* getAnyTaggedConnection(
      const OCCI_STD_NAMESPACE::string &tag = "") =0;
    virtual Connection* getAnyTaggedConnection(
      const OCCI_STD_NAMESPACE::string &userName,
      const OCCI_STD_NAMESPACE::string &Password,
      const OCCI_STD_NAMESPACE::string &tag = "") =0;
    virtual Connection* getProxyConnection(
      const OCCI_STD_NAMESPACE::string &name,
      OCCI_STD_NAMESPACE::string roles[], unsigned int numRoles,
      const OCCI_STD_NAMESPACE::string &tag = "",
      Connection::ProxyType proxyType = Connection::PROXY_DEFAULT) =0;
    virtual Connection* getProxyConnection(
      const OCCI_STD_NAMESPACE::string &name,
      const OCCI_STD_NAMESPACE::string &tag = "" ,
      Connection::ProxyType proxyType = Connection::PROXY_DEFAULT) =0;
    virtual Connection* getAnyTaggedProxyConnection(
      const OCCI_STD_NAMESPACE::string &name,
      OCCI_STD_NAMESPACE::string roles[], unsigned int numRoles,
      const OCCI_STD_NAMESPACE::string &tag = "",
      Connection::ProxyType proxyType = Connection::PROXY_DEFAULT) =0;
    virtual Connection* getAnyTaggedProxyConnection(
      const OCCI_STD_NAMESPACE::string &name,
      const OCCI_STD_NAMESPACE::string &tag="",
      Connection::ProxyType proxyType = Connection::PROXY_DEFAULT ) =0;
    virtual void releaseConnection (Connection *connection,
      const OCCI_STD_NAMESPACE::string &tag = "") =0;
    virtual void terminateConnection (Connection *connection) =0;
    virtual void setStmtCacheSize(unsigned int cacheSize) =0;
    virtual unsigned int getStmtCacheSize() const =0;

    virtual Connection* getConnection(const UString &tag)=0;
    virtual Connection* getConnection(const UString &userName,
      const UString &password,
      const UString &tag)=0;
    virtual Connection* getAnyTaggedConnection(const UString &tag)=0;
    virtual Connection* getAnyTaggedConnection( const UString &userName,
      const UString &Password, const UString &tag)=0 ;
    virtual Connection* getProxyConnection(const UString &name,
      OCCI_STD_NAMESPACE::string roles[], unsigned int numRoles,
      const UString &tag,
      Connection::ProxyType proxyType = Connection::PROXY_DEFAULT)=0;
    virtual Connection* getProxyConnection(const UString &name,
      const UString &tag, Connection::ProxyType
      proxyType = Connection::PROXY_DEFAULT)=0;
    virtual Connection* getAnyTaggedProxyConnection(const UString &name,
      OCCI_STD_NAMESPACE::string roles[], unsigned int numRoles,
      const UString &tag,
      Connection::ProxyType proxyType = Connection::PROXY_DEFAULT)=0;
    virtual Connection* getAnyTaggedProxyConnection(const UString &name,
      const UString &tag,
      Connection::ProxyType proxyType = Connection::PROXY_DEFAULT )=0;
    virtual void releaseConnection(Connection *connection,
      const UString  &tag)=0;


    virtual Connection* getConnection( 
     const OCCI_STD_NAMESPACE::string &connectionClass,
     const Connection::Purity purity,
     const OCCI_STD_NAMESPACE::string &tag = "") =0;

    virtual Connection* getConnection(
      const OCCI_STD_NAMESPACE::string &userName,
      const OCCI_STD_NAMESPACE::string &password,
      const OCCI_STD_NAMESPACE::string &connectionClass,
      const Connection::Purity purity,
      const OCCI_STD_NAMESPACE::string &tag = "") =0;

    virtual Connection* getAnyTaggedConnection(
      const OCCI_STD_NAMESPACE::string &connectionClass,
      const Connection::Purity purity,
      const OCCI_STD_NAMESPACE::string &tag = "") =0;

    virtual Connection* getAnyTaggedConnection(
      const OCCI_STD_NAMESPACE::string &userName,
      const OCCI_STD_NAMESPACE::string &Password,
      const OCCI_STD_NAMESPACE::string &connectionClass,
      const Connection::Purity purity,
      const OCCI_STD_NAMESPACE::string &tag = "")= 0;

    virtual Connection* getProxyConnection(
      const OCCI_STD_NAMESPACE::string &name,
      OCCI_STD_NAMESPACE::string roles[], unsigned int numRoles,
      const OCCI_STD_NAMESPACE::string &connectionClass,
      const Connection::Purity purity, 
      const OCCI_STD_NAMESPACE::string &tag = "",
      Connection::ProxyType proxyType  = Connection::PROXY_DEFAULT) = 0;

    virtual Connection* getProxyConnection(
      const OCCI_STD_NAMESPACE::string &name,
      const OCCI_STD_NAMESPACE::string &connectionClass,
      const Connection::Purity purity, 
      const OCCI_STD_NAMESPACE::string &tag = "",
      Connection::ProxyType proxyType = Connection::PROXY_DEFAULT) = 0;

    virtual Connection* getAnyTaggedProxyConnection(
      const OCCI_STD_NAMESPACE::string &name,
      OCCI_STD_NAMESPACE::string roles[], unsigned int numRoles,
      const OCCI_STD_NAMESPACE::string &connectionClass,
      const Connection::Purity purity,
      const OCCI_STD_NAMESPACE::string &tag = "",
      Connection::ProxyType proxyType = Connection::PROXY_DEFAULT) = 0;


    virtual Connection* getAnyTaggedProxyConnection(
      const OCCI_STD_NAMESPACE::string &name,
      const OCCI_STD_NAMESPACE::string &connectionClass,
      const Connection::Purity purity,
      const OCCI_STD_NAMESPACE::string &tag = "",
      Connection::ProxyType proxyType = Connection::PROXY_DEFAULT) = 0;


    virtual Connection* getConnection(
      const UString &connectionClass,
      const Connection::Purity purity,
      const UString &tag) = 0;



    virtual Connection* getConnection(const UString &userName,
      const UString &password,
      const UString &connectionClass,
      const Connection::Purity purity,
      const UString &tag) = 0;

    virtual Connection* getAnyTaggedConnection(
      const UString &connectionClass,
      const Connection::Purity purity,
      const UString &tag) =0;



    virtual Connection* getAnyTaggedConnection( const UString &userName,
      const UString &Password, 
      const UString &connectionClass,
      const Connection::Purity purity,
      const UString &tag) =0;

    virtual Connection* getProxyConnection(const UString &name,
      OCCI_STD_NAMESPACE::string roles[], unsigned int numRoles,
      const UString &connectionClass,
      const Connection::Purity purity,
      const UString &tag, Connection::ProxyType proxyType) =0;

   virtual Connection* getProxyConnection(const UString &name,
      const UString &connectionClass,
      const Connection::Purity purity,
      const UString &tag, Connection::ProxyType proxyType) = 0;


    virtual Connection* getAnyTaggedProxyConnection(const UString &name,
      OCCI_STD_NAMESPACE::string roles[], unsigned int numRoles,
      const UString &connectionClass,
      const Connection::Purity purity,
      const UString &tag,
      Connection::ProxyType proxyType) = 0; 

    virtual Connection* getAnyTaggedProxyConnection(const UString &name,
      const UString &connectionClass,
      const Connection::Purity purity,
      const UString &tag,
      Connection::ProxyType proxyType ) =0;

};


class ConnectionPool
{
  public :

    virtual ~ConnectionPool() {}
    virtual unsigned int getBusyConnections() const 
       =0; 
    virtual unsigned int getOpenConnections() const 
       =0; 
    virtual unsigned int getMinConnections() const 
       =0; 
    virtual unsigned int getMaxConnections() const 
       =0; 
    virtual unsigned int getIncrConnections() const 
       =0; 
    virtual OCCI_STD_NAMESPACE::string getPoolName() const 
       =0; 
    virtual unsigned int getTimeOut() const 
       =0; 
    virtual void setErrorOnBusy() 
       =0; 
    virtual void setTimeOut(unsigned int connTimeOut =0) 
       =0; 
    virtual void setPoolSize(unsigned int minConn =0,
      unsigned int maxConn =1, unsigned int incrConn =1) 
       =0; 
    virtual Connection* createConnection(
      const OCCI_STD_NAMESPACE::string &userName,
      const OCCI_STD_NAMESPACE::string &password)  =0; 

    virtual Connection* createProxyConnection(
      const OCCI_STD_NAMESPACE::string &name,
      OCCI_STD_NAMESPACE::string roles[], unsigned int numRoles,
      Connection::ProxyType proxyType = 
      Connection::PROXY_DEFAULT)  =0; 

    virtual Connection* createProxyConnection(
      const OCCI_STD_NAMESPACE::string &name,
      Connection::ProxyType proxyType =
      Connection::PROXY_DEFAULT)  =0;

    virtual void terminateConnection
      (Connection *connection) =0;

    //new interfaces

    virtual Connection* createConnection(
      const UString &userName,
      const UString &password)  =0; 
    
    virtual Connection* createProxyConnection(const UString &name,
      OCCI_STD_NAMESPACE::string roles[], unsigned int numRoles,
      Connection::ProxyType proxyType = 
      Connection::PROXY_DEFAULT)  =0; 
    
    virtual Connection* createProxyConnection(const UString &name,
      Connection::ProxyType proxyType =
      Connection::PROXY_DEFAULT)  =0;
    
    virtual void setStmtCacheSize(unsigned int cacheSize) =0;
    virtual unsigned int getStmtCacheSize() const =0;

    virtual UString getPoolNameUString() const 
       =0; 
};

class   Environment     
{
 public:
                    // class constants

  enum Mode
  {
    DEFAULT = OCI_DEFAULT,
    OBJECT = OCI_OBJECT,
    NO_USERCALLBACKS = OCI_NO_UCB,
    THREADED_MUTEXED = OCI_THREADED,
    THREADED_UNMUTEXED = OCI_THREADED | OCI_NO_MUTEX,
    EVENTS = OCI_EVENTS,
    USE_LDAP = OCI_USE_LDAP
  };

  virtual ~Environment(){}

                    // public methods

  static Environment * createEnvironment(
                              Mode mode = DEFAULT,
                              void *ctxp = 0,
                              void *(*malocfp)(void *ctxp, size_t size) = 0,
                              void *(*ralocfp)(void *ctxp, void *memptr,
                                               size_t newsize) = 0,
                              void (*mfreefp)(void *ctxp, void *memptr) = 0);
  
  static Environment * createEnvironment(
                              const OCCI_STD_NAMESPACE::string &charset,
                              const OCCI_STD_NAMESPACE::string &ncharset,
                              Mode mode = DEFAULT,
                              void *ctxp = 0,
                              void *(*malocfp)(void *ctxp, size_t size) = 0,
                              void *(*ralocfp)(void *ctxp, void *memptr,
                                               size_t newsize) = 0,
                              void (*mfreefp)(void *ctxp, void *memptr) = 0);

  static void terminateEnvironment(Environment *env);
  
  static Environment* getXAEnvironment(const 
                           OCCI_STD_NAMESPACE::string& dbname);

  static void releaseXAEnvironment(Environment *env);
  
  static void getClientVersion( int &featureRelease, int &releaseUpdate, 
                                int &releaseUpdateRevision, int &increment, 
                                int &ext );


  virtual Connection * createConnection(
    const OCCI_STD_NAMESPACE::string &userName,
    const OCCI_STD_NAMESPACE::string &password, 
    const OCCI_STD_NAMESPACE::string &connectString = "") = 0;

  virtual void terminateConnection(Connection *connection) = 0;

  virtual ConnectionPool* createConnectionPool(
    const OCCI_STD_NAMESPACE::string &poolUserName,
    const OCCI_STD_NAMESPACE::string &poolPassword, 
    const OCCI_STD_NAMESPACE::string &connectString ="", 
    unsigned int minConn =0,
    unsigned int maxConn =1, unsigned int incrConn =1) = 0;

  virtual void terminateConnectionPool(ConnectionPool *poolp) = 0;

  virtual unsigned int getCurrentHeapSize() const = 0;

  virtual OCIEnv * getOCIEnvironment() const = 0;

  virtual Map *getMap() const = 0;
 
  virtual void setCacheMaxSize(unsigned int maxSize) = 0; 
  
  virtual unsigned int getCacheMaxSize() const = 0; 
  
  virtual void setCacheOptSize(unsigned int OptSize) = 0; 
  
  virtual unsigned int getCacheOptSize() const = 0; 


  //new interfaces

  virtual Connection * createConnection(const UString &userName,
    const UString &password, const UString &connectString) = 0;
  
  virtual ConnectionPool* createConnectionPool(
    const UString &poolUserName,
    const UString &poolPassword, const UString &connectString, 
    unsigned int minConn =0,
    unsigned int maxConn =1, unsigned int incrConn =1) = 0;

  virtual Connection* getXAConnection(const 
                           OCCI_STD_NAMESPACE::string& dbname) = 0;

  virtual void releaseXAConnection(Connection* conn) =0;
  
  virtual StatelessConnectionPool* createStatelessConnectionPool(
    const OCCI_STD_NAMESPACE::string &poolUserName,
    const OCCI_STD_NAMESPACE::string &poolPassword,
    const OCCI_STD_NAMESPACE::string &connectString = "",
    unsigned int maxConn = 1, unsigned int minConn = 0,
    unsigned int incrConn = 1,
    StatelessConnectionPool::PoolType pType 
                                 = StatelessConnectionPool::HETEROGENEOUS) = 0;
  
  virtual StatelessConnectionPool* createStatelessConnectionPool(
    const UString &poolUserName,
    const UString &poolPassword,
    const UString &connectString,
    unsigned int maxConn = 1, unsigned int minConn = 0,
    unsigned int incrConn = 1,
    StatelessConnectionPool::PoolType pType 
                                 = StatelessConnectionPool::HETEROGENEOUS) = 0;

  virtual void terminateStatelessConnectionPool(StatelessConnectionPool *poolp,
  StatelessConnectionPool::DestroyMode mode = StatelessConnectionPool::DEFAULT)
      = 0;
  virtual void setLDAPAuthentication(unsigned int mode) =0;

  virtual unsigned int getLDAPAuthentication() const =0;
  
  virtual void setLDAPLoginNameAndPassword(
     const OCCI_STD_NAMESPACE::string &login,
     const OCCI_STD_NAMESPACE::string &passwd) =0;

  virtual void setLDAPAdminContext(const OCCI_STD_NAMESPACE::string &ctx)=0;

  virtual OCCI_STD_NAMESPACE::string getLDAPAdminContext() const =0;

  virtual void setLDAPHostAndPort(const OCCI_STD_NAMESPACE::string &host,
     unsigned int port) =0;

  virtual OCCI_STD_NAMESPACE::string getLDAPHost() const =0;

  virtual unsigned int getLDAPPort() const =0;  
 
  virtual void registerSubscriptions(
     const OCCI_STD_NAMESPACE::vector<aq::Subscription>& sub) =0;

  virtual void unregisterSubscription(const aq::Subscription& sub) =0; 
 
  virtual void enableSubscription(const aq::Subscription& sub) =0;
  
  virtual void disableSubscription(const aq::Subscription& sub) =0;
  
  virtual bool getCacheSortedFlush() const = 0;

  virtual void setCacheSortedFlush(bool flag) = 0;

  virtual Connection * createConnection(
                   const OCCI_STD_NAMESPACE::string &userName,
                   const OCCI_STD_NAMESPACE::string &password,
                   const OCCI_STD_NAMESPACE::string &connectString,
                   const OCCI_STD_NAMESPACE::string &connectionClass,
                   const Connection::Purity purity) = 0;

  virtual Connection * createConnection(const UString &userName, 
                const  UString &password, const UString &connectString,
                const UString &connectionclass, 
                const Connection::Purity purity) =0;

  virtual OCCI_STD_NAMESPACE::string getNLSLanguage() const =0;
  virtual OCCI_STD_NAMESPACE::string getNLSTerritory() const =0;
  virtual void setNLSLanguage(const OCCI_STD_NAMESPACE::string &lang) =0;
  virtual void setNLSTerritory(const OCCI_STD_NAMESPACE::string &Terr) =0;

  private:

};



class Map
{
 public:

  virtual ~Map(){}
  virtual void put(const OCCI_STD_NAMESPACE::string&, void *(*)(void *), 
                void (*)(void *, void *)) = 0;
  virtual void getReadSQL(
    void *, unsigned int, void *, unsigned int, void **) const = 0;
  virtual void getWriteSQL(
    void *, unsigned int, void *, unsigned int, void **) const = 0;
  virtual void put(const OCCI_STD_NAMESPACE::string&, 
                const OCCI_STD_NAMESPACE::string&, void *(*)(void *), 
                void (*)(void *, void *)) = 0;
  virtual void putUTF16(const OCCI_STD_NAMESPACE::string&, 
                const OCCI_STD_NAMESPACE::string&, void *(*)(void *), 
                void (*)(void *, void *)) = 0;

 private:
};


   
class SQLException : public OCCI_STD_NAMESPACE::exception
{
 public:

  virtual int getErrorCode() const;
  
  virtual OCCI_STD_NAMESPACE::string getMessage() const;

  const char *what() const throw();

  virtual void setErrorCtx(void *ctx);
  
  SQLException();

  SQLException(const SQLException &e);

  void operator=(const SQLException &other);

  virtual ~SQLException() throw();

  virtual int getXAErrorCode(const OCCI_STD_NAMESPACE::string& dbname) const;
  
  virtual UString getUStringMessage() const;

  virtual OCCI_STD_NAMESPACE::string getNLSMessage(Environment *env) const;
  
  virtual UString getNLSUStringMessage(Environment *env) const;

  virtual bool isRecoverable() const;  

 protected:

  Ptr<SQLExceptionImpl> ptr_;
  SQLException(SQLExceptionImpl *ptr);

  friend SQLException SQLExceptionCreate(int errorCode);
  friend SQLException SQLExceptionCreate(void *handle,
  int handleType);
  friend class BatchSQLException;
};

class BatchSQLException : public SQLException
{
  public:
    virtual ~BatchSQLException() throw();

    unsigned int getFailedRowCount() const;
    unsigned int getRowNum( unsigned int index ) const;
    SQLException getException ( unsigned int index ) const;
 
  private:
    BatchSQLException();

    BatchSQLException(SQLExceptionImpl *ptr); 
    friend BatchSQLException BatchSQLExceptionCreate(void *handle); 
};

class Statement 
{
 public:
                                // class constants

  virtual ~Statement() {}
  
  enum Status                                   
  {
    UNPREPARED,
    PREPARED,
    RESULT_SET_AVAILABLE,
    UPDATE_COUNT_AVAILABLE,
    NEEDS_STREAM_DATA,
    STREAM_DATA_AVAILABLE
  };
  
                                // common methods
  
  virtual void setSQL(const OCCI_STD_NAMESPACE::string &sql) = 0; 

  virtual OCCI_STD_NAMESPACE::string getSQL() const = 0;

  virtual Status execute(const OCCI_STD_NAMESPACE::string &sql = "") = 0;
  
  virtual ResultSet * getResultSet() = 0;
  
  virtual unsigned int getUpdateCount() const = 0; 
  
  virtual ResultSet * executeQuery(
    const OCCI_STD_NAMESPACE::string &sql = "") = 0;
  
  virtual unsigned int executeUpdate(
    const OCCI_STD_NAMESPACE::string &sql = "") = 0; 
  
  virtual Status status() const = 0;  
                                        
  virtual void closeResultSet(ResultSet *resultSet) = 0;
  
  virtual void setPrefetchRowCount(unsigned int rowCount) = 0; 
  
  virtual void setPrefetchMemorySize(unsigned int bytes) = 0;
  
  virtual void setAutoCommit(bool autoCommit) = 0;
  
  virtual bool getAutoCommit() const = 0;
  
  virtual OCIStmt * getOCIStatement() const = 0;


                    // methods for prepared statements with IN
                    // parameters  

  virtual void setMaxParamSize(unsigned int paramIndex,unsigned int maxSize)=0;
  
  virtual unsigned int getMaxParamSize(unsigned int paramIndex) const = 0;

  virtual void setNull(unsigned int paramIndex, Type type) = 0;
 
  virtual void setInt(unsigned int paramIndex, int x) = 0; 
  
  virtual void setUInt(unsigned int paramIndex, unsigned int x) = 0; 
  
  virtual void setFloat(unsigned int paramIndex, float x) = 0; 

  virtual void setDouble(unsigned int paramIndex, double x) = 0; 

  virtual void setNumber(unsigned int paramIndex, const Number &x) = 0; 
  
  virtual void setString(unsigned int paramIndex, 
    const OCCI_STD_NAMESPACE::string &x) = 0; 

  virtual void setBytes(unsigned int paramIndex, const Bytes &x) = 0; 

  virtual void setDate(unsigned int paramIndex, const Date &x) = 0; 
  
  virtual void setTimestamp(unsigned int paramIndex, const Timestamp &x) = 0; 

  virtual void setBlob(unsigned int paramIndex, const Blob &x) = 0;

  virtual void setClob(unsigned int paramIndex, const Clob &x) = 0;

  virtual void setBfile(unsigned int paramIndex, const Bfile &x) = 0;

  virtual void setIntervalYM(unsigned int paramIndex, const IntervalYM &x) = 0;
 
  virtual void setIntervalDS(unsigned int paramIndex, const IntervalDS &x) = 0;
 
  virtual void setRowid(unsigned int paramIndex, const Bytes &x) = 0; 
  
  virtual void setRef(unsigned int paramIndex, const RefAny &x) = 0; 

  virtual void setObject(unsigned int paramIndex, PObject * x) = 0; 
  
  virtual void setDataBuffer(unsigned int paramIndex, void *buffer, 
                             Type type,
                             sb4 size, ub2 *length, sb2 *ind = NULL,
                             ub2 *rc = NULL) = 0; 
  
  virtual void setDataBuffer(unsigned int paramIndex, void *buffer,
                             Type type,
                             sb4 size, ub4 *length, sb2 *ind = NULL,
                             ub2 *rc = NULL) = 0;

  virtual void setDataBufferArray(unsigned int paramIndex, void *buffer, 
                                  Type type,
                                  ub4 arraySize, ub4 *arrayLength,
                                  sb4 elementSize,
                                  ub2 *elementLength, sb2 *ind = NULL,
                                  ub2 *rc = NULL) = 0;
  
  virtual void setDataBufferArray(unsigned int paramIndex, void *buffer,
                                  Type type,
                                  ub4 arraySize, ub4 *arrayLength,
                                  sb4 elementSize,
                                  ub4 *elementLength, sb2 *ind = NULL,
                                  ub2 *rc = NULL) = 0;
  virtual void setCharSet(unsigned int paramIndex, 
  const OCCI_STD_NAMESPACE::string & charSet) = 0; 
  
  virtual OCCI_STD_NAMESPACE::string getCharSet(unsigned int paramIndex) 
  const = 0; 
  
  virtual void setDatabaseNCHARParam(
    unsigned int paramIndex, bool isNCHAR) = 0;
                                         
  virtual bool getDatabaseNCHARParam(unsigned int paramIndex) const = 0;       

  virtual void closeStream(Stream *stream) =0;

  virtual Stream * getStream(unsigned int paramIndex) = 0; 
  
  virtual unsigned int getCurrentStreamParam() const = 0; 
  
  virtual unsigned int getCurrentStreamIteration() const = 0;

  virtual void setBinaryStreamMode(unsigned int colIndex, 
    unsigned int size) =0;

  virtual void setCharacterStreamMode(unsigned int colIndex, 
    unsigned int size) =0;
  
  virtual void setMaxIterations(unsigned int maxIterations) = 0;
  
  virtual unsigned int getMaxIterations() const = 0; 

  virtual void addIteration() = 0; 
  
  virtual unsigned int getCurrentIteration() const = 0; 

  virtual Status executeArrayUpdate(unsigned int arrayLength) = 0;
  

                    // methods for Callable Statements

  virtual void registerOutParam(unsigned int paramIndex, Type type, 
  unsigned int maxSize=0, const OCCI_STD_NAMESPACE::string &sqltype="") = 0;
  
  virtual bool isNull(unsigned int paramIndex) const = 0;

  virtual bool isTruncated(unsigned int paramIndex) const
   =0;

  
  virtual void setErrorOnNull(unsigned int paramIndex, 
    bool causeException) = 0;
                               
  virtual void setErrorOnTruncate(unsigned int paramIndex,
  bool causeException)  = 0;

  virtual int preTruncationLength(unsigned int paramIndex) const
   =0;


  virtual int getInt(unsigned int paramIndex)  = 0; 
  
  virtual unsigned int getUInt(unsigned int paramIndex)  = 0; 
  
  virtual float getFloat(unsigned int paramIndex)  = 0; 

  virtual double getDouble(unsigned int paramIndex)  = 0; 
  
  virtual Number getNumber(unsigned int paramIndex)  = 0; 
  
  virtual OCCI_STD_NAMESPACE::string getString(unsigned int paramIndex)  = 0; 
  
  virtual Bytes getBytes(unsigned int paramIndex)  = 0; 

  virtual Date getDate(unsigned int paramIndex)  = 0; 
  
  virtual Timestamp getTimestamp(unsigned int paramIndex)  = 0; 

  virtual Bytes getRowid(unsigned int paramIndex)  = 0; 
  
  virtual PObject * getObject(unsigned int paramIndex)  = 0; 
  
  virtual Blob getBlob(unsigned int paramIndex)  = 0; 
  
  virtual Clob getClob(unsigned int paramIndex)  = 0; 
  
  virtual Bfile getBfile(unsigned int paramIndex)  = 0; 

  virtual IntervalYM getIntervalYM(unsigned int paramIndex)  = 0; 
 
  virtual IntervalDS getIntervalDS(unsigned int paramIndex)  = 0; 

  virtual RefAny getRef(unsigned int paramIndex)  = 0;  

  virtual ResultSet * getCursor(unsigned int paramIndex)   = 0;

  virtual Connection* getConnection() const =0; 

  //new interfaces

  virtual void setRef(unsigned int paramIndex, const RefAny &x, 
                      const OCCI_STD_NAMESPACE::string &typName, 
                      const OCCI_STD_NAMESPACE::string &schName = "") = 0; 
  
  virtual void setSQLUString(const UString &sql) = 0;
  
  virtual UString getSQLUString() const = 0;
  
  virtual Status execute(const UString &sql) = 0;
                                
  virtual ResultSet * executeQuery(
    const UString &sql) = 0;
  
  virtual unsigned int executeUpdate(
    const UString &sql) = 0; 
  
  virtual void setBFloat(unsigned int paramIndex, const BFloat &fval) = 0;
  
  virtual void setBDouble(unsigned int paramIndex, const BDouble &dval) = 0;
  
  virtual void setUString(unsigned int paramIndex,
    const UString &x) = 0;
  
  virtual void setCharSetUString(unsigned int paramIndex, 
  const UString & charSet) = 0; 
  
  virtual UString getCharSetUString(unsigned int paramIndex) 
  const = 0; 
  
  virtual void registerOutParam(unsigned int paramIndex, Type type, 
  unsigned int maxSize, const OCCI_STD_NAMESPACE::string &typName,
  const OCCI_STD_NAMESPACE::string &schName) = 0;
  
  virtual void registerOutParam(unsigned int paramIndex, Type type, 
  unsigned int maxSize, const UString &typName, 
  const UString &schName) = 0;
  
  virtual BFloat getBFloat(unsigned int paramIndex)  = 0;
  
  virtual BDouble getBDouble(unsigned int paramIndex)  = 0;

  virtual UString getUString(unsigned int paramIndex)  = 0; 
  
  virtual void disableCaching() =0;
  
  virtual void setRef(unsigned int paramIndex, const RefAny &x, 
                      const UString &typName, 
                      const UString &schName) = 0; 

  virtual void setBinaryStreamMode(unsigned int colIndex, 
    unsigned int size, bool INArg) =0;

  virtual void setCharacterStreamMode(unsigned int colIndex, 
    unsigned int size, bool INArg) =0;

  virtual void setNull(unsigned int paramIndex, Type type,
               const OCCI_STD_NAMESPACE::string &typeName,
               const OCCI_STD_NAMESPACE::string &schemaName = "") = 0;

  virtual void setNull(unsigned int paramIndex, Type type,
               UString &typeName, UString &schemaName) = 0;

  virtual void setBatchErrorMode( bool batchErrorMode ) =0;

  virtual bool getBatchErrorMode( ) const =0;

  virtual void setRowCountsOption(bool rowCountsOption) = 0 ;

  virtual bool getRowCountsOption() const = 0;

  virtual OCCI_STD_NAMESPACE::vector<oraub8> getDMLRowCounts() const = 0; 
 
  virtual oraub8 getUb8RowCount() const = 0; 

};



class ResultSet 
{
 public:
                                // class constants
  
  enum Status                                   
  {
    END_OF_FETCH = 0,
    DATA_AVAILABLE,
    STREAM_DATA_AVAILABLE
  };
  virtual ~ResultSet(){}
 
                                // public methods

