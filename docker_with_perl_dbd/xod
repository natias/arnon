        self.excluded = []

    def _computecommonmissing(self):
        sets = self._revlog.findcommonmissing(
            self.commonheads, self.ancestorsof
        )
        self._common, self._missing = sets

    @util.propertycache
    def common(self):
        if self._common is None:
            self._computecommonmissing()
        return self._common

    @util.propertycache
    def missing(self):
        if self._missing is None:
            self._computecommonmissing()
        return self._missing


def findcommonoutgoing(
    repo, other, onlyheads=None, force=False, commoninc=None, portable=False
):
    """Return an outgoing instance to identify the nodes present in repo but
    not in other.

    If onlyheads is given, only nodes ancestral to nodes in onlyheads
    (inclusive) are included. If you already know the local repo's heads,
    passing them in onlyheads is faster than letting them be recomputed here.

    If commoninc is given, it must be the result of a prior call to
    findcommonincoming(repo, other, force) to avoid recomputing it here.

    If portable is given, compute more conservative common and ancestorsof,
    to make bundles created from the instance more portable."""
    # declare an empty outgoing object to be filled later
    og = outgoing(repo, None, None)

    # get common set if not provided
    if commoninc is None:
        commoninc = findcommonincoming(
            repo, other, force=force, ancestorsof=onlyheads
        )
    og.commonheads, _any, _hds = commoninc

    # compute outgoing
    mayexclude = repo._phasecache.phaseroots[phases.secret] or repo.obsstore
    if not mayexclude:
        og.ancestorsof = onlyheads or repo.heads()
    elif onlyheads is None:
        # use visible heads as it should be cached
        og.ancestorsof = repo.filtered(b"served").heads()
        og.excluded = [ctx.node() for ctx in repo.set(b'secret() or extinct()')]
    else:
        # compute common, missing and exclude secret stuff
        sets = repo.changelog.findcommonmissing(og.commonheads, onlyheads)
        og._common, allmissing = sets
        og._missing = missing = []
        og.excluded = excluded = []
        for node in allmissing:
            ctx = repo[node]
            if ctx.phase() >= phases.secret or ctx.extinct():
                excluded.append(node)
            else:
                missing.append(node)
        if len(missing) == len(allmissing):
            ancestorsof = onlyheads
        else:  # update missing heads
            ancestorsof = phases.newheads(repo, onlyheads, excluded)
        og.ancestorsof = ancestorsof
    if portable:
        # recompute common and ancestorsof as if -r<rev> had been given for
        # each head of missing, and --base <rev> for each head of the proper
        # ancestors of missing
        og._computecommonmissing()
        cl = repo.changelog
        missingrevs = {cl.rev(n) for n in og._missing}
        og._common = set(cl.ancestors(missingrevs)) - missingrevs
        commonheads = set(og.commonheads)
        og.ancestorsof = [h for h in og.ancestorsof if h not in commonheads]

    return og


def _headssummary(pushop):
    """compute a summary of branch and heads status before and after push

    return {'branch': ([remoteheads], [newheads],
                       [unsyncedheads], [discardedheads])} mapping

    - branch: the branch name,
    - remoteheads: the list of remote heads known locally
                   None if the branch is new,
    - newheads: the new remote heads (known locally) with outgoing pushed,
    - unsyncedheads: the list of remote heads unknown locally,
    - discardedheads: the list of heads made obsolete by the push.
    """
    repo = pushop.repo.unfiltered()
    remote = pushop.remote
    outgoing = pushop.outgoing
    cl = repo.changelog
    headssum = {}
    missingctx = set()
    # A. Create set of branches involved in the push.
    branches = set()
    for n in outgoing.missing:
        ctx = repo[n]
        missingctx.add(ctx)
        branches.add(ctx.branch())

    with remote.commandexecutor() as e:
        remotemap = e.callcommand(b'branchmap', {}).result()

    knownnode = cl.hasnode  # do not use nodemap until it is filtered
    # A. register remote heads of branches which are in outgoing set
    for branch, heads in remotemap.items():
        # don't add head info about branches which we don't have locally
        if branch not in branches:
            continue
        known = []
        unsynced = []
        for h in heads:
            if knownnode(h):
                known.append(h)
            else:
                unsynced.append(h)
        headssum[branch] = (known, list(known), unsynced)

    # B. add new branch data
    for branch in branches:
        if branch not in headssum:
            headssum[branch] = (None, [], [])

    # C. Update newmap with outgoing changes.
    # This will possibly add new heads and remove existing ones.
    newmap = branchmap.remotebranchcache(
        repo,
        (
            (branch, heads[1])
            for branch, heads in headssum.items()
            if heads[0] is not None
        ),
    )
    newmap.update(repo, (ctx.rev() for ctx in missingctx))
    for branch, newheads in newmap.items():
        headssum[branch][1][:] = newheads
    for branch, items in headssum.items():
        for l in items:
            if l is not None:
                l.sort()
        headssum[branch] = items + ([],)

    # If there are no obsstore, no post processing are needed.
    if repo.obsstore:
        torev = repo.changelog.rev
        futureheads = {torev(h) for h in outgoing.ancestorsof}
        futureheads |= {torev(h) for h in outgoing.commonheads}
        allfuturecommon = repo.changelog.ancestors(futureheads, inclusive=True)
        for branch, heads in sorted(pycompat.iteritems(headssum)):
            remoteheads, newheads, unsyncedheads, placeholder = heads
            result = _postprocessobsolete(pushop, allfuturecommon, newheads)
            headssum[branch] = (
                remoteheads,
                sorted(result[0]),
                unsyncedheads,
                sorted(result[1]),
            )
    return headssum


def _oldheadssummary(repo, remoteheads, outgoing, inc=False):
    """Compute branchmapsummary for repo without branchmap support"""

    # 1-4b. old servers: Check for new topological heads.
    # Construct {old,new}map with branch = None (topological branch).
    # (code based on update)
    knownnode = repo.changelog.hasnode  # no nodemap until it is filtered
    oldheads = sorted(h for h in remoteheads if knownnode(h))
    # all nodes in outgoing.missing are children of either:
    # - an element of oldheads
    # - another element of outgoing.missing
    # - nullrev
    # This explains why the new head are very simple to compute.
    r = repo.set(b'heads(%ln + %ln)', oldheads, outgoing.missing)
    newheads = sorted(c.node() for c in r)
    # set some unsynced head to issue the "unsynced changes" warning
    if inc:
        unsynced = [None]
    else:
        unsynced = []
    return {None: (oldheads, newheads, unsynced, [])}


def _nowarnheads(pushop):
    # Compute newly pushed bookmarks. We don't warn about bookmarked heads.
    repo = pushop.repo.unfiltered()
    remote = pushop.remote
    localbookmarks = repo._bookmarks

    with remote.commandexecutor() as e:
        remotebookmarks = e.callcommand(
            b'listkeys',
            {
                b'namespace': b'bookmarks',
            },
        ).result()

    bookmarkedheads = set()

    # internal config: bookmarks.pushing
    newbookmarks = [
        localbookmarks.expandname(b)
        for b in pushop.ui.configlist(b'bookmarks', b'pushing')
    ]

    for bm in localbookmarks:
        rnode = remotebookmarks.get(bm)
        if rnode and rnode in repo:
            lctx, rctx = repo[localbookmarks[bm]], repo[rnode]
            if bookmarks.validdest(repo, rctx, lctx):
                bookmarkedheads.add(lctx.node())
        else:
            if bm in newbookmarks and bm not in remotebookmarks:
                bookmarkedheads.add(localbookmarks[bm])

    return bookmarkedheads


def checkheads(pushop):
    """Check that a push won't add any outgoing head

    raise StateError error and display ui message as needed.
    """

    repo = pushop.repo.unfiltered()
    remote = pushop.remote
    outgoing = pushop.outgoing
    remoteheads = pushop.remoteheads
    newbranch = pushop.newbranch
    inc = bool(pushop.incoming)

    # Check for each named branch if we're creating new remote heads.
    # To be a remote head after push, node must be either:
    # - unknown locally
    # - a local outgoing head descended from update
    # - a remote head that's known locally and not
    #   ancestral to an outgoing head
    if remoteheads == [repo.nullid]:
        # remote is empty, nothing to check.
        return

    if remote.capable(b'branchmap'):
        headssum = _headssummary(pushop)
    else:
        headssum = _oldheadssummary(repo, remoteheads, outgoing, inc)
    pushop.pushbranchmap = headssum
    newbranches = [
        branch for branch, heads in headssum.items() if heads[0] is None
    ]
    # 1. Check for new branches on the remote.
    if newbranches and not newbranch:  # new branch requires --new-branch
        branchnames = b', '.join(sorted(newbranches))
        # Calculate how many of the new branches are closed branches
        closedbranches = set()
        for tag, heads, tip, isclosed in repo.branchmap().iterbranches():
            if isclosed:
                closedbranches.add(tag)
        closedbranches = closedbranches & set(newbranches)
        if closedbranches:
            errmsg = _(b"push creates new remote branches: %s (%d closed)") % (
                branchnames,
                len(closedbranches),
            )
        else:
            errmsg = _(b"push creates new remote branches: %s") % branchnames
        hint = _(b"use 'hg push --new-branch' to create new remote branches")
        raise error.StateError(errmsg, hint=hint)

    # 2. Find heads that we need not warn about
    nowarnheads = _nowarnheads(pushop)

    # 3. Check for new heads.
    # If there are more heads after the push than before, a suitable
    # error message, depending on unsynced status, is displayed.
    errormsg = None
    for branch, heads in sorted(pycompat.iteritems(headssum)):
        remoteheads, newheads, unsyncedheads, discardedheads = heads
        # add unsynced data
        if remoteheads is None:
            oldhs = set()
        else:
            oldhs = set(remoteheads)
        oldhs.update(unsyncedheads)
        dhs = None  # delta heads, the new heads on branch
        newhs = set(newheads)
        newhs.update(unsyncedheads)
        if unsyncedheads:
            if None in unsyncedheads:
                # old remote, no heads data
                heads = None
            else:
                heads = scmutil.nodesummaries(repo, unsyncedheads)
            if heads is None:
                repo.ui.status(
                    _(b"remote has heads that are not known locally\n")
                )
            elif branch is None:
                repo.ui.status(
                    _(b"remote has heads that are not known locally: %s\n")
                    % heads
                )
            else:
                repo.ui.status(
                    _(
                        b"remote has heads on branch '%s' that are "
                        b"not known locally: %s\n"
                    )
                    % (branch, heads)
                )
        if remoteheads is None:
            if len(newhs) > 1:
                dhs = list(newhs)
                if errormsg is None:
                    errormsg = (
                        _(b"push creates new branch '%s' with multiple heads")
                        % branch
                    )
                    hint = _(
                        b"merge or"
                        b" see 'hg help push' for details about"
                        b" pushing new heads"
                    )
        elif len(newhs) > len(oldhs):
            # remove bookmarked or existing remote heads from the new heads list
            dhs = sorted(newhs - nowarnheads - oldhs)
        if dhs:
            if errormsg is None:
                if branch not in (b'default', None):
                    errormsg = _(
                        b"push creates new remote head %s on branch '%s'"
                    ) % (
                        short(dhs[0]),
                        branch,
                    )
                elif repo[dhs[0]].bookmarks():
                    errormsg = _(
                        b"push creates new remote head %s "
                        b"with bookmark '%s'"
                    ) % (short(dhs[0]), repo[dhs[0]].bookmarks()[0])
                else:
                    errormsg = _(b"push creates new remote head %s") % short(
                        dhs[0]
                    )
                if unsyncedheads:
                    hint = _(
                        b"pull and merge or"
                        b" see 'hg help push' for details about"
                        b" pushing new heads"
                    )
                else:
                    hint = _(
                        b"merge or"
                        b" see 'hg help push' for details about"
                        b" pushing new heads"
                    )
            if branch is None:
                repo.ui.note(_(b"new remote heads:\n"))
            else:
                repo.ui.note(_(b"new remote heads on branch '%s':\n") % branch)
            for h in dhs:
                repo.ui.note(b" %s\n" % short(h))
    if errormsg:
        raise error.StateError(errormsg, hint=hint)


def _postprocessobsolete(pushop, futurecommon, candidate_newhs):
    """post process the list of new heads with obsolescence information

    Exists as a sub-function to contain the complexity and allow extensions to
    experiment with smarter logic.

    Returns (newheads, discarded_heads) tuple
    """
    # known issue
    #
    # * We "silently" skip processing on all changeset unknown locally
    #
    # * if <nh> is public on the remote, it won't be affected by obsolete
    #     marker and a new is created

    # define various utilities and containers
    repo = pushop.repo
    unfi = repo.unfiltered()
    torev = unfi.changelog.index.get_rev
    public = phases.public
    getphase = unfi._phasecache.phase
    ispublic = lambda r: getphase(unfi, r) == public
    ispushed = lambda n: torev(n) in futurecommon
    hasoutmarker = functools.partial(pushingmarkerfor, unfi.obsstore, ispushed)
    successorsmarkers = unfi.obsstore.successors
    newhs = set()  # final set of new heads
    discarded = set()  # new head of fully replaced branch

    localcandidate = set()  # candidate heads known locally
    unknownheads = set()  # candidate heads unknown locally
    for h in candidate_newhs:
        if h in unfi:
            localcandidate.add(h)
        else:
            if successorsmarkers.get(h) is not None:
                msg = (
                    b'checkheads: remote head unknown locally has'
                    b' local marker: %s\n'
                )
                repo.ui.debug(msg % hex(h))
            unknownheads.add(h)

    # fast path the simple case
    if len(localcandidate) == 1:
        return unknownheads | set(candidate_newhs), set()

    obsrevs = obsolete.getrevs(unfi, b'obsolete')
    futurenonobsolete = frozenset(futurecommon) - obsrevs

    # actually process branch replacement
    while localcandidate:
        nh = localcandidate.pop()
        r = torev(nh)
        current_branch = unfi[nh].branch()
        # run this check early to skip the evaluation of the whole branch
        if ispublic(r) or r not in obsrevs:
            newhs.add(nh)
            continue

        # Get all revs/nodes on the branch exclusive to this head
        # (already filtered heads are "ignored"))
        branchrevs = unfi.revs(
            b'only(%n, (%ln+%ln))', nh, localcandidate, newhs
        )

        branchnodes = []
        for r in branchrevs:
            c = unfi[r]
            if c.branch() == current_branch:
                branchnodes.append(c.node())

        # The branch won't be hidden on the remote if
        # * any part of it is public,
        # * any part of it is considered part of the result by previous logic,
        # * if we have no markers to push to obsolete it.
        if (
            any(ispublic(r) for r in branchrevs)
            or any(torev(n) in futurenonobsolete for n in branchnodes)
            or any(not hasoutmarker(n) for n in branchnodes)
        ):
            newhs.add(nh)
        else:
            # note: there is a corner case if there is a merge in the branch.
            # we might end up with -more- heads.  However, these heads are not
            # "added" by the push, but more by the "removal" on the remote so I
            # think is a okay to ignore them,
            discarded.add(nh)
    newhs |= unknownheads
    return newhs, discarded


def pushingmarkerfor(obsstore, ispushed, node):
    """true if some markers are to be pushed for node

    We cannot just look in to the pushed obsmarkers from the pushop because
    discovery might have filtered relevant markers. In addition listing all
    markers relevant to all changesets in the pushed set would be too expensive
    (O(len(repo)))

    (note: There are cache opportunity in this function. but it would requires
    a two dimensional stack.)
    """
    successorsmarkers = obsstore.successors
    stack = [node]
    seen = set(stack)
    while stack:
        current = stack.pop()
        if ispushed(current):
            return True
        markers = successorsmarkers.get(current, ())
        # markers fields = ('prec', 'succs', 'flag', 'meta', 'date', 'parents')
        for m in markers:
            nexts = m[1]  # successors
            if not nexts:  # this is a prune marker
                nexts = m[5] or ()  # parents
            for n in nexts:
                if n not in seen:
                    seen.add(n)
                    stack.append(n)
    return False
                                                                                                                          usr/lib/python3/dist-packages/mercurial/dispatch.py                                                 0000644 0000000 0000000 00000133413 14355257011 021112  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # dispatch.py - command dispatching for mercurial
#
# Copyright 2005-2007 Olivia Mackall <olivia@selenic.com>
#
# This software may be used and distributed according to the terms of the
# GNU General Public License version 2 or any later version.


import errno
import getopt
import io
import os
import pdb
import re
import signal
import sys
import traceback


from .i18n import _
from .pycompat import getattr

from hgdemandimport import tracing

from . import (
    cmdutil,
    color,
    commands,
    demandimport,
    encoding,
    error,
    extensions,
    fancyopts,
    help,
    hg,
    hook,
    localrepo,
    profiling,
    pycompat,
    rcutil,
    registrar,
    requirements as requirementsmod,
    scmutil,
    ui as uimod,
    util,
    vfs,
)

from .utils import (
    procutil,
    stringutil,
    urlutil,
)


class request:
    def __init__(
        self,
        args,
        ui=None,
        repo=None,
        fin=None,
        fout=None,
        ferr=None,
        fmsg=None,
        prereposetups=None,
    ):
        self.args = args
        self.ui = ui
        self.repo = repo

        # input/output/error streams
        self.fin = fin
        self.fout = fout
        self.ferr = ferr
        # separate stream for status/error messages
        self.fmsg = fmsg

        # remember options pre-parsed by _earlyparseopts()
        self.earlyoptions = {}

        # reposetups which run before extensions, useful for chg to pre-fill
        # low-level repo state (for example, changelog) before extensions.
        self.prereposetups = prereposetups or []

        # store the parsed and canonical command
        self.canonical_command = None

    def _runexithandlers(self):
        exc = None
        handlers = self.ui._exithandlers
        try:
            while handlers:
                func, args, kwargs = handlers.pop()
                try:
                    func(*args, **kwargs)
                except:  # re-raises below
                    if exc is None:
                        exc = sys.exc_info()[1]
                    self.ui.warnnoi18n(b'error in exit handlers:\n')
                    self.ui.traceback(force=True)
        finally:
            if exc is not None:
                raise exc


def _flushstdio(ui, err):
    status = None
    # In all cases we try to flush stdio streams.
    if util.safehasattr(ui, b'fout'):
        assert ui is not None  # help pytype
        assert ui.fout is not None  # help pytype
        try:
            ui.fout.flush()
        except IOError as e:
            err = e
            status = -1

    if util.safehasattr(ui, b'ferr'):
        assert ui is not None  # help pytype
        assert ui.ferr is not None  # help pytype
        try:
            if err is not None and err.errno != errno.EPIPE:
                ui.ferr.write(
                    b'abort: %s\n' % encoding.strtolocal(err.strerror)
                )
            ui.ferr.flush()
        # There's not much we can do about an I/O error here. So (possibly)
        # change the status code and move on.
        except IOError:
            status = -1

    return status


def run():
    """run the command in sys.argv"""
    try:
        initstdio()
        with tracing.log('parse args into request'):
            req = request(pycompat.sysargv[1:])

        status = dispatch(req)
        _silencestdio()
    except KeyboardInterrupt:
        # Catch early/late KeyboardInterrupt as last ditch. Here nothing will
        # be printed to console to avoid another IOError/KeyboardInterrupt.
        status = -1
    sys.exit(status & 255)


def initstdio():
    # stdio streams on Python 3 are io.TextIOWrapper instances proxying another
    # buffer. These streams will normalize \n to \r\n by default. Mercurial's
    # preferred mechanism for writing output (ui.write()) uses io.BufferedWriter
    # instances, which write to the underlying stdio file descriptor in binary
    # mode. ui.write() uses \n for line endings and no line ending normalization
    # is attempted through this interface. This "just works," even if the system
    # preferred line ending is not \n.
    #
    # But some parts of Mercurial (e.g. hooks) can still send data to sys.stdout
    # and sys.stderr. They will inherit the line ending normalization settings,
    # potentially causing e.g. \r\n to be emitted. Since emitting \n should
    # "just work," here we change the sys.* streams to disable line ending
    # normalization, ensuring compatibility with our ui type.

    if sys.stdout is not None:
        # write_through is new in Python 3.7.
        kwargs = {
            "newline": "\n",
            "line_buffering": sys.stdout.line_buffering,
        }
        if util.safehasattr(sys.stdout, "write_through"):
            # pytype: disable=attribute-error
            kwargs["write_through"] = sys.stdout.write_through
            # pytype: enable=attribute-error
        sys.stdout = io.TextIOWrapper(
            sys.stdout.buffer, sys.stdout.encoding, sys.stdout.errors, **kwargs
        )

    if sys.stderr is not None:
        kwargs = {
            "newline": "\n",
            "line_buffering": sys.stderr.line_buffering,
        }
        if util.safehasattr(sys.stderr, "write_through"):
            # pytype: disable=attribute-error
            kwargs["write_through"] = sys.stderr.write_through
            # pytype: enable=attribute-error
        sys.stderr = io.TextIOWrapper(
            sys.stderr.buffer, sys.stderr.encoding, sys.stderr.errors, **kwargs
        )

    if sys.stdin is not None:
        # No write_through on read-only stream.
        sys.stdin = io.TextIOWrapper(
            sys.stdin.buffer,
            sys.stdin.encoding,
            sys.stdin.errors,
            # None is universal newlines mode.
            newline=None,
            line_buffering=sys.stdin.line_buffering,
        )


def _silencestdio():
    for fp in (sys.stdout, sys.stderr):
        if fp is None:
            continue
        # Check if the file is okay
        try:
            fp.flush()
            continue
        except IOError:
            pass
        # Otherwise mark it as closed to silence "Exception ignored in"
        # message emitted by the interpreter finalizer.
        try:
            fp.close()
        except IOError:
            pass


def _formatargs(args):
    return b' '.join(procutil.shellquote(a) for a in args)


def dispatch(req):
    """run the command specified in req.args; returns an integer status code"""
    err = None
    try:
        status = _rundispatch(req)
    except error.StdioError as e:
        err = e
        status = -1

    ret = _flushstdio(req.ui, err)
    if ret and not status:
        status = ret
    return status


def _rundispatch(req):
    with tracing.log('dispatch._rundispatch'):
        if req.ferr:
            ferr = req.ferr
        elif req.ui:
            ferr = req.ui.ferr
        else:
            ferr = procutil.stderr

        try:
            if not req.ui:
                req.ui = uimod.ui.load()
            req.earlyoptions.update(_earlyparseopts(req.ui, req.args))
            if req.earlyoptions[b'traceback']:
                req.ui.setconfig(b'ui', b'traceback', b'on', b'--traceback')

            # set ui streams from the request
            if req.fin:
                req.ui.fin = req.fin
            if req.fout:
                req.ui.fout = req.fout
            if req.ferr:
                req.ui.ferr = req.ferr
            if req.fmsg:
                req.ui.fmsg = req.fmsg
        except error.Abort as inst:
            ferr.write(inst.format())
            return -1

        formattedargs = _formatargs(req.args)
        starttime = util.timer()
        ret = 1  # default of Python exit code on unhandled exception
        try:
            ret = _runcatch(req) or 0
        except error.ProgrammingError as inst:
            req.ui.error(_(b'** ProgrammingError: %s\n') % inst)
            if inst.hint:
                req.ui.error(_(b'** (%s)\n') % inst.hint)
            raise
        except KeyboardInterrupt as inst:
            try:
                if isinstance(inst, error.SignalInterrupt):
                    msg = _(b"killed!\n")
                else:
                    msg = _(b"interrupted!\n")
                req.ui.error(msg)
            except error.SignalInterrupt:
                # maybe pager would quit without consuming all the output, and
                # SIGPIPE was raised. we cannot print anything in this case.
                pass
            except BrokenPipeError:
                pass
            ret = -1
        finally:
            duration = util.timer() - starttime
            req.ui.flush()  # record blocked times
            if req.ui.logblockedtimes:
                req.ui._blockedtimes[b'command_duration'] = duration * 1000
                req.ui.log(
                    b'uiblocked',
                    b'ui blocked ms\n',
                    **pycompat.strkwargs(req.ui._blockedtimes)
                )
            return_code = ret & 255
            req.ui.log(
                b"commandfinish",
                b"%s exited %d after %0.2f seconds\n",
                formattedargs,
                return_code,
                duration,
                return_code=return_code,
                duration=duration,
                canonical_command=req.canonical_command,
            )
            try:
                req._runexithandlers()
            except:  # exiting, so no re-raises
                ret = ret or -1
            # do flush again since ui.log() and exit handlers may write to ui
            req.ui.flush()
        return ret


def _runcatch(req):
    with tracing.log('dispatch._runcatch'):

        def catchterm(*args):
            raise error.SignalInterrupt

        ui = req.ui
        try:
            for name in b'SIGBREAK', b'SIGHUP', b'SIGTERM':
                num = getattr(signal, name, None)
                if num:
                    signal.signal(num, catchterm)
        except ValueError:
            pass  # happens if called in a thread

        def _runcatchfunc():
            realcmd = None
            try:
                cmdargs = fancyopts.fancyopts(
                    req.args[:], commands.globalopts, {}
                )
                cmd = cmdargs[0]
                aliases, entry = cmdutil.findcmd(cmd, commands.table, False)
                realcmd = aliases[0]
            except (
                error.UnknownCommand,
                error.AmbiguousCommand,
                IndexError,
                getopt.GetoptError,
            ):
                # Don't handle this here. We know the command is
                # invalid, but all we're worried about for now is that
                # it's not a command that server operators expect to
                # be safe to offer to users in a sandbox.
                pass
            if realcmd == b'serve' and b'--stdio' in cmdargs:
                # We want to constrain 'hg serve --stdio' instances pretty
                # closely, as many shared-ssh access tools want to grant
                # access to run *only* 'hg -R $repo serve --stdio'. We
                # restrict to exactly that set of arguments, and prohibit
                # any repo name that starts with '--' to prevent
                # shenanigans wherein a user does something like pass
                # --debugger or --config=ui.debugger=1 as a repo
                # name. This used to actually run the debugger.
                if (
                    len(req.args) != 4
                    or req.args[0] != b'-R'
                    or req.args[1].startswith(b'--')
                    or req.args[2] != b'serve'
                    or req.args[3] != b'--stdio'
                ):
                    raise error.Abort(
                        _(b'potentially unsafe serve --stdio invocation: %s')
                        % (stringutil.pprint(req.args),)
                    )

            try:
                debugger = b'pdb'
                debugtrace = {b'pdb': pdb.set_trace}
                debugmortem = {b'pdb': pdb.post_mortem}

                # read --config before doing anything else
                # (e.g. to change trust settings for reading .hg/hgrc)
                cfgs = _parseconfig(req.ui, req.earlyoptions[b'config'])

                if req.repo:
                    # copy configs that were passed on the cmdline (--config) to
                    # the repo ui
                    for sec, name, val in cfgs:
                        req.repo.ui.setconfig(
                            sec, name, val, source=b'--config'
                        )

                # developer config: ui.debugger
                debugger = ui.config(b"ui", b"debugger")
                debugmod = pdb
                if not debugger or ui.plain():
                    # if we are in HGPLAIN mode, then disable custom debugging
                    debugger = b'pdb'
                elif req.earlyoptions[b'debugger']:
                    # This import can be slow for fancy debuggers, so only
                    # do it when absolutely necessary, i.e. when actual
                    # debugging has been requested
                    with demandimport.deactivated():
                        try:
                            debugmod = __import__(debugger)
                        except ImportError:
                            pass  # Leave debugmod = pdb

                debugtrace[debugger] = debugmod.set_trace
                debugmortem[debugger] = debugmod.post_mortem

                # enter the debugger before command execution
                if req.earlyoptions[b'debugger']:
                    ui.warn(
                        _(
                            b"entering debugger - "
                            b"type c to continue starting hg or h for help\n"
                        )
                    )

                    if (
                        debugger != b'pdb'
                        and debugtrace[debugger] == debugtrace[b'pdb']
                    ):
                        ui.warn(
                            _(
                                b"%s debugger specified "
                                b"but its module was not found\n"
                            )
                            % debugger
                        )
                    with demandimport.deactivated():
                        debugtrace[debugger]()
                try:
                    return _dispatch(req)
                finally:
                    ui.flush()
            except:  # re-raises
                # enter the debugger when we hit an exception
                if req.earlyoptions[b'debugger']:
                    traceback.print_exc()
                    debugmortem[debugger](sys.exc_info()[2])
                raise

        return _callcatch(ui, _runcatchfunc)


def _callcatch(ui, func):
    """like scmutil.callcatch but handles more high-level exceptions about
    config parsing and commands. besides, use handlecommandexception to handle
    uncaught exceptions.
    """
    detailed_exit_code = -1
    try:
        return scmutil.callcatch(ui, func)
    except error.AmbiguousCommand as inst:
        detailed_exit_code = 10
        ui.warn(
            _(b"hg: command '%s' is ambiguous:\n    %s\n")
            % (inst.prefix, b" ".join(inst.matches))
        )
    except error.CommandError as inst:
        detailed_exit_code = 10
        if inst.command:
            ui.pager(b'help')
            msgbytes = pycompat.bytestr(inst.message)
            ui.warn(_(b"hg %s: %s\n") % (inst.command, msgbytes))
            commands.help_(ui, inst.command, full=False, command=True)
        else:
            ui.warn(_(b"hg: %s\n") % inst.message)
            ui.warn(_(b"(use 'hg help -v' for a list of global options)\n"))
    except error.UnknownCommand as inst:
        detailed_exit_code = 10
        nocmdmsg = _(b"hg: unknown command '%s'\n") % inst.command
        try:
            # check if the command is in a disabled extension
            # (but don't check for extensions themselves)
            formatted = help.formattedhelp(
                ui, commands, inst.command, unknowncmd=True
            )
            ui.warn(nocmdmsg)
            ui.write(formatted)
        except (error.UnknownCommand, error.Abort):
            suggested = False
            if inst.all_commands:
                sim = error.getsimilar(inst.all_commands, inst.command)
                if sim:
                    ui.warn(nocmdmsg)
                    ui.warn(b"(%s)\n" % error.similarity_hint(sim))
                    suggested = True
            if not suggested:
                ui.warn(nocmdmsg)
                ui.warn(_(b"(use 'hg help' for a list of commands)\n"))
    except IOError:
        raise
    except KeyboardInterrupt:
        raise
    except:  # probably re-raises
