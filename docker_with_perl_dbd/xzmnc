	0xBCA,
	0xBCE,
	0xBD7,
	0xBD8,
	0xBE6,
	0xBF0,
	0xC00,
	0xC0D,
	0xC0E,
	0xC11,
	0xC12,
	0xC29,
	0xC2A,
	0xC3A,
	0xC3C,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4E,
	0xC55,
	0xC57,
	0xC58,
	0xC5B,
	0xC5D,
	0xC5E,
	0xC60,
	0xC64,
	0xC66,
	0xC70,
	0xC80,
	0xC84,
	0xC85,
	0xC8D,
	0xC8E,
	0xC91,
	0xC92,
	0xCA9,
	0xCAA,
	0xCB4,
	0xCB5,
	0xCBA,
	0xCBC,
	0xCC5,
	0xCC6,
	0xCC9,
	0xCCA,
	0xCCE,
	0xCD5,
	0xCD7,
	0xCDD,
	0xCDF,
	0xCE0,
	0xCE4,
	0xCE6,
	0xCF0,
	0xCF1,
	0xCF4,
	0xD00,
	0xD0D,
	0xD0E,
	0xD11,
	0xD12,
	0xD45,
	0xD46,
	0xD49,
	0xD4A,
	0xD4F,
	0xD54,
	0xD58,
	0xD5F,
	0xD64,
	0xD66,
	0xD70,
	0xD7A,
	0xD80,
	0xD81,
	0xD84,
	0xD85,
	0xD97,
	0xD9A,
	0xDB2,
	0xDB3,
	0xDBC,
	0xDBD,
	0xDBE,
	0xDC0,
	0xDC7,
	0xDCA,
	0xDCB,
	0xDCF,
	0xDD5,
	0xDD6,
	0xDD7,
	0xDD8,
	0xDE0,
	0xDE6,
	0xDF0,
	0xDF2,
	0xDF4,
	0xE01,
	0xE2F,
	0xE30,
	0xE3B,
	0xE40,
	0xE46,
	0xE47,
	0xE4F,
	0xE50,
	0xE5A,
	0xE81,
	0xE83,
	0xE84,
	0xE85,
	0xE86,
	0xE8B,
	0xE8C,
	0xEA4,
	0xEA5,
	0xEA6,
	0xEA7,
	0xEAF,
	0xEB0,
	0xEBE,
	0xEC0,
	0xEC5,
	0xEC8,
	0xECC,
	0xECD,
	0xECF,
	0xED0,
	0xEDA,
	0xEDC,
	0xEE0,
	0xF20,
	0xF34,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xF39,
	0xF3A,
	0xF40,
	0xF48,
	0xF49,
	0xF6D,
	0xF71,
	0xF86,
	0xF88,
	0xF98,
	0xF99,
	0xFBD,
	0xFC6,
	0xFC7,
	0x1000,
	0x104A,
	0x104B,
	0x104C,
	0x104E,
	0x104F,
	0x1050,
	0x109E,
	0x1700,
	0x1716,
	0x171F,
	0x1735,
	0x1740,
	0x1754,
	0x1760,
	0x176D,
	0x176E,
	0x1771,
	0x1772,
	0x1774,
	0x1780,
	0x17B4,
	0x17B6,
	0x17D4,
	0x17DC,
	0x17DE,
	0x17E0,
	0x17EA,
	0x1900,
	0x191F,
	0x1920,
	0x192C,
	0x1930,
	0x193C,
	0x1946,
	0x196E,
	0x1970,
	0x1975,
	0x1980,
	0x19AC,
	0x19B0,
	0x19CA,
	0x19D0,
	0x19DB,
	0x1A00,
	0x1A1C,
	0x1A20,
	0x1A5F,
	0x1A60,
	0x1A7D,
	0x1A7F,
	0x1A8A,
	0x1A90,
	0x1A9A,
	0x1B00,
	0x1B4D,
	0x1B50,
	0x1B5A,
	0x1B80,
	0x1BF4,
	0x1C00,
	0x1C38,
	0x1C40,
	0x1C4A,
	0x1C4D,
	0x1C50,
	0x1CD0,
	0x1CD3,
	0x1CD4,
	0x1CE2,
	0x1CF2,
	0x1CFB,
	0x1DFB,
	0x1DFC,
	0x200C,
	0x200E,
	0x2010,
	0x2015,
	0x2074,
	0x2075,
	0x2082,
	0x2085,
	0x20F0,
	0x20F1,
	0x25CC,
	0x25CD,
	0xA800,
	0xA828,
	0xA82C,
	0xA82D,
	0xA840,
	0xA874,
	0xA880,
	0xA8C6,
	0xA8D0,
	0xA8DA,
	0xA8E0,
	0xA8F4,
	0xA8FE,
	0xA92E,
	0xA930,
	0xA954,
	0xA980,
	0xA9C1,
	0xA9D0,
	0xA9DA,
	0xA9E0,
	0xA9E6,
	0xA9E7,
	0xA9FF,
	0xAA00,
	0xAA37,
	0xAA40,
	0xAA4E,
	0xAA50,
	0xAA5A,
	0xAA60,
	0xAA70,
	0xAA71,
	0xAA77,
	0xAA7A,
	0xAAC3,
	0xAAE0,
	0xAAF0,
	0xAAF5,
	0xAAF7,
	0xABC0,
	0xABEB,
	0xABEC,
	0xABEE,
	0xABF0,
	0xABFA,
	0x10A00,
	0x10A04,
	0x10A05,
	0x10A07,
	0x10A0C,
	0x10A14,
	0x10A15,
	0x10A18,
	0x10A19,
	0x10A36,
	0x10A38,
	0x10A3B,
	0x10A3F,
	0x10A49,
	0x11000,
	0x11047,
	0x11052,
	0x11076,
	0x1107F,
	0x110BB,
	0x110C2,
	0x110C3,
	0x11100,
	0x11135,
	0x11136,
	0x11140,
	0x11144,
	0x11148,
	0x11150,
	0x11174,
	0x11180,
	0x111C4,
	0x111C9,
	0x111CD,
	0x111CE,
	0x111DA,
	0x111E1,
	0x111F5,
	0x11200,
	0x11212,
	0x11213,
	0x11238,
	0x1123E,
	0x11242,
	0x11280,
	0x11287,
	0x11288,
	0x11289,
	0x1128A,
	0x1128E,
	0x1128F,
	0x1129E,
	0x1129F,
	0x112A9,
	0x112B0,
	0x112EB,
	0x112F0,
	0x112FA,
	0x11300,
	0x11304,
	0x11305,
	0x1130D,
	0x1130F,
	0x11311,
	0x11313,
	0x11329,
	0x1132A,
	0x11331,
	0x11332,
	0x11334,
	0x11335,
	0x1133A,
	0x1133B,
	0x11345,
	0x11347,
	0x11349,
	0x1134B,
	0x1134E,
	0x11357,
	0x11358,
	0x1135E,
	0x11364,
	0x11366,
	0x1136D,
	0x11370,
	0x11375,
	0x11400,
	0x11448,
	0x11450,
	0x1145A,
	0x1145E,
	0x11462,
	0x11481,
	0x114C5,
	0x114D0,
	0x114DA,
	0x11580,
	0x115B6,
	0x115B8,
	0x115C1,
	0x115D8,
	0x115DE,
	0x11600,
	0x11641,
	0x11650,
	0x1165A,
	0x11680,
	0x116B9,
	0x116C0,
	0x116CA,
	0x11700,
	0x1171B,
	0x1171D,
	0x1172C,
	0x11730,
	0x1173C,
	0x11740,
	0x11747,
	0x11800,
	0x1183B,
	0x11900,
	0x11907,
	0x11909,
	0x1190A,
	0x1190C,
	0x11914,
	0x11915,
	0x11917,
	0x11918,
	0x11936,
	0x11937,
	0x11939,
	0x1193B,
	0x11944,
	0x11950,
	0x1195A,
	0x119A0,
	0x119A8,
	0x119AA,
	0x119D8,
	0x119DA,
	0x119E2,
	0x119E4,
	0x119E5,
	0x11A00,
	0x11A40,
	0x11A45,
	0x11A46,
	0x11A47,
	0x11A48,
	0x11A50,
	0x11A9A,
	0x11A9D,
	0x11A9E,
	0x11C00,
	0x11C09,
	0x11C0A,
	0x11C37,
	0x11C38,
	0x11C41,
	0x11C50,
	0x11C6D,
	0x11C72,
	0x11C90,
	0x11C92,
	0x11CA8,
	0x11CA9,
	0x11CB7,
	0x11D00,
	0x11D07,
	0x11D08,
	0x11D0A,
	0x11D0B,
	0x11D37,
	0x11D3A,
	0x11D3B,
	0x11D3C,
	0x11D3E,
	0x11D3F,
	0x11D48,
	0x11D50,
	0x11D5A,
	0x11D60,
	0x11D66,
	0x11D67,
	0x11D69,
	0x11D6A,
	0x11D8F,
	0x11D90,
	0x11D92,
	0x11D93,
	0x11D98,
	0x11DA0,
	0x11DAA,
	0x11EE0,
	0x11EF7,
	0x11F00,
	0x11F11,
	0x11F12,
	0x11F3B,
	0x11F3E,
	0x11F43,
	0x11F50,
	0x11F5A
};

#  endif	/* EBCDIC 037 */

static const UV UNI_INSC__PUREKILLER_invlist[] = {  /* for all charsets */
	47,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xD3B,
	0xD3D,
	0xE3A,
	0xE3B,
	0xE4E,
	0xE4F,
	0xEBA,
	0xEBB,
	0xF84,
	0xF85,
	0x103A,
	0x103B,
	0x1714,
	0x1716,
	0x1734,
	0x1735,
	0x17D1,
	0x17D2,
	0x1A7A,
	0x1A7B,
	0x1BAA,
	0x1BAB,
	0x1BF2,
	0x1BF4,
	0xA82C,
	0xA82D,
	0xA953,
	0xA954,
	0xABED,
	0xABEE,
	0x11070,
	0x11071,
	0x11134,
	0x11135,
	0x112EA,
	0x112EB,
	0x1172B,
	0x1172C,
	0x1193D,
	0x1193E,
	0x11A34,
	0x11A35,
	0x11D44,
	0x11D45,
	0x11F41,
	0x11F42
};

static const UV UNI_INSC__REGISTERSHIFTER_invlist[] = {  /* for all charsets */
	3,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x17C9,
	0x17CB
};

#  if 'A' == 65 /* ASCII/Latin1 */

static const UV UNI_INSC__SYLLABLEMODIFIER_invlist[] = {  /* for ASCII/Latin1 */
	41,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xB2,
	0xB4,
	0x9FE,
	0x9FF,
	0xECE,
	0xECF,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xFC6,
	0xFC7,
	0x17CB,
	0x17CC,
	0x17CE,
	0x17D1,
	0x17D3,
	0x17D4,
	0x17DD,
	0x17DE,
	0x193B,
	0x193C,
	0x1A7B,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1C36,
	0x1C37,
	0x1DFB,
	0x1DFC,
	0x2074,
	0x2075,
	0x2082,
	0x2085,
	0x111C9,
	0x111CA,
	0x1145E,
	0x1145F,
	0x11A33,
	0x11A34
};

#  endif	/* ASCII/Latin1 */

#  if 'A' == 193 /* EBCDIC 1047 */ \
     && '\\' == 224 && '[' == 173 && ']' == 189 && '{' == 192 && '}' == 208 \
     && '^' == 95 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 21

static const UV UNI_INSC__SYLLABLEMODIFIER_invlist[] = {  /* for EBCDIC 1047 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x9FE,
	0x9FF,
	0xECE,
	0xECF,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xFC6,
	0xFC7,
	0x17CB,
	0x17CC,
	0x17CE,
	0x17D1,
	0x17D3,
	0x17D4,
	0x17DD,
	0x17DE,
	0x193B,
	0x193C,
	0x1A7B,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1C36,
	0x1C37,
	0x1DFB,
	0x1DFC,
	0x2074,
	0x2075,
	0x2082,
	0x2085,
	0x111C9,
	0x111CA,
	0x1145E,
	0x1145F,
	0x11A33,
	0x11A34
};

#  endif	/* EBCDIC 1047 */

#  if 'A' == 193 /* EBCDIC 037 */ \
     && '\\' == 224 && '[' == 186 && ']' == 187 && '{' == 192 && '}' == 208 \
     && '^' == 176 && '~' == 161 && '!' == 90 && '#' == 123 && '|' == 79 \
     && '$' == 91 && '@' == 124 && '`' == 121 && '\n' == 37

static const UV UNI_INSC__SYLLABLEMODIFIER_invlist[] = {  /* for EBCDIC 037 */
	43,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xEA,
	0xEB,
	0xFA,
	0xFB,
	0x9FE,
	0x9FF,
	0xECE,
	0xECF,
	0xF35,
	0xF36,
	0xF37,
	0xF38,
	0xFC6,
	0xFC7,
	0x17CB,
	0x17CC,
	0x17CE,
	0x17D1,
	0x17D3,
	0x17D4,
	0x17DD,
	0x17DE,
	0x193B,
	0x193C,
	0x1A7B,
	0x1A7D,
	0x1A7F,
	0x1A80,
	0x1C36,
	0x1C37,
	0x1DFB,
	0x1DFC,
	0x2074,
	0x2075,
	0x2082,
	0x2085,
	0x111C9,
	0x111CA,
	0x1145E,
	0x1145F,
	0x11A33,
	0x11A34
};

#  endif	/* EBCDIC 037 */

static const UV UNI_INSC__TONELETTER_invlist[] = {  /* for all charsets */
	7,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1970,
	0x1975,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xAAC3
};

static const UV UNI_INSC__TONEMARK_invlist[] = {  /* for all charsets */
	31,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0xE48,
	0xE4C,
	0xEC8,
	0xECC,
	0x1037,
	0x1038,
	0x1063,
	0x1065,
	0x1069,
	0x106E,
	0x1087,
	0x108E,
	0x108F,
	0x1090,
	0x109A,
	0x109C,
	0x19C8,
	0x19CA,
	0x1A75,
	0x1A7A,
	0xA92B,
	0xA92E,
	0xAA7B,
	0xAA7E,
	0xAABF,
	0xAAC0,
	0xAAC1,
	0xAAC2,
	0xABEC,
	0xABED
};

static const UV UNI_INSC__VIRAMA_invlist[] = {  /* for all charsets */
	55,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x94D,
	0x94E,
	0x9CD,
	0x9CE,
	0xA4D,
	0xA4E,
	0xACD,
	0xACE,
	0xB4D,
	0xB4E,
	0xBCD,
	0xBCE,
	0xC4D,
	0xC4E,
	0xCCD,
	0xCCE,
	0xD4D,
	0xD4E,
	0xDCA,
	0xDCB,
	0x1B44,
	0x1B45,
	0xA806,
	0xA807,
	0xA8C4,
	0xA8C5,
	0xA9C0,
	0xA9C1,
	0x11046,
	0x11047,
	0x110B9,
	0x110BA,
	0x111C0,
	0x111C1,
	0x11235,
	0x11236,
	0x1134D,
	0x1134E,
	0x11442,
	0x11443,
	0x114C2,
	0x114C3,
	0x115BF,
	0x115C0,
	0x1163F,
	0x11640,
	0x116B6,
	0x116B7,
	0x11839,
	0x1183A,
	0x119E0,
	0x119E1,
	0x11C3F,
	0x11C40
};

static const UV UNI_INSC__VISARGA_invlist[] = {  /* for all charsets */
	73,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x903,
	0x904,
	0x983,
	0x984,
	0xA03,
	0xA04,
	0xA83,
	0xA84,
	0xB03,
	0xB04,
	0xC03,
	0xC04,
	0xC83,
	0xC84,
	0xD03,
	0xD04,
	0xD83,
	0xD84,
	0xF7F,
	0xF80,
	0x1038,
	0x1039,
	0x17C7,
	0x17C8,
	0x1B04,
	0x1B05,
	0x1B82,
	0x1B83,
	0xA881,
	0xA882,
	0xA983,
	0xA984,
	0xAAF5,
	0xAAF6,
	0x10A0F,
	0x10A10,
	0x11002,
	0x11003,
	0x11082,
	0x11083,
	0x11102,
	0x11103,
	0x11182,
	0x11183,
	0x11303,
	0x11304,
	0x11445,
	0x11446,
	0x114C1,
	0x114C2,
	0x115BE,
	0x115BF,
	0x1163E,
	0x1163F,
	0x116AC,
	0x116AD,
	0x11838,
	0x11839,
	0x119DF,
	0x119E0,
	0x11A39,
	0x11A3A,
	0x11A97,
	0x11A98,
	0x11C3E,
	0x11C3F,
	0x11D41,
	0x11D42,
	0x11D96,
	0x11D97,
	0x11F03,
	0x11F04
};

static const UV UNI_INSC__VOWEL_invlist[] = {  /* for all charsets */
	11,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x1963,
	0x196E,
	0xA85E,
	0xA862,
	0xA866,
	0xA867,
	0xA922,
	0xA92B,
	0x11150,
	0x11155
};

static const UV UNI_INSC__VOWELDEPENDENT_invlist[] = {  /* for all charsets */
	275,	/* Number of elements */
	148565664, /* Version and data structure type */
	1,	/* 0 if the list starts at 0;
		   1 if it starts at the element beyond 0 */
	0x0,
	0x93A,
	0x93C,
	0x93E,
	0x94D,
	0x94E,
	0x950,
	0x955,
	0x958,
	0x962,
	0x964,
	0x9BE,
	0x9C5,
	0x9C7,
	0x9C9,
	0x9CB,
	0x9CD,
	0x9D7,
	0x9D8,
	0x9E2,
	0x9E4,
	0xA3E,
	0xA43,
	0xA47,
	0xA49,
	0xA4B,
	0xA4D,
	0xABE,
	0xAC6,
	0xAC7,
	0xACA,
	0xACB,
	0xACD,
	0xAE2,
	0xAE4,
	0xB3E,
	0xB45,
	0xB47,
	0xB49,
	0xB4B,
	0xB4D,
	0xB55,
	0xB58,
	0xB62,
	0xB64,
	0xBBE,
	0xBC3,
	0xBC6,
	0xBC9,
	0xBCA,
	0xBCD,
	0xBD7,
	0xBD8,
	0xC3E,
	0xC45,
	0xC46,
	0xC49,
	0xC4A,
	0xC4D,
