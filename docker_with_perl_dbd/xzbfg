PERL_CALLCONV SV*	Perl_reg_named_buff_iter(pTHX_ REGEXP * const rx, const SV * const lastkey, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_ITER	\
	assert(rx)
PERL_CALLCONV SV*	Perl_reg_named_buff_nextkey(pTHX_ REGEXP * const rx, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_NEXTKEY	\
	assert(rx)
PERL_CALLCONV SV*	Perl_reg_named_buff_scalar(pTHX_ REGEXP * const rx, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_SCALAR	\
	assert(rx)
PERL_CALLCONV void	Perl_reg_numbered_buff_fetch(pTHX_ REGEXP * const rx, const I32 paren, SV * const sv);
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_FETCH	\
	assert(rx)
PERL_CALLCONV I32	Perl_reg_numbered_buff_length(pTHX_ REGEXP * const rx, const SV * const sv, const I32 paren);
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_LENGTH	\
	assert(rx); assert(sv)
PERL_CALLCONV void	Perl_reg_numbered_buff_store(pTHX_ REGEXP * const rx, const I32 paren, SV const * const value);
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_STORE	\
	assert(rx)
PERL_CALLCONV SV*	Perl_reg_qr_package(pTHX_ REGEXP * const rx);
#define PERL_ARGS_ASSERT_REG_QR_PACKAGE	\
	assert(rx)
PERL_CALLCONV REGEXP*	Perl_reg_temp_copy(pTHX_ REGEXP* dsv, REGEXP* ssv);
#define PERL_ARGS_ASSERT_REG_TEMP_COPY	\
	assert(ssv)
PERL_CALLCONV void	Perl_regdump(pTHX_ const regexp* r);
#define PERL_ARGS_ASSERT_REGDUMP	\
	assert(r)
PERL_CALLCONV I32	Perl_regexec_flags(pTHX_ REGEXP *const rx, char *stringarg, char *strend, char *strbeg, SSize_t minend, SV *sv, void *data, U32 flags);
#define PERL_ARGS_ASSERT_REGEXEC_FLAGS	\
	assert(rx); assert(stringarg); assert(strend); assert(strbeg); assert(sv)
PERL_CALLCONV void	Perl_regfree_internal(pTHX_ REGEXP *const rx);
#define PERL_ARGS_ASSERT_REGFREE_INTERNAL	\
	assert(rx)
PERL_CALLCONV void	Perl_reginitcolors(pTHX);
#define PERL_ARGS_ASSERT_REGINITCOLORS
PERL_CALLCONV regnode*	Perl_regnext(pTHX_ regnode* p)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_REGNEXT

PERL_CALLCONV void	Perl_repeatcpy(char* to, const char* from, I32 len, IV count);
#define PERL_ARGS_ASSERT_REPEATCPY	\
	assert(to); assert(from)
PERL_CALLCONV void	Perl_report_evil_fh(pTHX_ const GV *gv);
#define PERL_ARGS_ASSERT_REPORT_EVIL_FH
PERL_CALLCONV void	Perl_report_uninit(pTHX_ const SV *uninit_sv);
#define PERL_ARGS_ASSERT_REPORT_UNINIT
PERL_CALLCONV void	Perl_report_wrongway_fh(pTHX_ const GV *gv, const char have);
#define PERL_ARGS_ASSERT_REPORT_WRONGWAY_FH
PERL_CALLCONV void	Perl_require_pv(pTHX_ const char* pv);
#define PERL_ARGS_ASSERT_REQUIRE_PV	\
	assert(pv)
PERL_CALLCONV char*	Perl_rninstr(const char* big, const char* bigend, const char* little, const char* lend)
			__attribute__warn_unused_result__
			__attribute__pure__;
#define PERL_ARGS_ASSERT_RNINSTR	\
	assert(big); assert(bigend); assert(little); assert(lend)

PERL_CALLCONV void	Perl_rpeep(pTHX_ OP* o);
#define PERL_ARGS_ASSERT_RPEEP
PERL_CALLCONV Sighandler_t	Perl_rsignal(pTHX_ int i, Sighandler_t t);
#define PERL_ARGS_ASSERT_RSIGNAL
PERL_CALLCONV int	Perl_rsignal_restore(pTHX_ int i, Sigsave_t* t);
#define PERL_ARGS_ASSERT_RSIGNAL_RESTORE
PERL_CALLCONV int	Perl_rsignal_save(pTHX_ int i, Sighandler_t t1, Sigsave_t* save);
#define PERL_ARGS_ASSERT_RSIGNAL_SAVE	\
	assert(save)
PERL_CALLCONV Sighandler_t	Perl_rsignal_state(pTHX_ int i);
#define PERL_ARGS_ASSERT_RSIGNAL_STATE
PERL_CALLCONV int	Perl_runops_debug(pTHX);
#define PERL_ARGS_ASSERT_RUNOPS_DEBUG
PERL_CALLCONV int	Perl_runops_standard(pTHX);
#define PERL_ARGS_ASSERT_RUNOPS_STANDARD
PERL_CALLCONV CV*	Perl_rv2cv_op_cv(pTHX_ OP *cvop, U32 flags);
#define PERL_ARGS_ASSERT_RV2CV_OP_CV	\
	assert(cvop)
PERL_CALLCONV void	Perl_rxres_save(pTHX_ void **rsp, REGEXP *rx);
#define PERL_ARGS_ASSERT_RXRES_SAVE	\
	assert(rsp); assert(rx)
PERL_CALLCONV Malloc_t	Perl_safesyscalloc(MEM_SIZE elements, MEM_SIZE size)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAFESYSCALLOC

PERL_CALLCONV Free_t	Perl_safesysfree(Malloc_t where);
#define PERL_ARGS_ASSERT_SAFESYSFREE
PERL_CALLCONV Malloc_t	Perl_safesysmalloc(MEM_SIZE nbytes)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAFESYSMALLOC

PERL_CALLCONV Malloc_t	Perl_safesysrealloc(Malloc_t where, MEM_SIZE nbytes)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAFESYSREALLOC

PERL_CALLCONV void	Perl_save_I16(pTHX_ I16* intp);
#define PERL_ARGS_ASSERT_SAVE_I16	\
	assert(intp)
PERL_CALLCONV void	Perl_save_I32(pTHX_ I32* intp);
#define PERL_ARGS_ASSERT_SAVE_I32	\
	assert(intp)
PERL_CALLCONV void	Perl_save_I8(pTHX_ I8* bytep);
#define PERL_ARGS_ASSERT_SAVE_I8	\
	assert(bytep)
PERL_CALLCONV void	Perl_save_adelete(pTHX_ AV *av, SSize_t key);
#define PERL_ARGS_ASSERT_SAVE_ADELETE	\
	assert(av)
/* PERL_CALLCONV void	save_aelem(pTHX_ AV* av, SSize_t idx, SV **sptr); */
#define PERL_ARGS_ASSERT_SAVE_AELEM
PERL_CALLCONV void	Perl_save_aelem_flags(pTHX_ AV* av, SSize_t idx, SV **sptr, const U32 flags);
#define PERL_ARGS_ASSERT_SAVE_AELEM_FLAGS	\
	assert(av); assert(sptr)
PERL_CALLCONV I32	Perl_save_alloc(pTHX_ I32 size, I32 pad);
#define PERL_ARGS_ASSERT_SAVE_ALLOC
PERL_CALLCONV void	Perl_save_aptr(pTHX_ AV** aptr);
#define PERL_ARGS_ASSERT_SAVE_APTR	\
	assert(aptr)
PERL_CALLCONV AV*	Perl_save_ary(pTHX_ GV* gv);
#define PERL_ARGS_ASSERT_SAVE_ARY	\
	assert(gv)
PERL_CALLCONV void	Perl_save_bool(pTHX_ bool* boolp);
#define PERL_ARGS_ASSERT_SAVE_BOOL	\
	assert(boolp)
PERL_CALLCONV void	Perl_save_clearsv(pTHX_ SV** svp);
#define PERL_ARGS_ASSERT_SAVE_CLEARSV	\
	assert(svp)
PERL_CALLCONV void	Perl_save_delete(pTHX_ HV *hv, char *key, I32 klen);
#define PERL_ARGS_ASSERT_SAVE_DELETE	\
	assert(hv); assert(key)
PERL_CALLCONV void	Perl_save_destructor(pTHX_ DESTRUCTORFUNC_NOCONTEXT_t f, void* p);
#define PERL_ARGS_ASSERT_SAVE_DESTRUCTOR	\
	assert(p)
PERL_CALLCONV void	Perl_save_destructor_x(pTHX_ DESTRUCTORFUNC_t f, void* p);
#define PERL_ARGS_ASSERT_SAVE_DESTRUCTOR_X
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_save_freeop(pTHX_ OP* o);
#define PERL_ARGS_ASSERT_SAVE_FREEOP
#endif
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_save_freepv(pTHX_ char* pv);
#define PERL_ARGS_ASSERT_SAVE_FREEPV
#endif
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_save_freesv(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_SAVE_FREESV
#endif
PERL_CALLCONV void	Perl_save_generic_pvref(pTHX_ char** str);
#define PERL_ARGS_ASSERT_SAVE_GENERIC_PVREF	\
	assert(str)
PERL_CALLCONV void	Perl_save_generic_svref(pTHX_ SV** sptr);
#define PERL_ARGS_ASSERT_SAVE_GENERIC_SVREF	\
	assert(sptr)
PERL_CALLCONV void	Perl_save_gp(pTHX_ GV* gv, I32 empty);
#define PERL_ARGS_ASSERT_SAVE_GP	\
	assert(gv)
PERL_CALLCONV HV*	Perl_save_hash(pTHX_ GV* gv);
#define PERL_ARGS_ASSERT_SAVE_HASH	\
	assert(gv)
PERL_CALLCONV void	Perl_save_hdelete(pTHX_ HV *hv, SV *keysv);
#define PERL_ARGS_ASSERT_SAVE_HDELETE	\
	assert(hv); assert(keysv)
/* PERL_CALLCONV void	save_helem(pTHX_ HV *hv, SV *key, SV **sptr); */
#define PERL_ARGS_ASSERT_SAVE_HELEM
PERL_CALLCONV void	Perl_save_helem_flags(pTHX_ HV *hv, SV *key, SV **sptr, const U32 flags);
#define PERL_ARGS_ASSERT_SAVE_HELEM_FLAGS	\
	assert(hv); assert(key); assert(sptr)
PERL_CALLCONV void	Perl_save_hints(pTHX);
#define PERL_ARGS_ASSERT_SAVE_HINTS
PERL_CALLCONV void	Perl_save_hptr(pTHX_ HV** hptr);
#define PERL_ARGS_ASSERT_SAVE_HPTR	\
	assert(hptr)
PERL_CALLCONV void	Perl_save_int(pTHX_ int* intp);
#define PERL_ARGS_ASSERT_SAVE_INT	\
	assert(intp)
PERL_CALLCONV void	Perl_save_item(pTHX_ SV* item);
#define PERL_ARGS_ASSERT_SAVE_ITEM	\
	assert(item)
PERL_CALLCONV void	Perl_save_iv(pTHX_ IV *ivp);
#define PERL_ARGS_ASSERT_SAVE_IV	\
	assert(ivp)
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_save_list(pTHX_ SV** sarg, I32 maxsarg)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_SAVE_LIST	\
	assert(sarg)
#endif

#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_save_long(pTHX_ long* longp)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_SAVE_LONG	\
	assert(longp)
#endif

#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_save_mortalizesv(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_SAVE_MORTALIZESV	\
	assert(sv)
#endif
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_save_nogv(pTHX_ GV* gv)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_SAVE_NOGV	\
	assert(gv)
#endif

#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_save_op(pTHX);
#define PERL_ARGS_ASSERT_SAVE_OP
#endif
PERL_CALLCONV void	Perl_save_padsv_and_mortalize(pTHX_ PADOFFSET off);
#define PERL_ARGS_ASSERT_SAVE_PADSV_AND_MORTALIZE
PERL_CALLCONV void	Perl_save_pptr(pTHX_ char** pptr);
#define PERL_ARGS_ASSERT_SAVE_PPTR	\
	assert(pptr)
PERL_CALLCONV void	Perl_save_pushi32ptr(pTHX_ const I32 i, void *const ptr, const int type);
#define PERL_ARGS_ASSERT_SAVE_PUSHI32PTR
PERL_CALLCONV void	Perl_save_pushptr(pTHX_ void *const ptr, const int type);
#define PERL_ARGS_ASSERT_SAVE_PUSHPTR
PERL_CALLCONV void	Perl_save_pushptrptr(pTHX_ void *const ptr1, void *const ptr2, const int type);
#define PERL_ARGS_ASSERT_SAVE_PUSHPTRPTR
PERL_CALLCONV void	Perl_save_re_context(pTHX);
#define PERL_ARGS_ASSERT_SAVE_RE_CONTEXT
PERL_CALLCONV SV*	Perl_save_scalar(pTHX_ GV* gv);
#define PERL_ARGS_ASSERT_SAVE_SCALAR	\
	assert(gv)
PERL_CALLCONV void	Perl_save_set_svflags(pTHX_ SV *sv, U32 mask, U32 val);
#define PERL_ARGS_ASSERT_SAVE_SET_SVFLAGS	\
	assert(sv)
PERL_CALLCONV void	Perl_save_shared_pvref(pTHX_ char** str);
#define PERL_ARGS_ASSERT_SAVE_SHARED_PVREF	\
	assert(str)
PERL_CALLCONV void	Perl_save_sptr(pTHX_ SV** sptr);
#define PERL_ARGS_ASSERT_SAVE_SPTR	\
	assert(sptr)
PERL_CALLCONV void	Perl_save_strlen(pTHX_ STRLEN* ptr);
#define PERL_ARGS_ASSERT_SAVE_STRLEN	\
	assert(ptr)
PERL_CALLCONV SV*	Perl_save_svref(pTHX_ SV** sptr);
#define PERL_ARGS_ASSERT_SAVE_SVREF	\
	assert(sptr)
PERL_CALLCONV void	Perl_save_vptr(pTHX_ void *ptr);
#define PERL_ARGS_ASSERT_SAVE_VPTR	\
	assert(ptr)
PERL_CALLCONV char*	Perl_savepv(pTHX_ const char* pv)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAVEPV

PERL_CALLCONV char*	Perl_savepvn(pTHX_ const char* pv, Size_t len)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAVEPVN

PERL_CALLCONV char*	Perl_savesharedpv(pTHX_ const char* pv)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAVESHAREDPV

PERL_CALLCONV char*	Perl_savesharedpvn(pTHX_ const char *const pv, const STRLEN len)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAVESHAREDPVN

PERL_CALLCONV char*	Perl_savesharedsvpv(pTHX_ SV *sv)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAVESHAREDSVPV	\
	assert(sv)

PERL_CALLCONV void	Perl_savestack_grow(pTHX);
#define PERL_ARGS_ASSERT_SAVESTACK_GROW
PERL_CALLCONV void	Perl_savestack_grow_cnt(pTHX_ I32 need);
#define PERL_ARGS_ASSERT_SAVESTACK_GROW_CNT
PERL_CALLCONV char*	Perl_savesvpv(pTHX_ SV* sv)
			__attribute__malloc__
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SAVESVPV	\
	assert(sv)

PERL_CALLCONV void	Perl_savetmps(pTHX);
#define PERL_ARGS_ASSERT_SAVETMPS
PERL_CALLCONV OP*	Perl_sawparens(pTHX_ OP* o);
#define PERL_ARGS_ASSERT_SAWPARENS
PERL_CALLCONV OP*	Perl_scalar(pTHX_ OP* o);
#define PERL_ARGS_ASSERT_SCALAR
PERL_CALLCONV OP*	Perl_scalarvoid(pTHX_ OP* o);
#define PERL_ARGS_ASSERT_SCALARVOID	\
	assert(o)
PERL_CALLCONV NV	Perl_scan_bin(pTHX_ const char* start, STRLEN len, STRLEN* retlen);
#define PERL_ARGS_ASSERT_SCAN_BIN	\
	assert(start); assert(retlen)
PERL_CALLCONV NV	Perl_scan_hex(pTHX_ const char* start, STRLEN len, STRLEN* retlen);
#define PERL_ARGS_ASSERT_SCAN_HEX	\
	assert(start); assert(retlen)
PERL_CALLCONV char*	Perl_scan_num(pTHX_ const char* s, YYSTYPE *lvalp);
#define PERL_ARGS_ASSERT_SCAN_NUM	\
	assert(s); assert(lvalp)
PERL_CALLCONV NV	Perl_scan_oct(pTHX_ const char* start, STRLEN len, STRLEN* retlen);
#define PERL_ARGS_ASSERT_SCAN_OCT	\
	assert(start); assert(retlen)
PERL_CALLCONV char*	Perl_scan_str(pTHX_ char *start, int keep_quoted, int keep_delims, int re_reparse, char **delimp)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SCAN_STR	\
	assert(start)

PERL_CALLCONV const char*	Perl_scan_version(pTHX_ const char *s, SV *rv, bool qv);
#define PERL_ARGS_ASSERT_SCAN_VERSION	\
	assert(s); assert(rv)
PERL_CALLCONV char*	Perl_scan_vstring(pTHX_ const char *s, const char *const e, SV *sv);
#define PERL_ARGS_ASSERT_SCAN_VSTRING	\
	assert(s); assert(e); assert(sv)
PERL_CALLCONV char*	Perl_scan_word(pTHX_ char *s, char *dest, STRLEN destlen, int allow_package, STRLEN *slp);
#define PERL_ARGS_ASSERT_SCAN_WORD	\
	assert(s); assert(dest); assert(slp)
PERL_CALLCONV U32	Perl_seed(pTHX);
#define PERL_ARGS_ASSERT_SEED
PERL_CALLCONV void	Perl_set_caret_X(pTHX);
#define PERL_ARGS_ASSERT_SET_CARET_X
PERL_CALLCONV void	Perl_set_context(void *t);
#define PERL_ARGS_ASSERT_SET_CONTEXT	\
	assert(t)
PERL_CALLCONV void	Perl_set_numeric_standard(pTHX);
#define PERL_ARGS_ASSERT_SET_NUMERIC_STANDARD
PERL_CALLCONV void	Perl_set_numeric_underlying(pTHX);
#define PERL_ARGS_ASSERT_SET_NUMERIC_UNDERLYING
PERL_CALLCONV void	Perl_setdefout(pTHX_ GV* gv);
#define PERL_ARGS_ASSERT_SETDEFOUT	\
	assert(gv)
PERL_CALLCONV void	Perl_setfd_cloexec(int fd);
#define PERL_ARGS_ASSERT_SETFD_CLOEXEC
PERL_CALLCONV void	Perl_setfd_cloexec_for_nonsysfd(pTHX_ int fd);
#define PERL_ARGS_ASSERT_SETFD_CLOEXEC_FOR_NONSYSFD
PERL_CALLCONV void	Perl_setfd_cloexec_or_inhexec_by_sysfdness(pTHX_ int fd);
#define PERL_ARGS_ASSERT_SETFD_CLOEXEC_OR_INHEXEC_BY_SYSFDNESS
PERL_CALLCONV void	Perl_setfd_inhexec(int fd);
#define PERL_ARGS_ASSERT_SETFD_INHEXEC
PERL_CALLCONV void	Perl_setfd_inhexec_for_sysfd(pTHX_ int fd);
#define PERL_ARGS_ASSERT_SETFD_INHEXEC_FOR_SYSFD
PERL_CALLCONV HEK*	Perl_share_hek(pTHX_ const char* str, SSize_t len, U32 hash);
#define PERL_ARGS_ASSERT_SHARE_HEK	\
	assert(str)
PERL_CALLCONV Signal_t	Perl_sighandler1(int sig);
#define PERL_ARGS_ASSERT_SIGHANDLER1
PERL_CALLCONV Signal_t	Perl_sighandler3(int sig, Siginfo_t *info, void *uap);
#define PERL_ARGS_ASSERT_SIGHANDLER3
#ifndef PERL_NO_INLINE_FUNCTIONS
PERL_STATIC_INLINE unsigned	Perl_single_1bit_pos32(U32 word)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SINGLE_1BIT_POS32
#endif

PERL_CALLCONV char*	Perl_skipspace_flags(pTHX_ char *s, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SKIPSPACE_FLAGS	\
	assert(s)

PERL_CALLCONV void	Perl_sortsv(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t cmp);
#define PERL_ARGS_ASSERT_SORTSV	\
	assert(cmp)
PERL_CALLCONV void	Perl_sortsv_flags(pTHX_ SV** array, size_t num_elts, SVCOMPARE_t cmp, U32 flags);
#define PERL_ARGS_ASSERT_SORTSV_FLAGS	\
	assert(cmp)
PERL_CALLCONV SV**	Perl_stack_grow(pTHX_ SV** sp, SV** p, SSize_t n);
#define PERL_ARGS_ASSERT_STACK_GROW	\
	assert(sp); assert(p)
PERL_CALLCONV PerlIO*	Perl_start_glob(pTHX_ SV *tmpglob, IO *io);
#define PERL_ARGS_ASSERT_START_GLOB	\
	assert(tmpglob); assert(io)
PERL_CALLCONV I32	Perl_start_subparse(pTHX_ I32 is_format, U32 flags);
#define PERL_ARGS_ASSERT_START_SUBPARSE
PERL_CALLCONV NV	Perl_str_to_version(pTHX_ SV *sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_STR_TO_VERSION	\
	assert(sv)

PERL_CALLCONV void	Perl_sub_crush_depth(pTHX_ CV* cv);
#define PERL_ARGS_ASSERT_SUB_CRUSH_DEPTH	\
	assert(cv)
#ifndef NO_MATHOMS
PERL_CALLCONV bool	Perl_sv_2bool(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_2BOOL	\
	assert(sv)
#endif
PERL_CALLCONV bool	Perl_sv_2bool_flags(pTHX_ SV *sv, I32 flags);
#define PERL_ARGS_ASSERT_SV_2BOOL_FLAGS	\
	assert(sv)
PERL_CALLCONV CV*	Perl_sv_2cv(pTHX_ SV* sv, HV **const st, GV **const gvp, const I32 lref);
#define PERL_ARGS_ASSERT_SV_2CV	\
	assert(st); assert(gvp)
PERL_CALLCONV IO*	Perl_sv_2io(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_2IO	\
	assert(sv)
#ifndef NO_MATHOMS
PERL_CALLCONV IV	Perl_sv_2iv(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_2IV	\
	assert(sv)
#endif
PERL_CALLCONV IV	Perl_sv_2iv_flags(pTHX_ SV *const sv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_2IV_FLAGS	\
	assert(sv)
PERL_CALLCONV SV*	Perl_sv_2mortal(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_2MORTAL
PERL_CALLCONV SV*	Perl_sv_2num(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_2NUM	\
	assert(sv)
PERL_CALLCONV NV	Perl_sv_2nv_flags(pTHX_ SV *const sv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_2NV_FLAGS	\
	assert(sv)
#ifndef NO_MATHOMS
PERL_CALLCONV char*	Perl_sv_2pv(pTHX_ SV *sv, STRLEN *lp);
#define PERL_ARGS_ASSERT_SV_2PV	\
	assert(sv)
#endif
PERL_CALLCONV char*	Perl_sv_2pv_flags(pTHX_ SV *const sv, STRLEN *const lp, const U32 flags);
#define PERL_ARGS_ASSERT_SV_2PV_FLAGS	\
	assert(sv)
#ifndef NO_MATHOMS
PERL_CALLCONV char*	Perl_sv_2pv_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_2PV_NOLEN	\
	assert(sv)
#endif

#ifndef NO_MATHOMS
PERL_CALLCONV char*	Perl_sv_2pvbyte(pTHX_ SV *sv, STRLEN *const lp);
#define PERL_ARGS_ASSERT_SV_2PVBYTE	\
	assert(sv)
#endif
PERL_CALLCONV char*	Perl_sv_2pvbyte_flags(pTHX_ SV *sv, STRLEN *const lp, const U32 flags);
#define PERL_ARGS_ASSERT_SV_2PVBYTE_FLAGS	\
	assert(sv)
#ifndef NO_MATHOMS
PERL_CALLCONV char*	Perl_sv_2pvbyte_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_2PVBYTE_NOLEN	\
	assert(sv)
#endif

#ifndef NO_MATHOMS
PERL_CALLCONV char*	Perl_sv_2pvutf8(pTHX_ SV *sv, STRLEN *const lp);
#define PERL_ARGS_ASSERT_SV_2PVUTF8	\
	assert(sv)
#endif
PERL_CALLCONV char*	Perl_sv_2pvutf8_flags(pTHX_ SV *sv, STRLEN *const lp, const U32 flags);
#define PERL_ARGS_ASSERT_SV_2PVUTF8_FLAGS	\
	assert(sv)
#ifndef NO_MATHOMS
PERL_CALLCONV char*	Perl_sv_2pvutf8_nolen(pTHX_ SV* sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_2PVUTF8_NOLEN	\
	assert(sv)
#endif

#ifndef NO_MATHOMS
PERL_CALLCONV UV	Perl_sv_2uv(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_2UV	\
	assert(sv)
#endif
PERL_CALLCONV UV	Perl_sv_2uv_flags(pTHX_ SV *const sv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_2UV_FLAGS	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_backoff(SV *const sv);
#define PERL_ARGS_ASSERT_SV_BACKOFF	\
	assert(sv)
PERL_CALLCONV SV*	Perl_sv_bless(pTHX_ SV *const sv, HV *const stash);
#define PERL_ARGS_ASSERT_SV_BLESS	\
	assert(sv); assert(stash)
PERL_CALLCONV bool	Perl_sv_cat_decode(pTHX_ SV* dsv, SV *encoding, SV *ssv, int *offset, char* tstr, int tlen);
#define PERL_ARGS_ASSERT_SV_CAT_DECODE	\
	assert(dsv); assert(encoding); assert(ssv); assert(offset); assert(tstr)
PERL_CALLCONV void	Perl_sv_catpv(pTHX_ SV *const dsv, const char* sstr);
#define PERL_ARGS_ASSERT_SV_CATPV	\
	assert(dsv)
PERL_CALLCONV void	Perl_sv_catpv_flags(pTHX_ SV *dsv, const char *sstr, const I32 flags);
#define PERL_ARGS_ASSERT_SV_CATPV_FLAGS	\
	assert(dsv); assert(sstr)
PERL_CALLCONV void	Perl_sv_catpv_mg(pTHX_ SV *const dsv, const char *const sstr);
#define PERL_ARGS_ASSERT_SV_CATPV_MG	\
	assert(dsv)
PERL_CALLCONV void	Perl_sv_catpvf(pTHX_ SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_SV_CATPVF	\
	assert(sv); assert(pat)

PERL_CALLCONV void	Perl_sv_catpvf_mg(pTHX_ SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_SV_CATPVF_MG	\
	assert(sv); assert(pat)

#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_sv_catpvn(pTHX_ SV *dsv, const char *sstr, STRLEN len);
#define PERL_ARGS_ASSERT_SV_CATPVN	\
	assert(dsv); assert(sstr)
#endif
PERL_CALLCONV void	Perl_sv_catpvn_flags(pTHX_ SV *const dsv, const char *sstr, const STRLEN len, const I32 flags);
#define PERL_ARGS_ASSERT_SV_CATPVN_FLAGS	\
	assert(dsv); assert(sstr)
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_sv_catpvn_mg(pTHX_ SV *dsv, const char *sstr, STRLEN len);
#define PERL_ARGS_ASSERT_SV_CATPVN_MG	\
	assert(dsv); assert(sstr)
#endif
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_sv_catsv(pTHX_ SV *dsv, SV *sstr);
#define PERL_ARGS_ASSERT_SV_CATSV	\
	assert(dsv)
#endif
PERL_CALLCONV void	Perl_sv_catsv_flags(pTHX_ SV *const dsv, SV *const sstr, const I32 flags);
#define PERL_ARGS_ASSERT_SV_CATSV_FLAGS	\
	assert(dsv)
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_sv_catsv_mg(pTHX_ SV *dsv, SV *sstr);
#define PERL_ARGS_ASSERT_SV_CATSV_MG	\
	assert(dsv)
#endif
PERL_CALLCONV void	Perl_sv_chop(pTHX_ SV *const sv, const char *const ptr);
#define PERL_ARGS_ASSERT_SV_CHOP	\
	assert(sv)
PERL_CALLCONV I32	Perl_sv_clean_all(pTHX);
#define PERL_ARGS_ASSERT_SV_CLEAN_ALL
PERL_CALLCONV void	Perl_sv_clean_objs(pTHX);
#define PERL_ARGS_ASSERT_SV_CLEAN_OBJS
PERL_CALLCONV void	Perl_sv_clear(pTHX_ SV *const orig_sv);
#define PERL_ARGS_ASSERT_SV_CLEAR	\
	assert(orig_sv)
PERL_CALLCONV I32	Perl_sv_cmp(pTHX_ SV *const sv1, SV *const sv2);
#define PERL_ARGS_ASSERT_SV_CMP
PERL_CALLCONV I32	Perl_sv_cmp_flags(pTHX_ SV *const sv1, SV *const sv2, const U32 flags);
#define PERL_ARGS_ASSERT_SV_CMP_FLAGS
PERL_CALLCONV I32	Perl_sv_cmp_locale(pTHX_ SV *const sv1, SV *const sv2);
#define PERL_ARGS_ASSERT_SV_CMP_LOCALE
PERL_CALLCONV I32	Perl_sv_cmp_locale_flags(pTHX_ SV *const sv1, SV *const sv2, const U32 flags);
#define PERL_ARGS_ASSERT_SV_CMP_LOCALE_FLAGS
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_sv_copypv(pTHX_ SV *const dsv, SV *const ssv);
#define PERL_ARGS_ASSERT_SV_COPYPV	\
	assert(dsv); assert(ssv)
#endif
PERL_CALLCONV void	Perl_sv_copypv_flags(pTHX_ SV *const dsv, SV *const ssv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_COPYPV_FLAGS	\
	assert(dsv); assert(ssv)
/* PERL_CALLCONV void	sv_copypv_nomg(pTHX_ SV *const dsv, SV *const ssv); */
#define PERL_ARGS_ASSERT_SV_COPYPV_NOMG
PERL_CALLCONV void	Perl_sv_dec(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_DEC
PERL_CALLCONV void	Perl_sv_dec_nomg(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_DEC_NOMG
PERL_CALLCONV void	Perl_sv_del_backref(pTHX_ SV *const tsv, SV *const sv);
#define PERL_ARGS_ASSERT_SV_DEL_BACKREF	\
	assert(tsv); assert(sv)
PERL_CALLCONV bool	Perl_sv_derived_from(pTHX_ SV* sv, const char *const name)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM	\
	assert(sv); assert(name)

PERL_CALLCONV bool	Perl_sv_derived_from_pv(pTHX_ SV* sv, const char *const name, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_PV	\
	assert(sv); assert(name)

PERL_CALLCONV bool	Perl_sv_derived_from_pvn(pTHX_ SV* sv, const char *const name, const STRLEN len, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_PVN	\
	assert(sv); assert(name)

PERL_CALLCONV bool	Perl_sv_derived_from_sv(pTHX_ SV* sv, SV *namesv, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_SV	\
	assert(sv); assert(namesv)

PERL_CALLCONV bool	Perl_sv_destroyable(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_DESTROYABLE
PERL_CALLCONV bool	Perl_sv_does(pTHX_ SV* sv, const char *const name)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DOES	\
	assert(sv); assert(name)

PERL_CALLCONV bool	Perl_sv_does_pv(pTHX_ SV* sv, const char *const name, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DOES_PV	\
	assert(sv); assert(name)

PERL_CALLCONV bool	Perl_sv_does_pvn(pTHX_ SV* sv, const char *const name, const STRLEN len, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DOES_PVN	\
	assert(sv); assert(name)

PERL_CALLCONV bool	Perl_sv_does_sv(pTHX_ SV* sv, SV* namesv, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_DOES_SV	\
	assert(sv); assert(namesv)

PERL_CALLCONV void	Perl_sv_dump(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_SV_DUMP
#ifndef NO_MATHOMS
PERL_CALLCONV I32	Perl_sv_eq(pTHX_ SV* sv1, SV* sv2);
#define PERL_ARGS_ASSERT_SV_EQ
#endif
PERL_CALLCONV I32	Perl_sv_eq_flags(pTHX_ SV* sv1, SV* sv2, const U32 flags);
#define PERL_ARGS_ASSERT_SV_EQ_FLAGS
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_sv_force_normal(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_FORCE_NORMAL	\
	assert(sv)
#endif
PERL_CALLCONV void	Perl_sv_force_normal_flags(pTHX_ SV *const sv, const U32 flags);
#define PERL_ARGS_ASSERT_SV_FORCE_NORMAL_FLAGS	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_free(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_FREE
PERL_CALLCONV void	Perl_sv_free2(pTHX_ SV *const sv, const U32 refcnt);
#define PERL_ARGS_ASSERT_SV_FREE2	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_free_arenas(pTHX);
#define PERL_ARGS_ASSERT_SV_FREE_ARENAS
PERL_CALLCONV SV*	Perl_sv_get_backrefs(SV *const sv);
#define PERL_ARGS_ASSERT_SV_GET_BACKREFS	\
	assert(sv)
PERL_CALLCONV char*	Perl_sv_gets(pTHX_ SV *const sv, PerlIO *const fp, I32 append);
#define PERL_ARGS_ASSERT_SV_GETS	\
	assert(sv); assert(fp)
PERL_CALLCONV char*	Perl_sv_grow(pTHX_ SV *const sv, STRLEN newlen);
#define PERL_ARGS_ASSERT_SV_GROW	\
	assert(sv)
PERL_CALLCONV char*	Perl_sv_grow_fresh(pTHX_ SV *const sv, STRLEN newlen);
#define PERL_ARGS_ASSERT_SV_GROW_FRESH	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_inc(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_INC
PERL_CALLCONV void	Perl_sv_inc_nomg(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_INC_NOMG
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_sv_insert(pTHX_ SV *const bigstr, const STRLEN offset, const STRLEN len, const char *const little, const STRLEN littlelen);
#define PERL_ARGS_ASSERT_SV_INSERT	\
	assert(bigstr); assert(little)
#endif
PERL_CALLCONV void	Perl_sv_insert_flags(pTHX_ SV *const bigstr, const STRLEN offset, const STRLEN len, const char *little, const STRLEN littlelen, const U32 flags);
#define PERL_ARGS_ASSERT_SV_INSERT_FLAGS	\
	assert(bigstr); assert(little)
PERL_CALLCONV int	Perl_sv_isa(pTHX_ SV* sv, const char *const name);
#define PERL_ARGS_ASSERT_SV_ISA	\
	assert(name)
PERL_CALLCONV bool	Perl_sv_isa_sv(pTHX_ SV* sv, SV* namesv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_ISA_SV	\
	assert(sv); assert(namesv)

PERL_CALLCONV int	Perl_sv_isobject(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_SV_ISOBJECT
#ifndef NO_MATHOMS
PERL_CALLCONV IV	Perl_sv_iv(pTHX_ SV* sv)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_SV_IV	\
	assert(sv)
#endif

PERL_CALLCONV STRLEN	Perl_sv_len(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_LEN
PERL_CALLCONV STRLEN	Perl_sv_len_utf8(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_LEN_UTF8
PERL_CALLCONV STRLEN	Perl_sv_len_utf8_nomg(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_LEN_UTF8_NOMG	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_magic(pTHX_ SV *const sv, SV *const obj, const int how, const char *const name, const I32 namlen);
#define PERL_ARGS_ASSERT_SV_MAGIC	\
	assert(sv)
PERL_CALLCONV MAGIC *	Perl_sv_magicext(pTHX_ SV *const sv, SV *const obj, const int how, const MGVTBL *const vtbl, const char *const name, const I32 namlen);
#define PERL_ARGS_ASSERT_SV_MAGICEXT	\
	assert(sv)
PERL_CALLCONV MAGIC *	Perl_sv_magicext_mglob(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_MAGICEXT_MGLOB	\
	assert(sv)
#ifndef NO_MATHOMS
PERL_CALLCONV SV*	Perl_sv_mortalcopy(pTHX_ SV *const oldsv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_MORTALCOPY
#endif

PERL_CALLCONV SV*	Perl_sv_mortalcopy_flags(pTHX_ SV *const oldsv, U32 flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_MORTALCOPY_FLAGS

PERL_CALLCONV SV*	Perl_sv_newmortal(pTHX)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_NEWMORTAL

PERL_CALLCONV SV*	Perl_sv_newref(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_NEWREF
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_sv_nolocking(pTHX_ SV *sv)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_SV_NOLOCKING
#endif

PERL_CALLCONV void	Perl_sv_nosharing(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_NOSHARING
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_sv_nounlocking(pTHX_ SV *sv)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_SV_NOUNLOCKING
#endif

/* PERL_CALLCONV bool	sv_numeq(pTHX_ SV* sv1, SV* sv2); */
#define PERL_ARGS_ASSERT_SV_NUMEQ
PERL_CALLCONV bool	Perl_sv_numeq_flags(pTHX_ SV* sv1, SV* sv2, const U32 flags);
#define PERL_ARGS_ASSERT_SV_NUMEQ_FLAGS
#ifndef NO_MATHOMS
PERL_CALLCONV NV	Perl_sv_nv(pTHX_ SV* sv)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_SV_NV	\
	assert(sv)
#endif

#ifndef PERL_NO_INLINE_FUNCTIONS
PERL_STATIC_INLINE bool	Perl_sv_only_taint_gmagic(SV *sv);
#define PERL_ARGS_ASSERT_SV_ONLY_TAINT_GMAGIC	\
	assert(sv)
#endif
PERL_CALLCONV char*	Perl_sv_peek(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_SV_PEEK
PERL_CALLCONV void	Perl_sv_pos_b2u(pTHX_ SV *const sv, I32 *const offsetp);
#define PERL_ARGS_ASSERT_SV_POS_B2U	\
	assert(offsetp)
PERL_CALLCONV STRLEN	Perl_sv_pos_b2u_flags(pTHX_ SV *const sv, STRLEN const offset, U32 flags);
#define PERL_ARGS_ASSERT_SV_POS_B2U_FLAGS	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_pos_u2b(pTHX_ SV *const sv, I32 *const offsetp, I32 *const lenp);
#define PERL_ARGS_ASSERT_SV_POS_U2B	\
	assert(offsetp)
PERL_CALLCONV STRLEN	Perl_sv_pos_u2b_flags(pTHX_ SV *const sv, STRLEN uoffset, STRLEN *const lenp, U32 flags);
#define PERL_ARGS_ASSERT_SV_POS_U2B_FLAGS	\
	assert(sv)
#ifndef NO_MATHOMS
PERL_CALLCONV char*	Perl_sv_pv(pTHX_ SV *sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_PV	\
	assert(sv)
#endif

#ifndef NO_MATHOMS
PERL_CALLCONV char*	Perl_sv_pvbyte(pTHX_ SV *sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_PVBYTE	\
	assert(sv)
#endif

#ifndef NO_MATHOMS
PERL_CALLCONV char*	Perl_sv_pvbyten(pTHX_ SV *sv, STRLEN *lp)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_SV_PVBYTEN	\
	assert(sv); assert(lp)
#endif

PERL_CALLCONV char*	Perl_sv_pvbyten_force(pTHX_ SV *const sv, STRLEN *const lp);
#define PERL_ARGS_ASSERT_SV_PVBYTEN_FORCE	\
	assert(sv)
#ifndef NO_MATHOMS
PERL_CALLCONV char*	Perl_sv_pvn(pTHX_ SV *sv, STRLEN *lp)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_SV_PVN	\
	assert(sv); assert(lp)
#endif

#ifndef NO_MATHOMS
PERL_CALLCONV char*	Perl_sv_pvn_force(pTHX_ SV* sv, STRLEN* lp);
#define PERL_ARGS_ASSERT_SV_PVN_FORCE	\
	assert(sv)
#endif
PERL_CALLCONV char*	Perl_sv_pvn_force_flags(pTHX_ SV *const sv, STRLEN *const lp, const U32 flags);
#define PERL_ARGS_ASSERT_SV_PVN_FORCE_FLAGS	\
	assert(sv)
#ifndef NO_MATHOMS
PERL_CALLCONV char*	Perl_sv_pvn_nomg(pTHX_ SV* sv, STRLEN* lp)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_SV_PVN_NOMG	\
	assert(sv)
#endif

#ifndef NO_MATHOMS
PERL_CALLCONV char*	Perl_sv_pvutf8(pTHX_ SV *sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_PVUTF8	\
	assert(sv)
#endif

#ifndef NO_MATHOMS
PERL_CALLCONV char*	Perl_sv_pvutf8n(pTHX_ SV *sv, STRLEN *lp)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_SV_PVUTF8N	\
	assert(sv); assert(lp)
#endif

PERL_CALLCONV char*	Perl_sv_pvutf8n_force(pTHX_ SV *const sv, STRLEN *const lp);
#define PERL_ARGS_ASSERT_SV_PVUTF8N_FORCE	\
	assert(sv)
PERL_CALLCONV char*	Perl_sv_recode_to_utf8(pTHX_ SV* sv, SV *encoding);
#define PERL_ARGS_ASSERT_SV_RECODE_TO_UTF8	\
	assert(sv); assert(encoding)
PERL_CALLCONV SV*	Perl_sv_ref(pTHX_ SV *dst, const SV *const sv, const int ob);
#define PERL_ARGS_ASSERT_SV_REF	\
	assert(sv)
PERL_CALLCONV const char*	Perl_sv_reftype(pTHX_ const SV *const sv, const int ob)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_REFTYPE	\
	assert(sv)

PERL_CALLCONV void	Perl_sv_replace(pTHX_ SV *const sv, SV *const nsv);
#define PERL_ARGS_ASSERT_SV_REPLACE	\
	assert(sv); assert(nsv)
PERL_CALLCONV void	Perl_sv_report_used(pTHX);
#define PERL_ARGS_ASSERT_SV_REPORT_USED
PERL_CALLCONV void	Perl_sv_reset(pTHX_ const char* s, HV *const stash);
#define PERL_ARGS_ASSERT_SV_RESET	\
	assert(s)
PERL_CALLCONV void	Perl_sv_resetpvn(pTHX_ const char* s, STRLEN len, HV *const stash);
#define PERL_ARGS_ASSERT_SV_RESETPVN
PERL_CALLCONV SV*	Perl_sv_rvunweaken(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_RVUNWEAKEN	\
	assert(sv)
PERL_CALLCONV SV*	Perl_sv_rvweaken(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_RVWEAKEN	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_set_undef(pTHX_ SV *sv);
#define PERL_ARGS_ASSERT_SV_SET_UNDEF	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_sethek(pTHX_ SV *const sv, const HEK *const hek);
#define PERL_ARGS_ASSERT_SV_SETHEK	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setiv(pTHX_ SV *const sv, const IV num);
#define PERL_ARGS_ASSERT_SV_SETIV	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setiv_mg(pTHX_ SV *const sv, const IV i);
#define PERL_ARGS_ASSERT_SV_SETIV_MG	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setnv(pTHX_ SV *const sv, const NV num);
#define PERL_ARGS_ASSERT_SV_SETNV	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setnv_mg(pTHX_ SV *const sv, const NV num);
#define PERL_ARGS_ASSERT_SV_SETNV_MG	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setpv(pTHX_ SV *const sv, const char *const ptr);
#define PERL_ARGS_ASSERT_SV_SETPV	\
	assert(sv)
PERL_CALLCONV char  *	Perl_sv_setpv_bufsize(pTHX_ SV *const sv, const STRLEN cur, const STRLEN len);
#define PERL_ARGS_ASSERT_SV_SETPV_BUFSIZE	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setpv_mg(pTHX_ SV *const sv, const char *const ptr);
#define PERL_ARGS_ASSERT_SV_SETPV_MG	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setpvf(pTHX_ SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_SV_SETPVF	\
	assert(sv); assert(pat)

PERL_CALLCONV void	Perl_sv_setpvf_mg(pTHX_ SV *const sv, const char *const pat, ...)
			__attribute__format__(__printf__,pTHX_2,pTHX_3);
#define PERL_ARGS_ASSERT_SV_SETPVF_MG	\
	assert(sv); assert(pat)

#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_sv_setpviv(pTHX_ SV *const sv, const IV num)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_SV_SETPVIV	\
	assert(sv)
#endif

#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_sv_setpviv_mg(pTHX_ SV *const sv, const IV iv)
			__attribute__deprecated__;
#define PERL_ARGS_ASSERT_SV_SETPVIV_MG	\
	assert(sv)
#endif

PERL_CALLCONV void	Perl_sv_setpvn(pTHX_ SV *const sv, const char *const ptr, const STRLEN len);
#define PERL_ARGS_ASSERT_SV_SETPVN	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setpvn_fresh(pTHX_ SV *const sv, const char *const ptr, const STRLEN len);
#define PERL_ARGS_ASSERT_SV_SETPVN_FRESH	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setpvn_mg(pTHX_ SV *const sv, const char *const ptr, const STRLEN len);
#define PERL_ARGS_ASSERT_SV_SETPVN_MG	\
	assert(sv); assert(ptr)
PERL_CALLCONV SV*	Perl_sv_setref_iv(pTHX_ SV *const rv, const char *const classname, const IV iv);
#define PERL_ARGS_ASSERT_SV_SETREF_IV	\
	assert(rv)
PERL_CALLCONV SV*	Perl_sv_setref_nv(pTHX_ SV *const rv, const char *const classname, const NV nv);
#define PERL_ARGS_ASSERT_SV_SETREF_NV	\
	assert(rv)
PERL_CALLCONV SV*	Perl_sv_setref_pv(pTHX_ SV *const rv, const char *const classname, void *const pv);
#define PERL_ARGS_ASSERT_SV_SETREF_PV	\
	assert(rv)
PERL_CALLCONV SV*	Perl_sv_setref_pvn(pTHX_ SV *const rv, const char *const classname, const char *const pv, const STRLEN n);
#define PERL_ARGS_ASSERT_SV_SETREF_PVN	\
	assert(rv); assert(pv)
PERL_CALLCONV SV*	Perl_sv_setref_uv(pTHX_ SV *const rv, const char *const classname, const UV uv);
#define PERL_ARGS_ASSERT_SV_SETREF_UV	\
	assert(rv)
PERL_CALLCONV void	Perl_sv_setrv_inc(pTHX_ SV *const sv, SV *const ref);
#define PERL_ARGS_ASSERT_SV_SETRV_INC	\
	assert(sv); assert(ref)
PERL_CALLCONV void	Perl_sv_setrv_inc_mg(pTHX_ SV *const sv, SV *const ref);
#define PERL_ARGS_ASSERT_SV_SETRV_INC_MG	\
	assert(sv); assert(ref)
PERL_CALLCONV void	Perl_sv_setrv_noinc(pTHX_ SV *const sv, SV *const ref);
#define PERL_ARGS_ASSERT_SV_SETRV_NOINC	\
	assert(sv); assert(ref)
PERL_CALLCONV void	Perl_sv_setrv_noinc_mg(pTHX_ SV *const sv, SV *const ref);
#define PERL_ARGS_ASSERT_SV_SETRV_NOINC_MG	\
	assert(sv); assert(ref)
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_sv_setsv(pTHX_ SV *dsv, SV *ssv);
#define PERL_ARGS_ASSERT_SV_SETSV	\
	assert(dsv)
#endif
PERL_CALLCONV void	Perl_sv_setsv_flags(pTHX_ SV *dsv, SV *ssv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_SETSV_FLAGS	\
	assert(dsv)
PERL_CALLCONV void	Perl_sv_setsv_mg(pTHX_ SV *const dsv, SV *const ssv);
#define PERL_ARGS_ASSERT_SV_SETSV_MG	\
	assert(dsv)
PERL_CALLCONV void	Perl_sv_setuv(pTHX_ SV *const sv, const UV num);
#define PERL_ARGS_ASSERT_SV_SETUV	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_setuv_mg(pTHX_ SV *const sv, const UV u);
#define PERL_ARGS_ASSERT_SV_SETUV_MG	\
	assert(sv)
/* PERL_CALLCONV bool	sv_streq(pTHX_ SV* sv1, SV* sv2); */
#define PERL_ARGS_ASSERT_SV_STREQ
PERL_CALLCONV bool	Perl_sv_streq_flags(pTHX_ SV* sv1, SV* sv2, const U32 flags);
#define PERL_ARGS_ASSERT_SV_STREQ_FLAGS
PERL_CALLCONV SV*	Perl_sv_string_from_errnum(pTHX_ int errnum, SV* tgtsv);
#define PERL_ARGS_ASSERT_SV_STRING_FROM_ERRNUM
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_sv_taint(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_SV_TAINT	\
	assert(sv)
#endif
PERL_CALLCONV bool	Perl_sv_tainted(pTHX_ SV *const sv)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_TAINTED	\
	assert(sv)

PERL_CALLCONV I32	Perl_sv_true(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_TRUE
PERL_CALLCONV char*	Perl_sv_uni_display(pTHX_ SV *dsv, SV *ssv, STRLEN pvlim, UV flags)
			__attribute__warn_unused_result__;
#define PERL_ARGS_ASSERT_SV_UNI_DISPLAY	\
	assert(dsv); assert(ssv)

PERL_CALLCONV int	Perl_sv_unmagic(pTHX_ SV *const sv, const int type);
#define PERL_ARGS_ASSERT_SV_UNMAGIC	\
	assert(sv)
PERL_CALLCONV int	Perl_sv_unmagicext(pTHX_ SV *const sv, const int type, MGVTBL *vtbl);
#define PERL_ARGS_ASSERT_SV_UNMAGICEXT	\
	assert(sv)
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_sv_unref(pTHX_ SV* sv);
#define PERL_ARGS_ASSERT_SV_UNREF	\
	assert(sv)
#endif
PERL_CALLCONV void	Perl_sv_unref_flags(pTHX_ SV *const ref, const U32 flags);
#define PERL_ARGS_ASSERT_SV_UNREF_FLAGS	\
	assert(ref)
PERL_CALLCONV void	Perl_sv_untaint(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_UNTAINT	\
	assert(sv)
PERL_CALLCONV void	Perl_sv_upgrade(pTHX_ SV *const sv, svtype new_type);
#define PERL_ARGS_ASSERT_SV_UPGRADE	\
	assert(sv)
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_sv_usepvn(pTHX_ SV* sv, char* ptr, STRLEN len);
#define PERL_ARGS_ASSERT_SV_USEPVN	\
	assert(sv)
#endif
PERL_CALLCONV void	Perl_sv_usepvn_flags(pTHX_ SV *const sv, char* ptr, const STRLEN len, const U32 flags);
#define PERL_ARGS_ASSERT_SV_USEPVN_FLAGS	\
	assert(sv)
#ifndef NO_MATHOMS
PERL_CALLCONV void	Perl_sv_usepvn_mg(pTHX_ SV *sv, char *ptr, STRLEN len);
#define PERL_ARGS_ASSERT_SV_USEPVN_MG	\
	assert(sv)
#endif
PERL_CALLCONV bool	Perl_sv_utf8_decode(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_UTF8_DECODE	\
	assert(sv)
#ifndef NO_MATHOMS
PERL_CALLCONV bool	Perl_sv_utf8_downgrade(pTHX_ SV *const sv, const bool fail_ok);
#define PERL_ARGS_ASSERT_SV_UTF8_DOWNGRADE	\
	assert(sv)
#endif
PERL_CALLCONV bool	Perl_sv_utf8_downgrade_flags(pTHX_ SV *const sv, const bool fail_ok, const U32 flags);
#define PERL_ARGS_ASSERT_SV_UTF8_DOWNGRADE_FLAGS	\
	assert(sv)
/* PERL_CALLCONV bool	sv_utf8_downgrade_nomg(pTHX_ SV *const sv, const bool fail_ok); */
#define PERL_ARGS_ASSERT_SV_UTF8_DOWNGRADE_NOMG
PERL_CALLCONV void	Perl_sv_utf8_encode(pTHX_ SV *const sv);
#define PERL_ARGS_ASSERT_SV_UTF8_ENCODE	\
	assert(sv)
#ifndef NO_MATHOMS
PERL_CALLCONV STRLEN	Perl_sv_utf8_upgrade(pTHX_ SV *sv);
