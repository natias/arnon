Or more succinctly:

    my @uniq = keys %{{%foo,%bar}};

Or if you really want to save space:

    my %seen = ();
    while (defined ($key = each %foo)) {
        $seen{$key}++;
    }
    while (defined ($key = each %bar)) {
        $seen{$key}++;
    }
    my @uniq = keys %seen;

=head2 How can I store a multidimensional array in a DBM file?

Either stringify the structure yourself (no fun), or else
get the MLDBM (which uses Data::Dumper) module from CPAN and layer
it on top of either DB_File or GDBM_File. You might also try DBM::Deep, but
it can be a bit slow.

=head2 How can I make my hash remember the order I put elements into it?

Use the L<Tie::IxHash> from CPAN.

    use Tie::IxHash;

    tie my %myhash, 'Tie::IxHash';

    for (my $i=0; $i<20; $i++) {
        $myhash{$i} = 2*$i;
    }

    my @keys = keys %myhash;
    # @keys = (0,1,2,3,...)

=head2 Why does passing a subroutine an undefined element in a hash create it?

(contributed by brian d foy)

Are you using a really old version of Perl?

Normally, accessing a hash key's value for a nonexistent key will
I<not> create the key.

    my %hash  = ();
    my $value = $hash{ 'foo' };
    print "This won't print\n" if exists $hash{ 'foo' };

Passing C<$hash{ 'foo' }> to a subroutine used to be a special case, though.
Since you could assign directly to C<$_[0]>, Perl had to be ready to
make that assignment so it created the hash key ahead of time:

    my_sub( $hash{ 'foo' } );
    print "This will print before 5.004\n" if exists $hash{ 'foo' };

    sub my_sub {
        # $_[0] = 'bar'; # create hash key in case you do this
        1;
    }

Since Perl 5.004, however, this situation is a special case and Perl
creates the hash key only when you make the assignment:

    my_sub( $hash{ 'foo' } );
    print "This will print, even after 5.004\n" if exists $hash{ 'foo' };

    sub my_sub {
        $_[0] = 'bar';
    }

However, if you want the old behavior (and think carefully about that
because it's a weird side effect), you can pass a hash slice instead.
Perl 5.004 didn't make this a special case:

    my_sub( @hash{ qw/foo/ } );

=head2 How can I make the Perl equivalent of a C structure/C++ class/hash or array of hashes or arrays?

Usually a hash ref, perhaps like this:

    $record = {
        NAME   => "Jason",
        EMPNO  => 132,
        TITLE  => "deputy peon",
        AGE    => 23,
        SALARY => 37_000,
        PALS   => [ "Norbert", "Rhys", "Phineas"],
    };

References are documented in L<perlref> and L<perlreftut>.
Examples of complex data structures are given in L<perldsc> and
L<perllol>. Examples of structures and object-oriented classes are
in L<perlootut>.

=head2 How can I use a reference as a hash key?

(contributed by brian d foy and Ben Morrow)

Hash keys are strings, so you can't really use a reference as the key.
When you try to do that, perl turns the reference into its stringified
form (for instance, C<HASH(0xDEADBEEF)>). From there you can't get
back the reference from the stringified form, at least without doing
some extra work on your own.

Remember that the entry in the hash will still be there even if
the referenced variable  goes out of scope, and that it is entirely
possible for Perl to subsequently allocate a different variable at
the same address. This will mean a new variable might accidentally
be associated with the value for an old.

If you have Perl 5.10 or later, and you just want to store a value
against the reference for lookup later, you can use the core
Hash::Util::Fieldhash module. This will also handle renaming the
keys if you use multiple threads (which causes all variables to be
reallocated at new addresses, changing their stringification), and
garbage-collecting the entries when the referenced variable goes out
of scope.

If you actually need to be able to get a real reference back from
each hash entry, you can use the Tie::RefHash module, which does the
required work for you.

=head2 How can I check if a key exists in a multilevel hash?

(contributed by brian d foy)

The trick to this problem is avoiding accidental autovivification. If
you want to check three keys deep, you might naE<0xEF>vely try this:

    my %hash;
    if( exists $hash{key1}{key2}{key3} ) {
        ...;
    }

Even though you started with a completely empty hash, after that call to
C<exists> you've created the structure you needed to check for C<key3>:

    %hash = (
              'key1' => {
                          'key2' => {}
                        }
            );

That's autovivification. You can get around this in a few ways. The
easiest way is to just turn it off. The lexical C<autovivification>
pragma is available on CPAN. Now you don't add to the hash:

    {
        no autovivification;
        my %hash;
        if( exists $hash{key1}{key2}{key3} ) {
            ...;
        }
    }

The L<Data::Diver> module on CPAN can do it for you too. Its C<Dive>
subroutine can tell you not only if the keys exist but also get the
value:

    use Data::Diver qw(Dive);

    my @exists = Dive( \%hash, qw(key1 key2 key3) );
    if(  ! @exists  ) {
        ...; # keys do not exist
    }
    elsif(  ! defined $exists[0]  ) {
        ...; # keys exist but value is undef
    }

You can easily do this yourself too by checking each level of the hash
before you move onto the next level. This is essentially what
L<Data::Diver> does for you:

    if( check_hash( \%hash, qw(key1 key2 key3) ) ) {
        ...;
    }

    sub check_hash {
       my( $hash, @keys ) = @_;

       return unless @keys;

       foreach my $key ( @keys ) {
           return unless eval { exists $hash->{$key} };
           $hash = $hash->{$key};
        }

       return 1;
    }

=head2 How can I prevent addition of unwanted keys into a hash?

Since version 5.8.0, hashes can be I<restricted> to a fixed number
of given keys. Methods for creating and dealing with restricted hashes
are exported by the L<Hash::Util> module.

=head1 Data: Misc

=head2 How do I handle binary data correctly?

Perl is binary-clean, so it can handle binary data just fine.
On Windows or DOS, however, you have to use C<binmode> for binary
files to avoid conversions for line endings. In general, you should
use C<binmode> any time you want to work with binary data.

Also see L<perlfunc/"binmode"> or L<perlopentut>.

If you're concerned about 8-bit textual data then see L<perllocale>.
If you want to deal with multibyte characters, however, there are
some gotchas. See the section on Regular Expressions.

=head2 How do I determine whether a scalar is a number/whole/integer/float?

Assuming that you don't care about IEEE notations like "NaN" or
"Infinity", you probably just want to use a regular expression (see also
L<perlretut> and L<perlre>):

    use 5.010;

    if ( /\D/ )
        { say "\thas nondigits"; }
    if ( /^\d+\z/ )
        { say "\tis a whole number"; }
    if ( /^-?\d+\z/ )
        { say "\tis an integer"; }
    if ( /^[+-]?\d+\z/ )
        { say "\tis a +/- integer"; }
    if ( /^-?(?:\d+\.?|\.\d)\d*\z/ )
        { say "\tis a real number"; }
    if ( /^[+-]?(?=\.?\d)\d*\.?\d*(?:e[+-]?\d+)?\z/i )
        { say "\tis a C float" }

There are also some commonly used modules for the task.
L<Scalar::Util> (distributed with 5.8) provides access to perl's
internal function C<looks_like_number> for determining whether a
variable looks like a number. L<Data::Types> exports functions that
validate data types using both the above and other regular
expressions. Thirdly, there is L<Regexp::Common> which has regular
expressions to match various types of numbers. Those three modules are
available from the CPAN.

If you're on a POSIX system, Perl supports the C<POSIX::strtod>
function for converting strings to doubles (and also C<POSIX::strtol>
for longs). Its semantics are somewhat cumbersome, so here's a
C<getnum> wrapper function for more convenient access. This function
takes a string and returns the number it found, or C<undef> for input
that isn't a C float. The C<is_numeric> function is a front end to
C<getnum> if you just want to say, "Is this a float?"

    sub getnum {
        use POSIX qw(strtod);
        my $str = shift;
        $str =~ s/^\s+//;
        $str =~ s/\s+$//;
        $! = 0;
        my($num, $unparsed) = strtod($str);
        if (($str eq '') || ($unparsed != 0) || $!) {
                return undef;
        }
        else {
            return $num;
        }
    }

    sub is_numeric { defined getnum($_[0]) }

Or you could check out the L<String::Scanf> module on the CPAN
instead.

=head2 How do I keep persistent data across program calls?

For some specific applications, you can use one of the DBM modules.
See L<AnyDBM_File>. More generically, you should consult the L<FreezeThaw>
or L<Storable> modules from CPAN. Starting from Perl 5.8, L<Storable> is part
of the standard distribution. Here's one example using L<Storable>'s C<store>
and C<retrieve> functions:

    use Storable;
    store(\%hash, "filename");

    # later on...
    $href = retrieve("filename");        # by ref
    %hash = %{ retrieve("filename") };   # direct to hash

=head2 How do I print out or copy a recursive data structure?

The L<Data::Dumper> module on CPAN (or the 5.005 release of Perl) is great
for printing out data structures. The L<Storable> module on CPAN (or the
5.8 release of Perl), provides a function called C<dclone> that recursively
copies its argument.

    use Storable qw(dclone);
    $r2 = dclone($r1);

Where C<$r1> can be a reference to any kind of data structure you'd like.
It will be deeply copied. Because C<dclone> takes and returns references,
you'd have to add extra punctuation if you had a hash of arrays that
you wanted to copy.

    %newhash = %{ dclone(\%oldhash) };

=head2 How do I define methods for every class/object?

(contributed by Ben Morrow)

You can use the C<UNIVERSAL> class (see L<UNIVERSAL>). However, please
be very careful to consider the consequences of doing this: adding
methods to every object is very likely to have unintended
consequences. If possible, it would be better to have all your object
inherit from some common base class, or to use an object system like
Moose that supports roles.

=head2 How do I verify a credit card checksum?

Get the L<Business::CreditCard> module from CPAN.

=head2 How do I pack arrays of doubles or floats for XS code?

The arrays.h/arrays.c code in the L<PGPLOT> module on CPAN does just this.
If you're doing a lot of float or double processing, consider using
the L<PDL> module from CPAN instead--it makes number-crunching easy.

See L<https://metacpan.org/release/PGPLOT> for the code.


=head1 AUTHOR AND COPYRIGHT

Copyright (c) 1997-2010 Tom Christiansen, Nathan Torkington, and
other authors as noted. All rights reserved.

This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.

Irrespective of its distribution, all code examples in this file
are hereby placed into the public domain. You are permitted and
encouraged to use this code in your own programs for fun
or for profit as you see fit. A simple comment in the code giving
credit would be courteous but is not required.
                                                   usr/local/lib/perl5/5.40.0/pod/perlfaq5.pod                                                         0000644 0000000 0000000 00000155701 14714567415 016524  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        =head1 NAME

perlfaq5 - Files and Formats

=head1 VERSION

version 5.20240218

=head1 DESCRIPTION

This section deals with I/O and the "f" issues: filehandles, flushing,
formats, and footers.

=head2 How do I flush/unbuffer an output filehandle? Why must I do this?
X<flush> X<buffer> X<unbuffer> X<autoflush>

(contributed by brian d foy)

You might like to read Mark Jason Dominus's "Suffering From Buffering"
at L<http://perl.plover.com/FAQs/Buffering.html> .

Perl normally buffers output so it doesn't make a system call for every
bit of output. By saving up output, it makes fewer expensive system calls.
For instance, in this little bit of code, you want to print a dot to the
screen for every line you process to watch the progress of your program.
Instead of seeing a dot for every line, Perl buffers the output and you
have a long wait before you see a row of 50 dots all at once:

    # long wait, then row of dots all at once
    while( <> ) {
        print ".";
        print "\n" unless ++$count % 50;

        #... expensive line processing operations
    }

To get around this, you have to unbuffer the output filehandle, in this
case, C<STDOUT>. You can set the special variable C<$|> to a true value
(mnemonic: making your filehandles "piping hot"):

    $|++;

    # dot shown immediately
    while( <> ) {
        print ".";
        print "\n" unless ++$count % 50;

        #... expensive line processing operations
    }

The C<$|> is one of the per-filehandle special variables, so each
filehandle has its own copy of its value. If you want to merge
standard output and standard error for instance, you have to unbuffer
each (although STDERR might be unbuffered by default):

    {
        my $previous_default = select(STDOUT);  # save previous default
        $|++;                                   # autoflush STDOUT
        select(STDERR);
        $|++;                                   # autoflush STDERR, to be sure
        select($previous_default);              # restore previous default
    }

    # now should alternate . and +
    while( 1 ) {
        sleep 1;
        print STDOUT ".";
        print STDERR "+";
        print STDOUT "\n" unless ++$count % 25;
    }

Besides the C<$|> special variable, you can use C<binmode> to give
your filehandle a C<:unix> layer, which is unbuffered:

    binmode( STDOUT, ":unix" );

    while( 1 ) {
        sleep 1;
        print ".";
        print "\n" unless ++$count % 50;
    }

For more information on output layers, see the entries for C<binmode>
and L<open> in L<perlfunc>, and the L<PerlIO> module documentation.

If you are using L<IO::Handle> or one of its subclasses, you can
call the C<autoflush> method to change the settings of the
filehandle:

    use IO::Handle;
    open my( $io_fh ), ">", "output.txt";
    $io_fh->autoflush(1);

The L<IO::Handle> objects also have a C<flush> method. You can flush
the buffer any time you want without auto-buffering

    $io_fh->flush;

=head2 How do I change, delete, or insert a line in a file, or append to the beginning of a file?
X<file, editing>

(contributed by brian d foy)

The basic idea of inserting, changing, or deleting a line from a text
file involves reading and printing the file to the point you want to
make the change, making the change, then reading and printing the rest
of the file. Perl doesn't provide random access to lines (especially
since the record input separator, C<$/>, is mutable), although modules
such as L<Tie::File> can fake it.

A Perl program to do these tasks takes the basic form of opening a
file, printing its lines, then closing the file:

    open my $in,  '<',  $file      or die "Can't read old file: $!";
    open my $out, '>', "$file.new" or die "Can't write new file: $!";

    while( <$in> ) {
            print $out $_;
    }

    close $out;

Within that basic form, add the parts that you need to insert, change,
or delete lines.

To prepend lines to the beginning, print those lines before you enter
the loop that prints the existing lines.

    open my $in,  '<',  $file      or die "Can't read old file: $!";
    open my $out, '>', "$file.new" or die "Can't write new file: $!";

    print $out "# Add this line to the top\n"; # <--- HERE'S THE MAGIC

    while( <$in> ) {
            print $out $_;
    }

    close $out;

To change existing lines, insert the code to modify the lines inside
the C<while> loop. In this case, the code finds all lowercased
versions of "perl" and uppercases them. The happens for every line, so
be sure that you're supposed to do that on every line!

    open my $in,  '<',  $file      or die "Can't read old file: $!";
    open my $out, '>', "$file.new" or die "Can't write new file: $!";

    print $out "# Add this line to the top\n";

    while( <$in> ) {
        s/\b(perl)\b/Perl/g;
        print $out $_;
    }

    close $out;

To change only a particular line, the input line number, C<$.>, is
useful. First read and print the lines up to the one you  want to
change. Next, read the single line you want to change, change it, and
print it. After that, read the rest of the lines and print those:

    while( <$in> ) { # print the lines before the change
        print $out $_;
        last if $. == 4; # line number before change
    }

    my $line = <$in>;
    $line =~ s/\b(perl)\b/Perl/g;
    print $out $line;

    while( <$in> ) { # print the rest of the lines
        print $out $_;
    }

To skip lines, use the looping controls. The C<next> in this example
skips comment lines, and the C<last> stops all processing once it
encounters either C<__END__> or C<__DATA__>.

    while( <$in> ) {
        next if /^\s+#/;             # skip comment lines
        last if /^__(END|DATA)__$/;  # stop at end of code marker
        print $out $_;
    }

Do the same sort of thing to delete a particular line by using C<next>
to skip the lines you don't want to show up in the output. This
example skips every fifth line:

    while( <$in> ) {
        next unless $. % 5;
        print $out $_;
    }

If, for some odd reason, you really want to see the whole file at once
rather than processing line-by-line, you can slurp it in (as long as
you can fit the whole thing in memory!):

    open my $in,  '<',  $file      or die "Can't read old file: $!"
    open my $out, '>', "$file.new" or die "Can't write new file: $!";

    my $content = do { local $/; <$in> }; # slurp!

        # do your magic here

    print $out $content;

Modules such as L<Path::Tiny> and L<Tie::File> can help with that
too. If you can, however, avoid reading the entire file at once. Perl
won't give that memory back to the operating system until the process
finishes.

You can also use Perl one-liners to modify a file in-place. The
following changes all 'Fred' to 'Barney' in F<inFile.txt>, overwriting
the file with the new contents. With the C<-p> switch, Perl wraps a
C<while> loop around the code you specify with C<-e>, and C<-i> turns
on in-place editing. The current line is in C<$_>. With C<-p>, Perl
automatically prints the value of C<$_> at the end of the loop. See
L<perlrun> for more details.

    perl -pi -e 's/Fred/Barney/' inFile.txt

To make a backup of C<inFile.txt>, give C<-i> a file extension to add:

    perl -pi.bak -e 's/Fred/Barney/' inFile.txt

To change only the fifth line, you can add a test checking C<$.>, the
input line number, then only perform the operation when the test
passes:

    perl -pi -e 's/Fred/Barney/ if $. == 5' inFile.txt

To add lines before a certain line, you can add a line (or lines!)
before Perl prints C<$_>:

    perl -pi -e 'print "Put before third line\n" if $. == 3' inFile.txt

You can even add a line to the beginning of a file, since the current
line prints at the end of the loop:

    perl -pi -e 'print "Put before first line\n" if $. == 1' inFile.txt

To insert a line after one already in the file, use the C<-n> switch.
It's just like C<-p> except that it doesn't print C<$_> at the end of
the loop, so you have to do that yourself. In this case, print C<$_>
first, then print the line that you want to add.

    perl -ni -e 'print; print "Put after fifth line\n" if $. == 5' inFile.txt

To delete lines, only print the ones that you want.

    perl -ni -e 'print if /d/' inFile.txt

=head2 How do I count the number of lines in a file?
X<file, counting lines> X<lines> X<line>

(contributed by brian d foy)

Conceptually, the easiest way to count the lines in a file is to
simply read them and count them:

    my $count = 0;
    while( <$fh> ) { $count++; }

You don't really have to count them yourself, though, since Perl
already does that with the C<$.> variable, which is the current line
number from the last filehandle read:

    1 while( <$fh> );
    my $count = $.;

If you want to use C<$.>, you can reduce it to a simple one-liner,
like one of these:

    % perl -lne '} print $.; {'    file

    % perl -lne 'END { print $. }' file

Those can be rather inefficient though. If they aren't fast enough for
you, you might just read chunks of data and count the number of
newlines:

    my $lines = 0;
    open my($fh), '<:raw', $filename or die "Can't open $filename: $!";
    while( sysread $fh, $buffer, 4096 ) {
        $lines += ( $buffer =~ tr/\n// );
    }
    close $fh;

However, that doesn't work if the line ending isn't a newline. You
might change that C<tr///> to a C<s///> so you can count the number of
times the input record separator, C<$/>, shows up:

    my $lines = 0;
    open my($fh), '<:raw', $filename or die "Can't open $filename: $!";
    while( sysread $fh, $buffer, 4096 ) {
        $lines += ( $buffer =~ s|$/||g; );
    }
    close $fh;

If you don't mind shelling out, the C<wc> command is usually the
fastest, even with the extra interprocess overhead. Ensure that you
have an untainted filename though:

    #!perl -T

    $ENV{PATH} = undef;

    my $lines;
    if( $filename =~ /^([0-9a-z_.]+)\z/ ) {
        $lines = `/usr/bin/wc -l $1`
        chomp $lines;
    }

=head2 How do I delete the last N lines from a file?
X<lines> X<file>

(contributed by brian d foy)

The easiest conceptual solution is to count the lines in the
file then start at the beginning and print the number of lines
(minus the last N) to a new file.

Most often, the real question is how you can delete the last N lines
without making more than one pass over the file, or how to do it
without a lot of copying. The easy concept is the hard reality when
you might have millions of lines in your file.

One trick is to use L<File::ReadBackwards>, which starts at the end of
the file. That module provides an object that wraps the real filehandle
to make it easy for you to move around the file. Once you get to the
spot you need, you can get the actual filehandle and work with it as
normal. In this case, you get the file position at the end of the last
line you want to keep and truncate the file to that point:

    use File::ReadBackwards;

    my $filename = 'test.txt';
    my $Lines_to_truncate = 2;

    my $bw = File::ReadBackwards->new( $filename )
        or die "Could not read backwards in [$filename]: $!";

    my $lines_from_end = 0;
    until( $bw->eof or $lines_from_end == $Lines_to_truncate ) {
        print "Got: ", $bw->readline;
        $lines_from_end++;
    }

    truncate( $filename, $bw->tell );

The L<File::ReadBackwards> module also has the advantage of setting
the input record separator to a regular expression.

You can also use the L<Tie::File> module which lets you access
the lines through a tied array. You can use normal array operations
to modify your file, including setting the last index and using
C<splice>.

=head2 How can I use Perl's C<-i> option from within a program?
X<-i> X<in-place>

C<-i> sets the value of Perl's C<$^I> variable, which in turn affects
the behavior of C<< <> >>; see L<perlrun> for more details. By
modifying the appropriate variables directly, you can get the same
behavior within a larger program. For example:

    # ...
    {
        local($^I, @ARGV) = ('.orig', glob("*.c"));
        while (<>) {
            if ($. == 1) {
                print "This line should appear at the top of each file\n";
            }
            s/\b(p)earl\b/${1}erl/i;        # Correct typos, preserving case
            print;
            close ARGV if eof;              # Reset $.
        }
    }
    # $^I and @ARGV return to their old values here

This block modifies all the C<.c> files in the current directory,
leaving a backup of the original data from each file in a new
C<.c.orig> file.

=head2 How can I copy a file?
X<copy> X<file, copy> X<File::Copy>

(contributed by brian d foy)

Use the L<File::Copy> module. It comes with Perl and can do a
true copy across file systems, and it does its magic in
a portable fashion.

    use File::Copy;

    copy( $original, $new_copy ) or die "Copy failed: $!";

If you can't use L<File::Copy>, you'll have to do the work yourself:
open the original file, open the destination file, then print
to the destination file as you read the original. You also have to
remember to copy the permissions, owner, and group to the new file.

=head2 How do I make a temporary file name?
X<file, temporary>

If you don't need to know the name of the file, you can use C<open()>
with C<undef> in place of the file name. In Perl 5.8 or later, the
C<open()> function creates an anonymous temporary file:

    open my $tmp, '+>', undef or die $!;

Otherwise, you can use the File::Temp module.

    use File::Temp qw/ tempfile tempdir /;

    my $dir = tempdir( CLEANUP => 1 );
    ($fh, $filename) = tempfile( DIR => $dir );

    # or if you don't need to know the filename

    my $fh = tempfile( DIR => $dir );

The File::Temp has been a standard module since Perl 5.6.1. If you
don't have a modern enough Perl installed, use the C<new_tmpfile>
class method from the IO::File module to get a filehandle opened for
reading and writing. Use it if you don't need to know the file's name:

    use IO::File;
    my $fh = IO::File->new_tmpfile()
        or die "Unable to make new temporary file: $!";

If you're committed to creating a temporary file by hand, use the
process ID and/or the current time-value. If you need to have many
temporary files in one process, use a counter:

    BEGIN {
        use Fcntl;
        use File::Spec;
        my $temp_dir  = File::Spec->tmpdir();
        my $file_base = sprintf "%d-%d-0000", $$, time;
        my $base_name = File::Spec->catfile($temp_dir, $file_base);

        sub temp_file {
            my $fh;
            my $count = 0;
            until( defined(fileno($fh)) || $count++ > 100 ) {
                $base_name =~ s/-(\d+)$/"-" . (1 + $1)/e;
                # O_EXCL is required for security reasons.
                sysopen $fh, $base_name, O_WRONLY|O_EXCL|O_CREAT;
            }

            if( defined fileno($fh) ) {
                return ($fh, $base_name);
            }
            else {
                return ();
            }
        }
    }

=head2 How can I manipulate fixed-record-length files?
X<fixed-length> X<file, fixed-length records>

The most efficient way is using L<pack()|perlfunc/"pack"> and
L<unpack()|perlfunc/"unpack">. This is faster than using
L<substr()|perlfunc/"substr"> when taking many, many strings. It is
slower for just a few.

Here is a sample chunk of code to break up and put back together again
some fixed-format input lines, in this case from the output of a normal,
Berkeley-style ps:

    # sample input line:
    #   15158 p5  T      0:00 perl /home/tchrist/scripts/now-what
    my $PS_T = 'A6 A4 A7 A5 A*';
    open my $ps, '-|', 'ps';
    print scalar <$ps>;
    my @fields = qw( pid tt stat time command );
    while (<$ps>) {
        my %process;
        @process{@fields} = unpack($PS_T, $_);
        for my $field ( @fields ) {
            print "$field: <$process{$field}>\n";
        }
        print 'line=', pack($PS_T, @process{@fields} ), "\n";
    }

We've used a hash slice in order to easily handle the fields of each row.
Storing the keys in an array makes it easy to operate on them as a
group or loop over them with C<for>. It also avoids polluting the program
with global variables and using symbolic references.

=head2 How can I make a filehandle local to a subroutine? How do I pass filehandles between subroutines? How do I make an array of filehandles?
X<filehandle, local> X<filehandle, passing> X<filehandle, reference>

As of perl5.6, open() autovivifies file and directory handles
as references if you pass it an uninitialized scalar variable.
You can then pass these references just like any other scalar,
and use them in the place of named handles.

    open my    $fh, $file_name;

    open local $fh, $file_name;

    print $fh "Hello World!\n";

    process_file( $fh );

If you like, you can store these filehandles in an array or a hash.
If you access them directly, they aren't simple scalars and you
need to give C<print> a little help by placing the filehandle
reference in braces. Perl can only figure it out on its own when
the filehandle reference is a simple scalar.

    my @fhs = ( $fh1, $fh2, $fh3 );

    for( $i = 0; $i <= $#fhs; $i++ ) {
        print {$fhs[$i]} "just another Perl answer, \n";
    }

Before perl5.6, you had to deal with various typeglob idioms
which you may see in older code.

    open FILE, "> $filename";
    process_typeglob(   *FILE );
    process_reference( \*FILE );

    sub process_typeglob  { local *FH = shift; print FH  "Typeglob!" }
    sub process_reference { local $fh = shift; print $fh "Reference!" }

If you want to create many anonymous handles, you should
check out the Symbol or IO::Handle modules.

=head2 How can I use a filehandle indirectly?
X<filehandle, indirect>

An indirect filehandle is the use of something other than a symbol
in a place that a filehandle is expected. Here are ways
to get indirect filehandles:

    $fh =   SOME_FH;       # bareword is strict-subs hostile
    $fh =  "SOME_FH";      # strict-refs hostile; same package only
    $fh =  *SOME_FH;       # typeglob
    $fh = \*SOME_FH;       # ref to typeglob (bless-able)
    $fh =  *SOME_FH{IO};   # blessed IO::Handle from *SOME_FH typeglob

Or, you can use the C<new> method from one of the IO::* modules to
create an anonymous filehandle and store that in a scalar variable.

    use IO::Handle;                     # 5.004 or higher
    my $fh = IO::Handle->new();

Then use any of those as you would a normal filehandle. Anywhere that
Perl is expecting a filehandle, an indirect filehandle may be used
instead. An indirect filehandle is just a scalar variable that contains
a filehandle. Functions like C<print>, C<open>, C<seek>, or
the C<< <FH> >> diamond operator will accept either a named filehandle
or a scalar variable containing one:

    ($ifh, $ofh, $efh) = (*STDIN, *STDOUT, *STDERR);
    print $ofh "Type it: ";
    my $got = <$ifh>
    print $efh "What was that: $got";

If you're passing a filehandle to a function, you can write
the function in two ways:

    sub accept_fh {
        my $fh = shift;
        print $fh "Sending to indirect filehandle\n";
    }

Or it can localize a typeglob and use the filehandle directly:

    sub accept_fh {
        local *FH = shift;
        print  FH "Sending to localized filehandle\n";
    }

Both styles work with either objects or typeglobs of real filehandles.
(They might also work with strings under some circumstances, but this
is risky.)

    accept_fh(*STDOUT);
    accept_fh($handle);

In the examples above, we assigned the filehandle to a scalar variable
before using it. That is because only simple scalar variables, not
expressions or subscripts of hashes or arrays, can be used with
built-ins like C<print>, C<printf>, or the diamond operator. Using
something other than a simple scalar variable as a filehandle is
illegal and won't even compile:

    my @fd = (*STDIN, *STDOUT, *STDERR);
    print $fd[1] "Type it: ";                           # WRONG
    my $got = <$fd[0]>                                  # WRONG
    print $fd[2] "What was that: $got";                 # WRONG

With C<print> and C<printf>, you get around this by using a block and
an expression where you would place the filehandle:

    print  { $fd[1] } "funny stuff\n";
    printf { $fd[1] } "Pity the poor %x.\n", 3_735_928_559;
    # Pity the poor deadbeef.

That block is a proper block like any other, so you can put more
complicated code there. This sends the message out to one of two places:

    my $ok = -x "/bin/cat";
    print { $ok ? $fd[1] : $fd[2] } "cat stat $ok\n";
    print { $fd[ 1+ ($ok || 0) ]  } "cat stat $ok\n";

This approach of treating C<print> and C<printf> like object methods
calls doesn't work for the diamond operator. That's because it's a
real operator, not just a function with a comma-less argument. Assuming
you've been storing typeglobs in your structure as we did above, you
can use the built-in function named C<readline> to read a record just
as C<< <> >> does. Given the initialization shown above for @fd, this
would work, but only because readline() requires a typeglob. It doesn't
work with objects or strings, which might be a bug we haven't fixed yet.

    $got = readline($fd[0]);

Let it be noted that the flakiness of indirect filehandles is not
related to whether they're strings, typeglobs, objects, or anything else.
It's the syntax of the fundamental operators. Playing the object
game doesn't help you at all here.

=head2 How can I open a filehandle to a string?
X<string> X<open> X<IO::String> X<filehandle>

(contributed by Peter J. Holzer, hjp-usenet2@hjp.at)

Since Perl 5.8.0 a file handle referring to a string can be created by
calling open with a reference to that string instead of the filename.
This file handle can then be used to read from or write to the string:

    open(my $fh, '>', \$string) or die "Could not open string for writing";
    print $fh "foo\n";
    print $fh "bar\n";    # $string now contains "foo\nbar\n"

    open(my $fh, '<', \$string) or die "Could not open string for reading";
    my $x = <$fh>;    # $x now contains "foo\n"

With older versions of Perl, the L<IO::String> module provides similar
functionality.

=head2 How can I set up a footer format to be used with write()?
X<footer>

There's no builtin way to do this, but L<perlform> has a couple of
techniques to make it possible for the intrepid hacker.

=head2 How can I write() into a string?
X<write, into a string>

(contributed by brian d foy)

If you want to C<write> into a string, you just have to <open> a
filehandle to a string, which Perl has been able to do since Perl 5.6:
