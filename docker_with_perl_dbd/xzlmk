
=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::API - Primary interface for writing Test2 based testing
tools.

=over 4

=item ***INTERNALS NOTE***

=item DESCRIPTION

=item SYNOPSIS

=over 4

=item WRITING A TOOL

=item TESTING YOUR TOOLS

=item OTHER API FUNCTIONS

=back

=item MAIN API EXPORTS

=over 4

=item context(...)

$ctx = context(), $ctx = context(%params), level => $int, wrapped => $int,
stack => $stack, hub => $hub, on_init => sub { ... }, on_release => sub {
... }

=item release($;$)

release $ctx;, release $ctx, ...;

=item context_do(&;@)

=item no_context(&;$)

no_context { ... };, no_context { ... } $hid;

=item intercept(&)

=item run_subtest(...)

$NAME, \&CODE, $BUFFERED or \%PARAMS, 'buffered' => $bool, 'inherit_trace'
=> $bool, 'no_fork' => $bool, @ARGS, Things not affected by this flag,
Things that are affected by this flag, Things that are formatter dependent

=back

=item OTHER API EXPORTS

=over 4

=item STATUS AND INITIALIZATION STATE

$bool = test2_init_done(), $bool = test2_load_done(), test2_set_is_end(),
test2_set_is_end($bool), $bool = test2_get_is_end(), $stack =
test2_stack(), $bool = test2_is_testing_done(), test2_ipc_disable, $bool =
test2_ipc_disabled, test2_ipc_wait_enable(), test2_ipc_wait_disable(),
$bool = test2_ipc_wait_enabled(), $bool = test2_no_wait(),
test2_no_wait($bool), $fh = test2_stdout(), $fh = test2_stderr(),
test2_reset_io()

=item BEHAVIOR HOOKS

test2_add_callback_exit(sub { ... }), test2_add_callback_post_load(sub {
... }), test2_add_callback_testing_done(sub { ... }),
test2_add_callback_context_acquire(sub { ... }),
test2_add_callback_context_init(sub { ... }),
test2_add_callback_context_release(sub { ... }),
test2_add_callback_pre_subtest(sub { ... }), @list =
test2_list_context_acquire_callbacks(), @list =
test2_list_context_init_callbacks(), @list =
test2_list_context_release_callbacks(), @list =
test2_list_exit_callbacks(), @list = test2_list_post_load_callbacks(),
@list = test2_list_pre_subtest_callbacks(), test2_add_uuid_via(sub { ...
}), $sub = test2_add_uuid_via()

=item IPC AND CONCURRENCY

$bool = test2_has_ipc(), $ipc = test2_ipc(), test2_ipc_add_driver($DRIVER),
@drivers = test2_ipc_drivers(), $bool = test2_ipc_polling(),
test2_ipc_enable_polling(), test2_ipc_disable_polling(),
test2_ipc_enable_shm(), test2_ipc_set_pending($uniq_val), $pending =
test2_ipc_get_pending(), $timeout = test2_ipc_get_timeout(),
test2_ipc_set_timeout($timeout)

=item MANAGING FORMATTERS

$formatter = test2_formatter, test2_formatter_set($class_or_instance),
@formatters = test2_formatters(), test2_formatter_add($class_or_instance)

=item TIME STAMPS

test2_enable_trace_stamps(), test2_disable_trace_stamps(), $bool =
test2_trace_stamps_enabled()

=back

=item OTHER EXAMPLES

=item SEE ALSO

=item MAGIC

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::API::Breakage - What breaks at what version

=over 4

=item DESCRIPTION

=item FUNCTIONS

%mod_ver = upgrade_suggested(), %mod_ver =
Test2::API::Breakage->upgrade_suggested(), %mod_ver = upgrade_required(),
%mod_ver = Test2::API::Breakage->upgrade_required(), %mod_ver =
known_broken(), %mod_ver = Test2::API::Breakage->known_broken()

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::API::Context - Object to represent a testing context.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item CRITICAL DETAILS

you MUST always use the context() sub from Test2::API, You MUST always
release the context when done with it, You MUST NOT pass context objects
around, You MUST NOT store or cache a context for later, You SHOULD obtain
your context as soon as possible in a given tool

=item METHODS

$ctx->done_testing;, $clone = $ctx->snapshot(), $ctx->release(),
$ctx->throw($message), $ctx->alert($message), $stack = $ctx->stack(), $hub
= $ctx->hub(), $dbg = $ctx->trace(), $ctx->do_in_context(\&code, @args);,
$ctx->restore_error_vars(), $! = $ctx->errno(), $? = $ctx->child_error(),
$@ = $ctx->eval_error()

=over 4

=item EVENT PRODUCTION METHODS

$event = $ctx->pass(), $event = $ctx->pass($name), $true =
$ctx->pass_and_release(), $true = $ctx->pass_and_release($name), my $event
= $ctx->fail(), my $event = $ctx->fail($name), my $event =
$ctx->fail($name, @diagnostics), my $false = $ctx->fail_and_release(), my
$false = $ctx->fail_and_release($name), my $false =
$ctx->fail_and_release($name, @diagnostics), $event = $ctx->ok($bool,
$name), $event = $ctx->ok($bool, $name, \@on_fail), $event =
$ctx->note($message), $event = $ctx->diag($message), $event =
$ctx->plan($max), $event = $ctx->plan(0, 'SKIP', $reason), $event =
$ctx->skip($name, $reason);, $event = $ctx->bail($reason), $event =
$ctx->send_ev2(%facets), $event = $ctx->build_e2(%facets), $event =
$ctx->send_ev2_and_release($Type, %parameters), $event =
$ctx->send_event($Type, %parameters), $event = $ctx->build_event($Type,
%parameters), $event = $ctx->send_event_and_release($Type, %parameters)

=back

=item HOOKS

=over 4

=item INIT HOOKS

=item RELEASE HOOKS

=back

=item THIRD PARTY META-DATA

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>, Kent Fredric
E<lt>kentnl@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::API::Instance - Object used by Test2::API under the hood

=over 4

=item DESCRIPTION

=item SYNOPSIS

$pid = $obj->pid, $obj->tid, $obj->reset(), $obj->load(), $bool =
$obj->loaded, $arrayref = $obj->post_load_callbacks,
$obj->add_post_load_callback(sub { ... }), $hashref = $obj->contexts(),
$arrayref = $obj->context_acquire_callbacks, $arrayref =
$obj->context_init_callbacks, $arrayref = $obj->context_release_callbacks,
$arrayref = $obj->pre_subtest_callbacks,
$obj->add_context_init_callback(sub { ... }),
$obj->add_context_release_callback(sub { ... }),
$obj->add_pre_subtest_callback(sub { ... }), $obj->set_exit(),
$obj->set_ipc_pending($val), $pending = $obj->get_ipc_pending(), $timeout =
$obj->ipc_timeout;, $obj->set_ipc_timeout($timeout);, $drivers =
$obj->ipc_drivers, $obj->add_ipc_driver($DRIVER_CLASS), $bool =
$obj->ipc_polling, $obj->enable_ipc_polling, $obj->disable_ipc_polling,
$bool = $obj->no_wait, $bool = $obj->set_no_wait($bool), $arrayref =
$obj->exit_callbacks, $obj->add_exit_callback(sub { ... }), $bool =
$obj->finalized, $ipc = $obj->ipc, $obj->ipc_disable, $bool =
$obj->ipc_disabled, $stack = $obj->stack, $formatter = $obj->formatter,
$bool = $obj->formatter_set(), $obj->add_formatter($class),
$obj->add_formatter($obj), $obj->set_add_uuid_via(sub { ... }), $sub =
$obj->add_uuid_via()

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::API::InterceptResult - Representation of a list of events.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item METHODS

=over 4

=item CONSTRUCTION

$events = Test2::API::InterceptResult->new(@EVENTS), $events =
Test2::API::InterceptResult->new_from_ref(\@EVENTS), $clone =
$events->clone()

=item NORMALIZATION

@events = $events->event_list, $hub = $events->hub, $state =
$events->state, $new = $events->upgrade, $events->upgrade(in_place =>
$BOOL), $new = $events->squash_info, $events->squash_info(in_place =>
$BOOL)

=item FILTERING

in_place => $BOOL, args => \@ARGS, $events->grep($CALL, %PARAMS),
$events->asserts(%PARAMS), $events->subtests(%PARAMS),
$events->diags(%PARAMS), $events->notes(%PARAMS), $events->errors(%PARAMS),
$events->plans(%PARAMS), $events->causes_fail(%PARAMS),
$events->causes_failure(%PARAMS)

=item MAPPING

$arrayref = $events->map($CALL, %PARAMS), $arrayref =
$events->flatten(%PARAMS), $arrayref = $events->briefs(%PARAMS), $arrayref
= $events->summaries(%PARAMS), $arrayref =
$events->subtest_results(%PARAMS), $arrayref =
$events->diag_messages(%PARAMS), $arrayref =
$events->note_messages(%PARAMS), $arrayref =
$events->error_messages(%PARAMS)

=back

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::API::InterceptResult::Event - Representation of an event for
use in
testing other test tools.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item METHODS

=over 4

=item !!! IMPORTANT NOTES ON DESIGN !!!

=item ATTRIBUTES

$hashref = $event->facet_data, $class = $event->result_class

=item DUPLICATION

$copy = $event->clone

=item CONDENSED MULTI-FACET DATA

$bool = $event->causes_failure, $bool = $event->causes_fail,
STRING_OR_EMPTY_LIST = $event->brief, $hashref = $event->flatten, $hashref
= $event->flatten(include_subevents => 1), always present, Present if the
event has a trace facet, If an assertion is present, If a plan is present:,
If amnesty facets are present, If Info (note/diag) facets are present, If
error facets are present, Present if the event is a subtest, If a bail-out
is being requested, $hashref = $event->summary()

=item DIRECT ARBITRARY FACET ACCESS

@list_of_facets = $event->facet($name), $undef_or_facet =
$event->the_facet($name)

=item TRACE FACET

@list_of_facets = $event->trace, $undef_or_hashref = $event->the_trace,
$undef_or_arrayref = $event->frame, $undef_or_string =
$event->trace_details, $undef_or_string = $event->trace_package,
$undef_or_string = $event->trace_file, $undef_or_integer =
$event->trace_line, $undef_or_string = $event->trace_subname,
$undef_or_string = $event->trace_tool, $undef_or_string =
$event->trace_signature

=item ASSERT FACET

$bool = $event->has_assert, $undef_or_hashref = $event->the_assert,
@list_of_facets = $event->assert, EMPTY_LIST_OR_STRING =
$event->assert_brief

=item SUBTESTS (PARENT FACET)

$bool = $event->has_subtest, $undef_or_hashref = $event->the_subtest,
@list_of_facets = $event->subtest, EMPTY_LIST_OR_OBJECT =
$event->subtest_result

=item CONTROL FACET (BAILOUT, ENCODING)

$bool = $event->has_bailout, $undef_hashref = $event->the_bailout,
EMPTY_LIST_OR_HASHREF = $event->bailout, EMPTY_LIST_OR_STRING =
$event->bailout_brief, EMPTY_LIST_OR_STRING = $event->bailout_reason

=item PLAN FACET

$bool = $event->has_plan, $undef_or_hashref = $event->the_plan,
@list_if_hashrefs = $event->plan, EMPTY_LIST_OR_STRING $event->plan_brief

=item AMNESTY FACET (TODO AND SKIP)

$event->has_amnesty, $event->the_amnesty, $event->amnesty,
$event->amnesty_reasons, $event->has_todos, $event->todos,
$event->todo_reasons, $event->has_skips, $event->skips,
$event->skip_reasons, $event->has_other_amnesty, $event->other_amnesty,
$event->other_amnesty_reasons

=item ERROR FACET (CAPTURED EXCEPTIONS)

$event->has_errors, $event->the_errors, $event->errors,
$event->error_messages, $event->error_brief

=item INFO FACET (DIAG, NOTE)

$event->has_info, $event->the_info, $event->info, $event->info_messages,
$event->has_diags, $event->diags, $event->diag_messages, $event->has_notes,
$event->notes, $event->note_messages, $event->has_other_info,
$event->other_info, $event->other_info_messages

=back

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::API::InterceptResult::Hub - Hub used by InterceptResult.

=over 4

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::API::InterceptResult::Squasher - Encapsulation of the
algorithm that
squashes diags into assertions.

=over 4

=item DESCRIPTION

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::API::Stack - Object to manage a stack of L<Test2::Hub>
instances.

=over 4

=item ***INTERNALS NOTE***

=item DESCRIPTION

=item SYNOPSIS

=item METHODS

$stack = Test2::API::Stack->new(), $hub = $stack->new_hub(), $hub =
$stack->new_hub(%params), $hub = $stack->new_hub(%params, class => $class),
$hub = $stack->top(), $hub = $stack->peek(), $stack->cull, @hubs =
$stack->all, $stack->clear, $stack->push($hub), $stack->pop($hub)

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::AsyncSubtest - Object representing an async subtest.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item CONSTRUCTION

name => $name (required), send_to => $hub (optional), trace => $trace
(optional), hub => $hub (optional)

=item METHODS

=over 4

=item SIMPLE ACCESSORS

$bool = $ast->active, $arrayref = $ast->children, $arrayref = $ast->events,
$bool = $ast->finished, $hub = $ast->hub, $int = $ast->id, $str =
$ast->name, $pid = $ast->pid, $tid = $ast->tid, $hub = $ast->send_to,
$arrayref = $ast->stack, $trace = $ast->trace

=item INTERFACE

$ast->attach($id), $id = $ast->cleave, $ctx = $ast->context, $ast->detach,
$ast->finish, $ast->finish(%options), collapse => 1, silent => 1, no_plan
=> 1, skip => "reason", $out = $ast->fork, $bool = $ast->pending, $bool =
$ast->ready, $ast->run(sub { ... }), $pid = $ast->run_fork(sub { ... }), my
$thr = $ast->run_thread(sub { ... });, $passing = $ast->start, $ast->stop,
$ast->wait

=back

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::AsyncSubtest::Event::Attach - Event to attach a subtest to
the parent.

=over 4

=item DESCRIPTION

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::AsyncSubtest::Event::Detach - Event to detach a subtest from
the parent.

=over 4

=item DESCRIPTION

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::AsyncSubtest::Hub - Hub used by async subtests.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item METHODS

$ast = $hub->ast

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Bundle - Documentation for bundles.

=over 4

=item DESCRIPTION

=item FAQ

Should my bundle subclass Test2::Bundle?

=item HOW DO I WRITE A BUNDLE?

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Bundle::Extended - Old name for Test2::V0

=over 4

=item *** DEPRECATED ***

=item DESCRIPTION

=item SYNOPSIS

=item RESOLVING CONFLICTS WITH MOOSE

=over 4

=item TAGS

:v1, :DEFAULT

=item RENAMING ON IMPORT

':v1', '!ok', ok => {-as => 'my_ok'}

=back

=item PRAGMAS

=over 4

=item STRICT

=item WARNINGS

=item UTF8

=back

=item PLUGINS

=over 4

=item SRAND

=item UTF8

=item EXIT SUMMARY

=back

=item API FUNCTIONS

$ctx = context(), $events = intercept { ... }

=item TOOLS

=over 4

=item TARGET

$CLASS, $class = CLASS()

=item DEFER

def $func => @args;, do_def()

=item BASIC

ok($bool, $name), pass($name), fail($name), diag($message), note($message),
$todo = todo($reason), todo $reason => sub { ... }, skip($reason, $count),
plan($count), skip_all($reason), done_testing(), bail_out($reason)

=item COMPARE

is($got, $want, $name), isnt($got, $do_not_want, $name), like($got,
qr/match/, $name), unlike($got, qr/mismatch/, $name), $check =
match(qr/pattern/), $check = mismatch(qr/pattern/), $check = validator(sub
{ return $bool }), $check = hash { ... }, $check = array { ... }, $check =
bag { ... }, $check = object { ... }, $check = meta { ... }, $check =
number($num), $check = string($str), $check = check_isa($class_name),
$check = in_set(@things), $check = not_in_set(@things), $check =
check_set(@things), $check = item($thing), $check = item($idx => $thing),
$check = field($name => $val), $check = call($method => $expect), $check =
call_list($method => $expect), $check = call_hash($method => $expect),
$check = prop($name => $expect), $check = check($thing), $check = T(),
$check = F(), $check = D(), $check = DF(), $check = E(), $check = DNE(),
$check = FDNE(), $check = U(), $check = L(), $check = exact_ref($ref),
end(), etc(), filter_items { grep { ... } @_ }, $check = event $type => ..,
@checks = fail_events $type => ..

=item CLASSIC COMPARE

cmp_ok($got, $op, $want, $name)

=item SUBTEST

subtest $name => sub { ... }

=item CLASS

can_ok($thing, @methods), isa_ok($thing, @classes), DOES_ok($thing, @roles)

=item ENCODING

set_encoding($encoding)

=item EXPORTS

imported_ok('function', '$scalar', ...), not_imported_ok('function',
'$scalar', ...)

=item REF

ref_ok($ref, $type), ref_is($got, $want), ref_is_not($got, $do_not_want)

=item MOCK

$control = mock .., $bool = mocked($thing)

=item EXCEPTION

$exception = dies { ... }, $bool = lives { ... }, $bool = try_ok { ... }

=item WARNINGS

$count = warns { ... }, $warning = warning { ... }, $warnings_ref =
warnings { ... }, $bool = no_warnings { ... }

=back

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Bundle::More - ALMOST a drop-in replacement for Test::More.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item PLUGINS

=item TOOLS

ok($bool, $name), pass($name), fail($name), skip($why, $count), $todo =
todo($why), diag($message), note($message), plan($count), skip_all($why),
done_testing(), BAIL_OUT($why), is($got, $want, $name), isnt($got,
$donotwant, $name), like($got, qr/match/, $name), unlike($got,
qr/mismatch/, $name), is_deeply($got, $want, "Deep compare"), cmp_ok($got,
$op, $want, $name), isa_ok($thing, @classes), can_ok($thing, @subs),
subtest $name => sub { ... }

=item KEY DIFFERENCES FROM Test::More

You cannot plan at import, You have three subs imported for use in
planning, isa_ok accepts different arguments

=over 4

=item THESE FUNCTIONS AND VARIABLES HAVE BEEN REMOVED

$TODO, use_ok(), require_ok(), todo_skip(), eq_array(), eq_hash(),
eq_set(), explain(), new_ok()

=back

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Bundle::Simple - ALMOST a drop-in replacement for
Test::Simple.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item PLUGINS

=item TOOLS

ok($bool, $name), plan($count), skip_all($reason), done_testing();

=item KEY DIFFERENCES FROM Test::Simple

You cannot plan at import, You have three subs imported for use in planning

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Compare - Test2 extension for writing deep comparison tools.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item EXPORTS

$delta = compare($got, $expect, \&convert), $build = get_build(),
push_build($build), $build = pop_build($build), build($class, sub { ... }),
$check = convert($thing), $check = convert($thing, $config), implicit_end
=> 1, use_regex => 1, use_code => 0, $check = strict_convert($thing),
implicit_end => 1, use_code => 0, use_regex => 0, $compare =
relaxed_convert($thing), implicit_end => 0, use_code => 1, use_regex => 1

=item WRITING A VARIANT OF IS/LIKE

compare(), \&convert, $delta

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Compare::Array - Internal representation of an array
comparison.

=over 4

=item DESCRIPTION

=item METHODS

$ref = $arr->inref(), $bool = $arr->ending, $arr->set_ending($bool),
$hashref = $arr->items(), $arr->set_items($hashref), $arrayref =
$arr->order(), $arr->set_order($arrayref), $name = $arr->name(), $bool =
$arr->verify(got => $got, exists => $bool), $idx = $arr->top_index(),
$arr->add_item($item), $arr->add_item($idx => $item), $arr->add_filter(sub
{ ... }), @deltas = $arr->deltas(got => $got, convert => \&convert, seen =>
\%seen)

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>

=item COPYRIGHT

=back

=head2 Test2::Compare::Bag - Internal representation of a bag comparison.

=over 4

=item DESCRIPTION

=item METHODS

$bool = $arr->ending, $arr->set_ending($bool), $arrayref = $arr->items(),
$arr->set_items($arrayref), $name = $arr->name(), $bool = $arr->verify(got
=> $got, exists => $bool), $arr->add_item($item), @deltas =
$arr->deltas(got => $got, convert => \&convert, seen => \%seen)

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>, Gianni Ceccarelli
E<lt>dakkar@thenautilus.netE<gt>

=item AUTHORS

Chad Granum E<lt>exodist@cpan.orgE<gt>, Gianni Ceccarelli
E<lt>dakkar@thenautilus.netE<gt>

=item COPYRIGHT

=back

=head2 Test2::Compare::Base - Base class for comparison classes.

=over 4

=item DESCRIPTION

=item SYNOPSIS

=item METHODS

$dclass = $check->delta_class, @deltas = $check->deltas(id => $id, exists
=> $bool, got => $got, convert => \&convert, seen => \%seen), @lines =
$check->got_lines($got), $op = $check->operator(), $op =
$check->operator($got), $bool = $check->verify(id => $id, exists => $bool,
got => $got, convert => \&convert, seen => \%seen), $name = $check->name,
$display = $check->render, $delta = $check->run(id => $id, exists => $bool,
got => $got, convert => \&convert, seen => \%seen)

=item SOURCE

=item MAINTAINERS

Chad Granum E<lt>exodist@cpan.orgE<gt>
